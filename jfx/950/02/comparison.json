{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n@@ -31,0 +34,2 @@\n+\n+import org.junit.AfterClass;\n@@ -34,2 +39,1 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import test.util.Util;\n@@ -63,2 +67,7 @@\n-        new Thread(() -> Application.launch(TestApp.class)).start();\n-        startupLatch.await();\n+\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void teardownOnce() {\n+        Util.shutdown();\n@@ -83,1 +92,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/DefaultExceptionHandlerTest.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n@@ -32,0 +35,1 @@\n+import org.junit.AfterClass;\n@@ -35,2 +39,1 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import test.util.Util;\n@@ -64,2 +67,6 @@\n-        new Thread(() -> Application.launch(TestApp.class)).start();\n-        startupLatch.await();\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void shutdown() {\n+        Util.shutdown();\n@@ -84,1 +91,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/ExceptionHandlerTest.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+\n+import test.util.Util;\n+\n@@ -30,0 +33,1 @@\n+import javafx.application.Platform;\n@@ -31,1 +35,3 @@\n-import junit.framework.Assert;\n+\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n@@ -62,2 +68,2 @@\n-        new Thread(() -> Application.launch(TestApp.class)).start();\n-        startupLatch.await(5, TimeUnit.SECONDS);\n+\n+        Util.launch(startupLatch, TestApp.class);\n@@ -67,0 +73,5 @@\n+    @AfterClass\n+    public static void shutdown() {\n+        Util.shutdown();\n+    }\n+\n@@ -73,1 +84,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/monocle\/headless\/HeadlessGeometry1Test.java","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n-import com.sun.glass.ui.Screen;\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -30,0 +31,1 @@\n+import javafx.application.Platform;\n@@ -31,1 +33,3 @@\n-import junit.framework.Assert;\n+\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n@@ -35,2 +39,3 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import com.sun.glass.ui.Screen;\n+\n+import test.util.Util;\n@@ -62,2 +67,2 @@\n-        new Thread(() -> Application.launch(TestApp.class)).start();\n-        startupLatch.await(5, TimeUnit.SECONDS);\n+\n+        Util.launch(startupLatch, TestApp.class);\n@@ -67,0 +72,5 @@\n+    @AfterClass\n+    public static void shutdown() {\n+        Util.shutdown();\n+    }\n+\n@@ -73,1 +83,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/monocle\/headless\/HeadlessGeometry2Test.java","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n@@ -30,1 +33,1 @@\n-import java.util.concurrent.TimeUnit;\n+\n@@ -35,1 +38,1 @@\n-import junit.framework.AssertionFailedError;\n+\n@@ -40,2 +43,1 @@\n-import static org.junit.Assert.*;\n-import static test.util.Util.TIMEOUT;\n+import test.util.Util;\n@@ -68,12 +70,1 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(MyApp.class, (String[]) null)).start();\n-\n-        try {\n-            if (!launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n-                throw new AssertionFailedError(\"Timeout waiting for Application to launch\");\n-            }\n-        } catch (InterruptedException ex) {\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n-        }\n+        Util.launch(launchLatch, MyApp.class);\n@@ -84,1 +75,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/HostServicesTest.java","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import static org.junit.Assert.assertEquals;\n+\n@@ -29,1 +31,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -31,0 +32,1 @@\n+\n@@ -34,1 +36,1 @@\n-import junit.framework.AssertionFailedError;\n+\n@@ -38,1 +40,0 @@\n-import test.util.Util;\n@@ -40,2 +41,1 @@\n-import static org.junit.Assert.*;\n-import static test.util.Util.TIMEOUT;\n+import test.util.Util;\n@@ -63,12 +63,1 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(MyApp.class, (String[])null)).start();\n-\n-        try {\n-            if (!launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n-                throw new AssertionFailedError(\"Timeout waiting for Application to launch\");\n-            }\n-        } catch (InterruptedException ex) {\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n-        }\n+        Util.launch(launchLatch, MyApp.class);\n@@ -79,1 +68,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/RunLaterTest.java","additions":8,"deletions":19,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static test.util.Util.TIMEOUT;\n+\n@@ -30,0 +34,1 @@\n+\n@@ -39,1 +44,0 @@\n-import org.junit.Test;\n@@ -42,0 +46,1 @@\n+import org.junit.Test;\n@@ -43,4 +48,1 @@\n-import junit.framework.AssertionFailedError;\n-import static test.util.Util.TIMEOUT;\n-\n-import static org.junit.Assert.*;\n+import test.util.Util;\n@@ -84,4 +86,1 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(MyApp.class, (String[]) null)).start();\n-        assertTrue(\"Timeout waiting for Application to launch\",\n-                launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS));\n+        Util.launch(launchLatch, MyApp.class);\n@@ -93,1 +92,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/font\/freetype\/PangoTest.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,7 @@\n+import static org.junit.Assert.fail;\n+\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.net.URL;\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -29,0 +36,1 @@\n+import javafx.scene.Scene;\n@@ -32,1 +40,0 @@\n-import javafx.scene.Scene;\n@@ -35,6 +42,0 @@\n-import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n-import java.net.URL;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n@@ -45,2 +46,0 @@\n-import static org.junit.Assert.fail;\n-import static org.junit.Assert.assertTrue;\n@@ -51,1 +50,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -90,4 +89,1 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        assertTrue(\"Timeout waiting for FX runtime to start\",\n-                startupLatch.await(15, TimeUnit.SECONDS));\n+        Util.launch(startupLatch, TestApp.class);\n@@ -98,4 +94,1 @@\n-        Util.runAndWait(() -> {\n-            stage.hide();\n-        });\n-        Platform.exit();\n+        Util.shutdown(stage);\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/iio\/LoadCorruptJPEGTest.java","additions":12,"deletions":19,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import static org.junit.Assert.assertEquals;\n+\n@@ -28,1 +30,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -31,0 +32,1 @@\n+\n@@ -34,1 +36,0 @@\n-import javafx.stage.Stage;\n@@ -40,1 +41,2 @@\n-import junit.framework.AssertionFailedError;\n+import javafx.stage.Stage;\n+\n@@ -42,1 +44,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -45,1 +46,2 @@\n-import static test.util.Util.TIMEOUT;\n+\n+import test.util.Util;\n@@ -70,13 +72,1 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(MyApp.class, (String[])null)).start();\n-\n-        try {\n-            if (!launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n-                throw new AssertionFailedError(\"Timeout waiting for Application to launch\");\n-            }\n-        } catch (InterruptedException ex) {\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n-        }\n-\n+        Util.launch(launchLatch, MyApp.class);\n@@ -88,1 +78,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/RT36296Test.java","additions":10,"deletions":20,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -36,1 +38,0 @@\n-import org.junit.Assert;\n@@ -40,1 +41,1 @@\n-import java.util.concurrent.CountDownLatch;\n+import test.util.Util;\n@@ -71,2 +72,1 @@\n-        new Thread(() -> Application.launch(TestApp.class)).start();\n-        startupLatch.await();\n+        Util.launch(startupLatch, TestApp.class);\n@@ -77,1 +77,1 @@\n-        Platform.runLater(primaryStage::hide);\n+        Util.shutdown(primaryStage);\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/tk\/quantum\/CloseWindowTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-import java.util.concurrent.TimeUnit;\n+\n@@ -40,0 +40,1 @@\n+\n@@ -43,0 +44,1 @@\n+\n@@ -46,2 +48,0 @@\n-import static org.junit.Assert.*;\n-\n@@ -50,1 +50,1 @@\n-    private static CountDownLatch startupLatch;\n+    private static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -86,4 +86,1 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        assertTrue(\"Timeout waiting for FX runtime to start\",\n-                startupLatch.await(15, TimeUnit.SECONDS));\n+        Util.launch(startupLatch, TestApp.class);\n@@ -94,1 +91,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/tk\/quantum\/ViewPainterLeakTest.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -32,1 +34,0 @@\n-import javafx.stage.Modality;\n@@ -36,1 +37,0 @@\n-import org.junit.Assert;\n@@ -40,1 +40,1 @@\n-import java.util.concurrent.CountDownLatch;\n+import test.util.Util;\n@@ -71,2 +71,1 @@\n-        new Thread(() -> Application.launch(TestApp.class)).start();\n-        startupLatch.await();\n+        Util.launch(startupLatch, TestApp.class);\n@@ -77,1 +76,1 @@\n-        Platform.runLater(primaryStage::hide);\n+        Util.shutdown(primaryStage);\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/tk\/quantum\/WindowSceneInitDisposeTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import static org.junit.Assert.assertEquals;\n+\n@@ -42,1 +44,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -49,0 +50,6 @@\n+import javax.imageio.IIOImage;\n+import javax.imageio.ImageIO;\n+import javax.imageio.ImageWriteParam;\n+import javax.imageio.ImageWriter;\n+import javax.imageio.stream.ImageOutputStream;\n+\n@@ -73,5 +80,0 @@\n-import javax.imageio.IIOImage;\n-import javax.imageio.ImageIO;\n-import javax.imageio.ImageWriteParam;\n-import javax.imageio.ImageWriter;\n-import javax.imageio.stream.ImageOutputStream;\n@@ -79,1 +81,0 @@\n-import junit.framework.AssertionFailedError;\n@@ -82,2 +83,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n@@ -87,1 +86,1 @@\n-import static test.util.Util.TIMEOUT;\n+import test.util.Util;\n@@ -978,5 +977,1 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(MyApp.class, (String[]) null)).start();\n-\n-        assertTrue(\"Timeout waiting for Application to launch\",\n-                launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS));\n+        Util.launch(launchLatch, MyApp.class);\n@@ -987,0 +982,5 @@\n+    @AfterClass\n+    public static void teardownOnce() {\n+        Util.shutdown();\n+    }\n+\n@@ -996,5 +996,0 @@\n-    @AfterClass\n-    public static void teardownOnce() {\n-        Platform.exit();\n-    }\n-\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/marlin\/ClipShapeTest.java","additions":15,"deletions":20,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n@@ -28,1 +31,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -31,1 +33,0 @@\n-import javafx.application.Platform;\n@@ -47,1 +48,0 @@\n-import junit.framework.AssertionFailedError;\n@@ -49,3 +49,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n@@ -56,1 +53,0 @@\n-import static test.util.Util.TIMEOUT;\n@@ -109,6 +105,1 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(MyApp.class, (String[]) null)).start();\n-\n-        assertTrue(\"Timeout waiting for Application to launch\",\n-                launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS));\n-\n+        Util.launch(launchLatch, MyApp.class);\n@@ -120,1 +111,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/marlin\/DashedRectTest.java","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n@@ -34,1 +37,6 @@\n-import java.util.concurrent.TimeUnit;\n+\n+import javax.imageio.IIOImage;\n+import javax.imageio.ImageIO;\n+import javax.imageio.ImageWriteParam;\n+import javax.imageio.ImageWriter;\n+import javax.imageio.stream.ImageOutputStream;\n@@ -37,1 +45,0 @@\n-import javafx.application.Platform;\n@@ -50,5 +57,0 @@\n-import javax.imageio.IIOImage;\n-import javax.imageio.ImageIO;\n-import javax.imageio.ImageWriteParam;\n-import javax.imageio.ImageWriter;\n-import javax.imageio.stream.ImageOutputStream;\n@@ -56,1 +58,0 @@\n-import junit.framework.AssertionFailedError;\n@@ -58,3 +59,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n@@ -65,1 +63,0 @@\n-import static test.util.Util.TIMEOUT;\n@@ -137,6 +134,1 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(MyApp.class, (String[]) null)).start();\n-\n-        assertTrue(\"Timeout waiting for Application to launch\",\n-                launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS));\n-\n+        Util.launch(launchLatch, MyApp.class);\n@@ -148,1 +140,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/marlin\/HugePolygonClipTest.java","additions":11,"deletions":19,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import static org.junit.Assert.assertEquals;\n+\n@@ -30,1 +32,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -51,1 +52,0 @@\n-import junit.framework.AssertionFailedError;\n@@ -54,2 +54,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n@@ -59,1 +57,1 @@\n-import static test.util.Util.TIMEOUT;\n+import test.util.Util;\n@@ -144,6 +142,1 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(MyApp.class, (String[]) null)).start();\n-\n-        assertTrue(\"Timeout waiting for Application to launch\",\n-                launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS));\n-\n+        Util.launch(launchLatch, MyApp.class);\n@@ -155,1 +148,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/marlin\/QPathTest.java","additions":5,"deletions":12,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n@@ -28,2 +31,0 @@\n-import java.io.File;\n-import java.io.IOException;\n@@ -31,1 +32,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -33,0 +33,1 @@\n+\n@@ -34,1 +35,0 @@\n-import javafx.application.Platform;\n@@ -48,1 +48,1 @@\n-import junit.framework.AssertionFailedError;\n+\n@@ -50,3 +50,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n@@ -55,0 +52,1 @@\n+\n@@ -56,1 +54,0 @@\n-import static test.util.Util.TIMEOUT;\n@@ -106,6 +103,1 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(MyApp.class, (String[]) null)).start();\n-\n-        assertTrue(\"Timeout waiting for Application to launch\",\n-                launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS));\n-\n+        Util.launch(launchLatch, MyApp.class);\n@@ -119,1 +111,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/marlin\/ScaleClipTest.java","additions":8,"deletions":16,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,5 @@\n-import com.sun.javafx.sg.prism.NGTriangleMesh;\n-import com.sun.javafx.sg.prism.NGTriangleMeshShim;\n-import com.sun.prism.impl.BaseMesh;\n-import com.sun.prism.impl.BaseMeshShim;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeTrue;\n+\n@@ -33,1 +34,1 @@\n-import java.util.concurrent.TimeUnit;\n+\n@@ -47,1 +48,0 @@\n-import junit.framework.AssertionFailedError;\n@@ -49,4 +49,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assume.assumeTrue;\n@@ -56,1 +52,0 @@\n-import test.util.Util;\n@@ -58,1 +53,6 @@\n-import static test.util.Util.TIMEOUT;\n+import com.sun.javafx.sg.prism.NGTriangleMesh;\n+import com.sun.javafx.sg.prism.NGTriangleMeshShim;\n+import com.sun.prism.impl.BaseMesh;\n+import com.sun.prism.impl.BaseMeshShim;\n+\n+import test.util.Util;\n@@ -265,13 +265,1 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(MyApp.class, (String[]) null)).start();\n-\n-        try {\n-            if (!launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n-                throw new AssertionFailedError(\"Timeout waiting for Application to launch\");\n-            }\n-        } catch (InterruptedException ex) {\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n-        }\n-\n+        Util.launch(launchLatch, MyApp.class);\n@@ -283,1 +271,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/prism\/impl\/PNTMeshVertexBufferLengthTest.java","additions":15,"deletions":27,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import static org.junit.Assert.assertEquals;\n+\n@@ -29,1 +31,1 @@\n-import java.util.concurrent.TimeUnit;\n+\n@@ -46,1 +48,1 @@\n-import junit.framework.AssertionFailedError;\n+\n@@ -48,1 +50,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -51,1 +52,2 @@\n-import static test.util.Util.TIMEOUT;\n+\n+import test.util.Util;\n@@ -91,13 +93,1 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(MyApp.class, (String[]) null)).start();\n-\n-        try {\n-            if (!launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n-                throw new AssertionFailedError(\"Timeout waiting for Application to launch\");\n-            }\n-        } catch (InterruptedException ex) {\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n-        }\n-\n+        Util.launch(launchLatch, MyApp.class);\n@@ -109,1 +99,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/prism\/impl\/ps\/ShapeCacheTest.java","additions":9,"deletions":19,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,0 @@\n-import static java.util.concurrent.TimeUnit.SECONDS;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n@@ -39,6 +36,0 @@\n-import com.sun.javafx.PlatformUtil;\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n@@ -58,0 +49,7 @@\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import com.sun.javafx.PlatformUtil;\n+\n@@ -63,1 +61,1 @@\n-    private static CountDownLatch startupLatch;\n+    private static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -146,9 +144,1 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        try {\n-            if (!startupLatch.await(10, SECONDS)) {\n-                fail(\"Timeout waiting for FX runtime to start\");\n-            }\n-        } catch (final InterruptedException ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n+        Util.launch(startupLatch, TestApp.class);\n@@ -159,1 +149,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/accessibility\/virtualflow\/VirtualFlowMemoryLeakTest.java","additions":11,"deletions":21,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,8 +27,4 @@\n-import com.sun.javafx.PlatformUtil;\n-import org.junit.Assume;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Test;\n-import junit.framework.AssertionFailedError;\n+import java.awt.Dimension;\n+import java.awt.event.MouseEvent;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n@@ -37,3 +33,0 @@\n-import javax.swing.JMenu;\n-import javax.swing.JMenuItem;\n-import javax.swing.JMenuBar;\n@@ -42,0 +35,1 @@\n+\n@@ -45,1 +39,0 @@\n-import javafx.stage.Stage;\n@@ -48,5 +41,9 @@\n-import java.awt.Dimension;\n-import java.awt.event.InputEvent;\n-import java.awt.event.MouseEvent;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import javafx.stage.Stage;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import test.util.Util;\n@@ -75,7 +72,1 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(MyApp.class, (String[]) null)).start();\n-\n-        if (!launchLatch.await(5000, TimeUnit.MILLISECONDS)) {\n-            throw new AssertionFailedError(\"Timeout waiting for Application to launch\");\n-        }\n-\n+        Util.launch(launchLatch, 5, MyApp.class);\n@@ -87,1 +78,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/embed\/swing\/JFXPanelTest.java","additions":17,"deletions":26,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n@@ -30,1 +34,1 @@\n-import java.util.concurrent.TimeUnit;\n+\n@@ -38,1 +42,1 @@\n-import junit.framework.AssertionFailedError;\n+\n@@ -40,3 +44,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n@@ -46,0 +47,2 @@\n+import test.util.Util;\n+\n@@ -67,13 +70,1 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(MyApp.class, (String[]) null)).start();\n-\n-        try {\n-            if (!launchLatch.await(5000, TimeUnit.MILLISECONDS)) {\n-                throw new AssertionFailedError(\"Timeout waiting for Application to launch\");\n-            }\n-        } catch (InterruptedException ex) {\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n-        }\n-\n+        Util.launch(launchLatch, 5, MyApp.class);\n@@ -85,1 +76,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/embed\/swing\/SwingFXUtilsTest.java","additions":11,"deletions":20,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -28,6 +28,1 @@\n-import javafx.application.Application;\n-import javafx.application.Platform;\n-import javafx.embed.swing.SwingNode;\n-import javafx.scene.Scene;\n-import javafx.scene.layout.BorderPane;\n-import javafx.stage.Stage;\n+import static org.junit.Assert.assertEquals;\n@@ -39,1 +34,1 @@\n-import java.util.concurrent.TimeUnit;\n+\n@@ -42,4 +37,6 @@\n-import test.util.Util;\n-import static test.util.Util.TIMEOUT;\n-import org.junit.Test;\n-import org.junit.BeforeClass;\n+import javafx.application.Application;\n+import javafx.embed.swing.SwingNode;\n+import javafx.scene.Scene;\n+import javafx.scene.layout.BorderPane;\n+import javafx.stage.Stage;\n+\n@@ -47,2 +44,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import test.util.Util;\n@@ -53,1 +52,1 @@\n-    static CountDownLatch launchLatch;\n+    static CountDownLatch launchLatch = new CountDownLatch(1);\n@@ -60,7 +59,1 @@\n-        launchLatch = new CountDownLatch(1);\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(SwingNodeDnDMemoryLeakTest.MyApp.class,\n-                                            (String[])null)).start();\n-\n-        assertTrue(\"Timeout waiting for Application to launch\",\n-                    launchLatch.await(10, TimeUnit.SECONDS));\n+        Util.launch(launchLatch, MyApp.class);\n@@ -71,1 +64,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/embed\/swing\/SwingNodeDnDMemoryLeakTest.java","additions":15,"deletions":22,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -28,1 +28,9 @@\n-import com.sun.javafx.PlatformUtil;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assume.assumeTrue;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.concurrent.CountDownLatch;\n+\n+import javax.swing.JLabel;\n+\n@@ -30,1 +38,0 @@\n-import javafx.application.Platform;\n@@ -34,1 +41,0 @@\n-import javafx.scene.layout.HBox;\n@@ -37,5 +43,5 @@\n-import javax.swing.JLabel;\n-import java.lang.ref.WeakReference;\n-import java.util.ArrayList;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import com.sun.javafx.PlatformUtil;\n@@ -44,7 +50,0 @@\n-import static test.util.Util.TIMEOUT;\n-import junit.framework.AssertionFailedError;\n-import org.junit.Test;\n-import org.junit.BeforeClass;\n-import org.junit.AfterClass;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assume.assumeTrue;\n@@ -55,1 +54,1 @@\n-    static CountDownLatch launchLatch;\n+    static CountDownLatch launchLatch = new CountDownLatch(1);\n@@ -64,14 +63,1 @@\n-        launchLatch = new CountDownLatch(1);\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(SwingNodeMemoryLeakTest.MyApp.class, (String[])null)).start();\n-\n-        try {\n-            if (!launchLatch.await(5 * TIMEOUT, TimeUnit.MILLISECONDS)) {\n-                throw new AssertionFailedError(\"Timeout waiting for Application to launch (\"+\n-                    (5 * TIMEOUT) + \" seconds)\");\n-            }\n-        } catch (InterruptedException ex) {\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n-        }\n+        Util.launch(launchLatch, 50, MyApp.class);\n@@ -82,1 +68,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/embed\/swing\/SwingNodeMemoryLeakTest.java","additions":17,"deletions":31,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,12 @@\n+import java.awt.Dimension;\n+import java.awt.GridBagLayout;\n+import java.awt.Rectangle;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.util.concurrent.CountDownLatch;\n+\n+import javax.swing.JButton;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n@@ -34,0 +46,2 @@\n+\n+import org.junit.AfterClass;\n@@ -36,1 +50,0 @@\n-import org.junit.AfterClass;\n@@ -38,7 +51,0 @@\n-import junit.framework.AssertionFailedError;\n-import javax.swing.*;\n-import java.awt.*;\n-import java.awt.event.FocusAdapter;\n-import java.awt.event.FocusEvent;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n@@ -46,1 +52,1 @@\n-import static test.util.Util.TIMEOUT;\n+import test.util.Util;\n@@ -60,2 +66,0 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(SwingNodeScaleTest.MyApp.class, (String[])null)).start();\n@@ -63,10 +67,1 @@\n-        try {\n-            if (!launchLatch.await(5 * TIMEOUT, TimeUnit.MILLISECONDS)) {\n-                throw new AssertionFailedError(\"Timeout waiting for Application to launch (\"+\n-                    (5 * TIMEOUT) + \" seconds)\");\n-            }\n-        } catch (InterruptedException ex) {\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n-        }\n+        Util.launch(launchLatch, 50, MyApp.class);\n@@ -77,1 +72,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/embed\/swing\/SwingNodeScaleTest.java","additions":18,"deletions":23,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n@@ -31,1 +36,0 @@\n-import javafx.scene.control.Label;\n@@ -34,0 +38,1 @@\n+import javafx.scene.control.Label;\n@@ -37,4 +42,0 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n-import junit.framework.Assert;\n@@ -42,0 +43,1 @@\n+import org.junit.Assert;\n@@ -44,0 +46,1 @@\n+\n@@ -45,1 +48,0 @@\n-import static org.junit.Assert.assertTrue;\n@@ -49,1 +51,1 @@\n-    private static CountDownLatch startupLatch;\n+    private static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -80,4 +82,6 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        assertTrue(\"Timeout waiting for FX runtime to start\",\n-                   startupLatch.await(15, TimeUnit.SECONDS));\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void teardownOnce() {\n+        Util.shutdown(stage);\n@@ -103,8 +107,0 @@\n-\n-    @AfterClass\n-    public static void teardownOnce() {\n-        Platform.runLater(() -> {\n-            stage.hide();\n-            Platform.exit();\n-        });\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/CssStyleHelperTest.java","additions":16,"deletions":20,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import java.util.concurrent.TimeUnit;\n+\n@@ -33,1 +33,0 @@\n-import javafx.scene.Scene;\n@@ -35,0 +34,1 @@\n+import javafx.scene.Scene;\n@@ -37,0 +37,1 @@\n+\n@@ -41,0 +42,1 @@\n+\n@@ -44,1 +46,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -65,1 +67,2 @@\n-        startupLatch = new CountDownLatch(1);\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n@@ -67,8 +70,3 @@\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        try {\n-            if (!startupLatch.await(15, TimeUnit.SECONDS)) {\n-                Assert.fail(\"Timeout waiting for FX runtime to start\");\n-            }\n-        } catch (InterruptedException ex) {\n-            Assert.fail(\"Unexpected exception: \" + ex);\n-        }\n+    @AfterClass\n+    public static void teardown() {\n+        Util.shutdown(stage);\n@@ -83,6 +81,0 @@\n-\n-    @AfterClass\n-    public static void teardown() {\n-        Platform.runLater(stage::hide);\n-        Platform.exit();\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/ImageCursorGetBestSizeTest.java","additions":11,"deletions":19,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import java.lang.ref.WeakReference;\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -35,1 +38,0 @@\n-import junit.framework.Assert;\n@@ -39,0 +41,1 @@\n+\n@@ -40,1 +43,0 @@\n-import static org.junit.Assert.fail;\n@@ -43,4 +45,0 @@\n-import java.lang.ref.WeakReference;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n@@ -50,1 +48,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -76,9 +74,6 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(InitialNodesMemoryLeakTest.TestApp.class, (String[])null)).start();\n-        try {\n-            if (!startupLatch.await(15, TimeUnit.SECONDS)) {\n-                fail(\"Timeout waiting for FX runtime to start\");\n-            }\n-        } catch (InterruptedException ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void teardownOnce() {\n+        Util.shutdown(stage);\n@@ -91,8 +86,0 @@\n-\n-    @AfterClass\n-    public static void teardownOnce() {\n-        Platform.runLater(() -> {\n-            stage.hide();\n-            Platform.exit();\n-        });\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/InitialNodesMemoryLeakTest.java","additions":12,"deletions":25,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import junit.framework.Assert;\n@@ -43,1 +42,2 @@\n-import static org.junit.Assert.fail;\n+import junit.framework.Assert;\n+import test.util.Util;\n@@ -46,1 +46,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -81,9 +81,6 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        try {\n-            if (!startupLatch.await(15, TimeUnit.SECONDS)) {\n-                fail(\"Timeout waiting for FX runtime to start\");\n-            }\n-        } catch (InterruptedException ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void teardown() {\n+        Util.shutdown(stage);\n@@ -142,6 +139,0 @@\n-\n-    @AfterClass\n-    public static void teardown() {\n-        Platform.runLater(stage::hide);\n-        Platform.exit();\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/NewSceneSizeTest.java","additions":10,"deletions":19,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,6 @@\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Random;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n@@ -35,0 +41,1 @@\n+\n@@ -38,6 +45,0 @@\n-import test.util.Util;\n-\n-import java.util.Random;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicLong;\n@@ -45,1 +46,1 @@\n-import static org.junit.Assert.assertTrue;\n+import test.util.Util;\n@@ -70,1 +71,1 @@\n-    private static CountDownLatch startupLatch;\n+    private static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -90,2 +91,2 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(NodeTreeShowingTest.TestApp.class, (String[]) null)).start();\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n@@ -93,1 +94,3 @@\n-        assertTrue(\"Timeout waiting for FX runtime to start\", startupLatch.await(15, TimeUnit.SECONDS));\n+    @AfterClass\n+    public static void teardownOnce() {\n+        Util.shutdown(stage);\n@@ -162,8 +165,0 @@\n-\n-    @AfterClass\n-    public static void teardownOnce() {\n-        Platform.runLater(() -> {\n-            stage.hide();\n-            Platform.exit();\n-        });\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/NodeTreeShowingTest.java","additions":15,"deletions":20,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -32,1 +36,0 @@\n-import javafx.scene.layout.HBox;\n@@ -34,0 +37,1 @@\n+import javafx.scene.layout.HBox;\n@@ -38,6 +42,0 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n-import test.util.Util;\n-import junit.framework.Assert;\n-import org.junit.Test;\n@@ -46,1 +44,3 @@\n-import static org.junit.Assert.assertTrue;\n+import org.junit.Test;\n+\n+import test.util.Util;\n@@ -66,1 +66,1 @@\n-    private static CountDownLatch startupLatch;\n+    private static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -86,2 +86,2 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(QuadraticCssTimeTest.TestApp.class, (String[]) null)).start();\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n@@ -89,1 +89,3 @@\n-        assertTrue(\"Timeout waiting for FX runtime to start\", startupLatch.await(15, TimeUnit.SECONDS));\n+    @AfterClass\n+    public static void teardownOnce() {\n+        Util.shutdown(stage);\n@@ -117,8 +119,0 @@\n-\n-    @AfterClass\n-    public static void teardownOnce() {\n-        Platform.runLater(() -> {\n-            stage.hide();\n-            Platform.exit();\n-        });\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/QuadraticCssTimeTest.java","additions":15,"deletions":21,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,5 @@\n-import com.sun.javafx.PlatformUtil;\n+import static org.junit.Assume.assumeTrue;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n@@ -35,0 +39,1 @@\n+\n@@ -40,2 +45,1 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import com.sun.javafx.PlatformUtil;\n@@ -43,2 +47,1 @@\n-import static org.junit.Assert.fail;\n-import static org.junit.Assume.assumeTrue;\n+import test.util.Util;\n@@ -47,1 +50,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -85,9 +88,6 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        try {\n-            if (!startupLatch.await(15, TimeUnit.SECONDS)) {\n-                fail(\"Timeout waiting for FX runtime to start\");\n-            }\n-        } catch (InterruptedException ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void teardown() {\n+        Util.shutdown(stage);\n@@ -130,6 +130,0 @@\n-\n-    @AfterClass\n-    public static void teardown() {\n-        Platform.runLater(stage::hide);\n-        Platform.exit();\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/RestoreSceneSizeTest.java","additions":16,"deletions":22,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,5 @@\n-import test.util.Util;\n-import javafx.scene.image.WritableImage;\n-import javafx.stage.Stage;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static test.util.Util.TIMEOUT;\n+\n@@ -33,0 +35,1 @@\n+\n@@ -40,0 +43,1 @@\n+import javafx.scene.image.WritableImage;\n@@ -41,0 +45,1 @@\n+import javafx.stage.Stage;\n@@ -43,1 +48,0 @@\n-import junit.framework.AssertionFailedError;\n@@ -45,2 +49,2 @@\n-import static org.junit.Assert.*;\n-import static test.util.Util.TIMEOUT;\n+import junit.framework.AssertionFailedError;\n+import test.util.Util;\n@@ -108,13 +112,1 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(MyApp.class, (String[])null)).start();\n-\n-        try {\n-            if (!launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n-                throw new AssertionFailedError(\"Timeout waiting for Application to launch\");\n-            }\n-        } catch (InterruptedException ex) {\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n-        }\n-\n+        Util.launch(launchLatch, MyApp.class);\n@@ -125,1 +117,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/SnapshotCommon.java","additions":13,"deletions":21,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,5 @@\n-import com.sun.javafx.PlatformUtil;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeTrue;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -43,1 +47,1 @@\n-import junit.framework.Assert;\n+\n@@ -48,2 +52,1 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import com.sun.javafx.PlatformUtil;\n@@ -51,2 +54,2 @@\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assume.assumeTrue;\n+import junit.framework.Assert;\n+import test.util.Util;\n@@ -55,1 +58,1 @@\n-    private static CountDownLatch startupLatch;\n+    private static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -99,4 +102,12 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        assertTrue(\"Timeout waiting for FX runtime to start\",\n-                startupLatch.await(15, TimeUnit.SECONDS));\n+\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void teardown() {\n+        Platform.runLater(() -> {\n+            if (alert != null) {\n+                alert.hide();\n+            }\n+        });\n+        Util.shutdown(stage);\n@@ -120,11 +131,0 @@\n-\n-    @AfterClass\n-    public static void teardown() {\n-        Platform.runLater(() -> {\n-            if (alert != null) {\n-                alert.hide();\n-            }\n-            stage.hide();\n-        });\n-        Platform.exit();\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/UIRenderDialogTest.java","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,4 @@\n-import com.sun.javafx.PlatformUtil;\n+import static org.junit.Assume.assumeTrue;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -39,1 +42,1 @@\n-import junit.framework.Assert;\n+\n@@ -41,0 +44,1 @@\n+import org.junit.Assert;\n@@ -44,2 +48,1 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import com.sun.javafx.PlatformUtil;\n@@ -47,3 +50,1 @@\n-import static org.junit.Assert.fail;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assume.assumeTrue;\n+import test.util.Util;\n@@ -52,1 +53,1 @@\n-    private static CountDownLatch startupLatch;\n+    private static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -81,4 +82,7 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        assertTrue(\"Timeout waiting for FX runtime to start\",\n-                startupLatch.await(15, TimeUnit.SECONDS));\n+\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void teardown() {\n+        Util.shutdown(stage);\n@@ -99,6 +103,0 @@\n-\n-    @AfterClass\n-    public static void teardown() {\n-        Platform.runLater(stage::hide);\n-        Platform.exit();\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/UIRenderSceneTest.java","additions":17,"deletions":19,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,4 @@\n-import com.sun.javafx.PlatformUtil;\n+import static org.junit.Assume.assumeTrue;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -37,1 +40,1 @@\n-import junit.framework.Assert;\n+\n@@ -42,2 +45,1 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import com.sun.javafx.PlatformUtil;\n@@ -45,2 +47,2 @@\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assume.assumeTrue;\n+import junit.framework.Assert;\n+import test.util.Util;\n@@ -50,1 +52,1 @@\n-    private static CountDownLatch startupLatch;\n+    private static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -58,3 +60,2 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        assertTrue(\"Timeout waiting for FX runtime to start\", startupLatch.await(15, TimeUnit.SECONDS));\n+\n+        Util.launch(startupLatch, TestApp.class);\n@@ -65,2 +66,1 @@\n-        Platform.runLater(stage::hide);\n-        Platform.exit();\n+        Util.shutdown(stage);\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/UIRenderSnapToPixelTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import java.lang.ref.WeakReference;\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -36,7 +39,0 @@\n-import test.util.Util;\n-\n-import java.lang.ref.WeakReference;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n-import junit.framework.Assert;\n@@ -44,0 +40,1 @@\n+import org.junit.Assert;\n@@ -47,0 +44,2 @@\n+import test.util.Util;\n+\n@@ -71,2 +70,1 @@\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        Assert.assertTrue(\"Timeout waiting for FX runtime to start\", startupLatch.await(15, TimeUnit.SECONDS));\n+        Util.launch(startupLatch, TestApp.class);\n@@ -77,4 +75,1 @@\n-        Platform.runLater(() -> {\n-            stage.hide();\n-            Platform.exit();\n-        });\n+        Util.shutdown(stage);\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/control\/AccordionTitlePaneLeakTest.java","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -29,1 +33,0 @@\n-import javafx.application.Platform;\n@@ -36,0 +39,1 @@\n+\n@@ -40,1 +44,0 @@\n-import test.util.Util;\n@@ -42,4 +45,1 @@\n-import java.io.ByteArrayOutputStream;\n-import java.io.PrintStream;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import test.util.Util;\n@@ -48,1 +48,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -95,4 +95,1 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        Assert.assertTrue(\"Timeout waiting for FX runtime to start\",\n-                startupLatch.await(15, TimeUnit.SECONDS));\n+        Util.launch(startupLatch, TestApp.class);\n@@ -103,1 +100,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/control\/MenuButtonSkinBaseNPETest.java","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import java.lang.ref.WeakReference;\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -37,5 +40,0 @@\n-import java.lang.ref.WeakReference;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n-import junit.framework.Assert;\n@@ -45,0 +43,2 @@\n+\n+import junit.framework.Assert;\n@@ -46,1 +46,0 @@\n-import static org.junit.Assert.assertTrue;\n@@ -50,1 +49,1 @@\n-    private static CountDownLatch startupLatch;\n+    private static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -81,4 +80,6 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        assertTrue(\"Timeout waiting for FX runtime to start\",\n-                   startupLatch.await(15, TimeUnit.SECONDS));\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void teardownOnce() {\n+        Util.shutdown(stage);\n@@ -106,8 +107,0 @@\n-\n-    @AfterClass\n-    public static void teardownOnce() {\n-        Platform.runLater(() -> {\n-            stage.hide();\n-            Platform.exit();\n-        });\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/control\/TabPaneHeaderLeakTest.java","additions":12,"deletions":19,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,7 +37,0 @@\n-import java.util.concurrent.TimeUnit;\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n@@ -46,1 +39,0 @@\n-import javafx.application.Platform;\n@@ -56,0 +48,7 @@\n+\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n@@ -66,1 +65,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -156,4 +155,1 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        Assert.assertTrue(\"Timeout waiting for FX runtime to start\",\n-                startupLatch.await(15, TimeUnit.SECONDS));\n+        Util.launch(startupLatch, TestApp.class);\n@@ -164,1 +160,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n@@ -166,1 +162,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/image\/WritableImageFromBufferTest.java","additions":11,"deletions":16,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import static org.junit.Assert.assertTrue;\n@@ -33,1 +32,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -35,5 +33,0 @@\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-import javafx.application.Application;\n@@ -45,0 +38,6 @@\n+\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n@@ -61,2 +60,7 @@\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        assertTrue(\"Timeout waiting for FX runtime to start\", startupLatch.await(15, TimeUnit.SECONDS));\n+\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void exit() {\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/lighting3D\/DirectionalLightTest.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import org.junit.AfterClass;\n-\n@@ -42,0 +40,4 @@\n+import org.junit.AfterClass;\n+\n+import test.util.Util;\n+\n@@ -96,4 +98,1 @@\n-        Platform.runLater(() -> {\n-            stage.hide();\n-            Platform.exit();\n-        });\n+        Util.shutdown(stage);\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/lighting3D\/LightingTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import static org.junit.Assert.assertTrue;\n@@ -33,1 +32,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -35,5 +33,0 @@\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-import javafx.application.Application;\n@@ -44,0 +37,5 @@\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n@@ -64,2 +62,2 @@\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        assertTrue(\"Timeout waiting for FX runtime to start\", startupLatch.await(15, TimeUnit.SECONDS));\n+\n+        Util.launch(startupLatch, TestApp.class);\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/lighting3D\/PointLightAttenuationTest.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import static org.junit.Assert.assertTrue;\n@@ -33,1 +32,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -35,5 +33,0 @@\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-import javafx.application.Application;\n@@ -44,0 +37,5 @@\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n@@ -67,2 +65,2 @@\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        assertTrue(\"Timeout waiting for FX runtime to start\", startupLatch.await(15, TimeUnit.SECONDS));\n+\n+        Util.launch(startupLatch, TestApp.class);\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/lighting3D\/SpotLightAttenuationTest.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import java.lang.ref.WeakReference;\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -38,5 +41,0 @@\n-import java.lang.ref.WeakReference;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n-import junit.framework.Assert;\n@@ -46,0 +44,2 @@\n+\n+import junit.framework.Assert;\n@@ -47,1 +47,0 @@\n-import static org.junit.Assert.assertTrue;\n@@ -51,1 +50,1 @@\n-    private static CountDownLatch startupLatch;\n+    private static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -83,4 +82,6 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        assertTrue(\"Timeout waiting for FX runtime to start\",\n-                   startupLatch.await(15, TimeUnit.SECONDS));\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void teardownOnce() {\n+        Util.shutdown(stage);\n@@ -106,8 +107,0 @@\n-\n-    @AfterClass\n-    public static void teardownOnce() {\n-        Platform.runLater(() -> {\n-            stage.hide();\n-            Platform.exit();\n-        });\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/shape\/ShapeViewOrderLeakTest.java","additions":12,"deletions":19,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -28,0 +28,5 @@\n+import static javafx.concurrent.Worker.State.SUCCEEDED;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n@@ -29,0 +34,1 @@\n+\n@@ -37,0 +43,1 @@\n+\n@@ -42,1 +49,0 @@\n-import test.util.Util;\n@@ -44,4 +50,1 @@\n-import static javafx.concurrent.Worker.State.SUCCEEDED;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import test.util.Util;\n@@ -105,4 +108,1 @@\n-        \/\/ Start the Test Application\n-        new Thread(() -> Application.launch(CSSFilterTestApp.class, (String[])null)).start();\n-\n-        assertTrue(\"Timeout waiting for FX runtime to start\", Util.await(launchLatch));\n+        Util.launch(launchLatch, CSSFilterTestApp.class);\n@@ -113,1 +113,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/CSSFilterTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,0 +28,5 @@\n+import static javafx.concurrent.Worker.State.SUCCEEDED;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n@@ -29,0 +34,1 @@\n+\n@@ -34,0 +40,1 @@\n+\n@@ -38,1 +45,0 @@\n-import test.util.Util;\n@@ -40,4 +46,1 @@\n-import static javafx.concurrent.Worker.State.SUCCEEDED;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import test.util.Util;\n@@ -71,2 +74,1 @@\n-        \/\/ Start the Test Application\n-        new Thread(() -> Application.launch(CanvasTestApp.class, (String[])null)).start();\n+        Util.launch(launchLatch, CanvasTestApp.class);\n@@ -79,1 +81,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/CanvasTest.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,1 +28,3 @@\n-import com.sun.javafx.scene.control.CustomColorDialog;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -41,0 +43,1 @@\n+\n@@ -45,1 +48,0 @@\n-import test.util.Util;\n@@ -47,2 +49,3 @@\n-import java.util.List;\n-import java.util.concurrent.CountDownLatch;\n+import com.sun.javafx.scene.control.CustomColorDialog;\n+\n+import test.util.Util;\n@@ -63,2 +66,1 @@\n-        new Thread(() -> Application.launch(ColorChooserTestApp.class, (String[]) null)).start();\n-        Assertions.assertTrue(Util.await(launchLatch), \"Timeout waiting for FX runtime to start\");\n+        Util.launch(launchLatch, ColorChooserTestApp.class);\n@@ -69,2 +71,1 @@\n-        Platform.runLater(stage::hide);\n-        Platform.exit();\n+        Util.shutdown(stage);\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/ColorChooserTest.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,5 @@\n-import com.sun.javafx.PlatformUtil;\n-import java.util.concurrent.atomic.AtomicReference;\n+import static javafx.concurrent.Worker.State.SUCCEEDED;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n@@ -31,1 +34,2 @@\n-import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n@@ -35,0 +39,2 @@\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n@@ -38,2 +44,0 @@\n-import javafx.scene.Node;\n-import javafx.scene.Scene;\n@@ -44,0 +48,1 @@\n+\n@@ -49,0 +54,3 @@\n+\n+import com.sun.javafx.PlatformUtil;\n+\n@@ -53,5 +61,0 @@\n-import static javafx.concurrent.Worker.State.SUCCEEDED;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n@@ -77,0 +80,6 @@\n+            \/\/ Used by selectFontFamilysWithSpace() for JDK-8230492\n+            Font.loadFont(\n+                HTMLEditorTest.class.getResource(\"WebKit_Layout_Tests_2.ttf\").toExternalForm(),\n+                10\n+            );\n+\n@@ -90,11 +99,1 @@\n-        \/\/ Start the Test Application\n-        new Thread(() -> Application.launch(HTMLEditorTestApp.class,\n-            (String[]) null)).start();\n-\n-        \/\/ Used by selectFontFamilysWithSpace() for JDK-8230492\n-        Font.loadFont(\n-            HTMLEditorTest.class.getResource(\"WebKit_Layout_Tests_2.ttf\").toExternalForm(),\n-            10\n-        );\n-\n-        assertTrue(\"Timeout waiting for FX runtime to start\", Util.await(launchLatch));\n+        Util.launch(launchLatch, HTMLEditorTestApp.class);\n@@ -105,1 +104,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/HTMLEditorTest.java","additions":22,"deletions":23,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,7 @@\n-import com.sun.webkit.WebPage;\n-import com.sun.webkit.WebPageShim;\n+import static javafx.concurrent.Worker.State.SUCCEEDED;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -39,0 +44,1 @@\n+\n@@ -43,1 +49,0 @@\n-import test.util.Util;\n@@ -45,1 +50,2 @@\n-import java.util.concurrent.CountDownLatch;\n+import com.sun.webkit.WebPage;\n+import com.sun.webkit.WebPageShim;\n@@ -47,4 +53,1 @@\n-import static javafx.concurrent.Worker.State.SUCCEEDED;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import test.util.Util;\n@@ -108,4 +111,1 @@\n-        \/\/ Start the Test Application\n-        new Thread(() -> Application.launch(PageFillTestApp.class, (String[])null)).start();\n-\n-        assertTrue(\"Timeout waiting for FX runtime to start\", Util.await(launchLatch));\n+        Util.launch(launchLatch, PageFillTestApp.class);\n@@ -116,1 +116,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/PageFillTest.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static javafx.concurrent.Worker.State.SUCCEEDED;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n@@ -29,0 +34,1 @@\n+\n@@ -37,0 +43,1 @@\n+\n@@ -41,1 +48,0 @@\n-import test.util.Util;\n@@ -43,4 +49,1 @@\n-import static javafx.concurrent.Worker.State.SUCCEEDED;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import test.util.Util;\n@@ -74,4 +77,1 @@\n-        \/\/ Start the Test Application\n-        new Thread(() -> Application.launch(SVGTestApp.class, (String[])null)).start();\n-\n-        assertTrue(\"Timeout waiting for FX runtime to start\", Util.await(launchLatch));\n+        Util.launch(launchLatch, SVGTestApp.class);\n@@ -82,1 +82,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/SVGTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,3 +28,8 @@\n-import com.sun.webkit.WebPage;\n-import com.sun.webkit.WebPageShim;\n-import com.sun.javafx.PlatformUtil;\n+import static javafx.concurrent.Worker.State.SUCCEEDED;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -37,1 +42,0 @@\n-import javafx.scene.web.WebEngineShim;\n@@ -40,1 +44,1 @@\n-import java.io.*;\n+\n@@ -45,1 +49,0 @@\n-import test.util.Util;\n@@ -47,2 +50,1 @@\n-import java.util.concurrent.CountDownLatch;\n-import static org.junit.Assert.assertEquals;\n+import com.sun.javafx.PlatformUtil;\n@@ -50,5 +52,1 @@\n-import static javafx.concurrent.Worker.State.SUCCEEDED;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-import static org.junit.Assume.assumeFalse;\n+import test.util.Util;\n@@ -93,4 +91,1 @@\n-        \/\/ Start the Test Application\n-        new Thread(() -> Application.launch(StraightLineTestApp.class, (String[])null)).start();\n-\n-        assertTrue(\"Timeout waiting for FX runtime to start\", Util.await(launchLatch));\n+        Util.launch(launchLatch, StraightLineTestApp.class);\n@@ -101,1 +96,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/StraightLineTest.java","additions":13,"deletions":18,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,8 @@\n+import static javafx.concurrent.Worker.State.SUCCEEDED;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.net.URL;\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -33,0 +41,1 @@\n+\n@@ -37,1 +46,0 @@\n-import test.util.Util;\n@@ -39,7 +47,1 @@\n-import java.net.URL;\n-import java.util.concurrent.CountDownLatch;\n-\n-import static javafx.concurrent.Worker.State.SUCCEEDED;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import test.util.Util;\n@@ -72,3 +74,1 @@\n-        new Thread(() -> Application.launch(WebIObserverTestApp.class, (String[])null)).start();\n-\n-        assertTrue(\"Timeout waiting for FX runtime to start\", Util.await(launchLatch));\n+        Util.launch(launchLatch, WebIObserverTestApp.class);\n@@ -79,1 +79,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/WebIObserverTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static javafx.concurrent.Worker.State.SUCCEEDED;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n@@ -29,0 +34,1 @@\n+\n@@ -35,0 +41,1 @@\n+\n@@ -39,1 +46,0 @@\n-import test.util.Util;\n@@ -44,4 +50,1 @@\n-import static javafx.concurrent.Worker.State.SUCCEEDED;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import test.util.Util;\n@@ -75,4 +78,1 @@\n-        \/\/ Start the Test Application\n-        new Thread(() -> Application.launch(WebPageTestApp.class, (String[])null)).start();\n-\n-        assertTrue(\"Timeout waiting for FX runtime to start\", Util.await(launchLatch));\n+        Util.launch(launchLatch, WebPageTestApp.class);\n@@ -83,1 +83,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/WebPageTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n-import java.util.TimerTask;\n+import static org.junit.Assume.assumeTrue;\n+\n@@ -30,0 +31,1 @@\n+import java.util.TimerTask;\n@@ -31,1 +33,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -42,1 +43,0 @@\n-\n@@ -44,0 +44,3 @@\n+\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n@@ -47,3 +50,1 @@\n-import static junit.framework.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-import static org.junit.Assume.assumeTrue;\n+import test.util.Util;\n@@ -52,1 +53,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -59,1 +60,1 @@\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws Exception {\n@@ -62,0 +63,1 @@\n+        teardown();\n@@ -65,10 +67,7 @@\n-    public static void initFX() {\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        try {\n-            if (!startupLatch.await(15, TimeUnit.SECONDS)) {\n-                fail(\"Timeout waiting for FX runtime to start\");\n-            }\n-        } catch (InterruptedException ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n+    public static void initFX() throws Exception {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void teardown() {\n+        Util.shutdown();\n@@ -85,2 +84,2 @@\n-        assertTrue(\"Primary stage X location should be >\" + minX, stage.getX() > minX);\n-        assertTrue(\"Primary stage Y location should be >\" + minY, stage.getY() > minY);\n+        Assert.assertTrue(\"Primary stage X location should be >\" + minX, stage.getX() > minX);\n+        Assert.assertTrue(\"Primary stage Y location should be >\" + minY, stage.getY() > minY);\n@@ -92,2 +91,2 @@\n-        assertTrue(\"Child stage X location should be >\" + minX, childStage.getX() > minX);\n-        assertTrue(\"Child stage Y location should be >\" + minY, childStage.getY() > minY);\n+        Assert.assertTrue(\"Child stage X location should be >\" + minX, childStage.getX() > minX);\n+        Assert.assertTrue(\"Child stage Y location should be >\" + minY, childStage.getY() > minY);\n@@ -107,0 +106,1 @@\n+                \/\/ FIX unsynchronized access from multiple threads\n@@ -139,1 +139,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/ChildStageLocationTest.java","additions":22,"deletions":23,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -33,0 +35,1 @@\n+\n@@ -38,4 +41,1 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n-import static org.junit.Assert.fail;\n+import test.util.Util;\n@@ -44,1 +44,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -76,9 +76,6 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        try {\n-            if (!startupLatch.await(15, TimeUnit.SECONDS)) {\n-                fail(\"Timeout waiting for FX runtime to start\");\n-            }\n-        } catch (InterruptedException ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void teardown() {\n+        Util.shutdown(childStage, stage);\n@@ -104,7 +101,0 @@\n-\n-    @AfterClass\n-    public static void teardown() {\n-        Platform.runLater(childStage::hide);\n-        Platform.runLater(stage::hide);\n-        Platform.exit();\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/DeiconifiedWithChildTest.java","additions":12,"deletions":22,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -33,0 +35,1 @@\n+\n@@ -37,1 +40,0 @@\n-import test.util.Util;\n@@ -39,4 +41,1 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n-import static org.junit.Assert.fail;\n+import test.util.Util;\n@@ -45,1 +44,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -64,9 +63,6 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        try {\n-            if (!startupLatch.await(15, TimeUnit.SECONDS)) {\n-                fail(\"Timeout waiting for FX runtime to start\");\n-            }\n-        } catch (InterruptedException ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void teardown() {\n+        Util.shutdown(stage);\n@@ -82,6 +78,0 @@\n-\n-    @AfterClass\n-    public static void teardown() {\n-        Platform.runLater(stage::hide);\n-        Platform.exit();\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/InitialSizeTest.java","additions":12,"deletions":22,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.util.TimerTask;\n@@ -33,0 +32,1 @@\n+import java.util.TimerTask;\n@@ -34,1 +34,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -47,0 +46,2 @@\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n@@ -50,2 +51,1 @@\n-import static junit.framework.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import test.util.Util;\n@@ -54,1 +54,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -61,1 +61,5 @@\n-        new MakeResizableAndResizeTest().testSize();\n+        try {\n+            new MakeResizableAndResizeTest().testSize();\n+        } finally {\n+            shutdown();\n+        }\n@@ -66,9 +70,6 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        try {\n-            if (!startupLatch.await(15, TimeUnit.SECONDS)) {\n-                fail(\"Timeout waiting for FX runtime to start\");\n-            }\n-        } catch (InterruptedException ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void shutdown() {\n+        Util.shutdown();\n@@ -79,2 +80,2 @@\n-        assertTrue(\"Wrong window width\", alert.getWidth() >= alert.getDialogPane().getWidth());\n-        assertTrue(\"Wrong window height\", alert.getHeight() >= alert.getDialogPane().getHeight());\n+        Assert.assertTrue(\"Wrong window width\", alert.getWidth() >= alert.getDialogPane().getWidth());\n+        Assert.assertTrue(\"Wrong window height\", alert.getHeight() >= alert.getDialogPane().getHeight());\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/MakeResizableAndResizeTest.java","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,4 @@\n-import com.sun.javafx.PlatformUtil;\n+import static org.junit.Assume.assumeTrue;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -35,0 +38,1 @@\n+\n@@ -39,1 +43,0 @@\n-import test.util.Util;\n@@ -41,2 +44,1 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import com.sun.javafx.PlatformUtil;\n@@ -44,2 +46,1 @@\n-import static org.junit.Assert.fail;\n-import static org.junit.Assume.*;\n+import test.util.Util;\n@@ -48,1 +49,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -69,9 +70,6 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        try {\n-            if (!startupLatch.await(15, TimeUnit.SECONDS)) {\n-                fail(\"Timeout waiting for FX runtime to start\");\n-            }\n-        } catch (InterruptedException ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void teardown() {\n+        Util.shutdown(stage);\n@@ -89,6 +87,0 @@\n-\n-    @AfterClass\n-    public static void teardown() {\n-        Platform.runLater(stage::hide);\n-        Platform.exit();\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/MaximizeUndecorated.java","additions":15,"deletions":23,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import java.util.concurrent.TimeUnit;\n+\n@@ -36,0 +36,2 @@\n+\n+import org.junit.AfterClass;\n@@ -39,0 +41,1 @@\n+\n@@ -63,3 +66,1 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        Assert.assertTrue (launchLatch.await(15, TimeUnit.SECONDS));\n+        Util.launch(launchLatch, TestApp.class);\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/NestedEventLoopPlatformExitTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,4 @@\n-import java.util.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n@@ -30,1 +33,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -33,1 +35,0 @@\n-import java.util.concurrent.atomic.AtomicReference;\n@@ -35,2 +36,0 @@\n-import javafx.animation.KeyFrame;\n-import javafx.animation.Timeline;\n@@ -39,1 +38,0 @@\n-import javafx.print.PrinterJob;\n@@ -42,1 +40,0 @@\n-import javafx.scene.control.Alert;\n@@ -44,1 +41,0 @@\n-import javafx.scene.shape.Rectangle;\n@@ -46,3 +42,1 @@\n-import javafx.util.Duration;\n-import junit.framework.AssertionFailedError;\n-import org.junit.After;\n+\n@@ -50,1 +44,0 @@\n-import org.junit.Before;\n@@ -53,4 +46,0 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-import test.util.Util;\n@@ -58,3 +47,1 @@\n-import static org.junit.Assert.*;\n-import static org.junit.Assume.*;\n-import static test.util.Util.TIMEOUT;\n+import test.util.Util;\n@@ -100,12 +87,1 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(MyApp.class, (String[])null)).start();\n-\n-        try {\n-            if (!launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n-                throw new AssertionFailedError(\"Timeout waiting for Application to launch\");\n-            }\n-        } catch (InterruptedException ex) {\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n-        }\n+        Util.launch(launchLatch, MyApp.class);\n@@ -116,1 +92,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/NestedEventLoopTest.java","additions":9,"deletions":33,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,5 @@\n-import com.sun.javafx.PlatformUtil;\n+import static org.junit.Assume.assumeTrue;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n@@ -35,0 +39,1 @@\n+\n@@ -40,2 +45,1 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import com.sun.javafx.PlatformUtil;\n@@ -43,2 +47,1 @@\n-import static org.junit.Assert.fail;\n-import static org.junit.Assume.assumeTrue;\n+import test.util.Util;\n@@ -47,1 +50,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -79,9 +82,1 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        try {\n-            if (!startupLatch.await(15, TimeUnit.SECONDS)) {\n-                fail(\"Timeout waiting for FX runtime to start\");\n-            }\n-        } catch (InterruptedException ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n+        Util.launch(startupLatch, TestApp.class);\n@@ -90,0 +85,4 @@\n+    @AfterClass\n+    public static void teardown() {\n+        Util.shutdown(stage);\n+    }\n@@ -166,6 +165,0 @@\n-\n-    @AfterClass\n-    public static void teardown() {\n-        Platform.runLater(stage::hide);\n-        Platform.exit();\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/RestoreStagePositionTest.java","additions":15,"deletions":22,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,8 @@\n-import javafx.stage.StageShim;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.junit.Assume.assumeNotNull;\n+import static test.util.Util.TIMEOUT;\n+\n@@ -36,0 +43,1 @@\n+\n@@ -51,1 +59,1 @@\n-import junit.framework.AssertionFailedError;\n+\n@@ -60,1 +68,0 @@\n-import test.util.Util;\n@@ -62,3 +69,2 @@\n-import static org.junit.Assert.*;\n-import static org.junit.Assume.*;\n-import static test.util.Util.TIMEOUT;\n+import junit.framework.AssertionFailedError;\n+import test.util.Util;\n@@ -129,12 +135,1 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(MyApp.class, (String[])null)).start();\n-\n-        try {\n-            if (!launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n-                throw new AssertionFailedError(\"Timeout waiting for Application to launch\");\n-            }\n-        } catch (InterruptedException ex) {\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n-        }\n+        Util.launch(launchLatch, MyApp.class);\n@@ -145,1 +140,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/ShowAndWaitTest.java","additions":15,"deletions":20,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,5 @@\n-import com.sun.javafx.PlatformUtil;\n+import static org.junit.Assume.assumeTrue;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n@@ -37,0 +41,1 @@\n+\n@@ -42,2 +47,1 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import com.sun.javafx.PlatformUtil;\n@@ -45,3 +49,1 @@\n-import static org.junit.Assert.fail;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assume.assumeTrue;\n+import test.util.Util;\n@@ -50,1 +52,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -80,5 +82,7 @@\n-    public static void initFX() throws Exception {\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        assertTrue(\"Timeout waiting for FX runtime to start\",\n-                   startupLatch.await(15, TimeUnit.SECONDS));\n+    public static void initFX() {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void teardown() {\n+        Util.shutdown(stage);\n@@ -118,6 +122,0 @@\n-\n-    @AfterClass\n-    public static void teardown() {\n-        Platform.runLater(stage::hide);\n-        Platform.exit();\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/StageAtTopPositionTest.java","additions":17,"deletions":19,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,8 @@\n-import com.sun.javafx.PlatformUtil;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.junit.Assume.assumeTrue;\n+import static test.util.Util.TIMEOUT;\n+\n@@ -32,0 +39,1 @@\n+\n@@ -46,1 +54,1 @@\n-import junit.framework.AssertionFailedError;\n+\n@@ -49,1 +57,0 @@\n-import test.util.Util;\n@@ -51,3 +58,3 @@\n-import static org.junit.Assert.*;\n-import static org.junit.Assume.*;\n-import static test.util.Util.TIMEOUT;\n+import com.sun.javafx.PlatformUtil;\n+\n+import test.util.Util;\n@@ -111,7 +118,1 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(MyApp.class, (String[])null)).start();\n-\n-        if (!launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n-            fail(\"Timeout waiting for Application to launch\");\n-        }\n-\n+        Util.launch(launchLatch, MyApp.class);\n@@ -123,1 +124,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/renderlock\/RenderLockCommon.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,12 @@\n+import java.awt.AWTException;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.CountDownLatch;\n+\n+import javax.swing.JDialog;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+\n@@ -34,1 +46,1 @@\n-import junit.framework.AssertionFailedError;\n+\n@@ -38,1 +50,0 @@\n-import test.util.Util;\n@@ -40,13 +51,1 @@\n-import javax.swing.JDialog;\n-import javax.swing.JOptionPane;\n-import javax.swing.JPanel;\n-import javax.swing.SwingUtilities;\n-import java.awt.AWTException;\n-import java.awt.Frame;\n-import java.awt.Robot;\n-import java.awt.event.InputEvent;\n-import java.lang.reflect.InvocationTargetException;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n-import static test.util.Util.TIMEOUT;\n+import test.util.Util;\n@@ -74,11 +73,1 @@\n-        new Thread(() -> Application.launch(MyApp.class, (String[])null)).start();\n-\n-        try {\n-            if (!launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n-                throw new AssertionFailedError(\"Timeout waiting for Application to launch\");\n-            }\n-        } catch (InterruptedException ex) {\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n-        }\n+        Util.launch(launchLatch, MyApp.class);\n@@ -96,3 +85,1 @@\n-        Platform.runLater(() -> {\n-            Platform.exit();\n-        });\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/embed\/swing\/SwingNodeBase.java","additions":17,"deletions":30,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,5 @@\n-import com.sun.javafx.PlatformUtil;\n+import static org.junit.Assume.assumeTrue;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n@@ -37,0 +41,1 @@\n+\n@@ -42,2 +47,1 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import com.sun.javafx.PlatformUtil;\n@@ -45,2 +49,1 @@\n-import static org.junit.Assert.fail;\n-import static org.junit.Assume.assumeTrue;\n+import test.util.Util;\n@@ -49,1 +52,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -81,10 +84,7 @@\n-    public static void initFX() {\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        try {\n-            if (!startupLatch.await(15, TimeUnit.SECONDS)) {\n-                fail(\"Timeout waiting for FX runtime to start\");\n-            }\n-        } catch (InterruptedException ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n+    public static void initFX() throws InterruptedException {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void teardown() {\n+        Util.shutdown(stage);\n@@ -126,6 +126,0 @@\n-\n-    @AfterClass\n-    public static void teardown() {\n-        Platform.runLater(stage::hide);\n-        Platform.exit();\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/AfterModalClosedTest.java","additions":17,"deletions":23,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-        waitForLatch(onShownLatch, 10, \"Failed to show color palette.\");\n+        Util.waitForLatch(onShownLatch, 10, \"Failed to show color palette.\");\n@@ -88,1 +88,1 @@\n-        waitForLatch(onActionLatch, 10, \"Failed to receive onAction callback.\");\n+        Util.waitForLatch(onActionLatch, 10, \"Failed to receive onAction callback.\");\n@@ -113,1 +113,1 @@\n-        waitForLatch(onShownLatch, 10, \"Failed to show color palette.\");\n+        Util.waitForLatch(onShownLatch, 10, \"Failed to show color palette.\");\n@@ -174,2 +174,1 @@\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        waitForLatch(startupLatch, 10, \"FX runtime failed to start.\");\n+        Util.launch(startupLatch, TestApp.class);\n@@ -180,4 +179,1 @@\n-        Platform.runLater(() -> {\n-            stage.hide();\n-        });\n-        Platform.exit();\n+        Util.shutdown(stage);\n@@ -201,4 +197,0 @@\n-\n-    public static void waitForLatch(CountDownLatch latch, int seconds, String msg) throws Exception {\n-        Assert.assertTrue(\"Timeout: \" + msg, latch.await(seconds, TimeUnit.SECONDS));\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/ColorPickerTest.java","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -30,0 +32,1 @@\n+import javafx.scene.Scene;\n@@ -34,1 +37,0 @@\n-import javafx.scene.Scene;\n@@ -39,3 +41,0 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n@@ -48,1 +47,0 @@\n-import static org.junit.Assert.fail;\n@@ -105,1 +103,1 @@\n-            waitForLatch(showLatch, 10, \"Failed to show ComboBox popup list. \" + i);\n+            Util.waitForLatch(showLatch, 10, \"Failed to show ComboBox popup list. \" + i);\n@@ -113,1 +111,1 @@\n-            waitForLatch(selectedLatch, 10, \"Failed to select \" + i + \"th choice.\");\n+            Util.waitForLatch(selectedLatch, 10, \"Failed to select \" + i + \"th choice.\");\n@@ -150,1 +148,1 @@\n-            waitForLatch(showLatch, 10, \"Failed to show ComboBox popup list. \" + i);\n+            Util.waitForLatch(showLatch, 10, \"Failed to show ComboBox popup list. \" + i);\n@@ -156,1 +154,1 @@\n-            waitForLatch(selectedLatch, 10, \"Failed to select \" + i + \"th choice.\");\n+            Util.waitForLatch(selectedLatch, 10, \"Failed to select \" + i + \"th choice.\");\n@@ -186,2 +184,1 @@\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        waitForLatch(startupLatch, 10, \"FX runtime failed to start.\");\n+        Util.launch(startupLatch, TestApp.class);\n@@ -192,4 +189,1 @@\n-        Util.runAndWait(() -> {\n-            stage.hide();\n-        });\n-        Platform.exit();\n+        Util.shutdown(stage);\n@@ -213,4 +207,0 @@\n-\n-    public static void waitForLatch(CountDownLatch latch, int seconds, String msg) throws Exception {\n-        Assert.assertTrue(\"Timeout: \" + msg, latch.await(seconds, TimeUnit.SECONDS));\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/ComboBoxTest.java","additions":10,"deletions":20,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,4 @@\n-import com.sun.javafx.PlatformUtil;\n+import static org.junit.Assume.assumeTrue;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -39,3 +42,0 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n@@ -48,2 +48,2 @@\n-import static org.junit.Assert.fail;\n-import static org.junit.Assume.assumeTrue;\n+\n+import com.sun.javafx.PlatformUtil;\n@@ -82,1 +82,1 @@\n-        waitForLatch(onShownLatch, 10, \"Failed to show Calendar popup.\");\n+        Util.waitForLatch(onShownLatch, 10, \"Failed to show Calendar popup.\");\n@@ -90,1 +90,1 @@\n-        waitForLatch(onActionLatch, 10, \"Failed to receive onAction call.\");\n+        Util.waitForLatch(onActionLatch, 10, \"Failed to receive onAction call.\");\n@@ -117,1 +117,1 @@\n-        waitForLatch(onShownLatch, 10, \"Failed to show calendar popup.\");\n+        Util.waitForLatch(onShownLatch, 10, \"Failed to show calendar popup.\");\n@@ -178,2 +178,1 @@\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        waitForLatch(startupLatch, 10, \"FX runtime failed to start.\");\n+        Util.launch(startupLatch, TestApp.class);\n@@ -184,4 +183,1 @@\n-        Platform.runLater(() -> {\n-            stage.hide();\n-        });\n-        Platform.exit();\n+        Util.shutdown(stage);\n@@ -205,4 +201,0 @@\n-\n-    public static void waitForLatch(CountDownLatch latch, int seconds, String msg) throws Exception {\n-        Assert.assertTrue(\"Timeout: \" + msg, latch.await(seconds, TimeUnit.SECONDS));\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/DatePickerTest.java","additions":12,"deletions":20,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import com.sun.javafx.PlatformUtil;\n-\n@@ -31,7 +29,0 @@\n-import java.util.concurrent.TimeUnit;\n-\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.Assumptions;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n@@ -44,1 +35,0 @@\n-import javafx.scene.input.KeyEvent;\n@@ -46,0 +36,1 @@\n+import javafx.scene.input.KeyEvent;\n@@ -52,0 +43,10 @@\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import com.sun.javafx.PlatformUtil;\n+\n+import test.util.Util;\n+\n@@ -66,1 +67,1 @@\n-        waitForLatch(dialogLatch, 5, \"Dialog never received shortcut\");\n+        Util.waitForLatch(dialogLatch, 5, \"Dialog never received shortcut\");\n@@ -74,2 +75,1 @@\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        waitForLatch(startupLatch, 10, \"FX runtime failed to start.\");\n+        Util.launch(startupLatch, TestApp.class);\n@@ -80,2 +80,1 @@\n-        Platform.runLater(stage::hide);\n-        Platform.exit();\n+        Util.shutdown(stage);\n@@ -155,10 +154,0 @@\n-\n-    private static void waitForLatch(CountDownLatch latch, int seconds, String msg) {\n-        try {\n-            if (!latch.await(seconds, TimeUnit.SECONDS)) {\n-                Assertions.fail(msg);\n-            }\n-        } catch (Exception ex) {\n-            Assertions.fail(\"Unexpected exception: \" + ex);\n-        }\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/DoubleShortcutProcessingTest.java","additions":14,"deletions":25,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import java.util.concurrent.TimeUnit;\n+\n@@ -31,1 +31,0 @@\n-import javafx.application.Platform;\n@@ -36,0 +35,1 @@\n+\n@@ -40,0 +40,1 @@\n+\n@@ -44,1 +45,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -59,11 +60,6 @@\n-        startupLatch = new CountDownLatch(1);\n-\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null))\n-                .start();\n-        try {\n-            if (!startupLatch.await(15, TimeUnit.SECONDS)) {\n-                Assert.fail(\"Timeout waiting for FX runtime to start\");\n-            }\n-        } catch (InterruptedException ex) {\n-            Assert.fail(\"Unexpected exception: \" + ex);\n-        }\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void teardown() {\n+        Util.shutdown();\n@@ -121,5 +117,0 @@\n-    @AfterClass\n-    public static void teardown() {\n-        Platform.exit();\n-    }\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/MouseLocationOnScreenTest.java","additions":10,"deletions":19,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -28,0 +28,8 @@\n+import static org.junit.Assert.fail;\n+\n+import java.nio.Buffer;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.nio.IntBuffer;\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -31,1 +39,0 @@\n-import javafx.scene.robot.Robot;\n@@ -39,0 +46,1 @@\n+import javafx.scene.robot.Robot;\n@@ -44,7 +52,1 @@\n-import java.nio.Buffer;\n-import java.nio.ByteBuffer;\n-import java.nio.ByteOrder;\n-import java.nio.IntBuffer;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n+import org.junit.After;\n@@ -54,1 +56,0 @@\n-import org.junit.After;\n@@ -57,2 +58,0 @@\n-import static org.junit.Assert.fail;\n-\n@@ -90,1 +89,1 @@\n-    private static CountDownLatch startupLatch;\n+    private static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -291,3 +290,6 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        waitForLatch(startupLatch, 10, \"Timeout waiting for FX runtime to start\");\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void exit() {\n+        Util.shutdown(stage);\n@@ -305,6 +307,0 @@\n-    @AfterClass\n-    public static void exit() {\n-        Platform.runLater(() -> stage.hide());\n-        Platform.exit();\n-    }\n-\n@@ -318,4 +314,0 @@\n-\n-    public static void waitForLatch(CountDownLatch latch, int seconds, String msg) throws Exception {\n-        Assert.assertTrue(msg, latch.await(seconds, TimeUnit.SECONDS));\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/PixelBufferDrawTest.java","additions":17,"deletions":25,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+import static javafx.scene.paint.Color.MAGENTA;\n+import static org.junit.Assert.fail;\n+\n@@ -33,1 +36,0 @@\n-import com.sun.javafx.PlatformUtil;\n@@ -68,0 +70,3 @@\n+\n+import com.sun.javafx.PlatformUtil;\n+\n@@ -71,3 +76,0 @@\n-import static javafx.scene.paint.Color.MAGENTA;\n-import static org.junit.Assert.fail;\n-\n@@ -183,1 +185,1 @@\n-        waitForLatch(setSceneLatch, 5, \"Timeout while waiting for scene to be set on stage.\");\n+        Util.waitForLatch(setSceneLatch, 5, \"Timeout while waiting for scene to be set on stage.\");\n@@ -201,1 +203,1 @@\n-        waitForLatch(keyActionLatch, 5, \"Timeout while waiting for textField.onKey\" +\n+        Util.waitForLatch(keyActionLatch, 5, \"Timeout while waiting for textField.onKey\" +\n@@ -272,1 +274,1 @@\n-        waitForLatch(setSceneLatch, 5, \"Timeout while waiting for scene to be set on stage.\");\n+        Util.waitForLatch(setSceneLatch, 5, \"Timeout while waiting for scene to be set on stage.\");\n@@ -413,1 +415,1 @@\n-        waitForLatch(setSceneLatch, 5, \"Timeout while waiting for scene to be set on stage.\");\n+        Util.waitForLatch(setSceneLatch, 5, \"Timeout while waiting for scene to be set on stage.\");\n@@ -431,1 +433,1 @@\n-        waitForLatch(onClickLatch, 5, \"Timeout while waiting for button.onMouse\" +\n+        Util.waitForLatch(onClickLatch, 5, \"Timeout while waiting for button.onMouse\" +\n@@ -554,1 +556,1 @@\n-        waitForLatch(setSceneLatch, 5, \"Timeout while waiting for scene to be set on stage.\");\n+        Util.waitForLatch(setSceneLatch, 5, \"Timeout while waiting for scene to be set on stage.\");\n@@ -567,1 +569,1 @@\n-        waitForLatch(mouseDragLatch, 5, \"Timeout while waiting for button.onMouseDragged().\");\n+        Util.waitForLatch(mouseDragLatch, 5, \"Timeout while waiting for button.onMouseDragged().\");\n@@ -615,1 +617,1 @@\n-        waitForLatch(setSceneLatch, 5, \"Timeout while waiting for scene to be set on stage.\");\n+        Util.waitForLatch(setSceneLatch, 5, \"Timeout while waiting for scene to be set on stage.\");\n@@ -624,1 +626,1 @@\n-        waitForLatch(onScrollLatch, 5, \"Timeout while waiting for button.onScroll().\");\n+        Util.waitForLatch(onScrollLatch, 5, \"Timeout while waiting for button.onScroll().\");\n@@ -663,1 +665,1 @@\n-        waitForLatch(setSceneLatch, 5, \"Timeout while waiting for scene to be set on stage.\");\n+        Util.waitForLatch(setSceneLatch, 5, \"Timeout while waiting for scene to be set on stage.\");\n@@ -693,1 +695,1 @@\n-        waitForLatch(setSceneLatch, 5, \"Timeout while waiting for scene to be set on stage.\");\n+        Util.waitForLatch(setSceneLatch, 5, \"Timeout while waiting for scene to be set on stage.\");\n@@ -744,1 +746,1 @@\n-        waitForLatch(setSceneLatch, 5, \"Timeout while waiting for scene to be set on stage.\");\n+        Util.waitForLatch(setSceneLatch, 5, \"Timeout while waiting for scene to be set on stage.\");\n@@ -815,2 +817,1 @@\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        waitForLatch(startupLatch, 10, \"Timeout waiting for FX runtime to start\");\n+        Util.launch(startupLatch, TestApp.class);\n@@ -821,2 +822,1 @@\n-        Platform.runLater(() -> stage.hide());\n-        Platform.exit();\n+        Util.shutdown(stage);\n@@ -836,10 +836,0 @@\n-    private static void waitForLatch(CountDownLatch latch, int seconds, String msg) {\n-        try {\n-            if (!latch.await(seconds, TimeUnit.SECONDS)) {\n-                fail(msg);\n-            }\n-        } catch (Exception ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n-    }\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/RobotTest.java","additions":20,"deletions":30,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n@@ -39,3 +44,0 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n@@ -46,1 +48,2 @@\n-import static org.junit.Assert.fail;\n+\n+import test.util.Util;\n@@ -59,1 +62,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -89,1 +92,1 @@\n-        waitForLatch(setSceneLatch, 5, \"Timeout while waiting for scene to be set on stage.\");\n+        Util.waitForLatch(setSceneLatch, 5, \"Timeout while waiting for scene to be set on stage.\");\n@@ -104,1 +107,1 @@\n-        waitForLatch(onActionLatch, 5, \"Timeout while waiting for button.onAction().\");\n+        Util.waitForLatch(onActionLatch, 5, \"Timeout while waiting for button.onAction().\");\n@@ -129,3 +132,1 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        waitForLatch(startupLatch, 10, \"Timeout waiting for FX runtime to start\");\n+        Util.launch(startupLatch, TestApp.class);\n@@ -136,14 +137,1 @@\n-        Platform.runLater(() -> {\n-            stage.hide();\n-        });\n-        Platform.exit();\n-    }\n-\n-    public static void waitForLatch(CountDownLatch latch, int seconds, String msg) {\n-        try {\n-            if (!latch.await(seconds, TimeUnit.SECONDS)) {\n-                fail(msg);\n-            }\n-        } catch (Exception ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n+        Util.shutdown(stage);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/SceneChangeEventsTest.java","additions":13,"deletions":25,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -40,3 +42,0 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n@@ -49,1 +48,0 @@\n-import static org.junit.Assert.fail;\n@@ -106,1 +104,1 @@\n-        waitForLatch(cmlatch, 5, \"Timeout waiting for ContextMenu to be shown.\");\n+        Util.waitForLatch(cmlatch, 5, \"Timeout waiting for ContextMenu to be shown.\");\n@@ -128,2 +126,1 @@\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        waitForLatch(startupLatch, 10, \"Timeout waiting for FX runtime to start\");\n+        Util.launch(startupLatch, TestApp.class);\n@@ -134,4 +131,1 @@\n-        Platform.runLater(() -> {\n-            stage.hide();\n-        });\n-        Platform.exit();\n+        Util.shutdown(stage);\n@@ -157,10 +151,0 @@\n-\n-    public static void waitForLatch(CountDownLatch latch, int seconds, String msg) {\n-        try {\n-            if (!latch.await(seconds, TimeUnit.SECONDS)) {\n-                fail(msg);\n-            }\n-        } catch (Exception ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TabContextMenuCloseButtonTest.java","additions":6,"deletions":22,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,5 @@\n-import com.sun.javafx.PlatformUtil;\n+import static org.junit.Assert.fail;\n+import static org.junit.Assume.assumeTrue;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n@@ -32,0 +36,1 @@\n+import javafx.geometry.Side;\n@@ -40,4 +45,0 @@\n-import javafx.geometry.Side;\n-\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n@@ -51,2 +52,2 @@\n-import static org.junit.Assert.fail;\n-import static org.junit.Assume.assumeTrue;\n+\n+import com.sun.javafx.PlatformUtil;\n@@ -78,1 +79,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -270,1 +271,1 @@\n-        waitForLatch(latches[0], 5, \"Timeout waiting tabs[0] to get selected.\");\n+        Util.waitForLatch(latches[0], 5, \"Timeout waiting tabs[0] to get selected.\");\n@@ -277,1 +278,1 @@\n-        waitForLatch(pressLatch, 5, \"Timeout waiting for robot.mousePress(Robot.MOUSE_LEFT_BTN).\");\n+        Util.waitForLatch(pressLatch, 5, \"Timeout waiting for robot.mousePress(Robot.MOUSE_LEFT_BTN).\");\n@@ -293,1 +294,1 @@\n-            waitForLatch(moveLatch, 5, \"Timeout waiting for robot.mouseMove(023).\");\n+            Util.waitForLatch(moveLatch, 5, \"Timeout waiting for robot.mouseMove(023).\");\n@@ -301,1 +302,1 @@\n-        waitForLatch(releaseLatch, 5, \"Timeout waiting for robot.mouseRelease(Robot.MOUSE_LEFT_BTN).\");\n+        Util.waitForLatch(releaseLatch, 5, \"Timeout waiting for robot.mouseRelease(Robot.MOUSE_LEFT_BTN).\");\n@@ -305,1 +306,1 @@\n-            waitForLatch(latches[2], 5, \"Timeout waiting tabs[2] to get selected.\");\n+            Util.waitForLatch(latches[2], 5, \"Timeout waiting tabs[2] to get selected.\");\n@@ -323,1 +324,1 @@\n-            waitForLatch(latches[0], 5, \"Timeout waiting tabs[0] to get selected.\");\n+            Util.waitForLatch(latches[0], 5, \"Timeout waiting tabs[0] to get selected.\");\n@@ -326,2 +327,2 @@\n-            waitForLatch(changeListenerLatch, 5, \"Timeout waiting ChangeListener to get called.\");\n-            waitForLatch(latches[1], 5, \"Timeout waiting tabs[1] to get selected.\");\n+            Util.waitForLatch(changeListenerLatch, 5, \"Timeout waiting ChangeListener to get called.\");\n+            Util.waitForLatch(latches[1], 5, \"Timeout waiting tabs[1] to get selected.\");\n@@ -350,3 +351,1 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        waitForLatch(startupLatch, 10, \"Timeout waiting for FX runtime to start\");\n+        Util.launch(startupLatch, TestApp.class);\n@@ -357,4 +356,1 @@\n-        Platform.runLater(() -> {\n-            stage.hide();\n-        });\n-        Platform.exit();\n+        Util.shutdown(stage);\n@@ -384,1 +380,1 @@\n-        waitForLatch(latch, 5, \"Timeout waiting for setupTest().\");\n+        Util.waitForLatch(latch, 5, \"Timeout waiting for setupTest().\");\n@@ -401,11 +397,1 @@\n-        waitForLatch(latch, 5, \"Timeout waiting for resetTest().\");\n-    }\n-\n-    public static void waitForLatch(CountDownLatch latch, int seconds, String msg) {\n-        try {\n-            if (!latch.await(seconds, TimeUnit.SECONDS)) {\n-                fail(msg);\n-            }\n-        } catch (Exception ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n+        Util.waitForLatch(latch, 5, \"Timeout waiting for resetTest().\");\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TabPaneDragPolicyTest.java","additions":22,"deletions":36,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -31,0 +33,1 @@\n+import javafx.geometry.Side;\n@@ -40,5 +43,0 @@\n-import javafx.stage.WindowEvent;\n-import javafx.geometry.Side;\n-\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n@@ -52,2 +50,0 @@\n-import static org.junit.Assert.fail;\n-import static org.junit.Assert.assertTrue;\n@@ -71,1 +67,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -145,1 +141,1 @@\n-        waitForLatch(selectionLatch, 5, \"Timeout waiting for the tab to get selected.\");\n+        Util.waitForLatch(selectionLatch, 5, \"Timeout waiting for the tab to get selected.\");\n@@ -174,1 +170,1 @@\n-        waitForLatch(selectionLatch, 5, \"Timeout waiting for tab[0] to get selected.\");\n+        Util.waitForLatch(selectionLatch, 5, \"Timeout waiting for tab[0] to get selected.\");\n@@ -182,1 +178,1 @@\n-            waitForLatch(selectionLatch, 5, \"Timeout waiting for tab[\" +\n+            Util.waitForLatch(selectionLatch, 5, \"Timeout waiting for tab[\" +\n@@ -211,4 +207,1 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        assertTrue(\"Timeout waiting for FX runtime to start\",\n-                startupLatch.await(15, TimeUnit.SECONDS));\n+        Util.launch(startupLatch, TestApp.class);\n@@ -219,4 +212,1 @@\n-        Platform.runLater(() -> {\n-            stage.hide();\n-        });\n-        Platform.exit();\n+        Util.shutdown(stage);\n@@ -248,1 +238,1 @@\n-        waitForLatch(tabPaneLayoutLatch, 5, \"Timeout waiting for TabPane layout.\");\n+        Util.waitForLatch(tabPaneLayoutLatch, 5, \"Timeout waiting for TabPane layout.\");\n@@ -262,10 +252,0 @@\n-    private static void waitForLatch(CountDownLatch latch, int seconds, String msg) {\n-        try {\n-            if (!latch.await(seconds, TimeUnit.SECONDS)) {\n-                fail(msg);\n-            }\n-        } catch (Exception ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n-    }\n-\n@@ -293,1 +273,1 @@\n-        waitForLatch(moveLatch, 5, \"Timeout waiting for robot.mouseMove().\");\n+        Util.waitForLatch(moveLatch, 5, \"Timeout waiting for robot.mouseMove().\");\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TabPaneReorderTest.java","additions":12,"deletions":32,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.util.concurrent.CountDownLatch;\n@@ -43,3 +44,0 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n@@ -50,1 +48,0 @@\n-import static org.junit.Assert.fail;\n@@ -110,2 +107,1 @@\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        waitForLatch(startupLatch, 10, \"Timeout waiting for FX runtime to start\");\n+        Util.launch(startupLatch, TestApp.class);\n@@ -116,4 +112,1 @@\n-        Platform.runLater(() -> {\n-            stage.hide();\n-        });\n-        Platform.exit();\n+        Util.shutdown(stage);\n@@ -149,10 +142,0 @@\n-    public static void waitForLatch(CountDownLatch latch, int seconds, String msg) {\n-        try {\n-            if (!latch.await(seconds, TimeUnit.SECONDS)) {\n-                fail(msg);\n-            }\n-        } catch (Exception ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n-    }\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/canvas\/ImageSmoothingDrawTest.java","additions":4,"deletions":21,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -35,0 +37,1 @@\n+import javafx.scene.input.MouseButton;\n@@ -39,1 +42,0 @@\n-import javafx.scene.input.MouseButton;\n@@ -45,1 +47,0 @@\n-import test.util.Util;\n@@ -47,2 +48,1 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import test.util.Util;\n@@ -81,1 +81,1 @@\n-        waitForLatch(dialogShownLatch, 10, \"Failed to show Dialog\");\n+        Util.waitForLatch(dialogShownLatch, 10, \"Failed to show Dialog\");\n@@ -88,1 +88,1 @@\n-        waitForLatch(dialogHideLatch, 10, \"Failed to hide Dialog\");\n+        Util.waitForLatch(dialogHideLatch, 10, \"Failed to hide Dialog\");\n@@ -93,2 +93,1 @@\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        waitForLatch(startupLatch, 10, \"FX runtime failed to start.\");\n+        Util.launch(startupLatch, TestApp.class);\n@@ -99,2 +98,1 @@\n-        Platform.runLater(() -> stage.hide());\n-        Platform.exit();\n+        Util.shutdown(stage);\n@@ -150,4 +148,0 @@\n-\n-    public static void waitForLatch(CountDownLatch latch, int seconds, String msg) throws Exception {\n-        Assert.assertTrue(\"Timeout: \" + msg, latch.await(seconds, TimeUnit.SECONDS));\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/dialog\/DialogRepeatedShowHideTest.java","additions":9,"deletions":15,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -34,0 +36,1 @@\n+import javafx.scene.input.MouseButton;\n@@ -38,1 +41,0 @@\n-import javafx.scene.input.MouseButton;\n@@ -44,1 +46,0 @@\n-import test.util.Util;\n@@ -46,2 +47,1 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import test.util.Util;\n@@ -57,1 +57,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -79,1 +79,1 @@\n-        waitForLatch(dialogShownLatch, 10, \"Failed to show Dialog\");\n+        Util.waitForLatch(dialogShownLatch, 10, \"Failed to show Dialog\");\n@@ -88,1 +88,1 @@\n-        waitForLatch(dialogHideLatch, 10, \"Failed to hide Dialog\");\n+        Util.waitForLatch(dialogHideLatch, 10, \"Failed to hide Dialog\");\n@@ -93,3 +93,1 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(SizingTestApp.class, (String[]) null)).start();\n-        waitForLatch(startupLatch, 15, \"FX runtime failed to start.\");\n+        Util.launch(startupLatch, SizingTestApp.class);\n@@ -100,2 +98,1 @@\n-        Platform.runLater(() -> stage.hide());\n-        Platform.exit();\n+        Util.shutdown(stage);\n@@ -158,4 +155,0 @@\n-\n-    public static void waitForLatch(CountDownLatch latch, int seconds, String msg) throws Exception {\n-        Assert.assertTrue(\"Timeout: \" + msg, latch.await(seconds, TimeUnit.SECONDS));\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/dialog\/DialogWithOwnerSizingTest.java","additions":10,"deletions":17,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -30,0 +34,2 @@\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.scene.Scene;\n@@ -32,1 +38,0 @@\n-import javafx.scene.Scene;\n@@ -39,4 +44,0 @@\n-import javafx.beans.property.SimpleObjectProperty;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n@@ -47,1 +48,2 @@\n-import static org.junit.Assert.fail;\n+\n+import test.util.Util;\n@@ -61,1 +63,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -90,1 +92,1 @@\n-        waitForLatch(latch, 5, \"Timeout while waiting for mouse double click\");\n+        Util.waitForLatch(latch, 5, \"Timeout while waiting for mouse double click\");\n@@ -107,5 +109,1 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(\n-                TableViewResizeColumnToFitContentTest.TestApp.class,\n-                (String[]) null)).start();\n-        waitForLatch(startupLatch, 10, \"Timeout waiting for FX runtime to start\");\n+        Util.launch(startupLatch, TestApp.class);\n@@ -116,15 +114,1 @@\n-        Platform.runLater(() -> {\n-            stage.hide();\n-        });\n-        Platform.exit();\n-    }\n-\n-    public static void waitForLatch(CountDownLatch latch,\n-            int seconds, String msg) {\n-        try {\n-            if (!latch.await(seconds, TimeUnit.SECONDS)) {\n-                fail(msg);\n-            }\n-        } catch (Exception ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n+        Util.shutdown(stage);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/tableview\/TableViewResizeColumnToFitContentTest.java","additions":13,"deletions":29,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -30,1 +34,1 @@\n-import javafx.scene.control.cell.TreeItemPropertyValueFactory;\n+import javafx.scene.Scene;\n@@ -34,1 +38,1 @@\n-import javafx.scene.Scene;\n+import javafx.scene.control.cell.TreeItemPropertyValueFactory;\n@@ -41,3 +45,0 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n@@ -48,1 +49,2 @@\n-import static org.junit.Assert.fail;\n+\n+import test.util.Util;\n@@ -62,1 +64,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -90,1 +92,1 @@\n-        waitForLatch(latch, 5, \"Timeout while waiting for mouse double click\");\n+        Util.waitForLatch(latch, 5, \"Timeout while waiting for mouse double click\");\n@@ -107,5 +109,1 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(\n-                TreeTableViewResizeColumnToFitContentTest.TestApp.class,\n-                (String[]) null)).start();\n-        waitForLatch(startupLatch, 10, \"Timeout waiting for FX runtime to start\");\n+        Util.launch(startupLatch, TestApp.class);\n@@ -116,15 +114,1 @@\n-        Platform.runLater(() -> {\n-            stage.hide();\n-        });\n-        Platform.exit();\n-    }\n-\n-    public static void waitForLatch(CountDownLatch latch,\n-                                    int seconds, String msg) {\n-        try {\n-            if (!latch.await(seconds, TimeUnit.SECONDS)) {\n-                fail(msg);\n-            }\n-        } catch (Exception ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n+        Util.shutdown(stage);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/treetableview\/TreeTableViewResizeColumnToFitContentTest.java","additions":13,"deletions":29,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -35,0 +37,1 @@\n+\n@@ -40,2 +43,1 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import test.util.Util;\n@@ -60,2 +62,1 @@\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        waitForLatch(startupLatch, 10, \"FX runtime failed to start.\");\n+        Util.launch(startupLatch, TestApp.class);\n@@ -66,7 +67,1 @@\n-        Platform.runLater(() -> {\n-            lastWindow.hide();\n-            secondWindow.hide();\n-            firstWindow.hide();\n-            stage.hide();\n-        });\n-        Platform.exit();\n+        Util.shutdown(lastWindow, secondWindow, firstWindow, stage);\n@@ -103,4 +98,0 @@\n-    public static void waitForLatch(CountDownLatch latch, int seconds, String msg) throws Exception {\n-        Assert.assertTrue(\"Timeout: \" + msg, latch.await(seconds, TimeUnit.SECONDS));\n-    }\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/CheckWindowOrderTest.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n@@ -30,0 +33,1 @@\n+\n@@ -39,0 +43,1 @@\n+\n@@ -43,1 +48,0 @@\n-import test.util.Util;\n@@ -45,1 +49,1 @@\n-import static org.junit.Assert.*;\n+import test.util.Util;\n@@ -113,3 +117,1 @@\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        assertTrue(\"Timeout waiting for FX runtime to start\",\n-                startupLatch.await(15, TimeUnit.SECONDS));\n+        Util.launch(startupLatch, TestApp.class);\n@@ -120,5 +122,1 @@\n-        Platform.runLater(() -> {\n-            if (stage1 != null) stage1.hide();\n-            if (stage2 != null) stage2.hide();\n-            Platform.exit();\n-        });\n+        Util.shutdown(stage1, stage2);\n@@ -166,1 +164,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/DualWindowTest.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -39,0 +41,1 @@\n+\n@@ -43,1 +46,0 @@\n-import test.util.Util;\n@@ -45,2 +47,1 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import test.util.Util;\n@@ -73,1 +74,1 @@\n-        waitForLatch(alertShownLatch, 10, \"Failed to show Alert\");\n+        Util.waitForLatch(alertShownLatch, 10, \"Failed to show Alert\");\n@@ -78,2 +79,1 @@\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        waitForLatch(startupLatch, 10, \"FX runtime failed to start.\");\n+        Util.launch(startupLatch, TestApp.class);\n@@ -84,5 +84,1 @@\n-        Platform.runLater(() -> {\n-            stage.hide();\n-            stage2.hide();\n-        });\n-        Platform.exit();\n+        Util.shutdown(stage, stage2);\n@@ -107,1 +103,1 @@\n-        waitForLatch(alertCloseLatch, 10, \"Failed to close alert.\");\n+        Util.waitForLatch(alertCloseLatch, 10, \"Failed to close alert.\");\n@@ -155,4 +151,0 @@\n-\n-    public static void waitForLatch(CountDownLatch latch, int seconds, String msg) throws Exception {\n-        Assert.assertTrue(\"Timeout: \" + msg, latch.await(seconds, TimeUnit.SECONDS));\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/FocusParentWindowOnChildCloseTest.java","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -37,0 +39,1 @@\n+\n@@ -38,1 +41,0 @@\n-import org.junit.Assert;\n@@ -41,1 +43,0 @@\n-import test.util.Util;\n@@ -43,2 +44,1 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import test.util.Util;\n@@ -55,2 +55,6 @@\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        waitForLatch(startupLatch, 15, \"FX runtime failed to start.\");\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void exit() {\n+        Util.shutdown(stage);\n@@ -70,13 +74,1 @@\n-        waitForLatch(alertCloseLatch, 10, \"Alerts not closed, wrong focus\");\n-    }\n-\n-    @AfterClass\n-    public static void exit() {\n-        Platform.runLater(() -> {\n-            stage.hide();\n-        });\n-        Platform.exit();\n-    }\n-\n-    private static void waitForLatch(CountDownLatch latch, int seconds, String msg) throws Exception {\n-        Assert.assertTrue(\"Timeout: \" + msg, latch.await(seconds, TimeUnit.SECONDS));\n+        Util.waitForLatch(alertCloseLatch, 10, \"Alerts not closed, wrong focus\");\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/WrongStageFocusWithApplicationModalityTest.java","additions":12,"deletions":20,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -27,1 +27,3 @@\n-import com.sun.javafx.PlatformUtil;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.concurrent.CountDownLatch;\n@@ -30,3 +32,0 @@\n-import javafx.application.Platform;\n-import javafx.beans.value.ObservableValue;\n-import javafx.concurrent.Worker.State;\n@@ -34,0 +33,2 @@\n+import javafx.scene.Scene;\n+import javafx.scene.input.KeyCode;\n@@ -37,1 +38,0 @@\n-import javafx.scene.Scene;\n@@ -40,1 +40,0 @@\n-import javafx.scene.input.KeyCode;\n@@ -43,9 +42,0 @@\n-import java.lang.Integer;\n-import java.lang.Number;\n-\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n-import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-\n@@ -54,1 +44,0 @@\n-import org.junit.Assert;\n@@ -57,0 +46,2 @@\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n@@ -60,2 +51,0 @@\n-import static org.junit.Assert.*;\n-\n@@ -88,1 +77,1 @@\n-    private static CountDownLatch startupLatch;\n+    private static CountDownLatch startupLatch = new CountDownLatch(2);\n@@ -195,3 +184,1 @@\n-        startupLatch = new CountDownLatch(2);\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        waitForLatch(startupLatch, 15, \"Timeout waiting for FX runtime to start\");\n+        Util.launch(startupLatch, TestApp.class);\n@@ -202,4 +189,1 @@\n-        Platform.runLater(() -> {\n-            stage.hide();\n-        });\n-        Platform.exit();\n+        Util.shutdown(stage);\n@@ -215,10 +199,0 @@\n-\n-    public static void waitForLatch(CountDownLatch latch, int seconds, String msg) {\n-        try {\n-            if (!latch.await(seconds, TimeUnit.SECONDS)) {\n-                fail(msg);\n-            }\n-        } catch (Exception ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/web\/PointerEventTest.java","additions":10,"deletions":36,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+import static test.util.Util.TIMEOUT;\n+\n@@ -31,0 +35,1 @@\n+\n@@ -34,0 +39,1 @@\n+import javafx.scene.Scene;\n@@ -37,1 +43,0 @@\n-import javafx.scene.Scene;\n@@ -41,2 +46,1 @@\n-import junit.framework.AssertionFailedError;\n-import org.junit.After;\n+\n@@ -46,1 +50,0 @@\n-import test.util.Util;\n@@ -48,2 +51,1 @@\n-import static org.junit.Assert.*;\n-import static test.util.Util.TIMEOUT;\n+import test.util.Util;\n@@ -66,1 +68,1 @@\n-    private static CountDownLatch startupLatch;\n+    private static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -101,9 +103,1 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n-        try {\n-            if (!startupLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n-                fail(\"Timeout waiting for FX runtime to start\");\n-            }\n-        } catch (InterruptedException ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n+        Util.launch(startupLatch, TestApp.class);\n@@ -114,1 +108,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/web\/TooltipFXTest.java","additions":11,"deletions":17,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,8 @@\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -36,5 +44,0 @@\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-import junit.framework.AssertionFailedError;\n@@ -45,0 +48,2 @@\n+\n+import junit.framework.AssertionFailedError;\n@@ -46,4 +51,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static test.util.Util.TIMEOUT;\n@@ -91,13 +92,1 @@\n-        \/\/ Start the Application\n-        new Thread(() -> Application.launch(MyApp.class, (String[]) null)).start();\n-\n-        try {\n-            if (!launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n-                throw new AssertionFailedError(\"Timeout waiting for Application to launch\");\n-            }\n-        } catch (InterruptedException ex) {\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n-        }\n-\n+        Util.launch(launchLatch, MyApp.class);\n@@ -109,1 +98,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/testharness\/VisualTestBase.java","additions":13,"deletions":24,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,2 @@\n+\n+import javafx.application.Application;\n@@ -41,1 +43,2 @@\n-import junit.framework.AssertionFailedError;\n+import javafx.stage.Stage;\n+\n@@ -44,0 +47,4 @@\n+import com.sun.javafx.application.PlatformImpl;\n+\n+import junit.framework.AssertionFailedError;\n+\n@@ -296,0 +303,74 @@\n+\n+    \/**\n+     * Launches an FX application, at the same time ensuring that it has been\n+     * actually launched within 15 seconds.\n+     * <p>\n+     * The application being started must call {@link CountdownLatch#countDown()} once to signal\n+     * its successful start (for example, by setting a handler for {@link javafx.stage.WindowEvent.WINDOW_SHOWN} event\n+     * on its primary Stage).\n+     *\n+     * @param startupLatch\n+     * @param applicationClass - application to launch\n+     * @param args - command line arguments\n+     *\/\n+    public static <T extends Application> void launch (\n+            CountDownLatch startupLatch,\n+            Class<T> applicationClass,\n+            String... args) {\n+        launch(startupLatch, 15, applicationClass, args);\n+    }\n+\n+    \/**\n+     * Launches an FX application, at the same time ensuring that it has been\n+     * actually launched within the specified time.\n+     * <p>\n+     * The application being started must call {@link CountdownLatch#countDown()} once to signal\n+     * its successful start (for example, by setting a handler for {@link javafx.stage.WindowEvent.WINDOW_SHOWN} event\n+     * on its primary Stage).\n+     *\n+     * @param startupLatch\n+     * @param timeoutSeconds - timeout in seconds after which the test fails\n+     * @param applicationClass - application to launch\n+     * @param args - command line arguments\n+     *\/\n+    public static <T extends Application> void launch (\n+            CountDownLatch startupLatch,\n+            int timeoutSeconds,\n+            Class<T> applicationClass,\n+            String... args) {\n+\n+        new Thread(() -> Application.launch(applicationClass, args)).start();\n+        String msg = \"Failed to launch FX application \" + applicationClass + \" within \" + timeoutSeconds + \" sec.\";\n+        try {\n+            Assert.assertTrue(msg, startupLatch.await(timeoutSeconds, TimeUnit.SECONDS));\n+        } catch (InterruptedException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    \/**\n+     * This synchronous method first hides all the specified stages (ignoring any null Stages)\n+     * in the platform thread, then calls {@link Platform.exit()}.\n+     *\/\n+    public static void shutdown(Stage... stages) {\n+        runAndWait(() -> {\n+            for (Stage s : stages) {\n+                if (s != null) {\n+                    s.hide();\n+                }\n+            }\n+            Platform.exit();\n+        });\n+    }\n+\n+    \/**\n+     * Calls CountDownLatch.await() with the specified timeout (in seconds).\n+     * Throws an exception if await() returns false or the process gets interrupted.\n+     *\/\n+    public static void waitForLatch(CountDownLatch latch, int seconds, String msg) {\n+        try {\n+            Assert.assertTrue(\"Timeout: \" + msg, latch.await(seconds, TimeUnit.SECONDS));\n+        } catch (InterruptedException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n","filename":"tests\/system\/src\/test\/java\/test\/util\/Util.java","additions":83,"deletions":2,"binary":false,"changes":85,"status":"modified"}]}