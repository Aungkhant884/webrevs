{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import javafx.beans.value.WeakChangeListener;\n@@ -48,0 +49,1 @@\n+import java.lang.ref.WeakReference;\n@@ -86,1 +88,4 @@\n-            anchor.sceneProperty().removeListener(sceneChangeListenerMap.get(anchor));\n+            ChangeListener<Scene> listener = sceneChangeListenerMap.get(anchor).get();\n+            if (listener != null) {\n+                anchor.sceneProperty().removeListener(listener);\n+            }\n@@ -116,1 +121,2 @@\n-    private static Map<Object, ChangeListener<Scene>> sceneChangeListenerMap = new WeakHashMap<>();\n+    \/* It's okay to have the value Weak, because we only remember it to remove the listener later on *\/\n+    private static Map<Object, WeakReference<ChangeListener<Scene>>> sceneChangeListenerMap = new WeakHashMap<>();\n@@ -119,1 +125,2 @@\n-        ChangeListener<Scene> sceneChangeListener = sceneChangeListenerMap.get(anchor);\n+        WeakReference<ChangeListener<Scene>> sceneChangeListenerW = sceneChangeListenerMap.get(anchor);\n+        ChangeListener<Scene> sceneChangeListener = sceneChangeListenerW == null ? null : sceneChangeListenerW.get();\n@@ -129,1 +136,1 @@\n-            sceneChangeListenerMap.put(anchor, sceneChangeListener);\n+            sceneChangeListenerMap.put(anchor, new WeakReference<>(sceneChangeListener));\n@@ -196,1 +203,2 @@\n-    private static Map<MenuItem, ChangeListener<KeyCombination>> changeListenerMap = new WeakHashMap<>();\n+    \/* It's okay to have the value Weak, because we only remember it to remove the listener later on *\/\n+    private static Map<MenuItem, WeakReference<ChangeListener<KeyCombination>>> changeListenerMap = new WeakHashMap<>();\n@@ -200,1 +208,2 @@\n-        ChangeListener<KeyCombination> listener = changeListenerMap.get(menuItem);\n+        WeakReference<ChangeListener<KeyCombination>> listenerW = changeListenerMap.get(menuItem);\n+        ChangeListener<KeyCombination> listener = listenerW == null ? null : listenerW.get();\n@@ -213,1 +222,1 @@\n-            changeListenerMap.put(menuItem, listener);\n+            changeListenerMap.put(menuItem, new WeakReference<>(listener));\n@@ -245,1 +254,4 @@\n-                anchor.sceneProperty().removeListener(sceneChangeListenerMap.get(anchor));\n+                ChangeListener<Scene> listener = sceneChangeListenerMap.get(anchor).get();\n+                if (listener != null) {\n+                    anchor.sceneProperty().removeListener(listener);\n+                }\n@@ -275,1 +287,2 @@\n-                ChangeListener<KeyCombination> listener = changeListenerMap.get(menuitem);\n+                WeakReference<ChangeListener<KeyCombination>> listenerW = changeListenerMap.get(menuitem);\n+                ChangeListener<KeyCombination> listener = listenerW == null ? null : listenerW.get();\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/ControlAcceleratorSupport.java","additions":22,"deletions":9,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import javafx.scene.layout.StackPane;\n@@ -34,0 +35,1 @@\n+import test.util.memory.JMemoryBuddy;\n@@ -101,0 +103,15 @@\n+\n+    @Test\n+    public void testMemoryLeak_JDK_8274022() {\n+        JMemoryBuddy.memoryTest(checker -> {\n+            MenuItem menuItem = new MenuItem(\"LeakingItem\");\n+            MenuBar menuBar = new MenuBar(new Menu(\"MENU_BAR\", null, menuItem));\n+            StageLoader sl = new StageLoader(new StackPane(menuBar));\n+            sl.getStage().close();\n+\n+            \/\/ Set listener to something on the scene, to make sure the listener references the whole scene.\n+            menuItem.setOnAction((e) -> { menuItem.fire();});\n+\n+            checker.assertCollectable(menuItem);\n+        });\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ControlAcceleratorSupportTest.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}