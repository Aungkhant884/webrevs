{"files":[{"patch":"@@ -442,0 +442,5 @@\n+\n+                @Override\n+                public String toString() {\n+                    return get();\n+                }\n@@ -447,5 +452,1 @@\n-    \/**\n-     * Get the name of a job.\n-     * @return a string representing the name of a job\n-     *\/\n-    public String getJobName() {\n+    public final String getJobName() {\n@@ -455,6 +456,1 @@\n-\n-    \/**\n-     * Set the name of a job.\n-     * @param name string representing the name of a job\n-     *\/\n-    public void setJobName(String name) {\n+    public final void setJobName(String name) {\n@@ -547,1 +543,1 @@\n-    public String getOutputFile() {\n+    public final String getOutputFile() {\n@@ -551,2 +547,1 @@\n-\n-    public void setOutputFile(String filePath) {\n+    public final void setOutputFile(String filePath) {\n@@ -602,0 +597,5 @@\n+\n+                @Override\n+                public String toString() {\n+                     return \"\" + get();\n+                }\n@@ -607,5 +607,1 @@\n-    \/**\n-     * Get the number of copies to print.\n-     * @return number of copies to print\n-     *\/\n-    public int getCopies() {\n+    public final int getCopies() {\n@@ -615,4 +611,0 @@\n-    \/**\n-     * Set the number of copies to print.\n-     * @param nCopies number of copies to print\n-     *\/\n@@ -697,0 +689,19 @@\n+\n+                @Override\n+                public String toString() {\n+                      PageRange[] ranges = (PageRange[])get();\n+                      if (ranges == null || ranges.length == 0) {\n+                          return \"null\";\n+                      }\n+                      String s = \"\";\n+                      int len = ranges.length;\n+                      for (int r=0; r<len; r++) {\n+                          s += ranges[r];\n+                          if ((r+1) < len) {\n+                              s += \", \";\n+                          } else {\n+                              s += \".\";\n+                          }\n+                      }\n+                      return s;\n+                }\n@@ -702,6 +713,1 @@\n-    \/**\n-     * The range of pages to print. null always means all pages.\n-     * See {@link pageRangesProperty} for more details.\n-     * @return null or an array as specified above\n-     *\/\n-    public PageRange[] getPageRanges() {\n+    public final PageRange[] getPageRanges() {\n@@ -720,1 +726,1 @@\n-    public void setPageRanges(PageRange... pages) {\n+    public final void setPageRanges(PageRange... pages) {\n@@ -772,0 +778,5 @@\n+\n+                @Override\n+                public String toString() {\n+                     return  get().toString();\n+                }\n@@ -777,7 +788,1 @@\n-    \/**\n-     * If a printer supports it, then a job may be printed on\n-     * both sides of the media (paper), ie duplex printing.\n-     * This method returns the selected setting.\n-     * @return the duplex (side) setting.\n-     *\/\n-    public PrintSides getPrintSides() {\n+    public final PrintSides getPrintSides() {\n@@ -787,7 +792,1 @@\n-    \/**\n-     * Set the <code>PrintSides<\/code> property which controls\n-     * duplex printing.\n-     * A null value is ignored.\n-     * @param sides new setting for number of sides.\n-     *\/\n-    public void setPrintSides(PrintSides sides) {\n+    public final void setPrintSides(PrintSides sides) {\n@@ -808,0 +807,13 @@\n+     * Collation determines how sheets are sorted when\n+     * multiple copies of a document are printed.\n+     * As such it is only relevant if 2 or more copies of\n+     * a document with 2 more sheets are printed.\n+     * A sheet is the physical media, so documents with 2 pages\n+     * that are printed N-up, or double-sided may still have only\n+     * one sheet.\n+     * A collated print job produces documents with sheets\n+     * of a document sorted in sequence.\n+     * An uncollated job collects together the multiple copies\n+     * of the same sheet.\n+     * Uncollated (<code>false<\/code>) is the typical default value.\n+     *\n@@ -848,0 +860,5 @@\n+\n+                @Override\n+                public String toString() {\n+                     return get().toString();\n+                }\n@@ -853,17 +870,1 @@\n-    \/**\n-     * Collation determines how sheets are sorted when\n-     * multiple copies of a document are printed.\n-     * As such it is only relevant if 2 or more copies of\n-     * a document with 2 more sheets are printed.\n-     * A sheet is the physical media, so documents with 2 pages\n-     * that are printed N-up, or double-sided may still have only\n-     * one sheet.\n-     * A collated print job produces documents with sheets\n-     * of a document sorted in sequence.\n-     * An uncollated job collects together the multiple copies\n-     * of the same sheet.\n-     * Uncollated (<code>false<\/code>) is the typical default value.\n-     *\n-     * @return the collation\n-     *\/\n-    public Collation getCollation() {\n+    public final Collation getCollation() {\n@@ -873,6 +874,1 @@\n-    \/**\n-     * Set the <code>Collation<\/code> property.\n-     * A null value is ignored.\n-     * @param collation new setting for collation\n-     *\/\n-    public void setCollation(Collation collation) {\n+    public final void setCollation(Collation collation) {\n@@ -893,0 +889,1 @@\n+     * If a null value is set it is ignored.\n@@ -933,0 +930,5 @@\n+\n+                @Override\n+                public String toString() {\n+                     return get().toString();\n+                }\n@@ -938,1 +940,1 @@\n-    public PrintColor getPrintColor() {\n+    public final PrintColor getPrintColor() {\n@@ -942,7 +944,1 @@\n-    \/**\n-     * Set the <code>PrintColor<\/code> property.\n-     * A null value is ignored.\n-     *\n-     * @param color new setting for print color.\n-     *\/\n-    public void setPrintColor(PrintColor color) {\n+    public final void setPrintColor(PrintColor color) {\n@@ -963,0 +959,9 @@\n+     * <p>\n+     * Note that quality and resolution are overlapping concepts.\n+     * Therefore a printer may support setting one, or the other but\n+     * not both. Applications setting these programmatically should\n+     * query both properties and select appropriately from the supported\n+     * values. If a printer supports non-standard values, code likely\n+     * cannot distinguish the printer's interpretation of these values\n+     * and it is safest to stick to selecting a standard value that\n+     * matches the requirement.\n@@ -1003,0 +1008,5 @@\n+\n+                @Override\n+                public String toString() {\n+                     return  get().toString();\n+                }\n@@ -1008,1 +1018,1 @@\n-    public PrintQuality getPrintQuality() {\n+    public final PrintQuality getPrintQuality() {\n@@ -1012,15 +1022,1 @@\n-    \/**\n-     * Set the <code>PrintQuality<\/code> property.\n-     * A null value is ignored.\n-     * <p>\n-     * Note that quality and resolution overlapping concepts.\n-     * Therefore a printer may support setting one, or the other but\n-     * not both. Applications setting these programmatically should\n-     * query both properties and select appropriately from the supported\n-     * values. If a printer supports non-standard values, code likely\n-     * cannot distinguish the printer's interpretation of these values\n-     * and is safest to stick to selecting from the standard value that\n-     * matches the requirement.\n-     * @param quality new setting for print quality.\n-     *\/\n-    public void setPrintQuality(PrintQuality quality) {\n+    public final void setPrintQuality(PrintQuality quality) {\n@@ -1042,0 +1038,10 @@\n+     * A null value is ignored.\n+     * <p>\n+     * Note that quality and resolution are overlapping concepts.\n+     * Therefore a printer may support setting one, or the other but\n+     * not both. Applications setting these programmatically should\n+     * query both properties and select appropriately from the supported\n+     * values. If a printer supports non-standard values, code likely\n+     * cannot distinguish the printer's interpretation of these values\n+     * and it is safest to stick to selecting a standard value that\n+     * matches the requirement.\n@@ -1084,0 +1090,5 @@\n+\n+                @Override\n+                public String toString() {\n+                     return  get().toString();\n+                }\n@@ -1089,5 +1100,1 @@\n-    \/**\n-     *\n-     * @return the print resolution\n-     *\/\n-    public PrintResolution getPrintResolution() {\n+    public final PrintResolution getPrintResolution() {\n@@ -1097,15 +1104,1 @@\n-    \/**\n-     * Set the <code>PrintResolution<\/code> property.\n-     * A null value is ignored.\n-     * <p>\n-     * Note that quality and resolution overlapping concepts.\n-     * Therefore a printer may support setting one, or the other but\n-     * not both. Applications setting these programmatically should\n-     * query both properties and select appropriately from the supported\n-     * values. If a printer supports non-standard values, code likely\n-     * cannot distinguish the printer's interpretation of these values\n-     * and is safest to stick to selecting from the standard value that\n-     * matches the requirement.\n-     * @param resolution new setting for print resolution.\n-     *\/\n-    public void setPrintResolution(PrintResolution resolution) {\n+    public final void setPrintResolution(PrintResolution resolution) {\n@@ -1127,0 +1120,1 @@\n+     * A null value is ignored.\n@@ -1167,0 +1161,5 @@\n+\n+                @Override\n+                public String toString() {\n+                     return  get().toString();\n+                }\n@@ -1173,1 +1172,1 @@\n-    public PaperSource getPaperSource() {\n+    public final PaperSource getPaperSource() {\n@@ -1177,1 +1176,1 @@\n-    public void setPaperSource(PaperSource value) {\n+    public final void setPaperSource(PaperSource value) {\n@@ -1199,0 +1198,1 @@\n+     * Setting a null value is ignored.\n@@ -1231,0 +1231,5 @@\n+\n+                @Override\n+                public String toString() {\n+                     return  get().toString();\n+                }\n@@ -1236,5 +1241,1 @@\n-    \/**\n-     * Get the current page layout for this job.\n-     * @return page layout to use for the job.\n-     *\/\n-    public PageLayout getPageLayout() {\n+    public final PageLayout getPageLayout() {\n@@ -1244,5 +1245,1 @@\n-    \/**\n-     * Set the PageLayout to use.\n-     * @param pageLayout The page layout to use.\n-     *\/\n-    public void setPageLayout(PageLayout pageLayout) {\n+    public final void setPageLayout(PageLayout pageLayout) {\n@@ -1262,1 +1259,2 @@\n-            \" Page ranges = \" + getPageRanges() + nl +\n+            \" Output file = \" + getOutputFile() + nl +\n+            \" Page ranges = \" + pageRangesProperty().toString() + nl +\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/print\/JobSettings.java","additions":122,"deletions":124,"binary":false,"changes":246,"status":"modified"},{"patch":"@@ -90,2 +90,1 @@\n-     * page number of the range. See {@link getStartPage getStartPage()}\n-     * for more information.\n+     * page number of the range.\n@@ -94,1 +93,1 @@\n-    public ReadOnlyIntegerProperty startPageProperty() {\n+    public final ReadOnlyIntegerProperty startPageProperty() {\n@@ -98,4 +97,1 @@\n-    \/**\n-     * @return the starting page of the range.\n-     *\/\n-    public int getStartPage() {\n+    public final int getStartPage() {\n@@ -126,2 +122,1 @@\n-     * page number of the range. See {@link #getEndPage getEndPage()}\n-     * for more information.\n+     * page number of the range.\n@@ -130,1 +125,1 @@\n-    public ReadOnlyIntegerProperty endPageProperty() {\n+    public final ReadOnlyIntegerProperty endPageProperty() {\n@@ -134,4 +129,1 @@\n-    \/**\n-     * @return the ending page of the range.\n-     *\/\n-    public int getEndPage() {\n+    public final int getEndPage() {\n@@ -140,0 +132,5 @@\n+\n+    @Override\n+    public String toString() {\n+       return \"Pages \" + getStartPage() + \" to \" + getEndPage();\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/print\/PageRange.java","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -212,22 +212,2 @@\n-     * Property representing the\n-     * <code>Printer<\/code> for this job.\n-     * @return the <code>Printer<\/code> for this job\n-     *\/\n-    public final ObjectProperty<Printer> printerProperty() {\n-        \/* The PrinterJob constructor always creates this property,\n-         * so it can be returned directly.\n-         *\/\n-        return printer;\n-    }\n-\n-    \/**\n-     * Gets the printer currently associated with this job.\n-     * @return printer for the job.\n-     *\/\n-    public synchronized Printer getPrinter() {\n-        return printerProperty().get();\n-    }\n-\n-    \/**\n-     * Change the printer for this job.\n-     * If the new printer does not support the current job settings,\n+     * Property representing the {@code Printer} for this job.\n+     * When setting a printer which does not support the current job settings,\n@@ -246,1 +226,1 @@\n-     * @param printer to be used for this print job.\n+     * @return the {@code Printer} for this job\n@@ -248,1 +228,12 @@\n-    public synchronized void setPrinter(Printer printer) {\n+    public final ObjectProperty<Printer> printerProperty() {\n+        \/* The PrinterJob constructor always creates this property,\n+         * so it can be returned directly.\n+         *\/\n+        return printer;\n+    }\n+\n+    public synchronized final Printer getPrinter() {\n+        return printerProperty().get();\n+    }\n+\n+    public synchronized final void setPrinter(Printer printer) {\n@@ -492,1 +483,1 @@\n-    public ReadOnlyObjectProperty<JobStatus> jobStatusProperty() {\n+    public final ReadOnlyObjectProperty<JobStatus> jobStatusProperty() {\n@@ -496,5 +487,1 @@\n-    \/**\n-     * Obtain the current status of the job.\n-     * @return the current <code>JobStatus<\/code>\n-     *\/\n-    public JobStatus getJobStatus() {\n+    public final JobStatus getJobStatus() {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/print\/PrinterJob.java","additions":17,"deletions":30,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -0,0 +1,149 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javafx.print.Printer;\n+import javafx.print.PrinterJob;\n+import javafx.print.JobSettings;\n+import javafx.print.Collation;\n+import javafx.print.PageLayout;\n+import javafx.print.PageOrientation;\n+import javafx.print.PageRange;\n+import javafx.print.Paper;\n+import javafx.print.PaperSource;\n+import javafx.print.PrintColor;\n+import javafx.print.PrintQuality;\n+import javafx.print.PrintResolution;\n+import javafx.print.PrintSides;\n+\n+\n+import javafx.application.Application;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.text.Text;\n+import javafx.stage.Screen;\n+import javafx.stage.Stage;\n+\n+public class JobSettingsInfo extends Application {\n+\n+    private final int WIDTH = 1000;\n+    private final int HEIGHT = 800;\n+\n+    private volatile boolean passed = false;\n+    private Scene scene;\n+    private VBox root;\n+\n+    public static void main(String[] args) {\n+        launch(args);\n+    }\n+\n+    public void start(Stage stage) {\n+        stage.setWidth(WIDTH);\n+        stage.setHeight(HEIGHT);\n+        stage.setTitle(\"Printing to file test\");\n+        Rectangle2D bds = Screen.getPrimary().getVisualBounds();\n+        stage.setX((bds.getWidth() - WIDTH) \/ 2);\n+        stage.setY((bds.getHeight() - HEIGHT) \/ 2);\n+        stage.setScene(createScene());\n+        stage.show();\n+    }\n+\n+    static final String instructions =\n+        \"This displays the JobSettings info as JobSettings.toString() and \\n\" +\n+        \"again as individual properties. There's no more validation as to \\n\" +\n+        \"the exact values than is necessary since it is just toString()\\n \" +\n+        \"being tested. Just exit the test after reading what is displayed\";\n+\n+    static final String noprinter =\n+            \"There are no printers installed. This test cannot be run\\n\";\n+\n+    private TextArea createTextArea(String msg, int hgt) {\n+        TextArea t = new TextArea(msg);\n+        t.setWrapText(false);\n+        t.setEditable(false);\n+        t.prefRowCountProperty().set(hgt);\n+        return t;\n+    }\n+\n+    private Scene createScene() {\n+\n+        root = new VBox();\n+        scene = new Scene(root);\n+\n+        String msg = instructions;\n+        if (Printer.getDefaultPrinter() == null) {\n+            msg = noprinter;\n+        }\n+        TextArea info = createTextArea(msg,6);\n+        root.getChildren().add(info);\n+\n+        String infoText = runTest();\n+        TextArea jobInfo = createTextArea(infoText,40);\n+        root.getChildren().add(jobInfo);\n+\n+        return scene;\n+    }\n+\n+    public String runTest() {\n+        String text = \"\";\n+        PrinterJob job = PrinterJob.createPrinterJob();\n+        JobSettings settings = job.getJobSettings();\n+        Printer printer = job.getPrinter();\n+        PageLayout pl = printer.createPageLayout(Paper.A4, PageOrientation.LANDSCAPE,\n+                Printer.MarginType.EQUAL);\n+        settings.pageLayoutProperty().set(pl);\n+        String fileName = \"printtofiletest.prn\";\n+        settings.outputFileProperty().set(fileName);\n+        settings.jobNameProperty().set(\"Test Job Name\");\n+        settings.setPageRanges(new PageRange(1,2), new PageRange(5,10));\n+        settings.copiesProperty().set(2);\n+        settings.paperSourceProperty().set(PaperSource.MANUAL);\n+        settings.collationProperty().set(Collation.COLLATED);\n+        settings.printColorProperty().set(PrintColor.COLOR);\n+        settings.printSidesProperty().set(PrintSides.DUPLEX);\n+        settings.printQualityProperty().set(PrintQuality.DRAFT);\n+\n+        text += \"Printer=\" + printer + \"\\n\";\n+        text += \"\\n\";\n+        text += \"Settings:\\n\";\n+        text += settings;\n+        text += \"\\n\\n\";\n+        text += \"Individually printed settings\\n\";\n+        text += \"Collation : \" + settings.collationProperty() + \"\\n\";\n+        text += \"Copies : \" + settings.copiesProperty() + \"\\n\";\n+        text += \"Sides : \" + settings.printSidesProperty() + \"\\n\";\n+        text += \"Job name : \" + settings.jobNameProperty() + \"\\n\";\n+        text += \"Output file : \" + settings.outputFileProperty() + \"\\n\";\n+        text += \"Page Ranges : \" + settings.pageRangesProperty() + \"\\n\";\n+        text += \"Color : \" + settings.printColorProperty() + \"\\n\";\n+        text += \"Quality : \" + settings.printQualityProperty() + \"\\n\";\n+        text += \"Resolution : \" + settings.printResolutionProperty() + \"\\n\";\n+        text += \"Source : \" + settings.paperSourceProperty() + \"\\n\";\n+        text += \"Page layout : \" + settings.pageLayoutProperty() + \"\\n\";\n+\n+        return text;\n+    }\n+}\n","filename":"tests\/manual\/printing\/JobSettingsInfo.java","additions":149,"deletions":0,"binary":false,"changes":149,"status":"added"}]}