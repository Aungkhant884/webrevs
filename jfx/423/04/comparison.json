{"files":[{"patch":"@@ -110,1 +110,1 @@\n-                    weightIndices[j].add(new Integer(i));\n+                    weightIndices[j].add(i);\n","filename":"apps\/samples\/3DViewer\/src\/main\/java\/com\/javafx\/experiments\/shape3d\/SkinningMesh.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-                        return (Double) new Double(string);\n+                        return Double.valueOf(string);\n","filename":"apps\/samples\/Ensemble8\/src\/app\/java\/ensemble\/samplepage\/PieChartDataVisualizer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-                                return (X) new Double(string);\n+                                return (X) Double.valueOf(string);\n@@ -137,1 +137,1 @@\n-                                return (X) new Integer(string);\n+                                return (X) Integer.valueOf(string);\n@@ -175,1 +175,1 @@\n-                Y y = (Y) new Double(string);\n+                Y y = (Y) Double.valueOf(string);\n","filename":"apps\/samples\/Ensemble8\/src\/app\/java\/ensemble\/samplepage\/XYDataVisualizer.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,3 +52,3 @@\n-        {new Double(567), new Double(956), new Double(1154)},\n-        {new Double(1292), new Double(1665), new Double(1927)},\n-        {new Double(1292), new Double(2559), new Double(2774)}\n+        {Double.valueOf(567), Double.valueOf(956), Double.valueOf(1154)},\n+        {Double.valueOf(1292), Double.valueOf(1665), Double.valueOf(1927)},\n+        {Double.valueOf(1292), Double.valueOf(2559), Double.valueOf(2774)}\n","filename":"apps\/samples\/Ensemble8\/src\/samples\/java\/ensemble\/samples\/language\/swing\/SampleTableModel.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -221,2 +221,2 @@\n-        Double widthDouble = new Integer(PANEL_WIDTH).doubleValue();\n-        Double heightDouble = new Integer(PANEL_HEIGHT).doubleValue();\n+        Double widthDouble = Double.valueOf(PANEL_WIDTH);\n+        Double heightDouble = Double.valueOf(PANEL_HEIGHT);\n","filename":"apps\/samples\/Ensemble8\/src\/samples\/java\/ensemble\/samples\/language\/swing\/SwingInterop.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -179,2 +179,2 @@\n-\/\/                -> new Double(c2.prefHeight(-1)).compareTo(\n-\/\/                        new Double(c1.prefHeight(-1))));\n+\/\/                -> Double.valueOf(c2.prefHeight(-1)).compareTo(\n+\/\/                        Double.valueOf(c1.prefHeight(-1))));\n","filename":"apps\/toys\/LayoutDemo\/src\/layout\/CustomHBox.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -91,2 +91,2 @@\n-                -> new Double(c2.prefHeight(-1)).compareTo(\n-                        new Double(c1.prefHeight(-1))));\n+                -> Double.valueOf(c2.prefHeight(-1)).compareTo(\n+                        Double.valueOf(c1.prefHeight(-1))));\n","filename":"apps\/toys\/LayoutDemo\/src\/layout\/CustomPane.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -95,2 +95,2 @@\n-\/\/                -> new Double(c2.prefHeight(-1)).compareTo(\n-\/\/                        new Double(c1.prefHeight(-1))));\n+\/\/                -> Double.valueOf(c2.prefHeight(-1)).compareTo(\n+\/\/                        Double.valueOf(c1.prefHeight(-1))));\n@@ -175,2 +175,2 @@\n-                -> new Double(c2.prefHeight(-1)).compareTo(\n-                        new Double(c1.prefHeight(-1))));\n+                -> Double.valueOf(c2.prefHeight(-1)).compareTo(\n+                        Double.valueOf(c1.prefHeight(-1))));\n","filename":"apps\/toys\/LayoutDemo\/src\/layout\/CustomTilePane.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        Change<Integer> change = new NonIterableChange.SimpleRemovedChange<Integer>(0, 1, new Integer(5), originalList);\n+        Change<Integer> change = new NonIterableChange.SimpleRemovedChange<Integer>(0, 1, Integer.valueOf(5), originalList);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/MappingChangeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -289,1 +289,1 @@\n-        assertEquals(new Double(Double.POSITIVE_INFINITY), new Double(0.0 + Double.POSITIVE_INFINITY)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.POSITIVE_INFINITY), Double.valueOf(0.0 + Double.POSITIVE_INFINITY)); \/\/ sanity check\n@@ -297,1 +297,1 @@\n-        assertEquals(new Double(Double.POSITIVE_INFINITY), new Double(1.0 + Double.POSITIVE_INFINITY)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.POSITIVE_INFINITY), Double.valueOf(1.0 + Double.POSITIVE_INFINITY)); \/\/ sanity check\n@@ -305,1 +305,1 @@\n-        assertEquals(new Double(Double.POSITIVE_INFINITY), new Double(Double.POSITIVE_INFINITY + Double.POSITIVE_INFINITY)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.POSITIVE_INFINITY), Double.valueOf(Double.POSITIVE_INFINITY + Double.POSITIVE_INFINITY)); \/\/ sanity check\n@@ -313,1 +313,1 @@\n-        assertEquals(new Double(Double.NaN), new Double(Double.NaN + Double.POSITIVE_INFINITY)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.NaN), Double.valueOf(Double.NaN + Double.POSITIVE_INFINITY)); \/\/ sanity check\n@@ -321,1 +321,1 @@\n-        assertEquals(new Double(Double.NaN), new Double(0.0 + Double.NaN)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.NaN), Double.valueOf(0.0 + Double.NaN)); \/\/ sanity check\n@@ -329,1 +329,1 @@\n-        assertEquals(new Double(Double.NaN), new Double(1.0 + Double.NaN)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.NaN), Double.valueOf(1.0 + Double.NaN)); \/\/ sanity check\n@@ -384,1 +384,1 @@\n-        assertEquals(new Double(Double.NEGATIVE_INFINITY), new Double(0.0 - Double.POSITIVE_INFINITY)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.NEGATIVE_INFINITY), Double.valueOf(0.0 - Double.POSITIVE_INFINITY)); \/\/ sanity check\n@@ -394,1 +394,1 @@\n-        assertEquals(new Double(Double.NEGATIVE_INFINITY), new Double(1.0 - Double.POSITIVE_INFINITY)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.NEGATIVE_INFINITY), Double.valueOf(1.0 - Double.POSITIVE_INFINITY)); \/\/ sanity check\n@@ -404,1 +404,1 @@\n-        assertEquals(new Double(Double.NaN), new Double(Double.POSITIVE_INFINITY - Double.POSITIVE_INFINITY)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.NaN), Double.valueOf(Double.POSITIVE_INFINITY - Double.POSITIVE_INFINITY)); \/\/ sanity check\n@@ -412,1 +412,1 @@\n-        assertEquals(new Double(Double.NaN), new Double(Double.NaN - Double.POSITIVE_INFINITY)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.NaN), Double.valueOf(Double.NaN - Double.POSITIVE_INFINITY)); \/\/ sanity check\n@@ -420,1 +420,1 @@\n-        assertEquals(new Double(Double.NaN), new Double(0.0 - Double.NaN)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.NaN), Double.valueOf(0.0 - Double.NaN)); \/\/ sanity check\n@@ -428,1 +428,1 @@\n-        assertEquals(new Double(Double.NaN), new Double(1.0 - Double.NaN)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.NaN), Double.valueOf(1.0 - Double.NaN)); \/\/ sanity check\n@@ -475,1 +475,1 @@\n-        assertEquals(new Double(Double.NaN), new Double(0.0 * Double.POSITIVE_INFINITY)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.NaN), Double.valueOf(0.0 * Double.POSITIVE_INFINITY)); \/\/ sanity check\n@@ -483,1 +483,1 @@\n-        assertEquals(new Double(Double.POSITIVE_INFINITY), new Double(1.0 * Double.POSITIVE_INFINITY)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.POSITIVE_INFINITY), Double.valueOf(1.0 * Double.POSITIVE_INFINITY)); \/\/ sanity check\n@@ -491,1 +491,1 @@\n-        assertEquals(new Double(Double.POSITIVE_INFINITY), new Double(Double.POSITIVE_INFINITY * Double.POSITIVE_INFINITY)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.POSITIVE_INFINITY), Double.valueOf(Double.POSITIVE_INFINITY * Double.POSITIVE_INFINITY)); \/\/ sanity check\n@@ -499,1 +499,1 @@\n-        assertEquals(new Double(Double.NaN), new Double(Double.NaN * Double.POSITIVE_INFINITY)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.NaN), Double.valueOf(Double.NaN * Double.POSITIVE_INFINITY)); \/\/ sanity check\n@@ -507,1 +507,1 @@\n-        assertEquals(new Double(Double.NaN), new Double(0.0 * Double.NaN)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.NaN), Double.valueOf(0.0 * Double.NaN)); \/\/ sanity check\n@@ -515,1 +515,1 @@\n-        assertEquals(new Double(Double.NaN), new Double(1.0 * Double.NaN)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.NaN), Double.valueOf(1.0 * Double.NaN)); \/\/ sanity check\n@@ -563,1 +563,1 @@\n-        assertEquals(new Double(0.0), new Double(0.0 \/ Double.POSITIVE_INFINITY)); \/\/ sanity check\n+        assertEquals(Double.valueOf(0.0), Double.valueOf(0.0 \/ Double.POSITIVE_INFINITY)); \/\/ sanity check\n@@ -570,1 +570,1 @@\n-        assertEquals(new Double(0.0), new Double(1.0 \/ Double.POSITIVE_INFINITY)); \/\/ sanity check\n+        assertEquals(Double.valueOf(0.0), Double.valueOf(1.0 \/ Double.POSITIVE_INFINITY)); \/\/ sanity check\n@@ -577,1 +577,1 @@\n-        assertEquals(new Double(Double.NaN), new Double(Double.POSITIVE_INFINITY \/ Double.POSITIVE_INFINITY)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.NaN), Double.valueOf(Double.POSITIVE_INFINITY \/ Double.POSITIVE_INFINITY)); \/\/ sanity check\n@@ -585,1 +585,1 @@\n-        assertEquals(new Double(Double.NaN), new Double(Double.NaN \/ Double.POSITIVE_INFINITY)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.NaN), Double.valueOf(Double.NaN \/ Double.POSITIVE_INFINITY)); \/\/ sanity check\n@@ -593,1 +593,1 @@\n-        assertEquals(new Double(Double.NaN), new Double(0.0 \/ Double.NaN)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.NaN), Double.valueOf(0.0 \/ Double.NaN)); \/\/ sanity check\n@@ -601,1 +601,1 @@\n-        assertEquals(new Double(Double.NaN), new Double(1.0 \/ Double.NaN)); \/\/ sanity check\n+        assertEquals(Double.valueOf(Double.NaN), Double.valueOf(1.0 \/ Double.NaN)); \/\/ sanity check\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/DurationTest.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -520,1 +520,1 @@\n-        return (T)new Double(value);\n+        return (T)Double.valueOf(value);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/chart\/ValueAxis.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,2 +88,2 @@\n-        Number value1 = new Integer(5);\n-        Number value2 = new Integer(6);\n+        Number value1 = 5;\n+        Number value2 = 6;\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/XYChartDataTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,2 +85,2 @@\n-        assertEquals(10, new Double(f.getSize()).intValue());\n-        assertEquals(10, new Double(AxisShim.get_measure(yaxis).getFont().getSize()).intValue());\n+        assertEquals(10, Double.valueOf(f.getSize()).intValue());\n+        assertEquals(10, Double.valueOf(AxisShim.get_measure(yaxis).getFont().getSize()).intValue());\n@@ -94,2 +94,2 @@\n-        assertEquals(11, new Double(yaxis.getTickLabelFont().getSize()).intValue());\n-        assertEquals(11, new Double(AxisShim.get_measure(yaxis).getFont().getSize()).intValue());\n+        assertEquals(11, Double.valueOf(yaxis.getTickLabelFont().getSize()).intValue());\n+        assertEquals(11, Double.valueOf(AxisShim.get_measure(yaxis).getFont().getSize()).intValue());\n@@ -98,1 +98,1 @@\n-        assertEquals(11, new Double(AxisShim.TickMark_get_textNode(tm).getFont().getSize()).intValue());\n+        assertEquals(11, Double.valueOf(AxisShim.TickMark_get_textNode(tm).getFont().getSize()).intValue());\n@@ -101,3 +101,3 @@\n-        assertEquals(12, new Double(yaxis.getTickLabelFont().getSize()).intValue());\n-        assertEquals(12, new Double(AxisShim.get_measure(yaxis).getFont().getSize()).intValue());\n-        assertEquals(12, new Double(AxisShim.TickMark_get_textNode(tm).getFont().getSize()).intValue());\n+        assertEquals(12, Double.valueOf(yaxis.getTickLabelFont().getSize()).intValue());\n+        assertEquals(12, Double.valueOf(AxisShim.get_measure(yaxis).getFont().getSize()).intValue());\n+        assertEquals(12, Double.valueOf(AxisShim.TickMark_get_textNode(tm).getFont().getSize()).intValue());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/XYChartTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -643,1 +643,1 @@\n-        assertEquals(\"42\", sc.toString(new Integer(42)));\n+        assertEquals(\"42\", sc.toString(Integer.valueOf(42)));\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ComboBoxTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -582,1 +582,1 @@\n-        final Boolean firstClick = new Boolean(click);\n+        final Boolean firstClick = click;\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/MenuBarTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -169,3 +169,3 @@\n-        deviceDetails.put(\"XVisualID\", new Long(nGetVisualID(nativeCtxInfo)));\n-        deviceDetails.put(\"XDisplay\", new Long(nGetDisplay(nativeCtxInfo)));\n-        deviceDetails.put(\"XScreenID\", new Integer(nGetDefaultScreen(nativeCtxInfo)));\n+        deviceDetails.put(\"XVisualID\", Long.valueOf(nGetVisualID(nativeCtxInfo)));\n+        deviceDetails.put(\"XDisplay\", Long.valueOf(nGetDisplay(nativeCtxInfo)));\n+        deviceDetails.put(\"XScreenID\", Integer.valueOf(nGetDefaultScreen(nativeCtxInfo)));\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/X11GLFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        Integer index = new Integer(screen.getAdapterOrdinal());\n+        Integer index = Integer.valueOf(screen.getAdapterOrdinal());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/j2d\/J2DPipeline.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-        Integer index = new Integer(screen.getAdapterOrdinal());\n+        Integer index = Integer.valueOf(screen.getAdapterOrdinal());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/null3d\/NULL3DPipeline.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-        Integer index = new Integer(screen.getAdapterOrdinal());\n+        Integer index = Integer.valueOf(screen.getAdapterOrdinal());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/sw\/SWPipeline.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -477,1 +477,1 @@\n-        assertTrue(numbersEquals(new Integer(value),\n+        assertTrue(numbersEquals(value,\n@@ -522,1 +522,1 @@\n-        assertTrue(numbersEquals(new Double(value),\n+        assertTrue(numbersEquals(value,\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/NodeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        assertEquals(lit.getValue(), new Integer(3));\n+        assertEquals(lit.getValue(), Integer.valueOf(3));\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/parser\/JumpStatementTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-        assertEquals(((LiteralExpr)tree).getValue(), new Integer(123));\n+        assertEquals(((LiteralExpr)tree).getValue(), Integer.valueOf(123));\n@@ -68,1 +68,1 @@\n-        assertEquals(((LiteralExpr)tree).getValue(), new Float(1.234));\n+        assertEquals(((LiteralExpr)tree).getValue(), Float.valueOf(1.234f));\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/parser\/PrimaryExprTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        assertEquals(((LiteralExpr)tree.getExpr()).getValue(), new Float(72.4));\n+        assertEquals(((LiteralExpr)tree.getExpr()).getValue(), Float.valueOf(72.4f));\n@@ -69,1 +69,1 @@\n-        assertEquals(((LiteralExpr)tree.getExpr()).getValue(), new Float(72.4));\n+        assertEquals(((LiteralExpr)tree.getExpr()).getValue(), Float.valueOf(72.4f));\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/parser\/UnaryExprTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -278,1 +278,1 @@\n-            Double key = new Double(centerFrequency);\n+            Double key = centerFrequency;\n@@ -289,1 +289,1 @@\n-            Double key = new Double(centerFrequency);\n+            Double key = centerFrequency;\n","filename":"modules\/javafx.media\/src\/main\/java\/com\/sun\/media\/jfxmediaimpl\/platform\/ios\/IOSMediaPlayer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-\/\/              if (obj != null && (obj.equals(\"\") || (new Boolean(obj).booleanValue() == true)))\n+\/\/              if (obj != null && (obj.equals(\"\") || (Boolean.valueOf(obj).booleanValue() == true)))\n","filename":"modules\/javafx.web\/src\/android\/java\/netscape\/javascript\/JSObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-                return new Integer((int) val);\n+                return Integer.valueOf((int) val);\n@@ -103,1 +103,1 @@\n-                return new Double(val);\n+                return Double.valueOf(val);\n","filename":"modules\/javafx.web\/src\/ios\/java\/javafx\/scene\/web\/JSONDecoder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    private Integer newVal = new Integer(3);\n+    private Integer newVal = 3;\n","filename":"tests\/functional\/animation\/javafx\/animation\/Timeline_TS012_01_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}