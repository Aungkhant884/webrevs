{"files":[{"patch":"@@ -340,0 +340,1 @@\n+            updateEditing();\n@@ -341,1 +342,0 @@\n-        updateEditing();\n@@ -543,0 +543,1 @@\n+        final boolean match = list != null && index != -1 && index == editIndex;\n@@ -544,2 +545,3 @@\n-\n-        if (editing && (index == -1 || list == null || index != editIndex)) {\n+        if (match && ! editing) {\n+            startEdit();\n+        } else if (! match && editing) {\n@@ -560,5 +562,0 @@\n-        if(!editing && list != null && index != -1 && index == editIndex) {\n-            \/\/ If my index is the index being edited and I'm not currently in\n-            \/\/ the edit mode, then I need to enter the edit mode\n-            startEdit();\n-        }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ListCell.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -916,0 +916,43 @@\n+    @Test\n+    public void testMisbehavingCancelEditTerminatesEdit() {\n+        ListCell<String> cell = new MisbehavingOnCancelListCell<>();\n+\n+        list.setEditable(true);\n+        cell.updateListView(list);\n+\n+        int editingIndex = 1;\n+        int intermediate = 0;\n+        int notEditingIndex = -1;\n+        cell.updateIndex(editingIndex);\n+        list.edit(editingIndex);\n+        assertTrue(\"sanity: \", cell.isEditing());\n+        try {\n+            list.edit(intermediate);\n+        } catch (Exception ex) {\n+            \/\/ just catching to test in finally\n+        } finally {\n+            assertFalse(\"cell must not be editing\", cell.isEditing());\n+            assertEquals(\"table must be editing at intermediate index\", intermediate, list.getEditingIndex());\n+        }\n+        \/\/ test editing: second round\n+        \/\/ switch cell off editing by cell api\n+        list.edit(editingIndex);\n+        assertTrue(\"sanity: \", cell.isEditing());\n+        try {\n+            cell.cancelEdit();\n+        } catch (Exception ex) {\n+            \/\/ just catching to test in finally\n+        } finally {\n+            assertFalse(\"cell must not be editing\", cell.isEditing());\n+            assertEquals(\"table editing must be cancelled by cell\", notEditingIndex, list.getEditingIndex());\n+        }\n+    }\n+\n+    public static class MisbehavingOnCancelListCell<T> extends ListCell<T> {\n+        @Override\n+        public void cancelEdit() {\n+            super.cancelEdit();\n+            throw new RuntimeException(\"violating contract\");\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListCellTest.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"modified"}]}