{"files":[{"patch":"@@ -341,0 +341,1 @@\n+        updateEditing();\n@@ -543,2 +544,7 @@\n-        \/\/ Check that the list is specified, and my index is not -1\n-        if (index != -1 && list != null) {\n+        if (index == -1 || list == null) {\n+            if(editing) {\n+                updateEditingIndex = false;\n+                cancelEdit();\n+                updateEditingIndex = true;\n+            }\n+        } else {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ListCell.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import javafx.scene.control.ListView.EditEvent;\n@@ -41,0 +42,2 @@\n+import java.util.List;\n+import java.util.ArrayList;\n@@ -836,0 +839,76 @@\n+    @Test\n+    public void testChangeIndexToEditing1_jdk_8264127() {\n+        assertChangeIndexToEditing(0, 1);\n+    }\n+\n+    @Test\n+    public void testChangeIndexToEditing2_jdk_8264127() {\n+        assertChangeIndexToEditing(-1, 1);\n+    }\n+\n+    @Test\n+    public void testChangeIndexToEditing3_jdk_8264127() {\n+        assertChangeIndexToEditing(1, 0);\n+    }\n+\n+    @Test\n+    public void testChangeIndexToEditing4_jdk_8264127() {\n+        assertChangeIndexToEditing(-1, 0);\n+    }\n+\n+\n+\n+    private void assertChangeIndexToEditing(int initialCellIndex, int listEditingIndex) {\n+        list.getFocusModel().focus(-1);\n+        List<EditEvent> events = new ArrayList<EditEvent>();\n+        list.setOnEditStart(e -> {\n+            events.add(e);\n+        });\n+        list.setEditable(true);\n+        cell.updateListView(list);\n+        cell.updateIndex(initialCellIndex);\n+        list.edit(listEditingIndex);\n+        assertEquals(\"sanity: list editingIndex \", listEditingIndex, list.getEditingIndex());\n+        assertFalse(\"sanity: cell must not be editing\", cell.isEditing());\n+        cell.updateIndex(listEditingIndex);\n+        assertEquals(\"sanity: index updated \", listEditingIndex, cell.getIndex());\n+        assertEquals(\"list editingIndex unchanged by cell\", listEditingIndex, list.getEditingIndex());\n+        assertTrue(cell.isEditing());\n+        assertEquals(1, events.size());\n+    }\n+\n+    @Test\n+    public void testChangeIndexOffEditing0_jdk_8264127() {\n+        assertUpdateCellIndexOffEditing(1, 0);\n+    }\n+    @Test\n+    public void testChangeIndexOffEditing1_jdk_8264127() {\n+        assertUpdateCellIndexOffEditing(1, -1);\n+    }\n+    @Test\n+    public void testChangeIndexOffEditing2_jdk_8264127() {\n+        assertUpdateCellIndexOffEditing(0, 1);\n+    }\n+    @Test\n+    public void testChangeIndexOffEditing3_jdk_8264127() {\n+        assertUpdateCellIndexOffEditing(0, -1);\n+    }\n+\n+    public void assertUpdateCellIndexOffEditing(int editingIndex, int cancelIndex) {\n+        list.getFocusModel().focus(-1);\n+        List<EditEvent> events = new ArrayList<EditEvent>();\n+        list.setOnEditCancel(e -> {\n+            events.add(e);\n+        });\n+        list.setEditable(true);\n+        cell.updateListView(list);\n+        cell.updateIndex(editingIndex);\n+        list.edit(editingIndex);\n+        assertEquals(\"sanity: list editingIndex \", editingIndex, list.getEditingIndex());\n+        assertTrue(\"sanity: cell must be editing\", cell.isEditing());\n+        cell.updateIndex(cancelIndex); \/\/ change cell index to negative\n+        assertEquals(\"sanity: index updated \", cancelIndex, cell.getIndex());\n+        assertEquals(\"list editingIndex unchanged by cell\", editingIndex, list.getEditingIndex());\n+        assertFalse(\"cell must not be editing if cell index is \" + cell.getIndex(), cell.isEditing());\n+        assertEquals(1, events.size());\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListCellTest.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"modified"}]}