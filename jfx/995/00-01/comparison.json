{"files":[{"patch":"@@ -155,1 +155,4 @@\n- * <p>The recommended approach is to put the relevant information into the items list, and\n+ * <p>Important points to note:\n+ * <ul>\n+ * <li>Avoid inserting {@link Node}  instances directly into the items list or its data model.<\/li>\n+ * <li>The recommended approach is to put the relevant information into the items list, and\n@@ -157,12 +160,4 @@\n- * given cell and update them on demand using the\n- * data stored in the item for that cell.\n- *\n- * <p>For example, rather than use the following code:\n- *\n- * <pre>{@code   ListView<Rectangle> lv = new ListView<>();\n- *  lv.getItems().addAll(\n- *      new Rectangle(10, 10, Color.RED),\n- *      new Rectangle(10, 10, Color.GREEN),\n- *      new Rectangle(10, 10, Color.BLUE));}}<\/pre>\n- *\n- * <p>You should do the following:<\/p>\n+ * given cell and update them on demand using the data stored in the item for that cell.<\/li>\n+ * <li>Avoid creating new {@link Node}s in custom {@link #cellFactoryProperty() cell factory} {@code updateItem} method.<\/li>\n+ * <\/ul>\n+ * <p>The following minimal example shows how to create a custom cell factory for {@code ListView} containing {@link Node}s:\n@@ -195,2 +190,2 @@\n- * Note that the Rectangle (Node) object needs to be created in the custom {@code ListCell} class\n- * or in it's constructor and updated\/used in it's updateItem method.\n+ * Note that the {@code Rectangle} ({@code Node}) object needs to be created in the custom {@code ListCell} class\n+ * or in its constructor and updated\/used in its {@code updateItem} method.\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ListView.java","additions":10,"deletions":15,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -264,23 +264,0 @@\n- * <p>The recommended approach is to put the relevant information into the items list, and\n- * provide a custom {@link TableColumn#cellFactoryProperty() cell factory} to create the nodes for a\n- * given cell and update them on demand using the data stored in the item for that cell.\n- *\n- * <p>For example, rather than use the following code:\n- * <pre>{@code  class CustomRectangle {\n- *   private SimpleObjectProperty<Rectangle> rect;\n- *\n- *   CustomRectangle(Color col) {\n- *       this.rect = new SimpleObjectProperty<Rectangle>(new Rectangle(10, 10, col));\n- *   }\n- *   public Rectangle getRect() { return rect.getValue(); }\n- *   public void setRect(Rectangle r) { rect.setValue(r); }\n- *   public SimpleObjectProperty<Rectangle> rectProperty() { return rect; }\n- * }\n- *\n- * TableView<CustomRectangle> tableview = new TableView<CustomRectangle>();\n- *\n- * ObservableList<CustomRectangle> rectList = FXCollections.observableArrayList();\n- * rectList.addAll(\n- *     new CustomRectangle(Color.RED),\n- *     new CustomRectangle(Color.GREEN),\n- *     new CustomRectangle(Color.BLUE));\n@@ -288,8 +265,9 @@\n- * TableColumn<CustomRectangle, Rectangle> col = new TableColumn<CustomRectangle, Rectangle>(\"Color\");\n- * col.setCellValueFactory(data -> data.getValue().rectProperty());\n- *\n- * tableview.getColumns().add(col);\n- * tableview.setItems(rectList);\n- * }<\/pre>\n- *\n- * <p>You should do the following:<\/p>\n+ * <p>Important points to note:\n+ * <ul>\n+ * <li>Avoid inserting {@link Node}  instances directly into the {@code TableView} cells or its data model.<\/li>\n+ * <li>The recommended approach is to put the relevant information into the items list, and\n+ * provide a custom {@link TableColumn#cellFactoryProperty() cell factory} to create the nodes for a\n+ * given cell and update them on demand using the data stored in the item for that cell.<\/li>\n+ * <li>Avoid creating new {@link Node}s in custom {@link TableColumn#cellFactoryProperty() cell factory} {@code updateItem} method.<\/li>\n+ * <\/ul>\n+ * <p>The following minimal example shows how to create a custom cell factory for {@code TableView} containing {@link Node}s:\n@@ -345,2 +323,2 @@\n- * Note that the Rectangle (Node) object needs to be created in the custom {@code TableCell} class\n- * or in it's constructor and updated\/used in it's updateItem method.<\/p>\n+ * Note that the {@code Rectangle} ({@code Node}) object needs to be created in the custom {@code TableCell} class\n+ * or in its constructor and updated\/used in its {@code updateItem} method.<\/p>\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableView.java","additions":11,"deletions":33,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -291,31 +291,0 @@\n- * <p>The recommended approach is to put the relevant information into the items list, and\n- * provide a custom {@link TreeTableColumn#cellFactoryProperty() cell factory} to create the nodes for a\n- * given cell and update them on demand using the data stored in the item for that cell.\n- *\n- * <p>For example, rather than use the following code:\n- * <pre>{@code\n- *  class ColorModel {\n- *    private SimpleObjectProperty<Rectangle> rect;\n- *    private StringProperty name;\n- *\n- *    public ColorModel (String name, Color col) {\n- *      this.rect = new SimpleObjectProperty<Rectangle>(new Rectangle(10, 10, col));\n- *      this.name = new SimpleStringProperty(name);\n- *    }\n- *\n- *    public Rectangle getRect() { return rect.getValue(); }\n- *    public void setRect(Rectangle r) { rect.setValue(r); }\n- *    public SimpleObjectProperty<Rectangle> rectProperty() { return rect; }\n- *\n- *    public String getName() { return name.getValue(); }\n- *    public void setName(String s) { name.setValue(s); }\n- *    public StringProperty nameProperty() { return name; }\n- *  }\n- *\n- *  ColorModel rootModel = new ColorModel(\"Color\", Color.WHITE);\n- *  TreeItem<ColorModel> treeRoot = new TreeItem<ColorModel>(rootModel);\n- *  treeRoot.setExpanded(true);\n- *  treeRoot.getChildren().addAll(\n- *      new TreeItem<ColorModel>(new ColorModel(\"Red\", Color.RED)),\n- *      new TreeItem<ColorModel>(new ColorModel(\"Green\", Color.GREEN)),\n- *      new TreeItem<ColorModel>(new ColorModel(\"Blue\", Color.BLUE)));\n@@ -323,10 +292,9 @@\n- *  TreeTableView<ColorModel> treeTable = new TreeTableView<ColorModel>(treeRoot);\n- *\n- *  TreeTableColumn<ColorModel, String> nameCol = new TreeTableColumn<>(\"Color Name\");\n- *  TreeTableColumn<ColorModel, Rectangle> rectCol = new TreeTableColumn<>(\"Color\");\n- *\n- *  treeTable.getColumns().setAll(nameCol, rectCol);\n- *  rectCol.setCellValueFactory(p -> p.getValue().getValue().rectProperty());\n- *  nameCol.setCellValueFactory(p -> p.getValue().getValue().nameProperty());}<\/pre>\n- *\n- * <p>You should do the following:<\/p>\n+ * <p>Important points to note:\n+ * <ul>\n+ * <li>Avoid inserting {@link Node}  instances directly into the {@code TreeTableView} cells or its data model.<\/li>\n+ * <li>The recommended approach is to put the relevant information into the items list, and\n+ * provide a custom {@link TreeTableColumn#cellFactoryProperty() cell factory} to create the nodes for a\n+ * given cell and update them on demand using the data stored in the item for that cell.<\/li>\n+ * <li>Avoid creating new {@link Node}s in custom {@link TreeTableColumn#cellFactoryProperty() cell factory} {@code updateItem} method.<\/li>\n+ * <\/ul>\n+ * <p>The following minimal example shows how to create a custom cell factory for {@code TreeTableView} containing {@link Node}s:\n@@ -393,2 +361,2 @@\n- * Note that the Rectangle (Node) object needs to be created in the custom {@code TreeTableCell} class\n- * or in it's constructor and updated\/used in it's updateItem method.<\/p>\n+ * Note that the {@code Rectangle} ({@code Node}) object needs to be created in the custom {@code TreeTableCell} class\n+ * or in its constructor and updated\/used in its {@code updateItem} method.<\/p>\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableView.java","additions":11,"deletions":43,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -136,1 +136,4 @@\n- * <p>The recommended approach is to put the relevant information into the items list, and\n+ * <p>Important points to note:\n+ * <ul>\n+ * <li>Avoid inserting {@code Node}  instances directly into the {@code TreeView} cells or its data model.<\/li>\n+ * <li>The recommended approach is to put the relevant information into the items list, and\n@@ -138,2 +141,4 @@\n- * given cell and update them on demand using the\n- * data stored in the item for that cell.\n+ * given cell and update them on demand using the data stored in the item for that cell.<\/li>\n+ * <li>Avoid creating new {@code Node}s in custom {@link #cellFactoryProperty() cell factory} {@code updateItem} method.<\/li>\n+ * <\/ul>\n+ * <p>The following minimal example shows how to create a custom cell factory for {@code TreeView} containing {@code Node}s:\n@@ -141,11 +146,0 @@\n- * <p>For example, rather than use the following code:\n- * <pre>{@code   TreeItem<Rectangle> treeRoot = new TreeItem<>();\n- *  treeRoot.setExpanded(true);\n- *  treeRoot.getChildren().addAll(\n- *      new TreeItem<>(new Rectangle(10, 10, Color.RED)),\n- *      new TreeItem<>(new Rectangle(10, 10, Color.GREEN)),\n- *      new TreeItem<>(new Rectangle(10, 10, Color.BLUE))\n- *  );\n- *  TreeView<Rectangle> treeView = new TreeView<>(treeRoot);}<\/pre>\n- *\n- * <p>You should do the following:<\/p>\n@@ -182,2 +176,2 @@\n- * Note that the Rectangle (Node) object needs to be created in the custom {@code TreeCell} class\n- * or in it's constructor and updated\/used in it's updateItem method.<\/p>\n+ * Note that the {@code Rectangle} ({@code Node}) object needs to be created in the custom {@code TreeCell} class\n+ * or in its constructor and updated\/used in its {@code updateItem} method.<\/p>\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeView.java","additions":10,"deletions":16,"binary":false,"changes":26,"status":"modified"}]}