{"files":[{"patch":"@@ -2344,1 +2344,1 @@\n-                        [\"$FXC\", \"\/nologo\", \"\/T\", \"vs_3_0\", \"\/Fh\", \"$buildDir\/headers\/PrismD3D\/hlsl\/Mtl1VS_Obj.h\", \"\/DVertexType=ObjVertex\", \"$VS_3D_SRC\"]\n+                        [\"$FXC\", \"\/nologo\", \"\/T\", \"vs_3_0\", \"\/Fh\", \"$buildDir\/headers\/PrismD3D\/hlsl\/Mtl1VS_Obj.h\", \"\/DVertexType=VsInput\", \"$VS_3D_SRC\"]\n","filename":"build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -174,6 +174,6 @@\n-                else if (lightBase instanceof NGSpotLight) {\n-                    addSpotLight((NGSpotLight) lightBase, lightIndex++, rL, gL, bL);\n-                } else if (lightBase instanceof NGPointLight) {\n-                    addPointLight((NGPointLight) lightBase, lightIndex++, rL, gL, bL);\n-                } else if (lightBase instanceof NGDirectionalLight) {\n-                    addDirectionalLight((NGDirectionalLight) lightBase, lightIndex++, rL, gL, bL);\n+                else if (lightBase instanceof NGSpotLight light) {\n+                    addSpotLight(light, lightIndex++, rL, gL, bL);\n+                } else if (lightBase instanceof NGPointLight light) {\n+                    addPointLight(light, lightIndex++, rL, gL, bL);\n+                } else if (lightBase instanceof NGDirectionalLight light) {\n+                    addDirectionalLight(light, lightIndex++, rL, gL, bL);\n@@ -211,1 +211,1 @@\n-                NGPointLight.getDefaultCa(), NGPointLight.getDefaultLa(), NGPointLight.getDefaultQa(), 0,\n+                NGPointLight.getDefaultCa(), NGPointLight.getDefaultLa(), NGPointLight.getDefaultQa(), 1,\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/NGShape3D.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -227,1 +227,1 @@\n-        cout << \"D3DMeshView.render() - SetPixelShaderConstantF (PSR_DIFFUSECOLOR) failed !!!\" << endl;\n+        cout << \"D3DMeshView.render() - SetPixelShaderConstantF (PSR_MAT_DIFFUSE_COLOR) failed !!!\" << endl;\n@@ -233,1 +233,1 @@\n-        cout << \"D3DMeshView.render() - SetPixelShaderConstantF (PSR_SPECULARCOLOR) failed !!!\" << endl;\n+        cout << \"D3DMeshView.render() - SetPixelShaderConstantF (PSR_MAT_SPECULAR_COLOR) failed !!!\" << endl;\n@@ -245,1 +245,1 @@\n-        cout << \"D3DMeshView.render() - SetPixelShaderConstantF(PSR_LIGHTCOLOR) failed !!!\" << endl;\n+        cout << \"D3DMeshView.render() - SetPixelShaderConstantF(PSR_LIGHT_COLOR) failed !!!\" << endl;\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-d3d\/D3DMeshView.cc","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-float4 main(float2 texD : texcoord0, PsInput psInput) : color {\n+float4 main(PsInput psInput) : color {\n@@ -71,0 +71,2 @@\n+    float2 texD = psInput.texD;\n+\n@@ -78,1 +80,1 @@\n-    float3 n = float3(0,0,1);\n+    float3 normal = float3(0, 0, 1);\n@@ -83,1 +85,1 @@\n-        n = normalize(BumpSpec.xyz * 2 - 1);\n+        normal = normalize(BumpSpec.xyz * 2 - 1);\n@@ -87,1 +89,1 @@\n-    float4 tSpec = float4(0,0,0,0);\n+    float4 tSpec = float4(0, 0, 0, 0);\n@@ -90,1 +92,1 @@\n-    if ( specType > 0 ) {\n+    if (specType > 0) {\n@@ -106,1 +108,1 @@\n-    float3 refl = reflect(worldNormVecToEye, n);\n+    float3 refl = reflect(worldNormVecToEye, normal);\n@@ -117,1 +119,1 @@\n-        computeLight(i, n, refl, specPower, psInput.worldVecsToLights[i], psInput.worldNormLightDirs[i], diffLightColor, specLightColor);\n+        computeLight(i, normal, refl, specPower, psInput.worldVecsToLights[i], psInput.worldNormLightDirs[i], diffLightColor, specLightColor);\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-d3d\/hlsl\/Mtl1PS.hlsl","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,3 +29,0 @@\n-\n-\/\/float2 transformTexture(float2 t) { return t; }\n-\n@@ -35,3 +32,0 @@\n-    calcLocalBump(vsInput.modelVertexPos, vsInput.modelVertexNormal, vsOutput.psInput);\n-\n-\/\/    vsOutput.objAttr.texD = transformTexture(vsInput.texD);\n@@ -39,0 +33,1 @@\n+    transformVertexAttributes(vsInput.modelVertexPos, vsInput.modelVertexNormal, vsOutput);\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-d3d\/hlsl\/Mtl1VS.hlsl","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-void computeLight(float i, float3 n, float3 refl, float specPower, float3 toLight, float3 lightDir, in out float3 d, in out float3 s) {\n+void computeLight(float i, float3 normal, float3 refl, float specPower, float3 toLight, float3 lightDir, in out float3 diff, in out float3 spec) {\n@@ -101,2 +101,2 @@\n-        d += saturate(dot(n, -lightDir)) * gLightColor[i].xyz;\n-        s += pow(saturate(dot(-refl, -lightDir)), specPower) * gLightColor[i].xyz;\n+        diff += saturate(dot(normal, -lightDir)) * gLightColor[i].xyz;\n+        spec += pow(saturate(dot(-refl, -lightDir)), specPower) * gLightColor[i].xyz;\n@@ -105,0 +105,1 @@\n+\n@@ -122,2 +123,2 @@\n-    d += saturate(dot(n, l)) * attenuatedColor;\n-    s += pow(saturate(dot(-refl, l)), specPower) * attenuatedColor;\n+    diff += saturate(dot(normal, l)) * attenuatedColor;\n+    spec += pow(saturate(dot(-refl, l)), specPower) * attenuatedColor;\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-d3d\/hlsl\/psMath.h","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -26,1 +26,4 @@\n-struct PsInput {\n+\/*\n+ * The output of the vertex shader is the input of the pixel shader.\n+ *\/\n+typedef struct PsInput {\n@@ -30,0 +33,2 @@\n+    float2  texD : texcoord0;\n+\n@@ -45,6 +50,1 @@\n-};\n-\n-struct VsOutput {\n-    float2  texD : texcoord0;\n-    PsInput psInput;\n-};\n+} VsOutput;\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-d3d\/hlsl\/vs2ps.h","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-void calcLocalBump(float4 modelVertexPos, float4 modelVertexNormal, out PsInput psInput) {\n+void transformVertexAttributes(float4 modelVertexPos, float4 modelVertexNormal, in out VsOutput vsOutput) {\n@@ -60,1 +60,1 @@\n-\/\/  psInput.worldPos = worldVertexPos;\n+\/\/  vsOutput.worldPos = worldVertexPos;\n@@ -62,1 +62,1 @@\n-    psInput.projPos = mul(float4(worldVertexPos, 1), mViewProj);\n+    vsOutput.projPos = mul(float4(worldVertexPos, 1), mViewProj);\n@@ -71,1 +71,1 @@\n-\/\/  psInput.worldNormals = n;\n+\/\/  vsOutput.worldNormals = n;\n@@ -79,1 +79,1 @@\n-    psInput.worldVecToEye = getLocalVector(worldVecToEye, n);\n+    vsOutput.worldVecToEye = getLocalVector(worldVecToEye, n);\n@@ -83,1 +83,1 @@\n-        psInput.worldVecsToLights[k] = getLocalVector(worldVecToLight, n);\n+        vsOutput.worldVecsToLights[k] = getLocalVector(worldVecToLight, n);\n@@ -85,1 +85,1 @@\n-        psInput.worldNormLightDirs[k] = getLocalVector(worldNormLightDir, n);\n+        vsOutput.worldNormLightDirs[k] = getLocalVector(worldNormLightDir, n);\n@@ -88,1 +88,1 @@\n-\/\/    psInput.debug = n[0];\n+\/\/    vsOutput.debug = n[0];\n@@ -90,1 +90,1 @@\n-\/\/    psInput.oFog  = 1; \/\/ getFogExp2(pos);\n+\/\/    vsOutput.oFog  = 1; \/\/ getFogExp2(pos);\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-d3d\/hlsl\/vsMath.h","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}