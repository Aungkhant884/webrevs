{"files":[{"patch":"@@ -392,0 +392,12 @@\n+\n+        thumb.setOnMouseEntered(me -> {\n+            if (getSkinnable().getTooltip() != null) {\n+                getSkinnable().getTooltip().setConsumeAutoHidingEvents(false);\n+            }\n+        });\n+\n+        thumb.setOnMouseExited(me -> {\n+            if (getSkinnable().getTooltip() != null) {\n+                getSkinnable().getTooltip().setConsumeAutoHidingEvents(true);\n+            }\n+        });\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/SliderSkin.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,149 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.scene;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import javafx.application.Application;\n+import javafx.scene.input.MouseButton;\n+import javafx.application.Platform;\n+import javafx.scene.robot.Robot;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Slider;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+import javafx.scene.control.Tooltip;\n+import javafx.stage.WindowEvent;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import test.util.Util;\n+\n+\/*\n+ * Test for verifying Slider NPE error.\n+ *\n+ * There is 1 test in this file.\n+ * Steps for testSliderTooltipNPE()\n+ * 1. Create a slider and tooltip.\n+ * 2. Make setAutoHide of tooltip as true and add tooltip to slider.\n+ * 3. Hover over slider thumb and wait for tooltip. Drag the thumb.\n+ * 4. Verify that NullPointerException is not thrown.\n+ *\/\n+\n+public class SliderTooltipNPETest {\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n+    static CountDownLatch tooltipLatch = new CountDownLatch(1);\n+    static Robot robot;\n+    static Slider slider;\n+\n+    static volatile Throwable exception;\n+    static volatile Stage stage;\n+    static volatile Scene scene;\n+\n+    static final int SCENE_WIDTH = 250;\n+    static final int SCENE_HEIGHT = SCENE_WIDTH;\n+    static final int DRAG_DISTANCE = 10;\n+\n+    @Test\n+    public void testSliderTooltipNPE() throws Throwable {\n+        dragSliderAfterTooltipDisplayed(DRAG_DISTANCE);\n+        if (exception != null) {\n+            exception.printStackTrace();\n+            throw exception;\n+        }\n+    }\n+\n+    private void dragSliderAfterTooltipDisplayed(int dragDistance) throws Exception {\n+        Thread.sleep(1000); \/\/ Wait for slider to layout\n+\n+        Util.runAndWait(() -> {\n+            robot.mouseMove((int)(scene.getWindow().getX() + scene.getX() +\n+                                slider.getLayoutX() + slider.getLayoutBounds().getWidth()\/2),\n+                            (int)(scene.getWindow().getY() + scene.getY() +\n+                                slider.getLayoutY() + slider.getLayoutBounds().getHeight()\/2));\n+        });\n+\n+        Util.waitForLatch(tooltipLatch, 5, \"Timeout waiting for tooltip to display\");\n+        Thread.sleep(2000); \/\/ Wait for tooltip to display\n+\n+        Util.runAndWait(() -> {\n+            robot.mousePress(MouseButton.PRIMARY);\n+        });\n+\n+        for (int i = 0; i < dragDistance; i++) {\n+            final int c = i;\n+            Util.runAndWait(() -> {\n+            robot.mouseMove((int)(scene.getWindow().getX() + scene.getX() +\n+                                slider.getLayoutX() + slider.getLayoutBounds().getWidth()\/2) + c,\n+                            (int)(scene.getWindow().getY() + scene.getY() +\n+                                slider.getLayoutY() + slider.getLayoutBounds().getHeight()\/2));\n+            });\n+        }\n+\n+        Util.runAndWait(() -> {\n+            robot.mouseRelease(MouseButton.PRIMARY);\n+        });\n+    }\n+\n+    public static class TestApp extends Application {\n+\n+        @Override\n+        public void start(Stage primaryStage) {\n+            robot = new Robot();\n+            stage = primaryStage;\n+\n+            Tooltip tooltip = new Tooltip(\"Autohide tooltip\");\n+            tooltip.setAutoHide(true);\n+            tooltip.setOnShown(event -> Platform.runLater(tooltipLatch::countDown));\n+\n+            slider = new Slider(0, 100, 50);\n+            slider.setTooltip(tooltip);\n+\n+            scene = new Scene(slider, SCENE_WIDTH, SCENE_HEIGHT);\n+            stage.setScene(scene);\n+            stage.initStyle(StageStyle.UNDECORATED);\n+            stage.setAlwaysOnTop(true);\n+            stage.setOnShown(event -> Platform.runLater(startupLatch::countDown));\n+            stage.show();\n+\n+            Thread.currentThread().setUncaughtExceptionHandler((t2, e) -> {\n+                exception = e;\n+            });\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void initFX() {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void exit() {\n+        Util.shutdown(stage);\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/SliderTooltipNPETest.java","additions":149,"deletions":0,"binary":false,"changes":149,"status":"added"}]}