{"files":[{"patch":"@@ -82,1 +82,1 @@\n-        final var binding = new StringFormatBidirectionalBinding(stringProperty, otherProperty, format);\n+        final var binding = new StringFormatBidirectionalBinding<>(stringProperty, otherProperty, format);\n@@ -857,1 +857,1 @@\n-    private static class StringFormatBidirectionalBinding extends StringConversionBidirectionalBinding {\n+    private static class StringFormatBidirectionalBinding<T> extends StringConversionBidirectionalBinding<T> {\n@@ -860,2 +860,1 @@\n-        @SuppressWarnings(\"unchecked\")\n-        public StringFormatBidirectionalBinding(Property<String> stringProperty, Property<?> otherProperty, Format format) {\n+        public StringFormatBidirectionalBinding(Property<String> stringProperty, Property<T> otherProperty, Format format) {\n@@ -871,0 +870,1 @@\n+        @SuppressWarnings(\"unchecked\")\n@@ -872,2 +872,2 @@\n-        protected Object fromString(String value) throws ParseException {\n-            return format.parseObject(value);\n+        protected T fromString(String value) throws ParseException {\n+            return (T) format.parseObject(value);  \/\/ May result in ClassCastException, this is expected\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/BidirectionalBinding.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -79,4 +79,3 @@\n-        if ((obj1 instanceof ObservableList) && (obj2 instanceof ObservableList)) {\n-            final ObservableList list1 = (ObservableList)obj1;\n-            final ObservableList list2 = (ObservableList)obj2;\n-            final ListContentBinding binding = new ListContentBinding(list1, list2);\n+        if ((obj1 instanceof ObservableList<?> list1) && (obj2 instanceof ObservableList<?> list2)) {\n+            @SuppressWarnings(\"unchecked\")\n+            final ListContentBinding<Object> binding = new ListContentBinding<>((ObservableList<Object>) list1, (ObservableList<Object>) list2);\n@@ -85,4 +84,3 @@\n-        } else if ((obj1 instanceof ObservableSet) && (obj2 instanceof ObservableSet)) {\n-            final ObservableSet set1 = (ObservableSet)obj1;\n-            final ObservableSet set2 = (ObservableSet)obj2;\n-            final SetContentBinding binding = new SetContentBinding(set1, set2);\n+        } else if ((obj1 instanceof ObservableSet<?> set1) && (obj2 instanceof ObservableSet<?> set2)) {\n+            @SuppressWarnings(\"unchecked\")\n+            final SetContentBinding<Object> binding = new SetContentBinding<>((ObservableSet<Object>) set1, (ObservableSet<Object>) set2);\n@@ -91,4 +89,3 @@\n-        } else if ((obj1 instanceof ObservableMap) && (obj2 instanceof ObservableMap)) {\n-            final ObservableMap map1 = (ObservableMap)obj1;\n-            final ObservableMap map2 = (ObservableMap)obj2;\n-            final MapContentBinding binding = new MapContentBinding(map1, map2);\n+        } else if ((obj1 instanceof ObservableMap<?, ?> map1) && (obj2 instanceof ObservableMap<?, ?> map2)) {\n+            @SuppressWarnings(\"unchecked\")\n+            final MapContentBinding<Object, Object> binding = new MapContentBinding<>((ObservableMap<Object, Object>) map1, (ObservableMap<Object, Object>) map2);\n@@ -175,2 +172,1 @@\n-            if (obj instanceof ListContentBinding) {\n-                final ListContentBinding otherBinding = (ListContentBinding) obj;\n+            if (obj instanceof ListContentBinding<?> otherBinding) {\n@@ -261,2 +257,1 @@\n-            if (obj instanceof SetContentBinding) {\n-                final SetContentBinding otherBinding = (SetContentBinding) obj;\n+            if (obj instanceof SetContentBinding<?> otherBinding) {\n@@ -348,2 +343,1 @@\n-            if (obj instanceof MapContentBinding) {\n-                final MapContentBinding otherBinding = (MapContentBinding) obj;\n+            if (obj instanceof MapContentBinding<?, ?> otherBinding) {\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/BidirectionalContentBinding.java","additions":12,"deletions":18,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-        if (list1 instanceof ObservableList) {\n-            ((ObservableList) list1).setAll(list2);\n+        if (list1 instanceof ObservableList<E> observableList) {\n+            observableList.setAll(list2);\n@@ -85,6 +85,15 @@\n-        if ((obj1 instanceof List) && (obj2 instanceof ObservableList)) {\n-            ((ObservableList)obj2).removeListener(new ListContentBinding((List)obj1));\n-        } else if ((obj1 instanceof Set) && (obj2 instanceof ObservableSet)) {\n-            ((ObservableSet)obj2).removeListener(new SetContentBinding((Set)obj1));\n-        } else if ((obj1 instanceof Map) && (obj2 instanceof ObservableMap)) {\n-            ((ObservableMap)obj2).removeListener(new MapContentBinding((Map)obj1));\n+        if ((obj1 instanceof List<?> list1) && (obj2 instanceof ObservableList<?> list2)) {\n+            @SuppressWarnings(\"unchecked\")\n+            ListContentBinding<Object> binding = new ListContentBinding<>((List<Object>) list1);\n+\n+            list2.removeListener(binding);\n+        } else if ((obj1 instanceof Set<?> set1) && (obj2 instanceof ObservableSet<?> set2)) {\n+            @SuppressWarnings(\"unchecked\")\n+            SetContentBinding<Object> binding = new SetContentBinding<>((Set<Object>) set1);\n+\n+            set2.removeListener(binding);\n+        } else if ((obj1 instanceof Map<?, ?> map1) && (obj2 instanceof ObservableMap<?, ?> map2)) {\n+            @SuppressWarnings(\"unchecked\")\n+            MapContentBinding<Object, Object> binding = new MapContentBinding<>((Map<Object, Object>) map1);\n+\n+            map2.removeListener(binding);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ContentBinding.java","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -557,1 +557,1 @@\n-                        change = new NonIterableChange.GenericAddRemoveChange(0, safeSize, safeOldValue, observable);\n+                        change = new NonIterableChange.GenericAddRemoveChange<>(0, safeSize, safeOldValue, observable);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ListExpressionHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    public static <T extends ObservableArray<T>> ArrayListenerHelper addListener(ArrayListenerHelper helper, T observable, InvalidationListener listener) {\n+    public static <T extends ObservableArray<T>> ArrayListenerHelper<T> addListener(ArrayListenerHelper<T> helper, T observable, InvalidationListener listener) {\n@@ -44,1 +44,1 @@\n-        return (helper == null)? new ArrayListenerHelper.SingleInvalidation(observable, listener) : helper.addListener(listener);\n+        return (helper == null)? new ArrayListenerHelper.SingleInvalidation<>(observable, listener) : helper.addListener(listener);\n@@ -47,1 +47,1 @@\n-    public static  ArrayListenerHelper removeListener(ArrayListenerHelper helper, InvalidationListener listener) {\n+    public static <T extends ObservableArray<T>> ArrayListenerHelper<T> removeListener(ArrayListenerHelper<T> helper, InvalidationListener listener) {\n@@ -54,1 +54,1 @@\n-    public static <T extends ObservableArray<T>> ArrayListenerHelper addListener(ArrayListenerHelper helper, T observable, ArrayChangeListener listener) {\n+    public static <T extends ObservableArray<T>> ArrayListenerHelper<T> addListener(ArrayListenerHelper<T> helper, T observable, ArrayChangeListener<T> listener) {\n@@ -58,1 +58,1 @@\n-        return (helper == null)? new ArrayListenerHelper.SingleChange(observable, listener) : helper.addListener(listener);\n+        return (helper == null)? new ArrayListenerHelper.SingleChange<>(observable, listener) : helper.addListener(listener);\n@@ -61,1 +61,1 @@\n-    public static  ArrayListenerHelper removeListener(ArrayListenerHelper helper, ArrayChangeListener listener) {\n+    public static <T extends ObservableArray<T>> ArrayListenerHelper<T> removeListener(ArrayListenerHelper<T> helper, ArrayChangeListener<T> listener) {\n@@ -68,1 +68,1 @@\n-    public static  void fireValueChangedEvent(ArrayListenerHelper helper, boolean sizeChanged, int from, int to) {\n+    public static <T extends ObservableArray<T>> void fireValueChangedEvent(ArrayListenerHelper<T> helper, boolean sizeChanged, int from, int to) {\n@@ -74,1 +74,1 @@\n-    public static  boolean hasListeners(ArrayListenerHelper helper) {\n+    public static <T extends ObservableArray<T>> boolean hasListeners(ArrayListenerHelper<T> helper) {\n@@ -87,2 +87,2 @@\n-    protected abstract ArrayListenerHelper addListener(InvalidationListener listener);\n-    protected abstract ArrayListenerHelper removeListener(InvalidationListener listener);\n+    protected abstract ArrayListenerHelper<T> addListener(InvalidationListener listener);\n+    protected abstract ArrayListenerHelper<T> removeListener(InvalidationListener listener);\n@@ -90,2 +90,2 @@\n-    protected abstract ArrayListenerHelper addListener(ArrayChangeListener<T> listener);\n-    protected abstract ArrayListenerHelper removeListener(ArrayChangeListener<T> listener);\n+    protected abstract ArrayListenerHelper<T> addListener(ArrayChangeListener<T> listener);\n+    protected abstract ArrayListenerHelper<T> removeListener(ArrayChangeListener<T> listener);\n@@ -108,2 +108,2 @@\n-        protected ArrayListenerHelper addListener(InvalidationListener listener) {\n-            return new Generic(observable, this.listener, listener);\n+        protected ArrayListenerHelper<T> addListener(InvalidationListener listener) {\n+            return new Generic<>(observable, this.listener, listener);\n@@ -113,1 +113,1 @@\n-        protected ArrayListenerHelper removeListener(InvalidationListener listener) {\n+        protected ArrayListenerHelper<T> removeListener(InvalidationListener listener) {\n@@ -118,2 +118,2 @@\n-        protected ArrayListenerHelper addListener(ArrayChangeListener listener) {\n-            return new Generic(observable, this.listener, listener);\n+        protected ArrayListenerHelper<T> addListener(ArrayChangeListener<T> listener) {\n+            return new Generic<>(observable, this.listener, listener);\n@@ -123,1 +123,1 @@\n-        protected ArrayListenerHelper removeListener(ArrayChangeListener listener) {\n+        protected ArrayListenerHelper<T> removeListener(ArrayChangeListener<T> listener) {\n@@ -139,1 +139,1 @@\n-        private final ArrayChangeListener listener;\n+        private final ArrayChangeListener<T> listener;\n@@ -141,1 +141,1 @@\n-        private SingleChange(T observable, ArrayChangeListener listener) {\n+        private SingleChange(T observable, ArrayChangeListener<T> listener) {\n@@ -147,2 +147,2 @@\n-        protected ArrayListenerHelper addListener(InvalidationListener listener) {\n-            return new Generic(observable, listener, this.listener);\n+        protected ArrayListenerHelper<T> addListener(InvalidationListener listener) {\n+            return new Generic<>(observable, listener, this.listener);\n@@ -152,1 +152,1 @@\n-        protected ArrayListenerHelper removeListener(InvalidationListener listener) {\n+        protected ArrayListenerHelper<T> removeListener(InvalidationListener listener) {\n@@ -157,2 +157,2 @@\n-        protected ArrayListenerHelper addListener(ArrayChangeListener listener) {\n-            return new Generic(observable, this.listener, listener);\n+        protected ArrayListenerHelper<T> addListener(ArrayChangeListener<T> listener) {\n+            return new Generic<>(observable, this.listener, listener);\n@@ -162,1 +162,1 @@\n-        protected ArrayListenerHelper removeListener(ArrayChangeListener listener) {\n+        protected ArrayListenerHelper<T> removeListener(ArrayChangeListener<T> listener) {\n@@ -179,1 +179,1 @@\n-        private ArrayChangeListener[] changeListeners;\n+        private ArrayChangeListener<T>[] changeListeners;\n@@ -190,1 +190,1 @@\n-        private Generic(T observable, ArrayChangeListener listener0, ArrayChangeListener listener1) {\n+        private Generic(T observable, ArrayChangeListener<T> listener0, ArrayChangeListener<T> listener1) {\n@@ -196,1 +196,1 @@\n-        private Generic(T observable, InvalidationListener invalidationListener, ArrayChangeListener changeListener) {\n+        private Generic(T observable, InvalidationListener invalidationListener, ArrayChangeListener<T> changeListener) {\n@@ -205,1 +205,1 @@\n-        protected Generic addListener(InvalidationListener listener) {\n+        protected Generic<T> addListener(InvalidationListener listener) {\n@@ -227,1 +227,1 @@\n-        protected ArrayListenerHelper removeListener(InvalidationListener listener) {\n+        protected ArrayListenerHelper<T> removeListener(InvalidationListener listener) {\n@@ -233,1 +233,1 @@\n-                                return new SingleChange(observable, changeListeners[0]);\n+                                return new SingleChange<>(observable, changeListeners[0]);\n@@ -238,1 +238,1 @@\n-                            return new SingleInvalidation(observable, invalidationListeners[1-index]);\n+                            return new SingleInvalidation<>(observable, invalidationListeners[1-index]);\n@@ -262,1 +262,1 @@\n-        protected ArrayListenerHelper addListener(ArrayChangeListener<T> listener) {\n+        protected ArrayListenerHelper<T> addListener(ArrayChangeListener<T> listener) {\n@@ -284,1 +284,1 @@\n-        protected ArrayListenerHelper removeListener(ArrayChangeListener<T> listener) {\n+        protected ArrayListenerHelper<T> removeListener(ArrayChangeListener<T> listener) {\n@@ -290,1 +290,1 @@\n-                                return new SingleInvalidation(observable, invalidationListeners[0]);\n+                                return new SingleInvalidation<>(observable, invalidationListeners[0]);\n@@ -295,1 +295,1 @@\n-                            return new SingleChange(observable, changeListeners[1-index]);\n+                            return new SingleChange<>(observable, changeListeners[1-index]);\n@@ -298,1 +298,1 @@\n-                            final ArrayChangeListener[] oldListeners = changeListeners;\n+                            final ArrayChangeListener<T>[] oldListeners = changeListeners;\n@@ -322,1 +322,1 @@\n-            final ArrayChangeListener[] curChangeList = changeListeners;\n+            final ArrayChangeListener<T>[] curChangeList = changeListeners;\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ArrayListenerHelper.java","additions":39,"deletions":39,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import java.util.function.Function;\n+\n@@ -34,1 +36,1 @@\n-    private final Map<E, F> map;\n+    private final Function<E, F> mapper;\n@@ -38,13 +40,1 @@\n-    public static final Map NOOP_MAP = new Map() {\n-\n-        @Override\n-        public Object map(Object original) {\n-            return original;\n-        }\n-    };\n-\n-    public static interface Map<E, F> {\n-        F map(E original);\n-    }\n-\n-    public MappingChange(Change<? extends E> original, Map<E, F> map, ObservableList<F> list) {\n+    public MappingChange(Change<? extends E> original, Function<E, F> mapper, ObservableList<F> list) {\n@@ -53,1 +43,1 @@\n-        this.map = map;\n+        this.mapper = mapper;\n@@ -83,1 +73,1 @@\n-                    return map.map(original.getRemoved().get(index));\n+                    return mapper.apply(original.getRemoved().get(index));\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/MappingChange.java","additions":6,"deletions":16,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    private final ElementObserver elementObserver;\n+    private final ElementObserver<E> elementObserver;\n@@ -58,1 +58,1 @@\n-        this.elementObserver = new ElementObserver(extractor, new Callback<E, InvalidationListener>() {\n+        this.elementObserver = new ElementObserver<>(extractor, new Callback<E, InvalidationListener>() {\n@@ -210,1 +210,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -212,5 +211,1 @@\n-        if (backingList.isEmpty()) {\n-            return;\n-        }\n-        int[] perm = getSortHelper().sort((List<? extends Comparable>)backingList);\n-        fireChange(new SimplePermutationChange<>(0, size(), perm, this));\n+        sort(null);\n@@ -224,1 +219,3 @@\n-        int[] perm = getSortHelper().sort(backingList, comparator);\n+        @SuppressWarnings(\"unchecked\")\n+        int[] perm = comparator == null ? getSortHelper().sort((List<? extends Comparable<Object>>) backingList)\n+                : getSortHelper().sort(backingList, comparator);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableListWrapper.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -528,1 +528,1 @@\n-            if (!(o instanceof Map.Entry)) {\n+            if (!(o instanceof Map.Entry<?, ?> e)) {\n@@ -531,1 +531,0 @@\n-            Map.Entry e = (Map.Entry) o;\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableMapWrapper.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    private final ElementObserver elementObserver;\n+    private final ElementObserver<E> elementObserver;\n@@ -50,1 +50,1 @@\n-        this.elementObserver = new ElementObserver(extractor, new Callback<E, InvalidationListener>() {\n+        this.elementObserver = new ElementObserver<>(extractor, new Callback<E, InvalidationListener>() {\n@@ -233,1 +233,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -235,5 +234,1 @@\n-        if (backingList.isEmpty()) {\n-            return;\n-        }\n-        int[] perm = getSortHelper().sort((List<? extends Comparable>)backingList);\n-        fireChange(new NonIterableChange.SimplePermutationChange<>(0, size(), perm, this));\n+        sort(null);\n@@ -247,1 +242,4 @@\n-        int[] perm = getSortHelper().sort(backingList, comparator);\n+\n+        @SuppressWarnings(\"unchecked\")\n+        int[] perm = comparator == null ? getSortHelper().sort((List<? extends Comparable<Object>>) backingList)\n+                : getSortHelper().sort(backingList, comparator);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableSequentialListWrapper.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -206,2 +206,2 @@\n-    public Iterator iterator() {\n-        return new Iterator<E>() {\n+    public Iterator<E> iterator() {\n+        return new Iterator<>() {\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableSetWrapper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-        onProposedChange(Collections.unmodifiableList(new ArrayList(col)), 0, size());\n+        onProposedChange(Collections.unmodifiableList(new ArrayList<>(col)), 0, size());\n@@ -233,1 +233,1 @@\n-        onProposedChange(Collections.unmodifiableList(new ArrayList(c)), size(), size());\n+        onProposedChange(Collections.unmodifiableList(new ArrayList<>(c)), size(), size());\n@@ -248,1 +248,1 @@\n-        onProposedChange(Collections.unmodifiableList(new ArrayList(c)), index, index);\n+        onProposedChange(Collections.unmodifiableList(new ArrayList<>(c)), index, index);\n@@ -464,1 +464,1 @@\n-            onProposedChange(Collections.unmodifiableList(new ArrayList(c)), offset + size(), offset + size());\n+            onProposedChange(Collections.unmodifiableList(new ArrayList<>(c)), offset + size(), offset + size());\n@@ -480,1 +480,1 @@\n-            onProposedChange(Collections.unmodifiableList(new ArrayList(c)), offset + index, offset + index);\n+            onProposedChange(Collections.unmodifiableList(new ArrayList<>(c)), offset + index, offset + index);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/VetoableListDecorator.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -58,2 +58,0 @@\n-    private static final ObservableList EMPTY_LIST = FXCollections.emptyObservableList();\n-\n@@ -219,2 +217,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.size() : list.size();\n+        return getNonNull().size();\n@@ -225,2 +222,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.isEmpty() : list.isEmpty();\n+        return getNonNull().isEmpty();\n@@ -231,2 +227,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.contains(obj) : list.contains(obj);\n+        return getNonNull().contains(obj);\n@@ -237,2 +232,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.iterator() : list.iterator();\n+        return getNonNull().iterator();\n@@ -243,2 +237,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.toArray() : list.toArray();\n+        return getNonNull().toArray();\n@@ -249,2 +242,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? (T[]) EMPTY_LIST.toArray(array) : list.toArray(array);\n+        return getNonNull().toArray(array);\n@@ -255,2 +247,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.add(element) : list.add(element);\n+        return getNonNull().add(element);\n@@ -261,2 +252,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.remove(obj) : list.remove(obj);\n+        return getNonNull().remove(obj);\n@@ -267,2 +257,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.contains(objects) : list.containsAll(objects);\n+        return getNonNull().containsAll(objects);\n@@ -273,2 +262,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.addAll(elements) : list.addAll(elements);\n+        return getNonNull().addAll(elements);\n@@ -279,2 +267,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.addAll(i, elements) : list.addAll(i, elements);\n+        return getNonNull().addAll(i, elements);\n@@ -285,2 +272,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.removeAll(objects) : list.removeAll(objects);\n+        return getNonNull().removeAll(objects);\n@@ -291,2 +277,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.retainAll(objects) : list.retainAll(objects);\n+        return getNonNull().retainAll(objects);\n@@ -297,6 +282,1 @@\n-        final ObservableList<E> list = get();\n-        if (list == null) {\n-            EMPTY_LIST.clear();\n-        } else {\n-            list.clear();\n-        }\n+        getNonNull().clear();\n@@ -307,2 +287,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? (E) EMPTY_LIST.get(i) : list.get(i);\n+        return getNonNull().get(i);\n@@ -313,2 +292,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? (E) EMPTY_LIST.set(i, element) : list.set(i, element);\n+        return getNonNull().set(i, element);\n@@ -319,6 +297,1 @@\n-        final ObservableList<E> list = get();\n-        if (list == null) {\n-            EMPTY_LIST.add(i, element);\n-        } else {\n-            list.add(i, element);\n-        }\n+        getNonNull().add(i, element);\n@@ -329,2 +302,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? (E) EMPTY_LIST.remove(i) : list.remove(i);\n+        return getNonNull().remove(i);\n@@ -335,2 +307,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.indexOf(obj) : list.indexOf(obj);\n+        return getNonNull().indexOf(obj);\n@@ -341,2 +312,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.lastIndexOf(obj) : list.lastIndexOf(obj);\n+        return getNonNull().lastIndexOf(obj);\n@@ -347,2 +317,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.listIterator() : list.listIterator();\n+        return getNonNull().listIterator();\n@@ -353,2 +322,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.listIterator(i) : list.listIterator(i);\n+        return getNonNull().listIterator(i);\n@@ -359,2 +327,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.subList(from, to) : list.subList(from, to);\n+        return getNonNull().subList(from, to);\n@@ -365,2 +332,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.addAll(elements) : list.addAll(elements);\n+        return getNonNull().addAll(elements);\n@@ -371,2 +337,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.setAll(elements) : list.setAll(elements);\n+        return getNonNull().setAll(elements);\n@@ -377,2 +342,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.setAll(elements) : list.setAll(elements);\n+        return getNonNull().setAll(elements);\n@@ -383,2 +347,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.removeAll(elements) : list.removeAll(elements);\n+        return getNonNull().removeAll(elements);\n@@ -389,2 +352,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.retainAll(elements) : list.retainAll(elements);\n+        return getNonNull().retainAll(elements);\n@@ -395,6 +357,1 @@\n-        final ObservableList<E> list = get();\n-        if (list == null) {\n-            EMPTY_LIST.remove(from, to);\n-        } else {\n-            list.remove(from, to);\n-        }\n+        getNonNull().remove(from, to);\n@@ -403,0 +360,5 @@\n+    private ObservableList<E> getNonNull() {\n+        ObservableList<E> list = get();\n+\n+        return list == null ? FXCollections.emptyObservableList() : list;\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/ListExpression.java","additions":34,"deletions":72,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import javafx.beans.InvalidationListener;\n@@ -35,1 +34,0 @@\n-import javafx.collections.MapChangeListener;\n@@ -59,30 +57,0 @@\n-    private static final ObservableMap EMPTY_MAP = new EmptyObservableMap();\n-\n-    private static class EmptyObservableMap<K, V> extends AbstractMap<K, V> implements ObservableMap<K, V> {\n-\n-        @Override\n-        public Set<Entry<K, V>> entrySet() {\n-            return Collections.emptySet();\n-        }\n-\n-        @Override\n-        public void addListener(MapChangeListener<? super K, ? super V> mapChangeListener) {\n-            \/\/ no-op\n-        }\n-\n-        @Override\n-        public void removeListener(MapChangeListener<? super K, ? super V> mapChangeListener) {\n-            \/\/ no-op\n-        }\n-\n-        @Override\n-        public void addListener(InvalidationListener listener) {\n-            \/\/ no-op\n-        }\n-\n-        @Override\n-        public void removeListener(InvalidationListener listener) {\n-            \/\/ no-op\n-        }\n-    }\n-\n@@ -245,2 +213,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? EMPTY_MAP.size() : map.size();\n+        return getNonNull().size();\n@@ -251,2 +218,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? EMPTY_MAP.isEmpty() : map.isEmpty();\n+        return getNonNull().isEmpty();\n@@ -257,2 +223,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? EMPTY_MAP.containsKey(obj) : map.containsKey(obj);\n+        return getNonNull().containsKey(obj);\n@@ -263,2 +228,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? EMPTY_MAP.containsValue(obj) : map.containsValue(obj);\n+        return getNonNull().containsValue(obj);\n@@ -269,2 +233,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? (V) EMPTY_MAP.put(key, value) : map.put(key, value);\n+        return getNonNull().put(key, value);\n@@ -275,2 +238,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? (V) EMPTY_MAP.remove(obj) : map.remove(obj);\n+        return getNonNull().remove(obj);\n@@ -281,6 +243,1 @@\n-        final ObservableMap<K, V> map = get();\n-        if (map == null) {\n-            EMPTY_MAP.putAll(elements);\n-        } else {\n-            map.putAll(elements);\n-        }\n+        getNonNull().putAll(elements);\n@@ -291,6 +248,1 @@\n-        final ObservableMap<K, V> map = get();\n-        if (map == null) {\n-            EMPTY_MAP.clear();\n-        } else {\n-            map.clear();\n-        }\n+        getNonNull().clear();\n@@ -301,2 +253,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? EMPTY_MAP.keySet() : map.keySet();\n+        return getNonNull().keySet();\n@@ -307,2 +258,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? EMPTY_MAP.values() : map.values();\n+        return getNonNull().values();\n@@ -313,2 +263,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? EMPTY_MAP.entrySet() : map.entrySet();\n+        return getNonNull().entrySet();\n@@ -319,2 +268,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? (V) EMPTY_MAP.get(key) : map.get(key);\n+        return getNonNull().get(key);\n@@ -323,0 +271,5 @@\n+    private ObservableMap<K, V> getNonNull() {\n+        ObservableMap<K, V> map = get();\n+\n+        return map == null ? FXCollections.emptyObservableMap() : map;\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/MapExpression.java","additions":17,"deletions":64,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import javafx.beans.InvalidationListener;\n@@ -36,1 +35,0 @@\n-import javafx.collections.SetChangeListener;\n@@ -38,1 +36,0 @@\n-import java.util.AbstractSet;\n@@ -41,1 +38,0 @@\n-import java.util.NoSuchElementException;\n@@ -66,53 +62,0 @@\n-    private static final ObservableSet EMPTY_SET = new EmptyObservableSet();\n-\n-    private static class EmptyObservableSet<E> extends AbstractSet<E> implements ObservableSet<E> {\n-\n-        private static final Iterator iterator = new Iterator() {\n-            @Override\n-            public boolean hasNext() {\n-                return false;\n-            }\n-\n-            @Override\n-            public Object next() {\n-                throw new NoSuchElementException();\n-            }\n-\n-            @Override\n-            public void remove() {\n-                throw new UnsupportedOperationException();\n-\n-            }\n-        };\n-\n-        @Override\n-        public Iterator<E> iterator() {\n-            return iterator;\n-        }\n-\n-        @Override\n-        public int size() {\n-            return 0;\n-        }\n-\n-        @Override\n-        public void addListener(SetChangeListener<? super E> setChangeListener) {\n-            \/\/ no-op\n-        }\n-\n-        @Override\n-        public void removeListener(SetChangeListener<? super E> setChangeListener) {\n-            \/\/ no-op\n-        }\n-\n-        @Override\n-        public void addListener(InvalidationListener listener) {\n-            \/\/ no-op\n-        }\n-\n-        @Override\n-        public void removeListener(InvalidationListener listener) {\n-            \/\/ no-op\n-        }\n-    }\n-\n@@ -247,2 +190,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? EMPTY_SET.size() : set.size();\n+        return getNonNull().size();\n@@ -253,2 +195,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? EMPTY_SET.isEmpty() : set.isEmpty();\n+        return getNonNull().isEmpty();\n@@ -259,2 +200,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? EMPTY_SET.contains(obj) : set.contains(obj);\n+        return getNonNull().contains(obj);\n@@ -265,2 +205,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? EMPTY_SET.iterator() : set.iterator();\n+        return getNonNull().iterator();\n@@ -271,2 +210,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? EMPTY_SET.toArray() : set.toArray();\n+        return getNonNull().toArray();\n@@ -277,2 +215,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? (T[]) EMPTY_SET.toArray(array) : set.toArray(array);\n+        return getNonNull().toArray(array);\n@@ -283,2 +220,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? EMPTY_SET.add(element) : set.add(element);\n+        return getNonNull().add(element);\n@@ -289,2 +225,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? EMPTY_SET.remove(obj) : set.remove(obj);\n+        return getNonNull().remove(obj);\n@@ -295,2 +230,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? EMPTY_SET.contains(objects) : set.containsAll(objects);\n+        return getNonNull().containsAll(objects);\n@@ -301,2 +235,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? EMPTY_SET.addAll(elements) : set.addAll(elements);\n+        return getNonNull().addAll(elements);\n@@ -307,2 +240,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? EMPTY_SET.removeAll(objects) : set.removeAll(objects);\n+        return getNonNull().removeAll(objects);\n@@ -313,2 +245,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? EMPTY_SET.retainAll(objects) : set.retainAll(objects);\n+        return getNonNull().retainAll(objects);\n@@ -319,6 +250,1 @@\n-        final ObservableSet<E> set = get();\n-        if (set == null) {\n-            EMPTY_SET.clear();\n-        } else {\n-            set.clear();\n-        }\n+        getNonNull().clear();\n@@ -327,0 +253,5 @@\n+    private ObservableSet<E> getNonNull() {\n+        ObservableSet<E> set = get();\n+\n+        return set == null ? FXCollections.emptyObservableSet() : set;\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/SetExpression.java","additions":18,"deletions":87,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-    private static ObservableMap EMPTY_OBSERVABLE_MAP = new EmptyObservableMap();\n+    private static final ObservableMap<?, ?> EMPTY_OBSERVABLE_MAP = new EmptyObservableMap<>();\n@@ -247,1 +247,1 @@\n-        return EMPTY_OBSERVABLE_MAP;\n+        return (ObservableMap<K, V>) EMPTY_OBSERVABLE_MAP;\n@@ -316,1 +316,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -318,1 +317,1 @@\n-        return observableList(new ArrayList());\n+        return observableList(new ArrayList<>());\n@@ -338,1 +337,1 @@\n-        return observableList(new ArrayList(), extractor);\n+        return observableList(new ArrayList<>(), extractor);\n@@ -438,2 +437,1 @@\n-    private static ObservableList EMPTY_OBSERVABLE_LIST = new EmptyObservableList();\n-\n+    private static final ObservableList<?> EMPTY_OBSERVABLE_LIST = new EmptyObservableList<>();\n@@ -448,2 +446,2 @@\n-    public static<E> ObservableList<E> emptyObservableList() {\n-        return EMPTY_OBSERVABLE_LIST;\n+    public static <E> ObservableList<E> emptyObservableList() {\n+        return (ObservableList<E>) EMPTY_OBSERVABLE_LIST;\n@@ -509,1 +507,1 @@\n-    private static ObservableSet EMPTY_OBSERVABLE_SET = new EmptyObservableSet();\n+    private static final ObservableSet<?> EMPTY_OBSERVABLE_SET = new EmptyObservableSet<>();\n@@ -519,2 +517,2 @@\n-    public static<E> ObservableSet<E> emptyObservableSet() {\n-        return EMPTY_OBSERVABLE_SET;\n+    public static <E> ObservableSet<E> emptyObservableSet() {\n+        return (ObservableSet<E>) EMPTY_OBSERVABLE_SET;\n@@ -678,1 +676,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -680,2 +677,2 @@\n-        if (list instanceof SortableList) {\n-            ((SortableList<? extends T>)list).sort();\n+        if (list instanceof SortableList<?> sortableList) {\n+            sortableList.sort();\n@@ -710,1 +707,1 @@\n-        private static final ListIterator iterator = new ListIterator() {\n+        private final ListIterator<E> iterator = new ListIterator<>() {\n@@ -718,1 +715,1 @@\n-            public Object next() {\n+            public E next() {\n@@ -733,1 +730,1 @@\n-            public Object previous() {\n+            public E previous() {\n@@ -769,1 +766,0 @@\n-\n@@ -789,1 +785,0 @@\n-        @SuppressWarnings(\"unchecked\")\n@@ -815,1 +810,0 @@\n-        @SuppressWarnings(\"unchecked\")\n@@ -821,1 +815,0 @@\n-        @SuppressWarnings(\"unchecked\")\n@@ -1203,1 +1196,1 @@\n-        private ListListenerHelper helper;\n+        private ListListenerHelper<T> helper;\n@@ -1588,0 +1581,17 @@\n+        private final Iterator<E> iterator = new Iterator<>() {\n+            @Override\n+            public boolean hasNext() {\n+                return false;\n+            }\n+\n+            @Override\n+            public E next() {\n+                throw new NoSuchElementException();\n+            }\n+\n+            @Override\n+            public void remove() {\n+                throw new UnsupportedOperationException();\n+            }\n+        };\n+\n@@ -1641,17 +1651,1 @@\n-            return new Iterator() {\n-\n-                @Override\n-                public boolean hasNext() {\n-                    return false;\n-                }\n-\n-                @Override\n-                public Object next() {\n-                    throw new NoSuchElementException();\n-                }\n-\n-                @Override\n-                public void remove() {\n-                    throw new UnsupportedOperationException();\n-                }\n-            };\n+            return iterator;\n@@ -1659,1 +1653,0 @@\n-\n@@ -1895,1 +1888,1 @@\n-        private SetListenerHelper listenerHelper;\n+        private SetListenerHelper<E> listenerHelper;\n@@ -1939,1 +1932,1 @@\n-        private SetListenerHelper listenerHelper;\n+        private SetListenerHelper<E> listenerHelper;\n@@ -2166,1 +2159,1 @@\n-        private MapListenerHelper listenerHelper;\n+        private MapListenerHelper<K, V> listenerHelper;\n@@ -2255,1 +2248,1 @@\n-        public void putAll(Map t) {\n+        public void putAll(Map<? extends K, ? extends V> t) {\n@@ -2294,1 +2287,1 @@\n-        public Set entrySet() {\n+        public Set<Entry<K, V>> entrySet() {\n@@ -2781,1 +2774,1 @@\n-        private MapListenerHelper listenerHelper;\n+        private MapListenerHelper<K, V> listenerHelper;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/FXCollections.java","additions":40,"deletions":47,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -640,1 +640,1 @@\n-        private SubChange[] changes;\n+        private SubChange<E>[] changes;\n@@ -643,1 +643,1 @@\n-        private IterableChange(SubChange[] changes, ObservableList<E> list) {\n+        private IterableChange(SubChange<E>[] changes, ObservableList<E> list) {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/ListChangeBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-        Comparator naturalOrder = new Comparator<E>() {\n+        Comparator<E> naturalOrder = new Comparator<>() {\n@@ -152,1 +152,4 @@\n-                    return ((Comparable) o1).compareTo(o2);\n+                    @SuppressWarnings(\"unchecked\")\n+                    Comparable<E> casted = (Comparable<E>) o1;  \/\/ cast is not safe, assumes the comparable interface implemented is Comparable<E> but it might be anything\n+\n+                    return casted.compareTo(o2);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/ObservableList.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-    private static final Predicate ALWAYS_TRUE = t -> true;\n@@ -132,1 +131,1 @@\n-        return ALWAYS_TRUE;\n+        return t -> true;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/transformation\/FilteredList.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-        this(source, (Comparator)null);\n+        this(source, null);\n@@ -243,1 +243,1 @@\n-                Element[] sortedTmp = new Element[sorted.length];\n+                Element<E>[] sortedTmp = new Element[sorted.length];\n@@ -356,1 +356,1 @@\n-        int[] perm = helper.sort(sorted, 0, size, elementComparator);\n+        int[] perm = helper.sort(sorted, 0, size, elementComparator);  \/\/ elementComparator is never null here\n@@ -373,1 +373,1 @@\n-        List<E> removed = new ArrayList(this);\n+        List<E> removed = new ArrayList<>(this);\n@@ -382,1 +382,1 @@\n-        int[] perm = helper.sort(sorted, 0, size, elementComparator);\n+        int[] perm = helper.sort(sorted, 0, size, elementComparator);  \/\/ elementComparator is never null here\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/transformation\/SortedList.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -93,2 +93,2 @@\n-        while(currentSource instanceof TransformationList) {\n-            currentSource = ((TransformationList)currentSource).source;\n+        while (currentSource instanceof TransformationList<?, ?> transformationList) {\n+            currentSource = transformationList.source;\n@@ -142,2 +142,1 @@\n-        while(currentSource != list && currentSource instanceof TransformationList) {\n-            final TransformationList tSource = (TransformationList)currentSource;\n+        while (currentSource != list && currentSource instanceof TransformationList<?, ?> tSource) {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/transformation\/TransformationList.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.function.Function;\n@@ -2249,2 +2250,0 @@\n-        private final MappingChange.Map<TablePosition<S,?>,Integer> cellToIndicesMap = f -> f.getRow();\n-\n@@ -3192,1 +3191,1 @@\n-            selectedCellsSeq.callObservers(new MappingChange<>(c, MappingChange.NOOP_MAP, selectedCellsSeq));\n+            selectedCellsSeq.callObservers(new MappingChange<>(c, Function.identity(), selectedCellsSeq));\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableView.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import java.util.function.Function;\n@@ -2590,2 +2591,0 @@\n-        private final MappingChange.Map<TreeTablePosition<S,?>,Integer> cellToIndicesMap = f -> f.getRow();\n-\n@@ -3571,1 +3570,1 @@\n-            selectedCellsSeq.callObservers(new MappingChange<>(c, MappingChange.NOOP_MAP, selectedCellsSeq));\n+            selectedCellsSeq.callObservers(new MappingChange<>(c, Function.identity(), selectedCellsSeq));\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableView.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}