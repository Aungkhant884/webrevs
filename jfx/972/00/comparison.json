{"files":[{"patch":"@@ -82,1 +82,1 @@\n-        final var binding = new StringFormatBidirectionalBinding(stringProperty, otherProperty, format);\n+        final var binding = new StringFormatBidirectionalBinding<>(stringProperty, otherProperty, format);\n@@ -857,1 +857,1 @@\n-    private static class StringFormatBidirectionalBinding extends StringConversionBidirectionalBinding {\n+    private static class StringFormatBidirectionalBinding<T> extends StringConversionBidirectionalBinding<T> {\n@@ -860,2 +860,1 @@\n-        @SuppressWarnings(\"unchecked\")\n-        public StringFormatBidirectionalBinding(Property<String> stringProperty, Property<?> otherProperty, Format format) {\n+        public StringFormatBidirectionalBinding(Property<String> stringProperty, Property<T> otherProperty, Format format) {\n@@ -871,0 +870,1 @@\n+        @SuppressWarnings(\"unchecked\")\n@@ -872,2 +872,2 @@\n-        protected Object fromString(String value) throws ParseException {\n-            return format.parseObject(value);\n+        protected T fromString(String value) throws ParseException {\n+            return (T) format.parseObject(value);  \/\/ May result in ClassCastException, this is expected\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/BidirectionalBinding.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -79,4 +79,3 @@\n-        if ((obj1 instanceof ObservableList) && (obj2 instanceof ObservableList)) {\n-            final ObservableList list1 = (ObservableList)obj1;\n-            final ObservableList list2 = (ObservableList)obj2;\n-            final ListContentBinding binding = new ListContentBinding(list1, list2);\n+        if ((obj1 instanceof ObservableList<?> list1) && (obj2 instanceof ObservableList<?> list2)) {\n+            @SuppressWarnings(\"unchecked\")\n+            final ListContentBinding<Object> binding = new ListContentBinding<>((ObservableList<Object>) list1, (ObservableList<Object>) list2);\n@@ -85,4 +84,3 @@\n-        } else if ((obj1 instanceof ObservableSet) && (obj2 instanceof ObservableSet)) {\n-            final ObservableSet set1 = (ObservableSet)obj1;\n-            final ObservableSet set2 = (ObservableSet)obj2;\n-            final SetContentBinding binding = new SetContentBinding(set1, set2);\n+        } else if ((obj1 instanceof ObservableSet<?> set1) && (obj2 instanceof ObservableSet<?> set2)) {\n+            @SuppressWarnings(\"unchecked\")\n+            final SetContentBinding<Object> binding = new SetContentBinding<>((ObservableSet<Object>) set1, (ObservableSet<Object>) set2);\n@@ -91,4 +89,3 @@\n-        } else if ((obj1 instanceof ObservableMap) && (obj2 instanceof ObservableMap)) {\n-            final ObservableMap map1 = (ObservableMap)obj1;\n-            final ObservableMap map2 = (ObservableMap)obj2;\n-            final MapContentBinding binding = new MapContentBinding(map1, map2);\n+        } else if ((obj1 instanceof ObservableMap<?, ?> map1) && (obj2 instanceof ObservableMap<?, ?> map2)) {\n+            @SuppressWarnings(\"unchecked\")\n+            final MapContentBinding<Object, Object> binding = new MapContentBinding<>((ObservableMap<Object, Object>) map1, (ObservableMap<Object, Object>) map2);\n@@ -175,2 +172,1 @@\n-            if (obj instanceof ListContentBinding) {\n-                final ListContentBinding otherBinding = (ListContentBinding) obj;\n+            if (obj instanceof ListContentBinding<?> otherBinding) {\n@@ -261,2 +257,1 @@\n-            if (obj instanceof SetContentBinding) {\n-                final SetContentBinding otherBinding = (SetContentBinding) obj;\n+            if (obj instanceof SetContentBinding<?> otherBinding) {\n@@ -348,2 +343,1 @@\n-            if (obj instanceof MapContentBinding) {\n-                final MapContentBinding otherBinding = (MapContentBinding) obj;\n+            if (obj instanceof MapContentBinding<?, ?> otherBinding) {\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/BidirectionalContentBinding.java","additions":12,"deletions":18,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-        if (list1 instanceof ObservableList) {\n-            ((ObservableList) list1).setAll(list2);\n+        if (list1 instanceof ObservableList<E> observableList) {\n+            observableList.setAll(list2);\n@@ -85,6 +85,15 @@\n-        if ((obj1 instanceof List) && (obj2 instanceof ObservableList)) {\n-            ((ObservableList)obj2).removeListener(new ListContentBinding((List)obj1));\n-        } else if ((obj1 instanceof Set) && (obj2 instanceof ObservableSet)) {\n-            ((ObservableSet)obj2).removeListener(new SetContentBinding((Set)obj1));\n-        } else if ((obj1 instanceof Map) && (obj2 instanceof ObservableMap)) {\n-            ((ObservableMap)obj2).removeListener(new MapContentBinding((Map)obj1));\n+        if ((obj1 instanceof List<?> list1) && (obj2 instanceof ObservableList<?> list2)) {\n+            @SuppressWarnings(\"unchecked\")\n+            ListContentBinding<Object> binding = new ListContentBinding<>((List<Object>) list1);\n+\n+            list2.removeListener(binding);\n+        } else if ((obj1 instanceof Set<?> set1) && (obj2 instanceof ObservableSet<?> set2)) {\n+            @SuppressWarnings(\"unchecked\")\n+            SetContentBinding<Object> binding = new SetContentBinding<>((Set<Object>) set1);\n+\n+            set2.removeListener(binding);\n+        } else if ((obj1 instanceof Map<?, ?> map1) && (obj2 instanceof ObservableMap<?, ?> map2)) {\n+            @SuppressWarnings(\"unchecked\")\n+            MapContentBinding<Object, Object> binding = new MapContentBinding<>((Map<Object, Object>) map1);\n+\n+            map2.removeListener(binding);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ContentBinding.java","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -557,1 +557,1 @@\n-                        change = new NonIterableChange.GenericAddRemoveChange(0, safeSize, safeOldValue, observable);\n+                        change = new NonIterableChange.GenericAddRemoveChange<>(0, safeSize, safeOldValue, observable);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ListExpressionHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    public static <T extends ObservableArray<T>> ArrayListenerHelper addListener(ArrayListenerHelper helper, T observable, InvalidationListener listener) {\n+    public static <T extends ObservableArray<T>> ArrayListenerHelper<T> addListener(ArrayListenerHelper<T> helper, T observable, InvalidationListener listener) {\n@@ -44,1 +44,1 @@\n-        return (helper == null)? new ArrayListenerHelper.SingleInvalidation(observable, listener) : helper.addListener(listener);\n+        return (helper == null)? new ArrayListenerHelper.SingleInvalidation<>(observable, listener) : helper.addListener(listener);\n@@ -47,1 +47,1 @@\n-    public static  ArrayListenerHelper removeListener(ArrayListenerHelper helper, InvalidationListener listener) {\n+    public static <T extends ObservableArray<T>> ArrayListenerHelper<T> removeListener(ArrayListenerHelper<T> helper, InvalidationListener listener) {\n@@ -54,1 +54,1 @@\n-    public static <T extends ObservableArray<T>> ArrayListenerHelper addListener(ArrayListenerHelper helper, T observable, ArrayChangeListener listener) {\n+    public static <T extends ObservableArray<T>> ArrayListenerHelper<T> addListener(ArrayListenerHelper<T> helper, T observable, ArrayChangeListener<T> listener) {\n@@ -58,1 +58,1 @@\n-        return (helper == null)? new ArrayListenerHelper.SingleChange(observable, listener) : helper.addListener(listener);\n+        return (helper == null)? new ArrayListenerHelper.SingleChange<>(observable, listener) : helper.addListener(listener);\n@@ -61,1 +61,1 @@\n-    public static  ArrayListenerHelper removeListener(ArrayListenerHelper helper, ArrayChangeListener listener) {\n+    public static <T extends ObservableArray<T>> ArrayListenerHelper<T> removeListener(ArrayListenerHelper<T> helper, ArrayChangeListener<T> listener) {\n@@ -68,1 +68,1 @@\n-    public static  void fireValueChangedEvent(ArrayListenerHelper helper, boolean sizeChanged, int from, int to) {\n+    public static <T extends ObservableArray<T>> void fireValueChangedEvent(ArrayListenerHelper<T> helper, boolean sizeChanged, int from, int to) {\n@@ -74,1 +74,1 @@\n-    public static  boolean hasListeners(ArrayListenerHelper helper) {\n+    public static <T extends ObservableArray<T>> boolean hasListeners(ArrayListenerHelper<T> helper) {\n@@ -87,2 +87,2 @@\n-    protected abstract ArrayListenerHelper addListener(InvalidationListener listener);\n-    protected abstract ArrayListenerHelper removeListener(InvalidationListener listener);\n+    protected abstract ArrayListenerHelper<T> addListener(InvalidationListener listener);\n+    protected abstract ArrayListenerHelper<T> removeListener(InvalidationListener listener);\n@@ -90,2 +90,2 @@\n-    protected abstract ArrayListenerHelper addListener(ArrayChangeListener<T> listener);\n-    protected abstract ArrayListenerHelper removeListener(ArrayChangeListener<T> listener);\n+    protected abstract ArrayListenerHelper<T> addListener(ArrayChangeListener<T> listener);\n+    protected abstract ArrayListenerHelper<T> removeListener(ArrayChangeListener<T> listener);\n@@ -108,2 +108,2 @@\n-        protected ArrayListenerHelper addListener(InvalidationListener listener) {\n-            return new Generic(observable, this.listener, listener);\n+        protected ArrayListenerHelper<T> addListener(InvalidationListener listener) {\n+            return new Generic<>(observable, this.listener, listener);\n@@ -113,1 +113,1 @@\n-        protected ArrayListenerHelper removeListener(InvalidationListener listener) {\n+        protected ArrayListenerHelper<T> removeListener(InvalidationListener listener) {\n@@ -118,2 +118,2 @@\n-        protected ArrayListenerHelper addListener(ArrayChangeListener listener) {\n-            return new Generic(observable, this.listener, listener);\n+        protected ArrayListenerHelper<T> addListener(ArrayChangeListener<T> listener) {\n+            return new Generic<>(observable, this.listener, listener);\n@@ -123,1 +123,1 @@\n-        protected ArrayListenerHelper removeListener(ArrayChangeListener listener) {\n+        protected ArrayListenerHelper<T> removeListener(ArrayChangeListener<T> listener) {\n@@ -139,1 +139,1 @@\n-        private final ArrayChangeListener listener;\n+        private final ArrayChangeListener<T> listener;\n@@ -141,1 +141,1 @@\n-        private SingleChange(T observable, ArrayChangeListener listener) {\n+        private SingleChange(T observable, ArrayChangeListener<T> listener) {\n@@ -147,2 +147,2 @@\n-        protected ArrayListenerHelper addListener(InvalidationListener listener) {\n-            return new Generic(observable, listener, this.listener);\n+        protected ArrayListenerHelper<T> addListener(InvalidationListener listener) {\n+            return new Generic<>(observable, listener, this.listener);\n@@ -152,1 +152,1 @@\n-        protected ArrayListenerHelper removeListener(InvalidationListener listener) {\n+        protected ArrayListenerHelper<T> removeListener(InvalidationListener listener) {\n@@ -157,2 +157,2 @@\n-        protected ArrayListenerHelper addListener(ArrayChangeListener listener) {\n-            return new Generic(observable, this.listener, listener);\n+        protected ArrayListenerHelper<T> addListener(ArrayChangeListener<T> listener) {\n+            return new Generic<>(observable, this.listener, listener);\n@@ -162,1 +162,1 @@\n-        protected ArrayListenerHelper removeListener(ArrayChangeListener listener) {\n+        protected ArrayListenerHelper<T> removeListener(ArrayChangeListener<T> listener) {\n@@ -179,1 +179,1 @@\n-        private ArrayChangeListener[] changeListeners;\n+        private ArrayChangeListener<T>[] changeListeners;\n@@ -190,1 +190,1 @@\n-        private Generic(T observable, ArrayChangeListener listener0, ArrayChangeListener listener1) {\n+        private Generic(T observable, ArrayChangeListener<T> listener0, ArrayChangeListener<T> listener1) {\n@@ -196,1 +196,1 @@\n-        private Generic(T observable, InvalidationListener invalidationListener, ArrayChangeListener changeListener) {\n+        private Generic(T observable, InvalidationListener invalidationListener, ArrayChangeListener<T> changeListener) {\n@@ -205,1 +205,1 @@\n-        protected Generic addListener(InvalidationListener listener) {\n+        protected Generic<T> addListener(InvalidationListener listener) {\n@@ -227,1 +227,1 @@\n-        protected ArrayListenerHelper removeListener(InvalidationListener listener) {\n+        protected ArrayListenerHelper<T> removeListener(InvalidationListener listener) {\n@@ -233,1 +233,1 @@\n-                                return new SingleChange(observable, changeListeners[0]);\n+                                return new SingleChange<>(observable, changeListeners[0]);\n@@ -238,1 +238,1 @@\n-                            return new SingleInvalidation(observable, invalidationListeners[1-index]);\n+                            return new SingleInvalidation<>(observable, invalidationListeners[1-index]);\n@@ -262,1 +262,1 @@\n-        protected ArrayListenerHelper addListener(ArrayChangeListener<T> listener) {\n+        protected ArrayListenerHelper<T> addListener(ArrayChangeListener<T> listener) {\n@@ -284,1 +284,1 @@\n-        protected ArrayListenerHelper removeListener(ArrayChangeListener<T> listener) {\n+        protected ArrayListenerHelper<T> removeListener(ArrayChangeListener<T> listener) {\n@@ -290,1 +290,1 @@\n-                                return new SingleInvalidation(observable, invalidationListeners[0]);\n+                                return new SingleInvalidation<>(observable, invalidationListeners[0]);\n@@ -295,1 +295,1 @@\n-                            return new SingleChange(observable, changeListeners[1-index]);\n+                            return new SingleChange<>(observable, changeListeners[1-index]);\n@@ -298,1 +298,1 @@\n-                            final ArrayChangeListener[] oldListeners = changeListeners;\n+                            final ArrayChangeListener<T>[] oldListeners = changeListeners;\n@@ -322,1 +322,1 @@\n-            final ArrayChangeListener[] curChangeList = changeListeners;\n+            final ArrayChangeListener<T>[] curChangeList = changeListeners;\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ArrayListenerHelper.java","additions":39,"deletions":39,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-    public static final Map NOOP_MAP = new Map() {\n+    private static final Map<?, ?> NOOP_MAP = new Map<>() {\n@@ -46,0 +46,5 @@\n+    @SuppressWarnings(\"unchecked\")\n+    public static final <E, F> Map<E, F> noOpMap() {\n+        return (Map<E, F>) NOOP_MAP;\n+    }\n+\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/MappingChange.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    private final ElementObserver elementObserver;\n+    private final ElementObserver<E> elementObserver;\n@@ -58,1 +58,1 @@\n-        this.elementObserver = new ElementObserver(extractor, new Callback<E, InvalidationListener>() {\n+        this.elementObserver = new ElementObserver<>(extractor, new Callback<E, InvalidationListener>() {\n@@ -210,1 +210,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -212,5 +211,1 @@\n-        if (backingList.isEmpty()) {\n-            return;\n-        }\n-        int[] perm = getSortHelper().sort((List<? extends Comparable>)backingList);\n-        fireChange(new SimplePermutationChange<>(0, size(), perm, this));\n+        sort(null);\n@@ -224,1 +219,3 @@\n-        int[] perm = getSortHelper().sort(backingList, comparator);\n+        @SuppressWarnings(\"unchecked\")\n+        int[] perm = comparator == null ? getSortHelper().sort((List<? extends Comparable<Object>>) backingList)\n+                : getSortHelper().sort(backingList, comparator);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableListWrapper.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -528,1 +528,1 @@\n-            if (!(o instanceof Map.Entry)) {\n+            if (!(o instanceof Map.Entry<?, ?> e)) {\n@@ -531,1 +531,0 @@\n-            Map.Entry e = (Map.Entry) o;\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableMapWrapper.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    private final ElementObserver elementObserver;\n+    private final ElementObserver<E> elementObserver;\n@@ -50,1 +50,1 @@\n-        this.elementObserver = new ElementObserver(extractor, new Callback<E, InvalidationListener>() {\n+        this.elementObserver = new ElementObserver<>(extractor, new Callback<E, InvalidationListener>() {\n@@ -233,1 +233,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -235,5 +234,1 @@\n-        if (backingList.isEmpty()) {\n-            return;\n-        }\n-        int[] perm = getSortHelper().sort((List<? extends Comparable>)backingList);\n-        fireChange(new NonIterableChange.SimplePermutationChange<>(0, size(), perm, this));\n+        sort(null);\n@@ -247,1 +242,4 @@\n-        int[] perm = getSortHelper().sort(backingList, comparator);\n+\n+        @SuppressWarnings(\"unchecked\")\n+        int[] perm = comparator == null ? getSortHelper().sort((List<? extends Comparable<Object>>) backingList)\n+                : getSortHelper().sort(backingList, comparator);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableSequentialListWrapper.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -206,2 +206,2 @@\n-    public Iterator iterator() {\n-        return new Iterator<E>() {\n+    public Iterator<E> iterator() {\n+        return new Iterator<>() {\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableSetWrapper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.Objects;\n@@ -44,0 +45,7 @@\n+    \/**\n+     * Sorts the given list in its natural order.\n+     *\n+     * @param <T> the element type\n+     * @param list a list to sort, cannot be {@code null}\n+     * @return an array with the permutations performed, never {@code null}\n+     *\/\n@@ -45,0 +53,1 @@\n+        @SuppressWarnings(\"unchecked\")\n@@ -61,0 +70,8 @@\n+    \/**\n+     * Sorts the given list according to the given comparator.\n+     *\n+     * @param <T> the element type\n+     * @param list a list to sort, cannot be {@code null}\n+     * @param c a comparator to use, cannot be {@code null}\n+     * @return an array with the permutations performed, never {@code null}\n+     *\/\n@@ -62,3 +79,4 @@\n-        Object[] a = list.toArray();\n-        int[] result = sort(a, (Comparator)c);\n-        ListIterator i = list.listIterator();\n+        @SuppressWarnings(\"unchecked\")\n+        T[] a = (T[]) list.toArray();\n+        int[] result = sort(a, c);\n+        ListIterator<T> i = list.listIterator();\n@@ -72,18 +90,14 @@\n-    public <T extends Comparable<? super T>> int[] sort(T[] a) {\n-        return sort(a, null);\n-    }\n-\n-    public <T> int[] sort(T[] a, Comparator<? super T> c) {\n-        T[] aux = a.clone();\n-        int[] result = initPermutation(a.length);\n-        if (c==null)\n-            mergeSort(aux, a, 0, a.length, 0);\n-        else\n-            mergeSort(aux, a, 0, a.length, 0, c);\n-        reversePermutation = null;\n-        permutation = null;\n-        return result;\n-    }\n-\n-    public <T> int[] sort(T[] a, int fromIndex, int toIndex,\n-                Comparator<? super T> c) {\n+    \/**\n+     * Sorts the given array according to the given comparator.\n+     *\n+     * @param <T> the element type\n+     * @param a an array, cannot be {@code null}\n+     * @param fromIndex index of first element to sort, cannot be negative or larger than {@code toIndex}\n+     * @param toIndex index of last element to sort (exclusive), cannot be larger than the length of the array\n+     * @param c a comparator to use, cannot be {@code null}\n+     * @return an array with the permutations performed, never {@code null}\n+     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n+     * @throws ArrayIndexOutOfBoundsException\n+     *     if {@code fromIndex < 0} or {@code toIndex > a.length}\n+     *\/\n+    public <T> int[] sort(T[] a, int fromIndex, int toIndex, Comparator<? super T> c) {\n@@ -93,4 +107,1 @@\n-        if (c==null)\n-            mergeSort(aux, a, fromIndex, toIndex, -fromIndex);\n-        else\n-            mergeSort(aux, a, fromIndex, toIndex, -fromIndex, c);\n+        mergeSort(aux, a, fromIndex, toIndex, -fromIndex, Objects.requireNonNull(c, \"c\"));\n@@ -102,0 +113,11 @@\n+    \/**\n+     * Sorts the given integers.\n+     *\n+     * @param a an int array, cannot be {@code null}\n+     * @param fromIndex index of first element to sort, cannot be negative or larger than {@code toIndex}\n+     * @param toIndex index of last element to sort (exclusive), cannot be larger than the length of the array\n+     * @return an array with the permutations performed, never {@code null}\n+     * @throws IllegalArgumentException if {@code fromIndex > toIndex}\n+     * @throws ArrayIndexOutOfBoundsException\n+     *     if {@code fromIndex < 0} or {@code toIndex > a.length}\n+     *\/\n@@ -112,0 +134,13 @@\n+    private <T extends Comparable<? super T>> int[] sort(T[] a) {\n+        return sort(a, Comparator.naturalOrder());\n+    }\n+\n+    private <T> int[] sort(T[] a, Comparator<? super T> c) {\n+        T[] aux = a.clone();\n+        int[] result = initPermutation(a.length);\n+        mergeSort(aux, a, 0, a.length, 0, Objects.requireNonNull(c));\n+        reversePermutation = null;\n+        permutation = null;\n+        return result;\n+    }\n+\n@@ -141,0 +176,2 @@\n+\n+        @SuppressWarnings(\"unchecked\")\n@@ -161,3 +198,2 @@\n-            for (int i=low; i<high; i++)\n-                for (int j=i; j>low &&\n-                     ((Comparable) dest[j-1]).compareTo(dest[j])>0; j--)\n+            for (int i = low; i < high; i++)\n+                for (int j = i; j > low && Integer.compare(dest[j - 1], dest[j]) > 0; j--)\n@@ -179,1 +215,1 @@\n-        if (((Comparable)src[mid-1]).compareTo(src[mid]) <= 0) {\n+        if (Integer.compare(src[mid - 1], src[mid]) <= 0) {\n@@ -186,1 +222,1 @@\n-            if (q >= high || p < mid && ((Comparable)src[p]).compareTo(src[q])<=0) {\n+            if (q >= high || p < mid && Integer.compare(src[p], src[q]) <= 0) {\n@@ -203,50 +239,2 @@\n-    private void mergeSort(Object[] src,\n-                  Object[] dest,\n-                  int low,\n-                  int high,\n-                  int off) {\n-        int length = high - low;\n-\n-        \/\/ Insertion sort on smallest arrays\n-        if (length < INSERTIONSORT_THRESHOLD) {\n-            for (int i=low; i<high; i++)\n-                for (int j=i; j>low &&\n-                     ((Comparable) dest[j-1]).compareTo(dest[j])>0; j--)\n-                    swap(dest, j, j-1);\n-            return;\n-        }\n-\n-        \/\/ Recursively sort halves of dest into src\n-        int destLow  = low;\n-        int destHigh = high;\n-        low  += off;\n-        high += off;\n-        int mid = (low + high) >>> 1;\n-        mergeSort(dest, src, low, mid, -off);\n-        mergeSort(dest, src, mid, high, -off);\n-\n-        \/\/ If list is already sorted, just copy from src to dest.  This is an\n-        \/\/ optimization that results in faster sorts for nearly ordered lists.\n-        if (((Comparable)src[mid-1]).compareTo(src[mid]) <= 0) {\n-            System.arraycopy(src, low, dest, destLow, length);\n-            return;\n-        }\n-\n-        \/\/ Merge sorted halves (now in src) into dest\n-        for(int i = destLow, p = low, q = mid; i < destHigh; i++) {\n-            if (q >= high || p < mid && ((Comparable)src[p]).compareTo(src[q])<=0) {\n-                dest[i] = src[p];\n-                permutation[reversePermutation[p++]] = i;\n-            } else {\n-                dest[i] = src[q];\n-                permutation[reversePermutation[q++]] = i;\n-            }\n-        }\n-\n-        for (int i = destLow; i < destHigh; ++i) {\n-            reversePermutation[permutation[i]] = i;\n-        }\n-    }\n-\n-    private void mergeSort(Object[] src,\n-                  Object[] dest,\n+    private <T> void mergeSort(T[] src,\n+                  T[] dest,\n@@ -254,1 +242,1 @@\n-                  Comparator c) {\n+                  Comparator<? super T> c) {\n@@ -260,2 +248,2 @@\n-            for (int j=i; j>low && c.compare(dest[j-1], dest[j])>0; j--)\n-                swap(dest, j, j-1);\n+                for (int j=i; j>low && c.compare(dest[j-1], dest[j])>0; j--)\n+                    swap(dest, j, j-1);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/SortHelper.java","additions":71,"deletions":83,"binary":false,"changes":154,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-        onProposedChange(Collections.unmodifiableList(new ArrayList(col)), 0, size());\n+        onProposedChange(Collections.unmodifiableList(new ArrayList<>(col)), 0, size());\n@@ -233,1 +233,1 @@\n-        onProposedChange(Collections.unmodifiableList(new ArrayList(c)), size(), size());\n+        onProposedChange(Collections.unmodifiableList(new ArrayList<>(c)), size(), size());\n@@ -248,1 +248,1 @@\n-        onProposedChange(Collections.unmodifiableList(new ArrayList(c)), index, index);\n+        onProposedChange(Collections.unmodifiableList(new ArrayList<>(c)), index, index);\n@@ -464,1 +464,1 @@\n-            onProposedChange(Collections.unmodifiableList(new ArrayList(c)), offset + size(), offset + size());\n+            onProposedChange(Collections.unmodifiableList(new ArrayList<>(c)), offset + size(), offset + size());\n@@ -480,1 +480,1 @@\n-            onProposedChange(Collections.unmodifiableList(new ArrayList(c)), offset + index, offset + index);\n+            onProposedChange(Collections.unmodifiableList(new ArrayList<>(c)), offset + index, offset + index);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/VetoableListDecorator.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    private static final ObservableList EMPTY_LIST = FXCollections.emptyObservableList();\n+    private static final ObservableList<?> EMPTY_LIST = FXCollections.emptyObservableList();\n@@ -238,1 +238,1 @@\n-        return (list == null)? EMPTY_LIST.iterator() : list.iterator();\n+        return (list == null)? ListExpression.<E>emptyList().iterator() : list.iterator();\n@@ -256,1 +256,1 @@\n-        return (list == null)? EMPTY_LIST.add(element) : list.add(element);\n+        return (list == null)? emptyList().add(element) : list.add(element);\n@@ -274,1 +274,1 @@\n-        return (list == null)? EMPTY_LIST.addAll(elements) : list.addAll(elements);\n+        return (list == null)? emptyList().addAll(elements) : list.addAll(elements);\n@@ -280,1 +280,1 @@\n-        return (list == null)? EMPTY_LIST.addAll(i, elements) : list.addAll(i, elements);\n+        return (list == null)? emptyList().addAll(i, elements) : list.addAll(i, elements);\n@@ -308,1 +308,1 @@\n-        return (list == null)? (E) EMPTY_LIST.get(i) : list.get(i);\n+        return (list == null)? ListExpression.<E>emptyList().get(i) : list.get(i);\n@@ -314,1 +314,1 @@\n-        return (list == null)? (E) EMPTY_LIST.set(i, element) : list.set(i, element);\n+        return (list == null)? ListExpression.<E>emptyList().set(i, element) : list.set(i, element);\n@@ -321,1 +321,1 @@\n-            EMPTY_LIST.add(i, element);\n+            emptyList().add(i, element);\n@@ -330,1 +330,1 @@\n-        return (list == null)? (E) EMPTY_LIST.remove(i) : list.remove(i);\n+        return (list == null)? ListExpression.<E>emptyList().remove(i) : list.remove(i);\n@@ -348,1 +348,1 @@\n-        return (list == null)? EMPTY_LIST.listIterator() : list.listIterator();\n+        return (list == null)? ListExpression.<E>emptyList().listIterator() : list.listIterator();\n@@ -354,1 +354,1 @@\n-        return (list == null)? EMPTY_LIST.listIterator(i) : list.listIterator(i);\n+        return (list == null)? ListExpression.<E>emptyList().listIterator(i) : list.listIterator(i);\n@@ -360,1 +360,1 @@\n-        return (list == null)? EMPTY_LIST.subList(from, to) : list.subList(from, to);\n+        return (list == null)? ListExpression.<E>emptyList().subList(from, to) : list.subList(from, to);\n@@ -366,1 +366,1 @@\n-        return (list == null)? EMPTY_LIST.addAll(elements) : list.addAll(elements);\n+        return (list == null)? emptyList().addAll(elements) : list.addAll(elements);\n@@ -372,1 +372,1 @@\n-        return (list == null)? EMPTY_LIST.setAll(elements) : list.setAll(elements);\n+        return (list == null)? emptyList().setAll(elements) : list.setAll(elements);\n@@ -378,1 +378,1 @@\n-        return (list == null)? EMPTY_LIST.setAll(elements) : list.setAll(elements);\n+        return (list == null)? emptyList().setAll(elements) : list.setAll(elements);\n@@ -384,1 +384,1 @@\n-        return (list == null)? EMPTY_LIST.removeAll(elements) : list.removeAll(elements);\n+        return (list == null)? emptyList().removeAll(elements) : list.removeAll(elements);\n@@ -390,1 +390,1 @@\n-        return (list == null)? EMPTY_LIST.retainAll(elements) : list.retainAll(elements);\n+        return (list == null)? emptyList().retainAll(elements) : list.retainAll(elements);\n@@ -403,0 +403,4 @@\n+    @SuppressWarnings(\"unchecked\")\n+    private static <E> ObservableList<E> emptyList() {\n+        return (ObservableList<E>) EMPTY_LIST;\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/ListExpression.java","additions":21,"deletions":17,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-    private static final ObservableMap EMPTY_MAP = new EmptyObservableMap();\n+    private static final ObservableMap<?, ?> EMPTY_MAP = new EmptyObservableMap<>();\n@@ -270,1 +270,1 @@\n-        return (map == null)? (V) EMPTY_MAP.put(key, value) : map.put(key, value);\n+        return (map == null)? MapExpression.<K, V>emptyMap().put(key, value) : map.put(key, value);\n@@ -276,1 +276,1 @@\n-        return (map == null)? (V) EMPTY_MAP.remove(obj) : map.remove(obj);\n+        return (map == null)? MapExpression.<K, V>emptyMap().remove(obj) : map.remove(obj);\n@@ -283,1 +283,1 @@\n-            EMPTY_MAP.putAll(elements);\n+            emptyMap().putAll(elements);\n@@ -302,1 +302,1 @@\n-        return (map == null)? EMPTY_MAP.keySet() : map.keySet();\n+        return (map == null)? MapExpression.<K, V>emptyMap().keySet() : map.keySet();\n@@ -308,1 +308,1 @@\n-        return (map == null)? EMPTY_MAP.values() : map.values();\n+        return (map == null)? MapExpression.<K, V>emptyMap().values() : map.values();\n@@ -314,1 +314,1 @@\n-        return (map == null)? EMPTY_MAP.entrySet() : map.entrySet();\n+        return (map == null)? MapExpression.<K, V>emptyMap().entrySet() : map.entrySet();\n@@ -320,1 +320,1 @@\n-        return (map == null)? (V) EMPTY_MAP.get(key) : map.get(key);\n+        return (map == null)? MapExpression.<K, V>emptyMap().get(key) : map.get(key);\n@@ -323,0 +323,4 @@\n+    @SuppressWarnings(\"unchecked\")\n+    private static <K, V> ObservableMap<K, V> emptyMap() {\n+        return (ObservableMap<K, V>) EMPTY_MAP;\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/MapExpression.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    private static final ObservableSet EMPTY_SET = new EmptyObservableSet();\n+    private static final ObservableSet<?> EMPTY_SET = new EmptyObservableSet<>();\n@@ -70,1 +70,1 @@\n-        private static final Iterator iterator = new Iterator() {\n+        private static final Iterator<?> iterator = new Iterator<>() {\n@@ -88,0 +88,1 @@\n+        @SuppressWarnings(\"unchecked\")\n@@ -90,1 +91,1 @@\n-            return iterator;\n+            return (Iterator<E>) iterator;\n@@ -266,1 +267,1 @@\n-        return (set == null)? EMPTY_SET.iterator() : set.iterator();\n+        return (set == null)? SetExpression.<E>emptySet().iterator() : set.iterator();\n@@ -284,1 +285,1 @@\n-        return (set == null)? EMPTY_SET.add(element) : set.add(element);\n+        return (set == null)? emptySet().add(element) : set.add(element);\n@@ -302,1 +303,1 @@\n-        return (set == null)? EMPTY_SET.addAll(elements) : set.addAll(elements);\n+        return (set == null)? emptySet().addAll(elements) : set.addAll(elements);\n@@ -327,0 +328,4 @@\n+    @SuppressWarnings(\"unchecked\")\n+    private static <E> ObservableSet<E> emptySet() {\n+        return (ObservableSet<E>) EMPTY_SET;\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/SetExpression.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-    private static ObservableMap EMPTY_OBSERVABLE_MAP = new EmptyObservableMap();\n+    private static ObservableMap<?, ?> EMPTY_OBSERVABLE_MAP = new EmptyObservableMap<>();\n@@ -247,1 +247,1 @@\n-        return EMPTY_OBSERVABLE_MAP;\n+        return (ObservableMap<K, V>) EMPTY_OBSERVABLE_MAP;\n@@ -316,1 +316,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -318,1 +317,1 @@\n-        return observableList(new ArrayList());\n+        return observableList(new ArrayList<>());\n@@ -338,1 +337,1 @@\n-        return observableList(new ArrayList(), extractor);\n+        return observableList(new ArrayList<>(), extractor);\n@@ -438,1 +437,1 @@\n-    private static ObservableList EMPTY_OBSERVABLE_LIST = new EmptyObservableList();\n+    private static ObservableList<?> EMPTY_OBSERVABLE_LIST = new EmptyObservableList<>();\n@@ -448,2 +447,2 @@\n-    public static<E> ObservableList<E> emptyObservableList() {\n-        return EMPTY_OBSERVABLE_LIST;\n+    public static <E> ObservableList<E> emptyObservableList() {\n+        return (ObservableList<E>) EMPTY_OBSERVABLE_LIST;\n@@ -509,1 +508,1 @@\n-    private static ObservableSet EMPTY_OBSERVABLE_SET = new EmptyObservableSet();\n+    private static ObservableSet<?> EMPTY_OBSERVABLE_SET = new EmptyObservableSet<>();\n@@ -519,2 +518,2 @@\n-    public static<E> ObservableSet<E> emptyObservableSet() {\n-        return EMPTY_OBSERVABLE_SET;\n+    public static <E> ObservableSet<E> emptyObservableSet() {\n+        return (ObservableSet<E>) EMPTY_OBSERVABLE_SET;\n@@ -710,1 +709,1 @@\n-        private static final ListIterator iterator = new ListIterator() {\n+        private static final ListIterator<Object> iterator = new ListIterator<>() {\n@@ -791,1 +790,1 @@\n-            return iterator;\n+            return (Iterator<E>) iterator;\n@@ -817,1 +816,1 @@\n-            return iterator;\n+            return (ListIterator<E>) iterator;\n@@ -826,1 +825,1 @@\n-            return iterator;\n+            return (ListIterator<E>) iterator;\n@@ -1203,1 +1202,1 @@\n-        private ListListenerHelper helper;\n+        private ListListenerHelper<T> helper;\n@@ -1641,1 +1640,1 @@\n-            return new Iterator() {\n+            return new Iterator<>() {\n@@ -1649,1 +1648,1 @@\n-                public Object next() {\n+                public E next() {\n@@ -1895,1 +1894,1 @@\n-        private SetListenerHelper listenerHelper;\n+        private SetListenerHelper<E> listenerHelper;\n@@ -1939,1 +1938,1 @@\n-        private SetListenerHelper listenerHelper;\n+        private SetListenerHelper<E> listenerHelper;\n@@ -2166,1 +2165,1 @@\n-        private MapListenerHelper listenerHelper;\n+        private MapListenerHelper<K, V> listenerHelper;\n@@ -2255,1 +2254,1 @@\n-        public void putAll(Map t) {\n+        public void putAll(Map<? extends K, ? extends V> t) {\n@@ -2294,1 +2293,1 @@\n-        public Set entrySet() {\n+        public Set<Entry<K, V>> entrySet() {\n@@ -2781,1 +2780,1 @@\n-        private MapListenerHelper listenerHelper;\n+        private MapListenerHelper<K, V> listenerHelper;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/FXCollections.java","additions":23,"deletions":24,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -640,1 +640,1 @@\n-        private SubChange[] changes;\n+        private SubChange<E>[] changes;\n@@ -643,1 +643,1 @@\n-        private IterableChange(SubChange[] changes, ObservableList<E> list) {\n+        private IterableChange(SubChange<E>[] changes, ObservableList<E> list) {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/ListChangeBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-        Comparator naturalOrder = new Comparator<E>() {\n+        Comparator<E> naturalOrder = new Comparator<>() {\n@@ -152,1 +152,4 @@\n-                    return ((Comparable) o1).compareTo(o2);\n+                    @SuppressWarnings(\"unchecked\")\n+                    Comparable<E> casted = (Comparable<E>) o1;  \/\/ cast is not safe, assumes the comparable interface implemented is Comparable<E> but it might be anything\n+\n+                    return casted.compareTo(o2);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/ObservableList.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    private static final Predicate ALWAYS_TRUE = t -> true;\n+    private static final Predicate<?> ALWAYS_TRUE = t -> true;\n@@ -128,0 +128,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -132,1 +133,1 @@\n-        return ALWAYS_TRUE;\n+        return (Predicate<E>) ALWAYS_TRUE;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/transformation\/FilteredList.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-        this(source, (Comparator)null);\n+        this(source, null);\n@@ -243,1 +243,1 @@\n-                Element[] sortedTmp = new Element[sorted.length];\n+                Element<E>[] sortedTmp = new Element[sorted.length];\n@@ -356,1 +356,1 @@\n-        int[] perm = helper.sort(sorted, 0, size, elementComparator);\n+        int[] perm = helper.sort(sorted, 0, size, elementComparator);  \/\/ elementComparator is never null here\n@@ -373,1 +373,1 @@\n-        List<E> removed = new ArrayList(this);\n+        List<E> removed = new ArrayList<>(this);\n@@ -382,1 +382,1 @@\n-        int[] perm = helper.sort(sorted, 0, size, elementComparator);\n+        int[] perm = helper.sort(sorted, 0, size, elementComparator);  \/\/ elementComparator is never null here\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/transformation\/SortedList.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-            currentSource = ((TransformationList)currentSource).source;\n+            currentSource = ((TransformationList<?, ?>)currentSource).source;\n@@ -143,1 +143,1 @@\n-            final TransformationList tSource = (TransformationList)currentSource;\n+            final TransformationList<?, ?> tSource = (TransformationList<?, ?>) currentSource;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/transformation\/TransformationList.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3034,1 +3034,1 @@\n-            selectedCellsSeq.callObservers(new MappingChange<>(c, MappingChange.NOOP_MAP, selectedCellsSeq));\n+            selectedCellsSeq.callObservers(new MappingChange<>(c, MappingChange.noOpMap(), selectedCellsSeq));\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableView.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3387,1 +3387,1 @@\n-            selectedCellsSeq.callObservers(new MappingChange<>(c, MappingChange.NOOP_MAP, selectedCellsSeq));\n+            selectedCellsSeq.callObservers(new MappingChange<>(c, MappingChange.noOpMap(), selectedCellsSeq));\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableView.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}