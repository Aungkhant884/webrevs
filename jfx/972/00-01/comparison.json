{"files":[{"patch":"@@ -58,2 +58,0 @@\n-    private static final ObservableList<?> EMPTY_LIST = FXCollections.emptyObservableList();\n-\n@@ -219,2 +217,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.size() : list.size();\n+        return getNonNull().size();\n@@ -225,2 +222,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.isEmpty() : list.isEmpty();\n+        return getNonNull().isEmpty();\n@@ -231,2 +227,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.contains(obj) : list.contains(obj);\n+        return getNonNull().contains(obj);\n@@ -237,2 +232,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? ListExpression.<E>emptyList().iterator() : list.iterator();\n+        return getNonNull().iterator();\n@@ -243,2 +237,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.toArray() : list.toArray();\n+        return getNonNull().toArray();\n@@ -249,2 +242,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? (T[]) EMPTY_LIST.toArray(array) : list.toArray(array);\n+        return getNonNull().toArray(array);\n@@ -255,2 +247,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? emptyList().add(element) : list.add(element);\n+        return getNonNull().add(element);\n@@ -261,2 +252,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.remove(obj) : list.remove(obj);\n+        return getNonNull().remove(obj);\n@@ -267,2 +257,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.contains(objects) : list.containsAll(objects);\n+        return getNonNull().containsAll(objects);\n@@ -273,2 +262,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? emptyList().addAll(elements) : list.addAll(elements);\n+        return getNonNull().addAll(elements);\n@@ -279,2 +267,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? emptyList().addAll(i, elements) : list.addAll(i, elements);\n+        return getNonNull().addAll(i, elements);\n@@ -285,2 +272,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.removeAll(objects) : list.removeAll(objects);\n+        return getNonNull().removeAll(objects);\n@@ -291,2 +277,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.retainAll(objects) : list.retainAll(objects);\n+        return getNonNull().retainAll(objects);\n@@ -297,6 +282,1 @@\n-        final ObservableList<E> list = get();\n-        if (list == null) {\n-            EMPTY_LIST.clear();\n-        } else {\n-            list.clear();\n-        }\n+        getNonNull().clear();\n@@ -307,2 +287,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? ListExpression.<E>emptyList().get(i) : list.get(i);\n+        return getNonNull().get(i);\n@@ -313,2 +292,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? ListExpression.<E>emptyList().set(i, element) : list.set(i, element);\n+        return getNonNull().set(i, element);\n@@ -319,6 +297,1 @@\n-        final ObservableList<E> list = get();\n-        if (list == null) {\n-            emptyList().add(i, element);\n-        } else {\n-            list.add(i, element);\n-        }\n+        getNonNull().add(i, element);\n@@ -329,2 +302,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? ListExpression.<E>emptyList().remove(i) : list.remove(i);\n+        return getNonNull().remove(i);\n@@ -335,2 +307,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.indexOf(obj) : list.indexOf(obj);\n+        return getNonNull().indexOf(obj);\n@@ -341,2 +312,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? EMPTY_LIST.lastIndexOf(obj) : list.lastIndexOf(obj);\n+        return getNonNull().lastIndexOf(obj);\n@@ -347,2 +317,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? ListExpression.<E>emptyList().listIterator() : list.listIterator();\n+        return getNonNull().listIterator();\n@@ -353,2 +322,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? ListExpression.<E>emptyList().listIterator(i) : list.listIterator(i);\n+        return getNonNull().listIterator(i);\n@@ -359,2 +327,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? ListExpression.<E>emptyList().subList(from, to) : list.subList(from, to);\n+        return getNonNull().subList(from, to);\n@@ -365,2 +332,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? emptyList().addAll(elements) : list.addAll(elements);\n+        return getNonNull().addAll(elements);\n@@ -371,2 +337,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? emptyList().setAll(elements) : list.setAll(elements);\n+        return getNonNull().setAll(elements);\n@@ -377,2 +342,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? emptyList().setAll(elements) : list.setAll(elements);\n+        return getNonNull().setAll(elements);\n@@ -383,2 +347,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? emptyList().removeAll(elements) : list.removeAll(elements);\n+        return getNonNull().removeAll(elements);\n@@ -389,2 +352,1 @@\n-        final ObservableList<E> list = get();\n-        return (list == null)? emptyList().retainAll(elements) : list.retainAll(elements);\n+        return getNonNull().retainAll(elements);\n@@ -395,6 +357,1 @@\n-        final ObservableList<E> list = get();\n-        if (list == null) {\n-            EMPTY_LIST.remove(from, to);\n-        } else {\n-            list.remove(from, to);\n-        }\n+        getNonNull().remove(from, to);\n@@ -403,3 +360,4 @@\n-    @SuppressWarnings(\"unchecked\")\n-    private static <E> ObservableList<E> emptyList() {\n-        return (ObservableList<E>) EMPTY_LIST;\n+    private ObservableList<E> getNonNull() {\n+        ObservableList<E> list = get();\n+\n+        return list == null ? FXCollections.emptyObservableList() : list;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/ListExpression.java","additions":33,"deletions":75,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import javafx.beans.InvalidationListener;\n@@ -35,1 +34,0 @@\n-import javafx.collections.MapChangeListener;\n@@ -59,30 +57,0 @@\n-    private static final ObservableMap<?, ?> EMPTY_MAP = new EmptyObservableMap<>();\n-\n-    private static class EmptyObservableMap<K, V> extends AbstractMap<K, V> implements ObservableMap<K, V> {\n-\n-        @Override\n-        public Set<Entry<K, V>> entrySet() {\n-            return Collections.emptySet();\n-        }\n-\n-        @Override\n-        public void addListener(MapChangeListener<? super K, ? super V> mapChangeListener) {\n-            \/\/ no-op\n-        }\n-\n-        @Override\n-        public void removeListener(MapChangeListener<? super K, ? super V> mapChangeListener) {\n-            \/\/ no-op\n-        }\n-\n-        @Override\n-        public void addListener(InvalidationListener listener) {\n-            \/\/ no-op\n-        }\n-\n-        @Override\n-        public void removeListener(InvalidationListener listener) {\n-            \/\/ no-op\n-        }\n-    }\n-\n@@ -245,2 +213,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? EMPTY_MAP.size() : map.size();\n+        return getNonNull().size();\n@@ -251,2 +218,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? EMPTY_MAP.isEmpty() : map.isEmpty();\n+        return getNonNull().isEmpty();\n@@ -257,2 +223,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? EMPTY_MAP.containsKey(obj) : map.containsKey(obj);\n+        return getNonNull().containsKey(obj);\n@@ -263,2 +228,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? EMPTY_MAP.containsValue(obj) : map.containsValue(obj);\n+        return getNonNull().containsValue(obj);\n@@ -269,2 +233,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? MapExpression.<K, V>emptyMap().put(key, value) : map.put(key, value);\n+        return getNonNull().put(key, value);\n@@ -275,2 +238,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? MapExpression.<K, V>emptyMap().remove(obj) : map.remove(obj);\n+        return getNonNull().remove(obj);\n@@ -281,6 +243,1 @@\n-        final ObservableMap<K, V> map = get();\n-        if (map == null) {\n-            emptyMap().putAll(elements);\n-        } else {\n-            map.putAll(elements);\n-        }\n+        getNonNull().putAll(elements);\n@@ -291,6 +248,1 @@\n-        final ObservableMap<K, V> map = get();\n-        if (map == null) {\n-            EMPTY_MAP.clear();\n-        } else {\n-            map.clear();\n-        }\n+        getNonNull().clear();\n@@ -301,2 +253,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? MapExpression.<K, V>emptyMap().keySet() : map.keySet();\n+        return getNonNull().keySet();\n@@ -307,2 +258,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? MapExpression.<K, V>emptyMap().values() : map.values();\n+        return getNonNull().values();\n@@ -313,2 +263,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? MapExpression.<K, V>emptyMap().entrySet() : map.entrySet();\n+        return getNonNull().entrySet();\n@@ -319,2 +268,1 @@\n-        final ObservableMap<K, V> map = get();\n-        return (map == null)? MapExpression.<K, V>emptyMap().get(key) : map.get(key);\n+        return getNonNull().get(key);\n@@ -323,3 +271,4 @@\n-    @SuppressWarnings(\"unchecked\")\n-    private static <K, V> ObservableMap<K, V> emptyMap() {\n-        return (ObservableMap<K, V>) EMPTY_MAP;\n+    private ObservableMap<K, V> getNonNull() {\n+        ObservableMap<K, V> map = get();\n+\n+        return map == null ? FXCollections.emptyObservableMap() : map;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/MapExpression.java","additions":16,"deletions":67,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import javafx.beans.InvalidationListener;\n@@ -36,1 +35,0 @@\n-import javafx.collections.SetChangeListener;\n@@ -38,1 +36,0 @@\n-import java.util.AbstractSet;\n@@ -41,1 +38,0 @@\n-import java.util.NoSuchElementException;\n@@ -66,54 +62,0 @@\n-    private static final ObservableSet<?> EMPTY_SET = new EmptyObservableSet<>();\n-\n-    private static class EmptyObservableSet<E> extends AbstractSet<E> implements ObservableSet<E> {\n-\n-        private static final Iterator<?> iterator = new Iterator<>() {\n-            @Override\n-            public boolean hasNext() {\n-                return false;\n-            }\n-\n-            @Override\n-            public Object next() {\n-                throw new NoSuchElementException();\n-            }\n-\n-            @Override\n-            public void remove() {\n-                throw new UnsupportedOperationException();\n-\n-            }\n-        };\n-\n-        @SuppressWarnings(\"unchecked\")\n-        @Override\n-        public Iterator<E> iterator() {\n-            return (Iterator<E>) iterator;\n-        }\n-\n-        @Override\n-        public int size() {\n-            return 0;\n-        }\n-\n-        @Override\n-        public void addListener(SetChangeListener<? super E> setChangeListener) {\n-            \/\/ no-op\n-        }\n-\n-        @Override\n-        public void removeListener(SetChangeListener<? super E> setChangeListener) {\n-            \/\/ no-op\n-        }\n-\n-        @Override\n-        public void addListener(InvalidationListener listener) {\n-            \/\/ no-op\n-        }\n-\n-        @Override\n-        public void removeListener(InvalidationListener listener) {\n-            \/\/ no-op\n-        }\n-    }\n-\n@@ -248,2 +190,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? EMPTY_SET.size() : set.size();\n+        return getNonNull().size();\n@@ -254,2 +195,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? EMPTY_SET.isEmpty() : set.isEmpty();\n+        return getNonNull().isEmpty();\n@@ -260,2 +200,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? EMPTY_SET.contains(obj) : set.contains(obj);\n+        return getNonNull().contains(obj);\n@@ -266,2 +205,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? SetExpression.<E>emptySet().iterator() : set.iterator();\n+        return getNonNull().iterator();\n@@ -272,2 +210,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? EMPTY_SET.toArray() : set.toArray();\n+        return getNonNull().toArray();\n@@ -278,2 +215,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? (T[]) EMPTY_SET.toArray(array) : set.toArray(array);\n+        return getNonNull().toArray(array);\n@@ -284,2 +220,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? emptySet().add(element) : set.add(element);\n+        return getNonNull().add(element);\n@@ -290,2 +225,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? EMPTY_SET.remove(obj) : set.remove(obj);\n+        return getNonNull().remove(obj);\n@@ -296,2 +230,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? EMPTY_SET.contains(objects) : set.containsAll(objects);\n+        return getNonNull().containsAll(objects);\n@@ -302,2 +235,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? emptySet().addAll(elements) : set.addAll(elements);\n+        return getNonNull().addAll(elements);\n@@ -308,2 +240,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? EMPTY_SET.removeAll(objects) : set.removeAll(objects);\n+        return getNonNull().removeAll(objects);\n@@ -314,2 +245,1 @@\n-        final ObservableSet<E> set = get();\n-        return (set == null)? EMPTY_SET.retainAll(objects) : set.retainAll(objects);\n+        return getNonNull().retainAll(objects);\n@@ -320,6 +250,1 @@\n-        final ObservableSet<E> set = get();\n-        if (set == null) {\n-            EMPTY_SET.clear();\n-        } else {\n-            set.clear();\n-        }\n+        getNonNull().clear();\n@@ -328,3 +253,4 @@\n-    @SuppressWarnings(\"unchecked\")\n-    private static <E> ObservableSet<E> emptySet() {\n-        return (ObservableSet<E>) EMPTY_SET;\n+    private ObservableSet<E> getNonNull() {\n+        ObservableSet<E> set = get();\n+\n+        return set == null ? FXCollections.emptyObservableSet() : set;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/SetExpression.java","additions":17,"deletions":91,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -677,1 +677,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -679,2 +678,2 @@\n-        if (list instanceof SortableList) {\n-            ((SortableList<? extends T>)list).sort();\n+        if (list instanceof SortableList<?> sortableList) {\n+            sortableList.sort();\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/FXCollections.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -93,2 +93,2 @@\n-        while(currentSource instanceof TransformationList) {\n-            currentSource = ((TransformationList<?, ?>)currentSource).source;\n+        while (currentSource instanceof TransformationList<?, ?> transformationList) {\n+            currentSource = transformationList.source;\n@@ -142,2 +142,1 @@\n-        while(currentSource != list && currentSource instanceof TransformationList) {\n-            final TransformationList<?, ?> tSource = (TransformationList<?, ?>) currentSource;\n+        while (currentSource != list && currentSource instanceof TransformationList<?, ?> tSource) {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/transformation\/TransformationList.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}