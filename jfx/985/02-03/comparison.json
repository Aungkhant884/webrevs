{"files":[{"patch":"@@ -134,2 +134,2 @@\n-             * JDK-8173321: Click on trough has no effect when cell height > viewport height:\n-             * Solution: Scroll one cell further up resp. down if only one cell is shown.\n+             * Scroll one cell further in the direction the user has clicked if only one cell is shown.\n+             * Otherwise, a click on the trough would have no effect when cell height > viewport height.\n@@ -150,1 +150,1 @@\n-                    if (cell == null)\n+                    if (cell == null) {\n@@ -152,0 +152,1 @@\n+                    }\n@@ -155,1 +156,1 @@\n-                    if (cell == null)\n+                    if (cell == null) {\n@@ -157,0 +158,1 @@\n+                    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/VirtualScrollBar.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1606,0 +1606,1 @@\n+        int oldIndex = computeCurrentIndex();\n@@ -1616,0 +1617,1 @@\n+        getCellSizesInExpectedViewport(oldIndex);\n@@ -2316,1 +2318,1 @@\n-     * visible content to be modified.\n+     * visible content to be modified. The existing offset and index are respected.\n@@ -2321,1 +2323,10 @@\n-        double estlength = getOrCreateCellSize(index);\n+        double oldOffset = computeViewportOffset(getPosition());\n+        int oldIndex = computeCurrentIndex();\n+        double cellLength = getOrCreateCellSize(index);\n+        if (index > 0) {\n+            getOrCreateCellSize(index - 1);\n+        }\n+        if (index < getCellCount() - 1) {\n+            getOrCreateCellSize(index + 1);\n+        }\n+        double estlength = cellLength;\n@@ -2326,0 +2337,1 @@\n+        estlength = cellLength;\n@@ -2332,1 +2344,1 @@\n-        recalculateEstimatedSize();\n+        recalculateAndImproveEstimatedSize(0, oldIndex, oldOffset);\n@@ -2918,0 +2930,1 @@\n+\n@@ -3054,2 +3067,9 @@\n-     * new size.\n-     * @param cell\n+     * new size. The total size of the flow will be recalculated, respecting the\n+     * current index and offset.\n+     * If the specific cell is the \"current\" cell (which is the first cell that is\n+     * at least partially visible), the offset used for the viewport needs to be\n+     * recalculated in case the new size is different from the cached size. This way,\n+     * we keep the end of the current cell (and start of the cell at current + 1)\n+     * constant. An exception to this is when the current cell starts at offset 0,\n+     * in which case we keep the (0) offset as is.\n+     * @param cell the cell which size has to be calculated\n@@ -3059,0 +3079,4 @@\n+        int currentIndex = computeCurrentIndex();\n+        double oldOffset = computeViewportOffset(getPosition());\n+\n+\n@@ -3060,7 +3084,6 @@\n-        if (isVertical()) {\n-            double newh = cell.getLayoutBounds().getHeight();\n-            itemSizeCache.set(cellIndex, newh);\n-          } else {\n-            double newh = cell.getLayoutBounds().getWidth();\n-            itemSizeCache.set(cellIndex, newh);\n-          }\n+            Double oldSize = itemSizeCache.get(cellIndex);\n+            double newSize = isVertical() ? cell.getLayoutBounds().getHeight() : cell.getLayoutBounds().getWidth();\n+            itemSizeCache.set(cellIndex, newSize);\n+            if ((cellIndex == currentIndex) && (oldSize != null) && (oldOffset != 0)) {\n+                oldOffset = oldOffset + newSize - oldSize;\n+            }\n@@ -3068,0 +3091,1 @@\n+        recalculateAndImproveEstimatedSize(0, currentIndex, oldOffset);\n@@ -3081,0 +3105,10 @@\n+        recalculateAndImproveEstimatedSize(improve, -1, computeViewportOffset(getPosition()));\n+    }\n+\n+    \/**\n+     * Recalculate the estimated size. If an oldIndex different from  -1 is supplied, that value will\n+     * be respected:\n+     * at the end of this calculation, we make sure that if the current index is calculated, it will\n+     * be the same as the old index. If the oldIndex is -1, there is no guarantee about the new index.\n+     *\/\n+    private void recalculateAndImproveEstimatedSize(int improve, int oldIndex, double oldOffset) {\n@@ -3088,2 +3122,1 @@\n-            int oldIndex = computeCurrentIndex();\n-            double oldOffset = computeViewportOffset(getPosition());\n+            if (oldIndex < 0) oldIndex = computeCurrentIndex();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/VirtualFlow.java","additions":47,"deletions":14,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,2 +85,0 @@\n-        StackPane trackBackground = (StackPane) verticalBar.getChildrenUnmodifiable().stream()\n-                .filter(c -> c.getStyleClass().contains(\"track-background\")).findFirst().orElse(null);\n@@ -90,2 +88,4 @@\n-        \/\/ set posY to point into the middle of the area of the verticalBar under the thumb.\n-        double posY = verticalBarBoundsInScreen.getMaxY() - ((verticalBarBoundsInScreen.getMaxY()-thumbBoundsInScreen.getMaxY())\/2.0);\n+        \/\/ set posY to point into the middle of the area of the verticalBar under the\n+        \/\/ thumb.\n+        double posY = verticalBarBoundsInScreen.getMaxY()\n+                - ((verticalBarBoundsInScreen.getMaxY() - thumbBoundsInScreen.getMaxY()) \/ 2.0);\n@@ -94,9 +94,1 @@\n-        \/\/ Wait a second for the bar to be moved\n-        try {\n-            Thread.sleep(1000);\n-        } catch (InterruptedException e1) {\n-            e1.printStackTrace();\n-        }\n-        double tableRowHeight = tableRow.getHeight();\n-        CountDownLatch latch = new CountDownLatch(1);\n-        Platform.runLater(() -> {\n+        Util.runAndWait(() -> {\n@@ -106,1 +98,0 @@\n-            latch.countDown();\n@@ -108,6 +99,1 @@\n-        Util.waitForLatch(latch, 5, \"Timeout while waiting for mouse click\");\n-        try {\n-            Thread.sleep(1000); \/\/ Delay for table moving Scrollbar\n-        } catch (Exception e) {\n-            Assert.fail(\"Thread was interrupted.\" + e);\n-        }\n+        Util.sleep(1000); \/\/ Delay for table moving Scrollbar\n@@ -115,5 +101,0 @@\n-        try {\n-            Thread.sleep(1000);\n-        } catch (InterruptedException e1) {\n-            e1.printStackTrace();\n-        }\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/tableview\/TableViewClickOnTroughTest.java","additions":7,"deletions":26,"binary":false,"changes":33,"status":"modified"}]}