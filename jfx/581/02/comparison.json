{"files":[{"patch":"@@ -900,1 +900,6 @@\n-        if (!enabled) {\n+        if (enabled) {\n+            \/\/ Check if window is really enabled - to handle nested case\n+            if (platformWindow != null && platformWindow.isEnabled()) {\n+                requestToFront();\n+            }\n+        } else {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/WindowStage.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.stage;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Stage;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import test.util.Util;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public class WrongStageFocusWithApplicationModalityTest {\n+    private static Robot robot;\n+    private static Stage stage;\n+    private static Alert alert;\n+    private static CountDownLatch startupLatch = new CountDownLatch(4);\n+    private static CountDownLatch alertCloseLatch = new CountDownLatch(3);\n+\n+    @BeforeClass\n+    public static void initFX() throws Exception {\n+        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n+        waitForLatch(startupLatch, 15, \"FX runtime failed to start.\");\n+    }\n+\n+    @Test(timeout = 25000)\n+    public void testWindowFocusByClosingAlerts() throws Exception {\n+        Thread.sleep(3000);\n+        mouseClick();\n+        Thread.sleep(1000);\n+        keyPress(KeyCode.ESCAPE);\n+        Thread.sleep(500);\n+        keyPress(KeyCode.ESCAPE);\n+        Thread.sleep(500);\n+        keyPress(KeyCode.ESCAPE);\n+        Thread.sleep(500);\n+        waitForLatch(alertCloseLatch, 10, \"Alerts not closed, wrong focus\");\n+    }\n+\n+    @AfterClass\n+    public static void exit() {\n+        Platform.runLater(() -> {\n+            stage.hide();\n+        });\n+        Platform.exit();\n+    }\n+\n+    private static void waitForLatch(CountDownLatch latch, int seconds, String msg) throws Exception {\n+        Assert.assertTrue(\"Timeout: \" + msg, latch.await(seconds, TimeUnit.SECONDS));\n+    }\n+\n+    private static void keyPress(KeyCode code) throws Exception {\n+        Util.runAndWait(() -> {\n+            robot.keyPress(code);\n+            robot.keyRelease(code);\n+        });\n+    }\n+\n+    private static void mouseClick() {\n+        Util.runAndWait(() -> {\n+            robot.mouseMove((int) (alert.getX() + alert.getWidth() \/ 2),\n+                    (int) (alert.getY() + alert.getHeight() \/ 2));\n+            Util.sleep(100);\n+            robot.mousePress(MouseButton.PRIMARY);\n+            robot.mouseRelease(MouseButton.PRIMARY);\n+        });\n+    }\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) {\n+            robot = new Robot();\n+            stage = primaryStage;\n+\n+            BorderPane root = new BorderPane();\n+            stage.setScene(new Scene(root, 500, 500));\n+            stage.setOnShown(event -> Platform.runLater(startupLatch::countDown));\n+            stage.setAlwaysOnTop(true);\n+            stage.show();\n+\n+            showAlert(\"Alert 1\");\n+            showAlert(\"Alert 2\");\n+            alert = showAlert(\"Alert 3\");\n+        }\n+\n+        private Alert showAlert(String title) {\n+            Alert alert = new Alert(Alert.AlertType.INFORMATION);\n+            alert.initOwner(stage);\n+            alert.setTitle(title);\n+            alert.setOnShown(event -> Platform.runLater(startupLatch::countDown));\n+            alert.setOnHidden(event -> Platform.runLater(alertCloseLatch::countDown));\n+            alert.show();\n+            return alert;\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/WrongStageFocusWithApplicationModalityTest.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}