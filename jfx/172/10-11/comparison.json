{"files":[{"patch":"@@ -84,3 +84,3 @@\n-                (Supplier<Boolean>) control.getProperties().get(\"editableComboBoxEditor\");\n-        Predicate<KeyEvent> pIsInComboBox = e -> isListViewOfComboBox != null;\n-        Predicate<KeyEvent> pIsInEditableComboBox =\n+                (Supplier<Boolean>) control.getProperties().get(\"editableComboBox\");\n+        Predicate<KeyEvent> isInComboBox = e -> isListViewOfComboBox != null;\n+        Predicate<KeyEvent> isInEditableComboBox =\n@@ -92,4 +92,4 @@\n-            new KeyMapping(new KeyBinding(HOME), e -> selectFirstRow(), pIsInEditableComboBox),\n-            new KeyMapping(new KeyBinding(END), e -> selectLastRow(), pIsInEditableComboBox),\n-            new KeyMapping(new KeyBinding(HOME).shift(), e -> selectAllToFirstRow(), pIsInComboBox),\n-            new KeyMapping(new KeyBinding(END).shift(), e -> selectAllToLastRow(), pIsInComboBox),\n+            new KeyMapping(new KeyBinding(HOME), e -> selectFirstRow(), isInEditableComboBox),\n+            new KeyMapping(new KeyBinding(END), e -> selectLastRow(), isInEditableComboBox),\n+            new KeyMapping(new KeyBinding(HOME).shift(), e -> selectAllToFirstRow(), isInComboBox),\n+            new KeyMapping(new KeyBinding(END).shift(), e -> selectAllToLastRow(), isInComboBox),\n@@ -110,3 +110,3 @@\n-            new KeyMapping(new KeyBinding(A).shortcut(), e -> selectAll(), pIsInComboBox),\n-            new KeyMapping(new KeyBinding(HOME).shortcut(), e -> focusFirstRow(), pIsInComboBox),\n-            new KeyMapping(new KeyBinding(END).shortcut(), e -> focusLastRow(), pIsInComboBox),\n+            new KeyMapping(new KeyBinding(A).shortcut(), e -> selectAll(), isInComboBox),\n+            new KeyMapping(new KeyBinding(HOME).shortcut(), e -> focusFirstRow(), isInComboBox),\n+            new KeyMapping(new KeyBinding(END).shortcut(), e -> focusLastRow(), isInComboBox),\n@@ -157,2 +157,2 @@\n-            new KeyMapping(new KeyBinding(HOME).shortcut().shift(), e -> discontinuousSelectAllToFirstRow(), pIsInComboBox),\n-            new KeyMapping(new KeyBinding(END).shortcut().shift(), e -> discontinuousSelectAllToLastRow(), pIsInComboBox)\n+            new KeyMapping(new KeyBinding(HOME).shortcut().shift(), e -> discontinuousSelectAllToFirstRow(), isInComboBox),\n+            new KeyMapping(new KeyBinding(END).shortcut().shift(), e -> discontinuousSelectAllToLastRow(), isInComboBox)\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/ListViewBehavior.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -508,1 +508,3 @@\n-                getProperties().put(\"editableComboBoxEditor\", (Supplier<Boolean>) () -> getSkinnable().isEditable());\n+                \/\/ editableComboBox property is used to intercept few Key inputs from this ListView,\n+                \/\/ so that those inputs get forwarded to editor of ComboBox .\n+                getProperties().put(\"editableComboBox\", (Supplier<Boolean>) () -> getSkinnable().isEditable());\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/ComboBoxListViewSkin.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1458,0 +1458,62 @@\n+    @Test public void testKeyInputsOnNonEditableComboBox() {\n+        final ComboBox<String> cb = new ComboBox<>(FXCollections.observableArrayList(\"a\", \"b\", \"c\"));\n+        \/\/ cb.setEditable(false); \/\/ by default ComboBox is not editable\n+        StageLoader sl = new StageLoader(cb);\n+        SingleSelectionModel<String> sm = cb.getSelectionModel();\n+        sm.select(0);\n+        KeyEventFirer keyboard = new KeyEventFirer(cb);\n+\n+        \/\/ Show the popup\n+        assertFalse(cb.isShowing());\n+        cb.requestFocus();\n+        keyboard.doDownArrowPress(KeyModifier.ALT);\n+        \/\/ Sanity\n+        assertTrue(cb.isShowing());\n+        assertEquals(0, sm.getSelectedIndex());\n+\n+        \/\/ Test RIGHT key\n+        keyboard.doRightArrowPress();\n+        assertEquals(0, sm.getSelectedIndex());\n+\n+        \/\/ Test KP_RIGHT key\n+        keyboard.doKeyPress(KeyCode.KP_RIGHT);\n+        assertEquals(0, sm.getSelectedIndex());\n+\n+        \/\/ Test DOWN key\n+        keyboard.doDownArrowPress();\n+        assertEquals(1, sm.getSelectedIndex());\n+\n+        \/\/ Test KP_DOWN key\n+        keyboard.doKeyPress(KeyCode.KP_DOWN);\n+        assertEquals(2, sm.getSelectedIndex());\n+\n+        \/\/ Test LEFT key\n+        keyboard.doLeftArrowPress();\n+        assertEquals(2, sm.getSelectedIndex());\n+\n+        \/\/ Test KP_LEFT key\n+        keyboard.doKeyPress(KeyCode.KP_LEFT);\n+        assertEquals(2, sm.getSelectedIndex());\n+\n+        \/\/ Test UP key\n+        keyboard.doUpArrowPress();\n+        assertEquals(1, sm.getSelectedIndex());\n+\n+        \/\/ Test KP_UP key\n+        keyboard.doKeyPress(KeyCode.KP_UP);\n+        assertEquals(0, sm.getSelectedIndex());\n+\n+        \/\/ Test END key\n+        keyboard.doKeyPress(KeyCode.END);\n+        assertEquals(2, sm.getSelectedIndex());\n+\n+        \/\/ Test HOME key\n+        keyboard.doKeyPress(KeyCode.HOME);\n+        assertEquals(0, sm.getSelectedIndex());\n+\n+        \/\/ Sanity\n+        assertTrue(cb.isShowing());\n+\n+        sl.dispose();\n+    }\n+\n@@ -1482,2 +1544,2 @@\n-        assertTrue(testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME)));\n-        assertTrue(testInterceptor(inputMappings, new KeyBinding(KeyCode.END)));\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME), true);\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.END), true);\n@@ -1487,2 +1549,2 @@\n-        assertFalse(testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME)));\n-        assertFalse(testInterceptor(inputMappings, new KeyBinding(KeyCode.END)));\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME), false);\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.END), false);\n@@ -1499,5 +1561,5 @@\n-        assertTrue(testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME).shift()));\n-        assertTrue(testInterceptor(inputMappings, new KeyBinding(KeyCode.END).shift()));\n-        assertTrue(testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME).shortcut()));\n-        assertTrue(testInterceptor(inputMappings, new KeyBinding(KeyCode.END).shortcut()));\n-        assertTrue(testInterceptor(inputMappings, new KeyBinding(KeyCode.A).shortcut()));\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME).shift(), true);\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.END).shift(), true);\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME).shortcut(), true);\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.END).shortcut(), true);\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.A).shortcut(), true);\n@@ -1506,2 +1568,2 @@\n-        assertTrue(testInterceptor(verticalInputMappings, new KeyBinding(KeyCode.HOME).shortcut().shift()));\n-        assertTrue(testInterceptor(verticalInputMappings, new KeyBinding(KeyCode.END).shortcut().shift()));\n+        testInterceptor(verticalInputMappings, new KeyBinding(KeyCode.HOME).shortcut().shift(), true);\n+        testInterceptor(verticalInputMappings, new KeyBinding(KeyCode.END).shortcut().shift(), true);\n@@ -1510,1 +1572,1 @@\n-    private boolean testInterceptor(ObservableList<?> mappings, KeyBinding binding) {\n+    private void testInterceptor(ObservableList<?> mappings, KeyBinding binding, boolean isIntercepted) {\n@@ -1512,1 +1574,6 @@\n-        return ((KeyMapping)mappings.get(i)).getInterceptor().test(null);\n+        if (((KeyMapping)mappings.get(i)).getInterceptor() != null) {\n+            assertEquals(isIntercepted, ((KeyMapping) mappings.get(i)).getInterceptor().test(null));\n+        } else {\n+            \/\/ JDK-8209788 added interceptor for few KeyMappings\n+            fail(\"Interceptor must not be null\");\n+        }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ComboBoxTest.java","additions":80,"deletions":13,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -2066,7 +2066,7 @@\n-        assertFalse(testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME)));\n-        assertFalse(testInterceptor(inputMappings, new KeyBinding(KeyCode.END)));\n-        assertFalse(testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME).shift()));\n-        assertFalse(testInterceptor(inputMappings, new KeyBinding(KeyCode.END).shift()));\n-        assertFalse(testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME).shortcut()));\n-        assertFalse(testInterceptor(inputMappings, new KeyBinding(KeyCode.END).shortcut()));\n-        assertFalse(testInterceptor(inputMappings, new KeyBinding(KeyCode.A).shortcut()));\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME));\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.END));\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME).shift());\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.END).shift());\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME).shortcut());\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.END).shortcut());\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.A).shortcut());\n@@ -2075,2 +2075,2 @@\n-        assertFalse(testInterceptor(verticalInputMappings, new KeyBinding(KeyCode.HOME).shortcut().shift()));\n-        assertFalse(testInterceptor(verticalInputMappings, new KeyBinding(KeyCode.END).shortcut().shift()));\n+        testInterceptor(verticalInputMappings, new KeyBinding(KeyCode.HOME).shortcut().shift());\n+        testInterceptor(verticalInputMappings, new KeyBinding(KeyCode.END).shortcut().shift());\n@@ -2081,1 +2081,1 @@\n-    private boolean testInterceptor(ObservableList<?> mappings, KeyBinding binding) {\n+    private void testInterceptor(ObservableList<?> mappings, KeyBinding binding) {\n@@ -2083,1 +2083,6 @@\n-        return ((KeyMapping)mappings.get(i)).getInterceptor().test(null);\n+        if (((KeyMapping)mappings.get(i)).getInterceptor() != null) {\n+            assertFalse(((KeyMapping)mappings.get(i)).getInterceptor().test(null));\n+        } else {\n+            \/\/ JDK-8209788 added interceptor for few KeyMappings\n+            fail(\"Interceptor must not be null\");\n+        }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewTest.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"}]}