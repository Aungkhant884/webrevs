{"files":[{"patch":"@@ -91,1 +91,1 @@\n-            \/\/ TODO this is insufficient as we need to check entire InputMap hierarchy\n+            \/\/ TODO: JDK-8250807: this is insufficient as we need to check entire InputMap hierarchy\n@@ -119,0 +119,1 @@\n+        \/\/ TODO: JDK-8250807: Traverse the child maps of getInputMap() and remove the mapping from them.\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/BehaviorBase.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,6 +29,0 @@\n-import javafx.scene.control.ComboBoxBase;\n-import javafx.scene.control.SelectionModel;\n-import com.sun.javafx.scene.control.inputmap.InputMap;\n-\n-import static javafx.scene.input.KeyCode.DOWN;\n-import static javafx.scene.input.KeyCode.UP;\n@@ -37,10 +31,0 @@\n-\n-    \/***************************************************************************\n-     *                                                                         *\n-     * Constructors                                                            *\n-     *                                                                         *\n-     **************************************************************************\/\n-\n-    \/**\n-     *\n-     *\/\n@@ -49,30 +33,0 @@\n-\n-        \/\/ Add these bindings as a child input map, so they take precedence\n-        InputMap<ComboBoxBase<T>> comboBoxListViewInputMap = new InputMap<>(comboBox);\n-        comboBoxListViewInputMap.getMappings().addAll(\n-            new InputMap.KeyMapping(UP, e -> selectPrevious()),\n-            new InputMap.KeyMapping(DOWN, e -> selectNext())\n-        );\n-        addDefaultChildMap(getInputMap(), comboBoxListViewInputMap);\n-    }\n-\n-    \/***************************************************************************\n-     *                                                                         *\n-     * Key event handling                                                      *\n-     *                                                                         *\n-     **************************************************************************\/\n-\n-    private ComboBox<T> getComboBox() {\n-        return (ComboBox<T>) getNode();\n-    }\n-\n-    private void selectPrevious() {\n-        SelectionModel<T> sm = getComboBox().getSelectionModel();\n-        if (sm == null) return;\n-        sm.selectPrevious();\n-    }\n-\n-    private void selectNext() {\n-        SelectionModel<T> sm = getComboBox().getSelectionModel();\n-        if (sm == null) return;\n-        sm.selectNext();\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/ComboBoxListViewBehavior.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n@@ -81,1 +83,8 @@\n-        addDefaultMapping(listViewInputMap, FocusTraversalInputMap.getFocusTraversalMappings());\n+        Supplier<Boolean> isListViewOfComboBox =\n+                (Supplier<Boolean>) control.getProperties().get(\"editableComboBox\");\n+        Predicate<KeyEvent> isInComboBox = e -> isListViewOfComboBox != null;\n+        Predicate<KeyEvent> isInEditableComboBox =\n+                e -> isListViewOfComboBox != null && isListViewOfComboBox.get();\n+        if (isListViewOfComboBox == null) {\n+            addDefaultMapping(listViewInputMap, FocusTraversalInputMap.getFocusTraversalMappings());\n+        }\n@@ -83,4 +92,4 @@\n-            new KeyMapping(HOME, e -> selectFirstRow()),\n-            new KeyMapping(END, e -> selectLastRow()),\n-            new KeyMapping(new KeyBinding(HOME).shift(), e -> selectAllToFirstRow()),\n-            new KeyMapping(new KeyBinding(END).shift(), e -> selectAllToLastRow()),\n+            new KeyMapping(new KeyBinding(HOME), e -> selectFirstRow(), isInEditableComboBox),\n+            new KeyMapping(new KeyBinding(END), e -> selectLastRow(), isInEditableComboBox),\n+            new KeyMapping(new KeyBinding(HOME).shift(), e -> selectAllToFirstRow(), isInComboBox),\n+            new KeyMapping(new KeyBinding(END).shift(), e -> selectAllToLastRow(), isInComboBox),\n@@ -101,3 +110,3 @@\n-            new KeyMapping(new KeyBinding(A).shortcut(), e -> selectAll()),\n-            new KeyMapping(new KeyBinding(HOME).shortcut(), e -> focusFirstRow()),\n-            new KeyMapping(new KeyBinding(END).shortcut(), e -> focusLastRow()),\n+            new KeyMapping(new KeyBinding(A).shortcut(), e -> selectAll(), isInComboBox),\n+            new KeyMapping(new KeyBinding(HOME).shortcut(), e -> focusFirstRow(), isInComboBox),\n+            new KeyMapping(new KeyBinding(END).shortcut(), e -> focusLastRow(), isInComboBox),\n@@ -148,2 +157,2 @@\n-            new KeyMapping(new KeyBinding(HOME).shortcut().shift(), e -> discontinuousSelectAllToFirstRow()),\n-            new KeyMapping(new KeyBinding(END).shortcut().shift(), e -> discontinuousSelectAllToLastRow())\n+            new KeyMapping(new KeyBinding(HOME).shortcut().shift(), e -> discontinuousSelectAllToFirstRow(), isInComboBox),\n+            new KeyMapping(new KeyBinding(END).shortcut().shift(), e -> discontinuousSelectAllToLastRow(), isInComboBox)\n@@ -151,1 +160,0 @@\n-\n@@ -201,1 +209,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/ListViewBehavior.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.function.Supplier;\n@@ -507,0 +508,3 @@\n+                \/\/ editableComboBox property is used to intercept few Key inputs from this ListView,\n+                \/\/ so that those inputs get forwarded to editor of ComboBox .\n+                getProperties().put(\"editableComboBox\", (Supplier<Boolean>) () -> getSkinnable().isEditable());\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/ComboBoxListViewSkin.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,8 @@\n+import com.sun.javafx.scene.control.behavior.FocusTraversalInputMap;\n+import com.sun.javafx.scene.control.behavior.ListViewBehavior;\n+import com.sun.javafx.scene.control.inputmap.InputMap;\n+import com.sun.javafx.scene.control.inputmap.InputMap.KeyMapping;\n+import com.sun.javafx.scene.control.inputmap.KeyBinding;\n+import com.sun.javafx.tk.Toolkit;\n+\n+import test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory;\n@@ -30,1 +38,0 @@\n-import com.sun.javafx.tk.Toolkit;\n@@ -1337,0 +1344,238 @@\n+    @Test public void testEditorKeyInputsWhenPopupIsShowing() {\n+        final ComboBox<String> cb = new ComboBox<>(FXCollections.observableArrayList(\"a\", \"b\", \"c\"));\n+        cb.setEditable(true);\n+        StageLoader sl = new StageLoader(cb);\n+        KeyEventFirer keyboard = new KeyEventFirer(cb);\n+\n+        \/\/ Show the popup\n+        assertFalse(cb.isShowing());\n+        cb.requestFocus();\n+        cb.getEditor().setText(\"ABC DEF\");\n+        assertEquals(\"ABC DEF\", cb.getEditor().getText());\n+        keyboard.doDownArrowPress(KeyModifier.ALT);\n+        \/\/ Sanity\n+        assertTrue(cb.isShowing());\n+        assertEquals(0, cb.getEditor().getCaretPosition());\n+\n+        \/\/ LEFT, RIGHT keys with CTRL, SHIFT modifiers\n+        \/\/ Test RIGHT key\n+        keyboard.doRightArrowPress();\n+        assertEquals(1, cb.getEditor().getCaretPosition());\n+\n+        \/\/ Test KP_RIGHT key\n+        keyboard.doKeyPress(KeyCode.KP_RIGHT);\n+        assertEquals(2, cb.getEditor().getCaretPosition());\n+\n+        \/\/ Test LEFT key\n+        keyboard.doLeftArrowPress();\n+        assertEquals(1, cb.getEditor().getCaretPosition());\n+\n+        \/\/ Test KP_LEFT key\n+        keyboard.doKeyPress(KeyCode.KP_LEFT);\n+        assertEquals(0, cb.getEditor().getCaretPosition());\n+\n+        \/\/ Test SHIFT + RIGHT key\n+        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT);\n+        assertEquals(\"A\", cb.getEditor().getSelectedText());\n+        assertEquals(1, cb.getEditor().getCaretPosition());\n+\n+        \/\/ Test SHIFT + LEFT key\n+        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT);\n+        assertEquals(\"\", cb.getEditor().getSelectedText());\n+        assertEquals(0, cb.getEditor().getCaretPosition());\n+\n+        \/\/ Test CTRL + RIGHT key\n+        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.CTRL);\n+        assertEquals(\"\", cb.getEditor().getSelectedText());\n+        assertEquals(4, cb.getEditor().getCaretPosition());\n+\n+        \/\/ Test CTRL + LEFT key\n+        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.CTRL);\n+        assertEquals(\"\", cb.getEditor().getSelectedText());\n+        assertEquals(0, cb.getEditor().getCaretPosition());\n+\n+        \/\/ Test CTRL + SHIFT + RIGHT key\n+        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.CTRL, KeyModifier.SHIFT);\n+        assertEquals(\"ABC \", cb.getEditor().getSelectedText());\n+        assertEquals(4, cb.getEditor().getCaretPosition());\n+\n+        \/\/ Test CTRL + SHIFT + LEFT key\n+        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.CTRL, KeyModifier.SHIFT);\n+        assertEquals(\"\", cb.getEditor().getSelectedText());\n+        assertEquals(0, cb.getEditor().getCaretPosition());\n+\n+        \/\/ HOME, END keys with CTRL, SHIFT modifiers\n+        \/\/ Test END key\n+        keyboard.doKeyPress(KeyCode.END);\n+        assertEquals(7, cb.getEditor().getCaretPosition());\n+\n+        \/\/ Test HOME key\n+        keyboard.doKeyPress(KeyCode.HOME);\n+        assertEquals(0, cb.getEditor().getCaretPosition());\n+\n+        \/\/ Test SHIFT + END key\n+        keyboard.doKeyPress(KeyCode.END, KeyModifier.SHIFT);\n+        assertEquals(cb.getEditor().getText(), cb.getEditor().getSelectedText());\n+        assertEquals(7, cb.getEditor().getCaretPosition());\n+\n+        \/\/ Test SHIFT + HOME key\n+        keyboard.doKeyPress(KeyCode.HOME, KeyModifier.SHIFT);\n+        assertEquals(\"\", cb.getEditor().getSelectedText());\n+        assertEquals(0, cb.getEditor().getCaretPosition());\n+\n+        \/\/ Test CTRL + END key\n+        keyboard.doKeyPress(KeyCode.END, KeyModifier.CTRL);\n+        assertEquals(\"\", cb.getEditor().getSelectedText());\n+        assertEquals(7, cb.getEditor().getCaretPosition());\n+\n+        \/\/ Test CTRL + HOME key\n+        keyboard.doKeyPress(KeyCode.HOME, KeyModifier.CTRL);\n+        assertEquals(\"\", cb.getEditor().getSelectedText());\n+        assertEquals(0, cb.getEditor().getCaretPosition());\n+\n+        \/\/ Test CTRL + SHIFT + END key\n+        keyboard.doKeyPress(KeyCode.END, KeyModifier.CTRL, KeyModifier.SHIFT);\n+        assertEquals(cb.getEditor().getText(), cb.getEditor().getSelectedText());\n+        assertEquals(7, cb.getEditor().getCaretPosition());\n+\n+        \/\/ Test CTRL + SHIFT + HOME key\n+        keyboard.doKeyPress(KeyCode.HOME, KeyModifier.CTRL, KeyModifier.SHIFT);\n+        assertEquals(\"\", cb.getEditor().getSelectedText());\n+        assertEquals(0, cb.getEditor().getCaretPosition());\n+\n+        \/\/ Test CTRL + A key\n+        keyboard.doLeftArrowPress();\n+        assertEquals(\"\", cb.getEditor().getSelectedText());\n+        keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());\n+        assertEquals(cb.getEditor().getText(), cb.getEditor().getSelectedText());\n+\n+        \/\/ Sanity\n+        assertTrue(cb.isShowing());\n+\n+        sl.dispose();\n+    }\n+\n+    @Test public void testKeyInputsOnNonEditableComboBox() {\n+        final ComboBox<String> cb = new ComboBox<>(FXCollections.observableArrayList(\"a\", \"b\", \"c\"));\n+        \/\/ cb.setEditable(false); \/\/ by default ComboBox is not editable\n+        StageLoader sl = new StageLoader(cb);\n+        SingleSelectionModel<String> sm = cb.getSelectionModel();\n+        sm.select(0);\n+        KeyEventFirer keyboard = new KeyEventFirer(cb);\n+\n+        \/\/ Show the popup\n+        assertFalse(cb.isShowing());\n+        cb.requestFocus();\n+        keyboard.doDownArrowPress(KeyModifier.ALT);\n+        \/\/ Sanity\n+        assertTrue(cb.isShowing());\n+        assertEquals(0, sm.getSelectedIndex());\n+\n+        \/\/ Test RIGHT key\n+        keyboard.doRightArrowPress();\n+        assertEquals(0, sm.getSelectedIndex());\n+\n+        \/\/ Test KP_RIGHT key\n+        keyboard.doKeyPress(KeyCode.KP_RIGHT);\n+        assertEquals(0, sm.getSelectedIndex());\n+\n+        \/\/ Test DOWN key\n+        keyboard.doDownArrowPress();\n+        assertEquals(1, sm.getSelectedIndex());\n+\n+        \/\/ Test KP_DOWN key\n+        keyboard.doKeyPress(KeyCode.KP_DOWN);\n+        assertEquals(2, sm.getSelectedIndex());\n+\n+        \/\/ Test LEFT key\n+        keyboard.doLeftArrowPress();\n+        assertEquals(2, sm.getSelectedIndex());\n+\n+        \/\/ Test KP_LEFT key\n+        keyboard.doKeyPress(KeyCode.KP_LEFT);\n+        assertEquals(2, sm.getSelectedIndex());\n+\n+        \/\/ Test UP key\n+        keyboard.doUpArrowPress();\n+        assertEquals(1, sm.getSelectedIndex());\n+\n+        \/\/ Test KP_UP key\n+        keyboard.doKeyPress(KeyCode.KP_UP);\n+        assertEquals(0, sm.getSelectedIndex());\n+\n+        \/\/ Test END key\n+        keyboard.doKeyPress(KeyCode.END);\n+        assertEquals(2, sm.getSelectedIndex());\n+\n+        \/\/ Test HOME key\n+        keyboard.doKeyPress(KeyCode.HOME);\n+        assertEquals(0, sm.getSelectedIndex());\n+\n+        \/\/ Sanity\n+        assertTrue(cb.isShowing());\n+\n+        sl.dispose();\n+    }\n+\n+    @Test public void testInterceptedKeyMappingsForComboBoxEditor() {\n+        final ComboBox<String> cb = new ComboBox<>(FXCollections.observableArrayList(\"a\", \"b\", \"c\"));\n+        StageLoader sl = new StageLoader(cb);\n+\n+        ListView listView = (ListView) ((ComboBoxListViewSkin)cb.getSkin()).getPopupContent();\n+        ListViewBehavior lvBehavior = (ListViewBehavior)ControlSkinFactory.getBehavior(listView.getSkin());\n+        InputMap<ListView<?>> lvInputMap = lvBehavior.getInputMap();\n+        ObservableList<?> inputMappings = lvInputMap.getMappings();\n+        \/\/ In ListViewBehavior KeyMappings for vertical orientation are added under 3rd child InputMap\n+        InputMap<ListView<?>> verticalInputMap = lvInputMap.getChildInputMaps().get(2);\n+        ObservableList<?> verticalInputMappings = verticalInputMap.getMappings();\n+\n+        cb.setEditable(true);\n+        testKeyMappingsForEditableCB(inputMappings);\n+        testCommonKeyMappings(inputMappings, verticalInputMappings);\n+\n+        cb.setEditable(false);\n+        testKeyMappingsForNonEditableCB(inputMappings);\n+        testCommonKeyMappings(inputMappings, verticalInputMappings);\n+\n+        sl.dispose();\n+    }\n+\n+    private void testKeyMappingsForEditableCB(ObservableList<?> inputMappings) {\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME), true);\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.END), true);\n+    }\n+\n+    private void testKeyMappingsForNonEditableCB(ObservableList<?> inputMappings) {\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME), false);\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.END), false);\n+    }\n+\n+    private void testCommonKeyMappings(ObservableList<?> inputMappings,\n+                                       ObservableList<?> verticalInputMappings) {\n+        \/\/ Verify FocusTraversalInputMap\n+        for(InputMap.Mapping<?> mapping : FocusTraversalInputMap.getFocusTraversalMappings()) {\n+            assertFalse(inputMappings.contains(mapping));\n+        }\n+\n+        \/\/ Verify default InputMap\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME).shift(), true);\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.END).shift(), true);\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME).shortcut(), true);\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.END).shortcut(), true);\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.A).shortcut(), true);\n+\n+        \/\/ Verify vertical child InputMap\n+        testInterceptor(verticalInputMappings, new KeyBinding(KeyCode.HOME).shortcut().shift(), true);\n+        testInterceptor(verticalInputMappings, new KeyBinding(KeyCode.END).shortcut().shift(), true);\n+    }\n+\n+    private void testInterceptor(ObservableList<?> mappings, KeyBinding binding, boolean isIntercepted) {\n+        int i = mappings.indexOf(new KeyMapping(binding, null));\n+        if (((KeyMapping)mappings.get(i)).getInterceptor() != null) {\n+            assertEquals(isIntercepted, ((KeyMapping) mappings.get(i)).getInterceptor().test(null));\n+        } else {\n+            \/\/ JDK-8209788 added interceptor for few KeyMappings\n+            fail(\"Interceptor must not be null\");\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ComboBoxTest.java","additions":246,"deletions":1,"binary":false,"changes":247,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import com.sun.javafx.scene.control.behavior.FocusTraversalInputMap;\n@@ -30,0 +31,4 @@\n+import com.sun.javafx.scene.control.behavior.ListViewBehavior;\n+import com.sun.javafx.scene.control.inputmap.InputMap;\n+import com.sun.javafx.scene.control.inputmap.InputMap.KeyMapping;\n+import com.sun.javafx.scene.control.inputmap.KeyBinding;\n@@ -78,0 +83,2 @@\n+\n+import test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory;\n@@ -174,0 +181,34 @@\n+    @Test public void testCtrlAWhenSwitchingSelectionModel() {\n+        ListView<String> listView = new ListView<>();\n+        listView.getItems().addAll(\"a\", \"b\", \"c\", \"d\");\n+\n+        MultipleSelectionModel<String> sm;\n+        StageLoader sl = new StageLoader(listView);\n+        KeyEventFirer keyboard = new KeyEventFirer(listView);\n+\n+        MultipleSelectionModel<String> smMultiple = ListViewShim.<String>getListViewBitSetSelectionModel(listView);\n+        smMultiple.setSelectionMode(SelectionMode.MULTIPLE);\n+        MultipleSelectionModel<String> smSingle = ListViewShim.<String>getListViewBitSetSelectionModel(listView);\n+        smSingle.setSelectionMode(SelectionMode.SINGLE);\n+\n+        listView.setSelectionModel(smMultiple);\n+        sm = listView.getSelectionModel();\n+\n+        assertEquals(0, sm.getSelectedItems().size());\n+        sm.clearAndSelect(0);\n+        assertEquals(1, sm.getSelectedItems().size());\n+        keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());\n+        assertEquals(4, sm.getSelectedItems().size());\n+\n+        listView.setSelectionModel(smSingle);\n+        sm = listView.getSelectionModel();\n+\n+        assertEquals(0, sm.getSelectedItems().size());\n+        sm.clearAndSelect(0);\n+        assertEquals(1, sm.getSelectedItems().size());\n+        keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());\n+        assertEquals(1, sm.getSelectedItems().size());\n+\n+        sl.dispose();\n+    }\n+\n@@ -1468,0 +1509,27 @@\n+    @Test public void testCtrlAWhenSwitchingSelectionMode() {\n+        ListView<String> listView = new ListView<>();\n+        listView.getItems().addAll(\"a\", \"b\", \"c\", \"d\");\n+\n+        MultipleSelectionModel<String> sm = listView.getSelectionModel();\n+        StageLoader sl = new StageLoader(listView);\n+        KeyEventFirer keyboard = new KeyEventFirer(listView);\n+\n+        assertEquals(0, sm.getSelectedItems().size());\n+        sm.clearAndSelect(0);\n+        assertEquals(1, sm.getSelectedItems().size());\n+        keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());\n+        assertEquals(1, sm.getSelectedItems().size());\n+\n+        sm.setSelectionMode(SelectionMode.MULTIPLE);\n+        assertEquals(1, sm.getSelectedItems().size());\n+        keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());\n+        assertEquals(4, sm.getSelectedItems().size());\n+\n+        sm.setSelectionMode(SelectionMode.SINGLE);\n+        assertEquals(1, sm.getSelectedItems().size());\n+        keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());\n+        assertEquals(1, sm.getSelectedItems().size());\n+\n+        sl.dispose();\n+    }\n+\n@@ -1980,0 +2048,43 @@\n+    @Test public void testInterceptedKeyMappingsForComboBoxEditor() {\n+        ListView<String> listView = new ListView<>(FXCollections\n+                .observableArrayList(\"Item1\", \"Item2\"));\n+        StageLoader sl = new StageLoader(listView);\n+\n+        ListViewBehavior lvBehavior = (ListViewBehavior) ControlSkinFactory.getBehavior(listView.getSkin());\n+        InputMap<ListView<?>> lvInputMap = lvBehavior.getInputMap();\n+        ObservableList<?> inputMappings = lvInputMap.getMappings();\n+        \/\/ In ListViewBehavior KeyMappings for vertical orientation are added under 3rd child InputMap\n+        InputMap<ListView<?>> verticalInputMap = lvInputMap.getChildInputMaps().get(2);\n+        ObservableList<?> verticalInputMappings = verticalInputMap.getMappings();\n+\n+        \/\/ Verify FocusTraversalInputMap\n+        for(InputMap.Mapping<?> mapping : FocusTraversalInputMap.getFocusTraversalMappings()) {\n+            assertTrue(inputMappings.contains(mapping));\n+        }\n+\n+        \/\/ Verify default InputMap\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME));\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.END));\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME).shift());\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.END).shift());\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME).shortcut());\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.END).shortcut());\n+        testInterceptor(inputMappings, new KeyBinding(KeyCode.A).shortcut());\n+\n+        \/\/ Verify vertical child InputMap\n+        testInterceptor(verticalInputMappings, new KeyBinding(KeyCode.HOME).shortcut().shift());\n+        testInterceptor(verticalInputMappings, new KeyBinding(KeyCode.END).shortcut().shift());\n+\n+        sl.dispose();\n+    }\n+\n+    private void testInterceptor(ObservableList<?> mappings, KeyBinding binding) {\n+        int i = mappings.indexOf(new KeyMapping(binding, null));\n+        if (((KeyMapping)mappings.get(i)).getInterceptor() != null) {\n+            assertFalse(((KeyMapping)mappings.get(i)).getInterceptor().test(null));\n+        } else {\n+            \/\/ JDK-8209788 added interceptor for few KeyMappings\n+            fail(\"Interceptor must not be null\");\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"modified"}]}