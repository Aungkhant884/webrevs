{"files":[{"patch":"@@ -29,2 +29,0 @@\n-import javafx.beans.InvalidationListener;\n-import javafx.beans.WeakInvalidationListener;\n@@ -51,0 +49,2 @@\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n@@ -81,0 +81,1 @@\n+\n@@ -82,0 +83,8 @@\n+        Supplier<Boolean> isListViewOfComboBox =\n+                (Supplier<Boolean>) control.getProperties().get(\"editableComboBoxEditor\");\n+        Predicate<KeyEvent> pIsInComboBox = e -> isListViewOfComboBox != null;\n+        Predicate<KeyEvent> pIsInEditableComboBox =\n+                e -> isListViewOfComboBox != null && isListViewOfComboBox.get();\n+        if (isListViewOfComboBox == null) {\n+            addDefaultMapping(listViewInputMap, FocusTraversalInputMap.getFocusTraversalMappings());\n+        }\n@@ -83,0 +92,4 @@\n+            new KeyMapping(new KeyBinding(HOME), e -> selectFirstRow(), pIsInEditableComboBox),\n+            new KeyMapping(new KeyBinding(END), e -> selectLastRow(), pIsInEditableComboBox),\n+            new KeyMapping(new KeyBinding(HOME).shift(), e -> selectAllToFirstRow(), pIsInComboBox),\n+            new KeyMapping(new KeyBinding(END).shift(), e -> selectAllToLastRow(), pIsInComboBox),\n@@ -97,0 +110,3 @@\n+            new KeyMapping(new KeyBinding(A).shortcut(), e -> selectAll(), pIsInComboBox),\n+            new KeyMapping(new KeyBinding(HOME).shortcut(), e -> focusFirstRow(), pIsInComboBox),\n+            new KeyMapping(new KeyBinding(END).shortcut(), e -> focusLastRow(), pIsInComboBox),\n@@ -140,1 +156,3 @@\n-            new KeyMapping(new KeyBinding(PAGE_DOWN).shortcut().shift(), e -> discontinuousSelectPageDown())\n+            new KeyMapping(new KeyBinding(PAGE_DOWN).shortcut().shift(), e -> discontinuousSelectPageDown()),\n+            new KeyMapping(new KeyBinding(HOME).shortcut().shift(), e -> discontinuousSelectAllToFirstRow(), pIsInComboBox),\n+            new KeyMapping(new KeyBinding(END).shortcut().shift(), e -> discontinuousSelectAllToLastRow(), pIsInComboBox)\n@@ -142,30 +160,0 @@\n-\n-        if (!control.getProperties().containsKey(\"excludeKeyMappingsForComboBoxEditor\")) {\n-            \/\/ This is not ComboBox's ListView\n-            addDefaultMapping(listViewInputMap, FocusTraversalInputMap.getFocusTraversalMappings());\n-            addDefaultMapping(listViewInputMap,\n-                    new KeyMapping(HOME, e -> selectFirstRow()),\n-                    new KeyMapping(END, e -> selectLastRow()),\n-                    new KeyMapping(new KeyBinding(HOME).shift(), e -> selectAllToFirstRow()),\n-                    new KeyMapping(new KeyBinding(END).shift(), e -> selectAllToLastRow()),\n-                    new KeyMapping(new KeyBinding(HOME).shortcut(), e -> focusFirstRow()),\n-                    new KeyMapping(new KeyBinding(END).shortcut(), e -> focusLastRow()),\n-                    new KeyMapping(new KeyBinding(A).shortcut(), e -> selectAll())\n-            );\n-\n-            addDefaultMapping(verticalListInputMap,\n-                    new KeyMapping(new KeyBinding(HOME).shortcut().shift(), e -> discontinuousSelectAllToFirstRow()),\n-                    new KeyMapping(new KeyBinding(END).shortcut().shift(), e -> discontinuousSelectAllToLastRow())\n-            );\n-        } else {\n-            \/\/ This is ComboBox's ListView\n-            if (Boolean.FALSE.equals(control.getProperties().get(\"editableComboBoxEditor\"))) {\n-                \/\/ ComboBox is not editable\n-                addDefaultMapping(listViewInputMap,\n-                        new KeyMapping(HOME, e -> selectFirstRow()),\n-                        new KeyMapping(END, e -> selectLastRow())\n-                );\n-            }\n-        }\n-        control.getProperties().addListener(weakPropertiesListener);\n-\n@@ -235,1 +223,0 @@\n-        control.getProperties().removeListener(weakPropertiesListener);\n@@ -357,16 +344,0 @@\n-    private final InvalidationListener propertiesListener = inv -> {\n-        if (Boolean.FALSE.equals(getNode().getProperties().get(\"editableComboBoxEditor\"))) {\n-            \/\/ ListView's ComboBox is non editable\n-            addDefaultMapping(getInputMap(),\n-                    new KeyMapping(HOME, e -> selectFirstRow()),\n-                    new KeyMapping(END, e -> selectLastRow())\n-            );\n-        } else if (Boolean.TRUE.equals(getNode().getProperties().get(\"editableComboBoxEditor\"))) {\n-            \/\/ ListView's ComboBox is editable\n-            removeMapping(new KeyBinding(HOME));\n-            removeMapping(new KeyBinding(END));\n-        }\n-    };\n-\n-    private final WeakInvalidationListener weakPropertiesListener =\n-            new WeakInvalidationListener(propertiesListener);\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/ListViewBehavior.java","additions":21,"deletions":50,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.function.Supplier;\n@@ -188,4 +189,1 @@\n-        registerChangeListener(control.editableProperty(), e -> {\n-            updateEditable();\n-            listView.getProperties().put(\"editableComboBoxEditor\", getSkinnable().isEditable());\n-        });\n+        registerChangeListener(control.editableProperty(), e -> updateEditable());\n@@ -510,2 +508,1 @@\n-                getProperties().put(\"excludeKeyMappingsForComboBoxEditor\", true);\n-                getProperties().put(\"editableComboBoxEditor\", getSkinnable().isEditable());\n+                getProperties().put(\"editableComboBoxEditor\", (Supplier<Boolean>) () -> getSkinnable().isEditable());\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/ComboBoxListViewSkin.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1482,4 +1482,2 @@\n-        assertFalse(inputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.HOME), null)));\n-        assertFalse(inputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.END), null)));\n+        assertTrue(testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME)));\n+        assertTrue(testInterceptor(inputMappings, new KeyBinding(KeyCode.END)));\n@@ -1489,4 +1487,2 @@\n-        assertTrue(inputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.HOME), null)));\n-        assertTrue(inputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.END), null)));\n+        assertFalse(testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME)));\n+        assertFalse(testInterceptor(inputMappings, new KeyBinding(KeyCode.END)));\n@@ -1503,10 +1499,5 @@\n-        assertFalse(inputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.HOME).shift(), null)));\n-        assertFalse(inputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.END).shift(), null)));\n-        assertFalse(inputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.HOME).shortcut(), null)));\n-        assertFalse(inputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.END).shortcut(), null)));\n-        assertFalse(inputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.A).shortcut(), null)));\n+        assertTrue(testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME).shift()));\n+        assertTrue(testInterceptor(inputMappings, new KeyBinding(KeyCode.END).shift()));\n+        assertTrue(testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME).shortcut()));\n+        assertTrue(testInterceptor(inputMappings, new KeyBinding(KeyCode.END).shortcut()));\n+        assertTrue(testInterceptor(inputMappings, new KeyBinding(KeyCode.A).shortcut()));\n@@ -1515,4 +1506,7 @@\n-        assertFalse(verticalInputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.HOME).shortcut().shift(), null)));\n-        assertFalse(verticalInputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.END).shortcut().shift(), null)));\n+        assertTrue(testInterceptor(verticalInputMappings, new KeyBinding(KeyCode.HOME).shortcut().shift()));\n+        assertTrue(testInterceptor(verticalInputMappings, new KeyBinding(KeyCode.END).shortcut().shift()));\n+    }\n+\n+    private boolean testInterceptor(ObservableList<?> mappings, KeyBinding binding) {\n+        int i = mappings.indexOf(new KeyMapping(binding, null));\n+        return ((KeyMapping)mappings.get(i)).getInterceptor().test(null);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ComboBoxTest.java","additions":16,"deletions":22,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2066,14 +2066,7 @@\n-        assertTrue(inputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.HOME), null)));\n-        assertTrue(inputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.END), null)));\n-        assertTrue(inputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.HOME).shift(), null)));\n-        assertTrue(inputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.END).shift(), null)));\n-        assertTrue(inputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.HOME).shortcut(), null)));\n-        assertTrue(inputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.END).shortcut(), null)));\n-        assertTrue(inputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.A).shortcut(), null)));\n+        assertFalse(testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME)));\n+        assertFalse(testInterceptor(inputMappings, new KeyBinding(KeyCode.END)));\n+        assertFalse(testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME).shift()));\n+        assertFalse(testInterceptor(inputMappings, new KeyBinding(KeyCode.END).shift()));\n+        assertFalse(testInterceptor(inputMappings, new KeyBinding(KeyCode.HOME).shortcut()));\n+        assertFalse(testInterceptor(inputMappings, new KeyBinding(KeyCode.END).shortcut()));\n+        assertFalse(testInterceptor(inputMappings, new KeyBinding(KeyCode.A).shortcut()));\n@@ -2082,4 +2075,2 @@\n-        assertTrue(verticalInputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.HOME).shortcut().shift(), null)));\n-        assertTrue(verticalInputMappings.contains(\n-                new KeyMapping(new KeyBinding(KeyCode.END).shortcut().shift(), null)));\n+        assertFalse(testInterceptor(verticalInputMappings, new KeyBinding(KeyCode.HOME).shortcut().shift()));\n+        assertFalse(testInterceptor(verticalInputMappings, new KeyBinding(KeyCode.END).shortcut().shift()));\n@@ -2090,0 +2081,5 @@\n+    private boolean testInterceptor(ObservableList<?> mappings, KeyBinding binding) {\n+        int i = mappings.indexOf(new KeyMapping(binding, null));\n+        return ((KeyMapping)mappings.get(i)).getInterceptor().test(null);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewTest.java","additions":14,"deletions":18,"binary":false,"changes":32,"status":"modified"}]}