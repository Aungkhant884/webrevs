{"files":[{"patch":"@@ -356,0 +356,14 @@\n+    \/**\n+     * A convenience factory method for creating a {@code Background} with a single {@code Paint}.\n+     *\n+     * @implSpec\n+     * This call is equivalent to {@link BackgroundFill#BackgroundFill(Paint, CornerRadii, Insets)\n+     * new Background(new BackgroundFill(fill, null, null));}.\n+     * @param fill the fill of the background. If {@code null}, {@code Color.TRANSPARENT} will be used.\n+     * @return a new background of the given fill\n+     * @since 18\n+     *\/\n+    public static Background fill(Paint fill) {\n+        return new Background(new BackgroundFill(fill, null, null));\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Background.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -392,0 +392,14 @@\n+    \/**\n+     * A convenience factory method for creating a solid {@code Border} with a single {@code Paint}.\n+     *\n+     * @implSpec\n+     * This call is equivalent to {@link BorderStroke#BorderStroke(Paint, BorderStrokeStyle, CornerRadii, BorderWidths)\n+     * new Border(new BorderStroke(stroke, BorderStrokeStyle.SOLID, null, null));}.\n+     * @param stroke the stroke of the border (for all sides). If {@code null}, {@code Color.BLACK} will be used.\n+     * @return a new border of the given stroke\n+     * @since 18\n+     *\/\n+    public static Border stroke(Paint stroke) {\n+        return new Border(new BorderStroke(stroke, BorderStrokeStyle.SOLID, null, null));\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Border.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -36,0 +36,3 @@\n+import javafx.scene.layout.Border;\n+import javafx.scene.layout.BorderStroke;\n+import javafx.scene.layout.BorderStrokeStyle;\n@@ -717,0 +720,14 @@\n+    @Test\n+    public void testSingleFill() {\n+        var background1 = Background.fill(Color.BEIGE);\n+        var background2 = new Background(new BackgroundFill(Color.BEIGE, null, null));\n+        assertEquals(\"The factory method should give the same result as the constructor\", background1, background2);\n+    }\n+\n+    @Test\n+    public void testSingleFillWithNullPaint() {\n+        var background1 = Background.fill(null);\n+        var background2 = new Background(new BackgroundFill(null, null, null));\n+        assertEquals(\"The factory method should give the same result as the constructor\", background1, background2);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BackgroundTest.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -564,0 +564,14 @@\n+\n+    @Test\n+    public void testSingleStroke() {\n+        var border1 = Border.stroke(Color.BEIGE);\n+        var border2 = new Border(new BorderStroke(Color.BEIGE, BorderStrokeStyle.SOLID, null, null));\n+        assertEquals(\"The factory method should give the same result as the constructor\", border2, border1);\n+    }\n+\n+    @Test\n+    public void testSingleStrokeWithNullPaint() {\n+        var border1 = Border.stroke(null);\n+        var border2 = new Border(new BorderStroke(null, BorderStrokeStyle.SOLID, null, null));\n+        assertEquals(\"The factory method should give the same result as the constructor\", border2, border1);\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BorderTest.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"}]}