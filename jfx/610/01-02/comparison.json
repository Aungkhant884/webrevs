{"files":[{"patch":"@@ -357,2 +357,1 @@\n-     * A convenience factory method for creating a background with a single {@code Paint}. The background will use the\n-     * default {@code CornerRadii} and the default {@code Insets} of {@link BackgroundFill}.\n+     * A convenience factory method for creating a background with a single {@code Paint}.\n@@ -360,2 +359,4 @@\n-     * @implSpec This call is equivalent to {@code new Background(new BackgroundFill(fill, null, null));}.\n-     * @param fill the fill of the background\n+     * @implSpec\n+     * This call is equivalent to {@link BackgroundFill#BackgroundFill(Paint, CornerRadii, Insets)\n+     * new Background(new BackgroundFill(fill, null, null));}.\n+     * @param fill the fill of the background. If {@code null}, {@code Color.TRANSPARENT} will be used.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Background.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -393,2 +393,1 @@\n-     * A convenience factory method for creating a solid border with a single {@code Paint}. The border will use the\n-     * default {@code CornerRadii} and the default {@code BorderWidths} of {@link BorderStroke}.\n+     * A convenience factory method for creating a solid border with a single {@code Paint}.\n@@ -397,2 +396,3 @@\n-     * This call is equivalent to {@code new Border(new BorderStroke(stroke, BorderStrokeStyle.SOLID, null, null));}.\n-     * @param stroke the stroke of the border\n+     * This call is equivalent to {@link BorderStroke#BorderStroke(Paint, BorderStrokeStyle, CornerRadii, BorderWidths)\n+     * new Border(new BorderStroke(stroke, BorderStrokeStyle.SOLID, null, null));}.\n+     * @param stroke the stroke of the border (for all sides). If {@code null}, {@code Color.BLACK} will be used.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Border.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,0 +36,3 @@\n+import javafx.scene.layout.Border;\n+import javafx.scene.layout.BorderStroke;\n+import javafx.scene.layout.BorderStrokeStyle;\n@@ -717,0 +720,7 @@\n+    @Test\n+    public void testSingleFill() {\n+        var background1 = Background.fill(Color.BEIGE);\n+        var background2 = new Background(new BackgroundFill(Color.BEIGE, null, null));\n+        assertEquals(\"The factory method should give the same result as the constructor\", background1, background2);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BackgroundTest.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -564,0 +564,7 @@\n+\n+    @Test\n+    public void testSingleStroke() {\n+        var border1 = Border.stroke(Color.BEIGE);\n+        var border2 = new Border(new BorderStroke(Color.BEIGE, BorderStrokeStyle.SOLID, null, null));\n+        assertEquals(\"The factory method should give the same result as the constructor\", border2, border1);\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BorderTest.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}