{"files":[{"patch":"@@ -41,0 +41,1 @@\n+#import <Carbon\/Carbon.h>\n@@ -744,0 +745,7 @@\n+static void inputDidChangeCallback(CFNotificationCenterRef center, void *observer, CFNotificationName name, const void *object, CFDictionaryRef userInfo)\n+{\n+    if (keyCodeForCharMap != nil) {\n+        [keyCodeForCharMap removeAllObjects];\n+    }\n+}\n+\n@@ -749,0 +757,5 @@\n+        \/\/ To avoid stale entries when the user switches layout\n+        CFNotificationCenterRef center = CFNotificationCenterGetDistributedCenter();\n+        CFNotificationCenterAddObserver(center, NULL, inputDidChangeCallback,\n+                                        kTISNotifySelectedKeyboardInputSourceChanged,\n+                                        NULL, CFNotificationSuspensionBehaviorCoalesce);\n@@ -750,1 +763,14 @@\n-    [keyCodeForCharMap setObject:[NSNumber numberWithUnsignedShort:[event keyCode]] forKey:[event characters]];\n+\n+    \/\/ Add the character the user typed to the map.\n+    NSNumber* mapObject = [NSNumber numberWithUnsignedShort:[event keyCode]];\n+    [keyCodeForCharMap setObject:mapObject forKey:[event characters]];\n+    \/\/ getKeyCodeForChar should not just match against a character the user types\n+    \/\/ directly but any other character printed on the same key.\n+    [keyCodeForCharMap setObject:mapObject forKey:[event charactersByApplyingModifiers: 0]];\n+    [keyCodeForCharMap setObject:mapObject forKey:[event charactersByApplyingModifiers: NSEventModifierFlagShift]];\n+    \/\/ On some European keyboards there are useful symbols which are only\n+    \/\/ accessible via the Option key. We don't query for the Option key\n+    \/\/ character because on most layouts just about every key has some\n+    \/\/ random symbol assigned to that modifier which the user probably\n+    \/\/ isn't even aware of. The user can get that character into the map\n+    \/\/ by typing it directly.\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.m","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-        Application.launch(args);\n+        Application.launch(KeyboardTest.class, args);\n@@ -170,1 +170,1 @@\n-        \/* Add a key with unshifted, shifted, and AltGr\/Option characters *\/\n+        \/* Add a key with unshifted, shifted, and AltGr characters *\/\n@@ -252,1 +252,1 @@\n-             * different characters.\n+             * different characters. Platforms should always target Return.\n@@ -254,1 +254,1 @@\n-            add(KeyCode.ENTER, \"wild\");\n+            add(KeyCode.ENTER, \"\\r\");\n@@ -337,2 +337,2 @@\n-            \/* Include one combination that involves AltGr\/Option. *\/\n-            final String altGrFive = (onMac ? \"{\" : \"[\");\n+            \/* Include one combination that involves AltGr. *\/\n+            final String altGrFive = \"[\";\n@@ -359,2 +359,1 @@\n-                builder.add(KeyCode.DIGIT5, \"(\",          \"5\", altGrFive);\n-                \/* Six and eight require some tweaking, below *\/\n+                \/* Five, six, and eight require some tweaking, below *\/\n@@ -365,0 +364,1 @@\n+                    builder.add(KeyCode.DIGIT5, \"(\",      \"5\");\n@@ -368,0 +368,1 @@\n+                    builder.add(KeyCode.DIGIT5, \"(\",      \"5\", altGrFive);\n@@ -412,1 +413,8 @@\n-            builder.add(KeyCode.DIGIT7, \"7\", \"\/\", altGrSeven);\n+\n+            if (onMac) {\n+                builder.add(KeyCode.DIGIT7, \"7\", \"\/\");\n+            }\n+            else {\n+                builder.add(KeyCode.DIGIT7, \"7\", \"\/\", \"{\");\n+            }\n+\n@@ -451,1 +459,1 @@\n-            builder.add(KeyCode.PLUS,         \"+\", \"*\", \"]\");\n+            builder.add(KeyCode.PLUS,         \"+\", \"*\");\n","filename":"tests\/manual\/events\/KeyboardTest.java","additions":18,"deletions":10,"binary":false,"changes":28,"status":"modified"}]}