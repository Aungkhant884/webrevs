{"files":[{"patch":"@@ -1805,0 +1805,35 @@\n+    \/**\n+     * If this region's snapToPixel property is true, then the value is either floored (positive values) or\n+     * ceiled (negative values) with a scale. When the absolute value of the given value\n+     * multiplied by the current scale is less than 10^15, then this method guarantees that:\n+     *\n+     * <pre>snapInnerSpaceX(snapInnerSpaceX(value)) == snapInnerSpaceX(value)<\/pre>\n+     *\n+     * The limit is about 10^15 because double values will no longer be able to represent\n+     * larger integers with exact precision beyond this limit.\n+     *\n+     * @since 22\n+     * @param value The value that needs to be snapped\n+     * @return value either as passed, or floored or ceiled with scale, based on snapToPixel property\n+     *\/\n+    public double snapInnerSpaceX(double value) {\n+        return snapPortionX(value, isSnapToPixel());\n+    }\n+\n+    \/**\n+     * If this region's snapToPixel property is true, then the value is either floored (positive values) or\n+     * ceiled (negative values) with a scale. When the absolute value of the given value\n+     * multiplied by the current scale is less than 10^15, then this method guarantees that:\n+     *\n+     * <pre>snapInnerSpaceY(snapInnerSpaceY(value)) == snapInnerSpaceY(value)<\/pre>\n+     *\n+     * The limit is about 10^15 because double values will no longer be able to represent\n+     * larger integers with exact precision beyond this limit.\n+     *\n+     * @since 22\n+     * @param value The value that needs to be snapped\n+     * @return value either as passed, or floored or ceiled with scale, based on snapToPixel property\n+     *\/\n+    public double snapInnerSpaceY(double value) {\n+        return snapPortionY(value, isSnapToPixel());\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Region.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -1285,0 +1285,11 @@\n+        \/\/ Inner space\n+        assertEquals(Double.POSITIVE_INFINITY, region.snapInnerSpaceX(Double.MAX_VALUE), 0.0);\n+        assertEquals(Double.POSITIVE_INFINITY, region.snapInnerSpaceY(Double.MAX_VALUE), 0.0);\n+        assertEquals(Double.NEGATIVE_INFINITY, region.snapInnerSpaceX(-Double.MAX_VALUE), 0.0);\n+        assertEquals(Double.NEGATIVE_INFINITY, region.snapInnerSpaceY(-Double.MAX_VALUE), 0.0);\n+\n+        assertEquals(Double.POSITIVE_INFINITY, region.snapInnerSpaceX(Double.POSITIVE_INFINITY), 0.0);\n+        assertEquals(Double.POSITIVE_INFINITY, region.snapInnerSpaceY(Double.POSITIVE_INFINITY), 0.0);\n+        assertEquals(Double.NEGATIVE_INFINITY, region.snapInnerSpaceX(Double.NEGATIVE_INFINITY), 0.0);\n+        assertEquals(Double.NEGATIVE_INFINITY, region.snapInnerSpaceY(Double.NEGATIVE_INFINITY), 0.0);\n+\n@@ -1312,0 +1323,11 @@\n+\n+        \/\/ Inner space\n+        assertEquals(Double.MAX_VALUE, region.snapInnerSpaceX(Double.MAX_VALUE), Math.ulp(Double.MAX_VALUE));\n+        assertEquals(Double.MAX_VALUE, region.snapInnerSpaceY(Double.MAX_VALUE), Math.ulp(Double.MAX_VALUE));\n+        assertEquals(-Double.MAX_VALUE, region.snapInnerSpaceX(-Double.MAX_VALUE), 0.0);\n+        assertEquals(-Double.MAX_VALUE, region.snapInnerSpaceY(-Double.MAX_VALUE), 0.0);\n+\n+        assertEquals(Double.POSITIVE_INFINITY, region.snapInnerSpaceX(Double.POSITIVE_INFINITY), 0.0);\n+        assertEquals(Double.POSITIVE_INFINITY, region.snapInnerSpaceY(Double.POSITIVE_INFINITY), 0.0);\n+        assertEquals(Double.NEGATIVE_INFINITY, region.snapInnerSpaceX(Double.NEGATIVE_INFINITY), 0.0);\n+        assertEquals(Double.NEGATIVE_INFINITY, region.snapInnerSpaceY(Double.NEGATIVE_INFINITY), 0.0);\n@@ -1314,1 +1336,1 @@\n-    \/\/ Test for JDK-8255415\n+    \/\/ Test for JDK-8255415, JDK-8311527\n@@ -1339,0 +1361,4 @@\n+\n+                snappedValue = region.snapInnerSpaceX(value);\n+                snapOfSnappedValue = region.snapInnerSpaceX(snappedValue);\n+                assertEquals(failMessage, snappedValue, snapOfSnappedValue, 0.0);\n@@ -1349,0 +1375,4 @@\n+\n+                snappedValue = region.snapInnerSpaceY(value);\n+                snapOfSnappedValue = region.snapInnerSpaceY(snappedValue);\n+                assertEquals(failMessage, snappedValue, snapOfSnappedValue, 0.0);\n@@ -1373,0 +1403,22 @@\n+\n+        \/\/ test snapInnerSpaceX\/snapInnerSpaceY methods\n+\n+        for (double scale: scales) {\n+            stage.setRenderScaleX(scale);\n+            for (int j = 0; j < 1000; j++) {\n+                double value = random.nextDouble() * Integer.MAX_VALUE;\n+                double snappedValue = region.snapInnerSpaceX(value);\n+                double snapOfSnappedValue = region.snapInnerSpaceX(snappedValue);\n+                assertEquals(failMessage, snappedValue, snapOfSnappedValue, 0.0);\n+            }\n+        }\n+\n+        for (double scale: scales) {\n+            stage.setRenderScaleY(scale);\n+            for (int j = 0; j < 1000; j++) {\n+                double value = random.nextDouble() * Integer.MAX_VALUE;\n+                double snappedValue = region.snapInnerSpaceY(value);\n+                double snapOfSnappedValue = region.snapInnerSpaceY(snappedValue);\n+                assertEquals(failMessage, snappedValue, snapOfSnappedValue, 0.0);\n+            }\n+        }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/RegionTest.java","additions":53,"deletions":1,"binary":false,"changes":54,"status":"modified"}]}