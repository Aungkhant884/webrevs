{"files":[{"patch":"@@ -265,2 +265,7 @@\n-    context->runnable = env->NewGlobalRef(runnable);\n-    gdk_threads_add_idle_full(G_PRIORITY_HIGH_IDLE + 30, call_runnable, context, NULL);\n+    if (context != NULL) {\n+        context->runnable = env->NewGlobalRef(runnable);\n+        gdk_threads_add_idle_full(G_PRIORITY_HIGH_IDLE + 30, call_runnable, context, NULL);\n+        \/\/ we release this context in call_runnable\n+    } else {\n+        fprintf(stderr, \"malloc failed in GtkApplication__1submitForLaterInvocation\\n\");\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassApplication.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -48,4 +48,10 @@\n-    context->runnable = env->NewGlobalRef(runnable);\n-    context->flag = 0;\n-    gdk_threads_add_timeout_full(G_PRIORITY_HIGH_IDLE, period, call_runnable_in_timer, context, NULL);\n-    return PTR_TO_JLONG(context);\n+    if (context != NULL) {\n+        context->runnable = env->NewGlobalRef(runnable);\n+        context->flag = 0;\n+        gdk_threads_add_timeout_full(G_PRIORITY_HIGH_IDLE, period, call_runnable_in_timer, context, NULL);\n+        return PTR_TO_JLONG(context);\n+    } else {\n+        \/\/ we throw RuntimeException on Java side when we can't\n+        \/\/ start the timer\n+        return 0L;\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassTimer.cpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -99,0 +99,6 @@\n+#define SAFE_FREE(PTR)  \\\n+    if ((PTR) != NULL) {  \\\n+        free(PTR);     \\\n+        (PTR) = NULL;     \\\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_general.h","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -62,0 +62,6 @@\n+    if (buffer == NULL) {\n+        \/\/ dont process the key event\n+        fprintf(stderr, \"malloc failed in im_filter_keypress\\n\");\n+        return false;\n+    }\n+\n@@ -77,1 +83,8 @@\n-        buffer = (char*)realloc(buffer, buf_len * sizeof (char));\n+        char *tmpBuffer = (char*)realloc(buffer, buf_len * sizeof (char));\n+        if (tmpBuffer == NULL) {\n+            SAFE_FREE(buffer);\n+            \/\/ dont process the key event\n+            fprintf(stderr, \"realloc failed in im_filter_keypress\\n\");\n+            return false;\n+        }\n+        buffer = tmpBuffer;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window_ime.cpp","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -76,3 +76,9 @@\n-        _GlassThreadData = malloc(sizeof(GlassThreadData)); \\\n-        memset(_GlassThreadData, 0x00, sizeof(GlassThreadData)); \\\n-        pthread_setspecific(GlassThreadDataKey, _GlassThreadData); \\\n+        _GlassThreadData = calloc(1, sizeof(GlassThreadData)); \\\n+        if (_GlassThreadData != NULL) \\\n+        { \\\n+            pthread_setspecific(GlassThreadDataKey, _GlassThreadData); \\\n+        } \\\n+        else \\\n+        { \\\n+            fprintf(stderr, \"malloc failed in GLASS_POOL_ENTER\\n\"); \\\n+        } \\\n@@ -80,2 +86,1 @@\n-    assert(_GlassThreadData->counter >= 0); \\\n-    if (_GlassThreadData->counter++ == 0) \\\n+    if (_GlassThreadData != NULL) \\\n@@ -83,1 +88,5 @@\n-        _GlassThreadData->pool = [[NSAutoreleasePool alloc] init]; \\\n+        assert(_GlassThreadData->counter >= 0); \\\n+        if (_GlassThreadData->counter++ == 0) \\\n+        { \\\n+            _GlassThreadData->pool = [[NSAutoreleasePool alloc] init]; \\\n+        } \\\n@@ -86,1 +95,1 @@\n-    if (--_GlassThreadData->counter == 0) \\\n+    if (_GlassThreadData != NULL) \\\n@@ -88,2 +97,6 @@\n-        [_GlassThreadData->pool drain]; \\\n-        _GlassThreadData->pool = nil; \\\n+        if (--_GlassThreadData->counter == 0) \\\n+        { \\\n+            [_GlassThreadData->pool drain]; \\\n+            _GlassThreadData->pool = nil; \\\n+        } \\\n+        assert(_GlassThreadData->counter >= 0); \\\n@@ -91,1 +104,0 @@\n-    assert(_GlassThreadData->counter >= 0); \\\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/ios\/GlassMacros.h","additions":22,"deletions":10,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -365,0 +365,1 @@\n+    NSApplicationDelegateReply reply = NSApplicationDelegateReplySuccess;\n@@ -374,4 +375,2 @@\n-        for (NSUInteger i=0; i<count; i++)\n-        {\n-            NSString *file = [filenames objectAtIndex:i];\n-            if (file != nil)\n+        if (files != NULL) {\n+            for (NSUInteger i=0; i<count; i++)\n@@ -379,2 +378,6 @@\n-                (*env)->SetObjectArrayElement(env, files, (jsize)i, (*env)->NewStringUTF(env, [file UTF8String]));\n-                GLASS_CHECK_EXCEPTION(env);\n+                NSString *file = [filenames objectAtIndex:i];\n+                if (file != nil)\n+                {\n+                    (*env)->SetObjectArrayElement(env, files, (jsize)i, (*env)->NewStringUTF(env, [file UTF8String]));\n+                    GLASS_CHECK_EXCEPTION(env);\n+                }\n@@ -382,0 +385,4 @@\n+            (*env)->CallVoidMethod(env, self->jApplication, [GlassHelper ApplicationNotifyOpenFilesMethod], files);\n+        } else {\n+            fprintf(stderr, \"NewObjectArray failed in GlassApplication_application\\n\");\n+            reply = NSApplicationDelegateReplyFailure;\n@@ -383,1 +390,0 @@\n-        (*env)->CallVoidMethod(env, self->jApplication, [GlassHelper ApplicationNotifyOpenFilesMethod], files);\n@@ -388,1 +394,1 @@\n-    [theApplication replyToOpenOrPrint:NSApplicationDelegateReplySuccess];\n+    [theApplication replyToOpenOrPrint:reply];\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.m","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -464,0 +464,3 @@\n+    if (jChars == NULL) {\n+        return NULL;\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassKey.m","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -180,3 +180,9 @@\n-        _GlassThreadData = malloc(sizeof(GlassThreadData)); \\\n-        memset(_GlassThreadData, 0x00, sizeof(GlassThreadData)); \\\n-        pthread_setspecific(GlassThreadDataKey, _GlassThreadData); \\\n+        _GlassThreadData = calloc(1, sizeof(GlassThreadData)); \\\n+        if (_GlassThreadData != NULL) \\\n+        { \\\n+            pthread_setspecific(GlassThreadDataKey, _GlassThreadData); \\\n+        } \\\n+        else \\\n+        { \\\n+            fprintf(stderr, \"malloc failed in GLASS_POOL_ENTER\\n\"); \\\n+        } \\\n@@ -184,2 +190,1 @@\n-    assert(_GlassThreadData->counter >= 0); \\\n-    if (_GlassThreadData->counter++ == 0) \\\n+    if (_GlassThreadData != NULL) \\\n@@ -187,1 +192,5 @@\n-        _GlassThreadData->pool = [[NSAutoreleasePool alloc] init]; \\\n+        assert(_GlassThreadData->counter >= 0); \\\n+        if (_GlassThreadData->counter++ == 0) \\\n+        { \\\n+            _GlassThreadData->pool = [[NSAutoreleasePool alloc] init]; \\\n+        } \\\n@@ -190,1 +199,1 @@\n-    if (--_GlassThreadData->counter == 0) \\\n+    if (_GlassThreadData != NULL) \\\n@@ -192,2 +201,6 @@\n-        [_GlassThreadData->pool drain]; \\\n-        _GlassThreadData->pool = nil; \\\n+        if (--_GlassThreadData->counter == 0) \\\n+        { \\\n+            [_GlassThreadData->pool drain]; \\\n+            _GlassThreadData->pool = nil; \\\n+        } \\\n+        assert(_GlassThreadData->counter >= 0); \\\n@@ -195,1 +208,0 @@\n-    assert(_GlassThreadData->counter >= 0); \\\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassMacros.h","additions":22,"deletions":10,"binary":false,"changes":32,"status":"modified"}]}