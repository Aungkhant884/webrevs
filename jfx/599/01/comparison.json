{"files":[{"patch":"@@ -914,0 +914,5 @@\n+\n+                        if (is_raw_image) {\n+                            data = (guchar*) convert_BGRA_to_RGBA((const int*) data, w * 4, h);\n+                        }\n+\n@@ -1050,15 +1055,1 @@\n-    cairo_surface_t* cairo_surface;\n-\n-    guchar* pixels = is_raw_image\n-            ? (guchar*) convert_BGRA_to_RGBA((const int*) gdk_pixbuf_get_pixels(pixbuf),\n-                                                gdk_pixbuf_get_rowstride(pixbuf),\n-                                                height)\n-            : gdk_pixbuf_get_pixels(pixbuf);\n-\n-    cairo_surface = cairo_image_surface_create_for_data(\n-            pixels,\n-            CAIRO_FORMAT_ARGB32,\n-            width, height, width * 4);\n-\n-    cairo_set_source_surface(context, cairo_surface, 0, 0);\n-    cairo_set_operator(context, CAIRO_OPERATOR_SOURCE);\n+    gdk_cairo_set_source_pixbuf(context, pixbuf, 0, 0);\n@@ -1067,3 +1058,0 @@\n-    if (is_raw_image) {\n-        g_free(pixels);\n-    }\n@@ -1071,1 +1059,0 @@\n-    cairo_surface_destroy(cairo_surface);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_dnd.cpp","additions":6,"deletions":19,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,171 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.robot.javafx.dnd;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.embed.swing.SwingFXUtils;\n+import javafx.scene.Scene;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ClipboardContent;\n+import javafx.scene.input.Dragboard;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.input.TransferMode;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.paint.Color;\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Stage;\n+import javafx.stage.WindowEvent;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import test.util.Util;\n+\n+import java.awt.image.BufferedImage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.Assert.fail;\n+\n+public class DndRawImageTest {\n+    static CountDownLatch startupLatch;\n+    static int SIZE = 240; \/\/do not exceed 240 because it's the max drag image size\n+    static Image image = createImage(SIZE, SIZE);\n+    static Stage stage;\n+    static Scene scene;\n+    static Robot robot;\n+\n+    \/\/will change during the test\n+    private Color red = Color.BLACK;\n+    private Color green = Color.BLACK;\n+    private Color blue = Color.BLACK;\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            robot = new Robot();\n+\n+            primaryStage.addEventHandler(WindowEvent.WINDOW_SHOWN, e ->\n+                    Platform.runLater(startupLatch::countDown));\n+\n+            ImageView imageView = new ImageView(image);\n+            imageView.setOnDragDetected(event -> {\n+                ClipboardContent content = new ClipboardContent();\n+                content.putImage(image);\n+                Dragboard dragboard = imageView.startDragAndDrop(TransferMode.ANY);\n+                dragboard.setContent(content);\n+            });\n+\n+            Pane pane = new Pane();\n+            pane.getChildren().add(imageView);\n+            primaryStage.setTitle(\"Drag View Image Colors\");\n+            scene = new Scene(pane);\n+            primaryStage.setScene(scene);\n+            primaryStage.setAlwaysOnTop(true);\n+            primaryStage.setX(200);\n+            primaryStage.setY(200);\n+            primaryStage.show();\n+            stage = primaryStage;\n+        }\n+    }\n+\n+    private static Image createImage(int width, int height) {\n+        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n+        for (int y=0; y<height; y++) {\n+            for (int x=0; x<width; x++) {\n+                if (x < width * 0.33) {\n+                    image.setRGB(x, y, 0xFF0000);\n+                } else if (x < width * 0.66) {\n+                    image.setRGB(x, y, 0x00FF00);\n+                } else {\n+                    image.setRGB(x, y, 0x0000FF);\n+                }\n+            }\n+        }\n+\n+        return SwingFXUtils.toFXImage(image, null);\n+    }\n+\n+    @BeforeClass\n+    public static void initFX() {\n+        startupLatch = new CountDownLatch(1);\n+        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n+        try {\n+            if (!startupLatch.await(10, TimeUnit.SECONDS)) {\n+                fail(\"Timeout waiting for FX runtime to start\");\n+            }\n+        } catch (InterruptedException ex) {\n+            fail(\"Unexpected exception: \" + ex);\n+        }\n+    }\n+\n+    @Test\n+    public void testDragView() {\n+        Util.sleep(200);\n+\n+        int x = (int) (scene.getWindow().getX() + scene.getX());\n+        int y = (int) (scene.getWindow().getY() + scene.getY());\n+\n+        Util.runAndWait(() -> {\n+            robot.mouseMove(x + 1, y + 1);\n+            robot.mousePress(MouseButton.PRIMARY);\n+        });\n+\n+        Util.runAndWait(() -> {\n+            \/\/activate drag\n+            robot.mouseMove(x + 300, y + 300);\n+        });\n+\n+        Util.sleep(300);\n+\n+        Util.runAndWait(() -> {\n+            \/\/may vary according to platform - this considers that the drag image is centered\n+            int centerPos = (int) robot.getMouseX();\n+\n+            int redX = centerPos - (SIZE \/ 3);\n+            int greenX = centerPos;\n+            int blueX = centerPos + (SIZE \/ 3);\n+            int colorY = (int) robot.getMouseY();\n+\n+            red = robot.getPixelColor(redX, colorY);\n+            green = robot.getPixelColor(greenX, colorY);\n+            blue = robot.getPixelColor(blueX, colorY);\n+        });\n+\n+        Util.runAndWait(() -> robot.mouseRelease(MouseButton.PRIMARY));\n+\n+        Assert.assertEquals(\"First color must be red\", Color.color(1D, 0D, 0D, 1D), red);\n+        Assert.assertEquals(\"Second color must be green\", Color.color(0D, 1D, 0D, 1D), green);\n+        Assert.assertEquals(\"Third color must be blue\", Color.color(0D, 0D, 1D, 1D), blue);\n+    }\n+\n+    @AfterClass\n+    public static void teardown() {\n+        Platform.runLater(stage::hide);\n+        Platform.exit();\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/dnd\/DndRawImageTest.java","additions":171,"deletions":0,"binary":false,"changes":171,"status":"added"}]}