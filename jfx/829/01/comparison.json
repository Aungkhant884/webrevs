{"files":[{"patch":"@@ -183,1 +183,9 @@\n-            value = null;  \/\/ clear cached value to avoid hard reference to stale data\n+\n+            \/*\n+             * Cached value should be cleared to avoid a strong reference to stale data,\n+             * but only if this binding didn't become valid after firing the event:\n+             *\/\n+\n+            if (!valid) {\n+                value = null;\n+            }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/ObjectBinding.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -55,0 +55,18 @@\n+    @Test\n+    void invalidationWhichBecomesValidDuringCallbacksShouldReturnCorrectValue() {\n+        LazyObjectBindingStub<String> binding = new LazyObjectBindingStub<>() {\n+            @Override\n+            protected String computeValue() {\n+                return \"A\";\n+            }\n+        };\n+\n+        binding.addListener(obs -> {\n+            assertEquals(\"A\", binding.get());\n+        });\n+\n+        binding.invalidate();  \/\/ becomes valid again immediately\n+\n+        assertEquals(\"A\", binding.get());\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/LazyObjectBindingTest.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"}]}