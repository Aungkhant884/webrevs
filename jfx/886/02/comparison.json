{"files":[{"patch":"@@ -297,2 +297,0 @@\n-\n-\n@@ -375,0 +373,1 @@\n+        double cornerRegionPadding = tableHeaderRow == null ? 0.0 : tableHeaderRow.cornerPadding.get();\n@@ -376,1 +375,1 @@\n-        double w = snapSizeX(getWidth()) - (snappedLeftInset() + snappedRightInset());\n+        double w = snapSizeX(getWidth()) - (snappedLeftInset() + snappedRightInset()) - cornerRegionPadding;\n@@ -479,0 +478,3 @@\n+        if (tableHeaderRow != null) {\n+            changeListenerHandler.unregisterChangeListeners(tableHeaderRow.cornerPadding);\n+        }\n@@ -480,0 +482,7 @@\n+        if (tableHeaderRow != null) {\n+            changeListenerHandler.registerChangeListener(tableHeaderRow.cornerPadding, o -> {\n+                if (isLastVisibleColumn) {\n+                    requestLayout();\n+                }\n+            });\n+        }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableColumnHeader.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.DoubleProperty;\n@@ -37,1 +37,1 @@\n-import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n@@ -39,0 +39,2 @@\n+import javafx.beans.value.ChangeListener;\n+import javafx.beans.value.WeakChangeListener;\n@@ -41,0 +43,1 @@\n+import javafx.geometry.Bounds;\n@@ -49,1 +52,0 @@\n-import javafx.scene.control.TableColumn;\n@@ -51,1 +53,0 @@\n-import javafx.scene.layout.Border;\n@@ -111,0 +112,1 @@\n+    final DoubleProperty cornerPadding = new SimpleDoubleProperty();\n@@ -158,0 +160,2 @@\n+    private final ChangeListener<Boolean> cornerPaddingListener = (obs, ov, nv) -> updateCornerPadding();\n+\n@@ -173,0 +177,3 @@\n+    private final WeakChangeListener<Boolean> weakCornerPaddingListener =\n+            new WeakChangeListener<>(cornerPaddingListener);\n+\n@@ -264,0 +271,2 @@\n+        cornerRegion.visibleProperty().addListener(weakCornerPaddingListener);\n+        flow.getVbar().visibleProperty().addListener(weakCornerPaddingListener);\n@@ -384,1 +393,2 @@\n-        \/\/ position the top-right rectangle (which sits above the scrollbar)\n+        \/\/ position the top-right rectangle (which sits above the scrollbar if visible, or adds padding to the\n+        \/\/ header of the last visible column if not)\n@@ -386,0 +396,1 @@\n+        updateCornerPadding();\n@@ -665,0 +676,23 @@\n+\n+    \/\/ When the corner region is visible, and the vertical scrollbar is not,\n+    \/\/ in case the corner region is over the header of the last\n+    \/\/ visible column, if any, we have to consider its width as extra padding\n+    \/\/ for that header, to prevent the content of the latter from being partially\n+    \/\/ covered.\n+    private void updateCornerPadding() {\n+        double padding = 0.0;\n+        if (cornerRegion.isVisible() && !flow.getVbar().isVisible()) {\n+            double x = cornerRegion.getLayoutX();\n+            padding = getRootHeader().getColumnHeaders().stream()\n+                    .filter(header -> header.isLastVisibleColumn)\n+                    .findFirst()\n+                    .map(header -> {\n+                        Bounds bounds = header.localToScene(header.getBoundsInLocal());\n+                        return bounds.getMinX() <= x && x < bounds.getMaxX() ?\n+                             cornerRegion.getWidth() : 0.0;\n+                    })\n+                    .orElse(0.0);\n+        }\n+        cornerPadding.set(padding);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableHeaderRow.java","additions":40,"deletions":6,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -49,0 +49,3 @@\n+import javafx.scene.control.Slider;\n+import javafx.scene.layout.Region;\n+import org.junit.After;\n@@ -123,0 +126,2 @@\n+    private StageLoader stageLoader;\n+\n@@ -138,0 +143,6 @@\n+    @After\n+    public void cleanup() {\n+        if (stageLoader != null) {\n+            stageLoader.dispose();\n+        }\n+    }\n@@ -5851,0 +5862,85 @@\n+    \/\/ See JDK-8087673\n+    @Test\n+    public void testTableMenuButtonDoesNotOverlapColumnHeaderGraphic() {\n+        TableView<String> table = new TableView<>();\n+        table.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);\n+        table.setTableMenuButtonVisible(true);\n+        TableColumn<String, String> column = new TableColumn<>();\n+        Slider slider = new Slider();\n+        slider.setValue(100);\n+        column.setGraphic(slider);\n+        table.getColumns().add(column);\n+\n+        stageLoader = new StageLoader(table);\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        ScrollBar vbar = VirtualFlowTestUtils.getVirtualFlowVerticalScrollbar(table);\n+        assertFalse(vbar.isVisible());\n+\n+        StackPane thumb = (StackPane) slider.lookup(\".thumb\");\n+        assertNotNull(thumb);\n+        double thumbMaxX = thumb.localToScene(thumb.getLayoutBounds()).getMaxX();\n+\n+        StackPane corner = (StackPane) table.lookup(\".show-hide-columns-button\");\n+        assertNotNull(corner);\n+        assertTrue(corner.isVisible());\n+        double cornerMinX = corner.localToScene(corner.getLayoutBounds()).getMinX();\n+\n+        \/\/ Verify that the slider's thumb is fully visible, and it is not overlapped\n+        \/\/ by the corner region\n+        assertTrue(thumbMaxX < cornerMinX);\n+    }\n+\n+    \/\/ See JDK-8087673\n+    @Test\n+    public void testTableMenuButtonDoesNotOverlapLastColumnHeader() {\n+        TableView<String> table = new TableView<>();\n+        table.setTableMenuButtonVisible(true);\n+        for (int i = 0; i < 10; i++) {\n+            final TableColumn<String, String> column = new TableColumn<>(i + \"          \");\n+            column.setCellValueFactory(value -> new SimpleStringProperty(value.getValue()));\n+            table.getColumns().add(column);\n+        }\n+        for (int i = 0; i < 10; i++) {\n+            table.getItems().add(Integer.toString(i));\n+        }\n+\n+        stageLoader = new StageLoader(new Scene(table, 300, 300));\n+\n+        TableColumn<String, ?> lastColumn = table.getColumns().get(9);\n+        lastColumn.setSortType(DESCENDING);\n+        table.getSortOrder().setAll(lastColumn);\n+        Toolkit.getToolkit().firePulse();\n+\n+        TableColumnHeader lastColumnHeader = VirtualFlowTestUtils.getTableColumnHeader(table, lastColumn);\n+        assertNotNull(lastColumnHeader);\n+\n+        Region arrow = (Region) lastColumnHeader.lookup(\".arrow\");\n+        assertNotNull(arrow);\n+\n+        ScrollBar vbar = VirtualFlowTestUtils.getVirtualFlowVerticalScrollbar(table);\n+        assertFalse(vbar.isVisible());\n+        ScrollBar hbar = VirtualFlowTestUtils.getVirtualFlowHorizontalScrollbar(table);\n+        assertTrue(hbar.isVisible());\n+\n+        table.scrollToColumnIndex(9);\n+\n+        double headerMinX = lastColumnHeader.localToScene(lastColumnHeader.getLayoutBounds()).getMinX();\n+        double headerMaxX = lastColumnHeader.localToScene(lastColumnHeader.getLayoutBounds()).getMaxX();\n+\n+        double arrowMaxX = arrow.localToScene(arrow.getLayoutBounds()).getMaxX();\n+\n+        StackPane corner = (StackPane) table.lookup(\".show-hide-columns-button\");\n+        assertNotNull(corner);\n+        assertTrue(corner.isVisible());\n+        double cornerMinX = corner.localToScene(corner.getLayoutBounds()).getMinX();\n+\n+        \/\/ Verify that the corner region is over the last visible column header\n+        assertTrue(headerMinX < cornerMinX);\n+        assertTrue(cornerMinX < headerMaxX);\n+\n+        \/\/ Verify that the arrow is fully visible, and it is not overlapped\n+        \/\/ by the corner region\n+        assertTrue(arrowMaxX < cornerMinX);\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewTest.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import javafx.scene.control.ScrollBar;\n@@ -48,0 +49,1 @@\n+import javafx.scene.control.Slider;\n@@ -50,0 +52,3 @@\n+import javafx.scene.control.skin.TableColumnHeader;\n+import javafx.scene.layout.Region;\n+import org.junit.After;\n@@ -125,0 +130,1 @@\n+    private StageLoader stageLoader;\n@@ -186,0 +192,7 @@\n+    @After\n+    public void cleanup() {\n+        if (stageLoader != null) {\n+            stageLoader.dispose();\n+        }\n+    }\n+\n@@ -6990,0 +7003,91 @@\n+\n+    \/\/ See JDK-8087673\n+    @Test\n+    public void testTreeTableMenuButtonDoesNotOverlapColumnHeaderGraphic() {\n+        TreeTableView<String> table = new TreeTableView<>();\n+        table.setColumnResizePolicy(TreeTableView.CONSTRAINED_RESIZE_POLICY);\n+        table.setTableMenuButtonVisible(true);\n+        TreeTableColumn<String, String> column = new TreeTableColumn<>();\n+        Slider slider = new Slider();\n+        slider.setValue(100);\n+        column.setGraphic(slider);\n+        table.getColumns().add(column);\n+\n+        stageLoader = new StageLoader(table);\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        ScrollBar vbar = VirtualFlowTestUtils.getVirtualFlowVerticalScrollbar(table);\n+        assertFalse(vbar.isVisible());\n+\n+        StackPane thumb = (StackPane) slider.lookup(\".thumb\");\n+        assertNotNull(thumb);\n+        double thumbMaxX = thumb.localToScene(thumb.getLayoutBounds()).getMaxX();\n+\n+        StackPane corner = (StackPane) table.lookup(\".show-hide-columns-button\");\n+        assertNotNull(corner);\n+        assertTrue(corner.isVisible());\n+        double cornerMinX = corner.localToScene(corner.getLayoutBounds()).getMinX();\n+\n+        \/\/ Verify that the slider's thumb is fully visible, and it is not overlapped\n+        \/\/ by the corner region\n+        assertTrue(thumbMaxX < cornerMinX);\n+    }\n+\n+    \/\/ See JDK-8087673\n+    @Test\n+    public void testTableMenuButtonDoesNotOverlapLastColumnHeader() {\n+        TreeTableView<String> table = new TreeTableView<>();\n+        table.setTableMenuButtonVisible(true);\n+        for (int i = 0; i < 10; i++) {\n+            TreeTableColumn<String, String> column = new TreeTableColumn<>(i + \"          \");\n+            column.setCellValueFactory(value -> new SimpleStringProperty(value.getValue().getValue()));\n+            table.getColumns().add(column);\n+        }\n+\n+        TreeItem<String> root = new TreeItem<>();\n+        root.setExpanded(true);\n+        for (int i = 0; i < 10; i++) {\n+            root.getChildren().add(new TreeItem<>(Integer.toString(i)));\n+        }\n+        table.setRoot(root);\n+        table.setShowRoot(false);\n+\n+        stageLoader = new StageLoader(new Scene(table, 300, 300));\n+\n+        TreeTableColumn<String, ?> lastColumn = table.getColumns().get(9);\n+        lastColumn.setSortType(TreeTableColumn.SortType.DESCENDING);\n+        table.getSortOrder().setAll(lastColumn);\n+        Toolkit.getToolkit().firePulse();\n+\n+        TableColumnHeader lastColumnHeader = VirtualFlowTestUtils.getTableColumnHeader(table, lastColumn);\n+        assertNotNull(lastColumnHeader);\n+\n+        Region arrow = (Region) lastColumnHeader.lookup(\".arrow\");\n+        assertNotNull(arrow);\n+\n+        ScrollBar vbar = VirtualFlowTestUtils.getVirtualFlowVerticalScrollbar(table);\n+        assertFalse(vbar.isVisible());\n+        ScrollBar hbar = VirtualFlowTestUtils.getVirtualFlowHorizontalScrollbar(table);\n+        assertTrue(hbar.isVisible());\n+\n+        table.scrollToColumnIndex(9);\n+\n+        double headerMinX = lastColumnHeader.localToScene(lastColumnHeader.getLayoutBounds()).getMinX();\n+        double headerMaxX = lastColumnHeader.localToScene(lastColumnHeader.getLayoutBounds()).getMaxX();\n+\n+        double arrowMaxX = arrow.localToScene(arrow.getLayoutBounds()).getMaxX();\n+\n+        StackPane corner = (StackPane) table.lookup(\".show-hide-columns-button\");\n+        assertNotNull(corner);\n+        assertTrue(corner.isVisible());\n+        double cornerMinX = corner.localToScene(corner.getLayoutBounds()).getMinX();\n+\n+        \/\/ Verify that the corner region is over the last visible column header\n+        assertTrue(headerMinX < cornerMinX);\n+        assertTrue(cornerMinX < headerMaxX);\n+\n+        \/\/ Verify that the arrow is fully visible, and it is not overlapped\n+        \/\/ by the corner region\n+        assertTrue(arrowMaxX < cornerMinX);\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"modified"}]}