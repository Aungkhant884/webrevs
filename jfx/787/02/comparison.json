{"files":[{"patch":"@@ -1,135 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package attenuation;\n-\n-import java.util.List;\n-\n-import javafx.beans.binding.Bindings;\n-import javafx.beans.property.DoubleProperty;\n-import javafx.beans.property.ObjectProperty;\n-import javafx.collections.ObservableList;\n-import javafx.geometry.Point3D;\n-import javafx.scene.DirectionalLight;\n-import javafx.scene.Node;\n-import javafx.scene.PointLight;\n-import javafx.scene.SpotLight;\n-import javafx.scene.control.Label;\n-import javafx.scene.control.Slider;\n-import javafx.scene.control.TextField;\n-import javafx.scene.layout.HBox;\n-import javafx.scene.layout.VBox;\n-import javafx.scene.transform.Rotate;\n-import javafx.scene.transform.Transform;\n-import javafx.util.converter.NumberStringConverter;\n-\n-\/**\n- * A {@code LightingSample} with additional controls for light attenuation.\n- *\/\n-public class AttenLightingSample extends LightingSample {\n-\n-    @Override\n-    protected VBox addPointLightControls(PointLight light) {\n-        var vbox = super.addLightControls(light);\n-        var range = createSliderControl(\"range\", light.maxRangeProperty(), 0, 500, 150);\n-        var c = createSliderControl(\"constant\", light.constantAttenuationProperty(), -1, 1, light.getConstantAttenuation());\n-        var lc = createSliderControl(\"linear\", light.linearAttenuationProperty(), -0.1, 0.1, light.getLinearAttenuation());\n-        var qc = createSliderControl(\"quadratic\", light.quadraticAttenuationProperty(), -0.01, 0.01, light.getQuadraticAttenuation());\n-        vbox.getChildren().addAll(range, c, lc, qc);\n-        return vbox;\n-    }\n-\n-    @Override\n-    protected VBox addSpotLightControls(SpotLight light) {\n-        var vbox = addPointLightControls(light);\n-        var ia = createSliderControl(\"inner\", light.innerAngleProperty(), 0, 180, light.getInnerAngle());\n-        var oa = createSliderControl(\"outer\", light.outerAngleProperty(), 0, 180, light.getOuterAngle());\n-        var fo = createSliderControl(\"falloff\", light.falloffProperty(), -5, 5, light.getFalloff());\n-        vbox.getChildren().addAll(ia, oa, fo);\n-\n-        List<Node> directionControls = createDirectionControls(light.getTransforms(), light.directionProperty());\n-        vbox.getChildren().addAll(directionControls);\n-        return vbox;\n-    }\n-\n-    @Override\n-    protected VBox addDirectionalLightControls(DirectionalLight light) {\n-        var vbox = super.addLightControls(light);\n-        List<Node> directionControls = createDirectionControls(light.getTransforms(), light.directionProperty());\n-        vbox.getChildren().addAll(directionControls);\n-        return vbox;\n-    }\n-\n-    private List<Node> createDirectionControls(ObservableList<Transform> transforms, ObjectProperty<Point3D> directionProperty) {\n-        var transX = new Rotate(0, Rotate.X_AXIS);\n-        var transY = new Rotate(0, Rotate.Y_AXIS);\n-        var transZ = new Rotate(0, Rotate.Z_AXIS);\n-        transforms.addAll(transX, transY, transZ);\n-        var rotX = createSliderControl(\"rot x\", transX.angleProperty(), -180, 180, 0);\n-        var rotY = createSliderControl(\"rot y\", transY.angleProperty(), -180, 180, 0);\n-        var rotZ = createSliderControl(\"rot z\", transZ.angleProperty(), -180, 180, 0);\n-\n-        var sliderX = createSlider(-5, 5, directionProperty.get().getX());\n-        var sliderY = createSlider(-5, 5, directionProperty.get().getY());\n-        var sliderZ = createSlider(-5, 5, directionProperty.get().getZ());\n-        directionProperty.bind(Bindings.createObjectBinding(() ->\n-            new Point3D(sliderX.getValue(), sliderY.getValue(), sliderZ.getValue()),\n-            sliderX.valueProperty(), sliderY.valueProperty(), sliderZ.valueProperty()));\n-        var dirX = createSliderControl(\"dir x\", sliderX);\n-        var dirY = createSliderControl(\"dir y\", sliderY);\n-        var dirZ = createSliderControl(\"dir z\", sliderZ);\n-\n-        return List.of(rotX, rotY, rotZ, dirX, dirY, dirZ);\n-    }\n-\n-    private HBox createSliderControl(String name, DoubleProperty property, double min, double max, double start) {\n-        var slider = createSlider(min, max, start);\n-        property.bind(slider.valueProperty());\n-        return createSliderControl(name, slider);\n-    }\n-\n-    private HBox createSliderControl(String name, Slider slider) {\n-        var tf = createTextField(slider);\n-        return new HBox(5, new Label(name), slider, tf);\n-    }\n-\n-    private TextField createTextField(Slider slider) {\n-        var tf = new TextField();\n-        tf.textProperty().bindBidirectional(slider.valueProperty(), new NumberStringConverter());\n-        tf.setMaxWidth(50);\n-        return tf;\n-    }\n-\n-    private Slider createSlider(double min, double max, double start) {\n-        var slider = new Slider(min, max, start);\n-        slider.setShowTickMarks(true);\n-        slider.setShowTickLabels(true);\n-        return slider;\n-    }\n-\n-    public static void main(String[] args) {\n-        launch(args);\n-    }\n-}\n","filename":"tests\/performance\/3DLighting\/attenuation\/AttenLightingSample.java","additions":0,"deletions":135,"binary":false,"changes":135,"status":"deleted"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package attenuation;\n+\n+import javafx.beans.binding.When;\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.scene.Group;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ColorPicker;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.WritableImage;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.paint.Color;\n+import javafx.scene.paint.PhongMaterial;\n+import javafx.scene.shape.Box;\n+import javafx.scene.transform.Rotate;\n+\n+class Boxes extends Group {\n+\n+    private static final PhongMaterial MATERIAL = new PhongMaterial();\n+\n+    \/**\n+     * Creates a box-like structure with 3 edges.\n+     *\n+     * @param size distance from the center of the box to an edge\n+     *\/\n+    Boxes(double size) {\n+        var back = createBox(size);\n+        back.setTranslateZ(size);\n+        var right = createBox(size);\n+        right.setRotationAxis(Rotate.Y_AXIS);\n+        right.setRotate(90);\n+        right.setTranslateX(size * 2);\n+        right.setTranslateZ(-size);\n+        var left = createBox(size);\n+        left.setRotationAxis(Rotate.Y_AXIS);\n+        left.setRotate(90);\n+        left.setTranslateX(-size * 2);\n+        left.setTranslateZ(-size);\n+        getChildren().addAll(left, back, right);\n+    }\n+\n+    private Box createBox(double size) {\n+        var box = new Box(size * 4, size * 4, 1);\n+        box.setMaterial(MATERIAL);\n+        return box;\n+    }\n+\n+    static Pane createBoxesControls() {\n+        var diffColorOn = new CheckBox(\"Diff Color\");\n+        diffColorOn.setSelected(true);\n+        var diffColorPicker = new ColorPicker(Color.WHITE);\n+        MATERIAL.diffuseColorProperty().bind(new When(diffColorOn.selectedProperty())\n+                .then(diffColorPicker.valueProperty()).otherwise((Color) null));\n+\n+        var specColorOn = new CheckBox(\"Spec Color\");\n+        var specColorPicker = new ColorPicker(Color.BLACK);\n+        MATERIAL.specularColorProperty().bind(new When(specColorOn.selectedProperty())\n+                .then(specColorPicker.valueProperty()).otherwise((Color) null));\n+\n+        var specPower = Controls.createSliderControl(\"Spec Power\", MATERIAL.specularPowerProperty(), 0, 400, MATERIAL.getSpecularPower());\n+\n+        var diffMapOn = new CheckBox(\"Diff Map\");\n+        var diffMapPicker = new ColorPicker(Color.BLACK);\n+        setupMapBindings(MATERIAL.diffuseMapProperty(), diffMapPicker.valueProperty(), diffMapOn.selectedProperty());\n+\n+        var specMapOn = new CheckBox(\"Spec Map\");\n+        var specMapPicker = new ColorPicker(Color.BLACK);\n+        setupMapBindings(MATERIAL.specularMapProperty(), specMapPicker.valueProperty(), specMapOn.selectedProperty());\n+\n+        var selfIllumMapOn = new CheckBox(\"SelfIllum Map\");\n+        var selfIllumMapPicker = new ColorPicker(Color.BLACK);\n+        setupMapBindings(MATERIAL.selfIlluminationMapProperty(), selfIllumMapPicker.valueProperty(), selfIllumMapOn.selectedProperty());\n+\n+        var gridPane = new GridPane();\n+        int row = 0;\n+        gridPane.add(diffColorOn, 0, row);\n+        gridPane.add(diffColorPicker, 1, row);\n+        row++;\n+        gridPane.add(specColorOn, 0, row);\n+        gridPane.add(specColorPicker, 1, row);\n+        row++;\n+        gridPane.add(specPower, 0, row, 2, 1);\n+        row++;\n+        gridPane.add(diffMapOn, 0, row);\n+        gridPane.add(diffMapPicker, 1, row);\n+        row++;\n+        gridPane.add(specMapOn, 0, row);\n+        gridPane.add(specMapPicker, 1, row);\n+        row++;\n+        gridPane.add(selfIllumMapOn, 0, row);\n+        gridPane.add(selfIllumMapPicker, 1, row);\n+        return gridPane;\n+    }\n+\n+    private static void setupMapBindings(ObjectProperty<Image> map, ObjectProperty<Color> colorProp, BooleanProperty on) {\n+        var image = createMapImage(colorProp);\n+        map.bind(new When(on).then(image).otherwise((WritableImage) null));\n+    }\n+\n+    static Image createMapImage(ObjectProperty<Color> colorProp) {\n+        var image = new WritableImage(1, 1);\n+        image.getPixelWriter().setColor(0, 0, colorProp.get());\n+        colorProp.addListener((obs, ov, nv) -> image.getPixelWriter().setColor(0, 0, nv));\n+        return image;\n+    }\n+}\n","filename":"tests\/performance\/3DLighting\/attenuation\/Boxes.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package attenuation;\n+\n+import java.util.List;\n+\n+import javafx.beans.binding.Bindings;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.collections.ObservableList;\n+import javafx.geometry.Point3D;\n+import javafx.geometry.Pos;\n+import javafx.scene.DirectionalLight;\n+import javafx.scene.LightBase;\n+import javafx.scene.Node;\n+import javafx.scene.PointLight;\n+import javafx.scene.SpotLight;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ColorPicker;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.transform.Rotate;\n+import javafx.scene.transform.Transform;\n+import javafx.util.converter.NumberStringConverter;\n+\n+final class Controls {\n+\n+    static TitledPane addPointLightControls(PointLight light) {\n+        var controls = createPointLightControls(light);\n+        return createLightControls(light, controls);\n+    }\n+\n+    static TitledPane addSpotLightControls(SpotLight light) {\n+        var ia = createSliderControl(\"inner\", light.innerAngleProperty(), 0, 180, light.getInnerAngle());\n+        var oa = createSliderControl(\"outer\", light.outerAngleProperty(), 0, 180, light.getOuterAngle());\n+        var fo = createSliderControl(\"falloff\", light.falloffProperty(), -5, 5, light.getFalloff());\n+        VBox controls = createPointLightControls(light);\n+        controls.getChildren().addAll(ia, oa, fo);\n+\n+        List<Node> directionControls = createDirectionControls(light.getTransforms(), light.directionProperty());\n+        controls.getChildren().addAll(directionControls);\n+        return createLightControls(light, controls);\n+    }\n+\n+    private static VBox createPointLightControls(PointLight light) {\n+        var range = createSliderControl(\"range\", light.maxRangeProperty(), 0, 500, 150);\n+        var c = createSliderControl(\"constant\", light.constantAttenuationProperty(), -1, 1, light.getConstantAttenuation());\n+        var lc = createSliderControl(\"linear\", light.linearAttenuationProperty(), -0.1, 0.1, light.getLinearAttenuation());\n+        var qc = createSliderControl(\"quadratic\", light.quadraticAttenuationProperty(), -0.01, 0.01, light.getQuadraticAttenuation());\n+        return new VBox(range, c, lc, qc);\n+    }\n+\n+    static TitledPane addDirectionalLightControls(DirectionalLight light) {\n+        List<Node> directionControls = createDirectionControls(light.getTransforms(), light.directionProperty());\n+        var controls = new VBox(directionControls.toArray(new Node[0]));\n+        return createLightControls(light, controls);\n+    }\n+\n+    static TitledPane createLightControls(LightBase light, Pane content) {\n+        var lightOn = new CheckBox(light.getClass().getSimpleName());\n+        light.lightOnProperty().bind(lightOn.selectedProperty());\n+        var colorPicker = new ColorPicker(light.getColor());\n+        light.colorProperty().bind(colorPicker.valueProperty());\n+        var titleControls = new HBox(5, lightOn, colorPicker);\n+        titleControls.setAlignment(Pos.CENTER_LEFT);\n+\n+        var titlePane = new TitledPane(\"\", content);\n+        titlePane.setGraphic(titleControls);\n+        titlePane.setExpanded(false);\n+        return titlePane;\n+    }\n+\n+    private static List<Node> createDirectionControls(ObservableList<Transform> transforms, ObjectProperty<Point3D> directionProperty) {\n+        var transX = new Rotate(0, Rotate.X_AXIS);\n+        var transY = new Rotate(0, Rotate.Y_AXIS);\n+        var transZ = new Rotate(0, Rotate.Z_AXIS);\n+        transforms.addAll(transX, transY, transZ);\n+        var rotX = createSliderControl(\"rot x\", transX.angleProperty(), -180, 180, 0);\n+        var rotY = createSliderControl(\"rot y\", transY.angleProperty(), -180, 180, 0);\n+        var rotZ = createSliderControl(\"rot z\", transZ.angleProperty(), -180, 180, 0);\n+\n+        var sliderX = createSlider(-5, 5, directionProperty.get().getX());\n+        var sliderY = createSlider(-5, 5, directionProperty.get().getY());\n+        var sliderZ = createSlider(-5, 5, directionProperty.get().getZ());\n+        directionProperty.bind(Bindings.createObjectBinding(() ->\n+            new Point3D(sliderX.getValue(), sliderY.getValue(), sliderZ.getValue()),\n+            sliderX.valueProperty(), sliderY.valueProperty(), sliderZ.valueProperty()));\n+        var dirX = createSliderControl(\"dir x\", sliderX);\n+        var dirY = createSliderControl(\"dir y\", sliderY);\n+        var dirZ = createSliderControl(\"dir z\", sliderZ);\n+\n+        return List.of(rotX, rotY, rotZ, dirX, dirY, dirZ);\n+    }\n+\n+    static HBox createSliderControl(String name, DoubleProperty property, double min, double max, double start) {\n+        var slider = createSlider(min, max, start);\n+        property.bind(slider.valueProperty());\n+        return createSliderControl(name, slider);\n+    }\n+\n+    private static HBox createSliderControl(String name, Slider slider) {\n+        var tf = createTextField(slider);\n+        return new HBox(5, new Label(name), slider, tf);\n+    }\n+\n+    private static TextField createTextField(Slider slider) {\n+        var tf = new TextField();\n+        tf.textProperty().bindBidirectional(slider.valueProperty(), new NumberStringConverter());\n+        tf.setMaxWidth(50);\n+        return tf;\n+    }\n+\n+    private static Slider createSlider(double min, double max, double start) {\n+        var slider = new Slider(min, max, start);\n+        slider.setShowTickMarks(true);\n+        slider.setShowTickLabels(true);\n+        return slider;\n+    }\n+}\n","filename":"tests\/performance\/3DLighting\/attenuation\/Controls.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"},{"patch":"@@ -41,1 +41,0 @@\n-import javafx.scene.shape.Box;\n@@ -45,1 +44,0 @@\n-import javafx.scene.transform.Rotate;\n@@ -49,0 +47,1 @@\n+    private final static double LIGHT_REP_RADIUS = 2;\n@@ -52,0 +51,7 @@\n+    private final static double SPHERE_RADIUS = 50;\n+\n+    private final AmbientLight ambientLight1 = new AmbientLight(Color.WHITE);\n+    private final AmbientLight ambientLight2 = new AmbientLight(Color.RED);\n+    private final AmbientLight ambientLight3 = new AmbientLight(Color.BLACK);\n+    final AmbientLight[] ambientLights = new AmbientLight[] {ambientLight1, ambientLight2, ambientLight3};\n+\n@@ -55,0 +61,2 @@\n+    final DirectionalLight[] directionalLights = new DirectionalLight[] {directionalLight1, directionalLight2, directionalLight3};\n+\n@@ -58,0 +66,2 @@\n+    final PointLight[] pointLights = new PointLight[] {pointLight1, pointLight2, pointLight3};\n+\n@@ -61,2 +71,1 @@\n-    final LightBase[] lights = {directionalLight1, directionalLight2, directionalLight3,\n-            pointLight1, pointLight2, pointLight3, spotLight1, spotLight2, spotLight3};\n+    final SpotLight[] spotLights = new SpotLight[] {spotLight1, spotLight2, spotLight3};\n@@ -64,3 +73,1 @@\n-    private Node currentShape;\n-\n-    private final AmbientLight worldLight = new AmbientLight();\n+    private Group shapeGroup = new Group();\n@@ -69,0 +76,2 @@\n+        setStyle(\"-fx-background-color: teal\");\n+\n@@ -72,8 +81,11 @@\n-        for (var light : lights) {\n-            light.setTranslateZ(-LIGHT_Z_DIST);\n-            var lightRep = new Sphere(2);\n-            lightRep.setMaterial(new PhongMaterial(light.getColor()));\n-            lightRep.translateXProperty().bind(light.translateXProperty());\n-            lightRep.translateYProperty().bind(light.translateYProperty());\n-            lightRep.translateZProperty().bind(light.translateZProperty());\n-            rootGroup.getChildren().addAll(light , lightRep);\n+        for (var light : ambientLights) {\n+            addLight(light);\n+        }\n+        for (var light : directionalLights) {\n+            addLight(light);\n+        }\n+        for (var light : pointLights) {\n+            setupLight(light);\n+        }\n+        for (var light : spotLights) {\n+            setupLight(light);\n@@ -90,11 +102,1 @@\n-        directionalLight1.setUserData(\"RED\");\n-        directionalLight2.setUserData(\"BLUE\");\n-        directionalLight3.setUserData(\"MAGENTA\");\n-        pointLight1.setUserData(\"RED\");\n-        pointLight2.setUserData(\"BLUE\");\n-        pointLight3.setUserData(\"MAGENTA\");\n-        spotLight1.setUserData(\"RED\");\n-        spotLight2.setUserData(\"BLUE\");\n-        spotLight3.setUserData(\"MAGENTA\");\n-\n-        rootGroup.getChildren().add(worldLight);\n+        rootGroup.getChildren().add(shapeGroup);\n@@ -104,0 +106,20 @@\n+    private void setupLight(PointLight light) {\n+        light.setTranslateZ(-LIGHT_Z_DIST);\n+        addLight(light);\n+\n+        var lightRep = new Sphere(LIGHT_REP_RADIUS);\n+        var lightRepMat = new PhongMaterial();\n+        lightRepMat.setSelfIlluminationMap(Boxes.createMapImage(light.colorProperty()));\n+        lightRep.setMaterial(lightRepMat);\n+        lightRep.translateXProperty().bind(light.translateXProperty());\n+        lightRep.translateYProperty().bind(light.translateYProperty());\n+        lightRep.translateZProperty().bind(light.translateZProperty());\n+        lightRep.visibleProperty().bind(light.lightOnProperty());\n+        rootGroup.getChildren().add(lightRep);\n+    }\n+\n+    private void addLight(LightBase light) {\n+        light.getScope().add(shapeGroup);\n+        rootGroup.getChildren().add(light);\n+    }\n+\n@@ -105,10 +127,1 @@\n-        var front = new Box(200, 200, 1);\n-        var back = new Box(200, 200, 1);\n-        var side = new Box(200, 200, 1);\n-        side.setRotationAxis(Rotate.Y_AXIS);\n-        side.setRotate(90);\n-        side.setTranslateX(LIGHT_Z_DIST * 2);\n-        side.setTranslateZ(-LIGHT_Z_DIST);\n-        front.setTranslateZ(LIGHT_Z_DIST);\n-        back.setTranslateZ(-LIGHT_Z_DIST * 3);\n-        return new Group(front, back, side);\n+        return new Boxes(LIGHT_Z_DIST);\n@@ -118,1 +131,1 @@\n-        return new Sphere(50, subdivisions);\n+        return new Sphere(SPHERE_RADIUS, subdivisions);\n@@ -159,5 +172,1 @@\n-        worldLight.getExclusionScope().remove(currentShape);\n-        worldLight.getExclusionScope().add(node);\n-        rootGroup.getChildren().remove(currentShape);\n-        rootGroup.getChildren().add(node);\n-        currentShape = node;\n+        shapeGroup.getChildren().setAll(node);\n","filename":"tests\/performance\/3DLighting\/attenuation\/Environment.java","additions":51,"deletions":42,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -31,4 +31,0 @@\n-import javafx.beans.binding.When;\n-import javafx.scene.DirectionalLight;\n-import javafx.scene.Group;\n-import javafx.scene.LightBase;\n@@ -36,1 +32,0 @@\n-import javafx.scene.PointLight;\n@@ -38,1 +33,0 @@\n-import javafx.scene.SpotLight;\n@@ -40,1 +34,0 @@\n-import javafx.scene.control.CheckBox;\n@@ -48,3 +41,0 @@\n-import javafx.scene.paint.Color;\n-import javafx.scene.paint.PhongMaterial;\n-import javafx.scene.shape.Box;\n@@ -69,2 +59,0 @@\n-        environment.setStyle(\"-fx-background-color: teal\");\n-\n@@ -81,13 +69,12 @@\n-        var controls = new VBox(3, sphereControls, meshControls, boxesControls, new HBox(5, playButton, stopButton));\n-        for (var light : environment.lights) {\n-            VBox vBox = null;\n-            if (light instanceof SpotLight) {\n-                vBox = addSpotLightControls((SpotLight) light);\n-            } else if (light instanceof PointLight) {\n-                vBox = addPointLightControls((PointLight) light);\n-            } else if (light instanceof DirectionalLight) {\n-                vBox = addDirectionalLightControls((DirectionalLight) light);\n-            }\n-            var titlePane = new TitledPane(light.getUserData() + \" \" + light.getClass().getSimpleName(), vBox);\n-            titlePane.setExpanded(false);\n-            controls.getChildren().add(titlePane);\n+        var controls = new VBox(0, sphereControls, meshControls, new HBox(5, playButton, stopButton), boxesControls);\n+        for (var light : environment.ambientLights) {\n+            controls.getChildren().add(Controls.createLightControls(light, null));\n+        }\n+        for (var light : environment.pointLights) {\n+            controls.getChildren().add(Controls.addPointLightControls(light));\n+        }\n+        for (var light : environment.spotLights) {\n+            controls.getChildren().add(Controls.addSpotLightControls(light));\n+        }\n+        for (var light : environment.directionalLights) {\n+            controls.getChildren().add(Controls.addDirectionalLightControls(light));\n@@ -107,1 +94,1 @@\n-        setupSlier(quadSlider);\n+        setupSlider(quadSlider);\n@@ -122,1 +109,1 @@\n-        setupSlier(subdivisionSlider);\n+        setupSlider(subdivisionSlider);\n@@ -134,12 +121,8 @@\n-    private HBox createBoxesControls() {\n-        var box = new Button(\"Boxes (static)\");\n-        var specular = new CheckBox(\"Specular\");\n-        var specularBinding = new When(specular.selectedProperty()).then(Color.WHITE).otherwise(Color.BLACK);\n-        var mat = new PhongMaterial(Color.WHITE);\n-        mat.specularColorProperty().bind(specularBinding);\n-        box.setOnAction(e -> {\n-            Group boxes = environment.createBoxes();\n-            boxes.getChildren().forEach(n -> ((Box) n).setMaterial(mat));\n-            switchTo(boxes);\n-        });\n-        return new HBox(5, box, specular);\n+    private Node createBoxesControls() {\n+        var box = new Button(\"Create\");\n+\n+        var titlePane = new TitledPane(\"Boxes\", new VBox(1, box, new HBox(Boxes.createBoxesControls())));\n+\n+        titlePane.setExpanded(false);\n+        box.setOnAction(e -> switchTo(environment.createBoxes()));\n+        return titlePane;\n@@ -148,1 +131,1 @@\n-    private void setupSlier(Slider slider) {\n+    private void setupSlider(Slider slider) {\n@@ -155,18 +138,0 @@\n-    protected VBox addPointLightControls(PointLight light) {\n-        return addLightControls(light);\n-    }\n-\n-    protected VBox addSpotLightControls(SpotLight light) {\n-        return addLightControls(light);\n-    }\n-\n-    protected VBox addDirectionalLightControls(DirectionalLight light) {\n-        return addLightControls(light);\n-    }\n-\n-    protected VBox addLightControls(LightBase light) {\n-        var lightOn = new CheckBox(\"On\/Off\");\n-        light.lightOnProperty().bind(lightOn.selectedProperty());\n-        return new VBox(lightOn);\n-    }\n-\n","filename":"tests\/performance\/3DLighting\/attenuation\/LightingSample.java","additions":23,"deletions":58,"binary":false,"changes":81,"status":"modified"}]}