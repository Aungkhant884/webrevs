{"files":[{"patch":"@@ -68,3 +68,3 @@\n-     * Flag which is set to <code>true<\/code> during {@link #layoutChildren(double, double, double, double)}\n-     * and to <code>false<\/code> after. It is used to determine whether we need to request layout when a\n-     * divider position changed or not.\n+     * Flag which is used to determine whether we need to request layout when a divider position changed or not.\n+     * E.g. We don't want to request layout when we are changing the divider position in\n+     * {@link #layoutChildren(double, double, double, double)} since we are currently doing the layout.\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/SplitPaneSkin.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1341,2 +1341,2 @@\n-     * Previously, this may happen when the divider position changed too a large number (>1),\n-     * which can hang the layout when done during layout (in layoutChildren).\n+     * Previously, this may happen when the divider position changed to a large number (>1),\n+     * which can hang the layout as it resulted in multiple layout requests (through SplitPaneSkin.layoutChildren).\n@@ -1345,2 +1345,16 @@\n-    public void testSplitPaneDividerChangeDoesNotHangLayout() {\n-        AtomicInteger counter = new AtomicInteger();\n+    public void testDividerOverOneDoesNotHangLayout() {\n+        testSetDividerPositionDoesNotHangLayout(10);\n+    }\n+\n+    \/**\n+     * Verifies that a divider position change of the {@link SplitPane} does not hang the layout.\n+     * Previously, this may happen when the divider position changed to a negative number (<1),\n+     * which can hang the layout as it resulted in multiple layout requests (through SplitPaneSkin.layoutChildren).\n+     *\/\n+    @Test\n+    public void testDividerUnderZeroDoesNotHangLayout() {\n+        testSetDividerPositionDoesNotHangLayout(-1);\n+    }\n+\n+    private void testSetDividerPositionDoesNotHangLayout(double dividerPosition) {\n+        AtomicInteger layoutCounter = new AtomicInteger();\n@@ -1350,1 +1364,1 @@\n-                counter.incrementAndGet();\n+                layoutCounter.incrementAndGet();\n@@ -1361,2 +1375,1 @@\n-        \/\/ Set a too big divider position.\n-        pane.setDividerPosition(0, 12);\n+        pane.setDividerPosition(0, dividerPosition);\n@@ -1366,2 +1379,2 @@\n-        \/\/ Reset counter\n-        counter.set(0);\n+        \/\/ Reset layout counter\n+        layoutCounter.set(0);\n@@ -1372,1 +1385,1 @@\n-        assertTrue(counter.get() > 0);\n+        assertTrue(layoutCounter.get() > 0);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/SplitPaneTest.java","additions":23,"deletions":10,"binary":false,"changes":33,"status":"modified"}]}