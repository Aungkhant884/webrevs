{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import javafx.scene.control.Accordion;\n@@ -68,0 +67,7 @@\n+    \/**\n+     * Flag which is used to determine whether we need to request layout when a divider position changed or not.\n+     * E.g. We don't want to request layout when we are changing the divider position in\n+     * {@link #layoutChildren(double, double, double, double)} since we are currently doing the layout.\n+     * See also: JDK-8277122\n+     *\/\n+    private boolean duringLayout;\n@@ -219,2 +225,2 @@\n-        \/\/ If the window is less than the min size we want to resize\n-        \/\/ proportionally\n+        duringLayout = true;\n+        \/\/ If the window is less than the min size we want to resize proportionally\n@@ -238,0 +244,1 @@\n+            duringLayout = false;\n@@ -414,0 +421,1 @@\n+        duringLayout = false;\n@@ -620,1 +628,1 @@\n-        initializeDivderEventHandlers(c);\n+        initializeDividerEventHandlers(c);\n@@ -636,1 +644,1 @@\n-    private void initializeDivderEventHandlers(final ContentDivider divider) {\n+    private void initializeDividerEventHandlers(final ContentDivider divider) {\n@@ -957,1 +965,3 @@\n-            getSkinnable().requestLayout();\n+            if (!duringLayout) {\n+                getSkinnable().requestLayout();\n+            }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/SplitPaneSkin.java","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import javafx.collections.FXCollections;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TabPane;\n+import org.junit.After;\n@@ -56,0 +61,2 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n@@ -68,0 +75,1 @@\n+    private StageLoader stageLoader;\n@@ -82,0 +90,5 @@\n+    @After\n+    public void cleanup() {\n+        if (stageLoader != null) stageLoader.dispose();\n+    }\n+\n@@ -1332,0 +1345,52 @@\n+\n+    \/**\n+     * Verifies that a divider position change of the {@link SplitPane} does not hang the layout.\n+     * Previously, this may happen when the divider position changed to a large number (>1),\n+     * which can hang the layout as it resulted in multiple layout requests (through SplitPaneSkin.layoutChildren).\n+     * See also: JDK-8277122\n+     *\/\n+    @Test\n+    public void testDividerOverOneDoesNotHangLayout() {\n+        testSetDividerPositionDoesNotHangLayout(10);\n+    }\n+\n+    \/**\n+     * Verifies that a divider position change of the {@link SplitPane} does not hang the layout.\n+     * Previously, this may happen when the divider position changed to a negative number (<1),\n+     * which can hang the layout as it resulted in multiple layout requests (through SplitPaneSkin.layoutChildren).\n+     * See also: JDK-8277122\n+     *\/\n+    @Test\n+    public void testDividerUnderZeroDoesNotHangLayout() {\n+        testSetDividerPositionDoesNotHangLayout(-1);\n+    }\n+\n+    private void testSetDividerPositionDoesNotHangLayout(double dividerPosition) {\n+        AtomicInteger layoutCounter = new AtomicInteger();\n+        ComboBox<String> cbx = new ComboBox<>(FXCollections.observableArrayList(\"1\", \"2\", \"3\")) {\n+            @Override\n+            protected void layoutChildren() {\n+                layoutCounter.incrementAndGet();\n+                super.layoutChildren();\n+            }\n+        };\n+        SplitPane pane = new SplitPane(new Label(\"AAAAA\"), new TabPane(new Tab(\"Test\", cbx)));\n+        StackPane root = new StackPane(pane);\n+\n+        stageLoader = new StageLoader(root);\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        pane.setDividerPosition(0, dividerPosition);\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        \/\/ Reset layout counter\n+        layoutCounter.set(0);\n+\n+        cbx.getSelectionModel().select(0);\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertTrue(layoutCounter.get() > 0);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/SplitPaneTest.java","additions":66,"deletions":1,"binary":false,"changes":67,"status":"modified"}]}