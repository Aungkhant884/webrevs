{"files":[{"patch":"@@ -39,1 +39,0 @@\n-import javafx.scene.control.Accordion;\n@@ -68,0 +67,6 @@\n+    \/**\n+     * Flag which is set to <code>true<\/code> during {@link #layoutChildren(double, double, double, double)}\n+     * and to <code>false<\/code> after. It is used to determine whether we need to request layout when a\n+     * divider position changed or not.\n+     *\/\n+    private boolean duringLayout;\n@@ -219,2 +224,2 @@\n-        \/\/ If the window is less than the min size we want to resize\n-        \/\/ proportionally\n+        \/\/ If the window is less than the min size we want to resize proportionally\n+        duringLayout = true;\n@@ -238,0 +243,1 @@\n+            duringLayout = false;\n@@ -414,0 +420,1 @@\n+        duringLayout = false;\n@@ -620,1 +627,1 @@\n-        initializeDivderEventHandlers(c);\n+        initializeDividerEventHandlers(c);\n@@ -636,1 +643,1 @@\n-    private void initializeDivderEventHandlers(final ContentDivider divider) {\n+    private void initializeDividerEventHandlers(final ContentDivider divider) {\n@@ -957,1 +964,3 @@\n-            getSkinnable().requestLayout();\n+            if (!duringLayout) {\n+                getSkinnable().requestLayout();\n+            }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/SplitPaneSkin.java","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import javafx.collections.FXCollections;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TabPane;\n@@ -56,0 +60,2 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n@@ -1332,0 +1338,38 @@\n+\n+    \/**\n+     * Verifies that a divider position change of the {@link SplitPane} does not hang the layout.\n+     * Previously, this may happen when the divider position changed too a large number (>1),\n+     * which can hang the layout when done during layout (in layoutChildren).\n+     *\/\n+    @Test\n+    public void testSplitPaneDividerChangeDoesNotHangLayout() {\n+        AtomicInteger counter = new AtomicInteger();\n+        ComboBox<String> cbx = new ComboBox<>(FXCollections.observableArrayList(\"1\", \"2\", \"3\")) {\n+            @Override\n+            protected void layoutChildren() {\n+                counter.incrementAndGet();\n+                super.layoutChildren();\n+            }\n+        };\n+        SplitPane pane = new SplitPane(new Label(\"AAAAA\"), new TabPane(new Tab(\"Test\", cbx)));\n+        StackPane root = new StackPane(pane);\n+\n+        StageLoader stageLoader = new StageLoader(root);\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        \/\/ Set a too big divider position.\n+        pane.setDividerPosition(0, 12);\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        \/\/ Reset counter\n+        counter.set(0);\n+\n+        cbx.getSelectionModel().select(0);\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertTrue(counter.get() > 0);\n+        stageLoader.dispose();\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/SplitPaneTest.java","additions":45,"deletions":1,"binary":false,"changes":46,"status":"modified"}]}