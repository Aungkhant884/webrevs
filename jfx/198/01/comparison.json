{"files":[{"patch":"@@ -70,0 +70,7 @@\n+\n+    \/**\n+     * Invalidation listener used for observing dependencies.  This\n+     * is never cleared once created as there is no way to determine\n+     * when all dependencies that were previously bound were removed\n+     * in one or more calls to {@link #unbind(Observable...)}.\n+     *\/\n@@ -122,1 +129,0 @@\n-            observer = null;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/BooleanBinding.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -116,0 +116,7 @@\n+\n+    \/**\n+     * Invalidation listener used for observing dependencies.  This\n+     * is never cleared once created as there is no way to determine\n+     * when all dependencies that were previously bound were removed\n+     * in one or more calls to {@link #unbind(Observable...)}.\n+     *\/\n@@ -174,1 +181,0 @@\n-            observer = null;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/DoubleBinding.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,0 +66,7 @@\n+\n+    \/**\n+     * Invalidation listener used for observing dependencies.  This\n+     * is never cleared once created as there is no way to determine\n+     * when all dependencies that were previously bound were removed\n+     * in one or more calls to {@link #unbind(Observable...)}.\n+     *\/\n@@ -124,1 +131,0 @@\n-            observer = null;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/FloatBinding.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,0 +66,7 @@\n+\n+    \/**\n+     * Invalidation listener used for observing dependencies.  This\n+     * is never cleared once created as there is no way to determine\n+     * when all dependencies that were previously bound were removed\n+     * in one or more calls to {@link #unbind(Observable...)}.\n+     *\/\n@@ -124,1 +131,0 @@\n-            observer = null;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/IntegerBinding.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -84,0 +84,7 @@\n+\n+    \/**\n+     * Invalidation listener used for observing dependencies.  This\n+     * is never cleared once created as there is no way to determine\n+     * when all dependencies that were previously bound were removed\n+     * in one or more calls to {@link #unbind(Observable...)}.\n+     *\/\n@@ -214,1 +221,0 @@\n-            observer = null;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/ListBinding.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,0 +66,7 @@\n+\n+    \/**\n+     * Invalidation listener used for observing dependencies.  This\n+     * is never cleared once created as there is no way to determine\n+     * when all dependencies that were previously bound were removed\n+     * in one or more calls to {@link #unbind(Observable...)}.\n+     *\/\n@@ -124,1 +131,0 @@\n-            observer = null;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/LongBinding.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,0 +66,7 @@\n+\n+    \/**\n+     * Invalidation listener used for observing dependencies.  This\n+     * is never cleared once created as there is no way to determine\n+     * when all dependencies that were previously bound were removed\n+     * in one or more calls to {@link #unbind(Observable...)}.\n+     *\/\n@@ -124,1 +131,0 @@\n-            observer = null;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/ObjectBinding.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -65,0 +65,7 @@\n+\n+    \/**\n+     * Invalidation listener used for observing dependencies.  This\n+     * is never cleared once created as there is no way to determine\n+     * when all dependencies that were previously bound were removed\n+     * in one or more calls to {@link #unbind(Observable...)}.\n+     *\/\n@@ -123,1 +130,0 @@\n-            observer = null;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/StringBinding.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import java.lang.reflect.Constructor;\n@@ -45,0 +46,2 @@\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n@@ -52,5 +55,2 @@\n-    private final ObservableStub dependency1;\n-    private final ObservableStub dependency2;\n-    private final BindingMock<T> binding0;\n-    private final BindingMock<T> binding1;\n-    private final BindingMock<T> binding2;\n+    private final ObservableStub dependency1 = new ObservableStub();\n+    private final ObservableStub dependency2 = new ObservableStub();\n@@ -59,0 +59,5 @@\n+    private final Constructor<BindingMock<T>> bindingMockClassConstructor;\n+\n+    private BindingMock<T> binding0;\n+    private BindingMock<T> binding1;\n+    private BindingMock<T> binding2;\n@@ -64,3 +69,1 @@\n-            ObservableStub dependency1,\n-            ObservableStub dependency2,\n-            BindingMock<T> binding0, BindingMock<T> binding1, BindingMock<T> binding2) {\n+            Class<BindingMock<T>> bindingMockClass) throws Exception {\n@@ -69,5 +72,1 @@\n-        this.dependency1 = dependency1;\n-        this.dependency2 = dependency2;\n-        this.binding0 = binding0;\n-        this.binding1 = binding1;\n-        this.binding2 = binding2;\n+        this.bindingMockClassConstructor = bindingMockClass.getConstructor(Observable[].class);\n@@ -77,1 +76,6 @@\n-    public void setUp() {\n+    public void setUp() throws Exception {\n+        \/\/ Recreate bindings as they may have been altered by one of the tests\n+        binding0 = bindingMockClassConstructor.newInstance((Object)new Observable[] {});\n+        binding1 = bindingMockClassConstructor.newInstance((Object)new Observable[] {dependency1});\n+        binding2 = bindingMockClassConstructor.newInstance((Object)new Observable[] {dependency1, dependency2});\n+\n@@ -295,0 +299,45 @@\n+    @Test\n+    public void testUnbindDependencies() {\n+        \/\/ Start by making binding valid:\n+        binding2.getValue();\n+        assertTrue(binding2.isValid());\n+\n+        \/\/ Changing dependency1 should cause binding to become invalid:\n+        dependency1.fireValueChangedEvent();\n+        assertFalse(binding2.isValid());\n+\n+        \/\/ Make valid again:\n+        binding2.getValue();\n+        assertTrue(binding2.isValid());\n+\n+        \/\/ Changing dependency2 should cause binding to become invalid:\n+        dependency2.fireValueChangedEvent();\n+        assertFalse(binding2.isValid());\n+\n+        \/\/ Make valid again:\n+        binding2.getValue();\n+        assertTrue(binding2.isValid());\n+\n+        \/\/ Remove dependency1:\n+        binding2.publicUnbind(dependency1);\n+\n+        \/\/ Check that binding2 is no longer affected by changes in dependency1:\n+        dependency1.fireValueChangedEvent();\n+        assertTrue(binding2.isValid());\n+\n+        \/\/ But still affected by changes in dependency2:\n+        dependency2.fireValueChangedEvent();\n+        assertFalse(binding2.isValid());\n+\n+        \/\/ Make valid again:\n+        binding2.getValue();\n+        assertTrue(binding2.isValid());\n+\n+        \/\/ Remove dependency2:\n+        binding2.publicUnbind(dependency2);\n+\n+        \/\/ Check that binding2 is no longer affected by changes in dependency2:\n+        dependency2.fireValueChangedEvent();\n+        assertTrue(binding2.isValid());   \/\/ Fixed by 8243115\n+    }\n+\n@@ -297,2 +346,0 @@\n-        final ObservableStub dependency1 = new ObservableStub();\n-        final ObservableStub dependency2 = new ObservableStub();\n@@ -302,4 +349,1 @@\n-                dependency1, dependency2,\n-                new FloatBindingImpl(),\n-                new FloatBindingImpl(dependency1),\n-                new FloatBindingImpl(dependency1, dependency2),\n+                FloatBindingImpl.class\n@@ -309,4 +353,1 @@\n-                dependency1, dependency2,\n-                new DoubleBindingImpl(),\n-                new DoubleBindingImpl(dependency1),\n-                new DoubleBindingImpl(dependency1, dependency2),\n+                DoubleBindingImpl.class\n@@ -316,4 +357,1 @@\n-                dependency1, dependency2,\n-                new LongBindingImpl(),\n-                new LongBindingImpl(dependency1),\n-                new LongBindingImpl(dependency1, dependency2),\n+                LongBindingImpl.class\n@@ -323,4 +361,1 @@\n-                dependency1, dependency2,\n-                new IntegerBindingImpl(),\n-                new IntegerBindingImpl(dependency1),\n-                new IntegerBindingImpl(dependency1, dependency2),\n+                IntegerBindingImpl.class\n@@ -330,4 +365,1 @@\n-                dependency1, dependency2,\n-                new BooleanBindingImpl(),\n-                new BooleanBindingImpl(dependency1),\n-                new BooleanBindingImpl(dependency1, dependency2),\n+                BooleanBindingImpl.class\n@@ -337,4 +369,1 @@\n-                dependency1, dependency2,\n-                new StringBindingImpl(),\n-                new StringBindingImpl(dependency1),\n-                new StringBindingImpl(dependency1, dependency2),\n+                StringBindingImpl.class\n@@ -343,5 +372,2 @@\n-                    new Object(), new Object(),\n-                    dependency1, dependency2,\n-                    new ObjectBindingImpl(),\n-                    new ObjectBindingImpl(dependency1),\n-                    new ObjectBindingImpl(dependency1, dependency2),\n+                new Object(), new Object(),\n+                ObjectBindingImpl.class\n@@ -350,6 +376,3 @@\n-                    FXCollections.observableArrayList(), FXCollections.observableArrayList(),\n-                    dependency1, dependency2,\n-                    new ListBindingImpl(),\n-                    new ListBindingImpl(dependency1),\n-                    new ListBindingImpl(dependency1, dependency2),\n-            },\n+                FXCollections.observableArrayList(), FXCollections.observableArrayList(),\n+                ListBindingImpl.class\n+            }\n@@ -372,0 +395,1 @@\n+        void publicUnbind(Observable... observables);\n@@ -405,0 +429,4 @@\n+\n+        public void publicUnbind(Observable... observables) {\n+            super.unbind(observables);\n+        }\n@@ -438,0 +466,4 @@\n+\n+        public void publicUnbind(Observable... observables) {\n+            super.unbind(observables);\n+        }\n@@ -471,0 +503,4 @@\n+\n+        public void publicUnbind(Observable... observables) {\n+            super.unbind(observables);\n+        }\n@@ -504,0 +540,4 @@\n+\n+        public void publicUnbind(Observable... observables) {\n+            super.unbind(observables);\n+        }\n@@ -537,0 +577,4 @@\n+\n+        public void publicUnbind(Observable... observables) {\n+            super.unbind(observables);\n+        }\n@@ -570,0 +614,4 @@\n+\n+        public void publicUnbind(Observable... observables) {\n+            super.unbind(observables);\n+        }\n@@ -603,0 +651,4 @@\n+\n+        public void publicUnbind(Observable... observables) {\n+            super.unbind(observables);\n+        }\n@@ -636,0 +688,4 @@\n+\n+        public void publicUnbind(Observable... observables) {\n+            super.unbind(observables);\n+        }\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/GenericBindingTest.java","additions":107,"deletions":51,"binary":false,"changes":158,"status":"modified"}]}