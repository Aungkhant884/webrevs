{"files":[{"patch":"@@ -27,0 +27,5 @@\n+import java.util.AbstractSet;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n@@ -28,0 +33,1 @@\n+\n@@ -33,4 +39,0 @@\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.NoSuchElementException;\n-\n@@ -42,1 +44,1 @@\n-abstract class BitSet<T> implements ObservableSet<T> {\n+abstract class BitSet<T> extends AbstractSet<T> implements ObservableSet<T> {\n@@ -535,12 +537,0 @@\n-    @Override\n-    public int hashCode() {\n-        int hash = 7;\n-        if (bits.length > 0) {\n-            for (int n = 0; n < bits.length; n++) {\n-                final long mask = bits[n];\n-                hash = 71 * hash + (int)(mask ^ (mask >>> 32));\n-            }\n-        }\n-        return hash;\n-    }\n-\n@@ -549,2 +539,4 @@\n-\n-        if (this == obj) {\n+        \/\/ Note: overridden to provide a fast path; must still respect Set contract or it\n+        \/\/ will not interact correctly with other sets; same goes for hashCode, do not\n+        \/\/ override arbitrarily!\n+        if (obj == this) {\n@@ -553,3 +545,2 @@\n-\n-        if (obj == null || this.getClass() != obj.getClass()) {\n-            return false;\n+        if (obj instanceof BitSet<?> bitSet) {  \/\/ fast path if other is a BitSet\n+            return equalsBitSet(bitSet);\n@@ -558,1 +549,6 @@\n-        final BitSet other = (BitSet) obj;\n+        return super.equals(obj);\n+    }\n+\n+    private boolean equalsBitSet(BitSet<?> other) {\n+        int a = this.bits != null ? this.bits.length : 0;\n+        int b = other.bits != null ? other.bits.length : 0;\n@@ -560,2 +556,3 @@\n-        final int a = this.bits != null ? this.bits.length : 0;\n-        final int b = other.bits != null ? other.bits.length : 0;\n+        if (a != b) {\n+            return false;\n+        }\n@@ -563,1 +560,3 @@\n-        if (a != b) return false;\n+        for (int m = 0; m < a; m++) {\n+            long m0 = this.bits[m];\n+            long m1 = other.bits[m];\n@@ -565,3 +564,0 @@\n-        for(int m=0; m<a; m++) {\n-            final long m0 = this.bits[m];\n-            final long m1 = other.bits[m];\n@@ -572,0 +568,1 @@\n+\n@@ -588,1 +585,1 @@\n-    protected long[] getBits() {\n+    long[] getBits() {\n@@ -645,1 +642,1 @@\n-            SetListenerHelper.removeListener(listenerHelper, setChangeListener);\n+            listenerHelper = SetListenerHelper.removeListener(listenerHelper, setChangeListener);\n@@ -659,1 +656,1 @@\n-            SetListenerHelper.removeListener(listenerHelper, invalidationListener);\n+            listenerHelper = SetListenerHelper.removeListener(listenerHelper, invalidationListener);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/BitSet.java","additions":29,"deletions":32,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -57,29 +57,0 @@\n-    \/** {@inheritDoc} *\/\n-    @Override\n-    public Object[] toArray() {\n-        return toArray(new PseudoClass[size()]);\n-    }\n-\n-    @Override\n-    public <T> T[] toArray(T[] a) {\n-        if (a.length < size()) {\n-            a = (T[]) new PseudoClass[size()];\n-        }\n-\n-        int setIndex = 0;\n-\n-        for (int index = 0; index < getBits().length; index++) {\n-            long state = getBits()[index];\n-\n-            for (int bit = 0; bit < Long.SIZE; bit++) {\n-                long mask = 1L << bit;\n-\n-                if ((state & mask) == mask) {\n-                    a[setIndex++] = (T) getPseudoClass(index * Long.SIZE + bit);\n-                }\n-            }\n-        }\n-\n-        return a;\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/PseudoClassState.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -61,29 +61,0 @@\n-    \/** {@inheritDoc} *\/\n-    @Override\n-    public Object[] toArray() {\n-        return toArray(new StyleClass[size()]);\n-    }\n-\n-    @Override\n-    public <T> T[] toArray(T[] a) {\n-        if (a.length < size()) {\n-            a = (T[]) new StyleClass[size()];\n-        }\n-\n-        int setIndex = 0;\n-\n-        for (int index = 0; index < getBits().length; index++) {\n-            long state = getBits()[index];\n-\n-            for (int bit = 0; bit < Long.SIZE; bit++) {\n-                long mask = 1L << bit;\n-\n-                if ((state & mask) == mask) {\n-                    a[setIndex++] = (T) getStyleClass(index * Long.SIZE + bit);\n-                }\n-            }\n-        }\n-\n-        return a;\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/StyleClassSet.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+import com.sun.javafx.css.ImmutablePseudoClassSetsCache;\n+\n@@ -53,0 +55,2 @@\n+        assert pseudoClasses != null;\n+\n@@ -56,4 +60,3 @@\n-        this.pseudoClasses = pseudoClasses;\n-        int nPseudoClasses = pseudoClasses != null ? pseudoClasses.size() : 0;\n-        if (selector instanceof SimpleSelector) {\n-            final SimpleSelector simple = (SimpleSelector)selector;\n+        this.pseudoClasses = ImmutablePseudoClassSetsCache.of(pseudoClasses);\n+        int nPseudoClasses = pseudoClasses.size();\n+        if (selector instanceof SimpleSelector simple) {\n@@ -69,1 +72,2 @@\n-     * @return the {@code Selector}\n+     *\n+     * @return the {@code Selector}, never {@code null}\n@@ -77,1 +81,2 @@\n-     * @return the pseudo class state\n+     *\n+     * @return an immutable set of {@link PseudoClass}es, never {@code null}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/Match.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -115,0 +115,1 @@\n+    \/\/ for test purposes\n@@ -119,22 +120,0 @@\n-    \/**\n-     * Gets an immutable list of {@code String}s of pseudo classes of the {@code Selector}\n-     * @return an immutable list of {@code String}s\n-     *\/\n-    List<String> getPseudoclasses() {\n-\n-        final List<String> names = new ArrayList<>();\n-\n-        Iterator<PseudoClass> iter = pseudoClassState.iterator();\n-        while (iter.hasNext()) {\n-            names.add(iter.next().getPseudoClassName());\n-        }\n-\n-        if (nodeOrientation == RIGHT_TO_LEFT) {\n-            names.add(\"dir(rtl)\");\n-        } else if (nodeOrientation == LEFT_TO_RIGHT) {\n-            names.add(\"dir(ltr)\");\n-        }\n-\n-        return Collections.unmodifiableList(names);\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/SimpleSelector.java","additions":1,"deletions":22,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -14,0 +14,1 @@\n+import com.sun.javafx.css.PseudoClassState;\n@@ -22,0 +23,3 @@\n+        Set<PseudoClass> pseudoClassState = new PseudoClassState();\n+\n+        pseudoClassState.add(PseudoClass.getPseudoClass(\"a\"));\n@@ -26,1 +30,2 @@\n-        Set<PseudoClass> set4 = ImmutablePseudoClassSetsCache.of(Set.of(PseudoClass.getPseudoClass(\"b\")));\n+        Set<PseudoClass> set4 = ImmutablePseudoClassSetsCache.of(pseudoClassState);\n+        Set<PseudoClass> set5 = ImmutablePseudoClassSetsCache.of(Set.of(PseudoClass.getPseudoClass(\"b\")));\n@@ -30,3 +35,5 @@\n-        assertNotEquals(set1, set4);\n-        assertNotEquals(set2, set4);\n-        assertNotEquals(set3, set4);\n+        assertEquals(set3, set4);\n+        assertNotEquals(set1, set5);\n+        assertNotEquals(set2, set5);\n+        assertNotEquals(set3, set5);\n+        assertNotEquals(set4, set5);\n@@ -36,0 +43,1 @@\n+        assertTrue(set3 == set4);\n@@ -41,0 +49,5 @@\n+\n+        \/\/ tests if hashCode\/equals of BitSet respects contract...\n+        assertEquals(myOwnSet.hashCode(), pseudoClassState.hashCode());\n+        assertTrue(myOwnSet.equals(pseudoClassState));\n+        assertTrue(pseudoClassState.equals(myOwnSet));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/ImmutablePseudoClassSetsCacheTest.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"}]}