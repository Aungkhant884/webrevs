{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import java.util.Objects;\n@@ -47,0 +48,1 @@\n+     * @throws NullPointerException when {@code pseudoClasses} is {@code null} or contains {@code null}s\n@@ -49,16 +51,4 @@\n-        Set<PseudoClass> immutableSet = Set.copyOf(pseudoClasses);\n-\n-        \/*\n-         * Note, the computeIfAbsent looks a bit odd, but it does serve a purpose.\n-         *\n-         * If the given set was already immutable; the copyOf will return the same\n-         * set; however, that may or may not be the set that is already in the cache.\n-         *\n-         * If the set already exists in the cache, then the exact same set or another\n-         * set is returned which was present already. This is okay.\n-         *\n-         * If the set didn't already exist, it is stored in the cache and that same set\n-         * is returned.\n-         *\/\n-\n-        return CACHE.computeIfAbsent(immutableSet, k -> immutableSet);\n+        return CACHE.computeIfAbsent(\n+            Objects.requireNonNull(pseudoClasses, \"pseudoClasses cannot be null\"),\n+            k -> Set.copyOf(pseudoClasses)\n+        );\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/ImmutablePseudoClassSetsCache.java","additions":6,"deletions":16,"binary":false,"changes":22,"status":"modified"}]}