{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -185,0 +185,4 @@\n+        if (t == null) {  \/\/ if cast failed, it can't be part of this set, so not modified\n+            return false;\n+        }\n+\n@@ -223,2 +227,7 @@\n-        final int element = getIndex(t) \/ Long.SIZE;\n-        final long bit = 1l << (getIndex(t) % Long.SIZE);\n+        if (t == null) {  \/\/ if cast failed, it can't be part of this set\n+            return false;\n+        }\n+\n+        int index = getIndex(t);\n+        int element = index \/ Long.SIZE;\n+        long bit = 1L << (index % Long.SIZE);\n@@ -229,1 +238,0 @@\n-    \/** {@inheritDoc} *\/\n@@ -232,0 +240,3 @@\n+        if (c == null) {\n+           throw new NullPointerException(\"c cannot be null\");\n+        }\n@@ -233,3 +244,8 @@\n-        if (c == null || this.getClass() != c.getClass()) {\n-            \/\/ this not modified!\n-            return false;\n+        if (this.getClass() != c.getClass()) {\n+            for (Object obj : c) {\n+                if (!contains(obj)) {\n+                    return false;\n+                }\n+            }\n+\n+            return true;\n@@ -257,2 +273,0 @@\n-\n-    \/** {@inheritDoc} *\/\n@@ -261,0 +275,3 @@\n+        if (c == null) {\n+            throw new NullPointerException(\"c cannot be null\");\n+        }\n@@ -262,3 +279,8 @@\n-        if (c == null || this.getClass() != c.getClass()) {\n-            \/\/ this not modified!\n-            return false;\n+        if (this.getClass() != c.getClass()) {\n+            boolean modified = false;\n+\n+            for (T obj : c) {\n+                modified |= add(obj);\n+            }\n+\n+            return modified;\n@@ -330,1 +352,0 @@\n-    \/** {@inheritDoc} *\/\n@@ -333,0 +354,3 @@\n+        if (c == null) {\n+            throw new NullPointerException(\"c cannot be null\");\n+        }\n@@ -334,3 +358,13 @@\n-        if (c == null || this.getClass() != c.getClass()) {\n-            clear();\n-            return true;\n+        if (this.getClass() != c.getClass()) {\n+            boolean modified = false;\n+\n+            for (Iterator<T> iterator = this.iterator(); iterator.hasNext();) {\n+                T obj = iterator.next();\n+\n+                if (!c.contains(obj)) {\n+                    iterator.remove();\n+                    modified = true;\n+                }\n+            }\n+\n+            return modified;\n@@ -411,2 +445,0 @@\n-\n-    \/** {@inheritDoc} *\/\n@@ -415,0 +447,3 @@\n+        if (c == null) {\n+            throw new NullPointerException(\"c cannot be null\");\n+        }\n@@ -416,3 +451,8 @@\n-        if (c == null || this.getClass() != c.getClass()) {\n-            \/\/ this not modified!\n-            return false;\n+        if (this.getClass() != c.getClass()) {\n+            boolean modified = false;\n+\n+            for (Object obj : c) {\n+                modified |= remove(obj);\n+            }\n+\n+            return modified;\n@@ -476,1 +516,0 @@\n-    \/** {@inheritDoc} *\/\n@@ -536,2 +575,2 @@\n-    abstract protected T getT(int index);\n-    abstract protected int getIndex(T t);\n+    protected abstract T getT(int index);\n+    protected abstract int getIndex(T t);\n@@ -539,5 +578,7 @@\n-    \/*\n-     * Try to cast the arg to a T.\n-     * @throws ClassCastException if the class of the argument is\n-     *         is not a T\n-     * @throws NullPointerException if the argument is null\n+    \/**\n+     * Return {@code obj} if it is an instance of type {@code T},\n+     * otherwise return {@code null}.\n+     *\n+     * @param obj the object to cast, cannot be {@code null}\n+     * @return a type T, or {@code null} if the argument was not of this type\n+     * @throws NullPointerException when {@code obj} is {@code null}\n@@ -545,1 +586,1 @@\n-    abstract protected T cast(Object o);\n+    protected abstract T cast(Object obj);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/BitSet.java","additions":71,"deletions":30,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.javafx.css;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javafx.css.PseudoClass;\n+\n+\/**\n+ * A cache for immutable sets of {@link PseudoClass}es.\n+ *\/\n+public class ImmutablePseudoClassSetsCache {\n+    private static final Map<Set<PseudoClass>, Set<PseudoClass>> CACHE = new HashMap<>();\n+\n+    \/**\n+     * Returns an immutable set of {@link PseudoClass}es.\n+     * <p>\n+     * Note: this method may or may not return the same instance for the same set of\n+     * {@link PseudoClass}es.\n+     *\n+     * @param pseudoClasses a set of {@link PseudoClass} to make immutable, cannot be {@code null}\n+     * @return an immutable set of {@link PseudoClass}es, never {@code null}\n+     *\/\n+    public static Set<PseudoClass> of(Set<PseudoClass> pseudoClasses) {\n+        Set<PseudoClass> immutableSet = Set.copyOf(pseudoClasses);\n+\n+        \/*\n+         * Note, the computeIfAbsent looks a bit odd, but it does serve a purpose.\n+         *\n+         * If the given set was already immutable; the copyOf will return the same\n+         * set; however, that may or may not be the set that is already in the cache.\n+         *\n+         * If the set already exists in the cache, then the exact same set or another\n+         * set is returned which was present already. This is okay.\n+         *\n+         * If the set didn't already exist, it is stored in the cache and that same set\n+         * is returned.\n+         *\/\n+\n+        return CACHE.computeIfAbsent(immutableSet, k -> immutableSet);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/ImmutablePseudoClassSetsCache.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,0 @@\n-    \/** {@inheritDoc} *\/\n@@ -69,5 +68,9 @@\n-        int index = 0;\n-        while(index < getBits().length) {\n-            final long state = getBits()[index];\n-            for(int bit=0; bit<Long.SIZE; bit++) {\n-                long mask = 1l << bit;\n+\n+        int setIndex = 0;\n+\n+        for (int index = 0; index < getBits().length; index++) {\n+            long state = getBits()[index];\n+\n+            for (int bit = 0; bit < Long.SIZE; bit++) {\n+                long mask = 1L << bit;\n+\n@@ -75,3 +78,1 @@\n-                    int n = index * Long.SIZE + bit;\n-                    PseudoClass impl = getPseudoClass(n);\n-                    a[index++] = (T) impl;\n+                    a[setIndex++] = (T) getPseudoClass(index * Long.SIZE + bit);\n@@ -79,1 +80,0 @@\n-\n@@ -82,0 +82,1 @@\n+\n@@ -85,1 +86,0 @@\n-\n@@ -101,2 +101,2 @@\n-        PseudoClass pseudoClass = (PseudoClass) o;\n-        return pseudoClass;\n+\n+        return o instanceof PseudoClass pseudoClass ? pseudoClass : null;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/PseudoClassState.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,2 +71,1 @@\n-                this.pseudoClassStates[n] = new PseudoClassState();\n-                this.pseudoClassStates[n].addAll(pseudoClassStates[n]);\n+                this.pseudoClassStates[n] = ImmutablePseudoClassSetsCache.of(pseudoClassStates[n]);\n@@ -93,1 +92,1 @@\n-                final int iMax = pseudoClassStates != null ? pseudoClassStates.length : 0;\n+                final int iMax = pseudoClassStates.length;\n@@ -132,10 +131,0 @@\n-            \/\/ either both must be null or both must be not-null\n-            if ((pseudoClassStates == null) ^ (other.pseudoClassStates == null)) {\n-                return false;\n-            }\n-\n-            \/\/ if one is null, the other is too.\n-            if (pseudoClassStates == null) {\n-                return true;\n-            }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/StyleCacheEntry.java","additions":3,"deletions":14,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,0 @@\n-    \/** {@inheritDoc} *\/\n@@ -73,5 +72,9 @@\n-        int index = 0;\n-        while(index < getBits().length) {\n-            final long state = getBits()[index];\n-            for(int bit=0; bit<Long.SIZE; bit++) {\n-                long mask = 1l << bit;\n+\n+        int setIndex = 0;\n+\n+        for (int index = 0; index < getBits().length; index++) {\n+            long state = getBits()[index];\n+\n+            for (int bit = 0; bit < Long.SIZE; bit++) {\n+                long mask = 1L << bit;\n+\n@@ -79,3 +82,1 @@\n-                    int n = index * Long.SIZE + bit;\n-                    StyleClass impl = getStyleClass(n);\n-                    a[index++] = (T) impl;\n+                    a[setIndex++] = (T) getStyleClass(index * Long.SIZE + bit);\n@@ -83,1 +84,0 @@\n-\n@@ -86,0 +86,1 @@\n+\n@@ -89,1 +90,0 @@\n-\n@@ -109,2 +109,2 @@\n-        StyleClass styleClass = (StyleClass) o;\n-        return styleClass;\n+\n+        return o instanceof StyleClass styleClass ? styleClass : null;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/StyleClassSet.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -154,1 +154,3 @@\n-                    pseudoClassOut.addAll(pseudoClassIn);\n+                    if (pseudoClassIn != null) {\n+                        pseudoClassOut.addAll(pseudoClassIn);\n+                    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/CompoundSelector.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import com.sun.javafx.css.PseudoClassState;\n-\n@@ -32,0 +30,1 @@\n+import java.util.Set;\n@@ -44,1 +43,1 @@\n-    final PseudoClassState pseudoClasses;\n+    final Set<PseudoClass> pseudoClasses;\n@@ -52,1 +51,1 @@\n-    Match(final Selector selector, PseudoClassState pseudoClasses, int idCount, int styleClassCount) {\n+    Match(final Selector selector, Set<PseudoClass> pseudoClasses, int idCount, int styleClassCount) {\n@@ -80,1 +79,1 @@\n-    public PseudoClassState getPseudoClasses() {\n+    public Set<PseudoClass> getPseudoClasses() {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/Match.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import com.sun.javafx.css.ImmutablePseudoClassSetsCache;\n@@ -112,1 +113,1 @@\n-    final private PseudoClassState pseudoClassState;\n+    final private Set<PseudoClass> pseudoClassState;\n@@ -185,1 +186,1 @@\n-        this.pseudoClassState = new PseudoClassState();\n+        PseudoClassState pcs = new PseudoClassState();\n@@ -202,2 +203,1 @@\n-            final PseudoClass pseudoClass = PseudoClassState.getPseudoClass(pclass);\n-            this.pseudoClassState.add(pseudoClass);\n+            pcs.add(PseudoClassState.getPseudoClass(pclass));\n@@ -206,0 +206,1 @@\n+        this.pseudoClassState = ImmutablePseudoClassSetsCache.of(pcs);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/SimpleSelector.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n+import com.sun.javafx.css.ImmutablePseudoClassSetsCache;\n+\n@@ -83,1 +85,0 @@\n-        this.triggerStates = new PseudoClassState();\n@@ -134,1 +135,4 @@\n-            node.styleHelper.triggerStates.addAll(triggerStates[0]);\n+\n+            if (triggerStates[0] != null) {\n+                node.styleHelper.triggerStates.addAll(triggerStates[0]);\n+            }\n@@ -174,1 +178,4 @@\n-        helper.triggerStates.addAll(triggerStates[0]);\n+\n+        if (triggerStates[0] != null) {\n+            helper.triggerStates.addAll(triggerStates[0]);\n+        }\n@@ -511,1 +518,1 @@\n-    private PseudoClassState triggerStates = new PseudoClassState();\n+    private final PseudoClassState triggerStates = new PseudoClassState();\n@@ -550,1 +557,1 @@\n-        final Set<PseudoClass>[] retainedStates = new PseudoClassState[depth];\n+        final Set<PseudoClass>[] retainedStates = new Set[depth];\n@@ -561,0 +568,1 @@\n+\n@@ -562,8 +570,7 @@\n-            final CssStyleHelper helper = (parent instanceof Node) ? parent.styleHelper : null;\n-            if (helper != null) {\n-                final Set<PseudoClass> pseudoClassState = parent.pseudoClassStates;\n-                retainedStates[count] = new PseudoClassState();\n-                retainedStates[count].addAll(pseudoClassState);\n-                \/\/ retainAll method takes the intersection of pseudoClassState and helper.triggerStates\n-                retainedStates[count].retainAll(helper.triggerStates);\n-                count += 1;\n+            if (parent.styleHelper != null) {\n+                PseudoClassState pseudoClassState = new PseudoClassState();\n+\n+                pseudoClassState.addAll(parent.pseudoClassStates);\n+                pseudoClassState.retainAll(parent.styleHelper.triggerStates);\n+\n+                retainedStates[count++] = ImmutablePseudoClassSetsCache.of(pseudoClassState);\n@@ -571,0 +578,1 @@\n+\n@@ -574,1 +582,5 @@\n-        final Set<PseudoClass>[] transitionStates = new PseudoClassState[count];\n+        if (count == depth) {\n+          return retainedStates;\n+        }\n+\n+        final Set<PseudoClass>[] transitionStates = new Set[count];\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/CssStyleHelper.java","additions":26,"deletions":14,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,42 @@\n+package test.com.sun.javafx.css;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.sun.javafx.css.ImmutablePseudoClassSetsCache;\n+\n+import javafx.css.PseudoClass;\n+\n+public class ImmutablePseudoClassSetsCacheTest {\n+\n+    @Test\n+    void shouldCacheSets() {\n+        Set<PseudoClass> myOwnSet = Set.of(PseudoClass.getPseudoClass(\"a\"));\n+\n+        Set<PseudoClass> set1 = ImmutablePseudoClassSetsCache.of(new HashSet<>(Set.of(PseudoClass.getPseudoClass(\"a\"))));\n+        Set<PseudoClass> set2 = ImmutablePseudoClassSetsCache.of(new HashSet<>(myOwnSet));\n+        Set<PseudoClass> set3 = ImmutablePseudoClassSetsCache.of(myOwnSet);\n+        Set<PseudoClass> set4 = ImmutablePseudoClassSetsCache.of(Set.of(PseudoClass.getPseudoClass(\"b\")));\n+\n+        assertEquals(set1, set2);\n+        assertEquals(set2, set3);\n+        assertNotEquals(set1, set4);\n+        assertNotEquals(set2, set4);\n+        assertNotEquals(set3, set4);\n+\n+        assertTrue(set1 == set2);\n+        assertTrue(set2 == set3);\n+\n+        assertEquals(myOwnSet, set1);\n+\n+        \/\/ this does not need to be true if this set was not the first one cached\n+        assertFalse(myOwnSet == set1);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/ImmutablePseudoClassSetsCacheTest.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -612,7 +612,0 @@\n-        BitSetShim.retainAll(aStates, bStates);\n-        List<PseudoClass> states = new ArrayList<>();\n-        Iterator<PseudoClass> iter = BitSetShim.iterator(aStates);\n-        while (iter.hasNext()) {\n-            states.add(iter.next());\n-        }\n-        assertEquals(0, states.size(), 0.000001);\n@@ -620,0 +613,1 @@\n+        assertThrows(NullPointerException.class, () -> BitSetShim.retainAll(aStates, bStates));\n@@ -718,7 +712,0 @@\n-        BitSetShim.addAll(aStates, bStates);\n-        List<PseudoClass> states = new ArrayList<>();\n-        Iterator<PseudoClass> iter = BitSetShim.iterator(aStates);\n-        while (iter.hasNext()) {\n-            states.add(iter.next());\n-        }\n-        assertEquals(0, states.size(), 0.000001);\n@@ -726,0 +713,1 @@\n+        assertThrows(NullPointerException.class, () -> BitSetShim.addAll(aStates, bStates));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/PseudoClassTest.java","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"}]}