{"files":[{"patch":"@@ -184,1 +184,1 @@\n-        T t = cast(o);\n+        Class<T> elementType = getElementType();\n@@ -186,2 +186,8 @@\n-        final int element = getIndex(t) \/ Long.SIZE;\n-        final long bit = 1l << (getIndex(t) % Long.SIZE);\n+        if (!elementType.isInstance(o)) {  \/\/ if cast failed, it can't be part of this set, so not modified\n+            return false;\n+        }\n+\n+        T t = elementType.cast(o);\n+        int index = getIndex(t);\n+        int element = index \/ Long.SIZE;\n+        long bit = 1l << (index % Long.SIZE);\n@@ -222,1 +228,1 @@\n-        final T t = cast(o);\n+        Class<T> elementType = getElementType();\n@@ -224,2 +230,7 @@\n-        final int element = getIndex(t) \/ Long.SIZE;\n-        final long bit = 1l << (getIndex(t) % Long.SIZE);\n+        if (!elementType.isInstance(o)) {\n+            return false;\n+        }\n+\n+        int index = getIndex(elementType.cast(o));\n+        int element = index \/ Long.SIZE;\n+        long bit = 1L << (index % Long.SIZE);\n@@ -230,1 +241,0 @@\n-    \/** {@inheritDoc} *\/\n@@ -233,1 +243,1 @@\n-        if (this.getClass() != c.getClass()) {\n+        if (this.getClass() != c.getClass()) {  \/\/ implicit null check here is intended\n@@ -262,2 +272,0 @@\n-\n-    \/** {@inheritDoc} *\/\n@@ -266,1 +274,1 @@\n-        if (this.getClass() != c.getClass()) {\n+        if (this.getClass() != c.getClass()) {  \/\/ implicit null check here is intended\n@@ -339,1 +347,0 @@\n-    \/** {@inheritDoc} *\/\n@@ -342,1 +349,1 @@\n-        if (this.getClass() != c.getClass()) {\n+        if (this.getClass() != c.getClass()) {  \/\/ implicit null check here is intended\n@@ -429,2 +436,0 @@\n-\n-    \/** {@inheritDoc} *\/\n@@ -433,1 +438,1 @@\n-        if (this.getClass() != c.getClass()) {\n+        if (this.getClass() != c.getClass()) {  \/\/ implicit null check here is intended\n@@ -498,1 +503,0 @@\n-    \/** {@inheritDoc} *\/\n@@ -542,0 +546,1 @@\n+        int max = Math.max(a, b);\n@@ -543,1 +548,3 @@\n-        if (a != b) return false;\n+        for (int i = 0; i < max; i++) {\n+            long m0 = i >= a ? 0 : this.bits[i];\n+            long m1 = i >= b ? 0 : other.bits[i];\n@@ -545,3 +552,0 @@\n-        for(int m=0; m<a; m++) {\n-            final long m0 = this.bits[m];\n-            final long m1 = other.bits[m];\n@@ -552,0 +556,1 @@\n+\n@@ -555,2 +560,2 @@\n-    abstract protected T getT(int index);\n-    abstract protected int getIndex(T t);\n+    protected abstract T getT(int index);\n+    protected abstract int getIndex(T t);\n@@ -558,5 +563,4 @@\n-    \/*\n-     * Try to cast the arg to a T.\n-     * @throws ClassCastException if the class of the argument is\n-     *         is not a T\n-     * @throws NullPointerException if the argument is null\n+    \/**\n+     * Returns the element type.\n+     *\n+     * @return a {@link Class} of type {@code T}, never {@code null}\n@@ -564,1 +568,1 @@\n-    abstract protected T cast(Object o);\n+    protected abstract Class<T> getElementType();\n@@ -566,1 +570,1 @@\n-    protected long[] getBits() {\n+    long[] getBits() {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/BitSet.java","additions":34,"deletions":30,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javafx.css.PseudoClass;\n+\n+\/**\n+ * A cache for immutable sets of {@link PseudoClass}es.\n+ *\/\n+public class ImmutablePseudoClassSetsCache {\n+    private static final Map<Set<PseudoClass>, Set<PseudoClass>> CACHE = new HashMap<>();\n+\n+    \/**\n+     * Returns an immutable set of {@link PseudoClass}es.\n+     * <p>\n+     * Note: this method may or may not return the same instance for the same set of\n+     * {@link PseudoClass}es.\n+     *\n+     * @param pseudoClasses a set of {@link PseudoClass} to make immutable, cannot be {@code null}\n+     * @return an immutable set of {@link PseudoClass}es, never {@code null}\n+     * @throws NullPointerException when {@code pseudoClasses} is {@code null} or contains {@code null}s\n+     *\/\n+    public static Set<PseudoClass> of(Set<PseudoClass> pseudoClasses) {\n+        Set<PseudoClass> cachedSet = CACHE.get(Objects.requireNonNull(pseudoClasses, \"pseudoClasses cannot be null\"));\n+\n+        if (cachedSet != null) {\n+            return cachedSet;\n+        }\n+\n+        Set<PseudoClass> copy = Set.copyOf(pseudoClasses);\n+\n+        CACHE.put(copy, copy);\n+\n+        return copy;\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/ImmutablePseudoClassSetsCache.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,29 +57,0 @@\n-    \/** {@inheritDoc} *\/\n-    @Override\n-    public Object[] toArray() {\n-        return toArray(new PseudoClass[size()]);\n-    }\n-\n-    \/** {@inheritDoc} *\/\n-    @Override\n-    public <T> T[] toArray(T[] a) {\n-        if (a.length < size()) {\n-            a = (T[]) new PseudoClass[size()];\n-        }\n-        int index = 0;\n-        while(index < getBits().length) {\n-            final long state = getBits()[index];\n-            for(int bit=0; bit<Long.SIZE; bit++) {\n-                long mask = 1l << bit;\n-                if ((state & mask) == mask) {\n-                    int n = index * Long.SIZE + bit;\n-                    PseudoClass impl = getPseudoClass(n);\n-                    a[index++] = (T) impl;\n-                }\n-\n-            }\n-        }\n-        return a;\n-    }\n-\n-\n@@ -97,6 +68,2 @@\n-    protected PseudoClass cast(Object o) {\n-        if (o == null) {\n-            throw new NullPointerException(\"null arg\");\n-        }\n-        PseudoClass pseudoClass = (PseudoClass) o;\n-        return pseudoClass;\n+    protected Class<PseudoClass> getElementType() {\n+        return PseudoClass.class;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/PseudoClassState.java","additions":3,"deletions":36,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,2 +71,1 @@\n-                this.pseudoClassStates[n] = new PseudoClassState();\n-                this.pseudoClassStates[n].addAll(pseudoClassStates[n]);\n+                this.pseudoClassStates[n] = ImmutablePseudoClassSetsCache.of(pseudoClassStates[n]);\n@@ -93,1 +92,1 @@\n-                final int iMax = pseudoClassStates != null ? pseudoClassStates.length : 0;\n+                final int iMax = pseudoClassStates.length;\n@@ -132,10 +131,0 @@\n-            \/\/ either both must be null or both must be not-null\n-            if ((pseudoClassStates == null) ^ (other.pseudoClassStates == null)) {\n-                return false;\n-            }\n-\n-            \/\/ if one is null, the other is too.\n-            if (pseudoClassStates == null) {\n-                return true;\n-            }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/StyleCacheEntry.java","additions":3,"deletions":14,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,29 +61,0 @@\n-    \/** {@inheritDoc} *\/\n-    @Override\n-    public Object[] toArray() {\n-        return toArray(new StyleClass[size()]);\n-    }\n-\n-    \/** {@inheritDoc} *\/\n-    @Override\n-    public <T> T[] toArray(T[] a) {\n-        if (a.length < size()) {\n-            a = (T[]) new StyleClass[size()];\n-        }\n-        int index = 0;\n-        while(index < getBits().length) {\n-            final long state = getBits()[index];\n-            for(int bit=0; bit<Long.SIZE; bit++) {\n-                long mask = 1l << bit;\n-                if ((state & mask) == mask) {\n-                    int n = index * Long.SIZE + bit;\n-                    StyleClass impl = getStyleClass(n);\n-                    a[index++] = (T) impl;\n-                }\n-\n-            }\n-        }\n-        return a;\n-    }\n-\n-\n@@ -105,6 +76,2 @@\n-    protected StyleClass cast(Object o) {\n-        if (o == null) {\n-            throw new NullPointerException(\"null arg\");\n-        }\n-        StyleClass styleClass = (StyleClass) o;\n-        return styleClass;\n+    protected Class<StyleClass> getElementType() {\n+        return StyleClass.class;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/StyleClassSet.java","additions":3,"deletions":36,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n-import java.util.Collections;\n+import com.sun.javafx.css.ImmutablePseudoClassSetsCache;\n+\n@@ -61,1 +62,1 @@\n-        this.pseudoClasses = Collections.unmodifiableSet(pseudoClasses);\n+        this.pseudoClasses = ImmutablePseudoClassSetsCache.of(pseudoClasses);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/Match.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import com.sun.javafx.css.ImmutablePseudoClassSetsCache;\n@@ -114,0 +115,1 @@\n+    \/\/ for test purposes\n@@ -184,1 +186,1 @@\n-        this.pseudoClassState = Collections.unmodifiableSet(pcs);\n+        this.pseudoClassState = ImmutablePseudoClassSetsCache.of(pcs);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/SimpleSelector.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n+import com.sun.javafx.css.ImmutablePseudoClassSetsCache;\n+\n@@ -83,1 +85,0 @@\n-        this.triggerStates = new PseudoClassState();\n@@ -517,1 +518,1 @@\n-    private PseudoClassState triggerStates = new PseudoClassState();\n+    private final PseudoClassState triggerStates = new PseudoClassState();\n@@ -556,1 +557,1 @@\n-        final Set<PseudoClass>[] retainedStates = new PseudoClassState[depth];\n+        final Set<PseudoClass>[] retainedStates = new Set[depth];\n@@ -567,0 +568,1 @@\n+\n@@ -568,8 +570,7 @@\n-            final CssStyleHelper helper = (parent instanceof Node) ? parent.styleHelper : null;\n-            if (helper != null) {\n-                final Set<PseudoClass> pseudoClassState = parent.pseudoClassStates;\n-                retainedStates[count] = new PseudoClassState();\n-                retainedStates[count].addAll(pseudoClassState);\n-                \/\/ retainAll method takes the intersection of pseudoClassState and helper.triggerStates\n-                retainedStates[count].retainAll(helper.triggerStates);\n-                count += 1;\n+            if (parent.styleHelper != null) {\n+                PseudoClassState pseudoClassState = new PseudoClassState();\n+\n+                pseudoClassState.addAll(parent.pseudoClassStates);\n+                pseudoClassState.retainAll(parent.styleHelper.triggerStates);\n+\n+                retainedStates[count++] = ImmutablePseudoClassSetsCache.of(pseudoClassState);\n@@ -577,0 +578,1 @@\n+\n@@ -580,1 +582,5 @@\n-        final Set<PseudoClass>[] transitionStates = new PseudoClassState[count];\n+        if (count == depth) {\n+          return retainedStates;\n+        }\n+\n+        final Set<PseudoClass>[] transitionStates = new Set[count];\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/CssStyleHelper.java","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -164,0 +164,25 @@\n+    @Test\n+    void shouldBeEqualAfterGrowAndShrink() {\n+        StyleClassSet set1 = new StyleClassSet();\n+        StyleClassSet set2 = new StyleClassSet();\n+\n+        set1.add(StyleClassSet.getStyleClass(\"abc\"));\n+        set2.add(StyleClassSet.getStyleClass(\"abc\"));\n+\n+        assertEquals(set1, set2);\n+\n+        for (int i = 0; i < 1000; i++) {\n+            \/\/ grow internal bit set array:\n+            set1.add(StyleClassSet.getStyleClass(\"\" + i));\n+\n+            assertNotEquals(set1, set2);\n+        }\n+\n+        for (int i = 0; i < 1000; i++) {\n+            set1.remove(StyleClassSet.getStyleClass(\"\" + i));\n+        }\n+\n+        \/\/ still equal despite internal array sizes being different size:\n+        assertEquals(set1, set2);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/BitSetTest.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.css;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.sun.javafx.css.ImmutablePseudoClassSetsCache;\n+import com.sun.javafx.css.PseudoClassState;\n+\n+import javafx.css.PseudoClass;\n+\n+public class ImmutablePseudoClassSetsCacheTest {\n+\n+    @Test\n+    void shouldCacheSets() {\n+        Set<PseudoClass> myOwnSet = Set.of(PseudoClass.getPseudoClass(\"a\"));\n+        Set<PseudoClass> pseudoClassState = new PseudoClassState();\n+\n+        pseudoClassState.add(PseudoClass.getPseudoClass(\"a\"));\n+\n+        Set<PseudoClass> set1 = ImmutablePseudoClassSetsCache.of(new HashSet<>(Set.of(PseudoClass.getPseudoClass(\"a\"))));\n+        Set<PseudoClass> set2 = ImmutablePseudoClassSetsCache.of(new HashSet<>(myOwnSet));\n+        Set<PseudoClass> set3 = ImmutablePseudoClassSetsCache.of(myOwnSet);\n+        Set<PseudoClass> set4 = ImmutablePseudoClassSetsCache.of(pseudoClassState);\n+        Set<PseudoClass> set5 = ImmutablePseudoClassSetsCache.of(Set.of(PseudoClass.getPseudoClass(\"b\")));\n+\n+        assertEquals(set1, set2);\n+        assertEquals(set2, set3);\n+        assertEquals(set3, set4);\n+        assertNotEquals(set1, set5);\n+        assertNotEquals(set2, set5);\n+        assertNotEquals(set3, set5);\n+        assertNotEquals(set4, set5);\n+\n+        assertSame(set1, set2);\n+        assertSame(set2, set3);\n+        assertSame(set3, set4);\n+\n+        assertEquals(myOwnSet, set1);\n+\n+        \/\/ this does not need to be true if this set was not the first one cached\n+        assertNotSame(myOwnSet, set1);\n+\n+        \/\/ tests if hashCode\/equals of BitSet respects contract...\n+        assertEquals(myOwnSet.hashCode(), pseudoClassState.hashCode());\n+        assertEquals(myOwnSet, pseudoClassState);\n+        assertEquals(pseudoClassState, myOwnSet);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/ImmutablePseudoClassSetsCacheTest.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"}]}