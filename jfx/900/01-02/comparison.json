{"files":[{"patch":"@@ -34,6 +34,0 @@\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n-import com.sun.javafx.tk.Toolkit;\n-\n@@ -63,0 +57,7 @@\n+\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import com.sun.javafx.tk.Toolkit;\n+\n@@ -875,1 +876,2 @@\n-     * checks that there are no memory leaks when replacing scroll pane content\n+     * Test that ScrollPane object is not leaked when 'same' node\n+     * is used as content for different ScrollPane objects, see JDK-8293444.\n@@ -878,1 +880,1 @@\n-    public void checkMemoryLeaks_JDK_8293444() {\n+    public void testScrollPaneObjLeakWhenUsedSameContent() {\n@@ -886,2 +888,0 @@\n-        stage.setWidth(600);\n-        stage.setHeight(600);\n@@ -912,1 +912,13 @@\n-        assertTrue(\"uncollected objects=\" + ct, ct <= 1);\n+        assertEquals(\"One instance should be held by the 'content' label\", 1, ct);\n+\n+        \/\/ releasing the last instance\n+        content = null;\n+\n+        ct = 0;\n+        for (WeakReference<ScrollPane> ref : refs) {\n+            JMemoryBuddy.checkCollectable(ref);\n+            if (ref.get() != null) {\n+                ct++;\n+            }\n+        }\n+        assertEquals(ct + \" references of ScrollPane are not freed.\", 0, ct);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/ScrollPaneSkinTest.java","additions":23,"deletions":11,"binary":false,"changes":34,"status":"modified"}]}