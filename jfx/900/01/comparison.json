{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import javafx.beans.WeakInvalidationListener;\n@@ -43,0 +44,1 @@\n+import javafx.beans.value.WeakChangeListener;\n@@ -188,0 +190,1 @@\n+    private final WeakInvalidationListener weakNodeListener = new WeakInvalidationListener(nodeListener);\n@@ -245,1 +248,1 @@\n-\n+    private final WeakChangeListener<Bounds> weakBoundsChangeListener = new WeakChangeListener(boundsChangeListener);\n@@ -277,2 +280,2 @@\n-                    scrollNode.layoutBoundsProperty().removeListener(nodeListener);\n-                    scrollNode.layoutBoundsProperty().removeListener(boundsChangeListener);\n+                    scrollNode.layoutBoundsProperty().removeListener(weakNodeListener);\n+                    scrollNode.layoutBoundsProperty().removeListener(weakBoundsChangeListener);\n@@ -286,2 +289,2 @@\n-                    scrollNode.layoutBoundsProperty().addListener(nodeListener);\n-                    scrollNode.layoutBoundsProperty().addListener(boundsChangeListener);\n+                    scrollNode.layoutBoundsProperty().addListener(weakNodeListener);\n+                    scrollNode.layoutBoundsProperty().addListener(weakBoundsChangeListener);\n@@ -638,2 +641,2 @@\n-            scrollNode.layoutBoundsProperty().addListener(nodeListener);\n-            scrollNode.layoutBoundsProperty().addListener(boundsChangeListener);\n+            scrollNode.layoutBoundsProperty().addListener(weakNodeListener);\n+            scrollNode.layoutBoundsProperty().addListener(weakBoundsChangeListener);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/ScrollPaneSkin.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,9 @@\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import com.sun.javafx.tk.Toolkit;\n+\n@@ -43,1 +52,5 @@\n-import javafx.scene.input.*;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.input.ScrollEvent;\n+import javafx.scene.input.SwipeEvent;\n+import javafx.scene.layout.BorderPane;\n@@ -50,4 +63,1 @@\n-\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import test.util.memory.JMemoryBuddy;\n@@ -863,0 +873,41 @@\n+\n+    \/**\n+     * checks that there are no memory leaks when replacing scroll pane content\n+     *\/\n+    @Test\n+    public void checkMemoryLeaks_JDK_8293444() {\n+\n+        ArrayList<WeakReference<ScrollPane>> refs = new ArrayList<>();\n+\n+        BorderPane bp = new BorderPane();\n+\n+        Stage stage = new Stage();\n+        stage.setScene(new Scene(bp));\n+        stage.setWidth(600);\n+        stage.setHeight(600);\n+        stage.show();\n+\n+        Label content = new Label(\"content\");\n+\n+        for (int i = 0; i < 10; i++) {\n+            ScrollPane sp = new ScrollPane(content);\n+            refs.add(new WeakReference<ScrollPane>(sp));\n+            bp.setCenter(sp);\n+\n+            Toolkit.getToolkit().firePulse();\n+        }\n+\n+        bp.setCenter(null);\n+        Toolkit.getToolkit().firePulse();\n+\n+        int ct = 0;\n+        for (WeakReference<ScrollPane> ref : refs) {\n+            JMemoryBuddy.checkCollectable(ref);\n+            if (ref.get() != null) {\n+                ct++;\n+            }\n+        }\n+\n+        \/\/ one instance is still held by the 'content' label\n+        assertTrue(\"uncollected objects=\" + ct, ct <= 1);\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/ScrollPaneSkinTest.java","additions":57,"deletions":6,"binary":false,"changes":63,"status":"modified"}]}