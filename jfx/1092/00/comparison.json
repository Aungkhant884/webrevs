{"files":[{"patch":"@@ -39,1 +39,0 @@\n-import javafx.beans.value.ChangeListener;\n@@ -48,1 +47,0 @@\n-import com.sun.javafx.binding.ExpressionHelper;\n@@ -87,3 +85,4 @@\n-    private static final class TextAreaContent implements Content {\n-        private ExpressionHelper<String> helper = null;\n-        private ArrayList<StringBuilder> paragraphs = new ArrayList<>();\n+    private static final class TextAreaContent extends ContentBase {\n+        private final List<StringBuilder> paragraphs = new ArrayList<>();\n+        private final ParagraphList paragraphList = new ParagraphList();\n+\n@@ -91,2 +90,0 @@\n-        private ParagraphList paragraphList = new ParagraphList();\n-        private ListListenerHelper<CharSequence> listenerHelper;\n@@ -217,1 +214,1 @@\n-                    ExpressionHelper.fireValueChangedEvent(helper);\n+                    fireValueChangedEvent();\n@@ -300,1 +297,1 @@\n-                    ExpressionHelper.fireValueChangedEvent(helper);\n+                    fireValueChangedEvent();\n@@ -313,8 +310,0 @@\n-        @Override public void addListener(ChangeListener<? super String> changeListener) {\n-            helper = ExpressionHelper.addListener(helper, this, changeListener);\n-        }\n-\n-        @Override public void removeListener(ChangeListener<? super String> changeListener) {\n-            helper = ExpressionHelper.removeListener(helper, changeListener);\n-        }\n-\n@@ -325,8 +314,0 @@\n-        @Override public void addListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override public void removeListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n@@ -335,1 +316,1 @@\n-            ListListenerHelper.fireValueChangedEvent(listenerHelper, change);\n+            ListListenerHelper.fireValueChangedEvent(paragraphList.listenerHelper, change);\n@@ -344,0 +325,1 @@\n+        private ListListenerHelper<CharSequence> listenerHelper;\n@@ -377,1 +359,1 @@\n-            content.listenerHelper = ListListenerHelper.addListener(content.listenerHelper, listener);\n+            listenerHelper = ListListenerHelper.addListener(listenerHelper, listener);\n@@ -382,1 +364,1 @@\n-            content.listenerHelper = ListListenerHelper.removeListener(content.listenerHelper, listener);\n+            listenerHelper = ListListenerHelper.removeListener(listenerHelper, listener);\n@@ -402,1 +384,1 @@\n-            content.listenerHelper = ListListenerHelper.addListener(content.listenerHelper, listener);\n+            listenerHelper = ListListenerHelper.addListener(listenerHelper, listener);\n@@ -407,1 +389,1 @@\n-            content.listenerHelper = ListListenerHelper.removeListener(content.listenerHelper, listener);\n+            listenerHelper = ListListenerHelper.removeListener(listenerHelper, listener);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TextArea.java","additions":12,"deletions":30,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import javafx.beans.InvalidationListener;\n@@ -36,1 +35,0 @@\n-import javafx.beans.value.ChangeListener;\n@@ -47,1 +45,0 @@\n-import com.sun.javafx.binding.ExpressionHelper;\n@@ -77,0 +74,1 @@\n+\n@@ -78,2 +76,1 @@\n-    private static final class TextFieldContent implements Content {\n-        private ExpressionHelper<String> helper = null;\n+    private static final class TextFieldContent extends ContentBase {\n@@ -91,1 +88,1 @@\n-                    ExpressionHelper.fireValueChangedEvent(helper);\n+                    fireValueChangedEvent();\n@@ -100,1 +97,1 @@\n-                    ExpressionHelper.fireValueChangedEvent(helper);\n+                    fireValueChangedEvent();\n@@ -113,8 +110,0 @@\n-        @Override public void addListener(ChangeListener<? super String> changeListener) {\n-            helper = ExpressionHelper.addListener(helper, this, changeListener);\n-        }\n-\n-        @Override public void removeListener(ChangeListener<? super String> changeListener) {\n-            helper = ExpressionHelper.removeListener(helper, changeListener);\n-        }\n-\n@@ -124,8 +113,0 @@\n-\n-        @Override public void addListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override public void removeListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TextField.java","additions":4,"deletions":23,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import javafx.beans.property.StringPropertyBase;\n@@ -122,0 +123,31 @@\n+    \/**\n+     * Package private base implementation of Content.\n+     *\/\n+    abstract static class ContentBase implements Content {\n+        private ExpressionHelper<String> helper;\n+\n+        @Override\n+        public void addListener(ChangeListener<? super String> changeListener) {\n+            helper = ExpressionHelper.addListener(helper, this, changeListener);\n+        }\n+\n+        @Override\n+        public void removeListener(ChangeListener<? super String> changeListener) {\n+            helper = ExpressionHelper.removeListener(helper, changeListener);\n+        }\n+\n+        @Override\n+        public void addListener(InvalidationListener listener) {\n+            helper = ExpressionHelper.addListener(helper, this, listener);\n+        }\n+\n+        @Override\n+        public void removeListener(InvalidationListener listener) {\n+            helper = ExpressionHelper.removeListener(helper, listener);\n+        }\n+\n+        protected final void fireValueChangedEvent() {\n+            ExpressionHelper.fireValueChangedEvent(helper);\n+        }\n+    }\n+\n@@ -142,3 +174,0 @@\n-            if (content.length() > 0) {\n-                text.textIsNull = false;\n-            }\n@@ -1371,22 +1400,26 @@\n-    \/\/ It can be bound, in which case we will force it to be an eager\n-    \/\/ binding so that we update the content eagerly\n-    \/\/ It can be bidirectionally bound, which basically will just work\n-    \/\/ If somebody changes the content directly, it will be notified and\n-    \/\/ send an invalidation event.\n-    private class TextProperty extends StringProperty {\n-        \/\/ This is used only when the property is bound\n-        private ObservableValue<? extends String> observable = null;\n-        \/\/ Added to the observable when bound\n-        private InvalidationListener listener = null;\n-        \/\/ Used for event handling\n-        private ExpressionHelper<String> helper = null;\n-        \/\/ The developer my set the Text property to null. Although\n-        \/\/ the Content must be given an empty String, we must still\n-        \/\/ treat the value as though it were null, so that a subsequent\n-        \/\/ getText() will return null.\n-        private boolean textIsNull = false;\n-\n-        @Override public String get() {\n-            \/\/ Since we force eager binding and content is always up to date,\n-            \/\/ we just need to get it from content and not through the binding\n-            return textIsNull ? null : content.get();\n+    \/**\n+     * A slightly modified standard String property for holding the text.\n+     * It is kept in sync with the Content instance when it is not bound.\n+     * A flag prevents a change from propagating more than once; for example,\n+     * when the Content instance is changed, it updates the property but\n+     * then doesn't again update itself, and vice versa, when the property\n+     * is changed, it updates the Content instance, but not again itself.\n+     *\n+     * This handles null values set programmatically correctly without extra\n+     * effort.\n+     *\n+     * The property allows unidirectional and bidirectional bindings. When\n+     * a unidirectional binding is present, the Content instance\n+     * can't be changed and the control effectively becomes read only.\n+     *\/\n+    private class TextProperty extends StringPropertyBase {\n+        private boolean propagate = true;\n+\n+        @Override\n+        public Object getBean() {\n+            return TextInputControl.this;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return \"text\";\n@@ -1395,3 +1428,22 @@\n-        @Override public void set(String value) {\n-            if (isBound()) {\n-                throw new java.lang.RuntimeException(\"A bound value cannot be set.\");\n+        @Override\n+        protected void invalidated() {\n+\n+            \/*\n+             * If this property is invalidated, and the value wasn't supplied by\n+             * the Content instance (propagate = true), then update the Content\n+             * instance with the property's current value.\n+             *\n+             * This keeps the Content instance always in sync with this property.\n+             *\/\n+\n+            if (propagate) {\n+                String value = get();\n+\n+                propagate = false;\n+\n+                try {\n+                    doSet(value);\n+                }\n+                finally {\n+                    propagate = true;\n+                }\n@@ -1399,2 +1451,0 @@\n-            doSet(value);\n-            markInvalid();\n@@ -1408,3 +1458,2 @@\n-            markInvalid();\n-            notifyAccessibleAttributeChanged(AccessibleAttribute.TEXT);\n-        }\n+            if (!isBound() && propagate) {\n+                propagate = false;\n@@ -1412,9 +1461,6 @@\n-        @Override public void bind(ObservableValue<? extends String> observable) {\n-            if (observable == null) {\n-                throw new NullPointerException(\"Cannot bind to null\");\n-            }\n-            if (!observable.equals(this.observable)) {\n-                unbind();\n-                this.observable = observable;\n-                if (listener == null) {\n-                    listener = new Listener();\n+                try {\n+                    set(content.get());\n+                    notifyAccessibleAttributeChanged(AccessibleAttribute.TEXT);\n+                }\n+                finally {\n+                    propagate = true;\n@@ -1422,11 +1468,0 @@\n-                this.observable.addListener(listener);\n-                markInvalid();\n-                doSet(observable.getValue());\n-            }\n-        }\n-\n-        @Override public void unbind() {\n-            if (observable != null) {\n-                doSet(observable.getValue());\n-                observable.removeListener(listener);\n-                observable = null;\n@@ -1436,36 +1471,0 @@\n-        @Override public boolean isBound() {\n-            return observable != null;\n-        }\n-\n-        @Override public void addListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override public void removeListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n-        @Override public void addListener(ChangeListener<? super String> listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override public void removeListener(ChangeListener<? super String> listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n-        @Override public Object getBean() {\n-            return TextInputControl.this;\n-        }\n-\n-        @Override public String getName() {\n-            return \"text\";\n-        }\n-\n-        private void fireValueChangedEvent() {\n-            ExpressionHelper.fireValueChangedEvent(helper);\n-        }\n-\n-        private void markInvalid() {\n-            fireValueChangedEvent();\n-        }\n-\n@@ -1481,4 +1480,2 @@\n-        private void doSet(String value) {\n-            \/\/ Guard against the null value.\n-            textIsNull = value == null;\n-            if (value == null) value = \"\";\n+        private void doSet(String currentValue) {\n+            String value = currentValue == null ? \"\" : currentValue;\n@@ -1486,1 +1483,3 @@\n-            if (!filterAndSet(value)) return;\n+            if (!filterAndSet(value)) {\n+                return;\n+            }\n@@ -1500,12 +1499,0 @@\n-\n-        private class Listener implements InvalidationListener {\n-            @Override\n-            public void invalidated(Observable valueModel) {\n-                \/\/ We now need to force it to be eagerly recomputed\n-                \/\/ because we need to push these changes to the\n-                \/\/ content model. Because changing the model ends\n-                \/\/ up calling invalidate and markInvalid, the\n-                \/\/ listeners will all be notified.\n-                doSet(observable.getValue());\n-            }\n-        }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TextInputControl.java","additions":93,"deletions":106,"binary":false,"changes":199,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import com.sun.javafx.binding.ExpressionHelper;\n@@ -31,0 +30,1 @@\n+import javafx.beans.property.ReadOnlyBooleanPropertyBase;\n@@ -44,1 +44,1 @@\n-public class TreeShowingExpression extends BooleanExpression {\n+public class TreeShowingExpression extends ReadOnlyBooleanPropertyBase {\n@@ -51,1 +51,0 @@\n-    private ExpressionHelper<Boolean> helper;\n@@ -69,0 +68,10 @@\n+    @Override\n+    public Object getBean() {\n+        return node;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"treeShowing\";\n+    }\n+\n@@ -82,20 +91,0 @@\n-    @Override\n-    public void addListener(InvalidationListener listener) {\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n-    }\n-\n-    @Override\n-    public void removeListener(InvalidationListener listener) {\n-        helper = ExpressionHelper.removeListener(helper, listener);\n-    }\n-\n-    @Override\n-    public void addListener(ChangeListener<? super Boolean> listener) {\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n-    }\n-\n-    @Override\n-    public void removeListener(ChangeListener<? super Boolean> listener) {\n-        helper = ExpressionHelper.removeListener(helper, listener);\n-    }\n-\n@@ -105,1 +94,1 @@\n-            ExpressionHelper.fireValueChangedEvent(helper);\n+            fireValueChangedEvent();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/TreeShowingExpression.java","additions":13,"deletions":24,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -122,1 +122,0 @@\n-import com.sun.javafx.binding.ExpressionHelper;\n@@ -8594,1 +8593,1 @@\n-    class TreeVisiblePropertyReadOnly extends BooleanExpression {\n+    class TreeVisiblePropertyReadOnly extends ReadOnlyBooleanPropertyBase {\n@@ -8596,1 +8595,0 @@\n-        private ExpressionHelper<Boolean> helper;\n@@ -8600,12 +8598,2 @@\n-        public void addListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override\n-        public void removeListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n-        @Override\n-        public void addListener(ChangeListener<? super Boolean> listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n+        public Object getBean() {\n+            return Node.this;\n@@ -8615,2 +8603,2 @@\n-        public void removeListener(ChangeListener<? super Boolean> listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n+        public String getName() {\n+            return \"treeVisible\";\n@@ -8622,1 +8610,1 @@\n-                ExpressionHelper.fireValueChangedEvent(helper);\n+                fireValueChangedEvent();\n@@ -9754,1 +9742,1 @@\n-            extends ReadOnlyObjectProperty<Transform> {\n+            extends ReadOnlyObjectPropertyBase<Transform> {\n@@ -9761,2 +9749,0 @@\n-        private ExpressionHelper<Transform> helper;\n-\n@@ -9766,20 +9752,0 @@\n-        @Override\n-        public void addListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override\n-        public void removeListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n-        @Override\n-        public void addListener(ChangeListener<? super Transform> listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override\n-        public void removeListener(ChangeListener<? super Transform> listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n@@ -9813,1 +9779,1 @@\n-                ExpressionHelper.fireValueChangedEvent(helper);\n+                fireValueChangedEvent();\n@@ -9823,2 +9789,1 @@\n-            extends ReadOnlyObjectProperty<Bounds> {\n-        private ExpressionHelper<Bounds> helper;\n+            extends ReadOnlyObjectPropertyBase<Bounds> {\n@@ -9829,20 +9794,0 @@\n-        @Override\n-        public void addListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override\n-        public void removeListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n-        @Override\n-        public void addListener(ChangeListener<? super Bounds> listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override\n-        public void removeListener(ChangeListener<? super Bounds> listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n@@ -9862,1 +9807,1 @@\n-                ExpressionHelper.fireValueChangedEvent(helper);\n+                fireValueChangedEvent();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":10,"deletions":65,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import javafx.beans.value.ChangeListener;\n@@ -64,1 +63,0 @@\n-import com.sun.javafx.binding.ExpressionHelper;\n@@ -916,1 +914,1 @@\n-    private final class InsetsProperty extends ReadOnlyObjectProperty<Insets> {\n+    private final class InsetsProperty extends ReadOnlyObjectPropertyBase<Insets> {\n@@ -918,1 +916,0 @@\n-        private ExpressionHelper<Insets> helper = null;\n@@ -923,16 +920,0 @@\n-        @Override public void addListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override public void removeListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n-        @Override public void addListener(ChangeListener<? super Insets> listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override public void removeListener(ChangeListener<? super Insets> listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n@@ -943,1 +924,1 @@\n-            ExpressionHelper.fireValueChangedEvent(helper);\n+            fireValueChangedEvent();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Region.java","additions":2,"deletions":21,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import com.sun.javafx.binding.ExpressionHelper;\n@@ -36,0 +35,1 @@\n+import javafx.beans.property.ReadOnlyDoublePropertyBase;\n@@ -49,2 +49,0 @@\n-import javafx.beans.InvalidationListener;\n-import javafx.beans.value.ChangeListener;\n@@ -1204,1 +1202,1 @@\n-    private abstract class TileSizeProperty extends ReadOnlyDoubleProperty {\n+    private abstract class TileSizeProperty extends ReadOnlyDoublePropertyBase {\n@@ -1206,1 +1204,1 @@\n-        private ExpressionHelper<Number> helper;\n+\n@@ -1227,20 +1225,0 @@\n-        @Override\n-        public void addListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override\n-        public void removeListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n-        @Override\n-        public void addListener(ChangeListener<? super Number> listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override\n-        public void removeListener(ChangeListener<? super Number> listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n@@ -1260,1 +1238,1 @@\n-                ExpressionHelper.fireValueChangedEvent(helper);\n+                fireValueChangedEvent();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/TilePane.java","additions":4,"deletions":26,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import com.sun.javafx.binding.ExpressionHelper;\n@@ -44,1 +43,0 @@\n-import javafx.beans.InvalidationListener;\n@@ -47,0 +45,1 @@\n+import javafx.beans.property.ReadOnlyBooleanPropertyBase;\n@@ -48,1 +47,0 @@\n-import javafx.beans.value.ChangeListener;\n@@ -677,1 +675,1 @@\n-            extends ReadOnlyBooleanProperty {\n+            extends ReadOnlyBooleanPropertyBase {\n@@ -679,1 +677,0 @@\n-        private ExpressionHelper<Boolean> helper;\n@@ -683,20 +680,0 @@\n-        @Override\n-        public void addListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override\n-        public void removeListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n-        @Override\n-        public void addListener(ChangeListener<? super Boolean> listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override\n-        public void removeListener(ChangeListener<? super Boolean> listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n@@ -716,1 +693,1 @@\n-                ExpressionHelper.fireValueChangedEvent(helper);\n+                fireValueChangedEvent();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/transform\/Transform.java","additions":3,"deletions":26,"binary":false,"changes":29,"status":"modified"}]}