{"files":[{"patch":"@@ -550,0 +550,5 @@\n+def sourceDateEpoch = System.getenv(\"SOURCE_DATE_EPOCH\")\n+if (sourceDateEpoch != null) {\n+    def ms = 1000 * Long.parseLong(sourceDateEpoch)\n+    buildDate = new java.util.Date(ms)\n+}\n@@ -1342,0 +1347,1 @@\n+logger.quiet(\"BUILD_TIMESTAMP: $BUILD_TIMESTAMP\")\n@@ -3850,0 +3856,8 @@\n+    \/\/ Reproducible archives\n+    tasks.withType(AbstractArchiveTask) {\n+        if (sourceDateEpoch != null) {\n+            preserveFileTimestamps = false\n+            reproducibleFileOrder = true\n+        }\n+    }\n+\n@@ -4167,10 +4181,0 @@\n-    \/\/ FIXME: do we really need the index task for this modular jar?\n-    def javafxSwtIndexTask = task(\"javafxSwtIndex$t.capital\") {\n-        \/\/the following is a workaround for the lack of indexing in gradle 1.4 through 1.7\n-        dependsOn(javafxSwtTask)\n-\n-        doLast() {\n-            ant.jar (update: true, index: true, destfile: \"${javafxSwtTask.destinationDir}\/${javafxSwtTask.archiveName}\")\n-        }\n-    }\n-\n@@ -4179,1 +4183,1 @@\n-        dependsOn(javafxSwtIndexTask)\n+        dependsOn(javafxSwtTask)\n@@ -5047,2 +5051,2 @@\n-                def javafxSwtIndexTask = tasks.getByName(\"javafxSwtIndex${t.capital}\");\n-                dependsOn(javafxSwtIndexTask)\n+                def javafxSwtTask = tasks.getByName(\"javafxSwt$t.capital\");\n+                dependsOn(javafxSwtTask)\n","filename":"build.gradle","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-            args(objectDir.listFiles().findAll{ !it.getAbsolutePath().endsWith(\".bc\") });\n+            args(objectDir.listFiles().sort().findAll{ !it.getAbsolutePath().endsWith(\".bc\") });\n","filename":"buildSrc\/src\/main\/groovy\/com\/sun\/javafx\/gradle\/LinkTask.groovy","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -114,0 +114,2 @@\n+\/\/ Enables reproducible builds when defined\n+def sourceDateEpoch = System.getenv(\"SOURCE_DATE_EPOCH\")\n@@ -122,0 +124,3 @@\n+if (sourceDateEpoch != null) {\n+    ccFlags.add(\"\/experimental:deterministic\")\n+}\n@@ -129,0 +134,3 @@\n+if (sourceDateEpoch != null) {\n+    linkFlags.add(\"\/experimental:deterministic\")\n+}\n","filename":"buildSrc\/win.gradle","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-\t   $(INCLUDES) \\\n+           $(INCLUDES) \\\n@@ -112,0 +112,6 @@\n+# Enables reproducible builds when defined\n+ifdef SOURCE_DATE_EPOCH\n+    CFLAGS += -experimental:deterministic\n+    LDFLAGS += -experimental:deterministic\n+endif\n+\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/projects\/win\/fxplugins\/Makefile","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-\t      Winmm.lib\n+              Winmm.lib\n@@ -50,0 +50,5 @@\n+# Enables reproducible builds when defined\n+ifdef SOURCE_DATE_EPOCH\n+    LDFLAGS += -experimental:deterministic\n+endif\n+\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/projects\/win\/glib-lite\/Makefile","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,0 +48,5 @@\n+# Enables reproducible builds when defined\n+ifdef SOURCE_DATE_EPOCH\n+    LDFLAGS += -experimental:deterministic\n+endif\n+\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/projects\/win\/gstreamer-lite\/Makefile","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-\t $(INCLUDES) \\\n+         $(INCLUDES) \\\n@@ -96,0 +96,6 @@\n+# Enables reproducible builds when defined\n+ifdef SOURCE_DATE_EPOCH\n+    CFLAGS += -experimental:deterministic\n+    LDFLAGS += -experimental:deterministic\n+endif\n+\n","filename":"modules\/javafx.media\/src\/main\/native\/jfxmedia\/projects\/win\/Makefile","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}