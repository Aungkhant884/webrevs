{"files":[{"patch":"@@ -56,0 +56,6 @@\n+import java.nio.file.Files\n+import java.nio.file.StandardCopyOption\n+import java.time.Instant\n+import java.time.LocalDateTime\n+import java.time.ZoneOffset\n+import java.time.temporal.ChronoUnit\n@@ -60,0 +66,3 @@\n+import java.util.zip.ZipEntry\n+import java.util.zip.ZipFile\n+import java.util.zip.ZipOutputStream\n@@ -253,0 +262,44 @@\n+\/**\n+ * Rewrites the ZIP or JAR archive, setting the timestamp of each entry to\n+ * the local date and time in UTC of the instant provided.\n+ *\n+ * Note that using the method 'eachFile(Closure)' of the Zip Task for this\n+ * purpose fails to modify the JAR entries for META-INF and MANIFEST.MF\n+ * because the manifest file is generated by Gradle instead of copied.\n+ *\n+ * Also note that the ZIP format has no notion of time zone. The UTC date\n+ * and time can be set in optional extra fields, but only in addition to\n+ * the local \"MS-DOS date and time.\" To avoid depending on the time zone\n+ * of the build machine, this method provides the local date and time in\n+ * UTC by calling 'setTimeLocal(LocalDateTime)'.\n+ *\n+ * An alternative solution is to set the default time zone of the\n+ * JVM temporarily to UTC while providing the UTC date and time with\n+ * 'setLastModifiedTime(FileTime)'. This solution stores the precise instant\n+ * on the time-line, but it also increases the size of the archive by adding\n+ * an extra Extended Timestamp field for each entry.\n+ *\n+ * @param archive the ZIP or JAR archive file to rewrite\n+ * @param instant the instant for the timestamp of each entry\n+ *\/\n+void setFileTimestamps(Provider<RegularFile> archive, Instant instant) {\n+    def dosTime = LocalDateTime.ofInstant(instant, ZoneOffset.UTC)\n+    def oldFile = archive.get().getAsFile()\n+    def zipFile = new ZipFile(oldFile)\n+    def newName = oldFile.getName() + \".new\"\n+    def newFile = new File(oldFile.getParentFile(), newName)\n+    def output = new ZipOutputStream(new FileOutputStream(newFile))\n+    zipFile.entries().each { ZipEntry entry ->\n+        def clone = new ZipEntry(entry)\n+        def input = zipFile.getInputStream(entry)\n+        clone.setTimeLocal(dosTime)\n+        output.putNextEntry(clone)\n+        input.transferTo(output)\n+        output.closeEntry()\n+        input.close()\n+    }\n+    output.close()\n+    zipFile.close()\n+    Files.move(newFile.toPath(), oldFile.toPath(), StandardCopyOption.REPLACE_EXISTING)\n+}\n+\n@@ -553,2 +606,8 @@\n-def buildDate = new java.util.Date()\n-def buildTimestamp = new java.text.SimpleDateFormat(\"yyyy-MM-dd-HHmmss\").format(buildDate)\n+def buildInstant = Instant.now().truncatedTo(ChronoUnit.SECONDS)\n+def sourceDateEpoch = System.getenv(\"SOURCE_DATE_EPOCH\")\n+if (sourceDateEpoch != null) {\n+    def epochSeconds = Long.parseLong(sourceDateEpoch)\n+    buildInstant = Instant.ofEpochSecond(epochSeconds)\n+}\n+\/\/ Creates the timestamp in UTC using the ISO 8601 date and time format\n+def buildTimestamp = buildInstant.toString()\n@@ -1350,0 +1409,1 @@\n+logger.quiet(\"BUILD_TIMESTAMP: $BUILD_TIMESTAMP\")\n@@ -3509,0 +3569,5 @@\n+                        \/\/ Adds compiler and linker flags if present\n+                        def cFlags = webkitProperties.ccFlags?.join(' ') ?: ''\n+                        def lFlags = webkitProperties.linkFlags?.join(' ') ?: ''\n+                        cmakeArgs = \"$cmakeArgs -DCMAKE_C_FLAGS='${cFlags}' -DCMAKE_CXX_FLAGS='${cFlags}'\"\n+                        cmakeArgs = \"$cmakeArgs -DCMAKE_SHARED_LINKER_FLAGS='${lFlags}'\"\n@@ -3902,0 +3967,11 @@\n+    \/\/ Normalizes the ZIP and JAR archives\n+    tasks.withType(Zip) {\n+        if (sourceDateEpoch != null) {\n+            preserveFileTimestamps = false\n+            reproducibleFileOrder = true\n+            doLast {\n+                setFileTimestamps(archiveFile, buildInstant)\n+            }\n+        }\n+    }\n+\n@@ -4225,12 +4301,0 @@\n-    \/\/ FIXME: do we really need the index task for this modular jar?\n-    def javafxSwtIndexTask = task(\"javafxSwtIndex$t.capital\") {\n-        \/\/the following is a workaround for the lack of indexing in gradle 1.4 through 1.7\n-        dependsOn(javafxSwtTask)\n-\n-        doLast() {\n-            def destDir = javafxSwtTask.destinationDirectory.get()\n-            def afName = javafxSwtTask.archiveFileName.get()\n-            ant.jar (update: true, index: true, destfile: \"${destDir}\/${afName}\")\n-        }\n-    }\n-\n@@ -4239,1 +4303,1 @@\n-        dependsOn(javafxSwtIndexTask)\n+        dependsOn(javafxSwtTask)\n@@ -4386,9 +4450,8 @@\n-        \/\/ Use native zip tool so that file permissions are preserved on Windows\n-        def zipSdkTask = task(\"zipSdk$t.capital\", dependsOn: publicExportsTask) {\n-            doLast {\n-                def outZipFile = \"${bundlesDir}\/${sdkBundleName}.zip\"\n-                mkdir bundlesDir\n-                exec {\n-                    workingDir(artifactsDir)\n-                    commandLine(\"zip\", \"-q\", \"-r\", outZipFile, sdkBundleName)\n-                }\n+        def zipSdkTask = task(\"zipSdk$t.capital\", type: Zip, dependsOn: publicExportsTask) {\n+            destinationDirectory = file(\"${bundlesDir}\")\n+            archiveFileName = \"${sdkBundleName}.zip\"\n+            includeEmptyDirs = false\n+            \/\/ Sets directory and file permissions in archive for Windows\n+            if (IS_WINDOWS && IS_USE_CYGWIN) {\n+                dirMode = 0755\n+                fileMode = 0755\n@@ -4396,0 +4459,2 @@\n+            from sdkArtifactsDir\n+            into \"${sdkBundleName}\"\n@@ -5107,2 +5172,2 @@\n-                def javafxSwtIndexTask = tasks.getByName(\"javafxSwtIndex${t.capital}\");\n-                dependsOn(javafxSwtIndexTask)\n+                def javafxSwtTask = tasks.getByName(\"javafxSwt$t.capital\");\n+                dependsOn(javafxSwtTask)\n@@ -5254,0 +5319,7 @@\n+\/\/\n+\/\/ TODO: Use SOURCE_DATE_EPOCH when the following JMOD enhancements are\n+\/\/ complete, provisionally by adding '--source-date <timestamp>'.\n+\/\/ - Enable deterministic file content ordering for Jar and Jmod\n+\/\/   https:\/\/bugs.openjdk.java.net\/browse\/JDK-8276764\n+\/\/ - Enable jar and jmod to produce deterministic timestamped content\n+\/\/   https:\/\/bugs.openjdk.java.net\/browse\/JDK-8276766\n","filename":"build.gradle","additions":98,"deletions":26,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-            args(objectDir.listFiles().findAll{ !it.getAbsolutePath().endsWith(\".bc\") });\n+            args(objectDir.listFiles().sort().findAll{ !it.getAbsolutePath().endsWith(\".bc\") });\n","filename":"buildSrc\/src\/main\/groovy\/com\/sun\/javafx\/gradle\/LinkTask.groovy","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -118,0 +118,2 @@\n+\/\/ Enables reproducible builds when defined\n+def sourceDateEpoch = System.getenv(\"SOURCE_DATE_EPOCH\")\n@@ -126,0 +128,3 @@\n+if (sourceDateEpoch != null) {\n+    ccFlags.add(\"\/experimental:deterministic\")\n+}\n@@ -133,0 +138,3 @@\n+if (sourceDateEpoch != null) {\n+    linkFlags.add(\"\/experimental:deterministic\")\n+}\n@@ -462,0 +470,4 @@\n+if (sourceDateEpoch != null) {\n+    WIN.webkit.ccFlags = [\"\/experimental:deterministic\"].flatten()\n+    WIN.webkit.linkFlags = [\"\/experimental:deterministic\"].flatten()\n+}\n","filename":"buildSrc\/win.gradle","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-\t   $(INCLUDES) \\\n+           $(INCLUDES) \\\n@@ -112,0 +112,6 @@\n+# Enables reproducible builds when defined\n+ifdef SOURCE_DATE_EPOCH\n+    CFLAGS += -experimental:deterministic\n+    LDFLAGS += -experimental:deterministic\n+endif\n+\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/projects\/win\/fxplugins\/Makefile","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-\t      Winmm.lib\n+              Winmm.lib\n@@ -50,0 +50,5 @@\n+# Enables reproducible builds when defined\n+ifdef SOURCE_DATE_EPOCH\n+    LDFLAGS += -experimental:deterministic\n+endif\n+\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/projects\/win\/glib-lite\/Makefile","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,0 +48,5 @@\n+# Enables reproducible builds when defined\n+ifdef SOURCE_DATE_EPOCH\n+    LDFLAGS += -experimental:deterministic\n+endif\n+\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/projects\/win\/gstreamer-lite\/Makefile","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-\t $(INCLUDES) \\\n+         $(INCLUDES) \\\n@@ -121,0 +121,6 @@\n+# Enables reproducible builds when defined\n+ifdef SOURCE_DATE_EPOCH\n+    CFLAGS += -experimental:deterministic\n+    LDFLAGS += -experimental:deterministic\n+endif\n+\n","filename":"modules\/javafx.media\/src\/main\/native\/jfxmedia\/projects\/win\/Makefile","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}