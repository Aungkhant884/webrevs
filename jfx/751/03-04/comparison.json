{"files":[{"patch":"@@ -33,1 +33,0 @@\n-import java.util.Collections;\n@@ -45,1 +44,1 @@\n-            assertThrows(NullPointerException.class, () -> list.removeAll((Collection<?>) null));\n+            assertThrows(NullPointerException.class, () -> list.removeAll((Collection<String>) null));\n@@ -57,1 +56,1 @@\n-            list.removeAll(Collections.<String>emptyList());\n+            list.removeAll(List.of());\n@@ -73,1 +72,1 @@\n-            assertThrows(NullPointerException.class, () -> list.retainAll((Collection<?>) null));\n+            assertThrows(NullPointerException.class, () -> list.retainAll((Collection<String>) null));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ObservableListWrapperTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import java.util.Collection;\n-import java.util.Collections;\n@@ -48,2 +46,2 @@\n-            var map1 = new ObservableMapWrapper<>(new HashMap<>());\n-            assertThrows(NullPointerException.class, () -> map1.entrySet().removeAll((Collection<?>) null));\n+            var emptyMap = new ObservableMapWrapper<>(new HashMap<>());\n+            assertThrows(NullPointerException.class, () -> emptyMap.entrySet().removeAll(null));\n@@ -51,2 +49,2 @@\n-            var map2 = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n-            assertThrows(NullPointerException.class, () -> map2.entrySet().removeAll((Collection<?>) null));\n+            var nonEmptyMap = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n+            assertThrows(NullPointerException.class, () -> nonEmptyMap.entrySet().removeAll(null));\n@@ -57,2 +55,2 @@\n-            var map1 = new ObservableMapWrapper<>(new HashMap<>());\n-            assertThrows(NullPointerException.class, () -> map1.keySet().removeAll((Collection<?>) null));\n+            var emptyMap = new ObservableMapWrapper<>(new HashMap<>());\n+            assertThrows(NullPointerException.class, () -> emptyMap.keySet().removeAll(null));\n@@ -60,2 +58,2 @@\n-            var map2 = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n-            assertThrows(NullPointerException.class, () -> map2.keySet().removeAll((Collection<?>) null));\n+            var nonEmptyMap = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n+            assertThrows(NullPointerException.class, () -> nonEmptyMap.keySet().removeAll(null));\n@@ -65,3 +63,3 @@\n-        public void testValueSetNullArgumentThrowsNPE() {\n-            var map1 = new ObservableMapWrapper<>(new HashMap<>());\n-            assertThrows(NullPointerException.class, () -> map1.values().removeAll((Collection<?>) null));\n+        public void testValuesNullArgumentThrowsNPE() {\n+            var emptyMap = new ObservableMapWrapper<>(new HashMap<>());\n+            assertThrows(NullPointerException.class, () -> emptyMap.values().removeAll(null));\n@@ -69,2 +67,2 @@\n-            var map2 = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n-            assertThrows(NullPointerException.class, () -> map2.values().removeAll((Collection<?>) null));\n+            var nonEmptyMap = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n+            assertThrows(NullPointerException.class, () -> nonEmptyMap.values().removeAll(null));\n@@ -76,1 +74,1 @@\n-            map.keySet().removeAll(Collections.<String>emptySet());\n+            map.keySet().removeAll(Set.of());\n@@ -82,1 +80,1 @@\n-            map.values().removeAll(Collections.<String>emptySet());\n+            map.values().removeAll(Set.of());\n@@ -88,1 +86,1 @@\n-            map.entrySet().removeAll(Collections.<Map.Entry<String, String>>emptySet());\n+            map.entrySet().removeAll(Set.of());\n@@ -105,1 +103,1 @@\n-            assertThrows(NullPointerException.class, () -> map1.entrySet().retainAll((Collection<?>) null));\n+            assertThrows(NullPointerException.class, () -> map1.entrySet().retainAll(null));\n@@ -108,1 +106,1 @@\n-            assertThrows(NullPointerException.class, () -> map2.entrySet().retainAll((Collection<?>) null));\n+            assertThrows(NullPointerException.class, () -> map2.entrySet().retainAll(null));\n@@ -114,1 +112,1 @@\n-            assertThrows(NullPointerException.class, () -> map1.keySet().retainAll((Collection<?>) null));\n+            assertThrows(NullPointerException.class, () -> map1.keySet().retainAll(null));\n@@ -117,1 +115,1 @@\n-            assertThrows(NullPointerException.class, () -> map2.keySet().retainAll((Collection<?>) null));\n+            assertThrows(NullPointerException.class, () -> map2.keySet().retainAll(null));\n@@ -121,1 +119,1 @@\n-        public void testValueSetNullArgumentThrowsNPE() {\n+        public void testValuesNullArgumentThrowsNPE() {\n@@ -123,1 +121,1 @@\n-            assertThrows(NullPointerException.class, () -> map1.values().retainAll((Collection<?>) null));\n+            assertThrows(NullPointerException.class, () -> map1.values().retainAll(null));\n@@ -126,1 +124,1 @@\n-            assertThrows(NullPointerException.class, () -> map2.values().retainAll((Collection<?>) null));\n+            assertThrows(NullPointerException.class, () -> map2.values().retainAll(null));\n@@ -148,1 +146,1 @@\n-        public void testRetainAllWithEmptyCollectionArgumentWorksCorrectly() {\n+        public void testRetainAllEntriesWithEmptyCollectionArgumentWorksCorrectly() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ObservableMapWrapperTest.java","additions":24,"deletions":26,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.util.Collections;\n@@ -43,1 +42,1 @@\n-        var list = new ObservableSequentialListWrapper<String>(Collections.emptyList()) {\n+        var list = new ObservableSequentialListWrapper<String>(List.of()) {\n@@ -55,2 +54,1 @@\n-        assertDoesNotThrow(() -> list.addAll(Collections.emptyList()));\n-        assertDoesNotThrow(() -> list.addAll(0, Collections.emptyList()));\n+        assertDoesNotThrow(() -> list.addAll(0, List.of()));\n@@ -62,2 +60,2 @@\n-        assertThrows(IndexOutOfBoundsException.class, () -> nonEmptyList.addAll(-1, Collections.emptyList()));\n-        assertThrows(IndexOutOfBoundsException.class, () -> nonEmptyList.addAll(4, Collections.emptyList()));\n+        assertThrows(IndexOutOfBoundsException.class, () -> nonEmptyList.addAll(-1, List.of()));\n+        assertThrows(IndexOutOfBoundsException.class, () -> nonEmptyList.addAll(4, List.of()));\n@@ -67,2 +65,2 @@\n-        assertThrows(IndexOutOfBoundsException.class, () -> emptyList.addAll(-1, Collections.emptyList()));\n-        assertThrows(IndexOutOfBoundsException.class, () -> emptyList.addAll(1, Collections.emptyList()));\n+        assertThrows(IndexOutOfBoundsException.class, () -> emptyList.addAll(-1, List.of()));\n+        assertThrows(IndexOutOfBoundsException.class, () -> emptyList.addAll(1, List.of()));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ObservableSequentialListWrapperTest.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import java.util.Collection;\n-import java.util.Collections;\n@@ -46,1 +44,1 @@\n-            assertThrows(NullPointerException.class, () -> set.removeAll((Collection<?>) null));\n+            assertThrows(NullPointerException.class, () -> set.removeAll(null));\n@@ -58,1 +56,1 @@\n-            set.removeAll(Collections.<String>emptySet());\n+            set.removeAll(Set.of());\n@@ -74,1 +72,1 @@\n-            assertThrows(NullPointerException.class, () -> set.retainAll((Collection<?>) null));\n+            assertThrows(NullPointerException.class, () -> set.retainAll(null));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ObservableSetWrapperTest.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.util.Collections;\n@@ -78,1 +77,1 @@\n-            var list = new MockModifiableObservableList(Collections.emptyList()) {\n+            var list = new MockModifiableObservableList(List.of()) {\n@@ -90,2 +89,2 @@\n-            assertDoesNotThrow(() -> list.addAll(Collections.emptyList()));\n-            assertDoesNotThrow(() -> list.addAll(0, Collections.emptyList()));\n+            assertDoesNotThrow(() -> list.addAll(List.of()));\n+            assertDoesNotThrow(() -> list.addAll(0, List.of()));\n@@ -97,2 +96,2 @@\n-            assertThrows(IndexOutOfBoundsException.class, () -> nonEmptyList.addAll(-1, Collections.emptyList()));\n-            assertThrows(IndexOutOfBoundsException.class, () -> nonEmptyList.addAll(4, Collections.emptyList()));\n+            assertThrows(IndexOutOfBoundsException.class, () -> nonEmptyList.addAll(-1, List.of()));\n+            assertThrows(IndexOutOfBoundsException.class, () -> nonEmptyList.addAll(4, List.of()));\n@@ -102,2 +101,2 @@\n-            assertThrows(IndexOutOfBoundsException.class, () -> emptyList.addAll(-1, Collections.emptyList()));\n-            assertThrows(IndexOutOfBoundsException.class, () -> emptyList.addAll(1, Collections.emptyList()));\n+            assertThrows(IndexOutOfBoundsException.class, () -> emptyList.addAll(-1, List.of()));\n+            assertThrows(IndexOutOfBoundsException.class, () -> emptyList.addAll(1, List.of()));\n@@ -125,1 +124,1 @@\n-            assertDoesNotThrow(() -> list.removeAll(Collections.<String>emptyList()));\n+            assertDoesNotThrow(() -> list.removeAll(List.of()));\n@@ -158,1 +157,1 @@\n-            }.retainAll(Collections.<String>emptyList());\n+            }.retainAll(List.of());\n@@ -172,1 +171,1 @@\n-            assertDoesNotThrow(() -> list.retainAll(Collections.<String>emptyList()));\n+            assertDoesNotThrow(() -> list.retainAll(List.of()));\n@@ -186,1 +185,1 @@\n-            var backingSubList = new ArrayList<>(Collections.<String>emptyList()) {\n+            var backingSubList = new ArrayList<String>(List.of()) {\n@@ -198,3 +197,3 @@\n-            var subList = new MockModifiableObservableList(Collections.emptyList(), backingSubList).subList(0, 0);\n-            assertDoesNotThrow(() -> subList.addAll(Collections.emptyList()));\n-            assertDoesNotThrow(() -> subList.addAll(0, Collections.emptyList()));\n+            var subList = new MockModifiableObservableList(List.of(), backingSubList).subList(0, 0);\n+            assertDoesNotThrow(() -> subList.addAll(List.of()));\n+            assertDoesNotThrow(() -> subList.addAll(0, List.of()));\n@@ -209,2 +208,2 @@\n-            assertThrows(IndexOutOfBoundsException.class, () -> nonEmptySubList.addAll(-1, Collections.emptyList()));\n-            assertThrows(IndexOutOfBoundsException.class, () -> nonEmptySubList.addAll(3, Collections.emptyList()));\n+            assertThrows(IndexOutOfBoundsException.class, () -> nonEmptySubList.addAll(-1, List.of()));\n+            assertThrows(IndexOutOfBoundsException.class, () -> nonEmptySubList.addAll(3, List.of()));\n@@ -217,2 +216,2 @@\n-            assertThrows(IndexOutOfBoundsException.class, () -> emptySubList.addAll(-1, Collections.emptyList()));\n-            assertThrows(IndexOutOfBoundsException.class, () -> emptySubList.addAll(1, Collections.emptyList()));\n+            assertThrows(IndexOutOfBoundsException.class, () -> emptySubList.addAll(-1, List.of()));\n+            assertThrows(IndexOutOfBoundsException.class, () -> emptySubList.addAll(1, List.of()));\n@@ -242,1 +241,1 @@\n-            assertDoesNotThrow(() -> subList.removeAll(Collections.<String>emptyList()));\n+            assertDoesNotThrow(() -> subList.removeAll(List.of()));\n@@ -281,1 +280,1 @@\n-            subList.retainAll(Collections.<String>emptyList());\n+            subList.retainAll(List.of());\n@@ -296,1 +295,1 @@\n-            assertDoesNotThrow(() -> subList.retainAll(Collections.<String>emptyList()));\n+            assertDoesNotThrow(() -> subList.retainAll(List.of()));\n@@ -306,1 +305,1 @@\n-            this.subList = Collections.emptyList();\n+            this.subList = List.of();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ModifiableObservableListBaseTest.java","additions":22,"deletions":23,"binary":false,"changes":45,"status":"modified"}]}