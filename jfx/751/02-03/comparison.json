{"files":[{"patch":"@@ -171,0 +171,1 @@\n+        \/\/ implicit check to ensure c != null\n@@ -194,0 +195,1 @@\n+        \/\/ implicit check to ensure c != null\n@@ -197,1 +199,3 @@\n-        } else if (backingList.isEmpty()) {\n+        }\n+\n+        if (backingList.isEmpty()) {\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableListWrapper.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -324,5 +324,2 @@\n-            if (backingMap.isEmpty()) {\n-                return false;\n-            }\n-\n-            if (c.isEmpty()) {\n+            \/\/ implicit check to ensure c != null\n+            if (c.isEmpty() && !backingMap.isEmpty()) {\n@@ -333,0 +330,4 @@\n+            if (backingMap.isEmpty()) {\n+                return false;\n+            }\n+\n@@ -353,1 +354,2 @@\n-            if (backingMap.isEmpty() || c.isEmpty()) {\n+            \/\/ implicit check to ensure c != null\n+            if (c.isEmpty() || backingMap.isEmpty()) {\n@@ -466,1 +468,2 @@\n-            if (backingMap.isEmpty() || c.isEmpty()) {\n+            \/\/ implicit check to ensure c != null\n+            if (c.isEmpty() || backingMap.isEmpty()) {\n@@ -490,5 +493,2 @@\n-            if (backingMap.isEmpty()) {\n-                return false;\n-            }\n-\n-            if (c.isEmpty()) {\n+            \/\/ implicit check to ensure c != null\n+            if (c.isEmpty() && !backingMap.isEmpty()) {\n@@ -499,0 +499,4 @@\n+            if (backingMap.isEmpty()) {\n+                return false;\n+            }\n+\n@@ -675,0 +679,1 @@\n+            \/\/ implicit check to ensure c != null\n@@ -678,1 +683,3 @@\n-            } else if (backingMap.isEmpty()) {\n+            }\n+\n+            if (backingMap.isEmpty()) {\n@@ -702,0 +709,1 @@\n+            \/\/ implicit check to ensure c != null\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableMapWrapper.java","additions":21,"deletions":13,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -178,4 +178,3 @@\n-        if (c.isEmpty()) {\n-            if (index < 0 || index > size()) {\n-                throw new IndexOutOfBoundsException(\"Index: \" + index);\n-            }\n+        if (index < 0 || index > size()) {\n+            throw new IndexOutOfBoundsException(\"Index: \" + index);\n+        }\n@@ -183,0 +182,2 @@\n+        \/\/ implicit check to ensure c != null\n+        if (c.isEmpty()) {\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableSequentialListWrapper.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -334,0 +334,1 @@\n+        \/\/ implicit check to ensure c != null\n@@ -337,1 +338,3 @@\n-        } else if (backingSet.isEmpty()) {\n+        }\n+\n+        if (backingSet.isEmpty()) {\n@@ -354,0 +357,1 @@\n+        \/\/ implicit check to ensure c != null\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableSetWrapper.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -91,1 +91,5 @@\n-        if (isEmpty() && col.isEmpty()) return false;\n+        \/\/ implicit check to ensure col != null\n+        if (col.isEmpty() && isEmpty()) {\n+            return false;\n+        }\n+\n@@ -104,0 +108,1 @@\n+        \/\/ implicit check to ensure c != null\n@@ -118,4 +123,3 @@\n-        if (c.isEmpty()) {\n-            if (index < 0 || index > size()) {\n-                throw new IndexOutOfBoundsException(\"Index: \" + index);\n-            }\n+        if (index < 0 || index > size()) {\n+            throw new IndexOutOfBoundsException(\"Index: \" + index);\n+        }\n@@ -123,0 +127,2 @@\n+        \/\/ implicit check to ensure c != null\n+        if (c.isEmpty()) {\n@@ -136,4 +142,3 @@\n-        if (fromIndex == toIndex) {\n-            if (fromIndex < 0 || fromIndex > size()) {\n-                throw new IndexOutOfBoundsException(\"Index: \" + fromIndex);\n-            }\n+        if (fromIndex < 0 || fromIndex > size()) {\n+            throw new IndexOutOfBoundsException(\"Index: \" + fromIndex);\n+        }\n@@ -141,0 +146,2 @@\n+        \/\/ return early if the range is empty\n+        if (fromIndex == toIndex) {\n@@ -154,0 +161,1 @@\n+        \/\/ implicit check to ensure c != null\n@@ -168,0 +176,1 @@\n+        \/\/ implicit check to ensure c != null\n@@ -171,1 +180,3 @@\n-        } else if (isEmpty()) {\n+        }\n+\n+        if (isEmpty()) {\n@@ -339,0 +350,1 @@\n+            \/\/ implicit check to ensure c != null\n@@ -353,4 +365,3 @@\n-            if (c.isEmpty()) {\n-                if (index < 0 || index > sublist.size()) {\n-                    throw new IndexOutOfBoundsException(\"Index: \" + index);\n-                }\n+            if (index < 0 || index > sublist.size()) {\n+                throw new IndexOutOfBoundsException(\"Index: \" + index);\n+            }\n@@ -358,0 +369,2 @@\n+            \/\/ implicit check to ensure c != null\n+            if (c.isEmpty()) {\n@@ -371,0 +384,1 @@\n+            \/\/ implicit check to ensure c != null\n@@ -385,0 +399,1 @@\n+            \/\/ implicit check to ensure c != null\n@@ -388,1 +403,3 @@\n-            } else if (sublist.isEmpty()) {\n+            }\n+\n+            if (sublist.isEmpty()) {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/ModifiableObservableListBase.java","additions":32,"deletions":15,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.junit.jupiter.api.Nested;\n@@ -39,8 +40,7 @@\n-    @Test\n-    public void testRemoveAllWithEmptyArgumentDoesNotEnumerateBackingList() {\n-        var list = new ObservableListWrapper<>(new ArrayList<>(List.of(\"a\", \"b\", \"c\")) {\n-            @Override\n-            public String get(int index) {\n-                throw new AssertionError(\"get() was not elided\");\n-            }\n-        });\n+    @Nested\n+    class RemoveAllTest {\n+        @Test\n+        public void testNullArgumentThrowsNPE() {\n+            var list = new ObservableListWrapper<>(List.of(\"a\", \"b\", \"c\"));\n+            assertThrows(NullPointerException.class, () -> list.removeAll((Collection<?>) null));\n+        }\n@@ -48,2 +48,8 @@\n-        list.removeAll(Collections.<String>emptyList());\n-    }\n+        @Test\n+        public void testEmptyCollectionArgumentDoesNotEnumerateBackingList() {\n+            var list = new ObservableListWrapper<>(new ArrayList<>(List.of(\"a\", \"b\", \"c\")) {\n+                @Override\n+                public String get(int index) {\n+                    throw new AssertionError(\"get() was not elided\");\n+                }\n+            });\n@@ -51,3 +57,2 @@\n-    @Test\n-    public void testRetainAllWithEmptyArgumentDoesNotCallContains() {\n-        var list = new ObservableListWrapper<>(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n+            list.removeAll(Collections.<String>emptyList());\n+        }\n@@ -55,6 +60,6 @@\n-        list.retainAll(new ArrayList<String>() {\n-            @Override\n-            public boolean contains(Object o) {\n-                throw new AssertionError(\"contains() was not elided\");\n-            }\n-        });\n+        @Test\n+        public void testEmptyCollectionArgumentWorksCorrectly() {\n+            var list = new ObservableListWrapper<>(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n+            assertFalse(list.removeAll(List.of()));\n+            assertEquals(List.of(\"a\", \"b\", \"c\"), list);\n+        }\n@@ -63,5 +68,7 @@\n-    @Test\n-    public void testRemoveAllWithNullArgumentThrowsNPE() {\n-        var list = new ObservableListWrapper<>(List.of(\"a\", \"b\", \"c\"));\n-        assertThrows(NullPointerException.class, () -> list.removeAll((Collection<?>) null));\n-    }\n+    @Nested\n+    class RetainAllTest {\n+        @Test\n+        public void testNullArgumentThrowsNPE() {\n+            var list = new ObservableListWrapper<>(List.of(\"a\", \"b\", \"c\"));\n+            assertThrows(NullPointerException.class, () -> list.retainAll((Collection<?>) null));\n+        }\n@@ -69,12 +76,10 @@\n-    @Test\n-    public void testRemoveAllWithEmptyListArgumentWorksCorrectly() {\n-        var list = new ObservableListWrapper<>(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n-        assertFalse(list.removeAll(List.of()));\n-        assertEquals(List.of(\"a\", \"b\", \"c\"), list);\n-    }\n-\n-    @Test\n-    public void testRetainAllWithNullArgumentThrowsNPE() {\n-        var list = new ObservableListWrapper<>(List.of(\"a\", \"b\", \"c\"));\n-        assertThrows(NullPointerException.class, () -> list.retainAll((Collection<?>) null));\n-    }\n+        @Test\n+        public void testEmptyCollectionArgumentDoesNotCallContains() {\n+            var list = new ObservableListWrapper<>(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n+            list.retainAll(new ArrayList<String>() {\n+                @Override\n+                public boolean contains(Object o) {\n+                    throw new AssertionError(\"contains() was not elided\");\n+                }\n+            });\n+        }\n@@ -82,5 +87,6 @@\n-    @Test\n-    public void testRetainAllWithEmptyListArgumentWorksCorrectly() {\n-        var list = new ObservableListWrapper<>(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n-        assertTrue(list.retainAll(List.of()));\n-        assertTrue(list.isEmpty());\n+        @Test\n+        public void testEmptyCollectionArgumentWorksCorrectly() {\n+            var list = new ObservableListWrapper<>(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n+            assertTrue(list.retainAll(List.of()));\n+            assertTrue(list.isEmpty());\n+        }\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ObservableListWrapperTest.java","additions":47,"deletions":41,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.junit.jupiter.api.Nested;\n@@ -43,4 +44,54 @@\n-    @Test\n-    public void testRemoveAllKeysWithEmptyArgumentDoesNotEnumerateBackingMap() {\n-        ObservableMapWrapper<String, String> map = newNonIterableObservableMapWrapper();\n-        map.keySet().removeAll(Collections.<String>emptySet());\n+    @Nested\n+    class RemoveAllTest {\n+        @Test\n+        public void testEntrySetNullArgumentThrowsNPE() {\n+            var map1 = new ObservableMapWrapper<>(new HashMap<>());\n+            assertThrows(NullPointerException.class, () -> map1.entrySet().removeAll((Collection<?>) null));\n+\n+            var map2 = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n+            assertThrows(NullPointerException.class, () -> map2.entrySet().removeAll((Collection<?>) null));\n+        }\n+\n+        @Test\n+        public void testKeySetNullArgumentThrowsNPE() {\n+            var map1 = new ObservableMapWrapper<>(new HashMap<>());\n+            assertThrows(NullPointerException.class, () -> map1.keySet().removeAll((Collection<?>) null));\n+\n+            var map2 = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n+            assertThrows(NullPointerException.class, () -> map2.keySet().removeAll((Collection<?>) null));\n+        }\n+\n+        @Test\n+        public void testValueSetNullArgumentThrowsNPE() {\n+            var map1 = new ObservableMapWrapper<>(new HashMap<>());\n+            assertThrows(NullPointerException.class, () -> map1.values().removeAll((Collection<?>) null));\n+\n+            var map2 = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n+            assertThrows(NullPointerException.class, () -> map2.values().removeAll((Collection<?>) null));\n+        }\n+\n+        @Test\n+        public void testRemoveAllKeysWithEmptyCollectionArgumentDoesNotEnumerateBackingMap() {\n+            ObservableMapWrapper<String, String> map = newNonIterableObservableMapWrapper();\n+            map.keySet().removeAll(Collections.<String>emptySet());\n+        }\n+\n+        @Test\n+        public void testRemoveAllValuesWithEmptyCollectionArgumentDoesNotEnumerateBackingMap() {\n+            ObservableMapWrapper<String, String> map = newNonIterableObservableMapWrapper();\n+            map.values().removeAll(Collections.<String>emptySet());\n+        }\n+\n+        @Test\n+        public void testRemoveAllEntriesWithEmptyCollectionArgumentDoesNotEnumerateBackingMap() {\n+            ObservableMapWrapper<String, String> map = newNonIterableObservableMapWrapper();\n+            map.entrySet().removeAll(Collections.<Map.Entry<String, String>>emptySet());\n+        }\n+\n+        @Test\n+        public void testRemoveAllEntriesWithEmptyCollectionArgumentWorksCorrectly() {\n+            var content = Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\");\n+            var map = new ObservableMapWrapper<>(new HashMap<>(content));\n+            assertFalse(map.entrySet().removeAll(Set.of()));\n+            assertEquals(content, map);\n+        }\n@@ -49,57 +100,54 @@\n-    @Test\n-    public void testRemoveAllValuesWithEmptyArgumentDoesNotEnumerateBackingMap() {\n-        ObservableMapWrapper<String, String> map = newNonIterableObservableMapWrapper();\n-        map.values().removeAll(Collections.<String>emptySet());\n-    }\n-\n-    @Test\n-    public void testRemoveAllEntriesWithEmptyArgumentDoesNotEnumerateBackingMap() {\n-        ObservableMapWrapper<String, String> map = newNonIterableObservableMapWrapper();\n-        map.entrySet().removeAll(Collections.<Map.Entry<String, String>>emptySet());\n-    }\n-\n-    @Test\n-    public void testRetainAllKeysWithEmptyArgumentDoesNotCallContains() {\n-        var map = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n-        map.keySet().retainAll(newNoContainsHashSet());\n-    }\n-\n-    @Test\n-    public void testRetainAllValuesWithEmptyArgumentDoesNotCallContains() {\n-        var map = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n-        map.values().retainAll(newNoContainsHashSet());\n-    }\n-\n-    @Test\n-    public void testRetainAllEntriesWithEmptyArgumentDoesNotCallContains() {\n-        var map = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n-        map.entrySet().retainAll(newNoContainsHashSet());\n-    }\n-\n-    @Test\n-    public void testRemoveAllWithNullArgumentThrowsNPE() {\n-        var map = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n-        assertThrows(NullPointerException.class, () -> map.entrySet().removeAll((Collection<?>) null));\n-    }\n-\n-    @Test\n-    public void testRemoveAllWithEmptyListArgumentWorksCorrectly() {\n-        var content = Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\");\n-        var map = new ObservableMapWrapper<>(new HashMap<>(content));\n-        assertFalse(map.entrySet().removeAll(Set.of()));\n-        assertEquals(content, map);\n-    }\n-\n-    @Test\n-    public void testRetainAllWithNullArgumentThrowsNPE() {\n-        var content = Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\");\n-        var map = new ObservableMapWrapper<>(new HashMap<>(content));\n-        assertThrows(NullPointerException.class, () -> map.entrySet().retainAll((Collection<?>) null));\n-    }\n-\n-    @Test\n-    public void testRetainAllWithEmptyListArgumentWorksCorrectly() {\n-        var content = Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\");\n-        var map = new ObservableMapWrapper<>(new HashMap<>(content));\n-        assertTrue(map.entrySet().retainAll(Set.of()));\n-        assertTrue(map.isEmpty());\n+    @Nested\n+    class RetainAllTest {\n+        @Test\n+        public void testEntrySetNullArgumentThrowsNPE() {\n+            var map1 = new ObservableMapWrapper<>(new HashMap<>());\n+            assertThrows(NullPointerException.class, () -> map1.entrySet().retainAll((Collection<?>) null));\n+\n+            var map2 = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n+            assertThrows(NullPointerException.class, () -> map2.entrySet().retainAll((Collection<?>) null));\n+        }\n+\n+        @Test\n+        public void testKeySetNullArgumentThrowsNPE() {\n+            var map1 = new ObservableMapWrapper<>(new HashMap<>());\n+            assertThrows(NullPointerException.class, () -> map1.keySet().retainAll((Collection<?>) null));\n+\n+            var map2 = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n+            assertThrows(NullPointerException.class, () -> map2.keySet().retainAll((Collection<?>) null));\n+        }\n+\n+        @Test\n+        public void testValueSetNullArgumentThrowsNPE() {\n+            var map1 = new ObservableMapWrapper<>(new HashMap<>());\n+            assertThrows(NullPointerException.class, () -> map1.values().retainAll((Collection<?>) null));\n+\n+            var map2 = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n+            assertThrows(NullPointerException.class, () -> map2.values().retainAll((Collection<?>) null));\n+        }\n+\n+        @Test\n+        public void testRetainAllKeysWithEmptyCollectionArgumentDoesNotCallContains() {\n+            var map = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n+            map.keySet().retainAll(newNoContainsHashSet());\n+        }\n+\n+        @Test\n+        public void testRetainAllValuesWithEmptyCollectionArgumentDoesNotCallContains() {\n+            var map = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n+            map.values().retainAll(newNoContainsHashSet());\n+        }\n+\n+        @Test\n+        public void testRetainAllEntriesWithEmptyCollectionArgumentDoesNotCallContains() {\n+            var map = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n+            map.entrySet().retainAll(newNoContainsHashSet());\n+        }\n+\n+        @Test\n+        public void testRetainAllWithEmptyCollectionArgumentWorksCorrectly() {\n+            var content = Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\");\n+            var map = new ObservableMapWrapper<>(new HashMap<>(content));\n+            assertTrue(map.entrySet().retainAll(Set.of()));\n+            assertTrue(map.isEmpty());\n+        }\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ObservableMapWrapperTest.java","additions":109,"deletions":61,"binary":false,"changes":170,"status":"modified"},{"patch":"@@ -60,5 +60,10 @@\n-    public void testAddAllWithEmptyCollectionArgumentAndInvalidIndexThrowsIOOBE() {\n-        var list = new ObservableSequentialListWrapper<>(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n-        assertThrows(IndexOutOfBoundsException.class, () -> list.addAll(-1, Collections.emptyList()));\n-        assertThrows(IndexOutOfBoundsException.class, () -> list.addAll(4, Collections.emptyList()));\n-        assertDoesNotThrow(() -> list.addAll(3, List.of(\"d\", \"e\")));\n+    public void testAddAllWithInvalidIndexThrowsIOOBE() {\n+        var nonEmptyList = new ObservableSequentialListWrapper<>(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n+        assertThrows(IndexOutOfBoundsException.class, () -> nonEmptyList.addAll(-1, Collections.emptyList()));\n+        assertThrows(IndexOutOfBoundsException.class, () -> nonEmptyList.addAll(4, Collections.emptyList()));\n+        assertDoesNotThrow(() -> nonEmptyList.addAll(3, List.of(\"d\", \"e\")));\n+\n+        var emptyList = new ObservableSequentialListWrapper<>(new ArrayList<>());\n+        assertThrows(IndexOutOfBoundsException.class, () -> emptyList.addAll(-1, Collections.emptyList()));\n+        assertThrows(IndexOutOfBoundsException.class, () -> emptyList.addAll(1, Collections.emptyList()));\n+        assertDoesNotThrow(() -> emptyList.addAll(0, List.of(\"d\", \"e\")));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ObservableSequentialListWrapperTest.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.junit.jupiter.api.Nested;\n@@ -40,8 +41,7 @@\n-    @Test\n-    public void testRemoveAllWithEmptyArgumentDoesNotEnumerateBackingSet() {\n-        ObservableSetWrapper<String> set = new ObservableSetWrapper<>(new HashSet<>(Set.of(\"a\", \"b\", \"c\")) {\n-            @Override\n-            public Iterator<String> iterator() {\n-                throw new AssertionError(\"iterator() was not elided\");\n-            }\n-        });\n+    @Nested\n+    class RemoveAllTest {\n+        @Test\n+        public void testNullArgumentThrowsNPE() {\n+            var set = new ObservableSetWrapper<>(Set.of(\"a\", \"b\", \"c\"));\n+            assertThrows(NullPointerException.class, () -> set.removeAll((Collection<?>) null));\n+        }\n@@ -49,2 +49,8 @@\n-        set.removeAll(Collections.<String>emptySet());\n-    }\n+        @Test\n+        public void testEmptyCollectionArgumentDoesNotEnumerateBackingSet() {\n+            ObservableSetWrapper<String> set = new ObservableSetWrapper<>(new HashSet<>(Set.of(\"a\", \"b\", \"c\")) {\n+                @Override\n+                public Iterator<String> iterator() {\n+                    throw new AssertionError(\"iterator() was not elided\");\n+                }\n+            });\n@@ -52,3 +58,2 @@\n-    @Test\n-    public void testRetainAllWithEmptyArgumentDoesNotCallContains() {\n-        ObservableSetWrapper<String> set = new ObservableSetWrapper<>(new HashSet<>(Set.of(\"a\", \"b\", \"c\")));\n+            set.removeAll(Collections.<String>emptySet());\n+        }\n@@ -56,6 +61,6 @@\n-        set.removeAll(new HashSet<String>() {\n-            @Override\n-            public boolean contains(Object o) {\n-                throw new AssertionError(\"contains() was not elided\");\n-            }\n-        });\n+        @Test\n+        public void testEmptyCollectionArgumentWorksCorrectly() {\n+            var set = new ObservableSetWrapper<>(new HashSet<>(Set.of(\"a\", \"b\", \"c\")));\n+            assertFalse(set.removeAll(Set.of()));\n+            assertEquals(Set.of(\"a\", \"b\", \"c\"), set);\n+        }\n@@ -64,5 +69,7 @@\n-    @Test\n-    public void testRemoveAllWithNullArgumentThrowsNPE() {\n-        var set = new ObservableSetWrapper<>(Set.of(\"a\", \"b\", \"c\"));\n-        assertThrows(NullPointerException.class, () -> set.removeAll((Collection<?>) null));\n-    }\n+    @Nested\n+    class RetainAllTest {\n+        @Test\n+        public void testNullArgumentThrowsNPE() {\n+            var set = new ObservableSetWrapper<>(Set.of(\"a\", \"b\", \"c\"));\n+            assertThrows(NullPointerException.class, () -> set.retainAll((Collection<?>) null));\n+        }\n@@ -70,12 +77,10 @@\n-    @Test\n-    public void testRemoveAllWithEmptyListArgumentWorksCorrectly() {\n-        var set = new ObservableSetWrapper<>(new HashSet<>(Set.of(\"a\", \"b\", \"c\")));\n-        assertFalse(set.removeAll(Set.of()));\n-        assertEquals(Set.of(\"a\", \"b\", \"c\"), set);\n-    }\n-\n-    @Test\n-    public void testRetainAllWithNullArgumentThrowsNPE() {\n-        var set = new ObservableSetWrapper<>(Set.of(\"a\", \"b\", \"c\"));\n-        assertThrows(NullPointerException.class, () -> set.retainAll((Collection<?>) null));\n-    }\n+        @Test\n+        public void testEmptyCollectionArgumentDoesNotCallContains() {\n+            ObservableSetWrapper<String> set = new ObservableSetWrapper<>(new HashSet<>(Set.of(\"a\", \"b\", \"c\")));\n+            set.removeAll(new HashSet<String>() {\n+                @Override\n+                public boolean contains(Object o) {\n+                    throw new AssertionError(\"contains() was not elided\");\n+                }\n+            });\n+        }\n@@ -83,5 +88,6 @@\n-    @Test\n-    public void testRetainAllWithEmptyListArgumentWorksCorrectly() {\n-        var set = new ObservableSetWrapper<>(new HashSet<>(Set.of(\"a\", \"b\", \"c\")));\n-        assertTrue(set.retainAll(Set.of()));\n-        assertTrue(set.isEmpty());\n+        @Test\n+        public void testEmptyCollectionArgumentWorksCorrectly() {\n+            var set = new ObservableSetWrapper<>(new HashSet<>(Set.of(\"a\", \"b\", \"c\")));\n+            assertTrue(set.retainAll(Set.of()));\n+            assertTrue(set.isEmpty());\n+        }\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ObservableSetWrapperTest.java","additions":47,"deletions":41,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -43,2 +43,2 @@\n-    public void testAddAllWithEmptyCollectionArgumentDoesNotEnumerateCollection() {\n-        var list = new MockModifiableObservableList(Collections.emptyList()) {\n+    public void testRemoveEmptyRangeDoesNotEnumerateList() {\n+        var list = new MockModifiableObservableList(List.of(\"a\", \"b\", \"c\")) {\n@@ -56,2 +56,1 @@\n-        assertDoesNotThrow(() -> list.addAll(Collections.emptyList()));\n-        assertDoesNotThrow(() -> list.addAll(0, Collections.emptyList()));\n+        assertDoesNotThrow(() -> list.removeRange(0, 0));\n@@ -60,6 +59,7 @@\n-    @Test\n-    public void testAddAllWithEmptyCollectionArgumentAndInvalidIndexThrowsIOOBE() {\n-        var list = new MockModifiableObservableList(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n-        assertThrows(IndexOutOfBoundsException.class, () -> list.addAll(-1, Collections.emptyList()));\n-        assertThrows(IndexOutOfBoundsException.class, () -> list.addAll(4, Collections.emptyList()));\n-        assertDoesNotThrow(() -> list.addAll(3, List.of(\"d\", \"e\")));\n+    @Nested\n+    class SetAllTest {\n+        @Test\n+        public void testNullArgumentThrowsNPE() {\n+            var list = new MockModifiableObservableList(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n+            assertThrows(NullPointerException.class, () -> list.setAll((Collection<? extends String>) null));\n+        }\n@@ -68,8 +68,7 @@\n-    @Test\n-    public void testRemoveAllWithEmptyCollectionArgumentDoesNotEnumerateBackingList() {\n-        var list = new MockModifiableObservableList(List.of(\"a\", \"b\", \"c\")) {\n-            @Override\n-            public String get(int index) {\n-                throw new AssertionError(\"get() was not elided\");\n-            }\n-        };\n+    @Nested\n+    class AddAllTest {\n+        @Test\n+        public void testNullArgumentThrowsNPE() {\n+            var list = new MockModifiableObservableList(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n+            assertThrows(NullPointerException.class, () -> list.addAll((Collection<? extends String>) null));\n+        }\n@@ -77,2 +76,7 @@\n-        assertDoesNotThrow(() -> list.removeAll(Collections.<String>emptyList()));\n-    }\n+        @Test\n+        public void testEmptyCollectionArgumentDoesNotEnumerateCollection() {\n+            var list = new MockModifiableObservableList(Collections.emptyList()) {\n+                @Override\n+                public Iterator<String> iterator() {\n+                    throw new AssertionError(\"iterator() was not elided\");\n+                }\n@@ -80,3 +84,5 @@\n-    @Test\n-    public void testRetainAllWithEmptyCollectionArgumentDoesNotCallContains() {\n-        var list = new MockModifiableObservableList(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n+                @Override\n+                public ListIterator<String> listIterator() {\n+                    throw new AssertionError(\"listIterator() was not elided\");\n+                }\n+            };\n@@ -84,7 +90,3 @@\n-        assertDoesNotThrow(() -> list.retainAll(new ArrayList<String>() {\n-            @Override\n-            public boolean contains(Object o) {\n-                throw new AssertionError(\"contains() was not elided\");\n-            }\n-        }));\n-    }\n+            assertDoesNotThrow(() -> list.addAll(Collections.emptyList()));\n+            assertDoesNotThrow(() -> list.addAll(0, Collections.emptyList()));\n+        }\n@@ -92,10 +94,6 @@\n-    @Test\n-    public void testRetainAllWithEmptyCollectionArgumentCallsClear() {\n-        boolean[] flag = new boolean[1];\n-        new MockModifiableObservableList(new ArrayList<>(List.of(\"a\", \"b\", \"c\"))) {\n-            @Override\n-            public void clear() {\n-                flag[0] = true;\n-                super.clear();\n-            }\n-        }.retainAll(Collections.<String>emptyList());\n+        @Test\n+        public void testInvalidIndexThrowsIOOBE() {\n+            var nonEmptyList = new MockModifiableObservableList(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n+            assertThrows(IndexOutOfBoundsException.class, () -> nonEmptyList.addAll(-1, Collections.emptyList()));\n+            assertThrows(IndexOutOfBoundsException.class, () -> nonEmptyList.addAll(4, Collections.emptyList()));\n+            assertDoesNotThrow(() -> nonEmptyList.addAll(3, List.of(\"d\", \"e\")));\n@@ -103,1 +101,5 @@\n-        assertTrue(flag[0], \"clear() was not called\");\n+            var emptyList = new MockModifiableObservableList(new ArrayList<>());\n+            assertThrows(IndexOutOfBoundsException.class, () -> emptyList.addAll(-1, Collections.emptyList()));\n+            assertThrows(IndexOutOfBoundsException.class, () -> emptyList.addAll(1, Collections.emptyList()));\n+            assertDoesNotThrow(() -> emptyList.addAll(0, List.of(\"d\", \"e\")));\n+        }\n@@ -106,8 +108,7 @@\n-    @Test\n-    public void testRetainAllOnEmptyListDoesNotCallClear() {\n-        var list = new MockModifiableObservableList(new ArrayList<>()) {\n-            @Override\n-            public void clear() {\n-                throw new AssertionError(\"clear() was not elided\");\n-            }\n-        };\n+    @Nested\n+    class RemoveAllTest {\n+        @Test\n+        public void testNullArgumentThrowsNPE() {\n+            var list = new MockModifiableObservableList(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n+            assertThrows(NullPointerException.class, () -> list.removeAll((Collection<? extends String>) null));\n+        }\n@@ -115,1 +116,11 @@\n-        assertDoesNotThrow(() -> list.retainAll(Collections.<String>emptyList()));\n+        @Test\n+        public void testEmptyCollectionArgumentDoesNotEnumerateBackingList() {\n+            var list = new MockModifiableObservableList(List.of(\"a\", \"b\", \"c\")) {\n+                @Override\n+                public String get(int index) {\n+                    throw new AssertionError(\"get() was not elided\");\n+                }\n+            };\n+\n+            assertDoesNotThrow(() -> list.removeAll(Collections.<String>emptyList()));\n+        }\n@@ -118,7 +129,7 @@\n-    @Test\n-    public void testRemoveEmptyRangeDoesNotEnumerateList() {\n-        var list = new MockModifiableObservableList(List.of(\"a\", \"b\", \"c\")) {\n-            @Override\n-            public Iterator<String> iterator() {\n-                throw new AssertionError(\"iterator() was not elided\");\n-            }\n+    @Nested\n+    class RetainAllTest {\n+        @Test\n+        public void testNullArgumentThrowsNPE() {\n+            var list = new MockModifiableObservableList(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n+            assertThrows(NullPointerException.class, () -> list.retainAll((Collection<? extends String>) null));\n+        }\n@@ -126,5 +137,3 @@\n-            @Override\n-            public ListIterator<String> listIterator() {\n-                throw new AssertionError(\"listIterator() was not elided\");\n-            }\n-        };\n+        @Test\n+        public void testEmptyCollectionArgumentDoesNotCallContains() {\n+            var list = new MockModifiableObservableList(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n@@ -132,1 +141,33 @@\n-        assertDoesNotThrow(() -> list.removeRange(0, 0));\n+            assertDoesNotThrow(() -> list.retainAll(new ArrayList<String>() {\n+                @Override\n+                public boolean contains(Object o) {\n+                    throw new AssertionError(\"contains() was not elided\");\n+                }\n+            }));\n+        }\n+\n+        @Test\n+        public void testEmptyCollectionArgumentCallsClear() {\n+            boolean[] flag = new boolean[1];\n+            new MockModifiableObservableList(new ArrayList<>(List.of(\"a\", \"b\", \"c\"))) {\n+                @Override\n+                public void clear() {\n+                    flag[0] = true;\n+                    super.clear();\n+                }\n+            }.retainAll(Collections.<String>emptyList());\n+\n+            assertTrue(flag[0], \"clear() was not called\");\n+        }\n+\n+        @Test\n+        public void testRetainAllOnEmptyListDoesNotCallClear() {\n+            var list = new MockModifiableObservableList(new ArrayList<>()) {\n+                @Override\n+                public void clear() {\n+                    throw new AssertionError(\"clear() was not elided\");\n+                }\n+            };\n+\n+            assertDoesNotThrow(() -> list.retainAll(Collections.<String>emptyList()));\n+        }\n@@ -136,1 +177,7 @@\n-    class SubListTest {\n+    class SubList_AddAllTest {\n+        @Test\n+        public void testNullArgumentThrowsNPE() {\n+            var subList = new MockModifiableObservableList(List.of(\"a\", \"b\", \"c\"), List.of(\"a\", \"b\")).subList(0, 2);\n+            assertThrows(NullPointerException.class, () -> subList.addAll((Collection<? extends String>) null));\n+        }\n+\n@@ -138,1 +185,1 @@\n-        public void testAddAllWithEmptyCollectionArgumentDoesNotEnumerateCollection() {\n+        public void testEmptyCollectionArgumentDoesNotEnumerateCollection() {\n@@ -157,7 +204,16 @@\n-        public void testAddAllWithEmptyCollectionArgumentAndInvalidIndexThrowsIOOBE() {\n-            var backingList = new MockModifiableObservableList(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n-            var backingSubList = new ArrayList<>(new ArrayList<>(List.of(\"a\", \"b\")));\n-            var subList = new MockModifiableObservableList(backingList, backingSubList).subList(0, 2);\n-            assertThrows(IndexOutOfBoundsException.class, () -> subList.addAll(-1, Collections.emptyList()));\n-            assertThrows(IndexOutOfBoundsException.class, () -> subList.addAll(3, Collections.emptyList()));\n-            assertDoesNotThrow(() -> subList.addAll(2, List.of(\"d\", \"e\")));\n+        public void testInvalidIndexThrowsIOOBE() {\n+            var nonEmptySubList = new MockModifiableObservableList(\n+                    new ArrayList<>(List.of(\"a\", \"b\", \"c\")),\n+                    new ArrayList<>(List.of(\"a\", \"b\")))\n+                .subList(0, 2);\n+            assertThrows(IndexOutOfBoundsException.class, () -> nonEmptySubList.addAll(-1, Collections.emptyList()));\n+            assertThrows(IndexOutOfBoundsException.class, () -> nonEmptySubList.addAll(3, Collections.emptyList()));\n+            assertDoesNotThrow(() -> nonEmptySubList.addAll(2, List.of(\"d\", \"e\")));\n+\n+            var emptySubList = new MockModifiableObservableList(\n+                    new ArrayList<>(List.of(\"a\", \"b\", \"c\")),\n+                    new ArrayList<>())\n+                .subList(0, 0);\n+            assertThrows(IndexOutOfBoundsException.class, () -> emptySubList.addAll(-1, Collections.emptyList()));\n+            assertThrows(IndexOutOfBoundsException.class, () -> emptySubList.addAll(1, Collections.emptyList()));\n+            assertDoesNotThrow(() -> emptySubList.addAll(0, List.of(\"d\", \"e\")));\n@@ -165,0 +221,1 @@\n+    }\n@@ -166,0 +223,2 @@\n+    @Nested\n+    class SubList_RemoveAllTest {\n@@ -167,1 +226,7 @@\n-        public void testRemoveAllWithEmptyCollectionArgumentDoesNotCallRemoveAll() {\n+        public void testNullArgumentThrowsNPE() {\n+            var subList = new MockModifiableObservableList(List.of(\"a\", \"b\", \"c\"), List.of(\"a\", \"b\")).subList(0, 2);\n+            assertThrows(NullPointerException.class, () -> subList.removeAll((Collection<? extends String>) null));\n+        }\n+\n+        @Test\n+        public void testEmptyCollectionArgumentDoesNotCallRemoveAll() {\n@@ -179,0 +244,9 @@\n+    }\n+\n+    @Nested\n+    class SubList_RetainAllTest {\n+        @Test\n+        public void testNullArgumentThrowsNPE() {\n+            var subList = new MockModifiableObservableList(List.of(\"a\", \"b\", \"c\"), List.of(\"a\", \"b\")).subList(0, 2);\n+            assertThrows(NullPointerException.class, () -> subList.retainAll((Collection<? extends String>) null));\n+        }\n@@ -181,1 +255,1 @@\n-        public void testRetainAllWithEmptyCollectionArgumentDoesNotCallContains() {\n+        public void testEmptyCollectionArgumentDoesNotCallContains() {\n@@ -195,1 +269,1 @@\n-        public void testRetainAllWithEmptyCollectionArgumentCallsClear() {\n+        public void testEmptyCollectionArgumentCallsClear() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ModifiableObservableListBaseTest.java","additions":149,"deletions":75,"binary":false,"changes":224,"status":"modified"}]}