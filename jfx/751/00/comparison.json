{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -172,0 +172,4 @@\n+        if (backingList.isEmpty() || c.isEmpty()) {\n+            return false;\n+        }\n+\n@@ -191,0 +195,9 @@\n+        if (backingList.isEmpty()) {\n+            return false;\n+        }\n+\n+        if (c.isEmpty()) {\n+            clear();\n+            return true;\n+        }\n+\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableListWrapper.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -328,0 +328,10 @@\n+            if (c.isEmpty()) {\n+                \/\/ Retaining an empty key set is equivalent to clearing the map.\n+                if (!remove && !backingMap.isEmpty()) {\n+                    clear();\n+                    return true;\n+                }\n+\n+                return false;\n+            }\n+\n@@ -457,0 +467,10 @@\n+            if (c.isEmpty()) {\n+                \/\/ Retaining an empty value set is equivalent to clearing the map.\n+                if (!remove && !backingMap.isEmpty()) {\n+                    clear();\n+                    return true;\n+                }\n+\n+                return false;\n+            }\n+\n@@ -654,0 +674,10 @@\n+            if (c.isEmpty()) {\n+                \/\/ Retaining an empty entry set is equivalent to clearing the map.\n+                if (!remove && !backingMap.isEmpty()) {\n+                    clear();\n+                    return true;\n+                }\n+\n+                return false;\n+            }\n+\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableMapWrapper.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -351,0 +351,10 @@\n+        if (c.isEmpty()) {\n+            \/\/ Retaining an empty set is equivalent to clearing the set.\n+            if (!remove && !backingSet.isEmpty()) {\n+                clear();\n+                return true;\n+            }\n+\n+            return false;\n+        }\n+\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableSetWrapper.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.collections;\n+\n+import com.sun.javafx.collections.ObservableListWrapper;\n+import org.junit.jupiter.api.Test;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class ObservableListWrapperTest {\n+\n+    @Test\n+    public void testRemoveAllWithEmptyArgumentDoesNotEnumerateBackingList() {\n+        ObservableListWrapper<String> list = new ObservableListWrapper<>(new ArrayList<>(List.of(\"a\", \"b\", \"c\")) {\n+            @Override\n+            public String get(int index) {\n+                throw new AssertionError(\"get() was not elided\");\n+            }\n+        });\n+\n+        list.removeAll(Collections.<String>emptyList());\n+    }\n+\n+    @Test\n+    public void testRetainAllWithEmptyArgumentDoesNotCallContains() {\n+        ObservableListWrapper<String> list = new ObservableListWrapper<>(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n+\n+        list.retainAll(new ArrayList<String>() {\n+            @Override\n+            public boolean contains(Object o) {\n+                throw new AssertionError(\"contains() was not elided\");\n+            }\n+        });\n+    }\n+\n+}\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ObservableListWrapperTest.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.collections;\n+\n+import com.sun.javafx.collections.ObservableMapWrapper;\n+import org.junit.jupiter.api.Test;\n+import java.util.AbstractSet;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class ObservableMapWrapperTest {\n+\n+    @Test\n+    public void testRemoveAllKeysWithEmptyArgumentDoesNotEnumerateBackingMap() {\n+        ObservableMapWrapper<String, String> set = newNonIterableObservableMapWrapper();\n+        set.keySet().removeAll(Collections.<String>emptySet());\n+    }\n+\n+    @Test\n+    public void testRemoveAllValuesWithEmptyArgumentDoesNotEnumerateBackingMap() {\n+        ObservableMapWrapper<String, String> set = newNonIterableObservableMapWrapper();\n+        set.values().removeAll(Collections.<String>emptySet());\n+    }\n+\n+    @Test\n+    public void testRemoveAllEntriesWithEmptyArgumentDoesNotEnumerateBackingMap() {\n+        ObservableMapWrapper<String, String> set = newNonIterableObservableMapWrapper();\n+        set.entrySet().removeAll(Collections.<Map.Entry<String, String>>emptySet());\n+    }\n+\n+    private ObservableMapWrapper<String, String> newNonIterableObservableMapWrapper() {\n+        return new ObservableMapWrapper<>(\n+            new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")) {\n+                Set<Entry<String, String>> entrySet;\n+\n+                @Override\n+                public Set<Entry<String, String>> entrySet() {\n+                    if (entrySet == null) {\n+                        entrySet = new AbstractSet<Entry<String, String>>() {\n+                            @Override public Iterator<Entry<String, String>> iterator() {\n+                                throw new AssertionError(\"iterator() was not elided\");\n+                            }\n+\n+                            @Override\n+                            public int size() {\n+                                throw new UnsupportedOperationException();\n+                            }\n+                        };\n+                    }\n+                    return entrySet;\n+                }\n+            });\n+    }\n+\n+    @Test\n+    public void testRetainAllKeysWithEmptyArgumentDoesNotCallContains() {\n+        ObservableMapWrapper<String, String> set = new ObservableMapWrapper<>(\n+            new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n+\n+        set.keySet().retainAll(newNoContainsHashSet());\n+    }\n+\n+    @Test\n+    public void testRetainAllValuesWithEmptyArgumentDoesNotCallContains() {\n+        ObservableMapWrapper<String, String> set = new ObservableMapWrapper<>(\n+                new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n+\n+        set.values().retainAll(newNoContainsHashSet());\n+    }\n+\n+    @Test\n+    public void testRetainAllEntriesWithEmptyArgumentDoesNotCallContains() {\n+        ObservableMapWrapper<String, String> set = new ObservableMapWrapper<>(\n+                new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n+\n+        set.entrySet().retainAll(newNoContainsHashSet());\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private HashSet newNoContainsHashSet() {\n+        return new HashSet() {\n+            @Override\n+            public boolean contains(Object o) {\n+                throw new AssertionError(\"contains() was not elided\");\n+            }\n+        };\n+    }\n+\n+}\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ObservableMapWrapperTest.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.collections;\n+\n+import com.sun.javafx.collections.ObservableSetWrapper;\n+import org.junit.jupiter.api.Test;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+public class ObservableSetWrapperTest {\n+\n+    @Test\n+    public void testRemoveAllWithEmptyArgumentDoesNotEnumerateBackingSet() {\n+        ObservableSetWrapper<String> set = new ObservableSetWrapper<>(new HashSet<>(Set.of(\"a\", \"b\", \"c\")) {\n+            @Override\n+            public Iterator<String> iterator() {\n+                throw new AssertionError(\"iterator() was not elided\");\n+            }\n+        });\n+\n+        set.removeAll(Collections.<String>emptySet());\n+    }\n+\n+    @Test\n+    public void testRetainAllWithEmptyArgumentDoesNotCallContains() {\n+        ObservableSetWrapper<String> set = new ObservableSetWrapper<>(new HashSet<>(Set.of(\"a\", \"b\", \"c\")));\n+\n+        set.removeAll(new HashSet<String>() {\n+            @Override\n+            public boolean contains(Object o) {\n+                throw new AssertionError(\"contains() was not elided\");\n+            }\n+        });\n+    }\n+\n+}\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ObservableSetWrapperTest.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}