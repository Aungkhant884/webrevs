{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -172,1 +172,1 @@\n-        if (backingList.isEmpty() || c.isEmpty()) {\n+        if (c.isEmpty() || backingList.isEmpty()) {\n@@ -195,5 +195,1 @@\n-        if (backingList.isEmpty()) {\n-            return false;\n-        }\n-\n-        if (c.isEmpty()) {\n+        if (c.isEmpty() && !backingList.isEmpty()) {\n@@ -202,0 +198,2 @@\n+        } else if (backingList.isEmpty()) {\n+            return false;\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableListWrapper.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -324,2 +324,3 @@\n-            return removeRetain(c, false);\n-        }\n+            if (backingMap.isEmpty()) {\n+                return false;\n+            }\n@@ -327,1 +328,0 @@\n-        private boolean removeRetain(Collection<?> c, boolean remove) {\n@@ -329,7 +329,2 @@\n-                \/\/ Retaining an empty key set is equivalent to clearing the map.\n-                if (!remove && !backingMap.isEmpty()) {\n-                    clear();\n-                    return true;\n-                }\n-\n-                return false;\n+                clear();\n+                return true;\n@@ -338,0 +333,4 @@\n+            return removeRetain(c, false);\n+        }\n+\n+        private boolean removeRetain(Collection<?> c, boolean remove) {\n@@ -354,0 +353,4 @@\n+            if (backingMap.isEmpty() || c.isEmpty()) {\n+                return false;\n+            }\n+\n@@ -463,0 +466,4 @@\n+            if (backingMap.isEmpty() || c.isEmpty()) {\n+                return false;\n+            }\n+\n@@ -467,10 +474,0 @@\n-            if (c.isEmpty()) {\n-                \/\/ Retaining an empty value set is equivalent to clearing the map.\n-                if (!remove && !backingMap.isEmpty()) {\n-                    clear();\n-                    return true;\n-                }\n-\n-                return false;\n-            }\n-\n@@ -493,0 +490,9 @@\n+            if (backingMap.isEmpty()) {\n+                return false;\n+            }\n+\n+            if (c.isEmpty()) {\n+                clear();\n+                return true;\n+            }\n+\n@@ -670,0 +676,7 @@\n+            if (c.isEmpty() && !backingMap.isEmpty()) {\n+                clear();\n+                return true;\n+            } else if (backingMap.isEmpty()) {\n+                return false;\n+            }\n+\n@@ -674,10 +687,0 @@\n-            if (c.isEmpty()) {\n-                \/\/ Retaining an empty entry set is equivalent to clearing the map.\n-                if (!remove && !backingMap.isEmpty()) {\n-                    clear();\n-                    return true;\n-                }\n-\n-                return false;\n-            }\n-\n@@ -700,0 +703,4 @@\n+            if (c.isEmpty() || backingMap.isEmpty()) {\n+                return false;\n+            }\n+\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableMapWrapper.java","additions":38,"deletions":31,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-public final class ObservableSequentialListWrapper<E> extends ModifiableObservableListBase<E> implements ObservableList<E>, SortableList<E>{\n+public class ObservableSequentialListWrapper<E> extends ModifiableObservableListBase<E> implements ObservableList<E>, SortableList<E>{\n@@ -179,0 +179,8 @@\n+        if (c.isEmpty()) {\n+            if (index < 0 || index > size()) {\n+                throw new IndexOutOfBoundsException(\"Index: \" + index);\n+            }\n+\n+            return false;\n+        }\n+\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableSequentialListWrapper.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -334,0 +334,7 @@\n+        if (c.isEmpty() && !backingSet.isEmpty()) {\n+            clear();\n+            return true;\n+        } else if (backingSet.isEmpty()) {\n+            return false;\n+        }\n+\n@@ -347,0 +354,4 @@\n+        if (c.isEmpty() || backingSet.isEmpty()) {\n+            return false;\n+        }\n+\n@@ -351,10 +362,0 @@\n-        if (c.isEmpty()) {\n-            \/\/ Retaining an empty set is equivalent to clearing the set.\n-            if (!remove && !backingSet.isEmpty()) {\n-                clear();\n-                return true;\n-            }\n-\n-            return false;\n-        }\n-\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableSetWrapper.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,0 +104,4 @@\n+        if (c.isEmpty()) {\n+            return false;\n+        }\n+\n@@ -106,2 +110,1 @@\n-            boolean res = super.addAll(c);\n-            return res;\n+            return super.addAll(c);\n@@ -115,0 +118,8 @@\n+        if (c.isEmpty()) {\n+            if (index < 0 || index > size()) {\n+                throw new IndexOutOfBoundsException(\"Index: \" + index);\n+            }\n+\n+            return false;\n+        }\n+\n@@ -117,2 +128,1 @@\n-            boolean res = super.addAll(index, c);\n-            return res;\n+            return super.addAll(index, c);\n@@ -126,0 +136,8 @@\n+        if (fromIndex == toIndex) {\n+            if (fromIndex < 0 || fromIndex > size()) {\n+                throw new IndexOutOfBoundsException(\"Index: \" + fromIndex);\n+            }\n+\n+            return;\n+        }\n+\n@@ -136,0 +154,4 @@\n+        if (c.isEmpty() || isEmpty()) {\n+            return false;\n+        }\n+\n@@ -138,2 +160,1 @@\n-            boolean res = super.removeAll(c);\n-            return res;\n+            return super.removeAll(c);\n@@ -147,0 +168,7 @@\n+        if (c.isEmpty() && !isEmpty()) {\n+            clear();\n+            return true;\n+        } else if (isEmpty()) {\n+            return false;\n+        }\n+\n@@ -149,2 +177,1 @@\n-            boolean res = super.retainAll(c);\n-            return res;\n+            return super.retainAll(c);\n@@ -257,1 +284,2 @@\n-    private class SubObservableList implements List<E> {\n+    \/\/ package-private for testing\n+    class SubObservableList implements List<E> {\n@@ -311,0 +339,4 @@\n+            if (c.isEmpty()) {\n+                return false;\n+            }\n+\n@@ -313,2 +345,1 @@\n-                boolean res = sublist.addAll(c);\n-                return res;\n+                return sublist.addAll(c);\n@@ -322,0 +353,8 @@\n+            if (c.isEmpty()) {\n+                if (index < 0 || index > sublist.size()) {\n+                    throw new IndexOutOfBoundsException(\"Index: \" + index);\n+                }\n+\n+                return false;\n+            }\n+\n@@ -324,2 +363,1 @@\n-                boolean res = sublist.addAll(index, c);\n-                return res;\n+                return sublist.addAll(index, c);\n@@ -333,0 +371,4 @@\n+            if (c.isEmpty() || sublist.isEmpty()) {\n+                return false;\n+            }\n+\n@@ -335,2 +377,1 @@\n-                boolean res = sublist.removeAll(c);\n-                return res;\n+                return sublist.removeAll(c);\n@@ -344,0 +385,7 @@\n+            if (c.isEmpty() && !sublist.isEmpty()) {\n+                sublist.clear();\n+                return true;\n+            } else if (sublist.isEmpty()) {\n+                return false;\n+            }\n+\n@@ -346,2 +394,1 @@\n-                boolean res = sublist.retainAll(c);\n-                return res;\n+                return sublist.retainAll(c);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/ModifiableObservableListBase.java","additions":65,"deletions":18,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.collections;\n+\n+import java.util.List;\n+\n+public abstract class ModifiableObservableListBaseShim<T> extends ModifiableObservableListBase<T> {\n+\n+    @Override\n+    public List<T> subList(int fromIndex, int toIndex) {\n+        return new SubObservableList(getTestSubList(fromIndex, toIndex));\n+    }\n+\n+    protected abstract List<T> getTestSubList(int fromIndex, int toIndex);\n+\n+}\n","filename":"modules\/javafx.base\/src\/shims\/java\/javafx\/collections\/ModifiableObservableListBaseShim.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.util.Collection;\n@@ -34,0 +35,2 @@\n+import static org.junit.jupiter.api.Assertions.*;\n+\n@@ -38,1 +41,1 @@\n-        ObservableListWrapper<String> list = new ObservableListWrapper<>(new ArrayList<>(List.of(\"a\", \"b\", \"c\")) {\n+        var list = new ObservableListWrapper<>(new ArrayList<>(List.of(\"a\", \"b\", \"c\")) {\n@@ -50,1 +53,1 @@\n-        ObservableListWrapper<String> list = new ObservableListWrapper<>(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n+        var list = new ObservableListWrapper<>(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n@@ -60,0 +63,26 @@\n+    @Test\n+    public void testRemoveAllWithNullArgumentThrowsNPE() {\n+        var list = new ObservableListWrapper<>(List.of(\"a\", \"b\", \"c\"));\n+        assertThrows(NullPointerException.class, () -> list.removeAll((Collection<?>) null));\n+    }\n+\n+    @Test\n+    public void testRemoveAllWithEmptyListArgumentWorksCorrectly() {\n+        var list = new ObservableListWrapper<>(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n+        assertFalse(list.removeAll(List.of()));\n+        assertEquals(List.of(\"a\", \"b\", \"c\"), list);\n+    }\n+\n+    @Test\n+    public void testRetainAllWithNullArgumentThrowsNPE() {\n+        var list = new ObservableListWrapper<>(List.of(\"a\", \"b\", \"c\"));\n+        assertThrows(NullPointerException.class, () -> list.retainAll((Collection<?>) null));\n+    }\n+\n+    @Test\n+    public void testRetainAllWithEmptyListArgumentWorksCorrectly() {\n+        var list = new ObservableListWrapper<>(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n+        assertTrue(list.retainAll(List.of()));\n+        assertTrue(list.isEmpty());\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ObservableListWrapperTest.java","additions":32,"deletions":3,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.util.Collection;\n@@ -38,0 +39,2 @@\n+import static org.junit.jupiter.api.Assertions.*;\n+\n@@ -42,2 +45,2 @@\n-        ObservableMapWrapper<String, String> set = newNonIterableObservableMapWrapper();\n-        set.keySet().removeAll(Collections.<String>emptySet());\n+        ObservableMapWrapper<String, String> map = newNonIterableObservableMapWrapper();\n+        map.keySet().removeAll(Collections.<String>emptySet());\n@@ -48,2 +51,2 @@\n-        ObservableMapWrapper<String, String> set = newNonIterableObservableMapWrapper();\n-        set.values().removeAll(Collections.<String>emptySet());\n+        ObservableMapWrapper<String, String> map = newNonIterableObservableMapWrapper();\n+        map.values().removeAll(Collections.<String>emptySet());\n@@ -54,2 +57,49 @@\n-        ObservableMapWrapper<String, String> set = newNonIterableObservableMapWrapper();\n-        set.entrySet().removeAll(Collections.<Map.Entry<String, String>>emptySet());\n+        ObservableMapWrapper<String, String> map = newNonIterableObservableMapWrapper();\n+        map.entrySet().removeAll(Collections.<Map.Entry<String, String>>emptySet());\n+    }\n+\n+    @Test\n+    public void testRetainAllKeysWithEmptyArgumentDoesNotCallContains() {\n+        var map = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n+        map.keySet().retainAll(newNoContainsHashSet());\n+    }\n+\n+    @Test\n+    public void testRetainAllValuesWithEmptyArgumentDoesNotCallContains() {\n+        var map = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n+        map.values().retainAll(newNoContainsHashSet());\n+    }\n+\n+    @Test\n+    public void testRetainAllEntriesWithEmptyArgumentDoesNotCallContains() {\n+        var map = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n+        map.entrySet().retainAll(newNoContainsHashSet());\n+    }\n+\n+    @Test\n+    public void testRemoveAllWithNullArgumentThrowsNPE() {\n+        var map = new ObservableMapWrapper<>(new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n+        assertThrows(NullPointerException.class, () -> map.entrySet().removeAll((Collection<?>) null));\n+    }\n+\n+    @Test\n+    public void testRemoveAllWithEmptyListArgumentWorksCorrectly() {\n+        var content = Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\");\n+        var map = new ObservableMapWrapper<>(new HashMap<>(content));\n+        assertFalse(map.entrySet().removeAll(Set.of()));\n+        assertEquals(content, map);\n+    }\n+\n+    @Test\n+    public void testRetainAllWithNullArgumentThrowsNPE() {\n+        var content = Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\");\n+        var map = new ObservableMapWrapper<>(new HashMap<>(content));\n+        assertThrows(NullPointerException.class, () -> map.entrySet().retainAll((Collection<?>) null));\n+    }\n+\n+    @Test\n+    public void testRetainAllWithEmptyListArgumentWorksCorrectly() {\n+        var content = Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\");\n+        var map = new ObservableMapWrapper<>(new HashMap<>(content));\n+        assertTrue(map.entrySet().retainAll(Set.of()));\n+        assertTrue(map.isEmpty());\n@@ -66,2 +116,3 @@\n-                        entrySet = new AbstractSet<Entry<String, String>>() {\n-                            @Override public Iterator<Entry<String, String>> iterator() {\n+                        entrySet = new AbstractSet<>() {\n+                            @Override\n+                            public Iterator<Entry<String, String>> iterator() {\n@@ -82,24 +133,0 @@\n-    @Test\n-    public void testRetainAllKeysWithEmptyArgumentDoesNotCallContains() {\n-        ObservableMapWrapper<String, String> set = new ObservableMapWrapper<>(\n-            new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n-\n-        set.keySet().retainAll(newNoContainsHashSet());\n-    }\n-\n-    @Test\n-    public void testRetainAllValuesWithEmptyArgumentDoesNotCallContains() {\n-        ObservableMapWrapper<String, String> set = new ObservableMapWrapper<>(\n-                new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n-\n-        set.values().retainAll(newNoContainsHashSet());\n-    }\n-\n-    @Test\n-    public void testRetainAllEntriesWithEmptyArgumentDoesNotCallContains() {\n-        ObservableMapWrapper<String, String> set = new ObservableMapWrapper<>(\n-                new HashMap<>(Map.of(\"k0\", \"v0\", \"k1\", \"v1\", \"k2\", \"v2\")));\n-\n-        set.entrySet().retainAll(newNoContainsHashSet());\n-    }\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ObservableMapWrapperTest.java","additions":60,"deletions":33,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.collections;\n+\n+import com.sun.javafx.collections.ObservableSequentialListWrapper;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class ObservableSequentialListWrapperTest {\n+\n+    @Test\n+    public void testAddAllWithEmptyCollectionArgumentDoesNotEnumerateCollection() {\n+        var list = new ObservableSequentialListWrapper<String>(Collections.emptyList()) {\n+            @Override\n+            public Iterator<String> iterator() {\n+                throw new AssertionError(\"iterator() was not elided\");\n+            }\n+\n+            @Override\n+            public ListIterator<String> listIterator() {\n+                throw new AssertionError(\"listIterator() was not elided\");\n+            }\n+        };\n+\n+        assertDoesNotThrow(() -> list.addAll(Collections.emptyList()));\n+        assertDoesNotThrow(() -> list.addAll(0, Collections.emptyList()));\n+    }\n+\n+    @Test\n+    public void testAddAllWithEmptyCollectionArgumentAndInvalidIndexThrowsIOOBE() {\n+        var list = new ObservableSequentialListWrapper<>(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n+        assertThrows(IndexOutOfBoundsException.class, () -> list.addAll(-1, Collections.emptyList()));\n+        assertThrows(IndexOutOfBoundsException.class, () -> list.addAll(4, Collections.emptyList()));\n+        assertDoesNotThrow(() -> list.addAll(3, List.of(\"d\", \"e\")));\n+    }\n+\n+}\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ObservableSequentialListWrapperTest.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.Collection;\n@@ -35,0 +36,2 @@\n+import static org.junit.jupiter.api.Assertions.*;\n+\n@@ -61,0 +64,26 @@\n+    @Test\n+    public void testRemoveAllWithNullArgumentThrowsNPE() {\n+        var set = new ObservableSetWrapper<>(Set.of(\"a\", \"b\", \"c\"));\n+        assertThrows(NullPointerException.class, () -> set.removeAll((Collection<?>) null));\n+    }\n+\n+    @Test\n+    public void testRemoveAllWithEmptyListArgumentWorksCorrectly() {\n+        var set = new ObservableSetWrapper<>(new HashSet<>(Set.of(\"a\", \"b\", \"c\")));\n+        assertFalse(set.removeAll(Set.of()));\n+        assertEquals(Set.of(\"a\", \"b\", \"c\"), set);\n+    }\n+\n+    @Test\n+    public void testRetainAllWithNullArgumentThrowsNPE() {\n+        var set = new ObservableSetWrapper<>(Set.of(\"a\", \"b\", \"c\"));\n+        assertThrows(NullPointerException.class, () -> set.retainAll((Collection<?>) null));\n+    }\n+\n+    @Test\n+    public void testRetainAllWithEmptyListArgumentWorksCorrectly() {\n+        var set = new ObservableSetWrapper<>(new HashSet<>(Set.of(\"a\", \"b\", \"c\")));\n+        assertTrue(set.retainAll(Set.of()));\n+        assertTrue(set.isEmpty());\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ObservableSetWrapperTest.java","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,249 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.collections;\n+\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import javafx.collections.ModifiableObservableListBaseShim;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class ModifiableObservableListBaseTest {\n+\n+    @Test\n+    public void testAddAllWithEmptyCollectionArgumentDoesNotEnumerateCollection() {\n+        var list = new MockModifiableObservableList(Collections.emptyList()) {\n+            @Override\n+            public Iterator<String> iterator() {\n+                throw new AssertionError(\"iterator() was not elided\");\n+            }\n+\n+            @Override\n+            public ListIterator<String> listIterator() {\n+                throw new AssertionError(\"listIterator() was not elided\");\n+            }\n+        };\n+\n+        assertDoesNotThrow(() -> list.addAll(Collections.emptyList()));\n+        assertDoesNotThrow(() -> list.addAll(0, Collections.emptyList()));\n+    }\n+\n+    @Test\n+    public void testAddAllWithEmptyCollectionArgumentAndInvalidIndexThrowsIOOBE() {\n+        var list = new MockModifiableObservableList(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n+        assertThrows(IndexOutOfBoundsException.class, () -> list.addAll(-1, Collections.emptyList()));\n+        assertThrows(IndexOutOfBoundsException.class, () -> list.addAll(4, Collections.emptyList()));\n+        assertDoesNotThrow(() -> list.addAll(3, List.of(\"d\", \"e\")));\n+    }\n+\n+    @Test\n+    public void testRemoveAllWithEmptyCollectionArgumentDoesNotEnumerateBackingList() {\n+        var list = new MockModifiableObservableList(List.of(\"a\", \"b\", \"c\")) {\n+            @Override\n+            public String get(int index) {\n+                throw new AssertionError(\"get() was not elided\");\n+            }\n+        };\n+\n+        assertDoesNotThrow(() -> list.removeAll(Collections.<String>emptyList()));\n+    }\n+\n+    @Test\n+    public void testRetainAllWithEmptyCollectionArgumentDoesNotCallContains() {\n+        var list = new MockModifiableObservableList(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n+\n+        assertDoesNotThrow(() -> list.retainAll(new ArrayList<String>() {\n+            @Override\n+            public boolean contains(Object o) {\n+                throw new AssertionError(\"contains() was not elided\");\n+            }\n+        }));\n+    }\n+\n+    @Test\n+    public void testRetainAllWithEmptyCollectionArgumentCallsClear() {\n+        boolean[] flag = new boolean[1];\n+        new MockModifiableObservableList(new ArrayList<>(List.of(\"a\", \"b\", \"c\"))) {\n+            @Override\n+            public void clear() {\n+                flag[0] = true;\n+                super.clear();\n+            }\n+        }.retainAll(Collections.<String>emptyList());\n+\n+        assertTrue(flag[0], \"clear() was not called\");\n+    }\n+\n+    @Test\n+    public void testRetainAllOnEmptyListDoesNotCallClear() {\n+        var list = new MockModifiableObservableList(new ArrayList<>()) {\n+            @Override\n+            public void clear() {\n+                throw new AssertionError(\"clear() was not elided\");\n+            }\n+        };\n+\n+        assertDoesNotThrow(() -> list.retainAll(Collections.<String>emptyList()));\n+    }\n+\n+    @Test\n+    public void testRemoveEmptyRangeDoesNotEnumerateList() {\n+        var list = new MockModifiableObservableList(List.of(\"a\", \"b\", \"c\")) {\n+            @Override\n+            public Iterator<String> iterator() {\n+                throw new AssertionError(\"iterator() was not elided\");\n+            }\n+\n+            @Override\n+            public ListIterator<String> listIterator() {\n+                throw new AssertionError(\"listIterator() was not elided\");\n+            }\n+        };\n+\n+        assertDoesNotThrow(() -> list.removeRange(0, 0));\n+    }\n+\n+    @Nested\n+    class SubListTest {\n+        @Test\n+        public void testAddAllWithEmptyCollectionArgumentDoesNotEnumerateCollection() {\n+            var backingSubList = new ArrayList<>(Collections.<String>emptyList()) {\n+                @Override\n+                public Iterator<String> iterator() {\n+                    throw new AssertionError(\"iterator() was not elided\");\n+                }\n+\n+                @Override\n+                public ListIterator<String> listIterator() {\n+                    throw new AssertionError(\"listIterator() was not elided\");\n+                }\n+            };\n+\n+            var subList = new MockModifiableObservableList(Collections.emptyList(), backingSubList).subList(0, 0);\n+            assertDoesNotThrow(() -> subList.addAll(Collections.emptyList()));\n+            assertDoesNotThrow(() -> subList.addAll(0, Collections.emptyList()));\n+        }\n+\n+        @Test\n+        public void testAddAllWithEmptyCollectionArgumentAndInvalidIndexThrowsIOOBE() {\n+            var backingList = new MockModifiableObservableList(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n+            var backingSubList = new ArrayList<>(new ArrayList<>(List.of(\"a\", \"b\")));\n+            var subList = new MockModifiableObservableList(backingList, backingSubList).subList(0, 2);\n+            assertThrows(IndexOutOfBoundsException.class, () -> subList.addAll(-1, Collections.emptyList()));\n+            assertThrows(IndexOutOfBoundsException.class, () -> subList.addAll(3, Collections.emptyList()));\n+            assertDoesNotThrow(() -> subList.addAll(2, List.of(\"d\", \"e\")));\n+        }\n+\n+        @Test\n+        public void testRemoveAllWithEmptyCollectionArgumentDoesNotCallRemoveAll() {\n+            var backingList = List.of(\"a\", \"b\", \"c\");\n+            var backingSubList = new ArrayList<>(List.of(\"a\", \"b\")) {\n+                @Override\n+                public boolean removeAll(Collection<?> c) {\n+                    throw new AssertionError(\"removeAll() was not elided\");\n+                }\n+            };\n+\n+            var subList = new MockModifiableObservableList(backingList, backingSubList).subList(0, 2);\n+            assertDoesNotThrow(() -> subList.removeAll(Collections.<String>emptyList()));\n+        }\n+\n+        @Test\n+        public void testRetainAllWithEmptyCollectionArgumentDoesNotCallContains() {\n+            var backingList = List.of(\"a\", \"b\", \"c\");\n+            var backingSubList = new ArrayList<>(List.of(\"a\", \"b\"));\n+            var subList = new MockModifiableObservableList(backingList, backingSubList).subList(0, 2);\n+\n+            assertDoesNotThrow(() -> subList.retainAll(new ArrayList<String>() {\n+                @Override\n+                public boolean contains(Object o) {\n+                    throw new AssertionError(\"contains() was not elided\");\n+                }\n+            }));\n+        }\n+\n+        @Test\n+        public void testRetainAllWithEmptyCollectionArgumentCallsClear() {\n+            boolean[] flag = new boolean[1];\n+            var backingList = List.of(\"a\", \"b\", \"c\");\n+            var backingSubList = new ArrayList<>(List.of(\"a\", \"b\")) {\n+                @Override\n+                public void clear() {\n+                    flag[0] = true;\n+                    super.clear();\n+                }\n+            };\n+\n+            var subList = new MockModifiableObservableList(backingList, backingSubList).subList(0, 2);\n+            subList.retainAll(Collections.<String>emptyList());\n+            assertTrue(flag[0], \"clear() was not called\");\n+        }\n+\n+        @Test\n+        public void testRetainAllOnEmptyListDoesNotCallClear() {\n+            var backingList = new ArrayList<String>();\n+            var backingSubList = new ArrayList<String>() {\n+                @Override\n+                public void clear() {\n+                    throw new AssertionError(\"clear() was not elided\");\n+                }\n+            };\n+\n+            var subList = new MockModifiableObservableList(backingList, backingSubList).subList(0, 0);\n+            assertDoesNotThrow(() -> subList.retainAll(Collections.<String>emptyList()));\n+        }\n+    }\n+\n+    private static class MockModifiableObservableList extends ModifiableObservableListBaseShim<String> {\n+        private final List<String> backingList;\n+        private final List<String> subList;\n+\n+        MockModifiableObservableList(List<String> list) {\n+            this.backingList = list;\n+            this.subList = Collections.emptyList();\n+        }\n+\n+        MockModifiableObservableList(List<String> list, List<String> subList) {\n+            this.backingList = list;\n+            this.subList = subList;\n+        }\n+\n+        @Override public String get(int index) { return backingList.get(index); }\n+        @Override public int size() { return backingList.size(); }\n+        @Override protected void doAdd(int index, String element) { backingList.add(index, element); }\n+        @Override protected String doSet(int index, String element) { return backingList.set(index, element); }\n+        @Override protected String doRemove(int index) { return backingList.remove(index); }\n+        @Override public void removeRange(int fromIndex, int toIndex) { super.removeRange(fromIndex, toIndex); }\n+        @Override protected List<String> getTestSubList(int fromIndex, int toIndex) { return subList; }\n+    }\n+\n+}\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ModifiableObservableListBaseTest.java","additions":249,"deletions":0,"binary":false,"changes":249,"status":"added"}]}