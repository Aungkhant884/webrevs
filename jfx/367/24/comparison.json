{"files":[{"patch":"@@ -203,12 +203,0 @@\n-\n-        if ((w <= 0) && (cw > 0) || (h <= 0) && (ch > 0)) {\n-            final int[] extarr = new int[4];\n-            getFrameExtents(ptr, extarr);\n-\n-            \/\/ TODO: ((w <= 0) && (cw <= 0)) || ((h <= 0) && (ch <= 0))\n-            notifyResize(WindowEvent.RESIZE,\n-                         ((w <= 0) && (cw > 0)) ? cw + extarr[0] + extarr[1]\n-                                                : w,\n-                         ((h <= 0) && (ch > 0)) ? ch + extarr[2] + extarr[3]\n-                                                : h);\n-        }\n@@ -217,2 +205,0 @@\n-    private native void getFrameExtents(long ptr, int[] extarr);\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkWindow.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-        return view->current_window->get_frame_extents().left;\n+        return view->current_window->get_geometry().extents.left;\n@@ -123,1 +123,1 @@\n-        return view->current_window->get_frame_extents().top;\n+        return view->current_window->get_geometry().extents.top;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassView.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -602,8 +602,0 @@\n-\n-    WindowContext* ctx = JLONG_TO_WINDOW_CTX(ptr);\n-    WindowFrameExtents extents = ctx->get_frame_extents();\n-\n-    env->SetIntArrayRegion(extarr, 0, 1, &extents.left);\n-    env->SetIntArrayRegion(extarr, 1, 1, &extents.right);\n-    env->SetIntArrayRegion(extarr, 2, 1, &extents.top);\n-    env->SetIntArrayRegion(extarr, 3, 1, &extents.bottom);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassWindow.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-    if (jview) {\n+    if (jview && is_visible()) {\n@@ -518,3 +518,0 @@\n-    if (!is_visible()) {\n-        return;\n-    }\n@@ -704,2 +701,5 @@\n-WindowFrameExtents WindowContextTop::normal_extents = {28, 1, 1, 1};\n-WindowFrameExtents WindowContextTop::utility_extents = {28, 1, 1, 1};\n+static GdkAtom\n+get_net_frame_extents_atom() {\n+    static const char * extents_str = \"_NET_FRAME_EXTENTS\";\n+    return gdk_atom_intern(extents_str, TRUE);\n+}\n@@ -707,0 +707,5 @@\n+\/\/ Work-around because frame extents are only obtained after window is shown.\n+\/\/ This is used to know the total window size (content + decoration)\n+\/\/ The first window will have a duplicated resize event, subsequent windows will use the cached value.\n+WindowFrameExtents WindowContextTop::normal_extents;\n+WindowFrameExtents WindowContextTop::utility_extents;\n@@ -716,2 +721,0 @@\n-            resizable(),\n-            frame_extents_initialized(),\n@@ -719,2 +722,1 @@\n-            location_assigned(false),\n-            size_assigned(false),\n+            visible_received(false),\n@@ -722,1 +724,2 @@\n-            requested_bounds()\n+            is_maximized(false),\n+            is_fullscreen(false)\n@@ -726,1 +729,1 @@\n-    gtk_widget =  gtk_window_new(type == POPUP ? GTK_WINDOW_POPUP : GTK_WINDOW_TOPLEVEL);\n+    gtk_widget = gtk_window_new(type == POPUP ? GTK_WINDOW_POPUP : GTK_WINDOW_TOPLEVEL);\n@@ -744,2 +747,0 @@\n-\/\/    glong xdisplay = (glong)mainEnv->GetStaticLongField(jApplicationCls, jApplicationDisplay);\n-\/\/    gint  xscreenID = (gint)mainEnv->GetStaticIntField(jApplicationCls, jApplicationScreen);\n@@ -753,1 +754,0 @@\n-    gtk_widget_set_size_request(gtk_widget, 0, 0);\n@@ -765,0 +765,5 @@\n+    GdkGeometry gdk_geometry;\n+    gdk_geometry.win_gravity = GDK_GRAVITY_NORTH_WEST;\n+\n+    gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &gdk_geometry, (GdkWindowHints) GDK_HINT_WIN_GRAVITY);\n+\n@@ -774,1 +779,4 @@\n-    if (frame_type == TITLED) {\n+    geometry.frame_extents_supported = gdk_x11_screen_supports_net_wm_hint(gdk_screen_get_default(),\n+                                                                  get_net_frame_extents_atom());\n+\n+    if (TITLED == frame_type && geometry.frame_extents_supported) {\n@@ -776,0 +784,1 @@\n+        geometry.extents = get_cached_extents();\n@@ -791,6 +800,0 @@\n-static GdkAtom\n-get_net_frame_extents_atom() {\n-    static const char * extents_str = \"_NET_FRAME_EXTENTS\";\n-    return gdk_atom_intern(extents_str, TRUE);\n-}\n-\n@@ -851,22 +854,0 @@\n-\n-bool WindowContextTop::update_frame_extents() {\n-    bool changed = false;\n-    int top, left, bottom, right;\n-    if (get_frame_extents_property(&top, &left, &bottom, &right)) {\n-        changed = geometry.extents.top != top\n-                    || geometry.extents.left != left\n-                    || geometry.extents.bottom != bottom\n-                    || geometry.extents.right != right;\n-        if (changed) {\n-            geometry.extents.top = top;\n-            geometry.extents.left = left;\n-            geometry.extents.bottom = bottom;\n-            geometry.extents.right = right;\n-            if (!is_null_extents()) {\n-                set_cached_extents(geometry.extents);\n-            }\n-        }\n-    }\n-    return changed;\n-}\n-\n@@ -900,67 +881,0 @@\n-static int geometry_get_window_width(const WindowGeometry *windowGeometry) {\n-     return (windowGeometry->final_width.type != BOUNDSTYPE_WINDOW)\n-                   ? windowGeometry->final_width.value\n-                         + windowGeometry->extents.left\n-                         + windowGeometry->extents.right\n-                   : windowGeometry->final_width.value;\n-}\n-\n-static int geometry_get_window_height(const WindowGeometry *windowGeometry) {\n-    return (windowGeometry->final_height.type != BOUNDSTYPE_WINDOW)\n-                   ? windowGeometry->final_height.value\n-                         + windowGeometry->extents.top\n-                         + windowGeometry->extents.bottom\n-                   : windowGeometry->final_height.value;\n-}\n-\n-static int geometry_get_content_width(WindowGeometry *windowGeometry) {\n-    return (windowGeometry->final_width.type != BOUNDSTYPE_CONTENT)\n-                   ? windowGeometry->final_width.value\n-                         - windowGeometry->extents.left\n-                         - windowGeometry->extents.right\n-                   : windowGeometry->final_width.value;\n-}\n-static int geometry_get_content_height(WindowGeometry *windowGeometry) {\n-    return (windowGeometry->final_height.type != BOUNDSTYPE_CONTENT)\n-                   ? windowGeometry->final_height.value\n-                         - windowGeometry->extents.top\n-                         - windowGeometry->extents.bottom\n-                   : windowGeometry->final_height.value;\n-}\n-\n-static int geometry_get_window_x(const WindowGeometry *windowGeometry) {\n-    float value = windowGeometry->refx;\n-    if (windowGeometry->gravity_x != 0) {\n-        value -= geometry_get_window_width(windowGeometry)\n-                     * windowGeometry->gravity_x;\n-    }\n-    return (int) value;\n-}\n-\n-static int geometry_get_window_y(const WindowGeometry *windowGeometry) {\n-    float value = windowGeometry->refy;\n-    if (windowGeometry->gravity_y != 0) {\n-        value -= geometry_get_window_height(windowGeometry)\n-                     * windowGeometry->gravity_y;\n-    }\n-    return (int) value;\n-}\n-\n-static void geometry_set_window_x(WindowGeometry *windowGeometry, int value) {\n-    float newValue = value;\n-    if (windowGeometry->gravity_x != 0) {\n-        newValue += geometry_get_window_width(windowGeometry)\n-                * windowGeometry->gravity_x;\n-    }\n-    windowGeometry->refx = newValue;\n-}\n-\n-static void geometry_set_window_y(WindowGeometry *windowGeometry, int value) {\n-    float newValue = value;\n-    if (windowGeometry->gravity_y != 0) {\n-        newValue += geometry_get_window_height(windowGeometry)\n-                * windowGeometry->gravity_y;\n-    }\n-    windowGeometry->refy = newValue;\n-}\n-\n@@ -970,0 +884,5 @@\n+    \/\/ This is a Unity bug (which is not Ubuntu default anymore)\n+    if (!g_strcmp0(\"Unity\", gdk_x11_screen_get_window_manager_name(gdk_screen_get_default()))) {\n+        return;\n+    }\n+\n@@ -1009,11 +928,8 @@\n-    if (event->atom == atom_net_wm_state && event->window == gdk_window) {\n-        process_net_wm_property();\n-    }\n-}\n-\n-void WindowContextTop::process_configure(GdkEventConfigure* event) {\n-    gint x, y, w, h;\n-    bool updateWindowConstraints = false;\n-    if (gtk_window_get_decorated(GTK_WINDOW(gtk_widget))) {\n-        GdkRectangle frame;\n-        gint top, left, bottom, right;\n+    if (event->window == gdk_window) {\n+        \/\/ This work-around is only necessary for Unity\n+        if (event->atom == atom_net_wm_state) {\n+            process_net_wm_property();\n+        } else if (event->atom == get_net_frame_extents_atom()) {\n+            if (frame_type != TITLED) {\n+                return;\n+            }\n@@ -1021,19 +937,24 @@\n-        gdk_window_get_frame_extents(gdk_window, &frame);\n-#ifdef GLASS_GTK3\n-        gdk_window_get_geometry(gdk_window, NULL, NULL, &w, &h);\n-#else\n-        gdk_window_get_geometry(gdk_window, NULL, NULL, &w, &h, NULL);\n-#endif\n-        x = frame.x;\n-        y = frame.y;\n-        geometry.current_width = frame.width;\n-        geometry.current_height = frame.height;\n-\n-        if (update_frame_extents()) {\n-            updateWindowConstraints = true;\n-            if (!frame_extents_initialized && !is_null_extents()) {\n-                frame_extents_initialized = true;\n-                set_bounds(0, 0, false, false,\n-                    requested_bounds.width, requested_bounds.height,\n-                    requested_bounds.client_width, requested_bounds.client_height\n-                );\n+            int top, left, bottom, right;\n+\n+            if (get_frame_extents_property(&top, &left, &bottom, &right)) {\n+                if (top + left + bottom + right > 0) {\n+                    geometry.frame_extents_received = true;\n+                    geometry.extents.top = top;\n+                    geometry.extents.left = left;\n+                    geometry.extents.bottom = bottom;\n+                    geometry.extents.right = right;\n+\n+                    set_cached_extents(geometry.extents);\n+\n+                    \/\/ set bounds again to set to correct window size that must\n+                    \/\/ be the total width and height accounting extents\n+                    if (geometry.needs_frame_extents) {\n+                        if (geometry.content_size) {\n+                            set_bounds(0, 0, false, false, -1, -1, geometry.current_cw, geometry.current_ch);\n+                        } else {\n+                            set_bounds(0, 0, false, false, geometry.current_w, geometry.current_h, -1, -1);\n+                        }\n+\n+                        size_position_notify(true, true);\n+                    }\n+                }\n@@ -1042,5 +963,0 @@\n-    } else {\n-        x = event->x;\n-        y = event->y;\n-        w = event->width;\n-        h = event->height;\n@@ -1048,0 +964,1 @@\n+}\n@@ -1049,3 +966,4 @@\n-    if (size_assigned && w <= 1 && h <= 1 && (geometry.final_width.value > 1 ||\n-                                             geometry.final_height.value > 1)) {\n-        \/\/ skip artifact\n+void WindowContextTop::process_configure(GdkEventConfigure* event) {\n+    \/\/ This will prevent sending window sizes before java is done configuring the window\n+    \/\/ Without it, some content size oriented window gets the size before finishing the layout\n+    if (!map_received && !is_fullscreen && !is_maximized) {\n@@ -1053,8 +971,0 @@\n-   }\n-\n-    \/\/ JDK-8232811: to avoid conflicting events, update the geometry only after window pops.\n-    if (map_received) {\n-        geometry.final_width.value = w;\n-        geometry.final_width.type = BOUNDSTYPE_CONTENT;\n-        geometry.final_height.value = h;\n-        geometry.final_height.type = BOUNDSTYPE_CONTENT;\n@@ -1063,2 +973,1 @@\n-    geometry_set_window_x(&geometry, x);\n-    geometry_set_window_y(&geometry, y);\n+    gint x, y, cw, ch, w, h;\n@@ -1066,17 +975,5 @@\n-    if (jview) {\n-        mainEnv->CallVoidMethod(jview, jViewNotifyResize,\n-                event->width,\n-                event->height);\n-        CHECK_JNI_EXCEPTION(mainEnv)\n-        mainEnv->CallVoidMethod(jview, jViewNotifyView,\n-                com_sun_glass_events_ViewEvent_MOVE);\n-        CHECK_JNI_EXCEPTION(mainEnv)\n-    }\n-    if (jwindow) {\n-        mainEnv->CallVoidMethod(jwindow, jWindowNotifyResize,\n-                (is_maximized)\n-                    ? com_sun_glass_events_WindowEvent_MAXIMIZE\n-                    : com_sun_glass_events_WindowEvent_RESIZE,\n-                geometry.current_width,\n-                geometry.current_height);\n-        CHECK_JNI_EXCEPTION(mainEnv)\n+    \/\/ content width \/ height\n+    cw = event->width;\n+    ch = event->height;\n+    w = cw + geometry.extents.left + geometry.extents.right;\n+    h = ch + geometry.extents.top + geometry.extents.bottom;\n@@ -1084,2 +981,16 @@\n-        mainEnv->CallVoidMethod(jwindow, jWindowNotifyMove, x, y);\n-        CHECK_JNI_EXCEPTION(mainEnv)\n+    gtk_window_get_position(GTK_WINDOW(gtk_widget), &x, &y);\n+\n+    bool pos_changed = geometry.current_x != x || geometry.current_y != y;\n+    bool size_changed =  geometry.current_w != w || geometry.current_h != h\n+                         || geometry.current_cw != cw || geometry.current_ch != ch;\n+\n+    geometry.current_x = x;\n+    geometry.current_y = y;\n+    geometry.current_w = w;\n+    geometry.current_h = h;\n+    geometry.current_cw = cw;\n+    geometry.current_ch = ch;\n+\n+    if (!is_fullscreen && !is_maximized) {\n+        geometry.last_cw = cw;\n+        geometry.last_ch = ch;\n@@ -1088,0 +999,2 @@\n+    size_position_notify(size_changed, pos_changed);\n+\n@@ -1092,1 +1005,1 @@\n-                \/\/notify screen changed\n+                \/\/ notify screen changed\n@@ -1100,44 +1013,0 @@\n-\n-    if (resizable.request != REQUEST_NONE) {\n-        set_window_resizable(resizable.request == REQUEST_RESIZABLE);\n-        resizable.request = REQUEST_NONE;\n-    } else if (!resizable.value) {\n-        set_window_resizable(false);\n-    } else if (updateWindowConstraints) {\n-        update_window_constraints();\n-    }\n-}\n-\n-void WindowContextTop::update_window_constraints() {\n-    if (resizable.value) {\n-        GdkGeometry geom = {\n-            (resizable.minw == -1) ? 1\n-                    : resizable.minw - geometry.extents.left - geometry.extents.right,\n-            (resizable.minh == -1) ? 1\n-                    : resizable.minh - geometry.extents.top - geometry.extents.bottom,\n-            (resizable.maxw == -1) ? 100000\n-                    : resizable.maxw - geometry.extents.left - geometry.extents.right,\n-            (resizable.maxh == -1) ? 100000\n-                    : resizable.maxh - geometry.extents.top - geometry.extents.bottom,\n-            0, 0, 0, 0, 0.0, 0.0, GDK_GRAVITY_NORTH_WEST\n-        };\n-        gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &geom,\n-                static_cast<GdkWindowHints> (GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE));\n-    }\n-}\n-\n-void WindowContextTop::set_window_resizable(bool res) {\n-    if(!res) {\n-        int w = geometry_get_content_width(&geometry);\n-        int h = geometry_get_content_height(&geometry);\n-        if (w == -1 && h == -1) {\n-            gtk_window_get_size(GTK_WINDOW(gtk_widget), &w, &h);\n-        }\n-        GdkGeometry geom = {w, h, w, h, 0, 0, 0, 0, 0.0, 0.0, GDK_GRAVITY_NORTH_WEST};\n-        gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &geom,\n-                static_cast<GdkWindowHints>(GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE));\n-        resizable.value = false;\n-    } else {\n-        resizable.value = true;\n-        update_window_constraints();\n-    }\n@@ -1147,8 +1016,3 @@\n-    resizable.prev = false;\n-    gint w, h;\n-    gtk_window_get_size(GTK_WINDOW(gtk_widget), &w, &h);\n-    if (map_received || w > 1 || h > 1) {\n-        set_window_resizable(res);\n-    } else {\n-        \/\/Since window is not ready yet set only request for change of resizable.\n-        resizable.request  = res ? REQUEST_RESIZABLE : REQUEST_NOT_RESIZABLE;\n+    if (res != geometry.resizable) {\n+        geometry.resizable = res;\n+        apply_geometry();\n@@ -1158,2 +1022,3 @@\n-void WindowContextTop::set_visible(bool visible)\n-{\n+void WindowContextTop::set_visible(bool visible) {\n+    WindowContextBase::set_visible(visible);\n+\n@@ -1161,1 +1026,3 @@\n-        if (!size_assigned) {\n+        visible_received = true;\n+\n+        if (!geometry.size_assigned) {\n@@ -1164,3 +1031,0 @@\n-        if (!location_assigned) {\n-            set_bounds(0, 0, true, true, -1, -1, -1, -1);\n-        }\n@@ -1168,1 +1032,1 @@\n-    WindowContextBase::set_visible(visible);\n+\n@@ -1176,16 +1040,2 @@\n-void WindowContextTop::set_bounds(int x, int y, bool xSet, bool ySet, int w, int h, int cw, int ch) {\n-    requested_bounds.width = w;\n-    requested_bounds.height = h;\n-    requested_bounds.client_width = cw;\n-    requested_bounds.client_height = ch;\n-\n-    if (!frame_extents_initialized && frame_type == TITLED) {\n-        update_frame_extents();\n-        if (is_null_extents()) {\n-            if (!is_null_extents(get_cached_extents())) {\n-                geometry.extents = get_cached_extents();\n-            }\n-        } else {\n-            frame_extents_initialized = true;\n-        }\n-    }\n+void WindowContextTop::apply_geometry() {\n+    GdkGeometry gdk_geometry;\n@@ -1193,29 +1043,2 @@\n-    XWindowChanges windowChanges;\n-    unsigned int windowChangesMask = 0;\n-    if (w > 0) {\n-        geometry.final_width.value = w;\n-        geometry.final_width.type = BOUNDSTYPE_WINDOW;\n-        geometry.current_width = geometry_get_window_width(&geometry);\n-        windowChanges.width = geometry_get_content_width(&geometry);\n-        windowChangesMask |= CWWidth;\n-    } else if (cw > 0) {\n-        geometry.final_width.value = cw;\n-        geometry.final_width.type = BOUNDSTYPE_CONTENT;\n-        geometry.current_width = geometry_get_window_width(&geometry);\n-        windowChanges.width = geometry_get_content_width(&geometry);\n-        windowChangesMask |= CWWidth;\n-    }\n-\n-    if (h > 0) {\n-        geometry.final_height.value = h;\n-        geometry.final_height.type = BOUNDSTYPE_WINDOW;\n-        geometry.current_height = geometry_get_window_height(&geometry);\n-        windowChanges.height = geometry_get_content_height(&geometry);\n-        windowChangesMask |= CWHeight;\n-    } else if (ch > 0) {\n-        geometry.final_height.value = ch;\n-        geometry.final_height.type = BOUNDSTYPE_CONTENT;\n-        geometry.current_height = geometry_get_window_height(&geometry);\n-        windowChanges.height = geometry_get_content_height(&geometry);\n-        windowChangesMask |= CWHeight;\n-    }\n+    int adjust_h = geometry.extents.top + geometry.extents.bottom;\n+    int adjust_w = geometry.extents.left + geometry.extents.right;\n@@ -1223,4 +1046,5 @@\n-    if (xSet || ySet) {\n-        if (xSet) {\n-            geometry.refx = x + geometry.current_width * geometry.gravity_x;\n-        }\n+    if ((!geometry.resizable || !geometry.enabled) && !(is_maximized || is_fullscreen)) {\n+        \/\/ not resizeable\n+        int w = geometry.current_cw > 0\n+                ? geometry.current_cw\n+                : geometry.current_w - adjust_w;\n@@ -1228,2 +1052,3 @@\n-        windowChanges.x = geometry_get_window_x(&geometry);\n-        windowChangesMask |= CWX;\n+        int h = geometry.current_ch > 0\n+                ? geometry.current_ch\n+                : geometry.current_h - adjust_h;\n@@ -1231,6 +1056,8 @@\n-        if (ySet) {\n-            geometry.refy = y + geometry.current_height * geometry.gravity_y;\n-        }\n-\n-        windowChanges.y = geometry_get_window_y(&geometry);\n-        windowChangesMask |= CWY;\n+        gdk_geometry.min_width = gdk_geometry.max_width = w;\n+        gdk_geometry.min_height = gdk_geometry.max_height = h;\n+    } else {\n+        \/\/ min\/max width\/height always whole window size (with decors)\n+        gdk_geometry.min_width = (geometry.minw - adjust_w) > 0\n+                                 ? geometry.minw - adjust_w : 1;\n+        gdk_geometry.min_height = (geometry.minh - adjust_h) > 0\n+                                  ? geometry.minh - adjust_h : 1;\n@@ -1238,1 +1065,4 @@\n-        location_assigned = true;\n+        gdk_geometry.max_width = (geometry.maxw - adjust_w > 0)\n+                                 ? geometry.maxw - adjust_w : G_MAXINT;\n+        gdk_geometry.max_height = (geometry.maxh - adjust_h > 0)\n+                                  ? geometry.maxh - adjust_h : G_MAXINT;\n@@ -1241,4 +1071,2 @@\n-    if (w > 0 || h > 0 || cw > 0 || ch > 0) size_assigned = true;\n-\n-    window_configure(&windowChanges, windowChangesMask);\n-\n+    gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &gdk_geometry,\n+                                  (GdkWindowHints)(GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE));\n@@ -1247,3 +1075,6 @@\n-void WindowContextTop::process_map() {\n-    map_received = true;\n-}\n+void WindowContextTop::size_position_notify(bool size_changed, bool pos_changed) {\n+   if (jview) {\n+       if (size_changed) {\n+           mainEnv->CallVoidMethod(jview, jViewNotifyResize, geometry.current_cw, geometry.current_ch);\n+           CHECK_JNI_EXCEPTION(mainEnv);\n+       }\n@@ -1251,5 +1082,5 @@\n-void WindowContextTop::window_configure(XWindowChanges *windowChanges,\n-        unsigned int windowChangesMask) {\n-    if (windowChangesMask == 0) {\n-        return;\n-    }\n+       if (pos_changed) {\n+           mainEnv->CallVoidMethod(jview, jViewNotifyView, com_sun_glass_events_ViewEvent_MOVE);\n+           CHECK_JNI_EXCEPTION(mainEnv)\n+       }\n+   }\n@@ -1257,3 +1088,9 @@\n-    if (windowChangesMask & (CWX | CWY)) {\n-        gint newX, newY;\n-        gtk_window_get_position(GTK_WINDOW(gtk_widget), &newX, &newY);\n+   if (jwindow) {\n+        if (size_changed || is_maximized) {\n+            mainEnv->CallVoidMethod(jwindow, jWindowNotifyResize,\n+                                    (is_maximized)\n+                                    ? com_sun_glass_events_WindowEvent_MAXIMIZE\n+                                    : com_sun_glass_events_WindowEvent_RESIZE,\n+                                    geometry.current_w, geometry.current_h);\n+            CHECK_JNI_EXCEPTION(mainEnv)\n+        }\n@@ -1261,2 +1098,3 @@\n-        if (windowChangesMask & CWX) {\n-            newX = windowChanges->x;\n+        if (pos_changed) {\n+            mainEnv->CallVoidMethod(jwindow, jWindowNotifyMove, geometry.current_x, geometry.current_y);\n+            CHECK_JNI_EXCEPTION(mainEnv)\n@@ -1264,2 +1102,31 @@\n-        if (windowChangesMask & CWY) {\n-            newY = windowChanges->y;\n+    }\n+}\n+\n+void WindowContextTop::set_bounds(int x, int y, bool xSet, bool ySet, int w, int h, int cw, int ch) {\n+    \/\/ This will tell if frame_extents is needed to correct the window size accounting it frame (decorations)\n+    geometry.needs_frame_extents = TITLED == frame_type\n+                                && geometry.frame_extents_supported\n+                                && !geometry.frame_extents_received;\n+\n+    \/\/ newW \/ newH always content sizes compatible with GTK+ (content size means \"do not account window frame\")\n+    int newW = (w > 0) ? w - (geometry.extents.left + geometry.extents.right) : cw;\n+    int newH = (h > 0) ? h - (geometry.extents.top + geometry.extents.bottom) : ch;\n+\n+    bool size_changed = false;\n+    bool pos_changed = false;\n+\n+    if (newW > 0 && newH > 0) {\n+        geometry.content_size = (cw > 0 || ch > 0);\n+        geometry.current_w = newW + (geometry.extents.left + geometry.extents.right);\n+        geometry.current_h = newH + (geometry.extents.top + geometry.extents.bottom);\n+        geometry.current_cw = newW;\n+        geometry.current_ch = newH;\n+        geometry.last_cw = newW;\n+        geometry.last_ch = newH;\n+\n+        if (visible_received) {\n+            \/\/ call apply_geometry() to let gtk_window_resize succeed, because it's bound to geometry constraints\n+            apply_geometry();\n+            gtk_window_resize(GTK_WINDOW(gtk_widget), newW, newH);\n+        } else {\n+            gtk_window_set_default_size(GTK_WINDOW(gtk_widget), newW, newH);\n@@ -1267,1 +1134,3 @@\n-        gtk_window_move(GTK_WINDOW(gtk_widget), newX, newY);\n+\n+        size_changed = true;\n+        geometry.size_assigned = true;\n@@ -1270,3 +1139,3 @@\n-    if (windowChangesMask & (CWWidth | CWHeight)) {\n-        gint newWidth, newHeight;\n-        gtk_window_get_size(GTK_WINDOW(gtk_widget), &newWidth, &newHeight);\n+    if (xSet || ySet) {\n+        int newX = (xSet) ? x : geometry.current_x;\n+        int newY = (ySet) ? y : geometry.current_y;\n@@ -1274,6 +1143,2 @@\n-        if (windowChangesMask & CWWidth) {\n-            newWidth = windowChanges->width;\n-        }\n-        if (windowChangesMask & CWHeight) {\n-            newHeight = windowChanges->height;\n-        }\n+        geometry.current_x = newX;\n+        geometry.current_y = newY;\n@@ -1281,8 +1146,1 @@\n-        if (!resizable.value) {\n-            GdkGeometry geom;\n-            GdkWindowHints hints = (GdkWindowHints)(GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE);\n-            geom.min_width = geom.max_width = newWidth;\n-            geom.min_height = geom.max_height = newHeight;\n-            gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &geom, hints);\n-        }\n-        gtk_window_resize(GTK_WINDOW(gtk_widget), newWidth, newHeight);\n+        gtk_window_move(GTK_WINDOW(gtk_widget), newX, newY);\n@@ -1290,7 +1148,5 @@\n-        \/\/JDK-8193502: Moved here from WindowContextBase::set_view because set_view is called\n-        \/\/first and the size is not set yet. This also guarantees that the size will be correct\n-        \/\/see: gtk_window_get_size doc for more context.\n-        if (jview) {\n-            mainEnv->CallVoidMethod(jview, jViewNotifyResize, newWidth, newHeight);\n-            CHECK_JNI_EXCEPTION(mainEnv);\n-        }\n+        pos_changed = true;\n+    }\n+\n+    if (size_changed || pos_changed) {\n+        size_position_notify(size_changed, pos_changed);\n@@ -1300,0 +1156,5 @@\n+void WindowContextTop::process_map() {\n+    map_received = true;\n+    apply_geometry();\n+}\n+\n@@ -1309,0 +1170,1 @@\n+\/\/ this is to work-around past gtk+ bug\n@@ -1316,5 +1178,3 @@\n-    if (size_assigned && (geometry.final_width.value != w\n-                       || geometry.final_height.value != h)) {\n-\n-        gdk_window_resize(gdk_window, geometry.final_width.value,\n-                                      geometry.final_height.value);\n+    if ((geometry.last_cw > 0 && geometry.last_ch > 0)\n+        && (geometry.last_cw != w || geometry.last_ch != h)) {\n+        gdk_window_resize(gdk_window, geometry.last_cw, geometry.last_ch);\n@@ -1360,0 +1220,2 @@\n+    is_fullscreen = TRUE;\n+\n@@ -1390,12 +1252,4 @@\n-    if (enabled) {\n-        if (resizable.prev) {\n-            set_window_resizable(true);\n-        }\n-    } else {\n-        if (resizable.value) {\n-            set_window_resizable(false);\n-            resizable.prev = true;\n-        } else if (resizable.request == REQUEST_RESIZABLE) {\n-            resizable.request = REQUEST_NOT_RESIZABLE;\n-            resizable.prev = true;\n-        }\n+    if (enabled != geometry.enabled) {\n+        gtk_widget_set_sensitive(gtk_widget, enabled);\n+        geometry.enabled = enabled;\n+        apply_geometry();\n@@ -1406,3 +1260,10 @@\n-    resizable.minw = w;\n-    resizable.minh = h;\n-    update_window_constraints();\n+    bool changed = geometry.minw != w || geometry.minh != h;\n+\n+    if (!changed) {\n+        return;\n+    }\n+\n+    geometry.minw = w;\n+    geometry.minh = h;\n+\n+    apply_geometry();\n@@ -1412,3 +1273,10 @@\n-    resizable.maxw = w;\n-    resizable.maxh = h;\n-    update_window_constraints();\n+    bool changed = geometry.maxw != w || geometry.maxh != h;\n+\n+    if (!changed) {\n+        return;\n+    }\n+\n+    geometry.maxw = w;\n+    geometry.maxh = h;\n+\n+    apply_geometry();\n@@ -1439,2 +1307,2 @@\n-WindowFrameExtents WindowContextTop::get_frame_extents() {\n-    return geometry.extents;\n+WindowGeometry WindowContextTop::get_geometry() {\n+    return geometry;\n@@ -1444,6 +1312,2 @@\n-    int oldX = geometry_get_window_x(&geometry);\n-    int oldY = geometry_get_window_y(&geometry);\n-    geometry.gravity_x = x;\n-    geometry.gravity_y = y;\n-    geometry_set_window_x(&geometry, oldX);\n-    geometry_set_window_y(&geometry, oldY);\n+    \/\/this is not needed because window size is always set, so the java side takes care of centering\n+    \/\/the window on screen and sending set_bounds\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.cpp","additions":235,"deletions":371,"binary":false,"changes":606,"status":"modified"},{"patch":"@@ -56,0 +56,5 @@\n+    WindowFrameExtents() : top(0),\n+                           left(0),\n+                           bottom(0),\n+                           right(0) {}\n+\n@@ -64,4 +69,0 @@\n-enum BoundsType {\n-    BOUNDSTYPE_CONTENT,\n-    BOUNDSTYPE_WINDOW\n-};\n@@ -70,27 +71,30 @@\n-    WindowGeometry(): final_width(), final_height(),\n-    refx(), refy(), gravity_x(), gravity_y(), current_width(), current_height(), extents() {}\n-    \/\/ estimate of the final width the window will get after all pending\n-    \/\/ configure requests are processed by the window manager\n-    struct {\n-        int value;\n-        BoundsType type;\n-    } final_width;\n-\n-    struct {\n-        int value;\n-        BoundsType type;\n-    } final_height;\n-\n-    float refx;\n-    float refy;\n-    float gravity_x;\n-    float gravity_y;\n-\n-    \/\/ the last width which was configured or obtained from configure\n-    \/\/ notification\n-    int current_width;\n-\n-    \/\/ the last height which was configured or obtained from configure\n-    \/\/ notification\n-    int current_height;\n-\n+    WindowGeometry() : current_x(0),\n+                       current_y(0),\n+                       current_w(0),\n+                       current_h(0),\n+                       current_cw(0),\n+                       current_ch(0),\n+                       last_cw(0),\n+                       last_ch(0),\n+                       frame_extents_supported(false),\n+                       frame_extents_received(false),\n+                       enabled(true),\n+                       resizable(true),\n+                       minw(-1),\n+                       minh(-1),\n+                       maxw(-1),\n+                       maxh(-1),\n+                       needs_frame_extents(false),\n+                       content_size(true),\n+                       size_assigned(false) {}\n+\n+    int current_x; \/\/ current position X\n+    int current_y; \/\/ current position Y\n+    int current_w; \/\/ current window width, adjusted (see adjust_w)\n+    int current_h; \/\/ current window height, adjusted (see adjust_h)\n+    int current_cw; \/\/ current content (view) width\n+    int current_ch; \/\/ current content (view) height\n+    int last_cw; \/\/ not subjected to fullscreen \/ maximize\n+    int last_ch;\n+\n+    \/\/ Window decoration sizes\n@@ -99,0 +103,22 @@\n+    \/\/ If _NET_REQUEST_FRAME_EXTENTS is supported by the window manager\n+    bool frame_extents_supported;\n+\n+    \/\/ If _NET_REQUEST_FRAME_EXTENTS was received\n+    bool frame_extents_received;\n+\n+    bool enabled;\n+    bool resizable;\n+\n+    int minw;\n+    int minh;\n+\n+    int maxw;\n+    int maxh;\n+\n+    \/\/ Frame extents are the window frame (decorations)\n+    bool needs_frame_extents;\n+\n+    \/\/ If size is by content or window size\n+    bool content_size;\n+\n+    bool size_assigned;\n@@ -112,1 +138,1 @@\n-    virtual WindowFrameExtents get_frame_extents() = 0;\n+    virtual WindowGeometry get_geometry() = 0;\n@@ -171,1 +197,0 @@\n-\n@@ -279,2 +304,1 @@\n-    \/\/WindowFrameExtents get_frame_extents() { return WindowFrameExtents{0, 0, 0, 0}; };\n-    WindowFrameExtents get_frame_extents() { WindowFrameExtents ext = {0, 0, 0, 0}; return ext;}\n+    WindowGeometry get_geometry() { return WindowGeometry(); }\n@@ -326,2 +350,1 @@\n-    \/\/WindowFrameExtents get_frame_extents() { return WindowFrameExtents{0, 0, 0, 0}; };\n-    WindowFrameExtents get_frame_extents() { WindowFrameExtents ext = {0, 0, 0, 0}; return ext;}\n+    WindowGeometry get_geometry() { return WindowGeometry(); }\n@@ -371,10 +394,0 @@\n-    struct _Resizable{\/\/ we can't use set\/get gtk_window_resizable function\n-        _Resizable(): request(REQUEST_NONE), value(true), prev(false),\n-                minw(-1), minh(-1), maxw(-1), maxh(-1){}\n-        request_type request; \/\/request for future setResizable\n-        bool value; \/\/actual value of resizable for a window\n-        bool prev; \/\/former resizable value (used in setEnabled for parents of modal window)\n-        int minw, minh, maxw, maxh; \/\/minimum and maximum window width\/height;\n-    } resizable;\n-\n-    bool frame_extents_initialized;\n@@ -382,2 +395,1 @@\n-    bool location_assigned;\n-    bool size_assigned;\n+    bool visible_received;\n@@ -385,11 +397,2 @@\n-\n-    struct _Size {\n-        int width, height;\n-        int client_width, client_height;\n-    } requested_bounds;\n-\n-    bool is_null_extents() { return is_null_extents(geometry.extents); }\n-\n-    bool is_null_extents(WindowFrameExtents ex) {\n-        return !ex.top && !ex.left && !ex.bottom && !ex.right;\n-    }\n+    bool is_maximized;\n+    bool is_fullscreen;\n@@ -407,1 +410,1 @@\n-    WindowFrameExtents get_frame_extents();\n+    WindowGeometry get_geometry();\n@@ -438,0 +441,2 @@\n+    void size_position_notify(bool, bool);\n+    void apply_geometry();\n@@ -441,1 +446,0 @@\n-    bool update_frame_extents();\n@@ -444,3 +448,0 @@\n-    void window_configure(XWindowChanges *, unsigned int);\n-    void update_window_constraints();\n-    void set_window_resizable(bool);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.h","additions":66,"deletions":65,"binary":false,"changes":131,"status":"modified"}]}