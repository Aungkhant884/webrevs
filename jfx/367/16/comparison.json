{"files":[{"patch":"@@ -203,12 +203,0 @@\n-\n-        if ((w <= 0) && (cw > 0) || (h <= 0) && (ch > 0)) {\n-            final int[] extarr = new int[4];\n-            getFrameExtents(ptr, extarr);\n-\n-            \/\/ TODO: ((w <= 0) && (cw <= 0)) || ((h <= 0) && (ch <= 0))\n-            notifyResize(WindowEvent.RESIZE,\n-                         ((w <= 0) && (cw > 0)) ? cw + extarr[0] + extarr[1]\n-                                                : w,\n-                         ((h <= 0) && (ch > 0)) ? ch + extarr[2] + extarr[3]\n-                                                : h);\n-        }\n@@ -217,2 +205,0 @@\n-    private native void getFrameExtents(long ptr, int[] extarr);\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkWindow.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-        return view->current_window->get_frame_extents().left;\n+        return view->current_window->get_geometry().view_x;\n@@ -123,1 +123,1 @@\n-        return view->current_window->get_frame_extents().top;\n+        return view->current_window->get_geometry().view_y;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassView.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -602,8 +602,0 @@\n-\n-    WindowContext* ctx = JLONG_TO_WINDOW_CTX(ptr);\n-    WindowFrameExtents extents = ctx->get_frame_extents();\n-\n-    env->SetIntArrayRegion(extarr, 0, 1, &extents.left);\n-    env->SetIntArrayRegion(extarr, 1, 1, &extents.right);\n-    env->SetIntArrayRegion(extarr, 2, 1, &extents.top);\n-    env->SetIntArrayRegion(extarr, 3, 1, &extents.bottom);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassWindow.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-    if (jview) {\n+    if (jview && is_visible()) {\n@@ -518,3 +518,0 @@\n-    if (!is_visible()) {\n-        return;\n-    }\n@@ -704,2 +701,0 @@\n-WindowFrameExtents WindowContextTop::normal_extents = {28, 1, 1, 1};\n-WindowFrameExtents WindowContextTop::utility_extents = {28, 1, 1, 1};\n@@ -707,0 +702,5 @@\n+static GdkAtom\n+get_net_frame_extents_atom() {\n+    static const char * extents_str = \"_NET_FRAME_EXTENTS\";\n+    return gdk_atom_intern(extents_str, TRUE);\n+}\n@@ -716,2 +716,0 @@\n-            resizable(),\n-            frame_extents_initialized(),\n@@ -719,2 +717,1 @@\n-            location_assigned(false),\n-            size_assigned(false),\n+            visible_received(false),\n@@ -722,1 +719,2 @@\n-            requested_bounds()\n+            is_maximized(false),\n+            is_fullscreen(false)\n@@ -744,2 +742,0 @@\n-\/\/    glong xdisplay = (glong)mainEnv->GetStaticLongField(jApplicationCls, jApplicationDisplay);\n-\/\/    gint  xscreenID = (gint)mainEnv->GetStaticIntField(jApplicationCls, jApplicationScreen);\n@@ -753,1 +749,0 @@\n-    gtk_widget_set_size_request(gtk_widget, 0, 0);\n@@ -774,1 +769,4 @@\n-    if (frame_type == TITLED) {\n+    geometry.frame_extents_supported = gdk_x11_screen_supports_net_wm_hint(gdk_screen_get_default(),\n+                                                                  get_net_frame_extents_atom());\n+\n+    if (TITLED == frame_type && geometry.frame_extents_supported) {\n@@ -791,6 +789,0 @@\n-static GdkAtom\n-get_net_frame_extents_atom() {\n-    static const char * extents_str = \"_NET_FRAME_EXTENTS\";\n-    return gdk_atom_intern(extents_str, TRUE);\n-}\n-\n@@ -839,34 +831,0 @@\n-void WindowContextTop::set_cached_extents(WindowFrameExtents ex) {\n-    if (window_type == NORMAL) {\n-        normal_extents = ex;\n-    } else {\n-        utility_extents = ex;\n-    }\n-}\n-\n-WindowFrameExtents WindowContextTop::get_cached_extents() {\n-    return window_type == NORMAL ? normal_extents : utility_extents;\n-}\n-\n-\n-bool WindowContextTop::update_frame_extents() {\n-    bool changed = false;\n-    int top, left, bottom, right;\n-    if (get_frame_extents_property(&top, &left, &bottom, &right)) {\n-        changed = geometry.extents.top != top\n-                    || geometry.extents.left != left\n-                    || geometry.extents.bottom != bottom\n-                    || geometry.extents.right != right;\n-        if (changed) {\n-            geometry.extents.top = top;\n-            geometry.extents.left = left;\n-            geometry.extents.bottom = bottom;\n-            geometry.extents.right = right;\n-            if (!is_null_extents()) {\n-                set_cached_extents(geometry.extents);\n-            }\n-        }\n-    }\n-    return changed;\n-}\n-\n@@ -900,67 +858,0 @@\n-static int geometry_get_window_width(const WindowGeometry *windowGeometry) {\n-     return (windowGeometry->final_width.type != BOUNDSTYPE_WINDOW)\n-                   ? windowGeometry->final_width.value\n-                         + windowGeometry->extents.left\n-                         + windowGeometry->extents.right\n-                   : windowGeometry->final_width.value;\n-}\n-\n-static int geometry_get_window_height(const WindowGeometry *windowGeometry) {\n-    return (windowGeometry->final_height.type != BOUNDSTYPE_WINDOW)\n-                   ? windowGeometry->final_height.value\n-                         + windowGeometry->extents.top\n-                         + windowGeometry->extents.bottom\n-                   : windowGeometry->final_height.value;\n-}\n-\n-static int geometry_get_content_width(WindowGeometry *windowGeometry) {\n-    return (windowGeometry->final_width.type != BOUNDSTYPE_CONTENT)\n-                   ? windowGeometry->final_width.value\n-                         - windowGeometry->extents.left\n-                         - windowGeometry->extents.right\n-                   : windowGeometry->final_width.value;\n-}\n-static int geometry_get_content_height(WindowGeometry *windowGeometry) {\n-    return (windowGeometry->final_height.type != BOUNDSTYPE_CONTENT)\n-                   ? windowGeometry->final_height.value\n-                         - windowGeometry->extents.top\n-                         - windowGeometry->extents.bottom\n-                   : windowGeometry->final_height.value;\n-}\n-\n-static int geometry_get_window_x(const WindowGeometry *windowGeometry) {\n-    float value = windowGeometry->refx;\n-    if (windowGeometry->gravity_x != 0) {\n-        value -= geometry_get_window_width(windowGeometry)\n-                     * windowGeometry->gravity_x;\n-    }\n-    return (int) value;\n-}\n-\n-static int geometry_get_window_y(const WindowGeometry *windowGeometry) {\n-    float value = windowGeometry->refy;\n-    if (windowGeometry->gravity_y != 0) {\n-        value -= geometry_get_window_height(windowGeometry)\n-                     * windowGeometry->gravity_y;\n-    }\n-    return (int) value;\n-}\n-\n-static void geometry_set_window_x(WindowGeometry *windowGeometry, int value) {\n-    float newValue = value;\n-    if (windowGeometry->gravity_x != 0) {\n-        newValue += geometry_get_window_width(windowGeometry)\n-                * windowGeometry->gravity_x;\n-    }\n-    windowGeometry->refx = newValue;\n-}\n-\n-static void geometry_set_window_y(WindowGeometry *windowGeometry, int value) {\n-    float newValue = value;\n-    if (windowGeometry->gravity_y != 0) {\n-        newValue += geometry_get_window_height(windowGeometry)\n-                * windowGeometry->gravity_y;\n-    }\n-    windowGeometry->refy = newValue;\n-}\n-\n@@ -970,0 +861,5 @@\n+    \/\/ This is a Unity bug (which is not Ubuntu default anymore)\n+    if (!g_strcmp0(\"Unity\", gdk_x11_screen_get_window_manager_name(gdk_screen_get_default()))) {\n+        return;\n+    }\n+\n@@ -1009,2 +905,28 @@\n-    if (event->atom == atom_net_wm_state && event->window == gdk_window) {\n-        process_net_wm_property();\n+    if (event->window == gdk_window) {\n+        \/\/ This work-around is only necessary for Unity\n+        if (event->atom == atom_net_wm_state) {\n+            process_net_wm_property();\n+        } else if (event->atom == get_net_frame_extents_atom()) {\n+            if (frame_type != TITLED) {\n+                return;\n+            }\n+\n+            int top, left, bottom, right;\n+\n+            if (get_frame_extents_property(&top, &left, &bottom, &right)) {\n+                if (top + left + bottom + right > 0) {\n+                    geometry.frame_extents_received = true;\n+                    geometry.adjust_w = left + right;\n+                    geometry.adjust_h = top + bottom;\n+                    geometry.view_x = left;\n+                    geometry.view_y = top;\n+\n+                    \/\/ set bounds again to set to correct window size that must\n+                    \/\/ be the total width and height accounting extents\n+                    \/\/ this is ignored if size is \"content size\" instead of \"window size\"\n+                    if (geometry.needs_ajustment) {\n+                        set_bounds(0, 0, false, false, geometry.current_w, geometry.current_h, -1, -1);\n+                    }\n+                }\n+            }\n+        }\n@@ -1015,5 +937,1 @@\n-    gint x, y, w, h;\n-    bool updateWindowConstraints = false;\n-    if (gtk_window_get_decorated(GTK_WINDOW(gtk_widget))) {\n-        GdkRectangle frame;\n-        gint top, left, bottom, right;\n+    gint x, y, w, h, cw, ch;\n@@ -1021,27 +939,3 @@\n-        gdk_window_get_frame_extents(gdk_window, &frame);\n-#ifdef GLASS_GTK3\n-        gdk_window_get_geometry(gdk_window, NULL, NULL, &w, &h);\n-#else\n-        gdk_window_get_geometry(gdk_window, NULL, NULL, &w, &h, NULL);\n-#endif\n-        x = frame.x;\n-        y = frame.y;\n-        geometry.current_width = frame.width;\n-        geometry.current_height = frame.height;\n-\n-        if (update_frame_extents()) {\n-            updateWindowConstraints = true;\n-            if (!frame_extents_initialized && !is_null_extents()) {\n-                frame_extents_initialized = true;\n-                set_bounds(0, 0, false, false,\n-                    requested_bounds.width, requested_bounds.height,\n-                    requested_bounds.client_width, requested_bounds.client_height\n-                );\n-            }\n-        }\n-    } else {\n-        x = event->x;\n-        y = event->y;\n-        w = event->width;\n-        h = event->height;\n-    }\n+    \/\/content width \/ height\n+    cw = event->width;\n+    ch = event->height;\n@@ -1049,5 +943,2 @@\n-    if (size_assigned && w <= 1 && h <= 1 && (geometry.final_width.value > 1 ||\n-                                             geometry.final_height.value > 1)) {\n-        \/\/ skip artifact\n-        return;\n-   }\n+    w = cw + geometry.adjust_w;\n+    h = ch + geometry.adjust_h;\n@@ -1055,7 +946,1 @@\n-    \/\/ JDK-8232811: to avoid conflicting events, update the geometry only after window pops.\n-    if (map_received) {\n-        geometry.final_width.value = w;\n-        geometry.final_width.type = BOUNDSTYPE_CONTENT;\n-        geometry.final_height.value = h;\n-        geometry.final_height.type = BOUNDSTYPE_CONTENT;\n-    }\n+    gtk_window_get_position(GTK_WINDOW(gtk_widget), &x, &y);\n@@ -1063,2 +948,3 @@\n-    geometry_set_window_x(&geometry, x);\n-    geometry_set_window_y(&geometry, y);\n+    bool pos_changed = geometry.current_x != x || geometry.current_y != y;\n+    bool window_size_changed = geometry.current_w != w || geometry.current_h != h;\n+    bool content_size_changed = geometry.current_cw != cw || geometry.current_ch != ch;\n@@ -1066,8 +952,3 @@\n-    if (jview) {\n-        mainEnv->CallVoidMethod(jview, jViewNotifyResize,\n-                event->width,\n-                event->height);\n-        CHECK_JNI_EXCEPTION(mainEnv)\n-        mainEnv->CallVoidMethod(jview, jViewNotifyView,\n-                com_sun_glass_events_ViewEvent_MOVE);\n-        CHECK_JNI_EXCEPTION(mainEnv)\n+    \/\/ingore until frame extents are ok (it will trigger a new set_bounds)\n+    if (TITLED == frame_type && geometry.frame_extents_supported && !geometry.frame_extents_received) {\n+        window_size_changed = false;\n@@ -1075,8 +956,0 @@\n-    if (jwindow) {\n-        mainEnv->CallVoidMethod(jwindow, jWindowNotifyResize,\n-                (is_maximized)\n-                    ? com_sun_glass_events_WindowEvent_MAXIMIZE\n-                    : com_sun_glass_events_WindowEvent_RESIZE,\n-                geometry.current_width,\n-                geometry.current_height);\n-        CHECK_JNI_EXCEPTION(mainEnv)\n@@ -1084,3 +957,6 @@\n-        mainEnv->CallVoidMethod(jwindow, jWindowNotifyMove, x, y);\n-        CHECK_JNI_EXCEPTION(mainEnv)\n-    }\n+    geometry.current_x = x;\n+    geometry.current_y = y;\n+    geometry.current_w = w;\n+    geometry.current_h = h;\n+    geometry.current_cw = cw;\n+    geometry.current_ch = ch;\n@@ -1088,11 +964,3 @@\n-    glong to_screen = getScreenPtrForLocation(x, y);\n-    if (to_screen != -1) {\n-        if (to_screen != screen) {\n-            if (jwindow) {\n-                \/\/notify screen changed\n-                jobject jScreen = createJavaScreen(mainEnv, to_screen);\n-                mainEnv->CallVoidMethod(jwindow, jWindowNotifyMoveToAnotherScreen, jScreen);\n-                CHECK_JNI_EXCEPTION(mainEnv)\n-            }\n-            screen = to_screen;\n-        }\n+    if (!is_fullscreen && !is_maximized) {\n+        geometry.last_cw = cw;\n+        geometry.last_ch = ch;\n@@ -1101,43 +969,1 @@\n-    if (resizable.request != REQUEST_NONE) {\n-        set_window_resizable(resizable.request == REQUEST_RESIZABLE);\n-        resizable.request = REQUEST_NONE;\n-    } else if (!resizable.value) {\n-        set_window_resizable(false);\n-    } else if (updateWindowConstraints) {\n-        update_window_constraints();\n-    }\n-}\n-\n-void WindowContextTop::update_window_constraints() {\n-    if (resizable.value) {\n-        GdkGeometry geom = {\n-            (resizable.minw == -1) ? 1\n-                    : resizable.minw - geometry.extents.left - geometry.extents.right,\n-            (resizable.minh == -1) ? 1\n-                    : resizable.minh - geometry.extents.top - geometry.extents.bottom,\n-            (resizable.maxw == -1) ? 100000\n-                    : resizable.maxw - geometry.extents.left - geometry.extents.right,\n-            (resizable.maxh == -1) ? 100000\n-                    : resizable.maxh - geometry.extents.top - geometry.extents.bottom,\n-            0, 0, 0, 0, 0.0, 0.0, GDK_GRAVITY_NORTH_WEST\n-        };\n-        gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &geom,\n-                static_cast<GdkWindowHints> (GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE));\n-    }\n-}\n-\n-void WindowContextTop::set_window_resizable(bool res) {\n-    if(!res) {\n-        int w = geometry_get_content_width(&geometry);\n-        int h = geometry_get_content_height(&geometry);\n-        if (w == -1 && h == -1) {\n-            gtk_window_get_size(GTK_WINDOW(gtk_widget), &w, &h);\n-        }\n-        GdkGeometry geom = {w, h, w, h, 0, 0, 0, 0, 0.0, 0.0, GDK_GRAVITY_NORTH_WEST};\n-        gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &geom,\n-                static_cast<GdkWindowHints>(GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE));\n-        resizable.value = false;\n-    } else {\n-        resizable.value = true;\n-        update_window_constraints();\n-    }\n+    size_position_notify(window_size_changed, content_size_changed, pos_changed);\n@@ -1147,8 +973,3 @@\n-    resizable.prev = false;\n-    gint w, h;\n-    gtk_window_get_size(GTK_WINDOW(gtk_widget), &w, &h);\n-    if (map_received || w > 1 || h > 1) {\n-        set_window_resizable(res);\n-    } else {\n-        \/\/Since window is not ready yet set only request for change of resizable.\n-        resizable.request  = res ? REQUEST_RESIZABLE : REQUEST_NOT_RESIZABLE;\n+    if (res != geometry.resizable) {\n+        geometry.resizable = res;\n+        apply_geometry();\n@@ -1158,2 +979,3 @@\n-void WindowContextTop::set_visible(bool visible)\n-{\n+void WindowContextTop::set_visible(bool visible) {\n+    WindowContextBase::set_visible(visible);\n+\n@@ -1161,1 +983,3 @@\n-        if (!size_assigned) {\n+        visible_received = true;\n+\n+        if (!geometry.size_assigned) {\n@@ -1164,3 +988,0 @@\n-        if (!location_assigned) {\n-            set_bounds(0, 0, true, true, -1, -1, -1, -1);\n-        }\n@@ -1168,1 +989,1 @@\n-    WindowContextBase::set_visible(visible);\n+\n@@ -1176,16 +997,9 @@\n-void WindowContextTop::set_bounds(int x, int y, bool xSet, bool ySet, int w, int h, int cw, int ch) {\n-    requested_bounds.width = w;\n-    requested_bounds.height = h;\n-    requested_bounds.client_width = cw;\n-    requested_bounds.client_height = ch;\n-\n-    if (!frame_extents_initialized && frame_type == TITLED) {\n-        update_frame_extents();\n-        if (is_null_extents()) {\n-            if (!is_null_extents(get_cached_extents())) {\n-                geometry.extents = get_cached_extents();\n-            }\n-        } else {\n-            frame_extents_initialized = true;\n-        }\n-    }\n+void WindowContextTop::apply_geometry() {\n+    GdkGeometry gdk_geometry;\n+    gdk_geometry.win_gravity = GDK_GRAVITY_NORTH_WEST;\n+\n+    if ((!geometry.resizable || !geometry.enabled) && !(is_maximized || is_fullscreen)) {\n+        \/\/ not resizeable\n+        int w = geometry.current_cw > 0\n+                ? geometry.current_cw\n+                : geometry.current_w - geometry.adjust_w;\n@@ -1193,28 +1007,17 @@\n-    XWindowChanges windowChanges;\n-    unsigned int windowChangesMask = 0;\n-    if (w > 0) {\n-        geometry.final_width.value = w;\n-        geometry.final_width.type = BOUNDSTYPE_WINDOW;\n-        geometry.current_width = geometry_get_window_width(&geometry);\n-        windowChanges.width = geometry_get_content_width(&geometry);\n-        windowChangesMask |= CWWidth;\n-    } else if (cw > 0) {\n-        geometry.final_width.value = cw;\n-        geometry.final_width.type = BOUNDSTYPE_CONTENT;\n-        geometry.current_width = geometry_get_window_width(&geometry);\n-        windowChanges.width = geometry_get_content_width(&geometry);\n-        windowChangesMask |= CWWidth;\n-    }\n-\n-    if (h > 0) {\n-        geometry.final_height.value = h;\n-        geometry.final_height.type = BOUNDSTYPE_WINDOW;\n-        geometry.current_height = geometry_get_window_height(&geometry);\n-        windowChanges.height = geometry_get_content_height(&geometry);\n-        windowChangesMask |= CWHeight;\n-    } else if (ch > 0) {\n-        geometry.final_height.value = ch;\n-        geometry.final_height.type = BOUNDSTYPE_CONTENT;\n-        geometry.current_height = geometry_get_window_height(&geometry);\n-        windowChanges.height = geometry_get_content_height(&geometry);\n-        windowChangesMask |= CWHeight;\n+        int h = geometry.current_ch > 0\n+                ? geometry.current_ch\n+                : geometry.current_h - geometry.adjust_h;\n+\n+        gdk_geometry.min_width = gdk_geometry.max_width = w;\n+        gdk_geometry.min_height = gdk_geometry.max_height = h;\n+    } else {\n+        \/\/min\/max width\/height always whole window size (with decors)\n+        gdk_geometry.min_width = (geometry.minw - geometry.adjust_w) > 0\n+                                 ? geometry.minw - geometry.adjust_w : 1;\n+        gdk_geometry.min_height = (geometry.minh - geometry.adjust_h) > 0\n+                                  ? geometry.minh - geometry.adjust_h : 1;\n+\n+        gdk_geometry.max_width = (geometry.maxw - geometry.adjust_w > 0)\n+                                 ? geometry.maxw - geometry.adjust_w : G_MAXINT;\n+        gdk_geometry.max_height = (geometry.maxh - geometry.adjust_h > 0)\n+                                  ? geometry.maxh - geometry.adjust_h : G_MAXINT;\n@@ -1223,4 +1026,3 @@\n-    if (xSet || ySet) {\n-        if (xSet) {\n-            geometry.refx = x + geometry.current_width * geometry.gravity_x;\n-        }\n+    gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &gdk_geometry,\n+                                  (GdkWindowHints)(GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE | GDK_HINT_WIN_GRAVITY));\n+}\n@@ -1228,2 +1030,6 @@\n-        windowChanges.x = geometry_get_window_x(&geometry);\n-        windowChangesMask |= CWX;\n+void WindowContextTop::size_position_notify(bool window_size_changed, bool content_size_changed, bool pos_changed) {\n+    if (jview) {\n+        if (content_size_changed) {\n+            mainEnv->CallVoidMethod(jview, jViewNotifyResize, geometry.current_cw, geometry.current_ch);\n+            CHECK_JNI_EXCEPTION(mainEnv);\n+        }\n@@ -1231,2 +1037,3 @@\n-        if (ySet) {\n-            geometry.refy = y + geometry.current_height * geometry.gravity_y;\n+        if (pos_changed) {\n+            mainEnv->CallVoidMethod(jview, jViewNotifyView, com_sun_glass_events_ViewEvent_MOVE);\n+            CHECK_JNI_EXCEPTION(mainEnv)\n@@ -1234,0 +1041,1 @@\n+    }\n@@ -1235,2 +1043,9 @@\n-        windowChanges.y = geometry_get_window_y(&geometry);\n-        windowChangesMask |= CWY;\n+    if (jwindow) {\n+        if (window_size_changed || is_maximized) {\n+            mainEnv->CallVoidMethod(jwindow, jWindowNotifyResize,\n+                                    (is_maximized)\n+                                    ? com_sun_glass_events_WindowEvent_MAXIMIZE\n+                                    : com_sun_glass_events_WindowEvent_RESIZE,\n+                                    geometry.current_w, geometry.current_h);\n+            CHECK_JNI_EXCEPTION(mainEnv)\n+        }\n@@ -1238,1 +1053,4 @@\n-        location_assigned = true;\n+        if (pos_changed) {\n+            mainEnv->CallVoidMethod(jwindow, jWindowNotifyMove, geometry.current_x, geometry.current_y);\n+            CHECK_JNI_EXCEPTION(mainEnv)\n+        }\n@@ -1240,0 +1058,1 @@\n+}\n@@ -1241,1 +1060,42 @@\n-    if (w > 0 || h > 0 || cw > 0 || ch > 0) size_assigned = true;\n+void WindowContextTop::set_bounds(int x, int y, bool xSet, bool ySet, int w, int h, int cw, int ch) {\n+    \/\/ This will tell if adjustments are needed - that's because GTK does not have full window size\n+    \/\/ values, just content values. Frame extents (window decorations) are handled by the window manager.\n+    \/\/ If cw, ch are specified, no adjustment is needed.\n+    geometry.needs_ajustment = geometry.needs_ajustment || (w > 0 || h > 0);\n+\n+    \/\/ newW \/ newH always content sizes compatible with GTK+\n+    \/\/ if window has no decoration, adjustments will be ZERO\n+    int newW, newH;\n+\n+    \/\/oriented by content size\n+    if (cw > 0 || ch > 0) {\n+        geometry.content_size = true;\n+        newW = cw;\n+        newH = ch;\n+    } else {\n+        geometry.content_size = false;\n+        newW = w - geometry.adjust_w;\n+        newH = h - geometry.adjust_h;\n+        geometry.current_w = w;\n+        geometry.current_h = h;\n+    }\n+\n+    bool window_size_changed = false;\n+    bool content_size_changed = false;\n+    bool pos_changed = false;\n+\n+    if (newW > 0 && newH > 0) {\n+        \/\/ content size\n+        geometry.current_cw = newW;\n+        geometry.current_ch = newH;\n+        geometry.last_cw = newW;\n+        geometry.last_ch = newH;\n+\n+        if (visible_received) {\n+            \/\/ call apply_geometry() to let gtk_window_resize succeed, because it's bound to\n+            \/\/ geometry constraints\n+            apply_geometry();\n+            gtk_window_resize(GTK_WINDOW(gtk_widget), newW, newH);\n+        } else {\n+            gtk_window_set_default_size(GTK_WINDOW(gtk_widget), newW, newH);\n+        }\n@@ -1243,1 +1103,4 @@\n-    window_configure(&windowChanges, windowChangesMask);\n+        window_size_changed = !geometry.content_size;\n+        content_size_changed = true;\n+        geometry.size_assigned = true;\n+    }\n@@ -1245,1 +1108,4 @@\n-}\n+    \/\/ Java side does not know the window size, set and inform it.\n+    \/\/ This is used on the Dialog<> centerOnScreen()\n+    if ((!geometry.frame_extents_supported || (geometry.frame_extents_supported && geometry.frame_extents_received))\n+        && (geometry.current_h <= 0 || geometry.current_w <= 0)) {\n@@ -1247,3 +1113,2 @@\n-void WindowContextTop::process_map() {\n-    map_received = true;\n-}\n+        window_size_changed = true;\n+        geometry.size_assigned = true;\n@@ -1251,4 +1116,3 @@\n-void WindowContextTop::window_configure(XWindowChanges *windowChanges,\n-        unsigned int windowChangesMask) {\n-    if (windowChangesMask == 0) {\n-        return;\n+        geometry.content_size = false;\n+        geometry.current_h = geometry.current_ch + geometry.adjust_h;\n+        geometry.current_w = geometry.current_cw + geometry.adjust_w;\n@@ -1257,9 +1121,9 @@\n-    if (windowChangesMask & (CWX | CWY)) {\n-        gint newX, newY;\n-        gtk_window_get_position(GTK_WINDOW(gtk_widget), &newX, &newY);\n-\n-        if (windowChangesMask & CWX) {\n-            newX = windowChanges->x;\n-        }\n-        if (windowChangesMask & CWY) {\n-            newY = windowChanges->y;\n+    if (xSet || ySet) {\n+        int newX = (xSet) ? x : geometry.current_x;\n+        int newY = (ySet) ? y : geometry.current_y;\n+\n+        \/\/gravity is informed by Java side when it want's to center the window\n+        \/\/but does not know it's size\n+        if (geometry.content_size && (geometry.gravity_x != 0 || geometry.gravity_y != 0)) {\n+            newX -= geometry.current_cw * geometry.gravity_x;\n+            newY -= geometry.current_ch * geometry.gravity_y;\n@@ -1267,2 +1131,0 @@\n-        gtk_window_move(GTK_WINDOW(gtk_widget), newX, newY);\n-    }\n@@ -1270,3 +1132,2 @@\n-    if (windowChangesMask & (CWWidth | CWHeight)) {\n-        gint newWidth, newHeight;\n-        gtk_window_get_size(GTK_WINDOW(gtk_widget), &newWidth, &newHeight);\n+        geometry.current_x = newX;\n+        geometry.current_y = newY;\n@@ -1274,6 +1135,1 @@\n-        if (windowChangesMask & CWWidth) {\n-            newWidth = windowChanges->width;\n-        }\n-        if (windowChangesMask & CWHeight) {\n-            newHeight = windowChanges->height;\n-        }\n+        gtk_window_move(GTK_WINDOW(gtk_widget), newX, newY);\n@@ -1281,8 +1137,2 @@\n-        if (!resizable.value) {\n-            GdkGeometry geom;\n-            GdkWindowHints hints = (GdkWindowHints)(GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE);\n-            geom.min_width = geom.max_width = newWidth;\n-            geom.min_height = geom.max_height = newHeight;\n-            gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &geom, hints);\n-        }\n-        gtk_window_resize(GTK_WINDOW(gtk_widget), newWidth, newHeight);\n+        pos_changed = true;\n+    }\n@@ -1290,7 +1140,2 @@\n-        \/\/JDK-8193502: Moved here from WindowContextBase::set_view because set_view is called\n-        \/\/first and the size is not set yet. This also guarantees that the size will be correct\n-        \/\/see: gtk_window_get_size doc for more context.\n-        if (jview) {\n-            mainEnv->CallVoidMethod(jview, jViewNotifyResize, newWidth, newHeight);\n-            CHECK_JNI_EXCEPTION(mainEnv);\n-        }\n+    if (window_size_changed || content_size_changed || pos_changed) {\n+        size_position_notify(window_size_changed, content_size_changed, pos_changed);\n@@ -1300,0 +1145,5 @@\n+void WindowContextTop::process_map() {\n+    map_received = true;\n+    apply_geometry();\n+}\n+\n@@ -1309,0 +1159,1 @@\n+\/\/ this is to work-around past gtk+ bug\n@@ -1316,5 +1167,3 @@\n-    if (size_assigned && (geometry.final_width.value != w\n-                       || geometry.final_height.value != h)) {\n-\n-        gdk_window_resize(gdk_window, geometry.final_width.value,\n-                                      geometry.final_height.value);\n+    if ((geometry.last_cw > 0 && geometry.last_ch > 0)\n+        && (geometry.last_cw != w || geometry.last_ch != h)) {\n+        gdk_window_resize(gdk_window, geometry.last_cw, geometry.last_ch);\n@@ -1360,0 +1209,2 @@\n+    is_fullscreen = TRUE;\n+\n@@ -1390,12 +1241,4 @@\n-    if (enabled) {\n-        if (resizable.prev) {\n-            set_window_resizable(true);\n-        }\n-    } else {\n-        if (resizable.value) {\n-            set_window_resizable(false);\n-            resizable.prev = true;\n-        } else if (resizable.request == REQUEST_RESIZABLE) {\n-            resizable.request = REQUEST_NOT_RESIZABLE;\n-            resizable.prev = true;\n-        }\n+    if (enabled != geometry.enabled) {\n+        gtk_widget_set_sensitive(gtk_widget, enabled);\n+        geometry.enabled = enabled;\n+        apply_geometry();\n@@ -1406,3 +1249,10 @@\n-    resizable.minw = w;\n-    resizable.minh = h;\n-    update_window_constraints();\n+    bool changed = geometry.minw != w || geometry.minh != h;\n+\n+    if (!changed) {\n+        return;\n+    }\n+\n+    geometry.minw = w;\n+    geometry.minh = h;\n+\n+    apply_geometry();\n@@ -1412,3 +1262,10 @@\n-    resizable.maxw = w;\n-    resizable.maxh = h;\n-    update_window_constraints();\n+    bool changed = geometry.maxw != w || geometry.maxh != h;\n+\n+    if (!changed) {\n+        return;\n+    }\n+\n+    geometry.maxw = w;\n+    geometry.maxh = h;\n+\n+    apply_geometry();\n@@ -1439,2 +1296,2 @@\n-WindowFrameExtents WindowContextTop::get_frame_extents() {\n-    return geometry.extents;\n+WindowGeometry WindowContextTop::get_geometry() {\n+    return geometry;\n@@ -1444,2 +1301,0 @@\n-    int oldX = geometry_get_window_x(&geometry);\n-    int oldY = geometry_get_window_y(&geometry);\n@@ -1448,2 +1303,0 @@\n-    geometry_set_window_x(&geometry, oldX);\n-    geometry_set_window_y(&geometry, oldY);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.cpp","additions":240,"deletions":387,"binary":false,"changes":627,"status":"modified"},{"patch":"@@ -55,7 +55,0 @@\n-struct WindowFrameExtents {\n-    int top;\n-    int left;\n-    int bottom;\n-    int right;\n-};\n-\n@@ -64,5 +57,0 @@\n-enum BoundsType {\n-    BOUNDSTYPE_CONTENT,\n-    BOUNDSTYPE_WINDOW\n-};\n-\n@@ -70,16 +58,48 @@\n-    WindowGeometry(): final_width(), final_height(),\n-    refx(), refy(), gravity_x(), gravity_y(), current_width(), current_height(), extents() {}\n-    \/\/ estimate of the final width the window will get after all pending\n-    \/\/ configure requests are processed by the window manager\n-    struct {\n-        int value;\n-        BoundsType type;\n-    } final_width;\n-\n-    struct {\n-        int value;\n-        BoundsType type;\n-    } final_height;\n-\n-    float refx;\n-    float refy;\n+    WindowGeometry() : current_x(-1),\n+                       current_y(-1),\n+                       current_w(0),\n+                       current_h(0),\n+                       current_cw(0),\n+                       current_ch(0),\n+                       last_cw(0),\n+                       last_ch(0),\n+                       adjust_w(0),\n+                       adjust_h(0),\n+                       view_x(0),\n+                       view_y(0),\n+                       frame_extents_supported(false),\n+                       frame_extents_received(false),\n+                       gravity_x(1.00),\n+                       gravity_y(1.00),\n+                       enabled(true),\n+                       resizable(true),\n+                       minw(-1),\n+                       minh(-1),\n+                       maxw(-1),\n+                       maxh(-1),\n+                       needs_ajustment(false),\n+                       size_assigned(false) {}\n+\n+    int current_x; \/\/ current position X\n+    int current_y; \/\/ current position Y\n+    int current_w; \/\/ current window width, adjusted (see adjust_w)\n+    int current_h; \/\/ current window height, adjusted (see adjust_h)\n+    int current_cw; \/\/ current content (view) width\n+    int current_ch; \/\/ current content (view) height\n+    int last_cw; \/\/ not subjected to fullscreen \/ maximize\n+    int last_ch;\n+\n+    \/\/ Used to ajust window sizes because gtk doest not account frame extents as part\n+    \/\/ of the window size and JavaFx does.\n+    int adjust_w;\n+    int adjust_h;\n+\n+    \/\/ The position of the view relative to the window\n+    int view_x;\n+    int view_y;\n+\n+    \/\/ If _NET_REQUEST_FRAME_EXTENTS was received\n+    bool frame_extents_supported;\n+    bool frame_extents_received;\n+\n+    \/\/ Currently not used\n@@ -89,3 +109,2 @@\n-    \/\/ the last width which was configured or obtained from configure\n-    \/\/ notification\n-    int current_width;\n+    bool enabled;\n+    bool resizable;\n@@ -93,3 +112,2 @@\n-    \/\/ the last height which was configured or obtained from configure\n-    \/\/ notification\n-    int current_height;\n+    int minw;\n+    int minh;\n@@ -97,1 +115,2 @@\n-    WindowFrameExtents extents;\n+    int maxw;\n+    int maxh;\n@@ -99,0 +118,8 @@\n+    \/\/true if size is oriented by content, false if by window size with extents\n+    bool content_size;\n+\n+    \/\/ if the window size was set (instead of content size) - this is used to hint\n+    \/\/ the process to \"fix\" the window size accounting extents.\n+    bool needs_ajustment;\n+\n+    bool size_assigned;\n@@ -112,1 +139,1 @@\n-    virtual WindowFrameExtents get_frame_extents() = 0;\n+    virtual WindowGeometry get_geometry() = 0;\n@@ -171,1 +198,0 @@\n-\n@@ -279,2 +305,1 @@\n-    \/\/WindowFrameExtents get_frame_extents() { return WindowFrameExtents{0, 0, 0, 0}; };\n-    WindowFrameExtents get_frame_extents() { WindowFrameExtents ext = {0, 0, 0, 0}; return ext;}\n+    WindowGeometry get_geometry() { return WindowGeometry(); }\n@@ -326,2 +351,1 @@\n-    \/\/WindowFrameExtents get_frame_extents() { return WindowFrameExtents{0, 0, 0, 0}; };\n-    WindowFrameExtents get_frame_extents() { WindowFrameExtents ext = {0, 0, 0, 0}; return ext;}\n+    WindowGeometry get_geometry() { return WindowGeometry(); }\n@@ -371,10 +395,0 @@\n-    struct _Resizable{\/\/ we can't use set\/get gtk_window_resizable function\n-        _Resizable(): request(REQUEST_NONE), value(true), prev(false),\n-                minw(-1), minh(-1), maxw(-1), maxh(-1){}\n-        request_type request; \/\/request for future setResizable\n-        bool value; \/\/actual value of resizable for a window\n-        bool prev; \/\/former resizable value (used in setEnabled for parents of modal window)\n-        int minw, minh, maxw, maxh; \/\/minimum and maximum window width\/height;\n-    } resizable;\n-\n-    bool frame_extents_initialized;\n@@ -382,2 +396,1 @@\n-    bool location_assigned;\n-    bool size_assigned;\n+    bool visible_received;\n@@ -385,0 +398,2 @@\n+    bool is_maximized;\n+    bool is_fullscreen;\n@@ -386,13 +401,0 @@\n-    struct _Size {\n-        int width, height;\n-        int client_width, client_height;\n-    } requested_bounds;\n-\n-    bool is_null_extents() { return is_null_extents(geometry.extents); }\n-\n-    bool is_null_extents(WindowFrameExtents ex) {\n-        return !ex.top && !ex.left && !ex.bottom && !ex.right;\n-    }\n-\n-    static WindowFrameExtents normal_extents;\n-    static WindowFrameExtents utility_extents;\n@@ -407,1 +409,1 @@\n-    WindowFrameExtents get_frame_extents();\n+    WindowGeometry get_geometry();\n@@ -438,0 +440,2 @@\n+    void size_position_notify(bool, bool, bool);\n+    void apply_geometry();\n@@ -441,6 +445,0 @@\n-    bool update_frame_extents();\n-    void set_cached_extents(WindowFrameExtents ex);\n-    WindowFrameExtents get_cached_extents();\n-    void window_configure(XWindowChanges *, unsigned int);\n-    void update_window_constraints();\n-    void set_window_resizable(bool);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.h","additions":71,"deletions":73,"binary":false,"changes":144,"status":"modified"}]}