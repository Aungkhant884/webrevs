{"files":[{"patch":"@@ -245,3 +245,4 @@\n-     * Subclasses can invoke this method to register that they want to listen to\n-     * invalidation events for the given observable. Registered {@link Consumer} instances\n-     * will be executed in the order in which they are registered.\n+     * Registers an operation to perform when the given {@code Observable} sends an invalidation event.\n+     * Does nothing if observable or operation is {@code null}. \n+     * If multiple operations are registered on the same observable, they will be performed in the \n+     * order in which they were registered.\n@@ -249,2 +250,3 @@\n-     * @param observable the observable to observe for invalidation events\n-     * @param consumer the consumer\n+     * @param observable the observable to observe for invalidation events, may be {@code null}\n+     * @param operation the operation to perform when the observable sends an invalidation event, \n+     *  may be {@code null}\n@@ -253,1 +255,1 @@\n-    protected final void registerInvalidationListener(Observable observable, Consumer<Observable> consumer) {\n+    protected final void registerInvalidationListener(Observable observable, Consumer<Observable> operation) {\n@@ -257,1 +259,1 @@\n-        lambdaChangeListenerHandler.registerInvalidationListener(observable, consumer);\n+        lambdaChangeListenerHandler.registerInvalidationListener(observable, operation);\n@@ -261,1 +263,1 @@\n-     * Unregisters all invalidation listeners that have been registered using\n+     * Unregisters all operations that have been registered using\n@@ -263,3 +265,1 @@\n-     * for the given observable. The end result is that the given observable is no longer observed by any of the invalidation\n-     * listeners, but it may still have additional listeners registered on it through means outside of\n-     * {@link #registerInvalidationListener(Observable, Consumer)}.\n+     * for the given observable. \n@@ -267,4 +267,4 @@\n-     * @param observable The observable for which all listeners should be removed.\n-     * @return A single chained {@link Consumer} consisting of all {@link Consumer consumers} registered through\n-     *      {@link #registerInvalidationListener(Observable, Consumer)}. If no consumers have been registered on this\n-     *      property, null will be returned.\n+     * @param observable the observable for which the registered operations should be removed, \n+     *  may be {@code null}\n+     * @return a composed consumer that performs all removed operations or \n+     *  {@code null} if none has been registered or the observable is {@null}\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/SkinBase.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"}]}