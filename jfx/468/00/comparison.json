{"files":[{"patch":"@@ -45,1 +45,0 @@\n-import org.junit.Ignore;\n@@ -1551,186 +1550,0 @@\n-\n-    @Test\n-    @Ignore(\"JDK-8234084\") \/\/ This is a benchmark, not any functional test.\n-    public void saneOrderingBenchmark() {\n-        long[] ids = new long[] { 2, 3, 4, 5, 6 };\n-        boolean[] active = new boolean[] { false, false, false, false, false };\n-        int count = 0;\n-        int tick = 5;\n-        int available = 5;\n-        Random rand = new Random();\n-\n-        Scene scene = createScene();\n-\n-\n-        int ticker = 0;\n-        int added = -1;\n-        int removed = -1;\n-        long timer = System.currentTimeMillis();\n-        for (int i = 0; i < SANE_BENCHMARK_CYCLES; i++) {\n-            ticker++;\n-            if (ticker == tick) {\n-                ticker = 0;\n-\n-                boolean up;\n-                if (count == available) {\n-                    up = false;\n-                } else if (count == 0) {\n-                    up = true;\n-                } else {\n-                    up = Math.random() > 0.4;\n-                }\n-\n-                if (up) {\n-                    for (int j = 0; j < available; j++) {\n-                        if (!active[j]) {\n-                            active[j] = true;\n-                            added = j;\n-                            count++;\n-                            break;\n-                        }\n-                    }\n-                } else {\n-                    int which = rand.nextInt(count);\n-                    int k = 0;\n-                    for (int j = 0; j < available; j++) {\n-                        if (active[j]) {\n-                            k++;\n-                            if (k == which) {\n-                                active[j] = false;\n-                                removed = j;\n-                                count--;\n-                                break;\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-\n-            int reporting = count + (removed >= 0 ? 1 : 0);\n-\n-            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(\n-                    System.currentTimeMillis(), reporting, true, false, false, false, false);\n-\n-            for (int j = 0; j < available; j++) {\n-                if (active[j] || removed == j) {\n-                    TouchPoint.State state = TouchPoint.State.MOVED;\n-                    if (added == j) {\n-                        state = TouchPoint.State.PRESSED;\n-                    } else if (removed == j) {\n-                        state = TouchPoint.State.RELEASED;\n-                    } else {\n-                    }\n-\n-                    ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n-                            state, ids[j], 150, 150, 150, 150);\n-                }\n-            }\n-\n-            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();\n-            removed = -1;\n-            added = -1;\n-        }\n-        long timer2 = System.currentTimeMillis();\n-        System.out.println(\"*************************************************\");\n-        System.out.println(\"Benchmark1 time: \" + (timer2 - timer));\n-        System.out.println(\"*************************************************\");\n-        System.out.println(\"\");\n-    }\n-\n-    @Test\n-    @Ignore(\"JDK-8234084\") \/\/ This is a benchmark, not any functional test.\n-    public void crazyOrderingBenchmark() {\n-        long[] ids = new long[] { 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000 };\n-        boolean[] active = new boolean[] { false, false, false, false, false,\n-                false, false, false, false, false };\n-        int count = 0;\n-        int tick = 5;\n-        int available = 10;\n-        Random rand = new Random();\n-\n-        Scene scene = createScene();\n-\n-\n-        int ticker = 0;\n-        int added = -1;\n-        int removed = -1;\n-        long timer = System.currentTimeMillis();\n-        for (int i = 0; i < CRAZY_BENCHMARK_CYCLES; i++) {\n-            ticker++;\n-            if (ticker == tick) {\n-                ticker = 0;\n-\n-                boolean up;\n-                if (count == available) {\n-                    up = false;\n-                } else if (count == 0) {\n-                    up = true;\n-                } else {\n-                    up = Math.random() > 0.4;\n-                }\n-\n-                if (up) {\n-                    int which = rand.nextInt(available - count);\n-                    int k = 0;\n-                    for (int j = 0; j < available; j++) {\n-                        if (!active[j]) {\n-                            k++;\n-                            if (k == which) {\n-                                active[j] = true;\n-                                added = j;\n-                                count++;\n-                                ids[j] = Math.abs(rand.nextLong());\n-                                if (ids[j] == 0) {\n-                                    ids[j] = 1;\n-                                }\n-                                break;\n-                            }\n-                        }\n-                    }\n-                } else {\n-                    int which = rand.nextInt(count);\n-                    int k = 0;\n-                    for (int j = 0; j < available; j++) {\n-                        if (active[j]) {\n-                            k++;\n-                            if (k == which) {\n-                                active[j] = false;\n-                                removed = j;\n-                                count--;\n-                                break;\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-\n-            int reporting = count + (removed >= 0 ? 1 : 0);\n-\n-            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(\n-                    System.currentTimeMillis(), reporting, true, false, false, false, false);\n-\n-            for (int j = 0; j < available; j++) {\n-                if (active[j] || removed == j) {\n-                    TouchPoint.State state = TouchPoint.State.MOVED;\n-                    if (added == j) {\n-                        state = TouchPoint.State.PRESSED;\n-                    } else if (removed == j) {\n-                        state = TouchPoint.State.RELEASED;\n-                    }\n-\n-                    ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n-                            state, ids[j], 150, 150, 150, 150);\n-                }\n-            }\n-\n-            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();\n-            removed = -1;\n-            added = -1;\n-        }\n-        long timer2 = System.currentTimeMillis();\n-        System.out.println(\"*************************************************\");\n-        System.out.println(\"Benchmark2 time: \" + (timer2 - timer));\n-        System.out.println(\"*************************************************\");\n-        System.out.println(\"\");\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/TouchEventTest.java","additions":0,"deletions":187,"binary":false,"changes":187,"status":"modified"}]}