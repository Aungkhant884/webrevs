{"files":[{"patch":"@@ -133,0 +133,2 @@\n+    ERROR_MISSING_LIBSWSCALE(ERROR_BASE_SYSTEM.code()+0x0005),\n+    ERROR_INVALID_LIBSWSCALE(ERROR_BASE_SYSTEM.code()+0x0006),\n","filename":"modules\/javafx.media\/src\/main\/java\/com\/sun\/media\/jfxmedia\/MediaError.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-        sws_freeContext(decoder->sws_context);\n+        decoder->sws_freeContext_func(decoder->sws_context);\n@@ -191,0 +191,6 @@\n+\n+    if (decoder->swscale_module)\n+    {\n+        dlclose(decoder->swscale_module);\n+        decoder->swscale_module = NULL;\n+    }\n@@ -363,0 +369,4 @@\n+    decoder->swscale_module = NULL;\n+    decoder->sws_getContext_func = NULL;\n+    decoder->sws_freeContext_func = NULL;\n+    decoder->sws_scale_func = NULL;\n@@ -422,0 +432,46 @@\n+    \/\/ Load libswscale\n+    if (decoder->swscale_module == NULL)\n+    {\n+        decoder->swscale_module = dlopen(\"libswscale.so\", RTLD_LAZY);\n+        if (decoder->swscale_module == NULL)\n+        {\n+            \/\/ Halt playback, since we cannot continue and post user\n+            \/\/ friendly error message that libswscale is required\n+            gst_element_message_full(GST_ELEMENT(decoder), GST_MESSAGE_ERROR,\n+                    JFX_GST_ERROR, JFX_GST_MISSING_LIBSWSCALE,\n+                    g_strdup(\"Error: libswscale is required for H.265\/HEVC 10\/12-bit decoding\"), NULL,\n+                    (\"videodecoder.c\"), (\"videodecoder_init_converter\"), 0);\n+            return FALSE;\n+        }\n+\n+        decoder->sws_getContext_func = dlsym(decoder->swscale_module, \"sws_getContext\");\n+        if (!decoder->sws_getContext_func)\n+        {\n+            gst_element_message_full(GST_ELEMENT(decoder), GST_MESSAGE_ERROR,\n+                    JFX_GST_ERROR, JFX_GST_INVALID_LIBSWSCALE,\n+                    g_strdup(\"Error: Failed to find \\\"sws_getContext()\\\" in libswscale\"), NULL,\n+                    (\"videodecoder.c\"), (\"videodecoder_init_converter\"), 0);\n+            return FALSE;\n+        }\n+\n+        decoder->sws_freeContext_func = dlsym(decoder->swscale_module, \"sws_freeContext\");\n+        if (!decoder->sws_freeContext_func)\n+        {\n+            gst_element_message_full(GST_ELEMENT(decoder), GST_MESSAGE_ERROR,\n+                    JFX_GST_ERROR, JFX_GST_INVALID_LIBSWSCALE,\n+                    g_strdup(\"Error: Failed to find \\\"sws_freeContext()\\\" in libswscale\"), NULL,\n+                    (\"videodecoder.c\"), (\"videodecoder_init_converter\"), 0);\n+            return FALSE;\n+        }\n+\n+        decoder->sws_scale_func = dlsym(decoder->swscale_module, \"sws_scale\");\n+        if (!decoder->sws_scale_func)\n+        {\n+            gst_element_message_full(GST_ELEMENT(decoder), GST_MESSAGE_ERROR,\n+                    JFX_GST_ERROR, JFX_GST_INVALID_LIBSWSCALE,\n+                    g_strdup(\"Error: Failed to find \\\"sws_scale()\\\" in libswscale\"), NULL,\n+                    (\"videodecoder.c\"), (\"videodecoder_init_converter\"), 0);\n+            return FALSE;\n+        }\n+    }\n+\n@@ -430,1 +486,1 @@\n-        sws_freeContext(decoder->sws_context);\n+        decoder->sws_freeContext_func(decoder->sws_context);\n@@ -434,4 +490,8 @@\n-    decoder->sws_context = sws_getContext(decoder->width, decoder->height,\n-                                          base->frame->format, decoder->width,\n-                                          decoder->height, AV_PIX_FMT_YUV420P,\n-                                          SWS_BILINEAR, NULL, NULL, NULL);\n+    decoder->sws_context =\n+            decoder->sws_getContext_func(decoder->width, decoder->height,\n+                                         base->frame->format, decoder->width,\n+                                         decoder->height, AV_PIX_FMT_YUV420P,\n+                                         SWS_BILINEAR, NULL, NULL, NULL);\n+\n+    if (decoder->sws_context == NULL)\n+        return FALSE;\n@@ -451,1 +511,1 @@\n-        sws_freeContext(decoder->sws_context);\n+        decoder->sws_freeContext_func(decoder->sws_context);\n@@ -463,1 +523,2 @@\n-    if (decoder->sws_context == NULL || decoder->dest_frame == NULL)\n+    if (decoder->sws_context == NULL || decoder->dest_frame == NULL ||\n+            decoder->sws_scale_func == NULL)\n@@ -466,7 +527,7 @@\n-    int ret = sws_scale(decoder->sws_context,\n-                    base->frame->data,\n-                    base->frame->linesize,\n-                    0,\n-                    base->frame->height,\n-                    decoder->dest_frame->data,\n-                    decoder->dest_frame->linesize);\n+    int ret = decoder->sws_scale_func(decoder->sws_context,\n+                                      base->frame->data,\n+                                      base->frame->linesize,\n+                                      0,\n+                                      base->frame->height,\n+                                      decoder->dest_frame->data,\n+                                      decoder->dest_frame->linesize);\n@@ -516,1 +577,1 @@\n-                                             (\"videodecoder_init_convert() failed\"), NULL,\n+                                             g_strdup(\"videodecoder_init_convert() failed\"), NULL,\n@@ -525,1 +586,1 @@\n-                                             (\"videodecoder_convert_frame() failed\"), NULL,\n+                                             g_strdup(\"videodecoder_convert_frame() failed\"), NULL,\n@@ -677,1 +738,1 @@\n-                                         (\"Video frame conversion failed\"), NULL,\n+                                         g_strdup(\"Video frame conversion failed\"), NULL,\n@@ -709,1 +770,1 @@\n-                                             (\"Decoded video buffer allocation failed\"), NULL,\n+                                             g_strdup(\"Decoded video buffer allocation failed\"), NULL,\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/plugins\/av\/videodecoder.c","additions":80,"deletions":19,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include <dlfcn.h>\n@@ -48,0 +49,15 @@\n+#if HEVC_SUPPORT\n+\/\/ libswscale APIs\n+typedef struct SwsContext *(*sws_getContext_ptr)(int srcW, int srcH,\n+                                                 enum AVPixelFormat srcFormat,\n+                                                 int dstW, int dstH,\n+                                                 enum AVPixelFormat dstFormat,\n+                                                 int flags, SwsFilter *srcFilter,\n+                                                 SwsFilter *dstFilter,\n+                                                 const double *param);\n+typedef void (*sws_freeContext_ptr)(struct SwsContext *swsContext);\n+typedef int (*sws_scale_ptr)(struct SwsContext *c, const uint8_t *const srcSlice[],\n+                      const int srcStride[], int srcSliceY, int srcSliceH,\n+                      uint8_t *const dst[], const int dstStride[]);\n+#endif \/\/ HEVC_SUPPORT\n+\n@@ -71,0 +87,6 @@\n+\n+    \/\/ Load and use libswscale dynamically\n+    void                *swscale_module;\n+    sws_getContext_ptr  sws_getContext_func;\n+    sws_freeContext_ptr sws_freeContext_func;\n+    sws_scale_ptr       sws_scale_func;\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/plugins\/av\/videodecoder.h","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -54,0 +54,11 @@\n+\/\/ Custom error codes used by our plugins\n+\n+\/\/ GStreamer enums with error codes does not contains more then 25 error codes,\n+\/\/ so we will start with 0xFF, so we do not conflict with GStreamer\n+enum JFX_GST_ERROR_CODES\n+{\n+    JFX_GST_ERROR = 0xFF,\n+    JFX_GST_MISSING_LIBSWSCALE,\n+    JFX_GST_INVALID_LIBSWSCALE,\n+};\n+\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/plugins\/fxplugins_common.h","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-LDFLAGS  += -L$(LIBAV_DIR)\/lib\/ -lavcodec -lavformat -lswscale\n+LDFLAGS  += -L$(LIBAV_DIR)\/lib\/ -lavcodec -lavformat\n@@ -64,1 +64,1 @@\n-LDFLAGS  += $(shell pkg-config --libs libavcodec libavformat libswscale)\n+LDFLAGS  += $(shell pkg-config --libs libavcodec libavformat)\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/projects\/linux\/avplugin\/Makefile","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1197,0 +1197,17 @@\n+                else if (pPipeline != NULL && pPipeline->m_pEventDispatcher != NULL && error->domain == JFX_GST_ERROR)\n+                {\n+                    if (error->code == JFX_GST_MISSING_LIBSWSCALE)\n+                    {\n+                        if (!pPipeline->m_pEventDispatcher->SendPlayerMediaErrorEvent(ERROR_MISSING_LIBSWSCALE))\n+                        {\n+                            LOGGER_LOGMSG(LOGGER_ERROR, \"Cannot send media error event.\\n\");\n+                        }\n+                    }\n+                    else if (error->code == JFX_GST_INVALID_LIBSWSCALE)\n+                    {\n+                        if (!pPipeline->m_pEventDispatcher->SendPlayerMediaErrorEvent(ERROR_INVALID_LIBSWSCALE))\n+                        {\n+                            LOGGER_LOGMSG(LOGGER_ERROR, \"Cannot send media error event.\\n\");\n+                        }\n+                    }\n+                }\n","filename":"modules\/javafx.media\/src\/main\/native\/jfxmedia\/platform\/gstreamer\/GstAudioPlaybackPipeline.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}