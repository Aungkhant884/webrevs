{"files":[{"patch":"@@ -360,0 +360,1 @@\n+        if (isEditing()) return;\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ListCell.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -307,0 +307,1 @@\n+        if (isEditing()) return;\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableCell.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,4 @@\n-import com.sun.javafx.scene.control.behavior.BehaviorBase;\n-import com.sun.javafx.scene.control.behavior.TextAreaBehavior;\n+import java.util.List;\n+\n+import com.sun.javafx.scene.control.behavior.PasswordFieldBehavior;\n+import com.sun.javafx.scene.control.behavior.TextFieldBehavior;\n@@ -31,0 +33,1 @@\n+\n@@ -47,2 +50,0 @@\n-import javafx.scene.control.Accordion;\n-import javafx.scene.control.Button;\n@@ -60,4 +61,1 @@\n-import javafx.scene.text.Text;\n-import java.util.List;\n-import com.sun.javafx.scene.control.behavior.TextFieldBehavior;\n-import com.sun.javafx.scene.control.behavior.PasswordFieldBehavior;\n+import javafx.scene.text.Text;\n@@ -157,1 +155,1 @@\n-        control.caretPositionProperty().addListener((observable, oldValue, newValue) -> {\n+        registerChangeListener(control.caretPositionProperty(), e -> {\n@@ -222,3 +220,1 @@\n-        control.selectionProperty().addListener(observable -> {\n-            updateSelection();\n-        });\n+        registerInvalidationListener(control.selectionProperty(), e -> updateSelection());\n@@ -232,3 +228,2 @@\n-        textNode.selectionShapeProperty().addListener(observable -> {\n-            updateSelection();\n-        });\n+\n+        registerInvalidationListener(textNode.selectionShapeProperty(), e -> updateSelection());\n@@ -265,1 +260,1 @@\n-        control.fontProperty().addListener(observable -> {\n+        registerInvalidationListener(control.fontProperty(), e -> {\n@@ -276,1 +271,1 @@\n-        control.alignmentProperty().addListener(observable -> {\n+        registerInvalidationListener(control.alignmentProperty(), e -> {\n@@ -301,1 +296,1 @@\n-        control.textProperty().addListener(observable -> {\n+        registerInvalidationListener(control.textProperty(), e -> {\n@@ -312,1 +307,1 @@\n-        usePromptText.addListener(observable -> {\n+        registerInvalidationListener(usePromptText, e -> {\n@@ -394,0 +389,2 @@\n+        if (getSkinnable() == null) return;\n+        getChildren().removeAll(textGroup, handleGroup);\n@@ -924,0 +921,16 @@\n+\n+    \/\/ for testing only!\n+    Text getTextNode() {\n+        return textNode;\n+    }\n+\n+    \/\/ for testing only!\n+    Text getPromptNode() {\n+        return promptNode;\n+    }\n+\n+    \/\/ for testing only!\n+    double getTextTranslateX() {\n+        return textTranslateX.get();\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TextFieldSkin.java","additions":33,"deletions":20,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,8 @@\n+import java.lang.ref.WeakReference;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.sun.javafx.PlatformUtil;\n@@ -29,0 +37,1 @@\n+import com.sun.javafx.scene.control.behavior.TextInputControlBehavior;\n@@ -31,0 +40,6 @@\n+import com.sun.javafx.tk.FontMetrics;\n+import com.sun.javafx.tk.Toolkit;\n+\n+import static com.sun.javafx.PlatformUtil.*;\n+\n+import javafx.animation.Animation.Status;\n@@ -48,0 +63,3 @@\n+import javafx.css.converter.BooleanConverter;\n+import javafx.css.converter.PaintConverter;\n+import javafx.event.EventHandler;\n@@ -72,1 +90,0 @@\n-import javafx.scene.text.HitInfo;\n@@ -75,13 +92,0 @@\n-import java.lang.ref.WeakReference;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import com.sun.javafx.PlatformUtil;\n-import javafx.css.converter.BooleanConverter;\n-import javafx.css.converter.PaintConverter;\n-import com.sun.javafx.scene.control.behavior.TextInputControlBehavior;\n-import com.sun.javafx.tk.FontMetrics;\n-import com.sun.javafx.tk.Toolkit;\n-import static com.sun.javafx.PlatformUtil.isWindows;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -167,0 +171,1 @@\n+    private EventHandler<InputMethodEvent> inputMethodTextChangedHandler;\n@@ -283,1 +288,1 @@\n-            control.focusedProperty().addListener(observable -> {\n+            registerInvalidationListener(control.focusedProperty(), observable -> {\n@@ -299,0 +304,1 @@\n+        \/\/ FIXME: JDK-8268877 - incorrectly wired handler on replacing skin\n@@ -300,3 +306,2 @@\n-            control.setOnInputMethodTextChanged(event -> {\n-                handleInputMethodEvent(event);\n-            });\n+            inputMethodTextChangedHandler = this::handleInputMethodEvent;\n+            control.setOnInputMethodTextChanged(inputMethodTextChangedHandler);\n@@ -362,0 +367,12 @@\n+    @Override\n+    public void dispose() {\n+        if (getSkinnable() == null) return;\n+        \/\/ the inputMethodEvent handler installed by this skin must be removed to prevent a memory leak\n+        \/\/ while a handler installed by the control must not be removed\n+        if (getSkinnable().getOnInputMethodTextChanged() == inputMethodTextChangedHandler) {\n+            getSkinnable().setOnInputMethodTextChanged(null);\n+        }\n+        \/\/ cleanup to guard against potential NPE\n+        getSkinnable().setInputMethodRequests(null);\n+        super.dispose();\n+    }\n@@ -769,0 +786,5 @@\n+    \/\/ for testing only!\n+    boolean isCaretBlinking() {\n+        return caretBlinking.caretTimeline.getStatus() == Status.RUNNING;\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TextInputControlSkin.java","additions":41,"deletions":19,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -845,6 +845,1 @@\n-    \/\/ FIXME: make this method package-scope in the next release\n-    \/**\n-     * @deprecated This method was exposed erroneously and will be removed in a future version.\n-     *\/\n-    @Deprecated(forRemoval = true, since = \"17\")\n-    public void disposePeer() {\n+    void disposePeer() {\n@@ -2143,7 +2138,1 @@\n-    \/\/ FIXME: make this method package-scope in the next release\n-    \/**\n-     * @deprecated This method was exposed erroneously and will be removed in a future version.\n-     * @param e undocumented method parameter\n-     *\/\n-    @Deprecated(forRemoval = true, since = \"17\")\n-    public void processKeyEvent(KeyEvent e) {\n+    void processKeyEvent(KeyEvent e) {\n@@ -2235,7 +2224,1 @@\n-    \/\/ FIXME: make this method package-scope in the next release\n-    \/**\n-     * @deprecated This method was exposed erroneously and will be removed in a future version.\n-     * @param enable undocumented method parameter\n-     *\/\n-    @Deprecated(forRemoval = true, since = \"17\")\n-    public void enableInputMethodEvents(boolean enable) {\n+    void enableInputMethodEvents(boolean enable) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Scene.java","additions":3,"deletions":20,"binary":false,"changes":23,"status":"modified"}]}