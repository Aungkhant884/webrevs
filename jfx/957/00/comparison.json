{"files":[{"patch":"@@ -71,1 +71,1 @@\n-                : new TypedGenericBidirectionalBinding<T>(property1, property2);\n+                : new TypedGenericBidirectionalBinding<>(property1, property2);\n@@ -739,1 +739,1 @@\n-                                property1.setValue((T)oldValue);\n+                                property1.setValue(oldValue);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/BidirectionalBinding.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        final ListContentBinding<E> binding = new ListContentBinding<E>(list1, list2);\n+        final ListContentBinding<E> binding = new ListContentBinding<>(list1, list2);\n@@ -59,1 +59,1 @@\n-        final SetContentBinding<E> binding = new SetContentBinding<E>(set1, set2);\n+        final SetContentBinding<E> binding = new SetContentBinding<>(set1, set2);\n@@ -69,1 +69,1 @@\n-        final MapContentBinding<K, V> binding = new MapContentBinding<K, V>(map1, map2);\n+        final MapContentBinding<K, V> binding = new MapContentBinding<>(map1, map2);\n@@ -109,2 +109,2 @@\n-            propertyRef1 = new WeakReference<ObservableList<E>>(list1);\n-            propertyRef2 = new WeakReference<ObservableList<E>>(list2);\n+            propertyRef1 = new WeakReference<>(list1);\n+            propertyRef2 = new WeakReference<>(list2);\n@@ -203,2 +203,2 @@\n-            propertyRef1 = new WeakReference<ObservableSet<E>>(list1);\n-            propertyRef2 = new WeakReference<ObservableSet<E>>(list2);\n+            propertyRef1 = new WeakReference<>(list1);\n+            propertyRef2 = new WeakReference<>(list2);\n@@ -289,2 +289,2 @@\n-            propertyRef1 = new WeakReference<ObservableMap<K, V>>(list1);\n-            propertyRef2 = new WeakReference<ObservableMap<K, V>>(list2);\n+            propertyRef1 = new WeakReference<>(list1);\n+            propertyRef2 = new WeakReference<>(list2);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/BidirectionalContentBinding.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-        ref = new WeakReference<Binding<?>>(binding);\n+        ref = new WeakReference<>(binding);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/BindingHelperObserver.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        final ListContentBinding<E> contentBinding = new ListContentBinding<E>(list1);\n+        final ListContentBinding<E> contentBinding = new ListContentBinding<>(list1);\n@@ -65,1 +65,1 @@\n-        final SetContentBinding<E> contentBinding = new SetContentBinding<E>(set1);\n+        final SetContentBinding<E> contentBinding = new SetContentBinding<>(set1);\n@@ -75,1 +75,1 @@\n-        final MapContentBinding<K, V> contentBinding = new MapContentBinding<K, V>(map1);\n+        final MapContentBinding<K, V> contentBinding = new MapContentBinding<>(map1);\n@@ -99,1 +99,1 @@\n-            this.listRef = new WeakReference<List<E>>(list);\n+            this.listRef = new WeakReference<>(list);\n@@ -160,1 +160,1 @@\n-            this.setRef = new WeakReference<Set<E>>(set);\n+            this.setRef = new WeakReference<>(set);\n@@ -213,1 +213,1 @@\n-            this.mapRef = new WeakReference<Map<K, V>>(map);\n+            this.mapRef = new WeakReference<>(map);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ContentBinding.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        return (helper == null)? new SingleInvalidation<T>(observable, listener) : helper.addListener(listener);\n+        return (helper == null)? new SingleInvalidation<>(observable, listener) : helper.addListener(listener);\n@@ -68,1 +68,1 @@\n-        return (helper == null)? new SingleChange<T>(observable, listener) : helper.addListener(listener);\n+        return (helper == null)? new SingleChange<>(observable, listener) : helper.addListener(listener);\n@@ -115,1 +115,1 @@\n-            return new Generic<T>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -125,1 +125,1 @@\n-            return new Generic<T>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -156,1 +156,1 @@\n-            return new Generic<T>(observable, listener, this.listener);\n+            return new Generic<>(observable, listener, this.listener);\n@@ -166,1 +166,1 @@\n-            return new Generic<T>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -249,1 +249,1 @@\n-                                return new SingleChange<T>(observable, changeListeners[0]);\n+                                return new SingleChange<>(observable, changeListeners[0]);\n@@ -254,1 +254,1 @@\n-                            return new SingleInvalidation<T>(observable, invalidationListeners[1-index]);\n+                            return new SingleInvalidation<>(observable, invalidationListeners[1-index]);\n@@ -309,1 +309,1 @@\n-                                return new SingleInvalidation<T>(observable, invalidationListeners[0]);\n+                                return new SingleInvalidation<>(observable, invalidationListeners[0]);\n@@ -314,1 +314,1 @@\n-                            return new SingleChange<T>(observable, changeListeners[1-index]);\n+                            return new SingleChange<>(observable, changeListeners[1-index]);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ExpressionHelper.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -38,2 +38,0 @@\n-import java.util.List;\n-\n@@ -63,1 +61,1 @@\n-        return (helper == null)? new SingleInvalidation<E>(observable, listener) : helper.addListener(listener);\n+        return (helper == null)? new SingleInvalidation<>(observable, listener) : helper.addListener(listener);\n@@ -77,1 +75,1 @@\n-        return (helper == null)? new SingleChange<E>(observable, listener) : helper.addListener(listener);\n+        return (helper == null)? new SingleChange<>(observable, listener) : helper.addListener(listener);\n@@ -91,1 +89,1 @@\n-        return (helper == null)? new SingleListChange<E>(observable, listener) : helper.addListener(listener);\n+        return (helper == null)? new SingleListChange<>(observable, listener) : helper.addListener(listener);\n@@ -148,1 +146,1 @@\n-            return new Generic<E>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -158,1 +156,1 @@\n-            return new Generic<E>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -168,1 +166,1 @@\n-            return new Generic<E>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -200,1 +198,1 @@\n-            return new Generic<E>(observable, listener, this.listener);\n+            return new Generic<>(observable, listener, this.listener);\n@@ -210,1 +208,1 @@\n-            return new Generic<E>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -220,1 +218,1 @@\n-            return new Generic<E>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -256,1 +254,1 @@\n-            return new Generic<E>(observable, listener, this.listener);\n+            return new Generic<>(observable, listener, this.listener);\n@@ -266,1 +264,1 @@\n-            return new Generic<E>(observable, listener, this.listener);\n+            return new Generic<>(observable, listener, this.listener);\n@@ -276,1 +274,1 @@\n-            return new Generic<E>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -293,1 +291,1 @@\n-                final Change<E> change = new NonIterableChange.GenericAddRemoveChange<E>(0, safeSize, safeOldValue, observable);\n+                final Change<E> change = new NonIterableChange.GenericAddRemoveChange<>(0, safeSize, safeOldValue, observable);\n@@ -391,1 +389,1 @@\n-                                return new SingleChange<E>(observable, changeListeners[0]);\n+                                return new SingleChange<>(observable, changeListeners[0]);\n@@ -393,1 +391,1 @@\n-                                return new SingleListChange<E>(observable, listChangeListeners[0]);\n+                                return new SingleListChange<>(observable, listChangeListeners[0]);\n@@ -398,1 +396,1 @@\n-                            return new SingleInvalidation<E>(observable, invalidationListeners[1-index]);\n+                            return new SingleInvalidation<>(observable, invalidationListeners[1-index]);\n@@ -453,1 +451,1 @@\n-                                return new SingleInvalidation<E>(observable, invalidationListeners[0]);\n+                                return new SingleInvalidation<>(observable, invalidationListeners[0]);\n@@ -455,1 +453,1 @@\n-                                return new SingleListChange<E>(observable, listChangeListeners[0]);\n+                                return new SingleListChange<>(observable, listChangeListeners[0]);\n@@ -460,1 +458,1 @@\n-                            return new SingleChange<E>(observable, changeListeners[1-index]);\n+                            return new SingleChange<>(observable, changeListeners[1-index]);\n@@ -515,1 +513,1 @@\n-                                return new SingleInvalidation<E>(observable, invalidationListeners[0]);\n+                                return new SingleInvalidation<>(observable, invalidationListeners[0]);\n@@ -517,1 +515,1 @@\n-                                return new SingleChange<E>(observable, changeListeners[0]);\n+                                return new SingleChange<>(observable, changeListeners[0]);\n@@ -522,1 +520,1 @@\n-                            return new SingleListChange<E>(observable, listChangeListeners[1-index]);\n+                            return new SingleListChange<>(observable, listChangeListeners[1-index]);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ListExpressionHelper.java","additions":22,"deletions":24,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        return (helper == null)? new SingleInvalidation<K, V>(observable, listener) : helper.addListener(listener);\n+        return (helper == null)? new SingleInvalidation<>(observable, listener) : helper.addListener(listener);\n@@ -63,1 +63,1 @@\n-        return (helper == null)? new SingleChange<K, V>(observable, listener) : helper.addListener(listener);\n+        return (helper == null)? new SingleChange<>(observable, listener) : helper.addListener(listener);\n@@ -77,1 +77,1 @@\n-        return (helper == null)? new SingleMapChange<K, V>(observable, listener) : helper.addListener(listener);\n+        return (helper == null)? new SingleMapChange<>(observable, listener) : helper.addListener(listener);\n@@ -134,1 +134,1 @@\n-            return new Generic<K, V>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -144,1 +144,1 @@\n-            return new Generic<K, V>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -154,1 +154,1 @@\n-            return new Generic<K, V>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -186,1 +186,1 @@\n-            return new Generic<K, V>(observable, listener, this.listener);\n+            return new Generic<>(observable, listener, this.listener);\n@@ -196,1 +196,1 @@\n-            return new Generic<K, V>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -206,1 +206,1 @@\n-            return new Generic<K, V>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -242,1 +242,1 @@\n-            return new Generic<K, V>(observable, listener, this.listener);\n+            return new Generic<>(observable, listener, this.listener);\n@@ -252,1 +252,1 @@\n-            return new Generic<K, V>(observable, listener, this.listener);\n+            return new Generic<>(observable, listener, this.listener);\n@@ -262,1 +262,1 @@\n-            return new Generic<K, V>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -275,1 +275,1 @@\n-                final SimpleChange<K, V> change = new SimpleChange<K, V>(observable);\n+                final SimpleChange<K, V> change = new SimpleChange<>(observable);\n@@ -309,1 +309,1 @@\n-            listener.onChanged(new SimpleChange<K, V>(observable, change));\n+            listener.onChanged(new SimpleChange<>(observable, change));\n@@ -400,1 +400,1 @@\n-                                return new SingleChange<K, V>(observable, changeListeners[0]);\n+                                return new SingleChange<>(observable, changeListeners[0]);\n@@ -402,1 +402,1 @@\n-                                return new SingleMapChange<K, V>(observable, mapChangeListeners[0]);\n+                                return new SingleMapChange<>(observable, mapChangeListeners[0]);\n@@ -462,1 +462,1 @@\n-                                return new SingleInvalidation<K, V>(observable, invalidationListeners[0]);\n+                                return new SingleInvalidation<>(observable, invalidationListeners[0]);\n@@ -464,1 +464,1 @@\n-                                return new SingleMapChange<K, V>(observable, mapChangeListeners[0]);\n+                                return new SingleMapChange<>(observable, mapChangeListeners[0]);\n@@ -524,1 +524,1 @@\n-                                return new SingleInvalidation<K, V>(observable, invalidationListeners[0]);\n+                                return new SingleInvalidation<>(observable, invalidationListeners[0]);\n@@ -526,1 +526,1 @@\n-                                return new SingleChange<K, V>(observable, changeListeners[0]);\n+                                return new SingleChange<>(observable, changeListeners[0]);\n@@ -567,1 +567,1 @@\n-            final SimpleChange<K, V> mappedChange = (mapChangeSize == 0)? null : new SimpleChange<K, V>(observable, change);\n+            final SimpleChange<K, V> mappedChange = (mapChangeSize == 0)? null : new SimpleChange<>(observable, change);\n@@ -593,1 +593,1 @@\n-                            change = new SimpleChange<K, V>(observable);\n+                            change = new SimpleChange<>(observable);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/MapExpressionHelper.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        return new ObjectConstant<T>(value);\n+        return new ObjectConstant<>(value);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ObjectConstant.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -473,1 +473,1 @@\n-                        propRefs[i] = new PropertyReference<Object>(obj.getClass(),\n+                        propRefs[i] = new PropertyReference<>(obj.getClass(),\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/SelectBinding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-        return (helper == null)? new SingleInvalidation<E>(observable, listener) : helper.addListener(listener);\n+        return (helper == null)? new SingleInvalidation<>(observable, listener) : helper.addListener(listener);\n@@ -62,1 +62,1 @@\n-        return (helper == null)? new SingleChange<E>(observable, listener) : helper.addListener(listener);\n+        return (helper == null)? new SingleChange<>(observable, listener) : helper.addListener(listener);\n@@ -76,1 +76,1 @@\n-        return (helper == null)? new SingleSetChange<E>(observable, listener) : helper.addListener(listener);\n+        return (helper == null)? new SingleSetChange<>(observable, listener) : helper.addListener(listener);\n@@ -133,1 +133,1 @@\n-            return new Generic<E>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -143,1 +143,1 @@\n-            return new Generic<E>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -153,1 +153,1 @@\n-            return new Generic<E>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -185,1 +185,1 @@\n-            return new Generic<E>(observable, listener, this.listener);\n+            return new Generic<>(observable, listener, this.listener);\n@@ -195,1 +195,1 @@\n-            return new Generic<E>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -205,1 +205,1 @@\n-            return new Generic<E>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -241,1 +241,1 @@\n-            return new Generic<E>(observable, listener, this.listener);\n+            return new Generic<>(observable, listener, this.listener);\n@@ -251,1 +251,1 @@\n-            return new Generic<E>(observable, listener, this.listener);\n+            return new Generic<>(observable, listener, this.listener);\n@@ -261,1 +261,1 @@\n-            return new Generic<E>(observable, this.listener, listener);\n+            return new Generic<>(observable, this.listener, listener);\n@@ -274,1 +274,1 @@\n-                final SimpleChange<E> change = new SimpleChange<E>(observable);\n+                final SimpleChange<E> change = new SimpleChange<>(observable);\n@@ -300,1 +300,1 @@\n-            listener.onChanged(new SimpleChange<E>(observable, change));\n+            listener.onChanged(new SimpleChange<>(observable, change));\n@@ -391,1 +391,1 @@\n-                                return new SingleChange<E>(observable, changeListeners[0]);\n+                                return new SingleChange<>(observable, changeListeners[0]);\n@@ -393,1 +393,1 @@\n-                                return new SingleSetChange<E>(observable, setChangeListeners[0]);\n+                                return new SingleSetChange<>(observable, setChangeListeners[0]);\n@@ -453,1 +453,1 @@\n-                                return new SingleInvalidation<E>(observable, invalidationListeners[0]);\n+                                return new SingleInvalidation<>(observable, invalidationListeners[0]);\n@@ -455,1 +455,1 @@\n-                                return new SingleSetChange<E>(observable, setChangeListeners[0]);\n+                                return new SingleSetChange<>(observable, setChangeListeners[0]);\n@@ -515,1 +515,1 @@\n-                                return new SingleInvalidation<E>(observable, invalidationListeners[0]);\n+                                return new SingleInvalidation<>(observable, invalidationListeners[0]);\n@@ -517,1 +517,1 @@\n-                                return new SingleChange<E>(observable, changeListeners[0]);\n+                                return new SingleChange<>(observable, changeListeners[0]);\n@@ -558,1 +558,1 @@\n-            final SimpleChange<E> mappedChange = (setChangeSize == 0)? null : new SimpleChange<E>(observable, change);\n+            final SimpleChange<E> mappedChange = (setChangeSize == 0)? null : new SimpleChange<>(observable, change);\n@@ -584,1 +584,1 @@\n-                            change = new SimpleChange<E>(observable);\n+                            change = new SimpleChange<>(observable);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/SetExpressionHelper.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        final List<ObservableValue<?>> dependencies = new ArrayList<ObservableValue<?>>();\n+        final List<ObservableValue<?>> dependencies = new ArrayList<>();\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/StringFormatter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import com.sun.javafx.logging.PlatformLogger;\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ArrayListenerHelper.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import javafx.collections.ListChangeListener.Change;\n@@ -42,1 +41,1 @@\n-public final class ElementObservableListDecorator<E> extends ObservableListBase<E> implements ObservableList<E> {\n+public final class ElementObservableListDecorator<E> extends ObservableListBase<E> {\n@@ -51,1 +50,1 @@\n-        this.observer = new ElementObserver<E>(extractor, new Callback<E, InvalidationListener>() {\n+        this.observer = new ElementObserver<>(extractor, new Callback<E, InvalidationListener>() {\n@@ -86,1 +85,1 @@\n-        listener = new ListChangeListener<E>() {\n+        listener = new ListChangeListener<>() {\n@@ -113,1 +112,1 @@\n-        this.decoratedList.addListener(new WeakListChangeListener<E> (listener));\n+        this.decoratedList.addListener(new WeakListChangeListener<> (listener));\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ElementObservableListDecorator.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.util.Iterator;\n-import java.util.RandomAccess;\n@@ -64,1 +62,1 @@\n-            new IdentityHashMap<E, ElementObserver.ElementsMapElement>();\n+            new IdentityHashMap<>();\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ElementObserver.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import com.sun.javafx.logging.PlatformLogger;\n-\n@@ -46,1 +44,1 @@\n-        return (helper == null)? new SingleInvalidation<E>(listener) : helper.addListener(listener);\n+        return (helper == null)? new SingleInvalidation<>(listener) : helper.addListener(listener);\n@@ -60,1 +58,1 @@\n-        return (helper == null)? new SingleChange<E>(listener) : helper.addListener(listener);\n+        return (helper == null)? new SingleChange<>(listener) : helper.addListener(listener);\n@@ -105,1 +103,1 @@\n-            return new Generic<E>(this.listener, listener);\n+            return new Generic<>(this.listener, listener);\n@@ -115,1 +113,1 @@\n-            return new Generic<E>(this.listener, listener);\n+            return new Generic<>(this.listener, listener);\n@@ -143,1 +141,1 @@\n-            return new Generic<E>(listener, this.listener);\n+            return new Generic<>(listener, this.listener);\n@@ -153,1 +151,1 @@\n-            return new Generic<E>(this.listener, listener);\n+            return new Generic<>(this.listener, listener);\n@@ -225,1 +223,1 @@\n-                                return new SingleChange<E>(changeListeners[0]);\n+                                return new SingleChange<>(changeListeners[0]);\n@@ -230,1 +228,1 @@\n-                            return new SingleInvalidation<E>(invalidationListeners[1-index]);\n+                            return new SingleInvalidation<>(invalidationListeners[1-index]);\n@@ -282,1 +280,1 @@\n-                                return new SingleInvalidation<E>(invalidationListeners[0]);\n+                                return new SingleInvalidation<>(invalidationListeners[0]);\n@@ -287,1 +285,1 @@\n-                            return new SingleChange<E>(changeListeners[1-index]);\n+                            return new SingleChange<>(changeListeners[1-index]);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ListListenerHelper.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import com.sun.javafx.logging.PlatformLogger;\n-\n@@ -46,1 +44,1 @@\n-        return (helper == null)? new SingleInvalidation<K, V>(listener) : helper.addListener(listener);\n+        return (helper == null)? new SingleInvalidation<>(listener) : helper.addListener(listener);\n@@ -60,1 +58,1 @@\n-        return (helper == null)? new SingleChange<K, V>(listener) : helper.addListener(listener);\n+        return (helper == null)? new SingleChange<>(listener) : helper.addListener(listener);\n@@ -104,1 +102,1 @@\n-            return new Generic<K, V>(this.listener, listener);\n+            return new Generic<>(this.listener, listener);\n@@ -114,1 +112,1 @@\n-            return new Generic<K, V>(this.listener, listener);\n+            return new Generic<>(this.listener, listener);\n@@ -142,1 +140,1 @@\n-            return new Generic<K, V>(listener, this.listener);\n+            return new Generic<>(listener, this.listener);\n@@ -152,1 +150,1 @@\n-            return new Generic<K, V>(this.listener, listener);\n+            return new Generic<>(this.listener, listener);\n@@ -224,1 +222,1 @@\n-                                return new SingleChange<K, V>(changeListeners[0]);\n+                                return new SingleChange<>(changeListeners[0]);\n@@ -229,1 +227,1 @@\n-                            return new SingleInvalidation<K, V>(invalidationListeners[1-index]);\n+                            return new SingleInvalidation<>(invalidationListeners[1-index]);\n@@ -281,1 +279,1 @@\n-                                return new SingleInvalidation<K, V>(invalidationListeners[0]);\n+                                return new SingleInvalidation<>(invalidationListeners[0]);\n@@ -286,1 +284,1 @@\n-                            return new SingleChange<K, V>(changeListeners[1-index]);\n+                            return new SingleChange<>(changeListeners[1-index]);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/MapListenerHelper.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-            removed = new AbstractList<F>() {\n+            removed = new AbstractList<>() {\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/MappingChange.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import javafx.collections.ObservableList;\n@@ -46,1 +45,1 @@\n-        ObservableList<E>, SortableList<E>, RandomAccess {\n+        SortableList<E>, RandomAccess {\n@@ -217,1 +216,1 @@\n-        fireChange(new SimplePermutationChange<E>(0, size(), perm, this));\n+        fireChange(new SimplePermutationChange<>(0, size(), perm, this));\n@@ -226,1 +225,1 @@\n-        fireChange(new SimplePermutationChange<E>(0, size(), perm, this));\n+        fireChange(new SimplePermutationChange<>(0, size(), perm, this));\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableListWrapper.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -265,1 +265,1 @@\n-            return new Iterator<K>() {\n+            return new Iterator<>() {\n@@ -388,1 +388,1 @@\n-            return new Iterator<V>() {\n+            return new Iterator<>() {\n@@ -576,1 +576,1 @@\n-            return new Iterator<Entry<K, V>>() {\n+            return new Iterator<>() {\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableMapWrapper.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import javafx.collections.ObservableList;\n@@ -39,1 +38,1 @@\n-public final class ObservableSequentialListWrapper<E> extends ModifiableObservableListBase<E> implements ObservableList<E>, SortableList<E>{\n+public final class ObservableSequentialListWrapper<E> extends ModifiableObservableListBase<E> implements SortableList<E>{\n@@ -99,1 +98,1 @@\n-        return new ListIterator<E>() {\n+        return new ListIterator<>() {\n@@ -240,1 +239,1 @@\n-        fireChange(new NonIterableChange.SimplePermutationChange<E>(0, size(), perm, this));\n+        fireChange(new NonIterableChange.SimplePermutationChange<>(0, size(), perm, this));\n@@ -249,1 +248,1 @@\n-        fireChange(new NonIterableChange.SimplePermutationChange<E>(0, size(), perm, this));\n+        fireChange(new NonIterableChange.SimplePermutationChange<>(0, size(), perm, this));\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableSequentialListWrapper.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import com.sun.javafx.logging.PlatformLogger;\n-\n@@ -46,1 +44,1 @@\n-        return (helper == null)? new SingleInvalidation<E>(listener) : helper.addListener(listener);\n+        return (helper == null)? new SingleInvalidation<>(listener) : helper.addListener(listener);\n@@ -60,1 +58,1 @@\n-        return (helper == null)? new SingleChange<E>(listener) : helper.addListener(listener);\n+        return (helper == null)? new SingleChange<>(listener) : helper.addListener(listener);\n@@ -104,1 +102,1 @@\n-            return new Generic<E>(this.listener, listener);\n+            return new Generic<>(this.listener, listener);\n@@ -114,1 +112,1 @@\n-            return new Generic<E>(this.listener, listener);\n+            return new Generic<>(this.listener, listener);\n@@ -142,1 +140,1 @@\n-            return new Generic<E>(listener, this.listener);\n+            return new Generic<>(listener, this.listener);\n@@ -152,1 +150,1 @@\n-            return new Generic<E>(this.listener, listener);\n+            return new Generic<>(this.listener, listener);\n@@ -224,1 +222,1 @@\n-                                return new SingleChange<E>(changeListeners[0]);\n+                                return new SingleChange<>(changeListeners[0]);\n@@ -229,1 +227,1 @@\n-                            return new SingleInvalidation<E>(invalidationListeners[1-index]);\n+                            return new SingleInvalidation<>(invalidationListeners[1-index]);\n@@ -281,1 +279,1 @@\n-                                return new SingleInvalidation<E>(invalidationListeners[0]);\n+                                return new SingleInvalidation<>(invalidationListeners[0]);\n@@ -286,1 +284,1 @@\n-                            return new SingleChange<E>(changeListeners[1-index]);\n+                            return new SingleChange<>(changeListeners[1-index]);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/SetListenerHelper.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-            i.set((T)a[j]);\n+            i.set(a[j]);\n@@ -77,1 +77,1 @@\n-        T[] aux = (T[]) a.clone();\n+        T[] aux = a.clone();\n@@ -91,1 +91,1 @@\n-        T[] aux = (T[])copyOfRange(a, fromIndex, toIndex);\n+        T[] aux = copyOfRange(a, fromIndex, toIndex);\n@@ -104,1 +104,1 @@\n-        int[] aux = (int[])copyOfRange(a, fromIndex, toIndex);\n+        int[] aux = copyOfRange(a, fromIndex, toIndex);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/SortHelper.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+    @Override\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/SortableList.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import javafx.collections.ListChangeListener;\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/TrackableObservableList.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-        return new Iterator<E>() {\n+        return new Iterator<>() {\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/UnmodifiableListSet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.util.HashSet;\n@@ -58,1 +57,1 @@\n-            callObservers(new MapAdapterChange<K, V>(UnmodifiableObservableMap.this, c));\n+            callObservers(new MapAdapterChange<>(UnmodifiableObservableMap.this, c));\n@@ -60,1 +59,1 @@\n-        this.backingMap.addListener(new WeakMapChangeListener<K, V>(listener));\n+        this.backingMap.addListener(new WeakMapChangeListener<>(listener));\n@@ -112,0 +111,1 @@\n+    @Override\n@@ -119,0 +119,1 @@\n+    @Override\n@@ -126,0 +127,1 @@\n+    @Override\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/UnmodifiableObservableMap.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-                    new SourceAdapterChange<E>(VetoableListDecorator.this, c));\n+                    new SourceAdapterChange<>(VetoableListDecorator.this, c));\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/VetoableListDecorator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-                new HashSet<EventTarget>(eventTargets.length);\n+                new HashSet<>(eventTargets.length);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/event\/CompositeEventTargetImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-            new EventType<DirectEvent>(Event.ANY, \"DIRECT\");\n+            new EventType<>(Event.ANY, \"DIRECT\");\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/event\/DirectEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,3 +49,1 @@\n-        eventHandlerMap =\n-                new HashMap<EventType<? extends Event>,\n-                            CompositeEventHandler<? extends Event>>();\n+        eventHandlerMap = new HashMap<>();\n@@ -159,1 +157,1 @@\n-            compositeEventHandler = new CompositeEventHandler<T>();\n+            compositeEventHandler = new CompositeEventHandler<>();\n@@ -203,1 +201,1 @@\n-            compositeEventHandler = new CompositeEventHandler<T>();\n+            compositeEventHandler = new CompositeEventHandler<>();\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/event\/EventHandlerManager.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-    private Queue<Event> queue = new ArrayDeque<Event>();\n+    private Queue<Event> queue = new ArrayDeque<>();\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/event\/EventQueue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        this.eventDispatchers = new CopyOnWriteArrayList<EventDispatcher>();\n+        this.eventDispatchers = new CopyOnWriteArrayList<>();\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/event\/EventRedirector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-            new EventType<RedirectedEvent>(Event.ANY, \"REDIRECTED\");\n+            new EventType<>(Event.ANY, \"REDIRECTED\");\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/event\/RedirectedEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-    };\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/logging\/PlatformLogger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,2 +58,1 @@\n-    private static long THRESHOLD = (long)\n-            AccessController.doPrivileged((PrivilegedAction<Integer>) () -> Integer.getInteger(\"javafx.pulseLogger.threshold\", 17));\n+    private static long THRESHOLD = AccessController.doPrivileged((PrivilegedAction<Integer>) () -> Integer.getInteger(\"javafx.pulseLogger.threshold\", 17));\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/logging\/PrintLogger.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        currentPulsePhaseEvent = new ThreadLocal<JFRPulsePhaseEvent>() {\n+        currentPulsePhaseEvent = new ThreadLocal<>() {\n@@ -57,1 +57,1 @@\n-        currentInputEvent = new ThreadLocal<JFRInputEvent>() {\n+        currentInputEvent = new ThreadLocal<>() {\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/logging\/jfr\/JFRPulseLogger.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+                @Override\n@@ -87,0 +88,1 @@\n+    @Override\n@@ -92,1 +94,1 @@\n-                Runnable rec = (Runnable)records.remove(obj);\n+                Runnable rec = records.remove(obj);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/property\/adapter\/Disposer.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-            this.propertyRef = new WeakReference<ReadOnlyJavaBeanProperty<T>>(property);\n+            this.propertyRef = new WeakReference<>(property);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/property\/adapter\/ReadOnlyPropertyDescriptor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.io.EOFException;\n@@ -36,1 +35,0 @@\n-import java.io.BufferedInputStream;\n@@ -38,2 +36,0 @@\n-import java.net.URL;\n-import java.net.URLConnection;\n@@ -46,1 +42,0 @@\n-import com.sun.javafx.reflect.ReflectUtil;\n@@ -117,1 +112,1 @@\n-        Map<Signature, Method> sigs = new HashMap<Signature, Method>();\n+        Map<Signature, Method> sigs = new HashMap<>();\n@@ -301,0 +296,1 @@\n+                    @Override\n@@ -317,0 +313,1 @@\n+    @Override\n@@ -340,0 +337,1 @@\n+    @Override\n@@ -374,0 +372,1 @@\n+    @Override\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/reflect\/MethodUtil.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import javafx.beans.NamedArg;\n@@ -65,1 +64,1 @@\n-        this.ref = new WeakReference<InvalidationListener>(listener);\n+        this.ref = new WeakReference<>(listener);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/WeakInvalidationListener.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-                        : new ImmutableObservableList<Observable>(dependencies);\n+                        : new ImmutableObservableList<>(dependencies);\n@@ -227,1 +227,1 @@\n-                        : new ImmutableObservableList<Observable>(dependencies);\n+                        : new ImmutableObservableList<>(dependencies);\n@@ -273,1 +273,1 @@\n-                        : new ImmutableObservableList<Observable>(dependencies);\n+                        : new ImmutableObservableList<>(dependencies);\n@@ -319,1 +319,1 @@\n-                        : new ImmutableObservableList<Observable>(dependencies);\n+                        : new ImmutableObservableList<>(dependencies);\n@@ -365,1 +365,1 @@\n-                        : new ImmutableObservableList<Observable>(dependencies);\n+                        : new ImmutableObservableList<>(dependencies);\n@@ -380,1 +380,1 @@\n-        return new ObjectBinding<T>() {\n+        return new ObjectBinding<>() {\n@@ -412,1 +412,1 @@\n-                        : new ImmutableObservableList<Observable>(dependencies);\n+                        : new ImmutableObservableList<>(dependencies);\n@@ -458,1 +458,1 @@\n-                        : new ImmutableObservableList<Observable>(dependencies);\n+                        : new ImmutableObservableList<>(dependencies);\n@@ -496,1 +496,1 @@\n-        return new SelectBinding.AsObject<T>(root, steps);\n+        return new SelectBinding.AsObject<>(root, steps);\n@@ -683,1 +683,1 @@\n-        return new SelectBinding.AsObject<T>(root, steps);\n+        return new SelectBinding.AsObject<>(root, steps);\n@@ -1391,1 +1391,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -1414,1 +1414,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -1437,1 +1437,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -1460,1 +1460,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -1648,1 +1648,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -1671,1 +1671,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -1694,1 +1694,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -1717,1 +1717,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -1905,1 +1905,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -1928,1 +1928,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -1951,1 +1951,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -1974,1 +1974,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -2162,1 +2162,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -2185,1 +2185,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -2208,1 +2208,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -2231,1 +2231,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -2419,1 +2419,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -2442,1 +2442,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -2465,1 +2465,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -2488,1 +2488,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -2854,1 +2854,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -2877,1 +2877,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -2900,1 +2900,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -2923,1 +2923,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -3289,1 +3289,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -3312,1 +3312,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -3335,1 +3335,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -3358,1 +3358,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -3708,1 +3708,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -3731,1 +3731,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -3754,1 +3754,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -3777,1 +3777,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -4128,1 +4128,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -4151,1 +4151,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -4174,1 +4174,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -4197,1 +4197,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -4385,1 +4385,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -4408,1 +4408,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -4431,1 +4431,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -4454,1 +4454,1 @@\n-                            : new ImmutableObservableList<Observable>(dependencies);\n+                            : new ImmutableObservableList<>(dependencies);\n@@ -4848,1 +4848,1 @@\n-                return new ImmutableObservableList<ObservableBooleanValue>(op1, op2);\n+                return new ImmutableObservableList<>(op1, op2);\n@@ -4888,1 +4888,1 @@\n-                return new ImmutableObservableList<ObservableBooleanValue>(op1, op2);\n+                return new ImmutableObservableList<>(op1, op2);\n@@ -5017,1 +5017,1 @@\n-                        : new ImmutableObservableList<Observable>(dependencies);\n+                        : new ImmutableObservableList<>(dependencies);\n@@ -5109,1 +5109,1 @@\n-                        : new ImmutableObservableList<Observable>(dependencies);\n+                        : new ImmutableObservableList<>(dependencies);\n@@ -5201,1 +5201,1 @@\n-                        : new ImmutableObservableList<Observable>(dependencies);\n+                        : new ImmutableObservableList<>(dependencies);\n@@ -5293,1 +5293,1 @@\n-                        : new ImmutableObservableList<Observable>(dependencies);\n+                        : new ImmutableObservableList<>(dependencies);\n@@ -5386,1 +5386,1 @@\n-                        : new ImmutableObservableList<Observable>(dependencies);\n+                        : new ImmutableObservableList<>(dependencies);\n@@ -5544,1 +5544,1 @@\n-                        : new ImmutableObservableList<Observable>(dependencies);\n+                        : new ImmutableObservableList<>(dependencies);\n@@ -5828,1 +5828,1 @@\n-                        : new ImmutableObservableList<Observable>(dependencies);\n+                        : new ImmutableObservableList<>(dependencies);\n@@ -5911,1 +5911,1 @@\n-                        : new ImmutableObservableList<Observable>(dependencies);\n+                        : new ImmutableObservableList<>(dependencies);\n@@ -6184,1 +6184,1 @@\n-        return new ObjectBinding<E>() {\n+        return new ObjectBinding<>() {\n@@ -6244,1 +6244,1 @@\n-        return new ObjectBinding<E>() {\n+        return new ObjectBinding<>() {\n@@ -6266,1 +6266,1 @@\n-                return new ImmutableObservableList<Observable>(op, index);\n+                return new ImmutableObservableList<>(op, index);\n@@ -6381,1 +6381,1 @@\n-                return new ImmutableObservableList<Observable>(op, index);\n+                return new ImmutableObservableList<>(op, index);\n@@ -6496,1 +6496,1 @@\n-                return new ImmutableObservableList<Observable>(op, index);\n+                return new ImmutableObservableList<>(op, index);\n@@ -6611,1 +6611,1 @@\n-                return new ImmutableObservableList<Observable>(op, index);\n+                return new ImmutableObservableList<>(op, index);\n@@ -6726,1 +6726,1 @@\n-                return new ImmutableObservableList<Observable>(op, index);\n+                return new ImmutableObservableList<>(op, index);\n@@ -6841,1 +6841,1 @@\n-                return new ImmutableObservableList<Observable>(op, index);\n+                return new ImmutableObservableList<>(op, index);\n@@ -6946,1 +6946,1 @@\n-                return new ImmutableObservableList<Observable>(op, index);\n+                return new ImmutableObservableList<>(op, index);\n@@ -7462,1 +7462,1 @@\n-        return new ObjectBinding<V>() {\n+        return new ObjectBinding<>() {\n@@ -7510,1 +7510,1 @@\n-        return new ObjectBinding<V>() {\n+        return new ObjectBinding<>() {\n@@ -7536,1 +7536,1 @@\n-                return new ImmutableObservableList<Observable>(op, key);\n+                return new ImmutableObservableList<>(op, key);\n@@ -7642,1 +7642,1 @@\n-                return new ImmutableObservableList<Observable>(op, key);\n+                return new ImmutableObservableList<>(op, key);\n@@ -7748,1 +7748,1 @@\n-                return new ImmutableObservableList<Observable>(op, key);\n+                return new ImmutableObservableList<>(op, key);\n@@ -7854,1 +7854,1 @@\n-                return new ImmutableObservableList<Observable>(op, key);\n+                return new ImmutableObservableList<>(op, key);\n@@ -7960,1 +7960,1 @@\n-                return new ImmutableObservableList<Observable>(op, key);\n+                return new ImmutableObservableList<>(op, key);\n@@ -8066,1 +8066,1 @@\n-                return new ImmutableObservableList<Observable>(op, key);\n+                return new ImmutableObservableList<>(op, key);\n@@ -8162,1 +8162,1 @@\n-                return new ImmutableObservableList<Observable>(op, key);\n+                return new ImmutableObservableList<>(op, key);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/Bindings.java","additions":78,"deletions":78,"binary":false,"changes":156,"status":"modified"},{"patch":"@@ -237,1 +237,1 @@\n-        return new ObjectBinding<Boolean>() {\n+        return new ObjectBinding<>() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/BooleanExpression.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -294,1 +294,1 @@\n-        return new ObjectBinding<Double>() {\n+        return new ObjectBinding<>() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/DoubleExpression.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        return (double) get();\n+        return get();\n@@ -274,1 +274,1 @@\n-        return new ObjectBinding<Float>() {\n+        return new ObjectBinding<>() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/FloatExpression.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-        return (long) get();\n+        return get();\n@@ -64,1 +64,1 @@\n-        return (float) get();\n+        return get();\n@@ -69,1 +69,1 @@\n-        return (double) get();\n+        return get();\n@@ -274,1 +274,1 @@\n-        return new ObjectBinding<Integer>() {\n+        return new ObjectBinding<>() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/IntegerExpression.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-    private final ListChangeListener<E> listChangeListener = new ListChangeListener<E>() {\n+    private final ListChangeListener<E> listChangeListener = new ListChangeListener<>() {\n@@ -114,0 +114,1 @@\n+        @Override\n@@ -144,0 +145,1 @@\n+        @Override\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/ListBinding.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-                : new ListBinding<E>() {\n+                : new ListBinding<>() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/ListExpression.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-        return (float) get();\n+        return get();\n@@ -68,1 +68,1 @@\n-        return (double) get();\n+        return get();\n@@ -271,1 +271,1 @@\n-        return new ObjectBinding<Long>() {\n+        return new ObjectBinding<>() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/LongExpression.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-    private final MapChangeListener<K, V> mapChangeListener = new MapChangeListener<K, V>() {\n+    private final MapChangeListener<K, V> mapChangeListener = new MapChangeListener<>() {\n@@ -117,0 +117,1 @@\n+        @Override\n@@ -147,0 +148,1 @@\n+        @Override\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/MapBinding.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-                : new MapBinding<K, V>() {\n+                : new MapBinding<>() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/MapExpression.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-                : new ObjectBinding<T>() {\n+                : new ObjectBinding<>() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/ObjectExpression.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-    private final SetChangeListener<E> setChangeListener = new SetChangeListener<E>() {\n+    private final SetChangeListener<E> setChangeListener = new SetChangeListener<>() {\n@@ -115,0 +115,1 @@\n+        @Override\n@@ -145,0 +146,1 @@\n+        @Override\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/SetBinding.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-                : new SetBinding<E>() {\n+                : new SetBinding<>() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/SetExpression.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-            this.ref = new WeakReference<Binding<?>>(binding);\n+            this.ref = new WeakReference<>(binding);\n@@ -839,1 +839,1 @@\n-                return new ObjectCondition<T>(trueResult, otherwiseValue);\n+                return new ObjectCondition<>(trueResult, otherwiseValue);\n@@ -841,1 +841,1 @@\n-                return new ObjectCondition<T>(trueResultValue, otherwiseValue);\n+                return new ObjectCondition<>(trueResultValue, otherwiseValue);\n@@ -854,1 +854,1 @@\n-                return new ObjectCondition<T>(trueResult, otherwiseValue);\n+                return new ObjectCondition<>(trueResult, otherwiseValue);\n@@ -856,1 +856,1 @@\n-                return new ObjectCondition<T>(trueResultValue, otherwiseValue);\n+                return new ObjectCondition<>(trueResultValue, otherwiseValue);\n@@ -873,1 +873,1 @@\n-        return new ObjectConditionBuilder<T>(thenValue);\n+        return new ObjectConditionBuilder<>(thenValue);\n@@ -886,1 +886,1 @@\n-        return new ObjectConditionBuilder<T>(thenValue);\n+        return new ObjectConditionBuilder<>(thenValue);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/When.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    private ObservableFloatValue observable = null;;\n+    private ObservableFloatValue observable = null;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/FloatPropertyBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    private ObservableIntegerValue observable = null;;\n+    private ObservableIntegerValue observable = null;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/IntegerPropertyBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,0 +111,1 @@\n+        @Override\n@@ -141,0 +142,1 @@\n+        @Override\n@@ -327,1 +329,1 @@\n-            this.wref = new WeakReference<ListPropertyBase<E>>(ref);\n+            this.wref = new WeakReference<>(ref);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ListPropertyBase.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    private ObservableLongValue observable = null;;\n+    private ObservableLongValue observable = null;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/LongPropertyBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    private ObservableValue<? extends T> observable = null;;\n+    private ObservableValue<? extends T> observable = null;\n@@ -225,1 +225,1 @@\n-            this.wref = new WeakReference<ObjectPropertyBase<?>>(ref);\n+            this.wref = new WeakReference<>(ref);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ObjectPropertyBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import javafx.beans.Observable;\n@@ -138,1 +137,1 @@\n-        return new ReadOnlyObjectPropertyBase<Boolean>() {\n+        return new ReadOnlyObjectPropertyBase<>() {\n@@ -168,1 +167,1 @@\n-    };\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyBooleanProperty.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-    };\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyBooleanWrapper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import javafx.beans.Observable;\n@@ -139,1 +138,1 @@\n-        return new ReadOnlyObjectPropertyBase<Double>() {\n+        return new ReadOnlyObjectPropertyBase<>() {\n@@ -169,1 +168,1 @@\n-    };\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyDoubleProperty.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-    };\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyDoubleWrapper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import javafx.beans.Observable;\n@@ -139,1 +138,1 @@\n-        return new ReadOnlyObjectPropertyBase<Float>() {\n+        return new ReadOnlyObjectPropertyBase<>() {\n@@ -169,1 +168,1 @@\n-    };\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyFloatProperty.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-    };\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyFloatWrapper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import javafx.beans.Observable;\n@@ -140,1 +139,1 @@\n-        return new ReadOnlyObjectPropertyBase<Integer>() {\n+        return new ReadOnlyObjectPropertyBase<>() {\n@@ -170,1 +169,1 @@\n-    };\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyIntegerProperty.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-    };\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyIntegerWrapper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import javafx.beans.Observable;\n@@ -138,1 +137,1 @@\n-        return new ReadOnlyObjectPropertyBase<Long>() {\n+        return new ReadOnlyObjectPropertyBase<>() {\n@@ -168,1 +167,1 @@\n-    };\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyLongProperty.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-    };\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyLongWrapper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.util.Iterator;\n@@ -30,1 +29,0 @@\n-import java.util.Map.Entry;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyMapProperty.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-    };\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyObjectWrapper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.util.Collection;\n-import java.util.Iterator;\n@@ -33,1 +31,0 @@\n-import javafx.collections.ObservableList;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlySetProperty.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-    };\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyStringWrapper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import javafx.beans.value.WritableListValue;\n@@ -31,1 +30,0 @@\n-import javafx.collections.ObservableList;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/SetProperty.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -329,1 +329,1 @@\n-            this.wref = new WeakReference<SetPropertyBase<E>>(ref);\n+            this.wref = new WeakReference<>(ref);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/SetPropertyBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import javafx.collections.ObservableSet;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/SimpleMapProperty.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-        this.lRef = new WeakReference<ReadOnlyPropertyDescriptor.ReadOnlyListener<?>>(l);\n+        this.lRef = new WeakReference<>(l);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/DescriptorListenerCleaner.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-        this.listener = descriptor.new Listener<Boolean>(bean, this);\n+        this.listener = descriptor.new Listener<>(bean, this);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanBooleanProperty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-        this.listener = descriptor.new Listener<Number>(bean, this);\n+        this.listener = descriptor.new Listener<>(bean, this);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanDoubleProperty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-        this.listener = descriptor.new Listener<Number>(bean, this);\n+        this.listener = descriptor.new Listener<>(bean, this);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanFloatProperty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-        this.listener = descriptor.new Listener<Number>(bean, this);\n+        this.listener = descriptor.new Listener<>(bean, this);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanIntegerProperty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-        this.listener = descriptor.new Listener<Number>(bean, this);\n+        this.listener = descriptor.new Listener<>(bean, this);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanLongProperty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-        this.listener = descriptor.new Listener<T>(bean, this);\n+        this.listener = descriptor.new Listener<>(bean, this);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanObjectProperty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-        return new JavaBeanObjectProperty<T>(descriptor, helper.getBean());\n+        return new JavaBeanObjectProperty<>(descriptor, helper.getBean());\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanObjectPropertyBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-        this.listener = descriptor.new Listener<String>(bean, this);\n+        this.listener = descriptor.new Listener<>(bean, this);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanStringProperty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-        this.listener = descriptor.new ReadOnlyListener<Boolean>(bean, this);\n+        this.listener = descriptor.new ReadOnlyListener<>(bean, this);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanBooleanProperty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-        this.listener = descriptor.new ReadOnlyListener<Number>(bean, this);\n+        this.listener = descriptor.new ReadOnlyListener<>(bean, this);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanDoubleProperty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-        this.listener = descriptor.new ReadOnlyListener<Number>(bean, this);\n+        this.listener = descriptor.new ReadOnlyListener<>(bean, this);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanFloatProperty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-        this.listener = descriptor.new ReadOnlyListener<Number>(bean, this);\n+        this.listener = descriptor.new ReadOnlyListener<>(bean, this);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanIntegerProperty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-        this.listener = descriptor.new ReadOnlyListener<Number>(bean, this);\n+        this.listener = descriptor.new ReadOnlyListener<>(bean, this);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanLongProperty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-        this.listener = descriptor.new ReadOnlyListener<T>(bean, this);\n+        this.listener = descriptor.new ReadOnlyListener<>(bean, this);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanObjectProperty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-        return new ReadOnlyJavaBeanObjectPropertyBuilder<T>();\n+        return new ReadOnlyJavaBeanObjectPropertyBuilder<>();\n@@ -86,1 +86,1 @@\n-        return new ReadOnlyJavaBeanObjectProperty<T>(descriptor, helper.getBean());\n+        return new ReadOnlyJavaBeanObjectProperty<>(descriptor, helper.getBean());\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanObjectPropertyBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-        this.listener = descriptor.new ReadOnlyListener<String>(bean, this);\n+        this.listener = descriptor.new ReadOnlyListener<>(bean, this);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanStringProperty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-import java.util.ArrayList;\n-import java.util.List;\n-\n@@ -33,1 +30,0 @@\n-import javafx.beans.Observable;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/ObservableValueBase.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        this.ref = new WeakReference<ChangeListener<T>>(listener);\n+        this.ref = new WeakReference<>(listener);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/WeakChangeListener.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,0 @@\n-import javafx.collections.ListChangeListener.Change;\n@@ -100,2 +99,2 @@\n-        return list instanceof RandomAccess ? new ObservableListWrapper<E>(list) :\n-                new ObservableSequentialListWrapper<E>(list);\n+        return list instanceof RandomAccess ? new ObservableListWrapper<>(list) :\n+                new ObservableSequentialListWrapper<>(list);\n@@ -128,2 +127,2 @@\n-        return list instanceof RandomAccess ? new ObservableListWrapper<E>(list, extractor) :\n-            new ObservableSequentialListWrapper<E>(list, extractor);\n+        return list instanceof RandomAccess ? new ObservableListWrapper<>(list, extractor) :\n+            new ObservableSequentialListWrapper<>(list, extractor);\n@@ -147,1 +146,1 @@\n-        return new ObservableMapWrapper<K, V>(map);\n+        return new ObservableMapWrapper<>(map);\n@@ -165,1 +164,1 @@\n-        return new ObservableSetWrapper<E>(set);\n+        return new ObservableSetWrapper<>(set);\n@@ -180,1 +179,1 @@\n-        Set<E> set = new HashSet<E>(elements.length);\n+        Set<E> set = new HashSet<>(elements.length);\n@@ -182,1 +181,1 @@\n-        return new ObservableSetWrapper<E>(set);\n+        return new ObservableSetWrapper<>(set);\n@@ -199,1 +198,1 @@\n-        return new com.sun.javafx.collections.UnmodifiableObservableMap<K, V>(map);\n+        return new com.sun.javafx.collections.UnmodifiableObservableMap<>(map);\n@@ -217,1 +216,1 @@\n-        return new CheckedObservableMap<K, V>(map, keyType, valueType);\n+        return new CheckedObservableMap<>(map, keyType, valueType);\n@@ -233,1 +232,1 @@\n-        return new SynchronizedObservableMap<K, V>(map);\n+        return new SynchronizedObservableMap<>(map);\n@@ -388,1 +387,1 @@\n-        ArrayList<E> backingList = new ArrayList<E>();\n+        ArrayList<E> backingList = new ArrayList<>();\n@@ -407,1 +406,1 @@\n-        return new UnmodifiableObservableListImpl<E>(list);\n+        return new UnmodifiableObservableListImpl<>(list);\n@@ -422,1 +421,1 @@\n-        return new CheckedObservableList<E>(list, type);\n+        return new CheckedObservableList<>(list, type);\n@@ -436,1 +435,1 @@\n-        return new SynchronizedObservableList<E>(list);\n+        return new SynchronizedObservableList<>(list);\n@@ -461,1 +460,1 @@\n-        return new SingletonObservableList<E>(e);\n+        return new SingletonObservableList<>(e);\n@@ -476,1 +475,1 @@\n-        return new UnmodifiableObservableSet<E>(set);\n+        return new UnmodifiableObservableSet<>(set);\n@@ -492,1 +491,1 @@\n-        return new CheckedObservableSet<E>(set, type);\n+        return new CheckedObservableSet<>(set, type);\n@@ -507,1 +506,1 @@\n-        return new SynchronizedObservableSet<E>(set);\n+        return new SynchronizedObservableSet<>(set);\n@@ -684,1 +683,1 @@\n-            List<T> newContent = new ArrayList<T>(list);\n+            List<T> newContent = new ArrayList<>(list);\n@@ -686,1 +685,1 @@\n-            list.setAll((Collection<T>)newContent);\n+            list.setAll(newContent);\n@@ -703,1 +702,1 @@\n-            List<T> newContent = new ArrayList<T>(list);\n+            List<T> newContent = new ArrayList<>(list);\n@@ -705,1 +704,1 @@\n-            list.setAll((Collection<T>)newContent);\n+            list.setAll(newContent);\n@@ -951,1 +950,1 @@\n-    private static class UnmodifiableObservableListImpl<T> extends ObservableListBase<T> implements ObservableList<T> {\n+    private static class UnmodifiableObservableListImpl<T> extends ObservableListBase<T> {\n@@ -959,1 +958,1 @@\n-                fireChange(new SourceAdapterChange<T>(UnmodifiableObservableListImpl.this, c));\n+                fireChange(new SourceAdapterChange<>(UnmodifiableObservableListImpl.this, c));\n@@ -961,1 +960,1 @@\n-            this.backingList.addListener(new WeakListChangeListener<T>(listener));\n+            this.backingList.addListener(new WeakListChangeListener<>(listener));\n@@ -1174,1 +1173,1 @@\n-                return new SynchronizedList<T>(backingList.subList(fromIndex, toIndex),\n+                return new SynchronizedList<>(backingList.subList(fromIndex, toIndex),\n@@ -1213,1 +1212,1 @@\n-                ListListenerHelper.fireValueChangedEvent(helper, new SourceAdapterChange<T>(SynchronizedObservableList.this, c));\n+                ListListenerHelper.fireValueChangedEvent(helper, new SourceAdapterChange<>(SynchronizedObservableList.this, c));\n@@ -1215,1 +1214,1 @@\n-            backingList.addListener(new WeakListChangeListener<T>(listener));\n+            backingList.addListener(new WeakListChangeListener<>(listener));\n@@ -1291,1 +1290,1 @@\n-    private static class CheckedObservableList<T> extends ObservableListBase<T> implements ObservableList<T> {\n+    private static class CheckedObservableList<T> extends ObservableListBase<T> {\n@@ -1304,1 +1303,1 @@\n-                fireChange(new SourceAdapterChange<T>(CheckedObservableList.this, c));\n+                fireChange(new SourceAdapterChange<>(CheckedObservableList.this, c));\n@@ -1306,1 +1305,1 @@\n-            list.addListener(new WeakListChangeListener<T>(listener));\n+            list.addListener(new WeakListChangeListener<>(listener));\n@@ -1462,1 +1461,1 @@\n-            return new ListIterator<T>() {\n+            return new ListIterator<>() {\n@@ -1517,1 +1516,1 @@\n-            return new Iterator<T>() {\n+            return new Iterator<>() {\n@@ -1677,1 +1676,1 @@\n-                    callObservers(new SetAdapterChange<E>(UnmodifiableObservableSet.this, c));\n+                    callObservers(new SetAdapterChange<>(UnmodifiableObservableSet.this, c));\n@@ -1679,1 +1678,1 @@\n-                this.backingSet.addListener(new WeakSetChangeListener<E>(listener));\n+                this.backingSet.addListener(new WeakSetChangeListener<>(listener));\n@@ -1689,1 +1688,1 @@\n-            return new Iterator<E>() {\n+            return new Iterator<>() {\n@@ -1903,1 +1902,1 @@\n-                SetListenerHelper.fireValueChangedEvent(listenerHelper, new SetAdapterChange<E>(SynchronizedObservableSet.this, c));\n+                SetListenerHelper.fireValueChangedEvent(listenerHelper, new SetAdapterChange<>(SynchronizedObservableSet.this, c));\n@@ -1905,1 +1904,1 @@\n-            backingSet.addListener(new WeakSetChangeListener<E>(listener));\n+            backingSet.addListener(new WeakSetChangeListener<>(listener));\n@@ -1950,1 +1949,1 @@\n-                callObservers(new SetAdapterChange<E>(CheckedObservableSet.this, c));\n+                callObservers(new SetAdapterChange<>(CheckedObservableSet.this, c));\n@@ -1952,1 +1951,1 @@\n-            backingSet.addListener(new WeakSetChangeListener<E>(listener));\n+            backingSet.addListener(new WeakSetChangeListener<>(listener));\n@@ -2070,1 +2069,1 @@\n-            return new Iterator<E>() {\n+            return new Iterator<>() {\n@@ -2175,1 +2174,1 @@\n-                callObservers(new MapAdapterChange<K, V>(CheckedObservableMap.this, c));\n+                callObservers(new MapAdapterChange<>(CheckedObservableMap.this, c));\n@@ -2177,1 +2176,1 @@\n-            backingMap.addListener(new WeakMapChangeListener<K, V>(listener));\n+            backingMap.addListener(new WeakMapChangeListener<>(listener));\n@@ -2264,1 +2263,1 @@\n-                new ArrayList<Map.Entry<K,V>>(entries.length);\n+                new ArrayList<>(entries.length);\n@@ -2271,1 +2270,1 @@\n-                    new AbstractMap.SimpleImmutableEntry<K,V>((K) k, (V) v));\n+                    new AbstractMap.SimpleImmutableEntry<>((K) k, (V) v));\n@@ -2297,1 +2296,1 @@\n-                entrySet = new CheckedEntrySet<K,V>(backingMap.entrySet(), valueType);\n+                entrySet = new CheckedEntrySet<>(backingMap.entrySet(), valueType);\n@@ -2360,1 +2359,1 @@\n-                return new Iterator<Map.Entry<K,V>>() {\n+                return new Iterator<>() {\n@@ -2488,1 +2487,1 @@\n-                return new CheckedEntry<K,V,T>(e, valueType);\n+                return new CheckedEntry<>(e, valueType);\n@@ -2633,1 +2632,1 @@\n-                    keySet = new SynchronizedSet<K>(backingMap.keySet(), mutex);\n+                    keySet = new SynchronizedSet<>(backingMap.keySet(), mutex);\n@@ -2642,1 +2641,1 @@\n-                    values = new SynchronizedCollection<V>(backingMap.values(), mutex);\n+                    values = new SynchronizedCollection<>(backingMap.values(), mutex);\n@@ -2651,1 +2650,1 @@\n-                    entrySet = new SynchronizedSet<Map.Entry<K,V>>(backingMap.entrySet(), mutex);\n+                    entrySet = new SynchronizedSet<>(backingMap.entrySet(), mutex);\n@@ -2789,1 +2788,1 @@\n-                MapListenerHelper.fireValueChangedEvent(listenerHelper, new MapAdapterChange<K, V>(SynchronizedObservableMap.this, c));\n+                MapListenerHelper.fireValueChangedEvent(listenerHelper, new MapAdapterChange<>(SynchronizedObservableMap.this, c));\n@@ -2791,1 +2790,1 @@\n-            backingMap.addListener(new WeakMapChangeListener<K, V>(listener));\n+            backingMap.addListener(new WeakMapChangeListener<>(listener));\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/FXCollections.java","additions":54,"deletions":55,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-            addRemoveChanges = new ArrayList<SubChange<E>>();\n+            addRemoveChanges = new ArrayList<>();\n@@ -108,1 +108,1 @@\n-                ArrayList<E> removedList = new ArrayList<E>();\n+                ArrayList<E> removedList = new ArrayList<>();\n@@ -110,1 +110,1 @@\n-                addRemoveChanges.add(idx, new SubChange<E>(pos, pos, removedList, EMPTY_PERM, false));\n+                addRemoveChanges.add(idx, new SubChange<>(pos, pos, removedList, EMPTY_PERM, false));\n@@ -138,1 +138,1 @@\n-                addRemoveChanges.add(idx, new SubChange<E>(from, to, new ArrayList<E>(), EMPTY_PERM, false));\n+                addRemoveChanges.add(idx, new SubChange<>(from, to, new ArrayList<E>(), EMPTY_PERM, false));\n@@ -162,1 +162,1 @@\n-                        prev.removed = new ArrayList<E>();\n+                        prev.removed = new ArrayList<>();\n@@ -296,1 +296,1 @@\n-            Set<Integer> removed = new TreeSet<Integer>();\n+            Set<Integer> removed = new TreeSet<>();\n@@ -371,1 +371,1 @@\n-            permutationChange = new SubChange<E>(prePermFrom, prePermTo, null, prePerm, false);\n+            permutationChange = new SubChange<>(prePermFrom, prePermTo, null, prePerm, false);\n@@ -375,2 +375,2 @@\n-            Set<Integer> newAdded = new TreeSet<Integer>();\n-            Map<Integer, List<E>> newRemoved = new HashMap<Integer, List<E>>();\n+            Set<Integer> newAdded = new TreeSet<>();\n+            Map<Integer, List<E>> newRemoved = new HashMap<>();\n@@ -398,1 +398,1 @@\n-                    lastChange = new SubChange<E>(i, i + 1, null, EMPTY_PERM, false);\n+                    lastChange = new SubChange<>(i, i + 1, null, EMPTY_PERM, false);\n@@ -417,1 +417,1 @@\n-                addRemoveChanges.add(~idx, new SubChange<E>(at, at, e.getValue(), new int[0], false));\n+                addRemoveChanges.add(~idx, new SubChange<>(at, at, e.getValue(), new int[0], false));\n@@ -422,1 +422,1 @@\n-            Set<Integer> newUpdated = new TreeSet<Integer>();\n+            Set<Integer> newUpdated = new TreeSet<>();\n@@ -437,1 +437,1 @@\n-                    lastUpdateChange = new SubChange<E>(i, i + 1, null, EMPTY_PERM, true);\n+                    lastUpdateChange = new SubChange<>(i, i + 1, null, EMPTY_PERM, true);\n@@ -461,1 +461,1 @@\n-            updateChanges = new ArrayList<SubChange<E>>();\n+            updateChanges = new ArrayList<>();\n@@ -482,1 +482,1 @@\n-                    list.fireChange(new SingleChange<E>(finalizeSubChange(addRemoveChanges.get(0)), list));\n+                    list.fireChange(new SingleChange<>(finalizeSubChange(addRemoveChanges.get(0)), list));\n@@ -485,1 +485,1 @@\n-                    list.fireChange(new SingleChange<E>(finalizeSubChange(updateChanges.get(0)), list));\n+                    list.fireChange(new SingleChange<>(finalizeSubChange(updateChanges.get(0)), list));\n@@ -488,1 +488,1 @@\n-                    list.fireChange(new SingleChange<E>(finalizeSubChange(permutationChange), list));\n+                    list.fireChange(new SingleChange<>(finalizeSubChange(permutationChange), list));\n@@ -524,1 +524,1 @@\n-                list.fireChange(new IterableChange<E>(finalizeSubChangeArray(array), list));\n+                list.fireChange(new IterableChange<>(finalizeSubChangeArray(array), list));\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/ListChangeBuilder.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.ArrayList;\n@@ -94,1 +93,1 @@\n-    private final ListChangeBuilder<E> changeBuilder = new ListChangeBuilder<E>(this);\n+    private final ListChangeBuilder<E> changeBuilder = new ListChangeBuilder<>(this);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/ObservableListBase.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-        this.ref = new WeakReference<ListChangeListener<E>>(listener);\n+        this.ref = new WeakReference<>(listener);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/WeakListChangeListener.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-        this.ref = new WeakReference<MapChangeListener<K, V>>(listener);\n+        this.ref = new WeakReference<>(listener);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/WeakMapChangeListener.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-        this.ref = new WeakReference<SetChangeListener<E>>(listener);\n+        this.ref = new WeakReference<>(listener);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/WeakSetChangeListener.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-            predicate = new ObjectPropertyBase<Predicate<? super E>>() {\n+            predicate = new ObjectPropertyBase<>() {\n@@ -210,1 +210,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -320,1 +319,0 @@\n-    @SuppressWarnings(\"unchecked\")\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/transformation\/FilteredList.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        sorted = (Element<E>[]) new Element[source.size() *3\/2 + 1];\n+        sorted = new Element[source.size() *3\/2 + 1];\n@@ -80,1 +80,1 @@\n-            sorted[i] = new Element<E>(source.get(i), i);\n+            sorted[i] = new Element<>(source.get(i), i);\n@@ -116,1 +116,1 @@\n-    };\n+    }\n@@ -126,1 +126,1 @@\n-            comparator = new ObjectPropertyBase<Comparator<? super E>>() {\n+            comparator = new ObjectPropertyBase<>() {\n@@ -270,1 +270,1 @@\n-                    sorted[i] = new Element<E>(c.getList().get(i), i);\n+                    sorted[i] = new Element<>(c.getList().get(i), i);\n@@ -297,1 +297,0 @@\n-        @SuppressWarnings(\"unchecked\")\n@@ -355,1 +354,1 @@\n-            sorted[i] = new Element<E>(list.get(i), i);\n+            sorted[i] = new Element<>(list.get(i), i);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/transformation\/SortedList.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-public abstract class TransformationList<E, F> extends ObservableListBase<E> implements ObservableList<E> {\n+public abstract class TransformationList<E, F> extends ObservableListBase<E> {\n@@ -62,1 +62,0 @@\n-    @SuppressWarnings(\"unchecked\")\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/transformation\/TransformationList.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-            new EventType<ActionEvent>(Event.ANY, \"ACTION\");\n+            new EventType<>(Event.ANY, \"ACTION\");\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/event\/ActionEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-            new EventType<Event>(\"EVENT\", null);\n+            new EventType<>(\"EVENT\", null);\n@@ -181,1 +181,1 @@\n-            subTypes = new WeakHashMap<EventType<? extends T>, Void>();\n+            subTypes = new WeakHashMap<>();\n@@ -192,2 +192,2 @@\n-    private Object writeReplace() throws ObjectStreamException {\n-        Deque<String> path = new LinkedList<String>();\n+    private Object writeReplace() {\n+        Deque<String> path = new LinkedList<>();\n@@ -199,1 +199,1 @@\n-        return new EventTypeSerialization(new ArrayList<String>(path));\n+        return new EventTypeSerialization(new ArrayList<>(path));\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/event\/EventType.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        weakRef = new WeakReference<EventHandler<T>>(eventHandler);\n+        weakRef = new WeakReference<>(eventHandler);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/event\/WeakEventHandler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        return ((BigDecimal)value).toString();\n+        return value.toString();\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/converter\/BigDecimalStringConverter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        return ((BigInteger)value).toString();\n+        return value.toString();\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/converter\/BigIntegerStringConverter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,1 +130,0 @@\n-    @SuppressWarnings(\"removal\")\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/converter\/DateStringConverter.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        return Float.toString(((Float)value).floatValue());\n+        return Float.toString(value.floatValue());\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/converter\/FloatStringConverter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        return (Integer.toString(((Integer)value).intValue()));\n+        return (Integer.toString(value.intValue()));\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/converter\/IntegerStringConverter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        ldtConverter = new LdtConverter<LocalDate>(LocalDate.class, null, null,\n+        ldtConverter = new LdtConverter<>(LocalDate.class, null, null,\n@@ -79,1 +79,1 @@\n-        ldtConverter = new LdtConverter<LocalDate>(LocalDate.class, null, null,\n+        ldtConverter = new LdtConverter<>(LocalDate.class, null, null,\n@@ -107,1 +107,1 @@\n-        ldtConverter = new LdtConverter<LocalDate>(LocalDate.class, formatter, parser,\n+        ldtConverter = new LdtConverter<>(LocalDate.class, formatter, parser,\n@@ -126,1 +126,1 @@\n-        ldtConverter = new LdtConverter<LocalDate>(LocalDate.class, null, null,\n+        ldtConverter = new LdtConverter<>(LocalDate.class, null, null,\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/converter\/LocalDateStringConverter.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.time.DateTimeException;\n@@ -33,2 +32,0 @@\n-import java.time.chrono.ChronoLocalDate;\n-import java.time.chrono.ChronoLocalDateTime;\n@@ -46,2 +43,0 @@\n-import com.sun.javafx.binding.Logging;\n-\n@@ -79,1 +74,1 @@\n-        ldtConverter = new LdtConverter<LocalDateTime>(LocalDateTime.class, null, null,\n+        ldtConverter = new LdtConverter<>(LocalDateTime.class, null, null,\n@@ -97,1 +92,1 @@\n-        ldtConverter = new LdtConverter<LocalDateTime>(LocalDateTime.class, null, null,\n+        ldtConverter = new LdtConverter<>(LocalDateTime.class, null, null,\n@@ -125,1 +120,1 @@\n-        ldtConverter = new LdtConverter<LocalDateTime>(LocalDateTime.class, formatter, parser,\n+        ldtConverter = new LdtConverter<>(LocalDateTime.class, formatter, parser,\n@@ -149,1 +144,1 @@\n-        ldtConverter = new LdtConverter<LocalDateTime>(LocalDateTime.class, null, null,\n+        ldtConverter = new LdtConverter<>(LocalDateTime.class, null, null,\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/converter\/LocalDateTimeStringConverter.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        ldtConverter = new LdtConverter<LocalTime>(LocalTime.class, null, null,\n+        ldtConverter = new LdtConverter<>(LocalTime.class, null, null,\n@@ -68,1 +68,1 @@\n-        ldtConverter = new LdtConverter<LocalTime>(LocalTime.class, null, null,\n+        ldtConverter = new LdtConverter<>(LocalTime.class, null, null,\n@@ -84,1 +84,1 @@\n-        ldtConverter = new LdtConverter<LocalTime>(LocalTime.class, null, null,\n+        ldtConverter = new LdtConverter<>(LocalTime.class, null, null,\n@@ -111,1 +111,1 @@\n-        ldtConverter = new LdtConverter<LocalTime>(LocalTime.class, formatter, parser,\n+        ldtConverter = new LdtConverter<>(LocalTime.class, formatter, parser,\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/converter\/LocalTimeStringConverter.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        return Long.toString(((Long)value).longValue());\n+        return Long.toString(value.longValue());\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/converter\/LongStringConverter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        return Short.toString(((Short)value).shortValue());\n+        return Short.toString(value.shortValue());\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/converter\/ShortStringConverter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -131,1 +131,0 @@\n-    @SuppressWarnings(\"removal\")\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/converter\/TimeStringConverter.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-public class ObservableValueStub<T> extends ObservableValueBase<T> implements ObservableValue<T> {\n+public class ObservableValueStub<T> extends ObservableValueBase<T> {\n","filename":"modules\/javafx.base\/src\/shims\/java\/javafx\/beans\/value\/ObservableValueStub.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-        lcb = new ListChangeBuilder<E>(list);\n+        lcb = new ListChangeBuilder<>(list);\n","filename":"modules\/javafx.base\/src\/shims\/java\/javafx\/collections\/ListChangeBuilderShim.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import com.sun.javafx.collections.ListListenerHelper;\n@@ -30,1 +29,0 @@\n-import javafx.beans.InvalidationListener;\n","filename":"modules\/javafx.base\/src\/shims\/java\/javafx\/collections\/ObservableListWrapperShim.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-public class EventTypeShim<T extends Event> {\n+public class EventTypeShim {\n","filename":"modules\/javafx.base\/src\/shims\/java\/javafx\/event\/EventTypeShim.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -38,1 +37,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -43,1 +41,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -48,1 +45,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -53,1 +49,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -58,1 +53,0 @@\n-    @SuppressWarnings(\"removal\")\n","filename":"modules\/javafx.base\/src\/shims\/java\/javafx\/util\/converter\/DateTimeStringConverterShim.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import javafx.beans.value.ChangeListener;\n@@ -176,1 +175,1 @@\n-        final StringConverter<Date> converter = new StringConverter<Date>() {\n+        final StringConverter<Date> converter = new StringConverter<>() {\n@@ -202,1 +201,1 @@\n-                        return new ObjectPropertyMock<Date>();\n+                        return new ObjectPropertyMock<>();\n@@ -239,1 +238,1 @@\n-                        return new ObjectPropertyMock<Date>();\n+                        return new ObjectPropertyMock<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/BidirectionalBindingWithConversionTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -52,3 +52,3 @@\n-        list0 = new ArrayList<Integer>();\n-        list1 = new ArrayList<Integer>(Arrays.asList(-1));\n-        list2 = new ArrayList<Integer>(Arrays.asList(2, 1));\n+        list0 = new ArrayList<>();\n+        list1 = new ArrayList<>(Arrays.asList(-1));\n+        list2 = new ArrayList<>(Arrays.asList(2, 1));\n@@ -63,1 +63,1 @@\n-        final List<Integer> list2_sorted = new ArrayList<Integer>(Arrays.asList(1, 2));\n+        final List<Integer> list2_sorted = new ArrayList<>(Arrays.asList(1, 2));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/BidirectionalContentBindingListTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -55,2 +55,2 @@\n-        map0 = new HashMap<String, Integer>();\n-        map1 = new HashMap<String, Integer>();\n+        map0 = new HashMap<>();\n+        map1 = new HashMap<>();\n@@ -58,1 +58,1 @@\n-        map2 = new HashMap<String, Integer>();\n+        map2 = new HashMap<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/BidirectionalContentBindingMapTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-        set0 = new HashSet<Integer>();\n-        set1 = new HashSet<Integer>();\n+        set0 = new HashSet<>();\n+        set1 = new HashSet<>();\n@@ -54,1 +54,1 @@\n-        set2 = new HashSet<Integer>();\n+        set2 = new HashSet<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/BidirectionalContentBindingSetTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,3 +52,3 @@\n-        list0 = new ArrayList<Integer>();\n-        list1 = new ArrayList<Integer>(Arrays.asList(0));\n-        list2 = new ArrayList<Integer>(Arrays.asList(2, 1));\n+        list0 = new ArrayList<>();\n+        list1 = new ArrayList<>(Arrays.asList(0));\n+        list2 = new ArrayList<>(Arrays.asList(2, 1));\n@@ -56,1 +56,1 @@\n-        op1 = new ArrayList<Integer>(list1);\n+        op1 = new ArrayList<>(list1);\n@@ -63,1 +63,1 @@\n-        List<Integer> list2_sorted = new ArrayList<Integer>(Arrays.asList(1, 2));\n+        List<Integer> list2_sorted = new ArrayList<>(Arrays.asList(1, 2));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ContentBindingListTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -55,2 +55,2 @@\n-        map0 = new HashMap<String, Integer>();\n-        map1 = new HashMap<String, Integer>();\n+        map0 = new HashMap<>();\n+        map1 = new HashMap<>();\n@@ -58,1 +58,1 @@\n-        map2 = new HashMap<String, Integer>();\n+        map2 = new HashMap<>();\n@@ -62,1 +62,1 @@\n-        op1 = new HashMap<String, Integer>(map1);\n+        op1 = new HashMap<>(map1);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ContentBindingMapTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-        set0 = new HashSet<Integer>();\n-        set1 = new HashSet<Integer>();\n+        set0 = new HashSet<>();\n+        set1 = new HashSet<>();\n@@ -54,1 +54,1 @@\n-        set2 = new HashSet<Integer>(2, 1);\n+        set2 = new HashSet<>(2, 1);\n@@ -58,1 +58,1 @@\n-        op1 = new HashSet<Integer>(set1);\n+        op1 = new HashSet<>(set1);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ContentBindingSetTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-                new ChangeListenerMock<Object>(UNDEFINED), new ChangeListenerMock<Object>(UNDEFINED), new ChangeListenerMock<Object>(UNDEFINED), new ChangeListenerMock<Object>(UNDEFINED)\n+                new ChangeListenerMock<>(UNDEFINED), new ChangeListenerMock<>(UNDEFINED), new ChangeListenerMock<>(UNDEFINED), new ChangeListenerMock<>(UNDEFINED)\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ExpressionHelperTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import javafx.beans.value.ObservableValueStub;\n@@ -79,1 +78,1 @@\n-        observable = new SimpleListProperty<Object>(data1);\n+        observable = new SimpleListProperty<>(data1);\n@@ -88,1 +87,1 @@\n-                new MockListObserver<Object>(), new MockListObserver<Object>(), new MockListObserver<Object>(), new MockListObserver<Object>()\n+                new MockListObserver<>(), new MockListObserver<>(), new MockListObserver<>(), new MockListObserver<>()\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ListExpressionHelperTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -542,1 +542,1 @@\n-        List<String> steps = new ArrayList<String>();\n+        List<String> steps = new ArrayList<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/SelectBindingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-@SuppressWarnings(\"WebTest\")\n@@ -107,1 +106,1 @@\n-        dateV = new SimpleObjectProperty<Date>(date0);\n+        dateV = new SimpleObjectProperty<>(date0);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/StringFormatterTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -69,4 +69,4 @@\n-                new MockListObserver<Object>(),\n-                new MockListObserver<Object>(),\n-                new MockListObserver<Object>(),\n-                new MockListObserver<Object>()\n+                new MockListObserver<>(),\n+                new MockListObserver<>(),\n+                new MockListObserver<>(),\n+                new MockListObserver<>()\n@@ -76,1 +76,1 @@\n-        change = new NonIterableChange.SimpleRemovedChange<Object>(0, 1, new Object(), list);\n+        change = new NonIterableChange.SimpleRemovedChange<>(0, 1, new Object(), list);\n@@ -255,1 +255,1 @@\n-        final ListChangeListener<Object> addListener = new ListChangeListener<Object>() {\n+        final ListChangeListener<Object> addListener = new ListChangeListener<>() {\n@@ -366,1 +366,1 @@\n-        final ListChangeListener<Object> removeListener = new ListChangeListener<Object>() {\n+        final ListChangeListener<Object> removeListener = new ListChangeListener<>() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ListListenerHelperTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -68,4 +68,4 @@\n-                new MockMapObserver<Object, Object>(),\n-                new MockMapObserver<Object, Object>(),\n-                new MockMapObserver<Object, Object>(),\n-                new MockMapObserver<Object, Object>()\n+                new MockMapObserver<>(),\n+                new MockMapObserver<>(),\n+                new MockMapObserver<>(),\n+                new MockMapObserver<>()\n@@ -75,1 +75,1 @@\n-        change = new MapExpressionHelper.SimpleChange<Object, Object>(map).setRemoved(new Object(), new Object());\n+        change = new MapExpressionHelper.SimpleChange<>(map).setRemoved(new Object(), new Object());\n@@ -254,1 +254,1 @@\n-        final MapChangeListener<Object, Object> addListener = new MapChangeListener<Object, Object>() {\n+        final MapChangeListener<Object, Object> addListener = new MapChangeListener<>() {\n@@ -365,1 +365,1 @@\n-        final MapChangeListener<Object, Object> removeListener = new MapChangeListener<Object, Object>() {\n+        final MapChangeListener<Object, Object> removeListener = new MapChangeListener<>() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/MapListenerHelperTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-        Change<Integer> change = new NonIterableChange.SimpleRemovedChange<Integer>(0, 1, Integer.valueOf(5), originalList);\n-        MappingChange<Integer, String> mapChange = new MappingChange<Integer, String>(change,\n+        Change<Integer> change = new NonIterableChange.SimpleRemovedChange<>(0, 1, Integer.valueOf(5), originalList);\n+        MappingChange<Integer, String> mapChange = new MappingChange<>(change,\n@@ -67,2 +67,2 @@\n-        Change<Integer> change = new NonIterableChange.SimpleUpdateChange<Integer>(0, 1, originalList);\n-        MappingChange<Integer, String> mapChange = new MappingChange<Integer, String>(change,\n+        Change<Integer> change = new NonIterableChange.SimpleUpdateChange<>(0, 1, originalList);\n+        MappingChange<Integer, String> mapChange = new MappingChange<>(change,\n@@ -82,2 +82,2 @@\n-        Change<Integer> change = new NonIterableChange.SimplePermutationChange<Integer>(0, 2, new int[] {1, 0}, originalList);\n-        MappingChange<Integer, String> mapChange = new MappingChange<Integer, String>(change,\n+        Change<Integer> change = new NonIterableChange.SimplePermutationChange<>(0, 2, new int[] {1, 0}, originalList);\n+        MappingChange<Integer, String> mapChange = new MappingChange<>(change,\n@@ -136,1 +136,1 @@\n-        MappingChange<Integer, String> mapChange = new MappingChange<Integer, String>(change,\n+        MappingChange<Integer, String> mapChange = new MappingChange<>(change,\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/MappingChangeTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        Change<String> change = new NonIterableChange.SimpleAddChange<String>(0, 1, list);\n+        Change<String> change = new NonIterableChange.SimpleAddChange<>(0, 1, list);\n@@ -69,1 +69,1 @@\n-        Change<String> change = new NonIterableChange.SimpleRemovedChange<String>(0, 0, \"a0\", list);\n+        Change<String> change = new NonIterableChange.SimpleRemovedChange<>(0, 0, \"a0\", list);\n@@ -91,1 +91,1 @@\n-        Change<String> change = new NonIterableChange.SimpleUpdateChange<String>(0, 1, list);\n+        Change<String> change = new NonIterableChange.SimpleUpdateChange<>(0, 1, list);\n@@ -113,1 +113,1 @@\n-        Change<String> change = new NonIterableChange.SimplePermutationChange<String>(0, 2, new int[] {1, 0}, list);\n+        Change<String> change = new NonIterableChange.SimplePermutationChange<>(0, 2, new int[] {1, 0}, list);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/NonIterableChangeTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -68,4 +68,4 @@\n-                new MockSetObserver<Object>(),\n-                new MockSetObserver<Object>(),\n-                new MockSetObserver<Object>(),\n-                new MockSetObserver<Object>()\n+                new MockSetObserver<>(),\n+                new MockSetObserver<>(),\n+                new MockSetObserver<>(),\n+                new MockSetObserver<>()\n@@ -75,1 +75,1 @@\n-        change = new SetExpressionHelper.SimpleChange<Object>(set).setRemoved(new Object());\n+        change = new SetExpressionHelper.SimpleChange<>(set).setRemoved(new Object());\n@@ -254,1 +254,1 @@\n-        final SetChangeListener<Object> addListener = new SetChangeListener<Object>() {\n+        final SetChangeListener<Object> addListener = new SetChangeListener<>() {\n@@ -365,1 +365,1 @@\n-        final SetChangeListener<Object> removeListener = new SetChangeListener<Object>() {\n+        final SetChangeListener<Object> removeListener = new SetChangeListener<>() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/SetListenerHelperTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-import test.com.sun.javafx.event.EventCountingHandler;\n-import test.com.sun.javafx.event.EmptyEvent;\n@@ -48,1 +46,1 @@\n-        compositeEventHandler = new CompositeEventHandler<Event>();\n+        compositeEventHandler = new CompositeEventHandler<>();\n@@ -59,1 +57,1 @@\n-                new EventCountingHandler<Event>();\n+                new EventCountingHandler<>();\n@@ -61,1 +59,1 @@\n-                new WeakEventHandler<Event>(eventCountingHandler);\n+                new WeakEventHandler<>(eventCountingHandler);\n@@ -77,1 +75,1 @@\n-                new EventCountingHandler<Event>();\n+                new EventCountingHandler<>();\n@@ -79,1 +77,1 @@\n-                new WeakEventHandler<Event>(eventCountingHandler);\n+                new WeakEventHandler<>(eventCountingHandler);\n@@ -98,1 +96,1 @@\n-                new EventCountingHandler<Event>();\n+                new EventCountingHandler<>();\n@@ -100,1 +98,1 @@\n-                new WeakEventHandler<Event>(eventCountingHandler);\n+                new WeakEventHandler<>(eventCountingHandler);\n@@ -116,1 +114,1 @@\n-                new EventCountingHandler<Event>();\n+                new EventCountingHandler<>();\n@@ -118,1 +116,1 @@\n-                new WeakEventHandler<Event>(eventCountingHandler);\n+                new WeakEventHandler<>(eventCountingHandler);\n@@ -135,1 +133,1 @@\n-                new EventCountingHandler<Event>();\n+                new EventCountingHandler<>();\n@@ -150,1 +148,1 @@\n-                new EventCountingHandler<Event>();\n+                new EventCountingHandler<>();\n@@ -168,1 +166,1 @@\n-                new EventCountingHandler<Event>();\n+                new EventCountingHandler<>();\n@@ -180,1 +178,1 @@\n-                new EventCountingHandler<Event>();\n+                new EventCountingHandler<>();\n@@ -182,1 +180,1 @@\n-                new WeakEventHandler<Event>(eventCountingHandler);\n+                new WeakEventHandler<>(eventCountingHandler);\n@@ -206,1 +204,1 @@\n-                new EventCountingHandler<Event>();\n+                new EventCountingHandler<>();\n@@ -208,1 +206,1 @@\n-                new WeakEventHandler<Event>(eventCountingFilter);\n+                new WeakEventHandler<>(eventCountingFilter);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/event\/CompositeEventHandlerTest.java","additions":16,"deletions":18,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-            new EventType<EmptyEvent>(Event.ANY, \"EMPTY\");\n+            new EventType<>(Event.ANY, \"EMPTY\");\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/event\/EmptyEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-                new EventCountingHandler<EmptyEvent>();\n+                new EventCountingHandler<>();\n@@ -271,1 +271,1 @@\n-                new EventCountingHandler<EmptyEvent>();\n+                new EventCountingHandler<>();\n@@ -314,1 +314,1 @@\n-                new EventCountingHandler<EmptyEvent>();\n+                new EventCountingHandler<>();\n@@ -451,1 +451,1 @@\n-                new EventCountingHandler<Event>();\n+                new EventCountingHandler<>();\n@@ -453,1 +453,1 @@\n-                new EventCountingHandler<ValueEvent>();\n+                new EventCountingHandler<>();\n@@ -455,1 +455,1 @@\n-                new EventCountingHandler<ValueEvent>();\n+                new EventCountingHandler<>();\n@@ -457,1 +457,1 @@\n-                new EventCountingHandler<Event>();\n+                new EventCountingHandler<>();\n@@ -459,1 +459,1 @@\n-                new EventCountingHandler<Event>();\n+                new EventCountingHandler<>();\n@@ -488,1 +488,1 @@\n-                new EventCountingHandler<Event>();\n+                new EventCountingHandler<>();\n@@ -490,1 +490,1 @@\n-                new EventCountingHandler<ValueEvent>();\n+                new EventCountingHandler<>();\n@@ -492,1 +492,1 @@\n-                new EventCountingHandler<ValueEvent>();\n+                new EventCountingHandler<>();\n@@ -494,1 +494,1 @@\n-                new EventCountingHandler<Event>();\n+                new EventCountingHandler<>();\n@@ -496,1 +496,1 @@\n-                new EventCountingHandler<Event>();\n+                new EventCountingHandler<>();\n@@ -532,1 +532,1 @@\n-                new EventCountingHandler<Event>();\n+                new EventCountingHandler<>();\n@@ -534,1 +534,1 @@\n-                new EventCountingHandler<Event>();\n+                new EventCountingHandler<>();\n@@ -576,1 +576,1 @@\n-                new EventCountingHandler<Event>();\n+                new EventCountingHandler<>();\n@@ -580,1 +580,1 @@\n-                new EventCountingHandler<Event>();\n+                new EventCountingHandler<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/event\/EventHandlerManagerTest.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-        return new LinkedList<EventDispatcher>(dispatchers);\n+        return new LinkedList<>(dispatchers);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/event\/StubEventDispatchChain.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-            new EventType<ValueEvent>(Event.ANY, \"VALUE\");\n+            new EventType<>(Event.ANY, \"VALUE\");\n@@ -36,1 +36,1 @@\n-            new EventType<ValueEvent>(ValueEvent.ANY, \"VALUE_A\");\n+            new EventType<>(ValueEvent.ANY, \"VALUE_A\");\n@@ -38,1 +38,1 @@\n-            new EventType<ValueEvent>(ValueEvent.ANY, \"VALUE_B\");\n+            new EventType<>(ValueEvent.ANY, \"VALUE_B\");\n@@ -40,1 +40,1 @@\n-            new EventType<ValueEvent>(ValueEvent.ANY, \"VALUE_C\");\n+            new EventType<>(ValueEvent.ANY, \"VALUE_C\");\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/event\/ValueEvent.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-    public static final PropertyReference<String> NAME = new PropertyReference<String>(Foo.class, \"name\");\n+    public static final PropertyReference<String> NAME = new PropertyReference<>(Foo.class, \"name\");\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/Foo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import javafx.beans.InvalidationListener;\n-import javafx.beans.Observable;\n@@ -32,1 +30,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/InvalidationListenerMock.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-    private final ObjectProperty<Object> data = new SimpleObjectProperty<Object>();\n+    private final ObjectProperty<Object> data = new SimpleObjectProperty<>();\n@@ -92,1 +92,1 @@\n-    public static final PropertyReference<Integer> NO_WRITE = new PropertyReference<Integer>(Person.class, \"noWrite\");\n+    public static final PropertyReference<Integer> NO_WRITE = new PropertyReference<>(Person.class, \"noWrite\");\n@@ -97,1 +97,1 @@\n-    public static final PropertyReference<Integer> NO_READ = new PropertyReference<Integer>(Person.class, \"noRead\");\n+    public static final PropertyReference<Integer> NO_READ = new PropertyReference<>(Person.class, \"noRead\");\n@@ -101,1 +101,1 @@\n-    public static final PropertyReference<Integer> NO_READ_WRITE = new PropertyReference<Integer>(Person.class, \"noReadWrite\");\n+    public static final PropertyReference<Integer> NO_READ_WRITE = new PropertyReference<>(Person.class, \"noReadWrite\");\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/Person.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-        changeListener = new ChangeListenerMock<Boolean>(UNDEFINED);\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n@@ -278,1 +278,1 @@\n-        final ObservableObjectValueStub<Boolean> v = new ObservableObjectValueStub<Boolean>(true);\n+        final ObservableObjectValueStub<Boolean> v = new ObservableObjectValueStub<>(true);\n@@ -316,1 +316,1 @@\n-        final ObservableObjectValueStub<Boolean> v = new ObservableObjectValueStub<Boolean>(true);\n+        final ObservableObjectValueStub<Boolean> v = new ObservableObjectValueStub<>(true);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/BooleanPropertyBaseTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-        final ObjectProperty<Boolean> valueModel = new SimpleObjectProperty<Boolean>(true);\n+        final ObjectProperty<Boolean> valueModel = new SimpleObjectProperty<>(true);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/BooleanPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-        changeListener = new ChangeListenerMock<Number>(UNDEFINED);\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n@@ -281,1 +281,1 @@\n-        final ObservableValueStub<Number> v = new ObservableValueStub<Number>(value1);\n+        final ObservableValueStub<Number> v = new ObservableValueStub<>(value1);\n@@ -321,1 +321,1 @@\n-        final ObservableValueStub<Number> v = new ObservableValueStub<Number>(value1);\n+        final ObservableValueStub<Number> v = new ObservableValueStub<>(value1);\n@@ -432,1 +432,1 @@\n-        final ObservableValueStub<Number> v = new ObservableValueStub<Number>(value1);\n+        final ObservableValueStub<Number> v = new ObservableValueStub<>(value1);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/DoublePropertyBaseTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-        final ObjectProperty<Double> valueModel = new SimpleObjectProperty<Double>();\n+        final ObjectProperty<Double> valueModel = new SimpleObjectProperty<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/DoublePropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-        changeListener = new ChangeListenerMock<Number>(UNDEFINED);\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n@@ -285,1 +285,1 @@\n-        final ObservableValueStub<Number> v = new ObservableValueStub<Number>(value1);\n+        final ObservableValueStub<Number> v = new ObservableValueStub<>(value1);\n@@ -325,1 +325,1 @@\n-        final ObservableValueStub<Number> v = new ObservableValueStub<Number>(value1);\n+        final ObservableValueStub<Number> v = new ObservableValueStub<>(value1);\n@@ -436,1 +436,1 @@\n-        final ObservableValueStub<Number> v = new ObservableValueStub<Number>(value1);\n+        final ObservableValueStub<Number> v = new ObservableValueStub<>(value1);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/FloatPropertyBaseTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-        final ObjectProperty<Float> valueModel = new SimpleObjectProperty<Float>(2f);\n+        final ObjectProperty<Float> valueModel = new SimpleObjectProperty<>(2f);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/FloatPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        changeListener = new ChangeListenerMock<Number>(UNDEFINED);\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n@@ -282,1 +282,1 @@\n-        final ObservableValueStub<Number> v = new ObservableValueStub<Number>(value1);\n+        final ObservableValueStub<Number> v = new ObservableValueStub<>(value1);\n@@ -322,1 +322,1 @@\n-        final ObservableValueStub<Number> v = new ObservableValueStub<Number>(value1);\n+        final ObservableValueStub<Number> v = new ObservableValueStub<>(value1);\n@@ -427,1 +427,1 @@\n-        final ObservableValueStub<Number> v = new ObservableValueStub<Number>(value1);\n+        final ObservableValueStub<Number> v = new ObservableValueStub<>(value1);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/IntegerPropertyBaseTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-        final ObjectProperty<Integer> valueModel = new SimpleObjectProperty<Integer>(2);\n+        final ObjectProperty<Integer> valueModel = new SimpleObjectProperty<>(2);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/IntegerPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-        changeListener = new ChangeListenerMock<ObservableList<Object>>(UNDEFINED);\n-        listChangeListener = new MockListObserver<Object>();\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n+        listChangeListener = new MockListObserver<>();\n@@ -92,1 +92,1 @@\n-        final ListProperty<Object> p1 = new SimpleListProperty<Object>();\n+        final ListProperty<Object> p1 = new SimpleListProperty<>();\n@@ -97,1 +97,1 @@\n-        final ListProperty<Object> p2 = new SimpleListProperty<Object>(VALUE_1b);\n+        final ListProperty<Object> p2 = new SimpleListProperty<>(VALUE_1b);\n@@ -481,1 +481,1 @@\n-        final ListProperty<Object> v = new SimpleListProperty<Object>(VALUE_1a);\n+        final ListProperty<Object> v = new SimpleListProperty<>(VALUE_1a);\n@@ -489,1 +489,1 @@\n-        final ObservableObjectValueStub<ObservableList<Object>> v = new ObservableObjectValueStub<ObservableList<Object>>(FXCollections.observableArrayList(VALUE_1a));\n+        final ObservableObjectValueStub<ObservableList<Object>> v = new ObservableObjectValueStub<>(FXCollections.observableArrayList(VALUE_1a));\n@@ -521,1 +521,1 @@\n-        final ObservableObjectValueStub<ObservableList<Object>> v = new ObservableObjectValueStub<ObservableList<Object>>(FXCollections.observableArrayList(VALUE_1a));\n+        final ObservableObjectValueStub<ObservableList<Object>> v = new ObservableObjectValueStub<>(FXCollections.observableArrayList(VALUE_1a));\n@@ -553,1 +553,1 @@\n-        final ObservableObjectValueStub<ObservableList<Object>> v = new ObservableObjectValueStub<ObservableList<Object>>(FXCollections.observableArrayList(VALUE_1a));\n+        final ObservableObjectValueStub<ObservableList<Object>> v = new ObservableObjectValueStub<>(FXCollections.observableArrayList(VALUE_1a));\n@@ -593,2 +593,2 @@\n-        final ListProperty<Object> v1 = new SimpleListProperty<Object>(VALUE_1a);\n-        final ListProperty<Object> v2 = new SimpleListProperty<Object>(VALUE_2a);\n+        final ListProperty<Object> v1 = new SimpleListProperty<>(VALUE_1a);\n+        final ListProperty<Object> v2 = new SimpleListProperty<>(VALUE_2a);\n@@ -670,1 +670,1 @@\n-        final ListProperty<Object> v = new SimpleListProperty<Object>(VALUE_1a);\n+        final ListProperty<Object> v = new SimpleListProperty<>(VALUE_1a);\n@@ -694,1 +694,1 @@\n-        final ListProperty<Object> v = new SimpleListProperty<Object>(VALUE_1a);\n+        final ListProperty<Object> v = new SimpleListProperty<>(VALUE_1a);\n@@ -772,1 +772,1 @@\n-        final ListProperty<Object> v = new SimpleListProperty<Object>(value2);\n+        final ListProperty<Object> v = new SimpleListProperty<>(value2);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ListPropertyBaseTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -55,2 +55,2 @@\n-        final ListProperty<Object> p1 = new SimpleListProperty<Object>(VALUE_2);\n-        final ListProperty<Object> p2 = new SimpleListProperty<Object>(VALUE_1);\n+        final ListProperty<Object> p1 = new SimpleListProperty<>(VALUE_2);\n+        final ListProperty<Object> p2 = new SimpleListProperty<>(VALUE_1);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ListPropertyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        changeListener = new ChangeListenerMock<Number>(UNDEFINED);\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n@@ -282,1 +282,1 @@\n-        final ObservableValueStub<Number> v = new ObservableValueStub<Number>(value1);\n+        final ObservableValueStub<Number> v = new ObservableValueStub<>(value1);\n@@ -322,1 +322,1 @@\n-        final ObservableValueStub<Number> v = new ObservableValueStub<Number>(value1);\n+        final ObservableValueStub<Number> v = new ObservableValueStub<>(value1);\n@@ -427,1 +427,1 @@\n-        final ObservableValueStub<Number> v = new ObservableValueStub<Number>(value1);\n+        final ObservableValueStub<Number> v = new ObservableValueStub<>(value1);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/LongPropertyBaseTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-        final ObjectProperty<Long> valueModel = new SimpleObjectProperty<Long>(2L);\n+        final ObjectProperty<Long> valueModel = new SimpleObjectProperty<>(2L);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/LongPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    private static final ObservableMap<Object, Object> VALUE_2a = FXCollections.observableMap(new HashMap<Object, Object>());\n+    private static final ObservableMap<Object, Object> VALUE_2a = FXCollections.observableMap(new HashMap<>());\n@@ -72,1 +72,1 @@\n-    private static final ObservableMap<Object, Object> VALUE_2b = FXCollections.observableMap(new HashMap<Object, Object>());\n+    private static final ObservableMap<Object, Object> VALUE_2b = FXCollections.observableMap(new HashMap<>());\n@@ -88,2 +88,2 @@\n-        changeListener = new ChangeListenerMock<ObservableMap<Object, Object>>(UNDEFINED);\n-        mapChangeListener = new MockMapObserver<Object, Object>();\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n+        mapChangeListener = new MockMapObserver<>();\n@@ -112,1 +112,1 @@\n-        final MapProperty<Object, Object> p1 = new SimpleMapProperty<Object, Object>();\n+        final MapProperty<Object, Object> p1 = new SimpleMapProperty<>();\n@@ -117,1 +117,1 @@\n-        final MapProperty<Object, Object> p2 = new SimpleMapProperty<Object, Object>(VALUE_1b);\n+        final MapProperty<Object, Object> p2 = new SimpleMapProperty<>(VALUE_1b);\n@@ -182,2 +182,2 @@\n-        final ObservableMap<Object, Object> source1 = FXCollections.observableMap(new HashMap<Object, Object>());\n-        final ObservableMap<Object, Object> source2 = FXCollections.observableMap(new HashMap<Object, Object>());\n+        final ObservableMap<Object, Object> source1 = FXCollections.observableMap(new HashMap<>());\n+        final ObservableMap<Object, Object> source2 = FXCollections.observableMap(new HashMap<>());\n@@ -238,2 +238,2 @@\n-        final ObservableMap<Object, Object> source1 = FXCollections.observableMap(new HashMap<Object, Object>());\n-        final ObservableMap<Object, Object> source2 = FXCollections.observableMap(new HashMap<Object, Object>());\n+        final ObservableMap<Object, Object> source1 = FXCollections.observableMap(new HashMap<>());\n+        final ObservableMap<Object, Object> source2 = FXCollections.observableMap(new HashMap<>());\n@@ -294,2 +294,2 @@\n-        final ObservableMap<Object, Object> source1 = FXCollections.observableMap(new HashMap<Object, Object>());\n-        final ObservableMap<Object, Object> source2 = FXCollections.observableMap(new HashMap<Object, Object>());\n+        final ObservableMap<Object, Object> source1 = FXCollections.observableMap(new HashMap<>());\n+        final ObservableMap<Object, Object> source2 = FXCollections.observableMap(new HashMap<>());\n@@ -316,1 +316,1 @@\n-        mapChangeListener.assertMultipleCalls(new Call<Object, Object>(key, value1, value2));\n+        mapChangeListener.assertMultipleCalls(new Call<>(key, value1, value2));\n@@ -343,1 +343,1 @@\n-        mapChangeListener.assertMultipleCalls(new Call<Object, Object>(key, value1, value2));\n+        mapChangeListener.assertMultipleCalls(new Call<>(key, value1, value2));\n@@ -504,1 +504,1 @@\n-        final MapProperty<Object, Object> v = new SimpleMapProperty<Object, Object>(VALUE_1a);\n+        final MapProperty<Object, Object> v = new SimpleMapProperty<>(VALUE_1a);\n@@ -512,1 +512,1 @@\n-        final ObservableObjectValueStub<ObservableMap<Object, Object>> v = new ObservableObjectValueStub<ObservableMap<Object, Object>>(FXCollections.observableMap(VALUE_1a));\n+        final ObservableObjectValueStub<ObservableMap<Object, Object>> v = new ObservableObjectValueStub<>(FXCollections.observableMap(VALUE_1a));\n@@ -544,1 +544,1 @@\n-        final ObservableObjectValueStub<ObservableMap<Object, Object>> v = new ObservableObjectValueStub<ObservableMap<Object, Object>>(FXCollections.observableMap(VALUE_1a));\n+        final ObservableObjectValueStub<ObservableMap<Object, Object>> v = new ObservableObjectValueStub<>(FXCollections.observableMap(VALUE_1a));\n@@ -576,1 +576,1 @@\n-        final ObservableObjectValueStub<ObservableMap<Object, Object>> v = new ObservableObjectValueStub<ObservableMap<Object, Object>>(FXCollections.observableMap(VALUE_1a));\n+        final ObservableObjectValueStub<ObservableMap<Object, Object>> v = new ObservableObjectValueStub<>(FXCollections.observableMap(VALUE_1a));\n@@ -616,2 +616,2 @@\n-        final MapProperty<Object, Object> v1 = new SimpleMapProperty<Object, Object>(VALUE_1a);\n-        final MapProperty<Object, Object> v2 = new SimpleMapProperty<Object, Object>(VALUE_2a);\n+        final MapProperty<Object, Object> v1 = new SimpleMapProperty<>(VALUE_1a);\n+        final MapProperty<Object, Object> v2 = new SimpleMapProperty<>(VALUE_2a);\n@@ -691,1 +691,1 @@\n-        final MapProperty<Object, Object> v = new SimpleMapProperty<Object, Object>(VALUE_1a);\n+        final MapProperty<Object, Object> v = new SimpleMapProperty<>(VALUE_1a);\n@@ -715,1 +715,1 @@\n-        final MapProperty<Object, Object> v = new SimpleMapProperty<Object, Object>(VALUE_1a);\n+        final MapProperty<Object, Object> v = new SimpleMapProperty<>(VALUE_1a);\n@@ -739,1 +739,1 @@\n-        final ObservableMap<Object, Object> value1 = FXCollections.observableMap(new HashMap<Object, Object>());\n+        final ObservableMap<Object, Object> value1 = FXCollections.observableMap(new HashMap<>());\n@@ -742,2 +742,2 @@\n-        final ObservableMap<Object, Object> value2 = FXCollections.observableMap(new HashMap<Object, Object>());\n-        final MapProperty<Object, Object> v = new SimpleMapProperty<Object, Object>(value2);\n+        final ObservableMap<Object, Object> value2 = FXCollections.observableMap(new HashMap<>());\n+        final MapProperty<Object, Object> v = new SimpleMapProperty<>(value2);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/MapPropertyBaseTest.java","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.util.HashMap;\n@@ -58,2 +57,2 @@\n-        final MapProperty<Object, Object> p1 = new SimpleMapProperty<Object, Object>(VALUE_2);\n-        final MapProperty<Object, Object> p2 = new SimpleMapProperty<Object, Object>(VALUE_1);\n+        final MapProperty<Object, Object> p1 = new SimpleMapProperty<>(VALUE_2);\n+        final MapProperty<Object, Object> p2 = new SimpleMapProperty<>(VALUE_1);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/MapPropertyTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-        changeListener = new ChangeListenerMock<Object>(UNDEFINED);\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n@@ -78,1 +78,1 @@\n-        final ObjectProperty<Object> p1 = new SimpleObjectProperty<Object>();\n+        final ObjectProperty<Object> p1 = new SimpleObjectProperty<>();\n@@ -83,1 +83,1 @@\n-        final ObjectProperty<Object> p2 = new SimpleObjectProperty<Object>(VALUE_1b);\n+        final ObjectProperty<Object> p2 = new SimpleObjectProperty<>(VALUE_1b);\n@@ -209,1 +209,1 @@\n-        final ObjectProperty<Object> v = new SimpleObjectProperty<Object>(VALUE_1a);\n+        final ObjectProperty<Object> v = new SimpleObjectProperty<>(VALUE_1a);\n@@ -217,1 +217,1 @@\n-        final ObservableObjectValueStub<Object> v = new ObservableObjectValueStub<Object>(VALUE_1a);\n+        final ObservableObjectValueStub<Object> v = new ObservableObjectValueStub<>(VALUE_1a);\n@@ -249,1 +249,1 @@\n-        final ObservableObjectValueStub<Object> v = new ObservableObjectValueStub<Object>(VALUE_1a);\n+        final ObservableObjectValueStub<Object> v = new ObservableObjectValueStub<>(VALUE_1a);\n@@ -286,2 +286,2 @@\n-        final ObjectProperty<Object> v1 = new SimpleObjectProperty<Object>(VALUE_1a);\n-        final ObjectProperty<Object> v2 = new SimpleObjectProperty<Object>(VALUE_2a);\n+        final ObjectProperty<Object> v1 = new SimpleObjectProperty<>(VALUE_1a);\n+        final ObjectProperty<Object> v2 = new SimpleObjectProperty<>(VALUE_2a);\n@@ -326,1 +326,1 @@\n-        final ObjectProperty<Object> v = new SimpleObjectProperty<Object>(VALUE_1a);\n+        final ObjectProperty<Object> v = new SimpleObjectProperty<>(VALUE_1a);\n@@ -350,1 +350,1 @@\n-        final ObjectProperty<Object> v = new SimpleObjectProperty<Object>(VALUE_1a);\n+        final ObjectProperty<Object> v = new SimpleObjectProperty<>(VALUE_1a);\n@@ -375,1 +375,1 @@\n-        final ObjectProperty<Object> v = new SimpleObjectProperty<Object>(value2);\n+        final ObjectProperty<Object> v = new SimpleObjectProperty<>(value2);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ObjectPropertyBaseTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n-        final ObjectProperty<Object> p1 = new SimpleObjectProperty<Object>(VALUE_2);\n-        final ObjectProperty<Object> p2 = new SimpleObjectProperty<Object>(VALUE_1);\n+        final ObjectProperty<Object> p1 = new SimpleObjectProperty<>(VALUE_2);\n+        final ObjectProperty<Object> p2 = new SimpleObjectProperty<>(VALUE_1);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ObjectPropertyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        final PropertyReference<Integer> property = new PropertyReference<Integer>(Person.class, \"age\");\n+        final PropertyReference<Integer> property = new PropertyReference<>(Person.class, \"age\");\n@@ -63,1 +63,1 @@\n-        final PropertyReference<Integer> property = new PropertyReference<Integer>(Person.class, \"noRead\");\n+        final PropertyReference<Integer> property = new PropertyReference<>(Person.class, \"noRead\");\n@@ -85,1 +85,1 @@\n-        final PropertyReference<Integer> property = new PropertyReference<Integer>(Person.class, \"noWrite\");\n+        final PropertyReference<Integer> property = new PropertyReference<>(Person.class, \"noWrite\");\n@@ -106,1 +106,1 @@\n-        final PropertyReference<Integer> property = new PropertyReference<Integer>(Person.class, \"noReadWrite\");\n+        final PropertyReference<Integer> property = new PropertyReference<>(Person.class, \"noReadWrite\");\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/PropertyReferenceTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-import javafx.beans.property.StringProperty;\n-\n@@ -56,1 +54,1 @@\n-        public static final PropertyReference<String> NAME = new PropertyReference<String>(Named.class, \"name\");\n+        public static final PropertyReference<String> NAME = new PropertyReference<>(Named.class, \"name\");\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/PropertyReferenceWithInterfacesTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        changeListener = new ChangeListenerMock<Boolean>(UNDEFINED);\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyBooleanPropertyBaseTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n@@ -32,3 +30,0 @@\n-import javafx.beans.binding.BooleanBinding;\n-import javafx.beans.binding.BooleanExpression;\n-import javafx.beans.binding.ObjectExpression;\n@@ -40,4 +35,0 @@\n-import javafx.beans.value.ObservableValue;\n-import javafx.beans.value.ObservableValueStub;\n-import javafx.collections.FXCollections;\n-\n@@ -93,1 +84,1 @@\n-        final ReadOnlyObjectWrapper<Boolean> valueModel = new ReadOnlyObjectWrapper<Boolean>();\n+        final ReadOnlyObjectWrapper<Boolean> valueModel = new ReadOnlyObjectWrapper<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyBooleanPropertyTest.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -65,2 +65,2 @@\n-        internalChangeListener = new ChangeListenerMock<Boolean>(UNDEFINED);\n-        publicChangeListener = new ChangeListenerMock<Boolean>(UNDEFINED);\n+        internalChangeListener = new ChangeListenerMock<>(UNDEFINED);\n+        publicChangeListener = new ChangeListenerMock<>(UNDEFINED);\n@@ -94,1 +94,1 @@\n-        assertEquals((Boolean)DEFAULT, p1.getValue());\n+        assertEquals(DEFAULT, p1.getValue());\n@@ -100,1 +100,1 @@\n-        assertEquals((Boolean)DEFAULT, r1.getValue());\n+        assertEquals(DEFAULT, r1.getValue());\n@@ -109,1 +109,1 @@\n-        assertEquals((Boolean)VALUE_1, p1.getValue());\n+        assertEquals(VALUE_1, p1.getValue());\n@@ -115,1 +115,1 @@\n-        assertEquals((Boolean)VALUE_1, r1.getValue());\n+        assertEquals(VALUE_1, r1.getValue());\n@@ -126,1 +126,1 @@\n-        assertEquals((Boolean)DEFAULT, p1.getValue());\n+        assertEquals(DEFAULT, p1.getValue());\n@@ -132,1 +132,1 @@\n-        assertEquals((Boolean)DEFAULT, r1.getValue());\n+        assertEquals(DEFAULT, r1.getValue());\n@@ -143,1 +143,1 @@\n-        assertEquals((Boolean)VALUE_1, p1.getValue());\n+        assertEquals(VALUE_1, p1.getValue());\n@@ -149,1 +149,1 @@\n-        assertEquals((Boolean)VALUE_1, r1.getValue());\n+        assertEquals(VALUE_1, r1.getValue());\n@@ -444,1 +444,1 @@\n-        final ObservableObjectValueStub<Boolean> v = new ObservableObjectValueStub<Boolean>(VALUE_1);\n+        final ObservableObjectValueStub<Boolean> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -484,1 +484,1 @@\n-        final ObservableObjectValueStub<Boolean> v = new ObservableObjectValueStub<Boolean>(VALUE_1);\n+        final ObservableObjectValueStub<Boolean> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -520,1 +520,1 @@\n-        final ObservableObjectValueStub<Boolean> v = new ObservableObjectValueStub<Boolean>(VALUE_1);\n+        final ObservableObjectValueStub<Boolean> v = new ObservableObjectValueStub<>(VALUE_1);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyBooleanWrapperTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        changeListener = new ChangeListenerMock<Number>(UNDEFINED);\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyDoublePropertyBaseTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n@@ -32,1 +30,0 @@\n-import javafx.beans.binding.ObjectExpression;\n@@ -38,2 +35,0 @@\n-import static org.junit.Assert.assertEquals;\n-\n@@ -90,1 +85,1 @@\n-        final ReadOnlyObjectWrapper<Double> valueModel = new ReadOnlyObjectWrapper<Double>();\n+        final ReadOnlyObjectWrapper<Double> valueModel = new ReadOnlyObjectWrapper<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyDoublePropertyTest.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -66,2 +66,2 @@\n-        internalChangeListener = new ChangeListenerMock<Number>(UNDEFINED);\n-        publicChangeListener = new ChangeListenerMock<Number>(UNDEFINED);\n+        internalChangeListener = new ChangeListenerMock<>(UNDEFINED);\n+        publicChangeListener = new ChangeListenerMock<>(UNDEFINED);\n@@ -95,1 +95,1 @@\n-        assertEquals((Double)DEFAULT, p1.getValue(), EPSILON);\n+        assertEquals(DEFAULT, p1.getValue(), EPSILON);\n@@ -101,1 +101,1 @@\n-        assertEquals((Double)DEFAULT, r1.getValue(), EPSILON);\n+        assertEquals(DEFAULT, r1.getValue(), EPSILON);\n@@ -110,1 +110,1 @@\n-        assertEquals((Double)VALUE_1, p1.getValue(), EPSILON);\n+        assertEquals(VALUE_1, p1.getValue(), EPSILON);\n@@ -116,1 +116,1 @@\n-        assertEquals((Double)VALUE_1, r1.getValue(), EPSILON);\n+        assertEquals(VALUE_1, r1.getValue(), EPSILON);\n@@ -127,1 +127,1 @@\n-        assertEquals((Double)DEFAULT, p1.getValue(), EPSILON);\n+        assertEquals(DEFAULT, p1.getValue(), EPSILON);\n@@ -133,1 +133,1 @@\n-        assertEquals((Double)DEFAULT, r1.getValue(), EPSILON);\n+        assertEquals(DEFAULT, r1.getValue(), EPSILON);\n@@ -144,1 +144,1 @@\n-        assertEquals((Double)VALUE_1, p1.getValue(), EPSILON);\n+        assertEquals(VALUE_1, p1.getValue(), EPSILON);\n@@ -150,1 +150,1 @@\n-        assertEquals((Double)VALUE_1, r1.getValue(), EPSILON);\n+        assertEquals(VALUE_1, r1.getValue(), EPSILON);\n@@ -445,1 +445,1 @@\n-        final ObservableObjectValueStub<Double> v = new ObservableObjectValueStub<Double>(VALUE_1);\n+        final ObservableObjectValueStub<Double> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -485,1 +485,1 @@\n-        final ObservableObjectValueStub<Double> v = new ObservableObjectValueStub<Double>(VALUE_1);\n+        final ObservableObjectValueStub<Double> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -521,1 +521,1 @@\n-        final ObservableObjectValueStub<Double> v = new ObservableObjectValueStub<Double>(VALUE_1);\n+        final ObservableObjectValueStub<Double> v = new ObservableObjectValueStub<>(VALUE_1);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyDoubleWrapperTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        changeListener = new ChangeListenerMock<Number>(UNDEFINED);\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyFloatPropertyBaseTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n@@ -32,1 +30,0 @@\n-import javafx.beans.binding.ObjectExpression;\n@@ -38,2 +35,0 @@\n-import static org.junit.Assert.assertEquals;\n-\n@@ -90,1 +85,1 @@\n-        final ReadOnlyObjectWrapper<Float> valueModel = new ReadOnlyObjectWrapper<Float>();\n+        final ReadOnlyObjectWrapper<Float> valueModel = new ReadOnlyObjectWrapper<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyFloatPropertyTest.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -66,2 +66,2 @@\n-        internalChangeListener = new ChangeListenerMock<Number>(UNDEFINED);\n-        publicChangeListener = new ChangeListenerMock<Number>(UNDEFINED);\n+        internalChangeListener = new ChangeListenerMock<>(UNDEFINED);\n+        publicChangeListener = new ChangeListenerMock<>(UNDEFINED);\n@@ -95,1 +95,1 @@\n-        assertEquals((Float)DEFAULT, p1.getValue(), EPSILON);\n+        assertEquals(DEFAULT, p1.getValue(), EPSILON);\n@@ -101,1 +101,1 @@\n-        assertEquals((Float)DEFAULT, r1.getValue(), EPSILON);\n+        assertEquals(DEFAULT, r1.getValue(), EPSILON);\n@@ -110,1 +110,1 @@\n-        assertEquals((Float)VALUE_1, p1.getValue(), EPSILON);\n+        assertEquals(VALUE_1, p1.getValue(), EPSILON);\n@@ -116,1 +116,1 @@\n-        assertEquals((Float)VALUE_1, r1.getValue(), EPSILON);\n+        assertEquals(VALUE_1, r1.getValue(), EPSILON);\n@@ -127,1 +127,1 @@\n-        assertEquals((Float)DEFAULT, p1.getValue(), EPSILON);\n+        assertEquals(DEFAULT, p1.getValue(), EPSILON);\n@@ -133,1 +133,1 @@\n-        assertEquals((Float)DEFAULT, r1.getValue(), EPSILON);\n+        assertEquals(DEFAULT, r1.getValue(), EPSILON);\n@@ -144,1 +144,1 @@\n-        assertEquals((Float)VALUE_1, p1.getValue(), EPSILON);\n+        assertEquals(VALUE_1, p1.getValue(), EPSILON);\n@@ -150,1 +150,1 @@\n-        assertEquals((Float)VALUE_1, r1.getValue(), EPSILON);\n+        assertEquals(VALUE_1, r1.getValue(), EPSILON);\n@@ -445,1 +445,1 @@\n-        final ObservableObjectValueStub<Float> v = new ObservableObjectValueStub<Float>(VALUE_1);\n+        final ObservableObjectValueStub<Float> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -485,1 +485,1 @@\n-        final ObservableObjectValueStub<Float> v = new ObservableObjectValueStub<Float>(VALUE_1);\n+        final ObservableObjectValueStub<Float> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -521,1 +521,1 @@\n-        final ObservableObjectValueStub<Float> v = new ObservableObjectValueStub<Float>(VALUE_1);\n+        final ObservableObjectValueStub<Float> v = new ObservableObjectValueStub<>(VALUE_1);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyFloatWrapperTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        changeListener = new ChangeListenerMock<Number>(UNDEFINED);\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyIntegerPropertyBaseTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n@@ -32,1 +30,0 @@\n-import javafx.beans.binding.ObjectExpression;\n@@ -38,2 +35,0 @@\n-import static org.junit.Assert.assertEquals;\n-\n@@ -89,1 +84,1 @@\n-        final ReadOnlyObjectWrapper<Integer> valueModel = new ReadOnlyObjectWrapper<Integer>();\n+        final ReadOnlyObjectWrapper<Integer> valueModel = new ReadOnlyObjectWrapper<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyIntegerPropertyTest.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -65,2 +65,2 @@\n-        internalChangeListener = new ChangeListenerMock<Number>(UNDEFINED);\n-        publicChangeListener = new ChangeListenerMock<Number>(UNDEFINED);\n+        internalChangeListener = new ChangeListenerMock<>(UNDEFINED);\n+        publicChangeListener = new ChangeListenerMock<>(UNDEFINED);\n@@ -444,1 +444,1 @@\n-        final ObservableObjectValueStub<Integer> v = new ObservableObjectValueStub<Integer>(VALUE_1);\n+        final ObservableObjectValueStub<Integer> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -484,1 +484,1 @@\n-        final ObservableObjectValueStub<Integer> v = new ObservableObjectValueStub<Integer>(VALUE_1);\n+        final ObservableObjectValueStub<Integer> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -520,1 +520,1 @@\n-        final ObservableObjectValueStub<Integer> v = new ObservableObjectValueStub<Integer>(VALUE_1);\n+        final ObservableObjectValueStub<Integer> v = new ObservableObjectValueStub<>(VALUE_1);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyIntegerWrapperTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        changeListener = new ChangeListenerMock<Object>(UNDEFINED);\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyListPropertyBaseTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,2 +65,2 @@\n-        internalChangeListener = new ChangeListenerMock<Object>(UNDEFINED);\n-        publicChangeListener = new ChangeListenerMock<Object>(UNDEFINED);\n+        internalChangeListener = new ChangeListenerMock<>(UNDEFINED);\n+        publicChangeListener = new ChangeListenerMock<>(UNDEFINED);\n@@ -92,1 +92,1 @@\n-        final ReadOnlyListWrapper<Object> p1 = new ReadOnlyListWrapper<Object>();\n+        final ReadOnlyListWrapper<Object> p1 = new ReadOnlyListWrapper<>();\n@@ -94,1 +94,1 @@\n-        assertEquals((Object)DEFAULT, p1.getValue());\n+        assertEquals(DEFAULT, p1.getValue());\n@@ -100,1 +100,1 @@\n-        assertEquals((Object)DEFAULT, r1.getValue());\n+        assertEquals(DEFAULT, r1.getValue());\n@@ -107,1 +107,1 @@\n-        final ReadOnlyListWrapper<Object> p1 = new ReadOnlyListWrapper<Object>(VALUE_1);\n+        final ReadOnlyListWrapper<Object> p1 = new ReadOnlyListWrapper<>(VALUE_1);\n@@ -109,1 +109,1 @@\n-        assertEquals((Object)VALUE_1, p1.getValue());\n+        assertEquals(VALUE_1, p1.getValue());\n@@ -115,1 +115,1 @@\n-        assertEquals((Object)VALUE_1, r1.getValue());\n+        assertEquals(VALUE_1, r1.getValue());\n@@ -124,1 +124,1 @@\n-        final ReadOnlyListWrapper<Object> p1 = new ReadOnlyListWrapper<Object>(bean, name);\n+        final ReadOnlyListWrapper<Object> p1 = new ReadOnlyListWrapper<>(bean, name);\n@@ -126,1 +126,1 @@\n-        assertEquals((Object)DEFAULT, p1.getValue());\n+        assertEquals(DEFAULT, p1.getValue());\n@@ -132,1 +132,1 @@\n-        assertEquals((Object)DEFAULT, r1.getValue());\n+        assertEquals(DEFAULT, r1.getValue());\n@@ -141,1 +141,1 @@\n-        final ReadOnlyListWrapper<Object> p1 = new ReadOnlyListWrapper<Object>(bean, name, VALUE_1);\n+        final ReadOnlyListWrapper<Object> p1 = new ReadOnlyListWrapper<>(bean, name, VALUE_1);\n@@ -143,1 +143,1 @@\n-        assertEquals((Object)VALUE_1, p1.getValue());\n+        assertEquals(VALUE_1, p1.getValue());\n@@ -149,1 +149,1 @@\n-        assertEquals((Object)VALUE_1, r1.getValue());\n+        assertEquals(VALUE_1, r1.getValue());\n@@ -324,1 +324,1 @@\n-        final ListProperty<Object> v = new SimpleListProperty<Object>(VALUE_1);\n+        final ListProperty<Object> v = new SimpleListProperty<>(VALUE_1);\n@@ -332,1 +332,1 @@\n-        final ObservableObjectValueStub<ObservableList<Object>> v = new ObservableObjectValueStub<ObservableList<Object>>(VALUE_1);\n+        final ObservableObjectValueStub<ObservableList<Object>> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -372,1 +372,1 @@\n-        final ObservableObjectValueStub<ObservableList<Object>> v = new ObservableObjectValueStub<ObservableList<Object>>(VALUE_1);\n+        final ObservableObjectValueStub<ObservableList<Object>> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -408,1 +408,1 @@\n-        final ObservableObjectValueStub<ObservableList<Object>> v = new ObservableObjectValueStub<ObservableList<Object>>(VALUE_1);\n+        final ObservableObjectValueStub<ObservableList<Object>> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -444,1 +444,1 @@\n-        final ObservableObjectValueStub<ObservableList<Object>> v = new ObservableObjectValueStub<ObservableList<Object>>(VALUE_1);\n+        final ObservableObjectValueStub<ObservableList<Object>> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -484,1 +484,1 @@\n-        final ObservableObjectValueStub<ObservableList<Object>> v = new ObservableObjectValueStub<ObservableList<Object>>(VALUE_1);\n+        final ObservableObjectValueStub<ObservableList<Object>> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -520,1 +520,1 @@\n-        final ObservableObjectValueStub<ObservableList<Object>> v = new ObservableObjectValueStub<ObservableList<Object>>(VALUE_1);\n+        final ObservableObjectValueStub<ObservableList<Object>> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -561,2 +561,2 @@\n-        final ListProperty<Object> v1 = new SimpleListProperty<Object>(VALUE_1);\n-        final ListProperty<Object> v2 = new SimpleListProperty<Object>(VALUE_2);\n+        final ListProperty<Object> v1 = new SimpleListProperty<>(VALUE_1);\n+        final ListProperty<Object> v2 = new SimpleListProperty<>(VALUE_2);\n@@ -608,1 +608,1 @@\n-        final ListProperty<Object> v = new SimpleListProperty<Object>(VALUE_1);\n+        final ListProperty<Object> v = new SimpleListProperty<>(VALUE_1);\n@@ -637,1 +637,1 @@\n-        final ListProperty<Object> v = new SimpleListProperty<Object>(VALUE_1);\n+        final ListProperty<Object> v = new SimpleListProperty<>(VALUE_1);\n@@ -691,1 +691,1 @@\n-        final ReadOnlyListWrapper<Object> v1 = new ReadOnlyListWrapper<Object>();\n+        final ReadOnlyListWrapper<Object> v1 = new ReadOnlyListWrapper<>();\n@@ -698,2 +698,2 @@\n-        final ListProperty<Object> v1 = new SimpleListProperty<Object>(VALUE_1);\n-        final ReadOnlyListWrapper<Object> p1 = new ReadOnlyListWrapper<Object>();\n+        final ListProperty<Object> v1 = new SimpleListProperty<>(VALUE_1);\n+        final ReadOnlyListWrapper<Object> p1 = new ReadOnlyListWrapper<>();\n@@ -710,1 +710,1 @@\n-        final ListProperty<Object> v1 = new SimpleListProperty<Object>(VALUE_1);\n+        final ListProperty<Object> v1 = new SimpleListProperty<>(VALUE_1);\n@@ -731,1 +731,1 @@\n-        final ReadOnlyListWrapper<Object> v2 = new ReadOnlyListWrapper<Object>(bean, name);\n+        final ReadOnlyListWrapper<Object> v2 = new ReadOnlyListWrapper<>(bean, name);\n@@ -735,1 +735,1 @@\n-        final ReadOnlyListWrapper<Object> v3 = new ReadOnlyListWrapper<Object>(bean, \"\");\n+        final ReadOnlyListWrapper<Object> v3 = new ReadOnlyListWrapper<>(bean, \"\");\n@@ -739,1 +739,1 @@\n-        final ReadOnlyListWrapper<Object> v4 = new ReadOnlyListWrapper<Object>(null, name);\n+        final ReadOnlyListWrapper<Object> v4 = new ReadOnlyListWrapper<>(null, name);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyListWrapperTest.java","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        changeListener = new ChangeListenerMock<Number>(UNDEFINED);\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyLongPropertyBaseTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n@@ -32,1 +30,0 @@\n-import javafx.beans.binding.ObjectExpression;\n@@ -89,1 +86,1 @@\n-        final ReadOnlyObjectWrapper<Long> valueModel = new ReadOnlyObjectWrapper<Long>();\n+        final ReadOnlyObjectWrapper<Long> valueModel = new ReadOnlyObjectWrapper<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyLongPropertyTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -65,2 +65,2 @@\n-        internalChangeListener = new ChangeListenerMock<Number>(UNDEFINED);\n-        publicChangeListener = new ChangeListenerMock<Number>(UNDEFINED);\n+        internalChangeListener = new ChangeListenerMock<>(UNDEFINED);\n+        publicChangeListener = new ChangeListenerMock<>(UNDEFINED);\n@@ -444,1 +444,1 @@\n-        final ObservableObjectValueStub<Long> v = new ObservableObjectValueStub<Long>(VALUE_1);\n+        final ObservableObjectValueStub<Long> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -484,1 +484,1 @@\n-        final ObservableObjectValueStub<Long> v = new ObservableObjectValueStub<Long>(VALUE_1);\n+        final ObservableObjectValueStub<Long> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -520,1 +520,1 @@\n-        final ObservableObjectValueStub<Long> v = new ObservableObjectValueStub<Long>(VALUE_1);\n+        final ObservableObjectValueStub<Long> v = new ObservableObjectValueStub<>(VALUE_1);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyLongWrapperTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.util.HashMap;\n@@ -59,1 +58,1 @@\n-        changeListener = new ChangeListenerMock<Object>(UNDEFINED);\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyMapPropertyBaseTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -65,2 +65,2 @@\n-        internalChangeListener = new ChangeListenerMock<Object>(UNDEFINED);\n-        publicChangeListener = new ChangeListenerMock<Object>(UNDEFINED);\n+        internalChangeListener = new ChangeListenerMock<>(UNDEFINED);\n+        publicChangeListener = new ChangeListenerMock<>(UNDEFINED);\n@@ -92,1 +92,1 @@\n-        final ReadOnlyMapWrapper<Object, Object> p1 = new ReadOnlyMapWrapper<Object, Object>();\n+        final ReadOnlyMapWrapper<Object, Object> p1 = new ReadOnlyMapWrapper<>();\n@@ -94,1 +94,1 @@\n-        assertEquals((Object)DEFAULT, p1.getValue());\n+        assertEquals(DEFAULT, p1.getValue());\n@@ -100,1 +100,1 @@\n-        assertEquals((Object)DEFAULT, r1.getValue());\n+        assertEquals(DEFAULT, r1.getValue());\n@@ -107,1 +107,1 @@\n-        final ReadOnlyMapWrapper<Object, Object> p1 = new ReadOnlyMapWrapper<Object, Object>(VALUE_1);\n+        final ReadOnlyMapWrapper<Object, Object> p1 = new ReadOnlyMapWrapper<>(VALUE_1);\n@@ -109,1 +109,1 @@\n-        assertEquals((Object)VALUE_1, p1.getValue());\n+        assertEquals(VALUE_1, p1.getValue());\n@@ -115,1 +115,1 @@\n-        assertEquals((Object)VALUE_1, r1.getValue());\n+        assertEquals(VALUE_1, r1.getValue());\n@@ -124,1 +124,1 @@\n-        final ReadOnlyMapWrapper<Object, Object> p1 = new ReadOnlyMapWrapper<Object, Object>(bean, name);\n+        final ReadOnlyMapWrapper<Object, Object> p1 = new ReadOnlyMapWrapper<>(bean, name);\n@@ -126,1 +126,1 @@\n-        assertEquals((Object)DEFAULT, p1.getValue());\n+        assertEquals(DEFAULT, p1.getValue());\n@@ -132,1 +132,1 @@\n-        assertEquals((Object)DEFAULT, r1.getValue());\n+        assertEquals(DEFAULT, r1.getValue());\n@@ -141,1 +141,1 @@\n-        final ReadOnlyMapWrapper<Object, Object> p1 = new ReadOnlyMapWrapper<Object, Object>(bean, name, VALUE_1);\n+        final ReadOnlyMapWrapper<Object, Object> p1 = new ReadOnlyMapWrapper<>(bean, name, VALUE_1);\n@@ -143,1 +143,1 @@\n-        assertEquals((Object)VALUE_1, p1.getValue());\n+        assertEquals(VALUE_1, p1.getValue());\n@@ -149,1 +149,1 @@\n-        assertEquals((Object)VALUE_1, r1.getValue());\n+        assertEquals(VALUE_1, r1.getValue());\n@@ -324,1 +324,1 @@\n-        final MapProperty<Object, Object> v = new SimpleMapProperty<Object, Object>(VALUE_1);\n+        final MapProperty<Object, Object> v = new SimpleMapProperty<>(VALUE_1);\n@@ -332,1 +332,1 @@\n-        final ObservableObjectValueStub<ObservableMap<Object, Object>> v = new ObservableObjectValueStub<ObservableMap<Object, Object>>(VALUE_1);\n+        final ObservableObjectValueStub<ObservableMap<Object, Object>> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -372,1 +372,1 @@\n-        final ObservableObjectValueStub<ObservableMap<Object, Object>> v = new ObservableObjectValueStub<ObservableMap<Object, Object>>(VALUE_1);\n+        final ObservableObjectValueStub<ObservableMap<Object, Object>> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -408,1 +408,1 @@\n-        final ObservableObjectValueStub<ObservableMap<Object, Object>> v = new ObservableObjectValueStub<ObservableMap<Object, Object>>(VALUE_1);\n+        final ObservableObjectValueStub<ObservableMap<Object, Object>> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -444,1 +444,1 @@\n-        final ObservableObjectValueStub<ObservableMap<Object, Object>> v = new ObservableObjectValueStub<ObservableMap<Object, Object>>(VALUE_1);\n+        final ObservableObjectValueStub<ObservableMap<Object, Object>> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -484,1 +484,1 @@\n-        final ObservableObjectValueStub<ObservableMap<Object, Object>> v = new ObservableObjectValueStub<ObservableMap<Object, Object>>(VALUE_1);\n+        final ObservableObjectValueStub<ObservableMap<Object, Object>> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -520,1 +520,1 @@\n-        final ObservableObjectValueStub<ObservableMap<Object, Object>> v = new ObservableObjectValueStub<ObservableMap<Object, Object>>(VALUE_1);\n+        final ObservableObjectValueStub<ObservableMap<Object, Object>> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -561,2 +561,2 @@\n-        final MapProperty<Object, Object> v1 = new SimpleMapProperty<Object, Object>(VALUE_1);\n-        final MapProperty<Object, Object> v2 = new SimpleMapProperty<Object, Object>(VALUE_2);\n+        final MapProperty<Object, Object> v1 = new SimpleMapProperty<>(VALUE_1);\n+        final MapProperty<Object, Object> v2 = new SimpleMapProperty<>(VALUE_2);\n@@ -608,1 +608,1 @@\n-        final MapProperty<Object, Object> v = new SimpleMapProperty<Object, Object>(VALUE_1);\n+        final MapProperty<Object, Object> v = new SimpleMapProperty<>(VALUE_1);\n@@ -637,1 +637,1 @@\n-        final MapProperty<Object, Object> v = new SimpleMapProperty<Object, Object>(VALUE_1);\n+        final MapProperty<Object, Object> v = new SimpleMapProperty<>(VALUE_1);\n@@ -691,1 +691,1 @@\n-        final ReadOnlyMapWrapper<Object, Object> v1 = new ReadOnlyMapWrapper<Object, Object>();\n+        final ReadOnlyMapWrapper<Object, Object> v1 = new ReadOnlyMapWrapper<>();\n@@ -698,2 +698,2 @@\n-        final MapProperty<Object, Object> v1 = new SimpleMapProperty<Object, Object>(VALUE_1);\n-        final ReadOnlyMapWrapper<Object, Object> p1 = new ReadOnlyMapWrapper<Object, Object>();\n+        final MapProperty<Object, Object> v1 = new SimpleMapProperty<>(VALUE_1);\n+        final ReadOnlyMapWrapper<Object, Object> p1 = new ReadOnlyMapWrapper<>();\n@@ -710,1 +710,1 @@\n-        final MapProperty<Object, Object> v1 = new SimpleMapProperty<Object, Object>(VALUE_1);\n+        final MapProperty<Object, Object> v1 = new SimpleMapProperty<>(VALUE_1);\n@@ -731,1 +731,1 @@\n-        final ReadOnlyMapWrapper<Object, Object> v2 = new ReadOnlyMapWrapper<Object, Object>(bean, name);\n+        final ReadOnlyMapWrapper<Object, Object> v2 = new ReadOnlyMapWrapper<>(bean, name);\n@@ -735,1 +735,1 @@\n-        final ReadOnlyMapWrapper<Object, Object> v3 = new ReadOnlyMapWrapper<Object, Object>(bean, \"\");\n+        final ReadOnlyMapWrapper<Object, Object> v3 = new ReadOnlyMapWrapper<>(bean, \"\");\n@@ -739,1 +739,1 @@\n-        final ReadOnlyMapWrapper<Object, Object> v4 = new ReadOnlyMapWrapper<Object, Object>(null, name);\n+        final ReadOnlyMapWrapper<Object, Object> v4 = new ReadOnlyMapWrapper<>(null, name);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyMapWrapperTest.java","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        changeListener = new ChangeListenerMock<Object>(UNDEFINED);\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyObjectPropertyBaseTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyObjectPropertyTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,2 +64,2 @@\n-        internalChangeListener = new ChangeListenerMock<Object>(UNDEFINED);\n-        publicChangeListener = new ChangeListenerMock<Object>(UNDEFINED);\n+        internalChangeListener = new ChangeListenerMock<>(UNDEFINED);\n+        publicChangeListener = new ChangeListenerMock<>(UNDEFINED);\n@@ -91,1 +91,1 @@\n-        final ReadOnlyObjectWrapper<Object> p1 = new ReadOnlyObjectWrapper<Object>();\n+        final ReadOnlyObjectWrapper<Object> p1 = new ReadOnlyObjectWrapper<>();\n@@ -93,1 +93,1 @@\n-        assertEquals((Object)DEFAULT, p1.getValue());\n+        assertEquals(DEFAULT, p1.getValue());\n@@ -99,1 +99,1 @@\n-        assertEquals((Object)DEFAULT, r1.getValue());\n+        assertEquals(DEFAULT, r1.getValue());\n@@ -106,1 +106,1 @@\n-        final ReadOnlyObjectWrapper<Object> p1 = new ReadOnlyObjectWrapper<Object>(VALUE_1);\n+        final ReadOnlyObjectWrapper<Object> p1 = new ReadOnlyObjectWrapper<>(VALUE_1);\n@@ -108,1 +108,1 @@\n-        assertEquals((Object)VALUE_1, p1.getValue());\n+        assertEquals(VALUE_1, p1.getValue());\n@@ -114,1 +114,1 @@\n-        assertEquals((Object)VALUE_1, r1.getValue());\n+        assertEquals(VALUE_1, r1.getValue());\n@@ -123,1 +123,1 @@\n-        final ReadOnlyObjectWrapper<Object> p1 = new ReadOnlyObjectWrapper<Object>(bean, name);\n+        final ReadOnlyObjectWrapper<Object> p1 = new ReadOnlyObjectWrapper<>(bean, name);\n@@ -125,1 +125,1 @@\n-        assertEquals((Object)DEFAULT, p1.getValue());\n+        assertEquals(DEFAULT, p1.getValue());\n@@ -131,1 +131,1 @@\n-        assertEquals((Object)DEFAULT, r1.getValue());\n+        assertEquals(DEFAULT, r1.getValue());\n@@ -140,1 +140,1 @@\n-        final ReadOnlyObjectWrapper<Object> p1 = new ReadOnlyObjectWrapper<Object>(bean, name, VALUE_1);\n+        final ReadOnlyObjectWrapper<Object> p1 = new ReadOnlyObjectWrapper<>(bean, name, VALUE_1);\n@@ -142,1 +142,1 @@\n-        assertEquals((Object)VALUE_1, p1.getValue());\n+        assertEquals(VALUE_1, p1.getValue());\n@@ -148,1 +148,1 @@\n-        assertEquals((Object)VALUE_1, r1.getValue());\n+        assertEquals(VALUE_1, r1.getValue());\n@@ -323,1 +323,1 @@\n-        final ObjectProperty<Object> v = new SimpleObjectProperty<Object>(VALUE_1);\n+        final ObjectProperty<Object> v = new SimpleObjectProperty<>(VALUE_1);\n@@ -331,1 +331,1 @@\n-        final ObservableObjectValueStub<Object> v = new ObservableObjectValueStub<Object>(VALUE_1);\n+        final ObservableObjectValueStub<Object> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -371,1 +371,1 @@\n-        final ObservableObjectValueStub<Object> v = new ObservableObjectValueStub<Object>(VALUE_1);\n+        final ObservableObjectValueStub<Object> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -407,1 +407,1 @@\n-        final ObservableObjectValueStub<Object> v = new ObservableObjectValueStub<Object>(VALUE_1);\n+        final ObservableObjectValueStub<Object> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -443,1 +443,1 @@\n-        final ObservableObjectValueStub<Object> v = new ObservableObjectValueStub<Object>(VALUE_1);\n+        final ObservableObjectValueStub<Object> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -483,1 +483,1 @@\n-        final ObservableObjectValueStub<Object> v = new ObservableObjectValueStub<Object>(VALUE_1);\n+        final ObservableObjectValueStub<Object> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -519,1 +519,1 @@\n-        final ObservableObjectValueStub<Object> v = new ObservableObjectValueStub<Object>(VALUE_1);\n+        final ObservableObjectValueStub<Object> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -560,2 +560,2 @@\n-        final ObjectProperty<Object> v1 = new SimpleObjectProperty<Object>(VALUE_1);\n-        final ObjectProperty<Object> v2 = new SimpleObjectProperty<Object>(VALUE_2);\n+        final ObjectProperty<Object> v1 = new SimpleObjectProperty<>(VALUE_1);\n+        final ObjectProperty<Object> v2 = new SimpleObjectProperty<>(VALUE_2);\n@@ -607,1 +607,1 @@\n-        final ObjectProperty<Object> v = new SimpleObjectProperty<Object>(VALUE_1);\n+        final ObjectProperty<Object> v = new SimpleObjectProperty<>(VALUE_1);\n@@ -636,1 +636,1 @@\n-        final ObjectProperty<Object> v = new SimpleObjectProperty<Object>(VALUE_1);\n+        final ObjectProperty<Object> v = new SimpleObjectProperty<>(VALUE_1);\n@@ -690,1 +690,1 @@\n-        final ReadOnlyObjectWrapper<Object> v1 = new ReadOnlyObjectWrapper<Object>();\n+        final ReadOnlyObjectWrapper<Object> v1 = new ReadOnlyObjectWrapper<>();\n@@ -697,2 +697,2 @@\n-        final ObjectProperty<Object> v1 = new SimpleObjectProperty<Object>(VALUE_1);\n-        final ReadOnlyObjectWrapper<Object> p1 = new ReadOnlyObjectWrapper<Object>();\n+        final ObjectProperty<Object> v1 = new SimpleObjectProperty<>(VALUE_1);\n+        final ReadOnlyObjectWrapper<Object> p1 = new ReadOnlyObjectWrapper<>();\n@@ -709,1 +709,1 @@\n-        final ObjectProperty<Object> v1 = new SimpleObjectProperty<Object>(VALUE_1);\n+        final ObjectProperty<Object> v1 = new SimpleObjectProperty<>(VALUE_1);\n@@ -730,1 +730,1 @@\n-        final ReadOnlyObjectWrapper<Object> v2 = new ReadOnlyObjectWrapper<Object>(bean, name);\n+        final ReadOnlyObjectWrapper<Object> v2 = new ReadOnlyObjectWrapper<>(bean, name);\n@@ -734,1 +734,1 @@\n-        final ReadOnlyObjectWrapper<Object> v3 = new ReadOnlyObjectWrapper<Object>(bean, \"\");\n+        final ReadOnlyObjectWrapper<Object> v3 = new ReadOnlyObjectWrapper<>(bean, \"\");\n@@ -738,1 +738,1 @@\n-        final ReadOnlyObjectWrapper<Object> v4 = new ReadOnlyObjectWrapper<Object>(null, name);\n+        final ReadOnlyObjectWrapper<Object> v4 = new ReadOnlyObjectWrapper<>(null, name);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyObjectWrapperTest.java","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        changeListener = new ChangeListenerMock<Object>(UNDEFINED);\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlySetPropertyBaseTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,2 +63,2 @@\n-        internalChangeListener = new ChangeListenerMock<Object>(UNDEFINED);\n-        publicChangeListener = new ChangeListenerMock<Object>(UNDEFINED);\n+        internalChangeListener = new ChangeListenerMock<>(UNDEFINED);\n+        publicChangeListener = new ChangeListenerMock<>(UNDEFINED);\n@@ -90,1 +90,1 @@\n-        final ReadOnlySetWrapper<Object> p1 = new ReadOnlySetWrapper<Object>();\n+        final ReadOnlySetWrapper<Object> p1 = new ReadOnlySetWrapper<>();\n@@ -92,1 +92,1 @@\n-        assertEquals((Object)DEFAULT, p1.getValue());\n+        assertEquals(DEFAULT, p1.getValue());\n@@ -98,1 +98,1 @@\n-        assertEquals((Object)DEFAULT, r1.getValue());\n+        assertEquals(DEFAULT, r1.getValue());\n@@ -105,1 +105,1 @@\n-        final ReadOnlySetWrapper<Object> p1 = new ReadOnlySetWrapper<Object>(VALUE_1);\n+        final ReadOnlySetWrapper<Object> p1 = new ReadOnlySetWrapper<>(VALUE_1);\n@@ -107,1 +107,1 @@\n-        assertEquals((Object)VALUE_1, p1.getValue());\n+        assertEquals(VALUE_1, p1.getValue());\n@@ -113,1 +113,1 @@\n-        assertEquals((Object)VALUE_1, r1.getValue());\n+        assertEquals(VALUE_1, r1.getValue());\n@@ -122,1 +122,1 @@\n-        final ReadOnlySetWrapper<Object> p1 = new ReadOnlySetWrapper<Object>(bean, name);\n+        final ReadOnlySetWrapper<Object> p1 = new ReadOnlySetWrapper<>(bean, name);\n@@ -124,1 +124,1 @@\n-        assertEquals((Object)DEFAULT, p1.getValue());\n+        assertEquals(DEFAULT, p1.getValue());\n@@ -130,1 +130,1 @@\n-        assertEquals((Object)DEFAULT, r1.getValue());\n+        assertEquals(DEFAULT, r1.getValue());\n@@ -139,1 +139,1 @@\n-        final ReadOnlySetWrapper<Object> p1 = new ReadOnlySetWrapper<Object>(bean, name, VALUE_1);\n+        final ReadOnlySetWrapper<Object> p1 = new ReadOnlySetWrapper<>(bean, name, VALUE_1);\n@@ -141,1 +141,1 @@\n-        assertEquals((Object)VALUE_1, p1.getValue());\n+        assertEquals(VALUE_1, p1.getValue());\n@@ -147,1 +147,1 @@\n-        assertEquals((Object)VALUE_1, r1.getValue());\n+        assertEquals(VALUE_1, r1.getValue());\n@@ -322,1 +322,1 @@\n-        final SetProperty<Object> v = new SimpleSetProperty<Object>(VALUE_1);\n+        final SetProperty<Object> v = new SimpleSetProperty<>(VALUE_1);\n@@ -330,1 +330,1 @@\n-        final ObservableObjectValueStub<ObservableSet<Object>> v = new ObservableObjectValueStub<ObservableSet<Object>>(VALUE_1);\n+        final ObservableObjectValueStub<ObservableSet<Object>> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -370,1 +370,1 @@\n-        final ObservableObjectValueStub<ObservableSet<Object>> v = new ObservableObjectValueStub<ObservableSet<Object>>(VALUE_1);\n+        final ObservableObjectValueStub<ObservableSet<Object>> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -406,1 +406,1 @@\n-        final ObservableObjectValueStub<ObservableSet<Object>> v = new ObservableObjectValueStub<ObservableSet<Object>>(VALUE_1);\n+        final ObservableObjectValueStub<ObservableSet<Object>> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -442,1 +442,1 @@\n-        final ObservableObjectValueStub<ObservableSet<Object>> v = new ObservableObjectValueStub<ObservableSet<Object>>(VALUE_1);\n+        final ObservableObjectValueStub<ObservableSet<Object>> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -482,1 +482,1 @@\n-        final ObservableObjectValueStub<ObservableSet<Object>> v = new ObservableObjectValueStub<ObservableSet<Object>>(VALUE_1);\n+        final ObservableObjectValueStub<ObservableSet<Object>> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -518,1 +518,1 @@\n-        final ObservableObjectValueStub<ObservableSet<Object>> v = new ObservableObjectValueStub<ObservableSet<Object>>(VALUE_1);\n+        final ObservableObjectValueStub<ObservableSet<Object>> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -559,2 +559,2 @@\n-        final SetProperty<Object> v1 = new SimpleSetProperty<Object>(VALUE_1);\n-        final SetProperty<Object> v2 = new SimpleSetProperty<Object>(VALUE_2);\n+        final SetProperty<Object> v1 = new SimpleSetProperty<>(VALUE_1);\n+        final SetProperty<Object> v2 = new SimpleSetProperty<>(VALUE_2);\n@@ -606,1 +606,1 @@\n-        final SetProperty<Object> v = new SimpleSetProperty<Object>(VALUE_1);\n+        final SetProperty<Object> v = new SimpleSetProperty<>(VALUE_1);\n@@ -635,1 +635,1 @@\n-        final SetProperty<Object> v = new SimpleSetProperty<Object>(VALUE_1);\n+        final SetProperty<Object> v = new SimpleSetProperty<>(VALUE_1);\n@@ -689,1 +689,1 @@\n-        final ReadOnlySetWrapper<Object> v1 = new ReadOnlySetWrapper<Object>();\n+        final ReadOnlySetWrapper<Object> v1 = new ReadOnlySetWrapper<>();\n@@ -696,2 +696,2 @@\n-        final SetProperty<Object> v1 = new SimpleSetProperty<Object>(VALUE_1);\n-        final ReadOnlySetWrapper<Object> p1 = new ReadOnlySetWrapper<Object>();\n+        final SetProperty<Object> v1 = new SimpleSetProperty<>(VALUE_1);\n+        final ReadOnlySetWrapper<Object> p1 = new ReadOnlySetWrapper<>();\n@@ -708,1 +708,1 @@\n-        final SetProperty<Object> v1 = new SimpleSetProperty<Object>(VALUE_1);\n+        final SetProperty<Object> v1 = new SimpleSetProperty<>(VALUE_1);\n@@ -729,1 +729,1 @@\n-        final ReadOnlySetWrapper<Object> v2 = new ReadOnlySetWrapper<Object>(bean, name);\n+        final ReadOnlySetWrapper<Object> v2 = new ReadOnlySetWrapper<>(bean, name);\n@@ -733,1 +733,1 @@\n-        final ReadOnlySetWrapper<Object> v3 = new ReadOnlySetWrapper<Object>(bean, \"\");\n+        final ReadOnlySetWrapper<Object> v3 = new ReadOnlySetWrapper<>(bean, \"\");\n@@ -737,1 +737,1 @@\n-        final ReadOnlySetWrapper<Object> v4 = new ReadOnlySetWrapper<Object>(null, name);\n+        final ReadOnlySetWrapper<Object> v4 = new ReadOnlySetWrapper<>(null, name);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlySetWrapperTest.java","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        changeListener = new ChangeListenerMock<String>(UNDEFINED);\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyStringPropertyBaseTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyStringPropertyTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,2 +65,2 @@\n-        internalChangeListener = new ChangeListenerMock<String>(UNDEFINED);\n-        publicChangeListener = new ChangeListenerMock<String>(UNDEFINED);\n+        internalChangeListener = new ChangeListenerMock<>(UNDEFINED);\n+        publicChangeListener = new ChangeListenerMock<>(UNDEFINED);\n@@ -94,1 +94,1 @@\n-        assertEquals((String)DEFAULT, p1.getValue());\n+        assertEquals(DEFAULT, p1.getValue());\n@@ -100,1 +100,1 @@\n-        assertEquals((String)DEFAULT, r1.getValue());\n+        assertEquals(DEFAULT, r1.getValue());\n@@ -109,1 +109,1 @@\n-        assertEquals((String)VALUE_1, p1.getValue());\n+        assertEquals(VALUE_1, p1.getValue());\n@@ -115,1 +115,1 @@\n-        assertEquals((String)VALUE_1, r1.getValue());\n+        assertEquals(VALUE_1, r1.getValue());\n@@ -126,1 +126,1 @@\n-        assertEquals((String)DEFAULT, p1.getValue());\n+        assertEquals(DEFAULT, p1.getValue());\n@@ -132,1 +132,1 @@\n-        assertEquals((String)DEFAULT, r1.getValue());\n+        assertEquals(DEFAULT, r1.getValue());\n@@ -143,1 +143,1 @@\n-        assertEquals((String)VALUE_1, p1.getValue());\n+        assertEquals(VALUE_1, p1.getValue());\n@@ -149,1 +149,1 @@\n-        assertEquals((String)VALUE_1, r1.getValue());\n+        assertEquals(VALUE_1, r1.getValue());\n@@ -444,1 +444,1 @@\n-        final ObservableObjectValueStub<String> v = new ObservableObjectValueStub<String>(VALUE_1);\n+        final ObservableObjectValueStub<String> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -484,1 +484,1 @@\n-        final ObservableObjectValueStub<String> v = new ObservableObjectValueStub<String>(VALUE_1);\n+        final ObservableObjectValueStub<String> v = new ObservableObjectValueStub<>(VALUE_1);\n@@ -520,1 +520,1 @@\n-        final ObservableObjectValueStub<String> v = new ObservableObjectValueStub<String>(VALUE_1);\n+        final ObservableObjectValueStub<String> v = new ObservableObjectValueStub<>(VALUE_1);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyStringWrapperTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.HashSet;\n@@ -69,2 +68,2 @@\n-        changeListener = new ChangeListenerMock<ObservableSet<Object>>(UNDEFINED);\n-        setChangeListener = new MockSetObserver<Object>();\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n+        setChangeListener = new MockSetObserver<>();\n@@ -93,1 +92,1 @@\n-        final SetProperty<Object> p1 = new SimpleSetProperty<Object>();\n+        final SetProperty<Object> p1 = new SimpleSetProperty<>();\n@@ -98,1 +97,1 @@\n-        final SetProperty<Object> p2 = new SimpleSetProperty<Object>(VALUE_1b);\n+        final SetProperty<Object> p2 = new SimpleSetProperty<>(VALUE_1b);\n@@ -441,1 +440,1 @@\n-        final SetProperty<Object> v = new SimpleSetProperty<Object>(VALUE_1a);\n+        final SetProperty<Object> v = new SimpleSetProperty<>(VALUE_1a);\n@@ -449,1 +448,1 @@\n-        final ObservableObjectValueStub<ObservableSet<Object>> v = new ObservableObjectValueStub<ObservableSet<Object>>(FXCollections.observableSet(VALUE_1a));\n+        final ObservableObjectValueStub<ObservableSet<Object>> v = new ObservableObjectValueStub<>(FXCollections.observableSet(VALUE_1a));\n@@ -481,1 +480,1 @@\n-        final ObservableObjectValueStub<ObservableSet<Object>> v = new ObservableObjectValueStub<ObservableSet<Object>>(FXCollections.observableSet(VALUE_1a));\n+        final ObservableObjectValueStub<ObservableSet<Object>> v = new ObservableObjectValueStub<>(FXCollections.observableSet(VALUE_1a));\n@@ -513,1 +512,1 @@\n-        final ObservableObjectValueStub<ObservableSet<Object>> v = new ObservableObjectValueStub<ObservableSet<Object>>(FXCollections.observableSet(VALUE_1a));\n+        final ObservableObjectValueStub<ObservableSet<Object>> v = new ObservableObjectValueStub<>(FXCollections.observableSet(VALUE_1a));\n@@ -553,2 +552,2 @@\n-        final SetProperty<Object> v1 = new SimpleSetProperty<Object>(VALUE_1a);\n-        final SetProperty<Object> v2 = new SimpleSetProperty<Object>(VALUE_2a);\n+        final SetProperty<Object> v1 = new SimpleSetProperty<>(VALUE_1a);\n+        final SetProperty<Object> v2 = new SimpleSetProperty<>(VALUE_2a);\n@@ -628,1 +627,1 @@\n-        final SetProperty<Object> v = new SimpleSetProperty<Object>(VALUE_1a);\n+        final SetProperty<Object> v = new SimpleSetProperty<>(VALUE_1a);\n@@ -652,1 +651,1 @@\n-        final SetProperty<Object> v = new SimpleSetProperty<Object>(VALUE_1a);\n+        final SetProperty<Object> v = new SimpleSetProperty<>(VALUE_1a);\n@@ -678,1 +677,1 @@\n-        final SetProperty<Object> v = new SimpleSetProperty<Object>(value2);\n+        final SetProperty<Object> v = new SimpleSetProperty<>(value2);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SetPropertyBaseTest.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -55,2 +55,2 @@\n-        final SetProperty<Object> p1 = new SimpleSetProperty<Object>(VALUE_2);\n-        final SetProperty<Object> p2 = new SimpleSetProperty<Object>(VALUE_1);\n+        final SetProperty<Object> p1 = new SimpleSetProperty<>(VALUE_2);\n+        final SetProperty<Object> p2 = new SimpleSetProperty<>(VALUE_1);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SetPropertyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-        final ListProperty<Object> v = new SimpleListProperty<Object>();\n+        final ListProperty<Object> v = new SimpleListProperty<>();\n@@ -54,1 +54,1 @@\n-        final ListProperty<Object> v1 = new SimpleListProperty<Object>(VALUE_1);\n+        final ListProperty<Object> v1 = new SimpleListProperty<>(VALUE_1);\n@@ -59,1 +59,1 @@\n-        final ListProperty<Object> v2 = new SimpleListProperty<Object>(DEFAULT_VALUE);\n+        final ListProperty<Object> v2 = new SimpleListProperty<>(DEFAULT_VALUE);\n@@ -69,1 +69,1 @@\n-        final ListProperty<Object> v = new SimpleListProperty<Object>(bean, name);\n+        final ListProperty<Object> v = new SimpleListProperty<>(bean, name);\n@@ -74,1 +74,1 @@\n-        final ListProperty<Object> v2 = new SimpleListProperty<Object>(bean, null);\n+        final ListProperty<Object> v2 = new SimpleListProperty<>(bean, null);\n@@ -84,1 +84,1 @@\n-        final ListProperty<Object> v1 = new SimpleListProperty<Object>(bean, name, VALUE_1);\n+        final ListProperty<Object> v1 = new SimpleListProperty<>(bean, name, VALUE_1);\n@@ -89,1 +89,1 @@\n-        final ListProperty<Object> v2 = new SimpleListProperty<Object>(bean, name, DEFAULT_VALUE);\n+        final ListProperty<Object> v2 = new SimpleListProperty<>(bean, name, DEFAULT_VALUE);\n@@ -94,1 +94,1 @@\n-        final ListProperty<Object> v3 = new SimpleListProperty<Object>(bean, null, VALUE_1);\n+        final ListProperty<Object> v3 = new SimpleListProperty<>(bean, null, VALUE_1);\n@@ -99,1 +99,1 @@\n-        final ListProperty<Object> v4 = new SimpleListProperty<Object>(bean, null, DEFAULT_VALUE);\n+        final ListProperty<Object> v4 = new SimpleListProperty<>(bean, null, DEFAULT_VALUE);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SimpleListPropertyTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        final ObjectProperty<Object> v = new SimpleObjectProperty<Object>();\n+        final ObjectProperty<Object> v = new SimpleObjectProperty<>();\n@@ -52,1 +52,1 @@\n-        final ObjectProperty<Object> v1 = new SimpleObjectProperty<Object>(VALUE_1);\n+        final ObjectProperty<Object> v1 = new SimpleObjectProperty<>(VALUE_1);\n@@ -57,1 +57,1 @@\n-        final ObjectProperty<Object> v2 = new SimpleObjectProperty<Object>(DEFAULT_VALUE);\n+        final ObjectProperty<Object> v2 = new SimpleObjectProperty<>(DEFAULT_VALUE);\n@@ -67,1 +67,1 @@\n-        final ObjectProperty<Object> v = new SimpleObjectProperty<Object>(bean, name);\n+        final ObjectProperty<Object> v = new SimpleObjectProperty<>(bean, name);\n@@ -72,1 +72,1 @@\n-        final ObjectProperty<Object> v2 = new SimpleObjectProperty<Object>(bean, null);\n+        final ObjectProperty<Object> v2 = new SimpleObjectProperty<>(bean, null);\n@@ -82,1 +82,1 @@\n-        final ObjectProperty<Object> v1 = new SimpleObjectProperty<Object>(bean, name, VALUE_1);\n+        final ObjectProperty<Object> v1 = new SimpleObjectProperty<>(bean, name, VALUE_1);\n@@ -87,1 +87,1 @@\n-        final ObjectProperty<Object> v2 = new SimpleObjectProperty<Object>(bean, name, DEFAULT_VALUE);\n+        final ObjectProperty<Object> v2 = new SimpleObjectProperty<>(bean, name, DEFAULT_VALUE);\n@@ -92,1 +92,1 @@\n-        final ObjectProperty<Object> v3 = new SimpleObjectProperty<Object>(bean, null, VALUE_1);\n+        final ObjectProperty<Object> v3 = new SimpleObjectProperty<>(bean, null, VALUE_1);\n@@ -97,1 +97,1 @@\n-        final ObjectProperty<Object> v4 = new SimpleObjectProperty<Object>(bean, null, DEFAULT_VALUE);\n+        final ObjectProperty<Object> v4 = new SimpleObjectProperty<>(bean, null, DEFAULT_VALUE);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SimpleObjectPropertyTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-        changeListener = new ChangeListenerMock<String>(UNDEFINED);\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/StringPropertyBaseTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        return new SimpleObjectProperty<Object>(value);\n+        return new SimpleObjectProperty<>(value);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanObjectPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import javafx.beans.Observable;\n@@ -34,1 +33,0 @@\n-import javafx.beans.value.ObservableValue;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanPropertyTestBase.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import javafx.beans.Observable;\n@@ -33,1 +32,0 @@\n-import javafx.beans.value.ObservableValue;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanPropertyTestBase.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import test.javafx.beans.value.ChangeListenerMock;\n@@ -50,1 +49,1 @@\n-        valueModel = new ObservableObjectValueStub<Object>();\n+        valueModel = new ObservableObjectValueStub<>();\n@@ -52,1 +51,1 @@\n-        changeListener = new ChangeListenerMock<Object>(UNDEFINED_VALUE);\n+        changeListener = new ChangeListenerMock<>(UNDEFINED_VALUE);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/ObservableValueBaseTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -471,1 +471,1 @@\n-                };\n+                }\n@@ -478,1 +478,1 @@\n-                };\n+                }\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/ObservableValueFluentBindingsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-        new WeakChangeListener<Object>(null);\n+        new WeakChangeListener<>(null);\n@@ -45,2 +45,2 @@\n-        ChangeListenerMock<Object> listener = new ChangeListenerMock<Object>(new Object());\n-        final WeakChangeListener<Object> weakListener = new WeakChangeListener<Object>(listener);\n+        ChangeListenerMock<Object> listener = new ChangeListenerMock<>(new Object());\n+        final WeakChangeListener<Object> weakListener = new WeakChangeListener<>(listener);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/WeakChangeListenerTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -158,2 +158,2 @@\n-        final ObjectProperty<Object> v = new SimpleObjectProperty<Object>(value1);\n-        final ObjectBinding<Object> binding = new ObjectBinding<Object>() {\n+        final ObjectProperty<Object> v = new SimpleObjectProperty<>(value1);\n+        final ObjectBinding<Object> binding = new ObjectBinding<>() {\n@@ -202,2 +202,2 @@\n-        final ListProperty<Object> v = new SimpleListProperty<Object>(value1);\n-        final ListBinding<Object> binding = new ListBinding<Object>() {\n+        final ListProperty<Object> v = new SimpleListProperty<>(value1);\n+        final ListBinding<Object> binding = new ListBinding<>() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingToStringTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        property = new SimpleListProperty<Object>();\n+        property = new SimpleListProperty<>();\n@@ -280,1 +280,1 @@\n-        final ListProperty<Boolean> localProperty = new SimpleListProperty<Boolean>();\n+        final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n@@ -340,1 +340,1 @@\n-        final ListProperty<Boolean> localProperty = new SimpleListProperty<Boolean>();\n+        final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n@@ -349,1 +349,1 @@\n-        final ListProperty<Boolean> localProperty = new SimpleListProperty<Boolean>();\n+        final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n@@ -432,1 +432,1 @@\n-        final ListProperty<Boolean> localProperty = new SimpleListProperty<Boolean>();\n+        final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n@@ -441,1 +441,1 @@\n-        final ListProperty<Double> localProperty = new SimpleListProperty<Double>();\n+        final ListProperty<Double> localProperty = new SimpleListProperty<>();\n@@ -501,1 +501,1 @@\n-        final ListProperty<Double> localProperty = new SimpleListProperty<Double>();\n+        final ListProperty<Double> localProperty = new SimpleListProperty<>();\n@@ -510,1 +510,1 @@\n-        final ListProperty<Double> localProperty = new SimpleListProperty<Double>();\n+        final ListProperty<Double> localProperty = new SimpleListProperty<>();\n@@ -593,1 +593,1 @@\n-        final ListProperty<Double> localProperty = new SimpleListProperty<Double>();\n+        final ListProperty<Double> localProperty = new SimpleListProperty<>();\n@@ -602,1 +602,1 @@\n-        final ListProperty<Float> localProperty = new SimpleListProperty<Float>();\n+        final ListProperty<Float> localProperty = new SimpleListProperty<>();\n@@ -662,1 +662,1 @@\n-        final ListProperty<Float> localProperty = new SimpleListProperty<Float>();\n+        final ListProperty<Float> localProperty = new SimpleListProperty<>();\n@@ -671,1 +671,1 @@\n-        final ListProperty<Float> localProperty = new SimpleListProperty<Float>();\n+        final ListProperty<Float> localProperty = new SimpleListProperty<>();\n@@ -754,1 +754,1 @@\n-        final ListProperty<Float> localProperty = new SimpleListProperty<Float>();\n+        final ListProperty<Float> localProperty = new SimpleListProperty<>();\n@@ -763,1 +763,1 @@\n-        final ListProperty<Integer> localProperty = new SimpleListProperty<Integer>();\n+        final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n@@ -823,1 +823,1 @@\n-        final ListProperty<Integer> localProperty = new SimpleListProperty<Integer>();\n+        final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n@@ -832,1 +832,1 @@\n-        final ListProperty<Integer> localProperty = new SimpleListProperty<Integer>();\n+        final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n@@ -915,1 +915,1 @@\n-        final ListProperty<Integer> localProperty = new SimpleListProperty<Integer>();\n+        final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n@@ -924,1 +924,1 @@\n-        final ListProperty<Long> localProperty = new SimpleListProperty<Long>();\n+        final ListProperty<Long> localProperty = new SimpleListProperty<>();\n@@ -984,1 +984,1 @@\n-        final ListProperty<Long> localProperty = new SimpleListProperty<Long>();\n+        final ListProperty<Long> localProperty = new SimpleListProperty<>();\n@@ -993,1 +993,1 @@\n-        final ListProperty<Long> localProperty = new SimpleListProperty<Long>();\n+        final ListProperty<Long> localProperty = new SimpleListProperty<>();\n@@ -1076,1 +1076,1 @@\n-        final ListProperty<Long> localProperty = new SimpleListProperty<Long>();\n+        final ListProperty<Long> localProperty = new SimpleListProperty<>();\n@@ -1085,1 +1085,1 @@\n-        final ListProperty<String> localProperty = new SimpleListProperty<String>();\n+        final ListProperty<String> localProperty = new SimpleListProperty<>();\n@@ -1145,1 +1145,1 @@\n-        final ListProperty<String> localProperty = new SimpleListProperty<String>();\n+        final ListProperty<String> localProperty = new SimpleListProperty<>();\n@@ -1154,1 +1154,1 @@\n-        final ListProperty<String> localProperty = new SimpleListProperty<String>();\n+        final ListProperty<String> localProperty = new SimpleListProperty<>();\n@@ -1226,1 +1226,1 @@\n-        final ListProperty<String> localProperty = new SimpleListProperty<String>();\n+        final ListProperty<String> localProperty = new SimpleListProperty<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsArrayTest.java","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -221,2 +221,2 @@\n-        final ObjectProperty<Object> object1 = new SimpleObjectProperty<Object>();\n-        final ObjectProperty<Object> object2 = new SimpleObjectProperty<Object>();\n+        final ObjectProperty<Object> object1 = new SimpleObjectProperty<>();\n+        final ObjectProperty<Object> object2 = new SimpleObjectProperty<>();\n@@ -1345,1 +1345,1 @@\n-    };\n+    }\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsEqualsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        oo = new SimpleObjectProperty<Object>();\n+        oo = new SimpleObjectProperty<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsIsNullTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        property = new SimpleListProperty<Object>();\n+        property = new SimpleListProperty<>();\n@@ -278,1 +278,1 @@\n-        final ListProperty<Boolean> localProperty = new SimpleListProperty<Boolean>();\n+        final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n@@ -338,1 +338,1 @@\n-        final ListProperty<Boolean> localProperty = new SimpleListProperty<Boolean>();\n+        final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n@@ -347,1 +347,1 @@\n-        final ListProperty<Boolean> localProperty = new SimpleListProperty<Boolean>();\n+        final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n@@ -430,1 +430,1 @@\n-        final ListProperty<Boolean> localProperty = new SimpleListProperty<Boolean>();\n+        final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n@@ -439,1 +439,1 @@\n-        final ListProperty<Double> localProperty = new SimpleListProperty<Double>();\n+        final ListProperty<Double> localProperty = new SimpleListProperty<>();\n@@ -499,1 +499,1 @@\n-        final ListProperty<Double> localProperty = new SimpleListProperty<Double>();\n+        final ListProperty<Double> localProperty = new SimpleListProperty<>();\n@@ -508,1 +508,1 @@\n-        final ListProperty<Double> localProperty = new SimpleListProperty<Double>();\n+        final ListProperty<Double> localProperty = new SimpleListProperty<>();\n@@ -591,1 +591,1 @@\n-        final ListProperty<Double> localProperty = new SimpleListProperty<Double>();\n+        final ListProperty<Double> localProperty = new SimpleListProperty<>();\n@@ -600,1 +600,1 @@\n-        final ListProperty<Float> localProperty = new SimpleListProperty<Float>();\n+        final ListProperty<Float> localProperty = new SimpleListProperty<>();\n@@ -660,1 +660,1 @@\n-        final ListProperty<Float> localProperty = new SimpleListProperty<Float>();\n+        final ListProperty<Float> localProperty = new SimpleListProperty<>();\n@@ -669,1 +669,1 @@\n-        final ListProperty<Float> localProperty = new SimpleListProperty<Float>();\n+        final ListProperty<Float> localProperty = new SimpleListProperty<>();\n@@ -752,1 +752,1 @@\n-        final ListProperty<Float> localProperty = new SimpleListProperty<Float>();\n+        final ListProperty<Float> localProperty = new SimpleListProperty<>();\n@@ -761,1 +761,1 @@\n-        final ListProperty<Integer> localProperty = new SimpleListProperty<Integer>();\n+        final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n@@ -821,1 +821,1 @@\n-        final ListProperty<Integer> localProperty = new SimpleListProperty<Integer>();\n+        final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n@@ -830,1 +830,1 @@\n-        final ListProperty<Integer> localProperty = new SimpleListProperty<Integer>();\n+        final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n@@ -913,1 +913,1 @@\n-        final ListProperty<Integer> localProperty = new SimpleListProperty<Integer>();\n+        final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n@@ -922,1 +922,1 @@\n-        final ListProperty<Long> localProperty = new SimpleListProperty<Long>();\n+        final ListProperty<Long> localProperty = new SimpleListProperty<>();\n@@ -982,1 +982,1 @@\n-        final ListProperty<Long> localProperty = new SimpleListProperty<Long>();\n+        final ListProperty<Long> localProperty = new SimpleListProperty<>();\n@@ -991,1 +991,1 @@\n-        final ListProperty<Long> localProperty = new SimpleListProperty<Long>();\n+        final ListProperty<Long> localProperty = new SimpleListProperty<>();\n@@ -1074,1 +1074,1 @@\n-        final ListProperty<Long> localProperty = new SimpleListProperty<Long>();\n+        final ListProperty<Long> localProperty = new SimpleListProperty<>();\n@@ -1083,1 +1083,1 @@\n-        final ListProperty<String> localProperty = new SimpleListProperty<String>();\n+        final ListProperty<String> localProperty = new SimpleListProperty<>();\n@@ -1143,1 +1143,1 @@\n-        final ListProperty<String> localProperty = new SimpleListProperty<String>();\n+        final ListProperty<String> localProperty = new SimpleListProperty<>();\n@@ -1152,1 +1152,1 @@\n-        final ListProperty<String> localProperty = new SimpleListProperty<String>();\n+        final ListProperty<String> localProperty = new SimpleListProperty<>();\n@@ -1224,1 +1224,1 @@\n-        final ListProperty<String> localProperty = new SimpleListProperty<String>();\n+        final ListProperty<String> localProperty = new SimpleListProperty<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsListTest.java","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        property = new SimpleMapProperty<String, Object>();\n+        property = new SimpleMapProperty<>();\n@@ -257,1 +257,1 @@\n-        final MapProperty<String, Boolean> localProperty = new SimpleMapProperty<String, Boolean>();\n+        final MapProperty<String, Boolean> localProperty = new SimpleMapProperty<>();\n@@ -323,1 +323,1 @@\n-        final MapProperty<String, Boolean> localProperty = new SimpleMapProperty<String, Boolean>();\n+        final MapProperty<String, Boolean> localProperty = new SimpleMapProperty<>();\n@@ -398,1 +398,1 @@\n-        final MapProperty<String, Boolean> localProperty = new SimpleMapProperty<String, Boolean>();\n+        final MapProperty<String, Boolean> localProperty = new SimpleMapProperty<>();\n@@ -407,1 +407,1 @@\n-        final MapProperty<String, Double> localProperty = new SimpleMapProperty<String, Double>();\n+        final MapProperty<String, Double> localProperty = new SimpleMapProperty<>();\n@@ -473,1 +473,1 @@\n-        final MapProperty<String, Double> localProperty = new SimpleMapProperty<String, Double>();\n+        final MapProperty<String, Double> localProperty = new SimpleMapProperty<>();\n@@ -548,1 +548,1 @@\n-        final MapProperty<String, Double> localProperty = new SimpleMapProperty<String, Double>();\n+        final MapProperty<String, Double> localProperty = new SimpleMapProperty<>();\n@@ -557,1 +557,1 @@\n-        final MapProperty<String, Float> localProperty = new SimpleMapProperty<String, Float>();\n+        final MapProperty<String, Float> localProperty = new SimpleMapProperty<>();\n@@ -623,1 +623,1 @@\n-        final MapProperty<String, Float> localProperty = new SimpleMapProperty<String, Float>();\n+        final MapProperty<String, Float> localProperty = new SimpleMapProperty<>();\n@@ -698,1 +698,1 @@\n-        final MapProperty<String, Float> localProperty = new SimpleMapProperty<String, Float>();\n+        final MapProperty<String, Float> localProperty = new SimpleMapProperty<>();\n@@ -707,1 +707,1 @@\n-        final MapProperty<String, Integer> localProperty = new SimpleMapProperty<String, Integer>();\n+        final MapProperty<String, Integer> localProperty = new SimpleMapProperty<>();\n@@ -773,1 +773,1 @@\n-        final MapProperty<String, Integer> localProperty = new SimpleMapProperty<String, Integer>();\n+        final MapProperty<String, Integer> localProperty = new SimpleMapProperty<>();\n@@ -848,1 +848,1 @@\n-        final MapProperty<String, Integer> localProperty = new SimpleMapProperty<String, Integer>();\n+        final MapProperty<String, Integer> localProperty = new SimpleMapProperty<>();\n@@ -857,1 +857,1 @@\n-        final MapProperty<String, Long> localProperty = new SimpleMapProperty<String, Long>();\n+        final MapProperty<String, Long> localProperty = new SimpleMapProperty<>();\n@@ -923,1 +923,1 @@\n-        final MapProperty<String, Long> localProperty = new SimpleMapProperty<String, Long>();\n+        final MapProperty<String, Long> localProperty = new SimpleMapProperty<>();\n@@ -998,1 +998,1 @@\n-        final MapProperty<String, Long> localProperty = new SimpleMapProperty<String, Long>();\n+        final MapProperty<String, Long> localProperty = new SimpleMapProperty<>();\n@@ -1007,1 +1007,1 @@\n-        final MapProperty<String, String> localProperty = new SimpleMapProperty<String, String>();\n+        final MapProperty<String, String> localProperty = new SimpleMapProperty<>();\n@@ -1060,1 +1060,1 @@\n-        final MapProperty<String, String> localProperty = new SimpleMapProperty<String, String>();\n+        final MapProperty<String, String> localProperty = new SimpleMapProperty<>();\n@@ -1123,1 +1123,1 @@\n-        final MapProperty<String, String> localProperty = new SimpleMapProperty<String, String>();\n+        final MapProperty<String, String> localProperty = new SimpleMapProperty<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsMapTest.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        property = new SimpleSetProperty<Object>();\n+        property = new SimpleSetProperty<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsSetTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-        changeListener = new ChangeListenerMock<Object>(UNDEFINED);\n+        changeListener = new ChangeListenerMock<>(UNDEFINED);\n@@ -400,0 +400,1 @@\n+        @Override\n@@ -432,0 +433,1 @@\n+        @Override\n@@ -464,0 +466,1 @@\n+        @Override\n@@ -496,0 +499,1 @@\n+        @Override\n@@ -528,0 +532,1 @@\n+        @Override\n@@ -560,0 +565,1 @@\n+        @Override\n@@ -592,0 +598,1 @@\n+        @Override\n@@ -624,0 +631,1 @@\n+        @Override\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/GenericBindingTest.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -282,0 +282,1 @@\n+        @Override\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/ListBindingTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-        final Map<Object, Object> map = new HashMap<Object, Object>();\n+        final Map<Object, Object> map = new HashMap<>();\n@@ -86,1 +86,1 @@\n-        listener = new MockMapObserver<Object, Object>();\n+        listener = new MockMapObserver<>();\n@@ -162,1 +162,1 @@\n-        listener.assertMultipleCalls(new Call[]{new Call<Object, Object>(KEY_2_0, DATA_2_0, null), new Call<Object, Object>(KEY_2_1, DATA_2_1, null), new Call<Object, Object>(KEY_1, null, DATA_1)});\n+        listener.assertMultipleCalls(new Call[]{new Call<>(KEY_2_0, DATA_2_0, null), new Call<>(KEY_2_1, DATA_2_1, null), new Call<>(KEY_1, null, DATA_1)});\n@@ -193,1 +193,1 @@\n-        listener.assertMultipleCalls(new Call[]{new Call<Object, Object>(KEY_2_0, DATA_2_0, null), new Call<Object, Object>(KEY_2_1, DATA_2_1, null), new Call<Object, Object>(KEY_1, null, DATA_1)});\n+        listener.assertMultipleCalls(new Call[]{new Call<>(KEY_2_0, DATA_2_0, null), new Call<>(KEY_2_1, DATA_2_1, null), new Call<>(KEY_1, null, DATA_1)});\n@@ -209,1 +209,1 @@\n-        listener.assertMultipleCalls(new Call[] {new Call<Object, Object>(KEY_1, DATA_1, null), new Call<Object, Object>(KEY_2_0, null, DATA_2_0), new Call<Object, Object>(KEY_2_1, null, DATA_2_1)});\n+        listener.assertMultipleCalls(new Call[] {new Call<>(KEY_1, DATA_1, null), new Call<>(KEY_2_0, null, DATA_2_0), new Call<>(KEY_2_1, null, DATA_2_1)});\n@@ -303,0 +303,1 @@\n+        @Override\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/MapBindingTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        listener = new MockSetObserver<Object>();\n+        listener = new MockSetObserver<>();\n@@ -152,1 +152,1 @@\n-        listener.assertMultipleCalls(new Call[]{new Call<Object>(DATA_2_0, null), new Call<Object>(DATA_2_1, null), new Call<Object>(null, DATA_1)});\n+        listener.assertMultipleCalls(new Call[]{new Call<>(DATA_2_0, null), new Call<>(DATA_2_1, null), new Call<>(null, DATA_1)});\n@@ -183,1 +183,1 @@\n-        listener.assertMultipleCalls(new Call[]{new Call<Object>(DATA_2_0, null), new Call<Object>(DATA_2_1, null), new Call<Object>(null, DATA_1)});\n+        listener.assertMultipleCalls(new Call[]{new Call<>(DATA_2_0, null), new Call<>(DATA_2_1, null), new Call<>(null, DATA_1)});\n@@ -199,1 +199,1 @@\n-        listener.assertMultipleCalls(new Call[] {new Call<Object>(DATA_1, null), new Call<Object>(null, DATA_2_0), new Call<Object>(null, DATA_2_1)});\n+        listener.assertMultipleCalls(new Call[] {new Call<>(DATA_1, null), new Call<>(null, DATA_2_0), new Call<>(null, DATA_2_1)});\n@@ -293,0 +293,1 @@\n+        @Override\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/SetBindingTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    private final ObjectProperty<Object> next = new SimpleObjectProperty<Object>() {\n+    private final ObjectProperty<Object> next = new SimpleObjectProperty<>() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/Variable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-            new SimpleObjectProperty<Object>(), new SimpleObjectProperty<Object>()\n+            new SimpleObjectProperty<>(), new SimpleObjectProperty<>()\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/When_Object_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-@SuppressWarnings(\"WebTest\")\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/AbstractNumberExpressionTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-        final ObservableValueStub<Boolean> valueModel = new ObservableValueStub<Boolean>();\n+        final ObservableValueStub<Boolean> valueModel = new ObservableValueStub<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/BooleanExpressionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-        assertEquals((double)data, op1.doubleValue(), EPSILON);\n+        assertEquals(data, op1.doubleValue(), EPSILON);\n@@ -198,1 +198,1 @@\n-        final ObservableValueStub<Double> valueModel = new ObservableValueStub<Double>();\n+        final ObservableValueStub<Double> valueModel = new ObservableValueStub<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/DoubleExpressionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,2 +71,2 @@\n-        assertEquals((double)data, op1.doubleValue(), EPSILON);\n-        assertEquals((float)data, op1.floatValue(), EPSILON);\n+        assertEquals(data, op1.doubleValue(), EPSILON);\n+        assertEquals(data, op1.floatValue(), EPSILON);\n@@ -200,1 +200,1 @@\n-        final ObservableValueStub<Float> valueModel = new ObservableValueStub<Float>();\n+        final ObservableValueStub<Float> valueModel = new ObservableValueStub<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/FloatExpressionTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -73,4 +73,4 @@\n-        assertEquals((double)data, op1.doubleValue(), EPSILON);\n-        assertEquals((float)data, op1.floatValue(), EPSILON);\n-        assertEquals((long)data, op1.longValue());\n-        assertEquals((int)data, op1.intValue());\n+        assertEquals(data, op1.doubleValue(), EPSILON);\n+        assertEquals(data, op1.floatValue(), EPSILON);\n+        assertEquals(data, op1.longValue());\n+        assertEquals(data, op1.intValue());\n@@ -201,1 +201,1 @@\n-        final ObservableValueStub<Integer> valueModel = new ObservableValueStub<Integer>();\n+        final ObservableValueStub<Integer> valueModel = new ObservableValueStub<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/IntegerExpressionTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -59,4 +59,4 @@\n-        opNull = new SimpleListProperty<Integer>();\n-        opEmpty = new SimpleListProperty<Integer>(FXCollections.<Integer>observableArrayList());\n-        op1 = new SimpleListProperty<Integer>(FXCollections.observableArrayList(data1_0));\n-        op2 = new SimpleListProperty<Integer>(FXCollections.observableArrayList(data2_0, data2_1));\n+        opNull = new SimpleListProperty<>();\n+        opEmpty = new SimpleListProperty<>(FXCollections.<Integer>observableArrayList());\n+        op1 = new SimpleListProperty<>(FXCollections.observableArrayList(data1_0));\n+        op2 = new SimpleListProperty<>(FXCollections.observableArrayList(data2_0, data2_1));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/ListExpressionTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -72,3 +72,3 @@\n-        assertEquals((double)data, op1.doubleValue(), EPSILON);\n-        assertEquals((float)data, op1.floatValue(), EPSILON);\n-        assertEquals((long)data, op1.longValue());\n+        assertEquals(data, op1.doubleValue(), EPSILON);\n+        assertEquals(data, op1.floatValue(), EPSILON);\n+        assertEquals(data, op1.longValue());\n@@ -200,1 +200,1 @@\n-        final ObservableValueStub<Long> valueModel = new ObservableValueStub<Long>();\n+        final ObservableValueStub<Long> valueModel = new ObservableValueStub<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/LongExpressionTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -62,4 +62,4 @@\n-        opNull = new SimpleMapProperty<Number, Integer>();\n-        opEmpty = new SimpleMapProperty<Number, Integer>(FXCollections.observableMap(Collections.<Number, Integer>emptyMap()));\n-        op1 = new SimpleMapProperty<Number, Integer>(FXCollections.observableMap(Collections.singletonMap(key1_0, data1_0)));\n-        final Map<Number, Integer> map = new HashMap<Number, Integer>();\n+        opNull = new SimpleMapProperty<>();\n+        opEmpty = new SimpleMapProperty<>(FXCollections.observableMap(Collections.<Number, Integer>emptyMap()));\n+        op1 = new SimpleMapProperty<>(FXCollections.observableMap(Collections.singletonMap(key1_0, data1_0)));\n+        final Map<Number, Integer> map = new HashMap<>();\n@@ -68,1 +68,1 @@\n-        op2 = new SimpleMapProperty<Number, Integer>(FXCollections.observableMap(map));\n+        op2 = new SimpleMapProperty<>(FXCollections.observableMap(map));\n@@ -119,1 +119,1 @@\n-        final Map<Number, Integer> map = new HashMap<Number, Integer>();\n+        final Map<Number, Integer> map = new HashMap<>();\n@@ -158,1 +158,1 @@\n-        final Map<Number, Integer> map = new HashMap<Number, Integer>();\n+        final Map<Number, Integer> map = new HashMap<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/MapExpressionTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.util.Locale;\n@@ -35,2 +34,0 @@\n-import javafx.beans.property.DoubleProperty;\n-import javafx.beans.property.IntegerProperty;\n@@ -38,2 +35,0 @@\n-import javafx.beans.property.SimpleDoubleProperty;\n-import javafx.beans.property.SimpleIntegerProperty;\n@@ -44,2 +39,0 @@\n-import static org.junit.Assert.assertEquals;\n-\n@@ -60,2 +53,2 @@\n-        op1 = new SimpleObjectProperty<Object>(data1);\n-        op2 = new SimpleObjectProperty<Object>(data2);\n+        op1 = new SimpleObjectProperty<>(data1);\n+        op2 = new SimpleObjectProperty<>(data2);\n@@ -99,1 +92,1 @@\n-        ObjectProperty<Object> op3 = new SimpleObjectProperty<Object>(null);\n+        ObjectProperty<Object> op3 = new SimpleObjectProperty<>(null);\n@@ -109,1 +102,1 @@\n-        ObjectProperty<Object> op3 = new SimpleObjectProperty<Object>(null);\n+        ObjectProperty<Object> op3 = new SimpleObjectProperty<>(null);\n@@ -116,1 +109,1 @@\n-        final ObservableObjectValueStub<Object> valueModel = new ObservableObjectValueStub<Object>();\n+        final ObservableObjectValueStub<Object> valueModel = new ObservableObjectValueStub<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/ObjectExpressionTest.java","additions":5,"deletions":12,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -55,4 +55,4 @@\n-        opNull = new SimpleSetProperty<Integer>();\n-        opEmpty = new SimpleSetProperty<Integer>(FXCollections.<Integer>observableSet());\n-        op1 = new SimpleSetProperty<Integer>(FXCollections.observableSet(data1_0));\n-        op2 = new SimpleSetProperty<Integer>(FXCollections.observableSet(data2_0, data2_1));\n+        opNull = new SimpleSetProperty<>();\n+        opEmpty = new SimpleSetProperty<>(FXCollections.<Integer>observableSet());\n+        op1 = new SimpleSetProperty<>(FXCollections.observableSet(data1_0));\n+        op2 = new SimpleSetProperty<>(FXCollections.observableSet(data2_0, data2_1));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/SetExpressionTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-        final MockListObserver<String> observer = new MockListObserver<String>();\n+        final MockListObserver<String> observer = new MockListObserver<>();\n@@ -129,1 +129,1 @@\n-        final MockListObserver<String> observer = new MockListObserver<String>();\n+        final MockListObserver<String> observer = new MockListObserver<>();\n@@ -140,1 +140,1 @@\n-        final MockListObserver<String> observer = new MockListObserver<String>();\n+        final MockListObserver<String> observer = new MockListObserver<>();\n@@ -152,1 +152,1 @@\n-        final MockListObserver<String> observer1 = new MockListObserver<String>();\n+        final MockListObserver<String> observer1 = new MockListObserver<>();\n@@ -156,1 +156,1 @@\n-        final MockListObserver<String> observer2 = new MockListObserver<String>();\n+        final MockListObserver<String> observer2 = new MockListObserver<>();\n@@ -172,1 +172,1 @@\n-        final MockListObserver<String> observer = new MockListObserver<String>();\n+        final MockListObserver<String> observer = new MockListObserver<>();\n@@ -212,1 +212,1 @@\n-        final MockListObserver<String> observer = new MockListObserver<String>();\n+        final MockListObserver<String> observer = new MockListObserver<>();\n@@ -225,1 +225,1 @@\n-        final MockListObserver<String> observer = new MockListObserver<String>();\n+        final MockListObserver<String> observer = new MockListObserver<>();\n@@ -232,1 +232,1 @@\n-        final MockListObserver<String> observer = new MockListObserver<String>();\n+        final MockListObserver<String> observer = new MockListObserver<>();\n@@ -380,1 +380,1 @@\n-        final MockSetObserver<String> observer = new MockSetObserver<String>();\n+        final MockSetObserver<String> observer = new MockSetObserver<>();\n@@ -420,1 +420,1 @@\n-            Map<String, String> putMap = new HashMap<String, String>();\n+            Map<String, String> putMap = new HashMap<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/FXCollectionsTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        mlo = new MockListObserver<String>();\n+        mlo = new MockListObserver<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/FilteredListTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import test.javafx.collections.MockListObserver;\n-import com.sun.javafx.collections.ObservableListWrapper;\n@@ -50,3 +48,3 @@\n-        observer = new MockListObserver<String>();\n-        list = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\"));\n-        observableList = new ObservableListWrapperShim<String>(list);\n+        observer = new MockListObserver<>();\n+        list = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\"));\n+        observableList = new ObservableListWrapperShim<>(list);\n@@ -54,1 +52,1 @@\n-        builder = new ListChangeBuilderShim<String>(observableList);\n+        builder = new ListChangeBuilderShim<>(observableList);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ListChangeBuilderTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    List<Call<E>> calls = new LinkedList<Call<E>>();\n+    List<Call<E>> calls = new LinkedList<>();\n@@ -66,1 +66,1 @@\n-                Call<E> call = new Call<E>();\n+                Call<E> call = new Call<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/MockListObserver.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    private List<Call> calls = new ArrayList<Call>();\n+    private List<Call> calls = new ArrayList<>();\n@@ -75,1 +75,1 @@\n-            assertTrue(calls + \" doesn't contain \"  + t, this.calls.contains(new Call<K,V>(t.key, t.val, null)));\n+            assertTrue(calls + \" doesn't contain \"  + t, this.calls.contains(new Call<>(t.key, t.val, null)));\n@@ -115,1 +115,1 @@\n-            return new Call<K, V>(k, o, n);\n+            return new Call<>(k, o, n);\n@@ -166,1 +166,1 @@\n-            return new Tuple<K, V>(k, v);\n+            return new Tuple<>(k, v);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/MockMapObserver.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    private List<Call> calls = new ArrayList<Call>();\n+    private List<Call> calls = new ArrayList<>();\n@@ -43,1 +43,1 @@\n-        calls.add(new Call<E>(c.getElementRemoved(), c.getElementAdded()));\n+        calls.add(new Call<>(c.getElementRemoved(), c.getElementAdded()));\n@@ -77,1 +77,1 @@\n-            assertTrue(calls + \" doesn't contain \"  + t, this.calls.contains(new Call<E>(t.val, null)));\n+            assertTrue(calls + \" doesn't contain \"  + t, this.calls.contains(new Call<>(t.val, null)));\n@@ -113,1 +113,1 @@\n-            return new Call<E>(o, n);\n+            return new Call<>(o, n);\n@@ -158,1 +158,1 @@\n-            return new Tuple<E>(v);\n+            return new Tuple<>(v);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/MockSetObserver.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-        mlo = new MockListObserver<String>();\n+        mlo = new MockListObserver<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableListEmptyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        List<String> out = new ArrayList<String>();\n+        List<String> out = new ArrayList<>();\n@@ -162,1 +162,1 @@\n-        List<String> output = new ArrayList<String>();\n+        List<String> output = new ArrayList<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableListIteratorTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-        mlo = new MockListObserver<String>();\n+        mlo = new MockListObserver<>();\n@@ -100,1 +100,1 @@\n-        MockListObserver<String> mlo2 = new MockListObserver<String>();\n+        MockListObserver<String> mlo2 = new MockListObserver<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableListTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-            observedList = new ElementObservableListDecorator<Person>(modifiedList, callback);\n+            observedList = new ElementObservableListDecorator<>(modifiedList, callback);\n@@ -337,1 +337,1 @@\n-        ArrayList<Person> arrayList = new ArrayList<Person>();\n+        ArrayList<Person> arrayList = new ArrayList<>();\n@@ -345,1 +345,1 @@\n-            observedList = new ElementObservableListDecorator<Person>(modifiedList, callback);\n+            observedList = new ElementObservableListDecorator<>(modifiedList, callback);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableListWithExtractor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        observer = new MockMapObserver<String, String>();\n+        observer = new MockMapObserver<>();\n@@ -175,1 +175,1 @@\n-        Map<String, String> map = new HashMap<String, String>();\n+        Map<String, String> map = new HashMap<>();\n@@ -354,1 +354,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -386,1 +385,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -439,1 +437,1 @@\n-        return new Map.Entry<K, V>() {\n+        return new Map.Entry<>() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableMapTest.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.util.List;\n@@ -74,1 +73,1 @@\n-        observer = new MockSetObserver<String>();\n+        observer = new MockSetObserver<>();\n@@ -116,1 +115,1 @@\n-        Set<String> set = new HashSet<String>();\n+        Set<String> set = new HashSet<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableSetTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        mlo = new MockListObserver<String>();\n+        mlo = new MockListObserver<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableSubListTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        mockListObserver = new MockListObserver<String>();\n+        mockListObserver = new MockListObserver<>();\n@@ -396,1 +396,1 @@\n-        List<Integer> list = new ArrayList<Integer>();\n+        List<Integer> list = new ArrayList<>();\n@@ -400,2 +400,2 @@\n-        Permutator<Integer> permutator = new Permutator<Integer>(list);\n-        SortedList<Integer> sorted = new SortedList<Integer>(permutator);\n+        Permutator<Integer> permutator = new Permutator<>(list);\n+        SortedList<Integer> sorted = new SortedList<>(permutator);\n@@ -476,1 +476,1 @@\n-        SortedList<String> sortedList = new SortedList<String>(data);\n+        SortedList<String> sortedList = new SortedList<>(data);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/SortedListTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    Callable<ObservableList<String>> VETOABLE_LIST = () -> new VetoableListDecorator<String>(FXCollections.<String>observableArrayList()) {\n+    Callable<ObservableList<String>> VETOABLE_LIST = () -> new VetoableListDecorator<>(FXCollections.<String>observableArrayList()) {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/TestedObservableLists.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.util.ArrayList;\n@@ -30,1 +29,0 @@\n-import java.util.List;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/TransformationListTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -75,1 +74,1 @@\n-        observer = new MockMapObserver<String, String>();\n+        observer = new MockMapObserver<>();\n@@ -123,1 +122,1 @@\n-        Map<String, String> map = new HashMap<String, String>();\n+        Map<String, String> map = new HashMap<>();\n@@ -204,1 +203,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -235,1 +233,1 @@\n-        return new Map.Entry<K, V>() {\n+        return new Map.Entry<>() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/UnmodifiableObservableMapTest.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -79,2 +79,2 @@\n-        calls = new ArrayList<Call>();\n-        list = new VetoableListDecorator<String>(FXCollections.<String>observableArrayList()) {\n+        calls = new ArrayList<>();\n+        list = new VetoableListDecorator<>(FXCollections.<String>observableArrayList()) {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/VetoableObservableListTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-        new WeakListChangeListener<Object>(null);\n+        new WeakListChangeListener<>(null);\n@@ -48,3 +48,3 @@\n-        MockListObserver<Object> listener = new MockListObserver<Object>();\n-        final WeakListChangeListener<Object> weakListener = new WeakListChangeListener<Object>(listener);\n-        final ObservableListWrapper<Object> list = new ObservableListWrapper<Object>(new ArrayList<Object>());\n+        MockListObserver<Object> listener = new MockListObserver<>();\n+        final WeakListChangeListener<Object> weakListener = new WeakListChangeListener<>(listener);\n+        final ObservableListWrapper<Object> list = new ObservableListWrapper<>(new ArrayList<>());\n@@ -52,1 +52,1 @@\n-        final ListChangeListener.Change<Object> change = new NonIterableChange.SimpleRemovedChange<Object>(0, 1, removedElement, list);\n+        final ListChangeListener.Change<Object> change = new NonIterableChange.SimpleRemovedChange<>(0, 1, removedElement, list);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/WeakListChangeListenerTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        new WeakMapChangeListener<Object, Object>(null);\n+        new WeakMapChangeListener<>(null);\n@@ -47,2 +47,2 @@\n-        MockMapObserver<Object, Object> listener = new MockMapObserver<Object, Object>();\n-        final WeakMapChangeListener<Object, Object> weakListener = new WeakMapChangeListener<Object, Object>(listener);\n+        MockMapObserver<Object, Object> listener = new MockMapObserver<>();\n+        final WeakMapChangeListener<Object, Object> weakListener = new WeakMapChangeListener<>(listener);\n@@ -52,1 +52,1 @@\n-        final MapChangeListener.Change<Object, Object> change = new MapExpressionHelper.SimpleChange<Object, Object>(map).setRemoved(key, value);\n+        final MapChangeListener.Change<Object, Object> change = new MapExpressionHelper.SimpleChange<>(map).setRemoved(key, value);\n@@ -72,1 +72,1 @@\n-            super(new HashMap<Object, Object>());\n+            super(new HashMap<>());\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/WeakMapChangeListenerTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        new WeakSetChangeListener<Object>(null);\n+        new WeakSetChangeListener<>(null);\n@@ -47,2 +47,2 @@\n-        MockSetObserver<Object> listener = new MockSetObserver<Object>();\n-        final WeakSetChangeListener<Object> weakListener = new WeakSetChangeListener<Object>(listener);\n+        MockSetObserver<Object> listener = new MockSetObserver<>();\n+        final WeakSetChangeListener<Object> weakListener = new WeakSetChangeListener<>(listener);\n@@ -51,1 +51,1 @@\n-        final SetChangeListener.Change<Object> change = new SetExpressionHelper.SimpleChange<Object>(set).setRemoved(removedElement);\n+        final SetChangeListener.Change<Object> change = new SetExpressionHelper.SimpleChange<>(set).setRemoved(removedElement);\n@@ -71,1 +71,1 @@\n-            super(new HashSet<Object>());\n+            super(new HashSet<>());\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/WeakSetChangeListenerTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        List<String> l = new ArrayList<String>();\n+        List<String> l = new ArrayList<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/event\/EventSerializationEventExists.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import javafx.event.EventTypeShim.EventTypeSerializationShim;\n@@ -80,1 +79,1 @@\n-        EventType<Event> eventType = new EventType<Event>(Event.ANY, \"MY_TYPE\");\n+        EventType<Event> eventType = new EventType<>(Event.ANY, \"MY_TYPE\");\n@@ -95,1 +94,1 @@\n-        List<String> l = new ArrayList<String>();\n+        List<String> l = new ArrayList<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/event\/EventSerializationTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import org.junit.Rule;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/DurationValueOfTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n@@ -33,6 +31,0 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-\n-import javafx.util.StringConverter;\n@@ -43,3 +35,0 @@\n-import org.junit.Ignore;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/BigDecimalStringConverterTest.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.math.BigInteger;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/BooleanStringConverterTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        assertNotSame((Object)char_C, converter.fromString(\"c\"));\n+        assertNotSame(char_C, converter.fromString(\"c\"));\n@@ -59,1 +59,1 @@\n-        assertNotSame((Object)char_c, converter.fromString(\"C\"));\n+        assertNotSame(char_c, converter.fromString(\"C\"));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/CharacterStringConverterTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Currency;\n@@ -32,1 +31,0 @@\n-import javafx.util.converter.LocalTimeStringConverterShim;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/CurrencyStringConverterTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import javafx.util.converter.LocalTimeStringConverterShim;\n@@ -43,1 +42,0 @@\n-import org.junit.Ignore;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/DateStringConverterTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import javafx.util.converter.LocalTimeStringConverterShim;\n@@ -43,1 +42,0 @@\n-import org.junit.Ignore;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/DateTimeStringConverterTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/DefaultStringConverterTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.time.chrono.Chronology;\n@@ -37,2 +36,0 @@\n-import javafx.util.StringConverter;\n-import javafx.util.converter.LocalTimeStringConverterShim;\n@@ -45,1 +42,0 @@\n-import org.junit.Ignore;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/LocalDateStringConverterTest.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import org.junit.BeforeClass;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/LocalDateTimeStringConverterTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import java.time.chrono.Chronology;\n-import java.time.chrono.IsoChronology;\n@@ -37,1 +35,0 @@\n-import javafx.util.StringConverter;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/LocalTimeStringConverterTest.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import javafx.util.converter.LocalTimeStringConverterShim;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/NumberStringConverterTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import static org.junit.Assert.assertFalse;\n@@ -33,3 +32,0 @@\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-\n@@ -57,1 +53,0 @@\n-import org.junit.Ignore;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/ParameterizedConverterTest.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.text.DecimalFormat;\n@@ -31,1 +30,0 @@\n-import javafx.util.converter.LocalTimeStringConverterShim;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/PercentageStringConverterTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import javafx.util.converter.LocalTimeStringConverterShim;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/TimeStringConverterTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import java.util.function.Function;\n@@ -124,1 +123,1 @@\n-            int percentageUsed = (int) ((steps - counter) \/ steps * 100);\n+            int percentageUsed = (steps - counter) \/ steps * 100;\n@@ -160,3 +159,3 @@\n-        LinkedList<WeakReference> toBeCollected = new LinkedList<WeakReference>();\n-        LinkedList<AssertNotCollectable> toBeNotCollected = new LinkedList<AssertNotCollectable>();\n-        LinkedList<SetAsReferenced> toBeReferenced = new LinkedList<SetAsReferenced>();\n+        LinkedList<WeakReference> toBeCollected = new LinkedList<>();\n+        LinkedList<AssertNotCollectable> toBeNotCollected = new LinkedList<>();\n+        LinkedList<SetAsReferenced> toBeReferenced = new LinkedList<>();\n@@ -165,0 +164,1 @@\n+            @Override\n@@ -167,1 +167,1 @@\n-                toBeCollected.add(new WeakReference<Object>(ref));\n+                toBeCollected.add(new WeakReference<>(ref));\n@@ -169,0 +169,1 @@\n+            @Override\n@@ -173,0 +174,1 @@\n+            @Override\n@@ -191,1 +193,1 @@\n-            };\n+            }\n@@ -195,2 +197,2 @@\n-            LinkedList<AssertCollectable> toBeCollectedMarked = new LinkedList<AssertCollectable>();\n-            LinkedList<AssertNotCollectable> toBeNotCollectedMarked = new LinkedList<AssertNotCollectable>();\n+            LinkedList<AssertCollectable> toBeCollectedMarked = new LinkedList<>();\n+            LinkedList<AssertNotCollectable> toBeNotCollectedMarked = new LinkedList<>();\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/util\/memory\/JMemoryBuddy.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"}]}