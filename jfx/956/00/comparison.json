{"files":[{"patch":"@@ -960,1 +960,1 @@\n-                        updateRemovedParentFocus(oldParent);\n+                        clearParentsFocusWithin(oldParent);\n@@ -8187,2 +8187,5 @@\n-     * Called when the current node was removed from the scene graph in order to clear\n-     * the focus bits of the former parents.\n+     * Called when the current node was removed from the scene graph.\n+     * If the current node has the focusWithin bit, we also need to clear the focusWithin bits of this\n+     * node's parents. Note that a scene graph can have more than a single focused node, for example when\n+     * a PopupWindow is used to present a branch of the scene graph. Since we need to preserve multi-level\n+     * focus, we need to stop clearing the focusWithin bits if we encounter a parent node that is focused.\n@@ -8190,1 +8193,1 @@\n-    private void updateRemovedParentFocus(Node oldParent) {\n+    private void clearParentsFocusWithin(Node oldParent) {\n@@ -8193,3 +8196,1 @@\n-            while (node != null) {\n-                node.focused.set(false);\n-                node.focusVisible.set(false);\n+            while (node != null && !node.focused.get()) {\n@@ -8242,1 +8243,1 @@\n-                } while (node != null);\n+                } while (node != null && !node.focused.get());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -120,2 +120,1 @@\n-    private void assertIsFocused(Scene s, Node n) {\n-        assertEquals(n, s.getFocusOwner());\n+    private void assertIsFocused(Node n) {\n@@ -126,2 +125,6 @@\n-    private void assertNotFocused(Scene s, Node n) {\n-        assertTrue(n != s.getFocusOwner());\n+    private void assertIsFocused(Scene s, Node n) {\n+        assertEquals(n, s.getFocusOwner());\n+        assertIsFocused(n);\n+    }\n+\n+    private void assertNotFocused(Node n) {\n@@ -132,0 +135,5 @@\n+    private void assertNotFocused(Scene s, Node n) {\n+        assertTrue(n != s.getFocusOwner());\n+        assertNotFocused(n);\n+    }\n+\n@@ -1001,0 +1009,45 @@\n+    \/**\n+     * When a scene graph contains multiple nested focused nodes, the focusWithin bits that are\n+     * cleared when a focused node is removed must only be cleared as long as we don't encounter\n+     * another focused node up the tree.\n+     *\/\n+    @Test public void testMultiLevelFocusWithinIsPreserved() {\n+        class N extends Group {\n+            N(Node... children) {\n+                super(children);\n+                setFocusTraversable(true);\n+            }\n+\n+            void setFocused() {\n+                setFocused(true);\n+            }\n+        }\n+\n+        N node1, node2, node3, node4;\n+\n+        scene.setRoot(\n+            node1 = new N(\n+                node2 = new N(\n+                    node3 = new N(\n+                        node4 = new N()\n+                    )\n+                )\n+            ));\n+\n+        node2.setFocused();\n+        node4.setFocused();\n+\n+        \/\/ Remove node4 from the scene graph\n+        node3.getChildren().clear();\n+\n+        assertIsFocusWithin(node1);\n+        assertIsFocusWithin(node2);\n+        assertNotFocusWithin(node3);\n+        assertIsFocusWithin(node4);\n+\n+        assertNotFocused(node1);\n+        assertIsFocused(node2);\n+        assertNotFocused(node3);\n+        assertIsFocused(node4);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/FocusTest.java","additions":57,"deletions":4,"binary":false,"changes":61,"status":"modified"}]}