{"files":[{"patch":"@@ -115,0 +115,1 @@\n+            this.maxRange = maxRange;\n@@ -118,1 +119,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/NGPointLight.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -63,4 +63,0 @@\n-\n-\/*void D3DLight::setRange(float r) {\n-    maxRange = r;\n-}*\/\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-d3d\/D3DLight.cc","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import static org.junit.Assume.assumeTrue;\n@@ -39,0 +40,1 @@\n+import javafx.application.ConditionalFeature;\n@@ -51,1 +53,2 @@\n-    private static final double DELTA = 1d\/255; \/\/ smallest color resolution\n+    \/\/ 1d\/255 is the smallest color resolution, but we use 10d\/255 to avoid precision problems\n+    private static final double DELTA = 10d\/255;\n@@ -66,0 +69,1 @@\n+        assumeTrue(Platform.isSupported(ConditionalFeature.SCENE3D));\n@@ -88,3 +92,3 @@\n-            \/\/ Since there appears to be a bug in snapshot with subscene, are taking a snapshot of the scene and not\n-            \/\/ the box, the center of the box will be at the top left, (0, 0), of the image, and the light is straight\n-            \/\/ in front. Without attentuation, at (0, 0) it will give its full color. At (SAMPLE_DIST, 0) and\n+            \/\/ Since there appears to be a bug in snapshot with subscene, we are taking a snapshot of the scene and not\n+            \/\/ the box, so the center of the box will be at the top left, (0, 0), of the image, and the light is\n+            \/\/ straight in front. Without attenuation, at (0, 0) it will give its full color. At (SAMPLE_DIST, 0) and\n@@ -98,0 +102,2 @@\n+            double diagDist = Math.sqrt(LIGTH_DIST * LIGTH_DIST + SAMPLE_DIST * SAMPLE_DIST);\n+\n@@ -99,2 +105,2 @@\n-            double attnCenter = 1\/(1 + 0.01 * LIGTH_DIST);\n-            double attnDiag = 1\/(1 + 0.01 * Math.sqrt(LIGTH_DIST * LIGTH_DIST + SAMPLE_DIST * SAMPLE_DIST));\n+            double attnCenter = 1 \/ (1 + 0.01 * LIGTH_DIST);\n+            double attnDiag = 1 \/ (1 + 0.01 * diagDist);\n@@ -106,0 +112,18 @@\n+\n+            light.setLinearAttenuation(0);\n+            light.setQuadraticAttenuation(0.01);\n+            attnCenter = 1 \/ (1 + 0.01 * LIGTH_DIST * LIGTH_DIST);\n+            attnDiag = 1 \/ (1 + 0.01 * diagDist * diagDist);\n+            snapshot = box.getScene().snapshot(null);\n+            attenBlueCenter = snapshot.getPixelReader().getColor(0, 0).getBlue();\n+            attenBlueDiag = snapshot.getPixelReader().getColor(SAMPLE_DIST, 0).getBlue();\n+            assertEquals(\"Wrong color value\", nonAttenBlueCenter * attnCenter, attenBlueCenter, DELTA);\n+            assertEquals(\"Wrong color value\", nonAttenBlueDiag * attnDiag, attenBlueDiag, DELTA);\n+\n+            light.setQuadraticAttenuation(0);\n+            light.setMaxRange((LIGTH_DIST + diagDist) \/ 2);\n+            snapshot = box.getScene().snapshot(null);\n+            nonAttenBlueCenter = snapshot.getPixelReader().getColor(0, 0).getBlue();\n+            nonAttenBlueDiag = snapshot.getPixelReader().getColor(SAMPLE_DIST, 0).getBlue();\n+            assertEquals(\"Wrong color value, should be in range\", 1, nonAttenBlueCenter, DELTA);\n+            assertEquals(\"Wrong color value, should be out of range\", 0, nonAttenBlueDiag, DELTA);\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/lighting3D\/PointLightAttenuationTest.java","additions":30,"deletions":6,"binary":false,"changes":36,"status":"modified"}]}