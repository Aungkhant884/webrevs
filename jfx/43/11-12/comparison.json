{"files":[{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.lighting3D;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Group;\n+import javafx.scene.PointLight;\n+import javafx.scene.Scene;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Box;\n+import javafx.stage.Stage;\n+import javafx.stage.WindowEvent;\n+import test.util.Util;\n+\n+public class PointLightAttenuationTest {\n+\n+    private static final double DELTA = 1d\/255; \/\/ smallest color resolution\n+    private static final int LIGTH_DIST = 60;\n+    private static final int SAMPLE_DIST = 60;\n+\n+    private static CountDownLatch startupLatch;\n+    private static Stage stage;\n+    private static PointLight light = new PointLight(Color.BLUE);\n+    private static Box box = new Box(150, 150, 1);\n+\n+    public static void main(String[] args) throws Exception {\n+        initFX();\n+    }\n+\n+    @BeforeClass\n+    public static void initFX() throws Exception {\n+        startupLatch = new CountDownLatch(1);\n+        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n+        assertTrue(\"Timeout waiting for FX runtime to start\", startupLatch.await(15, TimeUnit.SECONDS));\n+    }\n+\n+    public static class TestApp extends Application {\n+\n+        @Override\n+        public void start(Stage mainStage) {\n+            stage = mainStage;\n+            light.setTranslateZ(-LIGTH_DIST);\n+            var root = new Group(light, box);\n+            var scene = new Scene(root);\n+            stage.setScene(scene);\n+            stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> Platform.runLater(startupLatch::countDown));\n+            stage.show();\n+        }\n+    }\n+\n+    @Test\n+    public void testAttenuation() {\n+        Util.runAndWait(() -> {\n+            \/\/ Since there appears to be a bug in snapshot with subscene, are taking a snapshot of the scene and not\n+            \/\/ the box, the center of the box will be at the top left, (0, 0), of the image, and the light is straight\n+            \/\/ in front. Without attentuation, at (0, 0) it will give its full color. At (SAMPLE_DIST, 0) and\n+            \/\/ LIGTH_DIST == SAMPLE_DIST, it will give cos(45) = 1\/sqrt(2) of its color.\n+            var snapshot = box.getScene().snapshot(null);\n+            double nonAttenBlueCenter = snapshot.getPixelReader().getColor(0, 0).getBlue();\n+            double nonAttenBlueDiag = snapshot.getPixelReader().getColor(SAMPLE_DIST, 0).getBlue();\n+            assertEquals(\"Wrong color value\", 1, nonAttenBlueCenter, DELTA);\n+            assertEquals(\"Wrong color value\", 1\/Math.sqrt(2), nonAttenBlueDiag, DELTA);\n+\n+            light.setLinearAttenuation(0.01);\n+            double attnCenter = 1\/(1 + 0.01 * LIGTH_DIST);\n+            double attnDiag = 1\/(1 + 0.01 * Math.sqrt(LIGTH_DIST * LIGTH_DIST + SAMPLE_DIST * SAMPLE_DIST));\n+            snapshot = box.getScene().snapshot(null);\n+            double attenBlueCenter = snapshot.getPixelReader().getColor(0, 0).getBlue();\n+            double attenBlueDiag = snapshot.getPixelReader().getColor(SAMPLE_DIST, 0).getBlue();\n+            assertEquals(\"Wrong color value\", nonAttenBlueCenter * attnCenter, attenBlueCenter, DELTA);\n+            assertEquals(\"Wrong color value\", nonAttenBlueDiag * attnDiag, attenBlueDiag, DELTA);\n+        });\n+    }\n+\n+    @AfterClass\n+    public static void teardown() {\n+        Platform.runLater(() -> {\n+            stage.hide();\n+            Platform.exit();\n+        });\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/lighting3D\/PointLightAttenuationTest.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"}]}