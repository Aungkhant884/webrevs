{"files":[{"patch":"@@ -0,0 +1,160 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyCombination;\n+import javafx.scene.input.KeyCharacterCombination;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.Scene;\n+import javafx.stage.Stage;\n+\n+public class KeyCharacterCombinationTest extends Application {\n+    private final TextArea typingArea = new TextArea(\"\");\n+    private KeyEvent lastPressed = null;\n+\n+    public static void main(String[] args) {\n+        Application.launch(args);\n+    }\n+\n+    @Override\n+    public void start(Stage stage) {\n+        typingArea.setEditable(false);\n+        typingArea.appendText(\"Press keys that generate printable characters.\\n\");\n+        typingArea.appendText(\"Shifted punctuation keys are most likely to fail.\\n\\n\");\n+\n+        typingArea.addEventFilter(KeyEvent.KEY_PRESSED, this::pressedEvent);\n+        typingArea.addEventFilter(KeyEvent.KEY_RELEASED, this::releasedEvent);\n+        typingArea.addEventFilter(KeyEvent.KEY_TYPED, this::typedEvent);\n+\n+        Scene scene = new Scene(typingArea, 640, 640);\n+        stage.setScene(scene);\n+        stage.setTitle(\"Key Character Combinations\");\n+        stage.show();\n+\n+        Platform.runLater(typingArea::requestFocus);\n+    }\n+\n+    \/\/ Helper Methods for Event Handling\n+    private void passed(String str) {\n+        typingArea.appendText(\"Passed: \" + str + \"\\n\");\n+    }\n+\n+    private void failed(String str) {\n+        typingArea.appendText(\"* Failed: \" + str + \"\\n\");\n+    }\n+\n+    private void ignored(String str) {\n+        typingArea.appendText(\"Ignored: \" + str + \"\\n\");\n+    }\n+\n+    private void pressedEvent(KeyEvent e) {\n+        lastPressed = e;\n+    }\n+\n+    private void releasedEvent(KeyEvent e) {\n+        lastPressed = null;\n+    }\n+\n+    private KeyCombination.ModifierValue toModifier(boolean down)\n+    {\n+        if (down)\n+            return KeyCombination.ModifierValue.DOWN;\n+        return KeyCombination.ModifierValue.UP;\n+    }\n+\n+    private void typedEvent(KeyEvent e) {\n+        if (lastPressed == null)\n+            return;\n+\n+        \/\/ KeyCharacterCombinations only deal with one char at a time.\n+        if (e.getCharacter().length() == 0) {\n+            ignored(\"no text\");\n+            return;\n+        }\n+        if (e.getCharacter().length() > 1) {\n+            ignored(\"text too long\");\n+            return;\n+        }\n+\n+        \/\/ Keys that only generate characters with diacritics are not\n+        \/\/ assigned key codes and will not match any combination.\n+        if (lastPressed.getCode() == KeyCode.UNDEFINED) {\n+            ignored(\"undefined key code for \" + e.getCharacter());\n+            return;\n+        }\n+\n+        String keyCodeName = lastPressed.getCode().getName();\n+\n+        \/\/ Keys that generate control codes (like Tab and Delete) don't\n+        \/\/ work on some platforms. There are existing bugs on this which\n+        \/\/ will probably never be fixed since these keys should be\n+        \/\/ handled using KeyCodeCombinations instead.\n+        if (Character.isISOControl(e.getCharacter().charAt(0))) {\n+            ignored(\"control key\");\n+            return;\n+        }\n+\n+        \/\/ Keys on the numeric keypad will not match on Windows or Linux.\n+        \/\/ There are existing bug reports for this.\n+        if (lastPressed.getCode().isKeypadKey() ||\n+            lastPressed.getCode() == KeyCode.DIVIDE ||\n+            lastPressed.getCode() == KeyCode.MULTIPLY ||\n+            lastPressed.getCode() == KeyCode.ADD ||\n+            lastPressed.getCode() == KeyCode.SUBTRACT ||\n+            lastPressed.getCode() == KeyCode.DECIMAL) {\n+            ignored(\"keypad code \");\n+            return;\n+        }\n+\n+        \/\/ Construct a KeyCharacterCombination with the same modifiers and verify that it\n+        \/\/ matches the key press event. This tests the internal routine\n+        \/\/ Toolkit::getKeyCodeForChar.\n+        KeyCombination.ModifierValue shiftModifier = toModifier(lastPressed.isShiftDown());\n+        KeyCombination.ModifierValue controlModifier = toModifier(lastPressed.isControlDown());\n+        KeyCombination.ModifierValue altModifier = toModifier(lastPressed.isAltDown());\n+        KeyCombination.ModifierValue metaModifier = toModifier(lastPressed.isMetaDown());\n+        KeyCombination.ModifierValue shortcutModifier = toModifier(lastPressed.isShortcutDown());\n+\n+        KeyCharacterCombination combination = new KeyCharacterCombination(e.getCharacter(),\n+            shiftModifier, controlModifier, altModifier, metaModifier, shortcutModifier);\n+\n+        String combinationDescription = combination.getDisplayText();\n+        if (lastPressed.getCode().isWhitespaceKey())\n+        {\n+            \/\/ Replace 'invisible' characters with their names.\n+            if (!combinationDescription.isEmpty())\n+                combinationDescription = combinationDescription.substring(0, combinationDescription.length() - 1);\n+            combinationDescription += lastPressed.getCode().getName();\n+        }\n+\n+        if (combination.match(lastPressed))\n+            passed(\"key code \" + keyCodeName + \" matched \" + combinationDescription);\n+        else\n+            failed(\"key code \" + keyCodeName + \" did not match \" + combinationDescription);\n+    }\n+}\n","filename":"tests\/manual\/events\/KeyCharacterCombinationTest.java","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"}]}