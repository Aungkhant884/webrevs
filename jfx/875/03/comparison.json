{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -442,1 +442,0 @@\n-        if (getTreeTableView().getSelectionModel() == null) return;\n@@ -444,2 +443,4 @@\n-        boolean isSelected = getTreeTableView().getSelectionModel().isSelected(index);\n-        if (isSelected() == isSelected) return;\n+        TreeTableViewSelectionModel<T> sm = getTreeTableView().getSelectionModel();\n+        if (sm == null) {\n+            return;\n+        }\n@@ -447,1 +448,4 @@\n-        updateSelected(isSelected);\n+        boolean isSelected = !sm.isCellSelectionEnabled() && sm.isSelected(index);\n+        if (isSelected() != isSelected) {\n+            updateSelected(isSelected);\n+        }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableRow.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,363 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.Test;\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.collections.ObservableList;\n+import javafx.event.EventTarget;\n+import javafx.scene.Node;\n+import javafx.scene.control.SelectionMode;\n+import javafx.scene.control.TableCell;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TablePosition;\n+import javafx.scene.control.TableRow;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableCell;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTablePosition;\n+import javafx.scene.control.TreeTableRow;\n+import javafx.scene.control.TreeTableView;\n+import javafx.scene.input.MouseEvent;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n+\n+\/**\n+ * Tests wor\/cell seleciton logic for JDK-8292353.\n+ *\/\n+public class TreeAndTableViewTest {\n+    \/** TreeTableView with cell selection enabled should not select TreeTableRows *\/\n+    @Test\n+    public void test_TableView_jdk_8292353() {\n+        TableView<String> table = new TableView<>();\n+        table.requestFocus();\n+        table.getColumns().addAll(\n+            createTableColumn(\"C0\"),\n+            createTableColumn(\"C1\"),\n+            createTableColumn(\"C2\")\n+            );\n+        table.getItems().addAll(\n+            \"\",\n+            \"\",\n+            \"\"\n+            );\n+\n+        TableView.TableViewSelectionModel<String> sm = table.getSelectionModel();\n+        sm.setSelectionMode(SelectionMode.MULTIPLE);\n+        sm.setCellSelectionEnabled(true);\n+        sm.clearSelection();\n+\n+        ObservableList<TablePosition> selectedCells = sm.getSelectedCells();\n+\n+        \/\/ important: actually creates cells\n+        TableRow row = (TableRow)VirtualFlowTestUtils.getCell(table, 0);\n+        assertTrue(row == getTableRow(table, 0));\n+\n+        TableCell c0 = getTableCell(table, 0, 0);\n+        TableCell c1 = getTableCell(table, 0, 1);\n+        TableCell c2 = getTableCell(table, 0, 2);\n+\n+        assertEquals(0, selectedCells.size());\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select 0:0\n+        mouseClick(c0, KeyModifier.getShortcutKey());\n+\n+        assertEquals(1, selectedCells.size());\n+        assertTrue(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select 0:1\n+        mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+        assertEquals(2, selectedCells.size());\n+        assertTrue(c0.isSelected());\n+        assertTrue(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select 0:2\n+        mouseClick(c2, KeyModifier.getShortcutKey());\n+\n+        assertEquals(3, selectedCells.size());\n+        assertTrue(c0.isSelected());\n+        assertTrue(c1.isSelected());\n+        assertTrue(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ deselect 0:1\n+        mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+        assertEquals(2, selectedCells.size());\n+        assertTrue(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertTrue(c2.isSelected());\n+        assertFalse(row.isSelected());\n+        \n+        \/\/ and now with the cell selection off\n+        sm.setCellSelectionEnabled(false);\n+        sm.clearSelection();\n+        \n+        \/\/ select 0:0\n+        mouseClick(c0, KeyModifier.getShortcutKey());\n+\n+        assertEquals(1, selectedCells.size()); \/\/ counts selected rows instead of cells\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertTrue(row.isSelected());\n+\n+        \/\/ select 0:1\n+        mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+        assertEquals(0, selectedCells.size());\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select 0:2\n+        mouseClick(c2, KeyModifier.getShortcutKey());\n+\n+        assertEquals(1, selectedCells.size());\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertTrue(row.isSelected());\n+\n+        \/\/ deselect 0:1\n+        mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+        assertEquals(0, selectedCells.size());\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+    }\n+\n+    \/** TreeTableView with cell selection enabled should not select TreeTableRows *\/\n+    @Test\n+    public void test_TreeTableView_jdk_8292353() {\n+        TreeItem<String> root = new TreeItem<String>(\"\");\n+        root.setExpanded(true);\n+        root.getChildren().setAll(\n+            new TreeItem<>(\"\"),\n+            new TreeItem<>(\"\"),\n+            new TreeItem<>(\"\")\n+            );\n+\n+        TreeTableView<String> tree = new TreeTableView<>();\n+        tree.setRoot(root);\n+        tree.setShowRoot(false);\n+        tree.requestFocus();\n+        tree.getColumns().addAll(\n+            createTreeTableColumn(\"C0\"),\n+            createTreeTableColumn(\"C1\"),\n+            createTreeTableColumn(\"C2\")\n+            );\n+\n+        TreeTableView.TreeTableViewSelectionModel<String> sm = tree.getSelectionModel();\n+        sm.setSelectionMode(SelectionMode.MULTIPLE);\n+        sm.setCellSelectionEnabled(true);\n+        sm.clearSelection();\n+\n+        ObservableList<TreeTablePosition<String,?>> selectedCells = sm.getSelectedCells();\n+\n+        \/\/ important: actually creates cells\n+        TreeTableRow row = (TreeTableRow)VirtualFlowTestUtils.getCell(tree, 0);\n+        assertTrue(row == getTreeTableRow(tree, 0));\n+\n+        TreeTableCell c0 = getTreeTableCell(tree, 0, 0);\n+        TreeTableCell c1 = getTreeTableCell(tree, 0, 1);\n+        TreeTableCell c2 = getTreeTableCell(tree, 0, 2);\n+\n+        assertTrue(selectedCells.size() == 0);\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select 0:0\n+        mouseClick(c0, KeyModifier.getShortcutKey());\n+\n+        assertEquals(1, selectedCells.size());\n+        assertTrue(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select 0:1\n+        mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+        assertEquals(2, selectedCells.size());\n+        assertTrue(c0.isSelected());\n+        assertTrue(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select 0:2\n+        mouseClick(c2, KeyModifier.getShortcutKey());\n+\n+        assertEquals(3, selectedCells.size());\n+        assertTrue(c0.isSelected());\n+        assertTrue(c1.isSelected());\n+        assertTrue(c2.isSelected());\n+        assertFalse(row.isSelected()); \/\/ JDK-8292353 failure\n+\n+        \/\/ deselect 0:1\n+        mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+        assertEquals(2, selectedCells.size());\n+        assertTrue(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertTrue(c2.isSelected());\n+        assertFalse(row.isSelected()); \/\/ JDK-8292353 failure\n+\n+        \/\/ and now with the cell selection off\n+        sm.setCellSelectionEnabled(false);\n+        sm.clearSelection();\n+        \n+        \/\/ select 0:0\n+        mouseClick(c0, KeyModifier.getShortcutKey());\n+\n+        assertEquals(1, selectedCells.size()); \/\/ counts selected rows instead of cells\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertTrue(row.isSelected());\n+\n+        \/\/ select 0:1\n+        mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+        assertEquals(0, selectedCells.size());\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select 0:2\n+        mouseClick(c2, KeyModifier.getShortcutKey());\n+\n+        assertEquals(1, selectedCells.size());\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertTrue(row.isSelected());\n+\n+        \/\/ deselect 0:1\n+        mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+        assertEquals(0, selectedCells.size());\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+    }\n+\n+    protected static TreeTableCell getTreeTableCell(TreeTableView t, int row, int column) {\n+        TreeTableColumn col = (TreeTableColumn)t.getColumns().get(column);\n+\n+        for (Node n: t.lookupAll(\".tree-table-cell\")) {\n+            if (n instanceof TreeTableCell c) {\n+                if (row == c.getTableRow().getIndex()) {\n+                    if (col == c.getTableColumn()) {\n+                        return c;\n+                    }\n+                }\n+            }\n+        }\n+        throw new Error(\"TreeTableCell not found at \" + row + \":\" + column);\n+    }\n+\n+    protected static TreeTableRow getTreeTableRow(TreeTableView t, int row) {\n+        for (Node n: t.lookupAll(\".tree-table-row-cell\")) {\n+            if (n instanceof TreeTableRow c) {\n+                if (row == c.getIndex()) {\n+                    return c;\n+                }\n+            }\n+        }\n+        throw new Error(\"TreeTableRow not found at \" + row);\n+    }\n+\n+    protected static TreeTableColumn createTreeTableColumn(String name) {\n+        TreeTableColumn c = new TreeTableColumn(name);\n+        c.setCellValueFactory((f) -> new SimpleStringProperty(\"...\"));\n+        return c;\n+    }\n+\n+    protected static void mouseClick(EventTarget t, KeyModifier... modifiers) {\n+        MouseEventFirer m = new MouseEventFirer(t);\n+        m.fireMousePressAndRelease(modifiers);\n+        m.fireMouseEvent(MouseEvent.MOUSE_RELEASED, modifiers);\n+        m.dispose();\n+\n+        Toolkit.getToolkit().firePulse();\n+    }\n+\n+    protected static TableCell getTableCell(TableView t, int row, int column) {\n+        TableColumn col = (TableColumn)t.getColumns().get(column);\n+\n+        for (Node n: t.lookupAll(\".table-cell\")) {\n+            if (n instanceof TableCell c) {\n+                if (row == c.getTableRow().getIndex()) {\n+                    if (col == c.getTableColumn()) {\n+                        return c;\n+                    }\n+                }\n+            }\n+        }\n+        throw new Error(\"TableCell not found at \" + row + \":\" + column);\n+    }\n+\n+    protected static TableRow getTableRow(TableView t, int row) {\n+        for (Node n: t.lookupAll(\".table-row-cell\")) {\n+            if (n instanceof TableRow c) {\n+                if (row == c.getIndex()) {\n+                    return c;\n+                }\n+            }\n+        }\n+        throw new Error(\"TableRow not found at \" + row);\n+    }\n+\n+    protected static TableColumn createTableColumn(String name) {\n+        TableColumn c = new TableColumn(name);\n+        c.setCellValueFactory((f) -> new SimpleStringProperty(\"...\"));\n+        return c;\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeAndTableViewTest.java","additions":363,"deletions":0,"binary":false,"changes":363,"status":"added"}]}