{"files":[{"patch":"@@ -56,0 +56,2 @@\n+    private ControlUtils() { }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ControlUtils.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,5 +27,2 @@\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n-import org.junit.After;\n-import org.junit.Test;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n@@ -38,0 +35,4 @@\n+\n+import org.junit.After;\n+import org.junit.Test;\n+\n@@ -54,1 +55,1 @@\n-    \/** TableView with cell selection enabled should not select TreeTableRows *\/\n+    \/** TableView with cell selection enabled should not select TableRows, see JDK-8292353 *\/\n@@ -56,1 +57,1 @@\n-    public void test_TableView_jdk_8292353_select_all() {\n+    public void test_TableView_select_all() {\n@@ -89,1 +90,37 @@\n-    \/** TableView with cell selection enabled should not select TreeTableRows *\/\n+    \/**\n+     * TableView with cell selection enabled should not select TableRows,\n+     * even when selected as a group, see JDK-8292353\n+     *\/\n+    @Test\n+    public void test_TableView_select_all_as_group() {\n+        TableView<String> table = ControlUtils.createTableView();\n+\n+        stageLoader = new StageLoader(table);\n+        TableView.TableViewSelectionModel<String> sm = table.getSelectionModel();\n+        sm.setSelectionMode(SelectionMode.MULTIPLE);\n+        sm.setCellSelectionEnabled(true);\n+        sm.clearSelection();\n+\n+        TableColumn<String,?> col0 = table.getColumns().get(0);\n+        TableColumn<String,?> col1 = table.getColumns().get(1);\n+        TableColumn<String,?> col2 = table.getColumns().get(2);\n+        TableRow row = ControlUtils.getTableRow(table, 0);\n+        TableCell c0 = ControlUtils.getTableCell(table, 0, 0);\n+        TableCell c1 = ControlUtils.getTableCell(table, 0, 1);\n+        TableCell c2 = ControlUtils.getTableCell(table, 0, 2);\n+\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select all cells in the first row as a group\n+        sm.select(0, null);\n+\n+        assertTrue(c0.isSelected());\n+        assertTrue(c1.isSelected());\n+        assertTrue(c2.isSelected());\n+        assertFalse(row.isSelected());\n+    }\n+\n+    \/** TableView with cell selection enabled should not select TableRows, see JDK-8292353 *\/\n@@ -91,1 +128,1 @@\n-    public void test_TableView_jdk_8292353_select_all_but_one() {\n+    public void test_TableView_select_all_but_one() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewRowTest.java","additions":46,"deletions":9,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -1,263 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package test.javafx.scene.control;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n-import org.junit.After;\n-import org.junit.Test;\n-import javafx.collections.ObservableList;\n-import javafx.scene.control.SelectionMode;\n-import javafx.scene.control.TableCell;\n-import javafx.scene.control.TablePosition;\n-import javafx.scene.control.TableRow;\n-import javafx.scene.control.TableView;\n-import javafx.scene.control.TreeTableCell;\n-import javafx.scene.control.TreeTablePosition;\n-import javafx.scene.control.TreeTableRow;\n-import javafx.scene.control.TreeTableView;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n-import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n-\n-\/**\n- * Simulated interaction tests for:\n- * - cell selection logic JDK-8292353\n- *\/\n-public class TreeAndTableViewTest {\n-\n-    StageLoader stageLoader;\n-\n-    @After\n-    public void after() {\n-        if (stageLoader != null) {\n-            stageLoader.dispose();\n-        }\n-    }\n-\n-    \/** TableView with cell selection enabled should not select TableRows *\/\n-    @Test\n-    public void test_TableView_jdk_8292353() {\n-        TableView<String> table = ControlUtils.createTableView();\n-\n-        TableView.TableViewSelectionModel<String> sm = table.getSelectionModel();\n-        sm.setSelectionMode(SelectionMode.MULTIPLE);\n-        sm.setCellSelectionEnabled(true);\n-        sm.clearSelection();\n-\n-        ObservableList<TablePosition> selectedCells = sm.getSelectedCells();\n-\n-        stageLoader = new StageLoader(table);\n-        TableRow row = ControlUtils.getTableRow(table, 0);\n-        TableCell c0 = ControlUtils.getTableCell(table, 0, 0);\n-        TableCell c1 = ControlUtils.getTableCell(table, 0, 1);\n-        TableCell c2 = ControlUtils.getTableCell(table, 0, 2);\n-\n-        assertEquals(0, selectedCells.size());\n-        assertFalse(c0.isSelected());\n-        assertFalse(c1.isSelected());\n-        assertFalse(c2.isSelected());\n-        assertFalse(row.isSelected());\n-\n-        \/\/ select 0:0\n-        ControlUtils.mouseClick(c0, KeyModifier.getShortcutKey());\n-\n-        assertEquals(1, selectedCells.size());\n-        assertTrue(c0.isSelected());\n-        assertFalse(c1.isSelected());\n-        assertFalse(c2.isSelected());\n-        assertFalse(row.isSelected());\n-\n-        \/\/ select 0:1\n-        ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n-\n-        assertEquals(2, selectedCells.size());\n-        assertTrue(c0.isSelected());\n-        assertTrue(c1.isSelected());\n-        assertFalse(c2.isSelected());\n-        assertFalse(row.isSelected());\n-\n-        \/\/ select 0:2\n-        ControlUtils.mouseClick(c2, KeyModifier.getShortcutKey());\n-\n-        assertEquals(3, selectedCells.size());\n-        assertTrue(c0.isSelected());\n-        assertTrue(c1.isSelected());\n-        assertTrue(c2.isSelected());\n-        assertFalse(row.isSelected());\n-\n-        \/\/ deselect 0:1\n-        ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n-\n-        assertEquals(2, selectedCells.size());\n-        assertTrue(c0.isSelected());\n-        assertFalse(c1.isSelected());\n-        assertTrue(c2.isSelected());\n-        assertFalse(row.isSelected());\n-\n-        \/\/ and now with the cell selection off\n-        sm.setCellSelectionEnabled(false);\n-        sm.clearSelection();\n-\n-        \/\/ select 0:0\n-        ControlUtils.mouseClick(c0, KeyModifier.getShortcutKey());\n-\n-        assertEquals(1, selectedCells.size()); \/\/ counts selected rows instead of cells\n-        assertFalse(c0.isSelected());\n-        assertFalse(c1.isSelected());\n-        assertFalse(c2.isSelected());\n-        assertTrue(row.isSelected());\n-\n-        \/\/ select 0:1\n-        ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n-\n-        assertEquals(0, selectedCells.size());\n-        assertFalse(c0.isSelected());\n-        assertFalse(c1.isSelected());\n-        assertFalse(c2.isSelected());\n-        assertFalse(row.isSelected());\n-\n-        \/\/ select 0:2\n-        ControlUtils.mouseClick(c2, KeyModifier.getShortcutKey());\n-\n-        assertEquals(1, selectedCells.size());\n-        assertFalse(c0.isSelected());\n-        assertFalse(c1.isSelected());\n-        assertFalse(c2.isSelected());\n-        assertTrue(row.isSelected());\n-\n-        \/\/ deselect 0:1\n-        ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n-\n-        assertEquals(0, selectedCells.size());\n-        assertFalse(c0.isSelected());\n-        assertFalse(c1.isSelected());\n-        assertFalse(c2.isSelected());\n-        assertFalse(row.isSelected());\n-    }\n-\n-    \/** TreeTableView with cell selection enabled should not select TreeTableRows *\/\n-    @Test\n-    public void test_TreeTableView_jdk_8292353() {\n-        TreeTableView<String> tree = ControlUtils.createTreeTableView();\n-\n-        stageLoader = new StageLoader(tree);\n-        TreeTableView.TreeTableViewSelectionModel<String> sm = tree.getSelectionModel();\n-        sm.setSelectionMode(SelectionMode.MULTIPLE);\n-        sm.setCellSelectionEnabled(true);\n-        sm.clearSelection();\n-\n-        ObservableList<TreeTablePosition<String, ?>> selectedCells = sm.getSelectedCells();\n-\n-        TreeTableRow row = ControlUtils.getTreeTableRow(tree, 0);\n-\n-        TreeTableCell c0 = ControlUtils.getTreeTableCell(tree, 0, 0);\n-        TreeTableCell c1 = ControlUtils.getTreeTableCell(tree, 0, 1);\n-        TreeTableCell c2 = ControlUtils.getTreeTableCell(tree, 0, 2);\n-\n-        assertTrue(selectedCells.size() == 0);\n-        assertFalse(c0.isSelected());\n-        assertFalse(c1.isSelected());\n-        assertFalse(c2.isSelected());\n-        assertFalse(row.isSelected());\n-\n-        \/\/ select 0:0\n-        ControlUtils.mouseClick(c0, KeyModifier.getShortcutKey());\n-\n-        assertEquals(1, selectedCells.size());\n-        assertTrue(c0.isSelected());\n-        assertFalse(c1.isSelected());\n-        assertFalse(c2.isSelected());\n-        assertFalse(row.isSelected());\n-\n-        \/\/ select 0:1\n-        ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n-\n-        assertEquals(2, selectedCells.size());\n-        assertTrue(c0.isSelected());\n-        assertTrue(c1.isSelected());\n-        assertFalse(c2.isSelected());\n-        assertFalse(row.isSelected());\n-\n-        \/\/ select 0:2\n-        ControlUtils.mouseClick(c2, KeyModifier.getShortcutKey());\n-\n-        assertEquals(3, selectedCells.size());\n-        assertTrue(c0.isSelected());\n-        assertTrue(c1.isSelected());\n-        assertTrue(c2.isSelected());\n-        assertFalse(row.isSelected()); \/\/ JDK-8292353 failure\n-\n-        \/\/ deselect 0:1\n-        ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n-\n-        assertEquals(2, selectedCells.size());\n-        assertTrue(c0.isSelected());\n-        assertFalse(c1.isSelected());\n-        assertTrue(c2.isSelected());\n-        assertFalse(row.isSelected()); \/\/ JDK-8292353 failure\n-\n-        \/\/ and now with the cell selection off\n-        sm.setCellSelectionEnabled(false);\n-        sm.clearSelection();\n-\n-        \/\/ select 0:0\n-        ControlUtils.mouseClick(c0, KeyModifier.getShortcutKey());\n-\n-        assertEquals(1, selectedCells.size()); \/\/ counts selected rows instead of cells\n-        assertFalse(c0.isSelected());\n-        assertFalse(c1.isSelected());\n-        assertFalse(c2.isSelected());\n-        assertTrue(row.isSelected());\n-\n-        \/\/ select 0:1\n-        ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n-\n-        assertEquals(0, selectedCells.size());\n-        assertFalse(c0.isSelected());\n-        assertFalse(c1.isSelected());\n-        assertFalse(c2.isSelected());\n-        assertFalse(row.isSelected());\n-\n-        \/\/ select 0:2\n-        ControlUtils.mouseClick(c2, KeyModifier.getShortcutKey());\n-\n-        assertEquals(1, selectedCells.size());\n-        assertFalse(c0.isSelected());\n-        assertFalse(c1.isSelected());\n-        assertFalse(c2.isSelected());\n-        assertTrue(row.isSelected());\n-\n-        \/\/ deselect 0:1\n-        ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n-\n-        assertEquals(0, selectedCells.size());\n-        assertFalse(c0.isSelected());\n-        assertFalse(c1.isSelected());\n-        assertFalse(c2.isSelected());\n-        assertFalse(row.isSelected());\n-    }\n-}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeAndTableViewTest.java","additions":0,"deletions":263,"binary":false,"changes":263,"status":"deleted"},{"patch":"@@ -29,0 +29,1 @@\n+import static org.junit.Assert.assertFalse;\n@@ -31,2 +32,1 @@\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.Assert.assertTrue;\n@@ -35,4 +35,0 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n@@ -46,0 +42,6 @@\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n@@ -838,1 +840,1 @@\n-    \/** TreeTableView with cell selection enabled should not select TreeTableRows *\/\n+    \/** TreeTableView with cell selection enabled should not select TreeTableRows, see JDK-8292353 *\/\n@@ -840,1 +842,1 @@\n-    public void test_TreeTableView_jdk_8292353_select_all() {\n+    public void test_TreeTableView_select_all() {\n@@ -873,1 +875,37 @@\n-    \/** TreeTableView with cell selection enabled should not select TreeTableRows *\/\n+    \/**\n+     * TreeTableView with cell selection enabled should not select TreeTableRows,\n+     * even when selected as a group, see JDK-8292353\n+     *\/\n+    @Test\n+    public void test_TreeTableView_select_all_as_group() {\n+        TreeTableView<String> tree = ControlUtils.createTreeTableView();\n+\n+        stageLoader = new StageLoader(tree);\n+        TreeTableView.TreeTableViewSelectionModel<String> sm = tree.getSelectionModel();\n+        sm.setSelectionMode(SelectionMode.MULTIPLE);\n+        sm.setCellSelectionEnabled(true);\n+        sm.clearSelection();\n+\n+        TreeTableColumn<String,?> col0 = tree.getColumns().get(0);\n+        TreeTableColumn<String,?> col1 = tree.getColumns().get(1);\n+        TreeTableColumn<String,?> col2 = tree.getColumns().get(2);\n+        TreeTableRow row = ControlUtils.getTreeTableRow(tree, 0);\n+        TreeTableCell c0 = ControlUtils.getTreeTableCell(tree, 0, 0);\n+        TreeTableCell c1 = ControlUtils.getTreeTableCell(tree, 0, 1);\n+        TreeTableCell c2 = ControlUtils.getTreeTableCell(tree, 0, 2);\n+\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select all cells in the first row as a group\n+        sm.select(0, null);\n+\n+        assertTrue(c0.isSelected());\n+        assertTrue(c1.isSelected());\n+        assertTrue(c2.isSelected());\n+        assertFalse(row.isSelected()); \/\/ JDK-8292353 failure\n+    }\n+\n+    \/** TreeTableView with cell selection enabled should not select TreeTableRows, see JDK-8292353 *\/\n@@ -875,1 +913,1 @@\n-    public void test_TreeTableView_jdk_8292353_select_all_but_one() {\n+    public void test_TreeTableView_select_all_but_one() {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableRowTest.java","additions":48,"deletions":10,"binary":false,"changes":58,"status":"modified"}]}