{"files":[{"patch":"@@ -27,0 +27,8 @@\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n@@ -28,0 +36,1 @@\n+\n@@ -48,2 +57,2 @@\n-     * Creates a TableView with three columns and three rows.\n-     * Each cell contains a \"...\" string.\n+     * Creates a TableView with three columns and three rows. Each cell contains a\n+     * \"...\" string.\n@@ -57,1 +66,2 @@\n-            createTableColumn(\"C2\"));\n+            createTableColumn(\"C2\")\n+        );\n@@ -62,1 +72,1 @@\n-            );\n+        );\n@@ -77,1 +87,1 @@\n-            );\n+        );\n@@ -87,1 +97,1 @@\n-            );\n+        );\n@@ -93,1 +103,1 @@\n-     * or throws an Error if not found.\n+     * or throws an Error if not found, or more than one instance is found.\n@@ -97,2 +107,1 @@\n-\n-        for (Node n: t.lookupAll(\".tree-table-cell\")) {\n+        return findTheOnly(t, \".tree-table-cell\", TreeTableCell.class, (n) -> {\n@@ -102,1 +111,1 @@\n-                        return c;\n+                        return true;\n@@ -106,2 +115,2 @@\n-        }\n-        throw new Error(\"TreeTableCell not found at \" + row + \":\" + column);\n+            return false;\n+        });\n@@ -111,2 +120,2 @@\n-     * Performs a node lookup, returning a TreeTableRow at the given row,\n-     * or throws an Error if not found.\n+     * Performs a node lookup, returning a TreeTableRow at the given row, or throws\n+     * an Error if not found, or more than one instance is found.\n@@ -115,1 +124,1 @@\n-        for (Node n: t.lookupAll(\".tree-table-row-cell\")) {\n+        return findTheOnly(t, \".tree-table-row-cell\", TreeTableRow.class, (n) -> {\n@@ -118,1 +127,1 @@\n-                    return c;\n+                    return true;\n@@ -121,2 +130,2 @@\n-        }\n-        throw new Error(\"TreeTableRow not found at \" + row);\n+            return false;\n+        });\n@@ -126,2 +135,2 @@\n-     * Performs a node lookup, returning a TableCell at the given (row, column)\n-     * or throws an Error if not found.\n+     * Performs a node lookup, returning a TableCell at the given (row, column) or\n+     * throws an Error if not found, or more than one instance is found.\n@@ -131,3 +140,2 @@\n-\n-        for (Node n: t.lookupAll(\".table-cell\")) {\n-            if (n instanceof TableCell c) {\n+        return findTheOnly(t, \".table-cell\", TableCell.class, (x) -> {\n+            if (x instanceof TableCell c) {\n@@ -136,1 +144,1 @@\n-                        return c;\n+                        return true;\n@@ -140,2 +148,2 @@\n-        }\n-        throw new Error(\"TableCell not found at \" + row + \":\" + column);\n+            return false;\n+        });\n@@ -145,2 +153,2 @@\n-     * Performs a node lookup, returning a TableRow at the given row,\n-     * or throws an Error if not found.\n+     * Performs a node lookup, returning a TableRow at the given row, or throws an\n+     * Error if not found, or more than one instance is found.\n@@ -149,2 +157,2 @@\n-        for (Node n: t.lookupAll(\".table-row-cell\")) {\n-            if (n instanceof TableRow c) {\n+        return findTheOnly(t, \".table-row-cell\", TableRow.class, (x) -> {\n+            if (x instanceof TableRow c) {\n@@ -152,1 +160,1 @@\n-                    return c;\n+                    return true;\n@@ -155,2 +163,2 @@\n-        }\n-        throw new Error(\"TableRow not found at \" + row);\n+            return false;\n+        });\n@@ -160,2 +168,2 @@\n-     * Creates a TreeTableColumn with the given name,\n-     * setting up the cell value factory to place a \"...\" string at each cell.\n+     * Creates a TreeTableColumn with the given name, setting up the cell value\n+     * factory to place a \"...\" string at each cell.\n@@ -170,2 +178,2 @@\n-     * Creates a TableColumn with the given name,\n-     * setting up the cell value factory to place a \"...\" string at each cell.\n+     * Creates a TableColumn with the given name, setting up the cell value factory\n+     * to place a \"...\" string at each cell.\n@@ -190,0 +198,14 @@\n+\n+    \/**\n+     * Finds a Node given the selector and predicate filter, then insures there is\n+     * one one such node\n+     *\/\n+    protected static <T> T findTheOnly(Node container, String selector, Class<T> type, Predicate<Node> filter) {\n+        Set<Node> nodes = container.lookupAll(selector).\n+            stream().\n+            filter(filter).\n+            collect(Collectors.toSet());\n+\n+        assertEquals(1, nodes.size());\n+        return (T)nodes.toArray()[0];\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ControlUtils.java","additions":59,"deletions":37,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+\n+import org.junit.After;\n@@ -30,0 +32,1 @@\n+\n@@ -42,0 +45,9 @@\n+    StageLoader stageLoader;\n+\n+    @After\n+    public void after() {\n+        if (stageLoader != null) {\n+            stageLoader.dispose();\n+        }\n+    }\n+\n@@ -47,32 +59,28 @@\n-        StageLoader stageLoader = new StageLoader(table);\n-        try {\n-            TableView.TableViewSelectionModel<String> sm = table.getSelectionModel();\n-            sm.setSelectionMode(SelectionMode.MULTIPLE);\n-            sm.setCellSelectionEnabled(true);\n-            sm.clearSelection();\n-\n-            TableColumn<String,?> col0 = table.getColumns().get(0);\n-            TableColumn<String,?> col1 = table.getColumns().get(1);\n-            TableColumn<String,?> col2 = table.getColumns().get(2);\n-            TableRow row = ControlUtils.getTableRow(table, 0);\n-            TableCell c0 = ControlUtils.getTableCell(table, 0, 0);\n-            TableCell c1 = ControlUtils.getTableCell(table, 0, 1);\n-            TableCell c2 = ControlUtils.getTableCell(table, 0, 2);\n-\n-            assertFalse(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertFalse(c2.isSelected());\n-            assertFalse(row.isSelected());\n-\n-            \/\/ select all cells in the first row\n-            sm.select(0, col0);\n-            sm.select(0, col1);\n-            sm.select(0, col2);\n-\n-            assertTrue(c0.isSelected());\n-            assertTrue(c1.isSelected());\n-            assertTrue(c2.isSelected());\n-            assertFalse(row.isSelected());\n-        } finally {\n-            stageLoader.dispose();\n-        }\n+        stageLoader = new StageLoader(table);\n+        TableView.TableViewSelectionModel<String> sm = table.getSelectionModel();\n+        sm.setSelectionMode(SelectionMode.MULTIPLE);\n+        sm.setCellSelectionEnabled(true);\n+        sm.clearSelection();\n+\n+        TableColumn<String,?> col0 = table.getColumns().get(0);\n+        TableColumn<String,?> col1 = table.getColumns().get(1);\n+        TableColumn<String,?> col2 = table.getColumns().get(2);\n+        TableRow row = ControlUtils.getTableRow(table, 0);\n+        TableCell c0 = ControlUtils.getTableCell(table, 0, 0);\n+        TableCell c1 = ControlUtils.getTableCell(table, 0, 1);\n+        TableCell c2 = ControlUtils.getTableCell(table, 0, 2);\n+\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select all cells in the first row\n+        sm.select(0, col0);\n+        sm.select(0, col1);\n+        sm.select(0, col2);\n+\n+        assertTrue(c0.isSelected());\n+        assertTrue(c1.isSelected());\n+        assertTrue(c2.isSelected());\n+        assertFalse(row.isSelected());\n@@ -86,29 +94,25 @@\n-        StageLoader stageLoader = new StageLoader(table);\n-        try {\n-            TableView.TableViewSelectionModel<String> sm = table.getSelectionModel();\n-            sm.setSelectionMode(SelectionMode.MULTIPLE);\n-            sm.setCellSelectionEnabled(true);\n-            sm.clearSelection();\n-\n-            TableColumn<String,?> col1 = table.getColumns().get(1);\n-            TableRow row = ControlUtils.getTableRow(table, 0);\n-            TableCell c0 = ControlUtils.getTableCell(table, 0, 0);\n-            TableCell c1 = ControlUtils.getTableCell(table, 0, 1);\n-            TableCell c2 = ControlUtils.getTableCell(table, 0, 2);\n-\n-            assertFalse(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertFalse(c2.isSelected());\n-            assertFalse(row.isSelected());\n-\n-            \/\/ select 0:0 and 0:2\n-            sm.select(0, null);\n-            sm.clearSelection(0, col1);\n-\n-            assertTrue(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertTrue(c2.isSelected());\n-            assertFalse(row.isSelected());\n-        } finally {\n-            stageLoader.dispose();\n-        }\n+        stageLoader = new StageLoader(table);\n+        TableView.TableViewSelectionModel<String> sm = table.getSelectionModel();\n+        sm.setSelectionMode(SelectionMode.MULTIPLE);\n+        sm.setCellSelectionEnabled(true);\n+        sm.clearSelection();\n+\n+        TableColumn<String,?> col1 = table.getColumns().get(1);\n+        TableRow row = ControlUtils.getTableRow(table, 0);\n+        TableCell c0 = ControlUtils.getTableCell(table, 0, 0);\n+        TableCell c1 = ControlUtils.getTableCell(table, 0, 1);\n+        TableCell c2 = ControlUtils.getTableCell(table, 0, 2);\n+\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select 0:0 and 0:2\n+        sm.select(0, null);\n+        sm.clearSelection(0, col1);\n+\n+        assertTrue(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertTrue(c2.isSelected());\n+        assertFalse(row.isSelected());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewRowTest.java","additions":65,"deletions":61,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+\n+import org.junit.After;\n@@ -49,0 +51,10 @@\n+\n+    StageLoader stageLoader;\n+\n+    @After\n+    public void after() {\n+        if (stageLoader != null) {\n+            stageLoader.dispose();\n+        }\n+    }\n+\n@@ -61,91 +73,87 @@\n-        StageLoader stageLoader = new StageLoader(table);\n-        try {\n-            TableRow row = ControlUtils.getTableRow(table, 0);\n-            TableCell c0 = ControlUtils.getTableCell(table, 0, 0);\n-            TableCell c1 = ControlUtils.getTableCell(table, 0, 1);\n-            TableCell c2 = ControlUtils.getTableCell(table, 0, 2);\n-\n-            assertEquals(0, selectedCells.size());\n-            assertFalse(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertFalse(c2.isSelected());\n-            assertFalse(row.isSelected());\n-\n-            \/\/ select 0:0\n-            ControlUtils.mouseClick(c0, KeyModifier.getShortcutKey());\n-\n-            assertEquals(1, selectedCells.size());\n-            assertTrue(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertFalse(c2.isSelected());\n-            assertFalse(row.isSelected());\n-\n-            \/\/ select 0:1\n-            ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n-\n-            assertEquals(2, selectedCells.size());\n-            assertTrue(c0.isSelected());\n-            assertTrue(c1.isSelected());\n-            assertFalse(c2.isSelected());\n-            assertFalse(row.isSelected());\n-\n-            \/\/ select 0:2\n-            ControlUtils.mouseClick(c2, KeyModifier.getShortcutKey());\n-\n-            assertEquals(3, selectedCells.size());\n-            assertTrue(c0.isSelected());\n-            assertTrue(c1.isSelected());\n-            assertTrue(c2.isSelected());\n-            assertFalse(row.isSelected());\n-\n-            \/\/ deselect 0:1\n-            ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n-\n-            assertEquals(2, selectedCells.size());\n-            assertTrue(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertTrue(c2.isSelected());\n-            assertFalse(row.isSelected());\n-\n-            \/\/ and now with the cell selection off\n-            sm.setCellSelectionEnabled(false);\n-            sm.clearSelection();\n-\n-            \/\/ select 0:0\n-            ControlUtils.mouseClick(c0, KeyModifier.getShortcutKey());\n-\n-            assertEquals(1, selectedCells.size()); \/\/ counts selected rows instead of cells\n-            assertFalse(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertFalse(c2.isSelected());\n-            assertTrue(row.isSelected());\n-\n-            \/\/ select 0:1\n-            ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n-\n-            assertEquals(0, selectedCells.size());\n-            assertFalse(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertFalse(c2.isSelected());\n-            assertFalse(row.isSelected());\n-\n-            \/\/ select 0:2\n-            ControlUtils.mouseClick(c2, KeyModifier.getShortcutKey());\n-\n-            assertEquals(1, selectedCells.size());\n-            assertFalse(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertFalse(c2.isSelected());\n-            assertTrue(row.isSelected());\n-\n-            \/\/ deselect 0:1\n-            ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n-\n-            assertEquals(0, selectedCells.size());\n-            assertFalse(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertFalse(c2.isSelected());\n-            assertFalse(row.isSelected());\n-        } finally {\n-            stageLoader.dispose();\n-        }\n+        stageLoader = new StageLoader(table);\n+        TableRow row = ControlUtils.getTableRow(table, 0);\n+        TableCell c0 = ControlUtils.getTableCell(table, 0, 0);\n+        TableCell c1 = ControlUtils.getTableCell(table, 0, 1);\n+        TableCell c2 = ControlUtils.getTableCell(table, 0, 2);\n+\n+        assertEquals(0, selectedCells.size());\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select 0:0\n+        ControlUtils.mouseClick(c0, KeyModifier.getShortcutKey());\n+\n+        assertEquals(1, selectedCells.size());\n+        assertTrue(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select 0:1\n+        ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+        assertEquals(2, selectedCells.size());\n+        assertTrue(c0.isSelected());\n+        assertTrue(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select 0:2\n+        ControlUtils.mouseClick(c2, KeyModifier.getShortcutKey());\n+\n+        assertEquals(3, selectedCells.size());\n+        assertTrue(c0.isSelected());\n+        assertTrue(c1.isSelected());\n+        assertTrue(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ deselect 0:1\n+        ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+        assertEquals(2, selectedCells.size());\n+        assertTrue(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertTrue(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ and now with the cell selection off\n+        sm.setCellSelectionEnabled(false);\n+        sm.clearSelection();\n+\n+        \/\/ select 0:0\n+        ControlUtils.mouseClick(c0, KeyModifier.getShortcutKey());\n+\n+        assertEquals(1, selectedCells.size()); \/\/ counts selected rows instead of cells\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertTrue(row.isSelected());\n+\n+        \/\/ select 0:1\n+        ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+        assertEquals(0, selectedCells.size());\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select 0:2\n+        ControlUtils.mouseClick(c2, KeyModifier.getShortcutKey());\n+\n+        assertEquals(1, selectedCells.size());\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertTrue(row.isSelected());\n+\n+        \/\/ deselect 0:1\n+        ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+        assertEquals(0, selectedCells.size());\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n@@ -159,99 +167,95 @@\n-        StageLoader stageLoader = new StageLoader(tree);\n-        try {\n-            TreeTableView.TreeTableViewSelectionModel<String> sm = tree.getSelectionModel();\n-            sm.setSelectionMode(SelectionMode.MULTIPLE);\n-            sm.setCellSelectionEnabled(true);\n-            sm.clearSelection();\n-\n-            ObservableList<TreeTablePosition<String,?>> selectedCells = sm.getSelectedCells();\n-\n-            TreeTableRow row = ControlUtils.getTreeTableRow(tree, 0);\n-\n-            TreeTableCell c0 = ControlUtils.getTreeTableCell(tree, 0, 0);\n-            TreeTableCell c1 = ControlUtils.getTreeTableCell(tree, 0, 1);\n-            TreeTableCell c2 = ControlUtils.getTreeTableCell(tree, 0, 2);\n-\n-            assertTrue(selectedCells.size() == 0);\n-            assertFalse(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertFalse(c2.isSelected());\n-            assertFalse(row.isSelected());\n-\n-            \/\/ select 0:0\n-            ControlUtils.mouseClick(c0, KeyModifier.getShortcutKey());\n-\n-            assertEquals(1, selectedCells.size());\n-            assertTrue(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertFalse(c2.isSelected());\n-            assertFalse(row.isSelected());\n-\n-            \/\/ select 0:1\n-            ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n-\n-            assertEquals(2, selectedCells.size());\n-            assertTrue(c0.isSelected());\n-            assertTrue(c1.isSelected());\n-            assertFalse(c2.isSelected());\n-            assertFalse(row.isSelected());\n-\n-            \/\/ select 0:2\n-            ControlUtils.mouseClick(c2, KeyModifier.getShortcutKey());\n-\n-            assertEquals(3, selectedCells.size());\n-            assertTrue(c0.isSelected());\n-            assertTrue(c1.isSelected());\n-            assertTrue(c2.isSelected());\n-            assertFalse(row.isSelected()); \/\/ JDK-8292353 failure\n-\n-            \/\/ deselect 0:1\n-            ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n-\n-            assertEquals(2, selectedCells.size());\n-            assertTrue(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertTrue(c2.isSelected());\n-            assertFalse(row.isSelected()); \/\/ JDK-8292353 failure\n-\n-            \/\/ and now with the cell selection off\n-            sm.setCellSelectionEnabled(false);\n-            sm.clearSelection();\n-\n-            \/\/ select 0:0\n-            ControlUtils.mouseClick(c0, KeyModifier.getShortcutKey());\n-\n-            assertEquals(1, selectedCells.size()); \/\/ counts selected rows instead of cells\n-            assertFalse(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertFalse(c2.isSelected());\n-            assertTrue(row.isSelected());\n-\n-            \/\/ select 0:1\n-            ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n-\n-            assertEquals(0, selectedCells.size());\n-            assertFalse(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertFalse(c2.isSelected());\n-            assertFalse(row.isSelected());\n-\n-            \/\/ select 0:2\n-            ControlUtils.mouseClick(c2, KeyModifier.getShortcutKey());\n-\n-            assertEquals(1, selectedCells.size());\n-            assertFalse(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertFalse(c2.isSelected());\n-            assertTrue(row.isSelected());\n-\n-            \/\/ deselect 0:1\n-            ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n-\n-            assertEquals(0, selectedCells.size());\n-            assertFalse(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertFalse(c2.isSelected());\n-            assertFalse(row.isSelected());\n-        } finally {\n-            stageLoader.dispose();\n-        }\n+        stageLoader = new StageLoader(tree);\n+        TreeTableView.TreeTableViewSelectionModel<String> sm = tree.getSelectionModel();\n+        sm.setSelectionMode(SelectionMode.MULTIPLE);\n+        sm.setCellSelectionEnabled(true);\n+        sm.clearSelection();\n+\n+        ObservableList<TreeTablePosition<String, ?>> selectedCells = sm.getSelectedCells();\n+\n+        TreeTableRow row = ControlUtils.getTreeTableRow(tree, 0);\n+\n+        TreeTableCell c0 = ControlUtils.getTreeTableCell(tree, 0, 0);\n+        TreeTableCell c1 = ControlUtils.getTreeTableCell(tree, 0, 1);\n+        TreeTableCell c2 = ControlUtils.getTreeTableCell(tree, 0, 2);\n+\n+        assertTrue(selectedCells.size() == 0);\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select 0:0\n+        ControlUtils.mouseClick(c0, KeyModifier.getShortcutKey());\n+\n+        assertEquals(1, selectedCells.size());\n+        assertTrue(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select 0:1\n+        ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+        assertEquals(2, selectedCells.size());\n+        assertTrue(c0.isSelected());\n+        assertTrue(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select 0:2\n+        ControlUtils.mouseClick(c2, KeyModifier.getShortcutKey());\n+\n+        assertEquals(3, selectedCells.size());\n+        assertTrue(c0.isSelected());\n+        assertTrue(c1.isSelected());\n+        assertTrue(c2.isSelected());\n+        assertFalse(row.isSelected()); \/\/ JDK-8292353 failure\n+\n+        \/\/ deselect 0:1\n+        ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+        assertEquals(2, selectedCells.size());\n+        assertTrue(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertTrue(c2.isSelected());\n+        assertFalse(row.isSelected()); \/\/ JDK-8292353 failure\n+\n+        \/\/ and now with the cell selection off\n+        sm.setCellSelectionEnabled(false);\n+        sm.clearSelection();\n+\n+        \/\/ select 0:0\n+        ControlUtils.mouseClick(c0, KeyModifier.getShortcutKey());\n+\n+        assertEquals(1, selectedCells.size()); \/\/ counts selected rows instead of cells\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertTrue(row.isSelected());\n+\n+        \/\/ select 0:1\n+        ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+        assertEquals(0, selectedCells.size());\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select 0:2\n+        ControlUtils.mouseClick(c2, KeyModifier.getShortcutKey());\n+\n+        assertEquals(1, selectedCells.size());\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertTrue(row.isSelected());\n+\n+        \/\/ deselect 0:1\n+        ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+        assertEquals(0, selectedCells.size());\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeAndTableViewTest.java","additions":194,"deletions":190,"binary":false,"changes":384,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+\n+import org.junit.After;\n@@ -60,0 +62,9 @@\n+    StageLoader stageLoader;\n+\n+    @After\n+    public void after() {\n+        if (stageLoader != null) {\n+            stageLoader.dispose();\n+        }\n+    }\n+\n@@ -832,32 +843,28 @@\n-        StageLoader stageLoader = new StageLoader(tree);\n-        try {\n-            TreeTableView.TreeTableViewSelectionModel<String> sm = tree.getSelectionModel();\n-            sm.setSelectionMode(SelectionMode.MULTIPLE);\n-            sm.setCellSelectionEnabled(true);\n-            sm.clearSelection();\n-\n-            TreeTableColumn<String,?> col0 = tree.getColumns().get(0);\n-            TreeTableColumn<String,?> col1 = tree.getColumns().get(1);\n-            TreeTableColumn<String,?> col2 = tree.getColumns().get(2);\n-            TreeTableRow row = ControlUtils.getTreeTableRow(tree, 0);\n-            TreeTableCell c0 = ControlUtils.getTreeTableCell(tree, 0, 0);\n-            TreeTableCell c1 = ControlUtils.getTreeTableCell(tree, 0, 1);\n-            TreeTableCell c2 = ControlUtils.getTreeTableCell(tree, 0, 2);\n-\n-            assertFalse(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertFalse(c2.isSelected());\n-            assertFalse(row.isSelected());\n-\n-            \/\/ select all cells in the first row\n-            sm.select(0, col0);\n-            sm.select(0, col1);\n-            sm.select(0, col2);\n-\n-            assertTrue(c0.isSelected());\n-            assertTrue(c1.isSelected());\n-            assertTrue(c2.isSelected());\n-            assertFalse(row.isSelected()); \/\/ JDK-8292353 failure\n-        } finally {\n-            stageLoader.dispose();\n-        }\n+        stageLoader = new StageLoader(tree);\n+        TreeTableView.TreeTableViewSelectionModel<String> sm = tree.getSelectionModel();\n+        sm.setSelectionMode(SelectionMode.MULTIPLE);\n+        sm.setCellSelectionEnabled(true);\n+        sm.clearSelection();\n+\n+        TreeTableColumn<String,?> col0 = tree.getColumns().get(0);\n+        TreeTableColumn<String,?> col1 = tree.getColumns().get(1);\n+        TreeTableColumn<String,?> col2 = tree.getColumns().get(2);\n+        TreeTableRow row = ControlUtils.getTreeTableRow(tree, 0);\n+        TreeTableCell c0 = ControlUtils.getTreeTableCell(tree, 0, 0);\n+        TreeTableCell c1 = ControlUtils.getTreeTableCell(tree, 0, 1);\n+        TreeTableCell c2 = ControlUtils.getTreeTableCell(tree, 0, 2);\n+\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select all cells in the first row\n+        sm.select(0, col0);\n+        sm.select(0, col1);\n+        sm.select(0, col2);\n+\n+        assertTrue(c0.isSelected());\n+        assertTrue(c1.isSelected());\n+        assertTrue(c2.isSelected());\n+        assertFalse(row.isSelected()); \/\/ JDK-8292353 failure\n@@ -871,29 +878,25 @@\n-        StageLoader stageLoader = new StageLoader(tree);\n-        try {\n-            TreeTableView.TreeTableViewSelectionModel<String> sm = tree.getSelectionModel();\n-            sm.setSelectionMode(SelectionMode.MULTIPLE);\n-            sm.setCellSelectionEnabled(true);\n-            sm.clearSelection();\n-\n-            TreeTableColumn<String,?> col1 = tree.getColumns().get(1);\n-            TreeTableRow row = ControlUtils.getTreeTableRow(tree, 0);\n-            TreeTableCell c0 = ControlUtils.getTreeTableCell(tree, 0, 0);\n-            TreeTableCell c1 = ControlUtils.getTreeTableCell(tree, 0, 1);\n-            TreeTableCell c2 = ControlUtils.getTreeTableCell(tree, 0, 2);\n-\n-            assertFalse(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertFalse(c2.isSelected());\n-            assertFalse(row.isSelected());\n-\n-            \/\/ select 0:0 and 0:2\n-            sm.select(0, null);\n-            sm.clearSelection(0, col1);\n-\n-            assertTrue(c0.isSelected());\n-            assertFalse(c1.isSelected());\n-            assertTrue(c2.isSelected());\n-            assertFalse(row.isSelected()); \/\/ JDK-8292353 failure\n-        } finally {\n-            stageLoader.dispose();\n-        }\n+        stageLoader = new StageLoader(tree);\n+        TreeTableView.TreeTableViewSelectionModel<String> sm = tree.getSelectionModel();\n+        sm.setSelectionMode(SelectionMode.MULTIPLE);\n+        sm.setCellSelectionEnabled(true);\n+        sm.clearSelection();\n+\n+        TreeTableColumn<String,?> col1 = tree.getColumns().get(1);\n+        TreeTableRow row = ControlUtils.getTreeTableRow(tree, 0);\n+        TreeTableCell c0 = ControlUtils.getTreeTableCell(tree, 0, 0);\n+        TreeTableCell c1 = ControlUtils.getTreeTableCell(tree, 0, 1);\n+        TreeTableCell c2 = ControlUtils.getTreeTableCell(tree, 0, 2);\n+\n+        assertFalse(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertFalse(c2.isSelected());\n+        assertFalse(row.isSelected());\n+\n+        \/\/ select 0:0 and 0:2\n+        sm.select(0, null);\n+        sm.clearSelection(0, col1);\n+\n+        assertTrue(c0.isSelected());\n+        assertFalse(c1.isSelected());\n+        assertTrue(c2.isSelected());\n+        assertFalse(row.isSelected()); \/\/ JDK-8292353 failure\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableRowTest.java","additions":64,"deletions":61,"binary":false,"changes":125,"status":"modified"}]}