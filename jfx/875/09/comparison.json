{"files":[{"patch":"@@ -442,1 +442,0 @@\n-        if (getTreeTableView().getSelectionModel() == null) return;\n@@ -444,2 +443,4 @@\n-        boolean isSelected = getTreeTableView().getSelectionModel().isSelected(index, null);\n-        if (isSelected() == isSelected) return;\n+        TreeTableViewSelectionModel<T> sm = getTreeTableView().getSelectionModel();\n+        if (sm == null) {\n+            return;\n+        }\n@@ -447,1 +448,4 @@\n-        updateSelected(isSelected);\n+        boolean isSelected = !sm.isCellSelectionEnabled() && sm.isSelected(index);\n+        if (isSelected() != isSelected) {\n+            updateSelected(isSelected);\n+        }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableRow.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,190 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control;\n+\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.event.EventTarget;\n+import javafx.scene.Node;\n+import javafx.scene.control.TableCell;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableRow;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableCell;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableRow;\n+import javafx.scene.control.TreeTableView;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n+\n+\/**\n+ * Miscellaneous convenience methods to support javafx.controls tests.\n+ *\/\n+public class ControlUtils {\n+    \/**\n+     * Creates a TableView with three columns and three rows.\n+     * Each cell contains a \"...\" string.\n+     *\/\n+    public static TableView<String> createTableView() {\n+        TableView<String> t = new TableView<>();\n+        t.requestFocus();\n+        t.getColumns().addAll(\n+            createTableColumn(\"C0\"),\n+            createTableColumn(\"C1\"),\n+            createTableColumn(\"C2\"));\n+        t.getItems().addAll(\n+            \"\",\n+            \"\",\n+            \"\"\n+            );\n+        return t;\n+    }\n+\n+    \/**\n+     * Creates a TreeTableView with three columns and three rows (root is hidden).\n+     * Each cell contains a \"...\" string.\n+     *\/\n+    public static TreeTableView<String> createTreeTableView() {\n+        TreeItem<String> root = new TreeItem<String>(\"\");\n+        root.setExpanded(true);\n+        root.getChildren().setAll(\n+            new TreeItem<>(\"\"),\n+            new TreeItem<>(\"\"),\n+            new TreeItem<>(\"\")\n+            );\n+\n+        TreeTableView<String> t = new TreeTableView<>();\n+        t.setRoot(root);\n+        t.setShowRoot(false);\n+        t.requestFocus();\n+        t.getColumns().addAll(\n+            createTreeTableColumn(\"C0\"),\n+            createTreeTableColumn(\"C1\"),\n+            createTreeTableColumn(\"C2\")\n+            );\n+        return t;\n+    }\n+\n+    \/**\n+     * Performs a node lookup, returning a TreeTableCell at the given (row, column),\n+     * or throws an Error if not found.\n+     *\/\n+    public static TreeTableCell getTreeTableCell(TreeTableView t, int row, int column) {\n+        TreeTableColumn col = (TreeTableColumn)t.getColumns().get(column);\n+\n+        for (Node n: t.lookupAll(\".tree-table-cell\")) {\n+            if (n instanceof TreeTableCell c) {\n+                if (row == c.getTableRow().getIndex()) {\n+                    if (col == c.getTableColumn()) {\n+                        return c;\n+                    }\n+                }\n+            }\n+        }\n+        throw new Error(\"TreeTableCell not found at \" + row + \":\" + column);\n+    }\n+\n+    \/**\n+     * Performs a node lookup, returning a TreeTableRow at the given row,\n+     * or throws an Error if not found.\n+     *\/\n+    public static TreeTableRow getTreeTableRow(TreeTableView t, int row) {\n+        for (Node n: t.lookupAll(\".tree-table-row-cell\")) {\n+            if (n instanceof TreeTableRow c) {\n+                if (row == c.getIndex()) {\n+                    return c;\n+                }\n+            }\n+        }\n+        throw new Error(\"TreeTableRow not found at \" + row);\n+    }\n+\n+    \/**\n+     * Performs a node lookup, returning a TableCell at the given (row, column)\n+     * or throws an Error if not found.\n+     *\/\n+    public static TableCell getTableCell(TableView t, int row, int column) {\n+        TableColumn col = (TableColumn)t.getColumns().get(column);\n+\n+        for (Node n: t.lookupAll(\".table-cell\")) {\n+            if (n instanceof TableCell c) {\n+                if (row == c.getTableRow().getIndex()) {\n+                    if (col == c.getTableColumn()) {\n+                        return c;\n+                    }\n+                }\n+            }\n+        }\n+        throw new Error(\"TableCell not found at \" + row + \":\" + column);\n+    }\n+\n+    \/**\n+     * Performs a node lookup, returning a TableRow at the given row,\n+     * or throws an Error if not found.\n+     *\/\n+    public static TableRow getTableRow(TableView t, int row) {\n+        for (Node n: t.lookupAll(\".table-row-cell\")) {\n+            if (n instanceof TableRow c) {\n+                if (row == c.getIndex()) {\n+                    return c;\n+                }\n+            }\n+        }\n+        throw new Error(\"TableRow not found at \" + row);\n+    }\n+\n+    \/**\n+     * Creates a TreeTableColumn with the given name,\n+     * setting up the cell value factory to place a \"...\" string at each cell.\n+     *\/\n+    public static TreeTableColumn createTreeTableColumn(String name) {\n+        TreeTableColumn c = new TreeTableColumn(name);\n+        c.setCellValueFactory((f) -> new SimpleStringProperty(\"...\"));\n+        return c;\n+    }\n+\n+    \/**\n+     * Creates a TableColumn with the given name,\n+     * setting up the cell value factory to place a \"...\" string at each cell.\n+     *\/\n+    public static TableColumn createTableColumn(String name) {\n+        TableColumn c = new TableColumn(name);\n+        c.setCellValueFactory((f) -> new SimpleStringProperty(\"...\"));\n+        return c;\n+    }\n+\n+    \/**\n+     * Simulates a mouse click with given KeyModifier(s) over the specified target,\n+     * then fire a pulse.\n+     *\/\n+    public static void mouseClick(EventTarget target, KeyModifier... modifiers) {\n+        MouseEventFirer m = new MouseEventFirer(target);\n+        m.fireMousePressAndRelease(modifiers);\n+        m.dispose();\n+\n+        Toolkit.getToolkit().firePulse();\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ControlUtils.java","additions":190,"deletions":0,"binary":false,"changes":190,"status":"added"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.Test;\n+import javafx.scene.control.SelectionMode;\n+import javafx.scene.control.TableCell;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableRow;\n+import javafx.scene.control.TableView;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+\n+\/**\n+ * Contains TableViewRow tests.\n+ *\/\n+public class TableViewRowTest {\n+\n+    \/** TableView with cell selection enabled should not select TreeTableRows *\/\n+    @Test\n+    public void test_TableView_jdk_8292353_select_all() {\n+        TableView<String> table = ControlUtils.createTableView();\n+\n+        StageLoader stageLoader = new StageLoader(table);\n+        try {\n+            TableView.TableViewSelectionModel<String> sm = table.getSelectionModel();\n+            sm.setSelectionMode(SelectionMode.MULTIPLE);\n+            sm.setCellSelectionEnabled(true);\n+            sm.clearSelection();\n+\n+            TableColumn<String,?> col0 = table.getColumns().get(0);\n+            TableColumn<String,?> col1 = table.getColumns().get(1);\n+            TableColumn<String,?> col2 = table.getColumns().get(2);\n+            TableRow row = ControlUtils.getTableRow(table, 0);\n+            TableCell c0 = ControlUtils.getTableCell(table, 0, 0);\n+            TableCell c1 = ControlUtils.getTableCell(table, 0, 1);\n+            TableCell c2 = ControlUtils.getTableCell(table, 0, 2);\n+\n+            assertFalse(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertFalse(c2.isSelected());\n+            assertFalse(row.isSelected());\n+\n+            \/\/ select all cells in the first row\n+            sm.select(0, col0);\n+            sm.select(0, col1);\n+            sm.select(0, col2);\n+\n+            assertTrue(c0.isSelected());\n+            assertTrue(c1.isSelected());\n+            assertTrue(c2.isSelected());\n+            assertFalse(row.isSelected());\n+        } finally {\n+            stageLoader.dispose();\n+        }\n+    }\n+\n+    \/** TableView with cell selection enabled should not select TreeTableRows *\/\n+    @Test\n+    public void test_TableView_jdk_8292353_select_all_but_one() {\n+        TableView<String> table = ControlUtils.createTableView();\n+\n+        StageLoader stageLoader = new StageLoader(table);\n+        try {\n+            TableView.TableViewSelectionModel<String> sm = table.getSelectionModel();\n+            sm.setSelectionMode(SelectionMode.MULTIPLE);\n+            sm.setCellSelectionEnabled(true);\n+            sm.clearSelection();\n+\n+            TableColumn<String,?> col1 = table.getColumns().get(1);\n+            TableRow row = ControlUtils.getTableRow(table, 0);\n+            TableCell c0 = ControlUtils.getTableCell(table, 0, 0);\n+            TableCell c1 = ControlUtils.getTableCell(table, 0, 1);\n+            TableCell c2 = ControlUtils.getTableCell(table, 0, 2);\n+\n+            assertFalse(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertFalse(c2.isSelected());\n+            assertFalse(row.isSelected());\n+\n+            \/\/ select 0:0 and 0:2\n+            sm.select(0, null);\n+            sm.clearSelection(0, col1);\n+\n+            assertTrue(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertTrue(c2.isSelected());\n+            assertFalse(row.isSelected());\n+        } finally {\n+            stageLoader.dispose();\n+        }\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewRowTest.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -0,0 +1,259 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.Test;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.SelectionMode;\n+import javafx.scene.control.TableCell;\n+import javafx.scene.control.TablePosition;\n+import javafx.scene.control.TableRow;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TreeTableCell;\n+import javafx.scene.control.TreeTablePosition;\n+import javafx.scene.control.TreeTableRow;\n+import javafx.scene.control.TreeTableView;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+\n+\/**\n+ * Simulated interaction tests for:\n+ * - cell selection logic JDK-8292353\n+ *\/\n+public class TreeAndTableViewTest {\n+    \/** TreeTableView with cell selection enabled should not select TreeTableRows *\/\n+    @Test\n+    public void test_TableView_jdk_8292353() {\n+        TableView<String> table = ControlUtils.createTableView();\n+\n+        TableView.TableViewSelectionModel<String> sm = table.getSelectionModel();\n+        sm.setSelectionMode(SelectionMode.MULTIPLE);\n+        sm.setCellSelectionEnabled(true);\n+        sm.clearSelection();\n+\n+        ObservableList<TablePosition> selectedCells = sm.getSelectedCells();\n+\n+        StageLoader stageLoader = new StageLoader(table);\n+        try {\n+            TableRow row = ControlUtils.getTableRow(table, 0);\n+            TableCell c0 = ControlUtils.getTableCell(table, 0, 0);\n+            TableCell c1 = ControlUtils.getTableCell(table, 0, 1);\n+            TableCell c2 = ControlUtils.getTableCell(table, 0, 2);\n+\n+            assertEquals(0, selectedCells.size());\n+            assertFalse(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertFalse(c2.isSelected());\n+            assertFalse(row.isSelected());\n+\n+            \/\/ select 0:0\n+            ControlUtils.mouseClick(c0, KeyModifier.getShortcutKey());\n+\n+            assertEquals(1, selectedCells.size());\n+            assertTrue(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertFalse(c2.isSelected());\n+            assertFalse(row.isSelected());\n+\n+            \/\/ select 0:1\n+            ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+            assertEquals(2, selectedCells.size());\n+            assertTrue(c0.isSelected());\n+            assertTrue(c1.isSelected());\n+            assertFalse(c2.isSelected());\n+            assertFalse(row.isSelected());\n+\n+            \/\/ select 0:2\n+            ControlUtils.mouseClick(c2, KeyModifier.getShortcutKey());\n+\n+            assertEquals(3, selectedCells.size());\n+            assertTrue(c0.isSelected());\n+            assertTrue(c1.isSelected());\n+            assertTrue(c2.isSelected());\n+            assertFalse(row.isSelected());\n+\n+            \/\/ deselect 0:1\n+            ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+            assertEquals(2, selectedCells.size());\n+            assertTrue(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertTrue(c2.isSelected());\n+            assertFalse(row.isSelected());\n+\n+            \/\/ and now with the cell selection off\n+            sm.setCellSelectionEnabled(false);\n+            sm.clearSelection();\n+\n+            \/\/ select 0:0\n+            ControlUtils.mouseClick(c0, KeyModifier.getShortcutKey());\n+\n+            assertEquals(1, selectedCells.size()); \/\/ counts selected rows instead of cells\n+            assertFalse(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertFalse(c2.isSelected());\n+            assertTrue(row.isSelected());\n+\n+            \/\/ select 0:1\n+            ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+            assertEquals(0, selectedCells.size());\n+            assertFalse(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertFalse(c2.isSelected());\n+            assertFalse(row.isSelected());\n+\n+            \/\/ select 0:2\n+            ControlUtils.mouseClick(c2, KeyModifier.getShortcutKey());\n+\n+            assertEquals(1, selectedCells.size());\n+            assertFalse(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertFalse(c2.isSelected());\n+            assertTrue(row.isSelected());\n+\n+            \/\/ deselect 0:1\n+            ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+            assertEquals(0, selectedCells.size());\n+            assertFalse(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertFalse(c2.isSelected());\n+            assertFalse(row.isSelected());\n+        } finally {\n+            stageLoader.dispose();\n+        }\n+    }\n+\n+    \/** TreeTableView with cell selection enabled should not select TreeTableRows *\/\n+    @Test\n+    public void test_TreeTableView_jdk_8292353() {\n+        TreeTableView<String> tree = ControlUtils.createTreeTableView();\n+\n+        StageLoader stageLoader = new StageLoader(tree);\n+        try {\n+            TreeTableView.TreeTableViewSelectionModel<String> sm = tree.getSelectionModel();\n+            sm.setSelectionMode(SelectionMode.MULTIPLE);\n+            sm.setCellSelectionEnabled(true);\n+            sm.clearSelection();\n+\n+            ObservableList<TreeTablePosition<String,?>> selectedCells = sm.getSelectedCells();\n+\n+            TreeTableRow row = ControlUtils.getTreeTableRow(tree, 0);\n+\n+            TreeTableCell c0 = ControlUtils.getTreeTableCell(tree, 0, 0);\n+            TreeTableCell c1 = ControlUtils.getTreeTableCell(tree, 0, 1);\n+            TreeTableCell c2 = ControlUtils.getTreeTableCell(tree, 0, 2);\n+\n+            assertTrue(selectedCells.size() == 0);\n+            assertFalse(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertFalse(c2.isSelected());\n+            assertFalse(row.isSelected());\n+\n+            \/\/ select 0:0\n+            ControlUtils.mouseClick(c0, KeyModifier.getShortcutKey());\n+\n+            assertEquals(1, selectedCells.size());\n+            assertTrue(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertFalse(c2.isSelected());\n+            assertFalse(row.isSelected());\n+\n+            \/\/ select 0:1\n+            ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+            assertEquals(2, selectedCells.size());\n+            assertTrue(c0.isSelected());\n+            assertTrue(c1.isSelected());\n+            assertFalse(c2.isSelected());\n+            assertFalse(row.isSelected());\n+\n+            \/\/ select 0:2\n+            ControlUtils.mouseClick(c2, KeyModifier.getShortcutKey());\n+\n+            assertEquals(3, selectedCells.size());\n+            assertTrue(c0.isSelected());\n+            assertTrue(c1.isSelected());\n+            assertTrue(c2.isSelected());\n+            assertFalse(row.isSelected()); \/\/ JDK-8292353 failure\n+\n+            \/\/ deselect 0:1\n+            ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+            assertEquals(2, selectedCells.size());\n+            assertTrue(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertTrue(c2.isSelected());\n+            assertFalse(row.isSelected()); \/\/ JDK-8292353 failure\n+\n+            \/\/ and now with the cell selection off\n+            sm.setCellSelectionEnabled(false);\n+            sm.clearSelection();\n+\n+            \/\/ select 0:0\n+            ControlUtils.mouseClick(c0, KeyModifier.getShortcutKey());\n+\n+            assertEquals(1, selectedCells.size()); \/\/ counts selected rows instead of cells\n+            assertFalse(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertFalse(c2.isSelected());\n+            assertTrue(row.isSelected());\n+\n+            \/\/ select 0:1\n+            ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+            assertEquals(0, selectedCells.size());\n+            assertFalse(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertFalse(c2.isSelected());\n+            assertFalse(row.isSelected());\n+\n+            \/\/ select 0:2\n+            ControlUtils.mouseClick(c2, KeyModifier.getShortcutKey());\n+\n+            assertEquals(1, selectedCells.size());\n+            assertFalse(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertFalse(c2.isSelected());\n+            assertTrue(row.isSelected());\n+\n+            \/\/ deselect 0:1\n+            ControlUtils.mouseClick(c1, KeyModifier.getShortcutKey());\n+\n+            assertEquals(0, selectedCells.size());\n+            assertFalse(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertFalse(c2.isSelected());\n+            assertFalse(row.isSelected());\n+        } finally {\n+            stageLoader.dispose();\n+        }\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeAndTableViewTest.java","additions":259,"deletions":0,"binary":false,"changes":259,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,9 @@\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n@@ -31,0 +40,1 @@\n+import javafx.scene.control.TreeTableColumn;\n@@ -34,6 +44,1 @@\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-import static org.junit.Assert.*;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n@@ -811,2 +816,0 @@\n-\n-\n@@ -823,0 +826,75 @@\n+\n+    \/** TreeTableView with cell selection enabled should not select TreeTableRows *\/\n+    @Test\n+    public void test_TreeTableView_jdk_8292353_select_all() {\n+        TreeTableView<String> tree = ControlUtils.createTreeTableView();\n+\n+        StageLoader stageLoader = new StageLoader(tree);\n+        try {\n+            TreeTableView.TreeTableViewSelectionModel<String> sm = tree.getSelectionModel();\n+            sm.setSelectionMode(SelectionMode.MULTIPLE);\n+            sm.setCellSelectionEnabled(true);\n+            sm.clearSelection();\n+\n+            TreeTableColumn<String,?> col0 = tree.getColumns().get(0);\n+            TreeTableColumn<String,?> col1 = tree.getColumns().get(1);\n+            TreeTableColumn<String,?> col2 = tree.getColumns().get(2);\n+            TreeTableRow row = ControlUtils.getTreeTableRow(tree, 0);\n+            TreeTableCell c0 = ControlUtils.getTreeTableCell(tree, 0, 0);\n+            TreeTableCell c1 = ControlUtils.getTreeTableCell(tree, 0, 1);\n+            TreeTableCell c2 = ControlUtils.getTreeTableCell(tree, 0, 2);\n+\n+            assertFalse(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertFalse(c2.isSelected());\n+            assertFalse(row.isSelected());\n+\n+            \/\/ select all cells in the first row\n+            sm.select(0, col0);\n+            sm.select(0, col1);\n+            sm.select(0, col2);\n+\n+            assertTrue(c0.isSelected());\n+            assertTrue(c1.isSelected());\n+            assertTrue(c2.isSelected());\n+            assertFalse(row.isSelected()); \/\/ JDK-8292353 failure\n+        } finally {\n+            stageLoader.dispose();\n+        }\n+    }\n+\n+    \/** TreeTableView with cell selection enabled should not select TreeTableRows *\/\n+    @Test\n+    public void test_TreeTableView_jdk_8292353_select_all_but_one() {\n+        TreeTableView<String> tree = ControlUtils.createTreeTableView();\n+\n+        StageLoader stageLoader = new StageLoader(tree);\n+        try {\n+            TreeTableView.TreeTableViewSelectionModel<String> sm = tree.getSelectionModel();\n+            sm.setSelectionMode(SelectionMode.MULTIPLE);\n+            sm.setCellSelectionEnabled(true);\n+            sm.clearSelection();\n+\n+            TreeTableColumn<String,?> col1 = tree.getColumns().get(1);\n+            TreeTableRow row = ControlUtils.getTreeTableRow(tree, 0);\n+            TreeTableCell c0 = ControlUtils.getTreeTableCell(tree, 0, 0);\n+            TreeTableCell c1 = ControlUtils.getTreeTableCell(tree, 0, 1);\n+            TreeTableCell c2 = ControlUtils.getTreeTableCell(tree, 0, 2);\n+\n+            assertFalse(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertFalse(c2.isSelected());\n+            assertFalse(row.isSelected());\n+\n+            \/\/ select 0:0 and 0:2\n+            sm.select(0, null);\n+            sm.clearSelection(0, col1);\n+\n+            assertTrue(c0.isSelected());\n+            assertFalse(c1.isSelected());\n+            assertTrue(c2.isSelected());\n+            assertFalse(row.isSelected()); \/\/ JDK-8292353 failure\n+        } finally {\n+            stageLoader.dispose();\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableRowTest.java","additions":87,"deletions":9,"binary":false,"changes":96,"status":"modified"}]}