{"files":[{"patch":"@@ -116,1 +116,1 @@\n-        for (int i = 0; i < size(); i++) {\n+        for (int i = 0, max = size(); i < max; i++) {\n@@ -188,2 +188,3 @@\n-        Object[] arr = new Object[size()];\n-        for (int i = 0; i < size(); i++) {\n+        int max = size();\n+        Object[] arr = new Object[max];\n+        for (int i = 0; i < max; i++) {\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/ReadOnlyUnbackedObservableList.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -640,0 +640,1 @@\n+        private int size = -1;\n@@ -708,0 +709,1 @@\n+            size = -1;\n@@ -728,0 +730,1 @@\n+            size = -1;\n@@ -805,0 +808,1 @@\n+            size = 0;\n@@ -815,0 +819,1 @@\n+            size = -1;\n@@ -870,1 +875,5 @@\n-            return bitset.cardinality();\n+            if (size >= 0) {\n+                return size;\n+            }\n+            size = bitset.cardinality();\n+            return size;\n@@ -879,2 +888,34 @@\n-            reset();\n-            return super.indexOf(obj);\n+            if (!(obj instanceof Number)) {\n+                return -1;\n+            }\n+            Number n = (Number) obj;\n+            int index = n.intValue();\n+            if (!bitset.get(index)) {\n+                return -1;\n+            }\n+\n+            \/\/ is left most bit\n+            if (index == 0) {\n+                return 0;\n+            }\n+\n+            \/\/ is right most bit\n+            if (index == bitset.length() - 1) {\n+                return size() - 1;\n+            }\n+\n+            \/\/ count right bit\n+            if (index > bitset.length() \/ 2) {\n+                int count = 1;\n+                for (int i = bitset.nextSetBit(index+1); i >= 0; i = bitset.nextSetBit(i+1)) {\n+                    count++;\n+                }\n+                return size() - count;\n+            }\n+\n+            \/\/ count left bit\n+            int count = 0;\n+            for (int i = bitset.previousSetBit(index-1);  i >= 0; i = bitset.previousSetBit(i-1)) {\n+                count++;\n+            }\n+            return count;\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/MultipleSelectionModelBase.java","additions":44,"deletions":3,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+import javafx.application.Application;\n+import javafx.collections.ObservableList;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.SelectionMode;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+\n+public class SelectListViewTest extends Application {\n+\n+    final int ROW_COUNT = 70_000;\n+    \/\/  final int ROW_COUNT = 400_000;\n+    \/\/  final int ROW_COUNT = 10_000_000;\n+    \/\/  final int ROW_COUNT = 7_000;\n+\n+    @Override\n+    public void start(Stage stage) {\n+        ListView<String> listView = new ListView<>();\n+        listView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);\n+\n+        ObservableList<String> items = listView.getItems();\n+        for(int i=0; i<ROW_COUNT; i++) {\n+            String rec = String.valueOf(i);\n+            items.add(rec);\n+        }\n+\n+        BorderPane root = new BorderPane(listView);\n+        Button selectAll = new Button(\"selectAll\");\n+        Button clearSelection = new Button(\"clearSelection\");\n+        Button selectToStart = new Button(\"selectToStart\");\n+        Button selectToEnd = new Button(\"selectToEnd\");\n+        Button selectPrevious = new Button(\"selectPrevious\");\n+        Button selectNext= new Button(\"selectNext\");\n+\n+        selectAll.setFocusTraversable(true);\n+        clearSelection.setFocusTraversable(true);\n+        selectToStart.setFocusTraversable(true);\n+        selectToEnd.setFocusTraversable(true);\n+        selectPrevious.setFocusTraversable(true);\n+        selectNext.setFocusTraversable(true);\n+\n+        root.setRight(new VBox(6, selectAll, selectToStart, selectToEnd, selectPrevious, selectNext, clearSelection));\n+        stage.setScene(new Scene(root, 600, 600));\n+\n+        selectAll.setOnAction((e)->selectAll(listView));\n+        clearSelection.setOnAction((e)->clearSelection(listView));\n+        selectToStart.setOnAction((e)->selectToStart(listView));\n+        selectToEnd.setOnAction((e)->selectToLast(listView));\n+        selectPrevious.setOnAction((e)->selectPrevious(listView));\n+        selectNext.setOnAction((e)->selectNext(listView));\n+\n+        stage.show();\n+    }\n+\n+    private void selectAll(ListView listView) {\n+        long t = System.currentTimeMillis();\n+        listView.getSelectionModel().selectAll();\n+        System.out.println(\"time:\"+ (System.currentTimeMillis() - t));\n+    }\n+\n+    private void clearSelection(ListView listView) {\n+        long t = System.currentTimeMillis();\n+        listView.getSelectionModel().clearSelection();\n+        System.out.println(\"time:\"+ (System.currentTimeMillis() - t));\n+    }\n+\n+    private void selectToStart(ListView listView) {\n+        long t = System.currentTimeMillis();\n+        listView.getSelectionModel().selectRange(0, listView.getSelectionModel().getSelectedIndex());\n+        System.out.println(\"time:\"+ (System.currentTimeMillis() - t));\n+    }\n+\n+    private void selectToLast(ListView listView) {\n+        long t = System.currentTimeMillis();\n+        listView.getSelectionModel().selectRange(listView.getSelectionModel().getSelectedIndex(), listView.getItems().size());\n+        System.out.println(\"time:\"+ (System.currentTimeMillis() - t));\n+    }\n+\n+    private void selectPrevious(ListView listView) {\n+        long t = System.currentTimeMillis();\n+        listView.getSelectionModel().selectPrevious();\n+        System.out.println(\"time:\"+ (System.currentTimeMillis() - t));\n+    }\n+\n+    private void selectNext(ListView listView) {\n+        long t = System.currentTimeMillis();\n+        listView.getSelectionModel().selectNext();\n+        System.out.println(\"time:\"+ (System.currentTimeMillis() - t));\n+    }\n+    public static void main(String[] args) {\n+        Application.launch(args);\n+    }\n+}\n","filename":"tests\/manual\/controls\/SelectListViewTest.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+import javafx.application.Application;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.collections.ObservableList;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.SelectionMode;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+\n+public class SelectTableViewTest extends Application {\n+\n+    final int COL_COUNT = 3;\n+    final int ROW_COUNT = 70_000;\n+    \/\/  final int ROW_COUNT = 80_000;\n+    \/\/  final int ROW_COUNT = 50_000;\n+    \/\/  final int ROW_COUNT = 8_000;\n+\n+    @Override\n+    public void start(Stage stage) {\n+        TableView<String[]> tableView = new TableView<>();\n+        tableView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);\n+\/\/      tableView.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);\n+\n+        final ObservableList<TableColumn<String[], ?>> columns = tableView.getColumns();\n+        for(int i=0; i<COL_COUNT; i++) {\n+            TableColumn<String[], String> column = new TableColumn<>(\"Col\"+i);\n+            final int colIndex=i;\n+            column.setCellValueFactory((cell)->new SimpleStringProperty(cell.getValue()[colIndex]));\n+            column.setPrefWidth(150);\n+            columns.add(column);\n+        }\n+\n+        ObservableList<String[]> items = tableView.getItems();\n+        for(int i=0; i<ROW_COUNT; i++) {\n+            String[] rec = new String[COL_COUNT];\n+            for(int j=0; j<rec.length; j++) {\n+                rec[j] = i+\":\"+j;\n+            }\n+            items.add(rec);\n+        }\n+\n+        BorderPane root = new BorderPane(tableView);\n+        Button selectAll = new Button(\"selectAll\");\n+        Button clearSelection = new Button(\"clearSelection\");\n+        Button selectToStart = new Button(\"selectToStart\");\n+        Button selectToEnd = new Button(\"selectToEnd\");\n+        Button selectPrevious = new Button(\"selectPrevious\");\n+        Button selectNext= new Button(\"selectNext\");\n+\n+        selectAll.setFocusTraversable(true);\n+        clearSelection.setFocusTraversable(true);\n+        selectToStart.setFocusTraversable(true);\n+        selectToEnd.setFocusTraversable(true);\n+        selectPrevious.setFocusTraversable(true);\n+        selectNext.setFocusTraversable(true);\n+\n+        root.setRight(new VBox(6, selectAll, selectToStart, selectToEnd, selectPrevious, selectNext, clearSelection));\n+        stage.setScene(new Scene(root, 600, 600));\n+\n+        selectAll.setOnAction((e)->selectAll(tableView));\n+        clearSelection.setOnAction((e)->clearSelection(tableView));\n+        selectToStart.setOnAction((e)->selectToStart(tableView));\n+        selectToEnd.setOnAction((e)->selectToLast(tableView));\n+        selectPrevious.setOnAction((e)->selectPrevious(tableView));\n+        selectNext.setOnAction((e)->selectNext(tableView));\n+\n+        stage.show();\n+    }\n+\n+    private void selectAll(TableView tableView) {\n+        long t = System.currentTimeMillis();\n+        tableView.getSelectionModel().selectAll();\n+        System.out.println(\"time:\"+ (System.currentTimeMillis() - t));\n+    }\n+\n+    private void clearSelection(TableView tableView) {\n+        long t = System.currentTimeMillis();\n+        tableView.getSelectionModel().clearSelection();\n+        System.out.println(\"time:\"+ (System.currentTimeMillis() - t));\n+    }\n+\n+    private void selectToStart(TableView tableView) {\n+        long t = System.currentTimeMillis();\n+        tableView.getSelectionModel().selectRange(0, tableView.getSelectionModel().getFocusedIndex());\n+        System.out.println(\"time:\"+ (System.currentTimeMillis() - t));\n+    }\n+\n+    private void selectToLast(TableView tableView) {\n+        long t = System.currentTimeMillis();\n+        tableView.getSelectionModel().selectRange(tableView.getSelectionModel().getFocusedIndex(), tableView.getItems().size());\n+        System.out.println(\"time:\"+ (System.currentTimeMillis() - t));\n+    }\n+\n+    private void selectPrevious(TableView tableView) {\n+        long t = System.currentTimeMillis();\n+        tableView.getSelectionModel().selectPrevious();\n+        System.out.println(\"time:\"+ (System.currentTimeMillis() - t));\n+    }\n+\n+    private void selectNext(TableView tableView) {\n+        long t = System.currentTimeMillis();\n+        tableView.getSelectionModel().selectNext();\n+        System.out.println(\"time:\"+ (System.currentTimeMillis() - t));\n+    }\n+\n+    public static void main(String[] args) {\n+        Application.launch(args);\n+    }\n+}\n","filename":"tests\/manual\/controls\/SelectTableViewTest.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"}]}