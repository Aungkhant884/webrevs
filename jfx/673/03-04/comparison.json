{"files":[{"patch":"@@ -358,0 +358,1 @@\n+        \/\/ No modifications should be made to 'selectedIndicesCopy' to honour the constructor.\n@@ -652,0 +653,3 @@\n+        \/**\n+         * Constructs a new instance of SelectedIndicesList\n+         *\/\n@@ -656,0 +660,5 @@\n+        \/**\n+         * Constructs a new instance of SelectedIndicesList from the provided BitSet.\n+         * The underlying source BitSet shouldn't be modified once it has been passed to the constructor.\n+         * @param bitset Bitset to be used.\n+         *\/\n@@ -825,40 +834,0 @@\n-\/\/        public void clearAndSelect(int index) {\n-\/\/            if (index < 0 || index >= getItemCount()) {\n-\/\/                clearSelection();\n-\/\/                return;\n-\/\/            }\n-\/\/\n-\/\/            final boolean wasSelected = isSelected(index);\n-\/\/\n-\/\/            \/\/ RT-33558 if this method has been called with a given row, and that\n-\/\/            \/\/ row is the only selected row currently, then this method becomes a no-op.\n-\/\/            if (wasSelected && getSelectedIndices().size() == 1) {\n-\/\/                \/\/ before we return, we double-check that the selected item\n-\/\/                \/\/ is equal to the item in the given index\n-\/\/                if (getSelectedItem() == getModelItem(index)) {\n-\/\/                    return;\n-\/\/                }\n-\/\/            }\n-\/\/\n-\/\/            List<Integer> removed = bitset.stream().boxed().collect(Collectors.toList());\n-\/\/            boolean isSelected = removed.contains(index);\n-\/\/            if (isSelected) {\n-\/\/                removed.remove((Object)index);\n-\/\/            }\n-\/\/\n-\/\/            if (removed.isEmpty()) {\n-\/\/                set(index);\n-\/\/            }\n-\/\/\n-\/\/            bitset.clear();\n-\/\/            bitset.set(index);\n-\/\/            _beginChange();\n-\/\/            if (isSelected) {\n-\/\/                _nextRemove(0, removed);\n-\/\/            } else {\n-\/\/                _nextAdd(0, 1);\n-\/\/                _nextRemove(0, removed);\n-\/\/            }\n-\/\/            _endChange();\n-\/\/        }\n-\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/MultipleSelectionModelBase.java","additions":9,"deletions":40,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -1399,0 +1399,49 @@\n+\n+    \/\/ Test for MultipleSelectionModelBase.SelectedIndicesList#set(int index)\n+    @Test public void testSelectedIndicesList_SetMethod() {\n+        model.clearSelection();\n+        model.setSelectionMode(SelectionMode.MULTIPLE);\n+        model.select(1);\n+\n+        assertTrue(model.isSelected(1));\n+    }\n+\n+    \/\/ Test for MultipleSelectionModelBase.SelectedIndicesList#set(int index, int end, boolean isSet)\n+    @Test public void testSelectedIndicesList_SetRangeMethod() {\n+        model.clearSelection();\n+        model.setSelectionMode(SelectionMode.MULTIPLE);\n+        model.selectAll();\n+\n+        assertEquals(data.size(), model.getSelectedItems().size());\n+    }\n+\n+    \/\/ Test for MultipleSelectionModelBase.SelectedIndicesList#set(int index, int... indices)\n+    @Test public void testSelectedIndicesList_SetIndicesMethod() {\n+        model.clearSelection();\n+        model.setSelectionMode(SelectionMode.MULTIPLE);\n+        model.selectIndices(1, 2, 5);\n+\n+        assertTrue(model.isSelected(1));\n+        assertTrue(model.isSelected(2));\n+        assertTrue(model.isSelected(5));\n+        assertFalse(model.isSelected(0));\n+    }\n+\n+    \/\/ Test for MultipleSelectionModelBase.SelectedIndicesList#clear()\n+    @Test public void testSelectedIndicesList_ClearMethod() {\n+        model.setSelectionMode(SelectionMode.MULTIPLE);\n+        model.selectIndices(1, 2, 5);\n+        model.clearSelection();\n+\n+        assertTrue(model.getSelectedIndices().isEmpty());\n+    }\n+\n+    \/\/ Test for MultipleSelectionModelBase.SelectedIndicesList#clear()\n+    @Test public void testSelectedIndicesList_ClearIndexMethod() {\n+        model.clearSelection();\n+        model.setSelectionMode(SelectionMode.MULTIPLE);\n+        model.selectIndices(1, 2, 5);\n+        model.clearSelection(2);\n+\n+        assertEquals(2, model.getSelectedIndices().size());\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/MultipleSelectionModelImplTest.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"}]}