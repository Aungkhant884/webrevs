{"files":[{"patch":"@@ -5025,0 +5025,3 @@\n+        def doSign = rootProject.hasProperty('codeSignCmd') && IS_RELEASE\n+        def signCmd = doSign ? rootProject.ext.codeSignCmd : null\n+        def signArgs = doSign ? rootProject.ext.codeSignArgs : null\n@@ -5118,0 +5121,17 @@\n+            if (doSign) {\n+                doLast {\n+                    def inputFiles = fileTree(dir: destDirName)\n+                    inputFiles.include(\"*.dll\")\n+                    inputFiles.include(\"*.dylib\")\n+                    inputFiles.include(\"*.so\")\n+                    \/\/ FIXME: if we ever need to sign on Windows platforms, we must\n+                    \/\/ exclude the Microsoft DLLs (VS2017DLLNames and WinSDKDLLNames)\n+\n+                    inputFiles.each { file ->\n+                        exec {\n+                            def cmd = [ signCmd, signArgs, file ].flatten()\n+                            commandLine(cmd)\n+                        }\n+                    }\n+                }\n+            }\n@@ -5172,0 +5192,17 @@\n+            if (doSign && IS_COMPILE_MEDIA) {\n+                doLast {\n+                    def inputFiles = fileTree(dir: destDirName)\n+                    inputFiles.include(\"*.dll\")\n+                    inputFiles.include(\"*.dylib\")\n+                    inputFiles.include(\"*.so\")\n+                    \/\/ FIXME: if we ever need to sign on Windows platforms, we must\n+                    \/\/ exclude the Microsoft DLLs (VS2017DLLNames and WinSDKDLLNames)\n+\n+                    inputFiles.each { file ->\n+                        exec {\n+                            def cmd = [ signCmd, signArgs, file ].flatten()\n+                            commandLine(cmd)\n+                        }\n+                    }\n+                }\n+            }\n@@ -5204,0 +5241,17 @@\n+            if (doSign && IS_COMPILE_WEBKIT) {\n+                doLast {\n+                    def inputFiles = fileTree(dir: destDirName)\n+                    inputFiles.include(\"*.dll\")\n+                    inputFiles.include(\"*.dylib\")\n+                    inputFiles.include(\"*.so\")\n+                    \/\/ FIXME: if we ever need to sign on Windows platforms, we must\n+                    \/\/ exclude the Microsoft DLLs (VS2017DLLNames and WinSDKDLLNames)\n+\n+                    inputFiles.each { file ->\n+                        exec {\n+                            def cmd = [ signCmd, signArgs, file ].flatten()\n+                            commandLine(cmd)\n+                        }\n+                    }\n+                }\n+            }\n","filename":"build.gradle","additions":54,"deletions":0,"binary":false,"changes":54,"status":"modified"}]}