{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -961,2 +961,0 @@\n-                        oldParent.disabledProperty().removeListener(parentDisabledChangedListener);\n-                        oldParent.treeVisibleProperty().removeListener(parentTreeVisibleChangedListener);\n@@ -972,2 +970,0 @@\n-                        newParent.disabledProperty().addListener(parentDisabledChangedListener);\n-                        newParent.treeVisibleProperty().addListener(parentTreeVisibleChangedListener);\n@@ -1012,4 +1008,0 @@\n-    private final InvalidationListener parentDisabledChangedListener = valueModel -> updateDisabled();\n-\n-    private final InvalidationListener parentTreeVisibleChangedListener = valueModel -> updateTreeVisible(true);\n-\n@@ -1921,0 +1913,4 @@\n+\n+                    if (Node.this instanceof Parent parent) {\n+                        parent.getChildren().forEach(Node::updateDisabled);\n+                    }\n@@ -2600,10 +2596,1 @@\n-    protected Node() {\n-        \/\/if (PerformanceTracker.isLoggingEnabled()) {\n-        \/\/    PerformanceTracker.logEvent(\"Node.init for [{this}, id=\\\"{id}\\\"]\");\n-        \/\/}\n-        updateTreeVisible(false);\n-        \/\/if (PerformanceTracker.isLoggingEnabled()) {\n-        \/\/    PerformanceTracker.logEvent(\"Node.postinit \" +\n-        \/\/                                \"for [{this}, id=\\\"{id}\\\"] finished\");\n-        \/\/}\n-    }\n+    protected Node() {}\n@@ -8547,1 +8534,1 @@\n-    private boolean treeVisible;\n+    private boolean treeVisible = true;\n@@ -8562,2 +8549,6 @@\n-            if (Node.this instanceof SubScene) {\n-                Node subSceneRoot = ((SubScene)Node.this).getRoot();\n+            if (Node.this instanceof Parent parent) {\n+                for (Node child : parent.getChildren()) {\n+                    child.updateTreeVisible(true);\n+                }\n+            } else if (Node.this instanceof SubScene subScene) {\n+                Node subSceneRoot = subScene.getRoot();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":13,"deletions":22,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,0 +84,4 @@\n+\n+    public static void setTreeVisible(Node n, boolean visible) {\n+        n.setTreeVisible(visible);\n+    }\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/javafx\/scene\/NodeShim.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -127,2 +127,0 @@\n-        \/\/ Test that a disabled Group affects the disabled property of child nodes\n-\n@@ -2026,0 +2024,42 @@\n+\n+    @Test\n+    public void disabledFlagUpdatesChildrenDisabledFlag() {\n+        var g = new Group();\n+        var n1 = new Rectangle();\n+        var n2 = new Rectangle();\n+        g.getChildren().addAll(n1, n2);\n+        assertFalse(g.isDisabled());\n+        assertFalse(n2.isDisabled());\n+        assertFalse(n2.isDisabled());\n+\n+        g.setDisable(true);\n+        assertTrue(g.isDisabled());\n+        assertTrue(n2.isDisabled());\n+        assertTrue(n2.isDisabled());\n+\n+        g.setDisable(false);\n+        assertFalse(g.isDisabled());\n+        assertFalse(n2.isDisabled());\n+        assertFalse(n2.isDisabled());\n+    }\n+\n+    @Test\n+    public void treeVisibleFlagUpdatesChildrenTreeVisibleFlag() {\n+        var g = new Group();\n+        var n1 = new Rectangle();\n+        var n2 = new Rectangle();\n+        g.getChildren().addAll(n1, n2);\n+        assertTrue(NodeHelper.isTreeVisible(g));\n+        assertTrue(NodeHelper.isTreeVisible(n1));\n+        assertTrue(NodeHelper.isTreeVisible(n2));\n+\n+        NodeShim.setTreeVisible(g, false);\n+        assertFalse(NodeHelper.isTreeVisible(g));\n+        assertFalse(NodeHelper.isTreeVisible(n1));\n+        assertFalse(NodeHelper.isTreeVisible(n2));\n+\n+        NodeShim.setTreeVisible(g, true);\n+        assertTrue(NodeHelper.isTreeVisible(g));\n+        assertTrue(NodeHelper.isTreeVisible(n1));\n+        assertTrue(NodeHelper.isTreeVisible(n2));\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/NodeTest.java","additions":43,"deletions":3,"binary":false,"changes":46,"status":"modified"}]}