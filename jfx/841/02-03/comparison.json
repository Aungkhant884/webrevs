{"files":[{"patch":"@@ -987,1 +987,1 @@\n-                    updateTreeVisible(true, false);\n+                    updateTreeVisible(true);\n@@ -1371,1 +1371,1 @@\n-                        updateTreeVisible(false, false);\n+                        updateTreeVisible(false);\n@@ -2598,10 +2598,1 @@\n-    protected Node() {\n-        \/\/if (PerformanceTracker.isLoggingEnabled()) {\n-        \/\/    PerformanceTracker.logEvent(\"Node.init for [{this}, id=\\\"{id}\\\"]\");\n-        \/\/}\n-        updateTreeVisible(false, true);\n-        \/\/if (PerformanceTracker.isLoggingEnabled()) {\n-        \/\/    PerformanceTracker.logEvent(\"Node.postinit \" +\n-        \/\/                                \"for [{this}, id=\\\"{id}\\\"] finished\");\n-        \/\/}\n-    }\n+    protected Node() {}\n@@ -6961,1 +6952,1 @@\n-                                oldClip.updateTreeVisible(false, false);\n+                                oldClip.updateTreeVisible(false);\n@@ -6967,1 +6958,1 @@\n-                                newClip.updateTreeVisible(true, false);\n+                                newClip.updateTreeVisible(true);\n@@ -8527,1 +8518,1 @@\n-    private void updateTreeVisible(boolean parentChanged, boolean underInitialization) {\n+    private void updateTreeVisible(boolean parentChanged) {\n@@ -8542,1 +8533,1 @@\n-        setTreeVisible(isTreeVisible, underInitialization);\n+        setTreeVisible(isTreeVisible);\n@@ -8545,1 +8536,1 @@\n-    private boolean treeVisible;\n+    private boolean treeVisible = true;\n@@ -8549,9 +8540,0 @@\n-        setTreeVisible(value, false);\n-    }\n-\n-    \/**\n-     * When this method is called from the initializer of this class, the {@code underInitialization}\n-     * flag must be set. In this case, the calls to overridden methods are elided to prevent leaking\n-     * the partially initialized object instance to subclasses.\n-     *\/\n-    private void setTreeVisible(boolean value, boolean underInitialization) {\n@@ -8563,1 +8545,1 @@\n-                getClip().updateTreeVisible(true, false);\n+                getClip().updateTreeVisible(true);\n@@ -8569,7 +8551,3 @@\n-\n-            \/\/ We can only treat this node as an instance of a derived class after the initializer\n-            \/\/ has run to completion, as otherwise several methods of derived classes return 'null'.\n-            if (!underInitialization) {\n-                if (Node.this instanceof SubScene subScene) {\n-                    Node subSceneRoot = subScene.getRoot();\n-                    subSceneRoot.setTreeVisible(value && subSceneRoot.isVisible(), false);\n+            if (Node.this instanceof Parent parent) {\n+                for (Node child : parent.getChildren()) {\n+                    child.updateTreeVisible(true);\n@@ -8577,5 +8555,6 @@\n-\n-                if (Node.this instanceof Parent parent) {\n-                    for (Node child : parent.getChildren()) {\n-                        child.updateTreeVisible(true, false);\n-                    }\n+            } else if (Node.this instanceof SubScene subScene) {\n+                Node subSceneRoot = subScene.getRoot();\n+                if (subSceneRoot != null) {\n+                    \/\/ SubScene.getRoot() is only null if it's constructor\n+                    \/\/ has not finished.\n+                    subSceneRoot.setTreeVisible(value && subSceneRoot.isVisible());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":18,"deletions":39,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -85,4 +85,0 @@\n-    public static boolean isTreeVisible(Node n) {\n-        return n.isTreeVisible();\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/javafx\/scene\/NodeShim.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2047,3 +2047,3 @@\n-        assertTrue(NodeShim.isTreeVisible(g));\n-        assertTrue(NodeShim.isTreeVisible(n1));\n-        assertTrue(NodeShim.isTreeVisible(n2));\n+        assertTrue(NodeHelper.isTreeVisible(g));\n+        assertTrue(NodeHelper.isTreeVisible(n1));\n+        assertTrue(NodeHelper.isTreeVisible(n2));\n@@ -2052,3 +2052,3 @@\n-        assertFalse(NodeShim.isTreeVisible(g));\n-        assertFalse(NodeShim.isTreeVisible(n1));\n-        assertFalse(NodeShim.isTreeVisible(n2));\n+        assertFalse(NodeHelper.isTreeVisible(g));\n+        assertFalse(NodeHelper.isTreeVisible(n1));\n+        assertFalse(NodeHelper.isTreeVisible(n2));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/NodeTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}