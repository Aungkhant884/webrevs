{"files":[{"patch":"@@ -233,1 +233,1 @@\n-            if constexpr (std::is_same<RuleFeatureType, RuleFeatureWithInvalidationSelector>::value) {\n+            \/*if constexpr (std::is_same<RuleFeatureType, RuleFeatureWithInvalidationSelector>::value) {\n@@ -236,1 +236,32 @@\n-            }\n+            }*\/\n+        }\n+        auto invalidationRuleSets = makeUnique<Vector<InvalidationRuleSet>>();\n+        for (unsigned i = 0; i < matchElementArray.size(); ++i) {\n+            if (matchElementArray[i])\n+                invalidationRuleSets->append({ static_cast<MatchElement>(i), *matchElementArray[i], WTFMove(invalidationSelectorArray[i]) });\n+        }\n+        return invalidationRuleSets;\n+    }).iterator->value.get();\n+}\n+\n+template<typename KeyType, typename Hash, typename HashTraits>\n+static Vector<InvalidationRuleSet>* ensureInvalidationRuleSets(const KeyType& key, HashMap<KeyType, std::unique_ptr<Vector<InvalidationRuleSet>>, Hash, HashTraits>& ruleSetMap, const HashMap<KeyType, std::unique_ptr<Vector<RuleFeatureWithInvalidationSelector>>, Hash, HashTraits>& ruleFeatures)\n+{\n+    return ruleSetMap.ensure(key, [&]() -> std::unique_ptr<Vector<InvalidationRuleSet>> {\n+        auto* features = ruleFeatures.get(key);\n+        if (!features)\n+            return nullptr;\n+\n+        std::array<RefPtr<RuleSet>, matchElementCount> matchElementArray;\n+        std::array<Vector<const CSSSelector*>, matchElementCount> invalidationSelectorArray;\n+        for (auto& feature : *features) {\n+            auto arrayIndex = static_cast<unsigned>(*feature.matchElement);\n+            auto& ruleSet = matchElementArray[arrayIndex];\n+            if (!ruleSet)\n+                ruleSet = RuleSet::create();\n+            ruleSet->addRule(*feature.styleRule, feature.selectorIndex, feature.selectorListIndex);\n+            \/\/ TODO : Visual studio 2017 doesn't support if constexpr in lamda, once updated to 2019, remove this function and uncomment above function's code\n+            \/\/if constexpr (std::is_same<RuleFeatureType, RuleFeatureWithInvalidationSelector>::value) {\n+                if (feature.invalidationSelector)\n+                    invalidationSelectorArray[arrayIndex].append(feature.invalidationSelector);\n+            \/\/}\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/style\/StyleScopeRuleSets.cpp","additions":33,"deletions":2,"binary":false,"changes":35,"status":"modified"}]}