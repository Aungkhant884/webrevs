{"files":[{"patch":"@@ -302,0 +302,4 @@\n+#ifdef GSTREAMER_LITE\n+#include \"gst\/glib-compat-private.h\"\n+#endif \/\/ GSTREAMER_LITE\n+\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/gstreamer-lite\/gst-plugins-base\/gst-libs\/gst\/video\/gstvideodecoder.c","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -110,0 +110,4 @@\n+#ifdef GSTREAMER_LITE\n+#include \"gst\/glib-compat-private.h\"\n+#endif \/\/ GSTREAMER_LITE\n+\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/gstreamer-lite\/gst-plugins-base\/gst-libs\/gst\/video\/gstvideoencoder.c","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -13458,0 +13458,31 @@\n+#if defined(GSTREAMER_LITE) && defined(LINUX)\n+\/\/ Revert https:\/\/gitlab.freedesktop.org\/gstreamer\/gstreamer\/-\/commit\/0429c24637f72eaa6b98c06f090d603f298e0f6a,\n+\/\/ so we can run with older GLib versions.\n+\/* g_ptr_array_find_with_equal_func is available since 2.54,\n+ * replacement until we can depend unconditionally on the real one in GLib *\/\n+#ifndef g_ptr_array_find_with_equal_func\n+#define g_ptr_array_find_with_equal_func qtdemux_ptr_array_find_with_equal_func\n+static gboolean\n+qtdemux_ptr_array_find_with_equal_func (GPtrArray * haystack,\n+    gconstpointer needle, GEqualFunc equal_func, guint * index_)\n+{\n+  guint i;\n+\n+  g_return_val_if_fail (haystack != NULL, FALSE);\n+\n+  if (equal_func == NULL)\n+    equal_func = g_direct_equal;\n+\n+  for (i = 0; i < haystack->len; i++) {\n+    if (equal_func (g_ptr_array_index (haystack, i), needle)) {\n+      if (index_ != NULL)\n+        *index_ = i;\n+      return TRUE;\n+    }\n+  }\n+\n+  return FALSE;\n+}\n+#endif \/\/ g_ptr_array_find_with_equal_func\n+#endif \/\/ GSTREAMER_LITE and LINUX\n+\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/gstreamer-lite\/gst-plugins-good\/gst\/isomp4\/qtdemux.c","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -30,0 +30,17 @@\n+#ifdef GSTREAMER_LITE\n+#ifdef LINUX\n+\/\/ Redefine GLIB_CHECK_VERSION.\n+\/\/ On Linux we using GLIB_VERSION_MIN_REQUIRED=GLIB_VERSION_2_48 and\n+\/\/ GLIB_VERSION_MAX_ALLOWED=GLIB_VERSION_2_48, so we can build and run with\n+\/\/ glib starting with 2.48. These defines has no effect on GLIB_CHECK_VERSION\n+\/\/ and this macro is evaluated based on GLib version we using during build, so\n+\/\/ we need to change it to pretend that we building with 2.48\n+#undef GLIB_CHECK_VERSION\n+#define GLIB_CHECK_VERSION(major,minor,micro)    \\\n+    (2 > (major) || \\\n+     (2 == (major) && 48 > (minor)) || \\\n+     (2 == (major) && 48 == (minor) && \\\n+      0 >= (micro)))\n+#endif \/\/ LINUX\n+#endif \/\/ GSTREAMER_LITE\n+\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/gstreamer-lite\/gstreamer\/gst\/glib-compat-private.h","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -455,0 +455,1 @@\n+#if !defined(GSTREAMER_LITE) || (defined(GSTREAMER_LITE) && !defined(LINUX))\n@@ -634,0 +635,1 @@\n+#endif \/\/ GSTREAMER_LITE\n@@ -648,0 +650,1 @@\n+#if !defined(GSTREAMER_LITE) || (defined(GSTREAMER_LITE) && !defined(LINUX))\n@@ -656,0 +659,65 @@\n+#else \/\/ GSTREAMER_LITE\n+\/\/ Revert https:\/\/gitlab.freedesktop.org\/gstreamer\/gstreamer\/-\/commit\/aadf84837b2c0397b02ffb39f704ef4649482a44,\n+\/\/ so we can support older GLib\n+GstElement *\n+gst_element_factory_create (GstElementFactory * factory, const gchar * name)\n+{\n+  GstElement *element;\n+  GstElementClass *oclass;\n+  GstElementFactory *newfactory;\n+\n+  g_return_val_if_fail (factory != NULL, NULL);\n+\n+  newfactory =\n+      GST_ELEMENT_FACTORY (gst_plugin_feature_load (GST_PLUGIN_FEATURE\n+          (factory)));\n+\n+  if (newfactory == NULL)\n+    goto load_failed;\n+\n+  factory = newfactory;\n+\n+  if (name)\n+    GST_INFO (\"creating element \\\"%s\\\" named \\\"%s\\\"\",\n+        GST_OBJECT_NAME (factory), GST_STR_NULL (name));\n+  else\n+    GST_INFO (\"creating element \\\"%s\\\"\", GST_OBJECT_NAME (factory));\n+\n+  if (factory->type == 0)\n+    goto no_type;\n+\n+  \/* create an instance of the element, cast so we don't assert on NULL\n+   * also set name as early as we can\n+   *\/\n+  if (name)\n+    element = g_object_new (factory->type, \"name\", name, NULL);\n+  else\n+    element = g_object_new (factory->type, NULL);\n+  if (G_UNLIKELY (element == NULL))\n+    goto no_element;\n+\n+  \/* fill in the pointer to the factory in the element class. The\n+   * class will not be unreffed currently.\n+   * Be thread safe as there might be 2 threads creating the first instance of\n+   * an element at the same moment\n+   *\/\n+  oclass = GST_ELEMENT_GET_CLASS (element);\n+  if (!g_atomic_pointer_compare_and_exchange (&oclass->elementfactory,\n+          (GstElementFactory *) NULL, factory))\n+    gst_object_unref (factory);\n+  else\n+    \/* This ref will never be dropped as the class is never destroyed *\/\n+    GST_OBJECT_FLAG_SET (factory, GST_OBJECT_FLAG_MAY_BE_LEAKED);\n+\n+  if (!g_object_is_floating ((GObject *) element)) {\n+    \/* The reference we receive here should be floating, but we can't force\n+     * it at our level. Simply raise a critical to make the issue obvious to bindings\n+     * users \/ developers *\/\n+    g_critical (\"The created element should be floating, \"\n+        \"this is probably caused by faulty bindings\");\n+  }\n+\n+\n+  GST_DEBUG (\"created element \\\"%s\\\"\", GST_OBJECT_NAME (factory));\n+\n+  return element;\n@@ -657,0 +725,23 @@\n+  \/* ERRORS *\/\n+load_failed:\n+  {\n+    GST_WARNING_OBJECT (factory,\n+        \"loading plugin containing feature %s returned NULL!\", name);\n+    return NULL;\n+  }\n+no_type:\n+  {\n+    GST_WARNING_OBJECT (factory, \"factory has no type\");\n+    gst_object_unref (factory);\n+    return NULL;\n+  }\n+no_element:\n+  {\n+    GST_WARNING_OBJECT (factory, \"could not create element\");\n+    gst_object_unref (factory);\n+    return NULL;\n+  }\n+}\n+#endif \/\/ !GSTREAMER_LITE and !LINUX\n+\n+#if !defined(GSTREAMER_LITE) || (defined(GSTREAMER_LITE) && !defined(LINUX))\n@@ -793,0 +884,1 @@\n+#endif \/\/ GSTREAMER_LITE\n@@ -808,0 +900,1 @@\n+#if !defined(GSTREAMER_LITE) || (defined(GSTREAMER_LITE) && !defined(LINUX))\n@@ -817,0 +910,42 @@\n+#else \/\/ GSTREAMER_LITE\n+\/\/ Revert https:\/\/gitlab.freedesktop.org\/gstreamer\/gstreamer\/-\/commit\/aadf84837b2c0397b02ffb39f704ef4649482a44,\n+\/\/ so we can support older GLib.\n+GstElement *\n+gst_element_factory_make (const gchar * factoryname, const gchar * name)\n+{\n+  GstElementFactory *factory;\n+  GstElement *element;\n+\n+  g_return_val_if_fail (factoryname != NULL, NULL);\n+  g_return_val_if_fail (gst_is_initialized (), NULL);\n+\n+  GST_LOG (\"gstelementfactory: make \\\"%s\\\" \\\"%s\\\"\",\n+      factoryname, GST_STR_NULL (name));\n+\n+  factory = gst_element_factory_find (factoryname);\n+  if (factory == NULL)\n+    goto no_factory;\n+\n+  GST_LOG_OBJECT (factory, \"found factory %p\", factory);\n+  element = gst_element_factory_create (factory, name);\n+  if (element == NULL)\n+    goto create_failed;\n+\n+  gst_object_unref (factory);\n+\n+  return element;\n+\n+  \/* ERRORS *\/\n+no_factory:\n+  {\n+    GST_WARNING (\"no such element factory \\\"%s\\\"!\", factoryname);\n+    return NULL;\n+  }\n+create_failed:\n+  {\n+    GST_INFO_OBJECT (factory, \"couldn't create instance!\");\n+    gst_object_unref (factory);\n+    return NULL;\n+  }\n+}\n+#endif \/\/ GSTREAMER_LITE\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/gstreamer-lite\/gstreamer\/gst\/gstelementfactory.c","additions":135,"deletions":0,"binary":false,"changes":135,"status":"modified"},{"patch":"@@ -86,0 +86,1 @@\n+#if !defined(GSTREAMER_LITE) || (defined(GSTREAMER_LITE) && !defined(LINUX))\n@@ -95,0 +96,1 @@\n+#endif \/\/ GSTREAMER_LITE\n@@ -98,0 +100,1 @@\n+#if !defined(GSTREAMER_LITE) || (defined(GSTREAMER_LITE) && !defined(LINUX))\n@@ -107,0 +110,1 @@\n+#endif \/\/ GSTREAMER_LITE\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/gstreamer-lite\/gstreamer\/gst\/gstelementfactory.h","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -128,0 +128,4 @@\n+#ifdef GSTREAMER_LITE\n+#include \"gst\/glib-compat-private.h\"\n+#endif \/\/ GSTREAMER_LITE\n+\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/gstreamer-lite\/gstreamer\/gst\/gstinfo.c","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+         -DGLIB_VERSION_MIN_REQUIRED=GLIB_VERSION_2_48 \\\n+         -DGLIB_VERSION_MAX_ALLOWED=GLIB_VERSION_2_48 \\\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/projects\/linux\/avplugin\/Makefile","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+         -Werror=deprecated-declarations \\\n@@ -33,0 +34,2 @@\n+         -DGLIB_VERSION_MIN_REQUIRED=GLIB_VERSION_2_48 \\\n+         -DGLIB_VERSION_MAX_ALLOWED=GLIB_VERSION_2_48 \\\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/projects\/linux\/fxplugins\/Makefile","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+        -Werror=deprecated-declarations \\\n@@ -55,0 +56,2 @@\n+        -DGLIB_VERSION_MIN_REQUIRED=GLIB_VERSION_2_48 \\\n+        -DGLIB_VERSION_MAX_ALLOWED=GLIB_VERSION_2_48 \\\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/projects\/linux\/gstreamer-lite\/Makefile","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,3 @@\n+         -DGLIB_VERSION_MIN_REQUIRED=GLIB_VERSION_2_48 \\\n+         -DGLIB_VERSION_MAX_ALLOWED=GLIB_VERSION_2_48 \\\n+         -Werror=deprecated-declarations \\\n","filename":"modules\/javafx.media\/src\/main\/native\/jfxmedia\/projects\/linux\/Makefile","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}