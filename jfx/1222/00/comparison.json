{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.text.BreakIterator;\n@@ -583,16 +584,7 @@\n-        Bounds caretBounds = caretPath.getLayoutBounds();\n-        if (caretPath.getElements().size() == 4) {\n-            \/\/ The caret is split\n-            \/\/ TODO: Find a better way to get the primary caret position\n-            \/\/ instead of depending on the internal implementation.\n-            \/\/ See RT-25465.\n-            caretBounds = new Path(caretPath.getElements().get(0), caretPath.getElements().get(1)).getLayoutBounds();\n-        }\n-        double hitX = moveRight ? caretBounds.getMaxX() : caretBounds.getMinX();\n-        double hitY = (caretBounds.getMinY() + caretBounds.getMaxY()) \/ 2;\n-        HitInfo hit = textNode.hitTest(new Point2D(hitX, hitY));\n-        boolean leading = hit.isLeading();\n-        Path charShape = new Path(textNode.rangeShape(hit.getCharIndex(), hit.getCharIndex() + 1));\n-        if ((moveRight && charShape.getLayoutBounds().getMaxX() > caretBounds.getMaxX()) ||\n-                (!moveRight && charShape.getLayoutBounds().getMinX() < caretBounds.getMinX())) {\n-            leading = !leading;\n+        TextField textField = getSkinnable();\n+        int pos = textField.getCaretPosition();\n+        BreakIterator bi = BreakIterator.getCharacterInstance();\n+        bi.setText(textField.getText());\n+        int next = moveRight ? bi.following(pos) : bi.preceding(pos);\n+        if (next != BreakIterator.DONE) {\n+            textField.selectRange(next, next);\n@@ -600,1 +592,0 @@\n-        positionCaret(hit.getInsertionIndex(), leading, false);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TextFieldSkin.java","additions":8,"deletions":17,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.scene;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import javafx.application.Application;\n+import javafx.scene.input.KeyCode;\n+import javafx.application.Platform;\n+import javafx.geometry.NodeOrientation;\n+import javafx.scene.control.TextField;\n+import javafx.scene.Group;\n+import javafx.scene.robot.Robot;\n+import javafx.scene.Scene;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import test.util.Util;\n+\n+public class TextFieldCursorMovementTest {\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n+    static CountDownLatch caretPositionLatch;\n+    static Robot robot;\n+    static TextField textField;\n+\n+    static volatile Stage stage;\n+    static volatile Scene scene;\n+\n+    static int curIndex = 0;\n+    static int prevIndex = -1;\n+\n+    static final int SCENE_WIDTH = 250;\n+    static final int SCENE_HEIGHT = SCENE_WIDTH;\n+\n+    private void moveCursorToLeft() {\n+        Util.runAndWait(() -> {\n+            robot.keyType(KeyCode.LEFT);\n+        });\n+    }\n+\n+    private void addTextFieldContent(String text, boolean isRtl) {\n+        Util.runAndWait(() -> {\n+            textField.setText(text);\n+            if (isRtl) {\n+                textField.setNodeOrientation(NodeOrientation.RIGHT_TO_LEFT);\n+            }\n+        });\n+    }\n+\n+    \/\/JDK-8242616\n+    @Test\n+    public void testCursorMovementInRTLText() throws Exception {\n+        String str = \"Aracbic يشترشسيرشي\";\n+        addTextFieldContent(str, true);\n+\n+        for (int i =0; i< str.length(); i++) {\n+            moveCursorToLeft();\n+            Assert.assertNotEquals(curIndex, prevIndex);\n+            prevIndex = curIndex;\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void initFX() throws Exception {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void exit() {\n+        Util.shutdown(stage);\n+    }\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) {\n+            robot = new Robot();\n+            stage = primaryStage;\n+\n+            textField = new TextField();\n+            textField.caretPositionProperty().addListener((event) -> {\n+                curIndex = textField.getCaretPosition();\n+            });\n+            Group group = new Group(textField);\n+            scene = new Scene(group, SCENE_WIDTH, SCENE_HEIGHT);\n+            stage.setScene(scene);\n+            stage.initStyle(StageStyle.UNDECORATED);\n+            stage.setAlwaysOnTop(true);\n+            stage.setOnShown(event -> Platform.runLater(startupLatch::countDown));\n+            stage.show();\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TextFieldCursorMovementTest.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"}]}