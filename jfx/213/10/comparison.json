{"files":[{"patch":"@@ -445,0 +445,5 @@\n+    public void setClip(int cx, int cy, int cw, int ch, WCImage maskImage) {\n+        setClip(new Rectangle(cx, cy, cw, ch));\n+        state.setClipMaskImage(maskImage);\n+    }\n+\n@@ -505,0 +510,45 @@\n+    private void fillOrDrawShapeMasked(Graphics g, Shape shape, Paint paint, BasicStroke stroke, boolean isFill) {\n+\n+        FilterContext filterContext = getFilterContext(g);\n+        Rectangle clipRectangle = getClipRectNoClone();\n+\n+        PrDrawable imagePrDrawable = (PrDrawable)Effect.getCompatibleImage(filterContext,\n+                g.getRenderTarget().getContentWidth(), g.getRenderTarget().getContentHeight());\n+        Graphics g1 = imagePrDrawable.createGraphics();\n+        state.apply(g1);\n+        g1.setPaint(paint);\n+        if(stroke != null) {\n+            g1.setStroke(stroke);\n+        }\n+        if (isFill) {\n+            g1.fill(shape);\n+        } else {\n+            g1.draw(shape);\n+        }\n+        RTImage maskImage = (RTImage) (state.getClipMaskImageNoClone());\n+        Image nativeMaskImage = Image.fromByteBgraPreData(maskImage.getPixelBuffer(),\n+                maskImage.getWidth(), maskImage.getHeight(), 0, maskImage.getPixelScale());\n+        Texture maskTexture = g.getResourceFactory().createTexture(PixelFormat.BYTE_BGRA_PRE,\n+                Texture.Usage.STATIC, Texture.WrapMode.CLAMP_NOT_NEEDED,\n+                nativeMaskImage.getWidth(), nativeMaskImage.getHeight());\n+        maskTexture.update(nativeMaskImage, 0, 0, nativeMaskImage.getWidth(),\n+                nativeMaskImage.getHeight());\n+        PrDrawable maskPrDrawable = (PrDrawable)Effect.getCompatibleImage(filterContext,\n+                g.getRenderTarget().getContentWidth(), g.getRenderTarget().getContentHeight());\n+        Graphics g2 = maskPrDrawable.createGraphics();\n+        g2.drawTexture(maskTexture, clipRectangle.x, clipRectangle.y, clipRectangle.x + clipRectangle.width,\n+                clipRectangle.y + clipRectangle.height, 0, 0, nativeMaskImage.getWidth(), nativeMaskImage.getHeight());\n+        maskTexture.dispose();\n+\n+        Blend blend = new Blend(Blend.Mode.SRC_IN,\n+                new PassThrough(maskPrDrawable, g.getRenderTarget().getContentWidth(), g.getRenderTarget().getContentHeight()),\n+                new PassThrough(imagePrDrawable, g.getRenderTarget().getContentWidth(), g.getRenderTarget().getContentHeight()));\n+        Affine3D tx = new Affine3D(g.getTransformNoClone());\n+        g.setTransform(BaseTransform.IDENTITY_TRANSFORM);\n+        PrEffectHelper.render(blend, g, 0, 0, null);\n+        g.setTransform(tx);\n+\n+        Effect.releaseCompatibleImage(filterContext, imagePrDrawable);\n+        Effect.releaseCompatibleImage(filterContext, maskPrDrawable);\n+    }\n+\n@@ -526,0 +576,2 @@\n+                } else if (state.getClipMaskImageNoClone() != null) {\n+                    fillOrDrawShapeMasked(g, new RoundRectangle2D(x, y, w, h, 0, 0), paint, null, true);\n@@ -563,0 +615,2 @@\n+                } else if (state.getClipMaskImageNoClone() != null) {\n+                    fillOrDrawShapeMasked(g, new RoundRectangle2D(x, y, w, h, arcW, arcH), paint, null, true);\n@@ -1190,0 +1244,1 @@\n+        private WCImage clipMaskImage;\n@@ -1215,0 +1270,1 @@\n+            setClipMaskImage(state.getClipMaskImageNoClone());\n@@ -1249,0 +1305,8 @@\n+        private void setClipMaskImage(WCImage image) {\n+            this.clipMaskImage = image;\n+        }\n+\n+        private WCImage getClipMaskImageNoClone() {\n+            return clipMaskImage;\n+        }\n+\n@@ -1741,2 +1805,7 @@\n-                g.setPaint(paint);\n-                g.drawRect(x, y, w, h);\n+\n+                if (state.getClipMaskImageNoClone() != null) {\n+                    fillOrDrawShapeMasked(g, new RoundRectangle2D(x, y, w, h, 0, 0), paint, stroke, false);\n+                } else {\n+                    g.setPaint(paint);\n+                    g.drawRect(x, y, w, h);\n+                }\n@@ -1767,0 +1836,1 @@\n+                        g.setStroke(stroke);\n@@ -1771,3 +1841,6 @@\n-                        g.setPaint(paint);\n-                        g.setStroke(stroke);\n-                        g.draw(p2d);\n+                        if (state.getClipMaskImageNoClone() != null) {\n+                            fillOrDrawShapeMasked(g, p2d, paint, stroke, false);\n+                        } else {\n+                            g.setPaint(paint);\n+                            g.draw(p2d);\n+                        }\n@@ -1798,0 +1871,2 @@\n+                    } else if (state.getClipMaskImageNoClone() != null) {\n+                        fillOrDrawShapeMasked(g, p2d, paint, null, true);\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/javafx\/webkit\/prism\/WCGraphicsPrismContext.java","additions":80,"deletions":5,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+    @Native public final static int SETCLIP_IIII_MASK      = 57;\n@@ -236,0 +237,8 @@\n+                case SETCLIP_IIII_MASK:\n+                    gc.setClip(\n+                        buf.getInt(),\n+                        buf.getInt(),\n+                        buf.getInt(),\n+                        buf.getInt(),\n+                        (WCImage) gm.getRef(buf.getInt()));\n+                    break;\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/graphics\/GraphicsDecoder.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -101,0 +101,1 @@\n+    public abstract void setClip(int cx, int cy, int cw, int ch, WCImage maskImage);\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/graphics\/WCGraphicsContext.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -307,0 +307,7 @@\n+    @Override\n+    public void setClip(int cx, int cy, int cw, int ch, WCImage maskImage) {\n+        logger.resumeCount(\"SETCLIP_IIII_MASK\");\n+        gc.setClip(cx, cy, cw, ch, maskImage);\n+        logger.suspendCount(\"SETCLIP_IIII_MASK\");\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/perf\/WCGraphicsPerfLogger.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+#include \"ImageBuffer.h\"\n@@ -234,0 +235,1 @@\n+            setCTM(m_state.transform);\n@@ -258,1 +260,1 @@\n-void GraphicsContext::clipToImageBuffer(ImageBuffer&, const FloatRect&)\n+void GraphicsContext::clipToImageBuffer(ImageBuffer& imageBuffer, const FloatRect& rect)\n@@ -260,1 +262,9 @@\n-    notImplemented();\n+    if (paintingDisabled())\n+        return;\n+\n+    RefPtr<Image> copiedImage = imageBuffer.copyImage(BackingStoreCopy::CopyBackingStore, PreserveResolution::Yes);\n+    NativeImagePtr nativeImageObject = copiedImage->nativeImageForCurrentFrame(this);\n+    m_state.clipBounds.intersect(m_state.transform.mapRect(rect));\n+    platformContext()->rq().freeSpace(24)\n+    << (jint)com_sun_webkit_graphics_GraphicsDecoder_SETCLIP_IIII_MASK\n+    << (jint)rect.x() << (jint)rect.y() << (jint)rect.width() << (jint)rect.height() << nativeImageObject;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/java\/GraphicsContextJava.cpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -140,0 +140,114 @@\n+\n+    @Test public void testSVGRectRenderingWithMask() {\n+        loadContent(\n+                    \"<html>\\n\" +\n+                    \"  <body style='margin: 0px 0px;'>\\n\" +\n+                    \"    <svg width='200' height='200'>\\n\" +\n+                    \"      <defs>\\n\" +\n+                    \"        <linearGradient id='Gradient'>\\n\" +\n+                    \"          <stop offset='0' stop-color='white' stop-opacity='0' \/>\\n\" +\n+                    \"          <stop offset='1' stop-color='white' stop-opacity='1' \/>\\n\" +\n+                    \"        <\/linearGradient>\\n\" +\n+                    \"        <mask id='Mask'>\\n\" +\n+                    \"          <rect x='0' y='0' width='200' height='200' fill='url(#Gradient)' \/>\\n\" +\n+                    \"        <\/mask>\\n\" +\n+                    \"      <\/defs>\\n\" +\n+                    \"      <rect x='0' y='0' width='200' height='200' fill='green' \/>\\n\" +\n+                    \"      <rect x='0' y='0' width='200' height='200' fill='red' mask='url(#Mask)' \/>\\n\" +\n+                    \"    <\/svg>\\n\" +\n+                    \"  <\/body>\\n\" +\n+                    \"<\/html>\"\n+        );\n+        submit(() -> {\n+            final WebPage webPage = WebEngineShim.getPage(getEngine());\n+            assertNotNull(webPage);\n+            final BufferedImage img = WebPageShim.paint(webPage, 0, 0, 200, 200);\n+            assertNotNull(img);\n+\n+            final Color pixelAt0x0 = new Color(img.getRGB(0, 0), true);\n+            assertTrue(\"Color should be green:\" + pixelAt0x0, isColorsSimilar(new Color(0, 128, 0), pixelAt0x0, 5));\n+            final Color pixelAt0x199 = new Color(img.getRGB(0, 199), true);\n+            assertTrue(\"Color should be green:\" + pixelAt0x199, isColorsSimilar(new Color(0, 128, 0), pixelAt0x199, 5));\n+\n+            final Color pixelAt100x0 = new Color(img.getRGB(100, 0), true);\n+            assertTrue(\"Color should be almost Cinnamon:\" + pixelAt100x0, isColorsSimilar(new Color(128, 64, 0), pixelAt100x0, 20));\n+            final Color pixelAt100x199 = new Color(img.getRGB(100, 199), true);\n+            assertTrue(\"Color should be almost Cinnamon:\" + pixelAt100x199, isColorsSimilar(new Color(128, 64, 0), pixelAt100x199, 20));\n+\n+            final Color pixelAt199x0 = new Color(img.getRGB(199, 0), true);\n+            assertTrue(\"Color should be red:\" + pixelAt199x0, isColorsSimilar(Color.RED, pixelAt199x0, 5));\n+            final Color pixelAt199x199 = new Color(img.getRGB(199, 199), true);\n+            assertTrue(\"Color should be red:\" + pixelAt199x199, isColorsSimilar(Color.RED, pixelAt199x199, 5));\n+        });\n+    }\n+\n+    @Test public void testSVGRoundedRectRenderingWithMask() {\n+        loadContent(\n+                    \"<html>\\n\" +\n+                    \"  <body style='margin: 0px 0px;'>\\n\" +\n+                    \"    <svg width='200' height='200'>\\n\" +\n+                    \"      <defs>\\n\" +\n+                    \"        <linearGradient id='Gradient'>\\n\" +\n+                    \"          <stop offset='0' stop-color='white' stop-opacity='0' \/>\\n\" +\n+                    \"          <stop offset='1' stop-color='white' stop-opacity='1' \/>\\n\" +\n+                    \"        <\/linearGradient>\\n\" +\n+                    \"        <mask id='Mask'>\\n\" +\n+                    \"          <rect x='0' y='0' width='200' height='200' fill='url(#Gradient)' \/>\\n\" +\n+                    \"        <\/mask>\\n\" +\n+                    \"      <\/defs>\\n\" +\n+                    \"      <rect x='0' y='0' width='200' height='200' rx='20' ry='20' fill='green' \/>\\n\" +\n+                    \"      <rect x='0' y='0' width='200' height='200' rx='20' ry='20' fill='red' mask='url(#Mask)' \/>\\n\" +\n+                    \"    <\/svg>\\n\" +\n+                    \"  <\/body>\\n\" +\n+                    \"<\/html>\"\n+        );\n+        submit(() -> {\n+            final WebPage webPage = WebEngineShim.getPage(getEngine());\n+            assertNotNull(webPage);\n+            final BufferedImage img = WebPageShim.paint(webPage, 0, 0, 200, 200);\n+            assertNotNull(img);\n+\n+            final Color pixelAt50x50 = new Color(img.getRGB(50, 50), true);\n+            assertTrue(\"Color should be green:\" + pixelAt50x50, isColorsSimilar(new Color(65, 95, 0), pixelAt50x50, 5));\n+            final Color pixelAt50x150 = new Color(img.getRGB(50, 150), true);\n+            assertTrue(\"Color should be green:\" + pixelAt50x150, isColorsSimilar(new Color(65, 95, 0), pixelAt50x150, 5));\n+\n+            final Color pixelAt150x50 = new Color(img.getRGB(150, 50), true);\n+            assertTrue(\"Color should be almost red:\" + pixelAt150x50, isColorsSimilar(new Color(192, 32, 0), pixelAt150x50, 20));\n+            final Color pixelAt150x150 = new Color(img.getRGB(150, 150), true);\n+            assertTrue(\"Color should be almost red:\" + pixelAt150x150, isColorsSimilar(new Color(192, 32, 0), pixelAt150x150, 20));\n+        });\n+    }\n+\n+    @Test public void testSVGPathRenderingWithMask() {\n+        loadContent(\n+                    \"<html>\\n\" +\n+                    \"  <body style='margin: 0px 0px;'>\\n\" +\n+                    \"    <svg width='200' height='200'>\\n\" +\n+                    \"      <defs>\\n\" +\n+                    \"        <linearGradient id='Gradient'>\\n\" +\n+                    \"          <stop offset='0' stop-color='white' stop-opacity='0' \/>\\n\" +\n+                    \"          <stop offset='1' stop-color='white' stop-opacity='1' \/>\\n\" +\n+                    \"        <\/linearGradient>\\n\" +\n+                    \"        <mask id='Mask'>\\n\" +\n+                    \"          <rect x='0' y='0' width='200' height='200' fill='url(#Gradient)'  \/>\\n\" +\n+                    \"        <\/mask>\\n\" +\n+                    \"      <\/defs>\\n\" +\n+                    \"      <path d='M 0 200 Q 100 0 200 200' fill='green' \/>\\n\" +\n+                    \"      <path d='M 0 200 Q 100 0 200 200' fill='red' mask='url(#Mask)' \/>\\n\" +\n+                    \"    <\/svg>\\n\" +\n+                    \"  <\/body>\\n\" +\n+                    \"<\/html>\"\n+        );\n+        submit(() -> {\n+            final WebPage webPage = WebEngineShim.getPage(getEngine());\n+            assertNotNull(webPage);\n+            final BufferedImage img = WebPageShim.paint(webPage, 0, 0, 200, 200);\n+            assertNotNull(img);\n+\n+            final Color pixelAt150x50 = new Color(img.getRGB(150, 50), true);\n+            assertTrue(\"Color should be almost red:\" + pixelAt150x50, isColorsSimilar(new Color(192, 32, 0), pixelAt150x50, 20));\n+            final Color pixelAt150x150 = new Color(img.getRGB(150, 150), true);\n+            assertTrue(\"Color should be almost red:\" + pixelAt150x150, isColorsSimilar(new Color(192, 32, 0), pixelAt150x150, 20));\n+        });\n+    }\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/SVGTest.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"modified"}]}