{"files":[{"patch":"@@ -217,0 +217,5 @@\n+    @Override public void concatTransform(WCTransform tm) {\n+        init();\n+        super.concatTransform(tm);\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/javafx\/webkit\/prism\/WCBufferedContext.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -82,0 +82,5 @@\n+    private enum MaskedShapeDrawType {\n+        FILL,\n+        DRAW\n+    }\n+\n@@ -331,0 +336,1 @@\n+        state.setClipMaskImage(null);\n@@ -438,0 +444,1 @@\n+        state.setClipMaskImage(null);\n@@ -443,0 +450,1 @@\n+        state.setClipMaskImage(null);\n@@ -510,1 +518,1 @@\n-    private void fillOrDrawShapeMasked(Graphics g, Shape shape, Paint paint, BasicStroke stroke, boolean isFill) {\n+    private void fillOrDrawShapeMasked(Graphics g, Shape shape, Paint paint, BasicStroke stroke, MaskedShapeDrawType drawType) {\n@@ -520,1 +528,1 @@\n-        if(stroke != null) {\n+        if (stroke != null) {\n@@ -523,4 +531,19 @@\n-        if (isFill) {\n-            g1.fill(shape);\n-        } else {\n-            g1.draw(shape);\n+        switch(drawType) {\n+            case FILL:\n+                if (shape instanceof RoundRectangle2D) {\n+                    RoundRectangle2D r = (RoundRectangle2D)shape;\n+                    g1.fillRoundRect(r.x, r.y, r.width, r.height, r.arcWidth, r.arcHeight);\n+                } else {\n+                    g1.fill(shape);\n+                }\n+                break;\n+            case DRAW:\n+                if (shape instanceof RoundRectangle2D) {\n+                    RoundRectangle2D r = (RoundRectangle2D)shape;\n+                    g1.drawRoundRect(r.x, r.y, r.width, r.height, r.arcWidth, r.arcHeight);\n+                } else {\n+                    g1.draw(shape);\n+                }\n+                break;\n+            default:\n+                break;\n@@ -528,0 +551,1 @@\n+\n@@ -577,1 +601,1 @@\n-                    fillOrDrawShapeMasked(g, new RoundRectangle2D(x, y, w, h, 0, 0), paint, null, true);\n+                    fillOrDrawShapeMasked(g, new RoundRectangle2D(x, y, w, h, 0, 0), paint, null, MaskedShapeDrawType.FILL);\n@@ -616,1 +640,1 @@\n-                    fillOrDrawShapeMasked(g, new RoundRectangle2D(x, y, w, h, arcW, arcH), paint, null, true);\n+                    fillOrDrawShapeMasked(g, new RoundRectangle2D(x, y, w, h, arcW, arcH), paint, null, MaskedShapeDrawType.FILL);\n@@ -1807,1 +1831,1 @@\n-                    fillOrDrawShapeMasked(g, new RoundRectangle2D(x, y, w, h, 0, 0), paint, stroke, false);\n+                    fillOrDrawShapeMasked(g, new RoundRectangle2D(x, y, w, h, 0, 0), paint, stroke, MaskedShapeDrawType.DRAW);\n@@ -1842,1 +1866,1 @@\n-                            fillOrDrawShapeMasked(g, p2d, paint, stroke, false);\n+                            fillOrDrawShapeMasked(g, p2d, paint, stroke, MaskedShapeDrawType.DRAW);\n@@ -1872,1 +1896,1 @@\n-                        fillOrDrawShapeMasked(g, p2d, paint, null, true);\n+                        fillOrDrawShapeMasked(g, p2d, paint, null, MaskedShapeDrawType.FILL);\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/javafx\/webkit\/prism\/WCGraphicsPrismContext.java","additions":35,"deletions":11,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -235,1 +235,0 @@\n-            setCTM(m_state.transform);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/java\/GraphicsContextJava.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -140,151 +140,0 @@\n-\n-    @Test public void testSVGRectRenderingWithMask() {\n-        loadContent(\n-                    \"<html>\\n\" +\n-                    \"  <body style='margin: 0px 0px;'>\\n\" +\n-                    \"    <svg width='200' height='200'>\\n\" +\n-                    \"      <defs>\\n\" +\n-                    \"        <linearGradient id='Gradient'>\\n\" +\n-                    \"          <stop offset='0' stop-color='white' stop-opacity='0' \/>\\n\" +\n-                    \"          <stop offset='1' stop-color='white' stop-opacity='1' \/>\\n\" +\n-                    \"        <\/linearGradient>\\n\" +\n-                    \"        <mask id='Mask'>\\n\" +\n-                    \"          <rect x='0' y='0' width='200' height='200' fill='url(#Gradient)' \/>\\n\" +\n-                    \"        <\/mask>\\n\" +\n-                    \"      <\/defs>\\n\" +\n-                    \"      <rect x='0' y='0' width='200' height='200' fill='green' \/>\\n\" +\n-                    \"      <rect x='0' y='0' width='200' height='200' fill='red' mask='url(#Mask)' \/>\\n\" +\n-                    \"    <\/svg>\\n\" +\n-                    \"  <\/body>\\n\" +\n-                    \"<\/html>\"\n-        );\n-        submit(() -> {\n-            final WebPage webPage = WebEngineShim.getPage(getEngine());\n-            assertNotNull(webPage);\n-            final BufferedImage img = WebPageShim.paint(webPage, 0, 0, 200, 200);\n-            assertNotNull(img);\n-\n-            final Color pixelAt0x0 = new Color(img.getRGB(0, 0), true);\n-            assertTrue(\"Color should be green:\" + pixelAt0x0, isColorsSimilar(new Color(0, 128, 0), pixelAt0x0, 5));\n-            final Color pixelAt0x199 = new Color(img.getRGB(0, 199), true);\n-            assertTrue(\"Color should be green:\" + pixelAt0x199, isColorsSimilar(new Color(0, 128, 0), pixelAt0x199, 5));\n-\n-            final Color pixelAt100x0 = new Color(img.getRGB(100, 0), true);\n-            assertTrue(\"Color should be almost Cinnamon:\" + pixelAt100x0, isColorsSimilar(new Color(128, 64, 0), pixelAt100x0, 20));\n-            final Color pixelAt100x199 = new Color(img.getRGB(100, 199), true);\n-            assertTrue(\"Color should be almost Cinnamon:\" + pixelAt100x199, isColorsSimilar(new Color(128, 64, 0), pixelAt100x199, 20));\n-\n-            final Color pixelAt199x0 = new Color(img.getRGB(199, 0), true);\n-            assertTrue(\"Color should be red:\" + pixelAt199x0, isColorsSimilar(Color.RED, pixelAt199x0, 5));\n-            final Color pixelAt199x199 = new Color(img.getRGB(199, 199), true);\n-            assertTrue(\"Color should be red:\" + pixelAt199x199, isColorsSimilar(Color.RED, pixelAt199x199, 5));\n-        });\n-    }\n-\n-    @Test public void testSVGRoundedRectRenderingWithMask() {\n-        loadContent(\n-                    \"<html>\\n\" +\n-                    \"  <body style='margin: 0px 0px;'>\\n\" +\n-                    \"    <svg width='200' height='200'>\\n\" +\n-                    \"      <defs>\\n\" +\n-                    \"        <linearGradient id='Gradient'>\\n\" +\n-                    \"          <stop offset='0' stop-color='white' stop-opacity='0' \/>\\n\" +\n-                    \"          <stop offset='1' stop-color='white' stop-opacity='1' \/>\\n\" +\n-                    \"        <\/linearGradient>\\n\" +\n-                    \"        <mask id='Mask'>\\n\" +\n-                    \"          <rect x='0' y='0' width='200' height='200' fill='url(#Gradient)' \/>\\n\" +\n-                    \"        <\/mask>\\n\" +\n-                    \"      <\/defs>\\n\" +\n-                    \"      <rect x='0' y='0' width='200' height='200' rx='20' ry='20' fill='green' \/>\\n\" +\n-                    \"      <rect x='0' y='0' width='200' height='200' rx='20' ry='20' fill='red' mask='url(#Mask)' \/>\\n\" +\n-                    \"    <\/svg>\\n\" +\n-                    \"  <\/body>\\n\" +\n-                    \"<\/html>\"\n-        );\n-        submit(() -> {\n-            final WebPage webPage = WebEngineShim.getPage(getEngine());\n-            assertNotNull(webPage);\n-            final BufferedImage img = WebPageShim.paint(webPage, 0, 0, 200, 200);\n-            assertNotNull(img);\n-\n-            final Color pixelAt50x50 = new Color(img.getRGB(50, 50), true);\n-            assertTrue(\"Color should be green:\" + pixelAt50x50, isColorsSimilar(new Color(65, 95, 0), pixelAt50x50, 5));\n-            final Color pixelAt50x150 = new Color(img.getRGB(50, 150), true);\n-            assertTrue(\"Color should be green:\" + pixelAt50x150, isColorsSimilar(new Color(65, 95, 0), pixelAt50x150, 5));\n-\n-            final Color pixelAt150x50 = new Color(img.getRGB(150, 50), true);\n-            assertTrue(\"Color should be almost red:\" + pixelAt150x50, isColorsSimilar(new Color(192, 32, 0), pixelAt150x50, 20));\n-            final Color pixelAt150x150 = new Color(img.getRGB(150, 150), true);\n-            assertTrue(\"Color should be almost red:\" + pixelAt150x150, isColorsSimilar(new Color(192, 32, 0), pixelAt150x150, 20));\n-        });\n-    }\n-\n-    @Test public void testSVGPathRenderingWithMask() {\n-        loadContent(\n-                    \"<html>\\n\" +\n-                    \"  <body style='margin: 0px 0px;'>\\n\" +\n-                    \"    <svg width='200' height='200'>\\n\" +\n-                    \"      <defs>\\n\" +\n-                    \"        <linearGradient id='Gradient'>\\n\" +\n-                    \"          <stop offset='0' stop-color='white' stop-opacity='0' \/>\\n\" +\n-                    \"          <stop offset='1' stop-color='white' stop-opacity='1' \/>\\n\" +\n-                    \"        <\/linearGradient>\\n\" +\n-                    \"        <mask id='Mask'>\\n\" +\n-                    \"          <rect x='0' y='0' width='200' height='200' fill='url(#Gradient)'  \/>\\n\" +\n-                    \"        <\/mask>\\n\" +\n-                    \"      <\/defs>\\n\" +\n-                    \"      <path d='M 0 200 Q 100 0 200 200' fill='green' \/>\\n\" +\n-                    \"      <path d='M 0 200 Q 100 0 200 200' fill='red' mask='url(#Mask)' \/>\\n\" +\n-                    \"    <\/svg>\\n\" +\n-                    \"  <\/body>\\n\" +\n-                    \"<\/html>\"\n-        );\n-        submit(() -> {\n-            final WebPage webPage = WebEngineShim.getPage(getEngine());\n-            assertNotNull(webPage);\n-            final BufferedImage img = WebPageShim.paint(webPage, 0, 0, 200, 200);\n-            assertNotNull(img);\n-\n-            final Color pixelAt50x150 = new Color(img.getRGB(50, 150), true);\n-            assertTrue(\"Color should be almost green:\" + pixelAt50x150, isColorsSimilar(new Color(65, 95, 0), pixelAt50x150, 20));\n-            final Color pixelAt150x150 = new Color(img.getRGB(150, 150), true);\n-            assertTrue(\"Color should be almost red:\" + pixelAt150x150, isColorsSimilar(new Color(192, 32, 0), pixelAt150x150, 20));\n-        });\n-    }\n-\n-    @Test public void testSVGStrokeRenderingWithMask() {\n-        loadContent(\n-                    \"<html>\\n\" +\n-                    \"  <body style='margin: 0px 0px;'>\\n\" +\n-                    \"    <svg width='200' height='200'>\\n\" +\n-                    \"      <defs>\\n\" +\n-                    \"        <linearGradient id='Gradient'>\\n\" +\n-                    \"          <stop offset='0' stop-color='white' stop-opacity='0' \/>\\n\" +\n-                    \"          <stop offset='1' stop-color='white' stop-opacity='1' \/>\\n\" +\n-                    \"        <\/linearGradient>\\n\" +\n-                    \"        <mask id='Mask'>\\n\" +\n-                    \"          <rect x='0' y='0' width='200' height='200' fill='url(#Gradient)' \/>\\n\" +\n-                    \"        <\/mask>\\n\" +\n-                    \"      <\/defs>\\n\" +\n-                    \"      <rect x='0' y='0' width='200' height='200' stroke='green' stroke-width='5' fill='transparent' \/>\\n\" +\n-                    \"      <rect x='0' y='0' width='200' height='200' stroke='red' stroke-width='5' fill='transparent' mask='url(#Mask)' \/>\\n\" +\n-                    \"    <\/svg>\\n\" +\n-                    \"  <\/body>\\n\" +\n-                    \"<\/html>\\n\"\n-        );\n-        submit(() -> {\n-            final WebPage webPage = WebEngineShim.getPage(getEngine());\n-            assertNotNull(webPage);\n-            final BufferedImage img = WebPageShim.paint(webPage, 0, 0, 200, 200);\n-            assertNotNull(img);\n-\n-            final Color pixelAt1x1 = new Color(img.getRGB(1, 1), true);\n-            assertTrue(\"Color should be almost green:\" + pixelAt1x1, isColorsSimilar(new Color(0, 128, 0), pixelAt1x1, 10));\n-            final Color pixelAt0x199 = new Color(img.getRGB(0, 199), true);\n-            assertTrue(\"Color should be almost green:\" + pixelAt0x199, isColorsSimilar(new Color(0, 128, 0), pixelAt0x199, 10));\n-            final Color pixelAt199x0 = new Color(img.getRGB(199, 0), true);\n-            assertTrue(\"Color should be almost red:\" + pixelAt199x0, isColorsSimilar(new Color(255, 0, 0), pixelAt199x0, 10));\n-            final Color pixelAt199x199 = new Color(img.getRGB(199, 199), true);\n-            assertTrue(\"Color should be almost red:\" + pixelAt199x199, isColorsSimilar(new Color(255, 0, 0), pixelAt199x199, 10));\n-        });\n-    }\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/SVGTest.java","additions":0,"deletions":151,"binary":false,"changes":151,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import static org.junit.Assert.fail;\n@@ -72,0 +73,23 @@\n+    private static String colorToString(Color c) {\n+        int r = (int)(c.getRed() * 255.0);\n+        int g = (int)(c.getGreen() * 255.0);\n+        int b = (int)(c.getBlue() * 255.0);\n+        int a = (int)(c.getOpacity() * 255.0);\n+        return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\n+    }\n+\n+    private void assertColorEquals(String msg, Color expected, Color actual, double delta) {\n+        if (!testColorEquals(expected, actual, delta)) {\n+            fail(msg + \" expected:\" + colorToString(expected)\n+                    + \" but was:\" + colorToString(actual));\n+        }\n+    }\n+\n+    protected boolean testColorEquals(Color expected, Color actual, double delta) {\n+        double deltaRed = Math.abs(expected.getRed() - actual.getRed());\n+        double deltaGreen = Math.abs(expected.getGreen() - actual.getGreen());\n+        double deltaBlue = Math.abs(expected.getBlue() - actual.getBlue());\n+        double deltaOpacity = Math.abs(expected.getOpacity() - actual.getOpacity());\n+        return (deltaRed <= delta && deltaGreen <= delta && deltaBlue <= delta && deltaOpacity <= delta);\n+    }\n+\n@@ -147,0 +171,84 @@\n+\n+    \/**\n+     * @test\n+     * @bug 8218973\n+     * summary Checks if svg draws correctly with mask\n+     *\/\n+    @Test public void testSVGRenderingWithMask() {\n+        final CountDownLatch webViewStateLatch = new CountDownLatch(1);\n+\n+        Util.runAndWait(() -> {\n+            assertNotNull(webView);\n+            webView.getEngine().getLoadWorker().stateProperty().\n+                    addListener((observable, oldValue, newValue) -> {\n+                        if (newValue == SUCCEEDED) {\n+                            webView.requestFocus();\n+                        }\n+                    });\n+\n+            webView.focusedProperty().\n+                    addListener((observable, oldValue, newValue) -> {\n+                        if (newValue) {\n+                            webViewStateLatch.countDown();\n+                        }\n+                    });\n+            final String urlString = SVGTest.class.getResource(\"svgMask.html\").toExternalForm();\n+            webView.getEngine().load(urlString);\n+        });\n+\n+        assertTrue(\"Timeout when waiting for focus change \", Util.await(webViewStateLatch));\n+        Util.sleep(1000);\n+\n+        Util.runAndWait(() -> {\n+            WritableImage snapshot = svgTestApp.primaryStage.getScene().snapshot(null);\n+            PixelReader pr = snapshot.getPixelReader();\n+\n+            final double delta = 0.07;\n+            final Color greenColor = Color.rgb(0, 128, 0);\n+            final Color cinnamonColor = Color.rgb(128, 64, 0);\n+            final Color redColor = Color.rgb(255, 0, 0);\n+\n+            \/\/ Test path pixels\n+            assertColorEquals(\"Color should be opaque green:\",\n+                    Color.rgb(65, 95, 0), pr.getColor(50, 150), delta);\n+            assertColorEquals(\"Color should be opaque red:\",\n+                    Color.rgb(192, 32, 0), pr.getColor(150, 150), delta);\n+\n+            \/\/ Test Rect pixels\n+            assertColorEquals(\"Color should be opaque green:\",\n+                    greenColor, pr.getColor(200, 0), delta);\n+            assertColorEquals(\"Color should be opaque green:\",\n+                    greenColor, pr.getColor(200, 199), delta);\n+            assertColorEquals(\"Color should be opaque Cinnamon:\",\n+                    cinnamonColor, pr.getColor(300, 0), delta);\n+            assertColorEquals(\"Color should be opaque Cinnamon:\",\n+                    cinnamonColor, pr.getColor(300, 199), delta);\n+            assertColorEquals(\"Color should be opaque red:\",\n+                    redColor, pr.getColor(399, 0), delta);\n+            assertColorEquals(\"Color should be opaque red:\",\n+                    redColor, pr.getColor(399, 199), delta);\n+\n+            \/\/ Test RoundedRect pixels\n+            assertColorEquals(\"Color should be opaque green:\",\n+                    Color.rgb(65, 95, 0), pr.getColor(50, 250), delta);\n+            assertColorEquals(\"Color should be opaque green:\",\n+                    Color.rgb(65, 95, 0), pr.getColor(50, 350), delta);\n+            assertColorEquals(\"Color should be opaque red:\",\n+                    Color.rgb(192, 32, 0), pr.getColor(150, 250), delta);\n+            assertColorEquals(\"Color should be opaque red:\",\n+                    Color.rgb(192, 32, 0), pr.getColor(150, 350), delta);\n+\n+            \/\/ Test Stroke pixels\n+            assertColorEquals(\"Color should be opaque green:\",\n+                    greenColor, pr.getColor(203, 203), delta);\n+            assertColorEquals(\"Color should be opaque green:\",\n+                    greenColor, pr.getColor(203, 401), delta);\n+            assertColorEquals(\"Color should be opaque red:\",\n+                    redColor, pr.getColor(401, 203), delta);\n+            assertColorEquals(\"Color should be opaque red:\",\n+                    redColor, pr.getColor(401, 401), delta);\n+\n+        });\n+    }\n+\n+\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/SVGTest.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+<html>\n+  <body style='margin: 0px 0px;'>\n+      <svg width='410' height='410'>\n+          <defs>\n+              <linearGradient id='Gradient'>\n+                  <stop offset='0' stop-color='white' stop-opacity='0' \/>\n+                  <stop offset='1' stop-color='white' stop-opacity='1' \/>\n+              <\/linearGradient>\n+              <mask id='Mask1'>\n+                  <rect x='0' y='0' width='200' height='200' fill='url(#Gradient)' \/>\n+              <\/mask>\n+              <mask id='Mask2'>\n+                  <rect x='200' y='0' width='200' height='200' fill='url(#Gradient)' \/>\n+              <\/mask>\n+              <mask id='Mask3'>\n+                  <rect x='0' y='200' width='200' height='200' fill='url(#Gradient)' \/>\n+              <\/mask>\n+              <mask id='Mask4'>\n+                  <rect x='202' y='202' width='200' height='200' fill='url(#Gradient)' \/>\n+              <\/mask>\n+          <\/defs>\n+\n+          <path d='M 0 200 Q 100 0 200 200' fill='green' \/>\n+          <path d='M 0 200 Q 100 0 200 200' fill='red' mask='url(#Mask1)' \/>\n+\n+          <rect x='200' y='0' width='200' height='200' fill='green' \/>\n+          <rect x='200' y='0' width='200' height='200' fill='red' mask='url(#Mask2)' \/>\n+\n+          <rect x='0' y='200' width='200' height='200' rx='20' ry='20' fill='green' \/>\n+          <rect x='0' y='200' width='200' height='200' rx='20' ry='20' fill='red' mask='url(#Mask3)' \/>\n+\n+          <rect x='202' y='202' width='200' height='200' stroke='green' stroke-width='4' fill='transparent' \/>\n+          <rect x='202' y='202' width='200' height='200' stroke='red' stroke-width='4' fill='transparent' mask='url(#Mask4)' \/>\n+      <\/svg>\n+  <\/body>\n+<\/html>\n","filename":"tests\/system\/src\/test\/resources\/test\/javafx\/scene\/web\/svgMask.html","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"}]}