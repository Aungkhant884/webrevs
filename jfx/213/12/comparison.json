{"files":[{"patch":"@@ -217,0 +217,5 @@\n+    @Override public void concatTransform(WCTransform tm) {\n+        init();\n+        super.concatTransform(tm);\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/javafx\/webkit\/prism\/WCBufferedContext.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -82,0 +82,5 @@\n+    private enum MaskedShapeDrawType {\n+        FILL,\n+        DRAW\n+    }\n+\n@@ -331,0 +336,1 @@\n+        state.setClipMaskImage(null);\n@@ -438,0 +444,1 @@\n+        state.setClipMaskImage(null);\n@@ -443,0 +450,6 @@\n+        state.setClipMaskImage(null);\n+    }\n+\n+    public void setClip(int cx, int cy, int cw, int ch, WCImage maskImage) {\n+        setClip(new Rectangle(cx, cy, cw, ch));\n+        state.setClipMaskImage(maskImage);\n@@ -505,0 +518,61 @@\n+    private void fillOrDrawShapeMasked(Graphics g, Shape shape, Paint paint, BasicStroke stroke, MaskedShapeDrawType drawType) {\n+\n+        FilterContext filterContext = getFilterContext(g);\n+        Rectangle clipRectangle = getClipRectNoClone();\n+\n+        PrDrawable imagePrDrawable = (PrDrawable)Effect.getCompatibleImage(filterContext,\n+                g.getRenderTarget().getContentWidth(), g.getRenderTarget().getContentHeight());\n+        Graphics g1 = imagePrDrawable.createGraphics();\n+        state.apply(g1);\n+        g1.setPaint(paint);\n+        if (stroke != null) {\n+            g1.setStroke(stroke);\n+        }\n+        switch(drawType) {\n+            case FILL:\n+                if (shape instanceof RoundRectangle2D) {\n+                    RoundRectangle2D r = (RoundRectangle2D)shape;\n+                    g1.fillRoundRect(r.x, r.y, r.width, r.height, r.arcWidth, r.arcHeight);\n+                } else {\n+                    g1.fill(shape);\n+                }\n+                break;\n+            case DRAW:\n+                if (shape instanceof RoundRectangle2D) {\n+                    RoundRectangle2D r = (RoundRectangle2D)shape;\n+                    g1.drawRoundRect(r.x, r.y, r.width, r.height, r.arcWidth, r.arcHeight);\n+                } else {\n+                    g1.draw(shape);\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+\n+        RTImage maskImage = (RTImage) (state.getClipMaskImageNoClone());\n+        Image nativeMaskImage = Image.fromByteBgraPreData(maskImage.getPixelBuffer(),\n+                maskImage.getWidth(), maskImage.getHeight(), 0, maskImage.getPixelScale());\n+        Texture maskTexture = g.getResourceFactory().createTexture(PixelFormat.BYTE_BGRA_PRE,\n+                Texture.Usage.STATIC, Texture.WrapMode.CLAMP_NOT_NEEDED,\n+                nativeMaskImage.getWidth(), nativeMaskImage.getHeight());\n+        maskTexture.update(nativeMaskImage, 0, 0, nativeMaskImage.getWidth(),\n+                nativeMaskImage.getHeight());\n+        PrDrawable maskPrDrawable = (PrDrawable)Effect.getCompatibleImage(filterContext,\n+                g.getRenderTarget().getContentWidth(), g.getRenderTarget().getContentHeight());\n+        Graphics g2 = maskPrDrawable.createGraphics();\n+        g2.drawTexture(maskTexture, clipRectangle.x, clipRectangle.y, clipRectangle.x + clipRectangle.width,\n+                clipRectangle.y + clipRectangle.height, 0, 0, nativeMaskImage.getWidth(), nativeMaskImage.getHeight());\n+        maskTexture.dispose();\n+\n+        Blend blend = new Blend(Blend.Mode.SRC_IN,\n+                new PassThrough(maskPrDrawable, g.getRenderTarget().getContentWidth(), g.getRenderTarget().getContentHeight()),\n+                new PassThrough(imagePrDrawable, g.getRenderTarget().getContentWidth(), g.getRenderTarget().getContentHeight()));\n+        Affine3D tx = new Affine3D(g.getTransformNoClone());\n+        g.setTransform(BaseTransform.IDENTITY_TRANSFORM);\n+        PrEffectHelper.render(blend, g, 0, 0, null);\n+        g.setTransform(tx);\n+\n+        Effect.releaseCompatibleImage(filterContext, imagePrDrawable);\n+        Effect.releaseCompatibleImage(filterContext, maskPrDrawable);\n+    }\n+\n@@ -526,0 +600,2 @@\n+                } else if (state.getClipMaskImageNoClone() != null) {\n+                    fillOrDrawShapeMasked(g, new RoundRectangle2D(x, y, w, h, 0, 0), paint, null, MaskedShapeDrawType.FILL);\n@@ -563,0 +639,2 @@\n+                } else if (state.getClipMaskImageNoClone() != null) {\n+                    fillOrDrawShapeMasked(g, new RoundRectangle2D(x, y, w, h, arcW, arcH), paint, null, MaskedShapeDrawType.FILL);\n@@ -1190,0 +1268,1 @@\n+        private WCImage clipMaskImage;\n@@ -1215,0 +1294,1 @@\n+            setClipMaskImage(state.getClipMaskImageNoClone());\n@@ -1249,0 +1329,8 @@\n+        private void setClipMaskImage(WCImage image) {\n+            this.clipMaskImage = image;\n+        }\n+\n+        private WCImage getClipMaskImageNoClone() {\n+            return clipMaskImage;\n+        }\n+\n@@ -1741,2 +1829,7 @@\n-                g.setPaint(paint);\n-                g.drawRect(x, y, w, h);\n+\n+                if (state.getClipMaskImageNoClone() != null) {\n+                    fillOrDrawShapeMasked(g, new RoundRectangle2D(x, y, w, h, 0, 0), paint, stroke, MaskedShapeDrawType.DRAW);\n+                } else {\n+                    g.setPaint(paint);\n+                    g.drawRect(x, y, w, h);\n+                }\n@@ -1767,0 +1860,1 @@\n+                        g.setStroke(stroke);\n@@ -1771,3 +1865,6 @@\n-                        g.setPaint(paint);\n-                        g.setStroke(stroke);\n-                        g.draw(p2d);\n+                        if (state.getClipMaskImageNoClone() != null) {\n+                            fillOrDrawShapeMasked(g, p2d, paint, stroke, MaskedShapeDrawType.DRAW);\n+                        } else {\n+                            g.setPaint(paint);\n+                            g.draw(p2d);\n+                        }\n@@ -1798,0 +1895,2 @@\n+                    } else if (state.getClipMaskImageNoClone() != null) {\n+                        fillOrDrawShapeMasked(g, p2d, paint, null, MaskedShapeDrawType.FILL);\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/javafx\/webkit\/prism\/WCGraphicsPrismContext.java","additions":104,"deletions":5,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+    @Native public final static int SETCLIP_IIII_MASK      = 57;\n@@ -236,0 +237,8 @@\n+                case SETCLIP_IIII_MASK:\n+                    gc.setClip(\n+                        buf.getInt(),\n+                        buf.getInt(),\n+                        buf.getInt(),\n+                        buf.getInt(),\n+                        (WCImage) gm.getRef(buf.getInt()));\n+                    break;\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/graphics\/GraphicsDecoder.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -101,0 +101,1 @@\n+    public abstract void setClip(int cx, int cy, int cw, int ch, WCImage maskImage);\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/graphics\/WCGraphicsContext.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -307,0 +307,7 @@\n+    @Override\n+    public void setClip(int cx, int cy, int cw, int ch, WCImage maskImage) {\n+        logger.resumeCount(\"SETCLIP_IIII_MASK\");\n+        gc.setClip(cx, cy, cw, ch, maskImage);\n+        logger.suspendCount(\"SETCLIP_IIII_MASK\");\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/perf\/WCGraphicsPerfLogger.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+#include \"ImageBuffer.h\"\n@@ -258,1 +259,1 @@\n-void GraphicsContext::clipToImageBuffer(ImageBuffer&, const FloatRect&)\n+void GraphicsContext::clipToImageBuffer(ImageBuffer& imageBuffer, const FloatRect& rect)\n@@ -260,1 +261,9 @@\n-    notImplemented();\n+    if (paintingDisabled())\n+        return;\n+\n+    RefPtr<Image> copiedImage = imageBuffer.copyImage(BackingStoreCopy::CopyBackingStore, PreserveResolution::Yes);\n+    NativeImagePtr nativeImageObject = copiedImage->nativeImageForCurrentFrame(this);\n+    m_state.clipBounds.intersect(m_state.transform.mapRect(rect));\n+    platformContext()->rq().freeSpace(24)\n+    << (jint)com_sun_webkit_graphics_GraphicsDecoder_SETCLIP_IIII_MASK\n+    << (jint)rect.x() << (jint)rect.y() << (jint)rect.width() << (jint)rect.height() << nativeImageObject;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/java\/GraphicsContextJava.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import static org.junit.Assert.fail;\n@@ -72,0 +73,23 @@\n+    private static String colorToString(Color c) {\n+        int r = (int)(c.getRed() * 255.0);\n+        int g = (int)(c.getGreen() * 255.0);\n+        int b = (int)(c.getBlue() * 255.0);\n+        int a = (int)(c.getOpacity() * 255.0);\n+        return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\n+    }\n+\n+    private void assertColorEquals(String msg, Color expected, Color actual, double delta) {\n+        if (!testColorEquals(expected, actual, delta)) {\n+            fail(msg + \" expected:\" + colorToString(expected)\n+                    + \" but was:\" + colorToString(actual));\n+        }\n+    }\n+\n+    protected boolean testColorEquals(Color expected, Color actual, double delta) {\n+        double deltaRed = Math.abs(expected.getRed() - actual.getRed());\n+        double deltaGreen = Math.abs(expected.getGreen() - actual.getGreen());\n+        double deltaBlue = Math.abs(expected.getBlue() - actual.getBlue());\n+        double deltaOpacity = Math.abs(expected.getOpacity() - actual.getOpacity());\n+        return (deltaRed <= delta && deltaGreen <= delta && deltaBlue <= delta && deltaOpacity <= delta);\n+    }\n+\n@@ -147,0 +171,84 @@\n+\n+    \/**\n+     * @test\n+     * @bug 8218973\n+     * summary Checks if svg draws correctly with mask\n+     *\/\n+    @Test public void testSVGRenderingWithMask() {\n+        final CountDownLatch webViewStateLatch = new CountDownLatch(1);\n+\n+        Util.runAndWait(() -> {\n+            assertNotNull(webView);\n+            webView.getEngine().getLoadWorker().stateProperty().\n+                    addListener((observable, oldValue, newValue) -> {\n+                        if (newValue == SUCCEEDED) {\n+                            webView.requestFocus();\n+                        }\n+                    });\n+\n+            webView.focusedProperty().\n+                    addListener((observable, oldValue, newValue) -> {\n+                        if (newValue) {\n+                            webViewStateLatch.countDown();\n+                        }\n+                    });\n+            final String urlString = SVGTest.class.getResource(\"svgMask.html\").toExternalForm();\n+            webView.getEngine().load(urlString);\n+        });\n+\n+        assertTrue(\"Timeout when waiting for focus change \", Util.await(webViewStateLatch));\n+        Util.sleep(1000);\n+\n+        Util.runAndWait(() -> {\n+            WritableImage snapshot = svgTestApp.primaryStage.getScene().snapshot(null);\n+            PixelReader pr = snapshot.getPixelReader();\n+\n+            final double delta = 0.07;\n+            final Color greenColor = Color.rgb(0, 128, 0);\n+            final Color cinnamonColor = Color.rgb(128, 64, 0);\n+            final Color redColor = Color.rgb(255, 0, 0);\n+\n+            \/\/ Test path pixels\n+            assertColorEquals(\"Color should be opaque green:\",\n+                    Color.rgb(65, 95, 0), pr.getColor(50, 150), delta);\n+            assertColorEquals(\"Color should be opaque red:\",\n+                    Color.rgb(192, 32, 0), pr.getColor(150, 150), delta);\n+\n+            \/\/ Test Rect pixels\n+            assertColorEquals(\"Color should be opaque green:\",\n+                    greenColor, pr.getColor(200, 0), delta);\n+            assertColorEquals(\"Color should be opaque green:\",\n+                    greenColor, pr.getColor(200, 199), delta);\n+            assertColorEquals(\"Color should be opaque Cinnamon:\",\n+                    cinnamonColor, pr.getColor(300, 0), delta);\n+            assertColorEquals(\"Color should be opaque Cinnamon:\",\n+                    cinnamonColor, pr.getColor(300, 199), delta);\n+            assertColorEquals(\"Color should be opaque red:\",\n+                    redColor, pr.getColor(399, 0), delta);\n+            assertColorEquals(\"Color should be opaque red:\",\n+                    redColor, pr.getColor(399, 199), delta);\n+\n+            \/\/ Test RoundedRect pixels\n+            assertColorEquals(\"Color should be opaque green:\",\n+                    Color.rgb(65, 95, 0), pr.getColor(50, 250), delta);\n+            assertColorEquals(\"Color should be opaque green:\",\n+                    Color.rgb(65, 95, 0), pr.getColor(50, 350), delta);\n+            assertColorEquals(\"Color should be opaque red:\",\n+                    Color.rgb(192, 32, 0), pr.getColor(150, 250), delta);\n+            assertColorEquals(\"Color should be opaque red:\",\n+                    Color.rgb(192, 32, 0), pr.getColor(150, 350), delta);\n+\n+            \/\/ Test Stroke pixels\n+            assertColorEquals(\"Color should be opaque green:\",\n+                    greenColor, pr.getColor(203, 203), delta);\n+            assertColorEquals(\"Color should be opaque green:\",\n+                    greenColor, pr.getColor(203, 401), delta);\n+            assertColorEquals(\"Color should be opaque red:\",\n+                    redColor, pr.getColor(401, 203), delta);\n+            assertColorEquals(\"Color should be opaque red:\",\n+                    redColor, pr.getColor(401, 401), delta);\n+\n+        });\n+    }\n+\n+\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/SVGTest.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+<html>\n+  <body style='margin: 0px 0px;'>\n+      <svg width='410' height='410'>\n+          <defs>\n+              <linearGradient id='Gradient'>\n+                  <stop offset='0' stop-color='white' stop-opacity='0' \/>\n+                  <stop offset='1' stop-color='white' stop-opacity='1' \/>\n+              <\/linearGradient>\n+              <mask id='Mask1'>\n+                  <rect x='0' y='0' width='200' height='200' fill='url(#Gradient)' \/>\n+              <\/mask>\n+              <mask id='Mask2'>\n+                  <rect x='200' y='0' width='200' height='200' fill='url(#Gradient)' \/>\n+              <\/mask>\n+              <mask id='Mask3'>\n+                  <rect x='0' y='200' width='200' height='200' fill='url(#Gradient)' \/>\n+              <\/mask>\n+              <mask id='Mask4'>\n+                  <rect x='202' y='202' width='200' height='200' fill='url(#Gradient)' \/>\n+              <\/mask>\n+          <\/defs>\n+\n+          <path d='M 0 200 Q 100 0 200 200' fill='green' \/>\n+          <path d='M 0 200 Q 100 0 200 200' fill='red' mask='url(#Mask1)' \/>\n+\n+          <rect x='200' y='0' width='200' height='200' fill='green' \/>\n+          <rect x='200' y='0' width='200' height='200' fill='red' mask='url(#Mask2)' \/>\n+\n+          <rect x='0' y='200' width='200' height='200' rx='20' ry='20' fill='green' \/>\n+          <rect x='0' y='200' width='200' height='200' rx='20' ry='20' fill='red' mask='url(#Mask3)' \/>\n+\n+          <rect x='202' y='202' width='200' height='200' stroke='green' stroke-width='4' fill='transparent' \/>\n+          <rect x='202' y='202' width='200' height='200' stroke='red' stroke-width='4' fill='transparent' mask='url(#Mask4)' \/>\n+      <\/svg>\n+  <\/body>\n+<\/html>\n","filename":"tests\/system\/src\/test\/resources\/test\/javafx\/scene\/web\/svgMask.html","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"}]}