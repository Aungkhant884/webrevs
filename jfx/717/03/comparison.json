{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import com.sun.javafx.scene.DirtyBits;\n-import com.sun.javafx.scene.NodeHelper;\n@@ -36,2 +34,5 @@\n- * Defines an ambient light source object. Ambient light is a light source\n- * that seems to come from all directions.\n+ * A light that illuminates an object from all directions equally.\n+ * <p>\n+ * {@code AmbientLight}s can represent strong light sources in an enclosed area where the lights bounces from many\n+ * objects, causing them to be illuminated from many directions. A strong light in a room and moonlight are common light\n+ * source that can be simulated with this light type.\n@@ -52,1 +53,1 @@\n-        \/\/ To initialize the class helper at the begining each constructor of this class\n+        \/\/ To initialize the class helper at the beginning each constructor of this class\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/AmbientLight.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,5 +41,2 @@\n- * A light that illuminates an object from a specific direction.\n- * The direction is defined by the {@link #directionProperty() direction} vector property of the light. The direction\n- * can be rotated by setting a rotation transform on the {@code DirectionalLight}. For example, if the direction vector\n- * is {@code (1, 1, 1)} and the light is not rotated, it will point in the {@code (1, 1, 1)} direction, and if the light\n- * is rotated 90 degrees on the y axis, it will point in the {@code (1, 1, -1)} direction.\n+ * A light that illuminates an object from a specific direction. The <a href=\"LightBase.html#Direction\">direction<\/a>\n+ * is defined by the {@link #directionProperty() direction} vector property.\n@@ -49,2 +46,1 @@\n- * cannot be attenuated. A decrease in intensity can be achieved by using a darker color. The sun is a common light\n- * source that can be simulated with this light type.\n+ * cannot be attenuated. The sun is a common light source that can be simulated with this light type.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/DirectionalLight.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,3 +59,2 @@\n- * The {@code LightBase} class provides definitions of common properties for\n- * objects that represent a form of light source. These properties\n- * include:\n+ * The {@code LightBase} class is the base class for all objects that represent a form of light source. All light types\n+ * share the following common properties that are defined in this class:\n@@ -63,3 +62,3 @@\n- * <li>{@code color} - the color of the light source<\/li>\n- * <li>{@code scope} - a list of nodes the light source affects<\/li>\n- * <li>{@code exlusionScope} - a list of nodes the light source does not affect<\/li>\n+ *   <li>{@code color} - the color of the light source<\/li>\n+ *   <li>{@code scope} - a list of nodes the light source affects<\/li>\n+ *   <li>{@code exlusionScope} - a list of nodes the light source does not affect<\/li>\n@@ -68,0 +67,53 @@\n+ * In addition to these, each light type supports a different set of properties, summarized in the following table:\n+ *\n+ * <table border=\"1\">\n+ *   <caption>Summary of Light types by attributes<\/caption>\n+ *   <tr>\n+ *     <th scope=\"col\">Light type<\/th>\n+ *     <th scope=\"col\">Rotation and Direction<\/th>\n+ *     <th scope=\"col\">Location and Attenuation<\/th>\n+ *   <\/tr>\n+ *   <tr>\n+ *     <th scope=\"row\">{@link AmbientLight}<\/th>\n+ *     <td style=\"text-align:center\">&#10007;<\/td>\n+ *     <td style=\"text-align:center\">&#10007;<\/td>\n+ *   <\/tr>\n+ *   <tr>\n+ *     <th scope=\"row\">{@link DirectionalLight}<\/th>\n+ *     <td style=\"text-align:center\">&#10003;<\/td>\n+ *     <td style=\"text-align:center\">&#10007;<\/td>\n+ *   <\/tr>\n+ *   <tr>\n+ *     <th scope=\"row\">{@link PointLight}<\/th>\n+ *     <td style=\"text-align:center\">&#10007;<\/td>\n+ *     <td style=\"text-align:center\">&#10003;<\/td>\n+ *   <\/tr>\n+ *   <tr>\n+ *     <th scope=\"row\">{@link SpotLight}*<\/th>\n+ *     <td style=\"text-align:center\">&#10003;<\/td>\n+ *     <td style=\"text-align:center\">&#10003;<\/td>\n+ *   <\/tr>\n+ * <\/table>\n+ * * Supports spotlight attenuation factors as described in its class docs.\n+ *\n+ * <p>\n+ * An application cannot add its own light types. Extending {@code LightBase} directly may lead to an\n+ * {@code UnsupportedOperationException} being thrown.\n+ * <p>\n+ * All light types are not affected by scaling and shearing transforms.\n+ *\n+ * <h2><a id=\"Color\">Color<\/a><\/h2>\n+ * A light source produces a light of a single color. The appearance of an object illuminated by the light is a result\n+ * of the color of the light and the material the object is made of. For example, for a blue light, a white object will\n+ * appear blue, a black object will appear black, and a (255, 0, 255)-colored object will appear blue, as the light\n+ * \"selects\" only the blue component of the material color. The mathematical definition of the material-light\n+ * interaction is available in {@link javafx.scene.paint.PhongMaterial PhongMaterial}.\n+ * <p>\n+ * See also the implementation notes section.\n+ *\n+ * <h2><a id=\"Scopes\">Scopes<\/a><\/h2>\n+ * A light has a {@code scope} list and an {@code exclusionScope} list that define which nodes are illuminated by it and\n+ * which aren't. A node can exist in only one of the lists: if it is added to one, it is silently removed from the\n+ * other. If a node does not exist in any list, it inherits its affected state from its parent, recursively. An\n+ * exception to this is that a light with an empty {@code scope} affects all nodes in its scene\/subscene implicitly\n+ * (except for those in its {@code exlusionScope}) as if the root of the scene is in the {@code scope}.\n@@ -69,4 +121,0 @@\n- * A node can exist in only one of the lists, if it is added to one, it is silently removed from the other. If a node\n- * does not exist in any list, it inherits its affected state from its parent, recursively. An exception to this is that\n- * a light with an empty {@code scope} affects all nodes in its scene\/subscene implicitly (except for those in its\n- * {@code exlusionScope}) as if the root of the scene is in the {@code scope}. <br>\n@@ -75,1 +123,1 @@\n- * scope. Instead, the scope can remain wide and specific nodes can be excluded.\n+ * scope. Instead, the scope can remain wide, and specific nodes can be excluded with the exclusion scope.\n@@ -77,0 +125,5 @@\n+ * <h2><a id=\"Direction\">Direction<\/a><\/h2>\n+ * The direction of the light is defined by the {@code direction} vector property of the light. The light's\n+ * direction can be rotated by setting a rotation transform on the light. For example, if the direction vector is\n+ * {@code (1, 1, 1)} and the light is not rotated, it will point in the {@code (1, 1, 1)} direction, and if the light is\n+ * rotated 90 degrees on the y axis, it will point in the {@code (1, 1, -1)} direction.\n@@ -78,3 +131,1 @@\n- * Note that this is a conditional feature. See\n- * {@link javafx.application.ConditionalFeature#SCENE3D ConditionalFeature.SCENE3D}\n- * for more information.\n+ * Light types that do not have a direction are not affected by rotation transforms.\n@@ -82,0 +133,5 @@\n+ * <h2><a id=\"Attenuation\">Distance Attenuation<\/a><\/h2>\n+ * Any pixel within the range of the light will be illuminated by it (unless it belongs to a {@code Shape3D} outside of\n+ * its <a href=\"#Scopes\">scope<\/a>). The distance is measured from the light's position to the pixel's position, and is\n+ * checked to be within the maximum range of the light, as defined by its {@code maxRange} property. The light's\n+ * position can be changed by setting a translation transform on the light.\n@@ -83,3 +139,27 @@\n- * An application should not extend the {@code LightBase} class directly. Doing so may lead to\n- * an {@code UnsupportedOperationException} being thrown.\n- * <\/p>\n+ * The light's intensity can be set to change over distance by attenuating it. The attenuation formula\n+ * <p>\n+ * {@code attn = 1 \/ (ca + la * dist + qa * dist^2)}\n+ * <p>\n+ * defines 3 coefficients: {@code ca}, {@code la}, and {@code qa}, which control the constant, linear, and quadratic\n+ * behaviors of intensity falloff over distance, respectively. The effective color of the light at a given point in\n+ * space is {@code color * attn}. It is possible, albeit unrealistic, to specify negative values to attenuation\n+ * coefficients. This allows the resulting attenuation factor to be negative, which results in the light's color being\n+ * subtracted from the material color instead of added to it, thus creating a \"shadow caster\".\n+ * <p>\n+ * For a realistic effect, {@code maxRange} should be set to a distance at which the attenuation is close to 0, as this\n+ * will give a soft cutoff.\n+ * <p>\n+ * Light types that are not distance-attenuated are not affected by translation transforms. For these types, a decrease\n+ * in intensity can be achieved by using a darker color.\n+ *\n+ * <p>\n+ * <b>Note<\/b>: this is a conditional feature. See\n+ * {@link javafx.application.ConditionalFeature#SCENE3D ConditionalFeature.SCENE3D} for more information.\n+ *\n+ * @implNote\n+ * The following applies to the {@code color} property of the light:\n+ * <ol>\n+ *   <li> A black colored light is ignored since its contribution is 0.\n+ *   <li> The transparency (alpha) component of a light is ignored.\n+ * <\/ol>\n+ * These behaviors are not specified and could change in the future.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/LightBase.java","additions":98,"deletions":18,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,3 @@\n- * source is a single point in space. Any pixel within the range of the light will be illuminated by it,\n- * unless it belongs to a {@code Shape3D} outside of its {@code scope}.\n+ * source is a single point in space. It is <a href=\"LightBase.html#Attenuation\">attenuated<\/a> with the\n+ * {@link #constantAttenuationProperty() constantAttenuation}, {@link #linearAttenuationProperty() linearAttenuation},\n+ * {@link #quadraticAttenuationProperty() quadraticAttenuation}, and {@link #maxRangeProperty() maxRange} properties.\n@@ -42,13 +43,2 @@\n- * The light's intensity can be set to decrease over distance by attenuating it. The attenuation formula\n- * <p>\n- * {@code attn = 1 \/ (ca + la * dist + qa * dist^2)}\n- * <p>\n- * defines 3 coefficients: {@code ca}, {@code la}, and {@code qa}, which control the constant, linear, and\n- * quadratic behaviors of intensity falloff over distance, respectively. The effective color of the light\n- * at a given point in space is {@code color * attn}. It is possible, albeit unrealistic, to specify negative\n- * values to attenuation coefficients. This allows the resulting attenuation factor to be negative, which\n- * results in the light's color being subtracted from the material instead of added to it, thus creating a\n- * \"shadow caster\".\n- * <p>\n- * For a realistic effect, {@code maxRange} should be set to a distance at which the attenuation is close to 0\n- * as this will give a soft cutoff.\n+ * {@code PointLight}s can represent point-like light sources with little to no directionality. Light bulbs and candles\n+ * are common light sources that can be simulated with this light type.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/PointLight.java","additions":6,"deletions":16,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,5 +42,3 @@\n- * A {@code SpotLight} is a {@code PointLight} that radiates light in a cone in a specific direction.\n- * The direction is defined by the {@link #directionProperty() direction} vector property of the light. The direction\n- * can be rotated by setting a rotation transform on the {@code SpotLight}. For example, if the direction vector is\n- * {@code (1, 1, 1)} and the light is not rotated, it will point in the {@code (1, 1, 1)} direction, and if the light is\n- * rotated 90 degrees on the y axis, it will point in the {@code (1, 1, -1)} direction.\n+ * A light source that radiates light in a cone in a specific direction away from itself. The\n+ * <a href=\"LightBase.html#Direction\">direction<\/a> is defined by the {@link #directionProperty() direction} vector\n+ * property.\n@@ -48,2 +46,2 @@\n- * In addition to the factors that control the light intensity of a {@code PointLight}, a {@code SpotLight} has a\n- * light-cone attenuation factor, {@code spot}, that is determined by 3 properties:\n+ * In addition to the <a href=\"LightBase.html#Attenuation\">attenuation<\/a> factors that control the light intensity over\n+ * distance, a {@code SpotLight} has a light-cone attenuation factor, {@code spot}, that is determined by 3 properties:\n@@ -71,0 +69,3 @@\n+ * {@code SpotLight}s can represent point-like light sources with directionality. Flashlights and floodlights are\n+ * common light sources that can be simulated with this light type.\n+ * <p>\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/SpotLight.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"}]}