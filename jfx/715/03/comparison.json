{"files":[{"patch":"@@ -901,0 +901,5 @@\n+        \/\/ If this window is closed from within performKeyEquivalent the OS might\n+        \/\/ try to send the same event to the new key window. To prevent this we\n+        \/\/ ensure that performKeyEquivalent returns YES.\n+        window->isClosed = YES;\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassWindow.m","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,163 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.robot.javafx.scene;\n+\n+import com.sun.javafx.PlatformUtil;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Parent;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Label;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Modality;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+\n+\/\/ When a key equivalent closes a window it can be passed\n+\/\/ to the new key window and processed twice.\n+public class DoubleShortcutProcessingTest {\n+\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n+    static CountDownLatch dialogLatch = new CountDownLatch(1);\n+\n+    static volatile Stage stage;\n+    static volatile TestApp testApp;\n+\n+    @Test\n+    void testDoubleShortcut() {\n+        Assumptions.assumeTrue(PlatformUtil.isMac());\n+        testApp.startTest();\n+        waitForLatch(dialogLatch, 5, \"Dialog never received shortcut\");\n+        if (testApp.failed())\n+            Assertions.fail(\"performKeyEquivalent was handled twice in separate windows\");\n+    }\n+\n+    @BeforeAll\n+    static void initFX() throws Exception {\n+        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n+        waitForLatch(startupLatch, 10, \"FX runtime failed to start.\");\n+    }\n+\n+    @AfterAll\n+    static void exit() {\n+        Platform.runLater(stage::hide);\n+        Platform.exit();\n+    }\n+\n+    public static class TestApp extends Application {\n+\n+        private boolean failure = false;\n+        private Dialog dialog = null;\n+\n+        @Override\n+        public void start(Stage primaryStage) {\n+\n+            testApp = this;\n+            stage = primaryStage;\n+\n+            \/\/ Main window\n+            Label label = new Label(\"Testing double performKeyEquivalent\");\n+            Scene scene = new Scene(new VBox(label), 200, 200);\n+            scene.addEventHandler(KeyEvent.KEY_PRESSED, event -> {\n+                if (event.getCode() == KeyCode.ENTER && event.isShortcutDown()) {\n+                    failure = true;\n+                    event.consume();\n+                }\n+            });\n+            stage.setScene(scene);\n+\n+            \/\/ Dialog\n+            VBox pane = new VBox(new Label(\"Pressing Cmd+Enter\"));\n+            dialog = new Dialog(stage, pane);\n+\n+            stage.setOnShown(e -> { startupLatch.countDown(); });\n+            stage.show();\n+        }\n+\n+        public void startTest() {\n+            Platform.runLater(() -> {\n+                \/\/ Need to ensure Cmd is present so this is handled\n+                \/\/ as a key equivalent.\n+                dialog.setOnShown(e -> {\n+                    Robot robot = new Robot();\n+                    robot.keyPress(KeyCode.COMMAND);\n+                    robot.keyPress(KeyCode.ENTER);\n+                    robot.keyRelease(KeyCode.ENTER);\n+                    robot.keyRelease(KeyCode.COMMAND);\n+                });\n+                dialog.showAndWait();\n+                dialogLatch.countDown();\n+            });\n+        }\n+\n+        public boolean failed() {\n+            return failure;\n+        }\n+\n+        private static class Dialog extends Stage {\n+\n+            public Dialog(Stage owner, Parent layout) {\n+                super(StageStyle.DECORATED);\n+                Scene layoutScene = new Scene(layout, 100, 100);\n+                this.setScene(layoutScene);\n+\n+                layoutScene.addEventHandler(KeyEvent.KEY_PRESSED, event -> {\n+                    if (event.getCode() == KeyCode.ENTER && event.isShortcutDown()) {\n+                        close();\n+                        event.consume();\n+                    }\n+                });\n+\n+                this.hide();\n+                this.initModality(Modality.APPLICATION_MODAL);\n+                this.initOwner(owner);\n+                this.setResizable(true);\n+            }\n+        }\n+    }\n+\n+    private static void waitForLatch(CountDownLatch latch, int seconds, String msg) {\n+        try {\n+            if (!latch.await(seconds, TimeUnit.SECONDS)) {\n+                Assertions.fail(msg);\n+            }\n+        } catch (Exception ex) {\n+            Assertions.fail(\"Unexpected exception: \" + ex);\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/DoubleShortcutProcessingTest.java","additions":163,"deletions":0,"binary":false,"changes":163,"status":"added"}]}