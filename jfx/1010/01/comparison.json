{"files":[{"patch":"@@ -27,1 +27,1 @@\n-version=openjfx20\n+version=openjfx21\n","filename":".jcheck\/conf","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-jfx.release.major.version=20\n+jfx.release.major.version=21\n@@ -59,2 +59,2 @@\n-javadoc.title=JavaFX 20\n-javadoc.header=JavaFX&nbsp;20\n+javadoc.title=JavaFX 21\n+javadoc.header=JavaFX&nbsp;21\n","filename":"build.properties","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-        assertTrue(version.startsWith(\"20\"));\n+        assertTrue(version.startsWith(\"21\"));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/runtime\/VersionInfoTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -207,0 +207,11 @@\n+\n+    \/** returns the number of visible rows in Tree\/TableView *\/\n+    public static int getItemCount(TableViewSkinBase<?,?,?,?,?> skin) {\n+        Object control = skin.getSkinnable();\n+        if (control instanceof TableView table) {\n+            return table.getItems().size();\n+        } else if (control instanceof TreeTableView tree) {\n+            return tree.getExpandedItemCount();\n+        }\n+        return 0;\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableSkinUtils.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -910,2 +910,2 @@\n-        if (contentWidth <= 0) {\n-            \/\/ Fix for RT-14855 when there is no content in the TableView.\n+        if ((contentWidth <= 0) || (TableSkinUtils.getItemCount(this) == 0)) {\n+            \/\/ when there is no content in the TableView.\n@@ -918,1 +918,1 @@\n-        \/\/ FIXME this isn't perfect, but it prevents RT-14885, which results in\n+        \/\/ this isn't perfect, but it prevents RT-14885\/JDK-8089280, which results in\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableViewSkinBase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -68,0 +68,8 @@\n+    protected static double sumColumnWidths(List<? extends TableColumnBase<?,?>> cols) {\n+        double w = 0.0;\n+        for (TableColumnBase<?,?> c: cols) {\n+            w += c.getWidth();\n+        }\n+        return w;\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ResizeHelperTestBase.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import org.junit.Assert;\n@@ -225,0 +226,41 @@\n+\n+    \/**\n+     * Verifies that the constrained resize policy still works once all the items have been removed JDK-8137244.\n+     *\/\n+    @Test\n+    public void testConstrainedResizeOfEmptyTable() {\n+        Object[] spec = {\n+            Cmd.ROWS, 5,\n+            Cmd.COL, Cmd.PREF, 200,\n+            Cmd.COL, Cmd.PREF, 200,\n+        };\n+        \/\/ allow for borders\n+        double tolerance = 6.0;\n+\n+        TableView<String> t = createTable(spec);\n+\n+        stageLoader = new StageLoader(new BorderPane(t));\n+        try {\n+            for (int ip = 0; ip < POLICIES.length; ip++) {\n+                Callback<TableView.ResizeFeatures, Boolean> policy = createPolicy(ip);\n+                t.setColumnResizePolicy(policy);\n+\n+                \/\/ smaller than preferred\n+                t.setPrefWidth(300);\n+                Toolkit.getToolkit().firePulse();\n+                checkInvariants(t);\n+                Assert.assertEquals(t.getWidth(), sumColumnWidths(t.getColumns()), tolerance);\n+\n+                \/\/ clear items\n+                t.getItems().clear();\n+\n+                \/\/ make it wider, check if resized correctly\n+                t.setPrefWidth(1000);\n+                Toolkit.getToolkit().firePulse();\n+                checkInvariants(t);\n+                Assert.assertEquals(t.getWidth(), sumColumnWidths(t.getColumns()), tolerance);\n+            }\n+        } finally {\n+            stageLoader.dispose();\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewResizeTest.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+import org.junit.Assert;\n+import org.junit.Test;\n+import com.sun.javafx.tk.Toolkit;\n@@ -38,2 +41,0 @@\n-import org.junit.Test;\n-import com.sun.javafx.tk.Toolkit;\n@@ -226,0 +227,42 @@\n+\n+    \/**\n+     * Verifies that the constrained resize policy still works once all the items have been removed JDK-8137244.\n+     *\/\n+    @Test\n+    public void testConstrainedResizeOfEmptyTable() {\n+        Object[] spec = {\n+            Cmd.ROWS, 5,\n+            Cmd.COL, Cmd.PREF, 200,\n+            Cmd.COL, Cmd.PREF, 200,\n+        };\n+        \/\/ allow for borders\n+        double tolerance = 6.0;\n+\n+        TreeTableView<String> t = createTable(spec);\n+        t.setShowRoot(false);\n+\n+        stageLoader = new StageLoader(new BorderPane(t));\n+        try {\n+            for (int ip = 0; ip < POLICIES.length; ip++) {\n+                Callback<TreeTableView.ResizeFeatures, Boolean> policy = createPolicy(ip);\n+                t.setColumnResizePolicy(policy);\n+\n+                \/\/ smaller than preferred\n+                t.setPrefWidth(300);\n+                Toolkit.getToolkit().firePulse();\n+                checkInvariants(t);\n+                Assert.assertEquals(t.getWidth(), sumColumnWidths(t.getColumns()), tolerance);\n+\n+                \/\/ clear items\n+                t.getRoot().getChildren().clear();\n+\n+                \/\/ make it wider, check if resized correctly\n+                t.setPrefWidth(1000);\n+                Toolkit.getToolkit().firePulse();\n+                checkInvariants(t);\n+                Assert.assertEquals(t.getWidth(), sumColumnWidths(t.getColumns()), tolerance);\n+            }\n+        } finally {\n+            stageLoader.dispose();\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewResizeTest.java","additions":45,"deletions":2,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -138,0 +138,1 @@\n+    gboolean dropped;\n@@ -140,1 +141,1 @@\n-} enter_ctx = {NULL, FALSE, NULL, 0, 0};\n+} enter_ctx = {NULL, FALSE, FALSE, NULL, 0, 0};\n@@ -191,2 +192,6 @@\n-    mainEnv->CallVoidMethod(ctx->get_jview(), jViewNotifyDragLeave, NULL);\n-    CHECK_JNI_EXCEPTION(mainEnv)\n+    \/\/ if there is a drop going on do not report drag leave to java because\n+    \/\/ it will reset the drag gesture.\n+    if (!enter_ctx.dropped) {\n+        mainEnv->CallVoidMethod(ctx->get_jview(), jViewNotifyDragLeave, NULL);\n+        CHECK_JNI_EXCEPTION(mainEnv)\n+    }\n@@ -203,1 +208,1 @@\n-\n+    enter_ctx.dropped = TRUE;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_dnd.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"}]}