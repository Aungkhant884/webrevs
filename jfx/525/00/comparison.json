{"files":[{"patch":"@@ -1670,0 +1670,5 @@\n+                    if (((Region) region).getUserAgentStylesheet() != null && !((Region) region).getUserAgentStylesheet().equals(regionUserAgentStylesheet)) {\n+                        weakRegionUserAgentStylesheetMap.put((Region) region, ((Region) region).getUserAgentStylesheet());\n+                        regionUserAgentStylesheet = ((Region) region).getUserAgentStylesheet();\n+                    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/StyleManager.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,7 +29,1 @@\n-import javafx.beans.property.BooleanProperty;\n-import javafx.beans.property.DoubleProperty;\n-import javafx.beans.property.ObjectProperty;\n-import javafx.beans.property.ReadOnlyDoubleProperty;\n-import javafx.beans.property.ReadOnlyDoubleWrapper;\n-import javafx.beans.property.ReadOnlyObjectProperty;\n-import javafx.beans.property.ReadOnlyObjectPropertyBase;\n+import javafx.beans.property.*;\n@@ -3390,1 +3384,1 @@\n-     * by overriding this method. These styles are used in addition to whatever user-agent stylesheets\n+     * by setting this property. These styles are used in addition to whatever user-agent stylesheets\n@@ -3393,0 +3387,4 @@\n+     * If a custom control changes its user-agent stylesheet at runtime the property will automatically\n+     * reapply the CSS therefore allowing dynamic implementations.\n+     * <\/p>\n+     * <p>\n@@ -3398,8 +3396,0 @@\n-     * <p>\n-     * Subclasses overriding this method should not assume any particular implementation approach as to\n-     * the number and frequency with which it is called. For this reason, attempting any kind of\n-     * dynamic implementation (i.e. returning different user agent stylesheet values) based on some\n-     * state change is highly discouraged, as there is no guarantee when, or even if, this method will\n-     * be called. Some JavaFX CSS implementations may choose to cache this response for an indefinite\n-     * period of time, and therefore there should be no expectation around when this method is called.\n-     * <\/p>\n@@ -3432,3 +3422,0 @@\n-     *\n-     * @return A string URL\n-     * @since JavaFX 8u40\n@@ -3436,0 +3423,7 @@\n+    private final StringProperty userAgentStylesheet = new SimpleStringProperty() {\n+        @Override\n+        protected void invalidated() {\n+            NodeHelper.reapplyCSS(Region.this);\n+        }\n+    };\n+\n@@ -3437,1 +3431,9 @@\n-        return null;\n+        return userAgentStylesheet.get();\n+    }\n+\n+    public StringProperty userAgentStylesheetProperty() {\n+        return userAgentStylesheet;\n+    }\n+\n+    public void setUserAgentStylesheet(String userAgentStylesheet) {\n+        this.userAgentStylesheet.set(userAgentStylesheet);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Region.java","additions":22,"deletions":20,"binary":false,"changes":42,"status":"modified"}]}