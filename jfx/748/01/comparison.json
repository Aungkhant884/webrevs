{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -339,1 +339,1 @@\n-            positionInArea(decrementArrowButton, x, h - tallestArrowButton,\n+            positionInArea(decrementArrowButton, x, y + h - tallestArrowButton,\n@@ -352,1 +352,1 @@\n-            positionInArea(incrementArrowButton, w - widestArrowButton, y,\n+            positionInArea(incrementArrowButton, x + w - widestArrowButton, y,\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/SpinnerSkin.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.skin;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javafx.geometry.BoundingBox;\n+import javafx.geometry.Insets;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.skin.SpinnerSkin;\n+import javafx.scene.layout.Region;\n+\n+\/**\n+ * Tests for SpinnerSkin\n+ *\/\n+public class SpinnerSkinTest {\n+    private static final double CONTROL_WIDTH = 300;\n+    private static final double CONTROL_HEIGHT = 300;\n+    private static final double PADDING_TOP = 5;\n+    private static final double PADDING_RIGHT = 7;\n+    private static final double PADDING_BOTTOM = 11;\n+    private static final double PADDING_LEFT = 13;\n+    private static final double WIDTH = CONTROL_WIDTH - PADDING_LEFT - PADDING_RIGHT;\n+    private static final double HEIGHT = CONTROL_HEIGHT - PADDING_TOP - PADDING_BOTTOM;\n+    private static final double PADDING_DECREMENT_ARROW_TOP = 1;\n+    private static final double PADDING_DECREMENT_ARROW_RIGHT = 2;\n+    private static final double PADDING_DECREMENT_ARROW_BOTTOM = 3;\n+    private static final double PADDING_DECREMENT_ARROW_LEFT = 4;\n+    private static final double PADDING_INCREMENT_ARROW_TOP = 2;\n+    private static final double PADDING_INCREMENT_ARROW_RIGHT = 1;\n+    private static final double PADDING_INCREMENT_ARROW_BOTTOM = 4;\n+    private static final double PADDING_INCREMENT_ARROW_LEFT = 3;\n+    private static final double DECREMENT_ARROW_WIDTH = PADDING_DECREMENT_ARROW_LEFT + PADDING_DECREMENT_ARROW_RIGHT;\n+    private static final double DECREMENT_ARROW_HEIGHT = PADDING_DECREMENT_ARROW_TOP + PADDING_DECREMENT_ARROW_BOTTOM;\n+    private static final double INCREMENT_ARROW_WIDTH = PADDING_INCREMENT_ARROW_LEFT + PADDING_INCREMENT_ARROW_RIGHT;\n+    private static final double INCREMENT_ARROW_HEIGHT = PADDING_INCREMENT_ARROW_TOP + PADDING_INCREMENT_ARROW_BOTTOM;\n+\n+    private Spinner<?> spinner;\n+\n+    private Region decrementArrowButton;\n+    private Region incrementArrowButton;\n+\n+    @Before\n+    public void before() {\n+        spinner = new Spinner<>();\n+        spinner.resize(CONTROL_WIDTH, CONTROL_HEIGHT);\n+        spinner.setSkin(new SpinnerSkin<>(spinner));\n+\n+        decrementArrowButton = (Region)spinner.lookup(\".decrement-arrow-button\");\n+        incrementArrowButton = (Region)spinner.lookup(\".increment-arrow-button\");\n+\n+        \/\/ Give everything some weird paddings so anomalies should not go undetected:\n+        spinner.setPadding(new Insets(PADDING_TOP, PADDING_RIGHT, PADDING_BOTTOM, PADDING_LEFT));\n+        decrementArrowButton.setPadding(new Insets(PADDING_DECREMENT_ARROW_TOP, PADDING_DECREMENT_ARROW_RIGHT, PADDING_DECREMENT_ARROW_BOTTOM, PADDING_DECREMENT_ARROW_LEFT));\n+        incrementArrowButton.setPadding(new Insets(PADDING_INCREMENT_ARROW_TOP, PADDING_INCREMENT_ARROW_RIGHT, PADDING_INCREMENT_ARROW_BOTTOM, PADDING_INCREMENT_ARROW_LEFT));\n+    }\n+\n+    @Test\n+    public void shouldPositionArrowsRightAndAboveEachOther() {  \/\/ This is the default style\n+        spinner.layout();\n+\n+        double widest = Math.max(DECREMENT_ARROW_WIDTH, INCREMENT_ARROW_WIDTH);\n+\n+        assertEquals(new BoundingBox(PADDING_LEFT + WIDTH - widest, PADDING_TOP + HEIGHT \/ 2, widest, HEIGHT \/ 2), decrementArrowButton.getBoundsInParent());\n+        assertEquals(new BoundingBox(PADDING_LEFT + WIDTH - widest, PADDING_TOP, widest, HEIGHT \/ 2), incrementArrowButton.getBoundsInParent());\n+    }\n+\n+    @Test\n+    public void shouldPositionArrowsLeftAndAboveEachOther() {\n+        spinner.getStyleClass().setAll(Spinner.STYLE_CLASS_ARROWS_ON_LEFT_VERTICAL);\n+        spinner.layout();\n+\n+        double widest = Math.max(DECREMENT_ARROW_WIDTH, INCREMENT_ARROW_WIDTH);\n+\n+        assertEquals(new BoundingBox(PADDING_LEFT, PADDING_TOP + HEIGHT \/ 2, widest, HEIGHT \/ 2), decrementArrowButton.getBoundsInParent());\n+        assertEquals(new BoundingBox(PADDING_LEFT, PADDING_TOP, widest, HEIGHT \/ 2), incrementArrowButton.getBoundsInParent());\n+    }\n+\n+    @Test\n+    public void shouldPositionArrowsLeftAndNextToEachOther() {\n+        spinner.getStyleClass().setAll(Spinner.STYLE_CLASS_ARROWS_ON_LEFT_HORIZONTAL);\n+        spinner.layout();\n+\n+        assertEquals(new BoundingBox(PADDING_LEFT, PADDING_TOP, DECREMENT_ARROW_WIDTH, HEIGHT), decrementArrowButton.getBoundsInParent());\n+        assertEquals(new BoundingBox(PADDING_LEFT + DECREMENT_ARROW_WIDTH, PADDING_TOP, INCREMENT_ARROW_WIDTH, HEIGHT), incrementArrowButton.getBoundsInParent());\n+    }\n+\n+    @Test\n+    public void shouldPositionArrowsRightAndNextToEachOther() {\n+        spinner.getStyleClass().setAll(Spinner.STYLE_CLASS_ARROWS_ON_RIGHT_HORIZONTAL);\n+        spinner.layout();\n+\n+        assertEquals(new BoundingBox(PADDING_LEFT + WIDTH - DECREMENT_ARROW_WIDTH - INCREMENT_ARROW_WIDTH, PADDING_TOP, DECREMENT_ARROW_WIDTH, HEIGHT), decrementArrowButton.getBoundsInParent());\n+        assertEquals(new BoundingBox(PADDING_LEFT + WIDTH - INCREMENT_ARROW_WIDTH, PADDING_TOP, INCREMENT_ARROW_WIDTH, HEIGHT), incrementArrowButton.getBoundsInParent());\n+    }\n+\n+    @Test\n+    public void shouldPositionArrowsSplitLeftAndRight() {\n+        spinner.getStyleClass().setAll(Spinner.STYLE_CLASS_SPLIT_ARROWS_HORIZONTAL);\n+        spinner.layout();\n+\n+        double widest = Math.max(DECREMENT_ARROW_WIDTH, INCREMENT_ARROW_WIDTH);\n+\n+        assertEquals(new BoundingBox(PADDING_LEFT, PADDING_TOP, widest, HEIGHT), decrementArrowButton.getBoundsInParent());\n+        assertEquals(new BoundingBox(PADDING_LEFT + WIDTH - widest, PADDING_TOP, widest, HEIGHT), incrementArrowButton.getBoundsInParent());\n+    }\n+\n+    @Test\n+    public void shouldPositionArrowsSplitTopAndBottom() {\n+        spinner.getStyleClass().setAll(Spinner.STYLE_CLASS_SPLIT_ARROWS_VERTICAL);\n+        spinner.layout();\n+\n+        double tallest = Math.max(DECREMENT_ARROW_HEIGHT, INCREMENT_ARROW_HEIGHT);\n+\n+        assertEquals(new BoundingBox(PADDING_LEFT, PADDING_TOP + HEIGHT - tallest, WIDTH, tallest), decrementArrowButton.getBoundsInParent());\n+        assertEquals(new BoundingBox(PADDING_LEFT, PADDING_TOP, WIDTH, tallest), incrementArrowButton.getBoundsInParent());\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SpinnerSkinTest.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"}]}