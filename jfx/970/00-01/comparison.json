{"files":[{"patch":"@@ -1,89 +0,0 @@\n-package checkboxTreeView;\n-\n-import java.io.IOException;\n-\n-import javafx.application.Application;\n-import javafx.geometry.Pos;\n-import javafx.scene.Parent;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.CheckBox;\n-import javafx.scene.control.CheckBoxTreeItem;\n-import javafx.scene.control.TreeView;\n-import javafx.scene.control.cell.CheckBoxTreeCell;\n-import javafx.scene.layout.BorderPane;\n-import javafx.scene.layout.HBox;\n-import javafx.stage.Stage;\n-\n-public class CheckBoxTreeEditor extends Application {\n-\n-    private final TreeView<String> tree = new TreeView<>(new CheckBoxTreeItem<>(\"root\"));\n-    private int childNum;\n-\n-    @Override\n-    public void start(Stage stage) throws IOException {\n-        setupTree();\n-        var borderPane = new BorderPane(tree);\n-        borderPane.setTop(createToolbar());\n-        var scene = new Scene(borderPane);\n-        stage.setScene(scene);\n-        stage.show();\n-    }\n-\n-    private void setupTree() {\n-        tree.setCellFactory(CheckBoxTreeCell.forTreeView());\n-\n-        var button = new Button(\"0\");\n-        tree.getRoot().setGraphic(button);\n-        tree.getRoot().setExpanded(true);\n-        tree.getSelectionModel().select(tree.getRoot());\n-\n-        \/\/ add children for initial setup as needed\n-        addChild(true, true);\n-\/\/      var c2 = addChild(true, false);\n-\/\/\n-\/\/      c1.setSelected(true);\n-\/\/      c1.setIndeterminate(true);\n-\/\/\n-\/\/      c2.setSelected(false);\n-\/\/      c2.setIndeterminate(true);\n-\/\/\n-\/\/      c1.setIndeterminate(false);\n-\/\/      c2.setIndeterminate(false);\n-    }\n-\n-    private Parent createToolbar() {\n-        var indeterminate = new CheckBox(\"Indeterminate\");\n-        var selected = new CheckBox(\"Selected\");\n-\n-        var add = new Button(\"Add\");\n-        add.setOnAction(e -> addChild(indeterminate.isSelected(), selected.isSelected()));\n-\n-        var remove = new Button(\"Remove\");\n-        remove.setOnAction(e -> removeChild());\n-\n-        var toolbar = new HBox(5, add, remove, indeterminate, selected);\n-        toolbar.setAlignment(Pos.CENTER_LEFT);\n-        return toolbar;\n-    }\n-\n-    private CheckBoxTreeItem<String> addChild(boolean indeterminate, boolean selected) {\n-        var item = new CheckBoxTreeItem<>(\"child \" + childNum++);\n-        var button = new Button(\"\" + childNum);\n-        item.setGraphic(button);\n-        item.setSelected(selected);\n-        item.setIndeterminate(indeterminate);\n-        item.setExpanded(true);\n-        tree.getSelectionModel().getSelectedItem().getChildren().add(item);\n-        return item;\n-    }\n-\n-    private void removeChild() {\n-        var selectedItem = tree.getSelectionModel().getSelectedItem();\n-        selectedItem.getParent().getChildren().remove(selectedItem);\n-    }\n-\n-    public static void main(String[] args) {\n-        launch(args);\n-    }\n-}\n","filename":"tests\/performance\/checkboxTreeView\/src\/main\/java\/checkboxTreeView\/CheckBoxTreeEditor.java","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package main;\n+\n+import java.io.IOException;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Pos;\n+import javafx.scene.Parent;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.CheckBoxTreeItem;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.control.cell.CheckBoxTreeCell;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.HBox;\n+import javafx.stage.Stage;\n+\n+public class CheckBoxTreeEditor extends Application {\n+\n+    private final TreeView<String> tree = new TreeView<>(new CheckBoxTreeItem<>(\"root\"));\n+    private int childNum;\n+\n+    @Override\n+    public void start(Stage stage) throws IOException {\n+        setupTree();\n+        var borderPane = new BorderPane(tree);\n+        borderPane.setTop(createToolbar());\n+        var scene = new Scene(borderPane);\n+        stage.setScene(scene);\n+        stage.show();\n+    }\n+\n+    private void setupTree() {\n+        tree.setCellFactory(CheckBoxTreeCell.forTreeView());\n+\n+        var button = new Button(\"0\");\n+        tree.getRoot().setGraphic(button);\n+        tree.getRoot().setExpanded(true);\n+        tree.getSelectionModel().select(tree.getRoot());\n+\n+        \/\/ add children for initial setup as needed\n+        addChild(true, true);\n+\/\/      var c2 = addChild(true, false);\n+\/\/\n+\/\/      c1.setSelected(true);\n+\/\/      c1.setIndeterminate(true);\n+\/\/\n+\/\/      c2.setSelected(false);\n+\/\/      c2.setIndeterminate(true);\n+\/\/\n+\/\/      c1.setIndeterminate(false);\n+\/\/      c2.setIndeterminate(false);\n+    }\n+\n+    private Parent createToolbar() {\n+        var indeterminate = new CheckBox(\"Indeterminate\");\n+        var selected = new CheckBox(\"Selected\");\n+\n+        var add = new Button(\"Add\");\n+        add.setOnAction(e -> addChild(indeterminate.isSelected(), selected.isSelected()));\n+\n+        var remove = new Button(\"Remove\");\n+        remove.setOnAction(e -> removeChild());\n+\n+        var toolbar = new HBox(5, add, remove, indeterminate, selected);\n+        toolbar.setAlignment(Pos.CENTER_LEFT);\n+        return toolbar;\n+    }\n+\n+    private CheckBoxTreeItem<String> addChild(boolean indeterminate, boolean selected) {\n+        var item = new CheckBoxTreeItem<>(\"child \" + childNum++);\n+        var button = new Button(\"\" + childNum);\n+        item.setGraphic(button);\n+        item.setSelected(selected);\n+        item.setIndeterminate(indeterminate);\n+        item.setExpanded(true);\n+        tree.getSelectionModel().getSelectedItem().getChildren().add(item);\n+        return item;\n+    }\n+\n+    private void removeChild() {\n+        var selectedItem = tree.getSelectionModel().getSelectedItem();\n+        selectedItem.getParent().getChildren().remove(selectedItem);\n+    }\n+\n+    public static void main(String[] args) {\n+        launch(args);\n+    }\n+}\n","filename":"tests\/performance\/checkboxTreeView\/src\/main\/java\/main\/CheckBoxTreeEditor.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}