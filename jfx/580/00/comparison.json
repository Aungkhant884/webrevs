{"files":[{"patch":"@@ -353,0 +353,8 @@\n+\n+    NSRect flipFrame = [self _flipFrame];\n+    if (newX != flipFrame.origin.x || newY != flipFrame.origin.y) {\n+        \/\/ If the new location does not match the position of the window,\n+        \/\/ send back the actual position to notify the WindowStage,\n+        \/\/ as it is possible that the windowDidMove event is not triggered.\n+        [self _sendJavaWindowMoveEventForFrame:flipFrame];\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassWindow+Java.m","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.stage;\n+\n+import com.sun.javafx.PlatformUtil;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.beans.value.ChangeListener;\n+import javafx.scene.Scene;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Screen;\n+import javafx.stage.Stage;\n+import javafx.stage.WindowEvent;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.Assert.fail;\n+import static org.junit.Assume.assumeTrue;\n+\n+public class StageAtTopPositionTest {\n+    static CountDownLatch startupLatch;\n+    static Stage stage;\n+\n+    public static void main(String[] args) throws Exception {\n+        initFX();\n+        try {\n+            StageAtTopPositionTest test = new StageAtTopPositionTest();\n+            test.testMoveToTopPosition();\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+        } finally {\n+            teardown();\n+        }\n+    }\n+\n+    public static class TestApp extends Application {\n+\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            primaryStage.setScene(new Scene(new VBox()));\n+            stage = primaryStage;\n+            stage.setX(300);\n+            stage.setY(400);\n+            stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e ->\n+                                    Platform.runLater(startupLatch::countDown));\n+            stage.show();\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void initFX() {\n+        startupLatch = new CountDownLatch(1);\n+        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n+        try {\n+            if (!startupLatch.await(15, TimeUnit.SECONDS)) {\n+                fail(\"Timeout waiting for FX runtime to start\");\n+            }\n+        } catch (InterruptedException ex) {\n+            fail(\"Unexpected exception: \" + ex);\n+        }\n+    }\n+\n+\n+    @Test\n+    public void testMoveToTopPosition() throws Exception {\n+        \/\/ Only on Mac\n+        assumeTrue(PlatformUtil.isMac());\n+\n+        Thread.sleep(200);\n+        Assert.assertTrue(stage.isShowing());\n+        Assert.assertFalse(stage.isFullScreen());\n+\n+        final double minY = Screen.getPrimary().getVisualBounds().getMinY(); \/\/ Mac's system menubar height\n+\n+        CountDownLatch latch = new CountDownLatch(2);\n+        ChangeListener<Number> listenerY = (observable, oldValue, newValue) -> {\n+            if (Math.abs((Double) newValue - minY) < 0.1) {\n+                latch.countDown();\n+            };\n+        };\n+        stage.yProperty().addListener(listenerY);\n+\n+        \/\/ move once to y=0, gets moved to yMin\n+        Platform.runLater(() -> stage.setY(0));\n+        Thread.sleep(200);\n+        Assert.assertEquals(\"Window was moved once\", minY, stage.getY(), 0.1);\n+\n+        \/\/ move again to y=0, remains at yMin\n+        Platform.runLater(() -> stage.setY(0));\n+        latch.await(5, TimeUnit.SECONDS);\n+        stage.xProperty().removeListener(listenerY);\n+\n+        Assert.assertEquals(\"Window was moved twice\", minY, stage.getY(), 0.1);\n+    }\n+\n+    @AfterClass\n+    public static void teardown() {\n+        Platform.runLater(stage::hide);\n+        Platform.exit();\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/StageAtTopPositionTest.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"}]}