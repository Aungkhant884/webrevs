{"files":[{"patch":"@@ -0,0 +1,73 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!-- You may freely edit this file. See commented blocks below for -->\n+<!-- some examples of how to customize the build. -->\n+<!-- (If you delete it and reopen the project it will be recreated.) -->\n+<!-- By default, only the Clean and Build commands use this build script. -->\n+<!-- Commands such as Run, Debug, and Test only use this build script if -->\n+<!-- the Compile on Save feature is turned off for the project. -->\n+<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->\n+<!-- in the project's Project Properties dialog box.-->\n+<project name=\"FXMediaPlayer\" default=\"default\" basedir=\".\">\n+    <description>Builds, tests, and runs the project FXMediaPlayer.<\/description>\n+    <import file=\"nbproject\/build-impl.xml\"\/>\n+    <!--\n+\n+    There exist several targets which are by default empty and which can be\n+    used for execution of your tasks. These targets are usually executed\n+    before and after some main targets. They are:\n+\n+      -pre-init:                 called before initialization of project properties\n+      -post-init:                called after initialization of project properties\n+      -pre-compile:              called before javac compilation\n+      -post-compile:             called after javac compilation\n+      -pre-compile-single:       called before javac compilation of single file\n+      -post-compile-single:      called after javac compilation of single file\n+      -pre-compile-test:         called before javac compilation of JUnit tests\n+      -post-compile-test:        called after javac compilation of JUnit tests\n+      -pre-compile-test-single:  called before javac compilation of single JUnit test\n+      -post-compile-test-single: called after javac compilation of single JUunit test\n+      -pre-jar:                  called before JAR building\n+      -post-jar:                 called after JAR building\n+      -post-clean:               called after cleaning build products\n+\n+    (Targets beginning with '-' are not intended to be called on their own.)\n+\n+    Example of inserting an obfuscator after compilation could look like this:\n+\n+        <target name=\"-post-compile\">\n+            <obfuscate>\n+                <fileset dir=\"${build.classes.dir}\"\/>\n+            <\/obfuscate>\n+        <\/target>\n+\n+    For list of available properties check the imported\n+    nbproject\/build-impl.xml file.\n+\n+\n+    Another way to customize the build is by overriding existing main targets.\n+    The targets of interest are:\n+\n+      -init-macrodef-javac:     defines macro for javac compilation\n+      -init-macrodef-junit:     defines macro for junit execution\n+      -init-macrodef-debug:     defines macro for class debugging\n+      -init-macrodef-java:      defines macro for class execution\n+      -do-jar:                  JAR building\n+      run:                      execution of project\n+      -javadoc-build:           Javadoc generation\n+      test-report:              JUnit report generation\n+\n+    An example of overriding the target for project execution could look like this:\n+\n+        <target name=\"run\" depends=\"FXMediaPlayer-impl.jar\">\n+            <exec dir=\"bin\" executable=\"launcher.exe\">\n+                <arg file=\"${dist.jar}\"\/>\n+            <\/exec>\n+        <\/target>\n+\n+    Notice that the overridden target depends on the jar target and not only on\n+    the compile target as the regular run target does. Again, for a list of available\n+    properties which you can use, check the target you are overriding in the\n+    nbproject\/build-impl.xml file.\n+\n+    -->\n+<\/project>\n","filename":"tests\/manual\/media\/FXMediaPlayer\/build.xml","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"","filename":"tests\/manual\/media\/FXMediaPlayer\/manifest.mf","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"apps\/samples\/3DViewer\/manifest.mf","status":"copied"},{"patch":"@@ -0,0 +1,1689 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+*** GENERATED FROM project.xml - DO NOT EDIT  ***\n+***         EDIT ..\/build.xml INSTEAD         ***\n+\n+For the purpose of easier reading the script\n+is divided into following sections:\n+\n+  - initialization\n+  - compilation\n+  - jar\n+  - execution\n+  - debugging\n+  - test compilation\n+  - test execution\n+  - test debugging\n+  - applet\n+  - cleanup\n+\n+        -->\n+<project xmlns:if=\"ant:if\" xmlns:j2seproject1=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/1\" xmlns:j2seproject3=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\" xmlns:jaxrpc=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/jax-rpc\" xmlns:unless=\"ant:unless\" basedir=\"..\" default=\"default\" name=\"FXMediaPlayer-impl\">\n+    <fail message=\"Please build using Ant 1.8.0 or higher.\">\n+        <condition>\n+            <not>\n+                <antversion atleast=\"1.8.0\"\/>\n+            <\/not>\n+        <\/condition>\n+    <\/fail>\n+    <target depends=\"test,jar\" description=\"Build and test whole project.\" name=\"default\"\/>\n+    <!--\n+                ======================\n+                INITIALIZATION SECTION\n+                ======================\n+            -->\n+    <target name=\"-pre-init\">\n+        <!-- Empty placeholder for easier customization. -->\n+        <!-- You can override this target in the ..\/build.xml file. -->\n+    <\/target>\n+    <target depends=\"-pre-init\" name=\"-init-private\">\n+        <property file=\"nbproject\/private\/config.properties\"\/>\n+        <property file=\"nbproject\/private\/configs\/${config}.properties\"\/>\n+        <property file=\"nbproject\/private\/private.properties\"\/>\n+    <\/target>\n+    <target depends=\"-pre-init,-init-private\" name=\"-init-user\">\n+        <property file=\"${user.properties.file}\"\/>\n+        <!-- The two properties below are usually overridden -->\n+        <!-- by the active platform. Just a fallback. -->\n+        <property name=\"default.javac.source\" value=\"1.6\"\/>\n+        <property name=\"default.javac.target\" value=\"1.6\"\/>\n+    <\/target>\n+    <target depends=\"-pre-init,-init-private,-init-user\" name=\"-init-project\">\n+        <property file=\"nbproject\/configs\/${config}.properties\"\/>\n+        <property file=\"nbproject\/project.properties\"\/>\n+    <\/target>\n+    <target name=\"-init-modules-supported\">\n+        <condition property=\"modules.supported.internal\" value=\"true\">\n+            <not>\n+                <matches pattern=\"1\\.[0-8](\\..*)?\" string=\"${javac.source}\"\/>\n+            <\/not>\n+        <\/condition>\n+    <\/target>\n+    <target depends=\"-init-modules-supported\" if=\"modules.supported.internal\" name=\"-init-macrodef-modulename\">\n+        <macrodef name=\"modulename\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute name=\"property\"\/>\n+            <attribute name=\"sourcepath\"\/>\n+            <sequential>\n+                <loadresource property=\"@{property}\" quiet=\"true\">\n+                    <javaresource classpath=\"@{sourcepath}\" name=\"module-info.java\" parentFirst=\"false\"\/>\n+                    <filterchain>\n+                        <stripjavacomments\/>\n+                        <linecontainsregexp>\n+                            <regexp pattern=\"module .* \\{\"\/>\n+                        <\/linecontainsregexp>\n+                        <tokenfilter>\n+                            <linetokenizer\/>\n+                            <replaceregex flags=\"s\" pattern=\"(\\s*module\\s+)(\\S*)(\\s*\\{.*)\" replace=\"\\2\"\/>\n+                        <\/tokenfilter>\n+                        <striplinebreaks\/>\n+                    <\/filterchain>\n+                <\/loadresource>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-modules-supported,-init-macrodef-modulename\" if=\"modules.supported.internal\" name=\"-init-source-module-properties\">\n+        <fail message=\"Java 9 support requires Ant 1.10.0 or higher.\">\n+            <condition>\n+                <not>\n+                    <antversion atleast=\"1.10.0\"\/>\n+                <\/not>\n+            <\/condition>\n+        <\/fail>\n+        <j2seproject3:modulename property=\"module.name\" sourcepath=\"${src.dir}\"\/>\n+        <condition property=\"named.module.internal\">\n+            <and>\n+                <isset property=\"module.name\"\/>\n+                <length length=\"0\" string=\"${module.name}\" when=\"greater\"\/>\n+            <\/and>\n+        <\/condition>\n+        <condition property=\"unnamed.module.internal\">\n+            <not>\n+                <isset property=\"named.module.internal\"\/>\n+            <\/not>\n+        <\/condition>\n+        <property name=\"javac.modulepath\" value=\"\"\/>\n+        <property name=\"run.modulepath\" value=\"${javac.modulepath}\"\/>\n+        <property name=\"module.build.classes.dir\" value=\"${build.classes.dir}\"\/>\n+        <property name=\"debug.modulepath\" value=\"${run.modulepath}\"\/>\n+        <property name=\"javac.upgrademodulepath\" value=\"\"\/>\n+        <property name=\"run.upgrademodulepath\" value=\"${javac.upgrademodulepath}\"\/>\n+        <condition else=\"\" property=\"javac.systemmodulepath.cmd.line.arg\" value=\"--system '${javac.systemmodulepath}'\">\n+            <and>\n+                <isset property=\"javac.systemmodulepath\"\/>\n+                <length length=\"0\" string=\"${javac.systemmodulepath}\" when=\"greater\"\/>\n+            <\/and>\n+        <\/condition>\n+        <property name=\"dist.jlink.dir\" value=\"${dist.dir}\/jlink\"\/>\n+        <property name=\"dist.jlink.output\" value=\"${dist.jlink.dir}\/${application.title}\"\/>\n+        <property name=\"module.name\" value=\"\"\/>\n+    <\/target>\n+    <target depends=\"-pre-init,-init-private,-init-user,-init-project,-init-macrodef-property,-init-modules-supported\" name=\"-do-init\">\n+        <available file=\"${manifest.file}\" property=\"manifest.available\"\/>\n+        <condition property=\"splashscreen.available\">\n+            <and>\n+                <not>\n+                    <equals arg1=\"${application.splash}\" arg2=\"\" trim=\"true\"\/>\n+                <\/not>\n+                <available file=\"${application.splash}\"\/>\n+            <\/and>\n+        <\/condition>\n+        <condition property=\"main.class.available\">\n+            <and>\n+                <isset property=\"main.class\"\/>\n+                <not>\n+                    <equals arg1=\"${main.class}\" arg2=\"\" trim=\"true\"\/>\n+                <\/not>\n+            <\/and>\n+        <\/condition>\n+        <condition property=\"profile.available\">\n+            <and>\n+                <isset property=\"javac.profile\"\/>\n+                <length length=\"0\" string=\"${javac.profile}\" when=\"greater\"\/>\n+                <not>\n+                    <matches pattern=\"1\\.[0-7](\\..*)?\" string=\"${javac.source}\"\/>\n+                <\/not>\n+            <\/and>\n+        <\/condition>\n+        <condition property=\"do.archive\">\n+            <or>\n+                <not>\n+                    <istrue value=\"${jar.archive.disabled}\"\/>\n+                <\/not>\n+                <istrue value=\"${not.archive.disabled}\"\/>\n+            <\/or>\n+        <\/condition>\n+        <condition property=\"do.archive+manifest.available\">\n+            <and>\n+                <isset property=\"manifest.available\"\/>\n+                <istrue value=\"${do.archive}\"\/>\n+            <\/and>\n+        <\/condition>\n+        <condition property=\"do.archive+main.class.available\">\n+            <and>\n+                <isset property=\"main.class.available\"\/>\n+                <istrue value=\"${do.archive}\"\/>\n+            <\/and>\n+        <\/condition>\n+        <condition property=\"do.archive+splashscreen.available\">\n+            <and>\n+                <isset property=\"splashscreen.available\"\/>\n+                <istrue value=\"${do.archive}\"\/>\n+            <\/and>\n+        <\/condition>\n+        <condition property=\"do.archive+profile.available\">\n+            <and>\n+                <isset property=\"profile.available\"\/>\n+                <istrue value=\"${do.archive}\"\/>\n+            <\/and>\n+        <\/condition>\n+        <condition property=\"have.tests\">\n+            <or>\n+                <available file=\"${test.src.dir}\"\/>\n+            <\/or>\n+        <\/condition>\n+        <condition property=\"have.sources\">\n+            <or>\n+                <available file=\"${src.dir}\"\/>\n+            <\/or>\n+        <\/condition>\n+        <condition property=\"netbeans.home+have.tests\">\n+            <and>\n+                <isset property=\"netbeans.home\"\/>\n+                <isset property=\"have.tests\"\/>\n+            <\/and>\n+        <\/condition>\n+        <property name=\"run.jvmargs\" value=\"\"\/>\n+        <property name=\"run.jvmargs.ide\" value=\"\"\/>\n+        <property name=\"javac.compilerargs\" value=\"\"\/>\n+        <property name=\"work.dir\" value=\"${basedir}\"\/>\n+        <condition property=\"no.deps\">\n+            <and>\n+                <istrue value=\"${no.dependencies}\"\/>\n+            <\/and>\n+        <\/condition>\n+        <property name=\"javac.debug\" value=\"true\"\/>\n+        <property name=\"application.args\" value=\"\"\/>\n+        <property name=\"source.encoding\" value=\"${file.encoding}\"\/>\n+        <property name=\"runtime.encoding\" value=\"${source.encoding}\"\/>\n+        <property name=\"manifest.encoding\" value=\"${source.encoding}\"\/>\n+        <property name=\"includes\" value=\"**\"\/>\n+        <property name=\"excludes\" value=\"\"\/>\n+        <property name=\"do.depend\" value=\"false\"\/>\n+        <condition property=\"do.depend.true\">\n+            <istrue value=\"${do.depend}\"\/>\n+        <\/condition>\n+        <path id=\"endorsed.classpath.path\" path=\"${endorsed.classpath}\"\/>\n+        <condition else=\"\" property=\"endorsed.classpath.cmd.line.arg\" value=\"-Xbootclasspath\/p:'${toString:endorsed.classpath.path}'\">\n+            <and>\n+                <isset property=\"endorsed.classpath\"\/>\n+                <not>\n+                    <equals arg1=\"${endorsed.classpath}\" arg2=\"\" trim=\"true\"\/>\n+                <\/not>\n+            <\/and>\n+        <\/condition>\n+        <condition else=\"\" property=\"javac.profile.cmd.line.arg\" value=\"-profile ${javac.profile}\">\n+            <isset property=\"profile.available\"\/>\n+        <\/condition>\n+        <property name=\"jar.index\" value=\"false\"\/>\n+        <property name=\"jar.index.metainf\" value=\"${jar.index}\"\/>\n+        <property name=\"copylibs.rebase\" value=\"true\"\/>\n+        <available file=\"${meta.inf.dir}\/persistence.xml\" property=\"has.persistence.xml\"\/>\n+        <condition property=\"junit.available\">\n+            <or>\n+                <available classname=\"org.junit.Test\" classpath=\"${run.test.classpath}\"\/>\n+                <available classname=\"junit.framework.Test\" classpath=\"${run.test.classpath}\"\/>\n+            <\/or>\n+        <\/condition>\n+        <condition property=\"testng.available\">\n+            <available classname=\"org.testng.annotations.Test\" classpath=\"${run.test.classpath}\"\/>\n+        <\/condition>\n+        <condition property=\"junit+testng.available\">\n+            <and>\n+                <istrue value=\"${junit.available}\"\/>\n+                <istrue value=\"${testng.available}\"\/>\n+            <\/and>\n+        <\/condition>\n+        <condition else=\"testng\" property=\"testng.mode\" value=\"mixed\">\n+            <istrue value=\"${junit+testng.available}\"\/>\n+        <\/condition>\n+        <condition else=\"\" property=\"testng.debug.mode\" value=\"-mixed\">\n+            <istrue value=\"${junit+testng.available}\"\/>\n+        <\/condition>\n+        <property name=\"java.failonerror\" value=\"true\"\/>\n+    <\/target>\n+    <target name=\"-post-init\">\n+        <!-- Empty placeholder for easier customization. -->\n+        <!-- You can override this target in the ..\/build.xml file. -->\n+    <\/target>\n+    <target depends=\"-pre-init,-init-private,-init-user,-init-project,-do-init\" name=\"-init-check\">\n+        <fail unless=\"src.dir\">Must set src.dir<\/fail>\n+        <fail unless=\"test.src.dir\">Must set test.src.dir<\/fail>\n+        <fail unless=\"build.dir\">Must set build.dir<\/fail>\n+        <fail unless=\"dist.dir\">Must set dist.dir<\/fail>\n+        <fail unless=\"build.classes.dir\">Must set build.classes.dir<\/fail>\n+        <fail unless=\"build.test.classes.dir\">Must set build.test.classes.dir<\/fail>\n+        <fail unless=\"build.test.results.dir\">Must set build.test.results.dir<\/fail>\n+        <fail unless=\"build.classes.excludes\">Must set build.classes.excludes<\/fail>\n+        <fail unless=\"dist.jar\">Must set dist.jar<\/fail>\n+    <\/target>\n+    <target name=\"-init-macrodef-property\">\n+        <macrodef name=\"property\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/1\">\n+            <attribute name=\"name\"\/>\n+            <attribute name=\"value\"\/>\n+            <sequential>\n+                <property name=\"@{name}\" value=\"${@{value}}\"\/>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-ap-cmdline-properties,-init-source-module-properties\" if=\"modules.supported.internal\" name=\"-init-macrodef-javac-with-module\">\n+        <macrodef name=\"javac\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${src.dir}\" name=\"srcdir\"\/>\n+            <attribute default=\"${build.classes.dir}\" name=\"destdir\"\/>\n+            <attribute default=\"${javac.classpath}\" name=\"classpath\"\/>\n+            <attribute default=\"${javac.modulepath}\" name=\"modulepath\"\/>\n+            <attribute default=\"${javac.upgrademodulepath}\" name=\"upgrademodulepath\"\/>\n+            <attribute default=\"${javac.processorpath}\" name=\"processorpath\"\/>\n+            <attribute default=\"${javac.processormodulepath}\" name=\"processormodulepath\"\/>\n+            <attribute default=\"${build.generated.sources.dir}\/ap-source-output\" name=\"apgeneratedsrcdir\"\/>\n+            <attribute default=\"${includes}\" name=\"includes\"\/>\n+            <attribute default=\"${excludes}\" name=\"excludes\"\/>\n+            <attribute default=\"${javac.debug}\" name=\"debug\"\/>\n+            <attribute default=\"${empty.dir}\" name=\"sourcepath\" unless:set=\"named.module.internal\"\/>\n+            <attribute default=\"${src.dir}\" if:set=\"named.module.internal\" name=\"sourcepath\"\/>\n+            <attribute default=\"${empty.dir}\" name=\"gensrcdir\"\/>\n+            <element name=\"customize\" optional=\"true\"\/>\n+            <sequential>\n+                <condition property=\"warn.excludes.internal\">\n+                    <and>\n+                        <isset property=\"named.module.internal\"\/>\n+                        <length length=\"0\" string=\"@{excludes}\" trim=\"true\" when=\"greater\"\/>\n+                    <\/and>\n+                <\/condition>\n+                <echo if:set=\"warn.excludes.internal\" level=\"warning\" message=\"The javac excludes are not supported in the JDK 9 Named Module.\"\/>\n+                <property location=\"${build.dir}\/empty\" name=\"empty.dir\"\/>\n+                <mkdir dir=\"${empty.dir}\"\/>\n+                <mkdir dir=\"@{apgeneratedsrcdir}\"\/>\n+                <condition property=\"processormodulepath.set\">\n+                    <resourcecount count=\"0\" when=\"greater\">\n+                        <path>\n+                            <pathelement path=\"@{processormodulepath}\"\/>\n+                        <\/path>\n+                    <\/resourcecount>\n+                <\/condition>\n+                <javac debug=\"@{debug}\" deprecation=\"${javac.deprecation}\" destdir=\"@{destdir}\" encoding=\"${source.encoding}\" excludes=\"@{excludes}\" fork=\"yes\" includeantruntime=\"false\" includes=\"@{includes}\" source=\"${javac.source}\" sourcepath=\"@{sourcepath}\" srcdir=\"@{srcdir}\" target=\"${javac.target}\" tempdir=\"${java.io.tmpdir}\">\n+                    <src>\n+                        <dirset dir=\"@{gensrcdir}\" erroronmissingdir=\"false\">\n+                            <include name=\"*\"\/>\n+                        <\/dirset>\n+                    <\/src>\n+                    <classpath>\n+                        <path path=\"@{classpath}\"\/>\n+                    <\/classpath>\n+                    <modulepath>\n+                        <path path=\"@{modulepath}\"\/>\n+                    <\/modulepath>\n+                    <upgrademodulepath>\n+                        <path path=\"@{upgrademodulepath}\"\/>\n+                    <\/upgrademodulepath>\n+                    <compilerarg line=\"${javac.systemmodulepath.cmd.line.arg}\"\/>\n+                    <compilerarg line=\"${javac.profile.cmd.line.arg}\"\/>\n+                    <compilerarg line=\"${javac.compilerargs}\"\/>\n+                    <compilerarg if:set=\"processormodulepath.set\" value=\"--processor-module-path\"\/>\n+                    <compilerarg if:set=\"processormodulepath.set\" path=\"@{processormodulepath}\"\/>\n+                    <compilerarg unless:set=\"processormodulepath.set\" value=\"-processorpath\"\/>\n+                    <compilerarg path=\"@{processorpath}:${empty.dir}\" unless:set=\"processormodulepath.set\"\/>\n+                    <compilerarg line=\"${ap.processors.internal}\"\/>\n+                    <compilerarg line=\"${annotation.processing.processor.options}\"\/>\n+                    <compilerarg value=\"-s\"\/>\n+                    <compilerarg path=\"@{apgeneratedsrcdir}\"\/>\n+                    <compilerarg line=\"${ap.proc.none.internal}\"\/>\n+                    <customize\/>\n+                <\/javac>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-ap-cmdline-properties,-init-source-module-properties\" if=\"ap.supported.internal\" name=\"-init-macrodef-javac-with-processors\" unless=\"modules.supported.internal\">\n+        <macrodef name=\"javac\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${src.dir}\" name=\"srcdir\"\/>\n+            <attribute default=\"${build.classes.dir}\" name=\"destdir\"\/>\n+            <attribute default=\"${javac.classpath}\" name=\"classpath\"\/>\n+            <attribute default=\"${javac.modulepath}\" name=\"modulepath\"\/>\n+            <attribute default=\"${javac.upgrademodulepath}\" name=\"upgrademodulepath\"\/>\n+            <attribute default=\"${javac.processorpath}\" name=\"processorpath\"\/>\n+            <attribute default=\"${build.generated.sources.dir}\/ap-source-output\" name=\"apgeneratedsrcdir\"\/>\n+            <attribute default=\"${includes}\" name=\"includes\"\/>\n+            <attribute default=\"${excludes}\" name=\"excludes\"\/>\n+            <attribute default=\"${javac.debug}\" name=\"debug\"\/>\n+            <attribute default=\"${empty.dir}\" name=\"sourcepath\"\/>\n+            <attribute default=\"${empty.dir}\" name=\"gensrcdir\"\/>\n+            <element name=\"customize\" optional=\"true\"\/>\n+            <sequential>\n+                <property location=\"${build.dir}\/empty\" name=\"empty.dir\"\/>\n+                <mkdir dir=\"${empty.dir}\"\/>\n+                <mkdir dir=\"@{apgeneratedsrcdir}\"\/>\n+                <javac debug=\"@{debug}\" deprecation=\"${javac.deprecation}\" destdir=\"@{destdir}\" encoding=\"${source.encoding}\" excludes=\"@{excludes}\" executable=\"${platform.javac}\" fork=\"yes\" includeantruntime=\"false\" includes=\"@{includes}\" source=\"${javac.source}\" sourcepath=\"@{sourcepath}\" srcdir=\"@{srcdir}\" target=\"${javac.target}\" tempdir=\"${java.io.tmpdir}\">\n+                    <src>\n+                        <dirset dir=\"@{gensrcdir}\" erroronmissingdir=\"false\">\n+                            <include name=\"*\"\/>\n+                        <\/dirset>\n+                    <\/src>\n+                    <classpath>\n+                        <path path=\"@{classpath}\"\/>\n+                    <\/classpath>\n+                    <compilerarg line=\"${endorsed.classpath.cmd.line.arg}\"\/>\n+                    <compilerarg line=\"${javac.profile.cmd.line.arg}\"\/>\n+                    <compilerarg line=\"${javac.compilerargs}\"\/>\n+                    <compilerarg value=\"-processorpath\"\/>\n+                    <compilerarg path=\"@{processorpath}:${empty.dir}\"\/>\n+                    <compilerarg line=\"${ap.processors.internal}\"\/>\n+                    <compilerarg line=\"${annotation.processing.processor.options}\"\/>\n+                    <compilerarg value=\"-s\"\/>\n+                    <compilerarg path=\"@{apgeneratedsrcdir}\"\/>\n+                    <compilerarg line=\"${ap.proc.none.internal}\"\/>\n+                    <customize\/>\n+                <\/javac>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-ap-cmdline-properties,-init-source-module-properties\" name=\"-init-macrodef-javac-without-processors\" unless=\"ap.supported.internal\">\n+        <macrodef name=\"javac\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${src.dir}\" name=\"srcdir\"\/>\n+            <attribute default=\"${build.classes.dir}\" name=\"destdir\"\/>\n+            <attribute default=\"${javac.classpath}\" name=\"classpath\"\/>\n+            <attribute default=\"${javac.modulepath}\" name=\"modulepath\"\/>\n+            <attribute default=\"${javac.upgrademodulepath}\" name=\"upgrademodulepath\"\/>\n+            <attribute default=\"${javac.processorpath}\" name=\"processorpath\"\/>\n+            <attribute default=\"${build.generated.sources.dir}\/ap-source-output\" name=\"apgeneratedsrcdir\"\/>\n+            <attribute default=\"${includes}\" name=\"includes\"\/>\n+            <attribute default=\"${excludes}\" name=\"excludes\"\/>\n+            <attribute default=\"${javac.debug}\" name=\"debug\"\/>\n+            <attribute default=\"${empty.dir}\" name=\"sourcepath\"\/>\n+            <attribute default=\"${empty.dir}\" name=\"gensrcdir\"\/>\n+            <element name=\"customize\" optional=\"true\"\/>\n+            <sequential>\n+                <property location=\"${build.dir}\/empty\" name=\"empty.dir\"\/>\n+                <mkdir dir=\"${empty.dir}\"\/>\n+                <javac debug=\"@{debug}\" deprecation=\"${javac.deprecation}\" destdir=\"@{destdir}\" encoding=\"${source.encoding}\" excludes=\"@{excludes}\" executable=\"${platform.javac}\" fork=\"yes\" includeantruntime=\"false\" includes=\"@{includes}\" source=\"${javac.source}\" sourcepath=\"@{sourcepath}\" srcdir=\"@{srcdir}\" target=\"${javac.target}\" tempdir=\"${java.io.tmpdir}\">\n+                    <src>\n+                        <dirset dir=\"@{gensrcdir}\" erroronmissingdir=\"false\">\n+                            <include name=\"*\"\/>\n+                        <\/dirset>\n+                    <\/src>\n+                    <classpath>\n+                        <path path=\"@{classpath}\"\/>\n+                    <\/classpath>\n+                    <compilerarg line=\"${endorsed.classpath.cmd.line.arg}\"\/>\n+                    <compilerarg line=\"${javac.profile.cmd.line.arg}\"\/>\n+                    <compilerarg line=\"${javac.compilerargs}\"\/>\n+                    <customize\/>\n+                <\/javac>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-macrodef-javac-with-module,-init-macrodef-javac-with-processors,-init-macrodef-javac-without-processors\" name=\"-init-macrodef-javac\">\n+        <macrodef name=\"depend\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${src.dir}\" name=\"srcdir\"\/>\n+            <attribute default=\"${build.classes.dir}\" name=\"destdir\"\/>\n+            <attribute default=\"${javac.classpath}\" name=\"classpath\"\/>\n+            <sequential>\n+                <depend cache=\"${build.dir}\/depcache\" destdir=\"@{destdir}\" excludes=\"${excludes}\" includes=\"${includes}\" srcdir=\"@{srcdir}\">\n+                    <classpath>\n+                        <path path=\"@{classpath}\"\/>\n+                    <\/classpath>\n+                <\/depend>\n+            <\/sequential>\n+        <\/macrodef>\n+        <macrodef name=\"force-recompile\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${build.classes.dir}\" name=\"destdir\"\/>\n+            <sequential>\n+                <fail unless=\"javac.includes\">Must set javac.includes<\/fail>\n+                <pathconvert pathsep=\"${line.separator}\" property=\"javac.includes.binary\">\n+                    <path>\n+                        <filelist dir=\"@{destdir}\" files=\"${javac.includes}\"\/>\n+                    <\/path>\n+                    <globmapper from=\"*.java\" to=\"*.class\"\/>\n+                <\/pathconvert>\n+                <tempfile deleteonexit=\"true\" property=\"javac.includesfile.binary\"\/>\n+                <echo file=\"${javac.includesfile.binary}\" message=\"${javac.includes.binary}\"\/>\n+                <delete>\n+                    <files includesfile=\"${javac.includesfile.binary}\"\/>\n+                <\/delete>\n+                <delete>\n+                    <fileset file=\"${javac.includesfile.binary}\"\/>\n+                <\/delete>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target if=\"${junit.available}\" name=\"-init-macrodef-junit-init\">\n+        <condition else=\"false\" property=\"nb.junit.batch\" value=\"true\">\n+            <and>\n+                <istrue value=\"${junit.available}\"\/>\n+                <not>\n+                    <isset property=\"test.method\"\/>\n+                <\/not>\n+            <\/and>\n+        <\/condition>\n+        <condition else=\"false\" property=\"nb.junit.single\" value=\"true\">\n+            <and>\n+                <istrue value=\"${junit.available}\"\/>\n+                <isset property=\"test.method\"\/>\n+            <\/and>\n+        <\/condition>\n+    <\/target>\n+    <target name=\"-init-test-properties\">\n+        <property name=\"test.binaryincludes\" value=\"&lt;nothing&gt;\"\/>\n+        <property name=\"test.binarytestincludes\" value=\"\"\/>\n+        <property name=\"test.binaryexcludes\" value=\"\"\/>\n+    <\/target>\n+    <target depends=\"-init-modules-supported\" if=\"modules.supported.internal\" name=\"-init-macrodef-junit-prototype-with-module\">\n+        <macrodef name=\"junit-prototype\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${includes}\" name=\"includes\"\/>\n+            <attribute default=\"${excludes}\" name=\"excludes\"\/>\n+            <element name=\"customizePrototype\" optional=\"true\"\/>\n+            <sequential>\n+                <property name=\"junit.forkmode\" value=\"perTest\"\/>\n+                <junit dir=\"${work.dir}\" errorproperty=\"tests.failed\" failureproperty=\"tests.failed\" fork=\"true\" forkmode=\"${junit.forkmode}\" jvm=\"${platform.java}\" showoutput=\"true\" tempdir=\"${build.dir}\">\n+                    <syspropertyset>\n+                        <propertyref prefix=\"test-sys-prop.\"\/>\n+                        <mapper from=\"test-sys-prop.*\" to=\"*\" type=\"glob\"\/>\n+                    <\/syspropertyset>\n+                    <classpath>\n+                        <path path=\"${run.test.classpath}\"\/>\n+                    <\/classpath>\n+                    <modulepath>\n+                        <path path=\"${run.test.modulepath}\"\/>\n+                    <\/modulepath>\n+                    <formatter type=\"brief\" usefile=\"false\"\/>\n+                    <formatter type=\"xml\"\/>\n+                    <jvmarg line=\"${endorsed.classpath.cmd.line.arg}\"\/>\n+                    <jvmarg value=\"-ea\"\/>\n+                    <jvmarg line=\"${run.test.jvmargs}\"\/>\n+                    <customizePrototype\/>\n+                <\/junit>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-modules-supported\" name=\"-init-macrodef-junit-prototype-without-module\" unless=\"modules.supported.internal\">\n+        <macrodef name=\"junit-prototype\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${includes}\" name=\"includes\"\/>\n+            <attribute default=\"${excludes}\" name=\"excludes\"\/>\n+            <element name=\"customizePrototype\" optional=\"true\"\/>\n+            <sequential>\n+                <property name=\"junit.forkmode\" value=\"perTest\"\/>\n+                <junit dir=\"${work.dir}\" errorproperty=\"tests.failed\" failureproperty=\"tests.failed\" fork=\"true\" forkmode=\"${junit.forkmode}\" jvm=\"${platform.java}\" showoutput=\"true\" tempdir=\"${build.dir}\">\n+                    <syspropertyset>\n+                        <propertyref prefix=\"test-sys-prop.\"\/>\n+                        <mapper from=\"test-sys-prop.*\" to=\"*\" type=\"glob\"\/>\n+                    <\/syspropertyset>\n+                    <classpath>\n+                        <path path=\"${run.test.classpath}\"\/>\n+                    <\/classpath>\n+                    <formatter type=\"brief\" usefile=\"false\"\/>\n+                    <formatter type=\"xml\"\/>\n+                    <jvmarg line=\"${endorsed.classpath.cmd.line.arg}\"\/>\n+                    <jvmarg value=\"-ea\"\/>\n+                    <customizePrototype\/>\n+                <\/junit>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-test-properties,-init-macrodef-junit-prototype-with-module,-init-macrodef-junit-prototype-without-module\" if=\"${nb.junit.single}\" name=\"-init-macrodef-junit-single\" unless=\"${nb.junit.batch}\">\n+        <macrodef name=\"junit\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${includes}\" name=\"includes\"\/>\n+            <attribute default=\"${excludes}\" name=\"excludes\"\/>\n+            <attribute default=\"**\" name=\"testincludes\"\/>\n+            <attribute default=\"\" name=\"testmethods\"\/>\n+            <element name=\"customize\" optional=\"true\"\/>\n+            <sequential>\n+                <j2seproject3:junit-prototype>\n+                    <customizePrototype>\n+                        <test methods=\"@{testmethods}\" name=\"@{testincludes}\" todir=\"${build.test.results.dir}\"\/>\n+                        <customize\/>\n+                    <\/customizePrototype>\n+                <\/j2seproject3:junit-prototype>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-test-properties,-init-macrodef-junit-prototype-with-module,-init-macrodef-junit-prototype-without-module\" if=\"${nb.junit.batch}\" name=\"-init-macrodef-junit-batch\" unless=\"${nb.junit.single}\">\n+        <macrodef name=\"junit\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${includes}\" name=\"includes\"\/>\n+            <attribute default=\"${excludes}\" name=\"excludes\"\/>\n+            <attribute default=\"**\" name=\"testincludes\"\/>\n+            <attribute default=\"\" name=\"testmethods\"\/>\n+            <element name=\"customize\" optional=\"true\"\/>\n+            <sequential>\n+                <j2seproject3:junit-prototype>\n+                    <customizePrototype>\n+                        <batchtest todir=\"${build.test.results.dir}\">\n+                            <fileset dir=\"${test.src.dir}\" excludes=\"@{excludes},${excludes}\" includes=\"@{includes}\">\n+                                <filename name=\"@{testincludes}\"\/>\n+                            <\/fileset>\n+                            <fileset dir=\"${build.test.classes.dir}\" excludes=\"@{excludes},${excludes},${test.binaryexcludes}\" includes=\"${test.binaryincludes}\">\n+                                <filename name=\"${test.binarytestincludes}\"\/>\n+                            <\/fileset>\n+                        <\/batchtest>\n+                        <customize\/>\n+                    <\/customizePrototype>\n+                <\/j2seproject3:junit-prototype>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-macrodef-junit-init,-init-macrodef-junit-single, -init-macrodef-junit-batch\" if=\"${junit.available}\" name=\"-init-macrodef-junit\"\/>\n+    <target if=\"${testng.available}\" name=\"-init-macrodef-testng\">\n+        <macrodef name=\"testng\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${includes}\" name=\"includes\"\/>\n+            <attribute default=\"${excludes}\" name=\"excludes\"\/>\n+            <attribute default=\"**\" name=\"testincludes\"\/>\n+            <attribute default=\"\" name=\"testmethods\"\/>\n+            <element name=\"customize\" optional=\"true\"\/>\n+            <sequential>\n+                <condition else=\"\" property=\"testng.methods.arg\" value=\"@{testincludes}.@{testmethods}\">\n+                    <isset property=\"test.method\"\/>\n+                <\/condition>\n+                <union id=\"test.set\">\n+                    <fileset dir=\"${test.src.dir}\" excludes=\"@{excludes},**\/*.xml,${excludes}\" includes=\"@{includes}\">\n+                        <filename name=\"@{testincludes}\"\/>\n+                    <\/fileset>\n+                <\/union>\n+                <taskdef classname=\"org.testng.TestNGAntTask\" classpath=\"${run.test.classpath}\" name=\"testng\"\/>\n+                <testng classfilesetref=\"test.set\" failureProperty=\"tests.failed\" jvm=\"${platform.java}\" listeners=\"org.testng.reporters.VerboseReporter\" methods=\"${testng.methods.arg}\" mode=\"${testng.mode}\" outputdir=\"${build.test.results.dir}\" suitename=\"FXMediaPlayer\" testname=\"TestNG tests\" workingDir=\"${work.dir}\">\n+                    <xmlfileset dir=\"${build.test.classes.dir}\" includes=\"@{testincludes}\"\/>\n+                    <propertyset>\n+                        <propertyref prefix=\"test-sys-prop.\"\/>\n+                        <mapper from=\"test-sys-prop.*\" to=\"*\" type=\"glob\"\/>\n+                    <\/propertyset>\n+                    <classpath>\n+                        <path path=\"${run.test.classpath}\"\/>\n+                    <\/classpath>\n+                    <jvmarg line=\"${endorsed.classpath.cmd.line.arg}\"\/>\n+                    <customize\/>\n+                <\/testng>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target name=\"-init-macrodef-test-impl\">\n+        <macrodef name=\"test-impl\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${includes}\" name=\"includes\"\/>\n+            <attribute default=\"${excludes}\" name=\"excludes\"\/>\n+            <attribute default=\"**\" name=\"testincludes\"\/>\n+            <attribute default=\"\" name=\"testmethods\"\/>\n+            <element implicit=\"true\" name=\"customize\" optional=\"true\"\/>\n+            <sequential>\n+                <echo>No tests executed.<\/echo>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-macrodef-junit\" if=\"${junit.available}\" name=\"-init-macrodef-junit-impl\">\n+        <macrodef name=\"test-impl\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${includes}\" name=\"includes\"\/>\n+            <attribute default=\"${excludes}\" name=\"excludes\"\/>\n+            <attribute default=\"**\" name=\"testincludes\"\/>\n+            <attribute default=\"\" name=\"testmethods\"\/>\n+            <element implicit=\"true\" name=\"customize\" optional=\"true\"\/>\n+            <sequential>\n+                <j2seproject3:junit excludes=\"@{excludes}\" includes=\"@{includes}\" testincludes=\"@{testincludes}\" testmethods=\"@{testmethods}\">\n+                    <customize\/>\n+                <\/j2seproject3:junit>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-macrodef-testng\" if=\"${testng.available}\" name=\"-init-macrodef-testng-impl\">\n+        <macrodef name=\"test-impl\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${includes}\" name=\"includes\"\/>\n+            <attribute default=\"${excludes}\" name=\"excludes\"\/>\n+            <attribute default=\"**\" name=\"testincludes\"\/>\n+            <attribute default=\"\" name=\"testmethods\"\/>\n+            <element implicit=\"true\" name=\"customize\" optional=\"true\"\/>\n+            <sequential>\n+                <j2seproject3:testng excludes=\"@{excludes}\" includes=\"@{includes}\" testincludes=\"@{testincludes}\" testmethods=\"@{testmethods}\">\n+                    <customize\/>\n+                <\/j2seproject3:testng>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-macrodef-test-impl,-init-macrodef-junit-impl,-init-macrodef-testng-impl\" name=\"-init-macrodef-test\">\n+        <macrodef name=\"test\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${includes}\" name=\"includes\"\/>\n+            <attribute default=\"${excludes}\" name=\"excludes\"\/>\n+            <attribute default=\"**\" name=\"testincludes\"\/>\n+            <attribute default=\"\" name=\"testmethods\"\/>\n+            <sequential>\n+                <j2seproject3:test-impl excludes=\"@{excludes}\" includes=\"@{includes}\" testincludes=\"@{testincludes}\" testmethods=\"@{testmethods}\">\n+                    <customize>\n+                        <jvmarg line=\"${run.jvmargs}\"\/>\n+                        <jvmarg line=\"${run.jvmargs.ide}\"\/>\n+                    <\/customize>\n+                <\/j2seproject3:test-impl>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-macrodef-junit\" if=\"${junit.available}\" name=\"-init-macrodef-junit-debug-impl\">\n+        <macrodef name=\"test-debug-impl\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${includes}\" name=\"includes\"\/>\n+            <attribute default=\"${excludes}\" name=\"excludes\"\/>\n+            <attribute default=\"**\" name=\"testincludes\"\/>\n+            <attribute default=\"\" name=\"testmethods\"\/>\n+            <element name=\"customizeDebuggee\" optional=\"true\"\/>\n+            <sequential>\n+                <j2seproject3:junit excludes=\"@{excludes}\" includes=\"@{includes}\" testincludes=\"@{testincludes}\" testmethods=\"@{testmethods}\">\n+                    <customize>\n+                        <jvmarg value=\"-agentlib:jdwp=transport=${debug-transport},address=${jpda.address}\"\/>\n+                        <customizeDebuggee\/>\n+                    <\/customize>\n+                <\/j2seproject3:junit>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target if=\"${testng.available}\" name=\"-init-macrodef-testng-debug\">\n+        <macrodef name=\"testng-debug\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${main.class}\" name=\"testClass\"\/>\n+            <attribute default=\"\" name=\"testMethod\"\/>\n+            <element name=\"customize2\" optional=\"true\"\/>\n+            <sequential>\n+                <condition else=\"-testclass @{testClass}\" property=\"test.class.or.method\" value=\"-methods @{testClass}.@{testMethod}\">\n+                    <isset property=\"test.method\"\/>\n+                <\/condition>\n+                <condition else=\"-suitename FXMediaPlayer -testname @{testClass} ${test.class.or.method}\" property=\"testng.cmd.args\" value=\"@{testClass}\">\n+                    <matches pattern=\".*\\.xml\" string=\"@{testClass}\"\/>\n+                <\/condition>\n+                <delete dir=\"${build.test.results.dir}\" quiet=\"true\"\/>\n+                <mkdir dir=\"${build.test.results.dir}\"\/>\n+                <j2seproject3:debug classname=\"org.testng.TestNG\" classpath=\"${debug.test.classpath}\">\n+                    <customizeDebuggee>\n+                        <customize2\/>\n+                        <jvmarg value=\"-ea\"\/>\n+                        <arg line=\"${testng.debug.mode}\"\/>\n+                        <arg line=\"-d ${build.test.results.dir}\"\/>\n+                        <arg line=\"-listener org.testng.reporters.VerboseReporter\"\/>\n+                        <arg line=\"${testng.cmd.args}\"\/>\n+                    <\/customizeDebuggee>\n+                <\/j2seproject3:debug>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-macrodef-testng-debug\" if=\"${testng.available}\" name=\"-init-macrodef-testng-debug-impl\">\n+        <macrodef name=\"testng-debug-impl\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${main.class}\" name=\"testClass\"\/>\n+            <attribute default=\"\" name=\"testMethod\"\/>\n+            <element implicit=\"true\" name=\"customize2\" optional=\"true\"\/>\n+            <sequential>\n+                <j2seproject3:testng-debug testClass=\"@{testClass}\" testMethod=\"@{testMethod}\">\n+                    <customize2\/>\n+                <\/j2seproject3:testng-debug>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-macrodef-junit-debug-impl\" if=\"${junit.available}\" name=\"-init-macrodef-test-debug-junit\">\n+        <macrodef name=\"test-debug\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${includes}\" name=\"includes\"\/>\n+            <attribute default=\"${excludes}\" name=\"excludes\"\/>\n+            <attribute default=\"**\" name=\"testincludes\"\/>\n+            <attribute default=\"\" name=\"testmethods\"\/>\n+            <attribute default=\"${main.class}\" name=\"testClass\"\/>\n+            <attribute default=\"\" name=\"testMethod\"\/>\n+            <sequential>\n+                <j2seproject3:test-debug-impl excludes=\"@{excludes}\" includes=\"@{includes}\" testincludes=\"@{testincludes}\" testmethods=\"@{testmethods}\">\n+                    <customizeDebuggee>\n+                        <jvmarg line=\"${run.jvmargs}\"\/>\n+                        <jvmarg line=\"${run.jvmargs.ide}\"\/>\n+                    <\/customizeDebuggee>\n+                <\/j2seproject3:test-debug-impl>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-macrodef-testng-debug-impl\" if=\"${testng.available}\" name=\"-init-macrodef-test-debug-testng\">\n+        <macrodef name=\"test-debug\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${includes}\" name=\"includes\"\/>\n+            <attribute default=\"${excludes}\" name=\"excludes\"\/>\n+            <attribute default=\"**\" name=\"testincludes\"\/>\n+            <attribute default=\"\" name=\"testmethods\"\/>\n+            <attribute default=\"${main.class}\" name=\"testClass\"\/>\n+            <attribute default=\"\" name=\"testMethod\"\/>\n+            <sequential>\n+                <j2seproject3:testng-debug-impl testClass=\"@{testClass}\" testMethod=\"@{testMethod}\">\n+                    <customize2>\n+                        <syspropertyset>\n+                            <propertyref prefix=\"test-sys-prop.\"\/>\n+                            <mapper from=\"test-sys-prop.*\" to=\"*\" type=\"glob\"\/>\n+                        <\/syspropertyset>\n+                    <\/customize2>\n+                <\/j2seproject3:testng-debug-impl>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-macrodef-test-debug-junit,-init-macrodef-test-debug-testng\" name=\"-init-macrodef-test-debug\"\/>\n+    <!--\n+                pre NB7.2 profiling section; consider it deprecated\n+            -->\n+    <target depends=\"-profile-pre-init, init, -profile-post-init, -profile-init-macrodef-profile, -profile-init-check\" if=\"profiler.info.jvmargs.agent\" name=\"profile-init\"\/>\n+    <target if=\"profiler.info.jvmargs.agent\" name=\"-profile-pre-init\">\n+        <!-- Empty placeholder for easier customization. -->\n+        <!-- You can override this target in the ..\/build.xml file. -->\n+    <\/target>\n+    <target if=\"profiler.info.jvmargs.agent\" name=\"-profile-post-init\">\n+        <!-- Empty placeholder for easier customization. -->\n+        <!-- You can override this target in the ..\/build.xml file. -->\n+    <\/target>\n+    <target if=\"profiler.info.jvmargs.agent\" name=\"-profile-init-macrodef-profile\">\n+        <macrodef name=\"resolve\">\n+            <attribute name=\"name\"\/>\n+            <attribute name=\"value\"\/>\n+            <sequential>\n+                <property name=\"@{name}\" value=\"${env.@{value}}\"\/>\n+            <\/sequential>\n+        <\/macrodef>\n+        <macrodef name=\"profile\">\n+            <attribute default=\"${main.class}\" name=\"classname\"\/>\n+            <element name=\"customize\" optional=\"true\"\/>\n+            <sequential>\n+                <property environment=\"env\"\/>\n+                <resolve name=\"profiler.current.path\" value=\"${profiler.info.pathvar}\"\/>\n+                <java classname=\"@{classname}\" dir=\"${profiler.info.dir}\" failonerror=\"${java.failonerror}\" fork=\"true\" jvm=\"${profiler.info.jvm}\">\n+                    <jvmarg line=\"${endorsed.classpath.cmd.line.arg}\"\/>\n+                    <jvmarg value=\"${profiler.info.jvmargs.agent}\"\/>\n+                    <jvmarg line=\"${profiler.info.jvmargs}\"\/>\n+                    <env key=\"${profiler.info.pathvar}\" path=\"${profiler.info.agentpath}:${profiler.current.path}\"\/>\n+                    <arg line=\"${application.args}\"\/>\n+                    <classpath>\n+                        <path path=\"${run.classpath}\"\/>\n+                    <\/classpath>\n+                    <syspropertyset>\n+                        <propertyref prefix=\"run-sys-prop.\"\/>\n+                        <mapper from=\"run-sys-prop.*\" to=\"*\" type=\"glob\"\/>\n+                    <\/syspropertyset>\n+                    <customize\/>\n+                <\/java>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-profile-pre-init, init, -profile-post-init, -profile-init-macrodef-profile\" if=\"profiler.info.jvmargs.agent\" name=\"-profile-init-check\">\n+        <fail unless=\"profiler.info.jvm\">Must set JVM to use for profiling in profiler.info.jvm<\/fail>\n+        <fail unless=\"profiler.info.jvmargs.agent\">Must set profiler agent JVM arguments in profiler.info.jvmargs.agent<\/fail>\n+    <\/target>\n+    <!--\n+                end of pre NB7.2 profiling section\n+            -->\n+    <target depends=\"-init-debug-args\" name=\"-init-macrodef-nbjpda\">\n+        <macrodef name=\"nbjpdastart\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/1\">\n+            <attribute default=\"${main.class}\" name=\"name\"\/>\n+            <attribute default=\"${debug.modulepath}\" name=\"modulepath\"\/>\n+            <attribute default=\"${debug.classpath}\" name=\"classpath\"\/>\n+            <attribute default=\"\" name=\"stopclassname\"\/>\n+            <sequential>\n+                <nbjpdastart addressproperty=\"jpda.address\" name=\"@{name}\" stopclassname=\"@{stopclassname}\" transport=\"${debug-transport}\">\n+                    <modulepath>\n+                        <path path=\"@{modulepath}\"\/>\n+                    <\/modulepath>\n+                    <classpath>\n+                        <path path=\"@{classpath}\"\/>\n+                    <\/classpath>\n+                    <bootclasspath>\n+                        <path path=\"${platform.bootcp}\"\/>\n+                    <\/bootclasspath>\n+                <\/nbjpdastart>\n+            <\/sequential>\n+        <\/macrodef>\n+        <macrodef name=\"nbjpdareload\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/1\">\n+            <attribute default=\"${build.classes.dir}\" name=\"dir\"\/>\n+            <sequential>\n+                <nbjpdareload>\n+                    <fileset dir=\"@{dir}\" includes=\"${fix.classes}\">\n+                        <include name=\"${fix.includes}*.class\"\/>\n+                    <\/fileset>\n+                <\/nbjpdareload>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target name=\"-init-debug-args\">\n+        <condition else=\"dt_socket\" property=\"debug-transport-by-os\" value=\"dt_shmem\">\n+            <os family=\"windows\"\/>\n+        <\/condition>\n+        <condition else=\"${debug-transport-by-os}\" property=\"debug-transport\" value=\"${debug.transport}\">\n+            <isset property=\"debug.transport\"\/>\n+        <\/condition>\n+    <\/target>\n+    <target depends=\"-init-debug-args\" name=\"-init-macrodef-debug\">\n+        <macrodef name=\"debug\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${module.name}\" name=\"modulename\"\/>\n+            <attribute default=\"${main.class}\" name=\"classname\"\/>\n+            <attribute default=\"${debug.modulepath}\" name=\"modulepath\"\/>\n+            <attribute default=\"${debug.classpath}\" name=\"classpath\"\/>\n+            <element name=\"customizeDebuggee\" optional=\"true\"\/>\n+            <sequential>\n+                <j2seproject1:java classname=\"@{classname}\" classpath=\"@{classpath}\" modulename=\"@{modulename}\" modulepath=\"@{modulepath}\">\n+                    <customize>\n+                        <jvmarg value=\"-agentlib:jdwp=transport=${debug-transport},address=${jpda.address}\"\/>\n+                        <customizeDebuggee\/>\n+                    <\/customize>\n+                <\/j2seproject1:java>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-source-module-properties\" if=\"named.module.internal\" name=\"-init-macrodef-java-with-module\">\n+        <macrodef name=\"java\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/1\">\n+            <attribute default=\"${module.name}\" name=\"modulename\"\/>\n+            <attribute default=\"${main.class}\" name=\"classname\"\/>\n+            <attribute default=\"${run.modulepath}\" name=\"modulepath\"\/>\n+            <attribute default=\"${run.upgrademodulepath}\" name=\"upgrademodulepath\"\/>\n+            <attribute default=\"${run.classpath}\" name=\"classpath\"\/>\n+            <attribute default=\"jvm\" name=\"jvm\"\/>\n+            <element name=\"customize\" optional=\"true\"\/>\n+            <sequential>\n+                <java classname=\"@{classname}\" dir=\"${work.dir}\" failonerror=\"${java.failonerror}\" fork=\"true\" jvm=\"${platform.java}\" module=\"@{modulename}\">\n+                    <classpath>\n+                        <path path=\"@{classpath}\"\/>\n+                    <\/classpath>\n+                    <modulepath>\n+                        <pathelement path=\"@{modulepath}\"\/>\n+                        <pathelement location=\"${module.build.classes.dir}\"\/>\n+                    <\/modulepath>\n+                    <upgrademodulepath>\n+                        <path path=\"@{upgrademodulepath}\"\/>\n+                    <\/upgrademodulepath>\n+                    <jvmarg value=\"-Dfile.encoding=${runtime.encoding}\"\/>\n+                    <redirector errorencoding=\"${runtime.encoding}\" inputencoding=\"${runtime.encoding}\" outputencoding=\"${runtime.encoding}\"\/>\n+                    <jvmarg line=\"${run.jvmargs}\"\/>\n+                    <jvmarg line=\"${run.jvmargs.ide}\"\/>\n+                    <syspropertyset>\n+                        <propertyref prefix=\"run-sys-prop.\"\/>\n+                        <mapper from=\"run-sys-prop.*\" to=\"*\" type=\"glob\"\/>\n+                    <\/syspropertyset>\n+                    <customize\/>\n+                <\/java>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-source-module-properties\" if=\"unnamed.module.internal\" name=\"-init-macrodef-java-with-unnamed-module\">\n+        <macrodef name=\"java\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/1\">\n+            <attribute default=\"\" name=\"modulename\"\/>\n+            <attribute default=\"${main.class}\" name=\"classname\"\/>\n+            <attribute default=\"${run.modulepath}\" name=\"modulepath\"\/>\n+            <attribute default=\"${run.upgrademodulepath}\" name=\"upgrademodulepath\"\/>\n+            <attribute default=\"${run.classpath}\" name=\"classpath\"\/>\n+            <attribute default=\"jvm\" name=\"jvm\"\/>\n+            <element name=\"customize\" optional=\"true\"\/>\n+            <sequential>\n+                <java classname=\"@{classname}\" dir=\"${work.dir}\" failonerror=\"${java.failonerror}\" fork=\"true\">\n+                    <classpath>\n+                        <path path=\"@{classpath}\"\/>\n+                    <\/classpath>\n+                    <modulepath>\n+                        <path path=\"@{modulepath}\"\/>\n+                    <\/modulepath>\n+                    <upgrademodulepath>\n+                        <path path=\"@{upgrademodulepath}\"\/>\n+                    <\/upgrademodulepath>\n+                    <jvmarg value=\"-Dfile.encoding=${runtime.encoding}\"\/>\n+                    <redirector errorencoding=\"${runtime.encoding}\" inputencoding=\"${runtime.encoding}\" outputencoding=\"${runtime.encoding}\"\/>\n+                    <jvmarg line=\"${run.jvmargs}\"\/>\n+                    <jvmarg line=\"${run.jvmargs.ide}\"\/>\n+                    <syspropertyset>\n+                        <propertyref prefix=\"run-sys-prop.\"\/>\n+                        <mapper from=\"run-sys-prop.*\" to=\"*\" type=\"glob\"\/>\n+                    <\/syspropertyset>\n+                    <customize\/>\n+                <\/java>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-source-module-properties\" name=\"-init-macrodef-java-without-module\" unless=\"modules.supported.internal\">\n+        <macrodef name=\"java\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/1\">\n+            <attribute default=\"\" name=\"modulename\"\/>\n+            <attribute default=\"${main.class}\" name=\"classname\"\/>\n+            <attribute default=\"\" name=\"modulepath\"\/>\n+            <attribute default=\"${run.classpath}\" name=\"classpath\"\/>\n+            <attribute default=\"jvm\" name=\"jvm\"\/>\n+            <element name=\"customize\" optional=\"true\"\/>\n+            <sequential>\n+                <java classname=\"@{classname}\" dir=\"${work.dir}\" failonerror=\"${java.failonerror}\" fork=\"true\">\n+                    <jvmarg line=\"${endorsed.classpath.cmd.line.arg}\"\/>\n+                    <jvmarg value=\"-Dfile.encoding=${runtime.encoding}\"\/>\n+                    <redirector errorencoding=\"${runtime.encoding}\" inputencoding=\"${runtime.encoding}\" outputencoding=\"${runtime.encoding}\"\/>\n+                    <jvmarg line=\"${run.jvmargs}\"\/>\n+                    <jvmarg line=\"${run.jvmargs.ide}\"\/>\n+                    <classpath>\n+                        <path path=\"@{classpath}\"\/>\n+                    <\/classpath>\n+                    <syspropertyset>\n+                        <propertyref prefix=\"run-sys-prop.\"\/>\n+                        <mapper from=\"run-sys-prop.*\" to=\"*\" type=\"glob\"\/>\n+                    <\/syspropertyset>\n+                    <customize\/>\n+                <\/java>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target depends=\"-init-macrodef-java-with-module, -init-macrodef-java-with-unnamed-module, -init-macrodef-java-without-module\" name=\"-init-macrodef-java\"\/>\n+    <target name=\"-init-macrodef-copylibs\">\n+        <macrodef name=\"copylibs\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <attribute default=\"${manifest.file}\" name=\"manifest\"\/>\n+            <element name=\"customize\" optional=\"true\"\/>\n+            <sequential>\n+                <property location=\"${build.classes.dir}\" name=\"build.classes.dir.resolved\"\/>\n+                <pathconvert property=\"run.classpath.without.build.classes.dir\">\n+                    <path path=\"${run.classpath}\"\/>\n+                    <map from=\"${build.classes.dir.resolved}\" to=\"\"\/>\n+                <\/pathconvert>\n+                <pathconvert pathsep=\" \" property=\"jar.classpath\">\n+                    <path path=\"${run.classpath.without.build.classes.dir}\"\/>\n+                    <chainedmapper>\n+                        <flattenmapper\/>\n+                        <filtermapper>\n+                            <replacestring from=\" \" to=\"%20\"\/>\n+                        <\/filtermapper>\n+                        <globmapper from=\"*\" to=\"lib\/*\"\/>\n+                    <\/chainedmapper>\n+                <\/pathconvert>\n+                <taskdef classname=\"org.netbeans.modules.java.j2seproject.copylibstask.CopyLibs\" classpath=\"${libs.CopyLibs.classpath}\" name=\"copylibs\"\/>\n+                <copylibs compress=\"${jar.compress}\" excludeFromCopy=\"${copylibs.excludes}\" index=\"${jar.index}\" indexMetaInf=\"${jar.index.metainf}\" jarfile=\"${dist.jar}\" manifest=\"@{manifest}\" manifestencoding=\"UTF-8\" rebase=\"${copylibs.rebase}\" runtimeclasspath=\"${run.classpath.without.build.classes.dir}\">\n+                    <fileset dir=\"${build.classes.dir}\" excludes=\"${dist.archive.excludes}\"\/>\n+                    <manifest>\n+                        <attribute name=\"Class-Path\" value=\"${jar.classpath}\"\/>\n+                        <customize\/>\n+                    <\/manifest>\n+                <\/copylibs>\n+            <\/sequential>\n+        <\/macrodef>\n+    <\/target>\n+    <target name=\"-init-presetdef-jar\">\n+        <presetdef name=\"jar\" uri=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/1\">\n+            <jar compress=\"${jar.compress}\" index=\"${jar.index}\" jarfile=\"${dist.jar}\" manifestencoding=\"UTF-8\">\n+                <j2seproject1:fileset dir=\"${build.classes.dir}\" excludes=\"${dist.archive.excludes}\"\/>\n+            <\/jar>\n+        <\/presetdef>\n+    <\/target>\n+    <target name=\"-init-ap-cmdline-properties\">\n+        <property name=\"annotation.processing.enabled\" value=\"true\"\/>\n+        <property name=\"annotation.processing.processors.list\" value=\"\"\/>\n+        <property name=\"annotation.processing.processor.options\" value=\"\"\/>\n+        <property name=\"annotation.processing.run.all.processors\" value=\"true\"\/>\n+        <property name=\"javac.processorpath\" value=\"${javac.classpath}\"\/>\n+        <property name=\"javac.test.processorpath\" value=\"${javac.test.classpath}\"\/>\n+        <condition property=\"ap.supported.internal\" value=\"true\">\n+            <not>\n+                <matches pattern=\"1\\.[0-5](\\..*)?\" string=\"${javac.source}\"\/>\n+            <\/not>\n+        <\/condition>\n+    <\/target>\n+    <target depends=\"-init-ap-cmdline-properties\" if=\"ap.supported.internal\" name=\"-init-ap-cmdline-supported\">\n+        <condition else=\"\" property=\"ap.processors.internal\" value=\"-processor ${annotation.processing.processors.list}\">\n+            <isfalse value=\"${annotation.processing.run.all.processors}\"\/>\n+        <\/condition>\n+        <condition else=\"\" property=\"ap.proc.none.internal\" value=\"-proc:none\">\n+            <isfalse value=\"${annotation.processing.enabled}\"\/>\n+        <\/condition>\n+    <\/target>\n+    <target depends=\"-init-ap-cmdline-properties,-init-ap-cmdline-supported\" name=\"-init-ap-cmdline\">\n+        <property name=\"ap.cmd.line.internal\" value=\"\"\/>\n+    <\/target>\n+    <target depends=\"-pre-init,-init-private,-init-user,-init-project,-do-init,-post-init,-init-check,-init-macrodef-property,-init-macrodef-javac,-init-macrodef-test,-init-macrodef-test-debug,-init-macrodef-nbjpda,-init-macrodef-debug,-init-macrodef-java,-init-presetdef-jar,-init-ap-cmdline\" name=\"init\"\/>\n+    <!--\n+                ===================\n+                COMPILATION SECTION\n+                ===================\n+            -->\n+    <target name=\"-deps-jar-init\" unless=\"built-jar.properties\">\n+        <property location=\"${build.dir}\/built-jar.properties\" name=\"built-jar.properties\"\/>\n+        <delete file=\"${built-jar.properties}\" quiet=\"true\"\/>\n+    <\/target>\n+    <target if=\"already.built.jar.${basedir}\" name=\"-warn-already-built-jar\">\n+        <echo level=\"warn\" message=\"Cycle detected: FXMediaPlayer was already built\"\/>\n+    <\/target>\n+    <target depends=\"init,-deps-jar-init\" name=\"deps-jar\" unless=\"no.deps\">\n+        <mkdir dir=\"${build.dir}\"\/>\n+        <touch file=\"${built-jar.properties}\" verbose=\"false\"\/>\n+        <property file=\"${built-jar.properties}\" prefix=\"already.built.jar.\"\/>\n+        <antcall target=\"-warn-already-built-jar\"\/>\n+        <propertyfile file=\"${built-jar.properties}\">\n+            <entry key=\"${basedir}\" value=\"\"\/>\n+        <\/propertyfile>\n+    <\/target>\n+    <target depends=\"init,-check-automatic-build,-clean-after-automatic-build\" name=\"-verify-automatic-build\"\/>\n+    <target depends=\"init\" name=\"-check-automatic-build\">\n+        <available file=\"${build.classes.dir}\/.netbeans_automatic_build\" property=\"netbeans.automatic.build\"\/>\n+    <\/target>\n+    <target depends=\"init\" if=\"netbeans.automatic.build\" name=\"-clean-after-automatic-build\">\n+        <antcall target=\"clean\">\n+            <param name=\"no.dependencies\" value=\"true\"\/>\n+        <\/antcall>\n+    <\/target>\n+    <target depends=\"init,deps-jar\" name=\"-pre-pre-compile\">\n+        <mkdir dir=\"${build.classes.dir}\"\/>\n+    <\/target>\n+    <target name=\"-pre-compile\">\n+        <!-- Empty placeholder for easier customization. -->\n+        <!-- You can override this target in the ..\/build.xml file. -->\n+    <\/target>\n+    <target if=\"do.depend.true\" name=\"-compile-depend\">\n+        <pathconvert property=\"build.generated.subdirs\">\n+            <dirset dir=\"${build.generated.sources.dir}\" erroronmissingdir=\"false\">\n+                <include name=\"*\"\/>\n+            <\/dirset>\n+        <\/pathconvert>\n+        <j2seproject3:depend srcdir=\"${src.dir}:${build.generated.subdirs}\"\/>\n+    <\/target>\n+    <target depends=\"init,deps-jar,-pre-pre-compile,-pre-compile, -copy-persistence-xml,-compile-depend\" if=\"have.sources\" name=\"-do-compile\">\n+        <j2seproject3:javac gensrcdir=\"${build.generated.sources.dir}\"\/>\n+        <copy todir=\"${build.classes.dir}\">\n+            <fileset dir=\"${src.dir}\" excludes=\"${build.classes.excludes},${excludes}\" includes=\"${includes}\"\/>\n+        <\/copy>\n+    <\/target>\n+    <target if=\"has.persistence.xml\" name=\"-copy-persistence-xml\">\n+        <mkdir dir=\"${build.classes.dir}\/META-INF\"\/>\n+        <copy todir=\"${build.classes.dir}\/META-INF\">\n+            <fileset dir=\"${meta.inf.dir}\" includes=\"persistence.xml orm.xml\"\/>\n+        <\/copy>\n+    <\/target>\n+    <target name=\"-post-compile\">\n+        <!-- Empty placeholder for easier customization. -->\n+        <!-- You can override this target in the ..\/build.xml file. -->\n+    <\/target>\n+    <target depends=\"init,deps-jar,-verify-automatic-build,-pre-pre-compile,-pre-compile,-do-compile,-post-compile\" description=\"Compile project.\" name=\"compile\"\/>\n+    <target name=\"-pre-compile-single\">\n+        <!-- Empty placeholder for easier customization. -->\n+        <!-- You can override this target in the ..\/build.xml file. -->\n+    <\/target>\n+    <target depends=\"init,deps-jar,-pre-pre-compile\" name=\"-do-compile-single\">\n+        <fail unless=\"javac.includes\">Must select some files in the IDE or set javac.includes<\/fail>\n+        <j2seproject3:force-recompile\/>\n+        <j2seproject3:javac excludes=\"\" gensrcdir=\"${build.generated.sources.dir}\" includes=\"${javac.includes}, module-info.java\" sourcepath=\"${src.dir}\"\/>\n+    <\/target>\n+    <target name=\"-post-compile-single\">\n+        <!-- Empty placeholder for easier customization. -->\n+        <!-- You can override this target in the ..\/build.xml file. -->\n+    <\/target>\n+    <target depends=\"init,deps-jar,-verify-automatic-build,-pre-pre-compile,-pre-compile-single,-do-compile-single,-post-compile-single\" name=\"compile-single\"\/>\n+    <!--\n+                ====================\n+                JAR BUILDING SECTION\n+                ====================\n+            -->\n+    <target depends=\"init\" name=\"-pre-pre-jar\">\n+        <dirname file=\"${dist.jar}\" property=\"dist.jar.dir\"\/>\n+        <mkdir dir=\"${dist.jar.dir}\"\/>\n+    <\/target>\n+    <target name=\"-pre-jar\">\n+        <!-- Empty placeholder for easier customization. -->\n+        <!-- You can override this target in the ..\/build.xml file. -->\n+    <\/target>\n+    <target depends=\"init,compile\" name=\"-check-module-main-class\">\n+        <pathconvert property=\"main.class.file\">\n+            <string value=\"${main.class}\"\/>\n+            <unpackagemapper from=\"*\" to=\"*.class\"\/>\n+        <\/pathconvert>\n+        <condition property=\"do.module.main.class\">\n+            <and>\n+                <isset property=\"main.class.available\"\/>\n+                <available file=\"${build.classes.dir}\/module-info.class\"\/>\n+                <available file=\"${build.classes.dir}\/${main.class.file}\"\/>\n+                <isset property=\"libs.CopyLibs.classpath\"\/>\n+                <available classname=\"org.netbeans.modules.java.j2seproject.moduletask.ModuleMainClass\" classpath=\"${libs.CopyLibs.classpath}\"\/>\n+            <\/and>\n+        <\/condition>\n+    <\/target>\n+    <target depends=\"-check-module-main-class\" if=\"do.module.main.class\" name=\"-set-module-main-class\">\n+        <taskdef classname=\"org.netbeans.modules.java.j2seproject.moduletask.ModuleMainClass\" classpath=\"${libs.CopyLibs.classpath}\" name=\"modulemainclass\"\/>\n+        <modulemainclass failonerror=\"false\" mainclass=\"${main.class}\" moduleinfo=\"${build.classes.dir}\/module-info.class\"\/>\n+    <\/target>\n+    <target depends=\"init\" if=\"do.archive\" name=\"-do-jar-create-manifest\" unless=\"manifest.available\">\n+        <tempfile deleteonexit=\"true\" destdir=\"${build.dir}\" property=\"tmp.manifest.file\"\/>\n+        <touch file=\"${tmp.manifest.file}\" verbose=\"false\"\/>\n+    <\/target>\n+    <target depends=\"init\" if=\"do.archive+manifest.available\" name=\"-do-jar-copy-manifest\">\n+        <tempfile deleteonexit=\"true\" destdir=\"${build.dir}\" property=\"tmp.manifest.file\"\/>\n+        <copy encoding=\"${manifest.encoding}\" file=\"${manifest.file}\" outputencoding=\"UTF-8\" tofile=\"${tmp.manifest.file}\"\/>\n+    <\/target>\n+    <target depends=\"init,-do-jar-create-manifest,-do-jar-copy-manifest\" if=\"do.archive+main.class.available\" name=\"-do-jar-set-mainclass\">\n+        <manifest encoding=\"UTF-8\" file=\"${tmp.manifest.file}\" mode=\"update\">\n+            <attribute name=\"Main-Class\" value=\"${main.class}\"\/>\n+        <\/manifest>\n+    <\/target>\n+    <target depends=\"init,-do-jar-create-manifest,-do-jar-copy-manifest\" if=\"do.archive+profile.available\" name=\"-do-jar-set-profile\">\n+        <manifest encoding=\"UTF-8\" file=\"${tmp.manifest.file}\" mode=\"update\">\n+            <attribute name=\"Profile\" value=\"${javac.profile}\"\/>\n+        <\/manifest>\n+    <\/target>\n+    <target depends=\"init,-do-jar-create-manifest,-do-jar-copy-manifest\" if=\"do.archive+splashscreen.available\" name=\"-do-jar-set-splashscreen\">\n+        <basename file=\"${application.splash}\" property=\"splashscreen.basename\"\/>\n+        <mkdir dir=\"${build.classes.dir}\/META-INF\"\/>\n+        <copy failonerror=\"false\" file=\"${application.splash}\" todir=\"${build.classes.dir}\/META-INF\"\/>\n+        <manifest encoding=\"UTF-8\" file=\"${tmp.manifest.file}\" mode=\"update\">\n+            <attribute name=\"SplashScreen-Image\" value=\"META-INF\/${splashscreen.basename}\"\/>\n+        <\/manifest>\n+    <\/target>\n+    <target depends=\"init,compile\" name=\"-check-do-mkdist\">\n+        <condition property=\"do.mkdist\">\n+            <and>\n+                <isset property=\"do.archive\"\/>\n+                <isset property=\"libs.CopyLibs.classpath\"\/>\n+                <not>\n+                    <istrue value=\"${mkdist.disabled}\"\/>\n+                <\/not>\n+                <not>\n+                    <available file=\"${build.classes.dir}\/module-info.class\"\/>\n+                <\/not>\n+            <\/and>\n+        <\/condition>\n+    <\/target>\n+    <target depends=\"init,-init-macrodef-copylibs,compile,-pre-pre-jar,-pre-jar,-do-jar-create-manifest,-do-jar-copy-manifest,-do-jar-set-mainclass,-do-jar-set-profile,-do-jar-set-splashscreen,-check-do-mkdist\" if=\"do.mkdist\" name=\"-do-jar-copylibs\">\n+        <j2seproject3:copylibs manifest=\"${tmp.manifest.file}\"\/>\n+        <echo level=\"info\">To run this application from the command line without Ant, try:<\/echo>\n+        <property location=\"${dist.jar}\" name=\"dist.jar.resolved\"\/>\n+        <echo level=\"info\">java -jar \"${dist.jar.resolved}\"<\/echo>\n+    <\/target>\n+    <target depends=\"init,compile,-pre-pre-jar,-pre-jar,-do-jar-create-manifest,-do-jar-copy-manifest,-do-jar-set-mainclass,-do-jar-set-profile,-do-jar-set-splashscreen,-check-do-mkdist\" if=\"do.archive\" name=\"-do-jar-jar\" unless=\"do.mkdist\">\n+        <j2seproject1:jar manifest=\"${tmp.manifest.file}\"\/>\n+        <property location=\"${build.classes.dir}\" name=\"build.classes.dir.resolved\"\/>\n+        <property location=\"${dist.jar}\" name=\"dist.jar.resolved\"\/>\n+        <condition else=\"${dist.jar.resolved}\" property=\"jar.usage.message.class.path.replacement\" value=\"\">\n+            <isset property=\"named.module.internal\"\/>\n+        <\/condition>\n+        <pathconvert property=\"run.classpath.with.dist.jar\">\n+            <path path=\"${run.classpath}\"\/>\n+            <map from=\"${build.classes.dir.resolved}\" to=\"${jar.usage.message.class.path.replacement}\"\/>\n+        <\/pathconvert>\n+        <pathconvert property=\"run.modulepath.with.dist.jar\">\n+            <path location=\"${dist.jar.resolved}\"\/>\n+            <path path=\"${run.modulepath}\"\/>\n+            <map from=\"${build.classes.dir.resolved}\" to=\"${dist.jar.resolved}\"\/>\n+        <\/pathconvert>\n+        <condition else=\"${run.modulepath}\" property=\"jar.usage.message.run.modulepath.with.dist.jar\" value=\"${run.modulepath.with.dist.jar}\">\n+            <isset property=\"named.module.internal\"\/>\n+        <\/condition>\n+        <condition else=\"\" property=\"jar.usage.message.module.path\" value=\" -p ${jar.usage.message.run.modulepath.with.dist.jar}\">\n+            <and>\n+                <isset property=\"modules.supported.internal\"\/>\n+                <length length=\"0\" string=\"${jar.usage.message.run.modulepath.with.dist.jar}\" when=\"greater\"\/>\n+            <\/and>\n+        <\/condition>\n+        <condition else=\"\" property=\"jar.usage.message.class.path\" value=\" -cp ${run.classpath.with.dist.jar}\">\n+            <length length=\"0\" string=\"${run.classpath.with.dist.jar}\" when=\"greater\"\/>\n+        <\/condition>\n+        <condition else=\"\/${main.class}\" property=\"jar.usage.message.main.class.class.selector\" value=\"\">\n+            <isset property=\"do.module.main.class\"\/>\n+        <\/condition>\n+        <condition else=\" ${main.class}\" property=\"jar.usage.message.main.class\" value=\" -m ${module.name}${jar.usage.message.main.class.class.selector}\">\n+            <isset property=\"named.module.internal\"\/>\n+        <\/condition>\n+        <condition else=\"\" property=\"jar.usage.message\" value=\"To run this application from the command line without Ant, try:${line.separator}java${jar.usage.message.module.path}${jar.usage.message.class.path}${jar.usage.message.main.class}\">\n+            <isset property=\"main.class.available\"\/>\n+        <\/condition>\n+        <condition else=\"debug\" property=\"jar.usage.level\" value=\"info\">\n+            <isset property=\"main.class.available\"\/>\n+        <\/condition>\n+        <echo level=\"${jar.usage.level}\" message=\"${jar.usage.message}\"\/>\n+    <\/target>\n+    <target depends=\"-do-jar-copylibs\" if=\"do.archive\" name=\"-do-jar-delete-manifest\">\n+        <delete>\n+            <fileset file=\"${tmp.manifest.file}\"\/>\n+        <\/delete>\n+    <\/target>\n+    <target depends=\"init,compile,-pre-pre-jar,-pre-jar,-do-jar-create-manifest,-do-jar-copy-manifest,-do-jar-set-mainclass,-do-jar-set-profile,-do-jar-set-splashscreen,-do-jar-jar,-do-jar-delete-manifest\" name=\"-do-jar-without-libraries\"\/>\n+    <target depends=\"init,compile,-pre-pre-jar,-pre-jar,-do-jar-create-manifest,-do-jar-copy-manifest,-do-jar-set-mainclass,-do-jar-set-profile,-do-jar-set-splashscreen,-do-jar-copylibs,-do-jar-delete-manifest\" name=\"-do-jar-with-libraries\"\/>\n+    <target name=\"-post-jar\">\n+        <!-- Empty placeholder for easier customization. -->\n+        <!-- You can override this target in the ..\/build.xml file. -->\n+    <\/target>\n+    <target depends=\"init,compile,-pre-jar,-set-module-main-class,-do-jar-without-libraries,-do-jar-with-libraries,-post-jar\" name=\"-do-jar\"\/>\n+    <target depends=\"init,compile,-pre-jar,-do-jar,-post-jar,deploy\" description=\"Build JAR.\" name=\"jar\"\/>\n+    <!--\n+                =================\n+                DEPLOY SECTION\n+                =================\n+            -->\n+    <target name=\"-pre-deploy\">\n+        <!-- Empty placeholder for easier customization. -->\n+        <!-- You can override this target in the ..\/build.xml file. -->\n+    <\/target>\n+    <target depends=\"init\" name=\"-check-jlink\">\n+        <condition property=\"do.jlink.internal\">\n+            <and>\n+                <istrue value=\"${do.jlink}\"\/>\n+                <isset property=\"do.archive\"\/>\n+                <isset property=\"named.module.internal\"\/>\n+            <\/and>\n+        <\/condition>\n+    <\/target>\n+    <target depends=\"init,-do-jar,-post-jar,-pre-deploy,-check-jlink\" if=\"do.jlink.internal\" name=\"-do-deploy\">\n+        <delete dir=\"${dist.jlink.dir}\" failonerror=\"false\" quiet=\"true\"\/>\n+        <property name=\"jlink.launcher.name\" value=\"${application.title}\"\/>\n+        <condition else=\"${module.name}\" property=\"jlink.add.modules\" value=\"${module.name},${jlink.additionalmodules}\">\n+            <and>\n+                <isset property=\"jlink.additionalmodules\"\/>\n+                <length length=\"0\" string=\"${jlink.additionalmodules}\" when=\"greater\"\/>\n+            <\/and>\n+        <\/condition>\n+        <condition property=\"jlink.do.strip.internal\">\n+            <and>\n+                <isset property=\"jlink.strip\"\/>\n+                <istrue value=\"${jlink.strip}\"\/>\n+            <\/and>\n+        <\/condition>\n+        <condition property=\"jlink.do.additionalparam.internal\">\n+            <and>\n+                <isset property=\"jlink.additionalparam\"\/>\n+                <length length=\"0\" string=\"${jlink.additionalparam}\" when=\"greater\"\/>\n+            <\/and>\n+        <\/condition>\n+        <condition property=\"jlink.do.launcher.internal\">\n+            <and>\n+                <istrue value=\"${jlink.launcher}\"\/>\n+                <isset property=\"main.class.available\"\/>\n+            <\/and>\n+        <\/condition>\n+        <property name=\"platform.jlink\" value=\"${platform.home}\/bin\/jlink\"\/>\n+        <property name=\"jlink.systemmodules.internal\" value=\"${platform.home}\/jmods\"\/>\n+        <exec executable=\"${platform.jlink}\">\n+            <arg value=\"--module-path\"\/>\n+            <arg path=\"${jlink.systemmodules.internal}:${run.modulepath}:${dist.jar}\"\/>\n+            <arg value=\"--add-modules\"\/>\n+            <arg value=\"${jlink.add.modules}\"\/>\n+            <arg if:set=\"jlink.do.strip.internal\" value=\"--strip-debug\"\/>\n+            <arg if:set=\"jlink.do.launcher.internal\" value=\"--launcher\"\/>\n+            <arg if:set=\"jlink.do.launcher.internal\" value=\"${jlink.launcher.name}=${module.name}\/${main.class}\"\/>\n+            <arg if:set=\"jlink.do.additionalparam.internal\" line=\"${jlink.additionalparam}\"\/>\n+            <arg value=\"--output\"\/>\n+            <arg value=\"${dist.jlink.output}\"\/>\n+        <\/exec>\n+    <\/target>\n+    <target name=\"-post-deploy\">\n+        <!-- Empty placeholder for easier customization. -->\n+        <!-- You can override this target in the ..\/build.xml file. -->\n+    <\/target>\n+    <target depends=\"-do-jar,-post-jar,-pre-deploy,-do-deploy,-post-deploy\" name=\"deploy\"\/>\n+    <!--\n+                =================\n+                EXECUTION SECTION\n+                =================\n+            -->\n+    <target depends=\"init,compile\" description=\"Run a main class.\" name=\"run\">\n+        <j2seproject1:java>\n+            <customize>\n+                <arg line=\"${application.args}\"\/>\n+            <\/customize>\n+        <\/j2seproject1:java>\n+    <\/target>\n+    <target name=\"-do-not-recompile\">\n+        <property name=\"javac.includes.binary\" value=\"\"\/>\n+    <\/target>\n+    <target depends=\"init,compile-single\" name=\"run-single\">\n+        <fail unless=\"run.class\">Must select one file in the IDE or set run.class<\/fail>\n+        <j2seproject1:java classname=\"${run.class}\"\/>\n+    <\/target>\n+    <target depends=\"init,compile-test-single\" name=\"run-test-with-main\">\n+        <fail unless=\"run.class\">Must select one file in the IDE or set run.class<\/fail>\n+        <j2seproject1:java classname=\"${run.class}\" classpath=\"${run.test.classpath}\"\/>\n+    <\/target>\n+    <!--\n+                =================\n+                DEBUGGING SECTION\n+                =================\n+            -->\n+    <target depends=\"init\" if=\"netbeans.home\" name=\"-debug-start-debugger\">\n+        <j2seproject1:nbjpdastart name=\"${debug.class}\"\/>\n+    <\/target>\n+    <target depends=\"init\" if=\"netbeans.home\" name=\"-debug-start-debugger-main-test\">\n+        <j2seproject1:nbjpdastart classpath=\"${debug.test.classpath}\" name=\"${debug.class}\"\/>\n+    <\/target>\n+    <target depends=\"init,compile\" name=\"-debug-start-debuggee\">\n+        <j2seproject3:debug>\n+            <customizeDebuggee>\n+                <arg line=\"${application.args}\"\/>\n+            <\/customizeDebuggee>\n+        <\/j2seproject3:debug>\n+    <\/target>\n+    <target depends=\"init,compile,-debug-start-debugger,-debug-start-debuggee\" description=\"Debug project in IDE.\" if=\"netbeans.home\" name=\"debug\"\/>\n+    <target depends=\"init\" if=\"netbeans.home\" name=\"-debug-start-debugger-stepinto\">\n+        <j2seproject1:nbjpdastart stopclassname=\"${main.class}\"\/>\n+    <\/target>\n+    <target depends=\"init,compile,-debug-start-debugger-stepinto,-debug-start-debuggee\" if=\"netbeans.home\" name=\"debug-stepinto\"\/>\n+    <target depends=\"init,compile-single\" if=\"netbeans.home\" name=\"-debug-start-debuggee-single\">\n+        <fail unless=\"debug.class\">Must select one file in the IDE or set debug.class<\/fail>\n+        <j2seproject3:debug classname=\"${debug.class}\"\/>\n+    <\/target>\n+    <target depends=\"init,compile-single,-debug-start-debugger,-debug-start-debuggee-single\" if=\"netbeans.home\" name=\"debug-single\"\/>\n+    <target depends=\"init,compile-test-single\" if=\"netbeans.home\" name=\"-debug-start-debuggee-main-test\">\n+        <fail unless=\"debug.class\">Must select one file in the IDE or set debug.class<\/fail>\n+        <j2seproject3:debug classname=\"${debug.class}\" classpath=\"${debug.test.classpath}\"\/>\n+    <\/target>\n+    <target depends=\"init,compile-test-single,-debug-start-debugger-main-test,-debug-start-debuggee-main-test\" if=\"netbeans.home\" name=\"debug-test-with-main\"\/>\n+    <target depends=\"init\" name=\"-pre-debug-fix\">\n+        <fail unless=\"fix.includes\">Must set fix.includes<\/fail>\n+        <property name=\"javac.includes\" value=\"${fix.includes}.java\"\/>\n+    <\/target>\n+    <target depends=\"init,-pre-debug-fix,compile-single\" if=\"netbeans.home\" name=\"-do-debug-fix\">\n+        <j2seproject1:nbjpdareload\/>\n+    <\/target>\n+    <target depends=\"init,-pre-debug-fix,-do-debug-fix\" if=\"netbeans.home\" name=\"debug-fix\"\/>\n+    <!--\n+                =================\n+                PROFILING SECTION\n+                =================\n+            -->\n+    <!--\n+                pre NB7.2 profiler integration\n+            -->\n+    <target depends=\"profile-init,compile\" description=\"Profile a project in the IDE.\" if=\"profiler.info.jvmargs.agent\" name=\"-profile-pre72\">\n+        <fail unless=\"netbeans.home\">This target only works when run from inside the NetBeans IDE.<\/fail>\n+        <nbprofiledirect>\n+            <classpath>\n+                <path path=\"${run.classpath}\"\/>\n+            <\/classpath>\n+        <\/nbprofiledirect>\n+        <profile\/>\n+    <\/target>\n+    <target depends=\"profile-init,compile-single\" description=\"Profile a selected class in the IDE.\" if=\"profiler.info.jvmargs.agent\" name=\"-profile-single-pre72\">\n+        <fail unless=\"profile.class\">Must select one file in the IDE or set profile.class<\/fail>\n+        <fail unless=\"netbeans.home\">This target only works when run from inside the NetBeans IDE.<\/fail>\n+        <nbprofiledirect>\n+            <classpath>\n+                <path path=\"${run.classpath}\"\/>\n+            <\/classpath>\n+        <\/nbprofiledirect>\n+        <profile classname=\"${profile.class}\"\/>\n+    <\/target>\n+    <target depends=\"profile-init,compile-single\" if=\"profiler.info.jvmargs.agent\" name=\"-profile-applet-pre72\">\n+        <fail unless=\"netbeans.home\">This target only works when run from inside the NetBeans IDE.<\/fail>\n+        <nbprofiledirect>\n+            <classpath>\n+                <path path=\"${run.classpath}\"\/>\n+            <\/classpath>\n+        <\/nbprofiledirect>\n+        <profile classname=\"sun.applet.AppletViewer\">\n+            <customize>\n+                <arg value=\"${applet.url}\"\/>\n+            <\/customize>\n+        <\/profile>\n+    <\/target>\n+    <target depends=\"-init-macrodef-junit,profile-init,compile-test-single\" if=\"profiler.info.jvmargs.agent\" name=\"-profile-test-single-pre72\">\n+        <fail unless=\"netbeans.home\">This target only works when run from inside the NetBeans IDE.<\/fail>\n+        <nbprofiledirect>\n+            <classpath>\n+                <path path=\"${run.test.classpath}\"\/>\n+            <\/classpath>\n+        <\/nbprofiledirect>\n+        <j2seproject3:junit excludes=\"${excludes}\" includes=\"${includes}\" testincludes=\"${profile.class}\" testmethods=\"\">\n+            <customize>\n+                <jvmarg value=\"-agentlib:jdwp=transport=${debug-transport},address=${jpda.address}\"\/>\n+                <env key=\"${profiler.info.pathvar}\" path=\"${profiler.info.agentpath}:${profiler.current.path}\"\/>\n+                <jvmarg value=\"${profiler.info.jvmargs.agent}\"\/>\n+                <jvmarg line=\"${profiler.info.jvmargs}\"\/>\n+                <classpath>\n+                    <path path=\"${run.test.classpath}\"\/>\n+                <\/classpath>\n+            <\/customize>\n+        <\/j2seproject3:junit>\n+    <\/target>\n+    <!--\n+                end of pre NB72 profiling section\n+            -->\n+    <target if=\"netbeans.home\" name=\"-profile-check\">\n+        <condition property=\"profiler.configured\">\n+            <or>\n+                <contains casesensitive=\"true\" string=\"${run.jvmargs.ide}\" substring=\"-agentpath:\"\/>\n+                <contains casesensitive=\"true\" string=\"${run.jvmargs.ide}\" substring=\"-javaagent:\"\/>\n+            <\/or>\n+        <\/condition>\n+    <\/target>\n+    <target depends=\"-profile-check,-profile-pre72\" description=\"Profile a project in the IDE.\" if=\"profiler.configured\" name=\"profile\" unless=\"profiler.info.jvmargs.agent\">\n+        <startprofiler\/>\n+        <antcall target=\"run\"\/>\n+    <\/target>\n+    <target depends=\"-profile-check,-profile-single-pre72\" description=\"Profile a selected class in the IDE.\" if=\"profiler.configured\" name=\"profile-single\" unless=\"profiler.info.jvmargs.agent\">\n+        <fail unless=\"run.class\">Must select one file in the IDE or set run.class<\/fail>\n+        <startprofiler\/>\n+        <antcall target=\"run-single\"\/>\n+    <\/target>\n+    <target depends=\"-profile-test-single-pre72\" description=\"Profile a selected test in the IDE.\" name=\"profile-test-single\"\/>\n+    <target depends=\"-profile-check\" description=\"Profile a selected test in the IDE.\" if=\"profiler.configured\" name=\"profile-test\" unless=\"profiler.info.jvmargs\">\n+        <fail unless=\"test.includes\">Must select some files in the IDE or set test.includes<\/fail>\n+        <startprofiler\/>\n+        <antcall target=\"test-single\"\/>\n+    <\/target>\n+    <target depends=\"-profile-check\" description=\"Profile a selected class in the IDE.\" if=\"profiler.configured\" name=\"profile-test-with-main\">\n+        <fail unless=\"run.class\">Must select one file in the IDE or set run.class<\/fail>\n+        <startprofiler\/>\n+        <antcall target=\"run-test-with-main\"\/>\n+    <\/target>\n+    <target depends=\"-profile-check,-profile-applet-pre72\" if=\"profiler.configured\" name=\"profile-applet\" unless=\"profiler.info.jvmargs.agent\">\n+        <fail unless=\"applet.url\">Must select one file in the IDE or set applet.url<\/fail>\n+        <startprofiler\/>\n+        <antcall target=\"run-applet\"\/>\n+    <\/target>\n+    <!--\n+                =========================\n+                TEST COMPILATION SECTION\n+                =========================\n+            -->\n+    <target depends=\"init,compile\" if=\"have.tests\" name=\"-pre-pre-compile-test\">\n+        <mkdir dir=\"${build.test.classes.dir}\"\/>\n+    <\/target>\n+    <target name=\"-pre-compile-test\">\n+        <!-- Empty placeholder for easier customization. -->\n+        <!-- You can override this target in the ..\/build.xml file. -->\n+    <\/target>\n+    <target depends=\"-init-source-module-properties\" if=\"named.module.internal\" name=\"-init-test-javac-module-properties-with-module\">\n+        <j2seproject3:modulename property=\"test.module.name\" sourcepath=\"${test.src.dir}\"\/>\n+        <condition else=\"${empty.dir}\" property=\"javac.test.sourcepath\" value=\"${test.src.dir}\">\n+            <and>\n+                <isset property=\"test.module.name\"\/>\n+                <length length=\"0\" string=\"${test.module.name}\" when=\"greater\"\/>\n+            <\/and>\n+        <\/condition>\n+        <condition else=\"--patch-module ${module.name}=${test.src.dir} --add-reads ${module.name}=ALL-UNNAMED\" property=\"javac.test.compilerargs\" value=\"--add-reads ${test.module.name}=ALL-UNNAMED\">\n+            <and>\n+                <isset property=\"test.module.name\"\/>\n+                <length length=\"0\" string=\"${test.module.name}\" when=\"greater\"\/>\n+            <\/and>\n+        <\/condition>\n+    <\/target>\n+    <target depends=\"-init-source-module-properties\" if=\"named.module.internal\" name=\"-init-test-run-module-properties\">\n+        <condition else=\"${module.name}\" property=\"run.test.addexport.source.module.internal\" value=\"${test.module.name}\">\n+            <and>\n+                <isset property=\"test.module.name\"\/>\n+                <length length=\"0\" string=\"${test.module.name}\" when=\"greater\"\/>\n+            <\/and>\n+        <\/condition>\n+        <fileset dir=\"${build.test.classes.dir}\" id=\"run.test.packages.internal\" includes=\"**\/*.class\"\/>\n+        <property location=\"${build.test.classes.dir}\" name=\"build.test.classes.dir.abs.internal\"\/>\n+        <pathconvert pathsep=\" \" property=\"run.test.addexports.internal\" refid=\"run.test.packages.internal\">\n+            <chainedmapper>\n+                <regexpmapper from=\"^(.*)\\Q${file.separator}\\E.*\\.class$$\" to=\"\\1\"\/>\n+                <filtermapper>\n+                    <uniqfilter\/>\n+                    <replacestring from=\"${build.test.classes.dir.abs.internal}\" to=\"\"\/>\n+                <\/filtermapper>\n+                <cutdirsmapper dirs=\"1\"\/>\n+                <packagemapper from=\"*\" to=\"--add-exports ${run.test.addexport.source.module.internal}\/*=ALL-UNNAMED\"\/>\n+            <\/chainedmapper>\n+        <\/pathconvert>\n+        <condition else=\"--patch-module ${module.name}=${build.test.classes.dir} --add-modules ${module.name} --add-reads ${module.name}=ALL-UNNAMED ${run.test.addexports.internal}\" property=\"run.test.jvmargs\" value=\"--add-modules ${test.module.name} --add-reads ${test.module.name}=ALL-UNNAMED ${run.test.addexports.internal}\">\n+            <and>\n+                <isset property=\"test.module.name\"\/>\n+                <length length=\"0\" string=\"${test.module.name}\" when=\"greater\"\/>\n+            <\/and>\n+        <\/condition>\n+    <\/target>\n+    <target depends=\"-init-source-module-properties\" name=\"-init-test-module-properties-without-module\" unless=\"named.module.internal\">\n+        <property name=\"javac.test.sourcepath\" value=\"${empty.dir}\"\/>\n+        <property name=\"javac.test.compilerargs\" value=\"\"\/>\n+        <property name=\"run.test.jvmargs\" value=\"\"\/>\n+    <\/target>\n+    <target depends=\"-init-test-javac-module-properties-with-module,-init-test-module-properties-without-module\" name=\"-init-test-module-properties\"\/>\n+    <target if=\"do.depend.true\" name=\"-compile-test-depend\">\n+        <j2seproject3:depend classpath=\"${javac.test.classpath}\" destdir=\"${build.test.classes.dir}\" srcdir=\"${test.src.dir}\"\/>\n+    <\/target>\n+    <target depends=\"init,deps-jar,compile,-init-test-module-properties,-pre-pre-compile-test,-pre-compile-test,-compile-test-depend\" if=\"have.tests\" name=\"-do-compile-test\">\n+        <j2seproject3:javac apgeneratedsrcdir=\"${build.test.classes.dir}\" classpath=\"${javac.test.classpath}\" debug=\"true\" destdir=\"${build.test.classes.dir}\" modulepath=\"${javac.test.modulepath}\" processorpath=\"${javac.test.processorpath}\" sourcepath=\"${javac.test.sourcepath}\" srcdir=\"${test.src.dir}\">\n+            <customize>\n+                <compilerarg line=\"${javac.test.compilerargs}\"\/>\n+            <\/customize>\n+        <\/j2seproject3:javac>\n+        <copy todir=\"${build.test.classes.dir}\">\n+            <fileset dir=\"${test.src.dir}\" excludes=\"${build.classes.excludes},${excludes}\" includes=\"${includes}\"\/>\n+        <\/copy>\n+    <\/target>\n+    <target name=\"-post-compile-test\">\n+        <!-- Empty placeholder for easier customization. -->\n+        <!-- You can override this target in the ..\/build.xml file. -->\n+    <\/target>\n+    <target depends=\"init,compile,-pre-pre-compile-test,-pre-compile-test,-do-compile-test,-post-compile-test\" name=\"compile-test\"\/>\n+    <target name=\"-pre-compile-test-single\">\n+        <!-- Empty placeholder for easier customization. -->\n+        <!-- You can override this target in the ..\/build.xml file. -->\n+    <\/target>\n+    <target depends=\"init,deps-jar,compile,-init-test-module-properties,-pre-pre-compile-test,-pre-compile-test-single\" if=\"have.tests\" name=\"-do-compile-test-single\">\n+        <fail unless=\"javac.includes\">Must select some files in the IDE or set javac.includes<\/fail>\n+        <j2seproject3:force-recompile destdir=\"${build.test.classes.dir}\"\/>\n+        <j2seproject3:javac apgeneratedsrcdir=\"${build.test.classes.dir}\" classpath=\"${javac.test.classpath}\" debug=\"true\" destdir=\"${build.test.classes.dir}\" excludes=\"\" includes=\"${javac.includes}, module-info.java\" modulepath=\"${javac.test.modulepath}\" processorpath=\"${javac.test.processorpath}\" sourcepath=\"${test.src.dir}\" srcdir=\"${test.src.dir}\">\n+            <customize>\n+                <compilerarg line=\"${javac.test.compilerargs}\"\/>\n+            <\/customize>\n+        <\/j2seproject3:javac>\n+        <copy todir=\"${build.test.classes.dir}\">\n+            <fileset dir=\"${test.src.dir}\" excludes=\"${build.classes.excludes},${excludes}\" includes=\"${includes}\"\/>\n+        <\/copy>\n+    <\/target>\n+    <target name=\"-post-compile-test-single\">\n+        <!-- Empty placeholder for easier customization. -->\n+        <!-- You can override this target in the ..\/build.xml file. -->\n+    <\/target>\n+    <target depends=\"init,compile,-pre-pre-compile-test,-pre-compile-test-single,-do-compile-test-single,-post-compile-test-single\" name=\"compile-test-single\"\/>\n+    <!--\n+                =======================\n+                TEST EXECUTION SECTION\n+                =======================\n+            -->\n+    <target depends=\"init\" if=\"have.tests\" name=\"-pre-test-run\">\n+        <mkdir dir=\"${build.test.results.dir}\"\/>\n+    <\/target>\n+    <target depends=\"init,compile-test,-init-test-run-module-properties,-pre-test-run\" if=\"have.tests\" name=\"-do-test-run\">\n+        <j2seproject3:test includes=\"${includes}\" testincludes=\"**\/*Test.java\"\/>\n+    <\/target>\n+    <target depends=\"init,compile-test,-pre-test-run,-do-test-run\" if=\"have.tests\" name=\"-post-test-run\">\n+        <fail if=\"tests.failed\" unless=\"ignore.failing.tests\">Some tests failed; see details above.<\/fail>\n+    <\/target>\n+    <target depends=\"init\" if=\"have.tests\" name=\"test-report\"\/>\n+    <target depends=\"init\" if=\"netbeans.home+have.tests\" name=\"-test-browse\"\/>\n+    <target depends=\"init,compile-test,-pre-test-run,-do-test-run,test-report,-post-test-run,-test-browse\" description=\"Run unit tests.\" name=\"test\"\/>\n+    <target depends=\"init\" if=\"have.tests\" name=\"-pre-test-run-single\">\n+        <mkdir dir=\"${build.test.results.dir}\"\/>\n+    <\/target>\n+    <target depends=\"init,compile-test-single,-init-test-run-module-properties,-pre-test-run-single\" if=\"have.tests\" name=\"-do-test-run-single\">\n+        <fail unless=\"test.includes\">Must select some files in the IDE or set test.includes<\/fail>\n+        <j2seproject3:test excludes=\"\" includes=\"${test.includes}\" testincludes=\"${test.includes}\"\/>\n+    <\/target>\n+    <target depends=\"init,compile-test-single,-pre-test-run-single,-do-test-run-single\" if=\"have.tests\" name=\"-post-test-run-single\">\n+        <fail if=\"tests.failed\" unless=\"ignore.failing.tests\">Some tests failed; see details above.<\/fail>\n+    <\/target>\n+    <target depends=\"init,compile-test-single,-init-test-run-module-properties,-pre-test-run-single,-do-test-run-single,-post-test-run-single\" description=\"Run single unit test.\" name=\"test-single\"\/>\n+    <target depends=\"init,compile-test-single,-pre-test-run-single\" if=\"have.tests\" name=\"-do-test-run-single-method\">\n+        <fail unless=\"test.class\">Must select some files in the IDE or set test.class<\/fail>\n+        <fail unless=\"test.method\">Must select some method in the IDE or set test.method<\/fail>\n+        <j2seproject3:test excludes=\"\" includes=\"${javac.includes}\" testincludes=\"${test.class}\" testmethods=\"${test.method}\"\/>\n+    <\/target>\n+    <target depends=\"init,compile-test-single,-pre-test-run-single,-do-test-run-single-method\" if=\"have.tests\" name=\"-post-test-run-single-method\">\n+        <fail if=\"tests.failed\" unless=\"ignore.failing.tests\">Some tests failed; see details above.<\/fail>\n+    <\/target>\n+    <target depends=\"init,compile-test-single,-init-test-run-module-properties,-pre-test-run-single,-do-test-run-single-method,-post-test-run-single-method\" description=\"Run single unit test.\" name=\"test-single-method\"\/>\n+    <!--\n+                =======================\n+                TEST DEBUGGING SECTION\n+                =======================\n+            -->\n+    <target depends=\"init,compile-test-single,-pre-test-run-single\" if=\"have.tests\" name=\"-debug-start-debuggee-test\">\n+        <fail unless=\"test.class\">Must select one file in the IDE or set test.class<\/fail>\n+        <j2seproject3:test-debug excludes=\"\" includes=\"${javac.includes}\" testClass=\"${test.class}\" testincludes=\"${javac.includes}\"\/>\n+    <\/target>\n+    <target depends=\"init,compile-test-single,-pre-test-run-single\" if=\"have.tests\" name=\"-debug-start-debuggee-test-method\">\n+        <fail unless=\"test.class\">Must select one file in the IDE or set test.class<\/fail>\n+        <fail unless=\"test.method\">Must select some method in the IDE or set test.method<\/fail>\n+        <j2seproject3:test-debug excludes=\"\" includes=\"${javac.includes}\" testClass=\"${test.class}\" testMethod=\"${test.method}\" testincludes=\"${test.class}\" testmethods=\"${test.method}\"\/>\n+    <\/target>\n+    <target depends=\"init,compile-test\" if=\"netbeans.home+have.tests\" name=\"-debug-start-debugger-test\">\n+        <j2seproject1:nbjpdastart classpath=\"${debug.test.classpath}\" name=\"${test.class}\"\/>\n+    <\/target>\n+    <target depends=\"init,compile-test-single,-init-test-run-module-properties,-debug-start-debugger-test,-debug-start-debuggee-test\" name=\"debug-test\"\/>\n+    <target depends=\"init,compile-test-single,-init-test-run-module-properties,-debug-start-debugger-test,-debug-start-debuggee-test-method\" name=\"debug-test-method\"\/>\n+    <target depends=\"init,-pre-debug-fix,compile-test-single\" if=\"netbeans.home\" name=\"-do-debug-fix-test\">\n+        <j2seproject1:nbjpdareload dir=\"${build.test.classes.dir}\"\/>\n+    <\/target>\n+    <target depends=\"init,-pre-debug-fix,-do-debug-fix-test\" if=\"netbeans.home\" name=\"debug-fix-test\"\/>\n+    <!--\n+                =========================\n+                APPLET EXECUTION SECTION\n+                =========================\n+            -->\n+    <target depends=\"init,compile-single\" name=\"run-applet\">\n+        <fail unless=\"applet.url\">Must select one file in the IDE or set applet.url<\/fail>\n+        <j2seproject1:java classname=\"sun.applet.AppletViewer\">\n+            <customize>\n+                <arg value=\"${applet.url}\"\/>\n+            <\/customize>\n+        <\/j2seproject1:java>\n+    <\/target>\n+    <!--\n+                =========================\n+                APPLET DEBUGGING  SECTION\n+                =========================\n+            -->\n+    <target depends=\"init,compile-single\" if=\"netbeans.home\" name=\"-debug-start-debuggee-applet\">\n+        <fail unless=\"applet.url\">Must select one file in the IDE or set applet.url<\/fail>\n+        <j2seproject3:debug classname=\"sun.applet.AppletViewer\">\n+            <customizeDebuggee>\n+                <arg value=\"${applet.url}\"\/>\n+            <\/customizeDebuggee>\n+        <\/j2seproject3:debug>\n+    <\/target>\n+    <target depends=\"init,compile-single,-debug-start-debugger,-debug-start-debuggee-applet\" if=\"netbeans.home\" name=\"debug-applet\"\/>\n+    <!--\n+                ===============\n+                CLEANUP SECTION\n+                ===============\n+            -->\n+    <target name=\"-deps-clean-init\" unless=\"built-clean.properties\">\n+        <property location=\"${build.dir}\/built-clean.properties\" name=\"built-clean.properties\"\/>\n+        <delete file=\"${built-clean.properties}\" quiet=\"true\"\/>\n+    <\/target>\n+    <target if=\"already.built.clean.${basedir}\" name=\"-warn-already-built-clean\">\n+        <echo level=\"warn\" message=\"Cycle detected: FXMediaPlayer was already built\"\/>\n+    <\/target>\n+    <target depends=\"init,-deps-clean-init\" name=\"deps-clean\" unless=\"no.deps\">\n+        <mkdir dir=\"${build.dir}\"\/>\n+        <touch file=\"${built-clean.properties}\" verbose=\"false\"\/>\n+        <property file=\"${built-clean.properties}\" prefix=\"already.built.clean.\"\/>\n+        <antcall target=\"-warn-already-built-clean\"\/>\n+        <propertyfile file=\"${built-clean.properties}\">\n+            <entry key=\"${basedir}\" value=\"\"\/>\n+        <\/propertyfile>\n+    <\/target>\n+    <target depends=\"init\" name=\"-do-clean\">\n+        <delete dir=\"${build.dir}\"\/>\n+        <delete dir=\"${dist.jlink.output}\"\/>\n+        <delete dir=\"${dist.dir}\" followsymlinks=\"false\" includeemptydirs=\"true\"\/>\n+    <\/target>\n+    <target name=\"-post-clean\">\n+        <!-- Empty placeholder for easier customization. -->\n+        <!-- You can override this target in the ..\/build.xml file. -->\n+    <\/target>\n+    <target depends=\"init,deps-clean,-do-clean,-post-clean\" description=\"Clean build products.\" name=\"clean\"\/>\n+    <target name=\"-check-call-dep\">\n+        <property file=\"${call.built.properties}\" prefix=\"already.built.\"\/>\n+        <condition property=\"should.call.dep\">\n+            <and>\n+                <not>\n+                    <isset property=\"already.built.${call.subproject}\"\/>\n+                <\/not>\n+                <available file=\"${call.script}\"\/>\n+            <\/and>\n+        <\/condition>\n+    <\/target>\n+    <target depends=\"-check-call-dep\" if=\"should.call.dep\" name=\"-maybe-call-dep\">\n+        <ant antfile=\"${call.script}\" inheritall=\"false\" target=\"${call.target}\">\n+            <propertyset>\n+                <propertyref prefix=\"transfer.\"\/>\n+                <mapper from=\"transfer.*\" to=\"*\" type=\"glob\"\/>\n+            <\/propertyset>\n+        <\/ant>\n+    <\/target>\n+<\/project>\n","filename":"tests\/manual\/media\/FXMediaPlayer\/nbproject\/build-impl.xml","additions":1689,"deletions":0,"binary":false,"changes":1689,"status":"added"},{"patch":"@@ -0,0 +1,8 @@\n+build.xml.data.CRC32=17b8d914\n+build.xml.script.CRC32=fbc523ca\n+build.xml.stylesheet.CRC32=f85dc8f2@1.95.0.48\n+# This file is used by a NetBeans-based IDE to track changes in generated files such as build-impl.xml.\n+# Do not edit this file. You may delete it but then the IDE will never regenerate such files for you.\n+nbproject\/build-impl.xml.data.CRC32=17b8d914\n+nbproject\/build-impl.xml.script.CRC32=e778ec8b\n+nbproject\/build-impl.xml.stylesheet.CRC32=f89f7d21@1.95.0.48\n","filename":"tests\/manual\/media\/FXMediaPlayer\/nbproject\/genfiles.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -0,0 +1,105 @@\n+annotation.processing.enabled=true\n+annotation.processing.enabled.in.editor=false\n+annotation.processing.processors.list=\n+annotation.processing.run.all.processors=true\n+annotation.processing.source.output=${build.generated.sources.dir}\/ap-source-output\n+application.title=FXMediaPlayer\n+application.vendor=Oracle\n+build.classes.dir=${build.dir}\/classes\n+build.classes.excludes=**\/*.java,**\/*.form\n+# This directory is removed when the project is cleaned:\n+build.dir=build\n+build.generated.dir=${build.dir}\/generated\n+build.generated.sources.dir=${build.dir}\/generated-sources\n+# Only compile against the classpath explicitly listed here:\n+build.sysclasspath=ignore\n+build.test.classes.dir=${build.dir}\/test\/classes\n+build.test.results.dir=${build.dir}\/test\/results\n+# Uncomment to specify the preferred debugger connection transport:\n+#debug.transport=dt_socket\n+debug.classpath=\\\n+    ${run.classpath}\n+debug.modulepath=\\\n+    ${run.modulepath}\n+debug.test.classpath=\\\n+    ${run.test.classpath}\n+debug.test.modulepath=\\\n+    ${run.test.modulepath}\n+# This directory is removed when the project is cleaned:\n+dist.dir=dist\n+dist.jar=${dist.dir}\/FXMediaPlayer.jar\n+dist.javadoc.dir=${dist.dir}\/javadoc\n+endorsed.classpath=\n+excludes=\n+compile.patch=@${basedir}\/..\/..\/..\/..\/build\/compile.args\n+run.patch=@${basedir}\/..\/..\/..\/..\/build\/run.args\n+includes=**\n+jar.archive.disabled=${jnlp.enabled}\n+jar.compress=false\n+jar.index=${jnlp.enabled}\n+javac.classpath=\n+# Space-separated list of extra javac options\n+javac.compilerargs=-Xlint:deprecation -Xlint:unchecked ${compile.patch}\n+javac.deprecation=false\n+javac.external.vm=false\n+javac.modulepath=\n+javac.processormodulepath=\n+javac.processorpath=\\\n+    ${javac.classpath}\n+javac.source=1.9\n+javac.target=1.9\n+javac.test.classpath=\\\n+    ${javac.classpath}:\\\n+    ${build.classes.dir}:\\\n+    ${libs.junit.classpath}:\\\n+    ${libs.junit_4.classpath}\n+javac.test.modulepath=\\\n+    ${javac.modulepath}\n+javac.test.processorpath=\\\n+    ${javac.test.classpath}\n+javadoc.additionalparam=\n+javadoc.author=false\n+javadoc.encoding=${source.encoding}\n+javadoc.html5=false\n+javadoc.noindex=false\n+javadoc.nonavbar=false\n+javadoc.notree=false\n+javadoc.private=false\n+javadoc.splitindex=true\n+javadoc.use=true\n+javadoc.version=false\n+javadoc.windowtitle=\n+jlink.launcher=false\n+jlink.launcher.name=FXMediaPlayer\n+jnlp.codebase.type=no.codebase\n+jnlp.descriptor=application\n+jnlp.enabled=false\n+jnlp.mixed.code=default\n+jnlp.offline-allowed=false\n+jnlp.signed=false\n+jnlp.signing=\n+jnlp.signing.alias=\n+jnlp.signing.keystore=\n+main.class=fxmediaplayer.FXMediaPlayer\n+# Optional override of default Codebase manifest attribute, use to prevent RIAs from being repurposed\n+manifest.custom.codebase=\n+# Optional override of default Permissions manifest attribute (supported values: sandbox, all-permissions)\n+manifest.custom.permissions=\n+manifest.file=manifest.mf\n+meta.inf.dir=${src.dir}\/META-INF\n+mkdist.disabled=false\n+platform.active=default_platform\n+run.classpath=\\\n+    ${javac.classpath}:\\\n+    ${build.classes.dir}\n+run.jvmargs=${run.patch}\n+run.modulepath=\\\n+    ${javac.modulepath}\n+run.test.classpath=\\\n+    ${javac.test.classpath}:\\\n+    ${build.test.classes.dir}\n+run.test.modulepath=\\\n+    ${javac.test.modulepath}\n+source.encoding=UTF-8\n+src.dir=src\n+test.src.dir=test\n","filename":"tests\/manual\/media\/FXMediaPlayer\/nbproject\/project.properties","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http:\/\/www.netbeans.org\/ns\/project\/1\">\n+    <type>org.netbeans.modules.java.j2seproject<\/type>\n+    <configuration>\n+        <data xmlns=\"http:\/\/www.netbeans.org\/ns\/j2se-project\/3\">\n+            <name>FXMediaPlayer<\/name>\n+            <explicit-platform explicit-source-supported=\"true\"\/>\n+            <source-roots>\n+                <root id=\"src.dir\"\/>\n+            <\/source-roots>\n+            <test-roots>\n+                <root id=\"test.src.dir\"\/>\n+            <\/test-roots>\n+        <\/data>\n+    <\/configuration>\n+<\/project>\n","filename":"tests\/manual\/media\/FXMediaPlayer\/nbproject\/project.xml","additions":16,"deletions":0,"binary":false,"changes":16,"status":"added"},{"patch":"@@ -0,0 +1,379 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package fxmediaplayer;\n+\n+import fxmediaplayer.control.MediaPlayerControl;\n+import fxmediaplayer.info.MediaPlayerInfo;\n+import fxmediaplayer.menu.MediaPlayerMenu;\n+import fxmediaplayer.states.MediaPlayerStates;\n+import java.lang.ref.WeakReference;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import javafx.application.Application;\n+import javafx.beans.Observable;\n+import javafx.beans.value.ObservableValue;\n+import javafx.scene.Cursor;\n+import javafx.scene.Scene;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.DragEvent;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.input.TransferMode;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.media.Media;\n+import javafx.scene.media.MediaPlayer;\n+import javafx.scene.media.MediaView;\n+import javafx.scene.paint.Color;\n+import javafx.stage.Stage;\n+\n+public class FXMediaPlayer extends Application implements FXMediaPlayerInterface {\n+\n+    private Stage stage = null;\n+    private Scene scene = null;\n+    private BorderPane pane = null;\n+    private Media media = null;\n+    private MediaPlayer mediaPlayer = null;\n+    private MediaView mediaView = null;\n+    private ImageView imageView = null;\n+    private boolean autoPlay = false;\n+    private MediaPlayerMenu menu = null;\n+    private MediaPlayerStates states = null;\n+    private MediaPlayerInfo info = null;\n+    private MediaPlayerControl control = null;\n+    private final Color sceneColor = Color.web(\"#F0F0F0\");\n+    private final Color sceneFullScreenColor = Color.BLACK;\n+    private Timer cursorTimer = null;\n+    private long lastMouseMovedTime = 0;\n+    private boolean isScrubbingOn = false;\n+\n+    public static void main(String[] args) {\n+        Application.launch(args);\n+    }\n+\n+    @Override\n+    public void start(Stage stage) {\n+        this.stage = stage;\n+\n+        stage.setTitle(\"FX Media Player\");\n+        stage.fullScreenProperty().addListener(\n+                (ObservableValue<? extends Boolean> ov, Boolean t, Boolean t1) -> {\n+                    onFullScreen();\n+                });\n+\n+        \/\/ Create layout\n+        pane = new BorderPane();\n+\n+        \/\/ Set default source\n+        onSourceChanged(MediaPlayerDefaults.DEFAULT_SOURCE);\n+\n+        \/\/ Create scene\n+        scene = new Scene(pane, 1280, 720);\n+        scene.setFill(sceneColor);\n+        scene.getStylesheets().add(\n+                FXMediaPlayer.class.getResource(\"main.css\").toExternalForm());\n+        scene.getStylesheets().add(\n+                FXMediaPlayer.class.getResource(\"spectrum.css\").toExternalForm());\n+        scene.widthProperty().addListener((Observable o) -> {\n+            onSceneWidth();\n+        });\n+        scene.heightProperty().addListener((Observable o) -> {\n+            onSceneHeight();\n+        });\n+        scene.setOnDragOver((DragEvent event) -> {\n+            event.acceptTransferModes(TransferMode.ANY);\n+        });\n+        scene.setOnDragDropped((DragEvent event) -> {\n+            onSceneDragDropped(event);\n+        });\n+        scene.setOnMouseMoved((MouseEvent me) -> {\n+            onSceneMouseMoved();\n+        });\n+\n+        stage.setScene(scene);\n+        stage.show();\n+\n+        layoutChildren();\n+    }\n+\n+    @Override\n+    public synchronized void onSourceChanged(String source) {\n+\n+        if (source == null) {\n+            media = null;\n+\n+            if (mediaPlayer != null) {\n+                mediaPlayer.stop();\n+\n+                if (states != null) {\n+                    states.onMediaPlayerChanged(mediaPlayer);\n+                }\n+\n+                if (info != null) {\n+                    info.onMediaPlayerChanged(mediaPlayer);\n+                }\n+\n+                if (control != null) {\n+                    control.onMediaPlayerChanged(mediaPlayer);\n+                }\n+\n+                mediaPlayer.dispose();\n+                mediaPlayer = null;\n+            }\n+\n+            if (mediaView != null) {\n+                mediaView.setMediaPlayer(null);\n+            }\n+\n+            return;\n+        }\n+\n+        MediaPlayer oldMediaPlayer = mediaPlayer;\n+\n+        \/\/ Clean up MediaPlayer and MediaView\n+        if (mediaPlayer != null) {\n+            mediaPlayer.stop();\n+        }\n+\n+        if (mediaView != null) {\n+            mediaView.setMediaPlayer(null);\n+        }\n+\n+        \/\/ Create Media, MediaPlayer, MediaView and ImageView\n+        media = new Media(source);\n+        mediaPlayer = new MediaPlayer(media);\n+        if (mediaView == null) {\n+            mediaView = new MediaView();\n+            mediaView.setOnMouseClicked((MouseEvent t) -> {\n+                onViewMouseClicked();\n+            });\n+        }\n+        if (imageView == null) {\n+            imageView = new ImageView();\n+            imageView.setPreserveRatio(true);\n+            imageView.setOnMouseClicked((MouseEvent t) -> {\n+                onViewMouseClicked();\n+            });\n+        }\n+\n+        mediaPlayer.setAutoPlay(autoPlay);\n+        mediaView.setMediaPlayer(mediaPlayer);\n+\n+        \/\/ Add MediaView\n+        pane.setCenter(mediaView);\n+\n+        \/\/ Create or update views\n+        if (menu == null) {\n+            menu = new MediaPlayerMenu(this);\n+            pane.setTop(menu.getMenu());\n+        }\n+\n+        if (states == null) {\n+            states = new MediaPlayerStates(this);\n+            pane.setLeft(states.getStates());\n+        }\n+\n+        if (info == null) {\n+            info = new MediaPlayerInfo(this);\n+            pane.setRight(info.getInfo());\n+        }\n+\n+        if (control == null) {\n+            control = new MediaPlayerControl(this);\n+            pane.setBottom(control.getControl());\n+        }\n+\n+        states.onMediaPlayerChanged(oldMediaPlayer);\n+        info.onMediaPlayerChanged(oldMediaPlayer);\n+        control.onMediaPlayerChanged(oldMediaPlayer);\n+\n+        if (oldMediaPlayer != null) {\n+            oldMediaPlayer.dispose();\n+        }\n+\n+        layoutChildren();\n+    }\n+\n+    @Override\n+    public synchronized void onImageAvailable(Image image) {\n+        imageView.setImage(image);\n+        pane.setCenter(imageView);\n+        layoutChildren();\n+    }\n+\n+    @Override\n+    public void setAutoPlay(boolean autoPlay) {\n+        this.autoPlay = autoPlay;\n+    }\n+\n+    @Override\n+    public void setFullScreen(boolean isFullScreen) {\n+        stage.setFullScreen(isFullScreen);\n+    }\n+\n+    @Override\n+    public MediaPlayer getMediaPlayer() {\n+        return mediaPlayer;\n+    }\n+\n+    @Override\n+    public MediaView getMediaView() {\n+        return mediaView;\n+    }\n+\n+    @Override\n+    public void setScrubbing(boolean isScrubbingOn) {\n+        this.isScrubbingOn = isScrubbingOn;\n+    }\n+\n+    @Override\n+    public boolean getScrubbing() {\n+        return isScrubbingOn;\n+    }\n+\n+    private void onFullScreen() {\n+        if (stage.isFullScreen()) {\n+            pane.setTop(null);\n+            pane.setLeft(null);\n+            pane.setRight(null);\n+            pane.setBottom(null);\n+            scene.setFill(sceneFullScreenColor);\n+            scene.setCursor(Cursor.NONE);\n+            cursorTimer = new Timer(true);\n+            cursorTimer.scheduleAtFixedRate(new CursorTimerTask(this), 1000, 1000);\n+            layoutChildren();\n+        } else {\n+            pane.setTop(menu.getMenu());\n+            pane.setLeft(states.getStates());\n+            pane.setRight(info.getInfo());\n+            pane.setBottom(control.getControl());\n+            scene.setFill(sceneColor);\n+            scene.setCursor(Cursor.DEFAULT);\n+            if (cursorTimer != null) {\n+                cursorTimer.cancel();\n+                cursorTimer = null;\n+            }\n+            layoutChildren();\n+        }\n+    }\n+\n+    private void onViewMouseClicked() {\n+        if (stage.isFullScreen()) {\n+            if (pane.getBottom() == null) {\n+                pane.setBottom(control.getControl());\n+                layoutChildren();\n+            } else {\n+                pane.setBottom(null);\n+                layoutChildren();\n+            }\n+        }\n+    }\n+\n+    private void onSceneWidth() {\n+        layoutChildren();\n+    }\n+\n+    private void onSceneHeight() {\n+        layoutChildren();\n+    }\n+\n+    private void onSceneDragDropped(DragEvent event) {\n+        event.setDropCompleted(true);\n+        String source = FXMediaPlayerUtils.getSourceFromDragboard(event.getDragboard());\n+        if (source != null) {\n+            onSourceChanged(source);\n+        }\n+    }\n+\n+    private void onSceneMouseMoved() {\n+        if (stage.isFullScreen()) {\n+            scene.setCursor(Cursor.DEFAULT);\n+            lastMouseMovedTime = System.currentTimeMillis();\n+        }\n+    }\n+\n+    private synchronized void layoutChildren() {\n+        if (scene == null) {\n+            return;\n+        }\n+\n+        double sceneWidth = scene.getWidth();\n+        double sceneHeight = scene.getHeight();\n+\n+        double leftWidth = 0.0;\n+        double rightWidth = 0.0;\n+        if (pane.getLeft() != null) {\n+            leftWidth = states.getStates().getWidth();\n+        }\n+        if (pane.getRight() != null) {\n+            rightWidth = info.getInfo().getWidth();\n+        }\n+\n+        double topHeight = 0.0;\n+        double bottomHeight = 0.0;\n+        if (pane.getTop() != null) {\n+            topHeight = menu.getMenu().getHeight();\n+        }\n+        if (pane.getBottom() != null) {\n+            bottomHeight = control.getControl().getHeight();\n+        }\n+\n+        double fitWidth = sceneWidth - leftWidth - rightWidth;\n+        double fitHeight = sceneHeight - topHeight - bottomHeight;\n+\n+        if (pane.getCenter() != null) {\n+            if (pane.getCenter() instanceof MediaView) {\n+                mediaView.setFitWidth(fitWidth);\n+                mediaView.setFitHeight(fitHeight);\n+            } else if (pane.getCenter() instanceof ImageView) {\n+                imageView.setFitWidth(fitWidth);\n+                imageView.setFitHeight(fitHeight);\n+            }\n+        }\n+    }\n+\n+    class CursorTimerTask extends TimerTask {\n+\n+        WeakReference<FXMediaPlayer> playerRef;\n+\n+        CursorTimerTask(FXMediaPlayer player) {\n+            playerRef = new WeakReference<>(player);\n+        }\n+\n+        @Override\n+        public void run() {\n+            final FXMediaPlayer player = playerRef.get();\n+            if (player != null) {\n+                if (player.stage.isFullScreen()) {\n+                    if (System.currentTimeMillis() - lastMouseMovedTime > 7000) {\n+                        player.scene.setCursor(Cursor.NONE);\n+                    }\n+                }\n+            } else {\n+                cancel();\n+            }\n+        }\n+    }\n+}\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/FXMediaPlayer.java","additions":379,"deletions":0,"binary":false,"changes":379,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package fxmediaplayer;\n+\n+import javafx.scene.media.MediaPlayer;\n+\n+public interface FXMediaPlayerControlInterface {\n+\n+    public void onMediaPlayerChanged(MediaPlayer oldMediaPlayer);\n+}\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/FXMediaPlayerControlInterface.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package fxmediaplayer;\n+\n+import javafx.scene.image.Image;\n+import javafx.scene.media.MediaPlayer;\n+import javafx.scene.media.MediaView;\n+\n+public interface FXMediaPlayerInterface {\n+\n+    public void onSourceChanged(String source);\n+\n+    public void onImageAvailable(Image image);\n+\n+    public void setAutoPlay(boolean autoPlay);\n+\n+    public void setFullScreen(boolean isFullScreen);\n+\n+    public MediaPlayer getMediaPlayer();\n+\n+    public MediaView getMediaView();\n+\n+    public void setScrubbing(boolean isScrubbingOn);\n+\n+    public boolean getScrubbing();\n+}\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/FXMediaPlayerInterface.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package fxmediaplayer;\n+\n+import java.io.File;\n+import java.util.List;\n+import javafx.scene.input.Dragboard;\n+\n+public class FXMediaPlayerUtils {\n+\n+    public static String secondsToString(long seconds) {\n+        long elapsedHours = seconds \/ (60 * 60);\n+        long elapsedMinutes = (seconds - elapsedHours * 60 * 60) \/ 60;\n+        long elapsedSeconds = seconds - elapsedHours * 60 * 60 - elapsedMinutes * 60;\n+\n+        if (elapsedHours > 0) {\n+            return String.format(\"%d:%02d:%02d\",\n+                    elapsedHours, elapsedMinutes, elapsedSeconds);\n+        } else {\n+            return String.format(\"%02d:%02d\", elapsedMinutes, elapsedSeconds);\n+        }\n+    }\n+\n+    public static String secondsToString(double seconds) {\n+        if (seconds == Double.POSITIVE_INFINITY) {\n+            return \"Inf\";\n+        } else {\n+            return FXMediaPlayerUtils.secondsToString((long) seconds);\n+        }\n+    }\n+\n+    public static String millisToString(long millis) {\n+        long seconds = millis \/ 1000;\n+        long elapsedHours = seconds \/ (60 * 60);\n+        long elapsedMinutes = (seconds - elapsedHours * 60 * 60) \/ 60;\n+        long elapsedSeconds = seconds - elapsedHours * 60 * 60 - elapsedMinutes * 60;\n+        long elapsedMillis = millis - (seconds * 1000);\n+\n+        if (elapsedHours > 0) {\n+            return String.format(\"%d:%02d:%02d:%03d\",\n+                    elapsedHours, elapsedMinutes, elapsedSeconds, elapsedMillis);\n+        } else {\n+            return String.format(\"%02d:%02d:%03d\",\n+                    elapsedMinutes, elapsedSeconds, elapsedMillis);\n+        }\n+    }\n+\n+    public static String millisToString(double millis) {\n+        if (millis == Double.POSITIVE_INFINITY) {\n+            return \"Inf\";\n+        } else {\n+            return FXMediaPlayerUtils.millisToString((long) millis);\n+        }\n+    }\n+\n+    public static String getSourceFromDragboard(Dragboard db) {\n+        if (db.hasString()) {\n+            String source = db.getString();\n+            if (source.startsWith(\"http:\/\/\") || source.startsWith(\"https:\/\/\")) {\n+                return source;\n+            }\n+        } else if (db.hasFiles()) {\n+            List<File> files = db.getFiles();\n+            if (!files.isEmpty()) {\n+                String source = files.get(0).getPath();\n+                source = source.replace(\"\\\\\", \"\/\");\n+                return \"file:\/\/\/\" + source;\n+            }\n+        }\n+\n+        return null;\n+    }\n+}\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/FXMediaPlayerUtils.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package fxmediaplayer;\n+\n+import java.io.File;\n+\n+public class MediaPlayerDefaults {\n+\n+    private static final String SETTINGS_FOLDER\n+            = System.getProperty(\"user.home\") + File.separator + \".FXMediaPlayer\";\n+    public static final String PLAYLIST_FILE\n+            = SETTINGS_FOLDER + File.separator + \"playlist.xml\";\n+\n+    static {\n+        new File(SETTINGS_FOLDER).mkdirs();\n+    }\n+    private static final String[] PLAYLIST_DEFAULT = {\n+        \"https:\/\/download.oracle.com\/otndocs\/products\/javafx\/oow2010-2.mp4\",\n+        \"https:\/\/download.oracle.com\/otndocs\/javafx\/\"\n+        + \"JavaRap_ProRes_H264_768kbit_Widescreen.mp4\"\n+    };\n+    public static final String[] PLAYLIST = PLAYLIST_DEFAULT;\n+    public static final String DEFAULT_SOURCE = PLAYLIST_DEFAULT[0];\n+}\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/MediaPlayerDefaults.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package fxmediaplayer.control;\n+\n+import fxmediaplayer.FXMediaPlayerControlInterface;\n+import fxmediaplayer.FXMediaPlayerInterface;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.media.MediaPlayer;\n+\n+public class MediaPlayerControl implements FXMediaPlayerControlInterface {\n+\n+    private FXMediaPlayerInterface FXMediaPlayer = null;\n+    private MediaPlayerToolBar toolBar = null;\n+    private MediaPlayerTabControl tabControl = null;\n+    private VBox control = null;\n+\n+    public MediaPlayerControl(FXMediaPlayerInterface FXMediaPlayer) {\n+        this.FXMediaPlayer = FXMediaPlayer;\n+    }\n+\n+    public VBox getControl() {\n+        if (control == null) {\n+            control = new VBox();\n+\n+            toolBar = new MediaPlayerToolBar(FXMediaPlayer);\n+            tabControl = new MediaPlayerTabControl(FXMediaPlayer);\n+\n+            control.getChildren().addAll(toolBar.getToolBar(),\n+                    tabControl.getTabControl());\n+\n+        }\n+\n+        return control;\n+    }\n+\n+    @Override\n+    public void onMediaPlayerChanged(MediaPlayer oldMediaPlayer) {\n+        toolBar.onMediaPlayerChanged(oldMediaPlayer);\n+        tabControl.onMediaPlayerChanged(oldMediaPlayer);\n+    }\n+}\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/control\/MediaPlayerControl.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,431 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package fxmediaplayer.control;\n+\n+import fxmediaplayer.FXMediaPlayerControlInterface;\n+import fxmediaplayer.FXMediaPlayerInterface;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.IntegerProperty;\n+import javafx.beans.property.ReadOnlyObjectProperty;\n+import javafx.beans.value.ChangeListener;\n+import javafx.beans.value.ObservableValue;\n+import javafx.event.ActionEvent;\n+import javafx.geometry.Pos;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ContentDisplay;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.media.MediaPlayer;\n+import javafx.util.Duration;\n+\n+public class MediaPlayerControlTab implements FXMediaPlayerControlInterface {\n+\n+    private FXMediaPlayerInterface FXMediaPlayer = null;\n+    private Duration duration = null;\n+    private Tab controlTab = null;\n+    private VBox control = null;\n+    private final Slider timeSlider = new Slider();\n+    private boolean disableTimeSliderUpdate = false;\n+    private Slider volumeSlider = null;\n+    private Slider balanceSlider = null;\n+    private Slider rateSlider = null;\n+    private Button buttonResetSlider = null;\n+    private TextField startTimeTextField = null;\n+    private TextField stopTimeTextField = null;\n+    private Button buttonSetStartStopTime = null;\n+    private TextField cycleCountTextField = null;\n+    private Button buttonSetCycleCount = null;\n+    private InvalidationListener durationPropertyListener = null;\n+    private ChangeListener<Duration> currentTimePropertyListener = null;\n+    private InvalidationListener volumePropertyListener = null;\n+    private InvalidationListener balancePropertyListener = null;\n+    private InvalidationListener ratePropertyListener = null;\n+    private InvalidationListener cycleCountPropertyListener = null;\n+    private InvalidationListener statusPropertyListener = null;\n+\n+    public MediaPlayerControlTab(FXMediaPlayerInterface FXMediaPlayer) {\n+        this.FXMediaPlayer = FXMediaPlayer;\n+    }\n+\n+    public Tab getControlTab() {\n+        if (controlTab == null) {\n+            controlTab = new Tab();\n+            controlTab.setText(\"Control\");\n+\n+            control = new VBox(15);\n+            control.setId(\"mediaPlayerTab\");\n+            control.setAlignment(Pos.CENTER);\n+\n+            controlTab.setContent(control);\n+\n+            \/\/ Create time slider\n+            timeSlider.setMinWidth(50);\n+            timeSlider.setMaxWidth(Double.MAX_VALUE);\n+            timeSlider.setOnMousePressed((MouseEvent me) -> {\n+                onTimeSliderPressed();\n+            });\n+            timeSlider.setOnMouseReleased((MouseEvent me) -> {\n+                onTimeSliderReleased();\n+            });\n+            timeSlider.valueProperty().addListener(\n+                    (ObservableValue<? extends Number> ov, Number o, Number n) -> {\n+                onTimeSlider();\n+            });\n+            timeSlider.setDisable(true);\n+\n+            control.getChildren().add(timeSlider);\n+\n+            \/\/ Volume, Balance and Rate\n+            HBox hBox = new HBox(5);\n+            hBox.setAlignment(Pos.CENTER);\n+\n+            \/\/ Volume\n+            volumeSlider = new Slider(0, 100, 1);\n+            volumeSlider.setValue(100);\n+            volumeSlider.setPrefWidth(70);\n+            volumeSlider.setMaxWidth(Region.USE_PREF_SIZE);\n+            volumeSlider.setMinWidth(30);\n+            volumeSlider.valueProperty().addListener(\n+                    (ObservableValue<? extends Number> ov, Number o, Number n) -> {\n+                onVolumeSlider();\n+            });\n+            Label label = new Label(\"Volume:\", volumeSlider);\n+            label.setContentDisplay(ContentDisplay.RIGHT);\n+            hBox.getChildren().add(label);\n+\n+            \/\/ Balance\n+            balanceSlider = new Slider(-100, 100, 1);\n+            balanceSlider.setValue(0);\n+            balanceSlider.setPrefWidth(140);\n+            balanceSlider.setMaxWidth(Region.USE_PREF_SIZE);\n+            balanceSlider.setMinWidth(60);\n+            balanceSlider.valueProperty().addListener(\n+                    (ObservableValue<? extends Number> ov, Number o, Number n) -> {\n+                onBalanceSlider();\n+            });\n+            label = new Label(\"Balance:\", balanceSlider);\n+            label.setContentDisplay(ContentDisplay.RIGHT);\n+            hBox.getChildren().add(label);\n+\n+            \/\/ Rate\n+            rateSlider = new Slider(0, 800, 1);\n+            rateSlider.setValue(100);\n+            rateSlider.setPrefWidth(140);\n+            rateSlider.setMaxWidth(Region.USE_PREF_SIZE);\n+            rateSlider.setMinWidth(60);\n+            rateSlider.setOnMouseReleased((MouseEvent me) -> {\n+                onRateSlider();\n+            });\n+            label = new Label(\"Rate:\", rateSlider);\n+            label.setContentDisplay(ContentDisplay.RIGHT);\n+            hBox.getChildren().add(label);\n+\n+            buttonResetSlider = new Button(\"Reset\");\n+            buttonResetSlider.setOnAction((ActionEvent event) -> {\n+                onButtonResetSlider();\n+            });\n+            hBox.getChildren().add(buttonResetSlider);\n+\n+            control.getChildren().add(hBox);\n+\n+            hBox = new HBox(5);\n+            hBox.setAlignment(Pos.CENTER);\n+\n+            startTimeTextField = new TextField();\n+            startTimeTextField.setPrefWidth(50);\n+            label = new Label(\"Start (s):\", startTimeTextField);\n+            label.setContentDisplay(ContentDisplay.RIGHT);\n+            hBox.getChildren().add(label);\n+\n+            stopTimeTextField = new TextField();\n+            stopTimeTextField.setPrefWidth(50);\n+            label = new Label(\"Stop (s):\", stopTimeTextField);\n+            label.setContentDisplay(ContentDisplay.RIGHT);\n+            hBox.getChildren().add(label);\n+\n+            buttonSetStartStopTime = new Button(\"Set\");\n+            buttonSetStartStopTime.setOnAction((ActionEvent event) -> {\n+                onButtonSetStartStopTime();\n+            });\n+            hBox.getChildren().add(buttonSetStartStopTime);\n+\n+            cycleCountTextField = new TextField();\n+            cycleCountTextField.setPrefWidth(50);\n+            label = new Label(\"Cycle count:\", cycleCountTextField);\n+            label.setContentDisplay(ContentDisplay.RIGHT);\n+            hBox.getChildren().add(label);\n+\n+            buttonSetCycleCount = new Button(\"Set\");\n+            buttonSetCycleCount.setOnAction((ActionEvent event) -> {\n+                onButtonSetCycleCount();\n+            });\n+            hBox.getChildren().add(buttonSetCycleCount);\n+\n+            control.getChildren().add(hBox);\n+\n+            createListeners();\n+            addListeners();\n+        }\n+\n+        return controlTab;\n+    }\n+\n+    @Override\n+    public void onMediaPlayerChanged(MediaPlayer oldMediaPlayer) {\n+        if (oldMediaPlayer != null) {\n+            removeListeners(oldMediaPlayer);\n+        }\n+\n+        duration = null;\n+        startTimeTextField.setText(\"\");\n+        stopTimeTextField.setText(\"\");\n+        cycleCountTextField.setText(\"\");\n+\n+        volumeSlider.setValue(100);\n+        balanceSlider.setValue(0);\n+        rateSlider.setValue(100);\n+\n+        addListeners();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void createListeners() {\n+        durationPropertyListener = (Observable o) -> {\n+            ReadOnlyObjectProperty property = (ReadOnlyObjectProperty) o;\n+            Duration d = ((Duration) property.getValue());\n+            if (d.isIndefinite()) {\n+                timeSlider.setDisable(true);\n+            } else {\n+                if (d.toMillis() > 0) {\n+                    if (duration == null || !duration.equals(duration)) {\n+                        duration = d;\n+                        timeSlider.setDisable(false);\n+                    }\n+                }\n+            }\n+        };\n+\n+        currentTimePropertyListener =\n+                (ObservableValue<? extends Duration> ov, Duration o, Duration n) -> {\n+            if (duration != null) {\n+                final Duration currentTime = n;\n+                Platform.runLater(() -> {\n+                    synchronized (timeSlider) {\n+                        if (!disableTimeSliderUpdate) {\n+                            if (duration != null) {\n+                                timeSlider.setValue(currentTime.divide(duration.toMillis()).toMillis() * 100.0);\n+                            } else {\n+                                timeSlider.setValue(0.0);\n+                            }\n+                        }\n+                    }\n+                });\n+            }\n+        };\n+\n+        volumePropertyListener = (Observable o) -> {\n+            DoubleProperty prop = (DoubleProperty) o;\n+            final double value = prop.getValue();\n+            Platform.runLater(() -> {\n+                volumeSlider.setValue(value * 100.0);\n+            });\n+        };\n+\n+        balancePropertyListener = (Observable o) -> {\n+            DoubleProperty prop = (DoubleProperty) o;\n+            final double value = prop.getValue();\n+            Platform.runLater(() -> {\n+                balanceSlider.setValue(value * 100.0);\n+            });\n+        };\n+\n+        ratePropertyListener = (Observable o) -> {\n+            DoubleProperty prop = (DoubleProperty) o;\n+            final double value = prop.getValue();\n+            Platform.runLater(() -> {\n+                rateSlider.setValue(value * 100.0);\n+            });\n+        };\n+\n+        cycleCountPropertyListener = (Observable o) -> {\n+            IntegerProperty prop = (IntegerProperty) o;\n+            final int value = prop.getValue();\n+            Platform.runLater(() -> {\n+                switch (value) {\n+                    case MediaPlayer.INDEFINITE:\n+                        cycleCountTextField.setText(\"-1\");\n+                        break;\n+                    case 1:\n+                        cycleCountTextField.setText(\"\");\n+                        break;\n+                    default:\n+                        cycleCountTextField.setText(String.valueOf(value));\n+                        break;\n+                }\n+            });\n+        };\n+\n+        statusPropertyListener = (Observable o) -> {\n+            ReadOnlyObjectProperty<MediaPlayer.Status> prop =\n+                    (ReadOnlyObjectProperty<MediaPlayer.Status>) o;\n+            MediaPlayer.Status status = prop.getValue();\n+            if (status == MediaPlayer.Status.READY) {\n+                controlTab.setDisable(false);\n+            } else if (status == MediaPlayer.Status.DISPOSED ||\n+                    status == MediaPlayer.Status.HALTED) {\n+                controlTab.setDisable(true);\n+            }\n+        };\n+    }\n+\n+    private void addListeners() {\n+        MediaPlayer mediaPlayer = FXMediaPlayer.getMediaPlayer();\n+        if (mediaPlayer != null) {\n+            mediaPlayer.getMedia().durationProperty()\n+                    .addListener(durationPropertyListener);\n+            mediaPlayer.currentTimeProperty()\n+                    .addListener(currentTimePropertyListener);\n+            mediaPlayer.volumeProperty()\n+                    .addListener(volumePropertyListener);\n+            mediaPlayer.balanceProperty()\n+                    .addListener(balancePropertyListener);\n+            mediaPlayer.rateProperty()\n+                    .addListener(ratePropertyListener);\n+            mediaPlayer.cycleCountProperty()\n+                    .addListener(cycleCountPropertyListener);\n+            mediaPlayer.statusProperty()\n+                    .addListener(statusPropertyListener);\n+        }\n+    }\n+\n+    private void removeListeners(MediaPlayer mediaPlayer) {\n+        mediaPlayer.getMedia().durationProperty()\n+                .removeListener(durationPropertyListener);\n+        mediaPlayer.currentTimeProperty()\n+                .removeListener(currentTimePropertyListener);\n+        mediaPlayer.volumeProperty()\n+                .removeListener(volumePropertyListener);\n+        mediaPlayer.balanceProperty()\n+                .removeListener(balancePropertyListener);\n+        mediaPlayer.rateProperty()\n+                .removeListener(ratePropertyListener);\n+        mediaPlayer.statusProperty()\n+                .removeListener(statusPropertyListener);\n+    }\n+\n+    private void onTimeSliderPressed() {\n+        synchronized (timeSlider) {\n+            disableTimeSliderUpdate = true;\n+        }\n+    }\n+\n+    private void onTimeSliderReleased() {\n+        synchronized (timeSlider) {\n+            if (!FXMediaPlayer.getScrubbing()) {\n+                FXMediaPlayer.getMediaPlayer()\n+                        .seek(duration.multiply(timeSlider.getValue() \/ 100.0));\n+            }\n+            disableTimeSliderUpdate = false;\n+        }\n+    }\n+\n+    private void onTimeSlider() {\n+        if (FXMediaPlayer.getScrubbing()) {\n+            if (timeSlider.isValueChanging()) {\n+                FXMediaPlayer.getMediaPlayer()\n+                        .seek(duration.multiply(timeSlider.getValue() \/ 100.0));\n+            }\n+        }\n+    }\n+\n+    private void onVolumeSlider() {\n+        if (volumeSlider.isValueChanging()) {\n+            FXMediaPlayer.getMediaPlayer()\n+                    .setVolume(volumeSlider.getValue() \/ 100.0);\n+        }\n+    }\n+\n+    private void onBalanceSlider() {\n+        if (balanceSlider.isValueChanging()) {\n+            FXMediaPlayer.getMediaPlayer()\n+                    .setBalance(balanceSlider.getValue() \/ 100.0);\n+        }\n+    }\n+\n+    private void onRateSlider() {\n+        FXMediaPlayer.getMediaPlayer().setRate(rateSlider.getValue() \/ 100.0);\n+    }\n+\n+    private void onButtonResetSlider() {\n+        FXMediaPlayer.getMediaPlayer().setVolume(1.0);\n+        FXMediaPlayer.getMediaPlayer().setBalance(0.0);\n+        FXMediaPlayer.getMediaPlayer().setRate(1.0);\n+    }\n+\n+    private void onButtonSetStartStopTime() {\n+        if (startTimeTextField.getText() == null ||\n+                startTimeTextField.getText().isEmpty()) {\n+            if (FXMediaPlayer.getMediaPlayer().getStartTime() != Duration.ZERO) {\n+                FXMediaPlayer.getMediaPlayer().setStartTime(Duration.ZERO);\n+            }\n+        } else {\n+            FXMediaPlayer.getMediaPlayer().setStartTime(\n+                    new Duration(Double.parseDouble(startTimeTextField.getText()) * 1000));\n+        }\n+\n+        if (stopTimeTextField.getText() == null ||\n+                stopTimeTextField.getText().isEmpty()) {\n+            FXMediaPlayer.getMediaPlayer().setStopTime(\n+                    FXMediaPlayer.getMediaPlayer().getMedia().getDuration());\n+        } else {\n+            FXMediaPlayer.getMediaPlayer().setStopTime(\n+                    new Duration(Double.parseDouble(stopTimeTextField.getText()) * 1000));\n+        }\n+    }\n+\n+    private void onButtonSetCycleCount() {\n+        if (cycleCountTextField.getText() == null ||\n+                cycleCountTextField.getText().isEmpty()) {\n+            FXMediaPlayer.getMediaPlayer().setCycleCount(1);\n+        } else {\n+            int value = Integer.parseInt(cycleCountTextField.getText());\n+            if (value < 0) {\n+                FXMediaPlayer.getMediaPlayer().setCycleCount(MediaPlayer.INDEFINITE);\n+            } else {\n+                FXMediaPlayer.getMediaPlayer().setCycleCount(value);\n+            }\n+        }\n+    }\n+}\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/control\/MediaPlayerControlTab.java","additions":431,"deletions":0,"binary":false,"changes":431,"status":"added"},{"patch":"@@ -0,0 +1,286 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package fxmediaplayer.control;\n+\n+import fxmediaplayer.FXMediaPlayerControlInterface;\n+import fxmediaplayer.FXMediaPlayerInterface;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.beans.property.ReadOnlyObjectProperty;\n+import javafx.beans.value.ObservableValue;\n+import javafx.event.ActionEvent;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.control.ToolBar;\n+import javafx.scene.effect.ColorAdjust;\n+import javafx.scene.effect.SepiaTone;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.media.MediaPlayer;\n+\n+public class MediaPlayerEffectsTab implements FXMediaPlayerControlInterface {\n+\n+    private FXMediaPlayerInterface FXMediaPlayer = null;\n+    private ColorAdjust colorAdjust = null;\n+    private SepiaTone sepiaTone = null;\n+    private Tab effectsTab = null;\n+    private ToggleButton enableButton = null;\n+    private Button resetButton = null;\n+    private GridPane controlGrid = null;\n+    private Label brightnessLabel = null;\n+    private Slider brightnessSlider = null;\n+    private Label contrastLabel = null;\n+    private Slider contrastSlider = null;\n+    private Label hueLabel = null;\n+    private Slider hueSlider = null;\n+    private Label saturationLabel = null;\n+    private Slider saturationSlider = null;\n+    private Label sepiaToneLabel = null;\n+    private Slider sepiaToneSlider = null;\n+    private InvalidationListener statusPropertyListener = null;\n+\n+    public MediaPlayerEffectsTab(FXMediaPlayerInterface FXMediaPlayer) {\n+        this.FXMediaPlayer = FXMediaPlayer;\n+    }\n+\n+    public Tab getColorAdjustTab() {\n+        if (effectsTab == null) {\n+            colorAdjust = new ColorAdjust();\n+            sepiaTone = new SepiaTone();\n+\n+            effectsTab = new Tab();\n+            effectsTab.setText(\"Effects\");\n+\n+            VBox colorAdjustTabContent = new VBox(0);\n+            colorAdjustTabContent.setId(\"mediaPlayerTab\");\n+            colorAdjustTabContent.setAlignment(Pos.TOP_CENTER);\n+\n+            \/\/ ToolBar\n+            ToolBar toolBar = new ToolBar();\n+\n+            enableButton = new ToggleButton(\"Enable\");\n+            enableButton.setOnAction((ActionEvent event) -> {\n+                onEnableButton();\n+            });\n+            toolBar.getItems().add(enableButton);\n+\n+            resetButton = new Button(\"Reset\");\n+            resetButton.setDisable(true);\n+            resetButton.setOnAction((ActionEvent event) -> {\n+                onResetButton();\n+            });\n+            toolBar.getItems().add(resetButton);\n+\n+            colorAdjustTabContent.getChildren().add(toolBar);\n+\n+            controlGrid = new GridPane();\n+            controlGrid.setPadding(new Insets(10, 0, 0, 0));\n+            controlGrid.setAlignment(Pos.CENTER);\n+            controlGrid.setHgap(5);\n+            controlGrid.setVgap(7);\n+\n+            brightnessSlider = new Slider(-100, 100, 1);\n+            brightnessSlider.setValue(0);\n+            brightnessSlider.setPrefWidth(140);\n+            brightnessSlider.setMaxWidth(Region.USE_PREF_SIZE);\n+            brightnessSlider.setMinWidth(60);\n+            brightnessSlider.valueProperty().addListener(\n+                    (ObservableValue<? extends Number> ov, Number o, Number n) -> {\n+                onBrightnessSlider();\n+            });\n+            brightnessLabel = new Label(\"Brightness:\");\n+            controlGrid.add(brightnessLabel, 0, 0);\n+            controlGrid.add(brightnessSlider, 1, 0);\n+\n+            contrastSlider = new Slider(-100, 100, 1);\n+            contrastSlider.setValue(0);\n+            contrastSlider.setPrefWidth(140);\n+            contrastSlider.setMaxWidth(Region.USE_PREF_SIZE);\n+            contrastSlider.setMinWidth(60);\n+            contrastSlider.valueProperty().addListener(\n+                    (ObservableValue<? extends Number> ov, Number o, Number n) -> {\n+                onContrastSlider();\n+            });\n+            contrastLabel = new Label(\"Contrast:\");\n+            controlGrid.add(contrastLabel, 0, 1);\n+            controlGrid.add(contrastSlider, 1, 1);\n+\n+            hueSlider = new Slider(-100, 100, 1);\n+            hueSlider.setValue(0);\n+            hueSlider.setPrefWidth(140);\n+            hueSlider.setMaxWidth(Region.USE_PREF_SIZE);\n+            hueSlider.setMinWidth(60);\n+            hueSlider.valueProperty().addListener(\n+                    (ObservableValue<? extends Number> ov, Number o, Number n) -> {\n+                onHueSlider();\n+            });\n+            hueLabel = new Label(\"Hue:\");\n+            controlGrid.add(hueLabel, 0, 2);\n+            controlGrid.add(hueSlider, 1, 2);\n+\n+            saturationSlider = new Slider(-100, 100, 1);\n+            saturationSlider.setValue(0);\n+            saturationSlider.setPrefWidth(140);\n+            saturationSlider.setMaxWidth(Region.USE_PREF_SIZE);\n+            saturationSlider.setMinWidth(60);\n+            saturationSlider.valueProperty().addListener(\n+                    (ObservableValue<? extends Number> ov, Number o, Number n) -> {\n+                onSaturationSlider();\n+            });\n+            saturationLabel = new Label(\"Saturation:\");\n+            controlGrid.add(saturationLabel, 0, 3);\n+            controlGrid.add(saturationSlider, 1, 3);\n+\n+            sepiaToneSlider = new Slider(0, 100, 1);\n+            sepiaToneSlider.setValue(0);\n+            sepiaTone.setLevel(0.0);\n+            sepiaToneSlider.setPrefWidth(140);\n+            sepiaToneSlider.setMaxWidth(Region.USE_PREF_SIZE);\n+            sepiaToneSlider.setMinWidth(60);\n+            sepiaToneSlider.valueProperty().addListener(\n+                    (ObservableValue<? extends Number> ov, Number o, Number n) -> {\n+                onSepiaToneSlider();\n+            });\n+            sepiaToneLabel = new Label(\"Sepia tone:\");\n+            controlGrid.add(sepiaToneLabel, 0, 4);\n+            controlGrid.add(sepiaToneSlider, 1, 4);\n+\n+            colorAdjustTabContent.getChildren().add(controlGrid);\n+\n+            effectsTab.setContent(colorAdjustTabContent);\n+\n+            controlGrid.setDisable(true);\n+        }\n+\n+        return effectsTab;\n+    }\n+\n+    @Override\n+    public void onMediaPlayerChanged(MediaPlayer oldMediaPlayer) {\n+        removeListeners(oldMediaPlayer);\n+        addListeners();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void addListeners() {\n+        if (FXMediaPlayer.getMediaPlayer() == null) {\n+            return;\n+        }\n+\n+        statusPropertyListener = (Observable o) -> {\n+            ReadOnlyObjectProperty<MediaPlayer.Status> prop =\n+                    (ReadOnlyObjectProperty<MediaPlayer.Status>) o;\n+            MediaPlayer.Status status = prop.getValue();\n+            if (status == MediaPlayer.Status.READY) {\n+                effectsTab.setDisable(false);\n+            } else if (status == MediaPlayer.Status.DISPOSED ||\n+                    status == MediaPlayer.Status.HALTED) {\n+                effectsTab.setDisable(true);\n+            }\n+        };\n+\n+        FXMediaPlayer.getMediaPlayer()\n+                .statusProperty().addListener(statusPropertyListener);\n+    }\n+\n+    private void removeListeners(MediaPlayer mediaPlayer) {\n+        if (mediaPlayer == null) {\n+            return;\n+        }\n+\n+        mediaPlayer.statusProperty()\n+                .removeListener(statusPropertyListener);\n+    }\n+\n+    private void onEnableButton() {\n+        if (enableButton.isSelected()) {\n+            enableButton.setText(\"Enabled\");\n+            resetButton.setDisable(false);\n+            controlGrid.setDisable(false);\n+            sepiaTone.setInput(colorAdjust);\n+            FXMediaPlayer.getMediaView().setEffect(sepiaTone);\n+        } else {\n+            enableButton.setText(\"Enable\");\n+            resetButton.setDisable(true);\n+            controlGrid.setDisable(true);\n+            sepiaTone.setInput(null);\n+            FXMediaPlayer.getMediaView().setEffect(null);\n+        }\n+    }\n+\n+    private void onResetButton() {\n+        brightnessSlider.setValue(0.0);\n+        colorAdjust.setBrightness(0.0);\n+\n+        contrastSlider.setValue(0.0);\n+        colorAdjust.setContrast(0.0);\n+\n+        hueSlider.setValue(0.0);\n+        colorAdjust.setHue(0.0);\n+\n+        saturationSlider.setValue(0.0);\n+        colorAdjust.setSaturation(0.0);\n+\n+        sepiaToneSlider.setValue(0.0);\n+        sepiaTone.setLevel(0.0);\n+    }\n+\n+    private void onBrightnessSlider() {\n+        if (brightnessSlider.isValueChanging()) {\n+            colorAdjust.setBrightness(brightnessSlider.getValue() \/ 100.0);\n+        }\n+    }\n+\n+    private void onContrastSlider() {\n+        if (contrastSlider.isValueChanging()) {\n+            colorAdjust.setContrast(contrastSlider.getValue() \/ 100.0);\n+        }\n+    }\n+\n+    private void onHueSlider() {\n+        if (hueSlider.isValueChanging()) {\n+            colorAdjust.setHue(hueSlider.getValue() \/ 100.0);\n+        }\n+    }\n+\n+    private void onSaturationSlider() {\n+        if (saturationSlider.isValueChanging()) {\n+            colorAdjust.setSaturation(saturationSlider.getValue() \/ 100.0);\n+        }\n+    }\n+\n+    private void onSepiaToneSlider() {\n+        if (sepiaToneSlider.isValueChanging()) {\n+            sepiaTone.setLevel(sepiaToneSlider.getValue() \/ 100.0);\n+        }\n+    }\n+}\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/control\/MediaPlayerEffectsTab.java","additions":286,"deletions":0,"binary":false,"changes":286,"status":"added"},{"patch":"@@ -0,0 +1,349 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package fxmediaplayer.control;\n+\n+import fxmediaplayer.FXMediaPlayerControlInterface;\n+import fxmediaplayer.FXMediaPlayerInterface;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.beans.property.ReadOnlyObjectProperty;\n+import javafx.beans.value.ObservableValue;\n+import javafx.event.ActionEvent;\n+import javafx.geometry.Orientation;\n+import javafx.geometry.Pos;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ContentDisplay;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.control.ToolBar;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.media.EqualizerBand;\n+import javafx.scene.media.MediaPlayer;\n+\n+public class MediaPlayerEqualizerTab implements FXMediaPlayerControlInterface {\n+\n+    private FXMediaPlayerInterface FXMediaPlayer = null;\n+    private Tab equalizerTab = null;\n+    private ToggleButton buttonEnable = null;\n+    private Button buttonReset = null;\n+    private Label bandIndexLabel = null;\n+    private Label bandIndexInfoLabel = null;\n+    private Label centerFrequencyLabel = null;\n+    private Label centerFrequencyInfoLabel = null;\n+    private Label bandwidthLabel = null;\n+    private Label bandwidthInfoLabel = null;\n+    private Label gainLabel = null;\n+    private Label gainInfoLabel = null;\n+    private HBox equalizerControl = null;\n+    private ArrayList<EqualizerBandControl> equalizerBandControls = null;\n+    private InvalidationListener statusPropertyListener = null;\n+\n+    public MediaPlayerEqualizerTab(FXMediaPlayerInterface FXMediaPlayer) {\n+        this.FXMediaPlayer = FXMediaPlayer;\n+    }\n+\n+    public Tab getEqualizerTab() {\n+        if (equalizerTab == null) {\n+            equalizerBandControls = new ArrayList<>();\n+\n+            equalizerTab = new Tab();\n+            equalizerTab.setText(\"Equalizer\");\n+\n+            VBox equalizerTabContent = new VBox();\n+            equalizerTabContent.setId(\"mediaPlayerTab\");\n+            equalizerTabContent.setAlignment(Pos.TOP_CENTER);\n+\n+            \/\/ ToolBar\n+            ToolBar toolBar = new ToolBar();\n+\n+            buttonEnable = new ToggleButton(\"Enable\");\n+            if (FXMediaPlayer.getMediaPlayer().getAudioEqualizer().isEnabled()) {\n+                buttonEnable.setText(\"Enabled\");\n+                buttonEnable.setSelected(true);\n+            } else {\n+                buttonEnable.setSelected(false);\n+            }\n+            buttonEnable.setOnAction((ActionEvent event) -> {\n+                onButtonEnable();\n+            });\n+            toolBar.getItems().add(buttonEnable);\n+\n+            buttonReset = new Button(\"Reset\");\n+            if (!FXMediaPlayer.getMediaPlayer().getAudioEqualizer().isEnabled()) {\n+                buttonReset.setDisable(true);\n+            }\n+            buttonReset.setOnAction((ActionEvent event) -> {\n+                onButtonReset();\n+            });\n+            toolBar.getItems().add(buttonReset);\n+\n+            bandIndexInfoLabel = new Label();\n+            bandIndexLabel = new Label(\"Band index:\", bandIndexInfoLabel);\n+            bandIndexLabel.setContentDisplay(ContentDisplay.RIGHT);\n+            if (!FXMediaPlayer.getMediaPlayer().getAudioEqualizer().isEnabled()) {\n+                bandIndexLabel.setDisable(true);\n+            }\n+            toolBar.getItems().add(bandIndexLabel);\n+\n+            centerFrequencyInfoLabel = new Label();\n+            centerFrequencyLabel = new Label(\"Frequency:\", centerFrequencyInfoLabel);\n+            centerFrequencyLabel.setContentDisplay(ContentDisplay.RIGHT);\n+            if (!FXMediaPlayer.getMediaPlayer().getAudioEqualizer().isEnabled()) {\n+                centerFrequencyLabel.setDisable(true);\n+            }\n+            toolBar.getItems().add(centerFrequencyLabel);\n+\n+            bandwidthInfoLabel = new Label();\n+            bandwidthLabel = new Label(\"Bandwidth:\", bandwidthInfoLabel);\n+            bandwidthLabel.setContentDisplay(ContentDisplay.RIGHT);\n+            if (!FXMediaPlayer.getMediaPlayer().getAudioEqualizer().isEnabled()) {\n+                bandwidthLabel.setDisable(true);\n+            }\n+            toolBar.getItems().add(bandwidthLabel);\n+\n+            gainInfoLabel = new Label();\n+            gainLabel = new Label(\"Gain:\", gainInfoLabel);\n+            gainLabel.setContentDisplay(ContentDisplay.RIGHT);\n+            if (!FXMediaPlayer.getMediaPlayer().getAudioEqualizer().isEnabled()) {\n+                gainLabel.setDisable(true);\n+            }\n+            toolBar.getItems().add(gainLabel);\n+\n+            equalizerTabContent.getChildren().add(toolBar);\n+\n+            \/\/ Equalizer control\n+            equalizerControl = new HBox(10);\n+            if (!FXMediaPlayer.getMediaPlayer().getAudioEqualizer().isEnabled()) {\n+                equalizerControl.setDisable(true);\n+            }\n+            equalizerControl.setAlignment(Pos.CENTER);\n+            equalizerTabContent.getChildren().add(equalizerControl);\n+            equalizerTab.setContent(equalizerTabContent);\n+\n+            \/\/ Create our own list of bands based on default ones\n+            createBands();\n+\n+            \/\/ Clear default bands\n+            clearBands(FXMediaPlayer.getMediaPlayer());\n+\n+            \/\/ Add our own bands\n+            addBands();\n+        }\n+\n+        return equalizerTab;\n+    }\n+\n+    @Override\n+    public void onMediaPlayerChanged(MediaPlayer oldMediaPlayer) {\n+        removeListeners(oldMediaPlayer);\n+\n+        if (oldMediaPlayer != null) {\n+            oldMediaPlayer.getAudioEqualizer().setEnabled(false);\n+            clearBands(oldMediaPlayer);\n+        }\n+\n+        addListeners();\n+\n+        if (FXMediaPlayer.getMediaPlayer() != null) {\n+            clearBands(FXMediaPlayer.getMediaPlayer());\n+            addBands();\n+            onButtonEnable();\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void addListeners() {\n+        if (FXMediaPlayer.getMediaPlayer() == null) {\n+            return;\n+        }\n+\n+        statusPropertyListener = (Observable o) -> {\n+            ReadOnlyObjectProperty<MediaPlayer.Status> prop =\n+                    (ReadOnlyObjectProperty<MediaPlayer.Status>) o;\n+            MediaPlayer.Status status = prop.getValue();\n+            if (status == MediaPlayer.Status.READY) {\n+                equalizerTab.setDisable(false);\n+            } else if (status == MediaPlayer.Status.DISPOSED ||\n+                    status == MediaPlayer.Status.HALTED) {\n+                equalizerTab.setDisable(true);\n+            }\n+        };\n+\n+        FXMediaPlayer.getMediaPlayer()\n+                .statusProperty().addListener(statusPropertyListener);\n+    }\n+\n+    private void removeListeners(MediaPlayer mediaPlayer) {\n+        if (mediaPlayer == null) {\n+            return;\n+        }\n+\n+        mediaPlayer.statusProperty()\n+                .removeListener(statusPropertyListener);\n+    }\n+\n+    private void createBands() {\n+        Iterator<EqualizerBand> bandsInterator = FXMediaPlayer.getMediaPlayer()\n+                .getAudioEqualizer().getBands().iterator();\n+        int bandIndex = 0;\n+        while (bandsInterator.hasNext()) {\n+            EqualizerBand equalizerBand = bandsInterator.next();\n+            onEqualizerBandAdded(bandIndex, equalizerBand.getCenterFrequency(),\n+                    equalizerBand.getBandwidth(), equalizerBand.getGain());\n+            bandIndex++;\n+        }\n+    }\n+\n+    private void clearBands(MediaPlayer mediaPlayer) {\n+        mediaPlayer.getAudioEqualizer().getBands().clear();\n+    }\n+\n+    private void addBands() {\n+        Iterator<EqualizerBandControl> controlsInterator\n+                = equalizerBandControls.iterator();\n+        while (controlsInterator.hasNext()) {\n+            EqualizerBandControl equalizerBandControl = controlsInterator.next();\n+            FXMediaPlayer.getMediaPlayer().getAudioEqualizer().getBands()\n+                    .add(equalizerBandControl.getBand());\n+        }\n+    }\n+\n+    private void onButtonEnable() {\n+        if (buttonEnable.isSelected()) {\n+            FXMediaPlayer.getMediaPlayer().getAudioEqualizer().setEnabled(true);\n+            buttonReset.setDisable(false);\n+            bandIndexLabel.setDisable(false);\n+            centerFrequencyLabel.setDisable(false);\n+            bandwidthLabel.setDisable(false);\n+            gainLabel.setDisable(false);\n+            equalizerControl.setDisable(false);\n+        } else {\n+            FXMediaPlayer.getMediaPlayer().getAudioEqualizer().setEnabled(false);\n+            buttonReset.setDisable(true);\n+            bandIndexLabel.setDisable(true);\n+            centerFrequencyLabel.setDisable(true);\n+            bandwidthLabel.setDisable(true);\n+            gainLabel.setDisable(true);\n+            equalizerControl.setDisable(true);\n+        }\n+    }\n+\n+    private void onButtonReset() {\n+        Iterator<EqualizerBandControl> interator = equalizerBandControls.iterator();\n+        while (interator.hasNext()) {\n+            EqualizerBandControl equalizerBandControl = interator.next();\n+            equalizerBandControl.setGain(0.0);\n+        }\n+    }\n+\n+    private void onEqualizerBandAdded(int bandIndex, double centerFrequency,\n+            double bandwidth, double gain) {\n+        EqualizerBandControl equalizerBandControl\n+                = new EqualizerBandControl(bandIndex, centerFrequency, bandwidth, gain);\n+        equalizerBandControls.add(equalizerBandControl);\n+        equalizerControl.getChildren()\n+                .add(equalizerBandControl.getEqualizerBandControl());\n+    }\n+\n+    private synchronized void onEqualizerBandControl(int bandIndex,\n+            double centerFrequency, double bandwidth, double gain) {\n+        bandIndexInfoLabel.setText(String.format(\"%d\", bandIndex));\n+        centerFrequencyInfoLabel.setText(String.format(\"%.2f\", centerFrequency));\n+        bandwidthInfoLabel.setText(String.format(\"%.2f\", bandwidth));\n+        gainInfoLabel.setText(String.format(\"%.2f\", gain));\n+    }\n+\n+    private class EqualizerBandControl {\n+\n+        private int bandIndex = 0;\n+        private EqualizerBand equalizerBand = null;\n+        private VBox control = null;\n+        private Slider slider = null;\n+\n+        public EqualizerBandControl(int bandIndex, double centerFrequency,\n+                double bandwidth, double gain) {\n+            this.bandIndex = bandIndex;\n+            equalizerBand = new EqualizerBand(centerFrequency, bandwidth, gain);\n+            if (bandIndex == 0) {\n+                onEqualizerBandControl(bandIndex,\n+                        equalizerBand.getCenterFrequency(),\n+                        equalizerBand.getBandwidth(),\n+                        equalizerBand.getGain());\n+            }\n+        }\n+\n+        public VBox getEqualizerBandControl() {\n+            if (control == null) {\n+                control = new VBox();\n+                control.setAlignment(Pos.CENTER);\n+\n+                slider = new Slider(EqualizerBand.MIN_GAIN,\n+                        EqualizerBand.MAX_GAIN, 1);\n+                slider.setOrientation(Orientation.VERTICAL);\n+                slider.setValue(equalizerBand.getGain());\n+                slider.setPrefHeight(100);\n+                slider.valueProperty().addListener(\n+                        (ObservableValue<? extends Number> ov, Number o, Number n) -> {\n+                    onSlider();\n+                });\n+                slider.setOnMouseClicked((MouseEvent me) -> {\n+                    onEqualizerBandControl(bandIndex,\n+                            equalizerBand.getCenterFrequency(),\n+                            equalizerBand.getBandwidth(),\n+                            equalizerBand.getGain());\n+                });\n+\n+                Label label = new Label(String.valueOf(bandIndex), slider);\n+                label.setContentDisplay(ContentDisplay.TOP);\n+\n+                control.getChildren().add(label);\n+            }\n+\n+            return control;\n+        }\n+\n+        public void setGain(double gain) {\n+            equalizerBand.setGain(gain);\n+            slider.setValue(gain);\n+        }\n+\n+        public EqualizerBand getBand() {\n+            return equalizerBand;\n+        }\n+\n+        private void onSlider() {\n+            if (slider.isValueChanging()) {\n+                equalizerBand.setGain(slider.getValue());\n+            }\n+        }\n+    }\n+}\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/control\/MediaPlayerEqualizerTab.java","additions":349,"deletions":0,"binary":false,"changes":349,"status":"added"},{"patch":"@@ -0,0 +1,295 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package fxmediaplayer.control;\n+\n+import fxmediaplayer.FXMediaPlayerControlInterface;\n+import fxmediaplayer.FXMediaPlayerInterface;\n+import fxmediaplayer.FXMediaPlayerUtils;\n+import java.util.HashMap;\n+import java.util.Set;\n+import javafx.animation.FadeTransition;\n+import javafx.animation.SequentialTransition;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.beans.property.ReadOnlyObjectProperty;\n+import javafx.event.ActionEvent;\n+import javafx.event.EventHandler;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ContentDisplay;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.control.ToolBar;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.media.MediaMarkerEvent;\n+import javafx.scene.media.MediaPlayer;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Rectangle;\n+import javafx.util.Duration;\n+import javafx.util.Pair;\n+\n+public class MediaPlayerMarkersTab implements FXMediaPlayerControlInterface {\n+\n+    private static final int DEFAULT_NUM_OF_MARKERS = 7;\n+    private static final double ON_OPACITY = 1.0;\n+    private static final double OFF_OPACITY = 0.1;\n+    private FXMediaPlayerInterface FXMediaPlayer = null;\n+    private Tab markersTab = null;\n+    private ToggleButton buttonEnable = null;\n+    private Label addMarkerLabel = null;\n+    private TextField markerTimeTextField = null;\n+    private Button buttonAdd = null;\n+    private HBox markersInfoContainer = null;\n+    private HashMap<String, Duration> markers = null;\n+    private HashMap<String, Label> markerLabels = null;\n+    private InvalidationListener durationPropertyListener = null;\n+    private EventHandler<MediaMarkerEvent> onMarkerListener = null;\n+    private InvalidationListener statusPropertyListener = null;\n+\n+    public MediaPlayerMarkersTab(FXMediaPlayerInterface FXMediaPlayer) {\n+        this.FXMediaPlayer = FXMediaPlayer;\n+    }\n+\n+    public Tab getMarkersTab() {\n+        if (markersTab == null) {\n+\n+            markersTab = new Tab();\n+            markersTab.setText(\"Markers\");\n+\n+            VBox markersTabContent = new VBox();\n+            markersTabContent.setId(\"mediaPlayerTab\");\n+            markersTabContent.setAlignment(Pos.TOP_CENTER);\n+\n+            \/\/ ToolBar\n+            ToolBar toolBar = new ToolBar();\n+\n+            buttonEnable = new ToggleButton(\"Enable\");\n+            buttonEnable.setOnAction((ActionEvent event) -> {\n+                onButtonEnable();\n+            });\n+            toolBar.getItems().add(buttonEnable);\n+\n+            markerTimeTextField = new TextField();\n+            addMarkerLabel = new Label(\"Time (ms):\", markerTimeTextField);\n+            addMarkerLabel.setContentDisplay(ContentDisplay.RIGHT);\n+            addMarkerLabel.setDisable(true);\n+            toolBar.getItems().add(addMarkerLabel);\n+\n+            buttonAdd = new Button(\"Add\");\n+            buttonAdd.setOnAction((ActionEvent event) -> {\n+                onButtonAdd();\n+            });\n+            buttonAdd.setDisable(true);\n+            toolBar.getItems().add(buttonAdd);\n+\n+            markersTabContent.getChildren().add(toolBar);\n+\n+            \/\/ Markers info\n+            markersInfoContainer = new HBox(10);\n+            markersInfoContainer.setAlignment(Pos.CENTER);\n+            markersInfoContainer.setPadding(new Insets(20, 0, 0, 0));\n+            markersTabContent.getChildren().add(markersInfoContainer);\n+\n+            markersTab.setContent(markersTabContent);\n+\n+            createListeners();\n+            addListeners();\n+        }\n+\n+        return markersTab;\n+    }\n+\n+    @Override\n+    public void onMediaPlayerChanged(MediaPlayer oldMediaPlayer) {\n+        if (oldMediaPlayer != null) {\n+            removeListeners(oldMediaPlayer);\n+            removeMarkers(oldMediaPlayer);\n+        }\n+        addListeners();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void createListeners() {\n+        durationPropertyListener = (Observable o) -> {\n+            ReadOnlyObjectProperty property = (ReadOnlyObjectProperty) o;\n+            Duration duration = ((Duration) property.getValue());\n+            if (duration.toMillis() > 0) {\n+                createMarkers(duration);\n+            }\n+        };\n+\n+        onMarkerListener = (MediaMarkerEvent event) -> {\n+            if (event != null) {\n+                Pair<String, Duration> pair = event.getMarker();\n+                Label markerLabel = markerLabels.get(pair.getKey());\n+                if (markerLabel != null) {\n+                    markerOFFON(markerLabel);\n+                }\n+            }\n+        };\n+\n+        statusPropertyListener = (Observable o) -> {\n+            ReadOnlyObjectProperty<MediaPlayer.Status> prop =\n+                    (ReadOnlyObjectProperty<MediaPlayer.Status>) o;\n+            MediaPlayer.Status status = prop.getValue();\n+            if (status == MediaPlayer.Status.READY) {\n+                markersTab.setDisable(false);\n+            } else if (status == MediaPlayer.Status.DISPOSED ||\n+                    status == MediaPlayer.Status.HALTED) {\n+                markersTab.setDisable(true);\n+            }\n+        };\n+    }\n+\n+    private void addListeners() {\n+        if (FXMediaPlayer.getMediaPlayer() == null) {\n+            return;\n+        }\n+\n+        FXMediaPlayer.getMediaPlayer().getMedia()\n+                .durationProperty().addListener(durationPropertyListener);\n+\n+        FXMediaPlayer.getMediaPlayer()\n+                .setOnMarker(onMarkerListener);\n+        FXMediaPlayer.getMediaPlayer()\n+                .statusProperty().addListener(statusPropertyListener);\n+    }\n+\n+    private void removeListeners(MediaPlayer mediaPlayer) {\n+        if (mediaPlayer == null) {\n+            return;\n+        }\n+\n+        mediaPlayer.getMedia()\n+                .durationProperty().removeListener(durationPropertyListener);\n+        mediaPlayer.setOnMarker(null);\n+        mediaPlayer.statusProperty()\n+                .removeListener(statusPropertyListener);\n+    }\n+\n+    private void onButtonEnable() {\n+        if (buttonEnable.isSelected()) {\n+            buttonEnable.setText(\"Enabled\");\n+            addMarkerLabel.setDisable(false);\n+            buttonAdd.setDisable(false);\n+            addMarkers();\n+        } else {\n+            buttonEnable.setText(\"Enable\");\n+            addMarkerLabel.setDisable(true);\n+            buttonAdd.setDisable(true);\n+            removeMarkers(FXMediaPlayer.getMediaPlayer());\n+        }\n+\n+        if (markerLabels != null) {\n+            Set<String> keys = markerLabels.keySet();\n+            for (String key : keys) {\n+                Label label = markerLabels.get(key);\n+                if (buttonEnable.isSelected()) {\n+                    label.setDisable(false);\n+                } else {\n+                    label.setDisable(true);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void onButtonAdd() {\n+        if (markerTimeTextField.getText() != null && !markerTimeTextField.getText().isEmpty()) {\n+            double millis = Double.parseDouble(markerTimeTextField.getText());\n+            addMarker(new Duration(millis), true);\n+            markerTimeTextField.setText(\"\");\n+        }\n+    }\n+\n+    private void addMarker(Duration markerDuration, boolean addToPlayer) {\n+        String key = FXMediaPlayerUtils.millisToString(markerDuration.toMillis());\n+        markers.put(key, markerDuration);\n+\n+        Rectangle rect = new Rectangle(0, 0, 100, 100);\n+        rect.setArcHeight(20);\n+        rect.setArcWidth(20);\n+        rect.setFill(Color.LIGHTGRAY);\n+\n+        Label label = new Label(key, rect);\n+        label.setContentDisplay(ContentDisplay.CENTER);\n+        if (buttonEnable.isSelected()) {\n+            label.setDisable(false);\n+        } else {\n+            label.setDisable(true);\n+        }\n+\n+        markerLabels.put(key, label);\n+        markersInfoContainer.getChildren().add(label);\n+\n+        if (addToPlayer) {\n+            FXMediaPlayer.getMediaPlayer().getMedia().getMarkers().put(key, markerDuration);\n+        }\n+    }\n+\n+    private void createMarkers(Duration duration) {\n+        markersInfoContainer.getChildren().clear();\n+\n+        markers = new HashMap<>();\n+        markerLabels = new HashMap<>();\n+\n+        double millis = duration.toMillis();\n+        millis \/= DEFAULT_NUM_OF_MARKERS;\n+\n+        Duration millisDuration = new Duration(millis);\n+        Duration markerDuration = new Duration(0);\n+\n+        for (int i = 0; i < DEFAULT_NUM_OF_MARKERS; i++) {\n+            addMarker(markerDuration, false);\n+            markerDuration = markerDuration.add(millisDuration);\n+        }\n+\n+        onButtonEnable();\n+    }\n+\n+    private void addMarkers() {\n+        FXMediaPlayer.getMediaPlayer().getMedia().getMarkers().putAll(markers);\n+    }\n+\n+    private void removeMarkers(MediaPlayer oldMediaPlayer) {\n+        oldMediaPlayer.getMedia().getMarkers().clear();\n+    }\n+\n+    private void markerOFFON(Label label) {\n+        SequentialTransition st = new SequentialTransition();\n+        FadeTransition ftOFF = new FadeTransition(Duration.millis(500), label);\n+        ftOFF.setFromValue(ON_OPACITY);\n+        ftOFF.setToValue(OFF_OPACITY);\n+        FadeTransition ftON = new FadeTransition(Duration.millis(500), label);\n+        ftON.setFromValue(OFF_OPACITY);\n+        ftON.setToValue(ON_OPACITY);\n+        st.getChildren().addAll(ftOFF, ftON);\n+        st.play();\n+    }\n+}\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/control\/MediaPlayerMarkersTab.java","additions":295,"deletions":0,"binary":false,"changes":295,"status":"added"},{"patch":"@@ -0,0 +1,347 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package fxmediaplayer.control;\n+\n+import fxmediaplayer.FXMediaPlayerInterface;\n+import fxmediaplayer.FXMediaPlayerUtils;\n+import fxmediaplayer.MediaPlayerDefaults;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.InvalidPropertiesFormatException;\n+import java.util.List;\n+import java.util.Properties;\n+import javafx.application.Platform;\n+import javafx.collections.ListChangeListener.Change;\n+import javafx.collections.MapChangeListener;\n+import javafx.event.ActionEvent;\n+import javafx.event.Event;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.DragEvent;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.input.TransferMode;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.media.*;\n+import javafx.scene.text.Font;\n+\n+public class MediaPlayerPlayListTab {\n+\n+    private static final int ITEM_WIDTH = 160;\n+    private static final int ITEM_HEIGHT = 120;\n+    private static final int ITEM_VIEW_WIDTH = 160;\n+    private static final int ITEM_VIEW_HEIGHT = 110;\n+    private FXMediaPlayerInterface FXMediaPlayer = null;\n+    private PlayListLoader playListLoader = null;\n+    private final List<String> sources = new ArrayList<>();\n+    private Tab playListTab = null;\n+    private ScrollPane scrollPane = null;\n+    private HBox playListContent = null;\n+\n+    public MediaPlayerPlayListTab(FXMediaPlayerInterface FXMediaPlayer) {\n+        this.FXMediaPlayer = FXMediaPlayer;\n+    }\n+\n+    public Tab getPlayListTab() {\n+        if (playListTab == null) {\n+            playListTab = new Tab();\n+            playListTab.setText(\"Play List\");\n+            playListTab.setOnSelectionChanged((Event me) -> {\n+                onTabSelectionChanged();\n+            });\n+\n+            scrollPane = new ScrollPane();\n+            scrollPane.setFitToWidth(true);\n+            scrollPane.setOnDragOver((DragEvent event) -> {\n+                onDragOver(event);\n+            });\n+            scrollPane.setOnDragDropped((DragEvent event) -> {\n+                onDragDropped(event);\n+            });\n+\n+            playListContent = new HBox(15);\n+            playListContent.setId(\"mediaPlayerTab\");\n+            playListContent.setAlignment(Pos.CENTER);\n+            playListContent.setPadding(new Insets(5, 0, 0, 0));\n+\n+            scrollPane.setContent(playListContent);\n+            playListTab.setContent(scrollPane);\n+        }\n+\n+        return playListTab;\n+    }\n+\n+    private synchronized void onTabSelectionChanged() {\n+        if (playListLoader == null && playListTab.isSelected()) {\n+            playListLoader = new PlayListLoader();\n+            playListLoader.start();\n+        }\n+    }\n+\n+    private void onDragOver(DragEvent event) {\n+        String source = FXMediaPlayerUtils.getSourceFromDragboard(event.getDragboard());\n+        if (source != null && !sources.contains(source)) {\n+            event.acceptTransferModes(TransferMode.ANY);\n+        }\n+        event.consume();\n+    }\n+\n+    private void onDragDropped(DragEvent event) {\n+        try {\n+            String source = FXMediaPlayerUtils.getSourceFromDragboard(event.getDragboard());\n+            addPlayListItem(source);\n+            event.setDropCompleted(true);\n+            event.consume();\n+        } catch (IOException ex) {\n+            System.err.println(ex.toString());\n+        }\n+    }\n+\n+    private void addPlayListItem(String source) throws IOException {\n+        if (!sources.contains(source)) {\n+            sources.add(source);\n+            savePlayListProperties();\n+        }\n+\n+        PlayListItem item = new PlayListItem(source);\n+        playListContent.getChildren().add(item.getItem());\n+    }\n+\n+    private void removePlayListItem(String source, PlayListItem item) throws IOException {\n+        sources.remove(source);\n+        savePlayListProperties();\n+        playListContent.getChildren().remove(item.getItem());\n+    }\n+\n+    private void loadPlayList() throws InvalidPropertiesFormatException, IOException {\n+        loadPlayListProperties();\n+\n+        for (int i = 0; i < sources.size(); i++) {\n+            addPlayListItem(sources.get(i));\n+        }\n+    }\n+\n+    private void loadPlayListProperties() throws InvalidPropertiesFormatException, IOException {\n+        Properties properties = new Properties();\n+        try {\n+            properties.loadFromXML(new FileInputStream(MediaPlayerDefaults.PLAYLIST_FILE));\n+            Object[] keys = properties.keySet().toArray();\n+            Arrays.sort(keys);\n+            for (Object key : keys) {\n+                sources.add(properties.getProperty((String) key));\n+            }\n+        } catch (FileNotFoundException ex) {\n+            sources.addAll(Arrays.asList(MediaPlayerDefaults.PLAYLIST));\n+            savePlayListProperties();\n+        }\n+    }\n+\n+    private void savePlayListProperties() throws IOException {\n+        Properties properties = new Properties();\n+        for (int i = 0; i < sources.size(); i++) {\n+            properties.setProperty(Integer.toString(i), sources.get(i));\n+        }\n+        properties.storeToXML(new FileOutputStream(MediaPlayerDefaults.PLAYLIST_FILE), null);\n+    }\n+\n+    private class PlayListLoader extends Thread {\n+\n+        @Override\n+        public void run() {\n+            Platform.runLater(() -> {\n+                try {\n+                    loadPlayList();\n+                } catch (InvalidPropertiesFormatException ex) {\n+                    System.err.println(ex.toString());\n+                } catch (IOException ex) {\n+                    System.err.println(ex.toString());\n+                }\n+            });\n+        }\n+    }\n+\n+    private class PlayListItem {\n+\n+        private String source = null;\n+        private Media media = null;\n+        private MediaPlayer mediaPlayer = null;\n+        private VBox item = null;\n+        private VBox view = null;\n+        private Button buttonLoad = null;\n+        private ToggleButton buttonMute = null;\n+        private Button buttonRemove = null;\n+        private Node itemMediaView = null;\n+        private Image image = null;\n+        private boolean isVideoTrackPresent = false;\n+\n+        public PlayListItem(String source) {\n+            this.source = source;\n+        }\n+\n+        public VBox getItem() {\n+            if (item == null) {\n+                item = new VBox(5);\n+\n+                view = new VBox();\n+                view.setMinSize(ITEM_WIDTH, ITEM_HEIGHT);\n+                view.setAlignment(Pos.CENTER);\n+                view.setStyle(\"-fx-background-color: gray;\");\n+                view.setOnMouseEntered((MouseEvent me) -> {\n+                    onMouseEntered();\n+                });\n+                view.setOnMouseExited((MouseEvent me) -> {\n+                    onMouseExited();\n+                });\n+                view.setOnMouseClicked((MouseEvent me) -> {\n+                    onMouseClicked(me);\n+                });\n+\n+                media = new Media(source);\n+                media.getMetadata().addListener(\n+                        (MapChangeListener.Change<? extends String,\n+                                ? extends Object> change) -> {\n+                    Object value = change.getValueAdded();\n+\n+                    if (value instanceof javafx.scene.image.Image) {\n+                        image = (Image) change.getValueAdded();\n+                        updateView();\n+                    }\n+                });\n+                media.getTracks().addListener((Change<? extends Track> change) -> {\n+                    for (Track track : change.getList()) {\n+                        if (track instanceof VideoTrack) {\n+                            isVideoTrackPresent = true;\n+                            updateView();\n+                        }\n+                    }\n+                });\n+\n+                mediaPlayer = new MediaPlayer(media);\n+                mediaPlayer.setCycleCount(MediaPlayer.INDEFINITE);\n+                mediaPlayer.setMute(true);\n+\n+                TextField textField = new TextField(\"Audio\");\n+                textField.setFont(Font.font (\"Verdana\", 20));\n+                textField.setPrefWidth(ITEM_VIEW_WIDTH);\n+                textField.setPrefHeight(ITEM_VIEW_HEIGHT);\n+                textField.setAlignment(Pos.CENTER);\n+                textField.setDisable(true);\n+                textField.setStyle(\"-fx-background-color: transparent; -fx-opacity: 1.0;\");\n+                itemMediaView = textField;\n+                view.getChildren().add(itemMediaView);\n+\n+                item.getChildren().add(view);\n+\n+                HBox hBox = new HBox(5);\n+                hBox.setAlignment(Pos.CENTER);\n+                buttonLoad = new Button(\"Load\");\n+                buttonLoad.setOnAction((ActionEvent event) -> {\n+                    onButtonLoad();\n+                });\n+                buttonMute = new ToggleButton(\"Mute\");\n+                buttonMute.setSelected(true);\n+                buttonMute.setOnAction((ActionEvent event) -> {\n+                    onButtonMute();\n+                });\n+                buttonRemove = new Button(\"Del.\");\n+                buttonRemove.setOnAction((ActionEvent event) -> {\n+                    onButtonDelete();\n+                });\n+                hBox.getChildren().addAll(buttonLoad, buttonMute, buttonRemove);\n+                item.getChildren().add(hBox);\n+            }\n+\n+            return item;\n+        }\n+\n+        private void onMouseEntered() {\n+            mediaPlayer.play();\n+        }\n+\n+        private void onMouseExited() {\n+            mediaPlayer.pause();\n+        }\n+\n+        private void onMouseClicked(MouseEvent me) {\n+            if (me.getButton() == MouseButton.PRIMARY &&\n+                    me.getClickCount() >= 2) {\n+                onButtonLoad();\n+                FXMediaPlayer.getMediaPlayer().play();\n+            }\n+        }\n+\n+        private void onButtonLoad() {\n+            FXMediaPlayer.onSourceChanged(source);\n+        }\n+\n+        private void onButtonMute() {\n+            mediaPlayer.setMute(buttonMute.isSelected());\n+        }\n+\n+        private void onButtonDelete() {\n+            try {\n+                removePlayListItem(source, this);\n+            } catch (IOException ex) {\n+                System.err.println(ex.toString());\n+            }\n+        }\n+\n+        private void updateView() {\n+            if (isVideoTrackPresent) {\n+                MediaView mediaView = new MediaView(mediaPlayer);\n+                mediaView.setFitWidth(ITEM_WIDTH);\n+                mediaView.setFitHeight(ITEM_HEIGHT);\n+                view.getChildren().remove(itemMediaView);\n+                itemMediaView = mediaView;\n+                view.getChildren().add(itemMediaView);\n+                view.setStyle(\"-fx-background-color: black;\");\n+            } else {\n+                ImageView imageView = new ImageView(image);\n+                imageView.setFitWidth(ITEM_WIDTH);\n+                imageView.setFitHeight(ITEM_HEIGHT);\n+                imageView.setPreserveRatio(true);\n+                view.getChildren().remove(itemMediaView);\n+                itemMediaView = imageView;\n+                view.getChildren().add(itemMediaView);\n+                view.setStyle(\"-fx-background-color: gray;\");\n+            }\n+\n+        }\n+    }\n+}\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/control\/MediaPlayerPlayListTab.java","additions":347,"deletions":0,"binary":false,"changes":347,"status":"added"},{"patch":"@@ -0,0 +1,163 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package fxmediaplayer.control;\n+\n+import fxmediaplayer.FXMediaPlayerControlInterface;\n+import fxmediaplayer.FXMediaPlayerInterface;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.beans.property.ReadOnlyObjectProperty;\n+import javafx.event.Event;\n+import javafx.scene.chart.BarChart;\n+import javafx.scene.chart.CategoryAxis;\n+import javafx.scene.chart.Chart;\n+import javafx.scene.chart.NumberAxis;\n+import javafx.scene.chart.XYChart;\n+import javafx.scene.control.Tab;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.media.AudioSpectrumListener;\n+import javafx.scene.media.MediaPlayer;\n+\n+public class MediaPlayerSpectrumTab implements FXMediaPlayerControlInterface {\n+\n+    private FXMediaPlayerInterface FXMediaPlayer = null;\n+    private Tab spectrumTab = null;\n+    private AudioSpectrumListenerImpl listener = null;\n+    private XYChart.Data<String, Number>[] seriesData;\n+    private InvalidationListener statusPropertyListener = null;\n+\n+    public MediaPlayerSpectrumTab(FXMediaPlayerInterface FXMediaPlayer) {\n+        this.FXMediaPlayer = FXMediaPlayer;\n+    }\n+\n+    public Tab getSpectrumTab() {\n+        if (spectrumTab == null) {\n+            spectrumTab = new Tab();\n+            spectrumTab.setText(\"Spectrum\");\n+            spectrumTab.setOnSelectionChanged((Event t) -> {\n+                onSelectionChanged();\n+            });\n+\n+            VBox vBox = new VBox();\n+            vBox.setId(\"mediaPlayerTab\");\n+            vBox.getChildren().add(createBarChart());\n+\n+            spectrumTab.setContent(vBox);\n+        }\n+\n+        return spectrumTab;\n+    }\n+\n+    @Override\n+    public void onMediaPlayerChanged(MediaPlayer oldMediaPlayer) {\n+        removeListeners(oldMediaPlayer);\n+        addListeners();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void addListeners() {\n+        if (FXMediaPlayer.getMediaPlayer() == null) {\n+            return;\n+        }\n+\n+        statusPropertyListener = (Observable o) -> {\n+            ReadOnlyObjectProperty<MediaPlayer.Status> prop =\n+                    (ReadOnlyObjectProperty<MediaPlayer.Status>) o;\n+            MediaPlayer.Status status = prop.getValue();\n+            if (status == MediaPlayer.Status.READY) {\n+                spectrumTab.setDisable(false);\n+            } else if (status == MediaPlayer.Status.DISPOSED ||\n+                    status == MediaPlayer.Status.HALTED) {\n+                spectrumTab.setDisable(true);\n+            }\n+        };\n+\n+        FXMediaPlayer.getMediaPlayer()\n+                .statusProperty().addListener(statusPropertyListener);\n+    }\n+\n+    private void removeListeners(MediaPlayer mediaPlayer) {\n+        if (mediaPlayer == null) {\n+            return;\n+        }\n+\n+        mediaPlayer.statusProperty()\n+                .removeListener(statusPropertyListener);\n+    }\n+\n+    private void onSelectionChanged() {\n+        if (FXMediaPlayer.getMediaPlayer() == null) {\n+            return;\n+        }\n+\n+        if (spectrumTab.isSelected()) {\n+            if (listener == null) {\n+                listener = new AudioSpectrumListenerImpl();\n+            }\n+            FXMediaPlayer.getMediaPlayer().setAudioSpectrumListener(listener);\n+        } else {\n+            FXMediaPlayer.getMediaPlayer().setAudioSpectrumListener(null);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private Chart createBarChart() {\n+        final CategoryAxis xAxis = new CategoryAxis();\n+        final NumberAxis yAxis = new NumberAxis(0, 50, 10);\n+        final BarChart<String, Number> bc = new BarChart<>(xAxis, yAxis);\n+\n+        bc.setId(\"mediaPlayerSpectrum\");\n+        bc.setLegendVisible(false);\n+        bc.setAnimated(false);\n+        bc.setBarGap(0);\n+        bc.setCategoryGap(1);\n+        bc.setVerticalGridLinesVisible(false);\n+        yAxis.setTickLabelFormatter(new NumberAxis.DefaultFormatter(yAxis, null, \"dB\"));\n+        XYChart.Series<String, Number> series = new XYChart.Series<>();\n+        series.setName(\"Data Series 1\");\n+        seriesData = new XYChart.Data[128];\n+        String[] categories = new String[128];\n+        for (int i = 0; i < seriesData.length; i++) {\n+            categories[i] = Integer.toString(i + 1);\n+            seriesData[i] = new XYChart.Data<>(categories[i], 50);\n+            series.getData().add(seriesData[i]);\n+        }\n+        bc.getData().add(series);\n+\n+        return bc;\n+    }\n+\n+    private class AudioSpectrumListenerImpl implements AudioSpectrumListener {\n+\n+        @Override\n+        public void spectrumDataUpdate(double timestamp, double duration,\n+                float[] magnitudes, float[] phases) {\n+            for (int i = 0; i < seriesData.length; i++) {\n+                seriesData[i].setYValue(magnitudes[i] + 60);\n+            }\n+        }\n+    }\n+}\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/control\/MediaPlayerSpectrumTab.java","additions":163,"deletions":0,"binary":false,"changes":163,"status":"added"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package fxmediaplayer.control;\n+\n+import fxmediaplayer.FXMediaPlayerControlInterface;\n+import fxmediaplayer.FXMediaPlayerInterface;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.media.MediaPlayer;\n+\n+public class MediaPlayerTabControl implements FXMediaPlayerControlInterface {\n+\n+    private FXMediaPlayerInterface FXMediaPlayer = null;\n+    private TabPane tabControl = null;\n+    private MediaPlayerControlTab controlTab = null;\n+    private MediaPlayerSpectrumTab spectrumTab = null;\n+    private MediaPlayerEqualizerTab equalizerTab = null;\n+    private MediaPlayerEffectsTab effectsTab = null;\n+    private MediaPlayerMarkersTab markersTab = null;\n+    private MediaPlayerPlayListTab playListTab = null;\n+\n+    public MediaPlayerTabControl(FXMediaPlayerInterface FXMediaPlayer) {\n+        this.FXMediaPlayer = FXMediaPlayer;\n+    }\n+\n+    public TabPane getTabControl() {\n+        if (tabControl == null) {\n+            tabControl = new TabPane();\n+            tabControl.setTabClosingPolicy(TabPane.TabClosingPolicy.UNAVAILABLE);\n+            tabControl.setPrefHeight(200);\n+\n+            controlTab = new MediaPlayerControlTab(FXMediaPlayer);\n+            spectrumTab = new MediaPlayerSpectrumTab(FXMediaPlayer);\n+            equalizerTab = new MediaPlayerEqualizerTab(FXMediaPlayer);\n+            effectsTab = new MediaPlayerEffectsTab(FXMediaPlayer);\n+            markersTab = new MediaPlayerMarkersTab(FXMediaPlayer);\n+            playListTab = new MediaPlayerPlayListTab(FXMediaPlayer);\n+\n+            tabControl.getTabs().add(controlTab.getControlTab());\n+            tabControl.getTabs().add(spectrumTab.getSpectrumTab());\n+            tabControl.getTabs().add(equalizerTab.getEqualizerTab());\n+            tabControl.getTabs().add(effectsTab.getColorAdjustTab());\n+            tabControl.getTabs().add(markersTab.getMarkersTab());\n+            tabControl.getTabs().add(playListTab.getPlayListTab());\n+        }\n+\n+        return tabControl;\n+    }\n+\n+    @Override\n+    public void onMediaPlayerChanged(MediaPlayer oldMediaPlayer) {\n+        controlTab.onMediaPlayerChanged(oldMediaPlayer);\n+        spectrumTab.onMediaPlayerChanged(oldMediaPlayer);\n+        equalizerTab.onMediaPlayerChanged(oldMediaPlayer);\n+        effectsTab.onMediaPlayerChanged(oldMediaPlayer);\n+        markersTab.onMediaPlayerChanged(oldMediaPlayer);\n+    }\n+}\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/control\/MediaPlayerTabControl.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,172 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package fxmediaplayer.control;\n+\n+import fxmediaplayer.FXMediaPlayerInterface;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.beans.property.ReadOnlyObjectProperty;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.control.ToolBar;\n+import javafx.scene.media.MediaPlayer;\n+\n+public class MediaPlayerToolBar {\n+\n+    private FXMediaPlayerInterface FXMediaPlayer = null;\n+    private ToolBar toolBar = null;\n+    private Button buttonPlay = null;\n+    private Button buttonPause = null;\n+    private Button buttonStop = null;\n+    private ToggleButton buttonMute = null;\n+    private ToggleButton buttonLoop = null;\n+    private InvalidationListener statusPropertyListener = null;\n+\n+    public MediaPlayerToolBar(FXMediaPlayerInterface FXMediaPlayer) {\n+        this.FXMediaPlayer = FXMediaPlayer;\n+    }\n+\n+    public ToolBar getToolBar() {\n+        if (toolBar == null) {\n+            toolBar = new ToolBar();\n+\n+            buttonPlay = new Button(\"Play\");\n+            buttonPlay.setOnAction((ActionEvent event) -> {\n+                onButtonPlay();\n+            });\n+            toolBar.getItems().add(buttonPlay);\n+\n+            buttonPause = new Button(\"Pause\");\n+            buttonPause.setOnAction((ActionEvent event) -> {\n+                onButtonPause();\n+            });\n+            toolBar.getItems().add(buttonPause);\n+\n+            buttonStop = new Button(\"Stop\");\n+            buttonStop.setOnAction((ActionEvent event) -> {\n+                onButtonStop();\n+            });\n+            toolBar.getItems().add(buttonStop);\n+\n+            buttonMute = new ToggleButton(\"Mute\");\n+            buttonMute.setOnAction((ActionEvent event) -> {\n+                onButtonMute();\n+            });\n+            toolBar.getItems().add(buttonMute);\n+\n+            buttonLoop = new ToggleButton(\"Loop\");\n+            buttonLoop.setOnAction((ActionEvent event) -> {\n+                onButtonLoop();\n+            });\n+            toolBar.getItems().add(buttonLoop);\n+\n+            toolBar.setDisable(true);\n+        }\n+\n+        return toolBar;\n+    }\n+\n+    public void onMediaPlayerChanged(MediaPlayer oldMediaPlayer) {\n+        removeListeners(oldMediaPlayer);\n+        addListeners();\n+        onButtonMute();\n+        onButtonLoop();\n+    }\n+\n+    private void addListeners() {\n+        if (FXMediaPlayer.getMediaPlayer() == null) {\n+            return;\n+        }\n+\n+        statusPropertyListener = (Observable o) -> {\n+            onStatus(o);\n+        };\n+\n+        FXMediaPlayer.getMediaPlayer()\n+                .statusProperty().addListener(statusPropertyListener);\n+    }\n+\n+    private void removeListeners(MediaPlayer mediaPlayer) {\n+        if (mediaPlayer == null) {\n+            return;\n+        }\n+\n+        mediaPlayer.statusProperty()\n+                .removeListener(statusPropertyListener);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void onStatus(Observable o) {\n+        try {\n+            ReadOnlyObjectProperty<MediaPlayer.Status> prop =\n+                    (ReadOnlyObjectProperty<MediaPlayer.Status>) o;\n+            MediaPlayer.Status status = prop.getValue();\n+            if (status == MediaPlayer.Status.READY) {\n+                toolBar.setDisable(false);\n+            } else if (status == MediaPlayer.Status.DISPOSED ||\n+                    status == MediaPlayer.Status.HALTED) {\n+                toolBar.setDisable(true);\n+            }\n+        } catch (Exception e) {\n+            System.err.println(e.toString());\n+        }\n+    }\n+\n+    private void onButtonPlay() {\n+        if (FXMediaPlayer.getMediaPlayer() != null) {\n+            FXMediaPlayer.getMediaPlayer().play();\n+        }\n+    }\n+\n+    private void onButtonPause() {\n+        if (FXMediaPlayer.getMediaPlayer() != null) {\n+            FXMediaPlayer.getMediaPlayer().pause();\n+        }\n+    }\n+\n+    private void onButtonStop() {\n+        if (FXMediaPlayer.getMediaPlayer() != null) {\n+            FXMediaPlayer.getMediaPlayer().stop();\n+        }\n+    }\n+\n+    private void onButtonMute() {\n+        if (FXMediaPlayer.getMediaPlayer() != null) {\n+            FXMediaPlayer.getMediaPlayer().setMute(buttonMute.isSelected());\n+        }\n+    }\n+\n+    private void onButtonLoop() {\n+        if (FXMediaPlayer.getMediaPlayer() != null) {\n+            if (buttonLoop.isSelected()) {\n+                FXMediaPlayer.getMediaPlayer().setCycleCount(MediaPlayer.INDEFINITE);\n+            } else {\n+                FXMediaPlayer.getMediaPlayer().setCycleCount(1);\n+            }\n+        }\n+    }\n+}\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/control\/MediaPlayerToolBar.java","additions":172,"deletions":0,"binary":false,"changes":172,"status":"added"},{"patch":"@@ -0,0 +1,314 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package fxmediaplayer.info;\n+\n+import fxmediaplayer.FXMediaPlayerControlInterface;\n+import fxmediaplayer.FXMediaPlayerInterface;\n+import fxmediaplayer.FXMediaPlayerUtils;\n+import java.util.Map;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.beans.property.ReadOnlyIntegerProperty;\n+import javafx.beans.property.ReadOnlyObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ListChangeListener;\n+import javafx.collections.MapChangeListener;\n+import javafx.collections.MapChangeListener.Change;\n+import javafx.collections.ObservableList;\n+import javafx.geometry.Pos;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ListView;\n+import javafx.scene.image.Image;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.media.AudioTrack;\n+import javafx.scene.media.MediaPlayer;\n+import javafx.scene.media.Track;\n+import javafx.scene.media.VideoTrack;\n+import javafx.util.Duration;\n+\n+public class MediaPlayerInfo implements FXMediaPlayerControlInterface {\n+\n+    private static final double WIDTH = 210;\n+    private FXMediaPlayerInterface FXMediaPlayer = null;\n+    private VBox info = null;\n+    private ListView<String> mediaInfo = null;\n+    private final ObservableList<String> mediaInfoItems =\n+            FXCollections.observableArrayList();\n+    private Duration currentDuration = null;\n+    private Duration currentCycleDuration = null;\n+    private Duration currentTotalDuration = null;\n+    private int durationIndex = -1;\n+    private int cycleDurationIndex = -1;\n+    private int totalDurationIndex = -1;\n+    private int widthIndex = -1;\n+    private int heightIndex = -1;\n+    private InvalidationListener durationPropertyListener = null;\n+    private InvalidationListener cycleDurationPropertyListener = null;\n+    private InvalidationListener totalDurationPropertyListener = null;\n+    private InvalidationListener widthPropertyListener = null;\n+    private InvalidationListener heightPropertyListener = null;\n+    private ListView<String> metadataTrackInfo = null;\n+    private final ObservableList<String> metadataTrackInfoItems =\n+            FXCollections.observableArrayList();\n+    private MapChangeListener<String, Object> metadataListener = null;\n+    private ListChangeListener<Track> trackListener = null;\n+\n+    public MediaPlayerInfo(FXMediaPlayerInterface FXMediaPlayer) {\n+        this.FXMediaPlayer = FXMediaPlayer;\n+    }\n+\n+    public VBox getInfo() {\n+        if (info == null) {\n+            info = new VBox();\n+\n+            info.setMinWidth(WIDTH);\n+            info.setMaxWidth(WIDTH);\n+            info.setPrefWidth(WIDTH);\n+            info.setAlignment(Pos.TOP_CENTER);\n+\n+            Label label = new Label(\"Media info:\");\n+            label.setAlignment(Pos.BASELINE_LEFT);\n+            info.getChildren().add(label);\n+            mediaInfo = new ListView<>();\n+            mediaInfo.setItems(mediaInfoItems);\n+            mediaInfo.setPrefHeight(125);\n+            mediaInfo.setMinWidth(WIDTH - 10);\n+            mediaInfo.setMaxWidth(WIDTH - 10);\n+            mediaInfo.setPrefWidth(WIDTH - 10);\n+            info.getChildren().add(mediaInfo);\n+\n+            label = new Label(\"Metadata\/Track info:\");\n+            label.setAlignment(Pos.BASELINE_LEFT);\n+            info.getChildren().add(label);\n+            metadataTrackInfo = new ListView<>();\n+            metadataTrackInfo.setItems(metadataTrackInfoItems);\n+            metadataTrackInfo.setPrefHeight(295);\n+            metadataTrackInfo.setMinWidth(WIDTH - 10);\n+            metadataTrackInfo.setMaxWidth(WIDTH - 10);\n+            metadataTrackInfo.setPrefWidth(WIDTH - 10);\n+            info.getChildren().add(metadataTrackInfo);\n+\n+            createListeners();\n+            addListeners();\n+        }\n+\n+        return info;\n+    }\n+\n+    @Override\n+    public void onMediaPlayerChanged(MediaPlayer oldMediaPlayer) {\n+        if (oldMediaPlayer != null) {\n+            removeListeners(oldMediaPlayer);\n+        }\n+\n+        currentDuration = null;\n+        currentCycleDuration = null;\n+        currentTotalDuration = null;\n+        durationIndex = -1;\n+        widthIndex = -1;\n+        heightIndex = -1;\n+        totalDurationIndex = -1;\n+        cycleDurationIndex = -1;\n+        mediaInfoItems.clear();\n+\n+        metadataTrackInfoItems.clear();\n+\n+        addListeners();\n+    }\n+\n+    private void createListeners() {\n+        durationPropertyListener = (Observable o) -> {\n+            ReadOnlyObjectProperty property = (ReadOnlyObjectProperty) o;\n+            Duration duration = ((Duration) property.getValue());\n+            if (currentDuration == null || !currentDuration.equals(duration)) {\n+                if (durationIndex == -1) {\n+                    if (mediaInfoItems.add(\"Duration: \" +\n+                            FXMediaPlayerUtils.secondsToString(duration.toSeconds()))) {\n+                        durationIndex = mediaInfoItems.size() - 1;\n+                    }\n+                } else {\n+                    mediaInfoItems.set(durationIndex, \"Duration: \" +\n+                            FXMediaPlayerUtils.secondsToString(duration.toSeconds()));\n+                }\n+                currentDuration = duration;\n+            }\n+        };\n+\n+        cycleDurationPropertyListener = (Observable o) -> {\n+            ReadOnlyObjectProperty property = (ReadOnlyObjectProperty) o;\n+            Duration duration = ((Duration) property.getValue());\n+            if (currentCycleDuration == null || !currentCycleDuration.equals(duration)) {\n+                if (cycleDurationIndex == -1) {\n+                    if (mediaInfoItems.add(\"Cycle duration: \" +\n+                            FXMediaPlayerUtils.secondsToString(duration.toSeconds()))) {\n+                        cycleDurationIndex = mediaInfoItems.size() - 1;\n+                    }\n+                } else {\n+                    mediaInfoItems.set(cycleDurationIndex, \"Cycle duration: \" +\n+                            FXMediaPlayerUtils.secondsToString(duration.toSeconds()));\n+                }\n+                currentCycleDuration = duration;\n+            }\n+        };\n+\n+        totalDurationPropertyListener = (Observable o) -> {\n+            ReadOnlyObjectProperty property = (ReadOnlyObjectProperty) o;\n+            Duration duration = ((Duration) property.getValue());\n+            if (currentTotalDuration == null || !currentTotalDuration.equals(duration)) {\n+                if (totalDurationIndex == -1) {\n+                    if (mediaInfoItems.add(\"Total duration: \" +\n+                            FXMediaPlayerUtils.secondsToString(duration.toSeconds()))) {\n+                        totalDurationIndex = mediaInfoItems.size() - 1;\n+                    }\n+                } else {\n+                    mediaInfoItems.set(totalDurationIndex, \"Total duration: \" +\n+                            FXMediaPlayerUtils.secondsToString(duration.toSeconds()));\n+                }\n+                currentTotalDuration = duration;\n+            }\n+        };\n+\n+        widthPropertyListener = (Observable o) -> {\n+            ReadOnlyIntegerProperty property = (ReadOnlyIntegerProperty) o;\n+            int width = property.getValue();\n+            if (widthIndex == -1) {\n+                if (mediaInfoItems.add(\"Width: \" + width)) {\n+                    widthIndex = mediaInfoItems.size() - 1;\n+                }\n+            } else {\n+                mediaInfoItems.set(widthIndex, \"Width: \" + width);\n+            }\n+        };\n+\n+        heightPropertyListener = (Observable o) -> {\n+            ReadOnlyIntegerProperty property = (ReadOnlyIntegerProperty) o;\n+            int height = property.getValue();\n+            if (heightIndex == -1) {\n+                if (mediaInfoItems.add(\"Height: \" + height)) {\n+                    heightIndex = mediaInfoItems.size() - 1;\n+                }\n+            } else {\n+                mediaInfoItems.set(heightIndex, \"Height: \" + height);\n+            }\n+        };\n+\n+        metadataListener = (Change<? extends String, ? extends Object> change) -> {\n+            synchronized (metadataTrackInfoItems) {\n+                String key = change.getKey();\n+                Object value = change.getValueAdded();\n+\n+                if (value instanceof java.lang.String) {\n+                    metadataTrackInfoItems.add(key + \": \" + (String) value);\n+                } else if (value instanceof java.lang.Integer) {\n+                    metadataTrackInfoItems.add(key + \": \" + (Integer) value);\n+                } else if (value instanceof javafx.util.Duration) {\n+                    metadataTrackInfoItems.add(key + \": \" + ((Duration) value).toSeconds());\n+                } else if (value instanceof java.lang.Double) {\n+                    metadataTrackInfoItems.add(key + \": \" + (Double) value);\n+                } else if (value instanceof javafx.scene.image.Image) {\n+                    Image image = (Image) change.getValueAdded();\n+                    FXMediaPlayer.onImageAvailable(image);\n+                }\n+            }\n+        };\n+\n+        trackListener = (ListChangeListener.Change<? extends Track> change) -> {\n+            synchronized (metadataTrackInfoItems) {\n+                while (change.next()) {\n+                    change.getAddedSubList().forEach(track -> {\n+                        if (track instanceof AudioTrack) {\n+                            AudioTrack audioTrack = (AudioTrack) track;\n+                            metadataTrackInfoItems.add(\"AudioTrack name: \" +\n+                                    audioTrack.getName());\n+                            metadataTrackInfoItems.add(\"AudioTrack ID: \" +\n+                                    audioTrack.getTrackID());\n+                            metadataTrackInfoItems.add(\"AudioTrack locale: \" +\n+                                    audioTrack.getLocale());\n+                            Map<String, Object> metadata = track.getMetadata();\n+                            metadata.keySet().forEach(key -> {\n+                                metadataTrackInfoItems.add(\"AudioTrack: \" +\n+                                        key + \" - \" + metadata.get(key).toString());\n+                            });\n+                        } else if (track instanceof VideoTrack) {\n+                            VideoTrack videoTrack = (VideoTrack) track;\n+                            metadataTrackInfoItems.add(\"VideoTrack name: \" +\n+                                    videoTrack.getName());\n+                            metadataTrackInfoItems.add(\"VideoTrack ID: \" +\n+                                    videoTrack.getTrackID());\n+                            metadataTrackInfoItems.add(\"VideoTrack locale: \" +\n+                                    videoTrack.getLocale());\n+                            metadataTrackInfoItems.add(\"VideoTrack width: \" +\n+                                    videoTrack.getWidth());\n+                            metadataTrackInfoItems.add(\"VideoTrack height: \" +\n+                                    videoTrack.getHeight());\n+                            Map<String, Object> metadata = track.getMetadata();\n+                            metadata.keySet().forEach(key -> {\n+                                metadataTrackInfoItems.add(\"VideoTrack: \" +\n+                                        key + \" - \" + metadata.get(key).toString());\n+                            });\n+                        }\n+                    });\n+                }\n+            }\n+        };\n+    }\n+\n+    private void addListeners() {\n+        if (FXMediaPlayer.getMediaPlayer() != null) {\n+            FXMediaPlayer.getMediaPlayer().getMedia().durationProperty()\n+                    .addListener(durationPropertyListener);\n+            FXMediaPlayer.getMediaPlayer().cycleDurationProperty()\n+                    .addListener(cycleDurationPropertyListener);\n+            FXMediaPlayer.getMediaPlayer().totalDurationProperty()\n+                    .addListener(totalDurationPropertyListener);\n+            FXMediaPlayer.getMediaPlayer().getMedia().widthProperty()\n+                    .addListener(widthPropertyListener);\n+            FXMediaPlayer.getMediaPlayer().getMedia().heightProperty()\n+                    .addListener(heightPropertyListener);\n+            FXMediaPlayer.getMediaPlayer().getMedia().getMetadata()\n+                    .addListener(metadataListener);\n+            FXMediaPlayer.getMediaPlayer().getMedia().getTracks()\n+                    .addListener(trackListener);\n+        }\n+    }\n+\n+    private void removeListeners(MediaPlayer mediaPlayer) {\n+        mediaPlayer.getMedia().durationProperty()\n+                .removeListener(durationPropertyListener);\n+        mediaPlayer.cycleDurationProperty()\n+                .removeListener(cycleDurationPropertyListener);\n+        mediaPlayer.totalDurationProperty()\n+                .removeListener(totalDurationPropertyListener);\n+        mediaPlayer.getMedia().widthProperty()\n+                .removeListener(widthPropertyListener);\n+        mediaPlayer.getMedia().heightProperty()\n+                .removeListener(heightPropertyListener);\n+        mediaPlayer.getMedia().getMetadata()\n+                .removeListener(metadataListener);\n+        mediaPlayer.getMedia().getTracks()\n+                .removeListener(trackListener);\n+    }\n+}\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/info\/MediaPlayerInfo.java","additions":314,"deletions":0,"binary":false,"changes":314,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#mediaPlayerTab {\n+    -fx-background-color: #F0F0F0;\n+}\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/main.css","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package fxmediaplayer.menu;\n+\n+import fxmediaplayer.FXMediaPlayerInterface;\n+import javafx.event.ActionEvent;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.control.ToolBar;\n+\n+public class MediaPlayerMenu {\n+\n+    private FXMediaPlayerInterface FXMediaPlayer = null;\n+    private ToolBar toolBar = null;\n+    private Button buttonOpen = null;\n+    private Button buttonDispose = null;\n+    private ToggleButton buttonAutoPlay = null;\n+    private Button buttonFullScreen = null;\n+    private ToggleButton buttonSmooth = null;\n+    private ToggleButton buttonPreserveRatio = null;\n+    private ToggleButton buttonScrubbing = null;\n+    private MediaPlayerMenuOpenDialog openDialog = null;\n+\n+    public MediaPlayerMenu(FXMediaPlayerInterface FXMediaPlayer) {\n+        this.FXMediaPlayer = FXMediaPlayer;\n+    }\n+\n+    public ToolBar getMenu() {\n+        if (toolBar == null) {\n+            toolBar = new ToolBar();\n+\n+            buttonOpen = new Button(\"Open\");\n+            buttonOpen.setOnAction((ActionEvent event) -> {\n+                onButtonOpen();\n+            });\n+            toolBar.getItems().add(buttonOpen);\n+\n+            buttonDispose = new Button(\"Dispose\");\n+            buttonDispose.setOnAction((ActionEvent event) -> {\n+                onButtonDispose();\n+            });\n+            toolBar.getItems().add(buttonDispose);\n+\n+            buttonAutoPlay = new ToggleButton(\"Auto Play\");\n+            buttonAutoPlay.setOnAction((ActionEvent event) -> {\n+                onButtonAutoPlay();\n+            });\n+            toolBar.getItems().add(buttonAutoPlay);\n+\n+            buttonFullScreen = new Button(\"Full Screen\");\n+            buttonFullScreen.setOnAction((ActionEvent event) -> {\n+                onButtonFullScreen();\n+            });\n+            toolBar.getItems().add(buttonFullScreen);\n+\n+            buttonSmooth = new ToggleButton(\"Smooth\");\n+            buttonSmooth.setOnAction((ActionEvent event) -> {\n+                onButtonSmooth();\n+            });\n+            if (FXMediaPlayer.getMediaView().isSmooth()) {\n+                buttonSmooth.setSelected(true);\n+            }\n+            toolBar.getItems().add(buttonSmooth);\n+\n+            buttonPreserveRatio = new ToggleButton(\"Ratio\");\n+            buttonPreserveRatio.setOnAction((ActionEvent event) -> {\n+                onButtonPreserveRatio();\n+            });\n+            if (FXMediaPlayer.getMediaView().isPreserveRatio()) {\n+                buttonPreserveRatio.setSelected(true);\n+            }\n+            toolBar.getItems().add(buttonPreserveRatio);\n+\n+            buttonScrubbing = new ToggleButton(\"Scrubbing\");\n+            buttonScrubbing.setOnAction((ActionEvent event) -> {\n+                onButtonScrubbing();\n+            });\n+            toolBar.getItems().add(buttonScrubbing);\n+        }\n+\n+        return toolBar;\n+    }\n+\n+    private void onButtonOpen() {\n+        if (openDialog == null) {\n+            openDialog = new MediaPlayerMenuOpenDialog(FXMediaPlayer);\n+        }\n+\n+        openDialog.open();\n+    }\n+\n+    private void onButtonDispose() {\n+        FXMediaPlayer.onSourceChanged(null);\n+    }\n+\n+    private void onButtonAutoPlay() {\n+        FXMediaPlayer.setAutoPlay(buttonAutoPlay.isSelected());\n+    }\n+\n+    private void onButtonFullScreen() {\n+        FXMediaPlayer.setFullScreen(true);\n+    }\n+\n+    private void onButtonSmooth() {\n+        FXMediaPlayer.getMediaView().setSmooth(buttonSmooth.isSelected());\n+    }\n+\n+    private void onButtonPreserveRatio() {\n+        FXMediaPlayer.getMediaView()\n+                .setPreserveRatio(buttonPreserveRatio.isSelected());\n+    }\n+\n+    private void onButtonScrubbing() {\n+        FXMediaPlayer.setScrubbing(buttonScrubbing.isSelected());\n+    }\n+}\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/menu\/MediaPlayerMenu.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package fxmediaplayer.menu;\n+\n+import fxmediaplayer.FXMediaPlayerInterface;\n+import java.io.File;\n+import javafx.event.ActionEvent;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.FileChooser;\n+import javafx.stage.Modality;\n+import javafx.stage.Stage;\n+import javafx.stage.WindowEvent;\n+\n+public class MediaPlayerMenuOpenDialog {\n+\n+    private static final int WIDTH = 500;\n+    private static final int HEIGHT = 100;\n+    private FXMediaPlayerInterface FXMediaPlayer = null;\n+    private Stage stage = null;\n+    private Scene scene = null;\n+    private TextField textField = null;\n+    private Button buttonBrowse = null;\n+    private Button buttonOpen = null;\n+    private Button buttonCancel = null;\n+    private FileChooser fileChooser = null;\n+\n+    public MediaPlayerMenuOpenDialog(FXMediaPlayerInterface FXMediaPlayer) {\n+        this.FXMediaPlayer = FXMediaPlayer;\n+    }\n+\n+    public void open() {\n+        if (stage == null) {\n+            stage = new Stage();\n+\n+            stage.setTitle(\"Open file\");\n+            stage.initModality(Modality.APPLICATION_MODAL);\n+            stage.setResizable(false);\n+            stage.setOnCloseRequest((WindowEvent event) -> {\n+                onCloseRequest();\n+            });\n+\n+            scene = new Scene(getLayout(), WIDTH, HEIGHT);\n+            scene.setFill(Color.web(\"#F0F0F0\"));\n+            stage.setScene(scene);\n+        }\n+\n+        stage.show();\n+    }\n+\n+    private VBox getLayout() {\n+        VBox vBox = new VBox(10);\n+\n+        Label label = new Label(\"Enter URL or browse for local files:\");\n+        vBox.getChildren().add(label);\n+\n+        textField = new TextField();\n+        vBox.getChildren().add(textField);\n+\n+        HBox hBox = new HBox(25);\n+        hBox.setAlignment(Pos.CENTER);\n+        buttonBrowse = new Button(\"Browse\");\n+        buttonBrowse.setOnAction((ActionEvent event) -> {\n+            onButtonBrowse();\n+        });\n+        buttonOpen = new Button(\"Open\");\n+        buttonOpen.setOnAction((ActionEvent event) -> {\n+            onButtonOpen();\n+        });\n+        buttonCancel = new Button(\"Cancel\");\n+        buttonCancel.setOnAction((ActionEvent event) -> {\n+            onButtonCancel();\n+        });\n+        hBox.getChildren().addAll(buttonBrowse, buttonOpen, buttonCancel);\n+        vBox.getChildren().add(hBox);\n+\n+        return vBox;\n+    }\n+\n+    private void onCloseRequest() {\n+        textField.setText(\"\");\n+    }\n+\n+    private void onButtonBrowse() {\n+        if (fileChooser == null) {\n+            fileChooser = new FileChooser();\n+        }\n+\n+        File file = fileChooser.showOpenDialog(stage);\n+        if (file != null) {\n+            textField.setText(file.toURI().toString());\n+        }\n+    }\n+\n+    private void onButtonOpen() {\n+        if (textField.getText() != null && !textField.getText().isEmpty()) {\n+            FXMediaPlayer.onSourceChanged(textField.getText());\n+        }\n+        stage.close();\n+        textField.setText(\"\");\n+    }\n+\n+    private void onButtonCancel() {\n+        stage.close();\n+        textField.setText(\"\");\n+    }\n+}\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/menu\/MediaPlayerMenuOpenDialog.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -0,0 +1,159 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#mediaPlayerSpectrum .chart-bar {\n+    -fx-background-color: #69de01;\n+    -fx-background-insets: 0;\n+    -fx-background-radius: 0;\n+}\n+\n+#mediaPlayerSpectrum .data0.chart-bar { -fx-background-color: #69de01; }\n+#mediaPlayerSpectrum .data1.chart-bar { -fx-background-color: #69de01; }\n+#mediaPlayerSpectrum .data2.chart-bar { -fx-background-color: #69de01; }\n+#mediaPlayerSpectrum .data3.chart-bar { -fx-background-color: #69de01; }\n+#mediaPlayerSpectrum .data4.chart-bar { -fx-background-color: #69de01; }\n+#mediaPlayerSpectrum .data5.chart-bar { -fx-background-color: #69de01; }\n+#mediaPlayerSpectrum .data6.chart-bar { -fx-background-color: #69de01; }\n+#mediaPlayerSpectrum .data7.chart-bar { -fx-background-color: #69de01; }\n+#mediaPlayerSpectrum .data8.chart-bar { -fx-background-color: #75e101; }\n+#mediaPlayerSpectrum .data9.chart-bar { -fx-background-color: #75e101; }\n+#mediaPlayerSpectrum .data10.chart-bar { -fx-background-color: #75e101; }\n+#mediaPlayerSpectrum .data11.chart-bar { -fx-background-color: #75e101; }\n+#mediaPlayerSpectrum .data12.chart-bar { -fx-background-color: #75e101; }\n+#mediaPlayerSpectrum .data13.chart-bar { -fx-background-color: #75e101; }\n+#mediaPlayerSpectrum .data14.chart-bar { -fx-background-color: #75e101; }\n+#mediaPlayerSpectrum .data15.chart-bar { -fx-background-color: #75e101; }\n+#mediaPlayerSpectrum .data16.chart-bar { -fx-background-color: #86e701; }\n+#mediaPlayerSpectrum .data17.chart-bar { -fx-background-color: #86e701; }\n+#mediaPlayerSpectrum .data18.chart-bar { -fx-background-color: #86e701; }\n+#mediaPlayerSpectrum .data19.chart-bar { -fx-background-color: #86e701; }\n+#mediaPlayerSpectrum .data20.chart-bar { -fx-background-color: #86e701; }\n+#mediaPlayerSpectrum .data21.chart-bar { -fx-background-color: #86e701; }\n+#mediaPlayerSpectrum .data22.chart-bar { -fx-background-color: #86e701; }\n+#mediaPlayerSpectrum .data23.chart-bar { -fx-background-color: #86e701; }\n+#mediaPlayerSpectrum .data24.chart-bar { -fx-background-color: #9aee01; }\n+#mediaPlayerSpectrum .data25.chart-bar { -fx-background-color: #9aee01; }\n+#mediaPlayerSpectrum .data26.chart-bar { -fx-background-color: #9aee01; }\n+#mediaPlayerSpectrum .data27.chart-bar { -fx-background-color: #9aee01; }\n+#mediaPlayerSpectrum .data28.chart-bar { -fx-background-color: #9aee01; }\n+#mediaPlayerSpectrum .data29.chart-bar { -fx-background-color: #9aee01; }\n+#mediaPlayerSpectrum .data30.chart-bar { -fx-background-color: #9aee01; }\n+#mediaPlayerSpectrum .data31.chart-bar { -fx-background-color: #9aee01; }\n+#mediaPlayerSpectrum .data32.chart-bar { -fx-background-color: #b0f000; }\n+#mediaPlayerSpectrum .data33.chart-bar { -fx-background-color: #b0f000; }\n+#mediaPlayerSpectrum .data34.chart-bar { -fx-background-color: #b0f000; }\n+#mediaPlayerSpectrum .data35.chart-bar { -fx-background-color: #b0f000; }\n+#mediaPlayerSpectrum .data36.chart-bar { -fx-background-color: #b0f000; }\n+#mediaPlayerSpectrum .data37.chart-bar { -fx-background-color: #b0f000; }\n+#mediaPlayerSpectrum .data38.chart-bar { -fx-background-color: #b0f000; }\n+#mediaPlayerSpectrum .data39.chart-bar { -fx-background-color: #b0f000; }\n+#mediaPlayerSpectrum .data40.chart-bar { -fx-background-color: #c6f000; }\n+#mediaPlayerSpectrum .data41.chart-bar { -fx-background-color: #c6f000; }\n+#mediaPlayerSpectrum .data42.chart-bar { -fx-background-color: #c6f000; }\n+#mediaPlayerSpectrum .data43.chart-bar { -fx-background-color: #c6f000; }\n+#mediaPlayerSpectrum .data44.chart-bar { -fx-background-color: #c6f000; }\n+#mediaPlayerSpectrum .data45.chart-bar { -fx-background-color: #c6f000; }\n+#mediaPlayerSpectrum .data46.chart-bar { -fx-background-color: #c6f000; }\n+#mediaPlayerSpectrum .data47.chart-bar { -fx-background-color: #c6f000; }\n+#mediaPlayerSpectrum .data48.chart-bar { -fx-background-color: #dbf000; }\n+#mediaPlayerSpectrum .data49.chart-bar { -fx-background-color: #dbf000; }\n+#mediaPlayerSpectrum .data50.chart-bar { -fx-background-color: #dbf000; }\n+#mediaPlayerSpectrum .data51.chart-bar { -fx-background-color: #dbf000; }\n+#mediaPlayerSpectrum .data52.chart-bar { -fx-background-color: #dbf000; }\n+#mediaPlayerSpectrum .data53.chart-bar { -fx-background-color: #dbf000; }\n+#mediaPlayerSpectrum .data54.chart-bar { -fx-background-color: #dbf000; }\n+#mediaPlayerSpectrum .data55.chart-bar { -fx-background-color: #dbf000; }\n+#mediaPlayerSpectrum .data56.chart-bar { -fx-background-color: #edf000; }\n+#mediaPlayerSpectrum .data57.chart-bar { -fx-background-color: #edf000; }\n+#mediaPlayerSpectrum .data58.chart-bar { -fx-background-color: #edf000; }\n+#mediaPlayerSpectrum .data59.chart-bar { -fx-background-color: #edf000; }\n+#mediaPlayerSpectrum .data60.chart-bar { -fx-background-color: #edf000; }\n+#mediaPlayerSpectrum .data61.chart-bar { -fx-background-color: #edf000; }\n+#mediaPlayerSpectrum .data62.chart-bar { -fx-background-color: #edf000; }\n+#mediaPlayerSpectrum .data63.chart-bar { -fx-background-color: #edf000; }\n+#mediaPlayerSpectrum .data64.chart-bar { -fx-background-color: #fbf002; }\n+#mediaPlayerSpectrum .data65.chart-bar { -fx-background-color: #fbf002; }\n+#mediaPlayerSpectrum .data66.chart-bar { -fx-background-color: #fbf002; }\n+#mediaPlayerSpectrum .data67.chart-bar { -fx-background-color: #fbf002; }\n+#mediaPlayerSpectrum .data68.chart-bar { -fx-background-color: #fbf002; }\n+#mediaPlayerSpectrum .data69.chart-bar { -fx-background-color: #fbf002; }\n+#mediaPlayerSpectrum .data70.chart-bar { -fx-background-color: #fbf002; }\n+#mediaPlayerSpectrum .data71.chart-bar { -fx-background-color: #fbf002; }\n+#mediaPlayerSpectrum .data72.chart-bar { -fx-background-color: #ffe500; }\n+#mediaPlayerSpectrum .data73.chart-bar { -fx-background-color: #ffe500; }\n+#mediaPlayerSpectrum .data74.chart-bar { -fx-background-color: #ffe500; }\n+#mediaPlayerSpectrum .data75.chart-bar { -fx-background-color: #ffe500; }\n+#mediaPlayerSpectrum .data76.chart-bar { -fx-background-color: #ffe500; }\n+#mediaPlayerSpectrum .data77.chart-bar { -fx-background-color: #ffe500; }\n+#mediaPlayerSpectrum .data78.chart-bar { -fx-background-color: #ffe500; }\n+#mediaPlayerSpectrum .data79.chart-bar { -fx-background-color: #ffe500; }\n+#mediaPlayerSpectrum .data80.chart-bar { -fx-background-color: #ffca00; }\n+#mediaPlayerSpectrum .data81.chart-bar { -fx-background-color: #ffca00; }\n+#mediaPlayerSpectrum .data82.chart-bar { -fx-background-color: #ffca00; }\n+#mediaPlayerSpectrum .data83.chart-bar { -fx-background-color: #ffca00; }\n+#mediaPlayerSpectrum .data84.chart-bar { -fx-background-color: #ffca00; }\n+#mediaPlayerSpectrum .data85.chart-bar { -fx-background-color: #ffca00; }\n+#mediaPlayerSpectrum .data86.chart-bar { -fx-background-color: #ffca00; }\n+#mediaPlayerSpectrum .data87.chart-bar { -fx-background-color: #ffca00; }\n+#mediaPlayerSpectrum .data88.chart-bar { -fx-background-color: #ffa700; }\n+#mediaPlayerSpectrum .data89.chart-bar { -fx-background-color: #ffa700; }\n+#mediaPlayerSpectrum .data90.chart-bar { -fx-background-color: #ffa700; }\n+#mediaPlayerSpectrum .data91.chart-bar { -fx-background-color: #ffa700; }\n+#mediaPlayerSpectrum .data92.chart-bar { -fx-background-color: #ffa700; }\n+#mediaPlayerSpectrum .data93.chart-bar { -fx-background-color: #ffa700; }\n+#mediaPlayerSpectrum .data94.chart-bar { -fx-background-color: #ffa700; }\n+#mediaPlayerSpectrum .data95.chart-bar { -fx-background-color: #ffa700; }\n+#mediaPlayerSpectrum .data96.chart-bar { -fx-background-color: #ff8100; }\n+#mediaPlayerSpectrum .data97.chart-bar { -fx-background-color: #ff8100; }\n+#mediaPlayerSpectrum .data98.chart-bar { -fx-background-color: #ff8100; }\n+#mediaPlayerSpectrum .data99.chart-bar { -fx-background-color: #ff8100; }\n+#mediaPlayerSpectrum .data100.chart-bar { -fx-background-color: #ff8100; }\n+#mediaPlayerSpectrum .data101.chart-bar { -fx-background-color: #ff8100; }\n+#mediaPlayerSpectrum .data102.chart-bar { -fx-background-color: #ff8100; }\n+#mediaPlayerSpectrum .data103.chart-bar { -fx-background-color: #ff8100; }\n+#mediaPlayerSpectrum .data104.chart-bar { -fx-background-color: #ff5900; }\n+#mediaPlayerSpectrum .data105.chart-bar { -fx-background-color: #ff5900; }\n+#mediaPlayerSpectrum .data106.chart-bar { -fx-background-color: #ff5900; }\n+#mediaPlayerSpectrum .data107.chart-bar { -fx-background-color: #ff5900; }\n+#mediaPlayerSpectrum .data108.chart-bar { -fx-background-color: #ff5900; }\n+#mediaPlayerSpectrum .data109.chart-bar { -fx-background-color: #ff5900; }\n+#mediaPlayerSpectrum .data110.chart-bar { -fx-background-color: #ff5900; }\n+#mediaPlayerSpectrum .data111.chart-bar { -fx-background-color: #ff5900; }\n+#mediaPlayerSpectrum .data112.chart-bar { -fx-background-color: #ff3400; }\n+#mediaPlayerSpectrum .data113.chart-bar { -fx-background-color: #ff3400; }\n+#mediaPlayerSpectrum .data114.chart-bar { -fx-background-color: #ff3400; }\n+#mediaPlayerSpectrum .data115.chart-bar { -fx-background-color: #ff3400; }\n+#mediaPlayerSpectrum .data116.chart-bar { -fx-background-color: #ff3400; }\n+#mediaPlayerSpectrum .data117.chart-bar { -fx-background-color: #ff3400; }\n+#mediaPlayerSpectrum .data118.chart-bar { -fx-background-color: #ff3400; }\n+#mediaPlayerSpectrum .data119.chart-bar { -fx-background-color: #ff3400; }\n+#mediaPlayerSpectrum .data120.chart-bar { -fx-background-color: #ff1600; }\n+#mediaPlayerSpectrum .data121.chart-bar { -fx-background-color: #ff1600; }\n+#mediaPlayerSpectrum .data122.chart-bar { -fx-background-color: #ff1600; }\n+#mediaPlayerSpectrum .data123.chart-bar { -fx-background-color: #ff1600; }\n+#mediaPlayerSpectrum .data124.chart-bar { -fx-background-color: #ff1600; }\n+#mediaPlayerSpectrum .data125.chart-bar { -fx-background-color: #ff1600; }\n+#mediaPlayerSpectrum .data126.chart-bar { -fx-background-color: #ff1600; }\n+#mediaPlayerSpectrum .data127.chart-bar { -fx-background-color: #ff1600; }\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/spectrum.css","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"},{"patch":"@@ -0,0 +1,512 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package fxmediaplayer.states;\n+\n+import fxmediaplayer.FXMediaPlayerControlInterface;\n+import fxmediaplayer.FXMediaPlayerInterface;\n+import javafx.animation.FadeTransition;\n+import javafx.animation.SequentialTransition;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ReadOnlyIntegerProperty;\n+import javafx.beans.property.ReadOnlyObjectProperty;\n+import javafx.beans.value.ChangeListener;\n+import javafx.beans.value.ObservableValue;\n+import javafx.geometry.Pos;\n+import javafx.scene.control.ContentDisplay;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.media.MediaPlayer;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Rectangle;\n+import javafx.util.Duration;\n+\n+public class MediaPlayerStates implements FXMediaPlayerControlInterface {\n+\n+    private static final double WIDTH = 150;\n+    private static final float ON_OPACITY = 1.0f;\n+    private static final float OFF_OPACITY = 0.1f;\n+    private FXMediaPlayerInterface FXMediaPlayer = null;\n+    private VBox states = null;\n+    private Label labelInfo = null;\n+    private final String labelInfoText =\n+            \"Time: %s\\nVolume: %.2f\\nBalance: %.2f\\nRate: %.2f\\nPlay count: %d\";\n+    private boolean infoOn = false;\n+    private Duration time = Duration.ZERO;\n+    private double volume = 1.0;\n+    private double balance = 0.0;\n+    private double rate = 1.0;\n+    private int count = 0;\n+    private Label labelReady = null;\n+    private Label labelPlaying = null;\n+    private Label labelPaused = null;\n+    private Label labelStopped = null;\n+    private Label labelStalled = null;\n+    private Label labelDisposed = null;\n+    private Label labelHalted = null;\n+    private Label labelEndOfMedia = null;\n+    private Label labelRepeat = null;\n+    private Label labelError = null;\n+    private Label labelCurrentState = null;\n+    private ProgressIndicator bufferIndicator = null;\n+    private double mediaDuration = 0.0;\n+    private ChangeListener<Duration> currentTimePropertyListener = null;\n+    private InvalidationListener volumePropertyListener = null;\n+    private InvalidationListener balancePropertyListener = null;\n+    private InvalidationListener ratePropertyListener = null;\n+    private InvalidationListener currentCountPropertyListener = null;\n+    private InvalidationListener statusPropertyListener = null;\n+    private Runnable onReadyRunnable = null;\n+    private Runnable onPlayingRunnable = null;\n+    private Runnable onPausedRunnable = null;\n+    private Runnable onStoppedRunnable = null;\n+    private Runnable onStalledRunnable = null;\n+    private Runnable onHaltedRunnable = null;\n+    private Runnable onEndOfMediaRunnable = null;\n+    private Runnable onRepeatRunnable = null;\n+    private Runnable onErrorRunnable = null;\n+    private InvalidationListener bufferProgressTimeProperty = null;\n+\n+    public MediaPlayerStates(FXMediaPlayerInterface FXMediaPlayer) {\n+        this.FXMediaPlayer = FXMediaPlayer;\n+    }\n+\n+    public VBox getStates() {\n+        if (states == null) {\n+            states = new VBox();\n+\n+            states.setMinWidth(WIDTH);\n+            states.setMaxWidth(WIDTH);\n+            states.setPrefWidth(WIDTH);\n+            states.setAlignment(Pos.TOP_CENTER);\n+\n+            labelInfo = createInfoLabel(getInfoText(), Color.LIGHTGRAY, 80);\n+            states.getChildren().add(labelInfo);\n+\n+            labelReady = createStateLabel(MediaPlayer.Status.READY.toString(),\n+                    Color.LIGHTGRAY);\n+            states.getChildren().add(labelReady);\n+            labelPlaying = createStateLabel(MediaPlayer.Status.PLAYING.toString(),\n+                    Color.LIGHTGRAY);\n+            states.getChildren().add(labelPlaying);\n+            labelPaused = createStateLabel(MediaPlayer.Status.PAUSED.toString(),\n+                    Color.LIGHTGRAY);\n+            states.getChildren().add(labelPaused);\n+            labelStopped = createStateLabel(MediaPlayer.Status.STOPPED.toString(),\n+                    Color.LIGHTGRAY);\n+            states.getChildren().add(labelStopped);\n+            labelStalled = createStateLabel(MediaPlayer.Status.STALLED.toString(),\n+                    Color.LIGHTGRAY);\n+            states.getChildren().add(labelStalled);\n+            labelDisposed = createStateLabel(MediaPlayer.Status.DISPOSED.toString(),\n+                    Color.LIGHTGRAY);\n+            states.getChildren().add(labelDisposed);\n+            labelHalted = createStateLabel(MediaPlayer.Status.HALTED.toString(),\n+                    Color.RED);\n+            states.getChildren().add(labelHalted);\n+            labelEndOfMedia = createStateLabel(\"End Of Media\",\n+                    Color.LIGHTGRAY);\n+            states.getChildren().add(labelEndOfMedia);\n+            labelRepeat = createStateLabel(\"Repeat\",\n+                    Color.GRAY);\n+            states.getChildren().add(labelRepeat);\n+            labelError = createStateLabel(\"Error\",\n+                    Color.RED);\n+            states.getChildren().add(labelError);\n+\n+            bufferIndicator = new ProgressIndicator();\n+            bufferIndicator.setPrefSize(50, 50);\n+            bufferIndicator.setProgress(0.0);\n+            states.getChildren().add(bufferIndicator);\n+\n+            createListeners();\n+            addListeners();\n+        }\n+\n+        return states;\n+    }\n+\n+    @Override\n+    public void onMediaPlayerChanged(MediaPlayer oldMediaPlayer) {\n+        if (oldMediaPlayer != null) {\n+            removeListeners(oldMediaPlayer);\n+        }\n+\n+        addListeners();\n+    }\n+\n+    private void createListeners() {\n+        currentTimePropertyListener =\n+                (ObservableValue<? extends Duration> ov, Duration o, Duration n) -> {\n+            onCurrentTime(n);\n+        };\n+\n+        volumePropertyListener = (Observable o) -> {\n+            onVolume(o);\n+        };\n+\n+        balancePropertyListener = (Observable o) -> {\n+            onBalance(o);\n+        };\n+\n+        ratePropertyListener = (Observable o) -> {\n+            onRate(o);\n+        };\n+\n+        currentCountPropertyListener = (Observable o) -> {\n+            onCurrentCount(o);\n+        };\n+\n+        statusPropertyListener = (Observable o) -> {\n+            onStatus(o);\n+        };\n+\n+        onReadyRunnable = () -> {\n+            onReady();\n+        };\n+\n+        onPlayingRunnable = () -> {\n+            onPlaying();\n+        };\n+\n+        onPausedRunnable = () -> {\n+            onPaused();\n+        };\n+\n+        onStoppedRunnable = () -> {\n+            onStopped();\n+        };\n+\n+        onStalledRunnable = () -> {\n+            onStalled();\n+        };\n+\n+        onHaltedRunnable = () -> {\n+            onHalted();\n+        };\n+\n+        onEndOfMediaRunnable = () -> {\n+            onEndOfMedia();\n+        };\n+\n+        onRepeatRunnable = () -> {\n+            onRepeat();\n+        };\n+\n+        onErrorRunnable = () -> {\n+            onError();\n+        };\n+\n+        bufferProgressTimeProperty = (Observable o) -> {\n+            onBufferProgressTime(o);\n+        };\n+    }\n+\n+    private void addListeners() {\n+        if (FXMediaPlayer.getMediaPlayer() != null) {\n+            FXMediaPlayer.getMediaPlayer()\n+                    .currentTimeProperty().addListener(currentTimePropertyListener);\n+            FXMediaPlayer.getMediaPlayer()\n+                    .volumeProperty().addListener(volumePropertyListener);\n+            FXMediaPlayer.getMediaPlayer()\n+                    .balanceProperty().addListener(balancePropertyListener);\n+            FXMediaPlayer.getMediaPlayer()\n+                    .rateProperty().addListener(ratePropertyListener);\n+            FXMediaPlayer.getMediaPlayer()\n+                    .currentCountProperty().addListener(currentCountPropertyListener);\n+            FXMediaPlayer.getMediaPlayer()\n+                    .statusProperty().addListener(statusPropertyListener);\n+            FXMediaPlayer.getMediaPlayer()\n+                    .setOnReady(onReadyRunnable);\n+            FXMediaPlayer.getMediaPlayer()\n+                    .setOnPlaying(onPlayingRunnable);\n+            FXMediaPlayer.getMediaPlayer()\n+                    .setOnPaused(onPausedRunnable);\n+            FXMediaPlayer.getMediaPlayer()\n+                    .setOnStopped(onStoppedRunnable);\n+            FXMediaPlayer.getMediaPlayer()\n+                    .setOnStalled(onStalledRunnable);\n+            FXMediaPlayer.getMediaPlayer()\n+                    .setOnHalted(onHaltedRunnable);\n+            FXMediaPlayer.getMediaPlayer()\n+                    .setOnEndOfMedia(onEndOfMediaRunnable);\n+            FXMediaPlayer.getMediaPlayer()\n+                    .setOnRepeat(onRepeatRunnable);\n+            FXMediaPlayer.getMediaPlayer()\n+                    .setOnError(onErrorRunnable);\n+            FXMediaPlayer.getMediaPlayer()\n+                    .bufferProgressTimeProperty().addListener(bufferProgressTimeProperty);\n+        }\n+    }\n+\n+    private void removeListeners(MediaPlayer mediaPlayer) {\n+        mediaPlayer.currentTimeProperty()\n+                .removeListener(currentTimePropertyListener);\n+        mediaPlayer.volumeProperty()\n+                .removeListener(volumePropertyListener);\n+        mediaPlayer.balanceProperty()\n+                .removeListener(balancePropertyListener);\n+        mediaPlayer.rateProperty()\n+                .removeListener(ratePropertyListener);\n+        mediaPlayer.currentCountProperty()\n+                .removeListener(currentCountPropertyListener);\n+        mediaPlayer.statusProperty()\n+                .removeListener(statusPropertyListener);\n+        mediaPlayer.bufferProgressTimeProperty()\n+                .removeListener(bufferProgressTimeProperty);\n+        mediaPlayer.setOnReady(null);\n+        mediaPlayer.setOnPlaying(null);\n+        mediaPlayer.setOnPaused(null);\n+        mediaPlayer.setOnStopped(null);\n+        mediaPlayer.setOnStalled(null);\n+        mediaPlayer.setOnHalted(null);\n+        mediaPlayer.setOnEndOfMedia(null);\n+        mediaPlayer.setOnRepeat(null);\n+        mediaPlayer.setOnError(null);\n+    }\n+\n+    private void onCurrentTime(Duration newValue) {\n+        time = newValue;\n+        Platform.runLater(() -> {\n+            labelInfo.setText(getInfoText());\n+        });\n+    }\n+\n+    private void onVolume(Observable o) {\n+        DoubleProperty prop = (DoubleProperty) o;\n+        volume = prop.getValue();\n+        labelInfo.setText(getInfoText());\n+    }\n+\n+    private void onBalance(Observable o) {\n+        DoubleProperty prop = (DoubleProperty) o;\n+        balance = prop.getValue();\n+        labelInfo.setText(getInfoText());\n+    }\n+\n+    private void onRate(Observable o) {\n+        DoubleProperty prop = (DoubleProperty) o;\n+        rate = prop.getValue();\n+        labelInfo.setText(getInfoText());\n+    }\n+\n+    private void onCurrentCount(Observable o) {\n+        try {\n+            ReadOnlyIntegerProperty prop = (ReadOnlyIntegerProperty) o;\n+            count = prop.getValue();\n+            labelInfo.setText(getInfoText());\n+        } catch (Exception e) {\n+            System.err.println(e.toString());\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private void onStatus(Observable o) {\n+        try {\n+            ReadOnlyObjectProperty<MediaPlayer.Status> prop =\n+                    (ReadOnlyObjectProperty<MediaPlayer.Status>) o;\n+            MediaPlayer.Status status = prop.getValue();\n+            if (status == MediaPlayer.Status.DISPOSED) {\n+                onDisposed();\n+            }\n+        } catch (Exception e) {\n+            System.err.println(e.toString());\n+        }\n+    }\n+\n+    private void onReady() {\n+        switchState(labelReady);\n+        infoON(labelInfo);\n+    }\n+\n+    private void onPlaying() {\n+        switchState(labelPlaying);\n+    }\n+\n+    private void onPaused() {\n+        switchState(labelPaused);\n+    }\n+\n+    private void onStopped() {\n+        switchState(labelStopped);\n+    }\n+\n+    private void onStalled() {\n+        switchState(labelStalled);\n+    }\n+\n+    private void onDisposed() {\n+        switchState(labelDisposed);\n+        infoOFF(labelInfo);\n+    }\n+\n+    private void onHalted() {\n+        switchState(labelHalted);\n+        infoOFF(labelInfo);\n+    }\n+\n+    private void onEndOfMedia() {\n+        stateONOFF(labelEndOfMedia);\n+    }\n+\n+    private void onRepeat() {\n+        stateONOFF(labelRepeat);\n+    }\n+\n+    private void onError() {\n+        System.err.println(FXMediaPlayer.getMediaPlayer().getError().toString());\n+        switchState(labelError);\n+        infoOFF(labelInfo);\n+    }\n+\n+    private void onBufferProgressTime(Observable o) {\n+        if (mediaDuration == 0.0) {\n+            Duration duration = FXMediaPlayer.getMediaPlayer().getMedia().getDuration();\n+            if (duration != null && duration != Duration.UNKNOWN) {\n+                mediaDuration = duration.toMillis();\n+            }\n+        }\n+\n+        if (mediaDuration != 0.0) {\n+            ReadOnlyObjectProperty prop = (ReadOnlyObjectProperty) o;\n+            double bufferProgressTime = ((Duration) prop.getValue()).toMillis();\n+            bufferIndicator.setProgress(bufferProgressTime \/ mediaDuration);\n+        }\n+    }\n+\n+    private Label createInfoLabel(String state, Color color, int height) {\n+        Rectangle rect = new Rectangle(0, 0, 100, height);\n+        rect.setArcHeight(20);\n+        rect.setArcWidth(20);\n+        rect.setFill(color);\n+\n+        Label label = new Label(state, rect);\n+        label.setContentDisplay(ContentDisplay.CENTER);\n+        label.setOpacity(OFF_OPACITY);\n+\n+        return label;\n+    }\n+\n+    private String getInfoText() {\n+        return String.format(labelInfoText, getStringTime(),\n+                volume, balance, rate, count);\n+    }\n+\n+    private String getStringTime() {\n+        int intElapsed = (int) Math.floor(time.toSeconds());\n+        int elapsedHours = intElapsed \/ (60 * 60);\n+        int elapsedMinutes = (intElapsed - elapsedHours * 60 * 60) \/ 60;\n+        int elapsedSeconds = intElapsed - elapsedHours * 60 * 60 - elapsedMinutes * 60;\n+\n+        if (elapsedHours > 0) {\n+            return String.format(\"%d:%02d:%02d\",\n+                    elapsedHours, elapsedMinutes, elapsedSeconds);\n+        } else {\n+            return String.format(\"%02d:%02d\",\n+                    elapsedMinutes, elapsedSeconds);\n+        }\n+    }\n+\n+    private void infoON(Label labelInfo) {\n+        if (infoOn) {\n+            return;\n+        }\n+\n+        FadeTransition ft = new FadeTransition(Duration.millis(500), labelInfo);\n+        ft.setFromValue(OFF_OPACITY);\n+        ft.setToValue(ON_OPACITY);\n+        ft.play();\n+\n+        bufferIndicator.setDisable(false);\n+\n+        infoOn = true;\n+    }\n+\n+    private void infoOFF(Label labelInfo) {\n+        if (!infoOn) {\n+            return;\n+        }\n+\n+        FadeTransition ft = new FadeTransition(Duration.millis(500), labelInfo);\n+        ft.setFromValue(ON_OPACITY);\n+        ft.setToValue(OFF_OPACITY);\n+        ft.play();\n+\n+        bufferIndicator.setDisable(true);\n+\n+        infoOn = false;\n+    }\n+\n+    private Label createStateLabel(String state, Color color) {\n+        Rectangle rect = new Rectangle(0, 0, 100, 30);\n+        rect.setArcHeight(20);\n+        rect.setArcWidth(20);\n+        rect.setFill(color);\n+\n+        Label label = new Label(state, rect);\n+        label.setContentDisplay(ContentDisplay.CENTER);\n+        label.setOpacity(OFF_OPACITY);\n+\n+        return label;\n+    }\n+\n+    private void switchState(Label labelState) {\n+        if (labelCurrentState != null) {\n+            stateOFF(labelCurrentState);\n+        }\n+        stateON(labelState);\n+        labelCurrentState = labelState;\n+    }\n+\n+    private void stateON(Label labelState) {\n+        FadeTransition ft = new FadeTransition(Duration.millis(500), labelState);\n+        ft.setFromValue(OFF_OPACITY);\n+        ft.setToValue(ON_OPACITY);\n+        ft.play();\n+    }\n+\n+    private void stateOFF(Label labelState) {\n+        FadeTransition ft = new FadeTransition(Duration.millis(500), labelState);\n+        ft.setFromValue(ON_OPACITY);\n+        ft.setToValue(OFF_OPACITY);\n+        ft.play();\n+    }\n+\n+    private void stateONOFF(Label labelState) {\n+        SequentialTransition st = new SequentialTransition();\n+        FadeTransition ftON = new FadeTransition(Duration.millis(500), labelState);\n+        ftON.setFromValue(OFF_OPACITY);\n+        ftON.setToValue(ON_OPACITY);\n+        FadeTransition ftOFF = new FadeTransition(Duration.millis(500), labelState);\n+        ftOFF.setFromValue(ON_OPACITY);\n+        ftOFF.setToValue(OFF_OPACITY);\n+        st.getChildren().addAll(ftON, ftOFF);\n+        st.play();\n+    }\n+}\n","filename":"tests\/manual\/media\/FXMediaPlayer\/src\/fxmediaplayer\/states\/MediaPlayerStates.java","additions":512,"deletions":0,"binary":false,"changes":512,"status":"added"}]}