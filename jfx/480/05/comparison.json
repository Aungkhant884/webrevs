{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,0 @@\n-\n-import java.util.ArrayList;\n@@ -204,24 +202,0 @@\n-\n-    \/\/ Given a listen of removed elements, we create the minimal number of changes by coalescing elements that are\n-    \/\/ adjacent\n-    static void reducingChange(MultipleSelectionModelBase<?>.SelectedIndicesList selectedIndices, List<Integer> removed) {\n-        if (removed.isEmpty()) return;\n-\n-        int startPos = 0;\n-        int endPos = 1;\n-        boolean firedOnce = false;\n-        while (endPos < removed.size()) {\n-            if (removed.get(startPos) == removed.get(endPos) - 1) {\n-                endPos++;\n-                continue;\n-            }\n-            selectedIndices._nextRemove(selectedIndices.indexOf(removed.get(startPos)), removed.subList(startPos, endPos));\n-            startPos = endPos;\n-            endPos = startPos + 1;\n-            firedOnce = true;\n-        }\n-\n-        if (!firedOnce) {\n-            selectedIndices._nextRemove(selectedIndices.indexOf(removed.get(0)), removed);\n-        }\n-    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ControlUtils.java","additions":1,"deletions":27,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -802,0 +802,1 @@\n+            int indicesIndex = indexOf(index);\n@@ -804,1 +805,1 @@\n-            _nextRemove(index, index);\n+            _nextRemove(indicesIndex, index);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/MultipleSelectionModelBase.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2554,1 +2554,3 @@\n-                        ControlUtils.reducingChange(selectedIndices, removed);\n+                        if (!removed.isEmpty()) {\n+                            selectedIndices._nextRemove(selectedIndices.indexOf(removed.get(0)), removed);\n+                        }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableView.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1378,1 +1378,3 @@\n-                    ControlUtils.reducingChange(selectedIndices, removed);\n+                    if (!removed.isEmpty()) {\n+                        selectedIndices._nextRemove(selectedIndices.indexOf(removed.get(0)), removed);\n+                    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeView.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -345,0 +345,12 @@\n+    @Test public void selectedIndicesListenerReportsCorrectIndexOnClearSelection() {\n+        List<String> changes = new ArrayList<>();\n+        model.setSelectionMode(SelectionMode.MULTIPLE);\n+        model.select(1);\n+        model.select(5);\n+        model.getSelectedIndices().addListener((ListChangeListener<Integer>) c -> changes.add(c.toString()));\n+        model.clearSelection(5);\n+\n+        assertEquals(1, changes.size());\n+        assertEquals(\"{ [5] removed at 1 }\", changes.get(0));\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/MultipleSelectionModelImplTest.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -3684,0 +3684,25 @@\n+\n+    @Test public void testRemovedSelectedItemsWhenBranchIsCollapsed() {\n+        TreeItem<String> root = new TreeItem<>(\"foo\");\n+        root.getChildren().add(new TreeItem<>(\"bar\"));\n+        root.getChildren().add(new TreeItem<>(\"baz\"));\n+        root.getChildren().add(new TreeItem<>(\"qux\"));\n+        root.setExpanded(true);\n+\n+        List<TreeItem<String>> removed = new ArrayList<>();\n+        TreeView<String> treeView = new TreeView<>(root);\n+        treeView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);\n+        treeView.getSelectionModel().getSelectedItems().addListener((ListChangeListener<? super TreeItem<String>>) c -> {\n+            while (c.next()) {\n+                removed.addAll(new ArrayList<>(c.getRemoved()));\n+            }\n+        });\n+\n+        treeView.getSelectionModel().selectAll();\n+        root.setExpanded(false);\n+\n+        assertEquals(3, removed.size());\n+        assertEquals(\"bar\", removed.get(0).getValue());\n+        assertEquals(\"baz\", removed.get(1).getValue());\n+        assertEquals(\"qux\", removed.get(2).getValue());\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeViewTest.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}