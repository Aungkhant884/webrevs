{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -162,0 +162,5 @@\n+    public void checkN(int n) {\n+        assertFalse(tooManyCalls);\n+        assertEquals(n, calls.size());\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/MockListObserver.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import com.sun.javafx.scene.control.ReadOnlyUnbackedObservableList;\n@@ -35,2 +36,0 @@\n-\n-import java.util.ArrayList;\n@@ -207,1 +206,1 @@\n-    static void reducingChange(MultipleSelectionModelBase<?>.SelectedIndicesList selectedIndices, List<Integer> removed) {\n+    static void reducingChange(ReadOnlyUnbackedObservableList<Integer> selectedIndices, List<Integer> removed) {\n@@ -211,6 +210,5 @@\n-        int endPos = 1;\n-        boolean firedOnce = false;\n-        while (endPos < removed.size()) {\n-            if (removed.get(startPos) == removed.get(endPos) - 1) {\n-                endPos++;\n-                continue;\n+        int totalRemoved = 0;\n+\n+        for (int endPos = 0, max = removed.size(); endPos < max; ++endPos) {\n+            while (endPos < max - 1 && removed.get(endPos) == removed.get(endPos + 1) - 1) {\n+                ++endPos;\n@@ -218,5 +216,0 @@\n-            selectedIndices._nextRemove(selectedIndices.indexOf(removed.get(startPos)), removed.subList(startPos, endPos));\n-            startPos = endPos;\n-            endPos = startPos + 1;\n-            firedOnce = true;\n-        }\n@@ -224,2 +217,6 @@\n-        if (!firedOnce) {\n-            selectedIndices._nextRemove(selectedIndices.indexOf(removed.get(0)), removed);\n+            selectedIndices._nextRemove(\n+                selectedIndices.indexOf(removed.get(startPos)) - totalRemoved,\n+                removed.subList(startPos, endPos + 1));\n+\n+            totalRemoved += endPos - startPos + 1;\n+            startPos = endPos + 1;\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ControlUtils.java","additions":14,"deletions":17,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.scene.control;\n+\n+import com.sun.javafx.scene.control.ReadOnlyUnbackedObservableList;\n+import java.util.List;\n+\n+public class ControlUtilsShim {\n+\n+    public static void reducingChange(ReadOnlyUnbackedObservableList<Integer> selectedIndices, List<Integer> removed) {\n+        ControlUtils.reducingChange(selectedIndices, removed);\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/shims\/java\/javafx\/scene\/control\/ControlUtilsShim.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control;\n+\n+import com.sun.javafx.scene.control.ReadOnlyUnbackedObservableList;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.ControlUtilsShim;\n+import org.junit.Test;\n+import test.javafx.collections.MockListObserver;\n+import java.util.List;\n+\n+public class ControlUtilsTest {\n+\n+    @Test\n+    public void reducingChange_removeFirstIndexInSingleChange() {\n+        TestResult result = reducingChangeTest(List.of(1, 2, 3, 4, 5), List.of(1));\n+        result.observer.check1();\n+        result.observer.checkAddRemove(0, result.list, List.of(1), 0, 0);\n+    }\n+\n+    @Test\n+    public void reducingChange_removeMiddleIndexInSingleChange() {\n+        TestResult result = reducingChangeTest(List.of(1, 2, 3, 4, 5), List.of(3));\n+        result.observer.check1();\n+        result.observer.checkAddRemove(0, result.list, List.of(3), 2, 2);\n+    }\n+\n+    @Test\n+    public void reducingChange_removeLastIndexInSingleChange() {\n+        TestResult result = reducingChangeTest(List.of(1, 2, 3, 4, 5), List.of(5));\n+        result.observer.check1();\n+        result.observer.checkAddRemove(0, result.list, List.of(5), 4, 4);\n+    }\n+\n+    @Test\n+    public void reducingChange_removeAllIndicesInSingleChange() {\n+        TestResult result = reducingChangeTest(List.of(1, 2, 3, 4, 5), List.of(1, 2, 3, 4, 5));\n+        result.observer.check1();\n+        result.observer.checkAddRemove(0, result.list, List.of(1, 2, 3, 4, 5), 0, 0);\n+    }\n+\n+    @Test\n+    public void reducingChange_removeInteriorIndicesInSingleChange() {\n+        TestResult result = reducingChangeTest(List.of(1, 2, 3, 4, 5), List.of(2, 3, 4));\n+        result.observer.check1();\n+        result.observer.checkAddRemove(0, result.list, List.of(2, 3, 4), 1, 1);\n+    }\n+\n+    @Test\n+    public void reducingChange_removeFirstAndLastIndexInTwoChanges() {\n+        TestResult result = reducingChangeTest(List.of(1, 2, 3, 4, 5), List.of(1, 5));\n+        result.observer.checkN(2);\n+        result.observer.checkAddRemove(0, result.list, List.of(1), 0, 0);\n+        result.observer.checkAddRemove(1, result.list, List.of(5), 3, 3);\n+    }\n+\n+    @Test\n+    public void reducingChange_removeDisjointIndicesInTwoChanges() {\n+        TestResult result = reducingChangeTest(List.of(1, 2, 3, 4, 5, 6), List.of(1, 2, 4, 5, 6));\n+        result.observer.checkN(2);\n+        result.observer.checkAddRemove(0, result.list, List.of(1, 2), 0, 0);\n+        result.observer.checkAddRemove(1, result.list, List.of(4, 5, 6), 1, 1);\n+    }\n+\n+    @Test\n+    public void reducingChange_removeDisjointIndicesInThreeChanges() {\n+        TestResult result = reducingChangeTest(List.of(1, 2, 3, 4, 5, 6, 7, 8), List.of(1, 2, 4, 5, 7, 8));\n+        result.observer.checkN(3);\n+        result.observer.checkAddRemove(0, result.list, List.of(1, 2), 0, 0);\n+        result.observer.checkAddRemove(1, result.list, List.of(4, 5), 1, 1);\n+        result.observer.checkAddRemove(2, result.list, List.of(7, 8), 2, 2);\n+    }\n+\n+    private TestResult reducingChangeTest(List<Integer> indices, List<Integer> removed) {\n+        ReadOnlyUnbackedObservableList<Integer> list = new ReadOnlyUnbackedObservableList<>() {\n+            @Override\n+            public Integer get(int i) {\n+                return indices.get(i);\n+            }\n+\n+            @Override\n+            public int size() {\n+                return indices.size();\n+            }\n+        };\n+\n+        MockListObserver<Integer> observer = new MockListObserver<>();\n+        list.addListener(observer);\n+        list._beginChange();\n+        ControlUtilsShim.reducingChange(list, removed);\n+        list._endChange();\n+\n+        return new TestResult(list, observer);\n+    }\n+\n+    private static class TestResult {\n+        final ObservableList<Integer> list;\n+        final MockListObserver<Integer> observer;\n+        TestResult(ObservableList<Integer> list, MockListObserver<Integer> observer) {\n+            this.list = list;\n+            this.observer = observer;\n+        }\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ControlUtilsTest.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"}]}