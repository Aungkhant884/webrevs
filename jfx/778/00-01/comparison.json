{"files":[{"patch":"@@ -385,2 +385,1 @@\n-        \/\/ Update the screen for each window to match the new instance,\n-        \/\/ also when such screen was disposed and a new one is available.\n+        \/\/ Update the screen for each window to match the new instance.\n@@ -392,1 +391,1 @@\n-            long oldNativeScreen = w.getScreen().getNativeScreen();\n+            Screen oldScreen = w.getScreen();\n@@ -394,1 +393,1 @@\n-                if (oldNativeScreen == newScreen.getNativeScreen() || oldNativeScreen == 0) {\n+                if (oldScreen.getNativeScreen() == newScreen.getNativeScreen()) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/Screen.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -267,0 +267,5 @@\n+    @Override\n+    protected void notifyMoveToAnotherScreen(Screen screen) {\n+        super.notifyMoveToAnotherScreen(screen);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/monocle\/MonocleWindow.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -176,9 +176,7 @@\n-    static void repaintFromNative () {\n-        Platform.runLater(new Runnable () {\n-\n-            @Override\n-            public void run() {\n-                Screen.notifySettingsChanged();\n-                MonocleWindow focusedWindow = instance.getFocusedWindow();\n-                if (focusedWindow != null) {\n-                    focusedWindow.setFullScreen(true);\n+    static void repaintFromNative(Screen screen) {\n+        Platform.runLater(() -> {\n+            Screen.notifySettingsChanged();\n+            MonocleWindow focusedWindow = instance.getFocusedWindow();\n+            if (focusedWindow != null) {\n+                if (screen != null && screen.getNativeScreen() != focusedWindow.getScreen().getNativeScreen()) {\n+                    focusedWindow.notifyMoveToAnotherScreen(screen);\n@@ -186,2 +184,1 @@\n-                instance.repaintAll();\n-                Toolkit.getToolkit().requestNextPulse();\n+                focusedWindow.setFullScreen(true);\n@@ -189,0 +186,2 @@\n+            instance.repaintAll();\n+            Toolkit.getToolkit().requestNextPulse();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/monocle\/MonocleWindowManager.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+static jclass jScreenClass;\n@@ -41,0 +42,1 @@\n+static jmethodID screen_init;\n@@ -54,0 +56,1 @@\n+    jScreenClass = (*env)->NewGlobalRef(env, (*env)->FindClass(env, \"com\/sun\/glass\/ui\/Screen\"));\n@@ -56,1 +59,1 @@\n-                                            \"()V\");\n+                                            \"(Lcom\/sun\/glass\/ui\/Screen;)V\");\n@@ -64,0 +67,1 @@\n+    screen_init = (*env)->GetMethodID(env, jScreenClass,\"<init>\", \"(JIIIIIIIIIIIIIIIFFFF)V\");\n@@ -156,1 +160,13 @@\n-    (*javaEnv)->CallStaticVoidMethod(javaEnv, jMonocleWindowManagerClass, monocle_repaintAll);\n+    if (androidWindow == NULL) {\n+        GLASS_LOG_WARNING(\"we can't do this yet, no androidWindow\\n\");\n+        return;\n+    }\n+    int32_t width = ANativeWindow_getWidth(androidWindow);\n+    int32_t height = ANativeWindow_getHeight(androidWindow);\n+    jobject screen = (*javaEnv)->NewObject(javaEnv, jScreenClass, screen_init,\n+        (jlong) androidWindow, 24,\n+        0, 0, (jint) width, (jint) height,\n+        0, 0, (jint) width, (jint) height,\n+        0, 0, (jint) width, (jint) height,\n+        100, 100, (jfloat) 1, (jfloat) 1, androidDensity, androidDensity);\n+    (*javaEnv)->CallStaticVoidMethod(javaEnv, jMonocleWindowManagerClass, monocle_repaintAll, screen);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/monocle\/android\/nativeBridge.c","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"}]}