{"files":[{"patch":"@@ -0,0 +1,74 @@\n+# PasswordField Behavior\n+\n+## Key Binginds\n+\n+|Key Combination|Platform|Function|\n+|---------------|--------|--------|\n+|ctrl-BACK_SLASH|linux, win|deselect|\n+|BACKSPACE| |delete previous char|\n+|alt-BACKSPACE|mac|**disabled for security reasons**|\n+|ctrl-BACKSPACE|linux, win|**disabled for security reasons**|\n+|shift-BACKSPACE| |delete previous char|\n+|shortcut-BACKSPACE|mac|delete from line start|\n+|COPY| |copy|\n+|CUT| |cut|\n+|DELETE| |delete next char|\n+|alt-DELETE|mac|**disabled for security reasons**|\n+|ctrl-DELETE|linux, win|**disabled for security reasons**|\n+|ctrl-shift-DIGIT9| |toggle the virtual keyboard (if supported)|\n+|DOWN| |move to document end|\n+|shift-DOWN| |select to document end|\n+|END| |move to document end|\n+|shift-END|mac|extend selection to document end|\n+|shift-END|linux, win|select document end|\n+|shift-shortcut-END| |select to document end|\n+|shortcut-END| |move to document end|\n+|ENTER| |fire event|\n+|ESCAPE| |cancel edit (forwarded to the parent container)|\n+|HOME| |move to document start|\n+|shift-HOME|mac|extend selection to document start|\n+|shift-HOME|linux, win|select to document start|\n+|shift-shortcut-HOME| |select to document start|\n+|shortcut-HOME| |move to document start|\n+|shift-INSERT| |paste|\n+|shortcut-INSERT| |copy|\n+|LEFT| |previous character|\n+|alt-LEFT| |**disabled for security reasons**|\n+|alt-shift-LEFT|mac|**disabled for security reasons**|\n+|ctrl-LEFT|linux, win|**disabled for security reasons**|\n+|ctrl-shift-LEFT|linux, win|**disabled for security reasons**|\n+|shift-LEFT| |select left|\n+|shift-shortcut-LEFT|mac|select to document start|\n+|shortcut-LEFT|mac|move to document start|\n+|PASTE| |paste|\n+|RIGHT| |next character|\n+|alt-RIGHT|mac|**disabled for security reasons**|\n+|alt-shift-RIGHT|mac|**disabled for security reasons**|\n+|ctrl-RIGHT|linux, win|**disabled for security reasons**|\n+|ctrl-shift-RIGHT|linux, win|**disabled for security reasons**|\n+|shift-RIGHT| |select right|\n+|shift-shortcut-RIGHT|mac|select to document end|\n+|shortcut-RIGHT|mac|move to document end|\n+|TAB| |focus next|\n+|ctrl-TAB| |focus next|\n+|ctrl-shift-TAB| |focus previous|\n+|shift-TAB| |focus previous|\n+|UP| |move to document start|\n+|shift-UP| |select to document start|\n+| | |  |\n+|shortcut-A| |select all|\n+|shortcut-C| |copy|\n+|ctrl-H|linux, win|delete previous char|\n+|shortcut-V| |paste|\n+|shortcut-X| |cut|\n+|ctrl-Y|win|redo|\n+|ctrl-shift-Z|linux|redo|\n+|shift-shortcut-Z|mac|redo|\n+|shortcut-Z| |undo|\n+\n+\n+Notes:\n+\n+1. Base class mappings modified by the PasswordField class are highlighted in bold.\n+2. On Mac, alt is represented by the Option key.\n+3. On Mac, shortcut is represented by the Command key.\n\\ No newline at end of file\n","filename":"doc-files\/behavior\/PasswordField.md","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,88 @@\n+# TextArea Behavior\n+\n+## Key Binginds\n+\n+|Key Combination|Platform|Function|\n+|---------------|--------|--------|\n+|ctrl-BACK_SLASH|linux, win|deselect|\n+|BACKSPACE| |delete previous char|\n+|alt-BACKSPACE|mac|delete previous word|\n+|ctrl-BACKSPACE|linux, win|delete previous word|\n+|shift-BACKSPACE| |delete previous char|\n+|shortcut-BACKSPACE|mac|delete from line start|\n+|COPY| |copy|\n+|CUT| |cut|\n+|DELETE| |delete next char|\n+|alt-DELETE|mac|delete next word|\n+|ctrl-DELETE|linux, win|delete next word|\n+|ctrl-shift-DIGIT9| |toggle the virtual keyboard (if supported)|\n+|DOWN| |**line down**|\n+|alt-DOWN|mac|**paragraph down**|\n+|alt-shift-DOWN|mac|**select paragraph down**|\n+|ctrl-DOWN|linux, win|**paragraph down**|\n+|ctrl-shift-DOWN|linux, win|**select paragraph down**|\n+|shift-DOWN| |**select line down**|\n+|shift-shortcut-DOWN|mac|**extend selection to document end**|\n+|shortcut-DOWN| |**move to document end**|\n+|END| |**line end**|\n+|shift-END| |**select to line end**|\n+|shortcut-END| |move to document end|\n+|shortcut-shift-END| |select to document end|\n+|ENTER| |**insert new line**|\n+|ESCAPE| |cancel edit (forwarded to the parent container)|\n+|HOME| |**line start**|\n+|shift-HOME| |**select to line start**|\n+|shift-shortcut-HOME| |select to document start|\n+|shortcut-HOME| |move to document start|\n+|shift-INSERT| |paste|\n+|shortcut-INSERT| |copy|\n+|LEFT| |previous character|\n+|alt-LEFT| |left word|\n+|alt-shift-LEFT|mac|select left word|\n+|ctrl-LEFT|linux, win|left word|\n+|ctrl-shift-LEFT|linux, win|select left word|\n+|shift-LEFT| |select left|\n+|shift-shortcut-LEFT|mac|**select to line start**|\n+|shortcut-LEFT|mac|**move to line start**|\n+|PAGE_DOWN| |**page down**|\n+|shift-PAGE_DOWN| |**select page down**|\n+|PAGE_UP| |**page up**|\n+|shift-PAGE_UP| |**select page up**|\n+|PASTE| |paste|\n+|RIGHT| |next character|\n+|alt-RIGHT|mac|right word|\n+|alt-shift-RIGHT|mac|select right word|\n+|ctrl-RIGHT|linux, win|right word|\n+|ctrl-shift-RIGHT|linux, win|select right word|\n+|shift-RIGHT| |select right|\n+|shift-shortcut-RIGHT|mac|**select to line end**|\n+|shortcut-RIGHT|mac|**move to line end**|\n+|TAB| |**insert tab**|\n+|ctrl-TAB| |focus next|\n+|ctrl-shift-TAB| |focus previous|\n+|shift-TAB| |focus previous|\n+|UP| |**line up**|\n+|alt-UP|mac|**paragraph up**|\n+|alt-shift-UP|mac|**select paragraph up**|\n+|ctrl-UP|linux, win|**paragraph up**|\n+|ctrl-shift-UP|linux, win|**select paragraph up**|\n+|shift-UP| |**select line up**|\n+|shift-shortcut-UP|mac|**extend selection to document start**|\n+|shortcut-UP|mac|**move to document start**|\n+| | |  |\n+|shortcut-A| |select all|\n+|shortcut-C| |copy|\n+|ctrl-H|linux, win|delete previous char|\n+|shortcut-V| |paste|\n+|shortcut-X| |cut|\n+|ctrl-Y|win|redo|\n+|ctrl-shift-Z|linux|redo|\n+|shift-shortcut-Z|mac|redo|\n+|shortcut-Z| |undo|\n+\n+\n+Notes:\n+\n+1. Base class mappings modified by the TextArea class are highlighted in bold.\n+2. On Mac, alt is represented by the Option key.\n+3. On Mac, shortcut is represented by the Command key.\n","filename":"doc-files\/behavior\/TextArea.md","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+# TextField Behavior\n+\n+## Key Binginds\n+\n+|Key Combination|Platform|Function|\n+|---------------|--------|--------|\n+|ctrl-BACK_SLASH|linux, win|deselect|\n+|BACKSPACE| |delete previous char|\n+|alt-BACKSPACE|mac|delete previous word|\n+|ctrl-BACKSPACE|linux, win|delete previous word|\n+|shift-BACKSPACE| |delete previous char|\n+|shortcut-BACKSPACE|mac|delete from line start|\n+|COPY| |copy|\n+|CUT| |cut|\n+|DELETE| |delete next char|\n+|alt-DELETE|mac|delete next word|\n+|ctrl-DELETE|linux, win|delete next word|\n+|ctrl-shift-DIGIT9| |toggle the virtual keyboard (if supported)|\n+|DOWN| |move to document end|\n+|shift-DOWN| |select to document end|\n+|END| |move to document end|\n+|shift-END|mac|extend selection to document end|\n+|shift-END|linux, win|select document end|\n+|shift-shortcut-END| |select to document end|\n+|shortcut-END| |move to document end|\n+|ENTER| |fire event|\n+|ESCAPE| |cancel edit (forwarded to the parent container)|\n+|HOME| |move to document start|\n+|shift-HOME|mac|extend selection to document start|\n+|shift-HOME|linux, win|select to document start|\n+|shift-shortcut-HOME| |select to document start|\n+|shortcut-HOME| |move to document start|\n+|shift-INSERT| |paste|\n+|shortcut-INSERT| |copy|\n+|LEFT| |previous character|\n+|alt-LEFT| |left word|\n+|alt-shift-LEFT|mac|select left word|\n+|ctrl-LEFT|linux, win|left word|\n+|ctrl-shift-LEFT|linux, win|select left word|\n+|shift-LEFT| |select left|\n+|shift-shortcut-LEFT|mac|select to document start|\n+|shortcut-LEFT|mac|move to document start|\n+|PASTE| |paste|\n+|RIGHT| |next character|\n+|alt-RIGHT|mac|right word|\n+|alt-shift-RIGHT|mac|select right word|\n+|ctrl-RIGHT|linux, win|right word|\n+|ctrl-shift-RIGHT|linux, win|select right word|\n+|shift-RIGHT| |select right|\n+|shift-shortcut-RIGHT|mac|select to document end|\n+|shortcut-RIGHT|mac|move to document end|\n+|TAB| |focus next|\n+|ctrl-TAB| |focus next|\n+|ctrl-shift-TAB| |focus previous|\n+|shift-TAB| |focus previous|\n+|UP| |move to document start|\n+|shift-UP| |select to document start|\n+| | |  |\n+|shortcut-A| |select all|\n+|shortcut-C| |copy|\n+|ctrl-H|linux, win|delete previous char|\n+|shortcut-V| |paste|\n+|shortcut-X| |cut|\n+|ctrl-Y|win|redo|\n+|ctrl-shift-Z|linux|redo|\n+|shift-shortcut-Z|mac|redo|\n+|shortcut-Z| |undo|\n+\n+\n+Notes:\n+\n+1. Base class mappings modified by the TextField class are highlighted in bold.\n+2. On Mac, alt is represented by the Option key.\n+3. On Mac, shortcut is represented by the Command key.\n\\ No newline at end of file\n","filename":"doc-files\/behavior\/TextField.md","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+# TextInputControl Behavior\n+\n+## Key Binginds\n+\n+|Key Combination|Platform|Function|\n+|---------------|--------|--------|\n+|ctrl-BACK_SLASH|linux, win|deselect|\n+|BACKSPACE| |delete previous char|\n+|alt-BACKSPACE|mac|delete previous word|\n+|ctrl-BACKSPACE|linux, win|delete previous word|\n+|shift-BACKSPACE| |delete previous char|\n+|shortcut-BACKSPACE|mac|delete from line start|\n+|COPY| |copy|\n+|CUT| |cut|\n+|DELETE| |delete next char|\n+|alt-DELETE|mac|delete next word|\n+|ctrl-DELETE|linux, win|delete next word|\n+|ctrl-shift-DIGIT9| |toggle the virtual keyboard (if supported)|\n+|DOWN| |move to document end|\n+|shift-DOWN| |select to document end|\n+|END| |move to document end|\n+|shift-END|mac|extend selection to document end|\n+|shift-END|linux, win|select document end|\n+|shift-shortcut-END| |select to document end|\n+|shortcut-END| |move to document end|\n+|ENTER| |fire (no-op)|\n+|ESCAPE| |cancel edit (forwarded to the parent container)|\n+|HOME| |move to document start|\n+|shift-HOME|mac|extend selection to document start|\n+|shift-HOME|linux, win|select to document start|\n+|shift-shortcut-HOME| |select to document start|\n+|shortcut-HOME| |move to document start|\n+|shift-INSERT| |paste|\n+|shortcut-INSERT| |copy|\n+|LEFT| |previous character|\n+|alt-LEFT| |left word|\n+|alt-shift-LEFT|mac|select left word|\n+|ctrl-LEFT|linux, win|left word|\n+|ctrl-shift-LEFT|linux, win|select left word|\n+|shift-LEFT| |select left|\n+|shift-shortcut-LEFT|mac|select to document start|\n+|shortcut-LEFT|mac|move to document start|\n+|PASTE| |paste|\n+|RIGHT| |next character|\n+|alt-RIGHT|mac|right word|\n+|alt-shift-RIGHT|mac|select right word|\n+|ctrl-RIGHT|linux, win|right word|\n+|ctrl-shift-RIGHT|linux, win|select right word|\n+|shift-RIGHT| |select right|\n+|shift-shortcut-RIGHT|mac|select to document end|\n+|shortcut-RIGHT|mac|move to document end|\n+|TAB| |focus next|\n+|ctrl-TAB| |focus next|\n+|ctrl-shift-TAB| |focus previous|\n+|shift-TAB| |focus previous|\n+|UP| |move to document start|\n+|shift-UP| |select to document start|\n+| | |  |\n+|shortcut-A| |select all|\n+|shortcut-C| |copy|\n+|ctrl-H|linux, win|delete previous char|\n+|shortcut-V| |paste|\n+|shortcut-X| |cut|\n+|ctrl-Y|win|redo|\n+|ctrl-shift-Z|linux|redo|\n+|shift-shortcut-Z|mac|redo|\n+|shortcut-Z| |undo|\n+\n+\n+Notes:\n+\n+1. On Mac, alt is represented by the Option key.\n+2. On Mac, shortcut is represented by the Command key.\n\\ No newline at end of file\n","filename":"doc-files\/behavior\/TextInputControl.md","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import com.sun.javafx.scene.SceneHelper;\n-\n@@ -31,0 +29,1 @@\n+import java.util.HashMap;\n@@ -33,1 +32,1 @@\n-\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -35,0 +34,1 @@\n+import javafx.event.EventHandler;\n@@ -40,0 +40,2 @@\n+import com.sun.javafx.scene.SceneHelper;\n+import com.sun.javafx.tk.Toolkit;\n@@ -41,1 +43,3 @@\n-\n+\/**\n+ * Keyboard simulator for use with tests.\n+ *\/\n@@ -43,1 +47,0 @@\n-\n@@ -46,0 +49,1 @@\n+    private static HashMap<Character,KeyCode> keyCodes;\n@@ -104,0 +108,7 @@\n+    \/**\n+     * Sends a KEY_PRESS event, followed by a KEY_RELEASE event.\n+     * This might represent an incomplete sequence for keys which also\n+     * supposed to generate a KEY_TYPED event.\n+     * @param keyCode the key code\n+     * @param modifiers the key modifiers\n+     *\/\n@@ -112,0 +123,87 @@\n+    \/**\n+     * Generates a single KEY_PRESSED event.\n+     * @param code the key code\n+     * @param modifiers the key modifiers\n+     * @return true if the event has been consumed\n+     *\/\n+    public boolean keyPressed(KeyCode code, KeyModifier... modifiers) {\n+        KeyEvent ev = createEvent(code, KeyEvent.KEY_PRESSED, modifiers);\n+        return fireAndCheckConsumed(ev);\n+    }\n+\n+    \/**\n+     * Generates a single KEY_TYPED event.\n+     * @param code the key code\n+     * @param typedChar the character typed\n+     * @param modifiers the key modifiers\n+     * @return true if the event has been consumed\n+     *\/\n+    public boolean keyTyped(KeyCode code, String typedChar, KeyModifier... modifiers) {\n+        KeyEvent ev = new KeyEvent(\n+            null,\n+            target, \/\/ EventTarget\n+            KeyEvent.KEY_TYPED,\n+            typedChar,\n+            code.getChar(), \/\/ text\n+            code,\n+            false, \/\/ shiftDown\n+            false, \/\/ ctrlDown\n+            false, \/\/ altDown\n+            false \/\/ metaData\n+        );\n+        return fireAndCheckConsumed(ev);\n+    }\n+\n+    \/**\n+     * Generates a single KEY_RELEASED event.\n+     * @param code the key code\n+     * @param modifiers the key modifiers\n+     * @return true if the event has been consumed\n+     *\/\n+    public boolean keyReleased(KeyCode code, KeyModifier... modifiers) {\n+        KeyEvent ev = createEvent(code, KeyEvent.KEY_RELEASED, modifiers);\n+        return fireAndCheckConsumed(ev);\n+    }\n+\n+    private boolean fireAndCheckConsumed(KeyEvent event) {\n+        \/\/ dispatcher creates an event copy, so we need to jump over some hoops to get the actual event\n+        AtomicReference<KeyEvent> ref = new AtomicReference<>();\n+        EventHandler<KeyEvent> h = new EventHandler<>() {\n+            @Override\n+            public void handle(KeyEvent ev) {\n+                if (equals(event, ev)) {\n+                    ref.set(ev);\n+                }\n+            }\n+\n+            private boolean equals(KeyEvent a, KeyEvent b) {\n+                return\n+                    eq(a.getEventType(), b.getEventType()) &&\n+                    eq(a.getCode(), b.getCode()) &&\n+                    eq(a.getCharacter(), b.getCharacter()) &&\n+                    (a.isAltDown() == b.isAltDown()) &&\n+                    (a.isControlDown() == b.isControlDown()) &&\n+                    (a.isMetaDown() == b.isMetaDown()) &&\n+                    (a.isShiftDown() == b.isShiftDown()) &&\n+                    (a.isShortcutDown() == b.isShortcutDown());\n+            }\n+\n+            private boolean eq(Object a, Object b) {\n+                if (a == null) {\n+                    return (b == null);\n+                }\n+                return a.equals(b);\n+            }\n+        };\n+\n+        target.addEventFilter(event.getEventType(), h);\n+        try {\n+            fireEvents(event);\n+            Toolkit.getToolkit().firePulse();\n+            KeyEvent ev = ref.get();\n+            return ev.isConsumed();\n+        } finally {\n+            target.removeEventFilter(event.getEventType(), h);\n+        }\n+    }\n+\n@@ -138,0 +236,1 @@\n+        \/\/ WARNING: tests may pass null modifiers!\n@@ -141,10 +240,144 @@\n-                target,                            \/\/ EventTarget\n-                evtType,                           \/\/ eventType\n-                evtType == KeyEvent.KEY_TYPED ? keyCode.getChar() : null,  \/\/ Character (unused unless evtType == KEY_TYPED)\n-                keyCode.getChar(),            \/\/ text\n-                keyCode,                           \/\/ KeyCode\n-                ml.contains(KeyModifier.SHIFT),    \/\/ shiftDown\n-                ml.contains(KeyModifier.CTRL),     \/\/ ctrlDown\n-                ml.contains(KeyModifier.ALT),      \/\/ altDown\n-                ml.contains(KeyModifier.META)      \/\/ metaData\n-                );\n+            target, \/\/ EventTarget\n+            evtType, \/\/ eventType\n+            evtType == KeyEvent.KEY_TYPED ? keyCode.getChar() : null, \/\/ Character (unused unless evtType == KEY_TYPED)\n+            keyCode.getChar(), \/\/ text\n+            keyCode, \/\/ KeyCode\n+            ml.contains(KeyModifier.SHIFT), \/\/ shiftDown\n+            ml.contains(KeyModifier.CTRL), \/\/ ctrlDown\n+            ml.contains(KeyModifier.ALT), \/\/ altDown\n+            ml.contains(KeyModifier.META) \/\/ metaData\n+        );\n+    }\n+\n+    \/**\n+     * Simulates typing of the specified text by issuing a sequence of\n+     * KEY_PRESSED, KEY_TYPED, and KEY_RELEASED events.\n+     * Supports ASCII only keys.\n+     *\n+     * @param items a sequence of Strings and\/or {@link KeyCode}s\n+     *\/\n+    public void type(Object ... items) {\n+        for(Object x: items) {\n+            if(x instanceof String text) {\n+                for (int i = 0; i < text.length(); i++) {\n+                    char c = text.charAt(i);\n+                    typeChar(c);\n+                }\n+            } else if(x instanceof KeyCode c) {\n+                typeCode(c);\n+            }\n+        }\n+    }\n+\n+    private void typeChar(char c) {\n+        KeyCode code = getKeyCodeFor(c);\n+        KeyEvent ev;\n+        \/\/    eventType = KEY_PRESSED, consumed = false, character =  , text = a, code = A]\n+        \/\/    eventType = KEY_TYPED, consumed = false, character = a, text = , code = UNDEFINED]\n+        \/\/    eventType = KEY_RELEASED, consumed = false, character =  , text = a, code = A]\n+\n+        ev = createEvent(code, KeyEvent.KEY_PRESSED);\n+        fireEvents(ev);\n+        Toolkit.getToolkit().firePulse();\n+\n+        ev = new KeyEvent(\n+            null,\n+            target, \/\/ EventTarget\n+            KeyEvent.KEY_TYPED,\n+            String.valueOf(c),\n+            code.getChar(), \/\/ text\n+            code,\n+            false, \/\/ shiftDown\n+            false, \/\/ ctrlDown\n+            false, \/\/ altDown\n+            false \/\/ metaData\n+        );\n+        fireEvents(ev);\n+        Toolkit.getToolkit().firePulse();\n+\n+        ev = createEvent(code, KeyEvent.KEY_RELEASED);\n+        fireEvents(ev);\n+        Toolkit.getToolkit().firePulse();\n+    }\n+\n+    private void typeCode(KeyCode code) {\n+        KeyEvent ev;\n+        \/\/ eventType = KEY_PRESSED, consumed = false, character =  , text = , code = RIGHT]\n+        \/\/ eventType = KEY_RELEASED, consumed = false, character =  , text = , code = RIGHT]\n+\n+        ev = createEvent(code, KeyEvent.KEY_PRESSED);\n+        fireEvents(ev);\n+        Toolkit.getToolkit().firePulse();\n+\n+        ev = createEvent(code, KeyEvent.KEY_RELEASED);\n+        fireEvents(ev);\n+        Toolkit.getToolkit().firePulse();\n+    }\n+\n+    \/**\n+     * Looks up a KeyCode for the given character.\n+     * @param c character\n+     * @return KeyCode\n+     *\/\n+    public static KeyCode getKeyCodeFor(char c) {\n+        if (keyCodes == null) {\n+            keyCodes = createKeyCodes(\n+                \" \", KeyCode.SPACE,\n+                \"\\t\", KeyCode.TAB,\n+                \"\\n\", KeyCode.ENTER,\n+                \"a\", KeyCode.A,\n+                \"b\", KeyCode.B,\n+                \"c\", KeyCode.C,\n+                \"d\", KeyCode.D,\n+                \"e\", KeyCode.E,\n+                \"f\", KeyCode.F,\n+                \"g\", KeyCode.G,\n+                \"h\", KeyCode.H,\n+                \"i\", KeyCode.I,\n+                \"j\", KeyCode.J,\n+                \"k\", KeyCode.K,\n+                \"l\", KeyCode.L,\n+                \"m\", KeyCode.M,\n+                \"n\", KeyCode.N,\n+                \"o\", KeyCode.O,\n+                \"p\", KeyCode.P,\n+                \"q\", KeyCode.Q,\n+                \"r\", KeyCode.R,\n+                \"s\", KeyCode.S,\n+                \"t\", KeyCode.T,\n+                \"u\", KeyCode.U,\n+                \"v\", KeyCode.V,\n+                \"w\", KeyCode.W,\n+                \"x\", KeyCode.X,\n+                \"y\", KeyCode.Y,\n+                \"z\", KeyCode.Z,\n+                \"0\", KeyCode.DIGIT0,\n+                \"1\", KeyCode.DIGIT1,\n+                \"2\", KeyCode.DIGIT2,\n+                \"3\", KeyCode.DIGIT3,\n+                \"4\", KeyCode.DIGIT4,\n+                \"5\", KeyCode.DIGIT5,\n+                \"6\", KeyCode.DIGIT6,\n+                \"7\", KeyCode.DIGIT7,\n+                \"8\", KeyCode.DIGIT8,\n+                \"9\", KeyCode.DIGIT9,\n+                \".\", KeyCode.PERIOD,\n+                \",\", KeyCode.COMMA\n+            );\n+        }\n+\n+        KeyCode code = keyCodes.get(c);\n+        if (code == null) {\n+            throw new RuntimeException(String.format(\"character 0x%04x has no corresponding KeyCode\", (int)c));\n+        }\n+        return code;\n+    }\n+\n+    private static HashMap<Character, KeyCode> createKeyCodes(Object ... pairs) {\n+        HashMap<Character, KeyCode> m = new HashMap<>();\n+        for(int i=0; i<pairs.length; ) {\n+            char c = ((String)pairs[i++]).charAt(0);\n+            KeyCode code = (KeyCode)pairs[i++];\n+            m.put(c, code);\n+        }\n+        return m;\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/infrastructure\/KeyEventFirer.java","additions":249,"deletions":16,"binary":false,"changes":265,"status":"modified"},{"patch":"@@ -0,0 +1,260 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control.behavior;\n+\n+import java.util.function.BooleanSupplier;\n+import javafx.scene.control.Control;\n+import javafx.scene.input.Clipboard;\n+import javafx.scene.input.ClipboardContent;\n+import javafx.scene.input.KeyCode;\n+import org.junit.jupiter.api.Assertions;\n+import com.sun.javafx.PlatformUtil;\n+import com.sun.javafx.tk.Toolkit;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+\n+\/**\n+ * Base class for the Control Behavior tests.\n+ *\/\n+public abstract class BehaviorTestBase<C extends Control> {\n+\n+    protected C control;\n+    protected StageLoader stageLoader;\n+    \/\/ TODO problem:\n+    \/\/ KeyEventFirer may not a good idea here because of the way it generates events.\n+    \/\/ I think we should rather emulate the keyboard, such that the events match those sent by the real thing\n+    \/\/ i.e. press(SHORTCUT), hit(X), release(SHORTCUT)\n+    protected KeyEventFirer kb;\n+    private int step;\n+\n+    protected BehaviorTestBase() {\n+    }\n+\n+    \/**\n+     * Must be called in each test's <code>&#x40;BeforeEach<\/code> method:\n+     * <pre>\n+     *     &#x40;BeforeEach\n+     *     public void beforeEach() {\n+     *         initStage(new ACTUAL_CONTROL());\n+     *     }\n+     * <pre>\n+     * @param control the control being tested\n+     *\/\n+    protected void initStage(C c) {\n+        this.control = c;\n+        stageLoader = new StageLoader(c);\n+        kb = new KeyEventFirer(c);\n+        c.requestFocus();\n+        Toolkit.getToolkit().firePulse();\n+    }\n+\n+    \/**\n+     * Must be called in each test's <code>&#x40;AfterEach<\/code> method:\n+     * <pre>\n+     *     &#x40;AfterEach\n+     *     public void afterEach() {\n+     *         closeStage();\n+     *     }\n+     * <pre>\n+     * @param control the control being tested\n+     *\/\n+    protected void closeStage() {\n+        if (stageLoader != null) {\n+            stageLoader.dispose();\n+            stageLoader = null;\n+        }\n+    }\n+\n+    \/**\n+     * Returns the Control being tested.\n+     * @return the control\n+     *\/\n+    public C control() {\n+        return control;\n+    }\n+\n+    \/**\n+     * Returns a Runnable that emulates KEY_PRESS + KEY_RELEASE events with the given KeyCode\n+     * and the ALT modifier.\n+     * @param k the key code\n+     * @return the Runnable\n+     *\/\n+    protected Runnable alt(KeyCode k) {\n+        return () -> {\n+            kb.keyPressed(k, KeyModifier.ALT);\n+            kb.keyReleased(k, KeyModifier.ALT);\n+        };\n+    }\n+\n+    \/**\n+     * Returns a Runnable that emulates KEY_PRESS + KEY_RELEASE events with the given KeyCode\n+     * and the CTRL modifier.\n+     * @param k the key code\n+     * @return the Runnable\n+     *\/\n+    protected Runnable ctrl(KeyCode k) {\n+        return () -> {\n+            kb.keyPressed(k, KeyModifier.CTRL);\n+            kb.keyReleased(k, KeyModifier.CTRL);\n+        };\n+    }\n+\n+    \/**\n+     * Returns a Runnable that emulates KEY_PRESS + KEY_RELEASE events with the given KeyCode\n+     * and the SHIFT modifier.\n+     * @param k the key code\n+     * @return the Runnable\n+     *\/\n+    protected Runnable shift(KeyCode k) {\n+        return () -> {\n+            kb.keyPressed(k, KeyModifier.SHIFT);\n+            kb.keyReleased(k, KeyModifier.SHIFT);\n+        };\n+    }\n+\n+    \/**\n+     * Returns a Runnable that emulates KEY_PRESS + KEY_RELEASE events with the given KeyCode\n+     * and the SHORTCUT modifier.\n+     * @param k the key code\n+     * @return the Runnable\n+     *\/\n+    protected Runnable shortcut(KeyCode k) {\n+        return () -> {\n+            kb.keyPressed(k, KeyModifier.getShortcutKey());\n+            kb.keyReleased(k, KeyModifier.getShortcutKey());\n+        };\n+    }\n+\n+    \/**\n+     * Returns a Runnable that emulates KEY_PRESS + KEY_RELEASE events with the given KeyCode\n+     * and the specified modifiers.\n+     * @param k the key code\n+     * @param modifiers the key modifiers\n+     * @return the Runnable\n+     *\/\n+    protected Runnable key(KeyCode k, KeyModifier ... modifiers) {\n+        return () -> {\n+            kb.keyPressed(k, modifiers);\n+            kb.keyReleased(k, modifiers);\n+        };\n+    }\n+\n+    \/**\n+     * Returns a Runnable that, when executed, checks the result of the specified boolean operation.\n+     * @param test the operation\n+     * @return the Runnable\n+     *\/\n+    protected Runnable check(BooleanSupplier test) {\n+        return () -> {\n+            boolean result = test.getAsBoolean();\n+            Assertions.assertTrue(result, errorMessage());\n+        };\n+    }\n+\n+    protected Runnable exe(Runnable r) {\n+        return r;\n+    }\n+\n+    protected String errorMessage() {\n+        return \"in step \" + step;\n+    }\n+\n+    \/**\n+     * Executes a test by emulating key press \/ key releases and various operations on the control being tested.\n+     * For each item:\n+     * <ul>\n+     * <li> if a String, emulates KEY_PRESSED + KEY_TYPED + KEY_RELEASED events for each character\n+     * <li> if a KeyCode, emulates KEY_PRESSED + KEY_RELEASED events for that KeyCode\n+     * <li> if a Runnable, runs it\n+     * <\/ul>\n+     * @param items the sequence of KeyCodes\/Runnables\/String\n+     *\/\n+    protected void execute(Object ... items) {\n+        step = 0;\n+        for(Object x: items) {\n+            if(x instanceof Runnable r) {\n+                r.run();\n+                Toolkit.getToolkit().firePulse();\n+            } else if(x instanceof KeyCode k) {\n+                kb.keyPressed(k);\n+                kb.keyReleased(k);\n+            } else if(x instanceof String s) {\n+                kb.type(s);\n+            }\n+            step++;\n+        }\n+    }\n+\n+    \/**\n+     * Returns a Runnable that checks the clipboard content against the given text.\n+     * @param expected the expected clipboard content\n+     * @return the Runnable\n+     *\/\n+    protected Runnable checkClipboard(String expected) {\n+        return () -> {\n+            Clipboard c = Clipboard.getSystemClipboard();\n+            String v = c.getString();\n+            Assertions.assertEquals(expected, v, errorMessage());\n+        };\n+    }\n+\n+    \/**\n+     * Returns a Runnable that copies the specified text to the system clipboard.\n+     * @param text the text to copy\n+     * @return the Runnable\n+     *\/\n+    protected Runnable copy(String text) {\n+        return () -> {\n+            ClipboardContent cc = new ClipboardContent();\n+            cc.putString(text);\n+            Clipboard.getSystemClipboard().setContent(cc);\n+        };\n+    }\n+\n+    \/**\n+     * Returns true if the platform is macOS.\n+     * @return true if platform is a Mac\n+     *\/\n+    protected boolean isMac() {\n+        return PlatformUtil.isMac();\n+    }\n+\n+    \/**\n+     * Returns true if the platform is Windows.\n+     * @return true if platform is Windows\n+     *\/\n+    protected boolean isWin() {\n+        return PlatformUtil.isWindows();\n+    }\n+\n+    \/**\n+     * Returns true if the platform is Linux.\n+     * @return true if platform is Linux\n+     *\/\n+    protected boolean isLinux() {\n+        return PlatformUtil.isLinux();\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/behavior\/BehaviorTestBase.java","additions":260,"deletions":0,"binary":false,"changes":260,"status":"added"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control.behavior;\n+\n+import javafx.scene.control.PasswordField;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+\/**\n+ * Tests PasswordField behavior by exercising every key binding registered by the skin\n+ * at least once.\n+ *\/\n+public class PasswordFieldBehaviorTest extends TextInputControlTestBase<PasswordField> {\n+\n+    @BeforeEach\n+    public void beforeEach() {\n+        initStage(new PasswordField());\n+    }\n+\n+    @AfterEach\n+    public void afterEach() {\n+        closeStage();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testConsume() {\n+        super.testConsume();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testConsumeEnter() {\n+        super.testConsumeEnter();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testCopy() {\n+        \/\/ copy is disabled\n+    }\n+\n+    @Test\n+    @Override\n+    public void testCut() {\n+        \/\/ cut is disabled\n+    }\n+\n+    @Test\n+    @Override\n+    public void testNavigation() {\n+        super.testNavigation();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDeletion() {\n+        super.testDeletion();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSelection() {\n+        super.testSelection();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testMacBindings() {\n+        super.testMacBindings();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testNonMacBindings() {\n+        super.testNonMacBindings();\n+    }\n+\n+    @Test\n+    @Override\n+    public final void testWordMac() {\n+        \/\/ word navigation is disabled\n+    }\n+\n+    @Test\n+    @Override\n+    public final void testWordNonMac() {\n+        \/\/ word navigation is disabled\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/behavior\/PasswordFieldBehaviorTest.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control.behavior;\n+\n+import static javafx.scene.input.KeyCode.*;\n+import javafx.scene.control.TextArea;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+\/**\n+ * Tests TextArea behavior by exercising every key binding registered by the skin\n+ * at least once.\n+ *\n+ * Note: some aspects of behavior (navigation, selection) require fully rendered skin,\n+ * so it is impossible to test in headless environment.\n+ * See TextAreaBehaviorRobotTest.\n+ *\/\n+public class TextAreaBehaviorTest extends TextInputControlTestBase<TextArea> {\n+\n+    @BeforeEach\n+    public void beforeEach() {\n+        initStage(new TextArea());\n+    }\n+\n+    @AfterEach\n+    public void afterEach() {\n+        closeStage();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testConsume() {\n+        super.testConsume();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testConsumeEnter() {\n+        \/\/ does not consume ENTER\n+    }\n+\n+    @Test\n+    @Override\n+    public void testCopy() {\n+        super.testCopy();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testCut() {\n+        super.testCut();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testNavigation() {\n+        \/\/ needs graphics\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDeletion() {\n+        \/\/ needs graphics\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSelection() {\n+        \/\/ needs graphics\n+    }\n+\n+    @Test\n+    @Override\n+    public void testMacBindings() {\n+        \/\/ needs graphics\n+    }\n+\n+    @Test\n+    @Override\n+    public void testNonMacBindings() {\n+        \/\/ needs graphics\n+    }\n+\n+    @Test\n+    @Override\n+    public final void testWordMac() {\n+        super.testWordMac();\n+    }\n+\n+    @Test\n+    @Override\n+    public final void testWordNonMac() {\n+        super.testWordNonMac();\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/behavior\/TextAreaBehaviorTest.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control.behavior;\n+\n+import javafx.scene.control.TextField;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+\/**\n+ * Tests TextField behavior by exercising every key binding registered by the skin\n+ * at least once.\n+ *\/\n+public class TextFieldBehaviorTest extends TextInputControlTestBase<TextField> {\n+\n+    @BeforeEach\n+    public void beforeEach() {\n+        initStage(new TextField());\n+    }\n+\n+    @AfterEach\n+    public void afterEach() {\n+        closeStage();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testConsume() {\n+        super.testConsume();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testConsumeEnter() {\n+        super.testConsumeEnter();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testCopy() {\n+        super.testCopy();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testCut() {\n+        super.testCut();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testNavigation() {\n+        super.testNavigation();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDeletion() {\n+        super.testDeletion();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSelection() {\n+        super.testSelection();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testMacBindings() {\n+        super.testMacBindings();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testNonMacBindings() {\n+        super.testNonMacBindings();\n+    }\n+\n+    @Test\n+    @Override\n+    public final void testWordMac() {\n+        super.testWordMac();\n+    }\n+\n+    @Test\n+    @Override\n+    public final void testWordNonMac() {\n+        super.testWordNonMac();\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/behavior\/TextFieldBehaviorTest.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -0,0 +1,468 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control.behavior;\n+\n+import static javafx.scene.input.KeyCode.*;\n+import javafx.application.ConditionalFeature;\n+import javafx.scene.control.IndexRange;\n+import javafx.scene.control.TextInputControl;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+\n+\/**\n+ * Base class for testing behaviors based on TextInputControlBehavior.\n+ *\/\n+public abstract class TextInputControlTestBase<T extends TextInputControl> extends BehaviorTestBase<T> {\n+    protected TextInputControlTestBase() {\n+    }\n+\n+    @Test\n+    public final void testTypingSanity() {\n+        execute(\n+            \"hello\",\n+            checkText(\"hello\"),\n+            BACK_SPACE, BACK_SPACE, \"f\",\n+            checkText(\"helf\")\n+        );\n+    }\n+\n+    protected void testConsume() {\n+        Assertions.assertTrue(kb.keyPressed(HOME));\n+        Assertions.assertFalse(kb.keyReleased(HOME));\n+\n+        Assertions.assertTrue(kb.keyPressed(A));\n+        Assertions.assertTrue(kb.keyTyped(A, \"a\"));\n+        Assertions.assertFalse(kb.keyReleased(A));\n+\n+        Assertions.assertTrue(kb.keyPressed(DOWN));\n+        Assertions.assertFalse(kb.keyReleased(DOWN));\n+\n+        Assertions.assertFalse(kb.keyPressed(F1));\n+        Assertions.assertFalse(kb.keyReleased(F1));\n+\n+        Assertions.assertFalse(kb.keyPressed(ESCAPE));\n+        Assertions.assertFalse(kb.keyReleased(ESCAPE));\n+\n+        Assertions.assertTrue(kb.keyPressed(SPACE));\n+        Assertions.assertTrue(kb.keyTyped(SPACE, \" \"));\n+        Assertions.assertFalse(kb.keyReleased(SPACE));\n+    }\n+\n+    protected void testConsumeEnter() {\n+        Assertions.assertFalse(kb.keyPressed(ENTER));\n+        Assertions.assertFalse(kb.keyReleased(ENTER));\n+    }\n+\n+    protected void testCopy() {\n+        execute(\n+            setText(\"abcd\"),\n+            shift(RIGHT), checkSelection(0, 1),\n+            shortcut(C), checkSelection(0, 1), checkClipboard(\"a\"),\n+            HOME, RIGHT, shift(RIGHT), checkSelection(1, 2),\n+            shortcut(INSERT), checkSelection(1, 2), checkClipboard(\"b\"),\n+            HOME, RIGHT, RIGHT, shift(RIGHT), checkSelection(2, 3),\n+            COPY, checkSelection(2, 3), checkClipboard(\"c\")\n+        );\n+\n+        \/\/ keypad mappings\n+        execute(\n+            setText(\"abcd\"),\n+            shift(KP_RIGHT), checkSelection(0, 1),\n+            shortcut(C), checkSelection(0, 1), checkClipboard(\"a\"),\n+            HOME, KP_RIGHT, shift(KP_RIGHT), checkSelection(1, 2),\n+            shortcut(INSERT), checkSelection(1, 2), checkClipboard(\"b\"),\n+            HOME, KP_RIGHT, KP_RIGHT, shift(KP_RIGHT), checkSelection(2, 3),\n+            COPY, checkSelection(2, 3), checkClipboard(\"c\")\n+        );\n+    }\n+\n+    protected void testCut() {\n+        execute(\n+            setText(\"aa\"),\n+            shortcut(A), shortcut(X), checkText(\"\", 0), checkClipboard(\"aa\"),\n+            setText(\"bb\"),\n+            shortcut(A), CUT, shortcut(X), checkText(\"\", 0), checkClipboard(\"bb\")\n+        );\n+\n+        control.setEditable(false);\n+        execute(\n+            copy(\"yo\"),\n+            setText(\"aa\"),\n+            shortcut(A), shortcut(X), checkText(\"aa\", 0, 2), checkClipboard(\"yo\"),\n+            setText(\"bb\"),\n+            shortcut(A), CUT, shortcut(X), checkText(\"bb\", 0, 2), checkClipboard(\"yo\")\n+        );\n+    }\n+\n+    @Test\n+    public final void testPaste() {\n+        execute(\n+            setText(null),\n+            copy(\"1\"), shortcut(V), checkText(\"1\", 1),\n+            copy(\"2\"), PASTE, checkText(\"12\", 2),\n+            copy(\"3\"), shift(INSERT), checkText(\"123\", 3)\n+        );\n+\n+        control.setEditable(false);\n+        execute(\n+            setText(\"\"),\n+            copy(\"1\"), shortcut(V), checkText(\"\", 0),\n+            copy(\"2\"), PASTE, checkText(\"\", 0),\n+            copy(\"3\"), shift(INSERT), checkText(\"\", 0)\n+        );\n+    }\n+\n+    protected void testNavigation() {\n+        execute(\n+            \"0123456789\", checkSelection(10),\n+            LEFT, KP_LEFT, checkSelection(8),\n+            RIGHT, checkSelection(9),\n+            KP_RIGHT, checkSelection(10),\n+            UP, checkSelection(0),\n+            DOWN, checkSelection(10),\n+            HOME, checkSelection(0),\n+            END, checkSelection(10),\n+            shortcut(HOME), checkSelection(0),\n+            shortcut(END), checkSelection(10)\n+        );\n+    }\n+\n+    protected void testDeletion() {\n+        execute(\n+            setText(\"0123456789\"),\n+            END, BACK_SPACE, checkText(\"012345678\"),\n+            shift(BACK_SPACE), checkText(\"01234567\"),\n+            HOME, DELETE, checkText(\"1234567\")\n+        );\n+\n+        if(!isMac()) {\n+            execute(\n+                setText(\"012\"), END,\n+                \/\/ delete previous char\n+                ctrl(H), checkText(\"01\", 2)\n+            );\n+        }\n+\n+        control.setEditable(false);\n+        execute(\n+            setText(\"0123456789\"),\n+            END, BACK_SPACE, checkText(\"0123456789\"),\n+            shift(BACK_SPACE), checkText(\"0123456789\"),\n+            HOME, DELETE, checkText(\"0123456789\")\n+        );\n+    }\n+\n+    protected void testSelection() {\n+        execute(\n+            setText(\"abc\"),\n+            HOME, shift(RIGHT), checkSelection(0, 1),\n+            END, shift(LEFT), checkSelection(2, 3),\n+            HOME, shift(DOWN), checkSelection(0, 3),\n+            END, checkSelection(3), shift(UP), checkSelection(0, 3),\n+            HOME, checkSelection(0), shift(END), checkSelection(0, 3),\n+            END, checkSelection(3), shift(HOME), checkSelection(0, 3),\n+            HOME, checkSelection(0), shortcut(A), checkSelection(0, 3)\n+        );\n+\n+        \/\/ keypad\n+        execute(\n+            setText(\"abc\"),\n+            HOME, shift(KP_RIGHT), checkSelection(0, 1),\n+            END, shift(KP_LEFT), checkSelection(2, 3),\n+            HOME, shift(KP_DOWN), checkSelection(0, 3),\n+            END, checkSelection(3), shift(KP_UP), checkSelection(0, 3),\n+            HOME, checkSelection(0), shift(END), checkSelection(0, 3),\n+            END, checkSelection(3), shift(HOME), checkSelection(0, 3),\n+            HOME, checkSelection(0), shortcut(A), checkSelection(0, 3)\n+        );\n+    }\n+\n+    @Disabled(\"JDK-8296266\") \/\/ FIX\n+    @Test\n+    public final void testRTL() {\n+        execute(\n+            setText(\"العربية\"),\n+            checkSelection(0, 0),\n+            RIGHT, checkSelection(1, 1)\n+        );\n+    }\n+\n+    @Test\n+    public final void testLTR() {\n+        execute(\n+            setText(\"abc\"),\n+            checkSelection(0, 0),\n+            RIGHT, checkSelection(1, 1)\n+        );\n+    }\n+\n+    @Test\n+    public final void testUndoRedo() {\n+        execute(\n+            setText(\"b\"),\n+            \"a\", checkText(\"ab\"),\n+            shortcut(Z), checkText(\"b\", 0),\n+            redo(),\n+            checkText(\"ab\")\n+        );\n+    }\n+\n+    protected Runnable redo() {\n+        if (isMac()) {\n+            return key(Z, KeyModifier.getShortcutKey(), KeyModifier.SHIFT);\n+        } else if (isWin()) {\n+            return key(Y, KeyModifier.CTRL);\n+        } else {\n+            return key(Z, KeyModifier.CTRL, KeyModifier.SHIFT);\n+        }\n+    }\n+\n+    protected void testMacBindings() {\n+        if (!isMac()) {\n+            return;\n+        }\n+\n+        execute(\n+            setText(\"abc\"),\n+            \/\/ select end extend\n+            shift(END), checkSelection(0, 3),\n+            \/\/ home\n+            shortcut(LEFT), checkSelection(0),\n+            \/\/ end\n+            shortcut(RIGHT), checkSelection(3),\n+            \/\/ select home extend\n+            shift(HOME), checkSelection(0, 3),\n+            \/\/ select home extend\n+            END, key(LEFT, KeyModifier.getShortcutKey(), KeyModifier.SHIFT), checkSelection(0, 3),\n+            \/\/ select end extend\n+            HOME, key(RIGHT, KeyModifier.getShortcutKey(), KeyModifier.SHIFT), checkSelection(0, 3)\n+        );\n+\n+        \/\/ keypad\n+        execute(\n+            setText(\"abc\"),\n+            \/\/ select end extend\n+            shift(END), checkSelection(0, 3),\n+            \/\/ home\n+            shortcut(KP_LEFT), checkSelection(0),\n+            \/\/ end\n+            shortcut(KP_RIGHT), checkSelection(3),\n+            \/\/ select home extend\n+            shift(HOME), checkSelection(0, 3),\n+            \/\/ select home extend\n+            END, key(KP_LEFT, KeyModifier.getShortcutKey(), KeyModifier.SHIFT), checkSelection(0, 3),\n+            \/\/ select end extend\n+            HOME, key(KP_RIGHT, KeyModifier.getShortcutKey(), KeyModifier.SHIFT), checkSelection(0, 3)\n+        );\n+    }\n+\n+    protected void testNonMacBindings() {\n+        if (isMac()) {\n+            return;\n+        }\n+\n+        execute(\n+            setText(\"abc\"),\n+            \/\/ select end\n+            shift(END), checkSelection(0, 3),\n+            \/\/ select home\n+            END, shift(HOME), checkSelection(0, 3),\n+            \/\/ deselect\n+            ctrl(BACK_SLASH), checkSelection(0)\n+        );\n+    }\n+\n+    protected void testWordMac() {\n+        if (!isMac()) {\n+            return;\n+        }\n+\n+        execute(\n+            setText(\"one two three\"),\n+            \/\/ right word\n+            alt(RIGHT), checkSelection(3),\n+            alt(RIGHT), checkSelection(7),\n+            \/\/ left word\n+            alt(LEFT), checkSelection(4),\n+            \/\/ delete next word\n+            alt(DELETE), checkText(\"one  three\", 4),\n+            \/\/ delete prev word\n+            alt(BACK_SPACE), checkText(\" three\", 0),\n+\n+            setText(\"\"), \"one two three\",\n+            \/\/ select left word\n+            key(LEFT, KeyModifier.ALT, KeyModifier.SHIFT), checkSelection(8, 13),\n+            \/\/ select right word\n+            LEFT, LEFT, LEFT, LEFT, LEFT,\n+            key(RIGHT, KeyModifier.ALT, KeyModifier.SHIFT), checkSelection(4, 7)\n+        );\n+\n+        \/\/ keypad\n+        execute(\n+            setText(\"one two three\"),\n+            \/\/ right word\n+            alt(KP_RIGHT), checkSelection(3),\n+            alt(KP_RIGHT), checkSelection(7),\n+            \/\/ left word\n+            alt(KP_LEFT), checkSelection(4),\n+            \/\/ delete next word\n+            alt(DELETE), checkText(\"one  three\", 4),\n+            \/\/ delete prev word\n+            alt(BACK_SPACE), checkText(\" three\", 0),\n+\n+            setText(\"\"), \"one two three\",\n+            \/\/ select left word\n+            key(KP_LEFT, KeyModifier.ALT, KeyModifier.SHIFT), checkSelection(8, 13),\n+            \/\/ select right word\n+            KP_LEFT, KP_LEFT, KP_LEFT, KP_LEFT, KP_LEFT,\n+            key(KP_RIGHT, KeyModifier.ALT, KeyModifier.SHIFT), checkSelection(4, 7)\n+        );\n+    }\n+\n+    protected void testWordNonMac() {\n+        if (isMac()) {\n+            return;\n+        }\n+\n+        boolean win = isWin();\n+\n+        execute(\n+            setText(\"one two three\"),\n+            \/\/ right word\n+            ctrl(RIGHT), checkSelection(win ? 4 : 3),\n+            ctrl(RIGHT), checkSelection(win ? 8 : 7),\n+            \/\/ left word\n+            ctrl(LEFT), checkSelection(4),\n+            \/\/ delete next word\n+            ctrl(DELETE), checkText(win ? \"one three\" : \"one  three\", 4),\n+            \/\/ delete prev word\n+            ctrl(BACK_SPACE), checkText(win ? \"three\" : \" three\", 0),\n+\n+            setText(\"\"), \"one two three\",\n+            \/\/ select left word\n+            key(LEFT, KeyModifier.CTRL, KeyModifier.SHIFT), checkSelection(8, 13),\n+            \/\/ select right word\n+            LEFT, LEFT, LEFT, LEFT, LEFT,\n+            key(RIGHT, KeyModifier.CTRL, KeyModifier.SHIFT), checkSelection(4, win ? 8 : 7)\n+        );\n+\n+        \/\/ keypad\n+        execute(\n+            setText(\"one two three\"),\n+            \/\/ right word\n+            ctrl(KP_RIGHT), checkSelection(win ? 4 : 3),\n+            ctrl(KP_RIGHT), checkSelection(win ? 8 : 7),\n+            \/\/ left word\n+            ctrl(KP_LEFT), checkSelection(4),\n+            \/\/ delete next word\n+            ctrl(DELETE), checkText(win ? \"one three\" : \"one  three\", 4),\n+            \/\/ delete prev word\n+            ctrl(BACK_SPACE), checkText(win ? \"three\" : \" three\", 0),\n+\n+            setText(\"\"), \"one two three\",\n+            \/\/ select left word\n+            key(KP_LEFT, KeyModifier.CTRL, KeyModifier.SHIFT), checkSelection(8, 13),\n+            \/\/ select right word\n+            KP_LEFT, KP_LEFT, KP_LEFT, KP_LEFT, KP_LEFT,\n+            key(RIGHT, KeyModifier.CTRL, KeyModifier.SHIFT), checkSelection(4, win ? 8 : 7)\n+        );\n+    }\n+\n+    \/**\n+     * Returns a Runnable that sets the specified text on the control.\n+     * @param text the text to set\n+     * @return the Runnable\n+     *\/\n+    protected Runnable setText(String text) {\n+        return () -> {\n+            control.setText(text);\n+        };\n+    }\n+\n+    \/**\n+     * Returns a Runnable that checks the control's text against the expected value.\n+     * @param expected the expected text\n+     * @return the Runnable\n+     *\/\n+    protected Runnable checkText(String expected) {\n+        return () -> {\n+            String v = control.getText();\n+            Assertions.assertEquals(expected, v, errorMessage());\n+        };\n+    }\n+\n+    \/**\n+     * Returns a Runnable that checks the control's text and selection indexes against the expected values.\n+     * @param expected the expected text\n+     * @param start the expected selection start index\n+     * @param end the expected selection end index\n+     * @return the Runnable\n+     *\/\n+    protected Runnable checkText(String expected, int start, int end) {\n+        return () -> {\n+            String s = control.getText();\n+            Assertions.assertEquals(expected, s, errorMessage());\n+\n+            IndexRange v = control.getSelection();\n+            IndexRange expectedSelection = new IndexRange(start, end);\n+            Assertions.assertEquals(expectedSelection, v, errorMessage());\n+        };\n+    }\n+\n+    \/**\n+     * Returns a Runnable that checks the control's text and selection indexes against the expected values.\n+     * @param expected the expected text\n+     * @param index the expected selection start and end index\n+     * @return the Runnable\n+     *\/\n+    protected Runnable checkText(String expected, int index) {\n+        return checkText(expected, index, index);\n+    }\n+\n+    \/**\n+     * Returns a Runnable that checks the control's selection indexes against the expected values.\n+     * @param start the expected selection start index\n+     * @param end the expected selection end index\n+     * @return the Runnable\n+     *\/\n+    protected Runnable checkSelection(int start, int end) {\n+        return () -> {\n+            IndexRange v = control.getSelection();\n+            IndexRange expected = new IndexRange(start, end);\n+            Assertions.assertEquals(expected, v, errorMessage());\n+        };\n+    }\n+\n+    \/**\n+     * Returns a Runnable that checks the control's selection indexe against the expected value.\n+     * @param index the expected selection start and end index\n+     * @return the Runnable\n+     *\/\n+    protected Runnable checkSelection(int index) {\n+        return checkSelection(index, index);\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/behavior\/TextInputControlTestBase.java","additions":468,"deletions":0,"binary":false,"changes":468,"status":"added"},{"patch":"@@ -0,0 +1,346 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.behavior;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.function.BooleanSupplier;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.event.EventHandler;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Control;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Stage;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import com.sun.javafx.PlatformUtil;\n+import test.util.Util;\n+\n+\/**\n+ * Base class for testing behaviors with Robot.\n+ *\/\n+public abstract class BehaviorRobotTestBase<C extends Control> {\n+\n+    private static CountDownLatch startupLatch;\n+    private static Scene scene;\n+    private static Stage stage;\n+    private static BorderPane content;\n+    protected static Robot robot;\n+    private int step;\n+    private static HashMap<Character,KeyCode> keyCodes;\n+    protected C control;\n+    private final EventHandler<KeyEvent> keyListener = (ev) -> System.out.println(ev);\n+\n+    protected BehaviorRobotTestBase(C c) {\n+        this.control = c;\n+    }\n+\n+    public static class App extends Application {\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            stage = primaryStage;\n+            robot = new Robot();\n+            content = new BorderPane();\n+            scene = new Scene(content);\n+            stage.setScene(scene);\n+            stage.setWidth(400);\n+            stage.setHeight(300);\n+            stage.setOnShown(l -> {\n+                Platform.runLater(() -> startupLatch.countDown());\n+            });\n+            stage.show();\n+        }\n+    }\n+\n+    @BeforeEach\n+    public void beforeEach() {\n+        Platform.runLater(() -> {\n+            step = 0;\n+            content.setCenter(control);\n+        });\n+    }\n+\n+    @AfterEach\n+    public void afterEach() {\n+        Platform.runLater(() -> {\n+            content.setCenter(null);\n+        });\n+        content.removeEventFilter(KeyEvent.ANY, keyListener);\n+    }\n+\n+    @BeforeAll\n+    public static void initFX() throws Exception {\n+        startupLatch = new CountDownLatch(1);\n+        Util.launch(startupLatch, App.class);\n+    }\n+\n+    @AfterAll\n+    public static void teardownOnce() {\n+        Util.shutdown(stage);\n+    }\n+\n+    \/**\n+     * Executes a test by emulating key press \/ key releases and various operations on the control being tested.\n+     * For each item:\n+     * <ul>\n+     * <li> if a String, emulates KEY_PRESSED + KEY_TYPED + KEY_RELEASED events for each character\n+     * <li> if a KeyCode, emulates KEY_PRESSED + KEY_RELEASED events for that KeyCode\n+     * <li> if a Runnable, runs it\n+     * <\/ul>\n+     * @param items the sequence of KeyCodes\/Runnables\/String\n+     *\/\n+    protected void execute(Object ... items) {\n+        for (Object x : items) {\n+            if (x instanceof Runnable r) {\n+                Util.runAndWait(() -> {\n+                    r.run();\n+                });\n+            } else if (x instanceof KeyCode k) {\n+                Util.runAndWait(() -> {\n+                    robot.keyPress(k);\n+                    robot.keyRelease(k);\n+                });\n+            } else if (x instanceof String s) {\n+                for (int i = 0; i < s.length(); i++) {\n+                    char c = s.charAt(i);\n+                    KeyCode k = getKeyCodeForChar(c);\n+                    Util.runAndWait(() -> {\n+                        robot.keyPress(k);\n+                        robot.keyRelease(k);\n+                    });\n+                }\n+            }\n+            step++;\n+        }\n+    }\n+\n+    \/**\n+     * Looks up a KeyCode for the given character.\n+     * @param c character\n+     * @return KeyCode\n+     *\/\n+    \/\/ TODO duplicated code from KeyEventFirer - we don't have a common place for general purpose test utilities\n+    private static KeyCode getKeyCodeForChar(char c) {\n+        if (keyCodes == null) {\n+            keyCodes = createKeyCodes(\n+                \" \", KeyCode.SPACE,\n+                \"\\t\", KeyCode.TAB,\n+                \"\\n\", KeyCode.ENTER,\n+                \"a\", KeyCode.A,\n+                \"b\", KeyCode.B,\n+                \"c\", KeyCode.C,\n+                \"d\", KeyCode.D,\n+                \"e\", KeyCode.E,\n+                \"f\", KeyCode.F,\n+                \"g\", KeyCode.G,\n+                \"h\", KeyCode.H,\n+                \"i\", KeyCode.I,\n+                \"j\", KeyCode.J,\n+                \"k\", KeyCode.K,\n+                \"l\", KeyCode.L,\n+                \"m\", KeyCode.M,\n+                \"n\", KeyCode.N,\n+                \"o\", KeyCode.O,\n+                \"p\", KeyCode.P,\n+                \"q\", KeyCode.Q,\n+                \"r\", KeyCode.R,\n+                \"s\", KeyCode.S,\n+                \"t\", KeyCode.T,\n+                \"u\", KeyCode.U,\n+                \"v\", KeyCode.V,\n+                \"w\", KeyCode.W,\n+                \"x\", KeyCode.X,\n+                \"y\", KeyCode.Y,\n+                \"z\", KeyCode.Z,\n+                \"0\", KeyCode.DIGIT0,\n+                \"1\", KeyCode.DIGIT1,\n+                \"2\", KeyCode.DIGIT2,\n+                \"3\", KeyCode.DIGIT3,\n+                \"4\", KeyCode.DIGIT4,\n+                \"5\", KeyCode.DIGIT5,\n+                \"6\", KeyCode.DIGIT6,\n+                \"7\", KeyCode.DIGIT7,\n+                \"8\", KeyCode.DIGIT8,\n+                \"9\", KeyCode.DIGIT9,\n+                \".\", KeyCode.PERIOD,\n+                \",\", KeyCode.COMMA\n+            );\n+        }\n+\n+        KeyCode code = keyCodes.get(c);\n+        if (code == null) {\n+            throw new RuntimeException(String.format(\"character 0x%04x has no corresponding KeyCode\", (int)c));\n+        }\n+        return code;\n+    }\n+\n+    private static HashMap<Character, KeyCode> createKeyCodes(Object ... pairs) {\n+        HashMap<Character, KeyCode> m = new HashMap<>();\n+        for(int i=0; i<pairs.length; ) {\n+            char c = ((String)pairs[i++]).charAt(0);\n+            KeyCode code = (KeyCode)pairs[i++];\n+            m.put(c, code);\n+        }\n+        return m;\n+    }\n+\n+    \/**\n+     * Returns a Runnable that, when executed, checks the result of the specified boolean operation.\n+     * @param test the operation\n+     * @return the Runnable\n+     *\/\n+    protected Runnable check(BooleanSupplier test) {\n+        return () -> {\n+            boolean result = test.getAsBoolean();\n+            Assertions.assertTrue(result, errorMessage());\n+        };\n+    }\n+\n+    protected Runnable exe(Runnable r) {\n+        return r;\n+    }\n+\n+    protected String errorMessage() {\n+        return \"in step \" + step;\n+    }\n+\n+    \/**\n+     * Returns a Runnable that emulates KEY_PRESS + KEY_RELEASE events with the given KeyCode\n+     * and the specified modifiers.\n+     * @param k the key code\n+     * @param modifiers the modifiers\n+     * @return the Runnable\n+     *\/\n+    protected Runnable key(KeyCode k, KeyModifier ... modifiers) {\n+        KeyCode alt = KeyModifier.findAlt(modifiers);\n+        KeyCode ctrl = KeyModifier.findCtrl(modifiers);\n+        KeyCode meta = KeyModifier.findMeta(modifiers);\n+        KeyCode shift = KeyModifier.findShift(modifiers);\n+\n+        return () -> {\n+            \/\/ we don't have access to the shortcut key\n+            KeyCode shortcut = PlatformUtil.isMac() ? KeyCode.COMMAND : KeyCode.CONTROL;\n+            if (alt != null) {\n+                robot.keyPress(alt);\n+            }\n+            if (ctrl != null) {\n+                robot.keyPress(ctrl);\n+            }\n+            if (meta != null) {\n+                robot.keyPress(meta);\n+            }\n+            if (shift != null) {\n+                robot.keyPress(shift);\n+            }\n+\n+            robot.keyPress(k);\n+            robot.keyRelease(k);\n+\n+            if (shift != null) {\n+                robot.keyRelease(shift);\n+            }\n+            if (meta != null) {\n+                robot.keyRelease(meta);\n+            }\n+            if (ctrl != null) {\n+                robot.keyRelease(ctrl);\n+            }\n+            if (alt != null) {\n+                robot.keyRelease(alt);\n+            }\n+        };\n+    }\n+\n+    \/**\n+     * Returns a Runnable that emulates KEY_PRESS + KEY_RELEASE events with the given KeyCode\n+     * and the ALT modifier.\n+     * @param k the key code\n+     * @return the Runnable\n+     *\/\n+    protected Runnable alt(KeyCode k) {\n+        return key(k, KeyModifier.ALT);\n+    }\n+\n+    \/**\n+     * Returns a Runnable that emulates KEY_PRESS + KEY_RELEASE events with the given KeyCode\n+     * and the CTRL modifier.\n+     * @param k the key code\n+     * @return the Runnable\n+     *\/\n+    protected Runnable ctrl(KeyCode k) {\n+        return key(k, KeyModifier.CTRL);\n+    }\n+\n+    \/**\n+     * Returns a Runnable that emulates KEY_PRESS + KEY_RELEASE events with the given KeyCode\n+     * and the SHORTCUT modifier.\n+     * @param k the key code\n+     * @return the Runnable\n+     *\/\n+    protected Runnable shortcut(KeyCode k) {\n+        return key(k, KeyModifier.SHORTCUT);\n+    }\n+\n+    \/**\n+     * Returns a Runnable that emulates KEY_PRESS + KEY_RELEASE events with the given KeyCode\n+     * and the SHIFT modifier.\n+     * @param k the key code\n+     * @return the Runnable\n+     *\/\n+    protected Runnable shift(KeyCode k) {\n+        return key(k, KeyModifier.SHIFT);\n+    }\n+\n+    \/**\n+     * Convenience alias for Thread.sleep() that does not throw an exception.\n+     * @param ms the timout in milliseconds\n+     *\/\n+    protected void sleep(int ms) {\n+        try {\n+            Thread.sleep(1);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    \/**\n+     * Adds a logging event filter to the control under test which prints all KeyEvent's to stdout,\n+     * for the duration of a single test case.\n+     * @return the Runnable\n+     *\/\n+    protected Runnable addKeyListener() {\n+        return () -> {\n+            control.addEventFilter(KeyEvent.ANY, keyListener);\n+        };\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/control\/behavior\/BehaviorRobotTestBase.java","additions":346,"deletions":0,"binary":false,"changes":346,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control.behavior;\n+\n+import javafx.scene.input.KeyCode;\n+import com.sun.javafx.PlatformUtil;\n+\n+\/**\n+ * Key Modifiers for use in behavior tests.\n+ *\/\n+public enum KeyModifier {\n+    ALT,\n+    CTRL,\n+    COMMAND,\n+    META,\n+    OPTION,\n+    SHIFT,\n+    SHORTCUT;\n+\n+    public static KeyCode findAlt(KeyModifier[] modifiers) {\n+        for (KeyModifier m : modifiers) {\n+            switch (m) {\n+            case ALT:\n+                return KeyCode.ALT;\n+            case OPTION:\n+                if(PlatformUtil.isMac()) {\n+                    return KeyCode.ALT;\n+                }\n+                break;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public static KeyCode findCtrl(KeyModifier[] modifiers) {\n+        for (KeyModifier m : modifiers) {\n+            switch (m) {\n+            case CTRL:\n+                return KeyCode.CONTROL;\n+            case SHORTCUT:\n+                if (!PlatformUtil.isMac()) {\n+                    return KeyCode.CONTROL;\n+                }\n+                break;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public static KeyCode findMeta(KeyModifier[] modifiers) {\n+        for (KeyModifier m : modifiers) {\n+            switch (m) {\n+            case META:\n+                return KeyCode.META;\n+            case COMMAND:\n+            case SHORTCUT:\n+                if (PlatformUtil.isMac()) {\n+                    return KeyCode.COMMAND;\n+                }\n+                break;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public static KeyCode findShift(KeyModifier[] modifiers) {\n+        for (KeyModifier m : modifiers) {\n+            switch (m) {\n+            case SHIFT:\n+                return KeyCode.SHIFT;\n+            }\n+        }\n+        return null;\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/control\/behavior\/KeyModifier.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,395 @@\n+\/*\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.behavior;\n+\n+import static javafx.scene.input.KeyCode.*;\n+import javafx.scene.control.TextArea;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.PlatformUtil;\n+\n+\/**\n+ * Tests TextArea behavior by exercising every key binding not covered by TextAreaBehaviorTest,\n+ * since the mapped functions require rendered text.\n+ *\/\n+public class TextAreaBehaviorRobotTest extends TextInputBehaviorRobotTest<TextArea> {\n+\n+    public TextAreaBehaviorRobotTest() {\n+        super(new TextArea());\n+    }\n+\n+    @BeforeEach\n+    @Override\n+    public void beforeEach() {\n+        super.beforeEach();\n+        control.setWrapText(true);\n+    }\n+\n+    @Test\n+    public void testNavigation() throws Exception {\n+        execute(\n+            setText(\"0123456789\"),\n+            END, checkSelection(10),\n+            LEFT, LEFT, checkSelection(8),\n+            RIGHT, checkSelection(9),\n+            HOME, checkSelection(0),\n+            END, checkSelection(10),\n+            \/\/ home\n+            shortcut(HOME), checkSelection(0),\n+            \/\/ end\n+            shortcut(END), checkSelection(10)\n+        );\n+\n+        \/* FIX JDK-8316307\n+        \/\/ keypad\n+        execute(\n+            \/\/addKeyListener(),\n+            setText(\"0123456789\"), checkSelection(0),\n+            END, checkSelection(10),\n+            KP_LEFT, KP_LEFT, checkSelection(8), \/\/ FIX fails\n+            KP_RIGHT, checkSelection(9),\n+            HOME, checkSelection(0),\n+            END, checkSelection(10),\n+            \/\/ home\n+            shortcut(HOME), checkSelection(0),\n+            \/\/ end\n+            shortcut(END), checkSelection(10)\n+        );\n+        *\/\n+\n+        execute(\n+            setText(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n==\\n\"),\n+            checkSelection(0),\n+            \/\/ actual result depends on window\/font size, so we simply check that the cursor has moved\n+            PAGE_DOWN, check(() -> {\n+                return control.getSelection().getStart() != 0;\n+            }),\n+            PAGE_UP, checkSelection(0)\n+        );\n+\n+        execute(\n+            setText(\"1ab\\n2bc\\n3de\"),\n+            shortcut(HOME), checkSelection(0),\n+            END, checkSelection(3),\n+            DOWN, checkSelection(7),\n+            HOME, checkSelection(4),\n+            UP, checkSelection(0),\n+            shortcut(END), checkSelection(11)\n+        );\n+    }\n+\n+    @Test\n+    public void testDeletion() {\n+        execute(\n+            setText(\"0123456789\"),\n+            END, BACK_SPACE, checkText(\"012345678\"),\n+            shift(BACK_SPACE), checkText(\"01234567\"),\n+            HOME, DELETE, checkText(\"1234567\")\n+        );\n+\n+        if(!PlatformUtil.isMac()) {\n+            execute(\n+                setText(\"012\"), END,\n+                \/\/ delete previous char\n+                ctrl(H), checkText(\"01\", 2)\n+            );\n+        }\n+\n+        control.setEditable(false);\n+        execute(\n+            setText(\"0123456789\"),\n+            END, BACK_SPACE, checkText(\"0123456789\"),\n+            shift(BACK_SPACE), checkText(\"0123456789\"),\n+            HOME, DELETE, checkText(\"0123456789\")\n+        );\n+    }\n+\n+    @Test\n+    public void testSelection() {\n+        execute(\n+            setText(\"123\\n456\"),\n+            HOME, shift(RIGHT), checkSelection(0, 1),\n+            END, shift(LEFT), checkSelection(2, 3),\n+            HOME, shift(DOWN), checkSelection(0, 4),\n+            END, checkSelection(7), shift(UP), checkSelection(3, 7),\n+            HOME, checkSelection(0), shift(END), checkSelection(0, 3),\n+            END, checkSelection(3), shift(HOME), checkSelection(0, 3),\n+            HOME, checkSelection(0), shortcut(A), checkSelection(0, 7)\n+        );\n+\n+        \/* FIX JDK-8316307\n+        \/\/ keypad\n+        execute(\n+            setText(\"123\\n456\"), checkSelection(0),\n+            HOME, shift(KP_RIGHT), checkSelection(0, 1), \/\/ FIX fails step 29\n+            END, shift(KP_LEFT), checkSelection(2, 3),\n+            HOME, shift(KP_DOWN), checkSelection(0, 4),\n+            END, checkSelection(7), shift(KP_UP), checkSelection(3, 7),\n+            HOME, checkSelection(0), shift(END), checkSelection(0, 3),\n+            END, checkSelection(3), shift(HOME), checkSelection(0, 3),\n+            HOME, checkSelection(0), shortcut(A), checkSelection(0, 7)\n+        );\n+        *\/\n+\n+        execute(\n+            setText(\"1\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n====\\n\"),\n+            checkSelection(0),\n+            shift(PAGE_DOWN),\n+            checkSelection((start, end) -> {\n+                return (start == 0) && (end > 0);\n+            }),\n+            PAGE_DOWN,\n+            shift(PAGE_UP),\n+            checkSelection((start, end) -> {\n+                return\n+                    (start != end) &&\n+                    (end < control.getLength());\n+            })\n+        );\n+    }\n+\n+    @Test\n+    public void testMacBindings() {\n+        if (!PlatformUtil.isMac()) {\n+            return;\n+        }\n+\n+        \/\/ text input control mappings\n+        execute(\n+            setText(\"1ab\\n2cd\\n3de\"),\n+            \/\/ select end extend\n+            shift(END), checkSelection(0, 3),\n+            \/\/ home\n+            shortcut(LEFT), checkSelection(0),\n+            \/\/ end\n+            shortcut(RIGHT), checkSelection(3),\n+            \/\/ select home extend\n+            shift(HOME), checkSelection(0, 3),\n+            \/\/ select home extend\n+            END, key(LEFT, KeyModifier.SHORTCUT, KeyModifier.SHIFT), checkSelection(0, 3),\n+            \/\/ select end extend\n+            HOME, key(RIGHT, KeyModifier.SHORTCUT, KeyModifier.SHIFT), checkSelection(0, 3)\n+        );\n+\n+        \/* FIX JDK-8316307\n+        \/\/ keypad\n+        execute(\n+            \/\/addKeyListener(),\n+            setText(\"1ab\\n2cd\\n3de\"),\n+            \/\/ select end extend\n+            shift(END), checkSelection(0, 3),\n+            \/\/ home\n+            shortcut(KP_LEFT), checkSelection(0), \/\/ FIX fails\n+            \/\/ end\n+            shortcut(KP_RIGHT), checkSelection(3),\n+            \/\/ select home extend\n+            shift(HOME), checkSelection(0, 3),\n+            \/\/ select home extend\n+            END, key(KP_LEFT, Mod.SHORTCUT, Mod.SHIFT), checkSelection(0, 3),\n+            \/\/ select end extend\n+            HOME, key(KP_RIGHT, Mod.SHORTCUT, Mod.SHIFT), checkSelection(0, 3)\n+        );\n+        *\/\n+\n+        \/\/ delete from line start\n+        execute(\n+            setText(\"aaa bbb\\nccc ddd\"), shortcut(DOWN), checkSelection(15),\n+            shortcut(BACK_SPACE), checkText(\"aaa bbb\\n\", 8)\n+        );\n+\n+        \/\/ text area mappings\n+        execute(\n+            setText(\"1ab\\n2cd\\n3de\"), shortcut(DOWN), checkSelection(11),\n+            \/\/ line start\n+            UP, shortcut(LEFT), checkSelection(4),\n+            shortcut(RIGHT), checkSelection(7),\n+            \/\/ home\n+            shortcut(UP), checkSelection(0),\n+            \/\/ end\n+            shortcut(DOWN), checkSelection(11),\n+            \/\/ select line start\n+            key(LEFT, KeyModifier.SHIFT, KeyModifier.SHORTCUT), checkSelection(8, 11),\n+            \/\/ select line end\n+            HOME,\n+            key(RIGHT, KeyModifier.SHIFT, KeyModifier.SHORTCUT), checkSelection(8, 11),\n+            \/\/ select home extend\n+            key(UP, KeyModifier.SHIFT, KeyModifier.SHORTCUT), checkSelection(0, 11),\n+            \/\/ select end extend\n+            shortcut(UP), key(DOWN, KeyModifier.SHIFT, KeyModifier.SHORTCUT), checkSelection(0, 11)\n+        );\n+\n+        \/* FIX JDK-8316307\n+        \/\/ keypad\n+        execute(\n+            setText(\"1ab\\n2cd\\n3de\"), shortcut(KP_DOWN), checkSelection(11),\n+            \/\/ line start\n+            KP_UP, shortcut(LEFT), checkSelection(4),\n+            shortcut(KP_RIGHT), checkSelection(7),\n+            \/\/ home\n+            shortcut(KP_UP), checkSelection(0),\n+            \/\/ end\n+            shortcut(KP_DOWN), checkSelection(11),\n+            \/\/ select line start\n+            key(KP_LEFT, Mod.SHIFT, Mod.SHORTCUT), checkSelection(8, 11),\n+            \/\/ select line end\n+            HOME,\n+            key(KP_RIGHT, Mod.SHIFT, Mod.SHORTCUT), checkSelection(8, 11),\n+            \/\/ select home extend\n+            key(KP_UP, Mod.SHIFT, Mod.SHORTCUT), checkSelection(0, 11),\n+            \/\/ select end extend\n+            shortcut(KP_UP), key(KP_DOWN, Mod.SHIFT, Mod.SHORTCUT), checkSelection(0, 11)\n+        );\n+        *\/\n+\n+        \/\/ paragraph\n+        execute(\n+            exe(() -> control.setWrapText(true)),\n+            setText(\n+                \"aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa\\n\" +\n+                \"bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb\\n\" +\n+                \"cccccccccc cccccccccc cccccccccc cccccccccc cccccccccc cccccccccc cccccccccc cccccccccc\\n\"\n+            ),\n+            \/\/ move\n+            alt(DOWN), checkSelection(87),\n+            alt(DOWN), checkSelection(175),\n+            alt(DOWN), checkSelection(263),\n+            alt(UP), checkSelection(176),\n+            alt(UP), checkSelection(88),\n+            \/\/ select\n+            shortcut(UP), checkSelection(0),\n+            key(DOWN, KeyModifier.ALT, KeyModifier.SHIFT), checkSelection(0, 87),\n+            key(DOWN, KeyModifier.ALT, KeyModifier.SHIFT), checkSelection(0, 175),\n+            key(DOWN, KeyModifier.ALT, KeyModifier.SHIFT), checkSelection(0, 263),\n+            key(UP, KeyModifier.ALT, KeyModifier.SHIFT), checkSelection(0, 176),\n+            key(UP, KeyModifier.ALT, KeyModifier.SHIFT), checkSelection(0, 88)\n+        );\n+\n+        \/* FIX JDK-8316307\n+        \/\/ keypad\n+        execute(\n+            exe(() -> control.setWrapText(true)),\n+            setText(\n+                \"aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa\\n\" +\n+                \"bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb\\n\" +\n+                \"cccccccccc cccccccccc cccccccccc cccccccccc cccccccccc cccccccccc cccccccccc cccccccccc\\n\"\n+            ),\n+            \/\/ move\n+            alt(KP_DOWN), checkSelection(87),\n+            alt(KP_DOWN), checkSelection(175),\n+            alt(KP_DOWN), checkSelection(263),\n+            alt(KP_UP), checkSelection(176),\n+            alt(KP_UP), checkSelection(88),\n+            \/\/ select\n+            shortcut(KP_UP), checkSelection(0),\n+            key(KP_DOWN, Mod.ALT, Mod.SHIFT), checkSelection(0, 87),\n+            key(KP_DOWN, Mod.ALT, Mod.SHIFT), checkSelection(0, 175),\n+            key(KP_DOWN, Mod.ALT, Mod.SHIFT), checkSelection(0, 263),\n+            key(KP_UP, Mod.ALT, Mod.SHIFT), checkSelection(0, 176),\n+            key(KP_UP, Mod.ALT, Mod.SHIFT), checkSelection(0, 88)\n+        );\n+        *\/\n+    }\n+\n+    @Test\n+    public void testNonMacBindings() {\n+        if (PlatformUtil.isMac()) {\n+            return;\n+        }\n+\n+        \/\/ paragraph\n+        execute(\n+            exe(() -> control.setWrapText(true)),\n+            setText(\n+                \"aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa\\n\" +\n+                \"bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb\\n\" +\n+                \"cccccccccc cccccccccc cccccccccc cccccccccc cccccccccc cccccccccc cccccccccc cccccccccc\\n\"\n+            ),\n+            \/\/ move\n+            ctrl(DOWN), checkSelection(88),\n+            ctrl(DOWN), checkSelection(176),\n+            ctrl(DOWN), checkSelection(264),\n+            ctrl(UP), checkSelection(176),\n+            ctrl(UP), checkSelection(88),\n+            \/\/ select\n+            shortcut(UP), checkSelection(0),\n+            key(DOWN, KeyModifier.CTRL, KeyModifier.SHIFT), checkSelection(0, 88),\n+            key(DOWN, KeyModifier.CTRL, KeyModifier.SHIFT), checkSelection(0, 176),\n+            key(DOWN, KeyModifier.CTRL, KeyModifier.SHIFT), checkSelection(0, 264),\n+            key(UP, KeyModifier.CTRL, KeyModifier.SHIFT), checkSelection(0, 176),\n+            key(UP, KeyModifier.CTRL, KeyModifier.SHIFT), checkSelection(0, 88)\n+        );\n+\n+        \/* FIX JDK-8316307\n+        \/\/ keypad\n+        execute(\n+            exe(() -> control.setWrapText(true)),\n+            setText(\n+                \"aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa aaaaaaaaaa\\n\" +\n+                \"bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb bbbbbbbbbb\\n\" +\n+                \"cccccccccc cccccccccc cccccccccc cccccccccc cccccccccc cccccccccc cccccccccc cccccccccc\\n\"\n+            ),\n+            \/\/ move\n+            ctrl(KP_DOWN), checkSelection(88),\n+            ctrl(KP_DOWN), checkSelection(176),\n+            ctrl(KP_DOWN), checkSelection(264),\n+            ctrl(KP_UP), checkSelection(176),\n+            ctrl(KP_UP), checkSelection(88),\n+            \/\/ select\n+            shortcut(UP), checkSelection(0),\n+            key(KP_DOWN, Mod.CTRL, Mod.SHIFT), checkSelection(0, 88),\n+            key(KP_DOWN, Mod.CTRL, Mod.SHIFT), checkSelection(0, 176),\n+            key(KP_DOWN, Mod.CTRL, Mod.SHIFT), checkSelection(0, 264),\n+            key(KP_UP, Mod.CTRL, Mod.SHIFT), checkSelection(0, 176),\n+            key(KP_UP, Mod.CTRL, Mod.SHIFT), checkSelection(0, 88)\n+        );\n+        *\/\n+    }\n+\n+    @Test\n+    public void testEditing() {\n+        execute(\n+            setText(\"a\"), END,\n+            TAB, checkText(\"a\\t\", 2),\n+            ENTER, checkText(\"a\\t\\n\", 3)\n+        );\n+\n+        \/\/ not editable\n+        control.setText(null);\n+        control.setEditable(false);\n+        execute(\n+            \"\\t\", checkText(null),\n+            ENTER, checkText(null)\n+        );\n+    }\n+\n+    public void testWordMac() {\n+        \/\/ tested by headless test, see TextAreaBehaviorTest\n+    }\n+\n+    public void testWordNonMac() {\n+        \/\/ tested by headless test, see TextAreaBehaviorTest\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/control\/behavior\/TextAreaBehaviorRobotTest.java","additions":395,"deletions":0,"binary":false,"changes":395,"status":"added"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control.behavior;\n+\n+import javafx.scene.control.IndexRange;\n+import javafx.scene.control.TextInputControl;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+\n+\/**\n+ * Base class for Robot testing TextInputControl descendants' behavior.\n+ *\/\n+public abstract class TextInputBehaviorRobotTest<C extends TextInputControl> extends BehaviorRobotTestBase<C> {\n+\n+    protected TextInputBehaviorRobotTest(C control) {\n+        super(control);\n+    }\n+\n+    @BeforeEach\n+    @Override\n+    public void beforeEach() {\n+        super.beforeEach();\n+        \/\/ a good initial state\n+        control.setText(\"\");\n+        control.setEditable(true);\n+    }\n+\n+    \/**\n+     * Returns a Runnable that sets the specified text on the control.\n+     * @param text the text to set\n+     * @return the Runnable\n+     *\/\n+    protected Runnable setText(String text) {\n+        return () -> {\n+            control.setText(text);\n+        };\n+    }\n+\n+    \/**\n+     * Returns a Runnable that checks the control's text against the expected value.\n+     * @param expected the expected text\n+     * @return the Runnable\n+     *\/\n+    protected Runnable checkText(String expected) {\n+        return () -> {\n+            String v = control.getText();\n+            Assertions.assertEquals(expected, v, errorMessage());\n+        };\n+    }\n+\n+    \/**\n+     * Returns a Runnable that checks the control's text and selection indexes against the expected values.\n+     * @param expected the expected text\n+     * @param start the expected selection start index\n+     * @param end the expected selection end index\n+     * @return the Runnable\n+     *\/\n+    protected Runnable checkText(String expected, int start, int end) {\n+        return () -> {\n+            String s = control.getText();\n+            Assertions.assertEquals(expected, s, errorMessage());\n+\n+            IndexRange v = control.getSelection();\n+            IndexRange expectedSelection = new IndexRange(start, end);\n+            Assertions.assertEquals(expectedSelection, v, errorMessage());\n+        };\n+    }\n+\n+    \/**\n+     * Returns a Runnable that checks the control's text and selection indexes against the expected values.\n+     * @param expected the expected text\n+     * @param index the expected selection start and end index\n+     * @return the Runnable\n+     *\/\n+    protected Runnable checkText(String expected, int index) {\n+        return checkText(expected, index, index);\n+    }\n+\n+    \/**\n+     * Returns a Runnable that checks the control's selection indexes against the expected values.\n+     * @param start the expected selection start index\n+     * @param end the expected selection end index\n+     * @return the Runnable\n+     *\/\n+    protected Runnable checkSelection(int start, int end) {\n+        return () -> {\n+            IndexRange v = control.getSelection();\n+            IndexRange expected = new IndexRange(start, end);\n+            Assertions.assertEquals(expected, v, errorMessage());\n+        };\n+    }\n+\n+    \/**\n+     * Returns a Runnable that checks the control's selection indexe against the expected value.\n+     * @param index the expected selection start and end index\n+     * @return the Runnable\n+     *\/\n+    protected Runnable checkSelection(int index) {\n+        return checkSelection(index, index);\n+    }\n+\n+    \/**\n+     * Returns a Runnable that checks the control's selection indexes against the specified testers.\n+     * @param tester the selection tester\n+     * @return the Runnable\n+     *\/\n+    protected Runnable checkSelection(SelectionChecker tester) {\n+        return () -> {\n+            IndexRange r = control.getSelection();\n+            Assertions.assertTrue(tester.test(r.getStart(), r.getEnd()), errorMessage() + \" (selection=\" + r + \")\");\n+        };\n+    }\n+\n+    @FunctionalInterface\n+    public static interface SelectionChecker {\n+        public boolean test(int start, int end);\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/control\/behavior\/TextInputBehaviorRobotTest.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"}]}