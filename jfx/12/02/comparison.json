{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -972,1 +972,1 @@\n-            \/\/ stripping out apostrophe characters, which are appended to either\n+            \/\/ stripping out apostrophe and quote characters, which are appended to either\n@@ -974,1 +974,1 @@\n-            if (fontFamilyStr.startsWith(\"'\")) {\n+            if (fontFamilyStr.startsWith(\"'\") || fontFamilyStr.startsWith(\"\\\"\")) {\n@@ -977,2 +977,2 @@\n-            if (fontFamilyStr.endsWith(\"'\")) {\n-                fontFamilyStr = fontFamilyStr.substring(0,fontFamilyStr.length() - 1);\n+            if (fontFamilyStr.endsWith(\"'\") || fontFamilyStr.endsWith(\"\\\"\")) {\n+                fontFamilyStr = fontFamilyStr.substring(0, fontFamilyStr.length() - 1);\n","filename":"modules\/javafx.web\/src\/main\/java\/javafx\/scene\/web\/HTMLEditorSkin.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,0 +100,6 @@\n+        \/\/ Used by selectAgainFontFamilyWithSpace() for JDK-8230231\n+        Font.loadFont(\n+                HTMLEditorTest.class.getResource(\"WebKitWeightWatcher100.ttf\").toExternalForm(),\n+                10\n+        );\n+\n@@ -362,0 +368,115 @@\n+    \/**\n+     * @test\n+     * @bug 8230231\n+     * Summary Check font-family ComboBox change on font name with space in it\n+     *\/\n+    @Test\n+    public void selectAgainFontFamilyWithSpace() {\n+        final CountDownLatch initLatch = new CountDownLatch(1);\n+        final CountDownLatch fontSetupLatch = new CountDownLatch(1);\n+        final AtomicReference<String> result = new AtomicReference<>();\n+        final String editorCommand1 =\n+                \"document.execCommand('insertText', false, 'Hello World');\";\n+\n+        Util.runAndWait(() -> {\n+            webView.getEngine().getLoadWorker().stateProperty().\n+                    addListener((observable, oldValue, newValue) -> {\n+                        if (newValue == SUCCEEDED) {\n+                            htmlEditor.requestFocus();\n+                        }\n+                    });\n+\n+\n+            htmlEditor.setHtmlText(htmlEditor.getHtmlText());\n+            webView.focusedProperty().addListener((observable, oldValue, newValue) -> {\n+                if (newValue) {\n+                    webView.getEngine().executeScript(\"document.body.focus();\");\n+                    webView.getEngine().executeScript(editorCommand1);\n+\n+                    initLatch.countDown();\n+                }\n+            });\n+        });\n+\n+        assertTrue(\"Timeout while waiting for test html text setup\", Util.await(initLatch));\n+\n+        \/\/ Select 'World' word\n+        Util.runAndWait(() -> {\n+            KeyEventFirer keyboard = new KeyEventFirer(htmlEditor, scene);\n+            for (int i = 0; i < 5; i++) {\n+                keyboard.doLeftArrowPress(KeyModifier.SHIFT);\n+            }\n+\n+            \/\/ Find font-family ComboBox\n+            ComboBox<String> fontFamilyComboBox = null;\n+            int i = 0;\n+            for (Node comboBox : htmlEditor.lookupAll(\".font-menu-button\")) {\n+                \/\/ 0 - Format, 1 - Font Family, 2 - Font Size\n+                if (i == 1) {\n+                    assertTrue(\"fontFamilyComboBox must be ComboBox\",\n+                            comboBox instanceof ComboBox);\n+                    fontFamilyComboBox = (ComboBox<String>) comboBox;\n+                    assertNotNull(\"fontFamilyComboBox must not be null\",\n+                            fontFamilyComboBox);\n+                }\n+                i++;\n+            }\n+            \/\/ 'World' takes the font with space\n+            fontFamilyComboBox.getSelectionModel().select(\"WebKit Layout Tests 2\");\n+\n+\n+            \/\/ Actually unselect 'World'\n+            keyboard.doLeftArrowPress();\n+\n+            \/\/ Go after the blank space between 'Hello' and 'World'\n+            keyboard.doLeftArrowPress();\n+\n+            \/\/ Select 'Hello'\n+            for (int j = 0; j < 5; j++) {\n+                keyboard.doLeftArrowPress(KeyModifier.SHIFT);\n+            }\n+\n+            \/\/ 'Hello' takes the font without space\n+            fontFamilyComboBox.getSelectionModel().select(\"WebKitWeightWatcher100\");\n+\n+            \/\/ Unselect 'Hello'\n+            keyboard.doRightArrowPress();\n+\n+            \/\/ Go after blank space between 'Hello' and 'World'\n+            keyboard.doRightArrowPress();\n+\n+            \/\/ Position the caret inside 'World'.\n+            keyboard.doRightArrowPress();\n+            fontSetupLatch.countDown();\n+        });\n+\n+        assertTrue(\"Timeout when waiting for focus change \", Util.await(fontSetupLatch));\n+\n+        final CountDownLatch retrieveFontLatch = new CountDownLatch(1);\n+\n+        Util.runAndWait(() -> {\n+            ComboBox<String> fontFamilyComboBox = null;\n+            int i = 0;\n+            for (Node comboBox : htmlEditor.lookupAll(\".font-menu-button\")) {\n+                \/\/ 0 - Format, 1 - Font Family, 2 - Font Size\n+                if (i == 1) {\n+                    assertTrue(\"fontFamilyComboBox must be ComboBox\",\n+                            comboBox instanceof ComboBox);\n+                    fontFamilyComboBox = (ComboBox<String>) comboBox;\n+                    assertNotNull(\"fontFamilyComboBox must not be null\",\n+                            fontFamilyComboBox);\n+                }\n+                i++;\n+            }\n+            \/\/ Retrieve the selected font\n+            result.set(fontFamilyComboBox.getSelectionModel().getSelectedItem());\n+            retrieveFontLatch.countDown();\n+        });\n+\n+\n+        assertTrue(\"Timeout when waiting for font selection \", Util.await(retrieveFontLatch));\n+        assertNotNull(\"result must have a valid reference \", result.get());\n+        assertTrue(\"font-family must be 'WebKit Layout Test 2', it was\" + result.get(), result.get().\n+                contains(\"WebKit Layout Tests 2\"));\n+    }\n+\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/HTMLEditorTest.java","additions":122,"deletions":1,"binary":false,"changes":123,"status":"modified"},{"patch":"","filename":"tests\/system\/src\/test\/resources\/test\/javafx\/scene\/web\/WebKitWeightWatcher100.ttf","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"modules\/javafx.web\/src\/main\/native\/Tools\/DumpRenderTree\/fonts\/WebKitWeightWatcher100.ttf","status":"copied"}]}