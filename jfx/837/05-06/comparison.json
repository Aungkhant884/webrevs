{"files":[{"patch":"@@ -46,0 +46,31 @@\n+    \/**\n+     * Event emission states.\n+     *\n+     * <h3>Allowed Transitions:<\/h3>\n+     *\n+     * <table rules=\"all\" cellpadding=4px>\n+     * <tr><th>Current<\/th><th>Next<\/th><\/tr>\n+     * <tr><td>{@code IDLE}<\/td><td>{@code REQUESTED}<\/td><\/tr>\n+     * <tr><td>{@code REQUESTED}<\/td><td>{@code RUNNING}<\/td><\/tr>\n+     * <tr><td>{@code RUNNING}<\/td><td>{@code REQUESTED} or {@code IDLE}<\/td><\/tr>\n+     * <\/table>\n+     *\/\n+    private enum Emission {\n+\n+        \/**\n+         * No event emission is running.\n+         *\/\n+        IDLE,\n+\n+        \/**\n+         * An event emission is in progress.\n+         *\/\n+        RUNNING,\n+\n+        \/**\n+         * An event emission is requested; if one is running, it will\n+         * run immediately after the current one finishes.\n+         *\/\n+        REQUESTED\n+    }\n+\n@@ -147,0 +178,1 @@\n+        private Emission emission = Emission.IDLE;\n@@ -176,8 +208,22 @@\n-            final T oldValue = currentValue;\n-            currentValue = observable.getValue();\n-            final boolean changed = (currentValue == null)? (oldValue != null) : !currentValue.equals(oldValue);\n-            if (changed) {\n-                try {\n-                    listener.changed(observable, oldValue, currentValue);\n-                } catch (Exception e) {\n-                    Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);\n+            boolean idle = emission == Emission.IDLE;\n+\n+            emission = Emission.REQUESTED;\n+\n+            if (!idle) {\n+                return;\n+            }\n+\n+            try {\n+                while (emission == Emission.REQUESTED) {\n+                    emission = Emission.RUNNING;\n+\n+                    final T oldValue = currentValue;\n+                    currentValue = observable.getValue();\n+                    final boolean changed = (currentValue == null)? (oldValue != null) : !currentValue.equals(oldValue);\n+                    if (changed) {\n+                        try {\n+                            listener.changed(observable, oldValue, currentValue);\n+                        } catch (Exception e) {\n+                            Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);\n+                        }\n+                    }\n@@ -186,0 +232,3 @@\n+            finally {\n+                emission = Emission.IDLE;\n+            }\n@@ -195,2 +244,1 @@\n-        private boolean locked;\n-        private boolean nestedEmission;\n+        private Emission emission = Emission.IDLE;\n@@ -228,1 +276,1 @@\n-                if (locked) {\n+                if (emission != Emission.IDLE) {\n@@ -259,1 +307,1 @@\n-                            if (locked) {\n+                            if (emission != Emission.IDLE) {\n@@ -267,1 +315,1 @@\n-                            if (!locked) {\n+                            if (emission == Emission.IDLE) {\n@@ -285,1 +333,1 @@\n-                if (locked) {\n+                if (emission != Emission.IDLE) {\n@@ -319,1 +367,1 @@\n-                            if (locked) {\n+                            if (emission != Emission.IDLE) {\n@@ -327,1 +375,1 @@\n-                            if (!locked) {\n+                            if (emission == Emission.IDLE) {\n@@ -340,1 +388,3 @@\n-            nestedEmission = true;\n+            boolean idle = emission == Emission.IDLE;\n+\n+            emission = Emission.REQUESTED;\n@@ -342,1 +392,1 @@\n-            if (locked) {\n+            if (!idle) {\n@@ -352,1 +402,0 @@\n-                locked = true;\n@@ -355,2 +404,2 @@\n-                while (nestedEmission) {\n-                    nestedEmission = false;\n+                while (emission == Emission.REQUESTED) {\n+                    emission = Emission.RUNNING;\n@@ -385,1 +434,1 @@\n-                locked = false;\n+                emission = Emission.IDLE;\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ExpressionHelper.java","additions":71,"deletions":22,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -506,3 +506,0 @@\n-        System.out.println(recording1);\n-        System.out.println(recording3);\n-        System.out.println(recording2);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ExpressionHelperTest.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -166,1 +166,2 @@\n-     * Tests if the embedded ObservableValue sends sensible change events when a nested change occurs.\n+     * Tests if the embedded ObservableValue sends sensible change events when a nested change occurs,\n+     * and that the change listeners are not called recursively (always enter->exit->enter->exit, not enter->enter->exit->exit).\n@@ -177,1 +178,1 @@\n-        action.addListener((obs, old, current) -> records.add(\"Change of 0 from \" + old + \" to \" + current));\n+        action.addListener((obs, old, current) -> records.add(\"A: \" + old + \" -> \" + current));\n@@ -179,1 +180,1 @@\n-            records.add(\"Change of 1 from \" + old + \" to \" + current);\n+            records.add(\"B enter: \" + old + \" -> \" + current);\n@@ -183,0 +184,1 @@\n+            records.add(\"B exit: \" + old + \" -> \" + current);\n@@ -184,1 +186,1 @@\n-        action.addListener((obs, old, current) -> records.add(\"Change of 2 from \" + old + \" to \" + current));\n+        action.addListener((obs, old, current) -> records.add(\"C: \" + old + \" -> \" + current));\n@@ -199,6 +201,52 @@\n-                \"Change of 0 from \" + value1 + \" to \" + value2,\n-                \"Change of 1 from \" + value1 + \" to \" + value2,\n-                \"Change of 2 from \" + value1 + \" to \" + value2,\n-                \"Change of 0 from \" + value2 + \" to \" + value1,\n-                \"Change of 1 from \" + value2 + \" to \" + value1,\n-                \"Change of 2 from \" + value2 + \" to \" + value1\n+                \"A: \" + value1 + \" -> \" + value2,\n+                \"B enter: \" + value1 + \" -> \" + value2,\n+                \"B exit: \" + value1 + \" -> \" + value2,\n+                \"C: \" + value1 + \" -> \" + value2,\n+                \"A: \" + value2 + \" -> \" + value1,\n+                \"B enter: \" + value2 + \" -> \" + value1,\n+                \"B exit: \" + value2 + \" -> \" + value1,\n+                \"C: \" + value2 + \" -> \" + value1\n+            ),\n+            records\n+        );\n+    }\n+\n+    \/*\n+     * Tests if the embedded ObservableValue sends sensible change events when a nested change occurs\n+     * when there is only one listener, and that the change listeners are not called recursively\n+     * (always enter->exit->enter->exit, not enter->enter->exit->exit).\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"inputs\")\n+    <T> void shouldSendCorrectNestedEventsWithOneListener(Action<T> action, T value1, T value2, Consumer<T> valueSetter) {\n+        List<String> records = new ArrayList<>();\n+\n+        \/*\n+         * Create one listener, which modifies the value back to value1.\n+         *\/\n+\n+        action.addListener((obs, old, current) -> {\n+            records.add(\"B enter: \" + old + \" -> \" + current);\n+            if(current.equals(value2)) {\n+                valueSetter.accept(value1);\n+            }\n+            records.add(\"B exit: \" + old + \" -> \" + current);\n+        });\n+\n+        \/*\n+         * Start test:\n+         *\/\n+\n+        valueSetter.accept(value2);\n+\n+        \/*\n+         * Verify the current implementation specific result (there are more combinations that could be considered\n+         * correct, but the test case simplifies this for now):\n+         *\/\n+\n+        assertEquals(\n+            List.of(\n+                \"B enter: \" + value1 + \" -> \" + value2,\n+                \"B exit: \" + value1 + \" -> \" + value2,\n+                \"B enter: \" + value2 + \" -> \" + value1,\n+                \"B exit: \" + value2 + \" -> \" + value1\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/ObservableValueTest.java","additions":58,"deletions":10,"binary":false,"changes":68,"status":"modified"}]}