{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,6 @@\n+import javafx.scene.control.ComboBoxBase;\n+import javafx.scene.control.SelectionModel;\n+import com.sun.javafx.scene.control.inputmap.InputMap;\n+\n+import static javafx.scene.input.KeyCode.DOWN;\n+import static javafx.scene.input.KeyCode.UP;\n@@ -31,0 +37,10 @@\n+\n+    \/***************************************************************************\n+     *                                                                         *\n+     * Constructors                                                            *\n+     *                                                                         *\n+     **************************************************************************\/\n+\n+    \/**\n+     *\n+     *\/\n@@ -33,0 +49,30 @@\n+\n+        \/\/ Add these bindings as a child input map, so they take precedence\n+        InputMap<ComboBoxBase<T>> comboBoxListViewInputMap = new InputMap<>(comboBox);\n+        comboBoxListViewInputMap.getMappings().addAll(\n+            new InputMap.KeyMapping(UP, e -> selectPrevious()),\n+            new InputMap.KeyMapping(DOWN, e -> selectNext())\n+        );\n+        addDefaultChildMap(getInputMap(), comboBoxListViewInputMap);\n+    }\n+\n+    \/***************************************************************************\n+     *                                                                         *\n+     * Key event handling                                                      *\n+     *                                                                         *\n+     **************************************************************************\/\n+\n+    private ComboBox<T> getComboBox() {\n+        return (ComboBox<T>) getNode();\n+    }\n+\n+    private void selectPrevious() {\n+        SelectionModel<T> sm = getComboBox().getSelectionModel();\n+        if (sm == null) return;\n+        sm.selectPrevious();\n+    }\n+\n+    private void selectNext() {\n+        SelectionModel<T> sm = getComboBox().getSelectionModel();\n+        if (sm == null) return;\n+        sm.selectNext();\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/ComboBoxListViewBehavior.java","additions":47,"deletions":1,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1311,0 +1311,21 @@\n+    @Test public void testEditorKeyInputsWhenPopupIsNotShowing() {\n+        final ComboBox<String> cb = new ComboBox<>(FXCollections.observableArrayList(\"a\", \"b\"));\n+        sl = new StageLoader(cb);\n+        KeyEventFirer keyboard = new KeyEventFirer(cb);\n+        cb.requestFocus();\n+\n+        \/\/ Sanity\n+        assertFalse(cb.isShowing());\n+        assertEquals(null, cb.getValue());\n+\n+        \/\/ Test DOWN and UP key\n+        keyboard.doKeyPress(KeyCode.DOWN);\n+        assertEquals(\"a\", cb.getValue());\n+        keyboard.doKeyPress(KeyCode.DOWN);\n+        assertEquals(\"b\", cb.getValue());\n+        keyboard.doKeyPress(KeyCode.UP);\n+        assertEquals(\"a\", cb.getValue());\n+        keyboard.doKeyPress(KeyCode.UP);\n+        assertEquals(\"a\", cb.getValue());\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ComboBoxTest.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"}]}