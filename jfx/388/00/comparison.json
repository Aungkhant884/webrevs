{"files":[{"patch":"@@ -322,0 +322,1 @@\n+                    getRootPath(i).clear();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/ViewPainter.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.tk.quantum;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.text.Text;\n+import javafx.scene.text.TextFlow;\n+import javafx.stage.Stage;\n+import javafx.stage.WindowEvent;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import test.util.Util;\n+import test.util.memory.JMemoryBuddy;\n+\n+import static org.junit.Assert.*;\n+\n+public class ViewPainterLeakTest {\n+\n+    private static CountDownLatch startupLatch;\n+    private static Stage stage;\n+    private static ScrollPane scrollPane;\n+    private static WeakReference<Scene> sceneRef;\n+\n+    private static final String text =\n+            \"The quick brown fox jumps over the lazy dog.\" +\n+            \" \" +\n+            \"The quick brown fox jumps over the lazy dog.\";\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage stage) {\n+            ViewPainterLeakTest.stage = stage;\n+\n+            Platform.setImplicitExit(false);\n+\n+            TextFlow content = new TextFlow(new Text(text));\n+            scrollPane = new ScrollPane(content);\n+            StackPane root = new StackPane(scrollPane);\n+\n+            Scene scene = new Scene(root, 200, 100);\n+            sceneRef = new WeakReference<>(scene);\n+            stage.setScene(scene);\n+\n+            stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> {\n+                Platform.runLater(() -> {\n+                    startupLatch.countDown();\n+                });\n+            });\n+            stage.show();\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void setupOnce() throws Exception {\n+        startupLatch = new CountDownLatch(1);\n+        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n+        assertTrue(\"Timeout waiting for FX runtime to start\",\n+                startupLatch.await(15, TimeUnit.SECONDS));\n+    }\n+\n+    @AfterClass\n+    public static void teardown() {\n+        Platform.exit();\n+    }\n+\n+    @Test\n+    public void testViewPainterLeak() {\n+        \/\/ Wait for some time to make sure the initial content is displayed\n+        Util.sleep(500);\n+\n+        \/\/ This will trigger the leak\n+        Util.runAndWait(() -> scrollPane.setHvalue(0.5));\n+\n+        \/\/ Wait for some time to make sure the scrolled content is displayed\n+        Util.sleep(500);\n+        Util.runAndWait(() -> {\n+            stage.hide();\n+            stage = null;\n+            scrollPane = null;\n+        });\n+        JMemoryBuddy.assertCollectable(sceneRef);\n+    }\n+\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/tk\/quantum\/ViewPainterLeakTest.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}