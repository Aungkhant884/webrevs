{"files":[{"patch":"@@ -30,1 +30,0 @@\n-import com.sun.javafx.application.preferences.ApplicationPreferences;\n@@ -1053,1 +1052,1 @@\n-        if (applicationPreferences == null) {\n+        if (platformPreferences == null) {\n@@ -1060,10 +1059,0 @@\n-    private static ApplicationPreferences applicationPreferences;\n-\n-    public static ApplicationPreferences getApplicationPreferences() {\n-        if (applicationPreferences == null) {\n-            throw new IllegalStateException(\"Toolkit not initialized\");\n-        }\n-\n-        return applicationPreferences;\n-    }\n-\n@@ -1079,3 +1068,0 @@\n-\n-        applicationPreferences = new ApplicationPreferences(wellKnownKeys);\n-        applicationPreferences.update(preferences);\n@@ -1097,1 +1083,0 @@\n-            applicationPreferences.update(preferences);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformImpl.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1,153 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.javafx.application.preferences;\n-\n-import javafx.application.Appearance;\n-import javafx.application.Application;\n-import javafx.scene.paint.Color;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Objects;\n-\n-\/**\n- * Contains the implementation of a map of application preferences.\n- * <p>\n- * Like {@link PlatformPreferences}, this map is updated when the operating system signals that a\n- * preference has changed. This map also supports overriding existing mappings with the\n- * {@link #put(String, Object)} operation. Overridden mappings can be reset to their platform\n- * defaults by invoking {@link #reset(String)} or {@link #reset()}.\n- *\/\n-public final class ApplicationPreferences extends PlatformPreferences implements Application.Preferences {\n-\n-    private final Map<String, Object> platformPreferences = new HashMap<>();\n-    private final Map<String, Object> userPreferences = new HashMap<>();\n-\n-    public ApplicationPreferences(Map<String, String> wellKnownKeys) {\n-        super(wellKnownKeys);\n-    }\n-\n-    @Override\n-    public Object put(String key, Object value) {\n-        Objects.requireNonNull(key, \"key cannot be null\");\n-        Objects.requireNonNull(value, \"value cannot be null\");\n-        Object effectiveValue = effectivePreferences.get(key);\n-\n-        if (effectiveValue != null && !effectiveValue.getClass().isInstance(value)) {\n-            throw new IllegalArgumentException(\n-                \"Cannot override a value of type \" + effectiveValue.getClass().getName() +\n-                \" with a value of type \" + value.getClass().getName());\n-        }\n-\n-        userPreferences.put(key, value);\n-        effectivePreferences.put(key, value);\n-\n-        if (!Objects.equals(effectiveValue, value)) {\n-            var changedPreferences = Map.of(key, new ChangedValue(effectiveValue, value));\n-            properties.update(changedPreferences, wellKnownKeys);\n-            fireValueChangedEvent(changedPreferences);\n-        }\n-\n-        return effectiveValue;\n-    }\n-\n-    @Override\n-    public void reset(String key) {\n-        Objects.requireNonNull(key, \"key cannot be null\");\n-        Object oldValue = effectivePreferences.get(key);\n-        Object newValue;\n-\n-        userPreferences.remove(key);\n-\n-        if (platformPreferences.containsKey(key)) {\n-            newValue = platformPreferences.get(key);\n-            effectivePreferences.put(key, newValue);\n-        } else {\n-            newValue = null;\n-            effectivePreferences.remove(key);\n-        }\n-\n-        boolean changed = oldValue instanceof Object[] array ?\n-            !Arrays.equals(array, (Object[])newValue) : !Objects.equals(oldValue, newValue);\n-\n-        if (changed) {\n-            var changedPreferences = Map.of(key, new ChangedValue(oldValue, newValue));\n-            properties.update(changedPreferences, wellKnownKeys);\n-            fireValueChangedEvent(changedPreferences);\n-        }\n-    }\n-\n-    @Override\n-    public void reset() {\n-        forEach((key, value) -> reset(key));\n-    }\n-\n-    \/**\n-     * Updates this map of preferences with a new set of application preferences.\n-     * The specified preferences may include all available preferences, or only the changed preferences.\n-     *\/\n-    @Override\n-    public void update(Map<String, Object> preferences) {\n-        Map<String, Object> currentEffectivePreferences = Map.copyOf(effectivePreferences);\n-\n-        \/\/ The given preference map may contain null values, which indicates that a mapping was removed.\n-        platformPreferences.putAll(preferences);\n-        platformPreferences.entrySet().removeIf(entry -> entry.getValue() == null);\n-        effectivePreferences.clear();\n-        effectivePreferences.putAll(platformPreferences);\n-        effectivePreferences.putAll(userPreferences);\n-\n-        \/\/ Only fire change notifications if any preference has effectively changed.\n-        Map<String, ChangedValue> effectivelyChangedPreferences =\n-            ChangedValue.getEffectiveChanges(currentEffectivePreferences, effectivePreferences);\n-\n-        if (!effectivelyChangedPreferences.isEmpty()) {\n-            properties.update(effectivelyChangedPreferences, wellKnownKeys);\n-            fireValueChangedEvent(effectivelyChangedPreferences);\n-        }\n-    }\n-\n-    @Override\n-    public void setAppearance(Appearance appearance) {\n-        properties.setAppearance(appearance);\n-    }\n-\n-    @Override\n-    public void setBackgroundColor(Color color) {\n-        properties.setBackgroundColor(color);\n-    }\n-\n-    @Override\n-    public void setForegroundColor(Color color) {\n-        properties.setForegroundColor(color);\n-    }\n-\n-    @Override\n-    public void setAccentColor(Color color) {\n-        properties.setAccentColor(color);\n-    }\n-\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/ApplicationPreferences.java","additions":0,"deletions":153,"binary":false,"changes":153,"status":"deleted"},{"patch":"@@ -42,0 +42,4 @@\n+     *\n+     * @param old the old mappings\n+     * @param current the current mappings\n+     * @return a mapping of keys to changed values\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/ChangedValue.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,5 @@\n-    final PreferenceProperties properties = new PreferenceProperties(this);\n+    \/**\n+     * Contains mappings from platform-specific keys to well-known keys, which are used\n+     * in the implementation of the property-based API in {@link PreferenceProperties}.\n+     *\/\n+    final Map<String, String> wellKnownKeys;\n@@ -56,1 +60,1 @@\n-    final Map<String, String> wellKnownKeys;\n+    final PreferenceProperties properties = new PreferenceProperties(this);\n@@ -186,0 +190,2 @@\n+     *\n+     * @param preferences the new preference mappings\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PlatformPreferences.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-public final class PreferenceProperties {\n+final class PreferenceProperties {\n@@ -53,1 +53,1 @@\n-    public PreferenceProperties(Object bean) {\n+    PreferenceProperties(Object bean) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PreferenceProperties.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -542,117 +542,0 @@\n-\n-    \/**\n-     * Gets the preferences of the current application.\n-     * <p>\n-     * The map returned from this method includes all platform preferences, and is updated by JavaFX\n-     * when the operating system reports that a platform preference has changed. In contrast to\n-     * {@link Platform#getPreferences()}, the mappings in the application preferences map can be\n-     * overridden by user code. An overridden value always takes precedence over a platform-provided\n-     * value.\n-     *\n-     * @return the {@code Preferences} instance\n-     * @see Platform#getPreferences()\n-     * @since 22\n-     *\/\n-    public static Preferences getPreferences() {\n-        return PlatformImpl.getApplicationPreferences();\n-    }\n-\n-    \/**\n-     * Contains UI preferences of the current application.\n-     *\n-     * @see Platform.Preferences\n-     * @since 22\n-     *\/\n-    public interface Preferences extends Platform.Preferences {\n-        \/**\n-         * Overrides the value of the {@link #appearanceProperty() appearance} property.\n-         * <p>\n-         * Specifying {@code null} clears the override, which restores the value of the\n-         * {@code appearance} property to the platform-provided value.\n-         * <p>\n-         * Note that {@code appearance} is a derived property: its value is computed by comparing\n-         * the {@link #backgroundColorProperty() background} and {@link #foregroundColorProperty() foreground}\n-         * properties. However, overriding the {@code appearance} property does not change the value\n-         * of the {@code background} or {@code foreground} properties. If an application overrides\n-         * the {@code appearance} property, it should also consider overriding {@code background} and\n-         * {@code foreground} to match the value of the overridden {@code appearance} property.\n-         *\n-         * @param appearance the platform appearance override, or {@code null} to clear the override\n-         *\/\n-        void setAppearance(Appearance appearance);\n-\n-        \/**\n-         * Overrides the value of the {@link #backgroundColorProperty() backgroundColor} property.\n-         * <p>\n-         * Specifying {@code null} clears the override, which restores the value of the\n-         * {@code backgroundColor} property to the platform-provided value.\n-         * <p>\n-         * Overriding this property will not override the key-value mapping that represents the\n-         * background color in the underlying map.\n-         *\n-         * @param color the background color override, or {@code null} to clear the override\n-         *\/\n-        void setBackgroundColor(Color color);\n-\n-        \/**\n-         * Overrides the value of the {@link #foregroundColorProperty() foregroundColor} property.\n-         * <p>\n-         * Specifying {@code null} clears the override, which restores the value of the\n-         * {@code foregroundColor} property to the platform-provided value.\n-         * <p>\n-         * Overriding this property will not override the key-value mapping that represents the\n-         * foreground color in the underlying map.\n-         *\n-         * @param color the foreground color override, or {@code null} to clear the override\n-         *\/\n-        void setForegroundColor(Color color);\n-\n-        \/**\n-         * Overrides the value of the {@link #accentColorProperty() accentColor} property.\n-         * <p>\n-         * Specifying {@code null} clears the override, which restores the value of the\n-         * {@code accentColor} property to the platform-provided value.\n-         * <p>\n-         * Overriding this property will not override the key-value mapping that represents the\n-         * accent color in the underlying map.\n-         *\n-         * @param color the accent color override, or {@code null} to clear the override\n-         *\/\n-        void setAccentColor(Color color);\n-\n-        \/**\n-         * Overrides a preference mapping.\n-         * <p>\n-         * If a platform-provided mapping for the key already exists, calling this method overrides\n-         * the value that is mapped to the key. If a platform-provided mapping for the key doesn't\n-         * exist, this method creates a new mapping.\n-         *\n-         * @param key the key\n-         * @param value the new value\n-         * @throws NullPointerException if {@code key} or {@code value} is null\n-         * @throws IllegalArgumentException if a platform-provided mapping for the key exists, and\n-         *                                  the specified value is an instance of a different class\n-         *                                  than the platform-provided value\n-         * @return the previous value associated with {@code key}\n-         *\/\n-        @Override\n-        Object put(String key, Object value);\n-\n-        \/**\n-         * Resets an overridden preference mapping to its platform-provided value.\n-         * <p>\n-         * If the preference is overridden, but the platform does not provide a mapping for the\n-         * specified key, the mapping will be removed. If no mapping exists for the specified\n-         * key, calling this method has no effect.\n-         *\n-         * @param key the key\n-         * @throws NullPointerException if {@code key} is null\n-         *\/\n-        void reset(String key);\n-\n-        \/**\n-         * Resets all overridden preference mappings to their platform-provided values and removes\n-         * all mappings for which the platform does not provide a default value.\n-         *\/\n-        void reset();\n-    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/Application.java","additions":0,"deletions":117,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -447,5 +447,0 @@\n-     * <p>\n-     * Applications and libraries are encouraged to use {@link Application#getPreferences()} instead,\n-     * which allows applications to override preference mappings with custom values. For example,\n-     * an application might override {@link Application.Preferences#appearanceProperty()} to switch\n-     * between dark or light mode independent of the operating system setting.\n@@ -453,1 +448,0 @@\n-     * @see Application#getPreferences()\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/Platform.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,149 +0,0 @@\n-\/*\n- * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.com.sun.javafx.application.preferences;\n-\n-import com.sun.javafx.application.preferences.ApplicationPreferences;\n-import javafx.application.Appearance;\n-import javafx.scene.paint.Color;\n-import java.util.Map;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-public class ApplicationPreferencesTest {\n-\n-    ApplicationPreferences prefs;\n-\n-    @BeforeEach\n-    void setup() {\n-        prefs = new ApplicationPreferences(Map.of(\n-            \"test.foregroundColor\", \"foregroundColor\",\n-            \"test.backgroundColor\", \"backgroundColor\",\n-            \"test.accentColor\", \"accentColor\"\n-        ));\n-    }\n-\n-    @Test\n-    void testDefaultValues() {\n-        assertEquals(Color.WHITE, prefs.getBackgroundColor());\n-        assertEquals(Color.BLACK, prefs.getForegroundColor());\n-        assertEquals(Color.web(\"#157EFB\"), prefs.getAccentColor());\n-        assertEquals(Appearance.LIGHT, prefs.getAppearance());\n-    }\n-\n-    @Test\n-    void testResetSingleMapping() {\n-        prefs.update(Map.of(\"k1\", 5, \"k2\", 7.5));\n-\n-        \/\/ Override the \"k1\" mapping with a user value\n-        assertEquals(5, prefs.put(\"k1\", 10));\n-        assertEquals(10, prefs.get(\"k1\"));\n-\n-        \/\/ Clear the user value\n-        prefs.reset(\"k1\");\n-        assertEquals(5, prefs.get(\"k1\"));\n-    }\n-\n-    @Test\n-    void testResetAllMappings() {\n-        prefs.update(Map.of(\"k1\", 5, \"k2\", 7.5));\n-\n-        prefs.put(\"k1\", 10);\n-        prefs.put(\"k2\", 0.123);\n-        assertEquals(10, prefs.getInteger(\"k1\").orElseThrow());\n-        assertEquals(0.123, prefs.getDouble(\"k2\").orElseThrow(), 0.001);\n-\n-        prefs.reset();\n-        assertEquals(5, prefs.getInteger(\"k1\").orElseThrow());\n-        assertEquals(7.5, prefs.getDouble(\"k2\").orElseThrow(), 0.001);\n-    }\n-\n-    @Test\n-    void testCannotOverrideValueWithDifferentType() {\n-        prefs.update(Map.of(\"k\", 5));\n-        assertThrows(IllegalArgumentException.class, () -> prefs.put(\"k\", 3.141));\n-    }\n-\n-    @Test\n-    void testCannotOverrideWithNullValue() {\n-        prefs.update(Map.of(\"k\", 5));\n-        assertThrows(NullPointerException.class, () -> prefs.put(\"k\", null));\n-    }\n-\n-    @Test\n-    void testAppearanceReflectsForegroundAndBackgroundColors() {\n-        prefs.update(Map.of(\"test.foregroundColor\", Color.BLACK, \"test.backgroundColor\", Color.WHITE));\n-        assertEquals(Appearance.LIGHT, prefs.getAppearance());\n-\n-        prefs.update(Map.of(\"test.foregroundColor\", Color.WHITE, \"test.backgroundColor\", Color.BLACK));\n-        assertEquals(Appearance.DARK, prefs.getAppearance());\n-\n-        prefs.update(Map.of(\"test.foregroundColor\", Color.DARKGRAY, \"test.backgroundColor\", Color.LIGHTGRAY));\n-        assertEquals(Appearance.LIGHT, prefs.getAppearance());\n-\n-        prefs.update(Map.of(\"test.foregroundColor\", Color.RED, \"test.backgroundColor\", Color.BLUE));\n-        assertEquals(Appearance.DARK, prefs.getAppearance());\n-    }\n-\n-    @Test\n-    void testOverriddenAppearanceIsNotAffectedByBackgroundAndForegroundColors() {\n-        prefs.setAppearance(Appearance.DARK);\n-        prefs.setBackgroundColor(Color.WHITE);\n-        prefs.setForegroundColor(Color.BLACK);\n-        assertEquals(Appearance.DARK, prefs.getAppearance());\n-        prefs.setAppearance(null);\n-        assertEquals(Appearance.LIGHT, prefs.getAppearance());\n-    }\n-\n-    @Test\n-    void testOverrideAppearance() {\n-        assertEquals(Appearance.LIGHT, prefs.getAppearance());\n-        prefs.setAppearance(Appearance.DARK);\n-        assertEquals(Appearance.DARK, prefs.getAppearance());\n-        prefs.setAppearance(null);\n-        assertEquals(Appearance.LIGHT, prefs.getAppearance());\n-    }\n-\n-    @Test\n-    void testOverrideBackgroundColor() {\n-        assertEquals(Color.WHITE, prefs.getBackgroundColor());\n-        prefs.setBackgroundColor(Color.GREEN);\n-        assertEquals(Color.GREEN, prefs.getBackgroundColor());\n-        prefs.setBackgroundColor(null);\n-        assertEquals(Color.WHITE, prefs.getBackgroundColor());\n-    }\n-\n-    @Test\n-    void testOverrideForegroundColor() {\n-        assertEquals(Color.BLACK, prefs.getForegroundColor());\n-        prefs.setForegroundColor(Color.GREEN);\n-        assertEquals(Color.GREEN, prefs.getForegroundColor());\n-        prefs.setForegroundColor(null);\n-        assertEquals(Color.BLACK, prefs.getForegroundColor());\n-    }\n-\n-}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/application\/preferences\/ApplicationPreferencesTest.java","additions":0,"deletions":149,"binary":false,"changes":149,"status":"deleted"}]}