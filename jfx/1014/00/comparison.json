{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,2 +87,1 @@\n-        public boolean handleThemeChanged(String themeName) {\n-            return false;\n+        public void handlePreferencesChanged(Map<String, Object> properties) {\n@@ -262,1 +261,1 @@\n-    protected boolean notifyThemeChanged(String themeName) {\n+    protected void notifyPreferencesChanged(Map<String, Object> preferences) {\n@@ -265,1 +264,1 @@\n-            return handler.handleThemeChanged(themeName);\n+            handler.handlePreferencesChanged(preferences);\n@@ -267,1 +266,0 @@\n-        return false;\n@@ -678,13 +676,0 @@\n-    public String getHighContrastScheme(String themeName) {\n-        return themeName;\n-    }\n-\n-    \/**\n-     * Gets the Name of the currently active high contrast theme.\n-     * If null, then high contrast is not enabled.\n-     *\/\n-    public String getHighContrastTheme() {\n-        checkEventThread();\n-        return null;\n-    }\n-\n@@ -771,0 +756,4 @@\n+\n+    public Map<String, Object> getPlatformPreferences() {\n+        return Map.of();\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/Application.java","additions":8,"deletions":19,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -523,0 +523,3 @@\n+    @Override\n+    public native Map<String, Object> getPlatformPreferences();\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkApplication.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import java.util.Map;\n@@ -391,0 +392,3 @@\n+\n+    @Override\n+    public native Map<String, Object> getPlatformPreferences();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacApplication.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import com.sun.javafx.application.PlatformImpl;\n@@ -39,0 +38,1 @@\n+import java.util.Map;\n@@ -43,1 +43,0 @@\n-    private static final String BASE_NAME = \"com\/sun\/glass\/ui\/win\/themes\";\n@@ -342,11 +341,0 @@\n-    @Override\n-    public String getHighContrastScheme(String themeName) {\n-        return PlatformImpl.HighContrastScheme.fromThemeName(ResourceBundle.getBundle(BASE_NAME)::getString, themeName);\n-    }\n-\n-    private native String _getHighContrastTheme();\n-    @Override public String getHighContrastTheme() {\n-        checkEventThread();\n-        return getHighContrastScheme(_getHighContrastTheme());\n-    }\n-\n@@ -381,0 +369,3 @@\n+\n+    @Override\n+    public native Map<String, Object> getPlatformPreferences();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinApplication.java","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,0 +58,1 @@\n+import javafx.application.Platform;\n@@ -1047,0 +1048,40 @@\n+\n+    private static final PlatformPreferencesImpl platformPreferences = new PlatformPreferencesImpl();\n+\n+    public static Platform.Preferences getPlatformPreferences() {\n+        return platformPreferences;\n+    }\n+\n+    \/**\n+     * Called by Glass when one or several platform preferences have changed.\n+     * <p>\n+     * This method can be called on any thread. The supplied {@code preferences} map may\n+     * include all platform preferences, or only the changed preferences.\n+     *\n+     * @param preferences a map that includes the changed preferences\n+     *\/\n+    public static void updatePreferences(Map<String, Object> preferences) {\n+        if (preferences == null) {\n+            preferences = Map.of();\n+        }\n+\n+        if (isFxApplicationThread()) {\n+            checkHighContrastThemeChanged(preferences);\n+            platformPreferences.update(preferences);\n+        } else {\n+            \/\/ Make a defensive copy in case the caller of this method decides to re-use or\n+            \/\/ modify its preferences map after the method returns.\n+            Map<String, Object> preferencesCopy = new HashMap<>(preferences);\n+            runLater(() -> updatePreferences(preferencesCopy));\n+        }\n+    }\n+\n+    \/\/ This method will be removed when StyleThemes are added.\n+    private static void checkHighContrastThemeChanged(Map<String, Object> preferences) {\n+        if (preferences.get(\"Windows.SPI.HighContrastOn\") == Boolean.TRUE) {\n+            setAccessibilityTheme(preferences.get(\"Windows.SPI.HighContrastColorScheme\") instanceof String s ? s : null);\n+        } else {\n+            setAccessibilityTheme(null);\n+        }\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformImpl.java","additions":42,"deletions":1,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -0,0 +1,299 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.application;\n+\n+import com.sun.javafx.util.Utils;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.property.ReadOnlyObjectProperty;\n+import javafx.beans.property.ReadOnlyObjectPropertyBase;\n+import javafx.beans.property.ReadOnlyObjectWrapper;\n+import javafx.collections.MapChangeListener;\n+import javafx.scene.paint.Color;\n+import javafx.stage.Appearance;\n+import java.util.AbstractMap;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+public final class PlatformPreferencesImpl extends AbstractMap<String, Object> implements Platform.Preferences {\n+\n+    private final Map<String, Object> modifiableMap = new HashMap<>();\n+    private final Set<Entry<String, Object>> unmodifiableEntrySet = Collections.unmodifiableSet(modifiableMap.entrySet());\n+    private final List<InvalidationListener> invalidationListeners = new CopyOnWriteArrayList<>();\n+    private final List<MapChangeListener<? super String, ? super Object>> changeListeners = new CopyOnWriteArrayList<>();\n+\n+    private final ColorProperty backgroundColor = new ColorProperty(\"backgroundColor\", Color.WHITE,\n+        new String[] {\n+            \"Windows.UIColor.Background\",\n+            \"macOS.NSColor.textBackgroundColor\",\n+            \"GTK.theme_bg_color\"\n+        });\n+\n+    private final ColorProperty foregroundColor = new ColorProperty(\"foregroundColor\", Color.BLACK,\n+        new String[] {\n+            \"Windows.UIColor.Foreground\",\n+            \"macOS.NSColor.textColor\",\n+            \"GTK.theme_fg_color\"\n+        });\n+\n+    private final ColorProperty accentColor = new ColorProperty(\"accentColor\", Color.rgb(21, 126, 251),\n+        new String[] {\n+            \"Windows.UIColor.Accent\",\n+            \"macOS.NSColor.controlAccentColor\"\n+            \/\/ GTK: no accent color\n+        });\n+\n+    private final ColorProperty[] colorProperties = new ColorProperty[] {\n+        backgroundColor, foregroundColor, accentColor\n+    };\n+\n+    private final ReadOnlyObjectWrapper<Appearance> appearance =\n+        new ReadOnlyObjectWrapper<>(this, \"appearance\") {\n+            {\n+                InvalidationListener listener = observable -> update();\n+                backgroundColor.addListener(listener);\n+                foregroundColor.addListener(listener);\n+                update();\n+            }\n+\n+            private void update() {\n+                Color background = backgroundColor.get();\n+                Color foreground = foregroundColor.get();\n+                boolean isDark = Utils.calculateBrightness(background) < Utils.calculateBrightness(foreground);\n+                set(isDark ? Appearance.DARK : Appearance.LIGHT);\n+            }\n+        };\n+\n+    @Override\n+    public ReadOnlyObjectProperty<Appearance> appearanceProperty() {\n+        return appearance.getReadOnlyProperty();\n+    }\n+\n+    @Override\n+    public ReadOnlyObjectProperty<Color> backgroundColorProperty() {\n+        return backgroundColor;\n+    }\n+\n+    @Override\n+    public ReadOnlyObjectProperty<Color> foregroundColorProperty() {\n+        return foregroundColor;\n+    }\n+\n+    @Override\n+    public ReadOnlyObjectProperty<Color> accentColorProperty() {\n+        return accentColor;\n+    }\n+\n+    @Override\n+    public String getString(String key) {\n+        Object value = modifiableMap.get(key);\n+        if (value instanceof String s) {\n+            return s;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Boolean getBoolean(String key) {\n+        Object value = modifiableMap.get(key);\n+        if (value instanceof Boolean b) {\n+            return b;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Color getColor(String key) {\n+        Object value = modifiableMap.get(key);\n+        if (value instanceof Color c) {\n+            return c;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Set<Entry<String, Object>> entrySet() {\n+        return unmodifiableEntrySet;\n+    }\n+\n+    @Override\n+    public void addListener(InvalidationListener listener) {\n+        invalidationListeners.add(listener);\n+    }\n+\n+    @Override\n+    public void removeListener(InvalidationListener listener) {\n+        invalidationListeners.remove(listener);\n+    }\n+\n+    @Override\n+    public void addListener(MapChangeListener<? super String, ? super Object> listener) {\n+        changeListeners.add(listener);\n+    }\n+\n+    @Override\n+    public void removeListener(MapChangeListener<? super String, ? super Object> listener) {\n+        changeListeners.remove(listener);\n+    }\n+\n+    \/**\n+     * Updates this map of preferences with a set of new or changed preferences.\n+     * The new preferences may include all available preferences, or only the new\/changed preferences.\n+     * The implementation delays firing notifications until all preferences have been applied to ensure\n+     * that observers will never observe this map in an inconsistent state.\n+     * InvalidationListeners are only notified once, even if several preferences have changed.\n+     *\/\n+    public void update(Map<String, Object> preferences) {\n+        Map<String, ChangedValue> changed = getChangedPreferences(preferences);\n+        if (changed.isEmpty()) {\n+            return;\n+        }\n+\n+        for (Map.Entry<String, ChangedValue> entry : changed.entrySet()) {\n+            modifiableMap.put(entry.getKey(), entry.getValue().newValue);\n+        }\n+\n+        for (Map.Entry<String, ChangedValue> entry : changed.entrySet()) {\n+            if (entry.getValue().newValue instanceof Color color) {\n+                for (ColorProperty property : colorProperties) {\n+                    property.trySet(entry.getKey(), color);\n+                }\n+            }\n+        }\n+\n+        for (ColorProperty property : colorProperties) {\n+            property.fireValueChangedEvent();\n+        }\n+\n+        for (InvalidationListener listener : invalidationListeners) {\n+            try {\n+                listener.invalidated(this);\n+            } catch (Exception e) {\n+                Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);\n+            }\n+        }\n+\n+        if (changeListeners.size() > 0) {\n+            for (Map.Entry<String, ChangedValue> entry : changed.entrySet()) {\n+                MapChangeListener.Change<String, Object> change = new MapChangeListener.Change<>(this) {\n+                    @Override public boolean wasAdded() { return true; }\n+                    @Override public boolean wasRemoved() { return entry.getValue().oldValue != null; }\n+                    @Override public String getKey() { return entry.getKey(); }\n+                    @Override public Object getValueAdded() { return entry.getValue().newValue; }\n+                    @Override public Object getValueRemoved() { return entry.getValue().oldValue; }\n+                };\n+\n+                for (MapChangeListener<? super String, ? super Object> listener : changeListeners) {\n+                    try {\n+                        listener.onChanged(change);\n+                    } catch (Exception e) {\n+                        Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private Map<String, ChangedValue> getChangedPreferences(Map<String, Object> preferences) {\n+        Map<String, ChangedValue> changed = new HashMap<>();\n+\n+        for (Map.Entry<String, Object> entry : preferences.entrySet()) {\n+            Object existingValue = modifiableMap.get(entry.getKey());\n+            Object newValue = entry.getValue();\n+            boolean equals = false;\n+\n+            if (existingValue instanceof Object[] && newValue instanceof Object[]) {\n+                equals = Arrays.equals((Object[]) existingValue, (Object[]) newValue);\n+            } else if (!(existingValue instanceof Object[]) && !(newValue instanceof Object[])) {\n+                equals = Objects.equals(existingValue, newValue);\n+            }\n+\n+            if (!equals) {\n+                changed.put(entry.getKey(), new ChangedValue(existingValue, newValue));\n+            }\n+        }\n+\n+        return changed;\n+    }\n+\n+    private record ChangedValue(Object oldValue, Object newValue) {}\n+\n+    private final class ColorProperty extends ReadOnlyObjectPropertyBase<Color> {\n+        final String name;\n+        final String[] platformKeys;\n+        Color currentValue;\n+        Color newValue;\n+\n+        ColorProperty(String name, Color initialValue, String[] platformKeys) {\n+            this.name = name;\n+            this.currentValue = initialValue;\n+            this.newValue = initialValue;\n+            this.platformKeys = platformKeys;\n+        }\n+\n+        @Override\n+        public Object getBean() {\n+            return PlatformPreferencesImpl.this;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return name;\n+        }\n+\n+        @Override\n+        public Color get() {\n+            return currentValue;\n+        }\n+\n+        public void trySet(String key, Color value) {\n+            for (String platformKey : platformKeys) {\n+                if (Objects.equals(platformKey, key)) {\n+                    this.newValue = value;\n+                    return;\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void fireValueChangedEvent() {\n+            if (!Objects.equals(currentValue, newValue)) {\n+                currentValue = newValue;\n+                super.fireValueChangedEvent();\n+            }\n+        }\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformPreferencesImpl.java","additions":299,"deletions":0,"binary":false,"changes":299,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -362,0 +362,2 @@\n+            PlatformImpl.updatePreferences(Application.GetApplication().getPlatformPreferences());\n+\n@@ -367,3 +369,3 @@\n-                @Override public boolean handleThemeChanged(String themeName) {\n-                    String highContrastSchemeName = Application.GetApplication().getHighContrastScheme(themeName);\n-                    return PlatformImpl.setAccessibilityTheme(highContrastSchemeName);\n+                @Override\n+                public void handlePreferencesChanged(Map<String, Object> preferences) {\n+                    PlatformImpl.updatePreferences(preferences);\n@@ -1808,5 +1810,0 @@\n-    @Override\n-    public String getThemeName() {\n-        return Application.GetApplication().getHighContrastTheme();\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/QuantumToolkit.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+import javafx.beans.property.ReadOnlyObjectProperty;\n+import javafx.collections.ObservableMap;\n@@ -34,0 +36,2 @@\n+import javafx.scene.paint.Color;\n+import javafx.stage.Appearance;\n@@ -419,0 +423,293 @@\n+\n+    \/**\n+     * Gets all {@link Preferences preferences} of the current platform.\n+     *\n+     * @implNote In many cases, multiple platform preferences can change at the same time.\n+     *           For example, switching from light to dark mode changes various foreground elements to light\n+     *           colors, and various background elements to dark colors.\n+     *           <p>\n+     *           The {@code Preferences} implementation returned from this method fires a single invalidation\n+     *           event for such bulk changes. If a listener performs potentially heavy work, such as recreating\n+     *           and applying CSS themes, it might be beneficial to use {@link javafx.beans.InvalidationListener}\n+     *           instead of {@link javafx.collections.MapChangeListener} to prevent the listener from firing\n+     *           multiple times in bulk change scenarios.\n+     *\n+     * @return a {@code Preferences} instance\n+     * @since 21\n+     *\/\n+    public static Preferences getPreferences() {\n+        return PlatformImpl.getPlatformPreferences();\n+    }\n+\n+    \/**\n+     * Contains UI preferences of the current platform.\n+     * <p>\n+     * {@code Preferences} extends {@link ObservableMap} to expose platform preferences as key-value pairs.\n+     * For convenience, {@link #getString}, {@link #getBoolean} and {@link #getColor} are provided as typed\n+     * alternatives to the untyped {@link #get} method.\n+     * <p>\n+     * The preferences that are reported by the platform may be dependent on the operating system version.\n+     * Applications should always test whether a preference is available, or use the {@link #getString(String, String)},\n+     * {@link #getBoolean(String, boolean)} or {@link #getColor(String, Color)} overloads that accept a fallback\n+     * value if the preference is not available.\n+     * <p>\n+     * The following list contains all preferences that are potentially available on the specified platforms:\n+     *\n+     * <table>\n+     *     <caption><\/caption>\n+     *     <tbody>\n+     *         <tr><th colspan=\"2\" scope=\"colgroup\">Windows<\/th><\/tr>\n+     *         <tr><td>{@code Windows.SPI.HighContrast}<\/td><td>{@link Boolean}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.SPI.HighContrastColorScheme}<\/td><td>{@link String}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.SysColor.COLOR_3DFACE}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.SysColor.COLOR_BTNTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.SysColor.COLOR_GRAYTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.SysColor.COLOR_HIGHLIGHT}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.SysColor.COLOR_HIGHLIGHTTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.SysColor.COLOR_HOTLIGHT}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.SysColor.COLOR_WINDOW}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.SysColor.COLOR_WINDOWTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.UIColor.Background}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.UIColor.Foreground}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.UIColor.AccentDark3}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.UIColor.AccentDark2}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.UIColor.AccentDark1}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.UIColor.Accent}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.UIColor.AccentLight1}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.UIColor.AccentLight2}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.UIColor.AccentLight3}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><\/tr>\n+     *\n+     *         <tr><th colspan=\"2\" scope=\"colgroup\">macOS<\/th><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.labelColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.secondaryLabelColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.tertiaryLabelColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.quaternaryLabelColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.textColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.placeholderTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.selectedTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.textBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.selectedTextBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.keyboardFocusIndicatorColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.unemphasizedSelectedTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.unemphasizedSelectedTextBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.linkColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.separatorColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.selectedContentBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.unemphasizedSelectedContentBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.selectedMenuItemTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.gridColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.headerTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.alternatingContentBackgroundColors}<\/td><td>{@link Color}{@code []}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.controlAccentColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.controlColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.controlBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.controlTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.disabledControlTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.selectedControlColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.selectedControlTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.alternateSelectedControlTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.currentControlTint}<\/td><td>{@link String}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.windowBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.windowFrameTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.underPageBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.findHighlightColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.highlightColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.shadowColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemBlueColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemBrownColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemGrayColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemGreenColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemIndigoColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemOrangeColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemPinkColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemPurpleColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemRedColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemTealColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemYellowColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><\/tr>\n+     *\n+     *         <tr><th colspan=\"2\" scope=\"colgroup\">Linux<\/th><\/tr>\n+     *         <tr><td>{@code GTK.theme_name}<\/td><td>{@link String}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_base_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_selected_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_selected_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.insensitive_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.insensitive_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.insensitive_base_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_unfocused_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_unfocused_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_unfocused_base_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_unfocused_selected_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_unfocused_selected_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.borders}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.unfocused_borders}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.warning_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.error_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.success_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><\/tr>\n+     *     <\/tbody>\n+     * <\/table>\n+     *\n+     * @since 21\n+     *\/\n+    public interface Preferences extends ObservableMap<String, Object> {\n+        \/**\n+         * The platform appearance, which specifies whether applications should use a light\n+         * or dark color scheme. The value of this property is derived from the perceptual\n+         * brightness of {@link #backgroundColorProperty() backgroundColor} in relation to\n+         * {@link #foregroundColorProperty() foregroundColor} and defaults to {@link Appearance#LIGHT}\n+         * if the platform does not report color preferences.\n+         *\n+         * @return the {@code appearance} property\n+         *\/\n+        ReadOnlyObjectProperty<Appearance> appearanceProperty();\n+\n+        \/**\n+         * Gets the value of the {@link #appearanceProperty() appearance} property.\n+         *\n+         * @return the platform appearance\n+         *\/\n+        default Appearance getAppearance() {\n+            return appearanceProperty().get();\n+        }\n+\n+        \/**\n+         * The color used for background regions. The value of this property corresponds\n+         * to the reported color value for the following keys:\n+         * <ul>\n+         *     <li>{@code Windows.UIColor.Background}\n+         *     <li>{@code macOS.NSColor.textBackgroundColor}\n+         *     <li>{@code GTK.theme_bg_color}\n+         * <\/ul>\n+         * If the platform does not report a background color, this property defaults to {@code Color.WHITE}.\n+         *\n+         * @return the {@code backgroundColor} property\n+         *\/\n+        ReadOnlyObjectProperty<Color> backgroundColorProperty();\n+\n+        \/**\n+         * Gets the value of the {@link #backgroundColorProperty() backgroundColor} property.\n+         *\n+         * @return the background color\n+         *\/\n+        default Color getBackgroundColor() {\n+            return backgroundColorProperty().get();\n+        }\n+\n+        \/**\n+         * The color used for foreground elements like text. The value of this property\n+         * corresponds to the reported color value for the following keys:\n+         * <ul>\n+         *     <li>{@code Windows.UIColor.Foreground}\n+         *     <li>{@code macOS.NSColor.textColor}\n+         *     <li>{@code GTK.theme_fg_color}\n+         * <\/ul>\n+         * If the platform does not report a foreground color, this property defaults to {@code Color.BLACK}.\n+         *\n+         * @return the {@code foregroundColor} property\n+         *\/\n+        ReadOnlyObjectProperty<Color> foregroundColorProperty();\n+\n+        \/**\n+         * Gets the value of the {@link #foregroundColorProperty() foregroundColor} property.\n+         *\n+         * @return the foreground color\n+         *\/\n+        default Color getForegroundColor() {\n+            return foregroundColorProperty().get();\n+        }\n+\n+        \/**\n+         * The accent color. The value of this property corresponds to the reported color\n+         * value for the following keys:\n+         * <ul>\n+         *     <li>{@code Windows.UIColor.Accent}\n+         *     <li>{@code macOS.NSColor.controlAccentColor}\n+         * <\/ul>\n+         * If the platform does not report an accent color, this property defaults to {@code #157EFB}.\n+         *\n+         * @return the {@code accentColor} property\n+         *\/\n+        ReadOnlyObjectProperty<Color> accentColorProperty();\n+\n+        \/**\n+         * Gets the value of the {@link #accentColorProperty() accentColor} property.\n+         *\n+         * @return the accent color\n+         *\/\n+        default Color getAccentColor() {\n+            return accentColorProperty().get();\n+        }\n+\n+        \/**\n+         * Returns the {@link String} instance to which the specified key is mapped.\n+         *\n+         * @param key the key\n+         * @return the {@code String} instance to which the {@code key} is mapped, or\n+         *         {@code null} if the key is not mapped to a {@code String} instance\n+         *\/\n+        String getString(String key);\n+\n+        \/**\n+         * Returns the {@link String} instance to which the specified key is mapped,\n+         * or a fallback value if the key is not mapped to a {@code String} instance.\n+         *\n+         * @param key the key\n+         * @return the {@code String} instance to which the {@code key} is mapped, or\n+         *         {@code fallbackValue} if the key is not mapped to a {@code String}\n+         *         instance\n+         *\/\n+        default String getString(String key, String fallbackValue) {\n+            String value = getString(key);\n+            return value != null ? value : fallbackValue;\n+        }\n+\n+        \/**\n+         * Returns the {@link Boolean} instance to which the specified key is mapped.\n+         *\n+         * @param key the key\n+         * @return the {@code Boolean} instance to which the {@code key} is mapped, or\n+         *         {@code null} if the key is not mapped to a {@code Boolean} instance\n+         *\/\n+        Boolean getBoolean(String key);\n+\n+        \/**\n+         * Returns the {@code boolean} value to which the specified key is mapped,\n+         * or a fallback value if the key is not mapped to a {@code boolean} value.\n+         *\n+         * @param key the key\n+         * @return the {@code boolean} value to which the {@code key} is mapped, or\n+         *         {@code fallbackValue} if the key is not mapped to a {@code boolean}\n+         *         value\n+         *\/\n+        default boolean getBoolean(String key, boolean fallbackValue) {\n+            Boolean value = getBoolean(key);\n+            return value != null ? value : fallbackValue;\n+        }\n+\n+        \/**\n+         * Returns the {@link Color} instance to which the specified key is mapped.\n+         *\n+         * @param key the key\n+         * @return the {@code Color} instance to which the {@code key} is mapped, or\n+         *         {@code null} if the key is not mapped to a {@code Color} instance\n+         *\/\n+        Color getColor(String key);\n+\n+        \/**\n+         * Returns the {@link Color} instance to which the specified key is mapped,\n+         * or a fallback value if the key is not mapped to a {@code Color} instance.\n+         *\n+         * @param key the key\n+         * @return the {@code Color} instance to which the {@code key} is mapped, or\n+         *         {@code fallbackValue} if the key is not mapped to a {@code Color}\n+         *         instance\n+         *\/\n+        default Color getColor(String key, Color fallbackValue) {\n+            Color value = getColor(key);\n+            return value != null ? value : fallbackValue;\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/Platform.java","additions":298,"deletions":1,"binary":false,"changes":299,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.stage;\n+\n+\/**\n+ * Defines the appearance of the user interface.\n+ *\n+ * @since 21\n+ *\/\n+public enum Appearance {\n+\n+    \/**\n+     * A light appearance uses bright backgrounds and dark text.\n+     *\/\n+    LIGHT,\n+\n+    \/**\n+     * A dark appearance uses dark backgrounds and bright text.\n+     *\/\n+    DARK\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/stage\/Appearance.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+#include \"PlatformSupport.h\"\n@@ -50,0 +51,1 @@\n+PlatformSupport* platformSupport = NULL;\n@@ -176,0 +178,2 @@\n+\n+    platformSupport = new PlatformSupport(env);\n@@ -239,0 +243,5 @@\n+\n+    if (platformSupport) {\n+        delete platformSupport;\n+        platformSupport = NULL;\n+    }\n@@ -391,0 +400,11 @@\n+\/*\n+ * Class:     com_sun_glass_ui_gtk_GtkApplication\n+ * Method:    getPlatformPreferences\n+ * Signature: ()Ljava\/util\/Map;\n+ *\/\n+JNIEXPORT jobject JNICALL Java_com_sun_glass_ui_gtk_GtkApplication_getPlatformPreferences\n+  (JNIEnv *env, jobject self)\n+{\n+    return platformSupport ? platformSupport->collectPreferences() : NULL;\n+}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassApplication.cpp","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"PlatformSupport.h\"\n+#include \"glass_general.h\"\n+#include <gtk\/gtk.h>\n+\n+namespace\n+{\n+    void putColor(JNIEnv* env, GtkStyle* style, jobject preferences, const char* colorName) {\n+        GdkColor color;\n+        if (gtk_style_lookup_color(style, colorName, &color)) {\n+            env->CallObjectMethod(preferences, jMapPut,\n+                env->NewStringUTF(colorName),\n+                env->CallStaticObjectMethod(\n+                    jColorCls, jColorRgb,\n+                    (int)(CLAMP((double)color.red \/ 65535.0, 0.0, 1.0) * 255.0),\n+                    (int)(CLAMP((double)color.green \/ 65535.0, 0.0, 1.0) * 255.0),\n+                    (int)(CLAMP((double)color.blue \/ 65535.0, 0.0, 1.0) * 255.0),\n+                    1.0));\n+        }\n+\n+        CHECK_JNI_EXCEPTION(env);\n+    }\n+\n+    void putString(JNIEnv* env, jobject preferences, const char* name, const char* value) {\n+        env->CallObjectMethod(preferences, jMapPut,\n+            env->NewStringUTF(name),\n+            env->NewStringUTF(value));\n+    }\n+}\n+\n+PlatformSupport::~PlatformSupport() {\n+    if (preferences) {\n+        env->DeleteGlobalRef(preferences);\n+    }\n+}\n+\n+jobject PlatformSupport::collectPreferences() const {\n+    jobject prefs = env->NewObject(jHashMapCls, jHashMapInit);\n+    if (EXCEPTION_OCCURED(env)) return NULL;\n+\n+    GtkStyle* style = gtk_style_new();\n+    putColor(env, style, prefs, \"GTK.theme_fg_color\");\n+    putColor(env, style, prefs, \"GTK.theme_bg_color\");\n+    putColor(env, style, prefs, \"GTK.theme_base_color\");\n+    putColor(env, style, prefs, \"GTK.theme_selected_bg_color\");\n+    putColor(env, style, prefs, \"GTK.theme_selected_fg_color\");\n+    putColor(env, style, prefs, \"GTK.insensitive_bg_color\");\n+    putColor(env, style, prefs, \"GTK.insensitive_fg_color\");\n+    putColor(env, style, prefs, \"GTK.insensitive_base_color\");\n+    putColor(env, style, prefs, \"GTK.theme_unfocused_fg_color\");\n+    putColor(env, style, prefs, \"GTK.theme_unfocused_bg_color\");\n+    putColor(env, style, prefs, \"GTK.theme_unfocused_base_color\");\n+    putColor(env, style, prefs, \"GTK.theme_unfocused_selected_bg_color\");\n+    putColor(env, style, prefs, \"GTK.theme_unfocused_selected_fg_color\");\n+    putColor(env, style, prefs, \"GTK.borders\");\n+    putColor(env, style, prefs, \"GTK.unfocused_borders\");\n+    putColor(env, style, prefs, \"GTK.warning_color\");\n+    putColor(env, style, prefs, \"GTK.error_color\");\n+    putColor(env, style, prefs, \"GTK.success_color\");\n+    g_object_unref(style);\n+\n+    GtkSettings* settings = gtk_settings_get_default();\n+    gchar* themeName;\n+    g_object_get(settings, \"gtk-theme-name\", &themeName, NULL);\n+    putString(env, prefs, \"GTK.theme_name\", themeName);\n+    g_object_unref(settings);\n+\n+    return prefs;\n+}\n+\n+void PlatformSupport::updatePreferences(jobject application) const {\n+    if (application == NULL) {\n+        return;\n+    }\n+\n+    jobject newPreferences = collectPreferences();\n+\n+    jboolean preferencesChanged =\n+        newPreferences != NULL &&\n+        !env->CallBooleanMethod(newPreferences, jObjectEquals, preferences);\n+\n+    if (!EXCEPTION_OCCURED(env) && preferencesChanged) {\n+        if (preferences) {\n+            env->DeleteGlobalRef(preferences);\n+        }\n+\n+        preferences = env->NewGlobalRef(newPreferences);\n+\n+        jobject unmodifiablePreferences = env->CallStaticObjectMethod(\n+            jCollectionsCls, jCollectionsUnmodifiableMap, newPreferences);\n+\n+        if (!EXCEPTION_OCCURED(env)) {\n+            env->CallVoidMethod(application, jApplicationNotifyPreferencesChanged, unmodifiablePreferences);\n+            env->DeleteLocalRef(unmodifiablePreferences);\n+        }\n+    }\n+\n+    env->DeleteLocalRef(newPreferences);\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/PlatformSupport.cpp","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#pragma once\n+\n+#include <jni.h>\n+\n+class PlatformSupport final\n+{\n+public:\n+    PlatformSupport(JNIEnv* env) : env(env) {}\n+    ~PlatformSupport();\n+    PlatformSupport(PlatformSupport const&) = delete;\n+    PlatformSupport& operator=(PlatformSupport const&) = delete;\n+\n+    \/**\n+     * Collect all platform preferences and return them as a new java\/util\/Map.\n+     *\/\n+    jobject collectPreferences() const;\n+\n+    \/**\n+     * Collect all platform preferences and notify the JavaFX application when a preference has changed.\n+     * The change notification includes all preferences, not only the changed preferences.\n+     *\/\n+    void updatePreferences(jobject application) const;\n+\n+private:\n+    JNIEnv* env;\n+    mutable jobject preferences;\n+};\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/PlatformSupport.h","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,0 +91,1 @@\n+jclass jMapCls;\n@@ -92,0 +93,1 @@\n+jmethodID jMapPut;\n@@ -95,0 +97,3 @@\n+jclass jHashMapCls;\n+jmethodID jHashMapInit;\n+\n@@ -113,0 +118,14 @@\n+jmethodID jApplicationNotifyPreferencesChanged;\n+\n+jclass jObjectCls;\n+jmethodID jObjectEquals;\n+\n+jclass jBooleanCls;\n+jfieldID jBooleanTRUE;\n+jfieldID jBooleanFALSE;\n+\n+jclass jCollectionsCls;\n+jmethodID jCollectionsUnmodifiableMap;\n+\n+jclass jColorCls;\n+jmethodID jColorRgb;\n@@ -279,0 +298,1 @@\n+    jMapCls = (jclass)env->NewGlobalRef(clazz);\n@@ -281,0 +301,2 @@\n+    jMapPut = env->GetMethodID(clazz, \"put\", \"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n@@ -286,0 +308,6 @@\n+    clazz = env->FindClass(\"java\/util\/HashMap\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+    jHashMapCls = (jclass) env->NewGlobalRef(clazz);\n+    jHashMapInit = env->GetMethodID(jHashMapCls, \"<init>\", \"()V\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+\n@@ -330,0 +358,28 @@\n+    jApplicationNotifyPreferencesChanged = env->GetMethodID(jApplicationCls, \"notifyPreferencesChanged\", \"(Ljava\/util\/Map;)V\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+\n+    clazz = env->FindClass(\"java\/lang\/Object\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+    jObjectCls = (jclass)env->NewGlobalRef(clazz);\n+    jObjectEquals = env->GetMethodID(jObjectCls, \"equals\", \"(Ljava\/lang\/Object;)Z\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+\n+    clazz = env->FindClass(\"java\/lang\/Boolean\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+    jBooleanCls = (jclass)env->NewGlobalRef(clazz);\n+    jBooleanTRUE = env->GetStaticFieldID(jBooleanCls, \"TRUE\", \"Ljava\/lang\/Boolean;\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+    jBooleanFALSE = env->GetStaticFieldID(jBooleanCls, \"FALSE\", \"Ljava\/lang\/Boolean;\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+\n+    clazz = env->FindClass(\"java\/util\/Collections\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+    jCollectionsCls = (jclass)env->NewGlobalRef(clazz);\n+    jCollectionsUnmodifiableMap = env->GetStaticMethodID(jCollectionsCls, \"unmodifiableMap\", \"(Ljava\/util\/Map;)Ljava\/util\/Map;\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+\n+    clazz = env->FindClass(\"javafx\/scene\/paint\/Color\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+    jColorCls = (jclass)env->NewGlobalRef(clazz);\n+    jColorRgb = env->GetStaticMethodID(jColorCls, \"rgb\", \"(IIID)Ljavafx\/scene\/paint\/Color;\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_general.cpp","additions":57,"deletions":1,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -195,0 +195,1 @@\n+    extern jclass jMapCls; \/\/ java.util.Map\n@@ -196,0 +197,1 @@\n+    extern jmethodID jMapPut; \/\/ java.util.Map#put(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;\n@@ -199,0 +201,3 @@\n+    extern jclass jHashMapCls; \/\/ java.util.HashMap\n+    extern jmethodID jHashMapInit; \/\/ java.util.HashMap#<init> ()V\n+\n@@ -217,0 +222,14 @@\n+    extern jmethodID jApplicationNotifyPreferencesChanged; \/\/ notifyPreferencesChanged(Ljava\/util\/Map;)V\n+\n+    extern jclass jObjectCls; \/\/ java.lang.Object\n+    extern jmethodID jObjectEquals; \/\/ java.lang.Object#equals(Ljava\/lang\/Object;)Z\n+\n+    extern jclass jBooleanCls; \/\/ java.lang.Boolean\n+    extern jfieldID jBooleanTRUE; \/\/ java.lang.Boolean#TRUE\n+    extern jfieldID jBooleanFALSE; \/\/ java.lang.Boolean#FALSE\n+\n+    extern jclass jCollectionsCls; \/\/ java.util.Collections;\n+    extern jmethodID jCollectionsUnmodifiableMap; \/\/ java.util.Collections#unmodifiableMap(Ljava\/util\/Map;)Ljava\/util\/Map;\n+\n+    extern jclass jColorCls; \/\/ javafx.scene.paint.Color\n+    extern jmethodID jColorRgb; \/\/ javafx.scene.paint.Color#rgb(IIID)Ljavafx\/scene\/paint\/Color;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_general.h","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+#import \"PlatformSupport.h\"\n@@ -157,0 +158,19 @@\n+- (void)platformPreferencesDidChange {\n+    \/\/ Some dynamic colors like NSColor.controlAccentColor don't seem to be reliably updated\n+    \/\/ at the exact moment AppleColorPreferencesChangedNotification is received.\n+    \/\/ As a workaround, we wait for a short period of time (one second seems sufficient) before\n+    \/\/ we query the updated platform preferences.\n+\n+    [NSObject cancelPreviousPerformRequestsWithTarget:self\n+              selector:@selector(updatePlatformPreferences)\n+              object:nil];\n+\n+    [self performSelector:@selector(updatePlatformPreferences)\n+          withObject:nil\n+          afterDelay:1.0];\n+}\n+\n+- (void)updatePlatformPreferences {\n+    [PlatformSupport updatePreferences:self->jApplication];\n+}\n+\n@@ -196,0 +216,10 @@\n+                        [[NSDistributedNotificationCenter defaultCenter] addObserver:self\n+                                                                         selector:@selector(platformPreferencesDidChange)\n+                                                                         name:@\"AppleInterfaceThemeChangedNotification\"\n+                                                                         object:nil];\n+\n+                        [[NSDistributedNotificationCenter defaultCenter] addObserver:self\n+                                                                         selector:@selector(platformPreferencesDidChange)\n+                                                                         name:@\"AppleColorPreferencesChangedNotification\"\n+                                                                         object:nil];\n+\n@@ -837,0 +867,4 @@\n+    javaIDs.MacApplication.notifyPreferencesChanged = (*env)->GetMethodID(\n+            env, jClass, \"notifyPreferencesChanged\", \"(Ljava\/util\/Map;)V\");\n+    if ((*env)->ExceptionCheck(env)) return;\n+\n@@ -844,0 +878,2 @@\n+\n+    [PlatformSupport initIDs:env];\n@@ -1142,0 +1178,11 @@\n+\n+\/*\n+ * Class:     com_sun_glass_ui_mac_MacApplication\n+ * Method:    getPreferences\n+ * Signature: ()Ljava\/util\/Map;\n+ *\/\n+JNIEXPORT jobject JNICALL Java_com_sun_glass_ui_mac_MacApplication_getPlatformPreferences\n+(JNIEnv *env, jobject self)\n+{\n+    return [PlatformSupport collectPreferences];\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.m","additions":48,"deletions":1,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,0 +89,12 @@\n+extern jclass jObjectClass;\n+extern jclass jCollectionsClass;\n+extern jclass jColorClass;\n+extern jclass jHashMapClass;\n+extern jfieldID jBooleanTRUE;\n+extern jfieldID jBooleanFALSE;\n+extern jmethodID jColorRgbMethod;\n+extern jmethodID jHashMapInitMethod;\n+extern jmethodID jMapPutMethod;\n+extern jmethodID jObjectEqualsMethod;\n+extern jmethodID jCollectionsUnmodifiableMapMethod;\n+\n@@ -119,0 +131,1 @@\n+        jmethodID notifyPreferencesChanged;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassStatics.h","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,0 +91,12 @@\n+jclass jObjectClass = NULL;\n+jclass jCollectionsClass = NULL;\n+jclass jColorClass = NULL;\n+jclass jHashMapClass = NULL;\n+jfieldID jBooleanTRUE = NULL;\n+jfieldID jBooleanFALSE = NULL;\n+jmethodID jColorRgbMethod = NULL;\n+jmethodID jHashMapInitMethod = NULL;\n+jmethodID jMapPutMethod = NULL;\n+jmethodID jObjectEqualsMethod = NULL;\n+jmethodID jCollectionsUnmodifiableMapMethod = NULL;\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassStatics.m","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#pragma once\n+\n+#import <Cocoa\/Cocoa.h>\n+#import <jni.h>\n+\n+@interface PlatformSupport : NSObject\n+\n++ (void)initIDs:(JNIEnv*)env;\n+\n+\/**\n+ * Collect all platform preferences and return them as a new java\/util\/Map.\n+ *\/\n++ (jobject)collectPreferences;\n+\n+\/**\n+ * Collect all platform preferences and notify the JavaFX application when a preference has changed.\n+ * The change notification includes all preferences, not only the changed preferences.\n+ *\/\n++ (void)updatePreferences:(jobject)application;\n+\n+@end\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/PlatformSupport.h","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,281 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"PlatformSupport.h\"\n+#import \"GlassMacros.h\"\n+\n+#define MACOS_10_13 @available(macOS 10.13, *)\n+#define MACOS_10_14 @available(macOS 10.14, *)\n+\n+#define INIT_CLASS(CLS, NAME)\\\n+    if (CLS == nil) {\\\n+        jclass cls = (*env)->FindClass(env, NAME);\\\n+        if ((*env)->ExceptionCheck(env)) {\\\n+            GLASS_CHECK_EXCEPTION(env);\\\n+            return;\\\n+        }\\\n+        CLS = (*env)->NewGlobalRef(env, cls);\\\n+    }\n+\n+#define INIT_METHOD(CLS, METHOD, NAME, SIG)\\\n+    if (METHOD == nil) {\\\n+        METHOD = (*env)->GetMethodID(env, CLS, NAME, SIG);\\\n+        if ((*env)->ExceptionCheck(env)) {\\\n+            GLASS_CHECK_EXCEPTION(env);\\\n+            return;\\\n+        }\\\n+    }\n+\n+#define INIT_STATIC_METHOD(CLS, METHOD, NAME, SIG)\\\n+    if (METHOD == nil) {\\\n+        METHOD = (*env)->GetStaticMethodID(env, CLS, NAME, SIG);\\\n+        if ((*env)->ExceptionCheck(env)) {\\\n+            GLASS_CHECK_EXCEPTION(env);\\\n+            return;\\\n+        }\\\n+    }\n+\n+#define INIT_STATIC_FIELD(CLS, FIELD, NAME, SIG)\\\n+    if (FIELD == nil) {\\\n+        FIELD = (*env)->GetStaticFieldID(env, CLS, NAME, SIG);\\\n+        if ((*env)->ExceptionCheck(env)) {\\\n+            GLASS_CHECK_EXCEPTION(env);\\\n+            return;\\\n+        }\\\n+    }\n+\n+static jobject currentPreferences = nil;\n+\n+@implementation PlatformSupport\n+\n++ (void)initIDs:(JNIEnv*)env {\n+    INIT_CLASS(jMapClass, \"java\/util\/Map\");\n+    INIT_METHOD(jMapClass, jMapPutMethod, \"put\", \"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;\");\n+\n+    INIT_CLASS(jHashMapClass, \"java\/util\/HashMap\");\n+    INIT_METHOD(jHashMapClass, jHashMapInitMethod, \"<init>\", \"()V\");\n+\n+    INIT_CLASS(jBooleanClass, \"java\/lang\/Boolean\");\n+    INIT_STATIC_FIELD(jBooleanClass, jBooleanTRUE, \"TRUE\", \"Ljava\/lang\/Boolean;\");\n+    INIT_STATIC_FIELD(jBooleanClass, jBooleanFALSE, \"FALSE\", \"Ljava\/lang\/Boolean;\");\n+\n+    INIT_CLASS(jCollectionsClass, \"java\/util\/Collections\");\n+    INIT_STATIC_METHOD(jCollectionsClass, jCollectionsUnmodifiableMapMethod, \"unmodifiableMap\", \"(Ljava\/util\/Map;)Ljava\/util\/Map;\");\n+\n+    INIT_CLASS(jObjectClass, \"java\/lang\/Object\");\n+    INIT_METHOD(jObjectClass, jObjectEqualsMethod, \"equals\", \"(Ljava\/lang\/Object;)Z\");\n+\n+    INIT_CLASS(jColorClass, \"javafx\/scene\/paint\/Color\");\n+    INIT_STATIC_METHOD(jColorClass, jColorRgbMethod, \"rgb\", \"(IIID)Ljavafx\/scene\/paint\/Color;\");\n+}\n+\n++ (jobject)collectPreferences {\n+    GET_MAIN_JENV;\n+\n+    jobject preferences = (*env)->NewObject(env, jHashMapClass, jHashMapInitMethod);\n+    GLASS_CHECK_EXCEPTION(env);\n+    if (preferences == nil) {\n+        return nil;\n+    }\n+\n+    \/\/ The current appearance is set to the system appearance when the application is started.\n+    \/\/ Since the system appearance can change while the application is running, we need to set\n+    \/\/ the current appearance to the application's effective appearance before querying system\n+    \/\/ colors.\n+    NSAppearance* lastAppearance = [NSAppearance currentAppearance];\n+    [NSAppearance setCurrentAppearance:[NSApp effectiveAppearance]];\n+    [PlatformSupport queryNSColors:preferences];\n+    [NSAppearance setCurrentAppearance:lastAppearance];\n+\n+    return preferences;\n+}\n+\n++ (void)queryNSColors:(jobject)preferences {\n+    \/\/ Label colors\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.labelColor\" value:[NSColor labelColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.secondaryLabelColor\" value:[NSColor secondaryLabelColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.tertiaryLabelColor\" value:[NSColor tertiaryLabelColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.quaternaryLabelColor\" value:[NSColor quaternaryLabelColor]];\n+\n+    \/\/ Text colors\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.textColor\" value:[NSColor textColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.placeholderTextColor\" value:[NSColor placeholderTextColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.selectedTextColor\" value:[NSColor selectedTextColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.textBackgroundColor\" value:[NSColor textBackgroundColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.selectedTextBackgroundColor\" value:[NSColor selectedTextBackgroundColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.keyboardFocusIndicatorColor\" value:[NSColor keyboardFocusIndicatorColor]];\n+    if (MACOS_10_14) {\n+        [PlatformSupport putColor:preferences key:\"macOS.NSColor.unemphasizedSelectedTextColor\" value:[NSColor unemphasizedSelectedTextColor]];\n+        [PlatformSupport putColor:preferences key:\"macOS.NSColor.unemphasizedSelectedTextBackgroundColor\" value:[NSColor unemphasizedSelectedTextBackgroundColor]];\n+    }\n+\n+    \/\/ Content colors\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.linkColor\" value:[NSColor linkColor]];\n+    if (MACOS_10_14) {\n+        [PlatformSupport putColor:preferences key:\"macOS.NSColor.separatorColor\" value:[NSColor separatorColor]];\n+        [PlatformSupport putColor:preferences key:\"macOS.NSColor.selectedContentBackgroundColor\" value:[NSColor selectedContentBackgroundColor]];\n+        [PlatformSupport putColor:preferences key:\"macOS.NSColor.unemphasizedSelectedContentBackgroundColor\" value:[NSColor unemphasizedSelectedContentBackgroundColor]];\n+    }\n+\n+    \/\/ Menu colors\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.selectedMenuItemTextColor\" value:[NSColor selectedMenuItemTextColor]];\n+\n+    \/\/ Table colors\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.gridColor\" value:[NSColor gridColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.headerTextColor\" value:[NSColor headerTextColor]];\n+    if (MACOS_10_14) {\n+        [PlatformSupport putColors:preferences key:\"macOS.NSColor.alternatingContentBackgroundColors\" value:[NSColor alternatingContentBackgroundColors]];\n+    }\n+\n+    \/\/ Control colors\n+    if (MACOS_10_14) {\n+        [PlatformSupport putColor:preferences key:\"macOS.NSColor.controlAccentColor\" value:[NSColor controlAccentColor]];\n+    }\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.controlColor\" value:[NSColor controlColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.controlBackgroundColor\" value:[NSColor controlBackgroundColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.controlTextColor\" value:[NSColor controlTextColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.disabledControlTextColor\" value:[NSColor disabledControlTextColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.selectedControlColor\" value:[NSColor selectedControlColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.selectedControlTextColor\" value:[NSColor selectedControlTextColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.alternateSelectedControlTextColor\" value:[NSColor alternateSelectedControlTextColor]];\n+\n+    const char* controlTint = nil;\n+    switch ([NSColor currentControlTint]) {\n+        case NSDefaultControlTint: controlTint = \"NSDefaultControlTint\"; break;\n+        case NSGraphiteControlTint: controlTint = \"NSGraphiteControlTint\"; break;\n+        case NSBlueControlTint: controlTint = \"NSBlueControlTint\"; break;\n+        case NSClearControlTint: controlTint = \"NSClearControlTint\"; break;\n+    }\n+    if (controlTint != nil) {\n+        [PlatformSupport putString:preferences key:\"macOS.NSColor.currentControlTint\" value:controlTint];\n+    }\n+\n+    \/\/ Window colors\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.windowBackgroundColor\" value:[NSColor windowBackgroundColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.windowFrameTextColor\" value:[NSColor windowFrameTextColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.underPageBackgroundColor\" value:[NSColor underPageBackgroundColor]];\n+\n+    \/\/ Highlights and shadows\n+    if (MACOS_10_13) {\n+        [PlatformSupport putColor:preferences key:\"macOS.NSColor.findHighlightColor\" value:[NSColor findHighlightColor]];\n+    }\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.highlightColor\" value:[NSColor highlightColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.shadowColor\" value:[NSColor shadowColor]];\n+\n+    \/\/ Adaptable system colors\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemBlueColor\" value:[NSColor systemBlueColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemBrownColor\" value:[NSColor systemBrownColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemGrayColor\" value:[NSColor systemGrayColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemGreenColor\" value:[NSColor systemGreenColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemIndigoColor\" value:[NSColor systemIndigoColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemOrangeColor\" value:[NSColor systemOrangeColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemPinkColor\" value:[NSColor systemPinkColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemPurpleColor\" value:[NSColor systemPurpleColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemRedColor\" value:[NSColor systemRedColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemTealColor\" value:[NSColor systemTealColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemYellowColor\" value:[NSColor systemYellowColor]];\n+}\n+\n++ (void)updatePreferences:(jobject)application {\n+    GET_MAIN_JENV;\n+\n+    jobject newPreferences = [self collectPreferences];\n+    if (newPreferences == nil) {\n+        return;\n+    }\n+\n+    jboolean preferencesChanged = !(*env)->CallBooleanMethod(\n+        env, newPreferences, jObjectEqualsMethod, currentPreferences);\n+    GLASS_CHECK_EXCEPTION(env);\n+\n+    if (preferencesChanged) {\n+        if (currentPreferences != nil) {\n+            (*env)->DeleteGlobalRef(env, currentPreferences);\n+        }\n+\n+        currentPreferences = (*env)->NewGlobalRef(env, newPreferences);\n+\n+        jobject unmodifiablePreferences = (*env)->CallStaticObjectMethod(\n+            env, jCollectionsClass, jCollectionsUnmodifiableMapMethod, newPreferences);\n+        GLASS_CHECK_EXCEPTION(env);\n+\n+        if (unmodifiablePreferences != nil) {\n+            (*env)->CallVoidMethod(\n+                env, application,\n+                javaIDs.MacApplication.notifyPreferencesChanged,\n+                unmodifiablePreferences);\n+\n+            (*env)->DeleteLocalRef(env, unmodifiablePreferences);\n+        }\n+\n+    }\n+\n+    (*env)->DeleteLocalRef(env, newPreferences);\n+}\n+\n++ (void)putString:(jobject)preferences key:(const char*)key value:(const char*)value {\n+    GET_MAIN_JENV;\n+\n+    (*env)->CallObjectMethod(env, preferences, jMapPutMethod,\n+        (*env)->NewStringUTF(env, key),\n+        value != nil ? (*env)->NewStringUTF(env, value) : nil);\n+}\n+\n++ (void)putColor:(jobject)preferences key:(const char*)colorName value:(NSColor*)color {\n+    GET_MAIN_JENV;\n+\n+    NSColor* c = [color colorUsingColorSpace:[NSColorSpace deviceRGBColorSpace]];\n+    (*env)->CallObjectMethod(env, preferences, jMapPutMethod,\n+        (*env)->NewStringUTF(env, colorName),\n+        (*env)->CallStaticObjectMethod(\n+            env, jColorClass, jColorRgbMethod,\n+            (int)([c redComponent] * 255.0f),\n+            (int)([c greenComponent] * 255.0f),\n+            (int)([c blueComponent] * 255.0f),\n+            (double)[c alphaComponent]));\n+}\n+\n++ (void)putColors:(jobject)preferences key:(const char*)colorName value:(NSArray*)colors {\n+    GET_MAIN_JENV;\n+\n+    int count = [colors count];\n+    jobjectArray res = (*env)->NewObjectArray(env, count, jColorClass, nil);\n+\n+    for (int i = 0; i < count; ++i) {\n+        NSColor* c = [colors[i] colorUsingColorSpace:[NSColorSpace deviceRGBColorSpace]];\n+        jobject fxcolor = (*env)->CallStaticObjectMethod(\n+            env, jColorClass, jColorRgbMethod,\n+            (int)([c redComponent] * 255.0f),\n+            (int)([c greenComponent] * 255.0f),\n+            (int)([c blueComponent] * 255.0f),\n+            (double)[c alphaComponent]);\n+\n+        (*env)->SetObjectArrayElement(env, res, i, fxcolor);\n+    }\n+\n+    (*env)->CallObjectMethod(env, preferences, jMapPutMethod, (*env)->NewStringUTF(env, colorName), res);\n+}\n+\n+@end\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/PlatformSupport.m","additions":281,"deletions":0,"binary":false,"changes":281,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+#include \"RoActivationSupport.h\"\n@@ -101,1 +102,1 @@\n-GlassApplication::GlassApplication(jobject jrefThis) : BaseWnd()\n+GlassApplication::GlassApplication(jobject jrefThis) : BaseWnd(), m_platformSupport(GetEnv())\n@@ -126,14 +127,0 @@\n-jstring GlassApplication::GetThemeName(JNIEnv* env)\n-{\n-    HIGHCONTRAST contrastInfo;\n-    contrastInfo.cbSize = sizeof(HIGHCONTRAST);\n-    ::SystemParametersInfo(SPI_GETHIGHCONTRAST, sizeof(HIGHCONTRAST), &contrastInfo, 0);\n-    if (contrastInfo.dwFlags & HCF_HIGHCONTRASTON) {\n-        jsize length = (jsize) wcslen(contrastInfo.lpszDefaultScheme);\n-        jstring jstr = env->NewString((jchar*) contrastInfo.lpszDefaultScheme, length);\n-        if (CheckAndClearException(env)) return NULL;\n-        return jstr;\n-    }\n-    return NULL;\n-}\n-\n@@ -184,0 +171,5 @@\n+            if (((UINT)wParam == SPI_GETHIGHCONTRAST ||\n+                    lParam != NULL && wcscmp(LPCWSTR(lParam), L\"ImmersiveColorSet\") == 0) &&\n+                    m_platformSupport.updatePreferences(m_grefThis)) {\n+                return 0;\n+            }\n@@ -191,7 +183,7 @@\n-        case WM_THEMECHANGED: {\n-            JNIEnv* env = GetEnv();\n-            jstring themeName = GlassApplication::GetThemeName(env);\n-            jboolean result = env->CallBooleanMethod(m_grefThis, javaIDs.Application.notifyThemeChangedMID, themeName);\n-            if (CheckAndClearException(env)) return 1;\n-            return !result;\n-        }\n+        case WM_THEMECHANGED:\n+        case WM_SYSCOLORCHANGE:\n+        case WM_DWMCOLORIZATIONCOLORCHANGED:\n+            if (m_platformSupport.updatePreferences(m_grefThis)) {\n+                return 0;\n+            }\n+            break;\n@@ -316,0 +308,3 @@\n+        tryInitializeRoActivationSupport();\n+    } else if (dwReason == DLL_PROCESS_DETACH) {\n+        uninitializeRoActivationSupport();\n@@ -341,3 +336,3 @@\n-    javaIDs.Application.notifyThemeChangedMID =\n-        env->GetMethodID(cls, \"notifyThemeChanged\", \"(Ljava\/lang\/String;)Z\");\n-    ASSERT(javaIDs.Application.notifyThemeChangedMID);\n+    javaIDs.Application.notifyPreferencesChangedMID =\n+        env->GetMethodID(cls, \"notifyPreferencesChanged\", \"(Ljava\/util\/Map;)V\");\n+    ASSERT(javaIDs.Application.notifyPreferencesChangedMID);\n@@ -454,11 +449,0 @@\n-\/*\n- * Class:     com_sun_glass_ui_win_WinApplication\n- * Method:    _getHighContrastTheme\n- * Signature: ()Ljava\/lang\/String;\n- *\/\n-JNIEXPORT jstring JNICALL Java_com_sun_glass_ui_win_WinApplication__1getHighContrastTheme\n-  (JNIEnv * env, jobject self)\n-{\n-    return GlassApplication::GetThemeName(env);\n-}\n-\n@@ -538,0 +522,11 @@\n+\/*\n+ * Class:     com_sun_glass_ui_win_WinApplication\n+ * Method:    getPlatformPreferences\n+ * Signature: ()Ljava\/util\/Map;\n+ *\/\n+JNIEXPORT jobject JNICALL Java_com_sun_glass_ui_win_WinApplication_getPlatformPreferences\n+    (JNIEnv * env, jobject self)\n+{\n+    return GlassApplication::GetPlatformPreferences();\n+}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassApplication.cpp","additions":32,"deletions":37,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-\n+#include \"PlatformSupport.h\"\n@@ -84,1 +84,4 @@\n-    static jstring GetThemeName(JNIEnv* env);\n+\n+    static jobject GetPlatformPreferences() {\n+        return pInstance ? pInstance->m_platformSupport.collectPreferences() : NULL;\n+    }\n@@ -128,0 +131,1 @@\n+    PlatformSupport m_platformSupport;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassApplication.h","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,234 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"PlatformSupport.h\"\n+#include \"RoActivationSupport.h\"\n+#include <windows.ui.viewmanagement.h>\n+#include <tuple>\n+\n+using namespace Microsoft::WRL;\n+using namespace ABI::Windows::UI;\n+using namespace ABI::Windows::UI::ViewManagement;\n+\n+PlatformSupport::PlatformSupport(JNIEnv* env) : env(env), initialized(false)\n+{\n+    javaClasses.Object = (jclass)env->FindClass(\"java\/lang\/Object\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaIDs.Object.equals = env->GetMethodID(javaClasses.Object, \"equals\", \"(Ljava\/lang\/Object;)Z\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaClasses.Collections = (jclass)env->FindClass(\"java\/util\/Collections\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaIDs.Collections.unmodifiableMap = env->GetStaticMethodID(\n+        javaClasses.Collections, \"unmodifiableMap\", \"(Ljava\/util\/Map;)Ljava\/util\/Map;\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaClasses.Map = (jclass)env->FindClass(\"java\/util\/Map\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaIDs.Map.put = env->GetMethodID(\n+        javaClasses.Map, \"put\", \"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaClasses.HashMap = (jclass)env->FindClass(\"java\/util\/HashMap\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaIDs.HashMap.init = env->GetMethodID(javaClasses.HashMap, \"<init>\", \"()V\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaClasses.Color = (jclass)env->FindClass(\"javafx\/scene\/paint\/Color\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaIDs.Color.rgb = env->GetStaticMethodID(javaClasses.Color, \"rgb\", \"(IIID)Ljavafx\/scene\/paint\/Color;\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaClasses.Boolean = (jclass)env->FindClass(\"java\/lang\/Boolean\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaIDs.Boolean.trueID = env->GetStaticFieldID(javaClasses.Boolean, \"TRUE\", \"Ljava\/lang\/Boolean;\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaIDs.Boolean.falseID = env->GetStaticFieldID(javaClasses.Boolean, \"FALSE\", \"Ljava\/lang\/Boolean;\");\n+    if (CheckAndClearException(env)) return;\n+\n+    initialized = true;\n+}\n+\n+jobject PlatformSupport::collectPreferences() const\n+{\n+    if (!initialized) {\n+        return NULL;\n+    }\n+\n+    jobject prefs = env->NewObject(javaClasses.HashMap, javaIDs.HashMap.init);\n+    if (CheckAndClearException(env)) return NULL;\n+\n+    queryHighContrastScheme(prefs);\n+    querySystemColors(prefs);\n+    queryUIColors(prefs);\n+    return prefs;\n+}\n+\n+bool PlatformSupport::updatePreferences(jobject application) const\n+{\n+    if (!initialized || application == NULL) {\n+        return false;\n+    }\n+\n+    jobject newPreferences = collectPreferences();\n+\n+    jboolean preferencesChanged =\n+        newPreferences != NULL &&\n+        !env->CallBooleanMethod(newPreferences, javaIDs.Object.equals, preferences);\n+\n+    if (!CheckAndClearException(env) && preferencesChanged) {\n+        preferences = newPreferences;\n+        jobject unmodifiablePreferences = env->CallStaticObjectMethod(\n+            javaClasses.Collections, javaIDs.Collections.unmodifiableMap, newPreferences);\n+\n+        if (!CheckAndClearException(env)) {\n+            env->CallVoidMethod(application, javaIDs.Application.notifyPreferencesChangedMID, unmodifiablePreferences);\n+            env->DeleteLocalRef(unmodifiablePreferences);\n+            env->DeleteLocalRef(newPreferences);\n+            return true;\n+        }\n+    }\n+\n+    env->DeleteLocalRef(newPreferences);\n+    return false;\n+}\n+\n+void PlatformSupport::queryHighContrastScheme(jobject properties) const\n+{\n+    HIGHCONTRAST contrastInfo;\n+    contrastInfo.cbSize = sizeof(HIGHCONTRAST);\n+    ::SystemParametersInfo(SPI_GETHIGHCONTRAST, sizeof(HIGHCONTRAST), &contrastInfo, 0);\n+    if (contrastInfo.dwFlags & HCF_HIGHCONTRASTON) {\n+        putBoolean(properties, \"Windows.SPI.HighContrastOn\", true);\n+        putString(properties, \"Windows.SPI.HighContrastColorScheme\", contrastInfo.lpszDefaultScheme);\n+    } else {\n+        putBoolean(properties, \"Windows.SPI.HighContrastOn\", false);\n+        putString(properties, \"Windows.SPI.HighContrastColorScheme\", (const char*)NULL);\n+    }\n+}\n+\n+void PlatformSupport::querySystemColors(jobject properties) const\n+{\n+    putColor(properties, \"Windows.SysColor.COLOR_3DFACE\", GetSysColor(COLOR_3DFACE));\n+    putColor(properties, \"Windows.SysColor.COLOR_BTNTEXT\", GetSysColor(COLOR_BTNTEXT));\n+    putColor(properties, \"Windows.SysColor.COLOR_GRAYTEXT\", GetSysColor(COLOR_GRAYTEXT));\n+    putColor(properties, \"Windows.SysColor.COLOR_HIGHLIGHT\", GetSysColor(COLOR_HIGHLIGHT));\n+    putColor(properties, \"Windows.SysColor.COLOR_HIGHLIGHTTEXT\", GetSysColor(COLOR_HIGHLIGHTTEXT));\n+    putColor(properties, \"Windows.SysColor.COLOR_HOTLIGHT\", GetSysColor(COLOR_HOTLIGHT));\n+    putColor(properties, \"Windows.SysColor.COLOR_WINDOW\", GetSysColor(COLOR_WINDOW));\n+    putColor(properties, \"Windows.SysColor.COLOR_WINDOWTEXT\", GetSysColor(COLOR_WINDOWTEXT));\n+}\n+\n+void PlatformSupport::queryUIColors(jobject properties) const\n+{\n+    if (!isRoActivationSupported()) {\n+        return;\n+    }\n+\n+    try {\n+        ComPtr<IUISettings> settings;\n+        RO_CHECKED(\"RoActivateInstance\",\n+                   RoActivateInstance(hstring(\"Windows.UI.ViewManagement.UISettings\"), (IInspectable**)&settings));\n+\n+        ComPtr<IUISettings3> settings3;\n+        RO_CHECKED(\"IUISettings::QueryInterface<IUISettings3>\",\n+                   settings->QueryInterface<IUISettings3>(&settings3));\n+\n+        Color background, foreground, accentDark3, accentDark2, accentDark1, accent,\n+              accentLight1, accentLight2, accentLight3;\n+\n+        settings3->GetColorValue(UIColorType::UIColorType_Background, &background);\n+        settings3->GetColorValue(UIColorType::UIColorType_Foreground, &foreground);\n+        settings3->GetColorValue(UIColorType::UIColorType_AccentDark3, &accentDark3);\n+        settings3->GetColorValue(UIColorType::UIColorType_AccentDark2, &accentDark2);\n+        settings3->GetColorValue(UIColorType::UIColorType_AccentDark1, &accentDark1);\n+        settings3->GetColorValue(UIColorType::UIColorType_Accent, &accent);\n+        settings3->GetColorValue(UIColorType::UIColorType_AccentLight1, &accentLight1);\n+        settings3->GetColorValue(UIColorType::UIColorType_AccentLight2, &accentLight2);\n+        settings3->GetColorValue(UIColorType::UIColorType_AccentLight3, &accentLight3);\n+\n+        putColor(properties, \"Windows.UIColor.Background\", background);\n+        putColor(properties, \"Windows.UIColor.Foreground\", foreground);\n+        putColor(properties, \"Windows.UIColor.AccentDark3\", accentDark3);\n+        putColor(properties, \"Windows.UIColor.AccentDark2\", accentDark2);\n+        putColor(properties, \"Windows.UIColor.AccentDark1\", accentDark1);\n+        putColor(properties, \"Windows.UIColor.Accent\", accent);\n+        putColor(properties, \"Windows.UIColor.AccentLight1\", accentLight1);\n+        putColor(properties, \"Windows.UIColor.AccentLight2\", accentLight2);\n+        putColor(properties, \"Windows.UIColor.AccentLight3\", accentLight3);\n+    } catch (RoException const&) {\n+        \/\/ If an activation exception occurs, it probably means that we're on a Windows system\n+        \/\/ that doesn't support the UISettings API. This is not a problem, it simply means that\n+        \/\/ we don't report the UISettings properties back to the JavaFX application.\n+        return;\n+    }\n+}\n+\n+void PlatformSupport::putString(jobject properties, const char* key, const char* value) const\n+{\n+    env->CallObjectMethod(properties, javaIDs.Map.put,\n+        env->NewStringUTF(key),\n+        value != NULL ? env->NewStringUTF(value) : NULL);\n+}\n+\n+void PlatformSupport::putString(jobject properties, const char* key, const wchar_t* value) const\n+{\n+    env->CallObjectMethod(properties, javaIDs.Map.put,\n+        env->NewStringUTF(key),\n+        value != NULL ? env->NewString((jchar*)value, wcslen(value)) : NULL);\n+}\n+\n+void PlatformSupport::putBoolean(jobject properties, const char* key, const bool value) const\n+{\n+    env->CallObjectMethod(properties, javaIDs.Map.put,\n+        env->NewStringUTF(key),\n+        value ? env->GetStaticObjectField(javaClasses.Boolean, javaIDs.Boolean.trueID) :\n+                env->GetStaticObjectField(javaClasses.Boolean, javaIDs.Boolean.falseID));\n+}\n+\n+void PlatformSupport::putColor(jobject properties, const char* colorName, int colorValue) const\n+{\n+    env->CallObjectMethod(properties, javaIDs.Map.put,\n+        env->NewStringUTF(colorName),\n+        env->CallStaticObjectMethod(\n+            javaClasses.Color, javaIDs.Color.rgb,\n+            GetRValue(colorValue), GetGValue(colorValue), GetBValue(colorValue), 1.0));\n+}\n+\n+void PlatformSupport::putColor(jobject properties, const char* colorName, Color colorValue) const\n+{\n+    env->CallObjectMethod(properties, javaIDs.Map.put,\n+        env->NewStringUTF(colorName),\n+        env->CallStaticObjectMethod(\n+            javaClasses.Color, javaIDs.Color.rgb,\n+            colorValue.R, colorValue.G, colorValue.B, (double)colorValue.A \/ 255.0));\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/PlatformSupport.cpp","additions":234,"deletions":0,"binary":false,"changes":234,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#pragma once\n+\n+#include <common.h>\n+\n+namespace ABI { namespace Windows { namespace UI { struct Color; } } }\n+\n+class PlatformSupport final\n+{\n+public:\n+    PlatformSupport(JNIEnv*);\n+    ~PlatformSupport() = default;\n+    PlatformSupport(PlatformSupport const&) = delete;\n+    PlatformSupport& operator=(PlatformSupport const&) = delete;\n+\n+    \/**\n+     * Collect all platform preferences and return them as a new java\/util\/Map.\n+     *\/\n+    jobject collectPreferences() const;\n+\n+    \/**\n+     * Collect all platform preferences and notify the JavaFX application when a preference has changed.\n+     * The change notification includes all preferences, not only the changed preferences.\n+     *\/\n+    bool updatePreferences(jobject application) const;\n+\n+private:\n+    JNIEnv* env;\n+    bool initialized;\n+    mutable JGlobalRef<jobject> preferences;\n+\n+    struct {\n+        JGlobalRef<jclass> Boolean;\n+        JGlobalRef<jclass> Object;\n+        JGlobalRef<jclass> Collections;\n+        JGlobalRef<jclass> Map;\n+        JGlobalRef<jclass> HashMap;\n+        JGlobalRef<jclass> Color;\n+    } javaClasses;\n+\n+    void querySystemColors(jobject properties) const;\n+    void queryHighContrastScheme(jobject properties) const;\n+    void queryUIColors(jobject properties) const;\n+\n+    void putString(jobject properties, const char* key, const char* value) const;\n+    void putString(jobject properties, const char* key, const wchar_t* value) const;\n+    void putBoolean(jobject properties, const char* key, const bool value) const;\n+    void putColor(jobject properties, const char* colorName, int colorValue) const;\n+    void putColor(jobject properties, const char* colorName, ABI::Windows::UI::Color colorValue) const;\n+};\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/PlatformSupport.h","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,240 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"RoActivationSupport.h\"\n+#include <comdef.h>\n+#include <winstring.h>\n+#include <jni.h>\n+\n+namespace\n+{\n+    bool initialized = false;\n+    const char* moduleNotFoundMessage = \"WinRT: %s not found\\n\";\n+\n+    const char* catStrW(const char* s1, const wchar_t* s2w)\n+    {\n+        int s1_len = int(strlen(s1));\n+        int s2_len = WideCharToMultiByte(CP_ACP, 0, s2w, -1, NULL, 0, NULL, FALSE);\n+        char* res = new char[s1_len + s2_len];\n+        WideCharToMultiByte(CP_ACP, 0, s2w, -1, res + s1_len, s2_len, NULL, FALSE);\n+        memcpy_s(res, s1_len + s2_len, s1, s1_len);\n+        return res;\n+    }\n+\n+    typedef HRESULT WINAPI FnRoInitialize(RO_INIT_TYPE initType);\n+    typedef void WINAPI FnRoUninitialize();\n+    typedef HRESULT WINAPI FnRoActivateInstance(HSTRING activatableClassId, IInspectable** instance);\n+    typedef HRESULT WINAPI FnWindowsCreateString(PCNZWCH sourceString, UINT32 length, HSTRING* string);\n+    typedef HRESULT WINAPI FnWindowsDeleteString(HSTRING string);\n+\n+    HMODULE hLibComBase = NULL;\n+    FnRoInitialize* pRoInitialize = NULL;\n+    FnRoUninitialize* pRoUninitialize = NULL;\n+    FnRoActivateInstance* pRoActivateInstance = NULL;\n+    FnWindowsCreateString* pWindowsCreateString = NULL;\n+    FnWindowsDeleteString* pWindowsDeleteString = NULL;\n+\n+    template<class T>\n+    bool loadFunction(HMODULE lib, T*& fnptr, const char* name)\n+    {\n+        fnptr = reinterpret_cast<T*>(GetProcAddress(lib, name));\n+        if (fnptr == nullptr) {\n+            fprintf(stderr, \"GetProcAddress: %s not loaded\\n\", name);\n+            initialized = false;\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+}\n+\n+void tryInitializeRoActivationSupport()\n+{\n+    if (initialized) {\n+        return;\n+    }\n+\n+    wchar_t path[MAX_PATH];\n+    wchar_t file[MAX_PATH];\n+\n+    if (GetSystemDirectory(path, sizeof(path) \/ sizeof(wchar_t)) == 0) {\n+        return;\n+    }\n+\n+    memcpy_s(file, sizeof(file), path, sizeof(path));\n+    wcscat_s(file, MAX_PATH-1, L\"\\\\combase.dll\");\n+    hLibComBase = LoadLibraryW(file);\n+    if (!hLibComBase) {\n+        fprintf(stderr, moduleNotFoundMessage, \"combase.dll\");\n+        return;\n+    }\n+\n+    bool loaded =\n+        loadFunction(hLibComBase, pRoInitialize, \"RoInitialize\") &&\n+        loadFunction(hLibComBase, pRoUninitialize, \"RoUninitialize\") &&\n+        loadFunction(hLibComBase, pRoActivateInstance, \"RoActivateInstance\") &&\n+        loadFunction(hLibComBase, pWindowsCreateString, \"WindowsCreateString\") &&\n+        loadFunction(hLibComBase, pWindowsDeleteString, \"WindowsDeleteString\");\n+\n+    if (!loaded) {\n+        uninitializeRoActivationSupport();\n+    } else {\n+        HRESULT res = RoInitialize(RO_INIT_SINGLETHREADED);\n+        if (FAILED(res)) {\n+            fprintf(stderr, RoException(\"RoInitialize failed: \", res).message());\n+            uninitializeRoActivationSupport();\n+        } else {\n+            initialized = true;\n+        }\n+    }\n+}\n+\n+void uninitializeRoActivationSupport()\n+{\n+    if (initialized) {\n+        RoUninitialize();\n+    }\n+\n+    initialized = false;\n+\n+    if (hLibComBase) {\n+        FreeLibrary(hLibComBase);\n+        hLibComBase = NULL;\n+        pRoInitialize = NULL;\n+        pRoUninitialize = NULL;\n+        pRoActivateInstance = NULL;\n+        pWindowsCreateString = NULL;\n+        pWindowsDeleteString = NULL;\n+    }\n+}\n+\n+bool isRoActivationSupported()\n+{\n+    return initialized;\n+}\n+\n+HRESULT WINAPI RoInitialize(RO_INIT_TYPE initType)\n+{\n+    return pRoInitialize(initType);\n+}\n+\n+void WINAPI RoUninitialize()\n+{\n+    pRoUninitialize();\n+}\n+\n+HRESULT WINAPI RoActivateInstance(HSTRING activatableClassId, IInspectable** instance)\n+{\n+    return pRoActivateInstance(activatableClassId, instance);\n+}\n+\n+HRESULT WINAPI WindowsCreateString(PCNZWCH sourceString, UINT32 length, HSTRING* string)\n+{\n+    return pWindowsCreateString(sourceString, length, string);\n+}\n+\n+HRESULT WINAPI WindowsDeleteString(HSTRING string)\n+{\n+    return pWindowsDeleteString(string);\n+}\n+\n+hstring::hstring(const char* str)\n+{\n+    int wstr_len = MultiByteToWideChar(CP_UTF8, 0, str, -1, nullptr, 0);\n+    WCHAR* wstr = new WCHAR[wstr_len];\n+    memset(wstr, 0, wstr_len * sizeof(WCHAR));\n+    MultiByteToWideChar(CP_UTF8, 0, str, -1, wstr, wstr_len);\n+    WindowsCreateString(wstr, wstr_len - 1, &hstr_);\n+    delete[] wstr;\n+}\n+\n+hstring::~hstring()\n+{\n+    WindowsDeleteString(hstr_);\n+}\n+\n+hstring::operator HSTRING()\n+{\n+    return hstr_;\n+}\n+\n+RoException::RoException(const char* message)\n+{\n+    size_t len = strlen(message);\n+    char* msg = new char[len + 1];\n+    strcpy_s(msg, len + 1, message);\n+    message_ = msg;\n+}\n+\n+RoException::RoException(const char* message, HRESULT res)\n+{\n+    message_ = catStrW(message, _com_error(res).ErrorMessage());\n+}\n+\n+RoException::RoException(const RoException& source) : RoException(source.message()) {}\n+\n+RoException::RoException(RoException&& source)\n+{\n+    message_ = source.message_;\n+    source.message_ = nullptr;\n+}\n+\n+RoException::~RoException()\n+{\n+    if (message_ != nullptr) {\n+        delete[] message_;\n+    }\n+}\n+\n+RoException& RoException::operator=(const RoException& source)\n+{\n+    if (message_ != nullptr) {\n+        delete[] message_;\n+    }\n+\n+    size_t len = strlen(source.message());\n+    char* msg = new char[len + 1];\n+    strcpy_s(msg, len + 1, source.message());\n+    message_ = msg;\n+\n+    return *this;\n+}\n+\n+RoException& RoException::operator=(RoException&& source)\n+{\n+    if (message_ != nullptr) {\n+        delete[] message_;\n+    }\n+\n+    message_ = source.message_;\n+    source.message_ = nullptr;\n+\n+    return *this;\n+}\n+\n+const char* RoException::message() const\n+{\n+    return message_;\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/RoActivationSupport.cpp","additions":240,"deletions":0,"binary":false,"changes":240,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#pragma once\n+\n+#define _ROAPI_\n+#include <roapi.h>\n+#include <wrl.h>\n+#include <hstring.h>\n+\n+#define RO_CHECKED(NAME, FUNC) \\\n+    { HRESULT res = FUNC; if (FAILED(res)) throw RoException(NAME ## \" failed: \", res); }\n+\n+struct hstring\n+{\n+    hstring(const char* str);\n+    ~hstring();\n+    operator HSTRING();\n+\n+private:\n+    HSTRING hstr_;\n+};\n+\n+void tryInitializeRoActivationSupport();\n+void uninitializeRoActivationSupport();\n+bool isRoActivationSupported();\n+\n+class RoException\n+{\n+public:\n+    RoException(const char* message);\n+    RoException(const char* message, HRESULT);\n+    RoException(const RoException&);\n+    RoException(RoException&&);\n+    ~RoException();\n+\n+    RoException& operator=(const RoException&);\n+    RoException& operator=(RoException&&);\n+\n+    const char* message() const;\n+\n+private:\n+    const char* message_;\n+};\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/RoActivationSupport.h","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -291,3 +291,3 @@\n-    operator T() { return m_localJRef; }\n-    operator bool() { return NULL!=m_localJRef; }\n-    bool operator !() { return NULL==m_localJRef; }\n+    operator T() const { return m_localJRef; }\n+    operator bool() const { return NULL!=m_localJRef; }\n+    bool operator !() const { return NULL==m_localJRef; }\n@@ -329,3 +329,3 @@\n-    operator T() { return m_globalJRef; }\n-    operator bool() { return NULL!=m_globalJRef; }\n-    bool operator !() { return NULL==m_globalJRef; }\n+    operator T() const { return m_globalJRef; }\n+    operator bool() const { return NULL!=m_globalJRef; }\n+    bool operator !() const { return NULL==m_globalJRef; }\n@@ -506,1 +506,1 @@\n-        jmethodID notifyThemeChangedMID;\n+        jmethodID notifyPreferencesChangedMID;\n@@ -508,0 +508,19 @@\n+    struct {\n+        jmethodID rgb;\n+    } Color;\n+    struct {\n+        jfieldID trueID;\n+        jfieldID falseID;\n+    } Boolean;\n+    struct {\n+        jmethodID equals;\n+    } Object;\n+    struct {\n+        jmethodID unmodifiableMap;\n+    } Collections;\n+    struct {\n+        jmethodID put;\n+    } Map;\n+    struct {\n+        jmethodID init;\n+    } HashMap;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/Utils.h","additions":27,"deletions":8,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,191 @@\n+\/*\n+ * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.application;\n+\n+import com.sun.javafx.application.PlatformPreferencesImpl;\n+import org.junit.jupiter.api.Test;\n+import test.javafx.collections.MockMapObserver;\n+import javafx.beans.InvalidationListener;\n+import javafx.collections.MapChangeListener;\n+import javafx.scene.paint.Color;\n+import javafx.stage.Appearance;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static test.javafx.collections.MockMapObserver.Tuple.tup;\n+\n+public class PlatformPreferencesImplTest {\n+\n+    @Test\n+    public void testDefaultValues() {\n+        var prefs = new PlatformPreferencesImpl();\n+        assertEquals(Color.WHITE, prefs.getBackgroundColor());\n+        assertEquals(Color.BLACK, prefs.getForegroundColor());\n+        assertEquals(Color.web(\"#157EFB\"), prefs.getAccentColor());\n+        assertEquals(Appearance.LIGHT, prefs.getAppearance());\n+    }\n+\n+    @Test\n+    public void testUnknownKeyReturnsNullValue() {\n+        var prefs = new PlatformPreferencesImpl();\n+        assertNull(prefs.getColor(\"does_not_exist\"));\n+        assertNull(prefs.getBoolean(\"does_not_exist\"));\n+        assertNull(prefs.getString(\"does_not_exist\"));\n+    }\n+\n+    @Test\n+    public void testColorFallback() {\n+        var prefs = new PlatformPreferencesImpl();\n+        Color fallback = prefs.getColor(\"does_not_exist\", Color.RED);\n+        assertEquals(Color.RED, fallback);\n+    }\n+\n+    @Test\n+    public void testBooleanFallback() {\n+        var prefs = new PlatformPreferencesImpl();\n+        boolean fallback = prefs.getBoolean(\"does_not_exist\", true);\n+        assertEquals(true, fallback);\n+    }\n+\n+    @Test\n+    public void testStringFallback() {\n+        var prefs = new PlatformPreferencesImpl();\n+        String fallback = prefs.getString(\"does_not_exist\", \"foo\");\n+        assertEquals(\"foo\", fallback);\n+    }\n+\n+    @Test\n+    public void testUpdatePreferencesWithNewContent() {\n+        var prefs = new PlatformPreferencesImpl();\n+        var content = Map.of(\"red\", Color.RED, \"blue\", Color.BLUE, \"str\", \"foo\", \"bool\", true);\n+        prefs.update(content);\n+        assertEquals(content, prefs);\n+    }\n+\n+    @Test\n+    public void testUpdatePreferencesWithSameContent() {\n+        var prefs = new PlatformPreferencesImpl();\n+        var content = Map.of(\"red\", Color.RED, \"blue\", Color.BLUE, \"str\", \"foo\", \"bool\", true);\n+        prefs.update(content);\n+        prefs.update(content);\n+        assertEquals(content, prefs);\n+    }\n+\n+    @Test\n+    public void testAppearanceReflectsForegroundAndBackgroundColors() {\n+        var prefs = new PlatformPreferencesImpl();\n+\n+        prefs.update(Map.of(\"Windows.UIColor.Foreground\", Color.BLACK, \"Windows.UIColor.Background\", Color.WHITE));\n+        assertEquals(Appearance.LIGHT, prefs.getAppearance());\n+\n+        prefs.update(Map.of(\"Windows.UIColor.Foreground\", Color.WHITE, \"Windows.UIColor.Background\", Color.BLACK));\n+        assertEquals(Appearance.DARK, prefs.getAppearance());\n+\n+        prefs.update(Map.of(\"Windows.UIColor.Foreground\", Color.LIGHTGRAY, \"Windows.UIColor.Background\", Color.DARKGRAY));\n+        assertEquals(Appearance.DARK, prefs.getAppearance());\n+\n+        prefs.update(Map.of(\"Windows.UIColor.Foreground\", Color.RED, \"Windows.UIColor.Background\", Color.BLUE));\n+        assertEquals(Appearance.DARK, prefs.getAppearance());\n+    }\n+\n+    @Test\n+    public void testPreferenceUpdatesAreAtomicWhenObserved() {\n+        var prefs = new PlatformPreferencesImpl();\n+        var trace = new ArrayList<Color[]>();\n+        Color[] expectedColors;\n+\n+        prefs.addListener((MapChangeListener<? super String, ? super Object>) change ->\n+            trace.add(new Color[] { prefs.getBackgroundColor(), prefs.getForegroundColor(), prefs.getAccentColor() }));\n+\n+        prefs.update(Map.of(\n+            \"Windows.UIColor.Foreground\", Color.RED,\n+            \"Windows.UIColor.Background\", Color.BLUE,\n+            \"Windows.UIColor.Accent\", Color.GREEN));\n+        assertEquals(3, trace.size());\n+        expectedColors = new Color[] { Color.BLUE, Color.RED, Color.GREEN };\n+        assertArrayEquals(expectedColors, trace.get(0));\n+        assertArrayEquals(expectedColors, trace.get(1));\n+        assertArrayEquals(expectedColors, trace.get(2));\n+\n+        prefs.update(Map.of(\n+            \"Windows.UIColor.Background\", Color.YELLOW,\n+            \"Windows.UIColor.Foreground\", Color.BLUE,\n+            \"Windows.UIColor.Accent\", Color.PURPLE));\n+        assertEquals(6, trace.size());\n+        expectedColors = new Color[] { Color.YELLOW, Color.BLUE, Color.PURPLE };\n+        assertArrayEquals(expectedColors, trace.get(3));\n+        assertArrayEquals(expectedColors, trace.get(4));\n+        assertArrayEquals(expectedColors, trace.get(5));\n+    }\n+\n+    @Test\n+    public void testPlatformPreferencesInvalidationListener() {\n+        var prefs = new PlatformPreferencesImpl();\n+        int[] count = new int[1];\n+        InvalidationListener listener = observable -> count[0]++;\n+        prefs.addListener(listener);\n+\n+        prefs.update(Map.of(\"foo\", \"bar\"));\n+        assertEquals(1, count[0]);\n+\n+        \/\/ InvalidationListener is invoked only once, even when multiple values are changed at the same time\n+        prefs.update(Map.of(\"qux\", \"quux\", \"quz\", \"quuz\"));\n+        assertEquals(2, count[0]);\n+    }\n+\n+    @Test\n+    public void testPlatformPreferencesChangeListener() {\n+        var prefs = new PlatformPreferencesImpl();\n+        var observer = new MockMapObserver<String, Object>();\n+        prefs.addListener(observer);\n+\n+        \/\/ Two added keys are included in the change notification\n+        prefs.update(Map.of(\"foo\", \"bar\", \"baz\", \"qux\"));\n+        observer.assertAdded(0, tup(\"foo\", \"bar\"));\n+        observer.assertAdded(1, tup(\"baz\", \"qux\"));\n+        observer.clear();\n+\n+        \/\/ Mappings that haven't changed are not included in the change notification (baz=qux)\n+        prefs.update(Map.of(\"foo\", \"bar2\", \"baz\", \"qux\"));\n+        observer.assertRemoved(0, tup(\"foo\", \"bar\"));\n+        observer.assertAdded(0, tup(\"foo\", \"bar2\"));\n+        observer.clear();\n+\n+        \/\/ Change the second mapping\n+        prefs.update(Map.of(\"baz\", \"qux2\"));\n+        observer.assertRemoved(0, tup(\"baz\", \"qux\"));\n+        observer.assertAdded(0, tup(\"baz\", \"qux2\"));\n+        observer.clear();\n+\n+        \/\/ If no mapping was changed, no change notification is fired\n+        prefs.update(Map.of(\"foo\", \"bar2\", \"baz\", \"qux2\"));\n+        observer.check0();\n+        observer.clear();\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/application\/PlatformPreferencesImplTest.java","additions":191,"deletions":0,"binary":false,"changes":191,"status":"added"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.geometry.Insets;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+import java.util.stream.Collectors;\n+\n+public class PlatformPreferencesTest extends Application {\n+\n+    private Map<String, Object> cachedPreferences;\n+\n+    @Override\n+    public void start(Stage stage) {\n+        var passButton = new Button(\"Pass\");\n+        passButton.setOnAction(e -> Platform.exit());\n+\n+        var failButton = new Button(\"Fail\");\n+        failButton.setOnAction(e -> {\n+            Platform.exit();\n+            throw new AssertionError(\"Platform preferences were not correctly reported\");\n+        });\n+\n+        var textArea = new TextArea();\n+        textArea.setEditable(false);\n+\n+        var clearButton = new Button(\"Clear Log\");\n+        clearButton.setOnAction(e -> textArea.setText(\"\"));\n+\n+        var box = new VBox();\n+        box.setSpacing(20);\n+        box.getChildren().add(new VBox(10,\n+            new VBox(\n+                new Label(\"1. On a supported platform, change any of the platform preferences.\"),\n+                new Label(\"    See javafx.application.PlatformPreferences for a list of supported platforms.\")),\n+            new Label(\"2. Observe whether the changed preferences are reported in the log below.\"),\n+            new Label(\"3. Click \\\"Pass\\\" if the changes were correctly reported, otherwise click \\\"Fail\\\".\"),\n+            new HBox(5, passButton, failButton, clearButton)\n+        ));\n+\n+        var root = new BorderPane();\n+        root.setPadding(new Insets(20));\n+        root.setTop(box);\n+        root.setCenter(textArea);\n+        BorderPane.setMargin(textArea, new Insets(20, 0, 0, 0));\n+\n+        cachedPreferences = new HashMap<>(Platform.getPreferences());\n+        textArea.setText(\"preferences = \" + formatPrefs(cachedPreferences.entrySet().stream()));\n+\n+        Platform.getPreferences().addListener(\n+            (InvalidationListener)observable -> {\n+                Stream<Map.Entry<String, Object>> changed = Platform.getPreferences().entrySet().stream()\n+                        .filter(entry -> !Objects.equals(entry.getValue(), cachedPreferences.get(entry.getKey())));\n+\n+                double scrollTop = textArea.getScrollTop();\n+                textArea.setText(textArea.getText() + \"changed = \" + formatPrefs(changed));\n+                textArea.setScrollTop(scrollTop);\n+\n+                cachedPreferences = new HashMap<>(Platform.getPreferences());\n+            });\n+\n+        stage.setScene(new Scene(root));\n+        stage.show();\n+    }\n+\n+    public static void main(String[] args) {\n+        Application.launch(args);\n+    }\n+\n+    private static String formatPrefs(Stream<Map.Entry<String, Object>> prefs) {\n+        String entries = prefs\n+                .sorted(Map.Entry.comparingByKey())\n+                .map(Object::toString)\n+                .collect(Collectors.joining(\"\\r\\n\\t\"));\n+\n+        return \"{\\r\\n\\t\" + entries + \"\\r\\n}\\r\\n\";\n+    }\n+\n+}\n","filename":"tests\/manual\/events\/PlatformPreferencesTest.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}