{"files":[{"patch":"@@ -44,0 +44,1 @@\n+import java.util.Optional;\n@@ -117,7 +118,2 @@\n-    public String getString(String key) {\n-        Object value = modifiableMap.get(key);\n-        if (value instanceof String s) {\n-            return s;\n-        }\n-\n-        return null;\n+    public Optional<Integer> getInteger(String key) {\n+        return modifiableMap.get(key) instanceof Integer i ? Optional.of(i) : Optional.empty();\n@@ -127,5 +123,3 @@\n-    public Boolean getBoolean(String key) {\n-        Object value = modifiableMap.get(key);\n-        if (value instanceof Boolean b) {\n-            return b;\n-        }\n+    public Optional<Double> getDouble(String key) {\n+        return modifiableMap.get(key) instanceof Double d ? Optional.of(d) : Optional.empty();\n+    }\n@@ -133,1 +127,3 @@\n-        return null;\n+    @Override\n+    public Optional<Boolean> getBoolean(String key) {\n+        return modifiableMap.get(key) instanceof Boolean b ? Optional.of(b) : Optional.empty();\n@@ -137,5 +133,3 @@\n-    public Color getColor(String key) {\n-        Object value = modifiableMap.get(key);\n-        if (value instanceof Color c) {\n-            return c;\n-        }\n+    public Optional<String> getString(String key) {\n+        return modifiableMap.get(key) instanceof String s ? Optional.of(s) : Optional.empty();\n+    }\n@@ -143,1 +137,3 @@\n-        return null;\n+    @Override\n+    public Optional<Color> getColor(String key) {\n+        return modifiableMap.get(key) instanceof Color c ? Optional.of(c) : Optional.empty();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformPreferencesImpl.java","additions":15,"deletions":19,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -448,2 +448,2 @@\n-     * For convenience, {@link #getString}, {@link #getBoolean} and {@link #getColor} are provided as typed\n-     * alternatives to the untyped {@link #get} method.\n+     * For convenience, {@link #getInteger}, {@link #getDouble}, {@link #getBoolean}, {@link #getString} and\n+     * {@link #getColor} are provided as typed alternatives to the untyped {@link #get} method.\n@@ -451,4 +451,2 @@\n-     * The preferences that are reported by the platform may be dependent on the operating system version.\n-     * Applications should always test whether a preference is available, or use the {@link #getString(String, String)},\n-     * {@link #getBoolean(String, boolean)} or {@link #getColor(String, Color)} overloads that accept a fallback\n-     * value if the preference is not available.\n+     * The preferences that are reported by the platform may be dependent on the operating system version,\n+     * so applications should not assume that a particular preference is always available.\n@@ -648,1 +646,1 @@\n-         * Returns the {@link String} instance to which the specified key is mapped.\n+         * Returns the {@link Integer} instance to which the specified key is mapped.\n@@ -651,2 +649,3 @@\n-         * @return the {@code String} instance to which the {@code key} is mapped, or\n-         *         {@code null} if the key is not mapped to a {@code String} instance\n+         * @return the {@code Integer} instance to which the {@code key} is mapped, or\n+         *         {@code Optional.empty()} if the key is not mapped to an {@code Integer}\n+         *         instance\n@@ -654,1 +653,1 @@\n-        String getString(String key);\n+        Optional<Integer> getInteger(String key);\n@@ -657,2 +656,1 @@\n-         * Returns the {@link String} instance to which the specified key is mapped,\n-         * or a fallback value if the key is not mapped to a {@code String} instance.\n+         * Returns the {@link Double} instance to which the specified key is mapped.\n@@ -661,2 +659,2 @@\n-         * @return the {@code String} instance to which the {@code key} is mapped, or\n-         *         {@code fallbackValue} if the key is not mapped to a {@code String}\n+         * @return the {@code Double} instance to which the {@code key} is mapped, or\n+         *         {@code Optional.empty()} if the key is not mapped to a {@code Double}\n@@ -665,4 +663,1 @@\n-        default String getString(String key, String fallbackValue) {\n-            String value = getString(key);\n-            return value != null ? value : fallbackValue;\n-        }\n+        Optional<Double> getDouble(String key);\n@@ -675,1 +670,2 @@\n-         *         {@code null} if the key is not mapped to a {@code Boolean} instance\n+         *         {@code Optional.empty()} if the key is not mapped to a {@code Boolean}\n+         *         instance\n@@ -677,1 +673,1 @@\n-        Boolean getBoolean(String key);\n+        Optional<Boolean> getBoolean(String key);\n@@ -680,2 +676,1 @@\n-         * Returns the {@code boolean} value to which the specified key is mapped,\n-         * or a fallback value if the key is not mapped to a {@code boolean} value.\n+         * Returns the {@link String} instance to which the specified key is mapped.\n@@ -684,3 +679,3 @@\n-         * @return the {@code boolean} value to which the {@code key} is mapped, or\n-         *         {@code fallbackValue} if the key is not mapped to a {@code boolean}\n-         *         value\n+         * @return the {@code String} instance to which the {@code key} is mapped, or\n+         *         {@code Optional.empty()} if the key is not mapped to a {@code String}\n+         *         instance\n@@ -688,4 +683,1 @@\n-        default boolean getBoolean(String key, boolean fallbackValue) {\n-            Boolean value = getBoolean(key);\n-            return value != null ? value : fallbackValue;\n-        }\n+        Optional<String> getString(String key);\n@@ -698,11 +690,1 @@\n-         *         {@code null} if the key is not mapped to a {@code Color} instance\n-         *\/\n-        Color getColor(String key);\n-\n-        \/**\n-         * Returns the {@link Color} instance to which the specified key is mapped,\n-         * or a fallback value if the key is not mapped to a {@code Color} instance.\n-         *\n-         * @param key the key\n-         * @return the {@code Color} instance to which the {@code key} is mapped, or\n-         *         {@code fallbackValue} if the key is not mapped to a {@code Color}\n+         *         {@code Optional.empty()} if the key is not mapped to a {@code Color}\n@@ -711,4 +693,1 @@\n-        default Color getColor(String key, Color fallbackValue) {\n-            Color value = getColor(key);\n-            return value != null ? value : fallbackValue;\n-        }\n+        Optional<Color> getColor(String key);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/Platform.java","additions":23,"deletions":44,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.Optional;\n@@ -54,1 +55,1 @@\n-    public void testUnknownKeyReturnsNullValue() {\n+    public void testUnknownKeyReturnsEmptyValue() {\n@@ -56,3 +57,5 @@\n-        assertNull(prefs.getColor(\"does_not_exist\"));\n-        assertNull(prefs.getBoolean(\"does_not_exist\"));\n-        assertNull(prefs.getString(\"does_not_exist\"));\n+        assertEquals(Optional.empty(), prefs.getInteger(\"does_not_exist\"));\n+        assertEquals(Optional.empty(), prefs.getDouble(\"does_not_exist\"));\n+        assertEquals(Optional.empty(), prefs.getBoolean(\"does_not_exist\"));\n+        assertEquals(Optional.empty(), prefs.getString(\"does_not_exist\"));\n+        assertEquals(Optional.empty(), prefs.getColor(\"does_not_exist\"));\n@@ -62,1 +65,1 @@\n-    public void testColorFallback() {\n+    public void testOptionalKeys() {\n@@ -64,16 +67,12 @@\n-        Color fallback = prefs.getColor(\"does_not_exist\", Color.RED);\n-        assertEquals(Color.RED, fallback);\n-    }\n-\n-    @Test\n-    public void testBooleanFallback() {\n-        var prefs = new PlatformPreferencesImpl();\n-        boolean fallback = prefs.getBoolean(\"does_not_exist\", true);\n-        assertEquals(true, fallback);\n-    }\n-\n-    @Test\n-    public void testStringFallback() {\n-        var prefs = new PlatformPreferencesImpl();\n-        String fallback = prefs.getString(\"does_not_exist\", \"foo\");\n-        assertEquals(\"foo\", fallback);\n+        prefs.update(Map.of(\n+            \"integer\", 5,\n+            \"double\", 7.5,\n+            \"boolean\", true,\n+            \"string\", \"foo\",\n+            \"color\", Color.RED));\n+\n+        assertEquals(5, prefs.getInteger(\"integer\").get());\n+        assertEquals(7.5, prefs.getDouble(\"double\").get(), 0.001);\n+        assertEquals(true, prefs.getBoolean(\"boolean\").get());\n+        assertEquals(\"foo\", prefs.getString(\"string\").get());\n+        assertEquals(Color.RED, prefs.getColor(\"color\").get());\n@@ -85,1 +84,5 @@\n-        var content = Map.of(\"red\", Color.RED, \"blue\", Color.BLUE, \"str\", \"foo\", \"bool\", true);\n+        var content = Map.of(\n+            \"red\", Color.RED,\n+            \"blue\", Color.BLUE,\n+            \"str\", \"foo\",\n+            \"bool\", true);\n@@ -93,1 +96,5 @@\n-        var content = Map.of(\"red\", Color.RED, \"blue\", Color.BLUE, \"str\", \"foo\", \"bool\", true);\n+        var content = Map.of(\n+            \"red\", Color.RED,\n+            \"blue\", Color.BLUE,\n+            \"str\", \"foo\",\n+            \"bool\", true);\n@@ -109,2 +116,2 @@\n-        prefs.update(Map.of(\"Windows.UIColor.Foreground\", Color.LIGHTGRAY, \"Windows.UIColor.Background\", Color.DARKGRAY));\n-        assertEquals(Appearance.DARK, prefs.getAppearance());\n+        prefs.update(Map.of(\"Windows.UIColor.Foreground\", Color.DARKGRAY, \"Windows.UIColor.Background\", Color.LIGHTGRAY));\n+        assertEquals(Appearance.LIGHT, prefs.getAppearance());\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/application\/PlatformPreferencesImplTest.java","additions":32,"deletions":25,"binary":false,"changes":57,"status":"modified"}]}