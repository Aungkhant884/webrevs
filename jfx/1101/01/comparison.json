{"files":[{"patch":"@@ -1,408 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.com.sun.javafx.iio;\n-\n-import java.awt.Canvas;\n-import java.awt.Dimension;\n-import java.awt.Frame;\n-import java.awt.Graphics;\n-import java.awt.Image;\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n-import java.awt.image.BufferedImage;\n-import java.awt.image.DataBufferByte;\n-import java.io.IOException;\n-import java.nio.ByteBuffer;\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-\/**\n- *\n- * @author bpb\n- *\/\n-public class ImageStorageTest {\n-\n-    private static final boolean WRITE_OUTPUT = false;\n-\n-    private static final float MINIFY_FRACTION = 0.57F;\n-    private static final float MAGNIFY_FRACTION = 1.47F;\n-\n-    private static int rawWidth = -1;\n-    private static int rawHeight = -1;\n-\n-    public static final void main(String[] args) throws Throwable {\n-        String input = args[0];\n-        String output = null;\n-        if (args.length > 1) {\n-            output = args[1];\n-        }\n-        ImageStorageTest test = new ImageStorageTest();\n-        int width = 111;\n-        int height = 97;\n-        boolean preserveAspectRatio = true;\n-        boolean smooth = true;\n-        test.loadAllTest(input, output, width, height, preserveAspectRatio, smooth);\n-        Thread.sleep(3000);\n-        System.exit(0);\n-    }\n-\n-    public static final BufferedImage getAsBufferedImage(ImageFrame frame) {\n-        BufferedImage image = null;\n-        int width = frame.getWidth();\n-        int height = frame.getHeight();\n-        int scanlineStride = frame.getStride();\n-        ByteBuffer bbuf = (ByteBuffer) frame.getImageData();\n-        byte[] pixels = null;\n-        if (bbuf.hasArray()) {\n-            pixels = bbuf.array();\n-        } else {\n-            pixels = new byte[bbuf.capacity()];\n-            bbuf.get(pixels);\n-        }\n-        switch (frame.getImageType()) {\n-            case GRAY: {\n-                image = new BufferedImage(width, height,\n-                        BufferedImage.TYPE_BYTE_GRAY);\n-                DataBufferByte db =\n-                        (DataBufferByte) image.getRaster().getDataBuffer();\n-                byte[] data = db.getData();\n-                int inLine = 0;\n-                int outLine = 0;\n-                for (int y = 0; y < height; y++) {\n-                    System.arraycopy(pixels, inLine, data, outLine, width);\n-                    inLine += scanlineStride;\n-                    outLine += width;\n-                }\n-\n-            }\n-            break;\n-\/\/            case PALETTE:\n-\/\/            case PALETTE_ALPHA: {\n-\/\/                byte[][] p = frame.getPalette();\n-\/\/                IndexColorModel icm =\n-\/\/                        frame.getImageType() == ImageType.PALETTE ? new IndexColorModel(8, p[0].length,\n-\/\/                        p[0], p[1], p[2]) : new IndexColorModel(8, p[0].length,\n-\/\/                        p[0], p[1], p[2], p[3]);\n-\/\/                image = new BufferedImage(width, height,\n-\/\/                        BufferedImage.TYPE_BYTE_INDEXED, icm);\n-\/\/                DataBufferByte db =\n-\/\/                        (DataBufferByte) image.getRaster().getDataBuffer();\n-\/\/                byte[] data = db.getData();\n-\/\/                int inLine = 0;\n-\/\/                int outLine = 0;\n-\/\/                for (int y = 0; y < height; y++) {\n-\/\/                    System.arraycopy(pixels, inLine, data, outLine, width);\n-\/\/                    inLine += scanlineStride;\n-\/\/                    outLine += width;\n-\/\/                }\n-\/\/            }\n-\/\/            break;\n-            case RGB: {\n-                image = new BufferedImage(width, height,\n-                        BufferedImage.TYPE_3BYTE_BGR);\n-                for (int y = 0; y < height; y++) {\n-                    int off = y * scanlineStride;\n-                    for (int x = 0; x < width; x++) {\n-                        int rgb = ((pixels[off++] & 0xff) << 16) |\n-                                ((pixels[off++] & 0xff) << 8) |\n-                                (pixels[off++] & 0xff);\n-                        image.setRGB(x, y, rgb);\n-                    }\n-                }\n-            }\n-            break;\n-            case RGBA_PRE: {\n-                image = new BufferedImage(width, height,\n-                        BufferedImage.TYPE_INT_ARGB_PRE);\n-                for (int y = 0; y < height; y++) {\n-                    int off = y * scanlineStride;\n-                    for (int x = 0; x < width; x++) {\n-                        byte red = pixels[off++];\n-                        byte green = pixels[off++];\n-                        byte blue = pixels[off++];\n-                        byte alpha = pixels[off++];\n-\/\/                        float f = alpha\/255.0F;\n-\/\/                        red = (byte)((red & 0xff)\/f);\n-\/\/                        green = (byte)((green & 0xff)\/f);\n-\/\/                        blue = (byte)((blue & 0xff)\/f);\n-                        int rgb = ((alpha & 0xff) << 24) |\n-                                ((red & 0xff) << 16) |\n-                                ((green & 0xff) << 8) |\n-                                (blue & 0xff);\n-                        image.setRGB(x, y, rgb);\n-                    }\n-                }\n-\/\/                DataBufferByte db =\n-\/\/                        (DataBufferByte) image.getRaster().getDataBuffer();\n-\/\/                byte[] data = db.getData();\n-\/\/                for (int y = 0; y < height; y++) {\n-\/\/                    int offPrism = y * scanlineStride;\n-\/\/                    int offImage = y * width * 4;\n-\/\/                    for (int x = 0; x < width; x++) {\n-\/\/                        data[offImage++] = pixels[offPrism + 3]; \/\/ A\n-\/\/                        data[offImage++] = pixels[offPrism + 2]; \/\/ B\n-\/\/                        data[offImage++] = pixels[offPrism + 1]; \/\/ G\n-\/\/                        data[offImage++] = pixels[offPrism];     \/\/ R\n-\/\/                        offPrism += 4;\n-\/\/                    }\n-\/\/                }\n-            }\n-            break;\n-            default:\n-                throw new UnsupportedOperationException(\"Unsupported test case \" +\n-                        frame.getImageType());\n-        }\n-\n-        return image;\n-    }\n-\n-    public static void show(Image img, String label) {\n-        final Frame f = new Frame();\n-        f.addWindowListener(new WindowAdapter() {\n-\n-            public void windowClosing(WindowEvent e) {\n-                f.setVisible(false);\n-                f.dispose();\n-            }\n-        });\n-        f.setTitle(label);\n-        f.add(new ImageCanvas(img));\n-        f.pack();\n-        f.setVisible(true);\n-    }\n-\n-    public static class ImageCanvas extends Canvas {\n-\n-        private static final long serialVersionUID = 1L;\n-        Image image;\n-\n-        public ImageCanvas(Image img) {\n-            this.image = img;\n-        }\n-\n-        public Dimension getPreferredSize() {\n-            return new Dimension(image.getWidth(null), image.getHeight(null));\n-        }\n-\n-        public void paint(Graphics g) {\n-            g.drawImage(image, 0, 0, this);\n-        }\n-    }\n-\n-    public ImageStorageTest() {\n-    }\n-\n-    @BeforeClass\n-    public static void setUpClass() throws Exception {\n-    }\n-\n-    @AfterClass\n-    public static void tearDownClass() throws Exception {\n-    }\n-\n-    @Before\n-    public void setUp() {\n-    }\n-\n-    @After\n-    public void tearDown() {\n-    }\n-\n-    \/**\n-     * Test of loadAll method, of class ImageStorage.\n-     *\/\n-    @Test\n-    public void testLoadRaw() throws IOException, InterruptedException {\n-        loadTest(\"testLoadRaw\", \"Output\", 0, 0, false, false);\n-    }\n-\n-    \/**\n-     * Test of loadAll method, of class ImageStorage.\n-     *\/\n-    @Test\n-    public void testLoadMagnifyNoAspectRough() throws IOException, InterruptedException {\n-        loadTest(\"testLoadMagnifyNoAspectRough\", \"Output_scaled\",\n-                (int)(MAGNIFY_FRACTION*rawHeight), (int)(MAGNIFY_FRACTION*rawWidth),\n-                false, false);\n-    }\n-\n-    \/**\n-     * Test of loadAll method, of class ImageStorage.\n-     *\/\n-    @Test\n-    public void testLoadMagnifyAspectRough() throws IOException, InterruptedException {\n-        loadTest(\"testLoadMagnifyAspectRough\", \"Output_scaled\",\n-                (int)(MAGNIFY_FRACTION*rawHeight), (int)(MAGNIFY_FRACTION*rawWidth),\n-                true, false);\n-    }\n-\n-    \/**\n-     * Test of loadAll method, of class ImageStorage.\n-     *\/\n-    @Test\n-    public void testLoadMagnifyNoAspectSmooth() throws IOException, InterruptedException {\n-        loadTest(\"testLoadMagnifyNoAspectSmooth\", \"Output_scaled\",\n-                (int)(MAGNIFY_FRACTION*rawHeight), (int)(MAGNIFY_FRACTION*rawWidth),\n-                false, true);\n-    }\n-\n-    \/**\n-     * Test of loadAll method, of class ImageStorage.\n-     *\/\n-    @Test\n-    public void testLoadMagnifyAspectSmooth() throws IOException, InterruptedException {\n-        loadTest(\"testLoadMagnifyAspectSmooth\", \"Output_scaled\",\n-                (int)(MAGNIFY_FRACTION*rawHeight), (int)(MAGNIFY_FRACTION*rawWidth),\n-                true, true);\n-    }\n-\n-    \/**\n-     * Test of loadAll method, of class ImageStorage.\n-     *\/\n-    @Test\n-    public void testLoadMinifyNoAspectRough() throws IOException, InterruptedException {\n-        loadTest(\"testLoadMinifyNoAspectRough\", \"Output_scaled\",\n-                (int)(MINIFY_FRACTION*rawHeight), (int)(MINIFY_FRACTION*rawWidth),\n-                false, false);\n-    }\n-\n-    \/**\n-     * Test of loadAll method, of class ImageStorage.\n-     *\/\n-    @Test\n-    public void testLoadMinifyAspectRough() throws IOException, InterruptedException {\n-        loadTest(\"testLoadMinifyAspectRough\", \"Output_scaled\",\n-                (int)(MINIFY_FRACTION*rawHeight), (int)(MINIFY_FRACTION*rawWidth),\n-                true, false);\n-    }\n-\n-    \/**\n-     * Test of loadAll method, of class ImageStorage.\n-     *\/\n-    @Test\n-    public void testLoadMinifyNoAspectSmooth() throws IOException, InterruptedException {\n-        loadTest(\"testLoadMinifyNoAspectSmooth\", \"Output_scaled\",\n-                (int)(MINIFY_FRACTION*rawHeight), (int)(MINIFY_FRACTION*rawWidth),\n-                false, true);\n-    }\n-\n-    \/**\n-     * Test of loadAll method, of class ImageStorage.\n-     *\/\n-    @Test\n-    public void testLoadMinifyAspectSmooth() throws IOException, InterruptedException {\n-        loadTest(\"testLoadMinifyAspectSmooth\", \"Output_scaled\",\n-                (int)(MINIFY_FRACTION*rawHeight), (int)(MINIFY_FRACTION*rawWidth),\n-                true, true);\n-    }\n-\n-    private void loadTest(String testName, String outbasename, int width, int height,\n-            boolean preserveAspectRatio, boolean smooth)\n-            throws IOException, InterruptedException {\n-        System.out.println(testName+\", \"+width+\"x\"+height+\n-                \", preserveAspectRatio: \"+preserveAspectRatio+\n-                \", smooth: \"+smooth);\n-        String input = System.getProperty(\"image.input.url\");\n-        String outBase = System.getProperty(\"user.home\") +\n-                System.getProperty(\"file.separator\") + outbasename;\n-        loadAllTest(input, outBase, width, height, preserveAspectRatio, smooth);\n-        Thread.sleep(3000);\n-    }\n-\n-    private void loadAllTest(String input, String output,\n-            int width, int height, boolean preserveAspectRatio, boolean smooth)\n-            throws IOException {\n-        ImageLoadListener listener = new ImageLoadListener() {\n-\n-            public void imageLoadProgress(ImageLoader loader, float percentageComplete) {\n-                if (percentageComplete == 0.0) {\n-                    System.out.println(\"Image loading started (\" + percentageComplete + \"%).\");\n-                } else if (percentageComplete == 100.0) {\n-                    System.out.println(\"Image loading completed (\" + percentageComplete + \"%).\");\n-                } else {\n-                    System.out.println(percentageComplete + \"% complete ...\");\n-                }\n-            }\n-\n-            public void imageLoadWarning(ImageLoader loader, String message) {\n-                System.err.println(\"WARNING: \" + loader + \": \" + message);\n-            }\n-\n-            public void imageLoadMetaData(ImageLoader loader, ImageMetadata metadata) {\n-                System.out.println(\"metadata ready = \" + metadata);\n-            }\n-        };\n-\n-        ImageFrame[] prismImages = null;\n-        try {\n-            long startTime = System.nanoTime();\n-            prismImages = ImageStorage.loadAll(input, listener, width, height, preserveAspectRatio, smooth);\n-            long finishTime = System.nanoTime();\n-            System.out.println(\"Execution time: \" + ((finishTime - startTime) \/ 1000000.0F) + \" ms\");\n-        } catch (IOException e) {\n-            System.err.print(\"ERROR!: \");\n-            Throwable t = e.getCause();\n-            e.printStackTrace();\n-            if (t != null) {\n-                t.printStackTrace();\n-            }\n-        }\n-\n-        if (prismImages != null) {\n-\n-            for (int i = 0; i < prismImages.length; i++) {\n-                ImageFrame im = prismImages[i];\n-                System.out.println(im.getImageType() + \" \" + im.getWidth() + \"x\" + im.getHeight());\n-                if (rawWidth < 0) {\n-                    rawWidth = im.getWidth();\n-                    rawHeight = im.getHeight();\n-                }\n-                ImageMetadata md = im.getMetadata();\n-                if (md != null) {\n-                    System.out.println(im.getMetadata());\n-                }\n-                if (output != null) {\n-                    BufferedImage bi = getAsBufferedImage(im);\n-                    show(bi, input);\n-                    if (WRITE_OUTPUT) {\n-                        try {\n-                            Class.forName(\"javax.imageio.ImageIO\");\n-                            javax.imageio.ImageIO.write(bi, \"PNG\",\n-                                    new java.io.File(output + \"_\" + i + \".png\"));\n-                        } catch(Exception e) {\n-                            System.err.println(\"Cannot locate javax.imageio.ImageIO: output write skipped\");\n-                        }\n-                    }\n-                }\n-            }\n-        } else {\n-            System.out.println(\"No images loaded from \" + input + \"!\");\n-        }\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/iio\/ImageStorageTest.java.DISABLED","additions":0,"deletions":408,"binary":false,"changes":408,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -167,1 +167,1 @@\n-        System.exit(0);\n+        throw new UnsupportedOperationException(\"This stub method should not be called\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubToolkit.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-package test.com.oracle.javafx.fxml.test;\n+package fxml;\n","filename":"tests\/performance\/fxmlLoad\/src\/main\/java\/fxml\/CompareLoadPerformance.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"modules\/javafx.fxml\/src\/test\/java\/test\/com\/oracle\/javafx\/fxml\/test\/CompareLoadPerformance.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-package test.com.oracle.javafx.fxml.test;\n+package fxml;\n","filename":"tests\/performance\/fxmlLoad\/src\/main\/java\/fxml\/TestLoadPerformance.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"modules\/javafx.fxml\/src\/test\/java\/test\/com\/oracle\/javafx\/fxml\/test\/TestLoadPerformance.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+import static org.junit.Assert.fail;\n@@ -128,2 +129,1 @@\n-                    System.err.println(\"Unrecognized argument: \"+arg);\n-                    System.exit(-1);\n+                    fail(\"Unrecognized argument: \" + arg);\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/image\/impl\/ImageRaceTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,13 +44,0 @@\n-    public static void main(String[] args) throws Exception {\n-        init();\n-        try {\n-            new JFXPanelEmbeddedWindowTest().testShowThenRemove();\n-            teardown();\n-        } catch (Throwable th) {\n-            th.printStackTrace();\n-            System.exit(1);\n-        } finally {\n-            System.exit(0);\n-        }\n-    }\n-\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/embed\/swing\/JFXPanelEmbeddedWindowTest.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,13 +51,0 @@\n-    public static void main(String[] args) throws Exception {\n-        init();\n-        try {\n-            new JFXPanelTest().testJFXPanelNew();\n-            teardown();\n-        } catch (Throwable th) {\n-            th.printStackTrace();\n-            System.exit(1);\n-        } finally {\n-            System.exit(0);\n-        }\n-    }\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/embed\/swing\/JFXPanelTest.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"}]}