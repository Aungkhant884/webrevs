{"files":[{"patch":"@@ -1195,1 +1195,1 @@\n-        double dragX = getTableSkin().getSkinnable().sceneToLocal(sceneX, sceneY).getX() - dragOffset;\n+        double dragX = x - dragOffset;\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableColumnHeader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -449,1 +449,2 @@\n-        y += tableHeaderRowHeight;\n+\n+        double yWithTableHeaderRowHeight = y + tableHeaderRowHeight;\n@@ -458,1 +459,1 @@\n-            layoutInArea(placeholderRegion, x, y,\n+            layoutInArea(placeholderRegion, x, yWithTableHeaderRowHeight,\n@@ -462,1 +463,1 @@\n-            layoutInArea(flow, x, y,\n+            layoutInArea(flow, x, yWithTableHeaderRowHeight,\n@@ -478,1 +479,1 @@\n-                double minX = tableHeaderRow.sceneToLocal(n.localToScene(n.getBoundsInLocal())).getMinX();\n+                double tableHeaderRowX = tableHeaderRow.sceneToLocal(n.localToScene(n.getBoundsInLocal())).getMinX();\n@@ -480,2 +481,2 @@\n-                if (minX < 0) {\n-                    overlayWidth += minX;\n+                if (tableHeaderRowX < 0) {\n+                    overlayWidth += tableHeaderRowX;\n@@ -483,1 +484,1 @@\n-                minX = minX < 0 ? 0 : minX;\n+                tableHeaderRowX = tableHeaderRowX < 0 ? 0 : tableHeaderRowX;\n@@ -487,2 +488,2 @@\n-                if (minX + overlayWidth > w) {\n-                    overlayWidth = w - minX;\n+                if (tableHeaderRowX + overlayWidth > w) {\n+                    overlayWidth = w - tableHeaderRowX;\n@@ -495,1 +496,1 @@\n-                double contentAreaHeight = flowHeight;\n+                double overlayHeight = flowHeight;\n@@ -497,1 +498,1 @@\n-                    contentAreaHeight -= flow.getHbar().getHeight();\n+                    overlayHeight -= flow.getHbar().getHeight();\n@@ -500,4 +501,2 @@\n-                columnReorderOverlay.resize(overlayWidth, contentAreaHeight);\n-\n-                columnReorderOverlay.setLayoutX(minX);\n-                columnReorderOverlay.setLayoutY(tableHeaderRow.getHeight());\n+                double columnReorderOverlayX = x + tableHeaderRowX;\n+                columnReorderOverlay.resizeRelocate(columnReorderOverlayX, yWithTableHeaderRowHeight, overlayWidth, overlayHeight);\n@@ -507,1 +506,1 @@\n-            double cw = columnReorderLine.snappedLeftInset() + columnReorderLine.snappedRightInset();\n+            double lineWidth = columnReorderLine.snappedLeftInset() + columnReorderLine.snappedRightInset();\n@@ -509,1 +508,1 @@\n-            columnReorderLine.resizeRelocate(0, columnReorderLine.snappedTopInset(), cw, lineHeight);\n+            columnReorderLine.resizeRelocate(x, y, lineWidth, lineHeight);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableViewSkinBase.java","additions":16,"deletions":17,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -44,0 +44,8 @@\n+\n+    public static void setReorderingColumn(TableHeaderRow tableHeaderRow, TableColumnBase<?, ?> tableColumnBase) {\n+        tableHeaderRow.setReorderingColumn(tableColumnBase);\n+    }\n+\n+    public static void setReorderingRegion(TableHeaderRow tableHeaderRow, TableColumnHeader tableColumnHeader) {\n+        tableHeaderRow.setReorderingRegion(tableColumnHeader);\n+    }\n","filename":"modules\/javafx.controls\/src\/shims\/java\/javafx\/scene\/control\/skin\/TableHeaderRowShim.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+import javafx.geometry.Bounds;\n+import javafx.geometry.Insets;\n+import javafx.scene.Node;\n@@ -32,0 +35,2 @@\n+import javafx.scene.control.skin.TableColumnHeader;\n+import javafx.scene.control.skin.TableColumnHeaderShim;\n@@ -33,3 +38,19 @@\n-import javafx.stage.Stage;\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n+import javafx.scene.control.skin.TableHeaderRowShim;\n+import javafx.scene.control.skin.TableViewSkin;\n+import javafx.scene.layout.Region;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class TableViewSkinTest {\n+\n+    private StageLoader stageLoader;\n+\n+    @AfterEach\n+    void cleanup() {\n+        if (stageLoader != null) {\n+            stageLoader.dispose();\n+        }\n+    }\n@@ -37,1 +58,0 @@\n-public class TableViewSkinTest {\n@@ -39,1 +59,1 @@\n-    public void test_JDK_8188164() {\n+    void test_JDK_8188164() {\n@@ -49,1 +69,19 @@\n-        Toolkit tk = Toolkit.getToolkit();\n+        stageLoader = new StageLoader(scene);\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        TableHeaderRow header = (TableHeaderRow) tableView.lookup(\"TableHeaderRow\");\n+        assertEquals(100.0, header.getHeight(), 0.001, \"Table Header height specified in CSS\");\n+    }\n+\n+    @Test\n+    void testInitialColumnResizeNodePositions() {\n+        TableView<String> tableView = new TableView<>();\n+        for (int i = 0; i < 5; i++) {\n+            TableColumn<String, String> column = new TableColumn<>(\"Col \" + i);\n+            column.setMinWidth(100);\n+            column.setMaxWidth(100);\n+            tableView.getColumns().add(column);\n+        }\n+\n+        stageLoader = new StageLoader(tableView);\n@@ -51,6 +89,2 @@\n-        Stage stage = new Stage();\n-        stage.setScene(scene);\n-        stage.setWidth(500);\n-        stage.setHeight(400);\n-        stage.centerOnScreen();\n-        stage.show();\n+        Node columnResizeLine = tableView.lookup(\".column-resize-line\");\n+        Node columnReorderOverlay = tableView.lookup(\".column-overlay\");\n@@ -58,1 +92,4 @@\n-        tk.firePulse();\n+        TableHeaderRow header = (TableHeaderRow) tableView.lookup(\"TableHeaderRow\");\n+        header.setReordering(true);\n+        TableHeaderRowShim.setReorderingColumn(header, tableView.getColumns().get(0));\n+        TableHeaderRowShim.setReorderingRegion(header, header.getRootHeader().getColumnHeaders().get(0));\n@@ -60,3 +97,7 @@\n-        TableHeaderRow header = (TableHeaderRow)tableView.lookup(\"TableHeaderRow\");\n-        assertEquals(\"Table Header height specified in CSS\",\n-                      100.0, header.getHeight(), 0.001);\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertEquals(1, columnResizeLine.getLayoutX());\n+        assertEquals(1, columnResizeLine.getLayoutY());\n+\n+        assertEquals(1, columnReorderOverlay.getLayoutX());\n+        assertEquals(1 + header.prefHeight(Region.USE_COMPUTED_SIZE), columnReorderOverlay.getLayoutY());\n@@ -64,0 +105,98 @@\n+\n+    @Test\n+    void testColumnResizeNodePositionsWithPadding() {\n+        TableView<String> tableView = new TableView<>();\n+        tableView.setPadding(new Insets(5, 5, 5, 5));\n+        for (int i = 0; i < 5; i++) {\n+            TableColumn<String, String> column = new TableColumn<>(\"Col \" + i);\n+            column.setMinWidth(100);\n+            column.setMaxWidth(100);\n+            tableView.getColumns().add(column);\n+        }\n+\n+        stageLoader = new StageLoader(tableView);\n+\n+        Node columnResizeLine = tableView.lookup(\".column-resize-line\");\n+        Node columnReorderOverlay = tableView.lookup(\".column-overlay\");\n+\n+        TableHeaderRow header = (TableHeaderRow) tableView.lookup(\"TableHeaderRow\");\n+        header.setReordering(true);\n+        TableHeaderRowShim.setReorderingColumn(header, tableView.getColumns().get(0));\n+        TableHeaderRowShim.setReorderingRegion(header, header.getRootHeader().getColumnHeaders().get(0));\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertEquals(5, columnResizeLine.getLayoutX());\n+        assertEquals(5, columnResizeLine.getLayoutY());\n+\n+        assertEquals(5, columnReorderOverlay.getLayoutX());\n+        assertEquals(5 + header.prefHeight(Region.USE_COMPUTED_SIZE), columnReorderOverlay.getLayoutY());\n+    }\n+\n+    @Test\n+    void testColumnResizeNodePositionsWithCustomSkin() {\n+        TableView<String> tableView = new TableView<>();\n+        tableView.setSkin(new CustomTableViewSkin<>(tableView));\n+        for (int i = 0; i < 5; i++) {\n+            TableColumn<String, String> column = new TableColumn<>(\"Col \" + i);\n+            column.setMinWidth(100);\n+            column.setMaxWidth(100);\n+            tableView.getColumns().add(column);\n+        }\n+\n+        stageLoader = new StageLoader(tableView);\n+\n+        Node columnResizeLine = tableView.lookup(\".column-resize-line\");\n+        Node columnReorderOverlay = tableView.lookup(\".column-overlay\");\n+\n+        TableHeaderRow header = (TableHeaderRow) tableView.lookup(\"TableHeaderRow\");\n+        header.setReordering(true);\n+        TableHeaderRowShim.setReorderingColumn(header, tableView.getColumns().get(0));\n+        TableHeaderRowShim.setReorderingRegion(header, header.getRootHeader().getColumnHeaders().get(0));\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertEquals(11, columnResizeLine.getLayoutX());\n+        assertEquals(11, columnResizeLine.getLayoutY());\n+\n+        assertEquals(11, columnReorderOverlay.getLayoutX());\n+        assertEquals(11 + header.prefHeight(Region.USE_COMPUTED_SIZE), columnReorderOverlay.getLayoutY());\n+    }\n+\n+    @Test\n+    void testColumnHeaderReorderCorrectTranslateX() {\n+        TableView<String> tableView = new TableView<>();\n+        tableView.setPadding(new Insets(0, 10, 0, 30));\n+        for (int i = 0; i < 5; i++) {\n+            TableColumn<String, String> column = new TableColumn<>(\"Col \" + i);\n+            column.setMinWidth(100);\n+            column.setMaxWidth(100);\n+            tableView.getColumns().add(column);\n+        }\n+\n+        stageLoader = new StageLoader(tableView);\n+\n+        TableHeaderRow header = (TableHeaderRow) tableView.lookup(\"TableHeaderRow\");\n+        Node columnDragHeader = header.lookup(\".column-drag-header\");\n+\n+        assertEquals(0, columnDragHeader.getTranslateX());\n+\n+        TableColumnHeader tableColumnHeader = header.getRootHeader().getColumnHeaders().get(0);\n+        Bounds bounds = tableColumnHeader.localToScene(tableColumnHeader.getLayoutBounds());\n+        TableColumnHeaderShim.columnReordering(tableColumnHeader, bounds.getMinX() + 20, bounds.getMinY());\n+\n+        assertEquals(20, columnDragHeader.getTranslateX());\n+    }\n+\n+    private static class CustomTableViewSkin<S> extends TableViewSkin<S> {\n+\n+        CustomTableViewSkin(TableView<S> control) {\n+            super(control);\n+        }\n+\n+        @Override\n+        protected void layoutChildren(double x, double y, double w, double h) {\n+            super.layoutChildren(x + 10, y + 10, w, h);\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TableViewSkinTest.java","additions":156,"deletions":17,"binary":false,"changes":173,"status":"modified"},{"patch":"@@ -0,0 +1,183 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.skin;\n+\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.geometry.Bounds;\n+import javafx.geometry.Insets;\n+import javafx.scene.Node;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableView;\n+import javafx.scene.control.skin.TableColumnHeader;\n+import javafx.scene.control.skin.TableColumnHeaderShim;\n+import javafx.scene.control.skin.TableHeaderRow;\n+import javafx.scene.control.skin.TableHeaderRowShim;\n+import javafx.scene.control.skin.TreeTableViewSkin;\n+import javafx.scene.layout.Region;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class TreeTableViewSkinTest {\n+\n+    private StageLoader stageLoader;\n+\n+    @AfterEach\n+    void cleanup() {\n+        if (stageLoader != null) {\n+            stageLoader.dispose();\n+        }\n+    }\n+\n+    @Test\n+    void testInitialColumnResizeNodePositions() {\n+        TreeTableView<String> treeTableView = new TreeTableView<>();\n+        for (int i = 0; i < 5; i++) {\n+            TreeTableColumn<String, String> column = new TreeTableColumn<>(\"Col \" + i);\n+            column.setMinWidth(100);\n+            column.setMaxWidth(100);\n+            treeTableView.getColumns().add(column);\n+        }\n+\n+        stageLoader = new StageLoader(treeTableView);\n+\n+        Node columnResizeLine = treeTableView.lookup(\".column-resize-line\");\n+        Node columnReorderOverlay = treeTableView.lookup(\".column-overlay\");\n+\n+        TableHeaderRow header = (TableHeaderRow) treeTableView.lookup(\"TableHeaderRow\");\n+        header.setReordering(true);\n+        TableHeaderRowShim.setReorderingColumn(header, treeTableView.getColumns().get(0));\n+        TableHeaderRowShim.setReorderingRegion(header, header.getRootHeader().getColumnHeaders().get(0));\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertEquals(1, columnResizeLine.getLayoutX());\n+        assertEquals(1, columnResizeLine.getLayoutY());\n+\n+        assertEquals(1, columnReorderOverlay.getLayoutX());\n+        assertEquals(1 + header.prefHeight(Region.USE_COMPUTED_SIZE), columnReorderOverlay.getLayoutY());\n+    }\n+\n+    @Test\n+    void testColumnResizeNodePositionsWithPadding() {\n+        TreeTableView<String> treeTableView = new TreeTableView<>();\n+        treeTableView.setPadding(new Insets(5, 5, 5, 5));\n+        for (int i = 0; i < 5; i++) {\n+            TreeTableColumn<String, String> column = new TreeTableColumn<>(\"Col \" + i);\n+            column.setMinWidth(100);\n+            column.setMaxWidth(100);\n+            treeTableView.getColumns().add(column);\n+        }\n+\n+        stageLoader = new StageLoader(treeTableView);\n+\n+        Node columnResizeLine = treeTableView.lookup(\".column-resize-line\");\n+        Node columnReorderOverlay = treeTableView.lookup(\".column-overlay\");\n+\n+        TableHeaderRow header = (TableHeaderRow) treeTableView.lookup(\"TableHeaderRow\");\n+        header.setReordering(true);\n+        TableHeaderRowShim.setReorderingColumn(header, treeTableView.getColumns().get(0));\n+        TableHeaderRowShim.setReorderingRegion(header, header.getRootHeader().getColumnHeaders().get(0));\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertEquals(5, columnResizeLine.getLayoutX());\n+        assertEquals(5, columnResizeLine.getLayoutY());\n+\n+        assertEquals(5, columnReorderOverlay.getLayoutX());\n+        assertEquals(5 + header.prefHeight(Region.USE_COMPUTED_SIZE), columnReorderOverlay.getLayoutY());\n+    }\n+\n+    @Test\n+    void testColumnResizeNodePositionsWithCustomSkin() {\n+        TreeTableView<String> treeTableView = new TreeTableView<>();\n+        treeTableView.setSkin(new CustomTreeTableViewSkin<>(treeTableView));\n+        for (int i = 0; i < 5; i++) {\n+            TreeTableColumn<String, String> column = new TreeTableColumn<>(\"Col \" + i);\n+            column.setMinWidth(100);\n+            column.setMaxWidth(100);\n+            treeTableView.getColumns().add(column);\n+        }\n+\n+        stageLoader = new StageLoader(treeTableView);\n+\n+        Node columnResizeLine = treeTableView.lookup(\".column-resize-line\");\n+        Node columnReorderOverlay = treeTableView.lookup(\".column-overlay\");\n+\n+        TableHeaderRow header = (TableHeaderRow) treeTableView.lookup(\"TableHeaderRow\");\n+        header.setReordering(true);\n+        TableHeaderRowShim.setReorderingColumn(header, treeTableView.getColumns().get(0));\n+        TableHeaderRowShim.setReorderingRegion(header, header.getRootHeader().getColumnHeaders().get(0));\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertEquals(11, columnResizeLine.getLayoutX());\n+        assertEquals(11, columnResizeLine.getLayoutY());\n+\n+        assertEquals(11, columnReorderOverlay.getLayoutX());\n+        assertEquals(11 + header.prefHeight(Region.USE_COMPUTED_SIZE), columnReorderOverlay.getLayoutY());\n+    }\n+\n+    @Test\n+    void testColumnHeaderReorderCorrectTranslateX() {\n+        TreeTableView<String> treeTableView = new TreeTableView<>();\n+        treeTableView.setPadding(new Insets(0, 10, 0, 30));\n+        for (int i = 0; i < 5; i++) {\n+            TreeTableColumn<String, String> column = new TreeTableColumn<>(\"Col \" + i);\n+            column.setMinWidth(100);\n+            column.setMaxWidth(100);\n+            treeTableView.getColumns().add(column);\n+        }\n+\n+        stageLoader = new StageLoader(treeTableView);\n+\n+        TableHeaderRow header = (TableHeaderRow) treeTableView.lookup(\"TableHeaderRow\");\n+        Node columnDragHeader = header.lookup(\".column-drag-header\");\n+\n+        assertEquals(0, columnDragHeader.getTranslateX());\n+\n+        TableColumnHeader tableColumnHeader = header.getRootHeader().getColumnHeaders().get(0);\n+        Bounds bounds = tableColumnHeader.localToScene(tableColumnHeader.getLayoutBounds());\n+        TableColumnHeaderShim.columnReordering(tableColumnHeader, bounds.getMinX() + 20, bounds.getMinY());\n+\n+        assertEquals(20, columnDragHeader.getTranslateX());\n+    }\n+\n+    private static class CustomTreeTableViewSkin<S> extends TreeTableViewSkin<S> {\n+\n+        CustomTreeTableViewSkin(TreeTableView<S> control) {\n+            super(control);\n+        }\n+\n+        @Override\n+        protected void layoutChildren(double x, double y, double w, double h) {\n+            super.layoutChildren(x + 10, y + 10, w, h);\n+        }\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TreeTableViewSkinTest.java","additions":183,"deletions":0,"binary":false,"changes":183,"status":"added"}]}