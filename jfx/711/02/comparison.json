{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -265,0 +265,4 @@\n+        if (getNode().getFocusModel() == null) {\n+            return;\n+        }\n+\n@@ -302,0 +306,4 @@\n+        if (getNode().getFocusModel() == null) {\n+            return;\n+        }\n+\n@@ -369,2 +377,5 @@\n-            int index = getNode().getSelectionModel().getSelectedIndex();\n-            setAnchor(index);\n+            MultipleSelectionModel<T> selectionModel = getNode().getSelectionModel();\n+            if (selectionModel != null) {\n+                int index = selectionModel.getSelectedIndex();\n+                setAnchor(index);\n+            }\n@@ -383,1 +394,4 @@\n-        getNode().getSelectionModel().clearSelection();\n+        MultipleSelectionModel<T> selectionModel = getNode().getSelectionModel();\n+        if (selectionModel != null) {\n+            selectionModel.clearSelection();\n+        }\n@@ -566,0 +580,3 @@\n+        MultipleSelectionModel<T> selectionModel = getNode().getSelectionModel();\n+        if (selectionModel == null) return;\n+\n@@ -567,1 +584,1 @@\n-        getNode().getSelectionModel().clearAndSelect(focusIndex - 1);\n+        selectionModel.clearAndSelect(focusIndex - 1);\n@@ -590,0 +607,5 @@\n+        MultipleSelectionModel<T> selectionModel = getNode().getSelectionModel();\n+        if (selectionModel == null) {\n+            return;\n+        }\n+\n@@ -591,1 +613,1 @@\n-            getNode().getSelectionModel().clearAndSelect(0);\n+            selectionModel.clearAndSelect(0);\n@@ -597,1 +619,6 @@\n-        getNode().getSelectionModel().clearAndSelect(getRowCount() - 1);\n+        MultipleSelectionModel<T> selectionModel = getNode().getSelectionModel();\n+        if (selectionModel == null) {\n+            return;\n+        }\n+\n+        selectionModel.clearAndSelect(getRowCount() - 1);\n@@ -738,2 +765,11 @@\n-        int focusedIndex = getNode().getFocusModel().getFocusedIndex();\n-        getNode().getSelectionModel().select(focusedIndex);\n+        FocusModel<T> focusModel = getNode().getFocusModel();\n+        if (focusModel == null) {\n+            return;\n+        }\n+\n+        int focusedIndex = focusModel.getFocusedIndex();\n+\n+        MultipleSelectionModel<T> selectionModel = getNode().getSelectionModel();\n+        if (selectionModel != null) {\n+            selectionModel.select(focusedIndex);\n+        }\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/ListViewBehavior.java","additions":45,"deletions":9,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -358,0 +358,8 @@\n+                if (fm == null) {\n+                    if (placeholderRegion != null && placeholderRegion.isVisible()) {\n+                        return placeholderRegion.getChildren().get(0);\n+                    } else {\n+                        return null;\n+                    }\n+                }\n+\n@@ -382,0 +390,4 @@\n+                if (sm == null) {\n+                    return FXCollections.observableArrayList();\n+                }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/ListViewSkin.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import com.sun.javafx.scene.NodeHelper;\n-import com.sun.javafx.scene.SceneHelper;\n@@ -63,1 +61,1 @@\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n@@ -2378,0 +2376,39 @@\n+\n+    @Test public void testSpaceKeyPressWithNullSelectionModelDoesNotThrowNPE() {\n+        listView.setSelectionModel(null);\n+\n+        assertDoesNotThrow(() ->  keyboard.doKeyPress(KeyCode.SPACE));\n+    }\n+\n+    @Test public void testSpaceKeyPressWithNullFocusModelDoesNotThrowNPE() {\n+        listView.setFocusModel(null);\n+\n+        assertDoesNotThrow(() -> keyboard.doKeyPress(KeyCode.SPACE));\n+    }\n+\n+    @Test public void testKpUpKeyPressWithNullSelectionModelDoesNotThrowNPE() {\n+        \/\/ Navigate one down so as we can navigate up below.\n+        keyboard.doKeyPress(KeyCode.KP_DOWN);\n+\n+        listView.setSelectionModel(null);\n+\n+        assertDoesNotThrow(() -> keyboard.doKeyPress(KeyCode.KP_UP));\n+    }\n+\n+    @Test public void testHomeKeyPressWithNullSelectionModelDoesNotThrowNPE() {\n+        listView.setSelectionModel(null);\n+\n+        assertDoesNotThrow(() -> keyboard.doKeyPress(KeyCode.HOME));\n+    }\n+\n+    @Test public void testEndKeyPressWithNullSelectionModelDoesNotThrowNPE() {\n+        listView.setSelectionModel(null);\n+\n+        assertDoesNotThrow(() -> keyboard.doKeyPress(KeyCode.END));\n+    }\n+\n+    @Test public void testBackSlashKeyPressWithNullSelectionModelDoesNotThrowNPE() {\n+        listView.setSelectionModel(null);\n+\n+        assertDoesNotThrow(() -> keyboard.doKeyPress(KeyCode.BACK_SLASH, KeyModifier.CTRL));\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewKeyInputTest.java","additions":40,"deletions":3,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import javafx.scene.Scene;\n@@ -53,0 +52,1 @@\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n@@ -60,0 +60,2 @@\n+    private StageLoader stageLoader;\n+\n@@ -73,0 +75,4 @@\n+\n+        if (stageLoader != null) {\n+            stageLoader.dispose();\n+        }\n@@ -326,2 +332,2 @@\n-        StageLoader sl = new StageLoader(vbox);\n-        sl.getStage().requestFocus();\n+        stageLoader = new StageLoader(vbox);\n+        stageLoader.getStage().requestFocus();\n@@ -330,1 +336,0 @@\n-        Scene scene = sl.getStage().getScene();\n@@ -341,2 +346,0 @@\n-\n-        sl.dispose();\n@@ -387,0 +390,9 @@\n+\n+    @Test public void testClickWithNullSelectionModelDoesNotThrowNPE() {\n+        listView.setSelectionModel(null);\n+\n+        stageLoader = new StageLoader(listView);\n+\n+        assertDoesNotThrow(()  -> VirtualFlowTestUtils.clickOnRow(listView, 2));\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewMouseInputTest.java","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -56,0 +57,1 @@\n+import javafx.scene.control.Label;\n@@ -81,0 +83,2 @@\n+\n+import org.junit.After;\n@@ -83,0 +87,2 @@\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n@@ -99,0 +105,2 @@\n+    private StageLoader stageLoader;\n+\n@@ -103,0 +111,17 @@\n+\n+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {\n+            if (throwable instanceof RuntimeException) {\n+                throw (RuntimeException)throwable;\n+            } else {\n+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);\n+            }\n+        });\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        Thread.currentThread().setUncaughtExceptionHandler(null);\n+\n+        if (stageLoader != null) {\n+            stageLoader.dispose();\n+        }\n@@ -2178,0 +2203,66 @@\n+    @Test\n+    public void testSelectWithNullFocusModelDoesNotThrowNPE() {\n+        listView.getItems().addAll(\"1\", \"2\");\n+        listView.setFocusModel(null);\n+\n+        stageLoader = new StageLoader(listView);\n+\n+        assertDoesNotThrow(() -> listView.getSelectionModel().select(1));\n+\n+        stageLoader.dispose();\n+    }\n+\n+    @Test\n+    public void testItemChangeWithNullFocusModelDoesNotThrowNPE() {\n+        listView.getItems().addAll(\"1\", \"2\");\n+        listView.setFocusModel(null);\n+\n+        stageLoader = new StageLoader(listView);\n+\n+        listView.getSelectionModel().clearAndSelect(1);\n+        assertDoesNotThrow(() -> listView.getItems().add(\"3\"));\n+    }\n+\n+    @Test\n+    public void testQueryAccessibleAttributeSelectedItemsWithNullSelectionModel() {\n+        listView.getItems().addAll(\"1\", \"2\");\n+        listView.setSelectionModel(null);\n+\n+        stageLoader = new StageLoader(listView);\n+\n+        Object result = listView.queryAccessibleAttribute(AccessibleAttribute.SELECTED_ITEMS);\n+\n+        \/\/ Should be an empty observable array list\n+        assertEquals(FXCollections.observableArrayList(), result);\n+    }\n+\n+    @Test\n+    public void testQueryAccessibleAttributeFocusItemWithNullFocusModel() {\n+        listView.getItems().addAll(\"1\", \"2\");\n+        listView.setFocusModel(null);\n+\n+        stageLoader = new StageLoader(listView);\n+\n+        Object result = listView.queryAccessibleAttribute(AccessibleAttribute.FOCUS_ITEM);\n+\n+        assertNull(result);\n+    }\n+\n+    @Test\n+    public void testQueryAccessibleAttributeFocusItemWithNullFocusModelAndNoItems() {\n+        listView.setFocusModel(null);\n+        Label placeholderNode = new Label(\"No items set\");\n+        listView.setPlaceholder(placeholderNode);\n+\n+        stageLoader = new StageLoader(listView);\n+\n+        Toolkit.getToolkit().firePulse();\n+        Toolkit.getToolkit().firePulse();\n+\n+        Object result = listView.queryAccessibleAttribute(AccessibleAttribute.FOCUS_ITEM);\n+\n+        \/\/ Should be the placeholder node we set above\n+        assertNotNull(result);\n+        assertSame(placeholderNode, result);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewTest.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"modified"}]}