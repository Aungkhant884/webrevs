{"files":[{"patch":"@@ -354,0 +354,2 @@\n+    \/\/ treeItem at time of startEdit - fix for JDK-8267094\n+    private TreeItem<T> treeItemAtStartEdit;\n@@ -387,0 +389,1 @@\n+        treeItemAtStartEdit = getTreeItem();\n@@ -438,0 +441,3 @@\n+            TreeItem<T> editingItem = treeItemAtStartEdit;\n+            T value = editingItem != null ? editingItem.getValue() : null;\n+\n@@ -449,2 +455,2 @@\n-                    getTreeItem(),\n-                    getItem(),\n+                    editingItem,\n+                    value,\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeCell.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import org.junit.Ignore;\n@@ -88,15 +87,0 @@\n-    }\n-\n-    \/**\n-     * Extracted from testCancelOffEditingIndex to formally ignore\n-     * FIXME: move the assert to the other method, once the issue is solved\n-     *\/\n-    @Ignore(\"JDK-8267094\")\n-    @Test\n-    public void testCancelOffEditingIndexEventIndex() {\n-        cell.updateIndex(editingIndex);\n-        TreeItem<String> editingItem = tree.getTreeItem(editingIndex);\n-        tree.edit(editingItem);\n-        List<EditEvent<String>> events = new ArrayList<>();\n-        tree.setOnEditCancel(events::add);\n-        cell.updateIndex(cellIndex);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeCellEditingTest.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,0 +28,12 @@\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import static javafx.scene.control.ControlShim.*;\n+import static org.junit.Assert.*;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n+\n@@ -37,0 +49,1 @@\n+import javafx.scene.control.TreeView.EditEvent;\n@@ -38,7 +51,1 @@\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n-import static javafx.scene.control.ControlShim.*;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n-import static org.junit.Assert.*;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n@@ -59,0 +66,1 @@\n+    private StageLoader stageLoader;\n@@ -73,0 +81,5 @@\n+    @After\n+    public void cleanup() {\n+        if (stageLoader != null) stageLoader.dispose();\n+    }\n+\n@@ -689,0 +702,73 @@\n+    @Test\n+    public void testEditCancelEventAfterCancelOnCell() {\n+        tree.setEditable(true);\n+        cell.updateTreeView(tree);\n+        int editingIndex = 1;\n+        TreeItem<String> editingItem = tree.getTreeItem(editingIndex);\n+        cell.updateIndex(editingIndex);\n+        tree.edit(editingItem);\n+        List<EditEvent<String>> events = new ArrayList<>();\n+        tree.setOnEditCancel(events::add);\n+        cell.cancelEdit();\n+        assertEquals(1, events.size());\n+        assertEquals(\"editing location of cancel event\", editingItem, events.get(0).getTreeItem());\n+    }\n+\n+    @Test\n+    public void testEditCancelEventAfterCancelOnTree() {\n+        tree.setEditable(true);\n+        cell.updateTreeView(tree);\n+        int editingIndex = 1;\n+        TreeItem<String> editingItem = tree.getTreeItem(editingIndex);\n+        cell.updateIndex(editingIndex);\n+        tree.edit(editingItem);\n+        List<EditEvent<String>> events = new ArrayList<>();\n+        tree.setOnEditCancel(events::add);\n+        tree.edit(null);\n+        assertEquals(1, events.size());\n+        assertEquals(\"editing location of cancel event\", editingItem, events.get(0).getTreeItem());\n+    }\n+\n+    @Test\n+    public void testEditCancelEventAfterCellReuse() {\n+        tree.setEditable(true);\n+        cell.updateTreeView(tree);\n+        int editingIndex = 1;\n+        TreeItem<String> editingItem = tree.getTreeItem(editingIndex);\n+        cell.updateIndex(editingIndex);\n+        tree.edit(editingItem);\n+        List<EditEvent<String>> events = new ArrayList<>();\n+        tree.setOnEditCancel(events::add);\n+        cell.updateIndex(0);\n+        assertEquals(1, events.size());\n+        assertEquals(\"editing location of cancel event\", editingItem, events.get(0).getTreeItem());\n+    }\n+\n+    @Test\n+    public void testEditCancelEventAfterCollapse() {\n+        stageLoader = new StageLoader(tree);\n+        tree.setEditable(true);\n+        int editingIndex = 1;\n+        TreeItem<String> editingItem = tree.getTreeItem(editingIndex);\n+        tree.edit(editingItem);\n+        List<EditEvent<String>> events = new ArrayList<>();\n+        tree.setOnEditCancel(events::add);\n+        root.setExpanded(false);\n+        assertEquals(1, events.size());\n+        assertEquals(\"editing location of cancel event\", editingItem, events.get(0).getTreeItem());\n+    }\n+\n+    @Test\n+    public void testEditCancelEventAfterModifyItems() {\n+        stageLoader = new StageLoader(tree);\n+        tree.setEditable(true);\n+        int editingIndex = 2;\n+        TreeItem<String> editingItem = tree.getTreeItem(editingIndex);\n+        tree.edit(editingItem);\n+        List<EditEvent<String>> events = new ArrayList<>();\n+        tree.setOnEditCancel(events::add);\n+        root.getChildren().add(0, new TreeItem<>(\"added\"));\n+        assertEquals(1, events.size());\n+        assertEquals(\"editing location of cancel event\", editingItem, events.get(0).getTreeItem());\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeCellTest.java","additions":93,"deletions":7,"binary":false,"changes":100,"status":"modified"}]}