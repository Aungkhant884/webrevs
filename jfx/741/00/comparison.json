{"files":[{"patch":"@@ -75,0 +75,2 @@\n+    private int oldIndex = -1;\n+\n@@ -78,1 +80,2 @@\n-            boolean active = ((get() % 2) == 0);\n+            int newIndex = get();\n+            boolean active = ((newIndex % 2) == 0);\n@@ -81,0 +84,2 @@\n+\n+            indexChanged(oldIndex, newIndex);\n@@ -115,1 +120,1 @@\n-     * @param i the index associated with this indexed cell\n+     * @param newIndex the index associated with this indexed cell\n@@ -117,4 +122,10 @@\n-    public void updateIndex(int i) {\n-        final int oldIndex = index.get();\n-        index.set(i);\n-        indexChanged(oldIndex, i);\n+    public void updateIndex(int newIndex) {\n+        oldIndex = index.get();\n+\n+        if (oldIndex == newIndex) {\n+            \/\/ When the index wasn't changed the index property will not be invalidated,\n+            \/\/ therefore indexChanged() is not called, so we will manually call it here.\n+            indexChanged(oldIndex, newIndex);\n+        } else {\n+            index.set(newIndex);\n+        }\n@@ -126,2 +137,2 @@\n-     * @param oldIndex\n-     * @param newIndex\n+     * @param oldIndex the old index\n+     * @param newIndex the new index\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/IndexedCell.java","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import javafx.beans.property.SimpleStringProperty;\n@@ -365,0 +366,27 @@\n+    \/**\n+     * The item of the {@link TableRow} should not be null, when the {@link TableCell} is not empty.\n+     * See also: JDK-8251483\n+     *\/\n+    @Test\n+    public void testRowItemIsNotNullForNonEmptyCell() {\n+        TableColumn<String, String> tableColumn = new TableColumn<>();\n+        tableColumn.setCellValueFactory(cc -> new SimpleStringProperty(cc.getValue()));\n+        tableColumn.setCellFactory(col -> new TableCell<>() {\n+            @Override\n+            protected void updateItem(String item, boolean empty) {\n+                super.updateItem(item, empty);\n+\n+                if (!empty) {\n+                    assertNotNull(getTableRow().getItem());\n+                }\n+            }\n+        });\n+        table.getColumns().add(tableColumn);\n+\n+        stageLoader = new StageLoader(table);\n+\n+        \/\/ Will create a new row and cell.\n+        table.getItems().add(\"newItem\");\n+        Toolkit.getToolkit().firePulse();\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableCellTest.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import javafx.beans.property.SimpleStringProperty;\n@@ -706,0 +707,27 @@\n+    \/**\n+     * The item of the {@link TreeTableRow} should not be null, when the {@link TreeTableCell} is not empty.\n+     * See also: JDK-8251483\n+     *\/\n+    @Test\n+    public void testRowItemIsNotNullForNonEmptyCell() {\n+        TreeTableColumn<String, String> treeTableColumn = new TreeTableColumn<>();\n+        treeTableColumn.setCellValueFactory(cc -> new SimpleStringProperty(cc.getValue().getValue()));\n+        treeTableColumn.setCellFactory(col -> new TreeTableCell<>() {\n+            @Override\n+            protected void updateItem(String item, boolean empty) {\n+                super.updateItem(item, empty);\n+\n+                if (!empty) {\n+                    assertNotNull(getTableRow().getItem());\n+                }\n+            }\n+        });\n+        tree.getColumns().add(treeTableColumn);\n+\n+        stageLoader = new StageLoader(tree);\n+\n+        \/\/ Will create a new row and cell.\n+        tree.getRoot().getChildren().add(new TreeItem<>(\"newItem\"));\n+        Toolkit.getToolkit().firePulse();\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableCellTest.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"}]}