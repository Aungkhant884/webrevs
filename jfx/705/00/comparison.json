{"files":[{"patch":"@@ -100,0 +100,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -239,1 +240,1 @@\n-            try (Reader reader = new BufferedReader(new InputStreamReader(url.openStream()))) {\n+            try (Reader reader = new BufferedReader(new InputStreamReader(url.openStream(), StandardCharsets.UTF_8))) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/CssParser.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.io.BufferedWriter;\n@@ -34,0 +35,2 @@\n+import java.io.File;\n+import java.io.FileOutputStream;\n@@ -35,0 +38,2 @@\n+import java.io.OutputStreamWriter;\n+import java.nio.charset.StandardCharsets;\n@@ -318,0 +323,24 @@\n+\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testUTF8EncodedMultibyteSymbolIsCorrectlyParsed() throws IOException {\n+        File file = null;\n+\n+        try {\n+            file = File.createTempFile(\"CssParserTest\", \".css\");\n+\n+            try (var writer = new BufferedWriter(new OutputStreamWriter(\n+                    new FileOutputStream(file), StandardCharsets.UTF_8))) {\n+                writer.write(\".foo { bar: '\\u2713' }\");\n+            }\n+\n+            var stylesheet = new CssParser().parse(file.toURI().toURL());\n+            ParsedValue<String, ?> parsedValue = stylesheet.getRules().get(0).getDeclarations().get(0).getParsedValue();\n+\n+            assertEquals(\"\\u2713\", parsedValue.getValue());\n+        } finally {\n+            if (file != null) {\n+                file.delete();\n+            }\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/CssParserTest.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"}]}