{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import com.sun.javafx.scene.TreeShowingExpression;\n@@ -107,0 +108,1 @@\n+    private TreeShowingExpression treeShowingExpression;\n@@ -132,1 +134,0 @@\n-        registerChangeListener(NodeHelper.treeShowingProperty(control), e -> updateAnimation());\n@@ -135,0 +136,3 @@\n+        treeShowingExpression = new TreeShowingExpression(control);\n+        treeShowingExpression.addListener((obs, old, current) -> updateAnimation());\n+\n@@ -235,0 +239,2 @@\n+        treeShowingExpression.dispose();\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/ProgressIndicatorSkin.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -297,4 +297,0 @@\n-    public static BooleanExpression treeShowingProperty(Node node) {\n-        return nodeAccessor.treeShowingProperty(node);\n-    }\n-\n@@ -364,1 +360,0 @@\n-        BooleanExpression treeShowingProperty(Node node);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/NodeHelper.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.scene;\n+\n+import com.sun.javafx.binding.ExpressionHelper;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.binding.BooleanExpression;\n+import javafx.beans.value.ChangeListener;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.stage.Window;\n+\n+\/**\n+ * Used to observe changes in tree showing status for a {@link Node}.  For a Node's tree to be showing\n+ * it must be visible, its ancestors must be visible, the node must be part of a {@link Scene} and\n+ * the scene must have a {@link Window} which is currently showing.<p>\n+ *\n+ * This class provides the exact same functionality as {@link NodeHelper#isTreeShowing(Node)} in\n+ * an observable form.\n+ *\/\n+public class TreeShowingExpression extends BooleanExpression {\n+    private final ChangeListener<Boolean> windowShowingChangedListener = (obs, oldVal, newVal) -> updateTreeShowing();\n+\n+    private final ChangeListener<Window> sceneWindowChangedListener = (scene, oldWindow, newWindow) -> {\n+        if (oldWindow != null) {\n+            oldWindow.showingProperty().removeListener(windowShowingChangedListener);\n+        }\n+        if (newWindow != null) {\n+            newWindow.showingProperty().addListener(windowShowingChangedListener);\n+        }\n+        updateTreeShowing();\n+    };\n+\n+    private final ChangeListener<Scene> nodeSceneChangedListener = (node, oldScene, newScene) -> {\n+        if (oldScene != null) {\n+            oldScene.windowProperty().removeListener(sceneWindowChangedListener);\n+        }\n+        if (newScene != null) {\n+            newScene.windowProperty().addListener(sceneWindowChangedListener);\n+        }\n+\n+        sceneWindowChangedListener.changed(\n+            null,\n+            oldScene == null ? null : oldScene.getWindow(),\n+            newScene == null ? null : newScene.getWindow()\n+        );\n+    };\n+\n+    private final Node node;\n+\n+    private ExpressionHelper<Boolean> helper;\n+    private boolean valid;\n+    private boolean treeShowing;\n+\n+    \/**\n+     * Constructs a new instance.\n+     *\n+     * @param node a {@link Node} for which the tree showing status should be observed, cannot be null\n+     *\/\n+    public TreeShowingExpression(Node node) {\n+        this.node = node;\n+        this.node.sceneProperty().addListener(nodeSceneChangedListener);\n+\n+        NodeHelper.treeVisibleProperty(node).addListener(windowShowingChangedListener);\n+\n+        nodeSceneChangedListener.changed(null, null, node.getScene());\n+    }\n+\n+    \/**\n+     * Cleans up any listeners that this class may have registered on the {@link Node}\n+     * that was supplied at construction.\n+     *\/\n+    public void dispose() {\n+        node.sceneProperty().removeListener(nodeSceneChangedListener);\n+\n+        NodeHelper.treeVisibleProperty(node).removeListener(windowShowingChangedListener);\n+    }\n+\n+    private void updateTreeShowing() {\n+        boolean newValue = NodeHelper.isTreeShowing(node);\n+\n+        if (newValue != treeShowing) {\n+            treeShowing = newValue;\n+            invalidate();\n+        }\n+    }\n+\n+    @Override\n+    public void addListener(InvalidationListener listener) {\n+        helper = ExpressionHelper.addListener(helper, this, listener);\n+    }\n+\n+    @Override\n+    public void removeListener(InvalidationListener listener) {\n+        helper = ExpressionHelper.removeListener(helper, listener);\n+    }\n+\n+    @Override\n+    public void addListener(ChangeListener<? super Boolean> listener) {\n+        helper = ExpressionHelper.addListener(helper, this, listener);\n+    }\n+\n+    @Override\n+    public void removeListener(ChangeListener<? super Boolean> listener) {\n+        helper = ExpressionHelper.removeListener(helper, listener);\n+    }\n+\n+    protected void invalidate() {\n+        if (valid) {\n+            valid = false;\n+            ExpressionHelper.fireValueChangedEvent(helper);\n+        }\n+    }\n+\n+    @Override\n+    public boolean get() {\n+        if (!valid) {\n+            updateTreeShowing();\n+            valid = true;\n+        }\n+\n+        return treeShowing;\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/TreeShowingExpression.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"},{"patch":"@@ -597,5 +597,0 @@\n-            @Override\n-            public BooleanExpression treeShowingProperty(Node node) {\n-                return node.treeShowingProperty();\n-            }\n-\n@@ -999,14 +994,0 @@\n-    private final ChangeListener<Boolean> windowShowingChangedListener\n-            = (win, oldVal, newVal) -> updateTreeShowing();\n-\n-    private final ChangeListener<Window> sceneWindowChangedListener = (scene, oldWindow, newWindow) -> {\n-        \/\/ Replace the windowShowingListener and call updateTreeShowing()\n-        if (oldWindow != null) {\n-            oldWindow.showingProperty().removeListener(windowShowingChangedListener);\n-        }\n-        if (newWindow != null) {\n-            newWindow.showingProperty().addListener(windowShowingChangedListener);\n-        }\n-        updateTreeShowing();\n-    };\n-\n@@ -1074,20 +1055,0 @@\n-        \/\/ isTreeShowing needs to take into account of Window's showing\n-        if (oldScene != null) {\n-            oldScene.windowProperty().removeListener(sceneWindowChangedListener);\n-\n-            Window window = oldScene.windowProperty().get();\n-            if (window != null) {\n-                window.showingProperty().removeListener(windowShowingChangedListener);\n-            }\n-        }\n-        if (newScene != null) {\n-            newScene.windowProperty().addListener(sceneWindowChangedListener);\n-\n-            Window window = newScene.windowProperty().get();\n-            if (window != null) {\n-                window.showingProperty().addListener(windowShowingChangedListener);\n-            }\n-\n-        }\n-        updateTreeShowing();\n-\n@@ -8422,14 +8383,0 @@\n-    private void updateTreeShowing() {\n-        setTreeShowing(isTreeVisible() && isWindowShowing());\n-    }\n-\n-    private boolean treeShowing;\n-    private TreeShowingPropertyReadOnly treeShowingRO;\n-\n-    final void setTreeShowing(boolean value) {\n-        if (treeShowing != value) {\n-            treeShowing = value;\n-            ((TreeShowingPropertyReadOnly) treeShowingProperty()).invalidate();\n-        }\n-    }\n-\n@@ -8437,48 +8384,1 @@\n-        return treeShowingProperty().get();\n-    }\n-\n-    final BooleanExpression treeShowingProperty() {\n-        if (treeShowingRO == null) {\n-            treeShowingRO = new TreeShowingPropertyReadOnly();\n-        }\n-        return treeShowingRO;\n-    }\n-\n-    class TreeShowingPropertyReadOnly extends BooleanExpression {\n-\n-        private ExpressionHelper<Boolean> helper;\n-        private boolean valid;\n-\n-        @Override\n-        public void addListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override\n-        public void removeListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n-        @Override\n-        public void addListener(ChangeListener<? super Boolean> listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override\n-        public void removeListener(ChangeListener<? super Boolean> listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n-        protected void invalidate() {\n-            if (valid) {\n-                valid = false;\n-                ExpressionHelper.fireValueChangedEvent(helper);\n-            }\n-        }\n-\n-        @Override\n-        public boolean get() {\n-            valid = true;\n-            return Node.this.treeShowing;\n-        }\n-\n+        return isTreeVisible() && isWindowShowing();\n@@ -8503,2 +8403,0 @@\n-\n-        updateTreeShowing();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":1,"deletions":103,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -309,1 +309,1 @@\n-                    \/\/ disabled, isTreeVisible and isTreeShowing properties are inherited\n+                    \/\/ disabled and isTreeVisible properties are inherited\n@@ -312,1 +312,0 @@\n-                    _value.setTreeShowing(isTreeShowing());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/SubScene.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.scene.TreeShowingExpression;\n@@ -65,1 +66,1 @@\n-import com.sun.javafx.scene.NodeHelper;\n+\n@@ -152,0 +153,1 @@\n+    private TreeShowingExpression treeShowingExpression;\n@@ -413,1 +415,2 @@\n-            NodeHelper.treeShowingProperty(ownerNode).addListener(weakOwnerNodeListener);\n+            treeShowingExpression = new TreeShowingExpression(ownerNode);\n+            treeShowingExpression.addListener(weakOwnerNodeListener);\n@@ -490,1 +493,5 @@\n-        if (getOwnerNode() != null) NodeHelper.treeShowingProperty(getOwnerNode()).removeListener(weakOwnerNodeListener);\n+        if (treeShowingExpression != null) {\n+            treeShowingExpression.removeListener(weakOwnerNodeListener);\n+            treeShowingExpression.dispose();\n+            treeShowingExpression = null;\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/stage\/PopupWindow.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"}]}