{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,3 @@\n+import java.util.Objects;\n+import java.util.function.BiPredicate;\n+\n@@ -106,0 +109,8 @@\n+        checkAddRemove(idx, list, removed, Objects::equals, from, to);\n+    }\n+\n+    public void checkAddRemove(int idx, ObservableList<E> list,\n+                               List<E> removed,\n+                               BiPredicate<E, E> equalityComparer,\n+                               int from,\n+                               int to) {\n@@ -107,1 +118,1 @@\n-            removed = Collections.<E>emptyList();\n+            removed = Collections.emptyList();\n@@ -112,1 +123,4 @@\n-        assertEquals(removed, call.removed);\n+        assertEquals(removed.size(), call.removed.size());\n+        for (int i = 0; i < removed.size(); ++i) {\n+            assertTrue(equalityComparer.test(removed.get(i), call.removed.get(i)));\n+        }\n@@ -162,0 +176,5 @@\n+    public void checkN(int n) {\n+        assertFalse(tooManyCalls);\n+        assertEquals(n, calls.size());\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/MockListObserver.java","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,2 @@\n-import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n@@ -73,1 +74,1 @@\n-            ObservableList<T> list, List<T> removed, int retainedRow) {\n+            ObservableList<T> list, List<T> removed, T retainedRow, Comparator<T> rowComparator) {\n@@ -88,3 +89,1 @@\n-                int midIndex = retainedRow >= removedSize ? removedSize :\n-                               retainedRow < 0 ? 0 :\n-                               retainedRow;\n+                int midIndex = -Collections.binarySearch(removed, retainedRow, rowComparator) - 1;\n@@ -101,0 +100,1 @@\n+                checkState();\n@@ -110,0 +110,1 @@\n+                checkState();\n@@ -119,1 +120,1 @@\n-                if (invalid && atFirstRange) {\n+                if (invalid) {\n@@ -124,1 +125,1 @@\n-                    from = 0;\n+                    from = atFirstRange ? 0 : 1;\n@@ -142,1 +143,1 @@\n-                atFirstRange = true;\n+                atFirstRange = !firstRemovedRange.isEmpty();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ControlUtils.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -375,1 +375,2 @@\n-            change = ControlUtils.buildClearAndSelectChange(selectedIndices, previousSelectedIndices, row);\n+            change = ControlUtils.buildClearAndSelectChange(\n+                    selectedIndices, previousSelectedIndices, row, Comparator.naturalOrder());\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/MultipleSelectionModelBase.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -2468,1 +2468,2 @@\n-                change = ControlUtils.buildClearAndSelectChange(selectedCellsSeq, previousSelection, row);\n+                change = ControlUtils.buildClearAndSelectChange(\n+                        selectedCellsSeq, previousSelection, newTablePosition, Comparator.comparing(TablePosition::getRow));\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableView.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -2815,1 +2815,2 @@\n-                change = ControlUtils.buildClearAndSelectChange(selectedCellsSeq, previousSelection, row);\n+                change = ControlUtils.buildClearAndSelectChange(\n+                        selectedCellsSeq, previousSelection, newTablePosition, Comparator.comparing(TreeTablePosition::getRow));\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableView.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,2 @@\n+import java.util.function.BiPredicate;\n+import java.util.stream.Collectors;\n@@ -76,0 +78,1 @@\n+import test.javafx.collections.MockListObserver;\n@@ -346,1 +349,0 @@\n-        List<List<?>> removed = new ArrayList<>();\n@@ -349,7 +351,0 @@\n-        model.getSelectedItems().addListener((ListChangeListener<?>) change -> {\n-            while (change.next()) {\n-                if (change.wasRemoved()) {\n-                    removed.add(new ArrayList<>(change.getRemoved()));\n-                }\n-            }\n-        });\n@@ -357,0 +352,30 @@\n+        MockListObserver observer = new MockListObserver();\n+        model.getSelectedItems().addListener(observer);\n+        model.clearAndSelect(1);\n+\n+        List removed1, removed2;\n+        BiPredicate equalityComparer;\n+\n+        if (isTree()) {\n+            removed1 = List.of(new TreeItem<>(data.get(0)));\n+            removed2 = data.stream().map(TreeItem::new).skip(2).collect(Collectors.toList());\n+            equalityComparer = (a, b) -> Objects.equals(((TreeItem)a).getValue(), ((TreeItem)b).getValue());\n+        } else {\n+            removed1 = List.of(data.get(0));\n+            removed2 = data.stream().skip(2).collect(Collectors.toList());\n+            equalityComparer = Objects::equals;\n+        }\n+\n+        observer.checkN(2);\n+        observer.checkAddRemove(0, model.getSelectedItems(), removed1, equalityComparer, 0, 0);\n+        observer.checkAddRemove(1, model.getSelectedItems(), removed2, equalityComparer, 1, 1);\n+    }\n+\n+    @Test public void clearAndSelectFirstSelectedItem() {\n+        model.setSelectionMode(SelectionMode.MULTIPLE);\n+        model.select(1);\n+        model.select(2);\n+        model.select(3);\n+\n+        MockListObserver observer = new MockListObserver();\n+        model.getSelectedItems().addListener(observer);\n@@ -359,3 +384,14 @@\n-        assertEquals(2, removed.size());\n-        List<?> firstRange = removed.get(0);\n-        List<?> secondRange = removed.get(1);\n+        List removed;\n+        BiPredicate equalityComparer;\n+\n+        if (isTree()) {\n+            removed = data.stream().map(TreeItem::new).skip(2).limit(2).collect(Collectors.toList());\n+            equalityComparer = (a, b) -> Objects.equals(((TreeItem)a).getValue(), ((TreeItem)b).getValue());\n+        } else {\n+            removed = data.stream().skip(2).limit(2).collect(Collectors.toList());\n+            equalityComparer = Objects::equals;\n+        }\n+\n+        observer.check1();\n+        observer.checkAddRemove(0, model.getSelectedItems(), removed, equalityComparer, 1, 1);\n+    }\n@@ -363,2 +399,20 @@\n-        assertEquals(1, firstRange.size());\n-        assertEquals(\"Row 1\", isTree() ? ((TreeItem<String>)firstRange.get(0)).getValue() : firstRange.get(0));\n+    @Test public void clearAndSelectLastSelectedItem() {\n+        model.setSelectionMode(SelectionMode.MULTIPLE);\n+        model.select(1);\n+        model.select(2);\n+        model.select(3);\n+\n+        MockListObserver observer = new MockListObserver();\n+        model.getSelectedItems().addListener(observer);\n+        model.clearAndSelect(3);\n+\n+        List removed;\n+        BiPredicate equalityComparer;\n+\n+        if (isTree()) {\n+            removed = data.stream().map(TreeItem::new).skip(1).limit(2).collect(Collectors.toList());\n+            equalityComparer = (a, b) -> Objects.equals(((TreeItem)a).getValue(), ((TreeItem)b).getValue());\n+        } else {\n+            removed = data.stream().skip(1).limit(2).collect(Collectors.toList());\n+            equalityComparer = Objects::equals;\n+        }\n@@ -366,2 +420,2 @@\n-        assertEquals(18, secondRange.size());\n-        assertEquals(\"Long Row 3\", isTree() ? ((TreeItem<String>)secondRange.get(0)).getValue() : secondRange.get(0));\n+        observer.check1();\n+        observer.checkAddRemove(0, model.getSelectedItems(), removed, equalityComparer, 0, 0);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/MultipleSelectionModelImplTest.java","additions":70,"deletions":16,"binary":false,"changes":86,"status":"modified"}]}