{"files":[{"patch":"@@ -100,2 +100,1 @@\n-        assertFalse(tooManyCalls);\n-        assertEquals(1, calls.size());\n+        checkN(1);\n@@ -133,2 +132,1 @@\n-        assertFalse(tooManyCalls);\n-        assertEquals(1, calls.size());\n+        checkN(1);\n@@ -139,2 +137,1 @@\n-        assertFalse(tooManyCalls);\n-        assertEquals(1, calls.size());\n+        checkN(1);\n@@ -155,2 +152,1 @@\n-        assertFalse(tooManyCalls);\n-        assertEquals(1, calls.size());\n+        checkN(1);\n@@ -172,2 +168,1 @@\n-        assertFalse(tooManyCalls);\n-        assertEquals(1, calls.size());\n+        checkN(1);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/MockListObserver.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -100,2 +100,1 @@\n-                checkState();\n-                return from;\n+                return getFrom();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ControlUtils.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        assertEquals(change(added(0, \"foo\", \"bar\", \"baz\", \"qux\", \"quz\")), changes.get(0));\n+        assertEquals(\"{ [foo, bar, baz, qux, quz] added at 0 }\", changes.get(0));\n@@ -70,1 +70,1 @@\n-        assertEquals(change(removed(0, \"foo\", \"bar\", \"baz\", \"qux\", \"quz\")), changes.get(0));\n+        assertEquals(\"{ [foo, bar, baz, qux, quz] removed at 0 }\", changes.get(0));\n@@ -83,1 +83,1 @@\n-        assertEquals(change(removed(1, \"bar\", \"baz\", \"qux\")), changes.get(0));\n+        assertEquals(\"{ [bar, baz, qux] removed at 1 }\", changes.get(0));\n@@ -96,3 +96,1 @@\n-        assertEquals(change(\n-            removed(0, \"foo\", \"bar\"),\n-            removed(1, \"qux\", \"quz\")), changes.get(0));\n+        assertEquals(\"{ [foo, bar] removed at 0, [qux, quz] removed at 1 }\", changes.get(0));\n@@ -113,2 +111,2 @@\n-        assertEquals(change(replaced(0, range(\"foo\"), range(\"bar\"))), changes.get(0));\n-        assertEquals(change(replaced(1, range(\"bar\"), range(\"foo\"))), changes.get(1));\n+        assertEquals(\"{ [foo] replaced by [bar] at 0 }\", changes.get(0));\n+        assertEquals(\"{ [bar] replaced by [foo] at 1 }\", changes.get(1));\n@@ -125,1 +123,1 @@\n-    @Ignore(\"see JDK-8267951\")\n+    @Ignore(\"JDK-8267951\")\n@@ -140,4 +138,4 @@\n-        assertEquals(change(replaced(0, range(\"foo\"), range(\"bar\"))), changes.get(0));\n-        assertEquals(change(replaced(1, range(\"bar\"), range(\"foo\"))), changes.get(1));\n-        assertEquals(change(replaced(3, range(\"qux\"), range(\"quz\"))), changes.get(2));\n-        assertEquals(change(replaced(4, range(\"quz\"), range(\"qux\"))), changes.get(3));\n+        assertEquals(\"{ [foo] replaced by [bar] at 0 }\", changes.get(0));\n+        assertEquals(\"{ [bar] replaced by [foo] at 1 }\", changes.get(1));\n+        assertEquals(\"{ [qux] replaced by [quz] at 3 }\", changes.get(2));\n+        assertEquals(\"{ [quz] replaced by [qux] at 4 }\", changes.get(3));\n@@ -161,4 +159,1 @@\n-        assertEquals(change(\n-            replaced(0, range(\"foo\", \"bar\"), range(\"bar\", \"foo\")),\n-            removed(3, \"qux\", \"quz\")\n-        ), changes.get(0));\n+        assertEquals(\"{ [foo, bar] replaced by [bar, foo] at 0, [qux, quz] removed at 3 }\", changes.get(0));\n@@ -182,24 +177,1 @@\n-        assertEquals(change(\n-                removed(0, \"foo\", \"bar\"),\n-                replaced(1, range(\"qux\", \"quz\"), range(\"quz\", \"qux\"))\n-        ), changes.get(0));\n-    }\n-\n-    private String change(String... subChanges) {\n-        return \"{ \" + String.join(\", \", subChanges) + \" }\";\n-    }\n-\n-    private String added(int index, String... items) {\n-        return range(items) + \" added at \" + index;\n-    }\n-\n-    private String removed(int index, String... items) {\n-        return range(items) + \" removed at \" + index;\n-    }\n-\n-    private String replaced(int index, String items, String replacedBy) {\n-        return items + \" replaced by \" + replacedBy + \" at \" + index;\n-    }\n-\n-    private String range(String... items) {\n-        return \"[\" + String.join(\", \", items) + \"]\";\n+        assertEquals(\"{ [foo, bar] removed at 0, [qux, quz] replaced by [quz, qux] at 1 }\", changes.get(0));\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/SelectedItemsReadOnlyObservableListTest.java","additions":13,"deletions":41,"binary":false,"changes":54,"status":"modified"}]}