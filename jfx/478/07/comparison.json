{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,3 @@\n+import java.util.Objects;\n+import java.util.function.BiPredicate;\n+\n@@ -106,0 +109,8 @@\n+        checkAddRemove(idx, list, removed, Objects::equals, from, to);\n+    }\n+\n+    public void checkAddRemove(int idx, ObservableList<E> list,\n+                               List<E> removed,\n+                               BiPredicate<E, E> equalityComparer,\n+                               int from,\n+                               int to) {\n@@ -107,1 +118,1 @@\n-            removed = Collections.<E>emptyList();\n+            removed = Collections.emptyList();\n@@ -112,1 +123,4 @@\n-        assertEquals(removed, call.removed);\n+        assertEquals(removed.size(), call.removed.size());\n+        for (int i = 0; i < removed.size(); ++i) {\n+            assertTrue(equalityComparer.test(removed.get(i), call.removed.get(i)));\n+        }\n@@ -162,0 +176,5 @@\n+    public void checkN(int n) {\n+        assertFalse(tooManyCalls);\n+        assertEquals(n, calls.size());\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/MockListObserver.java","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,1 @@\n+            int totalRemovedSize = 0;\n@@ -53,1 +54,1 @@\n-                    List<E> removed = getRemovedElements(c);\n+                    List<E> removed = getRemovedElements(c, totalRemovedSize);\n@@ -63,1 +64,1 @@\n-                        nextRemove(c.getFrom(), getRemovedModelItem(c.getFrom()));\n+                        nextRemove(c.getFrom(), getRemovedModelItem(totalRemovedSize + c.getFrom()));\n@@ -65,1 +66,1 @@\n-                        nextRemove(c.getFrom(), getRemovedElements(c));\n+                        nextRemove(c.getFrom(), getRemovedElements(c, totalRemovedSize));\n@@ -67,0 +68,1 @@\n+                    totalRemovedSize += removedSize;\n@@ -120,1 +122,1 @@\n-    private List<E> getRemovedElements(ListChangeListener.Change<? extends Integer> c) {\n+    private List<E> getRemovedElements(ListChangeListener.Change<? extends Integer> c, int totalRemovedSize) {\n@@ -124,1 +126,1 @@\n-            removed.add(getRemovedModelItem(i));\n+            removed.add(getRemovedModelItem(i + totalRemovedSize));\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/SelectedItemsReadOnlyObservableList.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -35,0 +35,3 @@\n+\n+import java.util.Collections;\n+import java.util.Comparator;\n@@ -71,1 +74,1 @@\n-            ObservableList<T> list, List<T> removed, int retainedRow) {\n+            ObservableList<T> list, List<T> removed, T retainedRow, Comparator<T> rowComparator) {\n@@ -86,3 +89,1 @@\n-                int midIndex = retainedRow >= removedSize ? removedSize :\n-                               retainedRow < 0 ? 0 :\n-                               retainedRow;\n+                int midIndex = -Collections.binarySearch(removed, retainedRow, rowComparator) - 1;\n@@ -99,1 +100,2 @@\n-                return getFrom();\n+                checkState();\n+                return from;\n@@ -108,0 +110,1 @@\n+                checkState();\n@@ -117,1 +120,1 @@\n-                if (invalid && atFirstRange) {\n+                if (invalid) {\n@@ -122,1 +125,1 @@\n-                    from = 0;\n+                    from = atFirstRange ? 0 : 1;\n@@ -140,1 +143,1 @@\n-                atFirstRange = true;\n+                atFirstRange = !firstRemovedRange.isEmpty();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ControlUtils.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -375,1 +375,2 @@\n-            change = ControlUtils.buildClearAndSelectChange(selectedIndices, previousSelectedIndices, row);\n+            change = ControlUtils.buildClearAndSelectChange(\n+                    selectedIndices, previousSelectedIndices, row, Comparator.naturalOrder());\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/MultipleSelectionModelBase.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -2468,1 +2468,2 @@\n-                change = ControlUtils.buildClearAndSelectChange(selectedCellsSeq, previousSelection, row);\n+                change = ControlUtils.buildClearAndSelectChange(\n+                        selectedCellsSeq, previousSelection, newTablePosition, Comparator.comparing(TablePosition::getRow));\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableView.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -2817,1 +2817,2 @@\n-                change = ControlUtils.buildClearAndSelectChange(selectedCellsSeq, previousSelection, row);\n+                change = ControlUtils.buildClearAndSelectChange(\n+                        selectedCellsSeq, previousSelection, newTablePosition, Comparator.comparing(TreeTablePosition::getRow));\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableView.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,214 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.com.sun.javafx.scene.control;\n+\n+import com.sun.javafx.collections.ObservableListWrapper;\n+import com.sun.javafx.scene.control.SelectedItemsReadOnlyObservableList;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ListChangeListener;\n+import javafx.collections.ObservableList;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class SelectedItemsReadOnlyObservableListTest {\n+\n+    ObservableList<String> items;\n+    ObservableList<String> selectedItems;\n+    TestObservableList<Integer> selectedIndices;\n+    List<String> changes;\n+\n+    @Before\n+    public void setup() {\n+        changes = new ArrayList<>();\n+        items = FXCollections.observableArrayList(\"foo\", \"bar\", \"baz\", \"qux\", \"quz\");\n+        selectedIndices = new TestObservableList<>();\n+        selectedItems = new SelectedItemsReadOnlyObservableList<>(selectedIndices, () -> 0) {\n+            @Override protected String getModelItem(int index) { return items.get(index); }\n+        };\n+        selectedItems.addListener((ListChangeListener<? super String>) c -> changes.add(c.toString()));\n+    }\n+\n+    \/**\n+     * { [foo, bar, baz, qux, quz] added at 0 }\n+     * { [foo, bar, baz, qux, quz] removed at 0 }\n+     *\/\n+    @Test\n+    public void testAddAndRemoveEntireRange() {\n+        selectedIndices.addAll(0, 1, 2, 3, 4);\n+        assertEquals(1, changes.size());\n+        assertEquals(change(added(0, \"foo\", \"bar\", \"baz\", \"qux\", \"quz\")), changes.get(0));\n+        changes.clear();\n+        selectedIndices.removeAll(0, 1, 2, 3, 4);\n+        assertEquals(1, changes.size());\n+        assertEquals(change(removed(0, \"foo\", \"bar\", \"baz\", \"qux\", \"quz\")), changes.get(0));\n+    }\n+\n+    \/**\n+     * { [foo, bar, baz, qux, quz] added at 0 }\n+     * { [bar, baz, qux] removed at 1 }\n+     *\/\n+    @Test\n+    public void testRemoveInteriorRange() {\n+        selectedIndices.addAll(0, 1, 2, 3, 4);\n+        changes.clear();\n+        selectedIndices.removeAll(1, 2, 3);\n+        assertEquals(1, changes.size());\n+        assertEquals(change(removed(1, \"bar\", \"baz\", \"qux\")), changes.get(0));\n+    }\n+\n+    \/**\n+     * { [foo, bar, baz, qux, quz] added at 0 }\n+     * { [foo, bar] removed at 0, [qux, quz] removed at 1 }\n+     *\/\n+    @Test\n+    public void testRemoveDisjointRanges() {\n+        selectedIndices.addAll(0, 1, 2, 3, 4);\n+        changes.clear();\n+        selectedIndices.removeAll(0, 1, 3, 4);\n+        assertEquals(1, changes.size());\n+        assertEquals(change(\n+            removed(0, \"foo\", \"bar\"),\n+            removed(1, \"qux\", \"quz\")), changes.get(0));\n+    }\n+\n+    \/**\n+     * { [foo, bar] added at 0 }\n+     * { [foo] replaced by [bar] at 0 }\n+     * { [bar] replaced by [foo] at 1 }\n+     *\/\n+    @Test\n+    @Ignore(\"see JDK-8267951\")\n+    public void testReplaceTwoItems() {\n+        selectedIndices.addAll(0, 1);\n+        changes.clear();\n+        selectedIndices.replaceAll(i -> i == 0 ? 1 : 0);\n+        assertEquals(2, changes.size());\n+        assertEquals(change(replaced(0, range(\"foo\"), range(\"bar\"))), changes.get(0));\n+        assertEquals(change(replaced(1, range(\"bar\"), range(\"foo\"))), changes.get(1));\n+    }\n+\n+    \/**\n+     * { [foo, bar, baz, qux, quz] added at 0 }\n+     * { [foo] replaced by [bar] at 0 }\n+     * { [bar] replaced by [foo] at 1 }\n+     * { [qux] replaced by [quz] at 3 }\n+     * { [quz] replaced by [qux] at 4 }\n+     *\/\n+    @Test\n+    @Ignore(\"see JDK-8267951\")\n+    public void testReplaceDisjointRanges() {\n+        selectedIndices.addAll(0, 1, 2, 3, 4);\n+        changes.clear();\n+        selectedIndices.replaceAll(i -> {\n+            switch (i) {\n+                case 0: return 1;\n+                case 1: return 0;\n+                case 3: return 4;\n+                case 4: return 3;\n+                default: return i;\n+            }\n+        });\n+\n+        assertEquals(4, changes.size());\n+        assertEquals(change(replaced(0, range(\"foo\"), range(\"bar\"))), changes.get(0));\n+        assertEquals(change(replaced(1, range(\"bar\"), range(\"foo\"))), changes.get(1));\n+        assertEquals(change(replaced(3, range(\"qux\"), range(\"quz\"))), changes.get(2));\n+        assertEquals(change(replaced(4, range(\"quz\"), range(\"qux\"))), changes.get(3));\n+    }\n+\n+    \/**\n+     * { [foo, bar, baz, qux, quz] added at 0 }\n+     * { [foo, bar] replaced by [bar, foo] at 0, [qux, quz] removed at 3 }\n+     *\/\n+    @Test\n+    public void testReplaceAndRemoveRanges() {\n+        selectedIndices.addAll(0, 1, 2, 3, 4);\n+        changes.clear();\n+        selectedIndices._beginChange();\n+        selectedIndices.set(0, 1);\n+        selectedIndices.set(1, 0);\n+        selectedIndices.remove(3, 5);\n+        selectedIndices._endChange();\n+\n+        assertEquals(1, changes.size());\n+        assertEquals(change(\n+            replaced(0, range(\"foo\", \"bar\"), range(\"bar\", \"foo\")),\n+            removed(3, \"qux\", \"quz\")\n+        ), changes.get(0));\n+    }\n+\n+    \/**\n+     * { [foo, bar, baz, qux, quz] added at 0 }\n+     * { [foo, bar] removed at 0, [qux, quz] replaced by [quz, qux] at 1 }\n+     *\/\n+    @Test\n+    public void testRemoveAndReplaceRanges() {\n+        selectedIndices.addAll(0, 1, 2, 3, 4);\n+        changes.clear();\n+        selectedIndices._beginChange();\n+        selectedIndices.remove(0, 2);\n+        selectedIndices.set(1, 4);\n+        selectedIndices.set(2, 3);\n+        selectedIndices._endChange();\n+\n+        assertEquals(1, changes.size());\n+        assertEquals(change(\n+                removed(0, \"foo\", \"bar\"),\n+                replaced(1, range(\"qux\", \"quz\"), range(\"quz\", \"qux\"))\n+        ), changes.get(0));\n+    }\n+\n+    private String change(String... subChanges) {\n+        return \"{ \" + String.join(\", \", subChanges) + \" }\";\n+    }\n+\n+    private String added(int index, String... items) {\n+        return range(items) + \" added at \" + index;\n+    }\n+\n+    private String removed(int index, String... items) {\n+        return range(items) + \" removed at \" + index;\n+    }\n+\n+    private String replaced(int index, String items, String replacedBy) {\n+        return items + \" replaced by \" + replacedBy + \" at \" + index;\n+    }\n+\n+    private String range(String... items) {\n+        return \"[\" + String.join(\", \", items) + \"]\";\n+    }\n+\n+    private static class TestObservableList<T> extends ObservableListWrapper<T> {\n+        public TestObservableList() { super(new ArrayList<>()); }\n+        public void _beginChange() { beginChange(); }\n+        public void _endChange() { endChange(); }\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/SelectedItemsReadOnlyObservableListTest.java","additions":214,"deletions":0,"binary":false,"changes":214,"status":"added"},{"patch":"@@ -40,0 +40,2 @@\n+import java.util.function.BiPredicate;\n+import java.util.stream.Collectors;\n@@ -358,0 +360,76 @@\n+    @Test public void clearAndSelectFiresDisjointRemovedChanges() {\n+        model.setSelectionMode(SelectionMode.MULTIPLE);\n+        model.selectAll();\n+\n+        MockListObserver observer = new MockListObserver();\n+        model.getSelectedItems().addListener(observer);\n+        model.clearAndSelect(1);\n+\n+        List removed1, removed2;\n+        BiPredicate equalityComparer;\n+\n+        if (isTree()) {\n+            removed1 = List.of(new TreeItem<>(data.get(0)));\n+            removed2 = data.stream().map(TreeItem::new).skip(2).collect(Collectors.toList());\n+            equalityComparer = (a, b) -> Objects.equals(((TreeItem)a).getValue(), ((TreeItem)b).getValue());\n+        } else {\n+            removed1 = List.of(data.get(0));\n+            removed2 = data.stream().skip(2).collect(Collectors.toList());\n+            equalityComparer = Objects::equals;\n+        }\n+\n+        observer.checkN(2);\n+        observer.checkAddRemove(0, model.getSelectedItems(), removed1, equalityComparer, 0, 0);\n+        observer.checkAddRemove(1, model.getSelectedItems(), removed2, equalityComparer, 1, 1);\n+    }\n+\n+    @Test public void clearAndSelectFirstSelectedItem() {\n+        model.setSelectionMode(SelectionMode.MULTIPLE);\n+        model.select(1);\n+        model.select(2);\n+        model.select(3);\n+\n+        MockListObserver observer = new MockListObserver();\n+        model.getSelectedItems().addListener(observer);\n+        model.clearAndSelect(1);\n+\n+        List removed;\n+        BiPredicate equalityComparer;\n+\n+        if (isTree()) {\n+            removed = data.stream().map(TreeItem::new).skip(2).limit(2).collect(Collectors.toList());\n+            equalityComparer = (a, b) -> Objects.equals(((TreeItem)a).getValue(), ((TreeItem)b).getValue());\n+        } else {\n+            removed = data.stream().skip(2).limit(2).collect(Collectors.toList());\n+            equalityComparer = Objects::equals;\n+        }\n+\n+        observer.check1();\n+        observer.checkAddRemove(0, model.getSelectedItems(), removed, equalityComparer, 1, 1);\n+    }\n+\n+    @Test public void clearAndSelectLastSelectedItem() {\n+        model.setSelectionMode(SelectionMode.MULTIPLE);\n+        model.select(1);\n+        model.select(2);\n+        model.select(3);\n+\n+        MockListObserver observer = new MockListObserver();\n+        model.getSelectedItems().addListener(observer);\n+        model.clearAndSelect(3);\n+\n+        List removed;\n+        BiPredicate equalityComparer;\n+\n+        if (isTree()) {\n+            removed = data.stream().map(TreeItem::new).skip(1).limit(2).collect(Collectors.toList());\n+            equalityComparer = (a, b) -> Objects.equals(((TreeItem)a).getValue(), ((TreeItem)b).getValue());\n+        } else {\n+            removed = data.stream().skip(1).limit(2).collect(Collectors.toList());\n+            equalityComparer = Objects::equals;\n+        }\n+\n+        observer.check1();\n+        observer.checkAddRemove(0, model.getSelectedItems(), removed, equalityComparer, 0, 0);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/MultipleSelectionModelImplTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"modified"}]}