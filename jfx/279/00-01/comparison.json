{"files":[{"patch":"@@ -361,26 +361,0 @@\n-\n-    @Test public void testCSSFilterRendering() {\n-        load(new File(\"src\/test\/resources\/test\/html\/simpleImagewithfilter.html\"));\n-        submit(() -> {\n-            final WebPage webPage = WebEngineShim.getPage(getEngine());\n-            assertNotNull(webPage);\n-            final BufferedImage img = WebPageShim.paint(webPage, 0, 0, 800, 600);\n-            assertNotNull(img);\n-\n-            final Color pixelAt0x0 = new Color(img.getRGB(0, 0), true);\n-            assertTrue(\"Color should be opaque white:\" + pixelAt0x0, isColorsSimilar(Color.WHITE, pixelAt0x0, 10));\n-            final Color pixelAt5x0 = new Color(img.getRGB(5, 0), true);\n-            assertTrue(\"Color should be opaque white:\" + pixelAt5x0, isColorsSimilar(Color.WHITE, pixelAt5x0, 10));\n-            final Color pixelAt0x5 = new Color(img.getRGB(0, 5), true);\n-            assertTrue(\"Color should be opaque white:\" + pixelAt0x5, isColorsSimilar(Color.WHITE, pixelAt0x5, 10));\n-\n-            final Color pixelAt25x25 = new Color(img.getRGB(25, 25), true);\n-            assertTrue(\"Color should be opaque blue:\" + pixelAt25x25, isColorsSimilar(new Color(0, 11, 255), pixelAt25x25, 1));\n-            final Color pixelAt190x200 = new Color(img.getRGB(190, 200), true);\n-            assertTrue(\"Color should be opaque blue:\" + pixelAt190x200, isColorsSimilar(new Color(0, 11, 255), pixelAt190x200, 1));\n-            final Color pixelAt200x190 = new Color(img.getRGB(200, 190), true);\n-            assertTrue(\"Color should be opaque blue:\" + pixelAt200x190, isColorsSimilar(new Color(0, 11, 255), pixelAt200x190, 1));\n-            final Color pixelAt200x200 = new Color(img.getRGB(200, 200), true);\n-            assertTrue(\"Color should be opaque blue:\" + pixelAt200x200, isColorsSimilar(new Color(0, 11, 255), pixelAt200x200, 1));\n-        });\n-    }\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/CSSTest.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.web;\n+\n+import java.util.concurrent.CountDownLatch;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.image.PixelReader;\n+import javafx.scene.image.WritableImage;\n+import javafx.scene.paint.Color;\n+import javafx.scene.web.WebView;\n+import javafx.stage.Stage;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import test.util.Util;\n+\n+import static javafx.concurrent.Worker.State.SUCCEEDED;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class CSSFilterTest {\n+    private static final CountDownLatch launchLatch = new CountDownLatch(1);\n+\n+    \/\/ Maintain one application instance\n+    static CSSFilterTestApp cssFilterTestApp;\n+\n+    private WebView webView;\n+\n+    public static class CSSFilterTestApp extends Application {\n+        Stage primaryStage = null;\n+\n+        @Override\n+        public void init() {\n+            CSSFilterTest.cssFilterTestApp = this;\n+        }\n+\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            Platform.setImplicitExit(false);\n+            this.primaryStage = primaryStage;\n+            launchLatch.countDown();\n+        }\n+    }\n+\n+    private static String colorToString(Color c) {\n+        int r = (int)(c.getRed() * 255.0);\n+        int g = (int)(c.getGreen() * 255.0);\n+        int b = (int)(c.getBlue() * 255.0);\n+        int a = (int)(c.getOpacity() * 255.0);\n+        return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\n+    }\n+\n+    private void assertColorEquals(String msg, Color expected, Color actual, double delta) {\n+        if (!testColorEquals(expected, actual, delta)) {\n+            fail(msg + \" expected:\" + colorToString(expected)\n+                    + \" but was:\" + colorToString(actual));\n+        }\n+    }\n+\n+    private void assertColorNotEquals(String msg, Color notExpected, Color actual, double delta) {\n+        double deltaRed = Math.abs(notExpected.getRed() - actual.getRed());\n+        double deltaGreen = Math.abs(notExpected.getGreen() - actual.getGreen());\n+        double deltaBlue = Math.abs(notExpected.getBlue() - actual.getBlue());\n+        double deltaOpacity = Math.abs(notExpected.getOpacity() - actual.getOpacity());\n+        if (deltaRed < delta && deltaGreen < delta && deltaBlue < delta && deltaOpacity < delta) {\n+            fail(msg + \" not expected:\" + colorToString(notExpected)\n+                    + \" but was:\" + colorToString(actual));\n+        }\n+    }\n+\n+    protected boolean testColorEquals(Color expected, Color actual, double delta) {\n+        double deltaRed = Math.abs(expected.getRed() - actual.getRed());\n+        double deltaGreen = Math.abs(expected.getGreen() - actual.getGreen());\n+        double deltaBlue = Math.abs(expected.getBlue() - actual.getBlue());\n+        double deltaOpacity = Math.abs(expected.getOpacity() - actual.getOpacity());\n+        return (deltaRed <= delta && deltaGreen <= delta && deltaBlue <= delta && deltaOpacity <= delta);\n+    }\n+\n+    @BeforeClass\n+    public static void setupOnce() {\n+        \/\/ Start the Test Application\n+        new Thread(() -> Application.launch(CSSFilterTestApp.class, (String[])null)).start();\n+\n+        assertTrue(\"Timeout waiting for FX runtime to start\", Util.await(launchLatch));\n+    }\n+\n+    @AfterClass\n+    public static void tearDownOnce() {\n+        Platform.exit();\n+    }\n+\n+    @Before\n+    public void setupTestObjects() {\n+        Platform.runLater(() -> {\n+            webView = new WebView();\n+            cssFilterTestApp.primaryStage.setScene(new Scene(webView));\n+            cssFilterTestApp.primaryStage.show();\n+        });\n+    }\n+\n+    @Test public void testCSSFilterRendering() {\n+        final CountDownLatch webViewStateLatch = new CountDownLatch(1);\n+\n+        Util.runAndWait(() -> {\n+            assertNotNull(webView);\n+            webView.getEngine().getLoadWorker().stateProperty().\n+                addListener((observable, oldValue, newValue) -> {\n+                if (newValue == SUCCEEDED) {\n+                    webView.requestFocus();\n+                }\n+            });\n+\n+            webView.focusedProperty().\n+                addListener((observable, oldValue, newValue) -> {\n+                if (newValue) {\n+                    webViewStateLatch.countDown();\n+                }\n+            });\n+\n+            final String urlString = CSSFilterTest.class.getResource(\"simpleImagewithfilter.html\").toExternalForm();\n+            webView.getEngine().load(urlString);\n+        });\n+\n+        assertTrue(\"Timeout when waiting for focus change \", Util.await(webViewStateLatch));\n+        Util.sleep(1000);\n+\n+        Util.runAndWait(() -> {\n+            WritableImage snapshot = cssFilterTestApp.primaryStage.getScene().snapshot(null);\n+            PixelReader pr = snapshot.getPixelReader();\n+\n+            final double delta = 0.07;\n+            Color whiteColor = Color.rgb(255, 255, 255);\n+            Color blueColor = Color.rgb(0, 0, 255);\n+\n+            assertColorEquals(\"Color should be opaque white:\",\n+                    whiteColor, pr.getColor(0, 0), delta);\n+            assertColorEquals(\"Color should be opaque white:\",\n+                    whiteColor, pr.getColor(5, 0), delta);\n+            assertColorEquals(\"Color should be opaque white:\",\n+                    whiteColor, pr.getColor(0, 5), delta);\n+\n+            assertColorEquals(\"Color should be opaque blue:\",\n+                    blueColor, pr.getColor(25, 25), delta);\n+            assertColorEquals(\"Color should be opaque blue:\",\n+                    blueColor, pr.getColor(190, 200), delta);\n+            assertColorEquals(\"Color should be opaque blue:\",\n+                    blueColor, pr.getColor(200, 190), delta);\n+            assertColorEquals(\"Color should be opaque blue:\",\n+                    blueColor, pr.getColor(200, 200), delta);\n+\n+            assertColorNotEquals(\"Color should not be opaque white:\",\n+                    whiteColor, pr.getColor(220, 220), delta);\n+            assertColorNotEquals(\"Color should not be opaque blue:\",\n+                    blueColor, pr.getColor(220, 220), delta);\n+        });\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/CSSFilterTest.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"},{"patch":"","filename":"tests\/system\/src\/test\/resources\/test\/javafx\/scene\/web\/simpleImagewithfilter.html","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"modules\/javafx.web\/src\/test\/resources\/test\/html\/simpleImagewithfilter.html","status":"renamed"}]}