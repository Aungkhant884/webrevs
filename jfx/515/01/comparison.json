{"files":[{"patch":"@@ -78,13 +78,1 @@\n-        if (scene == null) {\n-            \/\/ listen to the scene property on the anchor until it is set, and\n-            \/\/ then install the accelerators\n-            anchor.sceneProperty().addListener(new InvalidationListener() {\n-                @Override public void invalidated(Observable observable) {\n-                    Scene scene = anchor.getScene();\n-                    if (scene != null) {\n-                        anchor.sceneProperty().removeListener(this);\n-                        doAcceleratorInstall(items, scene);\n-                    }\n-                }\n-            });\n-        } else {\n+        if (scene != null) {\n@@ -93,0 +81,10 @@\n+        \/\/ Scene change listener is added to the anchor for scenarios like,\n+        \/\/ 1. Installing accelerators when Control is added to Scene\n+        \/\/ 2. Removing accelerators when Control is removed from Scene\n+        \/\/ Remove previously added listener if any\n+        if (sceneChangeListenerMap.containsKey(anchor)) {\n+            anchor.sceneProperty().removeListener(sceneChangeListenerMap.get(anchor));\n+            sceneChangeListenerMap.remove(anchor);\n+        }\n+        \/\/ Add a new listener\n+        anchor.sceneProperty().addListener(getSceneChangeListener(anchor, items));\n@@ -118,0 +116,18 @@\n+    private static Map<Object, ChangeListener<Scene>> sceneChangeListenerMap = new WeakHashMap<>();\n+\n+    private static ChangeListener<Scene> getSceneChangeListener(Object anchor, ObservableList<MenuItem> items) {\n+        ChangeListener<Scene> sceneChangeListener = sceneChangeListenerMap.get(anchor);\n+        if (sceneChangeListener == null) {\n+             sceneChangeListener = (ov, oldScene, newScene) -> {\n+                if (oldScene != null) {\n+                    removeAcceleratorsFromScene(items, oldScene);\n+                }\n+                if (newScene != null) {\n+                    doAcceleratorInstall(items, newScene);\n+                }\n+            };\n+            sceneChangeListenerMap.put(anchor, sceneChangeListener);\n+        }\n+        return sceneChangeListener;\n+    }\n+\n@@ -225,0 +241,8 @@\n+        if (scene == null) {\n+            \/\/ The Node is not part of a Scene: Remove the Scene listener that was added\n+            \/\/ at the time of installing the accelerators.\n+            if (sceneChangeListenerMap.containsKey(anchor)) {\n+                anchor.sceneProperty().removeListener(sceneChangeListenerMap.get(anchor));\n+                sceneChangeListenerMap.remove(anchor);\n+            }\n+        }\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/ControlAcceleratorSupport.java","additions":37,"deletions":13,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;\n@@ -37,0 +38,1 @@\n+import org.junit.Ignore;\n@@ -43,0 +45,1 @@\n+import javafx.scene.Group;\n@@ -300,0 +303,73 @@\n+\n+    @Test public void testAcceleratorShouldNotGetFiredWhenMenuItemRemovedFromScene() {\n+        KeyEventFirer kb = new KeyEventFirer(item1, scene);\n+\n+        kb.doKeyPress(KeyCode.DIGIT1, KeyModifier.ALT);\n+        assertEquals(1, eventCounter);\n+        assertEquals(1, getListenerCount(item1.acceleratorProperty()));\n+\n+        \/\/ Remove all children from the scene\n+        Group root = (Group)scene.getRoot();\n+        root.getChildren().clear();\n+\n+        assertEquals(0, getListenerCount(item1.acceleratorProperty()));\n+        kb.doKeyPress(KeyCode.DIGIT1, KeyModifier.ALT);\n+        assertEquals(1, eventCounter);\n+    }\n+\n+    @Test public void testAcceleratorShouldGetFiredWhenMenuItemRemovedAndAddedBackToScene() {\n+        KeyEventFirer kb = new KeyEventFirer(item1, scene);\n+\n+        kb.doKeyPress(KeyCode.DIGIT1, KeyModifier.ALT);\n+        assertEquals(1, eventCounter);\n+\n+        Group root = (Group)scene.getRoot();\n+        scene.setRoot(new Group()); \/\/ Remove all children from the scene\n+        scene.setRoot(root); \/\/ Add the children to the same scene\n+\n+        assertEquals(1, getListenerCount(item1.acceleratorProperty()));\n+        kb.doKeyPress(KeyCode.DIGIT1, KeyModifier.ALT);\n+        assertEquals(2, eventCounter);\n+    }\n+\n+    @Test public void testAcceleratorShouldGetFiredWhenMenuItemRemovedAndAddedToDifferentScene() {\n+        KeyEventFirer kb = new KeyEventFirer(item1, scene);\n+\n+        kb.doKeyPress(KeyCode.DIGIT1, KeyModifier.ALT);\n+        assertEquals(1, eventCounter);\n+\n+        Group root = (Group)scene.getRoot();\n+        scene.setRoot(new Group()); \/\/ Remove all children from the scene\n+        Scene diffScene = new Scene(root); \/\/ Add the children to a different scene\n+        sl.getStage().setScene(diffScene);\n+        kb = new KeyEventFirer(item1, diffScene);\n+\n+        assertEquals(1, getListenerCount(item1.acceleratorProperty()));\n+        kb.doKeyPress(KeyCode.DIGIT1, KeyModifier.ALT);\n+        assertEquals(2, eventCounter);\n+    }\n+\n+    @Ignore(\"JDK-8268374\")\n+    @Test public void testAcceleratorShouldNotGetFiredWhenControlsIsRemovedFromSceneThenContextMenuIsSetToNullAndControlIsAddedBackToScene() {\n+        KeyEventFirer kb = new KeyEventFirer(item1, scene);\n+        kb.doKeyPress(KeyCode.DIGIT1, KeyModifier.ALT);\n+        assertEquals(1, eventCounter);\n+\n+        Group root = (Group)scene.getRoot();\n+        scene.setRoot(new Group()); \/\/ Remove all children from the scene\n+\n+        if (testClass == Button.class) {\n+            btn.setContextMenu(null);\n+        } else if (testClass == Tab.class) {\n+            tab.setContextMenu(null);\n+        } else if (testClass == TableColumn.class) {\n+            tableColumn.setContextMenu(null);\n+        } else if (testClass == TreeTableColumn.class) {\n+            treeTableColumn.setContextMenu(null);\n+        }\n+        scene.setRoot(root); \/\/ Add the children to a different scene\n+\n+        assertEquals(0, getListenerCount(item1.acceleratorProperty()));\n+        kb.doKeyPress(KeyCode.DIGIT1, KeyModifier.ALT);\n+        assertEquals(1, eventCounter);\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/AcceleratorParameterizedTest.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"modified"}]}