{"files":[{"patch":"@@ -315,0 +315,2 @@\n+            stage.renderScaleXProperty().unbind();\n+            stage.renderScaleYProperty().unbind();\n@@ -326,0 +328,2 @@\n+            stage.renderScaleXProperty().bind(newStage.renderScaleXProperty());\n+            stage.renderScaleYProperty().bind(newStage.renderScaleYProperty());\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/HeavyweightDialog.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene;\n+\n+import com.sun.javafx.PlatformUtil;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonType;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.text.Text;\n+import javafx.stage.Stage;\n+import javafx.stage.WindowEvent;\n+import junit.framework.Assert;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeTrue;\n+\n+public class UIRenderDialogTest {\n+    private static CountDownLatch startupLatch;\n+    private static volatile Stage stage;\n+    private static volatile Alert alert;\n+    private static final double scale = 1.75;\n+\n+    public static class TestApp extends Application {\n+\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            final Button button = new Button(\"Show Dialog\");\n+            button.setOnAction(e -> {\n+                final Alert alert = new Alert(Alert.AlertType.NONE);\n+                alert.initOwner(primaryStage);\n+                alert.getButtonTypes().add(ButtonType.OK);\n+\n+                final HBox box = new HBox();\n+                box.setAlignment(Pos.CENTER);\n+                box.setPadding(new Insets(8));\n+                box.setSpacing(8);\n+\n+                for (int i = 0; i < 4; i++) {\n+                    box.getChildren().add(new CheckBox(\"Check\"));\n+                }\n+\n+                alert.getDialogPane().setContent(box);\n+                UIRenderDialogTest.alert = alert;\n+                alert.show();\n+            });\n+\n+            Scene scene = new Scene(new StackPane(button));\n+            primaryStage.setScene(scene);\n+            stage = primaryStage;\n+            stage.addEventHandler(WindowEvent.WINDOW_SHOWN,\n+                    e -> Platform.runLater(startupLatch::countDown));\n+            stage.show();\n+\n+            button.fire();\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void setupOnce() throws Exception {\n+        System.setProperty(\"glass.win.uiScale\", String.valueOf(scale));\n+        System.setProperty(\"glass.gtk.uiScale\", String.valueOf(scale));\n+        startupLatch = new CountDownLatch(1);\n+        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n+        assertTrue(\"Timeout waiting for FX runtime to start\",\n+                startupLatch.await(15, TimeUnit.SECONDS));\n+    }\n+\n+    @Test\n+    public void testCheckBoxTextInDialogDoesNotHaveEllipsis() {\n+        assumeTrue(PlatformUtil.isLinux() || PlatformUtil.isWindows());\n+\n+        Assert.assertEquals(\"Wrong render scale\", scale,\n+                stage.getRenderScaleY(), 0.0001);\n+\n+        Assert.assertNotNull(alert);\n+        assertTrue(alert.isShowing());\n+\n+        for (Node node : ((HBox) alert.getDialogPane().getContent()).getChildrenUnmodifiable()) {\n+            CheckBox box = (CheckBox) node;\n+            Assert.assertEquals(\"Wrong text\", \"Check\", ((Text) box.lookup(\".text\")).getText());\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void teardown() {\n+        Platform.runLater(() -> {\n+            if (alert != null) {\n+                alert.hide();\n+            }\n+            stage.hide();\n+        });\n+        Platform.exit();\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/UIRenderDialogTest.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"}]}