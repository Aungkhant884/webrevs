{"files":[{"patch":"@@ -0,0 +1,178 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.layout;\n+\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/**\n+ * Tests the snapping of all container inside {@link javafx.scene.layout}.\n+ * Containers must always snap their width\/height as well as their insets, otherwise the children may look blurry or\n+ * have other side effects. This also ensures that the containers and their children have the correct position and size\n+ * on all different render scales.\n+ *\n+ * @see Stage#setRenderScaleX(double)\n+ * @see Stage#setRenderScaleY(double)\n+ * @see Region#snapPositionX(double)\n+ * @see Region#snapPositionY(double)\n+ *\/\n+class SnappingTest {\n+\n+    private static final double EPSILON = 0.00001;\n+\n+    private Stage stage;\n+\n+    @AfterEach\n+    void tearDown() {\n+        if (stage != null) {\n+            stage.hide();\n+            stage = null;\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(value = { \"getContainerCreators\" })\n+    void testContainerSnappingScale100(ContainerCreator<Region> containerCreator) {\n+        testContainerSnappingImpl(containerCreator, 1);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(value = { \"getContainerCreators\" })\n+    void testContainerSnappingScale125(ContainerCreator<Region> containerCreator) {\n+        testContainerSnappingImpl(containerCreator, 1.25);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(value = { \"getContainerCreators\" })\n+    void testContainerSnappingScale150(ContainerCreator<Region> containerCreator) {\n+        testContainerSnappingImpl(containerCreator, 1.5);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(value = { \"getContainerCreators\" })\n+    void testContainerSnappingScale175(ContainerCreator<Region> containerCreator) {\n+        testContainerSnappingImpl(containerCreator, 1.75);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(value = { \"getContainerCreators\" })\n+    void testContainerSnappingScale200(ContainerCreator<Region> containerCreator) {\n+        testContainerSnappingImpl(containerCreator, 2);\n+    }\n+\n+    private void testContainerSnappingImpl(ContainerCreator<Region> containerCreator, double scale) {\n+        double widthHeight = 100;\n+        double padding = 9.6;\n+\n+        Region child = new Region();\n+        child.setMinWidth(widthHeight);\n+        child.setMinHeight(widthHeight);\n+        child.setPrefWidth(widthHeight);\n+        child.setPrefHeight(widthHeight);\n+        child.setMaxWidth(widthHeight);\n+        child.setMaxHeight(widthHeight);\n+\n+        Region container = containerCreator.apply(child);\n+        container.setStyle(\"-fx-padding: \" + padding + \"px;\");\n+\n+        DoubleProperty renderScaleProperty = new SimpleDoubleProperty(scale);\n+\n+        stage = new Stage();\n+        stage.renderScaleXProperty().bind(renderScaleProperty);\n+        stage.renderScaleYProperty().bind(renderScaleProperty);\n+\n+        Scene scene = new Scene(container, widthHeight, widthHeight);\n+        stage.setScene(scene);\n+        stage.show();\n+\n+        double snappedPaddingX = container.snapPositionX(padding) * 2;\n+        double snappedPaddingY = container.snapPositionY(padding) * 2;\n+\n+        \/\/ Special case: The min width\/height of the Pane is only the padding\n+        String className = container.getClass().getSimpleName();\n+        if (container.getClass() == Pane.class) {\n+            assertEquals(snappedPaddingX, container.minWidth(-1), EPSILON, className);\n+            assertEquals(snappedPaddingY, container.minHeight(-1), EPSILON, className);\n+        } else {\n+            assertEquals(widthHeight + snappedPaddingX, container.minWidth(-1), EPSILON, className);\n+            assertEquals(widthHeight + snappedPaddingY, container.minHeight(-1), EPSILON, className);\n+        }\n+\n+        assertEquals(widthHeight + snappedPaddingX, container.prefWidth(-1), EPSILON, className);\n+        assertEquals(widthHeight + snappedPaddingY, container.prefHeight(-1), EPSILON, className);\n+    }\n+\n+    static Stream<ContainerCreator<?>> getContainerCreators() {\n+        \/\/ TODO: Create issues and fix snapping for all commented out layout containers below.\n+        \/\/ Note that the working layout containers do not necessarily use the optimized snappedXXXInsets() methods,\n+        \/\/ but instead snap the insets (again). This can be optimized as well.\n+        return Stream.of(\n+                new ContainerCreator<>(HBox::new),\n+                new ContainerCreator<>(VBox::new),\n+                new ContainerCreator<>(node -> {\n+                    GridPane gridPane = new GridPane();\n+                    gridPane.getChildren().add(node);\n+                    return gridPane;\n+                })\n+\/\/                new ContainerCreator<>(Pane::new),\n+\/\/                new ContainerCreator<>(StackPane::new),\n+\/\/                new ContainerCreator<>(BorderPane::new),\n+\/\/                new ContainerCreator<>(node -> {\n+\/\/                    TilePane tilePane = new TilePane(node);\n+\/\/                    tilePane.setPrefColumns(1);\n+\/\/                    return tilePane;\n+\/\/                }),\n+\/\/                new ContainerCreator<>(AnchorPane::new), \/\/ fixed by JDK-8295078\n+\/\/                new ContainerCreator<>(node -> {\n+\/\/                    FlowPane flowPane = new FlowPane(node);\n+\/\/                    flowPane.setPrefWrapLength(0);\n+\/\/                    return flowPane;\n+\/\/                })\n+        );\n+    }\n+\n+    private record ContainerCreator<S extends Region>(Function<Node, S> containerCreatorFunction) {\n+        public S apply(Node child) {\n+            return containerCreatorFunction().apply(child);\n+        }\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/SnappingTest.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"added"}]}