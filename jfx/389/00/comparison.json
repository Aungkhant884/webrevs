{"files":[{"patch":"@@ -653,3 +653,3 @@\n-        }\n-        if (pixelaccessor != null && pixelScale != 1.0f) {\n-            pixelaccessor = new ScaledAccessor<>(pixelaccessor, pixelScale);\n+            if (pixelScale != 1.0f) {\n+                pixelaccessor = new ScaledAccessor<>(pixelaccessor, pixelScale);\n+            }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/Image.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,157 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.iio;\n+\n+import com.sun.javafx.iio.ImageFrame;\n+import com.sun.javafx.iio.ImageStorage;\n+import com.sun.javafx.iio.ImageStorageException;\n+import com.sun.prism.Image;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+\/**\n+ * Test multiple calls to getPixel with both a normal image\n+ * and a Hi-DPI \"@2x\" image.\n+ *\n+ * @test\n+ * @bug 8258986\n+ *\/\n+public class ImageHiDPITest {\n+    private static final String IMAGE_NAME = \"checker.png\";\n+\n+    private String imagePath;\n+\n+    @Before\n+    public void setup() {\n+        imagePath = this.getClass().getResource(IMAGE_NAME).toExternalForm();\n+        assertNotNull(imagePath);\n+    }\n+\n+    private ImageFrame loadImage(String path, float pixelScale) {\n+        try {\n+            ImageFrame[] imageFrames =\n+                    ImageStorage.loadAll(path, null, 0, 0, true, pixelScale, true);\n+\n+            assertNotNull(imageFrames);\n+            assertEquals(1, imageFrames.length);\n+            ImageFrame imageFrame = imageFrames[0];\n+            assertNotNull(imageFrame);\n+\n+            assertEquals(\"Unexpected pixel scale\",\n+                    pixelScale, imageFrame.getPixelScale(), 0.0001f);\n+\n+            int width = imageFrame.getWidth();\n+            int height = imageFrame.getHeight();\n+            assertTrue(\"Image size must be at least 8x8\", width >= 8 && height >= 8);\n+\n+            return imageFrame;\n+        } catch (ImageStorageException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    private void testPixelGet(float pixelScale) {\n+        ImageFrame imageFrame = loadImage(imagePath, pixelScale);\n+        int width = imageFrame.getWidth();\n+        int height = imageFrame.getHeight();\n+\n+        \/\/ Convert to a Prism Image\n+        Image image = Image.convertImageFrame(imageFrame);\n+        assertNotNull(image);\n+        assertEquals(width, image.getWidth());\n+        assertEquals(height, image.getHeight());\n+\n+        \/\/ Test pixel read operations.\n+        \/\/ NOTE: the x, y position passed into getArgb are unscaled,\n+        \/\/ user-space coords in the range [0, (sz\/pixelScale)-1]\n+        int w = (int) (width \/ pixelScale);\n+        int h = (int) (height \/ pixelScale);\n+\n+        \/\/ Test pixel read at the center and all 4 corners.\n+        \/\/ In each of these cases we will read the pixel twice to\n+        \/\/ ensure that the value remains stable, and that we don't\n+        \/\/ get an IOOBE.\n+\n+        final int[] xvals = {\n+            w \/ 2,\n+            2,\n+            w - 2,\n+            2,\n+            w - 2\n+        };\n+\n+        final int[] yvals = {\n+            h \/ 2,\n+            2,\n+            2,\n+            h - 2,\n+            h - 2\n+        };\n+\n+        final int[] exColors = {\n+            0xffff00ff, \/\/ CENTER\n+            0xffff0000, \/\/ TOP LEFT\n+            0xff0000ff, \/\/ TOP RIGHT\n+            0xffff8080, \/\/ BOTTOM LEFT\n+            0xff8ff080  \/\/ BOTTOM RIGHT\n+        };\n+\n+        for (int i = 0; i < xvals.length; i++) {\n+            int pix1 = image.getArgb(xvals[i], yvals[i]);\n+            assertEquals(\"getArgb returns incorrect color\", exColors[i], pix1);\n+            int pix2 = image.getArgb(xvals[i], yvals[i]);\n+            assertEquals(\"second call to getArgb returns different result\", pix1, pix2);\n+        }\n+    }\n+\n+    @Test\n+    public void testNormalPixelGet() {\n+        \/\/ Test image with pixel scale of 1, which will load the unscaled image\n+        testPixelGet(1.0f);\n+    }\n+\n+    @Test\n+    public void testScaledPixelGet() {\n+        \/\/ Test image with pixel scale of 2, which will load the @2x image file\n+        testPixelGet(2.0f);\n+    }\n+\n+    @Test\n+    public void testScaledImageSize() {\n+        \/\/ Load both the normal and the @2x images\n+        ImageFrame imageFrame1 = loadImage(imagePath, 1.0f);\n+        ImageFrame imageFrame2 = loadImage(imagePath, 2.0f);\n+\n+        \/\/ Check that the size of the @2x image is twice that of the normal image\n+        int exWidth2 = imageFrame1.getWidth() * 2;\n+        int exHeight2 = imageFrame1.getHeight()* 2;\n+        assertEquals(\"width of @2x image is wrong\", exWidth2, imageFrame2.getWidth());\n+        assertEquals(\"height of @2x image is wrong\", exHeight2, imageFrame2.getHeight());\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/iio\/ImageHiDPITest.java","additions":157,"deletions":0,"binary":false,"changes":157,"status":"added"},{"filename":"modules\/javafx.graphics\/src\/test\/resources\/test\/com\/sun\/javafx\/iio\/checker.png","binary":true,"status":"added"},{"filename":"modules\/javafx.graphics\/src\/test\/resources\/test\/com\/sun\/javafx\/iio\/checker@2x.png","binary":true,"status":"added"}]}