{"files":[{"patch":"@@ -34,0 +34,2 @@\n+#include <map>\n+\n@@ -37,0 +39,15 @@\n+\/\/ As the user types we query each key to determine which characters\n+\/\/ it can generate and stash them in a map. This map is used by\n+\/\/ getKeyCodeForChar.\n+static std::map<guint32, jint> unicode_to_java_keycode;\n+\/\/ If the user changes their layout (group) the map becomes invalid.\n+static gint unicode_to_java_keycode_group = -1;\n+\/\/ If the user adds or removes layouts from the list of input sources\n+\/\/ we need to invalidate the map. The group number is an index into\n+\/\/ that list so it's now pointing at a different layout.\n+static void on_keys_changed(GdkKeymap* k, void* user_data) {\n+    (void)k;\n+    (void)user_data;\n+    unicode_to_java_keycode.clear();\n+}\n+\n@@ -212,0 +229,1 @@\n+    glass_g_hash_table_insert_int(keymap, GLASS_GDK_KEY_CONSTANT(KP_Equal), com_sun_glass_events_KeyEvent_VK_EQUALS);\n@@ -227,0 +245,7 @@\n+\n+    \/\/ This signal is sent when the user changes the list of available layouts. It is not sent when they\n+    \/\/ switch from one layout to another.\n+    \/\/ The documented signal sent by most versions of Gtk.\n+    g_signal_connect(gdk_keymap_get_default(), \"keys-changed\", G_CALLBACK(on_keys_changed), nullptr);\n+    \/\/ The actual signal sent by the X11 version.\n+    g_signal_connect(gdk_keymap_get_default(), \"keys_changed\", G_CALLBACK(on_keys_changed), nullptr);\n@@ -269,0 +294,43 @@\n+    \/\/ If the user changed layouts since the last keystroke invalidate\n+    \/\/ the map.\n+    if (e->group != unicode_to_java_keycode_group) {\n+        unicode_to_java_keycode.clear();\n+        unicode_to_java_keycode_group = e->group;\n+    }\n+\n+    \/\/ Record all the Unicode characters that this key can generate.\n+    if (key != com_sun_glass_events_KeyEvent_VK_UNDEFINED)\n+    {\n+        GdkKeymapKey* keys = nullptr;\n+        guint* keyvals = nullptr;\n+        gint count = 0;\n+        if (gdk_keymap_get_entries_for_keycode(gdk_keymap_get_default(),\n+                e->hardware_keycode, &keys, &keyvals, &count))\n+        {\n+            gint search_group = e->group;\n+            \/\/ For keys that don't vary by group (e.g. Space or the keypad)\n+            \/\/ this call might return results on group 0 even if that's not\n+            \/\/ the current group.\n+            if (search_group != 0) {\n+                bool all_are_zero = true;\n+                for (gint i = 0; i < count; ++i) {\n+                    if (keys[i].group != 0) {\n+                        all_are_zero = false;\n+                        break;\n+                    }\n+                }\n+                if (all_are_zero)\n+                    search_group = 0;\n+            }\n+            for (gint i = 0; i < count; ++i) {\n+                if (keys[i].group == search_group) {\n+                    guint32 unicode = gdk_keyval_to_unicode(keyvals[i]);\n+                    if (unicode != 0)\n+                        unicode_to_java_keycode[unicode] = key;\n+                }\n+            }\n+        }\n+        g_free(keyvals);\n+        g_free(keys);\n+    }\n+\n@@ -368,0 +436,5 @@\n+    \/\/ Query what we learned as the user was typing.\n+    auto f = unicode_to_java_keycode.find(character);\n+    if (f != unicode_to_java_keycode.end())\n+        return f->second;\n+\n@@ -435,0 +508,4 @@\n+\n+    \/\/ Update the map, there's no point in going through this search again.\n+    unicode_to_java_keycode[character] = jKeyCode;\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_key.cpp","additions":77,"deletions":0,"binary":false,"changes":77,"status":"modified"}]}