{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -355,0 +355,2 @@\n+    \/\/ index at time of startEdit - fix for JDK-8165214\n+    private int indexAtStartEdit;\n@@ -377,0 +379,2 @@\n+\n+        indexAtStartEdit = getIndex();\n@@ -421,3 +425,0 @@\n-         \/\/ Inform the ListView of the edit being cancelled.\n-        ListView<T> list = getListView();\n-\n@@ -426,0 +427,2 @@\n+        \/\/ Inform the ListView of the edit being cancelled.\n+        ListView<T> list = getListView();\n@@ -427,1 +430,0 @@\n-            int editingIndex = list.getEditingIndex();\n@@ -441,1 +443,1 @@\n-                    editingIndex));\n+                    indexAtStartEdit));\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ListCell.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n@@ -42,0 +43,1 @@\n+\n@@ -48,0 +50,2 @@\n+import com.sun.javafx.tk.Toolkit;\n+\n@@ -58,0 +62,1 @@\n+    private StageLoader stageLoader;\n@@ -74,0 +79,1 @@\n+        if (stageLoader != null) stageLoader.dispose();\n@@ -753,0 +759,86 @@\n+    @Test\n+    public void testEditCancelEventAfterCancelOnCell() {\n+        list.setEditable(true);\n+        cell.updateListView(list);\n+        int editingIndex = 1;\n+        cell.updateIndex(editingIndex);\n+        list.edit(editingIndex);\n+        List<EditEvent<String>> events = new ArrayList<>();\n+        list.setOnEditCancel(events::add);\n+        cell.cancelEdit();\n+        assertEquals(1, events.size());\n+        assertEquals(\"editing location of cancel event\", editingIndex, events.get(0).getIndex());\n+    }\n+\n+    @Test\n+    public void testEditCancelEventAfterCancelOnList() {\n+        list.setEditable(true);\n+        cell.updateListView(list);\n+        int editingIndex = 1;\n+        cell.updateIndex(editingIndex);\n+        list.edit(editingIndex);\n+        List<EditEvent<String>> events = new ArrayList<>();\n+        list.setOnEditCancel(events::add);\n+        list.edit(-1);\n+        assertEquals(1, events.size());\n+        assertEquals(\"editing location of cancel event\", editingIndex, events.get(0).getIndex());\n+    }\n+\n+    @Test\n+    public void testEditCancelEventAfterChangeEditingIndexOnList() {\n+        list.setEditable(true);\n+        cell.updateListView(list);\n+        int editingIndex = 1;\n+        cell.updateIndex(editingIndex);\n+        list.edit(editingIndex);\n+        List<EditEvent<String>> events = new ArrayList<>();\n+        list.setOnEditCancel(events::add);\n+        list.edit(0);\n+        assertEquals(1, events.size());\n+        assertEquals(\"editing location of cancel event\", editingIndex, events.get(0).getIndex());\n+    }\n+\n+    @Test\n+    public void testEditCancelEventAfterCellReuse() {\n+        list.setEditable(true);\n+        cell.updateListView(list);\n+        int editingIndex = 1;\n+        cell.updateIndex(editingIndex);\n+        list.edit(editingIndex);\n+        List<EditEvent<String>> events = new ArrayList<>();\n+        list.setOnEditCancel(events::add);\n+        cell.updateIndex(0);\n+        assertEquals(1, events.size());\n+        assertEquals(\"editing location of cancel event\", editingIndex, events.get(0).getIndex());\n+    }\n+\n+    @Test\n+    public void testEditCancelEventAfterModifyItems() {\n+        list.setEditable(true);\n+        stageLoader = new StageLoader(list);\n+        int editingIndex = 1;\n+        list.edit(editingIndex);\n+        List<EditEvent<String>> events = new ArrayList<>();\n+        list.setOnEditCancel(events::add);\n+        list.getItems().add(0, \"added\");\n+        Toolkit.getToolkit().firePulse();\n+        assertEquals(1, events.size());\n+        assertEquals(\"editing location of cancel event\", editingIndex, events.get(0).getIndex());\n+    }\n+\n+    @Test\n+    public void testEditCancelEventAfterRemoveEditingItem() {\n+        list.setEditable(true);\n+        stageLoader = new StageLoader(list);\n+        int editingIndex = 1;\n+        list.edit(editingIndex);\n+        List<EditEvent<String>> events = new ArrayList<>();\n+        list.setOnEditCancel(events::add);\n+        list.getItems().remove(editingIndex);\n+        Toolkit.getToolkit().firePulse();\n+        assertEquals(\"removing item must cancel edit on list\", -1, list.getEditingIndex());\n+        assertEquals(1, events.size());\n+        assertEquals(\"editing location of cancel event\", editingIndex, events.get(0).getIndex());\n+    }\n+\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListCellTest.java","additions":93,"deletions":1,"binary":false,"changes":94,"status":"modified"}]}