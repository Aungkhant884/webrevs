{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-import javafx.concurrent.Task;\n@@ -47,0 +46,1 @@\n+import javafx.event.EventTarget;\n@@ -48,3 +48,0 @@\n-import javafx.scene.Node;\n-import javafx.scene.Scene;\n-import javafx.scene.control.MenuItem;\n@@ -52,4 +49,0 @@\n-import javafx.scene.control.TableColumnBase;\n-import javafx.scene.control.TreeItem;\n-import javafx.scene.transform.Transform;\n-import javafx.stage.Window;\n@@ -396,1 +389,1 @@\n-    public <T extends Event> IDisconnectable addEventHandler(Object x, EventType<T> t, EventHandler<T> handler) {\n+    public <T extends Event> IDisconnectable addEventHandler(EventTarget x, EventType<T> t, EventHandler<T> handler) {\n@@ -400,17 +393,1 @@\n-                if (x instanceof Node n) {\n-                    n.removeEventHandler(t, this);\n-                } else if (x instanceof Window y) {\n-                    y.removeEventHandler(t, this);\n-                } else if (x instanceof Scene y) {\n-                    y.removeEventHandler(t, this);\n-                } else if (x instanceof MenuItem y) {\n-                    y.removeEventHandler(t, this);\n-                } else if (x instanceof TreeItem y) {\n-                    y.removeEventHandler(t, this);\n-                } else if (x instanceof TableColumnBase y) {\n-                    y.removeEventHandler(t, this);\n-                } else if (x instanceof Transform y) {\n-                    y.removeEventHandler(t, this);\n-                } else if (x instanceof Task y) {\n-                    y.removeEventHandler(t, this);\n-                }\n+                x.removeEventHandler(t, this);\n@@ -422,20 +399,1 @@\n-        \/\/ we really need an interface here ... \"HasEventHandlers\"\n-        if (x instanceof Node y) {\n-            y.addEventHandler(t, h);\n-        } else if (x instanceof Window y) {\n-            y.addEventHandler(t, h);\n-        } else if (x instanceof Scene y) {\n-            y.addEventHandler(t, h);\n-        } else if (x instanceof MenuItem y) {\n-            y.addEventHandler(t, h);\n-        } else if (x instanceof TreeItem y) {\n-            y.addEventHandler(t, h);\n-        } else if (x instanceof TableColumnBase y) {\n-            y.addEventHandler(t, h);\n-        } else if (x instanceof Transform y) {\n-            y.addEventHandler(t, h);\n-        } else if (x instanceof Task y) {\n-            y.addEventHandler(t, h);\n-        } else {\n-            throw new IllegalArgumentException(\"Cannot add event handler to \" + x);\n-        }\n+        x.addEventHandler(t, h);\n@@ -448,1 +406,1 @@\n-    public <T extends Event> IDisconnectable addEventFilter(Object x, EventType<T> t, EventHandler<T> handler) {\n+    public <T extends Event> IDisconnectable addEventFilter(EventTarget x, EventType<T> t, EventHandler<T> handler) {\n@@ -452,11 +410,1 @@\n-                if (x instanceof Node n) {\n-                    n.removeEventFilter(t, this);\n-                } else if (x instanceof Window y) {\n-                    y.removeEventFilter(t, this);\n-                } else if (x instanceof Scene y) {\n-                    y.removeEventFilter(t, this);\n-                } else if (x instanceof Transform y) {\n-                    y.removeEventFilter(t, this);\n-                } else if (x instanceof Task y) {\n-                    y.removeEventFilter(t, this);\n-                }\n+                x.removeEventFilter(t, this);\n@@ -468,14 +416,1 @@\n-        \/\/ we really need an interface here ... \"HasEventFilters\"\n-        if (x instanceof Node y) {\n-            y.addEventFilter(t, h);\n-        } else if (x instanceof Window y) {\n-            y.addEventFilter(t, h);\n-        } else if (x instanceof Scene y) {\n-            y.addEventFilter(t, h);\n-        } else if (x instanceof Transform y) {\n-            y.addEventFilter(t, h);\n-        } else if (x instanceof Task y) {\n-            y.addEventFilter(t, h);\n-        } else {\n-            throw new IllegalArgumentException(\"Cannot add event filter to \" + x);\n-        }\n+        x.addEventFilter(t, h);\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/ListenerHelper.java","additions":8,"deletions":73,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -395,6 +395,0 @@\n-    @Test(expected = IllegalArgumentException.class)\n-    public void testEventHandlerCheck() {\n-        ListenerHelper h = new ListenerHelper();\n-        h.addEventHandler(new Object(), MouseEvent.ANY, (ev) -> { throw new Error(); });\n-    }\n-\n@@ -425,6 +419,0 @@\n-    @Test(expected = IllegalArgumentException.class)\n-    public void testEventFilterCheck() {\n-        ListenerHelper h = new ListenerHelper();\n-        h.addEventFilter(new Object(), MouseEvent.ANY, (ev) -> { throw new Error(); });\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TestListenerHelper.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"}]}