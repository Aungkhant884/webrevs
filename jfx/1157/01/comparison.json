{"files":[{"patch":"@@ -202,1 +202,1 @@\n-    public Hit getHitInfo(float x, float y);\n+    public Hit getHitInfo(float x, float y, String text);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/text\/TextLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -423,1 +423,1 @@\n-    public Hit getHitInfo(float x, float y) {\n+    public Hit getHitInfo(float x, float y, String text) {\n@@ -427,0 +427,1 @@\n+        int relIndex = 0;\n@@ -443,6 +444,20 @@\n-            for (int i = 0; i < runs.length; i++) {\n-                run = runs[i];\n-                if (x < run.getWidth()) break;\n-                if (i + 1 < runs.length) {\n-                    if (runs[i + 1].isLinebreak()) break;\n-                    x -= run.getWidth();\n+            if (text == null || spans == null) {\n+                for (int i = 0; i < runs.length; i++) {\n+                    run = runs[i];\n+                    if (x < run.getWidth()) break;\n+                    if (i + 1 < runs.length) {\n+                        if (runs[i + 1].isLinebreak()) break;\n+                        x -= run.getWidth();\n+                    }\n+                }\n+            } else {\n+                for(TextRun r: runs) {\n+                    if (r.getTextSpan() != null && r.getTextSpan().getText().equals(text)) {\n+                        if (x > r.getWidth()) {\n+                            x -= r.getWidth();\n+                            relIndex += r.getLength();\n+                            continue;\n+                        }\n+                        run = r;\n+                        break;\n+                    }\n@@ -451,0 +466,1 @@\n+\n@@ -453,1 +469,9 @@\n-                charIndex = run.getStart() + run.getOffsetAtX(x, trailing);\n+                int temp = run.getOffsetAtX(x, trailing);\n+                if (text != null && spans != null) {\n+                    charIndex = run.getOffsetAtX(x, trailing);\n+                    if (relIndex != 0) {\n+                        charIndex += relIndex;\n+                    }\n+                } else {\n+                    charIndex = run.getStart() + run.getOffsetAtX(x, trailing);\n+                }\n@@ -460,1 +484,5 @@\n-                        charIterator.setText(new String(getText()));\n+                        if (text != null) {\n+                            charIterator.setText(text);\n+                        } else {\n+                            charIterator.setText(new String(getText()));\n+                        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismTextLayout.java","additions":37,"deletions":9,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -396,1 +396,1 @@\n-            if (runX + advance > x) {\n+            if (runX + advance >= x) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/TextRun.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1025,1 +1025,1 @@\n-        TextLayout.Hit h = layout.getHitInfo((float)x, (float)y);\n+        TextLayout.Hit h = layout.getHitInfo((float)x, (float)y, getText());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/Text.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -202,1 +202,1 @@\n-            TextLayout.Hit h = layout.getHitInfo((float)x, (float)y);\n+            TextLayout.Hit h = layout.getHitInfo((float)x, (float)y, null);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/TextFlow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-    public Hit getHitInfo(float x, float y) {\n+    public Hit getHitInfo(float x, float y, String text) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubTextLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,330 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.scene;\n+\n+import java.util.Random;\n+import java.util.concurrent.CountDownLatch;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.robot.Robot;\n+import javafx.scene.text.Font;\n+import javafx.scene.text.HitInfo;\n+import javafx.scene.text.Text;\n+import javafx.scene.text.TextFlow;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import test.util.Util;\n+\n+import javafx.scene.input.PickResult;\n+import javafx.scene.Node;\n+import javafx.geometry.Point3D;\n+\n+\/*\n+ * Test for verifying character index of Text nodes embedded in TextFlow.\n+ *\n+ * There are 4 tests in this file.\n+ * Steps for testTwoTextNodesCharIndexEmbeddedInTexFlow()\n+ * 1. Create a TextFlow. Add two Text nodes with only text.\n+ * 2. Move the cursor from first character to last character with a random\n+ *    incement generated in step() method.\n+ * 3. Character index should change as expected and it is relative\n+ *    to the Text node.\n+ *\n+ * Steps for testTextAndEmojiCharIndexEmbeddedInTexFlow()\n+ * 1. Create a TextFlow. Add two Text nodes, one with text and one with emojis.\n+ * 2. Move the cursor from first character to last character with a random\n+ *    incement generated in step() method.\n+ * 3. Character index should change as expected and it is relative\n+ *    to the Text node.\n+ *\n+ * Steps for testEmojiAndTextCharIndexEmbeddedInTexFlow()\n+ * 1. Create a TextFlow. Add two Text nodes, one with emojis and one with text.\n+ * 2. Move the cursor from first character to last character with a random\n+ *    incement generated in step() method.\n+ * 3. Character index should change as expected and it is relative\n+ *    to the Text node.\n+ *\n+ * Steps for testTwoEmojiNodesCharIndexEmbeddedInTexFlow()\n+ * 1. Create a TextFlow. Add two Text nodes containing only emojis.\n+ * 2. Move the cursor from first character to last character with a random\n+ *    incement generated in step() method.\n+ * 3. Character index should change as expected and it is relative\n+ *    to the Text node.\n+ *\/\n+\n+public class TextCharacterIndexTest {\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n+    static Random random;\n+    static Robot robot;\n+    static TextFlow textFlow;\n+    static Text textOne;\n+    static Text textTwo;\n+    static Text emoji;\n+\n+    static volatile Stage stage;\n+    static volatile Scene scene;\n+\n+    static final int WIDTH = 500;\n+    static final int HEIGHT = 150;\n+\n+    final int Y_OFFSET = 25;\n+    final int X_LEADING_OFFSET = 10;\n+    final int X_TRAILING_OFFSET = 40;\n+\n+    boolean isLeading;\n+    boolean isSurrogatePair;\n+    int charIndex;\n+    int insertionIndex;\n+    int textFlowCharIndex;\n+\n+    private void mouseClick(double x, double y) {\n+        Util.runAndWait(() -> {\n+            robot.mouseMove((int) (scene.getWindow().getX() + scene.getX() + x),\n+                    (int) (scene.getWindow().getY() + scene.getY() + y));\n+            robot.mouseClick(MouseButton.PRIMARY);\n+        });\n+    }\n+\n+    private void moveMouseOverTextFlow(double x, double y) throws Exception {\n+        mouseClick(textFlow.getLayoutX() + x,\n+                    textFlow.getLayoutY() + y);\n+    }\n+\n+    private void addTwoTextNodes() {\n+        Util.runAndWait(() -> {\n+            textOne = new Text(\"This is Text\");\n+            textOne.setFont(new Font(48));\n+            textTwo = new Text(\"This is Text\");\n+            textTwo.setFont(new Font(48));\n+            textFlow.getChildren().clear();\n+            textFlow.getChildren().setAll(textOne, textTwo);\n+        });\n+    }\n+\n+    private void addTextAndEmojisNoes() {\n+        Util.runAndWait(() -> {\n+            textOne = new Text(\"Text: \");\n+            textOne.setFont(new Font(48));\n+            textTwo = new Text(\"😊😇💙🦋🏁🔥\");\n+            textTwo.setFont(new Font(48));\n+            textFlow.getChildren().clear();\n+            textFlow.getChildren().setAll(textOne, textTwo);\n+        });\n+    }\n+\n+    private void addEmojisAndTextNode() {\n+        Util.runAndWait(() -> {\n+            textOne = new Text(\"😊😇💙🦋🏁🔥\");\n+            textOne.setFont(new Font(48));\n+            textTwo = new Text(\"Text\");\n+            textTwo.setFont(new Font(48));\n+            textFlow.getChildren().clear();\n+            textFlow.getChildren().setAll(textOne, textTwo);\n+        });\n+    }\n+\n+    private void addTwoEmojiNodes() {\n+        Util.runAndWait(() -> {\n+            textOne = new Text(\"😊💙🦋🏁🔥\");\n+            textOne.setFont(new Font(48));\n+            textTwo = new Text(\"😊💙🦋🏁🔥\");\n+            textTwo.setFont(new Font(48));\n+            textFlow.getChildren().clear();\n+            textFlow.getChildren().setAll(textOne, textTwo);\n+        });\n+    }\n+\n+    @Test\n+    public void testTwoTextNodesCharIndexEmbeddedInTexFlow() throws Exception {\n+        addTwoTextNodes();\n+        Util.waitForIdle(scene);\n+\n+        int textOneLength = textOne.getText().length();\n+        int textTwoLength = textTwo.getText().length();\n+        int totalLength = textOneLength + textTwoLength;\n+        double x = 0.0;\n+        while (textFlowCharIndex < totalLength - 1) {\n+            moveMouseOverTextFlow(x, Y_OFFSET);\n+            if (isLeading) {\n+                Assert.assertEquals(charIndex, insertionIndex);\n+            } else {\n+                Assert.assertEquals(charIndex, insertionIndex - 1);\n+            }\n+            x += step();\n+        }\n+    }\n+\n+    @Test\n+    public void testTextAndEmojiCharIndexEmbeddedInTexFlow() throws Exception {\n+        addTextAndEmojisNoes();\n+        Util.waitForIdle(scene);\n+\n+        int textOneLength = textOne.getText().length();\n+        int textTwoLength = textTwo.getText().length();\n+        int totalLength = textOneLength + textTwoLength;\n+        double x = 0.0;\n+        while (textFlowCharIndex < totalLength - 1) {\n+            moveMouseOverTextFlow(x, Y_OFFSET);\n+            if (isLeading) {\n+                Assert.assertEquals(charIndex, insertionIndex);\n+            } else if (isSurrogatePair) {\n+                Assert.assertEquals(charIndex, insertionIndex - 2);\n+            } else {\n+                Assert.assertEquals(charIndex, insertionIndex - 1);\n+            }\n+            x += step();\n+        }\n+    }\n+\n+    @Test\n+    public void testEmojiAndTextCharIndexEmbeddedInTexFlow() throws Exception {\n+        addEmojisAndTextNode();\n+        Util.waitForIdle(scene);\n+\n+        int textOneLength = textOne.getText().length();\n+        int textTwoLength = textTwo.getText().length();\n+        int totalLength = textOneLength + textTwoLength;\n+        double x = 0.0;\n+        while (textFlowCharIndex < totalLength - 1) {\n+            moveMouseOverTextFlow(x, Y_OFFSET);\n+            if (isLeading) {\n+                Assert.assertEquals(charIndex, insertionIndex);\n+            } else if (isSurrogatePair) {\n+                Assert.assertEquals(charIndex, insertionIndex - 2);\n+            } else {\n+                Assert.assertEquals(charIndex, insertionIndex - 1);\n+            }\n+            x += step();\n+        }\n+    }\n+\n+    @Test\n+    public void testTwoEmojiNodesCharIndexEmbeddedInTexFlow() throws Exception {\n+        addTwoEmojiNodes();\n+        Util.waitForIdle(scene);\n+\n+        int textOneLength = textOne.getText().length();\n+        int textTwoLength = textTwo.getText().length();\n+        int totalLength = textOneLength + textTwoLength;\n+        double x = 0.0;\n+        while (textFlowCharIndex < totalLength - 1) {\n+            moveMouseOverTextFlow(x, Y_OFFSET);\n+            \/\/ System.out.println(\"charIndex: \" + charIndex);\n+            \/\/ System.out.println(\"insertionIndex: \" + insertionIndex);\n+            \/\/ System.out.println(\"isSurrogatePair: \" + isSurrogatePair);\n+            if (isLeading) {\n+                Assert.assertEquals(charIndex, insertionIndex);\n+            } else if (isSurrogatePair) {\n+                Assert.assertEquals(charIndex, insertionIndex - 2);\n+            }\n+            else {\n+                Assert.assertEquals(charIndex, insertionIndex - 1);\n+            }\n+            x += step();\n+        }\n+    }\n+\n+    private void handleMouseEvent(MouseEvent event) {\n+        PickResult pick = event.getPickResult();\n+        Node n = pick.getIntersectedNode();\n+\n+        if (n != null && n instanceof Text t) {\n+            Point3D p3 = pick.getIntersectedPoint();\n+            Point2D p = new Point2D(p3.getX(), p3.getY());\n+            HitInfo hitInfo = t.hitTest(p);\n+\n+            isLeading = hitInfo.isLeading();\n+            charIndex = hitInfo.getCharIndex();\n+            insertionIndex = hitInfo.getInsertionIndex();\n+            isSurrogatePair = Character.isSurrogate(t.getText().charAt(charIndex));\n+        }\n+\n+        \/\/ String testString = textOne.getText();\n+        \/\/ testString += textTwo.getText();\n+        \/\/ isSurrogatePair = Character.isSurrogate(testString.charAt(charIndex));\n+        Point2D point = new Point2D(event.getX(), event.getY());\n+        HitInfo textFlowHitInfo = textFlow.hitTest(point);\n+        textFlowCharIndex = textFlowHitInfo.getCharIndex();\n+    }\n+\n+    private double step() {\n+        return 1.0 + random.nextDouble() * 8.0;\n+    }\n+\n+    @After\n+    public void resetUI() {\n+        Platform.runLater(() -> {\n+            textFlow.removeEventHandler(MouseEvent.MOUSE_PRESSED, this::handleMouseEvent);\n+        });\n+    }\n+\n+    @Before\n+    public void setupUI() {\n+        Platform.runLater(() -> {\n+            textFlow.addEventHandler(MouseEvent.MOUSE_PRESSED, this::handleMouseEvent);\n+        });\n+    }\n+\n+    @BeforeClass\n+    public static void initFX() {\n+        long seed = new Random().nextLong();\n+        System.out.println(\"seed=\" + seed);\n+        random = new Random(seed);\n+\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void exit() {\n+        Util.shutdown(stage);\n+    }\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) {\n+            robot = new Robot();\n+            stage = primaryStage;\n+\n+            textFlow = new TextFlow();\n+            scene = new Scene(textFlow, WIDTH, HEIGHT);\n+            stage.setScene(scene);\n+            stage.initStyle(StageStyle.UNDECORATED);\n+            stage.setOnShown(event -> Platform.runLater(startupLatch::countDown));\n+            stage.setAlwaysOnTop(true);\n+            stage.show();\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TextCharacterIndexTest.java","additions":330,"deletions":0,"binary":false,"changes":330,"status":"added"}]}