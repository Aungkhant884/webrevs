{"files":[{"patch":"@@ -213,1 +213,1 @@\n-    public Hit getHitInfo(float x, float y, String text);\n+    public Hit getHitInfo(float x, float y, String text, int textRunStart, int curRunStart);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/text\/TextLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -424,1 +424,1 @@\n-    public Hit getHitInfo(float x, float y, String text) {\n+    public Hit getHitInfo(float x, float y, String text, int textRunStart, int curRunStart) {\n@@ -432,1 +432,1 @@\n-        int lineIndex = getLineIndex(y, text);\n+        int lineIndex = getLineIndex(y, text, curRunStart);\n@@ -458,1 +458,1 @@\n-                        if (r.getTextSpan() != null && r.getTextSpan().getText().equals(text)) {\n+                        if (r.getTextSpan() != null && r.getTextSpan().getText().equals(text) && r.getStart() >= textRunStart) {\n@@ -466,1 +466,1 @@\n-                    if (!r.getTextSpan().getText().equals(text)) {\n+                    if (!r.getTextSpan().getText().equals(text) || (r.getTextSpan().getText().equals(text) && r.getStart() < textRunStart)) {\n@@ -468,0 +468,1 @@\n+                        continue;\n@@ -751,1 +752,1 @@\n-    private int getLineIndex(float y, String text) {\n+    private int getLineIndex(float y, String text, int runStart) {\n@@ -762,1 +763,1 @@\n-                    if (r.getTextSpan() == null || r.getTextSpan().getText().equals(text)) {\n+                    if (r.getTextSpan() == null || (r.getTextSpan().getText().equals(text) && r.getStart() == runStart)) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismTextLayout.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+import com.sun.javafx.text.TextRun;\n@@ -1025,1 +1026,15 @@\n-        TextLayout.Hit h = layout.getHitInfo((float)x, (float)y, getText());\n+        GlyphList[] runs = getRuns();\n+        int runIndex = 0;\n+        if (runs.length != 0) {\n+            Point2D ptInParent = localToParent(x, y);\n+            while (runIndex < runs.length - 1) {\n+                if (ptInParent.getY() > runs[runIndex].getLocation().y\n+                        && ptInParent.getY() < runs[runIndex + 1].getLocation().y) {\n+                    break;\n+                }\n+                runIndex++;\n+            }\n+        }\n+        int textRunStart = runs.length == 0 ? 0 : ((TextRun) runs[0]).getStart();\n+        int curRunStart = runs.length == 0 ? 0 : ((TextRun) runs[runIndex]).getStart();\n+        TextLayout.Hit h = layout.getHitInfo((float)x, (float)y, getText(), textRunStart, curRunStart);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/Text.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -202,1 +202,1 @@\n-            TextLayout.Hit h = layout.getHitInfo((float)x, (float)y, null);\n+            TextLayout.Hit h = layout.getHitInfo((float)x, (float)y, null, 0, 0);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/TextFlow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-    public Hit getHitInfo(float x, float y, String text) {\n+    public Hit getHitInfo(float x, float y, String text, int textRunStart, int curRunStart) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubTextLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,0 +117,1 @@\n+    static Text textThree;\n@@ -219,0 +220,44 @@\n+    private void addMultipleTexNodeMultiLineRepeatedText() {\n+        Util.runAndWait(() -> {\n+            textOne = new Text(\"This is Text\");\n+            textOne.setFont(new Font(48));\n+            textTwo = new Text(\"This is Text This is Text\");\n+            textTwo.setFont(new Font(48));\n+            textFlow.getChildren().setAll(textOne, textTwo);\n+        });\n+    }\n+\n+    private void addMultipleTextNodeAlternativelyRepeatedText() {\n+        Util.runAndWait(() -> {\n+            textOne = new Text(\"Text\");\n+            textOne.setFont(new Font(48));\n+            textTwo = new Text(\"😊💙🦋🏁🔥\");\n+            textTwo.setFont(new Font(48));\n+            textThree = new Text(\"Text\");\n+            textThree.setFont(new Font(48));\n+            textFlow.getChildren().setAll(textOne, textTwo, textThree);\n+        });\n+    }\n+\n+    private void addMultipleTexNodeMultiLineRepeatedEmojis() {\n+        Util.runAndWait(() -> {\n+            textOne = new Text(\"😊💙🦋🏁🔥\");\n+            textOne.setFont(new Font(48));\n+            textTwo = new Text(\"😊💙🦋🏁🔥😊💙🦋🏁🔥\");\n+            textTwo.setFont(new Font(48));\n+            textFlow.getChildren().setAll(textOne, textTwo);\n+        });\n+    }\n+\n+    private void addMultipleTextNodeAlternativelyRepeatedEmoji() {\n+        Util.runAndWait(() -> {\n+            textOne = new Text(\"😊💙🦋🏁🔥\");\n+            textOne.setFont(new Font(48));\n+            textTwo = new Text(\"Text\");\n+            textTwo.setFont(new Font(48));\n+            textThree = new Text(\"😊💙🦋🏁🔥\");\n+            textThree.setFont(new Font(48));\n+            textFlow.getChildren().setAll(textOne, textTwo, textThree);\n+        });\n+    }\n+\n@@ -220,1 +265,1 @@\n-    public void testTwoTextNodesCharIndexEmbeddedInTexFlow() throws Exception {\n+    public void testTwoTextNodesCharIndexEmbeddedInTextFlow() throws Exception {\n@@ -226,1 +271,1 @@\n-        int totalLength = textOneLength + textTwoLength;\n+\n@@ -228,1 +273,1 @@\n-        while (textFlowCharIndex < totalLength - 1) {\n+        while (x < (WIDTH - X_LEADING_OFFSET)) {\n@@ -235,0 +280,1 @@\n+            Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n@@ -240,1 +286,1 @@\n-    public void testTextAndEmojiCharIndexEmbeddedInTexFlow() throws Exception {\n+    public void testTextAndEmojiCharIndexEmbeddedInTextFlow() throws Exception {\n@@ -246,1 +292,1 @@\n-        int totalLength = textOneLength + textTwoLength;\n+\n@@ -248,1 +294,1 @@\n-        while (textFlowCharIndex < totalLength - 1) {\n+        while (x < (WIDTH - X_LEADING_OFFSET)) {\n@@ -257,0 +303,1 @@\n+            Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n@@ -262,1 +309,1 @@\n-    public void testEmojiAndTextCharIndexEmbeddedInTexFlow() throws Exception {\n+    public void testEmojiAndTextCharIndexEmbeddedInTextFlow() throws Exception {\n@@ -268,1 +315,1 @@\n-        int totalLength = textOneLength + textTwoLength;\n+\n@@ -270,1 +317,1 @@\n-        while (textFlowCharIndex < totalLength - 1) {\n+        while (x < (WIDTH - X_LEADING_OFFSET)) {\n@@ -279,0 +326,1 @@\n+            Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n@@ -284,1 +332,1 @@\n-    public void testTwoEmojiNodesCharIndexEmbeddedInTexFlow() throws Exception {\n+    public void testTwoEmojiNodesCharIndexEmbeddedInTextFlow() throws Exception {\n@@ -290,1 +338,1 @@\n-        int totalLength = textOneLength + textTwoLength;\n+\n@@ -292,1 +340,1 @@\n-        while (textFlowCharIndex < totalLength - 1) {\n+        while (x < (WIDTH - X_LEADING_OFFSET)) {\n@@ -302,0 +350,1 @@\n+            Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n@@ -307,1 +356,1 @@\n-    public void testWrappedTextNodesCharIndexEmbeddedInTexFlow() throws Exception {\n+    public void testWrappedTextNodesCharIndexEmbeddedInTextFlow() throws Exception {\n@@ -313,1 +362,0 @@\n-        int totalLength = textOneLength + textTwoLength;\n@@ -326,0 +374,1 @@\n+                Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n@@ -332,1 +381,1 @@\n-    public void testMultiLineTextNodesCharIndexEmbeddedInTexFlow() throws Exception {\n+    public void testMultiLineTextNodesCharIndexEmbeddedInTextFlow() throws Exception {\n@@ -338,1 +387,0 @@\n-        int totalLength = textOneLength + textTwoLength;\n@@ -351,0 +399,1 @@\n+                Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n@@ -357,1 +406,1 @@\n-    public void testMultiLineEmojisCharIndexEmbeddedInTexFlow() throws Exception {\n+    public void testMultiLineEmojisCharIndexEmbeddedInTextFlow() throws Exception {\n@@ -363,1 +412,0 @@\n-        int totalLength = textOneLength + textTwoLength;\n@@ -376,0 +424,100 @@\n+                Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n+                x += step();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testMultiTextNodesMultiLineRepeatedTextEmbeddedInTextFlow() throws Exception {\n+        addMultipleTexNodeMultiLineRepeatedText();\n+        Util.waitForIdle(scene);\n+\n+        int textOneLength = textOne.getText().length();\n+        int textTwoLength = textTwo.getText().length();\n+\n+        for (int y = 0; y < 2; y++) {\n+            double x = 0.0;\n+            while (x < (WIDTH - X_LEADING_OFFSET)) {\n+                moveMouseOverTextFlow(x, (Y_OFFSET + (Y_OFFSET * (y * 2))));\n+                if (isLeading) {\n+                    Assert.assertEquals(charIndex, insertionIndex);\n+                } else if (isSurrogatePair) {\n+                    Assert.assertEquals(charIndex, insertionIndex - 2);\n+                } else {\n+                    Assert.assertEquals(charIndex, insertionIndex - 1);\n+                }\n+                Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n+                x += step();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testMultiTextNodesAlternativelyRepeatedTextEmbeddedInTextFlow() throws Exception {\n+        addMultipleTextNodeAlternativelyRepeatedText();\n+        Util.waitForIdle(scene);\n+\n+        int textOneLength = textOne.getText().length();\n+        int textTwoLength = textTwo.getText().length();\n+\n+        double x = 0.0;\n+            while (x < (WIDTH - X_LEADING_OFFSET)) {\n+                moveMouseOverTextFlow(x, Y_OFFSET);\n+                if (isLeading) {\n+                    Assert.assertEquals(charIndex, insertionIndex);\n+                } else if (isSurrogatePair) {\n+                    Assert.assertEquals(charIndex, insertionIndex - 2);\n+                } else {\n+                    Assert.assertEquals(charIndex, insertionIndex - 1);\n+                }\n+                Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n+                x += step();\n+            }\n+    }\n+\n+    @Test\n+    public void testMultiTextNodesMultiLineRepeatedTEmojiEmbeddedInTextFlow() throws Exception {\n+        addMultipleTexNodeMultiLineRepeatedEmojis();\n+        Util.waitForIdle(scene);\n+\n+        int textOneLength = textOne.getText().length();\n+        int textTwoLength = textTwo.getText().length();\n+\n+        for (int y = 0; y < 2; y++) {\n+            double x = 0.0;\n+            while (x < (WIDTH - X_LEADING_OFFSET)) {\n+                moveMouseOverTextFlow(x, (Y_OFFSET + (Y_OFFSET * (y * 2))));\n+                if (isLeading) {\n+                    Assert.assertEquals(charIndex, insertionIndex);\n+                } else if (isSurrogatePair) {\n+                    Assert.assertEquals(charIndex, insertionIndex - 2);\n+                } else {\n+                    Assert.assertEquals(charIndex, insertionIndex - 1);\n+                }\n+                Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n+                x += step();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testMultiTextNodesAlternativelyRepeatedEmojisEmbeddedInTextFlow() throws Exception {\n+        addMultipleTextNodeAlternativelyRepeatedEmoji();\n+        Util.waitForIdle(scene);\n+\n+        int textOneLength = textOne.getText().length();\n+        int textTwoLength = textTwo.getText().length();\n+        int textThreeLength = textTwo.getText().length();\n+\n+        for (int y = 0; y < 2; y++) {\n+            double x = 0.0;\n+            while (x < (WIDTH - X_LEADING_OFFSET)) {\n+                moveMouseOverTextFlow(x, (Y_OFFSET + (Y_OFFSET * (y * 2))));\n+                if (isLeading) {\n+                    Assert.assertEquals(charIndex, insertionIndex);\n+                } else if (isSurrogatePair) {\n+                    Assert.assertEquals(charIndex, insertionIndex - 2);\n+                } else {\n+                    Assert.assertEquals(charIndex, insertionIndex - 1);\n+                }\n+                Assert.assertTrue(charIndex < Math.max(textThreeLength, Math.max(textOneLength, textTwoLength)));\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TextCharacterIndexTest.java","additions":166,"deletions":18,"binary":false,"changes":184,"status":"modified"}]}