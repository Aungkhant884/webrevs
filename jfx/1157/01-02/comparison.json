{"files":[{"patch":"@@ -430,1 +430,1 @@\n-        int lineIndex = getLineIndex(y);\n+        int lineIndex = getLineIndex(y, text);\n@@ -733,1 +733,1 @@\n-    private int getLineIndex(float y) {\n+    private int getLineIndex(float y, String text) {\n@@ -736,0 +736,1 @@\n+        boolean isTextPresent = text == null ? true : false;\n@@ -738,0 +739,8 @@\n+            if (text != null) {\n+                for (TextRun r: lines[index].runs) {\n+                    if (r.getTextSpan() != null && r.getTextSpan().getText().equals(text)) {\n+                        isTextPresent = true;\n+                        break;\n+                    }\n+                }\n+            }\n@@ -740,1 +749,1 @@\n-            if (bottom > y) break;\n+            if (bottom > y && isTextPresent) break;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismTextLayout.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n- * There are 4 tests in this file.\n+ * There are 7 tests in this file.\n@@ -86,0 +86,21 @@\n+ *\n+ * Steps for testWrappedTextNodesCharIndexEmbeddedInTexFlow()\n+ * 1. Create a TextFlow. Add two Text nodes which gets wrapped.\n+ * 2. Move the cursor from first character to last character on both lines\n+ *    with a random incement generated in step() method.\n+ * 3. Character index should change as expected and it is relative\n+ *    to the Text node.\n+ *\n+ * Steps for testMultiLineTextNodesCharIndexEmbeddedInTexFlow()\n+ * 1. Create a TextFlow. Add two Text nodes with emojis where new line is explicitly added.\n+ * 2. Move the cursor from first character to last character on both lines\n+ *    with a random incement generated in step() method.\n+ * 3. Character index should change as expected and it is relative\n+ *    to the Text node.\n+ *\n+ * Steps for testMultiLineEmojisCharIndexEmbeddedInTexFlow()\n+ * 1. Create a TextFlow. Add two Text nodes with emojis where new line is explicitly added.\n+ * 2. Move the cursor from first character to last character on both lines\n+ *    with a random incement generated in step() method.\n+ * 3. Character index should change as expected and it is relative\n+ *    to the Text node.\n@@ -170,0 +191,33 @@\n+    private void addWrappedTextNodes() {\n+        Util.runAndWait(() -> {\n+            textOne = new Text(\"This is Text This is Text This is Text\");\n+            textOne.setFont(new Font(48));\n+            textTwo = new Text(\"😊💙🦋🏁🔥\");\n+            textTwo.setFont(new Font(48));\n+            textFlow.getChildren().clear();\n+            textFlow.getChildren().setAll(textOne, textTwo);\n+        });\n+    }\n+\n+    private void addMultiLineTextNodes() {\n+        Util.runAndWait(() -> {\n+            textOne = new Text(\"This is Text\\nThis is Text\");\n+            textOne.setFont(new Font(48));\n+            textTwo = new Text(\"😊💙🦋🏁🔥\");\n+            textTwo.setFont(new Font(48));\n+            textFlow.getChildren().clear();\n+            textFlow.getChildren().setAll(textOne, textTwo);\n+        });\n+    }\n+\n+    private void addMultiLineEmojisInTextNodes() {\n+        Util.runAndWait(() -> {\n+            textOne = new Text(\"😊💙🦋🏁🔥\\n😊💙🦋🏁🔥\");\n+            textOne.setFont(new Font(48));\n+            textTwo = new Text(\"This is Text\");\n+            textTwo.setFont(new Font(48));\n+            textFlow.getChildren().clear();\n+            textFlow.getChildren().setAll(textOne, textTwo);\n+        });\n+    }\n+\n@@ -245,3 +299,0 @@\n-            \/\/ System.out.println(\"charIndex: \" + charIndex);\n-            \/\/ System.out.println(\"insertionIndex: \" + insertionIndex);\n-            \/\/ System.out.println(\"isSurrogatePair: \" + isSurrogatePair);\n@@ -260,0 +311,75 @@\n+    @Test\n+    public void testWrappedTextNodesCharIndexEmbeddedInTexFlow() throws Exception {\n+        addWrappedTextNodes();\n+        Util.waitForIdle(scene);\n+\n+        int textOneLength = textOne.getText().length();\n+        int textTwoLength = textTwo.getText().length();\n+        int totalLength = textOneLength + textTwoLength;\n+\n+        for (int y = 0; y < 2; y++) {\n+            double x = 0.0;\n+            while (x < (WIDTH - X_LEADING_OFFSET)) {\n+                moveMouseOverTextFlow(x, (Y_OFFSET + (Y_OFFSET * (y * 2))));\n+                if (isLeading) {\n+                    Assert.assertEquals(charIndex, insertionIndex);\n+                } else if (isSurrogatePair) {\n+                    Assert.assertEquals(charIndex, insertionIndex - 2);\n+                } else {\n+                    Assert.assertEquals(charIndex, insertionIndex - 1);\n+                }\n+                x += step();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testMultiLineTextNodesCharIndexEmbeddedInTexFlow() throws Exception {\n+        addMultiLineTextNodes();\n+        Util.waitForIdle(scene);\n+\n+        int textOneLength = textOne.getText().length();\n+        int textTwoLength = textTwo.getText().length();\n+        int totalLength = textOneLength + textTwoLength;\n+\n+        for (int y = 0; y < 2; y++) {\n+            double x = 0.0;\n+            while (x < (WIDTH - X_LEADING_OFFSET)) {\n+                moveMouseOverTextFlow(x, (Y_OFFSET + (Y_OFFSET * (y * 2))));\n+                if (isLeading) {\n+                    Assert.assertEquals(charIndex, insertionIndex);\n+                } else if (isSurrogatePair) {\n+                    Assert.assertEquals(charIndex, insertionIndex - 2);\n+                } else {\n+                    Assert.assertEquals(charIndex, insertionIndex - 1);\n+                }\n+                x += step();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testMultiLineEmojisCharIndexEmbeddedInTexFlow() throws Exception {\n+        addMultiLineEmojisInTextNodes();\n+        Util.waitForIdle(scene);\n+\n+        int textOneLength = textOne.getText().length();\n+        int textTwoLength = textTwo.getText().length();\n+        int totalLength = textOneLength + textTwoLength;\n+\n+        for (int y = 0; y < 2; y++) {\n+            double x = 0.0;\n+            while (x < (WIDTH - X_LEADING_OFFSET)) {\n+                moveMouseOverTextFlow(x, (Y_OFFSET + (Y_OFFSET * (y * 2))));\n+                if (isLeading) {\n+                    Assert.assertEquals(charIndex, insertionIndex);\n+                } else if (isSurrogatePair) {\n+                    Assert.assertEquals(charIndex, insertionIndex - 2);\n+                } else {\n+                    Assert.assertEquals(charIndex, insertionIndex - 1);\n+                }\n+                x += step();\n+            }\n+        }\n+    }\n+\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TextCharacterIndexTest.java","additions":130,"deletions":4,"binary":false,"changes":134,"status":"modified"}]}