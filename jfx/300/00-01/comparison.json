{"files":[{"patch":"@@ -854,1 +854,0 @@\n-                            validateScrollOffset();\n@@ -856,0 +855,1 @@\n+                        validateScrollOffset();\n@@ -989,0 +989,1 @@\n+            invalidateScrollOffset();\n@@ -996,0 +997,1 @@\n+            invalidateScrollOffset();\n@@ -1003,0 +1005,1 @@\n+            invalidateScrollOffset();\n@@ -2253,0 +2256,1 @@\n+        tabHeaderArea.invalidateScrollOffset();\n@@ -2311,0 +2315,4 @@\n+    void test_setHeaderAreaScrollOffset(double offset) {\n+        tabHeaderArea.setScrollOffset(offset);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TabPaneSkin.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -55,0 +55,5 @@\n+    public static void setHeaderAreaScrollOffset(TabPane tabPane, double offset) {\n+        TabPaneSkin skin = (TabPaneSkin) tabPane.getSkin();\n+        skin.test_setHeaderAreaScrollOffset(offset);\n+    }\n+\n@@ -60,1 +65,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/shims\/java\/javafx\/scene\/control\/skin\/TabPaneSkinShim.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.ArrayList;\n@@ -36,0 +37,1 @@\n+import com.sun.javafx.scene.control.TabObservableList;\n@@ -69,0 +71,143 @@\n+\/\/-------- tests around JDK-8252236\n+\n+    @Test\n+    public void testMoveBySetAll() {\n+        showTabPane();\n+        \/\/ select last for max scrolling\n+        int last = tabPane.getTabs().size() - 1;\n+        tabPane.getSelectionModel().select(last);\n+        Tab selectedTab = tabPane.getSelectionModel().getSelectedItem();\n+        Toolkit.getToolkit().firePulse();\n+        \/\/ move selected tab to first\n+        List<Tab> tabs = new ArrayList<>(tabPane.getTabs());\n+        tabs.remove(selectedTab);\n+        tabs.add(0, selectedTab);\n+        tabPane.getTabs().setAll(tabs);\n+        Toolkit.getToolkit().firePulse();\n+        assertEquals(\"scrolled to leading edge\", 0, getHeaderAreaScrollOffset(tabPane), 1);\n+    }\n+\n+    \/**\n+     * This test passes without the fix, must pass after as well.\n+     *\/\n+    @Test\n+    public void testMoveByTabObservableList() {\n+        showTabPane();\n+        \/\/ select last for max scrolling\n+        int last = tabPane.getTabs().size() - 1;\n+        tabPane.getSelectionModel().select(last);\n+        Tab selectedTab = tabPane.getSelectionModel().getSelectedItem();\n+        Toolkit.getToolkit().firePulse();\n+        \/\/ move selected tab to first\n+        ((TabObservableList<Tab>) tabPane.getTabs()).reorder(selectedTab, tabPane.getTabs().get(0));\n+        Toolkit.getToolkit().firePulse();\n+        assertEquals(\"scrolled to leading edge\", 0, getHeaderAreaScrollOffset(tabPane), 1);\n+    }\n+\n+    \/**\n+     * Scroll to last (by selecting it) -> remove last.\n+     *\n+     * Without fix, fails by not scrolling at all: the gap is increasing every time the\n+     * last selected (after removal that's the previous) is removed.\n+     *\n+     *\/\n+    @Test\n+    public void testRemoveSelectedAsLast() {\n+        showTabPane();\n+        int last = tabPane.getTabs().size() - 1;\n+        Tab secondLastTab = tabPane.getTabs().get(last - 1);\n+        Tab lastTab = tabPane.getTabs().get(last);\n+        \/\/ select for max scroll\n+        tabPane.getSelectionModel().select(last);\n+        Toolkit.getToolkit().firePulse();\n+\n+        \/\/ at this point, the header is scrolled such that the last is at the very right\n+        double scrollOffset = getHeaderAreaScrollOffset(tabPane);\n+        double lastTabOffset = getTabHeaderOffset(tabPane, lastTab);\n+        double secondLastTabOffset = getTabHeaderOffset(tabPane, secondLastTab);\n+        \/\/ expected change in scroll offset\n+        double expectedDelta = lastTabOffset - secondLastTabOffset;\n+\n+        \/\/ remove last (== selected)\n+        tabPane.getTabs().remove(last);\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertEquals(\"scrollOffset adjusted: \", scrollOffset + expectedDelta, getHeaderAreaScrollOffset(tabPane), 1);\n+    }\n+\n+    \/**\n+     * Scroll to last (by selecting it) -> select previous -> remove last.\n+     *\n+     * This test passes without the fix, must pass after as well.\n+     *\/\n+    @Test\n+    public void testRemoveLastIfSelectedIsSecondLast() {\n+        showTabPane();\n+        int last = tabPane.getTabs().size() - 1;\n+        Tab lastTab = tabPane.getTabs().get(last);\n+        int secondLast = last - 1;\n+        Tab secondLastTab = tabPane.getTabs().get(secondLast);\n+\n+        \/\/ select for max scroll\n+        tabPane.getSelectionModel().select(last);\n+        Toolkit.getToolkit().firePulse();\n+\n+        \/\/ at this point, the header is scrolled such that the last is at the very right\n+        double scrollOffset = getHeaderAreaScrollOffset(tabPane);\n+        double lastTabOffest = getTabHeaderOffset(tabPane, lastTab);\n+        double secondeLastTabOffset = getTabHeaderOffset(tabPane, secondLastTab);\n+        \/\/ expected change in scroll offset\n+        double expectedDelta = lastTabOffest - secondeLastTabOffset;\n+\n+        \/\/ select previous tab\n+        tabPane.getSelectionModel().select(secondLast);\n+        Toolkit.getToolkit().firePulse();\n+\n+         \/\/ remove last\n+        tabPane.getTabs().remove(last);\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertEquals(\"scrollOffset adjusted: \", scrollOffset + expectedDelta, getHeaderAreaScrollOffset(tabPane), 1);\n+    }\n+\n+    @Test\n+    public void testRemoveBefore() {\n+        showTabPane();\n+        int selected = 4;\n+        tabPane.getSelectionModel().select(selected);\n+        Tab selectedTab = tabPane.getSelectionModel().getSelectedItem();\n+        Toolkit.getToolkit().firePulse();\n+        \/\/ state before tabs modification\n+        double selectedTabOffset = getTabHeaderOffset(tabPane, selectedTab);\n+        double scrollOffset = getHeaderAreaScrollOffset(tabPane);\n+        assertEquals(\"sanity: tab visible but not scrolled\", 0, scrollOffset, 1);\n+\n+        \/\/ scroll selected to leading edge\n+        setHeaderAreaScrollOffset(tabPane, - selectedTabOffset);\n+        Toolkit.getToolkit().firePulse();\n+        assertEquals(\"sanity: really scrolled\", - selectedTabOffset, getHeaderAreaScrollOffset(tabPane), 1);\n+        tabPane.getTabs().remove(0);\n+        Toolkit.getToolkit().firePulse();\n+        assertEquals(\"scroll offset\", - getTabHeaderOffset(tabPane, selectedTab), getHeaderAreaScrollOffset(tabPane), 1);\n+    }\n+\n+    @Test\n+    public void testAddBefore() {\n+        showTabPane();\n+        int last = tabPane.getTabs().size() - 1;\n+        tabPane.getSelectionModel().select(last);\n+        Tab selectedTab = tabPane.getSelectionModel().getSelectedItem();\n+        Toolkit.getToolkit().firePulse();\n+        \/\/ state before tabs modification\n+        double selectedTabOffset = getTabHeaderOffset(tabPane, selectedTab);\n+        double scrollOffset = getHeaderAreaScrollOffset(tabPane);\n+\n+        Tab added = new Tab(\"added\", new Label(\"added\"));\n+        tabPane.getTabs().add(0, added);\n+        Toolkit.getToolkit().firePulse();\n+        Node addedHeader = getTabHeaderFor(tabPane, added);\n+        double addedWidth = addedHeader.prefWidth(-1);\n+        assertEquals(\"sanity\", selectedTabOffset + addedWidth, getTabHeaderOffset(tabPane, selectedTab), 1);\n+        assertEquals(\"scroll offset\", scrollOffset - addedWidth, getHeaderAreaScrollOffset(tabPane), 1);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TabPaneHeaderScrollTest.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"modified"}]}