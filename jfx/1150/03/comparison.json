{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1120,1 +1120,1 @@\n-                Cell<?> cell = cells.get(i);\n+                T cell = cells.get(i);\n@@ -1164,1 +1164,1 @@\n-                Cell<?> cell = cells.get(i);\n+                T cell = cells.get(i);\n@@ -1954,1 +1954,1 @@\n-    double getCellBreadth(Cell cell) {\n+    double getCellBreadth(T cell) {\n@@ -1994,0 +1994,1 @@\n+        double size = Math.max(getMaxPrefBreadth(), getViewportBreadth());\n@@ -1995,2 +1996,1 @@\n-            double width = Math.max(getMaxPrefBreadth(), getViewportBreadth());\n-            cell.resize(width, fixedCellSizeEnabled ? getFixedCellSize() : Utils.boundedSize(cell.prefHeight(width), cell.minHeight(width), cell.maxHeight(width)));\n+            cell.resize(size, fixedCellSizeEnabled ? getFixedCellSize() : Utils.boundedSize(cell.prefHeight(size), cell.minHeight(size), cell.maxHeight(size)));\n@@ -1998,2 +1998,1 @@\n-            double height = Math.max(getMaxPrefBreadth(), getViewportBreadth());\n-            cell.resize(fixedCellSizeEnabled ? getFixedCellSize() : Utils.boundedSize(cell.prefWidth(height), cell.minWidth(height), cell.maxWidth(height)), height);\n+            cell.resize(fixedCellSizeEnabled ? getFixedCellSize() : Utils.boundedSize(cell.prefWidth(size), cell.minWidth(size), cell.maxWidth(size)), size);\n@@ -2696,3 +2695,0 @@\n-        double size = Math.max(getMaxPrefBreadth(), getViewportBreadth());\n-        boolean isVertical = isVertical();\n-\n@@ -2702,6 +2698,2 @@\n-            Cell<?> cell = cells.get(i);\n-            if (isVertical) {\n-                cell.resize(size, cell.prefHeight(size));\n-            } else {\n-                cell.resize(cell.prefWidth(size), size);\n-            }\n+            T cell = cells.get(i);\n+            resizeCell(cell);\n@@ -2826,1 +2818,1 @@\n-    private boolean doesCellContainFocus(Cell<?> c) {\n+    private boolean doesCellContainFocus(T c) {\n@@ -3073,6 +3065,1 @@\n-            \/\/ if we have a valid cell, we can populate the cache\n-            if (isVertical()) {\n-                answer = cell.getLayoutBounds().getHeight();\n-            } else {\n-                answer = cell.getLayoutBounds().getWidth();\n-            }\n+            answer = getCellLength(cell);\n@@ -3106,1 +3093,1 @@\n-            double newSize = isVertical() ? cell.getLayoutBounds().getHeight() : cell.getLayoutBounds().getWidth();\n+            double newSize = getCellLength(cell);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/VirtualFlow.java","additions":12,"deletions":25,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import static org.junit.Assert.assertNotEquals;\n@@ -1526,0 +1527,111 @@\n+\n+    \/**\n+     * The VirtualFlow should never call the compute height methods when a fixed cell size is set.\n+     *\/\n+    @Test\n+    public void testComputeHeightShouldNotBeCalledWhenFixedCellSizeIsSet() {\n+        int cellSize = 24;\n+\n+        flow = new VirtualFlowShim<>();\n+        flow.setFixedCellSize(cellSize);\n+        flow.setCellFactory(p -> new CellStub(flow) {\n+\n+            @Override\n+            protected double computeMinHeight(double width) {\n+                return 1337;\n+            }\n+\n+            @Override\n+            protected double computeMaxHeight(double width) {\n+                return 1337;\n+            }\n+\n+            @Override\n+            protected double computePrefHeight(double width) {\n+                return 1337;\n+            }\n+        });\n+        flow.setCellCount(100);\n+        flow.resize(cellSize * 10, cellSize * 10);\n+\n+        pulse();\n+        pulse();\n+\n+        for (int i = 0; i < 10; i++) {\n+            IndexedCell<?> cell = flow.getCell(i);\n+            double cellPosition = flow.getCellPosition(cell);\n+            int expectedPosition = i * cellSize;\n+            assertEquals(expectedPosition, cellPosition, 0d);\n+            assertEquals(cellSize, cell.getHeight(), 0d);\n+\n+            assertNotEquals(cellSize, cell.getWidth(), 0d);\n+        }\n+\n+        flow.scrollPixels(cellSize * 10);\n+\n+        for (int i = 10; i < 20; i++) {\n+            IndexedCell<?> cell = flow.getCell(i);\n+            double cellPosition = flow.getCellPosition(cell);\n+            int expectedPosition = (i - 10) * cellSize;\n+            assertEquals(expectedPosition, cellPosition, 0d);\n+            assertEquals(cellSize, cell.getHeight(), 0d);\n+\n+            assertNotEquals(cellSize, cell.getWidth(), 0d);\n+        }\n+    }\n+\n+    \/**\n+     * The VirtualFlow should never call the compute width methods when a fixed cell size is set.\n+     *\/\n+    @Test\n+    public void testComputeWidthShouldNotBeCalledWhenFixedCellSizeIsSet() {\n+        int cellSize = 24;\n+\n+        flow = new VirtualFlowShim<>();\n+        flow.setVertical(false);\n+        flow.setFixedCellSize(cellSize);\n+        flow.setCellFactory(p -> new CellStub(flow) {\n+\n+            @Override\n+            protected double computeMinWidth(double height) {\n+                return 1337;\n+            }\n+\n+            @Override\n+            protected double computeMaxWidth(double height) {\n+                return 1337;\n+            }\n+\n+            @Override\n+            protected double computePrefWidth(double height) {\n+                return 1337;\n+            }\n+        });\n+        flow.setCellCount(100);\n+        flow.resize(cellSize * 10, cellSize * 10);\n+\n+        pulse();\n+        pulse();\n+\n+        for (int i = 0; i < 10; i++) {\n+            IndexedCell<?> cell = flow.getCell(i);\n+            double cellPosition = flow.getCellPosition(cell);\n+            int expectedPosition = i * cellSize;\n+            assertEquals(expectedPosition, cellPosition, 0d);\n+            assertEquals(cellSize, cell.getWidth(), 0d);\n+\n+            assertNotEquals(cellSize, cell.getHeight(), 0d);\n+        }\n+\n+        flow.scrollPixels(cellSize * 10);\n+\n+        for (int i = 10; i < 20; i++) {\n+            IndexedCell<?> cell = flow.getCell(i);\n+            double cellPosition = flow.getCellPosition(cell);\n+            int expectedPosition = (i - 10) * cellSize;\n+            assertEquals(expectedPosition, cellPosition, 0d);\n+            assertEquals(cellSize, cell.getWidth(), 0d);\n+\n+            assertNotEquals(cellSize, cell.getHeight(), 0d);\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/VirtualFlowTest.java","additions":113,"deletions":1,"binary":false,"changes":114,"status":"modified"}]}