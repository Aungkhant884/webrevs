{"files":[{"patch":"@@ -53,1 +53,0 @@\n-import javafx.beans.value.ObservableValue;\n@@ -1204,1 +1203,0 @@\n-    @Override\n@@ -1314,1 +1312,0 @@\n-    @Override\n@@ -1410,87 +1407,0 @@\n-    \/**\n-     * Indicates whether or not this {@code Node} is shown. A node is considered shown if it's\n-     * part of a {@code Scene} that is part of a {@code Window} whose\n-     * {@link Window#showingProperty showing} property is {@code true}. The {@link Node#visibleProperty visibility}\n-     * of the node or its scene does not affect this property.\n-     * <p>\n-     * This property can be used in conjunction with {@link ObservableValue#when} to\n-     * create bindings which are only actively listening to their source when the node is shown.\n-     * <p>\n-     * This property can also be useful to perform actions when the node is shown or no longer\n-     * shown, like starting and stopping animations\n-     *\n-     * @since 20\n-     *\/\n-    private ReadOnlyBooleanProperty shown;\n-\n-    public final boolean isShown() {\n-        if (shown == null) {  \/\/ avoid eager instantiation of property\n-            Scene s = getScene();\n-            if (s == null) return false;\n-            Window w = s.getWindow();\n-            return w != null && w.isShowing();\n-        }\n-\n-        return shown.get();\n-    }\n-\n-    public final ReadOnlyBooleanProperty shownProperty() {\n-        if (shown == null) {\n-            ObservableValue<Boolean> ov = sceneProperty()\n-                .flatMap(Scene::windowProperty)\n-                .flatMap(Window::showingProperty);  \/\/ note: the null case is handled by the delegate with an orElse(false)\n-\n-            shown = new ReadOnlyBooleanDelegate(Node.this, \"shown\", ov);\n-        }\n-\n-        return shown;\n-    }\n-\n-    \/\/ Candidate to make publicly available or to add as a convenience method to ObservableValue\n-    private static class ReadOnlyBooleanDelegate extends ReadOnlyBooleanProperty {\n-        private final ObservableValue<Boolean> delegate;\n-        private final Object bean;\n-        private final String name;\n-\n-        ReadOnlyBooleanDelegate(Object bean, String name, ObservableValue<Boolean> delegate) {\n-            this.bean = bean;\n-            this.name = name;\n-            this.delegate = delegate.orElse(false);\n-        }\n-\n-        @Override\n-        public Object getBean() {\n-            return bean;\n-        }\n-\n-        @Override\n-        public String getName() {\n-            return name;\n-        }\n-\n-        @Override\n-        public void addListener(ChangeListener<? super Boolean> listener) {\n-            delegate.addListener(listener);\n-        }\n-\n-        @Override\n-        public void removeListener(ChangeListener<? super Boolean> listener) {\n-            delegate.removeListener(listener);\n-        }\n-\n-        @Override\n-        public void addListener(InvalidationListener listener) {\n-            delegate.addListener(listener);\n-        }\n-\n-        @Override\n-        public void removeListener(InvalidationListener listener) {\n-            delegate.removeListener(listener);\n-        }\n-\n-        @Override\n-        public boolean get() {\n-            return delegate.getValue();  \/\/ orElse guarantees this is never null\n-        }\n-    }\n-\n@@ -8606,0 +8516,7 @@\n+    private boolean isWindowShowing() {\n+        Scene s = getScene();\n+        if (s == null) return false;\n+        Window w = s.getWindow();\n+        return w != null && w.isShowing();\n+    }\n+\n@@ -8607,1 +8524,1 @@\n-        return isTreeVisible() && isShown();\n+        return isTreeVisible() && isWindowShowing();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":8,"deletions":91,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -1258,57 +1258,0 @@\n-    @Test\n-    public void testIsShowingProperty() {\n-        final Group g = new Group();\n-        final Circle c = new CircleTest.StubCircle(50);\n-\n-        ParentShim.getChildren(g).add(c);\n-\n-        Scene s = new Scene(g);\n-        Stage st = new Stage();\n-\n-        assertFalse(g.isShown());\n-        assertFalse(c.isShown());\n-        assertFalse(g.shownProperty().get());\n-        assertFalse(c.shownProperty().get());\n-\n-        st.show();\n-        st.setScene(s);\n-        SceneShim.scenePulseListener_pulse(s);\n-\n-        assertTrue(g.isShown());\n-        assertTrue(c.isShown());\n-        assertTrue(g.shownProperty().get());\n-        assertTrue(c.shownProperty().get());\n-\n-        g.setVisible(false);  \/\/ irrelevant change for isShown\n-        SceneShim.scenePulseListener_pulse(s);\n-\n-        assertTrue(g.isShown());\n-        assertTrue(c.isShown());\n-        assertTrue(g.shownProperty().get());\n-        assertTrue(c.shownProperty().get());\n-\n-        s.setRoot(new Group());\n-        SceneShim.scenePulseListener_pulse(s);\n-\n-        assertFalse(g.isShown());\n-        assertFalse(c.isShown());\n-        assertFalse(g.shownProperty().get());\n-        assertFalse(c.shownProperty().get());\n-\n-        s.setRoot(g);\n-        SceneShim.scenePulseListener_pulse(s);\n-\n-        assertTrue(g.isShown());\n-        assertTrue(c.isShown());\n-        assertTrue(g.shownProperty().get());\n-        assertTrue(c.shownProperty().get());\n-\n-        st.hide();\n-        SceneShim.scenePulseListener_pulse(s);\n-\n-        assertFalse(g.isShown());\n-        assertFalse(c.isShown());\n-        assertFalse(g.shownProperty().get());\n-        assertFalse(c.shownProperty().get());\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/NodeTest.java","additions":0,"deletions":57,"binary":false,"changes":57,"status":"modified"}]}