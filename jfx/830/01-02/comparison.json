{"files":[{"patch":"@@ -257,5 +257,2 @@\n-     * Returns an {@code ObservableValue} that holds this value whenever the given\n-     * condition evaluates to {@code true}, otherwise holds the last value when\n-     * {@code condition} became {@code false}. The value is updated whenever this\n-     * {@code ObservableValue} changes, unless the condition currently evaluates\n-     * to {@code false}.\n+     * Returns an {@code ObservableValue} that holds this value and is updated only\n+     * when {@code condition} holds {@code true}.\n@@ -263,2 +260,2 @@\n-     * The returned {@code ObservableValue} only observes this value when the given\n-     * {@code condition} evaluates to {@code true}. This allows this {@code ObservableValue}\n+     * The returned {@code ObservableValue} only observes this value when\n+     * {@code condition} holds {@code true}. This allows this {@code ObservableValue}\n@@ -266,1 +263,1 @@\n-     * otherwise strongly referenced when {@code condition} becomes {@code false}.\n+     * otherwise strongly referenced when {@code condition} holds {@code false}.\n@@ -269,3 +266,3 @@\n-     * for garbage collection while source isn't. However, using {@code when} this {@code ObservableValue}\n-     * can still be eligible for garbage collection when the condition is {@code false} and the\n-     * conditional itself is also eligible for garbage collection.\n+     * for garbage collection while its source isn't. However, when using {@code when} this {@code ObservableValue}\n+     * can still be eligible for garbage collection when {@code condition} holds {@code false} and {@code condition}\n+     * itself is also eligible for garbage collection.\n@@ -273,2 +270,1 @@\n-     * Returning {@code null} from the given condition is treated the same as\n-     * returning {@code false}.\n+     * A {@code condition} holding {@code null} is treated as holding {@code false}.\n@@ -279,2 +275,2 @@\n-     * ObservableValue<String> globalProperty = new SimpleStringProperty(\"A\");\n-     * ObservableValue<String> whenProperty = property.when(condition);\n+     * ObservableValue<String> longLivedProperty = new SimpleStringProperty(\"A\");\n+     * ObservableValue<String> whenProperty = longLivedProperty.when(condition);\n@@ -282,1 +278,1 @@\n-     * \/\/ observe whenProperty, which will in turn observe globalProperty\n+     * \/\/ observe whenProperty, which will in turn observe longLivedProperty\n@@ -285,1 +281,1 @@\n-     * globalProperty.setValue(\"B\");  \/\/ \"B\" is printed\n+     * longLivedProperty.setValue(\"B\");  \/\/ \"B\" is printed\n@@ -289,1 +285,1 @@\n-     * \/\/ After condition becomes false, whenProperty stops observing globalProperty; condition\n+     * \/\/ After condition becomes false, whenProperty stops observing longLivedProperty; condition\n@@ -292,2 +288,2 @@\n-     * globalProperty.setValue(\"C\");  \/\/ nothing is printed\n-     * globalProperty.setValue(\"D\");  \/\/ nothing is printed\n+     * longLivedProperty.setValue(\"C\");  \/\/ nothing is printed\n+     * longLivedProperty.setValue(\"D\");  \/\/ nothing is printed\n@@ -295,1 +291,1 @@\n-     * condition.setValue(true);  \/\/ globalProperty is observed again, and \"D\" is printed\n+     * condition.setValue(true);  \/\/ longLivedProperty is observed again, and \"D\" is printed\n@@ -297,1 +293,1 @@\n-     * Another example:\n+     * An example for binding a label's text to a long-lived property only when it is shown:\n@@ -300,4 +296,2 @@\n-     * ObservableValue<String> globalProperty = new SimpleStringProperty(\"A\");\n-     *\n-     * \/\/ bind label's text to a global property only when it is shown:\n-     * label.textProperty().bind(globalProperty.when(label::isShownProperty));\n+     * ObservableValue<String> longLivedProperty = new SimpleStringProperty(\"A\");\n+     * label.textProperty().bind(longLivedProperty.when(label::isShownProperty));\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/ObservableValue.java","additions":20,"deletions":26,"binary":false,"changes":46,"status":"modified"}]}