{"files":[{"patch":"@@ -1409,7 +1409,10 @@\n-     * Whether or not this {@code Node} is showing (that is, it is part of an\n-     * open Window on the user's system). The Window might be \"showing\", yet the user might not\n-     * be able to see it due to the Window being rendered behind another Window\n-     * or due to the Window being positioned off the monitor.\n-     *\n-     * <p>Note that the {@code Node} does not need to be visible for this property\n-     * to be {@code true}.\n+     * Indicates whether or not this {@code Node} is shown. A node is considered shown if it's\n+     * part of a {@code Scene} which is part of a {@code Window} whose\n+     * {@link shown #Window::showingProperty} is {@code true}. The {@link visibility #visibleProperty}\n+     * of the node or its scene do not affect this property.\n+     * <p>\n+     * This property can be used in conjunction with {@link ObservableValue#when} to\n+     * create bindings which are only actively listening to their source when the node is shown.\n+     * <p>\n+     * This property can also be used to start animations when the node is shown, and to stop them\n+     * when it is no longer shown.\n@@ -1417,1 +1420,1 @@\n-     * @defaultValue false\n+     * @see ObservableValue#when(ObservableValue)\n@@ -1433,1 +1436,1 @@\n-                .flatMap(Window::showingProperty);\n+                .flatMap(Window::showingProperty);  \/\/ note: the null case is handled by the delegate with an orElse(false)\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1282,1 +1282,1 @@\n-        g.setVisible(false);  \/\/ irrelevant change for isShowing\n+        g.setVisible(false);  \/\/ irrelevant change for isShown\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/NodeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}