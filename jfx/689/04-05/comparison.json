{"files":[{"patch":"@@ -46,0 +46,2 @@\n+import java.lang.ref.WeakReference;\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -848,0 +850,20 @@\n+    @Test\n+    public void testListBindingPrematureCollection() {\n+        ListProperty<Object> listB = new SimpleListProperty<>(FXCollections.observableArrayList());\n+        AtomicReference<WeakReference<ListProperty<Object>>> listAW = new AtomicReference<>(null);\n+\n+        JMemoryBuddy.memoryTest( checker -> {\n+            ListProperty<Object> listA = new SimpleListProperty<>(FXCollections.observableArrayList());\n+            listAW.set(new WeakReference<>(listA));\n+            listB.bind(listA);\n+            \/\/ Ensure that the list we are binding to still remains\n+            checker.setAsReferenced(listB);\n+            checker.assertNotCollectable(listA);\n+        });\n+\n+        \/\/ ensure that the Binding still works after GC triggered by JMemoryBuddy\n+        listAW.get().get().setAll(1);\n+        assertEquals(\"Binding stopped working after GC\", 1, listB.getValue().get(0));\n+    }\n+\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ListPropertyBaseTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+import java.lang.ref.WeakReference;\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -819,0 +821,20 @@\n+\n+    @Test\n+    public void testMapBindingPrematureCollection() {\n+        MapProperty<Object, Object> mapB = new SimpleMapProperty<>(FXCollections.observableMap(new HashMap<Object,Object>()));\n+        AtomicReference<WeakReference<MapProperty<Object, Object>>> mapAW = new AtomicReference<>(null);\n+\n+        JMemoryBuddy.memoryTest( checker -> {\n+            MapProperty<Object, Object> mapA = new SimpleMapProperty<>(FXCollections.observableMap(new HashMap<Object,Object>()));\n+            mapAW.set(new WeakReference<>(mapA));\n+            mapB.bind(mapA);\n+            \/\/ Ensure that the map we are binding to still remains\n+            checker.setAsReferenced(mapB);\n+            checker.assertNotCollectable(mapA);\n+        });\n+\n+        \/\/ ensure that the Binding still works after GC triggered by JMemoryBuddy\n+        mapAW.get().get().put(1,1);\n+        assertEquals(\"Binding stopped working after GC\", 1, mapB.getValue().get(1));\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/MapPropertyBaseTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import java.lang.ref.WeakReference;\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -755,0 +757,20 @@\n+\n+    @Test\n+    public void testSetBindingPrematureCollection() {\n+        SetProperty<Object> setB = new SimpleSetProperty<>(FXCollections.observableSet());\n+        AtomicReference<WeakReference<SetProperty<Object>>> setAW = new AtomicReference<>(null);\n+\n+        JMemoryBuddy.memoryTest( checker -> {\n+            SetProperty<Object> setA = new SimpleSetProperty<>(FXCollections.observableSet());\n+            setAW.set(new WeakReference<>(setA));\n+            setB.bind(setA);\n+            \/\/ Ensure that the set we are binding to still remains\n+            checker.setAsReferenced(setB);\n+            checker.assertNotCollectable(setA);\n+        });\n+\n+        \/\/ ensure that the Binding still works after GC triggered by JMemoryBuddy\n+        setAW.get().get().add(1);\n+        assertTrue(\"Binding stopped working after GC\", setB.contains(1));\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SetPropertyBaseTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}