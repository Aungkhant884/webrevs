{"files":[{"patch":"@@ -54,5 +54,1 @@\n-    private final ListChangeListener<E> listChangeListener = change -> {\n-        invalidateProperties();\n-        invalidated();\n-        fireValueChangedEvent(change);\n-    };\n+    private final ListChangeListener<E> listChangeListener = new BaseChangeListener<>(this);\n@@ -277,1 +273,1 @@\n-                listener = new Listener<>(this);\n+                listener = new BaseInvalidationListener<>(this);\n@@ -322,1 +318,1 @@\n-    private static class Listener<E> implements InvalidationListener, WeakListener {\n+    private static class BaseChangeListener<E> extends WeakReference<ListPropertyBase<E>> implements ListChangeListener<E>, WeakListener {\n@@ -324,1 +320,21 @@\n-        private final WeakReference<ListPropertyBase<E>> wref;\n+        BaseChangeListener(ListPropertyBase<E> ref) {\n+            super(ref);\n+        }\n+\n+        @Override\n+        public boolean wasGarbageCollected() {\n+            return get() == null;\n+        }\n+\n+        @Override\n+        public void onChanged(Change<? extends E> change) {\n+            ListPropertyBase<E> ref = get();\n+            if(ref != null) {\n+                ref.invalidateProperties();\n+                ref.invalidated();\n+                ref.fireValueChangedEvent(change);\n+            }\n+        }\n+    }\n+\n+    private static class BaseInvalidationListener<E> extends WeakReference<ListPropertyBase<E>> implements InvalidationListener, WeakListener {\n@@ -327,1 +343,1 @@\n-            this.wref = new WeakReference<ListPropertyBase<E>>(ref);\n+            super(ref);\n@@ -332,1 +348,1 @@\n-            ListPropertyBase<E> ref = wref.get();\n+            ListPropertyBase<E> ref = get();\n@@ -342,1 +358,1 @@\n-            return wref.get() == null;\n+            return get() == null;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ListPropertyBase.java","additions":27,"deletions":11,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -54,5 +54,1 @@\n-    private final MapChangeListener<K, V> mapChangeListener = change -> {\n-        invalidateProperties();\n-        invalidated();\n-        fireValueChangedEvent(change);\n-    };\n+    private final MapChangeListener<K, V> mapChangeListener = new BaseChangeListener<>(this);\n@@ -278,1 +274,1 @@\n-                listener = new Listener<>(this);\n+                listener = new BaseInvalidationListener<>(this);\n@@ -323,1 +319,1 @@\n-    private static class Listener<K,V> implements InvalidationListener, WeakListener {\n+    private static class BaseChangeListener<K,V> extends WeakReference<MapPropertyBase<K,V>> implements MapChangeListener<K,V>, WeakListener {\n@@ -325,1 +321,21 @@\n-        private final WeakReference<MapPropertyBase<K,V>> wref;\n+        BaseChangeListener(MapPropertyBase<K,V> ref) {\n+            super(ref);\n+        }\n+\n+        @Override\n+        public boolean wasGarbageCollected() {\n+            return get() == null;\n+        }\n+\n+        @Override\n+        public void onChanged(Change<? extends K, ? extends V> change) {\n+            MapPropertyBase<K,V> ref = get();\n+            if(ref != null) {\n+                ref.invalidateProperties();\n+                ref.invalidated();\n+                ref.fireValueChangedEvent(change);\n+            }\n+        }\n+    }\n+\n+    private static class BaseInvalidationListener<K,V> extends WeakReference<MapPropertyBase<K,V>> implements InvalidationListener, WeakListener {\n@@ -327,2 +343,2 @@\n-        public Listener(MapPropertyBase<K,V> ref) {\n-            this.wref = new WeakReference<>(ref);\n+        public BaseInvalidationListener(MapPropertyBase<K,V> ref) {\n+            super(ref);\n@@ -333,1 +349,1 @@\n-            MapPropertyBase<K,V> ref = wref.get();\n+            MapPropertyBase<K,V> ref = get();\n@@ -343,1 +359,1 @@\n-            return wref.get() == null;\n+            return get() == null;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/MapPropertyBase.java","additions":28,"deletions":12,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import javafx.collections.ListChangeListener;\n@@ -54,5 +55,1 @@\n-    private final SetChangeListener<E> setChangeListener = change -> {\n-        invalidateProperties();\n-        invalidated();\n-        fireValueChangedEvent(change);\n-    };\n+    private final SetChangeListener<E> setChangeListener = new BaseChangeListener(this);\n@@ -279,1 +276,1 @@\n-                listener = new Listener<>(this);\n+                listener = new BaseInvalidationListener<>(this);\n@@ -324,1 +321,1 @@\n-    private static class Listener<E> implements InvalidationListener, WeakListener {\n+    private static class BaseChangeListener<E> extends WeakReference<SetPropertyBase<E>> implements SetChangeListener<E>, WeakListener {\n@@ -326,1 +323,21 @@\n-        private final WeakReference<SetPropertyBase<E>> wref;\n+        BaseChangeListener(SetPropertyBase<E> ref) {\n+            super(ref);\n+        }\n+\n+        @Override\n+        public boolean wasGarbageCollected() {\n+            return get() == null;\n+        }\n+\n+        @Override\n+        public void onChanged(Change<? extends E> change) {\n+            SetPropertyBase<E> ref = get();\n+            if(ref != null) {\n+                ref.invalidateProperties();\n+                ref.invalidated();\n+                ref.fireValueChangedEvent(change);\n+            }\n+        }\n+    }\n+\n+    private static class BaseInvalidationListener<E> extends WeakReference<SetPropertyBase<E>> implements InvalidationListener, WeakListener {\n@@ -328,2 +345,2 @@\n-        public Listener(SetPropertyBase<E> ref) {\n-            this.wref = new WeakReference<SetPropertyBase<E>>(ref);\n+        public BaseInvalidationListener(SetPropertyBase<E> ref) {\n+            super(ref);\n@@ -334,1 +351,1 @@\n-            SetPropertyBase<E> ref = wref.get();\n+            SetPropertyBase<E> ref = get();\n@@ -344,1 +361,1 @@\n-            return wref.get() == null;\n+            return get() == null;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/SetPropertyBase.java","additions":29,"deletions":12,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import test.util.memory.JMemoryBuddy;\n@@ -817,0 +818,19 @@\n+    @Test\n+    public void testBindingLeak() {\n+        JMemoryBuddy.memoryTest(checker -> {\n+            \/\/ given\n+            System.out.println(\"Start collection: \" + FXCollections.observableArrayList());\n+            ListProperty<Object> listA = new SimpleListProperty<>(FXCollections.observableArrayList());\n+            ListProperty<Object> listB = new SimpleListProperty<>(FXCollections.observableArrayList());\n+\n+            listB.bind(listA);\n+\n+            \/\/ when\n+            listB.unbind();\n+\n+            \/\/ then\n+            checker.setAsReferenced(listB);\n+            checker.assertCollectable(listA);\n+        });\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ListPropertyBaseTest.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import test.util.memory.JMemoryBuddy;\n@@ -788,0 +789,19 @@\n+    @Test\n+    public void testBindingLeak() {\n+        JMemoryBuddy.memoryTest(checker -> {\n+            \/\/ given\n+            System.out.println(\"Start collection: \" + FXCollections.observableArrayList());\n+            MapProperty<Object, Object> listA = new SimpleMapProperty<>(FXCollections.observableHashMap());\n+            MapProperty<Object, Object> listB = new SimpleMapProperty<>(FXCollections.observableHashMap());\n+\n+            listB.bind(listA);\n+\n+            \/\/ when\n+            listB.unbind();\n+\n+            \/\/ then\n+            checker.setAsReferenced(listB);\n+            checker.assertCollectable(listA);\n+        });\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/MapPropertyBaseTest.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n+import test.util.memory.JMemoryBuddy;\n+\n@@ -723,0 +725,19 @@\n+    @Test\n+    public void testBindingLeak() {\n+        JMemoryBuddy.memoryTest(checker -> {\n+            \/\/ given\n+            System.out.println(\"Start collection: \" + FXCollections.observableArrayList());\n+            SetProperty<Object> listA = new SimpleSetProperty<>(FXCollections.observableSet(new HashSet()));\n+            SetProperty<Object> listB = new SimpleSetProperty<>(FXCollections.observableSet(new HashSet()));\n+\n+            listB.bind(listA);\n+\n+            \/\/ when\n+            listB.unbind();\n+\n+            \/\/ then\n+            checker.setAsReferenced(listB);\n+            checker.assertCollectable(listA);\n+        });\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SetPropertyBaseTest.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"}]}