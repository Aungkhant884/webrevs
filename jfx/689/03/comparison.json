{"files":[{"patch":"@@ -54,5 +54,1 @@\n-    private final ListChangeListener<E> listChangeListener = change -> {\n-        invalidateProperties();\n-        invalidated();\n-        fireValueChangedEvent(change);\n-    };\n+    private final Listener<E> listener = new Listener<>(this);\n@@ -62,1 +58,0 @@\n-    private InvalidationListener listener = null;\n@@ -83,1 +78,1 @@\n-            initialValue.addListener(listChangeListener);\n+            initialValue.addListener((ListChangeListener) listener);\n@@ -216,1 +211,1 @@\n-                oldValue.removeListener(listChangeListener);\n+                oldValue.removeListener((ListChangeListener) listener);\n@@ -243,1 +238,1 @@\n-                value.addListener(listChangeListener);\n+                value.addListener((ListChangeListener) listener);\n@@ -276,4 +271,1 @@\n-            if (listener == null) {\n-                listener = new Listener<>(this);\n-            }\n-            observable.addListener(listener);\n+            observable.addListener((InvalidationListener) listener);\n@@ -322,1 +314,1 @@\n-    private static class Listener<E> implements InvalidationListener, WeakListener {\n+    private static class Listener<E> extends WeakReference<ListPropertyBase<E>> implements InvalidationListener, ListChangeListener<E>, WeakListener {\n@@ -324,1 +316,3 @@\n-        private final WeakReference<ListPropertyBase<E>> wref;\n+        Listener(ListPropertyBase<E> ref) {\n+            super(ref);\n+        }\n@@ -326,2 +320,3 @@\n-        public Listener(ListPropertyBase<E> ref) {\n-            this.wref = new WeakReference<ListPropertyBase<E>>(ref);\n+        @Override\n+        public boolean wasGarbageCollected() {\n+            return get() == null;\n@@ -332,1 +327,1 @@\n-            ListPropertyBase<E> ref = wref.get();\n+            ListPropertyBase<E> ref = get();\n@@ -341,2 +336,7 @@\n-        public boolean wasGarbageCollected() {\n-            return wref.get() == null;\n+        public void onChanged(Change<? extends E> change) {\n+            ListPropertyBase<E> ref = get();\n+            if (ref != null) {\n+                ref.invalidateProperties();\n+                ref.invalidated();\n+                ref.fireValueChangedEvent(change);\n+            }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ListPropertyBase.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -54,5 +54,1 @@\n-    private final MapChangeListener<K, V> mapChangeListener = change -> {\n-        invalidateProperties();\n-        invalidated();\n-        fireValueChangedEvent(change);\n-    };\n+    private final Listener<K, V> listener = new Listener<>(this);\n@@ -62,1 +58,0 @@\n-    private InvalidationListener listener = null;\n@@ -83,1 +78,1 @@\n-            initialValue.addListener(mapChangeListener);\n+            initialValue.addListener((MapChangeListener) listener);\n@@ -218,1 +213,1 @@\n-                oldValue.removeListener(mapChangeListener);\n+                oldValue.removeListener((MapChangeListener) listener);\n@@ -245,1 +240,1 @@\n-                value.addListener(mapChangeListener);\n+                value.addListener((MapChangeListener) listener);\n@@ -277,4 +272,1 @@\n-            if (listener == null) {\n-                listener = new Listener<>(this);\n-            }\n-            observable.addListener(listener);\n+            observable.addListener((InvalidationListener) listener);\n@@ -323,1 +315,1 @@\n-    private static class Listener<K,V> implements InvalidationListener, WeakListener {\n+    private static class Listener<K,V> extends WeakReference<MapPropertyBase<K,V>> implements InvalidationListener, MapChangeListener<K,V>, WeakListener {\n@@ -325,1 +317,3 @@\n-        private final WeakReference<MapPropertyBase<K,V>> wref;\n+        Listener(MapPropertyBase<K,V> ref) {\n+            super(ref);\n+        }\n@@ -327,2 +321,3 @@\n-        public Listener(MapPropertyBase<K,V> ref) {\n-            this.wref = new WeakReference<>(ref);\n+        @Override\n+        public boolean wasGarbageCollected() {\n+            return get() == null;\n@@ -333,1 +328,1 @@\n-            MapPropertyBase<K,V> ref = wref.get();\n+            MapPropertyBase<K,V> ref = get();\n@@ -342,2 +337,7 @@\n-        public boolean wasGarbageCollected() {\n-            return wref.get() == null;\n+        public void onChanged(Change<? extends K, ? extends V> change) {\n+            MapPropertyBase<K,V> ref = get();\n+            if (ref != null) {\n+                ref.invalidateProperties();\n+                ref.invalidated();\n+                ref.fireValueChangedEvent(change);\n+            }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/MapPropertyBase.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import javafx.collections.ListChangeListener;\n@@ -54,5 +55,1 @@\n-    private final SetChangeListener<E> setChangeListener = change -> {\n-        invalidateProperties();\n-        invalidated();\n-        fireValueChangedEvent(change);\n-    };\n+    private final Listener<E> listener = new Listener(this);\n@@ -62,1 +59,0 @@\n-    private InvalidationListener listener = null;\n@@ -83,1 +79,1 @@\n-            initialValue.addListener(setChangeListener);\n+            initialValue.addListener((SetChangeListener) listener);\n@@ -218,1 +214,1 @@\n-                oldValue.removeListener(setChangeListener);\n+                oldValue.removeListener((SetChangeListener) listener);\n@@ -245,1 +241,1 @@\n-                value.addListener(setChangeListener);\n+                value.addListener((SetChangeListener) listener);\n@@ -278,4 +274,1 @@\n-            if (listener == null) {\n-                listener = new Listener<>(this);\n-            }\n-            observable.addListener(listener);\n+            observable.addListener((InvalidationListener) listener);\n@@ -290,1 +283,1 @@\n-            observable.removeListener(listener);\n+            observable.removeListener((InvalidationListener) listener);\n@@ -324,1 +317,1 @@\n-    private static class Listener<E> implements InvalidationListener, WeakListener {\n+    private static class Listener<E> extends WeakReference<SetPropertyBase<E>> implements InvalidationListener, SetChangeListener<E>, WeakListener {\n@@ -326,1 +319,3 @@\n-        private final WeakReference<SetPropertyBase<E>> wref;\n+        Listener(SetPropertyBase<E> ref) {\n+            super(ref);\n+        }\n@@ -328,2 +323,3 @@\n-        public Listener(SetPropertyBase<E> ref) {\n-            this.wref = new WeakReference<SetPropertyBase<E>>(ref);\n+        @Override\n+        public boolean wasGarbageCollected() {\n+            return get() == null;\n@@ -334,1 +330,1 @@\n-            SetPropertyBase<E> ref = wref.get();\n+            SetPropertyBase<E> ref = get();\n@@ -343,2 +339,7 @@\n-        public boolean wasGarbageCollected() {\n-            return wref.get() == null;\n+        public void onChanged(Change<? extends E> change) {\n+            SetPropertyBase<E> ref = get();\n+            if (ref != null) {\n+                ref.invalidateProperties();\n+                ref.invalidated();\n+                ref.fireValueChangedEvent(change);\n+            }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/SetPropertyBase.java","additions":22,"deletions":21,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import test.util.memory.JMemoryBuddy;\n@@ -817,0 +818,19 @@\n+    @Test\n+    public void testBindingLeak() {\n+        JMemoryBuddy.memoryTest(checker -> {\n+            \/\/ given\n+            System.out.println(\"Start collection: \" + FXCollections.observableArrayList());\n+            ListProperty<Object> listA = new SimpleListProperty<>(FXCollections.observableArrayList());\n+            ListProperty<Object> listB = new SimpleListProperty<>(FXCollections.observableArrayList());\n+\n+            listB.bind(listA);\n+\n+            \/\/ when\n+            listB.unbind();\n+\n+            \/\/ then\n+            checker.setAsReferenced(listB);\n+            checker.assertCollectable(listA);\n+        });\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ListPropertyBaseTest.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import test.util.memory.JMemoryBuddy;\n@@ -788,0 +789,19 @@\n+    @Test\n+    public void testBindingLeak() {\n+        JMemoryBuddy.memoryTest(checker -> {\n+            \/\/ given\n+            System.out.println(\"Start collection: \" + FXCollections.observableArrayList());\n+            MapProperty<Object, Object> listA = new SimpleMapProperty<>(FXCollections.observableHashMap());\n+            MapProperty<Object, Object> listB = new SimpleMapProperty<>(FXCollections.observableHashMap());\n+\n+            listB.bind(listA);\n+\n+            \/\/ when\n+            listB.unbind();\n+\n+            \/\/ then\n+            checker.setAsReferenced(listB);\n+            checker.assertCollectable(listA);\n+        });\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/MapPropertyBaseTest.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n+import test.util.memory.JMemoryBuddy;\n+\n@@ -723,0 +725,19 @@\n+    @Test\n+    public void testBindingLeak() {\n+        JMemoryBuddy.memoryTest(checker -> {\n+            \/\/ given\n+            System.out.println(\"Start collection: \" + FXCollections.observableArrayList());\n+            SetProperty<Object> listA = new SimpleSetProperty<>(FXCollections.observableSet(new HashSet()));\n+            SetProperty<Object> listB = new SimpleSetProperty<>(FXCollections.observableSet(new HashSet()));\n+\n+            listB.bind(listA);\n+\n+            \/\/ when\n+            listB.unbind();\n+\n+            \/\/ then\n+            checker.setAsReferenced(listB);\n+            checker.assertCollectable(listA);\n+        });\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SetPropertyBaseTest.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"}]}