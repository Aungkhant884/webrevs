{"files":[{"patch":"@@ -144,1 +144,1 @@\n-            void shouldCallDownstreamMapFunctionOnlyWhenAbsolutelyNecessary() {\n+            void shouldCallDownstreamMapFunctionOnlyWhenAbsolutelyNeeded() {\n@@ -193,1 +193,1 @@\n-            void shouldCallDownstreamMapFunctionOnlyWhenAbsolutelyNecessary() {\n+            void shouldCallDownstreamMapFunctionOnlyWhenAbsolutelyNeeded() {\n@@ -260,1 +260,3 @@\n-                when.getValue();  \/\/ would make no difference, inactive when bindings are always valid\n+                \/\/ would make no difference, inactive \"when\" bindings are always valid\n+                when.getValue();\n+\n@@ -265,1 +267,2 @@\n-                condition.set(true);  \/\/ as inactive when's are always valid, when it becomes active and the value has changed, it must invalidate\n+                \/\/ as inactive \"when\"'s are always valid, when it becomes active and the value has changed, it must invalidate\n+                condition.set(true);\n@@ -273,1 +276,2 @@\n-                property.get();  \/\/ should not matter, as it is the observable resulting from when that isn't valid\n+                \/\/ should not matter, as it is the observable resulting from \"when\" that isn't valid\n+                property.get();\n@@ -278,1 +282,2 @@\n-                when.getValue();  \/\/ this will make the when valid, and so we can expect a new invalidation\n+                \/\/ this will make the \"when\" valid, and so we can expect a new invalidation\n+                when.getValue();\n@@ -283,1 +288,2 @@\n-                condition.set(false);  \/\/ this will make the when valid (it is always valid when inactive), but it can't change now\n+                \/\/ this will make the \"when\" valid (it is always valid when inactive), but it can't change now\n+                condition.set(false);\n@@ -291,1 +297,2 @@\n-                condition.set(true);  \/\/ when becoming active again, it was valid, and it has changed, so expect invalidation\n+                \/\/ when becoming active again, it was valid, and it has changed, so expect invalidation\n+                condition.set(true);\n@@ -320,1 +327,2 @@\n-                property.get();  \/\/ should not matter, as it is the observable resulting from when that isn't valid\n+                \/\/ should not matter, as it is the observable resulting from \"when\" that isn't valid\n+                property.get();\n@@ -325,1 +333,2 @@\n-                when.getValue();  \/\/ this will make the when valid, and so we can expect a new invalidation\n+                \/\/ this will make the \"when\" valid, and so we can expect a new invalidation\n+                when.getValue();\n@@ -330,1 +339,2 @@\n-                condition.set(false);  \/\/ this will make the when valid (it is always valid when inactive), but it can't change now\n+                \/\/ this will make the \"when\" valid (it is always valid when inactive), but it can't change now\n+                condition.set(false);\n@@ -338,1 +348,2 @@\n-                when.getValue();  \/\/ would make no difference, inactive when bindings are always valid\n+                \/\/ would make no difference, inactive \"when\" bindings are always valid\n+                when.getValue();\n@@ -343,1 +354,2 @@\n-                condition.set(true);  \/\/ when becoming active again, it was valid, and it has changed, so expect invalidation\n+                \/\/ when becoming active again, it was valid, and it has changed, so expect invalidation\n+                condition.set(true);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/ObservableValueWhenTest.java","additions":25,"deletions":13,"binary":false,"changes":38,"status":"modified"}]}