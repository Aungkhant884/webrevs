{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -202,1 +202,1 @@\n-        if (!value.isBound()) {\n+        if (valueConverter != null && !value.isBound()) {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TextFormatter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,0 +64,1 @@\n+import javafx.util.converter.IntegerStringConverter;\n@@ -477,0 +478,74 @@\n+    @Test\n+    public void testTextFormatterWithFilter() {\n+        txtField.setText(\"abc\");\n+        txtField.setTextFormatter(new TextFormatter<>(this::upperCase));\n+        assertEquals(\"abc\", txtField.getText());\n+\n+        \/\/ Set text again to trigger the text formatter filter.\n+        txtField.setText(\"abc\");\n+        assertEquals(\"ABC\", txtField.getText());\n+    }\n+\n+    @Test\n+    public void testTextFormatterWithConverter() {\n+        txtField.setText(\"200\");\n+        txtField.setTextFormatter(new TextFormatter<>(new IntegerStringConverter() {\n+            @Override\n+            public Integer fromString(String value) {\n+                \/\/ Converter to integer and add 100.\n+                return super.fromString(value) + 100;\n+            }\n+        }));\n+        \/\/ No default value -> text is cleared.\n+        assertEquals(\"\", txtField.getText());\n+\n+        txtField.setText(\"500\");\n+        assertEquals(\"600\", txtField.getText());\n+    }\n+\n+    @Test\n+    public void testTextFormatterWithConverterAndDefaultValue() {\n+        txtField.setText(\"200\");\n+        txtField.setTextFormatter(new TextFormatter<>(new IntegerStringConverter() {\n+            @Override\n+            public Integer fromString(String value) {\n+                \/\/ Converter to integer and add 100.\n+                return super.fromString(value) + 100;\n+            }\n+        }, 1000));\n+        \/\/ Default value is set as text.\n+        assertEquals(\"1000\", txtField.getText());\n+\n+        txtField.setText(\"500\");\n+        assertEquals(\"600\", txtField.getText());\n+    }\n+\n+    @Test\n+    public void testTextFormatterWithConverterAndFilter() {\n+        txtField.setText(\"200\");\n+        txtField.setTextFormatter(new TextFormatter<>(new IntegerStringConverter() {\n+            @Override\n+            public Integer fromString(String value) {\n+                \/\/ Converter to integer and add 100.\n+                return super.fromString(value) + 100;\n+            }\n+        }, 1000, change -> {\n+            change.setText(change.getText().replace(\"3\", \"\"));\n+            return change;\n+        }));\n+        \/\/ Default value is set as text.\n+        assertEquals(\"1000\", txtField.getText());\n+\n+        txtField.setText(\"500\");\n+        assertEquals(\"600\", txtField.getText());\n+\n+        \/\/ 3 is removed, therefore we get 100. The value converter above will then add 100 (=200).\n+        txtField.setText(\"1300\");\n+        assertEquals(\"200\", txtField.getText());\n+    }\n+\n+    private Change upperCase(Change change) {\n+        change.setText(change.getText().toUpperCase());\n+        return change;\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TextFieldTest.java","additions":76,"deletions":1,"binary":false,"changes":77,"status":"modified"}]}