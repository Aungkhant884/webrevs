{"files":[{"patch":"@@ -122,1 +122,1 @@\n-    private static final HashMap<Signature, ImageLoaderFactory> loaderFactoriesBySignature;\n+    private final HashMap<Signature, ImageLoaderFactory> loaderFactoriesBySignature;\n@@ -126,2 +126,4 @@\n-    private static final HashMap<String, ImageLoaderFactory> loaderFactoriesByMimeSubtype;\n-    private static final ImageLoaderFactory[] loaderFactories;\n+    private final HashMap<String, ImageLoaderFactory> loaderFactoriesByMimeSubtype;\n+    private final ImageLoaderFactory[] loaderFactories;\n+    private int maxSignatureLength;\n+\n@@ -130,1 +132,7 @@\n-    private static int maxSignatureLength;\n+    private static class InstanceHolder {\n+        static final ImageStorage INSTANCE = new ImageStorage();\n+    }\n+\n+    public static ImageStorage getInstance() {\n+        return InstanceHolder.INSTANCE;\n+    }\n@@ -132,1 +140,1 @@\n-    static {\n+    public ImageStorage() {\n@@ -158,1 +166,1 @@\n-    public static ImageFormatDescription[] getSupportedDescriptions() {\n+    public ImageFormatDescription[] getSupportedDescriptions() {\n@@ -172,1 +180,1 @@\n-    public static int getNumBands(ImageType type) {\n+    public int getNumBands(ImageType type) {\n@@ -206,1 +214,1 @@\n-    public static void addImageLoaderFactory(ImageLoaderFactory factory) {\n+    public void addImageLoaderFactory(ImageLoaderFactory factory) {\n@@ -268,1 +276,1 @@\n-    public static ImageFrame[] loadAll(InputStream input, ImageLoadListener listener,\n+    public ImageFrame[] loadAll(InputStream input, ImageLoadListener listener,\n@@ -303,1 +311,1 @@\n-    public static ImageFrame[] loadAll(String input, ImageLoadListener listener,\n+    public ImageFrame[] loadAll(String input, ImageLoadListener listener,\n@@ -406,1 +414,1 @@\n-    private static synchronized int getMaxSignatureLength() {\n+    private synchronized int getMaxSignatureLength() {\n@@ -421,1 +429,1 @@\n-    private static ImageFrame[] loadAll(ImageLoader loader,\n+    private ImageFrame[] loadAll(ImageLoader loader,\n@@ -478,1 +486,1 @@\n-    private static ImageLoader getLoaderBySignature(InputStream stream, ImageLoadListener listener) throws IOException {\n+    private ImageLoader getLoaderBySignature(InputStream stream, ImageLoadListener listener) throws IOException {\n@@ -480,1 +488,3 @@\n-        ImageTools.readFully(stream, header);\n+        if (stream.read(header) <= 0) {\n+            return null;\n+        }\n@@ -499,3 +509,0 @@\n-\n-    private ImageStorage() {\n-    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/ImageStorage.java","additions":24,"deletions":17,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -700,1 +700,1 @@\n-        int numBands = ImageStorage.getNumBands(src.getImageType());\n+        int numBands = ImageStorage.getInstance().getNumBands(src.getImageType());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/common\/ImageTools.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-                                ImageStorage.getSupportedDescriptions();\n+                                ImageStorage.getInstance().getSupportedDescriptions();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/PixelUtils.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-                ImageStorage.loadAll(url, listener, w, h, preserveRatio, pixelScale, smooth);\n+                ImageStorage.getInstance().loadAll(url, listener, w, h, preserveRatio, pixelScale, smooth);\n@@ -142,1 +142,1 @@\n-                ImageStorage.loadAll(stream, listener, w, h, preserveRatio, 1.0f, smooth);\n+                ImageStorage.getInstance().loadAll(stream, listener, w, h, preserveRatio, 1.0f, smooth);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/PrismImageLoader2.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-                    ImageStorage.loadAll(path, null, 0, 0, true, pixelScale, true);\n+                    new ImageStorage().loadAll(path, null, 0, 0, true, pixelScale, true);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/iio\/ImageHiDPITest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-            ImageStorage.loadAll(stream, null, width, height, false, 1.0f, false);\n+            new ImageStorage().loadAll(stream, null, width, height, false, 1.0f, false);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/iio\/ImageLoaderScalingTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.iio.ImageFormatDescription;\n@@ -29,0 +30,2 @@\n+import com.sun.javafx.iio.ImageLoader;\n+import com.sun.javafx.iio.ImageLoaderFactory;\n@@ -31,0 +34,1 @@\n+import com.sun.javafx.iio.common.ImageLoaderImpl;\n@@ -39,0 +43,1 @@\n+import java.nio.ByteBuffer;\n@@ -40,0 +45,2 @@\n+import java.util.Collections;\n+import java.util.List;\n@@ -50,1 +57,1 @@\n-        assertNotNull(ImageStorage.loadAll(path, null, 0, 0, true, 2.0f, true));\n+        assertNotNull(new ImageStorage().loadAll(path, null, 0, 0, true, 2.0f, true));\n@@ -77,1 +84,1 @@\n-        ImageFrame[] frames = ImageStorage.loadAll(path, null, 0, 0, true, 1.0f, true);\n+        ImageFrame[] frames = new ImageStorage().loadAll(path, null, 0, 0, true, 1.0f, true);\n@@ -84,1 +91,1 @@\n-        ImageFrame[] frames = ImageStorage.loadAll(path, null, 0, 0, true, 1.0f, true);\n+        ImageFrame[] frames = new ImageStorage().loadAll(path, null, 0, 0, true, 1.0f, true);\n@@ -91,1 +98,1 @@\n-        ImageStorage.loadAll(path, null, 0, 0, false, 1.0f, false);\n+        new ImageStorage().loadAll(path, null, 0, 0, false, 1.0f, false);\n@@ -198,1 +205,1 @@\n-        ImageFrame[] frames = ImageStorage.loadAll(stream, null, 0, 0, false, 1.0f, false);\n+        ImageFrame[] frames = new ImageStorage().loadAll(stream, null, 0, 0, false, 1.0f, false);\n@@ -210,1 +217,1 @@\n-        ImageFrame[] frames = ImageStorage.loadAll(url, null, 20, 10, false, 1, false);\n+        ImageFrame[] frames = new ImageStorage().loadAll(url, null, 20, 10, false, 1, false);\n@@ -235,1 +242,1 @@\n-        ImageFrame[] frames = ImageStorage.loadAll(url, null, 20, 10, false, 1, false);\n+        ImageFrame[] frames = new ImageStorage().loadAll(url, null, 20, 10, false, 1, false);\n@@ -257,1 +264,1 @@\n-            ImageStorage.loadAll(url, null, 20, 10, false, 1, false);\n+            new ImageStorage().loadAll(url, null, 20, 10, false, 1, false);\n@@ -269,1 +276,1 @@\n-            ImageStorage.loadAll(url, null, 20, 10, false, 1, false);\n+            new ImageStorage().loadAll(url, null, 20, 10, false, 1, false);\n@@ -281,1 +288,1 @@\n-            ImageStorage.loadAll(url, null, 20, 10, false, 1, false);\n+            new ImageStorage().loadAll(url, null, 20, 10, false, 1, false);\n@@ -287,0 +294,34 @@\n+\n+    @Test\n+    public void testLoadImageFromDataURIWithoutDetectableSignatureByMimeType() throws IOException {\n+        var formatWithoutSignature = new ImageFormatDescription() {\n+            @Override public String getFormatName() { return \"TEST\"; }\n+            @Override public List<String> getExtensions() { return List.of(\"test\"); }\n+            @Override public List<Signature> getSignatures() { return Collections.emptyList(); }\n+            @Override public List<String> getMIMESubtypes() { return List.of(\"test\"); }\n+        };\n+\n+        var expectedImage = new ImageFrame(ImageStorage.ImageType.RGBA_PRE, ByteBuffer.wrap(new byte[0]),\n+            0, 0, 0, null, null);\n+\n+        class TestFactory implements ImageLoaderFactory {\n+            @Override public ImageFormatDescription getFormatDescription() { return formatWithoutSignature; }\n+            @Override public ImageLoader createImageLoader(InputStream input) {\n+                return new ImageLoaderImpl(formatWithoutSignature) {\n+                    @Override public void dispose() {}\n+                    @Override public ImageFrame load(int i, int w, int h, boolean p, boolean s) {\n+                        return i == 0 ? expectedImage : null;\n+                    }\n+                };\n+            }\n+        }\n+\n+        String url = \"data:image\/test;base64,\";\n+\n+        var imageStorage = new ImageStorage();\n+        imageStorage.addImageLoaderFactory(new TestFactory());\n+        var actualImage = imageStorage.loadAll(\n+            url, null, 0, 0, false, 1, false)[0];\n+\n+        assertSame(expectedImage, actualImage);\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/iio\/ImageStorageTest.java","additions":51,"deletions":10,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -179,1 +179,1 @@\n-            return ImageStorage.loadAll(in, readerListener, 0, 0, true, 1.0f, false);\n+            return ImageStorage.getInstance().loadAll(in, readerListener, 0, 0, true, 1.0f, false);\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/javafx\/webkit\/prism\/WCImageDecoderImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}