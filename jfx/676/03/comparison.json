{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,7 +59,7 @@\n-\/\/    \/**\n-\/\/     * Get the MIME type(s) corresponding to this format, for example,\n-\/\/     * \"image\/jpeg,\" \"image\/png,\" etc.\n-\/\/     *\n-\/\/     * @return the MIME type(s) of this format.\n-\/\/     *\/\n-\/\/    String[] getMIMETypes();\n+    \/**\n+     * Get the MIME subtype(s) of the \"image\" type corresponding to this format,\n+     * for example, \"jpeg\" \"png,\" etc.\n+     *\n+     * @return the MIME type(s) of this format.\n+     *\/\n+    List<String> getMIMESubtypes();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/ImageFormatDescription.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import com.sun.javafx.logging.PlatformLogger;\n@@ -37,0 +38,1 @@\n+import com.sun.javafx.util.Logging;\n@@ -113,3 +115,3 @@\n-    \/**\n-     * A mapping of lower case file extensions to loader factories.\n-     *\/\n+\/\/    \/**\n+\/\/     * A mapping of lower case file extensions to loader factories.\n+\/\/     *\/\n@@ -120,2 +122,8 @@\n-    private static final HashMap<Signature, ImageLoaderFactory> loaderFactoriesBySignature;\n-    private static final ImageLoaderFactory[] loaderFactories;\n+    private final HashMap<Signature, ImageLoaderFactory> loaderFactoriesBySignature;\n+    \/**\n+     * A mapping of lower case MIME subtypes to loader factories.\n+     *\/\n+    private final HashMap<String, ImageLoaderFactory> loaderFactoriesByMimeSubtype;\n+    private final ImageLoaderFactory[] loaderFactories;\n+    private int maxSignatureLength;\n+\n@@ -124,1 +132,3 @@\n-    private static int maxSignatureLength;\n+    private static class InstanceHolder {\n+        static final ImageStorage INSTANCE = new ImageStorage();\n+    }\n@@ -126,1 +136,5 @@\n-    static {\n+    public static ImageStorage getInstance() {\n+        return InstanceHolder.INSTANCE;\n+    }\n+\n+    public ImageStorage() {\n@@ -144,1 +158,2 @@\n-        loaderFactoriesBySignature = new HashMap<Signature, ImageLoaderFactory>(loaderFactories.length);\n+        loaderFactoriesBySignature = new HashMap<>(loaderFactories.length);\n+        loaderFactoriesByMimeSubtype = new HashMap<>(loaderFactories.length);\n@@ -151,1 +166,1 @@\n-    public static ImageFormatDescription[] getSupportedDescriptions() {\n+    public ImageFormatDescription[] getSupportedDescriptions() {\n@@ -165,1 +180,1 @@\n-    public static int getNumBands(ImageType type) {\n+    public int getNumBands(ImageType type) {\n@@ -194,2 +209,2 @@\n-     * previously registered for the file extensions (converted to lower case)\n-     * and signature indicated by the format description.\n+     * previously registered for the file extensions (converted to lower case),\n+     * MIME subtype, and signature indicated by the format description.\n@@ -199,1 +214,1 @@\n-    public static void addImageLoaderFactory(ImageLoaderFactory factory) {\n+    public void addImageLoaderFactory(ImageLoaderFactory factory) {\n@@ -210,0 +225,4 @@\n+        for (String subtype : desc.getMIMESubtypes()) {\n+            loaderFactoriesByMimeSubtype.put(subtype.toLowerCase(), factory);\n+        }\n+\n@@ -257,1 +276,1 @@\n-    public static ImageFrame[] loadAll(InputStream input, ImageLoadListener listener,\n+    public ImageFrame[] loadAll(InputStream input, ImageLoadListener listener,\n@@ -292,1 +311,1 @@\n-    public static ImageFrame[] loadAll(String input, ImageLoadListener listener,\n+    public ImageFrame[] loadAll(String input, ImageLoadListener listener,\n@@ -307,7 +326,4 @@\n-                if (devPixelScale >= 1.5f) {\n-                    \/\/ Use Mac Retina conventions for >= 1.5f\n-                    try {\n-                        String name2x = ImageTools.getScaledImageName(input);\n-                        theStream = ImageTools.createInputStream(name2x);\n-                        imgPixelScale = 2.0f;\n-                    } catch (IOException ignored) {\n+                DataURI dataUri = DataURI.tryParse(input);\n+                if (dataUri != null) {\n+                    if (!\"image\".equalsIgnoreCase(dataUri.getMimeType())) {\n+                        throw new IllegalArgumentException(\"Unexpected MIME type: \" + dataUri.getMimeType());\n@@ -315,1 +331,0 @@\n-                }\n@@ -317,9 +332,24 @@\n-                if (theStream == null) {\n-                    try {\n-                        theStream = ImageTools.createInputStream(input);\n-                    } catch (IOException ex) {\n-                        DataURI dataUri = DataURI.tryParse(input);\n-                        if (dataUri != null) {\n-                            String mimeType = dataUri.getMimeType();\n-                            if (mimeType != null && !\"image\".equalsIgnoreCase(dataUri.getMimeType())) {\n-                                throw new IllegalArgumentException(\"Unexpected MIME type: \" + dataUri.getMimeType());\n+                    \/\/ Find a factory that can load images with the specified MIME type.\n+                    var factory = loaderFactoriesByMimeSubtype.get(dataUri.getMimeSubtype().toLowerCase());\n+                    if (factory == null) {\n+                        throw new IllegalArgumentException(\n+                            \"Unsupported MIME subtype: image\/\" + dataUri.getMimeSubtype());\n+                    }\n+\n+                    \/\/ We also inspect the image file signature to confirm that it matches the MIME type.\n+                    theStream = new ByteArrayInputStream(dataUri.getData());\n+                    ImageLoader loaderBySignature = getLoaderBySignature(theStream, listener);\n+\n+                    if (loaderBySignature != null) {\n+                        \/\/ If the MIME type doesn't agree with the file signature, log a warning and\n+                        \/\/ continue with the image loader that matches the file signature.\n+                        boolean imageTypeMismatch = !factory.getFormatDescription().getFormatName().equals(\n+                            loaderBySignature.getFormatDescription().getFormatName());\n+\n+                        if (imageTypeMismatch) {\n+                            var logger = Logging.getJavaFXLogger();\n+                            if (logger.isLoggable(PlatformLogger.Level.WARNING)) {\n+                                logger.warning(String.format(\n+                                    \"Image format '%s' does not match MIME type '%s\/%s' in URI '%s'\",\n+                                    loaderBySignature.getFormatDescription().getFormatName(),\n+                                    dataUri.getMimeType(), dataUri.getMimeSubtype(), dataUri));\n@@ -327,0 +357,1 @@\n+                        }\n@@ -328,3 +359,18 @@\n-                            theStream = new ByteArrayInputStream(dataUri.getData());\n-                        } else {\n-                            throw ex;\n+                        loader = loaderBySignature;\n+                    } else {\n+                        \/\/ We're here because the image format doesn't have a detectable signature.\n+                        \/\/ In this case, we need to close the input stream (because we already consumed\n+                        \/\/ parts of it to detect a potential file signature) and create a new input\n+                        \/\/ stream for the image loader that matches the MIME type.\n+                        theStream.close();\n+                        theStream = new ByteArrayInputStream(dataUri.getData());\n+                        loader = factory.createImageLoader(theStream);\n+                    }\n+                } else {\n+                    if (devPixelScale >= 1.5f) {\n+                        \/\/ Use Mac Retina conventions for >= 1.5f\n+                        try {\n+                            String name2x = ImageTools.getScaledImageName(input);\n+                            theStream = ImageTools.createInputStream(name2x);\n+                            imgPixelScale = 2.0f;\n+                        } catch (IOException ignored) {\n@@ -333,1 +379,0 @@\n-                }\n@@ -335,4 +380,9 @@\n-                if (isIOS) {\n-                    loader = IosImageLoaderFactory.getInstance().createImageLoader(theStream);\n-                } else {\n-                    loader = getLoaderBySignature(theStream, listener);\n+                    if (theStream == null) {\n+                        theStream = ImageTools.createInputStream(input);\n+                    }\n+\n+                    if (isIOS) {\n+                        loader = IosImageLoaderFactory.getInstance().createImageLoader(theStream);\n+                    } else {\n+                        loader = getLoaderBySignature(theStream, listener);\n+                    }\n@@ -364,1 +414,1 @@\n-    private static synchronized int getMaxSignatureLength() {\n+    private synchronized int getMaxSignatureLength() {\n@@ -379,1 +429,1 @@\n-    private static ImageFrame[] loadAll(ImageLoader loader,\n+    private ImageFrame[] loadAll(ImageLoader loader,\n@@ -436,1 +486,1 @@\n-    private static ImageLoader getLoaderBySignature(InputStream stream, ImageLoadListener listener) throws IOException {\n+    private ImageLoader getLoaderBySignature(InputStream stream, ImageLoadListener listener) throws IOException {\n@@ -438,1 +488,3 @@\n-        ImageTools.readFully(stream, header);\n+        if (stream.read(header) <= 0) {\n+            return null;\n+        }\n@@ -457,3 +509,0 @@\n-\n-    private ImageStorage() {\n-    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/ImageStorage.java","additions":96,"deletions":47,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,3 @@\n-    static final String extensions[] = { \"bmp\" };\n-    static final Signature signatures[] = {new Signature((byte)0x42, (byte)0x4D)};\n+    static final String[] extensions = { \"bmp\" };\n+    static final Signature[] signatures = {new Signature((byte)0x42, (byte)0x4D)};\n+    static final String[] mimeSubtypes = { \"bmp\" };\n@@ -41,1 +42,1 @@\n-        super(formatName, extensions, signatures);\n+        super(formatName, extensions, signatures, mimeSubtypes);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/bmp\/BMPImageLoaderFactory.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-\/\/    private String[] MIMETypes;\n+    private final List<String> mimeSubtypes;\n@@ -39,1 +39,1 @@\n-    public ImageDescriptor(String formatName, String[] extensions, Signature[] signatures) {\n+    public ImageDescriptor(String formatName, String[] extensions, Signature[] signatures, String[] mimeSubtypes) {\n@@ -45,1 +45,2 @@\n-\/\/        this.MIMETypes = MIMETypes;\n+        this.mimeSubtypes = Collections.unmodifiableList(\n+                                          Arrays.asList(mimeSubtypes));\n@@ -60,3 +61,3 @@\n-\/\/    public String[] getMIMETypes() {\n-\/\/        return MIMETypes;\n-\/\/    }\n+    public List<String> getMIMESubtypes() {\n+        return mimeSubtypes;\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/common\/ImageDescriptor.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -700,1 +700,1 @@\n-        int numBands = ImageStorage.getNumBands(src.getImageType());\n+        int numBands = ImageStorage.getInstance().getNumBands(src.getImageType());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/common\/ImageTools.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-\/\/    private static final String[] MIMETypes = { \"image\/gif\" };\n+    private static final String[] mimeSubtypes = { \"gif\" };\n@@ -45,1 +45,1 @@\n-        super(formatName, extensions, signatures);\n+        super(formatName, extensions, signatures, mimeSubtypes);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/gif\/GIFDescriptor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,2 @@\n+    private static final String[] mimeSubtypes = { \"bmp\", \"png\", \"x-png\", \"jpeg\", \"gif\"};\n+\n@@ -54,1 +56,1 @@\n-        super(formatName, extensions, signatures);\n+        super(formatName, extensions, signatures, mimeSubtypes);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/ios\/IosDescriptor.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-\/\/    private static final String[] MIMETypes = { \"image\/jpeg\" };\n+    private static final String[] mimeSubtypes = { \"jpeg\" };\n@@ -45,1 +45,1 @@\n-        super(formatName, extensions, signatures);\n+        super(formatName, extensions, signatures, mimeSubtypes);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/jpeg\/JPEGDescriptor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-\/\/    private static final String[] MIMETypes = { \"image\/png\", \"image\/x-png\" };\n+    private static final String[] mimeSubtypes = { \"png\", \"x-png\" };\n@@ -45,1 +45,1 @@\n-        super(formatName, extensions, signatures);\n+        super(formatName, extensions, signatures, mimeSubtypes);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/png\/PNGDescriptor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-                                ImageStorage.getSupportedDescriptions();\n+                                ImageStorage.getInstance().getSupportedDescriptions();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/PixelUtils.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-                ImageStorage.loadAll(url, listener, w, h, preserveRatio, pixelScale, smooth);\n+                ImageStorage.getInstance().loadAll(url, listener, w, h, preserveRatio, pixelScale, smooth);\n@@ -142,1 +142,1 @@\n-                ImageStorage.loadAll(stream, listener, w, h, preserveRatio, 1.0f, smooth);\n+                ImageStorage.getInstance().loadAll(stream, listener, w, h, preserveRatio, 1.0f, smooth);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/PrismImageLoader2.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -95,2 +95,5 @@\n- * and the MIME type must either be empty or a subtype of the\n- * {@code image} type.\n+ * and the MIME type must be a subtype of the {@code image} type.\n+ * The MIME type must match the image format of the data contained in\n+ * the URL. In case of a mismatch between MIME type and image format,\n+ * the image will be loaded if the image format can be determined by\n+ * JavaFX, and a warning will be logged.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/image\/Image.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-                    ImageStorage.loadAll(path, null, 0, 0, true, pixelScale, true);\n+                    new ImageStorage().loadAll(path, null, 0, 0, true, pixelScale, true);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/iio\/ImageHiDPITest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-            ImageStorage.loadAll(stream, null, width, height, false, 1.0f, false);\n+            new ImageStorage().loadAll(stream, null, width, height, false, 1.0f, false);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/iio\/ImageLoaderScalingTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.iio.ImageFormatDescription;\n@@ -29,0 +30,2 @@\n+import com.sun.javafx.iio.ImageLoader;\n+import com.sun.javafx.iio.ImageLoaderFactory;\n@@ -31,0 +34,1 @@\n+import com.sun.javafx.iio.common.ImageLoaderImpl;\n@@ -39,0 +43,1 @@\n+import java.nio.ByteBuffer;\n@@ -40,0 +45,2 @@\n+import java.util.Collections;\n+import java.util.List;\n@@ -50,1 +57,1 @@\n-        assertNotNull(ImageStorage.loadAll(path, null, 0, 0, true, 2.0f, true));\n+        assertNotNull(new ImageStorage().loadAll(path, null, 0, 0, true, 2.0f, true));\n@@ -77,1 +84,1 @@\n-        ImageFrame[] frames = ImageStorage.loadAll(path, null, 0, 0, true, 1.0f, true);\n+        ImageFrame[] frames = new ImageStorage().loadAll(path, null, 0, 0, true, 1.0f, true);\n@@ -84,1 +91,1 @@\n-        ImageFrame[] frames = ImageStorage.loadAll(path, null, 0, 0, true, 1.0f, true);\n+        ImageFrame[] frames = new ImageStorage().loadAll(path, null, 0, 0, true, 1.0f, true);\n@@ -91,1 +98,1 @@\n-        ImageStorage.loadAll(path, null, 0, 0, false, 1.0f, false);\n+        new ImageStorage().loadAll(path, null, 0, 0, false, 1.0f, false);\n@@ -198,1 +205,1 @@\n-        ImageFrame[] frames = ImageStorage.loadAll(stream, null, 0, 0, false, 1.0f, false);\n+        ImageFrame[] frames = new ImageStorage().loadAll(stream, null, 0, 0, false, 1.0f, false);\n@@ -210,1 +217,1 @@\n-        ImageFrame[] frames = ImageStorage.loadAll(url, null, 20, 10, false, 1, false);\n+        ImageFrame[] frames = new ImageStorage().loadAll(url, null, 20, 10, false, 1, false);\n@@ -226,0 +233,95 @@\n+\n+    @Test\n+    public void testLoadImageFromDataURIWithMismatchedMimeSubtype() throws ImageStorageException {\n+        \/\/ The data contained in this URI is actually a PNG image\n+        String url =\n+            \"data:image\/jpeg;base64,iVBORw0KGgoAAAANSUhEUgAAABQAAAAKCAIAAAA7N+mxAAAAAXNSR0IArs4c6QAAAAR\"\n+            + \"nQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAcSURBVChTY\/jPwADBZACyNMHAqGYSwZDU\/P8\/AB\"\n+            + \"ieT81GAGKoAAAAAElFTkSuQmCC\";\n+\n+        ImageFrame[] frames = new ImageStorage().loadAll(url, null, 20, 10, false, 1, false);\n+        assertEquals(1, frames.length);\n+\n+        byte[] data = (byte[])frames[0].getImageData().array();\n+        assertEquals(-1, data[0]);\n+        assertEquals(0, data[1]);\n+        assertEquals(0, data[2]);\n+\n+        assertEquals(0, data[3]);\n+        assertEquals(-1, data[4]);\n+        assertEquals(0, data[5]);\n+\n+        assertEquals(0, data[6]);\n+        assertEquals(0, data[7]);\n+        assertEquals(-1, data[8]);\n+    }\n+\n+    @Test\n+    public void testLoadImageFromDataURIWithUnsupportedImageSubtypeFails() {\n+        String url = \"data:image\/foo;base64,\";\n+\n+        try {\n+            new ImageStorage().loadAll(url, null, 20, 10, false, 1, false);\n+            fail();\n+        } catch (ImageStorageException ex) {\n+            assertTrue(ex.getMessage().startsWith(\"Unsupported MIME subtype\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testLoadImageFromDataURIWithNonImageTypeFails() {\n+        String url = \"data:application\/octet-stream;base64,\";\n+\n+        try {\n+            new ImageStorage().loadAll(url, null, 20, 10, false, 1, false);\n+            fail();\n+        } catch (ImageStorageException ex) {\n+            assertTrue(ex.getMessage().startsWith(\"Unexpected MIME type\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testLoadImageFromDataURIWithoutMimeTypeFails() {\n+        String url = \"data:base64,\";\n+\n+        try {\n+            new ImageStorage().loadAll(url, null, 20, 10, false, 1, false);\n+            fail();\n+        } catch (ImageStorageException ex) {\n+            assertTrue(ex.getMessage().startsWith(\"Unexpected MIME type\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testLoadImageFromDataURIWithoutDetectableSignatureByMimeType() throws IOException {\n+        var formatWithoutSignature = new ImageFormatDescription() {\n+            @Override public String getFormatName() { return \"TEST\"; }\n+            @Override public List<String> getExtensions() { return List.of(\"test\"); }\n+            @Override public List<Signature> getSignatures() { return Collections.emptyList(); }\n+            @Override public List<String> getMIMESubtypes() { return List.of(\"test\"); }\n+        };\n+\n+        var expectedImage = new ImageFrame(ImageStorage.ImageType.RGBA_PRE, ByteBuffer.wrap(new byte[0]),\n+            0, 0, 0, null, null);\n+\n+        class TestFactory implements ImageLoaderFactory {\n+            @Override public ImageFormatDescription getFormatDescription() { return formatWithoutSignature; }\n+            @Override public ImageLoader createImageLoader(InputStream input) {\n+                return new ImageLoaderImpl(formatWithoutSignature) {\n+                    @Override public void dispose() {}\n+                    @Override public ImageFrame load(int i, int w, int h, boolean p, boolean s) {\n+                        return i == 0 ? expectedImage : null;\n+                    }\n+                };\n+            }\n+        }\n+\n+        String url = \"data:image\/test;base64,\";\n+\n+        var imageStorage = new ImageStorage();\n+        imageStorage.addImageLoaderFactory(new TestFactory());\n+        var actualImage = imageStorage.loadAll(\n+            url, null, 0, 0, false, 1, false)[0];\n+\n+        assertSame(expectedImage, actualImage);\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/iio\/ImageStorageTest.java","additions":108,"deletions":6,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -179,1 +179,1 @@\n-            return ImageStorage.loadAll(in, readerListener, 0, 0, true, 1.0f, false);\n+            return ImageStorage.getInstance().loadAll(in, readerListener, 0, 0, true, 1.0f, false);\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/javafx\/webkit\/prism\/WCImageDecoderImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}