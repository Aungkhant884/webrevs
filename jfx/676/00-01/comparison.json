{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,7 +59,7 @@\n-\/\/    \/**\n-\/\/     * Get the MIME type(s) corresponding to this format, for example,\n-\/\/     * \"image\/jpeg,\" \"image\/png,\" etc.\n-\/\/     *\n-\/\/     * @return the MIME type(s) of this format.\n-\/\/     *\/\n-\/\/    String[] getMIMETypes();\n+    \/**\n+     * Get the MIME subtype(s) of the \"image\" type corresponding to this format,\n+     * for example, \"jpeg\" \"png,\" etc.\n+     *\n+     * @return the MIME type(s) of this format.\n+     *\/\n+    List<String> getMIMESubtypes();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/ImageFormatDescription.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import com.sun.javafx.logging.PlatformLogger;\n@@ -37,0 +38,1 @@\n+import com.sun.javafx.util.Logging;\n@@ -113,3 +115,3 @@\n-    \/**\n-     * A mapping of lower case file extensions to loader factories.\n-     *\/\n+\/\/    \/**\n+\/\/     * A mapping of lower case file extensions to loader factories.\n+\/\/     *\/\n@@ -121,0 +123,4 @@\n+    \/**\n+     * A mapping of lower case MIME subtypes to loader factories.\n+     *\/\n+    private static final HashMap<String, ImageLoaderFactory> loaderFactoriesByMimeSubtype;\n@@ -144,1 +150,2 @@\n-        loaderFactoriesBySignature = new HashMap<Signature, ImageLoaderFactory>(loaderFactories.length);\n+        loaderFactoriesBySignature = new HashMap<>(loaderFactories.length);\n+        loaderFactoriesByMimeSubtype = new HashMap<>(loaderFactories.length);\n@@ -194,2 +201,2 @@\n-     * previously registered for the file extensions (converted to lower case)\n-     * and signature indicated by the format description.\n+     * previously registered for the file extensions (converted to lower case),\n+     * MIME subtype, and signature indicated by the format description.\n@@ -210,0 +217,4 @@\n+        for (String subtype : desc.getMIMESubtypes()) {\n+            loaderFactoriesByMimeSubtype.put(subtype.toLowerCase(), factory);\n+        }\n+\n@@ -307,7 +318,4 @@\n-                if (devPixelScale >= 1.5f) {\n-                    \/\/ Use Mac Retina conventions for >= 1.5f\n-                    try {\n-                        String name2x = ImageTools.getScaledImageName(input);\n-                        theStream = ImageTools.createInputStream(name2x);\n-                        imgPixelScale = 2.0f;\n-                    } catch (IOException ignored) {\n+                DataURI dataUri = DataURI.tryParse(input);\n+                if (dataUri != null) {\n+                    if (!\"image\".equalsIgnoreCase(dataUri.getMimeType())) {\n+                        throw new IllegalArgumentException(\"Unexpected MIME type: \" + dataUri.getMimeType());\n@@ -315,1 +323,0 @@\n-                }\n@@ -317,9 +324,24 @@\n-                if (theStream == null) {\n-                    try {\n-                        theStream = ImageTools.createInputStream(input);\n-                    } catch (IOException ex) {\n-                        DataURI dataUri = DataURI.tryParse(input);\n-                        if (dataUri != null) {\n-                            String mimeType = dataUri.getMimeType();\n-                            if (mimeType != null && !\"image\".equalsIgnoreCase(dataUri.getMimeType())) {\n-                                throw new IllegalArgumentException(\"Unexpected MIME type: \" + dataUri.getMimeType());\n+                    \/\/ Find a factory that can load images with the specified MIME type.\n+                    var factory = loaderFactoriesByMimeSubtype.get(dataUri.getMimeSubtype().toLowerCase());\n+                    if (factory == null) {\n+                        throw new IllegalArgumentException(\n+                            \"Unsupported MIME subtype: image\/\" + dataUri.getMimeSubtype());\n+                    }\n+\n+                    \/\/ We also inspect the image file signature to confirm that it matches the MIME type.\n+                    theStream = new ByteArrayInputStream(dataUri.getData());\n+                    ImageLoader loaderBySignature = getLoaderBySignature(theStream, listener);\n+\n+                    if (loaderBySignature != null) {\n+                        \/\/ If the MIME type doesn't agree with the file signature, log a warning and\n+                        \/\/ continue with the image loader that matches the file signature.\n+                        boolean imageTypeMismatch = !factory.getFormatDescription().getFormatName().equals(\n+                            loaderBySignature.getFormatDescription().getFormatName());\n+\n+                        if (imageTypeMismatch) {\n+                            var logger = Logging.getJavaFXLogger();\n+                            if (logger.isLoggable(PlatformLogger.Level.WARNING)) {\n+                                logger.warning(String.format(\n+                                    \"Image format '%s' does not match MIME type '%s\/%s' in URI '%s'\",\n+                                    loaderBySignature.getFormatDescription().getFormatName(),\n+                                    dataUri.getMimeType(), dataUri.getMimeSubtype(), dataUri));\n@@ -327,0 +349,1 @@\n+                        }\n@@ -328,3 +351,18 @@\n-                            theStream = new ByteArrayInputStream(dataUri.getData());\n-                        } else {\n-                            throw ex;\n+                        loader = loaderBySignature;\n+                    } else {\n+                        \/\/ We're here because the image format doesn't have a detectable signature.\n+                        \/\/ In this case, we need to close the input stream (because we already consumed\n+                        \/\/ parts of it to detect a potential file signature) and create a new input\n+                        \/\/ stream for the image loader that matches the MIME type.\n+                        theStream.close();\n+                        theStream = new ByteArrayInputStream(dataUri.getData());\n+                        loader = factory.createImageLoader(theStream);\n+                    }\n+                } else {\n+                    if (devPixelScale >= 1.5f) {\n+                        \/\/ Use Mac Retina conventions for >= 1.5f\n+                        try {\n+                            String name2x = ImageTools.getScaledImageName(input);\n+                            theStream = ImageTools.createInputStream(name2x);\n+                            imgPixelScale = 2.0f;\n+                        } catch (IOException ignored) {\n@@ -333,1 +371,0 @@\n-                }\n@@ -335,4 +372,9 @@\n-                if (isIOS) {\n-                    loader = IosImageLoaderFactory.getInstance().createImageLoader(theStream);\n-                } else {\n-                    loader = getLoaderBySignature(theStream, listener);\n+                    if (theStream == null) {\n+                        theStream = ImageTools.createInputStream(input);\n+                    }\n+\n+                    if (isIOS) {\n+                        loader = IosImageLoaderFactory.getInstance().createImageLoader(theStream);\n+                    } else {\n+                        loader = getLoaderBySignature(theStream, listener);\n+                    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/ImageStorage.java","additions":73,"deletions":31,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,3 @@\n-    static final String extensions[] = { \"bmp\" };\n-    static final Signature signatures[] = {new Signature((byte)0x42, (byte)0x4D)};\n+    static final String[] extensions = { \"bmp\" };\n+    static final Signature[] signatures = {new Signature((byte)0x42, (byte)0x4D)};\n+    static final String[] mimeSubtypes = { \"bmp\" };\n@@ -41,1 +42,1 @@\n-        super(formatName, extensions, signatures);\n+        super(formatName, extensions, signatures, mimeSubtypes);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/bmp\/BMPImageLoaderFactory.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-\/\/    private String[] MIMETypes;\n+    private final List<String> mimeSubtypes;\n@@ -39,1 +39,1 @@\n-    public ImageDescriptor(String formatName, String[] extensions, Signature[] signatures) {\n+    public ImageDescriptor(String formatName, String[] extensions, Signature[] signatures, String[] mimeSubtypes) {\n@@ -45,1 +45,2 @@\n-\/\/        this.MIMETypes = MIMETypes;\n+        this.mimeSubtypes = Collections.unmodifiableList(\n+                                          Arrays.asList(mimeSubtypes));\n@@ -60,3 +61,3 @@\n-\/\/    public String[] getMIMETypes() {\n-\/\/        return MIMETypes;\n-\/\/    }\n+    public List<String> getMIMESubtypes() {\n+        return mimeSubtypes;\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/common\/ImageDescriptor.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-\/\/    private static final String[] MIMETypes = { \"image\/gif\" };\n+    private static final String[] mimeSubtypes = { \"gif\" };\n@@ -45,1 +45,1 @@\n-        super(formatName, extensions, signatures);\n+        super(formatName, extensions, signatures, mimeSubtypes);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/gif\/GIFDescriptor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,2 @@\n+    private static final String[] mimeSubtypes = { \"bmp\", \"png\", \"x-png\", \"jpeg\", \"gif\"};\n+\n@@ -54,1 +56,1 @@\n-        super(formatName, extensions, signatures);\n+        super(formatName, extensions, signatures, mimeSubtypes);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/ios\/IosDescriptor.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-\/\/    private static final String[] MIMETypes = { \"image\/jpeg\" };\n+    private static final String[] mimeSubtypes = { \"jpeg\" };\n@@ -45,1 +45,1 @@\n-        super(formatName, extensions, signatures);\n+        super(formatName, extensions, signatures, mimeSubtypes);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/jpeg\/JPEGDescriptor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-\/\/    private static final String[] MIMETypes = { \"image\/png\", \"image\/x-png\" };\n+    private static final String[] mimeSubtypes = { \"png\", \"x-png\" };\n@@ -45,1 +45,1 @@\n-        super(formatName, extensions, signatures);\n+        super(formatName, extensions, signatures, mimeSubtypes);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/png\/PNGDescriptor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -228,1 +228,2 @@\n-    public void testLoadImageFromDataURIWithWrongMimeTypeFails() {\n+    public void testLoadImageFromDataURIWithMismatchedMimeSubtype() throws ImageStorageException {\n+        \/\/ The data contained in this URI is actually a PNG image\n@@ -230,1 +231,1 @@\n-            \"data:application\/octet-stream;base64,iVBORw0KGgoAAAANSUhEUgAAABQAAAAKCAIAAAA7N+mxAAAAAXNSR0IArs4c6QAAAAR\"\n+            \"data:image\/jpeg;base64,iVBORw0KGgoAAAANSUhEUgAAABQAAAAKCAIAAAA7N+mxAAAAAXNSR0IArs4c6QAAAAR\"\n@@ -234,0 +235,33 @@\n+        ImageFrame[] frames = ImageStorage.loadAll(url, null, 20, 10, false, 1, false);\n+        assertEquals(1, frames.length);\n+\n+        byte[] data = (byte[])frames[0].getImageData().array();\n+        assertEquals(-1, data[0]);\n+        assertEquals(0, data[1]);\n+        assertEquals(0, data[2]);\n+\n+        assertEquals(0, data[3]);\n+        assertEquals(-1, data[4]);\n+        assertEquals(0, data[5]);\n+\n+        assertEquals(0, data[6]);\n+        assertEquals(0, data[7]);\n+        assertEquals(-1, data[8]);\n+    }\n+\n+    @Test\n+    public void testLoadImageFromDataURIWithUnsupportedImageSubtypeFails() {\n+        String url = \"data:image\/foo;base64,\";\n+\n+        try {\n+            ImageStorage.loadAll(url, null, 20, 10, false, 1, false);\n+            fail();\n+        } catch (ImageStorageException ex) {\n+            assertTrue(ex.getMessage().startsWith(\"Unsupported MIME subtype\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testLoadImageFromDataURIWithNonImageTypeFails() {\n+        String url = \"data:application\/octet-stream;base64,\";\n+\n@@ -244,4 +278,1 @@\n-        String url =\n-            \"data:base64,iVBORw0KGgoAAAANSUhEUgAAABQAAAAKCAIAAAA7N+mxAAAAAXNSR0IArs4c6QAAAAR\"\n-            + \"nQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAcSURBVChTY\/jPwADBZACyNMHAqGYSwZDU\/P8\/AB\"\n-            + \"ieT81GAGKoAAAAAElFTkSuQmCC\";\n+        String url = \"data:base64,\";\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/iio\/ImageStorageTest.java","additions":37,"deletions":6,"binary":false,"changes":43,"status":"modified"}]}