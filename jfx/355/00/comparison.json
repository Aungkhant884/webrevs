{"files":[{"patch":"@@ -121,1 +121,1 @@\n-        if (getSkinnable() != null) getSkinnable().requestLayout();\n+        getSkinnable().requestLayout();\n@@ -243,0 +243,11 @@\n+    @Override\n+    public void dispose() {\n+        if (graphic != null) {\n+            graphic.layoutBoundsProperty().removeListener(graphicPropertyChangedListener);\n+            graphic = null;\n+        }\n+        super.dispose();\n+    }\n+\n+\n+\n@@ -275,0 +286,1 @@\n+            \/\/ FIXME: this listener must be removed in dispose!\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/LabeledSkinBase.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.skin;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import static javafx.scene.control.ControlShim.*;\n+import static org.junit.Assert.*;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.*;\n+\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Hyperlink;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Labeled;\n+import javafx.scene.control.RadioButton;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.shape.Rectangle;\n+\n+\/**\n+ * Test skin cleanup for Labeled JDK-8247576\n+ * <p>\n+ * This test is parameterized on class of Labeled.\n+ *\n+ *\/\n+@RunWith(Parameterized.class)\n+public class SkinLabeledCleanupTest {\n+\n+    private Class<Labeled> labeledClass;\n+    private Labeled labeled;\n+\n+    \/**\n+     * First step was cleanup of graphicListener: removed guard against null skinnable.\n+     *\/\n+    @Test\n+    public void testLabeledGraphicDispose() {\n+        Rectangle graphic = (Rectangle) labeled.getGraphic();\n+        installDefaultSkin(labeled);\n+        labeled.getSkin().dispose();\n+        graphic.setWidth(500);\n+    }\n+\n+    @Test\n+    public void testMemoryLeakAlternativeSkin() {\n+        installDefaultSkin(labeled);\n+        WeakReference<?> weakRef = new WeakReference<>(replaceSkin(labeled));\n+        assertNotNull(weakRef.get());\n+        attemptGC(weakRef);\n+        assertEquals(\"Skin must be gc'ed\", null, weakRef.get());\n+    }\n+\n+\/\/----------- parameterized\n+\n+    @Parameterized.Parameters \/\/(name = \"{index}: {0} \")\n+    public static Collection<Object[]> data() {\n+        List<Class> labeledClasses = List.of(\n+               Button.class,\n+               CheckBox.class,\n+               Hyperlink.class,\n+               Label.class,\n+               \/\/ MenuButton is-a Labeled but its skin is-not-a LabeledSkinBase\n+               \/\/ leaking has different reason\/s\n+               \/\/ MenuButton.class,\n+               ToggleButton.class,\n+               RadioButton.class,\n+               TitledPane.class\n+                );\n+        return asArrays(labeledClasses);\n+    }\n+\n+    public SkinLabeledCleanupTest(Class<Labeled> labeledClass) {\n+        this.labeledClass = labeledClass;\n+    }\n+\n+\/\/---------------- setup\/cleanup\n+\n+    @Test\n+    public void testSetupState() {\n+        assertNotNull(labeled);\n+        assertNotNull(labeled.getGraphic());\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        Thread.currentThread().setUncaughtExceptionHandler(null);\n+    }\n+\n+    @Before\n+    public void setup() {\n+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {\n+            if (throwable instanceof RuntimeException) {\n+                throw (RuntimeException)throwable;\n+            } else {\n+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);\n+            }\n+        });\n+\n+        labeled = createControl(labeledClass);\n+        labeled.setGraphic(new Rectangle());\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SkinLabeledCleanupTest.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"}]}