{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-\n+import javafx.beans.WeakInvalidationListener;\n@@ -51,2 +51,0 @@\n-\n-import com.sun.javafx.scene.control.ListenerHelper;\n@@ -101,3 +99,1 @@\n-        ListenerHelper lh = ListenerHelper.get(this);\n-\n-        lh.addChangeListener(control.indexProperty(), (ev) -> {\n+        control.indexProperty().addListener(new WeakInvalidationListener((x) -> {\n@@ -105,1 +101,1 @@\n-        });\n+        }));\n@@ -107,1 +103,1 @@\n-        lh.addChangeListener(control.treeItemProperty(), (ev) -> {\n+        control.treeItemProperty().addListener(new WeakInvalidationListener((x) -> {\n@@ -112,1 +108,1 @@\n-        });\n+        }));\n@@ -119,1 +115,0 @@\n-        ListenerHelper lh = ListenerHelper.get(this);\n@@ -122,1 +117,1 @@\n-            lh.addInvalidationListener(getSkinnable().treeTableViewProperty(), (ev) -> {\n+            getSkinnable().treeTableViewProperty().addListener(new WeakInvalidationListener((x) -> {\n@@ -125,1 +120,1 @@\n-            });\n+            }));\n@@ -127,1 +122,1 @@\n-            lh.addChangeListener(treeTableView.treeColumnProperty(), (ev) -> {\n+            treeTableView.treeColumnProperty().addListener(new WeakInvalidationListener((x) -> {\n@@ -132,2 +127,4 @@\n-                getSkinnable().requestLayout();\n-            });\n+                if (getSkinnable() != null) {\n+                    getSkinnable().requestLayout();\n+                }\n+            }));\n@@ -137,1 +134,1 @@\n-                lh.addChangeListener(fixedCellSizeProperty, (ev) -> {\n+                fixedCellSizeProperty.addListener(new WeakInvalidationListener((x) -> {\n@@ -140,1 +137,1 @@\n-                });\n+                }));\n@@ -150,1 +147,3 @@\n-                    lh.addChangeListener(getVirtualFlow().widthProperty(), (ev) -> treeTableView.requestLayout());\n+                    getVirtualFlow().widthProperty().addListener(new WeakInvalidationListener((x) -> {\n+                        treeTableView.requestLayout();\n+                    }));\n@@ -335,1 +334,1 @@\n-        treeItem = getSkinnable().getTreeItem();\n+        treeItem = (getSkinnable() == null) ? null : getSkinnable().getTreeItem();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TreeTableRowSkin.java","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -28,1 +28,5 @@\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.lang.ref.WeakReference;\n@@ -47,0 +51,1 @@\n+import com.sun.javafx.tk.Toolkit;\n@@ -50,5 +55,1 @@\n-\n-import static org.junit.jupiter.api.Assertions.assertNotEquals;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n+import test.util.memory.JMemoryBuddy;\n@@ -211,4 +212,4 @@\n-        int top = 10;\n-        int right = 20;\n-        int bottom = 30;\n-        int left = 40;\n+        int top = 11;\n+        int right = 23;\n+        int bottom = 37;\n+        int left = 49;\n@@ -218,1 +219,2 @@\n-        treeTableView.setFixedCellSize(24);\n+        treeTableView.setFixedCellSize(23);\n+        Toolkit.getToolkit().firePulse();\n@@ -241,0 +243,1 @@\n+        assertNotEquals(cell, VirtualFlowTestUtils.getCell(treeTableView, 0));\n@@ -323,0 +326,14 @@\n+    \/** TreeTableView.refresh() must release all discarded cells JDK-8307538 *\/\n+    @Test\n+    public void cellsMustBeCollectableAfterRefresh() {\n+        IndexedCell<?> row = VirtualFlowTestUtils.getCell(treeTableView, 0);\n+        assertNotNull(row);\n+        WeakReference<Object> ref = new WeakReference<>(row);\n+        row = null;\n+\n+        treeTableView.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        JMemoryBuddy.assertCollectable(ref);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TreeTableRowSkinTest.java","additions":28,"deletions":11,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -29,5 +29,0 @@\n-import com.oracle.tools.fx.monkey.pages.DemoPage;\n-import com.oracle.tools.fx.monkey.settings.FxSettings;\n-import com.oracle.tools.fx.monkey.util.FX;\n-import com.oracle.tools.fx.monkey.util.Native2AsciiPane;\n-import com.oracle.tools.fx.monkey.util.TestPaneBase;\n@@ -40,0 +35,1 @@\n+import javafx.scene.Node;\n@@ -55,0 +51,5 @@\n+import com.oracle.tools.fx.monkey.pages.DemoPage;\n+import com.oracle.tools.fx.monkey.settings.FxSettings;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.Native2AsciiPane;\n@@ -153,0 +154,4 @@\n+        \/\/ Skin\n+        FX.menu(b, \"_Skin\");\n+        FX.item(b, \"Set New Skin\", this::newSkin);\n+        FX.item(b, \"<null> Skin\", this::nullSkin);\n@@ -247,0 +252,14 @@\n+\n+    protected void nullSkin() {\n+        Node n = contentPane.getCenter();\n+        if (n instanceof HasSkinnable s) {\n+            s.nullSkin();\n+        }\n+    }\n+\n+    protected void newSkin() {\n+        Node n = contentPane.getCenter();\n+        if (n instanceof HasSkinnable s) {\n+            s.newSkin();\n+        }\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/MonkeyTesterApp.java","additions":24,"deletions":5,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import javafx.scene.control.skin.ListViewSkin;\n@@ -38,0 +39,1 @@\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n@@ -45,1 +47,1 @@\n-public class ListViewPage extends TestPaneBase {\n+public class ListViewPage extends TestPaneBase implements HasSkinnable {\n@@ -119,0 +121,5 @@\n+        Button refresh = new Button(\"Refresh\");\n+        refresh.setOnAction((ev) -> {\n+            control.refresh();\n+        });\n+\n@@ -130,0 +137,1 @@\n+        p.option(refresh);\n@@ -270,0 +278,10 @@\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new ListViewSkin(control));\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ListViewPage.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import javafx.scene.control.skin.TableViewSkin;\n@@ -45,0 +46,1 @@\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n@@ -52,1 +54,1 @@\n-public class TableViewPage extends TestPaneBase {\n+public class TableViewPage extends TestPaneBase implements HasSkinnable {\n@@ -190,0 +192,5 @@\n+        Button refresh = new Button(\"Refresh\");\n+        refresh.setOnAction((ev) -> {\n+            table.refresh();\n+        });\n+\n@@ -206,0 +213,1 @@\n+        p.option(refresh);\n@@ -717,0 +725,10 @@\n+\n+    @Override\n+    public void nullSkin() {\n+        table.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        table.setSkin(new TableViewSkin<>(table));\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TableViewPage.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import javafx.scene.control.skin.TreeTableViewSkin;\n@@ -44,0 +45,2 @@\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.ItemSelector;\n@@ -51,1 +54,1 @@\n-public class TreeTableViewPage extends TestPaneBase {\n+public class TreeTableViewPage extends TestPaneBase implements HasSkinnable {\n@@ -117,0 +120,1 @@\n+    protected final ItemSelector<Double> fixedSize;\n@@ -159,0 +163,16 @@\n+        Button refresh = new Button(\"Refresh\");\n+        refresh.setOnAction((ev) -> {\n+            tree.refresh();\n+        });\n+\n+        fixedSize = new ItemSelector<Double>(\n+            \"fixedSize\",\n+            (x) -> {\n+                tree.setFixedCellSize(x);\n+            },\n+            \"<none>\", 0.0,\n+            \"18\", 18.0,\n+            \"24\", 24.0,\n+            \"66\", 66.0\n+        );\n+\n@@ -170,0 +190,3 @@\n+        p.label(\"Fixed Cell Size:\");\n+        p.option(fixedSize.node());\n+        p.option(refresh);\n@@ -504,0 +527,1 @@\n+        tree.setFixedCellSize(fixedSize.getSelectedItem());\n@@ -535,2 +559,7 @@\n-                                    Text t = new Text(\"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n2\\n3\\n\");\n-                                    t.wrappingWidthProperty().bind(widthProperty());\n+                                    if (empty) {\n+                                        setGraphic(null);\n+                                    } else {\n+                                        Text t = new Text(\"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n2\\n3\\n\");\n+                                        t.wrappingWidthProperty().bind(widthProperty());\n+                                        setGraphic(t);\n+                                    }\n@@ -538,1 +567,0 @@\n-                                    setGraphic(t);\n@@ -593,0 +621,10 @@\n+    @Override\n+    public void nullSkin() {\n+        tree.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        tree.setSkin(new TreeTableViewSkin<>(tree));\n+    }\n+\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TreeTableViewPage.java","additions":42,"deletions":4,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+\/**\n+ * This interface enables manipulations with the {@link Control}'s {@link Skin}.\n+ *\/\n+public interface HasSkinnable {\n+    \/** Sets null {@link Skin} in the underlying {@link Control} *\/\n+    public void nullSkin();\n+\n+    \/** Sets a new default {@link Skin} in the underlying {@link Control} *\/\n+    public void newSkin();\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/HasSkinnable.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"}]}