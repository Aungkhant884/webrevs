{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,0 +68,2 @@\n+    private ChangeListener<Boolean> focusListener;\n+\n@@ -142,0 +144,1 @@\n+        focusListener = (src, ov, nv) -> handleFocusChange();\n@@ -143,19 +146,1 @@\n-        c.focusedProperty().addListener(new ChangeListener<Boolean>() {\n-            @Override\n-            public void changed(ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) {\n-                \/\/ NOTE: The code in this method is *almost* and exact copy of what is in TextFieldBehavior.\n-                \/\/ The only real difference is that TextFieldBehavior selects all the text when the control\n-                \/\/ receives focus (when not gained by mouse click), whereas TextArea doesn't, and also the\n-                \/\/ TextArea doesn't lose selection on focus lost, whereas the TextField does.\n-                final TextArea textArea = getNode();\n-                if (textArea.isFocused()) {\n-                    if (!focusGainedByMouseClick) {\n-                        setCaretAnimating(true);\n-                    }\n-                } else {\n-\/\/                    skin.hideCaret();\n-                    focusGainedByMouseClick = false;\n-                    setCaretAnimating(false);\n-                }\n-            }\n-        });\n+        c.focusedProperty().addListener(focusListener);\n@@ -170,0 +155,1 @@\n+        getNode().focusedProperty().removeListener(focusListener);\n@@ -174,0 +160,26 @@\n+    \/**\n+     * Callback from the node's focusListener - this implementation handles\n+     * caret animation as appropriate.\n+     *\/\n+    private void handleFocusChange() {\n+        \/\/ FIXME: the code comment below is outdated\n+        \/\/ actually, this handler __has__ the exact same logic as TextField\n+        \/\/ (meanwhile, selection handling of TextField is separated out into focusOwnerLister)\n+        \/\/ The stumbling block against pulling it up into TextInputControlBehavior is\n+        \/\/ the focusGainedByMouseClick flag\n+        \/\/ NOTE: The code in this method is *almost* and exact copy of what is in TextFieldBehavior.\n+        \/\/ The only real difference is that TextFieldBehavior selects all the text when the control\n+        \/\/ receives focus (when not gained by mouse click), whereas TextArea doesn't, and also the\n+        \/\/ TextArea doesn't lose selection on focus lost, whereas the TextField does.\n+        final TextArea textArea = getNode();\n+        if (textArea.isFocused()) {\n+            if (!focusGainedByMouseClick) {\n+                setCaretAnimating(true);\n+            }\n+        } else {\n+\/\/                    skin.hideCaret();\n+            focusGainedByMouseClick = false;\n+            setCaretAnimating(false);\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/TextAreaBehavior.java","additions":32,"deletions":20,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import com.sun.javafx.scene.control.behavior.BehaviorBase;\n@@ -39,1 +38,0 @@\n-import javafx.collections.ListChangeListener;\n@@ -52,2 +50,0 @@\n-import javafx.scene.control.Accordion;\n-import javafx.scene.control.Button;\n@@ -61,1 +57,0 @@\n-import javafx.scene.shape.MoveTo;\n@@ -72,1 +67,0 @@\n-\n@@ -147,0 +141,2 @@\n+    private EventHandler<ScrollEvent> scrollEventFilter;\n+\n@@ -204,1 +200,1 @@\n-        getSkinnable().addEventFilter(ScrollEvent.ANY, event -> {\n+        scrollEventFilter = event -> {\n@@ -208,1 +204,2 @@\n-        });\n+        };\n+        getSkinnable().addEventFilter(ScrollEvent.ANY, scrollEventFilter);\n@@ -258,1 +255,1 @@\n-        control.selectionProperty().addListener((observable, oldValue, newValue) -> {\n+        registerChangeListener(control.selectionProperty(), e -> {\n@@ -264,1 +261,1 @@\n-        control.wrapTextProperty().addListener((observable, oldValue, newValue) -> {\n+        registerChangeListener(control.wrapTextProperty(), e -> {\n@@ -266,1 +263,1 @@\n-            scrollPane.setFitToWidth(newValue);\n+            scrollPane.setFitToWidth(control.isWrapText());\n@@ -269,1 +266,1 @@\n-        control.prefColumnCountProperty().addListener((observable, oldValue, newValue) -> {\n+        registerChangeListener(control.prefColumnCountProperty(), e -> {\n@@ -274,1 +271,1 @@\n-        control.prefRowCountProperty().addListener((observable, oldValue, newValue) -> {\n+        registerChangeListener(control.prefRowCountProperty(), e -> {\n@@ -306,3 +303,4 @@\n-        control.scrollTopProperty().addListener((observable, oldValue, newValue) -> {\n-            double vValue = (newValue.doubleValue() < getScrollTopMax())\n-                               ? (newValue.doubleValue() \/ getScrollTopMax()) : 1.0;\n+        registerChangeListener(control.scrollTopProperty(), e -> {\n+            double newValue = control.getScrollTop();\n+            double vValue = (newValue < getScrollTopMax())\n+                               ? (newValue \/ getScrollTopMax()) : 1.0;\n@@ -312,3 +310,4 @@\n-        control.scrollLeftProperty().addListener((observable, oldValue, newValue) -> {\n-            double hValue = (newValue.doubleValue() < getScrollLeftMax())\n-                               ? (newValue.doubleValue() \/ getScrollLeftMax()) : 1.0;\n+        registerChangeListener(control.scrollLeftProperty(), e -> {\n+            double newValue = control.getScrollLeft();\n+            double hValue = (newValue < getScrollLeftMax())\n+                               ? (newValue \/ getScrollLeftMax()) : 1.0;\n@@ -319,1 +318,1 @@\n-            control.getParagraphs().addListener((ListChangeListener.Change<? extends CharSequence> change) -> {\n+            registerListChangeListener(control.getParagraphs(), change -> {\n@@ -323,1 +322,1 @@\n-                    List<? extends CharSequence> removed = change.getRemoved();\n+                    List<? extends CharSequence> removed = (List<? extends CharSequence>) change.getRemoved();\n@@ -346,1 +345,1 @@\n-            control.textProperty().addListener(observable -> {\n+            registerInvalidationListener(control.textProperty(), e -> {\n@@ -367,1 +366,1 @@\n-        usePromptText.addListener(observable -> {\n+        registerInvalidationListener(usePromptText, e -> {\n@@ -835,0 +834,3 @@\n+        if (getSkinnable() == null) return;\n+        getSkinnable().removeEventFilter(ScrollEvent.ANY, scrollEventFilter);\n+        getChildren().remove(scrollPane);\n@@ -840,3 +842,0 @@\n-\n-        \/\/ TODO Unregister listeners on text editor, paragraph list\n-        throw new UnsupportedOperationException();\n@@ -1171,1 +1170,2 @@\n-    private Text getTextNode() {\n+    \/\/ package for testing only!\n+    Text getTextNode() {\n@@ -1188,0 +1188,9 @@\n+    \/\/ for testing\n+    void setHandlePressed(boolean pressed) {\n+        handlePressed = pressed;\n+    }\n+\n+    \/\/ for testing\n+    ScrollPane getScrollPane() {\n+        return scrollPane;\n+    }\n@@ -1189,0 +1198,4 @@\n+    \/\/ for testing\n+    Text getPromptNode() {\n+        return promptNode;\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TextAreaSkin.java","additions":41,"deletions":28,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TextArea;\n@@ -37,0 +39,2 @@\n+\/\/------------ TextField\n+\n@@ -64,0 +68,28 @@\n+\/\/----------- TextArea\n+\n+    \/**\n+     * Returns the promptNode from the textField's skin. The skin must be of type\n+     * TextFieldSkin.\n+     *\/\n+    public static Text getPromptNode(TextArea textArea) {\n+        TextAreaSkin skin = (TextAreaSkin) textArea.getSkin();\n+        return skin.getPromptNode();\n+    }\n+\n+    public static Text getTextNode(TextArea textArea) {\n+        TextAreaSkin skin = (TextAreaSkin) textArea.getSkin();\n+        return skin.getTextNode();\n+    }\n+\n+    public static ScrollPane getScrollPane(TextArea textArea) {\n+        TextAreaSkin skin = (TextAreaSkin) textArea.getSkin();\n+        return skin.getScrollPane();\n+    }\n+\n+    public static void setHandlePressed(TextArea textArea, boolean pressed) {\n+        TextAreaSkin skin = (TextAreaSkin) textArea.getSkin();\n+        skin.setHandlePressed(pressed);\n+    }\n+\n+\/\/---------- TextInputControl\n+\n","filename":"modules\/javafx.controls\/src\/shims\/java\/javafx\/scene\/control\/skin\/TextInputSkinShim.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+import javafx.scene.control.TextArea;\n@@ -70,0 +71,11 @@\n+\/\/---------- TextAera\n+\n+    @Test\n+    public void testTextAreaFocusListener() {\n+        TextArea control = new TextArea(\"some text\");\n+        showControl(control, true);\n+        assertTrue(\"caret must be blinking if focused\", isCaretBlinking(control));\n+        Button button = new Button(\"dummy\");\n+        showControl(button, true);\n+        assertFalse(\"caret must not be blinking if not focused\", isCaretBlinking(control));\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/behavior\/BehaviorCleanupTest.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-import javafx.scene.control.TextArea;\n@@ -85,1 +84,0 @@\n-                TextArea.class,\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/behavior\/BehaviorMemoryLeakTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import javafx.scene.control.ScrollPane;\n@@ -55,0 +56,1 @@\n+import javafx.scene.control.TextArea;\n@@ -61,0 +63,1 @@\n+import javafx.scene.input.ScrollEvent;\n@@ -77,0 +80,215 @@\n+\/\/------------ TextArea\n+\n+    \/**\n+     * Sanity: event filter must consume scrollEvent.\n+     *\/\n+    @Test\n+    public void testScrollEventFilter() {\n+        TextArea area = new TextArea(\"some text\");\n+        showControl(area, true);\n+        setHandlePressed(area, true);\n+        ScrollEvent scrollEvent = new ScrollEvent(ScrollEvent.ANY, 0, 0, 0, 0, false, false, false, false,\n+                true, \/\/ direct\n+                false, 0, 0, 0, USE_PREF_SIZE, null, USE_COMPUTED_SIZE, null, 0, 0, null);\n+        assertTrue(\"sanity: created a fake direct event\", scrollEvent.isDirect());\n+        \/\/ must use copy to detect change in consume\n+        ScrollEvent copy = scrollEvent.copyFor(area, area);\n+        Event.fireEvent(area, copy);\n+        assertTrue(\"scrollEvent must be consumed\", copy.isConsumed());\n+    }\n+\n+    \/**\n+     * Sanity: change of selection must update textNode.\n+     *\/\n+    @Test\n+    public void testTextAreaSelectUpdate() {\n+        TextArea area = new TextArea(\"some text\");\n+        installDefaultSkin(area);\n+        Text textNode = getTextNode(area);\n+        area.selectAll();\n+        textNode.getParent().getParent().layout();\n+        int end = area.getLength();\n+        assertEquals(\"sanity: area caret moved to end\", end, area.getCaretPosition());\n+        assertEquals(\"sanity: area selection updated\", end, area.getSelection().getEnd());\n+        assertEquals(\"textNode end\", end, textNode.getSelectionEnd());\n+    }\n+\n+    \/**\n+     * Sanity: toggle textWrap must update scrollPane's fitToWidth.\n+     *\/\n+    @Test\n+    public void testTextAreaSetWrapUpdate() {\n+        TextArea area = new TextArea(\"some text\");\n+        installDefaultSkin(area);\n+        boolean isWrap = area.isWrapText();\n+        ScrollPane scrollPane = getScrollPane(area);\n+        assertEquals(isWrap, scrollPane.isFitToWidth());\n+        area.setWrapText(!isWrap);\n+        assertEquals(!isWrap, scrollPane.isFitToWidth());\n+    }\n+\n+    \/**\n+     * NPE from listener to prefColumnCount.\n+     *\/\n+    @Test\n+    public void testTextAreaSetColumnCount() {\n+        TextArea area = new TextArea(\"some text\");\n+        int prefColumn = area.getPrefColumnCount();\n+        assertEquals(\"sanity: initial count\", TextArea.DEFAULT_PREF_COLUMN_COUNT, prefColumn);\n+        installDefaultSkin(area);\n+        replaceSkin(area);\n+        area.setPrefColumnCount(prefColumn * 2);\n+    }\n+\n+    \/**\n+     * Sanity: change of prefColumnCount must update scrollPane.\n+     *\/\n+    @Test\n+    public void testTextAreaSetColumnCountUpdate() {\n+        TextArea area = new TextArea(\"some text\");\n+        int prefColumn = area.getPrefColumnCount();\n+        assertEquals(\"sanity: initial count\", TextArea.DEFAULT_PREF_COLUMN_COUNT, prefColumn);\n+        installDefaultSkin(area);\n+        ScrollPane scrollPane = getScrollPane(area);\n+        double prefViewportWidth = scrollPane.getPrefViewportWidth();\n+        area.setPrefColumnCount(prefColumn * 2);\n+        assertEquals(\"prefViewportWidth must be updated\", prefViewportWidth * 2, scrollPane.getPrefViewportWidth(), 1);\n+    }\n+\n+    \/**\n+     * NPE from listener to prefRowCount.\n+     *\/\n+    @Test\n+    public void testTextAreaSetRowCount() {\n+        TextArea area = new TextArea(\"some text\");\n+        int prefRows = area.getPrefRowCount();\n+        installDefaultSkin(area);\n+        replaceSkin(area);\n+        area.setPrefRowCount(prefRows * 2);\n+    }\n+\n+    \/**\n+     * Sanity: change of prefRows must update scrollPane.\n+     *\/\n+    @Test\n+    public void testTextAreaSetRowCountUpdate() {\n+        TextArea area = new TextArea(\"some text\");\n+        int prefRows = area.getPrefRowCount();\n+        assertEquals(\"sanity: initial row count\", TextArea.DEFAULT_PREF_ROW_COUNT, prefRows);\n+        installDefaultSkin(area);\n+        ScrollPane scrollPane = getScrollPane(area);\n+        double prefViewportHeight = scrollPane.getPrefViewportHeight();\n+        area.setPrefRowCount(prefRows * 2);\n+        assertEquals(\"prefViewportHeight must be updated\", prefViewportHeight * 2, scrollPane.getPrefViewportHeight(), 1);\n+    }\n+\n+    \/**\n+     * Sanity: change of text must update textNode.\n+     *\/\n+    @Test\n+    public void testTextAreaSetTextUpdate() {\n+        String initial = \"some text\";\n+        TextArea area = new TextArea(initial);\n+        installDefaultSkin(area);\n+        Text textNode = getTextNode(area);\n+        assertEquals(\"sanity initial text sync'ed to textNode\", initial, textNode.getText());\n+        String replaced = \"replaced text\";\n+        area.setText(replaced);\n+        assertEquals(replaced, textNode.getText());\n+    }\n+\n+    \/**\n+     * NPE on changing promptText: binding to promptText triggers internal listener to usePromptText.\n+     *\/\n+    @Test\n+    public void testTextAreaPrompt() {\n+        TextArea area = new TextArea();\n+        installDefaultSkin(area);\n+        replaceSkin(area);\n+        area.setPromptText(\"prompt\");\n+    }\n+\n+    \/**\n+     * Sanity: change of promptText must update promptNode.\n+     *\/\n+    @Test\n+    public void testTextAreaPromptUpdate() {\n+        TextArea area = new TextArea();\n+        installDefaultSkin(area);\n+        assertNull(\"sanity: default prompt is null\", getPromptNode(area));\n+        area.setPromptText(\"prompt\");\n+        assertNotNull(\"prompt node must be created\", getPromptNode(area));\n+    }\n+\n+    @Test\n+    public void testTextAreaChildren() {\n+        TextArea area = new TextArea(\"some text\");\n+        installDefaultSkin(area);\n+        int children = area.getChildrenUnmodifiable().size();\n+        replaceSkin(area);\n+        assertEquals(\"children size must be unchanged: \", children, area.getChildrenUnmodifiable().size());\n+    }\n+\n+    \/**\n+     * NPE from listener to scrollPane's hValue.\n+     *\/\n+    @Test\n+    public void testTextAreaSetScrollLeft() {\n+        TextArea area = new TextArea(LOREM_IPSUM + LOREM_IPSUM);\n+        installDefaultSkin(area);\n+        replaceSkin(area);\n+        area.setScrollLeft(500);\n+    }\n+\n+    \/**\n+     * Sanity: change of scrollLeft must update scrollPane's hValue.\n+     *\/\n+    @Test\n+    public void testTextAreaSetScrollLeftUpdate() {\n+        TextArea area = new TextArea(LOREM_IPSUM + LOREM_IPSUM);\n+        showControl(area, true);\n+        ScrollPane scrollPane = getScrollPane(area);\n+        double scrollLeft = 500;\n+        area.setScrollLeft(scrollLeft);\n+        Toolkit.getToolkit().firePulse();\n+        assertEquals(\"sanity: scrollLeft updated\", scrollLeft, area.getScrollLeft(), 0.1);\n+        assertTrue(\"scrollPane hValue > 0\", scrollPane.getHvalue() > 0.0);\n+    }\n+\n+    \/**\n+     * NPE from listener to scrollPane's vValue.\n+     *\/\n+    @Test\n+    public void testTextAreaSetScrollTop() {\n+        TextArea area = new TextArea(LOREM_IPSUM + LOREM_IPSUM);\n+        area.setWrapText(true);\n+        installDefaultSkin(area);\n+        replaceSkin(area);\n+        area.setScrollTop(100);\n+    }\n+\n+    \/**\n+     * Sanity: change of scrollTop must update scrollPane's vValue.\n+     *\/\n+    @Ignore(\"8272082\")\n+    @Test\n+    public void testTextAreaSetScrollTopUpdate() {\n+        TextArea area = new TextArea(LOREM_IPSUM + LOREM_IPSUM);\n+        area.setWrapText(true);\n+        showControl(area, true, 300, 300);\n+        ScrollPane scrollPane = getScrollPane(area);\n+        double scrollTop = 100;\n+        area.setScrollTop(scrollTop);\n+        Toolkit.getToolkit().firePulse();\n+        assertEquals(\"sanity: scrollTop updated\", scrollTop, area.getScrollTop(), 0.1);\n+        assertTrue(\"scrollPane vValue > 0\", scrollPane.getVvalue() > 0.0);\n+    }\n+\n+    public static final String LOREM_IPSUM = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \"\n+            + \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim \"\n+            + \"ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip \"\n+            + \"ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate \"\n+            + \"velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat \"\n+            + \"cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\";\n+\n+\n@@ -576,0 +794,14 @@\n+        showControl(control, focused, -1, -1);\n+    }\n+\n+    \/**\n+     * Ensures the control is shown in an active scenegraph. Requests\n+     * focus on the control if focused == true.\n+     * On first call, sizes the scene to sceneX\/Y if sceneX > 0\n+     *\n+     * @param control the control to show\n+     * @param focused if true, requests focus on the added control\n+     * @param sceneX the width of the scene or -1 for autosizing\n+     * @param sceneY the height of the scene or -1 for autosing\n+     *\/\n+    protected void showControl(Control control, boolean focused, double sceneX, double sceneY) {\n@@ -578,1 +810,5 @@\n-            scene = new Scene(root);\n+            if (sceneX > 0) {\n+                scene = new Scene(root, sceneX, sceneY);\n+            } else {\n+                scene = new Scene(root);\n+            }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SkinCleanupTest.java","additions":237,"deletions":1,"binary":false,"changes":238,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import javafx.scene.control.TextArea;\n@@ -79,2 +78,0 @@\n-        \/\/ @Ignore(\"8244419\")\n-        controlClasses.remove(TextArea.class);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SkinDisposeContractTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-import javafx.scene.control.TabPane;\n@@ -60,2 +59,0 @@\n-import javafx.scene.control.TextArea;\n-import javafx.scene.control.TextField;\n@@ -118,2 +115,0 @@\n-                \/\/ @Ignore(\"8244419\")\n-                TextArea.class,\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SkinMemoryLeakTest.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}