{"files":[{"patch":"@@ -625,0 +625,4 @@\n+\n+            \/\/ Define global properties based on the version of Java\n+            def status = compareJdkVersion(jdkVersion, \"12\")\n+            ext.jdk12OrLater = (status >= 0)\n@@ -3459,0 +3463,3 @@\n+        if (jdk12OrLater) {\n+            systemProperty 'java.security.manager', 'allow'\n+        }\n@@ -3835,0 +3842,4 @@\n+        if (jdk12OrLater) {\n+            systemProperty 'java.security.manager', 'allow'\n+        }\n+\n","filename":"build.gradle","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,128 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.javafx.concurrent;\n-\n-import java.security.Permission;\n-import org.junit.Ignore;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.BlockJUnit4ClassRunner;\n-import org.junit.runners.model.FrameworkMethod;\n-import org.junit.runners.model.InitializationError;\n-import org.junit.runners.model.Statement;\n-\n-\/**\n- * A test for the Service lifecycle methods with a security manager installed.\n- * The security manager installed lets privileged code run (most of the time)\n- * and otherwise lets the tests do what they need to but restricts the\n- * runtime from doing more or less anything else other than load library.\n- * It is ad-hoc, a more rigorous analysis on what the permissions should be\n- * would be great, and then we could add the ability to do security manager\n- * related tests on lots of different unit tests.\n- *\/\n-@RunWith(ServiceWithSecurityManagerTest.ServiceTestRunner.class)\n-@Ignore(\"JDK-8234175\") \/\/ This class doesn't appear to run correctly, often s.evaluate isn't called. Likely bogus test at present.\n-public class ServiceWithSecurityManagerTest extends ServiceLifecycleTest {\n-\n-    public static final class ServiceTestRunner extends BlockJUnit4ClassRunner {\n-        private ThreadGroup mainThreadGroup;\n-\n-        public ServiceTestRunner(Class<?> klass) throws InitializationError {\n-            super(klass);\n-        }\n-\n-        @Override protected Statement methodBlock(FrameworkMethod method) {\n-            final Statement s = super.methodBlock(method);\n-            return new Statement() {\n-                Throwable throwable;\n-                @Override public void evaluate() throws Throwable {\n-                    SecurityManager original = System.getSecurityManager();\n-                    try {\n-                        mainThreadGroup = new ThreadGroup(Thread.currentThread().getThreadGroup(), \"FX Test Thread Group\");\n-                        Thread thread = new Thread(mainThreadGroup, () -> {\n-                            try {\n-                                s.evaluate();\n-                            } catch (Throwable t) {\n-                                throwable = t;\n-                            }\n-                        });\n-\n-                        System.setSecurityManager(new StrictSecurityManager());\n-                        thread.start();\n-                        thread.join();\n-                    } finally {\n-                        System.setSecurityManager(original);\n-                        mainThreadGroup = null;\n-                        if (throwable != null) {\n-                            throw throwable;\n-                        }\n-                    }\n-                }\n-            };\n-        }\n-\n-        \/**\n-         *\/\n-        private final class StrictSecurityManager extends SecurityManager {\n-            \/\/ If you create a Thread that is a child of mainThreadGroup, that is OK.\n-            \/\/ If you create a ThreadGroup that is a child of mainThreadGroup, then that is bad.\n-            private ThreadGroup securityThreadGroup = new ThreadGroup(\"Security Thread Group\");\n-\n-            @Override public void checkPermission(Permission permission) {\n-                if (isPrivileged()) return; \/\/ OK\n-                if (permission instanceof RuntimePermission) {\n-                    if (\"setSecurityManager\".equals(permission.getName())) {\n-                        return; \/\/ OK\n-                    }\n-                    if (\"accessClassInPackage.sun.util.logging\".equals(permission.getName())) {\n-                        return; \/\/ OK\n-                    }\n-                }\n-                super.checkPermission(permission);\n-            }\n-\n-            @Override public void checkAccess(ThreadGroup g) {\n-                if (g == securityThreadGroup) return;\n-                if (!isPrivileged()) throw new SecurityException(\"ThreadGroup doesn't have permissions\");\n-                super.checkAccess(g);\n-            }\n-\n-            @Override public ThreadGroup getThreadGroup() {\n-                return securityThreadGroup;\n-            }\n-\n-            private boolean isPrivileged() {\n-                StackTraceElement[] stack = Thread.currentThread().getStackTrace();\n-                for (StackTraceElement e : stack) {\n-                    if (e.getClassName().equals(\"java.security.AccessController\")\n-                            && e.getMethodName().equals(\"doPrivileged\")) {\n-                        return true;\n-                    }\n-                }\n-                return false;\n-            }\n-        }\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/concurrent\/ServiceWithSecurityManagerTest.java","additions":0,"deletions":128,"binary":false,"changes":128,"status":"deleted"}]}