{"files":[{"patch":"@@ -88,0 +88,1 @@\n+            new MouseMapping(MouseEvent.MOUSE_DRAGGED, this::mouseDragged, false),\n@@ -236,0 +237,12 @@\n+\n+    \/**\n+     * Invoked when the the Button is dragged. If the Button had been armed\n+     * by a touch event or a mouse press and the mouse is still pressed,\n+     * then this will cause the button to be rearmed. This allows not to fire\n+     * the button's action after dragging or scrolling the button.\n+     *\/\n+    protected void mouseDragged(MouseEvent e) {\n+        if (e.isSynthesized() && getNode().isArmed()) {\n+            getNode().disarm();\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/ButtonBehavior.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+    private boolean showPopupOnMouseRelease = true;\n@@ -69,1 +70,2 @@\n-            new MouseMapping(MouseEvent.MOUSE_RELEASED, this::mouseReleased)\n+            new MouseMapping(MouseEvent.MOUSE_RELEASED, this::mouseReleased),\n+            new MouseMapping(MouseEvent.MOUSE_DRAGGED, this::mouseDragged, false)\n@@ -116,0 +118,1 @@\n+        showPopupOnMouseRelease = true;\n@@ -130,1 +133,1 @@\n-        else if (e.getButton() == MouseButton.PRIMARY) {\n+        else if (e.getButton() == MouseButton.PRIMARY && showPopupOnMouseRelease) {\n@@ -133,0 +136,1 @@\n+        showPopupOnMouseRelease = true;\n@@ -154,0 +158,12 @@\n+    \/**\n+     * Invoked when the the ChoiceBox is dragged. If the box had been armed\n+     * by a touch event or a mouse press and the mouse is still pressed,\n+     * then this will cause the ChoiceBox to fire the box's action. This allows not to fire\n+     * the box's action after dragging or scrolling the box.\n+     *\/\n+    protected void mouseDragged(MouseEvent e) {\n+        if(e.isSynthesized()) {\n+            showPopupOnMouseRelease = false;\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/ChoiceBoxBehavior.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -100,1 +100,2 @@\n-            new MouseMapping(MouseEvent.MOUSE_EXITED, this::mouseExited)\n+            new MouseMapping(MouseEvent.MOUSE_EXITED, this::mouseExited),\n+            new MouseMapping(MouseEvent.MOUSE_DRAGGED, this::mouseDragged, false)\n@@ -266,0 +267,12 @@\n+    \/**\n+     * Invoked when the the ComboBox is dragged. If the box had been armed\n+     * by a touch event or a mouse press and the mouse is still pressed,\n+     * then this will cause the box to be rearmed. This allows not to fire\n+     * the box's action after dragging or scrolling the box.\n+     *\/\n+    public void mouseDragged(MouseEvent e) {\n+        if(e.isSynthesized()) {\n+            showPopupOnMouseRelease = false;\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/ComboBoxBaseBehavior.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -863,0 +863,23 @@\n+            this(eventType, eventHandler, true);\n+        }\n+\n+        \/**\n+         * Creates a new MouseMapping instance that will fire when the given\n+         * {@link MouseEvent} is entered into the application by the user, and this\n+         * will result in the given {@link EventHandler} being fired. The\n+         * eventType argument can be any of the {@link MouseEvent} event types,\n+         * but typically it is one of the following:\n+         *\n+         * <ul>\n+         *     <li>{@link MouseEvent#ANY}<\/li>\n+         *     <li>{@link MouseEvent#MOUSE_PRESSED}<\/li>\n+         *     <li>{@link MouseEvent#MOUSE_CLICKED}<\/li>\n+         *     <li>{@link MouseEvent#MOUSE_RELEASED}<\/li>\n+         * <\/ul>\n+         *\n+         * @param eventType The type of {@link MouseEvent} to listen for.\n+         * @param eventHandler The {@link EventHandler} to fire when the\n+         *           {@link MouseEvent} is observed.\n+         * @param autoConsume Auto consume mouse events\n+         *\/\n+        public MouseMapping(final EventType<MouseEvent> eventType, final EventHandler<MouseEvent> eventHandler, boolean autoConsume) {\n@@ -867,0 +890,1 @@\n+            setAutoConsume(autoConsume);\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/inputmap\/InputMap.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"}]}