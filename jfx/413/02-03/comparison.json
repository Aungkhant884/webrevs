{"files":[{"patch":"@@ -562,0 +562,2 @@\n+        pseudoClassStateChanged(PseudoClass.getPseudoClass(getColumnResizePolicy().toString()), true);\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableView.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,0 +89,1 @@\n+        pseudoClassStateChanged(COLLAPSED_PSEUDOCLASS_STATE, true);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeCell.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -84,0 +84,1 @@\n+        pseudoClassStateChanged(COLLAPSED_PSEUDOCLASS_STATE, true);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableRow.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -416,0 +416,2 @@\n+        pseudoClassStateChanged(PseudoClass.getPseudoClass(getColumnResizePolicy().toString()), true);\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableView.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -206,0 +206,12 @@\n+    @Test public void noArgConstructorSetsDefaultColumnResizePolicyPseudoclass() {\n+        TableView<?> view = new TableView<>();\n+        assertTrue(view.getPseudoClassStates().stream().anyMatch(\n+            c -> c.getPseudoClassName().equals(TableView.UNCONSTRAINED_RESIZE_POLICY.toString())));\n+    }\n+\n+    @Test public void singleArgConstructorSetsDefaultColumnResizePolicyPseudoclass() {\n+        TableView<?> view = new TableView<>(FXCollections.observableArrayList());\n+        assertTrue(view.getPseudoClassStates().stream().anyMatch(\n+            c -> c.getPseudoClassName().equals(TableView.UNCONSTRAINED_RESIZE_POLICY.toString())));\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewTest.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -86,0 +86,6 @@\n+    @Test public void collapsedPseudoclassIsSetByDefault() {\n+        TreeCell<?> cell = new TreeCell<>();\n+        assertTrue(cell.getPseudoClassStates().stream().anyMatch(c -> c.getPseudoClassName().equals(\"collapsed\")));\n+        assertFalse(cell.getPseudoClassStates().stream().anyMatch(c -> c.getPseudoClassName().equals(\"expanded\")));\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeCellTest.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -81,0 +81,6 @@\n+    @Test public void collapsedPseudoclassIsSetByDefault() {\n+        TreeTableRow<?> row = new TreeTableRow<>();\n+        assertTrue(row.getPseudoClassStates().stream().anyMatch(c -> c.getPseudoClassName().equals(\"collapsed\")));\n+        assertFalse(row.getPseudoClassStates().stream().anyMatch(c -> c.getPseudoClassName().equals(\"expanded\")));\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableRowTest.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -263,0 +263,12 @@\n+    @Test public void noArgConstructorSetsDefaultColumnResizePolicyPseudoclass() {\n+        TreeTableView<?> view = new TreeTableView<>();\n+        assertTrue(view.getPseudoClassStates().stream().anyMatch(\n+            c -> c.getPseudoClassName().equals(TreeTableView.UNCONSTRAINED_RESIZE_POLICY.toString())));\n+    }\n+\n+    @Test public void singleArgConstructorSetsDefaultColumnResizePolicyPseudoclass() {\n+        TreeTableView<?> view = new TreeTableView<>(null);\n+        assertTrue(view.getPseudoClassStates().stream().anyMatch(\n+            c -> c.getPseudoClassName().equals(TreeTableView.UNCONSTRAINED_RESIZE_POLICY.toString())));\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewTest.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}