{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,68 @@\n+\n+    \/**\n+     * Registers an event handler for this target.\n+     * <p>\n+     * The handler is called when the target receives an {@link Event} of the specified\n+     * type during the bubbling phase of event delivery.\n+     *\n+     * @param <E> the event class of the handler\n+     * @param eventType the type of the events received by the handler\n+     * @param eventHandler the event handler\n+     * @throws NullPointerException if {@code eventType} or {@code eventHandler} is {@code null}\n+     * @throws UnsupportedOperationException if this target does not support event handlers\n+     * @since 21\n+     *\/\n+    default <E extends Event> void addEventHandler(EventType<E> eventType, EventHandler<? super E> eventHandler) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    \/**\n+     * Unregisters a previously registered event handler from this target.\n+     * <p>\n+     * It is possible to register a single {@link EventHandler} instance for different event types,\n+     * so the caller needs to specify the event type from which the handler should be unregistered.\n+     *\n+     * @param <E> the event class of the handler\n+     * @param eventType the event type from which to unregister\n+     * @param eventHandler the event handler\n+     * @throws NullPointerException if {@code eventType} or {@code eventHandler} is {@code null}\n+     * @throws UnsupportedOperationException if this target does not support event handlers\n+     * @since 21\n+     *\/\n+    default <E extends Event> void removeEventHandler(EventType<E> eventType, EventHandler<? super E> eventHandler) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    \/**\n+     * Registers an event filter for this target.\n+     * <p>\n+     * The filter is called when the node receives an {@link Event} of the specified\n+     * type during the capturing phase of event delivery.\n+     *\n+     * @param <E> the event class of the filter\n+     * @param eventType the type of the events received by the filter\n+     * @param eventFilter the event filter\n+     * @throws NullPointerException if {@code eventType} or {@code eventFilter} is {@code null}\n+     * @throws UnsupportedOperationException if this target does not support event filters\n+     * @since 21\n+     *\/\n+    default <E extends Event> void addEventFilter(EventType<E> eventType, EventHandler<? super E> eventFilter) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    \/**\n+     * Unregisters a previously registered event filter from this target.\n+     * <p>\n+     * It is possible to register a single {@link EventHandler} instance for different event types,\n+     * so the caller needs to specify the event type from which the filter should be unregistered.\n+     *\n+     * @param <E> the event class of the filter\n+     * @param eventType the event type from which to unregister\n+     * @param eventFilter the event filter\n+     * @throws NullPointerException if {@code eventType} or {@code eventFilter} is {@code null}\n+     * @throws UnsupportedOperationException if this target does not support event filters\n+     * @since 21\n+     *\/\n+    default <E extends Event> void removeEventFilter(EventType<E> eventType, EventHandler<? super E> eventFilter) {\n+        throw new UnsupportedOperationException();\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/event\/EventTarget.java","additions":69,"deletions":1,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+import javafx.event.EventType;\n@@ -897,2 +898,2 @@\n-    \/** {@inheritDoc} *\/\n-    @Override public EventDispatchChain buildEventDispatchChain(EventDispatchChain tail) {\n+    @Override\n+    public EventDispatchChain buildEventDispatchChain(EventDispatchChain tail) {\n@@ -902,0 +903,20 @@\n+    @Override\n+    public final <E extends Event> void addEventHandler(EventType<E> eventType, EventHandler<? super E> eventHandler) {\n+        eventHandlerManager.addEventHandler(eventType, eventHandler);\n+    }\n+\n+    @Override\n+    public final <E extends Event> void removeEventHandler(EventType<E> eventType, EventHandler<? super E> eventHandler) {\n+        eventHandlerManager.removeEventHandler(eventType, eventHandler);\n+    }\n+\n+    @Override\n+    public final <E extends Event> void addEventFilter(EventType<E> eventType, EventHandler<? super E> eventFilter) {\n+        eventHandlerManager.addEventFilter(eventType, eventFilter);\n+    }\n+\n+    @Override\n+    public final <E extends Event> void removeEventFilter(EventType<E> eventType, EventHandler<? super E> eventFilter) {\n+        eventHandlerManager.removeEventFilter(eventType, eventFilter);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Dialog.java","additions":24,"deletions":3,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import javafx.event.EventDispatchChain;\n@@ -42,1 +43,0 @@\n-import javafx.event.EventDispatchChain;\n@@ -432,12 +432,2 @@\n-    \/** {@inheritDoc} *\/\n-    @Override public <E extends Event> void addEventHandler(EventType<E> eventType, EventHandler<E> eventHandler) {\n-        eventHandlerManager.addEventHandler(eventType, eventHandler);\n-    }\n-\n-    \/** {@inheritDoc} *\/\n-    @Override public <E extends Event> void removeEventHandler(EventType<E> eventType, EventHandler<E> eventHandler) {\n-        eventHandlerManager.removeEventHandler(eventType, eventHandler);\n-    }\n-\n-     \/** {@inheritDoc} *\/\n-    @Override public EventDispatchChain buildEventDispatchChain(EventDispatchChain tail) {\n+    @Override\n+    public EventDispatchChain buildEventDispatchChain(EventDispatchChain tail) {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Menu.java","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -462,31 +462,2 @@\n-    \/**\n-     * Registers an event handler to this MenuItem. The handler is called when the\n-     * menu item receives an {@code Event} of the specified type during the bubbling\n-     * phase of event delivery.\n-     *\n-     * @param <E> the specific event class of the handler\n-     * @param eventType the type of the events to receive by the handler\n-     * @param eventHandler the handler to register\n-     * @throws NullPointerException if the event type or handler is null\n-     *\/\n-    public <E extends Event> void addEventHandler(EventType<E> eventType, EventHandler<E> eventHandler) {\n-        eventHandlerManager.addEventHandler(eventType, eventHandler);\n-    }\n-\n-    \/**\n-     * Unregisters a previously registered event handler from this MenuItem. One\n-     * handler might have been registered for different event types, so the\n-     * caller needs to specify the particular event type from which to\n-     * unregister the handler.\n-     *\n-     * @param <E> the specific event class of the handler\n-     * @param eventType the event type from which to unregister\n-     * @param eventHandler the handler to unregister\n-     * @throws NullPointerException if the event type or handler is null\n-     *\/\n-    public <E extends Event> void removeEventHandler(EventType<E> eventType, EventHandler<E> eventHandler) {\n-        eventHandlerManager.removeEventHandler(eventType, eventHandler);\n-    }\n-\n-    \/** {@inheritDoc} *\/\n-    @Override public EventDispatchChain buildEventDispatchChain(EventDispatchChain tail) {\n+    @Override\n+    public EventDispatchChain buildEventDispatchChain(EventDispatchChain tail) {\n@@ -505,0 +476,20 @@\n+    @Override\n+    public <E extends Event> void addEventHandler(EventType<E> eventType, EventHandler<? super E> eventHandler) {\n+        eventHandlerManager.addEventHandler(eventType, eventHandler);\n+    }\n+\n+    @Override\n+    public <E extends Event> void removeEventHandler(EventType<E> eventType, EventHandler<? super E> eventHandler) {\n+        eventHandlerManager.removeEventHandler(eventType, eventHandler);\n+    }\n+\n+    @Override\n+    public <E extends Event> void addEventFilter(EventType<E> eventType, EventHandler<? super E> eventFilter) {\n+        eventHandlerManager.addEventFilter(eventType, eventFilter);\n+    }\n+\n+    @Override\n+    public <E extends Event> void removeEventFilter(EventType<E> eventType, EventHandler<? super E> eventFilter) {\n+        eventHandlerManager.removeEventFilter(eventType, eventFilter);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/MenuItem.java","additions":23,"deletions":32,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -823,1 +823,0 @@\n-     \/** {@inheritDoc} *\/\n@@ -829,0 +828,20 @@\n+    @Override\n+    public final <E extends Event> void addEventHandler(EventType<E> eventType, EventHandler<? super E> eventHandler) {\n+        eventHandlerManager.addEventHandler(eventType, eventHandler);\n+    }\n+\n+    @Override\n+    public final <E extends Event> void removeEventHandler(EventType<E> eventType, EventHandler<? super E> eventHandler) {\n+        eventHandlerManager.removeEventHandler(eventType, eventHandler);\n+    }\n+\n+    @Override\n+    public final <E extends Event> void addEventFilter(EventType<E> eventType, EventHandler<? super E> eventFilter) {\n+        eventHandlerManager.addEventFilter(eventType, eventFilter);\n+    }\n+\n+    @Override\n+    public final <E extends Event> void removeEventFilter(EventType<E> eventType, EventHandler<? super E> eventFilter) {\n+        eventHandlerManager.removeEventFilter(eventType, eventFilter);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Tab.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -729,2 +729,2 @@\n-    \/** {@inheritDoc} *\/\n-    @Override public EventDispatchChain buildEventDispatchChain(EventDispatchChain tail) {\n+    @Override\n+    public EventDispatchChain buildEventDispatchChain(EventDispatchChain tail) {\n@@ -735,9 +735,4 @@\n-     * Registers an event handler to this table column. The TableColumnBase class allows\n-     * registration of listeners which will be notified when editing occurs.\n-     * Note however that TableColumnBase is <b>not<\/b> a Node, and therefore no visual\n-     * events will be fired on it.\n-     *\n-     * @param <E> The type of event\n-     * @param eventType the type of the events to receive by the handler\n-     * @param eventHandler the handler to register\n-     * @throws NullPointerException if the event type or handler is null\n+     * {@inheritDoc}\n+     * <p>\n+     * The {@code TableColumnBase} class allows registration of listeners which will be notified when editing occurs.\n+     * Note that {@code TableColumnBase} is <b>not<\/b> a {@link Node}, and therefore no visual events will be fired on it.\n@@ -745,1 +740,2 @@\n-    public <E extends Event> void addEventHandler(EventType<E> eventType, EventHandler<E> eventHandler) {\n+    @Override\n+    public <E extends Event> void addEventHandler(EventType<E> eventType, EventHandler<? super E> eventHandler) {\n@@ -749,12 +745,2 @@\n-    \/**\n-     * Unregisters a previously registered event handler from this table column. One\n-     * handler might have been registered for different event types, so the\n-     * caller needs to specify the particular event type from which to\n-     * unregister the handler.\n-     *\n-     * @param <E> The type of event\n-     * @param eventType the event type from which to unregister\n-     * @param eventHandler the handler to unregister\n-     * @throws NullPointerException if the event type or handler is null\n-     *\/\n-    public <E extends Event> void removeEventHandler(EventType<E> eventType, EventHandler<E> eventHandler) {\n+    @Override\n+    public <E extends Event> void removeEventHandler(EventType<E> eventType, EventHandler<? super E> eventHandler) {\n@@ -764,0 +750,10 @@\n+    \/**\n+     * {@inheritDoc}\n+     * <p>\n+     * The {@code TableColumnBase} class allows registration of listeners which will be notified when editing occurs.\n+     * Note that {@code TableColumnBase} is <b>not<\/b> a {@link Node}, and therefore no visual events will be fired on it.\n+     *\/\n+    @Override\n+    public <E extends Event> void addEventFilter(EventType<E> eventType, EventHandler<? super E> eventHandler) {\n+        eventHandlerManager.addEventFilter(eventType, eventHandler);\n+    }\n@@ -765,0 +761,4 @@\n+    @Override\n+    public <E extends Event> void removeEventFilter(EventType<E> eventType, EventHandler<? super E> eventHandler) {\n+        eventHandlerManager.removeEventFilter(eventType, eventHandler);\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableColumnBase.java","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -776,2 +776,2 @@\n-    \/** {@inheritDoc} *\/\n-    @Override public EventDispatchChain buildEventDispatchChain(EventDispatchChain tail) {\n+    @Override\n+    public EventDispatchChain buildEventDispatchChain(EventDispatchChain tail) {\n@@ -788,12 +788,7 @@\n-     * Registers an event handler to this TreeItem. The TreeItem class allows\n-     * registration of listeners which will be notified as the\n-     * number of items changes, their position or if the values themselves change.\n-     * Note however that a TreeItem is <b>not<\/b> a Node, and therefore no visual\n-     * events will be fired on the TreeItem. To get these events, it is necessary to\n-     * add relevant observers to the TreeCell instances (via a custom cell factory -\n-     * see the {@link Cell} class documentation for more details).\n-     *\n-     * @param <E> The event\n-     * @param eventType the type of the events to receive by the handler\n-     * @param eventHandler the handler to register\n-     * @throws NullPointerException if the event type or handler is null\n+     * {@inheritDoc}\n+     * <p>\n+     * The {@code TreeItem} class allows registration of listeners which will be notified as the number of items\n+     * changes, their position, or if the values themselves change. Note that {@code TreeItem} is <b>not<\/b> a\n+     * {@link Node}, and therefore no visual events will be fired on it. To get these events, it is necessary to\n+     * add relevant observers to the {@code TreeCell} instances via a custom cell factory (see the {@link Cell}\n+     * class documentation for more details).\n@@ -801,1 +796,2 @@\n-    public <E extends Event> void addEventHandler(EventType<E> eventType, EventHandler<E> eventHandler) {\n+    @Override\n+    public <E extends Event> void addEventHandler(EventType<E> eventType, EventHandler<? super E> eventHandler) {\n@@ -805,12 +801,2 @@\n-    \/**\n-     * Unregisters a previously registered event handler from this TreeItem. One\n-     * handler might have been registered for different event types, so the\n-     * caller needs to specify the particular event type from which to\n-     * unregister the handler.\n-     *\n-     * @param <E> The event\n-     * @param eventType the event type from which to unregister\n-     * @param eventHandler the handler to unregister\n-     * @throws NullPointerException if the event type or handler is null\n-     *\/\n-    public <E extends Event> void removeEventHandler(EventType<E> eventType, EventHandler<E> eventHandler) {\n+    @Override\n+    public <E extends Event> void removeEventHandler(EventType<E> eventType, EventHandler<? super E> eventHandler) {\n@@ -820,0 +806,13 @@\n+    \/**\n+     * {@inheritDoc}\n+     * <p>\n+     * The {@code TreeItem} class allows registration of listeners which will be notified as the number of items\n+     * changes, their position, or if the values themselves change. Note that {@code TreeItem} is <b>not<\/b> a\n+     * {@link Node}, and therefore no visual events will be fired on it. To get these events, it is necessary to\n+     * add relevant observers to the {@code TreeCell} instances via a custom cell factory (see the {@link Cell}\n+     * class documentation for more details).\n+     *\/\n+    @Override\n+    public <E extends Event> void addEventFilter(EventType<E> eventType, EventHandler<? super E> eventHandler) {\n+        eventHandlerManager.addEventFilter(eventType, eventHandler);\n+    }\n@@ -821,0 +820,4 @@\n+    @Override\n+    public <E extends Event> void removeEventFilter(EventType<E> eventType, EventHandler<? super E> eventHandler) {\n+        eventHandlerManager.removeEventFilter(eventType, eventHandler);\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeItem.java","additions":31,"deletions":28,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -744,13 +744,1 @@\n-    \/**\n-     * Registers an event handler to this task. Any event filters are first\n-     * processed, then the specified onFoo event handlers, and finally any\n-     * event handlers registered by this method. As with other events\n-     * in the scene graph, if an event is consumed, it will not continue\n-     * dispatching.\n-     *\n-     * @param <T> the specific event class of the handler\n-     * @param eventType the type of the events to receive by the handler\n-     * @param eventHandler the handler to register\n-     * @throws NullPointerException if the event type or handler is null\n-     * @since JavaFX 2.1\n-     *\/\n+    @Override\n@@ -764,12 +752,1 @@\n-    \/**\n-     * Unregisters a previously registered event handler from this task. One\n-     * handler might have been registered for different event types, so the\n-     * caller needs to specify the particular event type from which to\n-     * unregister the handler.\n-     *\n-     * @param <T> the specific event class of the handler\n-     * @param eventType the event type from which to unregister\n-     * @param eventHandler the handler to unregister\n-     * @throws NullPointerException if the event type or handler is null\n-     * @since JavaFX 2.1\n-     *\/\n+    @Override\n@@ -783,10 +760,1 @@\n-    \/**\n-     * Registers an event filter to this task. Registered event filters get\n-     * an event before any associated event handlers.\n-     *\n-     * @param <T> the specific event class of the filter\n-     * @param eventType the type of the events to receive by the filter\n-     * @param eventFilter the filter to register\n-     * @throws NullPointerException if the event type or filter is null\n-     * @since JavaFX 2.1\n-     *\/\n+    @Override\n@@ -800,12 +768,1 @@\n-    \/**\n-     * Unregisters a previously registered event filter from this task. One\n-     * filter might have been registered for different event types, so the\n-     * caller needs to specify the particular event type from which to\n-     * unregister the filter.\n-     *\n-     * @param <T> the specific event class of the filter\n-     * @param eventType the event type from which to unregister\n-     * @param eventFilter the filter to unregister\n-     * @throws NullPointerException if the event type or filter is null\n-     * @since JavaFX 2.1\n-     *\/\n+    @Override\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/concurrent\/Service.java","additions":5,"deletions":48,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1251,13 +1251,1 @@\n-    \/**\n-     * Registers an event handler to this task. Any event filters are first\n-     * processed, then the specified onFoo event handlers, and finally any\n-     * event handlers registered by this method. As with other events\n-     * in the scene graph, if an event is consumed, it will not continue\n-     * dispatching.\n-     *\n-     * @param <T> the specific event class of the handler\n-     * @param eventType the type of the events to receive by the handler\n-     * @param eventHandler the handler to register\n-     * @throws NullPointerException if the event type or handler is null\n-     * @since JavaFX 2.1\n-     *\/\n+    @Override\n@@ -1271,12 +1259,1 @@\n-    \/**\n-     * Unregisters a previously registered event handler from this task. One\n-     * handler might have been registered for different event types, so the\n-     * caller needs to specify the particular event type from which to\n-     * unregister the handler.\n-     *\n-     * @param <T> the specific event class of the handler\n-     * @param eventType the event type from which to unregister\n-     * @param eventHandler the handler to unregister\n-     * @throws NullPointerException if the event type or handler is null\n-     * @since JavaFX 2.1\n-     *\/\n+    @Override\n@@ -1290,10 +1267,1 @@\n-    \/**\n-     * Registers an event filter to this task. Registered event filters get\n-     * an event before any associated event handlers.\n-     *\n-     * @param <T> the specific event class of the filter\n-     * @param eventType the type of the events to receive by the filter\n-     * @param eventFilter the filter to register\n-     * @throws NullPointerException if the event type or filter is null\n-     * @since JavaFX 2.1\n-     *\/\n+    @Override\n@@ -1307,12 +1275,1 @@\n-    \/**\n-     * Unregisters a previously registered event filter from this task. One\n-     * filter might have been registered for different event types, so the\n-     * caller needs to specify the particular event type from which to\n-     * unregister the filter.\n-     *\n-     * @param <T> the specific event class of the filter\n-     * @param eventType the event type from which to unregister\n-     * @param eventFilter the filter to unregister\n-     * @throws NullPointerException if the event type or filter is null\n-     * @since JavaFX 2.1\n-     *\/\n+    @Override\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/concurrent\/Task.java","additions":5,"deletions":48,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -8736,11 +8736,1 @@\n-    \/\/ PENDING_DOC_REVIEW\n-    \/**\n-     * Registers an event handler to this node. The handler is called when the\n-     * node receives an {@code Event} of the specified type during the bubbling\n-     * phase of event delivery.\n-     *\n-     * @param <T> the specific event class of the handler\n-     * @param eventType the type of the events to receive by the handler\n-     * @param eventHandler the handler to register\n-     * @throws NullPointerException if the event type or handler is null\n-     *\/\n+    @Override\n@@ -8754,12 +8744,1 @@\n-    \/\/ PENDING_DOC_REVIEW\n-    \/**\n-     * Unregisters a previously registered event handler from this node. One\n-     * handler might have been registered for different event types, so the\n-     * caller needs to specify the particular event type from which to\n-     * unregister the handler.\n-     *\n-     * @param <T> the specific event class of the handler\n-     * @param eventType the event type from which to unregister\n-     * @param eventHandler the handler to unregister\n-     * @throws NullPointerException if the event type or handler is null\n-     *\/\n+    @Override\n@@ -8774,11 +8753,1 @@\n-    \/\/ PENDING_DOC_REVIEW\n-    \/**\n-     * Registers an event filter to this node. The filter is called when the\n-     * node receives an {@code Event} of the specified type during the capturing\n-     * phase of event delivery.\n-     *\n-     * @param <T> the specific event class of the filter\n-     * @param eventType the type of the events to receive by the filter\n-     * @param eventFilter the filter to register\n-     * @throws NullPointerException if the event type or filter is null\n-     *\/\n+    @Override\n@@ -8792,12 +8761,1 @@\n-    \/\/ PENDING_DOC_REVIEW\n-    \/**\n-     * Unregisters a previously registered event filter from this node. One\n-     * filter might have been registered for different event types, so the\n-     * caller needs to specify the particular event type from which to\n-     * unregister the filter.\n-     *\n-     * @param <T> the specific event class of the filter\n-     * @param eventType the event type from which to unregister\n-     * @param eventFilter the filter to unregister\n-     * @throws NullPointerException if the event type or filter is null\n-     *\/\n+    @Override\n@@ -8853,8 +8811,0 @@\n-    \/\/ PENDING_DOC_REVIEW\n-    \/**\n-     * Construct an event dispatch chain for this node. The event dispatch chain\n-     * contains all event dispatchers from the stage to this node.\n-     *\n-     * @param tail the initial chain to build from\n-     * @return the resulting event dispatch chain for this node\n-     *\/\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":4,"deletions":54,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -4238,11 +4238,1 @@\n-    \/\/ PENDING_DOC_REVIEW\n-    \/**\n-     * Registers an event handler to this scene. The handler is called when the\n-     * scene receives an {@code Event} of the specified type during the bubbling\n-     * phase of event delivery.\n-     *\n-     * @param <T> the specific event class of the handler\n-     * @param eventType the type of the events to receive by the handler\n-     * @param eventHandler the handler to register\n-     * @throws NullPointerException if the event type or handler is null\n-     *\/\n+    @Override\n@@ -4256,12 +4246,1 @@\n-    \/\/ PENDING_DOC_REVIEW\n-    \/**\n-     * Unregisters a previously registered event handler from this scene. One\n-     * handler might have been registered for different event types, so the\n-     * caller needs to specify the particular event type from which to\n-     * unregister the handler.\n-     *\n-     * @param <T> the specific event class of the handler\n-     * @param eventType the event type from which to unregister\n-     * @param eventHandler the handler to unregister\n-     * @throws NullPointerException if the event type or handler is null\n-     *\/\n+    @Override\n@@ -4276,11 +4255,1 @@\n-    \/\/ PENDING_DOC_REVIEW\n-    \/**\n-     * Registers an event filter to this scene. The filter is called when the\n-     * scene receives an {@code Event} of the specified type during the\n-     * capturing phase of event delivery.\n-     *\n-     * @param <T> the specific event class of the filter\n-     * @param eventType the type of the events to receive by the filter\n-     * @param eventFilter the filter to register\n-     * @throws NullPointerException if the event type or filter is null\n-     *\/\n+    @Override\n@@ -4294,12 +4263,1 @@\n-    \/\/ PENDING_DOC_REVIEW\n-    \/**\n-     * Unregisters a previously registered event filter from this scene. One\n-     * filter might have been registered for different event types, so the\n-     * caller needs to specify the particular event type from which to\n-     * unregister the filter.\n-     *\n-     * @param <T> the specific event class of the filter\n-     * @param eventType the event type from which to unregister\n-     * @param eventFilter the filter to unregister\n-     * @throws NullPointerException if the event type or filter is null\n-     *\/\n+    @Override\n@@ -4397,8 +4355,0 @@\n-    \/\/ PENDING_DOC_REVIEW\n-    \/**\n-     * Construct an event dispatch chain for this scene. The event dispatch\n-     * chain contains all event dispatchers from the stage to this scene.\n-     *\n-     * @param tail the initial chain to build from\n-     * @return the resulting event dispatch chain for this scene\n-     *\/\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Scene.java","additions":5,"deletions":55,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1912,0 +1912,1 @@\n+     * {@inheritDoc}\n@@ -1913,14 +1914,2 @@\n-     * Registers an event handler to this transform. Any event filters are first\n-     * processed, then the specified onFoo event handlers, and finally any\n-     * event handlers registered by this method.\n-     * <\/p><p>\n-     * Currently the only event delivered to a {@code Transform} is the\n-     * {@code TransformChangedEvent} with it's single type\n-     * {@code TRANSFORM_CHANGED}.\n-     * <\/p>\n-     *\n-     * @param <T> the specific event class of the handler\n-     * @param eventType the type of the events to receive by the handler\n-     * @param eventHandler the handler to register\n-     * @throws NullPointerException if the event type or handler is null\n-     * @since JavaFX 8.0\n+     * Currently the only event delivered to a {@code Transform} is the {@code TransformChangedEvent}\n+     * with its single type {@code TRANSFORM_CHANGED}.\n@@ -1928,0 +1917,1 @@\n+    @Override\n@@ -1937,12 +1927,1 @@\n-    \/**\n-     * Unregisters a previously registered event handler from this transform.\n-     * One handler might have been registered for different event types, so the\n-     * caller needs to specify the particular event type from which to\n-     * unregister the handler.\n-     *\n-     * @param <T> the specific event class of the handler\n-     * @param eventType the event type from which to unregister\n-     * @param eventHandler the handler to unregister\n-     * @throws NullPointerException if the event type or handler is null\n-     * @since JavaFX 8.0\n-     *\/\n+    @Override\n@@ -1957,0 +1936,1 @@\n+     * {@inheritDoc}\n@@ -1958,12 +1938,2 @@\n-     * Registers an event filter to this transform. Registered event filters get\n-     * an event before any associated event handlers.\n-     * <\/p><p>\n-     * Currently the only event delivered to a {@code Transform} is the\n-     * {@code TransformChangedEvent} with it's single type\n-     * {@code TRANSFORM_CHANGED}.\n-     *\n-     * @param <T> the specific event class of the filter\n-     * @param eventType the type of the events to receive by the filter\n-     * @param eventFilter the filter to register\n-     * @throws NullPointerException if the event type or filter is null\n-     * @since JavaFX 8.0\n+     * Currently the only event delivered to a {@code Transform} is the {@code TransformChangedEvent}\n+     * with its single type {@code TRANSFORM_CHANGED}.\n@@ -1971,0 +1941,1 @@\n+    @Override\n@@ -1980,12 +1951,1 @@\n-    \/**\n-     * Unregisters a previously registered event filter from this transform. One\n-     * filter might have been registered for different event types, so the\n-     * caller needs to specify the particular event type from which to\n-     * unregister the filter.\n-     *\n-     * @param <T> the specific event class of the filter\n-     * @param eventType the event type from which to unregister\n-     * @param eventFilter the filter to unregister\n-     * @throws NullPointerException if the event type or filter is null\n-     * @since JavaFX 8.0\n-     *\/\n+    @Override\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/transform\/Transform.java","additions":11,"deletions":51,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1314,11 +1314,1 @@\n-    \/\/ PENDING_DOC_REVIEW\n-    \/**\n-     * Registers an event handler to this node. The handler is called when the\n-     * node receives an {@code Event} of the specified type during the bubbling\n-     * phase of event delivery.\n-     *\n-     * @param <T> the specific event class of the handler\n-     * @param eventType the type of the events to receive by the handler\n-     * @param eventHandler the handler to register\n-     * @throws NullPointerException if the event type or handler is null\n-     *\/\n+    @Override\n@@ -1332,12 +1322,1 @@\n-    \/\/ PENDING_DOC_REVIEW\n-    \/**\n-     * Unregisters a previously registered event handler from this node. One\n-     * handler might have been registered for different event types, so the\n-     * caller needs to specify the particular event type from which to\n-     * unregister the handler.\n-     *\n-     * @param <T> the specific event class of the handler\n-     * @param eventType the event type from which to unregister\n-     * @param eventHandler the handler to unregister\n-     * @throws NullPointerException if the event type or handler is null\n-     *\/\n+    @Override\n@@ -1352,11 +1331,1 @@\n-    \/\/ PENDING_DOC_REVIEW\n-    \/**\n-     * Registers an event filter to this node. The filter is called when the\n-     * node receives an {@code Event} of the specified type during the capturing\n-     * phase of event delivery.\n-     *\n-     * @param <T> the specific event class of the filter\n-     * @param eventType the type of the events to receive by the filter\n-     * @param eventFilter the filter to register\n-     * @throws NullPointerException if the event type or filter is null\n-     *\/\n+    @Override\n@@ -1370,12 +1339,1 @@\n-    \/\/ PENDING_DOC_REVIEW\n-    \/**\n-     * Unregisters a previously registered event filter from this node. One\n-     * filter might have been registered for different event types, so the\n-     * caller needs to specify the particular event type from which to\n-     * unregister the filter.\n-     *\n-     * @param <T> the specific event class of the filter\n-     * @param eventType the event type from which to unregister\n-     * @param eventFilter the filter to unregister\n-     * @throws NullPointerException if the event type or filter is null\n-     *\/\n+    @Override\n@@ -1436,7 +1394,0 @@\n-    \/\/ PENDING_DOC_REVIEW\n-    \/**\n-     * Construct an event dispatch chain for this window.\n-     *\n-     * @param tail the initial chain to build from\n-     * @return the resulting event dispatch chain for this window\n-     *\/\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/stage\/Window.java","additions":5,"deletions":54,"binary":false,"changes":59,"status":"modified"}]}