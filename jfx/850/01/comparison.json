{"files":[{"patch":"@@ -234,1 +234,1 @@\n-JDK 11 (at a minimum) is required to build OpenJFX. You must have the JDK\n+JDK 17 (at a minimum) is required to build OpenJFX. You must have the JDK\n@@ -238,1 +238,1 @@\n-Currently OpenJFX will build and run on JDK 11 through JDK 18. JDK 17 is recommended.\n+Currently OpenJFX will build and run on JDK 17 through JDK 18.\n","filename":"CONTRIBUTING.md","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -368,0 +368,3 @@\n+\/\/ JAVA_TARGET_VERSION specifies the minimum compile and runtime Java version that we will target when building the JavaFX classes\n+ext.JAVA_TARGET_VERSION = Integer.parseInt(jfxJdkTargetVersion)\n+\n@@ -630,2 +633,6 @@\n-            def status = compareJdkVersion(jdkVersion, \"12\")\n-            ext.jdk12OrLater = (status >= 0)\n+            \/\/ For example, we could define a \"jdk18OrLater\" property as\n+            \/\/ follows that could then be used implement conditional build\n+            \/\/ logic based on whether we were running on JDK 18 or later,\n+            \/\/ should the need arise.\n+\/\/            def status = compareJdkVersion(jdkVersion, \"18\")\n+\/\/            ext.jdk18OrLater = (status >= 0)\n@@ -1343,0 +1350,1 @@\n+logger.quiet(\"Java target version: ${JAVA_TARGET_VERSION}\")\n@@ -1957,1 +1965,5 @@\n-    sourceCompatibility = 11\n+\n+    \/\/ Set sourceCompatibility to the target release of Java. Most modules\n+    \/\/ set compiler.options.release (to the same target version), which will\n+    \/\/ override this setting, but it is needed for those modules that can't.\n+    sourceCompatibility = JAVA_TARGET_VERSION\n@@ -2629,0 +2641,6 @@\n+    \/\/ We need to skip setting compiler.options.release for this module,\n+    \/\/ since javafx.swing requires jdk.unsupoprted.desktop, which is\n+    \/\/ excluded by \"--release NN\". This will fall back to using\n+    \/\/ \"-source NN -target NN\" for this module.\n+    project.ext.skipJavaCompilerOptionRelease = true\n+\n@@ -3489,3 +3507,1 @@\n-        if (jdk12OrLater) {\n-            systemProperty 'java.security.manager', 'allow'\n-        }\n+        systemProperty 'java.security.manager', 'allow'\n@@ -3700,0 +3716,6 @@\n+    \/\/ We need to skip setting compiler.options.release for system tests,\n+    \/\/ since the tests export an internal package from java.desktop, which\n+    \/\/ is disallowed by \"--release NN\". This will fall back to using\n+    \/\/ \"-source NN -target NN\" for the system tests.\n+    project.ext.skipJavaCompilerOptionRelease = true\n+\n@@ -3869,3 +3891,1 @@\n-        if (jdk12OrLater) {\n-            systemProperty 'java.security.manager', 'allow'\n-        }\n+        systemProperty 'java.security.manager', 'allow'\n@@ -3906,0 +3926,9 @@\n+\n+        if (project.hasProperty('skipJavaCompilerOptionRelease') &&\n+                project.ext.skipJavaCompilerOptionRelease) {\n+\n+            logger.info \"Using 'javac -source\/-target' for ${compile}\"\n+        } else {\n+            compile.options.release = JAVA_TARGET_VERSION\n+        }\n+\n","filename":"build.gradle","additions":38,"deletions":9,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -73,0 +73,4 @@\n+# jfx.jdk.target.version is set to the minimum runtime version that\n+# JavaFX will run on. This is passed to javac as the value of \"--release\",\n+# so it also defines the language features that can be used.\n+#\n@@ -78,2 +82,3 @@\n-jfx.build.jdk.version.min=11\n-jfx.build.jdk.buildnum.min=28\n+jfx.build.jdk.version.min=17\n+jfx.build.jdk.buildnum.min=35\n+jfx.jdk.target.version=17\n@@ -88,1 +93,1 @@\n-jfx.gradle.version.min=6.3\n+jfx.gradle.version.min=7.3\n","filename":"build.properties","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"}]}