{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import javafx.application.Platform;\n@@ -45,0 +46,5 @@\n+\n+    boolean isInserted = false;\n+    Callback callback = null;\n+\n+    private Callback lastSetCallback = null;\n@@ -66,1 +72,3 @@\n-                              pixels, enabled, checked, callback);\n+                pixels, enabled, checked, callback);\n+        this.callback = callback;\n+        isInserted = true;\n@@ -73,0 +81,2 @@\n+        macMenu.isInserted = true;\n+        macMenu.updateCallback();\n@@ -79,0 +89,4 @@\n+        if (macMenu != null) {\n+            macMenu.isInserted = true;\n+            macMenu.updateCallback();\n+        }\n@@ -86,0 +100,2 @@\n+        macMenu.isInserted = false;\n+        macMenu.callback = null;\n@@ -87,0 +103,5 @@\n+        Platform.runLater(() -> {\n+            \/\/ runLater seems to be important, because otherwise sometimes the callable isn't called.\n+            \/\/ This is probably, because the menu is closed before the callback is called.\n+            macMenu.updateCallback();\n+        });\n@@ -93,0 +114,9 @@\n+        if (macMenu != null) {\n+            macMenu.isInserted = false;\n+            macMenu.callback = null;\n+            Platform.runLater(() -> {\n+                \/\/ runLater seems to be important, because otherwise sometimes the callable isn't called.\n+                \/\/ This is probably, because the menu is closed before the callback is called.\n+                macMenu.updateCallback();\n+            });\n+        }\n@@ -127,0 +157,13 @@\n+    private void updateCallback() {\n+        if (isInserted) {\n+            if (lastSetCallback != callback) {\n+                _setCallback(ptr, callback);\n+                lastSetCallback = callback;\n+            }\n+        } else {\n+            if (lastSetCallback != null) {\n+                _setCallback(ptr, null);\n+                lastSetCallback = null;\n+            }\n+        }\n+    }\n@@ -128,1 +171,2 @@\n-        _setCallback(ptr, callback);\n+        this.callback = callback;\n+        updateCallback();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacMenuDelegate.java","additions":46,"deletions":2,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+package test.javafx.scene.control;\n+\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.event.ActionEvent;\n+import javafx.event.EventHandler;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Menu;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import org.junit.*;\n+import test.com.sun.javafx.pgstub.StubToolkit;\n+import test.util.Util;\n+import test.util.memory.JMemoryBuddy;\n+import javafx.application.Platform;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class SystemMenuBarTest {\n+\n+    @BeforeClass\n+    public static void initFX() throws Exception {\n+        CountDownLatch startupLatch = new CountDownLatch(1);\n+        Platform.setImplicitExit(false);\n+        Util.startup(startupLatch, startupLatch::countDown);\n+    }\n+\n+    @AfterClass\n+    public static void teardownOnce() {\n+        Util.shutdown();\n+    }\n+\n+    @Test\n+    public void test_JDK_8299423() {\n+        \/**\n+         * We want to test, if we add a menu to the system-menu, whether it's callable get's collected after the entry is removed.\n+         *\n+         *\/\n+        JMemoryBuddy.memoryTest((checker) -> {\n+            CountDownLatch latch = new CountDownLatch(1);\n+            Platform.runLater(() -> {\n+                Stage stage = new Stage();\n+                MenuBar menuBar = new MenuBar();\n+                VBox root = new VBox(menuBar);\n+                stage.setScene(new Scene(root));\n+                menuBar.setUseSystemMenuBar(true);\n+                Menu menu1 = new Menu(\"menu-1\");\n+                var item2 = new MenuItem(\"remove above\");\n+                menu1.getItems().add(item2);\n+                menuBar.getMenus().add(menu1);\n+                EventHandler<ActionEvent> listener = new EventHandler<ActionEvent>() {\n+                    @Override\n+                    public void handle(ActionEvent event) {\n+                        System.out.println(\"I'm the listener, but no one calls me.\");\n+                    }\n+                };\n+                item2.setOnAction(listener);\n+                stage.show();\n+\n+                checker.assertCollectable(listener);\n+\n+                new Thread(() -> {\n+                    try {\n+                        Thread.sleep(1000);\n+                    } catch (InterruptedException e) {\n+                        e.printStackTrace();\n+                    }\n+                    Platform.runLater(() -> {\n+                        menu1.getItems().clear();\n+                        latch.countDown();\n+                    });\n+                }).start();\n+            });\n+\n+            try {\n+                assertTrue(\"Timeout waiting for setOnShown\", latch.await(15, TimeUnit.SECONDS));\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+        });\n+    }\n+\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/control\/SystemMenuBarTest.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}