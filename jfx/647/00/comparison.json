{"files":[{"patch":"@@ -186,0 +186,1 @@\n+        int i = 0;\n@@ -187,1 +188,2 @@\n-        for (int i = 0, length = s.length(); i < length; ++i) {\n+        \/\/ Parse the input string and stop after the first mnemonic.\n+        for (int length = s.length(); i < length; ++i) {\n@@ -192,1 +194,0 @@\n-                builder.append(c);\n@@ -196,0 +197,1 @@\n+                break;\n@@ -199,1 +201,2 @@\n-                i += 3;\n+                i += 4;\n+                break;\n@@ -205,0 +208,4 @@\n+        if (s.length() > i) {\n+            builder.append(s.substring(i));\n+        }\n+\n@@ -219,0 +226,3 @@\n+     * A simple mnemonic is any two-character string similar to \"_x\", where x is not an\n+     * underscore or a whitespace character, and the string is not similar to an extended\n+     * mnemonic at the specified position.\n@@ -221,3 +231,8 @@\n-        return s.length() > position + 1\n-            && s.charAt(position) == MNEMONIC_SYMBOL\n-            && Character.isAlphabetic(s.charAt(position + 1));\n+        if (s.length() <= position + 1\n+                || s.charAt(position) != MNEMONIC_SYMBOL\n+                || s.charAt(position + 1) == MNEMONIC_SYMBOL\n+                || Character.isWhitespace(s.charAt(position + 1))) {\n+            return false;\n+        }\n+\n+        return !isExtendedMnemonic(s, position);\n@@ -228,0 +243,2 @@\n+     * An extended mnemonic is any four-character string similar to \"_(x)\", where x is any\n+     * character except whitespace.\n@@ -233,1 +250,1 @@\n-            && Character.isAlphabetic(s.charAt(position + 2))\n+            && !Character.isWhitespace(s.charAt(position + 2))\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/TextBinding.java","additions":24,"deletions":7,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2067,1 +2067,1 @@\n-    public void mnemonicSymbolIsRemovedFromDisplayedText() {\n+    public void mnemonicLetterIsRemovedFromDisplayedText() {\n@@ -2075,0 +2075,9 @@\n+    @Test\n+    public void mnemonicDigitIsRemovedFromDisplayedText() {\n+        label.setMnemonicParsing(true);\n+        label.setText(\"foo _1\");\n+        label.autosize();\n+        skin.updateDisplayedText();\n+        assertEquals(\"foo 1\", LabelSkinBaseShim.getText(label).getText());\n+    }\n+\n@@ -2084,0 +2093,18 @@\n+    @Test\n+    public void extendedMnemonicUnderscoreIsRemovedFromDisplayedText() {\n+        label.setMnemonicParsing(true);\n+        label.setText(\"foo _(_)bar\");\n+        label.autosize();\n+        skin.updateDisplayedText();\n+        assertEquals(\"foo bar\", LabelSkinBaseShim.getText(label).getText());\n+    }\n+\n+    @Test\n+    public void extendedMnemonicClosingBraceIsRemovedFromDisplayedText() {\n+        label.setMnemonicParsing(true);\n+        label.setText(\"foo _())bar\");\n+        label.autosize();\n+        skin.updateDisplayedText();\n+        assertEquals(\"foo bar\", LabelSkinBaseShim.getText(label).getText());\n+    }\n+\n@@ -2093,0 +2120,9 @@\n+    @Test\n+    public void whitespaceIsNotProcessedAsExtendedMnemonic() {\n+        label.setMnemonicParsing(true);\n+        label.setText(\"foo _( ) bar\");\n+        label.autosize();\n+        skin.updateDisplayedText();\n+        assertEquals(\"foo ( ) bar\", LabelSkinBaseShim.getText(label).getText());\n+    }\n+\n@@ -2120,0 +2156,18 @@\n+    @Test\n+    public void mnemonicParsingStopsAfterFirstSimpleMnemonic() {\n+        label.setMnemonicParsing(true);\n+        label.setText(\"_foo _bar _qux\");\n+        label.autosize();\n+        skin.updateDisplayedText();\n+        assertEquals(\"foo _bar _qux\", LabelSkinBaseShim.getText(label).getText());\n+    }\n+\n+    @Test\n+    public void mnemonicParsingStopsAfterFirstExtendedMnemonic() {\n+        label.setMnemonicParsing(true);\n+        label.setText(\"_(x)foo _bar _qux\");\n+        label.autosize();\n+        skin.updateDisplayedText();\n+        assertEquals(\"foo _bar _qux\", LabelSkinBaseShim.getText(label).getText());\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/LabelSkinTest.java","additions":55,"deletions":1,"binary":false,"changes":56,"status":"modified"}]}