{"files":[{"patch":"@@ -37,0 +37,1 @@\n+import java.util.Objects;\n@@ -42,0 +43,2 @@\n+ * JMemoryBuddy provides various methods to test for memory leaks.\n+ * It makes it easy to verify the memory behavior in a unit test ensuring the stability and quality of your code.\n@@ -55,1 +58,1 @@\n-        outputFolderString = System.getProperty(\"jmemorybuddy.output\",\".\");\n+        outputFolderString = System.getProperty(\"jmemorybuddy.output\", getDefaultOutputFolder());\n@@ -62,0 +65,9 @@\n+    private static String getDefaultOutputFolder() {\n+        File folder1 = new File(\"target\");\n+        File folder2 = new File(\"build\");\n+\n+        if(folder1.exists()) return folder1.getAbsolutePath();\n+        if(folder2.exists()) return folder2.getAbsolutePath();\n+        return \".\";\n+    }\n+\n@@ -76,1 +88,1 @@\n-        if(!checkCollectable(weakReference)) {\n+        if (!checkCollectable(weakReference)) {\n@@ -95,1 +107,1 @@\n-        if(weakReference.get() != null) {\n+        if (weakReference.get() != null) {\n@@ -104,1 +116,3 @@\n-            } catch (InterruptedException e) {}\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n@@ -111,1 +125,1 @@\n-        if(weakReference.get() == null && counter < steps \/ 3) {\n+        if (weakReference.get() == null && counter < steps \/ 3) {\n@@ -124,1 +138,1 @@\n-        if(!checkNotCollectable(weakReference)) {\n+        if (!checkNotCollectable(weakReference)) {\n@@ -132,1 +146,1 @@\n-     * @return Returns true, when the provided WeakReference can be collected.\n+     * @return Returns true, when the provided WeakReference can not be collected.\n@@ -152,1 +166,1 @@\n-                if(ref == null) throw new NullPointerException();\n+                Objects.requireNonNull(ref);\n@@ -156,1 +170,1 @@\n-                if(ref == null) throw new NullPointerException();\n+                Objects.requireNonNull(ref);\n@@ -160,1 +174,1 @@\n-                if(ref == null) throw new NullPointerException();\n+                Objects.requireNonNull(ref);\n@@ -171,1 +185,1 @@\n-        if(stepsLeft == 0) {\n+        if (stepsLeft == 0) {\n@@ -175,1 +189,1 @@\n-            if(!checkNotCollectable(wRef.getWeakReference())) {\n+            if (!checkNotCollectable(wRef.getWeakReference())) {\n@@ -180,1 +194,1 @@\n-        if(failed) {\n+        if (failed) {\n@@ -185,1 +199,1 @@\n-                if(wRef.get() != null) {\n+                if (wRef.get() != null) {\n@@ -190,1 +204,1 @@\n-                if(wRef.getWeakReference().get() == null) {\n+                if (wRef.getWeakReference().get() == null) {\n@@ -195,1 +209,1 @@\n-            if(toBeNotCollectedMarked.isEmpty()) {\n+            if (toBeNotCollectedMarked.isEmpty()) {\n@@ -207,1 +221,1 @@\n-        if(createHeapdump) {\n+        if (createHeapdump) {\n@@ -235,0 +249,4 @@\n+    \/**\n+     * This class provides different methods, which can be used to declare memory-constraints.\n+     * You can get an instance through the lambda of the method JMemoryBuddy.memoryTest.\n+     *\/\n@@ -299,1 +317,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/util\/memory\/JMemoryBuddy.java","additions":36,"deletions":18,"binary":false,"changes":54,"status":"modified"}]}