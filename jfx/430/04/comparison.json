{"files":[{"patch":"@@ -131,1 +131,1 @@\n-        if (itex == null) {\n+        if (itex == null || itex.isSurfaceLost()) {\n@@ -245,1 +245,1 @@\n-        if (dtex == null) {\n+        if (dtex == null || dtex.isSurfaceLost()) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/EffectUtil.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-        if (!factory.isDeviceReady()) {\n+        if (factory.isDisposed()) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/NGExternalNode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,0 +58,6 @@\n+\n+        \/\/ Check whether the material is valid; dispose and recreate if needed\n+        if (material != null && !material.isValid()) {\n+            disposeMaterial();\n+        }\n+\n@@ -65,0 +71,13 @@\n+    private void disposeMaterial() {\n+        diffuseColorDirty = true;\n+        specularColorDirty = true;\n+        specularPowerDirty = true;\n+        diffuseMap.setDirty(true);\n+        specularMap.setDirty(true);\n+        bumpMap.setDirty(true);\n+        selfIllumMap.setDirty(true);\n+\n+        material.dispose();\n+        material = null;\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/NGPhongMaterial.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -78,0 +78,9 @@\n+        if (rf == null || rf.isDisposed()) {\n+            return;\n+        }\n+\n+        \/\/ Check whether the meshView is valid; dispose and recreate if needed\n+        if (meshView != null && !meshView.isValid()) {\n+            meshView.dispose();\n+            meshView = null;\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/NGShape3D.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -62,0 +62,7 @@\n+\n+        \/\/ Check whether the mesh is valid; dispose and recreate if needed\n+        if (mesh != null && !mesh.isValid()) {\n+            mesh.dispose();\n+            mesh = null;\n+        }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/NGTriangleMesh.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+                factory = null;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/PresentingPainter.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1423,0 +1423,1 @@\n+\n@@ -1424,1 +1425,9 @@\n-        public void factoryReleased() { dispose(); }\n+        public void factoryReleased() {\n+            dispose();\n+\n+            \/\/ ResourceFactory is being disposed; clear reference to avoid leak\n+            if (rf != null) {\n+                rf.removeFactoryListener(this);\n+                rf = null;\n+            }\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/QuantumToolkit.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -93,0 +93,1 @@\n+                factory = null;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/UploadingPainter.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-public interface Material {\n+public interface Material extends GraphicsResource {\n+    public boolean isValid();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/Material.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+\n+    public boolean isValid();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/Mesh.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-public interface MeshView {\n+public interface MeshView extends GraphicsResource {\n@@ -55,0 +55,2 @@\n+\n+    public boolean isValid();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/MeshView.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,11 @@\n-     * Returns status of this graphics device.\n+     * Returns whether this resource factory has been disposed.\n+     * If this resource factory has been disposed, it is no longer valid and\n+     * will need to be recreated before any new resources can be created.\n+     * Any attempt to create a resource will be ignored and will return null.\n+     *\n+     * @return true if this resource factory has been disposed.\n+     *\/\n+    public boolean isDisposed();\n+\n+    \/**\n+     * Returns status of this graphics device, possibly reinitializing it.\n@@ -38,2 +48,2 @@\n-     * Creation of shaders and regular textures will succeed and\n-     * return valid resources.\n+     * As long as the device has not been disposed, creation of shaders and\n+     * regular textures will succeed and return valid resources.\n@@ -42,2 +52,6 @@\n-     **\/\n-\n+     *\n+     * NOTE: since this method can reinitialize the graphics device if it has\n+     * been released, it should only be called at the start of a rendering pass.\n+     *\n+     * @return true if this graphics device is ready for use.\n+     *\/\n@@ -255,2 +269,0 @@\n-    public void dispose();\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/ResourceFactory.java","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+    public static final int D3DERR_DEVICEREMOVED    = 0x88760870;\n@@ -132,2 +133,2 @@\n-            System.out.println(\"D3D hresult failed :\" + hResultToString(res));\n-            new Exception(\"Stack trace\").printStackTrace(System.out);\n+            System.err.println(\"D3D hresult failed :\" + hResultToString(res));\n+            new Exception(\"Stack trace\").printStackTrace(System.err);\n@@ -147,0 +148,2 @@\n+     * If the device has been removed, then it reinitializes the device, which\n+     * disposes the existing factories and contexts.\n@@ -149,0 +152,4 @@\n+        if (isDisposed()) {\n+            return false;\n+        }\n+\n@@ -151,0 +158,23 @@\n+        if (PrismSettings.verbose && FAILED(hr)) {\n+            System.err.print(\"D3DContext::testLostStateAndReset : \");\n+            switch (hr) {\n+                case D3D_OK:\n+                    System.err.println(\"D3D_OK\");\n+                    break;\n+                case D3DERR_DEVICELOST:\n+                    System.err.println(\"D3DERR_DEVICELOST\");\n+                    break;\n+                case D3DERR_DEVICEREMOVED:\n+                    System.err.println(\"D3DERR_DEVICEREMOVED\");\n+                    break;\n+                case D3DERR_DEVICENOTRESET:\n+                    System.err.println(\"D3DERR_DEVICENOTRESET\");\n+                    break;\n+                case E_FAIL:\n+                    System.err.println(\"E_FAIL\");\n+                    break;\n+                default:\n+                    System.err.println(String.format(\"Unknown D3D error 0x%x\", hr));\n+            }\n+        }\n+\n@@ -172,0 +202,8 @@\n+        if (hr == D3DERR_DEVICEREMOVED) {\n+            setLost();\n+\n+            \/\/ Reinitialize the D3DPipeline. This will dispose and recreate\n+            \/\/ the resource factory and context for each adapter.\n+            D3DPipeline.getInstance().reinitialize();\n+        }\n+\n@@ -189,0 +227,8 @@\n+    @Override\n+    public void dispose() {\n+        disposeLCDBuffer();\n+        state = null;\n+\n+        super.dispose();\n+    }\n+\n@@ -206,0 +252,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -450,0 +498,2 @@\n+        if (checkDisposed()) return false;\n+\n@@ -461,0 +511,2 @@\n+            case (int)D3DERR_DEVICEREMOVED:\n+                return \"D3DERR_DEVICEREMOVED\";\n@@ -470,0 +522,2 @@\n+        if (checkDisposed()) return;\n+\n@@ -475,0 +529,2 @@\n+        if (checkDisposed()) return;\n+\n@@ -479,0 +535,2 @@\n+        if (checkDisposed()) return 0;\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/d3d\/D3DContext.java","additions":60,"deletions":2,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -56,0 +56,5 @@\n+    @Override\n+    public boolean isValid() {\n+        return !context.isDisposed();\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/d3d\/D3DMesh.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+\n@@ -99,0 +100,5 @@\n+    @Override\n+    public boolean isValid() {\n+        return !context.isDisposed();\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/d3d\/D3DMeshView.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import com.sun.prism.impl.BaseGraphicsResource;\n+import com.sun.prism.impl.BasePhongMaterial;\n@@ -39,1 +39,1 @@\n-class D3DPhongMaterial extends BaseGraphicsResource implements PhongMaterial {\n+class D3DPhongMaterial extends BasePhongMaterial implements PhongMaterial {\n@@ -121,0 +121,5 @@\n+    @Override\n+    public boolean isValid() {\n+        return !context.isDisposed();\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/d3d\/D3DPhongMaterial.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -42,0 +42,5 @@\n+    private static final Thread creator;\n+    private static D3DPipeline theInstance;\n+    private static D3DResourceFactory factories[];\n+    private static boolean d3dInitialized;\n+\n@@ -52,1 +57,1 @@\n-            return Boolean.valueOf(nInit(PrismSettings.class));\n+            return Boolean.valueOf(nInit(PrismSettings.class, true));\n@@ -70,0 +75,1 @@\n+            d3dInitialized = true;\n@@ -75,4 +81,0 @@\n-    private static Thread creator;\n-    private static D3DPipeline theInstance;\n-    private static D3DResourceFactory factories[];\n-\n@@ -142,1 +144,1 @@\n-    private static native boolean nInit(Class psClass);\n+    private static native boolean nInit(Class psClass, boolean load);\n@@ -144,1 +146,1 @@\n-    private static native void nDispose();\n+    private static native void nDispose(boolean unload);\n@@ -157,2 +159,7 @@\n-    @Override\n-    public void dispose() {\n+    \/\/ Called by dispose and reinitialize methods to reset the pipeline\n+    \/\/ and free all resources\n+    private void reset(boolean unload) {\n+        if (!d3dInitialized) {\n+            return;\n+        }\n+\n@@ -164,3 +171,4 @@\n-        notifyAllResourcesReleased();\n-        nDispose();\n-        for (int i=0; i!=factories.length; ++i) {\n+        for (int i = 0; i != factories.length; ++i) {\n+            if (factories[i] != null) {\n+                factories[i].dispose();\n+            }\n@@ -169,0 +177,29 @@\n+        factories = null;\n+        _default = null;\n+        d3dInitialized = false;\n+        nDispose(unload);\n+    }\n+\n+    \/\/ Reinitialize pipeline\n+    void reinitialize() {\n+        if (PrismSettings.verbose) {\n+            System.err.println(\"D3DPipeline: reinitialize after device was removed\");\n+        }\n+\n+        \/\/ Device was removed, reset and reinitialize\n+        reset(false);\n+\n+        boolean success = nInit(PrismSettings.class, false);\n+        if (!success) {\n+            nDispose(false);\n+            return;\n+        }\n+\n+        d3dInitialized = true;\n+        factories = new D3DResourceFactory[nGetAdapterCount()];\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        reset(true);\n+        theInstance = null;\n@@ -186,6 +223,0 @@\n-    private static void notifyAllResourcesReleased() {\n-        for (D3DResourceFactory rf : factories) {\n-            if (rf != null) rf.notifyReleased();\n-        }\n-    }\n-\n@@ -210,0 +241,11 @@\n+        if (!d3dInitialized) {\n+            \/\/ If initialization failed, try again\n+            D3DPipeline.getInstance().reinitialize();\n+\n+            \/\/ If reinitialization failed, return a null resource factory; we will\n+            \/\/ try again the next time this method is called.\n+            if (!d3dInitialized) {\n+                return null;\n+            }\n+        }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/d3d\/D3DPipeline.java","additions":60,"deletions":18,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -100,1 +100,5 @@\n-        getContext().flushVertexBuffer();\n+        final D3DContext context = getContext();\n+        if (context.isDisposed()) {\n+            return false;\n+        }\n+        context.flushVertexBuffer();\n@@ -122,1 +126,1 @@\n-        return getContext().validatePresent(res);\n+        return context.validatePresent(res);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/d3d\/D3DRTTexture.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -116,0 +116,3 @@\n+        if (isDisposed()) {\n+            return false;\n+        }\n@@ -145,0 +148,3 @@\n+\n+        if (checkDisposed()) return null;\n+\n@@ -185,0 +191,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -278,0 +286,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -325,0 +335,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -394,0 +406,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -421,5 +435,0 @@\n-    @Override\n-    public void dispose() {\n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n-    }\n-\n@@ -463,1 +472,3 @@\n-    protected void notifyReleased() {\n+    public void dispose() {\n+        context.dispose();\n+\n@@ -469,1 +480,2 @@\n-        super.notifyReleased();\n+\n+        super.dispose();\n@@ -482,0 +494,1 @@\n+        if (checkDisposed()) return null;\n@@ -487,0 +500,1 @@\n+        if (checkDisposed()) return null;\n@@ -492,0 +506,1 @@\n+        if (checkDisposed()) return null;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/d3d\/D3DResourceFactory.java","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -84,0 +84,3 @@\n+        if (context.isDisposed()) {\n+            return false;\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/d3d\/D3DSwapChain.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import com.sun.prism.impl.BaseGraphicsResource;\n+import com.sun.prism.impl.BasePhongMaterial;\n@@ -41,1 +41,1 @@\n-class ES2PhongMaterial extends BaseGraphicsResource implements PhongMaterial {\n+class ES2PhongMaterial extends BasePhongMaterial implements PhongMaterial {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/ES2PhongMaterial.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+    private boolean disposed = false;\n+\n@@ -76,1 +78,0 @@\n-    \/\/ TODO: need to dispose these when the context is disposed... (RT-27421)\n@@ -104,0 +105,2 @@\n+        if (checkDisposed()) return;\n+\n@@ -202,0 +205,3 @@\n+\n+        if (checkDisposed()) return null;\n+\n@@ -211,0 +217,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -255,0 +263,2 @@\n+        if (checkDisposed()) return;\n+\n@@ -306,0 +316,2 @@\n+        if (checkDisposed()) return 0;\n+\n@@ -313,0 +325,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -326,0 +340,2 @@\n+        if (checkDisposed()) return;\n+\n@@ -370,0 +386,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -409,0 +427,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -502,0 +522,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -579,0 +601,57 @@\n+\n+    \/**\n+     * Dispose of this context. Subclass implementations can override this\n+     * if needed. They must call super.dispose().\n+     *\/\n+    public void dispose() {\n+        clearGlyphCaches();\n+        GlyphCache.disposeForContext(this);\n+\n+        if (maskTex != null) {\n+            maskTex.dispose();\n+            maskTex = null;\n+        }\n+        if (paintTex != null) {\n+            paintTex.dispose();\n+            paintTex = null;\n+        }\n+        if (rectTex != null) {\n+            rectTex.dispose();\n+            rectTex = null;\n+        }\n+        if (wrapRectTex != null) {\n+            wrapRectTex.dispose();\n+            wrapRectTex = null;\n+        }\n+        if (ovalTex != null) {\n+            ovalTex.dispose();\n+            ovalTex = null;\n+        }\n+        disposed = true;\n+    }\n+\n+    \/**\n+     * Returns a flag indicating whether this context has been disposed. A graphics\n+     * context is disposed by the associated ResourceFactory when it is disposed.\n+     * If a context has been disposed, it must be recreated, by a new ResourceFactory.\n+     * All draw calls will be ignored. An attempt to create a resource will be\n+     * ignored and will return null.\n+     *\n+     * @return true if this context has been disposed.\n+     *\/\n+    public final boolean isDisposed() {\n+        return disposed;\n+    }\n+\n+    protected boolean checkDisposed() {\n+        if (PrismSettings.verbose && isDisposed()) {\n+            try {\n+                throw new IllegalStateException(\"attempt to use resource after context is disposed\");\n+            } catch (RuntimeException ex) {\n+                ex.printStackTrace();\n+            }\n+        }\n+\n+        return isDisposed();\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/impl\/BaseContext.java","additions":80,"deletions":1,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -820,0 +820,5 @@\n+    @Override\n+    public boolean isValid() {\n+        return true;\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/impl\/BaseMesh.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,0 +39,5 @@\n+    @Override\n+    public boolean isValid() {\n+        return true;\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/impl\/BaseMeshView.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.prism.impl;\n+\n+import com.sun.prism.PhongMaterial;\n+\n+public abstract class BasePhongMaterial extends BaseGraphicsResource implements PhongMaterial {\n+\n+    protected BasePhongMaterial(Disposer.Record disposerRecord) {\n+        super(disposerRecord);\n+    }\n+\n+    @Override\n+    public boolean isValid() {\n+        return true;\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/impl\/BasePhongMaterial.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -54,0 +54,2 @@\n+    private boolean disposed = false;\n+\n@@ -84,1 +86,1 @@\n-        return true;\n+        return !isDisposed();\n@@ -105,0 +107,15 @@\n+    private void disposeResources() {\n+        clampTexCache.clear();\n+        repeatTexCache.clear();\n+        mipmapTexCache.clear();\n+\n+        if (regionTexture != null) {\n+            regionTexture.dispose();\n+            regionTexture = null;\n+        }\n+        if (glyphTexture != null) {\n+            glyphTexture.dispose();\n+            glyphTexture = null;\n+        }\n+    }\n+\n@@ -110,3 +127,1 @@\n-        clampTexCache.clear();\n-        repeatTexCache.clear();\n-        mipmapTexCache.clear();\n+        disposeResources();\n@@ -124,7 +139,4 @@\n-    \/**\n-     * Called when the factory's data is released\n-     *\/\n-    protected void notifyReleased() {\n-        clampTexCache.clear();\n-        repeatTexCache.clear();\n-        mipmapTexCache.clear();\n+    @Override\n+    public void dispose() {\n+        disposeResources();\n+        disposed = true;\n@@ -156,0 +168,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -161,0 +175,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -246,0 +262,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -252,0 +270,3 @@\n+\n+        if (checkDisposed()) return null;\n+\n@@ -283,0 +304,2 @@\n+        if (checkDisposed()) return;\n+\n@@ -296,0 +319,2 @@\n+        if (checkDisposed()) return;\n+\n@@ -343,0 +368,18 @@\n+\n+    @Override\n+    public boolean isDisposed() {\n+        return disposed;\n+    }\n+\n+    protected boolean checkDisposed() {\n+        if (PrismSettings.verbose && isDisposed()) {\n+            try {\n+                throw new IllegalStateException(\"attempt to use resource after factory is disposed\");\n+            } catch (RuntimeException ex) {\n+                ex.printStackTrace();\n+            }\n+        }\n+\n+        return isDisposed();\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/impl\/BaseResourceFactory.java","additions":54,"deletions":11,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -463,1 +463,10 @@\n-        throw new IllegalStateException(\"unmanaged resource freed from pool \"+this);\n+\n+        \/\/ If we get here, the resource is not currently being managed. This\n+        \/\/ can happen when the Disposer processes its queue of disposed records\n+        \/\/ and encounters a record that was previously reclaimed via\n+        \/\/ cleanup() or freeDisposalRequestedAndCheckResources(), when the\n+        \/\/ device is lost or removed. We can safely ignore it.\n+        if (PrismSettings.poolDebug) {\n+            System.err.println(\"Warning: unmanaged resource \" + freed +\n+                    \" freed from pool: \" + this);\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/impl\/BaseResourcePool.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -400,0 +400,15 @@\n+\n+    private static void disposePackerForContext(BaseContext ctx,\n+            WeakHashMap<BaseContext, RectanglePacker> packerMap) {\n+\n+        RectanglePacker packer = packerMap.remove(ctx);\n+        if (packer != null) {\n+            packer.dispose();\n+        }\n+    }\n+\n+    public static void disposeForContext(BaseContext ctx) {\n+        disposePackerForContext(ctx, greyPackerMap);\n+        disposePackerForContext(ctx, lcdPackerMap);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/impl\/GlyphCache.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -131,1 +131,0 @@\n-    \/\/ TODO: need to dispose these when the context is disposed... (RT-27379)\n@@ -152,0 +151,1 @@\n+\n@@ -199,0 +199,2 @@\n+        if (checkDisposed()) return;\n+\n@@ -204,0 +206,2 @@\n+        if (checkDisposed()) return;\n+\n@@ -239,0 +243,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -272,0 +278,2 @@\n+        if (checkDisposed()) return;\n+\n@@ -305,0 +313,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -325,0 +335,2 @@\n+        if (checkDisposed()) return false;\n+\n@@ -330,0 +342,2 @@\n+        if (checkDisposed()) return;\n+\n@@ -363,0 +377,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -515,0 +531,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -528,0 +546,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -560,0 +580,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -600,0 +622,2 @@\n+        if (checkDisposed()) return null;\n+\n@@ -626,0 +650,2 @@\n+        if (checkDisposed()) return;\n+\n@@ -651,0 +677,2 @@\n+        if (checkDisposed()) return;\n+\n@@ -695,0 +723,2 @@\n+        if (checkDisposed()) return;\n+\n@@ -705,0 +735,2 @@\n+        if (checkDisposed()) return;\n+\n@@ -727,0 +759,2 @@\n+        if (checkDisposed()) return;\n+\n@@ -744,0 +778,2 @@\n+        if (checkDisposed()) return;\n+\n@@ -802,0 +838,26 @@\n+    private void disposeShaders(Shader[] shaders) {\n+        for (int i = 0; i < shaders.length; i++) {\n+            if (shaders[i] != null) {\n+                shaders[i].dispose();\n+                shaders[i] = null;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disposeShaders(stockShaders);\n+        disposeShaders(stockATShaders);\n+        disposeShaders(specialShaders);\n+        disposeShaders(specialATShaders);\n+        if (externalShader != null) {\n+            externalShader.dispose();\n+            externalShader = null;\n+        }\n+\n+        disposeLCDBuffer();\n+        releaseRenderTarget();\n+        state = null;\n+\n+        super.dispose();\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/impl\/ps\/BaseShaderContext.java","additions":63,"deletions":1,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+import java.util.WeakHashMap;\n@@ -108,0 +109,10 @@\n+    \/**\n+     * The keySet of this map is used to track the gradients that have\n+     * a valid entry (offset) in the gradient cache. We need this so that we can\n+     * invalidate all entries when a device is lost (at which time we recreate\n+     * the gradient cache textures). This prevents using a stale offset that is\n+     * no longer valid.\n+     * The values in this map are unused.\n+     *\/\n+    private static final WeakHashMap<Gradient, Void> gradientMap = new WeakHashMap<>();\n+\n@@ -118,0 +129,5 @@\n+        \/\/ We must clear cached gradient texture and offsets when the\n+        \/\/ device is removed and recreated\n+        cacheOffset = -1;\n+        gradientMap.clear();\n+\n@@ -140,1 +156,1 @@\n-        if (gradientCacheTexture == null) {\n+        if (gradientCacheTexture == null || gradientCacheTexture.isSurfaceLost()) {\n@@ -144,4 +160,4 @@\n-        \/\/ gradientCacheTexture is left permanent and locked so it never\n-        \/\/ goes away or needs to be checked for isSurfaceLost(), but we\n-        \/\/ add a lock here so that the caller can unlock without knowing\n-        \/\/ our inner implementation details\n+        \/\/ gradientCacheTexture is left permanent and locked, although we still\n+        \/\/ must check for isSurfaceLost() in case the device is disposed.\n+        \/\/ We add a lock here so that the caller can unlock without knowing\n+        \/\/ our inner implementation details.\n@@ -153,1 +169,1 @@\n-        if (gtexCacheTexture == null) {\n+        if (gtexCacheTexture == null || gtexCacheTexture.isSurfaceLost()) {\n@@ -157,4 +173,4 @@\n-        \/\/ gtexCacheTexture is left permanent and locked so it never\n-        \/\/ goes away or needs to be checked for isSurfaceLost(), but we\n-        \/\/ add a lock here so that the caller can unlock without knowing\n-        \/\/ our inner implementation details\n+        \/\/ gtexCacheTexture is left permanent and locked, although we still\n+        \/\/ must check for isSurfaceLost() in case the device is disposed.\n+        \/\/ We add a lock here so that the caller can unlock without knowing\n+        \/\/ our inner implementation details.\n@@ -255,1 +271,1 @@\n-        if (offset >= 0 && (offset > cacheOffset - MULTI_CACHE_SIZE)) {\n+        if (gradientMap.containsKey(paint) && offset >= 0 && (offset > cacheOffset - MULTI_CACHE_SIZE)) {\n@@ -270,0 +286,1 @@\n+            gradientMap.put(paint, null);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/impl\/ps\/PaintHelper.java","additions":28,"deletions":11,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -50,1 +50,4 @@\n-     * When the renderer is created, it is in the {@code OK} state.\n+     * When the renderer is created, it will either start in the {@code OK}\n+     * state, or it will start in the {@code NOTREADY} state until\n+     * the first time it is used during rendering, then transition\n+     * to the {@code OK} state.\n@@ -64,1 +67,1 @@\n-     * {@code OK} [=> {@code LOST} [=> {@code DISPOSED}]]\n+     * [{@code NOTREADY} =>] {@code OK} [=> {@code LOST} [=> {@code DISPOSED}]]\n@@ -67,0 +70,4 @@\n+        \/**\n+         * Renderer is not ready; it might be able to be used for rendering.\n+         *\/\n+        NOTREADY,\n@@ -342,0 +349,3 @@\n+            if (r.getRendererState() == RendererState.NOTREADY) {\n+                return r;\n+            }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/scenario\/effect\/impl\/Renderer.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -69,1 +69,2 @@\n-    private final ResourceFactory rf;\n+    private ResourceFactory rf;\n+    private Screen screen;\n@@ -88,0 +89,1 @@\n+        this.screen = screen;\n@@ -89,1 +91,41 @@\n-            state = OK;\n+            state = NOTREADY;\n+        }\n+    }\n+\n+    \/\/ Must be called on the renderer thread\n+    private boolean validate() {\n+        RendererState st = getRendererState();\n+        switch (st) {\n+            case NOTREADY:\n+                if (rf == null) {\n+                    rf = GraphicsPipeline.getPipeline().getResourceFactory(screen);\n+                    if (rf == null) {\n+                        return false;\n+                    }\n+                }\n+                if (rf.isDisposed()) {\n+                    \/\/ This case happens if the ResourceFactory has already been\n+                    \/\/ disposed the first time we try to validate it, meaning\n+                    \/\/ this Renderer was never in the \"OK\" state. As a result,\n+                    \/\/ we have never added this Renderer as an RF listener, so\n+                    \/\/ we need to explicitly dispose.\n+                    dispose();\n+\n+                    return false;\n+                }\n+\n+                \/\/ Device is now ready, transition to OK.\n+                rf.addFactoryListener(listener);\n+                needsSWDispMap = !rf.isFormatSupported(PixelFormat.FLOAT_XYZW);\n+                synchronized (this) {\n+                    state = OK;\n+                }\n+                return true;\n+\n+            case OK:\n+            case LOST:\n+                return true;\n+\n+            case DISPOSED:\n+            default:\n+                return false;\n@@ -91,3 +133,0 @@\n-        rf = GraphicsPipeline.getPipeline().getResourceFactory(screen);\n-        rf.addFactoryListener(listener);\n-        needsSWDispMap = !rf.isFormatSupported(PixelFormat.FLOAT_XYZW);\n@@ -98,0 +137,3 @@\n+        if (!validate()) {\n+            return null;\n+        }\n@@ -138,0 +180,2 @@\n+        rf = null;\n+        screen = null;\n@@ -146,1 +190,1 @@\n-        if (state == OK) {\n+        if (state == NOTREADY || state == OK) {\n@@ -153,0 +197,3 @@\n+        if (!validate()) {\n+            return -1;\n+        }\n@@ -158,0 +205,3 @@\n+        if (!validate()) {\n+            return -1;\n+        }\n@@ -163,0 +213,3 @@\n+        if (!validate()) {\n+            return null;\n+        }\n@@ -168,0 +221,3 @@\n+        if (!validate()) {\n+            return null;\n+        }\n@@ -178,0 +234,3 @@\n+        if (!validate()) {\n+            return null;\n+        }\n@@ -184,0 +243,3 @@\n+        if (!validate()) {\n+            return;\n+        }\n@@ -197,0 +259,3 @@\n+        if (!validate()) {\n+            return null;\n+        }\n@@ -299,0 +364,3 @@\n+        if (!validate()) {\n+            return null;\n+        }\n@@ -341,0 +409,3 @@\n+        if (!validate()) {\n+            return null;\n+        }\n@@ -360,0 +431,3 @@\n+        if (!validate()) {\n+            return null;\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/scenario\/effect\/impl\/prism\/ps\/PPSRenderer.java","additions":80,"deletions":6,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -1342,1 +1342,4 @@\n-        accessor.loadTkImage(wimg, tkImage);\n+\n+        if (tkImage != null) {\n+            accessor.loadTkImage(wimg, tkImage);\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Scene.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -737,1 +737,3 @@\n-    TraceLn(NWT_TRACE_INFO, \"D3DContext::testCooperativeLevel\");\n+    TraceLn2(NWT_TRACE_INFO,\n+             \"D3DContext::testCooperativeLevel pd3dDevice = 0x%x, pd3dDeviceEx = 0x%x\",\n+             pd3dDevice, pd3dDeviceEx);\n@@ -749,2 +751,1 @@\n-        TraceLn1(NWT_TRACE_VERBOSE, \"  device %d is still lost\",\n-            adapterOrdinal);\n+        TraceLn1(NWT_TRACE_INFO, \"  device %d is still lost\", adapterOrdinal);\n@@ -753,2 +754,4 @@\n-        TraceLn1(NWT_TRACE_VERBOSE, \"  device %d needs to be reset\",\n-            adapterOrdinal);\n+        TraceLn1(NWT_TRACE_INFO, \"  device %d needs to be reset\", adapterOrdinal);\n+        break;\n+    case D3DERR_DEVICEREMOVED:\n+        TraceLn1(NWT_TRACE_INFO, \"  device %d has been removed\", adapterOrdinal);\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-d3d\/D3DContext.cc","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -115,0 +115,1 @@\n+ * Signature: (Ljava\/lang\/Class;Z)Z\n@@ -116,1 +117,0 @@\n-\n@@ -118,1 +118,1 @@\n-  (JNIEnv *env, jclass, jclass psClass)\n+  (JNIEnv *env, jclass, jclass psClass, jboolean load)\n@@ -131,1 +131,3 @@\n-    loadD3DLibrary();\n+    if (load) {\n+        loadD3DLibrary();\n+    }\n@@ -153,0 +155,1 @@\n+ * Signature: (Z)V\n@@ -154,2 +157,2 @@\n-\n-JNIEXPORT void JNICALL Java_com_sun_prism_d3d_D3DPipeline_nDispose(JNIEnv *pEnv, jclass)\n+JNIEXPORT void JNICALL Java_com_sun_prism_d3d_D3DPipeline_nDispose\n+  (JNIEnv *pEnv, jclass, jboolean unload)\n@@ -163,1 +166,3 @@\n-    freeD3DLibrary();\n+    if (unload) {\n+        freeD3DLibrary();\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-d3d\/D3DPipeline.cc","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -152,0 +152,4 @@\n+\n+    if (adapterCount == 0) {\n+        RlsTraceLn(NWT_TRACE_WARNING, \"Zero adapters found\");\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-d3d\/D3DPipelineManager.cc","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -182,0 +182,1 @@\n+        @Override public boolean isDisposed() { return false; }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/TestGraphics.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.ref.WeakReference;\n@@ -39,0 +40,1 @@\n+import com.sun.prism.ResourceFactory;\n@@ -66,1 +68,2 @@\n-    private boolean registeredWithFactory = false;\n+    private WeakReference<ResourceFactory> registeredWithFactory = null;\n+\n@@ -132,1 +135,2 @@\n-            if (!registeredWithFactory) {\n+            ResourceFactory factory = GraphicsPipeline.getDefaultResourceFactory();\n+            if (registeredWithFactory == null || registeredWithFactory.get() != factory) {\n@@ -135,2 +139,2 @@\n-                GraphicsPipeline.getDefaultResourceFactory().addFactoryListener(this);\n-                registeredWithFactory = true;\n+                factory.addFactoryListener(this);\n+                registeredWithFactory = new WeakReference<>(factory);\n","filename":"modules\/javafx.media\/src\/main\/java\/com\/sun\/javafx\/media\/PrismMediaFrameHandler.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import com.sun.javafx.logging.PlatformLogger;\n@@ -38,0 +39,3 @@\n+    private static final PlatformLogger log =\n+            PlatformLogger.getLogger(PrismInvoker.class.getName());\n+\n@@ -90,4 +94,2 @@\n-            } catch (ExecutionException ex) {\n-                throw new AssertionError(ex);\n-            } catch (InterruptedException ex) {\n-                \/\/ ignore; recovery is impossible\n+            } catch (ExecutionException | InterruptedException ex) {\n+                log.severe(\"RenderJob error\", ex);\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/javafx\/webkit\/prism\/PrismInvoker.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.logging.PlatformLogger;\n@@ -40,0 +41,1 @@\n+import java.lang.ref.WeakReference;\n@@ -50,1 +52,1 @@\n-    private boolean listenerAdded = false;\n+    private WeakReference<ResourceFactory> registeredWithFactory = null;\n@@ -54,0 +56,3 @@\n+    private final static PlatformLogger log =\n+            PlatformLogger.getLogger(RTImage.class.getName());\n+\n@@ -69,1 +74,5 @@\n-        Graphics g = getTexture().createGraphics();\n+        RTTexture texture = getTexture();\n+        if (texture == null) {\n+            return null;\n+        }\n+        Graphics g = texture.createGraphics();\n@@ -75,0 +84,10 @@\n+        if (txt != null && txt.isSurfaceLost()) {\n+            log.fine(\"RTImage::getTexture : surface lost: \" + this);\n+        }\n+\n+        ResourceFactory f = GraphicsPipeline.getDefaultResourceFactory();\n+        if (f == null || f.isDisposed()) {\n+            log.fine(\"RTImage::getTexture : return null because device disposed or not ready\");\n+            return null;\n+        }\n+\n@@ -76,1 +95,0 @@\n-            ResourceFactory f = GraphicsPipeline.getDefaultResourceFactory();\n@@ -83,1 +101,1 @@\n-            if (! listenerAdded) {\n+            if (registeredWithFactory == null || registeredWithFactory.get() != f) {\n@@ -85,1 +103,1 @@\n-                listenerAdded = true;\n+                registeredWithFactory = new WeakReference<>(f);\n@@ -99,0 +117,4 @@\n+        if (g.getResourceFactory().isDisposed()) {\n+            log.fine(\"RTImage::draw : skip because device has been disposed\");\n+            return;\n+        }\n@@ -163,0 +185,5 @@\n+                final ResourceFactory f = GraphicsPipeline.getDefaultResourceFactory();\n+                if (f == null || f.isDisposed()) {\n+                    log.fine(\"RTImage::getPixelBuffer : skip because device disposed or not ready\");\n+                    return;\n+                }\n@@ -175,1 +202,0 @@\n-                        ResourceFactory f = GraphicsPipeline.getDefaultResourceFactory();\n@@ -206,1 +232,1 @@\n-                \/\/from synthetic ImageData.\n+                \/\/from synthetic ImageData or if the resource factory is disposed\n@@ -231,0 +257,4 @@\n+        if (txt != null) {\n+            txt.dispose();\n+            txt = null;\n+        }\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/javafx\/webkit\/prism\/RTImage.java","additions":37,"deletions":7,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -129,0 +129,12 @@\n+    @Override\n+    public boolean isValid() {\n+        Object platformGraphics = getPlatformGraphics();\n+\n+        \/\/ Ensure that graphics is non-null and of the right type\n+        if (! (platformGraphics instanceof Graphics)) {\n+            return false;\n+        }\n+        Graphics g = (Graphics)platformGraphics;\n+        return !g.getResourceFactory().isDisposed();\n+    }\n+\n@@ -136,1 +148,4 @@\n-            state.apply(cachedGraphics);\n+            ResourceFactory rf = cachedGraphics.getResourceFactory();\n+            if (!rf.isDisposed()) {\n+                state.apply(cachedGraphics);\n+            }\n@@ -848,0 +863,5 @@\n+                ResourceFactory rf = g.getResourceFactory();\n+                if (rf.isDisposed()) {\n+                    log.fine(\"WCGraphicsPrismContext::doPaint skip because device has been disposed\");\n+                    return;\n+                }\n@@ -850,1 +870,0 @@\n-                ResourceFactory rf = g.getResourceFactory();\n@@ -1348,3 +1367,9 @@\n-                RTTexture rtt = f.createRTTexture(w, h, Texture.WrapMode.CLAMP_NOT_NEEDED);\n-                rtt.makePermanent();\n-                buffer = ((PrRenderer)Renderer.getRenderer(fctx)).createDrawable(rtt);\n+                if (f != null && !f.isDisposed()) {\n+                    RTTexture rtt = f.createRTTexture(w, h, Texture.WrapMode.CLAMP_NOT_NEEDED);\n+                    rtt.makePermanent();\n+                    buffer = ((PrRenderer)Renderer.getRenderer(fctx)).createDrawable(rtt);\n+                } else {\n+                    log.fine(\"Layer :: cannot construct RTT because device disposed or not ready\");\n+                    fctx = null;\n+                    buffer = null;\n+                }\n@@ -1357,1 +1382,1 @@\n-            if (graphics == null) {\n+            if (graphics == null && buffer != null) {\n@@ -1823,0 +1848,4 @@\n+        if (!isValid()) {\n+            log.fine(\"WCGraphicsPrismContext::flush : GC is invalid\");\n+            return;\n+        }\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/javafx\/webkit\/prism\/WCGraphicsPrismContext.java","additions":35,"deletions":6,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -93,0 +93,6 @@\n+        ResourceFactory resourceFactory = g.getResourceFactory();\n+        if (resourceFactory.isDisposed()) {\n+            log.fine(\"WCImageImpl::draw : skip because device disposed or not ready\");\n+            return;\n+        }\n+\n@@ -95,1 +101,1 @@\n-            Texture t = g.getResourceFactory().createTexture(\n+            Texture t = resourceFactory.createTexture(\n@@ -111,1 +117,0 @@\n-            ResourceFactory resourceFactory = g.getResourceFactory();\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/javafx\/webkit\/prism\/WCImageImpl.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import com.sun.javafx.logging.PlatformLogger;\n@@ -33,0 +34,1 @@\n+import com.sun.prism.ResourceFactory;\n@@ -40,0 +42,1 @@\n+import java.lang.ref.WeakReference;\n@@ -44,1 +47,2 @@\n-    private boolean listenerAdded = false;\n+    private WeakReference<ResourceFactory> registeredWithFactory = null;\n+    private boolean firstValidate = true;\n@@ -47,0 +51,3 @@\n+    private final static PlatformLogger log =\n+            PlatformLogger.getLogger(WCPageBackBufferImpl.class.getName());\n+\n@@ -91,0 +98,7 @@\n+        ResourceFactory factory = GraphicsPipeline.getDefaultResourceFactory();\n+        if (factory == null || factory.isDisposed()) {\n+            log.fine(\"WCPageBackBufferImpl::validate : device disposed or not ready\");\n+\n+            return false;\n+        }\n+\n@@ -103,1 +117,5 @@\n-            if (! listenerAdded) {\n+            if (registeredWithFactory == null || registeredWithFactory.get() != factory) {\n+                factory.addFactoryListener(this);\n+                registeredWithFactory = new WeakReference<>(factory);\n+            }\n+            if (firstValidate) {\n@@ -106,2 +124,1 @@\n-                GraphicsPipeline.getDefaultResourceFactory().addFactoryListener(this);\n-                listenerAdded = true;\n+                firstValidate = false;\n@@ -109,1 +126,1 @@\n-                \/\/ texture must have been nullified in factoryReset().\n+                \/\/ texture must have been nullified in factoryReset() or factoryReleased().\n@@ -138,0 +155,6 @@\n+        log.fine(\"WCPageBackBufferImpl: resource factory released\");\n+\n+        if (texture != null) {\n+            texture.dispose();\n+            texture = null;\n+        }\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/javafx\/webkit\/prism\/WCPageBackBufferImpl.java","additions":28,"deletions":5,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -94,1 +94,4 @@\n-        if (gc == null) {\n+        if (gc == null || !gc.isValid()) {\n+            log.fine(\"GraphicsDecoder::decode : GC is \" +\n+                    (gc == null ? \"null\" : \" invalid\"));\n+\n@@ -97,0 +100,1 @@\n+\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/graphics\/GraphicsDecoder.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -141,0 +141,2 @@\n+    public abstract boolean isValid();\n+\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/graphics\/WCGraphicsContext.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,0 +90,5 @@\n+        if (gc == null || !gc.isValid()) {\n+            log.fine(\"WCRenderQueue::decode : GC is \" + (gc == null ? \"null\" : \" invalid\"));\n+            return;\n+        }\n+\n@@ -102,1 +107,4 @@\n-        assert (gc != null);\n+        if (gc == null || !gc.isValid()) {\n+            log.fine(\"WCRenderQueue::decode : GC is \" + (gc == null ? \"null\" : \" invalid\"));\n+            return;\n+        }\n@@ -108,1 +116,4 @@\n-        assert (gc != null);\n+        if (gc == null || !gc.isValid()) {\n+            log.fine(\"WCRenderQueue::decode : GC is \" + (gc == null ? \"null\" : \" invalid\"));\n+            return;\n+        }\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/graphics\/WCRenderQueue.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -73,0 +73,5 @@\n+    @Override\n+    public boolean isValid() {\n+        return gc.isValid();\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/perf\/WCGraphicsPerfLogger.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}