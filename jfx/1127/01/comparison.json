{"files":[{"patch":"@@ -234,0 +234,12 @@\n+    \/**\n+     * Returns the shape for the underline in local coordinates.\n+     *\n+     * @param start the beginning character index for the range\n+     * @param end the end character index (non-inclusive) for the range\n+     * @return an array of {@code PathElement} which can be used to create a {@code Shape}\n+     * @since 21\n+     *\/\n+    public final PathElement[] underlineShape(int start, int end) {\n+        return getRange(start, end, TextLayout.TYPE_UNDERLINE);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/TextFlow.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+    protected final CheckBox underline;\n@@ -66,0 +67,1 @@\n+    protected final Path underlinePath;\n@@ -86,0 +88,6 @@\n+        underlinePath = new Path();\n+        underlinePath.setStrokeWidth(1);\n+        underlinePath.setStroke(Color.GREEN);\n+        underlinePath.setFill(Color.YELLOW);\n+        underlinePath.setManaged(false);\n+\n@@ -107,1 +115,7 @@\n-            updateControl();\n+            updateCaret();\n+        });\n+\n+        underline = new CheckBox(\"underline shape\");\n+        underline.setId(\"underline\");\n+        underline.selectedProperty().addListener((p) -> {\n+            updateUnderline();\n@@ -119,0 +133,1 @@\n+        p.option(underline);\n@@ -145,3 +160,3 @@\n-        if (showCaretPath.isSelected()) {\n-            caretPath.getElements().clear();\n-            control.getChildren().add(caretPath);\n+        caretPath.getElements().clear();\n+        underlinePath.getElements().clear();\n+        control.getChildren().addAll(underlinePath, caretPath);\n@@ -149,6 +164,2 @@\n-            int len = computeTextLength(control);\n-            for (int i = 0; i < len; i++) {\n-                PathElement[] es = control.caretShape(i, true);\n-                caretPath.getElements().addAll(es);\n-            }\n-        }\n+        updateCaret();\n+        updateUnderline();\n@@ -163,0 +174,3 @@\n+            } else {\n+                \/\/ treat any other nodes as having length 1\n+                len++;\n@@ -164,1 +178,0 @@\n-            \/\/ embedded nodes do not have an associated text\n@@ -224,0 +237,22 @@\n+\n+    protected void updateUnderline() {\n+        if (underline.isSelected()) {\n+            int len = computeTextLength(control);\n+            PathElement[] es = control.underlineShape(0, len);\n+            underlinePath.getElements().addAll(es);\n+        } else {\n+            underlinePath.getElements().clear();\n+        }\n+    }\n+\n+    protected void updateCaret() {\n+        if (showCaretPath.isSelected()) {\n+            int len = computeTextLength(control);\n+            for (int i = 0; i < len; i++) {\n+                PathElement[] es = control.caretShape(i, true);\n+                caretPath.getElements().addAll(es);\n+            }\n+        } else {\n+            caretPath.getElements().clear();\n+        }\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextFlowPage.java","additions":46,"deletions":11,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.text;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javafx.geometry.Bounds;\n+import javafx.scene.shape.Path;\n+import javafx.scene.shape.PathElement;\n+import javafx.scene.text.Font;\n+import javafx.scene.text.Text;\n+import javafx.scene.text.TextFlow;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.sun.javafx.application.PlatformImpl;\n+\n+\/**\n+ * Tests TextFlow Node\n+ *\/\n+public class TextFlowNodeTest {\n+    @BeforeClass\n+    public static void initFX() {\n+        final CountDownLatch startupLatch = new CountDownLatch(1);\n+        PlatformImpl.startup(() -> {\n+            startupLatch.countDown();\n+        });\n+        try {\n+            if (!startupLatch.await(5, TimeUnit.SECONDS)) {\n+                Assert.fail(\"Timeout waiting for FX runtime to start\");\n+            }\n+        } catch (InterruptedException ex) {\n+            Assert.fail(\"Unexpected exception: \" + ex);\n+        }\n+    }\n+\n+    @Test\n+    public void testUnderlineShape() {\n+        Text t1 = new Text(\"one \");\n+        t1.setFont(new Font(\"Monospaced Regular\", 16));\n+        Text t2 = new Text(\"two.\");\n+        TextFlow f = new TextFlow(t1, t2);\n+\n+        \/\/ underline 0,0 must be empty\n+        PathElement[] p = f.underlineShape(0, 0);\n+        Assert.assertNotNull(p);\n+        Assert.assertEquals(p.length, 0);\n+\n+        \/\/ underline 1,0 .. 1,len must increase monotonically\n+        int len = t1.getText().length() + t2.getText().length();\n+        double w = 0.0;\n+        for (int i = 1; i < len; i++) {\n+            p = f.underlineShape(0, i);\n+            Assert.assertNotNull(p);\n+\n+            \/\/ width must increase\n+            Bounds b = new Path(p).getBoundsInLocal();\n+            Assert.assertTrue(b.getWidth() > w);\n+            w = b.getWidth();\n+\n+            \/\/ test height greater than zero\n+            Assert.assertTrue(b.getHeight() > 0.0);\n+        }\n+\n+        \/\/ 0,1000 same as 0,len\n+        Bounds b1 = new Path(f.underlineShape(0, len)).getBoundsInLocal();\n+        Bounds b2 = new Path(f.underlineShape(0, 1000)).getBoundsInLocal();\n+        Assert.assertEquals(b1, b2);\n+        Assert.assertTrue(b1.getHeight() > 0.0);\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/text\/TextFlowNodeTest.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}