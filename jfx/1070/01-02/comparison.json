{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,5 @@\n+import java.util.AbstractSet;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n@@ -28,0 +33,1 @@\n+\n@@ -33,5 +39,0 @@\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.NoSuchElementException;\n-\n-\n@@ -42,1 +43,1 @@\n-abstract class BitSet<T> implements ObservableSet<T> {\n+abstract class BitSet<T> extends AbstractSet<T> implements ObservableSet<T> {\n@@ -232,0 +233,6 @@\n+        if (this.getClass() != c.getClass()) {\n+            for (Object obj : c) {\n+                if (!contains(obj)) {\n+                    return false;\n+                }\n+            }\n@@ -233,3 +240,1 @@\n-        if (c == null || this.getClass() != c.getClass()) {\n-            \/\/ this not modified!\n-            return false;\n+            return true;\n@@ -261,0 +266,2 @@\n+        if (this.getClass() != c.getClass()) {\n+            boolean modified = false;\n@@ -262,3 +269,5 @@\n-        if (c == null || this.getClass() != c.getClass()) {\n-            \/\/ this not modified!\n-            return false;\n+            for (T obj : c) {\n+                modified |= add(obj);\n+            }\n+\n+            return modified;\n@@ -333,0 +342,2 @@\n+        if (this.getClass() != c.getClass()) {\n+            boolean modified = false;\n@@ -334,3 +345,10 @@\n-        if (c == null || this.getClass() != c.getClass()) {\n-            clear();\n-            return true;\n+            for (Iterator<T> iterator = this.iterator(); iterator.hasNext();) {\n+                T obj = iterator.next();\n+\n+                if (!c.contains(obj)) {\n+                    iterator.remove();\n+                    modified = true;\n+                }\n+            }\n+\n+            return modified;\n@@ -415,0 +433,2 @@\n+        if (this.getClass() != c.getClass()) {\n+            boolean modified = false;\n@@ -416,3 +436,5 @@\n-        if (c == null || this.getClass() != c.getClass()) {\n-            \/\/ this not modified!\n-            return false;\n+            for (Object obj : c) {\n+                modified |= remove(obj);\n+            }\n+\n+            return modified;\n@@ -496,12 +518,0 @@\n-    @Override\n-    public int hashCode() {\n-        int hash = 7;\n-        if (bits.length > 0) {\n-            for (int n = 0; n < bits.length; n++) {\n-                final long mask = bits[n];\n-                hash = 71 * hash + (int)(mask ^ (mask >>> 32));\n-            }\n-        }\n-        return hash;\n-    }\n-\n@@ -510,2 +520,4 @@\n-\n-        if (this == obj) {\n+        \/\/ Note: overridden to provide a fast path; must still respect Set contract or it\n+        \/\/ will not interact correctly with other sets; same goes for hashCode, do not\n+        \/\/ override arbitrarily!\n+        if (obj == this) {\n@@ -514,3 +526,2 @@\n-\n-        if (obj == null || this.getClass() != obj.getClass()) {\n-            return false;\n+        if (obj instanceof BitSet<?> bitSet) {  \/\/ fast path if other is a BitSet\n+            return equalsBitSet(bitSet);\n@@ -519,1 +530,2 @@\n-        final BitSet other = (BitSet) obj;\n+        return super.equals(obj);\n+    }\n@@ -521,2 +533,3 @@\n-        final int a = this.bits != null ? this.bits.length : 0;\n-        final int b = other.bits != null ? other.bits.length : 0;\n+    private boolean equalsBitSet(BitSet<?> other) {\n+        int a = this.bits != null ? this.bits.length : 0;\n+        int b = other.bits != null ? other.bits.length : 0;\n@@ -629,1 +642,0 @@\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/BitSet.java","additions":52,"deletions":40,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -72,16 +72,0 @@\n-    \/**\n-     * Gets an immutable list of style-classes of the {@code Selector}.\n-     * @return an immutable list of style-classes of the {@code Selector}\n-     *\/\n-    public List<String> getStyleClasses() {\n-\n-        final List<String> names = new ArrayList<>();\n-\n-        Iterator<StyleClass> iter = styleClassSet.iterator();\n-        while (iter.hasNext()) {\n-            names.add(iter.next().getStyleClassName());\n-        }\n-\n-        return Collections.unmodifiableList(names);\n-    }\n-\n@@ -118,22 +102,0 @@\n-    \/**\n-     * Gets an immutable list of {@code String}s of pseudo classes of the {@code Selector}\n-     * @return an immutable list of {@code String}s\n-     *\/\n-    List<String> getPseudoclasses() {\n-\n-        final List<String> names = new ArrayList<>();\n-\n-        Iterator<PseudoClass> iter = pseudoClassState.iterator();\n-        while (iter.hasNext()) {\n-            names.add(iter.next().getPseudoClassName());\n-        }\n-\n-        if (nodeOrientation == RIGHT_TO_LEFT) {\n-            names.add(\"dir(rtl)\");\n-        } else if (nodeOrientation == LEFT_TO_RIGHT) {\n-            names.add(\"dir(ltr)\");\n-        }\n-\n-        return Collections.unmodifiableList(names);\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/SimpleSelector.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"modified"}]}