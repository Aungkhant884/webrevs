{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,5 @@\n+import java.util.AbstractSet;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n@@ -28,0 +33,1 @@\n+\n@@ -33,5 +39,0 @@\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.NoSuchElementException;\n-\n-\n@@ -42,1 +43,1 @@\n-abstract class BitSet<T> implements ObservableSet<T> {\n+abstract class BitSet<T> extends AbstractSet<T> implements ObservableSet<T> {\n@@ -232,0 +233,6 @@\n+        if (this.getClass() != c.getClass()) {\n+            for (Object obj : c) {\n+                if (!contains(obj)) {\n+                    return false;\n+                }\n+            }\n@@ -233,3 +240,1 @@\n-        if (c == null || this.getClass() != c.getClass()) {\n-            \/\/ this not modified!\n-            return false;\n+            return true;\n@@ -261,0 +266,2 @@\n+        if (this.getClass() != c.getClass()) {\n+            boolean modified = false;\n@@ -262,3 +269,5 @@\n-        if (c == null || this.getClass() != c.getClass()) {\n-            \/\/ this not modified!\n-            return false;\n+            for (T obj : c) {\n+                modified |= add(obj);\n+            }\n+\n+            return modified;\n@@ -333,0 +342,2 @@\n+        if (this.getClass() != c.getClass()) {\n+            boolean modified = false;\n@@ -334,3 +345,10 @@\n-        if (c == null || this.getClass() != c.getClass()) {\n-            clear();\n-            return true;\n+            for (Iterator<T> iterator = this.iterator(); iterator.hasNext();) {\n+                T obj = iterator.next();\n+\n+                if (!c.contains(obj)) {\n+                    iterator.remove();\n+                    modified = true;\n+                }\n+            }\n+\n+            return modified;\n@@ -415,0 +433,2 @@\n+        if (this.getClass() != c.getClass()) {\n+            boolean modified = false;\n@@ -416,3 +436,5 @@\n-        if (c == null || this.getClass() != c.getClass()) {\n-            \/\/ this not modified!\n-            return false;\n+            for (Object obj : c) {\n+                modified |= remove(obj);\n+            }\n+\n+            return modified;\n@@ -496,12 +518,0 @@\n-    @Override\n-    public int hashCode() {\n-        int hash = 7;\n-        if (bits.length > 0) {\n-            for (int n = 0; n < bits.length; n++) {\n-                final long mask = bits[n];\n-                hash = 71 * hash + (int)(mask ^ (mask >>> 32));\n-            }\n-        }\n-        return hash;\n-    }\n-\n@@ -510,2 +520,4 @@\n-\n-        if (this == obj) {\n+        \/\/ Note: overridden to provide a fast path; must still respect Set contract or it\n+        \/\/ will not interact correctly with other sets; same goes for hashCode, do not\n+        \/\/ override arbitrarily!\n+        if (obj == this) {\n@@ -514,3 +526,2 @@\n-\n-        if (obj == null || this.getClass() != obj.getClass()) {\n-            return false;\n+        if (obj instanceof BitSet<?> bitSet) {  \/\/ fast path if other is a BitSet\n+            return equalsBitSet(bitSet);\n@@ -519,1 +530,2 @@\n-        final BitSet other = (BitSet) obj;\n+        return super.equals(obj);\n+    }\n@@ -521,2 +533,3 @@\n-        final int a = this.bits != null ? this.bits.length : 0;\n-        final int b = other.bits != null ? other.bits.length : 0;\n+    private boolean equalsBitSet(BitSet<?> other) {\n+        int a = this.bits != null ? this.bits.length : 0;\n+        int b = other.bits != null ? other.bits.length : 0;\n@@ -629,1 +642,0 @@\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/BitSet.java","additions":52,"deletions":40,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -100,5 +100,0 @@\n-    private CompoundSelector() {\n-        this(null, null);\n-    }\n-\n-\n@@ -113,1 +108,1 @@\n-            allPseudoClasses.addAll(match.pseudoClasses);\n+            allPseudoClasses.addAll(match.getPseudoClasses());\n@@ -154,1 +149,3 @@\n-                    pseudoClassOut.addAll(pseudoClassIn);\n+                    if (pseudoClassIn != null) {\n+                        pseudoClassOut.addAll(pseudoClassIn);\n+                    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/CompoundSelector.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import com.sun.javafx.css.PseudoClassState;\n-\n@@ -32,0 +30,3 @@\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.Set;\n@@ -43,3 +44,3 @@\n-    final Selector selector;\n-    final PseudoClassState pseudoClasses;\n-    final int idCount;\n+    private final Selector selector;\n+    private final Set<PseudoClass> pseudoClasses;\n+\n@@ -47,0 +48,1 @@\n+    final int idCount;\n@@ -52,2 +54,4 @@\n-    Match(final Selector selector, PseudoClassState pseudoClasses, int idCount, int styleClassCount) {\n-        assert selector != null;\n+    Match(final Selector selector, Set<PseudoClass> pseudoClasses, int idCount, int styleClassCount) {\n+        Objects.requireNonNull(selector);\n+        Objects.requireNonNull(pseudoClasses);\n+\n@@ -57,4 +61,3 @@\n-        this.pseudoClasses = pseudoClasses;\n-        int nPseudoClasses = pseudoClasses != null ? pseudoClasses.size() : 0;\n-        if (selector instanceof SimpleSelector) {\n-            final SimpleSelector simple = (SimpleSelector)selector;\n+        this.pseudoClasses = Collections.unmodifiableSet(pseudoClasses);\n+        int nPseudoClasses = pseudoClasses.size();\n+        if (selector instanceof SimpleSelector simple) {\n@@ -70,1 +73,2 @@\n-     * @return the {@code Selector}\n+     *\n+     * @return the {@code Selector}, never {@code null}\n@@ -77,2 +81,3 @@\n-     * Gets the pseudo class state.\n-     * @return the pseudo class state\n+     * Gets the pseudo class states as an immutable set.\n+     *\n+     * @return the pseudo class state, never {@code null}\n@@ -80,1 +85,1 @@\n-    public PseudoClassState getPseudoClasses() {\n+    public Set<PseudoClass> getPseudoClasses() {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/Match.java","additions":21,"deletions":16,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -96,1 +96,2 @@\n-     * @return match\n+     *\n+     * @return a match, never {@code null}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/Selector.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -73,17 +73,1 @@\n-     * Gets an immutable list of style-classes of the {@code Selector}.\n-     * @return an immutable list of style-classes of the {@code Selector}\n-     *\/\n-    public List<String> getStyleClasses() {\n-\n-        final List<String> names = new ArrayList<>();\n-\n-        Iterator<StyleClass> iter = styleClassSet.iterator();\n-        while (iter.hasNext()) {\n-            names.add(iter.next().getStyleClassName());\n-        }\n-\n-        return Collections.unmodifiableList(names);\n-    }\n-\n-    \/**\n-     * Gets the {@code Set} of {@code StyleClass}es of the {@code Selector}.\n+     * Gets the immutable {@code Set} of {@code StyleClass}es of the {@code Selector}.\n@@ -99,1 +83,1 @@\n-    final private StyleClassSet styleClassSet;\n+    private final Set<StyleClass> styleClassSet;\n@@ -101,1 +85,1 @@\n-    final private String id;\n+    private final String id;\n@@ -111,2 +95,2 @@\n-    \/\/ a mask of bits corresponding to the pseudoclasses\n-    final private PseudoClassState pseudoClassState;\n+    \/\/ a mask of bits corresponding to the pseudoclasses (immutable)\n+    private final Set<PseudoClass> pseudoClassState;\n@@ -118,22 +102,0 @@\n-    \/**\n-     * Gets an immutable list of {@code String}s of pseudo classes of the {@code Selector}\n-     * @return an immutable list of {@code String}s\n-     *\/\n-    List<String> getPseudoclasses() {\n-\n-        final List<String> names = new ArrayList<>();\n-\n-        Iterator<PseudoClass> iter = pseudoClassState.iterator();\n-        while (iter.hasNext()) {\n-            names.add(iter.next().getPseudoClassName());\n-        }\n-\n-        if (nodeOrientation == RIGHT_TO_LEFT) {\n-            names.add(\"dir(rtl)\");\n-        } else if (nodeOrientation == LEFT_TO_RIGHT) {\n-            names.add(\"dir(ltr)\");\n-        }\n-\n-        return Collections.unmodifiableList(names);\n-    }\n-\n@@ -171,1 +133,1 @@\n-        this.styleClassSet = new StyleClassSet();\n+        Set<StyleClass> scs = new StyleClassSet();\n@@ -173,2 +135,2 @@\n-        int nMax = styleClasses != null ? styleClasses.size() : 0;\n-        for(int n=0; n<nMax; n++) {\n+        if (styleClasses != null) {\n+            for(int n = 0; n < styleClasses.size(); n++) {\n@@ -176,2 +138,2 @@\n-            final String styleClassName = styleClasses.get(n);\n-            if (styleClassName == null || styleClassName.isEmpty()) continue;\n+                final String styleClassName = styleClasses.get(n);\n+                if (styleClassName == null || styleClassName.isEmpty()) continue;\n@@ -179,2 +141,2 @@\n-            final StyleClass styleClass = StyleClassSet.getStyleClass(styleClassName);\n-            this.styleClassSet.add(styleClass);\n+                scs.add(StyleClassSet.getStyleClass(styleClassName));\n+            }\n@@ -183,0 +145,1 @@\n+        this.styleClassSet = Collections.unmodifiableSet(scs);\n@@ -185,1 +148,2 @@\n-        this.pseudoClassState = new PseudoClassState();\n+        PseudoClassState pcs = new PseudoClassState();\n+        NodeOrientation dir = NodeOrientation.INHERIT;\n@@ -187,1 +151,2 @@\n-        nMax = pseudoClasses != null ? pseudoClasses.size() : 0;\n+        if (pseudoClasses != null) {\n+            for(int n = 0; n < pseudoClasses.size(); n++) {\n@@ -189,2 +154,2 @@\n-        NodeOrientation dir = NodeOrientation.INHERIT;\n-        for(int n=0; n<nMax; n++) {\n+                final String pclass = pseudoClasses.get(n);\n+                if (pclass == null || pclass.isEmpty()) continue;\n@@ -192,2 +157,6 @@\n-            final String pclass = pseudoClasses.get(n);\n-            if (pclass == null || pclass.isEmpty()) continue;\n+                \/\/ TODO: This is not how we should handle functional pseudo-classes in the long-run!\n+                if (\"dir(\".regionMatches(true, 0, pclass, 0, 4)) {\n+                    final boolean rtl = \"dir(rtl)\".equalsIgnoreCase(pclass);\n+                    dir = rtl ? RIGHT_TO_LEFT : LEFT_TO_RIGHT;\n+                    continue;\n+                }\n@@ -195,5 +164,1 @@\n-            \/\/ TODO: This is not how we should handle functional pseudo-classes in the long-run!\n-            if (\"dir(\".regionMatches(true, 0, pclass, 0, 4)) {\n-                final boolean rtl = \"dir(rtl)\".equalsIgnoreCase(pclass);\n-                dir = rtl ? RIGHT_TO_LEFT : LEFT_TO_RIGHT;\n-                continue;\n+                pcs.add(PseudoClassState.getPseudoClass(pclass));\n@@ -201,3 +166,0 @@\n-\n-            final PseudoClass pseudoClass = PseudoClassState.getPseudoClass(pclass);\n-            this.pseudoClassState.add(pseudoClass);\n@@ -206,0 +168,1 @@\n+        this.pseudoClassState = Collections.unmodifiableSet(pcs);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/SimpleSelector.java","additions":27,"deletions":64,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -134,1 +134,4 @@\n-            node.styleHelper.triggerStates.addAll(triggerStates[0]);\n+\n+            if (triggerStates[0] != null) {\n+                node.styleHelper.triggerStates.addAll(triggerStates[0]);\n+            }\n@@ -174,1 +177,4 @@\n-        helper.triggerStates.addAll(triggerStates[0]);\n+\n+        if (triggerStates[0] != null) {\n+            helper.triggerStates.addAll(triggerStates[0]);\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/CssStyleHelper.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -608,2 +608,1 @@\n-    public void testPseudoClassState_retainAll_withNullArg() {\n-\n+    public void testPseudoClassState_retainAll_throwsWithNullArg() {\n@@ -611,8 +610,0 @@\n-        PseudoClassState bStates = null;\n-        BitSetShim.retainAll(aStates, bStates);\n-        List<PseudoClass> states = new ArrayList<>();\n-        Iterator<PseudoClass> iter = BitSetShim.iterator(aStates);\n-        while (iter.hasNext()) {\n-            states.add(iter.next());\n-        }\n-        assertEquals(0, states.size(), 0.000001);\n@@ -620,0 +611,1 @@\n+        assertThrows(NullPointerException.class, () -> BitSetShim.retainAll(aStates, null));\n@@ -714,2 +706,1 @@\n-    public void testPseudoClassState_addAll_withNullArgs() {\n-\n+    public void testPseudoClassState_addAll_throwsWithNullArgs() {\n@@ -717,8 +708,0 @@\n-        PseudoClassState bStates = null;\n-        BitSetShim.addAll(aStates, bStates);\n-        List<PseudoClass> states = new ArrayList<>();\n-        Iterator<PseudoClass> iter = BitSetShim.iterator(aStates);\n-        while (iter.hasNext()) {\n-            states.add(iter.next());\n-        }\n-        assertEquals(0, states.size(), 0.000001);\n@@ -726,0 +709,1 @@\n+        assertThrows(NullPointerException.class, () -> BitSetShim.addAll(aStates, null));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/PseudoClassTest.java","additions":4,"deletions":20,"binary":false,"changes":24,"status":"modified"}]}