{"files":[{"patch":"@@ -518,0 +518,7 @@\n+    @Override\n+    public int hashCode() {\n+        \/\/ Note: overridden because equals is overridden; both equals and hashCode MUST\n+        \/\/ respect the Set contract to interact correctly with sets of other types!\n+        return super.hashCode();\n+    }\n+\n@@ -520,3 +527,2 @@\n-        \/\/ Note: overridden to provide a fast path; must still respect Set contract or it\n-        \/\/ will not interact correctly with other sets; same goes for hashCode, do not\n-        \/\/ override arbitrarily!\n+        \/\/ Note: overridden to provide a fast path; both equals and hashCode MUST respect\n+        \/\/ the Set contract to interact correctly with sets of other types!\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/BitSet.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -72,0 +72,16 @@\n+    \/**\n+     * Gets an immutable list of style-classes of the {@code Selector}.\n+     * @return an immutable list of style-classes of the {@code Selector}\n+     *\/\n+    public List<String> getStyleClasses() {\n+\n+        final List<String> names = new ArrayList<>();\n+\n+        Iterator<StyleClass> iter = styleClassSet.iterator();\n+        while (iter.hasNext()) {\n+            names.add(iter.next().getStyleClassName());\n+        }\n+\n+        return Collections.unmodifiableList(names);\n+    }\n+\n@@ -136,1 +152,1 @@\n-            for(int n = 0; n < styleClasses.size(); n++) {\n+            for (int n = 0; n < styleClasses.size(); n++) {\n@@ -152,1 +168,1 @@\n-            for(int n = 0; n < pseudoClasses.size(); n++) {\n+            for (int n = 0; n < pseudoClasses.size(); n++) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/SimpleSelector.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"}]}