{"files":[{"patch":"@@ -31,1 +31,1 @@\n-import javafx.application.PlatformPreferences;\n+import javafx.application.Platform;\n@@ -33,1 +33,0 @@\n-import java.util.Map;\n@@ -83,1 +82,1 @@\n-    protected void onPreferencesChanged(Map<String, Object> preferences) {\n+    protected void onPreferencesChanged() {\n@@ -95,1 +94,1 @@\n-            PlatformPreferences preferences = PlatformImpl.getPlatformPreferences();\n+            Platform.Preferences preferences = Platform.getPreferences();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/theme\/CaspianTheme.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import javafx.application.PlatformPreferences;\n+import javafx.application.Platform;\n@@ -34,1 +34,0 @@\n-import java.util.Map;\n@@ -85,1 +84,1 @@\n-    protected void onPreferencesChanged(Map<String, Object> preferences) {\n+    protected void onPreferencesChanged() {\n@@ -97,1 +96,1 @@\n-            PlatformPreferences preferences = PlatformImpl.getPlatformPreferences();\n+            Platform.Preferences preferences = Platform.getPreferences();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/theme\/ModenaTheme.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-    private int lockCount;\n@@ -49,3 +48,1 @@\n-        if (++lockCount == 1) {\n-            beginChange();\n-        };\n+        beginChange();\n@@ -55,3 +52,1 @@\n-        if (--lockCount == 0) {\n-            endChange();\n-        }\n+        endChange();\n@@ -118,3 +113,1 @@\n-            if (lockCount == 0) {\n-                beginChange();\n-            }\n+            beginChange();\n@@ -135,3 +128,1 @@\n-            if (lockCount == 0) {\n-                endChange();\n-            }\n+            endChange();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/theme\/StylesheetList.java","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-import javafx.application.PlatformPreferencesListener;\n-import javafx.application.WeakPlatformPreferencesListener;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.WeakInvalidationListener;\n@@ -34,1 +34,0 @@\n-import java.util.Map;\n@@ -50,1 +49,1 @@\n-    private final PlatformPreferencesListener preferencesChanged = (preferences, changed) -> {\n+    private final InvalidationListener preferencesChanged = observable -> {\n@@ -53,1 +52,1 @@\n-            onPreferencesChanged(changed);\n+            onPreferencesChanged();\n@@ -63,1 +62,1 @@\n-        Platform.getPreferences().addListener(new WeakPlatformPreferencesListener(preferencesChanged));\n+        Platform.getPreferences().addListener(new WeakInvalidationListener(preferencesChanged));\n@@ -99,5 +98,0 @@\n-     * <p>\n-     * The {@code changed} map only contains platform preferences that have actually changed.\n-     * Use {@link Platform#getPreferences()} to get a list of all platform preferences.\n-     *\n-     * @param changed the platform preferences that have changed\n@@ -105,1 +99,1 @@\n-    protected void onPreferencesChanged(Map<String, Object> changed) {}\n+    protected void onPreferencesChanged() {}\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/theme\/ThemeBase.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import java.util.ArrayList;\n+import java.util.List;\n@@ -39,2 +39,2 @@\n-    public void testOnPreferencesChanged() {\n-        var trace = new ArrayList<Map<String, Object>>();\n+    public void testOnPreferencesChangedIsInvokedWhenPreferencesAreInvalidated() {\n+        int[] count = new int[1];\n@@ -43,2 +43,2 @@\n-            protected void onPreferencesChanged(Map<String, Object> changed) {\n-                trace.add(Map.copyOf(changed));\n+            protected void onPreferencesChanged() {\n+                count[0]++;\n@@ -49,2 +49,1 @@\n-        assertEquals(1, trace.size());\n-        assertEquals(Map.of(\"foo\", \"bar\"), trace.get(0));\n+        assertEquals(1, count[0]);\n@@ -53,2 +52,25 @@\n-        assertEquals(2, trace.size());\n-        assertEquals(Map.of(\"foo\", \"baz\", \"qux\", \"quz\"), trace.get(1));\n+        assertEquals(2, count[0]);\n+    }\n+\n+    @Test\n+    public void testAddFirst() {\n+        var theme = new ThemeBase() {\n+            {\n+                addFirst(\"foo\");\n+                addFirst(\"bar\");\n+            }\n+        };\n+\n+        assertEquals(List.of(\"bar\", \"foo\"), theme.getStylesheets());\n+    }\n+\n+    @Test\n+    public void testAddLast() {\n+        var theme = new ThemeBase() {\n+            {\n+                addLast(\"foo\");\n+                addLast(\"bar\");\n+            }\n+        };\n+\n+        assertEquals(List.of(\"foo\", \"bar\"), theme.getStylesheets());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/theme\/ThemeBaseTest.java","additions":31,"deletions":9,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-import javafx.application.PlatformPreferences;\n+import javafx.application.Platform;\n@@ -995,1 +995,1 @@\n-    public static PlatformPreferences getPlatformPreferences() {\n+    public static Platform.Preferences getPlatformPreferences() {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,3 @@\n-import javafx.application.PlatformPreferences;\n-import javafx.application.PlatformPreferencesListener;\n+import javafx.application.Platform;\n+import javafx.beans.InvalidationListener;\n+import javafx.collections.MapChangeListener;\n@@ -39,1 +40,1 @@\n-public final class PlatformPreferencesImpl extends AbstractMap<String, Object> implements PlatformPreferences {\n+public final class PlatformPreferencesImpl extends AbstractMap<String, Object> implements Platform.Preferences {\n@@ -43,1 +44,2 @@\n-    private final List<PlatformPreferencesListener> listeners = new CopyOnWriteArrayList<>();\n+    private final List<InvalidationListener> invalidationListeners = new CopyOnWriteArrayList<>();\n+    private final List<MapChangeListener<? super String, ? super Object>> changeListeners = new CopyOnWriteArrayList<>();\n@@ -85,2 +87,2 @@\n-    public void addListener(PlatformPreferencesListener listener) {\n-        listeners.add(listener);\n+    public void addListener(InvalidationListener listener) {\n+        invalidationListeners.add(listener);\n@@ -90,2 +92,12 @@\n-    public void removeListener(PlatformPreferencesListener listener) {\n-        listeners.remove(listener);\n+    public void removeListener(InvalidationListener listener) {\n+        invalidationListeners.remove(listener);\n+    }\n+\n+    @Override\n+    public void addListener(MapChangeListener<? super String, ? super Object> listener) {\n+        changeListeners.add(listener);\n+    }\n+\n+    @Override\n+    public void removeListener(MapChangeListener<? super String, ? super Object> listener) {\n+        changeListeners.remove(listener);\n@@ -95,2 +107,26 @@\n-        for (PlatformPreferencesListener listener : listeners) {\n-            listener.onPreferencesChanged(this, changed);\n+        for (InvalidationListener listener : invalidationListeners) {\n+            try {\n+                listener.invalidated(this);\n+            } catch (Exception e) {\n+                Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);\n+            }\n+        }\n+\n+        for (Map.Entry<String, Object> entry : changed.entrySet()) {\n+            boolean keyExists = modifiableMap.containsKey(entry.getKey());\n+            Object oldValue = keyExists ? modifiableMap.get(entry.getKey()) : null;\n+            MapChangeListener.Change<String, Object> change = new MapChangeListener.Change<>(this) {\n+                @Override public boolean wasAdded() { return true; }\n+                @Override public boolean wasRemoved() { return keyExists; }\n+                @Override public String getKey() { return entry.getKey(); }\n+                @Override public Object getValueAdded() { return entry.getValue(); }\n+                @Override public Object getValueRemoved() { return oldValue; }\n+            };\n+\n+            for (MapChangeListener<? super String, ? super Object> listener : changeListeners) {\n+                try {\n+                    listener.onChanged(change);\n+                } catch (Exception e) {\n+                    Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);\n+                }\n+            }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformPreferencesImpl.java","additions":46,"deletions":10,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import javafx.collections.ObservableMap;\n@@ -34,0 +35,1 @@\n+import javafx.scene.paint.Color;\n@@ -421,1 +423,1 @@\n-     * Gets all {@link PlatformPreferences} of the current platform.\n+     * Gets all {@link Preferences preferences} of the current platform.\n@@ -423,1 +425,1 @@\n-     * @return a {@code PlatformPreferences} instance\n+     * @return a {@code Preferences} instance\n@@ -426,1 +428,1 @@\n-    public static PlatformPreferences getPreferences() {\n+    public static Preferences getPreferences() {\n@@ -430,0 +432,184 @@\n+    \/**\n+     * Contains UI preferences of the current platform.\n+     * <p>\n+     * {@code Preferences} extends {@link ObservableMap} to expose platform preferences as key-value pairs.\n+     * For convenience, {@link #getString}, {@link #getBoolean} and {@link #getColor} are provided as typed\n+     * alternatives to the untyped {@link #get} method.\n+     * <p>\n+     * The preferences that are reported by the platform may be dependent on the operating system version.\n+     * Applications should always test whether a preference is available, or use the {@link #getString(String, String)},\n+     * {@link #getBoolean(String, boolean)} or {@link #getColor(String, Color)} overloads that accept a fallback\n+     * value if the preference is not available.\n+     * <p>\n+     * The following list contains all preferences that are potentially available on the specified platforms:\n+     *\n+     * <table>\n+     *     <caption><\/caption>\n+     *     <tbody>\n+     *         <tr><th colspan=\"2\" scope=\"colgroup\">Windows<\/th><\/tr>\n+     *         <tr><td>{@code Windows.SPI.HighContrast}<\/td><td>{@link Boolean}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.SPI.HighContrastColorScheme}<\/td><td>{@link String}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.SysColor.COLOR_3DFACE}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.SysColor.COLOR_BTNTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.SysColor.COLOR_GRAYTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.SysColor.COLOR_HIGHLIGHT}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.SysColor.COLOR_HIGHLIGHTTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.SysColor.COLOR_HOTLIGHT}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.SysColor.COLOR_WINDOW}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.SysColor.COLOR_WINDOWTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.UIColor.Background}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.UIColor.Foreground}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.UIColor.AccentDark3}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.UIColor.AccentDark2}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.UIColor.AccentDark1}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.UIColor.Accent}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.UIColor.AccentLight1}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.UIColor.AccentLight2}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code Windows.UIColor.AccentLight3}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><\/tr>\n+     *\n+     *         <tr><th colspan=\"2\" scope=\"colgroup\">macOS<\/th><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.labelColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.secondaryLabelColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.tertiaryLabelColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.quaternaryLabelColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.textColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.placeholderTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.selectedTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.textBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.selectedTextBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.keyboardFocusIndicatorColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.unemphasizedSelectedTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.unemphasizedSelectedTextBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.linkColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.separatorColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.selectedContentBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.unemphasizedSelectedContentBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.selectedMenuItemTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.gridColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.headerTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.alternatingContentBackgroundColors}<\/td><td>{@link Color}{@code []}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.controlAccentColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.controlColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.controlBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.controlTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.disabledControlTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.selectedControlColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.selectedControlTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.alternateSelectedControlTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.currentControlTint}<\/td><td>{@link String}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.windowBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.windowFrameTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.underPageBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.findHighlightColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.highlightColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.shadowColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemBlueColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemBrownColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemGrayColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemGreenColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemIndigoColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemOrangeColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemPinkColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemPurpleColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemRedColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemTealColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSColor.systemYellowColor}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><\/tr>\n+     *\n+     *         <tr><th colspan=\"2\" scope=\"colgroup\">Linux<\/th><\/tr>\n+     *         <tr><td>{@code GTK.theme_name}<\/td><td>{@link String}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_base_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_selected_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_selected_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.insensitive_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.insensitive_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.insensitive_base_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_unfocused_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_unfocused_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_unfocused_base_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_unfocused_selected_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.theme_unfocused_selected_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.borders}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.unfocused_borders}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.warning_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.error_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><td>{@code GTK.success_color}<\/td><td>{@link Color}<\/td><\/tr>\n+     *         <tr><\/tr>\n+     *     <\/tbody>\n+     * <\/table>\n+     *\n+     * @since 21\n+     *\/\n+    public interface Preferences extends ObservableMap<String, Object> {\n+        \/**\n+         * Returns the {@link String} instance to which the specified key is mapped.\n+         *\n+         * @param key the key\n+         * @return the {@code String} instance to which the {@code key} is mapped, or\n+         *         {@code null} if the key is not mapped to a {@code String} instance\n+         *\/\n+        String getString(String key);\n+\n+        \/**\n+         * Returns the {@link String} instance to which the specified key is mapped,\n+         * or a fallback value if the key is not mapped to a {@code String} instance.\n+         *\n+         * @param key the key\n+         * @return the {@code String} instance to which the {@code key} is mapped, or\n+         *         {@code fallbackValue} if the key is not mapped to a {@code String}\n+         *         instance\n+         *\/\n+        default String getString(String key, String fallbackValue) {\n+            String value = getString(key);\n+            return value != null ? value : fallbackValue;\n+        }\n+\n+        \/**\n+         * Returns the {@link Boolean} instance to which the specified key is mapped.\n+         *\n+         * @param key the key\n+         * @return the {@code Boolean} instance to which the {@code key} is mapped, or\n+         *         {@code null} if the key is not mapped to a {@code Boolean} instance\n+         *\/\n+        Boolean getBoolean(String key);\n+\n+        \/**\n+         * Returns the {@code boolean} value to which the specified key is mapped,\n+         * or a fallback value if the key is not mapped to a {@code boolean} value.\n+         *\n+         * @param key the key\n+         * @return the {@code boolean} value to which the {@code key} is mapped, or\n+         *         {@code fallbackValue} if the key is not mapped to a {@code boolean}\n+         *         value\n+         *\/\n+        default boolean getBoolean(String key, boolean fallbackValue) {\n+            Boolean value = getBoolean(key);\n+            return value != null ? value : fallbackValue;\n+        }\n+\n+        \/**\n+         * Returns the {@link Color} instance to which the specified key is mapped.\n+         *\n+         * @param key the key\n+         * @return the {@code Color} instance to which the {@code key} is mapped, or\n+         *         {@code null} if the key is not mapped to a {@code Color} instance\n+         *\/\n+        Color getColor(String key);\n+\n+        \/**\n+         * Returns the {@link Color} instance to which the specified key is mapped,\n+         * or a fallback value if the key is not mapped to a {@code Color} instance.\n+         *\n+         * @param key the key\n+         * @return the {@code Color} instance to which the {@code key} is mapped, or\n+         *         {@code fallbackValue} if the key is not mapped to a {@code Color}\n+         *         instance\n+         *\/\n+        default Color getColor(String key, Color fallbackValue) {\n+            Color value = getColor(key);\n+            return value != null ? value : fallbackValue;\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/Platform.java","additions":189,"deletions":3,"binary":false,"changes":192,"status":"modified"},{"patch":"@@ -1,230 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package javafx.application;\n-\n-import javafx.scene.paint.Color;\n-import java.util.Map;\n-\n-\/**\n- * Contains UI preferences of the current platform.\n- * <p>\n- * {@code PlatformPreferences} implements {@link Map} to expose platform preferences as key-value pairs.\n- * For convenience, {@link #getString}, {@link #getBoolean} and {@link #getColor} are provided as typed\n- * alternatives to the untyped {@link #get} method.\n- * <p>\n- * The preferences that are reported by the platform may be dependent on the operating system version.\n- * Applications should always test whether a preference is available, or use the {@link #getString(String, String)},\n- * {@link #getBoolean(String, boolean)} or {@link #getColor(String, Color)} overloads that accept a fallback\n- * value if the preference is not available.\n- * <p>\n- * The following list contains all preferences that are potentially available on the specified platforms:\n- *\n- * <table>\n- *     <caption><\/caption>\n- *     <tbody>\n- *         <tr><th colspan=\"2\" scope=\"colgroup\">Windows<\/th><\/tr>\n- *         <tr><td>{@code Windows.SPI.HighContrast}<\/td><td>{@link Boolean}<\/td><\/tr>\n- *         <tr><td>{@code Windows.SPI.HighContrastColorScheme}<\/td><td>{@link String}<\/td><\/tr>\n- *         <tr><td>{@code Windows.SysColor.COLOR_3DFACE}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Windows.SysColor.COLOR_BTNTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Windows.SysColor.COLOR_GRAYTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Windows.SysColor.COLOR_HIGHLIGHT}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Windows.SysColor.COLOR_HIGHLIGHTTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Windows.SysColor.COLOR_HOTLIGHT}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Windows.SysColor.COLOR_WINDOW}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Windows.SysColor.COLOR_WINDOWTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Windows.UIColor.Background}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Windows.UIColor.Foreground}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Windows.UIColor.AccentDark3}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Windows.UIColor.AccentDark2}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Windows.UIColor.AccentDark1}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Windows.UIColor.Accent}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Windows.UIColor.AccentLight1}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Windows.UIColor.AccentLight2}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Windows.UIColor.AccentLight3}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><\/tr>\n- *\n- *         <tr><th colspan=\"2\" scope=\"colgroup\">macOS<\/th><\/tr>\n- *         <tr><td>{@code macOS.NSColor.labelColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.secondaryLabelColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.tertiaryLabelColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.quaternaryLabelColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.textColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.placeholderTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.selectedTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.textBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.selectedTextBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.keyboardFocusIndicatorColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.unemphasizedSelectedTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.unemphasizedSelectedTextBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.linkColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.separatorColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.selectedContentBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.unemphasizedSelectedContentBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.selectedMenuItemTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.gridColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.headerTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.alternatingContentBackgroundColors}<\/td><td>{@link Color}{@code []}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.controlAccentColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.controlColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.controlBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.controlTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.disabledControlTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.selectedControlColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.selectedControlTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.alternateSelectedControlTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.currentControlTint}<\/td><td>{@link String}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.windowBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.windowFrameTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.underPageBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.findHighlightColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.highlightColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.shadowColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.systemBlueColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.systemBrownColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.systemGrayColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.systemGreenColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.systemIndigoColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.systemOrangeColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.systemPinkColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.systemPurpleColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.systemRedColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.systemTealColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code macOS.NSColor.systemYellowColor}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><\/tr>\n- *\n- *         <tr><th colspan=\"2\" scope=\"colgroup\">Linux<\/th><\/tr>\n- *         <tr><td>{@code Linux.GTK.ThemeName}<\/td><td>{@link String}<\/td><\/tr>\n- *         <tr><td>{@code Linux.GTK.Colors.theme_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Linux.GTK.Colors.theme_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Linux.GTK.Colors.theme_base_color}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Linux.GTK.Colors.theme_selected_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Linux.GTK.Colors.theme_selected_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Linux.GTK.Colors.insensitive_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Linux.GTK.Colors.insensitive_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Linux.GTK.Colors.insensitive_base_color}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Linux.GTK.Colors.theme_unfocused_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Linux.GTK.Colors.theme_unfocused_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Linux.GTK.Colors.theme_unfocused_base_color}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Linux.GTK.Colors.theme_unfocused_selected_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Linux.GTK.Colors.theme_unfocused_selected_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Linux.GTK.Colors.borders}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Linux.GTK.Colors.unfocused_borders}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Linux.GTK.Colors.warning_color}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Linux.GTK.Colors.error_color}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><td>{@code Linux.GTK.Colors.success_color}<\/td><td>{@link Color}<\/td><\/tr>\n- *         <tr><\/tr>\n- *     <\/tbody>\n- * <\/table>\n- *\n- * @since 21\n- *\/\n-public interface PlatformPreferences extends Map<String, Object> {\n-\n-    \/**\n-     * Returns the {@link String} instance to which the specified key is mapped.\n-     *\n-     * @param key the key\n-     * @return the {@code String} instance to which the {@code key} is mapped, or\n-     *         {@code null} if the key is not mapped to a {@code String} instance\n-     *\/\n-    String getString(String key);\n-\n-    \/**\n-     * Returns the {@link String} instance to which the specified key is mapped,\n-     * or a fallback value if the key is not mapped to a {@code String} instance.\n-     *\n-     * @param key the key\n-     * @return the {@code String} instance to which the {@code key} is mapped, or\n-     *         {@code fallbackValue} if the key is not mapped to a {@code String}\n-     *         instance\n-     *\/\n-    default String getString(String key, String fallbackValue) {\n-        String value = getString(key);\n-        return value != null ? value : fallbackValue;\n-    }\n-\n-    \/**\n-     * Returns the {@link Boolean} instance to which the specified key is mapped.\n-     *\n-     * @param key the key\n-     * @return the {@code Boolean} instance to which the {@code key} is mapped, or\n-     *         {@code null} if the key is not mapped to a {@code Boolean} instance\n-     *\/\n-    Boolean getBoolean(String key);\n-\n-    \/**\n-     * Returns the {@code boolean} value to which the specified key is mapped,\n-     * or a fallback value if the key is not mapped to a {@code boolean} value.\n-     *\n-     * @param key the key\n-     * @return the {@code boolean} value to which the {@code key} is mapped, or\n-     *         {@code fallbackValue} if the key is not mapped to a {@code boolean}\n-     *         value\n-     *\/\n-    default boolean getBoolean(String key, boolean fallbackValue) {\n-        Boolean value = getBoolean(key);\n-        return value != null ? value : fallbackValue;\n-    }\n-\n-    \/**\n-     * Returns the {@link Color} instance to which the specified key is mapped.\n-     *\n-     * @param key the key\n-     * @return the {@code Color} instance to which the {@code key} is mapped, or\n-     *         {@code null} if the key is not mapped to a {@code Color} instance\n-     *\/\n-    Color getColor(String key);\n-\n-    \/**\n-     * Returns the {@link Color} instance to which the specified key is mapped,\n-     * or a fallback value if the key is not mapped to a {@code Color} instance.\n-     *\n-     * @param key the key\n-     * @return the {@code Color} instance to which the {@code key} is mapped, or\n-     *         {@code fallbackValue} if the key is not mapped to a {@code Color}\n-     *         instance\n-     *\/\n-    default Color getColor(String key, Color fallbackValue) {\n-        Color value = getColor(key);\n-        return value != null ? value : fallbackValue;\n-    }\n-\n-    \/**\n-     * Adds the specified listener to this {@code PlatformPreferences} instance.\n-     *\n-     * @param listener the {@code PlatformPreferencesListener}\n-     *\/\n-    void addListener(PlatformPreferencesListener listener);\n-\n-    \/**\n-     * Removes the specified listener from this {@code PlatformPreferences} instance.\n-     *\n-     * @param listener the {@code PlatformPreferencesListener}\n-     *\/\n-    void removeListener(PlatformPreferencesListener listener);\n-\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/PlatformPreferences.java","additions":0,"deletions":230,"binary":false,"changes":230,"status":"deleted"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package javafx.application;\n-\n-import java.util.Map;\n-\n-\/**\n- * A {@code PlatformPreferencesListener} is notified when a platform preference has changed.\n- * It can be registered and unregistered with {@link PlatformPreferences#addListener}\n- * and {@link PlatformPreferences#removeListener}.\n- *\n- * @since 21\n- *\/\n-public interface PlatformPreferencesListener {\n-\n-    \/**\n-     * Occurs when one or several platform preferences have changed.\n-     * <p>\n-     * The {@code changed} map contains only the changed preferences.\n-     *\n-     * @param preferences the {@code PlatformPreferences} instance\n-     * @param changed a map of all preferences that have changed\n-     * @see Platform#getPreferences()\n-     *\/\n-    void onPreferencesChanged(PlatformPreferences preferences, Map<String, Object> changed);\n-\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/PlatformPreferencesListener.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -1,91 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package javafx.application;\n-\n-import javafx.beans.NamedArg;\n-import javafx.beans.WeakListener;\n-import java.lang.ref.WeakReference;\n-import java.util.Map;\n-\n-\/**\n- * A {@code WeakPlatformPreferencesListener} can be used if {@link PlatformPreferences}\n- * should only maintain a weak reference to the listener. This helps to avoid\n- * memory leaks that can occur if listeners are not unregistered from observed\n- * objects after use.\n- * <p>\n- * A {@code WeakPlatformPreferencesListener} is created by passing in the original\n- * {@link PlatformPreferencesListener}. The {@code WeakPlatformPreferencesListener} should\n- * then be registered to listen for changes of the observed object.\n- * <p>\n- * Note: You have to keep a reference to the {@code PlatformPreferencesListener} that\n- * was passed in as long as it is in use, otherwise it can be garbage collected\n- * too soon.\n- *\n- * @see PlatformPreferences\n- * @see PlatformPreferencesListener\n- *\n- * @since 21\n- *\/\n-public final class WeakPlatformPreferencesListener implements PlatformPreferencesListener, WeakListener {\n-\n-    private final WeakReference<PlatformPreferencesListener> ref;\n-\n-    \/**\n-     * The constructor of {@code WeakPlatformPreferencesListener}.\n-     *\n-     * @param listener The original listener that should be notified\n-     *\/\n-    public WeakPlatformPreferencesListener(@NamedArg(\"listener\") PlatformPreferencesListener listener) {\n-        if (listener == null) {\n-            throw new NullPointerException(\"Listener must be specified.\");\n-        }\n-        this.ref = new WeakReference<>(listener);\n-    }\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n-    @Override\n-    public boolean wasGarbageCollected() {\n-        return ref.get() == null;\n-    }\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n-    @Override\n-    public void onPreferencesChanged(PlatformPreferences preferences, Map<String, Object> changed) {\n-        PlatformPreferencesListener listener = ref.get();\n-        if (listener != null) {\n-            listener.onPreferencesChanged(preferences, changed);\n-        } else {\n-            \/\/ The weakly reference listener has been garbage collected,\n-            \/\/ so this WeakListener will now unhook itself\n-            preferences.removeListener(this);\n-        }\n-    }\n-\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/WeakPlatformPreferencesListener.java","additions":0,"deletions":91,"binary":false,"changes":91,"status":"deleted"},{"patch":"@@ -29,1 +29,0 @@\n-#include <string>\n@@ -37,1 +36,1 @@\n-                env->NewStringUTF((std::string(\"Linux.GTK.Colors.\") + colorName).c_str()),\n+                env->NewStringUTF(colorName),\n@@ -51,1 +50,1 @@\n-            env->NewStringUTF((std::string(\"Linux.GTK.\") + name).c_str()),\n+            env->NewStringUTF(name),\n@@ -67,18 +66,18 @@\n-    putColor(env, style, prefs, \"theme_fg_color\");\n-    putColor(env, style, prefs, \"theme_bg_color\");\n-    putColor(env, style, prefs, \"theme_base_color\");\n-    putColor(env, style, prefs, \"theme_selected_bg_color\");\n-    putColor(env, style, prefs, \"theme_selected_fg_color\");\n-    putColor(env, style, prefs, \"insensitive_bg_color\");\n-    putColor(env, style, prefs, \"insensitive_fg_color\");\n-    putColor(env, style, prefs, \"insensitive_base_color\");\n-    putColor(env, style, prefs, \"theme_unfocused_fg_color\");\n-    putColor(env, style, prefs, \"theme_unfocused_bg_color\");\n-    putColor(env, style, prefs, \"theme_unfocused_base_color\");\n-    putColor(env, style, prefs, \"theme_unfocused_selected_bg_color\");\n-    putColor(env, style, prefs, \"theme_unfocused_selected_fg_color\");\n-    putColor(env, style, prefs, \"borders\");\n-    putColor(env, style, prefs, \"unfocused_borders\");\n-    putColor(env, style, prefs, \"warning_color\");\n-    putColor(env, style, prefs, \"error_color\");\n-    putColor(env, style, prefs, \"success_color\");\n+    putColor(env, style, prefs, \"GTK.theme_fg_color\");\n+    putColor(env, style, prefs, \"GTK.theme_bg_color\");\n+    putColor(env, style, prefs, \"GTK.theme_base_color\");\n+    putColor(env, style, prefs, \"GTK.theme_selected_bg_color\");\n+    putColor(env, style, prefs, \"GTK.theme_selected_fg_color\");\n+    putColor(env, style, prefs, \"GTK.insensitive_bg_color\");\n+    putColor(env, style, prefs, \"GTK.insensitive_fg_color\");\n+    putColor(env, style, prefs, \"GTK.insensitive_base_color\");\n+    putColor(env, style, prefs, \"GTK.theme_unfocused_fg_color\");\n+    putColor(env, style, prefs, \"GTK.theme_unfocused_bg_color\");\n+    putColor(env, style, prefs, \"GTK.theme_unfocused_base_color\");\n+    putColor(env, style, prefs, \"GTK.theme_unfocused_selected_bg_color\");\n+    putColor(env, style, prefs, \"GTK.theme_unfocused_selected_fg_color\");\n+    putColor(env, style, prefs, \"GTK.borders\");\n+    putColor(env, style, prefs, \"GTK.unfocused_borders\");\n+    putColor(env, style, prefs, \"GTK.warning_color\");\n+    putColor(env, style, prefs, \"GTK.error_color\");\n+    putColor(env, style, prefs, \"GTK.success_color\");\n@@ -90,1 +89,1 @@\n-    putString(env, prefs, \"ThemeName\", themeName);\n+    putString(env, prefs, \"GTK.theme_name\", themeName);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/PlatformSupport.cpp","additions":21,"deletions":22,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -33,4 +33,2 @@\n-\n-import javafx.application.PlatformPreferences;\n-import javafx.application.PlatformPreferencesListener;\n-import java.util.ArrayList;\n+import test.javafx.collections.MockMapObserver;\n+import javafx.beans.InvalidationListener;\n@@ -38,1 +36,0 @@\n-import java.util.List;\n@@ -43,0 +40,1 @@\n+import static test.javafx.collections.MockMapObserver.Tuple.*;\n@@ -74,9 +72,3 @@\n-    public void testPreferencesChangedListener() {\n-        List<String> trace = new ArrayList<>();\n-        var listener = new PlatformPreferencesListener() {\n-            @Override\n-            public void onPreferencesChanged(PlatformPreferences preferences, Map<String, Object> changed) {\n-                trace.add(changed.toString());\n-            }\n-        };\n-\n+    public void testPlatformPreferencesInvalidationListener() {\n+        int[] count = new int[1];\n+        InvalidationListener listener = observable -> count[0]++;\n@@ -85,0 +77,15 @@\n+        updatePreferences(Map.of(\"foo\", \"bar\"));\n+        assertEquals(1, count[0]);\n+\n+        \/\/ InvalidationListener is invoked only once, even when multiple values are changed at the same time\n+        updatePreferences(Map.of(\"qux\", \"quux\", \"quz\", \"quuz\"));\n+        assertEquals(2, count[0]);\n+\n+        getPlatformPreferences().removeListener(listener);\n+    }\n+\n+    @Test\n+    public void testPlatformPreferencesChangeListener() {\n+        var observer = new MockMapObserver<String, Object>();\n+        getPlatformPreferences().addListener(observer);\n+\n@@ -87,2 +94,3 @@\n-        assertEquals(1, trace.size());\n-        assertEquals(\"{foo=bar, baz=qux}\", trace.get(0));\n+        observer.assertAdded(0, tup(\"foo\", \"bar\"));\n+        observer.assertAdded(1, tup(\"baz\", \"qux\"));\n+        observer.clear();\n@@ -92,2 +100,2 @@\n-        assertEquals(2, trace.size());\n-        assertEquals(\"{foo=bar2}\", trace.get(1));\n+        observer.assertAdded(0, tup(\"foo\", \"bar2\"));\n+        observer.clear();\n@@ -97,2 +105,2 @@\n-        assertEquals(3, trace.size());\n-        assertEquals(\"{baz=qux2}\", trace.get(2));\n+        observer.assertAdded(0, tup(\"baz\", \"qux2\"));\n+        observer.clear();\n@@ -102,1 +110,2 @@\n-        assertEquals(3, trace.size());\n+        observer.check0();\n+        observer.clear();\n@@ -104,1 +113,1 @@\n-        getPlatformPreferences().removeListener(listener);\n+        getPlatformPreferences().removeListener(observer);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/application\/PlatformImplTest.java","additions":31,"deletions":22,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import javafx.beans.InvalidationListener;\n@@ -37,0 +38,1 @@\n+import java.util.HashMap;\n@@ -38,0 +40,2 @@\n+import java.util.Objects;\n+import java.util.stream.Stream;\n@@ -42,0 +46,2 @@\n+    private Map<String, Object> cachedPreferences;\n+\n@@ -76,1 +82,2 @@\n-        textArea.setText(\"preferences = \" + formatPrefs(Platform.getPreferences()));\n+        cachedPreferences = new HashMap<>(Platform.getPreferences());\n+        textArea.setText(\"preferences = \" + formatPrefs(cachedPreferences.entrySet().stream()));\n@@ -79,1 +86,4 @@\n-            (preferences, changed) -> {\n+            (InvalidationListener)observable -> {\n+                Stream<Map.Entry<String, Object>> changed = Platform.getPreferences().entrySet().stream()\n+                        .filter(entry -> !Objects.equals(entry.getValue(), cachedPreferences.get(entry.getKey())));\n+\n@@ -83,0 +93,2 @@\n+\n+                cachedPreferences = new HashMap<>(Platform.getPreferences());\n@@ -93,2 +105,2 @@\n-    private static String formatPrefs(Map<String, Object> map) {\n-        String entries = map.entrySet().stream()\n+    private static String formatPrefs(Stream<Map.Entry<String, Object>> prefs) {\n+        String entries = prefs\n","filename":"tests\/manual\/events\/PlatformPreferencesTest.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"}]}