{"files":[{"patch":"@@ -38,1 +38,1 @@\n-#import \"ThemeSupport.h\"\n+#import \"PlatformSupport.h\"\n@@ -120,3 +120,1 @@\n-@implementation GlassApplication {\n-    jobject currentPreferences;\n-}\n+@implementation GlassApplication\n@@ -148,101 +146,0 @@\n-\/**\n- * Collect all platform preferences and return them as a java\/util\/Map.\n- *\/\n-+ (jobject)queryPlatformPreferences\n-{\n-    GET_MAIN_JENV;\n-    jclass mapClass = (jclass)(*env)->FindClass(env, \"java\/util\/HashMap\");\n-    GLASS_CHECK_EXCEPTION(env);\n-    if (mapClass == nil) {\n-        return nil;\n-    }\n-\n-    jmethodID constructor = (*env)->GetMethodID(env, mapClass, \"<init>\", \"()V\");\n-    GLASS_CHECK_EXCEPTION(env);\n-    if (constructor == nil) {\n-        return nil;\n-    }\n-\n-    jobject properties = (*env)->NewObject(env, mapClass, constructor);\n-    GLASS_CHECK_EXCEPTION(env);\n-    if (properties == nil) {\n-        return nil;\n-    }\n-\n-    \/\/ The current appearance is independent from the system appearance, and is set when the application\n-    \/\/ is started. Since the system appearance can change while the application is running, we need to set\n-    \/\/ the current appearance to the application's effective appearance before querying system colors.\n-    NSAppearance* lastAppearance = [NSAppearance currentAppearance];\n-    [NSAppearance setCurrentAppearance:[[NSApplication sharedApplication] effectiveAppearance]];\n-\n-    ThemeSupport* themeSupport = [[ThemeSupport alloc] initWithEnv:env];\n-    [themeSupport queryProperties:properties];\n-    [themeSupport release];\n-\n-    [NSAppearance setCurrentAppearance:lastAppearance];\n-\n-    (*env)->DeleteLocalRef(env, mapClass);\n-    return properties;\n-}\n-\n-- (void)platformPreferencesChanged {\n-    [self performSelectorOnMainThread:@selector(platformPreferencesChangedOnMainThread)\n-          withObject:nil\n-          waitUntilDone:false];\n-}\n-\n-- (void)platformPreferencesChangedOnMainThread {\n-    GET_MAIN_JENV;\n-\n-    jobject newPreferences = [GlassApplication queryPlatformPreferences];\n-    if (newPreferences == nil) {\n-        return;\n-    }\n-\n-    jclass objectClass, collectionsClass;\n-    jmethodID equalsMethod, unmodifiableMapMethod;\n-\n-    bool initialized =\n-        ((objectClass = (jclass)(*env)->FindClass(env, \"java\/lang\/Object\")) != nil) &&\n-        ((collectionsClass = (jclass)(*env)->FindClass(env, \"java\/util\/Collections\")) != nil) &&\n-        ((equalsMethod = (*env)->GetMethodID(env, objectClass, \"equals\", \"(Ljava\/lang\/Object;)Z\")) != 0) &&\n-        ((unmodifiableMapMethod = (*env)->GetStaticMethodID(env, collectionsClass, \"unmodifiableMap\",\n-                                                            \"(Ljava\/util\/Map;)Ljava\/util\/Map;\")) != 0);\n-\n-    if (!initialized) {\n-        GLASS_CHECK_EXCEPTION(env);\n-    } else {\n-        jboolean isEqual = (*env)->CallBooleanMethod(env, newPreferences, equalsMethod, currentPreferences);\n-        GLASS_CHECK_EXCEPTION(env);\n-\n-        if (!isEqual) {\n-            if (currentPreferences != nil) {\n-                (*env)->DeleteGlobalRef(env, currentPreferences);\n-            }\n-\n-            currentPreferences = (*env)->NewGlobalRef(env, newPreferences);\n-            jobject unmodifiablePreferences = (*env)->CallStaticObjectMethod(\n-                env, collectionsClass, unmodifiableMapMethod, newPreferences);\n-            GLASS_CHECK_EXCEPTION(env);\n-            if (unmodifiablePreferences != nil) {\n-                (*env)->CallVoidMethod(\n-                    env, self->jApplication,\n-                    javaIDs.MacApplication.notifyPreferencesChanged,\n-                    unmodifiablePreferences);\n-            }\n-\n-            (*env)->DeleteLocalRef(env, unmodifiablePreferences);\n-        }\n-    }\n-\n-    (*env)->DeleteLocalRef(env, newPreferences);\n-\n-    if (objectClass != nil) {\n-        (*env)->DeleteLocalRef(env, objectClass);\n-    }\n-\n-    if (collectionsClass != nil) {\n-        (*env)->DeleteLocalRef(env, collectionsClass);\n-    }\n-}\n-\n@@ -261,0 +158,19 @@\n+- (void)platformPreferencesDidChange {\n+    \/\/ Some dynamic colors like NSColor.controlAccentColor don't seem to be reliably updated\n+    \/\/ at the exact moment AppleColorPreferencesChangedNotification is received.\n+    \/\/ As a workaround, we wait for a short period of time (one second seems sufficient) before\n+    \/\/ we query the updated platform preferences.\n+\n+    [NSObject cancelPreviousPerformRequestsWithTarget:self\n+              selector:@selector(updatePlatformPreferences)\n+              object:nil];\n+\n+    [self performSelector:@selector(updatePlatformPreferences)\n+          withObject:nil\n+          afterDelay:1.0];\n+}\n+\n+- (void)updatePlatformPreferences {\n+    [PlatformSupport updatePreferences:self->jApplication];\n+}\n+\n@@ -301,1 +217,1 @@\n-                                                                         selector:@selector(platformPreferencesChanged)\n+                                                                         selector:@selector(platformPreferencesDidChange)\n@@ -306,1 +222,1 @@\n-                                                                         selector:@selector(platformPreferencesChanged)\n+                                                                         selector:@selector(platformPreferencesDidChange)\n@@ -962,0 +878,2 @@\n+\n+    [PlatformSupport initIDs:env];\n@@ -1269,1 +1187,1 @@\n-    return [GlassApplication queryPlatformPreferences];\n+    return [PlatformSupport collectPreferences];\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.m","additions":26,"deletions":108,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -89,0 +89,12 @@\n+extern jclass jObjectClass;\n+extern jclass jCollectionsClass;\n+extern jclass jColorClass;\n+extern jclass jHashMapClass;\n+extern jfieldID jBooleanTRUE;\n+extern jfieldID jBooleanFALSE;\n+extern jmethodID jColorRgbMethod;\n+extern jmethodID jHashMapInitMethod;\n+extern jmethodID jMapPutMethod;\n+extern jmethodID jObjectEqualsMethod;\n+extern jmethodID jCollectionsUnmodifiableMapMethod;\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassStatics.h","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,0 +91,12 @@\n+jclass jObjectClass = NULL;\n+jclass jCollectionsClass = NULL;\n+jclass jColorClass = NULL;\n+jclass jHashMapClass = NULL;\n+jfieldID jBooleanTRUE = NULL;\n+jfieldID jBooleanFALSE = NULL;\n+jmethodID jColorRgbMethod = NULL;\n+jmethodID jHashMapInitMethod = NULL;\n+jmethodID jMapPutMethod = NULL;\n+jmethodID jObjectEqualsMethod = NULL;\n+jmethodID jCollectionsUnmodifiableMapMethod = NULL;\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassStatics.m","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#pragma once\n+\n+#import <Cocoa\/Cocoa.h>\n+#import <jni.h>\n+\n+@interface PlatformSupport : NSObject\n+\n++ (void)initIDs:(JNIEnv*)env;\n+\n+\/**\n+ * Collect all platform preferences and return them as a new java\/util\/Map.\n+ *\/\n++ (jobject)collectPreferences;\n+\n+\/**\n+ * Collect all platform preferences and notify the JavaFX application when a preference has changed.\n+ * The change notification includes all preferences, not only the changed preferences.\n+ *\/\n++ (void)updatePreferences:(jobject)application;\n+\n+@end\n\\ No newline at end of file\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/PlatformSupport.h","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,281 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"PlatformSupport.h\"\n+#import \"GlassMacros.h\"\n+\n+#define MACOS_10_13 @available(macOS 10.13, *)\n+#define MACOS_10_14 @available(macOS 10.14, *)\n+\n+#define INIT_CLASS(CLS, NAME)\\\n+    if (CLS == nil) {\\\n+        jclass cls = (*env)->FindClass(env, NAME);\\\n+        if ((*env)->ExceptionCheck(env)) {\\\n+            GLASS_CHECK_EXCEPTION(env);\\\n+            return;\\\n+        }\\\n+        CLS = (*env)->NewGlobalRef(env, cls);\\\n+    }\n+\n+#define INIT_METHOD(CLS, METHOD, NAME, SIG)\\\n+    if (METHOD == nil) {\\\n+        METHOD = (*env)->GetMethodID(env, CLS, NAME, SIG);\\\n+        if ((*env)->ExceptionCheck(env)) {\\\n+            GLASS_CHECK_EXCEPTION(env);\\\n+            return;\\\n+        }\\\n+    }\n+\n+#define INIT_STATIC_METHOD(CLS, METHOD, NAME, SIG)\\\n+    if (METHOD == nil) {\\\n+        METHOD = (*env)->GetStaticMethodID(env, CLS, NAME, SIG);\\\n+        if ((*env)->ExceptionCheck(env)) {\\\n+            GLASS_CHECK_EXCEPTION(env);\\\n+            return;\\\n+        }\\\n+    }\n+\n+#define INIT_STATIC_FIELD(CLS, FIELD, NAME, SIG)\\\n+    if (FIELD == nil) {\\\n+        FIELD = (*env)->GetStaticFieldID(env, CLS, NAME, SIG);\\\n+        if ((*env)->ExceptionCheck(env)) {\\\n+            GLASS_CHECK_EXCEPTION(env);\\\n+            return;\\\n+        }\\\n+    }\n+\n+static jobject currentPreferences = nil;\n+\n+@implementation PlatformSupport\n+\n++ (void)initIDs:(JNIEnv*)env {\n+    INIT_CLASS(jMapClass, \"java\/util\/Map\");\n+    INIT_METHOD(jMapClass, jMapPutMethod, \"put\", \"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;\");\n+\n+    INIT_CLASS(jHashMapClass, \"java\/util\/HashMap\");\n+    INIT_METHOD(jHashMapClass, jHashMapInitMethod, \"<init>\", \"()V\");\n+\n+    INIT_CLASS(jBooleanClass, \"java\/lang\/Boolean\");\n+    INIT_STATIC_FIELD(jBooleanClass, jBooleanTRUE, \"TRUE\", \"Ljava\/lang\/Boolean;\");\n+    INIT_STATIC_FIELD(jBooleanClass, jBooleanFALSE, \"FALSE\", \"Ljava\/lang\/Boolean;\");\n+\n+    INIT_CLASS(jCollectionsClass, \"java\/util\/Collections\");\n+    INIT_STATIC_METHOD(jCollectionsClass, jCollectionsUnmodifiableMapMethod, \"unmodifiableMap\", \"(Ljava\/util\/Map;)Ljava\/util\/Map;\");\n+\n+    INIT_CLASS(jObjectClass, \"java\/lang\/Object\");\n+    INIT_METHOD(jObjectClass, jObjectEqualsMethod, \"equals\", \"(Ljava\/lang\/Object;)Z\");\n+\n+    INIT_CLASS(jColorClass, \"javafx\/scene\/paint\/Color\");\n+    INIT_STATIC_METHOD(jColorClass, jColorRgbMethod, \"rgb\", \"(IIID)Ljavafx\/scene\/paint\/Color;\");\n+}\n+\n++ (jobject)collectPreferences {\n+    GET_MAIN_JENV;\n+\n+    jobject preferences = (*env)->NewObject(env, jHashMapClass, jHashMapInitMethod);\n+    GLASS_CHECK_EXCEPTION(env);\n+    if (preferences == nil) {\n+        return nil;\n+    }\n+\n+    \/\/ The current appearance is set to the system appearance when the application is started.\n+    \/\/ Since the system appearance can change while the application is running, we need to set\n+    \/\/ the current appearance to the application's effective appearance before querying system\n+    \/\/ colors.\n+    NSAppearance* lastAppearance = [NSAppearance currentAppearance];\n+    [NSAppearance setCurrentAppearance:[NSApp effectiveAppearance]];\n+    [PlatformSupport queryNSColors:preferences];\n+    [NSAppearance setCurrentAppearance:lastAppearance];\n+\n+    return preferences;\n+}\n+\n++ (void)queryNSColors:(jobject)preferences {\n+    \/\/ Label colors\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.labelColor\" value:[NSColor labelColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.secondaryLabelColor\" value:[NSColor secondaryLabelColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.tertiaryLabelColor\" value:[NSColor tertiaryLabelColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.quaternaryLabelColor\" value:[NSColor quaternaryLabelColor]];\n+\n+    \/\/ Text colors\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.textColor\" value:[NSColor textColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.placeholderTextColor\" value:[NSColor placeholderTextColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.selectedTextColor\" value:[NSColor selectedTextColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.textBackgroundColor\" value:[NSColor textBackgroundColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.selectedTextBackgroundColor\" value:[NSColor selectedTextBackgroundColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.keyboardFocusIndicatorColor\" value:[NSColor keyboardFocusIndicatorColor]];\n+    if (MACOS_10_14) {\n+        [PlatformSupport putColor:preferences key:\"macOS.NSColor.unemphasizedSelectedTextColor\" value:[NSColor unemphasizedSelectedTextColor]];\n+        [PlatformSupport putColor:preferences key:\"macOS.NSColor.unemphasizedSelectedTextBackgroundColor\" value:[NSColor unemphasizedSelectedTextBackgroundColor]];\n+    }\n+\n+    \/\/ Content colors\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.linkColor\" value:[NSColor linkColor]];\n+    if (MACOS_10_14) {\n+        [PlatformSupport putColor:preferences key:\"macOS.NSColor.separatorColor\" value:[NSColor separatorColor]];\n+        [PlatformSupport putColor:preferences key:\"macOS.NSColor.selectedContentBackgroundColor\" value:[NSColor selectedContentBackgroundColor]];\n+        [PlatformSupport putColor:preferences key:\"macOS.NSColor.unemphasizedSelectedContentBackgroundColor\" value:[NSColor unemphasizedSelectedContentBackgroundColor]];\n+    }\n+\n+    \/\/ Menu colors\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.selectedMenuItemTextColor\" value:[NSColor selectedMenuItemTextColor]];\n+\n+    \/\/ Table colors\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.gridColor\" value:[NSColor gridColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.headerTextColor\" value:[NSColor headerTextColor]];\n+    if (MACOS_10_14) {\n+        [PlatformSupport putColors:preferences key:\"macOS.NSColor.alternatingContentBackgroundColors\" value:[NSColor alternatingContentBackgroundColors]];\n+    }\n+\n+    \/\/ Control colors\n+    if (MACOS_10_14) {\n+        [PlatformSupport putColor:preferences key:\"macOS.NSColor.controlAccentColor\" value:[NSColor controlAccentColor]];\n+    }\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.controlColor\" value:[NSColor controlColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.controlBackgroundColor\" value:[NSColor controlBackgroundColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.controlTextColor\" value:[NSColor controlTextColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.disabledControlTextColor\" value:[NSColor disabledControlTextColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.selectedControlColor\" value:[NSColor selectedControlColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.selectedControlTextColor\" value:[NSColor selectedControlTextColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.alternateSelectedControlTextColor\" value:[NSColor alternateSelectedControlTextColor]];\n+\n+    const char* controlTint = nil;\n+    switch ([NSColor currentControlTint]) {\n+        case NSDefaultControlTint: controlTint = \"NSDefaultControlTint\"; break;\n+        case NSGraphiteControlTint: controlTint = \"NSGraphiteControlTint\"; break;\n+        case NSBlueControlTint: controlTint = \"NSBlueControlTint\"; break;\n+        case NSClearControlTint: controlTint = \"NSClearControlTint\"; break;\n+    }\n+    if (controlTint != nil) {\n+        [PlatformSupport putString:preferences key:\"macOS.NSColor.currentControlTint\" value:controlTint];\n+    }\n+\n+    \/\/ Window colors\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.windowBackgroundColor\" value:[NSColor windowBackgroundColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.windowFrameTextColor\" value:[NSColor windowFrameTextColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.underPageBackgroundColor\" value:[NSColor underPageBackgroundColor]];\n+\n+    \/\/ Highlights and shadows\n+    if (MACOS_10_13) {\n+        [PlatformSupport putColor:preferences key:\"macOS.NSColor.findHighlightColor\" value:[NSColor findHighlightColor]];\n+    }\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.highlightColor\" value:[NSColor highlightColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.shadowColor\" value:[NSColor shadowColor]];\n+\n+    \/\/ Adaptable system colors\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemBlueColor\" value:[NSColor systemBlueColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemBrownColor\" value:[NSColor systemBrownColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemGrayColor\" value:[NSColor systemGrayColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemGreenColor\" value:[NSColor systemGreenColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemIndigoColor\" value:[NSColor systemIndigoColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemOrangeColor\" value:[NSColor systemOrangeColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemPinkColor\" value:[NSColor systemPinkColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemPurpleColor\" value:[NSColor systemPurpleColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemRedColor\" value:[NSColor systemRedColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemTealColor\" value:[NSColor systemTealColor]];\n+    [PlatformSupport putColor:preferences key:\"macOS.NSColor.systemYellowColor\" value:[NSColor systemYellowColor]];\n+}\n+\n++ (void)updatePreferences:(jobject)application {\n+    GET_MAIN_JENV;\n+\n+    jobject newPreferences = [self collectPreferences];\n+    if (newPreferences == nil) {\n+        return;\n+    }\n+\n+    jboolean preferencesChanged = !(*env)->CallBooleanMethod(\n+        env, newPreferences, jObjectEqualsMethod, currentPreferences);\n+    GLASS_CHECK_EXCEPTION(env);\n+\n+    if (preferencesChanged) {\n+        if (currentPreferences != nil) {\n+            (*env)->DeleteGlobalRef(env, currentPreferences);\n+        }\n+\n+        currentPreferences = (*env)->NewGlobalRef(env, newPreferences);\n+\n+        jobject unmodifiablePreferences = (*env)->CallStaticObjectMethod(\n+            env, jCollectionsClass, jCollectionsUnmodifiableMapMethod, newPreferences);\n+        GLASS_CHECK_EXCEPTION(env);\n+\n+        if (unmodifiablePreferences != nil) {\n+            (*env)->CallVoidMethod(\n+                env, application,\n+                javaIDs.MacApplication.notifyPreferencesChanged,\n+                unmodifiablePreferences);\n+\n+            (*env)->DeleteLocalRef(env, unmodifiablePreferences);\n+        }\n+\n+    }\n+\n+    (*env)->DeleteLocalRef(env, newPreferences);\n+}\n+\n++ (void)putString:(jobject)preferences key:(const char*)key value:(const char*)value {\n+    GET_MAIN_JENV;\n+\n+    (*env)->CallObjectMethod(env, preferences, jMapPutMethod,\n+        (*env)->NewStringUTF(env, key),\n+        value != nil ? (*env)->NewStringUTF(env, value) : nil);\n+}\n+\n++ (void)putColor:(jobject)preferences key:(const char*)colorName value:(NSColor*)color {\n+    GET_MAIN_JENV;\n+\n+    NSColor* c = [color colorUsingColorSpace:[NSColorSpace deviceRGBColorSpace]];\n+    (*env)->CallObjectMethod(env, preferences, jMapPutMethod,\n+        (*env)->NewStringUTF(env, colorName),\n+        (*env)->CallStaticObjectMethod(\n+            env, jColorClass, jColorRgbMethod,\n+            (int)([c redComponent] * 255.0f),\n+            (int)([c greenComponent] * 255.0f),\n+            (int)([c blueComponent] * 255.0f),\n+            (double)[c alphaComponent]));\n+}\n+\n++ (void)putColors:(jobject)preferences key:(const char*)colorName value:(NSArray*)colors {\n+    GET_MAIN_JENV;\n+\n+    int count = [colors count];\n+    jobjectArray res = (*env)->NewObjectArray(env, count, jColorClass, nil);\n+\n+    for (int i = 0; i < count; ++i) {\n+        NSColor* c = [colors[i] colorUsingColorSpace:[NSColorSpace deviceRGBColorSpace]];\n+        jobject fxcolor = (*env)->CallStaticObjectMethod(\n+            env, jColorClass, jColorRgbMethod,\n+            (int)([c redComponent] * 255.0f),\n+            (int)([c greenComponent] * 255.0f),\n+            (int)([c blueComponent] * 255.0f),\n+            (double)[c alphaComponent]);\n+\n+        (*env)->SetObjectArrayElement(env, res, i, fxcolor);\n+    }\n+\n+    (*env)->CallObjectMethod(env, preferences, jMapPutMethod, (*env)->NewStringUTF(env, colorName), res);\n+}\n+\n+@end\n\\ No newline at end of file\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/PlatformSupport.m","additions":281,"deletions":0,"binary":false,"changes":281,"status":"added"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#pragma once\n-\n-#import <Cocoa\/Cocoa.h>\n-#import <jni.h>\n-\n-@interface ThemeSupport : NSObject\n-\n-- (id)initWithEnv:(JNIEnv*)env;\n-- (void)dealloc;\n-- (void)queryProperties:(jobject)properties;\n-\n-@end\n\\ No newline at end of file\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/ThemeSupport.h","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -1,189 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#import \"ThemeSupport.h\"\n-#import \"GlassMacros.h\"\n-\n-@implementation ThemeSupport {\n-    JNIEnv* env_;\n-    jclass mapClass_;\n-    jclass colorClass_;\n-    jclass booleanClass_;\n-    jmethodID putMethod_;\n-    jmethodID rgbMethod_;\n-    jfieldID trueField_;\n-    jfieldID falseField_;\n-    bool initialized_;\n-}\n-\n-- (id)initWithEnv:(JNIEnv*)env {\n-    self = [super init];\n-    env_ = env;\n-    initialized_ =\n-        ((mapClass_ = (jclass)(*env)->FindClass(env, \"java\/util\/Map\")) != nil) &&\n-        ((colorClass_ = (jclass)(*env)->FindClass(env, \"javafx\/scene\/paint\/Color\")) != nil) &&\n-        ((booleanClass_ = (jclass)(*env)->FindClass(env, \"java\/lang\/Boolean\")) != nil) &&\n-        ((putMethod_ = (*env)->GetMethodID(env, mapClass_, \"put\", \"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;\")) != 0) &&\n-        ((rgbMethod_ = (*env)->GetStaticMethodID(env, colorClass_, \"rgb\", \"(IIID)Ljavafx\/scene\/paint\/Color;\")) != 0) &&\n-        ((trueField_ = (*env)->GetStaticFieldID(env, booleanClass_, \"TRUE\", \"Ljava\/lang\/Boolean;\")) != 0) &&\n-        ((falseField_ = (*env)->GetStaticFieldID(env, booleanClass_, \"FALSE\", \"Ljava\/lang\/Boolean;\")) != 0);\n-    GLASS_CHECK_EXCEPTION(env);\n-    return self;\n-}\n-\n-- (void)dealloc {\n-    if (mapClass_ != nil) {\n-        (*env_)->DeleteLocalRef(env_, mapClass_);\n-    }\n-\n-    if (colorClass_ != nil) {\n-        (*env_)->DeleteLocalRef(env_, colorClass_);\n-    }\n-\n-    if (booleanClass_ != nil) {\n-        (*env_)->DeleteLocalRef(env_, booleanClass_);\n-    }\n-\n-    [super dealloc];\n-}\n-\n-- (void)queryProperties:(jobject)properties {\n-    if (!initialized_) {\n-        return;\n-    }\n-\n-    \/\/ Label colors\n-    [self putColor:properties key:\"macOS.NSColor.labelColor\" value:[NSColor labelColor]];\n-    [self putColor:properties key:\"macOS.NSColor.secondaryLabelColor\" value:[NSColor secondaryLabelColor]];\n-    [self putColor:properties key:\"macOS.NSColor.tertiaryLabelColor\" value:[NSColor tertiaryLabelColor]];\n-    [self putColor:properties key:\"macOS.NSColor.quaternaryLabelColor\" value:[NSColor quaternaryLabelColor]];\n-\n-    \/\/ Text colors\n-    [self putColor:properties key:\"macOS.NSColor.textColor\" value:[NSColor textColor]];\n-    [self putColor:properties key:\"macOS.NSColor.placeholderTextColor\" value:[NSColor placeholderTextColor]];\n-    [self putColor:properties key:\"macOS.NSColor.selectedTextColor\" value:[NSColor selectedTextColor]];\n-    [self putColor:properties key:\"macOS.NSColor.textBackgroundColor\" value:[NSColor textBackgroundColor]];\n-    [self putColor:properties key:\"macOS.NSColor.selectedTextBackgroundColor\" value:[NSColor selectedTextBackgroundColor]];\n-    [self putColor:properties key:\"macOS.NSColor.keyboardFocusIndicatorColor\" value:[NSColor keyboardFocusIndicatorColor]];\n-    [self putColor:properties key:\"macOS.NSColor.unemphasizedSelectedTextColor\" value:[NSColor unemphasizedSelectedTextColor]];\n-    [self putColor:properties key:\"macOS.NSColor.unemphasizedSelectedTextBackgroundColor\" value:[NSColor unemphasizedSelectedTextBackgroundColor]];\n-\n-    \/\/ Content colors\n-    [self putColor:properties key:\"macOS.NSColor.linkColor\" value:[NSColor linkColor]];\n-    [self putColor:properties key:\"macOS.NSColor.separatorColor\" value:[NSColor separatorColor]];\n-    [self putColor:properties key:\"macOS.NSColor.selectedContentBackgroundColor\" value:[NSColor selectedContentBackgroundColor]];\n-    [self putColor:properties key:\"macOS.NSColor.unemphasizedSelectedContentBackgroundColor\" value:[NSColor unemphasizedSelectedContentBackgroundColor]];\n-\n-    \/\/ Menu colors\n-    [self putColor:properties key:\"macOS.NSColor.selectedMenuItemTextColor\" value:[NSColor selectedMenuItemTextColor]];\n-\n-    \/\/ Table colors\n-    [self putColor:properties key:\"macOS.NSColor.gridColor\" value:[NSColor gridColor]];\n-    [self putColor:properties key:\"macOS.NSColor.headerTextColor\" value:[NSColor headerTextColor]];\n-    [self putColors:properties key:\"macOS.NSColor.alternatingContentBackgroundColors\" value:[NSColor alternatingContentBackgroundColors]];\n-\n-    \/\/ Control colors\n-    [self putColor:properties key:\"macOS.NSColor.controlAccentColor\" value:[NSColor controlAccentColor]];\n-    [self putColor:properties key:\"macOS.NSColor.controlColor\" value:[NSColor controlColor]];\n-    [self putColor:properties key:\"macOS.NSColor.controlBackgroundColor\" value:[NSColor controlBackgroundColor]];\n-    [self putColor:properties key:\"macOS.NSColor.controlTextColor\" value:[NSColor controlTextColor]];\n-    [self putColor:properties key:\"macOS.NSColor.disabledControlTextColor\" value:[NSColor disabledControlTextColor]];\n-    [self putColor:properties key:\"macOS.NSColor.selectedControlColor\" value:[NSColor selectedControlColor]];\n-    [self putColor:properties key:\"macOS.NSColor.selectedControlTextColor\" value:[NSColor selectedControlTextColor]];\n-    [self putColor:properties key:\"macOS.NSColor.alternateSelectedControlTextColor\" value:[NSColor alternateSelectedControlTextColor]];\n-\n-    const char* controlTint = nil;\n-    switch ([NSColor currentControlTint]) {\n-        case NSDefaultControlTint: controlTint = \"NSDefaultControlTint\"; break;\n-        case NSGraphiteControlTint: controlTint = \"NSGraphiteControlTint\"; break;\n-        case NSBlueControlTint: controlTint = \"NSBlueControlTint\"; break;\n-        case NSClearControlTint: controlTint = \"NSClearControlTint\"; break;\n-    }\n-    if (controlTint != nil) {\n-        [self putString:properties key:\"macOS.NSColor.currentControlTint\" value:controlTint];\n-    }\n-\n-    \/\/ Window colors\n-    [self putColor:properties key:\"macOS.NSColor.windowBackgroundColor\" value:[NSColor windowBackgroundColor]];\n-    [self putColor:properties key:\"macOS.NSColor.windowFrameTextColor\" value:[NSColor windowFrameTextColor]];\n-    [self putColor:properties key:\"macOS.NSColor.underPageBackgroundColor\" value:[NSColor underPageBackgroundColor]];\n-\n-    \/\/ Highlights and shadows\n-    [self putColor:properties key:\"macOS.NSColor.findHighlightColor\" value:[NSColor findHighlightColor]];\n-    [self putColor:properties key:\"macOS.NSColor.highlightColor\" value:[NSColor highlightColor]];\n-    [self putColor:properties key:\"macOS.NSColor.shadowColor\" value:[NSColor shadowColor]];\n-\n-    \/\/ Adaptable system colors\n-    [self putColor:properties key:\"macOS.NSColor.systemBlueColor\" value:[NSColor systemBlueColor]];\n-    [self putColor:properties key:\"macOS.NSColor.systemBrownColor\" value:[NSColor systemBrownColor]];\n-    [self putColor:properties key:\"macOS.NSColor.systemGrayColor\" value:[NSColor systemGrayColor]];\n-    [self putColor:properties key:\"macOS.NSColor.systemGreenColor\" value:[NSColor systemGreenColor]];\n-    [self putColor:properties key:\"macOS.NSColor.systemIndigoColor\" value:[NSColor systemIndigoColor]];\n-    [self putColor:properties key:\"macOS.NSColor.systemOrangeColor\" value:[NSColor systemOrangeColor]];\n-    [self putColor:properties key:\"macOS.NSColor.systemPinkColor\" value:[NSColor systemPinkColor]];\n-    [self putColor:properties key:\"macOS.NSColor.systemPurpleColor\" value:[NSColor systemPurpleColor]];\n-    [self putColor:properties key:\"macOS.NSColor.systemRedColor\" value:[NSColor systemRedColor]];\n-    [self putColor:properties key:\"macOS.NSColor.systemTealColor\" value:[NSColor systemTealColor]];\n-    [self putColor:properties key:\"macOS.NSColor.systemYellowColor\" value:[NSColor systemYellowColor]];\n-}\n-\n-- (void)putString:(jobject)properties key:(const char*)key value:(const char*)value {\n-    (*env_)->CallObjectMethod(env_, properties, putMethod_,\n-        (*env_)->NewStringUTF(env_, key),\n-        value != nil ? (*env_)->NewStringUTF(env_, value) : nil);\n-}\n-\n-- (void)putColor:(jobject)properties key:(const char*)colorName value:(NSColor*)color {\n-    NSColor* c = [color colorUsingColorSpace:[NSColorSpace deviceRGBColorSpace]];\n-    (*env_)->CallObjectMethod(env_, properties, putMethod_,\n-        (*env_)->NewStringUTF(env_, colorName),\n-        (*env_)->CallStaticObjectMethod(\n-            env_, colorClass_, rgbMethod_,\n-            (int)([c redComponent] * 255.0f),\n-            (int)([c greenComponent] * 255.0f),\n-            (int)([c blueComponent] * 255.0f),\n-            (double)[c alphaComponent]));\n-}\n-\n-- (void)putColors:(jobject)properties key:(const char*)colorName value:(NSArray*)colors {\n-    int count = [colors count];\n-    jobjectArray res = (*env_)->NewObjectArray(env_, count, colorClass_, nil);\n-\n-    for (int i = 0; i < count; ++i) {\n-        NSColor* c = [colors[i] colorUsingColorSpace:[NSColorSpace deviceRGBColorSpace]];\n-        jobject fxcolor = (*env_)->CallStaticObjectMethod(\n-            env_, colorClass_, rgbMethod_,\n-            (int)([c redComponent] * 255.0f),\n-            (int)([c greenComponent] * 255.0f),\n-            (int)([c blueComponent] * 255.0f),\n-            (double)[c alphaComponent]);\n-\n-        (*env_)->SetObjectArrayElement(env_, res, i, fxcolor);\n-    }\n-\n-    (*env_)->CallObjectMethod(env_, properties, putMethod_, (*env_)->NewStringUTF(env_, colorName), res);\n-}\n-\n-@end\n\\ No newline at end of file\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/ThemeSupport.m","additions":0,"deletions":189,"binary":false,"changes":189,"status":"deleted"},{"patch":"@@ -33,0 +33,1 @@\n+import javafx.scene.layout.BorderPane;\n@@ -55,4 +56,6 @@\n-        var root = new VBox();\n-        root.setPadding(new Insets(20));\n-        root.setSpacing(20);\n-        root.getChildren().add(new VBox(10,\n+        var clearButton = new Button(\"Clear Log\");\n+        clearButton.setOnAction(e -> textArea.setText(\"\"));\n+\n+        var box = new VBox();\n+        box.setSpacing(20);\n+        box.getChildren().add(new VBox(10,\n@@ -64,2 +67,1 @@\n-            new HBox(5, passButton, failButton),\n-            textArea\n+            new HBox(5, passButton, failButton, clearButton)\n@@ -68,0 +70,6 @@\n+        var root = new BorderPane();\n+        root.setPadding(new Insets(20));\n+        root.setTop(box);\n+        root.setCenter(textArea);\n+        BorderPane.setMargin(textArea, new Insets(20, 0, 0, 0));\n+\n@@ -71,1 +79,5 @@\n-            (preferences, changed) -> textArea.setText(textArea.getText() + \"changed = \" + formatPrefs(changed)));\n+            (preferences, changed) -> {\n+                double scrollTop = textArea.getScrollTop();\n+                textArea.setText(textArea.getText() + \"changed = \" + formatPrefs(changed));\n+                textArea.setScrollTop(scrollTop);\n+            });\n","filename":"tests\/manual\/events\/PlatformPreferencesTest.java","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"}]}