{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import java.util.Map;\n@@ -390,0 +391,3 @@\n+\n+    @Override\n+    public native Map<String, Object> getPlatformPreferences();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacApplication.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.util.Arrays;\n@@ -1003,1 +1004,10 @@\n-                if (!Objects.equals(existingValue, entry.getValue())) {\n+                Object newValue = entry.getValue();\n+                boolean equals = false;\n+\n+                if (existingValue instanceof Object[] && newValue instanceof Object[]) {\n+                    equals = Arrays.equals((Object[]) existingValue, (Object[]) newValue);\n+                } else if (!(existingValue instanceof Object[]) && !(newValue instanceof Object[])) {\n+                    equals = Objects.equals(existingValue, entry.getValue());\n+                }\n+\n+                if (!equals) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformImpl.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -109,1 +109,54 @@\n- *         <p>Platform preferences are currently not reported on macOS.\n+ *     <p>\n+ *     <table border=\"1\" style=\"table-layout: fixed; width: 100%; max-width: 40em\">\n+ *         <caption style=\"text-align: left\">UI element colors, reported by {@code NSColor}<\/caption>\n+ *         <tr><td>{@code macOS.NSColor.labelColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.secondaryLabelColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.tertiaryLabelColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.quaternaryLabelColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.textColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.placeholderTextColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.selectedTextColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.textBackgroundColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.selectedTextBackgroundColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.keyboardFocusIndicatorColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.unemphasizedSelectedTextColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.unemphasizedSelectedTextBackgroundColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.linkColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.separatorColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.selectedContentBackgroundColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.unemphasizedSelectedContentBackgroundColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.selectedMenuItemTextColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.gridColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.headerTextColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.alternatingContentBackgroundColors}<\/td><td style=\"width: 5em\">{@link Color}[]<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.controlAccentColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.controlColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.controlBackgroundColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.controlTextColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.disabledControlTextColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.selectedControlColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.selectedControlTextColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.alternateSelectedControlTextColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.currentControlTint}<\/td><td style=\"width: 5em\">{@link String}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.windowBackgroundColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.windowFrameTextColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.underPageBackgroundColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.findHighlightColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.highlightColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.shadowColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *     <\/table>\n+ *     <p>\n+ *     <table border=\"1\" style=\"table-layout: fixed; width: 100%; max-width: 40em\">\n+ *         <caption style=\"text-align: left\">Standard colors, reported by {@code NSColor}<\/caption>\n+ *         <tr><td>{@code macOS.NSColor.systemBlueColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemBrownColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemGrayColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemGreenColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemIndigoColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemOrangeColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemPinkColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemPurpleColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemRedColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemTealColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemYellowColor}<\/td><td style=\"width: 5em\">{@link Color}<\/td><\/tr>\n+ *     <\/table>\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/PlatformPreferences.java","additions":54,"deletions":1,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+#import \"ThemeSupport.h\"\n@@ -119,1 +120,3 @@\n-@implementation GlassApplication\n+@implementation GlassApplication {\n+    jobject currentPreferences;\n+}\n@@ -145,0 +148,101 @@\n+\/**\n+ * Collect all platform preferences and return them as a java\/util\/Map.\n+ *\/\n++ (jobject)queryPlatformPreferences\n+{\n+    GET_MAIN_JENV;\n+    jclass mapClass = (jclass)(*env)->FindClass(env, \"java\/util\/HashMap\");\n+    GLASS_CHECK_EXCEPTION(env);\n+    if (mapClass == nil) {\n+        return nil;\n+    }\n+\n+    jmethodID constructor = (*env)->GetMethodID(env, mapClass, \"<init>\", \"()V\");\n+    GLASS_CHECK_EXCEPTION(env);\n+    if (constructor == nil) {\n+        return nil;\n+    }\n+\n+    jobject properties = (*env)->NewObject(env, mapClass, constructor);\n+    GLASS_CHECK_EXCEPTION(env);\n+    if (properties == nil) {\n+        return nil;\n+    }\n+\n+    \/\/ The current appearance is independent from the system appearance, and is set when the application\n+    \/\/ is started. Since the system appearance can change while the application is running, we need to set\n+    \/\/ the current appearance to the application's effective appearance before querying system colors.\n+    NSAppearance* lastAppearance = [NSAppearance currentAppearance];\n+    [NSAppearance setCurrentAppearance:[[NSApplication sharedApplication] effectiveAppearance]];\n+\n+    ThemeSupport* themeSupport = [[ThemeSupport alloc] initWithEnv:env];\n+    [themeSupport queryProperties:properties];\n+    [themeSupport release];\n+\n+    [NSAppearance setCurrentAppearance:lastAppearance];\n+\n+    (*env)->DeleteLocalRef(env, mapClass);\n+    return properties;\n+}\n+\n+- (void)platformPreferencesChanged {\n+    [self performSelectorOnMainThread:@selector(platformPreferencesChangedOnMainThread)\n+          withObject:nil\n+          waitUntilDone:false];\n+}\n+\n+- (void)platformPreferencesChangedOnMainThread {\n+    GET_MAIN_JENV;\n+\n+    jobject newPreferences = [GlassApplication queryPlatformPreferences];\n+    if (newPreferences == nil) {\n+        return;\n+    }\n+\n+    jclass objectClass, collectionsClass;\n+    jmethodID equalsMethod, unmodifiableMapMethod;\n+\n+    bool initialized =\n+        ((objectClass = (jclass)(*env)->FindClass(env, \"java\/lang\/Object\")) != nil) &&\n+        ((collectionsClass = (jclass)(*env)->FindClass(env, \"java\/util\/Collections\")) != nil) &&\n+        ((equalsMethod = (*env)->GetMethodID(env, objectClass, \"equals\", \"(Ljava\/lang\/Object;)Z\")) != 0) &&\n+        ((unmodifiableMapMethod = (*env)->GetStaticMethodID(env, collectionsClass, \"unmodifiableMap\",\n+                                                            \"(Ljava\/util\/Map;)Ljava\/util\/Map;\")) != 0);\n+\n+    if (!initialized) {\n+        GLASS_CHECK_EXCEPTION(env);\n+    } else {\n+        jboolean isEqual = (*env)->CallBooleanMethod(env, newPreferences, equalsMethod, currentPreferences);\n+        GLASS_CHECK_EXCEPTION(env);\n+\n+        if (!isEqual) {\n+            if (currentPreferences != nil) {\n+                (*env)->DeleteGlobalRef(env, currentPreferences);\n+            }\n+\n+            currentPreferences = (*env)->NewGlobalRef(env, newPreferences);\n+            jobject unmodifiablePreferences = (*env)->CallStaticObjectMethod(\n+                env, collectionsClass, unmodifiableMapMethod, newPreferences);\n+            GLASS_CHECK_EXCEPTION(env);\n+            if (unmodifiablePreferences != nil) {\n+                (*env)->CallVoidMethod(\n+                    env, self->jApplication,\n+                    javaIDs.MacApplication.notifyPreferencesChanged,\n+                    unmodifiablePreferences);\n+            }\n+\n+            (*env)->DeleteLocalRef(env, unmodifiablePreferences);\n+        }\n+    }\n+\n+    (*env)->DeleteLocalRef(env, newPreferences);\n+\n+    if (objectClass != nil) {\n+        (*env)->DeleteLocalRef(env, objectClass);\n+    }\n+\n+    if (collectionsClass != nil) {\n+        (*env)->DeleteLocalRef(env, collectionsClass);\n+    }\n+}\n+\n@@ -196,0 +300,10 @@\n+                        [[NSDistributedNotificationCenter defaultCenter] addObserver:self\n+                                                                         selector:@selector(platformPreferencesChanged)\n+                                                                         name:@\"AppleInterfaceThemeChangedNotification\"\n+                                                                         object:nil];\n+\n+                        [[NSDistributedNotificationCenter defaultCenter] addObserver:self\n+                                                                         selector:@selector(platformPreferencesChanged)\n+                                                                         name:@\"AppleColorPreferencesChangedNotification\"\n+                                                                         object:nil];\n+\n@@ -837,0 +951,4 @@\n+    javaIDs.MacApplication.notifyPreferencesChanged = (*env)->GetMethodID(\n+            env, jClass, \"notifyPreferencesChanged\", \"(Ljava\/util\/Map;)V\");\n+    if ((*env)->ExceptionCheck(env)) return;\n+\n@@ -1142,0 +1260,11 @@\n+\n+\/*\n+ * Class:     com_sun_glass_ui_mac_MacApplication\n+ * Method:    getPreferences\n+ * Signature: ()Ljava\/util\/Map;\n+ *\/\n+JNIEXPORT jobject JNICALL Java_com_sun_glass_ui_mac_MacApplication_getPlatformPreferences\n+(JNIEnv *env, jobject self)\n+{\n+    return [GlassApplication queryPlatformPreferences];\n+}\n\\ No newline at end of file\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.m","additions":131,"deletions":2,"binary":false,"changes":133,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,0 +119,1 @@\n+        jmethodID notifyPreferencesChanged;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassStatics.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#pragma once\n+\n+#import <Cocoa\/Cocoa.h>\n+#import <jni.h>\n+\n+@interface ThemeSupport : NSObject\n+\n+- (id)initWithEnv:(JNIEnv*)env;\n+- (void)dealloc;\n+- (void)queryProperties:(jobject)properties;\n+\n+@end\n\\ No newline at end of file\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/ThemeSupport.h","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,189 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"ThemeSupport.h\"\n+#import \"GlassMacros.h\"\n+\n+@implementation ThemeSupport {\n+    JNIEnv* env_;\n+    jclass mapClass_;\n+    jclass colorClass_;\n+    jclass booleanClass_;\n+    jmethodID putMethod_;\n+    jmethodID rgbMethod_;\n+    jfieldID trueField_;\n+    jfieldID falseField_;\n+    bool initialized_;\n+}\n+\n+- (id)initWithEnv:(JNIEnv*)env {\n+    self = [super init];\n+    env_ = env;\n+    initialized_ =\n+        ((mapClass_ = (jclass)(*env)->FindClass(env, \"java\/util\/Map\")) != nil) &&\n+        ((colorClass_ = (jclass)(*env)->FindClass(env, \"javafx\/scene\/paint\/Color\")) != nil) &&\n+        ((booleanClass_ = (jclass)(*env)->FindClass(env, \"java\/lang\/Boolean\")) != nil) &&\n+        ((putMethod_ = (*env)->GetMethodID(env, mapClass_, \"put\", \"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;\")) != 0) &&\n+        ((rgbMethod_ = (*env)->GetStaticMethodID(env, colorClass_, \"rgb\", \"(IIID)Ljavafx\/scene\/paint\/Color;\")) != 0) &&\n+        ((trueField_ = (*env)->GetStaticFieldID(env, booleanClass_, \"TRUE\", \"Ljava\/lang\/Boolean;\")) != 0) &&\n+        ((falseField_ = (*env)->GetStaticFieldID(env, booleanClass_, \"FALSE\", \"Ljava\/lang\/Boolean;\")) != 0);\n+    GLASS_CHECK_EXCEPTION(env);\n+    return self;\n+}\n+\n+- (void)dealloc {\n+    if (mapClass_ != nil) {\n+        (*env_)->DeleteLocalRef(env_, mapClass_);\n+    }\n+\n+    if (colorClass_ != nil) {\n+        (*env_)->DeleteLocalRef(env_, colorClass_);\n+    }\n+\n+    if (booleanClass_ != nil) {\n+        (*env_)->DeleteLocalRef(env_, booleanClass_);\n+    }\n+\n+    [super dealloc];\n+}\n+\n+- (void)queryProperties:(jobject)properties {\n+    if (!initialized_) {\n+        return;\n+    }\n+\n+    \/\/ Label colors\n+    [self putColor:properties key:\"macOS.NSColor.labelColor\" value:[NSColor labelColor]];\n+    [self putColor:properties key:\"macOS.NSColor.secondaryLabelColor\" value:[NSColor secondaryLabelColor]];\n+    [self putColor:properties key:\"macOS.NSColor.tertiaryLabelColor\" value:[NSColor tertiaryLabelColor]];\n+    [self putColor:properties key:\"macOS.NSColor.quaternaryLabelColor\" value:[NSColor quaternaryLabelColor]];\n+\n+    \/\/ Text colors\n+    [self putColor:properties key:\"macOS.NSColor.textColor\" value:[NSColor textColor]];\n+    [self putColor:properties key:\"macOS.NSColor.placeholderTextColor\" value:[NSColor placeholderTextColor]];\n+    [self putColor:properties key:\"macOS.NSColor.selectedTextColor\" value:[NSColor selectedTextColor]];\n+    [self putColor:properties key:\"macOS.NSColor.textBackgroundColor\" value:[NSColor textBackgroundColor]];\n+    [self putColor:properties key:\"macOS.NSColor.selectedTextBackgroundColor\" value:[NSColor selectedTextBackgroundColor]];\n+    [self putColor:properties key:\"macOS.NSColor.keyboardFocusIndicatorColor\" value:[NSColor keyboardFocusIndicatorColor]];\n+    [self putColor:properties key:\"macOS.NSColor.unemphasizedSelectedTextColor\" value:[NSColor unemphasizedSelectedTextColor]];\n+    [self putColor:properties key:\"macOS.NSColor.unemphasizedSelectedTextBackgroundColor\" value:[NSColor unemphasizedSelectedTextBackgroundColor]];\n+\n+    \/\/ Content colors\n+    [self putColor:properties key:\"macOS.NSColor.linkColor\" value:[NSColor linkColor]];\n+    [self putColor:properties key:\"macOS.NSColor.separatorColor\" value:[NSColor separatorColor]];\n+    [self putColor:properties key:\"macOS.NSColor.selectedContentBackgroundColor\" value:[NSColor selectedContentBackgroundColor]];\n+    [self putColor:properties key:\"macOS.NSColor.unemphasizedSelectedContentBackgroundColor\" value:[NSColor unemphasizedSelectedContentBackgroundColor]];\n+\n+    \/\/ Menu colors\n+    [self putColor:properties key:\"macOS.NSColor.selectedMenuItemTextColor\" value:[NSColor selectedMenuItemTextColor]];\n+\n+    \/\/ Table colors\n+    [self putColor:properties key:\"macOS.NSColor.gridColor\" value:[NSColor gridColor]];\n+    [self putColor:properties key:\"macOS.NSColor.headerTextColor\" value:[NSColor headerTextColor]];\n+    [self putColors:properties key:\"macOS.NSColor.alternatingContentBackgroundColors\" value:[NSColor alternatingContentBackgroundColors]];\n+\n+    \/\/ Control colors\n+    [self putColor:properties key:\"macOS.NSColor.controlAccentColor\" value:[NSColor controlAccentColor]];\n+    [self putColor:properties key:\"macOS.NSColor.controlColor\" value:[NSColor controlColor]];\n+    [self putColor:properties key:\"macOS.NSColor.controlBackgroundColor\" value:[NSColor controlBackgroundColor]];\n+    [self putColor:properties key:\"macOS.NSColor.controlTextColor\" value:[NSColor controlTextColor]];\n+    [self putColor:properties key:\"macOS.NSColor.disabledControlTextColor\" value:[NSColor disabledControlTextColor]];\n+    [self putColor:properties key:\"macOS.NSColor.selectedControlColor\" value:[NSColor selectedControlColor]];\n+    [self putColor:properties key:\"macOS.NSColor.selectedControlTextColor\" value:[NSColor selectedControlTextColor]];\n+    [self putColor:properties key:\"macOS.NSColor.alternateSelectedControlTextColor\" value:[NSColor alternateSelectedControlTextColor]];\n+\n+    const char* controlTint = nil;\n+    switch ([NSColor currentControlTint]) {\n+        case NSDefaultControlTint: controlTint = \"NSDefaultControlTint\"; break;\n+        case NSGraphiteControlTint: controlTint = \"NSGraphiteControlTint\"; break;\n+        case NSBlueControlTint: controlTint = \"NSBlueControlTint\"; break;\n+        case NSClearControlTint: controlTint = \"NSClearControlTint\"; break;\n+    }\n+    if (controlTint != nil) {\n+        [self putString:properties key:\"macOS.NSColor.currentControlTint\" value:controlTint];\n+    }\n+\n+    \/\/ Window colors\n+    [self putColor:properties key:\"macOS.NSColor.windowBackgroundColor\" value:[NSColor windowBackgroundColor]];\n+    [self putColor:properties key:\"macOS.NSColor.windowFrameTextColor\" value:[NSColor windowFrameTextColor]];\n+    [self putColor:properties key:\"macOS.NSColor.underPageBackgroundColor\" value:[NSColor underPageBackgroundColor]];\n+\n+    \/\/ Highlights and shadows\n+    [self putColor:properties key:\"macOS.NSColor.findHighlightColor\" value:[NSColor findHighlightColor]];\n+    [self putColor:properties key:\"macOS.NSColor.highlightColor\" value:[NSColor highlightColor]];\n+    [self putColor:properties key:\"macOS.NSColor.shadowColor\" value:[NSColor shadowColor]];\n+\n+    \/\/ Adaptable system colors\n+    [self putColor:properties key:\"macOS.NSColor.systemBlueColor\" value:[NSColor systemBlueColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemBrownColor\" value:[NSColor systemBrownColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemGrayColor\" value:[NSColor systemGrayColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemGreenColor\" value:[NSColor systemGreenColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemIndigoColor\" value:[NSColor systemIndigoColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemOrangeColor\" value:[NSColor systemOrangeColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemPinkColor\" value:[NSColor systemPinkColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemPurpleColor\" value:[NSColor systemPurpleColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemRedColor\" value:[NSColor systemRedColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemTealColor\" value:[NSColor systemTealColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemYellowColor\" value:[NSColor systemYellowColor]];\n+}\n+\n+- (void)putString:(jobject)properties key:(const char*)key value:(const char*)value {\n+    (*env_)->CallObjectMethod(env_, properties, putMethod_,\n+        (*env_)->NewStringUTF(env_, key),\n+        value != nil ? (*env_)->NewStringUTF(env_, value) : nil);\n+}\n+\n+- (void)putColor:(jobject)properties key:(const char*)colorName value:(NSColor*)color {\n+    NSColor* c = [color colorUsingColorSpace:[NSColorSpace deviceRGBColorSpace]];\n+    (*env_)->CallObjectMethod(env_, properties, putMethod_,\n+        (*env_)->NewStringUTF(env_, colorName),\n+        (*env_)->CallStaticObjectMethod(\n+            env_, colorClass_, rgbMethod_,\n+            (int)([c redComponent] * 255.0f),\n+            (int)([c greenComponent] * 255.0f),\n+            (int)([c blueComponent] * 255.0f),\n+            (double)[c alphaComponent]));\n+}\n+\n+- (void)putColors:(jobject)properties key:(const char*)colorName value:(NSArray*)colors {\n+    int count = [colors count];\n+    jobjectArray res = (*env_)->NewObjectArray(env_, count, colorClass_, nil);\n+\n+    for (int i = 0; i < count; ++i) {\n+        NSColor* c = [colors[i] colorUsingColorSpace:[NSColorSpace deviceRGBColorSpace]];\n+        jobject fxcolor = (*env_)->CallStaticObjectMethod(\n+            env_, colorClass_, rgbMethod_,\n+            (int)([c redComponent] * 255.0f),\n+            (int)([c greenComponent] * 255.0f),\n+            (int)([c blueComponent] * 255.0f),\n+            (double)[c alphaComponent]);\n+\n+        (*env_)->SetObjectArrayElement(env_, res, i, fxcolor);\n+    }\n+\n+    (*env_)->CallObjectMethod(env_, properties, putMethod_, (*env_)->NewStringUTF(env_, colorName), res);\n+}\n+\n+@end\n\\ No newline at end of file\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/ThemeSupport.m","additions":189,"deletions":0,"binary":false,"changes":189,"status":"added"}]}