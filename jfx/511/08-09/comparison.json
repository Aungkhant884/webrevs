{"files":[{"patch":"@@ -523,0 +523,3 @@\n+    @Override\n+    public native Map<String, Object> getPlatformPreferences();\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkApplication.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -148,1 +148,20 @@\n- *         <tr><td>Platform preferences are currently not reported on Linux.<\/td><\/tr>\n+ *         <tr><td>{@code Linux.GTK.ThemeName}<\/td><td>{@link String}<\/td><\/tr>\n+ *         <tr><td>{@code Linux.GTK.Colors.theme_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Linux.GTK.Colors.theme_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Linux.GTK.Colors.theme_base_color}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Linux.GTK.Colors.theme_selected_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Linux.GTK.Colors.theme_selected_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Linux.GTK.Colors.insensitive_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Linux.GTK.Colors.insensitive_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Linux.GTK.Colors.insensitive_base_color}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Linux.GTK.Colors.theme_unfocused_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Linux.GTK.Colors.theme_unfocused_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Linux.GTK.Colors.theme_unfocused_base_color}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Linux.GTK.Colors.theme_unfocused_selected_bg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Linux.GTK.Colors.theme_unfocused_selected_fg_color}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Linux.GTK.Colors.borders}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Linux.GTK.Colors.unfocused_borders}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Linux.GTK.Colors.warning_color}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Linux.GTK.Colors.error_color}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Linux.GTK.Colors.success_color}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><\/tr>\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/PlatformPreferences.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+#include \"PlatformSupport.h\"\n@@ -50,0 +51,1 @@\n+PlatformSupport* platformSupport = NULL;\n@@ -176,0 +178,2 @@\n+\n+    platformSupport = new PlatformSupport(env);\n@@ -239,0 +243,5 @@\n+\n+    if (platformSupport) {\n+        delete platformSupport;\n+        platformSupport = NULL;\n+    }\n@@ -391,0 +400,11 @@\n+\/*\n+ * Class:     com_sun_glass_ui_gtk_GtkApplication\n+ * Method:    getPlatformPreferences\n+ * Signature: ()Ljava\/util\/Map;\n+ *\/\n+JNIEXPORT jobject JNICALL Java_com_sun_glass_ui_gtk_GtkApplication_getPlatformPreferences\n+  (JNIEnv *env, jobject self)\n+{\n+    return platformSupport ? platformSupport->collectPreferences() : NULL;\n+}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassApplication.cpp","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"PlatformSupport.h\"\n+#include \"glass_general.h\"\n+#include <gtk\/gtk.h>\n+#include <string>\n+\n+namespace\n+{\n+    void putColor(JNIEnv* env, GtkStyle* style, jobject preferences, const char* colorName) {\n+        GdkColor color;\n+        if (gtk_style_lookup_color(style, colorName, &color)) {\n+            env->CallObjectMethod(preferences, jMapPut,\n+                env->NewStringUTF((std::string(\"Linux.GTK.Colors.\") + colorName).c_str()),\n+                env->CallStaticObjectMethod(\n+                    jColorCls, jColorRgb,\n+                    (int)(CLAMP((double)color.red \/ 65535.0, 0.0, 1.0) * 255.0),\n+                    (int)(CLAMP((double)color.green \/ 65535.0, 0.0, 1.0) * 255.0),\n+                    (int)(CLAMP((double)color.blue \/ 65535.0, 0.0, 1.0) * 255.0),\n+                    1.0));\n+        }\n+\n+        CHECK_JNI_EXCEPTION(env);\n+    }\n+\n+    void putString(JNIEnv* env, jobject preferences, const char* name, const char* value) {\n+        env->CallObjectMethod(preferences, jMapPut,\n+            env->NewStringUTF((std::string(\"Linux.GTK.\") + name).c_str()),\n+            env->NewStringUTF(value));\n+    }\n+}\n+\n+PlatformSupport::~PlatformSupport() {\n+    if (preferences) {\n+        env->DeleteGlobalRef(preferences);\n+    }\n+}\n+\n+jobject PlatformSupport::collectPreferences() const {\n+    jobject prefs = env->NewObject(jHashMapCls, jHashMapInit);\n+    if (EXCEPTION_OCCURED(env)) return NULL;\n+\n+    GtkStyle* style = gtk_style_new();\n+    putColor(env, style, prefs, \"theme_fg_color\");\n+    putColor(env, style, prefs, \"theme_bg_color\");\n+    putColor(env, style, prefs, \"theme_base_color\");\n+    putColor(env, style, prefs, \"theme_selected_bg_color\");\n+    putColor(env, style, prefs, \"theme_selected_fg_color\");\n+    putColor(env, style, prefs, \"insensitive_bg_color\");\n+    putColor(env, style, prefs, \"insensitive_fg_color\");\n+    putColor(env, style, prefs, \"insensitive_base_color\");\n+    putColor(env, style, prefs, \"theme_unfocused_fg_color\");\n+    putColor(env, style, prefs, \"theme_unfocused_bg_color\");\n+    putColor(env, style, prefs, \"theme_unfocused_base_color\");\n+    putColor(env, style, prefs, \"theme_unfocused_selected_bg_color\");\n+    putColor(env, style, prefs, \"theme_unfocused_selected_fg_color\");\n+    putColor(env, style, prefs, \"borders\");\n+    putColor(env, style, prefs, \"unfocused_borders\");\n+    putColor(env, style, prefs, \"warning_color\");\n+    putColor(env, style, prefs, \"error_color\");\n+    putColor(env, style, prefs, \"success_color\");\n+    g_object_unref(style);\n+\n+    GtkSettings* settings = gtk_settings_get_default();\n+    gchar* themeName;\n+    g_object_get(settings, \"gtk-theme-name\", &themeName, NULL);\n+    putString(env, prefs, \"ThemeName\", themeName);\n+    g_object_unref(settings);\n+\n+    return prefs;\n+}\n+\n+void PlatformSupport::updatePreferences(jobject application) const {\n+    if (application == NULL) {\n+        return;\n+    }\n+\n+    jobject newPreferences = collectPreferences();\n+\n+    jboolean preferencesChanged =\n+        newPreferences != NULL &&\n+        !env->CallBooleanMethod(newPreferences, jObjectEquals, preferences);\n+\n+    if (!EXCEPTION_OCCURED(env) && preferencesChanged) {\n+        if (preferences) {\n+            env->DeleteGlobalRef(preferences);\n+        }\n+\n+        preferences = env->NewGlobalRef(newPreferences);\n+\n+        jobject unmodifiablePreferences = env->CallStaticObjectMethod(\n+            jCollectionsCls, jCollectionsUnmodifiableMap, newPreferences);\n+\n+        if (!EXCEPTION_OCCURED(env)) {\n+            env->CallVoidMethod(application, jApplicationNotifyPreferencesChanged, unmodifiablePreferences);\n+            env->DeleteLocalRef(unmodifiablePreferences);\n+        }\n+    }\n+\n+    env->DeleteLocalRef(newPreferences);\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/PlatformSupport.cpp","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#pragma once\n+\n+#include <jni.h>\n+\n+class PlatformSupport final\n+{\n+public:\n+    PlatformSupport(JNIEnv* env) : env(env) {}\n+    ~PlatformSupport();\n+    PlatformSupport(PlatformSupport const&) = delete;\n+    PlatformSupport& operator=(PlatformSupport const&) = delete;\n+\n+    \/**\n+     * Collect all platform preferences and return them as a new java\/util\/Map.\n+     *\/\n+    jobject collectPreferences() const;\n+\n+    \/**\n+     * Collect all platform preferences and notify the JavaFX application when a preference has changed.\n+     * The change notification includes all preferences, not only the changed preferences.\n+     *\/\n+    void updatePreferences(jobject application) const;\n+\n+private:\n+    JNIEnv* env;\n+    mutable jobject preferences;\n+};\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/PlatformSupport.h","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,0 +91,1 @@\n+jclass jMapCls;\n@@ -92,0 +93,1 @@\n+jmethodID jMapPut;\n@@ -95,0 +97,3 @@\n+jclass jHashMapCls;\n+jmethodID jHashMapInit;\n+\n@@ -113,0 +118,14 @@\n+jmethodID jApplicationNotifyPreferencesChanged;\n+\n+jclass jObjectCls;\n+jmethodID jObjectEquals;\n+\n+jclass jBooleanCls;\n+jfieldID jBooleanTRUE;\n+jfieldID jBooleanFALSE;\n+\n+jclass jCollectionsCls;\n+jmethodID jCollectionsUnmodifiableMap;\n+\n+jclass jColorCls;\n+jmethodID jColorRgb;\n@@ -279,0 +298,1 @@\n+    jMapCls = (jclass)env->NewGlobalRef(clazz);\n@@ -281,0 +301,2 @@\n+    jMapPut = env->GetMethodID(clazz, \"put\", \"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n@@ -286,0 +308,6 @@\n+    clazz = env->FindClass(\"java\/util\/HashMap\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+    jHashMapCls = (jclass) env->NewGlobalRef(clazz);\n+    jHashMapInit = env->GetMethodID(jHashMapCls, \"<init>\", \"()V\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+\n@@ -330,0 +358,28 @@\n+    jApplicationNotifyPreferencesChanged = env->GetMethodID(jApplicationCls, \"notifyPreferencesChanged\", \"(Ljava\/util\/Map;)V\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+\n+    clazz = env->FindClass(\"java\/lang\/Object\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+    jObjectCls = (jclass)env->NewGlobalRef(clazz);\n+    jObjectEquals = env->GetMethodID(jObjectCls, \"equals\", \"(Ljava\/lang\/Object;)Z\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+\n+    clazz = env->FindClass(\"java\/lang\/Boolean\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+    jBooleanCls = (jclass)env->NewGlobalRef(clazz);\n+    jBooleanTRUE = env->GetStaticFieldID(jBooleanCls, \"TRUE\", \"Ljava\/lang\/Boolean;\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+    jBooleanFALSE = env->GetStaticFieldID(jBooleanCls, \"FALSE\", \"Ljava\/lang\/Boolean;\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+\n+    clazz = env->FindClass(\"java\/util\/Collections\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+    jCollectionsCls = (jclass)env->NewGlobalRef(clazz);\n+    jCollectionsUnmodifiableMap = env->GetStaticMethodID(jCollectionsCls, \"unmodifiableMap\", \"(Ljava\/util\/Map;)Ljava\/util\/Map;\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+\n+    clazz = env->FindClass(\"javafx\/scene\/paint\/Color\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n+    jColorCls = (jclass)env->NewGlobalRef(clazz);\n+    jColorRgb = env->GetStaticMethodID(jColorCls, \"rgb\", \"(IIID)Ljavafx\/scene\/paint\/Color;\");\n+    if (env->ExceptionCheck()) return JNI_ERR;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_general.cpp","additions":57,"deletions":1,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -195,0 +195,1 @@\n+    extern jclass jMapCls; \/\/ java.util.Map\n@@ -196,0 +197,1 @@\n+    extern jmethodID jMapPut; \/\/ java.util.Map#put(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;\n@@ -199,0 +201,3 @@\n+    extern jclass jHashMapCls; \/\/ java.util.HashMap\n+    extern jmethodID jHashMapInit; \/\/ java.util.HashMap#<init> ()V\n+\n@@ -217,0 +222,14 @@\n+    extern jmethodID jApplicationNotifyPreferencesChanged; \/\/ notifyPreferencesChanged(Ljava\/util\/Map;)V\n+\n+    extern jclass jObjectCls; \/\/ java.lang.Object\n+    extern jmethodID jObjectEquals; \/\/ java.lang.Object#equals(Ljava\/lang\/Object;)Z\n+\n+    extern jclass jBooleanCls; \/\/ java.lang.Boolean\n+    extern jfieldID jBooleanTRUE; \/\/ java.lang.Boolean#TRUE\n+    extern jfieldID jBooleanFALSE; \/\/ java.lang.Boolean#FALSE\n+\n+    extern jclass jCollectionsCls; \/\/ java.util.Collections;\n+    extern jmethodID jCollectionsUnmodifiableMap; \/\/ java.util.Collections#unmodifiableMap(Ljava\/util\/Map;)Ljava\/util\/Map;\n+\n+    extern jclass jColorCls; \/\/ javafx.scene.paint.Color\n+    extern jmethodID jColorRgb; \/\/ javafx.scene.paint.Color#rgb(IIID)Ljavafx\/scene\/paint\/Color;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_general.h","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"}]}