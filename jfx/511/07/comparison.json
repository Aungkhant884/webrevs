{"files":[{"patch":"@@ -96,4 +96,2 @@\n-        \/\/ Ensures that the default application user agent stylesheet is loaded\n-        if (Application.getUserAgentStylesheet() == null) {\n-            PlatformImpl.setDefaultPlatformUserAgentStylesheet();\n-        }\n+        \/\/ Ensures that the default theme is loaded\n+        PlatformImpl.ensureDefaultTheme();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Control.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -87,4 +87,2 @@\n-        \/\/ Ensures that the default application user agent stylesheet is loaded\n-        if (Application.getUserAgentStylesheet() == null) {\n-            PlatformImpl.setDefaultPlatformUserAgentStylesheet();\n-        }\n+        \/\/ Ensures that the default theme is loaded\n+        PlatformImpl.ensureDefaultTheme();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/PopupControl.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.scene.control.theme;\n+\n+import com.sun.javafx.PlatformUtil;\n+import com.sun.javafx.application.PlatformImpl;\n+import javafx.application.ConditionalFeature;\n+import javafx.application.PlatformPreferences;\n+import javafx.beans.value.WritableValue;\n+import java.util.Map;\n+\n+\/**\n+ * {@code Caspian} is a built-in JavaFX theme that shipped as default in JavaFX 2.\n+ *\n+ * @since 20\n+ *\/\n+public class CaspianTheme extends ThemeBase {\n+\n+    private final WritableValue<String> highContrastStylesheet;\n+\n+    \/**\n+     * Creates a new instance of the {@code CaspianTheme} class.\n+     *\/\n+    public CaspianTheme() {\n+        addLast(\"com\/sun\/javafx\/scene\/control\/skin\/caspian\/caspian.css\");\n+\n+        if (PlatformImpl.isSupported(ConditionalFeature.INPUT_TOUCH)) {\n+            addLast(\"com\/sun\/javafx\/scene\/control\/skin\/caspian\/embedded.css\");\n+\n+            if (com.sun.javafx.util.Utils.isQVGAScreen()) {\n+                addLast(\"com\/sun\/javafx\/scene\/control\/skin\/caspian\/embedded-qvga.css\");\n+            }\n+\n+            if (PlatformUtil.isAndroid()) {\n+                addLast(\"com\/sun\/javafx\/scene\/control\/skin\/caspian\/android.css\");\n+            }\n+\n+            if (PlatformUtil.isIOS()) {\n+                addLast(\"com\/sun\/javafx\/scene\/control\/skin\/caspian\/ios.css\");\n+            }\n+        }\n+\n+        if (PlatformImpl.isSupported(ConditionalFeature.TWO_LEVEL_FOCUS)) {\n+            addLast(\"com\/sun\/javafx\/scene\/control\/skin\/caspian\/two-level-focus.css\");\n+        }\n+\n+        if (PlatformImpl.isSupported(ConditionalFeature.VIRTUAL_KEYBOARD)) {\n+            addLast(\"com\/sun\/javafx\/scene\/control\/skin\/caspian\/fxvk.css\");\n+        }\n+\n+        if (!PlatformImpl.isSupported(ConditionalFeature.TRANSPARENT_WINDOW)) {\n+            addLast(\"com\/sun\/javafx\/scene\/control\/skin\/caspian\/caspian-no-transparency.css\");\n+        }\n+\n+        highContrastStylesheet = addLast(null);\n+        updateHighContrastTheme();\n+    }\n+\n+    @Override\n+    protected void onPreferencesChanged(Map<String, Object> preferences) {\n+        updateHighContrastTheme();\n+    }\n+\n+    private void updateHighContrastTheme() {\n+        boolean enabled = false;\n+        String overrideThemeName = System.getProperty(\"com.sun.javafx.highContrastTheme\");\n+        if (overrideThemeName != null) {\n+            enabled = true;\n+        }\n+\n+        if (!enabled) {\n+            PlatformPreferences preferences = PlatformImpl.getPlatformPreferences();\n+            if (preferences.getBoolean(\"Windows.SPI.HighContrastOn\", false)) {\n+                enabled = preferences.getString(\"Windows.SPI.HighContrastColorScheme\") != null;\n+            }\n+        }\n+\n+        if (enabled) {\n+            \/\/ caspian has only one high contrast theme, use it regardless of the user or platform theme.\n+            highContrastStylesheet.setValue(\"com\/sun\/javafx\/scene\/control\/skin\/caspian\/highcontrast.css\");\n+        } else {\n+            highContrastStylesheet.setValue(null);\n+        }\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/theme\/CaspianTheme.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.scene.control.theme;\n+\n+import com.sun.javafx.PlatformUtil;\n+import com.sun.javafx.application.HighContrastScheme;\n+import com.sun.javafx.application.PlatformImpl;\n+import javafx.application.ConditionalFeature;\n+import javafx.application.PlatformPreferences;\n+import javafx.beans.value.WritableValue;\n+import java.util.Map;\n+import java.util.ResourceBundle;\n+\n+\/**\n+ * {@code Modena} is the default built-in JavaFX theme as of JavaFX 8.\n+ *\n+ * @since 20\n+ *\/\n+public class ModenaTheme extends ThemeBase {\n+\n+    private final WritableValue<String> highContrastStylesheet;\n+\n+    \/**\n+     * Creates a new instance of the {@code ModenaTheme} class.\n+     *\/\n+    public ModenaTheme() {\n+        addLast(\"com\/sun\/javafx\/scene\/control\/skin\/modena\/modena.css\");\n+\n+        if (PlatformImpl.isSupported(ConditionalFeature.INPUT_TOUCH)) {\n+            addLast(\"com\/sun\/javafx\/scene\/control\/skin\/modena\/touch.css\");\n+        }\n+\n+        if (PlatformUtil.isEmbedded()) {\n+            addLast(\"com\/sun\/javafx\/scene\/control\/skin\/modena\/modena-embedded-performance.css\");\n+        }\n+\n+        if (PlatformUtil.isAndroid()) {\n+            addLast(\"com\/sun\/javafx\/scene\/control\/skin\/modena\/android.css\");\n+        }\n+\n+        if (PlatformUtil.isIOS()) {\n+            addLast(\"com\/sun\/javafx\/scene\/control\/skin\/modena\/ios.css\");\n+        }\n+\n+        if (PlatformImpl.isSupported(ConditionalFeature.TWO_LEVEL_FOCUS)) {\n+            addLast(\"com\/sun\/javafx\/scene\/control\/skin\/modena\/two-level-focus.css\");\n+        }\n+\n+        if (PlatformImpl.isSupported(ConditionalFeature.VIRTUAL_KEYBOARD)) {\n+            addLast(\"com\/sun\/javafx\/scene\/control\/skin\/caspian\/fxvk.css\");\n+        }\n+\n+        if (!PlatformImpl.isSupported(ConditionalFeature.TRANSPARENT_WINDOW)) {\n+            addLast(\"com\/sun\/javafx\/scene\/control\/skin\/modena\/modena-no-transparency.css\");\n+        }\n+\n+        highContrastStylesheet = addLast(null);\n+        updateHighContrastTheme();\n+    }\n+\n+    @Override\n+    protected void onPreferencesChanged(Map<String, Object> preferences) {\n+        updateHighContrastTheme();\n+    }\n+\n+    private void updateHighContrastTheme() {\n+        String themeName = null;\n+        String overrideThemeName = System.getProperty(\"com.sun.javafx.highContrastTheme\");\n+        if (overrideThemeName != null) {\n+            themeName = overrideThemeName;\n+        }\n+\n+        if (themeName == null) {\n+            PlatformPreferences preferences = PlatformImpl.getPlatformPreferences();\n+            if (preferences.getBoolean(\"Windows.SPI.HighContrastOn\", false)) {\n+                themeName = preferences.getString(\"Windows.SPI.HighContrastColorScheme\");\n+            }\n+        }\n+\n+        if (themeName != null) {\n+            String stylesheet = switch (themeName.toUpperCase()) {\n+                case \"BLACKONWHITE\" -> \"com\/sun\/javafx\/scene\/control\/skin\/modena\/blackOnWhite.css\";\n+                case \"WHITEONBLACK\" -> \"com\/sun\/javafx\/scene\/control\/skin\/modena\/whiteOnBlack.css\";\n+                case \"YELLOWONBLACK\" -> \"com\/sun\/javafx\/scene\/control\/skin\/modena\/yellowOnBlack.css\";\n+                default -> null;\n+            };\n+\n+            if (stylesheet == null) {\n+                ResourceBundle bundle = ResourceBundle.getBundle(\"com\/sun\/glass\/ui\/win\/themes\");\n+                String enumValue = HighContrastScheme.fromThemeName(bundle::getString, themeName);\n+\n+                stylesheet = enumValue != null ? switch (HighContrastScheme.valueOf(enumValue)) {\n+                    case HIGH_CONTRAST_WHITE -> \"com\/sun\/javafx\/scene\/control\/skin\/modena\/blackOnWhite.css\";\n+                    case HIGH_CONTRAST_BLACK -> \"com\/sun\/javafx\/scene\/control\/skin\/modena\/whiteOnBlack.css\";\n+                    case HIGH_CONTRAST_1, HIGH_CONTRAST_2 -> \"com\/sun\/javafx\/scene\/control\/skin\/modena\/yellowOnBlack.css\";\n+                } : null;\n+            }\n+\n+            highContrastStylesheet.setValue(stylesheet);\n+        } else {\n+            highContrastStylesheet.setValue(null);\n+        }\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/theme\/ModenaTheme.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"},{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.scene.control.theme;\n+\n+import javafx.beans.value.WritableValue;\n+import javafx.collections.ObservableListBase;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+\/**\n+ * Implements a list that allows individual elements to be changed via a {@link WritableValue} wrapper.\n+ *\/\n+class StylesheetList extends ObservableListBase<String> {\n+\n+    private final List<WritableValue<String>> elements;\n+    private final List<String> values;\n+    private int lockCount;\n+\n+    public StylesheetList() {\n+        elements = new ArrayList<>();\n+        values = new ArrayList<>();\n+    }\n+\n+    public void lock() {\n+        if (++lockCount == 1) {\n+            beginChange();\n+        };\n+    }\n+\n+    public void unlock() {\n+        if (--lockCount == 0) {\n+            endChange();\n+        }\n+    }\n+\n+    public WritableValue<String> addFirstElement(String value) {\n+        if (value != null) {\n+            values.add(0, value);\n+        }\n+\n+        WritableValue<String> element = new ElementImpl(value);\n+        elements.add(0, element);\n+        return element;\n+    }\n+\n+    public WritableValue<String> addLastElement(String value) {\n+        if (value != null) {\n+            values.add(value);\n+        }\n+\n+        WritableValue<String> element = new ElementImpl(value);\n+        elements.add(element);\n+        return element;\n+    }\n+\n+    @Override\n+    public String get(int index) {\n+        return values.get(index);\n+    }\n+\n+    @Override\n+    public int size() {\n+        return values.size();\n+    }\n+\n+    private class ElementImpl implements WritableValue<String> {\n+        String currentValue;\n+\n+        ElementImpl(String initialValue) {\n+            currentValue = initialValue;\n+        }\n+\n+        @Override\n+        public String getValue() {\n+            return currentValue;\n+        }\n+\n+        @Override\n+        public void setValue(String newValue) {\n+            if (Objects.equals(currentValue, newValue)) {\n+                return;\n+            }\n+\n+            int index = 0;\n+            for (int i = 0, max = elements.size(); i < max; ++i) {\n+                WritableValue<String> element = elements.get(i);\n+                if (element == this) {\n+                    break;\n+                } else if (element.getValue() != null) {\n+                    ++index;\n+                }\n+            }\n+\n+            if (lockCount == 0) {\n+                beginChange();\n+            }\n+\n+            if (currentValue == null && newValue != null) {\n+                nextAdd(index, index + 1);\n+                values.add(index, newValue);\n+            } else if (currentValue != null && newValue == null) {\n+                nextRemove(index, currentValue);\n+                values.remove(index);\n+            } else if (currentValue != null) {\n+                nextReplace(index, index + 1, List.of(currentValue));\n+                values.set(index, newValue);\n+            }\n+\n+            currentValue = newValue;\n+\n+            if (lockCount == 0) {\n+                endChange();\n+            }\n+        }\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/theme\/StylesheetList.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.scene.control.theme;\n+\n+import javafx.application.Platform;\n+import javafx.application.PlatformPreferencesListener;\n+import javafx.application.WeakPlatformPreferencesListener;\n+import javafx.beans.value.WritableValue;\n+import javafx.collections.ObservableList;\n+import javafx.css.StyleTheme;\n+import java.util.Map;\n+\n+\/**\n+ * {@link ThemeBase} is a {@link StyleTheme} implementation that simplifies toggling or modifying\n+ * stylesheets while retaining the order in which the stylesheets were originally added.\n+ * <p>\n+ * Stylesheet URIs can be added to the theme by calling {@link #addFirst(String)} or {@link #addLast(String)}.\n+ * The value of a stylesheet URI can be changed at any time with the {@link WritableValue} wrapper\n+ * that is returned by {@code addFirst} and {@code addLast}.\n+ *\n+ * @since 20\n+ *\/\n+public abstract class ThemeBase implements StyleTheme {\n+\n+    private final StylesheetList stylesheetList = new StylesheetList();\n+\n+    private final PlatformPreferencesListener preferencesChanged = (preferences, changed) -> {\n+        try {\n+            stylesheetList.lock();\n+            onPreferencesChanged(changed);\n+        } finally {\n+            stylesheetList.unlock();\n+        }\n+    };\n+\n+    \/**\n+     * Creates a new instance of the {@code ThemeBase} class.\n+     *\/\n+    protected ThemeBase() {\n+        Platform.getPreferences().addListener(new WeakPlatformPreferencesListener(preferencesChanged));\n+    }\n+\n+    @Override\n+    public final ObservableList<String> getStylesheets() {\n+        return stylesheetList;\n+    }\n+\n+    \/**\n+     * Adds a new stylesheet URL at the front of the list of stylesheets.\n+     * <p>\n+     * The returned {@link WritableValue} can be used to change the value of the URL at runtime.\n+     * If the value is set to {@code null}, the stylesheet will not be included in the CSS cascade.\n+     *\n+     * @param url the stylesheet URL, or {@code null}\n+     * @return a {@code WritableValue} that represents the stylesheet URL in the list of stylesheets\n+     *\/\n+    protected final WritableValue<String> addFirst(String url) {\n+        return stylesheetList.addFirstElement(url);\n+    }\n+\n+    \/**\n+     * Adds a new stylesheet URL at the back of the list of stylesheets.\n+     * <p>\n+     * The returned {@link WritableValue} can be used to change the value of the URL at runtime.\n+     * If the value is set to {@code null}, the stylesheet will not be included in the CSS cascade.\n+     *\n+     * @param url the stylesheet URL, or {@code null}\n+     * @return a {@code WritableValue} that represents the stylesheet URL in the list of stylesheets\n+     *\/\n+    protected final WritableValue<String> addLast(String url) {\n+        return stylesheetList.addLastElement(url);\n+    }\n+\n+    \/**\n+     * Occurs when platform preferences have changed.\n+     * <p>\n+     * The {@code changed} map only contains platform preferences that have actually changed.\n+     * Use {@link Platform#getPreferences()} to get a list of all platform preferences.\n+     *\n+     * @param changed the platform preferences that have changed\n+     *\/\n+    protected void onPreferencesChanged(Map<String, Object> changed) {}\n+\n+}\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/theme\/ThemeBase.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+<!doctype html>\n+\n+<!--\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+-->\n+\n+<html>\n+<head>\n+<meta http-equiv=\"Content-Type\" content=\"text\/html; charset=UTF-8\">\n+<title>javafx.scene.control.theme<\/title>\n+<\/head>\n+<body>\n+<p>This package contains the built-in style themes for JavaFX controls.<\/p>\n+<ol>\n+    <li>{@link javafx.scene.control.theme.CaspianTheme Caspian}, which is the default theme for JavaFX 2.X<\/li>\n+    <li>{@link javafx.scene.control.theme.ModenaTheme Modena}, which is the default theme for JavaFX 8.X and later<\/li>\n+<\/ol>\n+<p>Style themes can be applied using the {@link javafx.application.Application#setStyleTheme} method:<\/p>\n+<pre>{@code\n+    public class App extends Application {\n+        @Override\n+        public void start(Stage primaryStage) {\n+            setStyleTheme(new CaspianTheme());\n+\n+            primaryStage.setScene(...);\n+            primaryStage.show();\n+        }\n+    }\n+}<\/pre>\n+<\/body>\n+<\/html>\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/theme\/package.html","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+    exports javafx.scene.control.theme;\n","filename":"modules\/javafx.controls\/src\/main\/java\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.scene.control.theme;\n+\n+public class StylesheetListShim extends StylesheetList {\n+}\n","filename":"modules\/javafx.controls\/src\/shims\/java\/javafx\/scene\/control\/theme\/StylesheetListShim.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.theme;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import javafx.css.StyleTheme;\n+import javafx.scene.control.theme.CaspianTheme;\n+import javafx.scene.control.theme.ModenaTheme;\n+\n+import static com.sun.javafx.application.PlatformImpl.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class BuiltinThemeTest {\n+\n+    private static String originalUAStylesheet;\n+    private static StyleTheme originalTheme;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        originalUAStylesheet = platformUserAgentStylesheetProperty().get();\n+        originalTheme = platformThemeProperty().get();\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        platformThemeProperty().set(originalTheme);\n+        platformUserAgentStylesheetProperty().set(originalUAStylesheet);\n+    }\n+\n+    \/*\n+       When platformUserAgentStylesheet is set to a built-in theme name, platformTheme is implicitly\n+       set to the corresponding theme class:\n+\n+       ┌───────────────────────────────────────────────────────────────┐\n+       │ platformUserAgentStylesheet    platformTheme                  │\n+       ├───────────────────────────────────────────────────────────────┤\n+       │ null --> foo.css               null                           │\n+       │ foo.css --> CASPIAN            null --> CaspianTheme          │\n+       │ CASPIAN --> MODENA             CaspianTheme --> ModenaTheme   │\n+       └───────────────────────────────────────────────────────────────┘\n+     *\/\n+    @Test\n+    public void testThemeIsImplicitlySet() {\n+        platformUserAgentStylesheetProperty().set(null);\n+        platformThemeProperty().set(null);\n+\n+        platformUserAgentStylesheetProperty().set(\"foo.css\");\n+        assertNull(platformThemeProperty().get());\n+\n+        platformUserAgentStylesheetProperty().set(\"CASPIAN\");\n+        assertEquals(\"CaspianTheme\", platformThemeProperty().get().getClass().getSimpleName());\n+\n+        platformUserAgentStylesheetProperty().set(\"MODENA\");\n+        assertEquals(\"ModenaTheme\", platformThemeProperty().get().getClass().getSimpleName());\n+    }\n+\n+    \/*\n+       When platformTheme is explicitly set to one of the built-in themes, platformUserAgentStylesheet\n+       is cleared when it was previously set to one of the built-in theme constants.\n+     *\/\n+    @Test\n+    public void testUAConstantIsClearedWhenBuiltinThemeIsExplicitlySet() {\n+        platformUserAgentStylesheetProperty().set(\"CASPIAN\");\n+        platformThemeProperty().set(new CaspianTheme());\n+        assertNull(platformUserAgentStylesheetProperty().get());\n+        assertTrue(platformThemeProperty().get() instanceof CaspianTheme);\n+\n+        platformUserAgentStylesheetProperty().set(\"MODENA\");\n+        platformThemeProperty().set(new ModenaTheme());\n+        assertNull(platformUserAgentStylesheetProperty().get());\n+        assertTrue(platformThemeProperty().get() instanceof ModenaTheme);\n+    }\n+\n+    \/*\n+       When platformTheme is explicitly set to one of the built-in themes, platformUserAgentStylesheet\n+       is NOT cleared when its value does not represent a built-in theme constant.\n+     *\/\n+    @Test\n+    public void testUAStylesheetIsNotClearedWhenBuiltinThemeIsExplicitlySet() {\n+        platformUserAgentStylesheetProperty().set(\"foo.css\");\n+        platformThemeProperty().set(new CaspianTheme());\n+        assertEquals(\"foo.css\", platformUserAgentStylesheetProperty().get());\n+        assertTrue(platformThemeProperty().get() instanceof CaspianTheme);\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/theme\/BuiltinThemeTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.theme;\n+\n+import com.sun.javafx.application.PlatformImpl;\n+import com.sun.javafx.application.PlatformPreferencesImpl;\n+import org.junit.jupiter.api.Test;\n+import javafx.scene.control.theme.CaspianTheme;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class CaspianThemeTest {\n+\n+    @Test\n+    public void testHighContrastThemeWithSystemProperty() {\n+        var theme = new CaspianTheme();\n+        assertFalse(theme.getStylesheets().stream().anyMatch(fileName -> fileName.contains(\"highcontrast.css\")));\n+        System.setProperty(\"com.sun.javafx.highContrastTheme\", \"ANY_VALUE_HERE\");\n+        theme = new CaspianTheme();\n+        assertTrue(theme.getStylesheets().stream().anyMatch(fileName -> fileName.contains(\"highcontrast.css\")));\n+        System.clearProperty(\"com.sun.javafx.highContrastTheme\");\n+    }\n+\n+    @Test\n+    public void testHighContrastThemeWithPlatformPreference() {\n+        var theme = new CaspianTheme();\n+        assertFalse(theme.getStylesheets().stream().anyMatch(fileName -> fileName.contains(\"highcontrast.css\")));\n+\n+        Map<String, Object> map = ((PlatformPreferencesImpl)PlatformImpl.getPlatformPreferences()).getModifiableMap();\n+        Object originalOn = map.put(\"Windows.SPI.HighContrastOn\", true);\n+        Object originalName = map.put(\"Windows.SPI.HighContrastColorScheme\", \"ANY_VALUE_HERE\");\n+\n+        theme = new CaspianTheme();\n+        assertTrue(theme.getStylesheets().stream().anyMatch(fileName -> fileName.contains(\"highcontrast.css\")));\n+\n+        map.put(\"Windows.SPI.HighContrastOn\", originalOn);\n+        map.put(\"Windows.SPI.HighContrastColorScheme\", originalName);\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/theme\/CaspianThemeTest.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.theme;\n+\n+import com.sun.javafx.application.PlatformImpl;\n+import com.sun.javafx.application.PlatformPreferencesImpl;\n+import org.junit.jupiter.api.Test;\n+import javafx.scene.control.theme.ModenaTheme;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class ModenaThemeTest {\n+\n+    @Test\n+    public void testHighContrastThemeWithSystemProperty() {\n+        var theme = new ModenaTheme();\n+        assertFalse(theme.getStylesheets().stream().anyMatch(fileName -> fileName.contains(\"blackOnWhite.css\")));\n+        System.setProperty(\"com.sun.javafx.highContrastTheme\", \"BLACKONWHITE\");\n+        theme = new ModenaTheme();\n+        assertTrue(theme.getStylesheets().stream().anyMatch(fileName -> fileName.contains(\"blackOnWhite.css\")));\n+        System.clearProperty(\"com.sun.javafx.highContrastTheme\");\n+    }\n+\n+    @Test\n+    public void testHighContrastThemeWithPlatformPreference() {\n+        var theme = new ModenaTheme();\n+        assertFalse(theme.getStylesheets().stream().anyMatch(fileName -> fileName.contains(\"blackOnWhite.css\")));\n+\n+        Map<String, Object> map = ((PlatformPreferencesImpl)PlatformImpl.getPlatformPreferences()).getModifiableMap();\n+        Object originalOn = map.put(\"Windows.SPI.HighContrastOn\", true);\n+        Object originalName = map.put(\"Windows.SPI.HighContrastColorScheme\", \"BLACKONWHITE\");\n+\n+        theme = new ModenaTheme();\n+        assertTrue(theme.getStylesheets().stream().anyMatch(fileName -> fileName.contains(\"blackOnWhite.css\")));\n+\n+        map.put(\"Windows.SPI.HighContrastOn\", originalOn);\n+        map.put(\"Windows.SPI.HighContrastColorScheme\", originalName);\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/theme\/ModenaThemeTest.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.theme;\n+\n+import javafx.scene.control.theme.StylesheetListShim;\n+import org.junit.jupiter.api.Test;\n+import test.javafx.collections.MockListObserver;\n+import javafx.beans.value.WritableValue;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class StylesheetListTest {\n+\n+    @Test\n+    public void testEmptyList() {\n+        var list = new StylesheetListShim();\n+        list.addLastElement(null);\n+        list.addLastElement(null);\n+        list.addLastElement(null);\n+\n+        assertEquals(0, list.size());\n+    }\n+\n+    @Test\n+    public void testAddLast() {\n+        var list = new StylesheetListShim();\n+        list.addLastElement(\"foo\");\n+        list.addLastElement(\"bar\");\n+        list.addLastElement(\"baz\");\n+\n+        assertEquals(List.of(\"foo\", \"bar\", \"baz\"), list);\n+    }\n+\n+    @Test\n+    public void testAddFirst() {\n+        var list = new StylesheetListShim();\n+        list.addLastElement(\"foo\");\n+        list.addFirstElement(\"bar\");\n+        list.addFirstElement(\"baz\");\n+\n+        assertEquals(List.of(\"baz\", \"bar\", \"foo\"), list);\n+    }\n+\n+    @Test\n+    public void testToggleItem() {\n+        var list = new StylesheetListShim() {\n+            final WritableValue<String> p1 = addLastElement(null);\n+            final WritableValue<String> p2 = addLastElement(null);\n+            final WritableValue<String> p3 = addLastElement(null);\n+        };\n+\n+        list.p1.setValue(\"foo\");\n+        assertEquals(List.of(\"foo\"), list);\n+\n+        list.p3.setValue(\"bar\");\n+        assertEquals(List.of(\"foo\", \"bar\"), list);\n+\n+        list.p1.setValue(null);\n+        assertEquals(List.of(\"bar\"), list);\n+    }\n+\n+    @Test\n+    public void testChangeItem() {\n+        var list = new StylesheetListShim() {\n+            final WritableValue<String> p1 = addLastElement(null);\n+            final WritableValue<String> p2 = addLastElement(null);\n+            final WritableValue<String> p3 = addLastElement(null);\n+        };\n+\n+        list.p1.setValue(\"foo\");\n+        assertEquals(List.of(\"foo\"), list);\n+\n+        list.p3.setValue(\"bar\");\n+        assertEquals(List.of(\"foo\", \"bar\"), list);\n+\n+        list.p3.setValue(\"baz\");\n+        assertEquals(List.of(\"foo\", \"baz\"), list);\n+    }\n+\n+    @Test\n+    public void testChangeEvent() {\n+        var list = new StylesheetListShim() {\n+            final WritableValue<String> p1 = addLastElement(null);\n+            final WritableValue<String> p2 = addLastElement(null);\n+            final WritableValue<String> p3 = addLastElement(null);\n+        };\n+\n+        var observer = new MockListObserver<String>();\n+        list.addListener(observer);\n+\n+        list.p1.setValue(\"foo\");\n+        observer.check1AddRemove(list, List.of(), 0, 1);\n+        observer.clear();\n+\n+        list.p3.setValue(\"bar\");\n+        observer.check1AddRemove(list, List.of(), 1, 2);\n+        observer.clear();\n+\n+        list.p2.setValue(\"baz\");\n+        observer.check1AddRemove(list, List.of(), 1, 2);\n+        observer.clear();\n+\n+        list.p2.setValue(\"qux\");\n+        observer.check1AddRemove(list, List.of(\"baz\"), 1, 2);\n+        observer.clear();\n+\n+        list.p2.setValue(null);\n+        observer.check1AddRemove(list, List.of(\"qux\"), 1, 1);\n+        observer.clear();\n+\n+        list.p3.setValue(null);\n+        observer.check1AddRemove(list, List.of(\"bar\"), 1, 1);\n+        observer.clear();\n+    }\n+\n+    @Test\n+    public void testBatchChange() {\n+        var list = new StylesheetListShim() {\n+            final WritableValue<String> p1 = addLastElement(null);\n+            final WritableValue<String> p2 = addLastElement(null);\n+            final WritableValue<String> p3 = addLastElement(\"baz\");\n+        };\n+\n+        var observer = new MockListObserver<String>();\n+        list.addListener(observer);\n+\n+        list.lock();\n+        list.p1.setValue(\"foo\");\n+        observer.check0();\n+\n+        list.p2.setValue(\"bar\");\n+        observer.check0();\n+\n+        list.p3.setValue(null);\n+        observer.check0();\n+\n+        list.unlock();\n+        observer.check1();\n+        observer.check1AddRemove(list, List.of(\"baz\"), 0, 2);\n+\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/theme\/StylesheetListTest.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.theme;\n+\n+import com.sun.javafx.application.PlatformImpl;\n+import org.junit.jupiter.api.Test;\n+import javafx.scene.control.theme.ThemeBase;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class ThemeBaseTest {\n+\n+    @Test\n+    public void testOnPreferencesChanged() {\n+        var trace = new ArrayList<Map<String, Object>>();\n+        var theme = new ThemeBase() {\n+            @Override\n+            protected void onPreferencesChanged(Map<String, Object> changed) {\n+                trace.add(Map.copyOf(changed));\n+            }\n+        };\n+\n+        PlatformImpl.updatePreferences(Map.of(\"foo\", \"bar\"));\n+        assertEquals(1, trace.size());\n+        assertEquals(Map.of(\"foo\", \"bar\"), trace.get(0));\n+\n+        PlatformImpl.updatePreferences(Map.of(\"foo\", \"baz\", \"qux\", \"quz\"));\n+        assertEquals(2, trace.size());\n+        assertEquals(Map.of(\"foo\", \"baz\", \"qux\", \"quz\"), trace.get(1));\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/theme\/ThemeBaseTest.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -601,1 +601,1 @@\n-    order of precedence: <cite>a style from a user agent style sheet has lower\n+    order of precedence: <cite>a style from a user agent style sheet or a style theme has lower\n","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/cssref.html","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,2 +87,1 @@\n-        public boolean handleThemeChanged(String themeName) {\n-            return false;\n+        public void handlePreferencesChanged(Map<String, Object> properties) {\n@@ -262,1 +261,1 @@\n-    protected boolean notifyThemeChanged(String themeName) {\n+    protected void notifyPreferencesChanged(Map<String, Object> preferences) {\n@@ -265,1 +264,1 @@\n-            return handler.handleThemeChanged(themeName);\n+            handler.handlePreferencesChanged(preferences);\n@@ -267,1 +266,0 @@\n-        return false;\n@@ -678,13 +676,0 @@\n-    public String getHighContrastScheme(String themeName) {\n-        return themeName;\n-    }\n-\n-    \/**\n-     * Gets the Name of the currently active high contrast theme.\n-     * If null, then high contrast is not enabled.\n-     *\/\n-    public String getHighContrastTheme() {\n-        checkEventThread();\n-        return null;\n-    }\n-\n@@ -771,0 +756,4 @@\n+\n+    public Map<String, Object> getPlatformPreferences() {\n+        return Map.of();\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/Application.java","additions":7,"deletions":18,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.Map;\n@@ -391,0 +392,3 @@\n+\n+    @Override\n+    public native Map<String, Object> getPlatformPreferences();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacApplication.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import com.sun.javafx.application.PlatformImpl;\n@@ -39,0 +38,1 @@\n+import java.util.Map;\n@@ -43,1 +43,0 @@\n-    private static final String BASE_NAME = \"com\/sun\/glass\/ui\/win\/themes\";\n@@ -342,11 +341,0 @@\n-    @Override\n-    public String getHighContrastScheme(String themeName) {\n-        return PlatformImpl.HighContrastScheme.fromThemeName(ResourceBundle.getBundle(BASE_NAME)::getString, themeName);\n-    }\n-\n-    private native String _getHighContrastTheme();\n-    @Override public String getHighContrastTheme() {\n-        checkEventThread();\n-        return getHighContrastScheme(_getHighContrastTheme());\n-    }\n-\n@@ -381,0 +369,3 @@\n+\n+    @Override\n+    public native Map<String, Object> getPlatformPreferences();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinApplication.java","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.application;\n+\n+import java.util.function.Function;\n+\n+\/**\n+ * Enumeration of possible high contrast scheme values.\n+ * <p>\n+ * For each scheme, a theme key is defined. These keys can be\n+ * used, for instance, in a resource bundle that defines the theme name values\n+ * for supported locales.\n+ * <p>\n+ * The high contrast feature may not be available on all platforms.\n+ *\/\n+public enum HighContrastScheme {\n+    HIGH_CONTRAST_BLACK(\"high.contrast.black.theme\"),\n+    HIGH_CONTRAST_WHITE(\"high.contrast.white.theme\"),\n+    HIGH_CONTRAST_1(\"high.contrast.1.theme\"),\n+    HIGH_CONTRAST_2(\"high.contrast.2.theme\");\n+\n+    private final String themeKey;\n+\n+    HighContrastScheme(String themeKey) {\n+        this.themeKey = themeKey;\n+    }\n+\n+    public String getThemeKey() {\n+        return themeKey;\n+    }\n+\n+    \/**\n+     * Given a theme name string, this method finds the possible enum constant\n+     * for which the result of a function, applying its theme key, matches the theme name.\n+     * <p>\n+     * An example of such function can be {@code ResourceBundle::getString},\n+     * as {@link java.util.ResourceBundle#getString(String)} returns a string for\n+     * the given key.\n+     *\n+     * @param keyFunction a {@link Function} that returns a string for a given theme key string.\n+     * @param themeName   a string with the theme name\n+     * @return the name of the enum constant or null if not found\n+     *\/\n+    public static String fromThemeName(Function<String, String> keyFunction, String themeName) {\n+        if (keyFunction == null || themeName == null) {\n+            return null;\n+        }\n+        for (HighContrastScheme item : values()) {\n+            if (themeName.equalsIgnoreCase(keyFunction.apply(item.getThemeKey()))) {\n+                return item.toString();\n+            }\n+        }\n+        return null;\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/HighContrastScheme.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -762,0 +762,1 @@\n+                        PlatformImpl.ensureDefaultTheme();\n@@ -840,0 +841,1 @@\n+                        PlatformImpl.ensureDefaultTheme();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/LauncherImpl.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+\n@@ -43,0 +44,1 @@\n+import java.util.Arrays;\n@@ -47,0 +49,1 @@\n+import java.util.Objects;\n@@ -53,1 +56,0 @@\n-import java.util.function.Function;\n@@ -58,0 +60,1 @@\n+import javafx.application.PlatformPreferences;\n@@ -59,0 +62,1 @@\n+import javafx.beans.property.ObjectProperty;\n@@ -60,1 +64,6 @@\n-import javafx.scene.Scene;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.collections.ListChangeListener;\n+import javafx.collections.ObservableList;\n+import javafx.css.StyleTheme;\n@@ -682,0 +691,25 @@\n+    @SuppressWarnings(\"deprecation\")\n+    private enum BuiltinTheme {\n+        CASPIAN(Application.STYLESHEET_CASPIAN, \"javafx.scene.control.theme.CaspianTheme\"),\n+        MODENA(Application.STYLESHEET_MODENA, \"javafx.scene.control.theme.ModenaTheme\");\n+\n+        BuiltinTheme(String themeName, String className) {\n+            this.themeName = themeName;\n+            this.className = className;\n+        }\n+\n+        private final String themeName;\n+        private final String className;\n+\n+        public static BuiltinTheme fromName(String name) {\n+            if (CASPIAN.themeName.equals(name)) return CASPIAN;\n+            if (MODENA.themeName.equals(name)) return MODENA;\n+            return null;\n+        }\n+\n+        public boolean isCurrent() {\n+            StyleTheme currentTheme = platformTheme.get();\n+            return currentTheme != null && currentTheme.getClass().getName().equals(className);\n+        }\n+    }\n+\n@@ -683,1 +717,1 @@\n-     * Set the platform user agent stylesheet to the default.\n+     * Ensures that the default theme is loaded if no theme is set at this point.\n@@ -685,2 +719,5 @@\n-    public static void setDefaultPlatformUserAgentStylesheet() {\n-        setPlatformUserAgentStylesheet(Application.STYLESHEET_MODENA);\n+    @SuppressWarnings(\"deprecation\")\n+    public static void ensureDefaultTheme() {\n+        if (platformThemeProperty().get() == null) {\n+            platformUserAgentStylesheetProperty().set(Application.STYLESHEET_MODENA);\n+        }\n@@ -689,3 +726,0 @@\n-    private static boolean isModena = false;\n-    private static boolean isCaspian = false;\n-\n@@ -701,1 +735,1 @@\n-        return isModena;\n+        return BuiltinTheme.MODENA.isCurrent();\n@@ -713,13 +747,1 @@\n-        return isCaspian;\n-    }\n-\n-    \/**\n-     * Set the platform user agent stylesheet to the given URL. This method has special handling for platform theme\n-     * name constants.\n-     *\/\n-    public static void setPlatformUserAgentStylesheet(final String stylesheetUrl) {\n-        if (isFxApplicationThread()) {\n-            _setPlatformUserAgentStylesheet(stylesheetUrl);\n-        } else {\n-            runLater(() -> _setPlatformUserAgentStylesheet(stylesheetUrl));\n-        }\n+        return BuiltinTheme.CASPIAN.isCurrent();\n@@ -728,23 +750,3 @@\n-    \/**\n-     * Enumeration of possible high contrast scheme values.\n-     *\n-     * For each scheme, a theme key is defined. These keys can be\n-     * used, for instance, in a resource bundle that defines the theme name values\n-     * for supported locales.\n-     *\n-     * The high contrast feature may not be available on all platforms.\n-     *\/\n-    public enum HighContrastScheme {\n-        HIGH_CONTRAST_BLACK(\"high.contrast.black.theme\"),\n-        HIGH_CONTRAST_WHITE(\"high.contrast.white.theme\"),\n-        HIGH_CONTRAST_1(\"high.contrast.1.theme\"),\n-        HIGH_CONTRAST_2(\"high.contrast.2.theme\");\n-\n-        private final String themeKey;\n-        HighContrastScheme(String themeKey) {\n-            this.themeKey = themeKey;\n-        }\n-\n-        public String getThemeKey() {\n-            return themeKey;\n-        }\n+    private static StyleTheme newThemeInstance(BuiltinTheme theme) {\n+        try {\n+            Class<?> themeClass;\n@@ -752,19 +754,8 @@\n-        \/**\n-         * Given a theme name string, this method finds the possible enum constant\n-         * for which the result of a function, applying its theme key, matches the theme name.\n-         *\n-         * An example of such function can be {@code ResourceBundle::getString},\n-         * as {@link java.util.ResourceBundle#getString(String)} returns a string for\n-         * the given key.\n-         *\n-         * @param keyFunction a {@link Function} that returns a string for a given theme key string.\n-         * @param themeName a string with the theme name\n-         * @return the name of the enum constant or null if not found\n-         *\/\n-        public static String fromThemeName(Function<String, String> keyFunction, String themeName) {\n-            if (keyFunction == null || themeName == null) {\n-                return null;\n-            }\n-            for (HighContrastScheme item : values()) {\n-                if (themeName.equalsIgnoreCase(keyFunction.apply(item.getThemeKey()))) {\n-                    return item.toString();\n+            try {\n+                themeClass = Class.forName(theme.className, false, PlatformImpl.class.getClassLoader());\n+            } catch (ClassNotFoundException ex) {\n+                ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n+                if (contextClassLoader != null) {\n+                    themeClass = Class.forName(theme.className, false, contextClassLoader);\n+                } else {\n+                    throw ex;\n@@ -773,3 +764,0 @@\n-            return null;\n-        }\n-    }\n@@ -777,6 +765,7 @@\n-    private static String accessibilityTheme;\n-    public static boolean setAccessibilityTheme(String platformTheme) {\n-\n-        if (accessibilityTheme != null) {\n-            StyleManager.getInstance().removeUserAgentStylesheet(accessibilityTheme);\n-            accessibilityTheme = null;\n+            return (StyleTheme)themeClass.getConstructor().newInstance();\n+        } catch (ClassNotFoundException ex) {\n+            Logging.getJavaFXLogger().warning(\n+                \"The default style theme \" + theme.className + \" cannot be found, \" +\n+                \"and no custom style theme was specified.\");\n+        } catch (Throwable ex) {\n+            Logging.getJavaFXLogger().severe(\"Cannot instantiate \" + theme.className, ex);\n@@ -785,8 +774,1 @@\n-        _setAccessibilityTheme(platformTheme);\n-\n-        if (accessibilityTheme != null) {\n-            StyleManager.getInstance().addUserAgentStylesheet(accessibilityTheme);\n-            return true;\n-        }\n-        return false;\n-\n+        return null;\n@@ -795,6 +777,2 @@\n-    private static void _setAccessibilityTheme(String platformTheme) {\n-\n-        \/\/ check to see if there is an override to enable a high-contrast theme\n-        @SuppressWarnings(\"removal\")\n-        final String userTheme = AccessController.doPrivileged(\n-                (PrivilegedAction<String>) () -> System.getProperty(\"com.sun.javafx.highContrastTheme\"));\n+    private static final class UserAgentStylesheetProperty extends SimpleStringProperty {\n+        boolean updating;\n@@ -802,36 +780,11 @@\n-        if (isCaspian()) {\n-            if (platformTheme != null || userTheme != null) {\n-                \/\/ caspian has only one high contrast theme, use it regardless of the user or platform theme.\n-                accessibilityTheme = \"com\/sun\/javafx\/scene\/control\/skin\/caspian\/highcontrast.css\";\n-            }\n-        } else if (isModena()) {\n-            \/\/ User-defined property takes precedence\n-            if (userTheme != null) {\n-                switch (userTheme.toUpperCase()) {\n-                    case \"BLACKONWHITE\":\n-                        accessibilityTheme = \"com\/sun\/javafx\/scene\/control\/skin\/modena\/blackOnWhite.css\";\n-                        break;\n-                    case \"WHITEONBLACK\":\n-                        accessibilityTheme = \"com\/sun\/javafx\/scene\/control\/skin\/modena\/whiteOnBlack.css\";\n-                        break;\n-                    case \"YELLOWONBLACK\":\n-                        accessibilityTheme = \"com\/sun\/javafx\/scene\/control\/skin\/modena\/yellowOnBlack.css\";\n-                        break;\n-                    default:\n-                }\n-            } else {\n-                if (platformTheme != null) {\n-                    \/\/ The following names are Platform specific (Windows 7 and 8)\n-                    switch (HighContrastScheme.valueOf(platformTheme)) {\n-                        case HIGH_CONTRAST_WHITE:\n-                            accessibilityTheme = \"com\/sun\/javafx\/scene\/control\/skin\/modena\/blackOnWhite.css\";\n-                            break;\n-                        case HIGH_CONTRAST_BLACK:\n-                            accessibilityTheme = \"com\/sun\/javafx\/scene\/control\/skin\/modena\/whiteOnBlack.css\";\n-                            break;\n-                        case HIGH_CONTRAST_1:\n-                        case HIGH_CONTRAST_2: \/\/TODO #2 should be green on black\n-                            accessibilityTheme = \"com\/sun\/javafx\/scene\/control\/skin\/modena\/yellowOnBlack.css\";\n-                            break;\n-                        default:\n-                    }\n+        @Override\n+        protected void invalidated() {\n+            BuiltinTheme builtinTheme = BuiltinTheme.fromName(get());\n+            if (builtinTheme == null) {\n+                styleThemeChanged(get(), platformTheme.get());\n+            } else if (!builtinTheme.isCurrent()) {\n+                try {\n+                    updating = true;\n+                    platformTheme.set(newThemeInstance(builtinTheme));\n+                } finally {\n+                    updating = false;\n@@ -843,12 +796,1 @@\n-    private static void _setPlatformUserAgentStylesheet(String stylesheetUrl) {\n-        isModena = isCaspian = false;\n-        \/\/ check for command line override\n-        @SuppressWarnings(\"removal\")\n-        final String overrideStylesheetUrl = AccessController.doPrivileged(\n-                (PrivilegedAction<String>) () -> System.getProperty(\"javafx.userAgentStylesheetUrl\"));\n-\n-        if (overrideStylesheetUrl != null) {\n-            stylesheetUrl = overrideStylesheetUrl;\n-        }\n-\n-        final List<String> uaStylesheets = new ArrayList<>();\n+    private static final UserAgentStylesheetProperty platformUserAgentStylesheet = new UserAgentStylesheetProperty();\n@@ -856,18 +798,3 @@\n-        \/\/ check for named theme constants for modena and caspian\n-        if (Application.STYLESHEET_CASPIAN.equalsIgnoreCase(stylesheetUrl)) {\n-            isCaspian = true;\n-\n-            uaStylesheets.add(\"com\/sun\/javafx\/scene\/control\/skin\/caspian\/caspian.css\");\n-\n-            if (isSupported(ConditionalFeature.INPUT_TOUCH)) {\n-                uaStylesheets.add(\"com\/sun\/javafx\/scene\/control\/skin\/caspian\/embedded.css\");\n-                if (com.sun.javafx.util.Utils.isQVGAScreen()) {\n-                    uaStylesheets.add(\"com\/sun\/javafx\/scene\/control\/skin\/caspian\/embedded-qvga.css\");\n-                }\n-                if (PlatformUtil.isAndroid()) {\n-                    uaStylesheets.add(\"com\/sun\/javafx\/scene\/control\/skin\/caspian\/android.css\");\n-                }\n-                if (PlatformUtil.isIOS()) {\n-                    uaStylesheets.add(\"com\/sun\/javafx\/scene\/control\/skin\/caspian\/ios.css\");\n-                }\n-            }\n+    public static StringProperty platformUserAgentStylesheetProperty() {\n+        return platformUserAgentStylesheet;\n+    }\n@@ -875,3 +802,6 @@\n-            if (isSupported(ConditionalFeature.TWO_LEVEL_FOCUS)) {\n-                uaStylesheets.add(\"com\/sun\/javafx\/scene\/control\/skin\/caspian\/two-level-focus.css\");\n-            }\n+    private static final ObjectProperty<StyleTheme> platformTheme = new SimpleObjectProperty<>() {\n+        @Override\n+        protected void invalidated() {\n+            boolean clearBuiltinThemeUAConstant =\n+                !platformUserAgentStylesheet.updating\n+                && BuiltinTheme.fromName(platformUserAgentStylesheet.get()) != null;\n@@ -879,3 +809,6 @@\n-            if (isSupported(ConditionalFeature.VIRTUAL_KEYBOARD)) {\n-                uaStylesheets.add(\"com\/sun\/javafx\/scene\/control\/skin\/caspian\/fxvk.css\");\n-            }\n+            if (clearBuiltinThemeUAConstant) {\n+                platformUserAgentStylesheet.set(null);\n+            } else {\n+                String userAgentStylesheet =\n+                    BuiltinTheme.fromName(platformUserAgentStylesheet.get()) == null ?\n+                    platformUserAgentStylesheet.get() : null;\n@@ -883,2 +816,1 @@\n-            if (!isSupported(ConditionalFeature.TRANSPARENT_WINDOW)) {\n-                uaStylesheets.add(\"com\/sun\/javafx\/scene\/control\/skin\/caspian\/caspian-no-transparency.css\");\n+                styleThemeChanged(userAgentStylesheet, get());\n@@ -886,0 +818,2 @@\n+        }\n+    };\n@@ -887,4 +821,3 @@\n-        } else if (Application.STYLESHEET_MODENA.equalsIgnoreCase(stylesheetUrl)) {\n-            isModena = true;\n-\n-            uaStylesheets.add(\"com\/sun\/javafx\/scene\/control\/skin\/modena\/modena.css\");\n+    public static ObjectProperty<StyleTheme> platformThemeProperty() {\n+        return platformTheme;\n+    }\n@@ -892,12 +825,13 @@\n-            if (isSupported(ConditionalFeature.INPUT_TOUCH)) {\n-                uaStylesheets.add(\"com\/sun\/javafx\/scene\/control\/skin\/modena\/touch.css\");\n-            }\n-            \/\/ when running on embedded add a extra stylesheet to tune performance of modena theme\n-            if (PlatformUtil.isEmbedded()) {\n-                uaStylesheets.add(\"com\/sun\/javafx\/scene\/control\/skin\/modena\/modena-embedded-performance.css\");\n-            }\n-            if (PlatformUtil.isAndroid()) {\n-                uaStylesheets.add(\"com\/sun\/javafx\/scene\/control\/skin\/modena\/android.css\");\n-            }\n-            if (PlatformUtil.isIOS()) {\n-                uaStylesheets.add(\"com\/sun\/javafx\/scene\/control\/skin\/modena\/ios.css\");\n+    private static void styleThemeChanged(String userAgentStylesheet, StyleTheme theme) {\n+        \/\/ If the javafx.userAgentStylesheetUrl system property is specified, we ignore the current theme\n+        \/\/ to maximize compatibility with earlier versions of JavaFX where setting a UA stylesheet replaces\n+        \/\/ the style theme entirely.\n+        String overrideStylesheetUrl = System.getProperty(\"javafx.userAgentStylesheetUrl\");\n+        if (overrideStylesheetUrl != null) {\n+            userAgentStylesheet = overrideStylesheetUrl.trim();\n+            BuiltinTheme builtinTheme = BuiltinTheme.fromName(userAgentStylesheet);\n+            if (builtinTheme != null) {\n+                theme = newThemeInstance(builtinTheme);\n+                userAgentStylesheet = null;\n+            } else {\n+                theme = null;\n@@ -905,0 +839,3 @@\n+        } else if (userAgentStylesheet != null) {\n+            userAgentStylesheet = userAgentStylesheet.trim();\n+        }\n@@ -906,3 +843,2 @@\n-            if (isSupported(ConditionalFeature.TWO_LEVEL_FOCUS)) {\n-                uaStylesheets.add(\"com\/sun\/javafx\/scene\/control\/skin\/modena\/two-level-focus.css\");\n-            }\n+        updateStyleManager(userAgentStylesheet, theme != null ? theme.getStylesheets() : null);\n+    }\n@@ -910,3 +846,1 @@\n-            if (isSupported(ConditionalFeature.VIRTUAL_KEYBOARD)) {\n-                uaStylesheets.add(\"com\/sun\/javafx\/scene\/control\/skin\/caspian\/fxvk.css\");\n-            }\n+    private static List<String> themeStylesheets;\n@@ -914,3 +848,2 @@\n-            if (!isSupported(ConditionalFeature.TRANSPARENT_WINDOW)) {\n-                uaStylesheets.add(\"com\/sun\/javafx\/scene\/control\/skin\/modena\/modena-no-transparency.css\");\n-            }\n+    private static final ListChangeListener<String> themeStylesheetsChanged =\n+        change -> updateStyleManager(platformUserAgentStylesheet.get(), themeStylesheets);\n@@ -918,2 +851,14 @@\n-        } else {\n-            uaStylesheets.add(stylesheetUrl);\n+    \/**\n+     * Updates the {@link StyleManager} with a new list of stylesheets that consist of the\n+     * concatenation of the user-agent stylesheet and the list of stylesheets contained in\n+     * the current {@link StyleTheme}.\n+     * <p>\n+     * If {@code stylesheets} is an {@code ObservableList}, this method also registers a\n+     * {@code ListChangeListener} to update the {@code StyleManager} when the list is changed.\n+     *\n+     * @param userAgentStylesheet the user-agent stylesheet, or {@code null}\n+     * @param stylesheets the stylesheets of the {@code StyleTheme}, or {@code null}\n+     *\/\n+    private static void updateStyleManager(String userAgentStylesheet, List<String> stylesheets) {\n+        if (themeStylesheets instanceof ObservableList<String> list) {\n+            list.removeListener(themeStylesheetsChanged);\n@@ -922,5 +867,1 @@\n-        \/\/ Ensure that accessibility starts right\n-        _setAccessibilityTheme(Toolkit.getToolkit().getThemeName());\n-        if (accessibilityTheme != null) {\n-            uaStylesheets.add(accessibilityTheme);\n-        }\n+        themeStylesheets = stylesheets;\n@@ -928,7 +869,3 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction) () -> {\n-            StyleManager.getInstance().setUserAgentStylesheets(uaStylesheets);\n-            return null;\n-        });\n-\n-    }\n+        if (themeStylesheets instanceof ObservableList<String> list) {\n+            list.addListener(themeStylesheetsChanged);\n+        }\n@@ -936,14 +873,13 @@\n-    @SuppressWarnings(\"removal\")\n-    public static void addNoTransparencyStylesheetToScene(final Scene scene) {\n-        if (PlatformImpl.isCaspian()) {\n-            AccessController.doPrivileged((PrivilegedAction) () -> {\n-                StyleManager.getInstance().addUserAgentStylesheet(scene,\n-                        \"com\/sun\/javafx\/scene\/control\/skin\/caspian\/caspian-no-transparency.css\");\n-                return null;\n-            });\n-        } else if (PlatformImpl.isModena()) {\n-            AccessController.doPrivileged((PrivilegedAction) () -> {\n-                StyleManager.getInstance().addUserAgentStylesheet(scene,\n-                        \"com\/sun\/javafx\/scene\/control\/skin\/modena\/modena-no-transparency.css\");\n-                return null;\n-            });\n+        boolean hasUserAgentStylesheet = userAgentStylesheet != null && !userAgentStylesheet.isEmpty();\n+\n+        if (hasUserAgentStylesheet && themeStylesheets != null) {\n+            List<String> list = new ArrayList<>(themeStylesheets.size() + 1);\n+            list.add(userAgentStylesheet);\n+            list.addAll(themeStylesheets);\n+            StyleManager.getInstance().setUserAgentStylesheets(list);\n+        } else if (themeStylesheets != null) {\n+            StyleManager.getInstance().setUserAgentStylesheets(themeStylesheets);\n+        } else if (hasUserAgentStylesheet) {\n+            StyleManager.getInstance().setUserAgentStylesheets(List.of(userAgentStylesheet));\n+        } else {\n+            StyleManager.getInstance().setUserAgentStylesheets(List.of());\n@@ -1047,0 +983,46 @@\n+\n+    private static final PlatformPreferencesImpl platformPreferences = new PlatformPreferencesImpl();\n+\n+    public static PlatformPreferences getPlatformPreferences() {\n+        return platformPreferences;\n+    }\n+\n+    \/**\n+     * Called by Glass when one or several platform preferences have changed.\n+     * <p>\n+     * This method can be called on any thread. The supplied {@code preferences} map may\n+     * include all platform preferences, or only the changed preferences.\n+     *\n+     * @param preferences a map that includes the changed preferences\n+     *\/\n+    public static void updatePreferences(Map<String, Object> preferences) {\n+        if (isFxApplicationThread()) {\n+            Map<String, Object> changed = new HashMap<>();\n+            for (Map.Entry<String, Object> entry : preferences.entrySet()) {\n+                Object existingValue = platformPreferences.getModifiableMap().get(entry.getKey());\n+                Object newValue = entry.getValue();\n+                boolean equals = false;\n+\n+                if (existingValue instanceof Object[] && newValue instanceof Object[]) {\n+                    equals = Arrays.equals((Object[]) existingValue, (Object[]) newValue);\n+                } else if (!(existingValue instanceof Object[]) && !(newValue instanceof Object[])) {\n+                    equals = Objects.equals(existingValue, entry.getValue());\n+                }\n+\n+                if (!equals) {\n+                    changed.put(entry.getKey(), entry.getValue());\n+                }\n+            }\n+\n+            if (!changed.isEmpty()) {\n+                platformPreferences.getModifiableMap().putAll(changed);\n+                platformPreferences.firePreferencesChanged(changed);\n+            }\n+        } else {\n+            \/\/ Make a defensive copy in case the caller of this method decides to re-use or\n+            \/\/ modify its preferences map after the method returns.\n+            Map<String, Object> preferencesCopy = new HashMap<>(preferences);\n+            runLater(() -> updatePreferences(preferencesCopy));\n+        }\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformImpl.java","additions":197,"deletions":215,"binary":false,"changes":412,"status":"modified"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.application;\n+\n+import javafx.application.PlatformPreferences;\n+import javafx.application.PlatformPreferencesListener;\n+import javafx.scene.paint.Color;\n+import java.util.AbstractMap;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+public final class PlatformPreferencesImpl extends AbstractMap<String, Object> implements PlatformPreferences {\n+\n+    private final Map<String, Object> modifiableMap = new HashMap<>();\n+    private final Set<Entry<String, Object>> unmodifiableEntrySet = Collections.unmodifiableSet(modifiableMap.entrySet());\n+    private final List<PlatformPreferencesListener> listeners = new CopyOnWriteArrayList<>();\n+\n+    public Map<String, Object> getModifiableMap() {\n+        return modifiableMap;\n+    }\n+\n+    @Override\n+    public Set<Entry<String, Object>> entrySet() {\n+        return unmodifiableEntrySet;\n+    }\n+\n+    @Override\n+    public String getString(String key) {\n+        Object value = modifiableMap.get(key);\n+        if (value instanceof String s) {\n+            return s;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Boolean getBoolean(String key) {\n+        Object value = modifiableMap.get(key);\n+        if (value instanceof Boolean b) {\n+            return b;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Color getColor(String key) {\n+        Object value = modifiableMap.get(key);\n+        if (value instanceof Color c) {\n+            return c;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public void addListener(PlatformPreferencesListener listener) {\n+        listeners.add(listener);\n+    }\n+\n+    @Override\n+    public void removeListener(PlatformPreferencesListener listener) {\n+        listeners.remove(listener);\n+    }\n+\n+    void firePreferencesChanged(Map<String, Object> changed) {\n+        for (PlatformPreferencesListener listener : listeners) {\n+            listener.onPreferencesChanged(this, changed);\n+        }\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformPreferencesImpl.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -90,0 +90,1 @@\n+import java.util.Objects;\n@@ -94,0 +95,1 @@\n+import java.util.stream.Collectors;\n@@ -1253,2 +1255,1 @@\n-     * is the order of their styles in the cascade. Passing null, an empty list, or a list full of empty\n-     * strings does nothing.\n+     * is the order of their styles in the cascade.\n@@ -1259,2 +1260,9 @@\n-\n-        if (urls == null || urls.size() == 0) return;\n+        if (urls == null) {\n+            urls = List.of();\n+        } else {\n+            urls = urls.stream()\n+                       .filter(Objects::nonNull)\n+                       .map(String::trim)\n+                       .filter(s -> !s.isEmpty())\n+                       .collect(Collectors.toList());\n+        }\n@@ -1267,6 +1275,1 @@\n-\n-                    final String url = urls.get(n);\n-                    final String fname = (url != null) ? url.trim() : null;\n-\n-                    if (fname == null || fname.isEmpty()) break;\n-\n+                    final String fname = urls.get(n);\n@@ -1289,1 +1292,1 @@\n-            boolean modified = false;\n+            platformUserAgentStylesheetContainers.clear();\n@@ -1292,12 +1295,1 @@\n-\n-                final String url = urls.get(n);\n-                final String fname = (url != null) ? url.trim() : null;\n-\n-                if (fname == null || fname.isEmpty()) continue;\n-\n-                if (!modified) {\n-                    \/\/ we have at least one non null or non-empty url\n-                    platformUserAgentStylesheetContainers.clear();\n-                    modified = true;\n-                }\n-\n+                final String fname = urls.get(n);\n@@ -1311,3 +1303,1 @@\n-            if (modified) {\n-                userAgentStylesheetsChanged();\n-            }\n+            userAgentStylesheetsChanged();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/StyleManager.java","additions":16,"deletions":26,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -362,0 +362,2 @@\n+            PlatformImpl.updatePreferences(Application.GetApplication().getPlatformPreferences());\n+\n@@ -367,3 +369,3 @@\n-                @Override public boolean handleThemeChanged(String themeName) {\n-                    String highContrastSchemeName = Application.GetApplication().getHighContrastScheme(themeName);\n-                    return PlatformImpl.setAccessibilityTheme(highContrastSchemeName);\n+                @Override\n+                public void handlePreferencesChanged(Map<String, Object> preferences) {\n+                    PlatformImpl.updatePreferences(preferences);\n@@ -1808,5 +1810,0 @@\n-    @Override\n-    public String getThemeName() {\n-        return Application.GetApplication().getHighContrastTheme();\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/QuantumToolkit.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,5 @@\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.css.StyleTheme;\n@@ -179,2 +184,4 @@\n-     * Constant for user agent stylesheet for the \"Caspian\" theme. Caspian\n-     * is the theme that shipped as default in JavaFX 2.x.\n+     * Constant for user agent stylesheet for the \"Caspian\" theme,\n+     * corresponding to {@link javafx.scene.control.theme.CaspianTheme}.\n+     * Caspian is the theme that shipped as default in JavaFX 2.x.\n+     *\n@@ -182,0 +189,3 @@\n+     * @deprecated this constant is provided for backwards compatibility only,\n+     *             call {@link #setStyleTheme(StyleTheme)} with an instance of\n+     *             {@link javafx.scene.control.theme.CaspianTheme} instead\n@@ -183,0 +193,1 @@\n+    @Deprecated\n@@ -184,0 +195,1 @@\n+\n@@ -185,2 +197,4 @@\n-     * Constant for user agent stylesheet for the \"Modena\" theme. Modena\n-     * is the default theme for JavaFX 8.x.\n+     * Constant for user agent stylesheet for the \"Modena\" theme,\n+     * corresponding to {@link javafx.scene.control.theme.ModenaTheme}.\n+     * Modena is the default theme for JavaFX 8.x.\n+     *\n@@ -188,0 +202,3 @@\n+     * @deprecated this constant is provided for backwards compatibility only,\n+     *             call {@link #setStyleTheme(StyleTheme)} with an instance of\n+     *             {@link javafx.scene.control.theme.ModenaTheme} instead\n@@ -189,0 +206,1 @@\n+    @Deprecated\n@@ -488,2 +506,0 @@\n-    private static String userAgentStylesheet = null;\n-\n@@ -491,3 +507,1 @@\n-     * Get the user agent stylesheet used by the whole application. This is\n-     * used to provide default styling for all ui controls and other nodes.\n-     * A value of null means the platform default stylesheet is being used.\n+     * Specifies the user-agent stylesheet of the application.\n@@ -495,20 +509,7 @@\n-     * NOTE: This method must be called on the JavaFX Application Thread.\n-     * <\/p>\n-     *\n-     * @return The URL to the stylesheet as a String.\n-     * @since JavaFX 8.0\n-     *\/\n-    public static String getUserAgentStylesheet() {\n-        return userAgentStylesheet;\n-    }\n-\n-    \/**\n-     * Set the user agent stylesheet used by the whole application. This is used\n-     * to provide default styling for all ui controls and other nodes. Each\n-     * release of JavaFX may have a new default value for this so if you need\n-     * to guarantee consistency you will need to call this method and choose\n-     * what default you would like for your application. A value of null will\n-     * restore the platform default stylesheet. This property can also be set\n-     * on the command line with {@code -Djavafx.userAgentStylesheetUrl=[URL]}\n-     * Setting it on the command line overrides anything set using this method\n-     * in code.\n+     * A user-agent stylesheet is a global stylesheet that can be specified in addition to a\n+     * {@link StyleTheme} and that is implicitly used by all JavaFX nodes in the scene graph.\n+     * It can be used to provide default styling for UI controls and other nodes.\n+     * A user-agent stylesheets has the lowest precedence in the CSS cascade.\n+     * <p>\n+     * This property can also be set on the command line with {@code -Djavafx.userAgentStylesheetUrl=[URL]}.\n+     * Setting it on the command line overrides the value of this property.\n@@ -528,1 +529,7 @@\n-     * NOTE: This method must be called on the JavaFX Application Thread.\n+     * Before JavaFX 20, built-in themes were selectable using the special user-agent stylesheet constants\n+     * {@link #STYLESHEET_CASPIAN} and {@link #STYLESHEET_MODENA}. For backwards compatibility, the meaning\n+     * of these special constants is retained: setting the user-agent stylesheet to either {@code STYLESHEET_CASPIAN}\n+     * or {@code STYLESHEET_MODENA} will also set the value of the {@link #styleThemeProperty() styleTheme}\n+     * property to a new instance of the corresponding theme class.\n+     * <p>\n+     * Note: this property must only be modified on the JavaFX application thread.\n@@ -530,2 +537,1 @@\n-     * @param url The URL to the stylesheet as a String.\n-     * @since JavaFX 8.0\n+     * @since 20\n@@ -533,0 +539,14 @@\n+    private static StringProperty userAgentStylesheet;\n+\n+    public static StringProperty userAgentStylesheetProperty() {\n+        if (userAgentStylesheet == null) {\n+            userAgentStylesheet = new SimpleStringProperty(Application.class, \"userAgentStylesheet\");\n+            userAgentStylesheet.bindBidirectional(PlatformImpl.platformUserAgentStylesheetProperty());\n+        }\n+        return userAgentStylesheet;\n+    }\n+\n+    public static String getUserAgentStylesheet() {\n+        return userAgentStylesheetProperty().get();\n+    }\n+\n@@ -534,5 +554,23 @@\n-        userAgentStylesheet = url;\n-        if (url == null) {\n-            PlatformImpl.setDefaultPlatformUserAgentStylesheet();\n-        } else {\n-            PlatformImpl.setPlatformUserAgentStylesheet(url);\n+        userAgentStylesheetProperty().set(url);\n+    }\n+\n+    \/**\n+     * Specifies the {@link StyleTheme} of the application.\n+     * <p>\n+     * {@code StyleTheme} is a collection of stylesheets that define the appearance of the application.\n+     * Like a user-agent stylesheet, a {@code StyleTheme} is implicitly used by all JavaFX nodes in the\n+     * scene graph.\n+     * <p>\n+     * Stylesheets that comprise a {@code StyleTheme} have a higher precedence in the CSS cascade than a\n+     * stylesheet referenced by the {@link #userAgentStylesheetProperty() userAgentStylesheet} property.\n+     * <p>\n+     * Note: this property must only be modified on the JavaFX application thread.\n+     *\n+     * @since 20\n+     *\/\n+    private static ObjectProperty<StyleTheme> styleTheme;\n+\n+    public static ObjectProperty<StyleTheme> styleThemeProperty() {\n+        if (styleTheme == null) {\n+            styleTheme = new SimpleObjectProperty<>(Application.class, \"styleTheme\");\n+            styleTheme.bindBidirectional(PlatformImpl.platformThemeProperty());\n@@ -540,0 +578,1 @@\n+        return styleTheme;\n@@ -541,0 +580,9 @@\n+\n+    public static StyleTheme getStyleTheme() {\n+        return styleThemeProperty().get();\n+    }\n+\n+    public static void setStyleTheme(StyleTheme theme) {\n+        styleThemeProperty().set(theme);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/Application.java","additions":86,"deletions":38,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -419,0 +419,11 @@\n+\n+    \/**\n+     * Gets all {@link PlatformPreferences} of the current platform.\n+     *\n+     * @return a {@code PlatformPreferences} instance\n+     * @since 20\n+     *\/\n+    public static PlatformPreferences getPreferences() {\n+        return PlatformImpl.getPlatformPreferences();\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/Platform.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,239 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.application;\n+\n+import javafx.scene.paint.Color;\n+import java.util.Map;\n+\n+\/**\n+ * Contains UI preferences of the current platform.\n+ * <p>\n+ * {@code PlatformPreferences} implements {@link Map} to expose platform preferences as key-value pairs.\n+ * For convenience, {@link #getString}, {@link #getBoolean} and {@link #getColor} are provided as typed\n+ * alternatives to the untyped {@link #get} method.\n+ * <p>\n+ * The preferences that are reported by the platform may be dependent on the operating system version.\n+ * Applications should always test whether a preference is available, or use the {@link #getString(String, String)},\n+ * {@link #getBoolean(String, boolean)} or {@link #getColor(String, Color)} overloads that accept a fallback\n+ * value if the preference is not available.\n+ * <p>\n+ * The following list contains all preferences that are potentially available on the specified platforms:\n+ *\n+ * <table>\n+ *     <caption><\/caption>\n+ *     <tbody>\n+ *         <tr><th colspan=\"2\" scope=\"colgroup\">Windows<\/th><\/tr>\n+ *         <tr><td>{@code Windows.SPI.HighContrast}<\/td><td>{@link Boolean}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SPI.HighContrastColorScheme}<\/td><td>{@link String}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_3DDKSHADOW}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_3DFACE}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_3DHIGHLIGHT}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_3DHILIGHT}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_3DLIGHT}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_3DSHADOW}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_ACTIVEBORDER}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_ACTIVECAPTION}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_APPWORKSPACE}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_BACKGROUND}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_BTNFACE}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_BTNHIGHLIGHT}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_BTNHILIGHT}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_BTNSHADOW}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_BTNTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_CAPTIONTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_DESKTOP}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_GRADIENTACTIVECAPTION}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_GRADIENTINACTIVECAPTION}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_GRAYTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_HIGHLIGHT}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_HIGHLIGHTTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_HOTLIGHT}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_INACTIVEBORDER}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_INACTIVECAPTION}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_INACTIVECAPTIONTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_INFOBK}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_INFOTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_MENU}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_MENUHILIGHT}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_MENUBAR}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_MENUTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_SCROLLBAR}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_WINDOW}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_WINDOWFRAME}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.SysColor.COLOR_WINDOWTEXT}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.UIColor.Background}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.UIColor.Foreground}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.UIColor.AccentDark3}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.UIColor.AccentDark2}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.UIColor.AccentDark1}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.UIColor.Accent}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.UIColor.AccentLight1}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.UIColor.AccentLight2}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code Windows.UIColor.AccentLight3}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><\/tr>\n+ *\n+ *         <tr><th colspan=\"2\" scope=\"colgroup\">macOS<\/th><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.labelColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.secondaryLabelColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.tertiaryLabelColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.quaternaryLabelColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.textColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.placeholderTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.selectedTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.textBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.selectedTextBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.keyboardFocusIndicatorColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.unemphasizedSelectedTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.unemphasizedSelectedTextBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.linkColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.separatorColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.selectedContentBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.unemphasizedSelectedContentBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.selectedMenuItemTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.gridColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.headerTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.alternatingContentBackgroundColors}<\/td><td>{@link Color}{@code []}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.controlAccentColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.controlColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.controlBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.controlTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.disabledControlTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.selectedControlColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.selectedControlTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.alternateSelectedControlTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.currentControlTint}<\/td><td>{@link String}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.windowBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.windowFrameTextColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.underPageBackgroundColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.findHighlightColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.highlightColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.shadowColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemBlueColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemBrownColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemGrayColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemGreenColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemIndigoColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemOrangeColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemPinkColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemPurpleColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemRedColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemTealColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><td>{@code macOS.NSColor.systemYellowColor}<\/td><td>{@link Color}<\/td><\/tr>\n+ *         <tr><\/tr>\n+ *\n+ *         <tr><th colspan=\"2\" scope=\"colgroup\">Linux<\/th><\/tr>\n+ *         <tr><td>Platform preferences are currently not reported on Linux.<\/td><\/tr>\n+ *     <\/tbody>\n+ * <\/table>\n+ *\n+ * @since 20\n+ *\/\n+public interface PlatformPreferences extends Map<String, Object> {\n+\n+    \/**\n+     * Returns the {@link String} instance to which the specified key is mapped.\n+     *\n+     * @param key the key\n+     * @return the {@code String} instance to which the {@code key} is mapped, or\n+     *         {@code null} if the key is not mapped to a {@code String} instance\n+     *\/\n+    String getString(String key);\n+\n+    \/**\n+     * Returns the {@link String} instance to which the specified key is mapped,\n+     * or a fallback value if the key is not mapped to a {@code String} instance.\n+     *\n+     * @param key the key\n+     * @return the {@code String} instance to which the {@code key} is mapped, or\n+     *         {@code fallbackValue} if the key is not mapped to a {@code String}\n+     *         instance\n+     *\/\n+    default String getString(String key, String fallbackValue) {\n+        String value = getString(key);\n+        return value != null ? value : fallbackValue;\n+    }\n+\n+    \/**\n+     * Returns the {@link Boolean} instance to which the specified key is mapped.\n+     *\n+     * @param key the key\n+     * @return the {@code Boolean} instance to which the {@code key} is mapped, or\n+     *         {@code null} if the key is not mapped to a {@code Boolean} instance\n+     *\/\n+    Boolean getBoolean(String key);\n+\n+    \/**\n+     * Returns the {@code boolean} value to which the specified key is mapped,\n+     * or a fallback value if the key is not mapped to a {@code boolean} value.\n+     *\n+     * @param key the key\n+     * @return the {@code boolean} value to which the {@code key} is mapped, or\n+     *         {@code fallbackValue} if the key is not mapped to a {@code boolean}\n+     *         value\n+     *\/\n+    default boolean getBoolean(String key, boolean fallbackValue) {\n+        Boolean value = getBoolean(key);\n+        return value != null ? value : fallbackValue;\n+    }\n+\n+    \/**\n+     * Returns the {@link Color} instance to which the specified key is mapped.\n+     *\n+     * @param key the key\n+     * @return the {@code Color} instance to which the {@code key} is mapped, or\n+     *         {@code null} if the key is not mapped to a {@code Color} instance\n+     *\/\n+    Color getColor(String key);\n+\n+    \/**\n+     * Returns the {@link Color} instance to which the specified key is mapped,\n+     * or a fallback value if the key is not mapped to a {@code Color} instance.\n+     *\n+     * @param key the key\n+     * @return the {@code Color} instance to which the {@code key} is mapped, or\n+     *         {@code fallbackValue} if the key is not mapped to a {@code Color}\n+     *         instance\n+     *\/\n+    default Color getColor(String key, Color fallbackValue) {\n+        Color value = getColor(key);\n+        return value != null ? value : fallbackValue;\n+    }\n+\n+    \/**\n+     * Adds the specified listener to this {@code PlatformPreferences} instance.\n+     *\n+     * @param listener the {@code PlatformPreferencesListener}\n+     *\/\n+    void addListener(PlatformPreferencesListener listener);\n+\n+    \/**\n+     * Removes the specified listener from this {@code PlatformPreferences} instance.\n+     *\n+     * @param listener the {@code PlatformPreferencesListener}\n+     *\/\n+    void removeListener(PlatformPreferencesListener listener);\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/PlatformPreferences.java","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.application;\n+\n+import java.util.Map;\n+\n+\/**\n+ * A {@code PlatformPreferencesListener} is notified when a platform preference has changed.\n+ * It can be registered and unregistered with {@link PlatformPreferences#addListener}\n+ * and {@link PlatformPreferences#removeListener}.\n+ *\n+ * @since 20\n+ *\/\n+public interface PlatformPreferencesListener {\n+\n+    \/**\n+     * Occurs when one or several platform preferences have changed.\n+     * <p>\n+     * The {@code changed} map contains only the changed preferences.\n+     *\n+     * @param preferences the {@code PlatformPreferences} instance\n+     * @param changed a map of all preferences that have changed\n+     * @see Platform#getPreferences()\n+     *\/\n+    void onPreferencesChanged(PlatformPreferences preferences, Map<String, Object> changed);\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/PlatformPreferencesListener.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.application;\n+\n+import javafx.beans.NamedArg;\n+import javafx.beans.WeakListener;\n+import java.lang.ref.WeakReference;\n+import java.util.Map;\n+\n+\/**\n+ * A {@code WeakPlatformPreferencesListener} can be used if {@link PlatformPreferences}\n+ * should only maintain a weak reference to the listener. This helps to avoid\n+ * memory leaks that can occur if listeners are not unregistered from observed\n+ * objects after use.\n+ * <p>\n+ * A {@code WeakPlatformPreferencesListener} is created by passing in the original\n+ * {@link PlatformPreferencesListener}. The {@code WeakPlatformPreferencesListener} should\n+ * then be registered to listen for changes of the observed object.\n+ * <p>\n+ * Note: You have to keep a reference to the {@code PlatformPreferencesListener} that\n+ * was passed in as long as it is in use, otherwise it can be garbage collected\n+ * too soon.\n+ *\n+ * @see PlatformPreferences\n+ * @see PlatformPreferencesListener\n+ *\n+ * @since 20\n+ *\/\n+public final class WeakPlatformPreferencesListener implements PlatformPreferencesListener, WeakListener {\n+\n+    private final WeakReference<PlatformPreferencesListener> ref;\n+\n+    \/**\n+     * The constructor of {@code WeakPlatformPreferencesListener}.\n+     *\n+     * @param listener The original listener that should be notified\n+     *\/\n+    public WeakPlatformPreferencesListener(@NamedArg(\"listener\") PlatformPreferencesListener listener) {\n+        if (listener == null) {\n+            throw new NullPointerException(\"Listener must be specified.\");\n+        }\n+        this.ref = new WeakReference<>(listener);\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public boolean wasGarbageCollected() {\n+        return ref.get() == null;\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public void onPreferencesChanged(PlatformPreferences preferences, Map<String, Object> changed) {\n+        PlatformPreferencesListener listener = ref.get();\n+        if (listener != null) {\n+            listener.onPreferencesChanged(preferences, changed);\n+        } else {\n+            \/\/ The weakly reference listener has been garbage collected,\n+            \/\/ so this WeakListener will now unhook itself\n+            preferences.removeListener(this);\n+        }\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/WeakPlatformPreferencesListener.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.css;\n+\n+import javafx.application.Application;\n+import javafx.collections.ObservableList;\n+import java.io.File;\n+import java.util.List;\n+\n+\/**\n+ * {@code StyleTheme} is a collection of stylesheets that specify the appearance of UI controls and other\n+ * nodes in the application. Like a user-agent stylesheet, a {@code StyleTheme} is implicitly used by all\n+ * JavaFX nodes in the scene graph.\n+ * <p>\n+ * The list of stylesheets that comprise a {@code StyleTheme} can be modified while the application is running,\n+ * enabling applications to create dynamic themes that respond to changing user preferences.\n+ * <p>\n+ * A {@code StyleTheme} can be applied using the {@link Application#setStyleTheme(StyleTheme)} method:\n+ * <pre>{@code\n+ *     public class App extends Application {\n+ *         @Override\n+ *         public void start(Stage primaryStage) {\n+ *             setStyleTheme(new MyCustomTheme());\n+ *\n+ *             primaryStage.setScene(...);\n+ *             primaryStage.show();\n+ *         }\n+ *     }\n+ * }<\/pre>\n+ * <p>\n+ * In the CSS subsystem, stylesheets that comprise a {@code StyleTheme} are classified as\n+ * {@link StyleOrigin#USER_AGENT} stylesheets, but have a higher precedence in the CSS cascade\n+ * than a stylesheet referenced by {@link Application#userAgentStylesheetProperty()}.\n+ *\n+ * @since 20\n+ *\/\n+public interface StyleTheme {\n+\n+    \/**\n+     * Gets the list of stylesheet URLs that comprise this {@code StyleTheme}.\n+     * <p>\n+     * The URL is a hierarchical URI of the form [scheme:][\/\/authority][path]. If the URL\n+     * does not have a [scheme:] component, the URL is considered to be the [path] component only.\n+     * Any leading '\/' character of the [path] is ignored and the [path] is treated as a path relative to\n+     * the root of the application's classpath.\n+     * <p>\n+     * The RFC 2397 \"data\" scheme for URLs is supported in addition to the protocol handlers that\n+     * are registered for the application.\n+     * If a URL uses the \"data\" scheme and the MIME type is either empty, \"text\/plain\", or \"text\/css\",\n+     * the payload will be interpreted as a CSS file.\n+     * If the MIME type is \"application\/octet-stream\", the payload will be interpreted as a binary\n+     * CSS file (see {@link Stylesheet#convertToBinary(File, File)}).\n+     * <p>\n+     * If the list of stylesheets that comprise this {@code StyleTheme} is changed at runtime, this\n+     * method must return an {@link ObservableList} to allow the CSS subsystem to subscribe to list\n+     * change notifications.\n+     *\n+     * @implNote Implementations of this method that return an {@link ObservableList} are encouraged\n+     *           to minimize the number of subsequent list change notifications that are fired by the\n+     *           list, as each change notification causes the CSS subsystem to re-apply the referenced\n+     *           stylesheets.\n+     *\n+     * @return the list of stylesheet URLs\n+     *\/\n+    List<String> getStylesheets();\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleTheme.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -822,5 +822,0 @@\n-        final boolean isTransparentWindowsSupported = Platform.isSupported(ConditionalFeature.TRANSPARENT_WINDOW);\n-        if (!isTransparentWindowsSupported) {\n-            PlatformImpl.addNoTransparencyStylesheetToScene(this);\n-        }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Scene.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+#import \"ThemeSupport.h\"\n@@ -119,1 +120,3 @@\n-@implementation GlassApplication\n+@implementation GlassApplication {\n+    jobject currentPreferences;\n+}\n@@ -145,0 +148,101 @@\n+\/**\n+ * Collect all platform preferences and return them as a java\/util\/Map.\n+ *\/\n++ (jobject)queryPlatformPreferences\n+{\n+    GET_MAIN_JENV;\n+    jclass mapClass = (jclass)(*env)->FindClass(env, \"java\/util\/HashMap\");\n+    GLASS_CHECK_EXCEPTION(env);\n+    if (mapClass == nil) {\n+        return nil;\n+    }\n+\n+    jmethodID constructor = (*env)->GetMethodID(env, mapClass, \"<init>\", \"()V\");\n+    GLASS_CHECK_EXCEPTION(env);\n+    if (constructor == nil) {\n+        return nil;\n+    }\n+\n+    jobject properties = (*env)->NewObject(env, mapClass, constructor);\n+    GLASS_CHECK_EXCEPTION(env);\n+    if (properties == nil) {\n+        return nil;\n+    }\n+\n+    \/\/ The current appearance is independent from the system appearance, and is set when the application\n+    \/\/ is started. Since the system appearance can change while the application is running, we need to set\n+    \/\/ the current appearance to the application's effective appearance before querying system colors.\n+    NSAppearance* lastAppearance = [NSAppearance currentAppearance];\n+    [NSAppearance setCurrentAppearance:[[NSApplication sharedApplication] effectiveAppearance]];\n+\n+    ThemeSupport* themeSupport = [[ThemeSupport alloc] initWithEnv:env];\n+    [themeSupport queryProperties:properties];\n+    [themeSupport release];\n+\n+    [NSAppearance setCurrentAppearance:lastAppearance];\n+\n+    (*env)->DeleteLocalRef(env, mapClass);\n+    return properties;\n+}\n+\n+- (void)platformPreferencesChanged {\n+    [self performSelectorOnMainThread:@selector(platformPreferencesChangedOnMainThread)\n+          withObject:nil\n+          waitUntilDone:false];\n+}\n+\n+- (void)platformPreferencesChangedOnMainThread {\n+    GET_MAIN_JENV;\n+\n+    jobject newPreferences = [GlassApplication queryPlatformPreferences];\n+    if (newPreferences == nil) {\n+        return;\n+    }\n+\n+    jclass objectClass, collectionsClass;\n+    jmethodID equalsMethod, unmodifiableMapMethod;\n+\n+    bool initialized =\n+        ((objectClass = (jclass)(*env)->FindClass(env, \"java\/lang\/Object\")) != nil) &&\n+        ((collectionsClass = (jclass)(*env)->FindClass(env, \"java\/util\/Collections\")) != nil) &&\n+        ((equalsMethod = (*env)->GetMethodID(env, objectClass, \"equals\", \"(Ljava\/lang\/Object;)Z\")) != 0) &&\n+        ((unmodifiableMapMethod = (*env)->GetStaticMethodID(env, collectionsClass, \"unmodifiableMap\",\n+                                                            \"(Ljava\/util\/Map;)Ljava\/util\/Map;\")) != 0);\n+\n+    if (!initialized) {\n+        GLASS_CHECK_EXCEPTION(env);\n+    } else {\n+        jboolean isEqual = (*env)->CallBooleanMethod(env, newPreferences, equalsMethod, currentPreferences);\n+        GLASS_CHECK_EXCEPTION(env);\n+\n+        if (!isEqual) {\n+            if (currentPreferences != nil) {\n+                (*env)->DeleteGlobalRef(env, currentPreferences);\n+            }\n+\n+            currentPreferences = (*env)->NewGlobalRef(env, newPreferences);\n+            jobject unmodifiablePreferences = (*env)->CallStaticObjectMethod(\n+                env, collectionsClass, unmodifiableMapMethod, newPreferences);\n+            GLASS_CHECK_EXCEPTION(env);\n+            if (unmodifiablePreferences != nil) {\n+                (*env)->CallVoidMethod(\n+                    env, self->jApplication,\n+                    javaIDs.MacApplication.notifyPreferencesChanged,\n+                    unmodifiablePreferences);\n+            }\n+\n+            (*env)->DeleteLocalRef(env, unmodifiablePreferences);\n+        }\n+    }\n+\n+    (*env)->DeleteLocalRef(env, newPreferences);\n+\n+    if (objectClass != nil) {\n+        (*env)->DeleteLocalRef(env, objectClass);\n+    }\n+\n+    if (collectionsClass != nil) {\n+        (*env)->DeleteLocalRef(env, collectionsClass);\n+    }\n+}\n+\n@@ -196,0 +300,10 @@\n+                        [[NSDistributedNotificationCenter defaultCenter] addObserver:self\n+                                                                         selector:@selector(platformPreferencesChanged)\n+                                                                         name:@\"AppleInterfaceThemeChangedNotification\"\n+                                                                         object:nil];\n+\n+                        [[NSDistributedNotificationCenter defaultCenter] addObserver:self\n+                                                                         selector:@selector(platformPreferencesChanged)\n+                                                                         name:@\"AppleColorPreferencesChangedNotification\"\n+                                                                         object:nil];\n+\n@@ -837,0 +951,4 @@\n+    javaIDs.MacApplication.notifyPreferencesChanged = (*env)->GetMethodID(\n+            env, jClass, \"notifyPreferencesChanged\", \"(Ljava\/util\/Map;)V\");\n+    if ((*env)->ExceptionCheck(env)) return;\n+\n@@ -1142,0 +1260,11 @@\n+\n+\/*\n+ * Class:     com_sun_glass_ui_mac_MacApplication\n+ * Method:    getPreferences\n+ * Signature: ()Ljava\/util\/Map;\n+ *\/\n+JNIEXPORT jobject JNICALL Java_com_sun_glass_ui_mac_MacApplication_getPlatformPreferences\n+(JNIEnv *env, jobject self)\n+{\n+    return [GlassApplication queryPlatformPreferences];\n+}\n\\ No newline at end of file\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.m","additions":131,"deletions":2,"binary":false,"changes":133,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,0 +119,1 @@\n+        jmethodID notifyPreferencesChanged;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassStatics.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#pragma once\n+\n+#import <Cocoa\/Cocoa.h>\n+#import <jni.h>\n+\n+@interface ThemeSupport : NSObject\n+\n+- (id)initWithEnv:(JNIEnv*)env;\n+- (void)dealloc;\n+- (void)queryProperties:(jobject)properties;\n+\n+@end\n\\ No newline at end of file\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/ThemeSupport.h","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,189 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"ThemeSupport.h\"\n+#import \"GlassMacros.h\"\n+\n+@implementation ThemeSupport {\n+    JNIEnv* env_;\n+    jclass mapClass_;\n+    jclass colorClass_;\n+    jclass booleanClass_;\n+    jmethodID putMethod_;\n+    jmethodID rgbMethod_;\n+    jfieldID trueField_;\n+    jfieldID falseField_;\n+    bool initialized_;\n+}\n+\n+- (id)initWithEnv:(JNIEnv*)env {\n+    self = [super init];\n+    env_ = env;\n+    initialized_ =\n+        ((mapClass_ = (jclass)(*env)->FindClass(env, \"java\/util\/Map\")) != nil) &&\n+        ((colorClass_ = (jclass)(*env)->FindClass(env, \"javafx\/scene\/paint\/Color\")) != nil) &&\n+        ((booleanClass_ = (jclass)(*env)->FindClass(env, \"java\/lang\/Boolean\")) != nil) &&\n+        ((putMethod_ = (*env)->GetMethodID(env, mapClass_, \"put\", \"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;\")) != 0) &&\n+        ((rgbMethod_ = (*env)->GetStaticMethodID(env, colorClass_, \"rgb\", \"(IIID)Ljavafx\/scene\/paint\/Color;\")) != 0) &&\n+        ((trueField_ = (*env)->GetStaticFieldID(env, booleanClass_, \"TRUE\", \"Ljava\/lang\/Boolean;\")) != 0) &&\n+        ((falseField_ = (*env)->GetStaticFieldID(env, booleanClass_, \"FALSE\", \"Ljava\/lang\/Boolean;\")) != 0);\n+    GLASS_CHECK_EXCEPTION(env);\n+    return self;\n+}\n+\n+- (void)dealloc {\n+    if (mapClass_ != nil) {\n+        (*env_)->DeleteLocalRef(env_, mapClass_);\n+    }\n+\n+    if (colorClass_ != nil) {\n+        (*env_)->DeleteLocalRef(env_, colorClass_);\n+    }\n+\n+    if (booleanClass_ != nil) {\n+        (*env_)->DeleteLocalRef(env_, booleanClass_);\n+    }\n+\n+    [super dealloc];\n+}\n+\n+- (void)queryProperties:(jobject)properties {\n+    if (!initialized_) {\n+        return;\n+    }\n+\n+    \/\/ Label colors\n+    [self putColor:properties key:\"macOS.NSColor.labelColor\" value:[NSColor labelColor]];\n+    [self putColor:properties key:\"macOS.NSColor.secondaryLabelColor\" value:[NSColor secondaryLabelColor]];\n+    [self putColor:properties key:\"macOS.NSColor.tertiaryLabelColor\" value:[NSColor tertiaryLabelColor]];\n+    [self putColor:properties key:\"macOS.NSColor.quaternaryLabelColor\" value:[NSColor quaternaryLabelColor]];\n+\n+    \/\/ Text colors\n+    [self putColor:properties key:\"macOS.NSColor.textColor\" value:[NSColor textColor]];\n+    [self putColor:properties key:\"macOS.NSColor.placeholderTextColor\" value:[NSColor placeholderTextColor]];\n+    [self putColor:properties key:\"macOS.NSColor.selectedTextColor\" value:[NSColor selectedTextColor]];\n+    [self putColor:properties key:\"macOS.NSColor.textBackgroundColor\" value:[NSColor textBackgroundColor]];\n+    [self putColor:properties key:\"macOS.NSColor.selectedTextBackgroundColor\" value:[NSColor selectedTextBackgroundColor]];\n+    [self putColor:properties key:\"macOS.NSColor.keyboardFocusIndicatorColor\" value:[NSColor keyboardFocusIndicatorColor]];\n+    [self putColor:properties key:\"macOS.NSColor.unemphasizedSelectedTextColor\" value:[NSColor unemphasizedSelectedTextColor]];\n+    [self putColor:properties key:\"macOS.NSColor.unemphasizedSelectedTextBackgroundColor\" value:[NSColor unemphasizedSelectedTextBackgroundColor]];\n+\n+    \/\/ Content colors\n+    [self putColor:properties key:\"macOS.NSColor.linkColor\" value:[NSColor linkColor]];\n+    [self putColor:properties key:\"macOS.NSColor.separatorColor\" value:[NSColor separatorColor]];\n+    [self putColor:properties key:\"macOS.NSColor.selectedContentBackgroundColor\" value:[NSColor selectedContentBackgroundColor]];\n+    [self putColor:properties key:\"macOS.NSColor.unemphasizedSelectedContentBackgroundColor\" value:[NSColor unemphasizedSelectedContentBackgroundColor]];\n+\n+    \/\/ Menu colors\n+    [self putColor:properties key:\"macOS.NSColor.selectedMenuItemTextColor\" value:[NSColor selectedMenuItemTextColor]];\n+\n+    \/\/ Table colors\n+    [self putColor:properties key:\"macOS.NSColor.gridColor\" value:[NSColor gridColor]];\n+    [self putColor:properties key:\"macOS.NSColor.headerTextColor\" value:[NSColor headerTextColor]];\n+    [self putColors:properties key:\"macOS.NSColor.alternatingContentBackgroundColors\" value:[NSColor alternatingContentBackgroundColors]];\n+\n+    \/\/ Control colors\n+    [self putColor:properties key:\"macOS.NSColor.controlAccentColor\" value:[NSColor controlAccentColor]];\n+    [self putColor:properties key:\"macOS.NSColor.controlColor\" value:[NSColor controlColor]];\n+    [self putColor:properties key:\"macOS.NSColor.controlBackgroundColor\" value:[NSColor controlBackgroundColor]];\n+    [self putColor:properties key:\"macOS.NSColor.controlTextColor\" value:[NSColor controlTextColor]];\n+    [self putColor:properties key:\"macOS.NSColor.disabledControlTextColor\" value:[NSColor disabledControlTextColor]];\n+    [self putColor:properties key:\"macOS.NSColor.selectedControlColor\" value:[NSColor selectedControlColor]];\n+    [self putColor:properties key:\"macOS.NSColor.selectedControlTextColor\" value:[NSColor selectedControlTextColor]];\n+    [self putColor:properties key:\"macOS.NSColor.alternateSelectedControlTextColor\" value:[NSColor alternateSelectedControlTextColor]];\n+\n+    const char* controlTint = nil;\n+    switch ([NSColor currentControlTint]) {\n+        case NSDefaultControlTint: controlTint = \"NSDefaultControlTint\"; break;\n+        case NSGraphiteControlTint: controlTint = \"NSGraphiteControlTint\"; break;\n+        case NSBlueControlTint: controlTint = \"NSBlueControlTint\"; break;\n+        case NSClearControlTint: controlTint = \"NSClearControlTint\"; break;\n+    }\n+    if (controlTint != nil) {\n+        [self putString:properties key:\"macOS.NSColor.currentControlTint\" value:controlTint];\n+    }\n+\n+    \/\/ Window colors\n+    [self putColor:properties key:\"macOS.NSColor.windowBackgroundColor\" value:[NSColor windowBackgroundColor]];\n+    [self putColor:properties key:\"macOS.NSColor.windowFrameTextColor\" value:[NSColor windowFrameTextColor]];\n+    [self putColor:properties key:\"macOS.NSColor.underPageBackgroundColor\" value:[NSColor underPageBackgroundColor]];\n+\n+    \/\/ Highlights and shadows\n+    [self putColor:properties key:\"macOS.NSColor.findHighlightColor\" value:[NSColor findHighlightColor]];\n+    [self putColor:properties key:\"macOS.NSColor.highlightColor\" value:[NSColor highlightColor]];\n+    [self putColor:properties key:\"macOS.NSColor.shadowColor\" value:[NSColor shadowColor]];\n+\n+    \/\/ Adaptable system colors\n+    [self putColor:properties key:\"macOS.NSColor.systemBlueColor\" value:[NSColor systemBlueColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemBrownColor\" value:[NSColor systemBrownColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemGrayColor\" value:[NSColor systemGrayColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemGreenColor\" value:[NSColor systemGreenColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemIndigoColor\" value:[NSColor systemIndigoColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemOrangeColor\" value:[NSColor systemOrangeColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemPinkColor\" value:[NSColor systemPinkColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemPurpleColor\" value:[NSColor systemPurpleColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemRedColor\" value:[NSColor systemRedColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemTealColor\" value:[NSColor systemTealColor]];\n+    [self putColor:properties key:\"macOS.NSColor.systemYellowColor\" value:[NSColor systemYellowColor]];\n+}\n+\n+- (void)putString:(jobject)properties key:(const char*)key value:(const char*)value {\n+    (*env_)->CallObjectMethod(env_, properties, putMethod_,\n+        (*env_)->NewStringUTF(env_, key),\n+        value != nil ? (*env_)->NewStringUTF(env_, value) : nil);\n+}\n+\n+- (void)putColor:(jobject)properties key:(const char*)colorName value:(NSColor*)color {\n+    NSColor* c = [color colorUsingColorSpace:[NSColorSpace deviceRGBColorSpace]];\n+    (*env_)->CallObjectMethod(env_, properties, putMethod_,\n+        (*env_)->NewStringUTF(env_, colorName),\n+        (*env_)->CallStaticObjectMethod(\n+            env_, colorClass_, rgbMethod_,\n+            (int)([c redComponent] * 255.0f),\n+            (int)([c greenComponent] * 255.0f),\n+            (int)([c blueComponent] * 255.0f),\n+            (double)[c alphaComponent]));\n+}\n+\n+- (void)putColors:(jobject)properties key:(const char*)colorName value:(NSArray*)colors {\n+    int count = [colors count];\n+    jobjectArray res = (*env_)->NewObjectArray(env_, count, colorClass_, nil);\n+\n+    for (int i = 0; i < count; ++i) {\n+        NSColor* c = [colors[i] colorUsingColorSpace:[NSColorSpace deviceRGBColorSpace]];\n+        jobject fxcolor = (*env_)->CallStaticObjectMethod(\n+            env_, colorClass_, rgbMethod_,\n+            (int)([c redComponent] * 255.0f),\n+            (int)([c greenComponent] * 255.0f),\n+            (int)([c blueComponent] * 255.0f),\n+            (double)[c alphaComponent]);\n+\n+        (*env_)->SetObjectArrayElement(env_, res, i, fxcolor);\n+    }\n+\n+    (*env_)->CallObjectMethod(env_, properties, putMethod_, (*env_)->NewStringUTF(env_, colorName), res);\n+}\n+\n+@end\n\\ No newline at end of file\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/ThemeSupport.m","additions":189,"deletions":0,"binary":false,"changes":189,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+#include \"ThemeSupport.h\"\n+#include \"RoActivationSupport.h\"\n@@ -107,0 +109,1 @@\n+    m_preferences = NULL;\n@@ -119,0 +122,3 @@\n+    if (m_preferences) {\n+        GetEnv()->DeleteGlobalRef(m_preferences);\n+    }\n@@ -126,1 +132,26 @@\n-jstring GlassApplication::GetThemeName(JNIEnv* env)\n+\/**\n+ * Collect all platform preferences and return them as a java\/util\/Map.\n+ *\/\n+jobject GlassApplication::GetPreferences(JNIEnv* env)\n+{\n+    jclass mapClass = (jclass)env->FindClass(\"java\/util\/HashMap\");\n+    if (CheckAndClearException(env)) return NULL;\n+\n+    jmethodID constructor = env->GetMethodID(mapClass, \"<init>\", \"()V\");\n+    jobject properties = env->NewObject(mapClass, constructor);\n+    if (CheckAndClearException(env)) { env->DeleteLocalRef(mapClass); return NULL; }\n+\n+    ThemeSupport themeSupport(env);\n+    themeSupport.queryHighContrastScheme(properties);\n+    themeSupport.querySystemColors(properties);\n+    themeSupport.queryUIColors(properties);\n+\n+    env->DeleteLocalRef(mapClass);\n+    return properties;\n+}\n+\n+\/**\n+ * Collect all platform preferences and notify the JavaFX application when a preference has changed.\n+ * The change notification includes all preferences, not only the changed preferences.\n+ *\/\n+bool GlassApplication::UpdatePreferences()\n@@ -128,8 +159,4 @@\n-    HIGHCONTRAST contrastInfo;\n-    contrastInfo.cbSize = sizeof(HIGHCONTRAST);\n-    ::SystemParametersInfo(SPI_GETHIGHCONTRAST, sizeof(HIGHCONTRAST), &contrastInfo, 0);\n-    if (contrastInfo.dwFlags & HCF_HIGHCONTRASTON) {\n-        jsize length = (jsize) wcslen(contrastInfo.lpszDefaultScheme);\n-        jstring jstr = env->NewString((jchar*) contrastInfo.lpszDefaultScheme, length);\n-        if (CheckAndClearException(env)) return NULL;\n-        return jstr;\n+    JNIEnv* env = GetEnv();\n+    jobject newPreferences = GetPreferences(env);\n+    if (newPreferences == NULL) {\n+        return false;\n@@ -137,1 +164,37 @@\n-    return NULL;\n+\n+    jclass objectClass = (jclass)env->FindClass(\"java\/lang\/Object\");\n+    if (CheckAndClearException(env)) return false;\n+\n+    jmethodID equalsMethod = env->GetMethodID(objectClass, \"equals\", \"(Ljava\/lang\/Object;)Z\");\n+    jboolean isEqual = env->CallBooleanMethod(newPreferences, equalsMethod, m_preferences);\n+\n+    if (!CheckAndClearException(env) && !isEqual) {\n+        if (m_preferences != NULL) {\n+            env->DeleteGlobalRef(m_preferences);\n+        }\n+\n+        m_preferences = env->NewGlobalRef(newPreferences);\n+\n+        jclass collectionsClass = (jclass)env->FindClass(\"java\/util\/Collections\");\n+        if (CheckAndClearException(env)) {\n+            env->DeleteLocalRef(newPreferences);\n+            env->DeleteLocalRef(objectClass);\n+            return false;\n+        }\n+\n+        jmethodID method = env->GetStaticMethodID(collectionsClass, \"unmodifiableMap\", \"(Ljava\/util\/Map;)Ljava\/util\/Map;\");\n+        jobject unmodifiablePreferences = env->CallStaticObjectMethod(collectionsClass, method, newPreferences);\n+        if (!CheckAndClearException(env)) {\n+            env->CallVoidMethod(m_grefThis, javaIDs.Application.notifyPreferencesChangedMID, unmodifiablePreferences);\n+        }\n+\n+        env->DeleteLocalRef(unmodifiablePreferences);\n+        env->DeleteLocalRef(newPreferences);\n+        env->DeleteLocalRef(collectionsClass);\n+        env->DeleteLocalRef(objectClass);\n+        return true;\n+    }\n+\n+    env->DeleteLocalRef(newPreferences);\n+    env->DeleteLocalRef(objectClass);\n+    return false;\n@@ -184,0 +247,4 @@\n+            if ((UINT)wParam == SPI_GETHIGHCONTRAST ||\n+                    lParam != NULL && wcscmp(LPCWSTR(lParam), L\"ImmersiveColorSet\") == 0) {\n+                return UpdatePreferences() ? 0 : 1;\n+            }\n@@ -191,7 +258,4 @@\n-        case WM_THEMECHANGED: {\n-            JNIEnv* env = GetEnv();\n-            jstring themeName = GlassApplication::GetThemeName(env);\n-            jboolean result = env->CallBooleanMethod(m_grefThis, javaIDs.Application.notifyThemeChangedMID, themeName);\n-            if (CheckAndClearException(env)) return 1;\n-            return !result;\n-        }\n+        case WM_THEMECHANGED:\n+        case WM_SYSCOLORCHANGE:\n+        case WM_DWMCOLORIZATIONCOLORCHANGED:\n+            return UpdatePreferences() ? 0 : 1;\n@@ -316,0 +380,3 @@\n+        tryInitializeRoActivationSupport();\n+    } else if (dwReason == DLL_PROCESS_DETACH) {\n+        uninitializeRoActivationSupport();\n@@ -341,3 +408,3 @@\n-    javaIDs.Application.notifyThemeChangedMID =\n-        env->GetMethodID(cls, \"notifyThemeChanged\", \"(Ljava\/lang\/String;)Z\");\n-    ASSERT(javaIDs.Application.notifyThemeChangedMID);\n+    javaIDs.Application.notifyPreferencesChangedMID =\n+        env->GetMethodID(cls, \"notifyPreferencesChanged\", \"(Ljava\/util\/Map;)V\");\n+    ASSERT(javaIDs.Application.notifyPreferencesChangedMID);\n@@ -454,11 +521,0 @@\n-\/*\n- * Class:     com_sun_glass_ui_win_WinApplication\n- * Method:    _getHighContrastTheme\n- * Signature: ()Ljava\/lang\/String;\n- *\/\n-JNIEXPORT jstring JNICALL Java_com_sun_glass_ui_win_WinApplication__1getHighContrastTheme\n-  (JNIEnv * env, jobject self)\n-{\n-    return GlassApplication::GetThemeName(env);\n-}\n-\n@@ -538,0 +594,11 @@\n+\/*\n+ * Class:     com_sun_glass_ui_win_WinApplication\n+ * Method:    getPlatformPreferences\n+ * Signature: ()Ljava\/util\/Map;\n+ *\/\n+JNIEXPORT jobject JNICALL Java_com_sun_glass_ui_win_WinApplication_getPlatformPreferences\n+    (JNIEnv * env, jobject self)\n+{\n+    return GlassApplication::GetPreferences(env);\n+}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassApplication.cpp","additions":99,"deletions":32,"binary":false,"changes":131,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,2 @@\n-    static jstring GetThemeName(JNIEnv* env);\n+    static jobject GetPreferences(JNIEnv* env);\n+    bool UpdatePreferences();\n@@ -128,0 +129,1 @@\n+    jobject m_preferences;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassApplication.h","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,240 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"RoActivationSupport.h\"\n+#include <comdef.h>\n+#include <winstring.h>\n+#include <jni.h>\n+\n+namespace\n+{\n+    bool initialized = false;\n+    const char* moduleNotFoundMessage = \"WinRT: %s not found\\n\";\n+\n+    const char* catStrW(const char* s1, const wchar_t* s2w)\n+    {\n+        int s1_len = int(strlen(s1));\n+        int s2_len = WideCharToMultiByte(CP_ACP, 0, s2w, -1, NULL, 0, NULL, FALSE);\n+        char* res = new char[s1_len + s2_len];\n+        WideCharToMultiByte(CP_ACP, 0, s2w, -1, res + s1_len, s2_len, NULL, FALSE);\n+        memcpy_s(res, s1_len + s2_len, s1, s1_len);\n+        return res;\n+    }\n+\n+    typedef HRESULT WINAPI FnRoInitialize(RO_INIT_TYPE initType);\n+    typedef void WINAPI FnRoUninitialize();\n+    typedef HRESULT WINAPI FnRoActivateInstance(HSTRING activatableClassId, IInspectable** instance);\n+    typedef HRESULT WINAPI FnWindowsCreateString(PCNZWCH sourceString, UINT32 length, HSTRING* string);\n+    typedef HRESULT WINAPI FnWindowsDeleteString(HSTRING string);\n+\n+    HMODULE hLibComBase = NULL;\n+    FnRoInitialize* pRoInitialize = NULL;\n+    FnRoUninitialize* pRoUninitialize = NULL;\n+    FnRoActivateInstance* pRoActivateInstance = NULL;\n+    FnWindowsCreateString* pWindowsCreateString = NULL;\n+    FnWindowsDeleteString* pWindowsDeleteString = NULL;\n+\n+    template<class T>\n+    bool loadFunction(HMODULE lib, T*& fnptr, const char* name)\n+    {\n+        fnptr = reinterpret_cast<T*>(GetProcAddress(lib, name));\n+        if (fnptr == nullptr) {\n+            fprintf(stderr, \"GetProcAddress: %s not loaded\\n\", name);\n+            initialized = false;\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+}\n+\n+void tryInitializeRoActivationSupport()\n+{\n+    if (initialized) {\n+        return;\n+    }\n+\n+    wchar_t path[MAX_PATH];\n+    wchar_t file[MAX_PATH];\n+\n+    if (GetSystemDirectory(path, sizeof(path) \/ sizeof(wchar_t)) == 0) {\n+        return;\n+    }\n+\n+    memcpy_s(file, sizeof(file), path, sizeof(path));\n+    wcscat_s(file, MAX_PATH-1, L\"\\\\combase.dll\");\n+    hLibComBase = LoadLibraryW(file);\n+    if (!hLibComBase) {\n+        fprintf(stderr, moduleNotFoundMessage, \"combase.dll\");\n+        return;\n+    }\n+\n+    bool loaded =\n+        loadFunction(hLibComBase, pRoInitialize, \"RoInitialize\") &&\n+        loadFunction(hLibComBase, pRoUninitialize, \"RoUninitialize\") &&\n+        loadFunction(hLibComBase, pRoActivateInstance, \"RoActivateInstance\") &&\n+        loadFunction(hLibComBase, pWindowsCreateString, \"WindowsCreateString\") &&\n+        loadFunction(hLibComBase, pWindowsDeleteString, \"WindowsDeleteString\");\n+\n+    if (!loaded) {\n+        uninitializeRoActivationSupport();\n+    } else {\n+        HRESULT res = RoInitialize(RO_INIT_SINGLETHREADED);\n+        if (FAILED(res)) {\n+            fprintf(stderr, RoException(\"RoInitialize failed: \", res).message());\n+            uninitializeRoActivationSupport();\n+        } else {\n+            initialized = true;\n+        }\n+    }\n+}\n+\n+void uninitializeRoActivationSupport()\n+{\n+    if (initialized) {\n+        RoUninitialize();\n+    }\n+\n+    initialized = false;\n+\n+    if (hLibComBase) {\n+        FreeLibrary(hLibComBase);\n+        hLibComBase = NULL;\n+        pRoInitialize = NULL;\n+        pRoUninitialize = NULL;\n+        pRoActivateInstance = NULL;\n+        pWindowsCreateString = NULL;\n+        pWindowsDeleteString = NULL;\n+    }\n+}\n+\n+bool isRoActivationSupported()\n+{\n+    return initialized;\n+}\n+\n+HRESULT WINAPI RoInitialize(RO_INIT_TYPE initType)\n+{\n+    return pRoInitialize(initType);\n+}\n+\n+void WINAPI RoUninitialize()\n+{\n+    pRoUninitialize();\n+}\n+\n+HRESULT WINAPI RoActivateInstance(HSTRING activatableClassId, IInspectable** instance)\n+{\n+    return pRoActivateInstance(activatableClassId, instance);\n+}\n+\n+HRESULT WINAPI WindowsCreateString(PCNZWCH sourceString, UINT32 length, HSTRING* string)\n+{\n+    return pWindowsCreateString(sourceString, length, string);\n+}\n+\n+HRESULT WINAPI WindowsDeleteString(HSTRING string)\n+{\n+    return pWindowsDeleteString(string);\n+}\n+\n+hstring::hstring(const char* str)\n+{\n+    int wstr_len = MultiByteToWideChar(CP_UTF8, 0, str, -1, nullptr, 0);\n+    WCHAR* wstr = new WCHAR[wstr_len];\n+    memset(wstr, 0, wstr_len * sizeof(WCHAR));\n+    MultiByteToWideChar(CP_UTF8, 0, str, -1, wstr, wstr_len);\n+    WindowsCreateString(wstr, wstr_len - 1, &hstr_);\n+    delete[] wstr;\n+}\n+\n+hstring::~hstring()\n+{\n+    WindowsDeleteString(hstr_);\n+}\n+\n+hstring::operator HSTRING()\n+{\n+    return hstr_;\n+}\n+\n+RoException::RoException(const char* message)\n+{\n+    size_t len = strlen(message);\n+    char* msg = new char[len + 1];\n+    strcpy_s(msg, len + 1, message);\n+    message_ = msg;\n+}\n+\n+RoException::RoException(const char* message, HRESULT res)\n+{\n+    message_ = catStrW(message, _com_error(res).ErrorMessage());\n+}\n+\n+RoException::RoException(const RoException& source) : RoException(source.message()) {}\n+\n+RoException::RoException(RoException&& source)\n+{\n+    message_ = source.message_;\n+    source.message_ = nullptr;\n+}\n+\n+RoException::~RoException()\n+{\n+    if (message_ != nullptr) {\n+        delete[] message_;\n+    }\n+}\n+\n+RoException& RoException::operator=(const RoException& source)\n+{\n+    if (message_ != nullptr) {\n+        delete[] message_;\n+    }\n+\n+    size_t len = strlen(source.message());\n+    char* msg = new char[len + 1];\n+    strcpy_s(msg, len + 1, source.message());\n+    message_ = msg;\n+\n+    return *this;\n+}\n+\n+RoException& RoException::operator=(RoException&& source)\n+{\n+    if (message_ != nullptr) {\n+        delete[] message_;\n+    }\n+\n+    message_ = source.message_;\n+    source.message_ = nullptr;\n+\n+    return *this;\n+}\n+\n+const char* RoException::message() const\n+{\n+    return message_;\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/RoActivationSupport.cpp","additions":240,"deletions":0,"binary":false,"changes":240,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#pragma once\n+\n+#define _ROAPI_\n+#include <roapi.h>\n+#include <wrl.h>\n+#include <hstring.h>\n+\n+#define RO_CHECKED(NAME, FUNC) \\\n+    { HRESULT res = FUNC; if (FAILED(res)) throw RoException(NAME ## \" failed: \", res); }\n+\n+struct hstring\n+{\n+    hstring(const char* str);\n+    ~hstring();\n+    operator HSTRING();\n+\n+private:\n+    HSTRING hstr_;\n+};\n+\n+void tryInitializeRoActivationSupport();\n+void uninitializeRoActivationSupport();\n+bool isRoActivationSupported();\n+\n+class RoException\n+{\n+public:\n+    RoException(const char* message);\n+    RoException(const char* message, HRESULT);\n+    RoException(const RoException&);\n+    RoException(RoException&&);\n+    ~RoException();\n+\n+    RoException& operator=(const RoException&);\n+    RoException& operator=(RoException&&);\n+\n+    const char* message() const;\n+\n+private:\n+    const char* message_;\n+};\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/RoActivationSupport.h","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,188 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"common.h\"\n+#include \"ThemeSupport.h\"\n+#include \"RoActivationSupport.h\"\n+#include <windows.ui.viewmanagement.h>\n+\n+using namespace Microsoft::WRL;\n+using namespace ABI::Windows::UI;\n+using namespace ABI::Windows::UI::ViewManagement;\n+\n+ThemeSupport::ThemeSupport(JNIEnv* env) :\n+    env_(env),\n+    mapClass_((jclass)env->FindClass(\"java\/util\/Map\")),\n+    colorClass_((jclass)env->FindClass(\"javafx\/scene\/paint\/Color\")),\n+    booleanClass_((jclass)env->FindClass(\"java\/lang\/Boolean\"))\n+{\n+    putMethod_ = env->GetMethodID(mapClass_, \"put\", \"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;\");\n+    rgbMethod_ = env->GetStaticMethodID(colorClass_, \"rgb\", \"(IIID)Ljavafx\/scene\/paint\/Color;\");\n+    trueField_ = env->GetStaticFieldID(booleanClass_, \"TRUE\", \"Ljava\/lang\/Boolean;\");\n+    falseField_ = env->GetStaticFieldID(booleanClass_, \"FALSE\", \"Ljava\/lang\/Boolean;\");\n+}\n+\n+ThemeSupport::~ThemeSupport() {\n+    env_->DeleteLocalRef(mapClass_);\n+    env_->DeleteLocalRef(colorClass_);\n+    env_->DeleteLocalRef(booleanClass_);\n+}\n+\n+void ThemeSupport::queryHighContrastScheme(jobject properties) const\n+{\n+    HIGHCONTRAST contrastInfo;\n+    contrastInfo.cbSize = sizeof(HIGHCONTRAST);\n+    ::SystemParametersInfo(SPI_GETHIGHCONTRAST, sizeof(HIGHCONTRAST), &contrastInfo, 0);\n+    if (contrastInfo.dwFlags & HCF_HIGHCONTRASTON) {\n+        putBoolean(properties, \"Windows.SPI.HighContrastOn\", true);\n+        putString(properties, \"Windows.SPI.HighContrastColorScheme\", contrastInfo.lpszDefaultScheme);\n+    } else {\n+        putBoolean(properties, \"Windows.SPI.HighContrastOn\", false);\n+        putString(properties, \"Windows.SPI.HighContrastColorScheme\", (const char*)NULL);\n+    }\n+}\n+\n+void ThemeSupport::querySystemColors(jobject properties) const\n+{\n+    putColor(properties, \"Windows.SysColor.COLOR_3DDKSHADOW\", GetSysColor(COLOR_3DDKSHADOW));\n+    putColor(properties, \"Windows.SysColor.COLOR_3DFACE\", GetSysColor(COLOR_3DFACE));\n+    putColor(properties, \"Windows.SysColor.COLOR_3DHIGHLIGHT\", GetSysColor(COLOR_3DHIGHLIGHT));\n+    putColor(properties, \"Windows.SysColor.COLOR_3DHILIGHT\", GetSysColor(COLOR_3DHILIGHT));\n+    putColor(properties, \"Windows.SysColor.COLOR_3DLIGHT\", GetSysColor(COLOR_3DLIGHT));\n+    putColor(properties, \"Windows.SysColor.COLOR_3DSHADOW\", GetSysColor(COLOR_3DSHADOW));\n+    putColor(properties, \"Windows.SysColor.COLOR_ACTIVEBORDER\", GetSysColor(COLOR_ACTIVEBORDER));\n+    putColor(properties, \"Windows.SysColor.COLOR_ACTIVECAPTION\", GetSysColor(COLOR_ACTIVECAPTION));\n+    putColor(properties, \"Windows.SysColor.COLOR_APPWORKSPACE\", GetSysColor(COLOR_APPWORKSPACE));\n+    putColor(properties, \"Windows.SysColor.COLOR_BACKGROUND\", GetSysColor(COLOR_BACKGROUND));\n+    putColor(properties, \"Windows.SysColor.COLOR_BTNFACE\", GetSysColor(COLOR_BTNFACE));\n+    putColor(properties, \"Windows.SysColor.COLOR_BTNHIGHLIGHT\", GetSysColor(COLOR_BTNHIGHLIGHT));\n+    putColor(properties, \"Windows.SysColor.COLOR_BTNHILIGHT\", GetSysColor(COLOR_BTNHILIGHT));\n+    putColor(properties, \"Windows.SysColor.COLOR_BTNSHADOW\", GetSysColor(COLOR_BTNSHADOW));\n+    putColor(properties, \"Windows.SysColor.COLOR_BTNTEXT\", GetSysColor(COLOR_BTNTEXT));\n+    putColor(properties, \"Windows.SysColor.COLOR_CAPTIONTEXT\", GetSysColor(COLOR_CAPTIONTEXT));\n+    putColor(properties, \"Windows.SysColor.COLOR_DESKTOP\", GetSysColor(COLOR_DESKTOP));\n+    putColor(properties, \"Windows.SysColor.COLOR_GRADIENTACTIVECAPTION\", GetSysColor(COLOR_GRADIENTACTIVECAPTION));\n+    putColor(properties, \"Windows.SysColor.COLOR_GRADIENTINACTIVECAPTION\", GetSysColor(COLOR_GRADIENTINACTIVECAPTION));\n+    putColor(properties, \"Windows.SysColor.COLOR_GRAYTEXT\", GetSysColor(COLOR_GRAYTEXT));\n+    putColor(properties, \"Windows.SysColor.COLOR_HIGHLIGHT\", GetSysColor(COLOR_HIGHLIGHT));\n+    putColor(properties, \"Windows.SysColor.COLOR_HIGHLIGHTTEXT\", GetSysColor(COLOR_HIGHLIGHTTEXT));\n+    putColor(properties, \"Windows.SysColor.COLOR_HOTLIGHT\", GetSysColor(COLOR_HOTLIGHT));\n+    putColor(properties, \"Windows.SysColor.COLOR_INACTIVEBORDER\", GetSysColor(COLOR_INACTIVEBORDER));\n+    putColor(properties, \"Windows.SysColor.COLOR_INACTIVECAPTION\", GetSysColor(COLOR_INACTIVECAPTION));\n+    putColor(properties, \"Windows.SysColor.COLOR_INACTIVECAPTIONTEXT\", GetSysColor(COLOR_INACTIVECAPTIONTEXT));\n+    putColor(properties, \"Windows.SysColor.COLOR_INFOBK\", GetSysColor(COLOR_INFOBK));\n+    putColor(properties, \"Windows.SysColor.COLOR_INFOTEXT\", GetSysColor(COLOR_INFOTEXT));\n+    putColor(properties, \"Windows.SysColor.COLOR_MENU\", GetSysColor(COLOR_MENU));\n+    putColor(properties, \"Windows.SysColor.COLOR_MENUHILIGHT\", GetSysColor(COLOR_MENUHILIGHT));\n+    putColor(properties, \"Windows.SysColor.COLOR_MENUBAR\", GetSysColor(COLOR_MENUBAR));\n+    putColor(properties, \"Windows.SysColor.COLOR_MENUTEXT\", GetSysColor(COLOR_MENUTEXT));\n+    putColor(properties, \"Windows.SysColor.COLOR_SCROLLBAR\", GetSysColor(COLOR_SCROLLBAR));\n+    putColor(properties, \"Windows.SysColor.COLOR_WINDOW\", GetSysColor(COLOR_WINDOW));\n+    putColor(properties, \"Windows.SysColor.COLOR_WINDOWFRAME\", GetSysColor(COLOR_WINDOWFRAME));\n+    putColor(properties, \"Windows.SysColor.COLOR_WINDOWTEXT\", GetSysColor(COLOR_WINDOWTEXT));\n+}\n+\n+void ThemeSupport::queryUIColors(jobject properties) const\n+{\n+    if (!isRoActivationSupported()) {\n+        return;\n+    }\n+\n+    try {\n+        ComPtr<IUISettings> settings;\n+        RO_CHECKED(\"RoActivateInstance\",\n+                   RoActivateInstance(hstring(\"Windows.UI.ViewManagement.UISettings\"), (IInspectable**)&settings));\n+\n+        ComPtr<IUISettings3> settings3;\n+        RO_CHECKED(\"IUISettings::QueryInterface<IUISettings3>\",\n+                   settings->QueryInterface<IUISettings3>(&settings3));\n+\n+        Color background, foreground, accentDark3, accentDark2, accentDark1, accent,\n+              accentLight1, accentLight2, accentLight3;\n+\n+        settings3->GetColorValue(UIColorType::UIColorType_Background, &background);\n+        settings3->GetColorValue(UIColorType::UIColorType_Foreground, &foreground);\n+        settings3->GetColorValue(UIColorType::UIColorType_AccentDark3, &accentDark3);\n+        settings3->GetColorValue(UIColorType::UIColorType_AccentDark2, &accentDark2);\n+        settings3->GetColorValue(UIColorType::UIColorType_AccentDark1, &accentDark1);\n+        settings3->GetColorValue(UIColorType::UIColorType_Accent, &accent);\n+        settings3->GetColorValue(UIColorType::UIColorType_AccentLight1, &accentLight1);\n+        settings3->GetColorValue(UIColorType::UIColorType_AccentLight2, &accentLight2);\n+        settings3->GetColorValue(UIColorType::UIColorType_AccentLight3, &accentLight3);\n+\n+        putColor(properties, \"Windows.UIColor.Background\", background);\n+        putColor(properties, \"Windows.UIColor.Foreground\", foreground);\n+        putColor(properties, \"Windows.UIColor.AccentDark3\", accentDark3);\n+        putColor(properties, \"Windows.UIColor.AccentDark2\", accentDark2);\n+        putColor(properties, \"Windows.UIColor.AccentDark1\", accentDark1);\n+        putColor(properties, \"Windows.UIColor.Accent\", accent);\n+        putColor(properties, \"Windows.UIColor.AccentLight1\", accentLight1);\n+        putColor(properties, \"Windows.UIColor.AccentLight2\", accentLight2);\n+        putColor(properties, \"Windows.UIColor.AccentLight3\", accentLight3);\n+    } catch (RoException const& ex) {\n+        \/\/ If an activation exception occurs, it probably means that we're on a Windows system\n+        \/\/ that doesn't support the UISettings API. This is not a problem, it simply means that\n+        \/\/ we don't report the UISettings properties back to the JavaFX application.\n+        return;\n+    }\n+}\n+\n+void ThemeSupport::putString(jobject properties, const char* key, const char* value) const\n+{\n+    env_->CallObjectMethod(properties, putMethod_,\n+        env_->NewStringUTF(key),\n+        value != NULL ? env_->NewStringUTF(value) : NULL);\n+}\n+\n+void ThemeSupport::putString(jobject properties, const char* key, const wchar_t* value) const\n+{\n+    env_->CallObjectMethod(properties, putMethod_,\n+        env_->NewStringUTF(key),\n+        value != NULL ? env_->NewString((jchar*)value, wcslen(value)) : NULL);\n+}\n+\n+void ThemeSupport::putBoolean(jobject properties, const char* key, const bool value) const\n+{\n+    env_->CallObjectMethod(properties, putMethod_,\n+        env_->NewStringUTF(key),\n+        value ? env_->GetStaticObjectField(booleanClass_, trueField_) :\n+                env_->GetStaticObjectField(booleanClass_, falseField_));\n+}\n+\n+void ThemeSupport::putColor(jobject properties, const char* colorName, int colorValue) const\n+{\n+    env_->CallObjectMethod(properties, putMethod_,\n+        env_->NewStringUTF(colorName),\n+        env_->CallStaticObjectMethod(\n+            colorClass_, rgbMethod_, GetRValue(colorValue), GetGValue(colorValue), GetBValue(colorValue), 1.0));\n+}\n+\n+void ThemeSupport::putColor(jobject properties, const char* colorName, Color colorValue) const\n+{\n+    env_->CallObjectMethod(properties, putMethod_,\n+        env_->NewStringUTF(colorName),\n+        env_->CallStaticObjectMethod(\n+            colorClass_, rgbMethod_, colorValue.R, colorValue.G, colorValue.B, (double)colorValue.A \/ 255.0));\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/ThemeSupport.cpp","additions":188,"deletions":0,"binary":false,"changes":188,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#pragma once\n+\n+#include <jni.h>\n+\n+namespace ABI { namespace Windows { namespace UI { struct Color; } } }\n+\n+class ThemeSupport final\n+{\n+public:\n+    ThemeSupport(JNIEnv*);\n+    ~ThemeSupport();\n+    ThemeSupport(ThemeSupport const&) = delete;\n+    ThemeSupport& operator=(ThemeSupport const&) = delete;\n+\n+    void querySystemColors(jobject properties) const;\n+    void queryHighContrastScheme(jobject properties) const;\n+    void queryUIColors(jobject properties) const;\n+\n+private:\n+    JNIEnv* env_;\n+    jclass mapClass_;\n+    jclass colorClass_;\n+    jclass booleanClass_;\n+    jmethodID putMethod_;\n+    jmethodID rgbMethod_;\n+    jfieldID trueField_;\n+    jfieldID falseField_;\n+\n+    void putString(jobject properties, const char* key, const char* value) const;\n+    void putString(jobject properties, const char* key, const wchar_t* value) const;\n+    void putBoolean(jobject properties, const char* key, const bool value) const;\n+    void putColor(jobject properties, const char* colorName, int colorValue) const;\n+    void putColor(jobject properties, const char* colorName, ABI::Windows::UI::Color colorValue) const;\n+};\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/ThemeSupport.h","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -506,1 +506,1 @@\n-        jmethodID notifyThemeChangedMID;\n+        jmethodID notifyPreferencesChangedMID;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/Utils.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.application;\n+\n+import com.sun.javafx.application.PlatformPreferencesImpl;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import javafx.application.PlatformPreferences;\n+import javafx.application.PlatformPreferencesListener;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.sun.javafx.application.PlatformImpl.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class PlatformImplTest {\n+\n+    private static Map<String, Object> preferences;\n+    private static Map<String, Object> originalPreferences;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        preferences.clear();\n+    }\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        originalPreferences = new HashMap<>(getPlatformPreferences());\n+        preferences = ((PlatformPreferencesImpl)getPlatformPreferences()).getModifiableMap();\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        preferences.clear();\n+        preferences.putAll(originalPreferences);\n+    }\n+\n+    @Test\n+    public void testUpdatePlatformPreferences() {\n+        Map<String, Object> newPrefs = Map.of(\"foo\", \"bar\", \"baz\", \"qux\");\n+        updatePreferences(newPrefs);\n+        assertEquals(newPrefs, getPlatformPreferences());\n+    }\n+\n+    @Test\n+    public void testPreferencesChangedListener() {\n+        List<String> trace = new ArrayList<>();\n+        var listener = new PlatformPreferencesListener() {\n+            @Override\n+            public void onPreferencesChanged(PlatformPreferences preferences, Map<String, Object> changed) {\n+                trace.add(changed.toString());\n+            }\n+        };\n+\n+        getPlatformPreferences().addListener(listener);\n+\n+        \/\/ Two added keys are included in the change notification\n+        updatePreferences(Map.of(\"foo\", \"bar\", \"baz\", \"qux\"));\n+        assertEquals(1, trace.size());\n+        assertEquals(\"{foo=bar, baz=qux}\", trace.get(0));\n+\n+        \/\/ Mappings that haven't changed are not included in the change notification\n+        updatePreferences(Map.of(\"foo\", \"bar2\", \"baz\", \"qux\"));\n+        assertEquals(2, trace.size());\n+        assertEquals(\"{foo=bar2}\", trace.get(1));\n+\n+        \/\/ Change the second mapping\n+        updatePreferences(Map.of(\"baz\", \"qux2\"));\n+        assertEquals(3, trace.size());\n+        assertEquals(\"{baz=qux2}\", trace.get(2));\n+\n+        \/\/ If no mapping was changed, no change notification is fired\n+        updatePreferences(Map.of(\"foo\", \"bar2\", \"baz\", \"qux2\"));\n+        assertEquals(3, trace.size());\n+\n+        getPlatformPreferences().removeListener(listener);\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/application\/PlatformImplTest.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.geometry.Insets;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+\n+public class PlatformPreferencesTest extends Application {\n+\n+    @Override\n+    public void start(Stage stage) {\n+        var passButton = new Button(\"Pass\");\n+        passButton.setOnAction(e -> Platform.exit());\n+\n+        var failButton = new Button(\"Fail\");\n+        failButton.setOnAction(e -> {\n+            Platform.exit();\n+            throw new AssertionError(\"Changed platform preferences were not correctly reported\");\n+        });\n+\n+        var textArea = new TextArea();\n+        textArea.setEditable(false);\n+\n+        var root = new VBox();\n+        root.setPadding(new Insets(20));\n+        root.setSpacing(20);\n+        root.getChildren().add(new VBox(10,\n+            new VBox(\n+                new Label(\"1. On a supported platform, change any of the platform preferences.\"),\n+                new Label(\"    See javafx.application.PlatformPreferences for a list of supported platforms.\")),\n+            new Label(\"2. Observe whether the changed preferences are reported in the log below.\"),\n+            new Label(\"3. Click \\\"Pass\\\" if the changes were correctly reported, otherwise click \\\"Fail\\\".\"),\n+            new HBox(5, passButton, failButton),\n+            textArea\n+        ));\n+\n+        Platform.getPreferences().addListener(\n+            (preferences, changed) -> textArea.setText(textArea.getText() + changed + System.lineSeparator()));\n+\n+        stage.setScene(new Scene(root));\n+        stage.show();\n+    }\n+\n+    public static void main(String[] args) {\n+        Application.launch(args);\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"tests\/manual\/events\/PlatformPreferencesTest.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}