{"files":[{"patch":"@@ -999,0 +999,4 @@\n+        if (preferences == null) {\n+            return;\n+        }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformImpl.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"ThemeSupport.h\"\n@@ -103,1 +102,1 @@\n-GlassApplication::GlassApplication(jobject jrefThis) : BaseWnd()\n+GlassApplication::GlassApplication(jobject jrefThis) : BaseWnd(), m_platformSupport(GetEnv())\n@@ -109,1 +108,0 @@\n-    m_preferences = NULL;\n@@ -122,3 +120,0 @@\n-    if (m_preferences) {\n-        GetEnv()->DeleteGlobalRef(m_preferences);\n-    }\n@@ -132,71 +127,0 @@\n-\/**\n- * Collect all platform preferences and return them as a java\/util\/Map.\n- *\/\n-jobject GlassApplication::GetPreferences(JNIEnv* env)\n-{\n-    jclass mapClass = (jclass)env->FindClass(\"java\/util\/HashMap\");\n-    if (CheckAndClearException(env)) return NULL;\n-\n-    jmethodID constructor = env->GetMethodID(mapClass, \"<init>\", \"()V\");\n-    jobject properties = env->NewObject(mapClass, constructor);\n-    if (CheckAndClearException(env)) { env->DeleteLocalRef(mapClass); return NULL; }\n-\n-    ThemeSupport themeSupport(env);\n-    themeSupport.queryHighContrastScheme(properties);\n-    themeSupport.querySystemColors(properties);\n-    themeSupport.queryUIColors(properties);\n-\n-    env->DeleteLocalRef(mapClass);\n-    return properties;\n-}\n-\n-\/**\n- * Collect all platform preferences and notify the JavaFX application when a preference has changed.\n- * The change notification includes all preferences, not only the changed preferences.\n- *\/\n-bool GlassApplication::UpdatePreferences()\n-{\n-    JNIEnv* env = GetEnv();\n-    jobject newPreferences = GetPreferences(env);\n-    if (newPreferences == NULL) {\n-        return false;\n-    }\n-\n-    jclass objectClass = (jclass)env->FindClass(\"java\/lang\/Object\");\n-    if (CheckAndClearException(env)) return false;\n-\n-    jmethodID equalsMethod = env->GetMethodID(objectClass, \"equals\", \"(Ljava\/lang\/Object;)Z\");\n-    jboolean isEqual = env->CallBooleanMethod(newPreferences, equalsMethod, m_preferences);\n-\n-    if (!CheckAndClearException(env) && !isEqual) {\n-        if (m_preferences != NULL) {\n-            env->DeleteGlobalRef(m_preferences);\n-        }\n-\n-        m_preferences = env->NewGlobalRef(newPreferences);\n-\n-        jclass collectionsClass = (jclass)env->FindClass(\"java\/util\/Collections\");\n-        if (CheckAndClearException(env)) {\n-            env->DeleteLocalRef(newPreferences);\n-            env->DeleteLocalRef(objectClass);\n-            return false;\n-        }\n-\n-        jmethodID method = env->GetStaticMethodID(collectionsClass, \"unmodifiableMap\", \"(Ljava\/util\/Map;)Ljava\/util\/Map;\");\n-        jobject unmodifiablePreferences = env->CallStaticObjectMethod(collectionsClass, method, newPreferences);\n-        if (!CheckAndClearException(env)) {\n-            env->CallVoidMethod(m_grefThis, javaIDs.Application.notifyPreferencesChangedMID, unmodifiablePreferences);\n-        }\n-\n-        env->DeleteLocalRef(unmodifiablePreferences);\n-        env->DeleteLocalRef(newPreferences);\n-        env->DeleteLocalRef(collectionsClass);\n-        env->DeleteLocalRef(objectClass);\n-        return true;\n-    }\n-\n-    env->DeleteLocalRef(newPreferences);\n-    env->DeleteLocalRef(objectClass);\n-    return false;\n-}\n-\n@@ -247,3 +171,4 @@\n-            if ((UINT)wParam == SPI_GETHIGHCONTRAST ||\n-                    lParam != NULL && wcscmp(LPCWSTR(lParam), L\"ImmersiveColorSet\") == 0) {\n-                return UpdatePreferences() ? 0 : 1;\n+            if (((UINT)wParam == SPI_GETHIGHCONTRAST ||\n+                    lParam != NULL && wcscmp(LPCWSTR(lParam), L\"ImmersiveColorSet\") == 0) &&\n+                    m_platformSupport.updatePreferences(m_grefThis)) {\n+                return 0;\n@@ -261,1 +186,4 @@\n-            return UpdatePreferences() ? 0 : 1;\n+            if (m_platformSupport.updatePreferences(m_grefThis)) {\n+                return 0;\n+            }\n+            break;\n@@ -602,1 +530,1 @@\n-    return GlassApplication::GetPreferences(env);\n+    return GlassApplication::GetPlatformPreferences();\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassApplication.cpp","additions":10,"deletions":82,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-\n+#include \"PlatformSupport.h\"\n@@ -84,2 +84,4 @@\n-    static jobject GetPreferences(JNIEnv* env);\n-    bool UpdatePreferences();\n+\n+    static jobject GetPlatformPreferences() {\n+        return pInstance ? pInstance->m_platformSupport.collectPreferences() : NULL;\n+    }\n@@ -129,1 +131,1 @@\n-    jobject m_preferences;\n+    PlatformSupport m_platformSupport;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassApplication.h","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,262 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"PlatformSupport.h\"\n+#include \"RoActivationSupport.h\"\n+#include <windows.ui.viewmanagement.h>\n+#include <tuple>\n+\n+using namespace Microsoft::WRL;\n+using namespace ABI::Windows::UI;\n+using namespace ABI::Windows::UI::ViewManagement;\n+\n+PlatformSupport::PlatformSupport(JNIEnv* env) : env(env), initialized(false)\n+{\n+    javaClasses.Object = (jclass)env->FindClass(\"java\/lang\/Object\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaIDs.Object.equals = env->GetMethodID(javaClasses.Object, \"equals\", \"(Ljava\/lang\/Object;)Z\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaClasses.Collections = (jclass)env->FindClass(\"java\/util\/Collections\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaIDs.Collections.unmodifiableMap = env->GetStaticMethodID(\n+        javaClasses.Collections, \"unmodifiableMap\", \"(Ljava\/util\/Map;)Ljava\/util\/Map;\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaClasses.Map = (jclass)env->FindClass(\"java\/util\/Map\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaIDs.Map.put = env->GetMethodID(\n+        javaClasses.Map, \"put\", \"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaClasses.HashMap = (jclass)env->FindClass(\"java\/util\/HashMap\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaIDs.HashMap.init = env->GetMethodID(javaClasses.HashMap, \"<init>\", \"()V\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaClasses.Color = (jclass)env->FindClass(\"javafx\/scene\/paint\/Color\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaIDs.Color.rgb = env->GetStaticMethodID(javaClasses.Color, \"rgb\", \"(IIID)Ljavafx\/scene\/paint\/Color;\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaClasses.Boolean = (jclass)env->FindClass(\"java\/lang\/Boolean\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaIDs.Boolean.trueID = env->GetStaticFieldID(javaClasses.Boolean, \"TRUE\", \"Ljava\/lang\/Boolean;\");\n+    if (CheckAndClearException(env)) return;\n+\n+    javaIDs.Boolean.falseID = env->GetStaticFieldID(javaClasses.Boolean, \"FALSE\", \"Ljava\/lang\/Boolean;\");\n+    if (CheckAndClearException(env)) return;\n+\n+    initialized = true;\n+}\n+\n+jobject PlatformSupport::collectPreferences() const\n+{\n+    if (!initialized) {\n+        return NULL;\n+    }\n+\n+    jobject prefs = env->NewObject(javaClasses.HashMap, javaIDs.HashMap.init);\n+    if (CheckAndClearException(env)) return NULL;\n+\n+    queryHighContrastScheme(prefs);\n+    querySystemColors(prefs);\n+    queryUIColors(prefs);\n+    return prefs;\n+}\n+\n+bool PlatformSupport::updatePreferences(jobject application) const\n+{\n+    if (!initialized || application == NULL) {\n+        return false;\n+    }\n+\n+    jobject newPreferences = collectPreferences();\n+\n+    jboolean preferencesChanged =\n+        newPreferences != NULL &&\n+        !env->CallBooleanMethod(newPreferences, javaIDs.Object.equals, preferences);\n+\n+    if (!CheckAndClearException(env) && preferencesChanged) {\n+        preferences = newPreferences;\n+        jobject unmodifiablePreferences = env->CallStaticObjectMethod(\n+            javaClasses.Collections, javaIDs.Collections.unmodifiableMap, newPreferences);\n+\n+        if (!CheckAndClearException(env)) {\n+            env->CallVoidMethod(application, javaIDs.Application.notifyPreferencesChangedMID, unmodifiablePreferences);\n+            env->DeleteLocalRef(unmodifiablePreferences);\n+            env->DeleteLocalRef(newPreferences);\n+            return true;\n+        }\n+    }\n+\n+    env->DeleteLocalRef(newPreferences);\n+    return false;\n+}\n+\n+void PlatformSupport::queryHighContrastScheme(jobject properties) const\n+{\n+    HIGHCONTRAST contrastInfo;\n+    contrastInfo.cbSize = sizeof(HIGHCONTRAST);\n+    ::SystemParametersInfo(SPI_GETHIGHCONTRAST, sizeof(HIGHCONTRAST), &contrastInfo, 0);\n+    if (contrastInfo.dwFlags & HCF_HIGHCONTRASTON) {\n+        putBoolean(properties, \"Windows.SPI.HighContrastOn\", true);\n+        putString(properties, \"Windows.SPI.HighContrastColorScheme\", contrastInfo.lpszDefaultScheme);\n+    } else {\n+        putBoolean(properties, \"Windows.SPI.HighContrastOn\", false);\n+        putString(properties, \"Windows.SPI.HighContrastColorScheme\", (const char*)NULL);\n+    }\n+}\n+\n+void PlatformSupport::querySystemColors(jobject properties) const\n+{\n+    putColor(properties, \"Windows.SysColor.COLOR_3DDKSHADOW\", GetSysColor(COLOR_3DDKSHADOW));\n+    putColor(properties, \"Windows.SysColor.COLOR_3DFACE\", GetSysColor(COLOR_3DFACE));\n+    putColor(properties, \"Windows.SysColor.COLOR_3DHIGHLIGHT\", GetSysColor(COLOR_3DHIGHLIGHT));\n+    putColor(properties, \"Windows.SysColor.COLOR_3DHILIGHT\", GetSysColor(COLOR_3DHILIGHT));\n+    putColor(properties, \"Windows.SysColor.COLOR_3DLIGHT\", GetSysColor(COLOR_3DLIGHT));\n+    putColor(properties, \"Windows.SysColor.COLOR_3DSHADOW\", GetSysColor(COLOR_3DSHADOW));\n+    putColor(properties, \"Windows.SysColor.COLOR_ACTIVEBORDER\", GetSysColor(COLOR_ACTIVEBORDER));\n+    putColor(properties, \"Windows.SysColor.COLOR_ACTIVECAPTION\", GetSysColor(COLOR_ACTIVECAPTION));\n+    putColor(properties, \"Windows.SysColor.COLOR_APPWORKSPACE\", GetSysColor(COLOR_APPWORKSPACE));\n+    putColor(properties, \"Windows.SysColor.COLOR_BACKGROUND\", GetSysColor(COLOR_BACKGROUND));\n+    putColor(properties, \"Windows.SysColor.COLOR_BTNFACE\", GetSysColor(COLOR_BTNFACE));\n+    putColor(properties, \"Windows.SysColor.COLOR_BTNHIGHLIGHT\", GetSysColor(COLOR_BTNHIGHLIGHT));\n+    putColor(properties, \"Windows.SysColor.COLOR_BTNHILIGHT\", GetSysColor(COLOR_BTNHILIGHT));\n+    putColor(properties, \"Windows.SysColor.COLOR_BTNSHADOW\", GetSysColor(COLOR_BTNSHADOW));\n+    putColor(properties, \"Windows.SysColor.COLOR_BTNTEXT\", GetSysColor(COLOR_BTNTEXT));\n+    putColor(properties, \"Windows.SysColor.COLOR_CAPTIONTEXT\", GetSysColor(COLOR_CAPTIONTEXT));\n+    putColor(properties, \"Windows.SysColor.COLOR_DESKTOP\", GetSysColor(COLOR_DESKTOP));\n+    putColor(properties, \"Windows.SysColor.COLOR_GRADIENTACTIVECAPTION\", GetSysColor(COLOR_GRADIENTACTIVECAPTION));\n+    putColor(properties, \"Windows.SysColor.COLOR_GRADIENTINACTIVECAPTION\", GetSysColor(COLOR_GRADIENTINACTIVECAPTION));\n+    putColor(properties, \"Windows.SysColor.COLOR_GRAYTEXT\", GetSysColor(COLOR_GRAYTEXT));\n+    putColor(properties, \"Windows.SysColor.COLOR_HIGHLIGHT\", GetSysColor(COLOR_HIGHLIGHT));\n+    putColor(properties, \"Windows.SysColor.COLOR_HIGHLIGHTTEXT\", GetSysColor(COLOR_HIGHLIGHTTEXT));\n+    putColor(properties, \"Windows.SysColor.COLOR_HOTLIGHT\", GetSysColor(COLOR_HOTLIGHT));\n+    putColor(properties, \"Windows.SysColor.COLOR_INACTIVEBORDER\", GetSysColor(COLOR_INACTIVEBORDER));\n+    putColor(properties, \"Windows.SysColor.COLOR_INACTIVECAPTION\", GetSysColor(COLOR_INACTIVECAPTION));\n+    putColor(properties, \"Windows.SysColor.COLOR_INACTIVECAPTIONTEXT\", GetSysColor(COLOR_INACTIVECAPTIONTEXT));\n+    putColor(properties, \"Windows.SysColor.COLOR_INFOBK\", GetSysColor(COLOR_INFOBK));\n+    putColor(properties, \"Windows.SysColor.COLOR_INFOTEXT\", GetSysColor(COLOR_INFOTEXT));\n+    putColor(properties, \"Windows.SysColor.COLOR_MENU\", GetSysColor(COLOR_MENU));\n+    putColor(properties, \"Windows.SysColor.COLOR_MENUHILIGHT\", GetSysColor(COLOR_MENUHILIGHT));\n+    putColor(properties, \"Windows.SysColor.COLOR_MENUBAR\", GetSysColor(COLOR_MENUBAR));\n+    putColor(properties, \"Windows.SysColor.COLOR_MENUTEXT\", GetSysColor(COLOR_MENUTEXT));\n+    putColor(properties, \"Windows.SysColor.COLOR_SCROLLBAR\", GetSysColor(COLOR_SCROLLBAR));\n+    putColor(properties, \"Windows.SysColor.COLOR_WINDOW\", GetSysColor(COLOR_WINDOW));\n+    putColor(properties, \"Windows.SysColor.COLOR_WINDOWFRAME\", GetSysColor(COLOR_WINDOWFRAME));\n+    putColor(properties, \"Windows.SysColor.COLOR_WINDOWTEXT\", GetSysColor(COLOR_WINDOWTEXT));\n+}\n+\n+void PlatformSupport::queryUIColors(jobject properties) const\n+{\n+    if (!isRoActivationSupported()) {\n+        return;\n+    }\n+\n+    try {\n+        ComPtr<IUISettings> settings;\n+        RO_CHECKED(\"RoActivateInstance\",\n+                   RoActivateInstance(hstring(\"Windows.UI.ViewManagement.UISettings\"), (IInspectable**)&settings));\n+\n+        ComPtr<IUISettings3> settings3;\n+        RO_CHECKED(\"IUISettings::QueryInterface<IUISettings3>\",\n+                   settings->QueryInterface<IUISettings3>(&settings3));\n+\n+        Color background, foreground, accentDark3, accentDark2, accentDark1, accent,\n+              accentLight1, accentLight2, accentLight3;\n+\n+        settings3->GetColorValue(UIColorType::UIColorType_Background, &background);\n+        settings3->GetColorValue(UIColorType::UIColorType_Foreground, &foreground);\n+        settings3->GetColorValue(UIColorType::UIColorType_AccentDark3, &accentDark3);\n+        settings3->GetColorValue(UIColorType::UIColorType_AccentDark2, &accentDark2);\n+        settings3->GetColorValue(UIColorType::UIColorType_AccentDark1, &accentDark1);\n+        settings3->GetColorValue(UIColorType::UIColorType_Accent, &accent);\n+        settings3->GetColorValue(UIColorType::UIColorType_AccentLight1, &accentLight1);\n+        settings3->GetColorValue(UIColorType::UIColorType_AccentLight2, &accentLight2);\n+        settings3->GetColorValue(UIColorType::UIColorType_AccentLight3, &accentLight3);\n+\n+        putColor(properties, \"Windows.UIColor.Background\", background);\n+        putColor(properties, \"Windows.UIColor.Foreground\", foreground);\n+        putColor(properties, \"Windows.UIColor.AccentDark3\", accentDark3);\n+        putColor(properties, \"Windows.UIColor.AccentDark2\", accentDark2);\n+        putColor(properties, \"Windows.UIColor.AccentDark1\", accentDark1);\n+        putColor(properties, \"Windows.UIColor.Accent\", accent);\n+        putColor(properties, \"Windows.UIColor.AccentLight1\", accentLight1);\n+        putColor(properties, \"Windows.UIColor.AccentLight2\", accentLight2);\n+        putColor(properties, \"Windows.UIColor.AccentLight3\", accentLight3);\n+    } catch (RoException const&) {\n+        \/\/ If an activation exception occurs, it probably means that we're on a Windows system\n+        \/\/ that doesn't support the UISettings API. This is not a problem, it simply means that\n+        \/\/ we don't report the UISettings properties back to the JavaFX application.\n+        return;\n+    }\n+}\n+\n+void PlatformSupport::putString(jobject properties, const char* key, const char* value) const\n+{\n+    env->CallObjectMethod(properties, javaIDs.Map.put,\n+        env->NewStringUTF(key),\n+        value != NULL ? env->NewStringUTF(value) : NULL);\n+}\n+\n+void PlatformSupport::putString(jobject properties, const char* key, const wchar_t* value) const\n+{\n+    env->CallObjectMethod(properties, javaIDs.Map.put,\n+        env->NewStringUTF(key),\n+        value != NULL ? env->NewString((jchar*)value, wcslen(value)) : NULL);\n+}\n+\n+void PlatformSupport::putBoolean(jobject properties, const char* key, const bool value) const\n+{\n+    env->CallObjectMethod(properties, javaIDs.Map.put,\n+        env->NewStringUTF(key),\n+        value ? env->GetStaticObjectField(javaClasses.Boolean, javaIDs.Boolean.trueID) :\n+                env->GetStaticObjectField(javaClasses.Boolean, javaIDs.Boolean.falseID));\n+}\n+\n+void PlatformSupport::putColor(jobject properties, const char* colorName, int colorValue) const\n+{\n+    env->CallObjectMethod(properties, javaIDs.Map.put,\n+        env->NewStringUTF(colorName),\n+        env->CallStaticObjectMethod(\n+            javaClasses.Color, javaIDs.Color.rgb,\n+            GetRValue(colorValue), GetGValue(colorValue), GetBValue(colorValue), 1.0));\n+}\n+\n+void PlatformSupport::putColor(jobject properties, const char* colorName, Color colorValue) const\n+{\n+    env->CallObjectMethod(properties, javaIDs.Map.put,\n+        env->NewStringUTF(colorName),\n+        env->CallStaticObjectMethod(\n+            javaClasses.Color, javaIDs.Color.rgb,\n+            colorValue.R, colorValue.G, colorValue.B, (double)colorValue.A \/ 255.0));\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/PlatformSupport.cpp","additions":262,"deletions":0,"binary":false,"changes":262,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#pragma once\n+\n+#include <common.h>\n+\n+namespace ABI { namespace Windows { namespace UI { struct Color; } } }\n+\n+class PlatformSupport final\n+{\n+public:\n+    PlatformSupport(JNIEnv*);\n+    ~PlatformSupport() = default;\n+    PlatformSupport(PlatformSupport const&) = delete;\n+    PlatformSupport& operator=(PlatformSupport const&) = delete;\n+\n+    \/**\n+     * Collect all platform preferences and return them as a new java\/util\/Map.\n+     *\/\n+    jobject collectPreferences() const;\n+\n+    \/**\n+     * Collect all platform preferences and notify the JavaFX application when a preference has changed.\n+     * The change notification includes all preferences, not only the changed preferences.\n+     *\/\n+    bool updatePreferences(jobject application) const;\n+\n+private:\n+    JNIEnv* env;\n+    bool initialized;\n+    mutable JGlobalRef<jobject> preferences;\n+\n+    struct {\n+        JGlobalRef<jclass> Boolean;\n+        JGlobalRef<jclass> Object;\n+        JGlobalRef<jclass> Collections;\n+        JGlobalRef<jclass> Map;\n+        JGlobalRef<jclass> HashMap;\n+        JGlobalRef<jclass> Color;\n+    } javaClasses;\n+\n+    void querySystemColors(jobject properties) const;\n+    void queryHighContrastScheme(jobject properties) const;\n+    void queryUIColors(jobject properties) const;\n+\n+    void putString(jobject properties, const char* key, const char* value) const;\n+    void putString(jobject properties, const char* key, const wchar_t* value) const;\n+    void putBoolean(jobject properties, const char* key, const bool value) const;\n+    void putColor(jobject properties, const char* colorName, int colorValue) const;\n+    void putColor(jobject properties, const char* colorName, ABI::Windows::UI::Color colorValue) const;\n+};\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/PlatformSupport.h","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -1,188 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include \"common.h\"\n-#include \"ThemeSupport.h\"\n-#include \"RoActivationSupport.h\"\n-#include <windows.ui.viewmanagement.h>\n-\n-using namespace Microsoft::WRL;\n-using namespace ABI::Windows::UI;\n-using namespace ABI::Windows::UI::ViewManagement;\n-\n-ThemeSupport::ThemeSupport(JNIEnv* env) :\n-    env_(env),\n-    mapClass_((jclass)env->FindClass(\"java\/util\/Map\")),\n-    colorClass_((jclass)env->FindClass(\"javafx\/scene\/paint\/Color\")),\n-    booleanClass_((jclass)env->FindClass(\"java\/lang\/Boolean\"))\n-{\n-    putMethod_ = env->GetMethodID(mapClass_, \"put\", \"(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;\");\n-    rgbMethod_ = env->GetStaticMethodID(colorClass_, \"rgb\", \"(IIID)Ljavafx\/scene\/paint\/Color;\");\n-    trueField_ = env->GetStaticFieldID(booleanClass_, \"TRUE\", \"Ljava\/lang\/Boolean;\");\n-    falseField_ = env->GetStaticFieldID(booleanClass_, \"FALSE\", \"Ljava\/lang\/Boolean;\");\n-}\n-\n-ThemeSupport::~ThemeSupport() {\n-    env_->DeleteLocalRef(mapClass_);\n-    env_->DeleteLocalRef(colorClass_);\n-    env_->DeleteLocalRef(booleanClass_);\n-}\n-\n-void ThemeSupport::queryHighContrastScheme(jobject properties) const\n-{\n-    HIGHCONTRAST contrastInfo;\n-    contrastInfo.cbSize = sizeof(HIGHCONTRAST);\n-    ::SystemParametersInfo(SPI_GETHIGHCONTRAST, sizeof(HIGHCONTRAST), &contrastInfo, 0);\n-    if (contrastInfo.dwFlags & HCF_HIGHCONTRASTON) {\n-        putBoolean(properties, \"Windows.SPI.HighContrastOn\", true);\n-        putString(properties, \"Windows.SPI.HighContrastColorScheme\", contrastInfo.lpszDefaultScheme);\n-    } else {\n-        putBoolean(properties, \"Windows.SPI.HighContrastOn\", false);\n-        putString(properties, \"Windows.SPI.HighContrastColorScheme\", (const char*)NULL);\n-    }\n-}\n-\n-void ThemeSupport::querySystemColors(jobject properties) const\n-{\n-    putColor(properties, \"Windows.SysColor.COLOR_3DDKSHADOW\", GetSysColor(COLOR_3DDKSHADOW));\n-    putColor(properties, \"Windows.SysColor.COLOR_3DFACE\", GetSysColor(COLOR_3DFACE));\n-    putColor(properties, \"Windows.SysColor.COLOR_3DHIGHLIGHT\", GetSysColor(COLOR_3DHIGHLIGHT));\n-    putColor(properties, \"Windows.SysColor.COLOR_3DHILIGHT\", GetSysColor(COLOR_3DHILIGHT));\n-    putColor(properties, \"Windows.SysColor.COLOR_3DLIGHT\", GetSysColor(COLOR_3DLIGHT));\n-    putColor(properties, \"Windows.SysColor.COLOR_3DSHADOW\", GetSysColor(COLOR_3DSHADOW));\n-    putColor(properties, \"Windows.SysColor.COLOR_ACTIVEBORDER\", GetSysColor(COLOR_ACTIVEBORDER));\n-    putColor(properties, \"Windows.SysColor.COLOR_ACTIVECAPTION\", GetSysColor(COLOR_ACTIVECAPTION));\n-    putColor(properties, \"Windows.SysColor.COLOR_APPWORKSPACE\", GetSysColor(COLOR_APPWORKSPACE));\n-    putColor(properties, \"Windows.SysColor.COLOR_BACKGROUND\", GetSysColor(COLOR_BACKGROUND));\n-    putColor(properties, \"Windows.SysColor.COLOR_BTNFACE\", GetSysColor(COLOR_BTNFACE));\n-    putColor(properties, \"Windows.SysColor.COLOR_BTNHIGHLIGHT\", GetSysColor(COLOR_BTNHIGHLIGHT));\n-    putColor(properties, \"Windows.SysColor.COLOR_BTNHILIGHT\", GetSysColor(COLOR_BTNHILIGHT));\n-    putColor(properties, \"Windows.SysColor.COLOR_BTNSHADOW\", GetSysColor(COLOR_BTNSHADOW));\n-    putColor(properties, \"Windows.SysColor.COLOR_BTNTEXT\", GetSysColor(COLOR_BTNTEXT));\n-    putColor(properties, \"Windows.SysColor.COLOR_CAPTIONTEXT\", GetSysColor(COLOR_CAPTIONTEXT));\n-    putColor(properties, \"Windows.SysColor.COLOR_DESKTOP\", GetSysColor(COLOR_DESKTOP));\n-    putColor(properties, \"Windows.SysColor.COLOR_GRADIENTACTIVECAPTION\", GetSysColor(COLOR_GRADIENTACTIVECAPTION));\n-    putColor(properties, \"Windows.SysColor.COLOR_GRADIENTINACTIVECAPTION\", GetSysColor(COLOR_GRADIENTINACTIVECAPTION));\n-    putColor(properties, \"Windows.SysColor.COLOR_GRAYTEXT\", GetSysColor(COLOR_GRAYTEXT));\n-    putColor(properties, \"Windows.SysColor.COLOR_HIGHLIGHT\", GetSysColor(COLOR_HIGHLIGHT));\n-    putColor(properties, \"Windows.SysColor.COLOR_HIGHLIGHTTEXT\", GetSysColor(COLOR_HIGHLIGHTTEXT));\n-    putColor(properties, \"Windows.SysColor.COLOR_HOTLIGHT\", GetSysColor(COLOR_HOTLIGHT));\n-    putColor(properties, \"Windows.SysColor.COLOR_INACTIVEBORDER\", GetSysColor(COLOR_INACTIVEBORDER));\n-    putColor(properties, \"Windows.SysColor.COLOR_INACTIVECAPTION\", GetSysColor(COLOR_INACTIVECAPTION));\n-    putColor(properties, \"Windows.SysColor.COLOR_INACTIVECAPTIONTEXT\", GetSysColor(COLOR_INACTIVECAPTIONTEXT));\n-    putColor(properties, \"Windows.SysColor.COLOR_INFOBK\", GetSysColor(COLOR_INFOBK));\n-    putColor(properties, \"Windows.SysColor.COLOR_INFOTEXT\", GetSysColor(COLOR_INFOTEXT));\n-    putColor(properties, \"Windows.SysColor.COLOR_MENU\", GetSysColor(COLOR_MENU));\n-    putColor(properties, \"Windows.SysColor.COLOR_MENUHILIGHT\", GetSysColor(COLOR_MENUHILIGHT));\n-    putColor(properties, \"Windows.SysColor.COLOR_MENUBAR\", GetSysColor(COLOR_MENUBAR));\n-    putColor(properties, \"Windows.SysColor.COLOR_MENUTEXT\", GetSysColor(COLOR_MENUTEXT));\n-    putColor(properties, \"Windows.SysColor.COLOR_SCROLLBAR\", GetSysColor(COLOR_SCROLLBAR));\n-    putColor(properties, \"Windows.SysColor.COLOR_WINDOW\", GetSysColor(COLOR_WINDOW));\n-    putColor(properties, \"Windows.SysColor.COLOR_WINDOWFRAME\", GetSysColor(COLOR_WINDOWFRAME));\n-    putColor(properties, \"Windows.SysColor.COLOR_WINDOWTEXT\", GetSysColor(COLOR_WINDOWTEXT));\n-}\n-\n-void ThemeSupport::queryUIColors(jobject properties) const\n-{\n-    if (!isRoActivationSupported()) {\n-        return;\n-    }\n-\n-    try {\n-        ComPtr<IUISettings> settings;\n-        RO_CHECKED(\"RoActivateInstance\",\n-                   RoActivateInstance(hstring(\"Windows.UI.ViewManagement.UISettings\"), (IInspectable**)&settings));\n-\n-        ComPtr<IUISettings3> settings3;\n-        RO_CHECKED(\"IUISettings::QueryInterface<IUISettings3>\",\n-                   settings->QueryInterface<IUISettings3>(&settings3));\n-\n-        Color background, foreground, accentDark3, accentDark2, accentDark1, accent,\n-              accentLight1, accentLight2, accentLight3;\n-\n-        settings3->GetColorValue(UIColorType::UIColorType_Background, &background);\n-        settings3->GetColorValue(UIColorType::UIColorType_Foreground, &foreground);\n-        settings3->GetColorValue(UIColorType::UIColorType_AccentDark3, &accentDark3);\n-        settings3->GetColorValue(UIColorType::UIColorType_AccentDark2, &accentDark2);\n-        settings3->GetColorValue(UIColorType::UIColorType_AccentDark1, &accentDark1);\n-        settings3->GetColorValue(UIColorType::UIColorType_Accent, &accent);\n-        settings3->GetColorValue(UIColorType::UIColorType_AccentLight1, &accentLight1);\n-        settings3->GetColorValue(UIColorType::UIColorType_AccentLight2, &accentLight2);\n-        settings3->GetColorValue(UIColorType::UIColorType_AccentLight3, &accentLight3);\n-\n-        putColor(properties, \"Windows.UIColor.Background\", background);\n-        putColor(properties, \"Windows.UIColor.Foreground\", foreground);\n-        putColor(properties, \"Windows.UIColor.AccentDark3\", accentDark3);\n-        putColor(properties, \"Windows.UIColor.AccentDark2\", accentDark2);\n-        putColor(properties, \"Windows.UIColor.AccentDark1\", accentDark1);\n-        putColor(properties, \"Windows.UIColor.Accent\", accent);\n-        putColor(properties, \"Windows.UIColor.AccentLight1\", accentLight1);\n-        putColor(properties, \"Windows.UIColor.AccentLight2\", accentLight2);\n-        putColor(properties, \"Windows.UIColor.AccentLight3\", accentLight3);\n-    } catch (RoException const& ex) {\n-        \/\/ If an activation exception occurs, it probably means that we're on a Windows system\n-        \/\/ that doesn't support the UISettings API. This is not a problem, it simply means that\n-        \/\/ we don't report the UISettings properties back to the JavaFX application.\n-        return;\n-    }\n-}\n-\n-void ThemeSupport::putString(jobject properties, const char* key, const char* value) const\n-{\n-    env_->CallObjectMethod(properties, putMethod_,\n-        env_->NewStringUTF(key),\n-        value != NULL ? env_->NewStringUTF(value) : NULL);\n-}\n-\n-void ThemeSupport::putString(jobject properties, const char* key, const wchar_t* value) const\n-{\n-    env_->CallObjectMethod(properties, putMethod_,\n-        env_->NewStringUTF(key),\n-        value != NULL ? env_->NewString((jchar*)value, wcslen(value)) : NULL);\n-}\n-\n-void ThemeSupport::putBoolean(jobject properties, const char* key, const bool value) const\n-{\n-    env_->CallObjectMethod(properties, putMethod_,\n-        env_->NewStringUTF(key),\n-        value ? env_->GetStaticObjectField(booleanClass_, trueField_) :\n-                env_->GetStaticObjectField(booleanClass_, falseField_));\n-}\n-\n-void ThemeSupport::putColor(jobject properties, const char* colorName, int colorValue) const\n-{\n-    env_->CallObjectMethod(properties, putMethod_,\n-        env_->NewStringUTF(colorName),\n-        env_->CallStaticObjectMethod(\n-            colorClass_, rgbMethod_, GetRValue(colorValue), GetGValue(colorValue), GetBValue(colorValue), 1.0));\n-}\n-\n-void ThemeSupport::putColor(jobject properties, const char* colorName, Color colorValue) const\n-{\n-    env_->CallObjectMethod(properties, putMethod_,\n-        env_->NewStringUTF(colorName),\n-        env_->CallStaticObjectMethod(\n-            colorClass_, rgbMethod_, colorValue.R, colorValue.G, colorValue.B, (double)colorValue.A \/ 255.0));\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/ThemeSupport.cpp","additions":0,"deletions":188,"binary":false,"changes":188,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#pragma once\n-\n-#include <jni.h>\n-\n-namespace ABI { namespace Windows { namespace UI { struct Color; } } }\n-\n-class ThemeSupport final\n-{\n-public:\n-    ThemeSupport(JNIEnv*);\n-    ~ThemeSupport();\n-    ThemeSupport(ThemeSupport const&) = delete;\n-    ThemeSupport& operator=(ThemeSupport const&) = delete;\n-\n-    void querySystemColors(jobject properties) const;\n-    void queryHighContrastScheme(jobject properties) const;\n-    void queryUIColors(jobject properties) const;\n-\n-private:\n-    JNIEnv* env_;\n-    jclass mapClass_;\n-    jclass colorClass_;\n-    jclass booleanClass_;\n-    jmethodID putMethod_;\n-    jmethodID rgbMethod_;\n-    jfieldID trueField_;\n-    jfieldID falseField_;\n-\n-    void putString(jobject properties, const char* key, const char* value) const;\n-    void putString(jobject properties, const char* key, const wchar_t* value) const;\n-    void putBoolean(jobject properties, const char* key, const bool value) const;\n-    void putColor(jobject properties, const char* colorName, int colorValue) const;\n-    void putColor(jobject properties, const char* colorName, ABI::Windows::UI::Color colorValue) const;\n-};\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/ThemeSupport.h","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -291,3 +291,3 @@\n-    operator T() { return m_localJRef; }\n-    operator bool() { return NULL!=m_localJRef; }\n-    bool operator !() { return NULL==m_localJRef; }\n+    operator T() const { return m_localJRef; }\n+    operator bool() const { return NULL!=m_localJRef; }\n+    bool operator !() const { return NULL==m_localJRef; }\n@@ -329,3 +329,3 @@\n-    operator T() { return m_globalJRef; }\n-    operator bool() { return NULL!=m_globalJRef; }\n-    bool operator !() { return NULL==m_globalJRef; }\n+    operator T() const { return m_globalJRef; }\n+    operator bool() const { return NULL!=m_globalJRef; }\n+    bool operator !() const { return NULL==m_globalJRef; }\n@@ -508,0 +508,19 @@\n+    struct {\n+        jmethodID rgb;\n+    } Color;\n+    struct {\n+        jfieldID trueID;\n+        jfieldID falseID;\n+    } Boolean;\n+    struct {\n+        jmethodID equals;\n+    } Object;\n+    struct {\n+        jmethodID unmodifiableMap;\n+    } Collections;\n+    struct {\n+        jmethodID put;\n+    } Map;\n+    struct {\n+        jmethodID init;\n+    } HashMap;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/Utils.h","additions":25,"deletions":6,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import java.util.Map;\n+import java.util.stream.Collectors;\n@@ -47,1 +49,1 @@\n-            throw new AssertionError(\"Changed platform preferences were not correctly reported\");\n+            throw new AssertionError(\"Platform preferences were not correctly reported\");\n@@ -66,0 +68,2 @@\n+        textArea.setText(\"preferences = \" + formatPrefs(Platform.getPreferences()));\n+\n@@ -67,1 +71,1 @@\n-            (preferences, changed) -> textArea.setText(textArea.getText() + changed + System.lineSeparator()));\n+            (preferences, changed) -> textArea.setText(textArea.getText() + \"changed = \" + formatPrefs(changed)));\n@@ -77,0 +81,9 @@\n+    private static String formatPrefs(Map<String, Object> map) {\n+        String entries = map.entrySet().stream()\n+                .sorted(Map.Entry.comparingByKey())\n+                .map(Object::toString)\n+                .collect(Collectors.joining(\"\\r\\n\\t\"));\n+\n+        return \"{\\r\\n\\t\" + entries + \"\\r\\n}\\r\\n\";\n+    }\n+\n","filename":"tests\/manual\/events\/PlatformPreferencesTest.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"}]}