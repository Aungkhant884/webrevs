{"files":[{"patch":"@@ -41,1 +41,1 @@\n-<p>Style themes can be applied using the {@link javafx.application.Application#setStyleTheme} method:<\/p>\n+<p>Style themes can be applied using the {@link javafx.application.Application#setUserAgentStyleTheme} method:<\/p>\n@@ -46,1 +46,1 @@\n-            setStyleTheme(new CaspianTheme());\n+            setUserAgentStyleTheme(new CaspianTheme());\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/theme\/package.html","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-        originalTheme = platformThemeProperty().get();\n+        originalTheme = platformUserAgentStyleThemeProperty().get();\n@@ -51,1 +51,1 @@\n-        platformThemeProperty().set(originalTheme);\n+        platformUserAgentStyleThemeProperty().set(originalTheme);\n@@ -70,1 +70,1 @@\n-        platformThemeProperty().set(null);\n+        platformUserAgentStyleThemeProperty().set(null);\n@@ -73,1 +73,1 @@\n-        assertNull(platformThemeProperty().get());\n+        assertNull(platformUserAgentStyleThemeProperty().get());\n@@ -76,1 +76,1 @@\n-        assertEquals(\"CaspianTheme\", platformThemeProperty().get().getClass().getSimpleName());\n+        assertEquals(\"CaspianTheme\", platformUserAgentStyleThemeProperty().get().getClass().getSimpleName());\n@@ -79,1 +79,1 @@\n-        assertEquals(\"ModenaTheme\", platformThemeProperty().get().getClass().getSimpleName());\n+        assertEquals(\"ModenaTheme\", platformUserAgentStyleThemeProperty().get().getClass().getSimpleName());\n@@ -89,1 +89,1 @@\n-        platformThemeProperty().set(new CaspianTheme());\n+        platformUserAgentStyleThemeProperty().set(new CaspianTheme());\n@@ -91,1 +91,1 @@\n-        assertTrue(platformThemeProperty().get() instanceof CaspianTheme);\n+        assertTrue(platformUserAgentStyleThemeProperty().get() instanceof CaspianTheme);\n@@ -94,1 +94,1 @@\n-        platformThemeProperty().set(new ModenaTheme());\n+        platformUserAgentStyleThemeProperty().set(new ModenaTheme());\n@@ -96,1 +96,1 @@\n-        assertTrue(platformThemeProperty().get() instanceof ModenaTheme);\n+        assertTrue(platformUserAgentStyleThemeProperty().get() instanceof ModenaTheme);\n@@ -106,1 +106,1 @@\n-        platformThemeProperty().set(new CaspianTheme());\n+        platformUserAgentStyleThemeProperty().set(new CaspianTheme());\n@@ -108,1 +108,1 @@\n-        assertTrue(platformThemeProperty().get() instanceof CaspianTheme);\n+        assertTrue(platformUserAgentStyleThemeProperty().get() instanceof CaspianTheme);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/theme\/BuiltinThemeTest.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -252,1 +252,2 @@\n-          <li><a href=\"#introstylesheets\">Scene, Parent and SubScene Stylesheets<\/a><\/li>\n+          <li><a href=\"#introstylesheets\">Stylesheets and inline styles<\/a><\/li>\n+          <li><a href=\"#introstyletheme\">Style themes<\/a><\/li>\n@@ -552,1 +553,1 @@\n-    <h3><a id=\"introstylesheets\">Scene, Parent and SubScene Stylesheets<\/a><\/h3>\n+    <h3><a id=\"introstylesheets\">Stylesheets and inline styles<\/a><\/h3>\n@@ -554,11 +555,5 @@\n-        CSS styles can come from style sheets or inline styles. Style sheets are\n-        loaded from the URLs specified in the\n-        <a href=\"..\/..\/..\/javafx\/scene\/Scene.html#getStylesheets--\">getStylesheets<\/a>\n-        property of the Scene object. If the scene&#8209;graph contains a Control, a\n-        default user agent style sheet is loaded. Inline styles are specified via\n-        the Node <span style=\"font-weight: bold;\">setStyle<\/span> API. Inline\n-        styles are analogous to the style=\"...\" attribute of an HTML element.\n-        Styles loaded from a Scene's style sheets take precedence over selectors from\n-        the user agent style sheet. Inline styles take precedence over\n-        styles originating elsewhere. The precedence order of style selectors can be\n-        modified using \"!important\" in a style declaration.\n+        CSS styles are specified as inline styles or in stylesheets.\n+        Inline styles have the highest priority in the CSS cascade, and can be set using\n+        <a href=\"..\/..\/..\/javafx\/scene\/Node.html#setStyle--\">Node.setStyle<\/a>.\n+        An inline style can only contain CSS declarations (property\/value pairs).\n+        This is analogous to the <code>style=\"...\"<\/code> attribute of an HTML element.\n@@ -567,7 +562,9 @@\n-        Beginning with JavaFX 2.1, the Parent class has a\n-        <a href=\"..\/..\/..\/javafx\/scene\/Parent.html#getStylesheets--\">getStylesheets<\/a> property,\n-        allowing style sheets to be set on a container. This allows for one branch\n-        of of the scene&#8209;graph to have a distinct set of styles. Any instance of\n-        Parent can have style sheets. A child will take its styles from its own\n-        inline styles, the style sheets of all its ancestors, and any style sheets\n-        from the Scene.\n+        Stylesheets can be added to a JavaFX scene graph using a variety of APIs (see the table below).\n+        Depending on the API, a stylesheet is either classified as an <span style=\"font-weight: bold;\">author<\/span>\n+        stylesheet or a <span style=\"font-weight: bold;\">user-agent<\/span> stylesheet.\n+        Property values specified in author stylesheets have a higher precedence in the CSS cascade than\n+        property values set from code, while property values specified in user-agent stylesheets have a\n+        lower precedence than property values set from code.\n+        This makes user-agent stylesheets particularly useful to define the general appearance of an\n+        application, while allowing user code to override individual property values to customize a\n+        particular control in the scene graph.\n@@ -576,6 +573,66 @@\n-        Beginning with JavaFX 8u20, the Scene class has a\n-        <a href=\"..\/..\/..\/javafx\/scene\/Scene.html#getUserAgentStylesheet--\">getUserAgentStylesheet<\/a> property,\n-        allowing a user&#8209;style sheet to be set on a Scene. This allows a Scene\n-        to have a set of user&#8209;agent styles distinct from the platform default. When a user&#8209;agent\n-        stylesheet is set on a Scene, the user&#8209;agent styles are used instead of the styles from the\n-        platform default user&#8209;agent stylesheet.\n+        Another important difference between an author stylesheet and a user-agent stylesheet is whether\n+        the stylesheet is included in the CSS cascade for a styleable node. Since user-agent stylesheets\n+        specify the general appearance of an application, only the user-agent stylesheet closest to the\n+        styleable node is included in the CSS cascade; all other user-agent stylesheets are discarded.\n+        A notable exception to this rule is the stylesheet returned from\n+        <a href=\"..\/..\/..\/javafx\/scene\/layout\/Region.html#getUserAgentStylesheet--\">Region.getUserAgentStylesheet<\/a>,\n+        which does not cause the next-closest user-agent stylesheet to be discarded. This allows control\n+        authors to add a user-agent stylesheet that is only relevant for the particular control, without\n+        discarding the user-agent stylesheet for the rest of the application.\n+        <table class=\"cssmisctable\">\n+            <caption>Styling APIs<br\/>(sorted by order of precedence, descending)<\/caption>\n+            <thead>\n+                <tr>\n+                    <th scope=\"col\"><\/th>\n+                    <th scope=\"col\">API<\/th>\n+                    <th scope=\"col\"><a href=\"..\/..\/..\/javafx\/css\/StyleOrigin.html\">StyleOrigin<\/a><\/th>\n+                <\/tr>\n+            <\/thead>\n+            <tbody>\n+                <tr>\n+                    <th scope=\"row\">1<\/th>\n+                    <th><a href=\"..\/..\/..\/javafx\/scene\/Node.html#setStyle--\">Node.style<\/a><\/th>\n+                    <td><a href=\"..\/..\/..\/javafx\/css\/StyleOrigin.html#INLINE--\">inline<\/a><\/td>\n+                <\/tr>\n+                <tr>\n+                    <th scope=\"row\">2<\/th>\n+                    <td><a href=\"..\/..\/..\/javafx\/scene\/Parent.html#getStylesheets--\">Parent.getStylesheets<\/a><\/td>\n+                    <td><a href=\"..\/..\/..\/javafx\/css\/StyleOrigin.html#AUTHOR--\">author<\/a><\/td>\n+                <\/tr>\n+                <tr>\n+                    <th scope=\"row\">3<\/th>\n+                    <td><a href=\"..\/..\/..\/javafx\/scene\/Scene.html#getStylesheets--\">Scene.getStylesheets<\/a><\/td>\n+                    <td><a href=\"..\/..\/..\/javafx\/css\/StyleOrigin.html#AUTHOR--\">author<\/a><\/td>\n+                <\/tr>\n+                <tr>\n+                    <th scope=\"row\">4<\/th>\n+                    <td><a href=\"..\/..\/..\/javafx\/css\/StyleableProperty.html\">StyleableProperty<\/a> values set from code<\/td>\n+                    <td><a href=\"..\/..\/..\/javafx\/css\/StyleOrigin.html#USER--\">user<\/a><\/td>\n+                <\/tr>\n+                <tr>\n+                    <th scope=\"row\">5<\/th>\n+                    <td><a href=\"..\/..\/..\/javafx\/scene\/layout\/Region.html#getUserAgentStylesheet--\">Region.getUserAgentStylesheet<\/a><\/td>\n+                    <td><a href=\"..\/..\/..\/javafx\/css\/StyleOrigin.html#USER_AGENT--\">user-agent<\/a><\/td>\n+                <\/tr>\n+                <tr>\n+                    <th scope=\"row\">6<\/th>\n+                    <td><a href=\"..\/..\/..\/javafx\/scene\/SubScene.html#userAgentStylesheetProperty--\">SubScene.userAgentStylesheet<\/a><\/td>\n+                    <td><a href=\"..\/..\/..\/javafx\/css\/StyleOrigin.html#USER_AGENT--\">user-agent<\/a><\/td>\n+                <\/tr>\n+                <tr>\n+                    <th scope=\"row\">7<\/th>\n+                    <td><a href=\"..\/..\/..\/javafx\/scene\/Scene.html#userAgentStylesheetProperty--\">Scene.userAgentStylesheet<\/a><\/td>\n+                    <td><a href=\"..\/..\/..\/javafx\/css\/StyleOrigin.html#USER_AGENT--\">user-agent<\/a><\/td>\n+                <\/tr>\n+                <tr>\n+                    <th scope=\"row\">8<\/th>\n+                    <td><a href=\"..\/..\/..\/javafx\/application\/Application.html#userAgentStylesheetProperty--\">Application.userAgentStylesheet<\/a><\/td>\n+                    <td><a href=\"..\/..\/..\/javafx\/css\/StyleOrigin.html#USER_AGENT--\">user-agent<\/a><\/td>\n+                <\/tr>\n+                <tr>\n+                    <th scope=\"row\">9<\/th>\n+                    <td><a href=\"..\/..\/..\/javafx\/application\/Application.html#userAgentStyleThemeProperty--\">Application.userAgentStyleTheme<\/a><\/td>\n+                    <td><a href=\"..\/..\/..\/javafx\/css\/StyleOrigin.html#USER_AGENT--\">user-agent<\/a><\/td>\n+                <\/tr>\n+            <\/tbody>\n+        <\/table>\n@@ -583,0 +640,1 @@\n+    <h3><a id=\"introstyletheme\">Style themes<\/a><\/h3>\n@@ -584,7 +642,19 @@\n-        Beginning with JavaFX 8u20, the SubScene class has a\n-        <a href=\"..\/..\/..\/javafx\/scene\/SubScene.html#getUserAgentStylesheet--\">getUserAgentStylesheet<\/a> property,\n-        allowing a user&#8209;style sheet to be set on a SubScene. This allows a SubScene\n-        of the scene&#8209;graph to have set of user&#8209;agent styles distinct from the platform default\n-        or from the Scene in which the SubScene is contained. When a user&#8209;agent\n-        stylesheet is set on a SubScene, the user&#8209;agent styles are used instead of the styles from the\n-        platform default user&#8209;agent stylesheet or any user&#8209;agent stylesheet set on the Scene.\n+        <a href=\"..\/..\/..\/javafx\/css\/StyleTheme.html\">StyleThemes<\/a> are collections of user-agent\n+        stylesheets that comprise a single application-wide theme. All stylesheets that are part of\n+        a style theme are classified as user-agent stylesheets.\n+        JavaFX ships with two themes, <a href=\"..\/..\/..\/javafx\/scene\/control\/theme\/CaspianTheme.html\">Caspian<\/a>\n+        and <a href=\"..\/..\/..\/javafx\/scene\/control\/theme\/ModenaTheme.html\">Modena<\/a>, which are\n+        implemented as extensible style themes.\n+        The list of stylesheets that comprise a style theme can be modified while the application is\n+        running, enabling applications to create dynamic themes that respond to changing user preferences.\n+    <\/p>\n+    <p>\n+        The application-wide style theme is set using the\n+        <a href=\"..\/..\/..\/javafx\/application\/Application.html#userAgentStyleThemeProperty--\">Application.userAgentStyleTheme<\/a>\n+        property. Note that a style theme has the lowest precedence in the CSS cascade, and can be\n+        replaced by user-agent stylesheets set for any of the following properties:\n+        <ol>\n+            <li><a href=\"..\/..\/..\/javafx\/scene\/SubScene.html#userAgentStylesheetProperty--\">SubScene.userAgentStylesheet<\/a><\/li>\n+            <li><a href=\"..\/..\/..\/javafx\/scene\/Scene.html#userAgentStylesheetProperty--\">Scene.userAgentStylesheet<\/a><\/li>\n+            <li><a href=\"..\/..\/..\/javafx\/scene\/Application.html#userAgentStylesheetProperty--\">Application.userAgentStylesheet<\/a><\/li>\n+        <\/ol>\n@@ -592,14 +662,0 @@\n-    <p>It is important to note that styles from a stylesheet added to a Scene or Parent, do not affect\n-        a SubScene which is a child or descendent of the Scene or Parent. Unless a user&#8209;agent has\n-        been set on the SubScene, the SubScene will get styles\n-        from the a Scene's user&#8209;agent stylesheet or the platform user&#8209;agent stylesheet.<\/p>\n-    The implementation allows designers to style an application by using style\n-    sheets to override property values set from code. For example, a call to <code>rectangle.setFill(Color.YELLOW)<\/code>\n-    can be overridden by an inline&#8209;style or a style from an author stylesheet. This has implications for\n-    the cascade; particularly, when does a style from a style sheet override a\n-    value set from code? The JavaFX CSS implementation applies the following\n-    order of precedence: <cite>a style from a user agent style sheet or a style theme has lower\n-    priority than a value set from code, which has lower priority than a Scene\n-    or Parent style sheet. Inline styles have highest precedence. Style sheets\n-    from a Parent instance are considered to be more specific than those styles\n-    from Scene style sheets.<\/cite>\n","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/cssref.html","additions":103,"deletions":47,"binary":false,"changes":150,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import java.util.ArrayList;\n@@ -63,0 +62,1 @@\n+import javafx.beans.property.ObjectPropertyBase;\n@@ -64,2 +64,0 @@\n-import javafx.beans.property.SimpleObjectProperty;\n-import javafx.beans.property.SimpleStringProperty;\n@@ -67,0 +65,1 @@\n+import javafx.beans.property.StringPropertyBase;\n@@ -711,1 +710,1 @@\n-            StyleTheme currentTheme = platformTheme.get();\n+            StyleTheme currentTheme = platformUserAgentStyleTheme.get();\n@@ -721,1 +720,1 @@\n-        if (platformThemeProperty().get() == null) {\n+        if (platformUserAgentStyleThemeProperty().get() == null) {\n@@ -777,1 +776,1 @@\n-    private static final class UserAgentStylesheetProperty extends SimpleStringProperty {\n+    private static final class UserAgentStylesheetProperty extends StringPropertyBase {\n@@ -780,0 +779,10 @@\n+        @Override\n+        public Object getBean() {\n+            return PlatformImpl.class;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return \"platformUserAgentStylesheet\";\n+        }\n+\n@@ -784,1 +793,1 @@\n-                styleThemeChanged(get(), platformTheme.get());\n+                platformUserAgentStyleThemeChanged(get(), platformUserAgentStyleTheme.get());\n@@ -788,1 +797,1 @@\n-                    platformTheme.set(newThemeInstance(builtinTheme));\n+                    platformUserAgentStyleTheme.set(newThemeInstance(builtinTheme));\n@@ -802,1 +811,11 @@\n-    private static final ObjectProperty<StyleTheme> platformTheme = new SimpleObjectProperty<>() {\n+    private static final ObjectProperty<StyleTheme> platformUserAgentStyleTheme = new ObjectPropertyBase<>() {\n+        @Override\n+        public Object getBean() {\n+            return PlatformImpl.class;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return \"platformUserAgentStyleTheme\";\n+        }\n+\n@@ -816,1 +835,1 @@\n-                styleThemeChanged(userAgentStylesheet, get());\n+                platformUserAgentStyleThemeChanged(userAgentStylesheet, get());\n@@ -821,2 +840,2 @@\n-    public static ObjectProperty<StyleTheme> platformThemeProperty() {\n-        return platformTheme;\n+    public static ObjectProperty<StyleTheme> platformUserAgentStyleThemeProperty() {\n+        return platformUserAgentStyleTheme;\n@@ -825,1 +844,1 @@\n-    private static void styleThemeChanged(String userAgentStylesheet, StyleTheme theme) {\n+    private static void platformUserAgentStyleThemeChanged(String userAgentStylesheet, StyleTheme theme) {\n@@ -829,1 +848,1 @@\n-            runLater(() -> styleThemeChanged(userAgentStylesheetCopy, themeCopy));\n+            runLater(() -> platformUserAgentStyleThemeChanged(userAgentStylesheetCopy, themeCopy));\n@@ -861,3 +880,2 @@\n-     * Updates the {@link StyleManager} with a new list of stylesheets that consist of the\n-     * concatenation of the user-agent stylesheet and the list of stylesheets contained in\n-     * the current {@link StyleTheme}.\n+     * Updates the {@link StyleManager} with a new list of stylesheets that consist of the current\n+     * user-agent stylesheet or the list of stylesheets contained in the current {@link StyleTheme}.\n@@ -872,3 +890,4 @@\n-        if (themeStylesheets instanceof ObservableList<String> list) {\n-            list.removeListener(themeStylesheetsChanged);\n-        }\n+        if (themeStylesheets != stylesheets) {\n+            if (themeStylesheets instanceof ObservableList<String> list) {\n+                list.removeListener(themeStylesheetsChanged);\n+            }\n@@ -876,1 +895,1 @@\n-        themeStylesheets = stylesheets;\n+            themeStylesheets = stylesheets;\n@@ -878,2 +897,3 @@\n-        if (themeStylesheets instanceof ObservableList<String> list) {\n-            list.addListener(themeStylesheetsChanged);\n+            if (themeStylesheets instanceof ObservableList<String> list) {\n+                list.addListener(themeStylesheetsChanged);\n+            }\n@@ -884,5 +904,2 @@\n-        if (hasUserAgentStylesheet && themeStylesheets != null) {\n-            List<String> list = new ArrayList<>(themeStylesheets.size() + 1);\n-            list.add(userAgentStylesheet);\n-            list.addAll(themeStylesheets);\n-            StyleManager.getInstance().setUserAgentStylesheets(list);\n+        if (hasUserAgentStylesheet) {\n+            StyleManager.getInstance().setUserAgentStylesheets(List.of(userAgentStylesheet));\n@@ -891,2 +908,0 @@\n-        } else if (hasUserAgentStylesheet) {\n-            StyleManager.getInstance().setUserAgentStylesheets(List.of(userAgentStylesheet));\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformImpl.java","additions":45,"deletions":30,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+import javafx.scene.SubScene;\n+import javafx.scene.layout.Region;\n@@ -190,1 +192,1 @@\n-     *             call {@link #setStyleTheme(StyleTheme)} with an instance of\n+     *             call {@link #setUserAgentStyleTheme(StyleTheme)} with an instance of\n@@ -203,1 +205,1 @@\n-     *             call {@link #setStyleTheme(StyleTheme)} with an instance of\n+     *             call {@link #setUserAgentStyleTheme(StyleTheme)} with an instance of\n@@ -507,1 +509,1 @@\n-     * Specifies the user-agent stylesheet of the application.\n+     * Specifies the single user-agent stylesheet of the application.\n@@ -509,4 +511,4 @@\n-     * A user-agent stylesheet is a global stylesheet that can be specified in addition to a\n-     * {@link StyleTheme} and that is implicitly used by all JavaFX nodes in the scene graph.\n-     * It can be used to provide default styling for UI controls and other nodes.\n-     * A user-agent stylesheets has the lowest precedence in the CSS cascade.\n+     * The user-agent stylesheet is a global stylesheet that defines the appearance of the application.\n+     * It has the lowest precedence in the CSS cascade, and can be overridden in the scene graph by\n+     * setting the {@link Scene#userAgentStylesheetProperty() Scene.userAgentStylesheet} or\n+     * {@link SubScene#userAgentStylesheetProperty() SubScene.userAgentStylesheet} property.\n@@ -532,1 +534,1 @@\n-     * or {@code STYLESHEET_MODENA} will also set the value of the {@link #styleThemeProperty() styleTheme}\n+     * or {@code STYLESHEET_MODENA} will also set the value of the {@link #userAgentStyleThemeProperty() styleTheme}\n@@ -536,1 +538,1 @@\n-     *       not be concurrently modified with {@link #styleThemeProperty() styleTheme}.\n+     *       not be concurrently modified with {@link #userAgentStyleThemeProperty() styleTheme}.\n@@ -559,1 +561,1 @@\n-     * Specifies the {@link StyleTheme} of the application.\n+     * Specifies the user-agent {@link StyleTheme} of the application.\n@@ -561,6 +563,8 @@\n-     * {@code StyleTheme} is a collection of stylesheets that define the appearance of the application.\n-     * Like a user-agent stylesheet, a {@code StyleTheme} is implicitly used by all JavaFX nodes in the\n-     * scene graph.\n-     * <p>\n-     * Stylesheets that comprise a {@code StyleTheme} have a higher precedence in the CSS cascade than a\n-     * stylesheet referenced by the {@link #userAgentStylesheetProperty() userAgentStylesheet} property.\n+     * {@code StyleTheme} is a collection of user-agent stylesheets that define the appearance of the application.\n+     * {@code StyleTheme} has the lowest precedence in the CSS cascade, and can be overridden in the scene graph\n+     * by setting any of the following properties:\n+     * <ul>\n+     *     <li>{@link #userAgentStylesheetProperty() Application.userAgentStylesheet}\n+     *     <li>{@link Scene#userAgentStylesheetProperty() Scene.userAgentStylesheet}\n+     *     <li>{@link SubScene#userAgentStylesheetProperty() SubScene.userAgentStylesheet}\n+     * <\/ul>\n@@ -573,1 +577,1 @@\n-    private static ObjectProperty<StyleTheme> styleTheme;\n+    private static ObjectProperty<StyleTheme> userAgentStyleTheme;\n@@ -575,4 +579,4 @@\n-    public static ObjectProperty<StyleTheme> styleThemeProperty() {\n-        if (styleTheme == null) {\n-            styleTheme = new SimpleObjectProperty<>(Application.class, \"styleTheme\");\n-            styleTheme.bindBidirectional(PlatformImpl.platformThemeProperty());\n+    public static ObjectProperty<StyleTheme> userAgentStyleThemeProperty() {\n+        if (userAgentStyleTheme == null) {\n+            userAgentStyleTheme = new SimpleObjectProperty<>(Application.class, \"userAgentStyleTheme\");\n+            userAgentStyleTheme.bindBidirectional(PlatformImpl.platformUserAgentStyleThemeProperty());\n@@ -580,1 +584,1 @@\n-        return styleTheme;\n+        return userAgentStyleTheme;\n@@ -583,2 +587,2 @@\n-    public static StyleTheme getStyleTheme() {\n-        return styleThemeProperty().get();\n+    public static StyleTheme getUserAgentStyleTheme() {\n+        return userAgentStyleThemeProperty().get();\n@@ -587,2 +591,2 @@\n-    public static void setStyleTheme(StyleTheme theme) {\n-        styleThemeProperty().set(theme);\n+    public static void setUserAgentStyleTheme(StyleTheme theme) {\n+        userAgentStyleThemeProperty().set(theme);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/Application.java","additions":30,"deletions":26,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import javafx.scene.Scene;\n+import javafx.scene.SubScene;\n@@ -34,3 +36,8 @@\n- * {@code StyleTheme} is a collection of stylesheets that specify the appearance of UI controls and other\n- * nodes in the application. Like a user-agent stylesheet, a {@code StyleTheme} is implicitly used by all\n- * JavaFX nodes in the scene graph.\n+ * {@code StyleTheme} is a collection of user-agent stylesheets that specify the appearance of UI controls and\n+ * other nodes in the application. {@code StyleTheme} is implicitly used by all JavaFX nodes in the scene graph,\n+ * unless it is overridden by any of the following properties:\n+ * <ul>\n+ *     <li>{@link Application#userAgentStylesheetProperty() Application.userAgentStylesheet}\n+ *     <li>{@link Scene#userAgentStylesheetProperty() Scene.userAgentStylesheet}\n+ *     <li>{@link SubScene#userAgentStylesheetProperty() SubScene.userAgentStylesheet}\n+ * <\/ul>\n@@ -41,1 +48,1 @@\n- * A {@code StyleTheme} can be applied using the {@link Application#setStyleTheme(StyleTheme)} method:\n+ * A {@code StyleTheme} can be applied using the {@link Application#setUserAgentStyleTheme(StyleTheme)} method:\n@@ -46,1 +53,1 @@\n- *             setStyleTheme(new MyCustomTheme());\n+ *             setUserAgentStyleTheme(new MyCustomTheme());\n@@ -53,4 +60,0 @@\n- * <p>\n- * In the CSS subsystem, stylesheets that comprise a {@code StyleTheme} are classified as\n- * {@link StyleOrigin#USER_AGENT} stylesheets, but have a higher precedence in the CSS cascade\n- * than a stylesheet referenced by {@link Application#userAgentStylesheetProperty()}.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleTheme.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-        setStyleTheme(new ModenaTheme());\n+        setUserAgentStyleTheme(new ModenaTheme());\n@@ -53,1 +53,1 @@\n-        modenaButton.setOnAction(e -> setStyleTheme(new ModenaTheme()));\n+        modenaButton.setOnAction(e -> setUserAgentStyleTheme(new ModenaTheme()));\n@@ -58,1 +58,1 @@\n-        caspianButton.setOnAction(e -> setStyleTheme(new CaspianTheme()));\n+        caspianButton.setOnAction(e -> setUserAgentStyleTheme(new CaspianTheme()));\n","filename":"tests\/manual\/UI\/StyleThemeTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}