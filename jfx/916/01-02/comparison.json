{"files":[{"patch":"@@ -942,1 +942,1 @@\n-    private static class PageInfo {\n+    protected static class PageInfo {\n@@ -1071,6 +1071,1 @@\n-                if (Toolkit.getToolkit().isFxUserThread()) {\n-                    currPageInfo.clearScene();\n-                } else {\n-                    Application.\n-                        invokeAndWait(new ClearSceneRunnable(currPageInfo));\n-                }\n+                clearScene(currPageInfo);\n@@ -1102,0 +1097,9 @@\n+        protected void clearScene(PageInfo pageInfo) {\n+            if (Toolkit.getToolkit().isFxUserThread()) {\n+                pageInfo.clearScene();\n+            } else {\n+                Application.\n+                        invokeAndWait(new ClearSceneRunnable(pageInfo));\n+            }\n+        }\n+\n@@ -1153,1 +1157,1 @@\n-            if (jobError || jobDone || jobCanceled || !getPage(pageIndex)) {\n+            if (jobError || jobCanceled || jobDone && !getPage(pageIndex)) {\n@@ -1160,1 +1164,0 @@\n-            Node appNode = currPageInfo.getNode();\n@@ -1162,1 +1165,1 @@\n-            printNode(appNode, g, w, h);\n+            printNode(g, w, h);\n@@ -1166,1 +1169,2 @@\n-        private void printNode(Node node, Graphics g, int w, int h) {\n+        protected void printNode(Graphics g, int w, int h) {\n+            Node node = currPageInfo.getNode();\n@@ -1190,4 +1194,0 @@\n-        protected PageFormat getCurrentPageFormat() {\n-            return currPageFormat;\n-        }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/j2d\/print\/J2DPrinterJob.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n@@ -29,0 +31,1 @@\n+import java.awt.image.BufferedImage;\n@@ -34,1 +37,3 @@\n-import java.util.function.Supplier;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n@@ -64,2 +69,2 @@\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n@@ -67,1 +72,0 @@\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -73,1 +77,0 @@\n-    private Supplier<PageFormat> pageFormatAccessor;\n@@ -92,7 +95,1 @@\n-                J2DPageable pageable = new J2DPageable();\n-\n-                \/\/ The printer thread initializes the current page format when it processes a page.\n-                \/\/ We use it to check if the page has been printed.\n-                pageFormatAccessor = pageable::getCurrentPageFormat;\n-\n-                return pageable;\n+                return new J2DPageable();\n@@ -102,0 +99,1 @@\n+\n@@ -122,2 +120,7 @@\n-                public PageFormat getCurrentPageFormat() {\n-                    return super.getCurrentPageFormat();\n+                protected void printNode(Graphics g, int w, int h) {\n+                    \/\/ do nothing, as we don't really print in the test\n+                }\n+\n+                @Override\n+                protected void clearScene(J2DPrinterJob.PageInfo pageInfo) {\n+                    \/\/ not needed in test\n@@ -135,1 +138,1 @@\n-    public void testJobEnd() throws InterruptedException {\n+    public void testJobEnd() {\n@@ -137,3 +140,4 @@\n-        job.endJob();\n-        printerJobMock.waitUntilPrinted(5);\n-        assertNotNull(\"The submitted page was not printed.\", pageFormatAccessor.get());\n+        assertTrue(job.endJob());\n+        printerJobMock.waitUntilPrinted(10);\n+        assertTrue(\"It seems that an error is occurred during printing.\", job.endJob()); \/\/ check the jobError is not set\n+        assertEquals(\"The submitted page was not printed.\", List.of(0), printerJobMock.getPrintedPages());\n@@ -143,1 +147,1 @@\n-    public void testJobCanceled() throws InterruptedException {\n+    public void testJobCanceled() {\n@@ -146,2 +150,2 @@\n-        printerJobMock.waitUntilPrinted(5);\n-        assertNull(\"The page was printed even though the job was canceled.\", pageFormatAccessor.get());\n+        printerJobMock.waitUntilPrinted(10);\n+        assertEquals(\"The page was printed even though the job was canceled.\", List.of(), printerJobMock.getPrintedPages());\n@@ -240,0 +244,1 @@\n+        private List<Integer> printedPages = Collections.synchronizedList(new ArrayList<>());\n@@ -255,0 +260,4 @@\n+        public List<Integer> getPrintedPages() {\n+            return printedPages;\n+        }\n+\n@@ -271,2 +280,22 @@\n-            pageable.getPageFormat(0);\n-            printed = true;\n+            try {\n+                int numberOfPages = pageable.getNumberOfPages();\n+                if (numberOfPages == Pageable.UNKNOWN_NUMBER_OF_PAGES) {\n+                    numberOfPages = 10; \/\/ it should be enough for test purposes\n+                }\n+                for (int i = 0; i < numberOfPages; i++) {\n+                    PageFormat pageFormat = pageable.getPageFormat(i);\n+                    int printResult = printPage(pageFormat, i);\n+                    if (printResult == Printable.NO_SUCH_PAGE) {\n+                        break;\n+                    }\n+                    printedPages.add(i);\n+                }\n+            } finally {\n+                printed = true;\n+            }\n+        }\n+\n+        protected int printPage(PageFormat pageFormat, int pageIndex) throws PrinterException {\n+            Graphics2D graphics = new BufferedImage(1000, 1000, BufferedImage.TYPE_INT_ARGB).createGraphics();\n+            Printable printable = pageable.getPrintable(pageIndex);\n+            return printable.print(graphics, pageFormat, pageIndex);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/prism\/j2d\/print\/J2DPrinterJobTest.java","additions":52,"deletions":23,"binary":false,"changes":75,"status":"modified"}]}