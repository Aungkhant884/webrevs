{"files":[{"patch":"@@ -156,1 +156,1 @@\n-        pJob2D = java.awt.print.PrinterJob.getPrinterJob();\n+        pJob2D = createPrinterJob();\n@@ -163,1 +163,1 @@\n-        j2dPageable = new J2DPageable();\n+        j2dPageable = createJ2dPageable();\n@@ -167,0 +167,8 @@\n+    protected java.awt.print.PrinterJob createPrinterJob() {\n+        return java.awt.print.PrinterJob.getPrinterJob();\n+    }\n+\n+    protected J2DPageable createJ2dPageable() {\n+        return new J2DPageable();\n+    }\n+\n@@ -180,1 +188,1 @@\n-        if (jobRunning || jobDone) {\n+        if (jobRunning || jobDone || jobCanceled) {\n@@ -255,1 +263,1 @@\n-        if (jobRunning || jobDone) {\n+        if (jobRunning || jobDone || jobCanceled) {\n@@ -815,0 +823,1 @@\n+    private boolean jobCanceled = false;\n@@ -850,1 +859,1 @@\n-        if (jobError || jobDone) {\n+        if (jobError || jobDone || jobCanceled) {\n@@ -870,1 +879,3 @@\n-            jobDone = true;\n+            if (!jobCanceled) {\n+                jobDone = true;\n+            }\n@@ -881,1 +892,3 @@\n-                jobDone = true;\n+                if (!jobCanceled) {\n+                    jobDone = true;\n+                }\n@@ -888,1 +901,3 @@\n-                jobDone = true;\n+                if (!jobCanceled) {\n+                    jobDone = true;\n+                }\n@@ -927,1 +942,1 @@\n-    private static class PageInfo {\n+    protected static class PageInfo {\n@@ -1038,1 +1053,1 @@\n-    private class J2DPageable implements Pageable, Printable {\n+    protected class J2DPageable implements Pageable, Printable {\n@@ -1056,6 +1071,1 @@\n-                if (Toolkit.getToolkit().isFxUserThread()) {\n-                    currPageInfo.clearScene();\n-                } else {\n-                    Application.\n-                        invokeAndWait(new ClearSceneRunnable(currPageInfo));\n-                }\n+                clearScene(currPageInfo);\n@@ -1064,1 +1074,1 @@\n-            pageDone = true;\n+            setPageDone(true);\n@@ -1069,1 +1079,1 @@\n-                while (newPageInfo == null && !jobDone && !jobError) {\n+                while (newPageInfo == null && !jobDone && !jobCanceled && !jobError) {\n@@ -1076,1 +1086,2 @@\n-            if (jobDone || jobError) {\n+            \/\/ Even if the jobDone is set to true (this is also done by 'endJob()'), we need to process the last page.\n+            if (jobDone && newPageInfo == null || jobCanceled || jobError) {\n@@ -1086,0 +1097,9 @@\n+        protected void clearScene(PageInfo pageInfo) {\n+            if (Toolkit.getToolkit().isFxUserThread()) {\n+                pageInfo.clearScene();\n+            } else {\n+                Application.\n+                        invokeAndWait(new ClearSceneRunnable(pageInfo));\n+            }\n+        }\n+\n@@ -1137,1 +1157,1 @@\n-            if (jobError || jobDone || !getPage(pageIndex)) {\n+            if (jobError || jobCanceled || jobDone && !getPage(pageIndex)) {\n@@ -1144,1 +1164,0 @@\n-            Node appNode = currPageInfo.getNode();\n@@ -1146,1 +1165,1 @@\n-            printNode(appNode, g, w, h);\n+            printNode(g, w, h);\n@@ -1150,1 +1169,2 @@\n-        private void printNode(Node node, Graphics g, int w, int h) {\n+        protected void printNode(Graphics g, int w, int h) {\n+            Node node = currPageInfo.getNode();\n@@ -1205,1 +1225,1 @@\n-            pageDone = false;\n+            setPageDone(false);\n@@ -1215,1 +1235,1 @@\n-                while (!pageDone && !jobDone && !jobError) {\n+                while (!pageDone && !jobDone && !jobCanceled && !jobError) {\n@@ -1228,0 +1248,4 @@\n+        protected void setPageDone(boolean pageDone) {\n+            this.pageDone = pageDone;\n+        }\n+\n@@ -1232,1 +1256,1 @@\n-        if (jobRunning && !jobDone && !jobError) {\n+        if (jobRunning && !jobDone && !jobCanceled && !jobError) {\n@@ -1254,1 +1278,1 @@\n-        jobDone = true;\n+        jobCanceled = true;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/j2d\/print\/J2DPrinterJob.java","additions":51,"deletions":27,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.print;\n+\n+public class PageLayoutShim {\n+\n+    public static PageLayout createPageLayout(Paper paper, PageOrientation orient){\n+        return new PageLayout(paper, orient);\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/javafx\/print\/PageLayoutShim.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.print;\n+\n+import com.sun.javafx.print.PrinterImpl;\n+\n+public class PrinterShim {\n+    public static Printer createPrinter(PrinterImpl impl) {\n+        return new Printer(impl);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/javafx\/print\/PrinterShim.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -43,0 +43,1 @@\n+--add-exports javafx.graphics\/com.sun.prism.j2d.print=ALL-UNNAMED\n@@ -48,0 +49,1 @@\n+--add-exports javafx.graphics\/sun.print=ALL-UNNAMED\n","filename":"modules\/javafx.graphics\/src\/test\/addExports","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -101,0 +101,3 @@\n+    \/\/ By default, always on the FX app thread\n+    private boolean fxUserThread = true;\n+\n@@ -156,2 +159,5 @@\n-        \/\/ Always on the FX app thread\n-        return true;\n+        return fxUserThread;\n+    }\n+\n+    public void setFxUserThread(boolean fxUserThread) {\n+        this.fxUserThread = fxUserThread;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubToolkit.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,373 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.prism.j2d.print;\n+\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.HeadlessException;\n+import java.awt.image.BufferedImage;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Pageable;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.io.ByteArrayOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.print.DocFlavor;\n+import javax.print.DocPrintJob;\n+import javax.print.PrintService;\n+import javax.print.ServiceUIFactory;\n+import javax.print.StreamPrintService;\n+import javax.print.attribute.Attribute;\n+import javax.print.attribute.AttributeSet;\n+import javax.print.attribute.PrintRequestAttributeSet;\n+import javax.print.attribute.PrintServiceAttribute;\n+import javax.print.attribute.PrintServiceAttributeSet;\n+import javax.print.event.PrintServiceAttributeListener;\n+\n+import com.sun.javafx.tk.Toolkit;\n+import com.sun.prism.j2d.print.J2DPrinter;\n+import com.sun.prism.j2d.print.J2DPrinterJob;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javafx.print.PageLayoutShim;\n+import javafx.print.PageOrientation;\n+import javafx.print.Paper;\n+import javafx.print.PrinterJob;\n+import javafx.print.PrinterShim;\n+import javafx.scene.ParentShim;\n+import test.com.sun.javafx.pgstub.StubToolkit;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class J2DPrinterJobTest {\n+\n+    private J2DPrinterJob job;\n+    private PrinterJobMock printerJobMock;\n+\n+    @Before\n+    public void setUp() {\n+        \/\/ Otherwise, the printer job will try to create a nestedLoop which is not supported by the StubToolkit.\n+        ((StubToolkit) Toolkit.getToolkit()).setFxUserThread(false);\n+\n+        PrinterJob printerJob = PrinterJob.createPrinterJob(PrinterShim.createPrinter(new J2DPrinter(new PrintServiceMock())));\n+\n+        printerJobMock = new PrinterJobMock();\n+        job = new J2DPrinterJob(printerJob) {\n+\n+            @Override\n+            protected java.awt.print.PrinterJob createPrinterJob() {\n+                return printerJobMock;\n+            }\n+\n+            @Override\n+            protected J2DPrinterJob.J2DPageable createJ2dPageable() {\n+                return new J2DPageable();\n+            }\n+\n+            class J2DPageable extends J2DPrinterJob.J2DPageable {\n+\n+                @Override\n+                public void setPageDone(boolean pageDone) {\n+                    super.setPageDone(pageDone);\n+\n+                    String methodName = Thread.currentThread().getStackTrace()[2].getMethodName();\n+                    if (methodName.equals(\"waitForNextPage\")) {\n+                        \/\/ Stop the function 'waitForNextPage()' for a while.\n+                        try {\n+                            Thread.sleep(1500);\n+                        } catch (InterruptedException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    } else if (!methodName.equals(\"implPrintPage\")) {\n+                        fail(\"The test needs to be revised, \" +\n+                             \"because the setPageDone() method is only expected in the 'waitForNextPage()' and 'implPrintPage()' methods, \" +\n+                             \"but it was called from '\" + methodName + \"()'\");\n+                    }\n+                }\n+\n+                @Override\n+                protected void printNode(Graphics g, int w, int h) {\n+                    \/\/ do nothing, as we don't really print in the test\n+                }\n+\n+                @Override\n+                protected void clearScene(J2DPrinterJob.PageInfo pageInfo) {\n+                    \/\/ not needed in test\n+                }\n+            }\n+        };\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        ((StubToolkit) Toolkit.getToolkit()).setFxUserThread(true);\n+    }\n+\n+    @Test\n+    public void testJobEnd() {\n+        assertTrue(job.print(PageLayoutShim.createPageLayout(Paper.A4, PageOrientation.PORTRAIT), new ParentShim()));\n+        assertTrue(job.endJob());\n+        printerJobMock.waitUntilPrinted(10);\n+        assertTrue(\"It seems that an error is occurred during printing.\", job.endJob()); \/\/ check the jobError is not set\n+        assertEquals(\"The submitted page was not printed.\", List.of(0), printerJobMock.getPrintedPages());\n+    }\n+\n+    @Test\n+    public void testJobCanceled() {\n+        assertTrue(job.print(PageLayoutShim.createPageLayout(Paper.A4, PageOrientation.PORTRAIT), new ParentShim()));\n+        job.cancelJob();\n+        printerJobMock.waitUntilPrinted(10);\n+        assertEquals(\"The page was printed even though the job was canceled.\", List.of(), printerJobMock.getPrintedPages());\n+    }\n+\n+    private static class PrintServiceMock extends StreamPrintService {\n+        public PrintServiceMock() {\n+            super(new ByteArrayOutputStream());\n+        }\n+\n+        @Override\n+        public String getOutputFormat() {\n+            return null;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return null;\n+        }\n+\n+        @Override\n+        public DocPrintJob createPrintJob() {\n+            return null;\n+        }\n+\n+        @Override\n+        public void addPrintServiceAttributeListener(PrintServiceAttributeListener listener) {\n+\n+        }\n+\n+        @Override\n+        public void removePrintServiceAttributeListener(PrintServiceAttributeListener listener) {\n+\n+        }\n+\n+        @Override\n+        public PrintServiceAttributeSet getAttributes() {\n+            return null;\n+        }\n+\n+        @Override\n+        public <T extends PrintServiceAttribute> T getAttribute(Class<T> category) {\n+            return null;\n+        }\n+\n+        @Override\n+        public DocFlavor[] getSupportedDocFlavors() {\n+            return new DocFlavor[0];\n+        }\n+\n+        @Override\n+        public boolean isDocFlavorSupported(DocFlavor flavor) {\n+            return false;\n+        }\n+\n+        @Override\n+        public Class<?>[] getSupportedAttributeCategories() {\n+            return new Class[0];\n+        }\n+\n+        @Override\n+        public boolean isAttributeCategorySupported(Class<? extends Attribute> category) {\n+            return false;\n+        }\n+\n+        @Override\n+        public Object getDefaultAttributeValue(Class<? extends Attribute> category) {\n+            return null;\n+        }\n+\n+        @Override\n+        public Object getSupportedAttributeValues(Class<? extends Attribute> category, DocFlavor flavor, AttributeSet attributes) {\n+            return null;\n+        }\n+\n+        @Override\n+        public boolean isAttributeValueSupported(Attribute attrval, DocFlavor flavor, AttributeSet attributes) {\n+            return false;\n+        }\n+\n+        @Override\n+        public AttributeSet getUnsupportedAttributes(DocFlavor flavor, AttributeSet attributes) {\n+            return null;\n+        }\n+\n+        @Override\n+        public ServiceUIFactory getServiceUIFactory() {\n+            return null;\n+        }\n+    }\n+\n+    private static class PrinterJobMock extends java.awt.print.PrinterJob {\n+        private PrintService service;\n+        private Pageable pageable;\n+        private volatile boolean printed;\n+        private List<Integer> printedPages = Collections.synchronizedList(new ArrayList<>());\n+\n+        public void waitUntilPrinted(int timeoutInSeconds) {\n+            for (int i = 0; !printed && i < timeoutInSeconds; i++) {\n+                try {\n+                    \/\/noinspection BusyWait\n+                    Thread.sleep(1000);\n+                } catch (InterruptedException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            if (!printed) {\n+                fail(\"Timeout: after \" + timeoutInSeconds + \" seconds the print job is still running\");\n+            }\n+        }\n+\n+        public List<Integer> getPrintedPages() {\n+            return printedPages;\n+        }\n+\n+        @Override\n+        public void setPrintService(PrintService service) {\n+            this.service = service;\n+        }\n+\n+        public PrintService getPrintService() {\n+            return service;\n+        }\n+\n+        @Override\n+        public void setPageable(Pageable pageable) throws NullPointerException {\n+            this.pageable = pageable;\n+        }\n+\n+        @Override\n+        public void print(PrintRequestAttributeSet attributes) throws PrinterException {\n+            try {\n+                int numberOfPages = pageable.getNumberOfPages();\n+                if (numberOfPages == Pageable.UNKNOWN_NUMBER_OF_PAGES) {\n+                    numberOfPages = 10; \/\/ it should be enough for test purposes\n+                }\n+                for (int i = 0; i < numberOfPages; i++) {\n+                    PageFormat pageFormat = pageable.getPageFormat(i);\n+                    int printResult = printPage(pageFormat, i);\n+                    if (printResult == Printable.NO_SUCH_PAGE) {\n+                        break;\n+                    }\n+                    printedPages.add(i);\n+                }\n+            } finally {\n+                printed = true;\n+            }\n+        }\n+\n+        protected int printPage(PageFormat pageFormat, int pageIndex) throws PrinterException {\n+            Graphics2D graphics = new BufferedImage(1000, 1000, BufferedImage.TYPE_INT_ARGB).createGraphics();\n+            Printable printable = pageable.getPrintable(pageIndex);\n+            return printable.print(graphics, pageFormat, pageIndex);\n+        }\n+\n+        @Override\n+        public void print() throws PrinterException {\n+        }\n+\n+        @Override\n+        public void setPrintable(Printable painter) {\n+\n+        }\n+\n+        @Override\n+        public void setPrintable(Printable painter, PageFormat format) {\n+\n+        }\n+\n+        @Override\n+        public boolean printDialog() throws HeadlessException {\n+            return false;\n+        }\n+\n+        @Override\n+        public PageFormat pageDialog(PageFormat page) throws HeadlessException {\n+            return null;\n+        }\n+\n+        @Override\n+        public PageFormat defaultPage(PageFormat page) {\n+            return null;\n+        }\n+\n+        @Override\n+        public PageFormat validatePage(PageFormat page) {\n+            return null;\n+        }\n+\n+        @Override\n+        public void setCopies(int copies) {\n+\n+        }\n+\n+        @Override\n+        public int getCopies() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public String getUserName() {\n+            return null;\n+        }\n+\n+        @Override\n+        public void setJobName(String jobName) {\n+\n+        }\n+\n+        @Override\n+        public String getJobName() {\n+            return null;\n+        }\n+\n+        @Override\n+        public void cancel() {\n+\n+        }\n+\n+        @Override\n+        public boolean isCancelled() {\n+            return false;\n+        }\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/prism\/j2d\/print\/J2DPrinterJobTest.java","additions":373,"deletions":0,"binary":false,"changes":373,"status":"added"}]}