{"files":[{"patch":"@@ -67,1 +67,1 @@\n- *     A Service is a non-visual component encapsulating the information required\n+ *     A {@code Service} is a non-visual component encapsulating the information required\n@@ -69,1 +69,1 @@\n- *     JavaFX UI library, the Service knows about the JavaFX Application thread\n+ *     JavaFX UI library, the {@code Service} knows about the JavaFX Application thread\n@@ -72,1 +72,1 @@\n- *     such, all of the methods and state on the Service are intended to be\n+ *     such, all of the methods and state on the {@code Service} are intended to be\n@@ -74,3 +74,3 @@\n- *     to this is when initially configuring a Service, which may safely be done\n- *     from any thread, and initially starting a Service, which may also safely\n- *     be done from any thread. However, once the Service has been initialized and\n+ *     to this is when initially configuring a {@code Service}, which may safely be done\n+ *     from any thread, and initially starting a {@code Service}, which may also safely\n+ *     be done from any thread. However, once the {@code Service} has been initialized and\n@@ -80,1 +80,1 @@\n- *     A Service creates and manages a {@link Task} that performs the work\n+ *     A {@code Service} creates and manages a {@link Task} that performs the work\n@@ -84,1 +84,1 @@\n- *     Worker, meaning that it can be reset and restarted. Due to this, a Service\n+ *     Worker, meaning that it can be reset and restarted. Due to this, a {@code Service}\n@@ -86,4 +86,4 @@\n- *     Once a Service is started, it will schedule its Task and listen for\n- *     changes to the state of the Task. A Task does not hold a reference to the\n- *     Service that started it, meaning that a running Task will not prevent\n- *     the Service from being garbage collected.\n+ *     Once a {@code Service} is started, it will schedule its {@code Task} and listen for\n+ *     changes to the state of the {@code Task}. A {@code Task} does not hold a reference to the\n+ *     {@code Service} that started it, meaning that a running {@code Task} will not prevent\n+ *     the {@code Service} from being garbage collected.\n@@ -92,1 +92,1 @@\n- *     If an {@link java.util.concurrent.Executor} is specified on the Service,\n+ *     If an {@link java.util.concurrent.Executor} is specified on the {@code Service},\n@@ -95,1 +95,1 @@\n- *     non-daemon threads, then specify a custom Executor (for example,\n+ *     non-daemon threads, then specify a custom {@code Executor} (for example,\n@@ -100,1 +100,1 @@\n- *     Because a Service is intended to simplify declarative use cases, subclasses\n+ *     Because a {@code Service} is intended to simplify declarative use cases, subclasses\n@@ -102,4 +102,3 @@\n- *     For example, to write a Service that reads the first line\n- *     from any URL and returned it as a String, it might be defined\n- *     such that it had a single property, {@code url}, and might be implemented\n- *     as:\n+ *     For example, to write a {@code Service} that reads the first line\n+ *     from any URL and returns it as a {@code String}, it might be defined with\n+ *     a single property, {@code url}, and might be implemented as:\n@@ -130,1 +129,1 @@\n- *     The Service by default uses a thread pool Executor with some unspecified\n+ *     The {@code Service} by default uses a {@code ThreadPoolExecutor} with some unspecified\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/concurrent\/Service.java","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"}]}