{"files":[{"patch":"@@ -604,1 +604,1 @@\n-            SetListenerHelper.removeListener(listenerHelper, setChangeListener);\n+            listenerHelper = SetListenerHelper.removeListener(listenerHelper, setChangeListener);\n@@ -618,1 +618,1 @@\n-            SetListenerHelper.removeListener(listenerHelper, invalidationListener);\n+            listenerHelper = SetListenerHelper.removeListener(listenerHelper, invalidationListener);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/BitSet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,5 @@\n+import java.util.Spliterator;\n+import java.util.function.Consumer;\n+import java.util.function.IntFunction;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n@@ -30,1 +35,5 @@\n-public class BitSetShim {\n+import javafx.beans.InvalidationListener;\n+import javafx.collections.SetChangeListener;\n+import javafx.css.PseudoClass;\n+\n+public class BitSetShim<T> {\n@@ -76,0 +85,103 @@\n+    public static BitSetShim<PseudoClass> getPseudoClassInstance() {\n+        return new BitSetShim<>(new PseudoClassState());\n+    }\n+\n+    private final BitSet<T> delegate;\n+\n+    private BitSetShim(BitSet<T> delegate) {\n+        this.delegate = delegate;\n+    }\n+\n+    \/\/ These delegate methods were generated automatically by an IDE.\n+\n+    public void forEach(Consumer<? super T> action) {\n+        delegate.forEach(action);\n+    }\n+\n+    public int size() {\n+        return delegate.size();\n+    }\n+\n+    public boolean isEmpty() {\n+        return delegate.isEmpty();\n+    }\n+\n+    public Iterator<T> iterator() {\n+        return delegate.iterator();\n+    }\n+\n+    public boolean add(T t) {\n+        return delegate.add(t);\n+    }\n+\n+    public boolean remove(Object o) {\n+        return delegate.remove(o);\n+    }\n+\n+    public boolean contains(Object o) {\n+        return delegate.contains(o);\n+    }\n+\n+    public Object[] toArray() {\n+        return delegate.toArray();\n+    }\n+\n+    public boolean containsAll(Collection<?> c) {\n+        return delegate.containsAll(c);\n+    }\n+\n+    public <T> T[] toArray(T[] a) {\n+        return delegate.toArray(a);\n+    }\n+\n+    public boolean addAll(Collection<? extends T> c) {\n+        return delegate.addAll(c);\n+    }\n+\n+    public boolean retainAll(Collection<?> c) {\n+        return delegate.retainAll(c);\n+    }\n+\n+    public boolean removeAll(Collection<?> c) {\n+        return delegate.removeAll(c);\n+    }\n+\n+    public void clear() {\n+        delegate.clear();\n+    }\n+\n+    public void addListener(SetChangeListener<? super T> setChangeListener) {\n+        delegate.addListener(setChangeListener);\n+    }\n+\n+    public void removeListener(SetChangeListener<? super T> setChangeListener) {\n+        delegate.removeListener(setChangeListener);\n+    }\n+\n+    public void addListener(InvalidationListener invalidationListener) {\n+        delegate.addListener(invalidationListener);\n+    }\n+\n+    public void removeListener(InvalidationListener invalidationListener) {\n+        delegate.removeListener(invalidationListener);\n+    }\n+\n+    public Spliterator<T> spliterator() {\n+        return delegate.spliterator();\n+    }\n+\n+    public <T> T[] toArray(IntFunction<T[]> generator) {\n+        return delegate.toArray(generator);\n+    }\n+\n+    public boolean removeIf(Predicate<? super T> filter) {\n+        return delegate.removeIf(filter);\n+    }\n+\n+    public Stream<T> stream() {\n+        return delegate.stream();\n+    }\n+\n+    public Stream<T> parallelStream() {\n+        return delegate.parallelStream();\n+    }\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/com\/sun\/javafx\/css\/BitSetShim.java","additions":113,"deletions":1,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.css;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.sun.javafx.css.BitSetShim;\n+\n+import javafx.beans.InvalidationListener;\n+import javafx.collections.SetChangeListener;\n+import javafx.css.PseudoClass;\n+\n+public class BitSetTest {\n+    private final BitSetShim<PseudoClass> set = BitSetShim.getPseudoClassInstance();\n+    private final PseudoClass a = PseudoClass.getPseudoClass(\"a\");\n+    private final PseudoClass b = PseudoClass.getPseudoClass(\"b\");\n+    private final PseudoClass c = PseudoClass.getPseudoClass(\"c\");\n+\n+    @Test\n+    void setShouldProcessAddAndRemoveCorrectly() {\n+        assertEquals(0, set.size());\n+        assertTrue(set.isEmpty());\n+\n+        set.add(a);\n+\n+        assertEquals(1, set.size());\n+        assertTrue(set.contains(a));\n+\n+        set.add(b);\n+\n+        assertEquals(2, set.size());\n+        assertTrue(set.contains(a));\n+        assertTrue(set.contains(b));\n+\n+        set.remove(a);\n+\n+        assertEquals(1, set.size());\n+        assertTrue(set.contains(b));\n+\n+        set.remove(a);\n+\n+        assertEquals(1, set.size());\n+        assertTrue(set.contains(b));\n+\n+        set.remove(b);\n+\n+        assertEquals(0, set.size());\n+        assertTrue(set.isEmpty());\n+\n+        set.remove(b);\n+\n+        assertEquals(0, set.size());\n+        assertTrue(set.isEmpty());\n+    }\n+\n+    @Test\n+    void listenerManagementForInvalidationListenerShouldWorkCorrectly() {\n+        AtomicInteger invalidated = new AtomicInteger();\n+\n+        InvalidationListener listener = obs -> invalidated.addAndGet(1);\n+\n+        set.addListener(listener);\n+        set.add(a);\n+\n+        assertEquals(1, invalidated.getAndSet(0));\n+\n+        set.addListener(listener);  \/\/ added listener twice\n+        set.add(b);\n+\n+        assertEquals(2, invalidated.getAndSet(0));  \/\/ called twice\n+\n+        set.removeListener(listener);\n+        set.add(c);\n+\n+        assertEquals(1, invalidated.getAndSet(0));  \/\/ called once\n+\n+        set.removeListener(listener);\n+        set.remove(a);\n+\n+        assertEquals(0, invalidated.getAndSet(0));  \/\/ not called\n+    }\n+\n+    @Test\n+    void listenerManagementForSetChangeListenerShouldWorkCorrectly() {\n+        AtomicInteger changed = new AtomicInteger();\n+\n+        SetChangeListener<PseudoClass> listener = obs -> changed.addAndGet(1);\n+\n+        set.addListener(listener);\n+        set.add(a);\n+\n+        assertEquals(1, changed.getAndSet(0));\n+\n+        set.addListener(listener);  \/\/ added listener twice\n+        set.add(b);\n+\n+        assertEquals(2, changed.getAndSet(0));  \/\/ called twice\n+\n+        set.removeListener(listener);\n+        set.add(c);\n+\n+        assertEquals(1, changed.getAndSet(0));  \/\/ called once\n+\n+        set.removeListener(listener);\n+        set.remove(a);\n+\n+        assertEquals(0, changed.getAndSet(0));  \/\/ not called\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/BitSetTest.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"}]}