{"files":[{"patch":"@@ -111,2 +111,1 @@\n-                    newScreens.clear();\n-                    newScreens.addAll(Screen.screens.subList(0, i));\n+                    newScreens.setAll(Screen.screens.subList(0, i));\n@@ -118,2 +117,1 @@\n-            Screen.screens.clear();\n-            Screen.screens.addAll(newScreens);\n+            Screen.screens.setAll(newScreens);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/stage\/Screen.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.stage;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javafx.application.Platform;\n+import javafx.collections.ListChangeListener.Change;\n+import javafx.collections.ObservableList;\n+import javafx.stage.Screen;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import test.util.Util;\n+\n+import static org.junit.Assert.*;\n+import static org.junit.Assume.assumeTrue;\n+\n+public class ScreenTest {\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n+    static ObservableList<Screen> screens;\n+    static volatile boolean screensListenerCalled = false;\n+    static volatile boolean screensSizeIsZero = false;\n+\n+    private static void waitForLatch(CountDownLatch latch, int seconds, String msg) throws Exception {\n+        assertTrue(\"Timeout: \" + msg, latch.await(seconds, TimeUnit.SECONDS));\n+    }\n+\n+    \/* This test for JDK-8252446 adds a listener on the ObservableList of\n+     * screens as the first thing in the platform startup runnable. Even\n+     * so, it cannot count on getting a call to the listener for the\n+     * initial list of screens. We don't get one on Windows or Linux. We\n+     * do get one on Mac, but this isn't guaranteed behavior, so this\n+     * test might or might not be effective.\n+     *\/\n+    @BeforeClass\n+    public static void initFX() throws Exception {\n+        Platform.setImplicitExit(false);\n+        Platform.startup(() -> {\n+            screens = Screen.getScreens();\n+            screens.addListener((Change<?> change) -> {\n+                final int size = screens.size();\n+                System.err.println(\"Screens list changed, size = \" + size);\n+                if (size == 0) {\n+                    screensSizeIsZero = true;\n+                }\n+                screensListenerCalled = true;\n+            });\n+            Platform.runLater(startupLatch::countDown);\n+        });\n+        waitForLatch(startupLatch, 10, \"FX runtime failed to start\");\n+    }\n+\n+    @AfterClass\n+    public static void exitFX() {\n+        Platform.exit();\n+    }\n+\n+    @Test\n+    public void testScreensNotEmpty() {\n+        assertNotNull(screens);\n+        assertFalse(\"Screens list is empty\", screens.size() == 0);\n+    }\n+\n+    @Test\n+    public void testScreensNotEmptyInListener() {\n+        \/\/ Sleep for some time to see whether we get an initial call to our\n+        \/\/ listener. Since we cannot count on the listener being called at\n+        \/\/ all, we can't use a latch.\n+        Util.sleep(2000);\n+\n+        \/\/ Skip the test if it isn't called.\n+        if (!screensListenerCalled) {\n+            System.err.println(\"Skipping test: Screens listener not called\");\n+        }\n+        assumeTrue(screensListenerCalled);\n+        assertFalse(\"Screens list is empty in listener\", screensSizeIsZero);\n+    }\n+\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/ScreenTest.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"}]}