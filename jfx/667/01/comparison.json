{"files":[{"patch":"@@ -37,0 +37,1 @@\n+import javafx.beans.property.BooleanProperty;\n@@ -56,1 +57,0 @@\n-import javafx.beans.property.BooleanProperty;\n@@ -470,2 +470,2 @@\n-                } else if ((sortX && prevDataPoint.getX() <= x) ||\n-                           (sortY && prevDataPoint.getY() <= y))\n+                } else if ((sortX && prevDataPoint.getX() < x) ||\n+                           (sortY && prevDataPoint.getY() < y))\n@@ -481,2 +481,2 @@\n-                } else if ((sortX && x <= nextDataPoint.getX()) ||\n-                           (sortY && y <= nextDataPoint.getY()))\n+                } else if ((sortX && x < nextDataPoint.getX()) ||\n+                           (sortY && y < nextDataPoint.getY()))\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/chart\/AreaChart.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import javafx.geometry.Point2D;\n@@ -39,0 +40,1 @@\n+import javafx.scene.shape.LineTo;\n@@ -40,0 +42,2 @@\n+\n+import static org.junit.Assert.assertArrayEquals;\n@@ -41,0 +45,2 @@\n+\n+import javafx.scene.shape.PathElement;\n@@ -44,0 +50,3 @@\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n@@ -46,1 +55,1 @@\n-    final XYChart.Series<Number, Number> series1 = new XYChart.Series<Number, Number>();\n+    final XYChart.Series<Number, Number> series1 = new XYChart.Series<>();\n@@ -50,1 +59,1 @@\n-        final NumberAxis yAxis = new NumberAxis();\n+        final NumberAxis yAxis = new NumberAxis(0, 30, 2);\n@@ -63,1 +72,1 @@\n-            xAxis = new NumberAxis();\n+            xAxis = new NumberAxis(0, 90, 10);\n@@ -154,0 +163,198 @@\n+\n+    @Test public void testPathInsideXAndInsideYBounds() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(85d, 15d)); \/\/ upper bound is 90,30\n+        ac.getData().addAll(series1);\n+        pulse();\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(series1).toArray(), findDataPointsFromPathLine(ac).toArray());\n+    }\n+\n+    @Test public void testPathOutsideXBoundsWithDuplicateXAndHigherY() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(100d, 20d)); \/\/ upper bound is 90\n+        series1.getData().add(new XYChart.Data<>(100d, 50d));\n+        ac.getData().addAll(series1);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(80d, 10d),\n+                new XYChart.Data<>(100d, 20d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(ac).toArray());\n+    }\n+\n+    @Test public void testPathOutsideXBoundsWithDuplicateXAndLowerY() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(100d, 20d)); \/\/ upper bound is 90\n+        series1.getData().add(new XYChart.Data<>(100d, 15d));\n+        ac.getData().addAll(series1);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(80d, 10d),\n+                new XYChart.Data<>(100d, 20d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(ac).toArray());\n+    }\n+\n+    @Test public void testPathOutsideYBoundsWithDuplicateYAndLowerX() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(85d, 40d));\n+        series1.getData().add(new XYChart.Data<>(70d, 40d));\n+        ac.getData().addAll(series1);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                \/\/ Sorting policy in AreaChart is defaulted to X_AXIS. See AreaChart#makePaths\n+                new XYChart.Data<>(70d, 40d),\n+                new XYChart.Data<>(80d, 10d),\n+                new XYChart.Data<>(85d, 40d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(ac).toArray());\n+    }\n+\n+    @Test public void testPathOutsideYBoundsWithDuplicateYAndHigherX() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(70d, 32d)); \/\/ upper bound is 30\n+        series1.getData().add(new XYChart.Data<>(85d, 32d));\n+        ac.getData().addAll(series1);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(70d, 32d),\n+                new XYChart.Data<>(80d, 10d),\n+                new XYChart.Data<>(85d, 32d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(ac).toArray());\n+    }\n+\n+    @Test public void testPathOutsideXAndYBoundsWithDuplicateXAndHigherY() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(95d, 35d)); \/\/ upper bound is 90,30\n+        series1.getData().add(new XYChart.Data<>(95d, 40d));\n+        ac.getData().addAll(series1);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(80d, 10d),\n+                new XYChart.Data<>(95d, 35d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(ac).toArray());\n+    }\n+\n+    @Test public void testPathOutsideXAndYBoundsWithDuplicateXAndLowerY() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(95d, 40d)); \/\/ upper bound is 90,30\n+        series1.getData().add(new XYChart.Data<>(95d, 35d));\n+        ac.getData().addAll(series1);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(80d, 10d),\n+                new XYChart.Data<>(95d, 40d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(ac).toArray());\n+    }\n+\n+    @Test public void testPathOutsideXAndYBoundsWithDuplicateYAndHigherX() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(95d, 32d)); \/\/ upper bound is 90,30\n+        series1.getData().add(new XYChart.Data<>(100d, 32d));\n+        ac.getData().addAll(series1);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(80d, 10d),\n+                new XYChart.Data<>(95d, 32d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(ac).toArray());\n+    }\n+\n+    @Test public void testPathOutsideXAndYBoundsWithDuplicateYAndLowerX() {\n+        startApp();\n+        series1.getData().add(new XYChart.Data<>(100d, 40d)); \/\/ upper bound is 90,30\n+        series1.getData().add(new XYChart.Data<>(95d, 40d));\n+        ac.getData().addAll(series1);\n+        pulse();\n+\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\n+        expectedSeries.getData().addAll(\n+                new XYChart.Data<>(10d, 10d),\n+                new XYChart.Data<>(25d, 20d),\n+                new XYChart.Data<>(30d, 15d),\n+                new XYChart.Data<>(50d, 15d),\n+                new XYChart.Data<>(80d, 10d),\n+                new XYChart.Data<>(95d, 40d)\n+        );\n+\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(ac).toArray());\n+    }\n+\n+    private List<Point2D> convertSeriesDataToPoint2D(XYChart.Series<Number, Number> series) {\n+        return series.getData().stream()\n+                .map(data -> new Point2D(data.getXValue().doubleValue(), data.getYValue().doubleValue()))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private List<Point2D> findDataPointsFromPathLine(AreaChart<Number, Number> areaChart) {\n+        final NumberAxis xAxis = (NumberAxis) areaChart.getXAxis();\n+        final NumberAxis yAxis = (NumberAxis) areaChart.getYAxis();\n+\n+        final ObservableList<Node> children = ((Group) areaChart.getData().get(0).getNode()).getChildren();\n+        Path fillPath = (Path) children.get(0);\n+        ObservableList<PathElement> fillElements = fillPath.getElements();\n+\n+        List<Point2D> data = fillElements.stream()\n+                .filter(pathElement -> pathElement instanceof LineTo)\n+                .map(pathElement -> (LineTo) pathElement)\n+                .map(lineTo -> new Point2D(\n+                        xAxis.getValueForDisplay(lineTo.getX()).doubleValue(),\n+                        yAxis.getValueForDisplay(lineTo.getY()).doubleValue())\n+                )\n+                .collect(Collectors.toList());\n+        \/\/ Due to fillPath, one additional LineTo element is added to close the loop\n+        return data.subList(0, data.size() - 1);\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/AreaChartTest.java","additions":210,"deletions":3,"binary":false,"changes":213,"status":"modified"},{"patch":"@@ -1,162 +1,535 @@\n-\/*\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.javafx.scene.chart;\n-\n-import javafx.collections.ObservableList;\n-import javafx.scene.Node;\n-import javafx.scene.chart.Chart;\n-import javafx.scene.chart.LineChart;\n-import javafx.scene.chart.NumberAxis;\n-import javafx.scene.chart.XYChart;\n-import javafx.scene.chart.XYChartShim;\n-import javafx.scene.shape.Path;\n-import static org.junit.Assert.assertEquals;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n-public class LineChartTest extends XYChartTestBase {\n-\n-    LineChart<Number,Number> lineChart;\n-    final XYChart.Series<Number, Number> series1 = new XYChart.Series<Number, Number>();\n-\n-    @Override protected Chart createChart() {\n-        final NumberAxis xAxis = new NumberAxis();\n-        final NumberAxis yAxis = new NumberAxis();\n-        lineChart = new LineChart<Number,Number>(xAxis,yAxis);\n-        xAxis.setLabel(\"X Axis\");\n-        yAxis.setLabel(\"Y Axis\");\n-        lineChart.setTitle(\"HelloLineChart\");\n-        \/\/ add starting data\n-        series1.getData().add(new XYChart.Data(10d, 10d));\n-        series1.getData().add(new XYChart.Data(25d, 20d));\n-        series1.getData().add(new XYChart.Data(30d, 15d));\n-        series1.getData().add(new XYChart.Data(50d, 15d));\n-        series1.getData().add(new XYChart.Data(80d, 10d));\n-        return lineChart;\n-    }\n-\n-    private String getSeriesLineFromPlot() {\n-        for (Node n : XYChartShim.getPlotChildren(lineChart)) {\n-            if (n instanceof Path && \"chart-series-line\".equals(n.getStyleClass().get(0))) {\n-                Path line = (Path)n;\n-                return computeSVGPath(line);\n-            }\n-        }\n-        return \"\";\n-    }\n-\n-    @Test\n-    public void testCreateSymbols() {\n-        startApp();\n-        lineChart.setCreateSymbols(false);\n-        pulse();\n-        lineChart.getData().addAll(series1);\n-        pulse();\n-        assertEquals(0, countSymbols(lineChart, \"chart-line-symbol\"));\n-\n-        lineChart.getData().clear();\n-        pulse();\n-        lineChart.setCreateSymbols(true);\n-        pulse();\n-        lineChart.getData().addAll(series1);\n-        assertEquals(5, countSymbols(lineChart, \"chart-line-symbol\"));\n-    }\n-\n-    @Test\n-    public void testDataItemAdd() {\n-        startApp();\n-        lineChart.getData().addAll(series1);\n-        pulse();\n-        series1.getData().add(new XYChart.Data(60d, 30d));\n-        pulse();\n-        \/\/ 5 stackpane nodes and 1 path node + new stackpane for data added\n-        assertEquals(7, XYChartShim.getPlotChildren(lineChart).size());\n-    }\n-\n-     @Test @Ignore\n-     \/\/ Ignored because the animation's Timeline doesn't run. It used to be that the item was added before the\n-     \/\/ animation was run. Now the item is added as the onFinished handler of the first KeyFrame. Since the\n-     \/\/ Timeline doesn't run in the context of the unit test, this test fails. In fact, this test never really\n-     \/\/ achieved its purpose.\n-    public void testDataItemAddWithAnimation() {\n-        startApp();\n-        lineChart.setAnimated(true);\n-        lineChart.getData().addAll(series1);\n-        pulse();\n-        series1.getData().add(new XYChart.Data(60d, 30d));\n-        pulse();\n-        \/\/ 5 stackpane nodes and 1 path node + new stackpane for data added\n-        assertEquals(7, XYChartShim.getPlotChildren(lineChart).size());\n-    }\n-\n-    @Test\n-    public void testDataItemRemove() {\n-        startApp();\n-        lineChart.getData().addAll(series1);\n-        pulse();\n-        if (!lineChart.getData().isEmpty()) {\n-            series1.getData().remove(0);\n-            pulse();\n-            \/\/ 4 stackpane nodes and one path node\n-            assertEquals(5, XYChartShim.getPlotChildren(lineChart).size());\n-        }\n-    }\n-\n-     @Test\n-    public void testSeriesAddWithAnimation() {\n-        startApp();\n-        lineChart.setAnimated(true);\n-        final XYChart.Series<Number, Number> series2 = new XYChart.Series<Number, Number>();\n-        series1.getData().add(new XYChart.Data(15d, 40d));\n-        series1.getData().add(new XYChart.Data(25d, 10d));\n-        series1.getData().add(new XYChart.Data(40d, 35d));\n-        lineChart.getData().addAll(series1);\n-        pulse();\n-        assertEquals(true, lineChart.getAnimated());\n-    }\n-\n-    @Override\n-    void checkSeriesStyleClasses(XYChart.Series<?, ?> series,\n-            int seriesIndex, int colorIndex) {\n-        Node seriesLine = series.getNode();\n-        checkStyleClass(seriesLine, \"series\"+seriesIndex, \"default-color\"+colorIndex);\n-    }\n-\n-    @Override\n-    void checkDataStyleClasses(XYChart.Data<?, ?> data,\n-            int seriesIndex, int dataIndex, int colorIndex) {\n-        Node symbol = data.getNode();\n-        checkStyleClass(symbol, \"series\"+seriesIndex, \"data\"+dataIndex, \"default-color\"+colorIndex);\n-    }\n-\n-    @Test\n-    public void testSeriesRemoveAnimatedStyleClasses() {\n-        startApp();\n-        \/\/lineChart.setCreateSymbols(false);\n-        int nodesPerSeries = 4; \/\/ 3 symbols + 1 path\n-        checkSeriesRemoveAnimatedStyleClasses(lineChart, nodesPerSeries, 900);\n-    }\n-}\n+\/*\r\n+ * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\r\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n+ *\r\n+ * This code is free software; you can redistribute it and\/or modify it\r\n+ * under the terms of the GNU General Public License version 2 only, as\r\n+ * published by the Free Software Foundation.  Oracle designates this\r\n+ * particular file as subject to the \"Classpath\" exception as provided\r\n+ * by Oracle in the LICENSE file that accompanied this code.\r\n+ *\r\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\r\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n+ * version 2 for more details (a copy is included in the LICENSE file that\r\n+ * accompanied this code).\r\n+ *\r\n+ * You should have received a copy of the GNU General Public License version\r\n+ * 2 along with this work; if not, write to the Free Software Foundation,\r\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n+ *\r\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n+ * or visit www.oracle.com if you need additional information or have any\r\n+ * questions.\r\n+ *\/\r\n+\r\n+package test.javafx.scene.chart;\r\n+\r\n+import javafx.collections.ObservableList;\r\n+import javafx.geometry.Point2D;\r\n+import javafx.scene.Node;\r\n+import javafx.scene.chart.Chart;\r\n+import javafx.scene.chart.LineChart;\r\n+import javafx.scene.chart.NumberAxis;\r\n+import javafx.scene.chart.XYChart;\r\n+import javafx.scene.chart.XYChartShim;\r\n+import javafx.scene.shape.LineTo;\r\n+import javafx.scene.shape.Path;\r\n+import javafx.scene.shape.PathElement;\r\n+import org.junit.Ignore;\r\n+import org.junit.Test;\r\n+\r\n+import java.util.List;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import static org.junit.Assert.assertArrayEquals;\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+public class LineChartTest extends XYChartTestBase {\r\n+\r\n+    LineChart<Number,Number> lineChart;\r\n+    final XYChart.Series<Number, Number> series1 = new XYChart.Series<Number, Number>();\r\n+\r\n+    @Override protected Chart createChart() {\r\n+        final NumberAxis xAxis = new NumberAxis(0, 90, 10);\r\n+        final NumberAxis yAxis = new NumberAxis(0, 30, 2);;\r\n+        lineChart = new LineChart<Number,Number>(xAxis,yAxis);\r\n+        xAxis.setLabel(\"X Axis\");\r\n+        yAxis.setLabel(\"Y Axis\");\r\n+        lineChart.setTitle(\"HelloLineChart\");\r\n+        \/\/ add starting data\r\n+        series1.getData().add(new XYChart.Data(10d, 10d));\r\n+        series1.getData().add(new XYChart.Data(25d, 20d));\r\n+        series1.getData().add(new XYChart.Data(30d, 15d));\r\n+        series1.getData().add(new XYChart.Data(50d, 15d));\r\n+        series1.getData().add(new XYChart.Data(80d, 10d));\r\n+        return lineChart;\r\n+    }\r\n+\r\n+    private String getSeriesLineFromPlot() {\r\n+        for (Node n : XYChartShim.getPlotChildren(lineChart)) {\r\n+            if (n instanceof Path && \"chart-series-line\".equals(n.getStyleClass().get(0))) {\r\n+                Path line = (Path)n;\r\n+                return computeSVGPath(line);\r\n+            }\r\n+        }\r\n+        return \"\";\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testCreateSymbols() {\r\n+        startApp();\r\n+        lineChart.setCreateSymbols(false);\r\n+        pulse();\r\n+        lineChart.getData().addAll(series1);\r\n+        pulse();\r\n+        assertEquals(0, countSymbols(lineChart, \"chart-line-symbol\"));\r\n+\r\n+        lineChart.getData().clear();\r\n+        pulse();\r\n+        lineChart.setCreateSymbols(true);\r\n+        pulse();\r\n+        lineChart.getData().addAll(series1);\r\n+        assertEquals(5, countSymbols(lineChart, \"chart-line-symbol\"));\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testDataItemAdd() {\r\n+        startApp();\r\n+        lineChart.getData().addAll(series1);\r\n+        pulse();\r\n+        series1.getData().add(new XYChart.Data(60d, 30d));\r\n+        pulse();\r\n+        \/\/ 5 stackpane nodes and 1 path node + new stackpane for data added\r\n+        assertEquals(7, XYChartShim.getPlotChildren(lineChart).size());\r\n+    }\r\n+\r\n+     @Test @Ignore\r\n+     \/\/ Ignored because the animation's Timeline doesn't run. It used to be that the item was added before the\r\n+     \/\/ animation was run. Now the item is added as the onFinished handler of the first KeyFrame. Since the\r\n+     \/\/ Timeline doesn't run in the context of the unit test, this test fails. In fact, this test never really\r\n+     \/\/ achieved its purpose.\r\n+    public void testDataItemAddWithAnimation() {\r\n+        startApp();\r\n+        lineChart.setAnimated(true);\r\n+        lineChart.getData().addAll(series1);\r\n+        pulse();\r\n+        series1.getData().add(new XYChart.Data(60d, 30d));\r\n+        pulse();\r\n+        \/\/ 5 stackpane nodes and 1 path node + new stackpane for data added\r\n+        assertEquals(7, XYChartShim.getPlotChildren(lineChart).size());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testDataItemRemove() {\r\n+        startApp();\r\n+        lineChart.getData().addAll(series1);\r\n+        pulse();\r\n+        if (!lineChart.getData().isEmpty()) {\r\n+            series1.getData().remove(0);\r\n+            pulse();\r\n+            \/\/ 4 stackpane nodes and one path node\r\n+            assertEquals(5, XYChartShim.getPlotChildren(lineChart).size());\r\n+        }\r\n+    }\r\n+\r\n+     @Test\r\n+    public void testSeriesAddWithAnimation() {\r\n+        startApp();\r\n+        lineChart.setAnimated(true);\r\n+        final XYChart.Series<Number, Number> series2 = new XYChart.Series<Number, Number>();\r\n+        series1.getData().add(new XYChart.Data(15d, 40d));\r\n+        series1.getData().add(new XYChart.Data(25d, 10d));\r\n+        series1.getData().add(new XYChart.Data(40d, 35d));\r\n+        lineChart.getData().addAll(series1);\r\n+        pulse();\r\n+        assertEquals(true, lineChart.getAnimated());\r\n+    }\r\n+\r\n+    @Override\r\n+    void checkSeriesStyleClasses(XYChart.Series<?, ?> series,\r\n+            int seriesIndex, int colorIndex) {\r\n+        Node seriesLine = series.getNode();\r\n+        checkStyleClass(seriesLine, \"series\"+seriesIndex, \"default-color\"+colorIndex);\r\n+    }\r\n+\r\n+    @Override\r\n+    void checkDataStyleClasses(XYChart.Data<?, ?> data,\r\n+            int seriesIndex, int dataIndex, int colorIndex) {\r\n+        Node symbol = data.getNode();\r\n+        checkStyleClass(symbol, \"series\"+seriesIndex, \"data\"+dataIndex, \"default-color\"+colorIndex);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testSeriesRemoveAnimatedStyleClasses() {\r\n+        startApp();\r\n+        \/\/lineChart.setCreateSymbols(false);\r\n+        int nodesPerSeries = 4; \/\/ 3 symbols + 1 path\r\n+        checkSeriesRemoveAnimatedStyleClasses(lineChart, nodesPerSeries, 900);\r\n+    }\r\n+\r\n+    @Test public void testPathInsideXAndInsideYBounds() {\r\n+        startApp();\r\n+        series1.getData().add(new XYChart.Data<>(85d, 15d)); \/\/ upper bound is 90, 30\r\n+        lineChart.getData().addAll(series1);\r\n+        pulse();\r\n+\r\n+        assertArrayEquals(convertSeriesDataToPoint2D(series1).toArray(), findDataPointsFromPathLine(lineChart).toArray());\r\n+    }\r\n+\r\n+    @Test public void testPathOutsideXBoundsWithDuplicateXAndHigherY() {\r\n+        startApp();\r\n+        series1.getData().add(new XYChart.Data(100d, 20d)); \/\/ upper bound is 90\r\n+        series1.getData().add(new XYChart.Data(100d, 50d));\r\n+        lineChart.getData().addAll(series1);\r\n+        pulse();\r\n+\r\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\r\n+        expectedSeries.getData().addAll(\r\n+                new XYChart.Data<>(10d, 10d),\r\n+                new XYChart.Data<>(25d, 20d),\r\n+                new XYChart.Data<>(30d, 15d),\r\n+                new XYChart.Data<>(50d, 15d),\r\n+                new XYChart.Data<>(80d, 10d),\r\n+                new XYChart.Data<>(100d, 20d)\r\n+        );\r\n+\r\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\r\n+    }\r\n+\r\n+    @Test public void testPathOutsideXBoundsWithDuplicateXAndLowerY() {\r\n+        startApp();\r\n+        series1.getData().add(new XYChart.Data(100d, 20d)); \/\/ upper bound is 90\r\n+        series1.getData().add(new XYChart.Data(100d, 15d));\r\n+        lineChart.getData().addAll(series1);\r\n+        pulse();\r\n+\r\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\r\n+        expectedSeries.getData().addAll(\r\n+                new XYChart.Data<>(10d, 10d),\r\n+                new XYChart.Data<>(25d, 20d),\r\n+                new XYChart.Data<>(30d, 15d),\r\n+                new XYChart.Data<>(50d, 15d),\r\n+                new XYChart.Data<>(80d, 10d),\r\n+                new XYChart.Data<>(100d, 20d)\r\n+        );\r\n+\r\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\r\n+    }\r\n+\r\n+    @Test public void testPathOutsideYBoundsWithDuplicateYAndHigherX() {\r\n+        startApp();\r\n+        series1.getData().add(new XYChart.Data(80d, 32d)); \/\/ upper bound is 30\r\n+        series1.getData().add(new XYChart.Data(90d, 32d));\r\n+        lineChart.getData().addAll(series1);\r\n+        pulse();\r\n+\r\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\r\n+        expectedSeries.getData().addAll(\r\n+                new XYChart.Data<>(10d, 10d),\r\n+                new XYChart.Data<>(25d, 20d),\r\n+                new XYChart.Data<>(30d, 15d),\r\n+                new XYChart.Data<>(50d, 15d),\r\n+                new XYChart.Data<>(80d, 10d),\r\n+                new XYChart.Data<>(80d, 32d),\r\n+                new XYChart.Data<>(90d, 32d)\r\n+        );\r\n+\r\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\r\n+    }\r\n+\r\n+    @Test public void testPathOutsideYBoundsWithDuplicateYAndLowerX() {\r\n+        startApp();\r\n+        series1.getData().add(new XYChart.Data(85d, 40d)); \/\/ upper bound is 30\r\n+        series1.getData().add(new XYChart.Data(90d, 40d));\r\n+        lineChart.getData().addAll(series1);\r\n+        pulse();\r\n+\r\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\r\n+        expectedSeries.getData().addAll(\r\n+                new XYChart.Data<>(10d, 10d),\r\n+                new XYChart.Data<>(25d, 20d),\r\n+                new XYChart.Data<>(30d, 15d),\r\n+                new XYChart.Data<>(50d, 15d),\r\n+                new XYChart.Data<>(80d, 10d),\r\n+                new XYChart.Data<>(85d, 40d),\r\n+                new XYChart.Data<>(90d, 40d)\r\n+        );\r\n+\r\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\r\n+    }\r\n+\r\n+    @Test public void testPathOutsideXAndYBoundsWithDuplicateXAndHigherY() {\r\n+        startApp();\r\n+        series1.getData().add(new XYChart.Data<>(95d, 35d)); \/\/ upper bound is 90,30\r\n+        series1.getData().add(new XYChart.Data<>(95d, 40d));\r\n+        lineChart.getData().addAll(series1);\r\n+        pulse();\r\n+\r\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\r\n+        expectedSeries.getData().addAll(\r\n+                new XYChart.Data<>(10d, 10d),\r\n+                new XYChart.Data<>(25d, 20d),\r\n+                new XYChart.Data<>(30d, 15d),\r\n+                new XYChart.Data<>(50d, 15d),\r\n+                new XYChart.Data<>(80d, 10d),\r\n+                new XYChart.Data<>(95d, 35d)\r\n+        );\r\n+\r\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\r\n+    }\r\n+\r\n+    @Test public void testPathOutsideXAndYBoundsWithDuplicateXAndLowerY() {\r\n+        startApp();\r\n+        series1.getData().add(new XYChart.Data<>(95d, 40d)); \/\/ upper bound is 90,30\r\n+        series1.getData().add(new XYChart.Data<>(95d, 35d));\r\n+        lineChart.getData().addAll(series1);\r\n+        pulse();\r\n+\r\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\r\n+        expectedSeries.getData().addAll(\r\n+                new XYChart.Data<>(10d, 10d),\r\n+                new XYChart.Data<>(25d, 20d),\r\n+                new XYChart.Data<>(30d, 15d),\r\n+                new XYChart.Data<>(50d, 15d),\r\n+                new XYChart.Data<>(80d, 10d),\r\n+                new XYChart.Data<>(95d, 40d)\r\n+        );\r\n+\r\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\r\n+    }\r\n+\r\n+    @Test public void testPathOutsideXAndYBoundsWithDuplicateYAndHigherX() {\r\n+        startApp();\r\n+        series1.getData().add(new XYChart.Data<>(95d, 32d)); \/\/ upper bound is 90,30\r\n+        series1.getData().add(new XYChart.Data<>(100d, 32d));\r\n+        lineChart.getData().addAll(series1);\r\n+        pulse();\r\n+\r\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\r\n+        expectedSeries.getData().addAll(\r\n+                new XYChart.Data<>(10d, 10d),\r\n+                new XYChart.Data<>(25d, 20d),\r\n+                new XYChart.Data<>(30d, 15d),\r\n+                new XYChart.Data<>(50d, 15d),\r\n+                new XYChart.Data<>(80d, 10d),\r\n+                new XYChart.Data<>(95d, 32d)\r\n+        );\r\n+\r\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\r\n+    }\r\n+\r\n+    @Test public void testPathOutsideXAndYBoundsWithDuplicateYAndLowerX() {\r\n+        startApp();\r\n+        series1.getData().add(new XYChart.Data<>(100d, 40d)); \/\/ upper bound is 90,30\r\n+        series1.getData().add(new XYChart.Data<>(95d, 40d));\r\n+        lineChart.getData().addAll(series1);\r\n+        pulse();\r\n+\r\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\r\n+        expectedSeries.getData().addAll(\r\n+                new XYChart.Data<>(10d, 10d),\r\n+                new XYChart.Data<>(25d, 20d),\r\n+                new XYChart.Data<>(30d, 15d),\r\n+                new XYChart.Data<>(50d, 15d),\r\n+                new XYChart.Data<>(80d, 10d),\r\n+                new XYChart.Data<>(95d, 40d)\r\n+        );\r\n+\r\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\r\n+    }\r\n+\r\n+    @Test public void testPathOutsideXBoundsWithDuplicateXAndHigherYWithSortYAxis() {\r\n+        startApp();\r\n+        series1.getData().add(new XYChart.Data(100d, 20d)); \/\/ upper bound is 90\r\n+        series1.getData().add(new XYChart.Data(100d, 50d));\r\n+        lineChart.getData().addAll(series1);\r\n+        lineChart.setAxisSortingPolicy(LineChart.SortingPolicy.Y_AXIS);\r\n+        pulse();\r\n+\r\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\r\n+        expectedSeries.getData().addAll(\r\n+                new XYChart.Data<>(100d, 50d),\r\n+                new XYChart.Data<>(25d, 20d),\r\n+                new XYChart.Data<>(100d, 20d),\r\n+                new XYChart.Data<>(30d, 15d),\r\n+                new XYChart.Data<>(50d, 15d),\r\n+                new XYChart.Data<>(10d, 10d),\r\n+                new XYChart.Data<>(80d, 10d)\r\n+        );\r\n+\r\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\r\n+    }\r\n+\r\n+    @Test public void testPathOutsideXBoundsWithDuplicateXAndLowerYWithSortYAxis() {\r\n+        startApp();\r\n+        series1.getData().add(new XYChart.Data(100d, 20d)); \/\/ upper bound is 90\r\n+        series1.getData().add(new XYChart.Data(100d, 15d));\r\n+        lineChart.getData().addAll(series1);\r\n+        lineChart.setAxisSortingPolicy(LineChart.SortingPolicy.Y_AXIS);\r\n+        pulse();\r\n+\r\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\r\n+        expectedSeries.getData().addAll(\r\n+                new XYChart.Data<>(25d, 20d),\r\n+                new XYChart.Data<>(100d, 20d),\r\n+                new XYChart.Data<>(30d, 15d),\r\n+                new XYChart.Data<>(50d, 15d),\r\n+                new XYChart.Data<>(100d, 15d),\r\n+                new XYChart.Data<>(10d, 10d),\r\n+                new XYChart.Data<>(80d, 10d)\r\n+        );\r\n+\r\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\r\n+    }\r\n+\r\n+    @Test public void testPathOutsideYBoundsWithDuplicateYAndHigherXWithSortYAxis() {\r\n+        startApp();\r\n+        series1.getData().add(new XYChart.Data(80d, 32d)); \/\/ upper bound is 30\r\n+        series1.getData().add(new XYChart.Data(90d, 32d));\r\n+        lineChart.getData().addAll(series1);\r\n+        lineChart.setAxisSortingPolicy(LineChart.SortingPolicy.Y_AXIS);\r\n+        pulse();\r\n+\r\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\r\n+        expectedSeries.getData().addAll(\r\n+                new XYChart.Data<>(80d, 32d),\r\n+                new XYChart.Data<>(25d, 20d),\r\n+                new XYChart.Data<>(30d, 15d),\r\n+                new XYChart.Data<>(50d, 15d),\r\n+                new XYChart.Data<>(10d, 10d),\r\n+                new XYChart.Data<>(80d, 10d)\r\n+        );\r\n+\r\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\r\n+    }\r\n+\r\n+    @Test public void testPathOutsideYBoundsWithDuplicateYAndLowerXWithSortYAxis() {\r\n+        startApp();\r\n+        series1.getData().add(new XYChart.Data(80d, 40d)); \/\/ upper bound is 30\r\n+        series1.getData().add(new XYChart.Data(70d, 40d));\r\n+        lineChart.getData().addAll(series1);\r\n+        lineChart.setAxisSortingPolicy(LineChart.SortingPolicy.Y_AXIS);\r\n+        pulse();\r\n+\r\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\r\n+        expectedSeries.getData().addAll(\r\n+                new XYChart.Data<>(80d, 40d),\r\n+                new XYChart.Data<>(25d, 20d),\r\n+                new XYChart.Data<>(30d, 15d),\r\n+                new XYChart.Data<>(50d, 15d),\r\n+                new XYChart.Data<>(10d, 10d),\r\n+                new XYChart.Data<>(80d, 10d)\r\n+        );\r\n+\r\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\r\n+    }\r\n+\r\n+    @Test public void testPathOutsideXAndYBoundsWithDuplicateXAndHigherYWithSortYAxis() {\r\n+        startApp();\r\n+        series1.getData().add(new XYChart.Data<>(95d, 35d)); \/\/ upper bound is 90,30\r\n+        series1.getData().add(new XYChart.Data<>(95d, 40d));\r\n+        lineChart.getData().addAll(series1);\r\n+        lineChart.setAxisSortingPolicy(LineChart.SortingPolicy.Y_AXIS);\r\n+        pulse();\r\n+\r\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\r\n+        expectedSeries.getData().addAll(\r\n+                new XYChart.Data<>(95d, 35d),\r\n+                new XYChart.Data<>(25d, 20d),\r\n+                new XYChart.Data<>(30d, 15d),\r\n+                new XYChart.Data<>(50d, 15d),\r\n+                new XYChart.Data<>(10d, 10d),\r\n+                new XYChart.Data<>(80d, 10d)\r\n+        );\r\n+\r\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\r\n+    }\r\n+\r\n+    @Test public void testPathOutsideXAndYBoundsWithDuplicateXAndLowerYWithSortYAxis() {\r\n+        startApp();\r\n+        series1.getData().add(new XYChart.Data<>(95d, 40d)); \/\/ upper bound is 90,30\r\n+        series1.getData().add(new XYChart.Data<>(95d, 35d));\r\n+        lineChart.getData().addAll(series1);\r\n+        lineChart.setAxisSortingPolicy(LineChart.SortingPolicy.Y_AXIS);\r\n+        pulse();\r\n+\r\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\r\n+        expectedSeries.getData().addAll(\r\n+                new XYChart.Data<>(95d, 35d),\r\n+                new XYChart.Data<>(25d, 20d),\r\n+                new XYChart.Data<>(30d, 15d),\r\n+                new XYChart.Data<>(50d, 15d),\r\n+                new XYChart.Data<>(10d, 10d),\r\n+                new XYChart.Data<>(80d, 10d)\r\n+        );\r\n+\r\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\r\n+    }\r\n+\r\n+    @Test public void testPathOutsideXAndYBoundsWithDuplicateYAndHigherXWithSortYAxis() {\r\n+        startApp();\r\n+        series1.getData().add(new XYChart.Data<>(95d, 32d)); \/\/ upper bound is 90,30\r\n+        series1.getData().add(new XYChart.Data<>(100d, 32d));\r\n+        lineChart.getData().addAll(series1);\r\n+        lineChart.setAxisSortingPolicy(LineChart.SortingPolicy.Y_AXIS);\r\n+        pulse();\r\n+\r\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\r\n+        expectedSeries.getData().addAll(\r\n+                new XYChart.Data<>(95d, 32d),\r\n+                new XYChart.Data<>(25d, 20d),\r\n+                new XYChart.Data<>(30d, 15d),\r\n+                new XYChart.Data<>(50d, 15d),\r\n+                new XYChart.Data<>(10d, 10d),\r\n+                new XYChart.Data<>(80d, 10d)\r\n+        );\r\n+\r\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\r\n+    }\r\n+\r\n+    @Test public void testPathOutsideXAndYBoundsWithDuplicateYAndLowerXWithSortYAxis() {\r\n+        startApp();\r\n+        series1.getData().add(new XYChart.Data<>(100d, 40d)); \/\/ upper bound is 90,30\r\n+        series1.getData().add(new XYChart.Data<>(95d, 40d));\r\n+        lineChart.getData().addAll(series1);\r\n+        lineChart.setAxisSortingPolicy(LineChart.SortingPolicy.Y_AXIS);\r\n+        pulse();\r\n+\r\n+        XYChart.Series<Number, Number> expectedSeries = new XYChart.Series<>();\r\n+        expectedSeries.getData().addAll(\r\n+                new XYChart.Data<>(100d, 40d),\r\n+                new XYChart.Data<>(25d, 20d),\r\n+                new XYChart.Data<>(30d, 15d),\r\n+                new XYChart.Data<>(50d, 15d),\r\n+                new XYChart.Data<>(10d, 10d),\r\n+                new XYChart.Data<>(80d, 10d)\r\n+        );\r\n+\r\n+        assertArrayEquals(convertSeriesDataToPoint2D(expectedSeries).toArray(), findDataPointsFromPathLine(lineChart).toArray());\r\n+    }\r\n+\r\n+    private List<Point2D> convertSeriesDataToPoint2D(XYChart.Series<Number, Number> series) {\r\n+        return series.getData().stream()\r\n+                .map(data -> new Point2D(data.getXValue().doubleValue(), data.getYValue().doubleValue()))\r\n+                .collect(Collectors.toList());\r\n+    }\r\n+\r\n+    private List<Point2D> findDataPointsFromPathLine(LineChart<Number, Number> lineChart) {\r\n+        final NumberAxis xAxis = (NumberAxis) lineChart.getXAxis();\r\n+        final NumberAxis yAxis = (NumberAxis) lineChart.getYAxis();\r\n+\r\n+        Path fillPath = (Path) lineChart.getData().get(0).getNode();\r\n+        ObservableList<PathElement> fillElements = fillPath.getElements();\r\n+\r\n+        List<Point2D> data = fillElements.stream()\r\n+                .filter(pathElement -> pathElement instanceof LineTo)\r\n+                .map(pathElement -> (LineTo) pathElement)\r\n+                .map(lineTo -> new Point2D(\r\n+                        xAxis.getValueForDisplay(lineTo.getX()).doubleValue(),\r\n+                        yAxis.getValueForDisplay(lineTo.getY()).doubleValue())\r\n+                )\r\n+                .collect(Collectors.toList());\r\n+        return data.subList(0, data.size());\r\n+    }\r\n+}\r\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/LineChartTest.java","additions":535,"deletions":162,"binary":false,"changes":697,"status":"modified"}]}