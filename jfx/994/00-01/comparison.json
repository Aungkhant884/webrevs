{"files":[{"patch":"","filename":"tests\/manual\/clipboard\/.classpath","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"tests\/manual\/UI\/.classpath","status":"copied"},{"patch":"@@ -3,1 +3,1 @@\n-    <name>manualTests-desktop<\/name>\n+    <name>manualTests-clipboard<\/name>\n","filename":"tests\/manual\/clipboard\/.project","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"tests\/manual\/desktop\/.project","status":"copied"},{"patch":"","filename":"tests\/manual\/clipboard\/.settings\/org.eclipse.core.resources.prefs","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":".settings\/org.eclipse.core.resources.prefs","status":"copied"},{"patch":"@@ -0,0 +1,208 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.event.ActionEvent;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.stage.Stage;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.util.ArrayList;\n+\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.Alert.AlertType;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.Clipboard;\n+import javafx.scene.input.ClipboardContent;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+\n+\/*\n+ * @bug 8290092\n+ *\/\n+public class ClipboardExtImageTest extends Application {\n+    Label testStatus = new Label();\n+    ImageView clipboardImageView = new ImageView();\n+\n+    private static boolean isWindows() {\n+        return System.getProperty(\"os.name\").contains(\"Windows\");\n+    }\n+\n+    private class TempFileFilter implements FilenameFilter {\n+        @Override\n+        public boolean accept(File dir, String filename) {\n+            return filename.toLowerCase().endsWith(\".tmp\");\n+        }\n+    }\n+\n+    private void testTemporaryFilesLeftover() throws Exception {\n+        if (!Clipboard.getSystemClipboard().hasImage()) {\n+            testStatus.setText(\"No Image found in system clipboard - copy one before running the test\");\n+            testStatus.setTextFill(Color.DARKORANGE);\n+            return;\n+        }\n+\n+        \/\/ Filter for temporary files produced by Windows system clipboard implementation\n+\n+        \/\/ List all files in java.io.tmpdir\n+        File tmpPath = new File(System.getProperty(\"java.io.tmpdir\"));\n+        File[] preGetTmpFiles = tmpPath.listFiles(new TempFileFilter());\n+\n+        Image i = Clipboard.getSystemClipboard().getImage();\n+\n+        File[] postGetTmpFiles = tmpPath.listFiles(new TempFileFilter());\n+\n+        if (i != null) {\n+            clipboardImageView.setImage(i);\n+        }\n+\n+        for (File f: preGetTmpFiles) {\n+            System.err.println(\"tmpFile: \" + f.getPath());\n+        }\n+\n+        for (File f: postGetTmpFiles) {\n+            System.err.println(\"newTmpFile: \" + f.getPath());\n+        }\n+\n+        ArrayList<String> leftovers = new ArrayList<String>();\n+        for (File postf: postGetTmpFiles) {\n+            boolean existed = false;\n+            for (File pref: preGetTmpFiles) {\n+                if (postf.getName().equals(pref.getName())) {\n+                    existed = true;\n+                    break;\n+                }\n+            }\n+\n+            \/\/ every file from temp file list post-getImage() must've also existed pre-getImage()\n+            \/\/ if that's not the case, then we most probably left some temp files after ourselves.\n+            if (!existed) {\n+                leftovers.add(postf.getName());\n+            }\n+        }\n+\n+        if (!leftovers.isEmpty()) {\n+            testStatus.setText(\"FAILED (File \" + leftovers.get(0) + \" was left behind)\");\n+            testStatus.setTextFill(Color.RED);\n+        } else {\n+            testStatus.setText(\"PASSED (No spare temporary files found)\");\n+            testStatus.setTextFill(Color.GREEN);\n+        }\n+    }\n+\n+    private Scene createScene() {\n+        Label warn = new Label();\n+        warn.setText(\"This test refers to a Windows-specific issue.\");\n+\n+        Label instructions = new Label();\n+        instructions.setText(\n+            \"Follow these steps to test the scenario:\\n\" +\n+            \" 1. Open your web browser, find a random picture and copy it to system's Clipboard\\n\" +\n+            \" 2. Click on \\\"Test - Read Clipboard\\\" button\\n\" +\n+            \"If image was fetched from Clipboard properly, it will show in the scroll pane below.\\n\" +\n+            \"After the test is run there should be no extra temporary files left by JFX in the TMP dir.\"\n+        );\n+        instructions.setMinHeight(90.0);\n+\n+        Label testStatusHeader = new Label();\n+        testStatusHeader.setText(\"Test status:\");\n+\n+        testStatus.setText(\"...\");\n+\n+        Button testButton = new Button(\"Test - Read Clipboard\");\n+        testButton.setOnAction((ActionEvent) -> {\n+            try {\n+                testTemporaryFilesLeftover();\n+            } catch (Exception e) {\n+                testStatus.setText(\"FAILED (Caught exception: \" + e.getMessage() + \")\");\n+                testStatus.setTextFill(Color.RED);\n+            }\n+        });\n+\n+        Button openTmpButton = new Button(\"Open TMP dir\");\n+        openTmpButton.setOnAction((ActionEvent) -> {\n+            try {\n+                if (isWindows()) {\n+                    Runtime.getRuntime().exec(new String[]{\"explorer.exe\", new File(System.getProperty(\"java.io.tmpdir\")).getAbsolutePath()});\n+                }\n+            } catch (Exception e) {\n+                Alert alert = new Alert(AlertType.ERROR);\n+                alert.setTitle(\"Failed to open TMP dir\");\n+                alert.setContentText(\"TMP dir failed to open: caught Exception \" + e.getMessage());\n+                alert.show();\n+            }\n+        });\n+\n+        if (!isWindows()) {\n+            openTmpButton.setDisable(true);\n+        }\n+\n+        clipboardImageView.setPickOnBounds(true);\n+        clipboardImageView.setPreserveRatio(true);\n+\n+        ScrollPane pane = new ScrollPane(clipboardImageView);\n+        pane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);\n+        pane.setHbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);\n+        pane.setFitToHeight(true);\n+        pane.setFitToWidth(true);\n+\n+        VBox box = new VBox(warn, instructions, testStatusHeader, testStatus, testButton, openTmpButton, pane);\n+        box.setAlignment(Pos.TOP_LEFT);\n+        box.setSpacing(5.0);\n+        box.setFillWidth(true);\n+        box.setVgrow(pane, Priority.ALWAYS);\n+        box.setPadding(new Insets(15.0));\n+\n+        return new Scene(box, 800, 600);\n+    }\n+\n+    @Override\n+    public void start(Stage primaryStage) throws Exception {\n+        try {\n+            \/*if (!isWindows()) {\n+                System.out.println(\"This test refers to Windows-only issue and won't work on other platforms. Exiting.\");\n+                Platform.exit();\n+            }*\/\n+\n+            primaryStage.setScene(createScene());\n+            primaryStage.show();\n+        } catch (Exception e) {\n+            System.err.println(\"Exception caught: \" + e.getMessage());\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        launch(args);\n+    }\n+}\n","filename":"tests\/manual\/clipboard\/ClipboardExtImageTest.java","additions":208,"deletions":0,"binary":false,"changes":208,"status":"added"}]}