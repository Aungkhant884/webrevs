{"files":[{"patch":"@@ -2321,1 +2321,1 @@\n-              double estlength = getOrCreateCellSize(index);\n+        double estlength = getOrCreateCellSize(index);\n@@ -2323,1 +2323,1 @@\n-        while ((estlength < viewportLength) && (++i < getCellCount())){\n+        while ((estlength < viewportLength) && (++i < getCellCount())) {\n@@ -2328,1 +2328,1 @@\n-            while ((estlength < viewportLength) && (--j > 0)) {\n+            while ((estlength < viewportLength) && (j-- > 0)) {\n@@ -3095,1 +3095,1 @@\n-        this.estimatedSize = cnt == 0 ? 1d: tot * itemCount \/ cnt;\n+        this.estimatedSize = cnt == 0 ? 1d : tot * itemCount \/ cnt;\n@@ -3098,1 +3098,1 @@\n-        if (keepRatio ) {\n+        if (keepRatio) {\n@@ -3100,1 +3100,1 @@\n-            for (int i = 0; i < oldIndex ; i++) {\n+            for (int i = 0; i < oldIndex; i++) {\n@@ -3102,1 +3102,3 @@\n-                if (h < 0) h = estSize;\n+                if (h < 0) {\n+                    h = estSize;\n+                }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/VirtualFlow.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2188,2 +2188,3 @@\n-    @Test public void testUnfixedCellScrollResize() {\n-        final ObservableList<Integer> items = FXCollections.observableArrayList(300,300,70,20);\n+    @Test\n+    public void testUnfixedCellScrollResize() {\n+        final ObservableList<Integer> items = FXCollections.observableArrayList(300, 300, 70, 20);\n@@ -2197,1 +2198,1 @@\n-                if (!empty && (item!=null)) {\n+                if (!empty && (item != null)) {\n@@ -2212,1 +2213,1 @@\n-                assertEquals(\"Last cell doesn't end at listview end\", cell.getLayoutY(), viewportLength - 20,1.);\n+                assertEquals(\"Last cell doesn't end at listview end\", cell.getLayoutY(), viewportLength - 20, 1.);\n@@ -2216,1 +2217,1 @@\n-                assertEquals(\"Secondlast cell doesn't end properly\", cell.getLayoutY(), viewportLength - 20 - 70,1.);\n+                assertEquals(\"Secondlast cell doesn't end properly\", cell.getLayoutY(), viewportLength - 20 - 70, 1.);\n@@ -2220,2 +2221,2 @@\n-        assertTrue (got20);\n-        assertTrue (got70);\n+        assertTrue(got20);\n+        assertTrue(got70);\n@@ -2224,1 +2225,1 @@\n-        list.addAll(300,300,20,21);\n+        list.addAll(300, 300, 20, 21);\n@@ -2233,1 +2234,1 @@\n-                assertEquals(\"Last cell doesn't end at listview end\", cell.getLayoutY(), viewportLength - 21,1.);\n+                assertEquals(\"Last cell doesn't end at listview end\", cell.getLayoutY(), viewportLength - 21, 1.);\n@@ -2237,1 +2238,1 @@\n-                assertEquals(\"Secondlast cell doesn't end properly\", cell.getLayoutY(), viewportLength - 21 - 20,1.);\n+                assertEquals(\"Secondlast cell doesn't end properly\", cell.getLayoutY(), viewportLength - 21 - 20, 1.);\n@@ -2241,2 +2242,2 @@\n-        assertTrue (got20);\n-        assertTrue (got21);\n+        assertTrue(got20);\n+        assertTrue(got21);\n@@ -2245,2 +2246,2 @@\n-\n-    @Test public void testNoEmptyEnd() {\n+    @Test\n+    public void testNoEmptyEnd() {\n@@ -2255,1 +2256,1 @@\n-                if (!empty && (item!=null)) {\n+                if (!empty && (item != null)) {\n@@ -2269,2 +2270,2 @@\n-            int tens = Math.min(15-i,7);\n-            int hundreds = Math.max(8-i,0);\n+            int tens = Math.min(15 - i, 7);\n+            int hundreds = Math.max(8 - i, 0);\n@@ -2279,2 +2280,2 @@\n-\n-    @Test public void testMoreUnfixedCellScrollResize() {\n+    @Test\n+    public void testMoreUnfixedCellScrollResize() {\n@@ -2283,4 +2284,4 @@\n-        testScrollTo(360,3, new Integer[]{20,20,20,20,20,20,20,20,20,20,20,20});\n-        testScrollTo(360,3, new Integer[]{20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20});\n-        testScrollTo(360,1, new Integer[]{20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20});\n-        testScrollTo(360,-1, new Integer[]{20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20});\n+        testScrollTo(360, 3, new Integer[]{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(360, 3, new Integer[]{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(360, 1, new Integer[]{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(360, -1, new Integer[]{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20});\n@@ -2289,2 +2290,2 @@\n-        testScrollTo(360,3, new Integer[]{100, 100, 100, 100, 100, 100, 100, 100, 100});\n-        testScrollTo(360,-1, new Integer[]{100, 100, 100, 100, 100, 100, 100, 100, 100});\n+        testScrollTo(360, 3, new Integer[]{100, 100, 100, 100, 100, 100, 100, 100, 100});\n+        testScrollTo(360, -1, new Integer[]{100, 100, 100, 100, 100, 100, 100, 100, 100});\n@@ -2293,8 +2294,8 @@\n-        testScrollTo(360,2, new Integer[]{300,300,70,20});\n-        testScrollTo(400,2, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n-        testScrollTo(400,-1, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n-        testScrollTo(400,3, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n-        testScrollTo(400,-1,new Integer[]{200, 200, 200, 200, 200, 200 ,200 ,200, 20, 20, 20, 20, 20, 20, 500, 20, 500, 20, 500});\n-        testScrollTo(400,-1,new Integer[]{200, 200, 200, 200, 200, 200 ,200 ,200, 20, 20, 20, 20, 20, 20, 400, 20, 400, 20, 400});\n-        testScrollTo(400,2,new Integer[]{500, 500, 20, 20, 100, 100, 100, 100, 100, 100});\n-        testScrollTo(400,8,new Integer[]{500, 500, 20, 20, 100, 100, 100, 100, 100, 100, 300, 300, 300, 300});\n+        testScrollTo(360, 2, new Integer[]{300, 300, 70, 20});\n+        testScrollTo(400, 2, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(400, -1, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(400, 3, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(400, -1, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 500, 20, 500, 20, 500});\n+        testScrollTo(400, -1, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 400, 20, 400, 20, 400});\n+        testScrollTo(400, 2, new Integer[]{500, 500, 20, 20, 100, 100, 100, 100, 100, 100});\n+        testScrollTo(400, 8, new Integer[]{500, 500, 20, 20, 100, 100, 100, 100, 100, 100, 300, 300, 300, 300});\n@@ -2302,3 +2303,3 @@\n-        testScrollTo(400,2, new Integer[]{300,300,20,20});\n-        testScrollTo(400,2, new Integer[]{300,300,20,20,200,200});\n-        testScrollTo(400,2, new Integer[]{20,20,20,500,500});\n+        testScrollTo(400, 2, new Integer[]{300, 300, 20, 20});\n+        testScrollTo(400, 2, new Integer[]{300, 300, 20, 20, 200, 200});\n+        testScrollTo(400, 2, new Integer[]{20, 20, 20, 500, 500});\n@@ -2306,7 +2307,7 @@\n-        testScrollTo(400,2, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n-        testScrollTo(400,-1, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n-        testScrollTo(400,3, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n-        testScrollTo(400,-1,new Integer[]{200, 200, 200, 200, 200, 200 ,200 ,200, 20, 20, 20, 20, 20, 20, 500, 20, 500, 20, 500});\n-        testScrollTo(400,-1,new Integer[]{200, 200, 200, 200, 200, 200 ,200 ,200, 20, 20, 20, 20, 20, 20, 400, 20, 400, 20, 400});\n-        testScrollTo(400,2,new Integer[]{500, 500, 20, 20, 100, 100, 100, 100, 100, 100});\n-        testScrollTo(400,2,new Integer[]{500, 500, 500,500,500});\n+        testScrollTo(400, 2, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(400, -1, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(400, 3, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(400, -1, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 500, 20, 500, 20, 500});\n+        testScrollTo(400, -1, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 400, 20, 400, 20, 400});\n+        testScrollTo(400, 2, new Integer[]{500, 500, 20, 20, 100, 100, 100, 100, 100, 100});\n+        testScrollTo(400, 2, new Integer[]{500, 500, 500, 500, 500});\n@@ -2317,1 +2318,1 @@\n-        if(scrollToIndex == -1) {\n+        if (scrollToIndex == -1) {\n@@ -2327,1 +2328,1 @@\n-  public void testScrollTo(boolean addIncremental, boolean layoutTwice, boolean selectIndex, int listViewHeight, int scrollToIndex, Integer[] heights) {\n+    public void testScrollTo(boolean addIncremental, boolean layoutTwice, boolean selectIndex, int listViewHeight, int scrollToIndex, Integer[] heights) {\n@@ -2340,1 +2341,1 @@\n-        if(addIncremental) {\n+        if (addIncremental) {\n@@ -2342,1 +2343,1 @@\n-            for(var height: heights) {\n+            for (var height : heights) {\n@@ -2374,1 +2375,1 @@\n-        for(int height: heights) {\n+        for (int height : heights) {\n@@ -2378,1 +2379,1 @@\n-        for(int i = scrollToIndex; i < heights.length; i += 1) {\n+        for (int i = scrollToIndex; i < heights.length; i += 1) {\n@@ -2386,1 +2387,1 @@\n-        double lastCellSize = heights[heights.length -1];\n+        double lastCellSize = heights[heights.length - 1];\n@@ -2400,1 +2401,1 @@\n-        if(lastCell.isVisible() && sumOfHeights >= viewportLength) {\n+        if (lastCell.isVisible() && sumOfHeights >= viewportLength) {\n@@ -2404,1 +2405,1 @@\n-        if(sumOfHeights < viewportLength) {\n+        if (sumOfHeights < viewportLength) {\n@@ -2406,5 +2407,1 @@\n-            assertEquals(\"Last cell should be at the bottom, if we scroll to it\", lastCell.getLayoutY(), sumOfHeights - lastCellSize,1.);\n-        }\n-        if(shouldScrollToBottom && sumOfHeights > viewportLength) {\n-            \/\/ If we scroll to the bottom, then the last cell should be exactly at the bottom\n-            \/\/ assertEquals(\"\", lastCell.getLayoutY(), viewportLength - lastCellSize,1.);\n+            assertEquals(\"Last cell should be at the bottom, if we scroll to it\", sumOfHeights - lastCellSize, lastCell.getLayoutY(), 1.);\n@@ -2412,1 +2409,1 @@\n-        if(!shouldScrollToBottom && sumOfHeights > viewportLength) {\n+        if (!shouldScrollToBottom && sumOfHeights > viewportLength) {\n@@ -2414,1 +2411,1 @@\n-            assertEquals(\"Our cell mut be at the top\", scrollToCell.getLayoutY(), 0,1.);\n+            assertEquals(\"Our cell mut be at the top\", 0, scrollToCell.getLayoutY(), 1.);\n@@ -2416,1 +2413,1 @@\n-    \/\/ Additional Tests:\n+        \/\/ Additional Tests:\n@@ -2418,1 +2415,1 @@\n-        if(previousLayoutY == 0) {\n+        if (previousLayoutY == 0) {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewTest.java","additions":58,"deletions":61,"binary":false,"changes":119,"status":"modified"}]}