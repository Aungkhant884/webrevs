{"files":[{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.prism.es2;\n-\n-\n-\n-class EGLFBGLContext extends GLContext {\n-\n-    private static native long nInitialize(long nativeDInfo, long nativePFInfo,\n-                                           boolean vSyncRequest);\n-    private static native long nGetNativeHandle(long nativeCtxInfo);\n-    private static native void nMakeCurrent(long nativeCtxInfo, long nativeDInfo);\n-\n-    EGLFBGLContext(long nativeCtxInfo) {\n-        this.nativeCtxInfo = nativeCtxInfo;\n-    }\n-\n-    EGLFBGLContext(GLDrawable drawable, GLPixelFormat pixelFormat,\n-                          boolean vSyncRequest) {\n-\n-        \/\/ holds the list of attributes to be translated for native call\n-        int attrArr[] = new int[GLPixelFormat.Attributes.NUM_ITEMS];\n-\n-        GLPixelFormat.Attributes attrs = pixelFormat.getAttributes();\n-\n-        attrArr[GLPixelFormat.Attributes.RED_SIZE] = attrs.getRedSize();\n-        attrArr[GLPixelFormat.Attributes.GREEN_SIZE] = attrs.getGreenSize();\n-        attrArr[GLPixelFormat.Attributes.BLUE_SIZE] = attrs.getBlueSize();\n-        attrArr[GLPixelFormat.Attributes.ALPHA_SIZE] = attrs.getAlphaSize();\n-        attrArr[GLPixelFormat.Attributes.DEPTH_SIZE] = attrs.getDepthSize();\n-        attrArr[GLPixelFormat.Attributes.DOUBLEBUFFER] = attrs.isDoubleBuffer() ? 1 : 0;\n-        attrArr[GLPixelFormat.Attributes.ONSCREEN] = attrs.isOnScreen() ? 1 : 0;\n-\n-        \/\/ return the context info object created on the default screen\n-        nativeCtxInfo = nInitialize(drawable.getNativeDrawableInfo(),\n-                                    pixelFormat.getNativePFInfo(), vSyncRequest);\n-    }\n-\n-    @Override\n-    long getNativeHandle() {\n-        return nGetNativeHandle(nativeCtxInfo);\n-    }\n-\n-    @Override\n-    void makeCurrent(GLDrawable drawable) {\n-        nMakeCurrent(nativeCtxInfo, drawable.getNativeDrawableInfo());\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/EGLFBGLContext.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.prism.es2;\n-\n-import com.sun.prism.paint.Color;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n-\n-class EGLFBGLDrawable extends GLDrawable {\n-\n-    private static final boolean transparentFramebuffer =\n-            AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> Boolean.getBoolean(\"com.sun.javafx.transparentFramebuffer\"));\n-\n-    private static native long nCreateDrawable(long nativeWindow, long nativeCtxInfo);\n-    private static native long nGetDummyDrawable(long nativeCtxInfo);\n-    private static native boolean nSwapBuffers(long nativeDInfo);\n-    boolean isDummy = false;\n-\n-    EGLFBGLDrawable(GLPixelFormat pixelFormat) {\n-\n-        super(0L, pixelFormat);\n-        long nDInfo = nGetDummyDrawable(pixelFormat.getNativePFInfo());\n-        setNativeDrawableInfo(nDInfo);\n-        isDummy = true;\n-    }\n-\n-    EGLFBGLDrawable(long nativeWindow, GLPixelFormat pixelFormat) {\n-        super(nativeWindow, pixelFormat);\n-        long nDInfo = nCreateDrawable(nativeWindow, pixelFormat.getNativePFInfo());\n-        setNativeDrawableInfo(nDInfo);\n-    }\n-\n-    @Override\n-    boolean swapBuffers(GLContext glCtx) {\n-        boolean retval = nSwapBuffers(getNativeDrawableInfo());\n-        \/\/ TODO: This looks hacky. Need to find a better approach.\n-        \/\/ For eglfb, we are painting in Z-order from the back,\n-        \/\/ possibly (likely) with an app that does not cover the\n-        \/\/ full screen. We need to start each paint with an empty canvas.\n-        \/\/ The assumption here was that we would do that by clearing the buffer.\n-        glCtx.clearBuffers(\n-                transparentFramebuffer ? Color.TRANSPARENT : Color.BLACK,\n-                true, true, true);\n-        return retval;\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/EGLFBGLDrawable.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -1,123 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.prism.es2;\n-\n-import com.sun.prism.es2.GLPixelFormat.Attributes;\n-import java.util.HashMap;\n-\n-\n-class EGLFBGLFactory extends GLFactory {\n-\n-    private static native long nInitialize(int[] attrArr);\n-    private static native int nGetAdapterOrdinal(long nativeScreen);\n-    private static native int nGetAdapterCount();\n-    private static native int nGetDefaultScreen(long nativeCtxInfo);\n-    private static native long nGetDisplay(long nativeCtxInfo);\n-    private static native long nGetVisualID(long nativeCtxInfo);\n-    private static native boolean nGetIsGL2(long nativeCtxInfo);\n-\n-    \/\/ Entries must be in lowercase and null string is a wild card\n-    \/\/ For Linux Beta release we will limit es2 pipe qualification check to NVidia GPUs only\n-    private GLGPUInfo preQualificationFilter[] = null;\n-    private GLGPUInfo rejectList[] = null;\n-\n-    @Override\n-    GLGPUInfo[] getPreQualificationFilter() {\n-        return preQualificationFilter;\n-    }\n-\n-    @Override\n-    GLGPUInfo[] getRejectList() {\n-        return rejectList;\n-    }\n-\n-    @Override\n-    GLContext createGLContext(long nativeCtxInfo) {\n-        return new EGLFBGLContext(nativeCtxInfo);\n-    }\n-\n-    @Override\n-    GLContext createGLContext(GLDrawable drawable, GLPixelFormat pixelFormat,\n-                                     GLContext shareCtx, boolean vSyncRequest) {\n-        \/\/ No need to pass down shareCtx as we don't use shared ctx on EGLFB\n-        return new EGLFBGLContext(drawable, pixelFormat, vSyncRequest);\n-    }\n-\n-    @Override\n-    GLDrawable createDummyGLDrawable(GLPixelFormat pixelFormat) {\n-        return new EGLFBGLDrawable(pixelFormat);\n-    }\n-\n-    @Override\n-    GLDrawable createGLDrawable(long nativeWindow, GLPixelFormat pixelFormat) {\n-        return new EGLFBGLDrawable(nativeWindow, pixelFormat);\n-    }\n-\n-    @Override\n-    GLPixelFormat createGLPixelFormat(long nativeScreen, Attributes attributes) {\n-        return new EGLFBGLPixelFormat(nativeScreen, attributes);\n-    }\n-\n-    @Override\n-    boolean initialize(Class psClass, Attributes attrs) {\n-\n-        \/\/ holds the list of attributes to be translated for native call\n-        int attrArr[] = new int[GLPixelFormat.Attributes.NUM_ITEMS];\n-\n-        attrArr[GLPixelFormat.Attributes.RED_SIZE] = attrs.getRedSize();\n-        attrArr[GLPixelFormat.Attributes.GREEN_SIZE] = attrs.getGreenSize();\n-        attrArr[GLPixelFormat.Attributes.BLUE_SIZE] = attrs.getBlueSize();\n-        attrArr[GLPixelFormat.Attributes.ALPHA_SIZE] = attrs.getAlphaSize();\n-        attrArr[GLPixelFormat.Attributes.DEPTH_SIZE] = attrs.getDepthSize();\n-        attrArr[GLPixelFormat.Attributes.DOUBLEBUFFER] = attrs.isDoubleBuffer() ? 1 : 0;\n-        attrArr[GLPixelFormat.Attributes.ONSCREEN] = attrs.isOnScreen() ? 1 : 0;\n-\n-        \/\/ return the context info object create on the default screen\n-        nativeCtxInfo = nInitialize(attrArr);\n-\n-        if (nativeCtxInfo == 0) {\n-            \/\/ current pipe doesn't support this pixelFormat request\n-            return false;\n-        } else {\n-            gl2 = nGetIsGL2(nativeCtxInfo);\n-            return true;\n-        }\n-    }\n-\n-    @Override\n-    int getAdapterCount() {\n-        return nGetAdapterCount();\n-    }\n-\n-    @Override\n-    int getAdapterOrdinal(long nativeScreen) {\n-        return nGetAdapterOrdinal(nativeScreen);\n-    }\n-\n-    @Override\n-    void updateDeviceDetails(HashMap deviceDetails) {\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/EGLFBGLFactory.java","additions":0,"deletions":123,"binary":false,"changes":123,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.prism.es2;\n-\n-\n-\n-class EGLFBGLPixelFormat extends GLPixelFormat {\n-\n-    private static native long nCreatePixelFormat(long nativeScreen, int[] attrArr);\n-    EGLFBGLPixelFormat(long nativeScreen, Attributes attrs) {\n-        super(nativeScreen, attrs);\n-\n-        \/\/ holds the list of attributes to be translated for native call\n-        int attrArr[] = new int[GLPixelFormat.Attributes.NUM_ITEMS];\n-\n-        \/\/System.err.println(\"Attributes = \" + attrs);\n-\n-        attrArr[GLPixelFormat.Attributes.RED_SIZE] = attrs.getRedSize();\n-        attrArr[GLPixelFormat.Attributes.GREEN_SIZE] = attrs.getGreenSize();\n-        attrArr[GLPixelFormat.Attributes.BLUE_SIZE] = attrs.getBlueSize();\n-        attrArr[GLPixelFormat.Attributes.ALPHA_SIZE] = attrs.getAlphaSize();\n-        attrArr[GLPixelFormat.Attributes.DEPTH_SIZE] = attrs.getDepthSize();\n-        attrArr[GLPixelFormat.Attributes.DOUBLEBUFFER] = attrs.isDoubleBuffer() ? 1 : 0;\n-        attrArr[GLPixelFormat.Attributes.ONSCREEN] = attrs.isOnScreen() ? 1 : 0;\n-        long nativePF = nCreatePixelFormat(nativeScreen, attrArr);\n-        setNativePFInfo(nativePF);\n-\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/EGLFBGLPixelFormat.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.prism.es2;\n-\n-\n-\n-\n-class EGLX11GLContext extends GLContext {\n-\n-    private static native long nInitialize(long nativeDInfo, long nativePFInfo,\n-                                           boolean vSyncRequest);\n-    private static native long nGetNativeHandle(long nativeCtxInfo);\n-    private static native void nMakeCurrent(long nativeCtxInfo, long nativeDInfo);\n-\n-    EGLX11GLContext(long nativeCtxInfo) {\n-        this.nativeCtxInfo = nativeCtxInfo;\n-    }\n-\n-    EGLX11GLContext(GLDrawable drawable, GLPixelFormat pixelFormat,\n-                           boolean vSyncRequest) {\n-\n-        \/\/ holds the list of attributes to be translated for native call\n-        int attrArr[] = new int[GLPixelFormat.Attributes.NUM_ITEMS];\n-\n-        GLPixelFormat.Attributes attrs = pixelFormat.getAttributes();\n-\n-        attrArr[GLPixelFormat.Attributes.RED_SIZE] = attrs.getRedSize();\n-        attrArr[GLPixelFormat.Attributes.GREEN_SIZE] = attrs.getGreenSize();\n-        attrArr[GLPixelFormat.Attributes.BLUE_SIZE] = attrs.getBlueSize();\n-        attrArr[GLPixelFormat.Attributes.ALPHA_SIZE] = attrs.getAlphaSize();\n-        attrArr[GLPixelFormat.Attributes.DEPTH_SIZE] = attrs.getDepthSize();\n-        attrArr[GLPixelFormat.Attributes.DOUBLEBUFFER] = attrs.isDoubleBuffer() ? 1 : 0;\n-        attrArr[GLPixelFormat.Attributes.ONSCREEN] = attrs.isOnScreen() ? 1 : 0;\n-\n-        Thread.dumpStack();\n-        \/\/ return the context info object created on the default screen\n-        nativeCtxInfo = nInitialize(drawable.getNativeDrawableInfo(),\n-                                    pixelFormat.getNativePFInfo(), vSyncRequest);\n-    }\n-\n-    @Override\n-    long getNativeHandle() {\n-        return nGetNativeHandle(nativeCtxInfo);\n-    }\n-\n-    @Override\n-    void makeCurrent(GLDrawable drawable) {\n-        nMakeCurrent(nativeCtxInfo, drawable.getNativeDrawableInfo());\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/EGLX11GLContext.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.prism.es2;\n-\n-\n-\n-class EGLX11GLDrawable extends GLDrawable {\n-\n-    private static native long nCreateDrawable(long nativeWindow, long nativeCtxInfo);\n-    private static native long nGetDummyDrawable(long nativeCtxInfo);\n-    private static native boolean nSwapBuffers(long nativeDInfo);\n-\n-    EGLX11GLDrawable(GLPixelFormat pixelFormat) {\n-\n-        super(0L, pixelFormat);\n-        long nDInfo = nGetDummyDrawable(pixelFormat.getNativePFInfo());\n-        setNativeDrawableInfo(nDInfo);\n-    }\n-\n-    EGLX11GLDrawable(long nativeWindow, GLPixelFormat pixelFormat) {\n-        super(nativeWindow, pixelFormat);\n-        long nDInfo = nCreateDrawable(nativeWindow, pixelFormat.getNativePFInfo());\n-        setNativeDrawableInfo(nDInfo);\n-    }\n-\n-    @Override\n-    boolean swapBuffers(GLContext glCtx) {\n-        return nSwapBuffers(getNativeDrawableInfo());\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/EGLX11GLDrawable.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,132 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.prism.es2;\n-\n-import com.sun.prism.es2.GLPixelFormat.Attributes;\n-import com.sun.prism.impl.PrismSettings;\n-import java.util.HashMap;\n-\n-class EGLX11GLFactory extends GLFactory {\n-\n-    private static native long nInitialize(int[] attrArr);\n-    private static native int nGetAdapterOrdinal(long nativeScreen);\n-    private static native int nGetAdapterCount();\n-    private static native int nGetDefaultScreen(long nativeCtxInfo);\n-    private static native long nGetDisplay(long nativeCtxInfo);\n-    private static native long nGetVisualID(long nativeCtxInfo);\n-    private static native boolean nGetIsGL2(long nativeCtxInfo);\n-    private static native void nSetDebug(boolean on);\n-\n-    \/\/ Entries must be in lowercase and null string is a wild card\n-    private GLGPUInfo preQualificationFilter[] = null;\n-    private GLGPUInfo rejectList[] = null;\n-\n-    @Override\n-    GLGPUInfo[] getPreQualificationFilter() {\n-        return preQualificationFilter;\n-    }\n-\n-    @Override\n-    GLGPUInfo[] getRejectList() {\n-        return rejectList;\n-    }\n-\n-    @Override\n-    GLContext createGLContext(long nativeCtxInfo) {\n-        return new EGLX11GLContext(nativeCtxInfo);\n-    }\n-\n-    @Override\n-    GLContext createGLContext(GLDrawable drawable, GLPixelFormat pixelFormat,\n-                                     GLContext shareCtx, boolean vSyncRequest) {\n-        \/\/ No need to pass down shareCtx as we don't use shared ctx on EGLX11\n-        return new EGLX11GLContext(drawable, pixelFormat, vSyncRequest);\n-    }\n-\n-    @Override\n-    GLDrawable createDummyGLDrawable(GLPixelFormat pixelFormat) {\n-        return new EGLX11GLDrawable(pixelFormat);\n-    }\n-\n-    @Override\n-    GLDrawable createGLDrawable(long nativeWindow, GLPixelFormat pixelFormat) {\n-        return new EGLX11GLDrawable(nativeWindow, pixelFormat);\n-    }\n-\n-    @Override\n-    GLPixelFormat createGLPixelFormat(long nativeScreen, Attributes attributes) {\n-        return new EGLX11GLPixelFormat(nativeScreen, attributes);\n-    }\n-\n-    @Override\n-    boolean initialize(Class psClass, Attributes attrs) {\n-\n-        nSetDebug(PrismSettings.debug);\n-\n-        \/\/ holds the list of attributes to be translated for native call\n-        int attrArr[] = new int[GLPixelFormat.Attributes.NUM_ITEMS];\n-\n-        attrArr[GLPixelFormat.Attributes.RED_SIZE] = attrs.getRedSize();\n-        attrArr[GLPixelFormat.Attributes.GREEN_SIZE] = attrs.getGreenSize();\n-        attrArr[GLPixelFormat.Attributes.BLUE_SIZE] = attrs.getBlueSize();\n-        attrArr[GLPixelFormat.Attributes.ALPHA_SIZE] = attrs.getAlphaSize();\n-        attrArr[GLPixelFormat.Attributes.DEPTH_SIZE] = attrs.getDepthSize();\n-        attrArr[GLPixelFormat.Attributes.DOUBLEBUFFER] = attrs.isDoubleBuffer() ? 1 : 0;\n-        attrArr[GLPixelFormat.Attributes.ONSCREEN] = attrs.isOnScreen() ? 1 : 0;\n-\n-        \/\/ return the context info object create on the default screen\n-        nativeCtxInfo = nInitialize(attrArr);\n-\n-        if (PrismSettings.verbose) {\n-            System.err.println(\"  initialize() returns \" + nativeCtxInfo);\n-        }\n-\n-        if (nativeCtxInfo == 0) {\n-            \/\/ current pipe doesn't support this pixelFormat request\n-            return false;\n-        } else {\n-            gl2 = nGetIsGL2(nativeCtxInfo);\n-            return true;\n-        }\n-    }\n-\n-    @Override\n-    int getAdapterCount() {\n-        return nGetAdapterCount();\n-    }\n-\n-    @Override\n-    int getAdapterOrdinal(long nativeScreen) {\n-        return nGetAdapterOrdinal(nativeScreen);\n-    }\n-\n-    @Override\n-    void updateDeviceDetails(HashMap deviceDetails) {\n-        deviceDetails.put(\"XVisualID\", new Long(nGetVisualID(nativeCtxInfo)));\n-        deviceDetails.put(\"XDisplay\", new Long(nGetDisplay(nativeCtxInfo)));\n-        deviceDetails.put(\"XScreenID\", new Integer(nGetDefaultScreen(nativeCtxInfo)));\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/EGLX11GLFactory.java","additions":0,"deletions":132,"binary":false,"changes":132,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.prism.es2;\n-\n-\n-\n-class EGLX11GLPixelFormat extends GLPixelFormat {\n-\n-    private static native long nCreatePixelFormat(long nativeScreen, int[] attrArr);\n-    EGLX11GLPixelFormat(long nativeScreen, Attributes attrs) {\n-        super(nativeScreen, attrs);\n-\n-        \/\/ holds the list of attributes to be translated for native call\n-        int attrArr[] = new int[GLPixelFormat.Attributes.NUM_ITEMS];\n-\n-        \/\/System.err.println(\"Attributes = \" + attrs);\n-\n-        attrArr[GLPixelFormat.Attributes.RED_SIZE] = attrs.getRedSize();\n-        attrArr[GLPixelFormat.Attributes.GREEN_SIZE] = attrs.getGreenSize();\n-        attrArr[GLPixelFormat.Attributes.BLUE_SIZE] = attrs.getBlueSize();\n-        attrArr[GLPixelFormat.Attributes.ALPHA_SIZE] = attrs.getAlphaSize();\n-        attrArr[GLPixelFormat.Attributes.DEPTH_SIZE] = attrs.getDepthSize();\n-        attrArr[GLPixelFormat.Attributes.DOUBLEBUFFER] = attrs.isDoubleBuffer() ? 1 : 0;\n-        attrArr[GLPixelFormat.Attributes.ONSCREEN] = attrs.isOnScreen() ? 1 : 0;\n-        long nativePF = nCreatePixelFormat(nativeScreen, attrArr);\n-        setNativePFInfo(nativePF);\n-\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/EGLX11GLPixelFormat.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -66,5 +66,1 @@\n-            if (\"eglx11\".equals(PlatformUtil.getEmbeddedType()))\n-                factoryClassName = \"com.sun.prism.es2.EGLX11GLFactory\";\n-            else if (\"eglfb\".equals(PlatformUtil.getEmbeddedType()))\n-                factoryClassName = \"com.sun.prism.es2.EGLFBGLFactory\";\n-            else if (\"monocle\".equals(PlatformUtil.getEmbeddedType()))\n+            if (\"monocle\".equals(PlatformUtil.getEmbeddedType()))\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/GLFactory.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,106 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <stdlib.h>\n-#include <assert.h>\n-#include <stdio.h>\n-#include <string.h>\n-#include <math.h>\n-\n-#include <EGL\/egl.h>\n-#include \"eglUtils.h\"\n-\n-#include \"..\/PrismES2Defs.h\"\n-#include \"com_sun_prism_es2_EGLFBGLContext.h\"\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLFBGLContext\n- * Method:    nInitialize\n- * Signature: (JJZ)J\n- *\/\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_EGLFBGLContext_nInitialize\n-(JNIEnv *env, jclass jeglfbcontext, jlong nativeDInfo, jlong nativePFInfo, jboolean SyncRequest) {\n-    DrawableInfo *dInfo = (DrawableInfo *) jlong_to_ptr(nativeDInfo);\n-    PixelFormatInfo *pfInfo = (PixelFormatInfo *) jlong_to_ptr(nativePFInfo);\n-\n-    if ((dInfo == NULL) || (pfInfo == NULL)) {\n-        fprintf(stderr, \"EGLFBGLContext_nInitialize: null dInfo pfInfo\\n\");\n-        return 0;\n-    }\n-    EGLConfig fbConfig = pfInfo->fbConfig;\n-\n-    ContextInfo *ctxInfo = eglContextFromConfig(dInfo->egldisplay, fbConfig);\n-    return ptr_to_jlong(ctxInfo);\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLFBGLContext\n- * Method:    nGetNativeHandle\n- * Signature: (J)J\n- *\/\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_EGLFBGLContext_nGetNativeHandle\n-(JNIEnv *env, jclass jeglfbcontext, jlong nativeCtxInfo) {\n-    ContextInfo *ctxInfo = (ContextInfo *) jlong_to_ptr(nativeCtxInfo);\n-    if (ctxInfo == NULL) {\n-        fprintf(stderr, \" nGetNativeHandle, ContextInfo is null\\n\");\n-        return 0;\n-    }\n-    return ptr_to_jlong(ctxInfo->context);\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLFBGLContext\n- * Method:    nMakeCurrent\n- * Signature: (JJ)V\n- *\/\n-JNIEXPORT void JNICALL Java_com_sun_prism_es2_EGLFBGLContext_nMakeCurrent\n-(JNIEnv *env, jclass jeglfbcontext, jlong nativeCtxInfo, jlong nativeDInfo) {\n-\n-    DrawableInfo *dInfo = (DrawableInfo *) jlong_to_ptr(nativeDInfo);\n-    if (dInfo == NULL) {\n-        fprintf(stderr, \"nMakeCurrent: dIfno is null!!!\\n\");\n-        return;\n-    }\n-\n-    ContextInfo *ctxInfo = (ContextInfo *) jlong_to_ptr(nativeCtxInfo);\n-    if (ctxInfo == NULL) {\n-        fprintf(stderr, \"nMakeCurrent: ctxInfo is null!!!\\n\");\n-        return;\n-    }\n-    int interval;\n-    jboolean vSyncNeeded;\n-\n-    if (!eglMakeCurrent(dInfo->egldisplay, dInfo->eglsurface, dInfo->eglsurface, ctxInfo->context)) {\n-        fprintf(stderr, \"Failed in eglMakeCurrent for %p %p %d\\n\", dInfo->eglsurface, ctxInfo->context, eglGetError());\n-    }\n-    vSyncNeeded = ctxInfo->vSyncRequested && dInfo->onScreen;\n-    if (vSyncNeeded == ctxInfo->state.vSyncEnabled) {\n-        return;\n-    }\n-\n-    return;\n-\n-}\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/eglfb\/EGLFBGLContext.c","additions":0,"deletions":106,"binary":false,"changes":106,"status":"deleted"},{"patch":"@@ -1,133 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <stdlib.h>\n-#include <assert.h>\n-#include <stdio.h>\n-#include <string.h>\n-#include <math.h>\n-\n-#include <EGL\/egl.h>\n-#include <GL\/gl.h>\n-#include \"eglUtils.h\"\n-\n-#include \"com_sun_prism_es2_EGLFBGLContext.h\"\n-\n-extern void initializeDrawableInfo(DrawableInfo *dInfo);\n-extern void deleteDrawableInfo(DrawableInfo *dInfo);\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLFBGLDrawable\n- * Method:    nCreateDrawable\n- * Signature: (JJ)J\n- *\/\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_EGLFBGLDrawable_nCreateDrawable\n-(JNIEnv *env, jclass jeglfbDrawable, jlong nativeWindow, jlong nativePFInfo) {\n-    DrawableInfo *dInfo = NULL;\n-    PixelFormatInfo *pfInfo = (PixelFormatInfo *) jlong_to_ptr(nativePFInfo);\n-    if (pfInfo == NULL) {\n-        fprintf(stderr, \"nCreateDrawable: PixelFormatInfo null\\n\");\n-        return 0;\n-    }\n-    \/* allocate the structure *\/\n-    dInfo = (DrawableInfo *) malloc(sizeof(DrawableInfo));\n-    if (dInfo == NULL) {\n-        fprintf(stderr, \"nCreateDrawable: Failed in malloc\\n\");\n-        return 0;\n-    }\n-\n-    \/* initialize the structure *\/\n-    initializeDrawableInfo(dInfo);\n-    EGLNativeDisplayType disptype = getNativeDisplayType();\n-    if (disptype == (EGLNativeDisplayType)0xBAD) {\n-        fprintf(stderr, \"nCreateDrawable: Failed in getNativeDisplayType\\n\");\n-        return 0;\n-    }\n-    dInfo->egldisplay = eglGetDisplay(disptype);\n-    dInfo->eglsurface = getSharedWindowSurface(dInfo->egldisplay,\n-                                               pfInfo->fbConfig,\n-                                               jlong_to_ptr(nativeWindow));\n-    dInfo->onScreen = JNI_TRUE;\n-\n-    return ptr_to_jlong(dInfo);\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLFBGLDrawable\n- * Method:    nGetDummyDrawable\n- * Signature: (J)J\n- *\/\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_EGLFBGLDrawable_nGetDummyDrawable\n-(JNIEnv *env, jclass jeglfbDrawable, jlong nativePFInfo) {\n-    DrawableInfo *dInfo = NULL;\n-    PixelFormatInfo *pfInfo = (PixelFormatInfo *) jlong_to_ptr(nativePFInfo);\n-    if (pfInfo == NULL) {\n-        fprintf(stderr, \" GetDummyDrawable, PixelFormatInfo is null\\n\");\n-        return 0;\n-    }\n-\n-    \/* allocate the structure *\/\n-    dInfo = (DrawableInfo *) malloc(sizeof(DrawableInfo));\n-    if (dInfo == NULL) {\n-        fprintf(stderr, \"nGetDummyDrawable: Failed in malloc\\n\");\n-        return 0;\n-    }\n-\n-    \/* initialize the structure *\/\n-    initializeDrawableInfo(dInfo);\n-    EGLNativeDisplayType disptype = getNativeDisplayType();\n-    if (disptype == (EGLNativeDisplayType)0xBAD) {\n-        fprintf(stderr, \"nGetDummyDrawable: Failed in getNativeDisplayType\\n\");\n-        free(dInfo);\n-        return 0;\n-    }\n-    dInfo->egldisplay =\n-        eglGetDisplay(disptype);\n-    dInfo->onScreen = JNI_FALSE;\n-    dInfo->eglsurface = getDummyWindowSurface(pfInfo->display,\n-                                              pfInfo->fbConfig);\n-\n-    return ptr_to_jlong(dInfo);\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLFBGLDrawable\n- * Method:    nSwapBuffers\n- * Signature: (J)Z\n- *\/\n-JNIEXPORT jboolean JNICALL Java_com_sun_prism_es2_EGLFBGLDrawable_nSwapBuffers\n-(JNIEnv *env, jclass jeglfbDrawable, jlong nativeDInfo) {\n-    int value;\n-\n-    DrawableInfo *dInfo = (DrawableInfo *) jlong_to_ptr(nativeDInfo);\n-    if (dInfo == NULL) {\n-        return JNI_FALSE;\n-    }\n-    if (!eglSwapBuffers(dInfo->egldisplay, dInfo->eglsurface)) {\n-        fprintf(stderr, \"eglSwapBuffers failed; eglGetError %d\\n\", eglGetError());\n-    }\n-    return JNI_TRUE;\n-}\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/eglfb\/EGLFBGLDrawable.c","additions":0,"deletions":133,"binary":false,"changes":133,"status":"deleted"},{"patch":"@@ -1,185 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <stdlib.h>\n-#include <assert.h>\n-#include <stdio.h>\n-#include <string.h>\n-#include <math.h>\n-\n-#include <EGL\/egl.h>\n-#include \"eglUtils.h\"\n-\n-#include \"..\/PrismES2Defs.h\"\n-\n-#include \"com_sun_prism_es2_EGLFBGLContext.h\"\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLFBGLFactory\n- * Method:    nInitialize\n- * Signature: ([I)J\n- *\/\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_EGLFBGLFactory_nInitialize\n-(JNIEnv *env, jclass jeglfbGLFactory, jintArray attrArr) {\n-    int eglAttrs[MAX_GLX_ATTRS_LENGTH]; \/* value, attr pair plus a None *\/\n-    jint *attrs;\n-\n-    if (attrArr == NULL) {\n-        return 0;\n-    }\n-\n-    attrs = (*env)->GetIntArrayElements(env, attrArr, NULL);\n-    setEGLAttrs(attrs, eglAttrs);\n-    (*env)->ReleaseIntArrayElements(env, attrArr, attrs, JNI_ABORT);\n-\n-    EGLint surfaceType;\n-    EGLConfig config = 0;\n-    EGLint numconfigs = 0;\n-    EGLint configId = 0;\n-\n-    EGLNativeDisplayType disptype = getNativeDisplayType();\n-    if (disptype == (EGLNativeDisplayType)0xBAD) {\n-        fprintf(stderr, \"nInitialize: Failed in getNativeDisplayType\\n\");\n-        return 0;\n-    }\n-    EGLDisplay egldisplay = eglGetDisplay(disptype);\n-    if (EGL_NO_DISPLAY == egldisplay) {\n-        fprintf(stderr, \"eglGetDisplay returned EGL_NO_DISPLAY\");\n-        \/\/ cleanup\n-        return 0;\n-    }\n-    EGLint egl_major, egl_minor;\n-    if (!eglInitialize(egldisplay, &egl_major, &egl_minor)) {\n-        fprintf(stderr, \"eglInitialize failed!\");\n-        \/\/ cleanup\n-        return 0;\n-    }\n-\n-    if (!eglBindAPI(EGL_OPENGL_ES_API)) {\n-        fprintf(stderr, \"eglBindAPI failed!\");\n-        return 0;\n-    }\n-\n-#ifdef DEBUG\n-    \/\/ This is the client side\n-    const char *eglVendor  = eglQueryString(egldisplay, EGL_VENDOR);\n-    const char *eglVersion = eglQueryString(egldisplay, EGL_VERSION);\n-    printf(\"EGL_VENDOR  is %s\\n\", eglVendor);\n-    printf(\"EGL_VERSION version is %s\\n\", eglVersion);\n-    printf(\"Requested EGL attributes:\\n\");\n-    printConfigAttrs(eglAttrs);\n-#endif\n-\n-    if (!eglChooseConfig(egldisplay, eglAttrs, &config, 1, &numconfigs)) {\n-        fprintf(stderr, \"Failed to get a FBconfig with requested attrs\\n\");\n-        \/\/cleanup\n-        return 0;\n-    }\n-\n-#ifdef DEBUG\n-    printf(\"eglChooseConfig return %d configs\\n\", numconfigs);\n-#endif\n-\n-    if (!eglGetConfigAttrib(egldisplay, config, EGL_CONFIG_ID, &configId)) {\n-        fprintf(stderr, \"eglGetConfigAttrib failed!\");\n-        return 0;\n-    }\n-\n-#ifdef DEBUG\n-    printf(\"EGL: Using config #%d\\n\", configId);\n-    printConfig(egldisplay, config);\n-#endif\n-\n-    ContextInfo *ctxInfo = eglContextFromConfig(egldisplay, config);\n-    if (!ctxInfo) {\n-        fprintf(stderr, \"Failed to create EGLContext\");\n-        return 0; \/\/ cleanup\n-    }\n-    \/* Information required by GLass at startup *\/\n-    ctxInfo->display = disptype;\n-    ctxInfo->gl2 = JNI_FALSE;\n-    eglDestroyContext(ctxInfo->egldisplay, ctxInfo->context);\n-    return ptr_to_jlong(ctxInfo);\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLFBGLFactory\n- * Method:    nGetAdapterOrdinal\n- * Signature: (J)I\n- *\/\n-JNIEXPORT jint JNICALL Java_com_sun_prism_es2_EGLFBGLFactory_nGetAdapterOrdinal\n-(JNIEnv *env, jclass jeglfbGLFactory, jlong nativeScreen) {\n-    return 0;\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLFBGLFactory\n- * Method:    nGetAdapterCount\n- * Signature: ()I\n- *\/\n-JNIEXPORT jint JNICALL Java_com_sun_prism_es2_EGLFBGLFactory_nGetAdapterCount\n-(JNIEnv *env, jclass jeglfbGLFactory) {\n-    return 1;\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLFBGLFactory\n- * Method:    nGetDefaultScreen\n- * Signature: (J)I\n- *\/\n-JNIEXPORT jint JNICALL Java_com_sun_prism_es2_EGLFBGLFactory_nGetDefaultScreen\n-(JNIEnv *env, jclass jeglfbGLFactory, jlong nativeCtxInfo) {\n-    return 0;\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLFBGLFactory\n- * Method:    nGetDisplay\n- * Signature: (J)J\n- *\/\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_EGLFBGLFactory_nGetDisplay\n-(JNIEnv *env, jclass jeglfbGLFactory, jlong nativeCtxInfo) {\n-    return 0;\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLFBGLFactory\n- * Method:    nGetVisualID\n- * Signature: (J)J\n- *\/\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_EGLFBGLFactory_nGetVisualID\n-(JNIEnv *env, jclass jeglfbGLFactory, jlong nativeCtxInfo) {\n-    return 0;\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLFBGLFactory\n- * Method:    nGetIsGL2\n- * Signature: (J)Z\n- *\/\n-JNIEXPORT jboolean JNICALL Java_com_sun_prism_es2_EGLFBGLFactory_nGetIsGL2\n-(JNIEnv *env, jclass class, jlong nativeCtxInfo) {\n-    return ((ContextInfo *)jlong_to_ptr(nativeCtxInfo))->gl2;\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/eglfb\/EGLFBGLFactory.c","additions":0,"deletions":185,"binary":false,"changes":185,"status":"deleted"},{"patch":"@@ -1,104 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <jni.h>\n-#include <stdlib.h>\n-#include <assert.h>\n-#include <stdio.h>\n-#include <string.h>\n-#include \"..\/PrismES2Defs.h\"\n-\n-#include <EGL\/egl.h>\n-\n-#include \"eglUtils.h\"\n-\n-#include \"com_sun_prism_es2_EGLFBGLPixelFormat.h\"\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLFBGLPixelFormat\n- * Method:    nCreatePixelFormat\n- * Signature: (J[I)J\n- *\/\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_EGLFBGLPixelFormat_nCreatePixelFormat\n-(JNIEnv *env, jclass jeglfbPixelFormat, jlong nativeScreen, jintArray attrArr) {\n-    int eglAttrs[MAX_GLX_ATTRS_LENGTH]; \/* value, attr pair plus a None *\/\n-    jint *attrs;\n-    PixelFormatInfo *pfInfo = NULL;\n-\n-    EGLConfig config;\n-    int numFBConfigs;\n-\n-    if (attrArr == NULL) {\n-        return 0;\n-    }\n-    attrs = (*env)->GetIntArrayElements(env, attrArr, NULL);\n-    setEGLAttrs(attrs, eglAttrs);\n-    (*env)->ReleaseIntArrayElements(env, attrArr, attrs, JNI_ABORT);\n-\n-    EGLNativeDisplayType disptype = getNativeDisplayType();\n-    if (disptype == (EGLNativeDisplayType)0xBAD) {\n-        fprintf(stderr, \"nCreatePixelFormat: Failed in getNativeDisplayType\\n\");\n-        return 0;\n-    }\n-    EGLDisplay egldisplay = eglGetDisplay(disptype);\n-    if (EGL_NO_DISPLAY == egldisplay) {\n-        fprintf(stderr, \"eglGetDisplay returned EGL_NO_DISPLAY\");\n-        return 0;\n-    }\n-\n-    if (!eglInitialize(egldisplay, NULL, NULL)) {\n-        fprintf(stderr, \"eglInitialize failed!\");\n-        return 0;\n-    }\n-\n-#ifdef DEBUG\n-    printf(\"Requested EGL attributes:\\n\");\n-    printConfigAttrs(eglAttrs);\n-#endif\n-\n-    if (!eglChooseConfig(egldisplay, eglAttrs, &config, 1, &numFBConfigs)) {\n-        fprintf(stderr, \"PixelFormat - Failed to get a FBconfig with requested attrs\\n\");\n-        \/\/cleanup\n-        return 0;\n-    }\n-#ifdef DEBUG\n-    printf(\"EGL: Using config\\n\");\n-    printConfig(egldisplay, config);\n-#endif\n-\n-    \/* allocate the structure *\/\n-    pfInfo = (PixelFormatInfo *) malloc(sizeof(PixelFormatInfo));\n-    if (pfInfo == NULL) {\n-        fprintf(stderr, \"nCreatePixelFormat: Failed in malloc\\n\");\n-        return 0;\n-    }\n-\n-    \/* initialize the structure *\/\n-    initializePixelFormatInfo(pfInfo);\n-    pfInfo->fbConfig = config;\n-\n-    return ptr_to_jlong(pfInfo);\n-}\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/eglfb\/EGLFBGLPixelFormat.c","additions":0,"deletions":104,"binary":false,"changes":104,"status":"deleted"},{"patch":"@@ -1,588 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <stdlib.h>\n-#include <assert.h>\n-#include <stdio.h>\n-#include <string.h>\n-#include <fcntl.h>\n-#include <unistd.h>\n-#include <linux\/fb.h>\n-#include <sys\/ioctl.h>\n-\n-#include \"..\/PrismES2Defs.h\"\n-\n-#include \"eglUtils.h\"\n-\n-#include \"eglWrapper\/eglWrapper.h\"\n-\n-#ifdef EGL_X11_FB_CONTAINER\n-#include \"X11\/Xlib.h\"\n-#endif\n-\n-#define WARN_MISSING_SYMBOLS 0\n-\n-void *get_dlsym(void *handle, const char *symbol, int warn) {\n-    void *ret = dlsym(handle, symbol);\n-    if (!ret && warn) {\n-        fprintf(stderr, \"ERROR: could not find symbol for %s\\n\", symbol);\n-    }\n-    return ret;\n-}\n-\n-#define GET_DLSYM(handle,symbol) get_dlsym(handle,symbol, WARN_MISSING_SYMBOLS);\n-\n-EGLSurface sharedWindowSurface = NULL;\n-#ifdef ANDROID_NDK\n-EGLNativeWindowType currentNativeWindow = NULL;\n-#endif\n-#ifdef EGL_X11_FB_CONTAINER\n-EGLSurface dummySurface = NULL;\n-#endif\n-\n-EGLSurface getDummyWindowSurface(EGLDisplay dpy, EGLConfig cfg) {\n-#ifdef EGL_X11_FB_CONTAINER\n-    if (dummySurface == NULL) {\n-        Display *display;\n-        Window window;\n-\n-        display = XOpenDisplay(0);\n-        if (display == NULL) {\n-            fprintf(stderr, \"XOpenDisplay failed\\n\");\n-            return 0;\n-        }\n-        window = XCreateWindow(display,\n-                               RootWindow(display, DefaultScreen(display)),\n-                               0, 0, 1, 1, 0,\n-                               CopyFromParent, InputOutput, CopyFromParent, 0,\n-                               (XSetWindowAttributes *) 0);\n-        XSync(display, False);\n-        dummySurface = eglCreateWindowSurface(dpy, cfg, window, NULL);\n-        XSync(display, False);\n-    }\n-    return dummySurface;\n-#else\n-    return getSharedWindowSurface(dpy, cfg, NULL);\n-#endif\n-}\n-\n-EGLSurface getSharedWindowSurface(EGLDisplay dpy,\n-                                  EGLConfig cfg,\n-                                  void *nativeWindow) {\n-    if (sharedWindowSurface == NULL) {\n-        EGLNativeWindowType window = 0;\n-#if EGL_X11_FB_CONTAINER\n-        window = (EGLNativeWindowType)nativeWindow;\n-#else\n-        if (nativeWindow == NULL) {\n-            window = getNativeWindowType();\n-        }\n-#endif\n-        sharedWindowSurface = eglCreateWindowSurface(dpy, cfg, window, NULL);\n-        if (sharedWindowSurface == EGL_NO_SURFACE) {\n-            fprintf(stderr, \"eglCreateWindowSurface failed! eglGetError %d\\n\", eglGetError());\n-            return 0;\n-        }\n-#ifdef ANDROID_NDK\n-        currentNativeWindow = window;\n-#endif\n-        return sharedWindowSurface;\n-    }\n-#ifdef ANDROID_NDK\n-    EGLNativeWindowType wnd = getNativeWindowType();\n-    if (currentNativeWindow != wnd) {\n-       sharedWindowSurface = eglCreateWindowSurface(dpy, cfg, wnd, NULL);\n-       if (sharedWindowSurface == EGL_NO_SURFACE) {\n-           fprintf(stderr, \"Recreating eglSurface: eglCreateWindowSurface failed! eglGetError %d\\n\", eglGetError());\n-           return 0;\n-       }\n-       currentNativeWindow = wnd;\n-    }\n-#endif\n-    return sharedWindowSurface;\n-}\n-\n-void setEGLAttrs(jint *attrs, int *eglAttrs) {\n-    int index = 0;\n-\n-    eglAttrs[index++] = EGL_SURFACE_TYPE;\n-    if (attrs[ONSCREEN] != 0) {\n-        eglAttrs[index++] = (EGL_WINDOW_BIT);\n-    } else {\n-        eglAttrs[index++] = EGL_PBUFFER_BIT;\n-    }\n-\n-    \/\/ NOTE: EGL_TRANSPARENT_TYPE ?\n-\n-    if (attrs[RED_SIZE] == 5 && attrs[GREEN_SIZE] == 6\n-            && attrs[BLUE_SIZE] == 5 && attrs[ALPHA_SIZE] == 0) {\n-        \/\/ Optimization for Raspberry Pi model B. Even though the result\n-        \/\/ of setting EGL_BUFFER_SIZE to 16 should be the same as setting\n-        \/\/ component sizes separately, we get less per-frame overhead if we\n-        \/\/ only set EGL_BUFFER_SIZE.\n-        eglAttrs[index++] = EGL_BUFFER_SIZE;\n-        eglAttrs[index++] = 16;\n-    } else {\n-        eglAttrs[index++] = EGL_RED_SIZE;\n-        eglAttrs[index++] = attrs[RED_SIZE];\n-        eglAttrs[index++] = EGL_GREEN_SIZE;\n-        eglAttrs[index++] = attrs[GREEN_SIZE];\n-        eglAttrs[index++] = EGL_BLUE_SIZE;\n-        eglAttrs[index++] = attrs[BLUE_SIZE];\n-        eglAttrs[index++] = EGL_ALPHA_SIZE;\n-        eglAttrs[index++] = attrs[ALPHA_SIZE];\n-    }\n-\n-    eglAttrs[index++] = EGL_DEPTH_SIZE;\n-    eglAttrs[index++] = attrs[DEPTH_SIZE];\n-    eglAttrs[index++] = EGL_RENDERABLE_TYPE;\n-    eglAttrs[index++] = EGL_OPENGL_ES2_BIT;\n-    eglAttrs[index] = EGL_NONE;\n-}\n-\n-ContextInfo *eglContextFromConfig(EGLDisplay *dpy, EGLConfig config) {\n-\n-    EGLSurface surface = getDummyWindowSurface(dpy, config);\n-\n-    EGLint contextAttrs[] = {\n-        EGL_CONTEXT_CLIENT_VERSION, 2,\n-        EGL_NONE\n-    };\n-\n-    EGLContext context = eglCreateContext(dpy, config, NULL, contextAttrs);\n-    if (context == EGL_NO_CONTEXT) {\n-        fprintf(stderr, \"eglCreateContext() failed - %d\\n\", eglGetError());\n-        return 0;\n-    }\n-\n-    if (!eglMakeCurrent(dpy, surface, surface, context)) {\n-        fprintf(stderr, \"eglMakeCurrent failed - %d\\n\", eglGetError());\n-        return 0;\n-    }\n-    ContextInfo *ctxInfo = NULL;\n-\n-    \/* Note: We are only storing the string information of a driver.\n-     Assuming a system with a single or homogeneous GPUs. For the case\n-     of heterogeneous GPUs system the string information will need to move to\n-     GLContext class. *\/\n-    \/* allocate the structure *\/\n-    ctxInfo = (ContextInfo *) malloc(sizeof(ContextInfo));\n-    if (ctxInfo == NULL) {\n-        fprintf(stderr, \"nInitialize: Failed in malloc\\n\");\n-        return 0;\n-    }\n-    \/* initialize the structure *\/\n-    initializeCtxInfo(ctxInfo);\n-\n-    const char *glVersion = (char *)glGetString(GL_VERSION);\n-    const char *glVendor = (char *)glGetString(GL_VENDOR);\n-    const char *glRenderer = (char *)glGetString(GL_RENDERER);\n-    \/\/ Make a copy, at least one platform does not preserve the string beyond the call.\n-    char *glExtensions = strdup((char *)glGetString(GL_EXTENSIONS));\n-    char *eglExtensions = strdup((char *)eglQueryString(dpy, EGL_EXTENSIONS));\n-\n-    \/* find out the version, major and minor version number *\/\n-    char *tmpVersionStr = strdup(glVersion);\n-    int versionNumbers[2];\n-    extractVersionInfo(tmpVersionStr, versionNumbers);\n-    free(tmpVersionStr);\n-\n-    ctxInfo->versionStr = strdup(glVersion);\n-    ctxInfo->vendorStr = strdup(glVendor);\n-    ctxInfo->rendererStr = strdup(glRenderer);\n-    ctxInfo->glExtensionStr = strdup(glExtensions);\n-    ctxInfo->glxExtensionStr = strdup(eglExtensions);\n-    ctxInfo->versionNumbers[0] = versionNumbers[0];\n-    ctxInfo->versionNumbers[1] = versionNumbers[1];\n-\n-    ctxInfo->display = getNativeDisplayType();\n-    ctxInfo->context = context;\n-    ctxInfo->egldisplay = dpy;\n-\n-    \/\/ cleanup\n-    free(glExtensions);\n-    free(eglExtensions);\n-\n-    \/\/ from the eglWrapper.c\n-    void *handle = getLibGLEShandle();\n-\n-    \/* set function pointers *\/\n-    ctxInfo->glActiveTexture = (PFNGLACTIVETEXTUREPROC)\n-                               GET_DLSYM(handle, \"glActiveTexture\");\n-    ctxInfo->glAttachShader = (PFNGLATTACHSHADERPROC)\n-                              GET_DLSYM(handle, \"glAttachShader\");\n-    ctxInfo->glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)\n-                                    GET_DLSYM(handle, \"glBindAttribLocation\");\n-    ctxInfo->glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC)\n-                                 GET_DLSYM(handle, \"glBindFramebuffer\");\n-    ctxInfo->glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC)\n-                                  GET_DLSYM(handle, \"glBindRenderbuffer\");\n-    ctxInfo->glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)\n-                                        GET_DLSYM(handle, \"glCheckFramebufferStatus\");\n-    ctxInfo->glCreateProgram = (PFNGLCREATEPROGRAMPROC)\n-                               GET_DLSYM(handle, \"glCreateProgram\");\n-    ctxInfo->glCreateShader = (PFNGLCREATESHADERPROC)\n-                              GET_DLSYM(handle, \"glCreateShader\");\n-    ctxInfo->glCompileShader = (PFNGLCOMPILESHADERPROC)\n-                               GET_DLSYM(handle, \"glCompileShader\");\n-    ctxInfo->glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)\n-                               GET_DLSYM(handle, \"glDeleteBuffers\");\n-    ctxInfo->glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)\n-                                    GET_DLSYM(handle, \"glDeleteFramebuffers\");\n-    ctxInfo->glDeleteProgram = (PFNGLDELETEPROGRAMPROC)\n-                               GET_DLSYM(handle, \"glDeleteProgram\");\n-    ctxInfo->glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)\n-                                     GET_DLSYM(handle, \"glDeleteRenderbuffers\");\n-    ctxInfo->glDeleteShader = (PFNGLDELETESHADERPROC)\n-                              GET_DLSYM(handle, \"glDeleteShader\");\n-    ctxInfo->glDetachShader = (PFNGLDETACHSHADERPROC)\n-                              GET_DLSYM(handle, \"glDetachShader\");\n-    ctxInfo->glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)\n-                                         GET_DLSYM(handle, \"glDisableVertexAttribArray\");\n-    ctxInfo->glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)\n-                                         GET_DLSYM(handle, \"glEnableVertexAttribArray\");\n-    ctxInfo->glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)\n-                                         GET_DLSYM(handle, \"glFramebufferRenderbuffer\");\n-    ctxInfo->glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)\n-                                      GET_DLSYM(handle, \"glFramebufferTexture2D\");\n-    ctxInfo->glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)\n-                                 GET_DLSYM(handle, \"glGenFramebuffers\");\n-    ctxInfo->glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)\n-                                  GET_DLSYM(handle, \"glGenRenderbuffers\");\n-    ctxInfo->glGetProgramiv = (PFNGLGETPROGRAMIVPROC)\n-                              GET_DLSYM(handle, \"glGetProgramiv\");\n-    ctxInfo->glGetShaderiv = (PFNGLGETSHADERIVPROC)\n-                             GET_DLSYM(handle, \"glGetShaderiv\");\n-    ctxInfo->glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)\n-                                    GET_DLSYM(handle, \"glGetUniformLocation\");\n-    ctxInfo->glLinkProgram = (PFNGLLINKPROGRAMPROC)\n-                             GET_DLSYM(handle, \"glLinkProgram\");\n-    ctxInfo->glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)\n-                                     GET_DLSYM(handle, \"glRenderbufferStorage\");\n-    ctxInfo->glShaderSource = (PFNGLSHADERSOURCEPROC)\n-                              GET_DLSYM(handle, \"glShaderSource\");\n-    ctxInfo->glUniform1f = (PFNGLUNIFORM1FPROC)\n-                           GET_DLSYM(handle, \"glUniform1f\");\n-    ctxInfo->glUniform2f = (PFNGLUNIFORM2FPROC)\n-                           GET_DLSYM(handle, \"glUniform2f\");\n-    ctxInfo->glUniform3f = (PFNGLUNIFORM3FPROC)\n-                           GET_DLSYM(handle, \"glUniform3f\");\n-    ctxInfo->glUniform4f = (PFNGLUNIFORM4FPROC)\n-                           GET_DLSYM(handle, \"glUniform4f\");\n-    ctxInfo->glUniform4fv = (PFNGLUNIFORM4FVPROC)\n-                            GET_DLSYM(handle, \"glUniform4fv\");\n-    ctxInfo->glUniform1i = (PFNGLUNIFORM1IPROC)\n-                           GET_DLSYM(handle, \"glUniform1i\");\n-    ctxInfo->glUniform2i = (PFNGLUNIFORM2IPROC)\n-                           GET_DLSYM(handle, \"glUniform2i\");\n-    ctxInfo->glUniform3i = (PFNGLUNIFORM3IPROC)\n-                           GET_DLSYM(handle, \"glUniform3i\");\n-    ctxInfo->glUniform4i = (PFNGLUNIFORM4IPROC)\n-                           GET_DLSYM(handle, \"glUniform4i\");\n-    ctxInfo->glUniform4iv = (PFNGLUNIFORM4IVPROC)\n-                            GET_DLSYM(handle, \"glUniform4iv\");\n-    ctxInfo->glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)\n-                                  GET_DLSYM(handle, \"glUniformMatrix4fv\");\n-    ctxInfo->glUseProgram = (PFNGLUSEPROGRAMPROC)\n-                            GET_DLSYM(handle, \"glUseProgram\");\n-    ctxInfo->glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)\n-                                 GET_DLSYM(handle, \"glValidateProgram\");\n-    ctxInfo->glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)\n-                                     GET_DLSYM(handle, \"glVertexAttribPointer\");\n-    ctxInfo->glGenBuffers = (PFNGLGENBUFFERSPROC)\n-                            GET_DLSYM(handle, \"glGenBuffers\");\n-    ctxInfo->glBindBuffer = (PFNGLBINDBUFFERPROC)\n-                            GET_DLSYM(handle, \"glBindBuffer\");\n-    ctxInfo->glBufferData = (PFNGLBUFFERDATAPROC)\n-                            GET_DLSYM(handle, \"glBufferData\");\n-    ctxInfo->glBufferSubData = (PFNGLBUFFERSUBDATAPROC)\n-                              GET_DLSYM(handle, \"glBufferSubData\");\n-    ctxInfo->glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)\n-                                  GET_DLSYM(handle, \"glGetShaderInfoLog\");\n-    ctxInfo->glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC)\n-                                   GET_DLSYM(handle, \"glGetProgramInfoLog\");\n-    ctxInfo->glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC)\n-                            GET_DLSYM(handle, \"glTexImage2DMultisample\");\n-    ctxInfo->glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)\n-                            GET_DLSYM(handle, \"glRenderbufferStorageMultisample\");\n-    ctxInfo->glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)\n-                            GET_DLSYM(handle, \"glBlitFramebuffer\");\n-\n-    initState(ctxInfo);\n-    \/* Releasing native resources *\/\n-    eglMakeCurrent(ctxInfo->egldisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);\n-    \/\/eglDestroySurface(ctxInfo->egldisplay, surface);\n-    return ctxInfo;\n-}\n-\n-\n-\n-\/\/#ifdef DEBUG\n-\n-const char *eglErrorMsg(int err) {\n-    const char *ret;\n-    if (err == EGL_SUCCESS) {\n-        ret = \"The last function succeeded without error.\";\n-    } else if (err == EGL_NOT_INITIALIZED) {\n-        ret = \"EGL is not initialized, or could not be initialized, for the specified EGL display connection.\";\n-    } else if (err == EGL_BAD_ACCESS) {\n-        ret = \"EGL cannot access a requested resource (for example a context is bound in another thread).\";\n-    } else if (err == EGL_BAD_ALLOC) {\n-        ret = \"EGL failed to allocate resources for the requested operation.\";\n-    } else if (err == EGL_BAD_ATTRIBUTE) {\n-        ret = \"An unrecognized attribute or attribute value was passed in the attribute list.\";\n-    } else if (err == EGL_BAD_CONTEXT) {\n-        ret = \"An EGLContext argument does not name a valid EGL rendering context.\";\n-    } else if (err == EGL_BAD_CONFIG) {\n-        ret = \"An EGLConfig argument does not name a valid EGL frame buffer configuration.\";\n-    } else if (err == EGL_BAD_CURRENT_SURFACE) {\n-        ret = \"The current surface of the calling thread is a window, pixel buffer or pixmap that is no longer valid.\";\n-    } else if (err == EGL_BAD_DISPLAY) {\n-        ret = \"An EGLDisplay argument does not name a valid EGL display connection.\";\n-    } else if (err == EGL_BAD_SURFACE) {\n-        ret = \"An EGLSurface argument does not name a valid surface (window, pixel buffer or pixmap) configured for GL rendering.\";\n-    } else if (err == EGL_BAD_MATCH) {\n-        ret = \"Arguments are inconsistent (for example, a valid context requires buffers not supplied by a valid surface).\";\n-    } else if (err == EGL_BAD_PARAMETER) {\n-        ret = \"One or more argument values are invalid.\";\n-    } else if (err == EGL_BAD_NATIVE_PIXMAP) {\n-        ret = \"A NativePixmapType argument does not refer to a valid native pixmap.\";\n-    } else if (err == EGL_BAD_NATIVE_WINDOW) {\n-        ret = \"A NativeWindowType argument does not refer to a valid native window.\";\n-    } else {\n-        ret = \"Unknown EGL error\";\n-    }\n-    return ret;\n-}\n-\n-char *printErrorExit(char *message) {\n-    EGLint err = eglGetError();\n-    char buffer[80];\n-    char *ret;\n-    if (err == EGL_SUCCESS) {\n-        ret = \"The last function succeeded without error.\";\n-    } else if (err == EGL_NOT_INITIALIZED) {\n-        ret = \"EGL is not initialized, or could not be initialized, for the specified EGL display connection.\";\n-    } else if (err == EGL_BAD_ACCESS) {\n-        ret = \"EGL cannot access a requested resource (for example a context is bound in another thread).\";\n-    } else if (err == EGL_BAD_ALLOC) {\n-        ret = \"EGL failed to allocate resources for the requested operation.\";\n-    } else if (err == EGL_BAD_ATTRIBUTE) {\n-        ret = \"An unrecognized attribute or attribute value was passed in the attribute list.\";\n-    } else if (err == EGL_BAD_CONTEXT) {\n-        ret = \"An EGLContext argument does not name a valid EGL rendering context.\";\n-    } else if (err == EGL_BAD_CONFIG) {\n-        ret = \"An EGLConfig argument does not name a valid EGL frame buffer configuration.\";\n-    } else if (err == EGL_BAD_CURRENT_SURFACE) {\n-        ret = \"The current surface of the calling thread is a window, pixel buffer or pixmap that is no longer valid.\";\n-    } else if (err == EGL_BAD_DISPLAY) {\n-        ret = \"An EGLDisplay argument does not name a valid EGL display connection.\";\n-    } else if (err == EGL_BAD_SURFACE) {\n-        ret = \"An EGLSurface argument does not name a valid surface (window, pixel buffer or pixmap) configured for GL rendering.\";\n-    } else if (err == EGL_BAD_MATCH) {\n-        ret = \"Arguments are inconsistent (for example, a valid context requires buffers not supplied by a valid surface).\";\n-    } else if (err == EGL_BAD_PARAMETER) {\n-        ret = \"One or more argument values are invalid.\";\n-    } else if (err == EGL_BAD_NATIVE_PIXMAP) {\n-        ret = \"A NativePixmapType argument does not refer to a valid native pixmap.\";\n-    } else if (err == EGL_BAD_NATIVE_WINDOW) {\n-        ret = \"A NativeWindowType argument does not refer to a valid native window.\";\n-    } else {\n-        sprintf(buffer, \"unknown error code 0x%0x\", err);\n-        ret = buffer;\n-    }\n-    if (message) {\n-        printf(\"%s\\n\", message);\n-    }\n-    printf(\"EGL ERROR: %s\\n\", ret);\n-    exit(1);\n-}\n-\n-int printConfigAttrs(EGLint *config) {\n-    int cnt = 0;\n-    while ((*config != EGL_NONE) && (cnt < 25)) {\n-        EGLint arg = *config++;\n-        EGLint val = *config++;\n-        cnt++;\n-        printf(\"    \");\n-        switch (arg) {\n-            case EGL_SURFACE_TYPE:\n-                if (val == (EGL_PBUFFER_BIT | EGL_WINDOW_BIT)) {\n-                    printf(\"EGL_SURFACE_TYPE, EGL_PBUFFER_BIT | EGL_WINDOW_BIT,\\n\");\n-                } else if (val == (EGL_WINDOW_BIT)) {\n-                    printf(\"EGL_SURFACE_TYPE: EGL_WINDOW_BIT,\\n\");\n-                } else if (val == (EGL_PBUFFER_BIT)) {\n-                    printf(\"EGL_SURFACE_TYPE: EGL_PBUFFER_BIT,\\n\");\n-                } else {\n-                    printf(\"EGL_SURFACE_TYPE, %d,\\n\", val);\n-                }\n-                break;\n-            case EGL_BUFFER_SIZE:\n-                printf(\"EGL_BUFFER_SIZE, %d,\\n\", val);\n-                break;\n-            case EGL_SAMPLE_BUFFERS:\n-                printf(\"EGL_SAMPLE_BUFFERS, %d,\\n\", val);\n-                break;\n-            case EGL_SAMPLES:\n-                printf(\"EGL_SAMPLES, %d,\\n\", val);\n-                break;\n-            case EGL_DEPTH_SIZE:\n-                printf(\"EGL_DEPTH_SIZE, %d,\\n\", val);\n-                break;\n-            case EGL_RED_SIZE:\n-                printf(\"EGL_RED_SIZE, %d,\\n\", val);\n-                break;\n-            case EGL_GREEN_SIZE:\n-                printf(\"EGL_GREEN_SIZE, %d,\\n\", val);\n-                break;\n-            case EGL_BLUE_SIZE:\n-                printf(\"EGL_BLUE_SIZE, %d,\\n\", val);\n-                break;\n-            case EGL_ALPHA_SIZE:\n-                printf(\"EGL_ALPHA_SIZE, %d,\\n\", val);\n-                break;\n-            case EGL_LEVEL:\n-                printf(\"EGL_LEVEL, %d,\\n\", val);\n-                break;\n-            case EGL_NATIVE_RENDERABLE:\n-                printf(\"EGL_NATIVE_RENDERABLE, %d,\\n\", val);\n-                break;\n-            case EGL_STENCIL_SIZE:\n-                printf(\"EGL_STENCIL_SIZE, %d,\\n\", val);\n-                break;\n-            case EGL_TRANSPARENT_TYPE:\n-                if (val == EGL_TRANSPARENT_RGB) {\n-                    printf(\"EGL_TRANSPARENT_TYPE, EGL_TRANSPARENT_RGB,\\n\");\n-                } else if (val == EGL_NONE) {\n-                    printf(\"EGL_TRANSPARENT_TYPE, EGL_NONE,\\n\");\n-                } else {\n-                    printf(\"EGL_TRANSPARENT_TYPE, bad val %d\\n\", val);\n-                }\n-                break;\n-            case EGL_TRANSPARENT_RED_VALUE:\n-                printf(\"EGL_TRANSPARENT_RED_VALUE, %d,\\n\", val);\n-                break;\n-            case EGL_TRANSPARENT_GREEN_VALUE:\n-                printf(\"EGL_TRANSPARENT_GREEN_VALUE, %d,\\n\", val);\n-                break;\n-            case EGL_TRANSPARENT_BLUE_VALUE:\n-                printf(\"EGL_TRANSPARENT_BLUE_VALUE, %d,\\n\", val);\n-                break;\n-            case EGL_NATIVE_VISUAL_TYPE:\n-                printf(\"EGL_NATIVE_VISUAL_TYPE, %d,\\n\", val);\n-                break;\n-            case EGL_RENDERABLE_TYPE:\n-                printf(\"EGL_RENDERABLE_TYPE, %s,\\n\", val == EGL_OPENGL_ES2_BIT ? \"EGL_OPENGL_ES2_BIT,\" : \"EGL_OPENGL_ES_BIT\");\n-                break;\n-            default:\n-                printf(\"UNRECOGNIZED, %d, %d\\n\", arg, val);\n-        }\n-    }\n-    if (*config == EGL_NONE) {\n-        printf(\"    EGL_NONE\\n\");\n-    } else {\n-        printf(\"    *** ERROR exceeded arg limit *** \\n\");\n-    }\n-    return 1;\n-}\n-\n-int printConfig(EGLDisplay display, EGLConfig config) {\n-\n-    int id;\n-    eglGetConfigAttrib(display, config, EGL_CONFIG_ID, &id);\n-\n-    int red, green, blue, alpha, depth;\n-    eglGetConfigAttrib(display, config, EGL_RED_SIZE, &red);\n-    eglGetConfigAttrib(display, config, EGL_GREEN_SIZE, &green);\n-    eglGetConfigAttrib(display, config, EGL_BLUE_SIZE, &blue);\n-    eglGetConfigAttrib(display, config, EGL_ALPHA_SIZE, &alpha);\n-    eglGetConfigAttrib(display, config, EGL_BUFFER_SIZE, &depth);\n-\n-    int pwidth, phgt, psize;\n-    pwidth = phgt = psize =  0;\n-    eglGetConfigAttrib(display, config, EGL_MAX_PBUFFER_WIDTH, &pwidth);\n-    eglGetConfigAttrib(display, config, EGL_MAX_PBUFFER_HEIGHT, &phgt);\n-    eglGetConfigAttrib(display, config, EGL_MAX_PBUFFER_PIXELS, &psize);\n-\n-    int sbuffers, samples;\n-    eglGetConfigAttrib(display, config, EGL_SAMPLE_BUFFERS, &sbuffers);\n-    eglGetConfigAttrib(display, config, EGL_SAMPLES, &samples);\n-\n-    int stencil;\n-    eglGetConfigAttrib(display, config, EGL_STENCIL_SIZE, &stencil);\n-\n-    int surface;\n-    eglGetConfigAttrib(display, config, EGL_SURFACE_TYPE, &surface);\n-\n-    int transparent;\n-    eglGetConfigAttrib(display, config, EGL_TRANSPARENT_TYPE, &transparent);\n-\n-    int caveat;\n-    eglGetConfigAttrib(display, config, EGL_CONFIG_CAVEAT, &caveat);\n-    char *strcaveat = \"Normal\";\n-    if (caveat == EGL_SLOW_CONFIG) {\n-        strcaveat = \"Slow\";\n-    } else if (caveat == EGL_NON_CONFORMANT_CONFIG) {\n-        strcaveat = \"NonConf\";\n-    }\n-\n-    \/\/ humm, not documented as a supported element, but there all the same ?\n-    int rtype = -1;\n-    if (!eglGetConfigAttrib(display, config, EGL_RENDERABLE_TYPE, &rtype)) {\n-        printf(\"failed to get EGL_RENDERABLE_TYPE\\n\");\n-    }\n-    char rstr[5];\n-    char *rstrptr = rstr;\n-    if ((rtype & EGL_OPENGL_ES_BIT) == EGL_OPENGL_ES_BIT) {\n-        *(rstrptr++) = '1';\n-    }\n-    if ((rtype & EGL_OPENGL_ES2_BIT) == EGL_OPENGL_ES2_BIT) {\n-        *(rstrptr++) = '2';\n-    }\n-    if ((rtype & EGL_OPENVG_BIT) == EGL_OPENVG_BIT) {\n-        *(rstrptr++) = 'V';\n-    }\n-    if ((rtype & EGL_OPENGL_BIT) == EGL_OPENGL_BIT) {\n-        *(rstrptr++) = 'G';\n-    }\n-    *rstrptr = 0;\n-\n-    printf(\"  %02d: %d%d%d%d %02d %04dx%04d %d %d,%d %d %s%s%s %s %s %s\\n\", id,\n-           red, green, blue, alpha, depth,\n-           pwidth, phgt, psize,\n-           sbuffers, samples,\n-           stencil,\n-           ((surface & EGL_WINDOW_BIT) == EGL_WINDOW_BIT) ? \"W\" : \"_\",\n-           ((surface & EGL_PBUFFER_BIT) == EGL_PBUFFER_BIT) ? \"P\" : \"_\",\n-           ((surface & EGL_PIXMAP_BIT) == EGL_PIXMAP_BIT) ? \"X\" : \"_\",\n-           (transparent == EGL_TRANSPARENT_RGB) ? \"Trans\" : \"Opaqe\",\n-           strcaveat,\n-           rstr\n-          );\n-\n-    return 1;\n-}\n-\n-\/\/#endif \/\/ DEBUG\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/eglfb\/eglUtils.c","additions":0,"deletions":588,"binary":false,"changes":588,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <jni.h>\n-\n-#include \"..\/PrismES2Defs.h\"\n-\n-extern int useDispman;\n-extern const char *eglErrorMsg(int err);\n-extern char *printErrorExit(char *message);\n-extern int printConfigAttrs(EGLint *config);\n-extern int printConfig(EGLDisplay display, EGLConfig config);\n-\n-extern ContextInfo *eglContextFromConfig(EGLDisplay *display, EGLConfig config);\n-extern void setEGLAttrs(jint *attrs, int *eglAttrs);\n-extern EGLSurface getDummyWindowSurface(EGLDisplay dpy,\n-                                        EGLConfig cfg);\n-extern EGLSurface getSharedWindowSurface(EGLDisplay dpy,\n-                                         EGLConfig cfg,\n-                                         void *nativeWindow);\n-\n-\/\/#define DEBUG_EGL 1\n-\n-#define eglCheck() { \\\n-        int err; \\\n-        if ((err = eglGetError()) != EGL_SUCCESS) { \\\n-            fprintf(stderr, \"EGLERROR: %s\\n\",eglErrorMsg(err)); \\\n-        }; \\\n-    } \/\/end of eglCheck\n-\n-#ifdef DEBUG_EGL\n-#define EGL_CHECK eglCheck();\n-#else\n-#define EGL_CHECK\n-#endif\n-\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/eglfb\/eglUtils.h","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <jni.h>\n-#include \"com_sun_prism_es2_EGLX11GLContext.h\"\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLX11GLContext\n- * Method:    nInitialize\n- * Signature: (JJZ)J\n- *\/\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_EGLX11GLContext_nInitialize\n-(JNIEnv *env, jclass jeglx11context, jlong nativeDInfo, jlong nativePFInfo, jboolean SyncRequest) {\n-    return 0;\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLX11GLContext\n- * Method:    nGetNativeHandle\n- * Signature: (J)J\n- *\/\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_EGLX11GLContext_nGetNativeHandle\n-(JNIEnv *env, jclass jeglx11context, jlong nativeCtxInfo) {\n-    return 0;\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLX11GLContext\n- * Method:    nMakeCurrent\n- * Signature: (JJ)V\n- *\/\n-JNIEXPORT void JNICALL Java_com_sun_prism_es2_EGLX11GLContext_nMakeCurrent\n-(JNIEnv *env, jclass jeglx11context, jlong nativeCtxInfo, jlong nativeDInfo) {\n-    return;\n-}\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/eglx11\/EGLX11GLContext.c","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,57 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <jni.h>\n-#include \"com_sun_prism_es2_EGLX11GLContext.h\"\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLX11GLDrawable\n- * Method:    nCreateDrawable\n- * Signature: (JJ)J\n- *\/\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_EGLX11GLDrawable_nCreateDrawable\n-(JNIEnv *env, jclass jeglx11Drawable, jlong nativeWindow, jlong nativePFInfo) {\n-    return 0;\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLX11GLDrawable\n- * Method:    nGetDummyDrawable\n- * Signature: (J)J\n- *\/\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_EGLX11GLDrawable_nGetDummyDrawable\n-(JNIEnv *env, jclass jeglx11Drawable, jlong nativePFInfo) {\n-    return 0;\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLX11GLDrawable\n- * Method:    nSwapBuffers\n- * Signature: (J)Z\n- *\/\n-JNIEXPORT jboolean JNICALL Java_com_sun_prism_es2_EGLX11GLDrawable_nSwapBuffers\n-(JNIEnv *env, jclass jeglx11Drawable, jlong nativeDInfo) {\n-    return 0;\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/eglx11\/EGLX11GLDrawable.c","additions":0,"deletions":57,"binary":false,"changes":57,"status":"deleted"},{"patch":"@@ -1,99 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <jni.h>\n-#include \"com_sun_prism_es2_EGLX11GLFactory.h\"\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLX11GLFactory\n- * Method:    nInitialize\n- * Signature: ([I)J\n- *\/\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_EGLX11GLFactory_nInitialize\n-(JNIEnv *env, jclass jeglx11GLFactory, jintArray attrArr) {\n-    printf(\"In EGLX11GLFactory_nInitialize\\n\");\n-    return 0;\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLX11GLFactory\n- * Method:    nGetAdapterOrdinal\n- * Signature: (J)I\n- *\/\n-JNIEXPORT jint JNICALL Java_com_sun_prism_es2_EGLX11GLFactory_nGetAdapterOrdinal\n-(JNIEnv *env, jclass jeglx11GLFactory, jlong nativeScreen) {\n-    return 0;\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLX11GLFactory\n- * Method:    nGetAdapterCount\n- * Signature: ()I\n- *\/\n-JNIEXPORT jint JNICALL Java_com_sun_prism_es2_EGLX11GLFactory_nGetAdapterCount\n-(JNIEnv *env, jclass jeglx11GLFactory) {\n-    return 1;\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLX11GLFactory\n- * Method:    nGetDefaultScreen\n- * Signature: (J)I\n- *\/\n-JNIEXPORT jint JNICALL Java_com_sun_prism_es2_EGLX11GLFactory_nGetDefaultScreen\n-(JNIEnv *env, jclass jeglx11GLFactory, jlong nativeCtxInfo) {\n-    return 0;\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLX11GLFactory\n- * Method:    nGetDisplay\n- * Signature: (J)J\n- *\/\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_EGLX11GLFactory_nGetDisplay\n-(JNIEnv *env, jclass jeglx11GLFactory, jlong nativeCtxInfo) {\n-    return 0;\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLX11GLFactory\n- * Method:    nGetVisualID\n- * Signature: (J)J\n- *\/\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_EGLX11GLFactory_nGetVisualID\n-(JNIEnv *env, jclass jeglx11GLFactory, jlong nativeCtxInfo) {\n-    return 0;\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLX11GLFactory\n- * Method:    nSetDebug\n- * Signature: (Z)V\n- *\/\n-JNIEXPORT void JNICALL Java_com_sun_prism_es2_EGLX11GLFactory_nSetDebug\n-(JNIEnv *env, jclass jeglx11GLFactory, jboolean on) {\n-\n-}\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/eglx11\/EGLX11GLFactory.c","additions":0,"deletions":99,"binary":false,"changes":99,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <jni.h>\n-\n-#include \"com_sun_prism_es2_EGLX11GLContext.h\"\n-\n-\n-\/*\n- * Class:     com_sun_prism_es2_EGLX11GLPixelFormat\n- * Method:    nCreatePixelFormat\n- * Signature: (J[I)J\n- *\/\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_EGLX11GLPixelFormat_nCreatePixelFormat\n-(JNIEnv *env, jclass jeglx11PixelFormat, jlong nativeScreen, jintArray attrArr) {\n-    return 0;\n-}\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/eglx11\/EGLX11GLPixelFormat.c","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"}]}