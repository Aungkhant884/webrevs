{"files":[{"patch":"@@ -273,1 +273,1 @@\n-        if (!newObservable.equals(observable)) {\n+        if (newObservable != observable) {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ListPropertyBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-        if (!newObservable.equals(observable)) {\n+        if (newObservable != observable) {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/MapPropertyBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -275,1 +275,1 @@\n-        if (!newObservable.equals(this.observable)) {\n+        if (newObservable != this.observable) {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/SetPropertyBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -630,0 +630,37 @@\n+    @Test\n+    public void testRebind_Identity() {\n+        final ListProperty<Object> v1 = new SimpleListProperty<>(FXCollections.observableArrayList());\n+        final ListProperty<Object> v2 = new SimpleListProperty<>(FXCollections.observableArrayList());\n+        attachListChangeListener();\n+\n+        \/\/ bind\n+        property.bind(v1);\n+        property.check(1);\n+        listChangeListener.check1AddRemove(property, EMPTY_LIST, 0, 0);\n+        listChangeListener.clear();\n+\n+        \/\/ rebind to same\n+        property.bind(v1);\n+        property.check(0);\n+        listChangeListener.check0();\n+\n+        \/\/ rebind to other, without explicitly unbinding\n+        property.bind(v2);\n+        property.check(1);\n+        listChangeListener.check1AddRemove(property, EMPTY_LIST, 0, 0);\n+        listChangeListener.clear();\n+\n+        v2.add(\"One\");\n+        listChangeListener.check1AddRemove(property, EMPTY_LIST, 0, 1);\n+        listChangeListener.clear();\n+\n+        v2.add(\"Two\");\n+        listChangeListener.check1AddRemove(property, EMPTY_LIST, 1, 2);\n+        listChangeListener.clear();\n+\n+        property.check(4);\n+        assertTrue(property.isBound());\n+        assertEquals(2, property.toArray().length);\n+        assertEquals(\"ListProperty [bound, value: [One, Two]]\", property.toString());\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ListPropertyBaseTest.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -653,0 +653,35 @@\n+    @Test\n+    public void testRebind_Identity() {\n+        final MapProperty<Object, Object> v1 = new SimpleMapProperty<>(FXCollections.observableHashMap());\n+        final MapProperty<Object, Object> v2 = new SimpleMapProperty<>(FXCollections.observableHashMap());\n+        attachMapChangeListener();\n+\n+        \/\/ bind\n+        property.bind(v1);\n+        property.check(1);\n+        mapChangeListener.clear();\n+\n+        \/\/ rebind to same\n+        property.bind(v1);\n+        property.check(0);\n+        mapChangeListener.check0();\n+\n+        \/\/ rebind to other, without explicitly unbinding\n+        property.bind(v2);\n+        property.check(1);\n+        mapChangeListener.clear();\n+\n+        v2.put(\"One\", \"1\");\n+        mapChangeListener.assertAdded(MockMapObserver.Tuple.tup(\"One\", \"1\"));\n+        mapChangeListener.clear();\n+\n+        v2.put(\"Two\", \"2\");\n+        mapChangeListener.assertAdded(MockMapObserver.Tuple.tup(\"Two\", \"2\"));\n+        mapChangeListener.clear();\n+\n+        property.check(4);\n+        assertTrue(property.isBound());\n+        assertEquals(2, property.size());\n+        assertEquals(\"MapProperty [bound, value: {One=1, Two=2}]\", property.toString());\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/MapPropertyBaseTest.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -590,0 +590,35 @@\n+    @Test\n+    public void testRebind_Identity() {\n+        final SetProperty<Object> v1 = new SimpleSetProperty<>(FXCollections.observableSet());\n+        final SetProperty<Object> v2 = new SimpleSetProperty<>(FXCollections.observableSet());\n+        attachSetChangeListener();\n+\n+        \/\/ bind\n+        property.bind(v1);\n+        property.check(1);\n+        setChangeListener.clear();\n+\n+        \/\/ rebind to same\n+        property.bind(v1);\n+        property.check(0);\n+        setChangeListener.check0();\n+\n+        \/\/ rebind to other, without explicitly unbinding\n+        property.bind(v2);\n+        property.check(1);\n+        setChangeListener.clear();\n+\n+        v2.add(\"One\");\n+        setChangeListener.assertAdded(Tuple.tup(\"One\"));\n+        setChangeListener.clear();\n+\n+        v2.add(\"Two\");\n+        setChangeListener.assertAdded(Tuple.tup(\"Two\"));\n+        setChangeListener.clear();\n+\n+        property.check(4);\n+        assertTrue(property.isBound());\n+        assertEquals(2, property.toArray().length);\n+        assertEquals(\"SetProperty [bound, value: [Two, One]]\", property.toString());\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SetPropertyBaseTest.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"}]}