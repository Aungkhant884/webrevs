{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -8192,1 +8192,1 @@\n-     * focus, we need to stop clearing the focusWithin bits if we encounter a parent node that is focused.\n+     * focus, we need to adjust the focus-within count on all parents of the node.\n@@ -8197,2 +8197,2 @@\n-            while (node != null && !node.focused.get()) {\n-                node.focusWithin.set(false);\n+            while (node != null) {\n+                node.focusWithin.adjust(-focusWithin.count);\n@@ -8240,0 +8240,1 @@\n+                int change = value ? 1 : -1;\n@@ -8241,0 +8242,1 @@\n+\n@@ -8242,1 +8244,1 @@\n-                    node.focusWithin.set(value);\n+                    node.focusWithin.adjust(change);\n@@ -8244,1 +8246,1 @@\n-                } while (node != null && !node.focused.get());\n+                } while (node != null);\n@@ -8298,1 +8300,5 @@\n-    private final FocusPropertyBase focusWithin = new FocusPropertyBase() {\n+    private final FocusWithinProperty focusWithin = new FocusWithinProperty();\n+\n+    private class FocusWithinProperty extends FocusPropertyBase {\n+        int count;\n+\n@@ -8308,0 +8314,13 @@\n+\n+        \/**\n+         * Adjusts the number of focused nodes within this node.\n+         *\/\n+        void adjust(int change) {\n+            count += change;\n+\n+            if (count == 1) {\n+                set(true);\n+            } else if (count == 0) {\n+                set(false);\n+            }\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":26,"deletions":7,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1014,1 +1014,1 @@\n-    @Test public void testMultiLevelFocusWithinIsPreserved() {\n+    @Test public void testMultiLevelFocusWithinIsPreservedWhenFocusedNodeIsRemoved() {\n@@ -1026,1 +1026,1 @@\n-        N node1, node2, node3, node4;\n+        N node1, node2, node3, node4, node5;\n@@ -1029,4 +1029,6 @@\n-            node1 = new N(\n-                node2 = new N(\n-                    node3 = new N(\n-                        node4 = new N()\n+            node1 = new N(                  \/\/ focusWithin=3\n+                node2 = new N(              \/\/ focusWithin=3, focused\n+                    node3 = new N(          \/\/ focusWithin=2\n+                        node4 = new N(      \/\/ focusWithin=2, focused\n+                            node5 = new N() \/\/ focusWithin=1, focused\n+                        )\n@@ -1039,2 +1041,10 @@\n-\n-        \/\/ Remove node4 from the scene graph\n+        node5.setFocused();\n+\n+        \/\/ Detach node4 from the scene graph:\n+        \/\/     node1           focusWithin=1\n+        \/\/     |--> node2      focusWithin=1, focused\n+        \/\/         |--> node3\n+        \/\/\n+        \/\/     node4           focusWithin=2, focused\n+        \/\/     |--> node5      focusWithin=1, focused\n+        \/\/\n@@ -1047,0 +1057,1 @@\n+        assertIsFocusWithin(node5);\n@@ -1052,0 +1063,43 @@\n+        assertIsFocused(node5);\n+    }\n+\n+    \/**\n+     * When a scene graph contains multiple nested focused nodes, the focusWithin bits that would\n+     * be cleared when a focused node is de-focused must not be cleared when we have another\n+     * focused downstream node.\n+     *\/\n+    @Test public void testMultiLevelFocusWithinIsPreservedWhenIntermediateFocusedNodeIsDefocused() {\n+        class N extends Group {\n+            N(Node... children) { super(children); }\n+            void _setFocused(boolean value) { setFocused(value); }\n+        }\n+\n+        N node1, node2, node3, node4;\n+\n+        scene.setRoot(\n+            node1 = new N(\n+                node2 = new N(\n+                    node3 = new N(\n+                        node4 = new N()\n+                    )\n+                )\n+            ));\n+\n+        node2._setFocused(true);\n+        node4._setFocused(true);\n+        assertIsFocusWithin(node1);\n+        assertIsFocusWithin(node2);\n+        assertIsFocusWithin(node3);\n+        assertIsFocusWithin(node4);\n+\n+        node2._setFocused(false);\n+        assertIsFocusWithin(node1);\n+        assertIsFocusWithin(node2);\n+        assertIsFocusWithin(node3);\n+        assertIsFocusWithin(node4);\n+\n+        node4._setFocused(false);\n+        assertNotFocusWithin(node1);\n+        assertNotFocusWithin(node2);\n+        assertNotFocusWithin(node3);\n+        assertNotFocusWithin(node4);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/FocusTest.java","additions":63,"deletions":9,"binary":false,"changes":72,"status":"modified"}]}