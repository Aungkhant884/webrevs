{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -162,2 +162,2 @@\n-    public void bind(final ObservableValue<? extends Boolean> rawObservable) {\n-        if (rawObservable == null) {\n+    public void bind(final ObservableValue<? extends Boolean> source) {\n+        if (source == null) {\n@@ -167,2 +167,2 @@\n-        final ObservableBooleanValue newObservable = (rawObservable instanceof ObservableBooleanValue) ? (ObservableBooleanValue) rawObservable\n-                : new ValueWrapper(rawObservable);\n+        final ObservableBooleanValue newObservable = (source instanceof ObservableBooleanValue) ? (ObservableBooleanValue) source\n+                : new ValueWrapper(source);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/BooleanPropertyBase.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -164,2 +164,2 @@\n-    public void bind(final ObservableValue<? extends Number> rawObservable) {\n-        if (rawObservable == null) {\n+    public void bind(final ObservableValue<? extends Number> source) {\n+        if (source == null) {\n@@ -170,5 +170,5 @@\n-        if (rawObservable instanceof ObservableDoubleValue) {\n-            newObservable = (ObservableDoubleValue)rawObservable;\n-        } else if (rawObservable instanceof ObservableNumberValue) {\n-            final ObservableNumberValue numberValue = (ObservableNumberValue)rawObservable;\n-            newObservable = new ValueWrapper(rawObservable) {\n+        if (source instanceof ObservableDoubleValue) {\n+            newObservable = (ObservableDoubleValue)source;\n+        } else if (source instanceof ObservableNumberValue) {\n+            final ObservableNumberValue numberValue = (ObservableNumberValue)source;\n+            newObservable = new ValueWrapper(source) {\n@@ -182,1 +182,1 @@\n-            newObservable = new ValueWrapper(rawObservable) {\n+            newObservable = new ValueWrapper(source) {\n@@ -186,1 +186,1 @@\n-                    final Number value = rawObservable.getValue();\n+                    final Number value = source.getValue();\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/DoublePropertyBase.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -164,2 +164,2 @@\n-    public void bind(final ObservableValue<? extends Number> rawObservable) {\n-        if (rawObservable == null) {\n+    public void bind(final ObservableValue<? extends Number> source) {\n+        if (source == null) {\n@@ -170,5 +170,5 @@\n-        if (rawObservable instanceof ObservableFloatValue) {\n-            newObservable = (ObservableFloatValue)rawObservable;\n-        } else if (rawObservable instanceof ObservableNumberValue) {\n-            final ObservableNumberValue numberValue = (ObservableNumberValue)rawObservable;\n-            newObservable = new ValueWrapper(rawObservable) {\n+        if (source instanceof ObservableFloatValue) {\n+            newObservable = (ObservableFloatValue)source;\n+        } else if (source instanceof ObservableNumberValue) {\n+            final ObservableNumberValue numberValue = (ObservableNumberValue)source;\n+            newObservable = new ValueWrapper(source) {\n@@ -182,1 +182,1 @@\n-            newObservable = new ValueWrapper(rawObservable) {\n+            newObservable = new ValueWrapper(source) {\n@@ -186,1 +186,1 @@\n-                    final Number value = rawObservable.getValue();\n+                    final Number value = source.getValue();\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/FloatPropertyBase.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -164,2 +164,2 @@\n-    public void bind(final ObservableValue<? extends Number> rawObservable) {\n-        if (rawObservable == null) {\n+    public void bind(final ObservableValue<? extends Number> source) {\n+        if (source == null) {\n@@ -170,5 +170,5 @@\n-        if (rawObservable instanceof ObservableIntegerValue) {\n-            newObservable = (ObservableIntegerValue)rawObservable;\n-        } else if (rawObservable instanceof ObservableNumberValue) {\n-            final ObservableNumberValue numberValue = (ObservableNumberValue)rawObservable;\n-            newObservable = new ValueWrapper(rawObservable) {\n+        if (source instanceof ObservableIntegerValue) {\n+            newObservable = (ObservableIntegerValue)source;\n+        } else if (source instanceof ObservableNumberValue) {\n+            final ObservableNumberValue numberValue = (ObservableNumberValue)source;\n+            newObservable = new ValueWrapper(source) {\n@@ -182,1 +182,1 @@\n-            newObservable = new ValueWrapper(rawObservable) {\n+            newObservable = new ValueWrapper(source) {\n@@ -186,1 +186,1 @@\n-                    final Number value = rawObservable.getValue();\n+                    final Number value = source.getValue();\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/IntegerPropertyBase.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -268,2 +268,2 @@\n-    public void bind(final ObservableValue<? extends ObservableList<E>> newObservable) {\n-        if (newObservable == null) {\n+    public void bind(final ObservableValue<? extends ObservableList<E>> source) {\n+        if (source == null) {\n@@ -273,1 +273,1 @@\n-        if (newObservable != observable) {\n+        if (source != observable) {\n@@ -275,1 +275,1 @@\n-            observable = newObservable;\n+            observable = source;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ListPropertyBase.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -164,2 +164,2 @@\n-    public void bind(final ObservableValue<? extends Number> rawObservable) {\n-        if (rawObservable == null) {\n+    public void bind(final ObservableValue<? extends Number> source) {\n+        if (source == null) {\n@@ -170,5 +170,5 @@\n-        if (rawObservable instanceof ObservableLongValue) {\n-            newObservable = (ObservableLongValue)rawObservable;\n-        } else if (rawObservable instanceof ObservableNumberValue) {\n-            final ObservableNumberValue numberValue = (ObservableNumberValue)rawObservable;\n-            newObservable = new ValueWrapper(rawObservable) {\n+        if (source instanceof ObservableLongValue) {\n+            newObservable = (ObservableLongValue)source;\n+        } else if (source instanceof ObservableNumberValue) {\n+            final ObservableNumberValue numberValue = (ObservableNumberValue)source;\n+            newObservable = new ValueWrapper(source) {\n@@ -182,1 +182,1 @@\n-            newObservable = new ValueWrapper(rawObservable) {\n+            newObservable = new ValueWrapper(source) {\n@@ -186,1 +186,1 @@\n-                    final Number value = rawObservable.getValue();\n+                    final Number value = source.getValue();\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/LongPropertyBase.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -270,2 +270,2 @@\n-    public void bind(final ObservableValue<? extends ObservableMap<K, V>> newObservable) {\n-        if (newObservable == null) {\n+    public void bind(final ObservableValue<? extends ObservableMap<K, V>> source) {\n+        if (source == null) {\n@@ -274,1 +274,1 @@\n-        if (newObservable != observable) {\n+        if (source != observable) {\n@@ -276,1 +276,1 @@\n-            observable = newObservable;\n+            observable = source;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/MapPropertyBase.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -163,2 +163,2 @@\n-    public void bind(final ObservableValue<? extends T> newObservable) {\n-        if (newObservable == null) {\n+    public void bind(final ObservableValue<? extends T> source) {\n+        if (source == null) {\n@@ -168,1 +168,1 @@\n-        if (!newObservable.equals(this.observable)) {\n+        if (!source.equals(this.observable)) {\n@@ -170,1 +170,1 @@\n-            observable = newObservable;\n+            observable = source;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ObjectPropertyBase.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,2 @@\n-     * Create a unidirection binding for this {@code Property}.\n+     * Establishes a unidirectional binding between this property (the <i>bound property<\/i>)\n+     * and an {@link ObservableValue} (the <i>binding source<\/i>).\n@@ -45,2 +46,15 @@\n-     * Note that JavaFX has all the bind calls implemented through weak listeners. This means the bound property\n-     * can be garbage collected and stopped from being updated.\n+     * After establishing the binding, the value of the bound property is synchronized with the value\n+     * of the binding source. If the value of the binding source changes, the change is immediately\n+     * reflected in the value of the bound property. Furthermore, the bound property becomes effectively\n+     * read-only: any call to {@link #setValue(Object)} will fail with an exception.\n+     * <p>\n+     * The bound property <i>strongly<\/i> references the binding source; this means that, as long as\n+     * the bound property is alive, the binding source will not be garbage-collected. As a consequence,\n+     * a bound property will not unexpectedly be unbound if its binding source would otherwise become\n+     * unreachable.\n+     * <p>\n+     * Conversely, the binding source only <i>weakly<\/i> references the bound property. In order to be\n+     * eligible for garbage collection, a bound property need not be unbound from its binding source.\n+     * <p>\n+     * If this method is called when the property is already bound, the previous binding is removed\n+     * as if by calling {@link #unbind()} before establishing the new binding.\n@@ -48,4 +62,2 @@\n-     * @param observable\n-     *            The observable this {@code Property} should be bound to.\n-     * @throws NullPointerException\n-     *             if {@code observable} is {@code null}\n+     * @param source the binding source\n+     * @throws NullPointerException if {@code source} is {@code null}\n@@ -53,1 +65,1 @@\n-    void bind(ObservableValue<? extends T> observable);\n+    void bind(ObservableValue<? extends T> source);\n@@ -56,4 +68,4 @@\n-     * Remove the unidirectional binding for this {@code Property}.\n-     *\n-     * If the {@code Property} is not bound, calling this method has no effect.\n-     * @see #bind(javafx.beans.value.ObservableValue)\n+     * Removes a unidirectional binding that was established with {@link #bind(ObservableValue)}.\n+     * <p>\n+     * The value of this property will remain unchanged.\n+     * If this property is not bound, calling this method has no effect.\n@@ -64,2 +76,5 @@\n-     * Can be used to check, if a {@code Property} is bound.\n-     * @see #bind(javafx.beans.value.ObservableValue)\n+     * Returns whether this property is bound by a unidirectional binding that was\n+     * established by calling {@link #bind(ObservableValue)}.\n+     * <p>\n+     * Note that this method does <b>not<\/b> account for bidirectional bindings that were\n+     * established by calling {@link #bindBidirectional(Property)}.\n@@ -67,2 +82,1 @@\n-     * @return {@code true} if the {@code Property} is bound, {@code false}\n-     *         otherwise\n+     * @return whether this property is unidirectionally bound\n@@ -73,5 +87,1 @@\n-     * Create a bidirectional binding between this {@code Property} and another\n-     * one.\n-     * Bidirectional bindings exists independently of unidirectional bindings. So it is possible to\n-     * add unidirectional binding to a property with bidirectional binding and vice-versa. However, this practice is\n-     * discouraged.\n+     * Establishes a bidirectional binding between this property and another {@link Property}.\n@@ -79,1 +89,3 @@\n-     * It is possible to have multiple bidirectional bindings of one Property.\n+     * After establishing the binding, the values of both properties are synchronized: any change\n+     * to the value of one property will immediately result in the value of the other property being\n+     * changed accordingly.\n@@ -81,2 +93,19 @@\n-     * JavaFX bidirectional binding implementation use weak listeners. This means bidirectional binding does not prevent\n-     * properties from being garbage collected.\n+     * While it is not possible for a property to be bound by more than one unidirectional binding,\n+     * it is legal to establish multiple bidirectional bindings for the same property. However,\n+     * since a bidirectional binding allows for the values of both properties to be changed\n+     * by calling {@link #setValue(Object)}, neither of the properties is considered to be a\n+     * <i>bound property<\/i> that returns {@code true} from {@link #isBound()}.\n+     * <p>\n+     * Both properties of a bidirectional binding <i>weakly<\/i> reference their counterparts.\n+     * This is different from a unidirectional binding, where the bound property <i>strongly<\/i>\n+     * references its binding source. In practice, this means that if any of the bidirectionally\n+     * bound properties become unreachable, the binding is eligible for garbage collection.\n+     * Furthermore, neither of the bidirectionally bound properties will keep its counterpart\n+     * alive if the counterpart would otherwise become unreachable.\n+     * <p>\n+     * Bidirectional bindings are independent from unidirectional bindings. As a consequence,\n+     * establishing a bidirectional binding does not remove a unidirectional binding that has\n+     * already been established, nor does it prevent a unidirectional binding from being\n+     * established. However, doing so is not a meaningful use of this API, because the\n+     * unidirectionally bound property will cause any attempt to change the value of any of\n+     * the properties to fail with an exception.\n@@ -84,6 +113,3 @@\n-     * @param other\n-     *            the other {@code Property}\n-     * @throws NullPointerException\n-     *             if {@code other} is {@code null}\n-     * @throws IllegalArgumentException\n-     *             if {@code other} is {@code this}\n+     * @param other the other property\n+     * @throws NullPointerException if {@code other} is {@code null}\n+     * @throws IllegalArgumentException if {@code other} is {@code this}\n@@ -94,12 +120,8 @@\n-     * Remove a bidirectional binding between this {@code Property} and another\n-     * one.\n-     *\n-     * If no bidirectional binding between the properties exists, calling this\n-     * method has no effect.\n-     *\n-     * It is possible to unbind by a call on the second property. This code will work:\n-     *\n-     * <blockquote><pre>\n-     *     property1.bindBirectional(property2);\n-     *     property2.unbindBidirectional(property1);\n-     * <\/pre><\/blockquote>\n+     * Removes a bidirectional binding that was established with {@link #bindBidirectional(Property)}.\n+     * <p>\n+     * Bidirectional bindings can be removed by calling this method on either of the two properties:\n+     * <pre><code>\n+     * property1.bindBidirectional(property2);\n+     * property2.unbindBidirectional(property1);\n+     * <\/code><\/pre>\n+     * If the properties are not bidirectionally bound, calling this method has no effect.\n@@ -107,6 +129,3 @@\n-     * @param other\n-     *            the other {@code Property}\n-     * @throws NullPointerException\n-     *             if {@code other} is {@code null}\n-     * @throws IllegalArgumentException\n-     *             if {@code other} is {@code this}\n+     * @param other the other property\n+     * @throws NullPointerException if {@code other} is {@code null}\n+     * @throws IllegalArgumentException if {@code other} is {@code this}\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/Property.java","additions":68,"deletions":49,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -270,2 +270,2 @@\n-    public void bind(final ObservableValue<? extends ObservableSet<E>> newObservable) {\n-        if (newObservable == null) {\n+    public void bind(final ObservableValue<? extends ObservableSet<E>> source) {\n+        if (source == null) {\n@@ -275,1 +275,1 @@\n-        if (newObservable != this.observable) {\n+        if (source != this.observable) {\n@@ -277,1 +277,1 @@\n-            observable = newObservable;\n+            observable = source;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/SetPropertyBase.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -161,2 +161,2 @@\n-    public void bind(ObservableValue<? extends String> newObservable) {\n-        if (newObservable == null) {\n+    public void bind(ObservableValue<? extends String> source) {\n+        if (source == null) {\n@@ -165,1 +165,1 @@\n-        if (!newObservable.equals(observable)) {\n+        if (!source.equals(observable)) {\n@@ -167,1 +167,1 @@\n-            observable = newObservable;\n+            observable = source;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/StringPropertyBase.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -158,2 +158,2 @@\n-    public void bind(ObservableValue<? extends Boolean> observable) {\n-        if (observable == null) {\n+    public void bind(ObservableValue<? extends Boolean> source) {\n+        if (source == null) {\n@@ -163,1 +163,1 @@\n-        if (!observable.equals(this.observable)) {\n+        if (!source.equals(this.observable)) {\n@@ -165,2 +165,2 @@\n-            set(observable.getValue());\n-            this.observable = observable;\n+            set(source.getValue());\n+            this.observable = source;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanBooleanProperty.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -159,2 +159,2 @@\n-    public void bind(ObservableValue<? extends Number> observable) {\n-        if (observable == null) {\n+    public void bind(ObservableValue<? extends Number> source) {\n+        if (source == null) {\n@@ -164,1 +164,1 @@\n-        if (!observable.equals(this.observable)) {\n+        if (!source.equals(this.observable)) {\n@@ -166,2 +166,2 @@\n-            set(observable.getValue().doubleValue());\n-            this.observable = observable;\n+            set(source.getValue().doubleValue());\n+            this.observable = source;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanDoubleProperty.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -158,2 +158,2 @@\n-    public void bind(ObservableValue<? extends Number> observable) {\n-        if (observable == null) {\n+    public void bind(ObservableValue<? extends Number> source) {\n+        if (source == null) {\n@@ -163,1 +163,1 @@\n-        if (!observable.equals(this.observable)) {\n+        if (!source.equals(this.observable)) {\n@@ -165,2 +165,2 @@\n-            set(observable.getValue().floatValue());\n-            this.observable = observable;\n+            set(source.getValue().floatValue());\n+            this.observable = source;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanFloatProperty.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -158,2 +158,2 @@\n-    public void bind(ObservableValue<? extends Number> observable) {\n-        if (observable == null) {\n+    public void bind(ObservableValue<? extends Number> source) {\n+        if (source == null) {\n@@ -163,1 +163,1 @@\n-        if (!observable.equals(this.observable)) {\n+        if (!source.equals(this.observable)) {\n@@ -165,2 +165,2 @@\n-            set(observable.getValue().intValue());\n-            this.observable = observable;\n+            set(source.getValue().intValue());\n+            this.observable = source;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanIntegerProperty.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -158,2 +158,2 @@\n-    public void bind(ObservableValue<? extends Number> observable) {\n-        if (observable == null) {\n+    public void bind(ObservableValue<? extends Number> source) {\n+        if (source == null) {\n@@ -163,1 +163,1 @@\n-        if (!observable.equals(this.observable)) {\n+        if (!source.equals(this.observable)) {\n@@ -165,2 +165,2 @@\n-            set(observable.getValue().longValue());\n-            this.observable = observable;\n+            set(source.getValue().longValue());\n+            this.observable = source;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanLongProperty.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -162,2 +162,2 @@\n-    public void bind(ObservableValue<? extends T> observable) {\n-        if (observable == null) {\n+    public void bind(ObservableValue<? extends T> source) {\n+        if (source == null) {\n@@ -167,1 +167,1 @@\n-        if (!observable.equals(this.observable)) {\n+        if (!source.equals(this.observable)) {\n@@ -169,2 +169,2 @@\n-            set(observable.getValue());\n-            this.observable = observable;\n+            set(source.getValue());\n+            this.observable = source;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanObjectProperty.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -157,2 +157,2 @@\n-    public void bind(ObservableValue<? extends String> observable) {\n-        if (observable == null) {\n+    public void bind(ObservableValue<? extends String> source) {\n+        if (source == null) {\n@@ -162,1 +162,1 @@\n-        if (!observable.equals(this.observable)) {\n+        if (!source.equals(this.observable)) {\n@@ -164,2 +164,2 @@\n-            set(observable.getValue());\n-            this.observable = observable;\n+            set(source.getValue());\n+            this.observable = source;\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanStringProperty.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}