{"files":[{"patch":"@@ -40,1 +40,2 @@\n-\/\/ for consistency.\n+\/\/ for consistency. Linux on Apple Silicon also needs to use 16KiB for best performance, so use that\n+\/\/ for Linux on aarch64 as well.\n@@ -47,1 +48,1 @@\n-#if OS(DARWIN) || PLATFORM(PLAYSTATION) || CPU(MIPS) || CPU(MIPS64)\n+#if OS(DARWIN) || PLATFORM(PLAYSTATION) || CPU(MIPS) || CPU(MIPS64) || (OS(LINUX) && CPU(ARM64))\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/PageBlock.h","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1438,7 +1438,4 @@\n-        list(APPEND WebCore_SYSTEM_INCLUDE_DIRECTORIES\n-            ${OPENGL_INCLUDE_DIRS}\n-        )\n-        list(APPEND WebCore_LIBRARIES\n-            ${OPENGL_LIBRARIES}\n-        )\n-        add_definitions(${OPENGL_DEFINITIONS})\n+        list(APPEND WebCore_LIBRARIES OpenGL::OpenGL)\n+        if (TARGET OpenGL::GLX)\n+            list(APPEND WebCore_LIBRARIES OpenGL::GLX)\n+        endif ()\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/CMakeLists.txt","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -585,0 +585,1 @@\n+    case CSSSelector::PseudoClassHas:\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/parser\/CSSSelectorParser.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -392,1 +392,1 @@\n-        Node* n;\n+        RefPtr<Node> n;\n@@ -396,1 +396,1 @@\n-            Node* splitTo = insertionPosition.containerNode();\n+            RefPtr<Node> splitTo = insertionPosition.containerNode();\n@@ -399,2 +399,2 @@\n-            ASSERT(splitTo);\n-            splitTreeToNode(*splitTo, *startBlock);\n+            if (splitTo) {\n+                splitTreeToNode(*splitTo, *startBlock);\n@@ -402,3 +402,4 @@\n-            for (n = startBlock->firstChild(); n; n = n->nextSibling()) {\n-                if (VisiblePosition(insertionPosition) <= VisiblePosition(positionBeforeNode(n)))\n-                    break;\n+                for (n = startBlock->firstChild(); n; n = n->nextSibling()) {\n+                    if (VisiblePosition(insertionPosition) <= VisiblePosition(positionBeforeNode(n.get())))\n+                        break;\n+                }\n@@ -408,1 +409,1 @@\n-        moveRemainingSiblingsToNewParent(n, blockToInsert.get(), *blockToInsert);\n+        moveRemainingSiblingsToNewParent(n.get(), blockToInsert.get(), *blockToInsert);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/editing\/InsertParagraphSeparatorCommand.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1110,1 +1110,1 @@\n-void FrameLoader::loadInSameDocument(const URL& url, SerializedScriptValue* stateObject, bool isNewNavigation)\n+void FrameLoader::loadInSameDocument(URL url, RefPtr<SerializedScriptValue> stateObject, bool isNewNavigation)\n@@ -1172,1 +1172,1 @@\n-    m_frame.document()->statePopped(stateObject ? Ref<SerializedScriptValue> { *stateObject } : SerializedScriptValue::nullValue());\n+    m_frame.document()->statePopped(stateObject ? stateObject.releaseNonNull() : SerializedScriptValue::nullValue());\n@@ -3226,1 +3226,1 @@\n-    loadInSameDocument(request.url(), 0, !isRedirect);\n+    loadInSameDocument(request.url(), nullptr, !isRedirect);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/FrameLoader.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -394,1 +394,1 @@\n-    void loadInSameDocument(const URL&, SerializedScriptValue* stateObject, bool isNewNavigation);\n+    void loadInSameDocument(URL, RefPtr<SerializedScriptValue> stateObject, bool isNewNavigation);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/FrameLoader.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-    if (!scrollbar.enabled())\n+    if (!scrollbar.enabled() && usesOverlayScrollbars())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/adwaita\/ScrollbarThemeAdwaita.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,8 @@\n+#if USE(LIBEPOXY)\n+#include <epoxy\/gl.h>\n+#elif USE(OPENGL_ES)\n+#include <GLES2\/gl2.h>\n+#else\n+#include \"OpenGLShims.h\"\n+#endif\n+\n@@ -34,1 +42,0 @@\n-#include \"OpenGLShims.h\"\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/GLContext.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,6 +27,0 @@\n-#if USE(LIBEPOXY)\n-#include <epoxy\/gl.h>\n-#elif USE(OPENGL_ES)\n-#include <GLES2\/gl2.h>\n-#endif\n-\n@@ -34,1 +28,0 @@\n-#if PLATFORM(WPE)\n@@ -36,1 +29,3 @@\n-\/\/ somehow deducible from the build configuration.\n+\/\/ somehow deducible from the build configuration. This is needed with libepoxy\n+\/\/ as it could have been configured with X11 support enabled, resulting in\n+\/\/ transitive inclusions of headers with definitions that clash with WebCore.\n@@ -38,1 +33,3 @@\n-#endif \/\/ PLATFORM(WPE)\n+#if USE(LIBEPOXY)\n+#include <epoxy\/egl.h>\n+#else \/\/ !USE(LIBEPOXY)\n@@ -40,0 +37,1 @@\n+#endif \/\/ USE(LIBEPOXY)\n@@ -43,1 +41,1 @@\n-#endif\n+#endif \/\/ USE(EGL) && !PLATFORM(GTK)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/GLContext.h","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -198,2 +198,1 @@\n-        if (destChild) {\n-            destChild->rectList.append(sourceChildScope.rectList);\n+        if (destChild)\n@@ -201,1 +200,1 @@\n-        } else {\n+        else {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/LayerOverlapMap.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,9 +1,1 @@\n-# - Try to Find OpenGL\n-# Once done, this will define\n-#\n-#  OPENGL_FOUND - system has OpenGL installed.\n-#  OPENGL_INCLUDE_DIRS - directories which contain the OpenGL headers.\n-#  OPENGL_LIBRARIES - libraries required to link against OpenGL.\n-#  OPENGL_DEFINITIONS - Compiler switches required for using OpenGL.\n-#\n-# Copyright (C) 2015 Igalia S.L.\n+# Copyright (C) 2015, 2022 Igalia S.L.\n@@ -31,0 +23,34 @@\n+#\n+#[=======================================================================[.rst:\n+FindOpenGL\n+----------\n+\n+Find OpenGL headers and libraries.\n+\n+Imported Targets\n+^^^^^^^^^^^^^^^^\n+\n+``OpenGL::OpenGL``\n+  The main OpenGL library, if found. It must *not* be assumed that this\n+  library provides symbols other than the base OpenGL set.\n+``OpenGL::GLX``\n+  The library containing the GL extension for the X11 windowing system,\n+  if found.\n+\n+Result Variables\n+^^^^^^^^^^^^^^^^\n+\n+This will define the following variables in your project:\n+\n+``OpenGL_FOUND``\n+  True if the OpenGL library is available.\n+``OpenGL_VERSION``\n+  The version of the found OpenGL library, if possible to determine it at\n+  build configuration time. The variable may be undefined.\n+\n+#]=======================================================================]\n+\n+# TODO:\n+#  - Make GLX an optional component of the find-module.\n+#  - Make EGL an optional component here, remove FindEGL.cmake.\n+#  - Consider whether FindGLES2.cmake could be moved here as well.\n@@ -33,0 +59,41 @@\n+pkg_check_modules(PC_OPENGL IMPORTED_TARGET opengl)\n+\n+if (PC_OPENGL_FOUND AND TARGET PkgConfig::PC_OPENGL)\n+    #\n+    # If the \"opengl\" module exists, it should be preferred; and the library\n+    # name will typically be libOpenGL.so; in this case if GLX support is\n+    # available a \"glx\" module will *also* be available. This is a modern\n+    # Unix-ish convention and expected to be always provided by pkg-config\n+    # modules, so there is no need to fall-back to manually using find_path()\n+    # and find_library().\n+    #\n+    if (NOT TARGET OpenGL::OpenGL)\n+        add_library(OpenGL::OpenGL INTERFACE IMPORTED GLOBAL)\n+        set_property(TARGET OpenGL::OpenGL PROPERTY\n+            INTERFACE_LINK_LIBRARIES PkgConfig::PC_OPENGL\n+        )\n+    endif ()\n+\n+    get_target_property(OpenGL_LIBRARY PkgConfig::PC_OPENGL INTERFACE_LINK_LIBRARIES)\n+\n+    pkg_check_modules(PC_GLX IMPORTED_TARGET glx)\n+    if (TARGET PkgConfig::PC_GLX AND NOT TARGET OpenGL::GLX)\n+        add_library(OpenGL::GLX INTERFACE IMPORTED GLOBAL)\n+        set_property(TARGET OpenGL::GLX PROPERTY\n+            INTERFACE_LINK_LIBRARIES PkgConfig::PC_GLX\n+        )\n+    endif ()\n+else ()\n+    # Otherwise, if an \"opengl\" pkg-config module does not exist, check for\n+    # the \"gl\" one, which may or may not be present.\n+    #\n+    pkg_check_modules(PC_OPENGL gl)\n+    find_path(OpenGL_INCLUDE_DIR\n+        NAMES GL\/gl.h\n+        HINTS ${PC_OPENGL_INCLUDEDIR} ${PC_OPENGL_INCLUDE_DIRS}\n+    )\n+\n+    find_library(OpenGL_LIBRARY\n+        NAMES ${OpenGL_NAMES} gl GL\n+        HINTS ${PC_OPENGL_LIBDIR} ${PC_OPENGL_LIBRARY_DIRS}\n+    )\n@@ -34,1 +101,8 @@\n-pkg_check_modules(PC_OPENGL gl)\n+    if (OpenGL_LIBRARY AND NOT TARGET OpenGL::OpenGL)\n+        add_library(OpenGL::OpenGL UNKNOWN IMPORTED GLOBAL)\n+        set_target_properties(OpenGL::OpenGL PROPERTIES\n+            IMPORTED_LOCATION \"${OpenGL_LIBRARY}\"\n+            INTERFACE_COMPILE_OPTIONS \"${PC_OPENGL_CFLAGS_OTHER}\"\n+            INTERFACE_INCLUDE_DIRECTORIES \"${OpenGL_INCLUDE_DIR}\"\n+        )\n+    endif ()\n@@ -36,2 +110,19 @@\n-if (PC_OPENGL_FOUND)\n-    set(OPENGL_DEFINITIONS ${PC_OPENGL_CFLAGS_OTHER})\n+    if (TARGET OpenGL::OpenGL)\n+        # We don't use find_package for GLX because it is part of -lGL, unlike EGL. We need to\n+        # have OPENGL_INCLUDE_DIRS as part of the directories check_include_files() looks for in\n+        # case OpenGL is installed into a non-standard location.\n+        include(CMakePushCheckState)\n+        CMAKE_PUSH_CHECK_STATE()\n+        set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${OpenGL_INCLUDE_DIR})\n+        include(CheckIncludeFiles)\n+        check_include_files(\"GL\/glx.h\" OpenGL_GLX_FOUND)\n+        CMAKE_POP_CHECK_STATE()\n+\n+        if (OpenGL_GLX_FOUND)\n+            # XXX: Should this actually check that the OpenGL library contains the GLX symbols?\n+            add_library(OpenGL::GLX INTERFACE IMPORTED GLOBAL)\n+            set_property(TARGET OpenGL::GLX PROPERTY\n+                INTERFACE_LINK_LIBRARIES OpenGL::OpenGL\n+            )\n+        endif ()\n+    endif ()\n@@ -40,3 +131,1 @@\n-find_path(OPENGL_INCLUDE_DIRS NAMES GL\/gl.h\n-    HINTS ${PC_OPENGL_INCLUDEDIR} ${PC_OPENGL_INCLUDE_DIRS}\n-)\n+set(OpenGL_VERSION \"${PC_OPENGL_VERSION}\")\n@@ -44,3 +133,4 @@\n-set(OPENGL_NAMES ${OPENGL_NAMES} gl GL)\n-find_library(OPENGL_LIBRARIES NAMES ${OPENGL_NAMES}\n-    HINTS ${PC_OPENGL_LIBDIR} ${PC_OPENGL_LIBRARY_DIRS}\n+include(FindPackageHandleStandardArgs)\n+find_package_handle_standard_args(OpenGL\n+    REQUIRED_VARS OpenGL_LIBRARY\n+    FOUND_VAR OpenGL_FOUND\n@@ -49,16 +139,5 @@\n-include(FindPackageHandleStandardArgs)\n-find_package_handle_standard_args(OpenGL REQUIRED_VARS OPENGL_INCLUDE_DIRS OPENGL_LIBRARIES\n-                                  FOUND_VAR OPENGL_FOUND)\n-\n-mark_as_advanced(OPENGL_INCLUDE_DIRS OPENGL_LIBRARIES)\n-\n-if (OPENGL_FOUND)\n-    # We don't use find_package for GLX because it is part of -lGL, unlike EGL. We need to\n-    # have OPENGL_INCLUDE_DIRS as part of the directories check_include_files() looks for in\n-    # case OpenGL is installed into a non-standard location.\n-    include(CMakePushCheckState)\n-    CMAKE_PUSH_CHECK_STATE()\n-    set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${OPENGL_INCLUDE_DIRS})\n-    include(CheckIncludeFiles)\n-    check_include_files(\"GL\/glx.h\" GLX_FOUND)\n-    CMAKE_POP_CHECK_STATE()\n+mark_as_advanced(OpenGL_INCLUDE_DIR OpenGL_LIBRARY)\n+\n+if (OpenGL_FOUND)\n+    set(OpenGL_LIBRARIES ${OpenGL_LIBRARY})\n+    set(OpenGL_INCLUDE_DIRS ${OpenGL_INCLUDE_DIR})\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/cmake\/FindOpenGL.cmake","additions":113,"deletions":34,"binary":false,"changes":147,"status":"modified"}]}