{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import static org.junit.Assert.fail;\n@@ -70,4 +69,4 @@\n-        double colOneWidth = table.getColumns().get(0).getWidth();\n-        double colTwoWidth = table.getColumns().get(1).getWidth();\n-        double colThreeWidth = table.getColumns().get(2).getWidth();\n-        double colsWidthBeforeResize = colOneWidth + colTwoWidth + colThreeWidth;\n+        double wid0 = table.getColumns().get(0).getWidth();\n+        double wid1 = table.getColumns().get(1).getWidth();\n+        double wid2 = table.getColumns().get(2).getWidth();\n+        double colsWidthBeforeResize = wid0 + wid1 + wid2;\n@@ -75,4 +74,2 @@\n-        double posX = scene.getWindow().getX() + table.getLayoutX() +\n-                colOneWidth + colTwoWidth;\n-        double posY = scene.getWindow().getY() + table.getLayoutY() +\n-                colHeaderHeight \/ 2;\n+        double posX = scene.getWindow().getX() + table.getLayoutX() + wid0 + wid1;\n+        double posY = scene.getWindow().getY() + table.getLayoutY() + colHeaderHeight \/ 2;\n@@ -89,0 +86,1 @@\n+\n@@ -90,5 +88,2 @@\n-        try {\n-            Thread.sleep(1000); \/\/ Delay for table resizing of table columns.\n-        } catch (Exception e) {\n-            fail(\"Thread was interrupted.\" + e);\n-        }\n+        Util.waitForIdle(scene);\n+\n@@ -96,1 +91,1 @@\n-                (colTwoWidth != table.getColumns().get(1).getWidth()));\n+            (wid1 != table.getColumns().get(1).getWidth()));\n@@ -98,8 +93,11 @@\n-        \/\/ Skip this check on platforms with fractional scale until JDK-8299753 gets implemented\n-        if (!Util.isFractionalScaleX(table)) {\n-            colTwoWidth = table.getColumns().get(1).getWidth();\n-            colThreeWidth = table.getColumns().get(2).getWidth();\n-            double colsWidthAfterResize = colOneWidth + colTwoWidth + colThreeWidth;\n-            Assert.assertEquals(\"TableView.CONSTRAINED_RESIZE_POLICY ignored.\",\n-                    colsWidthBeforeResize, colsWidthAfterResize, EPSILON);\n-        }\n+        wid1 = table.getColumns().get(1).getWidth();\n+        wid2 = table.getColumns().get(2).getWidth();\n+        double colsWidthAfterResize = wid0 + wid1 + wid2;\n+        double tolerance = Util.getTolerance(table);\n+        String message = \"TableView.CONSTRAINED_RESIZE_POLICY ignored\" +\n+            \", before=\" + colsWidthBeforeResize +\n+            \", after=\" + colsWidthAfterResize +\n+            \", diff=\" + Math.abs(colsWidthBeforeResize - colsWidthAfterResize) +\n+            \", tolerance=\" + tolerance +\n+            \", tol+eps=\" + (tolerance + EPSILON);\n+        Assert.assertEquals(message, colsWidthBeforeResize, colsWidthAfterResize, tolerance + EPSILON);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/tableview\/TableViewResizeColumnToFitContentTest.java","additions":21,"deletions":23,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import static org.junit.Assert.fail;\n@@ -71,4 +70,4 @@\n-        double colOneWidth = treeTableView.getColumns().get(0).getWidth();\n-        double colTwoWidth = treeTableView.getColumns().get(1).getWidth();\n-        double colThreeWidth = treeTableView.getColumns().get(2).getWidth();\n-        double colsWidthBeforeResize = colOneWidth + colTwoWidth + colThreeWidth;\n+        double wid0 = treeTableView.getColumns().get(0).getWidth();\n+        double wid1 = treeTableView.getColumns().get(1).getWidth();\n+        double wid2 = treeTableView.getColumns().get(2).getWidth();\n+        double colsWidthBeforeResize = wid0 + wid1 + wid2;\n@@ -76,4 +75,3 @@\n-        double posX = scene.getWindow().getX() + treeTableView.getLayoutX() +\n-                colOneWidth + colTwoWidth;\n-        double posY = scene.getWindow().getY() + treeTableView.getLayoutY() +\n-                colHeaderHeight \/ 2;\n+        double posX = scene.getWindow().getX() + treeTableView.getLayoutX() + wid0 + wid1;\n+        double posY = scene.getWindow().getY() + treeTableView.getLayoutY() + colHeaderHeight \/ 2;\n+\n@@ -89,0 +87,1 @@\n+\n@@ -90,5 +89,2 @@\n-        try {\n-            Thread.sleep(1000); \/\/ Delay for table resizing of table columns.\n-        } catch (Exception e) {\n-            fail(\"Thread was interrupted.\" + e);\n-        }\n+        Util.waitForIdle(scene);\n+\n@@ -96,10 +92,13 @@\n-                (colTwoWidth != treeTableView.getColumns().get(1).getWidth()));\n-\n-        \/\/ Skip this check on platforms with fractional scale until JDK-8299753 gets implemented\n-        if (!Util.isFractionalScaleX(treeTableView)) {\n-            colTwoWidth = treeTableView.getColumns().get(1).getWidth();\n-            colThreeWidth = treeTableView.getColumns().get(2).getWidth();\n-            double colsWidthAfterResize = colOneWidth + colTwoWidth + colThreeWidth;\n-            Assert.assertEquals(\"TreeTableView.CONSTRAINED_RESIZE_POLICY ignored.\",\n-                    colsWidthBeforeResize, colsWidthAfterResize, EPSILON);\n-        }\n+                (wid1 != treeTableView.getColumns().get(1).getWidth()));\n+\n+        wid1 = treeTableView.getColumns().get(1).getWidth();\n+        wid2 = treeTableView.getColumns().get(2).getWidth();\n+        double colsWidthAfterResize = wid0 + wid1 + wid2;\n+        double tolerance = Util.getTolerance(treeTableView);\n+        String message = \"TreeTableView.CONSTRAINED_RESIZE_POLICY ignored\" +\n+            \", before=\" + colsWidthBeforeResize +\n+            \", after=\" + colsWidthAfterResize +\n+            \", diff=\" + Math.abs(colsWidthBeforeResize - colsWidthAfterResize) +\n+            \", tolerance=\" + tolerance +\n+            \", tol+eps=\" + (tolerance + EPSILON);\n+        Assert.assertEquals(message, colsWidthBeforeResize, colsWidthAfterResize, tolerance + EPSILON);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/treetableview\/TreeTableViewResizeColumnToFitContentTest.java","additions":23,"deletions":24,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import javafx.scene.layout.Region;\n@@ -49,1 +50,1 @@\n-\n+import javafx.stage.Window;\n@@ -469,0 +470,28 @@\n+\n+    \/**\n+     * Returns the tolerance which should be used when comparing values,\n+     * when {@link Region#isSnapToPixel()} returns true and the scale can\n+     * be determined from the region's parent {@code Window}.\n+     * When scale cannot be determined it is assumed to be 1.0.\n+     * Otherwise, returns 0.0.\n+     *\n+     * @param r the region in question\n+     * @return the tolerance value\n+     *\/\n+    public static double getTolerance(Region r) {\n+        if (r.isSnapToPixel()) {\n+            Scene scene = r.getScene();\n+            if (scene != null) {\n+                Window win = scene.getWindow();\n+                if (win != null) {\n+                    \/\/ x and y usually have the same scale, so we'll use x\n+                    double scale = win.getRenderScaleX();\n+                    \/\/ distance between pixels in the local (unscaled) coordinates is (1 \/ scale)\n+                    return 1.0 \/ scale;\n+                }\n+            }\n+            \/\/ default to 1 when the scale cannot be determited\n+            return 1.0;\n+        }\n+        return 0.0;\n+    }\n","filename":"tests\/system\/src\/test\/java\/test\/util\/Util.java","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"}]}