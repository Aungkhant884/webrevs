{"files":[{"patch":"@@ -44,0 +44,2 @@\n+import java.util.concurrent.atomic.AtomicReference;\n+\n@@ -50,21 +52,0 @@\n-    static CountDownLatch startupLatch;\n-    static Stage stage;\n-    static Button toBeRemoved;\n-    static Group root;\n-\n-    public static class TestApp extends Application {\n-\n-        @Override\n-        public void start(Stage primaryStage) throws Exception {\n-            stage = primaryStage;\n-            toBeRemoved = new Button();\n-            root = new Group();\n-            root.getChildren().add(toBeRemoved);\n-            stage.setScene(new Scene(root));\n-            stage.setOnShown(l -> {\n-                Platform.runLater(() -> startupLatch.countDown());\n-            });\n-            stage.show();\n-        }\n-    }\n-\n@@ -73,2 +54,5 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(StyleMemoryLeakTest.TestApp.class, (String[])null)).start();\n+        CountDownLatch startupLatch = new CountDownLatch(1);\n+        Platform.startup(() -> {\n+            Platform.setImplicitExit(false);\n+            startupLatch.countDown();\n+        });\n@@ -80,4 +64,0 @@\n-        Util.runAndWait(() -> {\n-            root.getChildren().clear();\n-            stage.hide();\n-        });\n@@ -85,1 +65,27 @@\n-            checker.assertCollectable(stage);\n+            CountDownLatch showingLatch = new CountDownLatch(1);\n+\n+            Button toBeRemoved = new Button();\n+            Group root = new Group();\n+            AtomicReference<Stage> stage = new AtomicReference<>();\n+\n+            Util.runAndWait(() -> {\n+                stage.set(new Stage());\n+                stage.get().setOnShown(l -> {\n+                    Platform.runLater(() -> showingLatch.countDown());\n+                });\n+                stage.get().setScene(new Scene(root));\n+                stage.get().show();\n+            });\n+\n+            try {\n+                assertTrue(\"Timeout waiting test stage\", showingLatch.await(15, TimeUnit.SECONDS));\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            Util.runAndWait(() -> {\n+                root.getChildren().clear();\n+                stage.get().hide();\n+            });\n+\n+            checker.assertCollectable(stage.get());\n@@ -87,2 +93,0 @@\n-            stage = null;\n-            root = null;\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/StyleMemoryLeakTest.java","additions":34,"deletions":30,"binary":false,"changes":64,"status":"modified"}]}