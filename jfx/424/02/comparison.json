{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.ref.WeakReference;\n@@ -179,1 +180,1 @@\n-        helper.firstStyleableAncestor = findFirstStyleableAncestor(node);\n+        helper.firstStyleableAncestor = new WeakReference<>(findFirstStyleableAncestor(node));\n@@ -212,1 +213,1 @@\n-                    parentNode.styleHelper.firstStyleableAncestor = findFirstStyleableAncestor(parentNode) ;\n+                    parentNode.styleHelper.firstStyleableAncestor = new WeakReference(findFirstStyleableAncestor(parentNode)) ;\n@@ -235,2 +236,2 @@\n-        Styleable styleableParent = firstStyleableAncestor;\n-        CssStyleHelper parentStyleHelper = getStyleHelper(firstStyleableAncestor);\n+        Styleable styleableParent = firstStyleableAncestor.get();\n+        CssStyleHelper parentStyleHelper = getStyleHelper(firstStyleableAncestor.get());\n@@ -303,1 +304,1 @@\n-        node.styleHelper.firstStyleableAncestor = findFirstStyleableAncestor(node);\n+        node.styleHelper.firstStyleableAncestor = new WeakReference<>(findFirstStyleableAncestor(node));\n@@ -325,1 +326,1 @@\n-        CssStyleHelper parentHelper = getStyleHelper(node.styleHelper.firstStyleableAncestor);\n+        CssStyleHelper parentHelper = getStyleHelper(node.styleHelper.firstStyleableAncestor.get());\n@@ -354,1 +355,1 @@\n-    private Node firstStyleableAncestor;\n+    private WeakReference<Node> firstStyleableAncestor = null;\n@@ -1224,1 +1225,1 @@\n-        Styleable parent = ((Node)styleable).styleHelper.firstStyleableAncestor;\n+        Styleable parent = ((Node)styleable).styleHelper.firstStyleableAncestor.get();\n@@ -1269,1 +1270,1 @@\n-                Styleable styleableParent = ((Node)styleable).styleHelper.firstStyleableAncestor;\n+                Styleable styleableParent = ((Node)styleable).styleHelper.firstStyleableAncestor.get();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/CssStyleHelper.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Group;\n+import javafx.scene.Node;\n+import javafx.scene.Parent;\n+import javafx.scene.control.Button;\n+import javafx.scene.Scene;\n+import javafx.stage.Stage;\n+import junit.framework.Assert;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import test.util.Util;\n+import test.util.memory.JMemoryBuddy;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.junit.Assert.fail;\n+import static org.junit.Assert.assertTrue;\n+\n+\n+public class StyleMemoryLeakTest {\n+\n+    @BeforeClass\n+    public static void initFX() throws Exception {\n+        CountDownLatch startupLatch = new CountDownLatch(1);\n+        Platform.startup(() -> {\n+            Platform.setImplicitExit(false);\n+            startupLatch.countDown();\n+        });\n+        assertTrue(\"Timeout waiting for FX runtime to start\", startupLatch.await(15, TimeUnit.SECONDS));\n+    }\n+\n+    @Test\n+    public void testRootNodeMemoryLeak() throws Exception {\n+        JMemoryBuddy.memoryTest((checker) -> {\n+            CountDownLatch showingLatch = new CountDownLatch(1);\n+\n+            Button toBeRemoved = new Button();\n+            Group root = new Group();\n+            AtomicReference<Stage> stage = new AtomicReference<>();\n+\n+            Util.runAndWait(() -> {\n+                stage.set(new Stage());\n+                stage.get().setOnShown(l -> {\n+                    Platform.runLater(() -> showingLatch.countDown());\n+                });\n+                stage.get().setScene(new Scene(root));\n+                stage.get().show();\n+            });\n+\n+            try {\n+                assertTrue(\"Timeout waiting test stage\", showingLatch.await(15, TimeUnit.SECONDS));\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            Util.runAndWait(() -> {\n+                root.getChildren().clear();\n+                stage.get().hide();\n+            });\n+\n+            checker.assertCollectable(stage.get());\n+            checker.setAsReferenced(toBeRemoved);\n+        });\n+    }\n+\n+    @AfterClass\n+    public static void teardownOnce() {\n+        Platform.runLater(() -> {\n+            Platform.exit();\n+        });\n+    }\n+}\n\\ No newline at end of file\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/StyleMemoryLeakTest.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"}]}