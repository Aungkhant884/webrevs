{"files":[{"patch":"@@ -144,5 +144,4 @@\n-     * Creates an {@code ObservableValue} that holds the result of applying a\n-     * mapping on this {@code ObservableValue}'s value. The result is updated\n-     * when this {@code ObservableValue}'s value changes. If this value is\n-     * {@code null}, no mapping is applied and the resulting value is also\n-     * {@code null}.\n+     * Returns an {@code ObservableValue} that holds the result of applying the\n+     * given mapping function on this {@code ObservableValue}. The result is updated\n+     * when this {@code ObservableValue} changes. If this value is {@code null},\n+     * no mapping is applied and the resulting value is also {@code null}.\n@@ -163,3 +162,5 @@\n-     * @param mapper a {@code Function} that converts a given value to a new value, cannot be {@code null}\n-     * @return an {@code ObservableValue} holding the result of mapping this {@code ObservableValue}'s\n-     *     value, or {@code null} when it is {@code null}; never returns {@code null}\n+     * @param mapper the mapping function to apply to a value, cannot be {@code null}\n+     * @return an {@code ObservableValue} that holds the result of applying the given\n+     *     mapping function on this {@code ObservableValue}, or {@code null} when it\n+     *     is {@code null}; never returns {@code null}\n+     * @throws NullPointerException if the mapping function is {@code null}\n@@ -172,4 +173,4 @@\n-     * Creates an {@code ObservableValue} that holds this {@code ObservableValue}'s\n-     * value, or the given value if it is {@code null}. The result is updated when\n-     * this {@code ObservableValue}'s value changes. This method, when combined with\n-     * {@link #map(Function)}, allows handling of all values including {@code null} values.\n+     * Returns an {@code ObservableValue} that holds this value, or the given constant if\n+     * it is {@code null}. The result is updated when this {@code ObservableValue} changes. This\n+     * method, when combined with {@link #map(Function)}, allows handling of all values\n+     * including {@code null} values.\n@@ -188,1 +189,1 @@\n-     * @param constant an alternative value to use when this {@code ObservableValue}\n+     * @param constant the value to use when this {@code ObservableValue}\n@@ -190,2 +191,2 @@\n-     * @return an {@code ObservableValue} holding this {@code ObservableValue}'s value,\n-     *     or the given value if it is {@code null}; never returns {@code null}\n+     * @return an {@code ObservableValue} that holds this value, or the given constant if\n+     *     it is {@code null}; never returns {@code null}\n@@ -198,2 +199,2 @@\n-     * Creates a new {@code ObservableValue} that holds the value of a nested {@code ObservableValue}\n-     * by applying a mapping function to extract the nested {@code ObservableValue}. The result\n+     * Returns an {@code ObservableValue} that holds the value of an {@code ObservableValue}\n+     * produced by applying the given mapping function to this {@ObservableValue}. The result\n@@ -201,1 +202,1 @@\n-     * resulting from the mapping changes. If this value is {@code null}, no mapping is applied\n+     * produced by the mapping changes. If this value is {@code null}, no mapping is applied\n@@ -226,1 +227,1 @@\n-     * Changes in the values of any of: the scene of {@code listView}, the window of that scene, or\n+     * Changes in any of the values of: the scene of {@code listView}, the window of that scene, or\n@@ -233,5 +234,5 @@\n-     * @param mapper a {@code Function} that converts a given value to an\n-     *     {@code ObservableValue}; cannot be {@code null}\n-     * @return an {@code ObservableValue} holding the value of an {@code ObservableValue}\n-     *     resulting from mapping this {@code ObservableValue}'s value, or {@code null} when\n-     *     the value is {@code null}; never returns {@code null}\n+     * @param mapper the mapping function to apply to a value, cannot be {@code null}\n+     * @return an {@code ObservableValue} that holds the value of an {@code ObservableValue}\n+     *     produced by applying the given mapping function to this {@ObservableValue}, or\n+     *     {@code null} when the value is {@code null}; never returns {@code null}\n+     * @throws NullPointerException if the mapping function is {@code null}\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/ObservableValue.java","additions":25,"deletions":24,"binary":false,"changes":49,"status":"modified"}]}