{"files":[{"patch":"@@ -37,1 +37,1 @@\n- * to keep track of how it was created.<p>\n+ * to keep track of how it was created.\n@@ -39,3 +39,5 @@\n- * For example:<p>\n- * <pre>Subscription s = property.subscribe(System.out::println)<\/pre>\n- * The function passed in to {@code subscribe} does not need to be stored\n+ * <p>For example:\n+ *\n+ * <p>{@code Subscription s = property.subscribe(System.out::println)}\n+ *\n+ * <p>The function passed in to {@code subscribe} does not need to be stored\n@@ -62,1 +64,1 @@\n-     * @param other another {@link Subscription}, cannot be null\n+     * @param other another {@link Subscription}, cannot be {@code null}\n@@ -64,1 +66,2 @@\n-     *     cancelled, never null\n+     *     cancelled, never {@code null}\n+     * @throws NullPointerException when {@code other} is {@code null}\n@@ -81,1 +84,1 @@\n-     *     {@link ObservableValue}, cannot be null\n+     *     {@link ObservableValue}, cannot be {@code null}\n@@ -83,1 +86,2 @@\n-     *     subscription, never null\n+     *     subscription, never {@code null}\n+     * @throws NullPointerException when {@code observableValue} or {@code subscriber} is {@code null}\n@@ -100,1 +104,1 @@\n-     *     {@link ObservableValue} becomes invalid, cannot be null\n+     *     {@link ObservableValue} becomes invalid, cannot be @{code null}\n@@ -102,1 +106,2 @@\n-     *     subscription, never null\n+     *     subscription, never @{code null}\n+     * @throws NullPointerException when {@code observableValue} or {@code runnable} is {@code null}\n@@ -105,0 +110,2 @@\n+        Objects.requireNonNull(runnable);\n+\n@@ -111,1 +118,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/Subscription.java","additions":18,"deletions":11,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/FlatMappedBinding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/LazyObjectBinding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/MappedBinding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-     * <pre>\n+     * <pre>{@code\n@@ -153,1 +153,1 @@\n-     * ObservableValue&lt;String&gt; upperCase = text.map(String::toUpperCase);\n+     * ObservableValue<String> upperCase = text.map(String::toUpperCase);\n@@ -159,1 +159,2 @@\n-     * upperCase.getValue();  \/\/ Returns null<\/pre>\n+     * upperCase.getValue();  \/\/ Returns null\n+     * }<\/pre>\n@@ -178,1 +179,1 @@\n-     * <pre>\n+     * <pre>{@code\n@@ -180,1 +181,1 @@\n-     * ObservableValue&lt;String&gt; upperCase = text.map(String::toUpperCase).orElse(\"\");\n+     * ObservableValue<String> upperCase = text.map(String::toUpperCase).orElse(\"\");\n@@ -184,1 +185,2 @@\n-     * upperCase.getValue();  \/\/ Returns \"\"<\/pre>\n+     * upperCase.getValue();  \/\/ Returns \"\"\n+     * }<\/pre>\n@@ -196,2 +198,2 @@\n-     * Creates an {@code ObservableValue} that holds the value of an {@code ObservableValue}\n-     * resulting from applying a mapping on this {@code ObservableValue}'s value. The result\n+     * Creates a new {@code ObservableValue} that holds the value of a nested {@code ObservableValue}\n+     * by applying a mapping function to extract the nested {@code ObservableValue}. The result\n@@ -205,2 +207,2 @@\n-     * <pre>\n-     * ObservableValue&lt;Boolean&gt; isShowing = listView.sceneProperty()\n+     * <pre>{@code\n+     * ObservableValue<Boolean> isShowing = listView.sceneProperty()\n@@ -223,1 +225,1 @@\n-     * <\/pre>\n+     * }<\/pre>\n@@ -227,1 +229,1 @@\n-     * This method is preferred over {@link javafx.beans.binding.Bindings Bindings#select} methods\n+     * This method is preferred over {@link javafx.beans.binding.Bindings#select Bindings} methods\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/ObservableValue.java","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/OrElseBinding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -685,1 +685,1 @@\n-     * @param observableValue\n+     * @param observableValue an {@code ObservableValue}, cannot be {@code null}\n@@ -703,0 +703,2 @@\n+     *\n+     * @param observableValue an {@code ObservableValue}, cannot be {@code null}\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/ObservableValueFluentBindingsTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}