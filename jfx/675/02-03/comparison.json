{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/Subscription.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -157,1 +157,1 @@\n-            value = computeValue();\n+            T computed = computeValue();\n@@ -159,2 +159,2 @@\n-            if (allowValidation()) {\n-                valid = true;\n+            if (!allowValidation()) {\n+                return computed;\n@@ -162,0 +162,3 @@\n+\n+            value = computed;\n+            valid = true;\n@@ -180,0 +183,1 @@\n+            value = null;  \/\/ clear cached value to avoid hard reference to stale data\n@@ -189,2 +193,2 @@\n-     * Returns {@code true} when this binding currently has one or more\n-     * listeners, otherwise {@code false}.\n+     * Checks if the binding has at least one listener registered on it. This\n+     * is useful for subclasses which want to conserve resources when not observed.\n@@ -192,2 +196,2 @@\n-     * @return {@code true} when this binding currently has one or more\n-     *     listeners, otherwise {@code false}\n+     * @return {@code true} if this binding currently has one or more\n+     *     listeners registered on it, otherwise {@code false}\n@@ -200,2 +204,7 @@\n-     * Can be overriden in extending classes to prevent a binding from becoming\n-     * valid. The default implementation always allows bindings to become valid.\n+     * Checks if the binding is allowed to become valid. Overriding classes can\n+     * prevent a binding from becoming valid. This is useful in subclasses which\n+     * do not always listen for invalidations of their dependencies and prefer to\n+     * recompute the current value instead. This can also be useful if caching of\n+     * the current computed value is not desirable.\n+     * <p>\n+     * The default implementation always allows bindings to become valid.\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/ObjectBinding.java","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/FlatMappedBinding.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+\n@@ -77,1 +78,1 @@\n-     * Called after a listener was added to start observing inputs, if they're not observed already.\n+     * Called after a listener was added to start observing inputs if they're not observed already.\n@@ -99,1 +100,1 @@\n-     * Called after a listener was removed to stop observing inputs, if this was the last listener\n+     * Called after a listener was removed to stop observing inputs if this was the last listener\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/LazyObjectBinding.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+\n@@ -42,5 +43,0 @@\n-    @Override\n-    protected Subscription observeInputs() {\n-        return Subscription.subscribeInvalidations(source, this::invalidate); \/\/ start observing source\n-    }\n-\n@@ -53,0 +49,5 @@\n+\n+    @Override\n+    protected Subscription observeInputs() {\n+        return Subscription.subscribeInvalidations(source, this::invalidate); \/\/ start observing source\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/MappedBinding.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,3 +144,16 @@\n-     * Returns an {@link ObservableValue} which provides a mapping of the value\n-     * held by this {@code ObservableValue}, and provides {@code null} when this\n-     * {@code ObservableValue} holds {@code null}.\n+     * Creates an {@code ObservableValue} that holds the result of applying a\n+     * mapping on the value held by this {@code ObservableValue}. The result is\n+     * updated when the value held by this {@code ObservableValue} changes. If\n+     * this value is {@code null}, no mapping is applied and the resulting value\n+     * is also {@code null}.\n+     * <p>\n+     * For example, mapping a string to an upper case string:\n+     * <pre>\n+     * var text = new SimpleStringProperty(\"abcd\");\n+     * ObservableValue&lt;String&gt; upperCase = text.map(String::toUpperCase);\n+     *\n+     * upperCase.getValue();  \/\/ Returns \"ABCD\"\n+     * text.set(\"xyz\");\n+     * upperCase.getValue();  \/\/ Returns \"XYZ\"\n+     * text.set(null);\n+     * upperCase.getValue();  \/\/ Returns null<\/pre>\n@@ -149,4 +162,3 @@\n-     * @param mapper a {@link Function} which converts a given value to a new value, cannot be null\n-     * @return an {@link ObservableValue} which provides a mapping of the value\n-     *     held by this {@code ObservableValue}, and provides {@code null} when\n-     *     this {@code ObservableValue} holds {@code null}, never null\n+     * @param mapper a {@code Function} which converts a given value to a new value, cannot be null\n+     * @return an {@code ObservableValue} holding a mapping of this {@code ObservableValue}'s value\n+     *     or holds {@code null} when the value is {@code null}; never returns {@code null}\n@@ -159,3 +171,15 @@\n-     * Returns an {@link ObservableValue} which provides a mapping of the value\n-     * held by this {@code ObservableValue}, or {@code constant} when this\n-     * {@code ObservableValue} holds {@code null}.\n+     * Creates an {@code ObservableValue} that holds the value held by this\n+     * {@code ObservableValue}, or a given value if this value is {@code null}.\n+     * The result is updated when the value held by this {@code ObservableValue}\n+     * changes. This method, when combined with {@link #map(Function)}, allows\n+     * handling of all values including {@code null} values.\n+     * <p>\n+     * For example, mapping a string to an upper case string but leaving it blank\n+     * if the input was {@code null}:\n+     * <pre>\n+     * var text = new SimpleStringProperty(\"abcd\");\n+     * ObservableValue&lt;String&gt; upperCase = text.map(String::toUpperCase).orElse(\"\");\n+     *\n+     * upperCase.getValue();  \/\/ Returns \"ABCD\"\n+     * text.set(null);\n+     * upperCase.getValue();  \/\/ Returns \"\"<\/pre>\n@@ -164,4 +188,3 @@\n-     *     holds {@code null}, can be null\n-     * @return an {@link ObservableValue} which provides a mapping of the value\n-     *     held by this {@code ObservableValue}, or {@code constant} when this\n-     *     {@code ObservableValue} holds {@code null}, never null\n+     *     holds {@code null}; can be {@code null}\n+     * @return an {@code ObservableValue} holding this {@code ObservableValue}'s value\n+     *     or the given value when the value is {@code null}; never returns {@code null}\n@@ -174,4 +197,14 @@\n-     * Returns an {@link ObservableValue} which provides the value in the {@code\n-     * ObservableValue} given by applying {@code mapper} on the value held by this\n-     * {@code ObservableValue}, and is {@code null} when this\n-     * {@code ObservableValue} holds {@code null}.<p>\n+     * Creates an {@code ObservableValue} that holds the value of an {@code ObservableValue}\n+     * resulting from applying a mapping on the value held by this {@code ObservableValue}.\n+     * The result is updated when either this {@code ObservableValue} or the {@code ObservableValue}\n+     * resulting from the mapping changes. If this value is {@code null}, no mapping is applied\n+     * and the resulting value is {@code null}. If the mapping resulted in {@code null} then\n+     * the resulting value is also {@code null}.\n+     * <p>\n+     * For example, a property which is only true when a UI element is part of a {@code Scene}\n+     * which is part of a {@code Window} that is currently shown on screen:\n+     * <pre>\n+     * ObservableValue&lt;Boolean&gt; isShowing = listView.sceneProperty()\n+     *     .flatMap(Scene::windowProperty)\n+     *     .flatMap(Window::showingProperty)\n+     *     .orElse(false);\n@@ -179,2 +212,18 @@\n-     * Returning {@code null} from {@code mapper} will result in an\n-     * {@code ObservableValue} which holds {@code null}.\n+     * \/\/ Assuming the listView is currently shown to the user then:\n+     *\n+     * isShowing().getValue();  \/\/ Returns true\n+     *\n+     * listView.getScene().getWindow().hide();\n+     * isShowing().getValue();  \/\/ Returns false\n+     *\n+     * listView.getScene().getWindow().show();\n+     * isShowing().getValue();  \/\/ Returns true\n+     *\n+     * listView.getParent().getChildren().remove(listView);\n+     * isShowing().getValue();  \/\/ Returns false\n+     * <\/pre>\n+     * Changes in the values of any of: the scene of {@code listView}, the window of that scene, or\n+     * the showing of that window, will update the boolean value {@code isShowing}.\n+     * <p>\n+     * This method is preferred over {@link javafx.beans.binding.Bindings Bindings#select} methods\n+     * since it is type safe.\n@@ -183,6 +232,5 @@\n-     * @param mapper a {@link Function} which converts a given value to an\n-     *     {@code ObservableValue}, cannot be null\n-     * @return an {@link ObservableValue} which provides the value in the\n-     *     {@code ObservableValue} given by applying {@code mapper} on the value\n-     *     held by this {@code ObservableValue}, and is {@code null} when this\n-     *     {@code ObservableValue} holds {@code null}, never null\n+     * @param mapper a {@code Function} which converts a given value to an\n+     *     {@code ObservableValue}; cannot be {@code null}\n+     * @return an {@code ObservableValue} holding the value of an {@code ObservableValue}\n+     *     resulting from a mapping of this {@code ObservableValue}'s value or\n+     *     holds {@code null} when the value is {@code null}; never returns {@code null}\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/ObservableValue.java","additions":75,"deletions":27,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+\n@@ -41,5 +42,0 @@\n-    @Override\n-    protected Subscription observeInputs() {\n-        return Subscription.subscribeInvalidations(source, this::invalidate); \/\/ start observing source\n-    }\n-\n@@ -52,0 +48,5 @@\n+\n+    @Override\n+    protected Subscription observeInputs() {\n+        return Subscription.subscribeInvalidations(source, this::invalidate); \/\/ start observing source\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/OrElseBinding.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+\n","filename":"modules\/javafx.base\/src\/shims\/java\/javafx\/beans\/value\/LazyObjectBindingStub.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/LazyObjectBindingTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n@@ -24,0 +49,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/ObservableValueFluentBindingsTest.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/ReferenceAsserts.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}