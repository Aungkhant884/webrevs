{"files":[{"patch":"@@ -92,0 +92,8 @@\n+             *\n+             * See com.sun.javafx.binding.ExpressionHelper (which is used\n+             * by ObjectBinding) where it will do a call to ObservableValue#getValue\n+             * BEFORE adding the actual listener. This results in ObjectBinding#get\n+             * to be called in which the #allowValidation call will block it from\n+             * becoming valid as the condition is \"isObserved()\"; this is technically\n+             * correct as the listener wasn't added yet, but means we must call\n+             * #get again to make this binding valid.\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/LazyObjectBinding.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-     *     or the given value it is {@code null}; never returns {@code null}\n+     *     or the given value if it is {@code null}; never returns {@code null}\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/ObservableValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,0 +87,2 @@\n+             *\n+             * See also the explanation in LazyObjectBinding#updateSubcriptionAfterAdd\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/LazyObjectBindingTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,3 @@\n-    private StringProperty property = new SimpleStringProperty(\"A\");\n+    private final StringProperty property = new SimpleStringProperty(\"Initial\");\n+    private final List<String> values = new ArrayList<>();\n+    private final ChangeListener<String> changeListener = (obs, old, current) -> values.add(current);\n@@ -64,1 +66,1 @@\n-            private ObservableValue<String> observableValue = property.map(v -> v + \"Z\");\n+            private ObservableValue<String> observableValue = property.map(v -> v + \"+map\");\n@@ -80,1 +82,1 @@\n-                    assertEquals(\"AZ\", observableValue.getValue());\n+                    assertEquals(\"Initial+map\", observableValue.getValue());\n@@ -82,1 +84,1 @@\n-                    property.set(\"B\");\n+                    property.set(\"Left\");\n@@ -84,1 +86,1 @@\n-                    assertEquals(\"BZ\", observableValue.getValue());\n+                    assertEquals(\"Left+map\", observableValue.getValue());\n@@ -91,1 +93,1 @@\n-                    assertNull(observableValue.getValue());\n+                    assertEquals((String) null, observableValue.getValue());\n@@ -97,3 +99,0 @@\n-                private List<String> values = new ArrayList<>();\n-                private ChangeListener<String> changeListener = (obs, old, current) -> values.add(current);\n-\n@@ -101,1 +100,1 @@\n-                    observableValue.addListener(changeListener);\n+                    startObserving(observableValue);\n@@ -106,1 +105,1 @@\n-                    assertTrue(values.isEmpty());\n+                    assertNothingIsObserved();\n@@ -108,1 +107,1 @@\n-                    property.set(\"C\");\n+                    property.set(\"Right\");\n@@ -110,1 +109,1 @@\n-                    assertEquals(List.of(\"CZ\"), values);\n+                    assertObserved(\"Right+map\");\n@@ -117,1 +116,1 @@\n-                    assertEquals(Arrays.asList((String) null), values);\n+                    assertObserved((String) null);  \/\/ map operation is skipped (as it would NPE otherwise) and the resulting value is null\n@@ -128,2 +127,2 @@\n-                        property.setValue(\"B\");\n-                        property.setValue(\"A\");\n+                        stopObserving(observableValue);\n+                    }\n@@ -131,1 +130,3 @@\n-                        assertEquals(List.of(\"BZ\", \"AZ\"), values);\n+                    @Test\n+                    void shouldNoLongerBeCalled() {\n+                        assertNothingIsObserved();\n@@ -133,1 +134,1 @@\n-                        values.clear();\n+                        property.set(\"Right\");\n@@ -135,1 +136,1 @@\n-                        observableValue.removeListener(changeListener);\n+                        assertNothingIsObserved();\n@@ -139,1 +140,30 @@\n-                    void shouldNoLongerBeCalled() {\n+                    void shouldNoLongerBeStronglyReferenced() {\n+                        ReferenceAsserts.testIfNotStronglyReferenced(observableValue, () -> observableValue = null);\n+                    }\n+                }\n+            }\n+\n+            @Nested\n+            class When_orElse_Called {\n+                {\n+                    observableValue = observableValue.orElse(\"Empty\");\n+                }\n+\n+                @Test\n+                void shouldNotBeNull() {\n+                    assertNotNull(observableValue);\n+                }\n+\n+                @Test\n+                void shouldNotBeStronglyReferenced() {\n+                    ReferenceAsserts.testIfNotStronglyReferenced(observableValue, () -> observableValue = null);\n+                }\n+\n+                @Nested\n+                class WhenObserved {\n+                    {\n+                        startObserving(observableValue);\n+                    }\n+\n+                    @Test\n+                    void shouldApplyMapThenOrElseOperation() {\n@@ -142,1 +172,28 @@\n-                        property.set(\"C\");\n+                        property.set(\"Left\");\n+\n+                        assertObserved(\"Left+map\");\n+\n+                        property.set(null);\n+\n+                        assertObserved(\"Empty\");\n+                    }\n+\n+                    @Test\n+                    void shouldBeStronglyReferenced() {\n+                        ReferenceAsserts.testIfStronglyReferenced(observableValue, () -> observableValue = null);\n+                    }\n+\n+                    @Nested\n+                    class AndWhenUnobserved {\n+                        {\n+                            stopObserving(observableValue);\n+                        }\n+\n+                        @Test\n+                        void shouldNoLongerBeCalled() {\n+                            assertNothingIsObserved();\n+\n+                            property.set(\"Left\");\n+\n+                            assertNothingIsObserved();\n+                        }\n@@ -144,0 +201,32 @@\n+                        @Test\n+                        void shouldNoLongerBeStronglyReferenced() {\n+                            ReferenceAsserts.testIfNotStronglyReferenced(observableValue, () -> observableValue = null);\n+                        }\n+                    }\n+                }\n+            }\n+\n+            @Nested\n+            class When_map_CalledAgain {\n+                {\n+                    observableValue = observableValue.map(v -> v + \"+map2\");\n+                }\n+\n+                @Test\n+                void shouldNotBeNull() {\n+                    assertNotNull(observableValue);\n+                }\n+\n+                @Test\n+                void shouldNotBeStronglyReferenced() {\n+                    ReferenceAsserts.testIfNotStronglyReferenced(observableValue, () -> observableValue = null);\n+                }\n+\n+                @Nested\n+                class WhenObserved {\n+                    {\n+                        startObserving(observableValue);\n+                    }\n+\n+                    @Test\n+                    void shouldApplyMapThenSecondMapOperation() {\n@@ -145,0 +234,8 @@\n+\n+                        property.set(\"Left\");\n+\n+                        assertObserved(\"Left+map+map2\");\n+\n+                        property.set(null);\n+\n+                        assertObserved((String) null);\n@@ -148,2 +245,23 @@\n-                    void shouldNoLongerBeStronglyReferenced() {\n-                        ReferenceAsserts.testIfNotStronglyReferenced(observableValue, () -> observableValue = null);\n+                    void shouldBeStronglyReferenced() {\n+                        ReferenceAsserts.testIfStronglyReferenced(observableValue, () -> observableValue = null);\n+                    }\n+\n+                    @Nested\n+                    class AndWhenUnobserved {\n+                        {\n+                            stopObserving(observableValue);\n+                        }\n+\n+                        @Test\n+                        void shouldNoLongerBeCalled() {\n+                            assertNothingIsObserved();\n+\n+                            property.set(\"Left\");\n+\n+                            assertNothingIsObserved();\n+                        }\n+\n+                        @Test\n+                        void shouldNoLongerBeStronglyReferenced() {\n+                            ReferenceAsserts.testIfNotStronglyReferenced(observableValue, () -> observableValue = null);\n+                        }\n@@ -158,1 +276,1 @@\n-        private ObservableValue<String> observableValue = property.orElse(\"null\");\n+        private ObservableValue<String> observableValue = property.orElse(\"Empty\");\n@@ -174,1 +292,1 @@\n-                assertEquals(\"A\", observableValue.getValue());\n+                assertEquals(\"Initial\", observableValue.getValue());\n@@ -178,1 +296,1 @@\n-                assertEquals(\"null\", observableValue.getValue());\n+                assertEquals(\"Empty\", observableValue.getValue());\n@@ -184,3 +302,0 @@\n-            private List<String> values = new ArrayList<>();\n-            private ChangeListener<String> changeListener = (obs, old, current) -> values.add(current);\n-\n@@ -188,1 +303,1 @@\n-                observableValue.addListener(changeListener);\n+                startObserving(observableValue);\n@@ -193,1 +308,1 @@\n-                assertTrue(values.isEmpty());\n+                assertNothingIsObserved();\n@@ -195,1 +310,1 @@\n-                property.set(\"C\");\n+                property.set(\"Left\");\n@@ -197,1 +312,1 @@\n-                assertEquals(List.of(\"C\"), values);\n+                assertObserved(\"Left\");\n@@ -199,1 +314,0 @@\n-                values.clear();\n@@ -202,1 +316,1 @@\n-                assertEquals(List.of(\"null\"), values);\n+                assertObserved(\"Empty\");\n@@ -213,8 +327,1 @@\n-                    property.setValue(\"B\");\n-                    property.setValue(null);\n-\n-                    assertEquals(List.of(\"B\", \"null\"), values);\n-\n-                    values.clear();\n-\n-                    observableValue.removeListener(changeListener);\n+                    stopObserving(observableValue);\n@@ -225,1 +332,1 @@\n-                    assertTrue(values.isEmpty());\n+                    assertNothingIsObserved();\n@@ -227,1 +334,1 @@\n-                    property.set(\"C\");\n+                    property.set(\"Left\");\n@@ -229,1 +336,1 @@\n-                    assertTrue(values.isEmpty());\n+                    assertNothingIsObserved();\n@@ -253,3 +360,4 @@\n-            private ObjectProperty<Integer> altA = new SimpleObjectProperty<>(65);\n-            private ObjectProperty<Integer> altOther = new SimpleObjectProperty<>(0);\n-            private ObservableValue<Integer> observableValue = property.flatMap(v -> \"A\".equals(v) ? altA : altOther);\n+            private StringProperty left = new SimpleStringProperty(\"LEFT\");\n+            private StringProperty right = new SimpleStringProperty(\"RIGHT\");\n+            private StringProperty unknown = new SimpleStringProperty(\"UNKNOWN\");\n+            private ObservableValue<String> observableValue = property.flatMap(v -> \"Left\".equals(v) ? left : \"Right\".equals(v) ? right : unknown);\n@@ -271,1 +379,1 @@\n-                    assertEquals((Integer) 65, observableValue.getValue());\n+                    assertEquals(\"UNKNOWN\", observableValue.getValue());  \/\/ initially it is not left or right, so unknown\n@@ -273,1 +381,1 @@\n-                    property.set(\"D\");\n+                    property.set(\"Right\");\n@@ -275,1 +383,1 @@\n-                    assertEquals((Integer) 0, observableValue.getValue());\n+                    assertEquals(\"RIGHT\", observableValue.getValue());\n@@ -277,1 +385,1 @@\n-                    altOther.setValue(1);\n+                    right.setValue(\"RIGHT+1\");\n@@ -279,1 +387,1 @@\n-                    assertEquals((Integer) 1, observableValue.getValue());\n+                    assertEquals(\"RIGHT+1\", observableValue.getValue());\n@@ -281,1 +389,2 @@\n-                    altA.setValue(66);\n+                    left.setValue(\"LEFT+1\");\n+                    unknown.setValue(\"UNKNOWN+1\");\n@@ -283,1 +392,1 @@\n-                    assertEquals((Integer) 1, observableValue.getValue());\n+                    assertEquals(\"RIGHT+1\", observableValue.getValue());  \/\/ changing left or unknown value should have no effect\n@@ -285,1 +394,1 @@\n-                    property.set(\"A\");\n+                    property.set(\"Left\");\n@@ -287,1 +396,1 @@\n-                    assertEquals((Integer) 66, observableValue.getValue());\n+                    assertEquals(\"LEFT+1\", observableValue.getValue());  \/\/ after switching to left, it switches to the left value\n@@ -299,1 +408,1 @@\n-                    altA = null;\n+                    unknown = null;\n@@ -307,3 +416,0 @@\n-                private List<Integer> values = new ArrayList<>();\n-                private ChangeListener<Integer> changeListener = (obs, old, current) -> values.add(current);\n-\n@@ -311,1 +417,1 @@\n-                    observableValue.addListener(changeListener);\n+                    startObserving(observableValue);\n@@ -316,1 +422,1 @@\n-                    assertTrue(values.isEmpty());\n+                    assertNothingIsObserved();\n@@ -318,1 +424,1 @@\n-                    altA.set(66);\n+                    unknown.set(\"UNKNOWN+1\");\n@@ -320,1 +426,1 @@\n-                    assertEquals(List.of(66), values);\n+                    assertObserved(\"UNKNOWN+1\");  \/\/ as it initially is unknown, changing the unknown property results in a change\n@@ -322,2 +428,1 @@\n-                    values.clear();\n-                    property.set(\"D\");\n+                    property.set(\"Right\");\n@@ -325,1 +430,1 @@\n-                    assertEquals(List.of(0), values);\n+                    assertObserved(\"RIGHT\");  \/\/ switching to right gives the value of the right property\n@@ -327,2 +432,2 @@\n-                    values.clear();\n-                    altA.set(67);\n+                    unknown.set(\"UNKNOWN+2\");\n+                    left.set(\"LEFT+1\");\n@@ -330,1 +435,1 @@\n-                    assertEquals(List.of(), values);\n+                    assertNothingIsObserved();  \/\/ changing left or unknown has no effect when currently observing right\n@@ -332,2 +437,1 @@\n-                    values.clear();\n-                    altOther.set(1);\n+                    right.set(\"RIGHT+1\");\n@@ -335,1 +439,1 @@\n-                    assertEquals(List.of(1), values);\n+                    assertObserved(\"RIGHT+1\");  \/\/ changing right value has an effect as right is observed\n@@ -337,2 +441,1 @@\n-                    values.clear();\n-                    property.set(\"A\");\n+                    property.set(\"Left\");\n@@ -340,1 +443,1 @@\n-                    assertEquals(List.of(67), values);\n+                    assertObserved(\"LEFT+1\");  \/\/ switching to left sees latest left value\n@@ -347,1 +450,1 @@\n-                    assertEquals(Arrays.asList((String) null), values);\n+                    assertObserved((String)null);  \/\/ flatMap operation is skipped (as it would NPE otherwise) and the resulting value is null\n@@ -352,1 +455,1 @@\n-                    altOther = null;\n+                    right = null;\n@@ -354,1 +457,1 @@\n-                    property.set(\"D\");\n+                    property.set(\"Right\");\n@@ -356,1 +459,1 @@\n-                    assertEquals(Arrays.asList((String) null), values);\n+                    assertObserved((String)null);  \/\/ flatMap maps to right property which is now null, this results in null\n@@ -367,2 +470,2 @@\n-                        property.setValue(\"B\");\n-                        property.setValue(\"A\");\n+                        stopObserving(observableValue);\n+                    }\n@@ -370,1 +473,3 @@\n-                        assertEquals(List.of(0, 65), values);\n+                    @Test\n+                    void shouldNoLongerBeCalled() {\n+                        assertNothingIsObserved();\n@@ -372,1 +477,3 @@\n-                        values.clear();\n+                        property.set(\"Left\");\n+                        property.set(\"Right\");\n+                        property.set(\"Unknown\");\n@@ -374,1 +481,1 @@\n-                        observableValue.removeListener(changeListener);\n+                        assertNothingIsObserved();\n@@ -378,1 +485,30 @@\n-                    void shouldNoLongerBeCalled() {\n+                    void shouldNoLongerBeStronglyReferenced() {\n+                        ReferenceAsserts.testIfNotStronglyReferenced(observableValue, () -> observableValue = null);\n+                    }\n+                }\n+            }\n+\n+            @Nested\n+            class When_map_Called {\n+                {\n+                    observableValue = observableValue.map(v -> v + \"+map\");\n+                }\n+\n+                @Test\n+                void shouldNotBeNull() {\n+                    assertNotNull(observableValue);\n+                }\n+\n+                @Test\n+                void shouldNotBeStronglyReferenced() {\n+                    ReferenceAsserts.testIfNotStronglyReferenced(observableValue, () -> observableValue = null);\n+                }\n+\n+                @Nested\n+                class WhenObserved {\n+                    {\n+                        startObserving(observableValue);\n+                    }\n+\n+                    @Test\n+                    void shouldApplyFlatMapThenMapOperation() {\n@@ -381,1 +517,50 @@\n-                        property.set(\"C\");\n+                        property.set(\"Left\");\n+\n+                        assertObserved(\"LEFT+map\");\n+\n+                        property.set(\"Right\");\n+\n+                        assertObserved(\"RIGHT+map\");\n+\n+                        left.set(\"LEFT-LEFT\");  \/\/ should have no effect\n+\n+                        assertNothingIsObserved();\n+\n+                        right.set(\"RIGHT-RIGHT\");\n+\n+                        assertObserved(\"RIGHT-RIGHT+map\");\n+                    }\n+\n+                    @Test\n+                    void shouldBeStronglyReferenced() {\n+                        ReferenceAsserts.testIfStronglyReferenced(observableValue, () -> observableValue = null);\n+                    }\n+\n+                    @Nested\n+                    class AndWhenUnobserved {\n+                        {\n+                            stopObserving(observableValue);\n+                        }\n+\n+                        @Test\n+                        void shouldNoLongerBeCalled() {\n+                            assertNothingIsObserved();\n+\n+                            property.set(\"Left\");\n+\n+                            assertNothingIsObserved();\n+                        }\n+\n+                        @Test\n+                        void shouldNoLongerBeStronglyReferenced() {\n+                            ReferenceAsserts.testIfNotStronglyReferenced(observableValue, () -> observableValue = null);\n+                        }\n+                    }\n+                }\n+            }\n+\n+            @Nested\n+            class When_orElse_Called {\n+                {\n+                    observableValue = observableValue.orElse(\"Empty\");\n+                }\n@@ -383,0 +568,18 @@\n+                @Test\n+                void shouldNotBeNull() {\n+                    assertNotNull(observableValue);\n+                }\n+\n+                @Test\n+                void shouldNotBeStronglyReferenced() {\n+                    ReferenceAsserts.testIfNotStronglyReferenced(observableValue, () -> observableValue = null);\n+                }\n+\n+                @Nested\n+                class WhenObserved {\n+                    {\n+                        startObserving(observableValue);\n+                    }\n+\n+                    @Test\n+                    void shouldApplyFlatMapThenMapOperation() {\n@@ -384,0 +587,28 @@\n+\n+                        property.set(\"Left\");\n+\n+                        assertObserved(\"LEFT\");\n+\n+                        property.set(\"Right\");\n+\n+                        assertObserved(\"RIGHT\");\n+\n+                        left.set(\"LEFT-LEFT\");  \/\/ should have no effect as right branch is observed\n+\n+                        assertNothingIsObserved();\n+\n+                        right.set(\"RIGHT-RIGHT\");\n+\n+                        assertObserved(\"RIGHT-RIGHT\");\n+\n+                        right.set(null);\n+\n+                        assertObserved(\"Empty\");\n+\n+                        property.set(\"Left\");\n+\n+                        assertObserved(\"LEFT-LEFT\");\n+\n+                        property.set(null);\n+\n+                        assertObserved(\"Empty\");\n@@ -387,2 +618,23 @@\n-                    void shouldNoLongerBeStronglyReferenced() {\n-                        ReferenceAsserts.testIfNotStronglyReferenced(observableValue, () -> observableValue = null);\n+                    void shouldBeStronglyReferenced() {\n+                        ReferenceAsserts.testIfStronglyReferenced(observableValue, () -> observableValue = null);\n+                    }\n+\n+                    @Nested\n+                    class AndWhenUnobserved {\n+                        {\n+                            stopObserving(observableValue);\n+                        }\n+\n+                        @Test\n+                        void shouldNoLongerBeCalled() {\n+                            assertNothingIsObserved();\n+\n+                            property.set(\"Left\");\n+\n+                            assertNothingIsObserved();\n+                        }\n+\n+                        @Test\n+                        void shouldNoLongerBeStronglyReferenced() {\n+                            ReferenceAsserts.testIfNotStronglyReferenced(observableValue, () -> observableValue = null);\n+                        }\n@@ -394,0 +646,53 @@\n+\n+    \/**\n+     * Ensures nothing has been observed.\n+     *\/\n+    private void assertNothingIsObserved() {\n+        assertObserved();\n+    }\n+\n+    \/**\n+     * Ensures that given values have been observed since last call.\n+     *\n+     * @param expectedValues an array of expected values\n+     *\/\n+    private void assertObserved(String... expectedValues) {\n+        assertEquals(values, Arrays.asList(expectedValues));\n+        values.clear();\n+    }\n+\n+    \/**\n+     * Starts observing the given observable value. This will do\n+     * a sanity check that the observer is currently not working\n+     * before adding it.\n+     *\n+     * @param observableValue\n+     *\/\n+    private void startObserving(ObservableValue<String> observableValue) {\n+        values.clear();\n+\n+        property.setValue(\"B\");\n+        property.setValue(\"A\");\n+\n+        assertTrue(values.isEmpty());\n+\n+        observableValue.addListener(changeListener);\n+    }\n+\n+    \/**\n+     * Stops observing the given observable value. This will do a\n+     * sanity check that the observer is currently working before\n+     * removing it.\n+     *\/\n+    private void stopObserving(ObservableValue<String> observableValue) {\n+        values.clear();\n+\n+        property.setValue(\"Left\");\n+        property.setValue(\"Right\");\n+\n+        assertEquals(2, values.size());\n+\n+        values.clear();\n+\n+        observableValue.removeListener(changeListener);\n+    }\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/ObservableValueFluentBindingsTest.java","additions":396,"deletions":91,"binary":false,"changes":487,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-\n@@ -33,0 +30,2 @@\n+import test.util.memory.JMemoryBuddy;\n+\n@@ -41,3 +40,1 @@\n-        System.gc();\n-\n-        assertNotNull(ref.get());\n+        JMemoryBuddy.assertNotCollectable(ref);\n@@ -52,3 +49,1 @@\n-        System.gc();\n-\n-        assertNull(ref.get());\n+        JMemoryBuddy.assertCollectable(ref);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/ReferenceAsserts.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"}]}