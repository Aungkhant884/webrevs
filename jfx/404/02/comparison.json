{"files":[{"patch":"@@ -68,0 +68,3 @@\n+#if USE(GENERIC_EVENT_LOOP) && PLATFORM(JAVA)\n+    , m_animationTimer(*this, &ScrollAnimationSmooth::animationTimerFired)\n+#else\n@@ -69,0 +72,1 @@\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/ScrollAnimationSmooth.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -114,0 +114,3 @@\n+#if USE(GENERIC_EVENT_LOOP) && PLATFORM(JAVA)\n+    Timer m_animationTimer;\n+#else\n@@ -115,0 +118,1 @@\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/ScrollAnimationSmooth.h","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import com.sun.webkit.event.WCMouseWheelEvent;\n@@ -90,0 +91,9 @@\n+\n+    public static void scroll(WebPage page, int x, int y, int deltaX, int deltaY) {\n+        WCMouseWheelEvent mouseWheelEvent =\n+                new WCMouseWheelEvent(x, y, x, y,\n+                    System.currentTimeMillis(),\n+                    false, false, false, false,\n+                    deltaX, deltaY);\n+        page.dispatchMouseWheelEvent(mouseWheelEvent);\n+    }\n","filename":"modules\/javafx.web\/src\/shims\/java\/com\/sun\/webkit\/WebPageShim.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -24,0 +24,2 @@\n+#\n+--add-exports javafx.web\/com.sun.webkit=ALL-UNNAMED\n","filename":"tests\/system\/src\/test\/addExports","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,149 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.web;\n+\n+import java.util.concurrent.CountDownLatch;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.web.WebEngineShim;\n+import javafx.scene.web.WebView;\n+import javafx.stage.Stage;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import test.util.Util;\n+\n+import com.sun.webkit.WebPage;\n+import com.sun.webkit.WebPageShim;\n+\n+import static javafx.concurrent.Worker.State.SUCCEEDED;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class WebPageTest {\n+    private static final CountDownLatch launchLatch = new CountDownLatch(1);\n+\n+    \/\/ Maintain one application instance\n+    static WebPageTestApp webPageTestApp;\n+\n+    private WebView webView;\n+\n+    public static class WebPageTestApp extends Application {\n+        Stage primaryStage = null;\n+\n+        @Override\n+        public void init() {\n+            WebPageTest.webPageTestApp = this;\n+        }\n+\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            Platform.setImplicitExit(false);\n+            this.primaryStage = primaryStage;\n+            launchLatch.countDown();\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void setupOnce() {\n+        \/\/ Start the Test Application\n+        new Thread(() -> Application.launch(WebPageTestApp.class, (String[])null)).start();\n+\n+        assertTrue(\"Timeout waiting for FX runtime to start\", Util.await(launchLatch));\n+    }\n+\n+    @AfterClass\n+    public static void tearDownOnce() {\n+        Platform.exit();\n+    }\n+\n+    @Before\n+    public void setupTestObjects() {\n+        Platform.runLater(() -> {\n+            webView = new WebView();\n+            webPageTestApp.primaryStage.setScene(new Scene(webView));\n+            webPageTestApp.primaryStage.show();\n+        });\n+    }\n+\n+    \/**\n+     * @test\n+     * @bug 8260257\n+     * summary Checks if scrolling is possible\n+     *\/\n+    @Test public void testScroll() {\n+        final CountDownLatch webViewStateLatch = new CountDownLatch(1);\n+        final String htmlContent = \"\\n\"\n+            + \"<html>\\n\"\n+            + \"<body style='height:1500px'>\\n\"\n+            + \"<p id='test'>Fail<\/p>\\n\"\n+            + \"<script>\\n\"\n+            + \"window.onscroll = function() {scrollFunc()};\\n\"\n+            + \"function scrollFunc() {\\n\"\n+            + \"document.getElementById('test').innerHTML = 'Pass';\\n\"\n+            + \"}\\n\"\n+            + \"<\/script>\\n\"\n+            + \"<\/body>\\n\"\n+            + \"<\/html>\";\n+\n+        Util.runAndWait(() -> {\n+            assertNotNull(webView);\n+            webView.getEngine().getLoadWorker().stateProperty().\n+                addListener((observable, oldValue, newValue) -> {\n+                if (newValue == SUCCEEDED) {\n+                    webView.requestFocus();\n+                }\n+            });\n+\n+            webView.focusedProperty().\n+                addListener((observable, oldValue, newValue) -> {\n+                if (newValue) {\n+                    webViewStateLatch.countDown();\n+                }\n+            });\n+\n+            webView.getEngine().loadContent(htmlContent);\n+        });\n+\n+        assertTrue(\"Timeout when waiting for focus change \", Util.await(webViewStateLatch));\n+        Util.sleep(1000);\n+\n+        Util.runAndWait(() -> {\n+            final WebPage page = WebEngineShim.getPage(webView.getEngine());\n+            assertNotNull(page);\n+            WebPageShim.scroll(page, 1, 1, 0, 100);\n+        });\n+\n+        Util.sleep(500);\n+\n+        Util.runAndWait(() -> {\n+            assertEquals(\"WebPage should display pass: \", \"Pass\", webView.getEngine().executeScript(\"document.getElementById('test').innerHTML\"));\n+        });\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/WebPageTest.java","additions":149,"deletions":0,"binary":false,"changes":149,"status":"added"}]}