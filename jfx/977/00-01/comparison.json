{"files":[{"patch":"@@ -190,0 +190,12 @@\n+\n+        if ((w <= 0) && (cw > 0) || (h <= 0) && (ch > 0)) {\n+            final int[] extarr = new int[4];\n+            getFrameExtents(ptr, extarr);\n+\n+            \/\/ TODO: ((w <= 0) && (cw <= 0)) || ((h <= 0) && (ch <= 0))\n+            notifyResize(WindowEvent.RESIZE,\n+                         ((w <= 0) && (cw > 0)) ? cw + extarr[0] + extarr[1]\n+                                                : w,\n+                         ((h <= 0) && (ch > 0)) ? ch + extarr[2] + extarr[3]\n+                                                : h);\n+        }\n@@ -192,0 +204,2 @@\n+    private native void getFrameExtents(long ptr, int[] extarr);\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkWindow.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -431,1 +431,1 @@\n-    ctx->to_front();\n+    ctx->restack(true);\n@@ -446,1 +446,2 @@\n-    ctx->to_back();\n+    ctx->restack(false);\n+\n@@ -550,0 +551,18 @@\n+\/*\n+ * Class:     com_sun_glass_ui_gtk_GtkWindow\n+ * Method:    getFrameExtents\n+ * Signature: (J[I)V\n+ *\/\n+JNIEXPORT void JNICALL Java_com_sun_glass_ui_gtk_GtkWindow_getFrameExtents\n+    (JNIEnv * env, jobject obj, jlong ptr, jintArray extarr)\n+{\n+    (void)obj;\n+\n+    WindowContext* ctx = JLONG_TO_WINDOW_CTX(ptr);\n+    WindowFrameExtents extents = ctx->get_frame_extents();\n+\n+    env->SetIntArrayRegion(extarr, 0, 1, &extents.left);\n+    env->SetIntArrayRegion(extarr, 1, 1, &extents.right);\n+    env->SetIntArrayRegion(extarr, 2, 1, &extents.top);\n+    env->SetIntArrayRegion(extarr, 3, 1, &extents.bottom);\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassWindow.cpp","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -536,0 +536,1 @@\n+#endif\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_general.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -309,6 +309,0 @@\n-bool\n-glass_gdk_devices_grab(GdkWindow*);\n-\n-void\n-glass_gdk_devices_ungrab();\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_general.h","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-GdkWindow* WindowContextBase::get_gdk_window() {\n+GdkWindow* WindowContextBase::get_gdk_window(){\n@@ -104,1 +104,29 @@\n-    \/\/ Empty\n+    if (event->changed_mask &\n+            (GDK_WINDOW_STATE_ICONIFIED | GDK_WINDOW_STATE_MAXIMIZED)) {\n+\n+        if (event->changed_mask & GDK_WINDOW_STATE_ICONIFIED) {\n+            is_iconified = event->new_window_state & GDK_WINDOW_STATE_ICONIFIED;\n+        }\n+        if (event->changed_mask & GDK_WINDOW_STATE_MAXIMIZED) {\n+            is_maximized = event->new_window_state & GDK_WINDOW_STATE_MAXIMIZED;\n+        }\n+\n+        jint stateChangeEvent;\n+\n+        if (is_iconified) {\n+            stateChangeEvent = com_sun_glass_events_WindowEvent_MINIMIZE;\n+        } else if (is_maximized) {\n+            stateChangeEvent = com_sun_glass_events_WindowEvent_MAXIMIZE;\n+        } else {\n+            stateChangeEvent = com_sun_glass_events_WindowEvent_RESTORE;\n+            if ((gdk_windowManagerFunctions & GDK_FUNC_MINIMIZE) == 0) {\n+                \/\/ in this case - the window manager will not support the programatic\n+                \/\/ request to iconify - so we need to restore it now.\n+                gdk_window_set_functions(gdk_window, gdk_windowManagerFunctions);\n+            }\n+        }\n+\n+        notify_state(stateChangeEvent);\n+    } else if (event->changed_mask & GDK_WINDOW_STATE_ABOVE) {\n+        notify_on_top( event->new_window_state & GDK_WINDOW_STATE_ABOVE);\n+    }\n@@ -539,0 +567,9 @@\n+void WindowContextBase::reparent_children(WindowContext* parent) {\n+    std::set<WindowContextTop*>::iterator it;\n+    for (it = children.begin(); it != children.end(); ++it) {\n+        (*it)->set_owner(parent);\n+        parent->add_child(*it);\n+    }\n+    children.clear();\n+}\n+\n@@ -541,1 +578,1 @@\n-        gtk_widget_show(gtk_widget);\n+        gtk_widget_show_all(gtk_widget);\n@@ -564,0 +601,1 @@\n+\n@@ -585,3 +623,1 @@\n-    if (glass_gdk_mouse_devices_grab_with_cursor(\n-            gdk_window, gdk_window_get_cursor(gdk_window), FALSE)) {\n-        gdk_keyboard_grab(gdk_window, TRUE, GDK_CURRENT_TIME);\n+    if (glass_gdk_devices_grab(gdk_window)) {\n@@ -597,2 +633,1 @@\n-    glass_gdk_mouse_devices_ungrab();\n-    gdk_keyboard_ungrab(GDK_CURRENT_TIME);\n+    glass_gdk_devices_ungrab();\n@@ -669,0 +704,2 @@\n+WindowFrameExtents WindowContextTop::normal_extents = {28, 1, 1, 1};\n+WindowFrameExtents WindowContextTop::utility_extents = {28, 1, 1, 1};\n@@ -671,79 +708,0 @@\n-\/\/ Work-around because frame extents are only obtained after window is shown.\n-\/\/ This is used to know the total window size (content + decoration)\n-\/\/ The first window will have a duplicated resize event, subsequent windows will use the cached value.\n-WindowFrameExtents WindowContextTop::normal_extents = {0, 0, 0, 0};\n-WindowFrameExtents WindowContextTop::utility_extents = {0, 0, 0, 0};\n-\n-static int geometry_get_window_width(const WindowGeometry *windowGeometry) {\n-     return (windowGeometry->final_width.type == BOUNDSTYPE_WINDOW)\n-                   ? windowGeometry->final_width.value\n-                   : windowGeometry->final_width.value\n-                         + windowGeometry->extents.left\n-                         + windowGeometry->extents.right;\n-}\n-\n-static int geometry_get_window_height(const WindowGeometry *windowGeometry) {\n-    return (windowGeometry->final_height.type == BOUNDSTYPE_WINDOW)\n-                   ? windowGeometry->final_height.value\n-                   : windowGeometry->final_height.value\n-                         + windowGeometry->extents.top\n-                         + windowGeometry->extents.bottom;\n-}\n-\n-static int geometry_get_content_width(WindowGeometry *windowGeometry) {\n-    return (windowGeometry->final_width.type == BOUNDSTYPE_CONTENT)\n-                   ? windowGeometry->final_width.value\n-                   : windowGeometry->final_width.value\n-                         - windowGeometry->extents.left\n-                         - windowGeometry->extents.right;\n-}\n-\n-static int geometry_get_content_height(WindowGeometry *windowGeometry) {\n-    return (windowGeometry->final_height.type == BOUNDSTYPE_CONTENT)\n-                   ? windowGeometry->final_height.value\n-                   : windowGeometry->final_height.value\n-                         - windowGeometry->extents.top\n-                         - windowGeometry->extents.bottom;\n-}\n-\n-static int geometry_get_window_x(const WindowGeometry *windowGeometry) {\n-    float value = windowGeometry->refx;\n-    if (windowGeometry->gravity_x != 0) {\n-        value -= geometry_get_window_width(windowGeometry)\n-                     * windowGeometry->gravity_x;\n-    }\n-    return (int) value;\n-}\n-\n-static int geometry_get_window_y(const WindowGeometry *windowGeometry) {\n-    float value = windowGeometry->refy;\n-    if (windowGeometry->gravity_y != 0) {\n-        value -= geometry_get_window_height(windowGeometry)\n-                     * windowGeometry->gravity_y;\n-    }\n-    return (int) value;\n-}\n-\n-static void geometry_set_window_x(WindowGeometry *windowGeometry, int value) {\n-    float newValue = value;\n-    if (windowGeometry->gravity_x != 0) {\n-        newValue += geometry_get_window_width(windowGeometry)\n-                * windowGeometry->gravity_x;\n-    }\n-    windowGeometry->refx = (int) newValue;\n-}\n-\n-static void geometry_set_window_y(WindowGeometry *windowGeometry, int value) {\n-    float newValue = value;\n-    if (windowGeometry->gravity_y != 0) {\n-        newValue += geometry_get_window_height(windowGeometry)\n-                * windowGeometry->gravity_y;\n-    }\n-    windowGeometry->refy = (int) newValue;\n-}\n-\n-static GdkAtom get_net_frame_extents_atom() {\n-    static const char * extents_str = \"_NET_FRAME_EXTENTS\";\n-    return gdk_atom_intern(extents_str, TRUE);\n-}\n-\n@@ -759,0 +717,1 @@\n+            frame_extents_initialized(),\n@@ -760,0 +719,2 @@\n+            location_assigned(false),\n+            size_assigned(false),\n@@ -761,2 +722,2 @@\n-            is_fullscreen(false),\n-            frame_extents_received(false) {\n+            requested_bounds()\n+{\n@@ -765,1 +726,1 @@\n-    gtk_widget = gtk_window_new(type == POPUP ? GTK_WINDOW_POPUP : GTK_WINDOW_TOPLEVEL);\n+    gtk_widget =  gtk_window_new(type == POPUP ? GTK_WINDOW_POPUP : GTK_WINDOW_TOPLEVEL);\n@@ -783,3 +744,0 @@\n-    const char* wm_name = gdk_x11_screen_get_window_manager_name(gdk_screen_get_default());\n-    wmanager = (g_strcmp0(\"Compiz\", wm_name) == 0) ? COMPIZ : UNKNOWN;\n-\n@@ -795,0 +753,1 @@\n+    gtk_widget_set_size_request(gtk_widget, 0, 0);\n@@ -804,5 +763,0 @@\n-    if (wmanager != COMPIZ) {\n-        \/\/ Compiz doesn't like focus on map disabled\n-        gtk_window_set_focus_on_map(GTK_WINDOW(gtk_widget), FALSE);\n-    }\n-\n@@ -823,1 +777,0 @@\n-        geometry.extents = get_cached_extents();\n@@ -825,0 +778,2 @@\n+\n+    event_serial = GDK_CURRENT_TIME;\n@@ -839,3 +794,5 @@\n-void WindowContextTop::request_frame_extents() {\n-    Display *display = GDK_DISPLAY_XDISPLAY(gdk_window_get_display(gdk_window));\n-    static Atom rfeAtom = XInternAtom(display, \"_NET_REQUEST_FRAME_EXTENTS\", True);\n+static GdkAtom\n+get_net_frame_extents_atom() {\n+    static const char * extents_str = \"_NET_FRAME_EXTENTS\";\n+    return gdk_atom_intern(extents_str, TRUE);\n+}\n@@ -843,0 +800,4 @@\n+void\n+WindowContextTop::request_frame_extents() {\n+    Display *display = GDK_DISPLAY_XDISPLAY(gdk_window_get_display(gdk_window));\n+    Atom rfeAtom = XInternAtom(display, \"_NET_REQUEST_FRAME_EXTENTS\", True);\n@@ -859,11 +820,6 @@\n-void WindowContextTop::update_frame_extents() {\n-    int top, left, bottom, right;\n-\n-    if (get_frame_extents_property(&top, &left, &bottom, &right)) {\n-        if ((top + right + bottom + left) != 0) {\n-            frame_extents_received = true;\n-            bool changed = geometry.extents.top != top\n-                            || geometry.extents.left != left\n-                            || geometry.extents.bottom != bottom\n-                            || geometry.extents.right != right;\n-\n+void WindowContextTop::activate_window() {\n+    Display *display = GDK_DISPLAY_XDISPLAY (gdk_window_get_display (gdk_window));\n+    Atom navAtom = XInternAtom(display, \"_NET_ACTIVE_WINDOW\", True);\n+    if (navAtom != None) {\n+        XClientMessageEvent clientMessage;\n+        memset(&clientMessage, 0, sizeof(clientMessage));\n@@ -871,5 +827,7 @@\n-            if (changed) {\n-                geometry.extents.top = top;\n-                geometry.extents.left = left;\n-                geometry.extents.bottom = bottom;\n-                geometry.extents.right = right;\n+        clientMessage.type = ClientMessage;\n+        clientMessage.window = GDK_WINDOW_XID(gdk_window);\n+        clientMessage.message_type = navAtom;\n+        clientMessage.format = 32;\n+        clientMessage.data.l[0] = 1;\n+        clientMessage.data.l[1] = gdk_x11_get_server_time(gdk_window);\n+        clientMessage.data.l[2] = 0;\n@@ -877,5 +835,4 @@\n-                set_cached_extents(geometry.extents);\n-                update_window_constraints();\n-                ensure_window_size();\n-            }\n-        }\n+        XSendEvent(display, XDefaultRootWindow(display), False,\n+                   SubstructureRedirectMask | SubstructureNotifyMask,\n+                   (XEvent *) &clientMessage);\n+        XFlush(display);\n@@ -885,15 +842,0 @@\n-void WindowContextTop::ensure_window_size() {\n-    \/\/ set bounds again to set to correct window size that must\n-    \/\/ be the total width and height accounting extents\n-    int w = geometry_get_window_width(&geometry);\n-    int h = geometry_get_window_height(&geometry);\n-    int cw = geometry_get_content_width(&geometry);\n-    int ch = geometry_get_content_height(&geometry);\n-\n-    set_bounds(-1, -1, false, false, w, h, cw, ch);\n-\n-    notify_window_resize();\n-    \/\/ Window didn't actually move, but view X, Y might change\n-    notify_window_move();\n-}\n-\n@@ -912,1 +854,24 @@\n-bool WindowContextTop::get_frame_extents_property(int *top, int *left,\n+\n+bool WindowContextTop::update_frame_extents() {\n+    bool changed = false;\n+    int top, left, bottom, right;\n+    if (get_frame_extents_property(&top, &left, &bottom, &right)) {\n+        changed = geometry.extents.top != top\n+                    || geometry.extents.left != left\n+                    || geometry.extents.bottom != bottom\n+                    || geometry.extents.right != right;\n+        if (changed) {\n+            geometry.extents.top = top;\n+            geometry.extents.left = left;\n+            geometry.extents.bottom = bottom;\n+            geometry.extents.right = right;\n+            if (!is_null_extents()) {\n+                set_cached_extents(geometry.extents);\n+            }\n+        }\n+    }\n+    return changed;\n+}\n+\n+bool\n+WindowContextTop::get_frame_extents_property(int *top, int *left,\n@@ -938,4 +903,63 @@\n-void WindowContextTop::work_around_compiz_state() {\n-    \/\/ Workaround for https:\/\/bugs.launchpad.net\/unity\/+bug\/998073\n-    if (wmanager != COMPIZ) {\n-        return;\n+static int geometry_get_window_width(const WindowGeometry *windowGeometry) {\n+     return (windowGeometry->final_width.type != BOUNDSTYPE_WINDOW)\n+                   ? windowGeometry->final_width.value\n+                         + windowGeometry->extents.left\n+                         + windowGeometry->extents.right\n+                   : windowGeometry->final_width.value;\n+}\n+\n+static int geometry_get_window_height(const WindowGeometry *windowGeometry) {\n+    return (windowGeometry->final_height.type != BOUNDSTYPE_WINDOW)\n+                   ? windowGeometry->final_height.value\n+                         + windowGeometry->extents.top\n+                         + windowGeometry->extents.bottom\n+                   : windowGeometry->final_height.value;\n+}\n+\n+static int geometry_get_content_width(WindowGeometry *windowGeometry) {\n+    return (windowGeometry->final_width.type != BOUNDSTYPE_CONTENT)\n+                   ? windowGeometry->final_width.value\n+                         - windowGeometry->extents.left\n+                         - windowGeometry->extents.right\n+                   : windowGeometry->final_width.value;\n+}\n+static int geometry_get_content_height(WindowGeometry *windowGeometry) {\n+    return (windowGeometry->final_height.type != BOUNDSTYPE_CONTENT)\n+                   ? windowGeometry->final_height.value\n+                         - windowGeometry->extents.top\n+                         - windowGeometry->extents.bottom\n+                   : windowGeometry->final_height.value;\n+}\n+\n+static int geometry_get_window_x(const WindowGeometry *windowGeometry) {\n+    float value = windowGeometry->refx;\n+    if (windowGeometry->gravity_x != 0) {\n+        value -= geometry_get_window_width(windowGeometry)\n+                     * windowGeometry->gravity_x;\n+    }\n+    return (int) value;\n+}\n+\n+static int geometry_get_window_y(const WindowGeometry *windowGeometry) {\n+    float value = windowGeometry->refy;\n+    if (windowGeometry->gravity_y != 0) {\n+        value -= geometry_get_window_height(windowGeometry)\n+                     * windowGeometry->gravity_y;\n+    }\n+    return (int) value;\n+}\n+\n+static void geometry_set_window_x(WindowGeometry *windowGeometry, int value) {\n+    float newValue = value;\n+    if (windowGeometry->gravity_x != 0) {\n+        newValue += geometry_get_window_width(windowGeometry)\n+                * windowGeometry->gravity_x;\n+    }\n+    windowGeometry->refx = newValue;\n+}\n+\n+static void geometry_set_window_y(WindowGeometry *windowGeometry, int value) {\n+    float newValue = value;\n+    if (windowGeometry->gravity_y != 0) {\n+        newValue += geometry_get_window_height(windowGeometry)\n+                * windowGeometry->gravity_y;\n@@ -943,0 +967,5 @@\n+    windowGeometry->refy = newValue;\n+}\n+\n+void WindowContextTop::process_net_wm_property() {\n+    \/\/ Workaround for https:\/\/bugs.launchpad.net\/unity\/+bug\/998073\n@@ -983,6 +1012,2 @@\n-    if (event->window == gdk_window) {\n-        if (event->atom == get_net_frame_extents_atom()) {\n-            update_frame_extents();\n-        } else if (event->atom == atom_net_wm_state) {\n-            work_around_compiz_state();\n-        }\n+    if (event->atom == atom_net_wm_state && event->window == gdk_window) {\n+        process_net_wm_property();\n@@ -992,20 +1017,6 @@\n-void WindowContextTop::process_state(GdkEventWindowState* event) {\n-    if (!map_received) {\n-        return;\n-    }\n-\n-    if (event->changed_mask & GDK_WINDOW_STATE_FULLSCREEN) {\n-        is_fullscreen = event->new_window_state & GDK_WINDOW_STATE_FULLSCREEN;\n-    }\n-\n-    if (event->changed_mask & (GDK_WINDOW_STATE_ICONIFIED | GDK_WINDOW_STATE_MAXIMIZED)) {\n-\n-        if (event->changed_mask & GDK_WINDOW_STATE_ICONIFIED) {\n-            is_iconified = event->new_window_state & GDK_WINDOW_STATE_ICONIFIED;\n-        }\n-\n-        if (event->changed_mask & GDK_WINDOW_STATE_MAXIMIZED) {\n-            is_maximized = event->new_window_state & GDK_WINDOW_STATE_MAXIMIZED;\n-        }\n-\n-        jint stateChangeEvent;\n+void WindowContextTop::process_configure(GdkEventConfigure* event) {\n+    gint x, y, w, h;\n+    bool updateWindowConstraints = false;\n+    if (gtk_window_get_decorated(GTK_WINDOW(gtk_widget))) {\n+        GdkRectangle frame;\n+        gint top, left, bottom, right;\n@@ -1013,10 +1024,19 @@\n-        if (is_iconified) {\n-            stateChangeEvent = com_sun_glass_events_WindowEvent_MINIMIZE;\n-        } else if (is_maximized) {\n-            stateChangeEvent = com_sun_glass_events_WindowEvent_MAXIMIZE;\n-        } else {\n-            stateChangeEvent = com_sun_glass_events_WindowEvent_RESTORE;\n-            if ((gdk_windowManagerFunctions & GDK_FUNC_MINIMIZE) == 0) {\n-                \/\/ in this case - the window manager will not support the programatic\n-                \/\/ request to iconify - so we need to restore it now.\n-                gdk_window_set_functions(gdk_window, gdk_windowManagerFunctions);\n+        gdk_window_get_frame_extents(gdk_window, &frame);\n+#ifdef GLASS_GTK3\n+        gdk_window_get_geometry(gdk_window, NULL, NULL, &w, &h);\n+#else\n+        gdk_window_get_geometry(gdk_window, NULL, NULL, &w, &h, NULL);\n+#endif\n+        x = frame.x;\n+        y = frame.y;\n+        geometry.current_width = frame.width;\n+        geometry.current_height = frame.height;\n+\n+        if (update_frame_extents()) {\n+            updateWindowConstraints = true;\n+            if (!frame_extents_initialized && !is_null_extents()) {\n+                frame_extents_initialized = true;\n+                set_bounds(0, 0, false, false,\n+                    requested_bounds.width, requested_bounds.height,\n+                    requested_bounds.client_width, requested_bounds.client_height\n+                );\n@@ -1025,4 +1045,5 @@\n-\n-        notify_state(stateChangeEvent);\n-    } else if (event->changed_mask & GDK_WINDOW_STATE_ABOVE) {\n-        notify_on_top(event->new_window_state & GDK_WINDOW_STATE_ABOVE);\n+    } else {\n+        x = event->x;\n+        y = event->y;\n+        w = event->width;\n+        h = event->height;\n@@ -1030,1 +1051,0 @@\n-}\n@@ -1032,4 +1052,3 @@\n-void WindowContextTop::process_configure(GdkEventConfigure* event) {\n-    \/\/ This will prevent sending window sizes before java is done configuring the window\n-    \/\/ Without it, some content size oriented window gets the size before finishing the layout\n-    if (!map_received && !is_fullscreen && !is_maximized) {\n+    if (size_assigned && w <= 1 && h <= 1 && (geometry.final_width.value > 1 ||\n+                                             geometry.final_height.value > 1)) {\n+        \/\/ skip artifact\n@@ -1037,8 +1056,1 @@\n-    }\n-\n-    int x, y, w, h;\n-\n-    x = event->x - geometry.extents.left;\n-    y = event->y - geometry.extents.top;\n-    w = event->width;\n-    h = event->height;\n+   }\n@@ -1046,1 +1058,2 @@\n-    if (!is_maximized && !is_fullscreen) {\n+    \/\/ JDK-8232811: to avoid conflicting events, update the geometry only after window pops.\n+    if (map_received) {\n@@ -1053,3 +1066,2 @@\n-    if (jwindow) {\n-        int ww = w + geometry.extents.left + geometry.extents.right;\n-        int wh = h + geometry.extents.top + geometry.extents.bottom;\n+    geometry_set_window_x(&geometry, x);\n+    geometry_set_window_y(&geometry, y);\n@@ -1057,0 +1069,10 @@\n+    if (jview) {\n+        mainEnv->CallVoidMethod(jview, jViewNotifyResize,\n+                event->width,\n+                event->height);\n+        CHECK_JNI_EXCEPTION(mainEnv)\n+        mainEnv->CallVoidMethod(jview, jViewNotifyView,\n+                com_sun_glass_events_ViewEvent_MOVE);\n+        CHECK_JNI_EXCEPTION(mainEnv)\n+    }\n+    if (jwindow) {\n@@ -1061,1 +1083,2 @@\n-                ww, wh);\n+                geometry.current_width,\n+                geometry.current_height);\n@@ -1064,19 +1087,2 @@\n-        if (jview) {\n-            mainEnv->CallVoidMethod(jview, jViewNotifyResize, w, h);\n-            CHECK_JNI_EXCEPTION(mainEnv)\n-        }\n-    }\n-\n-    int curX, curY;\n-    curX = geometry_get_window_x(&geometry);\n-    curY = geometry_get_window_y(&geometry);\n-\n-    bool moved = (curX != x || curY != y);\n-\n-    if (moved) {\n-        geometry_set_window_x(&geometry, x);\n-        geometry_set_window_y(&geometry, y);\n-\n-        if (jwindow) {\n-            notify_window_move();\n-        }\n+        mainEnv->CallVoidMethod(jwindow, jWindowNotifyMove, x, y);\n+        CHECK_JNI_EXCEPTION(mainEnv)\n@@ -1097,0 +1103,9 @@\n+\n+    if (resizable.request != REQUEST_NONE) {\n+        set_window_resizable(resizable.request == REQUEST_RESIZABLE);\n+        resizable.request = REQUEST_NONE;\n+    } else if (!resizable.value) {\n+        set_window_resizable(false);\n+    } else if (updateWindowConstraints) {\n+        update_window_constraints();\n+    }\n@@ -1100,17 +1115,19 @@\n-    GdkGeometry hints;\n-\n-    if (resizable.value && !is_disabled) {\n-        int min_w = (resizable.minw == -1) ? 1\n-                      : resizable.minw - geometry.extents.left - geometry.extents.right;\n-        int min_h =  (resizable.minh == -1) ? 1\n-                      : resizable.minh - geometry.extents.top - geometry.extents.bottom;\n-\n-        hints.min_width = (min_w < 1) ? 1 : min_w;\n-        hints.min_height = (min_h < 1) ? 1 : min_h;\n-\n-        hints.max_width = (resizable.maxw == -1) ? G_MAXINT\n-                            : resizable.maxw - geometry.extents.left - geometry.extents.right;\n-\n-        hints.max_height = (resizable.maxh == -1) ? G_MAXINT\n-                           : resizable.maxh - geometry.extents.top - geometry.extents.bottom;\n-    } else {\n+    if (resizable.value) {\n+        GdkGeometry geom = {\n+            (resizable.minw == -1) ? 1\n+                    : resizable.minw - geometry.extents.left - geometry.extents.right,\n+            (resizable.minh == -1) ? 1\n+                    : resizable.minh - geometry.extents.top - geometry.extents.bottom,\n+            (resizable.maxw == -1) ? 100000\n+                    : resizable.maxw - geometry.extents.left - geometry.extents.right,\n+            (resizable.maxh == -1) ? 100000\n+                    : resizable.maxh - geometry.extents.top - geometry.extents.bottom,\n+            0, 0, 0, 0, 0.0, 0.0, GDK_GRAVITY_NORTH_WEST\n+        };\n+        gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &geom,\n+                static_cast<GdkWindowHints> (GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE));\n+    }\n+}\n+\n+void WindowContextTop::set_window_resizable(bool res) {\n+    if(!res) {\n@@ -1119,5 +1136,10 @@\n-\n-        hints.min_width = w;\n-        hints.min_height = h;\n-        hints.max_width = w;\n-        hints.max_height = h;\n+        if (w == -1 && h == -1) {\n+            gtk_window_get_size(GTK_WINDOW(gtk_widget), &w, &h);\n+        }\n+        GdkGeometry geom = {w, h, w, h, 0, 0, 0, 0, 0.0, 0.0, GDK_GRAVITY_NORTH_WEST};\n+        gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &geom,\n+                static_cast<GdkWindowHints>(GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE));\n+        resizable.value = false;\n+    } else {\n+        resizable.value = true;\n+        update_window_constraints();\n@@ -1125,3 +1147,0 @@\n-\n-    gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &hints,\n-                                  (GdkWindowHints)(GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE));\n@@ -1131,2 +1150,9 @@\n-    resizable.value = res;\n-    update_window_constraints();\n+    resizable.prev = false;\n+    gint w, h;\n+    gtk_window_get_size(GTK_WINDOW(gtk_widget), &w, &h);\n+    if (map_received || w > 1 || h > 1) {\n+        set_window_resizable(res);\n+    } else {\n+        \/\/Since window is not ready yet set only request for change of resizable.\n+        resizable.request  = res ? REQUEST_RESIZABLE : REQUEST_NOT_RESIZABLE;\n+    }\n@@ -1135,1 +1161,10 @@\n-void WindowContextTop::set_visible(bool visible) {\n+void WindowContextTop::set_visible(bool visible)\n+{\n+    if (visible) {\n+        if (!size_assigned) {\n+            set_bounds(0, 0, false, false, 320, 200, -1, -1);\n+        }\n+        if (!location_assigned) {\n+            set_bounds(0, 0, true, true, -1, -1, -1, -1);\n+        }\n+    }\n@@ -1137,3 +1172,4 @@\n-\n-    if (visible && !geometry.size_assigned) {\n-        set_bounds(0, 0, false, false, 320, 200, -1, -1);\n+    \/\/JDK-8220272 - fire event first because GDK_FOCUS_CHANGE is not always in order\n+    if (visible && jwindow && isEnabled()) {\n+        mainEnv->CallVoidMethod(jwindow, jWindowNotifyFocus, com_sun_glass_events_WindowEvent_FOCUS_GAINED);\n+        CHECK_JNI_EXCEPTION(mainEnv);\n@@ -1144,3 +1180,15 @@\n-    \/\/ newW \/ newH always content sizes compatible with GTK+ (content size means \"do not account window frame\")\n-    int newW = 0;\n-    int newH = 0;\n+    requested_bounds.width = w;\n+    requested_bounds.height = h;\n+    requested_bounds.client_width = cw;\n+    requested_bounds.client_height = ch;\n+\n+    if (!frame_extents_initialized && frame_type == TITLED) {\n+        update_frame_extents();\n+        if (is_null_extents()) {\n+            if (!is_null_extents(get_cached_extents())) {\n+                geometry.extents = get_cached_extents();\n+            }\n+        } else {\n+            frame_extents_initialized = true;\n+        }\n+    }\n@@ -1148,0 +1196,2 @@\n+    XWindowChanges windowChanges;\n+    unsigned int windowChangesMask = 0;\n@@ -1149,1 +1199,0 @@\n-        geometry.final_width.type = BOUNDSTYPE_WINDOW;\n@@ -1151,1 +1200,4 @@\n-        newW = w - (geometry.extents.left + geometry.extents.right);\n+        geometry.final_width.type = BOUNDSTYPE_WINDOW;\n+        geometry.current_width = geometry_get_window_width(&geometry);\n+        windowChanges.width = geometry_get_content_width(&geometry);\n+        windowChangesMask |= CWWidth;\n@@ -1153,1 +1205,0 @@\n-        geometry.final_width.type = BOUNDSTYPE_CONTENT;\n@@ -1155,1 +1206,4 @@\n-        newW = cw;\n+        geometry.final_width.type = BOUNDSTYPE_CONTENT;\n+        geometry.current_width = geometry_get_window_width(&geometry);\n+        windowChanges.width = geometry_get_content_width(&geometry);\n+        windowChangesMask |= CWWidth;\n@@ -1159,1 +1213,0 @@\n-        geometry.final_height.type = BOUNDSTYPE_WINDOW;\n@@ -1161,1 +1214,4 @@\n-        newH = h - (geometry.extents.top + geometry.extents.bottom);\n+        geometry.final_height.type = BOUNDSTYPE_WINDOW;\n+        geometry.current_height = geometry_get_window_height(&geometry);\n+        windowChanges.height = geometry_get_content_height(&geometry);\n+        windowChangesMask |= CWHeight;\n@@ -1163,1 +1219,0 @@\n-        geometry.final_height.type = BOUNDSTYPE_CONTENT;\n@@ -1165,14 +1220,4 @@\n-        newH = ch;\n-    }\n-\n-    if (newW > 0 || newH > 0) {\n-        if (gtk_widget_get_visible(gtk_widget)) {\n-            \/\/ call update_window_constraints() to let gtk_window_resize succeed, because it's bound to geometry constraints\n-            update_window_constraints();\n-            gtk_window_resize(GTK_WINDOW(gtk_widget), newW, newH);\n-        } else {\n-            gtk_window_set_default_size(GTK_WINDOW(gtk_widget), newW, newH);\n-        }\n-\n-        geometry.size_assigned = true;\n-        notify_window_resize();\n+        geometry.final_height.type = BOUNDSTYPE_CONTENT;\n+        geometry.current_height = geometry_get_window_height(&geometry);\n+        windowChanges.height = geometry_get_content_height(&geometry);\n+        windowChangesMask |= CWHeight;\n@@ -1183,1 +1228,1 @@\n-            geometry.refx = x + geometry_get_window_width(&geometry) * geometry.gravity_x;\n+            geometry.refx = x + geometry.current_width * geometry.gravity_x;\n@@ -1186,0 +1231,3 @@\n+        windowChanges.x = geometry_get_window_x(&geometry);\n+        windowChangesMask |= CWX;\n+\n@@ -1187,1 +1235,1 @@\n-            geometry.refy = y + geometry_get_window_height(&geometry) * geometry.gravity_y;\n+            geometry.refy = y + geometry.current_height * geometry.gravity_y;\n@@ -1190,5 +1238,2 @@\n-        int newX, newY;\n-        newX = geometry_get_window_x(&geometry);\n-        newY = geometry_get_window_y(&geometry);\n-\n-        gtk_window_move(GTK_WINDOW(gtk_widget), newX, newY);\n+        windowChanges.y = geometry_get_window_y(&geometry);\n+        windowChangesMask |= CWY;\n@@ -1196,1 +1241,1 @@\n-        notify_window_move();\n+        location_assigned = true;\n@@ -1198,0 +1243,5 @@\n+\n+    if (w > 0 || h > 0 || cw > 0 || ch > 0) size_assigned = true;\n+\n+    window_configure(&windowChanges, windowChangesMask);\n+\n@@ -1202,0 +1252,31 @@\n+}\n+\n+void WindowContextTop::window_configure(XWindowChanges *windowChanges,\n+        unsigned int windowChangesMask) {\n+    if (windowChangesMask == 0) {\n+        return;\n+    }\n+\n+    if (windowChangesMask & (CWX | CWY)) {\n+        gint newX, newY;\n+        gtk_window_get_position(GTK_WINDOW(gtk_widget), &newX, &newY);\n+\n+        if (windowChangesMask & CWX) {\n+            newX = windowChanges->x;\n+        }\n+        if (windowChangesMask & CWY) {\n+            newY = windowChanges->y;\n+        }\n+        gtk_window_move(GTK_WINDOW(gtk_widget), newX, newY);\n+    }\n+\n+    if (windowChangesMask & (CWWidth | CWHeight)) {\n+        gint newWidth, newHeight;\n+        gtk_window_get_size(GTK_WINDOW(gtk_widget), &newWidth, &newHeight);\n+\n+        if (windowChangesMask & CWWidth) {\n+            newWidth = windowChanges->width;\n+        }\n+        if (windowChangesMask & CWHeight) {\n+            newHeight = windowChanges->height;\n+        }\n@@ -1203,2 +1284,16 @@\n-    if (!is_iconified) {\n-        request_focus();\n+        if (!resizable.value) {\n+            GdkGeometry geom;\n+            GdkWindowHints hints = (GdkWindowHints)(GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE);\n+            geom.min_width = geom.max_width = newWidth;\n+            geom.min_height = geom.max_height = newHeight;\n+            gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &geom, hints);\n+        }\n+        gtk_window_resize(GTK_WINDOW(gtk_widget), newWidth, newHeight);\n+\n+        \/\/JDK-8193502: Moved here from WindowContextBase::set_view because set_view is called\n+        \/\/first and the size is not set yet. This also guarantees that the size will be correct\n+        \/\/see: gtk_window_get_size doc for more context.\n+        if (jview) {\n+            mainEnv->CallVoidMethod(jview, jViewNotifyResize, newWidth, newHeight);\n+            CHECK_JNI_EXCEPTION(mainEnv);\n+        }\n@@ -1208,1 +1303,12 @@\n-void WindowContextTop::applyShapeMask(void* data, uint width, uint height) {\n+void WindowContextTop::process_key(GdkEventKey* event) {\n+    WindowContextBase::process_key(event);\n+    event_serial = event->time;\n+}\n+\n+void WindowContextTop::process_mouse_button(GdkEventButton* event) {\n+    WindowContextBase::process_mouse_button(event);\n+    event_serial = event->time;\n+}\n+\n+void WindowContextTop::applyShapeMask(void* data, uint width, uint height)\n+{\n@@ -1216,0 +1322,15 @@\n+void WindowContextTop::ensure_window_size() {\n+    gint w, h;\n+#ifdef GLASS_GTK3\n+    gdk_window_get_geometry(gdk_window, NULL, NULL, &w, &h);\n+#else\n+    gdk_window_get_geometry(gdk_window, NULL, NULL, &w, &h, NULL);\n+#endif\n+    if (size_assigned && (geometry.final_width.value != w\n+                       || geometry.final_height.value != h)) {\n+\n+        gdk_window_resize(gdk_window, geometry.final_width.value,\n+                                      geometry.final_height.value);\n+    }\n+}\n+\n@@ -1219,1 +1340,1 @@\n-        if (frame_type == TRANSPARENT && wmanager == COMPIZ) {\n+        if (frame_type == TRANSPARENT) {\n@@ -1232,1 +1353,2 @@\n-        request_focus();\n+        gtk_window_deiconify(GTK_WINDOW(gtk_widget));\n+        activate_window();\n@@ -1235,1 +1357,0 @@\n-\n@@ -1244,0 +1365,1 @@\n+        ensure_window_size();\n@@ -1251,0 +1373,1 @@\n+    ensure_window_size();\n@@ -1252,1 +1375,0 @@\n-    is_fullscreen = true;\n@@ -1260,0 +1382,3 @@\n+    \/\/JDK-8212060: Window show and then move glitch.\n+    \/\/The WindowContextBase::set_visible will take care of showing the window.\n+    \/\/The below code will only handle later request_focus.\n@@ -1261,1 +1386,5 @@\n-        gtk_window_present(GTK_WINDOW(gtk_widget));\n+        \/\/ event_serial holds an event serial that will help X11 determine which window should have the focus and\n+        \/\/ prevents activeWindows on WindowStage.java to be out of order which may cause the FOCUS_DISABLED event\n+        \/\/ to bring up the wrong window (it brings up the last which will not be the real \"last\" if out of order).\n+        gtk_window_present_with_time(GTK_WINDOW(gtk_widget), event_serial);\n+        event_serial = GDK_CURRENT_TIME;\n@@ -1270,1 +1399,1 @@\n-    gtk_window_set_title(GTK_WINDOW(gtk_widget), title);\n+    gtk_window_set_title(GTK_WINDOW(gtk_widget),title);\n@@ -1278,2 +1407,13 @@\n-    is_disabled = !enabled;\n-    update_window_constraints();\n+    if (enabled) {\n+        if (resizable.prev) {\n+            set_window_resizable(true);\n+        }\n+    } else {\n+        if (resizable.value) {\n+            set_window_resizable(false);\n+            resizable.prev = true;\n+        } else if (resizable.request == REQUEST_RESIZABLE) {\n+            resizable.request = REQUEST_NOT_RESIZABLE;\n+            resizable.prev = true;\n+        }\n+    }\n@@ -1283,2 +1423,2 @@\n-    resizable.minw = (w <= 0) ? 1 : w;\n-    resizable.minh = (h <= 0) ? 1 : h;\n+    resizable.minw = w;\n+    resizable.minh = h;\n@@ -1298,6 +1438,2 @@\n-void WindowContextTop::to_front() {\n-    gdk_window_raise(gdk_window);\n-}\n-\n-void WindowContextTop::to_back() {\n-    gdk_window_lower(gdk_window);\n+void WindowContextTop::restack(bool restack) {\n+    gdk_window_restack(gdk_window, NULL, restack ? TRUE : FALSE);\n@@ -1397,31 +1533,0 @@\n-void WindowContextTop::notify_window_resize() {\n-    int w = geometry_get_window_width(&geometry);\n-    int h = geometry_get_window_height(&geometry);\n-\n-    mainEnv->CallVoidMethod(jwindow, jWindowNotifyResize,\n-                 com_sun_glass_events_WindowEvent_RESIZE, w, h);\n-    CHECK_JNI_EXCEPTION(mainEnv)\n-\n-    if (jview) {\n-        int cw = geometry_get_content_width(&geometry);\n-        int ch = geometry_get_content_height(&geometry);\n-\n-        mainEnv->CallVoidMethod(jview, jViewNotifyResize, cw, ch);\n-        CHECK_JNI_EXCEPTION(mainEnv)\n-    }\n-}\n-\n-void WindowContextTop::notify_window_move() {\n-    int x = geometry_get_window_x(&geometry);\n-    int y = geometry_get_window_y(&geometry);\n-\n-    mainEnv->CallVoidMethod(jwindow, jWindowNotifyMove, x, y);\n-    CHECK_JNI_EXCEPTION(mainEnv)\n-\n-    if (jview) {\n-        mainEnv->CallVoidMethod(jview, jViewNotifyView,\n-                com_sun_glass_events_ViewEvent_MOVE);\n-        CHECK_JNI_EXCEPTION(mainEnv)\n-    }\n-}\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.cpp","additions":438,"deletions":333,"binary":false,"changes":771,"status":"modified"},{"patch":"@@ -37,5 +37,0 @@\n-enum WindowManager {\n-    COMPIZ,\n-    UNKNOWN\n-};\n-\n@@ -54,0 +49,6 @@\n+enum request_type {\n+    REQUEST_NONE,\n+    REQUEST_RESIZABLE,\n+    REQUEST_NOT_RESIZABLE\n+};\n+\n@@ -70,1 +71,1 @@\n-    size_assigned(false), refx(), refy(), gravity_x(), gravity_y(), extents() {}\n+    refx(), refy(), gravity_x(), gravity_y(), current_width(), current_height(), extents() {}\n@@ -83,2 +84,0 @@\n-    bool size_assigned;\n-\n@@ -90,0 +89,8 @@\n+    \/\/ the last width which was configured or obtained from configure\n+    \/\/ notification\n+    int current_width;\n+\n+    \/\/ the last height which was configured or obtained from configure\n+    \/\/ notification\n+    int current_height;\n+\n@@ -91,0 +98,1 @@\n+\n@@ -126,2 +134,1 @@\n-    virtual void to_front() = 0;\n-    virtual void to_back() = 0;\n+    virtual void restack(bool) = 0;\n@@ -169,1 +176,1 @@\n-    struct _XIM {\n+    struct _XIM{\n@@ -188,1 +195,0 @@\n-    bool is_disabled;\n@@ -222,0 +228,1 @@\n+    void reparent_children(WindowContext* parent);\n@@ -265,3 +272,4 @@\n-    struct _Resizable {\/\/ we can't use set\/get gtk_window_resizable function\n-        _Resizable(): value(true),\n-                minw(-1), minh(-1), maxw(-1), maxh(-1) {}\n+    struct _Resizable{\/\/ we can't use set\/get gtk_window_resizable function\n+        _Resizable(): request(REQUEST_NONE), value(true), prev(false),\n+                minw(-1), minh(-1), maxw(-1), maxh(-1){}\n+        request_type request; \/\/request for future setResizable\n@@ -269,0 +277,1 @@\n+        bool prev; \/\/former resizable value (used in setEnabled for parents of modal window)\n@@ -272,0 +281,1 @@\n+    bool frame_extents_initialized;\n@@ -273,0 +283,2 @@\n+    bool location_assigned;\n+    bool size_assigned;\n@@ -274,2 +286,11 @@\n-    bool is_fullscreen;\n-    bool frame_extents_received;\n+\n+    struct _Size {\n+        int width, height;\n+        int client_width, client_height;\n+    } requested_bounds;\n+\n+    bool is_null_extents() { return is_null_extents(geometry.extents); }\n+\n+    bool is_null_extents(WindowFrameExtents ex) {\n+        return !ex.top && !ex.left && !ex.bottom && !ex.right;\n+    }\n@@ -280,1 +301,2 @@\n-    WindowManager wmanager;\n+    long event_serial;\n+\n@@ -285,1 +307,0 @@\n-    void process_state(GdkEventWindowState*);\n@@ -288,1 +309,1 @@\n-    void work_around_compiz_state();\n+    void process_net_wm_property();\n@@ -304,2 +325,1 @@\n-    void to_front();\n-    void to_back();\n+    void restack(bool);\n@@ -319,0 +339,2 @@\n+    void process_key(GdkEventKey*);\n+    void process_mouse_button(GdkEventButton*);\n@@ -322,0 +344,1 @@\n+    bool get_frame_extents_property(int *, int *, int *, int *);\n@@ -323,1 +346,2 @@\n-    void update_frame_extents();\n+    void activate_window();\n+    bool update_frame_extents();\n@@ -326,1 +350,1 @@\n-    bool get_frame_extents_property(int *, int *, int *, int *);\n+    void window_configure(XWindowChanges *, unsigned int);\n@@ -328,0 +352,1 @@\n+    void set_window_resizable(bool);\n@@ -331,2 +356,0 @@\n-    void notify_window_move();\n-    void notify_window_resize();\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.h","additions":49,"deletions":26,"binary":false,"changes":75,"status":"modified"}]}