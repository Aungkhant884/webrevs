{"files":[{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.embed.swing;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeTrue;\n+\n+import java.lang.ref.WeakReference;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.CountDownLatch;\n+\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+\n+import javafx.application.Application;\n+import javafx.embed.swing.SwingNode;\n+import javafx.scene.Scene;\n+import javafx.scene.layout.Pane;\n+import javafx.stage.Stage;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import com.sun.javafx.PlatformUtil;\n+\n+import test.util.Util;\n+\n+public class SwingNodeContentMemoryLeakTest {\n+\n+    static CountDownLatch launchLatch = new CountDownLatch(1);\n+\n+    \/\/Keep week references to all panels that we've ever generated to see if any\n+    \/\/of them get collected.\n+    private Collection<WeakReference<JPanel>> panels = new CopyOnWriteArrayList<>();\n+    private int count = 0;\n+    private int fail = 0;\n+    private SwingNode node;\n+    private long panelCount;\n+\n+    @BeforeClass\n+    public static void setupOnce() {\n+        Util.launch(launchLatch, 50, MyApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void teardownOnce() {\n+        Util.shutdown();\n+    }\n+\n+    @Test\n+    public void testSwingNodeContentMemoryLeak() throws InterruptedException,\n+                                                        InvocationTargetException {\n+        Util.runAndWait(() -> {\n+            node = new SwingNode();\n+            Pane root = new Pane();\n+            root.getChildren().add(node);\n+\n+            Stage stage = new Stage();\n+            Scene scene = new Scene(root, 150, 100);\n+            stage.setScene(scene);\n+        });\n+\n+        \/\/Kick off a thread that repeatedly creates new JPanels and resets the swing node's content\n+        new Thread(() -> {\n+            while(count < 50) {\n+                \/\/Lets throw in a little sleep so we can read the output\n+                try {\n+                    Thread.sleep(100);\n+                } catch (InterruptedException e) {\n+                    e.printStackTrace();\n+                }\n+\n+                SwingUtilities.invokeLater(() -> {\n+                    JPanel panel = new JPanel();\n+                    panels.add(new WeakReference<>(panel));\n+                    node.setContent(panel);\n+                });\n+\n+                panelCount = panels.stream().filter(ref ->\n+                                                     ref.get() != null).count();\n+                System.out.println(\"iteration \" + count + \" Panels in memory: \" + panelCount);\n+\n+                \/\/I know this doesn't guarantee anything, but prompting a GC gives me more confidence that this\n+                \/\/truly is a bug.\n+                System.gc();\n+                count++;\n+            }\n+            \/\/ Check if panelCount has not increased beyond certain threshold\n+            assertFalse(panelCount > count\/2);\n+\n+        }).start();\n+\n+        \/\/ Invoke a noop on EDT thread and wait for a bit to make sure EDT processed node objects\n+        SwingUtilities.invokeAndWait(() -> {});\n+        Util.sleep(5000);\n+    }\n+\n+    public static class MyApp extends Application {\n+        @Override\n+        public void start(Stage stage) throws Exception {\n+            launchLatch.countDown();\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/embed\/swing\/SwingNodeContentMemoryLeakTest.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"}]}