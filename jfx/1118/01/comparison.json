{"files":[{"patch":"@@ -213,2 +213,0 @@\n-    private static final double EPSILON = 1e-14;\n-\n@@ -298,1 +296,4 @@\n-     * This method guarantees that:\n+     * When the absolute value of the given value multiplied by the\n+     * current scale is less than 10^15, then this method guarantees that:\n+     *\n+     * <pre>scaledFloor(scaledFloor(value, scale), scale) == scaledFloor(value, scale)<\/pre>\n@@ -300,1 +301,2 @@\n-     * scaledFloor(scaledFloor(value, scale), scale) == scaledFloor(value, scale)\n+     * The limit is about 10^15 because double values will no longer be able to represent\n+     * larger integers with exact precision beyond this limit.\n@@ -307,1 +309,3 @@\n-        return Math.floor(value * scale + EPSILON) \/ scale;\n+        double d = value * scale;\n+\n+        return Math.floor(d + Math.ulp(d)) \/ scale;\n@@ -312,1 +316,4 @@\n-     * This method guarantees that:\n+     * When the absolute value of the given value multiplied by the\n+     * current scale is less than 10^15, then this method guarantees that:\n+     *\n+     * <pre>scaledCeil(scaledCeil(value, scale), scale) == scaledCeil(value, scale)<\/pre>\n@@ -314,1 +321,2 @@\n-     * scaledCeil(scaledCeil(value, scale), scale) == scaledCeil(value, scale)\n+     * The limit is about 10^15 because double values will no longer be able to represent\n+     * larger integers with exact precision beyond this limit.\n@@ -321,1 +329,3 @@\n-        return Math.ceil(value * scale - EPSILON) \/ scale;\n+        double d = value * scale;\n+\n+        return Math.ceil(d - Math.ulp(d)) \/ scale;\n@@ -387,1 +397,4 @@\n-     * ceiled (negative values) with a scale. This method guarantees that:\n+     * ceiled (negative values) with a scale. When the absolute value of the given value\n+     * multiplied by the current scale is less than 10^15, then this method guarantees that:\n+     *\n+     * <pre>snapPortionX(snapPortionX(value, snapToPixel), snapToPixel) == snapPortionX(value, snapToPixel)<\/pre>\n@@ -389,1 +402,2 @@\n-     * snapPortionX(snapPortionX(value, snapToPixel), snapToPixel) == snapPortionX(value, snapToPixel)\n+     * The limit is about 10^15 because double values will no longer be able to represent\n+     * larger integers with exact precision beyond this limit.\n@@ -397,0 +411,1 @@\n+\n@@ -398,7 +413,2 @@\n-        value *= s;\n-        if (value > 0) {\n-            value = Math.max(1, Math.floor(value + EPSILON));\n-        } else {\n-            value = Math.min(-1, Math.ceil(value - EPSILON));\n-        }\n-        return value \/ s;\n+\n+        return value > 0 ? scaledFloor(value, s) : scaledCeil(value, s);\n@@ -409,1 +419,4 @@\n-     * ceiled (negative values) with a scale. This method guarantees that:\n+     * ceiled (negative values) with a scale. When the absolute value of the given value\n+     * multiplied by the current scale is less than 10^15, then this method guarantees that:\n+     *\n+     * <pre>snapPortionY(snapPortionY(value, snapToPixel), snapToPixel) == snapPortionY(value, snapToPixel)<\/pre>\n@@ -411,1 +424,2 @@\n-     * snapPortionY(snapPortionY(value, snapToPixel), snapToPixel) == snapPortionY(value, snapToPixel)\n+     * The limit is about 10^15 because double values will no longer be able to represent\n+     * larger integers with exact precision beyond this limit.\n@@ -419,0 +433,1 @@\n+\n@@ -420,7 +435,2 @@\n-        value *= s;\n-        if (value > 0) {\n-            value = Math.max(1, Math.floor(value + EPSILON));\n-        } else {\n-            value = Math.min(-1, Math.ceil(value - EPSILON));\n-        }\n-        return value \/ s;\n+\n+        return value > 0 ? scaledFloor(value, s) : scaledCeil(value, s);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Region.java","additions":36,"deletions":26,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -1254,1 +1254,2 @@\n-    @Test public void snappingASnappedValueGivesTheSameValueTest() {\n+    @Test\n+    public void snappingASnappedValueGivesTheSameValueTest() {\n@@ -1260,1 +1261,3 @@\n-        double[] scales = new double[] {1.0, 1.25, 1.5, 1.75, 2.0, 1.374562997};\n+        double[] scales = new double[] {1.0, 1.25, 1.5, 1.75, 2.0, 1.374562997, 20.0};\n+        Random random = new Random();\n+        long seed = random.nextLong();\n@@ -1264,0 +1267,4 @@\n+        String failMessage = \"Seed was: \" + seed;\n+\n+        random.setSeed(seed);\n+\n@@ -1267,1 +1274,1 @@\n-                double value = new Random().nextDouble() * 100 - 50;\n+                double value = random.nextDouble() * Integer.MAX_VALUE;\n@@ -1270,1 +1277,1 @@\n-                assertEquals(snappedValue, snapOfSnappedValue, 1.0e-14);\n+                assertEquals(failMessage, snappedValue, snapOfSnappedValue, 0.0);\n@@ -1274,0 +1281,2 @@\n+        random.setSeed(seed);\n+\n@@ -1277,1 +1286,1 @@\n-                double value = new Random().nextDouble() * 100 - 50;\n+                double value = random.nextDouble() * Integer.MAX_VALUE;\n@@ -1280,1 +1289,1 @@\n-                assertEquals(snappedValue, snapOfSnappedValue, 1.0e-14);\n+                assertEquals(failMessage, snappedValue, snapOfSnappedValue, 0.0);\n@@ -1286,0 +1295,2 @@\n+        random.setSeed(seed);\n+\n@@ -1289,1 +1300,1 @@\n-                double value = new Random().nextDouble() * 100 - 50;\n+                double value = random.nextDouble() * Integer.MAX_VALUE;\n@@ -1292,1 +1303,1 @@\n-                assertEquals(snappedValue, snapOfSnappedValue, 1.0e-14);\n+                assertEquals(failMessage, snappedValue, snapOfSnappedValue, 0.0);\n@@ -1296,0 +1307,2 @@\n+        random.setSeed(seed);\n+\n@@ -1299,1 +1312,1 @@\n-                double value = new Random().nextDouble() * 100 - 50;\n+                double value = random.nextDouble() * Integer.MAX_VALUE;\n@@ -1302,1 +1315,1 @@\n-                assertEquals(snappedValue, snapOfSnappedValue, 1.0e-14);\n+                assertEquals(failMessage, snappedValue, snapOfSnappedValue, 0.0);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/RegionTest.java","additions":23,"deletions":10,"binary":false,"changes":33,"status":"modified"}]}