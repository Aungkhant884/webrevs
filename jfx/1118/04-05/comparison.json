{"files":[{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/layout\/ScaledMath.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n@@ -10,0 +35,1 @@\n+    private static final double[] SCALES = new double[] {0.5, 2.0 \/ 3.0, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 4.0 \/ 3.0};\n@@ -13,1 +39,1 @@\n-        for (double scale : new double[] {0.5, 2.0 \/ 3.0, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 4.0 \/ 3.0}) {\n+        for (double scale : SCALES) {\n@@ -21,0 +47,9 @@\n+\n+        for (double scale : SCALES) {\n+            for (double d = 0; d > -1e13; d--, d *= 1.1) {  \/\/ larger values break down because there are not enough fractional digits anymore\n+                double expected = Math.ceil(d * scale) \/ scale;\n+\n+                assertEquals(expected, ScaledMath.ceil(d, scale), 0.0);\n+                assertEquals(expected, ScaledMath.ceil(ScaledMath.ceil(d, scale), scale), 0.0);\n+            }\n+        }\n@@ -25,1 +60,1 @@\n-        for (double scale : new double[] {0.5, 2.0 \/ 3.0, 1.0, 1.25, 1.5, 1.75, 2.0, 2.25, 4.0 \/ 3.0}) {\n+        for (double scale : SCALES) {\n@@ -28,0 +63,9 @@\n+\n+                assertEquals(expected, ScaledMath.floor(d, scale), 0.0);\n+                assertEquals(expected, ScaledMath.floor(ScaledMath.floor(d, scale), scale), 0.0);\n+            }\n+        }\n+\n+        for (double scale : SCALES) {\n+            for (double d = 0; d > -1e13; d--, d *= 1.1) {  \/\/ larger values break down because there are not enough fractional digits anymore\n+                double expected = Math.floor(d * scale) \/ scale;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/layout\/ScaledMathTest.java","additions":46,"deletions":2,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -1342,2 +1342,0 @@\n-        random.setSeed(seed);\n-\n@@ -1356,2 +1354,0 @@\n-        random.setSeed(seed);\n-\n@@ -1368,2 +1364,0 @@\n-        random.setSeed(seed);\n-\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/RegionTest.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}