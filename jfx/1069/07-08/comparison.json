{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import javafx.beans.Subscription;\n@@ -47,1 +48,1 @@\n-        value.subscribe(() -> calls.addAndGet(1));\n+        Subscription subscription = value.subscribe(() -> calls.addAndGet(1));\n@@ -57,1 +58,13 @@\n-        assertEquals(1, calls.get());\n+        assertEquals(1, calls.get());  \/\/ already invalid, not called again\n+\n+        value.get();\n+        value.set(\"C\");\n+\n+        assertEquals(2, calls.get());\n+\n+        subscription.unsubscribe();\n+\n+        value.get();\n+        value.set(\"C\");\n+\n+        assertEquals(2, calls.get());  \/\/ unsubscribed, not called\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/ObservableSubscriptionsTest.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import javafx.beans.Subscription;\n@@ -50,1 +51,1 @@\n-        value.subscribe(lastCall::set);\n+        Subscription subscription = value.subscribe(lastCall::set);\n@@ -66,1 +67,7 @@\n-        assertNull(lastCall.get());\n+        assertNull(lastCall.get());  \/\/ unchanged when changing from B to B\n+\n+        subscription.unsubscribe();\n+\n+        value.set(\"C\");\n+\n+        assertNull(lastCall.get());  \/\/ unchanged as unsubscribed\n@@ -80,1 +87,1 @@\n-        value.subscribe((old, current) -> lastCall.set(old + \" -> \" + current));\n+        Subscription subscription = value.subscribe((old, current) -> lastCall.set(old + \" -> \" + current));\n@@ -96,1 +103,7 @@\n-        assertNull(lastCall.get());\n+        assertNull(lastCall.get());  \/\/ unchanged when changing from B to B\n+\n+        subscription.unsubscribe();\n+\n+        value.set(\"C\");\n+\n+        assertNull(lastCall.get());  \/\/ unchanged as unsubscribed\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/ObservableValueSubscriptionsTest.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"}]}