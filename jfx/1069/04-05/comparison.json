{"files":[{"patch":"@@ -45,1 +45,1 @@\n-        nonNullCondition.values(this::conditionChanged);\n+        nonNullCondition.subscribe(this::conditionChanged);\n@@ -79,1 +79,1 @@\n-                subscription = source.invalidations(this::invalidate);\n+                subscription = source.subscribe(this::invalidate);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ConditionalBinding.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-            indirectSourceSubscription = newIndirectSource == null ? Subscription.EMPTY : newIndirectSource.invalidations(this::invalidate);\n+            indirectSourceSubscription = newIndirectSource == null ? Subscription.EMPTY : newIndirectSource.subscribe(this::invalidate);\n@@ -84,1 +84,1 @@\n-        Subscription subscription = source.invalidations(this::invalidateAll);\n+        Subscription subscription = source.subscribe(this::invalidateAll);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/FlatMappedBinding.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        return source.invalidations(this::invalidate); \/\/ start observing source\n+        return source.subscribe(this::invalidate); \/\/ start observing source\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/MappedBinding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        return source.invalidations(this::invalidate); \/\/ start observing source\n+        return source.subscribe(this::invalidate); \/\/ start observing source\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/OrElseBinding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,0 +105,1 @@\n+     * @throws NullPointerException if the subscriber is {@code null}\n@@ -107,1 +108,1 @@\n-    default Subscription invalidations(Runnable subscriber) {\n+    default Subscription subscribe(Runnable subscriber) {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/Observable.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -317,0 +317,1 @@\n+     * @throws NullPointerException if the subscriber is {@code null}\n@@ -319,1 +320,1 @@\n-    default Subscription changes(BiConsumer<? super T, ? super T> subscriber) {\n+    default Subscription subscribe(BiConsumer<? super T, ? super T> subscriber) {\n@@ -337,0 +338,1 @@\n+     * @throws NullPointerException if the subscriber is {@code null}\n@@ -339,1 +341,1 @@\n-    default Subscription values(Consumer<? super T> subscriber) {\n+    default Subscription subscribe(Consumer<? super T> subscriber) {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/ObservableValue.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.beans;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+\n+public class ObservableSubscriptionsTest {\n+    private final StringProperty value = new SimpleStringProperty(\"Initial\");\n+\n+    @Test\n+    void subscribeRunnableShouldCallSubscriberWhenObservableInvalidated() {\n+        AtomicInteger calls = new AtomicInteger();\n+\n+        assertEquals(0, calls.get());\n+\n+        value.subscribe(() -> calls.addAndGet(1));\n+\n+        assertEquals(0, calls.get());\n+\n+        value.set(\"A\");\n+\n+        assertEquals(1, calls.get());\n+\n+        value.set(\"B\");\n+\n+        assertEquals(1, calls.get());\n+    }\n+\n+    @Test\n+    void subscribeRunnableShouldRejectNull() {\n+        assertThrows(NullPointerException.class, () -> value.subscribe((Runnable) null));\n+    }\n+}\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/ObservableSubscriptionsTest.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -32,1 +32,0 @@\n-import java.util.concurrent.atomic.AtomicInteger;\n@@ -34,0 +33,2 @@\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n@@ -44,25 +45,1 @@\n-    void invalidationsShouldCallSubscriberWhenObservableInvalidated() {\n-        AtomicInteger calls = new AtomicInteger();\n-\n-        assertEquals(0, calls.get());\n-\n-        value.invalidations(() -> calls.addAndGet(1));\n-\n-        assertEquals(0, calls.get());\n-\n-        value.set(\"A\");\n-\n-        assertEquals(1, calls.get());\n-\n-        value.set(\"B\");\n-\n-        assertEquals(1, calls.get());\n-    }\n-\n-    @Test\n-    void invalidationsShouldRejectNull() {\n-        assertThrows(NullPointerException.class, () -> value.invalidations(null));\n-    }\n-\n-    @Test\n-    void valuesShouldCallSubscriberImmediatelyAndAfterEachChange() {\n+    void subscribeConsumerShouldCallSubscriberImmediatelyAndAfterEachChange() {\n@@ -73,1 +50,1 @@\n-        value.values(lastCall::set);\n+        value.subscribe(lastCall::set);\n@@ -93,2 +70,2 @@\n-    void valuesShouldRejectNull() {\n-        assertThrows(NullPointerException.class, () -> value.values(null));\n+    void subscribeConsumerShouldRejectNull() {\n+        assertThrows(NullPointerException.class, () -> value.subscribe((Consumer<String>) null));\n@@ -98,1 +75,1 @@\n-    void changesShouldCallSubscriberAfterEachChange() {\n+    void subscribeBiConsumerShouldCallSubscriberAfterEachChange() {\n@@ -103,1 +80,1 @@\n-        value.changes((old, current) -> lastCall.set(old + \" -> \" + current));\n+        value.subscribe((old, current) -> lastCall.set(old + \" -> \" + current));\n@@ -123,2 +100,2 @@\n-    void changesShouldRejectNull() {\n-        assertThrows(NullPointerException.class, () -> value.changes(null));\n+    void subscribeBiConsumerShouldRejectNull() {\n+        assertThrows(NullPointerException.class, () -> value.subscribe((BiConsumer<String, String>) null));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/ObservableValueSubscriptionsTest.java","additions":10,"deletions":33,"binary":false,"changes":43,"status":"modified"}]}