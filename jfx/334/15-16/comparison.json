{"files":[{"patch":"@@ -48,1 +48,1 @@\n-     * Since the light radiates equaly in all directions, this value is meaningless.\n+     * Since the light radiates equally in all directions, this value is meaningless.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/NGPointLight.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -172,5 +172,6 @@\n-                 *\/\n-\/\/                \/\/ Where d is distance from point light\n-\/\/                float attenuationFactor = 1\/(c + cL * d + cQ * d * d);\n-\/\/                float intensity = rL * 0.299f + gL * 0.587f + bL * 0.114f;\n-\/\/                intensity *= attenuationFactor;\n+                 *\n+                 * Where d is distance from point light\n+                 * float attenuationFactor = 1\/(c + cL * d + cQ * d * d);\n+                 * float intensity = rL * 0.299f + gL * 0.587f + bL * 0.114f;\n+                 * intensity *= attenuationFactor;\n+                *\/\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/NGShape3D.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n- * In addition to the attenuation factors defined in {@code PointLight}, the {@code Spotlight}'s intensity is also\n- * affected by 3 factors:\n+ * In addition to the factors that control the light intensity of a {@code PointLight}, a {@code SpotLight} has a\n+ * light-cone attenuation factor, {@code spot}, that is determined by 3 properties:\n@@ -51,2 +51,2 @@\n- * <li> {@link #innerAngleProperty() inner angle}: the angle of the inner cone\n- * <li> {@link #outerAngleProperty() outer angle}: the angle of the outer cone\n+ * <li> {@link #innerAngleProperty() inner angle}: the angle of the inner cone (see image below)\n+ * <li> {@link #outerAngleProperty() outer angle}: the angle of the outer cone (see image below)\n@@ -58,1 +58,1 @@\n- * For a point whose vector to the light forms an angle {@code theta} with the direction of the light, if\n+ * For a point whose vector to the light source forms an angle {@code theta} with the direction of the light, if\n@@ -60,3 +60,3 @@\n- * <li>{@code theta < innerAngle} then that point receives maximum illumination\n- * <li>{@code theta > outerAngle} then that point receives no illumination\n- * <li>{@code innerAngle <= theta <= outerAngle} then the illumination is determined by the formula\n+ * <li>{@code theta < innerAngle} then {@code spot = 1}\n+ * <li>{@code theta > outerAngle} then {@code spot = 0}\n+ * <li>{@code innerAngle <= theta <= outerAngle} then \n@@ -64,1 +64,1 @@\n- * <pre>I = pow((cos(theta) - cos(outer)) \/ (cos(inner) - cos(outer)), falloff)<\/pre>\n+ * <pre>spot = pow((cos(theta) - cos(outer)) \/ (cos(inner) - cos(outer)), falloff)<\/pre>\n@@ -68,0 +68,1 @@\n+ * As a result, {@code 0 <= spot <= 1}. The overall intensity of the light is {@code I = lambert * atten * spot}.\n@@ -142,3 +143,6 @@\n-     * The angle of the spotlight's inner cone. Surfaces whose angle to the light's origin is less than this angle\n-     * receive the full light's intensity. At larger angles, the light intensity starts to drop. The valid range is\n-     * {@code 0 <= innerAngle <= outerAngle}; values outside of this range can produce unexpected results.\n+     * The angle of the spotlight's inner cone (as shown in the class doc image). A point whose angle to the light's\n+     * origin is less than this angle is not attenuated by the spotlight factor ({@code spot = 1}). At larger angles,\n+     * the light intensity starts to drop.\n+     * <p>\n+     * The valid range is {@code 0 <= innerAngle <= outerAngle}; values outside of this range can produce unexpected\n+     * results.\n@@ -169,3 +173,6 @@\n-     * The angle of the spotlight's outer cone. Surfaces whose angle to the light's origin is greater than this angle\n-     * receive no light. At smaller angles, the light intensity starts to increase. The valid range is\n-     * {@code innerAngle <= outerAngle <= 180}; values outside of this range can produce unexpected results.\n+     * The angle of the spotlight's outer cone (as shown in the class doc image). A point whose angle to the light's\n+     * origin is greater than this angle receive no light ({@code spot = 0}). At smaller angles, the light intensity\n+     * starts to increase.\n+     * <p>\n+     * The valid range is {@code innerAngle <= outerAngle <= 180}; values outside of this range can produce unexpected\n+     * results.\n@@ -196,2 +203,2 @@\n-     * The intensity falloff factor of the spotlight's outer cone. Surfaces whose angle to the light's origin is greater\n-     * than the inner angle but less than the outer angle receive partial intensity governed by this factor. The larger\n+     * The intensity falloff factor of the spotlight's outer cone. A point whose angle to the light's origin is greater\n+     * than the inner angle but less than the outer angle receives partial intensity governed by this factor. The larger\n@@ -199,2 +206,4 @@\n-     * intensity, values greater than 1 give a convex drop, and values smaller than 1 give a concave drop. The valid\n-     * range is {@code 0 <= falloff}; values outside of this range can produce unexpected results.\n+     * intensity, values greater than 1 give a convex drop, and values smaller than 1 give a concave drop. See the class\n+     * docs for the mathematical definitions.\n+     * <p>\n+     * The valid range is {@code 0 <= falloff}; values outside of this range can produce unexpected results.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/SpotLight.java","additions":28,"deletions":19,"binary":false,"changes":47,"status":"modified"}]}