{"files":[{"patch":"@@ -28,0 +28,2 @@\n+import javafx.geometry.Point3D;\n+\n@@ -44,0 +46,12 @@\n+    \/**\n+     * The direction of a {@code SpotLight} that simulates a {@code PointLight}.\n+     * Since the light radiates equaly in all directions, this value is meaningless.\n+     **\/\n+    private static final Point3D SIMULATED_DIRECTION = new Point3D(0, 0, 1);\n+    \/** The inner angle value of a {@code SpotLight} that simulates a {@code PointLight} *\/\n+    private static final float SIMULATED_INNER_ANGLE = 0;\n+    \/** The outer angle value of a {@code SpotLight} that simulates a {@code PointLight} *\/\n+    private static final float SIMULATED_OUTER_ANGLE = 180;\n+    \/** The falloff value of a {@code SpotLight} that simulates a {@code PointLight} *\/\n+    private static final float SIMULATED_FALLOFF = 0;\n+\n@@ -64,0 +78,17 @@\n+    public Point3D getDirection() {\n+        return SIMULATED_DIRECTION;\n+    }\n+\n+    public float getInnerAngle() {\n+        return SIMULATED_INNER_ANGLE;\n+    }\n+\n+    public float getOuterAngle() {\n+        return SIMULATED_OUTER_ANGLE;\n+    }\n+\n+    public float getFalloff() {\n+        return SIMULATED_FALLOFF;\n+    }\n+\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/NGPointLight.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-                    0, 0, -1, 0, 180, 0); \/\/ simulating point light);\n+                    0, 0, 1, 0, 180, 0); \/\/ simulating point light);\n@@ -163,2 +163,2 @@\n-                if (lightBase instanceof NGSpotLight) {\n-                    var light = (NGSpotLight) lightBase;\n+                if (lightBase instanceof NGPointLight) {\n+                    var light = (NGPointLight) lightBase;\n@@ -181,13 +181,0 @@\n-                } else if (lightBase instanceof NGPointLight) {\n-                    NGPointLight light = (NGPointLight) lightBase;\n-                    Affine3D lightWT = light.getWorldTransform();\n-                    meshView.setLight(lightIndex++,\n-                            (float) lightWT.getMxt(),\n-                            (float) lightWT.getMyt(),\n-                            (float) lightWT.getMzt(),\n-                            rL, gL, bL, 1.0f,\n-                            light.getCa(),\n-                            light.getLa(),\n-                            light.getQa(),\n-                            light.getMaxRange(),\n-                            0, 0, -1, 0, 180, 0); \/\/ simulating point light\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/NGShape3D.java","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * values changes. The peer receives its changes by {@code SpotLight.doUpdatePeer} calls.\n+ * values changes. The peer receives its changes by {@link javafx.scene.SpotLight#doUpdatePeer} calls.\n@@ -38,1 +38,1 @@\n-    private static final Point3D DEFAULT_DIRECTION = new Point3D(0, 0, -1);\n+    private static final Point3D DEFAULT_DIRECTION = new Point3D(0, 0, 1);\n@@ -42,1 +42,1 @@\n-    private static final float DEFAULT_OUTER_ANGLE = 90;\n+    private static final float DEFAULT_OUTER_ANGLE = 30;\n@@ -68,0 +68,1 @@\n+    @Override\n@@ -82,0 +83,1 @@\n+    @Override\n@@ -96,0 +98,1 @@\n+    @Override\n@@ -110,0 +113,1 @@\n+    @Override\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/NGSpotLight.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-     * @defaultValue {@code Point3D(0, 0, -1)}\n+     * @defaultValue {@code Point3D(0, 0, 1)}\n@@ -159,1 +159,1 @@\n-     * @defaultValue 90\n+     * @defaultValue 30\n@@ -186,1 +186,1 @@\n-     * values giver unexpected results.\n+     * values give unexpected results.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/SpotLight.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}