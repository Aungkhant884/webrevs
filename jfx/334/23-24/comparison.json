{"files":[{"patch":"@@ -63,0 +63,6 @@\n+\n+\/*\n+ * The methods 'computeSpotlightFactor' and 'computeSpotlightFactor2' are alternatives to the 'computeSpotlightFactor3'\n+ * method that was chosen for its better performance. They are kept for the case that a future changes will make them\n+ * more performant.\n+ *\n@@ -88,0 +94,1 @@\n+*\/\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-d3d\/hlsl\/psMath.h","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -90,0 +90,5 @@\n+\/*\n+ * The methods 'computeSpotlightFactor2' and 'computeSpotlightFactor3' are alternatives to the 'computeSpotlightFactor'\n+ * method that was chosen for its better performance. They are kept for the case that a future changes will make them\n+ * more performant.\n+ *\n@@ -112,0 +117,1 @@\n+*\/\n@@ -113,1 +119,1 @@\n-void computeLight(int i, vec3 n, vec3 refl, float specPower, out vec3 d, out vec3 s) {\n+void computeLight(int i, vec3 n, vec3 refl, float specPower, inout vec3 d, inout vec3 s) {\n","filename":"modules\/javafx.graphics\/src\/main\/resources\/com\/sun\/prism\/es2\/glsl\/main1Light.frag","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -90,0 +90,5 @@\n+\/*\n+ * The methods 'computeSpotlightFactor2' and 'computeSpotlightFactor3' are alternatives to the 'computeSpotlightFactor'\n+ * method that was chosen for its better performance. They are kept for the case that a future changes will make them\n+ * more performant.\n+ *\n@@ -112,0 +117,1 @@\n+*\/\n@@ -113,1 +119,1 @@\n-void computeLight(int i, vec3 n, vec3 refl, float specPower, out vec3 d, out vec3 s) {\n+void computeLight(int i, vec3 n, vec3 refl, float specPower, inout vec3 d, inout vec3 s) {\n","filename":"modules\/javafx.graphics\/src\/main\/resources\/com\/sun\/prism\/es2\/glsl\/main2Lights.frag","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -90,0 +90,5 @@\n+\/*\n+ * The methods 'computeSpotlightFactor2' and 'computeSpotlightFactor3' are alternatives to the 'computeSpotlightFactor'\n+ * method that was chosen for its better performance. They are kept for the case that a future changes will make them\n+ * more performant.\n+ *\n@@ -112,0 +117,1 @@\n+*\/\n@@ -113,1 +119,1 @@\n-void computeLight(int i, vec3 n, vec3 refl, float specPower, out vec3 d, out vec3 s) {\n+void computeLight(int i, vec3 n, vec3 refl, float specPower, inout vec3 d, inout vec3 s) {\n","filename":"modules\/javafx.graphics\/src\/main\/resources\/com\/sun\/prism\/es2\/glsl\/main3Lights.frag","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}