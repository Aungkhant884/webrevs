{"files":[{"patch":"@@ -114,1 +114,2 @@\n-     * The direction vector of the spotlight. The vector need not be normalized.\n+     * The direction vector of the spotlight. It can be rotated by setting a rotation transform on the\n+     * {@code SpotLight}. The vector need not be normalized.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/SpotLight.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-public class LightingTest {\n+public abstract class LightingTest {\n@@ -65,1 +65,1 @@\n-    protected static final int LIGTH_DIST = 60;\n+    protected static final int LIGHT_DIST = 60;\n@@ -79,1 +79,1 @@\n-            light.setTranslateZ(-LIGTH_DIST);\n+            light.setTranslateZ(-LIGHT_DIST);\n@@ -91,1 +91,1 @@\n-        return Math.cos(Math.atan(x\/LIGTH_DIST));\n+        return Math.cos(Math.atan(x\/LIGHT_DIST));\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/lighting3D\/LightingTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    private static final int ATTN_SAMPLE_DIST = LIGTH_DIST;\n+    private static final int ATTN_SAMPLE_DIST = LIGHT_DIST;\n@@ -65,1 +65,1 @@\n-        assertTrue(\"Timeout waiting for FX runtime to start\", startupLatch.await(5, TimeUnit.SECONDS));\n+        assertTrue(\"Timeout waiting for FX runtime to start\", startupLatch.await(15, TimeUnit.SECONDS));\n@@ -91,1 +91,1 @@\n-            double diagDist = Math.sqrt(LIGTH_DIST * LIGTH_DIST + ATTN_SAMPLE_DIST * ATTN_SAMPLE_DIST);\n+            double diagDist = Math.sqrt(LIGHT_DIST * LIGHT_DIST + ATTN_SAMPLE_DIST * ATTN_SAMPLE_DIST);\n@@ -96,10 +96,1 @@\n-            var snapshot = snapshot();\n-\n-            double attn = calculateAttenuationFactor(LIGTH_DIST);\n-            double sampledBlue = snapshot.getPixelReader().getColor(0, 0).getBlue();\n-            assertEquals(FAIL_MESSAGE, lambertCenter * attn, sampledBlue, DELTA);\n-\n-            attn = calculateAttenuationFactor(diagDist);\n-            sampledBlue = snapshot.getPixelReader().getColor(ATTN_SAMPLE_DIST, 0).getBlue();\n-            assertEquals(FAIL_MESSAGE, lambertSample * attn, sampledBlue, DELTA);\n-\n+            doAttenuationTest(diagDist, lambertCenter, lambertSample);\n@@ -109,1 +100,3 @@\n-            snapshot = snapshot();\n+            doAttenuationTest(diagDist, lambertCenter, lambertSample);\n+        });\n+    }\n@@ -111,3 +104,2 @@\n-            attn = calculateAttenuationFactor(LIGTH_DIST);\n-            sampledBlue = snapshot.getPixelReader().getColor(0, 0).getBlue();\n-            assertEquals(FAIL_MESSAGE, lambertCenter * attn, sampledBlue, DELTA);\n+    private void doAttenuationTest(double diagDist, double lambertCenter, double lambertSample) {\n+        var snapshot = snapshot();\n@@ -115,4 +107,7 @@\n-            attn = calculateAttenuationFactor(diagDist);\n-            sampledBlue = snapshot.getPixelReader().getColor(ATTN_SAMPLE_DIST, 0).getBlue();\n-            assertEquals(FAIL_MESSAGE, lambertSample * attn, sampledBlue, DELTA);\n-        });\n+        var attn = calculateAttenuationFactor(LIGHT_DIST);\n+        var sampledBlue = snapshot.getPixelReader().getColor(0, 0).getBlue();\n+        assertEquals(FAIL_MESSAGE, lambertCenter * attn, sampledBlue, DELTA);\n+\n+        attn = calculateAttenuationFactor(diagDist);\n+        sampledBlue = snapshot.getPixelReader().getColor(ATTN_SAMPLE_DIST, 0).getBlue();\n+        assertEquals(FAIL_MESSAGE, lambertSample * attn, sampledBlue, DELTA);\n@@ -124,2 +119,2 @@\n-            double diagDist = Math.sqrt(LIGTH_DIST * LIGTH_DIST + ATTN_SAMPLE_DIST * ATTN_SAMPLE_DIST);\n-            LIGHT.setMaxRange((LIGTH_DIST + diagDist) \/ 2);\n+            double diagDist = Math.sqrt(LIGHT_DIST * LIGHT_DIST + ATTN_SAMPLE_DIST * ATTN_SAMPLE_DIST);\n+            LIGHT.setMaxRange((LIGHT_DIST + diagDist) \/ 2);\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/lighting3D\/PointLightAttenuationTest.java","additions":18,"deletions":23,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    private static final double[] FALLOFF_FACTORS = new double[] {0.5, 1, 1};\n+    private static final double[] FALLOFF_FACTORS = new double[] {0.5, 1, 1.5};\n@@ -68,1 +68,1 @@\n-        assertTrue(\"Timeout waiting for FX runtime to start\", startupLatch.await(5, TimeUnit.SECONDS));\n+        assertTrue(\"Timeout waiting for FX runtime to start\", startupLatch.await(15, TimeUnit.SECONDS));\n@@ -115,1 +115,1 @@\n-        return (int) (LIGTH_DIST * Math.tan(Math.toRadians(degrees)));\n+        return (int) (LIGHT_DIST * Math.tan(Math.toRadians(degrees)));\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/lighting3D\/SpotLightAttenuationTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}