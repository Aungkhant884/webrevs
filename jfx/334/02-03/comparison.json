{"files":[{"patch":"@@ -45,1 +45,1 @@\n-    outerAngle(90),\n+    outerAngle(0),\n@@ -49,0 +49,4 @@\n+bool D3DLight::isPointLight() {\n+    return falloff == 0 && outerAngle == 180;\n+}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-d3d\/D3DLight.cc","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+    bool isPointLight();\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-d3d\/D3DLight.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -154,1 +154,6 @@\n-        if (lights[i].falloff != 0) {\n+        if (lights[i].isPointLight()) {\n+            lighsNormDirection[d++] = 0;\n+            lighsNormDirection[d++] = 0;\n+            lighsNormDirection[d++] = 1;\n+            lighsNormDirection[d++] = 0;\n+        } else {\n@@ -159,1 +164,0 @@\n-\n@@ -167,1 +171,1 @@\n-    status = SUCCEEDED(device->SetVertexShaderConstantF(VSR_DIRS, lighsNormDirection, 1));\n+    status = SUCCEEDED(device->SetVertexShaderConstantF(VSR_DIRS, lighsNormDirection, MAX_NUM_LIGHTS));\n@@ -212,2 +216,7 @@\n-        \/\/ preparing for: I = pow((cosAngle - cosOuter) \/ (cosInner - cosOuter), falloff);\n-        if (lights[i].falloff != 0) {\n+        if (lights[i].isPointLight()) {\n+            spotLightsFactors[s++] = -1; \/\/ cos(180)\n+            spotLightsFactors[s++] = 2;  \/\/ cos(0) - cos(180)\n+            spotLightsFactors[s++] = 0;\n+            spotLightsFactors[s++] = 0;\n+        } else {\n+            \/\/ preparing for: I = pow((cosAngle - cosOuter) \/ (cosInner - cosOuter), falloff)\n@@ -220,5 +229,0 @@\n-        } else {\n-            spotLightsFactors[s++] = 0;\n-            spotLightsFactors[s++] = 1;\n-            spotLightsFactors[s++] = 0;\n-            spotLightsFactors[s++] = 0;\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-d3d\/D3DMeshView.cc","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-    phong(n, nEye, sPower, lSpace.lights, lSpace.normDirs, diff, spec, 0, nSpecular);\n+    phong(n, nEye, sPower, lSpace.lights, lSpace.lightDirs, diff, spec, 0, nSpecular);\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-d3d\/hlsl\/Mtl1PS.hlsl","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,38 @@\n-void computeLight(float i, float3 n, float3 refl, float power, float3 L, float3 normDir, in out float3 d, in out float3 s) {\n+\/\/ Because pow(0, 0) is undefined (https:\/\/docs.microsoft.com\/en-us\/windows\/win32\/direct3dhlsl\/dx-graphics-hlsl-pow),\n+\/\/ we need special treatment for falloff == 0 cases\n+float computeSpotlightFactor(float3 l, float3 lightDir, float cosOuter, float denom, float falloff) {\n+    if (falloff == 0 && cosOuter == -1) { \/\/ point light optimization (cosOuter == -1 is outerAngle == 180)\n+        return 1;\n+    }\n+    float cosAngle = dot(normalize(-lightDir), l);\n+    float cutoff = cosAngle - cosOuter;\n+    if (falloff != 0) {\n+        return pow(saturate(cutoff \/ denom), falloff);\n+    }\n+    return cutoff >= 0 ? 1 : 0;\n+}\n+\n+float computeSpotlightFactor2(float3 l, float3 lightDir, float cosOuter, float denom, float falloff) {\n+    if (falloff != 0) {\n+        float cosAngle = dot(normalize(-lightDir), l);\n+        float cutoff = cosAngle - cosOuter;\n+        return pow(saturate(cutoff \/ denom), falloff);\n+    }\n+    if (cosOuter == -1) {  \/\/ point light optimization (cosOuter == -1 is outerAngle == 180)\n+        return 1;\n+    }\n+    float cosAngle = dot(normalize(-lightDir), l);\n+    float cutoff = cosAngle - cosOuter;\n+    return cutoff >= 0 ? 1 : 0;\n+}\n+\n+float computeSpotlightFactor3(float3 l, float3 lightDir, float cosOuter, float denom, float falloff) {\n+    float cosAngle = dot(normalize(-lightDir), l);\n+    float cutoff = cosAngle - cosOuter;\n+    if (falloff != 0) {\n+        return pow(saturate(cutoff \/ denom), falloff);\n+    }\n+    return cutoff >= 0 ? 1 : 0;\n+}\n+\n+void computeLight(float i, float3 n, float3 refl, float specPower, float3 L, float3 lightDir, in out float3 d, in out float3 s) {\n@@ -68,1 +105,2 @@\n-    float spotlightFactor = 1;\n+    float cosOuter = gSpotLightFactors[i].x;\n+    float denom = gSpotLightFactors[i].y;\n@@ -70,7 +108,1 @@\n-    if (falloff != 0) {  \/\/ possible optimization\n-        float cosAngle = dot(normDir, l);\n-        float cosOuter = gSpotLightFactors[i].x;\n-        float denom = gSpotLightFactors[i].y; \/\/ cosInner - cosOuter\n-        float base = (cosAngle - cosOuter) \/ denom;\n-        spotlightFactor = pow(saturate(base), falloff);\n-    }\n+    float spotlightFactor = computeSpotlightFactor3(l, lightDir, cosOuter, denom, falloff);\n@@ -85,1 +117,1 @@\n-    s += pow(saturate(dot(-refl, l)), power) * attenuatedColor;\n+    s += pow(saturate(dot(-refl, l)), specPower) * attenuatedColor;\n@@ -88,1 +120,1 @@\n-void phong(float3 n, float3 e, float power, in float4 L[LocalBump::nLights], in float4 normDirs[LocalBump::nLights],\n+void phong(float3 n, float3 e, float specPower, in float4 L[LocalBump::nLights], in float4 lightDirs[LocalBump::nLights],\n@@ -92,1 +124,1 @@\n-        computeLight(i, n, refl, power, L[i].xyz, normDirs[i].xyz, d, s);\n+        computeLight(i, n, refl, specPower, L[i].xyz, lightDirs[i].xyz, d, s);\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-d3d\/hlsl\/psMath.h","additions":44,"deletions":12,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    float4 normDirs[nLights] : texcoord7; \/\/ 7, 8, 9 [10]\n+    float4 lightDirs[nLights] : texcoord7; \/\/ 7, 8, 9 [10]\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-d3d\/hlsl\/vs2ps.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-        float3 D = gLightsNormDir[k].xyz - pos;\n+        float3 D = gLightsNormDir[k].xyz;\n@@ -79,1 +79,1 @@\n-        r.lBump.normDirs[k] = float4(getLocalVector(D, n), 1);\n+        r.lBump.lightDirs[k] = float4(getLocalVector(D, n), 1);\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-d3d\/hlsl\/vsMath.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}