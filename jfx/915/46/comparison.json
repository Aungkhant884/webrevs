{"files":[{"patch":"@@ -190,12 +190,0 @@\n-\n-        if ((w <= 0) && (cw > 0) || (h <= 0) && (ch > 0)) {\n-            final int[] extarr = new int[4];\n-            getFrameExtents(ptr, extarr);\n-\n-            \/\/ TODO: ((w <= 0) && (cw <= 0)) || ((h <= 0) && (ch <= 0))\n-            notifyResize(WindowEvent.RESIZE,\n-                         ((w <= 0) && (cw > 0)) ? cw + extarr[0] + extarr[1]\n-                                                : w,\n-                         ((h <= 0) && (ch > 0)) ? ch + extarr[2] + extarr[3]\n-                                                : h);\n-        }\n@@ -204,2 +192,0 @@\n-    private native void getFrameExtents(long ptr, int[] extarr);\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkWindow.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -431,1 +431,1 @@\n-    ctx->restack(true);\n+    ctx->to_front();\n@@ -446,2 +446,1 @@\n-    ctx->restack(false);\n-\n+    ctx->to_back();\n@@ -551,18 +550,0 @@\n-\/*\n- * Class:     com_sun_glass_ui_gtk_GtkWindow\n- * Method:    getFrameExtents\n- * Signature: (J[I)V\n- *\/\n-JNIEXPORT void JNICALL Java_com_sun_glass_ui_gtk_GtkWindow_getFrameExtents\n-    (JNIEnv * env, jobject obj, jlong ptr, jintArray extarr)\n-{\n-    (void)obj;\n-\n-    WindowContext* ctx = JLONG_TO_WINDOW_CTX(ptr);\n-    WindowFrameExtents extents = ctx->get_frame_extents();\n-\n-    env->SetIntArrayRegion(extarr, 0, 1, &extents.left);\n-    env->SetIntArrayRegion(extarr, 1, 1, &extents.right);\n-    env->SetIntArrayRegion(extarr, 2, 1, &extents.top);\n-    env->SetIntArrayRegion(extarr, 3, 1, &extents.bottom);\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassWindow.cpp","additions":2,"deletions":21,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -104,2 +104,1 @@\n-    if (event->changed_mask &\n-            (GDK_WINDOW_STATE_ICONIFIED | GDK_WINDOW_STATE_MAXIMIZED)) {\n+    if (event->changed_mask & (GDK_WINDOW_STATE_ICONIFIED | GDK_WINDOW_STATE_MAXIMIZED)) {\n@@ -110,0 +109,1 @@\n+\n@@ -131,1 +131,1 @@\n-        notify_on_top( event->new_window_state & GDK_WINDOW_STATE_ABOVE);\n+        notify_on_top(event->new_window_state & GDK_WINDOW_STATE_ABOVE);\n@@ -515,5 +515,3 @@\n-void WindowContextBase::paint(void* data, jint width, jint height)\n-{\n-    if (!is_visible()) {\n-        return;\n-    }\n+void WindowContextBase::paint(void* data, jint width, jint height) {\n+    fprintf(stderr, \"paint -> %d, %d\\n\", width, height);\n+    fflush(stderr);\n@@ -565,9 +563,0 @@\n-void WindowContextBase::reparent_children(WindowContext* parent) {\n-    std::set<WindowContextTop*>::iterator it;\n-    for (it = children.begin(); it != children.end(); ++it) {\n-        (*it)->set_owner(parent);\n-        parent->add_child(*it);\n-    }\n-    children.clear();\n-}\n-\n@@ -576,1 +565,1 @@\n-        gtk_widget_show_all(gtk_widget);\n+        gtk_widget_show(gtk_widget);\n@@ -599,1 +588,0 @@\n-\n@@ -703,2 +691,0 @@\n-WindowFrameExtents WindowContextTop::normal_extents = {28, 1, 1, 1};\n-WindowFrameExtents WindowContextTop::utility_extents = {28, 1, 1, 1};\n@@ -707,0 +693,43 @@\n+\/\/ Work-around because frame extents are only obtained after window is shown.\n+\/\/ This is used to know the total window size (content + decoration)\n+\/\/ The first window will have a duplicated resize event, subsequent windows will use the cached value.\n+WindowFrameExtents WindowContextTop::normal_extents = {0, 0, 0, 0};\n+WindowFrameExtents WindowContextTop::utility_extents = {0, 0, 0, 0};\n+\n+static int geometry_get_window_width(const WindowGeometry *windowGeometry) {\n+     return (windowGeometry->final_width.type == BOUNDSTYPE_WINDOW)\n+                   ? windowGeometry->final_width.value\n+                   : windowGeometry->final_width.value\n+                         + windowGeometry->extents.left\n+                         + windowGeometry->extents.right;\n+}\n+\n+static int geometry_get_window_height(const WindowGeometry *windowGeometry) {\n+    return (windowGeometry->final_height.type == BOUNDSTYPE_WINDOW)\n+                   ? windowGeometry->final_height.value\n+                   : windowGeometry->final_height.value\n+                         + windowGeometry->extents.top\n+                         + windowGeometry->extents.bottom;\n+}\n+\n+static int geometry_get_content_width(WindowGeometry *windowGeometry) {\n+    return (windowGeometry->final_width.type == BOUNDSTYPE_CONTENT)\n+                   ? windowGeometry->final_width.value\n+                   : windowGeometry->final_width.value\n+                         - windowGeometry->extents.left\n+                         - windowGeometry->extents.right;\n+}\n+\n+static int geometry_get_content_height(WindowGeometry *windowGeometry) {\n+    return (windowGeometry->final_height.type == BOUNDSTYPE_CONTENT)\n+                   ? windowGeometry->final_height.value\n+                   : windowGeometry->final_height.value\n+                         - windowGeometry->extents.top\n+                         - windowGeometry->extents.bottom;\n+}\n+\n+static GdkAtom get_net_frame_extents_atom() {\n+    static const char * extents_str = \"_NET_FRAME_EXTENTS\";\n+    return gdk_atom_intern(extents_str, TRUE);\n+}\n+\n@@ -716,1 +745,0 @@\n-            frame_extents_initialized(),\n@@ -718,2 +746,0 @@\n-            location_assigned(false),\n-            size_assigned(false),\n@@ -721,2 +747,2 @@\n-            requested_bounds()\n-{\n+            is_fullscreen(false),\n+            frame_extents_received(false) {\n@@ -725,1 +751,1 @@\n-    gtk_widget =  gtk_window_new(type == POPUP ? GTK_WINDOW_POPUP : GTK_WINDOW_TOPLEVEL);\n+    gtk_widget = gtk_window_new(type == POPUP ? GTK_WINDOW_POPUP : GTK_WINDOW_TOPLEVEL);\n@@ -743,0 +769,3 @@\n+    const char* wm_name = gdk_x11_screen_get_window_manager_name(gdk_screen_get_default());\n+    wmanager = (g_strcmp0(\"Compiz\", wm_name) == 0) ? COMPIZ : UNKNOWN;\n+\n@@ -752,1 +781,0 @@\n-    gtk_widget_set_size_request(gtk_widget, 0, 0);\n@@ -755,4 +783,0 @@\n-    if (frame_type != TITLED) {\n-        gtk_window_set_decorated(GTK_WINDOW(gtk_widget), FALSE);\n-    }\n-\n@@ -760,1 +784,0 @@\n-    gtk_window_set_title(GTK_WINDOW(gtk_widget), \"\");\n@@ -762,0 +785,1 @@\n+    gtk_window_set_title(GTK_WINDOW(gtk_widget), \"\");\n@@ -774,1 +798,3 @@\n-    if (frame_type == TITLED) {\n+    if (frame_type != TITLED) {\n+        gtk_window_set_decorated(GTK_WINDOW(gtk_widget), FALSE);\n+    } else {\n@@ -776,0 +802,1 @@\n+        geometry.extents = get_cached_extents();\n@@ -777,2 +804,0 @@\n-\n-    event_serial = GDK_CURRENT_TIME;\n@@ -793,8 +818,1 @@\n-static GdkAtom\n-get_net_frame_extents_atom() {\n-    static const char * extents_str = \"_NET_FRAME_EXTENTS\";\n-    return gdk_atom_intern(extents_str, TRUE);\n-}\n-\n-void\n-WindowContextTop::request_frame_extents() {\n+void WindowContextTop::request_frame_extents() {\n@@ -802,1 +820,2 @@\n-    Atom rfeAtom = XInternAtom(display, \"_NET_REQUEST_FRAME_EXTENTS\", True);\n+    static Atom rfeAtom = XInternAtom(display, \"_NET_REQUEST_FRAME_EXTENTS\", True);\n+\n@@ -819,6 +838,2 @@\n-void WindowContextTop::activate_window() {\n-    Display *display = GDK_DISPLAY_XDISPLAY (gdk_window_get_display (gdk_window));\n-    Atom navAtom = XInternAtom(display, \"_NET_ACTIVE_WINDOW\", True);\n-    if (navAtom != None) {\n-        XClientMessageEvent clientMessage;\n-        memset(&clientMessage, 0, sizeof(clientMessage));\n+void WindowContextTop::update_frame_extents() {\n+    int top, left, bottom, right;\n@@ -826,7 +841,7 @@\n-        clientMessage.type = ClientMessage;\n-        clientMessage.window = GDK_WINDOW_XID(gdk_window);\n-        clientMessage.message_type = navAtom;\n-        clientMessage.format = 32;\n-        clientMessage.data.l[0] = 1;\n-        clientMessage.data.l[1] = gdk_x11_get_server_time(gdk_window);\n-        clientMessage.data.l[2] = 0;\n+    if (get_frame_extents_property(&top, &left, &bottom, &right)) {\n+        if ((top + right + bottom + left) != 0) {\n+            frame_extents_received = true;\n+            bool changed = geometry.extents.top != top\n+                            || geometry.extents.left != left\n+                            || geometry.extents.bottom != bottom\n+                            || geometry.extents.right != right;\n@@ -834,4 +849,20 @@\n-        XSendEvent(display, XDefaultRootWindow(display), False,\n-                   SubstructureRedirectMask | SubstructureNotifyMask,\n-                   (XEvent *) &clientMessage);\n-        XFlush(display);\n+\n+            if (changed) {\n+                geometry.extents.top = top;\n+                geometry.extents.left = left;\n+                geometry.extents.bottom = bottom;\n+                geometry.extents.right = right;\n+\n+                set_cached_extents(geometry.extents);\n+\n+                \/\/ correct position using gravity\n+                if (geometry.x || geometry.y) {\n+                    geometry.x -= geometry.gravity_x * (left + right);\n+                    geometry.y -= geometry.gravity_y * (top + bottom);\n+                    gtk_window_move(GTK_WINDOW(gtk_widget), geometry.x, geometry.y);\n+                }\n+\n+                update_window_constraints();\n+                ensure_window_size();\n+            }\n+        }\n@@ -841,0 +872,19 @@\n+void WindowContextTop::ensure_window_size() {\n+    \/\/ set bounds again to set to correct window size that must\n+    \/\/ be the total width and height accounting extents\n+    int w = geometry_get_window_width(&geometry);\n+    int h = geometry_get_window_height(&geometry);\n+    int cw = geometry_get_content_width(&geometry);\n+    int ch = geometry_get_content_height(&geometry);\n+\n+    set_bounds(-1, -1, false, false, w, h, cw, ch);\n+\n+    \/\/ set_bounds will only notify for content size - this is needed in case\n+    \/\/ of window oriented size\n+    notify_window_resize();\n+\n+    \/\/ Window didn't actually move, but view X, Y might change or\n+    \/\/ may have gravity envolved\n+    notify_window_move();\n+}\n+\n@@ -853,24 +903,1 @@\n-\n-bool WindowContextTop::update_frame_extents() {\n-    bool changed = false;\n-    int top, left, bottom, right;\n-    if (get_frame_extents_property(&top, &left, &bottom, &right)) {\n-        changed = geometry.extents.top != top\n-                    || geometry.extents.left != left\n-                    || geometry.extents.bottom != bottom\n-                    || geometry.extents.right != right;\n-        if (changed) {\n-            geometry.extents.top = top;\n-            geometry.extents.left = left;\n-            geometry.extents.bottom = bottom;\n-            geometry.extents.right = right;\n-            if (!is_null_extents()) {\n-                set_cached_extents(geometry.extents);\n-            }\n-        }\n-    }\n-    return changed;\n-}\n-\n-bool\n-WindowContextTop::get_frame_extents_property(int *top, int *left,\n+bool WindowContextTop::get_frame_extents_property(int *top, int *left,\n@@ -902,68 +929,1 @@\n-static int geometry_get_window_width(const WindowGeometry *windowGeometry) {\n-     return (windowGeometry->final_width.type != BOUNDSTYPE_WINDOW)\n-                   ? windowGeometry->final_width.value\n-                         + windowGeometry->extents.left\n-                         + windowGeometry->extents.right\n-                   : windowGeometry->final_width.value;\n-}\n-\n-static int geometry_get_window_height(const WindowGeometry *windowGeometry) {\n-    return (windowGeometry->final_height.type != BOUNDSTYPE_WINDOW)\n-                   ? windowGeometry->final_height.value\n-                         + windowGeometry->extents.top\n-                         + windowGeometry->extents.bottom\n-                   : windowGeometry->final_height.value;\n-}\n-\n-static int geometry_get_content_width(WindowGeometry *windowGeometry) {\n-    return (windowGeometry->final_width.type != BOUNDSTYPE_CONTENT)\n-                   ? windowGeometry->final_width.value\n-                         - windowGeometry->extents.left\n-                         - windowGeometry->extents.right\n-                   : windowGeometry->final_width.value;\n-}\n-static int geometry_get_content_height(WindowGeometry *windowGeometry) {\n-    return (windowGeometry->final_height.type != BOUNDSTYPE_CONTENT)\n-                   ? windowGeometry->final_height.value\n-                         - windowGeometry->extents.top\n-                         - windowGeometry->extents.bottom\n-                   : windowGeometry->final_height.value;\n-}\n-\n-static int geometry_get_window_x(const WindowGeometry *windowGeometry) {\n-    float value = windowGeometry->refx;\n-    if (windowGeometry->gravity_x != 0) {\n-        value -= geometry_get_window_width(windowGeometry)\n-                     * windowGeometry->gravity_x;\n-    }\n-    return (int) value;\n-}\n-\n-static int geometry_get_window_y(const WindowGeometry *windowGeometry) {\n-    float value = windowGeometry->refy;\n-    if (windowGeometry->gravity_y != 0) {\n-        value -= geometry_get_window_height(windowGeometry)\n-                     * windowGeometry->gravity_y;\n-    }\n-    return (int) value;\n-}\n-\n-static void geometry_set_window_x(WindowGeometry *windowGeometry, int value) {\n-    float newValue = value;\n-    if (windowGeometry->gravity_x != 0) {\n-        newValue += geometry_get_window_width(windowGeometry)\n-                * windowGeometry->gravity_x;\n-    }\n-    windowGeometry->refx = newValue;\n-}\n-\n-static void geometry_set_window_y(WindowGeometry *windowGeometry, int value) {\n-    float newValue = value;\n-    if (windowGeometry->gravity_y != 0) {\n-        newValue += geometry_get_window_height(windowGeometry)\n-                * windowGeometry->gravity_y;\n-    }\n-    windowGeometry->refy = newValue;\n-}\n-\n-void WindowContextTop::process_net_wm_property() {\n+void WindowContextTop::work_around_compiz_state() {\n@@ -971,0 +931,3 @@\n+    if (wmanager != COMPIZ) {\n+        return;\n+    }\n@@ -1011,2 +974,6 @@\n-    if (event->atom == atom_net_wm_state && event->window == gdk_window) {\n-        process_net_wm_property();\n+    if (event->window == gdk_window) {\n+        if (event->atom == get_net_frame_extents_atom()) {\n+            update_frame_extents();\n+        } else if (event->atom == atom_net_wm_state) {\n+            work_around_compiz_state();\n+        }\n@@ -1016,6 +983,4 @@\n-void WindowContextTop::process_configure(GdkEventConfigure* event) {\n-    gint x, y, w, h;\n-    bool updateWindowConstraints = false;\n-    if (gtk_window_get_decorated(GTK_WINDOW(gtk_widget))) {\n-        GdkRectangle frame;\n-        gint top, left, bottom, right;\n+void WindowContextTop::process_state(GdkEventWindowState* event) {\n+    if (!map_received) {\n+        return;\n+    }\n@@ -1023,26 +988,2 @@\n-        gdk_window_get_frame_extents(gdk_window, &frame);\n-#ifdef GLASS_GTK3\n-        gdk_window_get_geometry(gdk_window, NULL, NULL, &w, &h);\n-#else\n-        gdk_window_get_geometry(gdk_window, NULL, NULL, &w, &h, NULL);\n-#endif\n-        x = frame.x;\n-        y = frame.y;\n-        geometry.current_width = frame.width;\n-        geometry.current_height = frame.height;\n-\n-        if (update_frame_extents()) {\n-            updateWindowConstraints = true;\n-            if (!frame_extents_initialized && !is_null_extents()) {\n-                frame_extents_initialized = true;\n-                set_bounds(0, 0, false, false,\n-                    requested_bounds.width, requested_bounds.height,\n-                    requested_bounds.client_width, requested_bounds.client_height\n-                );\n-            }\n-        }\n-    } else {\n-        x = event->x;\n-        y = event->y;\n-        w = event->width;\n-        h = event->height;\n+    if (event->changed_mask & GDK_WINDOW_STATE_FULLSCREEN) {\n+        is_fullscreen = event->new_window_state & GDK_WINDOW_STATE_FULLSCREEN;\n@@ -1051,3 +992,7 @@\n-    if (size_assigned && w <= 1 && h <= 1 && (geometry.final_width.value > 1 ||\n-                                             geometry.final_height.value > 1)) {\n-        \/\/ skip artifact\n+    WindowContextBase::process_state(event);\n+}\n+\n+void WindowContextTop::process_configure(GdkEventConfigure* event) {\n+    \/\/ This will prevent sending window sizes before java is done configuring the window\n+    \/\/ Without it, some content size oriented window gets the size before finishing the layout\n+    if (!map_received && !is_fullscreen && !is_maximized) {\n@@ -1055,1 +1000,1 @@\n-   }\n+    }\n@@ -1057,3 +1002,5 @@\n-    \/\/ JDK-8232811: to avoid conflicting events, update the geometry only after window pops.\n-    if (map_received) {\n-        geometry.final_width.value = w;\n+    int x, y;\n+    gdk_window_get_position(gdk_window, &x, &y);\n+\n+    if (!is_maximized && !is_fullscreen) {\n+        geometry.final_width.value = event->width;\n@@ -1061,1 +1008,1 @@\n-        geometry.final_height.value = h;\n+        geometry.final_height.value = event->height;\n@@ -1065,2 +1012,4 @@\n-    geometry_set_window_x(&geometry, x);\n-    geometry_set_window_y(&geometry, y);\n+    \/\/ Do not report if iconified, because Java side would set the state to NORMAL\n+    if (jwindow && !is_iconified) {\n+        int ww = event->width + geometry.extents.left + geometry.extents.right;\n+        int wh = event->height + geometry.extents.top + geometry.extents.bottom;\n@@ -1068,10 +1017,0 @@\n-    if (jview) {\n-        mainEnv->CallVoidMethod(jview, jViewNotifyResize,\n-                event->width,\n-                event->height);\n-        CHECK_JNI_EXCEPTION(mainEnv)\n-        mainEnv->CallVoidMethod(jview, jViewNotifyView,\n-                com_sun_glass_events_ViewEvent_MOVE);\n-        CHECK_JNI_EXCEPTION(mainEnv)\n-    }\n-    if (jwindow) {\n@@ -1082,2 +1021,1 @@\n-                geometry.current_width,\n-                geometry.current_height);\n+                ww, wh);\n@@ -1086,2 +1024,13 @@\n-        mainEnv->CallVoidMethod(jwindow, jWindowNotifyMove, x, y);\n-        CHECK_JNI_EXCEPTION(mainEnv)\n+        if (jview) {\n+            mainEnv->CallVoidMethod(jview, jViewNotifyResize, event->width, event->height);\n+            CHECK_JNI_EXCEPTION(mainEnv)\n+        }\n+    }\n+\n+    bool moved = (geometry.x != x || geometry.y != y);\n+\n+    if (moved) {\n+        geometry.x = x;\n+        geometry.y = y;\n+\n+        notify_window_move();\n@@ -1102,9 +1051,0 @@\n-\n-    if (resizable.request != REQUEST_NONE) {\n-        set_window_resizable(resizable.request == REQUEST_RESIZABLE);\n-        resizable.request = REQUEST_NONE;\n-    } else if (!resizable.value) {\n-        set_window_resizable(false);\n-    } else if (updateWindowConstraints) {\n-        update_window_constraints();\n-    }\n@@ -1114,19 +1054,17 @@\n-    if (resizable.value) {\n-        GdkGeometry geom = {\n-            (resizable.minw == -1) ? 1\n-                    : resizable.minw - geometry.extents.left - geometry.extents.right,\n-            (resizable.minh == -1) ? 1\n-                    : resizable.minh - geometry.extents.top - geometry.extents.bottom,\n-            (resizable.maxw == -1) ? 100000\n-                    : resizable.maxw - geometry.extents.left - geometry.extents.right,\n-            (resizable.maxh == -1) ? 100000\n-                    : resizable.maxh - geometry.extents.top - geometry.extents.bottom,\n-            0, 0, 0, 0, 0.0, 0.0, GDK_GRAVITY_NORTH_WEST\n-        };\n-        gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &geom,\n-                static_cast<GdkWindowHints> (GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE));\n-    }\n-}\n-\n-void WindowContextTop::set_window_resizable(bool res) {\n-    if(!res) {\n+    GdkGeometry hints;\n+\n+    if (resizable.value && !is_disabled) {\n+        int min_w = (resizable.minw == -1) ? 1\n+                      : resizable.minw - geometry.extents.left - geometry.extents.right;\n+        int min_h =  (resizable.minh == -1) ? 1\n+                      : resizable.minh - geometry.extents.top - geometry.extents.bottom;\n+\n+        hints.min_width = (min_w < 1) ? 1 : min_w;\n+        hints.min_height = (min_h < 1) ? 1 : min_h;\n+\n+        hints.max_width = (resizable.maxw == -1) ? G_MAXINT\n+                            : resizable.maxw - geometry.extents.left - geometry.extents.right;\n+\n+        hints.max_height = (resizable.maxh == -1) ? G_MAXINT\n+                           : resizable.maxh - geometry.extents.top - geometry.extents.bottom;\n+    } else {\n@@ -1135,10 +1073,5 @@\n-        if (w == -1 && h == -1) {\n-            gtk_window_get_size(GTK_WINDOW(gtk_widget), &w, &h);\n-        }\n-        GdkGeometry geom = {w, h, w, h, 0, 0, 0, 0, 0.0, 0.0, GDK_GRAVITY_NORTH_WEST};\n-        gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &geom,\n-                static_cast<GdkWindowHints>(GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE));\n-        resizable.value = false;\n-    } else {\n-        resizable.value = true;\n-        update_window_constraints();\n+\n+        hints.min_width = w;\n+        hints.min_height = h;\n+        hints.max_width = w;\n+        hints.max_height = h;\n@@ -1146,0 +1079,3 @@\n+\n+    gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &hints,\n+                                  (GdkWindowHints)(GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE));\n@@ -1149,9 +1085,2 @@\n-    resizable.prev = false;\n-    gint w, h;\n-    gtk_window_get_size(GTK_WINDOW(gtk_widget), &w, &h);\n-    if (map_received || w > 1 || h > 1) {\n-        set_window_resizable(res);\n-    } else {\n-        \/\/Since window is not ready yet set only request for change of resizable.\n-        resizable.request  = res ? REQUEST_RESIZABLE : REQUEST_NOT_RESIZABLE;\n-    }\n+    resizable.value = res;\n+    update_window_constraints();\n@@ -1160,10 +1089,1 @@\n-void WindowContextTop::set_visible(bool visible)\n-{\n-    if (visible) {\n-        if (!size_assigned) {\n-            set_bounds(0, 0, false, false, 320, 200, -1, -1);\n-        }\n-        if (!location_assigned) {\n-            set_bounds(0, 0, true, true, -1, -1, -1, -1);\n-        }\n-    }\n+void WindowContextTop::set_visible(bool visible) {\n@@ -1171,4 +1091,3 @@\n-    \/\/JDK-8220272 - fire event first because GDK_FOCUS_CHANGE is not always in order\n-    if (visible && jwindow && isEnabled()) {\n-        mainEnv->CallVoidMethod(jwindow, jWindowNotifyFocus, com_sun_glass_events_WindowEvent_FOCUS_GAINED);\n-        CHECK_JNI_EXCEPTION(mainEnv);\n+\n+    if (visible && !geometry.size_assigned) {\n+        set_bounds(0, 0, false, false, 320, 200, -1, -1);\n@@ -1179,15 +1098,6 @@\n-    requested_bounds.width = w;\n-    requested_bounds.height = h;\n-    requested_bounds.client_width = cw;\n-    requested_bounds.client_height = ch;\n-\n-    if (!frame_extents_initialized && frame_type == TITLED) {\n-        update_frame_extents();\n-        if (is_null_extents()) {\n-            if (!is_null_extents(get_cached_extents())) {\n-                geometry.extents = get_cached_extents();\n-            }\n-        } else {\n-            frame_extents_initialized = true;\n-        }\n-    }\n+    fprintf(stderr, \"set_bounds -> x = %d, y = %d, w = %d, h = %d, cw = %d, ch = %d\\n\", x, y, w, h, cw, ch);\n+    fflush(stderr);\n+\n+    \/\/ newW \/ newH are view\/content sizes\n+    int newW = 0;\n+    int newH = 0;\n@@ -1195,2 +1105,0 @@\n-    XWindowChanges windowChanges;\n-    unsigned int windowChangesMask = 0;\n@@ -1198,1 +1106,0 @@\n-        geometry.final_width.value = w;\n@@ -1200,3 +1107,2 @@\n-        geometry.current_width = geometry_get_window_width(&geometry);\n-        windowChanges.width = geometry_get_content_width(&geometry);\n-        windowChangesMask |= CWWidth;\n+        geometry.final_width.value = w;\n+        newW = w - (geometry.extents.left + geometry.extents.right);\n@@ -1204,1 +1110,0 @@\n-        geometry.final_width.value = cw;\n@@ -1206,3 +1111,2 @@\n-        geometry.current_width = geometry_get_window_width(&geometry);\n-        windowChanges.width = geometry_get_content_width(&geometry);\n-        windowChangesMask |= CWWidth;\n+        geometry.final_width.value = cw;\n+        newW = cw;\n@@ -1212,1 +1116,0 @@\n-        geometry.final_height.value = h;\n@@ -1214,3 +1117,2 @@\n-        geometry.current_height = geometry_get_window_height(&geometry);\n-        windowChanges.height = geometry_get_content_height(&geometry);\n-        windowChangesMask |= CWHeight;\n+        geometry.final_height.value = h;\n+        newH = h - (geometry.extents.top + geometry.extents.bottom);\n@@ -1218,1 +1120,0 @@\n-        geometry.final_height.value = ch;\n@@ -1220,3 +1121,15 @@\n-        geometry.current_height = geometry_get_window_height(&geometry);\n-        windowChanges.height = geometry_get_content_height(&geometry);\n-        windowChangesMask |= CWHeight;\n+        geometry.final_height.value = ch;\n+        newH = ch;\n+    }\n+\n+    if (newW > 0 || newH > 0) {\n+        if (gtk_widget_get_visible(gtk_widget)) {\n+            \/\/ call update_window_constraints() to let gtk_window_resize succeed, because it's bound to geometry constraints\n+            update_window_constraints();\n+            gtk_window_resize(GTK_WINDOW(gtk_widget), newW, newH);\n+        } else {\n+            gtk_window_set_default_size(GTK_WINDOW(gtk_widget), newW, newH);\n+        }\n+\n+        geometry.size_assigned = true;\n+        notify_window_resize();\n@@ -1227,1 +1140,1 @@\n-            geometry.refx = x + geometry.current_width * geometry.gravity_x;\n+            geometry.x = x;\n@@ -1230,3 +1143,0 @@\n-        windowChanges.x = geometry_get_window_x(&geometry);\n-        windowChangesMask |= CWX;\n-\n@@ -1234,1 +1144,1 @@\n-            geometry.refy = y + geometry.current_height * geometry.gravity_y;\n+            geometry.y = y;\n@@ -1237,4 +1147,2 @@\n-        windowChanges.y = geometry_get_window_y(&geometry);\n-        windowChangesMask |= CWY;\n-\n-        location_assigned = true;\n+        gtk_window_move(GTK_WINDOW(gtk_widget), geometry.x, geometry.y);\n+        notify_window_move();\n@@ -1242,5 +1150,0 @@\n-\n-    if (w > 0 || h > 0 || cw > 0 || ch > 0) size_assigned = true;\n-\n-    window_configure(&windowChanges, windowChangesMask);\n-\n@@ -1251,7 +1154,0 @@\n-}\n-\n-void WindowContextTop::window_configure(XWindowChanges *windowChanges,\n-        unsigned int windowChangesMask) {\n-    if (windowChangesMask == 0) {\n-        return;\n-    }\n@@ -1259,11 +1155,2 @@\n-    if (windowChangesMask & (CWX | CWY)) {\n-        gint newX, newY;\n-        gtk_window_get_position(GTK_WINDOW(gtk_widget), &newX, &newY);\n-\n-        if (windowChangesMask & CWX) {\n-            newX = windowChanges->x;\n-        }\n-        if (windowChangesMask & CWY) {\n-            newY = windowChanges->y;\n-        }\n-        gtk_window_move(GTK_WINDOW(gtk_widget), newX, newY);\n+    if (!is_iconified) {\n+        request_focus();\n@@ -1271,34 +1158,0 @@\n-\n-    if (windowChangesMask & (CWWidth | CWHeight)) {\n-        gint newWidth, newHeight;\n-        gtk_window_get_size(GTK_WINDOW(gtk_widget), &newWidth, &newHeight);\n-\n-        if (windowChangesMask & CWWidth) {\n-            newWidth = windowChanges->width;\n-        }\n-        if (windowChangesMask & CWHeight) {\n-            newHeight = windowChanges->height;\n-        }\n-\n-        if (!resizable.value) {\n-            GdkGeometry geom;\n-            GdkWindowHints hints = (GdkWindowHints)(GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE);\n-            geom.min_width = geom.max_width = newWidth;\n-            geom.min_height = geom.max_height = newHeight;\n-            gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &geom, hints);\n-        }\n-        gtk_window_resize(GTK_WINDOW(gtk_widget), newWidth, newHeight);\n-\n-        \/\/JDK-8193502: Moved here from WindowContextBase::set_view because set_view is called\n-        \/\/first and the size is not set yet. This also guarantees that the size will be correct\n-        \/\/see: gtk_window_get_size doc for more context.\n-        if (jview) {\n-            mainEnv->CallVoidMethod(jview, jViewNotifyResize, newWidth, newHeight);\n-            CHECK_JNI_EXCEPTION(mainEnv);\n-        }\n-    }\n-}\n-\n-void WindowContextTop::process_key(GdkEventKey* event) {\n-    WindowContextBase::process_key(event);\n-    event_serial = event->time;\n@@ -1307,7 +1160,1 @@\n-void WindowContextTop::process_mouse_button(GdkEventButton* event) {\n-    WindowContextBase::process_mouse_button(event);\n-    event_serial = event->time;\n-}\n-\n-void WindowContextTop::applyShapeMask(void* data, uint width, uint height)\n-{\n+void WindowContextTop::applyShapeMask(void* data, uint width, uint height) {\n@@ -1321,15 +1168,0 @@\n-void WindowContextTop::ensure_window_size() {\n-    gint w, h;\n-#ifdef GLASS_GTK3\n-    gdk_window_get_geometry(gdk_window, NULL, NULL, &w, &h);\n-#else\n-    gdk_window_get_geometry(gdk_window, NULL, NULL, &w, &h, NULL);\n-#endif\n-    if (size_assigned && (geometry.final_width.value != w\n-                       || geometry.final_height.value != h)) {\n-\n-        gdk_window_resize(gdk_window, geometry.final_width.value,\n-                                      geometry.final_height.value);\n-    }\n-}\n-\n@@ -1339,1 +1171,1 @@\n-        if (frame_type == TRANSPARENT) {\n+        if (frame_type == TRANSPARENT && wmanager == COMPIZ) {\n@@ -1353,1 +1185,1 @@\n-        activate_window();\n+        gdk_window_focus(gdk_window, GDK_CURRENT_TIME);\n@@ -1356,0 +1188,1 @@\n+\n@@ -1364,1 +1197,0 @@\n-        ensure_window_size();\n@@ -1372,1 +1204,0 @@\n-    ensure_window_size();\n@@ -1374,0 +1205,1 @@\n+    is_fullscreen = true;\n@@ -1381,3 +1213,0 @@\n-    \/\/JDK-8212060: Window show and then move glitch.\n-    \/\/The WindowContextBase::set_visible will take care of showing the window.\n-    \/\/The below code will only handle later request_focus.\n@@ -1385,5 +1214,1 @@\n-        \/\/ event_serial holds an event serial that will help X11 determine which window should have the focus and\n-        \/\/ prevents activeWindows on WindowStage.java to be out of order which may cause the FOCUS_DISABLED event\n-        \/\/ to bring up the wrong window (it brings up the last which will not be the real \"last\" if out of order).\n-        gtk_window_present_with_time(GTK_WINDOW(gtk_widget), event_serial);\n-        event_serial = GDK_CURRENT_TIME;\n+        gtk_window_present(GTK_WINDOW(gtk_widget));\n@@ -1398,1 +1223,1 @@\n-    gtk_window_set_title(GTK_WINDOW(gtk_widget),title);\n+    gtk_window_set_title(GTK_WINDOW(gtk_widget), title);\n@@ -1406,13 +1231,2 @@\n-    if (enabled) {\n-        if (resizable.prev) {\n-            set_window_resizable(true);\n-        }\n-    } else {\n-        if (resizable.value) {\n-            set_window_resizable(false);\n-            resizable.prev = true;\n-        } else if (resizable.request == REQUEST_RESIZABLE) {\n-            resizable.request = REQUEST_NOT_RESIZABLE;\n-            resizable.prev = true;\n-        }\n-    }\n+    is_disabled = !enabled;\n+    update_window_constraints();\n@@ -1422,2 +1236,2 @@\n-    resizable.minw = w;\n-    resizable.minh = h;\n+    resizable.minw = (w <= 0) ? 1 : w;\n+    resizable.minh = (h <= 0) ? 1 : h;\n@@ -1437,2 +1251,6 @@\n-void WindowContextTop::restack(bool restack) {\n-    gdk_window_restack(gdk_window, NULL, restack ? TRUE : FALSE);\n+void WindowContextTop::to_front() {\n+    gdk_window_raise(gdk_window);\n+}\n+\n+void WindowContextTop::to_back() {\n+    gdk_window_lower(gdk_window);\n@@ -1460,2 +1278,1 @@\n-    int oldX = geometry_get_window_x(&geometry);\n-    int oldY = geometry_get_window_y(&geometry);\n+    g_print(\"set gravity: %f, %f\\n\", x, y);\n@@ -1464,2 +1281,0 @@\n-    geometry_set_window_x(&geometry, oldX);\n-    geometry_set_window_y(&geometry, oldY);\n@@ -1532,0 +1347,37 @@\n+void WindowContextTop::notify_window_resize() {\n+    int w = geometry_get_window_width(&geometry);\n+    int h = geometry_get_window_height(&geometry);\n+\n+    mainEnv->CallVoidMethod(jwindow, jWindowNotifyResize,\n+                 com_sun_glass_events_WindowEvent_RESIZE, w, h);\n+    CHECK_JNI_EXCEPTION(mainEnv)\n+\n+    fprintf(stderr, \"notify window size -> w = %d, h = %d\\n\", w, h);\n+    fflush(stderr);\n+\n+    if (jview) {\n+        int cw = geometry_get_content_width(&geometry);\n+        int ch = geometry_get_content_height(&geometry);\n+\n+        fprintf(stderr, \"notify view size -> cw = %d, ch = %d\\n\", cw, ch);\n+        fflush(stderr);\n+\n+        mainEnv->CallVoidMethod(jview, jViewNotifyResize, cw, ch);\n+        CHECK_JNI_EXCEPTION(mainEnv)\n+    }\n+}\n+\n+void WindowContextTop::notify_window_move() {\n+    if (jwindow) {\n+        mainEnv->CallVoidMethod(jwindow, jWindowNotifyMove,\n+                                 geometry.x, geometry.y);\n+        CHECK_JNI_EXCEPTION(mainEnv)\n+\n+        if (jview) {\n+            mainEnv->CallVoidMethod(jview, jViewNotifyView,\n+                    com_sun_glass_events_ViewEvent_MOVE);\n+            CHECK_JNI_EXCEPTION(mainEnv)\n+        }\n+    }\n+}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.cpp","additions":280,"deletions":428,"binary":false,"changes":708,"status":"modified"},{"patch":"@@ -37,0 +37,5 @@\n+enum WindowManager {\n+    COMPIZ,\n+    UNKNOWN\n+};\n+\n@@ -49,6 +54,0 @@\n-enum request_type {\n-    REQUEST_NONE,\n-    REQUEST_RESIZABLE,\n-    REQUEST_NOT_RESIZABLE\n-};\n-\n@@ -71,1 +70,1 @@\n-    refx(), refy(), gravity_x(), gravity_y(), current_width(), current_height(), extents() {}\n+    size_assigned(false), x(), y(), gravity_x(), gravity_y(), extents() {}\n@@ -84,2 +83,4 @@\n-    float refx;\n-    float refy;\n+    bool size_assigned;\n+\n+    int x;\n+    int y;\n@@ -89,8 +90,0 @@\n-    \/\/ the last width which was configured or obtained from configure\n-    \/\/ notification\n-    int current_width;\n-\n-    \/\/ the last height which was configured or obtained from configure\n-    \/\/ notification\n-    int current_height;\n-\n@@ -98,1 +91,0 @@\n-\n@@ -134,1 +126,2 @@\n-    virtual void restack(bool) = 0;\n+    virtual void to_front() = 0;\n+    virtual void to_back() = 0;\n@@ -176,1 +169,1 @@\n-    struct _XIM{\n+    struct _XIM {\n@@ -195,0 +188,1 @@\n+    bool is_disabled;\n@@ -228,1 +222,0 @@\n-    void reparent_children(WindowContext* parent);\n@@ -272,4 +265,3 @@\n-    struct _Resizable{\/\/ we can't use set\/get gtk_window_resizable function\n-        _Resizable(): request(REQUEST_NONE), value(true), prev(false),\n-                minw(-1), minh(-1), maxw(-1), maxh(-1){}\n-        request_type request; \/\/request for future setResizable\n+    struct _Resizable {\/\/ we can't use set\/get gtk_window_resizable function\n+        _Resizable(): value(true),\n+                minw(-1), minh(-1), maxw(-1), maxh(-1) {}\n@@ -277,1 +269,0 @@\n-        bool prev; \/\/former resizable value (used in setEnabled for parents of modal window)\n@@ -281,1 +272,0 @@\n-    bool frame_extents_initialized;\n@@ -283,2 +273,0 @@\n-    bool location_assigned;\n-    bool size_assigned;\n@@ -286,11 +274,2 @@\n-\n-    struct _Size {\n-        int width, height;\n-        int client_width, client_height;\n-    } requested_bounds;\n-\n-    bool is_null_extents() { return is_null_extents(geometry.extents); }\n-\n-    bool is_null_extents(WindowFrameExtents ex) {\n-        return !ex.top && !ex.left && !ex.bottom && !ex.right;\n-    }\n+    bool is_fullscreen;\n+    bool frame_extents_received;\n@@ -301,2 +280,1 @@\n-    long event_serial;\n-\n+    WindowManager wmanager;\n@@ -307,0 +285,1 @@\n+    void process_state(GdkEventWindowState*);\n@@ -309,1 +288,1 @@\n-    void process_net_wm_property();\n+    void work_around_compiz_state();\n@@ -325,1 +304,2 @@\n-    void restack(bool);\n+    void to_front();\n+    void to_back();\n@@ -339,2 +319,0 @@\n-    void process_key(GdkEventKey*);\n-    void process_mouse_button(GdkEventButton*);\n@@ -344,1 +322,0 @@\n-    bool get_frame_extents_property(int *, int *, int *, int *);\n@@ -346,2 +323,1 @@\n-    void activate_window();\n-    bool update_frame_extents();\n+    void update_frame_extents();\n@@ -350,1 +326,1 @@\n-    void window_configure(XWindowChanges *, unsigned int);\n+    bool get_frame_extents_property(int *, int *, int *, int *);\n@@ -352,1 +328,0 @@\n-    void set_window_resizable(bool);\n@@ -356,0 +331,2 @@\n+    void notify_window_move();\n+    void notify_window_resize();\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.h","additions":28,"deletions":51,"binary":false,"changes":79,"status":"modified"}]}