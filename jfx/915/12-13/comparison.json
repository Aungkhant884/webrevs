{"files":[{"patch":"@@ -713,0 +713,73 @@\n+static int geometry_get_window_width(const WindowGeometry *windowGeometry) {\n+     return (windowGeometry->final_width.type != BOUNDSTYPE_WINDOW)\n+                   ? windowGeometry->final_width.value\n+                         + windowGeometry->extents.left\n+                         + windowGeometry->extents.right\n+                   : windowGeometry->final_width.value;\n+}\n+\n+static int geometry_get_window_height(const WindowGeometry *windowGeometry) {\n+    return (windowGeometry->final_height.type != BOUNDSTYPE_WINDOW)\n+                   ? windowGeometry->final_height.value\n+                         + windowGeometry->extents.top\n+                         + windowGeometry->extents.bottom\n+                   : windowGeometry->final_height.value;\n+}\n+\n+static int geometry_get_content_width(WindowGeometry *windowGeometry) {\n+    return (windowGeometry->final_width.type != BOUNDSTYPE_CONTENT)\n+                   ? windowGeometry->final_width.value\n+                         - windowGeometry->extents.left\n+                         - windowGeometry->extents.right\n+                   : windowGeometry->final_width.value;\n+}\n+\n+static int geometry_get_content_height(WindowGeometry *windowGeometry) {\n+    return (windowGeometry->final_height.type != BOUNDSTYPE_CONTENT)\n+                   ? windowGeometry->final_height.value\n+                         - windowGeometry->extents.top\n+                         - windowGeometry->extents.bottom\n+                   : windowGeometry->final_height.value;\n+}\n+\n+static int geometry_get_window_x(const WindowGeometry *windowGeometry) {\n+    float value = windowGeometry->refx;\n+    if (windowGeometry->gravity_x != 0) {\n+        value -= geometry_get_window_width(windowGeometry)\n+                     * windowGeometry->gravity_x;\n+    }\n+    return (int) value;\n+}\n+\n+static int geometry_get_window_y(const WindowGeometry *windowGeometry) {\n+    float value = windowGeometry->refy;\n+    if (windowGeometry->gravity_y != 0) {\n+        value -= geometry_get_window_height(windowGeometry)\n+                     * windowGeometry->gravity_y;\n+    }\n+    return (int) value;\n+}\n+\n+static void geometry_set_window_x(WindowGeometry *windowGeometry, int value) {\n+    float newValue = value;\n+    if (windowGeometry->gravity_x != 0) {\n+        newValue += geometry_get_window_width(windowGeometry)\n+                * windowGeometry->gravity_x;\n+    }\n+    windowGeometry->refx = newValue;\n+}\n+\n+static void geometry_set_window_y(WindowGeometry *windowGeometry, int value) {\n+    float newValue = value;\n+    if (windowGeometry->gravity_y != 0) {\n+        newValue += geometry_get_window_height(windowGeometry)\n+                * windowGeometry->gravity_y;\n+    }\n+    windowGeometry->refy = newValue;\n+}\n+\n+static GdkAtom get_net_frame_extents_atom() {\n+    static const char * extents_str = \"_NET_FRAME_EXTENTS\";\n+    return gdk_atom_intern(extents_str, TRUE);\n+}\n+\n@@ -794,6 +867,0 @@\n-static GdkAtom get_net_frame_extents_atom() {\n-    static const char * extents_str = \"_NET_FRAME_EXTENTS\";\n-    return gdk_atom_intern(extents_str, TRUE);\n-}\n-\n-\n@@ -842,7 +909,6 @@\n-                if (geometry.bounds_type != BOUNDSTYPE_WINDOW) {\n-                    set_bounds(-1, -1, false, false, -1, -1, geometry.final_width,\n-                                    geometry.final_height);\n-                } else {\n-                    set_bounds(-1, -1, false, false, geometry.final_width,\n-                                geometry.final_height, -1, -1);\n-                }\n+                int w = geometry_get_window_width(&geometry);\n+                int h = geometry_get_window_height(&geometry);\n+                int cw = geometry_get_content_width(&geometry);\n+                int ch = geometry_get_content_height(&geometry);\n+\n+                set_bounds(-1, -1, false, false, w, h, cw, ch);\n@@ -916,68 +982,0 @@\n-static int geometry_get_window_width(const WindowGeometry *windowGeometry) {\n-     return (windowGeometry->bounds_type != BOUNDSTYPE_WINDOW)\n-                   ? windowGeometry->final_width\n-                         + windowGeometry->extents.left\n-                         + windowGeometry->extents.right\n-                   : windowGeometry->final_width;\n-}\n-\n-static int geometry_get_window_height(const WindowGeometry *windowGeometry) {\n-    return (windowGeometry->bounds_type != BOUNDSTYPE_WINDOW)\n-                   ? windowGeometry->final_height\n-                         + windowGeometry->extents.top\n-                         + windowGeometry->extents.bottom\n-                   : windowGeometry->final_height;\n-}\n-\n-static int geometry_get_content_width(WindowGeometry *windowGeometry) {\n-    return (windowGeometry->bounds_type != BOUNDSTYPE_CONTENT)\n-                   ? windowGeometry->final_width\n-                         - windowGeometry->extents.left\n-                         - windowGeometry->extents.right\n-                   : windowGeometry->final_width;\n-}\n-\n-static int geometry_get_content_height(WindowGeometry *windowGeometry) {\n-    return (windowGeometry->bounds_type != BOUNDSTYPE_CONTENT)\n-                   ? windowGeometry->final_height\n-                         - windowGeometry->extents.top\n-                         - windowGeometry->extents.bottom\n-                   : windowGeometry->final_height;\n-}\n-\n-static int geometry_get_window_x(const WindowGeometry *windowGeometry) {\n-    float value = windowGeometry->refx;\n-    if (windowGeometry->gravity_x != 0) {\n-        value -= geometry_get_window_width(windowGeometry)\n-                     * windowGeometry->gravity_x;\n-    }\n-    return (int) value;\n-}\n-\n-static int geometry_get_window_y(const WindowGeometry *windowGeometry) {\n-    float value = windowGeometry->refy;\n-    if (windowGeometry->gravity_y != 0) {\n-        value -= geometry_get_window_height(windowGeometry)\n-                     * windowGeometry->gravity_y;\n-    }\n-    return (int) value;\n-}\n-\n-static void geometry_set_window_x(WindowGeometry *windowGeometry, int value) {\n-    float newValue = value;\n-    if (windowGeometry->gravity_x != 0) {\n-        newValue += geometry_get_window_width(windowGeometry)\n-                * windowGeometry->gravity_x;\n-    }\n-    windowGeometry->refx = newValue;\n-}\n-\n-static void geometry_set_window_y(WindowGeometry *windowGeometry, int value) {\n-    float newValue = value;\n-    if (windowGeometry->gravity_y != 0) {\n-        newValue += geometry_get_window_height(windowGeometry)\n-                * windowGeometry->gravity_y;\n-    }\n-    windowGeometry->refy = newValue;\n-}\n-\n@@ -1048,2 +1046,2 @@\n-    bool size_changed = geometry.final_width != w\n-                        || geometry.final_height != h;\n+    bool size_changed = geometry.final_width.value != w\n+                        || geometry.final_height.value != h;\n@@ -1052,3 +1050,4 @@\n-        geometry.final_width = w;\n-        geometry.bounds_type = BOUNDSTYPE_CONTENT;\n-        geometry.final_height = h;\n+        geometry.final_width.value = w;\n+        geometry.final_width.type = BOUNDSTYPE_CONTENT;\n+        geometry.final_height.value = h;\n+        geometry.final_height.type = BOUNDSTYPE_CONTENT;\n@@ -1141,1 +1140,1 @@\n-     \/\/ newW \/ newH always content sizes compatible with GTK+ (content size means \"do not account window frame\")\n+    \/\/ newW \/ newH always content sizes compatible with GTK+ (content size means \"do not account window frame\")\n@@ -1145,4 +1144,3 @@\n-    if (w > 0 || h > 0) {\n-        geometry.bounds_type = BOUNDSTYPE_WINDOW;\n-        geometry.final_width = w;\n-        geometry.final_height = h;\n+    if (w > 0) {\n+        geometry.final_width.type = BOUNDSTYPE_WINDOW;\n+        geometry.final_width.value = w;\n@@ -1150,3 +1148,3 @@\n-        newH = h - (geometry.extents.top + geometry.extents.bottom);\n-    } else if (cw > 0 || ch > 0) {\n-        geometry.bounds_type = BOUNDSTYPE_CONTENT;\n+    } else if (cw > 0) {\n+        geometry.final_width.type = BOUNDSTYPE_CONTENT;\n+        geometry.final_width.value = cw;\n@@ -1154,0 +1152,9 @@\n+    }\n+\n+    if (h > 0) {\n+        geometry.final_height.type = BOUNDSTYPE_WINDOW;\n+        geometry.final_height.value = h;\n+        newH = h - (geometry.extents.top + geometry.extents.bottom);\n+    } else if (ch > 0) {\n+        geometry.final_height.type = BOUNDSTYPE_CONTENT;\n+        geometry.final_height.value = ch;\n@@ -1155,2 +1162,0 @@\n-        geometry.final_width = cw;\n-        geometry.final_height = ch;\n@@ -1159,1 +1164,1 @@\n-    if (newW > 0 && newH > 0) {\n+    if (newW > 0 || newH > 0) {\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.cpp","additions":102,"deletions":97,"binary":false,"changes":199,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    WindowGeometry(): bounds_type(), final_width(), final_height(),\n+    WindowGeometry(): final_width(), final_height(),\n@@ -71,3 +71,10 @@\n-    BoundsType bounds_type;\n-    int final_width;\n-    int final_height;\n+    struct {\n+        int value;\n+        BoundsType type;\n+    } final_width;\n+\n+    struct {\n+        int value;\n+        BoundsType type;\n+    } final_height;\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.h","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"}]}