{"files":[{"patch":"@@ -443,1 +443,1 @@\n-                    ctx->process_property_notify(&event->property);\n+                    \/\/ let gtk handle it first to prevent a glitch\n@@ -445,0 +445,1 @@\n+                    ctx->process_property_notify(&event->property);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassApplication.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -122,1 +122,2 @@\n-            if ((gdk_windowManagerFunctions & GDK_FUNC_MINIMIZE) == 0) {\n+            if ((gdk_windowManagerFunctions & GDK_FUNC_MINIMIZE) == 0\n+                || (gdk_windowManagerFunctions & GDK_FUNC_MAXIMIZE) == 0) {\n@@ -124,1 +125,1 @@\n-                \/\/ request to iconify - so we need to restore it now.\n+                \/\/ request to iconify \/ maximize - so we need to restore it now.\n@@ -151,1 +152,2 @@\n-                    event->in ? com_sun_glass_events_WindowEvent_FOCUS_GAINED : com_sun_glass_events_WindowEvent_FOCUS_LOST);\n+                    event->in ? com_sun_glass_events_WindowEvent_FOCUS_GAINED\n+                              : com_sun_glass_events_WindowEvent_FOCUS_LOST);\n@@ -516,2 +518,0 @@\n-    fprintf(stderr, \"paint -> %d, %d\\n\", width, height);\n-    fflush(stderr);\n@@ -519,1 +519,2 @@\n-    cairo_region_t *region = gdk_window_get_clip_region(gdk_window);\n+    cairo_rectangle_int_t rect = {0, 0, width, height};\n+    cairo_region_t *region = cairo_region_create_rectangle(&rect);\n@@ -522,2 +523,1 @@\n-    cairo_t* context;\n-    context = gdk_cairo_create(gdk_window);\n+    cairo_t* context = gdk_cairo_create(gdk_window);\n@@ -525,2 +525,2 @@\n-    cairo_surface_t* cairo_surface;\n-    cairo_surface = cairo_image_surface_create_for_data(\n+    cairo_surface_t* cairo_surface =\n+        cairo_image_surface_create_for_data(\n@@ -534,1 +534,1 @@\n-    cairo_set_operator (context, CAIRO_OPERATOR_SOURCE);\n+    cairo_set_operator(context, CAIRO_OPERATOR_SOURCE);\n@@ -536,0 +536,1 @@\n+\n@@ -733,1 +734,1 @@\n-    return gdk_atom_intern(extents_str, TRUE);\n+    return gdk_atom_intern(extents_str, FALSE);\n@@ -820,1 +821,1 @@\n-    static Atom rfeAtom = XInternAtom(display, \"_NET_REQUEST_FRAME_EXTENTS\", True);\n+    static Atom rfeAtom = XInternAtom(display, \"_NET_REQUEST_FRAME_EXTENTS\", False);\n@@ -849,1 +850,0 @@\n-\n@@ -859,1 +859,1 @@\n-                if (geometry.x || geometry.y) {\n+                if (geometry.x_set) {\n@@ -861,0 +861,3 @@\n+                }\n+\n+                if (geometry.y_set) {\n@@ -862,1 +865,0 @@\n-                    gtk_window_move(GTK_WINDOW(gtk_widget), geometry.x, geometry.y);\n@@ -865,3 +867,9 @@\n-                update_window_constraints();\n-                ensure_window_size();\n-            }\n+                \/\/ set bounds again to correct window size\n+                \/\/ accounting decorations\n+                int w = geometry_get_window_width(&geometry);\n+                int h = geometry_get_window_height(&geometry);\n+                int cw = geometry_get_content_width(&geometry);\n+                int ch = geometry_get_content_height(&geometry);\n+\n+                set_bounds(geometry.x, geometry.y, geometry.x_set, geometry.y_set, w, h, cw, ch);\n+           }\n@@ -872,19 +880,0 @@\n-void WindowContextTop::ensure_window_size() {\n-    \/\/ set bounds again to set to correct window size that must\n-    \/\/ be the total width and height accounting extents\n-    int w = geometry_get_window_width(&geometry);\n-    int h = geometry_get_window_height(&geometry);\n-    int cw = geometry_get_content_width(&geometry);\n-    int ch = geometry_get_content_height(&geometry);\n-\n-    set_bounds(-1, -1, false, false, w, h, cw, ch);\n-\n-    \/\/ set_bounds will only notify for content size - this is needed in case\n-    \/\/ of window oriented size\n-    notify_window_resize();\n-\n-    \/\/ Window didn't actually move, but view X, Y might change or\n-    \/\/ may have gravity envolved\n-    notify_window_move();\n-}\n-\n@@ -1098,3 +1087,1 @@\n-    fprintf(stderr, \"set_bounds -> x = %d, y = %d, w = %d, h = %d, cw = %d, ch = %d\\n\", x, y, w, h, cw, ch);\n-    fflush(stderr);\n-\n+    \/\/ fprintf(stderr, \"set_bounds -> x = %d, y = %d, w = %d, h = %d, cw = %d, ch = %d\\n\", x, y, w, h, cw, ch);\n@@ -1126,8 +1113,3 @@\n-        if (gtk_widget_get_visible(gtk_widget)) {\n-            \/\/ call update_window_constraints() to let gtk_window_resize succeed, because it's bound to geometry constraints\n-            update_window_constraints();\n-            gtk_window_resize(GTK_WINDOW(gtk_widget), newW, newH);\n-        } else {\n-            gtk_window_set_default_size(GTK_WINDOW(gtk_widget), newW, newH);\n-        }\n-\n+        \/\/ call update_window_constraints() to let gtk_window_resize succeed, because it's bound to geometry constraints\n+        update_window_constraints();\n+        gtk_window_resize(GTK_WINDOW(gtk_widget), newW, newH);\n@@ -1140,0 +1122,1 @@\n+            geometry.x_set = (geometry.x_set || true);\n@@ -1144,0 +1127,1 @@\n+            geometry.y_set = (geometry.y_set || true);\n@@ -1278,1 +1262,0 @@\n-    g_print(\"set gravity: %f, %f\\n\", x, y);\n@@ -1355,3 +1338,0 @@\n-    fprintf(stderr, \"notify window size -> w = %d, h = %d\\n\", w, h);\n-    fflush(stderr);\n-\n@@ -1362,3 +1342,0 @@\n-        fprintf(stderr, \"notify view size -> cw = %d, ch = %d\\n\", cw, ch);\n-        fflush(stderr);\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.cpp","additions":33,"deletions":56,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -70,1 +70,2 @@\n-    size_assigned(false), x(), y(), gravity_x(), gravity_y(), extents() {}\n+    size_assigned(false), x_set(false), y_set(false),\n+    x(), y(), gravity_x(), gravity_y(), extents() {}\n@@ -85,0 +86,2 @@\n+    bool x_set;\n+    bool y_set;\n@@ -333,1 +336,0 @@\n-    void ensure_window_size();\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.h","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}