{"files":[{"patch":"@@ -0,0 +1,317 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.css;\n+\n+import javafx.scene.Scene;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.text.Font;\n+\n+import org.junit.Test;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import static org.junit.Assert.assertEquals;\n+\n+public class PropertySizeTest {\n+    private HBox root, p1, p2;\n+    private Label l0, l1, l2;\n+    private final static int ROOT_FONT_SIZE = 48;\n+\n+    @Before\n+    public void setupTest() {\n+        l2 = new Label(\"L2\");\n+        p2 = new HBox(l2);\n+\n+        l1 = new Label(\"L1\");\n+        p1 = new HBox(l1, p2);\n+\n+        l0 = new Label(\"Text\");\n+        root = new HBox(l0, p1);\n+\n+        Scene scene = new Scene(root);\n+\n+        root.setStyle(\"-fx-font-size: \" + ROOT_FONT_SIZE + \"px;\");\n+        root.applyCss();\n+    }\n+\n+    \/\/ -fx-font-size tests\n+    @Test\n+    public void defaultFontSizeTest() {\n+        root.setStyle(\"\");\n+        root.applyCss();\n+        assertEquals(Font.getDefault().getSize(), l0.getFont().getSize(), 0);\n+        assertEquals(Font.getDefault().getSize(), l1.getFont().getSize(), 0);\n+        assertEquals(Font.getDefault().getSize(), l2.getFont().getSize(), 0);\n+    }\n+\n+    @Test\n+    public void absoluteFontSizeSetOnRootTest() {\n+        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n+        assertEquals(ROOT_FONT_SIZE, l1.getFont().getSize(), 0);\n+        assertEquals(ROOT_FONT_SIZE, l2.getFont().getSize(), 0);\n+    }\n+\n+    @Test\n+    public void absoluteFontSizeSetOnControlTest() {\n+        l1.setStyle(\"-fx-font-size: 24px\");\n+        root.applyCss();\n+        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n+        assertEquals(24, l1.getFont().getSize(), 0);\n+        assertEquals(ROOT_FONT_SIZE, l2.getFont().getSize(), 0);\n+    }\n+\n+    @Test\n+    public void relativeFontSizeNestedParentTest() {\n+        p1.setStyle(\"-fx-font-size: 0.5em\");\n+        p2.setStyle(\"-fx-font-size: 0.25em\");\n+        root.applyCss();\n+        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n+        assertEquals(ROOT_FONT_SIZE * 0.5, l1.getFont().getSize(), 0);\n+        assertEquals(Font.getDefault().getSize() * 0.25, l2.getFont().getSize(), 0); \/\/ def * 0.25\n+    }\n+\n+    @Ignore()\n+    @Test\n+    public void sameRelativeFontSizeNestedParentTest() {\n+        p1.setStyle(\"-fx-font-size: 0.5em\");\n+        p2.setStyle(\"-fx-font-size: 0.5em\");\n+        root.applyCss();\n+        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0); \/\/ 48\n+        assertEquals(ROOT_FONT_SIZE * 0.5, l1.getFont().getSize(), 0); \/\/ 24\n+        \/\/ Compared to previous test relativeFontSizeNestedParentTest, there is only\n+        \/\/ one difference in this test: font size of p2 is 0.5em which is same as of p1.\n+        \/\/ In previous test where the font sizes are different for p1 and p2,\n+        \/\/ the font size of l2 is relative to default font size but\n+        \/\/ here in this test, p1 and p2 have same font size.\n+        \/\/ Issue is: Unlike previous test, font size of l2 is not relative to default\n+        \/\/ font size instead it is relative to the font size of root.\n+        \/\/ expected default font size * 0.5 but actual is ROOT_FONT_SIZE * 0.5\n+        assertEquals(Font.getDefault().getSize() * 0.5, l2.getFont().getSize(), 0);\n+    }\n+\n+    @Test\n+    public void relativeFontSizeNestedControlTest() {\n+        l1.setStyle(\"-fx-font-size: 0.5em\");\n+        l2.setStyle(\"-fx-font-size: 0.25em\");\n+        root.applyCss();\n+        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n+        assertEquals(ROOT_FONT_SIZE * 0.50, l1.getFont().getSize(), 0); \/\/ 24\n+        assertEquals(ROOT_FONT_SIZE * 0.25, l2.getFont().getSize(), 0); \/\/ 12\n+    }\n+\n+    @Test\n+    public void sameRelativeFontSizeNestedControlTest() {\n+        l1.setStyle(\"-fx-font-size: 0.5em\");\n+        l2.setStyle(\"-fx-font-size: 0.5em\");\n+        root.applyCss();\n+        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n+        assertEquals(ROOT_FONT_SIZE * 0.5, l1.getFont().getSize(), 0); \/\/ 24\n+        assertEquals(ROOT_FONT_SIZE * 0.5, l2.getFont().getSize(), 0); \/\/ 24\n+    }\n+\n+    @Test\n+    public void relativeFontSizeNestedParentControlTest() {\n+        p1.setStyle(\"-fx-font-size: 0.75em\"); \/\/ 36\n+        p2.setStyle(\"-fx-font-size: 0.50em\"); \/\/ 24\n+\n+        l1.setStyle(\"-fx-font-size: 0.25em\"); \/\/ 9\n+        l2.setStyle(\"-fx-font-size: 0.25em\"); \/\/ 6\n+\n+        root.applyCss();\n+        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n+        assertEquals(ROOT_FONT_SIZE * 0.75 * 0.25, l1.getFont().getSize(), 0);\n+        assertEquals(ROOT_FONT_SIZE * 0.50 * 0.25, l2.getFont().getSize(), 0);\n+    }\n+\n+    @Ignore()\n+    @Test\n+    public void relativeFontSizeDeepNestedParentControlTest() {\n+        Label l4 = new Label(\"L4\");\n+        HBox p4 = new HBox(l4);\n+\n+        Label l3 = new Label(\"L3\");\n+        HBox p3 = new HBox(l3, p4);\n+\n+        p2.getChildren().add(p3);\n+\n+        p1.setStyle(\"-fx-font-size: 0.75em\"); \/\/ 36\n+        p2.setStyle(\"-fx-font-size: 0.50em\"); \/\/ 24\n+        p3.setStyle(\"-fx-font-size: 0.334em\");\/\/ ~16\n+        p4.setStyle(\"-fx-font-size: 0.25em\"); \/\/ 12\n+\n+        l1.setStyle(\"-fx-font-size: 0.25em\"); \/\/ 9\n+        l2.setStyle(\"-fx-font-size: 0.25em\"); \/\/ 6\n+        l3.setStyle(\"-fx-font-size: 0.25em\"); \/\/ ~4\n+        l4.setStyle(\"-fx-font-size: 0.25em\"); \/\/ 3\n+\n+        root.applyCss();\n+        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n+        assertEquals(ROOT_FONT_SIZE * 0.75 * 0.25,  l1.getFont().getSize(), 0);\n+        assertEquals(ROOT_FONT_SIZE * 0.50 * 0.25,  l2.getFont().getSize(), 0);\n+        \/\/expected 4 but is 3 which is l1.getFontSize() * 0.334 => 9 * 0.334\n+        assertEquals(ROOT_FONT_SIZE * 0.334 * 0.25, l3.getFont().getSize(), 0.1);\n+        \/\/expected 3 but is 1.5 which is l2.getFontSize() * 0.25 => 6 * 0.25\n+        assertEquals(ROOT_FONT_SIZE * 0.25 * 0.25,  l4.getFont().getSize(), 0.1);\n+    }\n+\n+    \/\/ Test the following properties using Label, to verify that\n+    \/\/ 1. The relative size of css properties of a control are computed relative to\n+    \/\/ the -fx-font-size of that control. and,\n+    \/\/ 2. The absolute sized properties remain as specified.\n+    \/\/ -fx-padding,    -fx-label-padding\n+    \/\/ -fx-max-width,  -fx-min-width\n+    \/\/ -fx-max-height, -fx-min-height\n+    \/\/ -fx-pref-width, -fx-pref-height\n+    \/\/ -fx-background-radius, -fx-background-insets\n+    @Test\n+    public void absoluteSizePropertiesTest() {\n+        l1.setStyle(\"-fx-font-size:  20px; -fx-padding:  5px; -fx-label-padding:  6px;\" +\n+                \"-fx-max-width:  200px; -fx-max-height: 100px;\" +\n+                \"-fx-min-width:  198px; -fx-min-height:  98px;\" +\n+                \"-fx-pref-width: 199px; -fx-pref-height: 99px;\" +\n+                \"-fx-background-color: red; -fx-background-radius: 5px; -fx-background-insets: 3px;\");\n+        l2.setStyle(\"-fx-font-size: 0.5em; -fx-padding: 10px; -fx-label-padding: 11px;\" +\n+                \"-fx-max-width:  210px; -fx-max-height:  110px;\" +\n+                \"-fx-min-width:  208px; -fx-min-height:  108px;\" +\n+                \"-fx-pref-width: 209px; -fx-pref-height: 109px;\" +\n+                \"-fx-background-color: red; -fx-background-radius: 4px; -fx-background-insets: 2px;\");\n+        root.applyCss();\n+        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n+\n+        assertEquals(20,  l1.getFont().getSize(), 0);\n+        assertEquals(5,   l1.getPadding().getLeft(), 0);\n+        assertEquals(6,   l1.getLabelPadding().getLeft(), 0);\n+        assertEquals(200, l1.getMaxWidth(), 0);\n+        assertEquals(198, l1.getMinWidth(), 0);\n+        assertEquals(199, l1.getPrefWidth(), 0);\n+        assertEquals(100, l1.getMaxHeight(), 0);\n+        assertEquals(98,  l1.getMinHeight(), 0);\n+        assertEquals(99,  l1.getPrefHeight(), 0);\n+        assertEquals(5,   l1.getBackground().getFills().get(0).getRadii().getTopLeftHorizontalRadius(), 0);\n+        assertEquals(3,   l1.getBackground().getFills().get(0).getInsets().getLeft(), 0);\n+\n+        assertEquals(24,  l2.getFont().getSize(), 0);\n+        assertEquals(10,  l2.getPadding().getLeft(), 0);\n+        assertEquals(11,  l2.getLabelPadding().getLeft(), 0);\n+        assertEquals(210, l2.getMaxWidth(), 0);\n+        assertEquals(208, l2.getMinWidth(), 0);\n+        assertEquals(209, l2.getPrefWidth(), 0);\n+        assertEquals(110, l2.getMaxHeight(), 0);\n+        assertEquals(108, l2.getMinHeight(), 0);\n+        assertEquals(109, l2.getPrefHeight(), 0);\n+        assertEquals(4,   l2.getBackground().getFills().get(0).getRadii().getTopLeftHorizontalRadius(), 0);\n+        assertEquals(2,   l2.getBackground().getFills().get(0).getInsets().getLeft(), 0);\n+    }\n+\n+    @Test\n+    public void propertySizesRelativeToFontSizeOfControlTest() {\n+        l1.setStyle(\"-fx-font-size: 0.5em; -fx-padding: 0.5em;  -fx-label-padding: 0.25em;\" +\n+                \"-fx-max-width:  20em; -fx-max-height:  10em;\" +\n+                \"-fx-min-width:  18em; -fx-min-height:  8em;\" +\n+                \"-fx-pref-width: 19em; -fx-pref-height: 9em;\" +\n+                \"-fx-background-color: red; -fx-background-radius: 0.2em; -fx-background-insets: 0.1em;\");\n+        l2.setStyle(\"-fx-font-size:  20px; -fx-padding: 0.25em; -fx-label-padding: 0.2em;\" +\n+                \"-fx-max-width:  20em; -fx-max-height:  10em;\" +\n+                \"-fx-min-width:  18em; -fx-min-height:  8em;\" +\n+                \"-fx-pref-width: 19em; -fx-pref-height: 9em;\" +\n+                \"-fx-background-color: red; -fx-background-radius: 0.1em; -fx-background-insets: 0.05em;\");\n+        root.applyCss();\n+        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n+\n+        double l1FontSize = ROOT_FONT_SIZE * 0.5;\n+        assertEquals(l1FontSize, l1.getFont().getSize(), 0);\n+        assertEquals(l1FontSize * 0.5, l1.getPadding().getLeft(), 0);\n+        assertEquals(l1FontSize * 0.25,  l1.getLabelPadding().getLeft(), 0);\n+        assertEquals(l1FontSize * 20, l1.getMaxWidth(), 0);\n+        assertEquals(l1FontSize * 18, l1.getMinWidth(), 0);\n+        assertEquals(l1FontSize * 19, l1.getPrefWidth(), 0);\n+        assertEquals(l1FontSize * 10, l1.getMaxHeight(), 0);\n+        assertEquals(l1FontSize * 8,  l1.getMinHeight(), 0);\n+        assertEquals(l1FontSize * 9,  l1.getPrefHeight(), 0);\n+        assertEquals(l1FontSize * 0.2, l1.getBackground().getFills().get(0).getRadii().getTopLeftHorizontalRadius(), 0.01);\n+        assertEquals(l1FontSize * 0.1, l1.getBackground().getFills().get(0).getInsets().getLeft(), 0.01);\n+\n+        double l2FontSize = 20;\n+        assertEquals(l2FontSize, l2.getFont().getSize(), 0);\n+        assertEquals(5,  l2.getPadding().getLeft(), 0);\n+        assertEquals(4,  l2.getLabelPadding().getLeft(), 0);\n+        assertEquals(l2FontSize * 20, l2.getMaxWidth(), 0);\n+        assertEquals(l2FontSize * 18, l2.getMinWidth(), 0);\n+        assertEquals(l2FontSize * 19, l2.getPrefWidth(), 0);\n+        assertEquals(l2FontSize * 10, l2.getMaxHeight(), 0);\n+        assertEquals(l2FontSize * 8,  l2.getMinHeight(), 0);\n+        assertEquals(l2FontSize * 9,  l2.getPrefHeight(), 0);\n+        assertEquals(l2FontSize * 0.1, l2.getBackground().getFills().get(0).getRadii().getTopLeftHorizontalRadius(), 0);\n+        assertEquals(l2FontSize * 0.05, l2.getBackground().getFills().get(0).getInsets().getLeft(), 0.01);\n+    }\n+\n+    @Test\n+    public void propertySizesRelativeToFontSizeOfParentTest() {\n+        l1.setStyle(\"-fx-padding: 0.5em;   -fx-label-padding: 0.25em;\" +\n+                \"-fx-max-width:  20em; -fx-max-height:  10em;\" +\n+                \"-fx-min-width:  18em; -fx-min-height:  8em;\" +\n+                \"-fx-pref-width: 19em; -fx-pref-height: 9em;\" +\n+                \"-fx-background-color: red; -fx-background-radius: 0.2em; -fx-background-insets: 0.1em;\");\n+        p2.setStyle(\"-fx-font-size: 0.5em; -fx-label-padding: 0.25em;\" +\n+                \"-fx-max-width:  20em; -fx-max-height:  10em;\" +\n+                \"-fx-min-width:  18em; -fx-min-height:  8em;\" +\n+                \"-fx-pref-width: 19em; -fx-pref-height: 9em;\" +\n+                \"-fx-background-color: red; -fx-background-radius: 0.15em; -fx-background-insets: 0.075em;\");\n+        l2.setStyle(\"-fx-padding: 0.25em;  -fx-label-padding: 0.125em;\" +\n+                \"-fx-max-width:  17em; -fx-max-height:  7em;\" +\n+                \"-fx-min-width:  15em; -fx-min-height:  5em;\" +\n+                \"-fx-pref-width: 16em; -fx-pref-height: 6em;\" +\n+                \"-fx-background-color: red; -fx-background-radius: 0.1em; -fx-background-insets: 0.05em;\");\n+        root.applyCss();\n+        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n+\n+        double l1FontSize = ROOT_FONT_SIZE;\n+        assertEquals(l1FontSize, l1.getFont().getSize(), 0);\n+        assertEquals(l1FontSize * 0.5, l1.getPadding().getLeft(), 0);\n+        assertEquals(l1FontSize * 0.25, l1.getLabelPadding().getLeft(), 0);\n+        assertEquals(l1FontSize * 20, l1.getMaxWidth(), 0);\n+        assertEquals(l1FontSize * 18, l1.getMinWidth(), 0);\n+        assertEquals(l1FontSize * 19, l1.getPrefWidth(), 0);\n+        assertEquals(l1FontSize * 10, l1.getMaxHeight(), 0);\n+        assertEquals(l1FontSize * 8,  l1.getMinHeight(), 0);\n+        assertEquals(l1FontSize * 9,  l1.getPrefHeight(), 0);\n+        assertEquals(l1FontSize * 0.2, l1.getBackground().getFills().get(0).getRadii().getTopLeftHorizontalRadius(), 0.01);\n+        assertEquals(l1FontSize * 0.1, l1.getBackground().getFills().get(0).getInsets().getLeft(), 0.01);\n+\n+        double l2FontSize = ROOT_FONT_SIZE * 0.5;\n+        assertEquals(l2FontSize, l2.getFont().getSize(), 0);\n+        assertEquals(l2FontSize * 0.25,  l2.getPadding().getLeft(), 0);\n+        assertEquals(l2FontSize * 0.125,  l2.getLabelPadding().getLeft(), 0);\n+        assertEquals(l2FontSize * 17, l2.getMaxWidth(), 0);\n+        assertEquals(l2FontSize * 15, l2.getMinWidth(), 0);\n+        assertEquals(l2FontSize * 16, l2.getPrefWidth(), 0);\n+        assertEquals(l2FontSize * 7,  l2.getMaxHeight(), 0);\n+        assertEquals(l2FontSize * 5,  l2.getMinHeight(), 0);\n+        assertEquals(l2FontSize * 6,  l2.getPrefHeight(), 0);\n+        assertEquals(l2FontSize * 0.1, l2.getBackground().getFills().get(0).getRadii().getTopLeftHorizontalRadius(), 0.01);\n+        assertEquals(l2FontSize * 0.05, l2.getBackground().getFills().get(0).getInsets().getLeft(), 0.01);\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/css\/PropertySizeTest.java","additions":317,"deletions":0,"binary":false,"changes":317,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1438,1 +1438,1 @@\n-                    if (fontFromCacheEntry != null && fontFromCacheEntry.isRelative() == false) {\n+                    if (fontFromCacheEntry != null && (!fontFromCacheEntry.isRelative() || !isFontProperty)) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/CssStyleHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}