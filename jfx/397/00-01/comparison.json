{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -375,0 +375,1 @@\n+                        NodeHelper.recalculateRelativeSizeProperties(Labeled.this, value);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Labeled.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+\n@@ -39,3 +40,87 @@\n-    private HBox root, p1, p2;\n-    private Label l0, l1, l2;\n-    private final static int ROOT_FONT_SIZE = 48;\n+    private HBox root, p1, p2, p3, p4;\n+    private Label l0, l1, l2, l3, l4;\n+    private final static double ROOT_FONT_SIZE = 200;\n+\n+    private class Property {\n+        String style;\n+        double size;\n+        boolean isRelative;\n+\n+        Property(String stylee) {\n+            style = stylee;\n+            if (!style.equals(\"\")) {\n+                size = Double.parseDouble(style.substring(0, style.length() - 2));\n+                isRelative = style.substring(style.length() - 2).equals(\"em\");\n+            }\n+        }\n+\n+        double getValue(double fontSize) {\n+            if (!style.equals(\"\")) {\n+                return isRelative ? fontSize * size : size;\n+            }\n+            return fontSize;\n+        }\n+    }\n+\n+    private class TestLabel {\n+\n+        private Label label;\n+        private Property padding, labelPadding;\n+        private Property minW, minH;\n+        private Property maxW, maxH;\n+        private Property prefW, prefH;\n+        private Property bgRadius, bgInsets;\n+\n+        public TestLabel(Label label, String fontSize, String padding, String labelPadding,\n+                         String maxW, String maxH, String minW, String minH,\n+                         String prefW, String prefH, String bgRadius, String bgInsets) {\n+\n+            this.label = label;\n+            this.padding = new Property(padding);\n+            this.labelPadding = new Property(labelPadding);\n+            this.minW = new Property(minW);\n+            this.minH = new Property(minH);\n+            this.maxW = new Property(maxW);\n+            this.maxH = new Property(maxH);\n+            this.prefW = new Property(prefW);\n+            this.prefH = new Property(prefH);\n+            this.bgRadius = new Property(bgRadius);\n+            this.bgInsets = new Property(bgInsets);\n+\n+            String style = fontSize.equals(\"\") ? \"\" : \"-fx-font-size: \" + fontSize + \"; \";\n+            style += \"-fx-padding: \" + padding + \";  -fx-label-padding: \" + labelPadding + \";\" +\n+                    \"-fx-max-width:  \" + maxW + \"; -fx-max-height:  \" + maxH + \";\" +\n+                    \"-fx-min-width:  \" + minW + \"; -fx-min-height:  \" + minH + \";\" +\n+                    \"-fx-pref-width: \" + prefW + \"; -fx-pref-height: \" + prefH + \";\" +\n+                    \"-fx-background-color: red; -fx-background-radius: \" + bgRadius + \"; \" +\n+                    \"-fx-background-insets: \" + bgInsets + \";\";\n+\n+            label.setStyle(style);\n+        }\n+\n+        public void verifySizes() {\n+            root.applyCss();\n+            double fontSize = label.getFont().getSize();\n+            assertEquals(\"Incorrect padding\", padding.getValue(fontSize), label.getPadding().getLeft(), 0.1);\n+            assertEquals(\"Incorrect labelPadding\", labelPadding.getValue(fontSize), label.getLabelPadding().getLeft(), 0.1);\n+            assertEquals(\"Incorrect max width\", maxW.getValue(fontSize), label.getMaxWidth(), 0.1);\n+            assertEquals(\"Incorrect min width\", minW.getValue(fontSize), label.getMinWidth(), 0.1);\n+            assertEquals(\"Incorrect pref width\", prefW.getValue(fontSize), label.getPrefWidth(), 0.1);\n+            assertEquals(\"Incorrect max Height\", maxH.getValue(fontSize), label.getMaxHeight(), 0.1);\n+            assertEquals(\"Incorrect min height\", minH.getValue(fontSize), label.getMinHeight(), 0.1);\n+            assertEquals(\"Incorrect pref height\", prefH.getValue(fontSize), label.getPrefHeight(), 0.1);\n+            assertEquals(\"Incorrect background radius\", bgRadius.getValue(fontSize),\n+                    label.getBackground().getFills().get(0).getRadii().getTopLeftHorizontalRadius(), 0.1);\n+            assertEquals(\"Incorrect background insets\", bgInsets.getValue(fontSize),\n+                    label.getBackground().getFills().get(0).getInsets().getLeft(), 0.1);\n+        }\n+    }\n+\n+    private void verifyFontSizes(double l0Font, double l1Font, double l2Font, double l3Font, double l4Font) {\n+        root.applyCss();\n+        assertEquals(\"l0 font size is incorrect.\", l0Font, l0.getFont().getSize(), 0.1);\n+        assertEquals(\"l1 font size is incorrect.\", l1Font, l1.getFont().getSize(), 0.1);\n+        assertEquals(\"l2 font size is incorrect.\", l2Font, l2.getFont().getSize(), 0.1);\n+        assertEquals(\"l3 font size is incorrect.\", l3Font, l3.getFont().getSize(), 0.1);\n+        assertEquals(\"l4 font size is incorrect.\", l4Font, l4.getFont().getSize(), 0.1);\n+    }\n@@ -45,0 +130,6 @@\n+        l4 = new Label(\"L4\");\n+        p4 = new HBox(l4);\n+\n+        l3 = new Label(\"L3\");\n+        p3 = new HBox(l3, p4);\n+\n@@ -46,1 +137,1 @@\n-        p2 = new HBox(l2);\n+        p2 = new HBox(l2, p3);\n@@ -57,1 +148,0 @@\n-        root.applyCss();\n@@ -60,1 +150,1 @@\n-    \/\/ -fx-font-size tests\n+    \/\/ -fx-font-size tests - begin\n@@ -64,4 +154,2 @@\n-        root.applyCss();\n-        assertEquals(Font.getDefault().getSize(), l0.getFont().getSize(), 0);\n-        assertEquals(Font.getDefault().getSize(), l1.getFont().getSize(), 0);\n-        assertEquals(Font.getDefault().getSize(), l2.getFont().getSize(), 0);\n+        double defFontSize = Font.getDefault().getSize();\n+        verifyFontSizes(defFontSize, defFontSize, defFontSize, defFontSize, defFontSize);\n@@ -71,4 +159,2 @@\n-    public void absoluteFontSizeSetOnRootTest() {\n-        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n-        assertEquals(ROOT_FONT_SIZE, l1.getFont().getSize(), 0);\n-        assertEquals(ROOT_FONT_SIZE, l2.getFont().getSize(), 0);\n+    public void absoluteFontSizeSetOnlyOnRootTest() {\n+        verifyFontSizes(ROOT_FONT_SIZE, ROOT_FONT_SIZE, ROOT_FONT_SIZE, ROOT_FONT_SIZE, ROOT_FONT_SIZE);\n@@ -79,5 +165,3 @@\n-        l1.setStyle(\"-fx-font-size: 24px\");\n-        root.applyCss();\n-        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n-        assertEquals(24, l1.getFont().getSize(), 0);\n-        assertEquals(ROOT_FONT_SIZE, l2.getFont().getSize(), 0);\n+        l1.setStyle(\"-fx-font-size: 20px\");\n+        l3.setStyle(\"-fx-font-size: 30px\");\n+        verifyFontSizes(ROOT_FONT_SIZE, 20, ROOT_FONT_SIZE, 30, ROOT_FONT_SIZE);\n@@ -87,7 +171,4 @@\n-    public void relativeFontSizeNestedParentTest() {\n-        p1.setStyle(\"-fx-font-size: 0.5em\");\n-        p2.setStyle(\"-fx-font-size: 0.25em\");\n-        root.applyCss();\n-        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n-        assertEquals(ROOT_FONT_SIZE * 0.5, l1.getFont().getSize(), 0);\n-        assertEquals(Font.getDefault().getSize() * 0.25, l2.getFont().getSize(), 0); \/\/ def * 0.25\n+    public void relativeFontSizeNestedControlTest() {\n+        testRelativeFontSizeSetOnControl(0.9, 0.8, 0.7, 0.6, 0.5);\n+        testRelativeFontSizeSetOnControl(0.5, 0.5, 0.5, 0.5, 0.5);\n+        testRelativeFontSizeSetOnControl(1, 1, 1, 1, 1);\n@@ -96,17 +177,9 @@\n-    @Ignore()\n-    @Test\n-    public void sameRelativeFontSizeNestedParentTest() {\n-        p1.setStyle(\"-fx-font-size: 0.5em\");\n-        p2.setStyle(\"-fx-font-size: 0.5em\");\n-        root.applyCss();\n-        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0); \/\/ 48\n-        assertEquals(ROOT_FONT_SIZE * 0.5, l1.getFont().getSize(), 0); \/\/ 24\n-        \/\/ Compared to previous test relativeFontSizeNestedParentTest, there is only\n-        \/\/ one difference in this test: font size of p2 is 0.5em which is same as of p1.\n-        \/\/ In previous test where the font sizes are different for p1 and p2,\n-        \/\/ the font size of l2 is relative to default font size but\n-        \/\/ here in this test, p1 and p2 have same font size.\n-        \/\/ Issue is: Unlike previous test, font size of l2 is not relative to default\n-        \/\/ font size instead it is relative to the font size of root.\n-        \/\/ expected default font size * 0.5 but actual is ROOT_FONT_SIZE * 0.5\n-        assertEquals(Font.getDefault().getSize() * 0.5, l2.getFont().getSize(), 0);\n+    private void testRelativeFontSizeSetOnControl(double l0s, double l1s, double l2s, double l3s, double l4s) {\n+        l0.setStyle(\"-fx-font-size: \" + l0s + \"em\");\n+        l1.setStyle(\"-fx-font-size: \" + l1s + \"em\");\n+        l2.setStyle(\"-fx-font-size: \" + l2s + \"em\");\n+        l3.setStyle(\"-fx-font-size: \" + l3s + \"em\");\n+        l4.setStyle(\"-fx-font-size: \" + l4s + \"em\");\n+\n+        verifyFontSizes(ROOT_FONT_SIZE * l0s, ROOT_FONT_SIZE * l1s, ROOT_FONT_SIZE * l2s,\n+                ROOT_FONT_SIZE * l3s, ROOT_FONT_SIZE * l4s);\n@@ -116,1 +189,13 @@\n-    public void relativeFontSizeNestedControlTest() {\n+    public void relativeFontSizeSetOnNestedParentAndControlsExceptRootTest() {\n+        root.setStyle(\"-fx-font-size: \" + ROOT_FONT_SIZE + \"px;\");\n+        p1.setStyle(\"-fx-font-size: 0.8em\");\n+        p2.setStyle(\"-fx-font-size: 0.7em\");\n+        p3.setStyle(\"-fx-font-size: 0.6em\");\n+        p4.setStyle(\"-fx-font-size: 0.5em\");\n+\n+        double p1FontSize = ROOT_FONT_SIZE * 0.8;\n+        double p2FontSize = ROOT_FONT_SIZE * 0.7;\n+        double p3FontSize = p1FontSize * 0.6;\n+        double p4FontSize = p2FontSize * 0.5;\n+\n+        l0.setStyle(\"-fx-font-size: 0.5em\");\n@@ -118,5 +203,6 @@\n-        l2.setStyle(\"-fx-font-size: 0.25em\");\n-        root.applyCss();\n-        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n-        assertEquals(ROOT_FONT_SIZE * 0.50, l1.getFont().getSize(), 0); \/\/ 24\n-        assertEquals(ROOT_FONT_SIZE * 0.25, l2.getFont().getSize(), 0); \/\/ 12\n+        l2.setStyle(\"-fx-font-size: 0.45em\");\n+        l3.setStyle(\"-fx-font-size: 0.4em\");\n+        l4.setStyle(\"-fx-font-size: 0.35em\");\n+\n+        verifyFontSizes(ROOT_FONT_SIZE * 0.5, p1FontSize * 0.5, p2FontSize * 0.45,\n+                p3FontSize * 0.4, p4FontSize * 0.35);\n@@ -126,7 +212,22 @@\n-    public void sameRelativeFontSizeNestedControlTest() {\n-        l1.setStyle(\"-fx-font-size: 0.5em\");\n-        l2.setStyle(\"-fx-font-size: 0.5em\");\n-        root.applyCss();\n-        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n-        assertEquals(ROOT_FONT_SIZE * 0.5, l1.getFont().getSize(), 0); \/\/ 24\n-        assertEquals(ROOT_FONT_SIZE * 0.5, l2.getFont().getSize(), 0); \/\/ 24\n+    public void relativeFontSizeSetOnAllNestedParentsAndControlsTest() {\n+        root.setStyle(\"-fx-font-size: 100em\");\n+        p1.setStyle(\"-fx-font-size: 0.8em\");\n+        p2.setStyle(\"-fx-font-size: 0.7em\");\n+        p3.setStyle(\"-fx-font-size: 0.6em\");\n+        p4.setStyle(\"-fx-font-size: 0.5em\");\n+\n+        double defFontSize = Font.getDefault().getSize();\n+        double rootFontSize = defFontSize * 100;\n+        double p1FontSize = defFontSize * 0.8;\n+        double p2FontSize = rootFontSize * 0.7;\n+        double p3FontSize = p1FontSize * 0.6;\n+        double p4FontSize = p2FontSize * 0.5;\n+\n+        l0.setStyle(\"-fx-font-size: 0.5em\");\n+        l1.setStyle(\"-fx-font-size: 0.45em\");\n+        l2.setStyle(\"-fx-font-size: 0.4em\");\n+        l3.setStyle(\"-fx-font-size: 0.35em\");\n+        l4.setStyle(\"-fx-font-size: 0.3em\");\n+\n+        verifyFontSizes(rootFontSize * 0.5, p1FontSize * 0.45, p2FontSize * 0.4,\n+                p3FontSize * 0.35, p4FontSize * 0.3);\n@@ -135,0 +236,1 @@\n+    @Ignore()\n@@ -136,3 +238,27 @@\n-    public void relativeFontSizeNestedParentControlTest() {\n-        p1.setStyle(\"-fx-font-size: 0.75em\"); \/\/ 36\n-        p2.setStyle(\"-fx-font-size: 0.50em\"); \/\/ 24\n+    public void ideal_relativeFontSizeNestedParentControlTest() {\n+        root.setStyle(\"-fx-font-size: 0.9em\");\n+        p1.setStyle(\"-fx-font-size: 0.8em\");\n+        p2.setStyle(\"-fx-font-size: 0.7em\");\n+        p3.setStyle(\"-fx-font-size: 0.6em\");\n+        p4.setStyle(\"-fx-font-size: 0.5em\");\n+\n+        l0.setStyle(\"-fx-font-size: 0.25em\");\n+        l1.setStyle(\"-fx-font-size: 0.25em\");\n+        l2.setStyle(\"-fx-font-size: 0.25em\");\n+        l3.setStyle(\"-fx-font-size: 0.25em\");\n+        l4.setStyle(\"-fx-font-size: 0.25em\");\n+\n+        \/\/ This should have been the behavior of font size calculation with\n+        \/\/ nested set of parents and controls. We are not changing current behaviour to avoid\n+        \/\/ regressing any applications that rely on current behaviour. Current behaviour can be\n+        \/\/ observed in other -fx-font-size tests here.\n+        double defFontSize = Font.getDefault().getSize();\n+        double rootFontSize = defFontSize * 0.9;\n+        double p1FontSize = rootFontSize * 0.8;\n+        double p2FontSize = p1FontSize * 0.7;\n+        double p3FontSize = p2FontSize * 0.6;\n+        double p4FontSize = p3FontSize * 0.5;\n+\n+        verifyFontSizes(rootFontSize * 0.25, p1FontSize * 0.25, p2FontSize * 0.25,\n+                p3FontSize * 0.25, p4FontSize * 0.25);\n+    }\n@@ -140,2 +266,4 @@\n-        l1.setStyle(\"-fx-font-size: 0.25em\"); \/\/ 9\n-        l2.setStyle(\"-fx-font-size: 0.25em\"); \/\/ 6\n+    \/\/ This test is an extension of relativeFontSizeSetOnNestedParentAndControlsExceptRootTest() and\n+    \/\/ relativeFontSizeSetOnAllNestedParentsAndControlsTest() to test combinations of -fx-font-size\n+    @Test\n+    public void relativeFontSizeOfNestedParentsTest() {\n@@ -143,4 +271,14 @@\n-        root.applyCss();\n-        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n-        assertEquals(ROOT_FONT_SIZE * 0.75 * 0.25, l1.getFont().getSize(), 0);\n-        assertEquals(ROOT_FONT_SIZE * 0.50 * 0.25, l2.getFont().getSize(), 0);\n+        testFontSizeOfParents(\"\", \"\", \"\", \"\", \"\");\n+        testFontSizeOfParents(\"\", \"0.9em\", \"0.7em\", \"0.5em\", \"0.3em\");\n+\n+        testFontSizeOfParents(ROOT_FONT_SIZE + \"em\", \"\", \"\", \"\", \"\");\n+        testFontSizeOfParents(ROOT_FONT_SIZE + \"px\", \"\", \"\", \"\", \"\");\n+\n+        testFontSizeOfParents(ROOT_FONT_SIZE + \"em\", \"100px\", \"80px\", \"60px\", \"40px\");\n+        testFontSizeOfParents(ROOT_FONT_SIZE + \"px\", \"100px\", \"80px\", \"60px\", \"40px\");\n+\n+        testFontSizeOfParents(ROOT_FONT_SIZE + \"em\", \"0.9em\", \"0.8em\", \"0.7em\", \"0.6em\");\n+        testFontSizeOfParents(ROOT_FONT_SIZE + \"px\", \"0.9em\", \"0.8em\", \"0.7em\", \"0.6em\");\n+\n+        testFontSizeOfParents(ROOT_FONT_SIZE + \"em\", \"0.9em\", \"80px\", \"0.6em\", \"40px\");\n+        testFontSizeOfParents(ROOT_FONT_SIZE + \"px\", \"0.9em\", \"80px\", \"0.6em\", \"40px\");\n@@ -149,0 +287,2 @@\n+    \/\/ This is a specific combination where -fx-font-size of parents is same and test fails.\n+    \/\/ If we fix this then the test can be moved inside previous test.\n@@ -151,3 +291,4 @@\n-    public void relativeFontSizeDeepNestedParentControlTest() {\n-        Label l4 = new Label(\"L4\");\n-        HBox p4 = new HBox(l4);\n+    public void sameRelativeFontSizeOfNestedParentsTest() {\n+        testFontSizeOfParents(ROOT_FONT_SIZE + \"px\", \"0.5em\", \"0.5em\",\n+                \"0.5em\", \"0.5em\");\n+    }\n@@ -155,2 +296,1 @@\n-        Label l3 = new Label(\"L3\");\n-        HBox p3 = new HBox(l3, p4);\n+    private void testFontSizeOfParents(String rtSize, String p1Size, String p2Size, String p3Size, String p4Size) {\n@@ -158,1 +298,5 @@\n-        p2.getChildren().add(p3);\n+        Property rtFont = new Property(rtSize);\n+        Property p1Font = new Property(p1Size);\n+        Property p2Font = new Property(p2Size);\n+        Property p3Font = new Property(p3Size);\n+        Property p4Font = new Property(p4Size);\n@@ -160,4 +304,5 @@\n-        p1.setStyle(\"-fx-font-size: 0.75em\"); \/\/ 36\n-        p2.setStyle(\"-fx-font-size: 0.50em\"); \/\/ 24\n-        p3.setStyle(\"-fx-font-size: 0.334em\");\/\/ ~16\n-        p4.setStyle(\"-fx-font-size: 0.25em\"); \/\/ 12\n+        String rtStyle = rtSize.equals(\"\") ? \"\" : \"-fx-font-size: \" + rtSize;\n+        String p1Style = p1Size.equals(\"\") ? \"\" : \"-fx-font-size: \" + p1Size;\n+        String p2Style = p2Size.equals(\"\") ? \"\" : \"-fx-font-size: \" + p2Size;\n+        String p3Style = p3Size.equals(\"\") ? \"\" : \"-fx-font-size: \" + p3Size;\n+        String p4Style = p4Size.equals(\"\") ? \"\" : \"-fx-font-size: \" + p4Size;\n@@ -165,4 +310,5 @@\n-        l1.setStyle(\"-fx-font-size: 0.25em\"); \/\/ 9\n-        l2.setStyle(\"-fx-font-size: 0.25em\"); \/\/ 6\n-        l3.setStyle(\"-fx-font-size: 0.25em\"); \/\/ ~4\n-        l4.setStyle(\"-fx-font-size: 0.25em\"); \/\/ 3\n+        root.setStyle(rtStyle);\n+        p1.setStyle(p1Style);\n+        p2.setStyle(p2Style);\n+        p3.setStyle(p3Style);\n+        p4.setStyle(p4Style);\n@@ -170,8 +316,54 @@\n-        root.applyCss();\n-        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n-        assertEquals(ROOT_FONT_SIZE * 0.75 * 0.25,  l1.getFont().getSize(), 0);\n-        assertEquals(ROOT_FONT_SIZE * 0.50 * 0.25,  l2.getFont().getSize(), 0);\n-        \/\/expected 4 but is 3 which is l1.getFontSize() * 0.334 => 9 * 0.334\n-        assertEquals(ROOT_FONT_SIZE * 0.334 * 0.25, l3.getFont().getSize(), 0.1);\n-        \/\/expected 3 but is 1.5 which is l2.getFontSize() * 0.25 => 6 * 0.25\n-        assertEquals(ROOT_FONT_SIZE * 0.25 * 0.25,  l4.getFont().getSize(), 0.1);\n+        double defFontSize = Font.getDefault().getSize();\n+        double rtFontSize = rtFont.getValue(defFontSize);\n+        double p1RefeFont = (rtFont.isRelative && p1Font.isRelative) ? defFontSize : rtFontSize;\n+        double p1FontSize = p1Font.getValue(p1RefeFont);\n+\n+        double p2RefeFont = (p1Font.isRelative && p2Font.isRelative) ? rtFontSize : p1FontSize;\n+        double p2FontSize = p2Font.getValue(p2RefeFont);\n+        \/\/double p2FontSize = p2Font.getValue(rtFontSize);\n+\n+        double p3RefeFont = (p2Font.isRelative && p3Font.isRelative) ? p1FontSize : p2FontSize;\n+        double p3FontSize = p3Font.getValue(p3RefeFont);\n+        \/\/double p3FontSize = p3Font.getValue(p1FontSize);\n+\n+        double p4RefeFont = (p3Font.isRelative && p4Font.isRelative) ? p2FontSize : p3FontSize;\n+        double p4FontSize = p4Font.getValue(p4RefeFont);\n+        \/\/double p4FontSize = p4Font.getValue(p2FontSize);\n+\n+        System.err.println(\"rtFontSize: \" + rtFontSize);\n+        System.err.println(\"p1FontSize: \" + p1FontSize);\n+        System.err.println(\"p2FontSize: \" + p2FontSize);\n+        System.err.println(\"p3FontSize: \" + p3FontSize);\n+        System.err.println(\"p4FontSize: \" + p4FontSize);\n+\n+        testFontSizeOfControls(rtFontSize, \"0.55em\", p1FontSize, \"0.5em\",\n+                p2FontSize, \"0.45em\",  p3FontSize, \"0.4em\", p4FontSize, \"0.35em\");\n+\n+        testFontSizeOfControls(rtFontSize, \"150px\", p1FontSize, \"0.5em\",\n+                p2FontSize, \"0.45em\",  p3FontSize, \"0.4em\", p4FontSize, \"0.35em\");\n+\n+        testFontSizeOfControls(rtFontSize, \"150px\", p1FontSize, \"140px\",\n+                p2FontSize, \"0.45em\",  p3FontSize, \"0.4em\", p4FontSize, \"0.35em\");\n+\n+        testFontSizeOfControls(rtFontSize, \"150px\", p1FontSize, \"140px\",\n+                p2FontSize, \"130px\",  p3FontSize, \"0.4em\", p4FontSize, \"0.35em\");\n+\n+        testFontSizeOfControls(rtFontSize, \"150px\", p1FontSize, \"140px\",\n+                p2FontSize, \"130px\",  p3FontSize, \"120px\", p4FontSize, \"0.35em\");\n+\n+        testFontSizeOfControls(rtFontSize, \"150px\", p1FontSize, \"140px\",\n+                p2FontSize, \"130px\",  p3FontSize, \"120px\", p4FontSize, \"110px\");\n+\n+        testFontSizeOfControls(rtFontSize, \"0.55em\", p1FontSize, \"0.5em\",\n+                p2FontSize, \"35px\", p3FontSize, \"0.4em\", p4FontSize, \"20px\");\n+\n+\n+        \/\/ @Ignore\n+        \/\/ Does not behave like the other tests above. Should be revisited if we plan to change -fx-font-size behavior.\n+        \/*\n+        testFontSizeOfControls(rtFontSize, \"0.55em\", p1FontSize, \"\",\n+                p2FontSize, \"35px\", p3FontSize, \"\", p4FontSize, \"20px\");\n+\n+        testFontSizeOfControls(rtFontSize, \"\", p1FontSize, \"\",\n+                p2FontSize, \"\", p3FontSize, \"\", p4FontSize, \"\");\n+         *\/\n@@ -180,0 +372,35 @@\n+    private void testFontSizeOfControls(double rtFontSize, String l0s,\n+                                        double p1FontSize, String l1s,\n+                                        double p2FontSize, String l2s,\n+                                        double p3FontSize, String l3s,\n+                                        double p4FontSize, String l4s) {\n+\n+        Property l0Font = new Property(l0s);\n+        Property l1Font = new Property(l1s);\n+        Property l2Font = new Property(l2s);\n+        Property l3Font = new Property(l3s);\n+        Property l4Font = new Property(l4s);\n+\n+        String l0FontStyle = l0s == \"\" ? \"\" : (\"-fx-font-size: \" + l0s);\n+        String l1FontStyle = l1s == \"\" ? \"\" : (\"-fx-font-size: \" + l1s);\n+        String l2FontStyle = l2s == \"\" ? \"\" : (\"-fx-font-size: \" + l2s);\n+        String l3FontStyle = l3s == \"\" ? \"\" : (\"-fx-font-size: \" + l3s);\n+        String l4FontStyle = l4s == \"\" ? \"\" : (\"-fx-font-size: \" + l4s);\n+\n+        l0.setStyle(l0FontStyle);\n+        l1.setStyle(l1FontStyle);\n+        l2.setStyle(l2FontStyle);\n+        l3.setStyle(l3FontStyle);\n+        l4.setStyle(l4FontStyle);\n+\n+        double l0FontSize = l0Font.getValue(rtFontSize);\n+        double l1FontSize = l1Font.getValue(p1FontSize);\n+        double l2FontSize = l2Font.getValue(p2FontSize);\n+        double l3FontSize = l3Font.getValue(p3FontSize);\n+        double l4FontSize = l4Font.getValue(p4FontSize);\n+\n+        verifyFontSizes(l0FontSize, l1FontSize, l2FontSize, l3FontSize, l4FontSize);\n+    }\n+    \/\/ -fx-font-size tests - end\n+\n+\n@@ -190,37 +417,12 @@\n-    public void absoluteSizePropertiesTest() {\n-        l1.setStyle(\"-fx-font-size:  20px; -fx-padding:  5px; -fx-label-padding:  6px;\" +\n-                \"-fx-max-width:  200px; -fx-max-height: 100px;\" +\n-                \"-fx-min-width:  198px; -fx-min-height:  98px;\" +\n-                \"-fx-pref-width: 199px; -fx-pref-height: 99px;\" +\n-                \"-fx-background-color: red; -fx-background-radius: 5px; -fx-background-insets: 3px;\");\n-        l2.setStyle(\"-fx-font-size: 0.5em; -fx-padding: 10px; -fx-label-padding: 11px;\" +\n-                \"-fx-max-width:  210px; -fx-max-height:  110px;\" +\n-                \"-fx-min-width:  208px; -fx-min-height:  108px;\" +\n-                \"-fx-pref-width: 209px; -fx-pref-height: 109px;\" +\n-                \"-fx-background-color: red; -fx-background-radius: 4px; -fx-background-insets: 2px;\");\n-        root.applyCss();\n-        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n-\n-        assertEquals(20,  l1.getFont().getSize(), 0);\n-        assertEquals(5,   l1.getPadding().getLeft(), 0);\n-        assertEquals(6,   l1.getLabelPadding().getLeft(), 0);\n-        assertEquals(200, l1.getMaxWidth(), 0);\n-        assertEquals(198, l1.getMinWidth(), 0);\n-        assertEquals(199, l1.getPrefWidth(), 0);\n-        assertEquals(100, l1.getMaxHeight(), 0);\n-        assertEquals(98,  l1.getMinHeight(), 0);\n-        assertEquals(99,  l1.getPrefHeight(), 0);\n-        assertEquals(5,   l1.getBackground().getFills().get(0).getRadii().getTopLeftHorizontalRadius(), 0);\n-        assertEquals(3,   l1.getBackground().getFills().get(0).getInsets().getLeft(), 0);\n-\n-        assertEquals(24,  l2.getFont().getSize(), 0);\n-        assertEquals(10,  l2.getPadding().getLeft(), 0);\n-        assertEquals(11,  l2.getLabelPadding().getLeft(), 0);\n-        assertEquals(210, l2.getMaxWidth(), 0);\n-        assertEquals(208, l2.getMinWidth(), 0);\n-        assertEquals(209, l2.getPrefWidth(), 0);\n-        assertEquals(110, l2.getMaxHeight(), 0);\n-        assertEquals(108, l2.getMinHeight(), 0);\n-        assertEquals(109, l2.getPrefHeight(), 0);\n-        assertEquals(4,   l2.getBackground().getFills().get(0).getRadii().getTopLeftHorizontalRadius(), 0);\n-        assertEquals(2,   l2.getBackground().getFills().get(0).getInsets().getLeft(), 0);\n+    public void absolutePropertySizeTest() {\n+\n+        \/\/ absolute font size, absolute property sizes\n+        TestLabel testL1 = new TestLabel(l1, \"20px\", \"5px\", \"6px\", \"200px\", \"100px\",\n+                \"198px\", \"98px\", \"199px\", \"99px\", \"5px\", \"3px\");\n+\n+        \/\/ relative font size, absolute property sizes\n+        TestLabel testL2 = new TestLabel(l2, \"0.5em\", \"10px\", \"11px\", \"210px\", \"110px\",\n+                \"208px\", \"108px\", \"209px\", \"109px\", \"4px\", \"2px\");\n+\n+        testL1.verifySizes();\n+        testL2.verifySizes();\n@@ -230,39 +432,12 @@\n-    public void propertySizesRelativeToFontSizeOfControlTest() {\n-        l1.setStyle(\"-fx-font-size: 0.5em; -fx-padding: 0.5em;  -fx-label-padding: 0.25em;\" +\n-                \"-fx-max-width:  20em; -fx-max-height:  10em;\" +\n-                \"-fx-min-width:  18em; -fx-min-height:  8em;\" +\n-                \"-fx-pref-width: 19em; -fx-pref-height: 9em;\" +\n-                \"-fx-background-color: red; -fx-background-radius: 0.2em; -fx-background-insets: 0.1em;\");\n-        l2.setStyle(\"-fx-font-size:  20px; -fx-padding: 0.25em; -fx-label-padding: 0.2em;\" +\n-                \"-fx-max-width:  20em; -fx-max-height:  10em;\" +\n-                \"-fx-min-width:  18em; -fx-min-height:  8em;\" +\n-                \"-fx-pref-width: 19em; -fx-pref-height: 9em;\" +\n-                \"-fx-background-color: red; -fx-background-radius: 0.1em; -fx-background-insets: 0.05em;\");\n-        root.applyCss();\n-        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n-\n-        double l1FontSize = ROOT_FONT_SIZE * 0.5;\n-        assertEquals(l1FontSize, l1.getFont().getSize(), 0);\n-        assertEquals(l1FontSize * 0.5, l1.getPadding().getLeft(), 0);\n-        assertEquals(l1FontSize * 0.25,  l1.getLabelPadding().getLeft(), 0);\n-        assertEquals(l1FontSize * 20, l1.getMaxWidth(), 0);\n-        assertEquals(l1FontSize * 18, l1.getMinWidth(), 0);\n-        assertEquals(l1FontSize * 19, l1.getPrefWidth(), 0);\n-        assertEquals(l1FontSize * 10, l1.getMaxHeight(), 0);\n-        assertEquals(l1FontSize * 8,  l1.getMinHeight(), 0);\n-        assertEquals(l1FontSize * 9,  l1.getPrefHeight(), 0);\n-        assertEquals(l1FontSize * 0.2, l1.getBackground().getFills().get(0).getRadii().getTopLeftHorizontalRadius(), 0.01);\n-        assertEquals(l1FontSize * 0.1, l1.getBackground().getFills().get(0).getInsets().getLeft(), 0.01);\n-\n-        double l2FontSize = 20;\n-        assertEquals(l2FontSize, l2.getFont().getSize(), 0);\n-        assertEquals(5,  l2.getPadding().getLeft(), 0);\n-        assertEquals(4,  l2.getLabelPadding().getLeft(), 0);\n-        assertEquals(l2FontSize * 20, l2.getMaxWidth(), 0);\n-        assertEquals(l2FontSize * 18, l2.getMinWidth(), 0);\n-        assertEquals(l2FontSize * 19, l2.getPrefWidth(), 0);\n-        assertEquals(l2FontSize * 10, l2.getMaxHeight(), 0);\n-        assertEquals(l2FontSize * 8,  l2.getMinHeight(), 0);\n-        assertEquals(l2FontSize * 9,  l2.getPrefHeight(), 0);\n-        assertEquals(l2FontSize * 0.1, l2.getBackground().getFills().get(0).getRadii().getTopLeftHorizontalRadius(), 0);\n-        assertEquals(l2FontSize * 0.05, l2.getBackground().getFills().get(0).getInsets().getLeft(), 0.01);\n+    public void relativePropertySizeTest() {\n+\n+        \/\/ relative font size, relative property sizes\n+        TestLabel testL1 = new TestLabel(l1, \"0.5em\", \"0.5em\", \"0.25em\", \"20em\", \"10em\",\n+                \"18em\", \"8em\", \"19em\", \"9em\", \"0.2em\", \"0.1em\");\n+\n+        \/\/ absolute font size, relative property sizes\n+        TestLabel testL2 = new TestLabel(l2, \"20px\", \"0.25em\", \"0.125em\", \"17em\", \"7em\",\n+                \"15em\", \"5em\", \"16em\", \"6em\", \"0.1em\", \"0.05em\");\n+\n+        testL1.verifySizes();\n+        testL2.verifySizes();\n@@ -272,44 +447,87 @@\n-    public void propertySizesRelativeToFontSizeOfParentTest() {\n-        l1.setStyle(\"-fx-padding: 0.5em;   -fx-label-padding: 0.25em;\" +\n-                \"-fx-max-width:  20em; -fx-max-height:  10em;\" +\n-                \"-fx-min-width:  18em; -fx-min-height:  8em;\" +\n-                \"-fx-pref-width: 19em; -fx-pref-height: 9em;\" +\n-                \"-fx-background-color: red; -fx-background-radius: 0.2em; -fx-background-insets: 0.1em;\");\n-        p2.setStyle(\"-fx-font-size: 0.5em; -fx-label-padding: 0.25em;\" +\n-                \"-fx-max-width:  20em; -fx-max-height:  10em;\" +\n-                \"-fx-min-width:  18em; -fx-min-height:  8em;\" +\n-                \"-fx-pref-width: 19em; -fx-pref-height: 9em;\" +\n-                \"-fx-background-color: red; -fx-background-radius: 0.15em; -fx-background-insets: 0.075em;\");\n-        l2.setStyle(\"-fx-padding: 0.25em;  -fx-label-padding: 0.125em;\" +\n-                \"-fx-max-width:  17em; -fx-max-height:  7em;\" +\n-                \"-fx-min-width:  15em; -fx-min-height:  5em;\" +\n-                \"-fx-pref-width: 16em; -fx-pref-height: 6em;\" +\n-                \"-fx-background-color: red; -fx-background-radius: 0.1em; -fx-background-insets: 0.05em;\");\n-        root.applyCss();\n-        assertEquals(ROOT_FONT_SIZE, l0.getFont().getSize(), 0);\n-\n-        double l1FontSize = ROOT_FONT_SIZE;\n-        assertEquals(l1FontSize, l1.getFont().getSize(), 0);\n-        assertEquals(l1FontSize * 0.5, l1.getPadding().getLeft(), 0);\n-        assertEquals(l1FontSize * 0.25, l1.getLabelPadding().getLeft(), 0);\n-        assertEquals(l1FontSize * 20, l1.getMaxWidth(), 0);\n-        assertEquals(l1FontSize * 18, l1.getMinWidth(), 0);\n-        assertEquals(l1FontSize * 19, l1.getPrefWidth(), 0);\n-        assertEquals(l1FontSize * 10, l1.getMaxHeight(), 0);\n-        assertEquals(l1FontSize * 8,  l1.getMinHeight(), 0);\n-        assertEquals(l1FontSize * 9,  l1.getPrefHeight(), 0);\n-        assertEquals(l1FontSize * 0.2, l1.getBackground().getFills().get(0).getRadii().getTopLeftHorizontalRadius(), 0.01);\n-        assertEquals(l1FontSize * 0.1, l1.getBackground().getFills().get(0).getInsets().getLeft(), 0.01);\n-\n-        double l2FontSize = ROOT_FONT_SIZE * 0.5;\n-        assertEquals(l2FontSize, l2.getFont().getSize(), 0);\n-        assertEquals(l2FontSize * 0.25,  l2.getPadding().getLeft(), 0);\n-        assertEquals(l2FontSize * 0.125,  l2.getLabelPadding().getLeft(), 0);\n-        assertEquals(l2FontSize * 17, l2.getMaxWidth(), 0);\n-        assertEquals(l2FontSize * 15, l2.getMinWidth(), 0);\n-        assertEquals(l2FontSize * 16, l2.getPrefWidth(), 0);\n-        assertEquals(l2FontSize * 7,  l2.getMaxHeight(), 0);\n-        assertEquals(l2FontSize * 5,  l2.getMinHeight(), 0);\n-        assertEquals(l2FontSize * 6,  l2.getPrefHeight(), 0);\n-        assertEquals(l2FontSize * 0.1, l2.getBackground().getFills().get(0).getRadii().getTopLeftHorizontalRadius(), 0.01);\n-        assertEquals(l2FontSize * 0.05, l2.getBackground().getFills().get(0).getInsets().getLeft(), 0.01);\n+    public void propertySizesCombinationTest() {\n+        verifyCombinationsWithParentFontSizes(\"\", \"\", \"\", \"\", \"\");\n+        verifyCombinationsWithParentFontSizes(\"200px\", \"\", \"\", \"\", \"\");\n+        verifyCombinationsWithParentFontSizes(\"20em\", \"\", \"\", \"\", \"\");\n+\n+        verifyCombinationsWithParentFontSizes(\"\", \"0.9em\", \"0.8em\", \"0.7em\", \"0.6em\");\n+        verifyCombinationsWithParentFontSizes(\"\", \"300px\", \"0.8em\", \"0.7em\", \"0.6em\");\n+        verifyCombinationsWithParentFontSizes(\"\", \"0.9em\", \"0.8em\", \"100px\", \"0.6em\");\n+        verifyCombinationsWithParentFontSizes(\"\", \"180px\", \"160px\", \"140px\", \"120px\");\n+\n+        verifyCombinationsWithParentFontSizes(\"200px\", \"0.9em\", \"0.8em\", \"0.7em\", \"0.6em\");\n+        verifyCombinationsWithParentFontSizes(\"200px\", \"300px\", \"0.8em\", \"0.7em\", \"0.6em\");\n+        verifyCombinationsWithParentFontSizes(\"200px\", \"0.9em\", \"0.8em\", \"100px\", \"0.6em\");\n+        verifyCombinationsWithParentFontSizes(\"200px\", \"180px\", \"160px\", \"140px\", \"120px\");\n+\n+        verifyCombinationsWithParentFontSizes(\"20em\", \"0.9em\", \"0.8em\", \"0.7em\", \"0.6em\");\n+        verifyCombinationsWithParentFontSizes(\"20em\", \"300px\", \"0.8em\", \"0.7em\", \"0.6em\");\n+        verifyCombinationsWithParentFontSizes(\"20em\", \"0.9em\", \"0.8em\", \"100px\", \"0.6em\");\n+        verifyCombinationsWithParentFontSizes(\"20em\", \"180px\", \"160px\", \"140px\", \"120px\");\n+    }\n+\n+\n+    private void verifyCombinationsWithParentFontSizes(String rootFont, String p1Font,\n+                                                       String p2Font, String p3Font, String p4Font) {\n+\n+        String rootStyle = rootFont.equals(\"\") ? \"\" : \"-fx-font-size: \" + rootFont;\n+        String p1Style = p1Font.equals(\"\") ? \"\" : \"-fx-font-size: \" + p1Font;\n+        String p2Style = p2Font.equals(\"\") ? \"\" : \"-fx-font-size: \" + p2Font;\n+        String p3Style = p3Font.equals(\"\") ? \"\" : \"-fx-font-size: \" + p3Font;\n+        String p4Style = p4Font.equals(\"\") ? \"\" : \"-fx-font-size: \" + p4Font;\n+\n+        root.setStyle(rootStyle);\n+        p1.setStyle(p1Style);\n+        p2.setStyle(p2Style);\n+        p3.setStyle(p3Style);\n+        p4.setStyle(p4Style);\n+\n+        verifyCombinationsOfChildrenProperties1();\n+        verifyCombinationsOfChildrenProperties2();\n+    }\n+\n+    TestLabel testL0, testL1, testL2, testL3, testL4;\n+\n+    private void verifyCombinationsOfChildrenProperties1() {\n+        testL0 = new TestLabel(l0, \"0.5em\", \"0.5em\", \"0.5em\", \"20em\",\n+                \"10em\", \"18em\", \"8em\", \"19em\", \"9em\", \"0.2em\", \"0.1em\");\n+\n+        testL1 = new TestLabel(l1, \"0.5em\", \"0.5em\", \"0.25em\", \"20em\",\n+                \"10em\", \"18em\", \"8em\", \"19em\", \"9em\", \"0.2em\", \"0.1em\");\n+\n+        testL2 = new TestLabel(l2, \"0.5em\", \"0.5em\", \"0.25em\", \"20em\",\n+                \"10em\", \"18em\", \"8em\", \"19em\", \"9em\", \"0.2em\", \"0.1em\");\n+\n+        testL3 = new TestLabel(l3, \"0.5em\", \"0.5em\", \"0.25em\", \"20em\",\n+                \"10em\", \"18em\", \"8em\", \"19em\", \"9em\", \"0.2em\", \"0.1em\");\n+\n+        testL4 = new TestLabel(l4, \"0.5em\", \"0.5em\", \"0.25em\", \"20em\",\n+                \"10em\", \"18em\", \"8em\", \"19em\", \"9em\", \"0.2em\", \"0.1em\");\n+\n+        verifyLabelSizes();\n+    }\n+\n+    private void verifyCombinationsOfChildrenProperties2() {\n+        testL0 = new TestLabel(l0, \"0.5em\", \"0.5em\", \"0.5em\", \"20em\",\n+                \"10em\", \"18em\", \"8em\", \"19em\", \"9em\", \"0.2em\", \"0.1em\");\n+\n+        testL1 = new TestLabel(l1, \"100px\", \"5px\", \"2.5px\", \"90px\",\n+                \"10em\", \"50px\", \"10px\", \"19px\", \"9em\", \"0.2em\", \"0.1em\");\n+\n+        testL2 = new TestLabel(l2, \"0.5em\", \"0.5em\", \"0.25em\", \"20em\",\n+                \"10em\", \"40px\", \"8em\", \"19em\", \"9em\", \"6px\", \"0.1em\");\n+\n+        testL3 = new TestLabel(l3, \"200px\", \"0.5em\", \"0.25em\", \"120px\",\n+                \"60px\", \"110px\", \"40px\", \"100px\", \"50px\", \"0.2em\", \"2px\");\n+\n+        testL4 = new TestLabel(l4, \"200px\", \"5px\", \"4px\", \"180px\",\n+                \"30px\", \"40px\", \"10px\", \"120px\", \"35px\", \"6px\", \"2px\");\n+\n+        verifyLabelSizes();\n+    }\n+\n+    private void verifyLabelSizes() {\n+        testL0.verifySizes();\n+        testL1.verifySizes();\n+        testL2.verifySizes();\n+        testL3.verifySizes();\n+        testL4.verifySizes();\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/css\/PropertySizeTest.java","additions":425,"deletions":207,"binary":false,"changes":632,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,1 @@\n+import javafx.scene.text.Font;\n@@ -285,0 +286,4 @@\n+    public static void recalculateRelativeSizeProperties(Node node, Font fontForRelativeSizes) {\n+        nodeAccessor.recalculateRelativeSizeProperties(node, fontForRelativeSizes);\n+    }\n+\n@@ -361,0 +366,1 @@\n+        void recalculateRelativeSizeProperties(Node node, Font fontForRelativeSizes);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/NodeHelper.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -574,0 +574,134 @@\n+    \/\/ This method is a reduced version of transitionToState() method, it is added as a fix for JDK-8204568.\n+    \/\/ Any modifications to the method transitionToStates() should be relatively applied here if needed.\n+    \/\/ Currently this method is executed only by Labeled.fontProperty().set(), when it's font size\n+    \/\/ is changed by LabeledText.\n+    void recalculateRelativeSizeProperties(final Node node, Font fontForRelativeSizes) {\n+\n+        if (transitionStateInProgress) {\n+            \/\/ If transitionToState() is being executed for the current control then all the css properties will get\n+            \/\/ calculated there, and so we need to do anything here.\n+            return;\n+        }\n+        if (cacheContainer == null) {\n+            return;\n+        }\n+        final StyleMap styleMap = getStyleMap(node);\n+        if (styleMap == null) {\n+            return;\n+        }\n+        \/\/ if the style-map is empty, then we are only looking for inherited styles.\n+        final boolean inheritOnly = styleMap.isEmpty();\n+\n+        final Set<PseudoClass>[] transitionStates = getTransitionStates(node);\n+        CalculatedValue cachedFont = new CalculatedValue(fontForRelativeSizes, null, false);\n+\n+        final List<CssMetaData<? extends Styleable,  ?>> styleables = node.getCssMetaData();\n+        final int numStyleables = styleables.size();\n+\n+        for (int n = 0; n < numStyleables; n++) {\n+\n+            final CssMetaData<Styleable,Object> cssMetaData =\n+                    (CssMetaData<Styleable,Object>)styleables.get(n);\n+\n+            \/\/ Don't bother looking up styles that don't inherit.\n+            if (inheritOnly && cssMetaData.isInherits() == false) {\n+                continue;\n+            }\n+\n+            \/\/ Skip the lookup if we know there isn't a chance for this property\n+            \/\/ to be set (usually due to a \"bind\").\n+            if (!cssMetaData.isSettable(node)) {\n+                continue;\n+            }\n+\n+            final String property = cssMetaData.getProperty();\n+            boolean isFontProperty = property.equals(\"-fx-font\") || property.equals(\"-fx-font-size\");\n+            \/\/ This method is executed as a result of change in font size of the control, hence font property should be skipped.\n+            if (isFontProperty) {\n+                continue;\n+            }\n+\n+            CascadingStyle style = getStyle(node, property, styleMap, transitionStates[0]);\n+            if (style != null) {\n+                final ParsedValue cssValue = style.getParsedValue();\n+                ObjectProperty<StyleOrigin> whence = new SimpleObjectProperty<>(style.getOrigin());\n+                ParsedValue resolved = resolveLookups(node, cssValue, styleMap, transitionStates[0], whence, new HashSet<>());\n+                boolean isRelative = ParsedValueImpl.containsFontRelativeSize(resolved, false);\n+                if (!isRelative) {\n+                    continue;\n+                }\n+            } else {\n+                final List<CssMetaData<? extends Styleable, ?>> subProperties = cssMetaData.getSubProperties();\n+                final int numSubProperties = (subProperties != null) ? subProperties.size() : 0;\n+                if (numSubProperties == 0) {\n+                    continue;\n+                } else {\n+                    \/\/ TODO: further optimization\n+                    \/\/ determine a way to find if any of the sub properties are specified with relative size.\n+                    \/\/ if none is relatively sized then continue;\n+                }\n+            }\n+\n+            \/\/ If code flow reaches here then it means that the property is\n+            \/\/ explicitly specified in css style by user with a relative size.\n+            \/\/ We should not use the cached value as relative\n+            \/\/ sized properties must be recalculated when font size changes.\n+\n+            CalculatedValue calculatedValue = lookup(node, cssMetaData, styleMap, transitionStates[0],\n+                        node, cachedFont);\n+\n+            \/\/ lookup is not supposed to return null.\n+            if (calculatedValue == null || calculatedValue == SKIP) {\n+                continue;\n+            }\n+\n+            try {\n+                StyleableProperty styleableProperty = cssMetaData.getStyleableProperty(node);\n+                final StyleOrigin originOfCurrentValue = styleableProperty.getStyleOrigin();\n+                final StyleOrigin originOfCalculatedValue = calculatedValue.getOrigin();\n+\n+                if (originOfCalculatedValue == null) {\n+                    assert false : styleableProperty.toString();\n+                    continue;\n+                }\n+\n+                if (originOfCurrentValue == StyleOrigin.USER) {\n+                    if (originOfCalculatedValue == StyleOrigin.USER_AGENT) {\n+                        continue;\n+                    }\n+                }\n+\n+                final Object value = calculatedValue.getValue();\n+                final Object currentValue = styleableProperty.getValue();\n+\n+                if ((originOfCurrentValue != originOfCalculatedValue)\n+                        || (currentValue != null\n+                        ? currentValue.equals(value) == false\n+                        : value != null)) {\n+\n+                    if (LOGGER.isLoggable(Level.FINER)) {\n+                        LOGGER.finer(property + \", call applyStyle: \" + styleableProperty + \", value =\" +\n+                                String.valueOf(value) + \", originOfCalculatedValue=\" + originOfCalculatedValue);\n+                    }\n+                    styleableProperty.applyStyle(originOfCalculatedValue, value);\n+\n+                    CalculatedValue initialValue = new CalculatedValue(currentValue, originOfCurrentValue, true);\n+                    cacheContainer.cssSetProperties.put(cssMetaData, initialValue);\n+                }\n+            } catch (Exception e) {\n+                \/\/ This exception should have been handled by transitionToState().\n+                \/\/ Here, we will not try to reset the value but only log the warning.\n+                StyleableProperty styleableProperty = cssMetaData.getStyleableProperty(node);\n+\n+                final String msg = String.format(\"Failed to recalculate and set css [%s] on [%s] due to '%s'\\n\",\n+                        cssMetaData.getProperty(), styleableProperty, e.getMessage());\n+\n+                PlatformLogger logger = Logging.getCSSLogger();\n+                if (logger.isLoggable(Level.WARNING)) {\n+                    logger.warning(msg);\n+                }\n+            }\n+        }\n+    }\n+\n+    private boolean transitionStateInProgress = false;\n@@ -656,0 +790,1 @@\n+        transitionStateInProgress = true;\n@@ -841,0 +976,1 @@\n+        transitionStateInProgress = false;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/CssStyleHelper.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -591,0 +591,5 @@\n+            @Override\n+            public void recalculateRelativeSizeProperties(Node node, Font fontForRelativeSizes) {\n+                node.recalculateRelativeSizeProperties(fontForRelativeSizes);\n+            }\n+\n@@ -9417,0 +9422,6 @@\n+    final void recalculateRelativeSizeProperties(Font fontForRelativeSizes) {\n+        if (styleHelper != null) {\n+            styleHelper.recalculateRelativeSizeProperties(this, fontForRelativeSizes);\n+        }\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"}]}