{"files":[{"patch":"@@ -456,0 +456,2 @@\n+    private boolean resetInProgress = false;\n+\n@@ -462,0 +464,1 @@\n+        resetInProgress = true;\n@@ -477,0 +480,1 @@\n+        resetInProgress = false;\n@@ -592,3 +596,14 @@\n-        if (transitionStateInProgress) {\n-            \/\/ If transitionToState() is being executed for the current control then all the css properties will get\n-            \/\/ calculated there, and so we need to do anything here.\n+        if (transitionStateInProgress || resetInProgress) {\n+            \/\/ It is not required to recalculate the relative sized properties,\n+            \/\/ 1. [transitionStateInProgress]: if transitionToState() is being executed for the current control then all\n+            \/\/    the css properties will get calculated there, OR\n+            \/\/ 2. [resetInProgress]: if resetToInitialValues() is being executed, which sets font to default font.\n+            \/\/    The css style set by user if any is applied post this reset which calls\n+            \/\/    recalculateRelativeSizeProperties() again.\n+            \/\/    JDK-8266966: StyleManager.styleMapList stores the StyleMaps of nodes using an id as key.\n+            \/\/    Each node stores this id in CssStyleHelper.CacheContainer.smapId\n+            \/\/    CssStyleHelper.getStyleMap(node) gets a StyleMap from StyleManager.styleMapList by using the\n+            \/\/    CssStyleHelper.CacheContainer.smapId as key.\n+            \/\/    When resetToInitialValues() is in progress, the StyleManager.styleMapList gets updated, therefore\n+            \/\/    calls to getStyleMap(node) should be avoided, as it may return an incorrect StyleMap for a given node.\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/CssStyleHelper.java","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import junit.framework.Assert;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import test.util.Util;\n+import static org.junit.Assert.assertTrue;\n+\n+public class CssStyleHelperTest {\n+\n+    private static CountDownLatch startupLatch;\n+    private static StackPane root;\n+    private static Stage stage;\n+    private static Label label1;\n+    private static Button button;\n+    private static CheckBox checkBox;\n+    private static Label label2;\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            stage = primaryStage;\n+            label1 = new Label(\"Label1\");\n+            button = new Button(\"aButton\");\n+            checkBox = new CheckBox(\"aCheckBox\");\n+            label2 = new Label(\"Label2\");\n+\n+            root = new StackPane();\n+            root.getChildren().addAll(label1, button, checkBox, label2);\n+            Scene scene = new Scene(root, 200, 200);\n+            scene.getStylesheets().add(getClass().getResource(\"RootFont.css\").toExternalForm());\n+            primaryStage.setScene(scene);\n+            primaryStage.setOnShown(l -> {\n+                Platform.runLater(() -> startupLatch.countDown());\n+            });\n+            primaryStage.show();\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void initFX() throws Exception {\n+        startupLatch = new CountDownLatch(1);\n+        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n+        assertTrue(\"Timeout waiting for FX runtime to start\",\n+                   startupLatch.await(15, TimeUnit.SECONDS));\n+    }\n+\n+    @Test\n+    public void testCssIsCorrectlyAppliedToLabelOnStageHideAndShow() throws Exception {\n+        \/\/ sanity\n+        Assert.assertNull(\"Label1 should have no background\", label1.getBackground());\n+        Assert.assertNull(\"Label2 should have no background\", label2.getBackground());\n+\n+        startupLatch = new CountDownLatch(1);\n+        Util.runAndWait(() -> {\n+            stage.hide();\n+            stage.show();\n+        });\n+        assertTrue(\"Timeout waiting for Stage to show after hide\",\n+                   startupLatch.await(15, TimeUnit.SECONDS));\n+\n+        Assert.assertNull(\"Label1 should have no background\", label1.getBackground());\n+        Assert.assertNull(\"Label2 should have no background\", label2.getBackground());\n+    }\n+\n+    @AfterClass\n+    public static void teardownOnce() {\n+        Platform.runLater(() -> {\n+            stage.hide();\n+            Platform.exit();\n+        });\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/CssStyleHelperTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+.root {\n+    -fx-font-size: 50px;\n+}\n","filename":"tests\/system\/src\/test\/resources\/test\/javafx\/scene\/RootFont.css","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"}]}