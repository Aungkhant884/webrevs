{"files":[{"patch":"@@ -28,0 +28,4 @@\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n@@ -32,2 +36,0 @@\n-import java.util.Arrays;\n-\n@@ -191,5 +193,2 @@\n-        private InvalidationListener[] invalidationListeners;\n-        private ChangeListener<? super T>[] changeListeners;\n-        private int invalidationSize;\n-        private int changeSize;\n-        private boolean locked;\n+        private Map<InvalidationListener, Integer> invalidationListeners = new LinkedHashMap<>();\n+        private Map<ChangeListener<? super T>, Integer> changeListeners = new LinkedHashMap<>();\n@@ -197,0 +196,2 @@\n+        private int weakChangeListenerGcCount = 2;\n+        private int weakInvalidationListenerGcCount = 2;\n@@ -200,2 +201,3 @@\n-            this.invalidationListeners = new InvalidationListener[] {listener0, listener1};\n-            this.invalidationSize = 2;\n+            this.invalidationListeners.put(listener0, 1);\n+            \/\/ use merge here in case listener1 == listener0\n+            this.invalidationListeners.merge(listener1, 1, Integer::sum);\n@@ -206,2 +208,3 @@\n-            this.changeListeners = new ChangeListener[] {listener0, listener1};\n-            this.changeSize = 2;\n+            this.changeListeners.put(listener0, 1);\n+            \/\/ use merge here in case listener1 == listener0\n+            this.changeListeners.merge(listener1, 1, Integer::sum);\n@@ -213,4 +216,2 @@\n-            this.invalidationListeners = new InvalidationListener[] {invalidationListener};\n-            this.invalidationSize = 1;\n-            this.changeListeners = new ChangeListener[] {changeListener};\n-            this.changeSize = 1;\n+            this.invalidationListeners.put(invalidationListener, 1);\n+            this.changeListeners.put(changeListener, 1);\n@@ -222,14 +223,4 @@\n-            if (invalidationListeners == null) {\n-                invalidationListeners = new InvalidationListener[] {listener};\n-                invalidationSize = 1;\n-            } else {\n-                final int oldCapacity = invalidationListeners.length;\n-                if (locked) {\n-                    final int newCapacity = (invalidationSize < oldCapacity)? oldCapacity : (oldCapacity * 3)\/2 + 1;\n-                    invalidationListeners = Arrays.copyOf(invalidationListeners, newCapacity);\n-                } else if (invalidationSize == oldCapacity) {\n-                    invalidationSize = trim(invalidationSize, invalidationListeners);\n-                    if (invalidationSize == oldCapacity) {\n-                        final int newCapacity = (oldCapacity * 3)\/2 + 1;\n-                        invalidationListeners = Arrays.copyOf(invalidationListeners, newCapacity);\n-                    }\n+            if (invalidationListeners.size() == weakInvalidationListenerGcCount) {\n+                removeWeakListeners(invalidationListeners);\n+                if (invalidationListeners.size() == weakInvalidationListenerGcCount) {\n+                    weakInvalidationListenerGcCount = (weakInvalidationListenerGcCount * 3)\/2 + 1;\n@@ -237,1 +228,0 @@\n-                invalidationListeners[invalidationSize++] = listener;\n@@ -239,0 +229,1 @@\n+            invalidationListeners.merge(listener, 1, Integer::sum);\n@@ -244,27 +235,7 @@\n-            if (invalidationListeners != null) {\n-                for (int index = 0; index < invalidationSize; index++) {\n-                    if (listener.equals(invalidationListeners[index])) {\n-                        if (invalidationSize == 1) {\n-                            if (changeSize == 1) {\n-                                return new SingleChange<T>(observable, changeListeners[0]);\n-                            }\n-                            invalidationListeners = null;\n-                            invalidationSize = 0;\n-                        } else if ((invalidationSize == 2) && (changeSize == 0)) {\n-                            return new SingleInvalidation<T>(observable, invalidationListeners[1-index]);\n-                        } else {\n-                            final int numMoved = invalidationSize - index - 1;\n-                            final InvalidationListener[] oldListeners = invalidationListeners;\n-                            if (locked) {\n-                                invalidationListeners = new InvalidationListener[invalidationListeners.length];\n-                                System.arraycopy(oldListeners, 0, invalidationListeners, 0, index);\n-                            }\n-                            if (numMoved > 0) {\n-                                System.arraycopy(oldListeners, index+1, invalidationListeners, index, numMoved);\n-                            }\n-                            invalidationSize--;\n-                            if (!locked) {\n-                                invalidationListeners[invalidationSize] = null; \/\/ Let gc do its work\n-                            }\n-                        }\n-                        break;\n+            if (invalidationListeners.containsKey(listener)) {\n+                if (invalidationListeners.merge(listener, -1, Integer::sum) == 0) {\n+                    invalidationListeners.remove(listener);\n+                    if (invalidationListeners.isEmpty() && changeListeners.size() == 1) {\n+                        return new SingleChange<T>(observable, changeListeners.keySet().iterator().next());\n+                    } else if ((invalidationListeners.size() == 1) && changeListeners.isEmpty()) {\n+                        return new SingleInvalidation<T>(observable, invalidationListeners.keySet().iterator().next());\n@@ -279,14 +250,4 @@\n-            if (changeListeners == null) {\n-                changeListeners = new ChangeListener[] {listener};\n-                changeSize = 1;\n-            } else {\n-                final int oldCapacity = changeListeners.length;\n-                if (locked) {\n-                    final int newCapacity = (changeSize < oldCapacity)? oldCapacity : (oldCapacity * 3)\/2 + 1;\n-                    changeListeners = Arrays.copyOf(changeListeners, newCapacity);\n-                } else if (changeSize == oldCapacity) {\n-                    changeSize = trim(changeSize, changeListeners);\n-                    if (changeSize == oldCapacity) {\n-                        final int newCapacity = (oldCapacity * 3)\/2 + 1;\n-                        changeListeners = Arrays.copyOf(changeListeners, newCapacity);\n-                    }\n+            if (changeListeners.size() == weakChangeListenerGcCount) {\n+                removeWeakListeners(changeListeners);\n+                if (changeListeners.size() == weakChangeListenerGcCount) {\n+                    weakChangeListenerGcCount = (weakChangeListenerGcCount * 3)\/2 + 1;\n@@ -294,1 +255,0 @@\n-                changeListeners[changeSize++] = listener;\n@@ -296,1 +256,2 @@\n-            if (changeSize == 1) {\n+            changeListeners.merge(listener, 1, Integer::sum);\n+            if (changeListeners.size() == 1) {\n@@ -304,27 +265,7 @@\n-            if (changeListeners != null) {\n-                for (int index = 0; index < changeSize; index++) {\n-                    if (listener.equals(changeListeners[index])) {\n-                        if (changeSize == 1) {\n-                            if (invalidationSize == 1) {\n-                                return new SingleInvalidation<T>(observable, invalidationListeners[0]);\n-                            }\n-                            changeListeners = null;\n-                            changeSize = 0;\n-                        } else if ((changeSize == 2) && (invalidationSize == 0)) {\n-                            return new SingleChange<T>(observable, changeListeners[1-index]);\n-                        } else {\n-                            final int numMoved = changeSize - index - 1;\n-                            final ChangeListener<? super T>[] oldListeners = changeListeners;\n-                            if (locked) {\n-                                changeListeners = new ChangeListener[changeListeners.length];\n-                                System.arraycopy(oldListeners, 0, changeListeners, 0, index);\n-                            }\n-                            if (numMoved > 0) {\n-                                System.arraycopy(oldListeners, index+1, changeListeners, index, numMoved);\n-                            }\n-                            changeSize--;\n-                            if (!locked) {\n-                                changeListeners[changeSize] = null; \/\/ Let gc do its work\n-                            }\n-                        }\n-                        break;\n+            if (changeListeners.containsKey(listener)) {\n+                if (changeListeners.merge(listener, -1, Integer::sum) == 0) {\n+                    changeListeners.remove(listener);\n+                    if (changeListeners.isEmpty() && invalidationListeners.size() == 1) {\n+                        return new SingleInvalidation<T>(observable, invalidationListeners.keySet().iterator().next());\n+                    } else if ((changeListeners.size() == 1) && invalidationListeners.isEmpty()) {\n+                        return new SingleChange<T>(observable, changeListeners.keySet().iterator().next());\n@@ -339,4 +280,16 @@\n-            final InvalidationListener[] curInvalidationList = invalidationListeners;\n-            final int curInvalidationSize = invalidationSize;\n-            final ChangeListener<? super T>[] curChangeList = changeListeners;\n-            final int curChangeSize = changeSize;\n+            \/\/ Take a copy of listeners to ensure adding and removing listeners\n+            \/\/ while the observers are being notified is safe\n+            final Map<InvalidationListener, Integer> curInvalidationList = new LinkedHashMap<>(invalidationListeners);\n+            final Map<ChangeListener<? super T>, Integer> curChangeList = new LinkedHashMap<>(changeListeners);\n+\n+            curInvalidationList.entrySet().forEach(entry -> fireInvalidationListeners(entry));\n+\n+            if (!curChangeList.isEmpty()) {\n+                final T oldValue = currentValue;\n+                currentValue = observable.getValue();\n+                final boolean changed = (currentValue == null)? (oldValue != null) : !currentValue.equals(oldValue);\n+                if (changed) {\n+                    curChangeList.entrySet().forEach(entry -> fireChangeListeners(oldValue, entry));\n+                }\n+            }\n+        }\n@@ -344,0 +297,3 @@\n+        private void fireInvalidationListeners(Entry<InvalidationListener, Integer> entry) {\n+            final InvalidationListener listener = entry.getKey();\n+            final int registrationCount = entry.getValue();\n@@ -345,7 +301,2 @@\n-                locked = true;\n-                for (int i = 0; i < curInvalidationSize; i++) {\n-                    try {\n-                        curInvalidationList[i].invalidated(observable);\n-                    } catch (Exception e) {\n-                        Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);\n-                    }\n+                for (int i = 0; i < registrationCount; i++) {\n+                    listener.invalidated(observable);\n@@ -353,13 +304,12 @@\n-                if (curChangeSize > 0) {\n-                    final T oldValue = currentValue;\n-                    currentValue = observable.getValue();\n-                    final boolean changed = (currentValue == null)? (oldValue != null) : !currentValue.equals(oldValue);\n-                    if (changed) {\n-                        for (int i = 0; i < curChangeSize; i++) {\n-                            try {\n-                                curChangeList[i].changed(observable, oldValue, currentValue);\n-                            } catch (Exception e) {\n-                                Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);\n-                            }\n-                        }\n-                    }\n+            } catch (Exception e) {\n+                Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(\n+                    Thread.currentThread(), e);\n+            }\n+        }\n+\n+        private void fireChangeListeners(final T oldValue, Entry<ChangeListener<? super T>, Integer> entry) {\n+            final ChangeListener<? super T> listener = entry.getKey();\n+            final int registrationCount = entry.getValue();\n+            try {\n+                for (int i  = 0; i < registrationCount; i++) {\n+                    listener.changed(observable, oldValue, currentValue);\n@@ -367,2 +317,3 @@\n-            } finally {\n-                locked = false;\n+            } catch (Exception e) {\n+                Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(\n+                    Thread.currentThread(), e);\n@@ -372,1 +323,0 @@\n-\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ExpressionHelper.java","additions":77,"deletions":127,"binary":false,"changes":204,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Map;\n@@ -29,0 +30,1 @@\n+\n@@ -58,0 +60,7 @@\n+    protected static void removeWeakListeners(final Map<?, Integer> listeners) {\n+        Predicate<Object> p = t -> t instanceof WeakListener &&\n+                ((WeakListener)t).wasGarbageCollected();\n+\n+        listeners.entrySet().removeIf(e -> p.test(e.getKey()));\n+    }\n+\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ExpressionHelperBase.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -648,0 +648,38 @@\n+    @Test\n+    public void testRegisteringAndRemovingSameChangeListenerTwice() {\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[0]);\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[0]);\n+        observable.set(DATA_2);\n+        ExpressionHelper.fireValueChangedEvent(helper);\n+        changeListener[0].check(observable, DATA_1, DATA_2, 2);\n+\n+        helper = ExpressionHelper.removeListener(helper, changeListener[0]);\n+        observable.set(DATA_1);\n+        ExpressionHelper.fireValueChangedEvent(helper);\n+        changeListener[0].check(observable, DATA_2, DATA_1, 1);\n+\n+        helper = ExpressionHelper.removeListener(helper, changeListener[0]);\n+        observable.set(DATA_2);\n+        ExpressionHelper.fireValueChangedEvent(helper);\n+        changeListener[0].check(null, UNDEFINED, UNDEFINED, 0);\n+    }\n+\n+    @Test\n+    public void testRegisteringAndRemovingSameInvalidationListenerTwice() {\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0]);\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0]);\n+        observable.set(DATA_2);\n+        ExpressionHelper.fireValueChangedEvent(helper);\n+        invalidationListener[0].check(observable, 2);\n+\n+        helper = ExpressionHelper.removeListener(helper, invalidationListener[0]);\n+        observable.set(DATA_1);\n+        ExpressionHelper.fireValueChangedEvent(helper);\n+        invalidationListener[0].check(observable, 1);\n+\n+        helper = ExpressionHelper.removeListener(helper, invalidationListener[0]);\n+        observable.set(DATA_2);\n+        ExpressionHelper.fireValueChangedEvent(helper);\n+        invalidationListener[0].check(null, 0);\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ExpressionHelperTest.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.ArrayList;\n@@ -32,0 +33,3 @@\n+import java.util.Map;\n+import java.util.Set;\n+\n@@ -112,1 +116,1 @@\n-                return getInvalidationListenerFromGenericClass(clazz, helper);\n+                return getCollectionsInvalidationListenerFromGenericClass(clazz, helper);\n@@ -119,1 +123,1 @@\n-                return getInvalidationListenerFromGenericClass(clazz, helper);\n+                return getCollectionsInvalidationListenerFromGenericClass(clazz, helper);\n@@ -126,1 +130,1 @@\n-                return getInvalidationListenerFromGenericClass(clazz, helper);\n+                return getCollectionsInvalidationListenerFromGenericClass(clazz, helper);\n@@ -180,1 +184,1 @@\n-                return getChangeListenerFromGenericClass(clazz, helper);\n+                return getCollectionsChangeListenerFromGenericClass(clazz, helper);\n@@ -187,1 +191,1 @@\n-                return getChangeListenerFromGenericClass(clazz, helper);\n+                return getCollectionsChangeListenerFromGenericClass(clazz, helper);\n@@ -194,1 +198,1 @@\n-                return getChangeListenerFromGenericClass(clazz, helper);\n+                return getCollectionsChangeListenerFromGenericClass(clazz, helper);\n@@ -341,1 +345,1 @@\n-    private static List<InvalidationListener> getInvalidationListenerFromGenericClass(Class clazz, Object helper) {\n+    private static List<InvalidationListener> getCollectionsInvalidationListenerFromGenericClass(Class clazz, Object helper) {\n@@ -366,1 +370,1 @@\n-    private static <T> List<ChangeListener<? super T>> getChangeListenerFromGenericClass(Class clazz, Object helper) {\n+    private static <T> List<ChangeListener<? super T>> getCollectionsChangeListenerFromGenericClass(Class clazz, Object helper) {\n@@ -380,0 +384,28 @@\n+\n+    private static <T> List<ChangeListener<? super T>> getChangeListenerFromGenericClass(Class clazz, Object helper) {\n+        try {\n+            final Field field = clazz.getDeclaredField(\"changeListeners\");\n+            field.setAccessible(true);\n+            final Map<ChangeListener<? super T>, Integer> listeners = (Map<ChangeListener<? super T>, Integer>)field.get(helper);\n+            if (listeners != null) {\n+                final ArrayList<ChangeListener<? super T>> list = new ArrayList<>();\n+                list.addAll(listeners.keySet());\n+                return list;\n+            }\n+        } catch (Exception ex) { }\n+        return Collections.emptyList();\n+    }\n+\n+    private static List<InvalidationListener> getInvalidationListenerFromGenericClass(Class clazz, Object helper) {\n+        try {\n+            final Field field = clazz.getDeclaredField(\"invalidationListeners\");\n+            field.setAccessible(true);\n+            final Map<InvalidationListener, Integer> listeners = (Map<InvalidationListener, Integer>)field.get(helper);\n+            if (listeners != null) {\n+                final ArrayList<InvalidationListener> list = new ArrayList<>();\n+                list.addAll(listeners.keySet());\n+                return list;\n+            }\n+        } catch (Exception ex) { }\n+        return Collections.emptyList();\n+    }\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ExpressionHelperUtility.java","additions":40,"deletions":8,"binary":false,"changes":48,"status":"modified"}]}