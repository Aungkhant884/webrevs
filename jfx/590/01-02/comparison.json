{"files":[{"patch":"@@ -960,1 +960,1 @@\n-    @Deprecated(since = \"18\", forRemoval = true)\n+    @Deprecated(since = \"21\")\n@@ -1206,1 +1206,1 @@\n-    @Deprecated(since = \"18\", forRemoval = true)\n+    @Deprecated(since = \"21\")\n@@ -1228,1 +1228,1 @@\n-     * @since 18\n+     * @since 21\n@@ -1245,1 +1245,1 @@\n-     * @since 18\n+     * @since 21\n@@ -1262,1 +1262,1 @@\n-     * @since 18\n+     * @since 21\n@@ -1383,1 +1383,1 @@\n-     * @since 18\n+     * @since 21\n@@ -1400,1 +1400,1 @@\n-     * @since 18\n+     * @since 21\n@@ -1417,1 +1417,1 @@\n-     * @since 18\n+     * @since 21\n@@ -1439,1 +1439,1 @@\n-    @Deprecated(since = \"18\", forRemoval = true)\n+    @Deprecated(since = \"21\")\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/Bindings.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.lang.ref.WeakReference;\n@@ -38,1 +37,5 @@\n-import javafx.collections.*;\n+import javafx.collections.MapChangeListener;\n+import javafx.collections.ObservableMap;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n@@ -312,3 +315,4 @@\n-    public void unbindContent(Object object) {\n-        if (object instanceof ObservableMap<?, ?>) {\n-            ContentBinding.unbind(this, (ObservableMap<K, V>)object);\n+    public void unbindContent(Object source) {\n+        Objects.requireNonNull(source);\n+        if (source instanceof ObservableMap<?, ?>) {\n+            ContentBinding.unbind(this, (ObservableMap<K, V>)source);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/MapPropertyBase.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-     * effectively read-only: any call to {@link #setValue(Object)} will fail with an exception.\n+     * effectively read-only: any call to {@link #setValue(Object)} will fail with {@code IllegalStateException}.\n@@ -62,1 +62,1 @@\n-     * already bidirectionally bound, calling this method will fail with an exception.\n+     * already bidirectionally bound, calling this method will fail with {@code IllegalStateException}.\n@@ -94,2 +94,2 @@\n-     * changed accordingly. When the binding is first established, the value of the this property\n-     * is set to the current value of the other property.\n+     * changed accordingly. When the binding is first established, the value of this property is\n+     * set to the current value of the other property.\n@@ -111,2 +111,2 @@\n-     * unidirectionally bound, any attempt to establish a bidirectional binding will fail with an\n-     * exception.\n+     * unidirectionally bound, any attempt to establish a bidirectional binding will fail with\n+     * {@code IllegalStateException}.\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/Property.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -63,0 +63,4 @@\n+     * <p>\n+     * If this property is already bidirectionally content-bound to the other property, the existing binding\n+     * will be removed as if by calling {@link #unbindContentBidirectional(ObservableList)} before the new\n+     * binding is established.\n@@ -87,1 +91,1 @@\n-     * @since 18\n+     * @since 21\n@@ -110,1 +114,1 @@\n-    @Deprecated(since = \"18\", forRemoval = true)\n+    @Deprecated(since = \"21\")\n@@ -130,2 +134,2 @@\n-     * the content binding to fail. In this case, the content binding is removed because the bound list and\n-     * the source list may be out-of-sync.\n+     * the content binding to fail. If the content binding fails, it is automatically removed because the\n+     * bound list and the source list may be out of sync.\n@@ -147,1 +151,1 @@\n-     * @since 18\n+     * @since 21\n@@ -162,1 +166,1 @@\n-    @Deprecated(since = \"18\", forRemoval = true)\n+    @Deprecated(since = \"21\")\n@@ -175,1 +179,1 @@\n-     * @since 18\n+     * @since 21\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyListProperty.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -62,0 +62,4 @@\n+     * <p>\n+     * If this property is already bidirectionally content-bound to the other property, the existing binding\n+     * will be removed as if by calling {@link #unbindContentBidirectional(ObservableMap)} before the new\n+     * binding is established.\n@@ -86,1 +90,1 @@\n-     * @since 18\n+     * @since 21\n@@ -109,1 +113,1 @@\n-    @Deprecated(since = \"18\", forRemoval = true)\n+    @Deprecated(since = \"21\")\n@@ -129,2 +133,2 @@\n-     * the content binding to fail. In this case, the content binding is removed because the bound map and\n-     * the source map may be out-of-sync.\n+     * the content binding to fail. If the content binding fails, it is automatically removed because the\n+     * bound map and the source map may be out of sync.\n@@ -141,2 +145,4 @@\n-     * Deletes a content binding between the {@link javafx.collections.ObservableMap}, that is\n-     * wrapped in this {@code ReadOnlyMapProperty}, and another {@code Object}.\n+     * Removes the content binding that was established with {@link #bindContent(ObservableMap)}.\n+     * <p>\n+     * The content of the wrapped map will remain unchanged.\n+     * If this property is not content-bound, calling this method has no effect.\n@@ -144,1 +150,1 @@\n-     * @since 18\n+     * @since 21\n@@ -151,2 +157,4 @@\n-     * Deletes a content binding between the {@link javafx.collections.ObservableMap}, that is\n-     * wrapped in this {@code ReadOnlyMapProperty}, and another {@code Object}.\n+     * Removes the content binding that was established with {@link #bindContent(ObservableMap)}.\n+     * <p>\n+     * The content of the wrapped map will remain unchanged.\n+     * If this property is not content-bound, calling this method has no effect.\n@@ -159,1 +167,1 @@\n-    @Deprecated(since = \"18\", forRemoval = true)\n+    @Deprecated(since = \"21\")\n@@ -172,1 +180,1 @@\n-     * @since 18\n+     * @since 21\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyMapProperty.java","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -61,0 +61,4 @@\n+     * <p>\n+     * If this property is already bidirectionally content-bound to the other property, the existing binding\n+     * will be removed as if by calling {@link #unbindContentBidirectional(ObservableSet)} before the new\n+     * binding is established.\n@@ -85,1 +89,1 @@\n-     * @since 18\n+     * @since 21\n@@ -108,1 +112,1 @@\n-    @Deprecated(since = \"18\", forRemoval = true)\n+    @Deprecated(since = \"21\")\n@@ -128,2 +132,2 @@\n-     * the content binding to fail. In this case, the content binding is removed because the bound set and\n-     * the source set may be out-of-sync.\n+     * the content binding to fail. If the content binding fails, it is automatically removed because the\n+     * bound set and the source set may be out of sync.\n@@ -145,1 +149,1 @@\n-     * @since 18\n+     * @since 21\n@@ -162,1 +166,1 @@\n-    @Deprecated(since = \"18\", forRemoval = true)\n+    @Deprecated(since = \"21\")\n@@ -175,1 +179,1 @@\n-     * @since 18\n+     * @since 21\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlySetProperty.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import java.util.Objects;\n@@ -314,0 +315,1 @@\n+        Objects.requireNonNull(source);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/SetPropertyBase.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-    @Deprecated(since = \"18\", forRemoval = true)\n+    @Deprecated(since = \"21\")\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/StringProperty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}