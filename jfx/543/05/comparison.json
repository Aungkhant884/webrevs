{"files":[{"patch":"@@ -54,0 +54,1 @@\n+import javax.print.attribute.standard.Destination;\n@@ -71,0 +72,2 @@\n+import java.io.File;\n+import java.net.URI;\n@@ -335,1 +338,1 @@\n-        String name =  pJob2D.getJobName();\n+        String name = pJob2D.getJobName();\n@@ -340,0 +343,11 @@\n+\n+    private void updateOutputFile() {\n+        Destination dest =\n+            (Destination)printReqAttrSet.get(Destination.class);\n+        if (dest != null) {\n+            settings.setOutputFile(dest.getURI().getPath());\n+        } else {\n+            settings.setOutputFile(\"\");\n+        }\n+    }\n+\n@@ -396,1 +410,1 @@\n-     * it means that we are u  sing the printer default.\n+     * it means that we are using the printer default.\n@@ -581,0 +595,1 @@\n+        updateOutputFile();\n@@ -594,0 +609,1 @@\n+        syncOutputFile();\n@@ -609,0 +625,11 @@\n+    private void syncOutputFile() {\n+        printReqAttrSet.remove(Destination.class);\n+        String file = settings.getOutputFile();\n+        if (file != null && !file.isEmpty()) {\n+             \/\/ check SE, check access ?\n+             URI uri = (new File(file)).toURI();\n+             Destination d = new Destination(uri);\n+             printReqAttrSet.add(d);\n+        }\n+    }\n+\n@@ -800,0 +827,4 @@\n+            String file = settings.getOutputFile();\n+            if (file != null && !file.isEmpty()) {\n+                security.checkWrite(file);\n+            }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/j2d\/print\/J2DPrinterJob.java","additions":33,"deletions":2,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -465,0 +465,92 @@\n+    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/  START OUTPUTFILE \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    private SimpleStringProperty outputFile;\n+\n+    \/**\n+     * A {@code StringProperty} representing the\n+     * name of a filesystem file, to which the platform printer\n+     * driver should spool the rendered print data.\n+     * <p>\n+     * Applications can use this to programmatically request print-to-file\n+     * behavior where the native print system is capable of spooling the\n+     * output to a filesystem file, rather than the printer device.\n+     * <p>\n+     * This is often useful where the printer driver generates a format\n+     * such as Postscript or PDF, and the application intends to distribute\n+     * the result instead of printing it, or for some other reason the\n+     * application does not want physical media (paper) emitted by the printer.\n+     * <p>\n+     * The default value is an empty string, which is interpreted as unset,\n+     * equivalent to null, which means output is sent to the printer.\n+     * So in order to reset to print to the printer, clear the value of\n+     * this property by setting it to null or an empty string.\n+     * <p>\n+     * Additionally if the application displays a printer dialog which allows\n+     * the user to specify a file destination, including altering an application\n+     * specified file destination, the value of this property will reflect that\n+     * user-specified choice, including clearing it to reset to print to\n+     * the printer, if the user does so.\n+     * <p>\n+     * If the print system does not support print-to-file, then this\n+     * setting will be ignored.\n+     * <p>\n+     * If the specified name specifies a non-existent path, or does not specify\n+     * a user writable file, when printing the results are platform-dependent.\n+     * Possible behaviours might include replacement with a default output file location,\n+     * printing to the printer instead, or a platform printing error.\n+     * If a {@code SecurityManager} is installed and it denies access to the\n+     * specified file a {@code SecurityException} may be thrown.\n+     *\n+     * @defaultValue an empty string\n+     *\n+     * @return the name of a printer spool file\n+     * @since 17\n+     *\/\n+    public final StringProperty outputFileProperty() {\n+        if (outputFile == null) {\n+            outputFile =\n+                new SimpleStringProperty(JobSettings.this, \"outputFile\", \"\") {\n+\n+                @Override\n+                public void set(String value) {\n+                    if (!isJobNew()) {\n+                        return;\n+                    }\n+                    if (value == null) {\n+                        value = \"\";\n+                    }\n+                    super.set(value);\n+                }\n+\n+                @Override\n+                public void bind(ObservableValue<? extends String>\n+                                 rawObservable) {\n+                    throw new\n+                        RuntimeException(\"OutputFile property cannot be bound\");\n+                }\n+\n+                @Override\n+                public void bindBidirectional(Property<String> other) {\n+                    throw new\n+                        RuntimeException(\"OutputFile property cannot be bound\");\n+                }\n+\n+                @Override\n+                public String toString() {\n+                     return get();\n+                }\n+            };\n+        }\n+        return outputFile;\n+    }\n+\n+    public String getOutputFile() {\n+        return outputFileProperty().get();\n+    }\n+\n+\n+    public void setOutputFile(String filePath) {\n+        outputFileProperty().set(filePath);\n+    }\n+    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/  END OUTPUTFILE \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/print\/JobSettings.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -0,0 +1,161 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.print.*;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.Group;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.layout.*;\n+import javafx.scene.paint.Color;\n+import javafx.scene.text.Text;\n+import javafx.stage.Screen;\n+import javafx.stage.Stage;\n+\n+public class PrintToFileTest extends Application {\n+\n+    private final int WIDTH = 400;\n+    private final int HEIGHT = 400;\n+\n+    private volatile boolean passed = false;\n+    private volatile boolean failed = false;\n+    private Scene scene;\n+    private VBox root;\n+\n+    public static void main(String[] args) {\n+        launch(args);\n+    }\n+\n+    public void start(Stage stage) {\n+        stage.setWidth(WIDTH);\n+        stage.setHeight(HEIGHT);\n+        stage.setTitle(\"Printing to file test\");\n+        Rectangle2D bds = Screen.getPrimary().getVisualBounds();\n+        stage.setX((bds.getWidth() - WIDTH) \/ 2);\n+        stage.setY((bds.getHeight() - HEIGHT) \/ 2);\n+        stage.setScene(createScene());\n+        stage.show();\n+    }\n+\n+    static final String instructions =\n+        \"This tests that programmatically specifying print to file works.\\n\" +\n+        \"Select the Print button to run the test\\n\";\n+\n+    static final String noprinter =\n+            \"There are no printers installed. This test cannot be run\\n\";\n+\n+    private TextArea createInfo(String msg) {\n+        TextArea t = new TextArea(msg);\n+        t.setWrapText(true);\n+        t.setEditable(false);\n+        return t;\n+    }\n+\n+    private Scene createScene() {\n+\n+        root = new VBox();\n+        scene = new Scene(root);\n+\n+        String msg = instructions;\n+        if (Printer.getDefaultPrinter() == null) {\n+            msg = noprinter;\n+        }\n+        TextArea info = createInfo(msg);\n+        root.getChildren().add(info);\n+\n+        Button print = new Button(\"Print\");\n+        print.setLayoutX(80);\n+        print.setLayoutY(200);\n+        print.setOnAction(e -> runTest());\n+        root.getChildren().add(print);\n+\n+        return scene;\n+    }\n+\n+    public void runTest() {\n+        new Thread(() -> {\n+            passed = false;\n+            failed = false;\n+            System.out.println(\"START OF PRINT JOB\");\n+            PrinterJob job = PrinterJob.createPrinterJob();\n+            JobSettings settings = job.getJobSettings();\n+            String fileName = \"printtofiletest.prn\";\n+            settings.outputFileProperty().set(fileName);\n+            String destFileName =  settings.outputFileProperty().get();\n+            System.out.println(\"dest=\"+ destFileName);\n+            File f = new File(destFileName);\n+            f.delete();\n+            Platform.runLater(() -> {\n+                Text t = new Text(\"file=\"+settings.getOutputFile());\n+                root.getChildren().add(t);\n+            });\n+            Text printNode = new Text(\"\\n\\nTEST\\nabc\\ndef\");\n+            job.printPage(printNode);\n+            job.endJob();\n+            try {\n+                 \/\/ wait for printer spooler to create the file.\n+                 Thread.sleep(3000);\n+            } catch (InterruptedException e) {\n+            }\n+            if (f.exists()) {\n+                System.out.println(\"created file \" + f);\n+                passed = true;\n+            } else {\n+                failed = true;\n+            }\n+            System.out.println(\"END OF PRINT JOB\");\n+        }).start();\n+        new Thread(() -> {\n+            while (!passed && !failed) {\n+                try {\n+                    Thread.sleep(500);\n+                } catch (InterruptedException e) {\n+                }\n+            }\n+            Platform.runLater(() -> displayMessage());\n+\n+        }).start();\n+    }\n+\n+    private void displayMessage() {\n+        Text t = new Text();\n+        if (passed) {\n+            t.setText(\"TEST PASSED!\");\n+        } else {\n+            t.setText(\"TEST FAILED!\");\n+        }\n+        root.getChildren().add(t);\n+    }\n+}\n","filename":"tests\/manual\/printing\/PrintToFileTest.java","additions":161,"deletions":0,"binary":false,"changes":161,"status":"added"}]}