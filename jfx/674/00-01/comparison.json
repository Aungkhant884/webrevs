{"files":[{"patch":"@@ -0,0 +1,278 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.com.sun.marlin;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Locale;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.embed.swing.SwingFXUtils;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.Group;\n+import javafx.scene.Scene;\n+import javafx.scene.SnapshotParameters;\n+import javafx.scene.image.PixelReader;\n+import javafx.scene.image.WritableImage;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Polygon;\n+import javafx.scene.transform.Translate;\n+import javafx.stage.Screen;\n+import javafx.stage.Stage;\n+import javax.imageio.IIOImage;\n+import javax.imageio.ImageIO;\n+import javax.imageio.ImageWriteParam;\n+import javax.imageio.ImageWriter;\n+import javax.imageio.stream.ImageOutputStream;\n+\n+import junit.framework.AssertionFailedError;\n+import org.junit.AfterClass;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import test.util.Util;\n+import static test.util.Util.TIMEOUT;\n+\n+\/**\n+ * Clip rendering test\n+ *\n+ * @test\n+ * @summary verify that huge polygon is properly rasterized\n+ * @bug 8274066\n+ *\/\n+public class HugePolygonClipTest {\n+\n+    private static final Double LARGE_X_COORDINATE = 4194304.250;\n+    private static final int SCENE_WIDTH = 600;\n+    private static final int SCENE_HEIGHT = 400;\n+\n+    static final int BLUE_PIXEL = 0xff0000ff;\n+    static final int RED_PIXEL = 0xffff0000;\n+    static final int WHITE_PIXEL = 0xffffffff;\n+\n+    static final boolean SAVE_IMAGE = false;\n+\n+    \/\/ Used to launch the application before running any test\n+    private static final CountDownLatch launchLatch = new CountDownLatch(1);\n+\n+    static {\n+        Locale.setDefault(Locale.US);\n+        \/*\n+            System.out.println(\"BLUE_PIXEL: \" + BLUE_PIXEL);\n+            System.out.println(\"RED_PIXEL:  \" + RED_PIXEL);\n+         *\/\n+        \/\/ enable Marlin logging:\n+        System.setProperty(\"prism.marlin.log\", \"true\");\n+\n+        System.setProperty(\"prism.marlin.clip\", \"true\");\n+\n+        System.setProperty(\"prism.marlin.subPixel_log2_X\", \"8\");\n+    }\n+\n+    \/\/ Singleton Application instance\n+    static MyApp myApp;\n+\n+    \/\/ Application class. An instance is created and initialized before running\n+    \/\/ the first test, and it lives through the execution of all tests.\n+    public static class MyApp extends Application {\n+\n+        Stage stage = null;\n+\n+        public MyApp() {\n+            super();\n+        }\n+\n+        @Override\n+        public void init() {\n+            HugePolygonClipTest.myApp = this;\n+        }\n+\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            this.stage = primaryStage;\n+\n+            stage.setScene(new Scene(new Group()));\n+            stage.setTitle(\"HugePolygonClipTest\");\n+            stage.show();\n+\n+            launchLatch.countDown();\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void setupOnce() {\n+\n+        \/\/ Start the Application\n+        new Thread(() -> Application.launch(MyApp.class, (String[]) null)).start();\n+\n+        try {\n+            if (!launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n+                throw new AssertionFailedError(\"Timeout waiting for Application to launch\");\n+            }\n+\n+        } catch (InterruptedException ex) {\n+            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n+            err.initCause(ex);\n+            throw err;\n+        }\n+\n+        assertEquals(0, launchLatch.getCount());\n+    }\n+\n+    @AfterClass\n+    public static void teardownOnce() {\n+        Platform.exit();\n+    }\n+\n+    @Test(timeout = 10000)\n+    public void TestHugePolygonCoords() throws InterruptedException {\n+        Util.runAndWait(() -> {\n+\n+            double dpi = Screen.getPrimary().getDpi();\n+            System.out.println(\"dpi: \" + dpi);\n+\n+            double dpiScale = Screen.getPrimary().getOutputScaleX();\n+            System.out.println(\"dpiScale: \" + dpiScale);\n+\n+            \/\/ original test case => large moveTo in Filler but no bug in Stroker:\n+            Double longWidth = LARGE_X_COORDINATE + SCENE_WIDTH + 0.001;\n+\n+            final Polygon veryWidePolygon;\n+\n+            veryWidePolygon = new Polygon(\n+                    longWidth, 50.0,\n+                    longWidth, 100.0,\n+                    0.0, 100.0,\n+                    0.0, 0.0\n+            );\n+\n+            veryWidePolygon.setFill(Color.BLUE);\n+            veryWidePolygon.setStroke(Color.RED);\n+            veryWidePolygon.setStrokeWidth(2);\n+\n+            Group group = new Group(veryWidePolygon);\n+            group.getTransforms().add(new Translate(-longWidth + SCENE_WIDTH, 100.0));\n+\n+            Scene scene = new Scene(group, SCENE_WIDTH, SCENE_HEIGHT, Color.WHITE);\n+            myApp.stage.setScene(scene);\n+\n+            final SnapshotParameters sp = new SnapshotParameters();\n+            sp.setViewport(new Rectangle2D(0, 0, SCENE_WIDTH, SCENE_HEIGHT));\n+\n+            final WritableImage img = scene.getRoot().snapshot(sp, new WritableImage(SCENE_WIDTH, SCENE_HEIGHT));\n+\n+            if (SAVE_IMAGE) {\n+                try {\n+                    saveImage(img, OUTPUT_DIR, \"TestHugePolygonCoords.png\");\n+                } catch (IOException ex) {\n+                    \/\/ ignore\n+                }\n+            }\n+\n+            \/\/ Check image on few pixels:\n+            final PixelReader pr = img.getPixelReader();\n+\n+            final int x = SCENE_WIDTH \/ 2;\n+            \/\/ 10, 5 = blue\n+            checkColumn(pr, x, SCENE_HEIGHT);\n+        });\n+    }\n+\n+    private static void checkColumn(final PixelReader pr, final int x, final int maxY) {\n+\n+        boolean inside = false;\n+        boolean prevRed = false;\n+\n+        for (int y = 0; y < maxY; y++) {\n+            final int rgb = pr.getArgb(x, y);\n+            \/\/ System.out.println(\"pixel at (\" + x + \", \" + y + \") = \" + rgb);\n+\n+            if (rgb == RED_PIXEL) {\n+                if (!prevRed) {\n+                    prevRed = true;\n+                    inside = !inside;\n+                    \/\/ System.out.println(\"inside: \"+inside);\n+                }\n+            } else {\n+                prevRed = false;\n+                final int expected = (inside) ? BLUE_PIXEL : WHITE_PIXEL;\n+\n+                if (rgb != expected) {\n+                    fail(\"bad pixel at (\" + x + \", \" + y\n+                            + \") = \" + rgb + \" expected: \" + expected);\n+                }\n+            }\n+        }\n+    }\n+\n+    static final File OUTPUT_DIR = new File(\".\");\n+\n+    static void saveImage(final WritableImage image, final File resDirectory, final String imageFileName) throws IOException {\n+        saveImage(SwingFXUtils.fromFXImage(image, null), resDirectory, imageFileName);\n+    }\n+\n+    static void saveImage(final BufferedImage image, final File resDirectory, final String imageFileName) throws IOException {\n+        final Iterator<ImageWriter> itWriters = ImageIO.getImageWritersByFormatName(\"PNG\");\n+        if (itWriters.hasNext()) {\n+            final ImageWriter writer = itWriters.next();\n+\n+            final ImageWriteParam writerParams = writer.getDefaultWriteParam();\n+            writerParams.setProgressiveMode(ImageWriteParam.MODE_DISABLED);\n+\n+            final File imgFile = new File(resDirectory, imageFileName);\n+\n+            if (!imgFile.exists() || imgFile.canWrite()) {\n+                System.out.println(\"saveImage: saving image as PNG [\" + imgFile + \"]...\");\n+                imgFile.delete();\n+\n+                \/\/ disable cache in temporary files:\n+                ImageIO.setUseCache(false);\n+\n+                final long start = System.nanoTime();\n+\n+                \/\/ PNG uses already buffering:\n+                final ImageOutputStream imgOutStream = ImageIO.createImageOutputStream(new FileOutputStream(imgFile));\n+\n+                writer.setOutput(imgOutStream);\n+                try {\n+                    writer.write(null, new IIOImage(image, null, null), writerParams);\n+                } finally {\n+                    imgOutStream.close();\n+\n+                    final long time = System.nanoTime() - start;\n+                    System.out.println(\"saveImage: duration= \" + (time \/ 1000000l) + \" ms.\");\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/marlin\/HugePolygonClipTest.java","additions":278,"deletions":0,"binary":false,"changes":278,"status":"added"}]}