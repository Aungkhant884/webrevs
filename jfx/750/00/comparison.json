{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -425,1 +425,1 @@\n-                            contentType = MediaUtils.filenameToContentType(uriString); \/\/ We need to provide at least something\n+                            contentType = MediaUtils.filenameToContentType(uri.getPath()); \/\/ We need to provide at least something\n@@ -441,1 +441,1 @@\n-                                    contentType = MediaUtils.filenameToContentType(uriString);\n+                                    contentType = MediaUtils.filenameToContentType(uri.getPath());\n@@ -472,1 +472,1 @@\n-                contentType = MediaUtils.filenameToContentType(uriString);\n+                contentType = MediaUtils.filenameToContentType(uri.getPath());\n@@ -600,1 +600,1 @@\n-        \/\/ first check if it's cached\n+        \/\/ check if it's cached\n@@ -608,2 +608,1 @@\n-        \/\/ then fall back on other methods\n-        ConnectionHolder holder;\n+        \/\/ check if it is local file\n@@ -611,7 +610,10 @@\n-            holder = ConnectionHolder.createFileConnectionHolder(uri);\n-        } else if (uri.toString().endsWith(\".m3u8\") || uri.toString().endsWith(\".m3u\")) {\n-            holder = ConnectionHolder.createHLSConnectionHolder(uri);\n-        } else {\n-            synchronized (propertyLock) {\n-                holder = ConnectionHolder.createURIConnectionHolder(uri, connectionProperties);\n-            }\n+            return ConnectionHolder.createFileConnectionHolder(uri);\n+        }\n+\n+        \/\/ check if it is HTTP Live Streaming\n+        \/\/    - uri path ends with .m3u8 or .m3u\n+        \/\/    - contentType is \"application\/vnd.apple.mpegurl\" or \"audio\/mpegurl\"\n+        String uriPath = uri.getPath();\n+        if (uriPath != null && (uriPath.endsWith(\".m3u8\") ||\n+                                uriPath.endsWith(\".m3u\"))) {\n+            return ConnectionHolder.createHLSConnectionHolder(uri);\n@@ -620,1 +622,10 @@\n-        return holder;\n+        String type = getContentType(); \/\/ Should be ready by now\n+        if (type != null && (type.equals(MediaUtils.CONTENT_TYPE_M3U8) ||\n+                             type.equals(MediaUtils.CONTENT_TYPE_M3U))) {\n+            return ConnectionHolder.createHLSConnectionHolder(uri);\n+        }\n+\n+        \/\/ media file over http\/https\n+        synchronized  (propertyLock) {\n+            return ConnectionHolder.createURIConnectionHolder(uri, connectionProperties);\n+        }\n","filename":"modules\/javafx.media\/src\/main\/java\/com\/sun\/media\/jfxmedia\/locator\/Locator.java","additions":26,"deletions":15,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -161,0 +161,8 @@\n+        } else if ((buf[0] & 0xff) == 0x23\n+                && (buf[1] & 0xff) == 0x45\n+                && (buf[2] & 0xff) == 0x58\n+                && (buf[3] & 0xff) == 0x54\n+                && (buf[4] & 0xff) == 0x4d\n+                && (buf[5] & 0xff) == 0x33\n+                && (buf[6] & 0xff) == 0x55) { \/\/ \"#EXTM3U\"\n+            contentType = CONTENT_TYPE_M3U8;\n@@ -167,1 +175,0 @@\n-\n@@ -175,1 +182,3 @@\n-        String contentType = Locator.DEFAULT_CONTENT_TYPE;\n+        if (filename == null) {\n+            return Locator.DEFAULT_CONTENT_TYPE;\n+        }\n@@ -178,1 +187,0 @@\n-\n@@ -182,18 +190,23 @@\n-            if (extension.equals(FILE_TYPE_AIF) || extension.equals(FILE_TYPE_AIFF)) {\n-                contentType = CONTENT_TYPE_AIFF;\n-            } else if (extension.equals(FILE_TYPE_FLV) || extension.equals(FILE_TYPE_FXM)) {\n-                contentType = CONTENT_TYPE_JFX;\n-            } else if (extension.equals(FILE_TYPE_MPA)) {\n-                contentType = CONTENT_TYPE_MPA;\n-            } else if (extension.equals(FILE_TYPE_WAV)) {\n-                contentType = CONTENT_TYPE_WAV;\n-            } else if (extension.equals(FILE_TYPE_MP4)) {\n-                contentType = CONTENT_TYPE_MP4;\n-            } else if (extension.equals(FILE_TYPE_M4A)) {\n-                contentType = CONTENT_TYPE_M4A;\n-            } else if (extension.equals(FILE_TYPE_M4V)) {\n-                contentType = CONTENT_TYPE_M4V;\n-            } else if (extension.equals(FILE_TYPE_M3U8)) {\n-                contentType = CONTENT_TYPE_M3U8;\n-            } else if (extension.equals(FILE_TYPE_M3U)) {\n-                contentType = CONTENT_TYPE_M3U;\n+            switch (extension) {\n+                case FILE_TYPE_AIF:\n+                case FILE_TYPE_AIFF:\n+                    return CONTENT_TYPE_AIFF;\n+                case FILE_TYPE_FLV:\n+                case FILE_TYPE_FXM:\n+                    return CONTENT_TYPE_JFX;\n+                case FILE_TYPE_MPA:\n+                    return CONTENT_TYPE_MPA;\n+                case FILE_TYPE_WAV:\n+                    return CONTENT_TYPE_WAV;\n+                case FILE_TYPE_MP4:\n+                    return CONTENT_TYPE_MP4;\n+                case FILE_TYPE_M4A:\n+                    return CONTENT_TYPE_M4A;\n+                case FILE_TYPE_M4V:\n+                    return CONTENT_TYPE_M4V;\n+                case FILE_TYPE_M3U8:\n+                    return CONTENT_TYPE_M3U8;\n+                case FILE_TYPE_M3U:\n+                    return CONTENT_TYPE_M3U;\n+                default:\n+                    break;\n@@ -203,1 +216,1 @@\n-        return contentType;\n+        return Locator.DEFAULT_CONTENT_TYPE;\n","filename":"modules\/javafx.media\/src\/main\/java\/com\/sun\/media\/jfxmediaimpl\/MediaUtils.java","additions":36,"deletions":23,"binary":false,"changes":59,"status":"modified"}]}