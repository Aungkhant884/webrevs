{"files":[{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.scene.control.infrastructure;\n+\n+import com.sun.javafx.tk.Toolkit;\n+\n+import static javafx.scene.control.skin.VirtualFlowShim.*;\n+\n+import javafx.scene.control.Control;\n+import javafx.scene.control.ScrollBar;\n+import javafx.scene.control.skin.VirtualContainerBase;\n+import javafx.scene.control.skin.VirtualFlow;\n+import javafx.scene.layout.Region;\n+\n+\/**\n+ * Utility methods to test virtualized controls and cells contained within.\n+ *\n+ * Note: there's a certain overlap with VirtualFlowTestUtils - differences:\n+ * - the controls passed as parameters must already have a skin extending VirtualContainerBase\n+ * - uses newer api (in VirtualizedContainerBase\/VirtualFlow) to access children (vs. lookup)\n+ * - uses alternative constructor of MouseEventFirer for exact control of mouse location\n+ *\n+ *\/\n+public class VirtualizedControlTestUtils {\n+\n+    \/**\n+     * Fires a mouse event onto the middle of the vertical scrollbar's track.\n+     * @throws IllegalStateException if control's skin is not VirtualContainerBase\n+     *\/\n+    public static void fireMouseOnVerticalTrack(Control control) {\n+        ScrollBar scrollBar = getVerticalScrollBar(control);\n+        Region track = (Region) scrollBar.lookup(\".track\");\n+        MouseEventFirer firer = new MouseEventFirer(track, true);\n+        firer.fireMousePressAndRelease();\n+        Toolkit.getToolkit().firePulse();\n+    }\n+\n+    \/**\n+     * Fires a mouse event onto the middle of the horizontal scrollbar's track.\n+     * @throws IllegalStateException if control's skin is not VirtualContainerBase\n+     *\/\n+    public static void fireMouseOnHorizontalTrack(Control control) {\n+        ScrollBar scrollBar = getHorizontalScrollBar(control);\n+        Region track = (Region) scrollBar.lookup(\".track\");\n+        MouseEventFirer firer = new MouseEventFirer(track, true);\n+        firer.fireMousePressAndRelease();\n+        Toolkit.getToolkit().firePulse();\n+    }\n+\n+    \/**\n+     * Returns a vertical ScrollBar of the control.\n+     * @throws IllegalStateException if control's skin is not VirtualContainerBase\n+     *\/\n+    public static ScrollBar getVerticalScrollBar(Control control) {\n+        if (control.getSkin() instanceof VirtualContainerBase) {\n+            VirtualFlow<?> flow = getVirtualFlow((VirtualContainerBase<?, ?>) control.getSkin());\n+            return getVBar(flow);\n+        }\n+        throw new IllegalStateException(\"control's skin must be of type VirtualContainerBase but was: \" + control.getSkin());\n+    }\n+\n+    \/**\n+     * Returns a horizontal ScrollBar of the control.\n+     * @throws IllegalStateException if control's skin is not VirtualContainerBase\n+     *\/\n+    public static ScrollBar getHorizontalScrollBar(Control control) {\n+        if (control.getSkin() instanceof VirtualContainerBase) {\n+            VirtualFlow<?> flow = getVirtualFlow((VirtualContainerBase<?, ?>) control.getSkin());\n+            return getHBar(flow);\n+        }\n+        throw new IllegalStateException(\"control's skin must be of type VirtualContainerBase but was: \" + control.getSkin());\n+    };\n+\n+    private VirtualizedControlTestUtils() {}\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/infrastructure\/VirtualizedControlTestUtils.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,191 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.scene.control.infrastructure;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+import static test.com.sun.javafx.scene.control.infrastructure.VirtualizedControlTestUtils.*;\n+\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.ScrollBar;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+\n+\/**\n+ * Rudimentary test of VirtualizedControlTestUtils.\n+ *\/\n+public class VirtualizedControlTestUtilsTest {\n+\n+    private Scene scene;\n+    private Stage stage;\n+    private Pane root;\n+\n+    int rows;\n+\n+    \/**\n+     * Test that firing on the vertical bar scrolls the control.\n+     *\/\n+    @Test\n+    public void testFireMouseOnVerticalTrack() {\n+        ListView<?> list = createAndShowListView();\n+        ScrollBar scrollBar = getVerticalScrollBar(list);\n+        assertEquals(\"sanity: initial value of scrollBar\", 0, scrollBar.getValue(), 0.1);\n+        fireMouseOnVerticalTrack(list);\n+        assertTrue(\"mouse on track must have scrolled\", scrollBar.getValue() > 0);\n+    }\n+\n+    \/**\n+     * Test that firing on the horizontal bar scrolls the control.\n+     *\/\n+    @Test\n+    public void testFireMouseOnHorizontalTrack() {\n+        ListView<?> list = createAndShowListView();\n+        ScrollBar scrollBar = getHorizontalScrollBar(list);\n+        assertEquals(\"sanity: initial value of scrollBar\", 0, scrollBar.getValue(), 0.1);\n+        fireMouseOnHorizontalTrack(list);\n+        assertTrue(\"mouse on track must have scrolled\", scrollBar.getValue() > 0);\n+    }\n+\n+    @Test (expected=IllegalStateException.class)\n+    public void testGetVerticalScrollBarThrowsWithoutSkin() {\n+        ListView<?> list = new ListView<>();\n+        getVerticalScrollBar(list);\n+    }\n+\n+    @Test (expected=IllegalStateException.class)\n+    public void testGetHorizontalScrollBarThrowsWithoutSkin() {\n+        ListView<?> list = new ListView<>();\n+        getHorizontalScrollBar(list);\n+    }\n+\n+    \/**\n+     * Test the test setup.\n+     *\/\n+    @Test\n+    public void testListViewEditing() {\n+        ListView<?> control = createAndShowListView();\n+        assertEquals(rows, control.getItems().size());\n+        assertEquals(100, scene.getWidth(), 1);\n+        assertEquals(330, scene.getHeight(), 1);\n+        assertTrue(\"sanity: vertical scrollbar visible for list \" ,\n+                getHorizontalScrollBar(control).isVisible());\n+        assertTrue(\"sanity: vertical scrollbar visible for list \" ,\n+                getVerticalScrollBar(control).isVisible());\n+    }\n+\n+  \/\/----------------- setup\n+\n+    \/**\n+     * Creates and shows a ListView configured to be scrollable both vertically and horizontally.\n+     *\/\n+    private ListView<?> createAndShowListView() {\n+        ObservableList<String> baseData = createData(rows, true);\n+        ListView<String> control = new ListView<>(baseData);\n+        showControl(control, true, 100, 330);\n+        return control;\n+    }\n+\n+    \/**\n+     * Creates and returns a list of long\/short (depending on wide parameter) Strings.\n+     *\/\n+    private ObservableList<String> createData(int size, boolean wide) {\n+        ObservableList<String> data = FXCollections.observableArrayList();\n+        String item = wide ? \"something that really really guarantees a horizontal scrollbar is visible  \" : \"item\";\n+        for (int i = 0; i < size; i++) {\n+            data.add(item + i);\n+        }\n+        return data;\n+    }\n+\n+    \/**\n+     * Ensures the control is shown in an active scenegraph. Requests\n+     * focus on the control if focused == true.\n+     *\n+     * @param control the control to show\n+     * @param focused if true, requests focus on the added control\n+     *\/\n+    protected void showControl(Control control, boolean focused) {\n+        showControl(control, focused, -1, -1);\n+    }\n+\n+    \/**\n+     * Ensures the control is shown in an active scenegraph. Requests\n+     * focus on the control if focused == true.\n+     * On first call, sizes the scene to width\/height if width > 0\n+     *\n+     * @param control the control to show\n+     * @param focused if true, requests focus on the added control\n+     * @param width the width of the scene or -1 for auto-sizing\n+     * @param height the height of the scene or -1 for auto-sizing\n+     *\/\n+    protected void showControl(Control control, boolean focused, double width, double height) {\n+        if (root == null) {\n+            root = new VBox();\n+            if (width > 0) {\n+                scene = new Scene(root, width, height);\n+            } else {\n+                scene = new Scene(root);\n+            }\n+            stage = new Stage();\n+            stage.setScene(scene);\n+        }\n+        if (!root.getChildren().contains(control)) {\n+            root.getChildren().add(control);\n+        }\n+        stage.show();\n+        if (focused) {\n+            stage.requestFocus();\n+            control.requestFocus();\n+            assertTrue(control.isFocused());\n+            assertSame(control, scene.getFocusOwner());\n+        }\n+    }\n+\n+    @Before public void setup() {\n+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {\n+            if (throwable instanceof RuntimeException) {\n+                throw (RuntimeException)throwable;\n+            } else {\n+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);\n+            }\n+        });\n+        rows = 60;\n+    }\n+\n+    @After public void cleanup() {\n+        if (stage != null) stage.hide();\n+        Thread.currentThread().setUncaughtExceptionHandler(null);\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/infrastructure\/VirtualizedControlTestUtilsTest.java","additions":191,"deletions":0,"binary":false,"changes":191,"status":"added"},{"patch":"@@ -32,3 +32,1 @@\n-import com.sun.javafx.tk.Toolkit;\n-\n-import static javafx.scene.control.skin.VirtualFlowShim.*;\n+import static test.com.sun.javafx.scene.control.infrastructure.VirtualizedControlTestUtils.*;\n@@ -45,1 +43,0 @@\n-import javafx.scene.control.ScrollBar;\n@@ -60,2 +57,0 @@\n-import javafx.scene.control.skin.VirtualContainerBase;\n-import javafx.scene.control.skin.VirtualFlow;\n@@ -63,1 +58,0 @@\n-import javafx.scene.layout.Region;\n@@ -67,1 +61,0 @@\n-import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n@@ -408,50 +401,0 @@\n-\/\/----------------- Utility methods (TODO: move into infrastructure)\n-\n-    \/**\n-     * Fires a mouse event onto the middle of the vertical scrollbar's track.\n-     * @throws IllegalStateException if control's skin is not VirtualContainerBase\n-     *\/\n-    public static void fireMouseOnVerticalTrack(Control control) {\n-        ScrollBar scrollBar = getVerticalScrollBar(control);\n-        Region track = (Region) scrollBar.lookup(\".track\");\n-        MouseEventFirer firer = new MouseEventFirer(track, true);\n-        firer.fireMousePressAndRelease();\n-        Toolkit.getToolkit().firePulse();\n-    }\n-\n-    \/**\n-     * Fires a mouse event onto the middle of the horizontal scrollbar's track.\n-     * @throws IllegalStateException if control's skin is not VirtualContainerBase\n-     *\/\n-    public static void fireMouseOnHorizontalTrack(Control control) {\n-        ScrollBar scrollBar = getHorizontalScrollBar(control);\n-        Region track = (Region) scrollBar.lookup(\".track\");\n-        MouseEventFirer firer = new MouseEventFirer(track, true);\n-        firer.fireMousePressAndRelease();\n-        Toolkit.getToolkit().firePulse();\n-    }\n-\n-    \/**\n-     * Returns a vertical ScrollBar of the control.\n-     * @throws IllegalStateException if control's skin is not VirtualContainerBase\n-     *\/\n-    public static ScrollBar getVerticalScrollBar(Control control) {\n-        if (control.getSkin() instanceof VirtualContainerBase) {\n-            VirtualFlow<?> flow = getVirtualFlow((VirtualContainerBase<?, ?>) control.getSkin());\n-            return getVBar(flow);\n-        }\n-        throw new IllegalStateException(\"control's skin must be of type VirtualContainerBase but was: \" + control.getSkin());\n-    }\n-\n-    \/**\n-     * Returns a vertical ScrollBar of the control.\n-     * @throws IllegalStateException if control's skin is not VirtualContainerBase\n-     *\/\n-    public static ScrollBar getHorizontalScrollBar(Control control) {\n-        if (control.getSkin() instanceof VirtualContainerBase) {\n-            VirtualFlow<?> flow = getVirtualFlow((VirtualContainerBase<?, ?>) control.getSkin());\n-            return getHBar(flow);\n-        }\n-        throw new IllegalStateException(\"control's skin must be of type VirtualContainerBase but was: \" + control.getSkin());\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/EditAndScrollTest.java","additions":1,"deletions":58,"binary":false,"changes":59,"status":"modified"}]}