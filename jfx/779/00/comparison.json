{"files":[{"patch":"@@ -740,2 +740,3 @@\n-        TreeTableRow<T> treeTableRow = new TreeTableRow<>();\n-        treeTableRow.updateTreeTableView(ttv);\n+        Callback<TreeTableView<T>, TreeTableRow<T>> rowFactory = ttv.getRowFactory();\n+        TreeTableRow<T> treeTableRow = createMeasureRow(ttv, tableSkin, rowFactory);\n+        ((SkinBase<?>) treeTableRow.getSkin()).getChildren().add(cell);\n@@ -755,2 +756,1 @@\n-                tableSkin.getChildren().add(cell);\n-                cell.applyCss();\n+                treeTableRow.applyCss();\n@@ -800,0 +800,14 @@\n+    private <T> TreeTableRow<T> createMeasureRow(TreeTableView<T> ttv, TableViewSkinBase tableSkin,\n+            Callback<TreeTableView<T>, TreeTableRow<T>> rowFactory) {\n+        TreeTableRow<T> treeTableRow = rowFactory != null ? rowFactory.call(ttv) : new TreeTableRow<>();\n+        tableSkin.getChildren().add(treeTableRow);\n+        treeTableRow.applyCss();\n+        if (!(treeTableRow.getSkin() instanceof SkinBase<?>)) {\n+            tableSkin.getChildren().remove(treeTableRow);\n+            \/\/ recreate with null rowFactory will result in a standard TableRow that will\n+            \/\/ have a SkinBase-derived skin\n+            treeTableRow = createMeasureRow(ttv, tableSkin, null);\n+        }\n+        return treeTableRow;\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableColumnHeader.java","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,164 @@\n+\/*\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.skin;\n+\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.event.Event;\n+import javafx.scene.Node;\n+import javafx.scene.control.*;\n+import javafx.scene.control.cell.PropertyValueFactory;\n+import javafx.scene.control.cell.TreeItemPropertyValueFactory;\n+import javafx.scene.control.skin.TableColumnHeader;\n+import javafx.scene.control.skin.TableColumnHeaderShim;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.HBox;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n+import test.com.sun.javafx.scene.control.test.Person;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.*;\n+\n+public class TreeTableColumnHeaderTest {\n+\n+    private TableColumnHeader firstColumnHeader;\n+    private TreeTableView<Person> treeTableView;\n+    private StageLoader sl;\n+    private static String NAME0 = \"Humphrey McPhee\";\n+    private static String NAME1 = \"Justice Caldwell\";\n+    private static String NAME2 = \"Orrin Davies\";\n+    private static String NAME3 = \"Emma Wilson\";\n+\n+    @Before\n+    public void before() {\n+        TreeItem<Person> root = new TreeItem<>(new Person(\"Witty quotes\", \"\", \"\"));\n+        root.getChildren().addAll(List.of(\n+            new TreeItem<Person>(new Person(NAME0, 76)),\n+            new TreeItem<Person>(new Person(NAME1, 30)),\n+            new TreeItem<Person>(new Person(NAME2, 30)),\n+            new TreeItem<Person>(new Person(NAME3, 8))\n+        ));\n+\n+        TreeTableColumn<Person, String> column = new TreeTableColumn<>(\"Col \");\n+        column.setCellValueFactory(new TreeItemPropertyValueFactory<Person, String>(\"firstName\"));\n+\n+        treeTableView = new TreeTableView<>(root);\n+\n+        treeTableView.getColumns().add(column);\n+\n+        sl = new StageLoader(treeTableView);\n+        Toolkit tk = Toolkit.getToolkit();\n+\n+        tk.firePulse();\n+        \/\/Force the column to have default font, otherwise font Amble is applied and mess with header width size\n+        column.setStyle(\"-fx-font: System;\");\n+        firstColumnHeader = VirtualFlowTestUtils.getTableColumnHeader(treeTableView, column);\n+    }\n+\n+    @After\n+    public void after() {\n+        sl.dispose();\n+    }\n+\n+    \/** Row style must affect the required column width *\/\n+    @Test\n+    public void test_resizeColumnToFitContentRowStyle() {\n+        TreeTableColumn column = treeTableView.getColumns().get(0);\n+\n+        treeTableView.setRowFactory(this::createSmallRow);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+        double width = column.getWidth();\n+\n+        treeTableView.setRowFactory(this::createLargeRow);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+        assertTrue(\"Column width must be greater\", width < column.getWidth());\n+    }\n+\n+    \/** Test resizeColumnToFitContent in the presence of a non-standard row skin *\/\n+    @Test\n+    public void test_resizeColumnToFitContentCustomRowSkin() {\n+        TreeTableColumn column = treeTableView.getColumns().get(0);\n+\n+        treeTableView.setRowFactory(this::createCustomRow);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+        double width = column.getWidth();\n+        assertTrue(width > 0);\n+    }\n+\n+    private TreeTableRow<Person> createCustomRow(TreeTableView<Person> treeTableView) {\n+        TreeTableRow<Person> row = new TreeTableRow<>() {\n+            protected Skin<?> createDefaultSkin() {\n+                return new CustomSkin(this);\n+            };\n+        };\n+        return row;\n+    }\n+\n+    private static class CustomSkin implements Skin<TreeTableRow<?>> {\n+\n+        private TreeTableRow<?> row;\n+        private Node node = new HBox();\n+\n+        CustomSkin(TreeTableRow<?> row) {\n+            this.row = row;\n+        }\n+\n+        @Override\n+        public TreeTableRow<?> getSkinnable() {\n+            return row;\n+        }\n+\n+        @Override\n+        public Node getNode() {\n+            return node;\n+        }\n+\n+        @Override\n+        public void dispose() {\n+            node = null;\n+        }\n+    }\n+\n+    private TreeTableRow<Person> createSmallRow(TreeTableView<Person> treeTableView) {\n+        TreeTableRow<Person> row = new TreeTableRow<>();\n+        row.setStyle(\"-fx-font: 24 Amble\");\n+        return row;\n+    }\n+\n+    private TreeTableRow<Person> createLargeRow(TreeTableView<Person> param) {\n+        TreeTableRow<Person> row = new TreeTableRow<>();\n+        row.setStyle(\"-fx-font: 48 Amble\");\n+        return row;\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TreeTableColumnHeaderTest.java","additions":164,"deletions":0,"binary":false,"changes":164,"status":"added"}]}