{"files":[{"patch":"@@ -0,0 +1,272 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.geometry.Insets;\n+import javafx.geometry.NodeOrientation;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.scene.control.CheckMenuItem;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.SplitPane;\n+import javafx.scene.control.ToggleGroup;\n+import javafx.scene.input.KeyCombination;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Priority;\n+import javafx.stage.Stage;\n+import com.oracle.tools.fx.monkey.pages.DemoPage;\n+import com.oracle.tools.fx.monkey.settings.FxSettings;\n+import com.oracle.tools.fx.monkey.tools.ClipboardViewer;\n+import com.oracle.tools.fx.monkey.tools.CssPlaygroundPane;\n+import com.oracle.tools.fx.monkey.tools.KeyboardEventViewer;\n+import com.oracle.tools.fx.monkey.tools.Native2AsciiPane;\n+import com.oracle.tools.fx.monkey.tools.SystemInfoViewer;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.SingleInstance;\n+\n+\/**\n+ * Monkey Tester Main Window\n+ *\/\n+public class MainWindow extends Stage {\n+    protected ObservableList<DemoPage> pages = FXCollections.observableArrayList();\n+    protected ListView<DemoPage> pageSelector;\n+    protected BorderPane contentPane;\n+    protected DemoPage currentPage;\n+    protected Label status;\n+\n+    public MainWindow() {\n+        FX.name(this, \"MainWindow\");\n+\n+        status = new Label();\n+        status.setPadding(new Insets(2, 2, 2, 2));\n+\n+        Label spacer = new Label();\n+\n+        Label ver = new Label();\n+\n+        GridPane st = new GridPane();\n+        st.add(status, 0, 0);\n+        st.add(spacer, 1, 0);\n+        st.add(ver, 2, 0);\n+        GridPane.setVgrow(status, Priority.ALWAYS);\n+        GridPane.setHgrow(spacer, Priority.ALWAYS);\n+        GridPane.setVgrow(ver, Priority.ALWAYS);\n+\n+        pages.setAll(createPages());\n+\n+        pageSelector = new ListView(pages);\n+        FX.name(pageSelector, \"pageSelector\");\n+        pageSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updatePage(c);\n+        });\n+\n+        contentPane = new BorderPane();\n+        FX.name(contentPane, \"contentPane\");\n+\n+        SplitPane split = new SplitPane(pageSelector, contentPane);\n+        FX.name(split, \"MainSplit\");\n+        split.setDividerPositions(0.15);\n+        SplitPane.setResizableWithParent(pageSelector, Boolean.FALSE);\n+        SplitPane.setResizableWithParent(contentPane, Boolean.TRUE);\n+\n+        BorderPane bp = new BorderPane();\n+        bp.setTop(createMenu());\n+        bp.setCenter(split);\n+        bp.setBottom(st);\n+\n+        setScene(new Scene(bp));\n+        setWidth(1200);\n+        setHeight(800);\n+\n+        renderScaleXProperty().addListener((x) -> updateStatus());\n+        renderScaleYProperty().addListener((x) -> updateStatus());\n+        updateTitle();\n+        updateStatus();\n+    }\n+\n+    private MenuBar createMenu() {\n+        CheckMenuItem orientation = new CheckMenuItem(\"Orientation: RTL\");\n+        orientation.setOnAction((ev) -> {\n+            NodeOrientation v = (orientation.isSelected()) ?\n+                NodeOrientation.RIGHT_TO_LEFT :\n+                NodeOrientation.LEFT_TO_RIGHT;\n+            getScene().setNodeOrientation(v);\n+        });\n+\n+        MenuBar b = new MenuBar();\n+        \/\/ File\n+        FX.menu(b, \"_File\");\n+        FX.item(b, \"Quit\", Platform::exit);\n+        \/\/ Page\n+        FX.menu(b, \"_Page\");\n+        FX.item(b, \"Reload Current Page\", this::reloadCurrentPage);\n+        \/\/ Skin\n+        FX.menu(b, \"_Skin\");\n+        FX.item(b, \"Set New Skin\", this::newSkin);\n+        FX.item(b, \"<null> Skin\", this::nullSkin);\n+        \/\/ Menu\n+        FX.menu(b, \"_Menu\");\n+        ToggleGroup g = new ToggleGroup();\n+        FX.radio(b, \"RadioMenuItem 1\", KeyCombination.keyCombination(\"Shortcut+1\"), g);\n+        FX.radio(b, \"RadioMenuItem 2\", KeyCombination.keyCombination(\"Shortcut+2\"), g);\n+        FX.radio(b, \"RadioMenuItem 3\", KeyCombination.keyCombination(\"Shortcut+3\"), g);\n+        \/\/ Tools\n+        FX.menu(b, \"_Tools\");\n+        FX.item(b, \"Clipboard Viewer\", this::openClipboardViewer);\n+        FX.item(b, \"CSS Playground\", this::openCssPlayground);\n+        FX.item(b, \"Keyboard Event Viewer\", this::openKeyboardViewer);\n+        FX.item(b, \"Native-to-ascii\", this::openNative2Ascii);\n+        FX.item(b, \"System Info\", this::openSystemInfo);\n+        \/\/ Window\n+        FX.menu(b, \"_Window\");\n+        FX.item(b, orientation);\n+        FX.separator(b);\n+        FX.item(b, \"Open Modal Window\", this::openModalWindow);\n+        return b;\n+    }\n+\n+    private void updatePage(DemoPage p) {\n+        FxSettings.store(contentPane);\n+        currentPage = p;\n+        contentPane.setCenter(p == null ? null : p.createPane());\n+        updateTitle();\n+        FxSettings.restore(contentPane);\n+    }\n+\n+    private void reloadCurrentPage() {\n+        updatePage(currentPage);\n+    }\n+\n+    private void updateTitle() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"Monkey Tester\");\n+        if (currentPage != null) {\n+            sb.append(\" - \");\n+            sb.append(currentPage.toString());\n+        }\n+        setTitle(sb.toString());\n+    }\n+\n+    private void updateStatus() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"   FX:\");\n+        sb.append(System.getProperty(\"javafx.runtime.version\"));\n+        sb.append(\"  JDK:\");\n+        sb.append(System.getProperty(\"java.version\"));\n+\n+        if (getRenderScaleX() == getRenderScaleY()) {\n+            sb.append(\"  scale=\");\n+            sb.append(getRenderScaleX());\n+        } else {\n+            sb.append(\"  scaleX=\");\n+            sb.append(getRenderScaleX());\n+            sb.append(\"  scaleY=\");\n+            sb.append(getRenderScaleY());\n+        }\n+\n+        sb.append(\"  LOC:\");\n+        sb.append(new File(\"\").getAbsolutePath());\n+        status.setText(sb.toString());\n+    }\n+\n+    private DemoPage[] createPages() {\n+        DemoPage[] pages = Pages.create();\n+        Arrays.sort(pages, new Comparator<DemoPage>() {\n+            @Override\n+            public int compare(DemoPage a, DemoPage b) {\n+                return a.getTitle().compareTo(b.getTitle());\n+            }\n+        });\n+        return pages;\n+    }\n+\n+    private void openModalWindow() {\n+        new ModalWindow(this).show();\n+     }\n+\n+    private void openNative2Ascii() {\n+        SingleInstance.openSingleInstance(\n+            \"Native2AsciiWindow\",\n+            \"Native to ASCII\",\n+            Native2AsciiPane::new\n+        );\n+    }\n+\n+    private void openCssPlayground() {\n+        SingleInstance.openSingleInstance(\n+            \"CSSPlayground\",\n+            \"CSS Playground\",\n+            CssPlaygroundPane::new\n+        );\n+    }\n+\n+    private void openClipboardViewer() {\n+        SingleInstance.openSingleInstance(\n+            \"ClipboardViewer\",\n+            \"Clipboard Viewer\",\n+            ClipboardViewer::new\n+        );\n+    }\n+\n+    private void openKeyboardViewer() {\n+        SingleInstance.openSingleInstance(\n+            \"KeyboardEventViewer\",\n+            \"Keyboard Event Viewer\",\n+            KeyboardEventViewer::new\n+        );\n+    }\n+\n+    private void openSystemInfo() {\n+        SingleInstance.openSingleInstance(\n+            \"SystemInfo\",\n+            \"System Info\",\n+            SystemInfoViewer::new\n+        );\n+    }\n+\n+    private void nullSkin() {\n+        Node n = contentPane.getCenter();\n+        if (n instanceof HasSkinnable s) {\n+            s.nullSkin();\n+        }\n+    }\n+\n+    private void newSkin() {\n+        Node n = contentPane.getCenter();\n+        if (n instanceof HasSkinnable s) {\n+            s.newSkin();\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/MainWindow.java","additions":272,"deletions":0,"binary":false,"changes":272,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey;\n+\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.HBox;\n+import javafx.stage.Modality;\n+import javafx.stage.Stage;\n+import javafx.stage.Window;\n+\n+\/**\n+ * Test Modal Window\n+ *\/\n+public class ModalWindow extends Stage {\n+    public ModalWindow(Window owner) {\n+        Button b1 = new Button(\"Does Nothing\");\n+        b1.setDefaultButton(false);\n+\n+        Button b2 = new Button(\"Platform.exit()\");\n+        b2.setDefaultButton(false);\n+        b2.setOnAction((ev) -> Platform.exit());\n+\n+        Button b3 = new Button(\"OK\");\n+        b3.setOnAction((ev) -> hide());\n+\n+        HBox bp = new HBox(b1, b2, b3);\n+        \/\/ FIX BUG: default button property ignored on macOS, ENTER goes to the first button\n+        b3.setDefaultButton(true);\n+\n+        BorderPane p = new BorderPane();\n+        p.setBottom(bp);\n+        System.out.println(b2.isDefaultButton() + \" \" + b3.isDefaultButton());\n+\n+        setTitle(\"Modal Window\");\n+        setScene(new Scene(p));\n+        initModality(Modality.APPLICATION_MODAL);\n+        initOwner(owner);\n+        setWidth(500);\n+        setHeight(200);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/ModalWindow.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -27,7 +27,0 @@\n-import java.util.Arrays;\n-import java.util.Comparator;\n-import com.oracle.tools.fx.monkey.pages.DemoPage;\n-import com.oracle.tools.fx.monkey.settings.FxSettings;\n-import com.oracle.tools.fx.monkey.util.FX;\n-import com.oracle.tools.fx.monkey.util.Native2AsciiPane;\n-import com.oracle.tools.fx.monkey.util.TestPaneBase;\n@@ -35,19 +28,0 @@\n-import javafx.application.Platform;\n-import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n-import javafx.geometry.Insets;\n-import javafx.geometry.NodeOrientation;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.CheckMenuItem;\n-import javafx.scene.control.Label;\n-import javafx.scene.control.ListView;\n-import javafx.scene.control.MenuBar;\n-import javafx.scene.control.SplitPane;\n-import javafx.scene.control.ToggleGroup;\n-import javafx.scene.input.KeyCombination;\n-import javafx.scene.layout.BorderPane;\n-import javafx.scene.layout.GridPane;\n-import javafx.scene.layout.HBox;\n-import javafx.scene.layout.Priority;\n-import javafx.stage.Modality;\n@@ -55,0 +29,1 @@\n+import com.oracle.tools.fx.monkey.settings.FxSettings;\n@@ -64,7 +39,0 @@\n-    protected Stage stage;\n-    protected ObservableList<DemoPage> pages = FXCollections.observableArrayList();\n-    protected ListView<DemoPage> pageSelector;\n-    protected BorderPane contentPane;\n-    protected DemoPage currentPage;\n-    protected Label status;\n-\n@@ -88,158 +56,1 @@\n-        this.stage = stage;\n-\n-        status = new Label();\n-        status.setPadding(new Insets(2, 2, 2, 2));\n-\n-        Label spacer = new Label();\n-\n-        Label ver = new Label();\n-\n-        GridPane st = new GridPane();\n-        st.add(status, 0, 0);\n-        st.add(spacer, 1, 0);\n-        st.add(ver, 2, 0);\n-        GridPane.setVgrow(status, Priority.ALWAYS);\n-        GridPane.setHgrow(spacer, Priority.ALWAYS);\n-        GridPane.setVgrow(ver, Priority.ALWAYS);\n-\n-        pages.setAll(createPages());\n-\n-        pageSelector = new ListView(pages);\n-        pageSelector.setId(\"pageSelector\");\n-        pageSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updatePage(c);\n-        });\n-\n-        contentPane = new BorderPane();\n-        contentPane.setId(\"contentPane\");\n-\n-        SplitPane split = new SplitPane(pageSelector, contentPane);\n-        split.setDividerPositions(0.15);\n-        SplitPane.setResizableWithParent(pageSelector, Boolean.FALSE);\n-        SplitPane.setResizableWithParent(contentPane, Boolean.TRUE);\n-\n-        BorderPane bp = new BorderPane();\n-        bp.setTop(createMenu());\n-        bp.setCenter(split);\n-        bp.setBottom(st);\n-\n-        stage.setScene(new Scene(bp));\n-        stage.setWidth(1200);\n-        stage.setHeight(800);\n-\n-        stage.renderScaleXProperty().addListener((x) -> updateStatus());\n-        stage.renderScaleYProperty().addListener((x) -> updateStatus());\n-        updateTitle();\n-        updateStatus();\n-\n-        stage.show();\n-    }\n-\n-    protected MenuBar createMenu() {\n-        CheckMenuItem orientation = new CheckMenuItem(\"Orientation: RTL\");\n-        orientation.setOnAction((ev) -> {\n-            NodeOrientation v = (orientation.isSelected()) ? NodeOrientation.RIGHT_TO_LEFT\n-                : NodeOrientation.LEFT_TO_RIGHT;\n-            stage.getScene().setNodeOrientation(v);\n-        });\n-\n-        MenuBar b = new MenuBar();\n-        \/\/ File\n-        FX.menu(b, \"_File\");\n-        FX.item(b, \"Quit\", Platform::exit);\n-        \/\/ Page\n-        FX.menu(b, \"_Page\");\n-        FX.item(b, \"Reload Current Page\", this::reloadCurrentPage);\n-        \/\/ Menu\n-        FX.menu(b, \"_Menu\");\n-        ToggleGroup g = new ToggleGroup();\n-        FX.radio(b, \"RadioMenuItem 1\", KeyCombination.keyCombination(\"Shortcut+1\"), g);\n-        FX.radio(b, \"RadioMenuItem 2\", KeyCombination.keyCombination(\"Shortcut+2\"), g);\n-        FX.radio(b, \"RadioMenuItem 3\", KeyCombination.keyCombination(\"Shortcut+3\"), g);\n-        FX.menu(b, \"_Tools\");\n-        FX.item(b, \"Native-to-ascii\", this::openNative2Ascii);\n-        \/\/ Window\n-        FX.menu(b, \"_Window\");\n-        FX.item(b, orientation);\n-        FX.separator(b);\n-        FX.item(b, \"Open Modal Window\", this::openModalWindow);\n-        return b;\n-    }\n-\n-    protected void updatePage(DemoPage p) {\n-        FxSettings.store(contentPane);\n-        currentPage = p;\n-        contentPane.setCenter(p == null ? null : p.createPane());\n-        updateTitle();\n-        FxSettings.restore(contentPane);\n-    }\n-\n-    protected void reloadCurrentPage() {\n-        updatePage(currentPage);\n-    }\n-\n-    protected void updateTitle() {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"Monkey Tester\");\n-        if (currentPage != null) {\n-            sb.append(\" - \");\n-            sb.append(currentPage.toString());\n-        }\n-        stage.setTitle(sb.toString());\n-    }\n-\n-    protected void updateStatus() {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"   \");\n-        sb.append(System.getProperty(\"javafx.runtime.version\"));\n-\n-        if (stage.getRenderScaleX() == stage.getRenderScaleY()) {\n-            sb.append(\"  scale=\");\n-            sb.append(stage.getRenderScaleX());\n-        } else {\n-            sb.append(\"  scaleX=\");\n-            sb.append(stage.getRenderScaleX());\n-            sb.append(\"  scaleY=\");\n-            sb.append(stage.getRenderScaleY());\n-        }\n-        status.setText(sb.toString());\n-    }\n-\n-    protected DemoPage[] createPages() {\n-        DemoPage[] pages = Pages.create();\n-        Arrays.sort(pages, new Comparator<DemoPage>() {\n-            @Override\n-            public int compare(DemoPage a, DemoPage b) {\n-                return a.getTitle().compareTo(b.getTitle());\n-            }\n-        });\n-        return pages;\n-    }\n-\n-    protected void openModalWindow() {\n-        Button b = new Button(\"Platform.exit()\");\n-        b.setOnAction((ev) -> Platform.exit());\n-\n-        Button b2 = new Button(\"OK\");\n-\n-        HBox bp = new HBox(b, b2);\n-\n-        BorderPane p = new BorderPane();\n-        p.setBottom(bp);\n-\n-        Stage d = new Stage();\n-        d.setScene(new Scene(p));\n-        d.initModality(Modality.APPLICATION_MODAL);\n-        d.initOwner(stage);\n-        d.setWidth(500);\n-        d.setHeight(400);\n-        d.show();\n-\n-        b2.setOnAction((ev) -> d.hide());\n-    }\n-\n-    protected void openNative2Ascii() {\n-        Stage s = new Stage();\n-        s.setTitle(\"Native to ASCII\");\n-        s.setScene(new Scene(new Native2AsciiPane()));\n-        s.show();\n+        new MainWindow().show();\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/MonkeyTesterApp.java","additions":2,"deletions":191,"binary":false,"changes":193,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.oracle.tools.fx.monkey.tools.ClipboardViewer;\n@@ -41,0 +42,1 @@\n+            new DemoPage(\"Clipboard\", ClipboardViewer::new),\n@@ -53,1 +55,2 @@\n-            \/\/ TODO PieChart\n+            new DemoPage(\"PasswordField\", PasswordFieldPage::new),\n+            new DemoPage(\"PieChart\", PieChartPage::new),\n@@ -73,2 +76,2 @@\n-            \/\/ TODO VBox\n-            \/\/ TODO WebView\n+            new DemoPage(\"VBox\", VBoxPage::new),\n+            new DemoPage(\"WebView\", WebViewPage::new),\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/Pages.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -41,1 +42,1 @@\n-        setId(\"AccordionPage\");\n+        FX.name(this, \"AccordionPage\");\n@@ -60,1 +61,1 @@\n-    protected void addPane() {\n+    private void addPane() {\n@@ -71,1 +72,1 @@\n-    protected void removePane() {\n+    private void removePane() {\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/AccordionPage.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,452 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.geometry.Insets;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.SeparatorMenuItem;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.layout.Region;\n+import javafx.scene.paint.Color;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * HBox\/VBox page base class.\n+ *\/\n+public abstract class BoxPageBase extends TestPaneBase {\n+    enum Demo {\n+        PMAX(\"progressive max\"),\n+        PMIN(\"progressive min\"),\n+        BUG_8264591(\"8264591 fractional prefs\"),\n+        FILL_MAX(\"fill + max\"),\n+        PREF(\"pref only\"),\n+        ALL(\"all set: min, pref, max\"),\n+        MIN_WIDTH(\"min width\"),\n+        MAX_WIDTH(\"max width progressive\"),\n+        MIN_WIDTH2(\"min width (middle)\"),\n+        MAX_WIDTH2(\"max width (middle)\"),\n+        MIN_WIDTH3(\"min width (beginning)\"),\n+        MAX_WIDTH3(\"max width (beginning)\"),\n+        FIXED_MIDDLE(\"fixed in the middle\"),\n+        ALL_FIXED(\"all fixed\"),\n+        ALL_MAX(\"all with maximum width\"),\n+        MIN_IN_CENTER(\"min widths set in middle columns\"),\n+        MAX_IN_CENTER(\"max widths set in middle columns\"),\n+        VARIOUS(\"various\"),\n+        MANY_COLUMNS(\"many columns\"),\n+        MANY_COLUMNS_SAME(\"many columns, same pref\"),\n+        ;\n+        private final String text;\n+        Demo(String text) { this.text = text; }\n+        public String toString() { return text; }\n+    }\n+\n+    public enum Cmd {\n+        COL,\n+        MIN,\n+        PREF,\n+        MAX,\n+        FILL,\n+    }\n+\n+    protected abstract Pane createPane();\n+\n+    protected abstract void setMin(Region r, double v);\n+\n+    protected abstract void setPref(Region r, double v);\n+\n+    protected abstract void setMax(Region r, double v);\n+\n+    protected abstract void setGrow(Node n, Priority p);\n+\n+    protected abstract Region createRegion();\n+\n+    protected final Cmd COL = Cmd.COL;\n+    protected final Cmd MIN = Cmd.MIN;\n+    protected final Cmd PREF = Cmd.PREF;\n+    protected final Cmd MAX = Cmd.MAX;\n+    protected final Cmd FILL = Cmd.FILL;\n+\n+    protected final ComboBox<Demo> demoSelector;\n+    protected final CheckBox snap;\n+    protected final CheckBox grow;\n+    protected Pane box;\n+\n+    public BoxPageBase(String name) {\n+        FX.name(this, name);\n+\n+        \/\/ selector\n+        demoSelector = new ComboBox<>();\n+        FX.name(demoSelector, \"demoSelector\");\n+        demoSelector.getItems().addAll(Demo.values());\n+        demoSelector.setEditable(false);\n+        demoSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updatePane();\n+        });\n+\n+        Button addButton = new Button(\"Add Item\");\n+        addButton.setOnAction((ev) -> {\n+            addItem(box);\n+        });\n+\n+        Button clearButton = new Button(\"Clear Items\");\n+        clearButton.setOnAction((ev) -> {\n+            box.getChildren().clear();\n+        });\n+\n+        snap = new CheckBox(\"snap\");\n+        FX.name(snap, \"snap\");\n+\n+        grow = new CheckBox(\"grow\");\n+        FX.name(grow, \"grow\");\n+        grow.selectedProperty().addListener((s, p, on) -> {\n+            setGrow(on);\n+        });\n+\n+        \/\/ layout\n+\n+        OptionPane op = new OptionPane();\n+        op.label(\"Configuration:\");\n+        op.option(demoSelector);\n+        op.option(addButton);\n+        op.option(clearButton);\n+        op.option(snap);\n+        op.option(grow);\n+        setOptions(op);\n+\n+        FX.selectFirst(demoSelector);\n+    }\n+\n+    protected Object[] createSpec(Demo d) {\n+        switch (d) {\n+        case PMAX:\n+            return new Object[] {\n+                COL, MAX, 30,\n+                COL, MAX, 31,\n+                COL, MAX, 32,\n+                COL, MAX, 33,\n+                COL, MAX, 34,\n+                COL, MAX, 35,\n+                COL, MAX, 36,\n+                COL, MAX, 37,\n+                COL, MAX, 38,\n+                COL, MAX, 39,\n+                COL, MAX, 40,\n+                COL, MAX, 41,\n+                COL, MAX, 30,\n+            };\n+        case PMIN:\n+            return new Object[] {\n+                COL, MIN, 30,\n+                COL, MIN, 31,\n+                COL, MIN, 32,\n+                COL, MIN, 33,\n+                COL, MIN, 34,\n+                COL, MIN, 35,\n+                COL, MIN, 36,\n+                COL, MIN, 37,\n+                COL, MIN, 38,\n+                COL, MIN, 39,\n+                COL, MIN, 40,\n+                COL, MIN, 41,\n+                COL, MIN, 30,\n+            };\n+        case ALL:\n+            return new Object[] {\n+                COL,\n+                COL, MIN, 20, PREF, 20, MAX, 20,\n+                COL, PREF, 200,\n+                COL, PREF, 300, MAX, 400,\n+                COL\n+            };\n+        case BUG_8264591:\n+            return new Object[] {\n+                COL, PREF, 25.3,\n+                COL, PREF, 25.3,\n+                COL, PREF, 25.4,\n+                COL, PREF, 25.3, MAX, 100,\n+                COL, PREF, 25.3, MAX, 101,\n+                COL, PREF, 25.4\n+            };\n+        case FILL_MAX:\n+            return new Object[] {\n+                COL, FILL,\n+                COL, MAX, 200\n+            };\n+        case PREF:\n+            return new Object[] {\n+                COL, PREF, 100,\n+                COL, PREF, 200,\n+                COL, PREF, 300,\n+                COL, PREF, 400\n+            };\n+        case MIN_WIDTH:\n+            return new Object[] {\n+                COL,\n+                COL,\n+                COL,\n+                COL, MIN, 300\n+            };\n+        case MAX_WIDTH:\n+            return new Object[] {\n+                COL, MAX, 30, FILL,\n+                COL, MAX, 31, FILL,\n+                COL, MAX, 32, FILL,\n+                COL, MAX, 33, FILL,\n+                COL, MAX, 34, FILL,\n+                COL, MAX, 35, FILL,\n+                COL, MAX, 36, FILL,\n+                COL, MAX, 37, FILL,\n+                COL, MAX, 38, FILL,\n+            };\n+        case MIN_WIDTH2:\n+            return new Object[] {\n+                COL,\n+                COL,\n+                COL, MIN, 300,\n+                COL\n+            };\n+        case MAX_WIDTH2:\n+            return new Object[] {\n+                COL,\n+                COL,\n+                COL, MAX, 100,\n+                COL\n+            };\n+        case MIN_WIDTH3:\n+            return new Object[] {\n+                COL, MIN, 300,\n+                COL,\n+                COL,\n+                COL\n+            };\n+        case MAX_WIDTH3:\n+            return new Object[] {\n+                COL, MAX, 100,\n+                COL,\n+                COL,\n+                COL\n+            };\n+        case MIN_IN_CENTER:\n+            return new Object[] {\n+                COL,\n+                COL, MIN, 20,\n+                COL, MIN, 30,\n+                COL, MIN, 40,\n+                COL, MIN, 50,\n+                COL, MIN, 60,\n+                COL\n+            };\n+        case MAX_IN_CENTER:\n+            return new Object[] {\n+                COL,\n+                COL, MAX, 20,\n+                COL, MAX, 30,\n+                COL, MAX, 40,\n+                COL, MAX, 50,\n+                COL, MAX, 60,\n+                COL\n+            };\n+        case FIXED_MIDDLE:\n+            return new Object[] {\n+                COL,\n+                COL,\n+                COL,\n+                COL, MIN, 100, MAX, 100,\n+                COL, MIN, 100, MAX, 100,\n+                COL,\n+                COL,\n+                COL\n+            };\n+        case ALL_FIXED:\n+            return new Object[] {\n+                COL, MIN, 50, MAX, 50,\n+                COL, MIN, 50, MAX, 50,\n+                COL, MIN, 50, MAX, 50\n+            };\n+        case ALL_MAX:\n+            return new Object[] {\n+                COL, MAX, 50,\n+                COL, MAX, 50,\n+                COL, MAX, 50\n+            };\n+        case VARIOUS:\n+            return new Object[] {\n+                COL, PREF, 100,\n+                COL, PREF, 200,\n+                COL, PREF, 300,\n+                COL, MIN, 100, MAX, 100,\n+                COL, PREF, 100,\n+                COL, MIN, 100,\n+                COL, MAX, 100,\n+                COL, PREF, 400,\n+                COL\n+            };\n+        case MANY_COLUMNS:\n+            return new Object[] {\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL\n+            };\n+        case MANY_COLUMNS_SAME:\n+            return new Object[] {\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30\n+            };\n+        default:\n+            throw new Error(\"?\" + d);\n+        }\n+    }\n+\n+    protected Pane createPane(Demo demo, Object[] spec) {\n+        Pane box = createPane();\n+        if ((demo == null) || (spec == null)) {\n+            return box;\n+        }\n+\n+        box.setSnapToPixel(snap.isSelected());\n+        snap.selectedProperty().bindBidirectional(box.snapToPixelProperty());\n+        Region region = null;\n+\n+        for (int i = 0; i < spec.length;) {\n+            Object x = spec[i++];\n+            if (x instanceof Cmd cmd) {\n+                switch (cmd) {\n+                case COL:\n+                    {\n+                        Region c = addItem(box);\n+                        setGrow(c, grow.isSelected() ? Priority.ALWAYS : Priority.NEVER);\n+                        region = c;\n+                    }\n+                    break;\n+                case MAX:\n+                    {\n+                        double w = number(spec[i++]);\n+                        setMax(region, w);\n+                    }\n+                    break;\n+                case MIN:\n+                    {\n+                        double w = number(spec[i++]);\n+                        setMin(region, w);\n+                    }\n+                    break;\n+                case PREF:\n+                    {\n+                        double w = number(spec[i++]);\n+                        setPref(region, w);\n+                    }\n+                    break;\n+                case FILL:\n+                    {\n+                        setGrow(region, Priority.ALWAYS);\n+                    }\n+                    break;\n+                default:\n+                    throw new Error(\"?\" + cmd);\n+                }\n+            } else {\n+                throw new Error(\"?\" + x);\n+            }\n+        }\n+\n+        box.setPadding(new Insets(0, 0, 10, 0));\n+        box.setBackground(Background.fill(Color.DARKGRAY));\n+\n+        return box;\n+    }\n+\n+    protected void setGrow(boolean on) {\n+        Priority p = on ? Priority.ALWAYS : Priority.NEVER;\n+        for (Node n: box.getChildren()) {\n+            setGrow(n, p);\n+        }\n+    }\n+\n+    protected static double number(Object x) {\n+        return ((Number)x).doubleValue();\n+    }\n+\n+    protected Region addItem(Pane box) {\n+        boolean even = (box.getChildren().size() % 2) == 0;\n+        Background bg = Background.fill(even ? Color.GRAY : Color.LIGHTGRAY);\n+        Region r = createRegion();\n+        r.setBackground(bg);\n+        box.getChildren().add(r);\n+        return r;\n+    }\n+\n+    protected void updatePane() {\n+        Demo d = demoSelector.getSelectionModel().getSelectedItem();\n+        Object[] spec = createSpec(d);\n+        box = createPane(d, spec);\n+\n+        BorderPane bp = new BorderPane(box);\n+        bp.setPadding(new Insets(0, 10, 0, 0));\n+\n+        setContent(bp);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/BoxPageBase.java","additions":452,"deletions":0,"binary":false,"changes":452,"status":"added"},{"patch":"@@ -27,0 +27,1 @@\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -41,1 +42,1 @@\n-        setId(\"CanvasPage\");\n+        FX.name(this, \"CanvasPage\");\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/CanvasPage.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -39,1 +40,1 @@\n-        setId(\"ChoiceBoxPage\");\n+        FX.name(this, \"ChoiceBoxPage\");\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ChoiceBoxPage.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -47,1 +48,1 @@\n-        setId(\"ColorPickerPage\");\n+        FX.name(this, \"ColorPickerPage\");\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ColorPickerPage.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import javafx.scene.control.CheckBox;\n@@ -36,0 +37,1 @@\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -43,1 +45,1 @@\n-    private ComboBox control;\n+    private final ComboBox<String> control;\n@@ -47,1 +49,1 @@\n-        setId(\"ComboBoxPage\");\n+        FX.name(this, \"ComboBoxPage\");\n@@ -51,1 +53,1 @@\n-        control = new ComboBox();\n+        control = new ComboBox<>();\n@@ -87,5 +89,12 @@\n-        OptionPane p = new OptionPane();\n-        p.option(setConverterButton);\n-        p.label(\"Visible Row Count:\");\n-        p.option(itemCountField);\n-        p.option(changeCountButton);\n+        CheckBox editable = new CheckBox(\"editable\");\n+        FX.name(editable, \"editable\");\n+        editable.selectedProperty().bindBidirectional(control.editableProperty());\n+\n+        OptionPane op = new OptionPane();\n+        \/\/ TODO data?\n+        op.option(editable);\n+        \/\/ TODO converter selector\n+        op.option(setConverterButton);\n+        op.label(\"Visible Row Count:\");\n+        op.option(itemCountField);\n+        op.option(changeCountButton);\n@@ -94,1 +103,1 @@\n-        setOptions(p);\n+        setOptions(op);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ComboBoxPage.java","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -47,1 +48,1 @@\n-        setId(\"DatePickerPage\");\n+        FX.name(this, \"DatePickerPage\");\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/DatePickerPage.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/DemoPage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import javafx.geometry.Insets;\n@@ -29,3 +28,0 @@\n-import javafx.scene.control.Button;\n-import javafx.scene.control.CheckBox;\n-import javafx.scene.control.ComboBox;\n@@ -35,2 +31,0 @@\n-import javafx.scene.layout.Background;\n-import javafx.scene.layout.BorderPane;\n@@ -38,0 +32,1 @@\n+import javafx.scene.layout.Pane;\n@@ -40,4 +35,0 @@\n-import javafx.scene.paint.Color;\n-import com.oracle.tools.fx.monkey.util.FX;\n-import com.oracle.tools.fx.monkey.util.OptionPane;\n-import com.oracle.tools.fx.monkey.util.TestPaneBase;\n@@ -46,1 +37,1 @@\n- * HBox page\n+ * HBox Page.\n@@ -48,47 +39,1 @@\n-public class HBoxPage extends TestPaneBase {\n-    enum Demo {\n-        PMAX(\"progressive max\"),\n-        PMIN(\"progressive min\"),\n-        BUG_8264591(\"8264591 fractional prefs\"),\n-        FILL_MAX(\"fill + max\"),\n-        PREF(\"pref only\"),\n-        ALL(\"all set: min, pref, max\"),\n-        MIN_WIDTH(\"min width\"),\n-        MAX_WIDTH(\"max width progressive\"),\n-        MIN_WIDTH2(\"min width (middle)\"),\n-        MAX_WIDTH2(\"max width (middle)\"),\n-        MIN_WIDTH3(\"min width (beginning)\"),\n-        MAX_WIDTH3(\"max width (beginning)\"),\n-        FIXED_MIDDLE(\"fixed in the middle\"),\n-        ALL_FIXED(\"all fixed\"),\n-        ALL_MAX(\"all with maximum width\"),\n-        MIN_IN_CENTER(\"min widths set in middle columns\"),\n-        MAX_IN_CENTER(\"max widths set in middle columns\"),\n-        VARIOUS(\"various\"),\n-        MANY_COLUMNS(\"many columns\"),\n-        MANY_COLUMNS_SAME(\"many columns, same pref\"),\n-        ;\n-        private final String text;\n-        Demo(String text) { this.text = text; }\n-        public String toString() { return text; }\n-    }\n-\n-    public enum Cmd {\n-        COL,\n-        MIN,\n-        PREF,\n-        MAX,\n-        FILL,\n-    }\n-\n-    protected final Cmd COL = Cmd.COL;\n-    protected final Cmd MIN = Cmd.MIN;\n-    protected final Cmd PREF = Cmd.PREF;\n-    protected final Cmd MAX = Cmd.MAX;\n-    protected final Cmd FILL = Cmd.FILL;\n-\n-    protected final ComboBox<Demo> demoSelector;\n-    protected final CheckBox snap;\n-    protected final CheckBox grow;\n-    protected HBox hbox;\n-\n+public class HBoxPage extends BoxPageBase {\n@@ -96,42 +41,1 @@\n-        setId(\"HBoxPage\");\n-\n-        \/\/ selector\n-        demoSelector = new ComboBox<>();\n-        demoSelector.setId(\"demoSelector\");\n-        demoSelector.getItems().addAll(Demo.values());\n-        demoSelector.setEditable(false);\n-        demoSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updatePane();\n-        });\n-\n-        Button addButton = new Button(\"Add Item\");\n-        addButton.setOnAction((ev) -> {\n-            addItem(hbox);\n-        });\n-\n-        Button clearButton = new Button(\"Clear Items\");\n-        clearButton.setOnAction((ev) -> {\n-            hbox.getChildren().clear();\n-        });\n-\n-        snap = new CheckBox(\"snap\");\n-        snap.setId(\"snap\");\n-\n-        grow = new CheckBox(\"grow\");\n-        grow.setId(\"grow\");\n-        grow.selectedProperty().addListener((s, p, on) -> {\n-            setGrow(on);\n-        });\n-\n-        \/\/ layout\n-\n-        OptionPane p = new OptionPane();\n-        p.label(\"Configuration:\");\n-        p.option(demoSelector);\n-        p.option(addButton);\n-        p.option(clearButton);\n-        p.option(snap);\n-        p.option(grow);\n-        setOptions(p);\n-\n-        FX.selectFirst(demoSelector);\n+        super(\"HBoxPage\");\n@@ -140,5 +44,3 @@\n-    protected void setGrow(boolean on) {\n-        Priority p = on ? Priority.ALWAYS : Priority.NEVER;\n-        for (Node n: hbox.getChildren()) {\n-            HBox.setHgrow(n, p);\n-        }\n+    @Override\n+    protected void setGrow(Node n, Priority p) {\n+        HBox.setHgrow(n, p);\n@@ -147,210 +49,3 @@\n-    protected Object[] createSpec(Demo d) {\n-        switch (d) {\n-        case PMAX:\n-            return new Object[] {\n-                COL, MAX, 30,\n-                COL, MAX, 31,\n-                COL, MAX, 32,\n-                COL, MAX, 33,\n-                COL, MAX, 34,\n-                COL, MAX, 35,\n-                COL, MAX, 36,\n-                COL, MAX, 37,\n-                COL, MAX, 38,\n-                COL, MAX, 39,\n-                COL, MAX, 40,\n-                COL, MAX, 41,\n-                COL, MAX, 30,\n-            };\n-        case PMIN:\n-            return new Object[] {\n-                COL, MIN, 30,\n-                COL, MIN, 31,\n-                COL, MIN, 32,\n-                COL, MIN, 33,\n-                COL, MIN, 34,\n-                COL, MIN, 35,\n-                COL, MIN, 36,\n-                COL, MIN, 37,\n-                COL, MIN, 38,\n-                COL, MIN, 39,\n-                COL, MIN, 40,\n-                COL, MIN, 41,\n-                COL, MIN, 30,\n-            };\n-        case ALL:\n-            return new Object[] {\n-                COL,\n-                COL, MIN, 20, PREF, 20, MAX, 20,\n-                COL, PREF, 200,\n-                COL, PREF, 300, MAX, 400,\n-                COL\n-            };\n-        case BUG_8264591:\n-            return new Object[] {\n-                COL, PREF, 25.3,\n-                COL, PREF, 25.3,\n-                COL, PREF, 25.4,\n-                COL, PREF, 25.3, MAX, 100,\n-                COL, PREF, 25.3, MAX, 101,\n-                COL, PREF, 25.4\n-            };\n-        case FILL_MAX:\n-            return new Object[] {\n-                COL, FILL,\n-                COL, MAX, 200\n-            };\n-        case PREF:\n-            return new Object[] {\n-                COL, PREF, 100,\n-                COL, PREF, 200,\n-                COL, PREF, 300,\n-                COL, PREF, 400\n-            };\n-        case MIN_WIDTH:\n-            return new Object[] {\n-                COL,\n-                COL,\n-                COL,\n-                COL, MIN, 300\n-            };\n-        case MAX_WIDTH:\n-            return new Object[] {\n-                COL, MAX, 30, FILL,\n-                COL, MAX, 31, FILL,\n-                COL, MAX, 32, FILL,\n-                COL, MAX, 33, FILL,\n-                COL, MAX, 34, FILL,\n-                COL, MAX, 35, FILL,\n-                COL, MAX, 36, FILL,\n-                COL, MAX, 37, FILL,\n-                COL, MAX, 38, FILL,\n-            };\n-        case MIN_WIDTH2:\n-            return new Object[] {\n-                COL,\n-                COL,\n-                COL, MIN, 300,\n-                COL\n-            };\n-        case MAX_WIDTH2:\n-            return new Object[] {\n-                COL,\n-                COL,\n-                COL, MAX, 100,\n-                COL\n-            };\n-        case MIN_WIDTH3:\n-            return new Object[] {\n-                COL, MIN, 300,\n-                COL,\n-                COL,\n-                COL\n-            };\n-        case MAX_WIDTH3:\n-            return new Object[] {\n-                COL, MAX, 100,\n-                COL,\n-                COL,\n-                COL\n-            };\n-        case MIN_IN_CENTER:\n-            return new Object[] {\n-                COL,\n-                COL, MIN, 20,\n-                COL, MIN, 30,\n-                COL, MIN, 40,\n-                COL, MIN, 50,\n-                COL, MIN, 60,\n-                COL\n-            };\n-        case MAX_IN_CENTER:\n-            return new Object[] {\n-                COL,\n-                COL, MAX, 20,\n-                COL, MAX, 30,\n-                COL, MAX, 40,\n-                COL, MAX, 50,\n-                COL, MAX, 60,\n-                COL\n-            };\n-        case FIXED_MIDDLE:\n-            return new Object[] {\n-                COL,\n-                COL,\n-                COL,\n-                COL, MIN, 100, MAX, 100,\n-                COL, MIN, 100, MAX, 100,\n-                COL,\n-                COL,\n-                COL\n-            };\n-        case ALL_FIXED:\n-            return new Object[] {\n-                COL, MIN, 50, MAX, 50,\n-                COL, MIN, 50, MAX, 50,\n-                COL, MIN, 50, MAX, 50\n-            };\n-        case ALL_MAX:\n-            return new Object[] {\n-                COL, MAX, 50,\n-                COL, MAX, 50,\n-                COL, MAX, 50\n-            };\n-        case VARIOUS:\n-            return new Object[] {\n-                COL, PREF, 100,\n-                COL, PREF, 200,\n-                COL, PREF, 300,\n-                COL, MIN, 100, MAX, 100,\n-                COL, PREF, 100,\n-                COL, MIN, 100,\n-                COL, MAX, 100,\n-                COL, PREF, 400,\n-                COL\n-            };\n-        case MANY_COLUMNS:\n-            return new Object[] {\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL\n-            };\n-        case MANY_COLUMNS_SAME:\n-            return new Object[] {\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30\n-            };\n-        default:\n-            throw new Error(\"?\" + d);\n-        }\n+    @Override\n+    protected Pane createPane() {\n+        return new HBox();\n@@ -359,56 +54,3 @@\n-    protected HBox createPane(Demo demo, Object[] spec) {\n-        if ((demo == null) || (spec == null)) {\n-            return new HBox();\n-        }\n-\n-        HBox box = new HBox();\n-        box.setSnapToPixel(snap.isSelected());\n-        snap.selectedProperty().bindBidirectional(box.snapToPixelProperty());\n-        Region region = null;\n-\n-        for (int i = 0; i < spec.length;) {\n-            Object x = spec[i++];\n-            if (x instanceof Cmd cmd) {\n-                switch (cmd) {\n-                case COL:\n-                    {\n-                        Region c = addItem(box);\n-                        HBox.setHgrow(c, grow.isSelected() ? Priority.ALWAYS : Priority.NEVER);\n-                        region = c;\n-                    }\n-                    break;\n-                case MAX:\n-                    {\n-                        double w = number(spec[i++]);\n-                        region.setMaxWidth(w);\n-                    }\n-                    break;\n-                case MIN:\n-                    {\n-                        double w = number(spec[i++]);\n-                        region.setMinWidth(w);\n-                    }\n-                    break;\n-                case PREF:\n-                    {\n-                        double w = number(spec[i++]);\n-                        region.setPrefWidth(w);\n-                    }\n-                    break;\n-                case FILL:\n-                    {\n-                        HBox.setHgrow(region, Priority.ALWAYS);\n-                    }\n-                    break;\n-                default:\n-                    throw new Error(\"?\" + cmd);\n-                }\n-            } else {\n-                throw new Error(\"?\" + x);\n-            }\n-        }\n-\n-        box.setPadding(new Insets(0, 0, 10, 0));\n-        box.setBackground(Background.fill(Color.DARKGRAY));\n-\n-        return box;\n+    @Override\n+    protected void setMin(Region r, double v) {\n+        r.setMinWidth(v);\n@@ -417,2 +59,3 @@\n-    protected static double number(Object x) {\n-        return ((Number)x).doubleValue();\n+    @Override\n+    protected void setPref(Region r, double v) {\n+        r.setPrefWidth(v);\n@@ -421,3 +64,4 @@\n-    protected Region addItem(HBox box) {\n-        boolean even = (box.getChildren().size() % 2) == 0;\n-        Background bg = Background.fill(even ? Color.GRAY : Color.LIGHTGRAY);\n+    @Override\n+    protected void setMax(Region r, double v) {\n+        r.setMaxWidth(v);\n+    }\n@@ -425,0 +69,2 @@\n+    @Override\n+    protected Region createRegion() {\n@@ -428,1 +74,0 @@\n-        r.setBackground(bg);\n@@ -439,1 +84,0 @@\n-        box.getChildren().add(r);\n@@ -442,11 +86,0 @@\n-\n-    protected void updatePane() {\n-        Demo d = demoSelector.getSelectionModel().getSelectedItem();\n-        Object[] spec = createSpec(d);\n-        hbox = createPane(d, spec);\n-\n-        BorderPane bp = new BorderPane(hbox);\n-        bp.setPadding(new Insets(0, 10, 0, 0));\n-\n-        setContent(bp);\n-    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/HBoxPage.java","additions":22,"deletions":389,"binary":false,"changes":411,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -35,1 +36,1 @@\n-        setId(\"HtmlEditorPage\");\n+        FX.name(this, \"HtmlEditorPage\");\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/HtmlEditorPage.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        setId(\"LabelPage\");\n+        FX.name(this, \"LabelPage\");\n@@ -71,1 +71,1 @@\n-        label1Selector.setId(\"label1Selector\");\n+        FX.name(label1Selector, \"label1Selector\");\n@@ -79,1 +79,1 @@\n-        label2Selector.setId(\"label2Selector\");\n+        FX.name(label2Selector, \"label2Selector\");\n@@ -87,1 +87,1 @@\n-        alignmentSelector.setId(\"alignmentSelector\");\n+        FX.name(alignmentSelector, \"alignmentSelector\");\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/LabelPage.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n@@ -28,0 +30,3 @@\n+import java.util.function.Function;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n@@ -30,0 +35,2 @@\n+import javafx.scene.canvas.Canvas;\n+import javafx.scene.canvas.GraphicsContext;\n@@ -33,0 +40,2 @@\n+import javafx.scene.control.FocusModel;\n+import javafx.scene.control.ListCell;\n@@ -34,0 +43,1 @@\n+import javafx.scene.control.MultipleSelectionModel;\n@@ -35,0 +45,3 @@\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.cell.TextFieldListCell;\n+import javafx.scene.control.skin.ListViewSkin;\n@@ -36,0 +49,2 @@\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n@@ -37,1 +52,5 @@\n-import javafx.scene.layout.Pane;\n+import javafx.scene.paint.Color;\n+import javafx.scene.text.Text;\n+import javafx.util.Callback;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n@@ -45,2 +64,2 @@\n-public class ListViewPage extends TestPaneBase {\n-    enum Demo {\n+public class ListViewPage extends TestPaneBase implements HasSkinnable {\n+    enum Data {\n@@ -54,1 +73,1 @@\n-        Demo(String text) { this.text = text; }\n+        Data(String text) { this.text = text; }\n@@ -64,2 +83,8 @@\n-        Selection(String text) { this.text = text; }\n-        public String toString() { return text; }\n+\n+        Selection(String text) {\n+            this.text = text;\n+        }\n+\n+        public String toString() {\n+            return text;\n+        }\n@@ -73,4 +98,15 @@\n-    protected final ComboBox<Demo> demoSelector;\n-    protected final ComboBox<Selection> selectionSelector;\n-    protected final CheckBox nullFocusModel;\n-    protected ListView<Object> control;\n+    private enum Cells {\n+        DEFAULT,\n+        EDITABLE_TEXT_FIELD,\n+        LARGE_ICON,\n+        VARIABLE,\n+    }\n+\n+    private final ComboBox<Data> dataSelector;\n+    private final ComboBox<Cells> cellFactorySelector;\n+    private final ComboBox<Selection> selectionSelector;\n+    private final CheckBox nullFocusModel;\n+    private final CheckBox editable;\n+    private final ListView<Object> control;\n+    private FocusModel<Object> defaultFocusModel;\n+    private MultipleSelectionModel<Object> defaultSelectionModel;\n@@ -79,9 +115,31 @@\n-        setId(\"ListViewPage\");\n-\n-        \/\/ selector\n-        demoSelector = new ComboBox<>();\n-        demoSelector.setId(\"demoSelector\");\n-        demoSelector.getItems().addAll(Demo.values());\n-        demoSelector.setEditable(false);\n-        demoSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updatePane();\n+        FX.name(this, \"ListViewPage\");\n+\n+        control = new ListView<>();\n+        control.setTooltip(new Tooltip(\"edit to 'update' to commit the change\"));\n+        control.setOnEditCommit((ev) -> {\n+            if (\"update\".equals(ev.getNewValue())) {\n+                int ix = ev.getIndex();\n+                ev.getSource().getItems().set(ix, \"UPDATED!\");\n+                System.out.println(\"committing the value `UPDATED!`\");\n+            } else {\n+                System.out.println(\"discarding the new value: \" + ev.getNewValue());\n+            }\n+        });\n+        defaultFocusModel = control.getFocusModel();\n+        defaultSelectionModel = control.getSelectionModel();\n+        setContent(new BorderPane(control));\n+\n+        dataSelector = new ComboBox<>();\n+        FX.name(dataSelector, \"demoSelector\");\n+        dataSelector.getItems().addAll(Data.values());\n+        dataSelector.setEditable(false);\n+        onChange(dataSelector, true, () -> {\n+            updateData();\n+        });\n+\n+        cellFactorySelector = new ComboBox<>();\n+        FX.name(cellFactorySelector, \"cellSelector\");\n+        cellFactorySelector.getItems().addAll(Cells.values());\n+        cellFactorySelector.setEditable(false);\n+        cellFactorySelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updateCellFactory();\n@@ -91,1 +149,1 @@\n-        selectionSelector.setId(\"selectionSelector\");\n+        FX.name(selectionSelector, \"selectionSelector\");\n@@ -94,2 +152,2 @@\n-        selectionSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updatePane();\n+        onChange(selectionSelector, true, () -> {\n+            updateSelectionModel();\n@@ -99,3 +157,3 @@\n-        nullFocusModel.setId(\"nullFocusModel\");\n-        nullFocusModel.selectedProperty().addListener((s, p, c) -> {\n-            updatePane();\n+        FX.name(nullFocusModel, \"nullFocusModel\");\n+        onChange(nullFocusModel, true, () -> {\n+            updateFocusModel();\n@@ -119,0 +177,11 @@\n+        Button refresh = new Button(\"Refresh\");\n+        refresh.setOnAction((ev) -> {\n+            control.refresh();\n+        });\n+\n+        editable = new CheckBox(\"editable\");\n+        editable.setOnAction((ev) -> {\n+            updateEditable();\n+        });\n+        FX.name(editable, \"editable\");\n+\n@@ -121,12 +190,16 @@\n-        OptionPane p = new OptionPane();\n-        p.label(\"Data:\");\n-        p.option(demoSelector);\n-        p.option(addButton);\n-        p.option(clearButton);\n-        p.label(\"Selection Model:\");\n-        p.option(selectionSelector);\n-        p.option(nullFocusModel);\n-        p.option(jumpButton);\n-        setOptions(p);\n-\n-        demoSelector.getSelectionModel().selectFirst();\n+        OptionPane op = new OptionPane();\n+        op.label(\"Data:\");\n+        op.option(dataSelector);\n+        op.option(addButton);\n+        op.option(clearButton);\n+        op.option(editable);\n+        op.label(\"Cell Factory:\");\n+        op.option(cellFactorySelector);\n+        op.label(\"Selection Model:\");\n+        op.option(selectionSelector);\n+        op.option(nullFocusModel);\n+        op.option(jumpButton);\n+        op.option(refresh);\n+        setOptions(op);\n+\n+        dataSelector.getSelectionModel().selectFirst();\n@@ -136,20 +209,4 @@\n-    protected Object[] createSpec(Demo d) {\n-        switch (d) {\n-        case EMPTY:\n-            return new Object[] {\n-            };\n-        case LARGE:\n-            return new Object[] {\n-                Cmd.ROWS, 10_000,\n-            };\n-        case SMALL:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-            };\n-        case VARIABLE:\n-            return new Object[] {\n-                Cmd.VARIABLE_ROWS, 500,\n-            };\n-        default:\n-            throw new Error(\"?\" + d);\n-        }\n+    protected void updateData() {\n+        Data d = dataSelector.getSelectionModel().getSelectedItem();\n+        ObservableList<Object> items = createData(d);\n+        control.setItems(items);\n@@ -158,3 +215,21 @@\n-    protected void updatePane() {\n-        Demo d = demoSelector.getSelectionModel().getSelectedItem();\n-        Object[] spec = createSpec(d);\n+    private ObservableList<Object> createData(Data d) {\n+        ObservableList<Object> items = FXCollections.observableArrayList();\n+        if (d != null) {\n+            switch (d) {\n+            case EMPTY:\n+                break;\n+            case LARGE:\n+                createItems(items, 10_000, this::newItem);\n+                break;\n+            case SMALL:\n+                createItems(items, 3, this::newItem);\n+                break;\n+            case VARIABLE:\n+                createItems(items, 500, this::newVariableItem);\n+                break;\n+            default:\n+                throw new Error(\"?\" + d);\n+            }\n+        }\n+        return items;\n+    }\n@@ -162,2 +237,5 @@\n-        Pane n = createPane(d, spec);\n-        setContent(n);\n+    private void createItems(ObservableList<Object> items, int count, Function<Integer, Object> gen) {\n+        for (int i = 0; i < count; i++) {\n+            Object v = gen.apply(i);\n+            items.add(v);\n+        }\n@@ -166,3 +244,6 @@\n-    protected Pane createPane(Demo demo, Object[] spec) {\n-        if ((demo == null) || (spec == null)) {\n-            return new BorderPane();\n+    protected void updateFocusModel() {\n+        FocusModel<Object> m;\n+        if (nullFocusModel.isSelected()) {\n+            m = null;\n+        } else {\n+            m = defaultFocusModel;\n@@ -170,0 +251,2 @@\n+        control.setFocusModel(m);\n+    }\n@@ -171,1 +254,2 @@\n-        boolean nullSelectionModel = false;\n+    protected void updateSelectionModel() {\n+        MultipleSelectionModel<Object> sm = defaultSelectionModel;\n@@ -180,1 +264,1 @@\n-                nullSelectionModel = true;\n+                sm = null;\n@@ -189,1 +273,0 @@\n-        control = new ListView<>();\n@@ -191,36 +274,1 @@\n-        if (nullSelectionModel) {\n-            control.setSelectionModel(null);\n-        }\n-        if (nullFocusModel.isSelected()) {\n-            control.setFocusModel(null);\n-        }\n-\n-        for (int i = 0; i < spec.length;) {\n-            Object x = spec[i++];\n-            if (x instanceof Cmd cmd) {\n-                switch (cmd) {\n-                case ROWS: {\n-                    int n = (int)(spec[i++]);\n-                    for (int j = 0; j < n; j++) {\n-                        control.getItems().add(newItem(i));\n-                    }\n-                }\n-                    break;\n-                case VARIABLE_ROWS: {\n-                    int n = (int)(spec[i++]);\n-                    for (int j = 0; j < n; j++) {\n-                        control.getItems().add(newVariableItem(j));\n-                    }\n-                }\n-                    break;\n-                default:\n-                    throw new Error(\"?\" + cmd);\n-                }\n-            } else {\n-                throw new Error(\"?\" + x);\n-            }\n-        }\n-\n-        BorderPane bp = new BorderPane();\n-        bp.setCenter(control);\n-        return bp;\n+        control.setSelectionModel(sm);\n@@ -270,0 +318,105 @@\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new ListViewSkin(control));\n+    }\n+\n+    private void updateCellFactory() {\n+        Cells t = cellFactorySelector.getSelectionModel().getSelectedItem();\n+        Callback<ListView<Object>, ListCell<Object>> f = getCellFactory(t);\n+        control.setCellFactory(f);\n+    }\n+\n+    private static Image createImage(String s) {\n+        byte[] hash;\n+        try {\n+            hash = MessageDigest.getInstance(\"sha-256\").digest(s.getBytes());\n+        } catch (NoSuchAlgorithmException e) {\n+            e.printStackTrace();\n+            hash = new byte[3];\n+        }\n+        Color color = Color.rgb(hash[0] & 0xff, hash[1] & 0xff, hash[2] & 0xff);\n+        Canvas c = new Canvas(512, 512);\n+        GraphicsContext g = c.getGraphicsContext2D();\n+        g.setFill(color);\n+        g.fillRect(0, 0, c.getWidth(), c.getHeight());\n+        return c.snapshot(null, null);\n+    }\n+\n+    private Callback getCellFactory(Cells t) {\n+        if (t != null) {\n+            switch (t) {\n+            case EDITABLE_TEXT_FIELD:\n+                return TextFieldListCell.forListView();\n+            case LARGE_ICON:\n+                return (r) -> {\n+                    return new ListCell<Object>() {\n+                        @Override\n+                        protected void updateItem(Object item, boolean empty) {\n+                            super.updateItem(item, empty);\n+                            if (item == null) {\n+                                super.setText(null);\n+                                super.setGraphic(null);\n+                            } else {\n+                                String s = item.toString();\n+                                super.setText(s);\n+                                Node n = new ImageView(createImage(s));\n+                                super.setGraphic(n);\n+                            }\n+                        }\n+                    };\n+                };\n+            case VARIABLE:\n+                return (r) -> {\n+                    return new ListCell<Object>() {\n+                        @Override\n+                        protected void updateItem(Object item, boolean empty) {\n+                            super.updateItem(item, empty);\n+                            String s =\n+                                \"111111111111111111111111111111111111111111111\" +\n+                                \"11111111111111111111111111111111111111111\\n2\\n3\\n\";\n+                            Text t = new Text(s);\n+                            t.wrappingWidthProperty().bind(widthProperty());\n+                            setPrefHeight(USE_COMPUTED_SIZE);\n+                            setGraphic(t);\n+                        }\n+                    };\n+                };\n+            }\n+        }\n+\n+        \/\/ ListViewSkin\n+        return (r) -> new ListCell<Object>() {\n+            @Override\n+            public void updateItem(Object item, boolean empty) {\n+                super.updateItem(item, empty);\n+                if (empty) {\n+                    setText(null);\n+                    setGraphic(null);\n+                } else if (item instanceof Node) {\n+                    setText(null);\n+                    Node currentNode = getGraphic();\n+                    Node newNode = (Node)item;\n+                    if (currentNode == null || !currentNode.equals(newNode)) {\n+                        setGraphic(newNode);\n+                    }\n+                } else {\n+                    setText(item == null ? \"null\" : item.toString());\n+                    setGraphic(null);\n+                }\n+            }\n+        };\n+    }\n+\n+    protected void updateEditable() {\n+        boolean on = editable.isSelected();\n+        control.setEditable(on);\n+        if (on) {\n+            cellFactorySelector.getSelectionModel().select(Cells.EDITABLE_TEXT_FIELD);\n+        }\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ListViewPage.java","additions":257,"deletions":104,"binary":false,"changes":361,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.scene.control.PasswordField;\n+\n+\/**\n+ * PasswordField page uses the fact that PasswordField is a TextField.\n+ *\/\n+public class PasswordFieldPage extends TextFieldPage {\n+    public PasswordFieldPage() {\n+        super(new PasswordField(), \"PasswordFieldPage\");\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/PasswordFieldPage.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.chart.PieChart;\n+import javafx.scene.chart.PieChart.Data;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.layout.BorderPane;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * PieChart Page\n+ *\/\n+public class PieChartPage extends TestPaneBase {\n+    public enum Model {\n+        SMALL(\"Small\"),\n+        LARGE(\"Large\"),\n+        EMPTY(\"Empty\"),\n+        ;\n+        private final String text;\n+        Model(String text) { this.text = text; }\n+        public String toString() { return text; }\n+    }\n+\n+    private final ObservableList<PieChart.Data> data;\n+    private final ComboBox<Model> modelSelector;\n+    private PieChart chart;\n+    protected static Random rnd = new Random();\n+\n+    public PieChartPage() {\n+        FX.name(this, \"PieChartPage\");\n+\n+        data = FXCollections.observableArrayList();\n+        chart = new PieChart(data);\n+\n+        modelSelector = new ComboBox<>();\n+        FX.name(modelSelector, \"modelSelector\");\n+        modelSelector.getItems().addAll(Model.values());\n+        modelSelector.setEditable(false);\n+        modelSelector.getSelectionModel().selectedItemProperty().addListener((x) -> {\n+            updateChart();\n+        });\n+\n+        CheckBox animated = new CheckBox(\"animation\");\n+        FX.name(animated, \"animated\");\n+        animated.selectedProperty().bindBidirectional(chart.animatedProperty());\n+\n+        OptionPane p = new OptionPane();\n+        p.label(\"Model:\");\n+        p.option(modelSelector);\n+        p.option(animated);\n+        setOptions(p);\n+\n+        BorderPane bp = new BorderPane();\n+        bp.setCenter(chart);\n+        setContent(bp);\n+\n+        modelSelector.getSelectionModel().selectFirst();\n+    }\n+\n+    protected void updateChart() {\n+        Model m = modelSelector.getSelectionModel().getSelectedItem();\n+        List<PieChart.Data> d = createData(m);\n+        chart.getData().setAll(d);\n+    }\n+\n+    private List<PieChart.Data> createData(Model m) {\n+        ArrayList<PieChart.Data> a = new ArrayList<>();\n+        switch (m) {\n+        case SMALL:\n+            addRandom(a, 30);\n+            break;\n+        case LARGE:\n+            addRandom(a, 3000);\n+            break;\n+        case EMPTY:\n+            break;\n+        default:\n+            throw new Error(\"?\" + m);\n+        }\n+        return a;\n+    }\n+\n+    private void addRandom(ArrayList<Data> a, int max) {\n+        Random r = new Random();\n+        int sz = r.nextInt(max);\n+        for (int i = 0; i < sz; i++) {\n+            a.add(new PieChart.Data(\"N\" + i, r.nextDouble()));\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/PieChartPage.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -45,1 +46,1 @@\n-        setId(\"ScrollBarPage\");\n+        FX.name(this, \"ScrollBarPage\");\n@@ -50,1 +51,1 @@\n-        min.setId(\"min\");\n+        FX.name(min, \"min\");\n@@ -58,1 +59,1 @@\n-        val.setId(\"val\");\n+        FX.name(val, \"val\");\n@@ -66,1 +67,1 @@\n-        visible.setId(\"visible\");\n+        FX.name(visible, \"visible\");\n@@ -74,1 +75,1 @@\n-        max.setId(\"max\");\n+        FX.name(max, \"max\");\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ScrollBarPage.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        setId(\"SpinnerPage\");\n+        FX.name(this, \"SpinnerPage\");\n@@ -65,1 +65,1 @@\n-        modeChoice.setId(\"modeChoice\");\n+        FX.name(modeChoice, \"modeChoice\");\n@@ -73,1 +73,1 @@\n-        converterChoice.setId(\"converterChoice\");\n+        FX.name(converterChoice, \"converterChoice\");\n@@ -81,1 +81,1 @@\n-        editable.setId(\"editable\");\n+        FX.name(editable, \"editable\");\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/SpinnerPage.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.function.Consumer;\n@@ -29,0 +30,7 @@\n+import javafx.beans.value.ObservableValue;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.Node;\n+import javafx.scene.canvas.Canvas;\n+import javafx.scene.canvas.GraphicsContext;\n@@ -38,0 +46,1 @@\n+import javafx.scene.control.TableColumn.CellDataFeatures;\n@@ -41,0 +50,1 @@\n+import javafx.scene.control.skin.TableViewSkin;\n@@ -43,0 +53,1 @@\n+import javafx.scene.paint.Color;\n@@ -45,0 +56,2 @@\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n@@ -52,2 +65,3 @@\n-public class TableViewPage extends TestPaneBase {\n-    enum Demo {\n+public class TableViewPage extends TestPaneBase implements HasSkinnable {\n+    private enum Demo {\n+        ALL(\"all set: min, pref, max\"),\n@@ -56,1 +70,0 @@\n-        ALL(\"all set: min, pref, max\"),\n@@ -71,1 +84,2 @@\n-        MILLION(\"million rows\"),\n+        THOUSAND(\"1,000 rows\"),\n+        MILLION(\"10,000,000 rows\"),\n@@ -80,1 +94,1 @@\n-    public enum ResizePolicy {\n+    private enum ResizePolicy {\n@@ -92,1 +106,14 @@\n-    public enum Selection {\n+    private enum CellValue {\n+        VALUE,\n+        NULL,\n+        MIN_MAX,\n+        QUOTED,\n+    }\n+\n+    private enum Cells {\n+        DEFAULT,\n+        GRAPHICS,\n+        VARIABLE,\n+    }\n+\n+    private enum Selection {\n@@ -104,1 +131,11 @@\n-    public enum Cmd {\n+    private enum Filter {\n+        NONE(\"<NONE>\"),\n+        SKIP1S(\"skip 11s\"),\n+        SKIP2S(\"skip 22s\");\n+\n+        private final String text;\n+        Filter(String text) { this.text = text; }\n+        public String toString() { return text; }\n+    }\n+\n+    private enum Cmd {\n@@ -114,7 +151,11 @@\n-    protected final ComboBox<Demo> demoSelector;\n-    protected final ComboBox<ResizePolicy> policySelector;\n-    protected final ComboBox<Selection> selectionSelector;\n-    protected final CheckBox nullFocusModel;\n-    protected final CheckBox hideColumn;\n-    protected final CheckBox fixedHeight;\n-    protected TableView<String> table;\n+    private final ComboBox<Demo> demoSelector;\n+    private final ComboBox<CellValue> cellValueSelector;\n+    private final ComboBox<Cells> cellFactorySelector;\n+    private final ComboBox<ResizePolicy> policySelector;\n+    private final ComboBox<Selection> selectionSelector;\n+    private final ComboBox<Filter> filterSelector;\n+    private final CheckBox nullFocusModel;\n+    private final CheckBox hideColumn;\n+    private final CheckBox fixedHeight;\n+    private final CheckBox menuButtonVisible;\n+    private TableView<String> control;\n@@ -123,1 +164,1 @@\n-        setId(\"TableViewPage\");\n+        FX.name(this, \"TableViewPage\");\n@@ -125,1 +166,0 @@\n-        \/\/ selector\n@@ -127,1 +167,1 @@\n-        demoSelector.setId(\"demoSelector\");\n+        FX.name(demoSelector, \"demoSelector\");\n@@ -134,0 +174,16 @@\n+        cellValueSelector = new ComboBox<>();\n+        FX.name(cellValueSelector, \"cellValueSelector\");\n+        cellValueSelector.getItems().addAll(CellValue.values());\n+        cellValueSelector.setEditable(false);\n+        cellValueSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updateCellValueFactory();\n+        });\n+\n+        cellFactorySelector = new ComboBox<>();\n+        FX.name(cellFactorySelector, \"cellSelector\");\n+        cellFactorySelector.getItems().addAll(Cells.values());\n+        cellFactorySelector.setEditable(false);\n+        cellFactorySelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updateCellFactory();\n+        });\n+\n@@ -135,1 +191,1 @@\n-        policySelector.setId(\"policySelector\");\n+        FX.name(policySelector, \"policySelector\");\n@@ -143,1 +199,1 @@\n-        selectionSelector.setId(\"selectionSelector\");\n+        FX.name(selectionSelector, \"selectionSelector\");\n@@ -150,0 +206,8 @@\n+        filterSelector = new ComboBox<>();\n+        FX.name(filterSelector, \"filterSelector\");\n+        filterSelector.getItems().addAll(Filter.values());\n+        filterSelector.setEditable(false);\n+        filterSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updatePane();\n+        });\n+\n@@ -151,1 +215,1 @@\n-        nullFocusModel.setId(\"nullFocusModel\");\n+        FX.name(nullFocusModel, \"nullFocusModel\");\n@@ -158,1 +222,1 @@\n-            table.getItems().add(newItem());\n+            control.getItems().add(newItem());\n@@ -163,1 +227,1 @@\n-            table.getItems().clear();\n+            control.getItems().clear();\n@@ -179,1 +243,1 @@\n-        hideColumn.setId(\"hideColumn\");\n+        FX.name(hideColumn, \"hideColumn\");\n@@ -185,1 +249,1 @@\n-        fixedHeight.setId(\"fixedHeight\");\n+        FX.name(fixedHeight, \"fixedHeight\");\n@@ -190,0 +254,8 @@\n+        Button refresh = new Button(\"Refresh\");\n+        refresh.setOnAction((ev) -> {\n+            control.refresh();\n+        });\n+\n+        menuButtonVisible = new CheckBox(\"menu button visible\");\n+        FX.name(menuButtonVisible, \"menuButton\");\n+\n@@ -192,19 +264,30 @@\n-        OptionPane p = new OptionPane();\n-        p.label(\"Data:\");\n-        p.option(demoSelector);\n-        p.option(addButton);\n-        p.option(clearButton);\n-        p.option(addColumnButton);\n-        p.option(removeColumnButton);\n-        p.label(\"Column Resize Policy:\");\n-        p.option(policySelector);\n-        p.label(\"Selection Model:\");\n-        p.option(selectionSelector);\n-        p.option(nullFocusModel);\n-        p.option(hideColumn);\n-        p.option(fixedHeight);\n-        setOptions(p);\n-\n-        demoSelector.getSelectionModel().selectFirst();\n-        policySelector.getSelectionModel().selectFirst();\n-        selectionSelector.getSelectionModel().select(Selection.MULTIPLE_CELL);\n+        OptionPane op = new OptionPane();\n+        op.label(\"Data:\");\n+        op.option(demoSelector);\n+        op.option(addButton);\n+        op.option(clearButton);\n+        op.option(addColumnButton);\n+        op.option(removeColumnButton);\n+        op.label(\"Filter:\");\n+        op.option(filterSelector);\n+        op.label(\"Cell Value:\");\n+        op.option(cellValueSelector);\n+        op.label(\"Cell Factory:\");\n+        op.option(cellFactorySelector);\n+        op.label(\"Column Resize Policy:\");\n+        op.option(policySelector);\n+        op.label(\"Selection Model:\");\n+        op.option(selectionSelector);\n+        op.option(nullFocusModel);\n+        op.option(hideColumn);\n+        op.option(fixedHeight);\n+        op.option(refresh);\n+        op.option(menuButtonVisible);\n+        setOptions(op);\n+\n+        FX.selectFirst(demoSelector);\n+        FX.selectFirst(cellValueSelector);\n+        FX.selectFirst(cellFactorySelector);\n+        FX.selectFirst(policySelector);\n+        FX.select(selectionSelector, Selection.MULTIPLE_CELL);\n+        FX.selectFirst(filterSelector);\n@@ -224,1 +307,1 @@\n-        int ct = table.getColumns().size();\n+        int ct = control.getColumns().size();\n@@ -239,1 +322,1 @@\n-            table.getColumns().add(c);\n+            control.getColumns().add(c);\n@@ -241,1 +324,1 @@\n-            table.getColumns().add(ix, c);\n+            control.getColumns().add(ix, c);\n@@ -246,1 +329,1 @@\n-        int ct = table.getColumns().size();\n+        int ct = control.getColumns().size();\n@@ -262,1 +345,1 @@\n-            table.getColumns().remove(ix);\n+            control.getColumns().remove(ix);\n@@ -328,1 +411,1 @@\n-                Cmd.COL, Cmd.MIN, 20, Cmd.PREF, 20, Cmd.MAX, 20,\n+                Cmd.COL, Cmd.MIN, 30, Cmd.MAX, 30,\n@@ -331,0 +414,3 @@\n+                Cmd.COL, Cmd.MIN, 40,\n+                Cmd.COL,\n+                Cmd.COL,\n@@ -524,1 +610,11 @@\n-                Cmd.ROWS, 1_000_000,\n+                Cmd.ROWS, 10_000_000,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL\n+            };\n+        case THOUSAND:\n+            return new Object[] {\n+                Cmd.ROWS, 1_000,\n+                Cmd.COL,\n+                Cmd.COL,\n@@ -584,3 +680,3 @@\n-        table = new TableView<>();\n-        table.getSelectionModel().setCellSelectionEnabled(cellSelection);\n-        table.getSelectionModel().setSelectionMode(selectionMode);\n+        control = new TableView<>();\n+        control.getSelectionModel().setCellSelectionEnabled(cellSelection);\n+        control.getSelectionModel().setSelectionMode(selectionMode);\n@@ -588,1 +684,1 @@\n-            table.setSelectionModel(null);\n+            control.setSelectionModel(null);\n@@ -591,1 +687,1 @@\n-            table.setFocusModel(null);\n+            control.setFocusModel(null);\n@@ -594,1 +690,1 @@\n-            table.setFixedCellSize(20);\n+            control.setFixedCellSize(20);\n@@ -597,0 +693,3 @@\n+        control.setTableMenuButtonVisible(menuButtonVisible.isSelected());\n+        menuButtonVisible.selectedProperty().bindBidirectional(control.tableMenuButtonVisibleProperty());\n+\n@@ -598,1 +697,1 @@\n-        table.setColumnResizePolicy(p);\n+        control.setColumnResizePolicy(p);\n@@ -607,7 +706,8 @@\n-                case COL: {\n-                    TableColumn<String, String> c = new TableColumn<>();\n-                    table.getColumns().add(c);\n-                    c.setText(\"C\" + table.getColumns().size());\n-                    c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n-                    lastColumn = c;\n-                }\n+                case COL:\n+                    {\n+                        TableColumn<String, String> c = new TableColumn<>();\n+                        control.getColumns().add(c);\n+                        c.setText(\"C\" + control.getColumns().size());\n+                        c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n+                        lastColumn = c;\n+                    }\n@@ -615,20 +715,21 @@\n-                case COL_WITH_GRAPHIC: {\n-                    TableColumn<String, String> c = new TableColumn<>();\n-                    table.getColumns().add(c);\n-                    c.setText(\"C\" + table.getColumns().size());\n-                    c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n-                    c.setCellFactory((r) -> {\n-                        return new TableCell<>() {\n-                            @Override\n-                            protected void updateItem(String item, boolean empty) {\n-                                super.updateItem(item, empty);\n-                                Text t = new Text(\n-                                    \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n2\\n3\\n\");\n-                                t.wrappingWidthProperty().bind(widthProperty());\n-                                setPrefHeight(USE_COMPUTED_SIZE);\n-                                setGraphic(t);\n-                            }\n-                        };\n-                    });\n-                    lastColumn = c;\n-                }\n+                case COL_WITH_GRAPHIC:\n+                    {\n+                        TableColumn<String, String> c = new TableColumn<>();\n+                        control.getColumns().add(c);\n+                        c.setText(\"C\" + control.getColumns().size());\n+                        c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n+                        c.setCellFactory((r) -> {\n+                            return new TableCell<>() {\n+                                @Override\n+                                protected void updateItem(String item, boolean empty) {\n+                                    super.updateItem(item, empty);\n+                                    Text t = new Text(\n+                                        \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n2\\n3\\n\");\n+                                    t.wrappingWidthProperty().bind(widthProperty());\n+                                    setPrefHeight(USE_COMPUTED_SIZE);\n+                                    setGraphic(t);\n+                                }\n+                            };\n+                        });\n+                        lastColumn = c;\n+                    }\n@@ -636,4 +737,5 @@\n-                case MAX: {\n-                    int w = (int)(spec[i++]);\n-                    lastColumn.setMaxWidth(w);\n-                }\n+                case MAX:\n+                    {\n+                        int w = (int)(spec[i++]);\n+                        lastColumn.setMaxWidth(w);\n+                    }\n@@ -641,4 +743,5 @@\n-                case MIN: {\n-                    int w = (int)(spec[i++]);\n-                    lastColumn.setMinWidth(w);\n-                }\n+                case MIN:\n+                    {\n+                        int w = (int)(spec[i++]);\n+                        lastColumn.setMinWidth(w);\n+                    }\n@@ -646,4 +749,5 @@\n-                case PREF: {\n-                    int w = (int)(spec[i++]);\n-                    lastColumn.setPrefWidth(w);\n-                }\n+                case PREF:\n+                    {\n+                        int w = (int)(spec[i++]);\n+                        lastColumn.setPrefWidth(w);\n+                    }\n@@ -651,4 +755,6 @@\n-                case ROWS: {\n-                    int n = (int)(spec[i++]);\n-                    for (int j = 0; j < n; j++) {\n-                        table.getItems().add(newItem());\n+                case ROWS:\n+                    {\n+                        int n = (int)(spec[i++]);\n+                        for (int j = 0; j < n; j++) {\n+                            control.getItems().add(newItem());\n+                        }\n@@ -656,1 +762,0 @@\n-                }\n@@ -661,1 +766,1 @@\n-                    combineColumns(table, ix, ct, id++);\n+                    combineColumns(control, ix, ct, id++);\n@@ -673,0 +778,34 @@\n+        updateCellValueFactory();\n+        updateCellFactory();\n+\n+        Filter f = filterSelector.getSelectionModel().getSelectedItem();\n+        if (f == Filter.NONE) {\n+            f = null;\n+        }\n+        if (f != null) {\n+            ObservableList<String> items = FXCollections.observableArrayList();\n+            items.addAll(control.getItems());\n+            FilteredList<String> filteredList = new FilteredList<>(items);\n+            switch(f) {\n+            case SKIP1S:\n+                filteredList.setPredicate((s) -> {\n+                    if (s == null) {\n+                        return true;\n+                    }\n+                    return !s.contains(\"11\");\n+                });\n+                break;\n+            case SKIP2S:\n+                filteredList.setPredicate((s) -> {\n+                    if (s == null) {\n+                        return true;\n+                    }\n+                    return !s.contains(\"22\");\n+                });\n+                break;\n+            default:\n+                throw new Error(\"?\" + f);\n+            }\n+            control.setItems(filteredList);\n+        }\n+\n@@ -674,1 +813,1 @@\n-        bp.setCenter(table);\n+        bp.setCenter(control);\n@@ -680,1 +819,1 @@\n-            int ct = table.getColumns().size();\n+            int ct = control.getColumns().size();\n@@ -682,1 +821,1 @@\n-                table.getColumns().get(ct \/ 2).setVisible(false);\n+                control.getColumns().get(ct \/ 2).setVisible(false);\n@@ -685,1 +824,1 @@\n-            for (TableColumn c: table.getColumns()) {\n+            for (TableColumn c: control.getColumns()) {\n@@ -695,0 +834,118 @@\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new TableViewSkin<>(control));\n+    }\n+\n+    private Callback<CellDataFeatures<String, String>, ObservableValue<String>> getValueFactory(CellValue t) {\n+        if (t != null) {\n+            switch (t) {\n+            case MIN_MAX:\n+                return (f) -> {\n+                    String s = describe(f.getTableColumn());\n+                    return new SimpleStringProperty(s);\n+                };\n+            case QUOTED:\n+                return (f) -> {\n+                    String s = '\"' + f.getValue() + '\"';\n+                    return new SimpleStringProperty(s);\n+                };\n+            case VALUE:\n+                return (f) -> {\n+                    String s = f.getValue();\n+                    return new SimpleStringProperty(s);\n+                };\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private Node getIcon(String text) {\n+        if (text.contains(\"0\")) {\n+            return icon(Color.RED);\n+        } else if (text.contains(\"1\")) {\n+            return icon(Color.GREEN);\n+        }\n+        return null;\n+    }\n+\n+    private Node icon(Color color) {\n+        Canvas c = new Canvas(16, 16);\n+        GraphicsContext g = c.getGraphicsContext2D();\n+        g.setFill(color);\n+        g.fillRect(0, 0, c.getWidth(), c.getHeight());\n+        return c;\n+    }\n+\n+    private Callback getCellFactory(Cells t) {\n+        if (t != null) {\n+            switch (t) {\n+            case GRAPHICS:\n+                return (r) -> {\n+                    return new TableCell<String,String>() {\n+                        @Override\n+                        protected void updateItem(String item, boolean empty) {\n+                            super.updateItem(item, empty);\n+                            if (item == null) {\n+                                super.setText(null);\n+                                super.setGraphic(null);\n+                            } else {\n+                                String s = item.toString();\n+                                super.setText(s);\n+                                Node n = getIcon(s);\n+                                super.setGraphic(n);\n+                            }\n+                        }\n+                    };\n+                };\n+            case VARIABLE:\n+                return (r) -> {\n+                    return new TableCell<String,String>() {\n+                        @Override\n+                        protected void updateItem(String item, boolean empty) {\n+                            super.updateItem(item, empty);\n+                            String s =\n+                                \"111111111111111111111111111111111111111111111\" +\n+                                \"11111111111111111111111111111111111111111\\n2\\n3\\n\";\n+                            Text t = new Text(s);\n+                            t.wrappingWidthProperty().bind(widthProperty());\n+                            setPrefHeight(USE_COMPUTED_SIZE);\n+                            setGraphic(t);\n+                        }\n+                    };\n+                };\n+            }\n+        }\n+        return TableColumn.DEFAULT_CELL_FACTORY;\n+    }\n+\n+    private void updateColumns(Consumer<TableColumn<String, String>> handler) {\n+        if (control != null) {\n+            for (TableColumn<String, ?> c: control.getColumns()) {\n+                handler.accept((TableColumn<String, String>)c);\n+            }\n+        }\n+    }\n+\n+    private void updateCellValueFactory() {\n+        CellValue t = cellValueSelector.getSelectionModel().getSelectedItem();\n+        Callback<CellDataFeatures<String, String>, ObservableValue<String>> f = getValueFactory(t);\n+\n+        updateColumns((c) -> {\n+            c.setCellValueFactory(f);\n+        });\n+    }\n+\n+    private void updateCellFactory() {\n+        Cells t = cellFactorySelector.getSelectionModel().getSelectedItem();\n+        Callback<TableColumn<String, String>, TableCell<String, String>> f = getCellFactory(t);\n+\n+        updateColumns((c) -> {\n+            c.setCellFactory(f);\n+        });\n+    }\n+\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TableViewPage.java","additions":363,"deletions":106,"binary":false,"changes":469,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -43,1 +44,1 @@\n-        setId(\"TextAreaPage\");\n+        FX.name(this, \"TextAreaPage\");\n@@ -57,1 +58,1 @@\n-        wrap.setId(\"wrapText\");\n+        FX.name(wrap, \"wrapText\");\n@@ -63,1 +64,1 @@\n-        editable.setId(\"editable\");\n+        FX.name(editable, \"editable\");\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextAreaPage.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,6 @@\n+import javafx.geometry.Pos;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TextField;\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -33,4 +39,0 @@\n-import javafx.geometry.Pos;\n-import javafx.scene.control.CheckBox;\n-import javafx.scene.control.ComboBox;\n-import javafx.scene.control.TextField;\n@@ -44,0 +46,1 @@\n+    private final CheckBox inScroll;\n@@ -46,1 +49,5 @@\n-        setId(\"TextFieldPage\");\n+        this(new TextField(), \"TextFieldPage\");\n+    }\n+\n+    protected TextFieldPage(TextField control, String name) {\n+        FX.name(this, \"TextFieldPage\");\n@@ -48,2 +55,2 @@\n-        control = new TextField();\n-        control.setAlignment(Pos.BASELINE_RIGHT);\n+        this.control = control;\n+        control.setAlignment(Pos.CENTER_LEFT);\n@@ -66,1 +73,1 @@\n-        prefColumnCount.setId(\"prefColumnCount\");\n+        FX.name(prefColumnCount, \"prefColumnCount\");\n@@ -82,1 +89,1 @@\n-        editable.setId(\"editable\");\n+        FX.name(editable, \"editable\");\n@@ -85,14 +92,19 @@\n-        OptionPane p = new OptionPane();\n-        p.label(\"Text:\");\n-        p.option(textSelector.node());\n-        p.label(\"Font:\");\n-        p.option(fontSelector.fontNode());\n-        p.label(\"Size:\");\n-        p.option(fontSelector.sizeNode());\n-        p.label(\"Alignment:\");\n-        p.option(posSelector.node());\n-        p.label(\"Prompt:\");\n-        p.option(promptChoice.node());\n-        p.label(\"Preferred Column Count:\");\n-        p.option(prefColumnCount);\n-        p.option(editable);\n+        inScroll = new CheckBox(\"in scroll pane\");\n+        FX.name(inScroll, \"scroll\");\n+        inScroll.setOnAction((ev) -> updateScroll());\n+\n+        OptionPane op = new OptionPane();\n+        op.label(\"Text:\");\n+        op.option(textSelector.node());\n+        op.option(editable);\n+        op.label(\"Font:\");\n+        op.option(fontSelector.fontNode());\n+        op.label(\"Size:\");\n+        op.option(fontSelector.sizeNode());\n+        op.label(\"Alignment:\");\n+        op.option(posSelector.node());\n+        op.label(\"Prompt:\");\n+        op.option(promptChoice.node());\n+        op.label(\"Preferred Column Count:\");\n+        op.option(prefColumnCount);\n+        op.option(inScroll);\n@@ -101,1 +113,1 @@\n-        setOptions(p);\n+        setOptions(op);\n@@ -106,0 +118,9 @@\n+\n+    private void updateScroll() {\n+        if(inScroll.isSelected()) {\n+            ScrollPane sp = new ScrollPane(control);\n+            setContent(sp);\n+        } else {\n+            setContent(control);\n+        }\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextFieldPage.java","additions":45,"deletions":24,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -27,7 +27,0 @@\n-import com.oracle.tools.fx.monkey.util.FontSelector;\n-import com.oracle.tools.fx.monkey.util.OptionPane;\n-import com.oracle.tools.fx.monkey.util.ShowCharacterRuns;\n-import com.oracle.tools.fx.monkey.util.Templates;\n-import com.oracle.tools.fx.monkey.util.TestPaneBase;\n-import com.oracle.tools.fx.monkey.util.TextSelector;\n-import com.oracle.tools.fx.monkey.util.Utils;\n@@ -43,0 +36,1 @@\n+import javafx.scene.control.TextField;\n@@ -52,0 +46,9 @@\n+import com.oracle.tools.fx.monkey.util.EnterTextDialog;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.FontSelector;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.ShowCharacterRuns;\n+import com.oracle.tools.fx.monkey.util.Templates;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import com.oracle.tools.fx.monkey.util.TextSelector;\n+import com.oracle.tools.fx.monkey.util.Utils;\n@@ -57,13 +60,13 @@\n-    protected final TextSelector textSelector;\n-    protected final FontSelector fontSelector;\n-    protected final CheckBox showChars;\n-    protected final CheckBox showCaretPath;\n-    protected final CheckBox underline;\n-    protected final TextFlow control;\n-    protected final Label pickResult;\n-    protected final Label hitInfo;\n-    protected final Label hitInfo2;\n-    protected final Path caretPath;\n-    protected final Path underlinePath;\n-    private static final String INLINE = \"$INLINE\";\n-    private static final String RICH_TEXT = \"$RICH\";\n+    private final TextSelector textSelector;\n+    private final TextField styleField;\n+    private final FontSelector fontSelector;\n+    private final CheckBox showChars;\n+    private final CheckBox showCaretPath;\n+    private final TextFlow control;\n+    private final Label pickResult;\n+    private final Label hitInfo;\n+    private final Label hitInfo2;\n+    private final Path caretPath;\n+    private String currentText;\n+    private static final String INLINE = \"\\u0000_INLINE\";\n+    private static final String RICH_TEXT = \"\\u0000_RICH\";\n@@ -72,1 +75,1 @@\n-        setId(\"TextFlowPage\");\n+        FX.name(this, \"TextFlowPage\");\n@@ -77,0 +80,9 @@\n+        styleField = new TextField();\n+        styleField.setOnAction((ev) -> {\n+            String s = styleField.getText();\n+            if (Utils.isBlank(s)) {\n+                s = null;\n+            }\n+            control.setStyle(s);\n+        });\n+\n@@ -88,6 +100,0 @@\n-        underlinePath = new Path();\n-        underlinePath.setStrokeWidth(1);\n-        underlinePath.setStroke(Color.GREEN);\n-        underlinePath.setFill(Color.YELLOW);\n-        underlinePath.setManaged(false);\n-\n@@ -96,1 +102,1 @@\n-            (t) -> updateControl(),\n+            (t) -> updateText(),\n@@ -100,1 +106,2 @@\n-                \"Rich Text\", RICH_TEXT\n+                \"Rich Text\", RICH_TEXT,\n+                \"Accadian\", Templates.AKKADIAN\n@@ -106,0 +113,8 @@\n+        Button editButton = new Button(\"Enter Text\");\n+        editButton.setOnAction((ev) -> {\n+            new EnterTextDialog(this, (s) -> {\n+                currentText = s;\n+                updateControl();\n+            }).show();\n+        });\n+\n@@ -107,1 +122,1 @@\n-        showChars.setId(\"showChars\");\n+        FX.name(showChars, \"showChars\");\n@@ -113,1 +128,1 @@\n-        showCaretPath.setId(\"showCaretPath\");\n+        FX.name(showCaretPath, \"showCaretPath\");\n@@ -115,7 +130,1 @@\n-            updateCaret();\n-        });\n-\n-        underline = new CheckBox(\"underline shape\");\n-        underline.setId(\"underline\");\n-        underline.selectedProperty().addListener((p) -> {\n-            updateUnderline();\n+            updateControl();\n@@ -124,17 +133,21 @@\n-        OptionPane p = new OptionPane();\n-        p.label(\"Text:\");\n-        p.option(textSelector.node());\n-        p.label(\"Font:\");\n-        p.option(fontSelector.fontNode());\n-        p.label(\"Font Size:\");\n-        p.option(fontSelector.sizeNode());\n-        p.option(showChars);\n-        p.option(showCaretPath);\n-        p.option(underline);\n-        p.option(new Separator(Orientation.HORIZONTAL));\n-        p.label(\"Pick Result:\");\n-        p.option(pickResult);\n-        p.label(\"Text.hitTest:\");\n-        p.option(hitInfo2);\n-        p.label(\"TextFlow.hitTest:\");\n-        p.option(hitInfo);\n+        OptionPane op = new OptionPane();\n+        op.label(\"Text:\");\n+        op.option(textSelector.node());\n+        op.option(editButton);\n+        op.label(\"Font:\");\n+        op.option(fontSelector.fontNode());\n+        op.label(\"Font Size:\");\n+        op.option(fontSelector.sizeNode());\n+        op.option(showChars);\n+        op.option(showCaretPath);\n+        op.label(\"Direct Style:\");\n+        op.option(styleField);\n+        \/\/\n+        op.option(new Separator(Orientation.HORIZONTAL));\n+        op.label(\"Pick Result:\");\n+        op.option(pickResult);\n+        op.label(\"Text.hitTest:\");\n+        op.option(hitInfo2);\n+        op.label(\"TextFlow.hitTest:\");\n+        op.option(hitInfo);\n+        op.label(\"Note: \" + (FX.isMac() ? \"⌘\" : \"ctrl\") + \"-click for caret shape\");\n@@ -143,1 +156,1 @@\n-        setOptions(p);\n+        setOptions(op);\n@@ -149,1 +162,6 @@\n-    protected void updateControl() {\n+    private void updateText() {\n+        currentText = textSelector.getSelectedText();\n+        updateControl();\n+    }\n+\n+    private void updateControl() {\n@@ -151,2 +169,1 @@\n-        String text = textSelector.getSelectedText();\n-        Node[] ts = createTextArray(text, f);\n+        Node[] ts = createTextArray(currentText, f);\n@@ -155,0 +172,3 @@\n+        caretPath.getElements().clear();\n+        control.getChildren().add(caretPath);\n+\n@@ -160,17 +180,5 @@\n-        caretPath.getElements().clear();\n-        underlinePath.getElements().clear();\n-        control.getChildren().addAll(underlinePath, caretPath);\n-\n-        updateCaret();\n-        updateUnderline();\n-    }\n-\n-    \/** TextFlow.getTextLength() *\/\n-    private static int computeTextLength(TextFlow f) {\n-        int len = 0;\n-        for (Node n: f.getChildrenUnmodifiable()) {\n-            if (n instanceof Text t) {\n-                len += t.getText().length();\n-            } else {\n-                \/\/ treat any other nodes as having length 1\n-                len++;\n+        if (showCaretPath.isSelected()) {\n+            int len = FX.getTextLength(control);\n+            for (int i = 0; i < len; i++) {\n+                PathElement[] es = control.caretShape(i, true);\n+                caretPath.getElements().addAll(es);\n@@ -179,1 +187,0 @@\n-        return len;\n@@ -182,1 +189,1 @@\n-    protected Node[] createTextArray(String text, Font f) {\n+    private Node[] createTextArray(String text, Font f) {\n@@ -195,0 +202,2 @@\n+                t(\"BOLD \", f, \"-fx-font-weight:bold;\"),\n+                t(\"BOLD \", f, \"-fx-font-weight:900;\"),\n@@ -197,1 +206,2 @@\n-                t(Templates.TWO_EMOJIS, f)\n+                t(Templates.TWO_EMOJIS, f),\n+                t(Templates.CLUSTERS, f)\n@@ -204,1 +214,1 @@\n-    protected static Text t(String text, Font f) {\n+    private static Text t(String text, Font f) {\n@@ -210,1 +220,1 @@\n-    protected static Text t(String text, Font f, String style) {\n+    private static Text t(String text, Font f, String style) {\n@@ -217,1 +227,1 @@\n-    protected void handleMouseEvent(MouseEvent ev) {\n+    private void handleMouseEvent(MouseEvent ev) {\n@@ -236,1 +246,0 @@\n-    }\n@@ -238,7 +247,4 @@\n-    protected void updateUnderline() {\n-        if (underline.isSelected()) {\n-            int len = computeTextLength(control);\n-            PathElement[] es = control.underlineShape(0, len);\n-            underlinePath.getElements().addAll(es);\n-        } else {\n-            underlinePath.getElements().clear();\n+        if (ev.getEventType() == MouseEvent.MOUSE_CLICKED) {\n+            if (ev.isShortcutDown()) {\n+                showCaretShape(new Point2D(ev.getX(), ev.getY()));\n+            }\n@@ -248,10 +254,5 @@\n-    protected void updateCaret() {\n-        if (showCaretPath.isSelected()) {\n-            int len = computeTextLength(control);\n-            for (int i = 0; i < len; i++) {\n-                PathElement[] es = control.caretShape(i, true);\n-                caretPath.getElements().addAll(es);\n-            }\n-        } else {\n-            caretPath.getElements().clear();\n-        }\n+    private void showCaretShape(Point2D p) {\n+        HitInfo h = control.hitTest(p);\n+        System.out.println(\"hit=\" + h);\n+        PathElement[] pe = control.caretShape(h.getCharIndex(), h.isLeading());\n+        caretPath.getElements().setAll(pe);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextFlowPage.java","additions":101,"deletions":100,"binary":false,"changes":201,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import javafx.geometry.Point2D;\n@@ -28,0 +29,1 @@\n+import javafx.scene.control.Button;\n@@ -31,0 +33,3 @@\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.input.PickResult;\n@@ -32,0 +37,3 @@\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Path;\n+import javafx.scene.shape.PathElement;\n@@ -33,0 +41,1 @@\n+import javafx.scene.text.HitInfo;\n@@ -34,0 +43,2 @@\n+import com.oracle.tools.fx.monkey.util.EnterTextDialog;\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -40,0 +51,1 @@\n+import com.oracle.tools.fx.monkey.util.Utils;\n@@ -46,0 +58,1 @@\n+    private final TextField styleField;\n@@ -50,0 +63,1 @@\n+    private final Path caretPath;\n@@ -51,0 +65,1 @@\n+    private String currentText;\n@@ -53,1 +68,15 @@\n-        setId(\"TextPage\");\n+        FX.name(this, \"TextPage\");\n+\n+        styleField = new TextField();\n+        styleField.setOnAction((ev) -> {\n+            String s = styleField.getText();\n+            if (Utils.isBlank(s)) {\n+                s = null;\n+            }\n+            control.setStyle(s);\n+        });\n+\n+        caretPath = new Path();\n+        caretPath.setStrokeWidth(1);\n+        caretPath.setStroke(Color.RED);\n+        caretPath.setManaged(false);\n@@ -61,1 +90,9 @@\n-        fontSelector = new FontSelector(\"font\", (f) -> updateText());\n+        fontSelector = new FontSelector(\"font\", (f) -> updateControl());\n+\n+        Button editButton = new Button(\"Enter Text\");\n+        editButton.setOnAction((ev) -> {\n+            new EnterTextDialog(this, (s) -> {\n+                currentText = s;\n+                updateControl();\n+            }).show();\n+        });\n@@ -64,1 +101,1 @@\n-        showChars.setId(\"showChars\");\n+        FX.name(showChars, \"showChars\");\n@@ -66,1 +103,1 @@\n-            updateText();\n+            updateControl();\n@@ -70,1 +107,1 @@\n-        wrap.setId(\"wrap\");\n+        FX.name(wrap, \"wrap\");\n@@ -75,9 +112,13 @@\n-        OptionPane p = new OptionPane();\n-        p.label(\"Text:\");\n-        p.option(textSelector.node());\n-        p.label(\"Font:\");\n-        p.option(fontSelector.fontNode());\n-        p.label(\"Font Size:\");\n-        p.option(fontSelector.sizeNode());\n-        p.option(wrap);\n-        p.option(showChars);\n+        OptionPane op = new OptionPane();\n+        op.label(\"Text:\");\n+        op.option(textSelector.node());\n+        op.option(editButton);\n+        op.label(\"Font:\");\n+        op.option(fontSelector.fontNode());\n+        op.label(\"Font Size:\");\n+        op.option(fontSelector.sizeNode());\n+        op.option(wrap);\n+        op.option(showChars);\n+        op.label(\"Note: \" + (FX.isMac() ? \"⌘\" : \"ctrl\") + \"-click for caret shape\");\n+        op.label(\"Direct Style:\");\n+        op.option(styleField);\n@@ -92,1 +133,1 @@\n-        setOptions(p);\n+        setOptions(op);\n@@ -98,2 +139,6 @@\n-    protected void updateText() {\n-        String text = textSelector.getSelectedText();\n+    private void updateText() {\n+        currentText = textSelector.getSelectedText();\n+        updateControl();\n+    }\n+\n+    private void updateControl() {\n@@ -102,1 +147,1 @@\n-        control = new Text(text);\n+        control = new Text(currentText);\n@@ -104,1 +149,2 @@\n-        Group group = new Group(control);\n+\n+        Group group = new Group(control, caretPath);\n@@ -113,0 +159,11 @@\n+\n+        control.addEventHandler(MouseEvent.MOUSE_PRESSED, (ev) -> {\n+            PickResult p = ev.getPickResult();\n+            \/\/System.out.println(p);\n+        });\n+\n+        control.addEventHandler(MouseEvent.MOUSE_CLICKED, (ev) -> {\n+            if(ev.isShortcutDown()) {\n+                showCaretShape(new Point2D(ev.getX(), ev.getY()));\n+            }\n+        });\n@@ -115,1 +172,1 @@\n-    protected void updateWrap(boolean on) {\n+    private void updateWrap(boolean on) {\n@@ -123,0 +180,7 @@\n+\n+    private void showCaretShape(Point2D p) {\n+        HitInfo h = control.hitTest(p);\n+        System.out.println(\"hit=\" + h);\n+        PathElement[] pe = control.caretShape(h.getCharIndex(), h.isLeading());\n+        caretPath.getElements().setAll(pe);\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextPage.java","additions":84,"deletions":20,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import javafx.scene.control.CheckBox;\n@@ -34,0 +35,1 @@\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -46,1 +48,2 @@\n-    private final TitledPane titledPane;\n+    private final CheckBox snap;\n+    private final TitledPane control;\n@@ -49,1 +52,1 @@\n-        setId(\"TitledPane\");\n+        FX.name(this, \"TitledPane\");\n@@ -56,0 +59,1 @@\n+        textSelector.removeChoice(\"Writing Systems\");\n@@ -67,1 +71,6 @@\n-        titledPane = new TitledPane();\n+        snap = new CheckBox(\"snap\");\n+        FX.name(snap, \"snap\");\n+\n+        control = new TitledPane();\n+\n+        snap.selectedProperty().bindBidirectional(control.snapToPixelProperty());\n@@ -74,0 +83,1 @@\n+        op.option(snap);\n@@ -75,1 +85,1 @@\n-        setContent(titledPane);\n+        setContent(control);\n@@ -85,2 +95,2 @@\n-        titledPane.setText(textSelector.getSelectedText());\n-        titledPane.setContent(n);\n+        control.setText(textSelector.getSelectedText());\n+        control.setContent(n);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TitledPanePage.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.function.Consumer;\n@@ -40,0 +41,2 @@\n+import javafx.scene.control.cell.TextFieldTreeTableCell;\n+import javafx.scene.control.skin.TreeTableViewSkin;\n@@ -46,0 +49,3 @@\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.ItemSelector;\n@@ -53,2 +59,3 @@\n-public class TreeTableViewPage extends TestPaneBase {\n-    enum Demo {\n+public class TreeTableViewPage extends TestPaneBase implements HasSkinnable {\n+    enum Data {\n+        \/\/CELL_TYPES(\"various cell types\"), \/\/ FIX\n@@ -72,1 +79,2 @@\n-        MILLION(\"million rows\"),\n+        THOUSAND(\"1,000 rows\"),\n+        MILLION(\"10,000,000 rows\"),\n@@ -77,1 +85,1 @@\n-        Demo(String text) { this.text = text; }\n+        Data(String text) { this.text = text; }\n@@ -112,1 +120,5 @@\n-        COL_WITH_GRAPHIC\n+        COL_WITH_GRAPHIC,\n+\/\/        COL_CHECKBOX,\n+\/\/        COL_CHOICE_BOX,\n+\/\/        COL_COMBO_BOX,\n+\/\/        COL_TEXT_FIELD,\n@@ -115,7 +127,17 @@\n-    protected final ComboBox<Demo> demoSelector;\n-    protected final ComboBox<ResizePolicy> policySelector;\n-    protected final ComboBox<Selection> selectionSelector;\n-    protected final CheckBox nullFocusModel;\n-    protected final CheckBox addGraphics;\n-    protected final CheckBox addSubNodes;\n-    protected TreeTableView<String> tree;\n+    private enum Cells {\n+        DEFAULT,\n+        EDITABLE_TEXT_FIELD,\n+    }\n+\n+    private final ComboBox<Data> dataSelector;\n+    private final ComboBox<ResizePolicy> policySelector;\n+    private final ComboBox<Selection> selectionSelector;\n+    private final CheckBox nullFocusModel;\n+    private final CheckBox addGraphics;\n+    private final CheckBox addSubNodes;\n+    private final ItemSelector<Double> fixedSize;\n+    private final CheckBox menuButtonVisible;\n+    private final CheckBox editable;\n+    private final ComboBox<Cells> cellFactorySelector;\n+    private TreeTableView<String> control;\n+    private Callback<TreeTableColumn<String, String>, TreeTableCell<String, String>> defaultCellFactory;\n@@ -124,1 +146,1 @@\n-        setId(\"TreeTableViewPage\");\n+        FX.name(this, \"TreeTableViewPage\");\n@@ -127,5 +149,5 @@\n-        demoSelector = new ComboBox<>();\n-        demoSelector.setId(\"demoSelector\");\n-        demoSelector.getItems().addAll(Demo.values());\n-        demoSelector.setEditable(false);\n-        demoSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+        dataSelector = new ComboBox<>();\n+        FX.name(dataSelector, \"dataSelector\");\n+        dataSelector.getItems().addAll(Data.values());\n+        dataSelector.setEditable(false);\n+        onChange(dataSelector, false, () -> {\n@@ -136,1 +158,1 @@\n-        policySelector.setId(\"policySelector\");\n+        FX.name(policySelector, \"policySelector\");\n@@ -139,1 +161,1 @@\n-        policySelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+        onChange(policySelector, false, () -> {\n@@ -144,1 +166,1 @@\n-        selectionSelector.setId(\"selectionSelector\");\n+        FX.name(selectionSelector, \"selectionSelector\");\n@@ -147,1 +169,1 @@\n-        selectionSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+        onChange(selectionSelector, false, () -> {\n@@ -152,2 +174,2 @@\n-        nullFocusModel.setId(\"nullFocusModel\");\n-        nullFocusModel.selectedProperty().addListener((s, p, c) -> {\n+        FX.name(nullFocusModel, \"nullFocusModel\");\n+        onChange(nullFocusModel, false, () -> {\n@@ -159,1 +181,1 @@\n-        addGraphics.selectedProperty().addListener((s, p, c) -> {\n+        onChange(addGraphics, false, () -> {\n@@ -165,1 +187,1 @@\n-        addSubNodes.selectedProperty().addListener((s, p, c) -> {\n+        onChange(addSubNodes, false, () -> {\n@@ -171,2 +193,35 @@\n-            tree.setRoot(new TreeItem(null));\n-            tree.setShowRoot(false);\n+            control.setRoot(new TreeItem(null));\n+            control.setShowRoot(false);\n+        });\n+\n+        Button refresh = new Button(\"Refresh\");\n+        refresh.setOnAction((ev) -> {\n+            control.refresh();\n+        });\n+\n+        fixedSize = new ItemSelector<Double>(\n+            \"fixedSize\",\n+            (x) -> {\n+                control.setFixedCellSize(x);\n+            },\n+            \"<none>\", 0.0,\n+            \"18\", 18.0,\n+            \"24\", 24.0,\n+            \"66\", 66.0\n+        );\n+\n+        menuButtonVisible = new CheckBox(\"menu button visible\");\n+        FX.name(menuButtonVisible, \"menuButton\");\n+\n+        editable = new CheckBox(\"editable\");\n+        editable.setOnAction((ev) -> {\n+            updateEditable();\n+        });\n+        FX.name(editable, \"editable\");\n+\n+        cellFactorySelector = new ComboBox<>();\n+        FX.name(cellFactorySelector, \"cellSelector\");\n+        cellFactorySelector.getItems().addAll(Cells.values());\n+        cellFactorySelector.setEditable(false);\n+        cellFactorySelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updatePane();\n@@ -177,14 +232,21 @@\n-        OptionPane p = new OptionPane();\n-        p.label(\"Data:\");\n-        p.option(demoSelector);\n-        p.option(clearButton);\n-        p.label(\"Column Resize Policy:\");\n-        p.option(policySelector);\n-        p.label(\"Selection Model:\");\n-        p.option(selectionSelector);\n-        p.option(nullFocusModel);\n-        p.option(addGraphics);\n-        p.option(addSubNodes);\n-        setOptions(p);\n-\n-        demoSelector.getSelectionModel().selectFirst();\n+        OptionPane op = new OptionPane();\n+        op.label(\"Data:\");\n+        op.option(dataSelector);\n+        op.option(clearButton);\n+        op.option(editable);\n+        op.label(\"Column Resize Policy:\");\n+        op.option(policySelector);\n+        op.label(\"Selection Model:\");\n+        op.option(selectionSelector);\n+        op.option(nullFocusModel);\n+        op.label(\"Fixed Cell Size:\");\n+        op.option(fixedSize.node());\n+        op.label(\"Cell Factory:\");\n+        op.option(cellFactorySelector);\n+        op.option(refresh);\n+        op.option(menuButtonVisible);\n+        op.option(addGraphics);\n+        op.option(addSubNodes);\n+        setOptions(op);\n+\n+        dataSelector.getSelectionModel().selectFirst();\n@@ -251,1 +313,1 @@\n-    protected Object[] createSpec(Demo d) {\n+    protected Object[] createSpec(Data d) {\n@@ -262,0 +324,11 @@\n+\/\/ FIX\n+\/\/        case CELL_TYPES:\n+\/\/            return new Object[] {\n+\/\/                Cmd.ROWS, 300,\n+\/\/                Cmd.COL,\n+\/\/                Cmd.COL_CHECKBOX,\n+\/\/                Cmd.COL_CHOICE_BOX,\n+\/\/                Cmd.COL_COMBO_BOX,\n+\/\/                Cmd.COL_TEXT_FIELD,\n+\/\/                Cmd.COL_WITH_GRAPHIC\n+\/\/            };\n@@ -453,1 +526,11 @@\n-                Cmd.ROWS, 1_000_000,\n+                Cmd.ROWS, 10_000_000,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL\n+            };\n+        case THOUSAND:\n+            return new Object[] {\n+                Cmd.ROWS, 1_000,\n+                Cmd.COL,\n+                Cmd.COL,\n@@ -463,1 +546,1 @@\n-        Demo d = demoSelector.getSelectionModel().getSelectedItem();\n+        Data d = dataSelector.getSelectionModel().getSelectedItem();\n@@ -482,1 +565,1 @@\n-    protected Pane createPane(Demo demo, ResizePolicy policy, Object[] spec) {\n+    protected Pane createPane(Data demo, ResizePolicy policy, Object[] spec) {\n@@ -513,3 +596,3 @@\n-        tree = new TreeTableView<>(new TreeItem<>(null));\n-        tree.getSelectionModel().setCellSelectionEnabled(cellSelection);\n-        tree.getSelectionModel().setSelectionMode(selectionMode);\n+        control = new TreeTableView<>(new TreeItem<>(null));\n+        control.getSelectionModel().setCellSelectionEnabled(cellSelection);\n+        control.getSelectionModel().setSelectionMode(selectionMode);\n@@ -517,1 +600,1 @@\n-            tree.setSelectionModel(null);\n+            control.setSelectionModel(null);\n@@ -520,1 +603,1 @@\n-            tree.setFocusModel(null);\n+            control.setFocusModel(null);\n@@ -522,0 +605,4 @@\n+        control.setFixedCellSize(fixedSize.getSelectedItem());\n+\n+        control.setTableMenuButtonVisible(menuButtonVisible.isSelected());\n+        menuButtonVisible.selectedProperty().bindBidirectional(control.tableMenuButtonVisibleProperty());\n@@ -524,1 +611,1 @@\n-        tree.setColumnResizePolicy(p);\n+        control.setColumnResizePolicy(p);\n@@ -534,4 +621,1 @@\n-                    {\n-                        TreeTableColumn<String,String> c = new TreeTableColumn<>();\n-                        tree.getColumns().add(c);\n-                        c.setText(\"C\" + tree.getColumns().size());\n+                    lastColumn = makeColumn((c) -> {\n@@ -539,2 +623,1 @@\n-                        lastColumn = c;\n-                    }\n+                    });\n@@ -543,4 +626,1 @@\n-                    {\n-                        TreeTableColumn<String,String> c = new TreeTableColumn<>();\n-                        tree.getColumns().add(c);\n-                        c.setText(\"C\" + tree.getColumns().size());\n+                    lastColumn = makeColumn((c) -> {\n@@ -553,2 +633,7 @@\n-                                    Text t = new Text(\"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n2\\n3\\n\");\n-                                    t.wrappingWidthProperty().bind(widthProperty());\n+                                    if (empty) {\n+                                        setGraphic(null);\n+                                    } else {\n+                                        Text t = new Text(\"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n2\\n3\\n\");\n+                                        t.wrappingWidthProperty().bind(widthProperty());\n+                                        setGraphic(t);\n+                                    }\n@@ -556,1 +641,0 @@\n-                                    setGraphic(t);\n@@ -560,2 +644,1 @@\n-                        lastColumn = c;\n-                    }\n+                    });\n@@ -563,0 +646,15 @@\n+\/\/                case COL_CHECKBOX:\n+\/\/                    lastColumn = makeColumn((c) -> { });\n+\/\/                    break;\n+\/\/                case COL_CHOICE_BOX:\n+\/\/                    lastColumn = makeColumn((c) -> {\n+\/\/                    });\n+\/\/                    break;\n+\/\/                case COL_COMBO_BOX:\n+\/\/                    lastColumn = makeColumn((c) -> {\n+\/\/                    });\n+\/\/                    break;\n+\/\/                case COL_TEXT_FIELD:\n+\/\/                    lastColumn = makeColumn((c) -> {\n+\/\/                    });\n+\/\/                    break;\n@@ -597,1 +695,1 @@\n-                            tree.getRoot().getChildren().add(treeItem);\n+                            control.getRoot().getChildren().add(treeItem);\n@@ -604,1 +702,1 @@\n-                    combineColumns(tree, ix, ct, id++);\n+                    combineColumns(control, ix, ct, id++);\n@@ -615,1 +713,1 @@\n-        bp.setCenter(tree);\n+        bp.setCenter(control);\n@@ -619,0 +717,37 @@\n+    protected TreeTableColumn<String, String> makeColumn(Consumer<TreeTableColumn<String, String>> updater) {\n+        TreeTableColumn<String, String> c = new TreeTableColumn<>();\n+        control.getColumns().add(c);\n+        c.setText(\"C\" + control.getColumns().size());\n+        updater.accept(c);\n+\n+        if (defaultCellFactory == null) {\n+            defaultCellFactory = c.getCellFactory();\n+        }\n+\n+        Cells t = cellFactorySelector.getSelectionModel().getSelectedItem();\n+        Callback<TreeTableColumn<String, String>, TreeTableCell<String, String>> f = getCellFactory(t);\n+        c.setCellFactory(f);\n+\n+        c.setOnEditCommit((ev) -> {\n+            if (\"update\".equals(ev.getNewValue())) {\n+                var item = ev.getRowValue();\n+                item.setValue(\"UPDATED!\");\n+                System.out.println(\"committing the value `UPDATED!`\");\n+            } else {\n+                System.out.println(\"discarding the new value: \" + ev.getNewValue());\n+            }\n+        });\n+\n+        return c;\n+    }\n+\n+    private Callback<TreeTableColumn<String, String>, TreeTableCell<String, String>> getCellFactory(Cells t) {\n+        if (t != null) {\n+            switch (t) {\n+            case EDITABLE_TEXT_FIELD:\n+                return TextFieldTreeTableCell.forTreeTableColumn();\n+            }\n+        }\n+        return defaultCellFactory;\n+    }\n+\n@@ -623,0 +758,18 @@\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new TreeTableViewSkin<>(control));\n+    }\n+\n+    protected void updateEditable() {\n+        boolean on = editable.isSelected();\n+        control.setEditable(on);\n+        if (on) {\n+            cellFactorySelector.getSelectionModel().select(Cells.EDITABLE_TEXT_FIELD);\n+        }\n+    }\n+\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TreeTableViewPage.java","additions":223,"deletions":70,"binary":false,"changes":293,"status":"modified"},{"patch":"@@ -27,3 +27,0 @@\n-import com.oracle.tools.fx.monkey.util.TestPaneBase;\n-import javafx.geometry.Pos;\n-import javafx.scene.Parent;\n@@ -33,0 +30,3 @@\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.control.TreeCell;\n@@ -35,1 +35,6 @@\n-import javafx.scene.layout.HBox;\n+import javafx.scene.control.cell.CheckBoxTreeCell;\n+import javafx.scene.control.cell.TextFieldTreeCell;\n+import javafx.util.Callback;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n@@ -38,3 +43,1 @@\n- * Test code from CheckBoxTreeEditor, see https:\/\/bugs.openjdk.org\/browse\/JDK-8209017\n- *\n- * FIX don't see checkboxes for some reason!\n+ * TreeView Page\n@@ -43,1 +46,8 @@\n-    private TreeView<String> tree;\n+    private enum Cells {\n+        DEFAULT,\n+        EDITABLE_TEXT_FIELD,\n+    }\n+\n+    private final TreeView<String> control;\n+    private final CheckBox editable;\n+    private final ComboBox<Cells> cellFactorySelector;\n@@ -45,0 +55,1 @@\n+    private Callback<TreeView<String>, TreeCell<String>> defaultCellFactory;\n@@ -47,1 +58,18 @@\n-        setId(\"TreeViewPage\");\n+        FX.name(this, \"TreeViewPage\");\n+\n+        control = new TreeView<>(new CheckBoxTreeItem<>(\"root\"));\n+        control.getRoot().setExpanded(true);\n+        control.setCellFactory(CheckBoxTreeCell.<String>forTreeView());\n+        control.setTooltip(new Tooltip(\"edit to 'update' to commit the change\"));\n+        addChild(true, true);\n+        setContent(control);\n+        defaultCellFactory = control.getCellFactory();\n+        control.setOnEditCommit((ev) -> {\n+            if (\"update\".equals(ev.getNewValue())) {\n+                TreeItem<String> item = ev.getTreeItem();\n+                item.setValue(\"UPDATED!\");\n+                System.out.println(\"committing the value `UPDATED!`\");\n+            } else {\n+                System.out.println(\"discarding the new value: \" + ev.getNewValue());\n+            }\n+        });\n@@ -50,1 +78,1 @@\n-        indeterminate.setId(\"indeterminate\");\n+        FX.name(indeterminate, \"indeterminate\");\n@@ -53,1 +81,1 @@\n-        selected.setId(\"selected\");\n+        FX.name(selected, \"selected\");\n@@ -55,2 +83,2 @@\n-        Button add = new Button(\"Add\");\n-        add.setOnAction((ev) -> {\n+        Button addButton = new Button(\"Add\");\n+        addButton.setOnAction((ev) -> {\n@@ -60,2 +88,2 @@\n-        Button remove = new Button(\"Remove\");\n-        remove.setOnAction((ev) -> {\n+        Button removeButton = new Button(\"Remove\");\n+        removeButton.setOnAction((ev) -> {\n@@ -65,6 +93,13 @@\n-        toolbar().addAll(\n-            add,\n-            remove,\n-            indeterminate,\n-            selected\n-        );\n+        editable = new CheckBox(\"editable\");\n+        editable.setOnAction((ev) -> {\n+            updateEditable();\n+        });\n+        FX.name(editable, \"editable\");\n+\n+        cellFactorySelector = new ComboBox<>();\n+        FX.name(cellFactorySelector, \"cellSelector\");\n+        cellFactorySelector.getItems().addAll(Cells.values());\n+        cellFactorySelector.setEditable(false);\n+        cellFactorySelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updateCellFactory();\n+        });\n@@ -72,1 +107,12 @@\n-        updatePane();\n+        OptionPane op = new OptionPane();\n+        op.option(addButton);\n+        op.option(indeterminate);\n+        op.option(selected);\n+        op.option(removeButton);\n+        op.option(editable);\n+        op.label(\"Cell Factory:\");\n+        op.option(cellFactorySelector);\n+        setOptions(op);\n+\n+        control.getSelectionModel().select(control.getRoot());\n+        FX.selectFirst(cellFactorySelector);\n@@ -75,7 +121,7 @@\n-    protected void updatePane() {\n-        tree = new TreeView<>(new CheckBoxTreeItem<>(\"root\"));\n-\n-        Button button = new Button(\"0\");\n-        tree.getRoot().setGraphic(button);\n-        tree.getRoot().setExpanded(true);\n-        tree.getSelectionModel().select(tree.getRoot());\n+    protected void updateEditable() {\n+        boolean on = editable.isSelected();\n+        control.setEditable(on);\n+        if (on) {\n+            cellFactorySelector.getSelectionModel().select(Cells.EDITABLE_TEXT_FIELD);\n+        }\n+    }\n@@ -83,2 +129,5 @@\n-        \/\/ add children for initial setup as needed\n-        addChild(true, true);\n+    protected void updateCellFactory() {\n+        Cells t = cellFactorySelector.getSelectionModel().getSelectedItem();\n+        var f = getCellFactory(t);\n+        control.setCellFactory(f);\n+    }\n@@ -86,1 +135,8 @@\n-        setContent(tree);\n+    private Callback<TreeView<String>, TreeCell<String>> getCellFactory(Cells t) {\n+        if (t != null) {\n+            switch (t) {\n+            case EDITABLE_TEXT_FIELD:\n+                return TextFieldTreeCell.forTreeView();\n+            }\n+        }\n+        return defaultCellFactory;\n@@ -91,2 +147,0 @@\n-        Button button = new Button(\"\" + childNum);\n-        item.setGraphic(button);\n@@ -97,2 +151,2 @@\n-        if (tree.getSelectionModel().getSelectedItem() != null) {\n-            tree.getSelectionModel().getSelectedItem().getChildren().add(item);\n+        if (control.getSelectionModel().getSelectedItem() != null) {\n+            control.getSelectionModel().getSelectedItem().getChildren().add(item);\n@@ -103,1 +157,1 @@\n-        TreeItem<String> sel = tree.getSelectionModel().getSelectedItem();\n+        TreeItem<String> sel = control.getSelectionModel().getSelectedItem();\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TreeViewPage.java","additions":91,"deletions":37,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.scene.Node;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.SeparatorMenuItem;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.VBox;\n+\n+\/**\n+ * VBox Page.\n+ *\/\n+public class VBoxPage extends BoxPageBase {\n+    public VBoxPage() {\n+        super(\"VBoxPage\");\n+    }\n+\n+    protected void setGrow(Node n, Priority p) {\n+        VBox.setVgrow(n, p);\n+    }\n+\n+    @Override\n+    protected Pane createPane() {\n+        return new VBox();\n+    }\n+\n+    @Override\n+    protected void setMin(Region r, double v) {\n+        r.setMinHeight(v);\n+    }\n+\n+    @Override\n+    protected void setPref(Region r, double v) {\n+        r.setPrefHeight(v);\n+    }\n+\n+    @Override\n+    protected void setMax(Region r, double v) {\n+        r.setMaxHeight(v);\n+    }\n+\n+    @Override\n+    protected Region createRegion() {\n+        Region r = new Region();\n+        r.setPrefHeight(30);\n+        r.setMinHeight(10);\n+        ContextMenu m = new ContextMenu();\n+        r.setOnContextMenuRequested((ev) -> {\n+            m.getItems().setAll(\n+                new MenuItem(\"height=\" + r.getHeight()),\n+                new SeparatorMenuItem(),\n+                new MenuItem(\"min height=\" + r.getMinHeight()),\n+                new MenuItem(\"pref height=\" + r.getPrefHeight()),\n+                new MenuItem(\"max height=\" + r.getMaxHeight()));\n+            m.show(r, ev.getScreenX(), ev.getScreenY());\n+        });\n+        return r;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/VBoxPage.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.web.WebEngine;\n+import javafx.scene.web.WebView;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import com.oracle.tools.fx.monkey.util.Utils;\n+\n+\/**\n+ * WebView Test Page.\n+ *\/\n+public class WebViewPage extends TestPaneBase {\n+    private final TextField addressField;\n+    private final WebView view;\n+    private final WebEngine engine;\n+\n+    public WebViewPage() {\n+        addressField = new TextField();\n+        addressField.setOnAction((ev) -> {\n+            handleUrlEntered();\n+        });\n+\n+        view = new WebView();\n+\n+        engine = view.getEngine();\n+        engine.setOnError((ev) -> {\n+            System.err.println(ev);\n+        });\n+        engine.setOnStatusChanged((ev) -> {\n+            System.err.println(ev);\n+        });\n+        engine.getLoadWorker().stateProperty().addListener((s, p, c) -> {\n+            System.err.println(c);\n+        });\n+\n+        OptionPane op = new OptionPane();\n+        op.label(\"Data:\");\n+        \/\/ TODO\n+        \/\/op.option(modelSelector);\n+        setOptions(op);\n+\n+        BorderPane bp = new BorderPane();\n+        bp.setTop(addressField);\n+        bp.setCenter(view);\n+        setContent(bp);\n+    }\n+\n+    protected void handleUrlEntered() {\n+        String url = addressField.getText();\n+        if (Utils.isBlank(url)) {\n+            return;\n+        }\n+\n+        engine.load(url);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/WebViewPage.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -28,2 +28,1 @@\n-import com.oracle.tools.fx.monkey.util.OptionPane;\n-import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import javafx.collections.ObservableList;\n@@ -44,0 +43,3 @@\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n@@ -64,1 +66,1 @@\n-        setId(\"XYChartPage\");\n+        FX.name(this, \"XYChartPage\");\n@@ -67,1 +69,1 @@\n-        modeSelector.setId(\"modeSelector\");\n+        FX.name(modeSelector, \"modeSelector\");\n@@ -83,0 +85,9 @@\n+        Button addPointButton = new Button(\"Add Point\");\n+        addPointButton.setOnAction((ev) -> addPoint());\n+\n+        Button removePointButton = new Button(\"Remove Point\");\n+        removePointButton.setOnAction((ev) -> removePoint());\n+\n+        Button clearPointsButton = new Button(\"Clear Points\");\n+        clearPointsButton.setOnAction((ev) -> clearPoints());\n+\n@@ -89,0 +100,3 @@\n+        p.option(addPointButton);\n+        p.option(removePointButton);\n+        p.option(clearPointsButton);\n@@ -94,1 +108,1 @@\n-    protected void updateChart() {\n+    private void updateChart() {\n@@ -105,1 +119,1 @@\n-    protected void addSeries() {\n+    private void addSeries() {\n@@ -120,1 +134,1 @@\n-    protected void removeSeries() {\n+    private void removeSeries() {\n@@ -128,1 +142,1 @@\n-    protected void addRemoveSeries() {\n+    private void addRemoveSeries() {\n@@ -145,37 +159,44 @@\n-        case AREA: {\n-            AreaChart<Number, Number> chart = new AreaChart<>(xAxis, yAxis);\n-            chart.setTitle(\"Area Chart\");\n-            return chart;\n-        }\n-        case BAR: {\n-            CategoryAxis x = new CategoryAxis();\n-            BarChart<String, Number> chart = new BarChart<>(x, yAxis);\n-            chart.setTitle(\"Bar Chart\");\n-            return chart;\n-        }\n-        case BUBBLE: {\n-            BubbleChart<Number, Number> chart = new BubbleChart<>(xAxis, yAxis);\n-            chart.setTitle(\"Bubble Chart\");\n-            return chart;\n-        }\n-        case LINE: {\n-            LineChart<Number, Number> chart = new LineChart<>(xAxis, yAxis);\n-            chart.setTitle(\"Line Chart\");\n-            return chart;\n-        }\n-        case SCATTER: {\n-            ScatterChart<Number, Number> chart = new ScatterChart<>(xAxis, yAxis);\n-            chart.setTitle(\"Scatter Chart\");\n-            return chart;\n-        }\n-        case STACKED_AREA: {\n-            StackedAreaChart<Number, Number> chart = new StackedAreaChart<>(xAxis, yAxis);\n-            chart.setTitle(\"Stacked Area Chart\");\n-            return chart;\n-        }\n-        case STACKED_BAR: {\n-            CategoryAxis x = new CategoryAxis();\n-            StackedBarChart<String, Number> chart = new StackedBarChart<>(x, yAxis);\n-            chart.setTitle(\"Stacked Bar Chart\");\n-            return chart;\n-        }\n+        case AREA:\n+            {\n+                AreaChart<Number, Number> chart = new AreaChart<>(xAxis, yAxis);\n+                chart.setTitle(\"Area Chart\");\n+                return chart;\n+            }\n+        case BAR:\n+            {\n+                CategoryAxis x = new CategoryAxis();\n+                BarChart<String, Number> chart = new BarChart<>(x, yAxis);\n+                chart.setTitle(\"Bar Chart\");\n+                return chart;\n+            }\n+        case BUBBLE:\n+            {\n+                BubbleChart<Number, Number> chart = new BubbleChart<>(xAxis, yAxis);\n+                chart.setTitle(\"Bubble Chart\");\n+                return chart;\n+            }\n+        case LINE:\n+            {\n+                LineChart<Number, Number> chart = new LineChart<>(xAxis, yAxis);\n+                chart.setTitle(\"Line Chart\");\n+                return chart;\n+            }\n+        case SCATTER:\n+            {\n+                ScatterChart<Number, Number> chart = new ScatterChart<>(xAxis, yAxis);\n+                chart.setTitle(\"Scatter Chart\");\n+                return chart;\n+            }\n+        case STACKED_AREA:\n+            {\n+                StackedAreaChart<Number, Number> chart = new StackedAreaChart<>(xAxis, yAxis);\n+                chart.setTitle(\"Stacked Area Chart\");\n+                return chart;\n+            }\n+        case STACKED_BAR:\n+            {\n+                CategoryAxis x = new CategoryAxis();\n+                StackedBarChart<String, Number> chart = new StackedBarChart<>(x, yAxis);\n+                chart.setTitle(\"Stacked Bar Chart\");\n+                return chart;\n+            }\n@@ -187,1 +208,1 @@\n-    public Series<Number, Number> createNumberSeries() {\n+    private Series<Number, Number> createNumberSeries() {\n@@ -199,1 +220,1 @@\n-    public Series<String, Number> createBarSeries() {\n+    private Series<String, Number> createBarSeries() {\n@@ -210,0 +231,50 @@\n+\n+    private void addPoint() {\n+        var list = chart.getData();\n+        if (list.size() == 0) {\n+            chart.getData().add(new XYChart.Series());\n+        }\n+        XYChart.Series s = list.get(0);\n+        int sz = s.getData().size();\n+        boolean atIndexZero = rnd.nextBoolean();\n+\n+        if (chart instanceof BarChart b) {\n+            int v = rnd.nextInt(50);\n+            add(s.getData(), atIndexZero, new XYChart.Data(\"c\" + sz, v));\n+        } else if (chart instanceof StackedBarChart b) {\n+            int v = rnd.nextInt(50);\n+            add(s.getData(), atIndexZero, new XYChart.Data(\"c\" + sz, v));\n+        } else {\n+            int i = rnd.nextInt(100);\n+            int v = rnd.nextInt(50);\n+            add(s.getData(), atIndexZero, new XYChart.Data(i, v));\n+        }\n+    }\n+\n+    private void add(ObservableList list, boolean atIndexZero, XYChart.Data d) {\n+        if (atIndexZero) {\n+            list.add(0, d);\n+        } else {\n+            list.add(d);\n+        }\n+    }\n+\n+    private void removePoint() {\n+        var list = chart.getData();\n+        if (list.size() > 0) {\n+            XYChart.Series s = list.get(0);\n+            int sz = s.getData().size();\n+            if (sz > 0) {\n+                int ix = rnd.nextBoolean() ? 0 : sz - 1;\n+                s.getData().remove(ix);\n+            }\n+        }\n+    }\n+\n+    private void clearPoints() {\n+        var list = chart.getData();\n+        if (list.size() > 0) {\n+            XYChart.Series s = list.get(0);\n+            s.getData().clear();\n+        }\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/XYChartPage.java","additions":118,"deletions":47,"binary":false,"changes":165,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+    public static final boolean LOG = Boolean.getBoolean(\"FxSettings.LOG\");\n@@ -142,1 +143,1 @@\n-            FxSettingsSchema.storeNode(m, p);\n+            FxSettingsSchema.storeNode(p);\n@@ -227,4 +228,1 @@\n-        WindowMonitor m = WindowMonitor.getFor(n);\n-        if (m != null) {\n-            FxSettingsSchema.storeNode(m, n);\n-        }\n+        FxSettingsSchema.storeNode(n);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/settings\/FxSettings.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -110,0 +110,3 @@\n+        if (FxSettings.LOG) {\n+            System.out.println(\"FxSettingsFileProvider.set key=\" + key + \" value=\" + value);\n+        }\n@@ -120,1 +123,4 @@\n-    public void set(String key, SStream s) {\n+    public void set(String key, SStream stream) {\n+        if (FxSettings.LOG) {\n+            System.out.println(\"FxSettingsFileProvider.set key=\" + key + \" stream=\" + stream);\n+        }\n@@ -122,1 +128,1 @@\n-            if (s == null) {\n+            if (stream == null) {\n@@ -125,1 +131,1 @@\n-                data.put(key, s.toArray());\n+                data.put(key, stream.toArray());\n@@ -143,0 +149,4 @@\n+\n+        if (FxSettings.LOG) {\n+            System.out.println(\"FxSettingsFileProvider.get key=\" + key + \" value=\" + s);\n+        }\n@@ -160,0 +170,4 @@\n+\n+        if (FxSettings.LOG) {\n+            System.out.println(\"FxSettingsFileProvider.get key=\" + key + \" stream=\" + s);\n+        }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/settings\/FxSettingsFileProvider.java","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.awt.Shape;\n@@ -33,0 +32,1 @@\n+import javafx.scene.Group;\n@@ -38,0 +38,1 @@\n+import javafx.scene.control.DialogPane;\n@@ -40,0 +41,1 @@\n+import javafx.scene.control.ScrollPane;\n@@ -42,0 +44,11 @@\n+import javafx.scene.layout.AnchorPane;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.FlowPane;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.TilePane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.shape.Shape;\n@@ -51,1 +64,0 @@\n-\n@@ -56,0 +68,1 @@\n+    private static final Object NAME_PROP = new Object();\n@@ -124,2 +137,6 @@\n-    \/\/ TODO add type-specific suffix\n-    private static String getName(WindowMonitor m, Node n) {\n+    private static String computeName(Node n) {\n+        WindowMonitor m = WindowMonitor.getFor(n);\n+        if (m == null) {\n+            return null;\n+        }\n+\n@@ -130,0 +147,1 @@\n+\n@@ -145,1 +163,0 @@\n-        \/\/ FIX parent is null, so it's not yet connected (probably because of the skin)\n@@ -151,4 +168,4 @@\n-        sb.append('.');\n-        String name = n.getId();\n-        if ((name == null) || (name.trim().length() == 0)) {\n-            name = n.getClass().getSimpleName();\n+\n+        String name = getNodeName(n);\n+        if (name == null) {\n+            return true;\n@@ -156,0 +173,2 @@\n+\n+        sb.append('.');\n@@ -160,2 +179,39 @@\n-    public static void storeNode(WindowMonitor m, Node n) {\n-        \/\/System.out.println(\"storeNode \" + n); \/\/ FIX\n+    private static String getNodeName(Node n) {\n+        if (n != null) {\n+            String name = getName(n);\n+            if (name != null) {\n+                return name;\n+            }\n+\n+            if (n instanceof Pane) {\n+                if (n instanceof AnchorPane) {\n+                    return \"AnchorPane\";\n+                } else if (n instanceof BorderPane) {\n+                    return \"BorderPane\";\n+                } else if (n instanceof DialogPane) {\n+                    return \"DialogPane\";\n+                } else if (n instanceof FlowPane) {\n+                    return \"FlowPane\";\n+                } else if (n instanceof GridPane) {\n+                    return \"GridPane\";\n+                } else if (n instanceof HBox) {\n+                    return \"HBox\";\n+                } else if (n instanceof StackPane) {\n+                    return \"StackPane\";\n+                } else if (n instanceof TilePane) {\n+                    return \"TilePane\";\n+                } else if (n instanceof VBox) {\n+                    return \"VBox\";\n+                } else {\n+                    return \"Pane\";\n+                }\n+            } else if (n instanceof Group) {\n+                return \"Group\";\n+            } else if (n instanceof Region) {\n+                return \"Region\";\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public static void storeNode(Node n) {\n@@ -163,1 +219,2 @@\n-            storeListView(m, lv);\n+            storeListView(lv);\n+            return;\n@@ -165,1 +222,2 @@\n-            storeComboBox(m, cb);\n+            storeComboBox(cb);\n+            return;\n@@ -167,7 +225,8 @@\n-            storeCheckBox(m, cb);\n-        }\n-\n-        if (n instanceof SplitPane sp) {\n-            for (Node ch: sp.getItems()) {\n-                storeNode(m, ch);\n-            }\n+            storeCheckBox(cb);\n+            return;\n+        } else if (n instanceof SplitPane sp) {\n+            storeSplitPane(sp);\n+            return;\n+        } else if (n instanceof ScrollPane sp) {\n+            storeNode(sp.getContent());\n+            return;\n@@ -178,1 +237,1 @@\n-                storeNode(m, ch);\n+                storeNode(ch);\n@@ -188,3 +247,0 @@\n-        WindowMonitor m = WindowMonitor.getFor(n);\n-\n-        \/\/System.out.println(\"restoreNode \" + n); \/\/ FIX\n@@ -192,1 +248,1 @@\n-            restoreListView(m, lv);\n+            restoreListView(lv);\n@@ -194,1 +250,1 @@\n-            restoreComboBox(m, cb);\n+            restoreComboBox(cb);\n@@ -196,1 +252,5 @@\n-            restoreCheckBox(m, cb);\n+            restoreCheckBox(cb);\n+        } else if (n instanceof SplitPane sp) {\n+            restoreSplitPane(sp);\n+        } else if (n instanceof ScrollPane sp) {\n+            restoreNode(sp.getContent());\n@@ -199,2 +259,2 @@\n-        if (n instanceof SplitPane sp) {\n-            for (Node ch: sp.getItems()) {\n+        if (n instanceof Parent p) {\n+            for (Node ch: p.getChildrenUnmodifiable()) {\n@@ -204,0 +264,1 @@\n+    }\n@@ -205,3 +266,47 @@\n-        if (n instanceof Parent p) {\n-            for (Node ch: p.getChildrenUnmodifiable()) {\n-                restoreNode(ch);\n+    private static void storeSplitPane(SplitPane sp) {\n+        String name = computeName(sp);\n+        if (name == null) {\n+            return;\n+        }\n+\n+        double[] div = sp.getDividerPositions();\n+        SStream ss = SStream.writer();\n+        ss.add(div.length);\n+        for (int i = 0; i < div.length; i++) {\n+            ss.add(div[i]);\n+        }\n+        FxSettings.setStream(PREFIX + name, ss);\n+\n+        for (Node ch: sp.getItems()) {\n+            storeNode(ch);\n+        }\n+    }\n+\n+    private static void restoreSplitPane(SplitPane sp) {\n+        if (checkNoScene(sp)) {\n+            return;\n+        }\n+\n+        String name = computeName(sp);\n+        if (name == null) {\n+            return;\n+        }\n+\n+        for (Node ch: sp.getItems()) {\n+            restoreNode(ch);\n+        }\n+\n+        SStream ss = FxSettings.getStream(PREFIX + name);\n+        if (ss != null) {\n+            int sz = ss.nextInt(-1);\n+            if (sz > 0) {\n+                double[] divs = new double[sz];\n+                for (int i = 0; i < sz; i++) {\n+                    double v = ss.nextDouble(-1);\n+                    if (v < 0) {\n+                        return;\n+                    }\n+                    divs[i] = v;\n+                }\n+                \/\/ FIX getting smaller and smaller\n+                \/\/ sp.setDividerPositions(divs);\n@@ -212,1 +317,1 @@\n-    private static void storeComboBox(WindowMonitor m, ComboBox n) {\n+    private static void storeComboBox(ComboBox n) {\n@@ -222,1 +327,1 @@\n-        String name = getName(m, n);\n+        String name = computeName(n);\n@@ -231,1 +336,1 @@\n-    private static void restoreComboBox(WindowMonitor m, ComboBox n) {\n+    private static void restoreComboBox(ComboBox n) {\n@@ -240,1 +345,1 @@\n-        String name = getName(m, n);\n+        String name = computeName(n);\n@@ -255,9 +360,6 @@\n-    private static boolean checkNoScene(Node n) {\n-        if (n.getScene() == null) {\n-            class ChLi implements ChangeListener<Scene> {\n-                private final Node node;\n-\n-                public ChLi(Node n) {\n-                    this.node = n;\n-                }\n-\n+    private static boolean checkNoScene(Node node) {\n+        if (node == null) {\n+            return true;\n+        } else if (node.getScene() == null) {\n+            \/\/ delay restore until node becomes a part of the scene\n+            node.sceneProperty().addListener(new ChangeListener<Scene>() {\n@@ -269,3 +371,2 @@\n-                            n.sceneProperty().removeListener(this);\n-                            restoreNode(n);\n-                            FxSettings.restore(n);\n+                            node.sceneProperty().removeListener(this);\n+                            restoreNode(node);\n@@ -275,5 +376,1 @@\n-            }\n-            ;\n-\n-            n.sceneProperty().addListener(new ChLi(n));\n-\n+            });\n@@ -285,1 +382,1 @@\n-    private static void storeListView(WindowMonitor m, ListView n) {\n+    private static void storeListView(ListView n) {\n@@ -295,1 +392,1 @@\n-        String name = getName(m, n);\n+        String name = computeName(n);\n@@ -303,1 +400,1 @@\n-    private static void restoreListView(WindowMonitor m, ListView n) {\n+    private static void restoreListView(ListView n) {\n@@ -312,1 +409,1 @@\n-        String name = getName(m, n);\n+        String name = computeName(n);\n@@ -327,2 +424,2 @@\n-    private static void storeCheckBox(WindowMonitor m, CheckBox n) {\n-        String name = getName(m, n);\n+    private static void storeCheckBox(CheckBox n) {\n+        String name = computeName(n);\n@@ -337,1 +434,1 @@\n-    private static void restoreCheckBox(WindowMonitor m, CheckBox n) {\n+    private static void restoreCheckBox(CheckBox n) {\n@@ -342,1 +439,1 @@\n-        String name = getName(m, n);\n+        String name = computeName(n);\n@@ -354,0 +451,40 @@\n+\n+    \/** sets the name for the purposes of storing user preferences *\/\n+    public static void setName(Node n, String name) {\n+        n.getProperties().put(NAME_PROP, name);\n+    }\n+\n+    \/** sets the name for the purposes of storing user preferences *\/\n+    public static void setName(Window w, String name) {\n+        w.getProperties().put(NAME_PROP, name);\n+    }\n+\n+    \/**\n+     * Returns the name for the purposes of storing user preferences,\n+     * set previously by {@link #setName(Node, String)},\n+     * or null.\n+     *\/\n+    public static String getName(Node n) {\n+        if (n != null) {\n+            Object x = n.getProperties().get(NAME_PROP);\n+            if (x instanceof String s) {\n+                return s;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    \/**\n+     * Returns the name for the purposes of storing user preferences,\n+     * set previously by {@link #setName(Window, String)},\n+     * or null.\n+     *\/\n+    public static String getName(Window w) {\n+        if (w != null) {\n+            Object x = w.getProperties().get(NAME_PROP);\n+            if (x instanceof String s) {\n+                return s;\n+            }\n+        }\n+        return null;\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/settings\/FxSettingsSchema.java","additions":198,"deletions":61,"binary":false,"changes":259,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/settings\/ISettingsProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,0 +74,4 @@\n+    public void add(int x) {\n+        addValue(x);\n+    }\n+\n@@ -98,1 +102,1 @@\n-    public double nextDouble(double defaultValue) {\n+    public final double nextDouble(double defaultValue) {\n@@ -112,0 +116,14 @@\n+    public final int nextInt(int defaultValue) {\n+        Object v = nextValue();\n+        if (v instanceof String s) {\n+            try {\n+                return Integer.parseInt(s);\n+            } catch (NumberFormatException e) {\n+                \/\/ ignore\n+            }\n+        } else if (v instanceof Integer d) {\n+            return d;\n+        }\n+        return defaultValue;\n+    }\n+\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/settings\/SStream.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -170,15 +170,15 @@\n-        \/\/ TODO use name provided by setName\n-        String prefix = win.getClass().getSimpleName() + \".\";\n-\n-        HashSet<String> ids = new HashSet<>();\n-        for (Window w: Window.getWindows()) {\n-            if (w == win) {\n-                continue;\n-            }\n-            WindowMonitor m = monitors.get(w);\n-            if (m == null) {\n-                return null;\n-            }\n-            String id = m.getID();\n-            if (id.startsWith(prefix)) {\n-                ids.add(id);\n+        String prefix = FxSettingsSchema.getName(win);\n+        if (prefix != null) {\n+            HashSet<String> ids = new HashSet<>();\n+            for (Window w: Window.getWindows()) {\n+                if (w == win) {\n+                    continue;\n+                }\n+                WindowMonitor m = monitors.get(w);\n+                if (m == null) {\n+                    return null;\n+                }\n+                String id = m.getID();\n+                if (id.startsWith(prefix)) {\n+                    ids.add(id);\n+                }\n@@ -186,1 +186,0 @@\n-        }\n@@ -188,4 +187,5 @@\n-        for (int i = 0; i < 100_000; i++) {\n-            String id = prefix + i;\n-            if (!ids.contains(id)) {\n-                return id;\n+            for (int i = 0; i < 100_000; i++) {\n+                String id = prefix + i;\n+                if (!ids.contains(id)) {\n+                    return id;\n+                }\n@@ -194,3 +194,1 @@\n-\n-        \/\/ safeguard measure\n-        throw new Error(\"cannot create id: too many windows?\");\n+        return null;\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/settings\/WindowMonitor.java","additions":21,"deletions":23,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -0,0 +1,173 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.tools;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ToolBar;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableCell;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableView;\n+import javafx.scene.input.Clipboard;\n+import javafx.scene.input.DataFormat;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.text.Text;\n+import com.oracle.tools.fx.monkey.util.FX;\n+\n+\/**\n+ * Clipboard Viewer\n+ *\/\n+public class ClipboardViewer extends BorderPane {\n+    private final TreeItem<Entry> root;\n+    private final TreeTableView<Entry> control;\n+\n+    public ClipboardViewer() {\n+        FX.name(this, \"ClipboardPage\");\n+\n+        root = new TreeItem<>(null);\n+        control = new TreeTableView<>(root);\n+        control.setColumnResizePolicy(TreeTableView.CONSTRAINED_RESIZE_POLICY_SUBSEQUENT_COLUMNS);\n+        control.getSelectionModel().setCellSelectionEnabled(true);\n+        control.setShowRoot(false);\n+        {\n+            TreeTableColumn<Entry, String> c = new TreeTableColumn<>();\n+            c.setText(\"Data Format\");\n+            c.setMinWidth(100);\n+            c.setMaxWidth(200);\n+            c.setCellValueFactory((f) -> {\n+                var t = f.getValue();\n+                if (t != null) {\n+                    var tt = t.getValue();\n+                    if (tt != null) {\n+                        return tt.text;\n+                    }\n+                }\n+                return null;\n+            });\n+            control.getColumns().add(c);\n+        }\n+        {\n+            TreeTableColumn<Entry, String> c = new TreeTableColumn<>();\n+            c.setText(\"Value\");\n+            c.setPrefWidth(1000);\n+            c.setCellFactory((r) -> {\n+                return new TreeTableCell<Entry, String>() {\n+                    @Override\n+                    protected void updateItem(String text, boolean empty) {\n+                        super.updateItem(text, empty);\n+                        Text t = new Text(text);\n+                        t.wrappingWidthProperty().bind(widthProperty());\n+                        setPrefHeight(USE_COMPUTED_SIZE);\n+                        setGraphic(t);\n+                    }\n+                };\n+            });\n+            \/\/ TODO text flow\n+            c.setCellValueFactory((f) -> {\n+                var t = f.getValue();\n+                if (t != null) {\n+                    var tt = t.getValue();\n+                    if (tt != null) {\n+                        return tt.text2;\n+                    }\n+                }\n+                return null;\n+            });\n+            control.getColumns().add(c);\n+        }\n+\n+        Button addButton = new Button(\"Reload\");\n+        addButton.setOnAction((ev) -> reload());\n+\n+        ToolBar tp = new ToolBar(addButton);\n+\n+        setCenter(control);\n+        setTop(tp);\n+\n+        reload();\n+    }\n+\n+    private void reload() {\n+        Set<DataFormat> expanded = getExpandedItems();\n+        Clipboard c = Clipboard.getSystemClipboard();\n+        List<DataFormat> formats = new ArrayList<>(c.getContentTypes());\n+        Collections.sort(formats, new Comparator<DataFormat>() {\n+            @Override\n+            public int compare(DataFormat a, DataFormat b) {\n+                return a.toString().compareTo(b.toString());\n+            }\n+        });\n+\n+        ArrayList<TreeItem<Entry>> items = new ArrayList<>();\n+        for (DataFormat f: formats) {\n+            TreeItem<Entry> item = new TreeItem<>(new Entry(f, f.toString(), null));\n+            items.add(item);\n+\n+            Object x = c.getContent(f);\n+            String val = convert(x);\n+            item.getChildren().add(new TreeItem<>(new Entry(f, null, val)));\n+\n+            if (expanded.contains(f)) {\n+                item.setExpanded(true);\n+            }\n+        }\n+\n+        root.getChildren().setAll(items);\n+    }\n+\n+    private Set<DataFormat> getExpandedItems() {\n+        HashSet<DataFormat> rv = new HashSet<>();\n+        for (TreeItem<Entry> item: root.getChildren()) {\n+            if (item.isExpanded()) {\n+                rv.add(item.getValue().format);\n+            }\n+        }\n+        return rv;\n+    }\n+\n+    private static String convert(Object x) {\n+        \/\/ String, ByteBuffer\n+        return x.toString();\n+    }\n+\n+    private static class Entry {\n+        public final DataFormat format;\n+        public final SimpleStringProperty text;\n+        public final SimpleStringProperty text2;\n+\n+        public Entry(DataFormat f, String s1, String s2) {\n+            this.format = f;\n+            text = new SimpleStringProperty(s1);\n+            text2 = new SimpleStringProperty(s2);\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/ClipboardViewer.java","additions":173,"deletions":0,"binary":false,"changes":173,"status":"added"},{"patch":"@@ -0,0 +1,196 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.tools;\n+\n+import java.nio.charset.Charset;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import javafx.collections.ObservableList;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ColorPicker;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.paint.Color;\n+import javafx.stage.Window;\n+\n+\/**\n+ * CSS Playground Tool\n+ *\/\n+public class CssPlaygroundPane extends BorderPane {\n+    private final ColorPicker colorPicker;\n+    private static String oldStylesheet;\n+    private int fontSize = 12;\n+    private static final int[] SIZES = {\n+        7,\n+        8,\n+        9,\n+        10,\n+        11,\n+        12,\n+        13,\n+        14,\n+        16,\n+        18,\n+        20,\n+        22\n+    };\n+    private final Label fontSizeLabel;\n+\n+    public CssPlaygroundPane() {\n+        colorPicker = new ColorPicker();\n+\n+        Button fsLarger = new Button(\"+\");\n+        fsLarger.setOnAction((ev) -> fontSize(true));\n+\n+        Button fsSmaller = new Button(\"-\");\n+        fsSmaller.setOnAction((ev) -> fontSize(false));\n+\n+        fontSizeLabel = new Label(\"12\");\n+        fontSizeLabel.setAlignment(Pos.CENTER);\n+\n+        BorderPane fs = new BorderPane(fontSizeLabel);\n+        fs.setLeft(fsSmaller);\n+        fs.setRight(fsLarger);\n+\n+        GridPane p = new GridPane();\n+        p.setPadding(new Insets(10));\n+        p.setHgap(5);\n+        p.setVgap(5);\n+        int r = 0;\n+        p.add(new Label(\"Background Color:\"), 0, r);\n+        p.add(colorPicker, 1, r);\n+        r++;\n+        p.add(new Label(\"Font Size:\"), 0, r);\n+        p.add(fs, 1, r);\n+        setCenter(p);\n+\n+        colorPicker.setOnAction((ev) -> {\n+            update();\n+        });\n+    }\n+\n+    private void fontSize(boolean larger) {\n+        fontSize = nextFontSize(larger);\n+        fontSizeLabel.setText(String.valueOf(fontSize));\n+        update();\n+    }\n+\n+    private int nextFontSize(boolean larger) {\n+        int ix = indexOf(fontSize);\n+        if (ix < 0) {\n+            return 12;\n+        } else {\n+            ix += (larger ? 1 : -1);\n+            if (ix < 0) {\n+                ix = 0;\n+            } else if (ix >= SIZES.length) {\n+                ix = (SIZES.length - 1);\n+            }\n+            return SIZES[ix];\n+        }\n+    }\n+\n+    private int indexOf(int val) {\n+        for (int i = 0; i < SIZES.length; i++) {\n+            if (SIZES[i] == val) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    private void update() {\n+        Color c = colorPicker.getValue();\n+        if (c == null) {\n+            c = Color.WHITE;\n+        }\n+\n+        String css = generate(c);\n+        \/\/System.out.println(css); \/\/ FIX\n+\n+        applyStyleSheet(css);\n+    }\n+\n+    private String generate(Color bg) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\".root {\\n\");\n+\n+        sb.append(\" -fx-base: \" + toCssColor(bg) + \";\\n\");\n+\n+        sb.append(\"-fx-font-size: \");\n+        sb.append(fontSize * 100.0 \/ 12.0);\n+        sb.append(\"%;\\n\");\n+\n+        sb.append(\"}\\n\");\n+        return sb.toString();\n+    }\n+\n+    private static String toCssColor(Color c) {\n+        int r = toInt8(c.getRed());\n+        int g = toInt8(c.getGreen());\n+        int b = toInt8(c.getBlue());\n+        return String.format(\"#%02X%02X%02X\", r, g, b);\n+    }\n+\n+    private static int toInt8(double x) {\n+        int v = (int)Math.round(x * 255);\n+        if (v < 0) {\n+            return 0;\n+        } else if (v > 255) {\n+            return 255;\n+        }\n+        return v;\n+    }\n+\n+    private static String encode(String s) {\n+        if (s == null) {\n+            return null;\n+        }\n+        Charset utf8 = Charset.forName(\"utf-8\");\n+        byte[] b = s.getBytes(utf8);\n+        return \"data:text\/css;base64,\" + Base64.getEncoder().encodeToString(b);\n+    }\n+\n+    private static void applyStyleSheet(String styleSheet) {\n+        String ss = encode(styleSheet);\n+        if (ss != null) {\n+            for (Window w : Window.getWindows()) {\n+                Scene scene = w.getScene();\n+                if (scene != null) {\n+                    ObservableList<String> sheets = scene.getStylesheets();\n+                    if (oldStylesheet != null) {\n+                        sheets.remove(oldStylesheet);\n+                    }\n+                    sheets.add(ss);\n+                }\n+            }\n+        }\n+        oldStylesheet = ss;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/CssPlaygroundPane.java","additions":196,"deletions":0,"binary":false,"changes":196,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.tools;\n+\n+import javafx.scene.control.Button;\n+import javafx.scene.control.IndexRange;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.ToolBar;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.BorderPane;\n+import com.oracle.tools.fx.monkey.util.FX;\n+\n+\/**\n+ * Keyboard Event Viewer\n+ *\/\n+public class KeyboardEventViewer extends BorderPane {\n+    private final TextArea textField;\n+\n+    public KeyboardEventViewer() {\n+        FX.name(this, \"ClipboardPage\");\n+\n+        textField = new TextArea();\n+        textField.setEditable(false);\n+        textField.addEventFilter(KeyEvent.ANY, this::handleKeyboardEvent);\n+\n+        Button clearButton = new Button(\"Clear\");\n+        clearButton.setOnAction((ev) -> clear());\n+\n+        ToolBar tp = new ToolBar(clearButton);\n+\n+        setCenter(textField);\n+        setTop(tp);\n+\n+        textField.requestFocus();\n+    }\n+\n+    private void clear() {\n+        textField.clear();\n+    }\n+\n+    private void handleKeyboardEvent(KeyEvent ev) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(textField.getText());\n+        sb.append(\"KeyEvent{\");\n+        sb.append(\", type = \").append(ev.getEventType());\n+        sb.append(\", character=\").append(ev.getCharacter());\n+        sb.append(\", text=\").append(ev.getText());\n+        sb.append(\", code=\").append(ev.getCode());\n+\n+        if (ev.isShiftDown()) {\n+            sb.append(\", shift\");\n+        }\n+        if (ev.isControlDown()) {\n+            sb.append(\", control\");\n+        }\n+        if (ev.isAltDown()) {\n+            sb.append(\", alt\");\n+        }\n+        if (ev.isMetaDown()) {\n+            sb.append(\", meta\");\n+        }\n+        if (ev.isShortcutDown()) {\n+            sb.append(\", shortcut\");\n+        }\n+        sb.append(\"}\\n\");\n+\n+        textField.setText(sb.toString());\n+\n+        \/\/ scroll to the end\n+        int ix = textField.getLength();\n+        textField.selectRange(ix, ix);\n+\n+        ev.consume();\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/KeyboardEventViewer.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,237 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.tools;\n+\n+import java.util.ArrayList;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.scene.Node;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Priority;\n+\n+\/**\n+ * Native-to-ASCII and ASCII-to-Native Converter Pane.\n+ *\/\n+public class Native2AsciiPane extends BorderPane {\n+    private final TextArea nat;\n+    private final TextArea ascii;\n+    private final TableView<Entry> table;\n+    private boolean ignoreEvent;\n+\n+    public Native2AsciiPane() {\n+        nat = new TextArea();\n+        nat.textProperty().addListener((x) -> convert(true));\n+\n+        ascii = new TextArea();\n+        ascii.textProperty().addListener((x) -> convert(false));\n+\n+        table = new TableView<>();\n+        table.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY_SUBSEQUENT_COLUMNS);\n+        {\n+            TableColumn<Entry, Integer> c = new TableColumn<>();\n+            c.setText(\"Index\");\n+            c.setCellValueFactory((d) -> new SimpleObjectProperty<Integer>(d.getValue().index));\n+            c.setPrefWidth(50);\n+            table.getColumns().add(c);\n+        }\n+        {\n+            TableColumn<Entry, String> c = new TableColumn<>();\n+            c.setText(\"Char\");\n+            c.setCellValueFactory((d) -> new SimpleStringProperty(d.getValue().character));\n+            c.setPrefWidth(50);\n+            table.getColumns().add(c);\n+        }\n+        {\n+            TableColumn<Entry, String> c = new TableColumn<>();\n+            c.setText(\"U+Code\");\n+            c.setCellValueFactory((d) -> new SimpleStringProperty(d.getValue().code));\n+            c.setPrefWidth(100);\n+            table.getColumns().add(c);\n+        }\n+        {\n+            TableColumn<Entry, String> c = new TableColumn<>();\n+            c.setText(\"Description\");\n+            c.setCellValueFactory((d) -> new SimpleStringProperty(d.getValue().description));\n+            c.setPrefWidth(1000);\n+            table.getColumns().add(c);\n+        }\n+\n+        GridPane p = new GridPane();\n+        p.add(new Label(\"Native\"), 0, 0);\n+        p.add(nat, 0, 1);\n+        p.add(new Label(\"ASCII\"), 1, 0);\n+        p.add(ascii, 1, 1);\n+        p.add(table, 0, 2, 2, 1);\n+\n+        fill(p, nat);\n+        fill(p, ascii);\n+        fill(p, table);\n+\n+        setCenter(p);\n+    }\n+\n+    private void fill(GridPane p, Node n) {\n+        GridPane.setFillHeight(n, Boolean.TRUE);\n+        GridPane.setFillWidth(n, Boolean.TRUE);\n+        p.setHgrow(n, Priority.ALWAYS);\n+        p.setVgrow(n, Priority.ALWAYS);\n+    }\n+\n+    protected void convert(boolean fromNative) {\n+        if (ignoreEvent) {\n+            return;\n+        }\n+\n+        ignoreEvent = true;\n+\n+        if (fromNative) {\n+            String s = nat.getText();\n+            String text = native2ascii(s);\n+            ascii.setText(text);\n+            updateSymbols(s);\n+        } else {\n+            String s = ascii.getText();\n+            String text = ascii2native(s);\n+            nat.setText(text);\n+            updateSymbols(text);\n+        }\n+        ignoreEvent = false;\n+    }\n+\n+    private String ascii2native(String text) {\n+        if (text == null) {\n+            return null;\n+        }\n+\n+        int sz = text.length();\n+        StringBuilder sb = new StringBuilder(sz);\n+        for (int i = 0; i < sz; i++) {\n+            char c = text.charAt(i);\n+            switch (c) {\n+            case '\\\\':\n+                int u = toUnicode(text, i + 1);\n+                if (u < 0) {\n+                    sb.append(c);\n+                } else {\n+                    sb.append((char)u);\n+                    i += 5;\n+                }\n+                break;\n+            default:\n+                sb.append(c);\n+                break;\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static String native2ascii(String text) {\n+        if (text == null) {\n+            return null;\n+        }\n+\n+        int sz = text.length();\n+        StringBuilder sb = new StringBuilder(sz + 256);\n+        for (int i = 0; i < sz; i++) {\n+            char c = text.charAt(i);\n+            switch (c) {\n+            case ' ':\n+            case '\\n':\n+                sb.append(c);\n+                break;\n+            default:\n+                if ((c > ' ') && (c < 0x7f)) {\n+                    sb.append(c);\n+                } else {\n+                    sb.append(\"\\\\u\");\n+                    sb.append(hex(c >> 12));\n+                    sb.append(hex(c >> 8));\n+                    sb.append(hex(c >> 4));\n+                    sb.append(hex(c));\n+                }\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    private static char hex(int n) {\n+        return \"0123456789abcdef\".charAt(n & 0x0f);\n+    }\n+\n+    private int toUnicode(String text, int ix) {\n+        if (text.length() < (ix + 5)) {\n+            return -1;\n+        }\n+\n+        char c = text.charAt(ix++);\n+        switch (c) {\n+        case 'u':\n+        case 'U':\n+            break;\n+        default:\n+            return -1;\n+        }\n+\n+        try {\n+            String s = text.substring(ix, ix + 4);\n+            int v = Integer.parseInt(s, 16);\n+            return v;\n+        } catch (NumberFormatException e) {\n+            return -1;\n+        }\n+    }\n+\n+    protected void updateSymbols(String text) {\n+        int sz = text.length();\n+        ArrayList<Entry> es = new ArrayList<>(sz);\n+        for (int i = 0; i < sz; i++) {\n+            char c = text.charAt(i);\n+            String code = String.format(\"%04X\", (int)c);\n+            String desc = Character.getName(c);\n+            Entry en = new Entry(i, String.valueOf(c), code, desc);\n+            es.add(en);\n+        }\n+        table.getItems().setAll(es);\n+    }\n+\n+    protected static class Entry {\n+        public final int index;\n+        public final String character;\n+        public final String code;\n+        public final String description;\n+\n+        public Entry(int index, String character, String code, String description) {\n+            this.index = index;\n+            this.character = character;\n+            this.code = code;\n+            this.description = description;\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/Native2AsciiPane.java","additions":237,"deletions":0,"binary":false,"changes":237,"status":"added"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.tools;\n+\n+import java.text.DecimalFormat;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import javafx.geometry.Rectangle2D;\n+import javafx.stage.Screen;\n+\n+\/**\n+ * Collects information about the system and generates the report.\n+ *\/\n+public class SystemInfo {\n+    private final DecimalFormat numberFormat = new DecimalFormat(\"#0.###\");\n+    private final StringBuilder sb = new StringBuilder();\n+\n+    private SystemInfo() {\n+\n+    }\n+\n+    public static String generateReport() {\n+        return new SystemInfo().collect();\n+    }\n+\n+    private void nl() {\n+        sb.append('\\n');\n+    }\n+\n+    private void header(String text) {\n+        sb.append(text);\n+        sb.append('\\n');\n+        for (int i = 0; i < text.length(); i++) {\n+            sb.append('=');\n+        }\n+        nl();\n+    }\n+\n+    private void safe(String text) {\n+        for (int i = 0; i < text.length(); i++) {\n+            char c = text.charAt(i);\n+            if (c < 0x20) {\n+                sb.append(String.format(\"\\\\u00%02X\", (int)c));\n+            } else {\n+                sb.append(c);\n+            }\n+        }\n+    }\n+\n+    private void f(double x) {\n+        sb.append(numberFormat.format(x));\n+    }\n+\n+    private void dumpBounds(Rectangle2D r) {\n+        sb.append(\"{x=\");\n+        f(r.getMinX());\n+        sb.append(\", y=\");\n+        f(r.getMinY());\n+        sb.append(\", w=\");\n+        f(r.getWidth());\n+        sb.append(\", h=\");\n+        f(r.getHeight());\n+        sb.append(\"}\");\n+    }\n+\n+    private void dumpScreen(Screen screen, boolean primary, int num) {\n+        sb.append(\"  \");\n+        if (primary) {\n+            sb.append(\"Primary \");\n+        }\n+        sb.append(\"Screen\");\n+        if (!primary) {\n+            sb.append(\" #\");\n+            sb.append(num);\n+        }\n+        sb.append(\":\");\n+        nl();\n+        sb.append(\"    dpi=\");\n+        f(screen.getDpi());\n+        nl();\n+        sb.append(\"    bounds=\");\n+        dumpBounds(screen.getBounds());\n+        nl();\n+        sb.append(\"    visual bounds=\");\n+        dumpBounds(screen.getVisualBounds());\n+        nl();\n+        sb.append(\"    output.scale.x=\");\n+        f(screen.getOutputScaleX());\n+        nl();\n+        sb.append(\"    output.scale.y=\");\n+        f(screen.getOutputScaleY());\n+        nl();\n+    }\n+\n+    private String collect() {\n+        \/\/ system properties\n+        header(\"System Properties\");\n+        {\n+            Properties p = System.getProperties();\n+            ArrayList<String> keys = new ArrayList<>(p.stringPropertyNames());\n+            Collections.sort(keys);\n+            for (String k: keys) {\n+                String v = System.getProperty(k);\n+                sb.append(k);\n+                sb.append(\"=\");\n+                safe(v);\n+                sb.append('\\n');\n+            }\n+        }\n+\n+        \/\/ environment\n+        sb.append('\\n');\n+        header(\"Environment\");\n+        {\n+            Map<String, String> env = System.getenv();\n+            ArrayList<String> keys = new ArrayList<>(env.keySet());\n+            Collections.sort(keys);\n+            for (String k: keys) {\n+                String v = env.get(k);\n+                sb.append(k);\n+                sb.append(\"=\");\n+                safe(v);\n+                sb.append('\\n');\n+            }\n+        }\n+\n+        \/\/ screens\n+        sb.append('\\n');\n+        header(\"Screens\");\n+        {\n+            int num = 1;\n+            Screen primary = Screen.getPrimary();\n+            dumpScreen(primary, true, num++);\n+\n+            List<Screen> screens = Screen.getScreens();\n+            for (Screen s: screens) {\n+                if (!s.equals(primary)) {\n+                    dumpScreen(s, false, num++);\n+                }\n+            }\n+        }\n+        return sb.toString();\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/SystemInfo.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.tools;\n+\n+import javafx.application.Platform;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.layout.BorderPane;\n+\n+\/**\n+ * Tool shows the System Info\n+ *\/\n+public class SystemInfoViewer extends BorderPane {\n+    private final TextArea textField;\n+\n+    public SystemInfoViewer() {\n+        textField = new TextArea();\n+        textField.setEditable(false);\n+        textField.setWrapText(false);\n+        setCenter(textField);\n+\n+        Platform.runLater(() -> {\n+            String s = SystemInfo.generateReport();\n+            textField.setText(s);\n+        });\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/SystemInfoViewer.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.oracle.tools.fx.monkey.util;\n+\n+import java.util.function.Consumer;\n+import javafx.geometry.Insets;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonBar;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.BorderPane;\n+import javafx.stage.Modality;\n+import javafx.stage.Stage;\n+\n+public class EnterTextDialog extends Stage {\n+    private final TextArea textField;\n+\n+    public EnterTextDialog(Object owner, Consumer<String> onEdit) {\n+        initOwner(FX.getParentWindow(owner));\n+        initModality(Modality.APPLICATION_MODAL);\n+\n+        textField = new TextArea();\n+\n+        Button ok = new Button(\"OK\");\n+        ok.setOnAction((ev) -> {\n+            String text = textField.getText();\n+            onEdit.accept(text);\n+            hide();\n+        });\n+\n+        ButtonBar bp = new ButtonBar();\n+        bp.setPadding(new Insets(5, 10, 5, 10));\n+        bp.getButtons().add(ok);\n+\n+        BorderPane p = new BorderPane(textField);\n+        p.setBottom(bp);\n+        setScene(new Scene(p));\n+\n+        addEventHandler(KeyEvent.KEY_PRESSED, (ev) -> {\n+            if (ev.getCode() == KeyCode.ESCAPE) {\n+                hide();\n+            }\n+        });\n+\n+        setWidth(400);\n+        setHeight(300);\n+        setTitle(\"Enter Text\");\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/EnterTextDialog.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -39,0 +39,2 @@\n+import javafx.scene.text.Text;\n+import javafx.scene.text.TextFlow;\n@@ -41,0 +43,1 @@\n+import com.oracle.tools.fx.monkey.settings.FxSettingsSchema;\n@@ -46,0 +49,5 @@\n+    private static final String os = System.getProperty(\"os.name\");\n+    private static final boolean WINDOWS = os.startsWith(\"Windows\");\n+    private static final boolean MAC = os.startsWith(\"Mac\");\n+    private static final boolean LINUX = os.startsWith(\"Linux\");\n+\n@@ -148,0 +156,40 @@\n+\n+    \/** adds a name property to the Node for the purposes of storing the preferences *\/\n+    public static void name(Node n, String name) {\n+        FxSettingsSchema.setName(n, name);\n+    }\n+\n+    public static String getName(Node n) {\n+        return FxSettingsSchema.getName(n);\n+    }\n+\n+    \/** adds a name property to the Window for the purposes of storing the preferences *\/\n+    public static void name(Window w, String name) {\n+        FxSettingsSchema.setName(w, name);\n+    }\n+\n+    public static String getName(Window w) {\n+        return FxSettingsSchema.getName(w);\n+    }\n+\n+    \/** perhaps it should be a method in TextFlow: getTextLength() *\/\n+    public static int getTextLength(TextFlow f) {\n+        int len = 0;\n+        for (Node n : f.getChildrenUnmodifiable()) {\n+            if (n instanceof Text t) {\n+                len += t.getText().length();\n+            } else {\n+                \/\/ treat non-Text nodes as having 1 character\n+                len++;\n+            }\n+        }\n+        return len;\n+    }\n+\n+    public static boolean isWindows() {\n+        return WINDOWS;\n+    }\n+\n+    public static boolean isMac() {\n+        return MAC;\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/FX.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        fontField.setId(id + \"_FONT\");\n+        FX.name(fontField, id + \"_FONT\");\n@@ -49,1 +49,1 @@\n-        sizeField.setId(id + \"_SIZE\");\n+        FX.name(sizeField, id + \"_SIZE\");\n@@ -51,0 +51,7 @@\n+            1,\n+            2,\n+            3,\n+            4,\n+            5,\n+            6,\n+            7,\n@@ -52,0 +59,3 @@\n+            9,\n+            10,\n+            11,\n@@ -55,1 +65,2 @@\n-            72\n+            72,\n+            144\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/FontSelector.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+\/**\n+ * This interface enables manipulations with the {@link Control}'s {@link Skin}.\n+ *\/\n+public interface HasSkinnable {\n+    \/** Sets null {@link Skin} in the underlying {@link Control} *\/\n+    public void nullSkin();\n+\n+    \/** Sets a new default {@link Skin} in the underlying {@link Control} *\/\n+    public void newSkin();\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/HasSkinnable.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -44,1 +44,1 @@\n-        field.setId(\"PosSelector\");\n+        FX.name(field, \"PosSelector\");\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/ItemSelector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,166 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.oracle.tools.fx.monkey.util;\n-\n-import javafx.scene.control.Label;\n-import javafx.scene.control.TextArea;\n-import javafx.scene.layout.BorderPane;\n-import javafx.scene.layout.GridPane;\n-import javafx.scene.layout.Priority;\n-\n-\/**\n- *\n- *\/\n-public class Native2AsciiPane extends BorderPane {\n-    private final TextArea nat;\n-    private final TextArea ascii;\n-    private boolean ignoreEvent;\n-\n-    public Native2AsciiPane() {\n-        nat = new TextArea();\n-        nat.textProperty().addListener((x) -> convert(true));\n-\n-        ascii = new TextArea();\n-        ascii.textProperty().addListener((x) -> convert(false));\n-\n-        GridPane p = new GridPane();\n-        p.add(new Label(\"Native\"), 0, 0);\n-        p.add(nat, 0, 1);\n-        \/\/ talk about ceremony!\n-        GridPane.setFillHeight(nat, Boolean.TRUE);\n-        GridPane.setFillWidth(nat, Boolean.TRUE);\n-        p.setHgrow(nat, Priority.ALWAYS);\n-        p.setVgrow(nat, Priority.ALWAYS);\n-        p.add(new Label(\"ASCII\"), 0, 2);\n-        p.add(ascii, 0, 3);\n-        GridPane.setFillHeight(ascii, Boolean.TRUE);\n-        GridPane.setFillWidth(ascii, Boolean.TRUE);\n-        p.setHgrow(ascii, Priority.ALWAYS);\n-        p.setVgrow(ascii, Priority.ALWAYS);\n-        setCenter(p);\n-    }\n-\n-    protected void convert(boolean fromNative) {\n-        if (ignoreEvent) {\n-            return;\n-        }\n-\n-        ignoreEvent = true;\n-\n-        if (fromNative) {\n-            String s = nat.getText();\n-            String text = native2ascii(s);\n-            ascii.setText(text);\n-        } else {\n-            String s = ascii.getText();\n-            String text = ascii2native(s);\n-            nat.setText(text);\n-        }\n-        ignoreEvent = false;\n-    }\n-\n-    private String ascii2native(String text) {\n-        if (text == null) {\n-            return null;\n-        }\n-\n-        int sz = text.length();\n-        StringBuilder sb = new StringBuilder(sz);\n-        for (int i = 0; i < sz; i++) {\n-            char c = text.charAt(i);\n-            switch (c) {\n-            case '\\\\':\n-                int u = toUnicode(text, i + 1);\n-                if (u < 0) {\n-                    sb.append(c);\n-                } else {\n-                    sb.append((char)u);\n-                    i += 5;\n-                }\n-                break;\n-            default:\n-                sb.append(c);\n-                break;\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    public static String native2ascii(String text) {\n-        if (text == null) {\n-            return null;\n-        }\n-\n-        int sz = text.length();\n-        StringBuilder sb = new StringBuilder(sz + 256);\n-        for (int i = 0; i < sz; i++) {\n-            char c = text.charAt(i);\n-            switch (c) {\n-            case ' ':\n-            case '\\n':\n-                sb.append(c);\n-                break;\n-            default:\n-                if ((c > ' ') && (c < 0x7f)) {\n-                    sb.append(c);\n-                } else {\n-                    sb.append(\"\\\\u\");\n-                    sb.append(hex(c >> 12));\n-                    sb.append(hex(c >> 8));\n-                    sb.append(hex(c >> 4));\n-                    sb.append(hex(c));\n-                }\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    private static char hex(int n) {\n-        return \"0123456789abcdef\".charAt(n & 0x0f);\n-    }\n-\n-    private int toUnicode(String text, int ix) {\n-        if (text.length() < (ix + 5)) {\n-            return -1;\n-        }\n-\n-        char c = text.charAt(ix++);\n-        switch (c) {\n-        case 'u':\n-        case 'U':\n-            break;\n-        default:\n-            return -1;\n-        }\n-\n-        try {\n-            String s = text.substring(ix, ix + 4);\n-            int v = Integer.parseInt(s, 16);\n-            return v;\n-        } catch (NumberFormatException e) {\n-            return -1;\n-        }\n-    }\n-}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/Native2AsciiPane.java","additions":0,"deletions":166,"binary":false,"changes":166,"status":"deleted"},{"patch":"@@ -38,1 +38,1 @@\n-    private static final Insets MARGIN = new Insets(2, 4, 2, 4);\n+    private static final Insets MARGIN = new Insets(1, 4, 0, 4);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/OptionPane.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-        field.setId(\"PosSelector\");\n+        FX.name(field, \"PosSelector\");\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/PosSelector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.oracle.tools.fx.monkey.util;\n+\n+import java.util.function.Supplier;\n+import javafx.scene.Parent;\n+import javafx.scene.Scene;\n+import javafx.stage.Stage;\n+import javafx.stage.Window;\n+\n+public class SingleInstance {\n+    public static Stage openSingleInstance(String name, String title, Supplier<Parent> content) {\n+        for (Window w: Window.getWindows()) {\n+            String s = FX.getName(w);\n+            if (name.equals(s) && (w instanceof Stage stage)) {\n+                stage.requestFocus();\n+                return stage;\n+            }\n+        }\n+\n+        Parent p = content.get();\n+\n+        Stage s = new Stage();\n+        FX.name(s, name);\n+        s.setTitle(title);\n+        s.setScene(new Scene(p));\n+        s.setWidth(900);\n+        s.setHeight(500);\n+        s.show();\n+        return s;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/SingleInstance.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -27,0 +27,1 @@\n+import java.util.Random;\n@@ -34,0 +35,2 @@\n+    public static final String CLUSTERS = \"☝🏿☝🏿☝🏿🤦🏼‍♂️\";\n+    public static final String AKKADIAN = \"Akkadian:  𒀝𒅗𒁺𒌑\";\n@@ -53,1 +56,2 @@\n-            \"Writing Systems\", WritingSystemsDemo.getText(),\n+            \"Writing Systems\", WritingSystemsDemo.getText(false),\n+            \/\/\"Writing Systems (Clean)\", WritingSystemsDemo.getText(false),\n@@ -59,0 +63,2 @@\n+            \"Newlines\", \"\\n1\\n2\\n\\n3\\n\\n\\n4\\n\\n\\n\\n5\\n\",\n+            \"Long CJK\",  createLongCJK(),\n@@ -79,0 +85,16 @@\n+\n+    \/\/ see JDK-8090110\n+    private static String createLongCJK() {\n+        String chars = \"あいうえおかきくけこさしすせそたちつてとなにぬねのはひふへほまみむめもやゆよらりるれろわをん\\nアイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲン\\n\\n亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕\";\n+        StringBuilder sb = new StringBuilder(128_000);\n+        Random r = new Random();\n+        \/\/ 100KB\n+        for (int i = 0; i < 10_240; i++) {\n+            char c = chars.charAt(Math.abs(r.nextInt()) % chars.length());\n+            sb.append(c);\n+            if (i > 0 && i % 100 == 0) {\n+                sb.append(\"\\n\");\n+            }\n+        }\n+        return sb.toString();\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/Templates.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n-import javafx.beans.binding.BooleanBinding;\n-import javafx.beans.property.SimpleBooleanProperty;\n@@ -31,1 +29,0 @@\n-import javafx.scene.Group;\n@@ -35,0 +32,4 @@\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.ScrollPane.ScrollBarPolicy;\n@@ -36,0 +37,1 @@\n+import javafx.scene.layout.Border;\n@@ -56,3 +58,3 @@\n-        hsplit.setId(\"hsplit\");\n-        hsplit.setBorder(null);\n-        hsplit.setDividerPositions(0.9);\n+        FX.name(hsplit, \"hsplit\");\n+        hsplit.setBorder(Border.EMPTY);\n+        hsplit.setDividerPositions(1.0);\n@@ -62,3 +64,3 @@\n-        vsplit.setId(\"vsplit\");\n-        vsplit.setBorder(null);\n-        vsplit.setDividerPositions(0.9);\n+        FX.name(vsplit, \"vsplit\");\n+        vsplit.setBorder(Border.EMPTY);\n+        vsplit.setDividerPositions(1.0);\n@@ -111,1 +113,28 @@\n-        setRight(n);\n+        if (n == null) {\n+            setRight(null);\n+        } else {\n+            ScrollPane sp = new ScrollPane(n);\n+            sp.setVbarPolicy(ScrollBarPolicy.AS_NEEDED);\n+            sp.setHbarPolicy(ScrollBarPolicy.NEVER);\n+            setRight(sp);\n+        }\n+    }\n+\n+    protected void onChange(ComboBox<?> cb, boolean immediately, Runnable client) {\n+        cb.getSelectionModel().selectedItemProperty().addListener((x) -> {\n+            client.run();\n+        });\n+\n+        if (immediately) {\n+            client.run();\n+        }\n+    }\n+\n+    protected void onChange(CheckBox cb, boolean immediately, Runnable client) {\n+        cb.selectedProperty().addListener((x) -> {\n+            client.run();\n+        });\n+\n+        if (immediately) {\n+            client.run();\n+        }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/TestPaneBase.java","additions":39,"deletions":10,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.Objects;\n@@ -43,1 +44,1 @@\n-        field.setId(\"PosSelector\");\n+        FX.name(field, id);\n@@ -140,0 +141,12 @@\n+\n+    public void removeChoice(String name) {\n+        int ix = 0;\n+        for (Object x: field.getItems()) {\n+            String s = toDisplay(x);\n+            if (Objects.equals(name, s)) {\n+                field.getItems().remove(ix);\n+                return;\n+            }\n+            ix++;\n+        }\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/TextSelector.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -38,0 +38,7 @@\n+\n+    public static boolean isBlank(Object x) {\n+        if(x == null) {\n+            return true;\n+        }\n+        return (x.toString().trim().length() == 0);\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/Utils.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-    public static String getText() {\n+    public static String getText(boolean showUnicode) {\n@@ -103,1 +103,1 @@\n-        for(int i=0; i<PAIRS.length; ) {\n+        for (int i = 0; i < PAIRS.length;) {\n@@ -106,1 +106,1 @@\n-            t(sb, a, b);\n+            t(sb, a, b, showUnicode);\n@@ -111,1 +111,1 @@\n-    private static void t(StringBuilder sb, String name, String text) {\n+    private static void t(StringBuilder sb, String name, String text, boolean showUnicode) {\n@@ -115,3 +115,6 @@\n-        sb.append(\" (\");\n-        native2ascii(sb, text);\n-        sb.append(\") \\n\");\n+        if (showUnicode) {\n+            sb.append(\" (\");\n+            native2ascii(sb, text);\n+            sb.append(\")\");\n+        }\n+        sb.append(\"\\n\");\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/WritingSystemsDemo.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"}]}