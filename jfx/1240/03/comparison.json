{"files":[{"patch":"@@ -0,0 +1,325 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.stage;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeTrue;\n+\n+import com.sun.javafx.PlatformUtil;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.paint.Color;\n+\n+import test.util.Util;\n+import test.robot.testharness.VisualTestBase;\n+\n+import static test.util.Util.TIMEOUT;\n+\n+public class StageAttributesTest extends VisualTestBase {\n+\n+    private static final int WIDTH = 400;\n+    private static final int HEIGHT = 400;\n+\n+    private static final Color BOTTOM_COLOR = Color.LIME;\n+    private static final Color TOP_COLOR = Color.RED;\n+\n+    private static final double TOLERANCE = 0.07;\n+\n+    private Stage bottomStage;\n+    private Scene topScene;\n+    private Stage topStage;\n+\n+    private void setupStages(boolean overlayed, boolean topShown) throws InterruptedException {\n+        final CountDownLatch bottomShownLatch = new CountDownLatch(1);\n+        final CountDownLatch topShownLatch = new CountDownLatch(1);\n+\n+        runAndWait(() -> {\n+            \/\/ Bottom stage, should be visible after top stage is iconified\n+            bottomStage = getStage(false);\n+            bottomStage.initStyle(StageStyle.DECORATED);\n+            Scene bottomScene = new Scene(new Pane(), WIDTH, HEIGHT);\n+            bottomScene.setFill(BOTTOM_COLOR);\n+            bottomStage.setScene(bottomScene);\n+            bottomStage.setX(0);\n+            bottomStage.setY(0);\n+            bottomStage.setOnShown(e -> Platform.runLater(bottomShownLatch::countDown));\n+            bottomStage.show();\n+        });\n+\n+        assertTrue(\"Timeout waiting for bottom stage to be shown\",\n+            bottomShownLatch.await(TIMEOUT, TimeUnit.MILLISECONDS));\n+\n+        runAndWait(() -> {\n+            \/\/ Top stage, will be inconified\n+            topStage = getStage(true);\n+            topStage.initStyle(StageStyle.DECORATED);\n+            topScene = new Scene(new Pane(), WIDTH, HEIGHT);\n+            topScene.setFill(TOP_COLOR);\n+            topStage.setScene(topScene);\n+            if (overlayed) {\n+                topStage.setX(0);\n+                topStage.setY(0);\n+            } else {\n+                topStage.setX(WIDTH);\n+                topStage.setY(HEIGHT);\n+            }\n+            if (topShown) {\n+                topStage.setOnShown(e -> Platform.runLater(topShownLatch::countDown));\n+                topStage.show();\n+            }\n+        });\n+\n+        if (topShown) {\n+            assertTrue(\"Timeout waiting for top stage to be shown\",\n+                topShownLatch.await(TIMEOUT, TimeUnit.MILLISECONDS));\n+        }\n+    }\n+\n+    @Test\n+    public void testIconifiedStage() throws InterruptedException {\n+        \/\/ Skip on Linux due to:\n+        \/\/  - JDK-8316423\n+        assumeTrue(!PlatformUtil.isLinux());\n+\n+        setupStages(true, true);\n+\n+        runAndWait(() -> {\n+            Color color = getColor(200, 200);\n+            assertColorEquals(TOP_COLOR, color, TOLERANCE);\n+\n+            topStage.setIconified(true);\n+        });\n+\n+        \/\/ wait a bit to let window system animate the change\n+        Util.waitForIdle(topScene);\n+\n+        runAndWait(() -> {\n+            assertTrue(topStage.isIconified());\n+            Color color = getColor(200, 200);\n+            assertColorEquals(BOTTOM_COLOR, color, TOLERANCE);\n+        });\n+    }\n+\n+    @Test\n+    public void testMaximizedStage() throws InterruptedException {\n+        \/\/ Skip on Linux due to:\n+        \/\/  - JDK-8316423\n+        assumeTrue(!PlatformUtil.isLinux());\n+\n+        setupStages(false, true);\n+\n+        runAndWait(() -> {\n+            Color color = getColor(200, 200);\n+            assertColorEquals(BOTTOM_COLOR, color, TOLERANCE);\n+\n+            topStage.setMaximized(true);\n+        });\n+\n+        \/\/ wait a bit to let window system animate the change\n+        Util.waitForIdle(topScene);\n+\n+        runAndWait(() -> {\n+            assertTrue(topStage.isMaximized());\n+\n+            \/\/ maximized stage should take over the bottom stage\n+            Color color = getColor(200, 200);\n+            assertColorEquals(TOP_COLOR, color, TOLERANCE);\n+        });\n+\n+        \/\/ wait a little bit between getColor() calls - on macOS the below one\n+        \/\/ would fail without this wait\n+        sleep(100);\n+\n+        runAndWait(() -> {\n+            \/\/ top left corner (plus some tolerance) should show decorations (so not TOP_COLOR)\n+            Color color = getColor((int)topStage.getX() + 10, (int)topStage.getY() + 10);\n+            assertColorDoesNotEqual(TOP_COLOR, color, TOLERANCE);\n+            assertColorDoesNotEqual(BOTTOM_COLOR, color, TOLERANCE);\n+        });\n+    }\n+\n+    @Test\n+    public void testFullScreenStage() throws InterruptedException {\n+        \/\/ Skip on Linux due to:\n+        \/\/  - JDK-8316423\n+        assumeTrue(!PlatformUtil.isLinux());\n+\n+        setupStages(false, true);\n+\n+        runAndWait(() -> {\n+            Color color = getColor(200, 200);\n+            assertColorEquals(BOTTOM_COLOR, color, TOLERANCE);\n+\n+            topStage.setFullScreen(true);\n+        });\n+\n+        \/\/ wait a bit to let window system animate the change\n+        Util.waitForIdle(topScene);\n+\n+        runAndWait(() -> {\n+            assertTrue(topStage.isFullScreen());\n+\n+            \/\/ fullscreen stage should take over the bottom stage\n+            Color color = getColor(200, 200);\n+            assertColorEquals(TOP_COLOR, color, TOLERANCE);\n+        });\n+\n+        \/\/ wait a little bit between getColor() calls - on macOS the below one\n+        \/\/ would fail without this wait\n+        sleep(100);\n+\n+        runAndWait(() -> {\n+            \/\/ top left corner (plus some tolerance) should NOT show decorations\n+            Color color = getColor((int)topStage.getX() + 5, (int)topStage.getY() + 5);\n+            assertColorEquals(TOP_COLOR, color, TOLERANCE);\n+        });\n+    }\n+\n+    @Test\n+    public void testIconifiedStageBeforeShow() throws InterruptedException {\n+        \/\/ Skip on Mac due to:\n+        \/\/  - JDK-8305675\n+        assumeTrue(!PlatformUtil.isMac());\n+        \/\/ Skip on Linux due to:\n+        \/\/  - JDK-8316423\n+        assumeTrue(!PlatformUtil.isLinux());\n+\n+        setupStages(true, false);\n+\n+        runAndWait(() -> {\n+            Color color = getColor(200, 200);\n+            \/\/ top stage was not shown yet in this case, but the bottom stage should be ready\n+            assertColorEquals(BOTTOM_COLOR, color, TOLERANCE);\n+\n+            topStage.setIconified(true);\n+            topStage.show();\n+        });\n+\n+        \/\/ wait a bit to let window system animate the change\n+        Util.waitForIdle(topScene);\n+\n+        runAndWait(() -> {\n+            assertTrue(topStage.isIconified());\n+\n+            \/\/ bottom stage should still be visible\n+            Color color = getColor(200, 200);\n+            assertColorEquals(BOTTOM_COLOR, color, TOLERANCE);\n+        });\n+    }\n+\n+    @Test\n+    public void testMaximizedStageBeforeShow() throws InterruptedException {\n+        \/\/ Skip on Mac due to:\n+        \/\/  - JDK-8316419\n+        assumeTrue(!PlatformUtil.isMac());\n+        \/\/ Skip on Linux due to:\n+        \/\/  - JDK-8316423\n+        \/\/  - JDK-8316425\n+        assumeTrue(!PlatformUtil.isLinux());\n+\n+        setupStages(false, false);\n+\n+        runAndWait(() -> {\n+            Color color = getColor(200, 200);\n+            assertColorEquals(BOTTOM_COLOR, color, TOLERANCE);\n+\n+            topStage.setMaximized(true);\n+            topStage.show();\n+        });\n+\n+        \/\/ wait a bit to let window system animate the change\n+        Util.waitForIdle(topScene);\n+\n+        runAndWait(() -> {\n+            assertTrue(topStage.isMaximized());\n+\n+            \/\/ maximized stage should take over the bottom stage\n+            Color color = getColor(200, 200);\n+            assertColorEquals(TOP_COLOR, color, TOLERANCE);\n+        });\n+\n+        \/\/ wait a little bit between getColor() calls - on macOS the below one\n+        \/\/ would fail without this wait\n+        sleep(100);\n+\n+        runAndWait(() -> {\n+            \/\/ top left corner (plus some tolerance) should show decorations (so not TOP_COLOR)\n+            Color color = getColor((int)topStage.getX() + 10, (int)topStage.getY() + 10);\n+            assertColorDoesNotEqual(TOP_COLOR, color, TOLERANCE);\n+            assertColorDoesNotEqual(BOTTOM_COLOR, color, TOLERANCE);\n+        });\n+    }\n+\n+    @Test\n+    public void testFullScreenStageBeforeShow() throws InterruptedException {\n+        \/\/ Skip on Linux due to:\n+        \/\/  - JDK-8316423\n+        \/\/  - JDK-8316425\n+        assumeTrue(!PlatformUtil.isLinux());\n+\n+        setupStages(false, false);\n+\n+        runAndWait(() -> {\n+            Color color = getColor(200, 200);\n+            assertColorEquals(BOTTOM_COLOR, color, TOLERANCE);\n+\n+            topStage.setFullScreen(true);\n+            topStage.show();\n+        });\n+\n+        \/\/ wait a bit to let window system animate the change\n+        Util.waitForIdle(topScene);\n+\n+        runAndWait(() -> {\n+            assertTrue(topStage.isFullScreen());\n+\n+            \/\/ fullscreen stage should take over the bottom stage\n+            Color color = getColor(200, 200);\n+            assertColorEquals(TOP_COLOR, color, TOLERANCE);\n+        });\n+\n+        \/\/ wait a little bit between getColor() calls - on macOS the below one\n+        \/\/ would fail without this wait\n+        sleep(100);\n+\n+        runAndWait(() -> {\n+            \/\/ top left corner (plus some tolerance) should NOT show decorations\n+            Color color = getColor((int)topStage.getX() + 5, (int)topStage.getY() + 5);\n+            assertColorEquals(TOP_COLOR, color, TOLERANCE);\n+        });\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageAttributesTest.java","additions":325,"deletions":0,"binary":false,"changes":325,"status":"added"}]}