{"files":[{"patch":"@@ -745,1 +745,6 @@\n-                indeterminateTransition.playFromStart();\n+\n+                if (NodeHelper.isTreeShowing(control)) {\n+                    indeterminateTransition.playFromStart();\n+                } else {\n+                    indeterminateTransition.jumpTo(Duration.ZERO);\n+                }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/ProgressIndicatorSkin.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import javafx.scene.Group;\n@@ -41,0 +42,1 @@\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -46,0 +48,3 @@\n+import static org.junit.Assert.assertTrue;\n+import static test.util.Util.TIMEOUT;\n+import test.util.Util;\n@@ -50,3 +55,8 @@\n-    static CountDownLatch startupLatch;\n-    static WeakReference<Node> detIndicator = null;\n-    static Stage stage = null;\n+    @BeforeClass\n+    public static void initFX() throws Exception {\n+        CountDownLatch startupLatch = new CountDownLatch(1);\n+        Platform.setImplicitExit(false);\n+        Platform.startup(startupLatch::countDown);\n+        Assert.assertTrue(\"Timeout waiting for FX runtime to start\",\n+                startupLatch.await(TIMEOUT, TimeUnit.MILLISECONDS));\n+    }\n@@ -54,1 +64,28 @@\n-    public static class TestApp extends Application {\n+    @Test\n+    public void leakDeterminationIndicator() throws Exception {\n+        JMemoryBuddy.memoryTest((checker) -> {\n+            CountDownLatch showingLatch = new CountDownLatch(1);\n+            Util.runAndWait(() -> {\n+                Stage stage = new Stage();\n+                ProgressIndicator indicator = new ProgressIndicator(-1);\n+                indicator.setSkin(new ProgressIndicatorSkin(indicator));\n+                Scene scene = new Scene(indicator);\n+                stage.setScene(scene);\n+                indicator.setProgress(1.0);\n+                Assert.assertEquals(\"size is wrong\", 1, indicator.getChildrenUnmodifiable().size());\n+                Node detIndicator = indicator.getChildrenUnmodifiable().get(0);\n+                indicator.setProgress(-1.0);\n+                indicator.setProgress(1.0);\n+                checker.assertCollectable(detIndicator);\n+                stage.setOnShown(l -> {\n+                    Platform.runLater(() -> showingLatch.countDown());\n+                });\n+                stage.show();\n+            });\n+            try {\n+                Assert.assertTrue(\"Timeout waiting for setOnShown\", showingLatch.await(15, TimeUnit.SECONDS));\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+    }\n@@ -56,12 +93,5 @@\n-        @Override\n-        public void start(Stage primaryStage) throws Exception {\n-            ProgressIndicator indicator = new ProgressIndicator(-1);\n-            indicator.setSkin(new ProgressIndicatorSkin(indicator));\n-            Scene scene = new Scene(indicator);\n-            primaryStage.setScene(scene);\n-            stage = primaryStage;\n-            indicator.setProgress(1.0);\n-            Assert.assertEquals(\"size is wrong\", 1, indicator.getChildrenUnmodifiable().size());\n-            detIndicator = new WeakReference<Node>(indicator.getChildrenUnmodifiable().get(0));\n-            indicator.setProgress(-1.0);\n-            indicator.setProgress(1.0);\n+    @Test\n+    public void stageLeakWhenTreeNotShowing() throws Exception {\n+        JMemoryBuddy.memoryTest((checker) -> {\n+            CountDownLatch showingLatch = new CountDownLatch(1);\n+            AtomicReference<Stage> stage = new AtomicReference<>();\n@@ -69,2 +99,10 @@\n-            primaryStage.setOnShown(l -> {\n-                Platform.runLater(() -> startupLatch.countDown());\n+            Util.runAndWait(() -> {\n+                stage.set(new Stage());\n+                Group root = new Group();\n+                root.setVisible(false);\n+                root.getChildren().add(new ProgressIndicator());\n+                stage.get().setScene(new Scene(root));\n+                stage.get().setOnShown(l -> {\n+                    Platform.runLater(() -> showingLatch.countDown());\n+                });\n+                stage.get().show();\n@@ -72,3 +110,0 @@\n-            primaryStage.show();\n-        }\n-    }\n@@ -76,6 +111,5 @@\n-    @BeforeClass\n-    public static void initFX() throws Exception {\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        Assert.assertTrue(\"Timeout waiting for FX runtime to start\", startupLatch.await(15, TimeUnit.SECONDS));\n-    }\n+            try {\n+                assertTrue(\"Timeout waiting test stage\", showingLatch.await(15, TimeUnit.SECONDS));\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n@@ -83,3 +117,6 @@\n-    @Test\n-    public void memoryTest() throws Exception {\n-        JMemoryBuddy.assertCollectable(detIndicator);\n+            Util.runAndWait(() -> {\n+                stage.get().close();\n+            });\n+\n+            checker.assertCollectable(stage.get());\n+        });\n@@ -91,1 +128,0 @@\n-            stage.hide();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/control\/ProgressIndicatorLeakTest.java","additions":67,"deletions":31,"binary":false,"changes":98,"status":"modified"}]}