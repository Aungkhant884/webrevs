{"files":[{"patch":"@@ -49,0 +49,1 @@\n+import static test.util.Util.TIMEOUT;\n@@ -54,26 +55,0 @@\n-    static CountDownLatch startupLatch;\n-    static WeakReference<Node> detIndicator = null;\n-    static Stage stage = null;\n-\n-    public static class TestApp extends Application {\n-\n-        @Override\n-        public void start(Stage primaryStage) throws Exception {\n-            ProgressIndicator indicator = new ProgressIndicator(-1);\n-            indicator.setSkin(new ProgressIndicatorSkin(indicator));\n-            Scene scene = new Scene(indicator);\n-            primaryStage.setScene(scene);\n-            stage = primaryStage;\n-            indicator.setProgress(1.0);\n-            Assert.assertEquals(\"size is wrong\", 1, indicator.getChildrenUnmodifiable().size());\n-            detIndicator = new WeakReference<Node>(indicator.getChildrenUnmodifiable().get(0));\n-            indicator.setProgress(-1.0);\n-            indicator.setProgress(1.0);\n-\n-            primaryStage.setOnShown(l -> {\n-                Platform.runLater(() -> startupLatch.countDown());\n-            });\n-            primaryStage.show();\n-        }\n-    }\n-\n@@ -82,3 +57,5 @@\n-        startupLatch = new CountDownLatch(1);\n-        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n-        Assert.assertTrue(\"Timeout waiting for FX runtime to start\", startupLatch.await(15, TimeUnit.SECONDS));\n+        CountDownLatch startupLatch = new CountDownLatch(1);\n+        Platform.setImplicitExit(false);\n+        Platform.startup(startupLatch::countDown);\n+        Assert.assertTrue(\"Timeout waiting for FX runtime to start\",\n+                startupLatch.await(TIMEOUT, TimeUnit.MILLISECONDS));\n@@ -88,2 +65,17 @@\n-    public void memoryTest() throws Exception {\n-        JMemoryBuddy.assertCollectable(detIndicator);\n+    public void leakDeterminationIndicator() throws Exception {\n+        JMemoryBuddy.memoryTest((checker) -> {\n+            Util.runAndWait(() -> {\n+                Stage stage = new Stage();\n+                ProgressIndicator indicator = new ProgressIndicator(-1);\n+                indicator.setSkin(new ProgressIndicatorSkin(indicator));\n+                Scene scene = new Scene(indicator);\n+                stage.setScene(scene);\n+                indicator.setProgress(1.0);\n+                Assert.assertEquals(\"size is wrong\", 1, indicator.getChildrenUnmodifiable().size());\n+                Node detIndicator = indicator.getChildrenUnmodifiable().get(0);\n+                indicator.setProgress(-1.0);\n+                indicator.setProgress(1.0);\n+                checker.assertCollectable(detIndicator);\n+                stage.show();\n+            });\n+        });\n@@ -93,1 +85,1 @@\n-    public void treeNotShowing() throws Exception {\n+    public void stageLeakWhenTreeNotShowing() throws Exception {\n@@ -127,1 +119,0 @@\n-            stage.hide();\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/control\/ProgressIndicatorLeakTest.java","additions":24,"deletions":33,"binary":false,"changes":57,"status":"modified"}]}