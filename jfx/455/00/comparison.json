{"files":[{"patch":"@@ -745,1 +745,4 @@\n-                indeterminateTransition.playFromStart();\n+\n+                if(NodeHelper.isTreeShowing(control)) {\n+                    indeterminateTransition.playFromStart();\n+                }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/ProgressIndicatorSkin.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import javafx.scene.Group;\n@@ -41,0 +42,1 @@\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -46,0 +48,2 @@\n+import static org.junit.Assert.assertTrue;\n+import test.util.Util;\n@@ -88,0 +92,32 @@\n+    @Test\n+    public void treeNotShowing() throws Exception {\n+        JMemoryBuddy.memoryTest((checker) -> {\n+            CountDownLatch showingLatch = new CountDownLatch(1);\n+            AtomicReference<Stage> stage = new AtomicReference<>();\n+\n+            Util.runAndWait(() -> {\n+                stage.set(new Stage());\n+                Group root = new Group();\n+                root.setVisible(false);\n+                root.getChildren().add(new ProgressIndicator());\n+                stage.get().setScene(new Scene(root));\n+                stage.get().setOnShown(l -> {\n+                    Platform.runLater(() -> showingLatch.countDown());\n+                });\n+                stage.get().show();\n+            });\n+\n+            try {\n+                assertTrue(\"Timeout waiting test stage\", showingLatch.await(15, TimeUnit.SECONDS));\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            Util.runAndWait(() -> {\n+                stage.get().close();\n+            });\n+\n+            checker.assertCollectable(stage.get());\n+        });\n+    }\n+\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/control\/ProgressIndicatorLeakTest.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"}]}