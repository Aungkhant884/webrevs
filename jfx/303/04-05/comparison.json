{"files":[{"patch":"@@ -57,1 +57,1 @@\n-TIP: A GitHub pull request (PR) should not be the first time we hear about your proposed change to OpenJFX. Unless clearly identified as a Draft or work-in-progress (WIP), we will usually close a pull request that isn't associated with an existing bug report. Reading the policies below will help you in getting your change approved.\n+TIP: A GitHub pull request (PR) should not be the first time we hear about your proposed change to OpenJFX. Unless clearly identified as a `Draft` or work-in-progress (WIP), as described in the following section, we will usually close a pull request that isn't associated with an existing bug report. Reading the policies below will help you in getting your change approved.\n@@ -172,2 +172,2 @@\n-Contributing to the OpenJFX codebase\n-------------------------------------------\n+New features \/ API additions\n+----------------------------\n@@ -175,5 +175,3 @@\n-JDK 11 (at a minimum) is required to build OpenJFX. You must have the JDK\n-installed on your system\n-with the environment variable `JAVA_HOME` referencing the path to Java home for\n-your JDK installation. By default, tests use the same runtime as `JAVA_HOME`.\n-Currently OpenJFX builds are running on JDK 11 through JDK 15. JDK 14 is recommended.\n+Adding a new feature to OpenJFX requires us to consider what it means to support that API forever; we take compatibility seriously.\n+The main idea is to think in terms of \"stewardship\" when evolving the JavaFX API. This will require significant effort on your part.\n+With that in mind, here are the needed steps to get a new feature into JavaFX.\n@@ -181,1 +179,31 @@\n-It is possible to develop in any major Java IDE (Eclipse, IntelliJ, NetBeans). IDEs can automatically configure projects based on Gradle setup.\n+1. Discuss the proposed feature on the [openjfx-dev](https:\/\/mail.openjdk.java.net\/mailman\/listinfo\/openjfx-dev) mailing list.\n+You should start with _why_ you think\n+adding the API to the core of JavaFX is a good and useful addition for multiple applications (not just your own)\n+and for the evolution of the JavaFX UI Toolkit. Part of this is to see whether the Project Leads and Reviewers\n+are generally supportive of the idea, as well as to see whether other developers have any ideas as to whether\n+and how it would be useful in their applications. We want to make sure that the new feature fits in with the\n+existing API and will move the API forward in a direction we want to go. We need to ensure that the value\n+proposition of the new feature justifies the investment, which goes well beyond the initial cost of developing it.\n+Presuming that the feature meets the cost \/ benefit assessment (including opportunity cost), then discussion can\n+proceed to the API.\n+\n+2. Discuss the API needed to provide the feature. While this can't always be completely separated from its\n+implementation, it is the public API itself that is important to nail down and get right. While we don't currently\n+use the formal JEP process as is done for larger JDK features, the [JEP template](http:\/\/openjdk.java.net\/jeps\/2)\n+provides some ideas to consider when proposing an API, such as a summary of the changes, goals, motivation, testing,\n+dependencies, etc. A Draft (or WIP) pull request can be useful for illustrative purposes as long as the focus is on the public API.\n+If there are trade-offs to be made in the implementation, or different implementation approaches that you might take,\n+this is a good time to discuss it. Once this step is far enough along that there is general agreement as to the API,\n+then it's time to focus on the implementation.\n+\n+3. Submit a review of your proposed implementation. As noted in the\n+[New features \/ API additions](https:\/\/wiki.openjdk.java.net\/display\/OpenJFX\/Code+Reviews#CodeReviews-NewFeaturesC.Newfeatures\/APIadditions.)\n+section of the Code Review Policies doc, we also need a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main), which documents the API change and its approval.\n+The CSR can be reviewed in parallel. Changes in the API that arise during the review need to be reflected in the CSR, meaning\n+that the final review \/ approval of the CSR usually happens late in the review cycle.\n+\n+TIP: a pull request is _not_ the starting point, since that skips the first two important steps and jumps right into\n+\"given this new feature, and an API definition that specifies it, please review my proposed implementation\".\n+\n+Coding style and testing guidelines\n+------------------------------------------\n@@ -201,0 +229,10 @@\n+### Building and testing\n+\n+JDK 11 (at a minimum) is required to build OpenJFX. You must have the JDK\n+installed on your system\n+with the environment variable `JAVA_HOME` referencing the path to Java home for\n+your JDK installation. By default, tests use the same runtime as `JAVA_HOME`.\n+Currently OpenJFX will build and run on JDK 11 through JDK 18. JDK 17 is recommended.\n+\n+It is possible to develop in any major Java IDE (Eclipse, IntelliJ, NetBeans). IDEs can automatically configure projects based on Gradle setup.\n+\n@@ -217,36 +255,0 @@\n-\n-New features \/ API additions\n-----------------------------\n-\n-Adding a new feature to OpenJFX requires us to consider what it means to support that API forever; we take compatibility seriously.\n-The main idea is to think in terms of \"stewardship\" when evolving the JavaFX API. This will require significant effort on your part.\n-With that in mind, here are the needed steps to get a new feature into JavaFX.\n-\n-1. Discuss the proposed feature on the [openjfx-dev](https:\/\/mail.openjdk.java.net\/mailman\/listinfo\/openjfx-dev) mailing list.\n-You should start with _why_ you think\n-adding the API to the core of JavaFX is a good and useful addition for multiple applications (not just your own)\n-and for the evolution of the JavaFX UI Toolkit. Part of this is to see whether the Project Leads and Reviewers\n-are generally supportive of the idea, as well as to see whether other developers have any ideas as to whether\n-and how it would be useful in their applications. We want to make sure that the new feature fits in with the\n-existing API and will move the API forward in a direction we want to go. We need to ensure that the value\n-proposition of the new feature justifies the investment, which goes well beyond the initial cost of developing it.\n-Presuming that the feature meets the cost \/ benefit assessment (including opportunity cost), then discussion can\n-proceed to the API.\n-\n-2. Discuss the API needed to provide the feature. While this can't always be completely separated from its\n-implementation, it is the public API itself that is important to nail down and get right. While we don't currently\n-use the formal JEP process as is done for larger JDK features, the [JEP template](http:\/\/openjdk.java.net\/jeps\/2)\n-provides some ideas to consider when proposing an API, such as a summary of the changes, goals, motivation, testing,\n-dependencies, etc. A Draft (or WIP) pull request can be useful for illustrative purposes as long as the focus is on the public API.\n-If there are trade-offs to be made in the implementation, or different implementation approaches that you might take,\n-this is a good time to discuss it. Once this step is far enough along that there is general agreement as to the API,\n-then it's time to focus on the implementation.\n-\n-3. Submit a review of your proposed implementation. As noted in the\n-[New features \/ API additions](https:\/\/wiki.openjdk.java.net\/display\/OpenJFX\/Code+Reviews#CodeReviews-NewFeaturesC.Newfeatures\/APIadditions.)\n-section of the Code Review Policies doc, we also need a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main), which documents the API change and its approval.\n-The CSR can be reviewed in parallel. Changes in the API that arise during the review need to be reflected in the CSR, meaning\n-that the final review \/ approval of the CSR usually happens late in the review cycle.\n-\n-TIP: a pull request is _not_ the starting point, since that skips the first two important steps and jumps right into\n-\"given this new feature, and an API definition that specifies it, please review my proposed implementation\".\n","filename":"CONTRIBUTING.md","additions":47,"deletions":45,"binary":false,"changes":92,"status":"modified"}]}