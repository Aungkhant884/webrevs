{"files":[{"patch":"@@ -960,0 +960,1 @@\n+                        updateRemovedParentFocus(oldParent);\n@@ -8160,2 +8161,2 @@\n-        ((FocusPropertyBase)focusedProperty()).set(focused);\n-        ((FocusPropertyBase)focusVisibleProperty()).set(focused && focusVisible);\n+        this.focused.set(focused);\n+        this.focusVisible.set(focused && focusVisible);\n@@ -8170,2 +8171,2 @@\n-        ((FocusPropertyBase)focusedProperty()).notifyListeners();\n-        ((FocusPropertyBase)focusVisibleProperty()).notifyListeners();\n+        focused.notifyListeners();\n+        focusVisible.notifyListeners();\n@@ -8175,1 +8176,1 @@\n-            ((FocusPropertyBase)node.focusWithinProperty()).notifyListeners();\n+            node.focusWithin.notifyListeners();\n@@ -8180,0 +8181,18 @@\n+    \/**\n+     * Called when the current node was removed from the scene graph in order to clear\n+     * the focus bits of the former parents.\n+     *\/\n+    private void updateRemovedParentFocus(Node oldParent) {\n+        if (oldParent != null && focusWithin.get()) {\n+            Node node = oldParent;\n+            while (node != null) {\n+                node.focused.set(false);\n+                node.focusVisible.set(false);\n+                node.focusWithin.set(false);\n+                node = node.getParent();\n+            }\n+\n+            oldParent.notifyFocusListeners();\n+        }\n+    }\n+\n@@ -8189,1 +8208,33 @@\n-    private FocusPropertyBase focused;\n+    private final FocusPropertyBase focused = new FocusPropertyBase() {\n+        @Override\n+        protected PseudoClass getPseudoClass() {\n+            return FOCUSED_PSEUDOCLASS_STATE;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return \"focused\";\n+        }\n+\n+        @Override\n+        protected boolean notifyListeners() {\n+            if (super.notifyListeners()) {\n+                notifyAccessibleAttributeChanged(AccessibleAttribute.FOCUSED);\n+                return true;\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public void set(boolean value) {\n+            if (get() != value) {\n+                super.set(value);\n+\n+                Node node = Node.this;\n+                do {\n+                    node.focusWithin.set(value);\n+                    node = node.getParent();\n+                } while (node != null);\n+            }\n+        }\n+    };\n@@ -8197,1 +8248,1 @@\n-        return focused != null && focused.get();\n+        return focused.get();\n@@ -8201,35 +8252,0 @@\n-        if (focused == null) {\n-            focused = new FocusPropertyBase() {\n-                @Override\n-                protected PseudoClass getPseudoClass() {\n-                    return FOCUSED_PSEUDOCLASS_STATE;\n-                }\n-\n-                @Override\n-                public String getName() {\n-                    return \"focused\";\n-                }\n-\n-                @Override\n-                protected boolean notifyListeners() {\n-                    if (super.notifyListeners()) {\n-                        notifyAccessibleAttributeChanged(AccessibleAttribute.FOCUSED);\n-                        return true;\n-                    }\n-                    return false;\n-                }\n-\n-                @Override\n-                public void set(boolean value) {\n-                    if (get() != value) {\n-                        super.set(value);\n-\n-                        Node node = Node.this;\n-                        do {\n-                            ((FocusPropertyBase)node.focusWithinProperty()).set(value);\n-                            node = node.getParent();\n-                        } while (node != null);\n-                    }\n-                }\n-            };\n-        }\n@@ -8241,2 +8257,3 @@\n-     * This flag is set when a node acquires input focus via keyboard navigation,\n-     * and it is cleared when {@link #requestFocus()} is called.\n+     * This flag is set when the node acquires input focus via keyboard navigation,\n+     * and it is cleared when the node loses focus, or when {@link #requestFocus()}\n+     * is called.\n@@ -8245,1 +8262,1 @@\n-     * @since 17\n+     * @since 18\n@@ -8247,1 +8264,11 @@\n-    private FocusPropertyBase focusVisible;\n+    private final FocusPropertyBase focusVisible = new FocusPropertyBase() {\n+        @Override\n+        protected PseudoClass getPseudoClass() {\n+            return FOCUS_VISIBLE_PSEUDOCLASS_STATE;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return \"focusVisible\";\n+        }\n+    };\n@@ -8250,1 +8277,1 @@\n-        return focusVisible != null && focusVisible.get();\n+        return focusVisible.get();\n@@ -8254,13 +8281,0 @@\n-        if (focusVisible == null) {\n-            focusVisible = new FocusPropertyBase() {\n-                @Override\n-                protected PseudoClass getPseudoClass() {\n-                    return FOCUS_VISIBLE_PSEUDOCLASS_STATE;\n-                }\n-\n-                @Override\n-                public String getName() {\n-                    return \"focusVisible\";\n-                }\n-            };\n-        }\n@@ -8275,1 +8289,1 @@\n-     * @since 17\n+     * @since 18\n@@ -8277,1 +8291,11 @@\n-    private FocusPropertyBase focusWithin;\n+    private final FocusPropertyBase focusWithin = new FocusPropertyBase() {\n+        @Override\n+        protected PseudoClass getPseudoClass() {\n+            return FOCUS_WITHIN_PSEUDOCLASS_STATE;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return \"focusWithin\";\n+        }\n+    };\n@@ -8280,1 +8304,1 @@\n-        return focusWithin != null && focusWithin.get();\n+        return focusWithin.get();\n@@ -8284,13 +8308,0 @@\n-        if (focusWithin == null) {\n-            focusWithin = new FocusPropertyBase() {\n-                @Override\n-                protected PseudoClass getPseudoClass() {\n-                    return FOCUS_WITHIN_PSEUDOCLASS_STATE;\n-                }\n-\n-                @Override\n-                public String getName() {\n-                    return \"focusWithin\";\n-                }\n-            };\n-        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":87,"deletions":76,"binary":false,"changes":163,"status":"modified"},{"patch":"@@ -916,2 +916,19 @@\n-    \/\/ TODO: tests for moving nodes between scenes\n-    \/\/ and active and inactive stages\n+    \/**\n+     * When a focused node is removed from the scene graph, the focus states\n+     * of its former parents are cleared.\n+     *\/\n+    @Test public void testFocusStatesAreClearedFromFormerParentsOfFocusedNode() {\n+        Node node1 = n(), node2 = n();\n+        Group g2, g3, g1 = new Group(g2 = new Group(g3 = new Group(node1)), new Group(new Group(node2)));\n+        scene.setRoot(g1);\n+\n+        node1.requestFocus();\n+        assertIsFocusWithin(g1);\n+        assertIsFocusWithin(g2);\n+        assertIsFocusWithin(g3);\n+\n+        g2.getChildren().remove(0);\n+        assertNotFocusWithin(g1);\n+        assertNotFocusWithin(g2);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/FocusTest.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"}]}