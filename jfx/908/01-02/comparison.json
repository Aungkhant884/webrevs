{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.ref.WeakReference;\n@@ -29,1 +30,0 @@\n-\n@@ -206,0 +206,124 @@\n+    public IDisconnectable addWeakChangeListener(Runnable onChange, ObservableValue<?>... props) {\n+        return addWeakChangeListener(onChange, false, props);\n+    }\n+\n+    public IDisconnectable addWeakChangeListener(Runnable onChange, boolean fireImmediately, ObservableValue<?>... props) {\n+        if (onChange == null) {\n+            throw new NullPointerException(\"onChange must not be null.\");\n+        }\n+\n+        WeakReference<Runnable> ref = new WeakReference(onChange);\n+\n+        ChLi li = new ChLi() {\n+            @Override\n+            public void disconnect() {\n+                for (ObservableValue p : props) {\n+                    p.removeListener(this);\n+                }\n+                items.remove(this);\n+            }\n+\n+            @Override\n+            public void changed(ObservableValue p, Object oldValue, Object newValue) {\n+                Runnable r = ref.get();\n+                if (r == null) {\n+                    disconnect();\n+                } else {\n+                    r.run();\n+                }\n+            }\n+        };\n+\n+        items.add(li);\n+\n+        for (ObservableValue p : props) {\n+            p.addListener(li);\n+        }\n+\n+        if (fireImmediately) {\n+            onChange.run();\n+        }\n+\n+        return li;\n+    }\n+\n+    public <T> IDisconnectable addWeakChangeListener(ObservableValue<T> prop, ChangeListener<T> listener) {\n+        return addWeakChangeListener(prop, false, listener);\n+    }\n+\n+    public <T> IDisconnectable addWeakChangeListener(ObservableValue<T> prop, boolean fireImmediately, ChangeListener<T> listener) {\n+        if (listener == null) {\n+            throw new NullPointerException(\"Listener must be specified.\");\n+        }\n+\n+        WeakReference<ChangeListener<T>> ref = new WeakReference<>(listener);\n+\n+        ChLi<T> d = new ChLi<T>() {\n+            @Override\n+            public void disconnect() {\n+                prop.removeListener(this);\n+                items.remove(this);\n+            }\n+\n+            @Override\n+            public void changed(ObservableValue<? extends T> p, T oldValue, T newValue) {\n+                ChangeListener<T> li = ref.get();\n+                if (li == null) {\n+                    disconnect();\n+                } else {\n+                    li.changed(p, oldValue, newValue);\n+                }\n+            }\n+        };\n+\n+        items.add(d);\n+        prop.addListener(d);\n+\n+        if (fireImmediately) {\n+            T v = prop.getValue();\n+            listener.changed(prop, null, v);\n+        }\n+\n+        return d;\n+    }\n+\n+    public <T> IDisconnectable addWeakChangeListener(ObservableValue<T> prop, Consumer<T> callback) {\n+        return addWeakChangeListener(prop, false, callback);\n+    }\n+\n+    public <T> IDisconnectable addWeakChangeListener(ObservableValue<T> prop, boolean fireImmediately, Consumer<T> callback) {\n+        if (callback == null) {\n+            throw new NullPointerException(\"Callback must be specified.\");\n+        }\n+\n+        WeakReference<Consumer<T>> ref = new WeakReference<>(callback);\n+\n+        ChLi<T> d = new ChLi<T>() {\n+            @Override\n+            public void disconnect() {\n+                prop.removeListener(this);\n+                items.remove(this);\n+            }\n+\n+            @Override\n+            public void changed(ObservableValue<? extends T> observable, T oldValue, T newValue) {\n+                Consumer<T> cb = ref.get();\n+                if (cb == null) {\n+                    disconnect();\n+                } else {\n+                    cb.accept(newValue);\n+                }\n+            }\n+        };\n+\n+        items.add(d);\n+        prop.addListener(d);\n+\n+        if (fireImmediately) {\n+            T v = prop.getValue();\n+            callback.accept(v);\n+        }\n+\n+        return d;\n+    }\n+\n@@ -272,0 +396,83 @@\n+    public IDisconnectable addWeakInvalidationListener(Runnable onChange, ObservableValue<?>... props) {\n+        return addWeakInvalidationListener(onChange, false, props);\n+    }\n+\n+    public IDisconnectable addWeakInvalidationListener(Runnable onChange, boolean fireImmediately, ObservableValue<?>... props) {\n+        if (onChange == null) {\n+            throw new NullPointerException(\"onChange must not be null.\");\n+        }\n+\n+        WeakReference<Runnable> ref = new WeakReference(onChange);\n+\n+        InLi li = new InLi() {\n+            @Override\n+            public void disconnect() {\n+                for (ObservableValue p : props) {\n+                    p.removeListener(this);\n+                }\n+                items.remove(this);\n+            }\n+\n+            @Override\n+            public void invalidated(Observable p) {\n+                Runnable r = ref.get();\n+                if (r == null) {\n+                    disconnect();\n+                } else {\n+                    r.run();\n+                }\n+            }\n+        };\n+\n+        items.add(li);\n+\n+        for (ObservableValue p : props) {\n+            p.addListener(li);\n+        }\n+\n+        if (fireImmediately) {\n+            onChange.run();\n+        }\n+\n+        return li;\n+    }\n+\n+    public IDisconnectable addWeakInvalidationListener(ObservableValue<?> prop, InvalidationListener listener) {\n+        return addWeakInvalidationListener(prop, false, listener);\n+    }\n+\n+    public IDisconnectable addWeakInvalidationListener(ObservableValue<?> prop, boolean fireImmediately, InvalidationListener listener) {\n+        if (listener == null) {\n+            throw new NullPointerException(\"Listener must be specified.\");\n+        }\n+\n+        WeakReference<InvalidationListener> ref = new WeakReference<>(listener);\n+\n+        InLi d = new InLi() {\n+            @Override\n+            public void disconnect() {\n+                prop.removeListener(this);\n+                items.remove(this);\n+            }\n+\n+            @Override\n+            public void invalidated(Observable p) {\n+                InvalidationListener li = ref.get();\n+                if (li == null) {\n+                    disconnect();\n+                } else {\n+                    li.invalidated(p);\n+                }\n+            }\n+        };\n+\n+        items.add(d);\n+        prop.addListener(d);\n+\n+        if (fireImmediately) {\n+            listener.invalidated(prop);\n+        }\n+\n+        return d;\n+    }\n+\n@@ -293,0 +500,31 @@\n+    public <T> IDisconnectable addWeakListChangeListener(ObservableList<T> list, ListChangeListener<T> listener) {\n+        if (listener == null) {\n+            throw new NullPointerException(\"Listener must be specified.\");\n+        }\n+\n+        WeakReference<ListChangeListener<T>> ref = new WeakReference<>(listener);\n+\n+        LiChLi<T> li = new LiChLi<T>() {\n+            @Override\n+            public void disconnect() {\n+                list.removeListener(this);\n+                items.remove(this);\n+            }\n+\n+            @Override\n+            public void onChanged(Change<? extends T> ch) {\n+                ListChangeListener<T> li = ref.get();\n+                if (li == null) {\n+                    disconnect();\n+                } else {\n+                    li.onChanged(ch);\n+                }\n+            }\n+        };\n+\n+        items.add(li);\n+        list.addListener(li);\n+\n+        return li;\n+    }\n+\n@@ -341,0 +579,50 @@\n+    public <T extends Event> IDisconnectable addWeakEventHandler(Object x, EventType<T> t, EventHandler<T> h) {\n+        WeHa<T> li = new WeHa<T>(h) {\n+            @Override\n+            public void disconnect() {\n+                if (x instanceof Node n) {\n+                    n.removeEventHandler(t, this);\n+                } else if (x instanceof Window y) {\n+                    y.removeEventHandler(t, this);\n+                } else if (x instanceof Scene y) {\n+                    y.removeEventHandler(t, this);\n+                } else if (x instanceof MenuItem y) {\n+                    y.removeEventHandler(t, this);\n+                } else if (x instanceof TreeItem y) {\n+                    y.removeEventHandler(t, this);\n+                } else if (x instanceof TableColumnBase y) {\n+                    y.removeEventHandler(t, this);\n+                } else if (x instanceof Transform y) {\n+                    y.removeEventHandler(t, this);\n+                } else if (x instanceof Task y) {\n+                    y.removeEventHandler(t, this);\n+                }\n+                items.remove(this);\n+            }\n+        };\n+\n+        items.add(li);\n+\n+        if (x instanceof Node y) {\n+            y.addEventHandler(t, li);\n+        } else if (x instanceof Window y) {\n+            y.addEventHandler(t, li);\n+        } else if (x instanceof Scene y) {\n+            y.addEventHandler(t, li);\n+        } else if (x instanceof MenuItem y) {\n+            y.addEventHandler(t, li);\n+        } else if (x instanceof TreeItem y) {\n+            y.addEventHandler(t, li);\n+        } else if (x instanceof TableColumnBase y) {\n+            y.addEventHandler(t, li);\n+        } else if (x instanceof Transform y) {\n+            y.addEventHandler(t, li);\n+        } else if (x instanceof Task y) {\n+            y.addEventHandler(t, li);\n+        } else {\n+            throw new IllegalArgumentException(\"Cannot add weak event handler to \" + x);\n+        }\n+\n+        return li;\n+    }\n+\n@@ -376,0 +664,38 @@\n+    public <T extends Event> IDisconnectable addWeakEventFilter(Object x, EventType<T> t, EventHandler<? super T> h) {\n+        WeHa<T> li = new WeHa<T>(h) {\n+            @Override\n+            public void disconnect() {\n+                if (x instanceof Node n) {\n+                    n.removeEventFilter(t, this);\n+                } else if (x instanceof Window y) {\n+                    y.removeEventFilter(t, this);\n+                } else if (x instanceof Scene y) {\n+                    y.removeEventFilter(t, this);\n+                } else if (x instanceof Transform y) {\n+                    y.removeEventFilter(t, this);\n+                } else if (x instanceof Task y) {\n+                    y.removeEventFilter(t, this);\n+                }\n+                items.remove(this);\n+            }\n+        };\n+\n+        items.add(li);\n+\n+        if (x instanceof Node y) {\n+            y.addEventFilter(t, li);\n+        } else if (x instanceof Window y) {\n+            y.addEventFilter(t, li);\n+        } else if (x instanceof Scene y) {\n+            y.addEventFilter(t, li);\n+        } else if (x instanceof Transform y) {\n+            y.addEventFilter(t, li);\n+        } else if (x instanceof Task y) {\n+            y.addEventFilter(t, li);\n+        } else {\n+            throw new IllegalArgumentException(\"Cannot add weak event filter to \" + x);\n+        }\n+\n+        return li;\n+    }\n+\n@@ -383,0 +709,18 @@\n+\n+    protected static abstract class WeHa<T extends Event> implements IDisconnectable, EventHandler<T> {\n+        private final WeakReference<EventHandler<? super T>> ref;\n+\n+        public WeHa(EventHandler<? super T> h) {\n+            ref = new WeakReference<>(h);\n+        }\n+\n+        @Override\n+        public void handle(T ev) {\n+            EventHandler<? super T> h = ref.get();\n+            if (h == null) {\n+                disconnect();\n+            } else {\n+                h.handle(ev);\n+            }\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/ListenerHelper.java","additions":345,"deletions":1,"binary":false,"changes":346,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.ref.WeakReference;\n@@ -31,0 +32,1 @@\n+import java.util.function.Consumer;\n@@ -32,0 +34,1 @@\n+import javafx.beans.InvalidationListener;\n@@ -33,0 +36,1 @@\n+import javafx.beans.value.ChangeListener;\n@@ -37,0 +41,1 @@\n+import javafx.event.EventHandler;\n@@ -54,0 +59,1 @@\n+import test.util.memory.JMemoryBuddy;\n@@ -184,0 +190,132 @@\n+    @Test\n+    public void testWeakChangeListener_MultipleProperties() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p1 = new SimpleStringProperty();\n+        SimpleStringProperty p2 = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+        Runnable li = () -> ct.incrementAndGet();\n+        WeakReference<Runnable> ref = new WeakReference<>(li);\n+\n+        h.addWeakChangeListener(li, p1, p2);\n+\n+        p1.set(\"1\");\n+        p2.set(\"2\");\n+        assertEquals(2, ct.get());\n+\n+        li = null;\n+\n+        JMemoryBuddy.assertCollectable(ref);\n+\n+        p1.set(\"3\");\n+        p2.set(\"4\");\n+        assertEquals(2, ct.get());\n+    }\n+\n+    @Test\n+    public void testWeakChangeListener_MultipleProperties_FireImmediately() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p1 = new SimpleStringProperty();\n+        SimpleStringProperty p2 = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+        Runnable li = () -> ct.incrementAndGet();\n+        WeakReference<Runnable> ref = new WeakReference<>(li);\n+\n+        h.addWeakChangeListener(() -> ct.incrementAndGet(), true, p1, p2);\n+\n+        p1.set(\"1\");\n+        p2.set(\"2\");\n+        assertEquals(3, ct.get());\n+\n+        li = null;\n+\n+        JMemoryBuddy.assertCollectable(ref);\n+\n+        p1.set(\"3\");\n+        p2.set(\"4\");\n+        assertEquals(3, ct.get());\n+    }\n+\n+    @Test\n+    public void testWeakChangeListener_Plain() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+        ChangeListener<String> li = (src, old, cur) -> ct.incrementAndGet();\n+        WeakReference<ChangeListener<String>> ref = new WeakReference<>(li);\n+\n+        h.addWeakChangeListener(p, li);\n+\n+        p.set(\"1\");\n+        assertEquals(1, ct.get());\n+\n+        li = null;\n+\n+        JMemoryBuddy.assertCollectable(ref);\n+\n+        p.set(\"2\");\n+        assertEquals(1, ct.get());\n+    }\n+\n+    @Test\n+    public void testWeakChangeListener_Plain_FireImmediately() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+        ChangeListener<String> li = (src, old, cur) -> ct.incrementAndGet();\n+        WeakReference<ChangeListener<String>> ref = new WeakReference<>(li);\n+\n+        h.addWeakChangeListener(p, true, li);\n+\n+        p.set(\"1\");\n+        assertEquals(2, ct.get());\n+\n+        li = null;\n+\n+        JMemoryBuddy.assertCollectable(ref);\n+\n+        p.set(\"2\");\n+        assertEquals(2, ct.get());\n+    }\n+\n+    @Test\n+    public void testWeakChangeListener_Callback() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+        Consumer<String> li = (s) -> ct.incrementAndGet();\n+        WeakReference<Consumer<String>> ref = new WeakReference<>(li);\n+\n+        h.addWeakChangeListener(p, li);\n+\n+        p.set(\"1\");\n+        assertEquals(1, ct.get());\n+\n+        li = null;\n+\n+        JMemoryBuddy.assertCollectable(ref);\n+\n+        p.set(\"2\");\n+        assertEquals(1, ct.get());\n+    }\n+\n+    @Test\n+    public void testWeakChangeListener_Callback_FireImmediately() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+        Consumer<String> li = (s) -> ct.incrementAndGet();\n+        WeakReference<Consumer<String>> ref = new WeakReference<>(li);\n+\n+        h.addWeakChangeListener(p, true, li);\n+\n+        p.set(\"1\");\n+        assertEquals(2, ct.get());\n+\n+        li = null;\n+\n+        JMemoryBuddy.assertCollectable(ref);\n+\n+        p.set(\"2\");\n+        assertEquals(2, ct.get());\n+    }\n+\n@@ -294,0 +432,90 @@\n+    @Test\n+    public void testWeakInvalidationListener_MultipleProperties() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p1 = new SimpleStringProperty();\n+        SimpleStringProperty p2 = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+        Runnable li = () -> ct.incrementAndGet();\n+        WeakReference<Runnable> ref = new WeakReference<>(li);\n+\n+        h.addWeakInvalidationListener(li, p1, p2);\n+\n+        p1.set(\"1\");\n+        p2.set(\"2\");\n+        assertEquals(2, ct.get());\n+\n+        li = null;\n+\n+        JMemoryBuddy.assertCollectable(ref);\n+\n+        p1.set(\"3\");\n+        p2.set(\"4\");\n+        assertEquals(2, ct.get());\n+    }\n+\n+    @Test\n+    public void testWeakInvalidationListener_MultipleProperties_FireImmediately() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p1 = new SimpleStringProperty();\n+        SimpleStringProperty p2 = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+        Runnable li = () -> ct.incrementAndGet();\n+        WeakReference<Runnable> ref = new WeakReference<>(li);\n+\n+        h.addWeakInvalidationListener(() -> ct.incrementAndGet(), true, p1, p2);\n+\n+        p1.set(\"1\");\n+        p2.set(\"2\");\n+        assertEquals(3, ct.get());\n+\n+        li = null;\n+\n+        JMemoryBuddy.assertCollectable(ref);\n+\n+        p1.set(\"3\");\n+        p2.set(\"4\");\n+        assertEquals(3, ct.get());\n+    }\n+\n+    @Test\n+    public void testWeakInvalidationListener_Plain() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+        InvalidationListener li = (x) -> ct.incrementAndGet();\n+        WeakReference<InvalidationListener> ref = new WeakReference<>(li);\n+\n+        h.addWeakInvalidationListener(p, li);\n+\n+        p.set(\"1\");\n+        assertEquals(1, ct.get());\n+\n+        li = null;\n+\n+        JMemoryBuddy.assertCollectable(ref);\n+\n+        p.set(\"2\");\n+        assertEquals(1, ct.get());\n+    }\n+\n+    @Test\n+    public void testWeakInvalidationListener_Plain_FireImmediately() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+        InvalidationListener li = (x) -> ct.incrementAndGet();\n+        WeakReference<InvalidationListener> ref = new WeakReference<>(li);\n+\n+        h.addWeakInvalidationListener(p, true, li);\n+\n+        p.set(\"1\");\n+        assertEquals(2, ct.get());\n+\n+        li = null;\n+\n+        JMemoryBuddy.assertCollectable(ref);\n+\n+        p.set(\"2\");\n+        assertEquals(2, ct.get());\n+    }\n+\n@@ -314,0 +542,20 @@\n+    @Test\n+    public void testWeakListChangeListener() {\n+        ListenerHelper h = new ListenerHelper();\n+        ObservableList<String> list = FXCollections.observableArrayList();\n+        AtomicInteger ct = new AtomicInteger();\n+        ListChangeListener<String> li = (ch) -> ct.incrementAndGet();\n+        WeakReference<ListChangeListener<String>> ref = new WeakReference<>(li);\n+\n+        h.addWeakListChangeListener(list, li);\n+\n+        list.add(\"1\");\n+        assertEquals(1, ct.get());\n+\n+        li = null;\n+        JMemoryBuddy.assertCollectable(ref);\n+\n+        list.add(\"2\");\n+        assertEquals(1, ct.get());\n+    }\n+\n@@ -338,0 +586,25 @@\n+    @Test\n+    public void testWeakEventHandler() {\n+        EventTarget[] items = eventHandlerTargets();\n+\n+        for (EventTarget item : items) {\n+            ListenerHelper h = new ListenerHelper();\n+            AtomicInteger ct = new AtomicInteger();\n+            EventHandler<MouseEvent> li = (ev) -> ct.incrementAndGet();\n+            WeakReference<EventHandler<MouseEvent>> ref = new WeakReference(li);\n+\n+            h.addWeakEventHandler(item, MouseEvent.ANY, li);\n+\n+            MouseEvent ev = MouseEventGenerator.generateMouseEvent(MouseEvent.MOUSE_CLICKED, 0, 0);\n+            EventUtil.fireEvent(ev, item);\n+\n+            assertEquals(1, ct.get());\n+\n+            li = null;\n+            JMemoryBuddy.assertCollectable(ref);\n+\n+            EventUtil.fireEvent(ev, item);\n+            assertEquals(1, ct.get());\n+        }\n+    }\n+\n@@ -368,0 +641,25 @@\n+    @Test\n+    public void testWeakEventFilter() {\n+        EventTarget[] items = eventHandlerFilters();\n+\n+        for (EventTarget item : items) {\n+            ListenerHelper h = new ListenerHelper();\n+            AtomicInteger ct = new AtomicInteger();\n+            EventHandler<MouseEvent> li = (ev) -> ct.incrementAndGet();\n+            WeakReference<EventHandler<MouseEvent>> ref = new WeakReference(li);\n+\n+            h.addWeakEventFilter(item, MouseEvent.ANY, li);\n+\n+            MouseEvent ev = MouseEventGenerator.generateMouseEvent(MouseEvent.MOUSE_CLICKED, 0, 0);\n+            EventUtil.fireEvent(ev, item);\n+\n+            assertEquals(1, ct.get());\n+\n+            li = null;\n+            JMemoryBuddy.assertCollectable(ref);\n+\n+            EventUtil.fireEvent(ev, item);\n+            assertEquals(1, ct.get());\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TestListenerHelper.java","additions":298,"deletions":0,"binary":false,"changes":298,"status":"modified"}]}