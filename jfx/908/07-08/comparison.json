{"files":[{"patch":"@@ -25,0 +25,3 @@\n+\/\/ Original code is re-licensed to Oracle by the author.\n+\/\/ https:\/\/github.com\/andy-goryachev\/FxTextEditor\/blob\/master\/src\/goryachev\/common\/util\/Disconnectable.java\n+\/\/ Copyright © 2021-2022 Andy Goryachev <andy@goryachev.com>\n@@ -29,4 +32,0 @@\n- * <p>\n- * Original code is re-licensed to Oracle by the author.\n- * https:\/\/github.com\/andy-goryachev\/FxTextEditor\/blob\/master\/src\/goryachev\/common\/util\/Disconnectable.java\n- * Copyright © 2021-2022 Andy Goryachev <andy@goryachev.com>\n@@ -41,1 +40,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/IDisconnectable.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+\/\/ Original code is re-licensed to Oracle by the author.\n+\/\/ https:\/\/github.com\/andy-goryachev\/FxTextEditor\/blob\/master\/src\/goryachev\/fx\/FxDisconnector.java\n+\/\/ Copyright © 2021-2022 Andy Goryachev <andy@goryachev.com>\n@@ -66,4 +69,0 @@\n- * <p>\n- * Original code is re-licensed to Oracle by the author.\n- * https:\/\/github.com\/andy-goryachev\/FxTextEditor\/blob\/master\/src\/goryachev\/fx\/FxDisconnector.java\n- * Copyright © 2021-2022 Andy Goryachev <andy@goryachev.com>\n@@ -91,5 +90,0 @@\n-    public static void disconnect(SkinBase<?> skin) {\n-        ListenerHelper h = get(skin);\n-        h.disconnect();\n-    }\n-\n@@ -490,1 +484,1 @@\n-    protected static abstract class ChLi<T> implements IDisconnectable, ChangeListener<T> { }\n+    private static abstract class ChLi<T> implements IDisconnectable, ChangeListener<T> { }\n@@ -492,1 +486,1 @@\n-    protected static abstract class InLi implements IDisconnectable, InvalidationListener { }\n+    private static abstract class InLi implements IDisconnectable, InvalidationListener { }\n@@ -494,1 +488,1 @@\n-    protected static abstract class LiChLi<T> implements IDisconnectable, ListChangeListener<T> { }\n+    private static abstract class LiChLi<T> implements IDisconnectable, ListChangeListener<T> { }\n@@ -496,1 +490,1 @@\n-    protected static abstract class MaChLi<K,V> implements IDisconnectable, MapChangeListener<K,V> { }\n+    private static abstract class MaChLi<K,V> implements IDisconnectable, MapChangeListener<K,V> { }\n@@ -498,1 +492,1 @@\n-    protected static abstract class SeChLi<T> implements IDisconnectable, SetChangeListener<T> { }\n+    private static abstract class SeChLi<T> implements IDisconnectable, SetChangeListener<T> { }\n@@ -500,1 +494,1 @@\n-    protected abstract class EvHa<T extends Event> implements IDisconnectable, EventHandler<T> {\n+    private abstract class EvHa<T extends Event> implements IDisconnectable, EventHandler<T> {\n@@ -514,1 +508,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/ListenerHelper.java","additions":10,"deletions":16,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -224,2 +224,0 @@\n-     *\n-     * @since 20\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/SkinBase.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,15 +62,0 @@\n-    @Test\n-    public void testStaticDisconnect() {\n-        AtomicInteger ct = new AtomicInteger();\n-        LabelSkin skin = new LabelSkin(new Label(\"yo\"));\n-        ListenerHelper h = ListenerHelper.get(skin);\n-        assertNotNull(h);\n-\n-        h.addDisconnectable(() -> {\n-            ct.incrementAndGet();\n-        });\n-\n-        ListenerHelper.disconnect(skin);\n-        assertEquals(1, ct.get());\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TestListenerHelper.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"}]}