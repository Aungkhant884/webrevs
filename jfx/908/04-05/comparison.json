{"files":[{"patch":"@@ -30,1 +30,0 @@\n-\n@@ -36,0 +35,1 @@\n+import javafx.collections.MapChangeListener;\n@@ -37,0 +37,1 @@\n+import javafx.collections.ObservableMap;\n@@ -339,0 +340,28 @@\n+    \/\/ map change listener\n+\n+    public <K,V> IDisconnectable addMapChangeListener(ObservableMap<K,V> list, MapChangeListener<K,V> listener) {\n+        if (listener == null) {\n+            throw new NullPointerException(\"Listener must be specified.\");\n+        }\n+\n+        MaChLi<K,V> li = new MaChLi<K,V>() {\n+            @Override\n+            public void disconnect() {\n+                list.removeListener(this);\n+                items.remove(this);\n+            }\n+\n+            @Override\n+            public void onChanged(Change<? extends K, ? extends V> ch) {\n+                if (isAliveOrDisconnect()) {\n+                    listener.onChanged(ch);\n+                }\n+            }\n+        };\n+\n+        items.add(li);\n+        list.addListener(li);\n+\n+        return li;\n+    }\n+\n@@ -439,0 +468,2 @@\n+    protected static abstract class MaChLi<K,V> implements IDisconnectable, MapChangeListener<K,V> { }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/ListenerHelper.java","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-\n@@ -32,1 +31,3 @@\n-\n+import org.junit.Test;\n+import com.sun.javafx.event.EventUtil;\n+import com.sun.javafx.scene.control.ListenerHelper;\n@@ -36,0 +37,1 @@\n+import javafx.collections.MapChangeListener;\n@@ -37,0 +39,1 @@\n+import javafx.collections.ObservableMap;\n@@ -48,6 +51,0 @@\n-\n-import org.junit.Test;\n-\n-import com.sun.javafx.event.EventUtil;\n-import com.sun.javafx.scene.control.ListenerHelper;\n-\n@@ -345,0 +342,20 @@\n+    \/\/ map change listeners\n+\n+    @Test\n+    public void testMapChangeListener() {\n+        ListenerHelper h = new ListenerHelper();\n+        ObservableMap<String, String> m = FXCollections.observableHashMap();\n+        AtomicInteger ct = new AtomicInteger();\n+        MapChangeListener<String, String> li = (ch) -> ct.incrementAndGet();\n+\n+        h.addMapChangeListener(m, li);\n+\n+        m.put(\"1\", \"a\");\n+        assertEquals(1, ct.get());\n+\n+        h.disconnect();\n+\n+        m.put(\"2\", \"b\");\n+        assertEquals(1, ct.get());\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TestListenerHelper.java","additions":25,"deletions":8,"binary":false,"changes":33,"status":"modified"}]}