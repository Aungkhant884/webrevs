{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.text.BreakIterator;\n-\n@@ -36,5 +34,3 @@\n-\n-    private int charIndex;\n-    private boolean leading;\n-    private int insertionIndex;\n-    private String text;\n+    private final int charIndex;\n+    private final boolean leading;\n+    private final int insertionIndex;\n@@ -48,1 +44,1 @@\n-    HitInfo(int charIndex, int insertionIndex, boolean leading, String text) {\n+    HitInfo(int charIndex, int insertionIndex, boolean leading) {\n@@ -52,1 +48,0 @@\n-        this.text = text;\n@@ -59,1 +54,3 @@\n-    public int getCharIndex() { return charIndex; }\n+    public int getCharIndex() {\n+        return charIndex;\n+    }\n@@ -67,3 +64,3 @@\n-    public boolean isLeading() { return leading; }\n-\n-    private static BreakIterator charIterator = BreakIterator.getCharacterInstance();\n+    public boolean isLeading() {\n+        return leading;\n+    }\n@@ -76,20 +73,0 @@\n-        if (insertionIndex == -1) {\n-            insertionIndex = charIndex;\n-            if (!leading) {\n-                if (text != null) {\n-                    \/\/ Skip complex character clusters \/ ligatures.\n-                    int next;\n-                    synchronized(charIterator) {\n-                        charIterator.setText(text);\n-                        next = charIterator.following(insertionIndex);\n-                    }\n-                    if (next == BreakIterator.DONE) {\n-                        insertionIndex += 1;\n-                    } else {\n-                        insertionIndex = next;\n-                    }\n-                } else {\n-                    insertionIndex += 1;\n-                }\n-            }\n-        }\n@@ -99,2 +76,3 @@\n-    @Override public String toString() {\n-        return \"charIndex: \" + charIndex + \", isLeading: \" + leading + \", insertionIndex: \" + getInsertionIndex();\n+    @Override\n+    public String toString() {\n+        return \"charIndex: \" + charIndex + \", isLeading: \" + leading + \", insertionIndex: \" + insertionIndex;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/HitInfo.java","additions":14,"deletions":36,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1025,3 +1025,2 @@\n-        TextLayout.Hit layoutHit = layout.getHitInfo((float)x, (float)y);\n-        return new HitInfo(layoutHit.getCharIndex(), layoutHit.getInsertionIndex(),\n-                           layoutHit.isLeading(), getText());\n+        TextLayout.Hit h = layout.getHitInfo((float)x, (float)y);\n+        return new HitInfo(h.getCharIndex(), h.getInsertionIndex(), h.isLeading());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/Text.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -200,5 +200,4 @@\n-            double x = point.getX()\/* - getX()*\/;\n-            double y = point.getY()\/* - getY()\/* + getYRendering()*\/;\n-            TextLayout.Hit layoutHit = layout.getHitInfo((float)x, (float)y);\n-            return new HitInfo(layoutHit.getCharIndex(), layoutHit.getInsertionIndex(),\n-                               layoutHit.isLeading(), null\/*getText()*\/);\n+            double x = point.getX();\n+            double y = point.getY();\n+            TextLayout.Hit h = layout.getHitInfo((float)x, (float)y);\n+            return new HitInfo(h.getCharIndex(), h.getInsertionIndex(), h.isLeading());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/TextFlow.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"}]}