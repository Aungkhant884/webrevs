{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.text.BreakIterator;\n-\n@@ -36,5 +34,3 @@\n-\n-    private int charIndex;\n-    private boolean leading;\n-    private int insertionIndex;\n-    private String text;\n+    private final int charIndex;\n+    private final boolean leading;\n+    private final int insertionIndex;\n@@ -48,1 +44,1 @@\n-    HitInfo(int charIndex, int insertionIndex, boolean leading, String text) {\n+    HitInfo(int charIndex, int insertionIndex, boolean leading) {\n@@ -52,1 +48,0 @@\n-        this.text = text;\n@@ -59,1 +54,3 @@\n-    public int getCharIndex() { return charIndex; }\n+    public int getCharIndex() {\n+        return charIndex;\n+    }\n@@ -67,3 +64,3 @@\n-    public boolean isLeading() { return leading; }\n-\n-    private static BreakIterator charIterator = BreakIterator.getCharacterInstance();\n+    public boolean isLeading() {\n+        return leading;\n+    }\n@@ -76,20 +73,0 @@\n-        if (insertionIndex == -1) {\n-            insertionIndex = charIndex;\n-            if (!leading) {\n-                if (text != null) {\n-                    \/\/ Skip complex character clusters \/ ligatures.\n-                    int next;\n-                    synchronized(charIterator) {\n-                        charIterator.setText(text);\n-                        next = charIterator.following(insertionIndex);\n-                    }\n-                    if (next == BreakIterator.DONE) {\n-                        insertionIndex += 1;\n-                    } else {\n-                        insertionIndex = next;\n-                    }\n-                } else {\n-                    insertionIndex += 1;\n-                }\n-            }\n-        }\n@@ -99,2 +76,3 @@\n-    @Override public String toString() {\n-        return \"charIndex: \" + charIndex + \", isLeading: \" + leading + \", insertionIndex: \" + getInsertionIndex();\n+    @Override\n+    public String toString() {\n+        return \"charIndex: \" + charIndex + \", isLeading: \" + leading + \", insertionIndex: \" + insertionIndex;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/HitInfo.java","additions":14,"deletions":36,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1025,3 +1025,2 @@\n-        TextLayout.Hit layoutHit = layout.getHitInfo((float)x, (float)y);\n-        return new HitInfo(layoutHit.getCharIndex(), layoutHit.getInsertionIndex(),\n-                           layoutHit.isLeading(), getText());\n+        TextLayout.Hit h = layout.getHitInfo((float)x, (float)y);\n+        return new HitInfo(h.getCharIndex(), h.getInsertionIndex(), h.isLeading());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/Text.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -200,5 +200,4 @@\n-            double x = point.getX()\/* - getX()*\/;\n-            double y = point.getY()\/* - getY()\/* + getYRendering()*\/;\n-            TextLayout.Hit layoutHit = layout.getHitInfo((float)x, (float)y);\n-            return new HitInfo(layoutHit.getCharIndex(), layoutHit.getInsertionIndex(),\n-                               layoutHit.isLeading(), null\/*getText()*\/);\n+            double x = point.getX();\n+            double y = point.getY();\n+            TextLayout.Hit h = layout.getHitInfo((float)x, (float)y);\n+            return new HitInfo(h.getCharIndex(), h.getInsertionIndex(), h.isLeading());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/TextFlow.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Random;\n@@ -29,1 +30,0 @@\n-\n@@ -34,1 +34,0 @@\n-import javafx.scene.input.MouseEvent;\n@@ -36,0 +35,1 @@\n+import javafx.scene.input.MouseEvent;\n@@ -43,1 +43,0 @@\n-\n@@ -50,4 +49,0 @@\n-\n-import com.sun.javafx.PlatformUtil;\n-import com.sun.javafx.tk.Toolkit;\n-\n@@ -107,0 +102,1 @@\n+    static Random random;\n@@ -135,1 +131,1 @@\n-    private void moveMouseOverTextFlow(int x, int y) throws Exception {\n+    private void moveMouseOverTextFlow(double x, double y) throws Exception {\n@@ -210,1 +206,1 @@\n-        int index = 0;\n+        double x = 0.0;\n@@ -212,1 +208,1 @@\n-            moveMouseOverTextFlow(index, Y_OFFSET);\n+            moveMouseOverTextFlow(x, Y_OFFSET);\n@@ -218,1 +214,1 @@\n-            index += 5;\n+            x += step();\n@@ -228,1 +224,1 @@\n-        int index = 0;\n+        double x = 0.0;\n@@ -230,1 +226,1 @@\n-            moveMouseOverTextFlow(index, Y_OFFSET);\n+            moveMouseOverTextFlow(x, Y_OFFSET);\n@@ -238,1 +234,1 @@\n-            index += 5;\n+            x += step();\n@@ -249,1 +245,1 @@\n-        int index = 0;\n+        double x = 0.0;\n@@ -251,1 +247,1 @@\n-            moveMouseOverTextFlow(index, Y_OFFSET);\n+            moveMouseOverTextFlow(x, Y_OFFSET);\n@@ -259,1 +255,1 @@\n-            index += 5;\n+            x += step();\n@@ -268,3 +264,3 @@\n-        int index = 0;\n-        while (index < (HEIGHT - Y_OFFSET)) {\n-            moveMouseOverTextFlow(X_LEADING_OFFSET, (Y_OFFSET + index));\n+        double x = 0.0;\n+        while (x < (HEIGHT - Y_OFFSET)) {\n+            moveMouseOverTextFlow(X_LEADING_OFFSET, (Y_OFFSET + x));\n@@ -276,1 +272,1 @@\n-            index += 5;\n+            x += step();\n@@ -286,1 +282,1 @@\n-            for (int x = 0; x < (WIDTH - X_LEADING_OFFSET); x += 5) {\n+            for (double x = 0.0; x < (WIDTH - X_LEADING_OFFSET); x += step()) {\n@@ -314,0 +310,8 @@\n+\n+        Assert.assertTrue(insertionIndex >= 0);\n+        String s = hitInfo.toString();\n+        Assert.assertTrue(s != null);\n+    }\n+    \n+    private double step() {\n+        return 1.0 + random.nextDouble() * 8.0;\n@@ -332,0 +336,4 @@\n+        long seed = new Random().nextLong();\n+        System.out.println(\"seed=\" + seed);\n+        random = new Random(seed);\n+\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TextFlowSurrogatePairInsertionIndexTest.java","additions":30,"deletions":22,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.scene;\n+\n+import java.util.Random;\n+import java.util.concurrent.CountDownLatch;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.geometry.Bounds;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.text.Font;\n+import javafx.scene.text.HitInfo;\n+import javafx.scene.text.Text;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import test.util.Util;\n+\n+\/*\n+ * Verifies insertion index computation in Text in the presence of surrogate pairs.\n+ *\/\n+public class TextSurrogatePairInsertionIndexTest {\n+    private static final int FONT_SIZE = 36;\n+    private static final int WIDTH = 200;\n+    private static final int HEIGHT = FONT_SIZE * 7;\n+\n+    private static CountDownLatch startupLatch = new CountDownLatch(1);\n+    private static Random random;\n+    private static Text control;\n+    private static Stage stage;\n+    private static Scene scene;\n+    private static BorderPane content;\n+\n+    private void create(String text) {\n+        control = new Text(text);\n+        control.setFont(new Font(FONT_SIZE));\n+        content.setTop(control);\n+        control.wrappingWidthProperty().bind(content.widthProperty());\n+    }\n+\n+    \/**\n+     * Test tests HitInfo invariants randomly picking a point within the Text instance.\n+     *\/\n+    @Test\n+    public void testHitInfo() {\n+        Util.runAndWait(() -> {\n+            create(\"[This is text 😀😃😄\\n\\n😁😆 💙🦋🏁🔥]\");\n+        });\n+        Util.waitForIdle(scene);\n+\n+        Util.runAndWait(() -> {\n+            Bounds b = control.getLayoutBounds();\n+            Assert.assertTrue(b.getWidth() > 10);\n+            Assert.assertTrue(b.getHeight() > 10);\n+\n+            int max = 1_000_000;\n+            for (int i = 0; i < max; i++) {\n+                double x = random.nextDouble() * b.getWidth();\n+                double y = random.nextDouble() * b.getHeight();\n+                HitInfo h = control.hitTest(new Point2D(x, y));\n+\n+                Assert.assertTrue(h.getInsertionIndex() >= 0);\n+                String s = h.toString();\n+                Assert.assertTrue(s != null);\n+            }\n+        });\n+    }\n+\n+    @BeforeClass\n+    public static void initFX() {\n+        long seed = new Random().nextLong();\n+        System.out.println(\"seed=\" + seed);\n+        random = new Random(seed);\n+\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void exit() {\n+        Util.shutdown(stage);\n+    }\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) {\n+            stage = primaryStage;\n+\n+            content = new BorderPane();\n+            scene = new Scene(content, WIDTH, HEIGHT);\n+            stage.setScene(scene);\n+            stage.initStyle(StageStyle.UNDECORATED);\n+            stage.setOnShown(event -> Platform.runLater(startupLatch::countDown));\n+            stage.setAlwaysOnTop(true);\n+            stage.show();\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TextSurrogatePairInsertionIndexTest.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}