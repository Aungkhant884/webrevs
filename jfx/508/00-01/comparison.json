{"files":[{"patch":"@@ -309,1 +309,2 @@\n-                    if (!\"image\".equalsIgnoreCase(dataUri.getMimeType())) {\n+                    String mimeType = dataUri.getMimeType();\n+                    if (mimeType != null && !\"image\".equalsIgnoreCase(dataUri.getMimeType())) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/ImageStorage.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,0 +39,5 @@\n+    \/**\n+     * Returns whether the string has the form of a valid data URI, but does not try\n+     * to decode the URI data. If this method returns {@code true}, parsing the URI\n+     * with {@link #tryParse(String)} might still fail if the data is invalid.\n+     *\/\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/util\/DataURI.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -611,1 +611,8 @@\n-     * url.\n+     * image file. The {@code url} parameter can be one of the following:\n+     * <ol>\n+     *     <li>a file path that is a valid argument for {@link java.io.File#File(String)}\n+     *     <li>an URL that is a valid argument for {@link java.net.URL#URL(String)}\n+     *     <li>a Data-URI that contains the image data\n+     * <\/ol>\n+     * If a Data-URI is specified, the data must be base64-encoded and the\n+     * MIME type must either be empty or a subtype of the {@code image\/} type.\n@@ -613,4 +620,3 @@\n-     * @param url the string representing the URL to use in fetching the pixel\n-     *      data\n-     * @throws NullPointerException if URL is null\n-     * @throws IllegalArgumentException if URL is invalid or unsupported\n+     * @param url a file path, URL, or Data-URI\n+     * @throws NullPointerException if {@code url} is null\n+     * @throws IllegalArgumentException if {@code url} is invalid or unsupported\n@@ -624,1 +630,10 @@\n-     * Constructs a new {@code Image} with the specified parameters.\n+     * Constructs a new {@code Image} with the specified parameters and content\n+     * loaded from the specified image file. The {@code url} parameter can be one\n+     * of the following:\n+     * <ol>\n+     *     <li>a file path that is a valid argument for {@link java.io.File#File(String)}\n+     *     <li>an URL that is a valid argument for {@link java.net.URL#URL(String)}\n+     *     <li>a Data-URI that contains the image data\n+     * <\/ol>\n+     * If a Data-URI is specified, the data must be base64-encoded and the\n+     * MIME type must either be empty or a subtype of the {@code image\/} type.\n@@ -626,2 +641,1 @@\n-     * @param url the string representing the URL to use in fetching the pixel\n-     *      data\n+     * @param url a file path, URL, or Data-URI\n@@ -630,2 +644,2 @@\n-     * @throws NullPointerException if URL is null\n-     * @throws IllegalArgumentException if URL is invalid or unsupported\n+     * @throws NullPointerException if {@code url} is null\n+     * @throws IllegalArgumentException if {@code url} is invalid or unsupported\n@@ -639,1 +653,10 @@\n-     * Constructs a new {@code Image} with the specified parameters.\n+     * Constructs a new {@code Image} with the specified parameters and content\n+     * loaded from the specified image file. The {@code url} parameter can be one\n+     * of the following:\n+     * <ol>\n+     *     <li>a file path that is a valid argument for {@link java.io.File#File(String)}\n+     *     <li>an URL that is a valid argument for {@link java.net.URL#URL(String)}\n+     *     <li>a Data-URI that contains the image data\n+     * <\/ol>\n+     * If a Data-URI is specified, the data must be base64-encoded and the\n+     * MIME type must either be empty or a subtype of the {@code image\/} type.\n@@ -641,2 +664,1 @@\n-     * @param url the string representing the URL to use in fetching the pixel\n-     *      data\n+     * @param url a file path, URL, or Data-URI\n@@ -651,2 +673,2 @@\n-     * @throws NullPointerException if URL is null\n-     * @throws IllegalArgumentException if URL is invalid or unsupported\n+     * @throws NullPointerException if {@code url} is null\n+     * @throws IllegalArgumentException if {@code url} is invalid or unsupported\n@@ -662,1 +684,10 @@\n-     * Constructs a new {@code Image} with the specified parameters.\n+     * Constructs a new {@code Image} with the specified parameters and content\n+     * loaded from the specified image file. The {@code url} parameter can be one\n+     * of the following:\n+     * <ol>\n+     *     <li>a file path that is a valid argument for {@link java.io.File#File(String)}\n+     *     <li>an URL that is a valid argument for {@link java.net.URL#URL(String)}\n+     *     <li>a Data-URI that contains the image data\n+     * <\/ol>\n+     * If a Data-URI is specified, the data must be base64-encoded and the\n+     * MIME type must either be empty or a subtype of the {@code image\/} type.\n@@ -664,6 +695,1 @@\n-     * The <i>url<\/i> without scheme is threated as relative to classpath,\n-     * url with scheme is treated accordingly to the scheme using\n-     * {@link URL#openStream()}\n-     *\n-     * @param url the string representing the URL to use in fetching the pixel\n-     *      data\n+     * @param url a file path, URL, or Data-URI\n@@ -680,2 +706,2 @@\n-     * @throws NullPointerException if URL is null\n-     * @throws IllegalArgumentException if URL is invalid or unsupported\n+     * @throws NullPointerException if {@code url} is null\n+     * @throws IllegalArgumentException if {@code url} is invalid or unsupported\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/image\/Image.java","additions":50,"deletions":24,"binary":false,"changes":74,"status":"modified"}]}