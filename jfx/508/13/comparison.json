{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import com.sun.javafx.util.DataURI;\n@@ -770,1 +771,6 @@\n-                                logger.warning(\"Error loading image: \" + url);\n+                                DataURI dataUri = DataURI.tryParse(url);\n+                                if (dataUri != null) {\n+                                    logger.warning(\"Error loading image: \" + dataUri);\n+                                } else {\n+                                    logger.warning(\"Error loading image: \" + url);\n+                                }\n@@ -774,3 +780,2 @@\n-                        imageCache.put(url, new SoftReference(image));\n-\n-                    } catch (IllegalArgumentException iae) {\n+                        imageCache.put(url, new SoftReference<>(image));\n+                    } catch (IllegalArgumentException | NullPointerException ex) {\n@@ -780,7 +785,1 @@\n-                            logger.warning(iae.getLocalizedMessage());\n-                        }\n-                    } catch (NullPointerException npe) {\n-                        \/\/ url was null!\n-                        final PlatformLogger logger = getLogger();\n-                        if (logger != null && logger.isLoggable(Level.WARNING)) {\n-                            logger.warning(npe.getLocalizedMessage());\n+                            logger.warning(ex.getLocalizedMessage());\n@@ -788,1 +787,2 @@\n-                    }\n+                    } \/\/ url was null!\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/StyleManager.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,2 @@\n+import com.sun.javafx.util.DataURI;\n+\n@@ -37,1 +39,0 @@\n-import java.io.EOFException;\n@@ -289,1 +290,1 @@\n-     * {@link #loadAll(java.io.InputStream, com.sun.javafx.iio.ImageLoadListener, int, int, boolean, boolean)}.\n+     * {@link #loadAll(InputStream, ImageLoadListener, double, double, boolean, float, boolean)}.\n@@ -306,1 +307,9 @@\n-                if (devPixelScale >= 1.5f) {\n+                DataURI dataUri = DataURI.tryParse(input);\n+                if (dataUri != null) {\n+                    String mimeType = dataUri.getMimeType();\n+                    if (mimeType != null && !\"image\".equalsIgnoreCase(dataUri.getMimeType())) {\n+                        throw new IllegalArgumentException(\"Unexpected MIME type: \" + dataUri.getMimeType());\n+                    }\n+\n+                    theStream = new ByteArrayInputStream(dataUri.getData());\n+                } else if (devPixelScale >= 1.5f) {\n@@ -312,1 +321,1 @@\n-                    } catch (IOException e) {\n+                    } catch (IOException ignored) {\n@@ -324,1 +333,1 @@\n-            } catch (IOException e) {\n+            } catch (Exception e) {\n@@ -341,1 +350,1 @@\n-            } catch (IOException e) {\n+            } catch (IOException ignored) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/ImageStorage.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,225 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.util;\n+\n+import java.net.URLDecoder;\n+import java.nio.charset.Charset;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class DataURI {\n+\n+    \/**\n+     * Determines whether the specified URI uses the \"data\" scheme.\n+     *\/\n+    public static boolean matchScheme(String uri) {\n+        if (uri == null || uri.length() < 6) {\n+            return false;\n+        }\n+\n+        int firstNonWhitespace = 0, length = uri.length();\n+\n+        while (firstNonWhitespace < length) {\n+            if (!Character.isWhitespace(uri.charAt(firstNonWhitespace))) {\n+                break;\n+            }\n+\n+            ++firstNonWhitespace;\n+        }\n+\n+        if (length < firstNonWhitespace + 6) {\n+            return false;\n+        }\n+\n+        return \"data:\".equalsIgnoreCase(uri.substring(firstNonWhitespace, firstNonWhitespace + 5));\n+    }\n+\n+    \/**\n+     * Parses the specified URI if it uses the \"data\" scheme.\n+     *\n+     * @return a {@link DataURI} instance if {@code uri} uses the \"data\" scheme, {@code null} otherwise\n+     * @throws IllegalArgumentException if the URI is malformed\n+     *\/\n+    public static DataURI tryParse(String uri) {\n+        if (!matchScheme(uri)) {\n+            return null;\n+        }\n+\n+        if (Character.isWhitespace(uri.charAt(0))) {\n+            uri = uri.trim();\n+        }\n+\n+        int dataSeparator = uri.indexOf(',', 5);\n+        if (dataSeparator < 0) {\n+            throw new IllegalArgumentException(\"Invalid URI: \" + uri);\n+        }\n+\n+        String mimeType = \"text\", mimeSubtype = \"plain\";\n+        boolean base64 = false;\n+\n+        String[] headers = uri.substring(5, dataSeparator).split(\";\");\n+        Map<String, String> nameValuePairs = Collections.emptyMap();\n+\n+        if (headers.length > 0) {\n+            int start = 0;\n+\n+            int mimeSeparator = headers[0].indexOf('\/');\n+            if (mimeSeparator > 0) {\n+                mimeType = headers[0].substring(0, mimeSeparator);\n+                mimeSubtype = headers[0].substring(mimeSeparator + 1);\n+                start = 1;\n+            }\n+\n+            for (int i = start; i < headers.length; ++i) {\n+                String header = headers[i];\n+                int separator = header.indexOf('=');\n+                if (separator < 0) {\n+                    if (i < headers.length - 1) {\n+                        throw new IllegalArgumentException(\"Invalid URI: \" + uri);\n+                    }\n+\n+                    base64 = \"base64\".equalsIgnoreCase(headers[headers.length - 1]);\n+                } else {\n+                    if (nameValuePairs.isEmpty()) {\n+                        nameValuePairs = new HashMap<>();\n+                    }\n+\n+                    nameValuePairs.put(header.substring(0, separator).toLowerCase(), header.substring(separator + 1));\n+                }\n+            }\n+        }\n+\n+        String data = uri.substring(dataSeparator + 1);\n+        Charset charset = Charset.defaultCharset();\n+\n+        return new DataURI(\n+            uri,\n+            data,\n+            mimeType,\n+            mimeSubtype,\n+            nameValuePairs,\n+            base64,\n+            base64 ?\n+                Base64.getDecoder().decode(data) :\n+                URLDecoder.decode(data.replace(\"+\", \"%2B\"), charset).getBytes(charset));\n+    }\n+\n+    private final String originalUri;\n+    private final String originalData;\n+    private final String mimeType, mimeSubtype;\n+    private final Map<String, String> parameters;\n+    private final boolean base64;\n+    private final byte[] data;\n+\n+    private DataURI(\n+            String originalUri,\n+            String originalData,\n+            String mimeType,\n+            String mimeSubtype,\n+            Map<String, String> parameters,\n+            boolean base64,\n+            byte[] decodedData) {\n+        this.originalUri = originalUri;\n+        this.originalData = originalData;\n+        this.mimeType = mimeType;\n+        this.mimeSubtype = mimeSubtype;\n+        this.parameters = parameters;\n+        this.base64 = base64;\n+        this.data = decodedData;\n+    }\n+\n+    \/**\n+     * Returns the MIME type that was specified in the URI.\n+     * If no MIME type was specified, returns \"text\".\n+     *\/\n+    public String getMimeType() {\n+        return mimeType;\n+    }\n+\n+    \/**\n+     * Returns the MIME subtype that was specified in the URI.\n+     * If no MIME subtype was specified, returns \"plain\".\n+     *\/\n+    public String getMimeSubtype() {\n+        return mimeSubtype;\n+    }\n+\n+    \/**\n+     * Returns the key-value parameter pairs that were specified in the URI.\n+     *\/\n+    public Map<String, String> getParameters() {\n+        return parameters;\n+    }\n+\n+    \/**\n+     * Returns whether the data in the URI is Base64-encoded.\n+     * If {@code false}, the data is implied to be URL-encoded.\n+     *\/\n+    public boolean isBase64() {\n+        return base64;\n+    }\n+\n+    \/**\n+     * Returns the data that is encoded in this URI.\n+     * <p>Note that repeated calls to this method will return the same array instance.\n+     *\/\n+    public byte[] getData() {\n+        return data;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        if (originalData.length() < 30) {\n+            return originalUri;\n+        }\n+\n+        return originalUri.substring(0, originalUri.length() - originalData.length())\n+            + originalData.substring(0, 14) + \"...\" + originalData.substring(originalData.length() - 14);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (!(o instanceof DataURI)) return false;\n+        DataURI dataURI = (DataURI)o;\n+        return base64 == dataURI.base64\n+            && Objects.equals(mimeType, dataURI.mimeType)\n+            && Objects.equals(mimeSubtype, dataURI.mimeSubtype)\n+            && Arrays.equals(data, dataURI.data);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = Objects.hash(mimeType, mimeSubtype, base64);\n+        result = 31 * result + Arrays.hashCode(data);\n+        return result;\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/util\/DataURI.java","additions":225,"deletions":0,"binary":false,"changes":225,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import com.sun.javafx.util.DataURI;\n@@ -75,0 +76,1 @@\n+        resource = resource != null ? resource.trim() : null;\n@@ -76,2 +78,1 @@\n-        if (resource != null && resource.trim().isEmpty() == false) {\n-\n+        if (resource != null && !resource.isEmpty()) {\n@@ -84,2 +85,5 @@\n-            String stylesheetURL = values.length > 1 && values[1] != null ? (String)values[1].getValue() : null;\n-            URL resolvedURL = resolve(stylesheetURL, resource);\n+            if (DataURI.matchScheme(resource)) {\n+                url = resource;\n+            } else if (!resource.isEmpty()) {\n+                String stylesheetURL = values.length > 1 && values[1] != null ? (String) values[1].getValue() : null;\n+                URL resolvedURL = resolve(stylesheetURL, resource);\n@@ -87,1 +91,2 @@\n-            if (resolvedURL != null) url = resolvedURL.toExternalForm();\n+                if (resolvedURL != null) url = resolvedURL.toExternalForm();\n+            }\n@@ -93,7 +98,1 @@\n-    \/\/ package for testing\n-    URL resolve(String stylesheetUrl, String resource) {\n-\n-\n-        final String resourcePath = (resource != null) ? resource.trim() : null;\n-        if (resourcePath == null || resourcePath.isEmpty()) return null;\n-\n+    private URL resolve(String stylesheetUrl, String resource) {\n@@ -101,1 +100,0 @@\n-\n@@ -106,1 +104,1 @@\n-            URI resourceUri = new URI(resourcePath);\n+            URI resourceUri = new URI(resource);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/converter\/URLConverter.java","additions":13,"deletions":15,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.io.File;\n@@ -58,0 +59,1 @@\n+import com.sun.javafx.util.DataURI;\n@@ -66,3 +68,1 @@\n- * <p>\n- * Supported image formats are:\n- * <\/p>\n+ * <p>Supported image formats are:\n@@ -76,2 +76,1 @@\n- * <p>\n- * Images can be resized as they are loaded (for example to reduce the amount of\n+ * <p>Images can be resized as they are loaded (for example to reduce the amount of\n@@ -81,1 +80,0 @@\n- * <\/p>\n@@ -83,5 +81,15 @@\n- * <p>\n- * All URLs supported by {@link URL} can be passed to the constructor.\n- * If the passed string is not a valid URL, but a path instead, the Image is\n- * searched on the classpath in that case.\n- * <\/p>\n+ * <p>If a URL string is passed to a constructor, it be any of the following:\n+ * <ol>\n+ *     <li>the name of a resource that can be resolved by the context\n+ *         {@link ClassLoader} for this thread\n+ *     <li>a file path that can be resolved by {@link java.io.File}\n+ *     <li>a URL that can be resolved by {@link java.net.URL} and for\n+ *         which a protocol handler exists\n+ * <\/ol>\n+ *\n+ * <p>The RFC 2397 \"data\" scheme for URLs is supported in addition to\n+ * the protocol handlers that are registered for the application.\n+ *\n+ * <p>If a URL uses the \"data\" scheme, the data must be base64-encoded\n+ * and the MIME type must either be empty or a subtype of the\n+ * {@code image} type.\n@@ -91,1 +99,1 @@\n- * {@code ImageView}s.<\/p>\n+ * {@code ImageView}s.\n@@ -93,1 +101,1 @@\n- *<p>Example code for loading images.<\/p>\n+ *<p>Example code for loading images:\n@@ -609,2 +617,1 @@\n-     * Constructs an {@code Image} with content loaded from the specified\n-     * url.\n+     * Constructs an {@code Image} with content loaded from the specified URL.\n@@ -612,4 +619,3 @@\n-     * @param url the string representing the URL to use in fetching the pixel\n-     *      data\n-     * @throws NullPointerException if URL is null\n-     * @throws IllegalArgumentException if URL is invalid or unsupported\n+     * @param url a resource path, file path or URL\n+     * @throws NullPointerException if {@code url} is null\n+     * @throws IllegalArgumentException if {@code url} is invalid or unsupported\n@@ -623,1 +629,2 @@\n-     * Constructs a new {@code Image} with the specified parameters.\n+     * Constructs an {@code Image} with content loaded from the specified URL\n+     * using the specified parameters.\n@@ -625,2 +632,1 @@\n-     * @param url the string representing the URL to use in fetching the pixel\n-     *      data\n+     * @param url a resource path, file path or URL\n@@ -629,2 +635,2 @@\n-     * @throws NullPointerException if URL is null\n-     * @throws IllegalArgumentException if URL is invalid or unsupported\n+     * @throws NullPointerException if {@code url} is null\n+     * @throws IllegalArgumentException if {@code url} is invalid or unsupported\n@@ -638,1 +644,2 @@\n-     * Constructs a new {@code Image} with the specified parameters.\n+     * Constructs an {@code Image} with content loaded from the specified URL\n+     * using the specified parameters.\n@@ -640,2 +647,1 @@\n-     * @param url the string representing the URL to use in fetching the pixel\n-     *      data\n+     * @param url a resource path, file path or URL\n@@ -650,2 +656,2 @@\n-     * @throws NullPointerException if URL is null\n-     * @throws IllegalArgumentException if URL is invalid or unsupported\n+     * @throws NullPointerException if {@code url} is null\n+     * @throws IllegalArgumentException if {@code url} is invalid or unsupported\n@@ -661,1 +667,2 @@\n-     * Constructs a new {@code Image} with the specified parameters.\n+     * Constructs an {@code Image} with content loaded from the specified URL\n+     * using the specified parameters.\n@@ -663,6 +670,1 @@\n-     * The <i>url<\/i> without scheme is threated as relative to classpath,\n-     * url with scheme is treated accordingly to the scheme using\n-     * {@link URL#openStream()}\n-     *\n-     * @param url the string representing the URL to use in fetching the pixel\n-     *      data\n+     * @param url a resource path, file path or URL\n@@ -679,2 +681,2 @@\n-     * @throws NullPointerException if URL is null\n-     * @throws IllegalArgumentException if URL is invalid or unsupported\n+     * @throws NullPointerException if {@code url} is null\n+     * @throws IllegalArgumentException if {@code url} is invalid or unsupported\n@@ -1120,0 +1122,6 @@\n+            } else if (DataURI.matchScheme(url)) {\n+                return url;\n+            }\n+\n+            if (new File(url).exists()) {\n+                return url;\n@@ -1121,0 +1129,1 @@\n+\n@@ -1123,4 +1132,1 @@\n-        } catch (final IllegalArgumentException e) {\n-            throw new IllegalArgumentException(\n-                    constructDetailedExceptionMessage(\"Invalid URL\", e), e);\n-        } catch (final MalformedURLException e) {\n+        } catch (final IllegalArgumentException | MalformedURLException e) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/image\/Image.java","additions":49,"deletions":43,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -122,0 +122,11 @@\n+    @Test\n+    public void testConvertWithDataURI() {\n+        String dataUri = \"data:text\/plain;charset=utf-8;base64,SGVsbG8sIFdvcmxkIQ==\";\n+\n+        ParsedValue[] values = new ParsedValue[] { new ParsedValueImpl<String,String>(dataUri, null) };\n+        ParsedValueImpl<ParsedValue[], String> value = new ParsedValueImpl<>(values, URLConverter.getInstance());\n+\n+        String result = value.convert(null);\n+        assertEquals(dataUri, result);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/converters\/URLConverterTest.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -202,0 +202,24 @@\n+\n+    @Test\n+    public void testLoadImageFromDataURI() throws ImageStorageException {\n+        String url =\n+            \"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABQAAAAKCAIAAAA7N+mxAAAAAXNSR0IArs4c6QAAAAR\"\n+            + \"nQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAcSURBVChTY\/jPwADBZACyNMHAqGYSwZDU\/P8\/AB\"\n+            + \"ieT81GAGKoAAAAAElFTkSuQmCC\";\n+\n+        ImageFrame[] frames = ImageStorage.loadAll(url, null, 20, 10, false, 1, false);\n+        assertEquals(1, frames.length);\n+\n+        byte[] data = (byte[])frames[0].getImageData().array();\n+        assertEquals(-1, data[0]);\n+        assertEquals(0, data[1]);\n+        assertEquals(0, data[2]);\n+\n+        assertEquals(0, data[3]);\n+        assertEquals(-1, data[4]);\n+        assertEquals(0, data[5]);\n+\n+        assertEquals(0, data[6]);\n+        assertEquals(0, data[7]);\n+        assertEquals(-1, data[8]);\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/iio\/ImageStorageTest.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,177 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.util;\n+\n+import com.sun.javafx.util.DataURI;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+public class DataURITest {\n+\n+    @Test\n+    public void testMissingDataSeparatorIsInvalid() {\n+        String data = \"data:\";\n+        DataURI uri = DataURI.tryParse(data);\n+        assertFalse(DataURI.matchScheme(data));\n+        assertNull(uri);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testParametersListWithoutKeyValuePairsIsInvalid() {\n+        String data = \"data:foo;bar;baz,\";\n+        assertTrue(DataURI.matchScheme(data));\n+        DataURI uri = DataURI.tryParse(data);\n+    }\n+\n+    @Test\n+    public void testEmptyDataBase64EncodedIsValid() {\n+        String data = \"data:base64,\";\n+        DataURI uri = DataURI.tryParse(data);\n+        assertTrue(DataURI.matchScheme(data));\n+        assertNotNull(uri);\n+        assertTrue(uri.isBase64());\n+        assertEquals(0, uri.getData().length);\n+    }\n+\n+    @Test\n+    public void testDataSchemeIsAcceptedCaseInvariant() {\n+        String data = \"DATA:,\";\n+        DataURI uri = DataURI.tryParse(data);\n+        assertTrue(DataURI.matchScheme(data));\n+        assertNotNull(uri);\n+        assertEquals(\"text\", uri.getMimeType());\n+        assertEquals(\"plain\", uri.getMimeSubtype());\n+        assertEquals(0, uri.getParameters().size());\n+        assertEquals(0, uri.getData().length);\n+    }\n+\n+    @Test\n+    public void testBase64TokenIsAcceptedCaseInvariant() {\n+        String data = \"data:BASE64,\";\n+        DataURI uri = DataURI.tryParse(data);\n+        assertTrue(DataURI.matchScheme(data));\n+        assertNotNull(uri);\n+        assertTrue(uri.isBase64());\n+        assertEquals(0, uri.getData().length);\n+    }\n+\n+    @Test\n+    public void testLeadingOrTrailingWhitespaceIsAcceptable() {\n+        String data = \"  data:,foo  \";\n+        DataURI uri = DataURI.tryParse(data);\n+        assertTrue(DataURI.matchScheme(data));\n+        assertNotNull(uri);\n+        assertEquals(3, uri.getData().length);\n+    }\n+\n+    @Test\n+    public void testParseTextPlain() {\n+        String data = \"data:,Hello%2C%20World!\";\n+        DataURI uri = DataURI.tryParse(data);\n+        assertTrue(DataURI.matchScheme(data));\n+        assertNotNull(uri);\n+        assertFalse(uri.isBase64());\n+        assertEquals(\"text\", uri.getMimeType());\n+        assertEquals(\"plain\", uri.getMimeSubtype());\n+        assertEquals(0, uri.getParameters().size());\n+        assertEquals(\"Hello, World!\", new String(uri.getData()));\n+    }\n+\n+    @Test\n+    public void testParseTextPlainBase64Encoded() {\n+        String data = \"data:text\/plain;base64,SGVsbG8sIFdvcmxkIQ==\";\n+        DataURI uri = DataURI.tryParse(data);\n+        assertTrue(DataURI.matchScheme(data));\n+        assertNotNull(uri);\n+        assertTrue(uri.isBase64());\n+        assertEquals(\"text\", uri.getMimeType());\n+        assertEquals(\"plain\", uri.getMimeSubtype());\n+        assertEquals(0, uri.getParameters().size());\n+        assertEquals(\"Hello, World!\", new String(uri.getData()));\n+    }\n+\n+    @Test\n+    public void testParseTextHtmlWithParameter() {\n+        String data = \"data:text\/html;foo=bar,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E\";\n+        DataURI uri = DataURI.tryParse(data);\n+        assertTrue(DataURI.matchScheme(data));\n+        assertNotNull(uri);\n+        assertFalse(uri.isBase64());\n+        assertEquals(\"text\", uri.getMimeType());\n+        assertEquals(\"html\", uri.getMimeSubtype());\n+        assertEquals(1, uri.getParameters().size());\n+        assertEquals(\"bar\", uri.getParameters().get(\"foo\"));\n+        assertEquals(\"<h1>Hello, World!<\/h1>\", new String(uri.getData()));\n+    }\n+\n+    @Test\n+    public void testParseTextHtmlWithMultipleParameters() {\n+        String data = \"data:text\/html;foo=bar;baz=qux,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E\";\n+        DataURI uri = DataURI.tryParse(data);\n+        assertTrue(DataURI.matchScheme(data));\n+        assertNotNull(uri);\n+        assertFalse(uri.isBase64());\n+        assertEquals(\"text\", uri.getMimeType());\n+        assertEquals(\"html\", uri.getMimeSubtype());\n+        assertEquals(2, uri.getParameters().size());\n+        assertEquals(\"bar\", uri.getParameters().get(\"foo\"));\n+        assertEquals(\"qux\", uri.getParameters().get(\"baz\"));\n+        assertEquals(\"<h1>Hello, World!<\/h1>\", new String(uri.getData()));\n+    }\n+\n+    @Test\n+    public void testParseTextPlainWithMultipleParametersBase64Encoded() {\n+        String data = \"data:text\/plain;foo=bar;baz=qux;base64,SGVsbG8sIFdvcmxkIQ==\";\n+        DataURI uri = DataURI.tryParse(data);\n+        assertTrue(DataURI.matchScheme(data));\n+        assertNotNull(uri);\n+        assertTrue(uri.isBase64());\n+        assertEquals(\"text\", uri.getMimeType());\n+        assertEquals(\"plain\", uri.getMimeSubtype());\n+        assertEquals(2, uri.getParameters().size());\n+        assertEquals(\"bar\", uri.getParameters().get(\"foo\"));\n+        assertEquals(\"qux\", uri.getParameters().get(\"baz\"));\n+        assertEquals(\"Hello, World!\", new String(uri.getData()));\n+    }\n+\n+    @Test\n+    public void testShortUriToString() {\n+        String data = \"data:text\/plain;charset=utf-8;base64,SGVsbG8sIFdvcmxkIQ==\";\n+        DataURI uri = DataURI.tryParse(data);\n+        assertNotNull(uri);\n+        assertEquals(\"data:text\/plain;charset=utf-8;base64,SGVsbG8sIFdvcmxkIQ==\", uri.toString());\n+    }\n+\n+    @Test\n+    public void testLongUriToString() {\n+        String data = \"data:text\/plain;charset=utf-8;base64,SGVsbG9Xb3JsZEhlbGxvV29ybGRIZWxsb1dvcmxkSGVsbG9Xb3JsZEhlbGxvV29ybGRIZWxsb1dvcmxk\";\n+        DataURI uri = DataURI.tryParse(data);\n+        assertNotNull(uri);\n+        assertEquals(\"data:text\/plain;charset=utf-8;base64,SGVsbG9Xb3JsZE...RIZWxsb1dvcmxk\", uri.toString());\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/util\/DataURITest.java","additions":177,"deletions":0,"binary":false,"changes":177,"status":"added"}]}