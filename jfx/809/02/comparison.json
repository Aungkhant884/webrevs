{"files":[{"patch":"@@ -47,0 +47,1 @@\n+    auto [r, g, b, a] = color.toSRGBALossy<uint8_t>();\n@@ -52,3 +53,3 @@\n-        color.red,\n-        color.green,\n-        color.blue,\n+        r,\n+        g,\n+        b,\n@@ -72,0 +73,2 @@\n+    auto [r, g, b, a] = color.toSRGBALossy<uint8_t>();\n+\n@@ -75,3 +78,3 @@\n-        color.red,\n-        color.green,\n-        color.blue);\n+        r,\n+        g,\n+        b);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebKitLegacy\/java\/WebCoreSupport\/ColorChooserJava.cpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+--add-exports=javafx.controls\/com.sun.javafx.scene.control=ALL-UNNAMED\n+#\n","filename":"tests\/system\/src\/test\/addExports","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.web;\n+\n+import com.sun.javafx.scene.control.CustomColorDialog;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.collections.ListChangeListener;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.paint.Color;\n+import javafx.scene.web.WebView;\n+import javafx.stage.Stage;\n+import javafx.stage.Window;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import test.util.Util;\n+\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+\n+public class ColorChooserTest {\n+    private static final CountDownLatch launchLatch = new CountDownLatch(1);\n+\n+    static volatile Stage stage;\n+    static volatile ColorChooserTestApp colorChooserTestApp;\n+\n+    @Test\n+    public void testColorChooser() {\n+        colorChooserTestApp.startTest();\n+    }\n+\n+    @BeforeAll\n+    public static void setupOnce() {\n+        new Thread(() -> Application.launch(ColorChooserTestApp.class, (String[]) null)).start();\n+        Assertions.assertTrue(Util.await(launchLatch), \"Timeout waiting for FX runtime to start\");\n+    }\n+\n+    @AfterAll\n+    public static void tearDownOnce() {\n+        Platform.runLater(stage::hide);\n+        Platform.exit();\n+    }\n+\n+    public static class ColorChooserTestApp extends Application {\n+\n+        private WebView webView;\n+        private Scene scene;\n+        private int counter;\n+        private final List<String> colors = List.of(\"#ff3300\", \"#3367ff\", \"#cc072d\");\n+\n+        @Override\n+        public void init() {\n+            colorChooserTestApp = this;\n+        }\n+\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            Platform.setImplicitExit(false);\n+            stage = primaryStage;\n+\n+            webView = new WebView();\n+            scene = new Scene(webView);\n+            stage.setScene(scene);\n+            stage.setAlwaysOnTop(true);\n+            stage.setWidth(300);\n+            stage.setHeight(300);\n+            stage.setOnShown(e -> launchLatch.countDown());\n+            stage.show();\n+        }\n+\n+        public void startTest() {\n+            final CountDownLatch webViewStateLatch = new CountDownLatch(2);\n+\n+            Util.runAndWait(() -> {\n+                Assertions.assertNotNull(webView);\n+                Window.getWindows().addListener((ListChangeListener<Window>) change -> {\n+                    while (change.next()) {\n+                        if (change.wasAdded()) {\n+                            change.getAddedSubList().stream()\n+                                    .filter(w -> w.getScene().getRoot() instanceof CustomColorDialog)\n+                                    .findFirst()\n+                                    .map(w -> (CustomColorDialog) w.getScene().getRoot())\n+                                    .ifPresent(dialog -> {\n+                                        Assertions.assertEquals(dialog.getCurrentColor(), Color.web(colors.get(counter - 1)));\n+                                        dialog.setCustomColor(Color.web(colors.get(counter)));\n+                                        HBox box = (HBox) dialog.lookup(\"#buttons-hbox\");\n+                                        Button ok = (Button) box.getChildren().get(0);\n+                                        Platform.runLater(() -> {\n+                                            ok.fire();\n+                                            webViewStateLatch.countDown();\n+                                        });\n+                                    });\n+                        }\n+                    }\n+                });\n+                webView.getEngine().setOnAlert(event -> {\n+                    Assertions.assertNotNull(event.getData());\n+                    Assertions.assertEquals(event.getData(), \"color: \" + colors.get(counter++));\n+                });\n+                webView.getEngine().loadContent(\"<head>\" +\n+                        \"<script>\" +\n+                        \"   function logColor(event) {\" +\n+                        \"        var color = document.querySelector(\\\"#color\\\");\\n\" +\n+                        \"        alert(\\\"color: \\\" + color.value);\" +\n+                        \"   }\\n\" +\n+                        \"   setTimeout(\\n\" +\n+                        \"     () => {\\n\" +\n+                        \"        var color = document.querySelector(\\\"#color\\\");\\n\" +\n+                        \"        color.addEventListener(\\\"change\\\", logColor, false);\" +\n+                        \"        alert(\\\"color: \\\" + color.value);\" +\n+                        \"     }, 100);\" +\n+                        \"<\/script>\" +\n+                        \"<\/head>\" +\n+                        \"<body>\" +\n+                        \"   <input id=\\\"color\\\" type=\\\"color\\\" value=\\\"\" + colors.get(0) + \"\\\">\" +\n+                        \"<\/body>\");\n+            });\n+\n+            Util.sleep(100);\n+            Util.runAndWait(() -> webView.requestFocus());\n+            for (int i = 0; i < 2; i++) {\n+                \/\/ the first time, it creates the dialog (fwkCreateAndShowColorChooser),\n+                \/\/ the second time, it reuses it (fwkShowColorChooser)\n+                Util.sleep(100);\n+                Util.runAndWait(() -> {\n+                    webView.fireEvent(new MouseEvent(MouseEvent.MOUSE_PRESSED, 30,\n+                            15, (int) (stage.getX() + scene.getX() + 30),\n+                            (int) (stage.getY() + scene.getY() + 15), MouseButton.PRIMARY, 1,\n+                            false, false, false, false, true, false, false, true, false, false, null));\n+                    webView.fireEvent(new MouseEvent(MouseEvent.MOUSE_RELEASED, 30,\n+                            15, (int) (stage.getX() + scene.getX() + 30),\n+                            (int) (stage.getY() + scene.getY() + 15), MouseButton.PRIMARY, 1,\n+                            false, false, false, false, false, false, false, true, false, false, null));\n+                });\n+            }\n+            Assertions.assertTrue(Util.await(webViewStateLatch), \"Timeout when waiting for color chooser\");\n+        }\n+    }\n+\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/ColorChooserTest.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"}]}