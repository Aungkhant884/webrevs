{"files":[{"patch":"@@ -41,4 +41,4 @@\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -50,4 +50,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n@@ -57,1 +53,7 @@\n-    static ColorChooserTestApp colorChooserTestApp;\n+    static volatile Stage stage;\n+    static volatile ColorChooserTestApp colorChooserTestApp;\n+\n+    @Test\n+    public void testColorChooser() {\n+        colorChooserTestApp.startTest();\n+    }\n@@ -59,4 +61,11 @@\n-    private WebView webView;\n-    private Scene scene;\n-    private int counter;\n-    private final List<String> colors = List.of(\"#ff3300\", \"#3367ff\", \"#cc072d\");\n+    @BeforeAll\n+    public static void setupOnce() {\n+        new Thread(() -> Application.launch(ColorChooserTestApp.class, (String[]) null)).start();\n+        Assertions.assertTrue(Util.await(launchLatch), \"Timeout waiting for FX runtime to start\");\n+    }\n+\n+    @AfterAll\n+    public static void tearDownOnce() {\n+        Platform.runLater(stage::hide);\n+        Platform.exit();\n+    }\n@@ -65,1 +74,5 @@\n-        Stage primaryStage = null;\n+\n+        private WebView webView;\n+        private Scene scene;\n+        private int counter;\n+        private final List<String> colors = List.of(\"#ff3300\", \"#3367ff\", \"#cc072d\");\n@@ -69,1 +82,1 @@\n-            ColorChooserTest.colorChooserTestApp = this;\n+            colorChooserTestApp = this;\n@@ -75,4 +88,1 @@\n-            this.primaryStage = primaryStage;\n-            launchLatch.countDown();\n-        }\n-    }\n+            stage = primaryStage;\n@@ -80,16 +90,0 @@\n-    @BeforeClass\n-    public static void setupOnce() {\n-        \/\/ Start the Test Application\n-        new Thread(() -> Application.launch(ColorChooserTestApp.class, (String[])null)).start();\n-\n-        assertTrue(\"Timeout waiting for FX runtime to start\", Util.await(launchLatch));\n-    }\n-\n-    @AfterClass\n-    public static void tearDownOnce() {\n-        Platform.exit();\n-    }\n-\n-    @Before\n-    public void setupTestObjects() {\n-        Platform.runLater(() -> {\n@@ -98,7 +92,7 @@\n-            colorChooserTestApp.primaryStage.setScene(scene);\n-            colorChooserTestApp.primaryStage.setAlwaysOnTop(true);\n-            colorChooserTestApp.primaryStage.setWidth(300);\n-            colorChooserTestApp.primaryStage.setHeight(300);\n-            colorChooserTestApp.primaryStage.show();\n-        });\n-    }\n+            stage.setScene(scene);\n+            stage.setAlwaysOnTop(true);\n+            stage.setWidth(300);\n+            stage.setHeight(300);\n+            stage.setOnShown(e -> launchLatch.countDown());\n+            stage.show();\n+        }\n@@ -106,20 +100,21 @@\n-    @Test public void testColorChooser() {\n-        final CountDownLatch webViewStateLatch = new CountDownLatch(2);\n-\n-        Util.runAndWait(() -> {\n-            assertNotNull(webView);\n-            Window.getWindows().addListener((ListChangeListener<Window>) change -> {\n-                while (change.next()) {\n-                    if (change.wasAdded()) {\n-                        change.getAddedSubList().stream()\n-                                .filter(w -> w.getScene().getRoot() instanceof CustomColorDialog)\n-                                .findFirst()\n-                                .map(w -> (CustomColorDialog) w.getScene().getRoot())\n-                                .ifPresent(dialog -> {\n-                                    assertEquals(dialog.getCurrentColor(), Color.web(colors.get(counter - 1)));\n-                                    dialog.setCustomColor(Color.web(colors.get(counter)));\n-                                    HBox box = (HBox) dialog.lookup(\"#buttons-hbox\");\n-                                    Button ok = (Button) box.getChildren().get(0);\n-                                    Platform.runLater(() -> {\n-                                        ok.fire();\n-                                        webViewStateLatch.countDown();\n+        public void startTest() {\n+            final CountDownLatch webViewStateLatch = new CountDownLatch(2);\n+\n+            Util.runAndWait(() -> {\n+                Assertions.assertNotNull(webView);\n+                Window.getWindows().addListener((ListChangeListener<Window>) change -> {\n+                    while (change.next()) {\n+                        if (change.wasAdded()) {\n+                            change.getAddedSubList().stream()\n+                                    .filter(w -> w.getScene().getRoot() instanceof CustomColorDialog)\n+                                    .findFirst()\n+                                    .map(w -> (CustomColorDialog) w.getScene().getRoot())\n+                                    .ifPresent(dialog -> {\n+                                        Assertions.assertEquals(dialog.getCurrentColor(), Color.web(colors.get(counter - 1)));\n+                                        dialog.setCustomColor(Color.web(colors.get(counter)));\n+                                        HBox box = (HBox) dialog.lookup(\"#buttons-hbox\");\n+                                        Button ok = (Button) box.getChildren().get(0);\n+                                        Platform.runLater(() -> {\n+                                            ok.fire();\n+                                            webViewStateLatch.countDown();\n+                                        });\n@@ -127,1 +122,1 @@\n-                                });\n+                        }\n@@ -129,1 +124,22 @@\n-                }\n+                });\n+                webView.getEngine().setOnAlert(event -> {\n+                    Assertions.assertNotNull(event.getData());\n+                    Assertions.assertEquals(event.getData(), \"color: \" + colors.get(counter++));\n+                });\n+                webView.getEngine().loadContent(\"<head>\" +\n+                        \"<script>\" +\n+                        \"   function logColor(event) {\" +\n+                        \"        var color = document.querySelector(\\\"#color\\\");\\n\" +\n+                        \"        alert(\\\"color: \\\" + color.value);\" +\n+                        \"   }\\n\" +\n+                        \"   setTimeout(\\n\" +\n+                        \"     () => {\\n\" +\n+                        \"        var color = document.querySelector(\\\"#color\\\");\\n\" +\n+                        \"        color.addEventListener(\\\"change\\\", logColor, false);\" +\n+                        \"        alert(\\\"color: \\\" + color.value);\" +\n+                        \"     }, 100);\" +\n+                        \"<\/script>\" +\n+                        \"<\/head>\" +\n+                        \"<body>\" +\n+                        \"   <input id=\\\"color\\\" type=\\\"color\\\" value=\\\"\" + colors.get(0) + \"\\\">\" +\n+                        \"<\/body>\");\n@@ -131,28 +147,1 @@\n-            webView.getEngine().setOnAlert(event -> {\n-                assertNotNull(event.getData());\n-                assertEquals(event.getData(), \"color: \" + colors.get(counter++));\n-            });\n-            webView.getEngine().loadContent(\"<head>\" +\n-                    \"<script>\" +\n-                    \"   function logColor(event) {\" +\n-                    \"        var color = document.querySelector(\\\"#color\\\");\\n\" +\n-                    \"        alert(\\\"color: \\\" + color.value);\" +\n-                    \"   }\\n\" +\n-                    \"   setTimeout(\\n\" +\n-                    \"     () => {\\n\" +\n-                    \"        var color = document.querySelector(\\\"#color\\\");\\n\" +\n-                    \"        color.addEventListener(\\\"change\\\", logColor, false);\" +\n-                    \"        alert(\\\"color: \\\" + color.value);\" +\n-                    \"     }, 100);\" +\n-                    \"<\/script>\" +\n-                    \"<\/head>\" +\n-                    \"<body>\" +\n-                    \"   <input id=\\\"color\\\" type=\\\"color\\\" value=\\\"\" + colors.get(0) + \"\\\">\" +\n-                    \"<\/body>\");\n-        });\n-\n-        Util.sleep(100);\n-        Util.runAndWait(() -> webView.requestFocus());\n-        for (int i = 0; i < 2; i++) {\n-            \/\/ the first time, it creates the dialog (fwkCreateAndShowColorChooser),\n-            \/\/ the second time, it reuses it (fwkShowColorChooser)\n+\n@@ -160,10 +149,17 @@\n-            Util.runAndWait(() -> {\n-                webView.fireEvent(new MouseEvent(MouseEvent.MOUSE_PRESSED, 30,\n-                        15, (int) (scene.getWindow().getX() + scene.getX() + 30),\n-                        (int) (scene.getWindow().getY() + scene.getY() + 15), MouseButton.PRIMARY, 1,\n-                        false, false, false, false, true, false, false, true, false, false, null));\n-                webView.fireEvent(new MouseEvent(MouseEvent.MOUSE_RELEASED, 30,\n-                        15, (int) (scene.getWindow().getX() + scene.getX() + 30),\n-                        (int) (scene.getWindow().getY() + scene.getY() + 15), MouseButton.PRIMARY, 1,\n-                        false, false, false, false, false, false, false, true, false, false, null));\n-            });\n+            Util.runAndWait(() -> webView.requestFocus());\n+            for (int i = 0; i < 2; i++) {\n+                \/\/ the first time, it creates the dialog (fwkCreateAndShowColorChooser),\n+                \/\/ the second time, it reuses it (fwkShowColorChooser)\n+                Util.sleep(100);\n+                Util.runAndWait(() -> {\n+                    webView.fireEvent(new MouseEvent(MouseEvent.MOUSE_PRESSED, 30,\n+                            15, (int) (stage.getX() + scene.getX() + 30),\n+                            (int) (stage.getY() + scene.getY() + 15), MouseButton.PRIMARY, 1,\n+                            false, false, false, false, true, false, false, true, false, false, null));\n+                    webView.fireEvent(new MouseEvent(MouseEvent.MOUSE_RELEASED, 30,\n+                            15, (int) (stage.getX() + scene.getX() + 30),\n+                            (int) (stage.getY() + scene.getY() + 15), MouseButton.PRIMARY, 1,\n+                            false, false, false, false, false, false, false, true, false, false, null));\n+                });\n+            }\n+            Assertions.assertTrue(Util.await(webViewStateLatch), \"Timeout when waiting for color chooser\");\n@@ -171,1 +167,0 @@\n-        assertTrue(\"Timeout when waiting for color chooser \", Util.await(webViewStateLatch));\n@@ -173,0 +168,1 @@\n+\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/ColorChooserTest.java","additions":99,"deletions":103,"binary":false,"changes":202,"status":"modified"}]}