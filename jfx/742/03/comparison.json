{"files":[{"patch":"@@ -844,1 +844,1 @@\n-                                        me.getButton(), me.getClickCount(),\n+                                        me.getButton(), me.getButtonMask(), me.getClickCount(),\n@@ -2684,1 +2684,1 @@\n-                                                int button, int clickCount,\n+                                                int button, int buttonMask, int clickCount,\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/WebPage.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,3 +41,3 @@\n-    @Native public final static int BUTTON1 = 1;\n-    @Native public final static int BUTTON2 = 2;\n-    @Native public final static int BUTTON3 = 4;\n+    @Native public final static int BUTTON1 = 1; \/\/ Left Button\n+    @Native public final static int BUTTON2 = 2; \/\/ Middle Button\n+    @Native public final static int BUTTON3 = 4; \/\/ Right Button\n@@ -49,0 +49,1 @@\n+    private final int buttonMask;\n@@ -64,2 +65,1 @@\n-                        long when, boolean shift, boolean control, boolean alt, boolean meta, boolean popupTrigger)\n-    {\n+                        long when, boolean shift, boolean control, boolean alt, boolean meta, boolean popupTrigger, int buttonMask) {\n@@ -79,0 +79,1 @@\n+        this.buttonMask = buttonMask;\n@@ -81,0 +82,5 @@\n+    public WCMouseEvent(int id, int button, int clickCount, int x, int y, int screenX, int screenY,\n+                        long when, boolean shift, boolean control, boolean alt, boolean meta, boolean popupTrigger) {\n+         this(id, button, clickCount, x, y, screenX, screenY, when, shift, control, alt, meta, popupTrigger, 0);\n+     }\n+\n@@ -98,0 +104,2 @@\n+\n+    public int getButtonMask() { return buttonMask; }\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/event\/WCMouseEvent.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1088,0 +1088,3 @@\n+        final int buttonMask = ((ev.isPrimaryButtonDown()   ? WCMouseEvent.BUTTON1 : WCMouseEvent.NOBUTTON) |\n+                                (ev.isMiddleButtonDown()    ? WCMouseEvent.BUTTON2 : WCMouseEvent.NOBUTTON) |\n+                                (ev.isSecondaryButtonDown() ? WCMouseEvent.BUTTON3 : WCMouseEvent.NOBUTTON));\n@@ -1094,1 +1097,1 @@\n-                    ev.isMetaDown(), ev.isPopupTrigger());\n+                    ev.isMetaDown(), ev.isPopupTrigger(), buttonMask);\n","filename":"modules\/javafx.web\/src\/main\/java\/javafx\/scene\/web\/WebView.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -47,0 +47,3 @@\n+#if PLATFORM(JAVA)\n+    enum MouseButtonMask : uint8_t { NoButtonMask = 0, LeftButtonMask, RightButtonMask, MiddleButtonMask = 4 };\n+#endif\n@@ -68,0 +71,17 @@\n+#if PLATFORM(JAVA)\n+        PlatformMouseEvent(const IntPoint& position, const IntPoint& globalPosition, MouseButton button, unsigned short buttons, PlatformEvent::Type type,\n+                           int clickCount, bool shiftKey, bool ctrlKey, bool altKey, bool metaKey, WallTime timestamp, double force,\n+                           SyntheticClickType syntheticClickType, PointerID pointerId = mousePointerID)\n+            : PlatformEvent(type, shiftKey, ctrlKey, altKey, metaKey, timestamp)\n+            , m_button(button)\n+            , m_syntheticClickType(syntheticClickType)\n+            , m_position(position)\n+            , m_globalPosition(globalPosition)\n+            , m_force(force)\n+            , m_pointerId(pointerId)\n+            , m_clickCount(clickCount)\n+            , m_buttons(buttons)\n+        {\n+        }\n+#endif\n+\n@@ -139,0 +159,1 @@\n+    unsigned short getWebCoreMouseButtons(jint javaButton);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/PlatformMouseEvent.h","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -48,0 +48,15 @@\n+unsigned short getWebCoreMouseButtons(jint javaButton)\n+{\n+    unsigned short buttons = NoButtonMask;\n+    if (javaButton & com_sun_webkit_event_WCMouseEvent_BUTTON1) {\n+        buttons |= LeftButtonMask;\n+    }\n+    if (javaButton & com_sun_webkit_event_WCMouseEvent_BUTTON2) {\n+        buttons |= MiddleButtonMask;\n+    }\n+    if (javaButton & com_sun_webkit_event_WCMouseEvent_BUTTON3) {\n+        buttons |= RightButtonMask;\n+    }\n+    return buttons;\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/java\/MouseEventJava.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1751,1 +1751,1 @@\n-     jint id, jint button, jint clickCount,\n+     jint id, jint button, jint buttonMask, jint clickCount,\n@@ -1777,0 +1777,1 @@\n+                                                       getWebCoreMouseButtons(buttonMask),\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebKitLegacy\/java\/WebCoreSupport\/WebPage.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,225 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ p * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.web;\n+\n+import com.sun.javafx.PlatformUtil;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.beans.value.ObservableValue;\n+import javafx.concurrent.Worker.State;\n+import javafx.concurrent.Worker;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.robot.Robot;\n+import javafx.scene.Scene;\n+import javafx.scene.web.WebEngine;\n+import javafx.scene.web.WebView;\n+import javafx.scene.input.KeyCode;\n+import javafx.stage.Stage;\n+\n+import java.lang.Integer;\n+import java.lang.Number;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import test.util.Util;\n+\n+import static org.junit.Assert.*;\n+\n+\/*\n+ * Tests for validating the buttons property received in \"pointermove\" event,\n+ * when various mouse buttons are pressed and dragged\n+ * testLeftButtonDrag           - Press the Mouse Left Button and drag\n+ * testRightButtonDrag          - Press the Mouse Right Button and drag\n+ * testMiddleButtonDrag         - Press the Mouse Middle Button and drag\n+ * testLeftMiddleButtonDrag     - Press Left and Middle Buttons and drag\n+ * testMiddleRightButtonDrag    - Press Middle and Right Buttons and drag\n+ * testLeftRightButtonDrag      - Press Left and Right Buttons and drag\n+ * testLeftMiddleRightButtonDrag- Press Left, Middle and Right Buttons and drag\n+ *\/\n+\n+public class PointerEventTest {\n+\n+    private static final int LEFT_BUTTON_DRAG = 1;\n+    private static final int MIDDLE_BUTTON_DRAG = 4;\n+    private static final int RIGHT_BUTTON_DRAG = 2;\n+    private static final int SCENE_WIDTH = 250;\n+    private static final int SCENE_HEIGHT = SCENE_WIDTH;\n+    \/\/ Sleep time between mouseMove and element access\n+    private static final int SLEEP_TIME = 500;\n+\n+    private final int DRAG_DISTANCE = 15;\n+    private final int DX = 125;\n+    private final int DY = 125;\n+\n+    private static CountDownLatch startupLatch;\n+\n+    static Document document;\n+    static Element element;\n+    static Robot robot;\n+    static WebView webView;\n+    static WebEngine webEngine;\n+\n+    static volatile Stage stage;\n+    static volatile Scene scene;\n+\n+    private String buttonMask;\n+    private int result = 0;\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) {\n+            robot = new Robot();\n+            stage = primaryStage;\n+            stage.setTitle(\"Mouse Drag Test\");\n+            webView = new WebView();\n+            webEngine = webView.getEngine();\n+            String URL =  this.getClass().getResource(\"pointerEvent.html\").toString();\n+            webView.getEngine().getLoadWorker().stateProperty().addListener((ov, o, n) -> {\n+                if (n == Worker.State.SUCCEEDED) {\n+                    document = webEngine.getDocument();\n+                    element = document.getElementById(\"buttonPressed\");\n+                    startupLatch.countDown();\n+                }\n+            });\n+            webEngine.load(URL);\n+            scene = new Scene(new StackPane(webView), SCENE_WIDTH, SCENE_HEIGHT);\n+            stage.setScene(scene);\n+            stage.setAlwaysOnTop(true);\n+            stage.setOnShown(e -> startupLatch.countDown());\n+            stage.show();\n+        }\n+    }\n+\n+    public int mouseButtonDrag(MouseButton... buttons) {\n+        Util.runAndWait(() -> {\n+            robot.mouseMove((int)(scene.getWindow().getX() + scene.getX() + DX),\n+                            (int)(scene.getWindow().getY() + scene.getY() + DY));\n+            robot.mousePress(buttons);\n+        });\n+\n+        Util.runAndWait(() -> {\n+            for (int i = 0; i < DRAG_DISTANCE; i++) {\n+                \/\/ Move the mouse backwards so that the pointer does not stay on the popup, if any.\n+                robot.mouseMove((int)(scene.getWindow().getX() + scene.getX() + DX - i),\n+                                (int)(scene.getWindow().getY() + scene.getY() + DY));\n+            }\n+        });\n+\n+        Util.sleep(SLEEP_TIME);\n+        Util.runAndWait(()  -> {\n+            buttonMask = element.getTextContent();\n+            robot.mouseRelease(buttons);\n+        });\n+\n+        return Integer.parseInt(buttonMask);\n+    }\n+\n+    @Test\n+    public void testLeftButtonDrag() {\n+        int result = mouseButtonDrag(MouseButton.PRIMARY);\n+        assertEquals(LEFT_BUTTON_DRAG, result);\n+    }\n+\n+    @Test\n+    public void testRightButtonDrag() {\n+        int result = mouseButtonDrag(MouseButton.SECONDARY);\n+        assertEquals(RIGHT_BUTTON_DRAG, result);\n+    }\n+\n+    @Test\n+    public void testMiddleButtonDrag() {\n+        int result = mouseButtonDrag(MouseButton.MIDDLE);\n+        assertEquals(MIDDLE_BUTTON_DRAG, result);\n+    }\n+\n+    @Test\n+    public void testLeftMiddleButtonDrag() {\n+        int result = mouseButtonDrag(MouseButton.PRIMARY, MouseButton.MIDDLE);\n+        assertEquals((LEFT_BUTTON_DRAG | MIDDLE_BUTTON_DRAG), result);\n+    }\n+\n+    @Test\n+    public void testMiddleRightButtonDrag() {\n+        int result = mouseButtonDrag(MouseButton.MIDDLE, MouseButton.SECONDARY);\n+        assertEquals((MIDDLE_BUTTON_DRAG | RIGHT_BUTTON_DRAG), result);\n+    }\n+\n+    @Test\n+    public void testLeftRightButtonDrag() {\n+        int result = mouseButtonDrag(MouseButton.PRIMARY, MouseButton.SECONDARY);\n+        assertEquals((LEFT_BUTTON_DRAG | RIGHT_BUTTON_DRAG), result);\n+    }\n+\n+    @Test\n+    public void testLeftMiddleRightButtonDrag() {\n+        int result = mouseButtonDrag(MouseButton.PRIMARY, MouseButton.MIDDLE, MouseButton.SECONDARY);\n+        assertEquals((LEFT_BUTTON_DRAG | MIDDLE_BUTTON_DRAG | RIGHT_BUTTON_DRAG), result);\n+    }\n+\n+    @BeforeClass\n+    public static void initFX() {\n+        startupLatch = new CountDownLatch(2);\n+        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();\n+        waitForLatch(startupLatch, 15, \"Timeout waiting for FX runtime to start\");\n+    }\n+\n+    @AfterClass\n+    public static void exit() {\n+        Platform.runLater(() -> {\n+            stage.hide();\n+        });\n+        Platform.exit();\n+    }\n+\n+    @After\n+    public void resetTest() {\n+        Util.runAndWait(() -> {\n+            robot.mouseRelease(MouseButton.PRIMARY, MouseButton.MIDDLE, MouseButton.SECONDARY);\n+            robot.keyType(KeyCode.ESCAPE);\n+        });\n+    }\n+\n+    public static void waitForLatch(CountDownLatch latch, int seconds, String msg) {\n+        try {\n+            if (!latch.await(seconds, TimeUnit.SECONDS)) {\n+                fail(msg);\n+            }\n+        } catch (Exception ex) {\n+            fail(\"Unexpected exception: \" + ex);\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/web\/PointerEventTest.java","additions":225,"deletions":0,"binary":false,"changes":225,"status":"added"},{"patch":"@@ -0,0 +1,19 @@\n+<!doctype html>\n+<body style=\"height: 200px\">\n+    <h1 style=\"color:black\"\n+        id=\"buttonPressed\"\n+        align=\"center\">\n+        0\n+    <\/h1>\n+\n+    <script>\n+        var onMove = function (e) {\n+            document.getElementById(\"buttonPressed\").style = \"color:green\";\n+            document.getElementById(\"buttonPressed\").textContent = e.buttons;\n+        }\n+\n+        var body = document.getElementsByTagName('body')[0];\n+        document.addEventListener(\"pointermove\", onMove, false);\n+    <\/script>\n+\n+<\/body>\n","filename":"tests\/system\/src\/test\/resources\/test\/robot\/javafx\/web\/pointerEvent.html","additions":19,"deletions":0,"binary":false,"changes":19,"status":"added"}]}