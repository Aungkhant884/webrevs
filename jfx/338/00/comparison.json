{"files":[{"patch":"@@ -0,0 +1,285 @@\n+#\n+# Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+#\n+# This GitHub actions YAML file runs a build and test on each of the three primary platforms:\n+# Linux, macOS, Windows. The jobs are run using the default (latest) OS platform for each OS.\n+# We download a specific version the boot JDK and gradle. We use the default versions\n+# of all other build tools (e.g., compilers and ant) that are available on each platform.\n+#\n+# The build step is run in the default mode without building the native media or webkit libraries.\n+# The test is run with web tests excluded. As a follow-up enhancement, we might consider optionally\n+# building the media and webkit libraries.\n+#\n+\n+name: JavaFX pre-submit tests\n+\n+on:\n+  # Run GitHub actions on every push to all branches except the main production branches, also\n+  # exclude any branch starting with \"WIP\".\n+  push:\n+    branches-ignore:\n+      - master\n+      - main\n+      - 'jfx[0-9]+'\n+      - 'WIP*'\n+\n+jobs:\n+  linux_x64_build:\n+    name: Linux x64\n+    runs-on: \"ubuntu-latest\"\n+    if: 'true'\n+\n+    env:\n+      # FIXME: read this information from a property file\n+      # BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n+      # BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n+      # BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n+      # BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n+      BOOT_JDK_VERSION: \"15\"\n+      BOOT_JDK_FILENAME: \"openjdk-15_linux-x64_bin.tar.gz\"\n+      BOOT_JDK_URL: \"https:\/\/download.java.net\/java\/GA\/jdk15\/779bf45e88a44cbd9ea6621d33e33db1\/36\/GPL\/openjdk-15_linux-x64_bin.tar.gz\"\n+\n+    steps:\n+      - name: Checkout the source\n+        uses: actions\/checkout@v2\n+        with:\n+          path: jfx\n+\n+      - name: Install dependencies\n+        run: |\n+          set -x\n+          sudo apt-get install libgl1-mesa-dev libx11-dev libxt-dev pkg-config libgtk2.0-dev libgtk-3-dev libxtst-dev libudev-dev\n+\n+# FIXME: enable cache for boot JDK\n+#      - name: Restore boot JDK from cache\n+#        id: bootjdk\n+#        uses: actions\/cache@v2\n+#        with:\n+#          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n+#          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n+\n+      - name: Download boot JDK\n+        run: |\n+          set -x\n+          mkdir -p \"${HOME}\/bootjdk\"\n+          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n+          # FIXME: sha256sum\n+          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\"\n+          # FIXME: enable cache for boot JDK\n+\n+      - name: Setup environment\n+        run: |\n+          set -x\n+          export JAVA_HOME=\"${HOME}\/bootjdk\/jdk-${BOOT_JDK_VERSION}\"\n+          echo \"JAVA_HOME=${JAVA_HOME}\" >> \"${GITHUB_ENV}\"\n+          export PATH=\"$JAVA_HOME\/bin:$PATH\"\n+          env | sort\n+          which java\n+          java -version\n+          ant -version\n+          gcc -v\n+\n+      - name: Build JavaFX artifacts\n+        working-directory: jfx\n+        run: |\n+          set -x\n+          export PATH=\"$JAVA_HOME\/bin:$PATH\"\n+          bash gradlew -version\n+          bash gradlew --info all\n+\n+      - name: Run JavaFX headless tests\n+        working-directory: jfx\n+        run: |\n+          set -x\n+          export PATH=\"$JAVA_HOME\/bin:$PATH\"\n+          bash gradlew --info --continue -PBUILD_SDK_FOR_TEST=false test -x :web:test\n+\n+\n+  macos_x64_build:\n+    name: macOS x64\n+    runs-on: \"macos-latest\"\n+    if: 'true'\n+\n+    env:\n+      # FIXME: read this information from a property file\n+      # BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n+      # BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n+      # BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n+      # BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n+      BOOT_JDK_VERSION: \"15\"\n+      BOOT_JDK_FILENAME: \"openjdk-15_osx-x64_bin.tar.gz\"\n+      BOOT_JDK_URL: \"https:\/\/download.java.net\/java\/GA\/jdk15\/779bf45e88a44cbd9ea6621d33e33db1\/36\/GPL\/openjdk-15_osx-x64_bin.tar.gz\"\n+\n+    steps:\n+      - name: Checkout the source\n+        uses: actions\/checkout@v2\n+        with:\n+          path: jfx\n+\n+      - name: Install dependencies\n+        run: |\n+          set -x\n+          echo \"NOT NEEDED: brew install make\"\n+\n+# FIXME: enable cache for boot JDK\n+#      - name: Restore boot JDK from cache\n+#        id: bootjdk\n+#        uses: actions\/cache@v2\n+#        with:\n+#          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n+#          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n+\n+      - name: Download boot JDK\n+        run: |\n+          set -x\n+          mkdir -p \"${HOME}\/bootjdk\"\n+          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n+          # FIXME: sha256sum\n+          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\"\n+          # FIXME: enable cache for boot JDK\n+\n+      - name: Setup environment\n+        run: |\n+          set -x\n+          export JAVA_HOME=\"${HOME}\/bootjdk\/jdk-${BOOT_JDK_VERSION}.jdk\/Contents\/Home\"\n+          echo \"JAVA_HOME=${JAVA_HOME}\" >> \"${GITHUB_ENV}\"\n+          export PATH=\"$JAVA_HOME\/bin:$PATH\"\n+          env | sort\n+          which java\n+          java -version\n+          ant -version\n+          xcodebuild -version\n+\n+      - name: Build JavaFX artifacts\n+        working-directory: jfx\n+        run: |\n+          set -x\n+          export PATH=\"$JAVA_HOME\/bin:$PATH\"\n+          bash gradlew -version\n+          bash gradlew --info all\n+\n+      - name: Run JavaFX headless tests\n+        working-directory: jfx\n+        run: |\n+          set -x\n+          export PATH=\"$JAVA_HOME\/bin:$PATH\"\n+          bash gradlew --info --continue -PBUILD_SDK_FOR_TEST=false test -x :web:test\n+\n+\n+  windows_x64_build:\n+    name: Windows x64\n+    runs-on: \"windows-latest\"\n+    if: 'true'\n+\n+    env:\n+      # FIXME: read this information from a property file\n+      # BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n+      # BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n+      # BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n+      # BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n+      BOOT_JDK_VERSION: \"15\"\n+      BOOT_JDK_FILENAME: \"openjdk-15_windows-x64_bin.zip\"\n+      BOOT_JDK_URL: \"https:\/\/download.java.net\/java\/GA\/jdk15\/779bf45e88a44cbd9ea6621d33e33db1\/36\/GPL\/openjdk-15_windows-x64_bin.zip\"\n+      # FIXME: hard-code the location and version of VS 2019 for now\n+      VS150COMNTOOLS: \"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2019\\\\Enterprise\\\\VC\\\\Auxiliary\\\\Build\"\n+      MSVC_VER: \"14.27.29110\"\n+\n+    steps:\n+      - name: Checkout the source\n+        uses: actions\/checkout@v2\n+        with:\n+          path: jfx\n+\n+# FIXME: enable cache for boot JDK\n+#      - name: Restore boot JDK from cache\n+#        id: bootjdk\n+#        uses: actions\/cache@v2\n+#        with:\n+#          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n+#          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n+\n+      - name: Download boot JDK\n+        run: |\n+          mkdir -p \"$HOME\\bootjdk\"\n+          & curl -L \"$env:BOOT_JDK_URL\" -o \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\"\n+          # FIXME: sha256sum\n+          tar -xf \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\" -C \"$HOME\/bootjdk\"\n+          # FIXME: enable cache for boot JDK\n+\n+      - name: Restore cygwin packages from cache\n+        id: cygwin\n+        uses: actions\/cache@v2\n+        with:\n+          path: ~\/cygwin\/packages\n+          key: cygwin-packages-${{ runner.os }}-v1\n+\n+      - name: Install cygwin\n+        run: |\n+          New-Item -Force -ItemType directory -Path \"$HOME\\cygwin\"\n+          & curl -L \"https:\/\/www.cygwin.com\/setup-x86_64.exe\" -o \"$HOME\/cygwin\/setup-x86_64.exe\"\n+          Start-Process -FilePath \"$HOME\\cygwin\\setup-x86_64.exe\" -ArgumentList \"--quiet-mode --packages make,zip,unzip --root $HOME\\cygwin\\cygwin64 --local-package-dir $HOME\\cygwin\\packages --site http:\/\/mirrors.kernel.org\/sourceware\/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin\" -Wait -NoNewWindow\n+\n+      - name: Setup environment\n+        run: |\n+          echo \"VS150COMNTOOLS=$env:VS150COMNTOOLS\"\n+          echo \"MSVC_VER=$env:MSVC_VER\"\n+          # echo \"dir ...\\VC\\Tools\\MSVC\"\n+          # dir \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Tools\\MSVC\"\n+          # echo \"dir VS150COMNTOOLS\"\n+          # dir \"$env:VS150COMNTOOLS\"\n+\n+          $env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n+          $env:JAVA_HOME = \"$HOME\\bootjdk\\jdk-$env:BOOT_JDK_VERSION\" ;\n+          echo \"JAVA_HOME=$env:JAVA_HOME\"\n+          $env:Path = \"$env:JAVA_HOME\\bin;$env:Path\" ;\n+          echo \"Path=$env:Path\"\n+          which java\n+          java -version\n+          which ant\n+          ant -version\n+\n+          # Save JAVA_HOME and Path (renamed to THE_PATH) in env variables\n+          echo \"JAVA_HOME=$env:JAVA_HOME\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n+          echo \"THE_PATH=$env:Path\" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append\n+\n+      - name: Build JavaFX artifacts\n+        working-directory: jfx\n+        run: |\n+          echo \"JAVA_HOME=$env:JAVA_HOME\"\n+          $env:Path = \"$env:THE_PATH\" ;\n+          echo \"Path=$env:Path\"\n+          which java\n+          java -version\n+          .\\gradlew.bat -version\n+          .\\gradlew.bat --info all\n+\n+      - name: Run JavaFX headless tests\n+        working-directory: jfx\n+        run: |\n+          echo \"JAVA_HOME=$env:JAVA_HOME\"\n+          $env:Path = \"$env:THE_PATH\" ;\n+          echo \"Path=$env:Path\"\n+          .\\gradlew.bat --info --continue -PBUILD_SDK_FOR_TEST=false test -x :web:test\n","filename":".github\/workflows\/submit.yml","additions":285,"deletions":0,"binary":false,"changes":285,"status":"added"}]}