{"files":[{"patch":"@@ -37,1 +37,1 @@\n- * change event notification.\n+ * change event notification.<p>\n@@ -40,1 +40,1 @@\n- * observers are being notified, but it is not thread-safe.\n+ * observers are being notified, but it is not thread-safe.<p>\n@@ -42,0 +42,5 @@\n+ * This class keeps track of the latest value it has seen to determine if change\n+ * listeners should be called when next {@link #fireValueChangedEvent()} is called.\n+ * So while this value is usually the current value of the involved observable,\n+ * it becomes the \"old\" value as soon as the observable is changed, until such time\n+ * it is updated again (by calling {@link #fireValueChangedEvent()}).<p>\n@@ -43,0 +48,6 @@\n+ * During this brief period, listeners may be added or removed causing the ExpressionHelper\n+ * to perhaps switch to a different variant of itself. These different variants must be\n+ * made aware of the currently stored latest value, as obtaining this value from the\n+ * {@link ObservableValue} would (during that brief period) be a different value. Using\n+ * the incorrect latest value would result in change listeners not being fired as they\n+ * perform an equality check.\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ExpressionHelper.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -673,1 +673,1 @@\n-        assertTrue(invalidated.get());  \/\/ true because it was added before called\n+        assertTrue(invalidated.get());  \/\/ true because the invalidation listener was added before called\n@@ -694,1 +694,1 @@\n-        assertFalse(invalidated.get());  \/\/ false because it was removed before called\n+        assertFalse(invalidated.get());  \/\/ false because the invalidation listener was removed before called\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ExpressionHelperTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}