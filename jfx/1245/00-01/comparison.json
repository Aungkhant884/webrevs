{"files":[{"patch":"@@ -251,4 +251,0 @@\n-        if(!pseudoClassState.isEmpty()){\n-            return stateMatches(styleable, styleable.getPseudoClassStates());\n-        }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/SimpleSelector.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1964,1 +1964,1 @@\n-        return s != null && s.applies(this) ? this : null;\n+        return selectorMatches(s) ? this : null;\n@@ -1993,1 +1993,1 @@\n-        if (selector.applies(this)) {\n+        if (selectorMatches(selector)) {\n@@ -2027,0 +2027,13 @@\n+    \/**\n+     * Checks whether the provided selector matches the node with both styles and pseudo states.\n+     * @param s selector to match\n+     * @return {@code true} if the selector matches\n+     *\/\n+    private boolean selectorMatches(Selector s){\n+        boolean matches = s != null && s.applies(this);\n+        if(matches && !s.createMatch().getPseudoClasses().isEmpty()){\n+            matches = s.stateMatches(this, this.getPseudoClassStates());\n+        }\n+        return matches;\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,6 +43,6 @@\n-    \/\/                   Group & #root\n-    \/\/                    \/        \\\n-    \/\/                 #a.c       .b.c:testPseudo\n-    \/\/                \/    \\         \\\n-    \/\/    .d:testPseudo1    #e     .d:testPseudo1:testPseudo2\n-    private Group root, ac, bc, d, e, d2;\n+    \/\/                  Group & #root\n+    \/\/                \/      \\        \\\n+    \/\/              #a      .b.c       .f:testPseudo\n+    \/\/             \/   \\        \\         \/           \\\n+    \/\/           .d    #e        .d   .g:testPseudo1   .h.g:testPseudo1:testPseudo2\n+    private Group root, a, bc, d, e, d2, f, g, hg;\n@@ -53,3 +53,2 @@\n-        ac = new Group();\n-        ac.setId(\"a\");\n-        ac.getStyleClass().addAll(\"c\");\n+        a = new Group();\n+        a.setId(\"a\");\n@@ -58,1 +57,0 @@\n-        d.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"testPseudo1\"),true);\n@@ -63,1 +61,0 @@\n-        bc.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"testPseudo\"),true);\n@@ -66,4 +63,12 @@\n-        d2.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"testPseudo1\"),true);\n-        d2.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"testPseudo2\"),true);\n-        ParentShim.getChildren(root).addAll(ac, bc);\n-        ParentShim.getChildren(ac).addAll(d, e);\n+        f = new Group();\n+        f.getStyleClass().add(\"f\");\n+        f.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"testPseudo\"),true);\n+        g = new Group();\n+        g.getStyleClass().add(\"g\");\n+        g.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"testPseudo1\"),true);\n+        hg = new Group();\n+        hg.getStyleClass().addAll(\"h\", \"g\");\n+        hg.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"testPseudo1\"),true);\n+        hg.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"testPseudo2\"),true);\n+        ParentShim.getChildren(root).addAll(a, bc, f);\n+        ParentShim.getChildren(a).addAll(d, e);\n@@ -71,0 +76,1 @@\n+        ParentShim.getChildren(f).addAll(g, hg);\n@@ -78,1 +84,1 @@\n-        assertSame(ac, found);\n+        assertSame(a, found);\n@@ -90,1 +96,1 @@\n-        assertSame(d, found);\n+        assertSame(d2, found);\n@@ -99,1 +105,1 @@\n-        assertTrue(nodes.contains(ac));\n+        assertTrue(nodes.contains(a));\n@@ -109,1 +115,1 @@\n-        Set<Node> nodes = root.lookupAll(\".d:testPseudo2\");\n+        Set<Node> nodes = root.lookupAll(\".h:testPseudo2\");\n@@ -111,1 +117,1 @@\n-        assertTrue(nodes.contains(d2));\n+        assertTrue(nodes.contains(hg));\n@@ -113,2 +119,2 @@\n-        Node found = root.lookup(\".d:testPseudo2\");\n-        assertSame(d2, found);\n+        Node found = root.lookup(\".h:testPseudo2\");\n+        assertSame(hg, found);\n@@ -116,2 +122,5 @@\n-        found = root.lookup(\".d:testPseudo1:testPseudo2\");\n-        assertSame(d2, found);\n+        found = root.lookup(\":testPseudo2\");\n+        assertSame(hg, found);\n+\n+        found = root.lookup(\".h:testPseudo1:testPseudo2\");\n+        assertSame(hg, found);\n@@ -119,1 +128,1 @@\n-        nodes = root.lookupAll(\".d:testPseudo1\");\n+        nodes = root.lookupAll(\".g:testPseudo1\");\n@@ -121,2 +130,7 @@\n-        assertTrue(nodes.contains(d));\n-        assertTrue(nodes.contains(d2));\n+        assertTrue(nodes.contains(g));\n+        assertTrue(nodes.contains(hg));\n+\n+        nodes = root.lookupAll(\":testPseudo1\");\n+        assertEquals(2, nodes.size());\n+        assertTrue(nodes.contains(g));\n+        assertTrue(nodes.contains(hg));\n@@ -124,1 +138,1 @@\n-        nodes = root.lookupAll(\"#a > .d:testPseudo1\");\n+        nodes = root.lookupAll(\".f > .h:testPseudo1\");\n@@ -126,1 +140,1 @@\n-        assertTrue(nodes.contains(d));\n+        assertTrue(nodes.contains(hg));\n@@ -128,1 +142,1 @@\n-        nodes = root.lookupAll(\".c:testPseudo > .d:testPseudo1\");\n+        nodes = root.lookupAll(\".f:testPseudo > .h:testPseudo1\");\n@@ -130,1 +144,1 @@\n-        assertTrue(nodes.contains(d2));\n+        assertTrue(nodes.contains(hg));\n@@ -132,1 +146,1 @@\n-        nodes = root.lookupAll(\".d:randomPseudo\");\n+        nodes = root.lookupAll(\".f:randomPseudo\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Node_lookup_Test.java","additions":47,"deletions":33,"binary":false,"changes":80,"status":"modified"}]}