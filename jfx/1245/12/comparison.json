{"files":[{"patch":"@@ -1953,3 +1953,9 @@\n-     *     For example, if a Node is given the id of \"myId\", then the lookup method can\n-     *     be used to find this node as follows: <code>scene.lookup(\"#myId\");<\/code>.\n-     * <\/p>\n+     * If the lookup selector does not specify a pseudo class, the lookup will ignore pseudo class states;\n+     * it will return the first matching node whether or not it contains pseudo classes.\n+     * <p>\n+     * For example, if a Node is given the id of \"myId\", then the lookup method can\n+     * be used to find this node as follows: {@code scene.lookup(\"#myId\");}.\n+     * <p>\n+     * For example, if two nodes, NodeA and NodeB, have the same style class \"myStyle\" and NodeA has\n+     * a pseudo state \"myPseudo\", then to find NodeA, the lookup method can be used as follows:\n+     * {@code scene.lookup(\".myStyle:myPseudo\");} or {@code scene.lookup(\":myPseudo\");}.\n@@ -1964,1 +1970,1 @@\n-        return s != null && s.applies(this) ? this : null;\n+        return selectorMatches(s) ? this : null;\n@@ -1971,0 +1977,10 @@\n+     * <p>\n+     * If the lookupAll selector does not specify a pseudo class, the lookupAll will ignore pseudo class states;\n+     * it will return all matching nodes whether or not the nodes contain pseudo classes.\n+     * <p>\n+     * For example, if there are multiple nodes with same style class \"myStyle\", then the lookupAll method can\n+     * be used to find all these nodes as follows: {@code scene.lookupAll(\".myStyle\");}.\n+     * <p>\n+     * For example, if multiple nodes have same style class \"myStyle\" and few nodes have\n+     * a pseudo state \"myPseudo\", then to find all nodes with \"myPseudo\" state, the lookupAll method can be used as follows:\n+     * {@code scene.lookupAll(\".myStyle:myPseudo\");} or {@code scene.lookupAll(\":myPseudo\");}.\n@@ -1989,2 +2005,3 @@\n-     * @param selector The Selector. This will never be null.\n-     * @param results The results. This will never be null.\n+     * @param selector the css selector of the nodes to find\n+     * @param results the results\n+     * @return list of matching nodes\n@@ -1993,1 +2010,1 @@\n-        if (selector.applies(this)) {\n+        if (selectorMatches(selector)) {\n@@ -2027,0 +2044,13 @@\n+    \/**\n+     * Checks whether the provided selector matches the node with both styles and pseudo states.\n+     * @param s selector to match\n+     * @return {@code true} if the selector matches\n+     *\/\n+    private boolean selectorMatches(Selector s) {\n+        boolean matches = s != null && s.applies(this);\n+        if (matches && !s.createMatch().getPseudoClasses().isEmpty()) {\n+            matches = s.stateMatches(this, this.getPseudoClassStates());\n+        }\n+        return matches;\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":37,"deletions":7,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+\n+import javafx.css.PseudoClass;\n@@ -42,5 +44,5 @@\n-    \/\/                \/      \\\n-    \/\/              #a      .b.c\n-    \/\/             \/   \\        \\\n-    \/\/           .d    #e        .d\n-    private Group root, a, bc, d, e, d2;\n+    \/\/                \/      \\        \\\n+    \/\/              #a      .b.c       .f:testPseudo\n+    \/\/             \/   \\        \\         \/           \\\n+    \/\/           .d    #e        .d   .g:testPseudo1   .h.g:testPseudo1:testPseudo2\n+    private Group root, a, bc, d, e, d2, f, g, hg;\n@@ -61,1 +63,11 @@\n-        ParentShim.getChildren(root).addAll(a, bc);\n+        f = new Group();\n+        f.getStyleClass().add(\"f\");\n+        f.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"testPseudo\"), true);\n+        g = new Group();\n+        g.getStyleClass().add(\"g\");\n+        g.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"testPseudo1\"), true);\n+        hg = new Group();\n+        hg.getStyleClass().addAll(\"h\", \"g\");\n+        hg.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"testPseudo1\"), true);\n+        hg.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"testPseudo2\"), true);\n+        ParentShim.getChildren(root).addAll(a, bc, f);\n@@ -64,0 +76,1 @@\n+        ParentShim.getChildren(f).addAll(g, hg);\n@@ -66,1 +79,1 @@\n-    @Test public void quickTest() {\n+    @Test public void test_lookup_on_nodes_without_pseudo_classes() {\n@@ -89,1 +102,1 @@\n-    @Test public void lookupAllTest() {\n+    @Test public void test_lookupAll_on_nodes_without_pseudo_classes() {\n@@ -99,0 +112,127 @@\n+\n+    @Test\n+    public void test_lookup_and_lookupAll_on_nodes_with_pseudo_classes() {\n+        Set<Node> nodes = root.lookupAll(\".h:testPseudo2\");\n+        assertEquals(1, nodes.size());\n+        assertTrue(nodes.contains(hg));\n+\n+        Node found = root.lookup(\".h:testPseudo2\");\n+        assertSame(hg, found);\n+\n+        found = root.lookup(\":testPseudo2\");\n+        assertSame(hg, found);\n+\n+        found = root.lookup(\".h:testPseudo1:testPseudo2\");\n+        assertSame(hg, found);\n+\n+        nodes = root.lookupAll(\".g:testPseudo1\");\n+        assertEquals(2, nodes.size());\n+        assertTrue(nodes.contains(g));\n+        assertTrue(nodes.contains(hg));\n+\n+        nodes = root.lookupAll(\":testPseudo1\");\n+        assertEquals(2, nodes.size());\n+        assertTrue(nodes.contains(g));\n+        assertTrue(nodes.contains(hg));\n+\n+        nodes = root.lookupAll(\".f > .h:testPseudo1\");\n+        assertEquals(1, nodes.size());\n+        assertTrue(nodes.contains(hg));\n+\n+        nodes = root.lookupAll(\".f:testPseudo > .h:testPseudo1\");\n+        assertEquals(1, nodes.size());\n+        assertTrue(nodes.contains(hg));\n+\n+        nodes = root.lookupAll(\".f:randomPseudo\");\n+        assertEquals(0, nodes.size());\n+    }\n+\n+    \/**\n+     * Verifies that the lookup ignores pseudo classes when selector contains no explicit pseudo class, but all the nodes have pseudo classes set to them.\n+     *\/\n+    @Test\n+    public void test_lookupAll_on_nodes_with_pseudo_classes_ignoring_pseudo_classes_in_selector() {\n+        \/\/ Except root node all the other nodes (f, g, hg) have pseudo classes set to them\n+        Set<Node> nodes = root.lookupAll(\".g\");\n+        assertEquals(2, nodes.size());\n+        assertTrue(nodes.contains(g));\n+        assertTrue(nodes.contains(hg));\n+\n+        nodes = root.lookupAll(\"#root .g\");\n+        assertEquals(2, nodes.size());\n+        assertTrue(nodes.contains(g));\n+        assertTrue(nodes.contains(hg));\n+\n+        nodes = root.lookupAll(\".f .g\");\n+        assertEquals(2, nodes.size());\n+        assertTrue(nodes.contains(g));\n+        assertTrue(nodes.contains(hg));\n+\n+        nodes = root.lookupAll(\".f .h\");\n+        assertEquals(1, nodes.size());\n+        assertTrue(nodes.contains(hg));\n+\n+        nodes = root.lookupAll(\".f > .h\");\n+        assertEquals(1, nodes.size());\n+        assertTrue(nodes.contains(hg));\n+\n+        nodes = root.lookupAll(\".h\");\n+        assertEquals(1, nodes.size());\n+        assertTrue(nodes.contains(hg));\n+\n+        nodes = root.lookupAll(\"#root > .f\");\n+        assertEquals(1, nodes.size());\n+        assertTrue(nodes.contains(f));\n+\n+        nodes = root.lookupAll(\"#root .f\");\n+        assertEquals(1, nodes.size());\n+        assertTrue(nodes.contains(f));\n+\n+        nodes = root.lookupAll(\".random\");\n+        assertEquals(0, nodes.size());\n+\n+        nodes = root.lookupAll(\".random .h\");\n+        assertEquals(0, nodes.size());\n+    }\n+\n+    \/**\n+     * Verifies that the lookup ignores pseudo classes when selector contains no explicit pseudo class.\n+     *\/\n+    @Test\n+    public void test_lookupAll_on_nodes_with_same_style_and_different_pseudo_classes() {\n+        Group root = new Group();\n+        root.setId(\"root\");\n+\n+        Group xy = new Group();\n+        xy.getStyleClass().addAll(\"x\", \"y\");\n+\n+        Group x = new Group();\n+        x.getStyleClass().addAll(\"x\");\n+\n+        Group x1 = new Group();\n+        x1.getStyleClass().addAll(\"x\");\n+        x1.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"pseudo\"), true);\n+\n+        ParentShim.getChildren(root).addAll(x, x1, xy);\n+\n+        Set<Node> nodes = root.lookupAll(\".x\");\n+        assertEquals(3, nodes.size());\n+        assertTrue(nodes.contains(x));\n+        assertTrue(nodes.contains(x1));\n+        assertTrue(nodes.contains(xy));\n+\n+        nodes = root.lookupAll(\".x:pseudo\");\n+        assertTrue(nodes.contains(x1));\n+\n+        nodes = root.lookupAll(\"#root .x\");\n+        assertEquals(3, nodes.size());\n+        assertTrue(nodes.contains(x));\n+        assertTrue(nodes.contains(x1));\n+        assertTrue(nodes.contains(xy));\n+\n+        nodes = root.lookupAll(\"#root .x:pseudo\");\n+        assertTrue(nodes.contains(x1));\n+\n+        nodes = root.lookupAll(\".x:random\");\n+        assertEquals(0, nodes.size());\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Node_lookup_Test.java","additions":148,"deletions":8,"binary":false,"changes":156,"status":"modified"}]}