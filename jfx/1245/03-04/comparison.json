{"files":[{"patch":"@@ -114,1 +114,1 @@\n-    public void lookupPseudoTest(){\n+    public void lookupPseudoTest() {\n@@ -149,0 +149,48 @@\n+\n+    \/**\n+     * Verifies that the lookup ignores pseudo classes when selector contains no explicit pseudo class.\n+     *\/\n+    @Test\n+    public void lookupPseudoTest2() {\n+        \/\/ Except root node all the other nodes (f, g, hg) have pseudo classes set to them\n+        Set<Node> nodes = root.lookupAll(\".g\");\n+        assertEquals(2, nodes.size());\n+        assertTrue(nodes.contains(g));\n+        assertTrue(nodes.contains(hg));\n+\n+        nodes = root.lookupAll(\"#root .g\");\n+        assertEquals(2, nodes.size());\n+        assertTrue(nodes.contains(g));\n+        assertTrue(nodes.contains(hg));\n+\n+        nodes = root.lookupAll(\".f .g\");\n+        assertEquals(2, nodes.size());\n+        assertTrue(nodes.contains(g));\n+        assertTrue(nodes.contains(hg));\n+\n+        nodes = root.lookupAll(\".f .h\");\n+        assertEquals(1, nodes.size());\n+        assertTrue(nodes.contains(hg));\n+\n+        nodes = root.lookupAll(\".f > .h\");\n+        assertEquals(1, nodes.size());\n+        assertTrue(nodes.contains(hg));\n+\n+        nodes = root.lookupAll(\".h\");\n+        assertEquals(1, nodes.size());\n+        assertTrue(nodes.contains(hg));\n+\n+        nodes = root.lookupAll(\"#root > .f\");\n+        assertEquals(1, nodes.size());\n+        assertTrue(nodes.contains(f));\n+\n+        nodes = root.lookupAll(\"#root .f\");\n+        assertEquals(1, nodes.size());\n+        assertTrue(nodes.contains(f));\n+\n+        nodes = root.lookupAll(\".random\");\n+        assertEquals(0, nodes.size());\n+\n+        nodes = root.lookupAll(\".random .h\");\n+        assertEquals(0, nodes.size());\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Node_lookup_Test.java","additions":49,"deletions":1,"binary":false,"changes":50,"status":"modified"}]}