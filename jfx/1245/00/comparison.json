{"files":[{"patch":"@@ -251,0 +251,4 @@\n+        if(!pseudoClassState.isEmpty()){\n+            return stateMatches(styleable, styleable.getPseudoClassStates());\n+        }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/SimpleSelector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+\n+import javafx.css.PseudoClass;\n@@ -41,6 +43,6 @@\n-    \/\/                  Group & #root\n-    \/\/                \/      \\\n-    \/\/              #a      .b.c\n-    \/\/             \/   \\        \\\n-    \/\/           .d    #e        .d\n-    private Group root, a, bc, d, e, d2;\n+    \/\/                   Group & #root\n+    \/\/                    \/        \\\n+    \/\/                 #a.c       .b.c:testPseudo\n+    \/\/                \/    \\         \\\n+    \/\/    .d:testPseudo1    #e     .d:testPseudo1:testPseudo2\n+    private Group root, ac, bc, d, e, d2;\n@@ -51,2 +53,3 @@\n-        a = new Group();\n-        a.setId(\"a\");\n+        ac = new Group();\n+        ac.setId(\"a\");\n+        ac.getStyleClass().addAll(\"c\");\n@@ -55,0 +58,1 @@\n+        d.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"testPseudo1\"),true);\n@@ -59,0 +63,1 @@\n+        bc.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"testPseudo\"),true);\n@@ -61,2 +66,4 @@\n-        ParentShim.getChildren(root).addAll(a, bc);\n-        ParentShim.getChildren(a).addAll(d, e);\n+        d2.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"testPseudo1\"),true);\n+        d2.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"testPseudo2\"),true);\n+        ParentShim.getChildren(root).addAll(ac, bc);\n+        ParentShim.getChildren(ac).addAll(d, e);\n@@ -71,1 +78,1 @@\n-        assertSame(a, found);\n+        assertSame(ac, found);\n@@ -83,1 +90,1 @@\n-        assertSame(d2, found);\n+        assertSame(d, found);\n@@ -92,1 +99,1 @@\n-        assertTrue(nodes.contains(a));\n+        assertTrue(nodes.contains(ac));\n@@ -99,0 +106,29 @@\n+\n+    @Test\n+    public void lookupPsuedoTest(){\n+        Set<Node> nodes = root.lookupAll(\".d:testPseudo2\");\n+        assertEquals(1, nodes.size());\n+        assertTrue(nodes.contains(d2));\n+\n+        Node found = root.lookup(\".d:testPseudo2\");\n+        assertSame(d2, found);\n+\n+        found = root.lookup(\".d:testPseudo1:testPseudo2\");\n+        assertSame(d2, found);\n+\n+        nodes = root.lookupAll(\".d:testPseudo1\");\n+        assertEquals(2, nodes.size());\n+        assertTrue(nodes.contains(d));\n+        assertTrue(nodes.contains(d2));\n+\n+        nodes = root.lookupAll(\"#a > .d:testPseudo1\");\n+        assertEquals(1, nodes.size());\n+        assertTrue(nodes.contains(d));\n+\n+        nodes = root.lookupAll(\".c:testPseudo > .d:testPseudo1\");\n+        assertEquals(1, nodes.size());\n+        assertTrue(nodes.contains(d2));\n+\n+        nodes = root.lookupAll(\".d:randomPseudo\");\n+        assertEquals(0, nodes.size());\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Node_lookup_Test.java","additions":50,"deletions":14,"binary":false,"changes":64,"status":"modified"}]}