{"files":[{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.web;\n+\n+import javafx.concurrent.Worker.State;\n+\n+import static javafx.concurrent.Worker.State.SUCCEEDED;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import java.util.concurrent.CountDownLatch;\n+\n+import org.junit.After;\n+import org.junit.Test;\n+import java.io.File;\n+import java.io.IOException;\n+import javafx.scene.web.WebView;\n+import javafx.scene.web.WebEngine;\n+\n+public class WebWorkerTest extends TestBase {\n+\n+    private State getLoadState() {\n+        return submit(() -> getEngine().getLoadWorker().getState());\n+    }\n+\n+    @After\n+    public void after() {\n+    }\n+\n+    @Test\n+    public void testWorker() {\n+        final WebEngine webEngine = getEngine();\n+        webEngine.setJavaScriptEnabled(true);\n+        load(new File(\"src\/test\/resources\/test\/html\/worker.html\"));\n+        assertTrue(\"Load task completed successfully\", getLoadState() == State.SUCCEEDED);\n+\n+        try {\n+            \/\/ Put the thread to sleep for the specified time (in milliseconds)\n+            Thread.sleep(500);\n+        } catch (InterruptedException e) {\n+            \/\/ Handle the exception if the thread is interrupted while sleeping\n+        }\n+\n+        submit(() -> {\n+            WebView view = getView();\n+            String res = (String) view.getEngine().executeScript(\"document.getElementById('result').innerText;\");\n+            assertEquals(\"4\",res);\n+        });\n+    }\n+}\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/WebWorkerTest.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+<!DOCTYPE html>\n+<html>\n+<body onload=\"startWorker()\">\n+\n+<p id=\"result\"><\/p>\n+\n+<script>\n+\n+var work;\n+\n+function startWorker() {\n+  if (typeof(Worker) !== \"undefined\") {\n+    if (typeof(work) == \"undefined\") {\n+      work = new Worker(\"worker.js\");\n+    }\n+    work.onmessage = function(event) {\n+      document.getElementById(\"result\").innerHTML = event.data;\n+    };\n+  }\n+}\n+\n+function stopWorker() {\n+  work.terminate();\n+  work = undefined;\n+}\n+\n+<\/script>\n+\n+<\/body>\n+<\/html>\n+\n","filename":"modules\/javafx.web\/src\/test\/resources\/test\/html\/worker.html","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+\/* simple worker module to test*\/\n+\n+var i = 0;\n+let timeoutID;\n+\n+function doIncrement() {\n+  i = i + 1;\n+  postMessage(i);\n+\n+  if (i < 4) {\n+    \/\/ If i is less than 4, schedule the next call\n+    timeoutID = setTimeout(doIncrement, 50);\n+  }\n+}\n+\n+doIncrement();\n+\n","filename":"modules\/javafx.web\/src\/test\/resources\/test\/html\/worker.js","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"}]}