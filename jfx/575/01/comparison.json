{"files":[{"patch":"@@ -69,1 +69,1 @@\n-    protected abstract boolean isTableRowSelected(); \/\/ tableCell.getTreeTableRow().isSelected()\n+    protected abstract boolean isTableRowSelected(); \/\/ tableCell.getTableRow().isSelected()\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/TableCellBehaviorBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-        return getNode().getTreeTableRow().isSelected();\n+        return getNode().getTableRow().isSelected();\n@@ -114,1 +114,1 @@\n-        final TreeItem<S> treeItem = getNode().getTreeTableRow().getTreeItem();\n+        final TreeItem<S> treeItem = getNode().getTableRow().getTreeItem();\n@@ -122,1 +122,1 @@\n-            final Node disclosureNode = getNode().getTreeTableRow().getDisclosureNode();\n+            final Node disclosureNode = getNode().getTableRow().getDisclosureNode();\n@@ -145,1 +145,1 @@\n-        TreeItem<S> treeItem = getNode().getTreeTableRow().getTreeItem();\n+        TreeItem<S> treeItem = getNode().getTableRow().getTreeItem();\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/TreeTableCellBehavior.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-     * The TreeTableColumn instance that backs this TreeTableCell.\n+     * The {@code TreeTableColumn} instance that backs this {@code TreeTableCell}.\n@@ -205,2 +205,2 @@\n-    private ReadOnlyObjectWrapper<TreeTableColumn<S,T>> treeTableColumn =\n-            new ReadOnlyObjectWrapper<TreeTableColumn<S,T>>(this, \"treeTableColumn\") {\n+    private ReadOnlyObjectWrapper<TreeTableColumn<S,T>> tableColumn =\n+            new ReadOnlyObjectWrapper<TreeTableColumn<S,T>>(this, \"tableColumn\") {\n@@ -211,3 +211,3 @@\n-    public final ReadOnlyObjectProperty<TreeTableColumn<S,T>> tableColumnProperty() { return treeTableColumn.getReadOnlyProperty(); }\n-    private void setTableColumn(TreeTableColumn<S,T> value) { treeTableColumn.set(value); }\n-    public final TreeTableColumn<S,T> getTableColumn() { return treeTableColumn.get(); }\n+    public final ReadOnlyObjectProperty<TreeTableColumn<S,T>> tableColumnProperty() { return tableColumn.getReadOnlyProperty(); }\n+    private void setTableColumn(TreeTableColumn<S,T> value) { tableColumn.set(value); }\n+    public final TreeTableColumn<S,T> getTableColumn() { return tableColumn.get(); }\n@@ -218,1 +218,1 @@\n-     * The TreeTableView associated with this TreeTableCell.\n+     * The {@code TreeTableView} associated with this {@code TreeTableCell}.\n@@ -287,1 +287,1 @@\n-     * The TreeTableRow that this TreeTableCell currently finds itself placed within.\n+     * The {@code TreeTableRow} that this {@code TreeTableCell} currently finds itself placed within.\n@@ -289,5 +289,7 @@\n-    private ReadOnlyObjectWrapper<TreeTableRow<S>> treeTableRow =\n-            new ReadOnlyObjectWrapper<TreeTableRow<S>>(this, \"treeTableRow\");\n-    private void setTreeTableRow(TreeTableRow<S> value) { treeTableRow.set(value); }\n-    public final TreeTableRow<S> getTreeTableRow() { return treeTableRow.get(); }\n-    public final ReadOnlyObjectProperty<TreeTableRow<S>> tableRowProperty() { return treeTableRow;  }\n+    private ReadOnlyObjectWrapper<TreeTableRow<S>> tableRow =\n+            new ReadOnlyObjectWrapper<TreeTableRow<S>>(this, \"tableRow\");\n+    private void setTableRow(TreeTableRow<S> value) { tableRow.set(value); }\n+    public final TreeTableRow<S> getTableRow() { return tableRow.get(); }\n+    public final ReadOnlyObjectProperty<TreeTableRow<S>> tableRowProperty() {\n+        return tableRow.getReadOnlyProperty();\n+    }\n@@ -295,0 +297,8 @@\n+    \/\/ The following method was misnamed and is deprecated in favor of the\n+    \/\/ correctly named method.\n+    \/**\n+     * @deprecated Use {@link getTableRow} instead.\n+     * @return the {@code TreeTableRow}\n+     *\/\n+    @Deprecated(since = \"17\")\n+    public final TreeTableRow<S> getTreeTableRow() { return getTableRow(); }\n@@ -312,1 +322,1 @@\n-        final TreeTableRow<S> row = getTreeTableRow();\n+        final TreeTableRow<S> row = getTableRow();\n@@ -430,1 +440,1 @@\n-        if (getTreeTableRow() == null || getTreeTableRow().isEmpty()) return;\n+        if (getTableRow() == null || getTableRow().isEmpty()) return;\n@@ -623,1 +633,1 @@\n-        final TreeTableRow<S> tableRow = getTreeTableRow();\n+        final TreeTableRow<S> tableRow = getTableRow();\n@@ -726,1 +736,1 @@\n-        this.setTreeTableRow(treeTableRow);\n+        this.setTableRow(treeTableRow);\n@@ -813,1 +823,1 @@\n-            case SELECTED: return isInCellSelectionMode() ? isSelected() : getTreeTableRow().isSelected();\n+            case SELECTED: return isInCellSelectionMode() ? isSelected() : getTableRow().isSelected();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableCell.java","additions":28,"deletions":18,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-        TreeTableRow<S> treeTableRow = cell.getTreeTableRow();\n+        TreeTableRow<S> treeTableRow = cell.getTableRow();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TreeTableCellSkin.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import javafx.beans.property.ObjectProperty;\n@@ -128,1 +129,1 @@\n-        assertSame(root, cell.getTreeTableRow().getTreeItem());\n+        assertSame(root, cell.getTableRow().getTreeItem());\n@@ -131,1 +132,1 @@\n-        assertSame(apples, cell.getTreeTableRow().getTreeItem());\n+        assertSame(apples, cell.getTableRow().getTreeItem());\n@@ -139,1 +140,1 @@\n-        assertSame(root, cell.getTreeTableRow().getTreeItem());\n+        assertSame(root, cell.getTableRow().getTreeItem());\n@@ -142,1 +143,1 @@\n-        assertSame(apples, cell.getTreeTableRow().getTreeItem());\n+        assertSame(apples, cell.getTableRow().getTreeItem());\n@@ -155,1 +156,1 @@\n-        assertNull(cell.getTreeTableRow().getTreeItem());\n+        assertNull(cell.getTableRow().getTreeItem());\n@@ -181,1 +182,1 @@\n-        assertNull(cell.getTreeTableRow().getTreeItem());\n+        assertNull(cell.getTableRow().getTreeItem());\n@@ -191,1 +192,1 @@\n-        assertSame(apples, cell.getTreeTableRow().getTreeItem());\n+        assertSame(apples, cell.getTableRow().getTreeItem());\n@@ -204,1 +205,1 @@\n-        assertSame(oranges, cell.getTreeTableRow().getTreeItem());\n+        assertSame(oranges, cell.getTableRow().getTreeItem());\n@@ -498,0 +499,25 @@\n+    @Test public void checkTableRowPropertyName() {\n+        assertEquals(\"tableRow\", cell.tableRowProperty().getName());\n+    }\n+\n+    @Test public void checkTableColumnPropertyName() {\n+        assertEquals(\"tableColumn\", cell.tableColumnProperty().getName());\n+    }\n+\n+    @Test public void checkTableRowProperty() {\n+        cell.updateTreeTableView(tree);\n+        cell.updateTreeTableRow(row);\n+        assertSame(row, cell.getTableRow());\n+        assertSame(row, cell.tableRowProperty().get());\n+        assertFalse(cell.tableRowProperty() instanceof ObjectProperty);\n+    }\n+\n+    @Test public void checkTableColumnProperty() {\n+        TreeTableColumn<String, String> column = new TreeTableColumn<>();\n+        cell.updateTreeTableView(tree);\n+        cell.updateTreeTableColumn(column);\n+        assertSame(column, cell.getTableColumn());\n+        assertSame(column, cell.tableColumnProperty().get());\n+        assertFalse(cell.tableColumnProperty() instanceof ObjectProperty);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableCellTest.java","additions":34,"deletions":8,"binary":false,"changes":42,"status":"modified"}]}