{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,6 @@\n-import com.sun.javafx.scene.control.behavior.BehaviorBase;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n@@ -30,0 +35,8 @@\n+import javafx.collections.ObservableList;\n+import javafx.css.CssMetaData;\n+import javafx.css.Styleable;\n+import javafx.css.StyleableDoubleProperty;\n+import javafx.css.StyleableProperty;\n+import javafx.css.converter.SizeConverter;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.Node;\n@@ -39,11 +52,2 @@\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import javafx.beans.property.DoubleProperty;\n-import javafx.scene.AccessibleAttribute;\n-import javafx.scene.Node;\n-import javafx.css.StyleableDoubleProperty;\n-import javafx.css.CssMetaData;\n-\n-import javafx.css.converter.SizeConverter;\n+import com.sun.javafx.scene.control.ListenerHelper;\n+import com.sun.javafx.scene.control.behavior.BehaviorBase;\n@@ -52,5 +56,0 @@\n-import javafx.beans.property.ObjectProperty;\n-import javafx.collections.ObservableList;\n-import javafx.css.Styleable;\n-import javafx.css.StyleableProperty;\n-\n@@ -77,3 +76,0 @@\n-\n-    private TreeTableViewSkin treeTableViewSkin;\n-\n@@ -102,1 +98,0 @@\n-\/\/        control.setInputMap(behavior.getInputMap());\n@@ -105,1 +100,0 @@\n-        updateTableViewSkin();\n@@ -107,3 +101,7 @@\n-        registerChangeListener(control.treeTableViewProperty(), e -> updateTableViewSkin());\n-        registerChangeListener(control.indexProperty(), e -> updateCells = true);\n-        registerChangeListener(control.treeItemProperty(), e -> {\n+        ListenerHelper lh = ListenerHelper.get(this);\n+\n+        lh.addChangeListener(control.indexProperty(), (ev) -> {\n+            updateCells = true;\n+        });\n+\n+        lh.addChangeListener(control.treeItemProperty(), (ev) -> {\n@@ -121,0 +119,1 @@\n+        ListenerHelper lh = ListenerHelper.get(this);\n@@ -123,1 +122,1 @@\n-            registerInvalidationListener(getSkinnable().treeTableViewProperty(), e -> {\n+            lh.addInvalidationListener(getSkinnable().treeTableViewProperty(), (ev) -> {\n@@ -128,1 +127,1 @@\n-            registerChangeListener(treeTableView.treeColumnProperty(), e -> {\n+            lh.addChangeListener(treeTableView.treeColumnProperty(), (ev) -> {\n@@ -138,1 +137,1 @@\n-                registerChangeListener(fixedCellSizeProperty, e -> {\n+                lh.addChangeListener(fixedCellSizeProperty, (ev) -> {\n@@ -149,1 +148,3 @@\n-                registerChangeListener(getVirtualFlow().widthProperty(), e -> treeTableView.requestLayout());\n+                lh.addChangeListener(getVirtualFlow().widthProperty(), (ev) -> {\n+                    treeTableView.requestLayout();\n+                });\n@@ -385,7 +386,0 @@\n-    private void updateTableViewSkin() {\n-        TreeTableView<T> tableView = getSkinnable().getTreeTableView();\n-        if (tableView != null && tableView.getSkin() instanceof TreeTableViewSkin) {\n-            treeTableViewSkin = (TreeTableViewSkin)tableView.getSkin();\n-        }\n-    }\n-\n@@ -394,1 +388,5 @@\n-        return treeTableViewSkin;\n+        TreeTableView<T> t = getSkinnable().getTreeTableView();\n+        if (t != null && t.getSkin() instanceof TreeTableViewSkin) {\n+            return (TreeTableViewSkin)t.getSkin();\n+        }\n+        return null;\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TreeTableRowSkin.java","additions":36,"deletions":38,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,0 @@\n-import com.sun.javafx.scene.control.TreeTableViewBackingList;\n-import javafx.event.WeakEventHandler;\n-import javafx.scene.control.*;\n-\n-import com.sun.javafx.scene.control.behavior.TreeTableViewBehavior;\n-\n@@ -46,1 +40,7 @@\n-import javafx.scene.control.TreeItem.TreeModificationEvent;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableCell;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTablePosition;\n+import javafx.scene.control.TreeTableRow;\n+import javafx.scene.control.TreeTableView;\n@@ -50,0 +50,5 @@\n+import com.sun.javafx.scene.control.IDisconnectable;\n+import com.sun.javafx.scene.control.ListenerHelper;\n+import com.sun.javafx.scene.control.TreeTableViewBackingList;\n+import com.sun.javafx.scene.control.behavior.TreeTableViewBehavior;\n+\n@@ -69,40 +74,1 @@\n-\n-\n-\n-    \/* *************************************************************************\n-     *                                                                         *\n-     * Listeners                                                               *\n-     *                                                                         *\n-     **************************************************************************\/\n-\n-    private EventHandler<TreeItem.TreeModificationEvent<T>> rootListener = e -> {\n-        if (e.wasAdded() && e.wasRemoved() && e.getAddedSize() == e.getRemovedSize()) {\n-            \/\/ Fix for RT-14842, where the children of a TreeItem were changing,\n-            \/\/ but because the overall item count was staying the same, there was\n-            \/\/ no event being fired to the skin to be informed that the items\n-            \/\/ had changed. So, here we just watch for the case where the number\n-            \/\/ of items being added is equal to the number of items being removed.\n-            markItemCountDirty();\n-            getSkinnable().requestLayout();\n-        } else if (e.getEventType().equals(TreeItem.valueChangedEvent())) {\n-            \/\/ Fix for RT-14971 and RT-15338.\n-            requestRebuildCells();\n-        } else {\n-            \/\/ Fix for RT-20090. We are checking to see if the event coming\n-            \/\/ from the TreeItem root is an event where the count has changed.\n-            EventType<?> eventType = e.getEventType();\n-            while (eventType != null) {\n-                if (eventType.equals(TreeItem.<T>expandedItemCountChangeEvent())) {\n-                    markItemCountDirty();\n-                    getSkinnable().requestLayout();\n-                    break;\n-                }\n-                eventType = eventType.getSuperType();\n-            }\n-        }\n-\n-        \/\/ fix for RT-37853\n-        getSkinnable().edit(-1, null);\n-    };\n-\n-    private WeakEventHandler<TreeModificationEvent<T>> weakRootListener;\n+    private IDisconnectable rootListener;\n@@ -130,1 +96,0 @@\n-\/\/        control.setInputMap(behavior.getInputMap());\n@@ -137,0 +102,2 @@\n+        ListenerHelper lh = ListenerHelper.get(this);\n+\n@@ -147,2 +114,2 @@\n-        flow.getVbar().addEventFilter(MouseEvent.MOUSE_PRESSED, ml);\n-        flow.getHbar().addEventFilter(MouseEvent.MOUSE_PRESSED, ml);\n+        lh.addEventFilter(flow.getVbar(), MouseEvent.MOUSE_PRESSED, ml);\n+        lh.addEventFilter(flow.getHbar(), MouseEvent.MOUSE_PRESSED, ml);\n@@ -164,1 +131,1 @@\n-        registerChangeListener(control.rootProperty(), e -> {\n+        lh.addChangeListener(control.rootProperty(), (ev) -> {\n@@ -167,1 +134,0 @@\n-\n@@ -170,1 +136,2 @@\n-        registerChangeListener(control.showRootProperty(), e -> {\n+\n+        lh.addChangeListener(control.showRootProperty(), (ev) -> {\n@@ -180,4 +147,0 @@\n-        registerChangeListener(control.rowFactoryProperty(), e -> flow.recreateCells());\n-        registerChangeListener(control.expandedItemCountProperty(), e -> markItemCountDirty());\n-        registerChangeListener(control.fixedCellSizeProperty(), e -> flow.setFixedCellSize(getSkinnable().getFixedCellSize()));\n-    }\n@@ -185,0 +148,12 @@\n+        lh.addChangeListener(control.rowFactoryProperty(), (ev) -> {\n+            flow.recreateCells();\n+        });\n+\n+        lh.addChangeListener(control.expandedItemCountProperty(), (ev) -> {\n+            markItemCountDirty();\n+        });\n+\n+        lh.addChangeListener(control.fixedCellSizeProperty(), (ev) -> {\n+            flow.setFixedCellSize(getSkinnable().getFixedCellSize());\n+        });\n+    }\n@@ -194,2 +169,8 @@\n-    @Override public void dispose() {\n-        super.dispose();\n+    @Override\n+    public void dispose() {\n+        flow.setCellFactory(null);\n+\n+        if (rootListener != null) {\n+            rootListener.disconnect();\n+            rootListener = null;\n+        }\n@@ -200,0 +181,2 @@\n+\n+        super.dispose();\n@@ -302,2 +285,3 @@\n-        if (getRoot() != null && weakRootListener != null) {\n-            getRoot().removeEventHandler(TreeItem.<T>treeNotificationEvent(), weakRootListener);\n+        if (rootListener != null) {\n+            rootListener.disconnect();\n+            rootListener = null;\n@@ -307,2 +291,31 @@\n-            weakRootListener = new WeakEventHandler<>(rootListener);\n-            getRoot().addEventHandler(TreeItem.<T>treeNotificationEvent(), weakRootListener);\n+            \/\/ TODO I wonder if it might be possible for the root ref to get collected between these two lines\n+            \/\/ which would throw an NPE.  Perhaps we should simply use newRoot instance instead of getRoot().\n+            rootListener = ListenerHelper.get(this).addEventHandler(getRoot(), TreeItem.<T>treeNotificationEvent(), e -> {\n+                if (e.wasAdded() && e.wasRemoved() && e.getAddedSize() == e.getRemovedSize()) {\n+                    \/\/ Fix for RT-14842, where the children of a TreeItem were changing,\n+                    \/\/ but because the overall item count was staying the same, there was\n+                    \/\/ no event being fired to the skin to be informed that the items\n+                    \/\/ had changed. So, here we just watch for the case where the number\n+                    \/\/ of items being added is equal to the number of items being removed.\n+                    markItemCountDirty();\n+                    getSkinnable().requestLayout();\n+                } else if (e.getEventType().equals(TreeItem.valueChangedEvent())) {\n+                    \/\/ Fix for RT-14971 and RT-15338.\n+                    requestRebuildCells();\n+                } else {\n+                    \/\/ Fix for RT-20090. We are checking to see if the event coming\n+                    \/\/ from the TreeItem root is an event where the count has changed.\n+                    EventType<?> eventType = e.getEventType();\n+                    while (eventType != null) {\n+                        if (eventType.equals(TreeItem.<T>expandedItemCountChangeEvent())) {\n+                            markItemCountDirty();\n+                            getSkinnable().requestLayout();\n+                            break;\n+                        }\n+                        eventType = eventType.getSuperType();\n+                    }\n+                }\n+\n+                \/\/ fix for RT-37853\n+                getSkinnable().edit(-1, null);\n+            });\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TreeTableViewSkin.java","additions":77,"deletions":64,"binary":false,"changes":141,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+import javafx.scene.control.TableViewShim;\n@@ -98,0 +99,1 @@\n+import javafx.scene.layout.Region;\n@@ -278,1 +280,1 @@\n-    public void testTreeTableRowVirtualFlowWidthListenerReplaceSkin() {\n+    public void testTreeTableRowTracksVirtualFlowReplaceSkin() {\n@@ -286,2 +288,1 @@\n-        assertNotNull(\"row skin must have listener to virtualFlow width\",\n-                unregisterChangeListeners(rowSkin, flow.widthProperty()));\n+        checkFollowsWidth(flow, (Region) rowSkin.getNode());\n@@ -291,1 +292,1 @@\n-     * Sanity: listener to flow's width is registered.\n+     * Sanity test checks that tree table row skin tracks the virtual flow width.\n@@ -294,1 +295,1 @@\n-    public void testTreeTableRowVirtualFlowWidthListener() {\n+    public void testTreeTableRowTracksVirtualFlowWidth() {\n@@ -300,2 +301,16 @@\n-        assertNotNull(\"row skin must have listener to virtualFlow width\",\n-                unregisterChangeListeners(rowSkin, flow.widthProperty()));\n+        checkFollowsWidth(flow, (Region) rowSkin.getNode());\n+    }\n+\n+    protected void checkFollowsWidth(Region owner, Region skin) {\n+        owner.resize(10000, 1000);\n+        Toolkit.getToolkit().firePulse();\n+        double widthBefore = skin.getWidth();\n+\n+        owner.resize(100, 1000);\n+        Toolkit.getToolkit().firePulse();\n+        double widthAfter = skin.getWidth();\n+\n+        \/\/ since we are dealing with tree\/tables with unconstrained resize policies,\n+        \/\/ the row skin may not follow the width exactly. we'll check that the width\n+        \/\/ simply changes.\n+        assertTrue(\"TreeTableRowSkin must follow the VirtualFlow width\", widthAfter < (widthBefore - 10));\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SkinCleanupTest.java","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -46,4 +46,0 @@\n-import javafx.scene.control.Accordion;\n-import javafx.scene.control.ButtonBar;\n-import javafx.scene.control.ColorPicker;\n-import javafx.scene.control.ComboBox;\n@@ -51,6 +47,0 @@\n-import javafx.scene.control.DatePicker;\n-import javafx.scene.control.MenuButton;\n-import javafx.scene.control.Pagination;\n-import javafx.scene.control.PasswordField;\n-import javafx.scene.control.ScrollBar;\n-import javafx.scene.control.ScrollPane;\n@@ -58,5 +48,0 @@\n-import javafx.scene.control.Spinner;\n-import javafx.scene.control.SplitMenuButton;\n-import javafx.scene.control.SplitPane;\n-import javafx.scene.control.TableView;\n-import javafx.scene.control.TreeTableView;\n@@ -217,34 +202,0 @@\n-        \/\/ FIXME as part of JDK-8241364\n-        \/\/ The default skins of these controls are leaking\n-        \/\/ step 1: file issues (where not yet done), add informal ignore to entry\n-        \/\/ step 2: fix and remove from list\n-        List<Class<? extends Control>> leakingClasses = List.of(\n-                \/\/\n-                \/\/ColorPicker.class,\n-\n-                \/\/\n-                \/\/ComboBox.class,\n-\n-                \/\/\n-                \/\/DatePicker.class,\n-\n-                \/\/\n-                \/\/MenuBar.class,\n-\n-                \/\/\n-                PasswordField.class,\n-\n-                \/\/\n-                \/\/Spinner.class,\n-\n-                \/\/\n-                \/\/SplitPane.class,\n-\n-                \/\/\n-                \/\/TableView.class,\n-\n-                \/\/\n-                TreeTableView.class\n-        );\n-        \/\/ remove the known issues to make the test pass\n-        controlClasses.removeAll(leakingClasses);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SkinMemoryLeakTest.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"modified"}]}