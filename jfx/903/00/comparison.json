{"files":[{"patch":"@@ -77,0 +77,1 @@\n+import javafx.scene.input.InputMethodRequests;\n@@ -195,1 +196,2 @@\n-    private EventHandler<InputMethodEvent> inputMethodTextChangedHandler;\n+    private final EventHandler<InputMethodEvent> inputMethodTextChangedHandler = this::handleInputMethodEvent;\n+    private InputMethodRequests inputMethodRequests;\n@@ -328,5 +330,2 @@\n-        \/\/ FIXME: JDK-8268877 - incorrectly wired handler on replacing skin\n-        if (control.getOnInputMethodTextChanged() == null) {\n-            inputMethodTextChangedHandler = this::handleInputMethodEvent;\n-            control.setOnInputMethodTextChanged(inputMethodTextChangedHandler);\n-        }\n+        control.addEventHandler(InputMethodEvent.INPUT_METHOD_TEXT_CHANGED, inputMethodTextChangedHandler);\n+    }\n@@ -334,6 +333,20 @@\n-        control.setInputMethodRequests(new ExtendedInputMethodRequests() {\n-            @Override public Point2D getTextLocation(int offset) {\n-                Scene scene = getSkinnable().getScene();\n-                Window window = scene != null ? scene.getWindow() : null;\n-                if (window == null) {\n-                    return new Point2D(0, 0);\n+    @Override\n+    public void install() {\n+        super.install();\n+\n+        TextInputControl control = getSkinnable();\n+\n+        if (control.getInputMethodRequests() == null) {\n+            inputMethodRequests = new ExtendedInputMethodRequests() {\n+                @Override public Point2D getTextLocation(int offset) {\n+                    Scene scene = control.getScene();\n+                    Window window = scene != null ? scene.getWindow() : null;\n+                    if (window == null) {\n+                        return new Point2D(0, 0);\n+                    }\n+                    \/\/ Don't use imstart here because it isn't initialized yet.\n+                    Rectangle2D characterBounds = getCharacterBounds(control.getSelection().getStart() + offset);\n+                    Point2D p = control.localToScene(characterBounds.getMinX(), characterBounds.getMaxY());\n+                    Point2D location = new Point2D(window.getX() + scene.getX() + p.getX(),\n+                            window.getY() + scene.getY() + p.getY());\n+                    return location;\n@@ -341,11 +354,0 @@\n-                \/\/ Don't use imstart here because it isn't initialized yet.\n-                Rectangle2D characterBounds = getCharacterBounds(control.getSelection().getStart() + offset);\n-                Point2D p = getSkinnable().localToScene(characterBounds.getMinX(), characterBounds.getMaxY());\n-                Point2D location = new Point2D(window.getX() + scene.getX() + p.getX(),\n-                        window.getY() + scene.getY() + p.getY());\n-                return location;\n-            }\n-\n-            @Override public int getLocationOffset(int x, int y) {\n-                return getInsertionPoint(x, y);\n-            }\n@@ -353,3 +355,3 @@\n-            @Override public void cancelLatestCommittedText() {\n-                \/\/ TODO\n-            }\n+                @Override public int getLocationOffset(int x, int y) {\n+                    return getInsertionPoint(x, y);\n+                }\n@@ -357,3 +359,3 @@\n-            @Override public String getSelectedText() {\n-                TextInputControl control = getSkinnable();\n-                IndexRange selection = control.getSelection();\n+                @Override public void cancelLatestCommittedText() {\n+                    \/\/ TODO\n+                }\n@@ -361,2 +363,4 @@\n-                return control.getText(selection.getStart(), selection.getEnd());\n-            }\n+                @Override public String getSelectedText() {\n+                    IndexRange selection = control.getSelection();\n+                    return control.getText(selection.getStart(), selection.getEnd());\n+                }\n@@ -364,8 +368,9 @@\n-            @Override public int getInsertPositionOffset() {\n-                int caretPosition = getSkinnable().getCaretPosition();\n-                if (caretPosition < imstart) {\n-                    return caretPosition;\n-                } else if (caretPosition < imstart + imlength) {\n-                    return imstart;\n-                } else {\n-                    return caretPosition - imlength;\n+                @Override public int getInsertPositionOffset() {\n+                    int caretPosition = control.getCaretPosition();\n+                    if (caretPosition < imstart) {\n+                        return caretPosition;\n+                    } else if (caretPosition < imstart + imlength) {\n+                        return imstart;\n+                    } else {\n+                        return caretPosition - imlength;\n+                    }\n@@ -373,1 +378,0 @@\n-            }\n@@ -375,5 +379,7 @@\n-            @Override public String getCommittedText(int begin, int end) {\n-                TextInputControl control = getSkinnable();\n-                if (begin < imstart) {\n-                    if (end <= imstart) {\n-                        return control.getText(begin, end);\n+                @Override public String getCommittedText(int begin, int end) {\n+                    if (begin < imstart) {\n+                        if (end <= imstart) {\n+                            return control.getText(begin, end);\n+                        } else {\n+                            return control.getText(begin, imstart) + control.getText(imstart + imlength, end + imlength);\n+                        }\n@@ -381,1 +387,1 @@\n-                        return control.getText(begin, imstart) + control.getText(imstart + imlength, end + imlength);\n+                        return control.getText(begin + imlength, end + imlength);\n@@ -383,2 +389,0 @@\n-                } else {\n-                    return control.getText(begin + imlength, end + imlength);\n@@ -386,1 +390,0 @@\n-            }\n@@ -388,4 +391,6 @@\n-            @Override public int getCommittedTextLength() {\n-                return getSkinnable().getText().length() - imlength;\n-            }\n-        });\n+                @Override public int getCommittedTextLength() {\n+                    return control.getText().length() - imlength;\n+                }\n+            };\n+            control.setInputMethodRequests(inputMethodRequests);\n+        }\n@@ -396,5 +401,8 @@\n-        if (getSkinnable() == null) return;\n-        \/\/ the inputMethodEvent handler installed by this skin must be removed to prevent a memory leak\n-        \/\/ while a handler installed by the control must not be removed\n-        if (getSkinnable().getOnInputMethodTextChanged() == inputMethodTextChangedHandler) {\n-            getSkinnable().setOnInputMethodTextChanged(null);\n+        if (getSkinnable() == null) {\n+            return;\n+        }\n+\n+        getSkinnable().removeEventHandler(InputMethodEvent.INPUT_METHOD_TEXT_CHANGED, inputMethodTextChangedHandler);\n+\n+        if (getSkinnable().getInputMethodRequests() == inputMethodRequests) {\n+            getSkinnable().setInputMethodRequests(null);\n@@ -402,2 +410,0 @@\n-        \/\/ cleanup to guard against potential NPE\n-        getSkinnable().setInputMethodRequests(null);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TextInputControlSkin.java","additions":66,"deletions":60,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,26 @@\n+import static javafx.collections.FXCollections.observableArrayList;\n+import static javafx.scene.control.ControlShim.installDefaultSkin;\n+import static javafx.scene.control.SkinBaseShim.unregisterChangeListeners;\n+import static javafx.scene.control.skin.TableSkinShim.getCells;\n+import static javafx.scene.control.skin.TableSkinShim.getTableViewSkin;\n+import static javafx.scene.control.skin.TableSkinShim.getVirtualFlow;\n+import static javafx.scene.control.skin.TableSkinShim.isDirty;\n+import static javafx.scene.control.skin.TableSkinShim.isFixedCellSizeEnabled;\n+import static javafx.scene.control.skin.TextInputSkinShim.getPromptNode;\n+import static javafx.scene.control.skin.TextInputSkinShim.getScrollPane;\n+import static javafx.scene.control.skin.TextInputSkinShim.getTextNode;\n+import static javafx.scene.control.skin.TextInputSkinShim.getTextTranslateX;\n+import static javafx.scene.control.skin.TextInputSkinShim.setHandlePressed;\n+import static javafx.scene.layout.Region.USE_COMPUTED_SIZE;\n+import static javafx.scene.layout.Region.USE_PREF_SIZE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.attemptGC;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.replaceSkin;\n+import static test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils.getCell;\n+\n@@ -32,17 +58,0 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n-import com.sun.javafx.tk.Toolkit;\n-\n-import static javafx.collections.FXCollections.*;\n-import static javafx.scene.control.ControlShim.*;\n-import static javafx.scene.control.SkinBaseShim.*;\n-import static javafx.scene.control.skin.TableSkinShim.*;\n-import static javafx.scene.control.skin.TableSkinShim.getVirtualFlow;\n-import static javafx.scene.control.skin.TextInputSkinShim.*;\n-import static org.junit.Assert.*;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.*;\n-import static test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils.*;\n-\n@@ -54,0 +63,1 @@\n+import javafx.geometry.Point2D;\n@@ -85,0 +95,1 @@\n+import javafx.scene.input.InputMethodRequests;\n@@ -92,0 +103,8 @@\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import com.sun.javafx.tk.Toolkit;\n+\n@@ -1267,1 +1286,0 @@\n-    @Ignore(\"JDK-8268877\")\n@@ -1284,2 +1302,1 @@\n-     * Test that handler installed by skin is reset on replacing skin.\n-     * Here we test the instance of the handler.\n+     * Test that handler installed by the user is not reset on replacing skin.\n@@ -1287,1 +1304,0 @@\n-    @Ignore(\"JDK-8268877\")\n@@ -1289,1 +1305,1 @@\n-    public void testTextInputOnInputMethodTextChangedHandler() {\n+    public void testTextInputUserOnInputMethodTextChangedHandler() {\n@@ -1291,0 +1307,3 @@\n+        EventHandler<InputMethodEvent> h = (ev) -> { };\n+        field.setOnInputMethodTextChanged(h);\n+\n@@ -1292,0 +1311,1 @@\n+\n@@ -1293,0 +1313,1 @@\n+\n@@ -1294,2 +1315,53 @@\n-        assertNotSame(\"replaced skin must replace skin handler\", handler, field.getOnInputMethodTextChanged());\n-        assertNotNull(\"handler must not be null  \", field.getOnInputMethodTextChanged());\n+\n+        assertSame(\"user handler must not be changed\", h, handler);\n+        assertSame(\"replaced skin must not change handler\", handler, field.getOnInputMethodTextChanged());\n+    }\n+\n+    \/**\n+     * Test that input method requests installed by skin is reset on replacing skin.\n+     *\/\n+    @Test\n+    public void testTextInput_InputMethodRequestsIsResetOnReplacingSkin() {\n+        TextField t = new TextField();\n+        installDefaultSkin(t);\n+        InputMethodRequests im = t.getInputMethodRequests();\n+\n+        replaceSkin(t);\n+        InputMethodRequests im2 = t.getInputMethodRequests();\n+\n+        assertNotEquals(\"InputMethodRequests set by an old skin must be replaced by the new skin\", im, im2);\n+    }\n+\n+    \/**\n+     * Test that the user input method requests is not affected by the skin.\n+     *\/\n+    @Test\n+    public void testTextInput_UserMethodRequestsNotAffectedBySkin() {\n+        InputMethodRequests im = createInputMethodRequests();\n+        TextField t = new TextField();\n+        t.setInputMethodRequests(im);\n+        installDefaultSkin(t);\n+        assertEquals(\"skin must not alter user-set InputMethodRequests\", im, t.getInputMethodRequests());\n+    }\n+\n+    protected static InputMethodRequests createInputMethodRequests() {\n+        return new InputMethodRequests() {\n+            @Override\n+            public Point2D getTextLocation(int offset) {\n+                return new Point2D(0, 0);\n+            }\n+\n+            @Override\n+            public int getLocationOffset(int x, int y) {\n+                return 0;\n+            }\n+\n+            @Override\n+            public void cancelLatestCommittedText() {\n+            }\n+\n+            @Override\n+            public String getSelectedText() {\n+                return \"\";\n+            }\n+        };\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SkinCleanupTest.java","additions":97,"deletions":25,"binary":false,"changes":122,"status":"modified"}]}