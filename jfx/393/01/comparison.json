{"files":[{"patch":"@@ -211,1 +211,1 @@\n-                return (T)LocalDate.from(chronology.date(temporal));\n+                return (T) LocalDate.from(temporal);\n@@ -213,1 +213,1 @@\n-                return (T)LocalTime.from(temporal);\n+                return (T) LocalTime.from(temporal);\n@@ -215,1 +215,1 @@\n-                return (T)LocalDateTime.from(chronology.localDateTime(temporal));\n+                return (T) LocalDateTime.from(temporal);\n@@ -231,23 +231,1 @@\n-            if (value instanceof LocalDate) {\n-                ChronoLocalDate cDate;\n-                try {\n-                    cDate = chronology.date(value);\n-                } catch (DateTimeException ex) {\n-                    Logging.getLogger().warning(\"Converting LocalDate \" + value + \" to \" + chronology + \" failed, falling back to IsoChronology.\", ex);\n-                    chronology = IsoChronology.INSTANCE;\n-                    cDate = (LocalDate)value;\n-                }\n-                return formatter.format(cDate);\n-            } else if (value instanceof LocalDateTime) {\n-                ChronoLocalDateTime<? extends ChronoLocalDate> cDateTime;\n-                try {\n-                    cDateTime = chronology.localDateTime(value);\n-                } catch (DateTimeException ex) {\n-                    Logging.getLogger().warning(\"Converting LocalDateTime \" + value + \" to \" + chronology + \" failed, falling back to IsoChronology.\", ex);\n-                    chronology = IsoChronology.INSTANCE;\n-                    cDateTime = (LocalDateTime)value;\n-                }\n-                return formatter.format(cDateTime);\n-            } else {\n-                return formatter.format(value);\n-            }\n+            return formatter.format(value);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/converter\/LocalDateTimeStringConverter.java","additions":4,"deletions":26,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.time.DateTimeException;\n@@ -29,1 +30,0 @@\n-import java.time.chrono.Chronology;\n@@ -31,0 +31,1 @@\n+import java.time.chrono.JapaneseChronology;\n@@ -39,1 +40,0 @@\n-import javafx.util.converter.LocalTimeStringConverterShim;\n@@ -45,1 +45,0 @@\n-import org.junit.Ignore;\n@@ -53,0 +52,2 @@\n+\n+    private static final String JAPANESE_DATE_STRING = \"Saturday, January 12, 60 Sh≈çwa, 12:34:56 PM\";\n@@ -158,0 +159,11 @@\n+\n+    @Test\n+    public void testChronologyConsistency() {\n+        var converter = new LocalDateTimeStringConverter(FormatStyle.FULL, FormatStyle.MEDIUM, null, JapaneseChronology.INSTANCE);\n+        assertEquals(JAPANESE_DATE_STRING, converter.toString(VALID_LDT_WITH_SECONDS));\n+        \/\/ force a chronology change with an invalid Japanese date\n+        try {\n+            converter.toString(LocalDateTime.of(1, 1, 1, 1, 1, 1));\n+        } catch (DateTimeException e) {}\n+        assertEquals(VALID_LDT_WITH_SECONDS, converter.fromString(JAPANESE_DATE_STRING));\n+    }\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/LocalDateTimeStringConverterTest.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"}]}