{"files":[{"patch":"@@ -55,0 +55,1 @@\n+import java.io.ByteArrayInputStream;\n@@ -68,0 +69,3 @@\n+import java.nio.charset.Charset;\n+import java.nio.charset.IllegalCharsetNameException;\n+import java.nio.charset.UnsupportedCharsetException;\n@@ -1090,1 +1094,0 @@\n-                    parse = true;\n@@ -1103,1 +1106,0 @@\n-\n@@ -1107,2 +1109,1 @@\n-                        } catch (IOException ioe) {\n-                            stylesheet = null;\n+                        } catch (IOException ignored) {\n@@ -1111,1 +1112,1 @@\n-                        if (stylesheet == null && (parse = !parse)) {\n+                        if (stylesheet == null) {\n@@ -1114,1 +1115,0 @@\n-                            \/\/ Note that 'parse' is toggled in the test.\n@@ -1120,4 +1120,70 @@\n-                \/\/ either we failed to load the .bss file, or parse\n-                \/\/ was set to true.\n-                if ((url != null) && parse) {\n-                    stylesheet = new CssParser().parse(url);\n+                if (stylesheet == null) {\n+                    DataURI dataUri = null;\n+\n+                    if (url != null) {\n+                        stylesheet = new CssParser().parse(url);\n+                    } else {\n+                        dataUri = DataURI.tryParse(fname);\n+                    }\n+\n+                    if (dataUri != null) {\n+                        String mimeType = dataUri.getMimeType();\n+                        parse = true;\n+\n+                        if (mimeType != null) {\n+                            boolean isText =\n+                                \"text\".equalsIgnoreCase(dataUri.getMimeType())\n+                                    && (\"css\".equalsIgnoreCase(dataUri.getMimeSubtype())\n+                                        || \"plain\".equalsIgnoreCase(dataUri.getMimeSubtype()));\n+\n+                            boolean isBinary =\n+                                \"application\".equalsIgnoreCase(dataUri.getMimeType())\n+                                    && \"octet-stream\".equalsIgnoreCase(dataUri.getMimeSubtype());\n+\n+                            if (!isText && !isBinary) {\n+                                String message = String.format(\"Unexpected MIME type \\\"%s\/%s\\\" in stylesheet URI \\\"%s\\\"\",\n+                                    dataUri.getMimeType(), dataUri.getMimeSubtype(), dataUri);\n+\n+                                if (errors != null) {\n+                                    errors.add(new CssParser.ParseError(message));\n+                                }\n+\n+                                if (getLogger().isLoggable(Level.WARNING)) {\n+                                    getLogger().warning(message);\n+                                }\n+\n+                                return null;\n+                            }\n+\n+                            parse = isText;\n+                        }\n+\n+                        if (parse) {\n+                            String charsetName = dataUri.getParameters().get(\"charset\");\n+                            Charset charset;\n+\n+                            try {\n+                                charset = charsetName != null ? Charset.forName(charsetName) : Charset.defaultCharset();\n+                            } catch (IllegalCharsetNameException | UnsupportedCharsetException ex) {\n+                                String message = String.format(\n+                                    \"Unsupported charset \\\"%s\\\" in stylesheet URI \\\"%s\\\"\", charsetName, dataUri);\n+\n+                                if (errors != null) {\n+                                    errors.add(new CssParser.ParseError(message));\n+                                }\n+\n+                                if (getLogger().isLoggable(Level.WARNING)) {\n+                                    getLogger().warning(message);\n+                                }\n+\n+                                return null;\n+                            }\n+\n+                            var stylesheetText = new String(dataUri.getData(), charset);\n+                            stylesheet = new CssParser().parse(stylesheetText);\n+                        } else {\n+                            try (InputStream stream = new ByteArrayInputStream(dataUri.getData())) {\n+                                stylesheet = Stylesheet.loadBinary(stream);\n+                            }\n+                        }\n+                    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/StyleManager.java","additions":76,"deletions":10,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+import java.io.InputStream;\n@@ -281,0 +282,10 @@\n+        if (url == null) {\n+            return null;\n+        }\n+\n+        try (InputStream stream = url.openStream()) {\n+            return loadBinary(stream, url.toExternalForm());\n+        } catch (FileNotFoundException ex) {\n+            return null;\n+        }\n+    }\n@@ -282,1 +293,11 @@\n-        if (url == null) return null;\n+    \/**\n+     * Loads a binary stylesheet from a stream.\n+     *\n+     * @param stream the input stream\n+     * @return the loaded {@code Stylesheet}\n+     * @throws IOException if the binary stream corresponds to a more recent binary\n+     * css version or if an I\/O error occurs while reading from the stream\n+     *\/\n+    public static Stylesheet loadBinary(InputStream stream) throws IOException {\n+        return loadBinary(stream, null);\n+    }\n@@ -284,0 +305,1 @@\n+    private static Stylesheet loadBinary(InputStream stream, String uri) throws IOException {\n@@ -287,1 +309,1 @@\n-                     new DataInputStream(new BufferedInputStream(url.openStream(), 40 * 1024))) {\n+                     new DataInputStream(new BufferedInputStream(stream, 40 * 1024))) {\n@@ -292,1 +314,1 @@\n-                throw new IOException(url.toString() + \" wrong binary CSS version: \"\n+                throw new IOException(\"Wrong binary CSS version: \"\n@@ -299,1 +321,1 @@\n-            stylesheet = new Stylesheet(url.toExternalForm());\n+            stylesheet = new Stylesheet(uri);\n@@ -308,1 +330,1 @@\n-                stylesheet = new Stylesheet(url.toExternalForm());\n+                stylesheet = new Stylesheet(uri);\n@@ -320,3 +342,0 @@\n-        } catch (FileNotFoundException fnfe) {\n-            \/\/ This comes from url.openStream() and is expected.\n-            \/\/ It just means that the .bss file doesn't exist.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/Stylesheet.java","additions":28,"deletions":9,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+import javafx.css.Stylesheet;\n@@ -86,0 +87,1 @@\n+import java.io.File;\n@@ -1624,0 +1626,6 @@\n+     * The RFC 2397 \"data\" scheme for URLs is supported in addition to the protocol handlers that\n+     * are registered for the application.\n+     * If a URL uses the \"data\" scheme and the MIME type is either empty, \"text\/plain\", or \"text\/css\",\n+     * the payload will be interpreted as a CSS file.\n+     * If the MIME type is \"application\/octet-stream\", the payload will be interpreted as a binary\n+     * CSS file (see {@link Stylesheet#convertToBinary(File, File)}).\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Scene.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.css.StyleManager;\n@@ -41,0 +42,2 @@\n+import java.nio.file.Files;\n+import java.util.Base64;\n@@ -649,0 +652,115 @@\n+    @Test\n+    public void testLoadStylesheetFromDataURI() {\n+        var rect = new Rectangle();\n+        var root = new StackPane(rect);\n+        rect.getStyleClass().add(\"rect\");\n+\n+        \/\/ Stylesheet content: .rect { -fx-fill: blue; }\n+        root.getStylesheets().add(\"data:base64,LnJlY3QgeyAtZngtZmlsbDogYmx1ZTsgfQ==\");\n+        Scene scene = new Scene(root);\n+        scene.getRoot().applyCss();\n+\n+        assertEquals(Color.BLUE, rect.getFill());\n+    }\n+\n+    @Test\n+    public void testLoadStylesheetFromTextCssDataURI() {\n+        var rect = new Rectangle();\n+        var root = new StackPane(rect);\n+        rect.getStyleClass().add(\"rect\");\n+\n+        \/\/ Stylesheet content: .rect { -fx-fill: blue; }\n+        root.getStylesheets().add(\"data:text\/css;charset=utf-8;base64,LnJlY3QgeyAtZngtZmlsbDogYmx1ZTsgfQ==\");\n+        Scene scene = new Scene(root);\n+        scene.getRoot().applyCss();\n+\n+        assertEquals(Color.BLUE, rect.getFill());\n+    }\n+\n+    @Test\n+    public void testLoadStylesheetFromBinaryDataURI() throws IOException {\n+        File inputFile = null, outputFile = null;\n+        byte[] stylesheetData;\n+\n+        try {\n+            inputFile = File.createTempFile(\"testLoadStylesheetFromBinaryDataURI\", \".css\");\n+            outputFile = File.createTempFile(\"testLoadStylesheetFromBinaryDataURI\", \".bss\");\n+            Files.writeString(inputFile.toPath(), \".rect { -fx-fill: blue; }\");\n+            Stylesheet.convertToBinary(inputFile, outputFile);\n+            stylesheetData = Files.readAllBytes(outputFile.toPath());\n+        } finally {\n+            if (inputFile != null) {\n+                inputFile.delete();\n+            }\n+\n+            if (outputFile != null) {\n+                outputFile.delete();\n+            }\n+        }\n+\n+        var rect = new Rectangle();\n+        var root = new StackPane(rect);\n+        rect.getStyleClass().add(\"rect\");\n+        root.getStylesheets().add(\"data:application\/octet-stream;base64,\" + Base64.getEncoder().encodeToString(stylesheetData));\n+        Scene scene = new Scene(root);\n+        scene.getRoot().applyCss();\n+\n+        assertEquals(Color.BLUE, rect.getFill());\n+    }\n+\n+    @Test\n+    public void testLoadStylesheetFromDataURIFailsForUnsupportedMimeType() {\n+        var errors = StyleManager.errorsProperty();\n+        errors.clear();\n+\n+        var rect = new Rectangle();\n+        var root = new StackPane(rect);\n+        rect.getStyleClass().add(\"rect\");\n+        root.getStylesheets().add(\"data:text\/html;base64,LnJlY3QgeyAtZngtZmlsbDogYmx1ZTsgfQ==\");\n+        Scene scene = new Scene(root);\n+        scene.getRoot().applyCss();\n+\n+        assertEquals(1, errors.size());\n+        assertTrue(errors.get(0).getMessage().startsWith(\"Unexpected MIME type \\\"text\/html\\\"\"));\n+    }\n+\n+    @Test\n+    public void testLoadStylesheetFromDataURIFailsForUnsupportedCharset() {\n+        var errors = StyleManager.errorsProperty();\n+        errors.clear();\n+\n+        var rect = new Rectangle();\n+        var root = new StackPane(rect);\n+        rect.getStyleClass().add(\"rect\");\n+        root.getStylesheets().add(\"data:charset=ABC-321;base64,LnJlY3QgeyAtZngtZmlsbDogYmx1ZTsgfQ==\");\n+        Scene scene = new Scene(root);\n+        scene.getRoot().applyCss();\n+\n+        assertEquals(1, errors.size());\n+        assertTrue(errors.get(0).getMessage().startsWith(\"Unsupported charset \\\"ABC-321\\\"\"));\n+    }\n+\n+    @Test\n+    public void testStyleRevertsWhenDataURIStylesheetIsRemoved() {\n+        var rect = new Rectangle();\n+        var root = new StackPane(rect);\n+        rect.getStyleClass().add(\"rect\");\n+\n+        \/\/ Stylesheet content: .rect { -fx-fill: blue; }\n+        root.getStylesheets().add(\"data:base64,LnJlY3QgeyAtZngtZmlsbDogYmx1ZTsgfQ==\");\n+\n+        \/\/ Stylesheet content: .rect { -fx-fill: red; }\n+        String stylesheet = \"data:base64,LnJlY3QgeyAtZngtZmlsbDogcmVkOyB9\";\n+        root.getStylesheets().add(stylesheet);\n+\n+        Scene scene = new Scene(root);\n+        scene.getRoot().applyCss();\n+\n+        assertEquals(Color.RED, rect.getFill());\n+\n+        root.getStylesheets().remove(stylesheet);\n+        scene.getRoot().applyCss();\n+\n+        assertEquals(Color.BLUE, rect.getFill());\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/StylesheetTest.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"modified"}]}