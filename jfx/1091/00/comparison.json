{"files":[{"patch":"@@ -425,0 +425,1 @@\n+        int insertionIndex = -1;\n@@ -453,0 +454,10 @@\n+\n+                \/\/ Calculate insertion index for surrogate pair text in TextFlow\n+                \/\/ when leading is false\n+                if (run.getTextSpan() != null) {\n+                    String txt = run.getTextSpan().getText();\n+                    int relIdx = charIndex - run.getStart();\n+                    if (Character.isHighSurrogate(txt.charAt(relIdx)) && !leading) {\n+                        insertionIndex = charIndex + 2;\n+                    }\n+                }\n@@ -459,1 +470,1 @@\n-        return new Hit(charIndex, -1, leading);\n+        return new Hit(charIndex, insertionIndex, leading);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismTextLayout.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,170 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.scene;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.robot.Robot;\n+import javafx.scene.text.Font;\n+import javafx.scene.text.HitInfo;\n+import javafx.scene.text.Text;\n+import javafx.scene.text.TextFlow;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+import javafx.stage.WindowEvent;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import com.sun.javafx.PlatformUtil;\n+import com.sun.javafx.tk.Toolkit;\n+\n+import test.util.Util;\n+\n+\/*\n+ * Test for verifying insertion index in TextFlow surrogate pairs\n+ *\n+ * There is 1 test in this file.\n+ * Steps for testTextFlowSurrogatePairInsertionIndex()\n+ * 1. Create a TextFlow. Add Text node with surrogate pair to it.\n+ * 2. Move the cursor and click on the leading side of a surrogate pair text.\n+ * 3. Insertion index should be same as character index.\n+ * 4. Move the cursor and click on the trailing side of a surrogate pair text.\n+ * 5. Insertion index should 2 more than the character index.\n+ *\/\n+\n+public class TextFlowSurrogatePairInsertionIndexTest {\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n+    static Robot robot;\n+    static TextFlow textFlow;\n+\n+    static volatile Stage stage;\n+    static volatile Scene scene;\n+\n+    boolean isLeading;\n+    int charIndex;\n+    int insertionIndex;\n+\n+    CountDownLatch mouseClickLatch;\n+\n+    private void mouseClick(double x, double y) {\n+        Util.runAndWait(() -> {\n+            robot.mouseMove((int) (scene.getWindow().getX() + scene.getX() + x),\n+                    (int) (scene.getWindow().getY() + scene.getY() + y));\n+            robot.mousePress(MouseButton.PRIMARY);\n+            robot.mouseRelease(MouseButton.PRIMARY);\n+            mouseClickLatch.countDown();\n+        });\n+    }\n+\n+    private void moveMouseToLeadingSide() throws Exception {\n+        mouseClickLatch = new CountDownLatch(1);\n+        mouseClick(textFlow.getLayoutX() + (textFlow.getWidth() \/ 4) - 10,\n+                    textFlow.getLayoutY() + textFlow.getHeight() \/ 2);\n+        Thread.sleep(200); \/\/ Small delay to wait for cursor to move and mouse click.\n+        Util.waitForLatch(mouseClickLatch, 10, \"Timeout waiting for mouse click\");\n+    }\n+\n+    private void moveMouseToTrailingSide() throws Exception {\n+        mouseClickLatch = new CountDownLatch(1);\n+        mouseClick(textFlow.getLayoutX() + (textFlow.getWidth() \/ 4) + 10,\n+                    textFlow.getLayoutY() + textFlow.getHeight() \/ 2);\n+        Thread.sleep(200); \/\/ Small delay to wait for cursor to move and mouse click.\n+        Util.waitForLatch(mouseClickLatch, 10, \"Timeout waiting for mouse click\");\n+    }\n+\n+    @Test\n+    public void testTextFlowSurrogatePairInsertionIndex() throws Exception {\n+        moveMouseToLeadingSide();\n+        Assert.assertTrue(isLeading);\n+        Assert.assertEquals(charIndex, insertionIndex);\n+\n+        moveMouseToTrailingSide();\n+        Assert.assertFalse(isLeading);\n+        Assert.assertEquals(charIndex, insertionIndex - 2);\n+    }\n+\n+    private void handleMouseEvent(MouseEvent event) {\n+        Point2D point = new Point2D(event.getX(), event.getY());\n+        HitInfo hitInfo = textFlow.hitTest(point);\n+        isLeading = hitInfo.isLeading();\n+        charIndex = hitInfo.getCharIndex();\n+        insertionIndex = hitInfo.getInsertionIndex();\n+    }\n+\n+    @After\n+    public void resetUI() {\n+        Platform.runLater(() -> {\n+            textFlow.removeEventHandler(MouseEvent.MOUSE_PRESSED, this::handleMouseEvent);\n+        });\n+    }\n+\n+    @Before\n+    public void setupUI() {\n+        Platform.runLater(() -> {\n+            textFlow.addEventHandler(MouseEvent.MOUSE_PRESSED, this::handleMouseEvent);\n+        });\n+    }\n+\n+    @BeforeClass\n+    public static void initFX() {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void exit() {\n+        Util.shutdown(stage);\n+    }\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) {\n+            robot = new Robot();\n+            stage = primaryStage;\n+\n+            Text text = new Text(\"ðŸ˜ŠðŸ˜‡\");\n+            text.setFont(new Font(48));\n+            textFlow = new TextFlow(text);\n+\n+            scene = new Scene(textFlow);\n+            stage.setScene(scene);\n+            stage.initStyle(StageStyle.UNDECORATED);\n+            stage.setOnShown(event -> Platform.runLater(startupLatch::countDown));\n+            stage.setAlwaysOnTop(true);\n+            stage.show();\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TextFlowSurrogatePairInsertionIndexTest.java","additions":170,"deletions":0,"binary":false,"changes":170,"status":"added"}]}