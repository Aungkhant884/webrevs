{"files":[{"patch":"@@ -425,0 +425,1 @@\n+        int insertionIndex = -1;\n@@ -431,0 +432,1 @@\n+            insertionIndex = charIndex + 1;\n@@ -453,0 +455,16 @@\n+\n+                insertionIndex = charIndex;\n+                if (getText() != null) {\n+                    if (!leading) {\n+                        BreakIterator charIterator = BreakIterator.getCharacterInstance();\n+                        charIterator.setText(new String(getText()));\n+                        int next = charIterator.following(insertionIndex);\n+                        if (next == BreakIterator.DONE) {\n+                            insertionIndex += 1;\n+                        } else {\n+                            insertionIndex = next;\n+                        }\n+                    }\n+                } else if (!leading) {\n+                    insertionIndex += 1;\n+                }\n@@ -457,0 +475,1 @@\n+                insertionIndex = charIndex;\n@@ -459,1 +478,1 @@\n-        return new Hit(charIndex, -1, leading);\n+        return new Hit(charIndex, insertionIndex, leading);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismTextLayout.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,355 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.scene;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Scene;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.robot.Robot;\n+import javafx.scene.text.Font;\n+import javafx.scene.text.HitInfo;\n+import javafx.scene.text.Text;\n+import javafx.scene.text.TextFlow;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import com.sun.javafx.PlatformUtil;\n+import com.sun.javafx.tk.Toolkit;\n+\n+import test.util.Util;\n+\n+\/*\n+ * Test for verifying insertion index in TextFlow surrogate pairs\n+ *\n+ * There are 4 tests in this file.\n+ * Steps for testTextFlowInsertionIndexUsingTwoEmojis()\n+ * 1. Create a TextFlow. Add Text node with surrogate pair to it.\n+ * 2. Move the cursor and click on the leading side of a surrogate pair text.\n+ * 3. Insertion index should be same as character index.\n+ * 4. Move the cursor and click on the trailing side of a surrogate pair text.\n+ * 5. Insertion index should 2 more than the character index.\n+ *\n+ * Steps for testTextFlowInsertionIndexUsingMultipleEmojis()\n+ * 1. Create a TextFlow. Add Text node with multiple emojis (surrogate pairs).\n+ * 2. Move the cursor to the first character and click.\n+ * 3. Insertion index should be same as character index.\n+ * 4. Move the cursor continously till last character and check that\n+ *    character index and insertion index increase monitonically as expected.\n+ *\n+ * Steps for testTextFlowInsertionIndexUsingTextAndEmojis()\n+ * 1. Create a TextFlow. Add Text node with multiple emojis (surrogate pairs).\n+ * 2. Move the cursor to the first character and click.\n+ * 3. Insertion index should be same as character index.\n+ * 4. Move the cursor continously till last character and check that\n+ *    character index and insertion index increase monitonically as expected.\n+ *\n+ * Steps for testTextFlowInsertionIndexUsingEmbeddedTextNodes()\n+ * 1. Create a TextFlow. Add a Text node with text and another with emojis.\n+ * 2. Move the cursor to the first character and click.\n+ * 3. Insertion index should be same as character index.\n+ * 4. Move the cursor continously till last character and check that\n+ *    character index and insertion index increase monitonically as expected.\n+ *\n+ * Steps for testTextFlowInsertionIndexWhenMouseMovedOutsideText()\n+ * 1. Create a TextFlow. Add a Text node with text and emojis.\n+ * 2. Move the cursor to the first character and click.\n+ * 3. Insertion index should be same as character index.\n+ * 4. Move the cursor towards bottom of the application window check that\n+ *    chracter index and insertion index are as expected.\n+ * This test is implemented to test insertion index initialization\n+ * when text run is not used to calculate character index.\n+ *\n+ * Steps for testTextFlowInsertionIndexUsingWrappedText()\n+ * 1. Create a TextFlow. Add a Text node with text and emojis whose length is\n+ *    more than the size of application window.\n+ * 2. Move the cursor from first character to last character.\n+ * 3. Character index should increase monotonically as expected.\n+ * 4. Insertion index should also increase as expected along with character index.\n+ *\/\n+\n+public class TextFlowSurrogatePairInsertionIndexTest {\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n+    static Robot robot;\n+    static TextFlow textFlow;\n+    static Text text;\n+    static Text emoji;\n+\n+    static volatile Stage stage;\n+    static volatile Scene scene;\n+\n+    static final int WIDTH = 500;\n+    static final int HEIGHT = 150;\n+\n+    final int Y_OFFSET = 25;\n+    final int X_LEADING_OFFSET = 10;\n+    final int X_TRAILING_OFFSET = 40;\n+\n+    boolean isLeading;\n+    boolean isSurrogatePair;\n+    int charIndex;\n+    int insertionIndex;\n+\n+    private void mouseClick(double x, double y) {\n+        Util.runAndWait(() -> {\n+            robot.mouseMove((int) (scene.getWindow().getX() + scene.getX() + x),\n+                    (int) (scene.getWindow().getY() + scene.getY() + y));\n+            robot.mouseClick(MouseButton.PRIMARY);\n+        });\n+    }\n+\n+    private void moveMouseOverTextFlow(int x, int y) throws Exception {\n+        mouseClick(textFlow.getLayoutX() + x,\n+                    textFlow.getLayoutY() + y);\n+    }\n+\n+    private void addTwoEmojis() {\n+        Util.runAndWait(() -> {\n+            text = new Text(\"😊😇\");\n+            text.setFont(new Font(48));\n+            textFlow.getChildren().clear();\n+            textFlow.getChildren().setAll(text);\n+        });\n+    }\n+\n+    private void addMultipleEmojis() {\n+        Util.runAndWait(() -> {\n+            text = new Text(\"😊😇💙🦋🏁🔥\");\n+            text.setFont(new Font(48));\n+            textFlow.getChildren().clear();\n+            textFlow.getChildren().setAll(text);\n+        });\n+    }\n+\n+    private void addTextAndEmojis() {\n+        Util.runAndWait(() -> {\n+            text = new Text(\"Text 😊😇💙🦋🔥\");\n+            text.setFont(new Font(48));\n+            textFlow.getChildren().clear();\n+            textFlow.getChildren().setAll(text);\n+        });\n+    }\n+\n+    private void addTwoTextNodes() {\n+        Util.runAndWait(() -> {\n+            text = new Text(\"Text\");\n+            text.setFont(new Font(48));\n+\n+            emoji = new Text(\"😊😇\");\n+            emoji.setFont(new Font(48));\n+\n+            textFlow.getChildren().clear();\n+            textFlow.getChildren().setAll(text, emoji);\n+        });\n+    }\n+\n+    private void addLongText() {\n+        Util.runAndWait(() -> {\n+            text = new Text(\"[This is text 😀😃😄😁😆 🙂🙃😉😊😇]\");\n+            text.setFont(new Font(48));\n+\n+            textFlow.getChildren().clear();\n+            textFlow.getChildren().setAll(text);\n+        });\n+    }\n+\n+    @Test\n+    public void testTextFlowInsertionIndexUsingTwoEmojis() throws Exception {\n+        addTwoEmojis();\n+        Util.waitForIdle(scene);\n+\n+        moveMouseOverTextFlow(X_LEADING_OFFSET, Y_OFFSET);\n+        Assert.assertTrue(isLeading);\n+        Assert.assertEquals(charIndex, insertionIndex);\n+\n+        moveMouseOverTextFlow(X_TRAILING_OFFSET, Y_OFFSET);\n+        Assert.assertFalse(isLeading);\n+        Assert.assertEquals(charIndex, insertionIndex - 2);\n+    }\n+\n+    @Test\n+    public void testTextFlowInsertionIndexUsingMultipleEmojis() throws Exception {\n+        addMultipleEmojis();\n+        Util.waitForIdle(scene);\n+\n+        int textLength = text.getText().length();\n+        int index = 0;\n+        while (charIndex < textLength - 2) {\n+            moveMouseOverTextFlow(index, Y_OFFSET);\n+            if (isLeading) {\n+                Assert.assertEquals(charIndex, insertionIndex);\n+            } else {\n+                Assert.assertEquals(charIndex, insertionIndex - 2);\n+            }\n+            index += 5;\n+        }\n+    }\n+\n+    @Test\n+    public void testTextFlowInsertionIndexUsingTextAndEmojis() throws Exception {\n+        addTextAndEmojis();\n+        Util.waitForIdle(scene);\n+\n+        int textLength = text.getText().length();\n+        int index = 0;\n+        while (charIndex < textLength - 2) {\n+            moveMouseOverTextFlow(index, Y_OFFSET);\n+            if (isLeading) {\n+                Assert.assertEquals(charIndex, insertionIndex);\n+            } else if (!isLeading && charIndex < 5) {\n+                Assert.assertEquals(charIndex, insertionIndex - 1);\n+            } else {\n+                Assert.assertEquals(charIndex, insertionIndex - 2);\n+            }\n+            index += 5;\n+        }\n+    }\n+\n+    @Test\n+    public void testTextFlowInsertionIndexUsingEmbeddedTextNodes() throws Exception {\n+        addTwoTextNodes();\n+        Util.waitForIdle(scene);\n+\n+        int textLength = text.getText().length();\n+        textLength += emoji.getText().length();\n+        int index = 0;\n+        while (charIndex < textLength - 2) {\n+            moveMouseOverTextFlow(index, Y_OFFSET);\n+            if (isLeading) {\n+                Assert.assertEquals(charIndex, insertionIndex);\n+            } else if (isSurrogatePair) {\n+                Assert.assertEquals(charIndex, insertionIndex - 2);\n+            } else {\n+                Assert.assertEquals(charIndex, insertionIndex - 1);\n+            }\n+            index += 5;\n+        }\n+    }\n+\n+    @Test\n+    public void testTextFlowInsertionIndexWhenMouseMovedOutsideText() throws Exception {\n+        addTextAndEmojis();\n+        Util.waitForIdle(scene);\n+\n+        int index = 0;\n+        while (index < (HEIGHT - Y_OFFSET)) {\n+            moveMouseOverTextFlow(X_LEADING_OFFSET, (Y_OFFSET + index));\n+            if (isLeading) {\n+                Assert.assertEquals(charIndex, insertionIndex);\n+            } else {\n+                Assert.assertEquals(charIndex, insertionIndex - 1);\n+            }\n+            index += 5;\n+        }\n+    }\n+\n+    @Test\n+    public void testTextFlowInsertionIndexUsingWrappedText() throws Exception {\n+        addLongText();\n+        Util.waitForIdle(scene);\n+\n+        for (int y = 0; y < 2; y++) {\n+            for (int x = 0; x < (WIDTH - X_LEADING_OFFSET); x += 5) {\n+                moveMouseOverTextFlow(x, (Y_OFFSET + (Y_OFFSET * (y * 2))));\n+                if (isLeading) {\n+                    Assert.assertEquals(charIndex, insertionIndex);\n+                } else if (isSurrogatePair) {\n+                    Assert.assertEquals(charIndex, insertionIndex - 2);\n+                } else {\n+                    Assert.assertEquals(charIndex, insertionIndex - 1);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void handleMouseEvent(MouseEvent event) {\n+        Point2D point = new Point2D(event.getX(), event.getY());\n+        HitInfo hitInfo = textFlow.hitTest(point);\n+        isLeading = hitInfo.isLeading();\n+        charIndex = hitInfo.getCharIndex();\n+        insertionIndex = hitInfo.getInsertionIndex();\n+\n+        String testString = text.getText();\n+        if (charIndex >= testString.length() && emoji != null) {\n+            testString += emoji.getText();\n+        }\n+        if (charIndex < testString.length()) {\n+            char c = testString.charAt(charIndex);\n+            isSurrogatePair = Character.isSurrogate(c);\n+        }\n+    }\n+\n+    @After\n+    public void resetUI() {\n+        Platform.runLater(() -> {\n+            textFlow.removeEventHandler(MouseEvent.MOUSE_PRESSED, this::handleMouseEvent);\n+        });\n+    }\n+\n+    @Before\n+    public void setupUI() {\n+        Platform.runLater(() -> {\n+            textFlow.addEventHandler(MouseEvent.MOUSE_PRESSED, this::handleMouseEvent);\n+        });\n+    }\n+\n+    @BeforeClass\n+    public static void initFX() {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void exit() {\n+        Util.shutdown(stage);\n+    }\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) {\n+            robot = new Robot();\n+            stage = primaryStage;\n+\n+            textFlow = new TextFlow();\n+            scene = new Scene(textFlow, WIDTH, HEIGHT);\n+            stage.setScene(scene);\n+            stage.initStyle(StageStyle.UNDECORATED);\n+            stage.setOnShown(event -> Platform.runLater(startupLatch::countDown));\n+            stage.setAlwaysOnTop(true);\n+            stage.show();\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TextFlowSurrogatePairInsertionIndexTest.java","additions":355,"deletions":0,"binary":false,"changes":355,"status":"added"},{"patch":"@@ -45,0 +45,1 @@\n+import javafx.scene.Scene;\n@@ -425,0 +426,32 @@\n+\n+    \/**\n+     * Triggers and waits for 10 pulses to complete in the specified scene.\n+     *\/\n+    public static void waitForIdle(Scene scene) {\n+        waitForIdle(scene, 10);\n+    }\n+\n+    \/**\n+     * Triggers and waits for specified number of pulses (pulseCount)\n+     * to complete in the specified scene.\n+     *\/\n+    public static void waitForIdle(Scene scene, int pulseCount) {\n+        CountDownLatch latch = new CountDownLatch(pulseCount);\n+        Runnable pulseListener = () -> {\n+            latch.countDown();\n+            Platform.requestNextPulse();\n+        };\n+\n+        runAndWait(() -> {\n+            scene.addPostLayoutPulseListener(pulseListener);\n+        });\n+\n+        try {\n+            Platform.requestNextPulse();\n+            waitForLatch(latch, TIMEOUT, \"Timeout waiting for post layout pulse\");\n+        } finally {\n+            runAndWait(() -> {\n+                scene.removePostLayoutPulseListener(pulseListener);\n+            });\n+        }\n+    }\n","filename":"tests\/system\/src\/test\/java\/test\/util\/Util.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"}]}