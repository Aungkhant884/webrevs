{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"buildSrc\/mac.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -186,1 +186,2 @@\n-    \/\/ lie in two ranges with a few exceptions.\n+    \/\/ lie in two ranges with a few exceptions. Details can be found in the Events.h\n+    \/\/ header in the HIToolbox framework inside the Carbon framework.\n@@ -195,0 +196,1 @@\n+    \/\/ kVK_ANSI_A through kVK_ANSI_Grave\n@@ -198,0 +200,3 @@\n+    \/\/ kVK_JIS_Yen through kVK_JIS_KeypadComma. The other JIS keys (0x66 and\n+    \/\/ 0x68) were commented out of the table above so they are not included\n+    \/\/ here.\n@@ -244,0 +249,2 @@\n+        case 0x00A1: return com_sun_glass_events_KeyEvent_VK_INV_EXCLAMATION;\n+        case 0x20A0: return com_sun_glass_events_KeyEvent_VK_EURO_SIGN;\n@@ -330,1 +337,1 @@\n-        \/\/ In this API the Cmd flag suppresses the Option flag so we ommit Cmd.\n+        \/\/ In this API the Cmd flag suppresses the Option flag so we omit Cmd.\n@@ -473,1 +480,1 @@\n-    for (unsigned short trialKey = 0x00; trialKey <= 0x7E; ++trialKey)\n+    for (unsigned short trialKey = 0x00; trialKey <= 0x5F; ++trialKey)\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassKey.m","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -55,4 +55,4 @@\n- * Currently there are tests for U.S. (QWERTY), French (AZERTY), and German\n- * (QWERTZ) on Mac, Windows, and Linux. Since there's no way for JavaFX to force\n- * the layout or verify which layout is currently active it is up to the tester\n- * to configure the correct layout before running the test.\n+ * Currently there are tests for U.S. (QWERTY), French (AZERTY), German (QWERTZ)\n+ * and Spanish (QWERTY) on Mac, Windows, and Linux. Since there's no way for\n+ * JavaFX to force the layout or verify which layout is currently active it is\n+ * up to the tester to configure the correct layout before running the test.\n@@ -66,2 +66,2 @@\n- * more generic test is available for non-Latin layouts which verifies that\n- * KeyCodes A through Z generate characters.\n+ * more generic test is available for non-Latin, non-IME layouts which verifies\n+ * that KeyCodes A through Z generate characters.\n@@ -77,0 +77,4 @@\n+ *\n+ * Mac users will need to grant permission for the Terminal application to use\n+ * accessibility features. Add Terminal to the list of applications in\n+ * System Settings > Privacy & Security > Accessibility.\n@@ -147,0 +151,3 @@\n+        private static final String MIDDLE_DOT   = \"\\u00B7\";\n+        private static final String INV_EXCLAMATION_MARK = \"\\u00A1\";\n+        private static final String INV_QUESTION_MARK    = \"\\u00BF\";\n@@ -423,0 +430,34 @@\n+        \/* Spanish QWERTY *\/\n+        public static KeyList spanishKeys() {\n+            KeyListBuilder builder = new KeyListBuilder();\n+            builder.addCommon();\n+            builder.addLetters();\n+\n+            final String decimalCharacter = (onMac ? \",\" : \".\");\n+\n+            builder.add(KeyCode.DIGIT0, \"0\", \"=\");\n+            builder.add(KeyCode.DIGIT1, \"1\", \"!\");\n+            builder.add(KeyCode.DIGIT2, \"2\", DOUBLE_QUOTE);\n+            builder.add(KeyCode.DIGIT3, \"3\", MIDDLE_DOT);\n+            builder.add(KeyCode.DIGIT4, \"4\", \"$\");\n+            builder.add(KeyCode.DIGIT5, \"5\", \"%\");\n+            builder.add(KeyCode.DIGIT6, \"6\", \"&\");\n+            builder.add(KeyCode.DIGIT7, \"7\", \"\/\");\n+            builder.add(KeyCode.DIGIT8, \"8\", \"(\");\n+            builder.add(KeyCode.DIGIT9, \"9\", \")\");\n+\n+            builder.add(KeyCode.QUOTE,        QUOTE, \"?\");\n+            builder.add(KeyCode.INVERTED_EXCLAMATION_MARK, INV_EXCLAMATION_MARK, INV_QUESTION_MARK);\n+            builder.add(KeyCode.PLUS,         \"+\", \"*\", \"]\");\n+            builder.add(KeyCode.LESS,         \"<\", \">\");\n+            builder.add(KeyCode.COMMA,        \",\", \";\");\n+            builder.add(KeyCode.PERIOD,       \".\", \":\");\n+            builder.add(KeyCode.MINUS,        \"-\", \"_\");\n+\n+            builder.add(KeyCode.DECIMAL,      decimalCharacter);\n+\n+            builder.addAbsent(KeyCode.EQUALS);\n+\n+            return builder.getList();\n+        }\n+\n@@ -436,3 +477,3 @@\n-         * For non-Latin layouts (Greek, Cyrillic) we should be able to access\n-         * the letter KeyCodes though we have no idea what characters they\n-         * generate.\n+         * For non-Latin layouts that do not use an IME (Greek, Cyrillic) we\n+         * should be able to access the letter KeyCodes though we have no idea\n+         * what characters they generate.\n@@ -457,0 +498,1 @@\n+        SPANISH(\"Spanish\", KeyListBuilder.spanishKeys()),\n@@ -677,1 +719,2 @@\n-                fail(\"code \" + event.getCode().getName() + \" did not match combination \" + combo.getName());\n+                fail(\"code \" + event.getCode().getName() + \" did not match combination \"\n+                    + toPrintable(combo.getCharacter()));\n","filename":"tests\/manual\/events\/KeyboardTest.java","additions":53,"deletions":10,"binary":false,"changes":63,"status":"modified"}]}