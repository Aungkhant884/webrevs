{"files":[{"patch":"@@ -40,0 +40,42 @@\n+Copyright (C) 1995 A.M. Kuchling\n+Copyright (C) 2005-2006 Alexander Larsson <alexl@redhat.com>\n+Copyright (C) 2004 Anders Carlsson <andersca@gnome.org>\n+Copyright (C) 2001-2003 Andrew Lanoix\n+Copyright (C) 2009 Benjamin Otte <otte@gnome.org>\n+Copyright (C) 2011, 2014-2015 Canonical Limited\n+Copyright (C) 2009-2010 Christian Hergert <chris@dronelabs.com>\n+Copyright (C) 2010 Christian Persch\n+Copyright (C) 2008 Claus Tondering.\n+Copyright (C) 2009-2010 Codethink Limited\n+Copyright (C) 2009-2011, 2018 Collabora Ltd.\n+Copyright (C) 2006 Dave Benson\n+Copyright (C) 2000 Eazel, Inc.\n+Copyright (C) 2005-2007, 2010, 2018 Emmanuele Bassi\n+Copyright (C) 2018, 2020 Endless Mobile, Inc.\n+Copyright (C) 2020 Frederic Martinsons\n+Copyright (C) 1991-2019 Free Software Foundation, Inc.\n+Copyright (C) 2001 Hans Breuer\n+Copyright (C) 2021 Iain Lane, Xavier Claessens\n+Copyright (C) 2005, 2007 Imendio AB\n+Copyright (C) 2010 Intel Corp.\n+Copyright (C) 2003, 2005 Matthias Clasen\n+Copyright (C) 2003 Noah Levitt\n+Copyright (C) 2009 Nokia Corporation\n+Copyright (C) 1998 Owen Taylor\n+Copyright (C) 1998 Owen Taylor and Tor Lillqvist\n+Copyright (C) 1995-1997, 1999, 2002 Peter Mattis, Red Hat, Inc.\n+Copyright (C) 1995-1998 Peter Mattis, Spencer Kimball and Josh MacDonald\n+Copyright (C) 1998-2001, 2003-2005, 2007-2012, 2020 Red Hat, Inc.\n+Copyright (C) 2007-2008, 2011 Ryan Lortie\n+Copyright (C) 2003 Sebastian Wilhelmi\n+Copyright (C) 1998-2001 Sebastian Wilhelmi; University of Karlsruhe\n+Copyright (C) 2011 Stef Walter  <stefw@collabora.co.uk>\n+Copyright (C) 2010 Thiago Santos <thiago.sousa.santos@collabora.co.uk>\n+Copyright (C) 1997, 1998, 2000, 2005 Tim Janik\n+Copyright (C) 1997-1999, 2000-2001 Tim Janik and Red Hat, Inc.\n+Copyright (C) 1999, 2000 Tom Tromey\n+Copyright (C) 2018 Tomasz Miasko\n+Copyright (C) 1998-2000, 2003-2004 Tor Lillqvist\n+Copyright (C) 1999-2000 Tor Lillqvist and Craig Setera\n+Copyright (C) 2000-2003 Ximian Inc.\n+Copyright (C) 2017-2019 Руслан Ижбулатов\n@@ -544,0 +586,1 @@\n+Authors\n@@ -545,4 +588,1 @@\n-```\n-\n-#### BSD 3-clause License\n-```\n+Original Authors\n@@ -550,44 +590,3 @@\n-The below license applies to the following files:\n-glib\/glib\/valgrind.h\n-\n-Copyright (C) 2000-2017 Julian Seward. All rights reserved.\n-\n-Redistribution and use in source and binary forms, with or without\n-modification, are permitted provided that the following conditions\n-are met:\n-\n-1. Redistributions of source code must retain the above copyright\n-   notice, this list of conditions and the following disclaimer.\n-\n-2. The origin of this software must not be misrepresented; you must\n-   not claim that you wrote the original software.  If you use this\n-   software in a product, an acknowledgment in the product\n-   documentation would be appreciated but is not required.\n-\n-3. Altered source versions must be plainly marked as such, and must\n-   not be misrepresented as being the original software.\n-\n-4. The name of the author may not be used to endorse or promote\n-   products derived from this software without specific prior written\n-   permission.\n-\n-THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS\n-OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n-ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\n-DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n-GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n-INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n-WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n-NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n-SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-----------------------------------------------------------------\n-\n-Notice that the above BSD-style license applies to this one file\n-(valgrind.h) only.  The entire rest of Valgrind is licensed under\n-the terms of the GNU General Public License, version 2.  See the\n-COPYING file in the source distribution for details.\n-\n-----------------------------------------------------------------\n+Peter Mattis       <petm@xcf.berkeley.edu>\n+Spencer Kimball    <spencer@xcf.berkeley.edu>\n+Josh MacDonald     <jmacd@xcf.berkeley.edu>\n@@ -595,0 +594,29 @@\n+GLib-2.0 Team\n+---------------------------------\n+Hans Breuer        <hans@breuer.org>\n+Matthias Clasen    <mclasen@redhat.com>\n+Tor Lillqvist      <tml@iki.fi>\n+Tim Janik          <timj@gtk.org>\n+Havoc Pennington   <hp@redhat.com>\n+Ron Steinke        <rsteinke@w-link.net>\n+Owen Taylor        <otaylor@redhat.com>\n+Sebastian Wilhelmi <seppi@seppi.de>\n+\n+GLib-1.2 Team\n+---------------------------------\n+Shawn T. Amundson  <amundson@gimp.org>\n+Jeff Garzik        <jgarzik@pobox.com>\n+Raja R Harinath    <harinath@cs.umn.edu>\n+Tim Janik          <timj@gtk.org>\n+Elliot Lee         <sopwith@redhat.com>\n+Tor Lillqvist      <tml@iki.fi>\n+Paolo Molaro       <lupus@debian.org>\n+Havoc Pennington   <hp@pobox.com>\n+Manish Singh       <yosh@gimp.org>\n+Owen Taylor        <otaylor@gtk.org>\n+Sebastian Wilhelmi <wilhelmi@ira.uka.de>\n+\n+The random number generator \"Mersenne Twister\", which is used by GLib,\n+was developed and originally coded by:\n+Makoto Matsumoto   <matumoto@math.keio.ac.jp>\n+Takuji Nishimura   <nisimura@math.keio.ac.jp>\n@@ -597,0 +625,1 @@\n+\n@@ -621,0 +650,14 @@\n+\n+#### Permissive License\n+```\n+---------------------------------\n+The below license applies to the following files:\n+glib\/glib\/win_iconv.c\n+\n+iconv library implemented with Win32 API.\n+\n+This file is placed in the public domain.\n+\n+Maintainer: Yukihiro Nakadaira <yukihiro.nakadaira@gmail.com>\n+\n+```\n","filename":"modules\/javafx.media\/src\/main\/legal\/glib.md","additions":91,"deletions":48,"binary":false,"changes":139,"status":"modified"},{"patch":"@@ -38,0 +38,59 @@\n+Copyright (C) 2010-2012 Alexander Saprykin <xelfium@gmail.com>\n+Copyright (C) 2001-2002, 2004-2005 Andy Wingo <apwingo@eos.ncsu.edu>\n+Copyright (C) 2010 Arun Raghavan <arun.raghavan@collabora.co.uk>\n+Copyright (C) 2009 Axis Communications <dev-gstreamer at axis dot com>\n+Copyright (C) 2003-2004 Benjamin Otte <in7y118@public.uni-hamburg.de>\n+Copyright (C) 2010 Brandon Lewis <brandon.lewis@collabora.co.uk>\n+Copyright (C) 2016 British Broadcasting Corporation\n+Copyright (C) 2014-2015 Centricular Ltd\n+Copyright (C) 2001 CodeFactory AB\n+Copyright (C) 2011-2013, 2018, 2021 Collabora Ltd.\n+Copyright (C) 2010 Collabora Multimedia\n+Copyright (C) 2003, 2005, 2007-2008, 2010-2011 David A. Schleef <ds@schleef.org>\n+Copyright (C) 2014 David Waring, British Broadcasting Corporation\n+Copyright (C) 2006, 2009-2010 Edward Hervey <bilboed@bilboed.com>\n+Copyright (C) 1999-2001 Erik Walthinsen <omega@cse.ogi.edu>\n+Copyright (C) 2010, 2012-2013 Fluendo S.A. <support@fluendo.com>\n+Copyright (C) 1995-1998, 2000-2002 Free Software Foundation, Inc.\n+Copyright (C) 2012, 2018 GStreamer developers\n+Copyright (C) 2011 Hewlett-Packard Development Company, L.P.\n+Copyright (C) 2020 Huawei Technologies Co., Ltd.\n+Copyright (C) 2009 Igalia S.L.\n+Copyright (C) 2011, 2013 Intel Corporation\n+Copyright (C) 2005-2009, 2015, 2021 Jan Schmidt <jan.schmidt@sun.com>\n+Copyright (C) 2006 Josep Torra <josep@fluendo.com>\n+Copyright (C) 2003, 2007 Julien Moutte <julien@fluendo.com>\n+Copyright (C) 2015 Luis de Bethencourt <luis@debethencourt.com>\n+Copyright (C) 2008, 2010, 2011 Mark Nauwelaerts <mark.nauwelaerts@collabora.co.uk>.\n+Copyright (C) 2006 Mathieu Garcia  <matthieu@fluendo.com>\n+Copyright (C) 2006-2008 Tim-Philipp Müller <tim centricular net>\n+Copyright (C) 2006, 2008, 2010-2011 Nokia <stefan.kost@nokia.com\n+Copyright (C) 2008 Ole André Vadla Ravnås <ole.andre.ravnas@tandberg.com>\n+Copyright (C) 2007 Peter Kjellerstedt <pkj@axis.com>\n+Copyright (C) 1995-1997 Peter Mattis, Spencer Kimball and Josh MacDonald\n+Copyright (C) 2007-2008 Pioneers of the Inevitable <songbird@songbirdnest.com>\n+Copyright (C) 2001 RidgeRun (http:\/\/www.ridgerun.com\/)\n+Copyright (C) 2003-2004 Ronald Bultje <rbultje@ronald.bitfreak.net>\n+Copyright (C) 2005 Ross Burton <ross@burtonini.com>\n+Copyright (C) 2009 STEricsson <benjamin.gaignard@stericsson.com>\n+Copyright (C) 2014-2015 Samsung Electronics. All rights reserved.\n+Copyright (C) 2005 David Schleef <ds@schleef.org>\n+Copyright (C) 2005 Jan Schmidt <thaytan@mad.scientist.com>\n+Copyright (C) 2007-2011, 2013 Sebastian Dröge <sebastian.droege@collabora.co.uk>\n+Copyright (C) 2005 Sebastien Moutte <sebastien@moutte.net>\n+Copyright (C) 2018-2019 Seungha Yang <seungha.yang@navercorp.com>\n+Copyright (C) 2013 Sreerenj Balachandran <sreerenj.balachandran@intel.com>\n+Copyright (C) 2005-2007, 2011 Stefan Kost <ensonic@sonicpulse.de>\n+Copyright (C) 2011, 2013, 2016 Stefan Sauer <ensonic@users.sf.net>\n+Copyright (C) 2020 The GStreamer Contributors.\n+Copyright (C) 2008, 2010 Thiago Santos <thiago.sousa.santos@collabora.co.uk>\n+Copyright (C) 2011 Thibault Saunier <thibault.saunier@collabora.com>\n+Copyright (C) 2008 Thijs Vermeir <thijsvermeir@gmail.com>\n+Copyright (C) 2001 Thomas Nyberg <thomas@codefactory.se>\n+Copyright (C) 2004-2005 Thomas Vander Stichele <thomas at apestaart dot org>\n+Copyright (C) 2005-2009, 2011, 2014-2015 Tim-Philipp Müller  <tim centricular net>\n+Copyright (C) <2016> Vivia Nikolaidou <vivia@toolsonair.com>\n+Copyright (C) 2002-2003 Scott Wheeler <wheeler@kde.org> (portions from taglib)\n+Copyright (C) 2000-2007, 2009-2011, 2013-2015 Wim Taymans <wim at fluendo dot com>\n+Copyright (C) 2013, 2015 YouView TV Ltd.\n+Copyright (C) 2005-2006 Zaheer Abbas Merali <zaheerabbas at merali dot org>\n@@ -542,0 +601,42 @@\n+Authors\n+\n+Erik Walthinsen <omega@temple-baptist.com>\n+Matt Howell <mhowell@users.sourceforge.net>\n+Brent Bradburn <bbradburn@users.sourceforge.net>\n+Wim Taymans <wim.taymans@chello.be>\n+Richard Boulton <richard@tartarus.org>\n+Zaheer Abbas Merali <zaheerabbas at merali dot org>\n+  - thread synchronization rework\n+David I. Lehn <dlehn@users.sourceforge.net>\n+  - debian packaging\n+  - various fixes\n+Chris Emerson <chris@tartarus.org>\n+  - PPC port\n+  - small libxml patches\n+Jens Thiele <karme@unforgettable.com>\n+  - color conversion patches\n+Thomas Nyberg <thomas@codefactory.se>\n+  - gstreamer.m4 macros\n+  - ALSA plugins\n+Bastien Nocera <hadess@hadess.net>\n+  - gnomevfs sink and source\n+Christian Fredrik Kalager Schaller <Uraeus@linuxrising.org>\n+  - Red Hat packaging and website work\n+Thomas Vander Stichele <thomas@apestaart.org>\n+  - build system cleaning\n+  - some audio plugins\n+  - release pushing\n+David Schleef <ds@schleef.org>\n+Benjamin Otte <in7y118@public.uni-hamburg.de>\n+Ronald Bultje <rbultje@ronald.bitfreak.net>\n+Andy Wingo <wingo@pobox.com>\n+Julien Moutte <julien@moutte.net>\n+Jan Schmidt <thaytan@noraisin.net>\n+\n+Maintainers\n+\n+Jan Schmidt <thaytan@noraisin.net>\n+Wim Taymans <wim.taymans@gmail.com>\n+David Schleef <ds@schleef.org>\n+Tim-Philipp Müller <tim centricular net>\n+Sebastian Dröge <slomo@coaxion.net>\n@@ -560,1 +661,0 @@\n-See COPYING file for more information.\n@@ -562,0 +662,24 @@\n+Redistribution and use in source and binary forms, with or without modification,\n+are permitted provided that the following conditions are met:\n+\n+1. Redistributions of source code must retain the above copyright notice,\n+this list of conditions and the following disclaimer.\n+\n+2. Redistributions in binary form must reproduce the above copyright notice,\n+this list of conditions and the following disclaimer in the documentation\n+and\/or other materials provided with the distribution.\n+\n+3. Neither the name of the copyright holder nor the names of its contributors\n+may be used to endorse or promote products derived from this software without\n+specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n+CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n+USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n@@ -571,1 +695,1 @@\n-Copyright(C) 1996 Takuya OOURA\n+Copyright (C) 1996 Takuya OOURA\n","filename":"modules\/javafx.media\/src\/main\/legal\/gstreamer.md","additions":126,"deletions":2,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -1,6648 +0,0 @@\n-\/* -*- c -*-\n-   ----------------------------------------------------------------\n-\n-   Notice that the following BSD-style license applies to this one\n-   file (valgrind.h) only.  The rest of Valgrind is licensed under the\n-   terms of the GNU General Public License, version 2, unless\n-   otherwise indicated.  See the COPYING file in the source\n-   distribution for details.\n-\n-   ----------------------------------------------------------------\n-\n-   This file is part of Valgrind, a dynamic binary instrumentation\n-   framework.\n-\n-   Copyright (C) 2000-2017 Julian Seward.  All rights reserved.\n-\n-   Redistribution and use in source and binary forms, with or without\n-   modification, are permitted provided that the following conditions\n-   are met:\n-\n-   1. Redistributions of source code must retain the above copyright\n-      notice, this list of conditions and the following disclaimer.\n-\n-   2. The origin of this software must not be misrepresented; you must\n-      not claim that you wrote the original software.  If you use this\n-      software in a product, an acknowledgment in the product\n-      documentation would be appreciated but is not required.\n-\n-   3. Altered source versions must be plainly marked as such, and must\n-      not be misrepresented as being the original software.\n-\n-   4. The name of the author may not be used to endorse or promote\n-      products derived from this software without specific prior written\n-      permission.\n-\n-   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS\n-   OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n-   ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\n-   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n-   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n-   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n-   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n-   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n-   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-\n-   ----------------------------------------------------------------\n-\n-   Notice that the above BSD-style license applies to this one file\n-   (valgrind.h) only.  The entire rest of Valgrind is licensed under\n-   the terms of the GNU General Public License, version 2.  See the\n-   COPYING file in the source distribution for details.\n-\n-   ----------------------------------------------------------------\n-*\/\n-\n-\n-\/* This file is for inclusion into client (your!) code.\n-\n-   You can use these macros to manipulate and query Valgrind's\n-   execution inside your own programs.\n-\n-   The resulting executables will still run without Valgrind, just a\n-   little bit more slowly than they otherwise would, but otherwise\n-   unchanged.  When not running on valgrind, each client request\n-   consumes very few (eg. 7) instructions, so the resulting performance\n-   loss is negligible unless you plan to execute client requests\n-   millions of times per second.  Nevertheless, if that is still a\n-   problem, you can compile with the NVALGRIND symbol defined (gcc\n-   -DNVALGRIND) so that client requests are not even compiled in.  *\/\n-\n-#ifndef __VALGRIND_H\n-#define __VALGRIND_H\n-\n-\n-\/* ------------------------------------------------------------------ *\/\n-\/* VERSION NUMBER OF VALGRIND                                         *\/\n-\/* ------------------------------------------------------------------ *\/\n-\n-\/* Specify Valgrind's version number, so that user code can\n-   conditionally compile based on our version number.  Note that these\n-   were introduced at version 3.6 and so do not exist in version 3.5\n-   or earlier.  The recommended way to use them to check for \"version\n-   X.Y or later\" is (eg)\n-\n-#if defined(__VALGRIND_MAJOR__) && defined(__VALGRIND_MINOR__)   \\\n-    && (__VALGRIND_MAJOR__ > 3                                   \\\n-        || (__VALGRIND_MAJOR__ == 3 && __VALGRIND_MINOR__ >= 6))\n-*\/\n-#define __VALGRIND_MAJOR__    3\n-#define __VALGRIND_MINOR__    15\n-\n-\n-#include <stdarg.h>\n-\n-\/* Nb: this file might be included in a file compiled with -ansi.  So\n-   we can't use C++ style \"\/\/\" comments nor the \"asm\" keyword (instead\n-   use \"__asm__\"). *\/\n-\n-\/* Derive some tags indicating what the target platform is.  Note\n-   that in this file we're using the compiler's CPP symbols for\n-   identifying architectures, which are different to the ones we use\n-   within the rest of Valgrind.  Note, __powerpc__ is active for both\n-   32 and 64-bit PPC, whereas __powerpc64__ is only active for the\n-   latter (on Linux, that is).\n-\n-   Misc note: how to find out what's predefined in gcc by default:\n-   gcc -Wp,-dM somefile.c\n-*\/\n-#undef PLAT_x86_darwin\n-#undef PLAT_amd64_darwin\n-#undef PLAT_x86_win32\n-#undef PLAT_amd64_win64\n-#undef PLAT_x86_linux\n-#undef PLAT_amd64_linux\n-#undef PLAT_ppc32_linux\n-#undef PLAT_ppc64be_linux\n-#undef PLAT_ppc64le_linux\n-#undef PLAT_arm_linux\n-#undef PLAT_arm64_linux\n-#undef PLAT_s390x_linux\n-#undef PLAT_mips32_linux\n-#undef PLAT_mips64_linux\n-#undef PLAT_x86_solaris\n-#undef PLAT_amd64_solaris\n-\n-\n-#if defined(__APPLE__) && defined(__i386__)\n-#  define PLAT_x86_darwin 1\n-#elif defined(__APPLE__) && defined(__x86_64__)\n-#  define PLAT_amd64_darwin 1\n-#elif (defined(__MINGW32__) && defined(__i386__)) \\\n-      || defined(__CYGWIN32__) \\\n-      || (defined(_WIN32) && defined(_M_IX86))\n-#  define PLAT_x86_win32 1\n-#elif (defined(__MINGW32__) && defined(__x86_64__)) \\\n-      || (defined(_WIN32) && defined(_M_X64))\n-\/* __MINGW32__ and _WIN32 are defined in 64 bit mode as well. *\/\n-#  define PLAT_amd64_win64 1\n-#elif defined(__linux__) && defined(__i386__)\n-#  define PLAT_x86_linux 1\n-#elif defined(__linux__) && defined(__x86_64__) && !defined(__ILP32__)\n-#  define PLAT_amd64_linux 1\n-#elif defined(__linux__) && defined(__powerpc__) && !defined(__powerpc64__)\n-#  define PLAT_ppc32_linux 1\n-#elif defined(__linux__) && defined(__powerpc__) && defined(__powerpc64__) && _CALL_ELF != 2\n-\/* Big Endian uses ELF version 1 *\/\n-#  define PLAT_ppc64be_linux 1\n-#elif defined(__linux__) && defined(__powerpc__) && defined(__powerpc64__) && _CALL_ELF == 2\n-\/* Little Endian uses ELF version 2 *\/\n-#  define PLAT_ppc64le_linux 1\n-#elif defined(__linux__) && defined(__arm__) && !defined(__aarch64__)\n-#  define PLAT_arm_linux 1\n-#elif defined(__linux__) && defined(__aarch64__) && !defined(__arm__)\n-#  define PLAT_arm64_linux 1\n-#elif defined(__linux__) && defined(__s390__) && defined(__s390x__)\n-#  define PLAT_s390x_linux 1\n-#elif defined(__linux__) && defined(__mips__) && (__mips==64)\n-#  define PLAT_mips64_linux 1\n-#elif defined(__linux__) && defined(__mips__) && (__mips!=64)\n-#  define PLAT_mips32_linux 1\n-#elif defined(__sun) && defined(__i386__)\n-#  define PLAT_x86_solaris 1\n-#elif defined(__sun) && defined(__x86_64__)\n-#  define PLAT_amd64_solaris 1\n-#else\n-\/* If we're not compiling for our target platform, don't generate\n-   any inline asms.  *\/\n-#  if !defined(NVALGRIND)\n-#    define NVALGRIND 1\n-#  endif\n-#endif\n-\n-\n-\/* ------------------------------------------------------------------ *\/\n-\/* ARCHITECTURE SPECIFICS for SPECIAL INSTRUCTIONS.  There is nothing *\/\n-\/* in here of use to end-users -- skip to the next section.           *\/\n-\/* ------------------------------------------------------------------ *\/\n-\n-\/*\n- * VALGRIND_DO_CLIENT_REQUEST(): a statement that invokes a Valgrind client\n- * request. Accepts both pointers and integers as arguments.\n- *\n- * VALGRIND_DO_CLIENT_REQUEST_STMT(): a statement that invokes a Valgrind\n- * client request that does not return a value.\n-\n- * VALGRIND_DO_CLIENT_REQUEST_EXPR(): a C expression that invokes a Valgrind\n- * client request and whose value equals the client request result.  Accepts\n- * both pointers and integers as arguments.  Note that such calls are not\n- * necessarily pure functions -- they may have side effects.\n- *\/\n-\n-#define VALGRIND_DO_CLIENT_REQUEST(_zzq_rlval, _zzq_default,            \\\n-                                   _zzq_request, _zzq_arg1, _zzq_arg2,  \\\n-                                   _zzq_arg3, _zzq_arg4, _zzq_arg5)     \\\n-  do { (_zzq_rlval) = VALGRIND_DO_CLIENT_REQUEST_EXPR((_zzq_default),   \\\n-                        (_zzq_request), (_zzq_arg1), (_zzq_arg2),       \\\n-                        (_zzq_arg3), (_zzq_arg4), (_zzq_arg5)); } while (0)\n-\n-#define VALGRIND_DO_CLIENT_REQUEST_STMT(_zzq_request, _zzq_arg1,        \\\n-                           _zzq_arg2,  _zzq_arg3, _zzq_arg4, _zzq_arg5) \\\n-  do { (void) VALGRIND_DO_CLIENT_REQUEST_EXPR(0,                        \\\n-                    (_zzq_request), (_zzq_arg1), (_zzq_arg2),           \\\n-                    (_zzq_arg3), (_zzq_arg4), (_zzq_arg5)); } while (0)\n-\n-#if defined(NVALGRIND)\n-\n-\/* Define NVALGRIND to completely remove the Valgrind magic sequence\n-   from the compiled code (analogous to NDEBUG's effects on\n-   assert()) *\/\n-#define VALGRIND_DO_CLIENT_REQUEST_EXPR(                          \\\n-        _zzq_default, _zzq_request,                               \\\n-        _zzq_arg1, _zzq_arg2, _zzq_arg3, _zzq_arg4, _zzq_arg5)    \\\n-      (_zzq_default)\n-\n-#else  \/* ! NVALGRIND *\/\n-\n-\/* The following defines the magic code sequences which the JITter\n-   spots and handles magically.  Don't look too closely at them as\n-   they will rot your brain.\n-\n-   The assembly code sequences for all architectures is in this one\n-   file.  This is because this file must be stand-alone, and we don't\n-   want to have multiple files.\n-\n-   For VALGRIND_DO_CLIENT_REQUEST, we must ensure that the default\n-   value gets put in the return slot, so that everything works when\n-   this is executed not under Valgrind.  Args are passed in a memory\n-   block, and so there's no intrinsic limit to the number that could\n-   be passed, but it's currently five.\n-\n-   The macro args are:\n-      _zzq_rlval    result lvalue\n-      _zzq_default  default value (result returned when running on real CPU)\n-      _zzq_request  request code\n-      _zzq_arg1..5  request params\n-\n-   The other two macros are used to support function wrapping, and are\n-   a lot simpler.  VALGRIND_GET_NR_CONTEXT returns the value of the\n-   guest's NRADDR pseudo-register and whatever other information is\n-   needed to safely run the call original from the wrapper: on\n-   ppc64-linux, the R2 value at the divert point is also needed.  This\n-   information is abstracted into a user-visible type, OrigFn.\n-\n-   VALGRIND_CALL_NOREDIR_* behaves the same as the following on the\n-   guest, but guarantees that the branch instruction will not be\n-   redirected: x86: call *%eax, amd64: call *%rax, ppc32\/ppc64:\n-   branch-and-link-to-r11.  VALGRIND_CALL_NOREDIR is just text, not a\n-   complete inline asm, since it needs to be combined with more magic\n-   inline asm stuff to be useful.\n-*\/\n-\n-\/* ----------------- x86-{linux,darwin,solaris} ---------------- *\/\n-\n-#if defined(PLAT_x86_linux)  ||  defined(PLAT_x86_darwin)  \\\n-    ||  (defined(PLAT_x86_win32) && defined(__GNUC__)) \\\n-    ||  defined(PLAT_x86_solaris)\n-\n-typedef\n-   struct {\n-      unsigned int nraddr; \/* where's the code? *\/\n-   }\n-   OrigFn;\n-\n-#define __SPECIAL_INSTRUCTION_PREAMBLE                            \\\n-                     \"roll $3,  %%edi ; roll $13, %%edi\\n\\t\"      \\\n-                     \"roll $29, %%edi ; roll $19, %%edi\\n\\t\"\n-\n-#define VALGRIND_DO_CLIENT_REQUEST_EXPR(                          \\\n-        _zzq_default, _zzq_request,                               \\\n-        _zzq_arg1, _zzq_arg2, _zzq_arg3, _zzq_arg4, _zzq_arg5)    \\\n-  __extension__                                                   \\\n-  ({volatile unsigned int _zzq_args[6];                           \\\n-    volatile unsigned int _zzq_result;                            \\\n-    _zzq_args[0] = (unsigned int)(_zzq_request);                  \\\n-    _zzq_args[1] = (unsigned int)(_zzq_arg1);                     \\\n-    _zzq_args[2] = (unsigned int)(_zzq_arg2);                     \\\n-    _zzq_args[3] = (unsigned int)(_zzq_arg3);                     \\\n-    _zzq_args[4] = (unsigned int)(_zzq_arg4);                     \\\n-    _zzq_args[5] = (unsigned int)(_zzq_arg5);                     \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* %EDX = client_request ( %EAX ) *\/         \\\n-                     \"xchgl %%ebx,%%ebx\"                          \\\n-                     : \"=d\" (_zzq_result)                         \\\n-                     : \"a\" (&_zzq_args[0]), \"0\" (_zzq_default)    \\\n-                     : \"cc\", \"memory\"                             \\\n-                    );                                            \\\n-    _zzq_result;                                                  \\\n-  })\n-\n-#define VALGRIND_GET_NR_CONTEXT(_zzq_rlval)                       \\\n-  { volatile OrigFn* _zzq_orig = &(_zzq_rlval);                   \\\n-    volatile unsigned int __addr;                                 \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* %EAX = guest_NRADDR *\/                    \\\n-                     \"xchgl %%ecx,%%ecx\"                          \\\n-                     : \"=a\" (__addr)                              \\\n-                     :                                            \\\n-                     : \"cc\", \"memory\"                             \\\n-                    );                                            \\\n-    _zzq_orig->nraddr = __addr;                                   \\\n-  }\n-\n-#define VALGRIND_CALL_NOREDIR_EAX                                 \\\n-                     __SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* call-noredir *%EAX *\/                     \\\n-                     \"xchgl %%edx,%%edx\\n\\t\"\n-\n-#define VALGRIND_VEX_INJECT_IR()                                 \\\n- do {                                                            \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE              \\\n-                     \"xchgl %%edi,%%edi\\n\\t\"                     \\\n-                     : : : \"cc\", \"memory\"                        \\\n-                    );                                           \\\n- } while (0)\n-\n-#endif \/* PLAT_x86_linux || PLAT_x86_darwin || (PLAT_x86_win32 && __GNUC__)\n-          || PLAT_x86_solaris *\/\n-\n-\/* ------------------------- x86-Win32 ------------------------- *\/\n-\n-#if defined(PLAT_x86_win32) && !defined(__GNUC__)\n-\n-typedef\n-   struct {\n-      unsigned int nraddr; \/* where's the code? *\/\n-   }\n-   OrigFn;\n-\n-#if defined(_MSC_VER)\n-\n-#define __SPECIAL_INSTRUCTION_PREAMBLE                            \\\n-                     __asm rol edi, 3  __asm rol edi, 13          \\\n-                     __asm rol edi, 29 __asm rol edi, 19\n-\n-#define VALGRIND_DO_CLIENT_REQUEST_EXPR(                          \\\n-        _zzq_default, _zzq_request,                               \\\n-        _zzq_arg1, _zzq_arg2, _zzq_arg3, _zzq_arg4, _zzq_arg5)    \\\n-    valgrind_do_client_request_expr((uintptr_t)(_zzq_default),    \\\n-        (uintptr_t)(_zzq_request), (uintptr_t)(_zzq_arg1),        \\\n-        (uintptr_t)(_zzq_arg2), (uintptr_t)(_zzq_arg3),           \\\n-        (uintptr_t)(_zzq_arg4), (uintptr_t)(_zzq_arg5))\n-\n-static __inline uintptr_t\n-valgrind_do_client_request_expr(uintptr_t _zzq_default, uintptr_t _zzq_request,\n-                                uintptr_t _zzq_arg1, uintptr_t _zzq_arg2,\n-                                uintptr_t _zzq_arg3, uintptr_t _zzq_arg4,\n-                                uintptr_t _zzq_arg5)\n-{\n-    volatile uintptr_t _zzq_args[6];\n-    volatile unsigned int _zzq_result;\n-    _zzq_args[0] = (uintptr_t)(_zzq_request);\n-    _zzq_args[1] = (uintptr_t)(_zzq_arg1);\n-    _zzq_args[2] = (uintptr_t)(_zzq_arg2);\n-    _zzq_args[3] = (uintptr_t)(_zzq_arg3);\n-    _zzq_args[4] = (uintptr_t)(_zzq_arg4);\n-    _zzq_args[5] = (uintptr_t)(_zzq_arg5);\n-    __asm { __asm lea eax, _zzq_args __asm mov edx, _zzq_default\n-            __SPECIAL_INSTRUCTION_PREAMBLE\n-            \/* %EDX = client_request ( %EAX ) *\/\n-            __asm xchg ebx,ebx\n-            __asm mov _zzq_result, edx\n-    }\n-    return _zzq_result;\n-}\n-\n-#define VALGRIND_GET_NR_CONTEXT(_zzq_rlval)                       \\\n-  { volatile OrigFn* _zzq_orig = &(_zzq_rlval);                   \\\n-    volatile unsigned int __addr;                                 \\\n-    __asm { __SPECIAL_INSTRUCTION_PREAMBLE                        \\\n-            \/* %EAX = guest_NRADDR *\/                             \\\n-            __asm xchg ecx,ecx                                    \\\n-            __asm mov __addr, eax                                 \\\n-    }                                                             \\\n-    _zzq_orig->nraddr = __addr;                                   \\\n-  }\n-\n-#define VALGRIND_CALL_NOREDIR_EAX ERROR\n-\n-#define VALGRIND_VEX_INJECT_IR()                                 \\\n- do {                                                            \\\n-    __asm { __SPECIAL_INSTRUCTION_PREAMBLE                       \\\n-            __asm xchg edi,edi                                   \\\n-    }                                                            \\\n- } while (0)\n-\n-#else\n-#error Unsupported compiler.\n-#endif\n-\n-#endif \/* PLAT_x86_win32 *\/\n-\n-\/* ----------------- amd64-{linux,darwin,solaris} --------------- *\/\n-\n-#if defined(PLAT_amd64_linux)  ||  defined(PLAT_amd64_darwin) \\\n-    ||  defined(PLAT_amd64_solaris) \\\n-    ||  (defined(PLAT_amd64_win64) && defined(__GNUC__))\n-\n-typedef\n-   struct {\n-      unsigned long int nraddr; \/* where's the code? *\/\n-   }\n-   OrigFn;\n-\n-#define __SPECIAL_INSTRUCTION_PREAMBLE                            \\\n-                     \"rolq $3,  %%rdi ; rolq $13, %%rdi\\n\\t\"      \\\n-                     \"rolq $61, %%rdi ; rolq $51, %%rdi\\n\\t\"\n-\n-#define VALGRIND_DO_CLIENT_REQUEST_EXPR(                          \\\n-        _zzq_default, _zzq_request,                               \\\n-        _zzq_arg1, _zzq_arg2, _zzq_arg3, _zzq_arg4, _zzq_arg5)    \\\n-    __extension__                                                 \\\n-    ({ volatile unsigned long int _zzq_args[6];                   \\\n-    volatile unsigned long int _zzq_result;                       \\\n-    _zzq_args[0] = (unsigned long int)(_zzq_request);             \\\n-    _zzq_args[1] = (unsigned long int)(_zzq_arg1);                \\\n-    _zzq_args[2] = (unsigned long int)(_zzq_arg2);                \\\n-    _zzq_args[3] = (unsigned long int)(_zzq_arg3);                \\\n-    _zzq_args[4] = (unsigned long int)(_zzq_arg4);                \\\n-    _zzq_args[5] = (unsigned long int)(_zzq_arg5);                \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* %RDX = client_request ( %RAX ) *\/         \\\n-                     \"xchgq %%rbx,%%rbx\"                          \\\n-                     : \"=d\" (_zzq_result)                         \\\n-                     : \"a\" (&_zzq_args[0]), \"0\" (_zzq_default)    \\\n-                     : \"cc\", \"memory\"                             \\\n-                    );                                            \\\n-    _zzq_result;                                                  \\\n-    })\n-\n-#define VALGRIND_GET_NR_CONTEXT(_zzq_rlval)                       \\\n-  { volatile OrigFn* _zzq_orig = &(_zzq_rlval);                   \\\n-    volatile unsigned long int __addr;                            \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* %RAX = guest_NRADDR *\/                    \\\n-                     \"xchgq %%rcx,%%rcx\"                          \\\n-                     : \"=a\" (__addr)                              \\\n-                     :                                            \\\n-                     : \"cc\", \"memory\"                             \\\n-                    );                                            \\\n-    _zzq_orig->nraddr = __addr;                                   \\\n-  }\n-\n-#define VALGRIND_CALL_NOREDIR_RAX                                 \\\n-                     __SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* call-noredir *%RAX *\/                     \\\n-                     \"xchgq %%rdx,%%rdx\\n\\t\"\n-\n-#define VALGRIND_VEX_INJECT_IR()                                 \\\n- do {                                                            \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE              \\\n-                     \"xchgq %%rdi,%%rdi\\n\\t\"                     \\\n-                     : : : \"cc\", \"memory\"                        \\\n-                    );                                           \\\n- } while (0)\n-\n-#endif \/* PLAT_amd64_linux || PLAT_amd64_darwin || PLAT_amd64_solaris *\/\n-\n-\/* ------------------------- amd64-Win64 ------------------------- *\/\n-\n-#if defined(PLAT_amd64_win64) && !defined(__GNUC__)\n-\n-#error Unsupported compiler.\n-\n-#endif \/* PLAT_amd64_win64 *\/\n-\n-\/* ------------------------ ppc32-linux ------------------------ *\/\n-\n-#if defined(PLAT_ppc32_linux)\n-\n-typedef\n-   struct {\n-      unsigned int nraddr; \/* where's the code? *\/\n-   }\n-   OrigFn;\n-\n-#define __SPECIAL_INSTRUCTION_PREAMBLE                            \\\n-                    \"rlwinm 0,0,3,0,31  ; rlwinm 0,0,13,0,31\\n\\t\" \\\n-                    \"rlwinm 0,0,29,0,31 ; rlwinm 0,0,19,0,31\\n\\t\"\n-\n-#define VALGRIND_DO_CLIENT_REQUEST_EXPR(                          \\\n-        _zzq_default, _zzq_request,                               \\\n-        _zzq_arg1, _zzq_arg2, _zzq_arg3, _zzq_arg4, _zzq_arg5)    \\\n-                                                                  \\\n-    __extension__                                                 \\\n-  ({         unsigned int  _zzq_args[6];                          \\\n-             unsigned int  _zzq_result;                           \\\n-             unsigned int* _zzq_ptr;                              \\\n-    _zzq_args[0] = (unsigned int)(_zzq_request);                  \\\n-    _zzq_args[1] = (unsigned int)(_zzq_arg1);                     \\\n-    _zzq_args[2] = (unsigned int)(_zzq_arg2);                     \\\n-    _zzq_args[3] = (unsigned int)(_zzq_arg3);                     \\\n-    _zzq_args[4] = (unsigned int)(_zzq_arg4);                     \\\n-    _zzq_args[5] = (unsigned int)(_zzq_arg5);                     \\\n-    _zzq_ptr = _zzq_args;                                         \\\n-    __asm__ volatile(\"mr 3,%1\\n\\t\" \/*default*\/                    \\\n-                     \"mr 4,%2\\n\\t\" \/*ptr*\/                        \\\n-                     __SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* %R3 = client_request ( %R4 ) *\/           \\\n-                     \"or 1,1,1\\n\\t\"                               \\\n-                     \"mr %0,3\"     \/*result*\/                     \\\n-                     : \"=b\" (_zzq_result)                         \\\n-                     : \"b\" (_zzq_default), \"b\" (_zzq_ptr)         \\\n-                     : \"cc\", \"memory\", \"r3\", \"r4\");               \\\n-    _zzq_result;                                                  \\\n-    })\n-\n-#define VALGRIND_GET_NR_CONTEXT(_zzq_rlval)                       \\\n-  { volatile OrigFn* _zzq_orig = &(_zzq_rlval);                   \\\n-    unsigned int __addr;                                          \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* %R3 = guest_NRADDR *\/                     \\\n-                     \"or 2,2,2\\n\\t\"                               \\\n-                     \"mr %0,3\"                                    \\\n-                     : \"=b\" (__addr)                              \\\n-                     :                                            \\\n-                     : \"cc\", \"memory\", \"r3\"                       \\\n-                    );                                            \\\n-    _zzq_orig->nraddr = __addr;                                   \\\n-  }\n-\n-#define VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                   \\\n-                     __SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* branch-and-link-to-noredir *%R11 *\/       \\\n-                     \"or 3,3,3\\n\\t\"\n-\n-#define VALGRIND_VEX_INJECT_IR()                                 \\\n- do {                                                            \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE              \\\n-                     \"or 5,5,5\\n\\t\"                              \\\n-                    );                                           \\\n- } while (0)\n-\n-#endif \/* PLAT_ppc32_linux *\/\n-\n-\/* ------------------------ ppc64-linux ------------------------ *\/\n-\n-#if defined(PLAT_ppc64be_linux)\n-\n-typedef\n-   struct {\n-      unsigned long int nraddr; \/* where's the code? *\/\n-      unsigned long int r2;  \/* what tocptr do we need? *\/\n-   }\n-   OrigFn;\n-\n-#define __SPECIAL_INSTRUCTION_PREAMBLE                            \\\n-                     \"rotldi 0,0,3  ; rotldi 0,0,13\\n\\t\"          \\\n-                     \"rotldi 0,0,61 ; rotldi 0,0,51\\n\\t\"\n-\n-#define VALGRIND_DO_CLIENT_REQUEST_EXPR(                          \\\n-        _zzq_default, _zzq_request,                               \\\n-        _zzq_arg1, _zzq_arg2, _zzq_arg3, _zzq_arg4, _zzq_arg5)    \\\n-                                                                  \\\n-  __extension__                                                   \\\n-  ({         unsigned long int  _zzq_args[6];                     \\\n-             unsigned long int  _zzq_result;                      \\\n-             unsigned long int* _zzq_ptr;                         \\\n-    _zzq_args[0] = (unsigned long int)(_zzq_request);             \\\n-    _zzq_args[1] = (unsigned long int)(_zzq_arg1);                \\\n-    _zzq_args[2] = (unsigned long int)(_zzq_arg2);                \\\n-    _zzq_args[3] = (unsigned long int)(_zzq_arg3);                \\\n-    _zzq_args[4] = (unsigned long int)(_zzq_arg4);                \\\n-    _zzq_args[5] = (unsigned long int)(_zzq_arg5);                \\\n-    _zzq_ptr = _zzq_args;                                         \\\n-    __asm__ volatile(\"mr 3,%1\\n\\t\" \/*default*\/                    \\\n-                     \"mr 4,%2\\n\\t\" \/*ptr*\/                        \\\n-                     __SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* %R3 = client_request ( %R4 ) *\/           \\\n-                     \"or 1,1,1\\n\\t\"                               \\\n-                     \"mr %0,3\"     \/*result*\/                     \\\n-                     : \"=b\" (_zzq_result)                         \\\n-                     : \"b\" (_zzq_default), \"b\" (_zzq_ptr)         \\\n-                     : \"cc\", \"memory\", \"r3\", \"r4\");               \\\n-    _zzq_result;                                                  \\\n-  })\n-\n-#define VALGRIND_GET_NR_CONTEXT(_zzq_rlval)                       \\\n-  { volatile OrigFn* _zzq_orig = &(_zzq_rlval);                   \\\n-    unsigned long int __addr;                                     \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* %R3 = guest_NRADDR *\/                     \\\n-                     \"or 2,2,2\\n\\t\"                               \\\n-                     \"mr %0,3\"                                    \\\n-                     : \"=b\" (__addr)                              \\\n-                     :                                            \\\n-                     : \"cc\", \"memory\", \"r3\"                       \\\n-                    );                                            \\\n-    _zzq_orig->nraddr = __addr;                                   \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* %R3 = guest_NRADDR_GPR2 *\/                \\\n-                     \"or 4,4,4\\n\\t\"                               \\\n-                     \"mr %0,3\"                                    \\\n-                     : \"=b\" (__addr)                              \\\n-                     :                                            \\\n-                     : \"cc\", \"memory\", \"r3\"                       \\\n-                    );                                            \\\n-    _zzq_orig->r2 = __addr;                                       \\\n-  }\n-\n-#define VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                   \\\n-                     __SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* branch-and-link-to-noredir *%R11 *\/       \\\n-                     \"or 3,3,3\\n\\t\"\n-\n-#define VALGRIND_VEX_INJECT_IR()                                 \\\n- do {                                                            \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE              \\\n-                     \"or 5,5,5\\n\\t\"                              \\\n-                    );                                           \\\n- } while (0)\n-\n-#endif \/* PLAT_ppc64be_linux *\/\n-\n-#if defined(PLAT_ppc64le_linux)\n-\n-typedef\n-   struct {\n-      unsigned long int nraddr; \/* where's the code? *\/\n-      unsigned long int r2;     \/* what tocptr do we need? *\/\n-   }\n-   OrigFn;\n-\n-#define __SPECIAL_INSTRUCTION_PREAMBLE                            \\\n-                     \"rotldi 0,0,3  ; rotldi 0,0,13\\n\\t\"          \\\n-                     \"rotldi 0,0,61 ; rotldi 0,0,51\\n\\t\"\n-\n-#define VALGRIND_DO_CLIENT_REQUEST_EXPR(                          \\\n-        _zzq_default, _zzq_request,                               \\\n-        _zzq_arg1, _zzq_arg2, _zzq_arg3, _zzq_arg4, _zzq_arg5)    \\\n-                                                                  \\\n-  __extension__                                                   \\\n-  ({         unsigned long int  _zzq_args[6];                     \\\n-             unsigned long int  _zzq_result;                      \\\n-             unsigned long int* _zzq_ptr;                         \\\n-    _zzq_args[0] = (unsigned long int)(_zzq_request);             \\\n-    _zzq_args[1] = (unsigned long int)(_zzq_arg1);                \\\n-    _zzq_args[2] = (unsigned long int)(_zzq_arg2);                \\\n-    _zzq_args[3] = (unsigned long int)(_zzq_arg3);                \\\n-    _zzq_args[4] = (unsigned long int)(_zzq_arg4);                \\\n-    _zzq_args[5] = (unsigned long int)(_zzq_arg5);                \\\n-    _zzq_ptr = _zzq_args;                                         \\\n-    __asm__ volatile(\"mr 3,%1\\n\\t\" \/*default*\/                    \\\n-                     \"mr 4,%2\\n\\t\" \/*ptr*\/                        \\\n-                     __SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* %R3 = client_request ( %R4 ) *\/           \\\n-                     \"or 1,1,1\\n\\t\"                               \\\n-                     \"mr %0,3\"     \/*result*\/                     \\\n-                     : \"=b\" (_zzq_result)                         \\\n-                     : \"b\" (_zzq_default), \"b\" (_zzq_ptr)         \\\n-                     : \"cc\", \"memory\", \"r3\", \"r4\");               \\\n-    _zzq_result;                                                  \\\n-  })\n-\n-#define VALGRIND_GET_NR_CONTEXT(_zzq_rlval)                       \\\n-  { volatile OrigFn* _zzq_orig = &(_zzq_rlval);                   \\\n-    unsigned long int __addr;                                     \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* %R3 = guest_NRADDR *\/                     \\\n-                     \"or 2,2,2\\n\\t\"                               \\\n-                     \"mr %0,3\"                                    \\\n-                     : \"=b\" (__addr)                              \\\n-                     :                                            \\\n-                     : \"cc\", \"memory\", \"r3\"                       \\\n-                    );                                            \\\n-    _zzq_orig->nraddr = __addr;                                   \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* %R3 = guest_NRADDR_GPR2 *\/                \\\n-                     \"or 4,4,4\\n\\t\"                               \\\n-                     \"mr %0,3\"                                    \\\n-                     : \"=b\" (__addr)                              \\\n-                     :                                            \\\n-                     : \"cc\", \"memory\", \"r3\"                       \\\n-                    );                                            \\\n-    _zzq_orig->r2 = __addr;                                       \\\n-  }\n-\n-#define VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12                   \\\n-                     __SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* branch-and-link-to-noredir *%R12 *\/       \\\n-                     \"or 3,3,3\\n\\t\"\n-\n-#define VALGRIND_VEX_INJECT_IR()                                 \\\n- do {                                                            \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE              \\\n-                     \"or 5,5,5\\n\\t\"                              \\\n-                    );                                           \\\n- } while (0)\n-\n-#endif \/* PLAT_ppc64le_linux *\/\n-\n-\/* ------------------------- arm-linux ------------------------- *\/\n-\n-#if defined(PLAT_arm_linux)\n-\n-typedef\n-   struct {\n-      unsigned int nraddr; \/* where's the code? *\/\n-   }\n-   OrigFn;\n-\n-#define __SPECIAL_INSTRUCTION_PREAMBLE                            \\\n-            \"mov r12, r12, ror #3  ; mov r12, r12, ror #13 \\n\\t\"  \\\n-            \"mov r12, r12, ror #29 ; mov r12, r12, ror #19 \\n\\t\"\n-\n-#define VALGRIND_DO_CLIENT_REQUEST_EXPR(                          \\\n-        _zzq_default, _zzq_request,                               \\\n-        _zzq_arg1, _zzq_arg2, _zzq_arg3, _zzq_arg4, _zzq_arg5)    \\\n-                                                                  \\\n-  __extension__                                                   \\\n-  ({volatile unsigned int  _zzq_args[6];                          \\\n-    volatile unsigned int  _zzq_result;                           \\\n-    _zzq_args[0] = (unsigned int)(_zzq_request);                  \\\n-    _zzq_args[1] = (unsigned int)(_zzq_arg1);                     \\\n-    _zzq_args[2] = (unsigned int)(_zzq_arg2);                     \\\n-    _zzq_args[3] = (unsigned int)(_zzq_arg3);                     \\\n-    _zzq_args[4] = (unsigned int)(_zzq_arg4);                     \\\n-    _zzq_args[5] = (unsigned int)(_zzq_arg5);                     \\\n-    __asm__ volatile(\"mov r3, %1\\n\\t\" \/*default*\/                 \\\n-                     \"mov r4, %2\\n\\t\" \/*ptr*\/                     \\\n-                     __SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* R3 = client_request ( R4 ) *\/             \\\n-                     \"orr r10, r10, r10\\n\\t\"                      \\\n-                     \"mov %0, r3\"     \/*result*\/                  \\\n-                     : \"=r\" (_zzq_result)                         \\\n-                     : \"r\" (_zzq_default), \"r\" (&_zzq_args[0])    \\\n-                     : \"cc\",\"memory\", \"r3\", \"r4\");                \\\n-    _zzq_result;                                                  \\\n-  })\n-\n-#define VALGRIND_GET_NR_CONTEXT(_zzq_rlval)                       \\\n-  { volatile OrigFn* _zzq_orig = &(_zzq_rlval);                   \\\n-    unsigned int __addr;                                          \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* R3 = guest_NRADDR *\/                      \\\n-                     \"orr r11, r11, r11\\n\\t\"                      \\\n-                     \"mov %0, r3\"                                 \\\n-                     : \"=r\" (__addr)                              \\\n-                     :                                            \\\n-                     : \"cc\", \"memory\", \"r3\"                       \\\n-                    );                                            \\\n-    _zzq_orig->nraddr = __addr;                                   \\\n-  }\n-\n-#define VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4                    \\\n-                     __SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* branch-and-link-to-noredir *%R4 *\/        \\\n-                     \"orr r12, r12, r12\\n\\t\"\n-\n-#define VALGRIND_VEX_INJECT_IR()                                 \\\n- do {                                                            \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE              \\\n-                     \"orr r9, r9, r9\\n\\t\"                        \\\n-                     : : : \"cc\", \"memory\"                        \\\n-                    );                                           \\\n- } while (0)\n-\n-#endif \/* PLAT_arm_linux *\/\n-\n-\/* ------------------------ arm64-linux ------------------------- *\/\n-\n-#if defined(PLAT_arm64_linux)\n-\n-typedef\n-   struct {\n-      unsigned long int nraddr; \/* where's the code? *\/\n-   }\n-   OrigFn;\n-\n-#define __SPECIAL_INSTRUCTION_PREAMBLE                            \\\n-            \"ror x12, x12, #3  ;  ror x12, x12, #13 \\n\\t\"         \\\n-            \"ror x12, x12, #51 ;  ror x12, x12, #61 \\n\\t\"\n-\n-#define VALGRIND_DO_CLIENT_REQUEST_EXPR(                          \\\n-        _zzq_default, _zzq_request,                               \\\n-        _zzq_arg1, _zzq_arg2, _zzq_arg3, _zzq_arg4, _zzq_arg5)    \\\n-                                                                  \\\n-  __extension__                                                   \\\n-  ({volatile unsigned long int  _zzq_args[6];                     \\\n-    volatile unsigned long int  _zzq_result;                      \\\n-    _zzq_args[0] = (unsigned long int)(_zzq_request);             \\\n-    _zzq_args[1] = (unsigned long int)(_zzq_arg1);                \\\n-    _zzq_args[2] = (unsigned long int)(_zzq_arg2);                \\\n-    _zzq_args[3] = (unsigned long int)(_zzq_arg3);                \\\n-    _zzq_args[4] = (unsigned long int)(_zzq_arg4);                \\\n-    _zzq_args[5] = (unsigned long int)(_zzq_arg5);                \\\n-    __asm__ volatile(\"mov x3, %1\\n\\t\" \/*default*\/                 \\\n-                     \"mov x4, %2\\n\\t\" \/*ptr*\/                     \\\n-                     __SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* X3 = client_request ( X4 ) *\/             \\\n-                     \"orr x10, x10, x10\\n\\t\"                      \\\n-                     \"mov %0, x3\"     \/*result*\/                  \\\n-                     : \"=r\" (_zzq_result)                         \\\n-                     : \"r\" ((unsigned long int)(_zzq_default)),   \\\n-                       \"r\" (&_zzq_args[0])                        \\\n-                     : \"cc\",\"memory\", \"x3\", \"x4\");                \\\n-    _zzq_result;                                                  \\\n-  })\n-\n-#define VALGRIND_GET_NR_CONTEXT(_zzq_rlval)                       \\\n-  { volatile OrigFn* _zzq_orig = &(_zzq_rlval);                   \\\n-    unsigned long int __addr;                                     \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* X3 = guest_NRADDR *\/                      \\\n-                     \"orr x11, x11, x11\\n\\t\"                      \\\n-                     \"mov %0, x3\"                                 \\\n-                     : \"=r\" (__addr)                              \\\n-                     :                                            \\\n-                     : \"cc\", \"memory\", \"x3\"                       \\\n-                    );                                            \\\n-    _zzq_orig->nraddr = __addr;                                   \\\n-  }\n-\n-#define VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8                    \\\n-                     __SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* branch-and-link-to-noredir X8 *\/          \\\n-                     \"orr x12, x12, x12\\n\\t\"\n-\n-#define VALGRIND_VEX_INJECT_IR()                                 \\\n- do {                                                            \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE              \\\n-                     \"orr x9, x9, x9\\n\\t\"                        \\\n-                     : : : \"cc\", \"memory\"                        \\\n-                    );                                           \\\n- } while (0)\n-\n-#endif \/* PLAT_arm64_linux *\/\n-\n-\/* ------------------------ s390x-linux ------------------------ *\/\n-\n-#if defined(PLAT_s390x_linux)\n-\n-typedef\n-  struct {\n-     unsigned long int nraddr; \/* where's the code? *\/\n-  }\n-  OrigFn;\n-\n-\/* __SPECIAL_INSTRUCTION_PREAMBLE will be used to identify Valgrind specific\n- * code. This detection is implemented in platform specific toIR.c\n- * (e.g. VEX\/priv\/guest_s390_decoder.c).\n- *\/\n-#define __SPECIAL_INSTRUCTION_PREAMBLE                           \\\n-                     \"lr 15,15\\n\\t\"                              \\\n-                     \"lr 1,1\\n\\t\"                                \\\n-                     \"lr 2,2\\n\\t\"                                \\\n-                     \"lr 3,3\\n\\t\"\n-\n-#define __CLIENT_REQUEST_CODE \"lr 2,2\\n\\t\"\n-#define __GET_NR_CONTEXT_CODE \"lr 3,3\\n\\t\"\n-#define __CALL_NO_REDIR_CODE  \"lr 4,4\\n\\t\"\n-#define __VEX_INJECT_IR_CODE  \"lr 5,5\\n\\t\"\n-\n-#define VALGRIND_DO_CLIENT_REQUEST_EXPR(                         \\\n-       _zzq_default, _zzq_request,                               \\\n-       _zzq_arg1, _zzq_arg2, _zzq_arg3, _zzq_arg4, _zzq_arg5)    \\\n-  __extension__                                                  \\\n- ({volatile unsigned long int _zzq_args[6];                      \\\n-   volatile unsigned long int _zzq_result;                       \\\n-   _zzq_args[0] = (unsigned long int)(_zzq_request);             \\\n-   _zzq_args[1] = (unsigned long int)(_zzq_arg1);                \\\n-   _zzq_args[2] = (unsigned long int)(_zzq_arg2);                \\\n-   _zzq_args[3] = (unsigned long int)(_zzq_arg3);                \\\n-   _zzq_args[4] = (unsigned long int)(_zzq_arg4);                \\\n-   _zzq_args[5] = (unsigned long int)(_zzq_arg5);                \\\n-   __asm__ volatile(\/* r2 = args *\/                              \\\n-                    \"lgr 2,%1\\n\\t\"                               \\\n-                    \/* r3 = default *\/                           \\\n-                    \"lgr 3,%2\\n\\t\"                               \\\n-                    __SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                    __CLIENT_REQUEST_CODE                        \\\n-                    \/* results = r3 *\/                           \\\n-                    \"lgr %0, 3\\n\\t\"                              \\\n-                    : \"=d\" (_zzq_result)                         \\\n-                    : \"a\" (&_zzq_args[0]), \"0\" (_zzq_default)    \\\n-                    : \"cc\", \"2\", \"3\", \"memory\"                   \\\n-                   );                                            \\\n-   _zzq_result;                                                  \\\n- })\n-\n-#define VALGRIND_GET_NR_CONTEXT(_zzq_rlval)                      \\\n- { volatile OrigFn* _zzq_orig = &(_zzq_rlval);                   \\\n-   volatile unsigned long int __addr;                            \\\n-   __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                    __GET_NR_CONTEXT_CODE                        \\\n-                    \"lgr %0, 3\\n\\t\"                              \\\n-                    : \"=a\" (__addr)                              \\\n-                    :                                            \\\n-                    : \"cc\", \"3\", \"memory\"                        \\\n-                   );                                            \\\n-   _zzq_orig->nraddr = __addr;                                   \\\n- }\n-\n-#define VALGRIND_CALL_NOREDIR_R1                                 \\\n-                    __SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                    __CALL_NO_REDIR_CODE\n-\n-#define VALGRIND_VEX_INJECT_IR()                                 \\\n- do {                                                            \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE              \\\n-                     __VEX_INJECT_IR_CODE);                      \\\n- } while (0)\n-\n-#endif \/* PLAT_s390x_linux *\/\n-\n-\/* ------------------------- mips32-linux ---------------- *\/\n-\n-#if defined(PLAT_mips32_linux)\n-\n-typedef\n-   struct {\n-      unsigned int nraddr; \/* where's the code? *\/\n-   }\n-   OrigFn;\n-\n-\/* .word  0x342\n- * .word  0x742\n- * .word  0xC2\n- * .word  0x4C2*\/\n-#define __SPECIAL_INSTRUCTION_PREAMBLE          \\\n-                     \"srl $0, $0, 13\\n\\t\"       \\\n-                     \"srl $0, $0, 29\\n\\t\"       \\\n-                     \"srl $0, $0, 3\\n\\t\"        \\\n-                     \"srl $0, $0, 19\\n\\t\"\n-\n-#define VALGRIND_DO_CLIENT_REQUEST_EXPR(                          \\\n-       _zzq_default, _zzq_request,                                \\\n-       _zzq_arg1, _zzq_arg2, _zzq_arg3, _zzq_arg4, _zzq_arg5)     \\\n-  __extension__                                                   \\\n-  ({ volatile unsigned int _zzq_args[6];                          \\\n-    volatile unsigned int _zzq_result;                            \\\n-    _zzq_args[0] = (unsigned int)(_zzq_request);                  \\\n-    _zzq_args[1] = (unsigned int)(_zzq_arg1);                     \\\n-    _zzq_args[2] = (unsigned int)(_zzq_arg2);                     \\\n-    _zzq_args[3] = (unsigned int)(_zzq_arg3);                     \\\n-    _zzq_args[4] = (unsigned int)(_zzq_arg4);                     \\\n-    _zzq_args[5] = (unsigned int)(_zzq_arg5);                     \\\n-        __asm__ volatile(\"move $11, %1\\n\\t\" \/*default*\/           \\\n-                     \"move $12, %2\\n\\t\" \/*ptr*\/                   \\\n-                     __SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* T3 = client_request ( T4 ) *\/             \\\n-                     \"or $13, $13, $13\\n\\t\"                       \\\n-                     \"move %0, $11\\n\\t\"     \/*result*\/            \\\n-                     : \"=r\" (_zzq_result)                         \\\n-                     : \"r\" (_zzq_default), \"r\" (&_zzq_args[0])    \\\n-                     : \"$11\", \"$12\", \"memory\");                   \\\n-    _zzq_result;                                                  \\\n-  })\n-\n-#define VALGRIND_GET_NR_CONTEXT(_zzq_rlval)                       \\\n-  { volatile OrigFn* _zzq_orig = &(_zzq_rlval);                   \\\n-    volatile unsigned int __addr;                                 \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE               \\\n-                     \/* %t9 = guest_NRADDR *\/                     \\\n-                     \"or $14, $14, $14\\n\\t\"                       \\\n-                     \"move %0, $11\"     \/*result*\/                \\\n-                     : \"=r\" (__addr)                              \\\n-                     :                                            \\\n-                     : \"$11\"                                      \\\n-                    );                                            \\\n-    _zzq_orig->nraddr = __addr;                                   \\\n-  }\n-\n-#define VALGRIND_CALL_NOREDIR_T9                                 \\\n-                     __SPECIAL_INSTRUCTION_PREAMBLE              \\\n-                     \/* call-noredir *%t9 *\/                     \\\n-                     \"or $15, $15, $15\\n\\t\"\n-\n-#define VALGRIND_VEX_INJECT_IR()                                 \\\n- do {                                                            \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE              \\\n-                     \"or $11, $11, $11\\n\\t\"                      \\\n-                    );                                           \\\n- } while (0)\n-\n-\n-#endif \/* PLAT_mips32_linux *\/\n-\n-\/* ------------------------- mips64-linux ---------------- *\/\n-\n-#if defined(PLAT_mips64_linux)\n-\n-typedef\n-   struct {\n-      unsigned long nraddr; \/* where's the code? *\/\n-   }\n-   OrigFn;\n-\n-\/* dsll $0,$0, 3\n- * dsll $0,$0, 13\n- * dsll $0,$0, 29\n- * dsll $0,$0, 19*\/\n-#define __SPECIAL_INSTRUCTION_PREAMBLE                              \\\n-                     \"dsll $0,$0, 3 ; dsll $0,$0,13\\n\\t\"            \\\n-                     \"dsll $0,$0,29 ; dsll $0,$0,19\\n\\t\"\n-\n-#define VALGRIND_DO_CLIENT_REQUEST_EXPR(                            \\\n-       _zzq_default, _zzq_request,                                  \\\n-       _zzq_arg1, _zzq_arg2, _zzq_arg3, _zzq_arg4, _zzq_arg5)       \\\n-  __extension__                                                     \\\n-  ({ volatile unsigned long int _zzq_args[6];                       \\\n-    volatile unsigned long int _zzq_result;                         \\\n-    _zzq_args[0] = (unsigned long int)(_zzq_request);               \\\n-    _zzq_args[1] = (unsigned long int)(_zzq_arg1);                  \\\n-    _zzq_args[2] = (unsigned long int)(_zzq_arg2);                  \\\n-    _zzq_args[3] = (unsigned long int)(_zzq_arg3);                  \\\n-    _zzq_args[4] = (unsigned long int)(_zzq_arg4);                  \\\n-    _zzq_args[5] = (unsigned long int)(_zzq_arg5);                  \\\n-        __asm__ volatile(\"move $11, %1\\n\\t\" \/*default*\/             \\\n-                         \"move $12, %2\\n\\t\" \/*ptr*\/                 \\\n-                         __SPECIAL_INSTRUCTION_PREAMBLE             \\\n-                         \/* $11 = client_request ( $12 ) *\/         \\\n-                         \"or $13, $13, $13\\n\\t\"                     \\\n-                         \"move %0, $11\\n\\t\"     \/*result*\/          \\\n-                         : \"=r\" (_zzq_result)                       \\\n-                         : \"r\" (_zzq_default), \"r\" (&_zzq_args[0])  \\\n-                         : \"$11\", \"$12\", \"memory\");                 \\\n-    _zzq_result;                                                    \\\n-  })\n-\n-#define VALGRIND_GET_NR_CONTEXT(_zzq_rlval)                         \\\n-  { volatile OrigFn* _zzq_orig = &(_zzq_rlval);                     \\\n-    volatile unsigned long int __addr;                              \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE                 \\\n-                     \/* $11 = guest_NRADDR *\/                       \\\n-                     \"or $14, $14, $14\\n\\t\"                         \\\n-                     \"move %0, $11\"     \/*result*\/                  \\\n-                     : \"=r\" (__addr)                                \\\n-                     :                                              \\\n-                     : \"$11\");                                      \\\n-    _zzq_orig->nraddr = __addr;                                     \\\n-  }\n-\n-#define VALGRIND_CALL_NOREDIR_T9                                    \\\n-                     __SPECIAL_INSTRUCTION_PREAMBLE                 \\\n-                     \/* call-noredir $25 *\/                         \\\n-                     \"or $15, $15, $15\\n\\t\"\n-\n-#define VALGRIND_VEX_INJECT_IR()                                    \\\n- do {                                                               \\\n-    __asm__ volatile(__SPECIAL_INSTRUCTION_PREAMBLE                 \\\n-                     \"or $11, $11, $11\\n\\t\"                         \\\n-                    );                                              \\\n- } while (0)\n-\n-#endif \/* PLAT_mips64_linux *\/\n-\n-\/* Insert assembly code for other platforms here... *\/\n-\n-#endif \/* NVALGRIND *\/\n-\n-\n-\/* ------------------------------------------------------------------ *\/\n-\/* PLATFORM SPECIFICS for FUNCTION WRAPPING.  This is all very        *\/\n-\/* ugly.  It's the least-worst tradeoff I can think of.               *\/\n-\/* ------------------------------------------------------------------ *\/\n-\n-\/* This section defines magic (a.k.a appalling-hack) macros for doing\n-   guaranteed-no-redirection macros, so as to get from function\n-   wrappers to the functions they are wrapping.  The whole point is to\n-   construct standard call sequences, but to do the call itself with a\n-   special no-redirect call pseudo-instruction that the JIT\n-   understands and handles specially.  This section is long and\n-   repetitious, and I can't see a way to make it shorter.\n-\n-   The naming scheme is as follows:\n-\n-      CALL_FN_{W,v}_{v,W,WW,WWW,WWWW,5W,6W,7W,etc}\n-\n-   'W' stands for \"word\" and 'v' for \"void\".  Hence there are\n-   different macros for calling arity 0, 1, 2, 3, 4, etc, functions,\n-   and for each, the possibility of returning a word-typed result, or\n-   no result.\n-*\/\n-\n-\/* Use these to write the name of your wrapper.  NOTE: duplicates\n-   VG_WRAP_FUNCTION_Z{U,Z} in pub_tool_redir.h.  NOTE also: inserts\n-   the default behaviour equivalance class tag \"0000\" into the name.\n-   See pub_tool_redir.h for details -- normally you don't need to\n-   think about this, though. *\/\n-\n-\/* Use an extra level of macroisation so as to ensure the soname\/fnname\n-   args are fully macro-expanded before pasting them together. *\/\n-#define VG_CONCAT4(_aa,_bb,_cc,_dd) _aa##_bb##_cc##_dd\n-\n-#define I_WRAP_SONAME_FNNAME_ZU(soname,fnname)                    \\\n-   VG_CONCAT4(_vgw00000ZU_,soname,_,fnname)\n-\n-#define I_WRAP_SONAME_FNNAME_ZZ(soname,fnname)                    \\\n-   VG_CONCAT4(_vgw00000ZZ_,soname,_,fnname)\n-\n-\/* Use this macro from within a wrapper function to collect the\n-   context (address and possibly other info) of the original function.\n-   Once you have that you can then use it in one of the CALL_FN_\n-   macros.  The type of the argument _lval is OrigFn. *\/\n-#define VALGRIND_GET_ORIG_FN(_lval)  VALGRIND_GET_NR_CONTEXT(_lval)\n-\n-\/* Also provide end-user facilities for function replacement, rather\n-   than wrapping.  A replacement function differs from a wrapper in\n-   that it has no way to get hold of the original function being\n-   called, and hence no way to call onwards to it.  In a replacement\n-   function, VALGRIND_GET_ORIG_FN always returns zero. *\/\n-\n-#define I_REPLACE_SONAME_FNNAME_ZU(soname,fnname)                 \\\n-   VG_CONCAT4(_vgr00000ZU_,soname,_,fnname)\n-\n-#define I_REPLACE_SONAME_FNNAME_ZZ(soname,fnname)                 \\\n-   VG_CONCAT4(_vgr00000ZZ_,soname,_,fnname)\n-\n-\/* Derivatives of the main macros below, for calling functions\n-   returning void. *\/\n-\n-#define CALL_FN_v_v(fnptr)                                        \\\n-   do { volatile unsigned long _junk;                             \\\n-        CALL_FN_W_v(_junk,fnptr); } while (0)\n-\n-#define CALL_FN_v_W(fnptr, arg1)                                  \\\n-   do { volatile unsigned long _junk;                             \\\n-        CALL_FN_W_W(_junk,fnptr,arg1); } while (0)\n-\n-#define CALL_FN_v_WW(fnptr, arg1,arg2)                            \\\n-   do { volatile unsigned long _junk;                             \\\n-        CALL_FN_W_WW(_junk,fnptr,arg1,arg2); } while (0)\n-\n-#define CALL_FN_v_WWW(fnptr, arg1,arg2,arg3)                      \\\n-   do { volatile unsigned long _junk;                             \\\n-        CALL_FN_W_WWW(_junk,fnptr,arg1,arg2,arg3); } while (0)\n-\n-#define CALL_FN_v_WWWW(fnptr, arg1,arg2,arg3,arg4)                \\\n-   do { volatile unsigned long _junk;                             \\\n-        CALL_FN_W_WWWW(_junk,fnptr,arg1,arg2,arg3,arg4); } while (0)\n-\n-#define CALL_FN_v_5W(fnptr, arg1,arg2,arg3,arg4,arg5)             \\\n-   do { volatile unsigned long _junk;                             \\\n-        CALL_FN_W_5W(_junk,fnptr,arg1,arg2,arg3,arg4,arg5); } while (0)\n-\n-#define CALL_FN_v_6W(fnptr, arg1,arg2,arg3,arg4,arg5,arg6)        \\\n-   do { volatile unsigned long _junk;                             \\\n-        CALL_FN_W_6W(_junk,fnptr,arg1,arg2,arg3,arg4,arg5,arg6); } while (0)\n-\n-#define CALL_FN_v_7W(fnptr, arg1,arg2,arg3,arg4,arg5,arg6,arg7)   \\\n-   do { volatile unsigned long _junk;                             \\\n-        CALL_FN_W_7W(_junk,fnptr,arg1,arg2,arg3,arg4,arg5,arg6,arg7); } while (0)\n-\n-\/* ----------------- x86-{linux,darwin,solaris} ---------------- *\/\n-\n-#if defined(PLAT_x86_linux)  ||  defined(PLAT_x86_darwin) \\\n-    ||  defined(PLAT_x86_solaris)\n-\n-\/* These regs are trashed by the hidden call.  No need to mention eax\n-   as gcc can already see that, plus causes gcc to bomb. *\/\n-#define __CALLER_SAVED_REGS \/*\"eax\"*\/ \"ecx\", \"edx\"\n-\n-\/* Macros to save and align the stack before making a function\n-   call and restore it afterwards as gcc may not keep the stack\n-   pointer aligned if it doesn't realise calls are being made\n-   to other functions. *\/\n-\n-#define VALGRIND_ALIGN_STACK               \\\n-      \"movl %%esp,%%edi\\n\\t\"               \\\n-      \"andl $0xfffffff0,%%esp\\n\\t\"\n-#define VALGRIND_RESTORE_STACK             \\\n-      \"movl %%edi,%%esp\\n\\t\"\n-\n-\/* These CALL_FN_ macros assume that on x86-linux, sizeof(unsigned\n-   long) == 4. *\/\n-\n-#define CALL_FN_W_v(lval, orig)                                   \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[1];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"movl (%%eax), %%eax\\n\\t\"  \/* target->%eax *\/            \\\n-         VALGRIND_CALL_NOREDIR_EAX                                \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=a\" (_res)                                  \\\n-         : \/*in*\/    \"a\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"edi\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_W(lval, orig, arg1)                             \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[2];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"subl $12, %%esp\\n\\t\"                                    \\\n-         \"pushl 4(%%eax)\\n\\t\"                                     \\\n-         \"movl (%%eax), %%eax\\n\\t\"  \/* target->%eax *\/            \\\n-         VALGRIND_CALL_NOREDIR_EAX                                \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=a\" (_res)                                  \\\n-         : \/*in*\/    \"a\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"edi\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WW(lval, orig, arg1,arg2)                       \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"subl $8, %%esp\\n\\t\"                                     \\\n-         \"pushl 8(%%eax)\\n\\t\"                                     \\\n-         \"pushl 4(%%eax)\\n\\t\"                                     \\\n-         \"movl (%%eax), %%eax\\n\\t\"  \/* target->%eax *\/            \\\n-         VALGRIND_CALL_NOREDIR_EAX                                \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=a\" (_res)                                  \\\n-         : \/*in*\/    \"a\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"edi\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WWW(lval, orig, arg1,arg2,arg3)                 \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[4];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"subl $4, %%esp\\n\\t\"                                     \\\n-         \"pushl 12(%%eax)\\n\\t\"                                    \\\n-         \"pushl 8(%%eax)\\n\\t\"                                     \\\n-         \"pushl 4(%%eax)\\n\\t\"                                     \\\n-         \"movl (%%eax), %%eax\\n\\t\"  \/* target->%eax *\/            \\\n-         VALGRIND_CALL_NOREDIR_EAX                                \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=a\" (_res)                                  \\\n-         : \/*in*\/    \"a\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"edi\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WWWW(lval, orig, arg1,arg2,arg3,arg4)           \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[5];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"pushl 16(%%eax)\\n\\t\"                                    \\\n-         \"pushl 12(%%eax)\\n\\t\"                                    \\\n-         \"pushl 8(%%eax)\\n\\t\"                                     \\\n-         \"pushl 4(%%eax)\\n\\t\"                                     \\\n-         \"movl (%%eax), %%eax\\n\\t\"  \/* target->%eax *\/            \\\n-         VALGRIND_CALL_NOREDIR_EAX                                \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=a\" (_res)                                  \\\n-         : \/*in*\/    \"a\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"edi\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_5W(lval, orig, arg1,arg2,arg3,arg4,arg5)        \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[6];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"subl $12, %%esp\\n\\t\"                                    \\\n-         \"pushl 20(%%eax)\\n\\t\"                                    \\\n-         \"pushl 16(%%eax)\\n\\t\"                                    \\\n-         \"pushl 12(%%eax)\\n\\t\"                                    \\\n-         \"pushl 8(%%eax)\\n\\t\"                                     \\\n-         \"pushl 4(%%eax)\\n\\t\"                                     \\\n-         \"movl (%%eax), %%eax\\n\\t\"  \/* target->%eax *\/            \\\n-         VALGRIND_CALL_NOREDIR_EAX                                \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=a\" (_res)                                  \\\n-         : \/*in*\/    \"a\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"edi\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_6W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6)   \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[7];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"subl $8, %%esp\\n\\t\"                                     \\\n-         \"pushl 24(%%eax)\\n\\t\"                                    \\\n-         \"pushl 20(%%eax)\\n\\t\"                                    \\\n-         \"pushl 16(%%eax)\\n\\t\"                                    \\\n-         \"pushl 12(%%eax)\\n\\t\"                                    \\\n-         \"pushl 8(%%eax)\\n\\t\"                                     \\\n-         \"pushl 4(%%eax)\\n\\t\"                                     \\\n-         \"movl (%%eax), %%eax\\n\\t\"  \/* target->%eax *\/            \\\n-         VALGRIND_CALL_NOREDIR_EAX                                \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=a\" (_res)                                  \\\n-         : \/*in*\/    \"a\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"edi\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_7W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7)                            \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[8];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"subl $4, %%esp\\n\\t\"                                     \\\n-         \"pushl 28(%%eax)\\n\\t\"                                    \\\n-         \"pushl 24(%%eax)\\n\\t\"                                    \\\n-         \"pushl 20(%%eax)\\n\\t\"                                    \\\n-         \"pushl 16(%%eax)\\n\\t\"                                    \\\n-         \"pushl 12(%%eax)\\n\\t\"                                    \\\n-         \"pushl 8(%%eax)\\n\\t\"                                     \\\n-         \"pushl 4(%%eax)\\n\\t\"                                     \\\n-         \"movl (%%eax), %%eax\\n\\t\"  \/* target->%eax *\/            \\\n-         VALGRIND_CALL_NOREDIR_EAX                                \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=a\" (_res)                                  \\\n-         : \/*in*\/    \"a\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"edi\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_8W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7,arg8)                       \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[9];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"pushl 32(%%eax)\\n\\t\"                                    \\\n-         \"pushl 28(%%eax)\\n\\t\"                                    \\\n-         \"pushl 24(%%eax)\\n\\t\"                                    \\\n-         \"pushl 20(%%eax)\\n\\t\"                                    \\\n-         \"pushl 16(%%eax)\\n\\t\"                                    \\\n-         \"pushl 12(%%eax)\\n\\t\"                                    \\\n-         \"pushl 8(%%eax)\\n\\t\"                                     \\\n-         \"pushl 4(%%eax)\\n\\t\"                                     \\\n-         \"movl (%%eax), %%eax\\n\\t\"  \/* target->%eax *\/            \\\n-         VALGRIND_CALL_NOREDIR_EAX                                \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=a\" (_res)                                  \\\n-         : \/*in*\/    \"a\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"edi\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_9W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7,arg8,arg9)                  \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[10];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      _argvec[9] = (unsigned long)(arg9);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"subl $12, %%esp\\n\\t\"                                    \\\n-         \"pushl 36(%%eax)\\n\\t\"                                    \\\n-         \"pushl 32(%%eax)\\n\\t\"                                    \\\n-         \"pushl 28(%%eax)\\n\\t\"                                    \\\n-         \"pushl 24(%%eax)\\n\\t\"                                    \\\n-         \"pushl 20(%%eax)\\n\\t\"                                    \\\n-         \"pushl 16(%%eax)\\n\\t\"                                    \\\n-         \"pushl 12(%%eax)\\n\\t\"                                    \\\n-         \"pushl 8(%%eax)\\n\\t\"                                     \\\n-         \"pushl 4(%%eax)\\n\\t\"                                     \\\n-         \"movl (%%eax), %%eax\\n\\t\"  \/* target->%eax *\/            \\\n-         VALGRIND_CALL_NOREDIR_EAX                                \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=a\" (_res)                                  \\\n-         : \/*in*\/    \"a\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"edi\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_10W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,  \\\n-                                  arg7,arg8,arg9,arg10)           \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[11];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      _argvec[9] = (unsigned long)(arg9);                         \\\n-      _argvec[10] = (unsigned long)(arg10);                       \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"subl $8, %%esp\\n\\t\"                                     \\\n-         \"pushl 40(%%eax)\\n\\t\"                                    \\\n-         \"pushl 36(%%eax)\\n\\t\"                                    \\\n-         \"pushl 32(%%eax)\\n\\t\"                                    \\\n-         \"pushl 28(%%eax)\\n\\t\"                                    \\\n-         \"pushl 24(%%eax)\\n\\t\"                                    \\\n-         \"pushl 20(%%eax)\\n\\t\"                                    \\\n-         \"pushl 16(%%eax)\\n\\t\"                                    \\\n-         \"pushl 12(%%eax)\\n\\t\"                                    \\\n-         \"pushl 8(%%eax)\\n\\t\"                                     \\\n-         \"pushl 4(%%eax)\\n\\t\"                                     \\\n-         \"movl (%%eax), %%eax\\n\\t\"  \/* target->%eax *\/            \\\n-         VALGRIND_CALL_NOREDIR_EAX                                \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=a\" (_res)                                  \\\n-         : \/*in*\/    \"a\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"edi\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_11W(lval, orig, arg1,arg2,arg3,arg4,arg5,       \\\n-                                  arg6,arg7,arg8,arg9,arg10,      \\\n-                                  arg11)                          \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[12];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      _argvec[9] = (unsigned long)(arg9);                         \\\n-      _argvec[10] = (unsigned long)(arg10);                       \\\n-      _argvec[11] = (unsigned long)(arg11);                       \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"subl $4, %%esp\\n\\t\"                                     \\\n-         \"pushl 44(%%eax)\\n\\t\"                                    \\\n-         \"pushl 40(%%eax)\\n\\t\"                                    \\\n-         \"pushl 36(%%eax)\\n\\t\"                                    \\\n-         \"pushl 32(%%eax)\\n\\t\"                                    \\\n-         \"pushl 28(%%eax)\\n\\t\"                                    \\\n-         \"pushl 24(%%eax)\\n\\t\"                                    \\\n-         \"pushl 20(%%eax)\\n\\t\"                                    \\\n-         \"pushl 16(%%eax)\\n\\t\"                                    \\\n-         \"pushl 12(%%eax)\\n\\t\"                                    \\\n-         \"pushl 8(%%eax)\\n\\t\"                                     \\\n-         \"pushl 4(%%eax)\\n\\t\"                                     \\\n-         \"movl (%%eax), %%eax\\n\\t\"  \/* target->%eax *\/            \\\n-         VALGRIND_CALL_NOREDIR_EAX                                \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=a\" (_res)                                  \\\n-         : \/*in*\/    \"a\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"edi\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_12W(lval, orig, arg1,arg2,arg3,arg4,arg5,       \\\n-                                  arg6,arg7,arg8,arg9,arg10,      \\\n-                                  arg11,arg12)                    \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[13];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      _argvec[9] = (unsigned long)(arg9);                         \\\n-      _argvec[10] = (unsigned long)(arg10);                       \\\n-      _argvec[11] = (unsigned long)(arg11);                       \\\n-      _argvec[12] = (unsigned long)(arg12);                       \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"pushl 48(%%eax)\\n\\t\"                                    \\\n-         \"pushl 44(%%eax)\\n\\t\"                                    \\\n-         \"pushl 40(%%eax)\\n\\t\"                                    \\\n-         \"pushl 36(%%eax)\\n\\t\"                                    \\\n-         \"pushl 32(%%eax)\\n\\t\"                                    \\\n-         \"pushl 28(%%eax)\\n\\t\"                                    \\\n-         \"pushl 24(%%eax)\\n\\t\"                                    \\\n-         \"pushl 20(%%eax)\\n\\t\"                                    \\\n-         \"pushl 16(%%eax)\\n\\t\"                                    \\\n-         \"pushl 12(%%eax)\\n\\t\"                                    \\\n-         \"pushl 8(%%eax)\\n\\t\"                                     \\\n-         \"pushl 4(%%eax)\\n\\t\"                                     \\\n-         \"movl (%%eax), %%eax\\n\\t\"  \/* target->%eax *\/            \\\n-         VALGRIND_CALL_NOREDIR_EAX                                \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=a\" (_res)                                  \\\n-         : \/*in*\/    \"a\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"edi\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#endif \/* PLAT_x86_linux || PLAT_x86_darwin || PLAT_x86_solaris *\/\n-\n-\/* ---------------- amd64-{linux,darwin,solaris} --------------- *\/\n-\n-#if defined(PLAT_amd64_linux)  ||  defined(PLAT_amd64_darwin) \\\n-    ||  defined(PLAT_amd64_solaris)\n-\n-\/* ARGREGS: rdi rsi rdx rcx r8 r9 (the rest on stack in R-to-L order) *\/\n-\n-\/* These regs are trashed by the hidden call. *\/\n-#define __CALLER_SAVED_REGS \/*\"rax\",*\/ \"rcx\", \"rdx\", \"rsi\",       \\\n-                            \"rdi\", \"r8\", \"r9\", \"r10\", \"r11\"\n-\n-\/* This is all pretty complex.  It's so as to make stack unwinding\n-   work reliably.  See bug 243270.  The basic problem is the sub and\n-   add of 128 of %rsp in all of the following macros.  If gcc believes\n-   the CFA is in %rsp, then unwinding may fail, because what's at the\n-   CFA is not what gcc \"expected\" when it constructs the CFIs for the\n-   places where the macros are instantiated.\n-\n-   But we can't just add a CFI annotation to increase the CFA offset\n-   by 128, to match the sub of 128 from %rsp, because we don't know\n-   whether gcc has chosen %rsp as the CFA at that point, or whether it\n-   has chosen some other register (eg, %rbp).  In the latter case,\n-   adding a CFI annotation to change the CFA offset is simply wrong.\n-\n-   So the solution is to get hold of the CFA using\n-   __builtin_dwarf_cfa(), put it in a known register, and add a\n-   CFI annotation to say what the register is.  We choose %rbp for\n-   this (perhaps perversely), because:\n-\n-   (1) %rbp is already subject to unwinding.  If a new register was\n-       chosen then the unwinder would have to unwind it in all stack\n-       traces, which is expensive, and\n-\n-   (2) %rbp is already subject to precise exception updates in the\n-       JIT.  If a new register was chosen, we'd have to have precise\n-       exceptions for it too, which reduces performance of the\n-       generated code.\n-\n-   However .. one extra complication.  We can't just whack the result\n-   of __builtin_dwarf_cfa() into %rbp and then add %rbp to the\n-   list of trashed registers at the end of the inline assembly\n-   fragments; gcc won't allow %rbp to appear in that list.  Hence\n-   instead we need to stash %rbp in %r15 for the duration of the asm,\n-   and say that %r15 is trashed instead.  gcc seems happy to go with\n-   that.\n-\n-   Oh .. and this all needs to be conditionalised so that it is\n-   unchanged from before this commit, when compiled with older gccs\n-   that don't support __builtin_dwarf_cfa.  Furthermore, since\n-   this header file is freestanding, it has to be independent of\n-   config.h, and so the following conditionalisation cannot depend on\n-   configure time checks.\n-\n-   Although it's not clear from\n-   'defined(__GNUC__) && defined(__GCC_HAVE_DWARF2_CFI_ASM)',\n-   this expression excludes Darwin.\n-   .cfi directives in Darwin assembly appear to be completely\n-   different and I haven't investigated how they work.\n-\n-   For even more entertainment value, note we have to use the\n-   completely undocumented __builtin_dwarf_cfa(), which appears to\n-   really compute the CFA, whereas __builtin_frame_address(0) claims\n-   to but actually doesn't.  See\n-   https:\/\/bugs.kde.org\/show_bug.cgi?id=243270#c47\n-*\/\n-#if defined(__GNUC__) && defined(__GCC_HAVE_DWARF2_CFI_ASM)\n-#  define __FRAME_POINTER                                         \\\n-      ,\"r\"(__builtin_dwarf_cfa())\n-#  define VALGRIND_CFI_PROLOGUE                                   \\\n-      \"movq %%rbp, %%r15\\n\\t\"                                     \\\n-      \"movq %2, %%rbp\\n\\t\"                                        \\\n-      \".cfi_remember_state\\n\\t\"                                   \\\n-      \".cfi_def_cfa rbp, 0\\n\\t\"\n-#  define VALGRIND_CFI_EPILOGUE                                   \\\n-      \"movq %%r15, %%rbp\\n\\t\"                                     \\\n-      \".cfi_restore_state\\n\\t\"\n-#else\n-#  define __FRAME_POINTER\n-#  define VALGRIND_CFI_PROLOGUE\n-#  define VALGRIND_CFI_EPILOGUE\n-#endif\n-\n-\/* Macros to save and align the stack before making a function\n-   call and restore it afterwards as gcc may not keep the stack\n-   pointer aligned if it doesn't realise calls are being made\n-   to other functions. *\/\n-\n-#define VALGRIND_ALIGN_STACK               \\\n-      \"movq %%rsp,%%r14\\n\\t\"               \\\n-      \"andq $0xfffffffffffffff0,%%rsp\\n\\t\"\n-#define VALGRIND_RESTORE_STACK             \\\n-      \"movq %%r14,%%rsp\\n\\t\"\n-\n-\/* These CALL_FN_ macros assume that on amd64-linux, sizeof(unsigned\n-   long) == 8. *\/\n-\n-\/* NB 9 Sept 07.  There is a nasty kludge here in all these CALL_FN_\n-   macros.  In order not to trash the stack redzone, we need to drop\n-   %rsp by 128 before the hidden call, and restore afterwards.  The\n-   nastyness is that it is only by luck that the stack still appears\n-   to be unwindable during the hidden call - since then the behaviour\n-   of any routine using this macro does not match what the CFI data\n-   says.  Sigh.\n-\n-   Why is this important?  Imagine that a wrapper has a stack\n-   allocated local, and passes to the hidden call, a pointer to it.\n-   Because gcc does not know about the hidden call, it may allocate\n-   that local in the redzone.  Unfortunately the hidden call may then\n-   trash it before it comes to use it.  So we must step clear of the\n-   redzone, for the duration of the hidden call, to make it safe.\n-\n-   Probably the same problem afflicts the other redzone-style ABIs too\n-   (ppc64-linux); but for those, the stack is\n-   self describing (none of this CFI nonsense) so at least messing\n-   with the stack pointer doesn't give a danger of non-unwindable\n-   stack. *\/\n-\n-#define CALL_FN_W_v(lval, orig)                                        \\\n-   do {                                                                \\\n-      volatile OrigFn        _orig = (orig);                           \\\n-      volatile unsigned long _argvec[1];                               \\\n-      volatile unsigned long _res;                                     \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                        \\\n-      __asm__ volatile(                                                \\\n-         VALGRIND_CFI_PROLOGUE                                         \\\n-         VALGRIND_ALIGN_STACK                                          \\\n-         \"subq $128,%%rsp\\n\\t\"                                         \\\n-         \"movq (%%rax), %%rax\\n\\t\"  \/* target->%rax *\/                 \\\n-         VALGRIND_CALL_NOREDIR_RAX                                     \\\n-         VALGRIND_RESTORE_STACK                                        \\\n-         VALGRIND_CFI_EPILOGUE                                         \\\n-         : \/*out*\/   \"=a\" (_res)                                       \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER                 \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r14\", \"r15\" \\\n-      );                                                               \\\n-      lval = (__typeof__(lval)) _res;                                  \\\n-   } while (0)\n-\n-#define CALL_FN_W_W(lval, orig, arg1)                                  \\\n-   do {                                                                \\\n-      volatile OrigFn        _orig = (orig);                           \\\n-      volatile unsigned long _argvec[2];                               \\\n-      volatile unsigned long _res;                                     \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                        \\\n-      _argvec[1] = (unsigned long)(arg1);                              \\\n-      __asm__ volatile(                                                \\\n-         VALGRIND_CFI_PROLOGUE                                         \\\n-         VALGRIND_ALIGN_STACK                                          \\\n-         \"subq $128,%%rsp\\n\\t\"                                         \\\n-         \"movq 8(%%rax), %%rdi\\n\\t\"                                    \\\n-         \"movq (%%rax), %%rax\\n\\t\"  \/* target->%rax *\/                 \\\n-         VALGRIND_CALL_NOREDIR_RAX                                     \\\n-         VALGRIND_RESTORE_STACK                                        \\\n-         VALGRIND_CFI_EPILOGUE                                         \\\n-         : \/*out*\/   \"=a\" (_res)                                       \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER                 \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r14\", \"r15\" \\\n-      );                                                               \\\n-      lval = (__typeof__(lval)) _res;                                  \\\n-   } while (0)\n-\n-#define CALL_FN_W_WW(lval, orig, arg1,arg2)                            \\\n-   do {                                                                \\\n-      volatile OrigFn        _orig = (orig);                           \\\n-      volatile unsigned long _argvec[3];                               \\\n-      volatile unsigned long _res;                                     \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                        \\\n-      _argvec[1] = (unsigned long)(arg1);                              \\\n-      _argvec[2] = (unsigned long)(arg2);                              \\\n-      __asm__ volatile(                                                \\\n-         VALGRIND_CFI_PROLOGUE                                         \\\n-         VALGRIND_ALIGN_STACK                                          \\\n-         \"subq $128,%%rsp\\n\\t\"                                         \\\n-         \"movq 16(%%rax), %%rsi\\n\\t\"                                   \\\n-         \"movq 8(%%rax), %%rdi\\n\\t\"                                    \\\n-         \"movq (%%rax), %%rax\\n\\t\"  \/* target->%rax *\/                 \\\n-         VALGRIND_CALL_NOREDIR_RAX                                     \\\n-         VALGRIND_RESTORE_STACK                                        \\\n-         VALGRIND_CFI_EPILOGUE                                         \\\n-         : \/*out*\/   \"=a\" (_res)                                       \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER                 \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r14\", \"r15\" \\\n-      );                                                               \\\n-      lval = (__typeof__(lval)) _res;                                  \\\n-   } while (0)\n-\n-#define CALL_FN_W_WWW(lval, orig, arg1,arg2,arg3)                      \\\n-   do {                                                                \\\n-      volatile OrigFn        _orig = (orig);                           \\\n-      volatile unsigned long _argvec[4];                               \\\n-      volatile unsigned long _res;                                     \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                        \\\n-      _argvec[1] = (unsigned long)(arg1);                              \\\n-      _argvec[2] = (unsigned long)(arg2);                              \\\n-      _argvec[3] = (unsigned long)(arg3);                              \\\n-      __asm__ volatile(                                                \\\n-         VALGRIND_CFI_PROLOGUE                                         \\\n-         VALGRIND_ALIGN_STACK                                          \\\n-         \"subq $128,%%rsp\\n\\t\"                                         \\\n-         \"movq 24(%%rax), %%rdx\\n\\t\"                                   \\\n-         \"movq 16(%%rax), %%rsi\\n\\t\"                                   \\\n-         \"movq 8(%%rax), %%rdi\\n\\t\"                                    \\\n-         \"movq (%%rax), %%rax\\n\\t\"  \/* target->%rax *\/                 \\\n-         VALGRIND_CALL_NOREDIR_RAX                                     \\\n-         VALGRIND_RESTORE_STACK                                        \\\n-         VALGRIND_CFI_EPILOGUE                                         \\\n-         : \/*out*\/   \"=a\" (_res)                                       \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER                 \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r14\", \"r15\" \\\n-      );                                                               \\\n-      lval = (__typeof__(lval)) _res;                                  \\\n-   } while (0)\n-\n-#define CALL_FN_W_WWWW(lval, orig, arg1,arg2,arg3,arg4)                \\\n-   do {                                                                \\\n-      volatile OrigFn        _orig = (orig);                           \\\n-      volatile unsigned long _argvec[5];                               \\\n-      volatile unsigned long _res;                                     \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                        \\\n-      _argvec[1] = (unsigned long)(arg1);                              \\\n-      _argvec[2] = (unsigned long)(arg2);                              \\\n-      _argvec[3] = (unsigned long)(arg3);                              \\\n-      _argvec[4] = (unsigned long)(arg4);                              \\\n-      __asm__ volatile(                                                \\\n-         VALGRIND_CFI_PROLOGUE                                         \\\n-         VALGRIND_ALIGN_STACK                                          \\\n-         \"subq $128,%%rsp\\n\\t\"                                         \\\n-         \"movq 32(%%rax), %%rcx\\n\\t\"                                   \\\n-         \"movq 24(%%rax), %%rdx\\n\\t\"                                   \\\n-         \"movq 16(%%rax), %%rsi\\n\\t\"                                   \\\n-         \"movq 8(%%rax), %%rdi\\n\\t\"                                    \\\n-         \"movq (%%rax), %%rax\\n\\t\"  \/* target->%rax *\/                 \\\n-         VALGRIND_CALL_NOREDIR_RAX                                     \\\n-         VALGRIND_RESTORE_STACK                                        \\\n-         VALGRIND_CFI_EPILOGUE                                         \\\n-         : \/*out*\/   \"=a\" (_res)                                       \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER                 \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r14\", \"r15\" \\\n-      );                                                               \\\n-      lval = (__typeof__(lval)) _res;                                  \\\n-   } while (0)\n-\n-#define CALL_FN_W_5W(lval, orig, arg1,arg2,arg3,arg4,arg5)             \\\n-   do {                                                                \\\n-      volatile OrigFn        _orig = (orig);                           \\\n-      volatile unsigned long _argvec[6];                               \\\n-      volatile unsigned long _res;                                     \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                        \\\n-      _argvec[1] = (unsigned long)(arg1);                              \\\n-      _argvec[2] = (unsigned long)(arg2);                              \\\n-      _argvec[3] = (unsigned long)(arg3);                              \\\n-      _argvec[4] = (unsigned long)(arg4);                              \\\n-      _argvec[5] = (unsigned long)(arg5);                              \\\n-      __asm__ volatile(                                                \\\n-         VALGRIND_CFI_PROLOGUE                                         \\\n-         VALGRIND_ALIGN_STACK                                          \\\n-         \"subq $128,%%rsp\\n\\t\"                                         \\\n-         \"movq 40(%%rax), %%r8\\n\\t\"                                    \\\n-         \"movq 32(%%rax), %%rcx\\n\\t\"                                   \\\n-         \"movq 24(%%rax), %%rdx\\n\\t\"                                   \\\n-         \"movq 16(%%rax), %%rsi\\n\\t\"                                   \\\n-         \"movq 8(%%rax), %%rdi\\n\\t\"                                    \\\n-         \"movq (%%rax), %%rax\\n\\t\"  \/* target->%rax *\/                 \\\n-         VALGRIND_CALL_NOREDIR_RAX                                     \\\n-         VALGRIND_RESTORE_STACK                                        \\\n-         VALGRIND_CFI_EPILOGUE                                         \\\n-         : \/*out*\/   \"=a\" (_res)                                       \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER                 \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r14\", \"r15\" \\\n-      );                                                               \\\n-      lval = (__typeof__(lval)) _res;                                  \\\n-   } while (0)\n-\n-#define CALL_FN_W_6W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6)        \\\n-   do {                                                                \\\n-      volatile OrigFn        _orig = (orig);                           \\\n-      volatile unsigned long _argvec[7];                               \\\n-      volatile unsigned long _res;                                     \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                        \\\n-      _argvec[1] = (unsigned long)(arg1);                              \\\n-      _argvec[2] = (unsigned long)(arg2);                              \\\n-      _argvec[3] = (unsigned long)(arg3);                              \\\n-      _argvec[4] = (unsigned long)(arg4);                              \\\n-      _argvec[5] = (unsigned long)(arg5);                              \\\n-      _argvec[6] = (unsigned long)(arg6);                              \\\n-      __asm__ volatile(                                                \\\n-         VALGRIND_CFI_PROLOGUE                                         \\\n-         VALGRIND_ALIGN_STACK                                          \\\n-         \"subq $128,%%rsp\\n\\t\"                                         \\\n-         \"movq 48(%%rax), %%r9\\n\\t\"                                    \\\n-         \"movq 40(%%rax), %%r8\\n\\t\"                                    \\\n-         \"movq 32(%%rax), %%rcx\\n\\t\"                                   \\\n-         \"movq 24(%%rax), %%rdx\\n\\t\"                                   \\\n-         \"movq 16(%%rax), %%rsi\\n\\t\"                                   \\\n-         \"movq 8(%%rax), %%rdi\\n\\t\"                                    \\\n-         \"movq (%%rax), %%rax\\n\\t\"  \/* target->%rax *\/                 \\\n-         VALGRIND_CALL_NOREDIR_RAX                                     \\\n-         VALGRIND_RESTORE_STACK                                        \\\n-         VALGRIND_CFI_EPILOGUE                                         \\\n-         : \/*out*\/   \"=a\" (_res)                                       \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER                 \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r14\", \"r15\" \\\n-      );                                                               \\\n-      lval = (__typeof__(lval)) _res;                                  \\\n-   } while (0)\n-\n-#define CALL_FN_W_7W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,        \\\n-                                 arg7)                                 \\\n-   do {                                                                \\\n-      volatile OrigFn        _orig = (orig);                           \\\n-      volatile unsigned long _argvec[8];                               \\\n-      volatile unsigned long _res;                                     \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                        \\\n-      _argvec[1] = (unsigned long)(arg1);                              \\\n-      _argvec[2] = (unsigned long)(arg2);                              \\\n-      _argvec[3] = (unsigned long)(arg3);                              \\\n-      _argvec[4] = (unsigned long)(arg4);                              \\\n-      _argvec[5] = (unsigned long)(arg5);                              \\\n-      _argvec[6] = (unsigned long)(arg6);                              \\\n-      _argvec[7] = (unsigned long)(arg7);                              \\\n-      __asm__ volatile(                                                \\\n-         VALGRIND_CFI_PROLOGUE                                         \\\n-         VALGRIND_ALIGN_STACK                                          \\\n-         \"subq $136,%%rsp\\n\\t\"                                         \\\n-         \"pushq 56(%%rax)\\n\\t\"                                         \\\n-         \"movq 48(%%rax), %%r9\\n\\t\"                                    \\\n-         \"movq 40(%%rax), %%r8\\n\\t\"                                    \\\n-         \"movq 32(%%rax), %%rcx\\n\\t\"                                   \\\n-         \"movq 24(%%rax), %%rdx\\n\\t\"                                   \\\n-         \"movq 16(%%rax), %%rsi\\n\\t\"                                   \\\n-         \"movq 8(%%rax), %%rdi\\n\\t\"                                    \\\n-         \"movq (%%rax), %%rax\\n\\t\"  \/* target->%rax *\/                 \\\n-         VALGRIND_CALL_NOREDIR_RAX                                     \\\n-         VALGRIND_RESTORE_STACK                                        \\\n-         VALGRIND_CFI_EPILOGUE                                         \\\n-         : \/*out*\/   \"=a\" (_res)                                       \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER                 \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r14\", \"r15\" \\\n-      );                                                               \\\n-      lval = (__typeof__(lval)) _res;                                  \\\n-   } while (0)\n-\n-#define CALL_FN_W_8W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,        \\\n-                                 arg7,arg8)                            \\\n-   do {                                                                \\\n-      volatile OrigFn        _orig = (orig);                           \\\n-      volatile unsigned long _argvec[9];                               \\\n-      volatile unsigned long _res;                                     \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                        \\\n-      _argvec[1] = (unsigned long)(arg1);                              \\\n-      _argvec[2] = (unsigned long)(arg2);                              \\\n-      _argvec[3] = (unsigned long)(arg3);                              \\\n-      _argvec[4] = (unsigned long)(arg4);                              \\\n-      _argvec[5] = (unsigned long)(arg5);                              \\\n-      _argvec[6] = (unsigned long)(arg6);                              \\\n-      _argvec[7] = (unsigned long)(arg7);                              \\\n-      _argvec[8] = (unsigned long)(arg8);                              \\\n-      __asm__ volatile(                                                \\\n-         VALGRIND_CFI_PROLOGUE                                         \\\n-         VALGRIND_ALIGN_STACK                                          \\\n-         \"subq $128,%%rsp\\n\\t\"                                         \\\n-         \"pushq 64(%%rax)\\n\\t\"                                         \\\n-         \"pushq 56(%%rax)\\n\\t\"                                         \\\n-         \"movq 48(%%rax), %%r9\\n\\t\"                                    \\\n-         \"movq 40(%%rax), %%r8\\n\\t\"                                    \\\n-         \"movq 32(%%rax), %%rcx\\n\\t\"                                   \\\n-         \"movq 24(%%rax), %%rdx\\n\\t\"                                   \\\n-         \"movq 16(%%rax), %%rsi\\n\\t\"                                   \\\n-         \"movq 8(%%rax), %%rdi\\n\\t\"                                    \\\n-         \"movq (%%rax), %%rax\\n\\t\"  \/* target->%rax *\/                 \\\n-         VALGRIND_CALL_NOREDIR_RAX                                     \\\n-         VALGRIND_RESTORE_STACK                                        \\\n-         VALGRIND_CFI_EPILOGUE                                         \\\n-         : \/*out*\/   \"=a\" (_res)                                       \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER                 \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r14\", \"r15\" \\\n-      );                                                               \\\n-      lval = (__typeof__(lval)) _res;                                  \\\n-   } while (0)\n-\n-#define CALL_FN_W_9W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,        \\\n-                                 arg7,arg8,arg9)                       \\\n-   do {                                                                \\\n-      volatile OrigFn        _orig = (orig);                           \\\n-      volatile unsigned long _argvec[10];                              \\\n-      volatile unsigned long _res;                                     \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                        \\\n-      _argvec[1] = (unsigned long)(arg1);                              \\\n-      _argvec[2] = (unsigned long)(arg2);                              \\\n-      _argvec[3] = (unsigned long)(arg3);                              \\\n-      _argvec[4] = (unsigned long)(arg4);                              \\\n-      _argvec[5] = (unsigned long)(arg5);                              \\\n-      _argvec[6] = (unsigned long)(arg6);                              \\\n-      _argvec[7] = (unsigned long)(arg7);                              \\\n-      _argvec[8] = (unsigned long)(arg8);                              \\\n-      _argvec[9] = (unsigned long)(arg9);                              \\\n-      __asm__ volatile(                                                \\\n-         VALGRIND_CFI_PROLOGUE                                         \\\n-         VALGRIND_ALIGN_STACK                                          \\\n-         \"subq $136,%%rsp\\n\\t\"                                         \\\n-         \"pushq 72(%%rax)\\n\\t\"                                         \\\n-         \"pushq 64(%%rax)\\n\\t\"                                         \\\n-         \"pushq 56(%%rax)\\n\\t\"                                         \\\n-         \"movq 48(%%rax), %%r9\\n\\t\"                                    \\\n-         \"movq 40(%%rax), %%r8\\n\\t\"                                    \\\n-         \"movq 32(%%rax), %%rcx\\n\\t\"                                   \\\n-         \"movq 24(%%rax), %%rdx\\n\\t\"                                   \\\n-         \"movq 16(%%rax), %%rsi\\n\\t\"                                   \\\n-         \"movq 8(%%rax), %%rdi\\n\\t\"                                    \\\n-         \"movq (%%rax), %%rax\\n\\t\"  \/* target->%rax *\/                 \\\n-         VALGRIND_CALL_NOREDIR_RAX                                     \\\n-         VALGRIND_RESTORE_STACK                                        \\\n-         VALGRIND_CFI_EPILOGUE                                         \\\n-         : \/*out*\/   \"=a\" (_res)                                       \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER                 \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r14\", \"r15\" \\\n-      );                                                               \\\n-      lval = (__typeof__(lval)) _res;                                  \\\n-   } while (0)\n-\n-#define CALL_FN_W_10W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,       \\\n-                                  arg7,arg8,arg9,arg10)                \\\n-   do {                                                                \\\n-      volatile OrigFn        _orig = (orig);                           \\\n-      volatile unsigned long _argvec[11];                              \\\n-      volatile unsigned long _res;                                     \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                        \\\n-      _argvec[1] = (unsigned long)(arg1);                              \\\n-      _argvec[2] = (unsigned long)(arg2);                              \\\n-      _argvec[3] = (unsigned long)(arg3);                              \\\n-      _argvec[4] = (unsigned long)(arg4);                              \\\n-      _argvec[5] = (unsigned long)(arg5);                              \\\n-      _argvec[6] = (unsigned long)(arg6);                              \\\n-      _argvec[7] = (unsigned long)(arg7);                              \\\n-      _argvec[8] = (unsigned long)(arg8);                              \\\n-      _argvec[9] = (unsigned long)(arg9);                              \\\n-      _argvec[10] = (unsigned long)(arg10);                            \\\n-      __asm__ volatile(                                                \\\n-         VALGRIND_CFI_PROLOGUE                                         \\\n-         VALGRIND_ALIGN_STACK                                          \\\n-         \"subq $128,%%rsp\\n\\t\"                                         \\\n-         \"pushq 80(%%rax)\\n\\t\"                                         \\\n-         \"pushq 72(%%rax)\\n\\t\"                                         \\\n-         \"pushq 64(%%rax)\\n\\t\"                                         \\\n-         \"pushq 56(%%rax)\\n\\t\"                                         \\\n-         \"movq 48(%%rax), %%r9\\n\\t\"                                    \\\n-         \"movq 40(%%rax), %%r8\\n\\t\"                                    \\\n-         \"movq 32(%%rax), %%rcx\\n\\t\"                                   \\\n-         \"movq 24(%%rax), %%rdx\\n\\t\"                                   \\\n-         \"movq 16(%%rax), %%rsi\\n\\t\"                                   \\\n-         \"movq 8(%%rax), %%rdi\\n\\t\"                                    \\\n-         \"movq (%%rax), %%rax\\n\\t\"  \/* target->%rax *\/                 \\\n-         VALGRIND_CALL_NOREDIR_RAX                                     \\\n-         VALGRIND_RESTORE_STACK                                        \\\n-         VALGRIND_CFI_EPILOGUE                                         \\\n-         : \/*out*\/   \"=a\" (_res)                                       \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER                 \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r14\", \"r15\" \\\n-      );                                                               \\\n-      lval = (__typeof__(lval)) _res;                                  \\\n-   } while (0)\n-\n-#define CALL_FN_W_11W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,       \\\n-                                  arg7,arg8,arg9,arg10,arg11)          \\\n-   do {                                                                \\\n-      volatile OrigFn        _orig = (orig);                           \\\n-      volatile unsigned long _argvec[12];                              \\\n-      volatile unsigned long _res;                                     \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                        \\\n-      _argvec[1] = (unsigned long)(arg1);                              \\\n-      _argvec[2] = (unsigned long)(arg2);                              \\\n-      _argvec[3] = (unsigned long)(arg3);                              \\\n-      _argvec[4] = (unsigned long)(arg4);                              \\\n-      _argvec[5] = (unsigned long)(arg5);                              \\\n-      _argvec[6] = (unsigned long)(arg6);                              \\\n-      _argvec[7] = (unsigned long)(arg7);                              \\\n-      _argvec[8] = (unsigned long)(arg8);                              \\\n-      _argvec[9] = (unsigned long)(arg9);                              \\\n-      _argvec[10] = (unsigned long)(arg10);                            \\\n-      _argvec[11] = (unsigned long)(arg11);                            \\\n-      __asm__ volatile(                                                \\\n-         VALGRIND_CFI_PROLOGUE                                         \\\n-         VALGRIND_ALIGN_STACK                                          \\\n-         \"subq $136,%%rsp\\n\\t\"                                         \\\n-         \"pushq 88(%%rax)\\n\\t\"                                         \\\n-         \"pushq 80(%%rax)\\n\\t\"                                         \\\n-         \"pushq 72(%%rax)\\n\\t\"                                         \\\n-         \"pushq 64(%%rax)\\n\\t\"                                         \\\n-         \"pushq 56(%%rax)\\n\\t\"                                         \\\n-         \"movq 48(%%rax), %%r9\\n\\t\"                                    \\\n-         \"movq 40(%%rax), %%r8\\n\\t\"                                    \\\n-         \"movq 32(%%rax), %%rcx\\n\\t\"                                   \\\n-         \"movq 24(%%rax), %%rdx\\n\\t\"                                   \\\n-         \"movq 16(%%rax), %%rsi\\n\\t\"                                   \\\n-         \"movq 8(%%rax), %%rdi\\n\\t\"                                    \\\n-         \"movq (%%rax), %%rax\\n\\t\"  \/* target->%rax *\/                 \\\n-         VALGRIND_CALL_NOREDIR_RAX                                     \\\n-         VALGRIND_RESTORE_STACK                                        \\\n-         VALGRIND_CFI_EPILOGUE                                         \\\n-         : \/*out*\/   \"=a\" (_res)                                       \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER                 \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r14\", \"r15\" \\\n-      );                                                               \\\n-      lval = (__typeof__(lval)) _res;                                  \\\n-   } while (0)\n-\n-#define CALL_FN_W_12W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,       \\\n-                                arg7,arg8,arg9,arg10,arg11,arg12)      \\\n-   do {                                                                \\\n-      volatile OrigFn        _orig = (orig);                           \\\n-      volatile unsigned long _argvec[13];                              \\\n-      volatile unsigned long _res;                                     \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                        \\\n-      _argvec[1] = (unsigned long)(arg1);                              \\\n-      _argvec[2] = (unsigned long)(arg2);                              \\\n-      _argvec[3] = (unsigned long)(arg3);                              \\\n-      _argvec[4] = (unsigned long)(arg4);                              \\\n-      _argvec[5] = (unsigned long)(arg5);                              \\\n-      _argvec[6] = (unsigned long)(arg6);                              \\\n-      _argvec[7] = (unsigned long)(arg7);                              \\\n-      _argvec[8] = (unsigned long)(arg8);                              \\\n-      _argvec[9] = (unsigned long)(arg9);                              \\\n-      _argvec[10] = (unsigned long)(arg10);                            \\\n-      _argvec[11] = (unsigned long)(arg11);                            \\\n-      _argvec[12] = (unsigned long)(arg12);                            \\\n-      __asm__ volatile(                                                \\\n-         VALGRIND_CFI_PROLOGUE                                         \\\n-         VALGRIND_ALIGN_STACK                                          \\\n-         \"subq $128,%%rsp\\n\\t\"                                         \\\n-         \"pushq 96(%%rax)\\n\\t\"                                         \\\n-         \"pushq 88(%%rax)\\n\\t\"                                         \\\n-         \"pushq 80(%%rax)\\n\\t\"                                         \\\n-         \"pushq 72(%%rax)\\n\\t\"                                         \\\n-         \"pushq 64(%%rax)\\n\\t\"                                         \\\n-         \"pushq 56(%%rax)\\n\\t\"                                         \\\n-         \"movq 48(%%rax), %%r9\\n\\t\"                                    \\\n-         \"movq 40(%%rax), %%r8\\n\\t\"                                    \\\n-         \"movq 32(%%rax), %%rcx\\n\\t\"                                   \\\n-         \"movq 24(%%rax), %%rdx\\n\\t\"                                   \\\n-         \"movq 16(%%rax), %%rsi\\n\\t\"                                   \\\n-         \"movq 8(%%rax), %%rdi\\n\\t\"                                    \\\n-         \"movq (%%rax), %%rax\\n\\t\"  \/* target->%rax *\/                 \\\n-         VALGRIND_CALL_NOREDIR_RAX                                     \\\n-         VALGRIND_RESTORE_STACK                                        \\\n-         VALGRIND_CFI_EPILOGUE                                         \\\n-         : \/*out*\/   \"=a\" (_res)                                       \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER                 \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r14\", \"r15\" \\\n-      );                                                               \\\n-      lval = (__typeof__(lval)) _res;                                  \\\n-   } while (0)\n-\n-#endif \/* PLAT_amd64_linux || PLAT_amd64_darwin || PLAT_amd64_solaris *\/\n-\n-\/* ------------------------ ppc32-linux ------------------------ *\/\n-\n-#if defined(PLAT_ppc32_linux)\n-\n-\/* This is useful for finding out about the on-stack stuff:\n-\n-   extern int f9  ( int,int,int,int,int,int,int,int,int );\n-   extern int f10 ( int,int,int,int,int,int,int,int,int,int );\n-   extern int f11 ( int,int,int,int,int,int,int,int,int,int,int );\n-   extern int f12 ( int,int,int,int,int,int,int,int,int,int,int,int );\n-\n-   int g9 ( void ) {\n-      return f9(11,22,33,44,55,66,77,88,99);\n-   }\n-   int g10 ( void ) {\n-      return f10(11,22,33,44,55,66,77,88,99,110);\n-   }\n-   int g11 ( void ) {\n-      return f11(11,22,33,44,55,66,77,88,99,110,121);\n-   }\n-   int g12 ( void ) {\n-      return f12(11,22,33,44,55,66,77,88,99,110,121,132);\n-   }\n-*\/\n-\n-\/* ARGREGS: r3 r4 r5 r6 r7 r8 r9 r10 (the rest on stack somewhere) *\/\n-\n-\/* These regs are trashed by the hidden call. *\/\n-#define __CALLER_SAVED_REGS                                       \\\n-   \"lr\", \"ctr\", \"xer\",                                            \\\n-   \"cr0\", \"cr1\", \"cr2\", \"cr3\", \"cr4\", \"cr5\", \"cr6\", \"cr7\",        \\\n-   \"r0\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"r7\", \"r8\", \"r9\", \"r10\",   \\\n-   \"r11\", \"r12\", \"r13\"\n-\n-\/* Macros to save and align the stack before making a function\n-   call and restore it afterwards as gcc may not keep the stack\n-   pointer aligned if it doesn't realise calls are being made\n-   to other functions. *\/\n-\n-#define VALGRIND_ALIGN_STACK               \\\n-      \"mr 28,1\\n\\t\"                        \\\n-      \"rlwinm 1,1,0,0,27\\n\\t\"\n-#define VALGRIND_RESTORE_STACK             \\\n-      \"mr 1,28\\n\\t\"\n-\n-\/* These CALL_FN_ macros assume that on ppc32-linux,\n-   sizeof(unsigned long) == 4. *\/\n-\n-#define CALL_FN_W_v(lval, orig)                                   \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[1];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"lwz 11,0(11)\\n\\t\"  \/* target->r11 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mr %0,3\"                                                \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_W(lval, orig, arg1)                             \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[2];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)arg1;                           \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"lwz 3,4(11)\\n\\t\"   \/* arg1->r3 *\/                       \\\n-         \"lwz 11,0(11)\\n\\t\"  \/* target->r11 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mr %0,3\"                                                \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WW(lval, orig, arg1,arg2)                       \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)arg1;                           \\\n-      _argvec[2] = (unsigned long)arg2;                           \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"lwz 3,4(11)\\n\\t\"   \/* arg1->r3 *\/                       \\\n-         \"lwz 4,8(11)\\n\\t\"                                        \\\n-         \"lwz 11,0(11)\\n\\t\"  \/* target->r11 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mr %0,3\"                                                \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WWW(lval, orig, arg1,arg2,arg3)                 \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[4];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)arg1;                           \\\n-      _argvec[2] = (unsigned long)arg2;                           \\\n-      _argvec[3] = (unsigned long)arg3;                           \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"lwz 3,4(11)\\n\\t\"   \/* arg1->r3 *\/                       \\\n-         \"lwz 4,8(11)\\n\\t\"                                        \\\n-         \"lwz 5,12(11)\\n\\t\"                                       \\\n-         \"lwz 11,0(11)\\n\\t\"  \/* target->r11 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mr %0,3\"                                                \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WWWW(lval, orig, arg1,arg2,arg3,arg4)           \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[5];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)arg1;                           \\\n-      _argvec[2] = (unsigned long)arg2;                           \\\n-      _argvec[3] = (unsigned long)arg3;                           \\\n-      _argvec[4] = (unsigned long)arg4;                           \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"lwz 3,4(11)\\n\\t\"   \/* arg1->r3 *\/                       \\\n-         \"lwz 4,8(11)\\n\\t\"                                        \\\n-         \"lwz 5,12(11)\\n\\t\"                                       \\\n-         \"lwz 6,16(11)\\n\\t\"  \/* arg4->r6 *\/                       \\\n-         \"lwz 11,0(11)\\n\\t\"  \/* target->r11 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mr %0,3\"                                                \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_5W(lval, orig, arg1,arg2,arg3,arg4,arg5)        \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[6];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)arg1;                           \\\n-      _argvec[2] = (unsigned long)arg2;                           \\\n-      _argvec[3] = (unsigned long)arg3;                           \\\n-      _argvec[4] = (unsigned long)arg4;                           \\\n-      _argvec[5] = (unsigned long)arg5;                           \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"lwz 3,4(11)\\n\\t\"   \/* arg1->r3 *\/                       \\\n-         \"lwz 4,8(11)\\n\\t\"                                        \\\n-         \"lwz 5,12(11)\\n\\t\"                                       \\\n-         \"lwz 6,16(11)\\n\\t\"  \/* arg4->r6 *\/                       \\\n-         \"lwz 7,20(11)\\n\\t\"                                       \\\n-         \"lwz 11,0(11)\\n\\t\"  \/* target->r11 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mr %0,3\"                                                \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_6W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6)   \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[7];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)arg1;                           \\\n-      _argvec[2] = (unsigned long)arg2;                           \\\n-      _argvec[3] = (unsigned long)arg3;                           \\\n-      _argvec[4] = (unsigned long)arg4;                           \\\n-      _argvec[5] = (unsigned long)arg5;                           \\\n-      _argvec[6] = (unsigned long)arg6;                           \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"lwz 3,4(11)\\n\\t\"   \/* arg1->r3 *\/                       \\\n-         \"lwz 4,8(11)\\n\\t\"                                        \\\n-         \"lwz 5,12(11)\\n\\t\"                                       \\\n-         \"lwz 6,16(11)\\n\\t\"  \/* arg4->r6 *\/                       \\\n-         \"lwz 7,20(11)\\n\\t\"                                       \\\n-         \"lwz 8,24(11)\\n\\t\"                                       \\\n-         \"lwz 11,0(11)\\n\\t\"  \/* target->r11 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mr %0,3\"                                                \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_7W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7)                            \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[8];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)arg1;                           \\\n-      _argvec[2] = (unsigned long)arg2;                           \\\n-      _argvec[3] = (unsigned long)arg3;                           \\\n-      _argvec[4] = (unsigned long)arg4;                           \\\n-      _argvec[5] = (unsigned long)arg5;                           \\\n-      _argvec[6] = (unsigned long)arg6;                           \\\n-      _argvec[7] = (unsigned long)arg7;                           \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"lwz 3,4(11)\\n\\t\"   \/* arg1->r3 *\/                       \\\n-         \"lwz 4,8(11)\\n\\t\"                                        \\\n-         \"lwz 5,12(11)\\n\\t\"                                       \\\n-         \"lwz 6,16(11)\\n\\t\"  \/* arg4->r6 *\/                       \\\n-         \"lwz 7,20(11)\\n\\t\"                                       \\\n-         \"lwz 8,24(11)\\n\\t\"                                       \\\n-         \"lwz 9,28(11)\\n\\t\"                                       \\\n-         \"lwz 11,0(11)\\n\\t\"  \/* target->r11 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mr %0,3\"                                                \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_8W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7,arg8)                       \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[9];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)arg1;                           \\\n-      _argvec[2] = (unsigned long)arg2;                           \\\n-      _argvec[3] = (unsigned long)arg3;                           \\\n-      _argvec[4] = (unsigned long)arg4;                           \\\n-      _argvec[5] = (unsigned long)arg5;                           \\\n-      _argvec[6] = (unsigned long)arg6;                           \\\n-      _argvec[7] = (unsigned long)arg7;                           \\\n-      _argvec[8] = (unsigned long)arg8;                           \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"lwz 3,4(11)\\n\\t\"   \/* arg1->r3 *\/                       \\\n-         \"lwz 4,8(11)\\n\\t\"                                        \\\n-         \"lwz 5,12(11)\\n\\t\"                                       \\\n-         \"lwz 6,16(11)\\n\\t\"  \/* arg4->r6 *\/                       \\\n-         \"lwz 7,20(11)\\n\\t\"                                       \\\n-         \"lwz 8,24(11)\\n\\t\"                                       \\\n-         \"lwz 9,28(11)\\n\\t\"                                       \\\n-         \"lwz 10,32(11)\\n\\t\" \/* arg8->r10 *\/                      \\\n-         \"lwz 11,0(11)\\n\\t\"  \/* target->r11 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mr %0,3\"                                                \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_9W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7,arg8,arg9)                  \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[10];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)arg1;                           \\\n-      _argvec[2] = (unsigned long)arg2;                           \\\n-      _argvec[3] = (unsigned long)arg3;                           \\\n-      _argvec[4] = (unsigned long)arg4;                           \\\n-      _argvec[5] = (unsigned long)arg5;                           \\\n-      _argvec[6] = (unsigned long)arg6;                           \\\n-      _argvec[7] = (unsigned long)arg7;                           \\\n-      _argvec[8] = (unsigned long)arg8;                           \\\n-      _argvec[9] = (unsigned long)arg9;                           \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"addi 1,1,-16\\n\\t\"                                       \\\n-         \/* arg9 *\/                                               \\\n-         \"lwz 3,36(11)\\n\\t\"                                       \\\n-         \"stw 3,8(1)\\n\\t\"                                         \\\n-         \/* args1-8 *\/                                            \\\n-         \"lwz 3,4(11)\\n\\t\"   \/* arg1->r3 *\/                       \\\n-         \"lwz 4,8(11)\\n\\t\"                                        \\\n-         \"lwz 5,12(11)\\n\\t\"                                       \\\n-         \"lwz 6,16(11)\\n\\t\"  \/* arg4->r6 *\/                       \\\n-         \"lwz 7,20(11)\\n\\t\"                                       \\\n-         \"lwz 8,24(11)\\n\\t\"                                       \\\n-         \"lwz 9,28(11)\\n\\t\"                                       \\\n-         \"lwz 10,32(11)\\n\\t\" \/* arg8->r10 *\/                      \\\n-         \"lwz 11,0(11)\\n\\t\"  \/* target->r11 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mr %0,3\"                                                \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_10W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,  \\\n-                                  arg7,arg8,arg9,arg10)           \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[11];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)arg1;                           \\\n-      _argvec[2] = (unsigned long)arg2;                           \\\n-      _argvec[3] = (unsigned long)arg3;                           \\\n-      _argvec[4] = (unsigned long)arg4;                           \\\n-      _argvec[5] = (unsigned long)arg5;                           \\\n-      _argvec[6] = (unsigned long)arg6;                           \\\n-      _argvec[7] = (unsigned long)arg7;                           \\\n-      _argvec[8] = (unsigned long)arg8;                           \\\n-      _argvec[9] = (unsigned long)arg9;                           \\\n-      _argvec[10] = (unsigned long)arg10;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"addi 1,1,-16\\n\\t\"                                       \\\n-         \/* arg10 *\/                                              \\\n-         \"lwz 3,40(11)\\n\\t\"                                       \\\n-         \"stw 3,12(1)\\n\\t\"                                        \\\n-         \/* arg9 *\/                                               \\\n-         \"lwz 3,36(11)\\n\\t\"                                       \\\n-         \"stw 3,8(1)\\n\\t\"                                         \\\n-         \/* args1-8 *\/                                            \\\n-         \"lwz 3,4(11)\\n\\t\"   \/* arg1->r3 *\/                       \\\n-         \"lwz 4,8(11)\\n\\t\"                                        \\\n-         \"lwz 5,12(11)\\n\\t\"                                       \\\n-         \"lwz 6,16(11)\\n\\t\"  \/* arg4->r6 *\/                       \\\n-         \"lwz 7,20(11)\\n\\t\"                                       \\\n-         \"lwz 8,24(11)\\n\\t\"                                       \\\n-         \"lwz 9,28(11)\\n\\t\"                                       \\\n-         \"lwz 10,32(11)\\n\\t\" \/* arg8->r10 *\/                      \\\n-         \"lwz 11,0(11)\\n\\t\"  \/* target->r11 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mr %0,3\"                                                \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_11W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,  \\\n-                                  arg7,arg8,arg9,arg10,arg11)     \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[12];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)arg1;                           \\\n-      _argvec[2] = (unsigned long)arg2;                           \\\n-      _argvec[3] = (unsigned long)arg3;                           \\\n-      _argvec[4] = (unsigned long)arg4;                           \\\n-      _argvec[5] = (unsigned long)arg5;                           \\\n-      _argvec[6] = (unsigned long)arg6;                           \\\n-      _argvec[7] = (unsigned long)arg7;                           \\\n-      _argvec[8] = (unsigned long)arg8;                           \\\n-      _argvec[9] = (unsigned long)arg9;                           \\\n-      _argvec[10] = (unsigned long)arg10;                         \\\n-      _argvec[11] = (unsigned long)arg11;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"addi 1,1,-32\\n\\t\"                                       \\\n-         \/* arg11 *\/                                              \\\n-         \"lwz 3,44(11)\\n\\t\"                                       \\\n-         \"stw 3,16(1)\\n\\t\"                                        \\\n-         \/* arg10 *\/                                              \\\n-         \"lwz 3,40(11)\\n\\t\"                                       \\\n-         \"stw 3,12(1)\\n\\t\"                                        \\\n-         \/* arg9 *\/                                               \\\n-         \"lwz 3,36(11)\\n\\t\"                                       \\\n-         \"stw 3,8(1)\\n\\t\"                                         \\\n-         \/* args1-8 *\/                                            \\\n-         \"lwz 3,4(11)\\n\\t\"   \/* arg1->r3 *\/                       \\\n-         \"lwz 4,8(11)\\n\\t\"                                        \\\n-         \"lwz 5,12(11)\\n\\t\"                                       \\\n-         \"lwz 6,16(11)\\n\\t\"  \/* arg4->r6 *\/                       \\\n-         \"lwz 7,20(11)\\n\\t\"                                       \\\n-         \"lwz 8,24(11)\\n\\t\"                                       \\\n-         \"lwz 9,28(11)\\n\\t\"                                       \\\n-         \"lwz 10,32(11)\\n\\t\" \/* arg8->r10 *\/                      \\\n-         \"lwz 11,0(11)\\n\\t\"  \/* target->r11 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mr %0,3\"                                                \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_12W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,  \\\n-                                arg7,arg8,arg9,arg10,arg11,arg12) \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[13];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)arg1;                           \\\n-      _argvec[2] = (unsigned long)arg2;                           \\\n-      _argvec[3] = (unsigned long)arg3;                           \\\n-      _argvec[4] = (unsigned long)arg4;                           \\\n-      _argvec[5] = (unsigned long)arg5;                           \\\n-      _argvec[6] = (unsigned long)arg6;                           \\\n-      _argvec[7] = (unsigned long)arg7;                           \\\n-      _argvec[8] = (unsigned long)arg8;                           \\\n-      _argvec[9] = (unsigned long)arg9;                           \\\n-      _argvec[10] = (unsigned long)arg10;                         \\\n-      _argvec[11] = (unsigned long)arg11;                         \\\n-      _argvec[12] = (unsigned long)arg12;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"addi 1,1,-32\\n\\t\"                                       \\\n-         \/* arg12 *\/                                              \\\n-         \"lwz 3,48(11)\\n\\t\"                                       \\\n-         \"stw 3,20(1)\\n\\t\"                                        \\\n-         \/* arg11 *\/                                              \\\n-         \"lwz 3,44(11)\\n\\t\"                                       \\\n-         \"stw 3,16(1)\\n\\t\"                                        \\\n-         \/* arg10 *\/                                              \\\n-         \"lwz 3,40(11)\\n\\t\"                                       \\\n-         \"stw 3,12(1)\\n\\t\"                                        \\\n-         \/* arg9 *\/                                               \\\n-         \"lwz 3,36(11)\\n\\t\"                                       \\\n-         \"stw 3,8(1)\\n\\t\"                                         \\\n-         \/* args1-8 *\/                                            \\\n-         \"lwz 3,4(11)\\n\\t\"   \/* arg1->r3 *\/                       \\\n-         \"lwz 4,8(11)\\n\\t\"                                        \\\n-         \"lwz 5,12(11)\\n\\t\"                                       \\\n-         \"lwz 6,16(11)\\n\\t\"  \/* arg4->r6 *\/                       \\\n-         \"lwz 7,20(11)\\n\\t\"                                       \\\n-         \"lwz 8,24(11)\\n\\t\"                                       \\\n-         \"lwz 9,28(11)\\n\\t\"                                       \\\n-         \"lwz 10,32(11)\\n\\t\" \/* arg8->r10 *\/                      \\\n-         \"lwz 11,0(11)\\n\\t\"  \/* target->r11 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mr %0,3\"                                                \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#endif \/* PLAT_ppc32_linux *\/\n-\n-\/* ------------------------ ppc64-linux ------------------------ *\/\n-\n-#if defined(PLAT_ppc64be_linux)\n-\n-\/* ARGREGS: r3 r4 r5 r6 r7 r8 r9 r10 (the rest on stack somewhere) *\/\n-\n-\/* These regs are trashed by the hidden call. *\/\n-#define __CALLER_SAVED_REGS                                       \\\n-   \"lr\", \"ctr\", \"xer\",                                            \\\n-   \"cr0\", \"cr1\", \"cr2\", \"cr3\", \"cr4\", \"cr5\", \"cr6\", \"cr7\",        \\\n-   \"r0\", \"r3\", \"r4\", \"r5\", \"r6\", \"r7\", \"r8\", \"r9\", \"r10\",         \\\n-   \"r11\", \"r12\", \"r13\"\n-\n-\/* Macros to save and align the stack before making a function\n-   call and restore it afterwards as gcc may not keep the stack\n-   pointer aligned if it doesn't realise calls are being made\n-   to other functions. *\/\n-\n-#define VALGRIND_ALIGN_STACK               \\\n-      \"mr 28,1\\n\\t\"                        \\\n-      \"rldicr 1,1,0,59\\n\\t\"\n-#define VALGRIND_RESTORE_STACK             \\\n-      \"mr 1,28\\n\\t\"\n-\n-\/* These CALL_FN_ macros assume that on ppc64-linux, sizeof(unsigned\n-   long) == 8. *\/\n-\n-#define CALL_FN_W_v(lval, orig)                                   \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+0];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1] = (unsigned long)_orig.r2;                       \\\n-      _argvec[2] = (unsigned long)_orig.nraddr;                   \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"std 2,-16(11)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(11)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"ld  11, 0(11)\\n\\t\"  \/* target->r11 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(11)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_W(lval, orig, arg1)                             \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+1];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"std 2,-16(11)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(11)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"ld   3, 8(11)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld  11, 0(11)\\n\\t\"  \/* target->r11 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(11)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WW(lval, orig, arg1,arg2)                       \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+2];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"std 2,-16(11)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(11)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"ld   3, 8(11)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(11)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld  11, 0(11)\\n\\t\"  \/* target->r11 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(11)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WWW(lval, orig, arg1,arg2,arg3)                 \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+3];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"std 2,-16(11)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(11)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"ld   3, 8(11)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(11)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(11)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld  11, 0(11)\\n\\t\"  \/* target->r11 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(11)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WWWW(lval, orig, arg1,arg2,arg3,arg4)           \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+4];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      _argvec[2+4] = (unsigned long)arg4;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"std 2,-16(11)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(11)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"ld   3, 8(11)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(11)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(11)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld   6, 32(11)\\n\\t\" \/* arg4->r6 *\/                      \\\n-         \"ld  11, 0(11)\\n\\t\"  \/* target->r11 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(11)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_5W(lval, orig, arg1,arg2,arg3,arg4,arg5)        \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+5];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      _argvec[2+4] = (unsigned long)arg4;                         \\\n-      _argvec[2+5] = (unsigned long)arg5;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"std 2,-16(11)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(11)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"ld   3, 8(11)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(11)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(11)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld   6, 32(11)\\n\\t\" \/* arg4->r6 *\/                      \\\n-         \"ld   7, 40(11)\\n\\t\" \/* arg5->r7 *\/                      \\\n-         \"ld  11, 0(11)\\n\\t\"  \/* target->r11 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(11)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_6W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6)   \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+6];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      _argvec[2+4] = (unsigned long)arg4;                         \\\n-      _argvec[2+5] = (unsigned long)arg5;                         \\\n-      _argvec[2+6] = (unsigned long)arg6;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"std 2,-16(11)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(11)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"ld   3, 8(11)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(11)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(11)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld   6, 32(11)\\n\\t\" \/* arg4->r6 *\/                      \\\n-         \"ld   7, 40(11)\\n\\t\" \/* arg5->r7 *\/                      \\\n-         \"ld   8, 48(11)\\n\\t\" \/* arg6->r8 *\/                      \\\n-         \"ld  11, 0(11)\\n\\t\"  \/* target->r11 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(11)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_7W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7)                            \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+7];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      _argvec[2+4] = (unsigned long)arg4;                         \\\n-      _argvec[2+5] = (unsigned long)arg5;                         \\\n-      _argvec[2+6] = (unsigned long)arg6;                         \\\n-      _argvec[2+7] = (unsigned long)arg7;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"std 2,-16(11)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(11)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"ld   3, 8(11)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(11)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(11)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld   6, 32(11)\\n\\t\" \/* arg4->r6 *\/                      \\\n-         \"ld   7, 40(11)\\n\\t\" \/* arg5->r7 *\/                      \\\n-         \"ld   8, 48(11)\\n\\t\" \/* arg6->r8 *\/                      \\\n-         \"ld   9, 56(11)\\n\\t\" \/* arg7->r9 *\/                      \\\n-         \"ld  11, 0(11)\\n\\t\"  \/* target->r11 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(11)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_8W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7,arg8)                       \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+8];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      _argvec[2+4] = (unsigned long)arg4;                         \\\n-      _argvec[2+5] = (unsigned long)arg5;                         \\\n-      _argvec[2+6] = (unsigned long)arg6;                         \\\n-      _argvec[2+7] = (unsigned long)arg7;                         \\\n-      _argvec[2+8] = (unsigned long)arg8;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"std 2,-16(11)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(11)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"ld   3, 8(11)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(11)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(11)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld   6, 32(11)\\n\\t\" \/* arg4->r6 *\/                      \\\n-         \"ld   7, 40(11)\\n\\t\" \/* arg5->r7 *\/                      \\\n-         \"ld   8, 48(11)\\n\\t\" \/* arg6->r8 *\/                      \\\n-         \"ld   9, 56(11)\\n\\t\" \/* arg7->r9 *\/                      \\\n-         \"ld  10, 64(11)\\n\\t\" \/* arg8->r10 *\/                     \\\n-         \"ld  11, 0(11)\\n\\t\"  \/* target->r11 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(11)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_9W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7,arg8,arg9)                  \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+9];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      _argvec[2+4] = (unsigned long)arg4;                         \\\n-      _argvec[2+5] = (unsigned long)arg5;                         \\\n-      _argvec[2+6] = (unsigned long)arg6;                         \\\n-      _argvec[2+7] = (unsigned long)arg7;                         \\\n-      _argvec[2+8] = (unsigned long)arg8;                         \\\n-      _argvec[2+9] = (unsigned long)arg9;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"std 2,-16(11)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(11)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"addi 1,1,-128\\n\\t\"  \/* expand stack frame *\/            \\\n-         \/* arg9 *\/                                               \\\n-         \"ld  3,72(11)\\n\\t\"                                       \\\n-         \"std 3,112(1)\\n\\t\"                                       \\\n-         \/* args1-8 *\/                                            \\\n-         \"ld   3, 8(11)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(11)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(11)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld   6, 32(11)\\n\\t\" \/* arg4->r6 *\/                      \\\n-         \"ld   7, 40(11)\\n\\t\" \/* arg5->r7 *\/                      \\\n-         \"ld   8, 48(11)\\n\\t\" \/* arg6->r8 *\/                      \\\n-         \"ld   9, 56(11)\\n\\t\" \/* arg7->r9 *\/                      \\\n-         \"ld  10, 64(11)\\n\\t\" \/* arg8->r10 *\/                     \\\n-         \"ld  11, 0(11)\\n\\t\"  \/* target->r11 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(11)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_10W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,  \\\n-                                  arg7,arg8,arg9,arg10)           \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+10];                       \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      _argvec[2+4] = (unsigned long)arg4;                         \\\n-      _argvec[2+5] = (unsigned long)arg5;                         \\\n-      _argvec[2+6] = (unsigned long)arg6;                         \\\n-      _argvec[2+7] = (unsigned long)arg7;                         \\\n-      _argvec[2+8] = (unsigned long)arg8;                         \\\n-      _argvec[2+9] = (unsigned long)arg9;                         \\\n-      _argvec[2+10] = (unsigned long)arg10;                       \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"std 2,-16(11)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(11)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"addi 1,1,-128\\n\\t\"  \/* expand stack frame *\/            \\\n-         \/* arg10 *\/                                              \\\n-         \"ld  3,80(11)\\n\\t\"                                       \\\n-         \"std 3,120(1)\\n\\t\"                                       \\\n-         \/* arg9 *\/                                               \\\n-         \"ld  3,72(11)\\n\\t\"                                       \\\n-         \"std 3,112(1)\\n\\t\"                                       \\\n-         \/* args1-8 *\/                                            \\\n-         \"ld   3, 8(11)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(11)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(11)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld   6, 32(11)\\n\\t\" \/* arg4->r6 *\/                      \\\n-         \"ld   7, 40(11)\\n\\t\" \/* arg5->r7 *\/                      \\\n-         \"ld   8, 48(11)\\n\\t\" \/* arg6->r8 *\/                      \\\n-         \"ld   9, 56(11)\\n\\t\" \/* arg7->r9 *\/                      \\\n-         \"ld  10, 64(11)\\n\\t\" \/* arg8->r10 *\/                     \\\n-         \"ld  11, 0(11)\\n\\t\"  \/* target->r11 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(11)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_11W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,  \\\n-                                  arg7,arg8,arg9,arg10,arg11)     \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+11];                       \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      _argvec[2+4] = (unsigned long)arg4;                         \\\n-      _argvec[2+5] = (unsigned long)arg5;                         \\\n-      _argvec[2+6] = (unsigned long)arg6;                         \\\n-      _argvec[2+7] = (unsigned long)arg7;                         \\\n-      _argvec[2+8] = (unsigned long)arg8;                         \\\n-      _argvec[2+9] = (unsigned long)arg9;                         \\\n-      _argvec[2+10] = (unsigned long)arg10;                       \\\n-      _argvec[2+11] = (unsigned long)arg11;                       \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"std 2,-16(11)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(11)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"addi 1,1,-144\\n\\t\"  \/* expand stack frame *\/            \\\n-         \/* arg11 *\/                                              \\\n-         \"ld  3,88(11)\\n\\t\"                                       \\\n-         \"std 3,128(1)\\n\\t\"                                       \\\n-         \/* arg10 *\/                                              \\\n-         \"ld  3,80(11)\\n\\t\"                                       \\\n-         \"std 3,120(1)\\n\\t\"                                       \\\n-         \/* arg9 *\/                                               \\\n-         \"ld  3,72(11)\\n\\t\"                                       \\\n-         \"std 3,112(1)\\n\\t\"                                       \\\n-         \/* args1-8 *\/                                            \\\n-         \"ld   3, 8(11)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(11)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(11)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld   6, 32(11)\\n\\t\" \/* arg4->r6 *\/                      \\\n-         \"ld   7, 40(11)\\n\\t\" \/* arg5->r7 *\/                      \\\n-         \"ld   8, 48(11)\\n\\t\" \/* arg6->r8 *\/                      \\\n-         \"ld   9, 56(11)\\n\\t\" \/* arg7->r9 *\/                      \\\n-         \"ld  10, 64(11)\\n\\t\" \/* arg8->r10 *\/                     \\\n-         \"ld  11, 0(11)\\n\\t\"  \/* target->r11 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(11)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_12W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,  \\\n-                                arg7,arg8,arg9,arg10,arg11,arg12) \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+12];                       \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      _argvec[2+4] = (unsigned long)arg4;                         \\\n-      _argvec[2+5] = (unsigned long)arg5;                         \\\n-      _argvec[2+6] = (unsigned long)arg6;                         \\\n-      _argvec[2+7] = (unsigned long)arg7;                         \\\n-      _argvec[2+8] = (unsigned long)arg8;                         \\\n-      _argvec[2+9] = (unsigned long)arg9;                         \\\n-      _argvec[2+10] = (unsigned long)arg10;                       \\\n-      _argvec[2+11] = (unsigned long)arg11;                       \\\n-      _argvec[2+12] = (unsigned long)arg12;                       \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"std 2,-16(11)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(11)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"addi 1,1,-144\\n\\t\"  \/* expand stack frame *\/            \\\n-         \/* arg12 *\/                                              \\\n-         \"ld  3,96(11)\\n\\t\"                                       \\\n-         \"std 3,136(1)\\n\\t\"                                       \\\n-         \/* arg11 *\/                                              \\\n-         \"ld  3,88(11)\\n\\t\"                                       \\\n-         \"std 3,128(1)\\n\\t\"                                       \\\n-         \/* arg10 *\/                                              \\\n-         \"ld  3,80(11)\\n\\t\"                                       \\\n-         \"std 3,120(1)\\n\\t\"                                       \\\n-         \/* arg9 *\/                                               \\\n-         \"ld  3,72(11)\\n\\t\"                                       \\\n-         \"std 3,112(1)\\n\\t\"                                       \\\n-         \/* args1-8 *\/                                            \\\n-         \"ld   3, 8(11)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(11)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(11)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld   6, 32(11)\\n\\t\" \/* arg4->r6 *\/                      \\\n-         \"ld   7, 40(11)\\n\\t\" \/* arg5->r7 *\/                      \\\n-         \"ld   8, 48(11)\\n\\t\" \/* arg6->r8 *\/                      \\\n-         \"ld   9, 56(11)\\n\\t\" \/* arg7->r9 *\/                      \\\n-         \"ld  10, 64(11)\\n\\t\" \/* arg8->r10 *\/                     \\\n-         \"ld  11, 0(11)\\n\\t\"  \/* target->r11 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11                  \\\n-         \"mr 11,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(11)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#endif \/* PLAT_ppc64be_linux *\/\n-\n-\/* ------------------------- ppc64le-linux ----------------------- *\/\n-#if defined(PLAT_ppc64le_linux)\n-\n-\/* ARGREGS: r3 r4 r5 r6 r7 r8 r9 r10 (the rest on stack somewhere) *\/\n-\n-\/* These regs are trashed by the hidden call. *\/\n-#define __CALLER_SAVED_REGS                                       \\\n-   \"lr\", \"ctr\", \"xer\",                                            \\\n-   \"cr0\", \"cr1\", \"cr2\", \"cr3\", \"cr4\", \"cr5\", \"cr6\", \"cr7\",        \\\n-   \"r0\", \"r3\", \"r4\", \"r5\", \"r6\", \"r7\", \"r8\", \"r9\", \"r10\",         \\\n-   \"r11\", \"r12\", \"r13\"\n-\n-\/* Macros to save and align the stack before making a function\n-   call and restore it afterwards as gcc may not keep the stack\n-   pointer aligned if it doesn't realise calls are being made\n-   to other functions. *\/\n-\n-#define VALGRIND_ALIGN_STACK               \\\n-      \"mr 28,1\\n\\t\"                        \\\n-      \"rldicr 1,1,0,59\\n\\t\"\n-#define VALGRIND_RESTORE_STACK             \\\n-      \"mr 1,28\\n\\t\"\n-\n-\/* These CALL_FN_ macros assume that on ppc64-linux, sizeof(unsigned\n-   long) == 8. *\/\n-\n-#define CALL_FN_W_v(lval, orig)                                   \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+0];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1] = (unsigned long)_orig.r2;                       \\\n-      _argvec[2] = (unsigned long)_orig.nraddr;                   \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"std 2,-16(12)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(12)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"ld  12, 0(12)\\n\\t\"  \/* target->r12 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12                  \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(12)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_W(lval, orig, arg1)                             \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+1];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"std 2,-16(12)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(12)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"ld   3, 8(12)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld  12, 0(12)\\n\\t\"  \/* target->r12 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12                  \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(12)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WW(lval, orig, arg1,arg2)                       \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+2];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"std 2,-16(12)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(12)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"ld   3, 8(12)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(12)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld  12, 0(12)\\n\\t\"  \/* target->r12 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12                  \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(12)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WWW(lval, orig, arg1,arg2,arg3)                 \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+3];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"std 2,-16(12)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(12)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"ld   3, 8(12)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(12)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(12)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld  12, 0(12)\\n\\t\"  \/* target->r12 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12                  \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(12)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WWWW(lval, orig, arg1,arg2,arg3,arg4)           \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+4];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      _argvec[2+4] = (unsigned long)arg4;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"std 2,-16(12)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(12)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"ld   3, 8(12)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(12)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(12)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld   6, 32(12)\\n\\t\" \/* arg4->r6 *\/                      \\\n-         \"ld  12, 0(12)\\n\\t\"  \/* target->r12 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12                  \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(12)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_5W(lval, orig, arg1,arg2,arg3,arg4,arg5)        \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+5];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      _argvec[2+4] = (unsigned long)arg4;                         \\\n-      _argvec[2+5] = (unsigned long)arg5;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"std 2,-16(12)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(12)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"ld   3, 8(12)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(12)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(12)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld   6, 32(12)\\n\\t\" \/* arg4->r6 *\/                      \\\n-         \"ld   7, 40(12)\\n\\t\" \/* arg5->r7 *\/                      \\\n-         \"ld  12, 0(12)\\n\\t\"  \/* target->r12 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12                  \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(12)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_6W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6)   \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+6];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      _argvec[2+4] = (unsigned long)arg4;                         \\\n-      _argvec[2+5] = (unsigned long)arg5;                         \\\n-      _argvec[2+6] = (unsigned long)arg6;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"std 2,-16(12)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(12)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"ld   3, 8(12)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(12)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(12)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld   6, 32(12)\\n\\t\" \/* arg4->r6 *\/                      \\\n-         \"ld   7, 40(12)\\n\\t\" \/* arg5->r7 *\/                      \\\n-         \"ld   8, 48(12)\\n\\t\" \/* arg6->r8 *\/                      \\\n-         \"ld  12, 0(12)\\n\\t\"  \/* target->r12 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12                  \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(12)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_7W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7)                            \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+7];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      _argvec[2+4] = (unsigned long)arg4;                         \\\n-      _argvec[2+5] = (unsigned long)arg5;                         \\\n-      _argvec[2+6] = (unsigned long)arg6;                         \\\n-      _argvec[2+7] = (unsigned long)arg7;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"std 2,-16(12)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(12)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"ld   3, 8(12)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(12)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(12)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld   6, 32(12)\\n\\t\" \/* arg4->r6 *\/                      \\\n-         \"ld   7, 40(12)\\n\\t\" \/* arg5->r7 *\/                      \\\n-         \"ld   8, 48(12)\\n\\t\" \/* arg6->r8 *\/                      \\\n-         \"ld   9, 56(12)\\n\\t\" \/* arg7->r9 *\/                      \\\n-         \"ld  12, 0(12)\\n\\t\"  \/* target->r12 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12                  \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(12)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_8W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7,arg8)                       \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+8];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      _argvec[2+4] = (unsigned long)arg4;                         \\\n-      _argvec[2+5] = (unsigned long)arg5;                         \\\n-      _argvec[2+6] = (unsigned long)arg6;                         \\\n-      _argvec[2+7] = (unsigned long)arg7;                         \\\n-      _argvec[2+8] = (unsigned long)arg8;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"std 2,-16(12)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(12)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"ld   3, 8(12)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(12)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(12)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld   6, 32(12)\\n\\t\" \/* arg4->r6 *\/                      \\\n-         \"ld   7, 40(12)\\n\\t\" \/* arg5->r7 *\/                      \\\n-         \"ld   8, 48(12)\\n\\t\" \/* arg6->r8 *\/                      \\\n-         \"ld   9, 56(12)\\n\\t\" \/* arg7->r9 *\/                      \\\n-         \"ld  10, 64(12)\\n\\t\" \/* arg8->r10 *\/                     \\\n-         \"ld  12, 0(12)\\n\\t\"  \/* target->r12 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12                  \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(12)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_9W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7,arg8,arg9)                  \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+9];                        \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      _argvec[2+4] = (unsigned long)arg4;                         \\\n-      _argvec[2+5] = (unsigned long)arg5;                         \\\n-      _argvec[2+6] = (unsigned long)arg6;                         \\\n-      _argvec[2+7] = (unsigned long)arg7;                         \\\n-      _argvec[2+8] = (unsigned long)arg8;                         \\\n-      _argvec[2+9] = (unsigned long)arg9;                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"std 2,-16(12)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(12)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"addi 1,1,-128\\n\\t\"  \/* expand stack frame *\/            \\\n-         \/* arg9 *\/                                               \\\n-         \"ld  3,72(12)\\n\\t\"                                       \\\n-         \"std 3,96(1)\\n\\t\"                                        \\\n-         \/* args1-8 *\/                                            \\\n-         \"ld   3, 8(12)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(12)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(12)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld   6, 32(12)\\n\\t\" \/* arg4->r6 *\/                      \\\n-         \"ld   7, 40(12)\\n\\t\" \/* arg5->r7 *\/                      \\\n-         \"ld   8, 48(12)\\n\\t\" \/* arg6->r8 *\/                      \\\n-         \"ld   9, 56(12)\\n\\t\" \/* arg7->r9 *\/                      \\\n-         \"ld  10, 64(12)\\n\\t\" \/* arg8->r10 *\/                     \\\n-         \"ld  12, 0(12)\\n\\t\"  \/* target->r12 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12                  \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(12)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_10W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,  \\\n-                                  arg7,arg8,arg9,arg10)           \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+10];                       \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      _argvec[2+4] = (unsigned long)arg4;                         \\\n-      _argvec[2+5] = (unsigned long)arg5;                         \\\n-      _argvec[2+6] = (unsigned long)arg6;                         \\\n-      _argvec[2+7] = (unsigned long)arg7;                         \\\n-      _argvec[2+8] = (unsigned long)arg8;                         \\\n-      _argvec[2+9] = (unsigned long)arg9;                         \\\n-      _argvec[2+10] = (unsigned long)arg10;                       \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"std 2,-16(12)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(12)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"addi 1,1,-128\\n\\t\"  \/* expand stack frame *\/            \\\n-         \/* arg10 *\/                                              \\\n-         \"ld  3,80(12)\\n\\t\"                                       \\\n-         \"std 3,104(1)\\n\\t\"                                       \\\n-         \/* arg9 *\/                                               \\\n-         \"ld  3,72(12)\\n\\t\"                                       \\\n-         \"std 3,96(1)\\n\\t\"                                        \\\n-         \/* args1-8 *\/                                            \\\n-         \"ld   3, 8(12)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(12)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(12)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld   6, 32(12)\\n\\t\" \/* arg4->r6 *\/                      \\\n-         \"ld   7, 40(12)\\n\\t\" \/* arg5->r7 *\/                      \\\n-         \"ld   8, 48(12)\\n\\t\" \/* arg6->r8 *\/                      \\\n-         \"ld   9, 56(12)\\n\\t\" \/* arg7->r9 *\/                      \\\n-         \"ld  10, 64(12)\\n\\t\" \/* arg8->r10 *\/                     \\\n-         \"ld  12, 0(12)\\n\\t\"  \/* target->r12 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12                  \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(12)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_11W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,  \\\n-                                  arg7,arg8,arg9,arg10,arg11)     \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+11];                       \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      _argvec[2+4] = (unsigned long)arg4;                         \\\n-      _argvec[2+5] = (unsigned long)arg5;                         \\\n-      _argvec[2+6] = (unsigned long)arg6;                         \\\n-      _argvec[2+7] = (unsigned long)arg7;                         \\\n-      _argvec[2+8] = (unsigned long)arg8;                         \\\n-      _argvec[2+9] = (unsigned long)arg9;                         \\\n-      _argvec[2+10] = (unsigned long)arg10;                       \\\n-      _argvec[2+11] = (unsigned long)arg11;                       \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"std 2,-16(12)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(12)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"addi 1,1,-144\\n\\t\"  \/* expand stack frame *\/            \\\n-         \/* arg11 *\/                                              \\\n-         \"ld  3,88(12)\\n\\t\"                                       \\\n-         \"std 3,112(1)\\n\\t\"                                       \\\n-         \/* arg10 *\/                                              \\\n-         \"ld  3,80(12)\\n\\t\"                                       \\\n-         \"std 3,104(1)\\n\\t\"                                       \\\n-         \/* arg9 *\/                                               \\\n-         \"ld  3,72(12)\\n\\t\"                                       \\\n-         \"std 3,96(1)\\n\\t\"                                        \\\n-         \/* args1-8 *\/                                            \\\n-         \"ld   3, 8(12)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(12)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(12)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld   6, 32(12)\\n\\t\" \/* arg4->r6 *\/                      \\\n-         \"ld   7, 40(12)\\n\\t\" \/* arg5->r7 *\/                      \\\n-         \"ld   8, 48(12)\\n\\t\" \/* arg6->r8 *\/                      \\\n-         \"ld   9, 56(12)\\n\\t\" \/* arg7->r9 *\/                      \\\n-         \"ld  10, 64(12)\\n\\t\" \/* arg8->r10 *\/                     \\\n-         \"ld  12, 0(12)\\n\\t\"  \/* target->r12 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12                  \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(12)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_12W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,  \\\n-                                arg7,arg8,arg9,arg10,arg11,arg12) \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3+12];                       \\\n-      volatile unsigned long _res;                                \\\n-      \/* _argvec[0] holds current r2 across the call *\/           \\\n-      _argvec[1]   = (unsigned long)_orig.r2;                     \\\n-      _argvec[2]   = (unsigned long)_orig.nraddr;                 \\\n-      _argvec[2+1] = (unsigned long)arg1;                         \\\n-      _argvec[2+2] = (unsigned long)arg2;                         \\\n-      _argvec[2+3] = (unsigned long)arg3;                         \\\n-      _argvec[2+4] = (unsigned long)arg4;                         \\\n-      _argvec[2+5] = (unsigned long)arg5;                         \\\n-      _argvec[2+6] = (unsigned long)arg6;                         \\\n-      _argvec[2+7] = (unsigned long)arg7;                         \\\n-      _argvec[2+8] = (unsigned long)arg8;                         \\\n-      _argvec[2+9] = (unsigned long)arg9;                         \\\n-      _argvec[2+10] = (unsigned long)arg10;                       \\\n-      _argvec[2+11] = (unsigned long)arg11;                       \\\n-      _argvec[2+12] = (unsigned long)arg12;                       \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"std 2,-16(12)\\n\\t\"  \/* save tocptr *\/                   \\\n-         \"ld   2,-8(12)\\n\\t\"  \/* use nraddr's tocptr *\/           \\\n-         \"addi 1,1,-144\\n\\t\"  \/* expand stack frame *\/            \\\n-         \/* arg12 *\/                                              \\\n-         \"ld  3,96(12)\\n\\t\"                                       \\\n-         \"std 3,120(1)\\n\\t\"                                       \\\n-         \/* arg11 *\/                                              \\\n-         \"ld  3,88(12)\\n\\t\"                                       \\\n-         \"std 3,112(1)\\n\\t\"                                       \\\n-         \/* arg10 *\/                                              \\\n-         \"ld  3,80(12)\\n\\t\"                                       \\\n-         \"std 3,104(1)\\n\\t\"                                       \\\n-         \/* arg9 *\/                                               \\\n-         \"ld  3,72(12)\\n\\t\"                                       \\\n-         \"std 3,96(1)\\n\\t\"                                        \\\n-         \/* args1-8 *\/                                            \\\n-         \"ld   3, 8(12)\\n\\t\"  \/* arg1->r3 *\/                      \\\n-         \"ld   4, 16(12)\\n\\t\" \/* arg2->r4 *\/                      \\\n-         \"ld   5, 24(12)\\n\\t\" \/* arg3->r5 *\/                      \\\n-         \"ld   6, 32(12)\\n\\t\" \/* arg4->r6 *\/                      \\\n-         \"ld   7, 40(12)\\n\\t\" \/* arg5->r7 *\/                      \\\n-         \"ld   8, 48(12)\\n\\t\" \/* arg6->r8 *\/                      \\\n-         \"ld   9, 56(12)\\n\\t\" \/* arg7->r9 *\/                      \\\n-         \"ld  10, 64(12)\\n\\t\" \/* arg8->r10 *\/                     \\\n-         \"ld  12, 0(12)\\n\\t\"  \/* target->r12 *\/                   \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12                  \\\n-         \"mr 12,%1\\n\\t\"                                           \\\n-         \"mr %0,3\\n\\t\"                                            \\\n-         \"ld 2,-16(12)\\n\\t\" \/* restore tocptr *\/                  \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[2])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r28\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#endif \/* PLAT_ppc64le_linux *\/\n-\n-\/* ------------------------- arm-linux ------------------------- *\/\n-\n-#if defined(PLAT_arm_linux)\n-\n-\/* These regs are trashed by the hidden call. *\/\n-#define __CALLER_SAVED_REGS \"r0\", \"r1\", \"r2\", \"r3\",\"r4\", \"r12\", \"r14\"\n-\n-\/* Macros to save and align the stack before making a function\n-   call and restore it afterwards as gcc may not keep the stack\n-   pointer aligned if it doesn't realise calls are being made\n-   to other functions. *\/\n-\n-\/* This is a bit tricky.  We store the original stack pointer in r10\n-   as it is callee-saves.  gcc doesn't allow the use of r11 for some\n-   reason.  Also, we can't directly \"bic\" the stack pointer in thumb\n-   mode since r13 isn't an allowed register number in that context.\n-   So use r4 as a temporary, since that is about to get trashed\n-   anyway, just after each use of this macro.  Side effect is we need\n-   to be very careful about any future changes, since\n-   VALGRIND_ALIGN_STACK simply assumes r4 is usable. *\/\n-#define VALGRIND_ALIGN_STACK               \\\n-      \"mov r10, sp\\n\\t\"                    \\\n-      \"mov r4,  sp\\n\\t\"                    \\\n-      \"bic r4,  r4, #7\\n\\t\"                \\\n-      \"mov sp,  r4\\n\\t\"\n-#define VALGRIND_RESTORE_STACK             \\\n-      \"mov sp,  r10\\n\\t\"\n-\n-\/* These CALL_FN_ macros assume that on arm-linux, sizeof(unsigned\n-   long) == 4. *\/\n-\n-#define CALL_FN_W_v(lval, orig)                                   \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[1];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"ldr r4, [%1] \\n\\t\"  \/* target->r4 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, r0\\n\"                                           \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r10\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_W(lval, orig, arg1)                             \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[2];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"ldr r0, [%1, #4] \\n\\t\"                                  \\\n-         \"ldr r4, [%1] \\n\\t\"  \/* target->r4 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, r0\\n\"                                           \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r10\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WW(lval, orig, arg1,arg2)                       \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"ldr r0, [%1, #4] \\n\\t\"                                  \\\n-         \"ldr r1, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr r4, [%1] \\n\\t\"  \/* target->r4 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, r0\\n\"                                           \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r10\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WWW(lval, orig, arg1,arg2,arg3)                 \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[4];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"ldr r0, [%1, #4] \\n\\t\"                                  \\\n-         \"ldr r1, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr r2, [%1, #12] \\n\\t\"                                 \\\n-         \"ldr r4, [%1] \\n\\t\"  \/* target->r4 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, r0\\n\"                                           \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r10\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WWWW(lval, orig, arg1,arg2,arg3,arg4)           \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[5];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"ldr r0, [%1, #4] \\n\\t\"                                  \\\n-         \"ldr r1, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr r2, [%1, #12] \\n\\t\"                                 \\\n-         \"ldr r3, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr r4, [%1] \\n\\t\"  \/* target->r4 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, r0\"                                             \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r10\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_5W(lval, orig, arg1,arg2,arg3,arg4,arg5)        \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[6];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"sub sp, sp, #4 \\n\\t\"                                    \\\n-         \"ldr r0, [%1, #20] \\n\\t\"                                 \\\n-         \"push {r0} \\n\\t\"                                         \\\n-         \"ldr r0, [%1, #4] \\n\\t\"                                  \\\n-         \"ldr r1, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr r2, [%1, #12] \\n\\t\"                                 \\\n-         \"ldr r3, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr r4, [%1] \\n\\t\"  \/* target->r4 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, r0\"                                             \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r10\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_6W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6)   \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[7];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"ldr r0, [%1, #20] \\n\\t\"                                 \\\n-         \"ldr r1, [%1, #24] \\n\\t\"                                 \\\n-         \"push {r0, r1} \\n\\t\"                                     \\\n-         \"ldr r0, [%1, #4] \\n\\t\"                                  \\\n-         \"ldr r1, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr r2, [%1, #12] \\n\\t\"                                 \\\n-         \"ldr r3, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr r4, [%1] \\n\\t\"  \/* target->r4 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, r0\"                                             \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r10\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_7W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7)                            \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[8];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"sub sp, sp, #4 \\n\\t\"                                    \\\n-         \"ldr r0, [%1, #20] \\n\\t\"                                 \\\n-         \"ldr r1, [%1, #24] \\n\\t\"                                 \\\n-         \"ldr r2, [%1, #28] \\n\\t\"                                 \\\n-         \"push {r0, r1, r2} \\n\\t\"                                 \\\n-         \"ldr r0, [%1, #4] \\n\\t\"                                  \\\n-         \"ldr r1, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr r2, [%1, #12] \\n\\t\"                                 \\\n-         \"ldr r3, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr r4, [%1] \\n\\t\"  \/* target->r4 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, r0\"                                             \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r10\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_8W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7,arg8)                       \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[9];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"ldr r0, [%1, #20] \\n\\t\"                                 \\\n-         \"ldr r1, [%1, #24] \\n\\t\"                                 \\\n-         \"ldr r2, [%1, #28] \\n\\t\"                                 \\\n-         \"ldr r3, [%1, #32] \\n\\t\"                                 \\\n-         \"push {r0, r1, r2, r3} \\n\\t\"                             \\\n-         \"ldr r0, [%1, #4] \\n\\t\"                                  \\\n-         \"ldr r1, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr r2, [%1, #12] \\n\\t\"                                 \\\n-         \"ldr r3, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr r4, [%1] \\n\\t\"  \/* target->r4 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, r0\"                                             \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r10\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_9W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7,arg8,arg9)                  \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[10];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      _argvec[9] = (unsigned long)(arg9);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"sub sp, sp, #4 \\n\\t\"                                    \\\n-         \"ldr r0, [%1, #20] \\n\\t\"                                 \\\n-         \"ldr r1, [%1, #24] \\n\\t\"                                 \\\n-         \"ldr r2, [%1, #28] \\n\\t\"                                 \\\n-         \"ldr r3, [%1, #32] \\n\\t\"                                 \\\n-         \"ldr r4, [%1, #36] \\n\\t\"                                 \\\n-         \"push {r0, r1, r2, r3, r4} \\n\\t\"                         \\\n-         \"ldr r0, [%1, #4] \\n\\t\"                                  \\\n-         \"ldr r1, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr r2, [%1, #12] \\n\\t\"                                 \\\n-         \"ldr r3, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr r4, [%1] \\n\\t\"  \/* target->r4 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, r0\"                                             \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r10\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_10W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,  \\\n-                                  arg7,arg8,arg9,arg10)           \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[11];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      _argvec[9] = (unsigned long)(arg9);                         \\\n-      _argvec[10] = (unsigned long)(arg10);                       \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"ldr r0, [%1, #40] \\n\\t\"                                 \\\n-         \"push {r0} \\n\\t\"                                         \\\n-         \"ldr r0, [%1, #20] \\n\\t\"                                 \\\n-         \"ldr r1, [%1, #24] \\n\\t\"                                 \\\n-         \"ldr r2, [%1, #28] \\n\\t\"                                 \\\n-         \"ldr r3, [%1, #32] \\n\\t\"                                 \\\n-         \"ldr r4, [%1, #36] \\n\\t\"                                 \\\n-         \"push {r0, r1, r2, r3, r4} \\n\\t\"                         \\\n-         \"ldr r0, [%1, #4] \\n\\t\"                                  \\\n-         \"ldr r1, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr r2, [%1, #12] \\n\\t\"                                 \\\n-         \"ldr r3, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr r4, [%1] \\n\\t\"  \/* target->r4 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, r0\"                                             \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r10\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_11W(lval, orig, arg1,arg2,arg3,arg4,arg5,       \\\n-                                  arg6,arg7,arg8,arg9,arg10,      \\\n-                                  arg11)                          \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[12];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      _argvec[9] = (unsigned long)(arg9);                         \\\n-      _argvec[10] = (unsigned long)(arg10);                       \\\n-      _argvec[11] = (unsigned long)(arg11);                       \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"sub sp, sp, #4 \\n\\t\"                                    \\\n-         \"ldr r0, [%1, #40] \\n\\t\"                                 \\\n-         \"ldr r1, [%1, #44] \\n\\t\"                                 \\\n-         \"push {r0, r1} \\n\\t\"                                     \\\n-         \"ldr r0, [%1, #20] \\n\\t\"                                 \\\n-         \"ldr r1, [%1, #24] \\n\\t\"                                 \\\n-         \"ldr r2, [%1, #28] \\n\\t\"                                 \\\n-         \"ldr r3, [%1, #32] \\n\\t\"                                 \\\n-         \"ldr r4, [%1, #36] \\n\\t\"                                 \\\n-         \"push {r0, r1, r2, r3, r4} \\n\\t\"                         \\\n-         \"ldr r0, [%1, #4] \\n\\t\"                                  \\\n-         \"ldr r1, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr r2, [%1, #12] \\n\\t\"                                 \\\n-         \"ldr r3, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr r4, [%1] \\n\\t\"  \/* target->r4 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, r0\"                                             \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r10\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_12W(lval, orig, arg1,arg2,arg3,arg4,arg5,       \\\n-                                  arg6,arg7,arg8,arg9,arg10,      \\\n-                                  arg11,arg12)                    \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[13];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      _argvec[9] = (unsigned long)(arg9);                         \\\n-      _argvec[10] = (unsigned long)(arg10);                       \\\n-      _argvec[11] = (unsigned long)(arg11);                       \\\n-      _argvec[12] = (unsigned long)(arg12);                       \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"ldr r0, [%1, #40] \\n\\t\"                                 \\\n-         \"ldr r1, [%1, #44] \\n\\t\"                                 \\\n-         \"ldr r2, [%1, #48] \\n\\t\"                                 \\\n-         \"push {r0, r1, r2} \\n\\t\"                                 \\\n-         \"ldr r0, [%1, #20] \\n\\t\"                                 \\\n-         \"ldr r1, [%1, #24] \\n\\t\"                                 \\\n-         \"ldr r2, [%1, #28] \\n\\t\"                                 \\\n-         \"ldr r3, [%1, #32] \\n\\t\"                                 \\\n-         \"ldr r4, [%1, #36] \\n\\t\"                                 \\\n-         \"push {r0, r1, r2, r3, r4} \\n\\t\"                         \\\n-         \"ldr r0, [%1, #4] \\n\\t\"                                  \\\n-         \"ldr r1, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr r2, [%1, #12] \\n\\t\"                                 \\\n-         \"ldr r3, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr r4, [%1] \\n\\t\"  \/* target->r4 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, r0\"                                             \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r10\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#endif \/* PLAT_arm_linux *\/\n-\n-\/* ------------------------ arm64-linux ------------------------ *\/\n-\n-#if defined(PLAT_arm64_linux)\n-\n-\/* These regs are trashed by the hidden call. *\/\n-#define __CALLER_SAVED_REGS \\\n-     \"x0\", \"x1\", \"x2\", \"x3\",\"x4\", \"x5\", \"x6\", \"x7\", \"x8\", \"x9\",   \\\n-     \"x10\", \"x11\", \"x12\", \"x13\", \"x14\", \"x15\", \"x16\", \"x17\",      \\\n-     \"x18\", \"x19\", \"x20\", \"x30\",                                  \\\n-     \"v0\", \"v1\", \"v2\", \"v3\", \"v4\", \"v5\", \"v6\", \"v7\", \"v8\", \"v9\",  \\\n-     \"v10\", \"v11\", \"v12\", \"v13\", \"v14\", \"v15\", \"v16\", \"v17\",      \\\n-     \"v18\", \"v19\", \"v20\", \"v21\", \"v22\", \"v23\", \"v24\", \"v25\",      \\\n-     \"v26\", \"v27\", \"v28\", \"v29\", \"v30\", \"v31\"\n-\n-\/* x21 is callee-saved, so we can use it to save and restore SP around\n-   the hidden call. *\/\n-#define VALGRIND_ALIGN_STACK               \\\n-      \"mov x21, sp\\n\\t\"                    \\\n-      \"bic sp, x21, #15\\n\\t\"\n-#define VALGRIND_RESTORE_STACK             \\\n-      \"mov sp,  x21\\n\\t\"\n-\n-\/* These CALL_FN_ macros assume that on arm64-linux,\n-   sizeof(unsigned long) == 8. *\/\n-\n-#define CALL_FN_W_v(lval, orig)                                   \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[1];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"ldr x8, [%1] \\n\\t\"  \/* target->x8 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, x0\\n\"                                           \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"x21\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_W(lval, orig, arg1)                             \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[2];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"ldr x0, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr x8, [%1] \\n\\t\"  \/* target->x8 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, x0\\n\"                                           \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"x21\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WW(lval, orig, arg1,arg2)                       \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"ldr x0, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr x1, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr x8, [%1] \\n\\t\"  \/* target->x8 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, x0\\n\"                                           \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"x21\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WWW(lval, orig, arg1,arg2,arg3)                 \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[4];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"ldr x0, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr x1, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr x2, [%1, #24] \\n\\t\"                                 \\\n-         \"ldr x8, [%1] \\n\\t\"  \/* target->x8 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, x0\\n\"                                           \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"x21\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WWWW(lval, orig, arg1,arg2,arg3,arg4)           \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[5];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"ldr x0, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr x1, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr x2, [%1, #24] \\n\\t\"                                 \\\n-         \"ldr x3, [%1, #32] \\n\\t\"                                 \\\n-         \"ldr x8, [%1] \\n\\t\"  \/* target->x8 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, x0\"                                             \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"x21\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_5W(lval, orig, arg1,arg2,arg3,arg4,arg5)        \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[6];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"ldr x0, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr x1, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr x2, [%1, #24] \\n\\t\"                                 \\\n-         \"ldr x3, [%1, #32] \\n\\t\"                                 \\\n-         \"ldr x4, [%1, #40] \\n\\t\"                                 \\\n-         \"ldr x8, [%1] \\n\\t\"  \/* target->x8 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, x0\"                                             \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"x21\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_6W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6)   \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[7];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"ldr x0, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr x1, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr x2, [%1, #24] \\n\\t\"                                 \\\n-         \"ldr x3, [%1, #32] \\n\\t\"                                 \\\n-         \"ldr x4, [%1, #40] \\n\\t\"                                 \\\n-         \"ldr x5, [%1, #48] \\n\\t\"                                 \\\n-         \"ldr x8, [%1] \\n\\t\"  \/* target->x8 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, x0\"                                             \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"x21\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_7W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7)                            \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[8];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"ldr x0, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr x1, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr x2, [%1, #24] \\n\\t\"                                 \\\n-         \"ldr x3, [%1, #32] \\n\\t\"                                 \\\n-         \"ldr x4, [%1, #40] \\n\\t\"                                 \\\n-         \"ldr x5, [%1, #48] \\n\\t\"                                 \\\n-         \"ldr x6, [%1, #56] \\n\\t\"                                 \\\n-         \"ldr x8, [%1] \\n\\t\"  \/* target->x8 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, x0\"                                             \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"x21\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_8W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7,arg8)                       \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[9];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"ldr x0, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr x1, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr x2, [%1, #24] \\n\\t\"                                 \\\n-         \"ldr x3, [%1, #32] \\n\\t\"                                 \\\n-         \"ldr x4, [%1, #40] \\n\\t\"                                 \\\n-         \"ldr x5, [%1, #48] \\n\\t\"                                 \\\n-         \"ldr x6, [%1, #56] \\n\\t\"                                 \\\n-         \"ldr x7, [%1, #64] \\n\\t\"                                 \\\n-         \"ldr x8, [%1] \\n\\t\"  \/* target->x8 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, x0\"                                             \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"x21\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_9W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7,arg8,arg9)                  \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[10];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      _argvec[9] = (unsigned long)(arg9);                         \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"sub sp, sp, #0x20 \\n\\t\"                                 \\\n-         \"ldr x0, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr x1, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr x2, [%1, #24] \\n\\t\"                                 \\\n-         \"ldr x3, [%1, #32] \\n\\t\"                                 \\\n-         \"ldr x4, [%1, #40] \\n\\t\"                                 \\\n-         \"ldr x5, [%1, #48] \\n\\t\"                                 \\\n-         \"ldr x6, [%1, #56] \\n\\t\"                                 \\\n-         \"ldr x7, [%1, #64] \\n\\t\"                                 \\\n-         \"ldr x8, [%1, #72] \\n\\t\"                                 \\\n-         \"str x8, [sp, #0]  \\n\\t\"                                 \\\n-         \"ldr x8, [%1] \\n\\t\"  \/* target->x8 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, x0\"                                             \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"x21\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_10W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,  \\\n-                                  arg7,arg8,arg9,arg10)           \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[11];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      _argvec[9] = (unsigned long)(arg9);                         \\\n-      _argvec[10] = (unsigned long)(arg10);                       \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"sub sp, sp, #0x20 \\n\\t\"                                 \\\n-         \"ldr x0, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr x1, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr x2, [%1, #24] \\n\\t\"                                 \\\n-         \"ldr x3, [%1, #32] \\n\\t\"                                 \\\n-         \"ldr x4, [%1, #40] \\n\\t\"                                 \\\n-         \"ldr x5, [%1, #48] \\n\\t\"                                 \\\n-         \"ldr x6, [%1, #56] \\n\\t\"                                 \\\n-         \"ldr x7, [%1, #64] \\n\\t\"                                 \\\n-         \"ldr x8, [%1, #72] \\n\\t\"                                 \\\n-         \"str x8, [sp, #0]  \\n\\t\"                                 \\\n-         \"ldr x8, [%1, #80] \\n\\t\"                                 \\\n-         \"str x8, [sp, #8]  \\n\\t\"                                 \\\n-         \"ldr x8, [%1] \\n\\t\"  \/* target->x8 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, x0\"                                             \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"x21\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_11W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,  \\\n-                                  arg7,arg8,arg9,arg10,arg11)     \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[12];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      _argvec[9] = (unsigned long)(arg9);                         \\\n-      _argvec[10] = (unsigned long)(arg10);                       \\\n-      _argvec[11] = (unsigned long)(arg11);                       \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"sub sp, sp, #0x30 \\n\\t\"                                 \\\n-         \"ldr x0, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr x1, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr x2, [%1, #24] \\n\\t\"                                 \\\n-         \"ldr x3, [%1, #32] \\n\\t\"                                 \\\n-         \"ldr x4, [%1, #40] \\n\\t\"                                 \\\n-         \"ldr x5, [%1, #48] \\n\\t\"                                 \\\n-         \"ldr x6, [%1, #56] \\n\\t\"                                 \\\n-         \"ldr x7, [%1, #64] \\n\\t\"                                 \\\n-         \"ldr x8, [%1, #72] \\n\\t\"                                 \\\n-         \"str x8, [sp, #0]  \\n\\t\"                                 \\\n-         \"ldr x8, [%1, #80] \\n\\t\"                                 \\\n-         \"str x8, [sp, #8]  \\n\\t\"                                 \\\n-         \"ldr x8, [%1, #88] \\n\\t\"                                 \\\n-         \"str x8, [sp, #16] \\n\\t\"                                 \\\n-         \"ldr x8, [%1] \\n\\t\"  \/* target->x8 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, x0\"                                             \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"x21\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_12W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,  \\\n-                                  arg7,arg8,arg9,arg10,arg11,     \\\n-                                  arg12)                          \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[13];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      _argvec[9] = (unsigned long)(arg9);                         \\\n-      _argvec[10] = (unsigned long)(arg10);                       \\\n-      _argvec[11] = (unsigned long)(arg11);                       \\\n-      _argvec[12] = (unsigned long)(arg12);                       \\\n-      __asm__ volatile(                                           \\\n-         VALGRIND_ALIGN_STACK                                     \\\n-         \"sub sp, sp, #0x30 \\n\\t\"                                 \\\n-         \"ldr x0, [%1, #8] \\n\\t\"                                  \\\n-         \"ldr x1, [%1, #16] \\n\\t\"                                 \\\n-         \"ldr x2, [%1, #24] \\n\\t\"                                 \\\n-         \"ldr x3, [%1, #32] \\n\\t\"                                 \\\n-         \"ldr x4, [%1, #40] \\n\\t\"                                 \\\n-         \"ldr x5, [%1, #48] \\n\\t\"                                 \\\n-         \"ldr x6, [%1, #56] \\n\\t\"                                 \\\n-         \"ldr x7, [%1, #64] \\n\\t\"                                 \\\n-         \"ldr x8, [%1, #72] \\n\\t\"                                 \\\n-         \"str x8, [sp, #0]  \\n\\t\"                                 \\\n-         \"ldr x8, [%1, #80] \\n\\t\"                                 \\\n-         \"str x8, [sp, #8]  \\n\\t\"                                 \\\n-         \"ldr x8, [%1, #88] \\n\\t\"                                 \\\n-         \"str x8, [sp, #16] \\n\\t\"                                 \\\n-         \"ldr x8, [%1, #96] \\n\\t\"                                 \\\n-         \"str x8, [sp, #24] \\n\\t\"                                 \\\n-         \"ldr x8, [%1] \\n\\t\"  \/* target->x8 *\/                    \\\n-         VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8                   \\\n-         VALGRIND_RESTORE_STACK                                   \\\n-         \"mov %0, x0\"                                             \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS, \"x21\"   \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#endif \/* PLAT_arm64_linux *\/\n-\n-\/* ------------------------- s390x-linux ------------------------- *\/\n-\n-#if defined(PLAT_s390x_linux)\n-\n-\/* Similar workaround as amd64 (see above), but we use r11 as frame\n-   pointer and save the old r11 in r7. r11 might be used for\n-   argvec, therefore we copy argvec in r1 since r1 is clobbered\n-   after the call anyway.  *\/\n-#if defined(__GNUC__) && defined(__GCC_HAVE_DWARF2_CFI_ASM)\n-#  define __FRAME_POINTER                                         \\\n-      ,\"d\"(__builtin_dwarf_cfa())\n-#  define VALGRIND_CFI_PROLOGUE                                   \\\n-      \".cfi_remember_state\\n\\t\"                                   \\\n-      \"lgr 1,%1\\n\\t\" \/* copy the argvec pointer in r1 *\/          \\\n-      \"lgr 7,11\\n\\t\"                                              \\\n-      \"lgr 11,%2\\n\\t\"                                             \\\n-      \".cfi_def_cfa r11, 0\\n\\t\"\n-#  define VALGRIND_CFI_EPILOGUE                                   \\\n-      \"lgr 11, 7\\n\\t\"                                             \\\n-      \".cfi_restore_state\\n\\t\"\n-#else\n-#  define __FRAME_POINTER\n-#  define VALGRIND_CFI_PROLOGUE                                   \\\n-      \"lgr 1,%1\\n\\t\"\n-#  define VALGRIND_CFI_EPILOGUE\n-#endif\n-\n-\/* Nb: On s390 the stack pointer is properly aligned *at all times*\n-   according to the s390 GCC maintainer. (The ABI specification is not\n-   precise in this regard.) Therefore, VALGRIND_ALIGN_STACK and\n-   VALGRIND_RESTORE_STACK are not defined here. *\/\n-\n-\/* These regs are trashed by the hidden call. Note that we overwrite\n-   r14 in s390_irgen_noredir (VEX\/priv\/guest_s390_irgen.c) to give the\n-   function a proper return address. All others are ABI defined call\n-   clobbers. *\/\n-#define __CALLER_SAVED_REGS \"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"14\", \\\n-                           \"f0\",\"f1\",\"f2\",\"f3\",\"f4\",\"f5\",\"f6\",\"f7\"\n-\n-\/* Nb: Although r11 is modified in the asm snippets below (inside\n-   VALGRIND_CFI_PROLOGUE) it is not listed in the clobber section, for\n-   two reasons:\n-   (1) r11 is restored in VALGRIND_CFI_EPILOGUE, so effectively it is not\n-       modified\n-   (2) GCC will complain that r11 cannot appear inside a clobber section,\n-       when compiled with -O -fno-omit-frame-pointer\n- *\/\n-\n-#define CALL_FN_W_v(lval, orig)                                  \\\n-   do {                                                          \\\n-      volatile OrigFn        _orig = (orig);                     \\\n-      volatile unsigned long  _argvec[1];                        \\\n-      volatile unsigned long _res;                               \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                  \\\n-      __asm__ volatile(                                          \\\n-         VALGRIND_CFI_PROLOGUE                                   \\\n-         \"aghi 15,-160\\n\\t\"                                      \\\n-         \"lg 1, 0(1)\\n\\t\"  \/* target->r1 *\/                      \\\n-         VALGRIND_CALL_NOREDIR_R1                                \\\n-         \"lgr %0, 2\\n\\t\"                                         \\\n-         \"aghi 15,160\\n\\t\"                                       \\\n-         VALGRIND_CFI_EPILOGUE                                   \\\n-         : \/*out*\/   \"=d\" (_res)                                 \\\n-         : \/*in*\/    \"d\" (&_argvec[0]) __FRAME_POINTER           \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS,\"7\"     \\\n-      );                                                         \\\n-      lval = (__typeof__(lval)) _res;                            \\\n-   } while (0)\n-\n-\/* The call abi has the arguments in r2-r6 and stack *\/\n-#define CALL_FN_W_W(lval, orig, arg1)                            \\\n-   do {                                                          \\\n-      volatile OrigFn        _orig = (orig);                     \\\n-      volatile unsigned long _argvec[2];                         \\\n-      volatile unsigned long _res;                               \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                  \\\n-      _argvec[1] = (unsigned long)arg1;                          \\\n-      __asm__ volatile(                                          \\\n-         VALGRIND_CFI_PROLOGUE                                   \\\n-         \"aghi 15,-160\\n\\t\"                                      \\\n-         \"lg 2, 8(1)\\n\\t\"                                        \\\n-         \"lg 1, 0(1)\\n\\t\"                                        \\\n-         VALGRIND_CALL_NOREDIR_R1                                \\\n-         \"lgr %0, 2\\n\\t\"                                         \\\n-         \"aghi 15,160\\n\\t\"                                       \\\n-         VALGRIND_CFI_EPILOGUE                                   \\\n-         : \/*out*\/   \"=d\" (_res)                                 \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER           \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS,\"7\"     \\\n-      );                                                         \\\n-      lval = (__typeof__(lval)) _res;                            \\\n-   } while (0)\n-\n-#define CALL_FN_W_WW(lval, orig, arg1, arg2)                     \\\n-   do {                                                          \\\n-      volatile OrigFn        _orig = (orig);                     \\\n-      volatile unsigned long _argvec[3];                         \\\n-      volatile unsigned long _res;                               \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                  \\\n-      _argvec[1] = (unsigned long)arg1;                          \\\n-      _argvec[2] = (unsigned long)arg2;                          \\\n-      __asm__ volatile(                                          \\\n-         VALGRIND_CFI_PROLOGUE                                   \\\n-         \"aghi 15,-160\\n\\t\"                                      \\\n-         \"lg 2, 8(1)\\n\\t\"                                        \\\n-         \"lg 3,16(1)\\n\\t\"                                        \\\n-         \"lg 1, 0(1)\\n\\t\"                                        \\\n-         VALGRIND_CALL_NOREDIR_R1                                \\\n-         \"lgr %0, 2\\n\\t\"                                         \\\n-         \"aghi 15,160\\n\\t\"                                       \\\n-         VALGRIND_CFI_EPILOGUE                                   \\\n-         : \/*out*\/   \"=d\" (_res)                                 \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER           \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS,\"7\"     \\\n-      );                                                         \\\n-      lval = (__typeof__(lval)) _res;                            \\\n-   } while (0)\n-\n-#define CALL_FN_W_WWW(lval, orig, arg1, arg2, arg3)              \\\n-   do {                                                          \\\n-      volatile OrigFn        _orig = (orig);                     \\\n-      volatile unsigned long _argvec[4];                         \\\n-      volatile unsigned long _res;                               \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                  \\\n-      _argvec[1] = (unsigned long)arg1;                          \\\n-      _argvec[2] = (unsigned long)arg2;                          \\\n-      _argvec[3] = (unsigned long)arg3;                          \\\n-      __asm__ volatile(                                          \\\n-         VALGRIND_CFI_PROLOGUE                                   \\\n-         \"aghi 15,-160\\n\\t\"                                      \\\n-         \"lg 2, 8(1)\\n\\t\"                                        \\\n-         \"lg 3,16(1)\\n\\t\"                                        \\\n-         \"lg 4,24(1)\\n\\t\"                                        \\\n-         \"lg 1, 0(1)\\n\\t\"                                        \\\n-         VALGRIND_CALL_NOREDIR_R1                                \\\n-         \"lgr %0, 2\\n\\t\"                                         \\\n-         \"aghi 15,160\\n\\t\"                                       \\\n-         VALGRIND_CFI_EPILOGUE                                   \\\n-         : \/*out*\/   \"=d\" (_res)                                 \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER           \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS,\"7\"     \\\n-      );                                                         \\\n-      lval = (__typeof__(lval)) _res;                            \\\n-   } while (0)\n-\n-#define CALL_FN_W_WWWW(lval, orig, arg1, arg2, arg3, arg4)       \\\n-   do {                                                          \\\n-      volatile OrigFn        _orig = (orig);                     \\\n-      volatile unsigned long _argvec[5];                         \\\n-      volatile unsigned long _res;                               \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                  \\\n-      _argvec[1] = (unsigned long)arg1;                          \\\n-      _argvec[2] = (unsigned long)arg2;                          \\\n-      _argvec[3] = (unsigned long)arg3;                          \\\n-      _argvec[4] = (unsigned long)arg4;                          \\\n-      __asm__ volatile(                                          \\\n-         VALGRIND_CFI_PROLOGUE                                   \\\n-         \"aghi 15,-160\\n\\t\"                                      \\\n-         \"lg 2, 8(1)\\n\\t\"                                        \\\n-         \"lg 3,16(1)\\n\\t\"                                        \\\n-         \"lg 4,24(1)\\n\\t\"                                        \\\n-         \"lg 5,32(1)\\n\\t\"                                        \\\n-         \"lg 1, 0(1)\\n\\t\"                                        \\\n-         VALGRIND_CALL_NOREDIR_R1                                \\\n-         \"lgr %0, 2\\n\\t\"                                         \\\n-         \"aghi 15,160\\n\\t\"                                       \\\n-         VALGRIND_CFI_EPILOGUE                                   \\\n-         : \/*out*\/   \"=d\" (_res)                                 \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER           \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS,\"7\"     \\\n-      );                                                         \\\n-      lval = (__typeof__(lval)) _res;                            \\\n-   } while (0)\n-\n-#define CALL_FN_W_5W(lval, orig, arg1, arg2, arg3, arg4, arg5)   \\\n-   do {                                                          \\\n-      volatile OrigFn        _orig = (orig);                     \\\n-      volatile unsigned long _argvec[6];                         \\\n-      volatile unsigned long _res;                               \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                  \\\n-      _argvec[1] = (unsigned long)arg1;                          \\\n-      _argvec[2] = (unsigned long)arg2;                          \\\n-      _argvec[3] = (unsigned long)arg3;                          \\\n-      _argvec[4] = (unsigned long)arg4;                          \\\n-      _argvec[5] = (unsigned long)arg5;                          \\\n-      __asm__ volatile(                                          \\\n-         VALGRIND_CFI_PROLOGUE                                   \\\n-         \"aghi 15,-160\\n\\t\"                                      \\\n-         \"lg 2, 8(1)\\n\\t\"                                        \\\n-         \"lg 3,16(1)\\n\\t\"                                        \\\n-         \"lg 4,24(1)\\n\\t\"                                        \\\n-         \"lg 5,32(1)\\n\\t\"                                        \\\n-         \"lg 6,40(1)\\n\\t\"                                        \\\n-         \"lg 1, 0(1)\\n\\t\"                                        \\\n-         VALGRIND_CALL_NOREDIR_R1                                \\\n-         \"lgr %0, 2\\n\\t\"                                         \\\n-         \"aghi 15,160\\n\\t\"                                       \\\n-         VALGRIND_CFI_EPILOGUE                                   \\\n-         : \/*out*\/   \"=d\" (_res)                                 \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER           \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS,\"6\",\"7\" \\\n-      );                                                         \\\n-      lval = (__typeof__(lval)) _res;                            \\\n-   } while (0)\n-\n-#define CALL_FN_W_6W(lval, orig, arg1, arg2, arg3, arg4, arg5,   \\\n-                     arg6)                                       \\\n-   do {                                                          \\\n-      volatile OrigFn        _orig = (orig);                     \\\n-      volatile unsigned long _argvec[7];                         \\\n-      volatile unsigned long _res;                               \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                  \\\n-      _argvec[1] = (unsigned long)arg1;                          \\\n-      _argvec[2] = (unsigned long)arg2;                          \\\n-      _argvec[3] = (unsigned long)arg3;                          \\\n-      _argvec[4] = (unsigned long)arg4;                          \\\n-      _argvec[5] = (unsigned long)arg5;                          \\\n-      _argvec[6] = (unsigned long)arg6;                          \\\n-      __asm__ volatile(                                          \\\n-         VALGRIND_CFI_PROLOGUE                                   \\\n-         \"aghi 15,-168\\n\\t\"                                      \\\n-         \"lg 2, 8(1)\\n\\t\"                                        \\\n-         \"lg 3,16(1)\\n\\t\"                                        \\\n-         \"lg 4,24(1)\\n\\t\"                                        \\\n-         \"lg 5,32(1)\\n\\t\"                                        \\\n-         \"lg 6,40(1)\\n\\t\"                                        \\\n-         \"mvc 160(8,15), 48(1)\\n\\t\"                              \\\n-         \"lg 1, 0(1)\\n\\t\"                                        \\\n-         VALGRIND_CALL_NOREDIR_R1                                \\\n-         \"lgr %0, 2\\n\\t\"                                         \\\n-         \"aghi 15,168\\n\\t\"                                       \\\n-         VALGRIND_CFI_EPILOGUE                                   \\\n-         : \/*out*\/   \"=d\" (_res)                                 \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER           \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS,\"6\",\"7\" \\\n-      );                                                         \\\n-      lval = (__typeof__(lval)) _res;                            \\\n-   } while (0)\n-\n-#define CALL_FN_W_7W(lval, orig, arg1, arg2, arg3, arg4, arg5,   \\\n-                     arg6, arg7)                                 \\\n-   do {                                                          \\\n-      volatile OrigFn        _orig = (orig);                     \\\n-      volatile unsigned long _argvec[8];                         \\\n-      volatile unsigned long _res;                               \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                  \\\n-      _argvec[1] = (unsigned long)arg1;                          \\\n-      _argvec[2] = (unsigned long)arg2;                          \\\n-      _argvec[3] = (unsigned long)arg3;                          \\\n-      _argvec[4] = (unsigned long)arg4;                          \\\n-      _argvec[5] = (unsigned long)arg5;                          \\\n-      _argvec[6] = (unsigned long)arg6;                          \\\n-      _argvec[7] = (unsigned long)arg7;                          \\\n-      __asm__ volatile(                                          \\\n-         VALGRIND_CFI_PROLOGUE                                   \\\n-         \"aghi 15,-176\\n\\t\"                                      \\\n-         \"lg 2, 8(1)\\n\\t\"                                        \\\n-         \"lg 3,16(1)\\n\\t\"                                        \\\n-         \"lg 4,24(1)\\n\\t\"                                        \\\n-         \"lg 5,32(1)\\n\\t\"                                        \\\n-         \"lg 6,40(1)\\n\\t\"                                        \\\n-         \"mvc 160(8,15), 48(1)\\n\\t\"                              \\\n-         \"mvc 168(8,15), 56(1)\\n\\t\"                              \\\n-         \"lg 1, 0(1)\\n\\t\"                                        \\\n-         VALGRIND_CALL_NOREDIR_R1                                \\\n-         \"lgr %0, 2\\n\\t\"                                         \\\n-         \"aghi 15,176\\n\\t\"                                       \\\n-         VALGRIND_CFI_EPILOGUE                                   \\\n-         : \/*out*\/   \"=d\" (_res)                                 \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER           \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS,\"6\",\"7\" \\\n-      );                                                         \\\n-      lval = (__typeof__(lval)) _res;                            \\\n-   } while (0)\n-\n-#define CALL_FN_W_8W(lval, orig, arg1, arg2, arg3, arg4, arg5,   \\\n-                     arg6, arg7 ,arg8)                           \\\n-   do {                                                          \\\n-      volatile OrigFn        _orig = (orig);                     \\\n-      volatile unsigned long _argvec[9];                         \\\n-      volatile unsigned long _res;                               \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                  \\\n-      _argvec[1] = (unsigned long)arg1;                          \\\n-      _argvec[2] = (unsigned long)arg2;                          \\\n-      _argvec[3] = (unsigned long)arg3;                          \\\n-      _argvec[4] = (unsigned long)arg4;                          \\\n-      _argvec[5] = (unsigned long)arg5;                          \\\n-      _argvec[6] = (unsigned long)arg6;                          \\\n-      _argvec[7] = (unsigned long)arg7;                          \\\n-      _argvec[8] = (unsigned long)arg8;                          \\\n-      __asm__ volatile(                                          \\\n-         VALGRIND_CFI_PROLOGUE                                   \\\n-         \"aghi 15,-184\\n\\t\"                                      \\\n-         \"lg 2, 8(1)\\n\\t\"                                        \\\n-         \"lg 3,16(1)\\n\\t\"                                        \\\n-         \"lg 4,24(1)\\n\\t\"                                        \\\n-         \"lg 5,32(1)\\n\\t\"                                        \\\n-         \"lg 6,40(1)\\n\\t\"                                        \\\n-         \"mvc 160(8,15), 48(1)\\n\\t\"                              \\\n-         \"mvc 168(8,15), 56(1)\\n\\t\"                              \\\n-         \"mvc 176(8,15), 64(1)\\n\\t\"                              \\\n-         \"lg 1, 0(1)\\n\\t\"                                        \\\n-         VALGRIND_CALL_NOREDIR_R1                                \\\n-         \"lgr %0, 2\\n\\t\"                                         \\\n-         \"aghi 15,184\\n\\t\"                                       \\\n-         VALGRIND_CFI_EPILOGUE                                   \\\n-         : \/*out*\/   \"=d\" (_res)                                 \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER           \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS,\"6\",\"7\" \\\n-      );                                                         \\\n-      lval = (__typeof__(lval)) _res;                            \\\n-   } while (0)\n-\n-#define CALL_FN_W_9W(lval, orig, arg1, arg2, arg3, arg4, arg5,   \\\n-                     arg6, arg7 ,arg8, arg9)                     \\\n-   do {                                                          \\\n-      volatile OrigFn        _orig = (orig);                     \\\n-      volatile unsigned long _argvec[10];                        \\\n-      volatile unsigned long _res;                               \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                  \\\n-      _argvec[1] = (unsigned long)arg1;                          \\\n-      _argvec[2] = (unsigned long)arg2;                          \\\n-      _argvec[3] = (unsigned long)arg3;                          \\\n-      _argvec[4] = (unsigned long)arg4;                          \\\n-      _argvec[5] = (unsigned long)arg5;                          \\\n-      _argvec[6] = (unsigned long)arg6;                          \\\n-      _argvec[7] = (unsigned long)arg7;                          \\\n-      _argvec[8] = (unsigned long)arg8;                          \\\n-      _argvec[9] = (unsigned long)arg9;                          \\\n-      __asm__ volatile(                                          \\\n-         VALGRIND_CFI_PROLOGUE                                   \\\n-         \"aghi 15,-192\\n\\t\"                                      \\\n-         \"lg 2, 8(1)\\n\\t\"                                        \\\n-         \"lg 3,16(1)\\n\\t\"                                        \\\n-         \"lg 4,24(1)\\n\\t\"                                        \\\n-         \"lg 5,32(1)\\n\\t\"                                        \\\n-         \"lg 6,40(1)\\n\\t\"                                        \\\n-         \"mvc 160(8,15), 48(1)\\n\\t\"                              \\\n-         \"mvc 168(8,15), 56(1)\\n\\t\"                              \\\n-         \"mvc 176(8,15), 64(1)\\n\\t\"                              \\\n-         \"mvc 184(8,15), 72(1)\\n\\t\"                              \\\n-         \"lg 1, 0(1)\\n\\t\"                                        \\\n-         VALGRIND_CALL_NOREDIR_R1                                \\\n-         \"lgr %0, 2\\n\\t\"                                         \\\n-         \"aghi 15,192\\n\\t\"                                       \\\n-         VALGRIND_CFI_EPILOGUE                                   \\\n-         : \/*out*\/   \"=d\" (_res)                                 \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER           \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS,\"6\",\"7\" \\\n-      );                                                         \\\n-      lval = (__typeof__(lval)) _res;                            \\\n-   } while (0)\n-\n-#define CALL_FN_W_10W(lval, orig, arg1, arg2, arg3, arg4, arg5,  \\\n-                     arg6, arg7 ,arg8, arg9, arg10)              \\\n-   do {                                                          \\\n-      volatile OrigFn        _orig = (orig);                     \\\n-      volatile unsigned long _argvec[11];                        \\\n-      volatile unsigned long _res;                               \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                  \\\n-      _argvec[1] = (unsigned long)arg1;                          \\\n-      _argvec[2] = (unsigned long)arg2;                          \\\n-      _argvec[3] = (unsigned long)arg3;                          \\\n-      _argvec[4] = (unsigned long)arg4;                          \\\n-      _argvec[5] = (unsigned long)arg5;                          \\\n-      _argvec[6] = (unsigned long)arg6;                          \\\n-      _argvec[7] = (unsigned long)arg7;                          \\\n-      _argvec[8] = (unsigned long)arg8;                          \\\n-      _argvec[9] = (unsigned long)arg9;                          \\\n-      _argvec[10] = (unsigned long)arg10;                        \\\n-      __asm__ volatile(                                          \\\n-         VALGRIND_CFI_PROLOGUE                                   \\\n-         \"aghi 15,-200\\n\\t\"                                      \\\n-         \"lg 2, 8(1)\\n\\t\"                                        \\\n-         \"lg 3,16(1)\\n\\t\"                                        \\\n-         \"lg 4,24(1)\\n\\t\"                                        \\\n-         \"lg 5,32(1)\\n\\t\"                                        \\\n-         \"lg 6,40(1)\\n\\t\"                                        \\\n-         \"mvc 160(8,15), 48(1)\\n\\t\"                              \\\n-         \"mvc 168(8,15), 56(1)\\n\\t\"                              \\\n-         \"mvc 176(8,15), 64(1)\\n\\t\"                              \\\n-         \"mvc 184(8,15), 72(1)\\n\\t\"                              \\\n-         \"mvc 192(8,15), 80(1)\\n\\t\"                              \\\n-         \"lg 1, 0(1)\\n\\t\"                                        \\\n-         VALGRIND_CALL_NOREDIR_R1                                \\\n-         \"lgr %0, 2\\n\\t\"                                         \\\n-         \"aghi 15,200\\n\\t\"                                       \\\n-         VALGRIND_CFI_EPILOGUE                                   \\\n-         : \/*out*\/   \"=d\" (_res)                                 \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER           \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS,\"6\",\"7\" \\\n-      );                                                         \\\n-      lval = (__typeof__(lval)) _res;                            \\\n-   } while (0)\n-\n-#define CALL_FN_W_11W(lval, orig, arg1, arg2, arg3, arg4, arg5,  \\\n-                     arg6, arg7 ,arg8, arg9, arg10, arg11)       \\\n-   do {                                                          \\\n-      volatile OrigFn        _orig = (orig);                     \\\n-      volatile unsigned long _argvec[12];                        \\\n-      volatile unsigned long _res;                               \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                  \\\n-      _argvec[1] = (unsigned long)arg1;                          \\\n-      _argvec[2] = (unsigned long)arg2;                          \\\n-      _argvec[3] = (unsigned long)arg3;                          \\\n-      _argvec[4] = (unsigned long)arg4;                          \\\n-      _argvec[5] = (unsigned long)arg5;                          \\\n-      _argvec[6] = (unsigned long)arg6;                          \\\n-      _argvec[7] = (unsigned long)arg7;                          \\\n-      _argvec[8] = (unsigned long)arg8;                          \\\n-      _argvec[9] = (unsigned long)arg9;                          \\\n-      _argvec[10] = (unsigned long)arg10;                        \\\n-      _argvec[11] = (unsigned long)arg11;                        \\\n-      __asm__ volatile(                                          \\\n-         VALGRIND_CFI_PROLOGUE                                   \\\n-         \"aghi 15,-208\\n\\t\"                                      \\\n-         \"lg 2, 8(1)\\n\\t\"                                        \\\n-         \"lg 3,16(1)\\n\\t\"                                        \\\n-         \"lg 4,24(1)\\n\\t\"                                        \\\n-         \"lg 5,32(1)\\n\\t\"                                        \\\n-         \"lg 6,40(1)\\n\\t\"                                        \\\n-         \"mvc 160(8,15), 48(1)\\n\\t\"                              \\\n-         \"mvc 168(8,15), 56(1)\\n\\t\"                              \\\n-         \"mvc 176(8,15), 64(1)\\n\\t\"                              \\\n-         \"mvc 184(8,15), 72(1)\\n\\t\"                              \\\n-         \"mvc 192(8,15), 80(1)\\n\\t\"                              \\\n-         \"mvc 200(8,15), 88(1)\\n\\t\"                              \\\n-         \"lg 1, 0(1)\\n\\t\"                                        \\\n-         VALGRIND_CALL_NOREDIR_R1                                \\\n-         \"lgr %0, 2\\n\\t\"                                         \\\n-         \"aghi 15,208\\n\\t\"                                       \\\n-         VALGRIND_CFI_EPILOGUE                                   \\\n-         : \/*out*\/   \"=d\" (_res)                                 \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER           \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS,\"6\",\"7\" \\\n-      );                                                         \\\n-      lval = (__typeof__(lval)) _res;                            \\\n-   } while (0)\n-\n-#define CALL_FN_W_12W(lval, orig, arg1, arg2, arg3, arg4, arg5,  \\\n-                     arg6, arg7 ,arg8, arg9, arg10, arg11, arg12)\\\n-   do {                                                          \\\n-      volatile OrigFn        _orig = (orig);                     \\\n-      volatile unsigned long _argvec[13];                        \\\n-      volatile unsigned long _res;                               \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                  \\\n-      _argvec[1] = (unsigned long)arg1;                          \\\n-      _argvec[2] = (unsigned long)arg2;                          \\\n-      _argvec[3] = (unsigned long)arg3;                          \\\n-      _argvec[4] = (unsigned long)arg4;                          \\\n-      _argvec[5] = (unsigned long)arg5;                          \\\n-      _argvec[6] = (unsigned long)arg6;                          \\\n-      _argvec[7] = (unsigned long)arg7;                          \\\n-      _argvec[8] = (unsigned long)arg8;                          \\\n-      _argvec[9] = (unsigned long)arg9;                          \\\n-      _argvec[10] = (unsigned long)arg10;                        \\\n-      _argvec[11] = (unsigned long)arg11;                        \\\n-      _argvec[12] = (unsigned long)arg12;                        \\\n-      __asm__ volatile(                                          \\\n-         VALGRIND_CFI_PROLOGUE                                   \\\n-         \"aghi 15,-216\\n\\t\"                                      \\\n-         \"lg 2, 8(1)\\n\\t\"                                        \\\n-         \"lg 3,16(1)\\n\\t\"                                        \\\n-         \"lg 4,24(1)\\n\\t\"                                        \\\n-         \"lg 5,32(1)\\n\\t\"                                        \\\n-         \"lg 6,40(1)\\n\\t\"                                        \\\n-         \"mvc 160(8,15), 48(1)\\n\\t\"                              \\\n-         \"mvc 168(8,15), 56(1)\\n\\t\"                              \\\n-         \"mvc 176(8,15), 64(1)\\n\\t\"                              \\\n-         \"mvc 184(8,15), 72(1)\\n\\t\"                              \\\n-         \"mvc 192(8,15), 80(1)\\n\\t\"                              \\\n-         \"mvc 200(8,15), 88(1)\\n\\t\"                              \\\n-         \"mvc 208(8,15), 96(1)\\n\\t\"                              \\\n-         \"lg 1, 0(1)\\n\\t\"                                        \\\n-         VALGRIND_CALL_NOREDIR_R1                                \\\n-         \"lgr %0, 2\\n\\t\"                                         \\\n-         \"aghi 15,216\\n\\t\"                                       \\\n-         VALGRIND_CFI_EPILOGUE                                   \\\n-         : \/*out*\/   \"=d\" (_res)                                 \\\n-         : \/*in*\/    \"a\" (&_argvec[0]) __FRAME_POINTER           \\\n-         : \/*trash*\/ \"cc\", \"memory\", __CALLER_SAVED_REGS,\"6\",\"7\" \\\n-      );                                                         \\\n-      lval = (__typeof__(lval)) _res;                            \\\n-   } while (0)\n-\n-\n-#endif \/* PLAT_s390x_linux *\/\n-\n-\/* ------------------------- mips32-linux ----------------------- *\/\n-\n-#if defined(PLAT_mips32_linux)\n-\n-\/* These regs are trashed by the hidden call. *\/\n-#define __CALLER_SAVED_REGS \"$2\", \"$3\", \"$4\", \"$5\", \"$6\",       \\\n-\"$7\", \"$8\", \"$9\", \"$10\", \"$11\", \"$12\", \"$13\", \"$14\", \"$15\", \"$24\", \\\n-\"$25\", \"$31\"\n-\n-\/* These CALL_FN_ macros assume that on mips-linux, sizeof(unsigned\n-   long) == 4. *\/\n-\n-#define CALL_FN_W_v(lval, orig)                                   \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[1];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      __asm__ volatile(                                           \\\n-         \"subu $29, $29, 8 \\n\\t\"                                  \\\n-         \"sw $28, 0($29) \\n\\t\"                                    \\\n-         \"sw $31, 4($29) \\n\\t\"                                    \\\n-         \"subu $29, $29, 16 \\n\\t\"                                 \\\n-         \"lw $25, 0(%1) \\n\\t\"  \/* target->t9 *\/                   \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"addu $29, $29, 16\\n\\t\"                                  \\\n-         \"lw $28, 0($29) \\n\\t\"                                    \\\n-         \"lw $31, 4($29) \\n\\t\"                                    \\\n-         \"addu $29, $29, 8 \\n\\t\"                                  \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_W(lval, orig, arg1)                             \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-     volatile unsigned long _argvec[2];                           \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      __asm__ volatile(                                           \\\n-         \"subu $29, $29, 8 \\n\\t\"                                  \\\n-         \"sw $28, 0($29) \\n\\t\"                                    \\\n-         \"sw $31, 4($29) \\n\\t\"                                    \\\n-         \"subu $29, $29, 16 \\n\\t\"                                 \\\n-         \"lw $4, 4(%1) \\n\\t\"   \/* arg1*\/                          \\\n-         \"lw $25, 0(%1) \\n\\t\"  \/* target->t9 *\/                   \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"addu $29, $29, 16 \\n\\t\"                                 \\\n-         \"lw $28, 0($29) \\n\\t\"                                    \\\n-         \"lw $31, 4($29) \\n\\t\"                                    \\\n-         \"addu $29, $29, 8 \\n\\t\"                                  \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\",  __CALLER_SAVED_REGS               \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WW(lval, orig, arg1,arg2)                       \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[3];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      __asm__ volatile(                                           \\\n-         \"subu $29, $29, 8 \\n\\t\"                                  \\\n-         \"sw $28, 0($29) \\n\\t\"                                    \\\n-         \"sw $31, 4($29) \\n\\t\"                                    \\\n-         \"subu $29, $29, 16 \\n\\t\"                                 \\\n-         \"lw $4, 4(%1) \\n\\t\"                                      \\\n-         \"lw $5, 8(%1) \\n\\t\"                                      \\\n-         \"lw $25, 0(%1) \\n\\t\"  \/* target->t9 *\/                   \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"addu $29, $29, 16 \\n\\t\"                                 \\\n-         \"lw $28, 0($29) \\n\\t\"                                    \\\n-         \"lw $31, 4($29) \\n\\t\"                                    \\\n-         \"addu $29, $29, 8 \\n\\t\"                                  \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WWW(lval, orig, arg1,arg2,arg3)                 \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[4];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      __asm__ volatile(                                           \\\n-         \"subu $29, $29, 8 \\n\\t\"                                  \\\n-         \"sw $28, 0($29) \\n\\t\"                                    \\\n-         \"sw $31, 4($29) \\n\\t\"                                    \\\n-         \"subu $29, $29, 16 \\n\\t\"                                 \\\n-         \"lw $4, 4(%1) \\n\\t\"                                      \\\n-         \"lw $5, 8(%1) \\n\\t\"                                      \\\n-         \"lw $6, 12(%1) \\n\\t\"                                     \\\n-         \"lw $25, 0(%1) \\n\\t\"  \/* target->t9 *\/                   \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"addu $29, $29, 16 \\n\\t\"                                 \\\n-         \"lw $28, 0($29) \\n\\t\"                                    \\\n-         \"lw $31, 4($29) \\n\\t\"                                    \\\n-         \"addu $29, $29, 8 \\n\\t\"                                  \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_WWWW(lval, orig, arg1,arg2,arg3,arg4)           \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[5];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      __asm__ volatile(                                           \\\n-         \"subu $29, $29, 8 \\n\\t\"                                  \\\n-         \"sw $28, 0($29) \\n\\t\"                                    \\\n-         \"sw $31, 4($29) \\n\\t\"                                    \\\n-         \"subu $29, $29, 16 \\n\\t\"                                 \\\n-         \"lw $4, 4(%1) \\n\\t\"                                      \\\n-         \"lw $5, 8(%1) \\n\\t\"                                      \\\n-         \"lw $6, 12(%1) \\n\\t\"                                     \\\n-         \"lw $7, 16(%1) \\n\\t\"                                     \\\n-         \"lw $25, 0(%1) \\n\\t\"  \/* target->t9 *\/                   \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"addu $29, $29, 16 \\n\\t\"                                 \\\n-         \"lw $28, 0($29) \\n\\t\"                                    \\\n-         \"lw $31, 4($29) \\n\\t\"                                    \\\n-         \"addu $29, $29, 8 \\n\\t\"                                  \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_5W(lval, orig, arg1,arg2,arg3,arg4,arg5)        \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[6];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      __asm__ volatile(                                           \\\n-         \"subu $29, $29, 8 \\n\\t\"                                  \\\n-         \"sw $28, 0($29) \\n\\t\"                                    \\\n-         \"sw $31, 4($29) \\n\\t\"                                    \\\n-         \"lw $4, 20(%1) \\n\\t\"                                     \\\n-         \"subu $29, $29, 24\\n\\t\"                                  \\\n-         \"sw $4, 16($29) \\n\\t\"                                    \\\n-         \"lw $4, 4(%1) \\n\\t\"                                      \\\n-         \"lw $5, 8(%1) \\n\\t\"                                      \\\n-         \"lw $6, 12(%1) \\n\\t\"                                     \\\n-         \"lw $7, 16(%1) \\n\\t\"                                     \\\n-         \"lw $25, 0(%1) \\n\\t\"  \/* target->t9 *\/                   \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"addu $29, $29, 24 \\n\\t\"                                 \\\n-         \"lw $28, 0($29) \\n\\t\"                                    \\\n-         \"lw $31, 4($29) \\n\\t\"                                    \\\n-         \"addu $29, $29, 8 \\n\\t\"                                  \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-#define CALL_FN_W_6W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6)   \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[7];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      __asm__ volatile(                                           \\\n-         \"subu $29, $29, 8 \\n\\t\"                                  \\\n-         \"sw $28, 0($29) \\n\\t\"                                    \\\n-         \"sw $31, 4($29) \\n\\t\"                                    \\\n-         \"lw $4, 20(%1) \\n\\t\"                                     \\\n-         \"subu $29, $29, 32\\n\\t\"                                  \\\n-         \"sw $4, 16($29) \\n\\t\"                                    \\\n-         \"lw $4, 24(%1) \\n\\t\"                                     \\\n-         \"nop\\n\\t\"                                                \\\n-         \"sw $4, 20($29) \\n\\t\"                                    \\\n-         \"lw $4, 4(%1) \\n\\t\"                                      \\\n-         \"lw $5, 8(%1) \\n\\t\"                                      \\\n-         \"lw $6, 12(%1) \\n\\t\"                                     \\\n-         \"lw $7, 16(%1) \\n\\t\"                                     \\\n-         \"lw $25, 0(%1) \\n\\t\"  \/* target->t9 *\/                   \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"addu $29, $29, 32 \\n\\t\"                                 \\\n-         \"lw $28, 0($29) \\n\\t\"                                    \\\n-         \"lw $31, 4($29) \\n\\t\"                                    \\\n-         \"addu $29, $29, 8 \\n\\t\"                                  \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_7W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7)                            \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[8];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      __asm__ volatile(                                           \\\n-         \"subu $29, $29, 8 \\n\\t\"                                  \\\n-         \"sw $28, 0($29) \\n\\t\"                                    \\\n-         \"sw $31, 4($29) \\n\\t\"                                    \\\n-         \"lw $4, 20(%1) \\n\\t\"                                     \\\n-         \"subu $29, $29, 32\\n\\t\"                                  \\\n-         \"sw $4, 16($29) \\n\\t\"                                    \\\n-         \"lw $4, 24(%1) \\n\\t\"                                     \\\n-         \"sw $4, 20($29) \\n\\t\"                                    \\\n-         \"lw $4, 28(%1) \\n\\t\"                                     \\\n-         \"sw $4, 24($29) \\n\\t\"                                    \\\n-         \"lw $4, 4(%1) \\n\\t\"                                      \\\n-         \"lw $5, 8(%1) \\n\\t\"                                      \\\n-         \"lw $6, 12(%1) \\n\\t\"                                     \\\n-         \"lw $7, 16(%1) \\n\\t\"                                     \\\n-         \"lw $25, 0(%1) \\n\\t\"  \/* target->t9 *\/                   \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"addu $29, $29, 32 \\n\\t\"                                 \\\n-         \"lw $28, 0($29) \\n\\t\"                                    \\\n-         \"lw $31, 4($29) \\n\\t\"                                    \\\n-         \"addu $29, $29, 8 \\n\\t\"                                  \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_8W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7,arg8)                       \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[9];                          \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      __asm__ volatile(                                           \\\n-         \"subu $29, $29, 8 \\n\\t\"                                  \\\n-         \"sw $28, 0($29) \\n\\t\"                                    \\\n-         \"sw $31, 4($29) \\n\\t\"                                    \\\n-         \"lw $4, 20(%1) \\n\\t\"                                     \\\n-         \"subu $29, $29, 40\\n\\t\"                                  \\\n-         \"sw $4, 16($29) \\n\\t\"                                    \\\n-         \"lw $4, 24(%1) \\n\\t\"                                     \\\n-         \"sw $4, 20($29) \\n\\t\"                                    \\\n-         \"lw $4, 28(%1) \\n\\t\"                                     \\\n-         \"sw $4, 24($29) \\n\\t\"                                    \\\n-         \"lw $4, 32(%1) \\n\\t\"                                     \\\n-         \"sw $4, 28($29) \\n\\t\"                                    \\\n-         \"lw $4, 4(%1) \\n\\t\"                                      \\\n-         \"lw $5, 8(%1) \\n\\t\"                                      \\\n-         \"lw $6, 12(%1) \\n\\t\"                                     \\\n-         \"lw $7, 16(%1) \\n\\t\"                                     \\\n-         \"lw $25, 0(%1) \\n\\t\"  \/* target->t9 *\/                   \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"addu $29, $29, 40 \\n\\t\"                                 \\\n-         \"lw $28, 0($29) \\n\\t\"                                    \\\n-         \"lw $31, 4($29) \\n\\t\"                                    \\\n-         \"addu $29, $29, 8 \\n\\t\"                                  \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_9W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7,arg8,arg9)                  \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[10];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      _argvec[9] = (unsigned long)(arg9);                         \\\n-      __asm__ volatile(                                           \\\n-         \"subu $29, $29, 8 \\n\\t\"                                  \\\n-         \"sw $28, 0($29) \\n\\t\"                                    \\\n-         \"sw $31, 4($29) \\n\\t\"                                    \\\n-         \"lw $4, 20(%1) \\n\\t\"                                     \\\n-         \"subu $29, $29, 40\\n\\t\"                                  \\\n-         \"sw $4, 16($29) \\n\\t\"                                    \\\n-         \"lw $4, 24(%1) \\n\\t\"                                     \\\n-         \"sw $4, 20($29) \\n\\t\"                                    \\\n-         \"lw $4, 28(%1) \\n\\t\"                                     \\\n-         \"sw $4, 24($29) \\n\\t\"                                    \\\n-         \"lw $4, 32(%1) \\n\\t\"                                     \\\n-         \"sw $4, 28($29) \\n\\t\"                                    \\\n-         \"lw $4, 36(%1) \\n\\t\"                                     \\\n-         \"sw $4, 32($29) \\n\\t\"                                    \\\n-         \"lw $4, 4(%1) \\n\\t\"                                      \\\n-         \"lw $5, 8(%1) \\n\\t\"                                      \\\n-         \"lw $6, 12(%1) \\n\\t\"                                     \\\n-         \"lw $7, 16(%1) \\n\\t\"                                     \\\n-         \"lw $25, 0(%1) \\n\\t\"  \/* target->t9 *\/                   \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"addu $29, $29, 40 \\n\\t\"                                 \\\n-         \"lw $28, 0($29) \\n\\t\"                                    \\\n-         \"lw $31, 4($29) \\n\\t\"                                    \\\n-         \"addu $29, $29, 8 \\n\\t\"                                  \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_10W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,  \\\n-                                  arg7,arg8,arg9,arg10)           \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[11];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      _argvec[9] = (unsigned long)(arg9);                         \\\n-      _argvec[10] = (unsigned long)(arg10);                       \\\n-      __asm__ volatile(                                           \\\n-         \"subu $29, $29, 8 \\n\\t\"                                  \\\n-         \"sw $28, 0($29) \\n\\t\"                                    \\\n-         \"sw $31, 4($29) \\n\\t\"                                    \\\n-         \"lw $4, 20(%1) \\n\\t\"                                     \\\n-         \"subu $29, $29, 48\\n\\t\"                                  \\\n-         \"sw $4, 16($29) \\n\\t\"                                    \\\n-         \"lw $4, 24(%1) \\n\\t\"                                     \\\n-         \"sw $4, 20($29) \\n\\t\"                                    \\\n-         \"lw $4, 28(%1) \\n\\t\"                                     \\\n-         \"sw $4, 24($29) \\n\\t\"                                    \\\n-         \"lw $4, 32(%1) \\n\\t\"                                     \\\n-         \"sw $4, 28($29) \\n\\t\"                                    \\\n-         \"lw $4, 36(%1) \\n\\t\"                                     \\\n-         \"sw $4, 32($29) \\n\\t\"                                    \\\n-         \"lw $4, 40(%1) \\n\\t\"                                     \\\n-         \"sw $4, 36($29) \\n\\t\"                                    \\\n-         \"lw $4, 4(%1) \\n\\t\"                                      \\\n-         \"lw $5, 8(%1) \\n\\t\"                                      \\\n-         \"lw $6, 12(%1) \\n\\t\"                                     \\\n-         \"lw $7, 16(%1) \\n\\t\"                                     \\\n-         \"lw $25, 0(%1) \\n\\t\"  \/* target->t9 *\/                   \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"addu $29, $29, 48 \\n\\t\"                                 \\\n-         \"lw $28, 0($29) \\n\\t\"                                    \\\n-         \"lw $31, 4($29) \\n\\t\"                                    \\\n-         \"addu $29, $29, 8 \\n\\t\"                                  \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_11W(lval, orig, arg1,arg2,arg3,arg4,arg5,       \\\n-                                  arg6,arg7,arg8,arg9,arg10,      \\\n-                                  arg11)                          \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[12];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      _argvec[9] = (unsigned long)(arg9);                         \\\n-      _argvec[10] = (unsigned long)(arg10);                       \\\n-      _argvec[11] = (unsigned long)(arg11);                       \\\n-      __asm__ volatile(                                           \\\n-         \"subu $29, $29, 8 \\n\\t\"                                  \\\n-         \"sw $28, 0($29) \\n\\t\"                                    \\\n-         \"sw $31, 4($29) \\n\\t\"                                    \\\n-         \"lw $4, 20(%1) \\n\\t\"                                     \\\n-         \"subu $29, $29, 48\\n\\t\"                                  \\\n-         \"sw $4, 16($29) \\n\\t\"                                    \\\n-         \"lw $4, 24(%1) \\n\\t\"                                     \\\n-         \"sw $4, 20($29) \\n\\t\"                                    \\\n-         \"lw $4, 28(%1) \\n\\t\"                                     \\\n-         \"sw $4, 24($29) \\n\\t\"                                    \\\n-         \"lw $4, 32(%1) \\n\\t\"                                     \\\n-         \"sw $4, 28($29) \\n\\t\"                                    \\\n-         \"lw $4, 36(%1) \\n\\t\"                                     \\\n-         \"sw $4, 32($29) \\n\\t\"                                    \\\n-         \"lw $4, 40(%1) \\n\\t\"                                     \\\n-         \"sw $4, 36($29) \\n\\t\"                                    \\\n-         \"lw $4, 44(%1) \\n\\t\"                                     \\\n-         \"sw $4, 40($29) \\n\\t\"                                    \\\n-         \"lw $4, 4(%1) \\n\\t\"                                      \\\n-         \"lw $5, 8(%1) \\n\\t\"                                      \\\n-         \"lw $6, 12(%1) \\n\\t\"                                     \\\n-         \"lw $7, 16(%1) \\n\\t\"                                     \\\n-         \"lw $25, 0(%1) \\n\\t\"  \/* target->t9 *\/                   \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"addu $29, $29, 48 \\n\\t\"                                 \\\n-         \"lw $28, 0($29) \\n\\t\"                                    \\\n-         \"lw $31, 4($29) \\n\\t\"                                    \\\n-         \"addu $29, $29, 8 \\n\\t\"                                  \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#define CALL_FN_W_12W(lval, orig, arg1,arg2,arg3,arg4,arg5,       \\\n-                                  arg6,arg7,arg8,arg9,arg10,      \\\n-                                  arg11,arg12)                    \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long _argvec[13];                         \\\n-      volatile unsigned long _res;                                \\\n-      _argvec[0] = (unsigned long)_orig.nraddr;                   \\\n-      _argvec[1] = (unsigned long)(arg1);                         \\\n-      _argvec[2] = (unsigned long)(arg2);                         \\\n-      _argvec[3] = (unsigned long)(arg3);                         \\\n-      _argvec[4] = (unsigned long)(arg4);                         \\\n-      _argvec[5] = (unsigned long)(arg5);                         \\\n-      _argvec[6] = (unsigned long)(arg6);                         \\\n-      _argvec[7] = (unsigned long)(arg7);                         \\\n-      _argvec[8] = (unsigned long)(arg8);                         \\\n-      _argvec[9] = (unsigned long)(arg9);                         \\\n-      _argvec[10] = (unsigned long)(arg10);                       \\\n-      _argvec[11] = (unsigned long)(arg11);                       \\\n-      _argvec[12] = (unsigned long)(arg12);                       \\\n-      __asm__ volatile(                                           \\\n-         \"subu $29, $29, 8 \\n\\t\"                                  \\\n-         \"sw $28, 0($29) \\n\\t\"                                    \\\n-         \"sw $31, 4($29) \\n\\t\"                                    \\\n-         \"lw $4, 20(%1) \\n\\t\"                                     \\\n-         \"subu $29, $29, 56\\n\\t\"                                  \\\n-         \"sw $4, 16($29) \\n\\t\"                                    \\\n-         \"lw $4, 24(%1) \\n\\t\"                                     \\\n-         \"sw $4, 20($29) \\n\\t\"                                    \\\n-         \"lw $4, 28(%1) \\n\\t\"                                     \\\n-         \"sw $4, 24($29) \\n\\t\"                                    \\\n-         \"lw $4, 32(%1) \\n\\t\"                                     \\\n-         \"sw $4, 28($29) \\n\\t\"                                    \\\n-         \"lw $4, 36(%1) \\n\\t\"                                     \\\n-         \"sw $4, 32($29) \\n\\t\"                                    \\\n-         \"lw $4, 40(%1) \\n\\t\"                                     \\\n-         \"sw $4, 36($29) \\n\\t\"                                    \\\n-         \"lw $4, 44(%1) \\n\\t\"                                     \\\n-         \"sw $4, 40($29) \\n\\t\"                                    \\\n-         \"lw $4, 48(%1) \\n\\t\"                                     \\\n-         \"sw $4, 44($29) \\n\\t\"                                    \\\n-         \"lw $4, 4(%1) \\n\\t\"                                      \\\n-         \"lw $5, 8(%1) \\n\\t\"                                      \\\n-         \"lw $6, 12(%1) \\n\\t\"                                     \\\n-         \"lw $7, 16(%1) \\n\\t\"                                     \\\n-         \"lw $25, 0(%1) \\n\\t\"  \/* target->t9 *\/                   \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"addu $29, $29, 56 \\n\\t\"                                 \\\n-         \"lw $28, 0($29) \\n\\t\"                                    \\\n-         \"lw $31, 4($29) \\n\\t\"                                    \\\n-         \"addu $29, $29, 8 \\n\\t\"                                  \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) _res;                             \\\n-   } while (0)\n-\n-#endif \/* PLAT_mips32_linux *\/\n-\n-\/* ------------------------- mips64-linux ------------------------- *\/\n-\n-#if defined(PLAT_mips64_linux)\n-\n-\/* These regs are trashed by the hidden call. *\/\n-#define __CALLER_SAVED_REGS \"$2\", \"$3\", \"$4\", \"$5\", \"$6\",       \\\n-\"$7\", \"$8\", \"$9\", \"$10\", \"$11\", \"$12\", \"$13\", \"$14\", \"$15\", \"$24\", \\\n-\"$25\", \"$31\"\n-\n-\/* These CALL_FN_ macros assume that on mips64-linux,\n-   sizeof(long long) == 8. *\/\n-\n-#define MIPS64_LONG2REG_CAST(x) ((long long)(long)x)\n-\n-#define CALL_FN_W_v(lval, orig)                                   \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long long _argvec[1];                     \\\n-      volatile unsigned long long _res;                           \\\n-      _argvec[0] = MIPS64_LONG2REG_CAST(_orig.nraddr);            \\\n-      __asm__ volatile(                                           \\\n-         \"ld $25, 0(%1)\\n\\t\"  \/* target->t9 *\/                    \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"0\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) (long)_res;                       \\\n-   } while (0)\n-\n-#define CALL_FN_W_W(lval, orig, arg1)                             \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long long _argvec[2];                     \\\n-      volatile unsigned long long  _res;                          \\\n-      _argvec[0] = MIPS64_LONG2REG_CAST(_orig.nraddr);            \\\n-      _argvec[1] = MIPS64_LONG2REG_CAST(arg1);                    \\\n-      __asm__ volatile(                                           \\\n-         \"ld $4, 8(%1)\\n\\t\"   \/* arg1*\/                           \\\n-         \"ld $25, 0(%1)\\n\\t\"  \/* target->t9 *\/                    \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) (long)_res;                       \\\n-   } while (0)\n-\n-#define CALL_FN_W_WW(lval, orig, arg1,arg2)                       \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long long _argvec[3];                     \\\n-      volatile unsigned long long _res;                           \\\n-      _argvec[0] = _orig.nraddr;                                  \\\n-      _argvec[1] = MIPS64_LONG2REG_CAST(arg1);                    \\\n-      _argvec[2] = MIPS64_LONG2REG_CAST(arg2);                    \\\n-      __asm__ volatile(                                           \\\n-         \"ld $4, 8(%1)\\n\\t\"                                       \\\n-         \"ld $5, 16(%1)\\n\\t\"                                      \\\n-         \"ld $25, 0(%1)\\n\\t\"  \/* target->t9 *\/                    \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) (long)_res;                       \\\n-   } while (0)\n-\n-\n-#define CALL_FN_W_WWW(lval, orig, arg1,arg2,arg3)                 \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long long _argvec[4];                     \\\n-      volatile unsigned long long _res;                           \\\n-      _argvec[0] = _orig.nraddr;                                  \\\n-      _argvec[1] = MIPS64_LONG2REG_CAST(arg1);                    \\\n-      _argvec[2] = MIPS64_LONG2REG_CAST(arg2);                    \\\n-      _argvec[3] = MIPS64_LONG2REG_CAST(arg3);                    \\\n-      __asm__ volatile(                                           \\\n-         \"ld $4, 8(%1)\\n\\t\"                                       \\\n-         \"ld $5, 16(%1)\\n\\t\"                                      \\\n-         \"ld $6, 24(%1)\\n\\t\"                                      \\\n-         \"ld $25, 0(%1)\\n\\t\"  \/* target->t9 *\/                    \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) (long)_res;                       \\\n-   } while (0)\n-\n-#define CALL_FN_W_WWWW(lval, orig, arg1,arg2,arg3,arg4)           \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long long _argvec[5];                     \\\n-      volatile unsigned long long _res;                           \\\n-      _argvec[0] = MIPS64_LONG2REG_CAST(_orig.nraddr);            \\\n-      _argvec[1] = MIPS64_LONG2REG_CAST(arg1);                    \\\n-      _argvec[2] = MIPS64_LONG2REG_CAST(arg2);                    \\\n-      _argvec[3] = MIPS64_LONG2REG_CAST(arg3);                    \\\n-      _argvec[4] = MIPS64_LONG2REG_CAST(arg4);                    \\\n-      __asm__ volatile(                                           \\\n-         \"ld $4, 8(%1)\\n\\t\"                                       \\\n-         \"ld $5, 16(%1)\\n\\t\"                                      \\\n-         \"ld $6, 24(%1)\\n\\t\"                                      \\\n-         \"ld $7, 32(%1)\\n\\t\"                                      \\\n-         \"ld $25, 0(%1)\\n\\t\"  \/* target->t9 *\/                    \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) (long)_res;                       \\\n-   } while (0)\n-\n-#define CALL_FN_W_5W(lval, orig, arg1,arg2,arg3,arg4,arg5)        \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long long _argvec[6];                     \\\n-      volatile unsigned long long _res;                           \\\n-      _argvec[0] = MIPS64_LONG2REG_CAST(_orig.nraddr);            \\\n-      _argvec[1] = MIPS64_LONG2REG_CAST(arg1);                    \\\n-      _argvec[2] = MIPS64_LONG2REG_CAST(arg2);                    \\\n-      _argvec[3] = MIPS64_LONG2REG_CAST(arg3);                    \\\n-      _argvec[4] = MIPS64_LONG2REG_CAST(arg4);                    \\\n-      _argvec[5] = MIPS64_LONG2REG_CAST(arg5);                    \\\n-      __asm__ volatile(                                           \\\n-         \"ld $4, 8(%1)\\n\\t\"                                       \\\n-         \"ld $5, 16(%1)\\n\\t\"                                      \\\n-         \"ld $6, 24(%1)\\n\\t\"                                      \\\n-         \"ld $7, 32(%1)\\n\\t\"                                      \\\n-         \"ld $8, 40(%1)\\n\\t\"                                      \\\n-         \"ld $25, 0(%1)\\n\\t\"  \/* target->t9 *\/                    \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) (long)_res;                       \\\n-   } while (0)\n-\n-#define CALL_FN_W_6W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6)   \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long long _argvec[7];                     \\\n-      volatile unsigned long long _res;                           \\\n-      _argvec[0] = MIPS64_LONG2REG_CAST(_orig.nraddr);            \\\n-      _argvec[1] = MIPS64_LONG2REG_CAST(arg1);                    \\\n-      _argvec[2] = MIPS64_LONG2REG_CAST(arg2);                    \\\n-      _argvec[3] = MIPS64_LONG2REG_CAST(arg3);                    \\\n-      _argvec[4] = MIPS64_LONG2REG_CAST(arg4);                    \\\n-      _argvec[5] = MIPS64_LONG2REG_CAST(arg5);                    \\\n-      _argvec[6] = MIPS64_LONG2REG_CAST(arg6);                    \\\n-      __asm__ volatile(                                           \\\n-         \"ld $4, 8(%1)\\n\\t\"                                       \\\n-         \"ld $5, 16(%1)\\n\\t\"                                      \\\n-         \"ld $6, 24(%1)\\n\\t\"                                      \\\n-         \"ld $7, 32(%1)\\n\\t\"                                      \\\n-         \"ld $8, 40(%1)\\n\\t\"                                      \\\n-         \"ld $9, 48(%1)\\n\\t\"                                      \\\n-         \"ld $25, 0(%1)\\n\\t\"  \/* target->t9 *\/                    \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) (long)_res;                       \\\n-   } while (0)\n-\n-#define CALL_FN_W_7W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7)                            \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long long _argvec[8];                     \\\n-      volatile unsigned long long _res;                           \\\n-      _argvec[0] = MIPS64_LONG2REG_CAST(_orig.nraddr);            \\\n-      _argvec[1] = MIPS64_LONG2REG_CAST(arg1);                    \\\n-      _argvec[2] = MIPS64_LONG2REG_CAST(arg2);                    \\\n-      _argvec[3] = MIPS64_LONG2REG_CAST(arg3);                    \\\n-      _argvec[4] = MIPS64_LONG2REG_CAST(arg4);                    \\\n-      _argvec[5] = MIPS64_LONG2REG_CAST(arg5);                    \\\n-      _argvec[6] = MIPS64_LONG2REG_CAST(arg6);                    \\\n-      _argvec[7] = MIPS64_LONG2REG_CAST(arg7);                    \\\n-      __asm__ volatile(                                           \\\n-         \"ld $4, 8(%1)\\n\\t\"                                       \\\n-         \"ld $5, 16(%1)\\n\\t\"                                      \\\n-         \"ld $6, 24(%1)\\n\\t\"                                      \\\n-         \"ld $7, 32(%1)\\n\\t\"                                      \\\n-         \"ld $8, 40(%1)\\n\\t\"                                      \\\n-         \"ld $9, 48(%1)\\n\\t\"                                      \\\n-         \"ld $10, 56(%1)\\n\\t\"                                     \\\n-         \"ld $25, 0(%1) \\n\\t\"  \/* target->t9 *\/                   \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) (long)_res;                       \\\n-   } while (0)\n-\n-#define CALL_FN_W_8W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7,arg8)                       \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long long _argvec[9];                     \\\n-      volatile unsigned long long _res;                           \\\n-      _argvec[0] = MIPS64_LONG2REG_CAST(_orig.nraddr);            \\\n-      _argvec[1] = MIPS64_LONG2REG_CAST(arg1);                    \\\n-      _argvec[2] = MIPS64_LONG2REG_CAST(arg2);                    \\\n-      _argvec[3] = MIPS64_LONG2REG_CAST(arg3);                    \\\n-      _argvec[4] = MIPS64_LONG2REG_CAST(arg4);                    \\\n-      _argvec[5] = MIPS64_LONG2REG_CAST(arg5);                    \\\n-      _argvec[6] = MIPS64_LONG2REG_CAST(arg6);                    \\\n-      _argvec[7] = MIPS64_LONG2REG_CAST(arg7);                    \\\n-      _argvec[8] = MIPS64_LONG2REG_CAST(arg8);                    \\\n-      __asm__ volatile(                                           \\\n-         \"ld $4, 8(%1)\\n\\t\"                                       \\\n-         \"ld $5, 16(%1)\\n\\t\"                                      \\\n-         \"ld $6, 24(%1)\\n\\t\"                                      \\\n-         \"ld $7, 32(%1)\\n\\t\"                                      \\\n-         \"ld $8, 40(%1)\\n\\t\"                                      \\\n-         \"ld $9, 48(%1)\\n\\t\"                                      \\\n-         \"ld $10, 56(%1)\\n\\t\"                                     \\\n-         \"ld $11, 64(%1)\\n\\t\"                                     \\\n-         \"ld $25, 0(%1) \\n\\t\"  \/* target->t9 *\/                   \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) (long)_res;                       \\\n-   } while (0)\n-\n-#define CALL_FN_W_9W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,   \\\n-                                 arg7,arg8,arg9)                  \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long long _argvec[10];                    \\\n-      volatile unsigned long long _res;                           \\\n-      _argvec[0] = MIPS64_LONG2REG_CAST(_orig.nraddr);            \\\n-      _argvec[1] = MIPS64_LONG2REG_CAST(arg1);                    \\\n-      _argvec[2] = MIPS64_LONG2REG_CAST(arg2);                    \\\n-      _argvec[3] = MIPS64_LONG2REG_CAST(arg3);                    \\\n-      _argvec[4] = MIPS64_LONG2REG_CAST(arg4);                    \\\n-      _argvec[5] = MIPS64_LONG2REG_CAST(arg5);                    \\\n-      _argvec[6] = MIPS64_LONG2REG_CAST(arg6);                    \\\n-      _argvec[7] = MIPS64_LONG2REG_CAST(arg7);                    \\\n-      _argvec[8] = MIPS64_LONG2REG_CAST(arg8);                    \\\n-      _argvec[9] = MIPS64_LONG2REG_CAST(arg9);                    \\\n-      __asm__ volatile(                                           \\\n-         \"dsubu $29, $29, 8\\n\\t\"                                  \\\n-         \"ld $4, 72(%1)\\n\\t\"                                      \\\n-         \"sd $4, 0($29)\\n\\t\"                                      \\\n-         \"ld $4, 8(%1)\\n\\t\"                                       \\\n-         \"ld $5, 16(%1)\\n\\t\"                                      \\\n-         \"ld $6, 24(%1)\\n\\t\"                                      \\\n-         \"ld $7, 32(%1)\\n\\t\"                                      \\\n-         \"ld $8, 40(%1)\\n\\t\"                                      \\\n-         \"ld $9, 48(%1)\\n\\t\"                                      \\\n-         \"ld $10, 56(%1)\\n\\t\"                                     \\\n-         \"ld $11, 64(%1)\\n\\t\"                                     \\\n-         \"ld $25, 0(%1)\\n\\t\"  \/* target->t9 *\/                    \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"daddu $29, $29, 8\\n\\t\"                                  \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) (long)_res;                       \\\n-   } while (0)\n-\n-#define CALL_FN_W_10W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6,  \\\n-                                  arg7,arg8,arg9,arg10)           \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long long _argvec[11];                    \\\n-      volatile unsigned long long _res;                           \\\n-      _argvec[0] = MIPS64_LONG2REG_CAST(_orig.nraddr);            \\\n-      _argvec[1] = MIPS64_LONG2REG_CAST(arg1);                    \\\n-      _argvec[2] = MIPS64_LONG2REG_CAST(arg2);                    \\\n-      _argvec[3] = MIPS64_LONG2REG_CAST(arg3);                    \\\n-      _argvec[4] = MIPS64_LONG2REG_CAST(arg4);                    \\\n-      _argvec[5] = MIPS64_LONG2REG_CAST(arg5);                    \\\n-      _argvec[6] = MIPS64_LONG2REG_CAST(arg6);                    \\\n-      _argvec[7] = MIPS64_LONG2REG_CAST(arg7);                    \\\n-      _argvec[8] = MIPS64_LONG2REG_CAST(arg8);                    \\\n-      _argvec[9] = MIPS64_LONG2REG_CAST(arg9);                    \\\n-      _argvec[10] = MIPS64_LONG2REG_CAST(arg10);                  \\\n-      __asm__ volatile(                                           \\\n-         \"dsubu $29, $29, 16\\n\\t\"                                 \\\n-         \"ld $4, 72(%1)\\n\\t\"                                      \\\n-         \"sd $4, 0($29)\\n\\t\"                                      \\\n-         \"ld $4, 80(%1)\\n\\t\"                                      \\\n-         \"sd $4, 8($29)\\n\\t\"                                      \\\n-         \"ld $4, 8(%1)\\n\\t\"                                       \\\n-         \"ld $5, 16(%1)\\n\\t\"                                      \\\n-         \"ld $6, 24(%1)\\n\\t\"                                      \\\n-         \"ld $7, 32(%1)\\n\\t\"                                      \\\n-         \"ld $8, 40(%1)\\n\\t\"                                      \\\n-         \"ld $9, 48(%1)\\n\\t\"                                      \\\n-         \"ld $10, 56(%1)\\n\\t\"                                     \\\n-         \"ld $11, 64(%1)\\n\\t\"                                     \\\n-         \"ld $25, 0(%1)\\n\\t\"  \/* target->t9 *\/                    \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"daddu $29, $29, 16\\n\\t\"                                 \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) (long)_res;                       \\\n-   } while (0)\n-\n-#define CALL_FN_W_11W(lval, orig, arg1,arg2,arg3,arg4,arg5,       \\\n-                                  arg6,arg7,arg8,arg9,arg10,      \\\n-                                  arg11)                          \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long long _argvec[12];                    \\\n-      volatile unsigned long long _res;                           \\\n-      _argvec[0] = MIPS64_LONG2REG_CAST(_orig.nraddr);            \\\n-      _argvec[1] = MIPS64_LONG2REG_CAST(arg1);                    \\\n-      _argvec[2] = MIPS64_LONG2REG_CAST(arg2);                    \\\n-      _argvec[3] = MIPS64_LONG2REG_CAST(arg3);                    \\\n-      _argvec[4] = MIPS64_LONG2REG_CAST(arg4);                    \\\n-      _argvec[5] = MIPS64_LONG2REG_CAST(arg5);                    \\\n-      _argvec[6] = MIPS64_LONG2REG_CAST(arg6);                    \\\n-      _argvec[7] = MIPS64_LONG2REG_CAST(arg7);                    \\\n-      _argvec[8] = MIPS64_LONG2REG_CAST(arg8);                    \\\n-      _argvec[9] = MIPS64_LONG2REG_CAST(arg9);                    \\\n-      _argvec[10] = MIPS64_LONG2REG_CAST(arg10);                  \\\n-      _argvec[11] = MIPS64_LONG2REG_CAST(arg11);                  \\\n-      __asm__ volatile(                                           \\\n-         \"dsubu $29, $29, 24\\n\\t\"                                 \\\n-         \"ld $4, 72(%1)\\n\\t\"                                      \\\n-         \"sd $4, 0($29)\\n\\t\"                                      \\\n-         \"ld $4, 80(%1)\\n\\t\"                                      \\\n-         \"sd $4, 8($29)\\n\\t\"                                      \\\n-         \"ld $4, 88(%1)\\n\\t\"                                      \\\n-         \"sd $4, 16($29)\\n\\t\"                                     \\\n-         \"ld $4, 8(%1)\\n\\t\"                                       \\\n-         \"ld $5, 16(%1)\\n\\t\"                                      \\\n-         \"ld $6, 24(%1)\\n\\t\"                                      \\\n-         \"ld $7, 32(%1)\\n\\t\"                                      \\\n-         \"ld $8, 40(%1)\\n\\t\"                                      \\\n-         \"ld $9, 48(%1)\\n\\t\"                                      \\\n-         \"ld $10, 56(%1)\\n\\t\"                                     \\\n-         \"ld $11, 64(%1)\\n\\t\"                                     \\\n-         \"ld $25, 0(%1)\\n\\t\"  \/* target->t9 *\/                    \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"daddu $29, $29, 24\\n\\t\"                                 \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) (long)_res;                       \\\n-   } while (0)\n-\n-#define CALL_FN_W_12W(lval, orig, arg1,arg2,arg3,arg4,arg5,       \\\n-                                  arg6,arg7,arg8,arg9,arg10,      \\\n-                                  arg11,arg12)                    \\\n-   do {                                                           \\\n-      volatile OrigFn        _orig = (orig);                      \\\n-      volatile unsigned long long _argvec[13];                    \\\n-      volatile unsigned long long _res;                           \\\n-      _argvec[0] = MIPS64_LONG2REG_CAST(_orig.nraddr);            \\\n-      _argvec[1] = MIPS64_LONG2REG_CAST(arg1);                    \\\n-      _argvec[2] = MIPS64_LONG2REG_CAST(arg2);                    \\\n-      _argvec[3] = MIPS64_LONG2REG_CAST(arg3);                    \\\n-      _argvec[4] = MIPS64_LONG2REG_CAST(arg4);                    \\\n-      _argvec[5] = MIPS64_LONG2REG_CAST(arg5);                    \\\n-      _argvec[6] = MIPS64_LONG2REG_CAST(arg6);                    \\\n-      _argvec[7] = MIPS64_LONG2REG_CAST(arg7);                    \\\n-      _argvec[8] = MIPS64_LONG2REG_CAST(arg8);                    \\\n-      _argvec[9] = MIPS64_LONG2REG_CAST(arg9);                    \\\n-      _argvec[10] = MIPS64_LONG2REG_CAST(arg10);                  \\\n-      _argvec[11] = MIPS64_LONG2REG_CAST(arg11);                  \\\n-      _argvec[12] = MIPS64_LONG2REG_CAST(arg12);                  \\\n-      __asm__ volatile(                                           \\\n-         \"dsubu $29, $29, 32\\n\\t\"                                 \\\n-         \"ld $4, 72(%1)\\n\\t\"                                      \\\n-         \"sd $4, 0($29)\\n\\t\"                                      \\\n-         \"ld $4, 80(%1)\\n\\t\"                                      \\\n-         \"sd $4, 8($29)\\n\\t\"                                      \\\n-         \"ld $4, 88(%1)\\n\\t\"                                      \\\n-         \"sd $4, 16($29)\\n\\t\"                                     \\\n-         \"ld $4, 96(%1)\\n\\t\"                                      \\\n-         \"sd $4, 24($29)\\n\\t\"                                     \\\n-         \"ld $4, 8(%1)\\n\\t\"                                       \\\n-         \"ld $5, 16(%1)\\n\\t\"                                      \\\n-         \"ld $6, 24(%1)\\n\\t\"                                      \\\n-         \"ld $7, 32(%1)\\n\\t\"                                      \\\n-         \"ld $8, 40(%1)\\n\\t\"                                      \\\n-         \"ld $9, 48(%1)\\n\\t\"                                      \\\n-         \"ld $10, 56(%1)\\n\\t\"                                     \\\n-         \"ld $11, 64(%1)\\n\\t\"                                     \\\n-         \"ld $25, 0(%1)\\n\\t\"  \/* target->t9 *\/                    \\\n-         VALGRIND_CALL_NOREDIR_T9                                 \\\n-         \"daddu $29, $29, 32\\n\\t\"                                 \\\n-         \"move %0, $2\\n\"                                          \\\n-         : \/*out*\/   \"=r\" (_res)                                  \\\n-         : \/*in*\/    \"r\" (&_argvec[0])                            \\\n-         : \/*trash*\/ \"memory\", __CALLER_SAVED_REGS                \\\n-      );                                                          \\\n-      lval = (__typeof__(lval)) (long)_res;                       \\\n-   } while (0)\n-\n-#endif \/* PLAT_mips64_linux *\/\n-\n-\/* ------------------------------------------------------------------ *\/\n-\/* ARCHITECTURE INDEPENDENT MACROS for CLIENT REQUESTS.               *\/\n-\/*                                                                    *\/\n-\/* ------------------------------------------------------------------ *\/\n-\n-\/* Some request codes.  There are many more of these, but most are not\n-   exposed to end-user view.  These are the public ones, all of the\n-   form 0x1000 + small_number.\n-\n-   Core ones are in the range 0x00000000--0x0000ffff.  The non-public\n-   ones start at 0x2000.\n-*\/\n-\n-\/* These macros are used by tools -- they must be public, but don't\n-   embed them into other programs. *\/\n-#define VG_USERREQ_TOOL_BASE(a,b) \\\n-   ((unsigned int)(((a)&0xff) << 24 | ((b)&0xff) << 16))\n-#define VG_IS_TOOL_USERREQ(a, b, v) \\\n-   (VG_USERREQ_TOOL_BASE(a,b) == ((v) & 0xffff0000))\n-\n-\/* !! ABIWARNING !! ABIWARNING !! ABIWARNING !! ABIWARNING !!\n-   This enum comprises an ABI exported by Valgrind to programs\n-   which use client requests.  DO NOT CHANGE THE NUMERIC VALUES OF THESE\n-   ENTRIES, NOR DELETE ANY -- add new ones at the end of the most\n-   relevant group. *\/\n-typedef\n-   enum { VG_USERREQ__RUNNING_ON_VALGRIND  = 0x1001,\n-          VG_USERREQ__DISCARD_TRANSLATIONS = 0x1002,\n-\n-          \/* These allow any function to be called from the simulated\n-             CPU but run on the real CPU.  Nb: the first arg passed to\n-             the function is always the ThreadId of the running\n-             thread!  So CLIENT_CALL0 actually requires a 1 arg\n-             function, etc. *\/\n-          VG_USERREQ__CLIENT_CALL0 = 0x1101,\n-          VG_USERREQ__CLIENT_CALL1 = 0x1102,\n-          VG_USERREQ__CLIENT_CALL2 = 0x1103,\n-          VG_USERREQ__CLIENT_CALL3 = 0x1104,\n-\n-          \/* Can be useful in regression testing suites -- eg. can\n-             send Valgrind's output to \/dev\/null and still count\n-             errors. *\/\n-          VG_USERREQ__COUNT_ERRORS = 0x1201,\n-\n-          \/* Allows the client program and\/or gdbserver to execute a monitor\n-             command. *\/\n-          VG_USERREQ__GDB_MONITOR_COMMAND = 0x1202,\n-\n-          \/* These are useful and can be interpreted by any tool that\n-             tracks malloc() et al, by using vg_replace_malloc.c. *\/\n-          VG_USERREQ__MALLOCLIKE_BLOCK = 0x1301,\n-          VG_USERREQ__RESIZEINPLACE_BLOCK = 0x130b,\n-          VG_USERREQ__FREELIKE_BLOCK   = 0x1302,\n-          \/* Memory pool support. *\/\n-          VG_USERREQ__CREATE_MEMPOOL   = 0x1303,\n-          VG_USERREQ__DESTROY_MEMPOOL  = 0x1304,\n-          VG_USERREQ__MEMPOOL_ALLOC    = 0x1305,\n-          VG_USERREQ__MEMPOOL_FREE     = 0x1306,\n-          VG_USERREQ__MEMPOOL_TRIM     = 0x1307,\n-          VG_USERREQ__MOVE_MEMPOOL     = 0x1308,\n-          VG_USERREQ__MEMPOOL_CHANGE   = 0x1309,\n-          VG_USERREQ__MEMPOOL_EXISTS   = 0x130a,\n-\n-          \/* Allow printfs to valgrind log. *\/\n-          \/* The first two pass the va_list argument by value, which\n-             assumes it is the same size as or smaller than a UWord,\n-             which generally isn't the case.  Hence are deprecated.\n-             The second two pass the vargs by reference and so are\n-             immune to this problem. *\/\n-          \/* both :: char* fmt, va_list vargs (DEPRECATED) *\/\n-          VG_USERREQ__PRINTF           = 0x1401,\n-          VG_USERREQ__PRINTF_BACKTRACE = 0x1402,\n-          \/* both :: char* fmt, va_list* vargs *\/\n-          VG_USERREQ__PRINTF_VALIST_BY_REF = 0x1403,\n-          VG_USERREQ__PRINTF_BACKTRACE_VALIST_BY_REF = 0x1404,\n-\n-          \/* Stack support. *\/\n-          VG_USERREQ__STACK_REGISTER   = 0x1501,\n-          VG_USERREQ__STACK_DEREGISTER = 0x1502,\n-          VG_USERREQ__STACK_CHANGE     = 0x1503,\n-\n-          \/* Wine support *\/\n-          VG_USERREQ__LOAD_PDB_DEBUGINFO = 0x1601,\n-\n-          \/* Querying of debug info. *\/\n-          VG_USERREQ__MAP_IP_TO_SRCLOC = 0x1701,\n-\n-          \/* Disable\/enable error reporting level.  Takes a single\n-             Word arg which is the delta to this thread's error\n-             disablement indicator.  Hence 1 disables or further\n-             disables errors, and -1 moves back towards enablement.\n-             Other values are not allowed. *\/\n-          VG_USERREQ__CHANGE_ERR_DISABLEMENT = 0x1801,\n-\n-          \/* Some requests used for Valgrind internal, such as\n-             self-test or self-hosting. *\/\n-          \/* Initialise IR injection *\/\n-          VG_USERREQ__VEX_INIT_FOR_IRI = 0x1901,\n-          \/* Used by Inner Valgrind to inform Outer Valgrind where to\n-             find the list of inner guest threads *\/\n-          VG_USERREQ__INNER_THREADS    = 0x1902\n-   } Vg_ClientRequest;\n-\n-#if !defined(__GNUC__)\n-#  define __extension__ \/* *\/\n-#endif\n-\n-\n-\/* Returns the number of Valgrinds this code is running under.  That\n-   is, 0 if running natively, 1 if running under Valgrind, 2 if\n-   running under Valgrind which is running under another Valgrind,\n-   etc. *\/\n-#define RUNNING_ON_VALGRIND                                           \\\n-    (unsigned)VALGRIND_DO_CLIENT_REQUEST_EXPR(0 \/* if not *\/,         \\\n-                                    VG_USERREQ__RUNNING_ON_VALGRIND,  \\\n-                                    0, 0, 0, 0, 0)                    \\\n-\n-\n-\/* Discard translation of code in the range [_qzz_addr .. _qzz_addr +\n-   _qzz_len - 1].  Useful if you are debugging a JITter or some such,\n-   since it provides a way to make sure valgrind will retranslate the\n-   invalidated area.  Returns no value. *\/\n-#define VALGRIND_DISCARD_TRANSLATIONS(_qzz_addr,_qzz_len)              \\\n-    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__DISCARD_TRANSLATIONS,  \\\n-                                    _qzz_addr, _qzz_len, 0, 0, 0)\n-\n-#define VALGRIND_INNER_THREADS(_qzz_addr)                               \\\n-   VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__INNER_THREADS,           \\\n-                                   _qzz_addr, 0, 0, 0, 0)\n-\n-\n-\/* These requests are for getting Valgrind itself to print something.\n-   Possibly with a backtrace.  This is a really ugly hack.  The return value\n-   is the number of characters printed, excluding the \"**<pid>** \" part at the\n-   start and the backtrace (if present). *\/\n-\n-#if defined(__GNUC__) || defined(__INTEL_COMPILER) && !defined(_MSC_VER)\n-\/* Modern GCC will optimize the static routine out if unused,\n-   and unused attribute will shut down warnings about it.  *\/\n-static int VALGRIND_PRINTF(const char *format, ...)\n-   __attribute__((format(__printf__, 1, 2), __unused__));\n-#endif\n-static int\n-#if defined(_MSC_VER)\n-__inline\n-#endif\n-VALGRIND_PRINTF(const char *format, ...)\n-{\n-#if defined(NVALGRIND)\n-   (void)format;\n-   return 0;\n-#else \/* NVALGRIND *\/\n-#if defined(_MSC_VER) || defined(__MINGW64__)\n-   uintptr_t _qzz_res;\n-#else\n-   unsigned long _qzz_res;\n-#endif\n-   va_list vargs;\n-   va_start(vargs, format);\n-#if defined(_MSC_VER) || defined(__MINGW64__)\n-   _qzz_res = VALGRIND_DO_CLIENT_REQUEST_EXPR(0,\n-                              VG_USERREQ__PRINTF_VALIST_BY_REF,\n-                              (uintptr_t)format,\n-                              (uintptr_t)&vargs,\n-                              0, 0, 0);\n-#else\n-   _qzz_res = VALGRIND_DO_CLIENT_REQUEST_EXPR(0,\n-                              VG_USERREQ__PRINTF_VALIST_BY_REF,\n-                              (unsigned long)format,\n-                              (unsigned long)&vargs,\n-                              0, 0, 0);\n-#endif\n-   va_end(vargs);\n-   return (int)_qzz_res;\n-#endif \/* NVALGRIND *\/\n-}\n-\n-#if defined(__GNUC__) || defined(__INTEL_COMPILER) && !defined(_MSC_VER)\n-static int VALGRIND_PRINTF_BACKTRACE(const char *format, ...)\n-   __attribute__((format(__printf__, 1, 2), __unused__));\n-#endif\n-static int\n-#if defined(_MSC_VER)\n-__inline\n-#endif\n-VALGRIND_PRINTF_BACKTRACE(const char *format, ...)\n-{\n-#if defined(NVALGRIND)\n-   (void)format;\n-   return 0;\n-#else \/* NVALGRIND *\/\n-#if defined(_MSC_VER) || defined(__MINGW64__)\n-   uintptr_t _qzz_res;\n-#else\n-   unsigned long _qzz_res;\n-#endif\n-   va_list vargs;\n-   va_start(vargs, format);\n-#if defined(_MSC_VER) || defined(__MINGW64__)\n-   _qzz_res = VALGRIND_DO_CLIENT_REQUEST_EXPR(0,\n-                              VG_USERREQ__PRINTF_BACKTRACE_VALIST_BY_REF,\n-                              (uintptr_t)format,\n-                              (uintptr_t)&vargs,\n-                              0, 0, 0);\n-#else\n-   _qzz_res = VALGRIND_DO_CLIENT_REQUEST_EXPR(0,\n-                              VG_USERREQ__PRINTF_BACKTRACE_VALIST_BY_REF,\n-                              (unsigned long)format,\n-                              (unsigned long)&vargs,\n-                              0, 0, 0);\n-#endif\n-   va_end(vargs);\n-   return (int)_qzz_res;\n-#endif \/* NVALGRIND *\/\n-}\n-\n-\n-\/* These requests allow control to move from the simulated CPU to the\n-   real CPU, calling an arbitrary function.\n-\n-   Note that the current ThreadId is inserted as the first argument.\n-   So this call:\n-\n-     VALGRIND_NON_SIMD_CALL2(f, arg1, arg2)\n-\n-   requires f to have this signature:\n-\n-     Word f(Word tid, Word arg1, Word arg2)\n-\n-   where \"Word\" is a word-sized type.\n-\n-   Note that these client requests are not entirely reliable.  For example,\n-   if you call a function with them that subsequently calls printf(),\n-   there's a high chance Valgrind will crash.  Generally, your prospects of\n-   these working are made higher if the called function does not refer to\n-   any global variables, and does not refer to any libc or other functions\n-   (printf et al).  Any kind of entanglement with libc or dynamic linking is\n-   likely to have a bad outcome, for tricky reasons which we've grappled\n-   with a lot in the past.\n-*\/\n-#define VALGRIND_NON_SIMD_CALL0(_qyy_fn)                          \\\n-    VALGRIND_DO_CLIENT_REQUEST_EXPR(0 \/* default return *\/,       \\\n-                                    VG_USERREQ__CLIENT_CALL0,     \\\n-                                    _qyy_fn,                      \\\n-                                    0, 0, 0, 0)\n-\n-#define VALGRIND_NON_SIMD_CALL1(_qyy_fn, _qyy_arg1)                    \\\n-    VALGRIND_DO_CLIENT_REQUEST_EXPR(0 \/* default return *\/,            \\\n-                                    VG_USERREQ__CLIENT_CALL1,          \\\n-                                    _qyy_fn,                           \\\n-                                    _qyy_arg1, 0, 0, 0)\n-\n-#define VALGRIND_NON_SIMD_CALL2(_qyy_fn, _qyy_arg1, _qyy_arg2)         \\\n-    VALGRIND_DO_CLIENT_REQUEST_EXPR(0 \/* default return *\/,            \\\n-                                    VG_USERREQ__CLIENT_CALL2,          \\\n-                                    _qyy_fn,                           \\\n-                                    _qyy_arg1, _qyy_arg2, 0, 0)\n-\n-#define VALGRIND_NON_SIMD_CALL3(_qyy_fn, _qyy_arg1, _qyy_arg2, _qyy_arg3) \\\n-    VALGRIND_DO_CLIENT_REQUEST_EXPR(0 \/* default return *\/,             \\\n-                                    VG_USERREQ__CLIENT_CALL3,           \\\n-                                    _qyy_fn,                            \\\n-                                    _qyy_arg1, _qyy_arg2,               \\\n-                                    _qyy_arg3, 0)\n-\n-\n-\/* Counts the number of errors that have been recorded by a tool.  Nb:\n-   the tool must record the errors with VG_(maybe_record_error)() or\n-   VG_(unique_error)() for them to be counted. *\/\n-#define VALGRIND_COUNT_ERRORS                                     \\\n-    (unsigned)VALGRIND_DO_CLIENT_REQUEST_EXPR(                    \\\n-                               0 \/* default return *\/,            \\\n-                               VG_USERREQ__COUNT_ERRORS,          \\\n-                               0, 0, 0, 0, 0)\n-\n-\/* Several Valgrind tools (Memcheck, Massif, Helgrind, DRD) rely on knowing\n-   when heap blocks are allocated in order to give accurate results.  This\n-   happens automatically for the standard allocator functions such as\n-   malloc(), calloc(), realloc(), memalign(), new, new[], free(), delete,\n-   delete[], etc.\n-\n-   But if your program uses a custom allocator, this doesn't automatically\n-   happen, and Valgrind will not do as well.  For example, if you allocate\n-   superblocks with mmap() and then allocates chunks of the superblocks, all\n-   Valgrind's observations will be at the mmap() level and it won't know that\n-   the chunks should be considered separate entities.  In Memcheck's case,\n-   that means you probably won't get heap block overrun detection (because\n-   there won't be redzones marked as unaddressable) and you definitely won't\n-   get any leak detection.\n-\n-   The following client requests allow a custom allocator to be annotated so\n-   that it can be handled accurately by Valgrind.\n-\n-   VALGRIND_MALLOCLIKE_BLOCK marks a region of memory as having been allocated\n-   by a malloc()-like function.  For Memcheck (an illustrative case), this\n-   does two things:\n-\n-   - It records that the block has been allocated.  This means any addresses\n-     within the block mentioned in error messages will be\n-     identified as belonging to the block.  It also means that if the block\n-     isn't freed it will be detected by the leak checker.\n-\n-   - It marks the block as being addressable and undefined (if 'is_zeroed' is\n-     not set), or addressable and defined (if 'is_zeroed' is set).  This\n-     controls how accesses to the block by the program are handled.\n-\n-   'addr' is the start of the usable block (ie. after any\n-   redzone), 'sizeB' is its size.  'rzB' is the redzone size if the allocator\n-   can apply redzones -- these are blocks of padding at the start and end of\n-   each block.  Adding redzones is recommended as it makes it much more likely\n-   Valgrind will spot block overruns.  `is_zeroed' indicates if the memory is\n-   zeroed (or filled with another predictable value), as is the case for\n-   calloc().\n-\n-   VALGRIND_MALLOCLIKE_BLOCK should be put immediately after the point where a\n-   heap block -- that will be used by the client program -- is allocated.\n-   It's best to put it at the outermost level of the allocator if possible;\n-   for example, if you have a function my_alloc() which calls\n-   internal_alloc(), and the client request is put inside internal_alloc(),\n-   stack traces relating to the heap block will contain entries for both\n-   my_alloc() and internal_alloc(), which is probably not what you want.\n-\n-   For Memcheck users: if you use VALGRIND_MALLOCLIKE_BLOCK to carve out\n-   custom blocks from within a heap block, B, that has been allocated with\n-   malloc\/calloc\/new\/etc, then block B will be *ignored* during leak-checking\n-   -- the custom blocks will take precedence.\n-\n-   VALGRIND_FREELIKE_BLOCK is the partner to VALGRIND_MALLOCLIKE_BLOCK.  For\n-   Memcheck, it does two things:\n-\n-   - It records that the block has been deallocated.  This assumes that the\n-     block was annotated as having been allocated via\n-     VALGRIND_MALLOCLIKE_BLOCK.  Otherwise, an error will be issued.\n-\n-   - It marks the block as being unaddressable.\n-\n-   VALGRIND_FREELIKE_BLOCK should be put immediately after the point where a\n-   heap block is deallocated.\n-\n-   VALGRIND_RESIZEINPLACE_BLOCK informs a tool about reallocation. For\n-   Memcheck, it does four things:\n-\n-   - It records that the size of a block has been changed.  This assumes that\n-     the block was annotated as having been allocated via\n-     VALGRIND_MALLOCLIKE_BLOCK.  Otherwise, an error will be issued.\n-\n-   - If the block shrunk, it marks the freed memory as being unaddressable.\n-\n-   - If the block grew, it marks the new area as undefined and defines a red\n-     zone past the end of the new block.\n-\n-   - The V-bits of the overlap between the old and the new block are preserved.\n-\n-   VALGRIND_RESIZEINPLACE_BLOCK should be put after allocation of the new block\n-   and before deallocation of the old block.\n-\n-   In many cases, these three client requests will not be enough to get your\n-   allocator working well with Memcheck.  More specifically, if your allocator\n-   writes to freed blocks in any way then a VALGRIND_MAKE_MEM_UNDEFINED call\n-   will be necessary to mark the memory as addressable just before the zeroing\n-   occurs, otherwise you'll get a lot of invalid write errors.  For example,\n-   you'll need to do this if your allocator recycles freed blocks, but it\n-   zeroes them before handing them back out (via VALGRIND_MALLOCLIKE_BLOCK).\n-   Alternatively, if your allocator reuses freed blocks for allocator-internal\n-   data structures, VALGRIND_MAKE_MEM_UNDEFINED calls will also be necessary.\n-\n-   Really, what's happening is a blurring of the lines between the client\n-   program and the allocator... after VALGRIND_FREELIKE_BLOCK is called, the\n-   memory should be considered unaddressable to the client program, but the\n-   allocator knows more than the rest of the client program and so may be able\n-   to safely access it.  Extra client requests are necessary for Valgrind to\n-   understand the distinction between the allocator and the rest of the\n-   program.\n-\n-   Ignored if addr == 0.\n-*\/\n-#define VALGRIND_MALLOCLIKE_BLOCK(addr, sizeB, rzB, is_zeroed)          \\\n-    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__MALLOCLIKE_BLOCK,       \\\n-                                    addr, sizeB, rzB, is_zeroed, 0)\n-\n-\/* See the comment for VALGRIND_MALLOCLIKE_BLOCK for details.\n-   Ignored if addr == 0.\n-*\/\n-#define VALGRIND_RESIZEINPLACE_BLOCK(addr, oldSizeB, newSizeB, rzB)     \\\n-    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__RESIZEINPLACE_BLOCK,    \\\n-                                    addr, oldSizeB, newSizeB, rzB, 0)\n-\n-\/* See the comment for VALGRIND_MALLOCLIKE_BLOCK for details.\n-   Ignored if addr == 0.\n-*\/\n-#define VALGRIND_FREELIKE_BLOCK(addr, rzB)                              \\\n-    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__FREELIKE_BLOCK,         \\\n-                                    addr, rzB, 0, 0, 0)\n-\n-\/* Create a memory pool. *\/\n-#define VALGRIND_CREATE_MEMPOOL(pool, rzB, is_zeroed)             \\\n-    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__CREATE_MEMPOOL,   \\\n-                                    pool, rzB, is_zeroed, 0, 0)\n-\n-\/* Create a memory pool with some flags specifying extended behaviour.\n-   When flags is zero, the behaviour is identical to VALGRIND_CREATE_MEMPOOL.\n-\n-   The flag VALGRIND_MEMPOOL_METAPOOL specifies that the pieces of memory\n-   associated with the pool using VALGRIND_MEMPOOL_ALLOC  will be used\n-   by the application as superblocks to dole out MALLOC_LIKE blocks using\n-   VALGRIND_MALLOCLIKE_BLOCK. In other words, a meta pool is a \"2 levels\"\n-   pool : first level is the blocks described by VALGRIND_MEMPOOL_ALLOC.\n-   The second level blocks are described using VALGRIND_MALLOCLIKE_BLOCK.\n-   Note that the association between the pool and the second level blocks\n-   is implicit : second level blocks will be located inside first level\n-   blocks. It is necessary to use the VALGRIND_MEMPOOL_METAPOOL flag\n-   for such 2 levels pools, as otherwise valgrind will detect overlapping\n-   memory blocks, and will abort execution (e.g. during leak search).\n-\n-   Such a meta pool can also be marked as an 'auto free' pool using the flag\n-   VALGRIND_MEMPOOL_AUTO_FREE, which must be OR-ed together with the\n-   VALGRIND_MEMPOOL_METAPOOL. For an 'auto free' pool, VALGRIND_MEMPOOL_FREE\n-   will automatically free the second level blocks that are contained\n-   inside the first level block freed with VALGRIND_MEMPOOL_FREE.\n-   In other words, calling VALGRIND_MEMPOOL_FREE will cause implicit calls\n-   to VALGRIND_FREELIKE_BLOCK for all the second level blocks included\n-   in the first level block.\n-   Note: it is an error to use the VALGRIND_MEMPOOL_AUTO_FREE flag\n-   without the VALGRIND_MEMPOOL_METAPOOL flag.\n-*\/\n-#define VALGRIND_MEMPOOL_AUTO_FREE  1\n-#define VALGRIND_MEMPOOL_METAPOOL   2\n-#define VALGRIND_CREATE_MEMPOOL_EXT(pool, rzB, is_zeroed, flags)        \\\n-   VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__CREATE_MEMPOOL,          \\\n-                                   pool, rzB, is_zeroed, flags, 0)\n-\n-\/* Destroy a memory pool. *\/\n-#define VALGRIND_DESTROY_MEMPOOL(pool)                            \\\n-    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__DESTROY_MEMPOOL,  \\\n-                                    pool, 0, 0, 0, 0)\n-\n-\/* Associate a piece of memory with a memory pool. *\/\n-#define VALGRIND_MEMPOOL_ALLOC(pool, addr, size)                  \\\n-    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__MEMPOOL_ALLOC,    \\\n-                                    pool, addr, size, 0, 0)\n-\n-\/* Disassociate a piece of memory from a memory pool. *\/\n-#define VALGRIND_MEMPOOL_FREE(pool, addr)                         \\\n-    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__MEMPOOL_FREE,     \\\n-                                    pool, addr, 0, 0, 0)\n-\n-\/* Disassociate any pieces outside a particular range. *\/\n-#define VALGRIND_MEMPOOL_TRIM(pool, addr, size)                   \\\n-    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__MEMPOOL_TRIM,     \\\n-                                    pool, addr, size, 0, 0)\n-\n-\/* Resize and\/or move a piece associated with a memory pool. *\/\n-#define VALGRIND_MOVE_MEMPOOL(poolA, poolB)                       \\\n-    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__MOVE_MEMPOOL,     \\\n-                                    poolA, poolB, 0, 0, 0)\n-\n-\/* Resize and\/or move a piece associated with a memory pool. *\/\n-#define VALGRIND_MEMPOOL_CHANGE(pool, addrA, addrB, size)         \\\n-    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__MEMPOOL_CHANGE,   \\\n-                                    pool, addrA, addrB, size, 0)\n-\n-\/* Return 1 if a mempool exists, else 0. *\/\n-#define VALGRIND_MEMPOOL_EXISTS(pool)                             \\\n-    (unsigned)VALGRIND_DO_CLIENT_REQUEST_EXPR(0,                  \\\n-                               VG_USERREQ__MEMPOOL_EXISTS,        \\\n-                               pool, 0, 0, 0, 0)\n-\n-\/* Mark a piece of memory as being a stack. Returns a stack id.\n-   start is the lowest addressable stack byte, end is the highest\n-   addressable stack byte. *\/\n-#define VALGRIND_STACK_REGISTER(start, end)                       \\\n-    (unsigned)VALGRIND_DO_CLIENT_REQUEST_EXPR(0,                  \\\n-                               VG_USERREQ__STACK_REGISTER,        \\\n-                               start, end, 0, 0, 0)\n-\n-\/* Unmark the piece of memory associated with a stack id as being a\n-   stack. *\/\n-#define VALGRIND_STACK_DEREGISTER(id)                             \\\n-    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__STACK_DEREGISTER, \\\n-                                    id, 0, 0, 0, 0)\n-\n-\/* Change the start and end address of the stack id.\n-   start is the new lowest addressable stack byte, end is the new highest\n-   addressable stack byte. *\/\n-#define VALGRIND_STACK_CHANGE(id, start, end)                     \\\n-    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__STACK_CHANGE,     \\\n-                                    id, start, end, 0, 0)\n-\n-\/* Load PDB debug info for Wine PE image_map. *\/\n-#define VALGRIND_LOAD_PDB_DEBUGINFO(fd, ptr, total_size, delta)     \\\n-    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__LOAD_PDB_DEBUGINFO, \\\n-                                    fd, ptr, total_size, delta, 0)\n-\n-\/* Map a code address to a source file name and line number.  buf64\n-   must point to a 64-byte buffer in the caller's address space.  The\n-   result will be dumped in there and is guaranteed to be zero\n-   terminated.  If no info is found, the first byte is set to zero. *\/\n-#define VALGRIND_MAP_IP_TO_SRCLOC(addr, buf64)                    \\\n-    (unsigned)VALGRIND_DO_CLIENT_REQUEST_EXPR(0,                  \\\n-                               VG_USERREQ__MAP_IP_TO_SRCLOC,      \\\n-                               addr, buf64, 0, 0, 0)\n-\n-\/* Disable error reporting for this thread.  Behaves in a stack like\n-   way, so you can safely call this multiple times provided that\n-   VALGRIND_ENABLE_ERROR_REPORTING is called the same number of times\n-   to re-enable reporting.  The first call of this macro disables\n-   reporting.  Subsequent calls have no effect except to increase the\n-   number of VALGRIND_ENABLE_ERROR_REPORTING calls needed to re-enable\n-   reporting.  Child threads do not inherit this setting from their\n-   parents -- they are always created with reporting enabled. *\/\n-#define VALGRIND_DISABLE_ERROR_REPORTING                                \\\n-    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__CHANGE_ERR_DISABLEMENT, \\\n-                                    1, 0, 0, 0, 0)\n-\n-\/* Re-enable error reporting, as per comments on\n-   VALGRIND_DISABLE_ERROR_REPORTING. *\/\n-#define VALGRIND_ENABLE_ERROR_REPORTING                                 \\\n-    VALGRIND_DO_CLIENT_REQUEST_STMT(VG_USERREQ__CHANGE_ERR_DISABLEMENT, \\\n-                                    -1, 0, 0, 0, 0)\n-\n-\/* Execute a monitor command from the client program.\n-   If a connection is opened with GDB, the output will be sent\n-   according to the output mode set for vgdb.\n-   If no connection is opened, output will go to the log output.\n-   Returns 1 if command not recognised, 0 otherwise. *\/\n-#define VALGRIND_MONITOR_COMMAND(command)                               \\\n-   VALGRIND_DO_CLIENT_REQUEST_EXPR(0, VG_USERREQ__GDB_MONITOR_COMMAND, \\\n-                                   command, 0, 0, 0, 0)\n-\n-\n-#undef PLAT_x86_darwin\n-#undef PLAT_amd64_darwin\n-#undef PLAT_x86_win32\n-#undef PLAT_amd64_win64\n-#undef PLAT_x86_linux\n-#undef PLAT_amd64_linux\n-#undef PLAT_ppc32_linux\n-#undef PLAT_ppc64be_linux\n-#undef PLAT_ppc64le_linux\n-#undef PLAT_arm_linux\n-#undef PLAT_s390x_linux\n-#undef PLAT_mips32_linux\n-#undef PLAT_mips64_linux\n-#undef PLAT_x86_solaris\n-#undef PLAT_amd64_solaris\n-\n-#endif   \/* __VALGRIND_H *\/\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/glib\/glib\/valgrind.h","additions":0,"deletions":6648,"binary":false,"changes":6648,"status":"deleted"}]}