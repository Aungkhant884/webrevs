{"files":[{"patch":"@@ -433,1 +433,0 @@\n-# FIXME: This is on by default in WebKit2. Perhaps we should consider turning it on for WebKitLegacy as well.\n@@ -441,1 +440,1 @@\n-      default: false\n+      default: true\n@@ -445,1 +444,1 @@\n-      default: false\n+      default: true\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/Scripts\/Preferences\/WebPreferencesExperimental.yaml","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.web;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.web.WebView;\n+import javafx.stage.Stage;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import test.util.Util;\n+\n+import java.net.URL;\n+import java.util.concurrent.CountDownLatch;\n+\n+import static javafx.concurrent.Worker.State.SUCCEEDED;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class WebIObserverTest {\n+    private static final CountDownLatch launchLatch = new CountDownLatch(1);\n+\n+    private static WebIObserverTestApp WebIObserverTestApp;\n+\n+    private WebView webView;\n+\n+    public static class WebIObserverTestApp extends Application {\n+        private Stage primaryStage = null;\n+\n+        @Override\n+        public void init() {\n+            WebIObserverTest.WebIObserverTestApp = this;\n+        }\n+\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            Platform.setImplicitExit(false);\n+            this.primaryStage = primaryStage;\n+            launchLatch.countDown();\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void setupOnce() {\n+        new Thread(() -> Application.launch(WebIObserverTestApp.class, (String[])null)).start();\n+\n+        assertTrue(\"Timeout waiting for FX runtime to start\", Util.await(launchLatch));\n+    }\n+\n+    @AfterClass\n+    public static void tearDownOnce() {\n+        Platform.exit();\n+    }\n+\n+    @Before\n+    public void setupTestObjects() {\n+        Platform.runLater(() -> {\n+            webView = new WebView();\n+            WebIObserverTestApp.primaryStage.setScene(new Scene(webView));\n+            WebIObserverTestApp.primaryStage.show();\n+        });\n+    }\n+\n+    @Test public void testIO() {\n+        final CountDownLatch webViewStateLatch = new CountDownLatch(1);\n+        URL resource = WebIObserverTest.class.getResource(\"testIObserver.html\");\n+        assertNotNull(\"Resource was null\", resource);\n+\n+        Util.runAndWait(() -> {\n+            assertNotNull(webView);\n+            webView.getEngine().getLoadWorker().stateProperty().\n+                addListener((observable, oldValue, newValue) -> {\n+                if (newValue == SUCCEEDED) {\n+                    webViewStateLatch.countDown();\n+                }\n+            });\n+\n+            webView.getEngine().load(resource.toExternalForm());\n+        });\n+\n+        assertTrue(\"Timeout waiting for succeeded state\", Util.await(webViewStateLatch));\n+        Util.sleep(500);\n+\n+        Util.runAndWait(() ->\n+                assertEquals(\"Unknown intersection ratio\", \"?\", getIntersectionRatio()));\n+\n+        Util.runAndWait(() -> webView.getEngine().executeScript(\"testIO()\"));\n+        Util.sleep(100);\n+\n+        Util.runAndWait(() ->\n+                assertEquals(\"Intersection ratio\", \"0.5\", getIntersectionRatio()));\n+    }\n+\n+    private String getIntersectionRatio() {\n+        Object object = webView.getEngine().executeScript(\"document.querySelector('#output pre').innerText\");\n+        assertNotNull(\"InnerText was null\", object);\n+        return String.valueOf(object);\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/WebIObserverTest.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+<!DOCTYPE html>\n+<html lang=\"en\">\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <title>test<\/title>\n+    <style>\n+        #parent {\n+            border: 2px solid blue;\n+            height: 400px;\n+            width: 400px;\n+            justify-content: center;\n+            margin: 20px auto;\n+            display: flex;\n+            overflow: hidden;\n+            position: relative;\n+        }\n+\n+        #target {\n+            transform: translate3d(-202px, 0, 0);\n+            background-color: red;\n+            height: 300px;\n+            width: 300px;\n+        }\n+\n+        #output {\n+            margin: 20px auto;\n+            width: 400px;\n+        }\n+        #output pre {\n+            display: inline;\n+        }\n+    <\/style>\n+    <script id=\"js\">\n+        function callback(entries) {\n+            document.querySelector('#output pre').innerText = entries[0].intersectionRatio;\n+        }\n+\n+        let options = {\n+            root: document.querySelector('#parent')\n+        };\n+\n+        testIO = function() {\n+            let observer = new IntersectionObserver(callback, options);\n+            observer.observe(document.querySelector('#target'));\n+        }\n+    <\/script>\n+<\/head>\n+<body>\n+<div id=\"parent\">\n+    <div id=\"target\"><\/div>\n+<\/div>\n+<div id=\"output\">Intersection ratio: <pre>?<\/pre><\/div>\n+<\/body>\n+<\/html>\n\\ No newline at end of file\n","filename":"tests\/system\/src\/test\/resources\/test\/javafx\/scene\/web\/testIObserver.html","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}