{"files":[{"patch":"@@ -33,0 +33,1 @@\n+ * Provides information about mnemonics contained within a string.\n@@ -63,1 +64,1 @@\n-public class TextBinding {\n+public class MnemonicInfo {\n@@ -157,1 +158,1 @@\n-     * Creates a new TextBinding instance from the given string.\n+     * Creates a new MnemonicInfo instance from the given string.\n@@ -161,1 +162,1 @@\n-    public TextBinding(String s) {\n+    public MnemonicInfo(String s) {\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/MnemonicInfo.java","additions":4,"deletions":3,"binary":false,"changes":7,"previous_filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/TextBinding.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-import com.sun.javafx.scene.control.behavior.TextBinding;\n+import com.sun.javafx.scene.control.behavior.MnemonicInfo;\n@@ -60,1 +60,0 @@\n-import javafx.scene.text.HitInfo;\n@@ -729,2 +728,2 @@\n-                    TextBinding bindings = new TextBinding(menuitem.getText());\n-                    int mnemonicIndex = bindings.getMnemonicIndex() ;\n+                    MnemonicInfo mnemonicInfo = new MnemonicInfo(menuitem.getText());\n+                    int mnemonicIndex = mnemonicInfo.getMnemonicIndex() ;\n@@ -732,1 +731,1 @@\n-                        KeyCombination mnemonicKeyCombo = bindings.getMnemonicKeyCombination();\n+                        KeyCombination mnemonicKeyCombo = mnemonicInfo.getMnemonicKeyCombination();\n@@ -761,2 +760,2 @@\n-                    TextBinding bindings = new TextBinding(menuitem.getText());\n-                    int mnemonicIndex = bindings.getMnemonicIndex() ;\n+                    MnemonicInfo mnemonicInfo = new MnemonicInfo(menuitem.getText());\n+                    int mnemonicIndex = mnemonicInfo.getMnemonicIndex() ;\n@@ -764,1 +763,1 @@\n-                        KeyCombination mnemonicKeyCombo = bindings.getMnemonicKeyCombination();\n+                        KeyCombination mnemonicKeyCombo = mnemonicInfo.getMnemonicKeyCombination();\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/skin\/Utils.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import com.sun.javafx.scene.control.behavior.TextBinding;\n+import com.sun.javafx.scene.control.behavior.MnemonicInfo;\n@@ -127,1 +127,1 @@\n-    private TextBinding bindings;\n+    private MnemonicInfo mnemonicInfo;\n@@ -587,1 +587,1 @@\n-            String preSt = bindings.getText();\n+            String preSt = mnemonicInfo.getText();\n@@ -589,2 +589,2 @@\n-            mnemonicPos = Utils.computeMnemonicPosition(font, preSt, bindings.getMnemonicIndex(), this.wrapWidth, labeled.getLineSpacing(), isRTL);\n-            mnemonicWidth = Utils.computeTextWidth(font, preSt.substring(bindings.getMnemonicIndex(), bindings.getMnemonicIndex() + 1), 0);\n+            mnemonicPos = Utils.computeMnemonicPosition(font, preSt, mnemonicInfo.getMnemonicIndex(), this.wrapWidth, labeled.getLineSpacing(), isRTL);\n+            mnemonicWidth = Utils.computeTextWidth(font, preSt.substring(mnemonicInfo.getMnemonicIndex(), mnemonicInfo.getMnemonicIndex() + 1), 0);\n@@ -753,2 +753,2 @@\n-                if (bindings != null) {\n-                    return bindings.getMnemonic();\n+                if (mnemonicInfo != null) {\n+                    return mnemonicInfo.getMnemonic();\n@@ -951,1 +951,1 @@\n-                    && bindings != null\n+                    && mnemonicInfo != null\n@@ -969,1 +969,1 @@\n-                mnemonicIndex = bindings.getMnemonicIndex() ;\n+                mnemonicIndex = mnemonicInfo.getMnemonicIndex() ;\n@@ -981,1 +981,1 @@\n-                            (bindings != null && !bindings.getMnemonicKeyCombination().equals(mnemonicCode))) {\n+                            (mnemonicInfo != null && !mnemonicInfo.getMnemonicKeyCombination().equals(mnemonicCode))) {\n@@ -1001,1 +1001,1 @@\n-                mnemonicCode = bindings.getMnemonicKeyCombination();\n+                mnemonicCode = mnemonicInfo.getMnemonicKeyCombination();\n@@ -1144,2 +1144,2 @@\n-            if (bindings == null) {\n-                bindings = new TextBinding(sourceText);\n+            if (mnemonicInfo == null) {\n+                mnemonicInfo = new MnemonicInfo(sourceText);\n@@ -1147,1 +1147,1 @@\n-                bindings.update(sourceText);\n+                mnemonicInfo.update(sourceText);\n@@ -1150,1 +1150,1 @@\n-            return bindings.getText();\n+            return mnemonicInfo.getText();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/LabeledSkinBase.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.scene.control.behavior;\n+\n+import com.sun.javafx.scene.control.behavior.MnemonicInfo;\n+import javafx.scene.input.KeyCombination;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+public class MnemonicInfoTest {\n+\n+    private static void assertKeyCombination(String expected, KeyCombination actual) {\n+        if (com.sun.javafx.PlatformUtil.isMac()) {\n+            assertSame(KeyCombination.ModifierValue.DOWN, actual.getMeta());\n+        } else {\n+            assertSame(KeyCombination.ModifierValue.DOWN, actual.getAlt());\n+        }\n+\n+        assertEquals(expected, ((MnemonicInfo.MnemonicKeyCombination)actual).getCharacter());\n+    }\n+\n+    @Test\n+    public void testSimpleMnemonicLetter() {\n+        var mnemonicInfo = new MnemonicInfo(\"foo _bar\");\n+        assertEquals(\"foo bar\", mnemonicInfo.getText());\n+        assertEquals(\"b\", mnemonicInfo.getMnemonic());\n+        assertKeyCombination(\"b\", mnemonicInfo.getMnemonicKeyCombination());\n+        assertEquals(4, mnemonicInfo.getMnemonicIndex());\n+    }\n+\n+    @Test\n+    public void testSimpleMnemonicDigit() {\n+        var mnemonicInfo = new MnemonicInfo(\"foo _1 bar\");\n+        assertEquals(\"foo 1 bar\", mnemonicInfo.getText());\n+        assertEquals(\"1\", mnemonicInfo.getMnemonic());\n+        assertKeyCombination(\"1\", mnemonicInfo.getMnemonicKeyCombination());\n+        assertEquals(4, mnemonicInfo.getMnemonicIndex());\n+    }\n+\n+    @Test\n+    public void testExtendedMnemonicLetter() {\n+        var mnemonicInfo = new MnemonicInfo(\"foo _(x)bar\");\n+        assertEquals(\"foo bar\", mnemonicInfo.getText());\n+        assertEquals(\"x\", mnemonicInfo.getMnemonic());\n+        assertKeyCombination(\"x\", mnemonicInfo.getMnemonicKeyCombination());\n+        assertEquals(4, mnemonicInfo.getMnemonicIndex());\n+    }\n+\n+    @Test\n+    public void testExtendedMnemonicUnderscore() {\n+        var mnemonicInfo = new MnemonicInfo(\"foo _(_)bar\");\n+        assertEquals(\"foo bar\", mnemonicInfo.getText());\n+        assertEquals(\"_\", mnemonicInfo.getMnemonic());\n+        assertKeyCombination(\"_\", mnemonicInfo.getMnemonicKeyCombination());\n+        assertEquals(4, mnemonicInfo.getMnemonicIndex());\n+    }\n+\n+    @Test\n+    public void testExtendedMnemonicClosingBrace() {\n+        var mnemonicInfo = new MnemonicInfo(\"foo _())bar\");\n+        assertEquals(\"foo bar\", mnemonicInfo.getText());\n+        assertEquals(\")\", mnemonicInfo.getMnemonic());\n+        assertKeyCombination(\")\", mnemonicInfo.getMnemonicKeyCombination());\n+        assertEquals(4, mnemonicInfo.getMnemonicIndex());\n+    }\n+\n+    @Test\n+    public void testEscapedMnemonicSymbol() {\n+        var mnemonicInfo = new MnemonicInfo(\"foo __bar\");\n+        assertEquals(\"foo _bar\", mnemonicInfo.getText());\n+        assertNull(mnemonicInfo.getMnemonic());\n+        assertNull(mnemonicInfo.getMnemonicKeyCombination());\n+        assertEquals(-1, mnemonicInfo.getMnemonicIndex());\n+    }\n+\n+    @Test\n+    public void testWhitespaceIsNotProcessedAsExtendedMnemonic() {\n+        var mnemonicInfo = new MnemonicInfo(\"foo _( ) bar\");\n+        assertEquals(\"foo ( ) bar\", mnemonicInfo.getText());\n+        assertEquals(\"(\", mnemonicInfo.getMnemonic());\n+        assertKeyCombination(\"(\", mnemonicInfo.getMnemonicKeyCombination());\n+        assertEquals(4, mnemonicInfo.getMnemonicIndex());\n+    }\n+\n+    @Test\n+    public void testUnderscoreNotFollowedByAlphabeticCharIsNotAMnemonic() {\n+        var mnemonicInfo = new MnemonicInfo(\"foo_ bar\");\n+        assertEquals(\"foo_ bar\", mnemonicInfo.getText());\n+        assertNull(mnemonicInfo.getMnemonic());\n+        assertNull(mnemonicInfo.getMnemonicKeyCombination());\n+        assertEquals(-1, mnemonicInfo.getMnemonicIndex());\n+    }\n+\n+    @Test\n+    public void testUnderscoreAtEndOfTextIsNotAMnemonic() {\n+        var mnemonicInfo = new MnemonicInfo(\"foo_\");\n+        assertEquals(\"foo_\", mnemonicInfo.getText());\n+        assertNull(mnemonicInfo.getMnemonic());\n+        assertNull(mnemonicInfo.getMnemonicKeyCombination());\n+        assertEquals(-1, mnemonicInfo.getMnemonicIndex());\n+    }\n+\n+    @Test\n+    public void testMnemonicParsingStopsAfterFirstSimpleMnemonic() {\n+        var mnemonicInfo = new MnemonicInfo(\"_foo _bar _qux\");\n+        assertEquals(\"foo _bar _qux\", mnemonicInfo.getText());\n+        assertEquals(\"f\", mnemonicInfo.getMnemonic());\n+        assertKeyCombination(\"f\", mnemonicInfo.getMnemonicKeyCombination());\n+        assertEquals(0, mnemonicInfo.getMnemonicIndex());\n+    }\n+\n+    @Test\n+    public void testMnemonicParsingStopsAfterFirstExtendedMnemonic() {\n+        var mnemonicInfo = new MnemonicInfo(\"_(x)foo _bar _qux\");\n+        assertEquals(\"foo _bar _qux\", mnemonicInfo.getText());\n+        assertEquals(\"x\", mnemonicInfo.getMnemonic());\n+        assertKeyCombination(\"x\", mnemonicInfo.getMnemonicKeyCombination());\n+        assertEquals(0, mnemonicInfo.getMnemonicIndex());\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/behavior\/MnemonicInfoTest.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"},{"patch":"@@ -1,145 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.com.sun.javafx.scene.control.behavior;\n-\n-import com.sun.javafx.scene.control.behavior.TextBinding;\n-import javafx.scene.input.KeyCombination;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n-\n-public class TextBindingTest {\n-\n-    private static void assertKeyCombination(String expected, KeyCombination actual) {\n-        if (com.sun.javafx.PlatformUtil.isMac()) {\n-            assertSame(KeyCombination.ModifierValue.DOWN, actual.getMeta());\n-        } else {\n-            assertSame(KeyCombination.ModifierValue.DOWN, actual.getAlt());\n-        }\n-\n-        assertEquals(expected, ((TextBinding.MnemonicKeyCombination)actual).getCharacter());\n-    }\n-\n-    @Test\n-    public void testSimpleMnemonicLetter() {\n-        var binding = new TextBinding(\"foo _bar\");\n-        assertEquals(\"foo bar\", binding.getText());\n-        assertEquals(\"b\", binding.getMnemonic());\n-        assertKeyCombination(\"b\", binding.getMnemonicKeyCombination());\n-        assertEquals(4, binding.getMnemonicIndex());\n-    }\n-\n-    @Test\n-    public void testSimpleMnemonicDigit() {\n-        var binding = new TextBinding(\"foo _1 bar\");\n-        assertEquals(\"foo 1 bar\", binding.getText());\n-        assertEquals(\"1\", binding.getMnemonic());\n-        assertKeyCombination(\"1\", binding.getMnemonicKeyCombination());\n-        assertEquals(4, binding.getMnemonicIndex());\n-    }\n-\n-    @Test\n-    public void testExtendedMnemonicLetter() {\n-        var binding = new TextBinding(\"foo _(x)bar\");\n-        assertEquals(\"foo bar\", binding.getText());\n-        assertEquals(\"x\", binding.getMnemonic());\n-        assertKeyCombination(\"x\", binding.getMnemonicKeyCombination());\n-        assertEquals(4, binding.getMnemonicIndex());\n-    }\n-\n-    @Test\n-    public void testExtendedMnemonicUnderscore() {\n-        var binding = new TextBinding(\"foo _(_)bar\");\n-        assertEquals(\"foo bar\", binding.getText());\n-        assertEquals(\"_\", binding.getMnemonic());\n-        assertKeyCombination(\"_\", binding.getMnemonicKeyCombination());\n-        assertEquals(4, binding.getMnemonicIndex());\n-    }\n-\n-    @Test\n-    public void testExtendedMnemonicClosingBrace() {\n-        var binding = new TextBinding(\"foo _())bar\");\n-        assertEquals(\"foo bar\", binding.getText());\n-        assertEquals(\")\", binding.getMnemonic());\n-        assertKeyCombination(\")\", binding.getMnemonicKeyCombination());\n-        assertEquals(4, binding.getMnemonicIndex());\n-    }\n-\n-    @Test\n-    public void testEscapedMnemonicSymbol() {\n-        var binding = new TextBinding(\"foo __bar\");\n-        assertEquals(\"foo _bar\", binding.getText());\n-        assertNull(binding.getMnemonic());\n-        assertNull(binding.getMnemonicKeyCombination());\n-        assertEquals(-1, binding.getMnemonicIndex());\n-    }\n-\n-    @Test\n-    public void testWhitespaceIsNotProcessedAsExtendedMnemonic() {\n-        var binding = new TextBinding(\"foo _( ) bar\");\n-        assertEquals(\"foo ( ) bar\", binding.getText());\n-        assertEquals(\"(\", binding.getMnemonic());\n-        assertKeyCombination(\"(\", binding.getMnemonicKeyCombination());\n-        assertEquals(4, binding.getMnemonicIndex());\n-    }\n-\n-    @Test\n-    public void testUnderscoreNotFollowedByAlphabeticCharIsNotAMnemonic() {\n-        var binding = new TextBinding(\"foo_ bar\");\n-        assertEquals(\"foo_ bar\", binding.getText());\n-        assertNull(binding.getMnemonic());\n-        assertNull(binding.getMnemonicKeyCombination());\n-        assertEquals(-1, binding.getMnemonicIndex());\n-    }\n-\n-    @Test\n-    public void testUnderscoreAtEndOfTextIsNotAMnemonic() {\n-        var binding = new TextBinding(\"foo_\");\n-        assertEquals(\"foo_\", binding.getText());\n-        assertNull(binding.getMnemonic());\n-        assertNull(binding.getMnemonicKeyCombination());\n-        assertEquals(-1, binding.getMnemonicIndex());\n-    }\n-\n-    @Test\n-    public void testMnemonicParsingStopsAfterFirstSimpleMnemonic() {\n-        var binding = new TextBinding(\"_foo _bar _qux\");\n-        assertEquals(\"foo _bar _qux\", binding.getText());\n-        assertEquals(\"f\", binding.getMnemonic());\n-        assertKeyCombination(\"f\", binding.getMnemonicKeyCombination());\n-        assertEquals(0, binding.getMnemonicIndex());\n-    }\n-\n-    @Test\n-    public void testMnemonicParsingStopsAfterFirstExtendedMnemonic() {\n-        var binding = new TextBinding(\"_(x)foo _bar _qux\");\n-        assertEquals(\"foo _bar _qux\", binding.getText());\n-        assertEquals(\"x\", binding.getMnemonic());\n-        assertKeyCombination(\"x\", binding.getMnemonicKeyCombination());\n-        assertEquals(0, binding.getMnemonicIndex());\n-    }\n-\n-}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/behavior\/TextBindingTest.java","additions":0,"deletions":145,"binary":false,"changes":145,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-import com.sun.javafx.scene.control.behavior.TextBinding.MnemonicKeyCombination;\n+import com.sun.javafx.scene.control.behavior.MnemonicInfo.MnemonicKeyCombination;\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/ButtonSkinTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}