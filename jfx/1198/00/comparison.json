{"files":[{"patch":"@@ -103,2 +103,0 @@\n-    \/\/ package for testing\n-    boolean lockItemOnEdit = false;\n@@ -322,6 +320,1 @@\n-        \/\/ We check the boolean lockItemOnEdit field here, as whilst we want to\n-        \/\/ updateItem normally, when it comes to unit tests we can't have the\n-        \/\/ item change in all circumstances.\n-        if (! lockItemOnEdit) {\n-            updateItem(-1);\n-        }\n+        updateItem(-1);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableCell.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -101,2 +101,0 @@\n-    \/\/ package for testing\n-    boolean lockItemOnEdit = false;\n@@ -339,6 +337,1 @@\n-        \/\/ We check the boolean lockItemOnEdit field here, as whilst we want to\n-        \/\/ updateItem normally, when it comes to unit tests we can't have the\n-        \/\/ item change in all circumstances.\n-        if (! lockItemOnEdit) {\n-            updateItem(-1);\n-        }\n+        updateItem(-1);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableCell.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,18 @@\n+    \/**\n+     * Flag which is only used in conjunction with {@link #lockItemOnStartEdit} to lock the item when\n+     * the {@link #startEdit()} method is called.\n+     *\/\n+    private boolean isStartEdit = false;\n+    \/**\n+     * Flag to lock the item value when an edit process is started.\n+     * While normally the {@link #updateItem(Object, boolean)} will change the underlying item,\n+     * when locked the item will not be changed.\n+     *\/\n+    private boolean lockItemOnStartEdit = false;\n+\n+    @Override\n+    public void startEdit() {\n+        isStartEdit = true;\n+        super.startEdit();\n+    }\n+\n@@ -31,0 +49,6 @@\n+        \/\/ startEdit() was called and wants to update the cell. When locked, we will ignore the update request.\n+        if (lockItemOnStartEdit && isStartEdit) {\n+            isStartEdit = false;\n+            return;\n+        }\n+\n@@ -34,2 +58,2 @@\n-    public static <S, T> void set_lockItemOnEdit(TableCell<S, T> tc, boolean b) {\n-        tc.lockItemOnEdit = b;\n+    public void setLockItemOnStartEdit(boolean lockItemOnEdit) {\n+        this.lockItemOnStartEdit = lockItemOnEdit;\n","filename":"modules\/javafx.controls\/src\/shims\/java\/javafx\/scene\/control\/TableCellShim.java","additions":27,"deletions":3,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,18 @@\n+    \/**\n+     * Flag which is only used in conjunction with {@link #lockItemOnStartEdit} to lock the item when\n+     * the {@link #startEdit()} method is called.\n+     *\/\n+    private boolean isStartEdit = false;\n+    \/**\n+     * Flag to lock the item value when an edit process is started.\n+     * While normally the {@link #updateItem(Object, boolean)} will change the underlying item,\n+     * when locked the item will not be changed.\n+     *\/\n+    private boolean lockItemOnStartEdit = false;\n+\n+    @Override\n+    public void startEdit() {\n+        isStartEdit = true;\n+        super.startEdit();\n+    }\n+\n@@ -31,0 +49,6 @@\n+        \/\/ startEdit() was called and wants to update the cell. When locked, we will ignore the update request.\n+        if (lockItemOnStartEdit && isStartEdit) {\n+            isStartEdit = false;\n+            return;\n+        }\n+\n@@ -34,2 +58,2 @@\n-    public static <S, T> void set_lockItemOnEdit(TreeTableCell<S, T> tc, boolean b) {\n-        tc.lockItemOnEdit = b;\n+    public void setLockItemOnStartEdit(boolean lockItemOnEdit) {\n+        this.lockItemOnStartEdit = lockItemOnEdit;\n","filename":"modules\/javafx.controls\/src\/shims\/java\/javafx\/scene\/control\/TreeTableCellShim.java","additions":27,"deletions":3,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,2 @@\n-                {TableCell.class},\n+                \/\/ Note: We use the shim here, so we can lock the item. The behaviour is the same otherwise.\n+                {TableCellShim.class},\n@@ -72,1 +73,2 @@\n-                {TreeTableCell.class}\n+                \/\/ Note: We use the shim here, so we can lock the item.  The behaviour is the same otherwise.\n+                {TreeTableCellShim.class}\n@@ -93,1 +95,1 @@\n-            TableCellShim.set_lockItemOnEdit((TableCell)cell, true);\n+            ((TableCellShim)cell).setLockItemOnStartEdit(true);\n@@ -98,1 +100,1 @@\n-            TreeTableCellShim.set_lockItemOnEdit((TreeTableCell)cell, true);\n+            ((TreeTableCellShim)cell).setLockItemOnStartEdit(true);\n@@ -277,3 +279,0 @@\n-        if ((cell instanceof TableCell)) {\n-            TableCellShim.set_lockItemOnEdit((TableCell) cell, true);\n-        }\n@@ -293,3 +292,0 @@\n-        if (cell instanceof TableCell) {\n-            TableCellShim.set_lockItemOnEdit((TableCell) cell, true);\n-        }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/CellTest.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-    private TableCell<String,String> cell;\n+    private TableCellShim<String, String> cell;\n@@ -78,1 +78,1 @@\n-        cell = new TableCell<>();\n+        cell = new TableCellShim<>();\n@@ -855,1 +855,1 @@\n-         TableCellShim.set_lockItemOnEdit(cell, true);\n+         cell.setLockItemOnStartEdit(true);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableCellTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1998,1 +1998,0 @@\n-        TableCellShim.set_lockItemOnEdit(cell, false);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewKeyInputTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    private TreeTableCell<String, String> cell;\n+    private TreeTableCellShim<String, String> cell;\n@@ -86,1 +86,1 @@\n-        cell = new TreeTableCell<>();\n+        cell = new TreeTableCellShim<>();\n@@ -1166,1 +1166,1 @@\n-         TreeTableCellShim.set_lockItemOnEdit(cell, true);\n+         cell.setLockItemOnStartEdit(true);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableCellTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}