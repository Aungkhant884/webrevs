{"files":[{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.ref.WeakReference;\n@@ -30,0 +29,1 @@\n+\n@@ -86,1 +86,8 @@\n-    public IDisconnectable addDisconnectable(IDisconnectable d) {\n+    public IDisconnectable addDisconnectable(Runnable r) {\n+        IDisconnectable d = new IDisconnectable() {\n+            @Override\n+            public void disconnect() {\n+                items.remove(this);\n+                r.run();\n+            }\n+        };\n@@ -116,0 +123,1 @@\n+                items.remove(this);\n@@ -150,0 +158,1 @@\n+                items.remove(this);\n@@ -177,0 +186,1 @@\n+                items.remove(this);\n@@ -196,121 +206,0 @@\n-    public IDisconnectable addWeakChangeListener(Runnable onChange, ObservableValue<?>... props) {\n-        return addWeakChangeListener(onChange, false, props);\n-    }\n-\n-    public IDisconnectable addWeakChangeListener(Runnable onChange, boolean fireImmediately, ObservableValue<?>... props) {\n-        if (onChange == null) {\n-            throw new NullPointerException(\"onChange must not be null.\");\n-        }\n-\n-        ChLi li = new ChLi() {\n-            WeakReference<Runnable> ref = new WeakReference(onChange);\n-\n-            @Override\n-            public void disconnect() {\n-                for (ObservableValue p : props) {\n-                    p.removeListener(this);\n-                }\n-            }\n-\n-            @Override\n-            public void changed(ObservableValue p, Object oldValue, Object newValue) {\n-                Runnable r = ref.get();\n-                if (r == null) {\n-                    disconnect();\n-                } else {\n-                    r.run();\n-                }\n-            }\n-        };\n-\n-        items.add(li);\n-\n-        for (ObservableValue p : props) {\n-            p.addListener(li);\n-        }\n-\n-        if (fireImmediately) {\n-            onChange.run();\n-        }\n-\n-        return li;\n-    }\n-\n-    public <T> IDisconnectable addWeakChangeListener(ObservableValue<T> prop, ChangeListener<T> listener) {\n-        return addChangeListener(prop, false, listener);\n-    }\n-\n-    public <T> IDisconnectable addWeakChangeListener(ObservableValue<T> prop, boolean fireImmediately, ChangeListener<T> listener) {\n-        if (listener == null) {\n-            throw new NullPointerException(\"Listener must be specified.\");\n-        }\n-\n-        ChLi<T> d = new ChLi<T>() {\n-            WeakReference<ChangeListener<T>> ref = new WeakReference<>(listener);\n-\n-            @Override\n-            public void disconnect() {\n-                prop.removeListener(this);\n-            }\n-\n-            @Override\n-            public void changed(ObservableValue<? extends T> p, T oldValue, T newValue) {\n-                ChangeListener<T> li = ref.get();\n-                if (li == null) {\n-                    disconnect();\n-                } else {\n-                    li.changed(p, oldValue, newValue);\n-                }\n-            }\n-        };\n-\n-        items.add(d);\n-        prop.addListener(d);\n-\n-        if (fireImmediately) {\n-            T v = prop.getValue();\n-            listener.changed(prop, null, v);\n-        }\n-\n-        return d;\n-    }\n-\n-    public <T> IDisconnectable addWeakChangeListener(ObservableValue<T> prop, Consumer<T> callback) {\n-        return addWeakChangeListener(prop, false, callback);\n-    }\n-\n-    public <T> IDisconnectable addWeakChangeListener(ObservableValue<T> prop, boolean fireImmediately, Consumer<T> callback) {\n-        if (callback == null) {\n-            throw new NullPointerException(\"Callback must be specified.\");\n-        }\n-\n-        ChLi<T> d = new ChLi<T>() {\n-            WeakReference<Consumer<T>> ref = new WeakReference<>(callback);\n-\n-            @Override\n-            public void disconnect() {\n-                prop.removeListener(this);\n-            }\n-\n-            @Override\n-            public void changed(ObservableValue<? extends T> observable, T oldValue, T newValue) {\n-                Consumer<T> cb = ref.get();\n-                if (cb == null) {\n-                    disconnect();\n-                } else {\n-                    cb.accept(newValue);\n-                }\n-            }\n-        };\n-\n-        items.add(d);\n-        prop.addListener(d);\n-\n-        if (fireImmediately) {\n-            T v = prop.getValue();\n-            callback.accept(v);\n-        }\n-\n-        return d;\n-    }\n-\n@@ -334,0 +223,1 @@\n+                items.remove(this);\n@@ -368,0 +258,1 @@\n+                items.remove(this);\n@@ -381,81 +272,0 @@\n-    public IDisconnectable addWeakInvalidationListener(Runnable onChange, ObservableValue<?>... props) {\n-        return addWeakInvalidationListener(onChange, false, props);\n-    }\n-\n-    public IDisconnectable addWeakInvalidationListener(Runnable onChange, boolean fireImmediately, ObservableValue<?>... props) {\n-        if (onChange == null) {\n-            throw new NullPointerException(\"onChange must not be null.\");\n-        }\n-\n-        InLi li = new InLi() {\n-            WeakReference<Runnable> ref = new WeakReference(onChange);\n-\n-            @Override\n-            public void disconnect() {\n-                for (ObservableValue p : props) {\n-                    p.removeListener(this);\n-                }\n-            }\n-\n-            @Override\n-            public void invalidated(Observable p) {\n-                Runnable r = ref.get();\n-                if (r == null) {\n-                    disconnect();\n-                } else {\n-                    r.run();\n-                }\n-            }\n-        };\n-\n-        items.add(li);\n-\n-        for (ObservableValue p : props) {\n-            p.addListener(li);\n-        }\n-\n-        if (fireImmediately) {\n-            onChange.run();\n-        }\n-\n-        return li;\n-    }\n-\n-    public IDisconnectable addWeakInvalidationListener(ObservableValue<?> prop, InvalidationListener listener) {\n-        return addWeakInvalidationListener(prop, false, listener);\n-    }\n-\n-    public IDisconnectable addWeakInvalidationListener(ObservableValue<?> prop, boolean fireImmediately, InvalidationListener listener) {\n-        if (listener == null) {\n-            throw new NullPointerException(\"Listener must be specified.\");\n-        }\n-\n-        InLi d = new InLi() {\n-            WeakReference<InvalidationListener> ref = new WeakReference<>(listener);\n-\n-            @Override\n-            public void disconnect() {\n-                prop.removeListener(this);\n-            }\n-\n-            @Override\n-            public void invalidated(Observable p) {\n-                InvalidationListener li = ref.get();\n-                if (li == null) {\n-                    disconnect();\n-                } else {\n-                    li.invalidated(p);\n-                }\n-            }\n-        };\n-\n-        items.add(d);\n-        prop.addListener(d);\n-\n-        if (fireImmediately) {\n-            listener.invalidated(prop);\n-        }\n-\n-        return d;\n-    }\n-\n@@ -473,0 +283,1 @@\n+                items.remove(this);\n@@ -482,30 +293,0 @@\n-    public <T> IDisconnectable addWeakListChangeListener(ObservableList<T> list, ListChangeListener<T> listener) {\n-        if (listener == null) {\n-            throw new NullPointerException(\"Listener must be specified.\");\n-        }\n-\n-        LiChLi<T> li = new LiChLi<T>() {\n-            WeakReference<ListChangeListener<T>> ref = new WeakReference<>(listener);\n-\n-            @Override\n-            public void disconnect() {\n-                list.removeListener(this);\n-            }\n-\n-            @Override\n-            public void onChanged(Change<? extends T> ch) {\n-                ListChangeListener<T> li = ref.get();\n-                if (li == null) {\n-                    disconnect();\n-                } else {\n-                    li.onChanged(ch);\n-                }\n-            }\n-        };\n-\n-        items.add(li);\n-        list.addListener(li);\n-\n-        return li;\n-    }\n-\n@@ -560,49 +341,0 @@\n-    public <T extends Event> IDisconnectable addWeakEventHandler(Object x, EventType<T> t, EventHandler<T> h) {\n-        WeHa<T> li = new WeHa<T>(h) {\n-            @Override\n-            public void disconnect() {\n-                if (x instanceof Node n) {\n-                    n.removeEventHandler(t, this);\n-                } else if (x instanceof Window y) {\n-                    y.removeEventHandler(t, this);\n-                } else if (x instanceof Scene y) {\n-                    y.removeEventHandler(t, this);\n-                } else if (x instanceof MenuItem y) {\n-                    y.removeEventHandler(t, this);\n-                } else if (x instanceof TreeItem y) {\n-                    y.removeEventHandler(t, this);\n-                } else if (x instanceof TableColumnBase y) {\n-                    y.removeEventHandler(t, this);\n-                } else if (x instanceof Transform y) {\n-                    y.removeEventHandler(t, this);\n-                } else if (x instanceof Task y) {\n-                    y.removeEventHandler(t, this);\n-                }\n-            }\n-        };\n-\n-        items.add(li);\n-\n-        if (x instanceof Node y) {\n-            y.addEventHandler(t, li);\n-        } else if (x instanceof Window y) {\n-            y.addEventHandler(t, li);\n-        } else if (x instanceof Scene y) {\n-            y.addEventHandler(t, li);\n-        } else if (x instanceof MenuItem y) {\n-            y.addEventHandler(t, li);\n-        } else if (x instanceof TreeItem y) {\n-            y.addEventHandler(t, li);\n-        } else if (x instanceof TableColumnBase y) {\n-            y.addEventHandler(t, li);\n-        } else if (x instanceof Transform y) {\n-            y.addEventHandler(t, li);\n-        } else if (x instanceof Task y) {\n-            y.addEventHandler(t, li);\n-        } else {\n-            throw new IllegalArgumentException(\"Cannot add weak event handler to \" + x);\n-        }\n-\n-        return li;\n-    }\n-\n@@ -644,37 +376,0 @@\n-    public <T extends Event> IDisconnectable addWeakEventFilter(Object x, EventType<T> t, EventHandler<? super T> h) {\n-        WeHa<T> li = new WeHa<T>(h) {\n-            @Override\n-            public void disconnect() {\n-                if (x instanceof Node n) {\n-                    n.removeEventFilter(t, this);\n-                } else if (x instanceof Window y) {\n-                    y.removeEventFilter(t, this);\n-                } else if (x instanceof Scene y) {\n-                    y.removeEventFilter(t, this);\n-                } else if (x instanceof Transform y) {\n-                    y.removeEventFilter(t, this);\n-                } else if (x instanceof Task y) {\n-                    y.removeEventFilter(t, this);\n-                }\n-            }\n-        };\n-\n-        items.add(li);\n-\n-        if (x instanceof Node y) {\n-            y.addEventFilter(t, li);\n-        } else if (x instanceof Window y) {\n-            y.addEventFilter(t, li);\n-        } else if (x instanceof Scene y) {\n-            y.addEventFilter(t, li);\n-        } else if (x instanceof Transform y) {\n-            y.addEventFilter(t, li);\n-        } else if (x instanceof Task y) {\n-            y.addEventFilter(t, li);\n-        } else {\n-            throw new IllegalArgumentException(\"Cannot add weak event filter to \" + x);\n-        }\n-\n-        return li;\n-    }\n-\n@@ -688,18 +383,0 @@\n-\n-    protected static abstract class WeHa<T extends Event> implements IDisconnectable, EventHandler<T> {\n-        private final WeakReference<EventHandler<? super T>> ref;\n-\n-        public WeHa(EventHandler<? super T> h) {\n-            ref = new WeakReference<>(h);\n-        }\n-\n-        @Override\n-        public void handle(T ev) {\n-            EventHandler<? super T> h = ref.get();\n-            if (h == null) {\n-                disconnect();\n-            } else {\n-                h.handle(ev);\n-            }\n-        }\n-    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/ListenerHelper.java","additions":15,"deletions":338,"binary":false,"changes":353,"status":"modified"},{"patch":"@@ -294,1 +294,1 @@\n-                sceneListenerHelper.addWeakEventFilter(scene, KeyEvent.KEY_PRESSED, (ev) -> {\n+                sceneListenerHelper.addEventFilter(scene, KeyEvent.KEY_PRESSED, (ev) -> {\n@@ -364,1 +364,1 @@\n-                sceneListenerHelper.addWeakEventFilter(scene, MouseEvent.MOUSE_CLICKED, (ev) -> {\n+                sceneListenerHelper.addEventFilter(scene, MouseEvent.MOUSE_CLICKED, (ev) -> {\n@@ -372,1 +372,1 @@\n-                sceneListenerHelper.addWeakChangeListener(scene.windowProperty(), true, (sr, oldw, w) -> {\n+                sceneListenerHelper.addChangeListener(scene.windowProperty(), true, (sr, oldw, w) -> {\n@@ -379,1 +379,1 @@\n-                        windowFocusHelper = sceneListenerHelper.addWeakChangeListener(w.focusedProperty(), true, (s, p, focused) -> {\n+                        windowFocusHelper = sceneListenerHelper.addChangeListener(w.focusedProperty(), true, (s, p, focused) -> {\n@@ -387,1 +387,1 @@\n-                sceneListenerHelper.addWeakEventFilter(scene, KeyEvent.ANY, (ev) -> {\n+                sceneListenerHelper.addEventFilter(scene, KeyEvent.ANY, (ev) -> {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/MenuBarSkin.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,408 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ListChangeListener;\n+import javafx.collections.ObservableList;\n+import javafx.concurrent.Task;\n+import javafx.event.EventTarget;\n+import javafx.scene.Group;\n+import javafx.scene.Scene;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.Region;\n+import javafx.scene.transform.Scale;\n+import javafx.stage.Stage;\n+\n+import org.junit.Test;\n+\n+import com.sun.javafx.event.EventUtil;\n+import com.sun.javafx.scene.control.ListenerHelper;\n+\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventGenerator;\n+\n+\/**\n+ * Tests ListenerHelper utility class.\n+ *\/\n+public class TestListenerHelper {\n+    @Test\n+    public void testStaticDisconnect() {\n+        AtomicInteger ct = new AtomicInteger();\n+        Group node = new Group();\n+        ListenerHelper h = ListenerHelper.get(node);\n+        assertNotNull(h);\n+\n+        h.addDisconnectable(() -> {\n+            ct.incrementAndGet();\n+        });\n+\n+        ListenerHelper.disconnect(node);\n+        assertEquals(1, ct.get());\n+    }\n+\n+    \/\/ change listeners\n+\n+    @Test\n+    public void testChangeListener_MultipleProperties() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p1 = new SimpleStringProperty();\n+        SimpleStringProperty p2 = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+\n+        h.addChangeListener(() -> ct.incrementAndGet(), p1, p2);\n+\n+        p1.set(\"1\");\n+        p2.set(\"2\");\n+        assertEquals(2, ct.get());\n+\n+        h.disconnect();\n+\n+        p1.set(\"3\");\n+        p2.set(\"4\");\n+        assertEquals(2, ct.get());\n+    }\n+\n+    @Test\n+    public void testChangeListener_MultipleProperties_FireImmediately() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p1 = new SimpleStringProperty();\n+        SimpleStringProperty p2 = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+\n+        h.addChangeListener(() -> ct.incrementAndGet(), true, p1, p2);\n+\n+        p1.set(\"1\");\n+        p2.set(\"2\");\n+        assertEquals(3, ct.get());\n+\n+        h.disconnect();\n+\n+        p1.set(\"3\");\n+        p2.set(\"4\");\n+        assertEquals(3, ct.get());\n+    }\n+\n+    @Test\n+    public void testChangeListener_Plain() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+\n+        h.addChangeListener(p, (s, old, cur) -> ct.incrementAndGet());\n+\n+        p.set(\"1\");\n+        assertEquals(1, ct.get());\n+\n+        h.disconnect();\n+\n+        p.set(\"2\");\n+        assertEquals(1, ct.get());\n+    }\n+\n+    @Test\n+    public void testChangeListener_Plain_FireImmediately() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+\n+        h.addChangeListener(p, true, (s, old, cur) -> ct.incrementAndGet());\n+\n+        p.set(\"1\");\n+        assertEquals(2, ct.get());\n+\n+        h.disconnect();\n+\n+        p.set(\"2\");\n+        assertEquals(2, ct.get());\n+    }\n+\n+    @Test\n+    public void testChangeListener_Callback() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+\n+        h.addChangeListener(p, (cur) -> ct.incrementAndGet());\n+\n+        p.set(\"1\");\n+        assertEquals(1, ct.get());\n+\n+        h.disconnect();\n+\n+        p.set(\"2\");\n+        assertEquals(1, ct.get());\n+    }\n+\n+    @Test\n+    public void testChangeListener_Callback_FireImmediately() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+\n+        h.addChangeListener(p, true, (cur) -> ct.incrementAndGet());\n+\n+        p.set(\"1\");\n+        assertEquals(2, ct.get());\n+\n+        h.disconnect();\n+\n+        p.set(\"2\");\n+        assertEquals(2, ct.get());\n+    }\n+\n+    \/\/ invalidation listeners\n+\n+    @Test\n+    public void testInvalidationListener_MultipleProperties() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p1 = new SimpleStringProperty();\n+        SimpleStringProperty p2 = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+\n+        h.addInvalidationListener(() -> ct.incrementAndGet(), p1, p2);\n+\n+        p1.set(\"1\");\n+        p2.set(\"2\");\n+        assertEquals(2, ct.get());\n+\n+        h.disconnect();\n+\n+        p1.set(\"3\");\n+        p2.set(\"4\");\n+        assertEquals(2, ct.get());\n+    }\n+\n+    @Test\n+    public void testInvalidationListener_MultipleProperties_FireImmediately() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p1 = new SimpleStringProperty();\n+        SimpleStringProperty p2 = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+\n+        h.addInvalidationListener(() -> ct.incrementAndGet(), true, p1, p2);\n+\n+        p1.set(\"1\");\n+        p2.set(\"2\");\n+        assertEquals(3, ct.get());\n+\n+        h.disconnect();\n+\n+        p1.set(\"3\");\n+        p2.set(\"4\");\n+        assertEquals(3, ct.get());\n+    }\n+\n+    @Test\n+    public void testInvalidationListener_Plain() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+\n+        h.addInvalidationListener(p, (x) -> ct.incrementAndGet());\n+\n+        p.set(\"1\");\n+        assertEquals(1, ct.get());\n+\n+        h.disconnect();\n+\n+        p.set(\"2\");\n+        assertEquals(1, ct.get());\n+    }\n+\n+    @Test\n+    public void testInvalidationListener_Plain_FireImmediately() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+\n+        h.addInvalidationListener(p, true, (x) -> ct.incrementAndGet());\n+\n+        p.set(\"1\");\n+        assertEquals(2, ct.get());\n+\n+        h.disconnect();\n+\n+        p.set(\"2\");\n+        assertEquals(2, ct.get());\n+    }\n+\n+    @Test\n+    public void testInvalidationListener_Callback() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+\n+        h.addInvalidationListener(p, (cur) -> ct.incrementAndGet());\n+\n+        p.set(\"1\");\n+        assertEquals(1, ct.get());\n+\n+        h.disconnect();\n+\n+        p.set(\"2\");\n+        assertEquals(1, ct.get());\n+    }\n+\n+    @Test\n+    public void testInvalidationListener_Callback_FireImmediately() {\n+        ListenerHelper h = new ListenerHelper();\n+        SimpleStringProperty p = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+\n+        h.addInvalidationListener(p, true, (cur) -> ct.incrementAndGet());\n+\n+        p.set(\"1\");\n+        assertEquals(2, ct.get());\n+\n+        h.disconnect();\n+\n+        p.set(\"2\");\n+        assertEquals(2, ct.get());\n+    }\n+\n+    \/\/ list change listeners\n+\n+    @Test\n+    public void testListChangeListener() {\n+        ListenerHelper h = new ListenerHelper();\n+        ObservableList<String> list = FXCollections.observableArrayList();\n+        AtomicInteger ct = new AtomicInteger();\n+        ListChangeListener<String> li = (ch) -> ct.incrementAndGet();\n+\n+        h.addListChangeListener(list, li);\n+\n+        list.add(\"1\");\n+        assertEquals(1, ct.get());\n+\n+        h.disconnect();\n+\n+        list.add(\"2\");\n+        assertEquals(1, ct.get());\n+    }\n+\n+    \/\/ event handlers\n+\n+    @Test\n+    public void testEventHandler() {\n+        EventTarget[] items = eventHandlerTargets();\n+\n+        for (EventTarget item : items) {\n+            ListenerHelper h = new ListenerHelper();\n+            AtomicInteger ct = new AtomicInteger();\n+\n+            h.addEventHandler(item, MouseEvent.ANY, (ev) -> ct.incrementAndGet());\n+\n+            MouseEvent ev = MouseEventGenerator.generateMouseEvent(MouseEvent.MOUSE_CLICKED, 0, 0);\n+            EventUtil.fireEvent(ev, item);\n+\n+            assertEquals(1, ct.get());\n+\n+            h.disconnect();\n+\n+            EventUtil.fireEvent(ev, item);\n+            assertEquals(1, ct.get());\n+        }\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testEventHandlerCheck() {\n+        ListenerHelper h = new ListenerHelper();\n+        h.addEventHandler(new Object(), MouseEvent.ANY, (ev) -> { throw new Error(); });\n+    }\n+\n+    \/\/ event filters\n+\n+    @Test\n+    public void testEventFilter() {\n+        EventTarget[] items = eventHandlerFilters();\n+\n+        for (EventTarget item : items) {\n+            ListenerHelper h = new ListenerHelper();\n+            AtomicInteger ct = new AtomicInteger();\n+\n+            h.addEventFilter(item, MouseEvent.ANY, (ev) -> ct.incrementAndGet());\n+\n+            MouseEvent ev = MouseEventGenerator.generateMouseEvent(MouseEvent.MOUSE_CLICKED, 0, 0);\n+            EventUtil.fireEvent(ev, item);\n+\n+            assertEquals(1, ct.get());\n+\n+            h.disconnect();\n+\n+            EventUtil.fireEvent(ev, item);\n+            assertEquals(1, ct.get());\n+        }\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testEventFilterCheck() {\n+        ListenerHelper h = new ListenerHelper();\n+        h.addEventFilter(new Object(), MouseEvent.ANY, (ev) -> { throw new Error(); });\n+    }\n+\n+    \/\/\n+\n+    protected EventTarget[] eventHandlerTargets() {\n+        return new EventTarget[] {\n+            new Region(),\n+            new Stage(),\n+            new Scene(new Group()),\n+            new MenuItem(),\n+            new TreeItem(),\n+            new TableColumn(),\n+            new Scale(),\n+            new Task() {\n+                @Override\n+                protected Object call() throws Exception {\n+                    return null;\n+                }\n+            }\n+        };\n+    }\n+\n+    protected EventTarget[] eventHandlerFilters() {\n+        return new EventTarget[] {\n+            new Region(),\n+            new Stage(),\n+            new Scene(new Group()),\n+            new Scale(),\n+            new Task() {\n+                @Override\n+                protected Object call() throws Exception {\n+                    return null;\n+                }\n+            }\n+        };\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TestListenerHelper.java","additions":408,"deletions":0,"binary":false,"changes":408,"status":"added"}]}