{"files":[{"patch":"@@ -30,0 +30,1 @@\n+\n@@ -49,2 +50,3 @@\n- * This class provides convenience methods for adding various listeners, both strong and weak,\n- * as well as a single {@link #disconnect()} method to remove all listeners.\n+ * This class provides convenience methods for adding various listeners, both\n+ * strong and weak, as well as a single {@link #disconnect()} method to remove\n+ * all listeners.\n@@ -54,2 +56,4 @@\n- * <li>Client code registers a number of listeners and removes them all at once via {@link #disconnect()} call.\n- * <li>Client code registers a number of listeners and removes one via its {@link IDisconnectable} instance.\n+ * <li>Client code registers a number of listeners and removes them all at once\n+ * via {@link #disconnect()} call.\n+ * <li>Client code registers a number of listeners and removes one via its\n+ * {@link IDisconnectable} instance.\n@@ -63,0 +67,1 @@\n+    private WeakReference<Object> ownerRef;\n@@ -66,0 +71,4 @@\n+    public ListenerHelper(Object owner) {\n+        ownerRef = new WeakReference<>(owner);\n+    }\n+\n@@ -74,1 +83,1 @@\n-        ListenerHelper d = new ListenerHelper();\n+        ListenerHelper d = new ListenerHelper(n);\n@@ -106,0 +115,10 @@\n+    protected boolean isAliveOrDisconnect() {\n+        if (ownerRef != null) {\n+            if (ownerRef.get() == null) {\n+                disconnect();\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n@@ -128,1 +147,3 @@\n-                onChange.run();\n+                if (isAliveOrDisconnect()) {\n+                    onChange.run();\n+                }\n@@ -154,29 +175,1 @@\n-        IDisconnectable d = new IDisconnectable() {\n-            @Override\n-            public void disconnect() {\n-                prop.removeListener(listener);\n-                items.remove(this);\n-            }\n-        };\n-\n-        items.add(d);\n-        prop.addListener(listener);\n-\n-        if (fireImmediately) {\n-            T v = prop.getValue();\n-            listener.changed(prop, null, v);\n-        }\n-\n-        return d;\n-    }\n-\n-    public <T> IDisconnectable addChangeListener(ObservableValue<T> prop, Consumer<T> callback) {\n-        return addChangeListener(prop, false, callback);\n-    }\n-\n-    public <T> IDisconnectable addChangeListener(ObservableValue<T> prop, boolean fireImmediately, Consumer<T> callback) {\n-        if (callback == null) {\n-            throw new NullPointerException(\"Callback must be specified.\");\n-        }\n-\n-        ChLi<T> d = new ChLi<T>() {\n+        ChLi<T> li = new ChLi<T>() {\n@@ -190,43 +183,3 @@\n-            public void changed(ObservableValue<? extends T> observable, T oldValue, T newValue) {\n-                callback.accept(newValue);\n-            }\n-        };\n-\n-        items.add(d);\n-        prop.addListener(d);\n-\n-        if (fireImmediately) {\n-            T v = prop.getValue();\n-            callback.accept(v);\n-        }\n-\n-        return d;\n-    }\n-\n-    public IDisconnectable addWeakChangeListener(Runnable onChange, ObservableValue<?>... props) {\n-        return addWeakChangeListener(onChange, false, props);\n-    }\n-\n-    public IDisconnectable addWeakChangeListener(Runnable onChange, boolean fireImmediately, ObservableValue<?>... props) {\n-        if (onChange == null) {\n-            throw new NullPointerException(\"onChange must not be null.\");\n-        }\n-\n-        WeakReference<Runnable> ref = new WeakReference(onChange);\n-\n-        ChLi li = new ChLi() {\n-            @Override\n-            public void disconnect() {\n-                for (ObservableValue p : props) {\n-                    p.removeListener(this);\n-                }\n-                items.remove(this);\n-            }\n-\n-            @Override\n-            public void changed(ObservableValue p, Object oldValue, Object newValue) {\n-                Runnable r = ref.get();\n-                if (r == null) {\n-                    disconnect();\n-                } else {\n-                    r.run();\n+            public void changed(ObservableValue src, T oldValue, T newValue) {\n+                if (isAliveOrDisconnect()) {\n+                    listener.changed(src, oldValue, newValue);\n@@ -238,43 +191,1 @@\n-\n-        for (ObservableValue p : props) {\n-            p.addListener(li);\n-        }\n-\n-        if (fireImmediately) {\n-            onChange.run();\n-        }\n-\n-        return li;\n-    }\n-\n-    public <T> IDisconnectable addWeakChangeListener(ObservableValue<T> prop, ChangeListener<T> listener) {\n-        return addWeakChangeListener(prop, false, listener);\n-    }\n-\n-    public <T> IDisconnectable addWeakChangeListener(ObservableValue<T> prop, boolean fireImmediately, ChangeListener<T> listener) {\n-        if (listener == null) {\n-            throw new NullPointerException(\"Listener must be specified.\");\n-        }\n-\n-        WeakReference<ChangeListener<T>> ref = new WeakReference<>(listener);\n-\n-        ChLi<T> d = new ChLi<T>() {\n-            @Override\n-            public void disconnect() {\n-                prop.removeListener(this);\n-                items.remove(this);\n-            }\n-\n-            @Override\n-            public void changed(ObservableValue<? extends T> p, T oldValue, T newValue) {\n-                ChangeListener<T> li = ref.get();\n-                if (li == null) {\n-                    disconnect();\n-                } else {\n-                    li.changed(p, oldValue, newValue);\n-                }\n-            }\n-        };\n-\n-        items.add(d);\n-        prop.addListener(d);\n+        prop.addListener(li);\n@@ -287,1 +198,1 @@\n-        return d;\n+        return li;\n@@ -290,2 +201,2 @@\n-    public <T> IDisconnectable addWeakChangeListener(ObservableValue<T> prop, Consumer<T> callback) {\n-        return addWeakChangeListener(prop, false, callback);\n+    public <T> IDisconnectable addChangeListener(ObservableValue<T> prop, Consumer<T> callback) {\n+        return addChangeListener(prop, false, callback);\n@@ -294,1 +205,1 @@\n-    public <T> IDisconnectable addWeakChangeListener(ObservableValue<T> prop, boolean fireImmediately, Consumer<T> callback) {\n+    public <T> IDisconnectable addChangeListener(ObservableValue<T> prop, boolean fireImmediately, Consumer<T> callback) {\n@@ -299,3 +210,1 @@\n-        WeakReference<Consumer<T>> ref = new WeakReference<>(callback);\n-\n-        ChLi<T> d = new ChLi<T>() {\n+        ChLi<T> li = new ChLi<T>() {\n@@ -310,5 +219,2 @@\n-                Consumer<T> cb = ref.get();\n-                if (cb == null) {\n-                    disconnect();\n-                } else {\n-                    cb.accept(newValue);\n+                if (isAliveOrDisconnect()) {\n+                    callback.accept(newValue);\n@@ -319,2 +225,2 @@\n-        items.add(d);\n-        prop.addListener(d);\n+        items.add(li);\n+        prop.addListener(li);\n@@ -327,1 +233,1 @@\n-        return d;\n+        return li;\n@@ -352,1 +258,3 @@\n-                callback.run();\n+                if (isAliveOrDisconnect()) {\n+                    callback.run();\n+                }\n@@ -378,29 +286,0 @@\n-        IDisconnectable d = new IDisconnectable() {\n-            @Override\n-            public void disconnect() {\n-                prop.removeListener(listener);\n-                items.remove(this);\n-            }\n-        };\n-\n-        items.add(d);\n-        prop.addListener(listener);\n-\n-        if (fireImmediately) {\n-            listener.invalidated(prop);\n-        }\n-\n-        return d;\n-    }\n-\n-    public IDisconnectable addWeakInvalidationListener(Runnable onChange, ObservableValue<?>... props) {\n-        return addWeakInvalidationListener(onChange, false, props);\n-    }\n-\n-    public IDisconnectable addWeakInvalidationListener(Runnable onChange, boolean fireImmediately, ObservableValue<?>... props) {\n-        if (onChange == null) {\n-            throw new NullPointerException(\"onChange must not be null.\");\n-        }\n-\n-        WeakReference<Runnable> ref = new WeakReference(onChange);\n-\n@@ -408,44 +287,0 @@\n-            @Override\n-            public void disconnect() {\n-                for (ObservableValue p : props) {\n-                    p.removeListener(this);\n-                }\n-                items.remove(this);\n-            }\n-\n-            @Override\n-            public void invalidated(Observable p) {\n-                Runnable r = ref.get();\n-                if (r == null) {\n-                    disconnect();\n-                } else {\n-                    r.run();\n-                }\n-            }\n-        };\n-\n-        items.add(li);\n-\n-        for (ObservableValue p : props) {\n-            p.addListener(li);\n-        }\n-\n-        if (fireImmediately) {\n-            onChange.run();\n-        }\n-\n-        return li;\n-    }\n-\n-    public IDisconnectable addWeakInvalidationListener(ObservableValue<?> prop, InvalidationListener listener) {\n-        return addWeakInvalidationListener(prop, false, listener);\n-    }\n-\n-    public IDisconnectable addWeakInvalidationListener(ObservableValue<?> prop, boolean fireImmediately, InvalidationListener listener) {\n-        if (listener == null) {\n-            throw new NullPointerException(\"Listener must be specified.\");\n-        }\n-\n-        WeakReference<InvalidationListener> ref = new WeakReference<>(listener);\n-\n-        InLi d = new InLi() {\n@@ -459,6 +294,3 @@\n-            public void invalidated(Observable p) {\n-                InvalidationListener li = ref.get();\n-                if (li == null) {\n-                    disconnect();\n-                } else {\n-                    li.invalidated(p);\n+            public void invalidated(Observable observable) {\n+                if (isAliveOrDisconnect()) {\n+                    listener.invalidated(observable);\n@@ -469,2 +301,2 @@\n-        items.add(d);\n-        prop.addListener(d);\n+        items.add(li);\n+        prop.addListener(li);\n@@ -476,1 +308,1 @@\n-        return d;\n+        return li;\n@@ -486,21 +318,0 @@\n-        IDisconnectable d = new IDisconnectable() {\n-            @Override\n-            public void disconnect() {\n-                list.removeListener(listener);\n-                items.remove(this);\n-            }\n-        };\n-\n-        items.add(d);\n-        list.addListener(listener);\n-\n-        return d;\n-    }\n-\n-    public <T> IDisconnectable addWeakListChangeListener(ObservableList<T> list, ListChangeListener<T> listener) {\n-        if (listener == null) {\n-            throw new NullPointerException(\"Listener must be specified.\");\n-        }\n-\n-        WeakReference<ListChangeListener<T>> ref = new WeakReference<>(listener);\n-\n@@ -516,5 +327,2 @@\n-                ListChangeListener<T> li = ref.get();\n-                if (li == null) {\n-                    disconnect();\n-                } else {\n-                    li.onChanged(ch);\n+                if (isAliveOrDisconnect()) {\n+                    listener.onChanged(ch);\n@@ -533,48 +341,2 @@\n-    public <T extends Event> IDisconnectable addEventHandler(Object x, EventType<T> t, EventHandler<T> h) {\n-\n-        \/\/ we really need an interface here ... \"HasEventHandlers\"\n-        IDisconnectable d = addDisconnectable(() -> {\n-            if (x instanceof Node n) {\n-                n.removeEventHandler(t, h);\n-            } else if (x instanceof Window y) {\n-                y.removeEventHandler(t, h);\n-            } else if (x instanceof Scene y) {\n-                y.removeEventHandler(t, h);\n-            } else if (x instanceof MenuItem y) {\n-                y.removeEventHandler(t, h);\n-            } else if (x instanceof TreeItem y) {\n-                y.removeEventHandler(t, h);\n-            } else if (x instanceof TableColumnBase y) {\n-                y.removeEventHandler(t, h);\n-            } else if (x instanceof Transform y) {\n-                y.removeEventHandler(t, h);\n-            } else if (x instanceof Task y) {\n-                y.removeEventHandler(t, h);\n-            }\n-        });\n-\n-        if (x instanceof Node y) {\n-            y.addEventHandler(t, h);\n-        } else if (x instanceof Window y) {\n-            y.addEventHandler(t, h);\n-        } else if (x instanceof Scene y) {\n-            y.addEventHandler(t, h);\n-        } else if (x instanceof MenuItem y) {\n-            y.addEventHandler(t, h);\n-        } else if (x instanceof TreeItem y) {\n-            y.addEventHandler(t, h);\n-        } else if (x instanceof TableColumnBase y) {\n-            y.addEventHandler(t, h);\n-        } else if (x instanceof Transform y) {\n-            y.addEventHandler(t, h);\n-        } else if (x instanceof Task y) {\n-            y.addEventHandler(t, h);\n-        } else {\n-            throw new IllegalArgumentException(\"Cannot add event handler to \" + x);\n-        }\n-\n-        return d;\n-    }\n-\n-    public <T extends Event> IDisconnectable addWeakEventHandler(Object x, EventType<T> t, EventHandler<T> h) {\n-        WeHa<T> li = new WeHa<T>(h) {\n+    public <T extends Event> IDisconnectable addEventHandler(Object x, EventType<T> t, EventHandler<T> handler) {\n+        EvHa<T> h = new EvHa<>(handler) {\n@@ -600,1 +362,0 @@\n-                items.remove(this);\n@@ -604,1 +365,1 @@\n-        items.add(li);\n+        items.add(h);\n@@ -606,0 +367,1 @@\n+        \/\/ we really need an interface here ... \"HasEventHandlers\"\n@@ -607,1 +369,1 @@\n-            y.addEventHandler(t, li);\n+            y.addEventHandler(t, h);\n@@ -609,1 +371,1 @@\n-            y.addEventHandler(t, li);\n+            y.addEventHandler(t, h);\n@@ -611,1 +373,1 @@\n-            y.addEventHandler(t, li);\n+            y.addEventHandler(t, h);\n@@ -613,1 +375,1 @@\n-            y.addEventHandler(t, li);\n+            y.addEventHandler(t, h);\n@@ -615,1 +377,1 @@\n-            y.addEventHandler(t, li);\n+            y.addEventHandler(t, h);\n@@ -617,1 +379,1 @@\n-            y.addEventHandler(t, li);\n+            y.addEventHandler(t, h);\n@@ -619,1 +381,1 @@\n-            y.addEventHandler(t, li);\n+            y.addEventHandler(t, h);\n@@ -621,1 +383,1 @@\n-            y.addEventHandler(t, li);\n+            y.addEventHandler(t, h);\n@@ -623,1 +385,1 @@\n-            throw new IllegalArgumentException(\"Cannot add weak event handler to \" + x);\n+            throw new IllegalArgumentException(\"Cannot add event handler to \" + x);\n@@ -626,1 +388,1 @@\n-        return li;\n+        return h;\n@@ -631,35 +393,2 @@\n-    public <T extends Event> IDisconnectable addEventFilter(Object x, EventType<T> t, EventHandler<T> h) {\n-        \/\/ we really need an interface here ... \"HasEventFilters\"\n-        IDisconnectable d = addDisconnectable(() -> {\n-            if (x instanceof Node n) {\n-                n.removeEventFilter(t, h);\n-            } else if (x instanceof Window y) {\n-                y.removeEventFilter(t, h);\n-            } else if (x instanceof Scene y) {\n-                y.removeEventFilter(t, h);\n-            } else if (x instanceof Transform y) {\n-                y.removeEventFilter(t, h);\n-            } else if (x instanceof Task y) {\n-                y.removeEventFilter(t, h);\n-            }\n-        });\n-\n-        if (x instanceof Node y) {\n-            y.addEventFilter(t, h);\n-        } else if (x instanceof Window y) {\n-            y.addEventFilter(t, h);\n-        } else if (x instanceof Scene y) {\n-            y.addEventFilter(t, h);\n-        } else if (x instanceof Transform y) {\n-            y.addEventFilter(t, h);\n-        } else if (x instanceof Task y) {\n-            y.addEventFilter(t, h);\n-        } else {\n-            throw new IllegalArgumentException(\"Cannot add event filter to \" + x);\n-        }\n-\n-        return d;\n-    }\n-\n-    public <T extends Event> IDisconnectable addWeakEventFilter(Object x, EventType<T> t, EventHandler<? super T> h) {\n-        WeHa<T> li = new WeHa<T>(h) {\n+    public <T extends Event> IDisconnectable addEventFilter(Object x, EventType<T> t, EventHandler<T> handler) {\n+        EvHa<T> h = new EvHa<>(handler) {\n@@ -679,1 +408,0 @@\n-                items.remove(this);\n@@ -683,1 +411,1 @@\n-        items.add(li);\n+        items.add(h);\n@@ -685,0 +413,1 @@\n+        \/\/ we really need an interface here ... \"HasEventFilters\"\n@@ -686,1 +415,1 @@\n-            y.addEventFilter(t, li);\n+            y.addEventFilter(t, h);\n@@ -688,1 +417,1 @@\n-            y.addEventFilter(t, li);\n+            y.addEventFilter(t, h);\n@@ -690,1 +419,1 @@\n-            y.addEventFilter(t, li);\n+            y.addEventFilter(t, h);\n@@ -692,1 +421,1 @@\n-            y.addEventFilter(t, li);\n+            y.addEventFilter(t, h);\n@@ -694,1 +423,1 @@\n-            y.addEventFilter(t, li);\n+            y.addEventFilter(t, h);\n@@ -696,1 +425,1 @@\n-            throw new IllegalArgumentException(\"Cannot add weak event filter to \" + x);\n+            throw new IllegalArgumentException(\"Cannot add event filter to \" + x);\n@@ -699,1 +428,1 @@\n-        return li;\n+        return h;\n@@ -710,2 +439,2 @@\n-    protected static abstract class WeHa<T extends Event> implements IDisconnectable, EventHandler<T> {\n-        private final WeakReference<EventHandler<? super T>> ref;\n+    protected abstract class EvHa<T extends Event> implements IDisconnectable, EventHandler<T> {\n+        private final EventHandler<T> handler;\n@@ -713,2 +442,2 @@\n-        public WeHa(EventHandler<? super T> h) {\n-            ref = new WeakReference<>(h);\n+        public EvHa(EventHandler<T> h) {\n+            this.handler = h;\n@@ -719,5 +448,2 @@\n-            EventHandler<? super T> h = ref.get();\n-            if (h == null) {\n-                disconnect();\n-            } else {\n-                h.handle(ev);\n+            if (isAliveOrDisconnect()) {\n+                handler.handle(ev);\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/ListenerHelper.java","additions":84,"deletions":358,"binary":false,"changes":442,"status":"modified"},{"patch":"@@ -291,1 +291,1 @@\n-                sceneListenerHelper = new ListenerHelper();\n+                sceneListenerHelper = new ListenerHelper(MenuBarSkin.this);\n@@ -294,1 +294,1 @@\n-                sceneListenerHelper.addWeakEventFilter(scene, KeyEvent.KEY_PRESSED, (ev) -> {\n+                sceneListenerHelper.addEventFilter(scene, KeyEvent.KEY_PRESSED, (ev) -> {\n@@ -364,1 +364,1 @@\n-                sceneListenerHelper.addWeakEventFilter(scene, MouseEvent.MOUSE_CLICKED, (ev) -> {\n+                sceneListenerHelper.addEventFilter(scene, MouseEvent.MOUSE_CLICKED, (ev) -> {\n@@ -372,1 +372,1 @@\n-                sceneListenerHelper.addWeakChangeListener(scene.windowProperty(), true, (sr, oldw, w) -> {\n+                sceneListenerHelper.addChangeListener(scene.windowProperty(), true, (sr, oldw, w) -> {\n@@ -379,1 +379,1 @@\n-                        windowFocusHelper = sceneListenerHelper.addWeakChangeListener(w.focusedProperty(), true, (s, p, focused) -> {\n+                        windowFocusHelper = sceneListenerHelper.addChangeListener(w.focusedProperty(), true, (s, p, focused) -> {\n@@ -387,1 +387,1 @@\n-                sceneListenerHelper.addWeakEventFilter(scene, KeyEvent.ANY, (ev) -> {\n+                sceneListenerHelper.addEventFilter(scene, KeyEvent.ANY, (ev) -> {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/MenuBarSkin.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.util.function.Consumer;\n@@ -34,1 +33,0 @@\n-import javafx.beans.InvalidationListener;\n@@ -36,1 +34,0 @@\n-import javafx.beans.value.ChangeListener;\n@@ -41,1 +38,0 @@\n-import javafx.event.EventHandler;\n@@ -80,0 +76,29 @@\n+    @Test\n+    public void testCheckAlive() {\n+        Object owner = new Object();\n+        WeakReference<Object> ref = new WeakReference<>(owner);\n+        SimpleStringProperty p = new SimpleStringProperty();\n+        AtomicInteger ct = new AtomicInteger();\n+        AtomicInteger disconnected = new AtomicInteger();\n+\n+        ListenerHelper h = new ListenerHelper(owner);\n+\n+        h.addChangeListener(p, (v) -> ct.incrementAndGet());\n+        h.addDisconnectable(() -> disconnected.incrementAndGet());\n+\n+        \/\/ check that the listener is working\n+        p.set(\"1\");\n+        assertEquals(1, ct.get());\n+\n+        \/\/ collect\n+        owner = null;\n+        JMemoryBuddy.assertCollectable(ref);\n+\n+        \/\/ fire an event that should be ignored\n+        p.set(\"2\");\n+        assertEquals(1, ct.get());\n+\n+        \/\/ check that helper has disconnected all its items\n+        assertEquals(1, disconnected.get());\n+    }\n+\n@@ -190,132 +215,0 @@\n-    @Test\n-    public void testWeakChangeListener_MultipleProperties() {\n-        ListenerHelper h = new ListenerHelper();\n-        SimpleStringProperty p1 = new SimpleStringProperty();\n-        SimpleStringProperty p2 = new SimpleStringProperty();\n-        AtomicInteger ct = new AtomicInteger();\n-        Runnable li = () -> ct.incrementAndGet();\n-        WeakReference<Runnable> ref = new WeakReference<>(li);\n-\n-        h.addWeakChangeListener(li, p1, p2);\n-\n-        p1.set(\"1\");\n-        p2.set(\"2\");\n-        assertEquals(2, ct.get());\n-\n-        li = null;\n-\n-        JMemoryBuddy.assertCollectable(ref);\n-\n-        p1.set(\"3\");\n-        p2.set(\"4\");\n-        assertEquals(2, ct.get());\n-    }\n-\n-    @Test\n-    public void testWeakChangeListener_MultipleProperties_FireImmediately() {\n-        ListenerHelper h = new ListenerHelper();\n-        SimpleStringProperty p1 = new SimpleStringProperty();\n-        SimpleStringProperty p2 = new SimpleStringProperty();\n-        AtomicInteger ct = new AtomicInteger();\n-        Runnable li = () -> ct.incrementAndGet();\n-        WeakReference<Runnable> ref = new WeakReference<>(li);\n-\n-        h.addWeakChangeListener(() -> ct.incrementAndGet(), true, p1, p2);\n-\n-        p1.set(\"1\");\n-        p2.set(\"2\");\n-        assertEquals(3, ct.get());\n-\n-        li = null;\n-\n-        JMemoryBuddy.assertCollectable(ref);\n-\n-        p1.set(\"3\");\n-        p2.set(\"4\");\n-        assertEquals(3, ct.get());\n-    }\n-\n-    @Test\n-    public void testWeakChangeListener_Plain() {\n-        ListenerHelper h = new ListenerHelper();\n-        SimpleStringProperty p = new SimpleStringProperty();\n-        AtomicInteger ct = new AtomicInteger();\n-        ChangeListener<String> li = (src, old, cur) -> ct.incrementAndGet();\n-        WeakReference<ChangeListener<String>> ref = new WeakReference<>(li);\n-\n-        h.addWeakChangeListener(p, li);\n-\n-        p.set(\"1\");\n-        assertEquals(1, ct.get());\n-\n-        li = null;\n-\n-        JMemoryBuddy.assertCollectable(ref);\n-\n-        p.set(\"2\");\n-        assertEquals(1, ct.get());\n-    }\n-\n-    @Test\n-    public void testWeakChangeListener_Plain_FireImmediately() {\n-        ListenerHelper h = new ListenerHelper();\n-        SimpleStringProperty p = new SimpleStringProperty();\n-        AtomicInteger ct = new AtomicInteger();\n-        ChangeListener<String> li = (src, old, cur) -> ct.incrementAndGet();\n-        WeakReference<ChangeListener<String>> ref = new WeakReference<>(li);\n-\n-        h.addWeakChangeListener(p, true, li);\n-\n-        p.set(\"1\");\n-        assertEquals(2, ct.get());\n-\n-        li = null;\n-\n-        JMemoryBuddy.assertCollectable(ref);\n-\n-        p.set(\"2\");\n-        assertEquals(2, ct.get());\n-    }\n-\n-    @Test\n-    public void testWeakChangeListener_Callback() {\n-        ListenerHelper h = new ListenerHelper();\n-        SimpleStringProperty p = new SimpleStringProperty();\n-        AtomicInteger ct = new AtomicInteger();\n-        Consumer<String> li = (s) -> ct.incrementAndGet();\n-        WeakReference<Consumer<String>> ref = new WeakReference<>(li);\n-\n-        h.addWeakChangeListener(p, li);\n-\n-        p.set(\"1\");\n-        assertEquals(1, ct.get());\n-\n-        li = null;\n-\n-        JMemoryBuddy.assertCollectable(ref);\n-\n-        p.set(\"2\");\n-        assertEquals(1, ct.get());\n-    }\n-\n-    @Test\n-    public void testWeakChangeListener_Callback_FireImmediately() {\n-        ListenerHelper h = new ListenerHelper();\n-        SimpleStringProperty p = new SimpleStringProperty();\n-        AtomicInteger ct = new AtomicInteger();\n-        Consumer<String> li = (s) -> ct.incrementAndGet();\n-        WeakReference<Consumer<String>> ref = new WeakReference<>(li);\n-\n-        h.addWeakChangeListener(p, true, li);\n-\n-        p.set(\"1\");\n-        assertEquals(2, ct.get());\n-\n-        li = null;\n-\n-        JMemoryBuddy.assertCollectable(ref);\n-\n-        p.set(\"2\");\n-        assertEquals(2, ct.get());\n-    }\n-\n@@ -432,90 +325,0 @@\n-    @Test\n-    public void testWeakInvalidationListener_MultipleProperties() {\n-        ListenerHelper h = new ListenerHelper();\n-        SimpleStringProperty p1 = new SimpleStringProperty();\n-        SimpleStringProperty p2 = new SimpleStringProperty();\n-        AtomicInteger ct = new AtomicInteger();\n-        Runnable li = () -> ct.incrementAndGet();\n-        WeakReference<Runnable> ref = new WeakReference<>(li);\n-\n-        h.addWeakInvalidationListener(li, p1, p2);\n-\n-        p1.set(\"1\");\n-        p2.set(\"2\");\n-        assertEquals(2, ct.get());\n-\n-        li = null;\n-\n-        JMemoryBuddy.assertCollectable(ref);\n-\n-        p1.set(\"3\");\n-        p2.set(\"4\");\n-        assertEquals(2, ct.get());\n-    }\n-\n-    @Test\n-    public void testWeakInvalidationListener_MultipleProperties_FireImmediately() {\n-        ListenerHelper h = new ListenerHelper();\n-        SimpleStringProperty p1 = new SimpleStringProperty();\n-        SimpleStringProperty p2 = new SimpleStringProperty();\n-        AtomicInteger ct = new AtomicInteger();\n-        Runnable li = () -> ct.incrementAndGet();\n-        WeakReference<Runnable> ref = new WeakReference<>(li);\n-\n-        h.addWeakInvalidationListener(() -> ct.incrementAndGet(), true, p1, p2);\n-\n-        p1.set(\"1\");\n-        p2.set(\"2\");\n-        assertEquals(3, ct.get());\n-\n-        li = null;\n-\n-        JMemoryBuddy.assertCollectable(ref);\n-\n-        p1.set(\"3\");\n-        p2.set(\"4\");\n-        assertEquals(3, ct.get());\n-    }\n-\n-    @Test\n-    public void testWeakInvalidationListener_Plain() {\n-        ListenerHelper h = new ListenerHelper();\n-        SimpleStringProperty p = new SimpleStringProperty();\n-        AtomicInteger ct = new AtomicInteger();\n-        InvalidationListener li = (x) -> ct.incrementAndGet();\n-        WeakReference<InvalidationListener> ref = new WeakReference<>(li);\n-\n-        h.addWeakInvalidationListener(p, li);\n-\n-        p.set(\"1\");\n-        assertEquals(1, ct.get());\n-\n-        li = null;\n-\n-        JMemoryBuddy.assertCollectable(ref);\n-\n-        p.set(\"2\");\n-        assertEquals(1, ct.get());\n-    }\n-\n-    @Test\n-    public void testWeakInvalidationListener_Plain_FireImmediately() {\n-        ListenerHelper h = new ListenerHelper();\n-        SimpleStringProperty p = new SimpleStringProperty();\n-        AtomicInteger ct = new AtomicInteger();\n-        InvalidationListener li = (x) -> ct.incrementAndGet();\n-        WeakReference<InvalidationListener> ref = new WeakReference<>(li);\n-\n-        h.addWeakInvalidationListener(p, true, li);\n-\n-        p.set(\"1\");\n-        assertEquals(2, ct.get());\n-\n-        li = null;\n-\n-        JMemoryBuddy.assertCollectable(ref);\n-\n-        p.set(\"2\");\n-        assertEquals(2, ct.get());\n-    }\n-\n@@ -542,20 +345,0 @@\n-    @Test\n-    public void testWeakListChangeListener() {\n-        ListenerHelper h = new ListenerHelper();\n-        ObservableList<String> list = FXCollections.observableArrayList();\n-        AtomicInteger ct = new AtomicInteger();\n-        ListChangeListener<String> li = (ch) -> ct.incrementAndGet();\n-        WeakReference<ListChangeListener<String>> ref = new WeakReference<>(li);\n-\n-        h.addWeakListChangeListener(list, li);\n-\n-        list.add(\"1\");\n-        assertEquals(1, ct.get());\n-\n-        li = null;\n-        JMemoryBuddy.assertCollectable(ref);\n-\n-        list.add(\"2\");\n-        assertEquals(1, ct.get());\n-    }\n-\n@@ -586,25 +369,0 @@\n-    @Test\n-    public void testWeakEventHandler() {\n-        EventTarget[] items = eventHandlerTargets();\n-\n-        for (EventTarget item : items) {\n-            ListenerHelper h = new ListenerHelper();\n-            AtomicInteger ct = new AtomicInteger();\n-            EventHandler<MouseEvent> li = (ev) -> ct.incrementAndGet();\n-            WeakReference<EventHandler<MouseEvent>> ref = new WeakReference(li);\n-\n-            h.addWeakEventHandler(item, MouseEvent.ANY, li);\n-\n-            MouseEvent ev = MouseEventGenerator.generateMouseEvent(MouseEvent.MOUSE_CLICKED, 0, 0);\n-            EventUtil.fireEvent(ev, item);\n-\n-            assertEquals(1, ct.get());\n-\n-            li = null;\n-            JMemoryBuddy.assertCollectable(ref);\n-\n-            EventUtil.fireEvent(ev, item);\n-            assertEquals(1, ct.get());\n-        }\n-    }\n-\n@@ -641,25 +399,0 @@\n-    @Test\n-    public void testWeakEventFilter() {\n-        EventTarget[] items = eventHandlerFilters();\n-\n-        for (EventTarget item : items) {\n-            ListenerHelper h = new ListenerHelper();\n-            AtomicInteger ct = new AtomicInteger();\n-            EventHandler<MouseEvent> li = (ev) -> ct.incrementAndGet();\n-            WeakReference<EventHandler<MouseEvent>> ref = new WeakReference(li);\n-\n-            h.addWeakEventFilter(item, MouseEvent.ANY, li);\n-\n-            MouseEvent ev = MouseEventGenerator.generateMouseEvent(MouseEvent.MOUSE_CLICKED, 0, 0);\n-            EventUtil.fireEvent(ev, item);\n-\n-            assertEquals(1, ct.get());\n-\n-            li = null;\n-            JMemoryBuddy.assertCollectable(ref);\n-\n-            EventUtil.fireEvent(ev, item);\n-            assertEquals(1, ct.get());\n-        }\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TestListenerHelper.java","additions":29,"deletions":296,"binary":false,"changes":325,"status":"modified"}]}