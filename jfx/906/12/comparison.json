{"files":[{"patch":"@@ -28,1 +28,13 @@\n-import static com.sun.javafx.FXPermissions.ACCESS_WINDOW_LIST_PERMISSION;\n+import java.lang.ref.Reference;\n+import java.lang.ref.WeakReference;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.WeakHashMap;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n@@ -30,6 +42,0 @@\n-import com.sun.javafx.scene.traversal.Direction;\n-import javafx.css.converter.EnumConverter;\n-import javafx.css.converter.SizeConverter;\n-import com.sun.javafx.scene.control.MenuBarButton;\n-import com.sun.javafx.scene.control.skin.Utils;\n-import com.sun.javafx.scene.traversal.ParentTraversalEngine;\n@@ -51,0 +57,2 @@\n+import javafx.css.converter.EnumConverter;\n+import javafx.css.converter.SizeConverter;\n@@ -53,1 +61,0 @@\n-import javafx.event.WeakEventHandler;\n@@ -69,0 +76,1 @@\n+import javafx.scene.input.KeyCode;\n@@ -74,0 +82,2 @@\n+import javafx.stage.Window;\n+import javafx.util.Pair;\n@@ -75,12 +85,1 @@\n-import static javafx.scene.input.KeyCode.*;\n-\n-import java.lang.ref.Reference;\n-import java.lang.ref.WeakReference;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.WeakHashMap;\n-\n+import com.sun.javafx.FXPermissions;\n@@ -91,0 +90,5 @@\n+import com.sun.javafx.scene.control.IDisconnectable;\n+import com.sun.javafx.scene.control.ListenerHelper;\n+import com.sun.javafx.scene.control.MenuBarButton;\n+import com.sun.javafx.scene.traversal.Direction;\n+import com.sun.javafx.scene.traversal.ParentTraversalEngine;\n@@ -92,8 +96,0 @@\n-import java.util.function.Predicate;\n-import java.util.stream.Collectors;\n-\n-import javafx.stage.Window;\n-import javafx.util.Pair;\n-\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -119,1 +115,1 @@\n-            ACCESS_WINDOW_LIST_PERMISSION);\n+            FXPermissions.ACCESS_WINDOW_LIST_PERMISSION);\n@@ -145,8 +141,0 @@\n-    private WeakEventHandler<KeyEvent> weakSceneKeyEventHandler;\n-    private WeakEventHandler<MouseEvent> weakSceneMouseEventHandler;\n-    private WeakEventHandler<KeyEvent> weakSceneAltKeyEventHandler;\n-    private WeakChangeListener<Boolean> weakWindowFocusListener;\n-    private WeakChangeListener<Window> weakWindowSceneListener;\n-    private EventHandler<KeyEvent> keyEventHandler;\n-    private EventHandler<KeyEvent> altKeyEventHandler;\n-    private EventHandler<MouseEvent> mouseEventHandler;\n@@ -154,0 +142,1 @@\n+    private WeakChangeListener<Boolean> weakMenuBarFocusedPropertyListener;\n@@ -156,0 +145,3 @@\n+    private WeakChangeListener<Boolean> weakMenuVisibilityChangeListener;\n+    private ListenerHelper sceneListenerHelper;\n+    private IDisconnectable windowFocusHelper;\n@@ -158,1 +150,0 @@\n-\n@@ -215,1 +206,0 @@\n-\n@@ -236,69 +226,0 @@\n-        \/\/ Key navigation\n-        keyEventHandler = event -> {\n-            \/\/ process right left and may be tab key events\n-            if (focusedMenu != null) {\n-                switch (event.getCode()) {\n-                    case LEFT: {\n-                        boolean isRTL = control.getEffectiveNodeOrientation() == NodeOrientation.RIGHT_TO_LEFT;\n-                        if (control.getScene().getWindow().isFocused()) {\n-                            if (openMenu != null && !openMenu.isShowing()) {\n-                                if (isRTL) {\n-                                    moveToMenu(Direction.NEXT, false); \/\/ just move the selection bar\n-                                } else {\n-                                    moveToMenu(Direction.PREVIOUS, false); \/\/ just move the selection bar\n-                                }\n-                                event.consume();\n-                                return;\n-                            }\n-                            if (isRTL) {\n-                                moveToMenu(Direction.NEXT, true);\n-                            } else {\n-                                moveToMenu(Direction.PREVIOUS, true);\n-                            }\n-                        }\n-                        event.consume();\n-                        break;\n-                    }\n-                    case RIGHT:\n-                    {\n-                        boolean isRTL = control.getEffectiveNodeOrientation() == NodeOrientation.RIGHT_TO_LEFT;\n-                        if (control.getScene().getWindow().isFocused()) {\n-                            if (openMenu != null && !openMenu.isShowing()) {\n-                                if (isRTL) {\n-                                    moveToMenu(Direction.PREVIOUS, false); \/\/ just move the selection bar\n-                                } else {\n-                                    moveToMenu(Direction.NEXT, false); \/\/ just move the selection bar\n-                                }\n-                                event.consume();\n-                                return;\n-                            }\n-                            if (isRTL) {\n-                                moveToMenu(Direction.PREVIOUS, true);\n-                            } else {\n-                                moveToMenu(Direction.NEXT, true);\n-                            }\n-                        }\n-                        event.consume();\n-                        break;\n-                    }\n-                    case DOWN:\n-                    \/\/case SPACE:\n-                    \/\/case ENTER:\n-                        \/\/ RT-18859: Doing nothing for space and enter\n-                        if (control.getScene().getWindow().isFocused()) {\n-                            if (focusedMenuIndex != -1) {\n-                                Menu menuToOpen = getSkinnable().getMenus().get(focusedMenuIndex);\n-                                showMenu(menuToOpen, true);\n-                                event.consume();\n-                            }\n-                        }\n-                        break;\n-                    case ESCAPE:\n-                        unSelectMenus();\n-                        event.consume();\n-                        break;\n-                default:\n-                    break;\n-                }\n-            }\n-        };\n@@ -315,12 +236,0 @@\n-         };\n-        weakSceneKeyEventHandler = new WeakEventHandler<KeyEvent>(keyEventHandler);\n-        Utils.executeOnceWhenPropertyIsNonNull(control.sceneProperty(), (Scene scene) -> {\n-            scene.addEventFilter(KeyEvent.KEY_PRESSED, weakSceneKeyEventHandler);\n-        });\n-\n-        \/\/ When we click else where in the scene - menu selection should be cleared.\n-        mouseEventHandler = t -> {\n-            Bounds containerScreenBounds = container.localToScreen(container.getLayoutBounds());\n-            if (containerScreenBounds == null || !containerScreenBounds.contains(t.getScreenX(), t.getScreenY())) {\n-                unSelectMenus();\n-            }\n@@ -328,25 +237,1 @@\n-        weakSceneMouseEventHandler = new WeakEventHandler<MouseEvent>(mouseEventHandler);\n-        Utils.executeOnceWhenPropertyIsNonNull(control.sceneProperty(), (Scene scene) -> {\n-            scene.addEventFilter(MouseEvent.MOUSE_CLICKED, weakSceneMouseEventHandler);\n-        });\n-\n-        weakWindowFocusListener = new WeakChangeListener<Boolean>((ov, t, t1) -> {\n-            if (!t1) {\n-              unSelectMenus();\n-            }\n-        });\n-        \/\/ When the parent window looses focus - menu selection should be cleared\n-        Utils.executeOnceWhenPropertyIsNonNull(control.sceneProperty(), (Scene scene) -> {\n-            if (scene.getWindow() != null) {\n-                scene.getWindow().focusedProperty().addListener(weakWindowFocusListener);\n-            } else {\n-                ChangeListener<Window> sceneWindowListener = (observable, oldValue, newValue) -> {\n-                    if (oldValue != null)\n-                        oldValue.focusedProperty().removeListener(weakWindowFocusListener);\n-                    if (newValue != null)\n-                        newValue.focusedProperty().addListener(weakWindowFocusListener);\n-                };\n-                weakWindowSceneListener = new WeakChangeListener<>(sceneWindowListener);\n-                scene.windowProperty().addListener(weakWindowSceneListener);\n-            }\n-        });\n+        weakMenuBarFocusedPropertyListener = new WeakChangeListener(menuBarFocusedPropertyListener);\n@@ -357,0 +242,3 @@\n+        weakMenuVisibilityChangeListener = new WeakChangeListener(menuVisibilityChangeListener);\n+\n+        ListenerHelper lh = ListenerHelper.get(this);\n@@ -359,1 +247,1 @@\n-        control.getMenus().addListener((ListChangeListener<Menu>) c -> {\n+        lh.addListChangeListener(control.getMenus(), (v) -> {\n@@ -364,1 +252,1 @@\n-            control.useSystemMenuBarProperty().addListener(valueModel -> {\n+            lh.addInvalidationListener(control.useSystemMenuBarProperty(), (v) -> {\n@@ -391,26 +279,0 @@\n-        altKeyEventHandler = e -> {\n-            if (e.getEventType() == KeyEvent.KEY_PRESSED) {\n-                \/\/ Clear menu selection when ALT is pressed by itself\n-                altKeyPressed = false;\n-                if (e.getCode() == ALT && !e.isConsumed()) {\n-                    if (focusedMenuIndex == -1) {\n-                        altKeyPressed = true;\n-                    }\n-                    unSelectMenus();\n-                }\n-            } else if (e.getEventType() == KeyEvent.KEY_RELEASED) {\n-                \/\/ Put focus on the first menu when ALT is released\n-                \/\/ directly after being pressed by itself\n-                if (altKeyPressed && e.getCode() == ALT && !e.isConsumed()) {\n-                    firstMenuRunnable.run();\n-                }\n-                altKeyPressed = false;\n-            }\n-        };\n-        weakSceneAltKeyEventHandler = new WeakEventHandler<>(altKeyEventHandler);\n-\n-        Utils.executeOnceWhenPropertyIsNonNull(control.sceneProperty(), (Scene scene) -> {\n-            scene.getAccelerators().put(acceleratorKeyCombo, firstMenuRunnable);\n-            scene.addEventHandler(KeyEvent.ANY, weakSceneAltKeyEventHandler);\n-        });\n-\n@@ -424,12 +286,4 @@\n-        control.sceneProperty().addListener((ov, t, t1) -> {\n-            \/\/ remove event handlers \/ filters from the old scene (t)\n-            if (t != null) {\n-                if (weakSceneKeyEventHandler != null) {\n-                    t.removeEventFilter(KeyEvent.KEY_PRESSED, weakSceneKeyEventHandler);\n-                }\n-                if (weakSceneMouseEventHandler != null) {\n-                    t.removeEventFilter(MouseEvent.MOUSE_CLICKED, weakSceneMouseEventHandler);\n-                }\n-                if (weakSceneAltKeyEventHandler != null) {\n-                    t.removeEventHandler(KeyEvent.ANY, weakSceneAltKeyEventHandler);\n-                }\n+        lh.addChangeListener(control.sceneProperty(), true, (scene) -> {\n+            if (sceneListenerHelper != null) {\n+                sceneListenerHelper.disconnect();\n+                sceneListenerHelper = null;\n@@ -438,9 +292,122 @@\n-            \/**\n-             * remove the f10 accelerator from the old scene\n-             * add it to the new scene\n-             *\/\n-            if (t != null) {\n-                t.getAccelerators().remove(acceleratorKeyCombo);\n-            }\n-            if (t1 != null ) {\n-                t1.getAccelerators().put(acceleratorKeyCombo, firstMenuRunnable);\n+            if (scene != null ) {\n+                sceneListenerHelper = new ListenerHelper(MenuBarSkin.this);\n+\n+                \/\/ Key navigation\n+                sceneListenerHelper.addEventFilter(scene, KeyEvent.KEY_PRESSED, (ev) -> {\n+                    \/\/ process right left and may be tab key events\n+                    if (focusedMenu != null) {\n+                        switch (ev.getCode()) {\n+                            case LEFT: {\n+                                boolean isRTL = control.getEffectiveNodeOrientation() == NodeOrientation.RIGHT_TO_LEFT;\n+                                if (control.getScene().getWindow().isFocused()) {\n+                                    if (openMenu != null && !openMenu.isShowing()) {\n+                                        if (isRTL) {\n+                                            moveToMenu(Direction.NEXT, false); \/\/ just move the selection bar\n+                                        } else {\n+                                            moveToMenu(Direction.PREVIOUS, false); \/\/ just move the selection bar\n+                                        }\n+                                        ev.consume();\n+                                        return;\n+                                    }\n+                                    if (isRTL) {\n+                                        moveToMenu(Direction.NEXT, true);\n+                                    } else {\n+                                        moveToMenu(Direction.PREVIOUS, true);\n+                                    }\n+                                }\n+                                ev.consume();\n+                                break;\n+                            }\n+                            case RIGHT:\n+                            {\n+                                boolean isRTL = control.getEffectiveNodeOrientation() == NodeOrientation.RIGHT_TO_LEFT;\n+                                if (control.getScene().getWindow().isFocused()) {\n+                                    if (openMenu != null && !openMenu.isShowing()) {\n+                                        if (isRTL) {\n+                                            moveToMenu(Direction.PREVIOUS, false); \/\/ just move the selection bar\n+                                        } else {\n+                                            moveToMenu(Direction.NEXT, false); \/\/ just move the selection bar\n+                                        }\n+                                        ev.consume();\n+                                        return;\n+                                    }\n+                                    if (isRTL) {\n+                                        moveToMenu(Direction.PREVIOUS, true);\n+                                    } else {\n+                                        moveToMenu(Direction.NEXT, true);\n+                                    }\n+                                }\n+                                ev.consume();\n+                                break;\n+                            }\n+                            case DOWN:\n+                            \/\/case SPACE:\n+                            \/\/case ENTER:\n+                                \/\/ RT-18859: Doing nothing for space and enter\n+                                if (control.getScene().getWindow().isFocused()) {\n+                                    if (focusedMenuIndex != -1) {\n+                                        Menu menuToOpen = getSkinnable().getMenus().get(focusedMenuIndex);\n+                                        showMenu(menuToOpen, true);\n+                                        ev.consume();\n+                                    }\n+                                }\n+                                break;\n+                            case ESCAPE:\n+                                unSelectMenus();\n+                                ev.consume();\n+                                break;\n+                        default:\n+                            break;\n+                        }\n+                    }\n+                });\n+\n+                \/\/ When we click else where in the scene - menu selection should be cleared.\n+                sceneListenerHelper.addEventFilter(scene, MouseEvent.MOUSE_CLICKED, (ev) -> {\n+                    Bounds containerScreenBounds = container.localToScreen(container.getLayoutBounds());\n+                    if ((containerScreenBounds == null) || !containerScreenBounds.contains(ev.getScreenX(), ev.getScreenY())) {\n+                        unSelectMenus();\n+                    }\n+                });\n+\n+                \/\/ When the parent window looses focus - menu selection should be cleared\n+                sceneListenerHelper.addChangeListener(scene.windowProperty(), true, (sr, oldw, w) -> {\n+                    if (windowFocusHelper != null) {\n+                        windowFocusHelper.disconnect();\n+                        windowFocusHelper = null;\n+                    }\n+\n+                    if (w != null) {\n+                        windowFocusHelper = sceneListenerHelper.addChangeListener(w.focusedProperty(), true, (s, p, focused) -> {\n+                            if (!focused) {\n+                                unSelectMenus();\n+                            }\n+                        });\n+                    }\n+                });\n+\n+                sceneListenerHelper.addEventFilter(scene, KeyEvent.ANY, (ev) -> {\n+                    \/\/ Clear menu selection when ALT is pressed by itself\n+                    if (ev.getEventType() == KeyEvent.KEY_PRESSED) {\n+                        altKeyPressed = false;\n+                        if (ev.getCode() == KeyCode.ALT && !ev.isConsumed()) {\n+                            if (focusedMenuIndex == -1) {\n+                                altKeyPressed = true;\n+                            }\n+                            unSelectMenus();\n+                        }\n+                    } else if (ev.getEventType() == KeyEvent.KEY_RELEASED) {\n+                        \/\/ Put focus on the first menu when ALT is released\n+                        \/\/ directly after being pressed by itself\n+                        if (altKeyPressed && ev.getCode() == KeyCode.ALT && !ev.isConsumed()) {\n+                            firstMenuRunnable.run();\n+                        }\n+                        altKeyPressed = false;\n+                    }\n+                });\n+\n+                \/\/ F10 accelerator\n+                scene.getAccelerators().put(acceleratorKeyCombo, firstMenuRunnable);\n+                sceneListenerHelper.addDisconnectable(() -> {\n+                    scene.getAccelerators().remove(acceleratorKeyCombo);\n+                });\n@@ -686,1 +653,12 @@\n-    @Override public void dispose() {\n+    @Override\n+    public void dispose() {\n+        if (getSkinnable() == null) {\n+            return;\n+        }\n+\n+        if (sceneListenerHelper != null) {\n+            sceneListenerHelper.disconnect();\n+            sceneListenerHelper = null;\n+        }\n+\n+        cleanUpListeners();\n@@ -688,0 +666,2 @@\n+        getChildren().remove(container);\n+\n@@ -824,2 +804,3 @@\n-    private void rebuildUI() {\n-        getSkinnable().focusedProperty().removeListener(menuBarFocusedPropertyListener);\n+    private void cleanUpListeners() {\n+        getSkinnable().focusedProperty().removeListener(weakMenuBarFocusedPropertyListener);\n+\n@@ -830,1 +811,1 @@\n-            m.visibleProperty().removeListener(menuVisibilityChangeListener);\n+            m.visibleProperty().removeListener(weakMenuVisibilityChangeListener);\n@@ -832,0 +813,1 @@\n+\n@@ -852,0 +834,1 @@\n+\n@@ -853,0 +836,4 @@\n+    }\n+\n+    private void rebuildUI() {\n+        cleanUpListeners();\n@@ -930,1 +917,2 @@\n-        getSkinnable().focusedProperty().addListener(menuBarFocusedPropertyListener);\n+        getSkinnable().focusedProperty().addListener(weakMenuBarFocusedPropertyListener);\n+\n@@ -933,1 +921,1 @@\n-            menu.visibleProperty().addListener(menuVisibilityChangeListener);\n+            menu.visibleProperty().addListener(weakMenuVisibilityChangeListener);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/MenuBarSkin.java","additions":188,"deletions":200,"binary":false,"changes":388,"status":"modified"},{"patch":"@@ -28,0 +28,13 @@\n+import static javafx.scene.control.ControlShim.installDefaultSkin;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.asArrays;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.attemptGC;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.createControl;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.getControlClasses;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.replaceSkin;\n+\n@@ -32,12 +45,0 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import com.sun.javafx.tk.Toolkit;\n-\n-import static javafx.scene.control.ControlShim.*;\n-import static org.junit.Assert.*;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.*;\n-\n@@ -51,1 +52,0 @@\n-import javafx.scene.control.MenuBar;\n@@ -67,0 +67,8 @@\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import com.sun.javafx.tk.Toolkit;\n+\n@@ -87,0 +95,2 @@\n+        WeakReference<?> weakRef = new WeakReference<>(skin);\n+\n@@ -89,0 +99,16 @@\n+        skin = null;\n+        Toolkit.getToolkit().firePulse();\n+\n+        attemptGC(weakRef);\n+        assertNull(\"Unused Skin must be gc'ed\", weakRef.get());\n+    }\n+\n+    \/**\n+     * default skin -> set another instance of default skin,\n+     * with scene property set.\n+     *\/\n+    @Test\n+    public void testMemoryLeakSameSkinClassWithScene() {\n+        showControl(control, true);\n+        installDefaultSkin(control);\n+        Skin<?> skin = control.getSkin();\n@@ -90,0 +116,3 @@\n+\n+        installDefaultSkin(control);\n+\n@@ -91,0 +120,2 @@\n+        Toolkit.getToolkit().firePulse();\n+\n@@ -120,2 +151,2 @@\n-        \/\/ FIXME: JDK-8265406 - fragile test pattern\n-        WeakReference<?> weakRef = new WeakReference<>(replaceSkin(control));\n+        Skin<?> replacedSkin = replaceSkin(control);\n+        WeakReference<?> weakRef = new WeakReference<>(replacedSkin);\n@@ -123,0 +154,25 @@\n+\n+        \/\/ beware: this is important - we might get false reds without!\n+        replacedSkin = null;\n+        Toolkit.getToolkit().firePulse();\n+\n+        attemptGC(weakRef);\n+        assertEquals(\"Skin must be gc'ed\", null, weakRef.get());\n+    }\n+\n+    \/**\n+     * default skin -> set alternative,\n+     * with scene property set\n+     *\/\n+    @Test\n+    public void testMemoryLeakAlternativeSkinWithScene() {\n+        showControl(control, true);\n+        installDefaultSkin(control);\n+        Skin<?> replacedSkin = replaceSkin(control);\n+        WeakReference<?> weakRef = new WeakReference<>(replacedSkin);\n+        assertNotNull(weakRef.get());\n+\n+        \/\/ beware: this is important - we might get false reds without!\n+        replacedSkin = null;\n+        Toolkit.getToolkit().firePulse();\n+\n@@ -136,0 +192,1 @@\n+\n@@ -137,1 +194,0 @@\n-        Toolkit.getToolkit().firePulse();\n@@ -139,0 +195,2 @@\n+        Toolkit.getToolkit().firePulse();\n+\n@@ -169,1 +227,1 @@\n-                MenuBar.class,\n+                \/\/MenuBar.class,\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SkinMemoryLeakTest.java","additions":75,"deletions":17,"binary":false,"changes":92,"status":"modified"}]}