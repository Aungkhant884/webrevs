{"files":[{"patch":"@@ -29,1 +29,1 @@\n-\n+import java.util.function.Consumer;\n@@ -164,0 +164,32 @@\n+    public <T> IDisconnectable addChangeListener(ObservableValue<T> prop, Consumer<T> callback) {\n+        return addChangeListener(prop, false, callback);\n+    }\n+\n+    public <T> IDisconnectable addChangeListener(ObservableValue<T> prop, boolean fireImmediately, Consumer<T> callback) {\n+        if (callback == null) {\n+            throw new NullPointerException(\"Callback must be specified.\");\n+        }\n+\n+        ChLi<T> d = new ChLi<T>() {\n+            @Override\n+            public void disconnect() {\n+                prop.removeListener(this);\n+            }\n+\n+            @Override\n+            public void changed(ObservableValue<? extends T> observable, T oldValue, T newValue) {\n+                callback.accept(newValue);\n+            }\n+        };\n+\n+        items.add(d);\n+        prop.addListener(d);\n+\n+        if (fireImmediately) {\n+            T v = prop.getValue();\n+            callback.accept(v);\n+        }\n+\n+        return d;\n+    }\n+\n@@ -246,0 +278,39 @@\n+    public <T> IDisconnectable addWeakChangeListener(ObservableValue<T> prop, Consumer<T> callback) {\n+        return addWeakChangeListener(prop, false, callback);\n+    }\n+\n+    public <T> IDisconnectable addWeakChangeListener(ObservableValue<T> prop, boolean fireImmediately, Consumer<T> callback) {\n+        if (callback == null) {\n+            throw new NullPointerException(\"Callback must be specified.\");\n+        }\n+\n+        ChLi<T> d = new ChLi<T>() {\n+            WeakReference<Consumer<T>> ref = new WeakReference<>(callback);\n+\n+            @Override\n+            public void disconnect() {\n+                prop.removeListener(this);\n+            }\n+\n+            @Override\n+            public void changed(ObservableValue<? extends T> observable, T oldValue, T newValue) {\n+                Consumer<T> cb = ref.get();\n+                if (cb == null) {\n+                    disconnect();\n+                } else {\n+                    cb.accept(newValue);\n+                }\n+            }\n+        };\n+\n+        items.add(d);\n+        prop.addListener(d);\n+\n+        if (fireImmediately) {\n+            T v = prop.getValue();\n+            callback.accept(v);\n+        }\n+\n+        return d;\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/ListenerHelper.java","additions":72,"deletions":1,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import com.sun.javafx.scene.control.LambdaMultiplePropertyChangeListenerHandler;\n-\n@@ -51,0 +49,3 @@\n+import com.sun.javafx.scene.control.LambdaMultiplePropertyChangeListenerHandler;\n+import com.sun.javafx.scene.control.ListenerHelper;\n+\n@@ -85,0 +86,1 @@\n+    @Deprecated \/\/ replace with listenerHelper\n@@ -87,0 +89,1 @@\n+    private ListenerHelper listenerHelper;\n@@ -161,0 +164,4 @@\n+        if (listenerHelper != null) {\n+            listenerHelper.disconnect();\n+        }\n+\n@@ -210,0 +217,11 @@\n+    \/**\n+     * Returns the skin's instance of {@link ListenerHelper}, creating it if necessary.\n+     *\n+     * @since 20\n+     *\/\n+    protected ListenerHelper listenerHelper() {\n+        if (listenerHelper == null) {\n+            listenerHelper = new ListenerHelper();\n+        }\n+        return listenerHelper;\n+    }\n@@ -222,0 +240,1 @@\n+    \/\/ TODO I would like to deprecate and remove these methods, and replace them by listenerHelper().add**()\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/SkinBase.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -146,1 +146,0 @@\n-    private ListenerHelper listenerHelper = new ListenerHelper();\n@@ -246,1 +245,1 @@\n-        registerListChangeListener(control.getMenus(), (ch) -> {\n+        listenerHelper().addListChangeListener(control.getMenus(), (v) -> {\n@@ -251,1 +250,1 @@\n-            registerInvalidationListener(control.useSystemMenuBarProperty(), (p) -> {\n+            listenerHelper().addInvalidationListener(control.useSystemMenuBarProperty(), (v) -> {\n@@ -285,1 +284,1 @@\n-        listenerHelper.addChangeListener(control.sceneProperty(), true, (src,old,scene) -> {\n+        listenerHelper().addChangeListener(control.sceneProperty(), true, (scene) -> {\n@@ -658,3 +657,0 @@\n-        listenerHelper.disconnect();\n-        listenerHelper = null;\n-\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/MenuBarSkin.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"}]}