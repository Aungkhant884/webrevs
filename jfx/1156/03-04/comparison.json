{"files":[{"patch":"@@ -101,1 +101,0 @@\n-          \/\/ min = snapCeil()\n@@ -103,3 +102,1 @@\n-          \/\/ max = snapFloor()\n-          \/\/ TODO replace with public API once available\n-          double max = RegionHelper.snapFloorX(c, col.getMaxWidth());\n+          double max = RegionHelper.snapInnerSpaceX(c, col.getMaxWidth());\n@@ -118,1 +115,2 @@\n-      col.doSetWidth(width);\n+      \/\/ can set width directly because all constraints have been checked\n+      col.setWidth(width);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ResizeFeaturesBase.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -761,2 +761,1 @@\n-        \/\/ clamping to (min,max) must be done by the caller, see ResizeFeatureBase.setColumnWidth()\n-        setWidth(width);\n+        setWidth(Utils.boundedSize(width, getMinWidth(), getMaxWidth()));\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableColumnBase.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -107,0 +107,4 @@\n+    public static double snapInnerSpaceX(Node node, double x) {\n+        return regionAccessor.snapInnerSpaceX(node, x);\n+    }\n+\n@@ -115,4 +119,0 @@\n-    public static double snapFloorX(Region r, double x) {\n-        return regionAccessor.snapFloorX(r, x);\n-    }\n-\n@@ -128,1 +128,1 @@\n-        public double snapFloorX(Region r, double x);\n+        double snapInnerSpaceX(Node node, double x);\n@@ -130,1 +130,0 @@\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/layout\/RegionHelper.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -186,2 +186,2 @@\n-            public double snapFloorX(Region r, double x) {\n-                return r.snapFloorX(x);\n+            public double snapInnerSpaceX(Node node, double x) {\n+                return ((Region)node).snapPortionX(x);\n@@ -1764,25 +1764,0 @@\n-    \/**\n-     * If this region's snapToPixel property is true, returns a value floored\n-     * to the nearest pixel in the horizontal direction, else returns the\n-     * same value.\n-     * @param value the size value to be snapped\n-     * @return value ceiled to nearest pixel\n-     * @since TODO\n-     *\/\n-    \/\/ TODO this method, as well as snapFloorY() should be made public\n-    private double snapFloorX(double value) {\n-        return snapFloorX(value, isSnapToPixel());\n-    }\n-\n-    \/**\n-     * If snapToPixel is true, then the value is floor'd using Math.floor.\n-     * Otherwise, the value is simply returned.\n-     *\n-     * @param value The value that needs to be snapped\n-     * @param snapToPixel Whether to snap to pixel\n-     * @return value either as passed in or floor'd based on snapToPixel\n-     *\/\n-    private double snapFloorX(double value, boolean snapToPixel) {\n-        return snapToPixel ? ScaledMath.floor(value, getSnapScaleX()) : value;\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Region.java","additions":2,"deletions":27,"binary":false,"changes":29,"status":"modified"}]}