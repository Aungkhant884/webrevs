{"files":[{"patch":"@@ -76,1 +76,1 @@\n-                double cmax = snapFloor(c.getMaxWidth()); \/\/ TableColumnBase.doSetWidth() clamps to (min,max) range\n+                double cmax = snapFloor(c.getMaxWidth());\n@@ -124,2 +124,1 @@\n-        double threshold = snapRound(SMALL_DELTA);\n-        if (Math.abs(delta) > threshold) {\n+        if (Math.abs(delta) > SMALL_DELTA) {\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/ResizeHelper.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import com.sun.javafx.scene.layout.RegionHelper;\n@@ -97,1 +98,20 @@\n-  public void setColumnWidth(TableColumnBase<S,?> col, double width) {\n+  public void setColumnWidth(TableColumnBase<S, ?> col, double width) {\n+      Control c = getTableControl();\n+      if (c.isSnapToPixel()) {\n+          \/\/ min = snapCeil()\n+          double min = c.snapSizeX(col.getMinWidth());\n+          \/\/ max = snapFloor()\n+          \/\/ TODO replace with public API once available\n+          double max = RegionHelper.snapFloorX(c, col.getMaxWidth());\n+          if (width < min) {\n+              width = min;\n+          } else if (width > max) {\n+              width = max;\n+              if (width < min) {\n+                  \/\/ safety check in case floor(max) < ceil(min)\n+                  width = min;\n+              }\n+          } else {\n+              width = c.snapPositionX(width);\n+          }\n+      }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ResizeFeaturesBase.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -761,1 +761,2 @@\n-        setWidth(Utils.boundedSize(width, getMinWidth(), getMaxWidth()));\n+        \/\/ clamping to (min,max) must be done by the caller, see ResizeFeatureBase.setColumnWidth()\n+        setWidth(width);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableColumnBase.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,0 +115,4 @@\n+    public static double snapFloorX(Region r, double x) {\n+        return regionAccessor.snapFloorX(r, x);\n+    }\n+\n@@ -124,0 +128,1 @@\n+        public double snapFloorX(Region r, double x);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/layout\/RegionHelper.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -184,0 +184,5 @@\n+\n+            @Override\n+            public double snapFloorX(Region r, double x) {\n+                return r.snapFloorX(x);\n+            }\n@@ -1758,0 +1763,25 @@\n+    \n+    \/**\n+     * If this region's snapToPixel property is true, returns a value floored\n+     * to the nearest pixel in the horizontal direction, else returns the\n+     * same value.\n+     * @param value the size value to be snapped\n+     * @return value ceiled to nearest pixel\n+     * @since TODO\n+     *\/\n+    \/\/ TODO this method, as well as snapFloorY() should be made public\n+    private double snapFloorX(double value) {\n+        return snapFloorX(value, isSnapToPixel());\n+    }\n+    \n+    \/**\n+     * If snapToPixel is true, then the value is floor'd using Math.floor.\n+     * Otherwise, the value is simply returned.\n+     *\n+     * @param value The value that needs to be snapped\n+     * @param snapToPixel Whether to snap to pixel\n+     * @return value either as passed in or floor'd based on snapToPixel\n+     *\/\n+    private double snapFloorX(double value, boolean snapToPixel) {\n+        return snapToPixel ? ScaledMath.floor(value, getSnapScaleX()) : value;\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Region.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"}]}