{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -277,1 +277,1 @@\n-        content = new AnchorPane(topLeft, center, bottomRight);\n+        content = new AnchorPane(center, topLeft, bottomRight);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/infrastructure\/MouseEventFirerTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1131,1 +1131,7 @@\n-        new KeyEventFirer(comboBox).doKeyPress(KeyCode.ENTER);\n+        var kFirer = new KeyEventFirer(comboBox);\n+        \/\/ Open selection\n+        kFirer.doKeyPress(KeyCode.DOWN, KeyModifier.ALT);\n+        \/\/ Select first\n+        kFirer.doKeyPress(KeyCode.DOWN);\n+        \/\/ Commit selection\n+        kFirer.doKeyPress(KeyCode.ENTER);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ComboBoxTest.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-    \/\/ empty - not needed by this implementation\n@@ -51,1 +50,1 @@\n-    protected void _updateViewSize(long ptr) {}\n+    protected native void _updateViewSize(long ptr);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkWindow.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1190,0 +1190,4 @@\n+            if (!isIconified()) {\n+                peer.requestFocus();\n+            }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/stage\/Stage.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -142,0 +142,14 @@\n+\/*\n+ * Class:     com_sun_glass_ui_gtk_GtkWindow\n+ * Method:    _updateViewSize\n+ * Signature: (J)V\n+ *\/\n+JNIEXPORT void JNICALL Java_com_sun_glass_ui_gtk_GtkWindow__1updateViewSize\n+  (JNIEnv * env, jobject obj, jlong ptr) {\n+    (void)env;\n+    (void)obj;\n+\n+    WindowContext* ctx = JLONG_TO_WINDOW_CTX(ptr);\n+    ctx->update_view_size();\n+}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassWindow.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1325,3 +1325,4 @@\n-void WindowContextTop::notify_window_resize() {\n-    int w = geometry_get_window_width(&geometry);\n-    int h = geometry_get_window_height(&geometry);\n+void WindowContextTop::update_view_size() {\n+    \/\/ Notify the view size only if size is oriented by WINDOW, otherwise it knows its own size\n+    if (geometry.final_width.type == BOUNDSTYPE_WINDOW\n+        || geometry.final_height.type == BOUNDSTYPE_WINDOW) {\n@@ -1329,3 +1330,3 @@\n-    mainEnv->CallVoidMethod(jwindow, jWindowNotifyResize,\n-                 com_sun_glass_events_WindowEvent_RESIZE, w, h);\n-    CHECK_JNI_EXCEPTION(mainEnv)\n+        notify_view_resize();\n+    }\n+}\n@@ -1333,0 +1334,1 @@\n+void WindowContextTop::notify_view_resize() {\n@@ -1342,0 +1344,11 @@\n+void WindowContextTop::notify_window_resize() {\n+    int w = geometry_get_window_width(&geometry);\n+    int h = geometry_get_window_height(&geometry);\n+\n+    mainEnv->CallVoidMethod(jwindow, jWindowNotifyResize,\n+                 com_sun_glass_events_WindowEvent_RESIZE, w, h);\n+    CHECK_JNI_EXCEPTION(mainEnv)\n+\n+    notify_view_resize();\n+}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.cpp","additions":20,"deletions":7,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -148,0 +148,2 @@\n+    virtual void update_view_size() = 0;\n+    virtual void notify_view_resize() = 0;\n@@ -305,0 +307,2 @@\n+    void update_view_size();\n+    void notify_view_resize();\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.h","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ *  Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+import javafx.application.Application;\n+import javafx.scene.text.Text;\n+import javafx.stage.Stage;\n+import javafx.scene.Scene;\n+import javafx.scene.layout.StackPane;\n+\n+\/***\n+ * Stage must initially only show on the OS taskbar, but not on the Screen.\n+ * If the stage pops on the Screen and then iconifies, it's wrong.\n+ *\n+ * Note: Will not work on MacOS until https:\/\/bugs.openjdk.org\/browse\/JDK-8305675 is fixed\n+ *\/\n+public class StartIconified extends Application {\n+\n+    @Override\n+    public void start(Stage primaryStage) {\n+        primaryStage.setTitle(\"Iconified Window Test\");\n+        primaryStage.setWidth(600);\n+        primaryStage.setHeight(150);\n+        primaryStage.setIconified(true);\n+\n+        Text text = new Text(\"\"\"\n+                1. The stage must initially appear on the OS taskbar (iconified), but not on the Screen\n+                2. Observe if the stage pops and then iconifies (wrong)\"\"\");\n+\n+        Scene scene = new Scene(new StackPane(text));\n+        primaryStage.setScene(scene);\n+        primaryStage.show();\n+    }\n+\n+    public static void main(String[] args) {\n+        launch(StartIconified.class, args);\n+    }\n+}\n","filename":"tests\/manual\/stage\/StartIconified.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}