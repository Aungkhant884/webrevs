{"files":[{"patch":"@@ -686,2 +686,3 @@\n-\n-            if (index == (lastGetIndex + 1) && lastGetValue < itemCount) {\n+            if (lastGetIndex == index) {\n+                return lastGetValue;\n+            } else if (index == (lastGetIndex + 1) && lastGetValue < itemCount) {\n@@ -720,0 +721,1 @@\n+            if (index <= lastGetValue) reset();\n@@ -742,0 +744,1 @@\n+                if (index <= lastGetValue) reset();\n@@ -748,0 +751,1 @@\n+                if (index <= lastGetValue) reset();\n@@ -782,19 +786,0 @@\n-                    int pos = 0;\n-                    int start = 0;\n-                    int end = 0;\n-\n-                    \/\/ starting from pos, we keep going until the value is\n-                    \/\/ not the next value\n-                    int startValue = sortedNewIndices.get(pos++);\n-                    start = indexOf(startValue);\n-                    end = start + 1;\n-                    int endValue = startValue;\n-                    while (pos < size) {\n-                        int previousEndValue = endValue;\n-                        endValue = sortedNewIndices.get(pos++);\n-                        ++end;\n-                        if (previousEndValue != (endValue - 1)) {\n-                            _nextAdd(start, end);\n-                            start = end;\n-                            continue;\n-                        }\n@@ -802,4 +787,15 @@\n-                        \/\/ special case for when we get to the point where the loop is about to end\n-                        \/\/ and we have uncommitted changes to fire.\n-                        if (pos == size) {\n-                            _nextAdd(start, start + pos);\n+                    int startIndex = indexOf(sortedNewIndices.get(0));\n+                    int endIndex = startIndex + 1;\n+\n+                    for (int i = 1; i < sortedNewIndices.size(); ++i) {\n+                        int currentValue = get(endIndex);\n+                        int currentNewValue = sortedNewIndices.get(i);\n+                        if (currentValue != currentNewValue) {\n+                            _nextAdd(startIndex, endIndex);\n+                            while (get(endIndex) != currentNewValue) ++endIndex;\n+                            startIndex = endIndex++;\n+                        } else {\n+                            ++endIndex;\n+                        }\n+                        if (i == sortedNewIndices.size() - 1) {\n+                            _nextAdd(startIndex, endIndex);\n@@ -819,0 +815,1 @@\n+            reset();\n@@ -830,0 +827,1 @@\n+            if (index <= lastGetValue) reset();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/MultipleSelectionModelBase.java","additions":23,"deletions":25,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import static org.junit.Assert.fail;\n@@ -1448,0 +1449,63 @@\n+\n+\n+    @Test\n+    public void testSelectedIndicesChangeEvents() throws InterruptedException {\n+\n+        testSelectedIndicesChangeEventsFactory(0, new int[]{2,3}, 1, new int[]{5,7},\n+                new int[][]{new int[]{1}, new int[]{5,7}});\n+\n+        testSelectedIndicesChangeEventsFactory(1, new int[]{3,4}, 0, new int[]{5,7},\n+                new int[][]{new int[]{0}, new int[]{5,7}});\n+\n+        testSelectedIndicesChangeEventsFactory(0, new int[]{1, 3,4, 5, 7}, 6, new int[]{8,9},\n+                new int[][]{new int[]{6}, new int[]{8,9}});\n+\n+        testSelectedIndicesChangeEventsFactory(5, new int[]{6, 7}, 2, new int[]{1,0},\n+                new int[][]{new int[]{0,1,2}});\n+\n+        testSelectedIndicesChangeEventsFactory(2, new int[]{3, 6,7}, 0, new int[]{1,4,5,8,9},\n+                new int[][]{new int[]{0,1},new int[]{4,5},new int[]{8,9}});\n+    }\n+\n+    public ListView createListViewWithMultipleSelection() {\n+        ListView<String> listView = new ListView<>();\n+        listView.getItems().addAll(\n+                \"item-0\",\n+                \"item-1\",\n+                \"item-2\",\n+                \"item-3\",\n+                \"item-4\",\n+                \"item-5\",\n+                \"item-6\",\n+                \"item-7\",\n+                \"item-8\",\n+                \"item-9\",\n+                \"item-10\"\n+        );\n+        listView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);\n+        return listView;\n+    }\n+\n+    public void testSelectedIndicesChangeEventsFactory(int initialSelected, int[] initialSelectedI, int selected, int[] selectedI, int[][] expected) throws InterruptedException {\n+        ListView<String> listView = createListViewWithMultipleSelection();\n+        listView.getSelectionModel().selectIndices(initialSelected,initialSelectedI);\n+        testSelectedIndicesChangeHelper(listView, selected, selectedI, expected);\n+    }\n+    public void testSelectedIndicesChangeHelper(ListView listView, int selected, int[] selectedI, int[][] expected) {\n+        List<int[]> expectedEntries = new LinkedList<>(Arrays.asList(expected));\n+        MultipleSelectionModel<String> selectionModel = listView.getSelectionModel();\n+        selectionModel.getSelectedIndices().addListener((ListChangeListener<? super Integer>) c -> {\n+            while (c.next()) {\n+                try {\n+                    assertEquals(Arrays.stream(expectedEntries.get(0)).boxed().collect(Collectors.toList()), c.getAddedSubList());\n+                    expectedEntries.remove(0);\n+                } catch (IndexOutOfBoundsException e) {\n+                    fail(e.getMessage());\n+                }\n+            }\n+        });\n+\n+        selectionModel.selectIndices(selected, selectedI);\n+\n+        assertTrue(\"A ListEvent was missing: \" + Arrays.deepToString(expectedEntries.toArray()), expectedEntries.isEmpty());\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/MultipleSelectionModelImplTest.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"modified"}]}