{"files":[{"patch":"@@ -388,0 +388,10 @@\n+    \/**\n+     * If snapToPixel is true, then the value is either floored (positive values) or\n+     * ceiled (negative values) with a scale. This method guarantees that:\n+     *\n+     * snapPortionX(snapPortionX(value, snapToPixel), snapToPixel) == snapPortionX(value, snapToPixel)\n+     *\n+     * @param value The value that needs to be snapped\n+     * @param snapToPixel Whether to snap to pixel\n+     * @return value either as passed, or floored or ceiled with scale, based on snapToPixel\n+     *\/\n@@ -393,1 +403,1 @@\n-            value = Math.max(1, Math.floor(value));\n+            value = Math.max(1, Math.floor(value + EPSILON));\n@@ -395,1 +405,1 @@\n-            value = Math.min(-1, Math.ceil(value));\n+            value = Math.min(-1, Math.ceil(value - EPSILON));\n@@ -399,0 +409,11 @@\n+\n+    \/**\n+     * If snapToPixel is true, then the value is either floored (positive values) or\n+     * ceiled (negative values) with a scale. This method guarantees that:\n+     *\n+     * snapPortionY(snapPortionY(value, snapToPixel), snapToPixel) == snapPortionY(value, snapToPixel)\n+     *\n+     * @param value The value that needs to be snapped\n+     * @param snapToPixel Whether to snap to pixel\n+     * @return value either as passed, or floored or ceiled with scale, based on snapToPixel\n+     *\/\n@@ -404,1 +425,1 @@\n-            value = Math.max(1, Math.floor(value));\n+            value = Math.max(1, Math.floor(value + EPSILON));\n@@ -406,1 +427,1 @@\n-            value = Math.min(-1, Math.ceil(value));\n+            value = Math.min(-1, Math.ceil(value - EPSILON));\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Region.java","additions":25,"deletions":4,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -153,0 +153,8 @@\n+    public static double snapPortionX(Region r, double value) {\n+        return r.snapPortionX(value);\n+    }\n+\n+    public static double snapPortionY(Region r, double value) {\n+        return r.snapPortionY(value);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/javafx\/scene\/layout\/RegionShim.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1263,0 +1263,3 @@\n+\n+        \/\/ test snapSizeX\/snapSizeY methods\n+\n@@ -1282,0 +1285,22 @@\n+\n+        \/\/ test snapPortionX\/snapPortionY methods\n+\n+        for (double scale : scales) {\n+            stage.setRenderScaleX(scale);\n+            for (int j = 0; j < 1000; j++) {\n+                double value = new Random().nextDouble() * 100 - 50;\n+                double snappedValue = RegionShim.snapPortionX(region, value);\n+                double snapOfSnappedValue = RegionShim.snapPortionX(region, snappedValue);\n+                assertEquals(snappedValue, snapOfSnappedValue, 1.0e-14);\n+            }\n+        }\n+\n+        for (double scale : scales) {\n+            stage.setRenderScaleY(scale);\n+            for (int j = 0; j < 1000; j++) {\n+                double value = new Random().nextDouble() * 100 - 50;\n+                double snappedValue = RegionShim.snapPortionY(region, value);\n+                double snapOfSnappedValue = RegionShim.snapPortionY(region, snappedValue);\n+                assertEquals(snappedValue, snapOfSnappedValue, 1.0e-14);\n+            }\n+        }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/RegionTest.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}