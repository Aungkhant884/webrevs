{"files":[{"patch":"@@ -216,0 +216,2 @@\n+    private static final double EPSILON = 1e-14;\n+\n@@ -302,1 +304,1 @@\n-        return Math.ceil(value * scale) \/ scale;\n+        return Math.ceil(value * scale - EPSILON) \/ scale;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Region.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import javafx.scene.Scene;\n@@ -42,0 +43,2 @@\n+import javafx.stage.Stage;\n+import java.util.Random;\n@@ -1251,0 +1254,29 @@\n+\n+    \/\/ Test for JDK-8255415\n+    @Test public void snappingASnappedValueGivesTheSameValueTest() {\n+        Stage stage = new Stage();\n+        Region region = new Region();\n+        Scene scene = new Scene(region);\n+        stage.setScene(scene);\n+\n+        double[] scales = new double[] {1.0, 1.25, 1.5, 1.75, 2.0, 1.374562997};\n+        for (double scale : scales) {\n+            stage.setRenderScaleX(scale);\n+            for (int j = 0; j < 1000; j++) {\n+                double value = new Random().nextDouble() * 100 - 50;\n+                double snappedValue = region.snapSizeX(value);\n+                double snapOfSnappedValue = region.snapSizeX(snappedValue);\n+                assertEquals(snappedValue, snapOfSnappedValue, 1.0e-14);\n+            }\n+        }\n+\n+        for (double scale : scales) {\n+            stage.setRenderScaleY(scale);\n+            for (int j = 0; j < 1000; j++) {\n+                double value = new Random().nextDouble() * 100 - 50;\n+                double snappedValue = region.snapSizeY(value);\n+                double snapOfSnappedValue = region.snapSizeY(snappedValue);\n+                assertEquals(snappedValue, snapOfSnappedValue, 1.0e-14);\n+            }\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/RegionTest.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"}]}