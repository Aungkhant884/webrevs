{"files":[{"patch":"@@ -425,1 +425,2 @@\n-                            contentType = MediaUtils.filenameToContentType(uri.getPath()); \/\/ We need to provide at least something\n+                            \/\/ Try to get the content type based on extension\n+                            contentType = MediaUtils.filenameToContentType(uri);\n@@ -441,1 +442,1 @@\n-                                    contentType = MediaUtils.filenameToContentType(uri.getPath());\n+                                    contentType = MediaUtils.filenameToContentType(uri);\n@@ -472,1 +473,1 @@\n-                contentType = MediaUtils.filenameToContentType(uri.getPath());\n+                contentType = MediaUtils.filenameToContentType(uri);\n","filename":"modules\/javafx.media\/src\/main\/java\/com\/sun\/media\/jfxmedia\/locator\/Locator.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,0 +33,3 @@\n+\n+import java.net.URI;\n+import java.nio.file.Path;\n@@ -143,0 +146,6 @@\n+        \/\/ MP3 header - 4 bytes\n+        \/\/ AAAAAAAA AAABBCCX XXXXXXXX XXXXXXXX\n+        \/\/ A - Sync bits (all bits are set)\n+        \/\/ B - MPEG Audio version ID (01 - reserved, rest is valid)\n+        \/\/ C - Layer description (00 - reserved, rest is valid)\n+        \/\/ X - Most bits combination is valid, so nothing to check\n@@ -144,2 +153,2 @@\n-                (buf[2] & 0x18) != 0x08 && \/\/ not reserved version\n-                (buf[3] & 0x06) != 0x00) { \/\/ not reserved layer\n+                (buf[1] & 0x18) != 0x08 && \/\/ not reserved version\n+                (buf[1] & 0x06) != 0x00) { \/\/ not reserved layer\n@@ -176,1 +185,1 @@\n-     * Returns the content type given the file name.\n+     * Returns the content type given the uri.\n@@ -178,1 +187,1 @@\n-     * @param filename\n+     * @param uri\n@@ -181,2 +190,3 @@\n-    public static String filenameToContentType(String filename) {\n-        if (filename == null) {\n+    public static String filenameToContentType(URI uri) {\n+        String fileName = MediaUtils.getFilenameFromURI(uri);\n+        if (fileName == null) {\n@@ -186,1 +196,1 @@\n-        int dotIndex = filename.lastIndexOf(\".\");\n+        int dotIndex = fileName.lastIndexOf(\".\");\n@@ -188,1 +198,1 @@\n-            String extension = filename.toLowerCase().substring(dotIndex + 1);\n+            String extension = fileName.toLowerCase().substring(dotIndex + 1);\n@@ -219,0 +229,31 @@\n+    \/**\n+     * Returns the file name given the uri. Supports special case for JAR URIs.\n+     *\n+     * @param uri\n+     * @return file name or null if file name cannot be extracted\n+     *\/\n+    public static String getFilenameFromURI(URI uri) {\n+        if (uri.getScheme() == null) {\n+            return null;\n+        }\n+\n+        String scheme = uri.getScheme().toLowerCase();\n+        if (\"jar\".equals(scheme)) {\n+            \/\/ Split to get entry\n+            \/\/ jar:<url>!\/{entry}\n+            String[] jarURI = uri.toASCIIString().split(\"!\/\");\n+            if (jarURI.length != 2) {\n+                return null;\n+            }\n+            Path entry = Path.of(jarURI[1]);\n+            Path fileName = entry.getFileName();\n+            if (fileName != null) {\n+                return fileName.toString();\n+            }\n+        } else {\n+            return uri.getPath();\n+        }\n+\n+        return null;\n+    }\n+\n","filename":"modules\/javafx.media\/src\/main\/java\/com\/sun\/media\/jfxmediaimpl\/MediaUtils.java","additions":49,"deletions":8,"binary":false,"changes":57,"status":"modified"}]}