{"files":[{"patch":"@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<classpath>\n+\t<classpathentry kind=\"src\" path=\"src\"\/>\n+\t<classpathentry kind=\"src\" output=\"testbin\" path=\"test\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"test\" value=\"true\"\/>\n+\t\t\t<attribute name=\"optional\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/base\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/controls\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/fxml\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/graphics\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/media\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/swing\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/web\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.junit.JUNIT_CONTAINER\/5\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"test\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"output\" path=\"bin\"\/>\n+<\/classpath>\n","filename":"tests\/manual\/monkey\/.classpath","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<projectDescription>\n+\t<name>MonkeyTester<\/name>\n+\t<comment><\/comment>\n+\t<projects>\n+\t<\/projects>\n+\t<buildSpec>\n+\t\t<buildCommand>\n+\t\t\t<name>org.eclipse.jdt.core.javabuilder<\/name>\n+\t\t\t<arguments>\n+\t\t\t<\/arguments>\n+\t\t<\/buildCommand>\n+\t<\/buildSpec>\n+\t<natures>\n+\t\t<nature>org.eclipse.jdt.core.javanature<\/nature>\n+\t<\/natures>\n+<\/projectDescription>\n","filename":"tests\/manual\/monkey\/.project","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"","filename":"tests\/manual\/monkey\/.settings\/org.eclipse.core.resources.prefs","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":".settings\/org.eclipse.core.resources.prefs","status":"copied"},{"patch":"@@ -0,0 +1,14 @@\n+eclipse.preferences.version=1\n+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled\n+org.eclipse.jdt.core.compiler.codegen.targetPlatform=18\n+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve\n+org.eclipse.jdt.core.compiler.compliance=18\n+org.eclipse.jdt.core.compiler.debug.lineNumber=generate\n+org.eclipse.jdt.core.compiler.debug.localVariable=generate\n+org.eclipse.jdt.core.compiler.debug.sourceFile=generate\n+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error\n+org.eclipse.jdt.core.compiler.problem.enablePreviewFeatures=disabled\n+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error\n+org.eclipse.jdt.core.compiler.problem.reportPreviewFeatures=warning\n+org.eclipse.jdt.core.compiler.release=enabled\n+org.eclipse.jdt.core.compiler.source=18\n","filename":"tests\/manual\/monkey\/.settings\/org.eclipse.jdt.core.prefs","additions":14,"deletions":0,"binary":false,"changes":14,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+# Monkey Tester\n+\n+This is a testing tool developed to support manual ad-hoc testing of individual JavaFX controls.\n+\n+![screenshot](doc\/screenshot.png)\n+\n+\n+## Prerequisites\n+\n+JavaFX SDK is required to build the tool.  The latest SDK can be found here:\n+\n+https:\/\/jdk.java.net\/javafx21\/\n+\n+\n+## Build\n+\n+The tool uses `ant` to build a non-modular JAR.  You'll need to specify the path to JavaFX SDK 20+:\n+```\n+ant -Djavafx.home=<JAVAFX>\n+```\n+\n+\n+## Run\n+\n+The tool requires JDK 17+ and JavaFX 20+.\n+\n+To launch, specify the path to the javaFX SDK lib\/ folder on the command line, example:\n+\n+```\n+java -p javafx-sdk-21\/lib\/ --add-modules ALL-MODULE-PATH -jar MonkeyTester.jar\n+```\n+\n+\n+## User Preferences\n+\n+Applications stores the user preferences (window position, currently selected page, etc.) in `~\/.MonkeyTester` directory.\n+\n+To use a different directory, redefine the `user.home` system property, `-Duser.home=<DIR>`.\n+\n+To disable saving, specify `-Ddisable.settings=true` VM agrument.\n+\n+\n","filename":"tests\/manual\/monkey\/README.md","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+This build requires javafx.home property, pointing to JavaFX SDK (20+) directory, e.g.:\n+  ant -Djavafx.home=<DIR>\n+-->\n+<project default=\"build-all\" basedir=\".\">\n+\n+\t<!-- project config -->\n+\t<property name=\"TARGET\" value=\"MonkeyTester\" \/>\n+\t<property name=\"MAIN_CLASS\" value=\"com.oracle.tools.fx.monkey.MonkeyTesterApp\"\/>\n+\t\n+\t<!-- libraries -->\n+\t<path id=\"libs\">\n+\t\t<!--\n+\t\t<pathelement location=\"lib\/gson\/gson-2.9.1.jar\" \/>\n+\t\t-->\n+\t<\/path>\n+\n+\n+\t<target name=\"clean\">\n+\t\t<delete includeEmptyDirs=\"true\" dir=\"build\" failonerror=\"false\" \/>\n+\t<\/target>\n+\n+\n+\t<target name=\"init\" depends=\"clean\">\n+\t\t<mkdir dir=\"build\" \/>\n+\t\t<mkdir dir=\"build\/classes\" \/>\n+\t\t<mkdir dir=\"build\/jars\" \/>\n+\t\t<mkdir dir=\"dist\" \/>\n+\t<\/target>\n+\n+\n+\t<target name=\"compile\" depends=\"init\">\n+\t\t<javac\n+\t\t\tsrcdir=\"src\"\n+\t\t\tdestdir=\"build\/classes\"\n+\t\t\tdebug=\"true\"\n+\t\t\tencoding=\"utf-8\"\n+\t\t\tfork=\"true\"\n+\t\t\tnowarn=\"true\"\n+\t\t\toptimize=\"false\"\n+\t\t\tsource=\"17\"\n+\t\t\ttarget=\"17\"\n+\t\t\tincludeantruntime=\"false\"\n+\t\t>\n+\t\t\t<compilerarg value=\"-Xlint:none\"\/>\n+\t\t\t<compilerarg line=\"--module-path ${javafx.home}\/lib --add-modules javafx.base,javafx.graphics,javafx.controls\"\/>\n+\t\t\t<classpath refid=\"libs\" \/>\n+\t\t<\/javac>\n+\t<\/target>\n+\n+\n+\t<!-- copy non-java resources -->\n+\t<target name=\"copy-resources\" depends=\"init\">\n+\t\t<copy todir=\"build\/classes\">\n+\t\t\t<fileset dir=\"src\" excludes=\"**\/*.java\" \/>\n+\t\t<\/copy>\n+\t<\/target>\n+\n+\n+\t<!-- unpack library jars -->\n+\t<target name=\"unpack-jars\" depends=\"init\">\n+\t\t<unzip dest=\"build\/classes\">\n+\t\t\t<path refid=\"libs\" \/>\n+\t\t<\/unzip>\n+\n+\t\t<delete dir=\"build\/classes\/META-INF\" \/>\n+\t<\/target>\n+\n+\n+\t<!-- build app jar -->\n+\t<target name=\"make-jar\" depends=\"compile, copy-resources, unpack-jars\">\n+\t\t<delete file=\"build\/jars\/${TARGET}.jar\" \/>\n+\n+\t\t<jar jarfile=\"build\/jars\/${TARGET}.jar\" basedir=\"build\/classes\" filesonly=\"true\">\n+\t\t\t<manifest>\n+\t\t\t\t<attribute name=\"Main-Class\" value=\"${MAIN_CLASS}\" \/>\n+\t\t\t\t<attribute name=\"Created-By\" value=\"andy@goryachev.com\" \/>\n+\t\t\t<\/manifest>\n+\t\t<\/jar>\n+\t<\/target>\n+\n+\n+\t<!-- generate digest -->\n+\t<target name=\"sha-jar\" depends=\"make-jar\">\n+\t\t<checksum file=\"build\/jars\/${TARGET}.jar\" algorithm=\"sha-256\" forceoverwrite=\"yes\" fileext=\".sha256.txt\" \/>\n+\t<\/target>\n+\n+\n+\t<!-- copy jar to base dir -->\n+\t<target name=\"copy-jar\" depends=\"make-jar\">\n+\t\t<copy file=\"build\/jars\/${TARGET}.jar\" todir=\"dist\/\" \/>\n+\t<\/target>\n+\n+\n+\t<!-- build all -->\n+\t<target name=\"build-all\" depends=\"compile, copy-resources, make-jar, sha-jar, copy-jar\" \/>\n+\n+<\/project>\n\\ No newline at end of file\n","filename":"tests\/manual\/monkey\/build.xml","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"filename":"tests\/manual\/monkey\/doc\/screenshot.png","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,255 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey;\n+\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import com.oracle.tools.fx.monkey.pages.DemoPage;\n+import com.oracle.tools.fx.monkey.settings.FxSettings;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.Native2AsciiPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.geometry.Insets;\n+import javafx.geometry.NodeOrientation;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckMenuItem;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.SplitPane;\n+import javafx.scene.control.ToggleGroup;\n+import javafx.scene.input.KeyCombination;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Priority;\n+import javafx.stage.Modality;\n+import javafx.stage.Stage;\n+\n+\/**\n+ * Monkey Tester Application.\n+ *\n+ * Applications stores its user preferences (window location, etc.) in ~\/.MonkeyTester directory.\n+ * To use a different directory, redefine the \"user.home\" system property, -Duser.home=<...>.\n+ * To disable saving, specify -Ddisable.settings=true vm agrument.\n+ *\/\n+public class MonkeyTesterApp extends Application {\n+    protected Stage stage;\n+    protected ObservableList<DemoPage> pages = FXCollections.observableArrayList();\n+    protected ListView<DemoPage> pageSelector;\n+    protected BorderPane contentPane;\n+    protected DemoPage currentPage;\n+    protected Label status;\n+\n+    public static void main(String[] args) {\n+        Application.launch(MonkeyTesterApp.class, args);\n+    }\n+\n+    @Override\n+    public void init() {\n+        if (!Boolean.getBoolean(\"disable.settings\")) {\n+            FxSettings.useDirectory(\".MonkeyTester\");\n+        }\n+    }\n+\n+    @Override\n+    public void stop() throws Exception {\n+    }\n+\n+    @Override\n+    public void start(Stage stage) throws Exception {\n+        this.stage = stage;\n+\n+        status = new Label();\n+        status.setPadding(new Insets(2, 2, 2, 2));\n+\n+        Label spacer = new Label();\n+\n+        Label ver = new Label();\n+\n+        GridPane st = new GridPane();\n+        st.add(status, 0, 0);\n+        st.add(spacer, 1, 0);\n+        st.add(ver, 2, 0);\n+        GridPane.setVgrow(status, Priority.ALWAYS);\n+        GridPane.setHgrow(spacer, Priority.ALWAYS);\n+        GridPane.setVgrow(ver, Priority.ALWAYS);\n+\n+        pages.setAll(createPages());\n+\n+        pageSelector = new ListView(pages);\n+        pageSelector.setId(\"pageSelector\");\n+        pageSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updatePage(c);\n+        });\n+\n+        contentPane = new BorderPane();\n+        contentPane.setId(\"contentPane\");\n+\n+        SplitPane split = new SplitPane(pageSelector, contentPane);\n+        split.setDividerPositions(0.15);\n+        SplitPane.setResizableWithParent(pageSelector, Boolean.FALSE);\n+        SplitPane.setResizableWithParent(contentPane, Boolean.TRUE);\n+\n+        BorderPane bp = new BorderPane();\n+        bp.setTop(createMenu());\n+        bp.setCenter(split);\n+        bp.setBottom(st);\n+\n+        stage.setScene(new Scene(bp));\n+        stage.setWidth(1200);\n+        stage.setHeight(800);\n+\n+        stage.renderScaleXProperty().addListener((x) -> updateStatus());\n+        stage.renderScaleYProperty().addListener((x) -> updateStatus());\n+        updateTitle();\n+        updateStatus();\n+\n+        stage.show();\n+    }\n+\n+    protected MenuBar createMenu() {\n+        CheckMenuItem orientation = new CheckMenuItem(\"Orientation: RTL\");\n+        orientation.setOnAction((ev) -> {\n+            NodeOrientation v = (orientation.isSelected()) ? NodeOrientation.RIGHT_TO_LEFT\n+                : NodeOrientation.LEFT_TO_RIGHT;\n+            stage.getScene().setNodeOrientation(v);\n+        });\n+\n+        CheckMenuItem usePreferred = new CheckMenuItem(\"Use Preferred Size\");\n+        usePreferred.setOnAction((ev) -> {\n+            boolean on = usePreferred.isSelected();\n+            TestPaneBase.usePreferredSize.set(on);\n+        });\n+\n+        MenuBar b = new MenuBar();\n+        \/\/ File\n+        FX.menu(b, \"_File\");\n+        FX.item(b, \"Quit\", Platform::exit);\n+        \/\/ Page\n+        FX.menu(b, \"_Page\");\n+        FX.item(b, \"Reload Current Page\", this::reloadCurrentPage);\n+        FX.separator(b);\n+        FX.item(b, usePreferred);\n+        \/\/ Menu\n+        FX.menu(b, \"_Menu\");\n+        ToggleGroup g = new ToggleGroup();\n+        FX.radio(b, \"RadioMenuItem 1\", KeyCombination.keyCombination(\"Shortcut+1\"), g);\n+        FX.radio(b, \"RadioMenuItem 2\", KeyCombination.keyCombination(\"Shortcut+2\"), g);\n+        FX.radio(b, \"RadioMenuItem 3\", KeyCombination.keyCombination(\"Shortcut+3\"), g);\n+        FX.menu(b, \"_Tools\");\n+        FX.item(b, \"Native-to-ascii\", this::openNative2Ascii);\n+        \/\/ Window\n+        FX.menu(b, \"_Window\");\n+        FX.item(b, orientation);\n+        FX.separator(b);\n+        FX.item(b, \"Open Modal Window\", this::openModalWindow);\n+        return b;\n+    }\n+\n+    protected void updatePage(DemoPage p) {\n+        FxSettings.store(contentPane);\n+        currentPage = p;\n+        contentPane.setCenter(p == null ? null : p.createPane());\n+        updateTitle();\n+        FxSettings.restore(contentPane);\n+    }\n+\n+    protected void reloadCurrentPage() {\n+        updatePage(currentPage);\n+    }\n+\n+    protected void updateTitle() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"Monkey Tester\");\n+        if (currentPage != null) {\n+            sb.append(\" - \");\n+            sb.append(currentPage.toString());\n+        }\n+        stage.setTitle(sb.toString());\n+    }\n+\n+    protected void updateStatus() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"   \");\n+        sb.append(System.getProperty(\"javafx.runtime.version\"));\n+\n+        if (stage.getRenderScaleX() == stage.getRenderScaleY()) {\n+            sb.append(\"  scale=\");\n+            sb.append(stage.getRenderScaleX());\n+        } else {\n+            sb.append(\"  scaleX=\");\n+            sb.append(stage.getRenderScaleX());\n+            sb.append(\"  scaleY=\");\n+            sb.append(stage.getRenderScaleY());\n+        }\n+        status.setText(sb.toString());\n+    }\n+\n+    protected DemoPage[] createPages() {\n+        DemoPage[] pages = Pages.create();\n+        Arrays.sort(pages, new Comparator<DemoPage>() {\n+            @Override\n+            public int compare(DemoPage a, DemoPage b) {\n+                return a.getTitle().compareTo(b.getTitle());\n+            }\n+        });\n+        return pages;\n+    }\n+\n+    protected void openModalWindow() {\n+        Button b = new Button(\"Platform.exit()\");\n+        b.setOnAction((ev) -> Platform.exit());\n+\n+        Button b2 = new Button(\"OK\");\n+\n+        HBox bp = new HBox(b, b2);\n+\n+        BorderPane p = new BorderPane();\n+        p.setBottom(bp);\n+\n+        Stage d = new Stage();\n+        d.setScene(new Scene(p));\n+        d.initModality(Modality.APPLICATION_MODAL);\n+        d.initOwner(stage);\n+        d.setWidth(500);\n+        d.setHeight(400);\n+        d.show();\n+\n+        b2.setOnAction((ev) -> d.hide());\n+    }\n+\n+    protected void openNative2Ascii() {\n+        Stage s = new Stage();\n+        s.setTitle(\"Native to ASCII\");\n+        s.setScene(new Scene(new Native2AsciiPane()));\n+        s.show();\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/MonkeyTesterApp.java","additions":255,"deletions":0,"binary":false,"changes":255,"status":"added"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey;\n+\n+import com.oracle.tools.fx.monkey.pages.*;\n+\n+\/**\n+ * Monkey Tester Pages.\n+ *\/\n+public class Pages {\n+    public static DemoPage[] create() {\n+        return new DemoPage[] {\n+            new DemoPage(\"Accordion\", AccordionPage::new),\n+            \/\/ TODO Button\n+            \/\/ TODO ButtonBar\n+            new DemoPage(\"Canvas\", CanvasPage::new),\n+            new DemoPage(\"Chart\", ChartPage::new),\n+            \/\/ TODO CheckBox\n+            new DemoPage(\"ChoiceBox\", ChoiceBoxPage::new),\n+            new DemoPage(\"ComboBox\", ComboBoxPage::new),\n+            new DemoPage(\"ColorPicker\", ColorPickerPage::new),\n+            new DemoPage(\"DatePicker\", DatePickerPage::new),\n+            new DemoPage(\"HBox\", HBoxPage::new),\n+            new DemoPage(\"HtmlEditor\", HtmlEditorPage::new),\n+            \/\/ TODO Hyperlink\n+            \/\/ TODO InputField: DoubleField, IntegerField, WebColorField\n+            new DemoPage(\"Label\", LabelPage::new),\n+            new DemoPage(\"ListView\", ListViewPage::new),\n+            \/\/ TODO MenuBar\n+            \/\/ TODO MenuButton\n+            \/\/ TODO Pagination\n+            \/\/ TODO ProgressIndicator\n+            new DemoPage(\"ScrollBar\", ScrollBarPage::new),\n+            \/\/ TODO ScrollPane\n+            \/\/ TODO Separator\n+            \/\/ TODO Slider\n+            new DemoPage(\"Spinner\", SpinnerPage::new),\n+            \/\/ TODO SplitPane\n+            new DemoPage(\"TableView\", TableViewPage::new),\n+            \/\/ TODO TabPane\n+            new DemoPage(\"Text\", TextPage::new),\n+            new DemoPage(\"TextArea\", TextAreaPage::new),\n+            new DemoPage(\"TextField\", TextFieldPage::new),\n+            new DemoPage(\"TextFlow\", TextFlowPage::new),\n+            \/\/ TODO TitledPane\n+            \/\/ TODO ToggleButton\n+            \/\/ TODO ToolBar\n+            \/\/ TODO in tables: Cell, DateCell, IndexedCell* ?\n+            new DemoPage(\"TreeTableView\", TreeTableViewPage::new),\n+            new DemoPage(\"TreeView\", TreeViewPage::new),\n+            \/\/ TODO VBox\n+\n+            \/\/ bugs\n+            \/\/new DemoPage(\"⚑ Dual Focus JDK-8292933\", DualFocusPage::new),\n+            \/\/new DemoPage(\"⚑ DatePicker in Alert\", DatePickerPage::new),\n+        };\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/Pages.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.TitledPane;\n+\n+\/**\n+ *\n+ *\/\n+public class AccordionPage extends TestPaneBase {\n+    private final Accordion accordion;\n+\n+    public AccordionPage() {\n+        setId(\"AccordionPage\");\n+\n+        accordion = new Accordion();\n+        addPane();\n+\n+        Button addButton = new Button(\"Add Pane\");\n+        addButton.setOnAction((ev) -> addPane());\n+\n+        Button removeButton = new Button(\"Remove Pane\");\n+        removeButton.setOnAction((ev) -> removePane());\n+\n+        OptionPane op = new OptionPane();\n+        op.add(addButton);\n+        op.add(removeButton);\n+\n+        setContent(accordion);\n+        setOptions(op);\n+    }\n+\n+    protected void addPane() {\n+        String name = \"\" + System.currentTimeMillis();\n+        Button b = new Button(name);\n+        b.setOnAction((ev) -> {\n+            System.out.println(name);\n+        });\n+        TitledPane p = new TitledPane(name, b);\n+        accordion.getPanes().add(p);\n+    }\n+\n+    protected void removePane() {\n+        int sz = accordion.getPanes().size();\n+        if (sz > 0) {\n+            accordion.getPanes().remove(0);\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/AccordionPage.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import javafx.scene.canvas.Canvas;\n+import javafx.scene.canvas.GraphicsContext;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.paint.Color;\n+import javafx.scene.text.Font;\n+\n+\/**\n+ * Canvas Page.\n+ *\/\n+public class CanvasPage extends TestPaneBase {\n+    private Pane pane;\n+\n+    public CanvasPage() {\n+        setId(\"CanvasPage\");\n+\n+        pane = new Pane();\n+        setContent(pane);\n+\n+        pane.widthProperty().addListener((x) -> updateCanvas());\n+        pane.heightProperty().addListener((x) -> updateCanvas());\n+\n+        updateCanvas();\n+    }\n+\n+    protected void updateCanvas() {\n+        double w = pane.getWidth();\n+        double h = pane.getHeight();\n+        String text = \"width=\" + w + \" height=\" + h;\n+        Font f = Font.font(\"System\", 12);\n+        Canvas c = new Canvas(w, h);\n+\n+        GraphicsContext g = c.getGraphicsContext2D();\n+\n+        g.setFont(f);\n+        g.setFill(Color.BLACK);\n+        g.fillText(text, 2, 14);\n+\n+        g.setLineWidth(0.5);\n+        g.setStroke(Color.RED);\n+        g.beginPath();\n+        g.moveTo(0, h \/ 2);\n+        g.lineTo(w, h \/ 2);\n+        g.stroke();\n+\n+        pane.getChildren().setAll(c);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/CanvasPage.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,210 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.util.Random;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import javafx.scene.chart.AreaChart;\n+import javafx.scene.chart.BarChart;\n+import javafx.scene.chart.BubbleChart;\n+import javafx.scene.chart.CategoryAxis;\n+import javafx.scene.chart.LineChart;\n+import javafx.scene.chart.NumberAxis;\n+import javafx.scene.chart.ScatterChart;\n+import javafx.scene.chart.StackedAreaChart;\n+import javafx.scene.chart.StackedBarChart;\n+import javafx.scene.chart.XYChart;\n+import javafx.scene.chart.XYChart.Series;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.layout.BorderPane;\n+\n+\/**\n+ * Tests various XYCharts\n+ *\/\n+public class ChartPage extends TestPaneBase {\n+    public enum Mode {\n+        AREA,\n+        BAR,\n+        BUBBLE,\n+        LINE,\n+        SCATTER,\n+        STACKED_AREA,\n+        STACKED_BAR,\n+    }\n+\n+    private ComboBox<Mode> modeSelector;\n+    private XYChart<?, Number> chart;\n+    protected static Random rnd = new Random();\n+\n+    public ChartPage() {\n+        setId(\"ChartPage\");\n+\n+        modeSelector = new ComboBox<>();\n+        modeSelector.setId(\"modeSelector\");\n+        modeSelector.getItems().addAll(Mode.values());\n+        modeSelector.setEditable(false);\n+        modeSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updateChart();\n+        });\n+\n+        Button addButton = new Button(\"Add Series\");\n+        addButton.setOnAction((ev) -> addSeries());\n+\n+        Button removeButton = new Button(\"Remove Series\");\n+        removeButton.setOnAction((ev) -> removeSeries());\n+\n+        Button addRemoveButton = new Button(\"Add\/Remove Series\");\n+        addRemoveButton.setOnAction((ev) -> addRemoveSeries());\n+\n+        OptionPane p = new OptionPane();\n+        p.label(\"Chart Type:\");\n+        p.option(modeSelector);\n+        p.option(addButton);\n+        p.option(removeButton);\n+        p.option(addRemoveButton);\n+        setOptions(p);\n+\n+        modeSelector.getSelectionModel().selectFirst();\n+    }\n+\n+    protected void updateChart() {\n+        Mode m = modeSelector.getSelectionModel().getSelectedItem();\n+        chart = createChart(m);\n+\n+        BorderPane bp = new BorderPane();\n+        bp.setCenter(chart);\n+        setContent(bp);\n+\n+        addSeries();\n+    }\n+\n+    protected void addSeries() {\n+        if (chart != null) {\n+            if (chart instanceof BarChart b) {\n+                Series s = createBarSeries();\n+                b.getData().add(s);\n+            } else if (chart instanceof StackedBarChart b) {\n+                Series s = createBarSeries();\n+                b.getData().add(s);\n+            } else {\n+                Series s = createNumberSeries();\n+                chart.getData().add(s);\n+            }\n+        }\n+    }\n+\n+    protected void removeSeries() {\n+        if (chart != null) {\n+            if (chart.getData().size() > 0) {\n+                chart.getData().remove(0);\n+            }\n+        }\n+    }\n+\n+    protected void addRemoveSeries() {\n+        if (chart != null) {\n+            if (chart.getData().size() > 0) {\n+                var first = chart.getData().remove(0);\n+                chart.getData().add((Series)first);\n+            }\n+        }\n+    }\n+\n+    private XYChart<?, Number> createChart(Mode m) {\n+        NumberAxis xAxis = new NumberAxis();\n+        xAxis.setLabel(\"X\");\n+\n+        NumberAxis yAxis = new NumberAxis();\n+        yAxis.setLabel(\"Y\");\n+\n+        switch (m) {\n+        case AREA: {\n+            AreaChart<Number, Number> chart = new AreaChart<>(xAxis, yAxis);\n+            chart.setTitle(\"Area Chart\");\n+            return chart;\n+        }\n+        case BAR: {\n+            CategoryAxis x = new CategoryAxis();\n+            BarChart<String, Number> chart = new BarChart<>(x, yAxis);\n+            chart.setTitle(\"Bar Chart\");\n+            return chart;\n+        }\n+        case BUBBLE: {\n+            BubbleChart<Number, Number> chart = new BubbleChart<>(xAxis, yAxis);\n+            chart.setTitle(\"Bubble Chart\");\n+            return chart;\n+        }\n+        case LINE: {\n+            LineChart<Number, Number> chart = new LineChart<>(xAxis, yAxis);\n+            chart.setTitle(\"Line Chart\");\n+            return chart;\n+        }\n+        case SCATTER: {\n+            ScatterChart<Number, Number> chart = new ScatterChart<>(xAxis, yAxis);\n+            chart.setTitle(\"Scatter Chart\");\n+            return chart;\n+        }\n+        case STACKED_AREA: {\n+            StackedAreaChart<Number, Number> chart = new StackedAreaChart<>(xAxis, yAxis);\n+            chart.setTitle(\"Stacked Area Chart\");\n+            return chart;\n+        }\n+        case STACKED_BAR: {\n+            CategoryAxis x = new CategoryAxis();\n+            StackedBarChart<String, Number> chart = new StackedBarChart<>(x, yAxis);\n+            chart.setTitle(\"Stacked Bar Chart\");\n+            return chart;\n+        }\n+        }\n+\n+        return null;\n+    }\n+\n+    public Series<Number, Number> createNumberSeries() {\n+        String name = Long.toString(System.currentTimeMillis(), 16);\n+\n+        XYChart.Series s = new XYChart.Series();\n+        s.setName(name);\n+        for (int i = 0; i < 12; i++) {\n+            int v = rnd.nextInt(50);\n+            s.getData().add(new XYChart.Data(i, v));\n+        }\n+        return s;\n+    }\n+\n+    public Series<String, Number> createBarSeries() {\n+        String name = Long.toString(System.currentTimeMillis(), 16);\n+\n+        XYChart.Series s = new XYChart.Series();\n+        s.setName(name);\n+        for (int i = 0; i < 12; i++) {\n+            int v = rnd.nextInt(50);\n+            s.getData().add(new XYChart.Data(\"c\" + i, v));\n+        }\n+        return s;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ChartPage.java","additions":210,"deletions":0,"binary":false,"changes":210,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.util.Locale;\n+import com.oracle.tools.fx.monkey.util.ItemSelector;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import javafx.scene.control.ChoiceBox;\n+\n+\/**\n+ * ChoiceBox Page\n+ *\/\n+public class ChoiceBoxPage extends TestPaneBase {\n+    enum TextChoice {\n+        NULL,\n+        SHORT,\n+        LONG,\n+        RIGHT_TO_LEFT,\n+    }\n+\n+    private ChoiceBox<String> control;\n+    private Locale defaultLocale;\n+\n+    public ChoiceBoxPage() {\n+        setId(\"ChoiceBoxPage\");\n+\n+        control = new ChoiceBox();\n+\n+        ItemSelector<String[]> itemSelector = new ItemSelector<>(\n+            \"itemSelector\",\n+            (t) -> control.getItems().setAll(t),\n+            \"0\", mk(0),\n+            \"1\", mk(1),\n+            \"2\", mk(2),\n+            \"5\", mk(5),\n+            \"100\", mk(100),\n+            \"1_000\", mk(1_000));\n+\n+        \/\/ TODO converter\n+\n+        OptionPane p = new OptionPane();\n+        p.label(\"Items:\");\n+        p.option(itemSelector.node());\n+\n+        setContent(control);\n+        setOptions(p);\n+    }\n+\n+    private static String[] mk(int size) {\n+        String[] ss = new String[size];\n+        for (int i = 0; i < size; i++) {\n+            ss[i] = (\"Item \" + i);\n+        }\n+        return ss;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ChoiceBoxPage.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.geometry.Point2D;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Alert.AlertType;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ColorPicker;\n+import javafx.scene.paint.Color;\n+import javafx.stage.StageStyle;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * ColorPicker Page\n+ *\/\n+public class ColorPickerPage extends TestPaneBase {\n+    private final Button button;\n+    private ColorPicker picker1;\n+    private ColorPicker picker2;\n+    private Alert dialog;\n+\n+    public ColorPickerPage() {\n+        setId(\"ColorPickerPage\");\n+\n+        button = new Button(\"Show in Alert\");\n+\n+        picker1 = new ColorPicker(Color.BLUE);\n+        picker1.valueProperty().addListener(event -> {\n+            dialog.close();\n+        });\n+\n+        button.setOnAction(event -> {\n+            Point2D p = button.localToScreen(0, button.getHeight());\n+\n+            dialog = new Alert(AlertType.INFORMATION);\n+            dialog.initStyle(StageStyle.UNDECORATED);\n+            dialog.initOwner(getWindow());\n+            dialog.getDialogPane().setContent(picker1);\n+            dialog.setX(p.getX());\n+            dialog.setY(p.getY());\n+            dialog.show();\n+\n+            Object v = picker1.getValue();\n+            System.out.println(v);\n+        });\n+\n+        picker2 = new ColorPicker(Color.YELLOW);\n+        picker2.setOnAction((ev) -> {\n+            Object v = picker2.getValue();\n+            System.out.println(v);\n+        });\n+\n+        OptionPane p = new OptionPane();\n+        p.option(button);\n+\n+        setContent(picker2);\n+        setOptions(p);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ColorPickerPage.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.layout.VBox;\n+import javafx.util.Duration;\n+import javafx.util.StringConverter;\n+\n+\/**\n+ *\n+ *\/\n+public class ComboBoxPage extends TestPaneBase {\n+    private ComboBox control;\n+\n+    public ComboBoxPage() {\n+        setId(\"ComboBoxPage\");\n+\n+        control = new ComboBox();\n+        control.getItems().setAll(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\");\n+\n+        VBox b = new VBox();\n+        b.getChildren().add(control);\n+        setContent(b);\n+\n+        addButton(\"Set Converter\", () -> {\n+            control.setConverter(new StringConverter() {\n+                int toStringCounter = 0;\n+                int fromStringCounter = 0;\n+\n+                @Override\n+                public String toString(Object t) {\n+                    return \"toString-\" + t;\n+                }\n+\n+                @Override\n+                public Object fromString(String t) {\n+                    return \"fromString\" + t;\n+                }\n+            });\n+        });\n+\n+        addButton(\"Change Item Count\", () -> {\n+            new Timeline(\n+                new KeyFrame(Duration.seconds(1.0), (ev) -> {\n+                    System.out.println(\"2\");\n+                    control.setVisibleRowCount(2);\n+                }),\n+                new KeyFrame(Duration.seconds(2.0), (ev) -> {\n+                    System.out.println(\"20\");\n+                    control.setVisibleRowCount(20);\n+                }),\n+                new KeyFrame(Duration.seconds(3.0), (ev) -> {\n+                    System.out.println(\"2\");\n+                    control.setVisibleRowCount(2);\n+                })).play();\n+        });\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ComboBoxPage.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.time.LocalDate;\n+import javafx.geometry.Point2D;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Alert.AlertType;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.DatePicker;\n+import javafx.stage.StageStyle;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * DatePicker Page\n+ *\/\n+public class DatePickerPage extends TestPaneBase {\n+    private final Button button;\n+    private DatePicker datePicker;\n+    private DatePicker datePicker2;\n+    private Alert dialog;\n+\n+    public DatePickerPage() {\n+        setId(\"DatePickerPage\");\n+\n+        button = new Button(\"Show in Alert\");\n+\n+        datePicker = new DatePicker(LocalDate.now());\n+        datePicker.valueProperty().addListener(event -> {\n+            dialog.close();\n+        });\n+\n+        button.setOnAction(event -> {\n+            Point2D p = button.localToScreen(0, button.getHeight());\n+\n+            dialog = new Alert(AlertType.INFORMATION);\n+            dialog.initStyle(StageStyle.UNDECORATED);\n+            dialog.initOwner(getWindow());\n+            dialog.getDialogPane().setContent(datePicker);\n+            dialog.setX(p.getX());\n+            dialog.setY(p.getY());\n+            dialog.show();\n+\n+            LocalDate v = datePicker.getValue();\n+            System.out.println(v);\n+        });\n+\n+        datePicker2 = new DatePicker(LocalDate.now());\n+\n+        OptionPane p = new OptionPane();\n+        p.option(button);\n+\n+        setContent(datePicker2);\n+        setOptions(p);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/DatePickerPage.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.util.function.Supplier;\n+import javafx.scene.layout.Pane;\n+\n+\/**\n+ *\n+ *\/\n+public class DemoPage {\n+    private final String title;\n+    private final Supplier<Pane> generator;\n+\n+    public DemoPage(String title, Supplier<Pane> generator) {\n+        this.title = title;\n+        this.generator = generator;\n+    }\n+\n+    public Pane createPane() {\n+        return generator.get();\n+    }\n+\n+    public String toString() {\n+        return title;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+}\n\\ No newline at end of file\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/DemoPage.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/\/ Copyright © 2018-2019 Andy Goryachev <andy@goryachev.com>\n+\/\/ https:\/\/github.com\/andy-goryachev\/JavaBugs\/blob\/master\/src\/goryachev\/bugs\/fx\/DualFocus.java\n+\/\/ https:\/\/bugs.openjdk.org\/browse\/JDK-8292933\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import javafx.geometry.Point2D;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.PopupControl;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.BorderPane;\n+\n+\/**\n+ * Illustrates dual focus bug JDK-8292933\n+ *\/\n+public class DualFocusPage extends TestPaneBase {\n+    protected PopupControl popup;\n+    protected BorderPane popupBox;\n+    protected final TextField textField;\n+\n+    public DualFocusPage() {\n+        textField = new TextField();\n+        textField.focusedProperty().addListener((s, p, c) -> handleFocus(c));\n+\n+        TextArea textArea = new TextArea();\n+        textArea.setEditable(false);\n+        textArea.setText(\n+            \"\\n\\n\\n\" +\n+                \"1. Click on the text field.\\n\" +\n+                \"2. Notice that both the text field and the check box have focus.\\n\" +\n+                \"3. Press SPACE.  Notice both both text field and check box have the input focus.\\n\" +\n+                \"\\n\" +\n+                \"Only one component is expected to have focus.\");\n+\n+        BorderPane bp = new BorderPane();\n+        bp.setPrefSize(700, 300);\n+        bp.setTop(textField);\n+        bp.setCenter(textArea);\n+\n+        setContent(bp);\n+    }\n+\n+    protected void handleFocus(boolean on) {\n+        if (on) {\n+            showPopup();\n+        } else {\n+            hidePopup();\n+        }\n+    }\n+\n+    protected void showPopup() {\n+        if (popup == null) {\n+            popupBox = new BorderPane();\n+            popupBox.setLeft(new CheckBox(\"why do both popup and text field have the input focus?\"));\n+            popupBox.setStyle(\"-fx-background-color:red; -fx-background-radius:10; -fx-padding:10px;\");\n+\n+            popup = new PopupControl();\n+            popup.getScene().setRoot(popupBox);\n+            popup.setConsumeAutoHidingEvents(false);\n+            popup.setAutoFix(true);\n+            popup.setAutoHide(false);\n+\n+            popupBox.applyCss();\n+\n+            double dx = textField.getLayoutX();\n+            double dy = textField.getLayoutY() + textField.getHeight();\n+\n+            Point2D p = textField.localToScreen(0, 0);\n+            popup.show(textField, p.getX() + dx, p.getY() + dy);\n+        }\n+    }\n+\n+    protected void hidePopup() {\n+        if (popup != null) {\n+            popup.hide();\n+            popup = null;\n+        }\n+\n+        if (popupBox != null) {\n+            popupBox = null;\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/DualFocusPage.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,395 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.util.Random;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.SeparatorMenuItem;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.layout.Region;\n+import javafx.scene.paint.Color;\n+\n+\/**\n+ * HBox page\n+ *\/\n+public class HBoxPage extends TestPaneBase {\n+    enum Demo {\n+        FILL_MAX(\"fill + max\"),\n+        PREF(\"pref only\"),\n+        ALL(\"all set: min, pref, max\"),\n+        MIN_WIDTH(\"min width\"),\n+        MAX_WIDTH(\"max width progressive\"),\n+        MIN_WIDTH2(\"min width (middle)\"),\n+        MAX_WIDTH2(\"max width (middle)\"),\n+        MIN_WIDTH3(\"min width (beginning)\"),\n+        MAX_WIDTH3(\"max width (beginning)\"),\n+        FIXED_MIDDLE(\"fixed in the middle\"),\n+        ALL_FIXED(\"all fixed\"),\n+        ALL_MAX(\"all with maximum width\"),\n+        MIN_IN_CENTER(\"min widths set in middle columns\"),\n+        MAX_IN_CENTER(\"max widths set in middle columns\"),\n+        VARIOUS(\"various\"),\n+        MANY_COLUMNS(\"many columns\"),\n+        MANY_COLUMNS_SAME(\"many columns, same pref\"),\n+        ;\n+        private final String text;\n+        Demo(String text) { this.text = text; }\n+        public String toString() { return text; }\n+    }\n+\n+    public enum Cmd {\n+        COL,\n+        MIN,\n+        PREF,\n+        MAX,\n+        FILL,\n+    }\n+\n+    protected final Cmd COL = Cmd.COL;\n+    protected final Cmd MIN = Cmd.MIN;\n+    protected final Cmd PREF = Cmd.PREF;\n+    protected final Cmd MAX = Cmd.MAX;\n+    protected final Cmd FILL = Cmd.FILL;\n+\n+    protected final ComboBox<Demo> demoSelector;\n+    protected final CheckBox grow;\n+    protected HBox hbox;\n+\n+    public HBoxPage() {\n+        setId(\"HBoxPage\");\n+\n+        \/\/ selector\n+        demoSelector = new ComboBox<>();\n+        demoSelector.setId(\"demoSelector\");\n+        demoSelector.getItems().addAll(Demo.values());\n+        demoSelector.setEditable(false);\n+        demoSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updatePane();\n+        });\n+\n+        Button addButton = new Button(\"Add Item\");\n+        addButton.setOnAction((ev) -> {\n+            hbox.getChildren().add(newItem());\n+        });\n+\n+        Button clearButton = new Button(\"Clear Items\");\n+        clearButton.setOnAction((ev) -> {\n+            hbox.getChildren().clear();\n+        });\n+\n+        grow = new CheckBox(\"grow\");\n+        grow.setId(\"grow\");\n+        grow.selectedProperty().addListener((s, p, on) -> {\n+            setGrow(on);\n+        });\n+\n+        \/\/ layout\n+\n+        OptionPane p = new OptionPane();\n+        p.label(\"Configuration:\");\n+        p.option(demoSelector);\n+        p.option(addButton);\n+        p.option(clearButton);\n+        p.option(grow);\n+        setOptions(p);\n+\n+        FX.selectFirst(demoSelector);\n+    }\n+\n+    protected void setGrow(boolean on) {\n+        Priority p = on ? Priority.ALWAYS : Priority.NEVER;\n+        for (Node n: hbox.getChildren()) {\n+            HBox.setHgrow(n, p);\n+        }\n+    }\n+\n+    protected Object[] createSpec(Demo d) {\n+        switch (d) {\n+        case ALL:\n+            return new Object[] {\n+                COL,\n+                COL, MIN, 20, PREF, 20, MAX, 20,\n+                COL, PREF, 200,\n+                COL, PREF, 300, MAX, 400,\n+                COL\n+            };\n+        case FILL_MAX:\n+            return new Object[] {\n+                COL, FILL,\n+                COL, MAX, 200\n+            };\n+        case PREF:\n+            return new Object[] {\n+                COL, PREF, 100,\n+                COL, PREF, 200,\n+                COL, PREF, 300,\n+                COL, PREF, 400\n+            };\n+        case MIN_WIDTH:\n+            return new Object[] {\n+                COL,\n+                COL,\n+                COL,\n+                COL, MIN, 300\n+            };\n+        case MAX_WIDTH:\n+            return new Object[] {\n+                COL, MAX, 30, FILL,\n+                COL, MAX, 31, FILL,\n+                COL, MAX, 32, FILL,\n+                COL, MAX, 33, FILL,\n+                COL, MAX, 34, FILL,\n+                COL, MAX, 35, FILL,\n+                COL, MAX, 36, FILL,\n+                COL, MAX, 37, FILL,\n+                COL, MAX, 38, FILL,\n+            };\n+        case MIN_WIDTH2:\n+            return new Object[] {\n+                COL,\n+                COL,\n+                COL, MIN, 300,\n+                COL\n+            };\n+        case MAX_WIDTH2:\n+            return new Object[] {\n+                COL,\n+                COL,\n+                COL, MAX, 100,\n+                COL\n+            };\n+        case MIN_WIDTH3:\n+            return new Object[] {\n+                COL, MIN, 300,\n+                COL,\n+                COL,\n+                COL\n+            };\n+        case MAX_WIDTH3:\n+            return new Object[] {\n+                COL, MAX, 100,\n+                COL,\n+                COL,\n+                COL\n+            };\n+        case MIN_IN_CENTER:\n+            return new Object[] {\n+                COL,\n+                COL, MIN, 20,\n+                COL, MIN, 30,\n+                COL, MIN, 40,\n+                COL, MIN, 50,\n+                COL, MIN, 60,\n+                COL\n+            };\n+        case MAX_IN_CENTER:\n+            return new Object[] {\n+                COL,\n+                COL, MAX, 20,\n+                COL, MAX, 30,\n+                COL, MAX, 40,\n+                COL, MAX, 50,\n+                COL, MAX, 60,\n+                COL\n+            };\n+        case FIXED_MIDDLE:\n+            return new Object[] {\n+                COL,\n+                COL,\n+                COL,\n+                COL, MIN, 100, MAX, 100,\n+                COL, MIN, 100, MAX, 100,\n+                COL,\n+                COL,\n+                COL\n+            };\n+        case ALL_FIXED:\n+            return new Object[] {\n+                COL, MIN, 50, MAX, 50,\n+                COL, MIN, 50, MAX, 50,\n+                COL, MIN, 50, MAX, 50\n+            };\n+        case ALL_MAX:\n+            return new Object[] {\n+                COL, MAX, 50,\n+                COL, MAX, 50,\n+                COL, MAX, 50\n+            };\n+        case VARIOUS:\n+            return new Object[] {\n+                COL, PREF, 100,\n+                COL, PREF, 200,\n+                COL, PREF, 300,\n+                COL, MIN, 100, MAX, 100,\n+                COL, PREF, 100,\n+                COL, MIN, 100,\n+                COL, MAX, 100,\n+                COL, PREF, 400,\n+                COL\n+            };\n+        case MANY_COLUMNS:\n+            return new Object[] {\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL,\n+                COL\n+            };\n+        case MANY_COLUMNS_SAME:\n+            return new Object[] {\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30,\n+                COL, PREF, 30\n+            };\n+        default:\n+            throw new Error(\"?\" + d);\n+        }\n+    }\n+\n+    protected HBox createPane(Demo demo, Object[] spec) {\n+        if ((demo == null) || (spec == null)) {\n+            return new HBox();\n+        }\n+\n+        HBox b = new HBox();\n+        Region region = null;\n+\n+        for (int i = 0; i < spec.length;) {\n+            Object x = spec[i++];\n+            if (x instanceof Cmd cmd) {\n+                switch (cmd) {\n+                case COL:\n+                    {\n+                        Region c = newItem();\n+                        b.getChildren().add(c);\n+                        HBox.setHgrow(c, grow.isSelected() ? Priority.ALWAYS : Priority.NEVER);\n+                        region = c;\n+                    }\n+                    break;\n+                case MAX:\n+                    {\n+                        int w = (int)(spec[i++]);\n+                        region.setMaxWidth(w);\n+                    }\n+                    break;\n+                case MIN:\n+                    {\n+                        int w = (int)(spec[i++]);\n+                        region.setMinWidth(w);\n+                    }\n+                    break;\n+                case PREF:\n+                    {\n+                        int w = (int)(spec[i++]);\n+                        region.setPrefWidth(w);\n+                    }\n+                    break;\n+                case FILL:\n+                    {\n+                        HBox.setHgrow(region, Priority.ALWAYS);\n+                    }\n+                    break;\n+                default:\n+                    throw new Error(\"?\" + cmd);\n+                }\n+            } else {\n+                throw new Error(\"?\" + x);\n+            }\n+        }\n+\n+        return b;\n+    }\n+\n+    protected Region newItem() {\n+        Region r = new Region();\n+        r.setPrefWidth(30);\n+        r.setMinWidth(10);\n+        r.setBackground(bg());\n+        ContextMenu m = new ContextMenu();\n+        r.setOnContextMenuRequested((ev) -> {\n+            m.getItems().setAll(\n+                new MenuItem(\"width=\" + r.getWidth()),\n+                new SeparatorMenuItem(),\n+                new MenuItem(\"min width=\" + r.getMinWidth()),\n+                new MenuItem(\"pref width=\" + r.getPrefWidth()),\n+                new MenuItem(\"max width=\" + r.getMaxWidth())\n+            );\n+            m.show(r, ev.getScreenX(), ev.getScreenY());\n+        });\n+        return r;\n+    }\n+\n+    protected Background bg() {\n+        double h = new Random().nextInt(360);\n+        Color c = Color.hsb(h, 0.2, 0.99);\n+        return new Background(new BackgroundFill(c, null, null));\n+    }\n+\n+    protected void updatePane() {\n+        Demo d = demoSelector.getSelectionModel().getSelectedItem();\n+        Object[] spec = createSpec(d);\n+        hbox = createPane(d, spec);\n+        setContent(hbox);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/HBoxPage.java","additions":395,"deletions":0,"binary":false,"changes":395,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import javafx.scene.web.HTMLEditor;\n+\n+\/**\n+ *\n+ *\/\n+public class HtmlEditorPage extends TestPaneBase {\n+    public HtmlEditorPage() {\n+        setId(\"HtmlEditorPage\");\n+        HTMLEditor ed = new HTMLEditor();\n+        setContent(ed);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/HtmlEditorPage.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,201 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import javafx.geometry.Pos;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ContentDisplay;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.image.PixelWriter;\n+import javafx.scene.image.WritableImage;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.paint.Color;\n+\n+\/**\n+ *\n+ *\/\n+public class LabelPage extends TestPaneBase {\n+    enum Demo {\n+        TEXT_ONLY(\"text only\"),\n+        TEXT_GRAPHIC_LEFT(\"text + graphic left\"),\n+        TEXT_GRAPHIC_RIGHT(\"text + graphic right\"),\n+        TEXT_GRAPHIC_TOP(\"text + graphic top\"),\n+        TEXT_GRAPHIC_BOTTOM(\"text + graphic bottom\"),\n+        TEXT_GRAPHIC_TEXT_ONLY(\"text + graphic (text only)\"),\n+        TEXT_GRAPHIC_GRAPHIC_ONLY(\"text + graphic (graphic only)\"),\n+        GRAPHIC(\"graphic\"),\n+        ;\n+        private final String text;\n+        Demo(String text) { this.text = text; }\n+        public String toString() { return text; }\n+    }\n+\n+    private final ComboBox<Demo> label1Selector;\n+    private final ComboBox<Demo> label2Selector;\n+    private final ComboBox<Pos> alignmentSelector;\n+    private final Image im;\n+\n+    public LabelPage() {\n+        setId(\"LabelPage\");\n+\n+        im = createImage();\n+\n+        label1Selector = new ComboBox<>();\n+        label1Selector.setId(\"label1Selector\");\n+        label1Selector.getItems().addAll(Demo.values());\n+        label1Selector.setEditable(false);\n+        label1Selector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updateControl();\n+        });\n+\n+        label2Selector = new ComboBox<>();\n+        label2Selector.setId(\"label2Selector\");\n+        label2Selector.getItems().addAll(Demo.values());\n+        label2Selector.setEditable(false);\n+        label2Selector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updateControl();\n+        });\n+\n+        alignmentSelector = new ComboBox<>();\n+        alignmentSelector.setId(\"alignmentSelector\");\n+        alignmentSelector.getItems().addAll(Pos.values());\n+        alignmentSelector.setEditable(false);\n+        alignmentSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updateControl();\n+        });\n+\n+        OptionPane p = new OptionPane();\n+        p.label(\"Label 1:\");\n+        p.option(label1Selector);\n+        p.label(\"Label 2:\");\n+        p.option(label2Selector);\n+        p.label(\"HBox Alignment:\");\n+        p.option(alignmentSelector);\n+        setOptions(p);\n+\n+        FX.select(label1Selector, Demo.TEXT_ONLY);\n+        FX.select(label2Selector, Demo.TEXT_ONLY);\n+    }\n+\n+    protected void updateControl() {\n+        Demo d1 = FX.getSelectedItem(label1Selector);\n+        Label label1 = create(d1);\n+\n+        Demo d2 = FX.getSelectedItem(label2Selector);\n+        Label label2 = create(d2);\n+\n+        HBox b = new HBox(label1, label2);\n+        Pos a = FX.getSelectedItem(alignmentSelector);\n+        if (a != null) {\n+            b.setAlignment(a);\n+        }\n+        setContent(b);\n+    }\n+\n+    protected Label create(Demo d) {\n+        if(d == null) {\n+            return new Label();\n+        }\n+\n+        switch(d) {\n+        case TEXT_GRAPHIC_LEFT:\n+            {\n+                Label t = new Label(\"text + graphic left\");\n+                t.setGraphic(new ImageView(im));\n+                t.setContentDisplay(ContentDisplay.LEFT);\n+                return t;\n+            }\n+        case TEXT_GRAPHIC_RIGHT:\n+            {\n+                Label t = new Label(\"text + graphic right\");\n+                t.setGraphic(new ImageView(im));\n+                t.setContentDisplay(ContentDisplay.RIGHT);\n+                return t;\n+            }\n+        case TEXT_ONLY:\n+            {\n+                return new Label(\"text only\");\n+            }\n+        case TEXT_GRAPHIC_TOP:\n+            {\n+                Label t = new Label(\"text + graphic top\");\n+                t.setGraphic(new ImageView(im));\n+                t.setContentDisplay(ContentDisplay.TOP);\n+                return t;\n+            }\n+        case TEXT_GRAPHIC_BOTTOM:\n+            {\n+                Label t = new Label(\"text + graphic bottom\");\n+                t.setGraphic(new ImageView(im));\n+                t.setContentDisplay(ContentDisplay.BOTTOM);\n+                return t;\n+            }\n+        case TEXT_GRAPHIC_TEXT_ONLY:\n+            {\n+                Label t = new Label(\"text + graphic text only\");\n+                t.setGraphic(new ImageView(im));\n+                t.setContentDisplay(ContentDisplay.TEXT_ONLY);\n+                return t;\n+            }\n+        case TEXT_GRAPHIC_GRAPHIC_ONLY:\n+            {\n+                Label t = new Label(\"text + graphic (graphic only)\");\n+                t.setGraphic(new ImageView(im));\n+                t.setContentDisplay(ContentDisplay.GRAPHIC_ONLY);\n+                return t;\n+            }\n+        case GRAPHIC:\n+            {\n+                Label t = new Label();\n+                t.setGraphic(new ImageView(im));\n+                return t;\n+            }\n+        default:\n+            return new Label(\"??\" + d);\n+        }\n+    }\n+\n+    private static Image createImage() {\n+        int w = 24;\n+        int h = 16;\n+        Color c = Color.GREEN;\n+\n+        WritableImage im = new WritableImage(w, h);\n+        PixelWriter wr = im.getPixelWriter();\n+\n+        for (int y = 0; y < h; y++) {\n+            for (int x = 0; x < w; x++) {\n+                wr.setColor(x, y, c);\n+            }\n+        }\n+\n+        return im;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/LabelPage.java","additions":201,"deletions":0,"binary":false,"changes":201,"status":"added"},{"patch":"@@ -0,0 +1,269 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.util.Random;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import javafx.scene.Node;\n+import javafx.scene.Parent;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.SelectionMode;\n+import javafx.scene.control.skin.VirtualFlow;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.Pane;\n+\n+\/**\n+ * ListView page\n+ *\/\n+public class ListViewPage extends TestPaneBase {\n+    enum Demo {\n+        EMPTY(\"Empty\"),\n+        LARGE(\"Large\"),\n+        SMALL(\"Small\"),\n+        VARIABLE(\"Variable Height\"),\n+        ;\n+\n+        private final String text;\n+        Demo(String text) { this.text = text; }\n+        public String toString() { return text; }\n+    }\n+\n+    public enum Selection {\n+        SINGLE(\"single selection\"),\n+        MULTIPLE(\"multiple selection\"),\n+        NULL(\"null selection model\");\n+\n+        private final String text;\n+        Selection(String text) { this.text = text; }\n+        public String toString() { return text; }\n+    }\n+\n+    public enum Cmd {\n+        ROWS,\n+        VARIABLE_ROWS,\n+    }\n+\n+    protected final ComboBox<Demo> demoSelector;\n+    protected final ComboBox<Selection> selectionSelector;\n+    protected final CheckBox nullFocusModel;\n+    protected ListView<Object> control;\n+\n+    public ListViewPage() {\n+        setId(\"ListViewPage\");\n+\n+        \/\/ selector\n+        demoSelector = new ComboBox<>();\n+        demoSelector.setId(\"demoSelector\");\n+        demoSelector.getItems().addAll(Demo.values());\n+        demoSelector.setEditable(false);\n+        demoSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updatePane();\n+        });\n+\n+        selectionSelector = new ComboBox<>();\n+        selectionSelector.setId(\"selectionSelector\");\n+        selectionSelector.getItems().addAll(Selection.values());\n+        selectionSelector.setEditable(false);\n+        selectionSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updatePane();\n+        });\n+\n+        nullFocusModel = new CheckBox(\"null focus model\");\n+        nullFocusModel.setId(\"nullFocusModel\");\n+        nullFocusModel.selectedProperty().addListener((s, p, c) -> {\n+            updatePane();\n+        });\n+\n+        Button addButton = new Button(\"Add Item\");\n+        addButton.setOnAction((ev) -> {\n+            control.getItems().add(newItem(\"\"));\n+        });\n+\n+        Button clearButton = new Button(\"Clear Items\");\n+        clearButton.setOnAction((ev) -> {\n+            control.getItems().clear();\n+        });\n+\n+        Button jumpButton = new Button(\"Jump w\/VirtualFlow\");\n+        jumpButton.setOnAction((ev) -> {\n+            jump();\n+        });\n+\n+        \/\/ layout\n+\n+        OptionPane p = new OptionPane();\n+        p.label(\"Data:\");\n+        p.option(demoSelector);\n+        p.option(addButton);\n+        p.option(clearButton);\n+        p.label(\"Selection Model:\");\n+        p.option(selectionSelector);\n+        p.option(nullFocusModel);\n+        p.option(jumpButton);\n+        setOptions(p);\n+\n+        demoSelector.getSelectionModel().selectFirst();\n+        selectionSelector.getSelectionModel().select(Selection.MULTIPLE);\n+    }\n+\n+    protected Object[] createSpec(Demo d) {\n+        switch (d) {\n+        case EMPTY:\n+            return new Object[] {\n+            };\n+        case LARGE:\n+            return new Object[] {\n+                Cmd.ROWS, 10_000,\n+            };\n+        case SMALL:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+            };\n+        case VARIABLE:\n+            return new Object[] {\n+                Cmd.VARIABLE_ROWS, 500,\n+            };\n+        default:\n+            throw new Error(\"?\" + d);\n+        }\n+    }\n+\n+    protected void updatePane() {\n+        Demo d = demoSelector.getSelectionModel().getSelectedItem();\n+        Object[] spec = createSpec(d);\n+\n+        Pane n = createPane(d, spec);\n+        setContent(n);\n+    }\n+\n+    protected Pane createPane(Demo demo, Object[] spec) {\n+        if ((demo == null) || (spec == null)) {\n+            return new BorderPane();\n+        }\n+\n+        boolean nullSelectionModel = false;\n+        SelectionMode selectionMode = SelectionMode.SINGLE;\n+        Selection sel = selectionSelector.getSelectionModel().getSelectedItem();\n+        if (sel != null) {\n+            switch (sel) {\n+            case MULTIPLE:\n+                selectionMode = SelectionMode.MULTIPLE;\n+                break;\n+            case NULL:\n+                nullSelectionModel = true;\n+                break;\n+            case SINGLE:\n+                break;\n+            default:\n+                throw new Error(\"?\" + sel);\n+            }\n+        }\n+\n+        control = new ListView<>();\n+        control.getSelectionModel().setSelectionMode(selectionMode);\n+        if (nullSelectionModel) {\n+            control.setSelectionModel(null);\n+        }\n+        if (nullFocusModel.isSelected()) {\n+            control.setFocusModel(null);\n+        }\n+\n+        for (int i = 0; i < spec.length;) {\n+            Object x = spec[i++];\n+            if (x instanceof Cmd cmd) {\n+                switch (cmd) {\n+                case ROWS: {\n+                    int n = (int)(spec[i++]);\n+                    for (int j = 0; j < n; j++) {\n+                        control.getItems().add(newItem(i));\n+                    }\n+                }\n+                    break;\n+                case VARIABLE_ROWS: {\n+                    int n = (int)(spec[i++]);\n+                    for (int j = 0; j < n; j++) {\n+                        control.getItems().add(newVariableItem(j));\n+                    }\n+                }\n+                    break;\n+                default:\n+                    throw new Error(\"?\" + cmd);\n+                }\n+            } else {\n+                throw new Error(\"?\" + x);\n+            }\n+        }\n+\n+        BorderPane bp = new BorderPane();\n+        bp.setCenter(control);\n+        return bp;\n+    }\n+\n+    protected String newItem(Object n) {\n+        return n + \".\" + System.currentTimeMillis() + \".\" + System.nanoTime();\n+    }\n+\n+    protected String newVariableItem(Object n) {\n+        int rows = 1 << new Random().nextInt(5);\n+        StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i < rows; i++) {\n+            if (i > 0) {\n+                sb.append('\\n');\n+            }\n+            sb.append(i);\n+        }\n+        return n + \".\" + System.currentTimeMillis() + \".\" + System.nanoTime() + \".\" + sb;\n+    }\n+\n+    protected void jump() {\n+        int sz = control.getItems().size();\n+        int ix = sz \/ 2;\n+\n+        control.getSelectionModel().select(ix);\n+        VirtualFlow f = findVirtualFlow(control);\n+        f.scrollTo(ix);\n+        f.scrollPixels(-1.0);\n+    }\n+\n+    private VirtualFlow findVirtualFlow(Parent parent) {\n+        for (Node node: parent.getChildrenUnmodifiable()) {\n+            if (node instanceof VirtualFlow f) {\n+                return f;\n+            }\n+\n+            if (node instanceof Parent p) {\n+                VirtualFlow f = findVirtualFlow(p);\n+                if (f != null) {\n+                    return f;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ListViewPage.java","additions":269,"deletions":0,"binary":false,"changes":269,"status":"added"},{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollBar;\n+import javafx.scene.layout.VBox;\n+\n+\/**\n+ * ScrollBar Page\n+ *\/\n+public class ScrollBarPage extends TestPaneBase {\n+    private ScrollBar scroll;\n+    private Label status;\n+    private static Long[] VALUES = {\n+        0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L\n+    };\n+\n+    public ScrollBarPage() {\n+        setId(\"ScrollBarPage\");\n+\n+        scroll = new ScrollBar();\n+\n+        ComboBox<Long> min = new ComboBox<>();\n+        min.setId(\"min\");\n+        min.getItems().setAll(VALUES);\n+        min.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            int v = parse(min);\n+            scroll.setMin(v);\n+        });\n+\n+        ComboBox<Long> val = new ComboBox<>();\n+        val.setId(\"val\");\n+        val.getItems().setAll(VALUES);\n+        val.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            int v = parse(val);\n+            scroll.setValue(v);\n+        });\n+\n+        ComboBox<Long> visible = new ComboBox<>();\n+        visible.setId(\"visible\");\n+        visible.getItems().setAll(VALUES);\n+        visible.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            int v = parse(visible);\n+            scroll.setVisibleAmount(v);\n+        });\n+\n+        ComboBox<Long> max = new ComboBox<>();\n+        max.setId(\"max\");\n+        max.getItems().setAll(VALUES);\n+        max.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            int v = parse(max);\n+            scroll.setMax(v);\n+        });\n+\n+        OptionPane p = new OptionPane();\n+        p.label(\"Min:\");\n+        p.option(min);\n+        p.label(\"Value:\");\n+        p.option(val);\n+        p.label(\"Visible:\");\n+        p.option(visible);\n+        p.label(\"Max:\");\n+        p.option(max);\n+\n+        status = new Label();\n+\n+        scroll.minProperty().addListener((s, pr, c) -> {\n+            updateStatus();\n+        });\n+        scroll.valueProperty().addListener((s, pr, c) -> {\n+            updateStatus();\n+        });\n+        scroll.visibleAmountProperty().addListener((s, pr, c) -> {\n+            updateStatus();\n+        });\n+        scroll.maxProperty().addListener((s, pr, c) -> {\n+            updateStatus();\n+        });\n+\n+        VBox b = new VBox(scroll, status);\n+        b.setSpacing(5);\n+\n+        setContent(b);\n+        setOptions(p);\n+\n+        min.getSelectionModel().select(0L);\n+        val.getSelectionModel().select(5L);\n+        visible.getSelectionModel().select(1L);\n+        max.getSelectionModel().select(10L);\n+    }\n+\n+    protected int parse(ComboBox<Long> c) {\n+        Long v = c.getSelectionModel().getSelectedItem();\n+        return (v == null) ? 0 : v.intValue();\n+    }\n+\n+    protected void updateStatus() {\n+        status.setText(\n+            \"min=\" + scroll.getMin() +\n+            \" value=\" + scroll.getValue() +\n+            \" visible=\" + scroll.getVisibleAmount() +\n+            \" max=\" + scroll.getMax()\n+        );\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ScrollBarPage.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"},{"patch":"@@ -0,0 +1,174 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.text.DecimalFormat;\n+import java.text.ParseException;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Spinner;\n+import javafx.util.StringConverter;\n+\n+\/**\n+ * Spinner Page\n+ *\/\n+public class SpinnerPage extends TestPaneBase {\n+    enum Mode {\n+        DOUBLE,\n+        INTEGER,\n+    }\n+\n+    enum Converter {\n+        NULL(\"null\"),\n+        PERCENT(\"0.##%\"),\n+        QUOTED(\"\\\"quoted\\\"\"),\n+        ;\n+        private final String text;\n+        Converter(String text) { this.text = text; }\n+        public String toString() { return text; }\n+    }\n+\n+    private final ComboBox<Mode> modeChoice;\n+    private final ComboBox<Converter> converterChoice;\n+    private final CheckBox editable;\n+    private Spinner<Number> control;\n+\n+    public SpinnerPage() {\n+        setId(\"SpinnerPage\");\n+\n+        modeChoice = new ComboBox<>();\n+        modeChoice.setId(\"modeChoice\");\n+        modeChoice.getItems().addAll(Mode.values());\n+        modeChoice.setEditable(false);\n+        modeChoice.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updateControl();\n+        });\n+\n+        converterChoice = new ComboBox<>();\n+        converterChoice.setId(\"converterChoice\");\n+        converterChoice.getItems().addAll(Converter.values());\n+        converterChoice.setEditable(false);\n+        converterChoice.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updateControl();\n+        });\n+\n+        editable = new CheckBox(\"editable\");\n+        editable.setId(\"editable\");\n+        editable.selectedProperty().addListener((s, p, c) -> {\n+            if (control != null) {\n+                control.setEditable(c);\n+            }\n+        });\n+\n+        OptionPane p = new OptionPane();\n+        p.label(\"Mode:\");\n+        p.option(modeChoice);\n+        p.option(editable);\n+        p.label(\"Converter:\");\n+        p.option(converterChoice);\n+\n+        setOptions(p);\n+        updateControl();\n+        FX.select(modeChoice, Mode.DOUBLE);\n+    }\n+\n+    protected void updateControl() {\n+        Mode m = modeChoice.getSelectionModel().getSelectedItem();\n+        if (m == null) {\n+            m = Mode.DOUBLE;\n+        }\n+\n+        switch (m) {\n+        case DOUBLE:\n+            control = new Spinner(-10.5, 10.5, 0.5);\n+            break;\n+        case INTEGER:\n+            control = new Spinner(-10, 10, 0);\n+            break;\n+        }\n+\n+        Converter c = converterChoice.getSelectionModel().getSelectedItem();\n+        StringConverter<Number> conv = createConverter(c);\n+        control.getValueFactory().setConverter(conv);\n+        control.setEditable(editable.isSelected());\n+\n+        setContent(control);\n+    }\n+\n+    protected StringConverter<Number> createConverter(Converter c) {\n+        if (c != null) {\n+            switch (c) {\n+            case PERCENT:\n+                return new StringConverter<Number>() {\n+                    private final DecimalFormat f = new DecimalFormat(\"0.##%\");\n+\n+                    @Override\n+                    public String toString(Number v) {\n+                        return v == null ? \"\" : f.format(v);\n+                    }\n+\n+                    @Override\n+                    public Number fromString(String s) {\n+                        if (s == null) {\n+                            return null;\n+                        }\n+\n+                        try {\n+                            return f.parse(s);\n+                        } catch (ParseException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    }\n+                };\n+            case QUOTED:\n+                return new StringConverter<Number>() {\n+                    private final DecimalFormat f = new DecimalFormat(\"\\\".##\\\"\");\n+\n+                    @Override\n+                    public String toString(Number v) {\n+                        return v == null ? \"\" : f.format(v);\n+                    }\n+\n+                    @Override\n+                    public Number fromString(String s) {\n+                        if (s == null) {\n+                            return null;\n+                        }\n+\n+                        try {\n+                            return f.parse(s);\n+                        } catch (ParseException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    }\n+                };\n+            }\n+        }\n+        return null;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/SpinnerPage.java","additions":174,"deletions":0,"binary":false,"changes":174,"status":"added"},{"patch":"@@ -0,0 +1,716 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.util.List;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ConstrainedColumnResizeBase;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.SelectionMode;\n+import javafx.scene.control.SplitMenuButton;\n+import javafx.scene.control.TableCell;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableColumnBase;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TableView.ResizeFeatures;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.text.Text;\n+import javafx.util.Callback;\n+\n+\/**\n+ * TableView page\n+ *\/\n+public class TableViewPage extends TestPaneBase {\n+    enum Demo {\n+        PREF(\"pref only\"),\n+        VARIABLE(\"variable cell height\"),\n+        ALL(\"all set: min, pref, max\"),\n+        EMPTY(\"empty with pref\"),\n+        MIN_WIDTH(\"min width\"),\n+        MAX_WIDTH(\"max width\"),\n+        MIN_WIDTH2(\"min width (middle)\"),\n+        MAX_WIDTH2(\"max width (middle)\"),\n+        MIN_WIDTH3(\"min width (beginning)\"),\n+        MAX_WIDTH3(\"max width (beginning)\"),\n+        FIXED_MIDDLE(\"fixed in the middle\"),\n+        ALL_FIXED(\"all fixed\"),\n+        ALL_MAX(\"all with maximum width\"),\n+        MIN_IN_CENTER(\"min widths set in middle columns\"),\n+        MAX_IN_CENTER(\"max widths set in middle columns\"),\n+        NO_NESTED(\"no nested columns\"),\n+        NESTED(\"nested columns\"),\n+        MILLION(\"million rows\"),\n+        MANY_COLUMNS(\"many columns\"),\n+        MANY_COLUMNS_SAME(\"many columns, same pref\");\n+\n+        private final String text;\n+        Demo(String text) { this.text = text; }\n+        public String toString() { return text; }\n+    }\n+\n+    public enum ResizePolicy {\n+        AUTO_RESIZE_FLEX_NEXT_COLUMN,\n+        AUTO_RESIZE_FLEX_LAST_COLUMN,\n+        AUTO_RESIZE_NEXT_COLUMN,\n+        AUTO_RESIZE_SUBSEQUENT_COLUMNS,\n+        AUTO_RESIZE_LAST_COLUMN,\n+        AUTO_RESIZE_ALL_COLUMNS,\n+        UNCONSTRAINED_RESIZE_POLICY,\n+        CONSTRAINED_RESIZE_POLICY,\n+        USER_DEFINED_EQUAL_WIDTHS,\n+    }\n+\n+    public enum Selection {\n+        SINGLE_ROW(\"single row selection\"),\n+        MULTIPLE_ROW(\"multiple row selection\"),\n+        SINGLE_CELL(\"single cell selection\"),\n+        MULTIPLE_CELL(\"multiple cell selection\"),\n+        NULL(\"null selection model\");\n+\n+        private final String text;\n+        Selection(String text) { this.text = text; }\n+        public String toString() { return text; }\n+    }\n+\n+    public enum Cmd {\n+        ROWS,\n+        COL,\n+        MIN,\n+        PREF,\n+        MAX,\n+        COMBINE,\n+        COL_WITH_GRAPHIC\n+    }\n+\n+    protected final ComboBox<Demo> demoSelector;\n+    protected final ComboBox<ResizePolicy> policySelector;\n+    protected final ComboBox<Selection> selectionSelector;\n+    protected final CheckBox nullFocusModel;\n+    protected final CheckBox hideColumn;\n+    protected final CheckBox fixedHeight;\n+    protected TableView<String> table;\n+\n+    public TableViewPage() {\n+        setId(\"TableViewPage\");\n+\n+        \/\/ selector\n+        demoSelector = new ComboBox<>();\n+        demoSelector.setId(\"demoSelector\");\n+        demoSelector.getItems().addAll(Demo.values());\n+        demoSelector.setEditable(false);\n+        demoSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updatePane();\n+        });\n+\n+        policySelector = new ComboBox<>();\n+        policySelector.setId(\"policySelector\");\n+        policySelector.getItems().addAll(ResizePolicy.values());\n+        policySelector.setEditable(false);\n+        policySelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updatePane();\n+        });\n+\n+        selectionSelector = new ComboBox<>();\n+        selectionSelector.setId(\"selectionSelector\");\n+        selectionSelector.getItems().addAll(Selection.values());\n+        selectionSelector.setEditable(false);\n+        selectionSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updatePane();\n+        });\n+\n+        nullFocusModel = new CheckBox(\"null focus model\");\n+        nullFocusModel.setId(\"nullFocusModel\");\n+        nullFocusModel.selectedProperty().addListener((s, p, c) -> {\n+            updatePane();\n+        });\n+\n+        Button addButton = new Button(\"Add Data Item\");\n+        addButton.setOnAction((ev) -> {\n+            table.getItems().add(newItem());\n+        });\n+\n+        Button clearButton = new Button(\"Clear Data Items\");\n+        clearButton.setOnAction((ev) -> {\n+            table.getItems().clear();\n+        });\n+\n+        SplitMenuButton addColumnButton = new SplitMenuButton(\n+            menuItem(\"at the beginning\", () -> addColumn(0)),\n+            menuItem(\"in the middle\", () -> addColumn(1)),\n+            menuItem(\"at the end\", () -> addColumn(2)));\n+        addColumnButton.setText(\"Add Column\");\n+\n+        SplitMenuButton removeColumnButton = new SplitMenuButton(\n+            menuItem(\"at the beginning\", () -> removeColumn(0)),\n+            menuItem(\"in the middle\", () -> removeColumn(1)),\n+            menuItem(\"at the end\", () -> removeColumn(2)));\n+        removeColumnButton.setText(\"Remove Column\");\n+\n+        hideColumn = new CheckBox(\"hide middle column\");\n+        hideColumn.setId(\"hideColumn\");\n+        hideColumn.selectedProperty().addListener((s, p, c) -> {\n+            hideMiddleColumn(c);\n+        });\n+\n+        fixedHeight = new CheckBox(\"fixed height\");\n+        fixedHeight.setId(\"fixedHeight\");\n+        fixedHeight.selectedProperty().addListener((s, p, c) -> {\n+            updatePane();\n+        });\n+\n+        \/\/ layout\n+\n+        OptionPane p = new OptionPane();\n+        p.label(\"Data:\");\n+        p.option(demoSelector);\n+        p.option(addButton);\n+        p.option(clearButton);\n+        p.option(addColumnButton);\n+        p.option(removeColumnButton);\n+        p.label(\"Column Resize Policy:\");\n+        p.option(policySelector);\n+        p.label(\"Selection Model:\");\n+        p.option(selectionSelector);\n+        p.option(nullFocusModel);\n+        p.option(hideColumn);\n+        p.option(fixedHeight);\n+        setOptions(p);\n+\n+        demoSelector.getSelectionModel().selectFirst();\n+        policySelector.getSelectionModel().selectFirst();\n+        selectionSelector.getSelectionModel().select(Selection.MULTIPLE_CELL);\n+    }\n+\n+    protected MenuItem menuItem(String text, Runnable r) {\n+        MenuItem m = new MenuItem(text);\n+        m.setOnAction((ev) -> r.run());\n+        return m;\n+    }\n+\n+    protected void addColumn(int where) {\n+        TableColumn<String, String> c = new TableColumn<>();\n+        c.setText(\"C\" + System.currentTimeMillis());\n+        c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n+\n+        int ct = table.getColumns().size();\n+        int ix;\n+        switch (where) {\n+        case 0:\n+            ix = 0;\n+            break;\n+        case 1:\n+            ix = ct \/ 2;\n+            break;\n+        case 2:\n+        default:\n+            ix = ct;\n+            break;\n+        }\n+        if ((ct == 0) || (ix >= ct)) {\n+            table.getColumns().add(c);\n+        } else {\n+            table.getColumns().add(ix, c);\n+        }\n+    }\n+\n+    protected void removeColumn(int where) {\n+        int ct = table.getColumns().size();\n+        int ix;\n+        switch (where) {\n+        case 0:\n+            ix = 0;\n+            break;\n+        case 1:\n+            ix = ct \/ 2;\n+            break;\n+        case 2:\n+        default:\n+            ix = ct - 1;\n+            break;\n+        }\n+\n+        if ((ct >= 0) && (ix < ct)) {\n+            table.getColumns().remove(ix);\n+        }\n+    }\n+\n+    protected Callback<ResizeFeatures, Boolean> wrap(Callback<ResizeFeatures, Boolean> policy) {\n+        return new Callback<ResizeFeatures, Boolean>() {\n+            @Override\n+            public Boolean call(ResizeFeatures f) {\n+                Boolean rv = policy.call(f);\n+                int ix = f.getTable().getColumns().indexOf(f.getColumn());\n+                System.out.println(\n+                    \"col=\" + (ix < 0 ? f.getColumn() : ix) +\n+                    \" delta=\" + f.getDelta() +\n+                    \" w=\" + f.getTable().getWidth() +\n+                    \" rv=\" + rv\n+                );\n+                return rv;\n+            }\n+        };\n+    }\n+\n+    protected String describe(TableColumn c) {\n+        StringBuilder sb = new StringBuilder();\n+        if (c.getMinWidth() != 10.0) {\n+            sb.append(\"m\");\n+        }\n+        if (c.getPrefWidth() != 80.0) {\n+            sb.append(\"p\");\n+        }\n+        if (c.getMaxWidth() != 5000.0) {\n+            sb.append(\"X\");\n+        }\n+        return sb.toString();\n+    }\n+\n+    protected Callback<ResizeFeatures, Boolean> createPolicy(ResizePolicy p) {\n+        switch (p) {\n+        case AUTO_RESIZE_FLEX_NEXT_COLUMN:\n+            return TableView.CONSTRAINED_RESIZE_POLICY_FLEX_NEXT_COLUMN;\n+        case AUTO_RESIZE_FLEX_LAST_COLUMN:\n+            return TableView.CONSTRAINED_RESIZE_POLICY_FLEX_LAST_COLUMN;\n+        case AUTO_RESIZE_ALL_COLUMNS:\n+            return TableView.CONSTRAINED_RESIZE_POLICY_ALL_COLUMNS;\n+        case AUTO_RESIZE_LAST_COLUMN:\n+            return TableView.CONSTRAINED_RESIZE_POLICY_LAST_COLUMN;\n+        case AUTO_RESIZE_NEXT_COLUMN:\n+            return TableView.CONSTRAINED_RESIZE_POLICY_NEXT_COLUMN;\n+        case AUTO_RESIZE_SUBSEQUENT_COLUMNS:\n+            return TableView.CONSTRAINED_RESIZE_POLICY_SUBSEQUENT_COLUMNS;\n+        case CONSTRAINED_RESIZE_POLICY:\n+            return TableView.CONSTRAINED_RESIZE_POLICY;\n+        case UNCONSTRAINED_RESIZE_POLICY:\n+            return TableView.UNCONSTRAINED_RESIZE_POLICY;\n+        case USER_DEFINED_EQUAL_WIDTHS:\n+            return new UserDefinedResizePolicy();\n+        default:\n+            throw new Error(\"?\" + p);\n+        }\n+    }\n+\n+    protected Object[] createSpec(Demo d) {\n+        switch (d) {\n+        case ALL:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL,\n+                Cmd.COL, Cmd.MIN, 20, Cmd.PREF, 20, Cmd.MAX, 20,\n+                Cmd.COL, Cmd.PREF, 200,\n+                Cmd.COL, Cmd.PREF, 300, Cmd.MAX, 400,\n+                Cmd.COL\n+            };\n+        case PREF:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL, Cmd.PREF, 100,\n+                Cmd.COL, Cmd.PREF, 200,\n+                Cmd.COL, Cmd.PREF, 300,\n+                Cmd.COL, Cmd.PREF, 400\n+            };\n+        case VARIABLE:\n+            return new Object[] {\n+                Cmd.ROWS, 10_000,\n+                Cmd.COL_WITH_GRAPHIC,\n+                Cmd.COL_WITH_GRAPHIC,\n+                Cmd.COL_WITH_GRAPHIC\n+            };\n+        case EMPTY:\n+            return new Object[] {\n+                Cmd.COL, Cmd.PREF, 100,\n+                Cmd.COL, Cmd.PREF, 200,\n+                Cmd.COL, Cmd.PREF, 300\n+            };\n+        case MIN_WIDTH:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL, Cmd.MIN, 300\n+            };\n+        case MAX_WIDTH:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL, Cmd.MAX, 100\n+            };\n+        case MIN_WIDTH2:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL, Cmd.MIN, 300,\n+                Cmd.COL\n+            };\n+        case MAX_WIDTH2:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL, Cmd.MAX, 100,\n+                Cmd.COL\n+            };\n+        case MIN_WIDTH3:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL, Cmd.MIN, 300,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL\n+            };\n+        case MAX_WIDTH3:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL, Cmd.MAX, 100,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL\n+            };\n+        case MIN_IN_CENTER:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL,\n+                Cmd.COL, Cmd.MIN, 20,\n+                Cmd.COL, Cmd.MIN, 30,\n+                Cmd.COL, Cmd.MIN, 40,\n+                Cmd.COL, Cmd.MIN, 50,\n+                Cmd.COL, Cmd.MIN, 60,\n+                Cmd.COL\n+            };\n+        case MAX_IN_CENTER:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL,\n+                Cmd.COL, Cmd.MAX, 20,\n+                Cmd.COL, Cmd.MAX, 30,\n+                Cmd.COL, Cmd.MAX, 40,\n+                Cmd.COL, Cmd.MAX, 50,\n+                Cmd.COL, Cmd.MAX, 60,\n+                Cmd.COL\n+            };\n+        case FIXED_MIDDLE:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL, Cmd.MIN, 100, Cmd.MAX, 100,\n+                Cmd.COL, Cmd.MIN, 100, Cmd.MAX, 100,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL\n+            };\n+        case ALL_FIXED:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL, Cmd.MIN, 50, Cmd.MAX, 50,\n+                Cmd.COL, Cmd.MIN, 50, Cmd.MAX, 50,\n+                Cmd.COL, Cmd.MIN, 50, Cmd.MAX, 50\n+            };\n+        case ALL_MAX:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL, Cmd.MAX, 50,\n+                Cmd.COL, Cmd.MAX, 50,\n+                Cmd.COL, Cmd.MAX, 50\n+            };\n+       case NO_NESTED:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL, Cmd.PREF, 100,\n+                Cmd.COL, Cmd.PREF, 200,\n+                Cmd.COL, Cmd.PREF, 300,\n+                Cmd.COL, Cmd.MIN, 100, Cmd.MAX, 100,\n+                Cmd.COL, Cmd.PREF, 100,\n+                Cmd.COL, Cmd.MIN, 100,\n+                Cmd.COL, Cmd.MAX, 100,\n+                Cmd.COL, Cmd.PREF, 400,\n+                Cmd.COL\n+            };\n+        case NESTED:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL, Cmd.PREF, 100,\n+                Cmd.COL, Cmd.PREF, 200,\n+                Cmd.COL, Cmd.PREF, 300,\n+                Cmd.COL, Cmd.MIN, 100, Cmd.MAX, 100,\n+                Cmd.COL, Cmd.PREF, 100,\n+                Cmd.COL, Cmd.MIN, 100,\n+                Cmd.COL, Cmd.MAX, 100,\n+                Cmd.COL, Cmd.PREF, 400,\n+                Cmd.COL,\n+                Cmd.COMBINE, 0, 3,\n+                Cmd.COMBINE, 1, 2\n+            };\n+        case MANY_COLUMNS:\n+            return new Object[] {\n+                Cmd.ROWS, 300,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL\n+            };\n+        case MANY_COLUMNS_SAME:\n+            return new Object[] {\n+                Cmd.ROWS, 300,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30\n+            };\n+        case MILLION:\n+            return new Object[] {\n+                Cmd.ROWS, 1_000_000,\n+                Cmd.COL,\n+                Cmd.COL\n+            };\n+        default:\n+            throw new Error(\"?\" + d);\n+        }\n+    }\n+\n+    protected void updatePane() {\n+        Demo d = demoSelector.getSelectionModel().getSelectedItem();\n+        ResizePolicy p = policySelector.getSelectionModel().getSelectedItem();\n+        Object[] spec = createSpec(d);\n+\n+        Pane n = createPane(d, p, spec);\n+        setContent(n);\n+    }\n+\n+    protected void combineColumns(TableView<String> t, int ix, int count, int name) {\n+        TableColumn<String, ?> tc = new TableColumn<>();\n+        tc.setText(\"N\" + name);\n+\n+        for (int i = 0; i < count; i++) {\n+            TableColumn<String, ?> c = t.getColumns().remove(ix);\n+            tc.getColumns().add(c);\n+        }\n+        t.getColumns().add(ix, tc);\n+    }\n+\n+    protected Pane createPane(Demo demo, ResizePolicy policy, Object[] spec) {\n+        if ((demo == null) || (spec == null) || (policy == null)) {\n+            return new BorderPane();\n+        }\n+\n+        boolean cellSelection = false;\n+        boolean nullSelectionModel = false;\n+        SelectionMode selectionMode = SelectionMode.SINGLE;\n+        Selection sel = selectionSelector.getSelectionModel().getSelectedItem();\n+        if (sel != null) {\n+            switch (sel) {\n+            case MULTIPLE_CELL:\n+                selectionMode = SelectionMode.MULTIPLE;\n+                cellSelection = true;\n+                break;\n+            case MULTIPLE_ROW:\n+                selectionMode = SelectionMode.MULTIPLE;\n+                break;\n+            case NULL:\n+                nullSelectionModel = true;\n+                break;\n+            case SINGLE_CELL:\n+                cellSelection = true;\n+                break;\n+            case SINGLE_ROW:\n+                break;\n+            default:\n+                throw new Error(\"?\" + sel);\n+            }\n+        }\n+\n+        table = new TableView<>();\n+        table.getSelectionModel().setCellSelectionEnabled(cellSelection);\n+        table.getSelectionModel().setSelectionMode(selectionMode);\n+        if (nullSelectionModel) {\n+            table.setSelectionModel(null);\n+        }\n+        if (nullFocusModel.isSelected()) {\n+            table.setFocusModel(null);\n+        }\n+        if (fixedHeight.isSelected()) {\n+            table.setFixedCellSize(20);\n+        }\n+\n+        Callback<ResizeFeatures, Boolean> p = createPolicy(policy);\n+        table.setColumnResizePolicy(p);\n+\n+        TableColumn<String, String> lastColumn = null;\n+        int id = 1;\n+\n+        for (int i = 0; i < spec.length;) {\n+            Object x = spec[i++];\n+            if (x instanceof Cmd cmd) {\n+                switch (cmd) {\n+                case COL: {\n+                    TableColumn<String, String> c = new TableColumn<>();\n+                    table.getColumns().add(c);\n+                    c.setText(\"C\" + table.getColumns().size());\n+                    c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n+                    lastColumn = c;\n+                }\n+                    break;\n+                case COL_WITH_GRAPHIC: {\n+                    TableColumn<String, String> c = new TableColumn<>();\n+                    table.getColumns().add(c);\n+                    c.setText(\"C\" + table.getColumns().size());\n+                    c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n+                    c.setCellFactory((r) -> {\n+                        return new TableCell<>() {\n+                            @Override\n+                            protected void updateItem(String item, boolean empty) {\n+                                super.updateItem(item, empty);\n+                                Text t = new Text(\n+                                    \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n2\\n3\\n\");\n+                                t.wrappingWidthProperty().bind(widthProperty());\n+                                setPrefHeight(USE_COMPUTED_SIZE);\n+                                setGraphic(t);\n+                            }\n+                        };\n+                    });\n+                    lastColumn = c;\n+                }\n+                    break;\n+                case MAX: {\n+                    int w = (int)(spec[i++]);\n+                    lastColumn.setMaxWidth(w);\n+                }\n+                    break;\n+                case MIN: {\n+                    int w = (int)(spec[i++]);\n+                    lastColumn.setMinWidth(w);\n+                }\n+                    break;\n+                case PREF: {\n+                    int w = (int)(spec[i++]);\n+                    lastColumn.setPrefWidth(w);\n+                }\n+                    break;\n+                case ROWS: {\n+                    int n = (int)(spec[i++]);\n+                    for (int j = 0; j < n; j++) {\n+                        table.getItems().add(newItem());\n+                    }\n+                }\n+                    break;\n+                case COMBINE:\n+                    int ix = (int)(spec[i++]);\n+                    int ct = (int)(spec[i++]);\n+                    combineColumns(table, ix, ct, id++);\n+                    break;\n+                default:\n+                    throw new Error(\"?\" + cmd);\n+                }\n+            } else {\n+                throw new Error(\"?\" + x);\n+            }\n+        }\n+\n+        hideMiddleColumn(hideColumn.isSelected());\n+\n+        BorderPane bp = new BorderPane();\n+        bp.setCenter(table);\n+        return bp;\n+    }\n+\n+    protected void hideMiddleColumn(boolean on) {\n+        if (on) {\n+            int ct = table.getColumns().size();\n+            if (ct > 0) {\n+                table.getColumns().get(ct \/ 2).setVisible(false);\n+            }\n+        } else {\n+            for (TableColumn c: table.getColumns()) {\n+                c.setVisible(true);\n+            }\n+        }\n+    }\n+\n+    protected String newItem() {\n+        return System.currentTimeMillis() + \".\" + System.nanoTime();\n+    }\n+\n+    \/**\n+     * a user-defined policy demonstrates that we can indeed create a custom policy using the new API.\n+     * this policy simply sizes all columns equally.\n+     *\/\n+    protected static class UserDefinedResizePolicy\n+        extends ConstrainedColumnResizeBase\n+        implements Callback<TableView.ResizeFeatures, Boolean> {\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public Boolean call(ResizeFeatures rf) {\n+            List<? extends TableColumnBase<?, ?>> visibleLeafColumns = rf.getTable().getVisibleLeafColumns();\n+            int sz = visibleLeafColumns.size();\n+            \/\/ using added public method getContentWidth()\n+            double w = rf.getContentWidth() \/ sz;\n+            for (TableColumnBase<?, ?> c: visibleLeafColumns) {\n+                \/\/ using added public method setColumnWidth()\n+                rf.setColumnWidth(c, w);\n+            }\n+            return false;\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TableViewPage.java","additions":716,"deletions":0,"binary":false,"changes":716,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import com.oracle.tools.fx.monkey.util.FontSelector;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.Templates;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import com.oracle.tools.fx.monkey.util.TextSelector;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.TextArea;\n+\n+\/**\n+ * TextArea Page\n+ *\/\n+public class TextAreaPage extends TestPaneBase {\n+    private final TextArea control;\n+    private final TextSelector textSelector;\n+\n+    public TextAreaPage() {\n+        setId(\"TextAreaPage\");\n+\n+        control = new TextArea();\n+        control.setPromptText(\"<prompt>\");\n+\n+        textSelector = TextSelector.fromPairs(\n+            \"textSelector\",\n+            (t) -> control.setText(t),\n+            Templates.multiLineTextPairs()\n+        );\n+\n+        FontSelector fontSelector = new FontSelector(\"font\", control::setFont);\n+\n+        CheckBox wrap = new CheckBox(\"wrap text\");\n+        wrap.setId(\"wrapText\");\n+        wrap.selectedProperty().addListener((s, p, on) -> {\n+            control.setWrapText(on);\n+        });\n+\n+        CheckBox editable = new CheckBox(\"editable\");\n+        editable.setId(\"editable\");\n+        editable.selectedProperty().bindBidirectional(control.editableProperty());\n+\n+        TextSelector promptChoice = Templates.promptChoice(\"promptChoice\", control::setPromptText);\n+        promptChoice.addPair(\"Multiline\", \"1\\n2\\n3\\n4\");\n+\n+        OptionPane p = new OptionPane();\n+        p.label(\"Text:\");\n+        p.option(textSelector.node());\n+        p.label(\"Font:\");\n+        p.option(fontSelector.fontNode());\n+        p.label(\"Font Size:\");\n+        p.option(fontSelector.sizeNode());\n+        p.option(wrap);\n+        p.option(editable);\n+        p.label(\"Prompt:\");\n+        p.option(promptChoice.node());\n+        p.label(\"Formatter: TODO\");\n+\n+        setContent(control);\n+        setOptions(p);\n+\n+        textSelector.selectFirst();\n+        fontSelector.selectSystemFont();\n+        promptChoice.select(null);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextAreaPage.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import com.oracle.tools.fx.monkey.util.FontSelector;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.PosSelector;\n+import com.oracle.tools.fx.monkey.util.Templates;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import com.oracle.tools.fx.monkey.util.TextSelector;\n+import javafx.geometry.Pos;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.TextField;\n+\n+\/**\n+ * TextField Page\n+ *\/\n+public class TextFieldPage extends TestPaneBase {\n+    private final TextField control;\n+    private final TextSelector textSelector;\n+\n+    public TextFieldPage() {\n+        setId(\"TextFieldPage\");\n+\n+        control = new TextField();\n+        control.setAlignment(Pos.BASELINE_RIGHT);\n+\n+        textSelector = TextSelector.fromPairs(\n+            \"textSelector\",\n+            (t) -> {\n+                control.setText(t);\n+            },\n+            Templates.singleLineTextPairs()\n+        );\n+\n+        FontSelector fontSelector = new FontSelector(\"font\", control::setFont);\n+\n+        PosSelector posSelector = new PosSelector(control::setAlignment);\n+\n+        TextSelector promptChoice = Templates.promptChoice(\"promptChoice\", control::setPromptText);\n+\n+        ComboBox<Integer> prefColumnCount = new ComboBox<>();\n+        prefColumnCount.setId(\"prefColumnCount\");\n+        prefColumnCount.getItems().setAll(\n+            null,\n+            1,\n+            5,\n+            10,\n+            100,\n+            1000\n+        );\n+        prefColumnCount.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            Integer ct = prefColumnCount.getSelectionModel().getSelectedItem();\n+            int count = ct == null ? TextField.DEFAULT_PREF_COLUMN_COUNT : ct;\n+            control.setPrefColumnCount(count);\n+        });\n+\n+        CheckBox editable = new CheckBox(\"editable\");\n+        editable.setId(\"editable\");\n+        editable.selectedProperty().bindBidirectional(control.editableProperty());\n+\n+        OptionPane p = new OptionPane();\n+        p.label(\"Text:\");\n+        p.option(textSelector.node());\n+        p.label(\"Font:\");\n+        p.option(fontSelector.fontNode());\n+        p.label(\"Size:\");\n+        p.option(fontSelector.sizeNode());\n+        p.label(\"Alignment:\");\n+        p.option(posSelector.node());\n+        p.label(\"Prompt:\");\n+        p.option(promptChoice.node());\n+        p.label(\"Preferred Column Count:\");\n+        p.option(prefColumnCount);\n+        p.option(editable);\n+\n+        setContent(control);\n+        setOptions(p);\n+\n+        posSelector.select(Pos.BASELINE_RIGHT);\n+        fontSelector.selectSystemFont();\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextFieldPage.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,224 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import com.oracle.tools.fx.monkey.util.FontSelector;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.ShowCharacterRuns;\n+import com.oracle.tools.fx.monkey.util.Templates;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import com.oracle.tools.fx.monkey.util.TextSelector;\n+import com.oracle.tools.fx.monkey.util.Utils;\n+import javafx.geometry.Orientation;\n+import javafx.geometry.Point2D;\n+import javafx.geometry.Point3D;\n+import javafx.scene.Group;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Separator;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.input.PickResult;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Path;\n+import javafx.scene.shape.PathElement;\n+import javafx.scene.text.Font;\n+import javafx.scene.text.HitInfo;\n+import javafx.scene.text.Text;\n+import javafx.scene.text.TextFlow;\n+\n+\/**\n+ * TextFlow Page\n+ *\/\n+public class TextFlowPage extends TestPaneBase {\n+    protected final TextSelector textSelector;\n+    protected final FontSelector fontSelector;\n+    protected final CheckBox showChars;\n+    protected final CheckBox showCaretPath;\n+    protected final TextFlow control;\n+    protected final Label pickResult;\n+    protected final Label hitInfo;\n+    protected final Label hitInfo2;\n+    protected final Path caretPath;\n+    private static final String INLINE = \"$INLINE\";\n+    private static final String RICH_TEXT = \"$RICH\";\n+\n+    public TextFlowPage() {\n+        setId(\"TextFlowPage\");\n+\n+        control = new TextFlow();\n+        control.addEventHandler(MouseEvent.ANY, this::handleMouseEvent);\n+\n+        pickResult = new Label();\n+\n+        hitInfo = new Label();\n+\n+        hitInfo2 = new Label();\n+\n+        caretPath = new Path();\n+        caretPath.setStrokeWidth(1);\n+        caretPath.setStroke(Color.RED);\n+        caretPath.setManaged(false);\n+\n+        textSelector = TextSelector.fromPairs(\n+            \"textSelector\",\n+            (t) -> updateControl(),\n+            Utils.combine(\n+                Templates.multiLineTextPairs(),\n+                \"Inline Nodes\", INLINE,\n+                \"Rich Text\", RICH_TEXT\n+            )\n+        );\n+\n+        fontSelector = new FontSelector(\"font\", (f) -> updateControl());\n+\n+        showChars = new CheckBox(\"show characters\");\n+        showChars.setId(\"showChars\");\n+        showChars.selectedProperty().addListener((p) -> {\n+            updateControl();\n+        });\n+\n+        showCaretPath = new CheckBox(\"show caret path\");\n+        showCaretPath.setId(\"showCaretPath\");\n+        showCaretPath.selectedProperty().addListener((p) -> {\n+            updateControl();\n+        });\n+\n+        OptionPane p = new OptionPane();\n+        p.label(\"Text:\");\n+        p.option(textSelector.node());\n+        p.label(\"Font:\");\n+        p.option(fontSelector.fontNode());\n+        p.label(\"Font Size:\");\n+        p.option(fontSelector.sizeNode());\n+        p.option(showChars);\n+        p.option(showCaretPath);\n+        p.option(new Separator(Orientation.HORIZONTAL));\n+        p.label(\"Pick Result:\");\n+        p.option(pickResult);\n+        p.label(\"Text.hitTest:\");\n+        p.option(hitInfo2);\n+        p.label(\"TextFlow.hitTest:\");\n+        p.option(hitInfo);\n+\n+        setContent(control);\n+        setOptions(p);\n+\n+        fontSelector.selectSystemFont();\n+        textSelector.selectFirst();\n+    }\n+\n+    protected void updateControl() {\n+        Font f = fontSelector.getFont();\n+        String text = textSelector.getSelectedText();\n+        Node[] ts = createTextArray(text, f);\n+        control.getChildren().setAll(ts);\n+\n+        if (showChars.isSelected()) {\n+            Group g = ShowCharacterRuns.createFor(control);\n+            control.getChildren().add(g);\n+        }\n+\n+        if (showCaretPath.isSelected()) {\n+            caretPath.getElements().clear();\n+            control.getChildren().add(caretPath);\n+\n+            int len = computeTextLength(control);\n+            for (int i = 0; i < len; i++) {\n+                PathElement[] es = control.caretShape(i, true);\n+                caretPath.getElements().addAll(es);\n+            }\n+        }\n+    }\n+\n+    \/** TextFlow.getTextLength() *\/\n+    private static int computeTextLength(TextFlow f) {\n+        int len = 0;\n+        for (Node n: f.getChildrenUnmodifiable()) {\n+            if (n instanceof Text t) {\n+                len += t.getText().length();\n+            }\n+            \/\/ embedded nodes do not have an associated text\n+        }\n+        return len;\n+    }\n+\n+    protected Node[] createTextArray(String text, Font f) {\n+        if (INLINE.equals(text)) {\n+            return new Node[] {\n+                t(\"Inline Nodes:\", f),\n+                new Button(\"Left\"),\n+                t(\" \", f),\n+                new Button(\"Right\"),\n+                t(\"trailing\", f)\n+            };\n+        } else if (RICH_TEXT.equals(text)) {\n+            return new Node[] {\n+                t(\"Rich Text: \", f),\n+                t(\"BOLD \", f, \"-fx-font-weight:bold;\"),\n+                t(\"italic \", f, \"-fx-font-style:italic;\"),\n+                t(\"underline \", f, \"-fx-underline:true;\"),\n+                t(Templates.TWO_EMOJIS, f)\n+            };\n+        } else {\n+            return new Node[] { t(text, f) };\n+        }\n+    }\n+\n+    protected static Text t(String text, Font f) {\n+        Text t = new Text(text);\n+        t.setFont(f);\n+        return t;\n+    }\n+\n+    protected static Text t(String text, Font f, String style) {\n+        Text t = new Text(text);\n+        t.setFont(f);\n+        t.setStyle(style);\n+        return t;\n+    }\n+\n+    protected void handleMouseEvent(MouseEvent ev) {\n+        PickResult pick = ev.getPickResult();\n+        Node n = pick.getIntersectedNode();\n+        hitInfo2.setText(null);\n+        if (n == null) {\n+            pickResult.setText(\"null\");\n+        } else {\n+            pickResult.setText(n.getClass().getSimpleName() + \".\" + n.hashCode());\n+            if (n instanceof Text t) {\n+                Point3D p3 = pick.getIntersectedPoint();\n+                Point2D p = new Point2D(p3.getX(), p3.getY());\n+                HitInfo h = t.hitTest(p);\n+                hitInfo2.setText(String.valueOf(h));\n+            }\n+        }\n+\n+        Point2D p = new Point2D(ev.getX(), ev.getY());\n+        HitInfo h = control.hitTest(p);\n+        hitInfo.setText(String.valueOf(h));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextFlowPage.java","additions":224,"deletions":0,"binary":false,"changes":224,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import com.oracle.tools.fx.monkey.util.FontSelector;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.ShowCharacterRuns;\n+import com.oracle.tools.fx.monkey.util.Templates;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import com.oracle.tools.fx.monkey.util.TextSelector;\n+import javafx.scene.Group;\n+import javafx.scene.Parent;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.text.Font;\n+import javafx.scene.text.Text;\n+\n+\/**\n+ * Text Page\n+ *\/\n+public class TextPage extends TestPaneBase {\n+    private final TextSelector textSelector;\n+    private final FontSelector fontSelector;\n+    private final CheckBox showChars;\n+    private final Group textGroup;\n+    private Text control;\n+\n+    public TextPage() {\n+        setId(\"TextPage\");\n+\n+        textGroup = new Group();\n+\n+        textSelector = TextSelector.fromPairs(\n+            \"textSelector\",\n+            (t) -> updateText(),\n+            Templates.multiLineTextPairs()\n+        );\n+\n+        fontSelector = new FontSelector(\"font\", (f) -> updateText());\n+\n+        showChars = new CheckBox(\"show characters\");\n+        showChars.setId(\"showChars\");\n+        showChars.selectedProperty().addListener((p) -> {\n+            updateText();\n+        });\n+\n+        CheckBox wrap = new CheckBox(\"set wrap width\");\n+        wrap.setId(\"wrap\");\n+        wrap.selectedProperty().addListener((p) -> {\n+            updateWrap(wrap.selectedProperty().get());\n+        });\n+\n+        OptionPane p = new OptionPane();\n+        p.label(\"Text:\");\n+        p.option(textSelector.node());\n+        p.label(\"Font:\");\n+        p.option(fontSelector.fontNode());\n+        p.label(\"Font Size:\");\n+        p.option(fontSelector.sizeNode());\n+        p.option(showChars);\n+\n+        setContent(new BorderPane(textGroup));\n+        setOptions(p);\n+\n+        textSelector.selectFirst();\n+        fontSelector.selectSystemFont();\n+    }\n+\n+    protected void updateText() {\n+        String text = textSelector.getSelectedText();\n+        Font f = fontSelector.getFont();\n+\n+        control = new Text(text);\n+        control.setFont(f);\n+\n+        textGroup.getChildren().setAll(control);\n+        if (showChars.isSelected()) {\n+            Group g = ShowCharacterRuns.createFor(control);\n+            textGroup.getChildren().add(g);\n+        }\n+    }\n+\n+    protected void updateWrap(boolean on) {\n+        if (on) {\n+            Parent p = textGroup.getParent();\n+            if (p instanceof BorderPane bp) {\n+                control.wrappingWidthProperty().bind(bp.widthProperty());\n+            }\n+        } else {\n+            control.wrappingWidthProperty().unbind();\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextPage.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,614 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.util.List;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ConstrainedColumnResizeBase;\n+import javafx.scene.control.SelectionMode;\n+import javafx.scene.control.TableColumnBase;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableCell;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableView;\n+import javafx.scene.control.TreeTableView.ResizeFeatures;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.text.Text;\n+import javafx.util.Callback;\n+\n+\/**\n+ * TreeTableView page\n+ *\/\n+public class TreeTableViewPage extends TestPaneBase {\n+    enum Demo {\n+        PREF(\"pref only\"),\n+        VARIABLE(\"variable cell height\"),\n+        ALL(\"all set: min, pref, max\"),\n+        EMPTY(\"empty with pref\"),\n+        MIN_WIDTH(\"min width\"),\n+        MAX_WIDTH(\"max width\"),\n+        MIN_WIDTH2(\"min width (middle)\"),\n+        MAX_WIDTH2(\"max width (middle)\"),\n+        MIN_WIDTH3(\"min width (beginning)\"),\n+        MAX_WIDTH3(\"max width (beginning)\"),\n+        FIXED_MIDDLE(\"fixed in the middle\"),\n+        ALL_FIXED(\"all fixed\"),\n+        ALL_MAX(\"all with maximum width\"),\n+        MIN_IN_CENTER(\"min widths set in middle columns\"),\n+        MAX_IN_CENTER(\"max widths set in middle columns\"),\n+        NO_NESTED(\"no nested columns\"),\n+        NESTED(\"nested columns\"),\n+        MILLION(\"million rows\"),\n+        MANY_COLUMNS(\"many columns\"),\n+        MANY_COLUMNS_SAME(\"many columns, same pref\");\n+\n+        private final String text;\n+        Demo(String text) { this.text = text; }\n+        public String toString() { return text; }\n+    }\n+\n+    public enum ResizePolicy {\n+        AUTO_RESIZE_FLEX_NEXT_COLUMN,\n+        AUTO_RESIZE_FLEX_LAST_COLUMN,\n+        AUTO_RESIZE_NEXT_COLUMN,\n+        AUTO_RESIZE_SUBSEQUENT_COLUMNS,\n+        AUTO_RESIZE_LAST_COLUMN,\n+        AUTO_RESIZE_ALL_COLUMNS,\n+        UNCONSTRAINED_RESIZE_POLICY,\n+        CONSTRAINED_RESIZE_POLICY,\n+        USER_DEFINED_EQUAL_WIDTHS,\n+    }\n+\n+    public enum Selection {\n+        SINGLE_ROW(\"single row selection\"),\n+        MULTIPLE_ROW(\"multiple row selection\"),\n+        SINGLE_CELL(\"single cell selection\"),\n+        MULTIPLE_CELL(\"multiple cell selection\"),\n+        NULL(\"null selection model\");\n+\n+        private final String text;\n+        Selection(String text) { this.text = text; }\n+        public String toString() { return text; }\n+    }\n+\n+    public enum Cmd {\n+        ROWS,\n+        COL,\n+        MIN,\n+        PREF,\n+        MAX,\n+        COMBINE,\n+        COL_WITH_GRAPHIC\n+    }\n+\n+    protected final ComboBox<Demo> demoSelector;\n+    protected final ComboBox<ResizePolicy> policySelector;\n+    protected final ComboBox<Selection> selectionSelector;\n+    protected final CheckBox nullFocusModel;\n+    protected TreeTableView<String> tree;\n+\n+    public TreeTableViewPage() {\n+        setId(\"TreeTableViewPage\");\n+\n+        \/\/ selector\n+        demoSelector = new ComboBox<>();\n+        demoSelector.setId(\"demoSelector\");\n+        demoSelector.getItems().addAll(Demo.values());\n+        demoSelector.setEditable(false);\n+        demoSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updatePane();\n+        });\n+\n+        policySelector = new ComboBox<>();\n+        policySelector.setId(\"policySelector\");\n+        policySelector.getItems().addAll(ResizePolicy.values());\n+        policySelector.setEditable(false);\n+        policySelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updatePane();\n+        });\n+\n+        selectionSelector = new ComboBox<>();\n+        selectionSelector.setId(\"selectionSelector\");\n+        selectionSelector.getItems().addAll(Selection.values());\n+        selectionSelector.setEditable(false);\n+        selectionSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n+            updatePane();\n+        });\n+\n+        nullFocusModel = new CheckBox(\"null focus model\");\n+        nullFocusModel.setId(\"nullFocusModel\");\n+        nullFocusModel.selectedProperty().addListener((s, p, c) -> {\n+            updatePane();\n+        });\n+\n+        Button clearButton = new Button(\"Clear Items\");\n+        clearButton.setOnAction((ev) -> {\n+            tree.setRoot(new TreeItem(null));\n+            tree.setShowRoot(false);\n+        });\n+\n+        \/\/ layout\n+\n+        OptionPane p = new OptionPane();\n+        p.label(\"Data:\");\n+        p.option(demoSelector);\n+        p.option(clearButton);\n+        p.label(\"Column Resize Policy:\");\n+        p.option(policySelector);\n+        p.label(\"Selection Model:\");\n+        p.option(selectionSelector);\n+        p.option(nullFocusModel);\n+        setOptions(p);\n+\n+        demoSelector.getSelectionModel().selectFirst();\n+        policySelector.getSelectionModel().selectFirst();\n+        selectionSelector.getSelectionModel().select(Selection.MULTIPLE_CELL);\n+    }\n+\n+    protected Callback<ResizeFeatures, Boolean> wrap(Callback<ResizeFeatures, Boolean> policy) {\n+        return new Callback<ResizeFeatures, Boolean>() {\n+            @Override\n+            public Boolean call(ResizeFeatures f) {\n+                Boolean rv = policy.call(f);\n+                int ix = f.getTable().getColumns().indexOf(f.getColumn());\n+                System.out.println(\n+                    \"col=\" + (ix < 0 ? f.getColumn() : ix) +\n+                    \" delta=\" + f.getDelta() +\n+                    \" w=\" + f.getTable().getWidth() +\n+                    \" rv=\" + rv\n+                );\n+                return rv;\n+            }\n+        };\n+    }\n+\n+    protected String describe(TreeTableColumn c) {\n+        StringBuilder sb = new StringBuilder();\n+        if (c.getMinWidth() != 10.0) {\n+            sb.append(\"m\");\n+        }\n+        if (c.getPrefWidth() != 80.0) {\n+            sb.append(\"p\");\n+        }\n+        if (c.getMaxWidth() != 5000.0) {\n+            sb.append(\"X\");\n+        }\n+        return sb.toString();\n+    }\n+\n+    protected Callback<ResizeFeatures, Boolean> createPolicy(ResizePolicy p) {\n+        switch (p) {\n+        case AUTO_RESIZE_FLEX_NEXT_COLUMN:\n+            return TreeTableView.CONSTRAINED_RESIZE_POLICY_FLEX_NEXT_COLUMN;\n+        case AUTO_RESIZE_FLEX_LAST_COLUMN:\n+            return TreeTableView.CONSTRAINED_RESIZE_POLICY_FLEX_LAST_COLUMN;\n+        case AUTO_RESIZE_ALL_COLUMNS:\n+            return TreeTableView.CONSTRAINED_RESIZE_POLICY_ALL_COLUMNS;\n+        case AUTO_RESIZE_LAST_COLUMN:\n+            return TreeTableView.CONSTRAINED_RESIZE_POLICY_LAST_COLUMN;\n+        case AUTO_RESIZE_NEXT_COLUMN:\n+            return TreeTableView.CONSTRAINED_RESIZE_POLICY_NEXT_COLUMN;\n+        case AUTO_RESIZE_SUBSEQUENT_COLUMNS:\n+            return TreeTableView.CONSTRAINED_RESIZE_POLICY_SUBSEQUENT_COLUMNS;\n+        case CONSTRAINED_RESIZE_POLICY:\n+            return TreeTableView.CONSTRAINED_RESIZE_POLICY;\n+        case UNCONSTRAINED_RESIZE_POLICY:\n+            return TreeTableView.UNCONSTRAINED_RESIZE_POLICY;\n+        case USER_DEFINED_EQUAL_WIDTHS:\n+            return new UserDefinedResizePolicy();\n+        default:\n+            throw new Error(\"?\" + p);\n+        }\n+    }\n+\n+    protected Object[] createSpec(Demo d) {\n+        switch (d) {\n+        case ALL:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL,\n+                Cmd.COL, Cmd.MIN, 20, Cmd.PREF, 20, Cmd.MAX, 20,\n+                Cmd.COL, Cmd.PREF, 200,\n+                Cmd.COL, Cmd.PREF, 300, Cmd.MAX, 400,\n+                Cmd.COL\n+            };\n+        case PREF:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL, Cmd.PREF, 100,\n+                Cmd.COL, Cmd.PREF, 200,\n+                Cmd.COL, Cmd.PREF, 300,\n+                Cmd.COL, Cmd.PREF, 400\n+            };\n+        case VARIABLE:\n+            return new Object[] {\n+                Cmd.ROWS, 10_000,\n+                Cmd.COL_WITH_GRAPHIC,\n+                Cmd.COL_WITH_GRAPHIC,\n+                Cmd.COL_WITH_GRAPHIC\n+            };\n+        case EMPTY:\n+            return new Object[] {\n+                Cmd.COL, Cmd.PREF, 100,\n+                Cmd.COL, Cmd.PREF, 200,\n+                Cmd.COL, Cmd.PREF, 300\n+            };\n+        case MIN_WIDTH:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL, Cmd.MIN, 300\n+            };\n+        case MAX_WIDTH:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL, Cmd.MAX, 100\n+            };\n+        case MIN_WIDTH2:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL, Cmd.MIN, 300,\n+                Cmd.COL\n+            };\n+        case MAX_WIDTH2:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL, Cmd.MAX, 100,\n+                Cmd.COL\n+            };\n+        case MIN_WIDTH3:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL, Cmd.MIN, 300,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL\n+            };\n+        case MAX_WIDTH3:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL, Cmd.MAX, 100,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL\n+            };\n+        case MIN_IN_CENTER:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL,\n+                Cmd.COL, Cmd.MIN, 20,\n+                Cmd.COL, Cmd.MIN, 30,\n+                Cmd.COL, Cmd.MIN, 40,\n+                Cmd.COL, Cmd.MIN, 50,\n+                Cmd.COL, Cmd.MIN, 60,\n+                Cmd.COL\n+            };\n+        case MAX_IN_CENTER:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL,\n+                Cmd.COL, Cmd.MAX, 20,\n+                Cmd.COL, Cmd.MAX, 30,\n+                Cmd.COL, Cmd.MAX, 40,\n+                Cmd.COL, Cmd.MAX, 50,\n+                Cmd.COL, Cmd.MAX, 60,\n+                Cmd.COL\n+            };\n+        case FIXED_MIDDLE:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL, Cmd.MIN, 100, Cmd.MAX, 100,\n+                Cmd.COL, Cmd.MIN, 100, Cmd.MAX, 100,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL\n+            };\n+        case ALL_FIXED:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL, Cmd.MIN, 50, Cmd.MAX, 50,\n+                Cmd.COL, Cmd.MIN, 50, Cmd.MAX, 50,\n+                Cmd.COL, Cmd.MIN, 50, Cmd.MAX, 50\n+            };\n+        case ALL_MAX:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL, Cmd.MAX, 50,\n+                Cmd.COL, Cmd.MAX, 50,\n+                Cmd.COL, Cmd.MAX, 50\n+            };\n+       case NO_NESTED:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL, Cmd.PREF, 100,\n+                Cmd.COL, Cmd.PREF, 200,\n+                Cmd.COL, Cmd.PREF, 300,\n+                Cmd.COL, Cmd.MIN, 100, Cmd.MAX, 100,\n+                Cmd.COL, Cmd.PREF, 100,\n+                Cmd.COL, Cmd.MIN, 100,\n+                Cmd.COL, Cmd.MAX, 100,\n+                Cmd.COL, Cmd.PREF, 400,\n+                Cmd.COL\n+            };\n+        case NESTED:\n+            return new Object[] {\n+                Cmd.ROWS, 3,\n+                Cmd.COL, Cmd.PREF, 100,\n+                Cmd.COL, Cmd.PREF, 200,\n+                Cmd.COL, Cmd.PREF, 300,\n+                Cmd.COL, Cmd.MIN, 100, Cmd.MAX, 100,\n+                Cmd.COL, Cmd.PREF, 100,\n+                Cmd.COL, Cmd.MIN, 100,\n+                Cmd.COL, Cmd.MAX, 100,\n+                Cmd.COL, Cmd.PREF, 400,\n+                Cmd.COL,\n+                Cmd.COMBINE, 0, 3,\n+                Cmd.COMBINE, 1, 2\n+            };\n+        case MANY_COLUMNS:\n+            return new Object[] {\n+                Cmd.ROWS, 300,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL,\n+                Cmd.COL\n+            };\n+        case MANY_COLUMNS_SAME:\n+            return new Object[] {\n+                Cmd.ROWS, 300,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30,\n+                Cmd.COL, Cmd.PREF, 30\n+            };\n+        case MILLION:\n+            return new Object[] {\n+                Cmd.ROWS, 1_000_000,\n+                Cmd.COL,\n+                Cmd.COL\n+            };\n+        default:\n+            throw new Error(\"?\" + d);\n+        }\n+    }\n+\n+    protected void updatePane() {\n+        Demo d = demoSelector.getSelectionModel().getSelectedItem();\n+        ResizePolicy p = policySelector.getSelectionModel().getSelectedItem();\n+        Object[] spec = createSpec(d);\n+\n+        Pane n = createPane(d, p, spec);\n+        setContent(n);\n+    }\n+\n+    protected void combineColumns(TreeTableView<String> t, int ix, int count, int name) {\n+        TreeTableColumn<String, ?> tc = new TreeTableColumn<>();\n+        tc.setText(\"N\" + name);\n+\n+        for (int i = 0; i < count; i++) {\n+            TreeTableColumn<String, ?> c = t.getColumns().remove(ix);\n+            tc.getColumns().add(c);\n+        }\n+        t.getColumns().add(ix, tc);\n+    }\n+\n+    protected Pane createPane(Demo demo, ResizePolicy policy, Object[] spec) {\n+        if ((demo == null) || (spec == null) || (policy == null)) {\n+            return new BorderPane();\n+        }\n+\n+        boolean cellSelection = false;\n+        boolean nullSelectionModel = false;\n+        SelectionMode selectionMode = SelectionMode.SINGLE;\n+        Selection sel = selectionSelector.getSelectionModel().getSelectedItem();\n+        if (sel != null) {\n+            switch (sel) {\n+            case MULTIPLE_CELL:\n+                selectionMode = SelectionMode.MULTIPLE;\n+                cellSelection = true;\n+                break;\n+            case MULTIPLE_ROW:\n+                selectionMode = SelectionMode.MULTIPLE;\n+                break;\n+            case NULL:\n+                nullSelectionModel = true;\n+                break;\n+            case SINGLE_CELL:\n+                cellSelection = true;\n+                break;\n+            case SINGLE_ROW:\n+                break;\n+            default:\n+                throw new Error(\"?\" + sel);\n+            }\n+        }\n+\n+        tree = new TreeTableView<>(new TreeItem<>(null));\n+        tree.getSelectionModel().setCellSelectionEnabled(cellSelection);\n+        tree.getSelectionModel().setSelectionMode(selectionMode);\n+        if (nullSelectionModel) {\n+            tree.setSelectionModel(null);\n+        }\n+        if (nullFocusModel.isSelected()) {\n+            tree.setFocusModel(null);\n+        }\n+\n+        Callback<ResizeFeatures, Boolean> p = createPolicy(policy);\n+        tree.setColumnResizePolicy(p);\n+\n+        TreeTableColumn<String, String> lastColumn = null;\n+        int id = 1;\n+\n+        for (int i = 0; i < spec.length;) {\n+            Object x = spec[i++];\n+            if (x instanceof Cmd cmd) {\n+                switch (cmd) {\n+                case COL:\n+                    {\n+                        TreeTableColumn<String,String> c = new TreeTableColumn<>();\n+                        tree.getColumns().add(c);\n+                        c.setText(\"C\" + tree.getColumns().size());\n+                        c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n+                        lastColumn = c;\n+                    }\n+                    break;\n+                case COL_WITH_GRAPHIC:\n+                    {\n+                        TreeTableColumn<String,String> c = new TreeTableColumn<>();\n+                        tree.getColumns().add(c);\n+                        c.setText(\"C\" + tree.getColumns().size());\n+                        c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n+                        c.setCellFactory((r) -> {\n+                            return new TreeTableCell<>() {\n+                                @Override\n+                                protected void updateItem(String item, boolean empty) {\n+                                    super.updateItem(item, empty);\n+                                    Text t = new Text(\"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n2\\n3\\n\");\n+                                    t.wrappingWidthProperty().bind(widthProperty());\n+                                    setPrefHeight(USE_COMPUTED_SIZE);\n+                                    setGraphic(t);\n+                                }\n+                            };\n+                        });\n+                        lastColumn = c;\n+                    }\n+                    break;\n+                case MAX:\n+                    {\n+                        int w = (int)(spec[i++]);\n+                        lastColumn.setMaxWidth(w);\n+                    }\n+                    break;\n+                case MIN:\n+                    {\n+                        int w = (int)(spec[i++]);\n+                        lastColumn.setMinWidth(w);\n+                    }\n+                    break;\n+                case PREF:\n+                    {\n+                        int w = (int)(spec[i++]);\n+                        lastColumn.setPrefWidth(w);\n+                    }\n+                    break;\n+                case ROWS:\n+                    {\n+                        int n = (int)(spec[i++]);\n+                        for (int j = 0; j < n; j++) {\n+                            tree.getRoot().getChildren().add(new TreeItem(newItem()));\n+                        }\n+                    }\n+                    break;\n+                case COMBINE:\n+                    int ix = (int)(spec[i++]);\n+                    int ct = (int)(spec[i++]);\n+                    combineColumns(tree, ix, ct, id++);\n+                    break;\n+                default:\n+                    throw new Error(\"?\" + cmd);\n+                }\n+            } else {\n+                throw new Error(\"?\" + x);\n+            }\n+        }\n+\n+        BorderPane bp = new BorderPane();\n+        bp.setCenter(tree);\n+        return bp;\n+    }\n+\n+    protected String newItem() {\n+        return System.currentTimeMillis() + \".\" + System.nanoTime();\n+    }\n+\n+    \/**\n+     * a user-defined policy demonstrates that we can indeed create a custom policy using the new API.\n+     * this policy simply sizes all columns equally.\n+     *\/\n+    protected static class UserDefinedResizePolicy\n+        extends ConstrainedColumnResizeBase\n+        implements Callback<TreeTableView.ResizeFeatures, Boolean> {\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public Boolean call(ResizeFeatures rf) {\n+            List<? extends TableColumnBase<?, ?>> visibleLeafColumns = rf.getTable().getVisibleLeafColumns();\n+            int sz = visibleLeafColumns.size();\n+            \/\/ using added public method getContentWidth()\n+            double w = rf.getContentWidth() \/ sz;\n+            for (TableColumnBase<?, ?> c: visibleLeafColumns) {\n+                \/\/ using added public method setColumnWidth()\n+                rf.setColumnWidth(c, w);\n+            }\n+            return false;\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TreeTableViewPage.java","additions":614,"deletions":0,"binary":false,"changes":614,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import javafx.geometry.Pos;\n+import javafx.scene.Parent;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.CheckBoxTreeItem;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.layout.HBox;\n+\n+\/**\n+ * Test code from CheckBoxTreeEditor, see https:\/\/bugs.openjdk.org\/browse\/JDK-8209017\n+ *\n+ * FIX don't see checkboxes for some reason!\n+ *\/\n+public class TreeViewPage extends TestPaneBase {\n+    private TreeView<String> tree;\n+    private int childNum;\n+\n+    public TreeViewPage() {\n+        setId(\"TreeViewPage\");\n+\n+        CheckBox indeterminate = new CheckBox(\"Indeterminate\");\n+        indeterminate.setId(\"indeterminate\");\n+\n+        CheckBox selected = new CheckBox(\"Selected\");\n+        selected.setId(\"selected\");\n+\n+        Button add = new Button(\"Add\");\n+        add.setOnAction((ev) -> {\n+            addChild(indeterminate.isSelected(), selected.isSelected());\n+        });\n+\n+        Button remove = new Button(\"Remove\");\n+        remove.setOnAction((ev) -> {\n+            removeChild();\n+        });\n+\n+        toolbar().addAll(\n+            add,\n+            remove,\n+            indeterminate,\n+            selected\n+        );\n+\n+        updatePane();\n+    }\n+\n+    protected void updatePane() {\n+        tree = new TreeView<>(new CheckBoxTreeItem<>(\"root\"));\n+\n+        Button button = new Button(\"0\");\n+        tree.getRoot().setGraphic(button);\n+        tree.getRoot().setExpanded(true);\n+        tree.getSelectionModel().select(tree.getRoot());\n+\n+        \/\/ add children for initial setup as needed\n+        addChild(true, true);\n+\n+        setContent(tree);\n+    }\n+\n+    private void addChild(boolean indeterminate, boolean selected) {\n+        CheckBoxTreeItem<String> item = new CheckBoxTreeItem<>(\"child \" + childNum++);\n+        Button button = new Button(\"\" + childNum);\n+        item.setGraphic(button);\n+        item.setSelected(selected);\n+        item.setIndeterminate(indeterminate);\n+        item.setExpanded(true);\n+\n+        if (tree.getSelectionModel().getSelectedItem() != null) {\n+            tree.getSelectionModel().getSelectedItem().getChildren().add(item);\n+        }\n+    }\n+\n+    private void removeChild() {\n+        TreeItem<String> sel = tree.getSelectionModel().getSelectedItem();\n+        if (sel != null) {\n+            TreeItem<String> parent = sel.getParent();\n+            if (parent != null) {\n+                parent.getChildren().remove(sel);\n+            }\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TreeViewPage.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,232 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/\/ This code borrows heavily from the following project, with permission from the author:\n+\/\/ https:\/\/github.com\/andy-goryachev\/FxDock\n+package com.oracle.tools.fx.monkey.settings;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.collections.ListChangeListener;\n+import javafx.scene.Node;\n+import javafx.stage.Modality;\n+import javafx.stage.PopupWindow;\n+import javafx.stage.Stage;\n+import javafx.stage.Window;\n+import javafx.util.Duration;\n+\n+\/**\n+ * This facility coordinates saving UI settings to and from persistent media.\n+ * All the calls, excepr useProvider(), are expected to happen in an FX application thread.\n+ *\n+ * When using {@link FxSettingsFileProvider}, the settings file \"ui-settings.properties\"\n+ * is placed in the specified directory in the user home.\n+ *\n+ * TODO handle i\/o errors - set handler?\n+ *\/\n+public class FxSettings {\n+    private static final Duration SAVE_DELAY = Duration.millis(100);\n+    private static ISettingsProvider provider;\n+    private static boolean save;\n+    private static Timeline saveTimer;\n+\n+    \/** call this in Application.init() *\/\n+    public static synchronized void useProvider(ISettingsProvider p) {\n+        if (provider != null) {\n+            throw new IllegalArgumentException(\"provider is already set\");\n+        }\n+\n+        provider = p;\n+\n+        Window.getWindows().addListener((ListChangeListener.Change<? extends Window> ch) -> {\n+            while (ch.next()) {\n+                if (ch.wasAdded()) {\n+                    for (Window w: ch.getAddedSubList()) {\n+                        handleWindowOpening(w);\n+                    }\n+                } else if (ch.wasRemoved()) {\n+                    for (Window w: ch.getRemoved()) {\n+                        handleWindowClosing(w);\n+                    }\n+                }\n+            }\n+        });\n+\n+        try {\n+            provider.load();\n+        } catch (IOException e) {\n+            throw new Error(e);\n+        }\n+\n+        saveTimer = new Timeline(new KeyFrame(SAVE_DELAY, (ev) -> save()));\n+    }\n+\n+    public static void useDirectory(String dir) {\n+        File d = new File(System.getProperty(\"user.home\"), dir);\n+        useProvider(new FxSettingsFileProvider(d));\n+    }\n+\n+    public static void setName(Window w, String name) {\n+        \/\/ TODO\n+    }\n+\n+    private static void handleWindowOpening(Window w) {\n+        if (w instanceof PopupWindow) {\n+            return;\n+        }\n+\n+        if (w instanceof Stage s) {\n+            if (s.getModality() != Modality.NONE) {\n+                return;\n+            }\n+        }\n+\n+        restoreWindow(w);\n+    }\n+\n+    public static void restoreWindow(Window w) {\n+        WindowMonitor m = WindowMonitor.getFor(w);\n+        if (m != null) {\n+            FxSettingsSchema.restoreWindow(m, w);\n+\n+            Node p = w.getScene().getRoot();\n+            FxSettingsSchema.restoreNode(p);\n+        }\n+    }\n+\n+    private static void handleWindowClosing(Window w) {\n+        if (w instanceof PopupWindow) {\n+            return;\n+        }\n+\n+        storeWindow(w);\n+\n+        boolean last = WindowMonitor.remove(w);\n+        if (last) {\n+            if (saveTimer != null) {\n+                saveTimer.stop();\n+                save();\n+            }\n+        }\n+    }\n+\n+    public static void storeWindow(Window w) {\n+        WindowMonitor m = WindowMonitor.getFor(w);\n+        if (m != null) {\n+            FxSettingsSchema.storeWindow(m, w);\n+\n+            Node p = w.getScene().getRoot();\n+            FxSettingsSchema.storeNode(m, p);\n+        }\n+    }\n+\n+    public static void set(String key, String value) {\n+        if (provider != null) {\n+            provider.set(key, value);\n+            triggerSave();\n+        }\n+    }\n+\n+    public static String get(String key) {\n+        if (provider == null) {\n+            return null;\n+        }\n+        return provider.get(key);\n+    }\n+\n+    public static void setStream(String key, SStream s) {\n+        if (provider != null) {\n+            provider.set(key, s);\n+            triggerSave();\n+        }\n+    }\n+\n+    public static SStream getStream(String key) {\n+        if (provider == null) {\n+            return null;\n+        }\n+        return provider.getSStream(key);\n+    }\n+\n+    public static void setInt(String key, int value) {\n+        set(key, String.valueOf(value));\n+    }\n+\n+    public static int getInt(String key, int defaultValue) {\n+        String v = get(key);\n+        if (v != null) {\n+            try {\n+                return Integer.parseInt(v);\n+            } catch (NumberFormatException e) {\n+            }\n+        }\n+        return defaultValue;\n+    }\n+\n+    public static void setBoolean(String key, boolean value) {\n+        set(key, String.valueOf(value));\n+    }\n+\n+    public static Boolean getBoolean(String key) {\n+        String v = get(key);\n+        if (v != null) {\n+            if (\"true\".equals(v)) {\n+                return Boolean.TRUE;\n+            } else if (\"false\".equals(v)) {\n+                return Boolean.FALSE;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static synchronized void triggerSave() {\n+        save = true;\n+        if (saveTimer != null) {\n+            saveTimer.stop();\n+            saveTimer.play();\n+        }\n+    }\n+\n+    private static void save() {\n+        try {\n+            save = false;\n+            provider.save();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public static void restore(Node n) {\n+        FxSettingsSchema.restoreNode(n);\n+    }\n+\n+    public static void store(Node n) {\n+        WindowMonitor m = WindowMonitor.getFor(n);\n+        if (m != null) {\n+            FxSettingsSchema.storeNode(m, n);\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/settings\/FxSettings.java","additions":232,"deletions":0,"binary":false,"changes":232,"status":"added"},{"patch":"@@ -0,0 +1,192 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/\/ This code borrows heavily from the following project, with permission from the author:\n+\/\/ https:\/\/github.com\/andy-goryachev\/FxDock\n+package com.oracle.tools.fx.monkey.settings;\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+\n+\/**\n+ * Settings provider stores settings as a single file in the specified directory.\n+ *\/\n+public class FxSettingsFileProvider implements ISettingsProvider {\n+    private static final char SEP = '=';\n+    private static final String DIV = \",\";\n+    private final File file;\n+    private final HashMap<String, Object> data = new HashMap<>();\n+\n+    public FxSettingsFileProvider(File dir) {\n+        file = new File(dir, \"ui-settings.properties\");\n+    }\n+\n+    @Override\n+    public void load() throws IOException {\n+        if (file.exists() && file.isFile()) {\n+            BufferedReader rd = new BufferedReader(\n+                new InputStreamReader(new FileInputStream(file), Charset.forName(\"utf-8\")));\n+            try {\n+                synchronized (data) {\n+                    read(rd);\n+                }\n+            } finally {\n+                rd.close();\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void save() throws IOException {\n+        if (file.getParentFile() != null) {\n+            file.getParentFile().mkdirs();\n+        }\n+\n+        Writer wr = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), Charset.forName(\"utf-8\")));\n+        try {\n+            synchronized (data) {\n+                write(wr);\n+            }\n+        } finally {\n+            wr.close();\n+        }\n+    }\n+\n+    private void read(BufferedReader rd) throws IOException {\n+        String s;\n+        while ((s = rd.readLine()) != null) {\n+            int ix = s.indexOf(SEP);\n+            if (ix <= 0) {\n+                continue;\n+            }\n+            String k = s.substring(0, ix);\n+            String v = s.substring(ix + 1);\n+            data.put(k, v);\n+        }\n+    }\n+\n+    private void write(Writer wr) throws IOException {\n+        ArrayList<String> keys = new ArrayList<>(data.keySet());\n+        Collections.sort(keys);\n+\n+        for (String k: keys) {\n+            Object v = data.get(k);\n+            wr.write(k);\n+            wr.write(SEP);\n+            wr.write(encode(v));\n+            wr.write(\"\\r\\n\");\n+        }\n+    }\n+\n+    @Override\n+    public void set(String key, String value) {\n+        synchronized (data) {\n+            if (value == null) {\n+                data.remove(key);\n+            } else {\n+                data.put(key, value);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void set(String key, SStream s) {\n+        synchronized (data) {\n+            if (s == null) {\n+                data.remove(key);\n+            } else {\n+                data.put(key, s.toArray());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public String get(String key) {\n+        Object v;\n+        synchronized (data) {\n+            v = data.get(key);\n+        }\n+\n+        String s;\n+        if (v instanceof String) {\n+            s = (String)v;\n+        } else {\n+            s = null;\n+        }\n+        return s;\n+    }\n+\n+    @Override\n+    public SStream getSStream(String key) {\n+        SStream s;\n+        synchronized (data) {\n+            Object v = data.get(key);\n+            if (v instanceof Object[]) {\n+                s = SStream.reader((Object[])v);\n+            } else if (v != null) {\n+                s = parseStream(v.toString());\n+                data.put(key, s.toArray());\n+            } else {\n+                s = null;\n+            }\n+        }\n+        return s;\n+    }\n+\n+    private static SStream parseStream(String text) {\n+        String[] ss = text.split(DIV);\n+        return SStream.reader(ss);\n+    }\n+\n+    private static String encode(Object x) {\n+        if (x == null) {\n+            return \"\";\n+        } else if (x instanceof Object[] items) {\n+            StringBuilder sb = new StringBuilder();\n+            boolean sep = false;\n+            for (Object item: items) {\n+                if (sep) {\n+                    sb.append(DIV);\n+                } else {\n+                    sep = true;\n+                }\n+                sb.append(item);\n+            }\n+            return sb.toString();\n+        } else {\n+            return x.toString();\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/settings\/FxSettingsFileProvider.java","additions":192,"deletions":0,"binary":false,"changes":192,"status":"added"},{"patch":"@@ -0,0 +1,354 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/\/ This code borrows heavily from the following project, with permission from the author:\n+\/\/ https:\/\/github.com\/andy-goryachev\/FxDock\n+package com.oracle.tools.fx.monkey.settings;\n+\n+import java.awt.Shape;\n+import javafx.beans.value.ChangeListener;\n+import javafx.beans.value.ObservableValue;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.Node;\n+import javafx.scene.Parent;\n+import javafx.scene.Scene;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.SplitPane;\n+import javafx.scene.image.ImageView;\n+import javafx.stage.Screen;\n+import javafx.stage.Stage;\n+import javafx.stage.Window;\n+\n+\/**\n+ * Constants and methods used to persist settings.\n+ *\/\n+public class FxSettingsSchema {\n+    private static final String PREFIX = \"FX.\";\n+\n+    private static final String WINDOW_NORMAL = \"N\";\n+    private static final String WINDOW_ICONIFIED = \"I\";\n+    private static final String WINDOW_MAXIMIZED = \"M\";\n+    private static final String WINDOW_FULLSCREEN = \"F\";\n+\n+    public static void storeWindow(WindowMonitor m, Window w) {\n+        SStream ss = SStream.writer();\n+        ss.add(m.getX());\n+        ss.add(m.getY());\n+        ss.add(m.getWidth());\n+        ss.add(m.getHeight());\n+        if (w instanceof Stage s) {\n+            if (s.isIconified()) {\n+                ss.add(WINDOW_ICONIFIED);\n+            } else if (s.isMaximized()) {\n+                ss.add(WINDOW_MAXIMIZED);\n+            } else if (s.isFullScreen()) {\n+                ss.add(WINDOW_FULLSCREEN);\n+            } else {\n+                ss.add(WINDOW_NORMAL);\n+            }\n+        }\n+        FxSettings.setStream(PREFIX + m.getID(), ss);\n+    }\n+\n+    public static void restoreWindow(WindowMonitor m, Window win) {\n+        SStream ss = FxSettings.getStream(PREFIX + m.getID());\n+        if (ss == null) {\n+            return;\n+        }\n+\n+        double x = ss.nextDouble(-1);\n+        double y = ss.nextDouble(-1);\n+        double w = ss.nextDouble(-1);\n+        double h = ss.nextDouble(-1);\n+        String t = ss.nextString(WINDOW_NORMAL);\n+\n+        if ((w > 0) && (h > 0)) {\n+            if (isValid(x, y)) {\n+                win.setX(x);\n+                win.setY(y);\n+            }\n+\n+            if (win instanceof Stage s) {\n+                if (s.isResizable()) {\n+                    s.setWidth(w);\n+                    s.setHeight(h);\n+                }\n+\n+                switch (t) {\n+                case WINDOW_FULLSCREEN:\n+                    s.setFullScreen(true);\n+                    break;\n+                case WINDOW_MAXIMIZED:\n+                    s.setMaximized(true);\n+                    break;\n+                \/\/ TODO iconified?\n+                }\n+            }\n+        }\n+    }\n+\n+    private static boolean isValid(double x, double y) {\n+        for (Screen s: Screen.getScreens()) {\n+            Rectangle2D r = s.getVisualBounds();\n+            if (r.contains(x, y)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    \/\/ TODO add type-specific suffix\n+    private static String getName(WindowMonitor m, Node n) {\n+        StringBuilder sb = new StringBuilder();\n+        if (collectNames(sb, n)) {\n+            return null;\n+        }\n+        String id = m.getID();\n+        return id + sb;\n+    }\n+\n+    \/\/ returns true if Node should be ignored\n+    private static boolean collectNames(StringBuilder sb, Node n) {\n+        if (n instanceof MenuBar) {\n+            return true;\n+        } else if (n instanceof Shape) {\n+            return true;\n+        } else if (n instanceof ImageView) {\n+            return true;\n+        }\n+\n+        Parent p = n.getParent();\n+        \/\/ FIX parent is null, so it's not yet connected (probably because of the skin)\n+        if (p != null) {\n+            if (collectNames(sb, p)) {\n+                return true;\n+            }\n+        }\n+        sb.append('.');\n+        String name = n.getId();\n+        if ((name == null) || (name.trim().length() == 0)) {\n+            name = n.getClass().getSimpleName();\n+        }\n+        sb.append(name);\n+        return false;\n+    }\n+\n+    public static void storeNode(WindowMonitor m, Node n) {\n+        \/\/System.out.println(\"storeNode \" + n); \/\/ FIX\n+        if (n instanceof ListView lv) {\n+            storeListView(m, lv);\n+        } else if (n instanceof ComboBox cb) {\n+            storeComboBox(m, cb);\n+        } else if (n instanceof CheckBox cb) {\n+            storeCheckBox(m, cb);\n+        }\n+\n+        if (n instanceof SplitPane sp) {\n+            for (Node ch: sp.getItems()) {\n+                storeNode(m, ch);\n+            }\n+        }\n+\n+        if (n instanceof Parent p) {\n+            for (Node ch: p.getChildrenUnmodifiable()) {\n+                storeNode(m, ch);\n+            }\n+        }\n+    }\n+\n+    public static void restoreNode(Node n) {\n+        if (checkNoScene(n)) {\n+            return;\n+        }\n+\n+        WindowMonitor m = WindowMonitor.getFor(n);\n+\n+        \/\/System.out.println(\"restoreNode \" + n); \/\/ FIX\n+        if (n instanceof ListView lv) {\n+            restoreListView(m, lv);\n+        } else if (n instanceof ComboBox cb) {\n+            restoreComboBox(m, cb);\n+        } else if (n instanceof CheckBox cb) {\n+            restoreCheckBox(m, cb);\n+        }\n+\n+        if (n instanceof SplitPane sp) {\n+            for (Node ch: sp.getItems()) {\n+                restoreNode(ch);\n+            }\n+        }\n+\n+        if (n instanceof Parent p) {\n+            for (Node ch: p.getChildrenUnmodifiable()) {\n+                restoreNode(ch);\n+            }\n+        }\n+    }\n+\n+    private static void storeComboBox(WindowMonitor m, ComboBox n) {\n+        if (n.getSelectionModel() == null) {\n+            return;\n+        }\n+\n+        int ix = n.getSelectionModel().getSelectedIndex();\n+        if (ix < 0) {\n+            return;\n+        }\n+\n+        String name = getName(m, n);\n+        if (name == null) {\n+            return;\n+        }\n+\n+        FxSettings.setInt(PREFIX + name, ix);\n+    }\n+\n+    \/\/ TODO perhaps operate with selection model instead\n+    private static void restoreComboBox(WindowMonitor m, ComboBox n) {\n+        if (n.getSelectionModel() == null) {\n+            return;\n+        }\n+\n+        if (checkNoScene(n)) {\n+            return;\n+        }\n+\n+        String name = getName(m, n);\n+        if (name == null) {\n+            return;\n+        }\n+\n+        int ix = FxSettings.getInt(PREFIX + name, -1);\n+        if (ix < 0) {\n+            return;\n+        } else if (ix >= n.getItems().size()) {\n+            return;\n+        }\n+\n+        n.getSelectionModel().select(ix);\n+    }\n+\n+    private static boolean checkNoScene(Node n) {\n+        if (n.getScene() == null) {\n+            class ChLi implements ChangeListener<Scene> {\n+                private final Node node;\n+\n+                public ChLi(Node n) {\n+                    this.node = n;\n+                }\n+\n+                @Override\n+                public void changed(ObservableValue<? extends Scene> src, Scene old, Scene scene) {\n+                    if (scene != null) {\n+                        Window w = scene.getWindow();\n+                        if (w != null) {\n+                            n.sceneProperty().removeListener(this);\n+                            restoreNode(n);\n+                            FxSettings.restore(n);\n+                        }\n+                    }\n+                }\n+            }\n+            ;\n+\n+            n.sceneProperty().addListener(new ChLi(n));\n+\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private static void storeListView(WindowMonitor m, ListView n) {\n+        if (n.getSelectionModel() == null) {\n+            return;\n+        }\n+\n+        int ix = n.getSelectionModel().getSelectedIndex();\n+        if (ix < 0) {\n+            return;\n+        }\n+\n+        String name = getName(m, n);\n+        if (name == null) {\n+            return;\n+        }\n+\n+        FxSettings.setInt(PREFIX + name, ix);\n+    }\n+\n+    private static void restoreListView(WindowMonitor m, ListView n) {\n+        if (n.getSelectionModel() == null) {\n+            return;\n+        }\n+\n+        if (checkNoScene(n)) {\n+            return;\n+        }\n+\n+        String name = getName(m, n);\n+        if (name == null) {\n+            return;\n+        }\n+\n+        int ix = FxSettings.getInt(PREFIX + name, -1);\n+        if (ix < 0) {\n+            return;\n+        } else if (ix >= n.getItems().size()) {\n+            return;\n+        }\n+\n+        n.getSelectionModel().select(ix);\n+    }\n+\n+    private static void storeCheckBox(WindowMonitor m, CheckBox n) {\n+        String name = getName(m, n);\n+        if (name == null) {\n+            return;\n+        }\n+\n+        boolean sel = n.isSelected();\n+        FxSettings.setBoolean(PREFIX + name, sel);\n+    }\n+\n+    private static void restoreCheckBox(WindowMonitor m, CheckBox n) {\n+        if (checkNoScene(n)) {\n+            return;\n+        }\n+\n+        String name = getName(m, n);\n+        if (name == null) {\n+            return;\n+        }\n+\n+        Boolean sel = FxSettings.getBoolean(PREFIX + name);\n+        if (sel == null) {\n+            return;\n+        }\n+\n+        n.setSelected(sel);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/settings\/FxSettingsSchema.java","additions":354,"deletions":0,"binary":false,"changes":354,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/\/ This code borrows heavily from the following project, with permission from the author:\n+\/\/ https:\/\/github.com\/andy-goryachev\/FxDock\n+package com.oracle.tools.fx.monkey.settings;\n+\n+import java.io.IOException;\n+\n+\/**\n+ * Defines the interface for storing and loading of settings.\n+ *\/\n+public interface ISettingsProvider {\n+    \/**\n+     * Loads settings from persistent storage, if needed.\n+     * @throws IOException\n+     *\/\n+    public void load() throws IOException;\n+\n+    \/**\n+     * Saves the settings to persistent media, if needed.\n+     * @throws IOException\n+     *\/\n+    public void save() throws IOException;\n+\n+    \/**\n+     * Sets a key-value pair.\n+     *\/\n+    public void set(String key, String value);\n+\n+    \/**\n+     * Sets a key-value pair where value is a SStream.\n+     *\/\n+    public void set(String key, SStream s);\n+\n+    \/**\n+     * Retrieves a String value for the specific key\n+     *\/\n+    public String get(String key);\n+\n+    \/**\n+     * Retrieves a SStream value for the specific key\n+     *\/\n+    public SStream getSStream(String key);\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/settings\/ISettingsProvider.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.settings;\n+\n+import java.util.ArrayList;\n+\n+\/**\n+ * Represents a string property as a stream of objects.\n+ *\/\n+public abstract class SStream {\n+\n+    public abstract Object[] toArray();\n+\n+    private SStream() {\n+    }\n+\n+    public static SStream writer() {\n+        return new SStream() {\n+            private ArrayList<Object> items = new ArrayList<>();\n+\n+            @Override\n+            protected void addValue(Object x) {\n+                items.add(x);\n+            }\n+\n+            @Override\n+            public Object[] toArray() {\n+                return items.toArray();\n+            }\n+        };\n+    }\n+\n+    public static SStream reader(Object[] items) {\n+        return new SStream() {\n+            int index;\n+\n+            @Override\n+            protected Object nextValue() {\n+                if (index >= items.length) {\n+                    return null;\n+                }\n+                return items[index++];\n+            }\n+\n+            @Override\n+            public Object[] toArray() {\n+                return items;\n+            }\n+        };\n+    }\n+\n+    public void add(double x) {\n+        addValue(x);\n+    }\n+\n+    public void add(String x) {\n+        addValue(x);\n+    }\n+\n+    protected void addValue(Object x) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    protected Object nextValue() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public final String nextString(String defaultValue) {\n+        Object v = nextValue();\n+        if (v instanceof String s) {\n+            return s;\n+        }\n+        return defaultValue;\n+    }\n+\n+    public double nextDouble(double defaultValue) {\n+        Object v = nextValue();\n+        if (v instanceof String s) {\n+            try {\n+                return Double.parseDouble(s);\n+            } catch (NumberFormatException e) {\n+                \/\/ ignore\n+            }\n+        } else if (v instanceof Double d) {\n+            return d;\n+        }\n+        return defaultValue;\n+    }\n+\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder(64);\n+        sb.append(\"[\");\n+        boolean sep = false;\n+        for (Object x: toArray()) {\n+            if (sep) {\n+                sb.append(\",\");\n+            } else {\n+                sep = true;\n+            }\n+            sb.append(x);\n+        }\n+        sb.append(\"]\");\n+        return sb.toString();\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/settings\/SStream.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -0,0 +1,203 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/\/ This code borrows heavily from the following project, with permission from the author:\n+\/\/ https:\/\/github.com\/andy-goryachev\/FxDock\n+package com.oracle.tools.fx.monkey.settings;\n+\n+import java.util.HashSet;\n+import java.util.WeakHashMap;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.stage.Stage;\n+import javafx.stage.Window;\n+\n+\/**\n+ * Stage does not keep track of its normal bounds when minimized, maximized, or switched to full screen.\n+ *\/\n+class WindowMonitor {\n+    private final String id;\n+    private double x;\n+    private double y;\n+    private double width;\n+    private double height;\n+    private double x2;\n+    private double y2;\n+    private double w2;\n+    private double h2;\n+    private static final WeakHashMap<Window, WindowMonitor> monitors = new WeakHashMap<>(4);\n+\n+    public WindowMonitor(Window w, String id) {\n+        this.id = id;\n+\n+        x = w.getX();\n+        y = w.getY();\n+        width = w.getWidth();\n+        height = w.getHeight();\n+\n+        w.xProperty().addListener((p) -> updateX(w));\n+        w.yProperty().addListener((p) -> updateY(w));\n+        w.widthProperty().addListener((p) -> updateWidth(w));\n+        w.heightProperty().addListener((p) -> updateHeight(w));\n+\n+        if (w instanceof Stage s) {\n+            s.iconifiedProperty().addListener((p) -> updateIconified(s));\n+            s.maximizedProperty().addListener((p) -> updateMaximized(s));\n+            s.fullScreenProperty().addListener((p) -> updateFullScreen(s));\n+        }\n+    }\n+\n+    public String getID() {\n+        return id;\n+    }\n+\n+    public double getX() {\n+        return x;\n+    }\n+\n+    public double getY() {\n+        return y;\n+    }\n+\n+    public double getWidth() {\n+        return width;\n+    }\n+\n+    public double getHeight() {\n+        return height;\n+    }\n+\n+    private void updateX(Window w) {\n+        x2 = x;\n+        x = w.getX();\n+    }\n+\n+    private void updateY(Window w) {\n+        y2 = y;\n+        y = w.getY();\n+    }\n+\n+    private void updateWidth(Window w) {\n+        w2 = width;\n+        width = w.getWidth();\n+    }\n+\n+    private void updateHeight(Window w) {\n+        h2 = height;\n+        height = w.getHeight();\n+    }\n+\n+    private void updateIconified(Stage s) {\n+        if (s.isIconified()) {\n+            x = x2;\n+            y = y2;\n+        }\n+    }\n+\n+    private void updateMaximized(Stage s) {\n+        if (s.isMaximized()) {\n+            x = x2;\n+            y = y2;\n+        }\n+    }\n+\n+    private void updateFullScreen(Stage s) {\n+        if (s.isFullScreen()) {\n+            x = x2;\n+            y = y2;\n+            width = w2;\n+            height = h2;\n+        }\n+    }\n+\n+    public static WindowMonitor getFor(Window w) {\n+        if (w == null) {\n+            return null;\n+        }\n+        WindowMonitor m = monitors.get(w);\n+        if (m == null) {\n+            String id = createID(w);\n+            if (id == null) {\n+                return null;\n+            }\n+            m = new WindowMonitor(w, id);\n+            monitors.put(w, m);\n+        }\n+        return m;\n+    }\n+\n+    public static WindowMonitor getFor(Node n) {\n+        Window w = windowFor(n);\n+        if (w != null) {\n+            return getFor(w);\n+        }\n+        return null;\n+    }\n+\n+    private static Window windowFor(Node n) {\n+        Scene sc = n.getScene();\n+        if (sc != null) {\n+            Window w = sc.getWindow();\n+            if (w != null) {\n+                return w;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static String createID(Window win) {\n+        \/\/ TODO use name provided by setName\n+        String prefix = win.getClass().getSimpleName() + \".\";\n+\n+        HashSet<String> ids = new HashSet<>();\n+        for (Window w: Window.getWindows()) {\n+            if (w == win) {\n+                continue;\n+            }\n+            WindowMonitor m = monitors.get(w);\n+            if (m == null) {\n+                return null;\n+            }\n+            String id = m.getID();\n+            if (id.startsWith(prefix)) {\n+                ids.add(id);\n+            }\n+        }\n+\n+        for (int i = 0; i < 100_000; i++) {\n+            String id = prefix + i;\n+            if (!ids.contains(id)) {\n+                return id;\n+            }\n+        }\n+\n+        \/\/ safeguard measure\n+        throw new Error(\"cannot create id: too many windows?\");\n+    }\n+\n+    public static boolean remove(Window w) {\n+        monitors.remove(w);\n+        return monitors.size() == 0;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/settings\/WindowMonitor.java","additions":203,"deletions":0,"binary":false,"changes":203,"status":"added"},{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import java.util.List;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Menu;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.RadioMenuItem;\n+import javafx.scene.control.SeparatorMenuItem;\n+import javafx.scene.control.ToggleGroup;\n+import javafx.scene.input.KeyCombination;\n+import javafx.scene.layout.GridPane;\n+import javafx.stage.Stage;\n+import javafx.stage.Window;\n+\n+\/**\n+ * Shortcuts and convenience methods that should be a part of JavaFX.\n+ *\/\n+public class FX {\n+    public static Menu menu(MenuBar b, String text) {\n+        Menu m = new Menu(text);\n+        applyMnemonic(m);\n+        b.getMenus().add(m);\n+        return m;\n+    }\n+\n+    public static MenuItem item(MenuBar b, String text, Runnable action) {\n+        MenuItem mi = new MenuItem(text);\n+        applyMnemonic(mi);\n+        mi.setOnAction((ev) -> action.run());\n+        lastMenu(b).getItems().add(mi);\n+        return mi;\n+    }\n+\n+    public static MenuItem item(MenuBar b, MenuItem mi) {\n+        applyMnemonic(mi);\n+        lastMenu(b).getItems().add(mi);\n+        return mi;\n+    }\n+\n+    public static MenuItem item(MenuBar b, String text) {\n+        MenuItem mi = new MenuItem(text);\n+        applyMnemonic(mi);\n+        lastMenu(b).getItems().add(mi);\n+        return mi;\n+    }\n+\n+    private static void applyMnemonic(MenuItem m) {\n+        String text = m.getText();\n+        if (text != null) {\n+            if (text.contains(\"_\")) {\n+                m.setMnemonicParsing(true);\n+            }\n+        }\n+    }\n+\n+    private static Menu lastMenu(MenuBar b) {\n+        List<Menu> ms = b.getMenus();\n+        return ms.get(ms.size() - 1);\n+    }\n+\n+    public static SeparatorMenuItem separator(MenuBar b) {\n+        SeparatorMenuItem s = new SeparatorMenuItem();\n+        lastMenu(b).getItems().add(s);\n+        return s;\n+    }\n+\n+    public static RadioMenuItem radio(MenuBar b, String text, KeyCombination accelerator, ToggleGroup g) {\n+        RadioMenuItem mi = new RadioMenuItem(text);\n+        mi.setAccelerator(accelerator);\n+        mi.setToggleGroup(g);\n+        lastMenu(b).getItems().add(mi);\n+        return mi;\n+    }\n+\n+    public static void add(GridPane p, Node n, int col, int row) {\n+        p.getChildren().add(n);\n+        GridPane.setConstraints(n, col, row);\n+    }\n+\n+    public static <T> void select(ComboBox<T> cb, T value) {\n+        cb.getSelectionModel().select(value);\n+    }\n+\n+    public static <T> void selectFirst(ComboBox<T> cb) {\n+        cb.getSelectionModel().selectFirst();\n+    }\n+\n+    public static <T> T getSelectedItem(ComboBox<T> cb) {\n+        return cb.getSelectionModel().getSelectedItem();\n+    }\n+\n+    public static Window getParentWindow(Object nodeOrWindow) {\n+        if (nodeOrWindow == null) {\n+            return null;\n+        } else if (nodeOrWindow instanceof Window w) {\n+            return w;\n+        } else if (nodeOrWindow instanceof Node n) {\n+            Scene s = n.getScene();\n+            if (s != null) {\n+                return s.getWindow();\n+            }\n+            return null;\n+        } else {\n+            throw new Error(\"Node or Window only\");\n+        }\n+    }\n+\n+    \/** cascades the window relative to its owner, if any *\/\n+    public static void cascade(Stage w) {\n+        if (w != null) {\n+            Window p = w.getOwner();\n+            if (p != null) {\n+                double x = p.getX();\n+                double y = p.getY();\n+                double off = 20;\n+                w.setX(x + off);\n+                w.setY(y + off);\n+            }\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/FX.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import javafx.scene.Node;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.text.Font;\n+\n+\/**\n+ * Font Selector.\n+ *\/\n+public class FontSelector {\n+    private final ComboBox<String> fontField = new ComboBox<>();\n+    private final ComboBox<Integer> sizeField;\n+\n+    public FontSelector(String id, Consumer<Font> client) {\n+        fontField.setId(id + \"_FONT\");\n+        fontField.getItems().setAll(collectFonts());\n+        fontField.getSelectionModel().selectedItemProperty().addListener((p) -> {\n+            update(client);\n+        });\n+\n+        sizeField = new ComboBox<>();\n+        sizeField.setId(id + \"_SIZE\");\n+        sizeField.getItems().setAll(\n+            8,\n+            12,\n+            24,\n+            48,\n+            72\n+        );\n+        sizeField.getSelectionModel().selectedItemProperty().addListener((x) -> {\n+            update(client);\n+        });\n+    }\n+\n+    protected void update(Consumer<Font> client) {\n+        Font f = getFont();\n+        client.accept(f);\n+    }\n+\n+    public Node fontNode() {\n+        return fontField;\n+    }\n+\n+    public Node sizeNode() {\n+        return sizeField;\n+    }\n+\n+    public void select(String name) {\n+        fontField.getSelectionModel().select(name);\n+    }\n+\n+    public Font getFont() {\n+        String name = fontField.getSelectionModel().getSelectedItem();\n+        if (name == null) {\n+            return null;\n+        }\n+        Integer size = sizeField.getSelectionModel().getSelectedItem();\n+        if (size == null) {\n+            size = 12;\n+        }\n+        return new Font(name, size);\n+    }\n+\n+    protected List<String> collectFonts() {\n+        ArrayList<String> rv = new ArrayList<>(Font.getFontNames());\n+        \/\/rv.add(0, null);\n+        return rv;\n+    }\n+\n+    public void selectSystemFont() {\n+        FX.select(fontField, \"System Regular\"); \/\/ windows?\n+        FX.select(sizeField, 12);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/FontSelector.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import javafx.scene.Node;\n+import javafx.scene.control.ComboBox;\n+import javafx.util.StringConverter;\n+\n+\/**\n+ * General purpose item selector.\n+ *\/\n+public class ItemSelector<T> {\n+    public static record Pair(String display, Object value) { }\n+\n+    private final ComboBox<Pair> field = new ComboBox<>();\n+\n+    public ItemSelector(String id, Consumer<T> client, Object... displayValuePairs) {\n+        field.setId(\"PosSelector\");\n+        field.getItems().setAll(toPairs(displayValuePairs));\n+        field.setConverter(new StringConverter<Pair>() {\n+            @Override\n+            public String toString(Pair x) {\n+                return toDisplay(x);\n+            }\n+\n+            @Override\n+            public Pair fromString(String text) {\n+                return null;\n+            }\n+        });\n+        field.getSelectionModel().selectedItemProperty().addListener((p) -> {\n+            Object v = field.getSelectionModel().getSelectedItem();\n+            T text = toValue(v);\n+            client.accept(text);\n+        });\n+        field.getSelectionModel().selectFirst();\n+    }\n+\n+    private Pair[] toPairs(Object[] pairs) {\n+        ArrayList<Pair> a = new ArrayList<>();\n+        for (int i = 0; i < pairs.length;) {\n+            String display = (String)pairs[i++];\n+            T value = (T)pairs[i++];\n+            a.add(new Pair(display, value));\n+        }\n+        return a.toArray(new Pair[a.size()]);\n+    }\n+\n+    public Node node() {\n+        return field;\n+    }\n+\n+    public void select(Object item) {\n+        int ix = indexOf(item);\n+        if (ix >= 0) {\n+            field.getSelectionModel().select(ix);\n+        }\n+    }\n+\n+    private int indexOf(Object item) {\n+        List<Pair> list = field.getItems();\n+        int sz = list.size();\n+        for (int i = 0; i < sz; i++) {\n+            Object x = list.get(i);\n+            if (eq(item, x)) {\n+                return i;\n+            } else if (x instanceof Pair p) {\n+                if (eq(item, p.display()) || eq(item, p.value())) {\n+                    return i;\n+                }\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    private static boolean eq(Object a, Object b) {\n+        if (a == null) {\n+            return (b == null);\n+        } else {\n+            return a.equals(b);\n+        }\n+    }\n+\n+    public void selectFirst() {\n+        field.getSelectionModel().selectFirst();\n+    }\n+\n+    protected String toDisplay(Object x) {\n+        if (x == null) {\n+            return null;\n+        } else if (x instanceof Pair p) {\n+            return p.display();\n+        } else {\n+            return x.toString();\n+        }\n+    }\n+\n+    protected T toValue(Object x) {\n+        if (x instanceof Pair p) {\n+            return (T)p.value();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public void add(String display, T value) {\n+        field.getItems().add(new Pair(display, value));\n+    }\n+\n+    public void add(String display, Supplier<T> value) {\n+        field.getItems().add(new Pair(display, value));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/ItemSelector.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -0,0 +1,166 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import javafx.scene.control.Label;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Priority;\n+\n+\/**\n+ *\n+ *\/\n+public class Native2AsciiPane extends BorderPane {\n+    private final TextArea nat;\n+    private final TextArea ascii;\n+    private boolean ignoreEvent;\n+\n+    public Native2AsciiPane() {\n+        nat = new TextArea();\n+        nat.textProperty().addListener((x) -> convert(true));\n+\n+        ascii = new TextArea();\n+        ascii.textProperty().addListener((x) -> convert(false));\n+\n+        GridPane p = new GridPane();\n+        p.add(new Label(\"Native\"), 0, 0);\n+        p.add(nat, 0, 1);\n+        \/\/ talk about ceremony!\n+        GridPane.setFillHeight(nat, Boolean.TRUE);\n+        GridPane.setFillWidth(nat, Boolean.TRUE);\n+        p.setHgrow(nat, Priority.ALWAYS);\n+        p.setVgrow(nat, Priority.ALWAYS);\n+        p.add(new Label(\"ASCII\"), 0, 2);\n+        p.add(ascii, 0, 3);\n+        GridPane.setFillHeight(ascii, Boolean.TRUE);\n+        GridPane.setFillWidth(ascii, Boolean.TRUE);\n+        p.setHgrow(ascii, Priority.ALWAYS);\n+        p.setVgrow(ascii, Priority.ALWAYS);\n+        setCenter(p);\n+    }\n+\n+    protected void convert(boolean fromNative) {\n+        if (ignoreEvent) {\n+            return;\n+        }\n+\n+        ignoreEvent = true;\n+\n+        if (fromNative) {\n+            String s = nat.getText();\n+            String text = native2ascii(s);\n+            ascii.setText(text);\n+        } else {\n+            String s = ascii.getText();\n+            String text = ascii2native(s);\n+            nat.setText(text);\n+        }\n+        ignoreEvent = false;\n+    }\n+\n+    private String ascii2native(String text) {\n+        if (text == null) {\n+            return null;\n+        }\n+\n+        int sz = text.length();\n+        StringBuilder sb = new StringBuilder(sz);\n+        for (int i = 0; i < sz; i++) {\n+            char c = text.charAt(i);\n+            switch (c) {\n+            case '\\\\':\n+                int u = toUnicode(text, i + 1);\n+                if (u < 0) {\n+                    sb.append(c);\n+                } else {\n+                    sb.append((char)u);\n+                    i += 5;\n+                }\n+                break;\n+            default:\n+                sb.append(c);\n+                break;\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static String native2ascii(String text) {\n+        if (text == null) {\n+            return null;\n+        }\n+\n+        int sz = text.length();\n+        StringBuilder sb = new StringBuilder(sz + 256);\n+        for (int i = 0; i < sz; i++) {\n+            char c = text.charAt(i);\n+            switch (c) {\n+            case ' ':\n+            case '\\n':\n+                sb.append(c);\n+                break;\n+            default:\n+                if ((c > ' ') && (c < 0x7f)) {\n+                    sb.append(c);\n+                } else {\n+                    sb.append(\"\\\\u\");\n+                    sb.append(hex(c >> 12));\n+                    sb.append(hex(c >> 8));\n+                    sb.append(hex(c >> 4));\n+                    sb.append(hex(c));\n+                }\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    private static char hex(int n) {\n+        return \"0123456789abcdef\".charAt(n & 0x0f);\n+    }\n+\n+    private int toUnicode(String text, int ix) {\n+        if (text.length() < (ix + 5)) {\n+            return -1;\n+        }\n+\n+        char c = text.charAt(ix++);\n+        switch (c) {\n+        case 'u':\n+        case 'U':\n+            break;\n+        default:\n+            return -1;\n+        }\n+\n+        try {\n+            String s = text.substring(ix, ix + 4);\n+            int v = Integer.parseInt(s, 16);\n+            return v;\n+        } catch (NumberFormatException e) {\n+            return -1;\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/Native2AsciiPane.java","additions":166,"deletions":0,"binary":false,"changes":166,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import javafx.geometry.Insets;\n+import javafx.scene.Node;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Priority;\n+\n+\/**\n+ * Option Pane - a vertical option sheet.\n+ *\/\n+public class OptionPane extends GridPane {\n+    private int row;\n+    private int column;\n+    private static final Insets MARGIN = new Insets(2, 4, 2, 4);\n+\n+    public OptionPane() {\n+        \/\/ no such thing\n+        \/\/ https:\/\/stackoverflow.com\/questions\/20454021\/how-to-set-padding-between-columns-of-a-javafx-gridpane\n+        \/\/ setVGap(2);\n+    }\n+\n+    public void label(String text) {\n+        add(new Label(text));\n+    }\n+\n+    public void option(Node n) {\n+        add(n);\n+    }\n+\n+    public void add(Node n) {\n+        add(n, column, row++);\n+        setMargin(n, MARGIN);\n+        setFillHeight(n, Boolean.TRUE);\n+        setFillWidth(n, Boolean.TRUE);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/OptionPane.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import java.util.function.Consumer;\n+import javafx.geometry.Pos;\n+import javafx.scene.Node;\n+import javafx.scene.control.ComboBox;\n+\n+\/**\n+ * Alignment Option Selector.\n+ *\/\n+public class PosSelector {\n+    private final ComboBox<Pos> field = new ComboBox<>();\n+\n+    public PosSelector(Consumer<Pos> client) {\n+        field.setId(\"PosSelector\");\n+        field.getItems().setAll(Pos.values());\n+        field.getSelectionModel().selectedItemProperty().addListener((p) -> {\n+            Pos v = field.getSelectionModel().getSelectedItem();\n+            client.accept(v);\n+        });\n+    }\n+\n+    public Node node() {\n+        return field;\n+    }\n+\n+    public void select(Pos v) {\n+        field.getSelectionModel().select(v);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/PosSelector.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import javafx.geometry.Bounds;\n+import javafx.geometry.Point2D;\n+import javafx.scene.Group;\n+import javafx.scene.Node;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Path;\n+import javafx.scene.shape.PathElement;\n+import javafx.scene.text.HitInfo;\n+import javafx.scene.text.Text;\n+import javafx.scene.text.TextFlow;\n+\n+\/**\n+ * Shows character boundaries using navigation code similar to TextArea.nextCharacterVisually()\n+ *\/\n+public class ShowCharacterRuns extends Group {\n+    public ShowCharacterRuns() {\n+        setManaged(false);\n+    }\n+\n+    public static Group createFor(Text textNode) {\n+        ShowCharacterRuns r = new ShowCharacterRuns();\n+        int len = textNode.getText().length();\n+        for (int i = 0; i < len; i++) {\n+            PathElement[] caret = textNode.caretShape(i, true);\n+            if (caret.length == 4) {\n+                caret = new PathElement[] {\n+                    caret[0],\n+                    caret[1]\n+                };\n+            }\n+\n+            Bounds caretBounds = new Path(caret).getLayoutBounds();\n+            double x = caretBounds.getMaxX();\n+            double y = (caretBounds.getMinY() + caretBounds.getMaxY()) \/ 2;\n+            HitInfo hit = textNode.hitTest(new Point2D(x, y));\n+            Path cs = new Path(textNode.rangeShape(hit.getCharIndex(), hit.getCharIndex() + 1));\n+            \/\/System.err.println(i + \" \" + cs); \/\/ FIX\n+            Color c = color(i);\n+            cs.setFill(c);\n+            cs.setStroke(c);\n+            r.getChildren().add(cs);\n+        }\n+        return r;\n+    }\n+\n+    public static Group createFor(TextFlow textNode) {\n+        ShowCharacterRuns r = new ShowCharacterRuns();\n+        int len = getTextLength(textNode);\n+        for (int i = 0; i < len; i++) {\n+            PathElement[] caret = textNode.caretShape(i, true);\n+            if (caret.length == 4) {\n+                caret = new PathElement[] {\n+                    caret[0],\n+                    caret[1]\n+                };\n+            }\n+\n+            Bounds caretBounds = new Path(caret).getLayoutBounds();\n+            double x = caretBounds.getMaxX();\n+            double y = (caretBounds.getMinY() + caretBounds.getMaxY()) \/ 2;\n+            HitInfo hit = textNode.hitTest(new Point2D(x, y));\n+            Path cs = new Path(textNode.rangeShape(hit.getCharIndex(), hit.getCharIndex() + 1));\n+            System.err.println(i + \" \" + cs); \/\/ FIX\n+            Color c = color(i);\n+            cs.setFill(c);\n+            cs.setStroke(c);\n+            r.getChildren().add(cs);\n+        }\n+        return r;\n+    }\n+\n+    private static Color color(int i) {\n+        switch (i % 3) {\n+        case 0:\n+            return Color.rgb(255, 0, 0, 0.5);\n+        case 1:\n+            return Color.rgb(0, 255, 0, 0.5);\n+        default:\n+            return Color.rgb(0, 0, 255, 0.5);\n+        }\n+    }\n+\n+    \/** TextFlow.getTextLength() *\/\n+    private static int getTextLength(TextFlow f) {\n+        int len = 0;\n+        for (Node n: f.getChildrenUnmodifiable()) {\n+            if (n instanceof Text t) {\n+                len += t.getText().length();\n+            }\n+        }\n+        return len;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/ShowCharacterRuns.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import java.util.function.Consumer;\n+\n+\/**\n+ * Text Templates\n+ *\/\n+public class Templates {\n+    public static final String TWO_EMOJIS = \"😊😇\";\n+\n+    public static TextSelector promptChoice(String id, Consumer<String> client) {\n+        return TextSelector.fromPairs(\n+            id,\n+            client,\n+            \"null\", null,\n+            \"Short\", \"yo\",\n+            \"Long\", \"<beg-0123456789012345678901234567890123456789-|-0123456789012345678901234567890123456789-end>\",\n+            \"RTL\", \"العربية\"\n+        );\n+    }\n+\n+    public static Object[] multiLineTextPairs() {\n+        return new Object[] {\n+            \"Long\", \"<beg-0123456789012345678901234567890123456789-|-0123456789012345678901234567890123456789-end>\",\n+            \"Short\", \"yo\",\n+            \"Empty\", \"\",\n+            \"null\", null,\n+            \"Right-to-Left\", \"العربية\" + \"העברעאיש (עברית) איז אַ סעמיטישע שפּראַך. מען שרייבט העברעאיש מיט די 22 אותיות פונעם אלף בית לשון קודש. די\",\n+            \"Writing Systems\", WritingSystemsDemo.getText(),\n+            \"Combining Chars\", \"Tibetan ཨོཾ་མ་ཎི་པདྨེ་ཧཱུྃ\\nDouble diacritics: a\\u0360b a\\u0361b a\\u0362b a\\u035cb\",\n+            \"Failed Nav Bug\", \"Arabic: \\u0627\\u0644\\u0639\\u0631\\u0628\\u064a\\u0629\",\n+            \"Wrap Index Bug\", \"A regular Arabic verb, كَتَبَ‎ kataba (to write).\",\n+            \"Emojis\", \"[🇺🇦❤️🏁🇺🇸🔥🦋\\n😀😃😄😁😆😅🤣😂\\n🙂🙃😉😊😇]\",\n+            \"Tabs\", \"0123456789012345678901234567890\\n0\\n\\t1\\n\\t\\t2\\n\\t\\t\\t3\\n\\t\\t\\t\\t4\\n0\\n\",\n+        };\n+    }\n+\n+    public static Object[] singleLineTextPairs() {\n+        return new Object[] {\n+            \"Long\", \"<beg-0123456789012345678901234567890123456789-|-0123456789012345678901234567890123456789-end>\",\n+            \"Short\", \"yo\",\n+            \"Empty\", \"\",\n+            \"null\", null,\n+            \"Right-to-Left\", \"العربية\" + \"העברעאיש (עברית) איז אַ סעמיטישע שפּראַך. מען שרייבט העברעאיש מיט די 22 אותיות פונעם אלף בית לשון קודש. די\",\n+            \"Tibetan\", \"Tibetan ཨོཾ་མ་ཎི་པདྨེ་ཧཱུྃ\",\n+            \"Double diacritics\", \"a\\u0360b a\\u0361b a\\u0362b a\\u035cb\",\n+            \"Failed Nav Bug\", \"Arabic: \\u0627\\u0644\\u0639\\u0631\\u0628\\u064a\\u0629\",\n+            \"Wrap Index Bug\", \"A regular Arabic verb, كَتَبَ‎ kataba (to write).\",\n+            \"Newlines and Tabs\", \"1\\t\\n2\\r3\\r\\n4\",\n+            \"Single Newline\", \"\\n\",\n+            \"Single Tab\", \"\\t\",\n+            \"Emojis\", \"[🇺🇦❤️🏁🇺🇸🔥🦋😀😃😄😁😆😅🤣😂🙂🙃😉😊😇]\",\n+        };\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/Templates.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,149 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.geometry.Orientation;\n+import javafx.geometry.Pos;\n+import javafx.scene.Group;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.SplitPane;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.stage.Window;\n+\n+\/**\n+ * Base class for individual control test Pane.\n+ *\/\n+public class TestPaneBase extends BorderPane {\n+    public static SimpleBooleanProperty usePreferredSize = new SimpleBooleanProperty();\n+    private final BorderPane contentPane;\n+    private final BooleanBinding inScrollBars;\n+\n+    public TestPaneBase() {\n+        contentPane = new BorderPane();\n+        contentPane.setOpacity(1.0);\n+\n+        inScrollBars = usePreferredSize.not();\n+        inScrollBars.addListener((x) -> {\n+            updateContent();\n+        });\n+        updateContent();\n+    }\n+\n+    public void updateContent() {\n+        boolean inScrolls = inScrollBars.get();\n+        if (inScrolls) {\n+            contentPane.setStyle(null);\n+\n+            SplitPane hsplit = new SplitPane(contentPane, pane());\n+            hsplit.setId(\"hsplit\");\n+            hsplit.setBorder(null);\n+            hsplit.setDividerPositions(0.9);\n+            hsplit.setOrientation(Orientation.HORIZONTAL);\n+\n+            SplitPane vsplit = new SplitPane(hsplit, pane());\n+            vsplit.setId(\"vsplit\");\n+            vsplit.setBorder(null);\n+            vsplit.setDividerPositions(0.9);\n+            vsplit.setOrientation(Orientation.VERTICAL);\n+\n+            setCenter(vsplit);\n+        } else {\n+            Group g = new Group(contentPane);\n+            g.setId(\"content-group\");\n+            contentPane.setStyle(\"-fx-border-color:red; -fx-borderinsets:0; -fx-borderwidth:1;\");\n+            setCenter(g);\n+        }\n+    }\n+\n+    protected static Pane pane() {\n+        Pane p = new Pane();\n+        SplitPane.setResizableWithParent(p, false);\n+        p.setStyle(\"-fx-background-color:#dddddd;\");\n+        return p;\n+    }\n+\n+    public Button addButton(String name, Runnable action) {\n+        Button b = new Button(name);\n+        b.setOnAction((ev) -> {\n+            action.run();\n+        });\n+\n+        toolbar().add(b);\n+        return b;\n+    }\n+\n+    public TBar toolbar() {\n+        if (getTop() instanceof TBar) {\n+            return (TBar)getTop();\n+        }\n+\n+        TBar t = new TBar();\n+        setTop(t);\n+        return t;\n+    }\n+\n+    public Window getWindow() {\n+        Scene s = getScene();\n+        if (s != null) {\n+            return s.getWindow();\n+        }\n+        return null;\n+    }\n+\n+    public void setContent(Node content) {\n+        contentPane.setCenter(content);\n+        BorderPane.setAlignment(content, Pos.TOP_LEFT);\n+    }\n+\n+    public void setOptions(Node n) {\n+        setRight(n);\n+    }\n+\n+    \/** Local toolbar *\/\n+    public static class TBar extends HBox {\n+        public TBar() {\n+            setFillHeight(true);\n+            setAlignment(Pos.CENTER_LEFT);\n+            setSpacing(2);\n+        }\n+\n+        public <T extends Node> T add(T n) {\n+            getChildren().add(n);\n+            return n;\n+        }\n+\n+        public void addAll(Node... nodes) {\n+            for (Node n: nodes) {\n+                add(n);\n+            }\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/TestPaneBase.java","additions":149,"deletions":0,"binary":false,"changes":149,"status":"added"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import javafx.scene.Node;\n+import javafx.scene.control.ComboBox;\n+import javafx.util.StringConverter;\n+\n+\/**\n+ * General purpose text selector.\n+ *\/\n+public class TextSelector {\n+    public static record Pair(String display, String value) { }\n+\n+    private final ComboBox<Object> field = new ComboBox<>();\n+\n+    public TextSelector(String id, Consumer<String> client, Object... items) {\n+        field.setId(\"PosSelector\");\n+        field.getItems().setAll(items);\n+        field.setConverter(new StringConverter<Object>() {\n+            @Override\n+            public String toString(Object x) {\n+                return toDisplay(x);\n+            }\n+\n+            @Override\n+            public Object fromString(String text) {\n+                return text;\n+            }\n+        });\n+        field.getSelectionModel().selectedItemProperty().addListener((p) -> {\n+            String text = getSelectedText();\n+            client.accept(text);\n+        });\n+    }\n+\n+    public static TextSelector fromPairs(String id, Consumer<String> client, Object... pairs) {\n+        ArrayList<Pair> a = new ArrayList<>();\n+        for (int i = 0; i < pairs.length;) {\n+            String display = (String)pairs[i++];\n+            String value = (String)pairs[i++];\n+            a.add(new Pair(display, value));\n+        }\n+\n+        return new TextSelector(id, client, a.toArray());\n+    }\n+\n+    public Node node() {\n+        return field;\n+    }\n+\n+    public void select(Object item) {\n+        int ix = indexOf(item);\n+        if (ix >= 0) {\n+            field.getSelectionModel().select(ix);\n+        }\n+    }\n+\n+    private int indexOf(Object item) {\n+        List<Object> list = field.getItems();\n+        int sz = list.size();\n+        for (int i = 0; i < sz; i++) {\n+            Object x = list.get(i);\n+            if (eq(item, x)) {\n+                return i;\n+            } else if (x instanceof Pair p) {\n+                if (eq(item, p.display()) || eq(item, p.value())) {\n+                    return i;\n+                }\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    private static boolean eq(Object a, Object b) {\n+        if (a == null) {\n+            return (b == null);\n+        } else {\n+            return a.equals(b);\n+        }\n+    }\n+\n+    public void selectFirst() {\n+        field.getSelectionModel().selectFirst();\n+    }\n+\n+    protected String toDisplay(Object x) {\n+        if (x == null) {\n+            return null;\n+        } else if (x instanceof Pair p) {\n+            return p.display();\n+        } else {\n+            return x.toString();\n+        }\n+    }\n+\n+    protected String toValue(Object x) {\n+        if (x == null) {\n+            return null;\n+        } else if (x instanceof Pair p) {\n+            return p.value();\n+        } else {\n+            return x.toString();\n+        }\n+    }\n+\n+    public void addPair(String display, String value) {\n+        field.getItems().add(new Pair(display, value));\n+    }\n+\n+    public String getSelectedText() {\n+        Object v = field.getSelectionModel().getSelectedItem();\n+        return toValue(v);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/TextSelector.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+\/**\n+ * Monkey Tester Utilities\n+ *\/\n+public class Utils {\n+    public static Object[] combine(Object[] src, Object ... pairs) {\n+        int sz = src.length + pairs.length;\n+        Object[] rv = new Object[sz];\n+        System.arraycopy(src, 0, rv, 0, src.length);\n+        System.arraycopy(pairs, 0, rv, src.length, pairs.length);\n+        return rv;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/Utils.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,143 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+\/**\n+ * Sample text for testing writing systems support.\n+ * See https:\/\/en.wikipedia.org\/wiki\/List_of_writing_systems\n+ *\/\n+public class WritingSystemsDemo {\n+    public static final String[] PAIRS = {\n+        \"Arabic\", \"العربية\",\n+        \"Akkadian\", \"𒀝𒅗𒁺𒌑\",\n+        \"Armenian\", \"հայերէն\/հայերեն\",\n+        \"Assamese\", \"অসমীয়া\",\n+        \"Awadhi\", \"अवधी\/औधी\",\n+        \"Bagheli\", \"बघेली\",\n+        \"Bagri\", \"बागड़ी, باگڑی\",\n+        \"Bengali\", \"বাংলা\",\n+        \"Bhojpuri\", \"𑂦𑂷𑂔𑂣𑂳𑂩𑂲\",\n+        \"Braille\", \"⠃⠗⠇\",\n+        \"Bundeli\", \"बुन्देली\",\n+        \"Burmese\", \"မြန်မာ\",\n+        \"Cherokee\", \"ᏣᎳᎩ ᎦᏬᏂᎯᏍᏗ\",\n+        \"Chhattisgarhi\", \"छत्तीसगढ़ी, ଛତିଶଗଡ଼ି, ଲରିଆ\",\n+        \"Chinese\", \"中文\",\n+        \"Czech\", \"Čeština\",\n+        \"Devanagari\", \"देवनागरी\",\n+        \"Dhundhari\", \"ढूण्ढाड़ी\/ઢૂણ્ઢાડ઼ી\",\n+        \"Farsi\", \"فارسی\",\n+        \"Garhwali\", \"गढ़वळि\",\n+        \"Geʽez\", \"ግዕዝ\",\n+        \"Greek\", \"Ελληνικά\",\n+        \"Georgian\", \"ქართული\",\n+        \"Gujarati\", \"ગુજરાતી\",\n+        \"Harauti\", \"हाड़ौती, हाड़ोती\",\n+        \"Haryanvi\", \"हरयाणवी\",\n+        \"Hebrew\", \"עברית\",\n+        \"Hindi\", \"हिन्दी\",\n+        \"Inuktitut\", \"ᐃᓄᒃᑎᑐᑦ\",\n+        \"Japanese\", \"日本語 かな カナ\",\n+        \"Kangri\", \"कांगड़ी\",\n+        \"Kannada\", \"ಕನ್ನಡ\",\n+        \"Khmer\", \"ខ្មែរ\",\n+        \"Khortha\", \"खोरठा\",\n+        \"Korean\", \"한국어\",\n+        \"Kumaoni\", \"कुमाऊँनी\",\n+        \"Magahi\", \"𑂧𑂏𑂯𑂲\/𑂧𑂏𑂡𑂲\",\n+        \"Maithili\", \"मैथिली\",\n+        \"Malayalam\", \"മലയാളം\",\n+        \"Malvi\", \"माळवी भाषा \/ માળવી ભાષા\",\n+        \"Marathi\", \"मराठी\",\n+        \"Marwari,\", \"मारवाड़ी\",\n+        \"Meitei\", \"ꯃꯩꯇꯩꯂꯣꯟ\",\n+        \"Mewari\", \"मेवाड़ी\/મેવ઼ાડ઼ી\",\n+        \"Mongolian\", \"ᠨᠢᠷᠤᠭᠤ\",\n+        \"Nimadi\", \"निमाड़ी\",\n+        \"Odia\", \"ଓଡ଼ିଆ\",\n+        \"Punjabi\", \"ਪੰਜਾਬੀپن٘جابی\",\n+        \"Pahari\", \"पहाड़ी پہاڑی \",\n+        \"Rajasthani\", \"राजस्थानी\",\n+        \"Russian\", \"Русский\",\n+        \"Sanskrit\", \"संस्कृत-, संस्कृतम्\",\n+        \"Santali\", \"ᱥᱟᱱᱛᱟᱲᱤ\",\n+        \"Suret\", \"ܣܘܪܝܬ\",\n+        \"Surgujia\", \"सरगुजिया\",\n+        \"Surjapuri\", \"सुरजापुरी, সুরজাপুরী\",\n+        \"Tamil\", \"Tamiḻ\",\n+        \"Telugu\", \"తెలుగు\",\n+        \"Thaana\", \"ދިވެހި\",\n+        \"Thai\", \"ไทย\",\n+        \"Tibetan\", \"བོད་\",\n+        \"Tulu\", \"ತುಳು\",\n+        \"Turoyo\", \"ܛܘܪܝܐ\",\n+        \"Ukrainian\", \"Українська\",\n+        \"Urdu\", \"اردو\",\n+        \"Vietnamese\", \"Tiếng Việt\",\n+    };\n+\n+    public static String getText() {\n+        StringBuilder sb = new StringBuilder();\n+        for(int i=0; i<PAIRS.length; ) {\n+            String a = PAIRS[i++];\n+            String b = PAIRS[i++];\n+            t(sb, a, b);\n+        }\n+        return sb.toString();\n+    }\n+\n+    private static void t(StringBuilder sb, String name, String text) {\n+        sb.append(name);\n+        sb.append(\": \");\n+        sb.append(text);\n+        sb.append(\" (\");\n+        native2ascii(sb, text);\n+        sb.append(\") \\n\");\n+    }\n+\n+    private static void native2ascii(StringBuilder sb, String text) {\n+        for (char c: text.toCharArray()) {\n+            if (c < 0x20) {\n+                escape(sb, c);\n+            } else if (c > 0x7f) {\n+                escape(sb, c);\n+            } else {\n+                sb.append(c);\n+            }\n+        }\n+    }\n+\n+    private static void escape(StringBuilder sb, char c) {\n+        sb.append(\"\\\\u\");\n+        sb.append(h(c >> 12));\n+        sb.append(h(c >> 8));\n+        sb.append(h(c >> 4));\n+        sb.append(h(c));\n+    }\n+\n+    private static char h(int d) {\n+        return \"0123456789abcdef\".charAt(d & 0x000f);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/WritingSystemsDemo.java","additions":143,"deletions":0,"binary":false,"changes":143,"status":"added"},{"patch":"@@ -0,0 +1,10 @@\n+module monkey_tester {\n+    exports com.oracle.tools.fx.monkey;\n+\n+    requires javafx.base;\n+    requires javafx.controls;\n+    requires javafx.graphics;\n+    requires javafx.web;\n+    requires java.desktop;\n+    requires javafx.swing;\n+}\n","filename":"tests\/manual\/monkey\/src\/module-info.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"}]}