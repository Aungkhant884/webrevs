{"files":[{"patch":"@@ -31,1 +31,1 @@\n-import java.util.BitSet;\n+import java.util.ArrayList;\n@@ -172,12 +172,3 @@\n-        beginChange();\n-        BitSet bs = new BitSet(c.size());\n-        for (int i = 0; i < size(); ++i) {\n-            if (c.contains(get(i))) {\n-                bs.set(i);\n-            }\n-        }\n-        if (!bs.isEmpty()) {\n-            int cur = size();\n-            while ((cur = bs.previousSetBit(cur - 1)) >= 0) {\n-                remove(cur);\n-            }\n+        \/\/ Throw NullPointerException if c is null\n+        if (c.isEmpty() || this.isEmpty()) {\n+            return false;\n@@ -185,2 +176,1 @@\n-        endChange();\n-        return !bs.isEmpty();\n+        return remove(c, true);\n@@ -191,5 +181,30 @@\n-        beginChange();\n-        BitSet bs = new BitSet(c.size());\n-        for (int i = 0; i < size(); ++i) {\n-            if (!c.contains(get(i))) {\n-                bs.set(i);\n+        \/\/ Throw NullPointerException if c is null\n+        if (c.isEmpty()) {\n+            boolean retained = !this.isEmpty();\n+            if (retained) {\n+                clear();\n+            }\n+            return retained;\n+        }\n+        if (this.isEmpty()) {\n+            return false;\n+        }\n+        return remove(c, false);\n+    }\n+\n+    private boolean remove(Collection<?> c, boolean isRemoveAll) {\n+        List<Integer> runLengths = new ArrayList<>();\n+        {\n+            int run = 0;\n+            boolean flag = isRemoveAll;\n+            for (int i = size() - 1; i >= 0; i--) {\n+                if (c.contains(get(i)) == flag) {\n+                    run++;\n+                } else {\n+                    runLengths.add(run);\n+                    run = 1;\n+                    flag = !flag;\n+                }\n+            }\n+            if (run > 0 && flag == isRemoveAll) {\n+                runLengths.add(run);\n@@ -198,4 +213,15 @@\n-        if (!bs.isEmpty()) {\n-            int cur = size();\n-            while ((cur = bs.previousSetBit(cur - 1)) >= 0) {\n-                remove(cur);\n+        boolean flag = true;\n+        boolean removed = false;\n+        if (!runLengths.isEmpty()) {\n+            beginChange();\n+            int cur = size() - 1;\n+            for (int run:runLengths) {\n+                if (flag) {\n+                    for (int to = cur-run; cur > to; cur--) {\n+                        remove(cur);\n+                        removed = true;\n+                    }\n+                } else {\n+                    cur -= run;\n+                }\n+                flag = !flag;\n@@ -203,0 +229,2 @@\n+            endChange();\n+            return removed;\n@@ -204,2 +232,1 @@\n-        endChange();\n-        return !bs.isEmpty();\n+        return false;\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableListWrapper.java","additions":53,"deletions":26,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -0,0 +1,160 @@\n+\/*\n+ * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.collections;\n+\n+import javafx.collections.ObservableList;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.sun.javafx.collections.ObservableListWrapper;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ObservableListWrapperTest {\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testRemoveAll_Null() {\n+        ObservableList<Integer> list = new ObservableListWrapper<>(new ArrayList<>());\n+        list.removeAll((Collection)null);\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testRetainAll_Null() {\n+        ObservableList<Integer> list = new ObservableListWrapper<>(new ArrayList<>());\n+        list.retainAll((Collection)null);\n+    }\n+\n+    @Test\n+    public void testRemoveAll_Empty() {\n+        ObservableList<Integer> list = new ObservableListWrapper<>(new ArrayList<>());\n+        assertFalse(list.removeAll(Collections.EMPTY_LIST));\n+        assertFalse(list.removeAll(Collections.EMPTY_SET));\n+    }\n+\n+    @Test\n+    public void testRetainAll_Empty() {\n+        ObservableList<Integer> list = new ObservableListWrapper<>(new ArrayList<>());\n+        assertFalse(list.retainAll(Collections.EMPTY_LIST));\n+        assertFalse(list.retainAll(Collections.EMPTY_SET));\n+    }\n+\n+    @Test\n+    public void testRemoveAll_Args() {\n+        {\n+            ObservableList<Integer> list = new ObservableListWrapper<>(\n+                new ArrayList<>(Arrays.asList(1, 2, 3)));\n+            assertFalse(list.removeAll(0));\n+            assertEquals(Arrays.asList(1, 2, 3), list);\n+            assertTrue(list.removeAll(1));\n+            assertEquals(Arrays.asList(2, 3), list);\n+            assertFalse(list.removeAll(1));\n+            assertEquals(Arrays.asList(2, 3), list);\n+            assertTrue(list.removeAll(1, 2));\n+            assertEquals(Arrays.asList(3), list);\n+            assertTrue(list.removeAll(3));\n+            assertEquals(0, list.size());\n+            assertFalse(list.removeAll(Collections.EMPTY_SET));\n+            assertFalse(list.removeAll(1));\n+            assertFalse(list.removeAll(1, 2));\n+        }\n+        {\n+            ObservableList<Integer> list = new ObservableListWrapper<>(\n+                new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5)));\n+            assertTrue(list.removeAll(2, 4));\n+            assertEquals(Arrays.asList(1, 3, 5), list);\n+            assertTrue(list.removeAll(1, 5));\n+            assertEquals(Arrays.asList(3), list);\n+        }\n+        {\n+            ObservableList<Integer> list = new ObservableListWrapper<>(\n+                new ArrayList<>(Arrays.asList(11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)));\n+            assertTrue(list.removeAll(11));\n+            assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), list);\n+            assertTrue(list.removeAll(1, 2, 9, 10));\n+            assertEquals(Arrays.asList(3, 4, 5, 6, 7, 8), list);\n+            assertTrue(list.removeAll(5, 6));\n+            assertEquals(Arrays.asList(3, 4, 7, 8), list);\n+            assertTrue(list.removeAll(8, 7, 4, 3));\n+            assertEquals(0, list.size());\n+        }\n+    }\n+\n+    @Test\n+    public void testRetainAll_Args() {\n+        {\n+            ObservableList<Integer> list = new ObservableListWrapper<>(\n+                new ArrayList<>(Arrays.asList(1, 2, 3)));\n+            assertFalse(list.retainAll(0, 1, 2, 3));\n+            assertEquals(Arrays.asList(1, 2, 3), list);\n+            assertFalse(list.retainAll(1, 2, 3));\n+            assertEquals(Arrays.asList(1, 2, 3), list);\n+            assertTrue(list.retainAll(2, 3));\n+            assertEquals(Arrays.asList(2, 3), list);\n+            assertTrue(list.retainAll(3));\n+            assertEquals(Arrays.asList(3), list);\n+            assertTrue(list.retainAll(1,2));\n+            assertEquals(0, list.size());\n+            assertFalse(list.retainAll(Collections.EMPTY_SET));\n+            assertFalse(list.retainAll(2,3));\n+            assertFalse(list.retainAll(3));\n+\n+            list = new ObservableListWrapper<>(\n+                new ArrayList<>(Arrays.asList(1, 2, 3)));\n+            assertTrue(list.retainAll(Collections.EMPTY_SET));\n+            assertEquals(0, list.size());\n+        }\n+        {\n+            ObservableList<Integer> list = new ObservableListWrapper<>(\n+                new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5)));\n+            assertTrue(list.retainAll(1, 3, 5));\n+            assertEquals(Arrays.asList(1, 3, 5), list);\n+            assertTrue(list.retainAll(3));\n+            assertEquals(Arrays.asList(3), list);\n+        }\n+        {\n+            ObservableList<Integer> list = new ObservableListWrapper<>(\n+                new ArrayList<>(Arrays.asList(11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)));\n+            assertTrue(list.retainAll(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n+            assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), list);\n+            assertTrue(list.retainAll(3, 4, 5, 6, 7, 8));\n+            assertEquals(Arrays.asList(3, 4, 5, 6, 7, 8), list);\n+            assertTrue(list.retainAll(3, 4, 7, 8));\n+            assertEquals(Arrays.asList(3, 4, 7, 8), list);\n+            assertFalse(list.retainAll(3, 4, 7, 8));\n+            assertEquals(Arrays.asList(3, 4, 7, 8), list);\n+            assertTrue(list.retainAll(0));\n+            assertEquals(0, list.size());\n+        }\n+    }\n+}\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ObservableListWrapperTest.java","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"},{"patch":"@@ -840,0 +840,16 @@\n+    @Test public void test_rt35857Back() {\n+        ObservableList<String> fxList = FXCollections.observableArrayList(\"A\", \"B\", \"C\");\n+        final ListView<String> listView = new ListView<String>(fxList);\n+\n+        listView.getSelectionModel().select(2);\n+\n+        ObservableList<String> selectedItems = listView.getSelectionModel().getSelectedItems();\n+        assertEquals(1, selectedItems.size());\n+        assertEquals(\"C\", selectedItems.get(0));\n+\n+        listView.getItems().removeAll(selectedItems);\n+        assertEquals(2, fxList.size());\n+        assertEquals(\"A\", fxList.get(0));\n+        assertEquals(\"B\", fxList.get(1));\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewTest.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}