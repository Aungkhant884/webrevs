{"files":[{"patch":"@@ -172,0 +172,4 @@\n+        \/\/ Throw NullPointerException if c is null\n+        if (c.isEmpty() || this.isEmpty()) {\n+            return false;\n+        }\n@@ -173,2 +177,2 @@\n-        BitSet bs = new BitSet(c.size());\n-        for (int i = 0; i < size(); ++i) {\n+        boolean removed = false;\n+        for (int i = size()-1; i>=0; i--) {\n@@ -176,7 +180,2 @@\n-                bs.set(i);\n-            }\n-        }\n-        if (!bs.isEmpty()) {\n-            int cur = size();\n-            while ((cur = bs.previousSetBit(cur - 1)) >= 0) {\n-                remove(cur);\n+                remove(i);\n+                removed = true;\n@@ -186,1 +185,1 @@\n-        return !bs.isEmpty();\n+        return removed;\n@@ -191,5 +190,5 @@\n-        beginChange();\n-        BitSet bs = new BitSet(c.size());\n-        for (int i = 0; i < size(); ++i) {\n-            if (!c.contains(get(i))) {\n-                bs.set(i);\n+        \/\/ Throw NullPointerException if c is null\n+        if (c.isEmpty()) {\n+            boolean retained = !this.isEmpty();\n+            if (retained) {\n+                clear();\n@@ -197,0 +196,4 @@\n+            return retained;\n+        }\n+        if (this.isEmpty()) {\n+            return false;\n@@ -198,4 +201,6 @@\n-        if (!bs.isEmpty()) {\n-            int cur = size();\n-            while ((cur = bs.previousSetBit(cur - 1)) >= 0) {\n-                remove(cur);\n+        boolean retained = false;\n+        beginChange();\n+        for (int i = size()-1; i>=0; i--) {\n+            if (!c.contains(get(i))) {\n+                remove(i);\n+                retained = true;\n@@ -205,1 +210,1 @@\n-        return !bs.isEmpty();\n+        return retained;\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableListWrapper.java","additions":25,"deletions":20,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.collections;\n+\n+import javafx.collections.ObservableList;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.sun.javafx.collections.ObservableListWrapper;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ObservableListWrapperTest {\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testRemoveAll_Null() {\n+        ObservableList<Integer> list = new ObservableListWrapper<>(new ArrayList<>());\n+        list.removeAll((Collection)null);\n+    }\n+    \n+    @Test(expected = NullPointerException.class)\n+    public void testRetainAll_Null() {\n+        ObservableList<Integer> list = new ObservableListWrapper<>(new ArrayList<>());\n+        list.retainAll((Collection)null);\n+    }\n+\n+    @Test\n+    public void testRemoveAll_Empty() {\n+        ObservableList<Integer> list = new ObservableListWrapper<>(new ArrayList<>());\n+        assertFalse(list.removeAll(Collections.EMPTY_LIST));\n+        assertFalse(list.removeAll(Collections.EMPTY_SET));\n+    }\n+\n+    @Test\n+    public void testRetainAll_Empty() {\n+        ObservableList<Integer> list = new ObservableListWrapper<>(new ArrayList<>());\n+        assertFalse(list.retainAll(Collections.EMPTY_LIST));\n+        assertFalse(list.retainAll(Collections.EMPTY_SET));\n+    }\n+\n+    @Test\n+    public void testRemoveAll_Args() {\n+        ObservableList<Integer> list = new ObservableListWrapper<>(new ArrayList<>(Arrays.asList(1, 2, 3)));\n+        assertFalse(list.removeAll(0));\n+        assertEquals(3, list.size());\n+        assertTrue(list.removeAll(1));\n+        assertEquals(2, list.size());\n+        assertFalse(list.removeAll(1));\n+        assertEquals(2, list.size());\n+        assertTrue(list.removeAll(1, 2));\n+        assertEquals(1, list.size());\n+        assertTrue(list.removeAll(3));\n+        assertEquals(0, list.size());\n+        assertFalse(list.removeAll(Collections.EMPTY_SET));\n+        assertFalse(list.removeAll(1));\n+        assertFalse(list.removeAll(1, 2));\n+    }\n+\n+    @Test\n+    public void testRetainAll_Args() {\n+        ObservableList<Integer> list = new ObservableListWrapper<>(new ArrayList<>(Arrays.asList(1, 2, 3)));\n+        assertFalse(list.retainAll(0, 1, 2, 3));\n+        assertEquals(3, list.size());\n+        assertFalse(list.retainAll(1, 2, 3));\n+        assertEquals(3, list.size());\n+        assertTrue(list.retainAll(2, 3));\n+        assertEquals(2, list.size());\n+        assertTrue(list.retainAll(3));\n+        assertEquals(1, list.size());\n+        assertTrue(list.retainAll(1,2));\n+        assertEquals(0, list.size());\n+        assertFalse(list.retainAll(Collections.EMPTY_SET));\n+        assertFalse(list.retainAll(2,3));\n+        assertFalse(list.retainAll(3));\n+\n+        list = new ObservableListWrapper<>(new ArrayList<>(Arrays.asList(1, 2, 3)));\n+        assertTrue(list.retainAll(Collections.EMPTY_SET));\n+        assertEquals(0, list.size());\n+    }\n+}\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ObservableListWrapperTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"}]}