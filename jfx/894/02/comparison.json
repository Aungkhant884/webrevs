{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -601,1 +601,0 @@\n-        boolean isConstrainedResize = false;\n@@ -604,6 +603,1 @@\n-        if (columnResizePolicy != null) {\n-            isConstrainedResize =\n-                    tableSkin instanceof TableViewSkin ? TableView.CONSTRAINED_RESIZE_POLICY.equals(columnResizePolicy) :\n-                    tableSkin instanceof TreeTableViewSkin ? TreeTableView.CONSTRAINED_RESIZE_POLICY.equals(columnResizePolicy) :\n-                    false;\n-        }\n+        boolean isConstrainedResize = TableSkinUtils.isConstrainedResizePolicy(columnResizePolicy);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/NestedTableColumnHeader.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -693,1 +693,1 @@\n-        if (tv.getColumnResizePolicy() == TableView.CONSTRAINED_RESIZE_POLICY && tv.getWidth() > 0) {\n+        if (TableSkinUtils.isConstrainedResizePolicy(tv.getColumnResizePolicy()) && tv.getWidth() > 0) {\n@@ -788,1 +788,1 @@\n-        if (ttv.getColumnResizePolicy() == TreeTableView.CONSTRAINED_RESIZE_POLICY && ttv.getWidth() > 0) {\n+        if (TableSkinUtils.isConstrainedResizePolicy(ttv.getColumnResizePolicy()) && ttv.getWidth() > 0) {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableColumnHeader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -211,0 +211,6 @@\n+\n+    \/** returns true if the column resize policy is constrained *\/\n+    public static boolean isConstrainedResizePolicy(Callback<? extends ResizeFeaturesBase,Boolean> x) {\n+        return (x == TableView.CONSTRAINED_RESIZE_POLICY) ||\n+               (x == TreeTableView.CONSTRAINED_RESIZE_POLICY);\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableSkinUtils.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -339,0 +339,4 @@\n+        registerChangeListener(TableSkinUtils.columnResizePolicyProperty(this), (v) -> {\n+            updateSuppressBreadthBar();\n+        });\n+        updateSuppressBreadthBar();\n@@ -894,0 +898,6 @@\n+    void updateSuppressBreadthBar() {\n+        Callback<ResizeFeaturesBase,Boolean> p = TableSkinUtils.columnResizePolicyProperty(this).get();\n+        boolean suppress = TableSkinUtils.isConstrainedResizePolicy(p);\n+        flow.setSuppressBreadthBar(suppress);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableViewSkinBase.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -307,1 +307,1 @@\n-\n+    private boolean suppressBreadthBar;\n@@ -2380,0 +2380,7 @@\n+    \/**\n+     * Suppresses the breadth bar from appearing.\n+     *\/\n+    void setSuppressBreadthBar(boolean suppress) {\n+        this.suppressBreadthBar = suppress;\n+    }\n+\n@@ -2412,2 +2419,1 @@\n-            \/\/ second conditional removed for RT-36669.\n-            final boolean breadthBarVisible = (maxPrefBreadth > viewportBreadth);\/\/ || (needLengthBar && maxPrefBreadth > (viewportBreadth - lengthBarBreadth));\n+            final boolean breadthBarVisible = !suppressBreadthBar && (maxPrefBreadth > viewportBreadth);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/VirtualFlow.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -5947,0 +5947,28 @@\n+\n+    \/\/ See JDK-8089280\n+    @Test\n+    public void testSuppressHorizontalScrollBar() {\n+        TableView<String> table = new TableView<>();\n+        for (int i = 0; i < 10; i++) {\n+            final TableColumn<String,String> c = new TableColumn<>(\"C\" + i);\n+            c.setCellValueFactory(value -> new SimpleStringProperty(value.getValue()));\n+            c.setMinWidth(200); \/\/ caused HSB before the fix\n+            table.getColumns().add(c);\n+        }\n+\n+        for (int i = 0; i < 10; i++) {\n+            table.getItems().add(\"\");\n+        }\n+\n+        stageLoader = new StageLoader(new Scene(table, 50, 50));\n+\n+        ScrollBar hbar = VirtualFlowTestUtils.getVirtualFlowHorizontalScrollbar(table);\n+        assertTrue(hbar.isVisible());\n+\n+        table.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        hbar = VirtualFlowTestUtils.getVirtualFlowHorizontalScrollbar(table);\n+        assertFalse(hbar.isVisible()); \/\/ used to fail here\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewTest.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import com.sun.javafx.scene.control.TableColumnBaseHelper;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n@@ -32,1 +30,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertArrayEquals;\n@@ -34,1 +32,8 @@\n-\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n@@ -43,11 +48,0 @@\n-\n-import com.sun.javafx.scene.control.behavior.TreeTableCellBehavior;\n-import javafx.beans.property.ReadOnlyIntegerWrapper;\n-import javafx.collections.transformation.FilteredList;\n-import javafx.scene.control.ScrollBar;\n-import javafx.scene.control.SelectionModel;\n-import javafx.scene.control.Slider;\n-import javafx.scene.control.TableColumn;\n-import javafx.scene.control.TableView;\n-import javafx.scene.control.skin.TableColumnHeader;\n-import javafx.scene.layout.Region;\n@@ -55,7 +49,8 @@\n-import test.javafx.collections.MockListObserver;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n-import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n-import javafx.scene.control.skin.TreeTableCellSkin;\n-import test.com.sun.javafx.scene.control.test.Data;\n-\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import com.sun.javafx.scene.control.TableColumnBaseHelper;\n+import com.sun.javafx.scene.control.TableColumnComparatorBase.TreeTableColumnComparator;\n+import com.sun.javafx.scene.control.VirtualScrollBar;\n+import com.sun.javafx.scene.control.behavior.TreeTableCellBehavior;\n+import com.sun.javafx.tk.Toolkit;\n@@ -69,0 +64,1 @@\n+import javafx.beans.property.ReadOnlyIntegerWrapper;\n@@ -76,0 +72,1 @@\n+import javafx.collections.transformation.FilteredList;\n@@ -80,24 +77,0 @@\n-import javafx.scene.control.TreeTableView.TreeTableViewFocusModel;\n-import javafx.scene.control.cell.*;\n-import javafx.scene.image.ImageView;\n-import javafx.scene.input.KeyCode;\n-import javafx.scene.layout.StackPane;\n-import javafx.scene.layout.VBox;\n-import javafx.scene.paint.Color;\n-import javafx.scene.shape.Circle;\n-import javafx.scene.shape.Rectangle;\n-import javafx.stage.Stage;\n-import javafx.util.Callback;\n-\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n-import com.sun.javafx.scene.control.TableColumnComparatorBase.TreeTableColumnComparator;\n-import test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils;\n-import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n-import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n-import com.sun.javafx.scene.control.VirtualScrollBar;\n-import test.com.sun.javafx.scene.control.test.Person;\n-import test.com.sun.javafx.scene.control.test.RT_22463_Person;\n-import com.sun.javafx.tk.Toolkit;\n@@ -110,0 +83,1 @@\n+import javafx.scene.control.ScrollBar;\n@@ -111,0 +85,2 @@\n+import javafx.scene.control.SelectionModel;\n+import javafx.scene.control.Slider;\n@@ -122,0 +98,1 @@\n+import javafx.scene.control.TreeTableView.TreeTableViewFocusModel;\n@@ -124,0 +101,26 @@\n+import javafx.scene.control.cell.CheckBoxTreeTableCell;\n+import javafx.scene.control.cell.PropertyValueFactory;\n+import javafx.scene.control.cell.TextFieldTreeTableCell;\n+import javafx.scene.control.cell.TreeItemPropertyValueFactory;\n+import javafx.scene.control.skin.TableColumnHeader;\n+import javafx.scene.control.skin.TreeTableCellSkin;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Circle;\n+import javafx.scene.shape.Rectangle;\n+import javafx.stage.Stage;\n+import javafx.util.Callback;\n+import test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n+import test.com.sun.javafx.scene.control.test.Data;\n+import test.com.sun.javafx.scene.control.test.Person;\n+import test.com.sun.javafx.scene.control.test.RT_22463_Person;\n+import test.javafx.collections.MockListObserver;\n@@ -7094,0 +7097,31 @@\n+\n+    \/\/ See JDK-8089280\n+    @Test\n+    public void testSuppressHorizontalScrollBar() {\n+        TreeItem<String> root = new TreeItem<>();\n+        root.setExpanded(true);\n+        for (int i = 0; i < 10; i++) {\n+            root.getChildren().add(new TreeItem<>(\"\"));\n+        }\n+\n+        TreeTableView<String> table = new TreeTableView<>();\n+        for (int i = 0; i < 10; i++) {\n+            TreeTableColumn<String,String> c = new TreeTableColumn<>(\"C\" + i);\n+            c.setCellValueFactory(value -> new SimpleStringProperty(value.getValue().getValue()));\n+            table.getColumns().add(c);\n+        }\n+        table.setRoot(root);\n+        table.setShowRoot(false);\n+\n+        stageLoader = new StageLoader(new Scene(table, 50, 50));\n+\n+        ScrollBar hbar = VirtualFlowTestUtils.getVirtualFlowHorizontalScrollbar(table);\n+        assertTrue(hbar.isVisible());\n+\n+        table.setColumnResizePolicy(TreeTableView.CONSTRAINED_RESIZE_POLICY);\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        hbar = VirtualFlowTestUtils.getVirtualFlowHorizontalScrollbar(table);\n+        assertFalse(hbar.isVisible()); \/\/ used to fail here\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewTest.java","additions":80,"deletions":46,"binary":false,"changes":126,"status":"modified"}]}