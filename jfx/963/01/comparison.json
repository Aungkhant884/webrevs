{"files":[{"patch":"@@ -145,0 +145,1 @@\n+                updateDisplayNode();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/DatePickerSkin.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,184 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.scene;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.time.LocalDate;\n+\n+import javafx.application.Application;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Alert.AlertType;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.DatePicker;\n+import javafx.scene.input.MouseButton;\n+import javafx.application.Platform;\n+import javafx.scene.robot.Robot;\n+import javafx.scene.Scene;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import test.util.Util;\n+\n+\/*\n+ * Test for verifying DatePicker update on closing the Alert dialog.\n+ *\n+ * There is 1 test in this file.\n+ * Steps for testDatePickerUpdateOnAlertClose()\n+ * 1. Create a alert dialog and add date picker to it.\n+ * 2. Add button to scene and show alert dialog on button click.\n+ * 3. Click on date picker and select a date from popup.\n+ * 4. Verify that selected date is updated in the date picker.\n+ *\/\n+public class DatePickerUpdateOnAlertCloseTest {\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n+    static CountDownLatch onDatePickerShownLatch = new CountDownLatch(1);\n+    static CountDownLatch onAlertShownLatch = new CountDownLatch(1);\n+    static Robot robot;\n+\n+    static volatile Stage stage;\n+    static volatile Scene scene;\n+    static Button button;\n+\n+    static final int SCENE_WIDTH = 250;\n+    static final int SCENE_HEIGHT = SCENE_WIDTH;\n+    static final int Y_FACTOR = 5;\n+\n+    DatePicker datePicker;\n+    Alert dialog;\n+\n+    private void mouseClick(double x, double y) {\n+        Util.runAndWait(() -> {\n+            robot.mouseMove((int) (scene.getWindow().getX() + scene.getX() + x),\n+                                (int) (scene.getWindow().getY() + scene.getY() + y));\n+            robot.mousePress(MouseButton.PRIMARY);\n+            robot.mouseRelease(MouseButton.PRIMARY);\n+        });\n+    }\n+\n+    private void mouseClickOnAlertDialog(double x, double y) {\n+        Util.runAndWait(() -> {\n+            robot.mouseMove((int) (dialog.getX() + x), (int) (dialog.getY() + y));\n+            robot.mousePress(MouseButton.PRIMARY);\n+            robot.mouseRelease(MouseButton.PRIMARY);\n+        });\n+    }\n+\n+    private void selectDatePicker() throws Exception {\n+        mouseClickOnAlertDialog(datePicker.getLayoutX() + datePicker.getWidth() - 15,\n+                                    datePicker.getLayoutY() + datePicker.getHeight() \/ 2);\n+        Thread.sleep(400); \/\/ Wait for DatePicker popup to display.\n+        Util.waitForLatch(onDatePickerShownLatch, 5, \"Failed to show DatePicker popup.\");\n+    }\n+\n+    private void showAlertDialog() throws Exception {\n+        mouseClick(button.getLayoutX() + button.getWidth() \/ 2,\n+                    button.getLayoutY() + button.getHeight() \/ 2);\n+        Thread.sleep(400); \/\/ Wait for Alert dialog to display.\n+        Util.waitForLatch(onAlertShownLatch, 5, \"Failed to show Alert dialog.\");\n+    }\n+\n+    @Test\n+    public void testDatePickerUpdateOnAlertClose() throws Exception {\n+        Thread.sleep(1000); \/\/ Wait for stage to layout\n+\n+        showAlertDialog();\n+        selectDatePicker();\n+\n+        \/\/ Select date from date picker popup\n+        mouseClick(datePicker.getLayoutX() + datePicker.getWidth() \/ 2,\n+                    datePicker.getLayoutY() + datePicker.getHeight() * Y_FACTOR);\n+        Thread.sleep(400); \/\/ Wait for date to be selected.\n+\n+        Assert.assertFalse(LocalDate.now().isEqual(datePicker.getValue()));\n+    }\n+\n+    @After\n+    public void resetUI() {\n+        Util.runAndWait(() -> {\n+            datePicker.setOnShown(null);\n+            datePicker.setOnAction(null);\n+        });\n+    }\n+\n+    @Before\n+    public void setupUI() {\n+        Util.runAndWait(() -> {\n+            datePicker = new DatePicker(LocalDate.now());\n+            datePicker.setOnShown(event -> {\n+                onDatePickerShownLatch.countDown();\n+            });\n+            datePicker.valueProperty().addListener(event -> {\n+                dialog.close();\n+            });\n+\n+            dialog = new Alert(AlertType.INFORMATION);\n+            dialog.initStyle(StageStyle.UNDECORATED);\n+            dialog.setOnShown(event -> {\n+                onAlertShownLatch.countDown();\n+            });\n+\n+            button.setOnAction(event -> {\n+                dialog.initOwner(stage);\n+                dialog.getDialogPane().setContent(datePicker);\n+                dialog.show();\n+            });\n+        });\n+    }\n+\n+    @BeforeClass\n+    public static void initFX() throws Exception {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void exit() {\n+        Util.shutdown(stage);\n+    }\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) {\n+            robot = new Robot();\n+            stage = primaryStage;\n+\n+            button = new Button(\"Show dialog\");\n+            scene = new Scene(button, SCENE_WIDTH, SCENE_HEIGHT);\n+\n+            stage.setScene(scene);\n+            stage.initStyle(StageStyle.UNDECORATED);\n+            stage.setAlwaysOnTop(true);\n+            stage.setOnShown(event -> Platform.runLater(startupLatch::countDown));\n+            stage.show();\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/DatePickerUpdateOnAlertCloseTest.java","additions":184,"deletions":0,"binary":false,"changes":184,"status":"added"}]}