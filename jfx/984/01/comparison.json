{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -170,23 +170,0 @@\n-void GlassWindow::updateMinMaxSize(RECT &windowRect)\n-{\n-    if (m_minSize.x >= 0) {\n-        \/\/ min size has been set\n-        if (windowRect.right - windowRect.left < m_minSize.x) {\n-            windowRect.right = windowRect.left + m_minSize.x;\n-        }\n-        if (windowRect.bottom - windowRect.top < m_minSize.y) {\n-            windowRect.bottom = windowRect.top + m_minSize.y;\n-        }\n-    }\n-    if (m_maxSize.x >= 0) {\n-        \/\/ max size has been set\n-        if (windowRect.right - windowRect.left > m_maxSize.x) {\n-            windowRect.right = windowRect.left + m_maxSize.x;\n-        }\n-        if (windowRect.bottom - windowRect.top > m_maxSize.y) {\n-            windowRect.bottom = windowRect.top + m_maxSize.y;\n-        }\n-    }\n-\n-}\n-\n@@ -1542,0 +1519,7 @@\n+        POINT minSize = pWindow->getMinSize();\n+        POINT maxSize = pWindow->getMaxSize();\n+        if (minSize.x >= 0) newW = max(newW, minSize.x);\n+        if (minSize.y >= 0) newH = max(newH, minSize.y);\n+        if (maxSize.x >= 0) newW = min(newW, maxSize.x);\n+        if (maxSize.y >= 0) newH = min(newH, maxSize.y);\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassWindow.cpp","additions":8,"deletions":24,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,2 @@\n+    POINT getMinSize() { return m_minSize; }\n+    POINT getMaxSize() { return m_maxSize; }\n@@ -48,2 +50,0 @@\n-    \/\/ ensures the rect comply min\/max size restrictions (if set)\n-    void updateMinMaxSize(RECT &windowRect);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassWindow.h","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.glass.ui;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import test.util.Util;\n+import javafx.application.Application;\n+import javafx.geometry.Dimension2D;\n+import javafx.scene.Scene;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.shape.Rectangle;\n+import javafx.stage.Stage;\n+import java.util.concurrent.CountDownLatch;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class InitialWindowSizeTest {\n+\n+    private static final CountDownLatch startupLatch = new CountDownLatch(1);\n+    private static volatile Dimension2D showingSize, shownSize;\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage stage) {\n+            stage.setMinWidth(300);\n+            stage.setMinHeight(200);\n+            stage.setScene(new Scene(new StackPane(new Rectangle(20, 20))));\n+            stage.setOnShowing(event -> showingSize = new Dimension2D(stage.getWidth(), stage.getHeight()));\n+            stage.setOnShown(event -> {\n+                shownSize = new Dimension2D(stage.getWidth(), stage.getHeight());\n+                startupLatch.countDown();\n+            });\n+            stage.show();\n+        }\n+    }\n+\n+    @BeforeAll\n+    public static void setup() throws Exception {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterAll\n+    public static void shutdown() {\n+        Util.shutdown();\n+    }\n+\n+    @Test\n+    public void testInitialWindowSize() {\n+        Util.waitForLatch(startupLatch, 10, \"startupLatch\");\n+\n+        assertTrue(Double.isNaN(showingSize.getWidth()), \"width = \" + showingSize.getWidth() + \", expected = NaN\");\n+        assertTrue(Double.isNaN(showingSize.getHeight()), \"height = \" + showingSize.getHeight() + \", expected = NaN\");\n+        assertEquals(300.0, shownSize.getWidth(), 0.001);\n+        assertEquals(200.0, shownSize.getHeight(), 0.001);\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/InitialWindowSizeTest.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}