{"files":[{"patch":"@@ -72,1 +72,1 @@\n-    \/** A multiplier for teh Y values that we store for each series, it is used to animate in a new series *\/\n+    \/** A multiplier for the Y values that we store for each series, it is used to animate in a new series *\/\n@@ -74,0 +74,1 @@\n+    private Timeline timeline;\n@@ -413,2 +414,2 @@\n-            Timeline tl = new Timeline(createSeriesRemoveTimeLine(series, 400));\n-            tl.play();\n+            timeline = new Timeline(createSeriesRemoveTimeLine(series, 400));\n+            timeline.play();\n@@ -557,0 +558,12 @@\n+    \/** {@inheritDoc} *\/\n+    @Override void seriesBeingRemovedIsAdded(Series<X,Y> series) {\n+        if (timeline != null) {\n+            timeline.setOnFinished(null);\n+            timeline.stop();\n+            timeline = null;\n+            getPlotChildren().remove(series.getNode());\n+            for (Data<X,Y> d:series.getData()) getPlotChildren().remove(d.getNode());\n+            removeSeriesFromDisplay(series);\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/chart\/AreaChart.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -54,0 +54,2 @@\n+    private ParallelTransition parallelTransition;\n+\n@@ -198,2 +200,2 @@\n-            ParallelTransition pt = new ParallelTransition();\n-            pt.setOnFinished(event -> {\n+            parallelTransition = new ParallelTransition();\n+            parallelTransition.setOnFinished(event -> {\n@@ -211,1 +213,1 @@\n-                pt.getChildren().add(ft);\n+                parallelTransition.getChildren().add(ft);\n@@ -213,1 +215,1 @@\n-            pt.play();\n+            parallelTransition.play();\n@@ -224,0 +226,12 @@\n+    \/** {@inheritDoc} *\/\n+    @Override void seriesBeingRemovedIsAdded(Series<X,Y> series) {\n+        if (parallelTransition != null) {\n+            parallelTransition.setOnFinished(null);\n+            parallelTransition.stop();\n+            parallelTransition = null;\n+            getPlotChildren().remove(series.getNode());\n+            for (Data<X,Y> d:series.getData()) getPlotChildren().remove(d.getNode());\n+            removeSeriesFromDisplay(series);\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/chart\/BubbleChart.java","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -495,0 +495,1 @@\n+            seriesRemoveTimeline = null;\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/chart\/LineChart.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+    private ParallelTransition parallelTransition;\n+\n@@ -141,2 +143,2 @@\n-            ParallelTransition pt = new ParallelTransition();\n-            pt.setOnFinished(event -> {\n+            parallelTransition = new ParallelTransition();\n+            parallelTransition.setOnFinished(event -> {\n@@ -154,1 +156,1 @@\n-                pt.getChildren().add(ft);\n+                parallelTransition.getChildren().add(ft);\n@@ -156,1 +158,1 @@\n-            pt.play();\n+            parallelTransition.play();\n@@ -197,0 +199,12 @@\n+\n+    \/** {@inheritDoc} *\/\n+    @Override void seriesBeingRemovedIsAdded(Series<X,Y> series) {\n+        if (parallelTransition != null) {\n+            parallelTransition.setOnFinished(null);\n+            parallelTransition.stop();\n+            parallelTransition = null;\n+            getPlotChildren().remove(series.getNode());\n+            for (Data<X,Y> d:series.getData()) getPlotChildren().remove(d.getNode());\n+            removeSeriesFromDisplay(series);\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/chart\/ScatterChart.java","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+    private Timeline timeline;\n@@ -392,2 +393,2 @@\n-            Timeline tl = new Timeline(createSeriesRemoveTimeLine(series, 400));\n-            tl.play();\n+            timeline = new Timeline(createSeriesRemoveTimeLine(series, 400));\n+            timeline.play();\n@@ -725,0 +726,12 @@\n+    \/** {@inheritDoc} *\/\n+    @Override void seriesBeingRemovedIsAdded(Series<X,Y> series) {\n+        if (timeline != null) {\n+            timeline.setOnFinished(null);\n+            timeline.stop();\n+            timeline = null;\n+            getPlotChildren().remove(series.getNode());\n+            for (Data<X,Y> d:series.getData()) getPlotChildren().remove(d.getNode());\n+            removeSeriesFromDisplay(series);\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/chart\/StackedAreaChart.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+    private ParallelTransition parallelTransition;\n@@ -306,2 +307,2 @@\n-            ParallelTransition pt = new ParallelTransition();\n-            pt.setOnFinished(event -> {\n+            parallelTransition = new ParallelTransition();\n+            parallelTransition.setOnFinished(event -> {\n@@ -316,1 +317,1 @@\n-                    pt.getChildren().add(t);\n+                    parallelTransition.getChildren().add(t);\n@@ -326,1 +327,1 @@\n-                    pt.getChildren().add(ft);\n+                    parallelTransition.getChildren().add(ft);\n@@ -329,1 +330,1 @@\n-            pt.play();\n+            parallelTransition.play();\n@@ -502,1 +503,0 @@\n-            item.setYValue(getYAxis().toRealValue(getYAxis().getZeroPosition()));\n@@ -548,0 +548,12 @@\n+    \/** {@inheritDoc} *\/\n+    @Override void seriesBeingRemovedIsAdded(Series<X,Y> series) {\n+        if (parallelTransition != null) {\n+            parallelTransition.setOnFinished(null);\n+            parallelTransition.stop();\n+            parallelTransition = null;\n+            getPlotChildren().remove(series.getNode());\n+            for (Data<X,Y> d:series.getData()) getPlotChildren().remove(d.getNode());\n+            removeSeriesFromDisplay(series);\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/chart\/StackedBarChart.java","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-                if (!dupCheck.add(d)) {\n+                if (!dupCheck.add(d) && !d.setToRemove) {\n@@ -145,2 +145,0 @@\n-                \/\/ add new listener to data\n-                s.setChart(XYChart.this);\n@@ -151,0 +149,2 @@\n+                \/\/ add new listener to data\n+                s.setChart(XYChart.this);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/chart\/XYChart.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,308 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.collections.ObservableList;\n+import javafx.event.ActionEvent;\n+import javafx.event.EventHandler;\n+import javafx.scene.chart.AreaChart;\n+import javafx.scene.chart.BubbleChart;\n+import javafx.scene.chart.CategoryAxis;\n+import javafx.scene.chart.LineChart;\n+import javafx.scene.chart.NumberAxis;\n+import javafx.scene.chart.ScatterChart;\n+import javafx.scene.chart.StackedAreaChart;\n+import javafx.scene.chart.StackedBarChart;\n+import javafx.scene.chart.XYChart;\n+import javafx.scene.chart.XYChart.Series;\n+import javafx.scene.control.Button;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.Scene;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import test.util.Util;\n+\n+public class XYChartExceptionOnAddingRemovedSeriesTest {\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n+    static CountDownLatch lineSeriesLatch = new CountDownLatch(1);\n+    static CountDownLatch areaChartLatch = new CountDownLatch(1);\n+    static CountDownLatch bubbleChartLatch = new CountDownLatch(1);\n+    static CountDownLatch scatterChartLatch = new CountDownLatch(1);\n+    static CountDownLatch stackedAreaChartLatch = new CountDownLatch(1);\n+    static CountDownLatch stackedBarChartLatch = new CountDownLatch(1);\n+    static VBox vBox;\n+\n+    static volatile Stage stage;\n+    static volatile Scene scene;\n+    static volatile Throwable exception;\n+\n+    static final int SCENE_WIDTH = 250;\n+    static final int SCENE_HEIGHT = SCENE_WIDTH;\n+\n+    static NumberAxis xAxis;\n+    static NumberAxis yAxis;\n+    static CategoryAxis categoryAxis;\n+    static LineChart<Number,Number> lineChart;\n+    static AreaChart<Number,Number> areaChart;\n+    static BubbleChart<Number,Number> bubbleChart;\n+    static ScatterChart<Number,Number> scatterChart;\n+    static StackedAreaChart<Number,Number> stackedAreaChart;\n+    static StackedBarChart<String, Number> stackedBarChart;\n+    static XYChart.Series seriesLineChart;\n+    static XYChart.Series seriesAreaChart;\n+    static XYChart.Series seriesBubbleChart;\n+    static XYChart.Series seriesScatterChart;\n+    static XYChart.Series seriesStackedAreaChart;\n+    static XYChart.Series seriesStackedBarChart;\n+\n+    @Test\n+    public void testLineChartExceptionOnAddingRemovedSeries() throws Throwable {\n+        Util.waitForLatch(startupLatch, 5, \"Timeout waiting for stage to layout.\");\n+\n+        Assert.assertEquals(1, lineChart.getData().size());\n+\n+        lineSeriesLatch.countDown();\n+        addRemovedSeriesLineChart();\n+        Util.waitForLatch(lineSeriesLatch, 5, \"Timeout waiting for series to be added.\");\n+\n+        Assert.assertEquals(1, lineChart.getData().size());\n+    }\n+\n+    private void addRemovedSeriesLineChart() {\n+        Util.runAndWait(() -> {\n+            vBox.getChildren().clear();\n+            vBox.getChildren().add(lineChart);\n+            Series<Number, Number> removedSeries = lineChart.getData().remove(0);\n+            Assert.assertEquals(0, lineChart.getData().size());\n+            lineChart.getData().add(removedSeries);\n+\n+        });\n+    }\n+\n+    @Test\n+    public void testAreaChartExceptionOnAddingRemovedSeries() throws Throwable {\n+        Assert.assertEquals(1, areaChart.getData().size());\n+\n+        areaChartLatch.countDown();\n+        addRemovedSeriesAreaChart();\n+        Util.waitForLatch(areaChartLatch, 5, \"Timeout waiting for series to be added.\");\n+\n+        Assert.assertEquals(1, areaChart.getData().size());\n+    }\n+\n+    private void addRemovedSeriesAreaChart() {\n+        Util.runAndWait(() -> {\n+            vBox.getChildren().clear();\n+            vBox.getChildren().add(areaChart);\n+            Series<Number, Number> removedSeries = areaChart.getData().remove(0);\n+            Assert.assertEquals(0, areaChart.getData().size());\n+            areaChart.getData().add(removedSeries);\n+        });\n+    }\n+\n+    @Test\n+    public void testBubbleChartExceptionOnAddingRemovedSeries() throws Throwable {\n+        Assert.assertEquals(1, bubbleChart.getData().size());\n+\n+        bubbleChartLatch.countDown();\n+        addRemovedSeriesBubbleChart();\n+        Util.waitForLatch(bubbleChartLatch, 5, \"Timeout waiting for series to be added.\");\n+\n+        Assert.assertEquals(1, bubbleChart.getData().size());\n+    }\n+\n+    private void addRemovedSeriesBubbleChart() {\n+        Util.runAndWait(() -> {\n+            vBox.getChildren().clear();\n+            vBox.getChildren().add(bubbleChart);\n+            Series<Number, Number> removedSeries = bubbleChart.getData().remove(0);\n+            Assert.assertEquals(0, bubbleChart.getData().size());\n+            bubbleChart.getData().add(removedSeries);\n+        });\n+    }\n+\n+    @Test\n+    public void testScatterChartExceptionOnAddingRemovedSeries() throws Throwable {\n+        Assert.assertEquals(1, scatterChart.getData().size());\n+\n+        scatterChartLatch.countDown();\n+        addRemovedSeriesScatterChart();\n+        Util.waitForLatch(scatterChartLatch, 5, \"Timeout waiting for series to be added.\");\n+\n+        Assert.assertEquals(1, scatterChart.getData().size());\n+    }\n+\n+    private void addRemovedSeriesScatterChart() {\n+        Util.runAndWait(() -> {\n+            vBox.getChildren().clear();\n+            vBox.getChildren().add(scatterChart);\n+            Series<Number, Number> removedSeries = scatterChart.getData().remove(0);\n+            Assert.assertEquals(0, scatterChart.getData().size());\n+            scatterChart.getData().add(removedSeries);\n+        });\n+    }\n+\n+    @Test\n+    public void testStackedAreaChartExceptionOnAddingRemovedSeries() throws Throwable {\n+        Assert.assertEquals(1, stackedAreaChart.getData().size());\n+\n+        stackedAreaChartLatch.countDown();\n+        addRemovedSeriesStackedAreaChart();\n+        Util.waitForLatch(stackedAreaChartLatch, 5, \"Timeout waiting for series to be added.\");\n+\n+        Assert.assertEquals(1, stackedAreaChart.getData().size());\n+    }\n+\n+    private void addRemovedSeriesStackedAreaChart() {\n+        Util.runAndWait(() -> {\n+            vBox.getChildren().clear();\n+            vBox.getChildren().add(stackedAreaChart);\n+            Series<Number, Number> removedSeries = stackedAreaChart.getData().remove(0);\n+            Assert.assertEquals(0, stackedAreaChart.getData().size());\n+            stackedAreaChart.getData().add(removedSeries);\n+        });\n+    }\n+\n+    @Test\n+    public void testStackedBarChartExceptionOnAddingRemovedSeries() throws Throwable {\n+        Assert.assertEquals(1, stackedBarChart.getData().size());\n+\n+        stackedBarChartLatch.countDown();\n+        addRemovedSeriesStackedBarChart();\n+        Util.waitForLatch(stackedBarChartLatch, 5, \"Timeout waiting for series to be added.\");\n+\n+        Assert.assertEquals(1, stackedBarChart.getData().size());\n+    }\n+\n+    private void addRemovedSeriesStackedBarChart() {\n+        Util.runAndWait(() -> {\n+            vBox.getChildren().clear();\n+            vBox.getChildren().add(stackedBarChart);\n+            Series<String, Number> removedSeries = stackedBarChart.getData().remove(0);\n+            Assert.assertEquals(0, stackedBarChart.getData().size());\n+            stackedBarChart.getData().add(removedSeries);\n+        });\n+    }\n+\n+    @BeforeClass\n+    public static void initFX() throws Exception {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void exit() {\n+        Util.shutdown(stage);\n+    }\n+\n+    @Before\n+    public void setup() {\n+        Util.runAndWait(() -> {\n+            Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {\n+                if (throwable instanceof RuntimeException) {\n+                    throw (RuntimeException)throwable;\n+                } else {\n+                    Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);\n+                }\n+            });\n+        });\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        Util.runAndWait(() -> {\n+            Thread.currentThread().setUncaughtExceptionHandler(null);\n+        });\n+    }\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) {\n+            stage = primaryStage;\n+\n+            xAxis = new NumberAxis();\n+            yAxis = new NumberAxis();\n+            categoryAxis = new CategoryAxis();\n+\n+            seriesLineChart = new XYChart.Series();\n+            seriesAreaChart = new XYChart.Series();\n+            seriesBubbleChart = new XYChart.Series();\n+            seriesScatterChart = new XYChart.Series();\n+            seriesStackedAreaChart = new XYChart.Series();\n+            seriesStackedBarChart = new XYChart.Series();\n+\n+            seriesLineChart.getData().add(new XYChart.Data(1, 14));\n+            seriesLineChart.getData().add(new XYChart.Data(2, 15));\n+            lineChart = new LineChart<Number,Number>(xAxis,yAxis);\n+            lineChart.getData().add(seriesLineChart);\n+\n+            seriesAreaChart.getData().add(new XYChart.Data(1, 14));\n+            seriesAreaChart.getData().add(new XYChart.Data(2, 15));\n+            areaChart = new AreaChart<Number,Number>(xAxis,yAxis);\n+            areaChart.getData().add(seriesAreaChart);\n+\n+            seriesBubbleChart.getData().add(new XYChart.Data(1, 14));\n+            seriesBubbleChart.getData().add(new XYChart.Data(2, 15));\n+            bubbleChart = new BubbleChart<Number,Number>(xAxis,yAxis);\n+            bubbleChart.getData().addAll(seriesBubbleChart);\n+\n+            seriesScatterChart.getData().add(new XYChart.Data(1, 14));\n+            seriesScatterChart.getData().add(new XYChart.Data(2, 15));\n+            scatterChart = new ScatterChart<Number,Number>(xAxis,yAxis);\n+            scatterChart.getData().add(seriesScatterChart);\n+\n+            seriesStackedAreaChart.getData().add(new XYChart.Data(1, 14));\n+            seriesStackedAreaChart.getData().add(new XYChart.Data(2, 15));\n+            stackedAreaChart = new StackedAreaChart<Number,Number>(xAxis,yAxis);\n+            stackedAreaChart.getData().add(seriesStackedAreaChart);\n+\n+            seriesStackedBarChart.getData().add(new XYChart.Data(\"Categoty1\", 14));\n+            seriesStackedBarChart.getData().add(new XYChart.Data(\"Categoty2\", 15));\n+            stackedBarChart = new StackedBarChart<String, Number>(categoryAxis,yAxis);\n+            stackedBarChart.getData().add(seriesStackedBarChart);\n+\n+            vBox = new VBox();\n+            scene = new Scene(vBox, SCENE_WIDTH, SCENE_HEIGHT);\n+            stage.setScene(scene);\n+            stage.initStyle(StageStyle.UNDECORATED);\n+            stage.setAlwaysOnTop(true);\n+            stage.setOnShown(event -> Platform.runLater(startupLatch::countDown));\n+            stage.show();\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/control\/XYChartExceptionOnAddingRemovedSeriesTest.java","additions":308,"deletions":0,"binary":false,"changes":308,"status":"added"}]}