{"files":[{"patch":"@@ -133,1 +133,1 @@\n-                if (!dupCheck.add(d)) {\n+                if (!dupCheck.add(d) && !d.setToRemove) {\n@@ -145,2 +145,0 @@\n-                \/\/ add new listener to data\n-                s.setChart(XYChart.this);\n@@ -151,0 +149,2 @@\n+                \/\/ add new listener to data\n+                s.setChart(XYChart.this);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/chart\/XYChart.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.collections.ObservableList;\n+import javafx.event.ActionEvent;\n+import javafx.event.EventHandler;\n+import javafx.scene.chart.LineChart;\n+import javafx.scene.chart.NumberAxis;\n+import javafx.scene.chart.XYChart;\n+import javafx.scene.chart.XYChart.Series;\n+import javafx.scene.control.Button;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.Scene;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import test.util.Util;\n+\n+public class LineChartExceptionOnAddingRemovedSeriesTest {\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n+    static CountDownLatch addSeriesLatch = new CountDownLatch(1);\n+    static VBox vBox;\n+\n+    static volatile Stage stage;\n+    static volatile Scene scene;\n+    static volatile Throwable exception;\n+\n+    static final int SCENE_WIDTH = 250;\n+    static final int SCENE_HEIGHT = SCENE_WIDTH;\n+\n+    static NumberAxis xAxis;\n+    static NumberAxis yAxis;\n+    static LineChart<Number,Number> lineChart;\n+    static XYChart.Series series;\n+\n+    @Test\n+    public void testLineChartExceptionOnAddingRemovedSeries() throws Throwable {\n+        Thread.sleep(1000); \/\/ Wait for stage to layout\n+\n+        Assert.assertEquals(1, lineChart.getData().size());\n+\n+        addSeriesLatch.countDown();\n+        addRemovedSeries();\n+        Util.waitForLatch(addSeriesLatch, 5, \"Timeout waiting for series to be added.\");\n+\n+        if (exception != null) {\n+            exception.printStackTrace();\n+            throw exception;\n+        }\n+\n+        Assert.assertEquals(1, lineChart.getData().size());\n+    }\n+\n+    private void addRemovedSeries() {\n+        Util.runAndWait(() -> {\n+            ObservableList<Series<Number, Number>> data = lineChart.getData();\n+            Series<Number, Number> removedSeries = data.remove(0);\n+            data.add(removedSeries);\n+        });\n+    }\n+\n+    @BeforeClass\n+    public static void initFX() throws Exception {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void exit() {\n+        Util.shutdown(stage);\n+    }\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) {\n+            stage = primaryStage;\n+\n+            xAxis = new NumberAxis();\n+            yAxis = new NumberAxis();\n+            lineChart = new LineChart<Number,Number>(xAxis,yAxis);\n+            series = new XYChart.Series();\n+\n+            series.getData().add(new XYChart.Data(1, 14));\n+            series.getData().add(new XYChart.Data(2, 15));\n+            lineChart.getData().add(series);\n+\n+            vBox = new VBox(lineChart);\n+            scene = new Scene(vBox, SCENE_WIDTH, SCENE_HEIGHT);\n+            stage.setScene(scene);\n+            stage.initStyle(StageStyle.UNDECORATED);\n+            stage.setAlwaysOnTop(true);\n+            stage.setOnShown(event -> Platform.runLater(startupLatch::countDown));\n+            stage.show();\n+\n+            Thread.currentThread().setUncaughtExceptionHandler((t2, e) -> {\n+                exception = e;\n+            });\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/control\/LineChartExceptionOnAddingRemovedSeriesTest.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"}]}