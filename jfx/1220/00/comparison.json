{"files":[{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.javafx.scene.control;\n+\n+import java.text.BreakIterator;\n+import javafx.scene.control.TextInputControl;\n+import com.sun.javafx.util.Utils;\n+\n+\/**\n+ * Provides access to some private methods in TextInputControl.\n+ *\/\n+public class TextInputControlHelper {\n+    public interface Accessor {\n+        public BreakIterator charIterator(TextInputControl c);\n+\n+        public BreakIterator wordIterator(TextInputControl c);\n+    }\n+\n+    static {\n+        Utils.forceInit(TextInputControl.class);\n+    }\n+\n+    private static Accessor accessor;\n+\n+    private TextInputControlHelper() {\n+    }\n+\n+    public static void setAccessor(Accessor a) {\n+        if (accessor != null) {\n+            throw new IllegalStateException();\n+        }\n+        accessor = a;\n+    }\n+\n+    public static BreakIterator charIterator(TextInputControl c) {\n+        return accessor.charIterator(c);\n+    }\n+\n+    public static BreakIterator wordIterator(TextInputControl c) {\n+        return accessor.wordIterator(c);\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/TextInputControlHelper.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+import com.sun.javafx.scene.control.TextInputControlHelper;\n@@ -153,0 +154,14 @@\n+    static {\n+        TextInputControlHelper.setAccessor(new TextInputControlHelper.Accessor() {\n+            @Override\n+            public BreakIterator charIterator(TextInputControl c) {\n+                return c.charIterator();\n+            }\n+\n+            @Override\n+            public BreakIterator wordIterator(TextInputControl c) {\n+                return c.wordIterator();\n+            }\n+        });\n+    }\n+\n@@ -718,5 +733,2 @@\n-            if (charIterator == null) {\n-                charIterator = BreakIterator.getCharacterInstance();\n-            }\n-            charIterator.setText(getText());\n-            selectRange(getAnchor(), charIterator.preceding(getCaretPosition()));\n+            BreakIterator ci = charIterator();\n+            selectRange(getAnchor(), ci.preceding(getCaretPosition()));\n@@ -734,5 +746,2 @@\n-            if (charIterator == null) {\n-                charIterator = BreakIterator.getCharacterInstance();\n-            }\n-            charIterator.setText(getText());\n-            selectRange(getAnchor(), charIterator.following(getCaretPosition()));\n+            BreakIterator ci = charIterator();\n+            selectRange(getAnchor(), ci.following(getCaretPosition()));\n@@ -748,0 +757,26 @@\n+    \/**\n+     * Returns a cached instance of character break iterator, creating it if necessary.\n+     * The instance is initialized with the given text.\n+     * @return the character iterator instance, always non null\n+     *\/\n+    private BreakIterator charIterator() {\n+        if (charIterator == null) {\n+            charIterator = BreakIterator.getCharacterInstance();\n+        }\n+        charIterator.setText(getText());\n+        return charIterator;\n+    }\n+\n+    \/**\n+     * Returns a cached instance of word break iterator, creating it if necessary.\n+     * The instance is initialized with the text present in this control.\n+     * @return the word iterator instance, always non null\n+     *\/\n+    private BreakIterator wordIterator() {\n+        if (wordIterator == null) {\n+            wordIterator = BreakIterator.getWordInstance();\n+        }\n+        wordIterator.setText(getText());\n+        return wordIterator;\n+    }\n+\n@@ -800,1 +835,0 @@\n-        final String text = getText();\n@@ -805,6 +839,3 @@\n-        if (wordIterator == null) {\n-            wordIterator = BreakIterator.getWordInstance();\n-        }\n-        wordIterator.setText(text);\n-\n-        int pos = wordIterator.preceding(Utils.clamp(0, getCaretPosition(), textLength));\n+        BreakIterator wi = wordIterator();\n+        int pos = wi.preceding(Utils.clamp(0, getCaretPosition(), textLength));\n+        final String text = getText();\n@@ -815,1 +846,1 @@\n-            pos = wordIterator.preceding(Utils.clamp(0, pos, textLength));\n+            pos = wi.preceding(Utils.clamp(0, pos, textLength));\n@@ -824,1 +855,0 @@\n-        final String text = getText();\n@@ -829,7 +859,4 @@\n-        if (wordIterator == null) {\n-            wordIterator = BreakIterator.getWordInstance();\n-        }\n-        wordIterator.setText(text);\n-\n-        int last = wordIterator.following(Utils.clamp(0, getCaretPosition(), textLength-1));\n-        int current = wordIterator.next();\n+        BreakIterator wi = wordIterator();\n+        int last = wi.following(Utils.clamp(0, getCaretPosition(), textLength-1));\n+        int current = wi.next();\n+        final String text = getText();\n@@ -854,1 +881,1 @@\n-            current = wordIterator.next();\n+            current = wi.next();\n@@ -867,1 +894,0 @@\n-        final String text = getText();\n@@ -872,7 +898,4 @@\n-        if (wordIterator == null) {\n-            wordIterator = BreakIterator.getWordInstance();\n-        }\n-        wordIterator.setText(text);\n-\n-        int last = wordIterator.following(Utils.clamp(0, getCaretPosition(), textLength));\n-        int current = wordIterator.next();\n+        BreakIterator wi = wordIterator();\n+        final String text = getText();\n+        int last = wi.following(Utils.clamp(0, getCaretPosition(), textLength));\n+        int current = wi.next();\n@@ -893,1 +916,1 @@\n-            current = wordIterator.next();\n+            current = wi.next();\n@@ -992,1 +1015,0 @@\n-            final String text = getText();\n@@ -1004,5 +1026,2 @@\n-                if (charIterator == null) {\n-                    charIterator = BreakIterator.getCharacterInstance();\n-                }\n-                charIterator.setText(text);\n-                int p = charIterator.following(dot);\n+                BreakIterator ci = charIterator();\n+                int p = ci.following(dot);\n@@ -1031,5 +1050,2 @@\n-            if (charIterator == null) {\n-                charIterator = BreakIterator.getCharacterInstance();\n-            }\n-            charIterator.setText(getText());\n-            int pos = charIterator.following(dot);\n+            BreakIterator ci = charIterator();\n+            int pos = ci.following(dot);\n@@ -1060,5 +1076,2 @@\n-            if (charIterator == null) {\n-                charIterator = BreakIterator.getCharacterInstance();\n-            }\n-            charIterator.setText(getText());\n-            int pos = charIterator.preceding(dot);\n+            BreakIterator ci = charIterator();\n+            int pos = ci.preceding(dot);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TextInputControl.java","additions":65,"deletions":52,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,4 @@\n-import com.sun.javafx.scene.control.behavior.TextAreaBehavior;\n-import com.sun.javafx.scene.control.skin.Utils;\n+import static com.sun.javafx.PlatformUtil.isMac;\n+import static com.sun.javafx.PlatformUtil.isWindows;\n+import java.text.BreakIterator;\n+import java.util.List;\n@@ -59,1 +61,0 @@\n-import javafx.scene.text.Text;\n@@ -61,0 +62,1 @@\n+import javafx.scene.text.Text;\n@@ -62,0 +64,3 @@\n+import com.sun.javafx.scene.control.TextInputControlHelper;\n+import com.sun.javafx.scene.control.behavior.TextAreaBehavior;\n+import com.sun.javafx.scene.control.skin.Utils;\n@@ -63,4 +68,0 @@\n-import java.util.List;\n-\n-import static com.sun.javafx.PlatformUtil.isMac;\n-import static com.sun.javafx.PlatformUtil.isWindows;\n@@ -574,32 +575,5 @@\n-        Text textNode = getTextNode();\n-        Bounds caretBounds = caretPath.getLayoutBounds();\n-        if (caretPath.getElements().size() == 4) {\n-            \/\/ The caret is split\n-            \/\/ TODO: Find a better way to get the primary caret position\n-            \/\/ instead of depending on the internal implementation.\n-            \/\/ See RT-25465.\n-            caretBounds = new Path(caretPath.getElements().get(0), caretPath.getElements().get(1)).getLayoutBounds();\n-        }\n-        double hitX = moveRight ? caretBounds.getMaxX() : caretBounds.getMinX();\n-        double hitY = (caretBounds.getMinY() + caretBounds.getMaxY()) \/ 2;\n-        HitInfo hit = textNode.hitTest(new Point2D(hitX, hitY));\n-        boolean leading = hit.isLeading();\n-        Path charShape = new Path(textNode.rangeShape(hit.getCharIndex(), hit.getCharIndex() + 1));\n-        if ((moveRight && charShape.getLayoutBounds().getMaxX() > caretBounds.getMaxX()) ||\n-                (!moveRight && charShape.getLayoutBounds().getMinX() < caretBounds.getMinX())) {\n-            leading = !leading;\n-            positionCaret(hit.getInsertionIndex(), leading, false, false);\n-        } else {\n-            \/\/ We're at beginning or end of line. Try moving up \/ down.\n-            int dot = textArea.getCaretPosition();\n-            targetCaretX = moveRight ? 0 : Double.MAX_VALUE;\n-            \/\/ TODO: Use Bidi sniffing instead of assuming right means forward here?\n-            downLines(moveRight ? 1 : -1, false, false);\n-            targetCaretX = -1;\n-            if (dot == textArea.getCaretPosition()) {\n-                if (moveRight) {\n-                    textArea.forward();\n-                } else {\n-                    textArea.backward();\n-                }\n-            }\n+        int pos = textArea.getCaretPosition();\n+        BreakIterator bi = TextInputControlHelper.charIterator(textArea);\n+        int next = moveRight ? bi.following(pos) : bi.preceding(pos);\n+        if (next != BreakIterator.DONE) {\n+            textArea.selectRange(next, next);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TextAreaSkin.java","additions":14,"deletions":40,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.scene;\n+\n+import java.util.concurrent.CountDownLatch;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.geometry.NodeOrientation;\n+import javafx.scene.Scene;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.robot.Robot;\n+import javafx.scene.text.Font;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import test.util.Util;\n+\n+\/**\n+ * Tests bidi text navigation in TextArea.\n+ *\/\n+public class TextAreaCursorMovementTest {\n+\n+    private static final int SCENE_WIDTH = 200;\n+    private static final int SCENE_HEIGHT = 250;\n+\n+    private static CountDownLatch startupLatch = new CountDownLatch(1);\n+    private static Robot robot;\n+    private static volatile Stage stage;\n+    private static BorderPane root;\n+\n+    private static TextArea control;\n+    private static int curIndex;\n+\n+    @BeforeAll\n+    public static void initFX() throws Exception {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterAll\n+    public static void exit() {\n+        Util.shutdown(stage);\n+    }\n+\n+    private void moveCursor(boolean forward, boolean isRtl) {\n+        boolean left = isRtl ^ !forward;\n+        Util.runAndWait(() -> {\n+            robot.keyType(left ? KeyCode.LEFT : KeyCode.RIGHT);\n+        });\n+    }\n+\n+    private void addTextFieldContent(String text, boolean isRtl) {\n+        Util.runAndWait(() -> {\n+            if (isRtl) {\n+                control.setNodeOrientation(NodeOrientation.RIGHT_TO_LEFT);\n+            }\n+            control.setText(text);\n+        });\n+    }\n+\n+    @Test\n+    public void testRTL() {\n+        testCursorMovementInRTLText(true);\n+    }\n+\n+    @Test\n+    public void testLTR() {\n+        testCursorMovementInRTLText(false);\n+    }\n+\n+    private void testCursorMovementInRTLText(boolean isRtl) {\n+        String str = \"Arabic يشتر\\nشسيرشي\";\n+        addTextFieldContent(str, isRtl);\n+\n+        curIndex = 0;\n+        int prev = -1;\n+\n+        for (int i = 0; i < str.length(); i++) {\n+            moveCursor(true, isRtl);\n+            Assertions.assertNotEquals(curIndex, prev);\n+            prev = curIndex;\n+        }\n+\n+        prev = -1;\n+\n+        for (int i = 0; i < str.length(); i++) {\n+            moveCursor(false, isRtl);\n+            Assertions.assertNotEquals(curIndex, prev);\n+            prev = curIndex;\n+        }\n+    }\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) {\n+            stage = primaryStage;\n+            robot = new Robot();\n+\n+            control = new TextArea();\n+            control.caretPositionProperty().addListener((ev) -> {\n+                curIndex = control.getCaretPosition();\n+            });\n+            control.setFont(Font.getDefault().font(48));\n+            \/\/ TODO could also test with wrap text off\n+            control.setWrapText(true);\n+\n+            root = new BorderPane(control);\n+\n+            Scene scene = new Scene(root, SCENE_WIDTH, SCENE_HEIGHT);\n+            stage.setScene(scene);\n+            stage.setTitle(\"TextAreaCursorMovementTest\");\n+            stage.setAlwaysOnTop(true);\n+            stage.setOnShown(event -> Platform.runLater(startupLatch::countDown));\n+            stage.show();\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TextAreaCursorMovementTest.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"}]}