{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -246,1 +246,1 @@\n-    @Override protected void layoutChildren(double x, final double y, final double w, final double h) {\n+    @Override protected void layoutChildren(double x, double y, final double w, final double h) {\n@@ -319,4 +319,0 @@\n-        final double verticalPadding = snappedTopInset() + snappedBottomInset();\n-        final double horizontalPadding = snappedLeftInset() + snappedRightInset();\n-        final double controlHeight = control.getHeight();\n-\n@@ -350,0 +346,1 @@\n+                y = 0;\n@@ -352,2 +349,1 @@\n-                height = Math.max(controlHeight, tableCell.prefHeight(-1));\n-                height = snapSizeY(height) - snapSizeY(verticalPadding);\n+                height = h;\n@@ -356,0 +352,2 @@\n+            width = tableCell.prefWidth(height);\n+\n@@ -361,2 +359,0 @@\n-                width = tableCell.prefWidth(height) - snapSizeX(horizontalPadding);\n-\n@@ -370,1 +366,1 @@\n-                final boolean centreContent = h <= 24.0;\n+                final boolean centreContent = height <= 24.0;\n@@ -395,1 +391,1 @@\n-                                    centreContent ? (h \/ 2.0 - ph \/ 2.0) :\n+                                    centreContent ? y + (h \/ 2.0 - ph \/ 2.0) :\n@@ -426,1 +422,0 @@\n-\n@@ -428,1 +423,1 @@\n-                tableCell.relocate(x, snappedTopInset());\n+                tableCell.relocate(x, y);\n@@ -434,2 +429,0 @@\n-                width = snapSizeX(tableCell.prefWidth(-1)) - snapSizeX(horizontalPadding);\n-\n@@ -565,1 +558,1 @@\n-        double prefWidth = 0.0;\n+        double prefWidth = leftInset + rightInset;\n@@ -585,0 +578,1 @@\n+        double cellSizeWithInsets = getCellSize() + topInset + bottomInset;\n@@ -586,1 +580,1 @@\n-            return getCellSize();\n+            return cellSizeWithInsets;\n@@ -597,1 +591,1 @@\n-        double ph = Math.max(prefHeight, Math.max(getCellSize(), getSkinnable().minHeight(-1)));\n+        prefHeight += topInset + bottomInset;\n@@ -599,0 +593,2 @@\n+        double cellSizeOrMinHeight = Math.max(cellSizeWithInsets, getSkinnable().minHeight(-1));\n+        double ph = Math.max(prefHeight, cellSizeOrMinHeight);\n@@ -616,1 +612,1 @@\n-            return getCellSize();\n+            return getCellSize() + topInset + bottomInset;\n@@ -627,0 +623,2 @@\n+\n+        minHeight += topInset + bottomInset;\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableRowSkinBase.java","additions":18,"deletions":20,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+import javafx.geometry.Insets;\n+import javafx.scene.control.IndexedCell;\n@@ -32,0 +34,1 @@\n+import javafx.scene.control.TableRow;\n@@ -75,0 +78,136 @@\n+    @Test\n+    public void tableRowShouldHonorPadding() {\n+        int top = 10;\n+        int right = 20;\n+        int bottom = 30;\n+        int left = 40;\n+\n+        int horizontalPadding = left + right;\n+        int verticalPadding = top + bottom;\n+\n+        IndexedCell cell = VirtualFlowTestUtils.getCell(tableView, 0);\n+\n+        double minWidth = cell.minWidth(-1);\n+        double prefWidth = cell.prefWidth(-1);\n+        double maxWidth = cell.maxWidth(-1);\n+        double width = cell.getWidth();\n+\n+        double minHeight = cell.minHeight(-1);\n+        double prefHeight = cell.prefHeight(-1);\n+        double maxHeight = cell.maxHeight(-1);\n+        double height = cell.getHeight();\n+\n+        tableView.setRowFactory(tableView -> {\n+            TableRow<Person> row = new TableRow<>();\n+            row.setPadding(new Insets(top, right, bottom, left));\n+            return row;\n+        });\n+\n+        tableView.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        cell = VirtualFlowTestUtils.getCell(tableView, 0);\n+\n+        assertEquals(minWidth + horizontalPadding, cell.minWidth(-1), 0);\n+        assertEquals(prefWidth + horizontalPadding, cell.prefWidth(-1), 0);\n+        assertEquals(maxWidth + horizontalPadding, cell.maxWidth(-1), 0);\n+        assertEquals(width + horizontalPadding, cell.getWidth(), 0);\n+\n+        assertEquals(minHeight + verticalPadding, cell.minHeight(-1), 0);\n+        assertEquals(prefHeight + verticalPadding, cell.prefHeight(-1), 0);\n+        assertEquals(maxHeight + verticalPadding, cell.maxHeight(-1), 0);\n+        assertEquals(height + verticalPadding, cell.getHeight(), 0);\n+    }\n+\n+    @Test\n+    public void tableRowWithCellSizeShouldHonorPadding() {\n+        int top = 10;\n+        int right = 20;\n+        int bottom = 30;\n+        int left = 40;\n+\n+        int horizontalPadding = left + right;\n+        int verticalPadding = top + bottom;\n+        int verticalPaddingWithCellSize = top + bottom + 10;\n+\n+        IndexedCell cell = VirtualFlowTestUtils.getCell(tableView, 0);\n+\n+        double minWidth = cell.minWidth(-1);\n+        double prefWidth = cell.prefWidth(-1);\n+        double maxWidth = cell.maxWidth(-1);\n+        double width = cell.getWidth();\n+\n+        double minHeight = cell.minHeight(-1);\n+        double prefHeight = cell.prefHeight(-1);\n+        double maxHeight = cell.maxHeight(-1);\n+        double height = cell.getHeight();\n+\n+        tableView.setRowFactory(tableView -> {\n+            TableRow<Person> row = new TableRow<>();\n+            row.setStyle(\"-fx-cell-size: 34px\");\n+            row.setPadding(new Insets(top, right, bottom, left));\n+            return row;\n+        });\n+\n+        tableView.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        cell = VirtualFlowTestUtils.getCell(tableView, 0);\n+\n+        assertEquals(minWidth + horizontalPadding, cell.minWidth(-1), 0);\n+        assertEquals(prefWidth + horizontalPadding, cell.prefWidth(-1), 0);\n+        assertEquals(maxWidth + horizontalPadding, cell.maxWidth(-1), 0);\n+        assertEquals(width + horizontalPadding, cell.getWidth(), 0);\n+\n+        \/\/ minHeight will take the lowest height - which are the cells (24px)\n+        assertEquals(minHeight + verticalPadding, cell.minHeight(-1), 0);\n+        assertEquals(prefHeight + verticalPaddingWithCellSize, cell.prefHeight(-1), 0);\n+        assertEquals(maxHeight + verticalPaddingWithCellSize, cell.maxHeight(-1), 0);\n+        assertEquals(height + verticalPaddingWithCellSize, cell.getHeight(), 0);\n+    }\n+\n+    @Test\n+    public void tableRowWithFixedSizeShouldIgnoreVerticalPadding() {\n+        int top = 10;\n+        int right = 20;\n+        int bottom = 30;\n+        int left = 40;\n+\n+        int horizontalPadding = left + right;\n+\n+        tableView.setFixedCellSize(24);\n+\n+        IndexedCell cell = VirtualFlowTestUtils.getCell(tableView, 0);\n+\n+        double minWidth = cell.minWidth(-1);\n+        double prefWidth = cell.prefWidth(-1);\n+        double maxWidth = cell.maxWidth(-1);\n+        double width = cell.getWidth();\n+\n+        double minHeight = cell.minHeight(-1);\n+        double prefHeight = cell.prefHeight(-1);\n+        double maxHeight = cell.maxHeight(-1);\n+        double height = cell.getHeight();\n+\n+        tableView.setRowFactory(tableView -> {\n+            TableRow<Person> row = new TableRow<>();\n+            row.setPadding(new Insets(top, right, bottom, left));\n+            return row;\n+        });\n+\n+        tableView.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        cell = VirtualFlowTestUtils.getCell(tableView, 0);\n+\n+        assertEquals(minWidth + horizontalPadding, cell.minWidth(-1), 0);\n+        assertEquals(prefWidth + horizontalPadding, cell.prefWidth(-1), 0);\n+        assertEquals(maxWidth + horizontalPadding, cell.maxWidth(-1), 0);\n+        assertEquals(width + horizontalPadding, cell.getWidth(), 0);\n+\n+        assertEquals(minHeight, cell.minHeight(-1), 0);\n+        assertEquals(prefHeight, cell.prefHeight(-1), 0);\n+        assertEquals(maxHeight, cell.maxHeight(-1), 0);\n+        assertEquals(height, cell.getHeight(), 0);\n+    }\n+\n@@ -116,1 +255,1 @@\n-        tableView.getColumns().remove(tableView.getColumns().size() - 1, tableView.getColumns().size());\n+        tableView.getColumns().remove(tableView.getColumns().size() - 2, tableView.getColumns().size());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TableRowSkinTest.java","additions":141,"deletions":2,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -0,0 +1,270 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.skin;\n+\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.geometry.Insets;\n+import javafx.scene.control.IndexedCell;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableRow;\n+import javafx.scene.control.TreeTableView;\n+import javafx.scene.control.cell.TreeItemPropertyValueFactory;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n+import test.com.sun.javafx.scene.control.test.Person;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class TreeTableRowSkinTest {\n+\n+    private TreeTableView<Person> treeTableView;\n+    private StageLoader stageLoader;\n+\n+    @BeforeEach\n+    public void before() {\n+        treeTableView = new TreeTableView<>();\n+\n+        TreeTableColumn<Person, String> firstNameCol = new TreeTableColumn<>(\"Firstname\");\n+        firstNameCol.setCellValueFactory(new TreeItemPropertyValueFactory<>(\"firstName\"));\n+        TreeTableColumn<Person, String> lastNameCol = new TreeTableColumn<>(\"Lastname\");\n+        lastNameCol.setCellValueFactory(new TreeItemPropertyValueFactory<>(\"lastName\"));\n+        TreeTableColumn<Person, String> emailCol = new TreeTableColumn<>(\"Email\");\n+        emailCol.setCellValueFactory(new TreeItemPropertyValueFactory<>(\"email\"));\n+        TreeTableColumn<Person, Integer> ageCol = new TreeTableColumn<>(\"Age\");\n+        ageCol.setCellValueFactory(new TreeItemPropertyValueFactory<>(\"age\"));\n+\n+        treeTableView.getColumns().addAll(firstNameCol, lastNameCol, emailCol, ageCol);\n+\n+        ObservableList<TreeItem<Person>> items = FXCollections.observableArrayList(\n+                new TreeItem<>(new Person(\"firstName1\", \"lastName1\", \"email1@javafx.com\", 1)),\n+                new TreeItem<>(new Person(\"firstName2\", \"lastName2\", \"email2@javafx.com\", 2)),\n+                new TreeItem<>(new Person(\"firstName3\", \"lastName3\", \"email3@javafx.com\", 3)),\n+                new TreeItem<>(new Person(\"firstName4\", \"lastName4\", \"email4@javafx.com\", 4))\n+        );\n+\n+        TreeItem<Person> root = new TreeItem<>();\n+        root.getChildren().addAll(items);\n+        treeTableView.setRoot(root);\n+        treeTableView.setShowRoot(false);\n+\n+        stageLoader = new StageLoader(treeTableView);\n+    }\n+\n+    @Test\n+    public void treeTableRowShouldHonorPadding() {\n+        int top = 10;\n+        int right = 20;\n+        int bottom = 30;\n+        int left = 40;\n+\n+        int horizontalPadding = left + right;\n+        int verticalPadding = top + bottom;\n+\n+        IndexedCell cell = VirtualFlowTestUtils.getCell(treeTableView, 0);\n+\n+        double minWidth = cell.minWidth(-1);\n+        double prefWidth = cell.prefWidth(-1);\n+        double maxWidth = cell.maxWidth(-1);\n+        double width = cell.getWidth();\n+\n+        double minHeight = cell.minHeight(-1);\n+        double prefHeight = cell.prefHeight(-1);\n+        double maxHeight = cell.maxHeight(-1);\n+        double height = cell.getHeight();\n+\n+        treeTableView.setRowFactory(treeTableView -> {\n+            TreeTableRow<Person> row = new TreeTableRow<>();\n+            row.setPadding(new Insets(top, right, bottom, left));\n+            return row;\n+        });\n+\n+        treeTableView.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        cell = VirtualFlowTestUtils.getCell(treeTableView, 0);\n+\n+        assertEquals(minWidth + horizontalPadding, cell.minWidth(-1), 0);\n+        assertEquals(prefWidth + horizontalPadding, cell.prefWidth(-1), 0);\n+        assertEquals(maxWidth + horizontalPadding, cell.maxWidth(-1), 0);\n+        assertEquals(width + horizontalPadding, cell.getWidth(), 0);\n+\n+        assertEquals(minHeight + verticalPadding, cell.minHeight(-1), 0);\n+        assertEquals(prefHeight + verticalPadding, cell.prefHeight(-1), 0);\n+        assertEquals(maxHeight + verticalPadding, cell.maxHeight(-1), 0);\n+        assertEquals(height + verticalPadding, cell.getHeight(), 0);\n+    }\n+\n+    @Test\n+    public void treeTableRowWithCellSizeShouldHonorPadding() {\n+        int top = 10;\n+        int right = 20;\n+        int bottom = 30;\n+        int left = 40;\n+\n+        int horizontalPadding = left + right;\n+        int verticalPadding = top + bottom;\n+        int verticalPaddingWithCellSize = top + bottom + 10;\n+\n+        IndexedCell cell = VirtualFlowTestUtils.getCell(treeTableView, 0);\n+\n+        double minWidth = cell.minWidth(-1);\n+        double prefWidth = cell.prefWidth(-1);\n+        double maxWidth = cell.maxWidth(-1);\n+        double width = cell.getWidth();\n+\n+        double minHeight = cell.minHeight(-1);\n+        double prefHeight = cell.prefHeight(-1);\n+        double maxHeight = cell.maxHeight(-1);\n+        double height = cell.getHeight();\n+\n+        treeTableView.setRowFactory(treeTableView -> {\n+            TreeTableRow<Person> row = new TreeTableRow<>();\n+            row.setStyle(\"-fx-cell-size: 34px\");\n+            row.setPadding(new Insets(top, right, bottom, left));\n+            return row;\n+        });\n+\n+        treeTableView.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        cell = VirtualFlowTestUtils.getCell(treeTableView, 0);\n+\n+        assertEquals(minWidth + horizontalPadding, cell.minWidth(-1), 0);\n+        assertEquals(prefWidth + horizontalPadding, cell.prefWidth(-1), 0);\n+        assertEquals(maxWidth + horizontalPadding, cell.maxWidth(-1), 0);\n+        assertEquals(width + horizontalPadding, cell.getWidth(), 0);\n+\n+        \/\/ minHeight will take the lowest height - which are the cells (24px)\n+        assertEquals(minHeight + verticalPadding, cell.minHeight(-1), 0);\n+        assertEquals(prefHeight + verticalPaddingWithCellSize, cell.prefHeight(-1), 0);\n+        assertEquals(maxHeight + verticalPaddingWithCellSize, cell.maxHeight(-1), 0);\n+        assertEquals(height + verticalPaddingWithCellSize, cell.getHeight(), 0);\n+    }\n+\n+    @Test\n+    public void treeTableRowWithFixedCellSizeShouldIgnoreVerticalPadding() {\n+        int top = 10;\n+        int right = 20;\n+        int bottom = 30;\n+        int left = 40;\n+\n+        int horizontalPadding = left + right;\n+\n+        treeTableView.setFixedCellSize(24);\n+\n+        IndexedCell cell = VirtualFlowTestUtils.getCell(treeTableView, 0);\n+\n+        double minWidth = cell.minWidth(-1);\n+        double prefWidth = cell.prefWidth(-1);\n+        double maxWidth = cell.maxWidth(-1);\n+        double width = cell.getWidth();\n+\n+        double minHeight = cell.minHeight(-1);\n+        double prefHeight = cell.prefHeight(-1);\n+        double maxHeight = cell.maxHeight(-1);\n+        double height = cell.getHeight();\n+\n+        treeTableView.setRowFactory(treeTableView -> {\n+            TreeTableRow<Person> row = new TreeTableRow<>();\n+            row.setPadding(new Insets(top, right, bottom, left));\n+            return row;\n+        });\n+\n+        treeTableView.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        cell = VirtualFlowTestUtils.getCell(treeTableView, 0);\n+\n+        assertEquals(minWidth + horizontalPadding, cell.minWidth(-1), 0);\n+        assertEquals(prefWidth + horizontalPadding, cell.prefWidth(-1), 0);\n+        assertEquals(maxWidth + horizontalPadding, cell.maxWidth(-1), 0);\n+        assertEquals(width + horizontalPadding, cell.getWidth(), 0);\n+\n+        assertEquals(minHeight, cell.minHeight(-1), 0);\n+        assertEquals(prefHeight, cell.prefHeight(-1), 0);\n+        assertEquals(maxHeight, cell.maxHeight(-1), 0);\n+        assertEquals(height, cell.getHeight(), 0);\n+    }\n+\n+    @Test\n+    public void removedColumnsShouldRemoveCorrespondingCellsInRowFixedCellSize() {\n+        treeTableView.setFixedCellSize(24);\n+        removedColumnsShouldRemoveCorrespondingCellsInRowImpl();\n+    }\n+\n+    @Test\n+    public void removedColumnsShouldRemoveCorrespondingCellsInRow() {\n+        removedColumnsShouldRemoveCorrespondingCellsInRowImpl();\n+    }\n+\n+    @Test\n+    public void invisibleColumnsShouldRemoveCorrespondingCellsInRowFixedCellSize() {\n+        treeTableView.setFixedCellSize(24);\n+        invisibleColumnsShouldRemoveCorrespondingCellsInRowImpl();\n+    }\n+\n+    @Test\n+    public void invisibleColumnsShouldRemoveCorrespondingCellsInRow() {\n+        invisibleColumnsShouldRemoveCorrespondingCellsInRowImpl();\n+    }\n+\n+    @AfterEach\n+    public void after() {\n+        stageLoader.dispose();\n+    }\n+\n+    private void invisibleColumnsShouldRemoveCorrespondingCellsInRowImpl() {\n+        \/\/ Set the last 2 columns invisible.\n+        treeTableView.getColumns().get(treeTableView.getColumns().size() - 1).setVisible(false);\n+        treeTableView.getColumns().get(treeTableView.getColumns().size() - 2).setVisible(false);\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        \/\/ We set 2 columns to invisible, so the cell count should be decremented by 2 as well.\n+        \/\/ Note: TreeTableView has an additional children - the disclosure node - therefore we subtract 1 here.\n+        assertEquals(treeTableView.getColumns().size() - 2,\n+                VirtualFlowTestUtils.getCell(treeTableView, 0).getChildrenUnmodifiable().size() - 1);\n+    }\n+\n+    private void removedColumnsShouldRemoveCorrespondingCellsInRowImpl() {\n+        \/\/ Remove the last 2 columns.\n+        treeTableView.getColumns().remove(treeTableView.getColumns().size() - 2, treeTableView.getColumns().size());\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        \/\/ We removed 2 columns, so the cell count should be decremented by 2 as well.\n+        \/\/ Note: TreeTableView has an additional children - the disclosure node - therefore we subtract 1 here.\n+        assertEquals(treeTableView.getColumns().size(),\n+                VirtualFlowTestUtils.getCell(treeTableView, 0).getChildrenUnmodifiable().size() - 1);\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TreeTableRowSkinTest.java","additions":270,"deletions":0,"binary":false,"changes":270,"status":"added"}]}