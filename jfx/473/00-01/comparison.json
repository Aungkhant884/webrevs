{"files":[{"patch":"@@ -581,3 +581,7 @@\n-        updateEditingIndex = false;\n-        cancelEdit();\n-        updateEditingIndex = true;\n+        try {\n+            \/\/ try-finally to make certain that the flag is reliably reset to true\n+            updateEditingIndex = false;\n+            cancelEdit();\n+        } finally {\n+            updateEditingIndex = true;\n+        }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableCell.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -555,0 +555,5 @@\n+\n+    \/**\n+     * Switches an editing cell into not editing without changing control's\n+     * editing state.\n+     *\/\n@@ -562,3 +567,7 @@\n-        updateEditingIndex = false;\n-        cancelEdit();\n-        updateEditingIndex = true;\n+        try {\n+            \/\/ try-finally to make certain that the flag is reliably reset to true\n+            updateEditingIndex = false;\n+            cancelEdit();\n+        } finally {\n+            updateEditingIndex = true;\n+        }\n@@ -566,0 +575,1 @@\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableCell.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import org.junit.After;\n@@ -53,0 +54,8 @@\n+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {\n+            if (throwable instanceof RuntimeException) {\n+                throw (RuntimeException)throwable;\n+            } else {\n+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);\n+            }\n+        });\n+\n@@ -58,0 +67,6 @@\n+    @After\n+    public void cleanup() {\n+        Thread.currentThread().setUncaughtExceptionHandler(null);\n+    }\n+\n+\n@@ -309,0 +324,56 @@\n+\n+    \/**\n+     * Test that cell.cancelEdit can switch table editing off\n+     * even if a subclass violates its contract.\n+     *\n+     * For details, see https:\/\/bugs.openjdk.java.net\/browse\/JDK-8265206\n+     *\n+     *\/\n+    @Test\n+    public void testMisbehavingCancelEditTerminatesEdit() {\n+        \/\/ setup for editing\n+        TableCell<String, String> cell = new MisbehavingOnCancelTableCell<>();\n+        table.setEditable(true);\n+        TableColumn<String, String> editingColumn = new TableColumn<>(\"TEST\");\n+        editingColumn.setCellValueFactory(param -> null);\n+        table.getColumns().add(editingColumn);\n+        cell.updateTableView(table);\n+        cell.updateTableColumn(editingColumn);\n+        \/\/ test editing: first round\n+        \/\/ switch cell off editing by table api\n+        int editingIndex = 1;\n+        int intermediate = 0;\n+        cell.updateIndex(editingIndex);\n+        table.edit(editingIndex, editingColumn);\n+        assertTrue(\"sanity: \", cell.isEditing());\n+        try {\n+            table.edit(intermediate, editingColumn);\n+        } catch (Exception ex) {\n+            \/\/ just catching to test in finally\n+        } finally {\n+            assertFalse(\"cell must not be editing\", cell.isEditing());\n+            assertEquals(\"table must be editing at intermediate index\", intermediate, table.getEditingCell().getRow());\n+        }\n+        \/\/ test editing: second round\n+        \/\/ switch cell off editing by cell api\n+        table.edit(editingIndex, editingColumn);\n+        assertTrue(\"sanity: \", cell.isEditing());\n+        try {\n+            cell.cancelEdit();\n+        } catch (Exception ex) {\n+            \/\/ just catching to test in finally\n+        } finally {\n+            assertFalse(\"cell must not be editing\", cell.isEditing());\n+            assertNull(\"table editing must be cancelled by cell\", table.getEditingCell());\n+        }\n+    }\n+\n+    public static class MisbehavingOnCancelTableCell<S, T> extends TableCell<S, T> {\n+\n+        @Override\n+        public void cancelEdit() {\n+            super.cancelEdit();\n+            throw new RuntimeException(\"violating contract\");\n+        }\n+\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableCellTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+\n+import org.junit.After;\n@@ -61,0 +63,8 @@\n+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {\n+            if (throwable instanceof RuntimeException) {\n+                throw (RuntimeException)throwable;\n+            } else {\n+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);\n+            }\n+        });\n+\n@@ -75,0 +85,6 @@\n+    @After\n+    public void cleanup() {\n+        Thread.currentThread().setUncaughtExceptionHandler(null);\n+    }\n+\n+\n@@ -619,0 +635,57 @@\n+\n+    \/**\n+     * Test that cell.cancelEdit can switch table editing off\n+     * even if a subclass violates its contract.\n+     *\n+     * For details, see https:\/\/bugs.openjdk.java.net\/browse\/JDK-8265206\n+     *\n+     *\/\n+    @Test\n+    public void testMisbehavingCancelEditTerminatesEdit() {\n+        \/\/ setup for editing\n+        TreeTableCell<String, String> cell = new MisbehavingOnCancelTreeTableCell<>();\n+        tree.setEditable(true);\n+        TreeTableColumn<String, String> editingColumn = new TreeTableColumn<>(\"TEST\");\n+        editingColumn.setCellValueFactory(param -> null);\n+        tree.getColumns().add(editingColumn);\n+        cell.updateTreeTableView(tree);\n+        cell.updateTreeTableColumn(editingColumn);\n+        \/\/ test editing: first round\n+        \/\/ switch cell off editing by table api\n+        int editingIndex = 1;\n+        int intermediate = 0;\n+        cell.updateIndex(editingIndex);\n+        tree.edit(editingIndex, editingColumn);\n+        assertTrue(\"sanity: \", cell.isEditing());\n+        try {\n+            tree.edit(intermediate, editingColumn);\n+        } catch (Exception ex) {\n+            \/\/ catching to test in finally\n+        } finally {\n+            assertFalse(\"cell must not be editing\", cell.isEditing());\n+            assertEquals(\"table must be editing at intermediate index\", intermediate, tree.getEditingCell().getRow());\n+        }\n+        \/\/ test editing: second round\n+        \/\/ switch cell off editing by cell api\n+        tree.edit(editingIndex, editingColumn);\n+        assertTrue(\"sanity: \", cell.isEditing());\n+        try {\n+            cell.cancelEdit();\n+        } catch (Exception ex) {\n+            \/\/ catching to test in finally\n+        } finally {\n+            assertFalse(\"cell must not be editing\", cell.isEditing());\n+            assertNull(\"table editing must be cancelled by cell\", tree.getEditingCell());\n+        }\n+    }\n+\n+    public static class MisbehavingOnCancelTreeTableCell<S, T> extends TreeTableCell<S, T> {\n+\n+        @Override\n+        public void cancelEdit() {\n+            super.cancelEdit();\n+            throw new RuntimeException(\"violating contract\");\n+        }\n+\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableCellTest.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"modified"}]}