{"files":[{"patch":"@@ -32,0 +32,2 @@\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n@@ -43,1 +45,3 @@\n-        CookieHandler handler = CookieHandler.getDefault();\n+        @SuppressWarnings(\"removal\")\n+        CookieHandler handler =\n+            AccessController.doPrivileged((PrivilegedAction<CookieHandler>) CookieHandler::getDefault);\n@@ -65,1 +69,3 @@\n-        CookieHandler handler = CookieHandler.getDefault();\n+        @SuppressWarnings(\"removal\")\n+        CookieHandler handler =\n+            AccessController.doPrivileged((PrivilegedAction<CookieHandler>) CookieHandler::getDefault);\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/network\/CookieJar.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.security.AllPermission;\n+import java.security.PermissionCollection;\n+import java.security.Permissions;\n+import java.security.Policy;\n+import java.security.ProtectionDomain;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.web.WebView;\n+import javafx.stage.Stage;\n+\n+@SuppressWarnings(\"removal\")\n+public class HTTP2SecurityManagerTest {\n+\n+    public static class MainWindow extends Application {\n+\n+        @Override\n+        public void start(Stage stage) throws Exception {\n+            VBox instructions =  new VBox(\n+                new Label(\" This test loads a web page with a security manager set,\"),\n+                new Label(\" and a Policy that grants AllPermission.\"),\n+                new Label(\"\"),\n+                new Label(\" Check the console output for an AccessControllException:\"),\n+                new Label(\" Click 'Pass' if there is NO exception\"),\n+                new Label(\" Click 'Fail' if an AccessControlException is logged\")\n+            );\n+\n+            Button passButton = new Button(\"Pass\");\n+            passButton.setOnAction(e -> {\n+                Platform.exit();\n+            });\n+\n+            Button failButton = new Button(\"Fail\");\n+            failButton.setOnAction(e -> {\n+                Platform.exit();\n+                throw new AssertionError(\"Unexpected AccessControlException\");\n+            });\n+\n+            HBox buttonBox = new HBox(20, passButton, failButton);\n+\n+            WebView webView = new WebView();\n+            webView.getEngine().load(\"https:\/\/www.oracle.com\/java\/\");\n+            VBox root = new VBox(10, buttonBox, instructions, webView);\n+            Scene scene = new Scene(root);\n+            stage.setScene(scene);\n+            stage.show();\n+        }\n+\n+    }\n+\n+    public static void main(String[] args) {\n+        Policy.setPolicy(new Policy() {\n+            @Override\n+            public PermissionCollection getPermissions(ProtectionDomain domain) {\n+                Permissions permissions = new Permissions();\n+                permissions.add(new AllPermission());\n+                return permissions;\n+            }\n+        });\n+        System.setSecurityManager(new SecurityManager());\n+        Application.launch(MainWindow.class);\n+    }\n+}\n","filename":"tests\/manual\/web\/HTTP2SecurityManagerTest.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}