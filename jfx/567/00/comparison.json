{"files":[{"patch":"@@ -62,0 +62,4 @@\n+def macOSMinVersionArr = macOSMinVersion.split(\"\\\\.\")\n+def macOSMinVersionMajor = macOSMinVersionArr[0]\n+def macOSMinVersionMinor = macOSMinVersionArr[1]\n+\n@@ -181,1 +185,3 @@\n-MAC.glass.ccFlags = [ccFlags].flatten()\n+MAC.glass.ccFlags = [ccFlags,\n+    \"-DMACOS_MIN_VERSION_MAJOR=$macOSMinVersionMajor\",\n+    \"-DMACOS_MIN_VERSION_MINOR=$macOSMinVersionMinor\"].flatten()\n","filename":"buildSrc\/mac.gradle","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -824,0 +824,28 @@\n+    \/\/ Check minimum OS version\n+    NSOperatingSystemVersion osVer;\n+    osVer = [[NSProcessInfo processInfo] operatingSystemVersion];\n+    NSInteger osVerMajor = osVer.majorVersion;\n+    NSInteger osVerMinor = osVer.minorVersion;\n+\n+    \/\/ Map 10.16 to 11.0, since macOS will return 10.16 by default (for compatibility)\n+    if (osVerMajor == 10 && osVerMinor >= 16) {\n+        \/\/ FIXME: if we ever need to know which minor version of macOS 11.x we\n+        \/\/ are running on, we will need to look it up using a similar technique\n+        \/\/ to what the JDK does.\n+        osVerMajor = 11;\n+        osVerMinor = 0;\n+    }\n+\n+    if (osVerMajor < MACOS_MIN_VERSION_MAJOR ||\n+            (osVerMajor == MACOS_MIN_VERSION_MAJOR &&\n+             osVerMinor < MACOS_MIN_VERSION_MINOR))\n+    {\n+        NSLog(@\"ERROR: macOS version is %d.%d, which is below the minimum of %d.%d\",\n+              (int)osVerMajor, (int)osVerMinor, MACOS_MIN_VERSION_MAJOR, MACOS_MIN_VERSION_MINOR);\n+        jclass exceptionClass = (*env)->FindClass(env, \"java\/lang\/RuntimeException\");\n+        if (exceptionClass != 0) {\n+            (*env)->ThrowNew(env, exceptionClass, \"Unsupported macOS version\");\n+        }\n+        return;\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.m","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"}]}