{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import java.util.function.Consumer;\n@@ -39,0 +38,2 @@\n+ *\n+ * @param <T> the type of the values the observable provides\n@@ -40,1 +41,1 @@\n-public class ListenerList extends ListenerListBase {\n+public class ListenerList<T> extends ListenerListBase {\n@@ -73,1 +74,0 @@\n-     * @param <T> the type of the values the observable provides\n@@ -76,1 +76,0 @@\n-     * @param latestValueTracker a {@link Consumer} for the latest value, can be {@code null}\n@@ -80,1 +79,1 @@\n-    public <T> boolean notifyListeners(ObservableValue<? extends T> observableValue, T oldValue, Consumer<T> latestValueTracker) {\n+    public boolean notifyListeners(ObservableValue<? extends T> observableValue, T oldValue) {\n@@ -121,3 +120,1 @@\n-                if (latestValueTracker != null) {\n-                    latestValueTracker.accept(newValue);\n-                }\n+                valueObtained(newValue);\n@@ -142,0 +139,11 @@\n+\n+    \/**\n+     * Called during notifications when a new value was obtained from the\n+     * involved {@link ObservableValue}.<p>\n+     *\n+     * This is useful when this value needs to be kept track of.\n+     *\n+     * @param value the value that was obtained, can be {@code null}\n+     *\/\n+    protected void valueObtained(T value) {\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ListenerList.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -150,2 +150,2 @@\n-    private void callMultipleListeners(I instance, ListenerList list, T oldValue) {\n-        boolean modified = list.notifyListeners(instance, oldValue, null);\n+    private void callMultipleListeners(I instance, ListenerList<T> list, T oldValue) {\n+        boolean modified = list.notifyListeners(instance, oldValue);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ListenerManager.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.util.function.Consumer;\n-\n@@ -43,3 +41,1 @@\n-public class OldValueCachingListenerList<T> extends ListenerList {\n-    private final Consumer<T> latestValueTracker = this::putLatestValue;\n-\n+public class OldValueCachingListenerList<T> extends ListenerList<T> {\n@@ -85,1 +81,6 @@\n-        return notifyListeners(observableValue, getLatestValue(), latestValueTracker);\n+        return notifyListeners(observableValue, getLatestValue());\n+    }\n+\n+    @Override\n+    protected final void valueObtained(T value) {\n+        putLatestValue(value);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/OldValueCachingListenerList.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-public class ListenerListTest extends ListenerListTestBase<ListenerList> {\n+public class ListenerListTest extends ListenerListTestBase<ListenerList<Object>> {\n@@ -35,2 +35,2 @@\n-    protected ListenerList create(Object listener1, Object listener2) {\n-        return new ListenerList(listener1, listener2);\n+    protected ListenerList<Object> create(Object listener1, Object listener2) {\n+        return new ListenerList<>(listener1, listener2);\n@@ -40,2 +40,2 @@\n-    protected <T> void notifyListeners(ListenerList list, ObservableValue<T> property, T oldValue) {\n-        list.notifyListeners(property, oldValue, null);\n+    protected <T> void notifyListeners(ListenerList<Object> list, ObservableValue<? extends T> property, T oldValue) {\n+        list.notifyListeners(property, oldValue);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ListenerListTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-    protected abstract <T> void notifyListeners(L list, ObservableValue<T> property, T oldValue);\n+    protected abstract <T> void notifyListeners(L list, ObservableValue<? extends T> property, T oldValue);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ListenerListTestBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    protected <T> void notifyListeners(OldValueCachingListenerList<?> list, ObservableValue<T> property, T oldValue) {\n+    protected <T> void notifyListeners(OldValueCachingListenerList<?> list, ObservableValue<? extends T> property, T oldValue) {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/OldValueCachingListenerListTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}