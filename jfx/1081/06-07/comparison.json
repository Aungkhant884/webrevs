{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import java.util.function.Predicate;\n@@ -53,5 +52,0 @@\n-    private static final Predicate<Object> NULL_OR_COLLECTED =\n-        listener -> listener == null || (listener instanceof WeakListener wl && wl.wasGarbageCollected());\n-\n-    private static final Predicate<InvalidationListener> INVALIDATION_LISTENER_NULL_OR_COLLECTED =\n-        listener -> listener == null || (listener instanceof WeakListener wl && wl.wasGarbageCollected());\n@@ -85,1 +79,1 @@\n-                if (NULL_OR_COLLECTED.test(element)) {\n+                if (element == null || (element instanceof WeakListener wl && wl.wasGarbageCollected())) {\n@@ -178,2 +172,2 @@\n-     * Indicates whether a list currently contains any {@code null}s.\n-     * This can only be {@code true} while locked.\n+     * Indicates whether a list currently contains any {@code null}s, and\n+     * how many. This is always zero when unlocked.\n@@ -181,1 +175,1 @@\n-    private boolean containsNulls;\n+    private int nulledListenerCount;\n@@ -209,0 +203,10 @@\n+    \/**\n+     * Returns the total number of listeners in this list. This accurately\n+     * reflects added and removed listeners even while the list is locked.\n+     *\n+     * @return the total number of listeners in this list, never negative\n+     *\/\n+    public final int totalListeners() {\n+        return invalidationListenersCount + changeListenersCount - nulledListenerCount;\n+    }\n+\n@@ -297,1 +301,1 @@\n-                containsNulls = true;\n+                nulledListenerCount++;\n@@ -313,1 +317,1 @@\n-                    containsNulls = true;\n+                    nulledListenerCount++;\n@@ -329,0 +333,2 @@\n+        boolean containsNulls = nulledListenerCount > 0;\n+\n@@ -348,2 +354,0 @@\n-            INVALIDATION_LISTENERS.removeIf(this, INVALIDATION_LISTENER_NULL_OR_COLLECTED);\n-            CHANGE_LISTENERS.removeIf(this, NULL_OR_COLLECTED);\n@@ -351,1 +355,27 @@\n-            containsNulls = false;\n+            \/*\n+             * Note: only nulls are removed here. Expired weak listeners are not removed\n+             * as this would mean the listener count could change unexpectedly at the end\n+             * of a notification without going through an addListener\/removeListener call\n+             * which may be overridden to track listeners. A scenario that would be troubling\n+             * is:\n+             *\n+             * - A notification starts\n+             * - An unrelated listener removes itself while list is locked (which will trigger this\n+             *   clean-up code later); this goes through the normal add\/removeListener channel\n+             * - The notification ends\n+             * - While unlocking, a weak listener is determined to be expired\n+             *   - Removing this weak listener would not go through proper channels and thus\n+             *     code that overrides add\/removeListener would be unaware of the change\n+             *\n+             * Therefore, weak listeners will only be actively removed when another listener\n+             * is being added or removed as the caller will then be expecting a change in the\n+             * listener count, albeit higher than just the one listener being added or removed.\n+             * Callers already should be aware that removing a listener may not change the count\n+             * (if the listener didn't exist), so manually checking the new count after such a\n+             * call must be done already.\n+             *\/\n+\n+            INVALIDATION_LISTENERS.removeIf(this, Objects::isNull);\n+            CHANGE_LISTENERS.removeIf(this, Objects::isNull);\n+\n+            nulledListenerCount = 0;\n@@ -406,0 +436,1 @@\n+        assert nulledListenerCount == 0 : \"nulledListenerCount must be zero when not locked\";\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ListenerListBase.java","additions":46,"deletions":15,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -75,2 +75,0 @@\n-    private final AccessibleListenerListBase list = new AccessibleListenerListBase(cl1, il1);\n-\n@@ -92,0 +90,2 @@\n+        AccessibleListenerListBase list = new AccessibleListenerListBase(cl1, il1);\n+\n@@ -97,0 +97,2 @@\n+        AccessibleListenerListBase list = new AccessibleListenerListBase(cl1, il1);\n+\n@@ -107,0 +109,2 @@\n+        AccessibleListenerListBase list = new AccessibleListenerListBase(cl1, il1);\n+\n@@ -117,1 +121,6 @@\n-        ListenerList list = new ListenerList(cl1, il1);\n+        ListenerList<?> list = new ListenerList<>(cl1, il1);\n+\n+        assertEquals(1, list.invalidationListenersSize());\n+        assertEquals(1, list.changeListenersSize());\n+        assertEquals(2, list.totalListeners());\n+        assertTrue(list.hasChangeListeners());\n@@ -120,0 +129,6 @@\n+\n+        assertEquals(1, list.invalidationListenersSize());\n+        assertEquals(0, list.changeListenersSize());\n+        assertEquals(1, list.totalListeners());\n+        assertFalse(list.hasChangeListeners());\n+\n@@ -124,0 +139,1 @@\n+        assertEquals(0, list.totalListeners());\n@@ -130,0 +146,75 @@\n+    @Test\n+    void shouldUpdateTotalListenersWhileLocked() {\n+        AccessibleListenerListBase list = new AccessibleListenerListBase(cl1, il1);\n+\n+        list.accessibleLock();\n+\n+        assertEquals(1, list.invalidationListenersSize());\n+        assertEquals(1, list.changeListenersSize());\n+        assertEquals(2, list.totalListeners());\n+        assertTrue(list.hasChangeListeners());\n+\n+        list.remove(cl1);\n+\n+        assertEquals(1, list.invalidationListenersSize());\n+        assertEquals(1, list.changeListenersSize());\n+        assertEquals(1, list.totalListeners());\n+        assertTrue(list.hasChangeListeners());\n+\n+        list.remove(il1);\n+\n+        assertEquals(1, list.invalidationListenersSize());\n+        assertEquals(1, list.changeListenersSize());\n+        assertEquals(0, list.totalListeners());\n+        assertTrue(list.hasChangeListeners());\n+\n+        list.accessibleUnlock();\n+\n+        assertEquals(0, list.invalidationListenersSize());\n+        assertEquals(0, list.changeListenersSize());\n+        assertEquals(0, list.totalListeners());\n+        assertFalse(list.hasChangeListeners());\n+    }\n+\n+    @Test\n+    void shouldNeverSilentlyRemoveWeakListeners() {\n+\n+        \/*\n+         * Weak listeners should only ever be removed as part of a\n+         * add or remove listener call (although more listeners can be removed\n+         * than just the given one during such a call). It should never\n+         * happen during the unlock operation as the listener count then\n+         * changes unexpectedly. This is also the behavior of the old\n+         * ExpressionHelper.\n+         *\n+         * WeakListeners that remove themselves during notification are\n+         * not a problem as this always goes through a removeListener call.\n+         *\/\n+\n+        AccessibleListenerListBase list = new AccessibleListenerListBase(cl1, il1);\n+        WeakInvalidationListener weakListener = new WeakInvalidationListener(\"\");\n+\n+        list.add(weakListener);  \/\/ add the listener that should NOT be removed during cleanup\n+\n+        list.accessibleLock();\n+\n+        \/\/ make a change to the list so it will trigger a cleanup during unlock\n+        list.remove(cl1);  \/\/ nulls out cl1, forcing a cleanup during unlock\n+\n+        weakListener.setGarbageCollected(true);\n+\n+        list.accessibleUnlock();\n+\n+        \/\/ Ensure the unlock did not remove the weak listener even though it is no longer needed\n+        assertEquals(2, list.invalidationListenersSize());\n+        assertEquals(0, list.changeListenersSize());\n+        assertEquals(2, list.totalListeners());\n+        assertListeners(list, List.of(il1, weakListener));\n+\n+        for(int i = 0; i < 100; i++) {\n+            list.add(il2);\n+        }\n+\n+        assertEquals(101, list.totalListeners());  \/\/ Not 102 as weak listener was removed during a compaction step\n+    }\n+\n@@ -132,1 +223,1 @@\n-        ListenerList list = new ListenerList(cl1, il1);\n+        ListenerList<?> list = new ListenerList<>(cl1, il1);\n@@ -140,1 +231,1 @@\n-        ListenerList list2 = new ListenerList(il1, il2);\n+        ListenerList<?> list2 = new ListenerList<>(il1, il2);\n@@ -160,0 +251,1 @@\n+        AccessibleListenerListBase list = new AccessibleListenerListBase(cl1, il1);\n@@ -320,0 +412,2 @@\n+        AccessibleListenerListBase list = new AccessibleListenerListBase(cl1, il1);\n+\n@@ -322,0 +416,1 @@\n+        assertEquals(2, list.totalListeners());\n@@ -330,0 +425,1 @@\n+        assertEquals(4, list.totalListeners());\n@@ -338,0 +434,1 @@\n+        assertEquals(4, list.totalListeners());\n@@ -344,0 +441,2 @@\n+        AccessibleListenerListBase list = new AccessibleListenerListBase(cl1, il1);\n+\n@@ -346,0 +445,1 @@\n+        assertEquals(2, list.totalListeners());\n@@ -350,0 +450,3 @@\n+        assertEquals(2, list.invalidationListenersSize());\n+        assertEquals(2, list.changeListenersSize());\n+        assertEquals(4, list.totalListeners());\n@@ -354,0 +457,3 @@\n+        assertEquals(2, list.invalidationListenersSize());\n+        assertEquals(2, list.changeListenersSize());\n+        assertEquals(4, list.totalListeners());\n@@ -358,0 +464,3 @@\n+        assertEquals(2, list.invalidationListenersSize());\n+        assertEquals(2, list.changeListenersSize());\n+        assertEquals(3, list.totalListeners());\n@@ -362,0 +471,3 @@\n+        assertEquals(2, list.invalidationListenersSize());\n+        assertEquals(2, list.changeListenersSize());\n+        assertEquals(2, list.totalListeners());\n@@ -371,0 +483,3 @@\n+        assertEquals(1, list.invalidationListenersSize());\n+        assertEquals(1, list.changeListenersSize());\n+        assertEquals(2, list.totalListeners());\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ListenerListBaseTest.java","additions":120,"deletions":5,"binary":false,"changes":125,"status":"modified"}]}