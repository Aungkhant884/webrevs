{"files":[{"patch":"@@ -108,0 +108,1 @@\n+        T oldValue = getLatestValue();  \/\/ save this value here already as even invalidation listeners can influence it\n@@ -129,1 +130,0 @@\n-        T oldValue = getLatestValue();\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/OldValueCachingListenerList.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n- * Base test class suitable for testing {@link ListenerList} and {@link OldValueCachingListenerList}.\n+ * Base test class suitable for testing {@link ListenerList} and {@link com.sun.javafx.binding.OldValueCachingListenerList}.\n@@ -314,0 +314,68 @@\n+\n+        \/**\n+         * This test adds a mix of listeners that can't easily agree on their final\n+         * value. They're looking for a number divisible by 2, 3, 5 and 7, and will keep\n+         * incrementing the value by 1 until they all agree. The final value should be\n+         * 210, which matches the above criteria.\n+         *\/\n+        @Test\n+        void shouldSendChangesThatMakeSense_VariantAMixOfListeners() {\n+            LongProperty property = new SimpleLongProperty(1);\n+            L list = create(il1, il2);\n+\n+            list.add((InvalidationListener) obs -> {\n+                long v = property.get();  \/\/ act as change listener\n+\n+                records.add(\"IL3: current value \" + v);\n+\n+                if (v % 5 != 0) {\n+                    property.set(v + 1);\n+                    notifyListeners(list, property, v);\n+                }\n+            });\n+\n+            list.add((InvalidationListener) obs -> {\n+                long v = property.get();  \/\/ act as change listener\n+\n+                records.add(\"IL4: current value \" + v);\n+\n+                if (v % 2 != 0) {\n+                    property.set(v + 1);\n+                    notifyListeners(list, property, v);\n+                }\n+            });\n+\n+            list.add((ChangeListener<Number>) (obs, o, n) -> {\n+                long v = n.longValue();\n+\n+                records.add(\"CL3: changed from \" + o + \" to \" + n);\n+\n+                if (v % 3 != 0) {\n+                    property.set(v + 1);\n+                    notifyListeners(list, property, v);\n+                }\n+            });\n+\n+            list.add((ChangeListener<Number>) (obs, o, n) -> {\n+                long v = n.longValue();\n+\n+                records.add(\"CL4: changed from \" + o + \" to \" + n);\n+\n+                if (v % 7 != 0) {\n+                    property.set(v + 1);\n+                    notifyListeners(list, property, v);\n+                }\n+            });\n+\n+            notifyListeners(list, property, 0);\n+\n+            assertConsistentChangeSequence(\"210\");\n+\n+            \/*\n+             * The total of 700 comes from:\n+             * - 210 changes per invalidation listener for the first two listeners that do nothing (il1, il2)\n+             * - 280 changes total for all listeners that trigger nested changes (regardless of listener type)\n+             *\/\n+\n+            assertEquals(700, records.size());\n+        }\n@@ -323,0 +391,1 @@\n+    private Pattern INVALIDATION_PATTERN = Pattern.compile(\"(?<listener>.*): current value (?<current>.*)\");\n@@ -343,1 +412,1 @@\n-                assertNotEquals(o, n, \"Listener \" + name + \" received an change that wasn't a change: \" + record);\n+                assertNotEquals(o, n, \"Listener \" + name + \" received a change that wasn't a change: \" + record);\n@@ -353,0 +422,11 @@\n+        for (String record : records) {\n+            Matcher matcher = INVALIDATION_PATTERN.matcher(record);\n+\n+            if (matcher.matches()) {\n+                String name = matcher.group(\"listener\");\n+                String c = matcher.group(\"current\");\n+\n+                oldValues.put(name, c);\n+            }\n+        }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ListenerListTestBase.java","additions":82,"deletions":2,"binary":false,"changes":84,"status":"modified"}]}