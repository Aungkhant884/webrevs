{"files":[{"patch":"@@ -136,18 +136,0 @@\n-\n-    private void callInvalidationListener(ObservableValue<?> instance, InvalidationListener listener) {\n-        try {\n-            listener.invalidated(instance);\n-        }\n-        catch (Exception e) {\n-            Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);\n-        }\n-    }\n-\n-    private <T> void callChangeListener(ObservableValue<? extends T> instance, ChangeListener<T> changeListener, T oldValue, T newValue) {\n-        try {\n-            changeListener.changed(instance, oldValue, newValue);\n-        }\n-        catch (Exception e) {\n-            Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);\n-        }\n-    }\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ListenerList.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import javafx.beans.value.ObservableValue;\n@@ -169,2 +170,2 @@\n-     * Indicates whether the list is locked, and if so, what the size\n-     * of the list was at the time of locking. A non-negative value\n+     * Indicates whether the list is locked, and if so, what the total size\n+     * of the two lists was at the time of locking. A non-negative value\n@@ -406,0 +407,18 @@\n+\n+    static final void callInvalidationListener(ObservableValue<?> instance, InvalidationListener listener) {\n+        try {\n+            listener.invalidated(instance);\n+        }\n+        catch (Exception e) {\n+            Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);\n+        }\n+    }\n+\n+    static final <T> void callChangeListener(ObservableValue<? extends T> instance, ChangeListener<T> changeListener, T oldValue, T newValue) {\n+        try {\n+            changeListener.changed(instance, oldValue, newValue);\n+        }\n+        catch (Exception e) {\n+            Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);\n+        }\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ListenerListBase.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-            callInvalidationListener(instance, il);\n+            ListenerListBase.callInvalidationListener(instance, il);\n@@ -145,1 +145,1 @@\n-                callChangeListener(instance, cl, oldValue, newValue);\n+                ListenerListBase.callChangeListener(instance, cl, oldValue, newValue);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ListenerManager.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,17 +59,0 @@\n-    protected final void callInvalidationListener(I instance, InvalidationListener listener) {\n-        try {\n-            listener.invalidated(instance);\n-        }\n-        catch (Exception e) {\n-            Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);\n-        }\n-    }\n-\n-    protected final void callChangeListener(I instance, ChangeListener<T> changeListener, T oldValue, T newValue) {\n-        try {\n-            changeListener.changed(instance, oldValue, newValue);\n-        }\n-        catch (Exception e) {\n-            Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);\n-        }\n-    }\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ListenerManagerBase.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -163,18 +163,0 @@\n-\n-    private void callInvalidationListener(ObservableValue<?> instance, InvalidationListener listener) {\n-        try {\n-            listener.invalidated(instance);\n-        }\n-        catch (Exception e) {\n-            Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);\n-        }\n-    }\n-\n-    private void callChangeListener(ObservableValue<? extends T> instance, ChangeListener<T> changeListener, T oldValue, T newValue) {\n-        try {\n-            changeListener.changed(instance, oldValue, newValue);\n-        }\n-        catch (Exception e) {\n-            Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);\n-        }\n-    }\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/OldValueCachingListenerList.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-            callInvalidationListener(instance, il);\n+            ListenerListBase.callInvalidationListener(instance, il);\n@@ -200,1 +200,1 @@\n-            callChangeListener(instance, changeListenerWrapper, oldValue, newValue);\n+            ListenerListBase.callChangeListener(instance, changeListenerWrapper, oldValue, newValue);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/OldValueCachingListenerManager.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}