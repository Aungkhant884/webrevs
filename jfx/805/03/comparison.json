{"files":[{"patch":"@@ -666,1 +666,0 @@\n-                tableSkin.getChildren().remove(cell);\n@@ -669,0 +668,1 @@\n+        tableSkin.getChildren().remove(tableRow);\n@@ -670,1 +670,2 @@\n-        \/\/ dispose of the cell to prevent it retaining listeners (see RT-31015)\n+        \/\/ dispose of the row and cell to prevent it retaining listeners (see RT-31015)\n+        tableRow.updateIndex(-1);\n@@ -707,0 +708,2 @@\n+        tableRow.updateTableView(tv);\n+\n@@ -761,1 +764,0 @@\n-                tableSkin.getChildren().remove(cell);\n@@ -764,0 +766,1 @@\n+        tableSkin.getChildren().remove(treeTableRow);\n@@ -765,1 +768,2 @@\n-        \/\/ dispose of the cell to prevent it retaining listeners (see RT-31015)\n+        \/\/ dispose of the row and cell to prevent it retaining listeners (see RT-31015)\n+        treeTableRow.updateIndex(-1);\n@@ -803,0 +807,2 @@\n+        treeTableRow.updateTreeTableView(ttv);\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableColumnHeader.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -126,1 +126,4 @@\n-                registerChangeListener(getVirtualFlow().widthProperty(), e -> tableView.requestLayout());\n+                VirtualFlow<TableRow<T>> virtualFlow = getVirtualFlow();\n+                if (virtualFlow != null) {\n+                    registerChangeListener(virtualFlow.widthProperty(), e -> tableView.requestLayout());\n+                }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableRowSkin.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -150,1 +150,4 @@\n-                registerChangeListener(getVirtualFlow().widthProperty(), e -> treeTableView.requestLayout());\n+                VirtualFlow<TreeTableRow<T>> virtualFlow = getVirtualFlow();\n+                if (virtualFlow != null) {\n+                    registerChangeListener(virtualFlow.widthProperty(), e -> treeTableView.requestLayout());\n+                }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TreeTableRowSkin.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2568,1 +2568,1 @@\n-        assertEquals(21, rt_31200_count);\n+        assertEquals(22, rt_31200_count);\n@@ -2575,1 +2575,1 @@\n-        assertEquals(21, rt_31200_count);\n+        assertEquals(22, rt_31200_count);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import javafx.scene.control.Skin;\n@@ -32,0 +33,1 @@\n+import javafx.scene.control.TableRow;\n@@ -34,0 +36,3 @@\n+import javafx.scene.control.skin.TableColumnHeader;\n+import javafx.scene.control.skin.TableColumnHeaderShim;\n+import javafx.scene.control.skin.TableRowSkin;\n@@ -42,0 +47,3 @@\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n@@ -47,0 +55,1 @@\n+    private TableColumnHeader firstColumnHeader;\n@@ -73,0 +82,26 @@\n+        firstColumnHeader = VirtualFlowTestUtils.getTableColumnHeader(tableView, firstNameCol);\n+    }\n+\n+    \/**\n+     * The {@link TableView} should never be null inside the {@link TableRowSkin} during auto sizing.\n+     * See also: JDK-8289357\n+     *\/\n+    @Test\n+    public void testTableViewInRowSkinIsNotNullWhenAutoSizing() {\n+        tableView.setRowFactory(tv -> new TableRow<>() {\n+            @Override\n+            protected Skin<?> createDefaultSkin() {\n+                return new ThrowingTableRowSkin<>(this);\n+            }\n+        });\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+    }\n+\n+    \/**\n+     * The {@link TableView} should not have any {@link TableRow} as children.\n+     * {@link TableRow}s are added temporary as part of the auto sizing, but should never remain after.\n+     * See also: JDK-8289357\n+     *\/\n+    @Test\n+    public void testTableViewChildrenCount() {\n+        assertTrue(tableView.getChildrenUnmodifiable().stream().noneMatch(node -> node instanceof TableRow));\n@@ -125,0 +160,7 @@\n+    private static class ThrowingTableRowSkin<T> extends TableRowSkin<T> {\n+        public ThrowingTableRowSkin(TableRow<T> tableRow) {\n+            super(tableRow);\n+            assertNotNull(tableRow.getTableView());\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TableRowSkinTest.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.skin;\n+\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.Skin;\n+import javafx.scene.control.TableRow;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableRow;\n+import javafx.scene.control.TreeTableView;\n+import javafx.scene.control.cell.TreeItemPropertyValueFactory;\n+import javafx.scene.control.skin.TableColumnHeader;\n+import javafx.scene.control.skin.TableColumnHeaderShim;\n+import javafx.scene.control.skin.TreeTableRowSkin;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n+import test.com.sun.javafx.scene.control.test.Person;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+public class TreeTableRowSkinTest {\n+\n+    private TreeTableView<Person> treeTableView;\n+    private StageLoader stageLoader;\n+    private TableColumnHeader firstColumnHeader;\n+\n+    @BeforeEach\n+    public void before() {\n+        treeTableView = new TreeTableView<>();\n+\n+        TreeTableColumn<Person, String> firstNameCol = new TreeTableColumn<>(\"Firstname\");\n+        firstNameCol.setCellValueFactory(new TreeItemPropertyValueFactory<>(\"firstName\"));\n+        TreeTableColumn<Person, String> lastNameCol = new TreeTableColumn<>(\"Lastname\");\n+        lastNameCol.setCellValueFactory(new TreeItemPropertyValueFactory<>(\"lastName\"));\n+        TreeTableColumn<Person, String> emailCol = new TreeTableColumn<>(\"Email\");\n+        emailCol.setCellValueFactory(new TreeItemPropertyValueFactory<>(\"email\"));\n+        TreeTableColumn<Person, Integer> ageCol = new TreeTableColumn<>(\"Age\");\n+        ageCol.setCellValueFactory(new TreeItemPropertyValueFactory<>(\"age\"));\n+\n+        treeTableView.getColumns().addAll(firstNameCol, lastNameCol, emailCol, ageCol);\n+\n+        ObservableList<TreeItem<Person>> items = FXCollections.observableArrayList(\n+                new TreeItem<>(new Person(\"firstName1\", \"lastName1\", \"email1@javafx.com\", 1)),\n+                new TreeItem<>(new Person(\"firstName2\", \"lastName2\", \"email2@javafx.com\", 2)),\n+                new TreeItem<>(new Person(\"firstName3\", \"lastName3\", \"email3@javafx.com\", 3)),\n+                new TreeItem<>(new Person(\"firstName4\", \"lastName4\", \"email4@javafx.com\", 4))\n+        );\n+\n+        TreeItem<Person> root = new TreeItem<>();\n+        root.getChildren().addAll(items);\n+        treeTableView.setRoot(root);\n+        treeTableView.setShowRoot(false);\n+\n+        stageLoader = new StageLoader(treeTableView);\n+        firstColumnHeader = VirtualFlowTestUtils.getTableColumnHeader(treeTableView, firstNameCol);\n+    }\n+\n+    \/**\n+     * The {@link TreeTableView} should never be null inside the {@link TreeTableRowSkin} during auto sizing.\n+     * See also: JDK-8289357\n+     *\/\n+    @Test\n+    public void testTreeTableViewInRowSkinIsNotNullWhenAutoSizing() {\n+        treeTableView.setRowFactory(tv -> new TreeTableRow<>() {\n+            @Override\n+            protected Skin<?> createDefaultSkin() {\n+                return new ThrowingTreeTableRowSkin<>(this);\n+            }\n+        });\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+    }\n+\n+    \/**\n+     * The {@link TreeTableView} should not have any {@link TreeTableRow} as children.\n+     * {@link TreeTableRow}s are added temporary as part of the auto sizing, but should never remain after.\n+     * See also: JDK-8289357\n+     *\/\n+    @Test\n+    public void testTreeTableViewChildrenCount() {\n+        assertTrue(treeTableView.getChildrenUnmodifiable().stream().noneMatch(node -> node instanceof TreeTableRow));\n+    }\n+\n+    @AfterEach\n+    public void after() {\n+        stageLoader.dispose();\n+    }\n+\n+    private static class ThrowingTreeTableRowSkin<T> extends TreeTableRowSkin<T> {\n+        public ThrowingTreeTableRowSkin(TreeTableRow<T> treeTableRow) {\n+            super(treeTableRow);\n+            assertNotNull(treeTableRow.getTreeTableView());\n+        }\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TreeTableRowSkinTest.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}