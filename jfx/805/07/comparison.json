{"files":[{"patch":"@@ -674,1 +674,0 @@\n-                tableSkin.getChildren().remove(cell);\n@@ -677,0 +676,1 @@\n+        tableSkin.getChildren().remove(tableRow);\n@@ -678,1 +678,2 @@\n-        \/\/ dispose of the cell to prevent it retaining listeners (see RT-31015)\n+        \/\/ dispose of the row and cell to prevent it retaining listeners (see RT-31015)\n+        tableRow.updateIndex(-1);\n@@ -715,0 +716,2 @@\n+        tableRow.updateTableView(tv);\n+\n@@ -769,1 +772,0 @@\n-                tableSkin.getChildren().remove(cell);\n@@ -772,0 +774,1 @@\n+        tableSkin.getChildren().remove(treeTableRow);\n@@ -773,1 +776,2 @@\n-        \/\/ dispose of the cell to prevent it retaining listeners (see RT-31015)\n+        \/\/ dispose of the row and cell to prevent it retaining listeners (see RT-31015)\n+        treeTableRow.updateIndex(-1);\n@@ -811,0 +815,2 @@\n+        treeTableRow.updateTreeTableView(ttv);\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableColumnHeader.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -120,1 +120,4 @@\n-                registerChangeListener(getVirtualFlow().widthProperty(), e -> tableView.requestLayout());\n+                VirtualFlow<TableRow<T>> virtualFlow = getVirtualFlow();\n+                if (virtualFlow != null) {\n+                    registerChangeListener(virtualFlow.widthProperty(), e -> tableView.requestLayout());\n+                }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableRowSkin.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -148,3 +148,4 @@\n-                lh.addChangeListener(getVirtualFlow().widthProperty(), (ev) -> {\n-                    treeTableView.requestLayout();\n-                });\n+                VirtualFlow<TreeTableRow<T>> virtualFlow = getVirtualFlow();\n+                if (virtualFlow != null) {\n+                    lh.addChangeListener(getVirtualFlow().widthProperty(), (ev) -> treeTableView.requestLayout());\n+                }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TreeTableRowSkin.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import org.junit.Ignore;\n@@ -371,1 +370,0 @@\n-    @Ignore(\"Fails currently but will be enabled again in JDK-8289357\")\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableCellTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -711,1 +711,0 @@\n-    @Ignore(\"Fails currently but will be enabled again in JDK-8289357\")\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableCellTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2592,1 +2592,1 @@\n-        assertEquals(21, rt_31200_count);\n+        assertEquals(22, rt_31200_count);\n@@ -2599,1 +2599,1 @@\n-        assertEquals(21, rt_31200_count);\n+        assertEquals(22, rt_31200_count);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import javafx.scene.control.Skin;\n@@ -37,0 +38,3 @@\n+import javafx.scene.control.skin.TableColumnHeader;\n+import javafx.scene.control.skin.TableColumnHeaderShim;\n+import javafx.scene.control.skin.TableRowSkin;\n@@ -45,0 +49,2 @@\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n@@ -50,0 +56,1 @@\n+    private TableColumnHeader firstColumnHeader;\n@@ -76,0 +83,26 @@\n+        firstColumnHeader = VirtualFlowTestUtils.getTableColumnHeader(tableView, firstNameCol);\n+    }\n+\n+    \/**\n+     * The {@link TableView} should never be null inside the {@link TableRowSkin} during auto sizing.\n+     * See also: JDK-8289357\n+     *\/\n+    @Test\n+    public void testTableViewInRowSkinIsNotNullWhenAutoSizing() {\n+        tableView.setRowFactory(tv -> new TableRow<>() {\n+            @Override\n+            protected Skin<?> createDefaultSkin() {\n+                return new ThrowingTableRowSkin<>(this);\n+            }\n+        });\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+    }\n+\n+    \/**\n+     * The {@link TableView} should not have any {@link TableRow} as children.\n+     * {@link TableRow}s are added temporary as part of the auto sizing, but should never remain after.\n+     * See also: JDK-8289357 and JDK-8292009\n+     *\/\n+    @Test\n+    public void testTableViewChildrenCount() {\n+        assertTrue(tableView.getChildrenUnmodifiable().stream().noneMatch(node -> node instanceof TableRow));\n@@ -264,0 +297,7 @@\n+    private static class ThrowingTableRowSkin<T> extends TableRowSkin<T> {\n+        public ThrowingTableRowSkin(TableRow<T> tableRow) {\n+            super(tableRow);\n+            assertNotNull(tableRow.getTableView());\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TableRowSkinTest.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -33,0 +33,5 @@\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.Skin;\n+import javafx.scene.control.TableRow;\n+import javafx.scene.control.TableView;\n@@ -38,0 +43,3 @@\n+import javafx.scene.control.skin.TableColumnHeader;\n+import javafx.scene.control.skin.TableColumnHeaderShim;\n+import javafx.scene.control.skin.TreeTableRowSkin;\n@@ -45,0 +53,2 @@\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -51,0 +61,1 @@\n+    private TableColumnHeader firstColumnHeader;\n@@ -80,0 +91,26 @@\n+        firstColumnHeader = VirtualFlowTestUtils.getTableColumnHeader(treeTableView, firstNameCol);\n+    }\n+\n+    \/**\n+     * The {@link TreeTableView} should never be null inside the {@link TreeTableRowSkin} during auto sizing.\n+     * See also: JDK-8289357\n+     *\/\n+    @Test\n+    public void testTreeTableViewInRowSkinIsNotNullWhenAutoSizing() {\n+        treeTableView.setRowFactory(tv -> new TreeTableRow<>() {\n+            @Override\n+            protected Skin<?> createDefaultSkin() {\n+                return new ThrowingTreeTableRowSkin<>(this);\n+            }\n+        });\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+    }\n+\n+    \/**\n+     * The {@link TreeTableView} should not have any {@link TreeTableRow} as children.\n+     * {@link TreeTableRow}s are added temporary as part of the auto sizing, but should never remain after.\n+     * See also: JDK-8289357 and JDK-8292009\n+     *\/\n+    @Test\n+    public void testTreeTableViewChildrenCount() {\n+        assertTrue(treeTableView.getChildrenUnmodifiable().stream().noneMatch(node -> node instanceof TreeTableRow));\n@@ -270,0 +307,7 @@\n+    private static class ThrowingTreeTableRowSkin<T> extends TreeTableRowSkin<T> {\n+        public ThrowingTreeTableRowSkin(TreeTableRow<T> treeTableRow) {\n+            super(treeTableRow);\n+            assertNotNull(treeTableRow.getTreeTableView());\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TreeTableRowSkinTest.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"}]}