{"files":[{"patch":"@@ -45,1 +45,1 @@\n-    GET_MAIN_JENV;\n+    GET_MAIN_JENV_NOWARN;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassAccessible.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -221,1 +221,2 @@\n-\/\/ retrieve main thread Java env asserting the call originated on main thread\n+\/\/ Retrieve Java env, asserting the call originated on main thread.\n+\/\/ Warn if the JVM has already been detached.\n@@ -228,0 +229,7 @@\n+\/\/ Retrieve Java env, asserting the call originated on main thread.\n+\/\/ This variant is silent if the JVM has been detached, making it suitable\n+\/\/ for use by dealloc methods, which are called by the auto-release mechanism.\n+#define GET_MAIN_JENV_NOWARN \\\n+    assert(pthread_main_np() == 1); \\\n+    JNIEnv *env = jEnv;\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassMacros.h","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-    GET_MAIN_JENV;\n+    GET_MAIN_JENV_NOWARN;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassMenu.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -204,1 +204,2 @@\n-    GET_MAIN_JENV;\n+    GET_MAIN_JENV_NOWARN;\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassViewDelegate.m","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -69,0 +69,2 @@\n+\n+    static final int ERROR_TIMEOUT = 28;\n","filename":"tests\/system\/src\/test\/java\/test\/launchertest\/Constants.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.launchertest;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Label;\n+import javafx.stage.Stage;\n+\n+import static test.launchertest.Constants.*;\n+\n+\/**\n+ * Test application that calls Platform.exit while Stage is still showing\n+ * the Scene.\n+ *\n+ * This is launched by PlatformExitTest.\n+ *\/\n+public class PlatformExitApp extends Application {\n+\n+    \/\/ Timeout in milliseconds (must be at least 15 seconds)\n+    private static final int TIMEOUT = 20000;\n+\n+    public static void sleep(long msec) {\n+        try {\n+            Thread.sleep(msec);\n+        } catch (InterruptedException ex) {\n+            ex.printStackTrace();\n+            System.exit(ERROR_UNEXPECTED_EXCEPTION);\n+        }\n+    }\n+\n+    public static void setupTimeoutThread() {\n+        \/\/ Timeout thread\n+        Thread th = new Thread(() -> {\n+            sleep(TIMEOUT);\n+            System.exit(ERROR_TIMEOUT);\n+        });\n+        th.setDaemon(true);\n+        th.start();\n+    }\n+\n+    @Override public void start(Stage stage) throws Exception {\n+        StackPane root = new StackPane();\n+        Scene scene = new Scene(root, 400, 300);\n+\n+        final Label label = new Label(\"Hello\");\n+\n+        root.getChildren().add(label);\n+\n+        stage.setScene(scene);\n+        stage.show();\n+\n+        \/\/ Show window for 1 second before calling Platform.exit\n+        Thread thr = new Thread(() -> {\n+            sleep(1000);\n+            Platform.exit();\n+        });\n+        thr.start();\n+    }\n+\n+    \/**\n+     * @param args the command line arguments\n+     *\/\n+    public static void main(String[] args) {\n+        setupTimeoutThread();\n+        Application.launch(args);\n+\n+        \/\/ Short delay to allow any pending output to be flushed\n+        sleep(500);\n+        System.exit(ERROR_NONE);\n+    }\n+\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/launchertest\/PlatformExitApp.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.launchertest;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import junit.framework.AssertionFailedError;\n+import org.junit.Test;\n+import test.util.Util;\n+\n+import static test.launchertest.Constants.*;\n+\n+\/**\n+ * Unit test for Platform.exit\n+ *\/\n+public class PlatformExitTest {\n+\n+    private static final String className = PlatformExitTest.class.getName();\n+    private static final String pkgName = className.substring(0, className.lastIndexOf(\".\"));\n+    private static final String testAppName = pkgName + \".\" + \"PlatformExitApp\";\n+\n+    @Test (timeout = 15000)\n+    public void testPlatformExit() throws Exception {\n+\n+        final ArrayList<String> cmd =\n+                Util.createApplicationLaunchCommand(testAppName, null, null);\n+\n+        ProcessBuilder builder = new ProcessBuilder(cmd);\n+        builder.redirectErrorStream(true);\n+        Process process = builder.start();\n+        final InputStream in = process.getInputStream();\n+\n+        \/\/ Wait for the process to exit\n+        int retVal = process.waitFor();\n+        switch (retVal) {\n+            case 0:\/\/ SUCCESS\n+            case ERROR_NONE:\n+                break;\n+\n+            case 1:\n+                throw new AssertionFailedError(testAppName\n+                        + \": unable to launch java application\");\n+\n+            case ERROR_TIMEOUT:\n+                throw new AssertionFailedError(testAppName\n+                        + \": application timeout\");\n+\n+            case ERROR_UNEXPECTED_EXCEPTION:\n+                throw new AssertionFailedError(testAppName\n+                        + \": unexpected exception\");\n+\n+            default:\n+                throw new AssertionFailedError(testAppName\n+                        + \": Unexpected error exit: \" + retVal);\n+        }\n+\n+        \/\/ Read the output of the forked process and check for warning string\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n+        StringBuilder stringBuilder = new StringBuilder();\n+        String line;\n+        while ((line = reader.readLine()) != null) {\n+            stringBuilder = stringBuilder.append(line).append(\"\\n\");\n+        }\n+        if (stringBuilder.indexOf(\"Java has been detached\") >= 0) {\n+            System.err.println(stringBuilder);\n+            throw new AssertionFailedError(testAppName + \": tried to use JNI after Java was detached\");\n+        }\n+    }\n+\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/launchertest\/PlatformExitTest.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}