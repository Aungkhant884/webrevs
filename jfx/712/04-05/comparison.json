{"files":[{"patch":"@@ -1055,14 +1055,8 @@\n-        double origAbsoluteOffset = absoluteOffset;\n-        \/\/ if the last modification to the position was done via scrollPixels,\n-        \/\/ the absoluteOffset and position are already in sync.\n-        \/\/ However, the position can be modified via different ways (e.g. by\n-        \/\/ moving the scrollbar thumb), so we need to recalculate absoluteOffset\n-        \/\/ There is an exception to this: if cells are added\/removed, we want\n-        \/\/ to keep the absoluteOffset constant, hence we need to adjust the position.\n-\n-        if (lastCellCount != getCellCount()) {\n-            absoluteOffset = origAbsoluteOffset;\n-            adjustPosition();\n-        } else {\n-            adjustAbsoluteOffset();\n-        }\n+        \/\/ when we enter this method, the absoluteOffset and position are\n+        \/\/ already determined. In case this method invokes other methods\n+        \/\/ that may change either absoluteOffset or position, it is the\n+        \/\/ responsability of those methods to make both parameters are\n+        \/\/ changed in a consistent way.\n+        \/\/ For example, the recalculateEstimatedSize method also recalculates\n+        \/\/ the absoluteOffset and position.\n+\n@@ -1073,2 +1067,0 @@\n-\/\/            accumCell = null;\n-\/\/            accumCellParent.getChildren().clear();\n@@ -1906,0 +1898,3 @@\n+        if (value == this.viewportLength) {\n+            return;\n+        }\n@@ -1908,0 +1903,1 @@\n+        recalculateEstimatedSize();\n@@ -3042,0 +3038,16 @@\n+        boolean keepRatio = ((cacheCount > 0) && !Double.isInfinite(this.absoluteOffset));\n+        double estSize = estimatedSize \/ itemCount;\n+\n+        double bound = 0;\n+        double oldOffset = absoluteOffset - bound;\n+        int oldIndex = 0;\n+        if (keepRatio) { \/\/ store index and offset\n+            while (absoluteOffset > bound) {\n+                oldOffset = absoluteOffset - bound;\n+                double h = getCellSize(oldIndex);\n+                if (h < 0) h = estSize;\n+                bound += h;\n+                oldIndex++;\n+            }\n+        }\n+\n@@ -3057,0 +3069,12 @@\n+\n+        if (keepRatio ) {\n+            double newOffset = 0;\n+            for (int i = 0; i < oldIndex-1; i++) {\n+                double h = getCellSize(i);\n+                if (h < 0) h = estSize;\n+                newOffset += h;\n+            }\n+            this.absoluteOffset = newOffset + oldOffset;\n+            adjustPosition();\n+        }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/VirtualFlow.java","additions":40,"deletions":16,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2301,0 +2301,14 @@\n+        testScrollTo(400,8,new Integer[]{500, 500, 20, 20, 100, 100, 100, 100, 100, 100, 300, 300, 300, 300});\n+\n+        testScrollTo(400,2, new Integer[]{300,300,20,20});\n+        testScrollTo(400,2, new Integer[]{300,300,20,20,200,200});\n+        testScrollTo(400,2, new Integer[]{20,20,20,500,500});\n+\n+        testScrollTo(400,2, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(400,-1, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(400,3, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(400,-1,new Integer[]{200, 200, 200, 200, 200, 200 ,200 ,200, 20, 20, 20, 20, 20, 20, 500, 20, 500, 20, 500});\n+        testScrollTo(400,-1,new Integer[]{200, 200, 200, 200, 200, 200 ,200 ,200, 20, 20, 20, 20, 20, 20, 400, 20, 400, 20, 400});\n+        testScrollTo(400,2,new Integer[]{500, 500, 20, 20, 100, 100, 100, 100, 100, 100});\n+        testScrollTo(400,2,new Integer[]{500, 500, 500,500,500});\n+\n@@ -2307,5 +2321,4 @@\n-        testScrollTo(false, listViewHeight, scrollToIndex, heights);\n-        testScrollTo(true, listViewHeight, scrollToIndex, heights);\n-    }\n-\n-  public void testScrollTo(boolean addIncremental, int listViewHeight, int scrollToIndex, Integer[] heights) {\n+        testScrollTo(false, false, false, listViewHeight, scrollToIndex, heights);\n+        testScrollTo(true, false, false, listViewHeight, scrollToIndex, heights);\n+        testScrollTo(true, true, false, listViewHeight, scrollToIndex, heights);\n+        testScrollTo(true, true, true, listViewHeight, scrollToIndex, heights);\n@@ -2313,11 +2326,1 @@\n-        \/\/ System.out.println(\"heights: \" + Arrays.toString(heights));\n-        \/\/ System.out.println(\"scrollToIndex: \" + scrollToIndex);\n-        \/\/ System.out.println(\"addIncremental: \" + addIncremental);\n-        double sumOfHeights = 0;\n-        for(int height: heights) {\n-            sumOfHeights += height;\n-        }\n-        double sizeBelow = 0;\n-        for(int i = scrollToIndex; i < heights.length; i += 1) {\n-            sizeBelow += heights[i];\n-        }\n+    }\n@@ -2325,0 +2328,1 @@\n+  public void testScrollTo(boolean addIncremental, boolean layoutTwice, boolean selectIndex, int listViewHeight, int scrollToIndex, Integer[] heights) {\n@@ -2327,1 +2331,0 @@\n-        double viewportLength = listViewHeight - 2; \/\/ it would be better to calculate this from listView but there is no API for this\n@@ -2332,1 +2335,1 @@\n-                if (!empty && (item!=null)) {\n+                if (!empty && (item != null)) {\n@@ -2337,2 +2340,1 @@\n-        StageLoader sl = new StageLoader(listView);\n-        Toolkit.getToolkit().firePulse();\n+        StageLoader sl = new StageLoader(new VBox(listView));\n@@ -2345,0 +2347,4 @@\n+                listView.requestLayout();\n+                Toolkit.getToolkit().firePulse();\n+                listView.requestLayout();\n+\n@@ -2349,0 +2355,1 @@\n+\n@@ -2352,0 +2359,23 @@\n+        if (layoutTwice) {\n+            listView.requestLayout();\n+            Toolkit.getToolkit().firePulse();\n+        }\n+        if (selectIndex) {\n+            listView.getSelectionModel().select(scrollToIndex);\n+            Toolkit.getToolkit().firePulse();\n+        }\n+\n+        verifyListViewScrollTo(listView, listViewHeight, scrollToIndex, heights);\n+    }\n+\n+    public static void verifyListViewScrollTo(ListView listView, int listViewHeight, int scrollToIndex, Integer[] heights) {\n+        double sumOfHeights = 0;\n+        double viewportLength = listViewHeight - 2; \/\/ it would be better to calculate this from listView but there is no API for this\n+\n+        for(int height: heights) {\n+            sumOfHeights += height;\n+        }\n+        double sizeBelow = 0;\n+        for(int i = scrollToIndex; i < heights.length; i += 1) {\n+            sizeBelow += heights[i];\n+        }\n@@ -2364,1 +2394,1 @@\n-        if(Math.abs(lastCell.getLayoutY() - (viewportLength - lastCellSize)) <= 1.0) {\n+        if (Math.abs(lastCell.getLayoutY() - (viewportLength - lastCellSize)) <= 1.0) {\n@@ -2368,2 +2398,1 @@\n-        \/\/ System.out.println(\"sizeBelow: \" + sizeBelow);\n-        \/\/ System.out.println(\"shouldScrollToBottom: \" + shouldScrollToBottom);\n+        assertTrue(\"Our cell must be visible!\", scrollToCell.isVisible());\n@@ -2373,1 +2402,0 @@\n-            \/\/ System.out.println(\"Check1\");\n@@ -2378,1 +2406,0 @@\n-            \/\/ System.out.println(\"Check2\");\n@@ -2383,3 +2410,0 @@\n-            \/\/ System.out.println(\"Check3\");\n-            \/\/ System.out.println(\"lastCell.getLayoutY(),: \" + lastCell.getLayoutY());\n-            \/\/ System.out.println(\"viewportLength - lastCellSize: \" + (viewportLength - lastCellSize));\n@@ -2390,1 +2414,0 @@\n-            \/\/ System.out.println(\"Check4\");\n@@ -2393,1 +2416,0 @@\n-        \/\/ System.out.println(\"Succeeded all checks!\\n\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewTest.java","additions":52,"deletions":30,"binary":false,"changes":82,"status":"modified"}]}