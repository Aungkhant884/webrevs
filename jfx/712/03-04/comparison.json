{"files":[{"patch":"@@ -1056,1 +1056,0 @@\n-        recalculateEstimatedSize();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/VirtualFlow.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2281,0 +2281,115 @@\n+    @Test public void testMoreUnfixedCellScrollResize() {\n+\n+        \/\/ Sanity Check - it has to work with cases, where all cells have the same sizes\n+        testScrollTo(360,3, new Integer[]{20,20,20,20,20,20,20,20,20,20,20,20});\n+        testScrollTo(360,3, new Integer[]{20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20});\n+        testScrollTo(360,1, new Integer[]{20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20});\n+        testScrollTo(360,-1, new Integer[]{20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20});\n+\n+        \/\/ With 100 it's wrong, when addIncremental is set.\n+        testScrollTo(360,3, new Integer[]{100, 100, 100, 100, 100, 100, 100, 100, 100});\n+        testScrollTo(360,-1, new Integer[]{100, 100, 100, 100, 100, 100, 100, 100, 100});\n+\n+        \/\/ More complicated tests\n+        testScrollTo(360,2, new Integer[]{300,300,70,20});\n+        testScrollTo(400,2, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(400,-1, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(400,3, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(400,-1,new Integer[]{200, 200, 200, 200, 200, 200 ,200 ,200, 20, 20, 20, 20, 20, 20, 500, 20, 500, 20, 500});\n+        testScrollTo(400,-1,new Integer[]{200, 200, 200, 200, 200, 200 ,200 ,200, 20, 20, 20, 20, 20, 20, 400, 20, 400, 20, 400});\n+        testScrollTo(400,2,new Integer[]{500, 500, 20, 20, 100, 100, 100, 100, 100, 100});\n+    }\n+\n+    public void testScrollTo(int listViewHeight, int scrollToIndex, Integer[] heights) {\n+        if(scrollToIndex == -1) {\n+            scrollToIndex = heights.length - 1;\n+        }\n+        testScrollTo(false, listViewHeight, scrollToIndex, heights);\n+        testScrollTo(true, listViewHeight, scrollToIndex, heights);\n+    }\n+\n+  public void testScrollTo(boolean addIncremental, int listViewHeight, int scrollToIndex, Integer[] heights) {\n+\n+        \/\/ System.out.println(\"heights: \" + Arrays.toString(heights));\n+        \/\/ System.out.println(\"scrollToIndex: \" + scrollToIndex);\n+        \/\/ System.out.println(\"addIncremental: \" + addIncremental);\n+        double sumOfHeights = 0;\n+        for(int height: heights) {\n+            sumOfHeights += height;\n+        }\n+        double sizeBelow = 0;\n+        for(int i = scrollToIndex; i < heights.length; i += 1) {\n+            sizeBelow += heights[i];\n+        }\n+\n+        final ListView<Integer> listView = new ListView<Integer>();\n+        listView.setPrefHeight(listViewHeight);\n+        double viewportLength = listViewHeight - 2; \/\/ it would be better to calculate this from listView but there is no API for this\n+        listView.setCellFactory(lv -> new ListCell<Integer>() {\n+            @Override\n+            public void updateItem(Integer item, boolean empty) {\n+                super.updateItem(item, empty);\n+                if (!empty && (item!=null)) {\n+                    this.setPrefHeight(item);\n+                }\n+            }\n+        });\n+        StageLoader sl = new StageLoader(listView);\n+        Toolkit.getToolkit().firePulse();\n+        if(addIncremental) {\n+            \/\/ Adding the elments incrementally seems to make a difference!\n+            for(var height: heights) {\n+                \/\/ Adding them incrementally seems to be relevant\n+                listView.getItems().add(height);\n+                Toolkit.getToolkit().firePulse();\n+            }\n+        } else {\n+            listView.getItems().addAll(heights);\n+            Toolkit.getToolkit().firePulse();\n+        }\n+        listView.scrollTo(scrollToIndex);\n+        Toolkit.getToolkit().firePulse();\n+\n+        IndexedCell<Integer> firstCell = VirtualFlowTestUtils.getCell(listView, 0);\n+        IndexedCell<Integer> scrollToCell = VirtualFlowTestUtils.getCell(listView, scrollToIndex);\n+        IndexedCell<Integer> lastCell = VirtualFlowTestUtils.getCell(listView, heights.length - 1);\n+\n+        double lastCellSize = heights[heights.length -1];\n+\n+        boolean scrolledToTop = scrollToIndex == 0;\n+        boolean scrolledToBottomElement = scrollToIndex == heights.length - 1;\n+        boolean scrolledToBottom = false;\n+        boolean shouldScrollToBottom = (sizeBelow < viewportLength);\n+\n+        if(Math.abs(lastCell.getLayoutY() - (viewportLength - lastCellSize)) <= 1.0) {\n+            scrolledToBottom = true;\n+        }\n+\n+        \/\/ System.out.println(\"sizeBelow: \" + sizeBelow);\n+        \/\/ System.out.println(\"shouldScrollToBottom: \" + shouldScrollToBottom);\n+\n+        if(lastCell.isVisible() && sumOfHeights >= viewportLength) {\n+            \/\/ There shouldn't be any space between the last cell and the bottom\n+            \/\/ System.out.println(\"Check1\");\n+            assertTrue(\"Last cell shouldn't leave space between itself and the bottom\", lastCell.getLayoutY() + 1 > (viewportLength - lastCellSize));\n+        }\n+        if(sumOfHeights < viewportLength) {\n+            \/\/ If we have less cells then space, then all cells are shown, and the position of the last cell, is the sum of the height of the previous cells.\n+            \/\/ System.out.println(\"Check2\");\n+            assertEquals(\"Last cell should be at the bottom, if we scroll to it\", lastCell.getLayoutY(), sumOfHeights - lastCellSize,1.);\n+        }\n+        if(shouldScrollToBottom && sumOfHeights > viewportLength) {\n+            \/\/ If we scroll to the bottom, then the last cell should be exactly at the bottom\n+            \/\/ System.out.println(\"Check3\");\n+            \/\/ System.out.println(\"lastCell.getLayoutY(),: \" + lastCell.getLayoutY());\n+            \/\/ System.out.println(\"viewportLength - lastCellSize: \" + (viewportLength - lastCellSize));\n+            assertEquals(\"\", lastCell.getLayoutY(), viewportLength - lastCellSize,1.);\n+        }\n+        if(!shouldScrollToBottom && sumOfHeights > viewportLength) {\n+            \/\/ If we don't scroll to the bottom, and the cells are bigger than the available space, then our cell should be at the top.\n+            \/\/ System.out.println(\"Check4\");\n+            assertEquals(\"Our cell mut be at the top\", scrollToCell.getLayoutY(), 0,1.);\n+        }\n+        \/\/ System.out.println(\"Succeeded all checks!\\n\");\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewTest.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"modified"}]}