{"files":[{"patch":"@@ -1055,15 +1055,8 @@\n-        double origAbsoluteOffset = absoluteOffset;\n-        recalculateEstimatedSize();\n-        \/\/ if the last modification to the position was done via scrollPixels,\n-        \/\/ the absoluteOffset and position are already in sync.\n-        \/\/ However, the position can be modified via different ways (e.g. by\n-        \/\/ moving the scrollbar thumb), so we need to recalculate absoluteOffset\n-        \/\/ There is an exception to this: if cells are added\/removed, we want\n-        \/\/ to keep the absoluteOffset constant, hence we need to adjust the position.\n-\n-        if (lastCellCount != getCellCount()) {\n-            absoluteOffset = origAbsoluteOffset;\n-            adjustPosition();\n-        } else {\n-            adjustAbsoluteOffset();\n-        }\n+        \/\/ when we enter this method, the absoluteOffset and position are\n+        \/\/ already determined. In case this method invokes other methods\n+        \/\/ that may change either absoluteOffset or position, it is the\n+        \/\/ responsability of those methods to make both parameters are\n+        \/\/ changed in a consistent way.\n+        \/\/ For example, the recalculateEstimatedSize method also recalculates\n+        \/\/ the absoluteOffset and position.\n+\n@@ -1074,2 +1067,0 @@\n-\/\/            accumCell = null;\n-\/\/            accumCellParent.getChildren().clear();\n@@ -1337,0 +1328,2 @@\n+        recalculateAndImproveEstimatedSize(0);\n+\n@@ -1767,0 +1760,1 @@\n+                resizeCell(cell);\n@@ -1904,0 +1898,3 @@\n+        if (value == this.viewportLength) {\n+            return;\n+        }\n@@ -1906,0 +1903,1 @@\n+        recalculateEstimatedSize();\n@@ -1999,0 +1997,2 @@\n+        \/\/ when a cell is resized, our estimate needs to be updated.\n+        recalculateAndImproveEstimatedSize(0);\n@@ -2445,0 +2445,14 @@\n+    private void shiftDown() {\n+        T lastNonEmptyCell = getLastVisibleCell();\n+        T firstCell = cells.getFirst();\n+        int index = getCellIndex(firstCell);\n+        double end = getCellPosition(lastNonEmptyCell) + getCellLength(lastNonEmptyCell);\n+        double delta = viewportLength - end;\n+        if ((index > 0) && (delta > 0)) {\n+            for (int i = 0; i < cells.size(); i++) {\n+                T cell = cells.get(i);\n+                positionCell(cell, getCellPosition(cell) + delta);\n+            }\n+        }\n+    }\n+\n@@ -2489,0 +2503,1 @@\n+            shiftDown();\n@@ -3023,0 +3038,16 @@\n+        boolean keepRatio = ((cacheCount > 0) && !Double.isInfinite(this.absoluteOffset));\n+        double estSize = estimatedSize \/ itemCount;\n+\n+        double bound = 0;\n+        double oldOffset = absoluteOffset - bound;\n+        int oldIndex = 0;\n+        if (keepRatio) { \/\/ store index and offset\n+            while (absoluteOffset > bound) {\n+                oldOffset = absoluteOffset - bound;\n+                double h = getCellSize(oldIndex);\n+                if (h < 0) h = estSize;\n+                bound += h;\n+                oldIndex++;\n+            }\n+        }\n+\n@@ -3038,0 +3069,12 @@\n+\n+        if (keepRatio ) {\n+            double newOffset = 0;\n+            for (int i = 0; i < oldIndex-1; i++) {\n+                double h = getCellSize(i);\n+                if (h < 0) h = estSize;\n+                newOffset += h;\n+            }\n+            this.absoluteOffset = newOffset + oldOffset;\n+            adjustPosition();\n+        }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/VirtualFlow.java","additions":60,"deletions":17,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2188,0 +2188,230 @@\n+\n+    @Test public void testUnfixedCellScrollResize() {\n+        final ObservableList<Integer> items = FXCollections.observableArrayList(300,300,70,20);\n+        final ListView<Integer> listView = new ListView(items);\n+        listView.setPrefHeight(400);\n+        double viewportLength = 398; \/\/ it would be better to calculate this from listView but there is no API for this\n+        listView.setCellFactory(lv -> new ListCell<Integer>() {\n+            @Override\n+            public void updateItem(Integer item, boolean empty) {\n+                super.updateItem(item, empty);\n+                if (!empty && (item!=null)) {\n+                    this.setPrefHeight(item);\n+                }\n+            }\n+        });\n+        StageLoader sl = new StageLoader(listView);\n+        Toolkit.getToolkit().firePulse();\n+        listView.scrollTo(2);\n+        Toolkit.getToolkit().firePulse();\n+        int cc = VirtualFlowTestUtils.getCellCount(listView);\n+        boolean got70 = false;\n+        boolean got20 = false;\n+        for (int i = 0; i < cc; i++) {\n+            IndexedCell<Integer> cell = VirtualFlowTestUtils.getCell(listView, i);\n+            if ((cell != null) && (cell.getItem() == 20)) {\n+                assertEquals(\"Last cell doesn't end at listview end\", cell.getLayoutY(), viewportLength - 20,1.);\n+                got20 = true;\n+            }\n+            if ((cell != null) && (cell.getItem() == 70)) {\n+                assertEquals(\"Secondlast cell doesn't end properly\", cell.getLayoutY(), viewportLength - 20 - 70,1.);\n+                got70 = true;\n+            }\n+        }\n+        assertTrue (got20);\n+        assertTrue (got70);\n+        \/\/ resize cells and make sure they align after scrolling\n+        ObservableList<Integer> list = FXCollections.observableArrayList();\n+        list.addAll(300,300,20,21);\n+        listView.setItems(list);\n+        listView.scrollTo(4);\n+        Toolkit.getToolkit().firePulse();\n+        got20 = false;\n+        boolean got21 = false;\n+        for (int i = 0; i < cc; i++) {\n+            IndexedCell<Integer> cell = VirtualFlowTestUtils.getCell(listView, i);\n+            if ((cell != null) && (cell.getItem() == 21)) {\n+                assertEquals(\"Last cell doesn't end at listview end\", cell.getLayoutY(), viewportLength - 21,1.);\n+                got21 = true;\n+            }\n+            if ((cell != null) && (cell.getItem() == 20)) {\n+                assertEquals(\"Secondlast cell doesn't end properly\", cell.getLayoutY(), viewportLength - 21 - 20,1.);\n+                got20 = true;\n+            }\n+        }\n+        assertTrue (got20);\n+        assertTrue (got21);\n+    }\n+\n+\n+    @Test public void testNoEmptyEnd() {\n+        final ObservableList<Integer> items = FXCollections.observableArrayList(200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20);\n+        final ListView<Integer> listView = new ListView(items);\n+        listView.setPrefHeight(400);\n+        double viewportLength = 398;\n+        listView.setCellFactory(lv -> new ListCell<Integer>() {\n+            @Override\n+            public void updateItem(Integer item, boolean empty) {\n+                super.updateItem(item, empty);\n+                if (!empty && (item!=null)) {\n+                    this.setPrefHeight(item);\n+                }\n+            }\n+        });\n+        StageLoader sl = new StageLoader(listView);\n+        Toolkit.getToolkit().firePulse();\n+        listView.scrollTo(14);\n+        Toolkit.getToolkit().firePulse();\n+        int cc = VirtualFlowTestUtils.getCellCount(listView);\n+        assertEquals(cc, 15);\n+        boolean got70 = false;\n+        for (int i = 0; i < cc; i++) {\n+            IndexedCell<Integer> cell = VirtualFlowTestUtils.getCell(listView, i);\n+            int tens = Math.min(15-i,7);\n+            int hundreds = Math.max(8-i,0);\n+            double exp = 398 - 20 * tens - 200 * hundreds;\n+            double real = cell.getLayoutY();\n+            if (cell.isVisible()) {\n+                assertEquals(exp, real, 0.1);\n+            }\n+        }\n+    }\n+\n+\n+    @Test public void testMoreUnfixedCellScrollResize() {\n+\n+        \/\/ Sanity Check - it has to work with cases, where all cells have the same sizes\n+        testScrollTo(360,3, new Integer[]{20,20,20,20,20,20,20,20,20,20,20,20});\n+        testScrollTo(360,3, new Integer[]{20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20});\n+        testScrollTo(360,1, new Integer[]{20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20});\n+        testScrollTo(360,-1, new Integer[]{20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20});\n+\n+        \/\/ With 100 it's wrong, when addIncremental is set.\n+        testScrollTo(360,3, new Integer[]{100, 100, 100, 100, 100, 100, 100, 100, 100});\n+        testScrollTo(360,-1, new Integer[]{100, 100, 100, 100, 100, 100, 100, 100, 100});\n+\n+        \/\/ More complicated tests\n+        testScrollTo(360,2, new Integer[]{300,300,70,20});\n+        testScrollTo(400,2, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(400,-1, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(400,3, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(400,-1,new Integer[]{200, 200, 200, 200, 200, 200 ,200 ,200, 20, 20, 20, 20, 20, 20, 500, 20, 500, 20, 500});\n+        testScrollTo(400,-1,new Integer[]{200, 200, 200, 200, 200, 200 ,200 ,200, 20, 20, 20, 20, 20, 20, 400, 20, 400, 20, 400});\n+        testScrollTo(400,2,new Integer[]{500, 500, 20, 20, 100, 100, 100, 100, 100, 100});\n+        testScrollTo(400,8,new Integer[]{500, 500, 20, 20, 100, 100, 100, 100, 100, 100, 300, 300, 300, 300});\n+\n+        testScrollTo(400,2, new Integer[]{300,300,20,20});\n+        testScrollTo(400,2, new Integer[]{300,300,20,20,200,200});\n+        testScrollTo(400,2, new Integer[]{20,20,20,500,500});\n+\n+        testScrollTo(400,2, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(400,-1, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(400,3, new Integer[]{200, 200, 200, 200, 200, 200, 200, 200, 20, 20, 20, 20, 20, 20, 20});\n+        testScrollTo(400,-1,new Integer[]{200, 200, 200, 200, 200, 200 ,200 ,200, 20, 20, 20, 20, 20, 20, 500, 20, 500, 20, 500});\n+        testScrollTo(400,-1,new Integer[]{200, 200, 200, 200, 200, 200 ,200 ,200, 20, 20, 20, 20, 20, 20, 400, 20, 400, 20, 400});\n+        testScrollTo(400,2,new Integer[]{500, 500, 20, 20, 100, 100, 100, 100, 100, 100});\n+        testScrollTo(400,2,new Integer[]{500, 500, 500,500,500});\n+\n+    }\n+\n+    public void testScrollTo(int listViewHeight, int scrollToIndex, Integer[] heights) {\n+        if(scrollToIndex == -1) {\n+            scrollToIndex = heights.length - 1;\n+        }\n+        testScrollTo(false, false, false, listViewHeight, scrollToIndex, heights);\n+        testScrollTo(true, false, false, listViewHeight, scrollToIndex, heights);\n+        testScrollTo(true, true, false, listViewHeight, scrollToIndex, heights);\n+        testScrollTo(true, true, true, listViewHeight, scrollToIndex, heights);\n+\n+    }\n+\n+  public void testScrollTo(boolean addIncremental, boolean layoutTwice, boolean selectIndex, int listViewHeight, int scrollToIndex, Integer[] heights) {\n+        final ListView<Integer> listView = new ListView<Integer>();\n+        listView.setPrefHeight(listViewHeight);\n+        listView.setCellFactory(lv -> new ListCell<Integer>() {\n+            @Override\n+            public void updateItem(Integer item, boolean empty) {\n+                super.updateItem(item, empty);\n+                if (!empty && (item != null)) {\n+                    this.setPrefHeight(item);\n+                }\n+            }\n+        });\n+        StageLoader sl = new StageLoader(new VBox(listView));\n+        if(addIncremental) {\n+            \/\/ Adding the elments incrementally seems to make a difference!\n+            for(var height: heights) {\n+                \/\/ Adding them incrementally seems to be relevant\n+                listView.getItems().add(height);\n+                Toolkit.getToolkit().firePulse();\n+                listView.requestLayout();\n+                Toolkit.getToolkit().firePulse();\n+                listView.requestLayout();\n+\n+            }\n+        } else {\n+            listView.getItems().addAll(heights);\n+            Toolkit.getToolkit().firePulse();\n+\n+        }\n+        listView.scrollTo(scrollToIndex);\n+        Toolkit.getToolkit().firePulse();\n+        if (layoutTwice) {\n+            listView.requestLayout();\n+            Toolkit.getToolkit().firePulse();\n+        }\n+        if (selectIndex) {\n+            listView.getSelectionModel().select(scrollToIndex);\n+            Toolkit.getToolkit().firePulse();\n+        }\n+\n+        verifyListViewScrollTo(listView, listViewHeight, scrollToIndex, heights);\n+    }\n+\n+    public static void verifyListViewScrollTo(ListView listView, int listViewHeight, int scrollToIndex, Integer[] heights) {\n+        double sumOfHeights = 0;\n+        double viewportLength = listViewHeight - 2; \/\/ it would be better to calculate this from listView but there is no API for this\n+\n+        for(int height: heights) {\n+            sumOfHeights += height;\n+        }\n+        double sizeBelow = 0;\n+        for(int i = scrollToIndex; i < heights.length; i += 1) {\n+            sizeBelow += heights[i];\n+        }\n+\n+        IndexedCell<Integer> firstCell = VirtualFlowTestUtils.getCell(listView, 0);\n+        IndexedCell<Integer> scrollToCell = VirtualFlowTestUtils.getCell(listView, scrollToIndex);\n+        IndexedCell<Integer> lastCell = VirtualFlowTestUtils.getCell(listView, heights.length - 1);\n+\n+        double lastCellSize = heights[heights.length -1];\n+\n+        boolean scrolledToTop = scrollToIndex == 0;\n+        boolean scrolledToBottomElement = scrollToIndex == heights.length - 1;\n+        boolean scrolledToBottom = false;\n+        boolean shouldScrollToBottom = (sizeBelow < viewportLength);\n+\n+        if (Math.abs(lastCell.getLayoutY() - (viewportLength - lastCellSize)) <= 1.0) {\n+            scrolledToBottom = true;\n+        }\n+\n+        assertTrue(\"Our cell must be visible!\", scrollToCell.isVisible());\n+\n+        if(lastCell.isVisible() && sumOfHeights >= viewportLength) {\n+            \/\/ There shouldn't be any space between the last cell and the bottom\n+            assertTrue(\"Last cell shouldn't leave space between itself and the bottom\", lastCell.getLayoutY() + 1 > (viewportLength - lastCellSize));\n+        }\n+        if(sumOfHeights < viewportLength) {\n+            \/\/ If we have less cells then space, then all cells are shown, and the position of the last cell, is the sum of the height of the previous cells.\n+            assertEquals(\"Last cell should be at the bottom, if we scroll to it\", lastCell.getLayoutY(), sumOfHeights - lastCellSize,1.);\n+        }\n+        if(shouldScrollToBottom && sumOfHeights > viewportLength) {\n+            \/\/ If we scroll to the bottom, then the last cell should be exactly at the bottom\n+            assertEquals(\"\", lastCell.getLayoutY(), viewportLength - lastCellSize,1.);\n+        }\n+        if(!shouldScrollToBottom && sumOfHeights > viewportLength) {\n+            \/\/ If we don't scroll to the bottom, and the cells are bigger than the available space, then our cell should be at the top.\n+            assertEquals(\"Our cell mut be at the top\", scrollToCell.getLayoutY(), 0,1.);\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewTest.java","additions":230,"deletions":0,"binary":false,"changes":230,"status":"modified"}]}