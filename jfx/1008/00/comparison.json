{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.util.function.Predicate;\n@@ -68,0 +69,8 @@\n+\n+    public void clear() {\n+        backingList.clear();\n+    }\n+\n+    public void removeIf(Predicate<? super E> predicate) {\n+        backingList.removeIf(predicate);\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/SizeLimitedList.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-    private final SizeLimitedList<TablePositionBase> selectionHistory = new SizeLimitedList<>(10);\n+    private final SizeLimitedList<TablePositionBase> selectionHistory = new SizeLimitedList<>(50);\n@@ -79,0 +79,4 @@\n+                if (selectionHistory.size() > 0) {\n+                    \/\/ whenever the selection is replaced, reset the selection history\n+                    resetSelectionHistory();\n+                }\n@@ -256,1 +260,1 @@\n-        setSelectionPathDeviated(false);\n+        resetSelectionHistory();\n@@ -451,0 +455,6 @@\n+    private void resetSelectionHistory() {\n+        setSelectionPathDeviated(false);\n+        selectionHistory.clear();\n+        selectionHistory.add(getAnchor());\n+    }\n+\n@@ -727,0 +737,3 @@\n+            \/\/ remove deselected cell from selection history, if present\n+            selectionHistory.removeIf(i -> i.getRow() == cellRowToClear && i.getColumn() == focusedCell.getColumn());\n+\n@@ -786,3 +799,2 @@\n-            ObservableList<? extends TablePositionBase> selectedCells = getSelectedCells();\n-            if (selectedCells.size() >= 2) {\n-                TablePositionBase<TC> secondToLastSelectedCell = selectedCells.get(selectedCells.size() - 2);\n+            if (selectionHistory.size() >= 2) {\n+                TablePositionBase<TC> secondToLastSelectedCell = selectionHistory.get(1);\n@@ -799,0 +811,3 @@\n+            \/\/ remove deselected cell from selection history, if present\n+            selectionHistory.removeIf(i -> i.getRow() == focusedCellRow && i.getTableColumn().equals(cellColumnToClear));\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/TableViewBehaviorBase.java","additions":21,"deletions":6,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -859,1 +859,0 @@\n-    @Ignore(\"Bug persists\")\n@@ -866,0 +865,1 @@\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (1, col1)\n@@ -867,3 +867,2 @@\n-        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (1, col3)\n-        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (2, col3)\n-        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (3, col3)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (2, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (3, col2)\n@@ -874,1 +873,1 @@\n-        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col3)\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col2)\n@@ -879,1 +878,1 @@\n-        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (2, col3)\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (2, col2)\n@@ -884,2 +883,2 @@\n-        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (1, col3)\n-        assertFalse(debug(), sm.isSelected(1, col2));\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (1, col2)\n+        assertFalse(sm.isSelected(1, col2));\n@@ -889,1 +888,1 @@\n-        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (1, col2)\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (1, col1)\n@@ -893,0 +892,110 @@\n+    @Test public void testSelectionPathDeviationWorks2() {\n+        \/\/ select vertically, then select two items horizontally, then go back\n+        \/\/ in opposite direction\n+        sm.setCellSelectionEnabled(true);\n+        sm.clearAndSelect(1, col2);\n+\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);   \/\/ select (2, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col2)\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col1)\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col0)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col0)\n+        assertFalse(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col1)\n+        assertFalse(sm.isSelected(3, col0));\n+        assertFalse(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col2)\n+        assertFalse(sm.isSelected(3, col0));\n+        assertFalse(sm.isSelected(3, col1));\n+        assertFalse(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (2, col2)\n+        assertFalse(sm.isSelected(3, col0));\n+        assertFalse(sm.isSelected(3, col1));\n+        assertFalse(sm.isSelected(3, col2));\n+        assertFalse(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+    }\n+\n+    @Test public void testSelectionPathDeviationWorks3() {\n+        \/\/ select horizontally, then select one item vertically, then start\n+        \/\/ another selection and go back in opposite direction\n+        sm.setCellSelectionEnabled(true);\n+        sm.clearAndSelect(1, col0);\n+\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (1, col1)\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (1, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (2, col2)\n+        assertTrue(sm.isSelected(1, col0));\n+        assertTrue(sm.isSelected(1, col1));\n+        assertTrue(sm.isSelected(1, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (2, col2)\n+        assertTrue(sm.isSelected(1, col0));\n+        assertTrue(sm.isSelected(1, col1));\n+        assertTrue(sm.isSelected(1, col2));\n+        assertFalse(sm.isSelected(2, col2));\n+\n+        \/\/ new selection: anchor changes\n+        sm.clearAndSelect(3, col0);\n+        assertFalse(sm.isSelected(1, col0));\n+        assertFalse(sm.isSelected(1, col1));\n+        assertFalse(sm.isSelected(1, col2));\n+        assertFalse(sm.isSelected(2, col2));\n+\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col1)\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (4, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (5, col2)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(4, col2));\n+        assertTrue(sm.isSelected(5, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (5, col2)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(4, col2));\n+        assertFalse(sm.isSelected(5, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (4, col2)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertFalse(sm.isSelected(4, col2));\n+        assertFalse(sm.isSelected(5, col2));\n+\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col2)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertFalse(sm.isSelected(3, col2));\n+        assertFalse(sm.isSelected(4, col2));\n+        assertFalse(sm.isSelected(5, col2));\n+\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col1)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertFalse(sm.isSelected(3, col1));\n+        assertFalse(sm.isSelected(3, col2));\n+        assertFalse(sm.isSelected(4, col2));\n+        assertFalse(sm.isSelected(5, col2));\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewKeyInputTest.java","additions":119,"deletions":10,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -910,1 +910,0 @@\n-    @Ignore(\"Bug persists\")\n@@ -917,0 +916,1 @@\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (1, col1)\n@@ -918,3 +918,2 @@\n-        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (1, col3)\n-        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (2, col3)\n-        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (3, col3)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (2, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (3, col2)\n@@ -925,1 +924,1 @@\n-        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col3)\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col2)\n@@ -930,1 +929,1 @@\n-        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (2, col3)\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (2, col2)\n@@ -935,2 +934,2 @@\n-        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (1, col3)\n-        assertFalse(debug(), sm.isSelected(1, col2));\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (1, col2)\n+        assertFalse(sm.isSelected(1, col2));\n@@ -940,1 +939,1 @@\n-        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (1, col2)\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (1, col1)\n@@ -944,0 +943,110 @@\n+    @Test public void testSelectionPathDeviationWorks2() {\n+        \/\/ select vertically, then select two items horizontally, then go back\n+        \/\/ in opposite direction\n+        sm.setCellSelectionEnabled(true);\n+        sm.clearAndSelect(1, col2);\n+\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);   \/\/ select (2, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col2)\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col1)\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col0)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col0)\n+        assertFalse(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col1)\n+        assertFalse(sm.isSelected(3, col0));\n+        assertFalse(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col2)\n+        assertFalse(sm.isSelected(3, col0));\n+        assertFalse(sm.isSelected(3, col1));\n+        assertFalse(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (2, col2)\n+        assertFalse(sm.isSelected(3, col0));\n+        assertFalse(sm.isSelected(3, col1));\n+        assertFalse(sm.isSelected(3, col2));\n+        assertFalse(sm.isSelected(2, col2));\n+        assertTrue(sm.isSelected(1, col2));\n+    }\n+\n+    @Test public void testSelectionPathDeviationWorks3() {\n+        \/\/ select horizontally, then select one item vertically, then start\n+        \/\/ another selection and go back in opposite direction\n+        sm.setCellSelectionEnabled(true);\n+        sm.clearAndSelect(1, col0);\n+\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (1, col1)\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (1, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (2, col2)\n+        assertTrue(sm.isSelected(1, col0));\n+        assertTrue(sm.isSelected(1, col1));\n+        assertTrue(sm.isSelected(1, col2));\n+        assertTrue(sm.isSelected(2, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (2, col2)\n+        assertTrue(sm.isSelected(1, col0));\n+        assertTrue(sm.isSelected(1, col1));\n+        assertTrue(sm.isSelected(1, col2));\n+        assertFalse(sm.isSelected(2, col2));\n+\n+        \/\/ new selection: anchor changes\n+        sm.clearAndSelect(3, col0);\n+        assertFalse(sm.isSelected(1, col0));\n+        assertFalse(sm.isSelected(1, col1));\n+        assertFalse(sm.isSelected(1, col2));\n+        assertFalse(sm.isSelected(2, col2));\n+\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col1)\n+        keyboard.doRightArrowPress(KeyModifier.SHIFT);   \/\/ select (3, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (4, col2)\n+        keyboard.doDownArrowPress(KeyModifier.SHIFT);    \/\/ select (5, col2)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(4, col2));\n+        assertTrue(sm.isSelected(5, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (5, col2)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertTrue(sm.isSelected(4, col2));\n+        assertFalse(sm.isSelected(5, col2));\n+\n+        keyboard.doUpArrowPress(KeyModifier.SHIFT);    \/\/ deselect (4, col2)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertTrue(sm.isSelected(3, col2));\n+        assertFalse(sm.isSelected(4, col2));\n+        assertFalse(sm.isSelected(5, col2));\n+\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col2)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertTrue(sm.isSelected(3, col1));\n+        assertFalse(sm.isSelected(3, col2));\n+        assertFalse(sm.isSelected(4, col2));\n+        assertFalse(sm.isSelected(5, col2));\n+\n+        keyboard.doLeftArrowPress(KeyModifier.SHIFT);    \/\/ deselect (3, col1)\n+        assertTrue(sm.isSelected(3, col0));\n+        assertFalse(sm.isSelected(3, col1));\n+        assertFalse(sm.isSelected(3, col2));\n+        assertFalse(sm.isSelected(4, col2));\n+        assertFalse(sm.isSelected(5, col2));\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewKeyInputTest.java","additions":119,"deletions":10,"binary":false,"changes":129,"status":"modified"}]}