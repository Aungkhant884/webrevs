{"files":[{"patch":"@@ -534,0 +534,7 @@\n+            \/\/ Not embedded in another toolkit, so disable automatic tabbing for all windows\n+            \/\/ We use a guarded call to preserve the ability to run on 10.10 or 10.11.\n+            \/\/ Using a guard, instead of reflection, assumes the Xcode used to\n+            \/\/ build includes MacOSX SDK 10.12 or later\n+            if (@available(macOS 10.12, *)) {\n+                [NSWindow setAllowsAutomaticWindowTabbing:NO];\n+            }\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.m","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.stage;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Stage;\n+import javafx.stage.WindowEvent;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import test.util.Util;\n+\n+import static org.junit.Assert.*;\n+\n+public class DualWindowTest {\n+\n+    static final double STAGE_SIZE = 200;\n+\n+    static final double STAGE1_X = 100;\n+    static final double STAGE1_Y = 100;\n+\n+    static final double STAGE2_X = 400;\n+    static final double STAGE2_Y = 120;\n+\n+    static CountDownLatch startupLatch;\n+    static Stage stage1;\n+    static Stage stage2;\n+    static TestButton button1;\n+    static TestButton button2;\n+\n+    Robot robot;\n+\n+    static class TestButton extends Button {\n+        CountDownLatch latch;\n+\n+        TestButton(String text) {\n+            super(text);\n+            this.setOnAction(e -> latch.countDown());\n+        }\n+    }\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage stage1) {\n+            Platform.setImplicitExit(false);\n+\n+            DualWindowTest.stage1 = stage1;\n+            TestButton button1 = new TestButton(\"Button 1\");\n+            DualWindowTest.button1 = button1;\n+            StackPane root1 = new StackPane(button1);\n+            stage1.setScene(new Scene(root1, STAGE_SIZE, STAGE_SIZE));\n+            stage1.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> {\n+                Platform.runLater(() -> {\n+                    stage1.setX(STAGE1_X);\n+                    stage1.setY(STAGE1_Y);\n+                    startupLatch.countDown();\n+                });\n+            });\n+            stage1.show();\n+\n+            Stage stage2 = new Stage();\n+            DualWindowTest.stage2 = stage2;\n+            TestButton button2 = new TestButton(\"Button 2\");\n+            DualWindowTest.button2 = button2;\n+            StackPane root2 = new StackPane(button2);\n+            stage2.setScene(new Scene(root2, STAGE_SIZE, STAGE_SIZE));\n+            stage2.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> {\n+                Platform.runLater(() -> {\n+                    stage2.setX(STAGE2_X);\n+                    stage2.setY(STAGE2_Y);\n+                    startupLatch.countDown();\n+                });\n+            });\n+            stage2.show();\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void setupOnce() throws Exception {\n+        startupLatch = new CountDownLatch(2);\n+        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n+        assertTrue(\"Timeout waiting for FX runtime to start\",\n+                startupLatch.await(15, TimeUnit.SECONDS));\n+    }\n+\n+    @AfterClass\n+    public static void teardown() {\n+        Platform.runLater(() -> {\n+            if (stage1 != null) stage1.hide();\n+            if (stage2 != null) stage2.hide();\n+            Platform.exit();\n+        });\n+    }\n+\n+    @Before\n+    public void setup() {\n+        Util.runAndWait(() -> robot = new Robot());\n+    }\n+\n+    private void mouseClick(Scene scene, double x, double y) {\n+        Util.sleep(200);\n+        Util.runAndWait(() -> {\n+            robot.mouseMove((int) (scene.getWindow().getX() + scene.getX() + x),\n+                    (int) (scene.getWindow().getY() + scene.getY() + y));\n+        });\n+        Util.sleep(200);\n+        Util.runAndWait(() -> {\n+            robot.mousePress(MouseButton.PRIMARY);\n+            robot.mouseRelease(MouseButton.PRIMARY);\n+        });\n+    }\n+\n+    void clickButton(TestButton button) throws Exception {\n+        button.latch = new CountDownLatch(1);\n+        mouseClick(button.getScene(),\n+                   button.getLayoutX() + button.getWidth() \/ 2,\n+                   button.getLayoutY() + button.getHeight() \/ 2);\n+        assertTrue(button.getText() + \" action not fired\",\n+                   button.latch.await(5, TimeUnit.SECONDS));\n+    }\n+\n+    @Test\n+    public void testTwoStages() throws Exception {\n+        Util.sleep(1000);\n+        Util.runAndWait(() -> {\n+            assertEquals(STAGE1_X, stage1.getX(), 1.0);\n+            assertEquals(STAGE1_Y, stage1.getY(), 1.0);\n+            assertEquals(STAGE2_X, stage2.getX(), 1.0);\n+            assertEquals(STAGE2_Y, stage2.getY(), 1.0);\n+        });\n+        clickButton(button1);\n+        clickButton(button2);\n+    }\n+\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/DualWindowTest.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"}]}