{"files":[{"patch":"@@ -59,0 +59,18 @@\n+    @Test\n+    public void test_rt35857_removeFiltered() {\n+        ObservableList<String> copyList = FXCollections.observableArrayList(list);\n+        \/\/ no relation, but use a different method to remove just to be on the super safe side\n+        filteredList.forEach(e -> copyList.remove(e));\n+        \/\/ list has duplicates!\n+        list.removeAll(filteredList);\n+        assertEquals(copyList, list);\n+    }\n+\n+    @Test\n+    public void test_rt35857_retainFiltered() {\n+        ObservableList<String> copyFiltered = FXCollections.observableArrayList(filteredList);\n+        list.retainAll(filteredList);\n+        assertEquals(\"sanity: filteredList unchanged\", copyFiltered, filteredList);\n+        assertEquals(filteredList, list);\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/FilteredListTest.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.ArrayList;\n@@ -243,0 +244,10 @@\n+    @Test\n+    public void testRetainAllEmptySource() {\n+        \/\/ grab default data\n+        List<String> data = new ArrayList<>(list);\n+        \/\/ retain none == remove all\n+        list.retainAll();\n+        assertTrue(list.isEmpty());\n+        mlo.check1AddRemove(list, data, 0, 0);\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ObservableListTest.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -83,0 +83,1 @@\n+import static javafx.collections.FXCollections.*;\n@@ -865,0 +866,46 @@\n+\/\/--------- regression testing of JDK-8093144 (was: RT-35857)\n+\n+    @Test\n+    public void test_rt35857_selectLast_retainAllSelected() {\n+        final ListView<String> listView = new ListView<String>(observableArrayList(\"A\", \"B\", \"C\"));\n+        listView.getSelectionModel().select(listView.getItems().size() - 1);\n+\n+        assert_rt35857(listView.getItems(), listView.getSelectionModel(), true);\n+    }\n+\n+    @Test\n+    public void test_rt35857_selectLast_removeAllSelected() {\n+        final ListView<String> listView = new ListView<String>(observableArrayList(\"A\", \"B\", \"C\"));\n+        listView.getSelectionModel().select(listView.getItems().size() - 1);\n+\n+        assert_rt35857(listView.getItems(), listView.getSelectionModel(), false);\n+    }\n+\n+    @Test\n+    public void test_rt35857_selectFirst_retainAllSelected() {\n+        final ListView<String> listView = new ListView<String>(observableArrayList(\"A\", \"B\", \"C\"));\n+        listView.getSelectionModel().select(0);\n+\n+        assert_rt35857(listView.getItems(), listView.getSelectionModel(), true);\n+    }\n+\n+    \/**\n+     * Modifies the items by retain\/removeAll (depending on the given flag) selectedItems\n+     * of the selectionModels and asserts the state of the items.\n+     *\/\n+    protected <T> void assert_rt35857(ObservableList<T> items, MultipleSelectionModel<T> sm, boolean retain) {\n+        T selectedItem = sm.getSelectedItem();\n+        assertNotNull(\"sanity: \", selectedItem);\n+        ObservableList<T> expected;\n+        if (retain) {\n+            expected = FXCollections.observableArrayList(selectedItem);\n+            items.retainAll(sm.getSelectedItems());\n+        } else {\n+            expected = FXCollections.observableArrayList(items);\n+            expected.remove(selectedItem);\n+            items.removeAll(sm.getSelectedItems());\n+        }\n+        String modified = (retain ? \" retainAll \" : \" removeAll \") + \" selectedItems \";\n+        assertEquals(\"expected list after\" + modified, expected, items);\n+    }\n+\n@@ -881,0 +928,2 @@\n+\/\/-------- end regression testing of JDK-8093144\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewTest.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import static javafx.collections.FXCollections.*;\n@@ -2741,0 +2742,46 @@\n+  \/\/--------- regression testing of JDK-8093144 (was: RT-35857)\n+\n+    @Test\n+    public void test_rt35857_selectLast_retainAllSelected() {\n+        TableView<String> tableView = new TableView<String>(observableArrayList(\"A\", \"B\", \"C\"));\n+        tableView.getSelectionModel().select(tableView.getItems().size() - 1);\n+\n+        assert_rt35857(tableView.getItems(), tableView.getSelectionModel(), true);\n+    }\n+\n+    @Test\n+    public void test_rt35857_selectLast_removeAllSelected() {\n+        TableView<String> tableView = new TableView<String>(observableArrayList(\"A\", \"B\", \"C\"));\n+        tableView.getSelectionModel().select(tableView.getItems().size() - 1);\n+\n+        assert_rt35857(tableView.getItems(), tableView.getSelectionModel(), false);\n+    }\n+\n+    @Test\n+    public void test_rt35857_selectFirst_retainAllSelected() {\n+        TableView<String> tableView = new TableView<String>(observableArrayList(\"A\", \"B\", \"C\"));\n+        tableView.getSelectionModel().select(0);\n+\n+        assert_rt35857(tableView.getItems(), tableView.getSelectionModel(), true);\n+    }\n+\n+    \/**\n+     * Modifies the items by retain\/removeAll (depending on the given flag) selectedItems\n+     * of the selectionModels and asserts the state of the items.\n+     *\/\n+    protected <T> void assert_rt35857(ObservableList<T> items, MultipleSelectionModel<T> sm, boolean retain) {\n+        T selectedItem = sm.getSelectedItem();\n+        ObservableList<T> expected;\n+        if (retain) {\n+            expected = FXCollections.observableArrayList(selectedItem);\n+            items.retainAll(sm.getSelectedItems());\n+        } else {\n+            expected = FXCollections.observableArrayList(items);\n+            expected.remove(selectedItem);\n+            items.removeAll(sm.getSelectedItems());\n+        }\n+        String modified = (retain ? \" retainAll \" : \" removeAll \") + \" selectedItems \";\n+        assertEquals(\"expected list after\" + modified, expected, items);\n+    }\n+\n+\n@@ -2757,0 +2804,2 @@\n+\/\/--------- end regression testing of JDK-8093144 (was: RT-35857)\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewTest.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -3489,0 +3489,62 @@\n+    \/\/--------- regression testing of JDK-8093144 (was: RT-35857)\n+\n+    \/**\n+     * Note: 8093144 is not an issue for the current implementation of TreeTableView\/SelectionModel\n+     * because selectedItems.getModelItem delegates to TreeTableView.getRow which is implemented\n+     * to look into its cached items.\n+     * <p>\n+     * These regression tests guard agains potential future changes in implementation.\n+     *\/\n+    @Test\n+    public void test_rt35857_selectLast_retainAllSelected() {\n+        TreeTableView<String> treeView = new TreeTableView<String>(createTreeItem());\n+        treeView.getSelectionModel().select(treeView.getRoot().getChildren().size());\n+\n+        assert_rt35857(treeView.getRoot().getChildren(), treeView.getSelectionModel(), true);\n+    }\n+\n+    @Test\n+    public void test_rt35857_selectLast_removeAllSelected() {\n+        TreeTableView<String> treeView = new TreeTableView<String>(createTreeItem());\n+        treeView.getSelectionModel().select(treeView.getRoot().getChildren().size());\n+\n+        assert_rt35857(treeView.getRoot().getChildren(), treeView.getSelectionModel(), false);\n+    }\n+\n+    @Test\n+    public void test_rt35857_selectFirst_retainAllSelected() {\n+        TreeTableView<String> treeView = new TreeTableView<String>(createTreeItem());\n+        treeView.getSelectionModel().select(1);\n+\n+        assert_rt35857(treeView.getRoot().getChildren(), treeView.getSelectionModel(), true);\n+    }\n+\n+    \/**\n+     * Creates and returns an expanded TreeItem with 3 children.\n+     *\/\n+    protected TreeItem<String> createTreeItem() {\n+        TreeItem<String> root = new TreeItem<>(\"Root\");\n+        root.setExpanded(true);\n+        root.getChildren().setAll(new TreeItem(\"A\"), new TreeItem(\"B\"), new TreeItem(\"C\"));\n+        return root;\n+    }\n+\n+    \/**\n+     * Modifies the items by retain\/removeAll (depending on the given flag) selectedItems\n+     * of the selectionModels and asserts the state of the items.\n+     *\/\n+    protected <T> void assert_rt35857(ObservableList<T> items, MultipleSelectionModel<T> sm, boolean retain) {\n+        T selectedItem = sm.getSelectedItem();\n+        ObservableList<T> expected;\n+        if (retain) {\n+            expected = FXCollections.observableArrayList(selectedItem);\n+            items.retainAll(sm.getSelectedItems());\n+        } else {\n+            expected = FXCollections.observableArrayList(items);\n+            expected.remove(selectedItem);\n+            items.removeAll(sm.getSelectedItems());\n+        }\n+        String modified = (retain ? \" retainAll \" : \" removeAll \") + \" selectedItems \";\n+        assertEquals(\"expected list after\" + modified, expected, items);\n+    }\n+\n@@ -3511,0 +3573,1 @@\n+    \/\/--------- end regression testing of JDK-8093144 (was: RT-35857)\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewTest.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -1652,0 +1652,62 @@\n+    \/\/--------- regression testing of JDK-8093144 (was: RT-35857)\n+\n+    \/**\n+     * Note: 8093144 is not an issue for the current implementation of TreeView\/SelectionModel\n+     * because selectedItems.getModelItem delegates to TreeView.getRow which is implemented\n+     * to look into its cached items.\n+     * <p>\n+     * These regression tests guard agains potential future changes in implementation.\n+     *\/\n+    @Test\n+    public void test_rt35857_selectLast_retainAllSelected() {\n+        TreeView<String> treeView = new TreeView<String>(createTreeItem());\n+        treeView.getSelectionModel().select(treeView.getRoot().getChildren().size());\n+\n+        assert_rt35857(treeView.getRoot().getChildren(), treeView.getSelectionModel(), true);\n+    }\n+\n+    @Test\n+    public void test_rt35857_selectLast_removeAllSelected() {\n+        TreeView<String> treeView = new TreeView<String>(createTreeItem());\n+        treeView.getSelectionModel().select(treeView.getRoot().getChildren().size());\n+\n+        assert_rt35857(treeView.getRoot().getChildren(), treeView.getSelectionModel(), false);\n+    }\n+\n+    @Test\n+    public void test_rt35857_selectFirst_retainAllSelected() {\n+        TreeView<String> treeView = new TreeView<String>(createTreeItem());\n+        treeView.getSelectionModel().select(1);\n+\n+        assert_rt35857(treeView.getRoot().getChildren(), treeView.getSelectionModel(), true);\n+    }\n+\n+    \/**\n+     * Creates and returns an expanded TreeItem with 3 children.\n+     *\/\n+    protected TreeItem<String> createTreeItem() {\n+        TreeItem<String> root = new TreeItem<>(\"Root\");\n+        root.setExpanded(true);\n+        root.getChildren().setAll(new TreeItem(\"A\"), new TreeItem(\"B\"), new TreeItem(\"C\"));\n+        return root;\n+    }\n+\n+    \/**\n+     * Modifies the items by retain\/removeAll (depending on the given flag) selectedItems\n+     * of the selectionModels and asserts the state of the items.\n+     *\/\n+    protected <T> void assert_rt35857(ObservableList<T> items, MultipleSelectionModel<T> sm, boolean retain) {\n+        T selectedItem = sm.getSelectedItem();\n+        ObservableList<T> expected;\n+        if (retain) {\n+            expected = FXCollections.observableArrayList(selectedItem);\n+            items.retainAll(sm.getSelectedItems());\n+        } else {\n+            expected = FXCollections.observableArrayList(items);\n+            expected.remove(selectedItem);\n+            items.removeAll(sm.getSelectedItems());\n+        }\n+        String modified = (retain ? \" retainAll \" : \" removeAll \") + \" selectedItems \";\n+        assertEquals(\"expected list after\" + modified, expected, items);\n+    }\n+\n@@ -1673,0 +1735,1 @@\n+  \/\/--------- end regression testing of JDK-8093144 (was: RT-35857)\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeViewTest.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"modified"}]}