{"files":[{"patch":"@@ -381,1 +381,1 @@\n-IOS.webview.lib = \"javafx_ios_webnode\"\n+IOS.webview.lib = \"webview\"\n@@ -391,1 +391,1 @@\n-IOS.webview.arm.lib = \"javafx_ios_webnode_${archArm}\"\n+IOS.webview.arm.lib = \"webview_${archArm}\"\n@@ -399,1 +399,1 @@\n-IOS.webview.arm64.lib = \"javafx_ios_webnode_${archArm64}\"\n+IOS.webview.arm64.lib = \"webview_${archArm64}\"\n@@ -407,1 +407,1 @@\n-IOS.webview.x86.lib = \"javafx_ios_webnode_${archX86}\"\n+IOS.webview.x86.lib = \"webview_${archX86}\"\n@@ -415,1 +415,1 @@\n-IOS.webview.x86_64.lib = \"javafx_ios_webnode_${archX86_64}\"\n+IOS.webview.x86_64.lib = \"webview_${archX86_64}\"\n","filename":"buildSrc\/ios.gradle","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.sg.prism.web;\n+\n+import com.sun.javafx.geom.BaseBounds;\n+import com.sun.javafx.geom.RectBounds;\n+import com.sun.javafx.sg.prism.NGGroup;\n+import com.sun.prism.Graphics;\n+\n+public final class NGWebView extends NGGroup {\n+    private volatile float width, height;\n+\n+    public void resize(float w, float h) {\n+        if (width != w || height != h) {\n+            width = w;\n+            height = h;\n+            geometryChanged();\n+        }\n+    }\n+\n+    \/\/ Invoked on JavaFX User Thread.\n+    public void update() {\n+    }\n+\n+    public void requestRender() {\n+        visualsChanged();\n+    }\n+\n+    private final RectBounds destBounds = new RectBounds();\n+\n+    @Override\n+    protected void doRender(Graphics g) {\n+        renderContent(g);\n+    }\n+\n+    @Override\n+    public void setTransformedBounds(BaseBounds bounds, boolean byTransformChangeOnly) {\n+        super.setTransformedBounds(bounds, byTransformChangeOnly);\n+    }\n+\n+    \/\/ Invoked on Render Thread.\n+    @Override\n+    protected void renderContent(Graphics g) {\n+        if (g == null || width <= 0 || height <= 0) {\n+            return;\n+        }\n+        g.getTransformNoClone().transform(transformedBounds, destBounds);\n+    }\n+\n+    @Override public boolean hasOverlappingContents() {\n+        return false;\n+    }\n+\n+    @Override protected boolean hasVisuals() {\n+        return true;\n+    }\n+}\n","filename":"modules\/javafx.web\/src\/ios\/java\/com\/sun\/javafx\/sg\/prism\/web\/NGWebView.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -259,1 +259,1 @@\n-        Method[] m = clz.getMethods();\n+        Method[] m = clz.getDeclaredMethods();\n","filename":"modules\/javafx.web\/src\/ios\/java\/javafx\/scene\/web\/ExportedJavaObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,4 +124,4 @@\n-        Integer jsId = (Integer) webEngine.executeScript(sb.toString());\n-        if (jsId != null) {\n-            exportedObjectsByJSIds.put(jsId.toString(), jsObj);\n-            jsIdsByExportedObjects.put(jsObj, jsId.toString());\n+        String jsId = String.valueOf(webEngine.executeScript(sb.toString()));\n+        if (!jsId.equals(\"null\")) {\n+            exportedObjectsByJSIds.put(jsId, jsObj);\n+            jsIdsByExportedObjects.put(jsObj, jsId);\n@@ -207,1 +207,2 @@\n-            populateJavaObjects();\n+            objectIdCounter.set(0);\n+            exportedObjectsByJavaObject.clear();\n@@ -213,0 +214,1 @@\n+            populateJavaObjects();\n","filename":"modules\/javafx.web\/src\/ios\/java\/javafx\/scene\/web\/JS2JavaBridge.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -565,0 +565,4 @@\n+        LoadWorker lw = (LoadWorker) getLoadWorker();\n+        if (lw != null) {\n+            lw.cancelAndReset();\n+        }\n@@ -571,0 +575,3 @@\n+    \/* Reloads the current content directly *\/\n+    private native void _reload(long handle);\n+\n@@ -577,0 +584,1 @@\n+        _reload(view.get().getNativeHandle());\n@@ -606,5 +614,6 @@\n-\n-        try {\n-            return js2javaBridge.decode(retVal);\n-        } catch (Exception ex) {\n-            System.err.println(\"Couldn't parse arguments. \" + ex);\n+        if (retVal != null) {\n+            try {\n+                return js2javaBridge.decode(retVal);\n+            } catch (Exception ex) {\n+                System.err.println(\"Couldn't parse arguments. \" + ex);\n+            }\n@@ -863,0 +872,1 @@\n+                pageListener.onLoadFinished();\n@@ -865,1 +875,0 @@\n-                pageListener.onLoadFinished();\n@@ -897,1 +906,1 @@\n-            e.printStackTrace();\n+            System.err.println(\"Error parsing html: \" + e.getLocalizedMessage());\n@@ -906,4 +915,0 @@\n-            updateProgress(1.0);\n-            updateState(Worker.State.SUCCEEDED);\n-            location.set(loc);\n-            document.invalidate(true);\n@@ -913,0 +918,4 @@\n+            updateProgress(1.0);\n+            location.set(loc);\n+            document.invalidate(true);\n+            updateState(Worker.State.SUCCEEDED);\n","filename":"modules\/javafx.web\/src\/ios\/java\/javafx\/scene\/web\/WebEngine.java","additions":20,"deletions":11,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import javafx.application.Platform;\n@@ -48,0 +49,1 @@\n+import com.sun.javafx.sg.prism.web.NGWebView;\n@@ -106,1 +108,1 @@\n-                throw new UnsupportedOperationException(\"Not supported yet.\"); \/\/To change body of generated methods, choose Tools | Templates.\n+                \/\/ Not supported yet\n@@ -109,0 +111,2 @@\n+\n+        System.loadLibrary(\"webview\");\n@@ -125,0 +129,1 @@\n+    private boolean nativeVisible = true;\n@@ -343,1 +348,1 @@\n-                _setVisible(handle, newValue);\n+                setNativeVisible(handle, newValue);\n@@ -1032,1 +1037,2 @@\n-                \/\/getPGWebView().update(); \/\/ creates new render queues\n+                final NGWebView peer = NodeHelper.getPeer(this);\n+                peer.update(); \/\/ creates new render queues\n@@ -1035,0 +1041,1 @@\n+            setNativeVisible(handle, true);\n@@ -1036,1 +1043,1 @@\n-            _setVisible(handle, false);\n+            setNativeVisible(handle, false);\n@@ -1045,0 +1052,4 @@\n+    {\n+        \/\/ To initialize the class helper at the beginning each constructor of this class\n+        WebViewHelper.initHelper(this);\n+    }\n@@ -1050,2 +1061,1 @@\n-        \/\/ return new NGWebView();\n-        return null; \/\/ iOS doesn't need this method.\n+        return new NGWebView();\n@@ -1075,1 +1085,1 @@\n-        \/\/PGWebView peer = getPGWebView();\n+        final NGWebView peer = NodeHelper.getPeer(this);\n@@ -1078,1 +1088,1 @@\n-            \/\/peer.resize((float)getWidth(), (float)getHeight());\n+            peer.resize((float)getWidth(), (float)getHeight());\n@@ -1081,1 +1091,1 @@\n-            \/\/peer.requestRender();\n+            peer.requestRender();\n@@ -1110,0 +1120,6 @@\n+    private void setNativeVisible(long handle, boolean v) {\n+        if (nativeVisible != v) {\n+            nativeVisible = v;\n+            _setVisible(handle, v);\n+        }\n+    }\n@@ -1113,1 +1129,1 @@\n-        engine.notifyLoadStarted();\n+        checkThreadAndRun(engine::notifyLoadStarted);\n@@ -1116,1 +1132,1 @@\n-        engine.notifyLoadFinished(loc, content);\n+        checkThreadAndRun(() -> engine.notifyLoadFinished(loc, content));\n@@ -1119,1 +1135,1 @@\n-        engine.notifyLoadFailed();\n+        checkThreadAndRun(engine::notifyLoadFailed);\n@@ -1122,1 +1138,1 @@\n-        engine.notifyJavaCall(arg);\n+        checkThreadAndRun(() -> engine.notifyJavaCall(arg));\n@@ -1125,0 +1141,7 @@\n+    private static void checkThreadAndRun(Runnable runnable) {\n+        if (Platform.isFxApplicationThread()) {\n+            runnable.run();\n+        } else {\n+            Platform.runLater(runnable);\n+        }\n+    }\n","filename":"modules\/javafx.web\/src\/ios\/java\/javafx\/scene\/web\/WebView.java","additions":36,"deletions":13,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#import <WebKit\/WebKit.h>\n@@ -40,2 +41,2 @@\n-@interface WebViewImpl : NSObject<UIWebViewDelegate> {\n-    UIWebView *webView;\n+@interface WebViewImpl : NSObject<WKNavigationDelegate> {\n+    WKWebView *webView;\n@@ -46,1 +47,0 @@\n-    NSString *jsResult;\n@@ -68,0 +68,1 @@\n+- (void)reload;\n@@ -69,2 +70,1 @@\n-- (NSString *)getScriptResult;\n-- (UIWebView *)getWebView;\n+- (WKWebView *)getWebView;\n","filename":"modules\/javafx.web\/src\/ios\/native\/WebViewImpl.h","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-jint JNI_OnLoad_ios_webnode(JavaVM* vm, void * reserved) {\n+jint JNI_OnLoad_webview(JavaVM* vm, void * reserved) {\n@@ -56,4 +56,2 @@\n-    jsize resLength = [nsStr length];\n-    jchar resBuffer[resLength];\n-    [nsStr getCharacters:(unichar *)resBuffer];\n-    return (*env)->NewString(env, resBuffer, resLength);\n+    const char *cString = [nsStr UTF8String];\n+    return (*env)->NewStringUTF(env, cString);\n@@ -98,2 +96,2 @@\n-- (void)executeScript:(NSString *) script {\n-    jsResult = [webView stringByEvaluatingJavaScriptFromString:script];\n+- (void)reload {\n+    [webView reload];\n@@ -102,2 +100,18 @@\n-- (NSString *)getScriptResult {\n-    return jsResult;\n+- (void)executeScript:(NSMutableDictionary *) info {\n+    __block NSString *resultString = nil;\n+    __block BOOL finished = NO;\n+    [webView evaluateJavaScript:[info objectForKey:@\"Script\"] completionHandler:^(id result, NSError *error) {\n+        if (error == nil) {\n+            if (result != nil) {\n+                resultString = [NSString stringWithFormat:@\"%@\", result];\n+            }\n+        } else {\n+            NSLog(@\"evaluateJavaScript error in executeScript: %@\", error);\n+        }\n+        NSMutableDictionary *resultDictionary = [info objectForKey:@\"ResultDictionary\"];\n+        [resultDictionary setValue:resultString forKey:@\"Result\"];\n+        finished = YES;\n+    }];\n+    while (!finished) {\n+        [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate dateWithTimeIntervalSinceNow:0.1]];\n+    }\n@@ -113,1 +127,0 @@\n-    \/\/ jmidLoadFinished = (*env)->GetMethodID(env, cls, \"notifyLoadFinished\", \"()V\");\n@@ -135,1 +148,1 @@\n-    webView = [[UIWebView alloc] initWithFrame:CGRectMake(0, 0, width, height)];\n+    webView = [[WKWebView alloc] initWithFrame:CGRectMake(0, 0, width, height)];\n@@ -137,1 +150,1 @@\n-    [webView setDelegate:self];\n+    webView.navigationDelegate = self;\n@@ -146,0 +159,7 @@\n+\n+    if (windowView) {\n+        [windowView addSubview:webView];\n+        \/\/ [windowView addSubview:loadingLabel];\n+    } else {\n+        NSLog(@\"WebViewImpl ERROR: main Window is NIL\");\n+    }\n@@ -159,1 +179,1 @@\n-- (UIWebView *)getWebView {\n+- (WKWebView *)getWebView {\n@@ -177,1 +197,1 @@\n-    webView.delegate = nil;\n+    webView.navigationDelegate = nil;\n@@ -188,3 +208,4 @@\n-- (BOOL)webView:(UIWebView *)wv shouldStartLoadWithRequest:(NSURLRequest *)request\n-        navigationType:(UIWebViewNavigationType)navigationType {\n-    NSString *url = [[request URL] absoluteString];\n+- (void)webView:(WKWebView *)wv decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction\n+        decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler {\n+\n+    NSString *url = [navigationAction.request.URL absoluteString];\n@@ -199,1 +220,3 @@\n-        return NO;\n+        decisionHandler(WKNavigationActionPolicyCancel);\n+    } else {\n+        decisionHandler(WKNavigationActionPolicyAllow);\n@@ -201,1 +224,0 @@\n-    return YES;\n@@ -204,2 +226,1 @@\n-- (void)webViewDidStartLoad:(UIWebView *)webView{\n-    [windowView addSubview:loadingLabel];\n+- (void)webView:(WKWebView *)wv didStartProvisionalNavigation:(WKNavigation *)navigation {\n@@ -216,5 +237,1 @@\n-- (void)webViewDidFinishLoad:(UIWebView *)wv{\n-    NSString *inner = [wv stringByEvaluatingJavaScriptFromString:\n-                                         @\"document.documentElement.innerHTML\"];\n-    NSString *currentUrl = wv.request.URL.absoluteString;\n-\n+- (void)webView:(WKWebView *)wv didFinishNavigation:(WKNavigation *)navigation {\n@@ -223,13 +240,18 @@\n-    if (windowView) {\n-        [windowView addSubview:wv];\n-    } else {\n-        NSLog(@\"WebViewImpl ERROR: main Window is NIL\");\n-    }\n-\n-    JNIEnv *env = [self getJNIEnv];\n-    if (env != NULL) {\n-        jstring jInner = createJString(env, inner);\n-        jstring jUrl = createJString(env, currentUrl);\n-        (*env)->CallVoidMethod(env, jObject, jmidLoadFinished, jUrl, jInner);\n-        [self releaseJNIEnv:env];\n-    }\n+    __block NSString *resultString = nil;\n+    [wv evaluateJavaScript:@\"document.documentElement.innerHTML\" completionHandler:^(id result, NSError *error) {\n+        if (error == nil) {\n+            if (result != nil) {\n+                resultString = [NSString stringWithFormat:@\"%@\", result];\n+            }\n+            JNIEnv *env = [self getJNIEnv];\n+            if (env != NULL) {\n+                jstring jInner = createJString(env, resultString);\n+                NSString *currentUrl = [wv.URL absoluteString];\n+                jstring jUrl = createJString(env, currentUrl);\n+                (*env)->CallVoidMethod(env, jObject, jmidLoadFinished, jUrl, jInner);\n+                [self releaseJNIEnv:env];\n+            }\n+        } else {\n+            NSLog(@\"evaluateJavaScript error in didFinishNavigation: %@\", error);\n+        }\n+    }];\n@@ -238,1 +260,1 @@\n-- (void)webView:(UIWebView *)wv didFailLoadWithError:(NSError *)error {\n+- (void)webView:(WKWebView *)wv didFailNavigation:(WKNavigation *)navigation withError:(NSError *)error {\n@@ -250,0 +272,1 @@\n+    bounds.origin = CGPointMake(transform.m41, transform.m42);\n@@ -252,5 +275,7 @@\n-    CGPoint center = CGPointMake(\/*transform.m41 +*\/ width\/2, \/* transform.m42 +*\/ height\/2);\n-    [webView setCenter:center];\n-    [webView setBounds:bounds];\n-    [loadingLabel setCenter:center];\n-    [loadingLabel setBounds:bounds];\n+    [webView setFrame:bounds];\n+\/\/     [loadingLabel setCenter:center];\n+\/\/     [loadingLabel setBounds:bounds];\n+    \/\/ add subview again if is not present\n+    if (![webView isDescendantOfView:windowView]) {\n+        [windowView addSubview:webView];\n+    }\n@@ -480,0 +505,13 @@\n+    \/*\n+     * Class:     javafx_scene_web_WebEngine\n+     * Method:    _reload\n+     * Signature: (J)V\n+     *\/\n+    JNIEXPORT void JNICALL\n+    Java_javafx_scene_web_WebEngine__1reload(JNIEnv *env, jobject cl, jlong handle) {\n+        WebViewImpl *wvi = jlong_to_ptr(handle);\n+        if (wvi) {\n+            [wvi reload];\n+        }\n+    }\n+\n@@ -488,1 +526,1 @@\n-        if (script!= NULL)\n+        if (script != NULL)\n@@ -497,1 +535,4 @@\n-            [wvi performSelectorOnMainThread:@selector(executeScript:) withObject:string waitUntilDone:YES];\n+            NSMutableDictionary *resultDictionary = [NSMutableDictionary dictionaryWithCapacity:1];\n+            NSDictionary *info = [NSDictionary dictionaryWithObjectsAndKeys:\n+                                  resultDictionary, @\"ResultDictionary\", string, @\"Script\", nil];\n+            [wvi performSelectorOnMainThread:@selector(executeScript:) withObject:info waitUntilDone:YES];\n@@ -499,1 +540,1 @@\n-            NSString *result = [wvi getScriptResult];\n+            NSString *result = [resultDictionary objectForKey:@\"Result\"];\n","filename":"modules\/javafx.web\/src\/ios\/native\/WebViewImpl.m","additions":89,"deletions":48,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -42,1 +42,4 @@\n-            JavaBridge.callbacks[cbId] = {'success': false, 'result': null};\n+            \/\/ TODO: set 'success': false, and process callBack, but so far it happens\n+            \/\/ too late. As an alternative, use JSObject::call to send values from the\n+            \/\/ Java class back to JavaScript.\n+            JavaBridge.callbacks[cbId] = {'success': true, 'result': null};\n","filename":"modules\/javafx.web\/src\/ios\/resources\/javafx\/scene\/web\/init.js","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}