{"files":[{"patch":"@@ -3093,0 +3093,6 @@\n+        <th class=\"propertyname\" scope=\"row\">-fx-page-fill<\/th>\n+          <td class=\"value\"><a href=\"#typecolor\" class=\"typeref\">&lt;color&gt;<\/a><\/td>\n+          <td>white<\/td>\n+          <td>&nbsp;<\/td>\n+        <\/tr>\n+        <tr>\n","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/cssref.html","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        context.updateCompositeMode(CompositeMode.CLEAR);\n+        setCompositeMode(CompositeMode.CLEAR);\n@@ -75,1 +75,1 @@\n-        context.updateCompositeMode(mode);\n+        setCompositeMode(mode);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/ES2Graphics.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import javafx.scene.paint.Color;\n@@ -85,0 +86,1 @@\n+    private static final int DEFAULT_BACKGROUND_INT_RGBA = 0xFFFFFFFF; \/\/ Color.WHITE\n@@ -96,0 +98,1 @@\n+    private int backgroundIntRgba = DEFAULT_BACKGROUND_INT_RGBA;\n@@ -376,0 +379,8 @@\n+        if (!isBackgroundColorOpaque()) {\n+            if (paintLog.isLoggable(Level.FINEST)) {\n+                paintLog.finest(\"rect=[\" + x + \", \" + y + \" \" + w + \"x\" + h +\"]\");\n+            }\n+            addDirtyRect(new WCRectangle(x, y, (float) w, (float) h));\n+            return;\n+        }\n+\n@@ -591,0 +602,1 @@\n+        backgroundIntRgba = backgroundColor;\n@@ -593,1 +605,1 @@\n-            log.fine(\"setBackgroundColor: \" + backgroundColor);\n+            log.fine(\"setBackgroundColor intRgba: {0}\", backgroundColor);\n@@ -601,0 +613,1 @@\n+            twkSetTransparent(frameID, isBackgroundColorTransparent());\n@@ -602,1 +615,1 @@\n-\n+            repaintAll();\n@@ -608,0 +621,5 @@\n+    public void setBackgroundColor(Color backgroundColor) {\n+        log.fine(\"setBackgroundColor color: \" + backgroundColor);\n+        setBackgroundColor(getIntRgba(backgroundColor));\n+    }\n+\n@@ -609,0 +627,1 @@\n+        backgroundIntRgba = backgroundColor;\n@@ -611,2 +630,1 @@\n-            log.fine(\"setBackgroundColor: \" + backgroundColor +\n-                   \" for all frames\");\n+            log.fine(\"setBackgroundColor intRgba: {0} for all frames\", backgroundColor);\n@@ -619,0 +637,1 @@\n+                twkSetTransparent(frameID, isBackgroundColorTransparent());\n@@ -621,1 +640,1 @@\n-\n+            repaintAll();\n@@ -742,2 +761,9 @@\n-                if (rq.getClip() != null) {\n-                    gc.setClip(rq.getClip());\n+                WCRectangle clip = rq.getClip();\n+                if (clip != null) {\n+                    if (isBackgroundColorTransparent()) {\n+                        \/\/ As backbuffer is enabled, new clips are drawn over the old rendered frames\n+                        \/\/ regardless the alpha channel. While that works fine for alpha > 0,\n+                        \/\/ for alpha == 0 we need to clear the old frame or it will still be visible.\n+                        gc.clearRect((int) clip.getX(), (int) clip.getY(), (int) clip.getWidth(), (int) clip.getHeight());\n+                    }\n+                    gc.setClip(clip);\n@@ -814,4 +840,3 @@\n-\n-            return !isDragConfirmed() \/\/When Webkit informes FX about drag start, it waits\n-                                      \/\/for system DnD loop and not intereasted in\n-                                      \/\/intermediate mouse events that can change text selection.\n+            boolean result = !isDragConfirmed() \/\/When Webkit informes FX about drag start, it waits\n+                                                \/\/ for system DnD loop and not intereasted in\n+                                                \/\/intermediate mouse events that can change text selection.\n@@ -823,0 +848,4 @@\n+            if (!isBackgroundColorOpaque()) {\n+                repaintAll();\n+            }\n+            return result;\n@@ -836,5 +865,9 @@\n-            return twkProcessMouseWheelEvent(getPage(),\n-                                             me.getX(), me.getY(), me.getScreenX(), me.getScreenY(),\n-                                             me.getDeltaX(), me.getDeltaY(),\n-                                             me.isShiftDown(), me.isControlDown(), me.isAltDown(), me.isMetaDown(),\n-                                             me.getWhen() \/ 1000.0);\n+            boolean result = twkProcessMouseWheelEvent(getPage(),\n+                    me.getX(), me.getY(), me.getScreenX(), me.getScreenY(),\n+                    me.getDeltaX(), me.getDeltaY(),\n+                    me.isShiftDown(), me.isControlDown(), me.isAltDown(), me.isMetaDown(),\n+                    me.getWhen() \/ 1000.0);\n+            if (!isBackgroundColorOpaque()) {\n+                repaintAll();\n+            }\n+            return result;\n@@ -2528,0 +2561,1 @@\n+        setBackgroundColor(backgroundIntRgba);\n@@ -2546,0 +2580,21 @@\n+    private boolean isBackgroundColorTransparent() {\n+        return (backgroundIntRgba & 0x000000FF) == 0;\n+    }\n+\n+    private boolean isBackgroundColorOpaque() {\n+        return (backgroundIntRgba & 0x000000FF) == 255;\n+    }\n+\n+    private static int getIntRgba(Color color) {\n+        if (color == null) {\n+            return DEFAULT_BACKGROUND_INT_RGBA;\n+        }\n+        int red = (int) Math.round(color.getRed() * 255.0);\n+        int green = (int) Math.round(color.getGreen() * 255.0);\n+        int blue = (int) Math.round(color.getBlue() * 255.0);\n+        int alpha = (int) Math.round(color.getOpacity() * 255.0);\n+\n+        \/\/ return 32 bit integer representation compatible with WebKit\n+        return (red << 24) | (green << 16) | (blue << 8) | alpha;\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/WebPage.java","additions":71,"deletions":16,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import javafx.beans.value.WritableValue;\n@@ -41,0 +42,1 @@\n+import javafx.css.converter.ColorConverter;\n@@ -56,0 +58,1 @@\n+import javafx.scene.paint.Color;\n@@ -118,0 +121,1 @@\n+    private static final Color DEFAULT_PAGE_FILL = Color.WHITE;\n@@ -275,0 +279,1 @@\n+        page.setBackgroundColor(DEFAULT_PAGE_FILL);\n@@ -695,0 +700,53 @@\n+    \/**\n+     * Specifies the background color of the web page.\n+     *\n+     * <p>With this property, the {@code WebView} control's background\n+     * can have any solid color, including some or complete\n+     * level of transparency.\n+     * However, if the HTML content being loaded sets its own\n+     * background color, that color will take precedence.\n+     *\n+     * @defaultValue {@code Color.WHITE}\n+     *\n+     * @since 18\n+     *\/\n+    private ObjectProperty<Color> pageFill;\n+\n+    public final void setPageFill(Color value) {\n+        pageFillProperty().set(value);\n+    }\n+\n+    public final Color getPageFill() {\n+        return pageFill == null ? DEFAULT_PAGE_FILL : pageFill.get();\n+    }\n+\n+    public final ObjectProperty<Color> pageFillProperty() {\n+        if (pageFill == null) {\n+            pageFill = new StyleableObjectProperty<>(DEFAULT_PAGE_FILL) {\n+\n+                @Override\n+                protected void invalidated() {\n+                    Toolkit.getToolkit().checkFxUserThread();\n+                    Color color = get();\n+                    page.setBackgroundColor(color);\n+                }\n+\n+                @Override\n+                public CssMetaData<WebView,Color> getCssMetaData() {\n+                    return WebView.StyleableProperties.PAGE_FILL;\n+                }\n+\n+                @Override\n+                public Object getBean() {\n+                    return WebView.this;\n+                }\n+\n+                @Override\n+                public String getName() {\n+                    return \"pageFill\";\n+                }\n+            };\n+        }\n+        return pageFill;\n+    }\n+\n@@ -771,0 +829,15 @@\n+        private static final CssMetaData<WebView, Color> PAGE_FILL =\n+                new CssMetaData<>(\"-fx-page-fill\",\n+                        ColorConverter.getInstance(), DEFAULT_PAGE_FILL) {\n+\n+                    @Override\n+                    public boolean isSettable(WebView n) {\n+                        return n.pageFill == null || !n.pageFill.isBound();\n+                    }\n+\n+                    @Override\n+                    public StyleableProperty<Color> getStyleableProperty(WebView n) {\n+                        return (StyleableProperty<Color>)(WritableValue<Color>)n.pageFillProperty();\n+                    }\n+                };\n+\n@@ -896,0 +969,1 @@\n+            styleables.add(PAGE_FILL);\n","filename":"modules\/javafx.web\/src\/main\/java\/javafx\/scene\/web\/WebView.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -131,0 +131,35 @@\n+    private void testPageFill(javafx.scene.paint.Color expected) {\n+        assertEquals(expected, getView().getPageFill());\n+    }\n+\n+    @Test public void testPageFillDefault() {\n+        testPageFill(javafx.scene.paint.Color.WHITE);\n+    }\n+\n+    @Test public void testPageFillManual() {\n+        submit(() -> {\n+            getView().setPageFill(javafx.scene.paint.Color.TRANSPARENT);\n+            testPageFill(javafx.scene.paint.Color.TRANSPARENT);\n+        });\n+    }\n+\n+    @Test public void testPageFillTransparentCSS() {\n+        setStyle(\"-fx-page-fill: transparent\");\n+        submit(() -> {\n+            testPageFill(javafx.scene.paint.Color.TRANSPARENT);\n+        });\n+    }\n+\n+    @Test public void testPageFillOpaqueCSS() {\n+        setStyle(\"-fx-page-fill: #aabbcc\");\n+        submit(() -> {\n+            testPageFill(javafx.scene.paint.Color.web(\"#aabbcc\"));\n+        });\n+    }\n+\n+    @Test public void testPageFillTranslucentCSS() {\n+        setStyle(\"-fx-page-fill: #aabbccdd\");\n+        submit(() -> {\n+            testPageFill(javafx.scene.paint.Color.web(\"#aabbccdd\"));\n+        });\n+    }\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/CSSTest.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,293 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.web;\n+\n+import com.sun.webkit.WebPage;\n+import com.sun.webkit.WebPageShim;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.image.PixelReader;\n+import javafx.scene.image.WritableImage;\n+import javafx.scene.paint.Color;\n+import javafx.scene.web.WebEngineShim;\n+import javafx.scene.web.WebView;\n+import javafx.stage.Stage;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import test.util.Util;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import static javafx.concurrent.Worker.State.SUCCEEDED;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class PageFillTest {\n+    private static final CountDownLatch launchLatch = new CountDownLatch(1);\n+\n+    \/\/ Maintain one application instance\n+    static PageFillTestApp pageFillTestApp;\n+\n+    private WebView webView;\n+\n+    public static class PageFillTestApp extends Application {\n+        Stage primaryStage = null;\n+\n+        @Override\n+        public void init() {\n+            PageFillTest.pageFillTestApp = this;\n+        }\n+\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            Platform.setImplicitExit(false);\n+            this.primaryStage = primaryStage;\n+            launchLatch.countDown();\n+        }\n+    }\n+\n+    private static String colorToString(Color c) {\n+        int r = (int)(c.getRed() * 255.0);\n+        int g = (int)(c.getGreen() * 255.0);\n+        int b = (int)(c.getBlue() * 255.0);\n+        int a = (int)(c.getOpacity() * 255.0);\n+        return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\n+    }\n+\n+    private void assertColorEquals(String msg, Color expected, Color actual, double delta) {\n+        if (!testColorEquals(expected, actual, delta)) {\n+            fail(msg + \" expected:\" + colorToString(expected)\n+                    + \" but was:\" + colorToString(actual));\n+        }\n+    }\n+\n+    private void assertColorNotEquals(String msg, Color notExpected, Color actual, double delta) {\n+        if (testColorEquals(notExpected, actual, delta)) {\n+            fail(msg + \" not expected:\" + colorToString(notExpected)\n+                    + \" but was:\" + colorToString(actual));\n+        }\n+    }\n+\n+    protected boolean testColorEquals(Color expected, Color actual, double delta) {\n+        double deltaRed = Math.abs(expected.getRed() - actual.getRed());\n+        double deltaGreen = Math.abs(expected.getGreen() - actual.getGreen());\n+        double deltaBlue = Math.abs(expected.getBlue() - actual.getBlue());\n+        double deltaOpacity = Math.abs(expected.getOpacity() - actual.getOpacity());\n+        return (deltaRed <= delta && deltaGreen <= delta && deltaBlue <= delta && deltaOpacity <= delta);\n+    }\n+\n+    @BeforeClass\n+    public static void setupOnce() {\n+        \/\/ Start the Test Application\n+        new Thread(() -> Application.launch(PageFillTestApp.class, (String[])null)).start();\n+\n+        assertTrue(\"Timeout waiting for FX runtime to start\", Util.await(launchLatch));\n+    }\n+\n+    @AfterClass\n+    public static void tearDownOnce() {\n+        Platform.exit();\n+    }\n+\n+    @Before\n+    public void setupTestObjects() {\n+        Platform.runLater(() -> {\n+            webView = new WebView();\n+            Scene scene = new Scene(webView, Color.web(\"#00ff00\"));\n+            pageFillTestApp.primaryStage.setScene(scene);\n+            pageFillTestApp.primaryStage.show();\n+        });\n+    }\n+\n+    @Test public void testPageFillRendering() {\n+        final CountDownLatch webViewStateLatch = new CountDownLatch(1);\n+\n+        Util.runAndWait(() -> {\n+            assertNotNull(webView);\n+\n+            webView.setPageFill(Color.TRANSPARENT);\n+\n+            webView.getEngine().getLoadWorker().stateProperty().\n+                addListener((observable, oldValue, newValue) -> {\n+                if (newValue == SUCCEEDED) {\n+                    webView.requestFocus();\n+                }\n+            });\n+\n+            webView.focusedProperty().\n+                addListener((observable, oldValue, newValue) -> {\n+                if (newValue) {\n+                    webViewStateLatch.countDown();\n+                }\n+            });\n+\n+            String content = \"<html>\" + \"<head><\/head>\" +\n+                    \"<body>\" +\n+                    \"<span style=\\\"color: black; font-family: Arial,Helvetica,sans-serif\\\">\" +\n+                    \"<br>this is a line\".repeat(100) +\n+                    \"<\/span><\/body><\/html>\";\n+            webView.getEngine().loadContent(content);\n+        });\n+\n+        assertTrue(\"Timeout when waiting for focus change \", Util.await(webViewStateLatch));\n+        Util.sleep(1000);\n+\n+        Util.runAndWait(() -> {\n+            WritableImage snapshot = pageFillTestApp.primaryStage.getScene().snapshot(null);\n+            PixelReader pr = snapshot.getPixelReader();\n+\n+            final double delta = 0.07;\n+            Color color = Color.rgb(0, 255, 0); \/\/ scene color + transparent = scene color\n+            assertColorEquals(\"Color 1 should be:\",\n+                    color, pr.getColor(0, 0), delta);\n+            assertColorEquals(\"Color 2 should be:\",\n+                    color, pr.getColor(50, 10), delta);\n+            assertColorEquals(\"Color 3 should be:\",\n+                    color, pr.getColor(50, 50), delta);\n+            assertColorEquals(\"Color 4 should be:\",\n+                    color, pr.getColor(110, 50), delta);\n+\n+            assertColorNotEquals(\"Color 5 should not be:\",\n+                    color, pr.getColor(10, 50), delta);\n+        });\n+\n+        Util.sleep(1000);\n+\n+        Util.runAndWait(() -> {\n+            final WebPage page = WebEngineShim.getPage(webView.getEngine());\n+            assertNotNull(page);\n+            WebPageShim.scroll(page, 1, 1, 0, 200);\n+        });\n+\n+        Util.sleep(1000);\n+\n+        Util.runAndWait(() -> {\n+            WritableImage snapshot = pageFillTestApp.primaryStage.getScene().snapshot(null);\n+            PixelReader pr = snapshot.getPixelReader();\n+\n+            final double delta = 0.07;\n+            Color color = Color.rgb(0, 255, 0); \/\/ scene color + transparent = scene color\n+            assertColorEquals(\"Color 6 should be:\",\n+                    color, pr.getColor(0, 0), delta);\n+            assertColorEquals(\"Color 7 should be:\",\n+                    color, pr.getColor(50, 10), delta);\n+            assertColorEquals(\"Color 8 should be:\",\n+                    color, pr.getColor(110, 50), delta);\n+            assertColorEquals(\"Color 9 should be:\",\n+                    color, pr.getColor(110, 100), delta);\n+\n+            assertColorNotEquals(\"Color 10 should not be:\",\n+                    color, pr.getColor(10, 50), delta);\n+        });\n+\n+        Util.runAndWait(() -> {\n+            webView.setStyle(\"-fx-page-fill: orange;\");\n+        });\n+\n+        Util.sleep(1000);\n+\n+        Util.runAndWait(() -> {\n+            WritableImage snapshot = pageFillTestApp.primaryStage.getScene().snapshot(null);\n+            PixelReader pr = snapshot.getPixelReader();\n+\n+            final double delta = 0.07;\n+            Color color = Color.ORANGE; \/\/ scene color + opaque orange = orange\n+            assertColorEquals(\"Color 11 should be:\",\n+                    color, pr.getColor(0, 0), delta);\n+            assertColorEquals(\"Color 12 should be:\",\n+                    color, pr.getColor(50, 10), delta);\n+            assertColorEquals(\"Color 13 should be:\",\n+                    color, pr.getColor(110, 50), delta);\n+            assertColorEquals(\"Color 14 should be:\",\n+                    color, pr.getColor(110, 100), delta);\n+\n+            assertColorNotEquals(\"Color 15 should not be:\",\n+                    color, pr.getColor(10, 50), delta);\n+        });\n+\n+        Util.runAndWait(() -> {\n+            webView.setStyle(\"-fx-page-fill: #ccddeecf;\");\n+            final WebPage page = WebEngineShim.getPage(webView.getEngine());\n+            assertNotNull(page);\n+            WebPageShim.scroll(page, 1, 1, 0, 200);\n+        });\n+\n+        Util.sleep(1000);\n+\n+        Util.runAndWait(() -> {\n+            WritableImage snapshot = pageFillTestApp.primaryStage.getScene().snapshot(null);\n+            PixelReader pr = snapshot.getPixelReader();\n+\n+            final double delta = 0.07;\n+            Color color = Color.rgb(165,227,193); \/\/ scene color + #ccddeecf = scene opaque #A5E3C1\n+            assertColorEquals(\"Color 16 should be:\",\n+                    color, pr.getColor(0, 0), delta);\n+            assertColorEquals(\"Color 17 should be:\",\n+                    color, pr.getColor(50, 10), delta);\n+            assertColorEquals(\"Color 18 should be:\",\n+                    color, pr.getColor(110, 50), delta);\n+            assertColorEquals(\"Color 19 should be:\",\n+                    color, pr.getColor(110, 100), delta);\n+\n+            assertColorNotEquals(\"Color 20 should not be:\",\n+                    color, pr.getColor(10, 50), delta);\n+        });\n+\n+        Util.runAndWait(() -> {\n+            String content = \"<html>\" + \"<head><\/head>\" +\n+                    \"<body style=\\\"background-color:#da10a2\\\">\" +\n+                    \"<span style=\\\"color: black; font-family: Arial,Helvetica,sans-serif\\\">\" +\n+                    \"<br>this is another line\".repeat(100) +\n+                    \"<\/span><\/body><\/html>\";\n+            webView.getEngine().loadContent(content);\n+        });\n+\n+        Util.sleep(1000);\n+\n+        Util.runAndWait(() -> {\n+            WritableImage snapshot = pageFillTestApp.primaryStage.getScene().snapshot(null);\n+            PixelReader pr = snapshot.getPixelReader();\n+\n+            final double delta = 0.07;\n+            Color color = Color.web(\"#da10a2\"); \/\/ scene color + #ccddeecf + web #da10a2 = #da10a2\n+            assertColorEquals(\"Color 21 should be:\",\n+                    color, pr.getColor(0, 0), delta);\n+            assertColorEquals(\"Color 22 should be:\",\n+                    color, pr.getColor(50, 10), delta);\n+            assertColorEquals(\"Color 23 should be:\",\n+                    color, pr.getColor(110, 50), delta);\n+            assertColorEquals(\"Color 24 should be:\",\n+                    color, pr.getColor(110, 100), delta);\n+\n+            assertColorNotEquals(\"Color 25 should not be:\",\n+                    color, pr.getColor(10, 50), delta);\n+        });\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/PageFillTest.java","additions":293,"deletions":0,"binary":false,"changes":293,"status":"added"}]}