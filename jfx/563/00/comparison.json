{"files":[{"patch":"@@ -70,1 +70,1 @@\n-        setPaint(Color.BLACK); \/\/ any color will do...\n+        setPaint(Color.TRANSPARENT); \/\/ any color will do...\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/ES2Graphics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -100,0 +100,1 @@\n+    private boolean isOpaque = true;\n@@ -457,0 +458,4 @@\n+        if (!isOpaque) {\n+            clearRect((int)c.getX(), (int)c.getY(),\n+                    (int)c.getWidth(), (int)c.getHeight());\n+        }\n@@ -634,0 +639,10 @@\n+    @Override\n+    public void setOpaque(boolean opaque) {\n+        this.isOpaque = opaque;\n+    }\n+\n+    @Override\n+    public boolean isOpaque() {\n+        return isOpaque;\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/javafx\/webkit\/prism\/WCGraphicsPrismContext.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import javafx.scene.paint.Color;\n@@ -96,0 +97,1 @@\n+    private Color backgroundColor = Color.WHITE;\n@@ -376,0 +378,8 @@\n+        if (!isBackgroundOpaque()) {\n+            if (paintLog.isLoggable(Level.FINEST)) {\n+                paintLog.finest(\"rect=[\" + x + \", \" + y + \" \" + w + \"x\" + h +\"]\");\n+            }\n+            addDirtyRect(new WCRectangle(x, y, (float) w, (float) h));\n+            return;\n+        }\n+\n@@ -591,0 +601,1 @@\n+        this.backgroundColor = getColorFromHash(backgroundColor);\n@@ -593,1 +604,2 @@\n-            log.fine(\"setBackgroundColor: \" + backgroundColor);\n+            log.fine(\"setBackgroundColor: hash: \" + backgroundColor +\n+                    \"(color: \" + this.backgroundColor + \") \");\n@@ -601,0 +613,1 @@\n+            twkSetTransparent(frameID, isBackgroundTransparent());\n@@ -602,1 +615,1 @@\n-\n+            repaintAll();\n@@ -609,0 +622,1 @@\n+        this.backgroundColor = getColorFromHash(backgroundColor);\n@@ -611,1 +625,2 @@\n-            log.fine(\"setBackgroundColor: \" + backgroundColor +\n+            log.fine(\"setBackgroundColor hash: \" + backgroundColor +\n+                    \"(color: \" + this.backgroundColor + \") \" +\n@@ -619,0 +634,1 @@\n+                twkSetTransparent(frameID, isBackgroundTransparent());\n@@ -621,1 +637,1 @@\n-\n+            repaintAll();\n@@ -729,0 +745,1 @@\n+        gc.setOpaque(isBackgroundOpaque());\n@@ -814,4 +831,3 @@\n-\n-            return !isDragConfirmed() \/\/When Webkit informes FX about drag start, it waits\n-                                      \/\/for system DnD loop and not intereasted in\n-                                      \/\/intermediate mouse events that can change text selection.\n+            boolean result = !isDragConfirmed() \/\/When Webkit informes FX about drag start, it waits\n+                                                \/\/ for system DnD loop and not intereasted in\n+                                                \/\/intermediate mouse events that can change text selection.\n@@ -823,0 +839,4 @@\n+            if (!isBackgroundOpaque()) {\n+                repaintAll();\n+            }\n+            return result;\n@@ -836,5 +856,9 @@\n-            return twkProcessMouseWheelEvent(getPage(),\n-                                             me.getX(), me.getY(), me.getScreenX(), me.getScreenY(),\n-                                             me.getDeltaX(), me.getDeltaY(),\n-                                             me.isShiftDown(), me.isControlDown(), me.isAltDown(), me.isMetaDown(),\n-                                             me.getWhen() \/ 1000.0);\n+            boolean result = twkProcessMouseWheelEvent(getPage(),\n+                    me.getX(), me.getY(), me.getScreenX(), me.getScreenY(),\n+                    me.getDeltaX(), me.getDeltaY(),\n+                    me.isShiftDown(), me.isControlDown(), me.isAltDown(), me.isMetaDown(),\n+                    me.getWhen() \/ 1000.0);\n+            if (!isBackgroundOpaque()) {\n+                repaintAll();\n+            }\n+            return result;\n@@ -2528,0 +2552,1 @@\n+        setBackgroundColor(backgroundColor.hashCode());\n@@ -2546,0 +2571,14 @@\n+    private boolean isBackgroundTransparent() {\n+        return backgroundColor != null && backgroundColor.getOpacity() == 0f;\n+    }\n+\n+    private boolean isBackgroundOpaque() {\n+        return backgroundColor == null || backgroundColor.isOpaque();\n+    }\n+\n+    private static Color getColorFromHash(int hash) {\n+        String hexString = Integer.toHexString(hash);\n+        int length = hexString.length();\n+        return Color.valueOf(\"#\" + \"0\".repeat(8 - length) + hexString);\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/WebPage.java","additions":52,"deletions":13,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -62,0 +62,2 @@\n+    public abstract void setOpaque(boolean opaque);\n+    public abstract boolean isOpaque();\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/graphics\/WCGraphicsContext.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -155,0 +155,15 @@\n+    @Override\n+    public void setOpaque(boolean opaque) {\n+        logger.resumeCount(\"SET_OPAQUE\");\n+        gc.setOpaque(opaque);\n+        logger.suspendCount(\"SET_OPAQUE\");\n+    }\n+\n+    @Override\n+    public boolean isOpaque() {\n+        logger.resumeCount(\"IS_OPAQUE\");\n+        boolean o = gc.isOpaque();\n+        logger.suspendCount(\"IS_OPAQUE\");\n+        return o;\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/perf\/WCGraphicsPerfLogger.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import javafx.beans.value.WritableValue;\n@@ -41,0 +42,1 @@\n+import javafx.css.converter.ColorConverter;\n@@ -56,0 +58,1 @@\n+import javafx.scene.paint.Color;\n@@ -118,0 +121,1 @@\n+    private static final Color DEFAULT_PAGE_FILL = Color.WHITE;\n@@ -275,0 +279,1 @@\n+        page.setBackgroundColor(DEFAULT_PAGE_FILL.hashCode());\n@@ -695,0 +700,49 @@\n+    \/**\n+     * Specifies the background color of the webPage, allowing\n+     * some or full transparency.\n+     *\n+     * Default color: White\n+     *\n+     * @since JavaFX 17\n+     *\/\n+    private ObjectProperty<Color> pageFill;\n+\n+    public final void setPageFill(Color value) {\n+        pageFillProperty().set(value);\n+    }\n+\n+    public final Color getPageFill() {\n+        return pageFill == null ? DEFAULT_PAGE_FILL : pageFill.get();\n+    }\n+\n+    public final ObjectProperty<Color> pageFillProperty() {\n+        if (pageFill == null) {\n+            pageFill = new StyleableObjectProperty<>(DEFAULT_PAGE_FILL) {\n+\n+                @Override\n+                protected void invalidated() {\n+                    Toolkit.getToolkit().checkFxUserThread();\n+                    Color color = get();\n+                    page.setBackgroundColor(color != null ? color.hashCode() :\n+                            DEFAULT_PAGE_FILL.hashCode());\n+                }\n+\n+                @Override\n+                public CssMetaData<WebView,Color> getCssMetaData() {\n+                    return WebView.StyleableProperties.PAGE_FILL;\n+                }\n+\n+                @Override\n+                public Object getBean() {\n+                    return WebView.this;\n+                }\n+\n+                @Override\n+                public String getName() {\n+                    return \"pageFill\";\n+                }\n+            };\n+        }\n+        return pageFill;\n+    }\n+\n@@ -771,0 +825,15 @@\n+        private static final CssMetaData<WebView, Color> PAGE_FILL =\n+                new CssMetaData<>(\"-fx-page-fill\",\n+                        ColorConverter.getInstance(), DEFAULT_PAGE_FILL) {\n+\n+                    @Override\n+                    public boolean isSettable(WebView n) {\n+                        return n.pageFill == null || !n.pageFill.isBound();\n+                    }\n+\n+                    @Override\n+                    public StyleableProperty<Color> getStyleableProperty(WebView n) {\n+                        return (StyleableProperty<Color>)(WritableValue<Color>)n.pageFillProperty();\n+                    }\n+                };\n+\n@@ -896,0 +965,1 @@\n+            styleables.add(PAGE_FILL);\n","filename":"modules\/javafx.web\/src\/main\/java\/javafx\/scene\/web\/WebView.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -131,0 +131,35 @@\n+    private void testPageFill(javafx.scene.paint.Color expected) {\n+        assertEquals(expected, getView().getPageFill());\n+    }\n+\n+    @Test public void testPageFillDefault() {\n+        testPageFill(javafx.scene.paint.Color.WHITE);\n+    }\n+\n+    @Test public void testPageFillManual() {\n+        submit(() -> {\n+            getView().setPageFill(javafx.scene.paint.Color.TRANSPARENT);\n+            testPageFill(javafx.scene.paint.Color.TRANSPARENT);\n+        });\n+    }\n+\n+    @Test public void testPageFillTransparentCSS() {\n+        setStyle(\"-fx-page-fill: transparent\");\n+        submit(() -> {\n+            testPageFill(javafx.scene.paint.Color.TRANSPARENT);\n+        });\n+    }\n+\n+    @Test public void testPageFillOpaqueCSS() {\n+        setStyle(\"-fx-page-fill: #aabbcc\");\n+        submit(() -> {\n+            testPageFill(javafx.scene.paint.Color.web(\"#aabbcc\"));\n+        });\n+    }\n+\n+    @Test public void testPageFillTranslucentCSS() {\n+        setStyle(\"-fx-page-fill: #aabbccdd\");\n+        submit(() -> {\n+            testPageFill(javafx.scene.paint.Color.web(\"#aabbccdd\"));\n+        });\n+    }\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/CSSTest.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,291 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.web;\n+\n+import com.sun.webkit.WebPage;\n+import com.sun.webkit.WebPageShim;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.image.PixelReader;\n+import javafx.scene.image.WritableImage;\n+import javafx.scene.paint.Color;\n+import javafx.scene.web.WebEngineShim;\n+import javafx.scene.web.WebView;\n+import javafx.stage.Stage;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import test.util.Util;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import static javafx.concurrent.Worker.State.SUCCEEDED;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public class PageFillTest {\n+    private static final CountDownLatch launchLatch = new CountDownLatch(1);\n+\n+    \/\/ Maintain one application instance\n+    static PageFillTestApp pageFillTestApp;\n+\n+    private WebView webView;\n+\n+    public static class PageFillTestApp extends Application {\n+        Stage primaryStage = null;\n+\n+        @Override\n+        public void init() {\n+            PageFillTest.pageFillTestApp = this;\n+        }\n+\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            Platform.setImplicitExit(false);\n+            this.primaryStage = primaryStage;\n+            launchLatch.countDown();\n+        }\n+    }\n+\n+    private static String colorToString(Color c) {\n+        int r = (int)(c.getRed() * 255.0);\n+        int g = (int)(c.getGreen() * 255.0);\n+        int b = (int)(c.getBlue() * 255.0);\n+        int a = (int)(c.getOpacity() * 255.0);\n+        return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\n+    }\n+\n+    private void assertColorEquals(String msg, Color expected, Color actual, double delta) {\n+        if (!testColorEquals(expected, actual, delta)) {\n+            fail(msg + \" expected:\" + colorToString(expected)\n+                    + \" but was:\" + colorToString(actual));\n+        }\n+    }\n+\n+    private void assertColorNotEquals(String msg, Color notExpected, Color actual, double delta) {\n+        if (testColorEquals(notExpected, actual, delta)) {\n+            fail(msg + \" not expected:\" + colorToString(notExpected)\n+                    + \" but was:\" + colorToString(actual));\n+        }\n+    }\n+\n+    protected boolean testColorEquals(Color expected, Color actual, double delta) {\n+        double deltaRed = Math.abs(expected.getRed() - actual.getRed());\n+        double deltaGreen = Math.abs(expected.getGreen() - actual.getGreen());\n+        double deltaBlue = Math.abs(expected.getBlue() - actual.getBlue());\n+        double deltaOpacity = Math.abs(expected.getOpacity() - actual.getOpacity());\n+        return (deltaRed <= delta && deltaGreen <= delta && deltaBlue <= delta && deltaOpacity <= delta);\n+    }\n+\n+    @BeforeClass\n+    public static void setupOnce() {\n+        \/\/ Start the Test Application\n+        new Thread(() -> Application.launch(PageFillTestApp.class, (String[])null)).start();\n+\n+        assertTrue(\"Timeout waiting for FX runtime to start\", Util.await(launchLatch));\n+    }\n+\n+    @AfterClass\n+    public static void tearDownOnce() {\n+        Platform.exit();\n+    }\n+\n+    @Before\n+    public void setupTestObjects() {\n+        Platform.runLater(() -> {\n+            webView = new WebView();\n+            Scene scene = new Scene(webView, Color.web(\"#00ff00\"));\n+            pageFillTestApp.primaryStage.setScene(scene);\n+            pageFillTestApp.primaryStage.show();\n+        });\n+    }\n+\n+    @Test public void testPageFillRendering() {\n+        final CountDownLatch webViewStateLatch = new CountDownLatch(1);\n+\n+        Util.runAndWait(() -> {\n+            assertNotNull(webView);\n+\n+            webView.setPageFill(Color.TRANSPARENT);\n+\n+            webView.getEngine().getLoadWorker().stateProperty().\n+                addListener((observable, oldValue, newValue) -> {\n+                if (newValue == SUCCEEDED) {\n+                    webView.requestFocus();\n+                }\n+            });\n+\n+            webView.focusedProperty().\n+                addListener((observable, oldValue, newValue) -> {\n+                if (newValue) {\n+                    webViewStateLatch.countDown();\n+                }\n+            });\n+\n+            String content = \"<html>\" + \"<head><\/head>\" +\n+                    \"<body><font color=\\\"black\\\">\" +\n+                    \"<\/br>this is a line\".repeat(100) +\n+                    \"<\/font><\/body><\/html>\";\n+            webView.getEngine().loadContent(content);\n+        });\n+\n+        assertTrue(\"Timeout when waiting for focus change \", Util.await(webViewStateLatch));\n+        Util.sleep(1000);\n+\n+        Util.runAndWait(() -> {\n+            WritableImage snapshot = pageFillTestApp.primaryStage.getScene().snapshot(null);\n+            PixelReader pr = snapshot.getPixelReader();\n+\n+            final double delta = 0.07;\n+            Color color = Color.rgb(0, 255, 0); \/\/ scene color + transparent = scene color\n+            assertColorEquals(\"Color 1 should be:\",\n+                    color, pr.getColor(0, 0), delta);\n+            assertColorEquals(\"Color 2 should be:\",\n+                    color, pr.getColor(50, 10), delta);\n+            assertColorEquals(\"Color 3 should be:\",\n+                    color, pr.getColor(50, 50), delta);\n+            assertColorEquals(\"Color 4 should be:\",\n+                    color, pr.getColor(100, 50), delta);\n+\n+            assertColorNotEquals(\"Color 5 should not be:\",\n+                    color, pr.getColor(10, 50), delta);\n+        });\n+\n+        Util.sleep(1000);\n+\n+        Util.runAndWait(() -> {\n+            final WebPage page = WebEngineShim.getPage(webView.getEngine());\n+            assertNotNull(page);\n+            WebPageShim.scroll(page, 1, 1, 0, 200);\n+        });\n+\n+        Util.sleep(1000);\n+\n+        Util.runAndWait(() -> {\n+            WritableImage snapshot = pageFillTestApp.primaryStage.getScene().snapshot(null);\n+            PixelReader pr = snapshot.getPixelReader();\n+\n+            final double delta = 0.07;\n+            Color color = Color.rgb(0, 255, 0); \/\/ scene color + transparent = scene color\n+            assertColorEquals(\"Color 6 should be:\",\n+                    color, pr.getColor(0, 0), delta);\n+            assertColorEquals(\"Color 7 should be:\",\n+                    color, pr.getColor(50, 10), delta);\n+            assertColorEquals(\"Color 8 should be:\",\n+                    color, pr.getColor(100, 50), delta);\n+            assertColorEquals(\"Color 9 should be:\",\n+                    color, pr.getColor(100, 100), delta);\n+\n+            assertColorNotEquals(\"Color 10 should not be:\",\n+                    color, pr.getColor(10, 50), delta);\n+        });\n+\n+        Util.runAndWait(() -> {\n+            webView.setStyle(\"-fx-page-fill: orange;\");\n+        });\n+\n+        Util.sleep(1000);\n+\n+        Util.runAndWait(() -> {\n+            WritableImage snapshot = pageFillTestApp.primaryStage.getScene().snapshot(null);\n+            PixelReader pr = snapshot.getPixelReader();\n+\n+            final double delta = 0.07;\n+            Color color = Color.ORANGE; \/\/ scene color + opaque orange = orange\n+            assertColorEquals(\"Color 11 should be:\",\n+                    color, pr.getColor(0, 0), delta);\n+            assertColorEquals(\"Color 12 should be:\",\n+                    color, pr.getColor(50, 10), delta);\n+            assertColorEquals(\"Color 13 should be:\",\n+                    color, pr.getColor(100, 50), delta);\n+            assertColorEquals(\"Color 14 should be:\",\n+                    color, pr.getColor(100, 100), delta);\n+\n+            assertColorNotEquals(\"Color 15 should not be:\",\n+                    color, pr.getColor(10, 50), delta);\n+        });\n+\n+        Util.runAndWait(() -> {\n+            webView.setStyle(\"-fx-page-fill: #ccddeecf;\");\n+            final WebPage page = WebEngineShim.getPage(webView.getEngine());\n+            assertNotNull(page);\n+            WebPageShim.scroll(page, 1, 1, 0, 200);\n+        });\n+\n+        Util.sleep(1000);\n+\n+        Util.runAndWait(() -> {\n+            WritableImage snapshot = pageFillTestApp.primaryStage.getScene().snapshot(null);\n+            PixelReader pr = snapshot.getPixelReader();\n+\n+            final double delta = 0.07;\n+            Color color = Color.rgb(165,227,193); \/\/ scene color + #ccddeecf = scene opaque #A5E3C1\n+            assertColorEquals(\"Color 16 should be:\",\n+                    color, pr.getColor(0, 0), delta);\n+            assertColorEquals(\"Color 17 should be:\",\n+                    color, pr.getColor(50, 10), delta);\n+            assertColorEquals(\"Color 18 should be:\",\n+                    color, pr.getColor(100, 50), delta);\n+            assertColorEquals(\"Color 19 should be:\",\n+                    color, pr.getColor(100, 100), delta);\n+\n+            assertColorNotEquals(\"Color 20 should not be:\",\n+                    color, pr.getColor(10, 50), delta);\n+        });\n+\n+        Util.runAndWait(() -> {\n+            String content = \"<html>\" + \"<head><\/head>\" +\n+                    \"<body style=\\\"background-color:#da10a2\\\"><font color=\\\"black\\\">\" +\n+                    \"<\/br>this is another line\".repeat(100) +\n+                    \"<\/font><\/body><\/html>\";\n+            webView.getEngine().loadContent(content);\n+        });\n+\n+        Util.sleep(1000);\n+\n+        Util.runAndWait(() -> {\n+            WritableImage snapshot = pageFillTestApp.primaryStage.getScene().snapshot(null);\n+            PixelReader pr = snapshot.getPixelReader();\n+\n+            final double delta = 0.07;\n+            Color color = Color.web(\"#da10a2\"); \/\/ scene color + #ccddeecf + web #da10a2 = #da10a2\n+            assertColorEquals(\"Color 21 should be:\",\n+                    color, pr.getColor(0, 0), delta);\n+            assertColorEquals(\"Color 22 should be:\",\n+                    color, pr.getColor(50, 10), delta);\n+            assertColorEquals(\"Color 23 should be:\",\n+                    color, pr.getColor(100, 50), delta);\n+            assertColorEquals(\"Color 24 should be:\",\n+                    color, pr.getColor(100, 100), delta);\n+\n+            assertColorNotEquals(\"Color 25 should not be:\",\n+                    color, pr.getColor(10, 50), delta);\n+        });\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/PageFillTest.java","additions":291,"deletions":0,"binary":false,"changes":291,"status":"added"}]}