{"files":[{"patch":"@@ -366,3 +366,9 @@\n-        EventHandler<InputEvent> handler = event -> setFocusVisible(getFocusOwner(), false);\n-        addEventFilter(MouseEvent.MOUSE_PRESSED, handler);\n-        addEventFilter(TouchEvent.TOUCH_PRESSED, handler);\n+        EventHandler<InputEvent> pressedHandler = event -> {\n+            Node focusOwner = getFocusOwner();\n+            if (focusOwner != null) {\n+                getKeyHandler().setFocusVisible(focusOwner, false);\n+            }\n+        };\n+\n+        addEventFilter(MouseEvent.MOUSE_PRESSED, pressedHandler);\n+        addEventFilter(TouchEvent.TOUCH_PRESSED, pressedHandler);\n@@ -772,1 +778,1 @@\n-                    windowForSceneChanged(oldWindow, newWindow);\n+                    getKeyHandler().windowForSceneChanged(oldWindow, newWindow);\n@@ -2084,33 +2090,5 @@\n-    private void windowForSceneChanged(Window oldWindow, Window window) {\n-        if (oldWindow != null) {\n-            oldWindow.focusedProperty().removeListener(sceneWindowFocusedListener);\n-        }\n-\n-        if (window != null) {\n-            window.focusedProperty().addListener(sceneWindowFocusedListener);\n-            setWindowFocused(window.isFocused());\n-        } else {\n-            setWindowFocused(false);\n-        }\n-    }\n-\n-    private final InvalidationListener sceneWindowFocusedListener =\n-            valueModel -> setWindowFocused(((ReadOnlyBooleanProperty)valueModel).get());\n-\n-    \/**\n-     * Stores whether the current focus owner visibly indicates focus.\n-     * This value is used to restore visible focus when a window loses and re-gains focus.\n-     *\/\n-    private boolean focusVisible;\n-\n-    private void setFocusVisible(Node node, boolean focusVisible) {\n-        this.focusVisible = focusVisible;\n-\n-        if (node != null) {\n-            node.focusVisible.set(focusVisible);\n-            node.focusVisible.notifyListeners();\n-        }\n-    }\n-\n-    \/**\n-     * Stores whether the window associated with this scene is currently focused.\n+    \/*\n+     * We cannot initialize keyHandler in init because some of the triggers\n+     * access it before the init block.\n+     * No clue why def keyHandler = bind lazy {KeyHandler{scene:this};}\n+     * does not compile.\n@@ -2118,12 +2096,4 @@\n-    private boolean windowFocused;\n-\n-    private void setWindowFocused(boolean value) {\n-        windowFocused = value;\n-\n-        if (getFocusOwner() != null) {\n-            getFocusOwner().setFocusQuietly(windowFocused, focusVisible);\n-            getFocusOwner().notifyFocusListeners();\n-        }\n-\n-        if (windowFocused && accessible != null) {\n-            accessible.sendNotification(AccessibleAttribute.FOCUS_NODE);\n+    private KeyHandler keyHandler = null;\n+    private KeyHandler getKeyHandler() {\n+        if (keyHandler == null) {\n+            keyHandler = new KeyHandler();\n@@ -2131,0 +2101,1 @@\n+        return keyHandler;\n@@ -2132,1 +2103,0 @@\n-\n@@ -2189,7 +2159,1 @@\n-        final Node sceneFocusOwner = getFocusOwner();\n-        final EventTarget eventTarget =\n-                (sceneFocusOwner != null && sceneFocusOwner.getScene() == Scene.this) ? sceneFocusOwner : Scene.this;\n-\n-        \/\/ send the key event to the current focus owner or to scene if\n-        \/\/ the focus owner is not set\n-        Event.fireEvent(eventTarget, e);\n+        getKeyHandler().process(e);\n@@ -2199,10 +2163,1 @@\n-        if (node == null) {\n-            setFocusOwner(null);\n-        } else if (node.isCanReceiveFocus()) {\n-            this.focusVisible = focusVisible;\n-            if (node != getFocusOwner()) {\n-                setFocusOwner(node);\n-            } else {\n-                setFocusVisible(node, focusVisible);\n-            }\n-        }\n+        getKeyHandler().requestFocus(node, focusVisible);\n@@ -2228,1 +2183,1 @@\n-                value.setFocusQuietly(windowFocused, focusVisible);\n+                value.setFocusQuietly(keyHandler.windowFocused, keyHandler.focusVisible);\n@@ -2263,4 +2218,0 @@\n-    public final ReadOnlyObjectProperty<Node> focusOwnerProperty() {\n-        return focusOwner.getReadOnlyProperty();\n-    }\n-\n@@ -2271,15 +2222,2 @@\n-    private void setFocusOwner(Node value) {\n-        \/\/ Cancel IM composition if there is one in progress.\n-        \/\/ This needs to be done before the focus owner is switched as it\n-        \/\/ generates event that needs to be delivered to the old focus owner.\n-        if (oldFocusOwner != null) {\n-            final Scene s = oldFocusOwner.getScene();\n-            if (s != null) {\n-                final TKScene peer = s.getPeer();\n-                if (peer != null) {\n-                    peer.finishInputMethodComposition();\n-                }\n-            }\n-        }\n-\n-        focusOwner.set(value);\n+    public final ReadOnlyObjectProperty<Node> focusOwnerProperty() {\n+        return focusOwner.getReadOnlyProperty();\n@@ -4104,0 +4042,86 @@\n+    \/* *****************************************************************************\n+     *                                                                             *\n+     * Key Event Handling                                                          *\n+     *                                                                             *\n+     ******************************************************************************\/\n+\n+    class KeyHandler {\n+        boolean focusVisible;\n+\n+        private void setFocusOwner(Node value, boolean focusVisible) {\n+            this.focusVisible = focusVisible;\n+\n+            \/\/ Cancel IM composition if there is one in progress.\n+            \/\/ This needs to be done before the focus owner is switched as it\n+            \/\/ generates event that needs to be delivered to the old focus owner.\n+            if (oldFocusOwner != null) {\n+                final Scene s = oldFocusOwner.getScene();\n+                if (s != null) {\n+                    final TKScene peer = s.getPeer();\n+                    if (peer != null) {\n+                        peer.finishInputMethodComposition();\n+                    }\n+                }\n+            }\n+            focusOwner.set(value);\n+        }\n+\n+        private void setFocusVisible(Node node, boolean focusVisible) {\n+            this.focusVisible = focusVisible;\n+            node.focusVisible.set(focusVisible);\n+            node.focusVisible.notifyListeners();\n+        }\n+\n+        private boolean windowFocused;\n+        protected boolean isWindowFocused() { return windowFocused; }\n+        protected void setWindowFocused(boolean value) {\n+            windowFocused = value;\n+            if (getFocusOwner() != null) {\n+                getFocusOwner().setFocusQuietly(windowFocused, focusVisible);\n+                getFocusOwner().notifyFocusListeners();\n+            }\n+            if (windowFocused) {\n+                if (accessible != null) {\n+                    accessible.sendNotification(AccessibleAttribute.FOCUS_NODE);\n+                }\n+            }\n+        }\n+\n+        private void windowForSceneChanged(Window oldWindow, Window window) {\n+            if (oldWindow != null) {\n+                oldWindow.focusedProperty().removeListener(sceneWindowFocusedListener);\n+            }\n+\n+            if (window != null) {\n+                window.focusedProperty().addListener(sceneWindowFocusedListener);\n+                setWindowFocused(window.isFocused());\n+            } else {\n+                setWindowFocused(false);\n+            }\n+        }\n+\n+        private final InvalidationListener sceneWindowFocusedListener = valueModel -> setWindowFocused(((ReadOnlyBooleanProperty)valueModel).get());\n+\n+        private void process(KeyEvent e) {\n+            final Node sceneFocusOwner = getFocusOwner();\n+            final EventTarget eventTarget =\n+                    (sceneFocusOwner != null && sceneFocusOwner.getScene() == Scene.this) ? sceneFocusOwner\n+                                              : Scene.this;\n+\n+            \/\/ send the key event to the current focus owner or to scene if\n+            \/\/ the focus owner is not set\n+            Event.fireEvent(eventTarget, e);\n+        }\n+\n+        private void requestFocus(Node node, boolean focusVisible) {\n+            if (node == null) {\n+                setFocusOwner(null, focusVisible);\n+            } else if (node.isCanReceiveFocus()) {\n+                if (node != getFocusOwner()) {\n+                    setFocusOwner(node, focusVisible);\n+                } else {\n+                    setFocusVisible(node, focusVisible);\n+                }\n+            }\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Scene.java","additions":111,"deletions":87,"binary":false,"changes":198,"status":"modified"}]}