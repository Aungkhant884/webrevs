{"files":[{"patch":"@@ -437,0 +437,4 @@\n+    if (!process_dnd_source(event)) {\n+        return;\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassApplication.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -169,1 +169,3 @@\n-static void notify_drag_leave(WindowContext *ctx) {\n+static void process_dnd_target_drag_leave(WindowContext *ctx, GdkEventDND *event) {\n+    (void)event;\n+\n@@ -186,8 +188,0 @@\n-static void notify_drag_drop(WindowContext *ctx, GdkDragAction selected, int x_root, int y_root) {\n-    mainEnv->CallIntMethod(ctx->get_jview(), jViewNotifyDragDrop,\n-            (jint)x_root - enter_ctx.dx, (jint)y_root - enter_ctx.dy,\n-            (jint)x_root, (jint)y_root,\n-            translate_gdk_action_to_glass(selected));\n-    LOG_EXCEPTION(mainEnv)\n-}\n-\n@@ -202,1 +196,5 @@\n-    notify_drag_drop(ctx, selected, event->x_root, event->y_root);\n+    mainEnv->CallIntMethod(ctx->get_jview(), jViewNotifyDragDrop,\n+            (jint)event->x_root - enter_ctx.dx, (jint)event->y_root - enter_ctx.dy,\n+            (jint)event->x_root, (jint)event->y_root,\n+            translate_gdk_action_to_glass(selected));\n+    LOG_EXCEPTION(mainEnv)\n@@ -230,1 +228,1 @@\n-            notify_drag_leave(ctx);\n+            process_dnd_target_drag_leave(ctx, event);\n@@ -491,0 +489,2 @@\n+const char * const SOURCE_DND_CONTEXT = \"fx-dnd-context\";\n+const char * const SOURCE_DND_DRAG_VIEW = \"fx-dnd-drag-view\";\n@@ -727,0 +727,7 @@\n+\/\/static void send_drop_finished(GdkWindow *window) {\n+\/\/    GdkEvent* event = gdk_event_new(GDK_DROP_FINISHED);\n+\/\/    event->any.window = g_object_ref(window);\n+\/\/\n+\/\/    gdk_display_put_event(gdk_display_get_default(), event);\n+\/\/}\n+\n@@ -737,0 +744,1 @@\n+\/\/    send_drop_finished(ctx->dnd_window);\n@@ -742,9 +750,3 @@\n-    if (is_dnd_owner) {\n-        WindowContext *window_ctx = (WindowContext*)\n-            g_object_get_data(G_OBJECT(ctx->dnd_window), GDK_WINDOW_DATA_CONTEXT);\n-\n-        if (selected) {\n-            notify_drag_drop(window_ctx, selected, event->button.x_root, event->button.y_root);\n-        } else {\n-            notify_drag_leave(window_ctx);\n-        }\n+    if (selected) {\n+        ctx->performed_action = translate_gdk_action_to_glass(selected);\n+        gdk_drag_drop(ctx->dnd_ctx, GDK_CURRENT_TIME);\n@@ -752,6 +754,1 @@\n-        if (selected) {\n-            ctx->performed_action = translate_gdk_action_to_glass(selected);\n-            gdk_drag_drop(ctx->dnd_ctx, GDK_CURRENT_TIME);\n-        } else {\n-            gdk_drag_abort(ctx->dnd_ctx, GDK_CURRENT_TIME);\n-        }\n+        gdk_drag_abort(ctx->dnd_ctx, GDK_CURRENT_TIME);\n@@ -760,1 +757,3 @@\n-    \/\/ This is done to let mouse release event succeed on WindowContext\n+    \/\/ the GDK_BUTTON_RELEASE will be put at the end of the queue bacause\n+    \/\/ WindowContext mouse release would stop DND before it's completed\n+    gdk_display_put_event(gdk_display_get_default(), event);\n@@ -762,0 +761,1 @@\n+\/\/    send_drop_finished(ctx->dnd_window);\n@@ -768,0 +768,4 @@\n+    if (ctx->drag_view) {\n+        ctx->drag_view->move(x_root, y_root);\n+    }\n+\n@@ -924,0 +928,1 @@\n+    g_object_set_data(G_OBJECT(ctx->dnd_window), SOURCE_DND_CONTEXT, ctx);\n@@ -952,3 +957,5 @@\n-static void dnd_source_hook(GdkEvent *event, void * data) {\n-    DragSourceContext *ctx = (DragSourceContext *) data;\n-    GdkWindow *window = event->any.window;\n+\/\/true = continue\n+bool process_dnd_source(GdkEvent *event) {\n+    if (!in_drag) {\n+        return true;\n+    }\n@@ -956,4 +963,11 @@\n-    if (ctx->drag_view != NULL && event->type == GDK_EXPOSE &&\n-        window == ctx->drag_view->get_window()) {\n-        ctx->drag_view->expose();\n-        return;\n+    GdkWindow* window = event->any.window;\n+\n+    if (!window) {\n+        return true;\n+    }\n+\n+    DragView *drag_view = (DragView *) g_object_get_data(G_OBJECT(window), SOURCE_DND_DRAG_VIEW);\n+    if (drag_view != NULL && event->type == GDK_EXPOSE &&\n+        window == drag_view->get_window()) {\n+        drag_view->expose();\n+        return true;\n@@ -962,4 +976,5 @@\n-    \/\/ dnd_window window will grab pointer motion, so it's delivered there\n-    if (event->type == GDK_MOTION_NOTIFY && ctx->drag_view != NULL\n-        && window == ctx->dnd_window) {\n-        ctx->drag_view->move(event->motion.x_root, event->motion.y_root);\n+    DragSourceContext *ctx = (DragSourceContext*)\n+        g_object_get_data(G_OBJECT(window), SOURCE_DND_CONTEXT);\n+\n+    if (ctx == NULL) {\n+        return true;\n@@ -971,1 +986,1 @@\n-        return;\n+        return true;\n@@ -975,1 +990,1 @@\n-        return;\n+        return true;\n@@ -987,1 +1002,1 @@\n-            break;\n+            return false;\n@@ -1005,0 +1020,2 @@\n+\n+    return true;\n@@ -1008,1 +1025,0 @@\n-    GevlHookRegistration hookReg;\n@@ -1018,2 +1034,0 @@\n-    hookReg = glass_evloop_hook_add((GevlHookFunction) dnd_source_hook, ctx);\n-\n@@ -1024,2 +1038,0 @@\n-    glass_evloop_hook_remove(hookReg);\n-\n@@ -1178,0 +1190,1 @@\n+    g_object_set_data(G_OBJECT(window), SOURCE_DND_DRAG_VIEW, this);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_dnd.cpp","additions":59,"deletions":46,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+bool process_dnd_source(GdkEvent *);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_dnd.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}