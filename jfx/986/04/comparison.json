{"files":[{"patch":"@@ -42,1 +42,0 @@\n-#include \"glass_dnd.h\"\n@@ -46,2 +45,0 @@\n-GdkEventFunc process_events_prev;\n-static void process_events(GdkEvent*, gpointer);\n@@ -52,0 +49,2 @@\n+extern GdkEventFunc process_events_prev;\n+\n@@ -164,1 +163,1 @@\n-    gdk_event_handler_set(process_events, NULL, NULL);\n+    gdk_event_handler_set(glass_evloop_process_events, NULL, NULL);\n@@ -393,135 +392,0 @@\n-bool is_window_enabled_for_event(GdkWindow * window, WindowContext *ctx, gint event_type) {\n-\n-\n-    if (gdk_window_is_destroyed(window)) {\n-        return FALSE;\n-    }\n-\n-    \/*\n-     * GDK_DELETE can be blocked for disabled window e.q. parent window\n-     * which prevents from closing it\n-     *\/\n-    switch (event_type) {\n-        case GDK_CONFIGURE:\n-        case GDK_DESTROY:\n-        case GDK_EXPOSE:\n-        case GDK_DAMAGE:\n-        case GDK_WINDOW_STATE:\n-        case GDK_FOCUS_CHANGE:\n-            return TRUE;\n-            break;\n-    }\/\/switch\n-\n-    if (ctx != NULL ) {\n-        return ctx->isEnabled();\n-    }\n-    return TRUE;\n-}\n-\n-static void process_events(GdkEvent* event, gpointer data)\n-{\n-    GdkWindow* window = event->any.window;\n-    WindowContext *ctx = window != NULL ? (WindowContext*)\n-        g_object_get_data(G_OBJECT(window), GDK_WINDOW_DATA_CONTEXT) : NULL;\n-\n-    if ((window != NULL)\n-            && !is_window_enabled_for_event(window, ctx, event->type)) {\n-        return;\n-    }\n-\n-    if (ctx != NULL && ctx->hasIME() && ctx->filterIME(event)) {\n-        return;\n-    }\n-\n-    glass_evloop_call_hooks(event);\n-\n-    if (ctx != NULL) {\n-        EventsCounterHelper helper(ctx);\n-        try {\n-            switch (event->type) {\n-                case GDK_PROPERTY_NOTIFY:\n-                    ctx->process_property_notify(&event->property);\n-                    gtk_main_do_event(event);\n-                    break;\n-                case GDK_CONFIGURE:\n-                    ctx->process_configure(&event->configure);\n-                    gtk_main_do_event(event);\n-                    break;\n-                case GDK_FOCUS_CHANGE:\n-                    ctx->process_focus(&event->focus_change);\n-                    gtk_main_do_event(event);\n-                    break;\n-                case GDK_DESTROY:\n-                    destroy_and_delete_ctx(ctx);\n-                    gtk_main_do_event(event);\n-                    break;\n-                case GDK_DELETE:\n-                    ctx->process_delete();\n-                    break;\n-                case GDK_EXPOSE:\n-                case GDK_DAMAGE:\n-                    ctx->process_expose(&event->expose);\n-                    break;\n-                case GDK_WINDOW_STATE:\n-                    ctx->process_state(&event->window_state);\n-                    gtk_main_do_event(event);\n-                    break;\n-                case GDK_BUTTON_PRESS:\n-                case GDK_BUTTON_RELEASE:\n-                    ctx->process_mouse_button(&event->button);\n-                    break;\n-                case GDK_MOTION_NOTIFY:\n-                    ctx->process_mouse_motion(&event->motion);\n-                    gdk_event_request_motions(&event->motion);\n-                    break;\n-                case GDK_SCROLL:\n-                    ctx->process_mouse_scroll(&event->scroll);\n-                    break;\n-                case GDK_ENTER_NOTIFY:\n-                case GDK_LEAVE_NOTIFY:\n-                    ctx->process_mouse_cross(&event->crossing);\n-                    break;\n-                case GDK_KEY_PRESS:\n-                case GDK_KEY_RELEASE:\n-                    ctx->process_key(&event->key);\n-                    break;\n-                case GDK_DROP_START:\n-                case GDK_DRAG_ENTER:\n-                case GDK_DRAG_LEAVE:\n-                case GDK_DRAG_MOTION:\n-                    process_dnd_target(ctx, &event->dnd);\n-                    break;\n-                case GDK_MAP:\n-                    ctx->process_map();\n-                    \/\/ fall-through\n-                case GDK_UNMAP:\n-                case GDK_CLIENT_EVENT:\n-                case GDK_VISIBILITY_NOTIFY:\n-                case GDK_SETTING:\n-                case GDK_OWNER_CHANGE:\n-                    gtk_main_do_event(event);\n-                    break;\n-                default:\n-                    break;\n-            }\n-        } catch (jni_exception&) {\n-        }\n-    } else {\n-\n-        if (window == gdk_screen_get_root_window(gdk_screen_get_default())) {\n-            if (event->any.type == GDK_PROPERTY_NOTIFY) {\n-                if (event->property.atom == gdk_atom_intern_static_string(\"_NET_WORKAREA\")\n-                        || event->property.atom == gdk_atom_intern_static_string(\"_NET_CURRENT_DESKTOP\")) {\n-                    screen_settings_changed(gdk_screen_get_default(), NULL);\n-                }\n-            }\n-        }\n-\n-        \/\/process only for non-FX windows\n-        if (process_events_prev != NULL) {\n-            (*process_events_prev)(event, data);\n-        } else {\n-            gtk_main_do_event(event);\n-        }\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassApplication.cpp","additions":3,"deletions":139,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -40,2 +40,1 @@\n-static jint translate_gdk_action_to_glass(GdkDragAction action)\n-{\n+static jint translate_gdk_action_to_glass(GdkDragAction action) {\n@@ -49,2 +48,1 @@\n-static GdkDragAction translate_glass_action_to_gdk(jint action)\n-{\n+static GdkDragAction translate_glass_action_to_gdk(jint action) {\n@@ -63,1 +61,0 @@\n-\n@@ -65,1 +62,0 @@\n-\n@@ -91,2 +87,1 @@\n-static gboolean target_is_text(GdkAtom target)\n-{\n+static gboolean target_is_text(GdkAtom target) {\n@@ -101,2 +96,1 @@\n-static gboolean target_is_uri(GdkAtom target)\n-{\n+static gboolean target_is_uri(GdkAtom target) {\n@@ -107,2 +101,1 @@\n-static gboolean target_is_image(GdkAtom target)\n-{\n+static gboolean target_is_image(GdkAtom target) {\n@@ -116,2 +109,1 @@\n-static void clear_global_ref(gpointer data)\n-{\n+static void clear_global_ref(gpointer data) {\n@@ -144,6 +136,0 @@\n-GtkWidget *drag_widget = NULL;\n-\n-gboolean is_in_drag() {\n-    return drag_widget != NULL;\n-}\n-\n@@ -154,1 +140,0 @@\n-\n@@ -158,2 +143,1 @@\n-static void process_dnd_target_drag_enter(WindowContext *ctx, GdkEventDND *event)\n-{\n+static void process_dnd_target_drag_enter(WindowContext *ctx, GdkEventDND *event) {\n@@ -167,2 +151,1 @@\n-static void process_dnd_target_drag_motion(WindowContext *ctx, GdkEventDND *event)\n-{\n+static void process_dnd_target_drag_motion(WindowContext *ctx, GdkEventDND *event) {\n@@ -173,0 +156,1 @@\n+\n@@ -184,0 +168,1 @@\n+\n@@ -187,2 +172,1 @@\n-static void process_dnd_target_drag_leave(WindowContext *ctx, GdkEventDND *event)\n-{\n+static void process_dnd_target_drag_leave(WindowContext *ctx, GdkEventDND *event) {\n@@ -195,2 +179,1 @@\n-static void process_dnd_target_drop_start(WindowContext *ctx, GdkEventDND *event)\n-{\n+static void process_dnd_target_drop_start(WindowContext *ctx, GdkEventDND *event) {\n@@ -198,2 +181,2 @@\n-        gdk_drop_finish(event->context, FALSE, GDK_CURRENT_TIME);\n-        gdk_drop_reply(event->context, FALSE, GDK_CURRENT_TIME);\n+        gdk_drop_reply(event->context, FALSE, event->time);\n+        gdk_drop_finish(event->context, FALSE, event->time);\n@@ -202,0 +185,1 @@\n+\n@@ -210,2 +194,2 @@\n-    gdk_drop_finish(event->context, TRUE, GDK_CURRENT_TIME);\n-    gdk_drop_reply(event->context, TRUE, GDK_CURRENT_TIME);\n+    gdk_drop_reply(event->context, TRUE, event->time);\n+    gdk_drop_finish(event->context, TRUE, event->time);\n@@ -214,2 +198,1 @@\n-static gboolean check_state_in_drag(JNIEnv *env)\n-{\n+static gboolean check_state_in_drag(JNIEnv *env) {\n@@ -228,2 +211,1 @@\n-void process_dnd_target(WindowContext *ctx, GdkEventDND *event)\n-{\n+void process_dnd_target(WindowContext *ctx, GdkEventDND *event) {\n@@ -248,2 +230,1 @@\n-jobjectArray dnd_target_get_mimes(JNIEnv *env)\n-{\n+jobjectArray dnd_target_get_mimes(JNIEnv *env) {\n@@ -316,2 +297,1 @@\n-jint dnd_target_get_supported_actions(JNIEnv *env)\n-{\n+jint dnd_target_get_supported_actions(JNIEnv *env) {\n@@ -324,2 +304,1 @@\n-static void wait_for_selection_data_hook(GdkEvent * event, void * data)\n-{\n+static void wait_for_selection_data_hook(GdkEvent * event, void * data) {\n@@ -337,2 +316,1 @@\n-static gboolean dnd_target_receive_data(JNIEnv *env, GdkAtom target, selection_data_ctx *selection_ctx)\n-{\n+static gboolean dnd_target_receive_data(JNIEnv *env, GdkAtom target, selection_data_ctx *selection_ctx) {\n@@ -343,1 +321,3 @@\n-    gdk_selection_convert(glass_gdk_drag_context_get_dest_window(enter_ctx.ctx), gdk_drag_get_selection(enter_ctx.ctx), target,\n+    gdk_selection_convert(glass_gdk_drag_context_get_dest_window(enter_ctx.ctx),\n+                          gdk_drag_get_selection(enter_ctx.ctx),\n+                          target,\n@@ -346,6 +326,3 @@\n-    hookReg =\n-            glass_evloop_hook_add(\n-                    (GevlHookFunction) wait_for_selection_data_hook,\n-                    selection_ctx);\n-    if (HANDLE_MEM_ALLOC_ERROR(env, hookReg,\n-                               \"Failed to allocate event hook\")) {\n+    hookReg = glass_evloop_hook_add((GevlHookFunction) wait_for_selection_data_hook,\n+                                    selection_ctx);\n+    if (HANDLE_MEM_ALLOC_ERROR(env, hookReg, \"Failed to allocate event hook\")) {\n@@ -359,1 +336,0 @@\n-\n@@ -364,2 +340,1 @@\n-static jobject dnd_target_get_string(JNIEnv *env)\n-{\n+static jobject dnd_target_get_string(JNIEnv *env) {\n@@ -395,2 +370,1 @@\n-static jobject dnd_target_get_list(JNIEnv *env, gboolean files)\n-{\n+static jobject dnd_target_get_list(JNIEnv *env, gboolean files) {\n@@ -408,2 +382,1 @@\n-static jobject dnd_target_get_image(JNIEnv *env)\n-{\n+static jobject dnd_target_get_image(JNIEnv *env) {\n@@ -468,2 +441,1 @@\n-static jobject dnd_target_get_raw(JNIEnv *env, GdkAtom target, gboolean string_data)\n-{\n+static jobject dnd_target_get_raw(JNIEnv *env, GdkAtom target, gboolean string_data) {\n@@ -490,2 +462,1 @@\n-jobject dnd_target_get_data(JNIEnv *env, jstring mime)\n-{\n+jobject dnd_target_get_data(JNIEnv *env, jstring mime) {\n@@ -520,1 +491,2 @@\n-\n+static GdkWindow *dnd_window = NULL;\n+static DragView *drag_view = NULL;\n@@ -523,0 +495,1 @@\n+const char * const SOURCE_DND_CONTEXT = \"fx-dnd-context\";\n@@ -524,0 +497,13 @@\n+const char * const SOURCE_DND_ACTIONS = \"fx-dnd-actions\";\n+\n+static GdkWindow* get_dnd_window() {\n+    if (dnd_window == NULL) {\n+        GdkWindowAttr attr;\n+        memset(&attr, 0, sizeof (GdkWindowAttr));\n+        attr.override_redirect = TRUE;\n+        attr.window_type = GDK_WINDOW_TOPLEVEL;\n+        attr.wclass = GDK_INPUT_OUTPUT;\n+        attr.event_mask = GDK_FILTERED_EVENTS_MASK;\n+        dnd_window = gdk_window_new(NULL, &attr, GDK_WA_NOREDIR);\n+        gdk_window_show(dnd_window);\n+    }\n@@ -525,2 +511,4 @@\n-static void dnd_set_performed_action(jint performed_action)\n-{\n+    return dnd_window;\n+}\n+\n+static void dnd_set_performed_action(jint performed_action) {\n@@ -530,2 +518,1 @@\n-static jint dnd_get_performed_action()\n-{\n+static jint dnd_get_performed_action() {\n@@ -535,5 +522,2 @@\n-static void pixbufDestroyNotifyFunc(guchar *pixels, gpointer)\n-{\n-    if (pixels != NULL) {\n-        g_free(pixels);\n-    }\n+static GdkDragContext *get_drag_context() {\n+    return (GdkDragContext*)g_object_get_data(G_OBJECT(dnd_window), SOURCE_DND_CONTEXT);\n@@ -542,6 +526,2 @@\n-static jobject dnd_source_get_data(GtkWidget *widget, const char *key)\n-{\n-    jobject data = (jobject)g_object_get_data(G_OBJECT(widget), SOURCE_DND_DATA);\n-    jstring string = mainEnv->NewStringUTF(key);\n-    EXCEPTION_OCCURED(mainEnv);\n-    jobject result = mainEnv->CallObjectMethod(data, jMapGet, string, NULL);\n+static bool dnd_pointer_grab(GdkCursor *cursor) {\n+    GdkGrabStatus status;\n@@ -549,2 +529,8 @@\n-    return (EXCEPTION_OCCURED(mainEnv)) ? NULL : result;\n-}\n+    GdkEventMask mask = (GdkEventMask)\n+                            (GDK_POINTER_MOTION_MASK\n+                                | GDK_BUTTON_MOTION_MASK\n+                                | GDK_BUTTON1_MOTION_MASK\n+                                | GDK_BUTTON2_MOTION_MASK\n+                                | GDK_BUTTON3_MOTION_MASK\n+                                | GDK_BUTTON_PRESS_MASK\n+                                | GDK_BUTTON_RELEASE_MASK);\n@@ -552,3 +538,1 @@\n-static void add_gtk_target_from_jstring(JNIEnv *env, GtkTargetList **list, jstring string, guint flags)\n-{\n-    const char *gstring = env->GetStringUTFChars(string, NULL);\n+    status = gdk_pointer_grab(dnd_window, FALSE, mask, NULL, cursor, GDK_CURRENT_TIME);\n@@ -556,19 +540,2 @@\n-    if (g_strcmp0(gstring, \"text\/plain\") == 0) {\n-        gtk_target_list_add(*list, TARGET_UTF8_STRING_ATOM, flags, 0);\n-        gtk_target_list_add(*list, TARGET_MIME_TEXT_PLAIN_ATOM, flags, 0);\n-        gtk_target_list_add(*list, TARGET_STRING_ATOM, flags, 0);\n-        \/\/gtk_target_list_add(*list, TARGET_COMPOUND_TEXT_ATOM, flags, ??);\n-    } else if (g_strcmp0(gstring, \"application\/x-java-rawimage\") == 0) {\n-        gtk_target_list_add(*list, TARGET_MIME_PNG_ATOM, flags, 0);\n-        gtk_target_list_add(*list, TARGET_MIME_JPEG_ATOM, flags, 0);\n-        gtk_target_list_add(*list, TARGET_MIME_TIFF_ATOM, flags, 0);\n-        gtk_target_list_add(*list, TARGET_MIME_BMP_ATOM, flags, 0);\n-    } else if (g_strcmp0(gstring, \"application\/x-java-file-list\") == 0) {\n-        gtk_target_list_add(*list, TARGET_MIME_URI_LIST_ATOM, flags, 0);\n-    } else if (g_strcmp0(gstring, \"application\/x-java-drag-image\") == 0\n-        || g_strcmp0(gstring, \"application\/x-java-drag-image-offset\") == 0) {\n-        \/\/ do nothing - those are DragView information\n-    } else {\n-        GdkAtom atom = gdk_atom_intern(gstring, FALSE);\n-        gtk_target_list_add(*list, atom, flags, 0);\n-    }\n+    return status == GDK_GRAB_SUCCESS;\n+}\n@@ -576,1 +543,3 @@\n-    env->ReleaseStringUTFChars(string, gstring);\n+\n+gboolean is_in_drag() {\n+    return dnd_window != NULL;\n@@ -579,3 +548,15 @@\n-static GtkTargetList* data_to_gtk_target_list(JNIEnv *env, jobject data)\n-{\n-    guint flags = GTK_TARGET_OTHER_APP | GTK_TARGET_SAME_APP;\n+static void determine_actions(guint state, GdkDragAction *action, GdkDragAction *possible_actions) {\n+    GdkDragAction suggested = static_cast<GdkDragAction>(GPOINTER_TO_INT(g_object_get_data(G_OBJECT(dnd_window), SOURCE_DND_ACTIONS)));\n+\n+    if (state & (GDK_SHIFT_MASK | GDK_CONTROL_MASK)) {\n+        if ((state & GDK_CONTROL_MASK) && (state & GDK_SHIFT_MASK) && (suggested & GDK_ACTION_LINK)) {\n+            *action = *possible_actions = GDK_ACTION_LINK;\n+            return;\n+        } else if ((state & GDK_SHIFT_MASK) && (suggested & GDK_ACTION_MOVE)) {\n+            *action = *possible_actions = GDK_ACTION_MOVE;\n+            return;\n+        } else if (suggested & GDK_ACTION_COPY){\n+            *action = *possible_actions = GDK_ACTION_COPY;\n+            return;\n+        }\n+    }\n@@ -583,3 +564,1 @@\n-    jobject keys;\n-    jobject keysIterator;\n-    jstring next;\n+    *possible_actions = suggested;\n@@ -587,1 +566,10 @@\n-    GtkTargetList *tlist = gtk_target_list_new (NULL, 0);\n+    if (suggested & GDK_ACTION_COPY) {\n+        *action = GDK_ACTION_COPY;\n+    } else if (suggested & GDK_ACTION_MOVE) {\n+        *action = GDK_ACTION_MOVE;\n+    } else if (suggested & GDK_ACTION_LINK) {\n+        *action = GDK_ACTION_LINK;\n+    } else {\n+        *action = static_cast<GdkDragAction>(0);\n+    }\n+}\n@@ -589,1 +577,5 @@\n-    init_target_atoms();\n+static jobject dnd_source_get_data(const char *key) {\n+    jobject data = (jobject)g_object_get_data(G_OBJECT(dnd_window), SOURCE_DND_DATA);\n+    jstring string = mainEnv->NewStringUTF(key);\n+    EXCEPTION_OCCURED(mainEnv);\n+    jobject result = mainEnv->CallObjectMethod(data, jMapGet, string, NULL);\n@@ -591,1 +583,2 @@\n-    gint added_count = 0;\n+    return (EXCEPTION_OCCURED(mainEnv)) ? NULL : result;\n+}\n@@ -593,8 +586,4 @@\n-    keys = env->CallObjectMethod(data, jMapKeySet, NULL);\n-    JNI_EXCEPTION_TO_CPP(env)\n-    keysIterator = env->CallObjectMethod(keys, jIterableIterator, NULL);\n-    JNI_EXCEPTION_TO_CPP(env)\n-    while (env->CallBooleanMethod(keysIterator, jIteratorHasNext) == JNI_TRUE) {\n-        next = (jstring)env->CallObjectMethod(keysIterator, jIteratorNext, NULL);\n-        JNI_EXCEPTION_TO_CPP(env)\n-        add_gtk_target_from_jstring(env, &tlist, next, flags);\n+static gboolean dnd_source_set_utf8_string(GdkWindow *requestor, GdkAtom property) {\n+    jstring string = (jstring)dnd_source_get_data(\"text\/plain\");\n+    if (!string) {\n+        return FALSE;\n@@ -603,2 +592,5 @@\n-    return tlist;\n-}\n+    const char *cstring = mainEnv->GetStringUTFChars(string, NULL);\n+    if (!cstring) {\n+        return FALSE;\n+    }\n+    gint size = strlen(cstring);\n@@ -606,3 +598,2 @@\n-static gboolean dnd_source_set_string(GtkWidget *widget, GtkSelectionData *data, GdkAtom atom)\n-{\n-    gboolean is_data_set;\n+    gdk_property_change(requestor, property, GDK_SELECTION_TYPE_STRING,\n+            8, GDK_PROP_MODE_REPLACE, (guchar *)cstring, size);\n@@ -610,1 +601,6 @@\n-    jstring string = (jstring)dnd_source_get_data(widget, \"text\/plain\");\n+    mainEnv->ReleaseStringUTFChars(string, cstring);\n+    return TRUE;\n+}\n+\n+static gboolean dnd_source_set_string(GdkWindow *requestor, GdkAtom property) {\n+    jstring string = (jstring)dnd_source_get_data(\"text\/plain\");\n@@ -615,0 +611,1 @@\n+    gboolean is_data_set = FALSE;\n@@ -617,11 +614,1 @@\n-        if (atom == TARGET_MIME_TEXT_PLAIN_ATOM) {\n-            gchar *res_str = g_convert((gchar *) cstring, -1, \"ISO-8859-1\", \"UTF-8\", NULL, NULL, NULL);\n-            if (res_str) {\n-                is_data_set = gtk_selection_data_set_text(data, res_str, strlen(res_str));\n-                g_free(res_str);\n-            }\n-        } else {\n-            gint size = strlen(cstring);\n-            is_data_set = gtk_selection_data_set_text(data, (gchar *) cstring, size);\n-        }\n-    }\n+        gchar *res_str = g_convert((gchar *)cstring, -1, \"ISO-8859-1\", \"UTF-8\", NULL, NULL, NULL);\n@@ -629,1 +616,6 @@\n-    mainEnv->ReleaseStringUTFChars(string, cstring);\n+        if (res_str) {\n+            gdk_property_change(requestor, property, GDK_SELECTION_TYPE_STRING,\n+                    8, GDK_PROP_MODE_REPLACE, (guchar *)res_str, strlen(res_str));\n+            g_free(res_str);\n+            is_data_set = TRUE;\n+        }\n@@ -631,0 +623,2 @@\n+        mainEnv->ReleaseStringUTFChars(string, cstring);\n+    }\n@@ -634,3 +628,2 @@\n-static gboolean dnd_source_set_image(GtkWidget *widget, GtkSelectionData *data, GdkAtom atom)\n-{\n-    jobject pixels = dnd_source_get_data(widget, \"application\/x-java-rawimage\");\n+static gboolean dnd_source_set_image(GdkWindow *requestor, GdkAtom property, GdkAtom target) {\n+    jobject pixels = dnd_source_get_data(\"application\/x-java-rawimage\");\n@@ -645,1 +638,13 @@\n-    gboolean is_data_set;\n+    gboolean result = FALSE;\n+\n+    if (target == TARGET_MIME_PNG_ATOM) {\n+        type = \"png\";\n+    } else if (target == TARGET_MIME_JPEG_ATOM) {\n+        type = \"jpeg\";\n+    } else if (target == TARGET_MIME_TIFF_ATOM) {\n+        type = \"tiff\";\n+    } else if (target == TARGET_MIME_BMP_ATOM) {\n+        type = \"bmp\";\n+    } else {\n+        return FALSE;\n+    }\n@@ -649,2 +654,5 @@\n-    if (!EXCEPTION_OCCURED(mainEnv)) {\n-        is_data_set = gtk_selection_data_set_pixbuf(data, pixbuf);\n+    if (!EXCEPTION_OCCURED(mainEnv)\n+            && gdk_pixbuf_save_to_buffer(pixbuf, &buffer, &size, type, NULL, NULL)) {\n+        gdk_property_change(requestor, property, target,\n+                8, GDK_PROP_MODE_REPLACE, (guchar *)buffer, size);\n+        result = TRUE;\n@@ -652,1 +660,0 @@\n-\n@@ -654,2 +661,1 @@\n-\n-    return is_data_set;\n+    return result;\n@@ -658,2 +664,1 @@\n-static gboolean dnd_source_set_uri(GtkWidget *widget, GtkSelectionData *data, GdkAtom atom)\n-{\n+static gboolean dnd_source_set_uri_list(GdkWindow *requestor, GdkAtom property) {\n@@ -666,1 +671,1 @@\n-    if (jurl = (jstring) dnd_source_get_data(widget, \"text\/uri-list\")) {\n+    if (jurl = (jstring) dnd_source_get_data(\"text\/uri-list\")) {\n@@ -670,1 +675,1 @@\n-    if (files_array = (jobjectArray) dnd_source_get_data(widget, \"application\/x-java-file-list\")) {\n+    if (files_array = (jobjectArray) dnd_source_get_data(\"application\/x-java-file-list\")) {\n@@ -673,1 +678,0 @@\n-\n@@ -678,1 +682,0 @@\n-    gboolean is_data_set;\n@@ -701,7 +704,2 @@\n-    gchar *uri[2];\n-    uri[0] = g_string_free(res, FALSE);\n-    uri[1] = NULL;\n-\n-    is_data_set = gtk_selection_data_set_uris(data, uri);\n-\n-    g_free(uri[0]);\n+    gdk_property_change(requestor, property, GDK_SELECTION_TYPE_STRING,\n+            8, GDK_PROP_MODE_REPLACE, (guchar *) res->str, res->len);\n@@ -709,1 +707,2 @@\n-    return is_data_set;\n+    g_string_free(res, TRUE);\n+    return TRUE;\n@@ -712,4 +711,3 @@\n-static gboolean dnd_source_set_raw(GtkWidget *widget, GtkSelectionData *sel_data, GdkAtom atom)\n-{\n-    gchar *target_name = gdk_atom_name(atom);\n-    jobject data = dnd_source_get_data(widget, target_name);\n+static gboolean dnd_source_set_raw(GdkWindow *requestor, GdkAtom property, GdkAtom target) {\n+    gchar *target_name = gdk_atom_name(target);\n+    jobject data = dnd_source_get_data(target_name);\n@@ -721,1 +719,3 @@\n-                is_data_set = gtk_selection_data_set_text(sel_data, (gchar *) cstring, strlen(cstring));\n+                gdk_property_change(requestor, property, GDK_SELECTION_TYPE_STRING,\n+                        8, GDK_PROP_MODE_REPLACE, (guchar *) cstring, strlen(cstring));\n+\n@@ -723,0 +723,1 @@\n+                is_data_set = TRUE;\n@@ -730,1 +731,4 @@\n-                    gtk_selection_data_set(sel_data, atom, 8, (guchar *) raw, nraw);\n+\n+                    gdk_property_change(requestor, property, target,\n+                            8, GDK_PROP_MODE_REPLACE, (guchar *) raw, nraw);\n+\n@@ -742,4 +746,25 @@\n-static gboolean dnd_destroy_drag_widget_callback(gpointer) {\n-    if (drag_widget) {\n-        gtk_widget_destroy(drag_widget);\n-        drag_widget = NULL;\n+static void process_dnd_source_selection_req(GdkWindow *window, GdkEvent *gdkEvent) {\n+    (void)window;\n+\n+    GdkEventSelection *event = &gdkEvent->selection;\n+\n+#ifdef GLASS_GTK3\n+    GdkWindow *requestor = (event->requestor);\n+#else\n+    GdkWindow *requestor =\n+        gdk_x11_window_foreign_new_for_display(gdk_display_get_default(), event->requestor);\n+#endif\n+\n+    gboolean is_data_set = FALSE;\n+    if (event->target == TARGET_UTF8_STRING_ATOM\n+            || event->target == TARGET_MIME_TEXT_PLAIN_ATOM) {\n+        is_data_set = dnd_source_set_utf8_string(requestor, event->property);\n+    } else if (event->target == TARGET_STRING_ATOM) {\n+        is_data_set = dnd_source_set_string(requestor, event->property);\n+\/\/    } else if (event->target == TARGET_COMPOUND_TEXT_ATOM) { \/\/ XXX compound text\n+    } else if (target_is_image(event->target)) {\n+        is_data_set = dnd_source_set_image(requestor, event->property, event->target);\n+    } else if (event->target == TARGET_MIME_URI_LIST_ATOM) {\n+        is_data_set = dnd_source_set_uri_list(requestor, event->property);\n+    } else {\n+        is_data_set = dnd_source_set_raw(requestor, event->property, event->target);\n@@ -748,1 +773,3 @@\n-    return FALSE;\n+    gdk_selection_send_notify(event->requestor, event->selection, event->target,\n+                               (is_data_set) ? event->property : GDK_NONE, event->time);\n+\n@@ -751,7 +778,4 @@\n-static void dnd_end_callback(GtkWidget *widget,\n-                             GdkDragContext *context,\n-                             gpointer user_data)\n-{\n-    if (drag_widget) {\n-        GdkDragAction action = gdk_drag_context_get_selected_action(context);\n-        dnd_set_performed_action(translate_gdk_action_to_glass(action));\n+static gboolean ungrab_destroy_callback(gpointer) {\n+    if (dnd_window) {\n+        gdk_window_destroy(dnd_window);\n+        dnd_window = NULL;\n@@ -759,2 +783,0 @@\n-    gdk_threads_add_idle((GSourceFunc) dnd_destroy_drag_widget_callback, NULL);\n-}\n@@ -762,7 +784,2 @@\n-static gboolean dnd_drag_failed_callback(GtkWidget *widget,\n-                                     GdkDragContext *context,\n-                                     GtkDragResult result,\n-                                     gpointer user_data)\n-{\n-    dnd_set_performed_action(com_sun_glass_ui_gtk_GtkDnDClipboard_ACTION_NONE);\n-    gdk_threads_add_idle((GSourceFunc) dnd_destroy_drag_widget_callback, NULL);\n+    DragView::reset_drag_view();\n+    glass_gdk_mouse_devices_ungrab();\n@@ -773,15 +790,20 @@\n-static void dnd_data_get_callback(GtkWidget *widget,\n-                                  GdkDragContext *context,\n-                                  GtkSelectionData *data,\n-                                  guint info,\n-                                  guint time,\n-                                  gpointer user_data)\n-{\n-    GdkAtom atom = gtk_selection_data_get_target(data);\n-\n-    if (target_is_text(atom)) {\n-        dnd_source_set_string(widget, data, atom);\n-    } else if (target_is_image(atom)) {\n-        dnd_source_set_image(widget, data, atom);\n-    } else if (target_is_uri(atom)) {\n-        dnd_source_set_uri(widget, data, atom);\n+\n+static void process_dnd_source_grab_broken(GdkWindow *window, GdkEvent *event) {\n+    GdkEventGrabBroken *gb_event = &event->grab_broken;\n+\n+    \/\/ grabbed the same window\n+    if (gb_event->implicit || gb_event->grab_window == dnd_window) {\n+        return;\n+    }\n+\n+    gdk_drag_abort(get_drag_context(), GDK_CURRENT_TIME);\n+    gdk_threads_add_idle((GSourceFunc) ungrab_destroy_callback, NULL);\n+}\n+\n+static void process_dnd_source_mouse_release(GdkWindow *window, GdkEvent *event) {\n+    (void)window;\n+\n+    GdkDragContext* ctx = get_drag_context();\n+\n+    if (gdk_drag_context_get_selected_action(ctx)) {\n+        gdk_drag_drop(ctx, event->dnd.time);\n@@ -789,1 +811,1 @@\n-        dnd_source_set_raw(widget, data, atom);\n+        gdk_drag_abort(ctx, event->dnd.time);\n@@ -791,0 +813,2 @@\n+\n+    gdk_threads_add_idle((GSourceFunc) ungrab_destroy_callback, NULL);\n@@ -793,5 +817,18 @@\n-static void dnd_drag_begin_callback(GtkWidget *widget,\n-                                    GdkDragContext *context,\n-                                    gpointer user_data)\n-{\n-    DragView::set_drag_view(widget, context);\n+static void process_drag_motion(gint x_root, gint y_root, guint state) {\n+    GdkDragContext* ctx = get_drag_context();\n+    GdkWindow *dest_window;\n+    GdkDragProtocol prot;\n+\n+    if (drag_view) {\n+        drag_view->move(x_root, y_root);\n+    }\n+\n+    gdk_drag_find_window_for_screen(ctx, NULL, gdk_screen_get_default(),\n+            x_root, y_root, &dest_window, &prot);\n+\n+    if (prot != GDK_DRAG_PROTO_NONE) {\n+        GdkDragAction action, possible_actions;\n+        determine_actions(state, &action, &possible_actions);\n+        gdk_drag_motion(ctx, dest_window, prot, x_root, y_root,\n+                action, possible_actions, GDK_CURRENT_TIME);\n+    }\n@@ -800,4 +837,35 @@\n-static void dnd_source_push_data(JNIEnv *env, jobject data, jint supported)\n-{\n-    if (supported == 0) {\n-        return; \/\/ No supported actions, do nothing\n+static void process_dnd_source_mouse_motion(GdkWindow *window, GdkEvent *event) {\n+    (void)window;\n+\n+    GdkEventMotion *eventMotion = &event->motion;\n+    process_drag_motion(eventMotion->x_root, eventMotion->y_root, eventMotion->state);\n+}\n+\n+static void process_dnd_source_key_press_release(GdkWindow *window, GdkEvent *event) {\n+    (void)window;\n+\n+    GdkEventKey *eventKey = &event->key;\n+\n+    if (eventKey->is_modifier) {\n+        guint state = eventKey->state;\n+        guint new_mod = 0;\n+        gint x,y;\n+        if (eventKey->keyval == GLASS_GDK_KEY_CONSTANT(Control_L) ||\n+                eventKey->keyval == GLASS_GDK_KEY_CONSTANT(Control_R)) {\n+            new_mod = GDK_CONTROL_MASK;\n+        } else if (eventKey->keyval == GLASS_GDK_KEY_CONSTANT(Alt_L) ||\n+                eventKey->keyval == GLASS_GDK_KEY_CONSTANT(Alt_R)) {\n+            new_mod = GDK_MOD1_MASK;\n+        } else if (eventKey->keyval == GLASS_GDK_KEY_CONSTANT(Shift_L) ||\n+                eventKey->keyval == GLASS_GDK_KEY_CONSTANT(Shift_R)) {\n+            new_mod = GDK_SHIFT_MASK;\n+        }\n+\n+        if (eventKey->type == GDK_KEY_PRESS) {\n+            state |= new_mod;\n+        } else {\n+            state ^= new_mod;\n+        }\n+\n+        glass_gdk_master_pointer_get_position(&x, &y);\n+        process_drag_motion(x, y, state);\n@@ -805,0 +873,1 @@\n+}\n@@ -806,1 +875,2 @@\n-    data = env->NewGlobalRef(data);\n+static void process_dnd_source_drag_status(GdkWindow *window, GdkEvent *event) {\n+    (void)window;\n@@ -808,1 +878,39 @@\n-    GdkDragAction actions = translate_glass_action_to_gdk(supported);\n+    GdkEventDND *eventDnd = &event->dnd;\n+    GdkDragAction selected = gdk_drag_context_get_selected_action(eventDnd->context);\n+    GdkCursor* cursor;\n+\n+    if (selected & GDK_ACTION_COPY) {\n+        cursor = gdk_cursor_new_from_name(gdk_display_get_default(), \"dnd-copy\");\n+        if (cursor == NULL) {\n+            cursor = gdk_cursor_new_from_name(gdk_display_get_default(), \"copy\");\n+        }\n+    } else if (selected & (GDK_ACTION_MOVE | GDK_ACTION_PRIVATE)) {\n+        cursor = gdk_cursor_new_from_name(gdk_display_get_default(), \"dnd-move\");\n+\n+        if (cursor == NULL) {\n+            cursor = gdk_cursor_new_from_name(gdk_display_get_default(), \"pointer-move\");\n+        }\n+    } else if (selected & GDK_ACTION_LINK) {\n+        cursor = gdk_cursor_new_from_name(gdk_display_get_default(), \"dnd-link\");\n+\n+        if (cursor == NULL) {\n+            cursor = gdk_cursor_new_from_name(gdk_display_get_default(), \"link\");\n+        }\n+    } else {\n+        cursor = gdk_cursor_new_from_name(gdk_display_get_default(), \"dnd-no-drop\");\n+\n+        if (cursor == NULL) {\n+            cursor = gdk_cursor_new_from_name(gdk_display_get_default(), \"no-drop\");\n+        }\n+    }\n+\n+    if (cursor == NULL) {\n+        cursor = gdk_cursor_new_from_name(gdk_display_get_default(), \"default\");\n+    }\n+\n+    dnd_pointer_grab(cursor);\n+}\n+\n+static void process_dnd_source_drop_finished(GdkWindow *window, GdkEvent *event) {\n+    (void)window;\n+    (void)event;\n@@ -810,6 +918,5 @@\n-    \/\/ this widget is used only to pass events and will\n-    \/\/ be destroyed on drag end\n-    drag_widget = gtk_window_new(GTK_WINDOW_POPUP);\n-    gtk_window_resize(GTK_WINDOW(drag_widget), 1, 1);\n-    gtk_window_move(GTK_WINDOW(drag_widget), -200, -200);\n-    gtk_widget_show(drag_widget);\n+    dnd_set_performed_action(\n+            translate_gdk_action_to_glass(\n+                gdk_drag_context_get_selected_action(\n+                    get_drag_context())));\n+}\n@@ -817,1 +924,19 @@\n-    g_object_set_data_full(G_OBJECT(drag_widget), SOURCE_DND_DATA, data, clear_global_ref);\n+static void add_target_from_jstring(JNIEnv *env, GList **list, jstring string) {\n+    const char *gstring = env->GetStringUTFChars(string, NULL);\n+    if (g_strcmp0(gstring, \"text\/plain\") == 0) {\n+        *list = g_list_append(*list, TARGET_UTF8_STRING_ATOM);\n+        *list = g_list_append(*list, TARGET_MIME_TEXT_PLAIN_ATOM);\n+        *list = g_list_append(*list, TARGET_STRING_ATOM);\n+        \/\/*list = g_list_append(list, TARGET_COMPOUND_TEXT_ATOM);\n+    } else if (g_strcmp0(gstring, \"application\/x-java-rawimage\") == 0) {\n+        *list = g_list_append(*list, TARGET_MIME_PNG_ATOM);\n+        *list = g_list_append(*list, TARGET_MIME_JPEG_ATOM);\n+        *list = g_list_append(*list, TARGET_MIME_TIFF_ATOM);\n+        *list = g_list_append(*list, TARGET_MIME_BMP_ATOM);\n+    } else if (g_strcmp0(gstring, \"application\/x-java-file-list\") == 0) {\n+        *list = g_list_append(*list, TARGET_MIME_URI_LIST_ATOM);\n+    } else {\n+        *list = g_list_append(*list, gdk_atom_intern(gstring, FALSE));\n+    }\n+    env->ReleaseStringUTFChars(string, gstring);\n+}\n@@ -819,2 +944,4 @@\n-    g_signal_connect(drag_widget, \"drag-begin\",\n-        G_CALLBACK(dnd_drag_begin_callback), NULL);\n+static GList* data_to_targets(JNIEnv *env, jobject data) {\n+    jobject keys;\n+    jobject keysIterator;\n+    jstring next;\n@@ -822,2 +949,1 @@\n-    g_signal_connect(drag_widget, \"drag-failed\",\n-        G_CALLBACK(dnd_drag_failed_callback), NULL);\n+    GList *list = NULL;\n@@ -825,2 +951,1 @@\n-    g_signal_connect(drag_widget, \"drag-data-get\",\n-        G_CALLBACK(dnd_data_get_callback), NULL);\n+    init_target_atoms();\n@@ -828,2 +953,11 @@\n-    g_signal_connect(drag_widget, \"drag-end\",\n-        G_CALLBACK(dnd_end_callback), NULL);\n+    keys = env->CallObjectMethod(data, jMapKeySet, NULL);\n+    JNI_EXCEPTION_TO_CPP(env)\n+    keysIterator = env->CallObjectMethod(keys, jIterableIterator, NULL);\n+    JNI_EXCEPTION_TO_CPP(env)\n+    while (env->CallBooleanMethod(keysIterator, jIteratorHasNext) == JNI_TRUE) {\n+        next = (jstring)env->CallObjectMethod(keysIterator, jIteratorNext, NULL);\n+        JNI_EXCEPTION_TO_CPP(env)\n+        add_target_from_jstring(env, &list, next);\n+    }\n+    return list;\n+}\n@@ -831,1 +965,2 @@\n-    GtkTargetList *tlist = data_to_gtk_target_list(env, data);\n+static void dnd_source_push_data(JNIEnv *env, jobject data, jint supported) {\n+    GdkWindow* src_window = get_dnd_window();\n@@ -833,1 +968,2 @@\n-    GdkDragContext *context;\n+    GList *targets;\n+    GdkDragContext *ctx;\n@@ -835,2 +971,3 @@\n-    gint x, y;\n-    glass_gdk_master_pointer_get_position(&x, &y);\n+    if (supported == 0) {\n+        return; \/\/ No supported actions, do nothing\n+    }\n@@ -838,1 +975,2 @@\n-    is_dnd_owner = TRUE;\n+    targets = data_to_targets(env, data);\n+    data = env->NewGlobalRef(data);\n@@ -840,1 +978,10 @@\n-    context = gtk_drag_begin(drag_widget, tlist, actions, 1, NULL);\n+    GdkDragAction actions = translate_glass_action_to_gdk(supported);\n+    g_object_set_data_full(G_OBJECT(src_window), SOURCE_DND_DATA, data, clear_global_ref);\n+    g_object_set_data(G_OBJECT(src_window), SOURCE_DND_ACTIONS, (gpointer)actions);\n+\n+    ctx = gdk_drag_begin(src_window, targets);\n+\n+    DragView::set_drag_view();\n+\n+    g_list_free(targets);\n+    g_object_set_data(G_OBJECT(src_window), SOURCE_DND_CONTEXT, ctx);\n@@ -842,1 +989,3 @@\n-    gtk_target_list_unref(tlist);\n+    if (!dnd_pointer_grab(NULL)) {\n+       g_warning(\"Mouse grab failed.\\n\");\n+    }\n@@ -845,2 +994,1 @@\n-jint execute_dnd(JNIEnv *env, jobject data, jint supported)\n-{\n+jint execute_dnd(JNIEnv *env, jobject data, jint supported) {\n@@ -850,1 +998,0 @@\n-        gdk_threads_add_idle((GSourceFunc) dnd_destroy_drag_widget_callback, NULL);\n@@ -855,0 +1002,7 @@\n+        GdkEvent* event = gdk_event_get();\n+\n+        if (event != NULL) {\n+            glass_evloop_process_events(event, NULL);\n+            continue;\n+        }\n+\n@@ -861,2 +1015,9 @@\n- \/******************** DRAG VIEW ***************************\/\n- DragView::View* DragView::view = NULL;\n+void process_dnd_source(GdkWindow *window, GdkEvent *event) {\n+    if (drag_view != NULL && window == drag_view->get_window()) {\n+        if(event->type == GDK_EXPOSE) {\n+            drag_view->expose();\n+        } else {\n+            gtk_main_do_event(event);\n+        }\n+        return;\n+    }\n@@ -864,2 +1025,45 @@\n- gboolean DragView::get_drag_image_offset(GtkWidget *widget, int* x, int* y)\n- {\n+    if (window != dnd_window) {\n+        return;\n+    }\n+\n+    switch(event->type) {\n+        case GDK_GRAB_BROKEN:\n+            process_dnd_source_grab_broken(window, event);\n+            break;\n+        case GDK_MOTION_NOTIFY:\n+            process_dnd_source_mouse_motion(window, event);\n+            break;\n+        case GDK_BUTTON_RELEASE:\n+            process_dnd_source_mouse_release(window, event);\n+            break;\n+        case GDK_KEY_PRESS:\n+        case GDK_KEY_RELEASE:\n+            process_dnd_source_key_press_release(window, event);\n+            break;\n+        case GDK_DRAG_ENTER:\n+            gdk_selection_owner_set(dnd_window, gdk_drag_get_selection(get_drag_context()),\n+                                    GDK_CURRENT_TIME, FALSE);\n+            break;\n+        case GDK_DRAG_STATUS:\n+            process_dnd_source_drag_status(window, event);\n+            break;\n+        case GDK_DROP_FINISHED:\n+            process_dnd_source_drop_finished(window, event);\n+            break;\n+        case GDK_SELECTION_REQUEST:\n+            process_dnd_source_selection_req(window, event);\n+            break;\n+        default:\n+            break;\n+    }\n+}\n+\n+\/******************** DRAG VIEW ***************************\/\n+\n+\n+void DragView::reset_drag_view() {\n+    delete drag_view;\n+    drag_view = NULL;\n+}\n+\n+gboolean DragView::get_drag_image_offset(int* x, int* y) {\n@@ -867,1 +1071,1 @@\n-    jobject bb = dnd_source_get_data(widget, \"application\/x-java-drag-image-offset\");\n+    jobject bb = dnd_source_get_data(\"application\/x-java-drag-image-offset\");\n@@ -887,2 +1091,7 @@\n-GdkPixbuf* DragView::get_drag_image(GtkWidget *widget, gboolean* is_raw_image, gint* width, gint* height)\n-{\n+static void pixbufDestroyNotifyFunc(guchar *pixels, gpointer) {\n+    if (pixels != NULL) {\n+        g_free(pixels);\n+    }\n+}\n+\n+GdkPixbuf* DragView::get_drag_image(gboolean* is_raw_image, gint* width, gint* height) {\n@@ -892,1 +1101,1 @@\n-    jobject drag_image = dnd_source_get_data(widget, \"application\/x-java-drag-image\");\n+    jobject drag_image = dnd_source_get_data(\"application\/x-java-drag-image\");\n@@ -903,1 +1112,1 @@\n-            \/\/ in this byteArray: width and height\n+                                         \/\/ in this byteArray: width and height\n@@ -914,7 +1123,0 @@\n-\n-                        if (is_raw_image) {\n-                            guchar* origdata = data;\n-                            data = (guchar*) convert_BGRA_to_RGBA((const int*) data, w * 4, h);\n-                            g_free(origdata);\n-                        }\n-\n@@ -922,1 +1124,1 @@\n-                                                          w, h, w * 4, pixbufDestroyNotifyFunc, NULL);\n+                                w, h, w * 4, pixbufDestroyNotifyFunc, NULL);\n@@ -931,1 +1133,1 @@\n-        jobject pixels = dnd_source_get_data(widget, \"application\/x-java-rawimage\");\n+        jobject pixels = dnd_source_get_data(\"application\/x-java-rawimage\");\n@@ -972,2 +1174,3 @@\n-void DragView::set_drag_view(GtkWidget *widget, GdkDragContext *context)\n-{\n+void DragView::set_drag_view() {\n+    reset_drag_view();\n+\n@@ -976,1 +1179,1 @@\n-    GdkPixbuf* pixbuf = get_drag_image(widget, &is_raw_image, &w, &h);\n+    GdkPixbuf* pixbuf = get_drag_image(&is_raw_image, &w, &h);\n@@ -982,4 +1185,2 @@\n-        gboolean is_offset_set = get_drag_image_offset(widget, &offset_x, &offset_y);\n-\n-        DragView::view = new DragView::View(context, pixbuf, w, h, is_raw_image,\n-            is_offset_set, offset_x, offset_y);\n+        get_drag_image_offset(&offset_x, &offset_y);\n+        drag_view = new DragView(pixbuf, is_raw_image, offset_x, offset_y);\n@@ -989,4 +1190,22 @@\n-static void on_screen_changed(GtkWidget *widget, GdkScreen *previous_screen, gpointer view)\n-{\n-    (void)widget;\n-    (void)previous_screen;\n+DragView::DragView(GdkPixbuf* _pixbuf, gboolean _is_raw_image,\n+                   gint _offset_x, gint _offset_y) :\n+        pixbuf(_pixbuf),\n+        is_raw_image(_is_raw_image),\n+        offset_x(_offset_x),\n+        offset_y(_offset_y) {\n+    width = gdk_pixbuf_get_width(pixbuf);\n+    height = gdk_pixbuf_get_height(pixbuf);\n+\n+    GdkScreen* screen = gdk_screen_get_default();\n+    GdkWindowAttr attrs;\n+\n+    attrs.width = width;\n+    attrs.height = height;\n+    attrs.wclass = GDK_INPUT_OUTPUT;\n+    attrs.window_type = GDK_WINDOW_TEMP;\n+    attrs.type_hint = GDK_WINDOW_TYPE_HINT_DND;\n+    attrs.visual = gdk_screen_get_rgba_visual(screen);\n+\n+    if (!attrs.visual) {\n+        attrs.visual = gdk_screen_get_system_visual(screen);\n+    }\n@@ -994,2 +1213,2 @@\n-    ((DragView::View*) view)->screen_changed();\n-}\n+    int mask = GDK_WA_X | GDK_WA_Y | GDK_WA_VISUAL | GDK_WA_TYPE_HINT;\n+    glass_gdk_master_pointer_get_position(&attrs.x, &attrs.y);\n@@ -997,4 +1216,2 @@\n-static gboolean on_expose(GtkWidget *widget, GdkEventExpose *event, gpointer view)\n-{\n-    (void)widget;\n-    (void)event;\n+    attrs.x -= offset_x;\n+    attrs.y -= offset_y;\n@@ -1002,3 +1219,1 @@\n-    ((DragView::View*) view)->expose();\n-    return FALSE;\n-}\n+    window = gdk_window_new(gdk_screen_get_root_window(screen), &attrs, mask);\n@@ -1006,11 +1221,0 @@\n-DragView::View::View(GdkDragContext* _context, GdkPixbuf* _pixbuf, gint _width, gint _height,\n-                     gboolean _is_raw_image, gboolean _is_offset_set, gint _offset_x, gint _offset_y) :\n-    context(_context),\n-    pixbuf(_pixbuf),\n-    width(_width),\n-    height(_height),\n-    is_raw_image(_is_raw_image),\n-    is_offset_set(_is_offset_set),\n-    offset_x(_offset_x),\n-    offset_y(_offset_y)\n-{\n@@ -1018,5 +1222,4 @@\n-    gtk_drag_set_icon_pixbuf(context, pixbuf, offset_x, offset_y);\n-#else\n-    widget = gtk_window_new(GTK_WINDOW_POPUP);\n-    gtk_window_set_type_hint(GTK_WINDOW(widget), GDK_WINDOW_TYPE_HINT_DND);\n-    gtk_widget_set_events(widget, GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK);\n+    gdk_window_set_opaque_region(window, NULL);\n+#endif\n+    gdk_window_set_opacity(window, 0);\n+}\n@@ -1024,1 +1227,5 @@\n-    screen_changed();\n+void DragView::expose() {\n+#ifdef GLASS_GTK3\n+    cairo_region_t *region = gdk_window_get_clip_region(window);\n+    gdk_window_begin_paint_region(window, region);\n+#endif\n@@ -1026,1 +1233,2 @@\n-    gtk_widget_realize(widget);\n+    cairo_t *context;\n+    cairo_surface_t *cairo_surface;\n@@ -1028,5 +1236,1 @@\n-    gtk_widget_set_app_paintable(widget, TRUE);\n-    g_signal_connect(G_OBJECT(widget), \"expose-event\", G_CALLBACK(on_expose), this);\n-    g_signal_connect(G_OBJECT(widget), \"screen-changed\", G_CALLBACK(on_screen_changed), this);\n-    gtk_widget_set_size_request(widget, width, height);\n-    gtk_window_set_decorated(GTK_WINDOW(widget), FALSE);\n+    context = gdk_cairo_create(window);\n@@ -1034,4 +1238,5 @@\n-    gtk_widget_show_all(widget);\n-    gtk_drag_set_icon_widget(context, widget, offset_x, offset_y);\n-#endif\n-}\n+    guchar* pixels = is_raw_image\n+            ? (guchar*) convert_BGRA_to_RGBA((const int*) gdk_pixbuf_get_pixels(pixbuf),\n+                                                gdk_pixbuf_get_rowstride(pixbuf),\n+                                                height)\n+            : gdk_pixbuf_get_pixels(pixbuf);\n@@ -1039,3 +1244,4 @@\n-void DragView::View::screen_changed()\n-{\n-    GdkScreen *screen = gtk_widget_get_screen(widget);\n+    cairo_surface = cairo_image_surface_create_for_data(\n+            pixels,\n+            CAIRO_FORMAT_ARGB32,\n+            width, height, width * 4);\n@@ -1043,1 +1249,3 @@\n-    glass_configure_window_transparency(widget, true);\n+    cairo_set_source_surface(context, cairo_surface, 0, 0);\n+    cairo_set_operator(context, CAIRO_OPERATOR_SOURCE);\n+    cairo_paint(context);\n@@ -1045,5 +1253,2 @@\n-    if (!gdk_screen_is_composited(screen)) {\n-        if (!is_offset_set) {\n-            offset_x = 1;\n-            offset_y = 1;\n-        }\n+    if (is_raw_image) {\n+        g_free(pixels);\n@@ -1051,0 +1256,8 @@\n+\n+#ifdef GLASS_GTK3\n+    gdk_window_end_paint(window);\n+    cairo_region_destroy(region);\n+#endif\n+\n+    cairo_surface_destroy(cairo_surface);\n+    cairo_destroy(context);\n@@ -1053,3 +1266,2 @@\n-void DragView::View::expose()\n-{\n-    cairo_t *context = gdk_cairo_create(gtk_widget_get_window(widget));\n+void DragView::move(gint x, gint y) {\n+    gdk_window_move(window, x - offset_x, y - offset_y);\n@@ -1057,2 +1269,5 @@\n-    gdk_cairo_set_source_pixbuf(context, pixbuf, 0, 0);\n-    cairo_paint(context);\n+    if (!gdk_window_is_visible(window)) {\n+        gdk_window_show(window);\n+        gdk_window_raise(window);\n+    }\n+}\n@@ -1060,1 +1275,2 @@\n-    cairo_destroy(context);\n+GdkWindow* DragView::get_window() {\n+    return window;\n@@ -1062,0 +1278,11 @@\n+\n+DragView::~DragView() {\n+    if (window) {\n+        gdk_window_destroy(window);\n+        window = NULL;\n+    }\n+    if (pixbuf) {\n+        g_object_unref(pixbuf);\n+        pixbuf = NULL;\n+    }\n+}\n\\ No newline at end of file\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_dnd.cpp","additions":548,"deletions":321,"binary":false,"changes":869,"status":"modified"},{"patch":"@@ -53,0 +53,5 @@\n+    GdkWindow* window;\n+    GdkPixbuf* pixbuf;\n+    gint width, height;\n+    gboolean is_raw_image;\n+    gint offset_x, offset_y;\n@@ -54,19 +59,5 @@\n-    class View {\n-        GdkDragContext* context;\n-        GtkWidget* widget;\n-        GdkPixbuf* pixbuf;\n-        gint width, height;\n-        gboolean is_raw_image;\n-        gboolean is_offset_set;\n-        gint offset_x, offset_y;\n-    public:\n-        View(GdkDragContext* context, GdkPixbuf* pixbuf, gint width, gint height,\n-                gboolean is_raw_image, gboolean is_offset_set, gint offset_x, gint offset_y);\n-        void screen_changed();\n-        void expose();\n-        void move(gint x, gint y);\n-        ~View();\n-    private:\n-        View(View&);\n-        View& operator=(const View&);\n-    };\n+    DragView(GdkPixbuf* pixbuf, gboolean is_raw_image, gint offset_x, gint offset_y);\n+    void expose();\n+    void move(gint x, gint y);\n+    GdkWindow * get_window();\n+    ~DragView();\n@@ -74,0 +65,1 @@\n+    static void set_drag_view();\n@@ -75,3 +67,0 @@\n-    static void set_drag_view(GtkWidget* widget, GdkDragContext* context);\n-    static void move(gint x, gint y);\n-\n@@ -79,5 +68,0 @@\n-    static View* view;\n-    static gboolean get_drag_image_offset(GtkWidget *widget, int* x, int* y);\n-    static GdkPixbuf* get_drag_image(GtkWidget* widget, gboolean* is_raw_image, gint* width, gint* height);\n-\n-    DragView() {}\n@@ -86,0 +70,3 @@\n+\n+    static gboolean get_drag_image_offset(int* x, int* y);\n+    static GdkPixbuf* get_drag_image(gboolean* is_raw_image, gint* width, gint* height);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_dnd.h","additions":14,"deletions":27,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -26,0 +26,3 @@\n+#include \"glass_window.h\"\n+#include \"glass_dnd.h\"\n+#include \"glass_screen.h\"\n@@ -31,0 +34,1 @@\n+GdkEventFunc process_events_prev;\n@@ -39,2 +43,1 @@\n-void\n-glass_evloop_initialize() {\n+void glass_evloop_initialize() {\n@@ -43,2 +46,1 @@\n-void\n-glass_evloop_finalize() {\n+void glass_evloop_finalize() {\n@@ -55,2 +57,1 @@\n-void\n-glass_evloop_call_hooks(GdkEvent * event) {\n+void glass_evloop_call_hooks(GdkEvent * event) {\n@@ -67,2 +68,1 @@\n-GevlHookRegistration\n-glass_evloop_hook_add(GevlHookFunction hookFn, void * data) {\n+GevlHookRegistration glass_evloop_hook_add(GevlHookFunction hookFn, void * data) {\n@@ -83,2 +83,1 @@\n-void\n-glass_evloop_hook_remove(GevlHookRegistration hookReg) {\n+void glass_evloop_hook_remove(GevlHookRegistration hookReg) {\n@@ -89,0 +88,139 @@\n+bool is_window_enabled_for_event(GdkWindow * window, WindowContext *ctx, gint event_type) {\n+\n+\n+    if (gdk_window_is_destroyed(window)) {\n+        return FALSE;\n+    }\n+\n+    \/*\n+     * GDK_DELETE can be blocked for disabled window e.q. parent window\n+     * which prevents from closing it\n+     *\/\n+    switch (event_type) {\n+        case GDK_CONFIGURE:\n+        case GDK_DESTROY:\n+        case GDK_EXPOSE:\n+        case GDK_DAMAGE:\n+        case GDK_WINDOW_STATE:\n+        case GDK_FOCUS_CHANGE:\n+            return TRUE;\n+            break;\n+    }\/\/switch\n+\n+    if (ctx != NULL ) {\n+        return ctx->isEnabled();\n+    }\n+    return TRUE;\n+}\n+\n+\n+void glass_evloop_process_events(GdkEvent* event, gpointer data) {\n+    GdkWindow* window = event->any.window;\n+    WindowContext *ctx = window != NULL ? (WindowContext*)\n+        g_object_get_data(G_OBJECT(window), GDK_WINDOW_DATA_CONTEXT) : NULL;\n+\n+    if ((window != NULL)\n+            && !is_window_enabled_for_event(window, ctx, event->type)) {\n+        return;\n+    }\n+\n+    if (ctx != NULL && ctx->hasIME() && ctx->filterIME(event)) {\n+        return;\n+    }\n+\n+    glass_evloop_call_hooks(event);\n+\n+    if (is_in_drag()) {\n+        process_dnd_source(window, event);\n+    }\n+\n+    if (ctx != NULL) {\n+        EventsCounterHelper helper(ctx);\n+        try {\n+            switch (event->type) {\n+                case GDK_PROPERTY_NOTIFY:\n+                    ctx->process_property_notify(&event->property);\n+                    gtk_main_do_event(event);\n+                    break;\n+                case GDK_CONFIGURE:\n+                    ctx->process_configure(&event->configure);\n+                    gtk_main_do_event(event);\n+                    break;\n+                case GDK_FOCUS_CHANGE:\n+                    ctx->process_focus(&event->focus_change);\n+                    gtk_main_do_event(event);\n+                    break;\n+                case GDK_DESTROY:\n+                    destroy_and_delete_ctx(ctx);\n+                    gtk_main_do_event(event);\n+                    break;\n+                case GDK_DELETE:\n+                    ctx->process_delete();\n+                    break;\n+                case GDK_EXPOSE:\n+                case GDK_DAMAGE:\n+                    ctx->process_expose(&event->expose);\n+                    break;\n+                case GDK_WINDOW_STATE:\n+                    ctx->process_state(&event->window_state);\n+                    gtk_main_do_event(event);\n+                    break;\n+                case GDK_BUTTON_PRESS:\n+                case GDK_BUTTON_RELEASE:\n+                    ctx->process_mouse_button(&event->button);\n+                    break;\n+                case GDK_MOTION_NOTIFY:\n+                    ctx->process_mouse_motion(&event->motion);\n+                    gdk_event_request_motions(&event->motion);\n+                    break;\n+                case GDK_SCROLL:\n+                    ctx->process_mouse_scroll(&event->scroll);\n+                    break;\n+                case GDK_ENTER_NOTIFY:\n+                case GDK_LEAVE_NOTIFY:\n+                    ctx->process_mouse_cross(&event->crossing);\n+                    break;\n+                case GDK_KEY_PRESS:\n+                case GDK_KEY_RELEASE:\n+                    ctx->process_key(&event->key);\n+                    break;\n+                case GDK_DROP_START:\n+                case GDK_DRAG_ENTER:\n+                case GDK_DRAG_LEAVE:\n+                case GDK_DRAG_MOTION:\n+                    process_dnd_target(ctx, &event->dnd);\n+                    break;\n+                case GDK_MAP:\n+                    ctx->process_map();\n+                    \/\/ fall-through\n+                case GDK_UNMAP:\n+                case GDK_CLIENT_EVENT:\n+                case GDK_VISIBILITY_NOTIFY:\n+                case GDK_SETTING:\n+                case GDK_OWNER_CHANGE:\n+                    gtk_main_do_event(event);\n+                    break;\n+                default:\n+                    break;\n+            }\n+        } catch (jni_exception&) {\n+        }\n+    } else {\n+\n+        if (window == gdk_screen_get_root_window(gdk_screen_get_default())) {\n+            if (event->any.type == GDK_PROPERTY_NOTIFY) {\n+                if (event->property.atom == gdk_atom_intern_static_string(\"_NET_WORKAREA\")\n+                        || event->property.atom == gdk_atom_intern_static_string(\"_NET_CURRENT_DESKTOP\")) {\n+                    screen_settings_changed(gdk_screen_get_default(), NULL);\n+                }\n+            }\n+        }\n+\n+        \/\/process only for non-FX windows\n+            if (process_events_prev != NULL) {\n+            (*process_events_prev)(event, data);\n+        } else {\n+            gtk_main_do_event(event);\n+        }\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_evloop.cpp","additions":148,"deletions":10,"binary":false,"changes":158,"status":"modified"},{"patch":"@@ -37,2 +37,1 @@\n-GevlHookRegistration glass_evloop_hook_add(GevlHookFunction hookFn,\n-                                           void * data);\n+GevlHookRegistration glass_evloop_hook_add(GevlHookFunction hookFn, void * data);\n@@ -40,0 +39,1 @@\n+void glass_evloop_process_events(GdkEvent*, gpointer);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_evloop.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -546,1 +546,0 @@\n-                                                | GDK_POINTER_MOTION_HINT_MASK\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_general.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -294,6 +294,0 @@\n-void\n-glass_gdk_master_pointer_grab(GdkEvent *event, GdkWindow *window, GdkCursor *cursor);\n-\n-void\n-glass_gdk_master_pointer_ungrab(GdkEvent *event);\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_general.h","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-GdkWindow* WindowContextBase::get_gdk_window(){\n+GdkWindow* WindowContextBase::get_gdk_window() {\n@@ -632,1 +632,5 @@\n-    glass_gdk_mouse_devices_ungrab();\n+\n+    if (!is_in_drag()) {\n+        glass_gdk_mouse_devices_ungrab();\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}