{"files":[{"patch":"@@ -42,0 +42,1 @@\n+#include \"glass_dnd.h\"\n@@ -45,0 +46,2 @@\n+GdkEventFunc process_events_prev;\n+static void process_events(GdkEvent*, gpointer);\n@@ -49,2 +52,0 @@\n-extern GdkEventFunc process_events_prev;\n-\n@@ -163,1 +164,1 @@\n-    gdk_event_handler_set(glass_evloop_process_events, NULL, NULL);\n+    gdk_event_handler_set(process_events, NULL, NULL);\n@@ -392,0 +393,134 @@\n+bool is_window_enabled_for_event(GdkWindow * window, WindowContext *ctx, gint event_type) {\n+\n+\n+    if (gdk_window_is_destroyed(window)) {\n+        return FALSE;\n+    }\n+\n+    \/*\n+     * GDK_DELETE can be blocked for disabled window e.q. parent window\n+     * which prevents from closing it\n+     *\/\n+    switch (event_type) {\n+        case GDK_CONFIGURE:\n+        case GDK_DESTROY:\n+        case GDK_EXPOSE:\n+        case GDK_DAMAGE:\n+        case GDK_WINDOW_STATE:\n+        case GDK_FOCUS_CHANGE:\n+            return TRUE;\n+            break;\n+    }\/\/switch\n+\n+    if (ctx != NULL ) {\n+        return ctx->isEnabled();\n+    }\n+    return TRUE;\n+}\n+\n+static void process_events(GdkEvent* event, gpointer data) {\n+    GdkWindow* window = event->any.window;\n+    WindowContext *ctx = window != NULL ? (WindowContext*)\n+        g_object_get_data(G_OBJECT(window), GDK_WINDOW_DATA_CONTEXT) : NULL;\n+\n+    if ((window != NULL && ctx != NULL)\n+            && !is_window_enabled_for_event(window, ctx, event->type)) {\n+        return;\n+    }\n+\n+    if (ctx != NULL && ctx->hasIME() && ctx->filterIME(event)) {\n+        return;\n+    }\n+\n+    glass_evloop_call_hooks(event);\n+\n+    if (ctx != NULL) {\n+        EventsCounterHelper helper(ctx);\n+        try {\n+            switch (event->type) {\n+                case GDK_PROPERTY_NOTIFY:\n+                    ctx->process_property_notify(&event->property);\n+                    gtk_main_do_event(event);\n+                    break;\n+                case GDK_CONFIGURE:\n+                    ctx->process_configure(&event->configure);\n+                    gtk_main_do_event(event);\n+                    break;\n+                case GDK_FOCUS_CHANGE:\n+                    ctx->process_focus(&event->focus_change);\n+                    gtk_main_do_event(event);\n+                    break;\n+                case GDK_DESTROY:\n+                    destroy_and_delete_ctx(ctx);\n+                    gtk_main_do_event(event);\n+                    break;\n+                case GDK_DELETE:\n+                    ctx->process_delete();\n+                    break;\n+                case GDK_EXPOSE:\n+                case GDK_DAMAGE:\n+                    ctx->process_expose(&event->expose);\n+                    break;\n+                case GDK_WINDOW_STATE:\n+                    ctx->process_state(&event->window_state);\n+                    gtk_main_do_event(event);\n+                    break;\n+                case GDK_BUTTON_PRESS:\n+                case GDK_BUTTON_RELEASE:\n+                    ctx->process_mouse_button(&event->button);\n+                    break;\n+                case GDK_MOTION_NOTIFY:\n+                    ctx->process_mouse_motion(&event->motion);\n+                    gdk_event_request_motions(&event->motion);\n+                    break;\n+                case GDK_SCROLL:\n+                    ctx->process_mouse_scroll(&event->scroll);\n+                    break;\n+                case GDK_ENTER_NOTIFY:\n+                case GDK_LEAVE_NOTIFY:\n+                    ctx->process_mouse_cross(&event->crossing);\n+                    break;\n+                case GDK_KEY_PRESS:\n+                case GDK_KEY_RELEASE:\n+                    ctx->process_key(&event->key);\n+                    break;\n+                case GDK_DROP_START:\n+                case GDK_DRAG_ENTER:\n+                case GDK_DRAG_LEAVE:\n+                case GDK_DRAG_MOTION:\n+                    process_dnd_target(ctx, &event->dnd);\n+                    break;\n+                case GDK_MAP:\n+                    ctx->process_map();\n+                    \/\/ fall-through\n+                case GDK_UNMAP:\n+                case GDK_CLIENT_EVENT:\n+                case GDK_VISIBILITY_NOTIFY:\n+                case GDK_SETTING:\n+                case GDK_OWNER_CHANGE:\n+                    gtk_main_do_event(event);\n+                    break;\n+                default:\n+                    break;\n+            }\n+        } catch (jni_exception&) {\n+        }\n+    } else {\n+\n+        if (window == gdk_screen_get_root_window(gdk_screen_get_default())) {\n+            if (event->any.type == GDK_PROPERTY_NOTIFY) {\n+                if (event->property.atom == gdk_atom_intern_static_string(\"_NET_WORKAREA\")\n+                        || event->property.atom == gdk_atom_intern_static_string(\"_NET_CURRENT_DESKTOP\")) {\n+                    screen_settings_changed(gdk_screen_get_default(), NULL);\n+                }\n+            }\n+        }\n+\n+        \/\/process only for non-FX windows\n+        if (process_events_prev != NULL) {\n+            (*process_events_prev)(event, data);\n+        } else {\n+            gtk_main_do_event(event);\n+        }\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassApplication.cpp","additions":138,"deletions":3,"binary":false,"changes":141,"status":"modified"},{"patch":"@@ -113,3 +113,0 @@\n-static void dnd_set_performed_action(jint performed_action);\n-static jint dnd_get_performed_action();\n-\n@@ -179,0 +176,21 @@\n+static void wait_for_selection_data_hook(GdkEvent * event, void * data) {\n+    selection_data_ctx *ctx = (selection_data_ctx*)data;\n+    GdkWindow *dest = glass_gdk_drag_context_get_dest_window(enter_ctx.ctx);\n+    if (event->type == GDK_SELECTION_NOTIFY &&\n+            event->selection.window == dest) {\n+        if (event->selection.property) { \/\/ if 0, that we received negative response\n+            ctx->length = gdk_selection_property_get(dest, &(ctx->data), &(ctx->type), &(ctx->format));\n+        }\n+        ctx->received = TRUE;\n+    }\n+}\n+\n+static void notify_drag_drop(WindowContext *ctx, GdkDragAction selected, GdkEventDND *event) {\n+    g_print(\"jViewNotifyDragDrop\\n\");\n+    mainEnv->CallIntMethod(ctx->get_jview(), jViewNotifyDragDrop,\n+            (jint)event->x_root - enter_ctx.dx, (jint)event->y_root - enter_ctx.dy,\n+            (jint)event->x_root, (jint)event->y_root,\n+            translate_gdk_action_to_glass(selected));\n+    LOG_EXCEPTION(mainEnv)\n+}\n+\n@@ -187,6 +205,1 @@\n-\n-    mainEnv->CallIntMethod(ctx->get_jview(), jViewNotifyDragDrop,\n-            (jint)event->x_root - enter_ctx.dx, (jint)event->y_root - enter_ctx.dy,\n-            (jint)event->x_root, (jint)event->y_root,\n-            translate_gdk_action_to_glass(selected));\n-    LOG_EXCEPTION(mainEnv)\n+    notify_drag_drop(ctx, selected, event);\n@@ -304,12 +317,0 @@\n-static void wait_for_selection_data_hook(GdkEvent * event, void * data) {\n-    selection_data_ctx *ctx = (selection_data_ctx*)data;\n-    GdkWindow *dest = glass_gdk_drag_context_get_dest_window(enter_ctx.ctx);\n-    if (event->type == GDK_SELECTION_NOTIFY &&\n-            event->selection.window == dest) {\n-        if (event->selection.property) { \/\/ if 0, that we received negative response\n-            ctx->length = gdk_selection_property_get(dest, &(ctx->data), &(ctx->type), &(ctx->format));\n-        }\n-        ctx->received = TRUE;\n-    }\n-}\n-\n@@ -319,2 +320,0 @@\n-    memset(selection_ctx, 0, sizeof(selection_data_ctx));\n-\n@@ -326,0 +325,2 @@\n+    memset(selection_ctx, 0, sizeof(selection_data_ctx));\n+\n@@ -327,1 +328,1 @@\n-                                    selection_ctx);\n+                                  selection_ctx);\n@@ -329,1 +330,1 @@\n-        return TRUE;\n+      return TRUE;\n@@ -466,0 +467,1 @@\n+\n@@ -491,37 +493,1 @@\n-static GdkWindow *dnd_window = NULL;\n-static DragView *drag_view = NULL;\n-static jint dnd_performed_action;\n-\n-const char * const SOURCE_DND_CONTEXT = \"fx-dnd-context\";\n-const char * const SOURCE_DND_DATA = \"fx-dnd-data\";\n-const char * const SOURCE_DND_ACTIONS = \"fx-dnd-actions\";\n-\n-static GdkWindow* get_dnd_window() {\n-    if (dnd_window == NULL) {\n-        GdkWindowAttr attr;\n-        memset(&attr, 0, sizeof (GdkWindowAttr));\n-        attr.window_type = GDK_WINDOW_TEMP;\n-        attr.wclass = GDK_INPUT_OUTPUT;\n-        attr.event_mask = GDK_MOUSE_EVENTS_MASK;\n-        dnd_window = gdk_window_new(NULL, &attr, GDK_WA_TYPE_HINT);\n-        gdk_window_show(dnd_window);\n-    }\n-\n-    return dnd_window;\n-}\n-\n-static void dnd_set_performed_action(jint performed_action) {\n-    dnd_performed_action = performed_action;\n-}\n-\n-static jint dnd_get_performed_action() {\n-    return dnd_performed_action;\n-}\n-\n-static GdkDragContext *get_drag_context() {\n-    return (GdkDragContext*)g_object_get_data(G_OBJECT(dnd_window), SOURCE_DND_CONTEXT);\n-}\n-\n-static bool dnd_pointer_grab(GdkCursor *cursor) {\n-    return glass_gdk_mouse_devices_grab_with_cursor(dnd_window, cursor, FALSE, FALSE);\n-}\n+static bool in_drag = false;\n@@ -530,1 +496,1 @@\n-    return dnd_window != NULL;\n+    return in_drag;\n@@ -533,3 +499,3 @@\n-static void determine_actions(guint state, GdkDragAction *action, GdkDragAction *possible_actions) {\n-    GdkDragAction suggested = static_cast<GdkDragAction>(GPOINTER_TO_INT(g_object_get_data(G_OBJECT(dnd_window), SOURCE_DND_ACTIONS)));\n-\n+static void determine_actions(DragSourceContext *ctx, uint state, GdkDragAction *action,\n+                              GdkDragAction *possible_actions) {\n+    GdkDragAction suggested = ctx->actions;\n@@ -543,1 +509,1 @@\n-        } else if (suggested & GDK_ACTION_COPY){\n+        } else if (suggested & GDK_ACTION_COPY) {\n@@ -562,2 +528,1 @@\n-static jobject dnd_source_get_data(const char *key) {\n-    jobject data = (jobject)g_object_get_data(G_OBJECT(dnd_window), SOURCE_DND_DATA);\n+static jobject dnd_source_get_data(jobject obj, const char *key) {\n@@ -566,1 +531,1 @@\n-    jobject result = mainEnv->CallObjectMethod(data, jMapGet, string, NULL);\n+    jobject result = mainEnv->CallObjectMethod(obj, jMapGet, string, NULL);\n@@ -571,2 +536,2 @@\n-static gboolean dnd_source_set_utf8_string(GdkWindow *requestor, GdkAtom property) {\n-    jstring string = (jstring)dnd_source_get_data(\"text\/plain\");\n+static gboolean dnd_source_set_utf8_string(DragSourceContext *ctx, GdkWindow *requestor, GdkAtom property) {\n+    jstring string = (jstring)dnd_source_get_data(ctx->data, \"text\/plain\");\n@@ -590,2 +555,2 @@\n-static gboolean dnd_source_set_string(GdkWindow *requestor, GdkAtom property) {\n-    jstring string = (jstring)dnd_source_get_data(\"text\/plain\");\n+static gboolean dnd_source_set_string(DragSourceContext *ctx, GdkWindow *requestor, GdkAtom property) {\n+    jstring string = (jstring)dnd_source_get_data(ctx->data, \"text\/plain\");\n@@ -613,2 +578,2 @@\n-static gboolean dnd_source_set_image(GdkWindow *requestor, GdkAtom property, GdkAtom target) {\n-    jobject pixels = dnd_source_get_data(\"application\/x-java-rawimage\");\n+static gboolean dnd_source_set_image(DragSourceContext *ctx, GdkWindow *requestor, GdkAtom property, GdkAtom target) {\n+    jobject pixels = dnd_source_get_data(ctx->data, \"application\/x-java-rawimage\");\n@@ -649,1 +614,1 @@\n-static gboolean dnd_source_set_uri_list(GdkWindow *requestor, GdkAtom property) {\n+static gboolean dnd_source_set_uri_list(DragSourceContext *ctx, GdkWindow *requestor, GdkAtom property) {\n@@ -656,1 +621,1 @@\n-    if (jurl = (jstring) dnd_source_get_data(\"text\/uri-list\")) {\n+    if (jurl = (jstring) dnd_source_get_data(ctx->data, \"text\/uri-list\")) {\n@@ -660,1 +625,1 @@\n-    if (files_array = (jobjectArray) dnd_source_get_data(\"application\/x-java-file-list\")) {\n+    if (files_array = (jobjectArray) dnd_source_get_data(ctx->data, \"application\/x-java-file-list\")) {\n@@ -696,1 +661,1 @@\n-static gboolean dnd_source_set_raw(GdkWindow *requestor, GdkAtom property, GdkAtom target) {\n+static gboolean dnd_source_set_raw(DragSourceContext *ctx, GdkWindow *requestor, GdkAtom property, GdkAtom target) {\n@@ -698,1 +663,1 @@\n-    jobject data = dnd_source_get_data(target_name);\n+    jobject data = dnd_source_get_data(ctx->data, target_name);\n@@ -731,3 +696,1 @@\n-static void process_dnd_source_selection_req(GdkWindow *window, GdkEvent *gdkEvent) {\n-    (void)window;\n-\n+static void process_dnd_source_selection_req(DragSourceContext *ctx, GdkEvent *gdkEvent) {\n@@ -746,1 +709,1 @@\n-        is_data_set = dnd_source_set_utf8_string(requestor, event->property);\n+        is_data_set = dnd_source_set_utf8_string(ctx, requestor, event->property);\n@@ -748,1 +711,1 @@\n-        is_data_set = dnd_source_set_string(requestor, event->property);\n+        is_data_set = dnd_source_set_string(ctx, requestor, event->property);\n@@ -751,1 +714,1 @@\n-        is_data_set = dnd_source_set_image(requestor, event->property, event->target);\n+        is_data_set = dnd_source_set_image(ctx, requestor, event->property, event->target);\n@@ -753,1 +716,1 @@\n-        is_data_set = dnd_source_set_uri_list(requestor, event->property);\n+        is_data_set = dnd_source_set_uri_list(ctx, requestor, event->property);\n@@ -755,1 +718,1 @@\n-        is_data_set = dnd_source_set_raw(requestor, event->property, event->target);\n+        is_data_set = dnd_source_set_raw(ctx, requestor, event->property, event->target);\n@@ -760,1 +723,0 @@\n-\n@@ -763,8 +725,3 @@\n-static gboolean ungrab_destroy_callback(gpointer) {\n-    if (dnd_window) {\n-        gdk_window_destroy(dnd_window);\n-        dnd_window = NULL;\n-    }\n-\n-    DragView::reset_drag_view();\n-    glass_gdk_mouse_devices_ungrab();\n+static gboolean in_drag_end(gpointer data) {\n+    in_drag = false;\n+    g_print(\"in drag = false\\n\");\n@@ -772,1 +729,1 @@\n-    return FALSE;\n+    return G_SOURCE_REMOVE;\n@@ -775,1 +732,1 @@\n-static void process_dnd_source_grab_broken(GdkWindow *window, GdkEvent *event) {\n+static void process_dnd_source_grab_broken(DragSourceContext *ctx, GdkEvent *event) {\n@@ -779,1 +736,1 @@\n-    if (gb_event->implicit || gb_event->grab_window == dnd_window) {\n+    if (gb_event->implicit || gb_event->grab_window == ctx->dnd_window) {\n@@ -783,2 +740,2 @@\n-    gdk_drag_abort(get_drag_context(), GDK_CURRENT_TIME);\n-    gdk_threads_add_idle((GSourceFunc) ungrab_destroy_callback, NULL);\n+    gdk_drag_abort(ctx->dnd_ctx, GDK_CURRENT_TIME);\n+    gdk_threads_add_idle_full(G_PRIORITY_DEFAULT, in_drag_end, ctx, NULL);\n@@ -787,2 +744,4 @@\n-static void process_dnd_source_mouse_release(GdkWindow *window, GdkEvent *event) {\n-    (void)window;\n+static void process_dnd_source_mouse_release(DragSourceContext *ctx, GdkEvent *event) {\n+    GdkDragAction selected = gdk_drag_context_get_selected_action(ctx->dnd_ctx);\n+    if (selected) {\n+        ctx->performed_action = translate_gdk_action_to_glass(selected);\n@@ -790,1 +749,3 @@\n-    GdkDragContext* ctx = get_drag_context();\n+        if (is_dnd_owner) {\n+            WindowContext *window_ctx = (WindowContext*)\n+                g_object_get_data(G_OBJECT(ctx->dnd_window), GDK_WINDOW_DATA_CONTEXT);\n@@ -792,2 +753,4 @@\n-    if (gdk_drag_context_get_selected_action(ctx)) {\n-        gdk_drag_drop(ctx, event->dnd.time);\n+            notify_drag_drop(window_ctx, selected, &event->dnd);\n+        } else {\n+            gdk_drag_drop(ctx->dnd_ctx, GDK_CURRENT_TIME);\n+        }\n@@ -795,1 +758,1 @@\n-        gdk_drag_abort(ctx, event->dnd.time);\n+        gdk_drag_abort(ctx->dnd_ctx, GDK_CURRENT_TIME);\n@@ -798,1 +761,2 @@\n-    gdk_threads_add_idle((GSourceFunc) ungrab_destroy_callback, NULL);\n+    \/\/ This is done to let mouse release event succeed on WindowContext\n+    gdk_threads_add_idle_full(G_PRIORITY_DEFAULT, in_drag_end, ctx, NULL);\n@@ -801,2 +765,1 @@\n-static void process_drag_motion(gint x_root, gint y_root, guint state) {\n-    GdkDragContext* ctx = get_drag_context();\n+static void process_drag_motion(DragSourceContext *ctx, gint x_root, gint y_root, guint state) {\n@@ -806,2 +769,2 @@\n-    if (drag_view) {\n-        drag_view->move(x_root, y_root);\n+    if (ctx->drag_view) {\n+        ctx->drag_view->move(x_root, y_root);\n@@ -810,1 +773,1 @@\n-    gdk_drag_find_window_for_screen(ctx, NULL, gdk_screen_get_default(),\n+    gdk_drag_find_window_for_screen(ctx->dnd_ctx, NULL, gdk_screen_get_default(),\n@@ -815,2 +778,2 @@\n-        determine_actions(state, &action, &possible_actions);\n-        gdk_drag_motion(ctx, dest_window, prot, x_root, y_root,\n+        determine_actions(ctx, state, &action, &possible_actions);\n+        gdk_drag_motion(ctx->dnd_ctx, dest_window, prot, x_root, y_root,\n@@ -821,3 +784,1 @@\n-static void process_dnd_source_mouse_motion(GdkWindow *window, GdkEvent *event) {\n-    (void)window;\n-\n+static void process_dnd_source_mouse_motion(DragSourceContext *ctx, GdkEvent *event) {\n@@ -825,1 +786,1 @@\n-    process_drag_motion(eventMotion->x_root, eventMotion->y_root, eventMotion->state);\n+    process_drag_motion(ctx, eventMotion->x_root, eventMotion->y_root, eventMotion->state);\n@@ -828,3 +789,1 @@\n-static void process_dnd_source_key_press_release(GdkWindow *window, GdkEvent *event) {\n-    (void)window;\n-\n+static void process_dnd_source_key_press_release(DragSourceContext *ctx, GdkEvent *event) {\n@@ -855,1 +814,1 @@\n-        process_drag_motion(x, y, state);\n+        process_drag_motion(ctx, x, y, state);\n@@ -859,3 +818,1 @@\n-static void process_dnd_source_drag_status(GdkWindow *window, GdkEvent *event) {\n-    (void)window;\n-\n+static void process_dnd_source_drag_status(DragSourceContext *ctx, GdkEvent *event) {\n@@ -903,11 +860,1 @@\n-    dnd_pointer_grab(cursor);\n-}\n-\n-static void process_dnd_source_drop_finished(GdkWindow *window, GdkEvent *event) {\n-    (void)window;\n-    (void)event;\n-\n-    dnd_set_performed_action(\n-            translate_gdk_action_to_glass(\n-                gdk_drag_context_get_selected_action(\n-                    get_drag_context())));\n+    gdk_pointer_grab(ctx->dnd_window, FALSE, GDK_MOUSE_EVENTS_MASK, NULL, cursor, GDK_CURRENT_TIME);\n@@ -922,1 +869,1 @@\n-        \/\/*list = g_list_append(list, TARGET_COMPOUND_TEXT_ATOM);\n+        *list = g_list_append(*list, TARGET_COMPOUND_TEXT_ATOM);\n@@ -957,3 +904,1 @@\n-static void dnd_source_push_data(JNIEnv *env, jobject data, jint supported) {\n-    GdkWindow* src_window = get_dnd_window();\n-\n+static void dnd_source_push_data(JNIEnv *env, jobject data, jint supported, DragSourceContext *ctx) {\n@@ -961,1 +906,7 @@\n-    GdkDragContext *ctx;\n+    if (WindowContextBase:: sm_mouse_drag_window == NULL) {\n+        ERROR0(\"Drag not started on source window.\");\n+        return;\n+    }\n+\n+    in_drag = true;\n+    ctx->dnd_window = WindowContextBase:: sm_mouse_drag_window->get_gdk_window();\n@@ -971,5 +922,5 @@\n-    g_object_set_data_full(G_OBJECT(src_window), SOURCE_DND_DATA, data, clear_global_ref);\n-    g_object_set_data(G_OBJECT(src_window), SOURCE_DND_ACTIONS, (gpointer)actions);\n-\n-    if (!dnd_pointer_grab(NULL)) {\n-        ERROR0(\"Mouse grab failed.\\n\");\n+    ctx->actions = actions;\n+    ctx->dnd_ctx = gdk_drag_begin(ctx->dnd_window, targets);\n+    if (!gdk_pointer_is_grabbed()) {\n+        \/\/ Grab will start on glass_window, unless disabled\n+        gdk_pointer_grab(ctx->dnd_window, FALSE, GDK_MOUSE_EVENTS_MASK, NULL, NULL, GDK_CURRENT_TIME);\n@@ -978,2 +929,0 @@\n-    ctx = gdk_drag_begin(src_window, targets);\n-\n@@ -981,4 +930,0 @@\n-    g_object_set_data(G_OBJECT(src_window), SOURCE_DND_CONTEXT, ctx);\n-\n-    DragView::set_drag_view();\n-}\n@@ -986,6 +931,5 @@\n-jint execute_dnd(JNIEnv *env, jobject data, jint supported) {\n-    try {\n-        dnd_source_push_data(env, data, supported);\n-    } catch (jni_exception&) {\n-        return com_sun_glass_ui_gtk_GtkDnDClipboard_ACTION_NONE;\n-    }\n+    gboolean is_raw_image = FALSE;\n+    gint w = 0, h = 0;\n+    GdkPixbuf* pixbuf = DragView::get_drag_image(data, &is_raw_image, &w, &h);\n+    gint offset_x = -2;\n+    gint offset_y = -2;\n@@ -993,2 +937,3 @@\n-    while (is_in_drag()) {\n-        GdkEvent* event = gdk_event_get();\n+    if (GDK_IS_PIXBUF(pixbuf)) {\n+        offset_x = w \/ 2;\n+        offset_y = h \/ 2;\n@@ -996,4 +941,3 @@\n-        if (event != NULL) {\n-            glass_evloop_process_events(event, NULL);\n-            continue;\n-        }\n+        DragView::get_drag_image_offset(data, &offset_x, &offset_y);\n+    } else {\n+        GError *error = NULL;\n@@ -1001,1 +945,6 @@\n-        gtk_main_iteration();\n+        GtkIconTheme *icon_theme = gtk_icon_theme_get_default();\n+        pixbuf = gtk_icon_theme_load_icon(icon_theme,\n+                                         \"text-x-generic\",\n+                                         GTK_ICON_SIZE_DND,\n+                                         GTK_ICON_LOOKUP_USE_BUILTIN,\n+                                         &error);\n@@ -1004,1 +953,3 @@\n-    return dnd_get_performed_action();\n+    if (GDK_IS_PIXBUF(pixbuf)) {\n+        ctx->drag_view = new DragView(pixbuf, is_raw_image, offset_x, offset_y);\n+    }\n@@ -1007,7 +958,6 @@\n-void process_dnd_source(GdkWindow *window, GdkEvent *event) {\n-    if (drag_view != NULL && window == drag_view->get_window()) {\n-        if(event->type == GDK_EXPOSE) {\n-            drag_view->expose();\n-        } else {\n-            gtk_main_do_event(event);\n-        }\n+static void dnd_source_hook(GdkEvent *event, void * data) {\n+    DragSourceContext *ctx = (DragSourceContext *) data;\n+    GdkWindow *window = event->any.window;\n+\n+    if (event->type == GDK_EXPOSE && ctx->drag_view != NULL && window == ctx->drag_view->get_window()) {\n+        ctx->drag_view->expose();\n@@ -1019,1 +969,1 @@\n-            process_dnd_source_grab_broken(window, event);\n+            process_dnd_source_grab_broken(ctx, event);\n@@ -1022,1 +972,1 @@\n-            process_dnd_source_mouse_motion(window, event);\n+            process_dnd_source_mouse_motion(ctx, event);\n@@ -1025,1 +975,1 @@\n-            process_dnd_source_mouse_release(window, event);\n+            process_dnd_source_mouse_release(ctx, event);\n@@ -1029,1 +979,1 @@\n-            process_dnd_source_key_press_release(window, event);\n+            process_dnd_source_key_press_release(ctx, event);\n@@ -1032,1 +982,1 @@\n-            gdk_selection_owner_set(dnd_window, gdk_drag_get_selection(get_drag_context()),\n+            gdk_selection_owner_set(ctx->dnd_window, gdk_drag_get_selection(ctx->dnd_ctx),\n@@ -1036,4 +986,1 @@\n-            process_dnd_source_drag_status(window, event);\n-            break;\n-        case GDK_DROP_FINISHED:\n-            process_dnd_source_drop_finished(window, event);\n+            process_dnd_source_drag_status(ctx, event);\n@@ -1042,1 +989,1 @@\n-            process_dnd_source_selection_req(window, event);\n+            process_dnd_source_selection_req(ctx, event);\n@@ -1049,1 +996,5 @@\n-\/******************** DRAG VIEW ***************************\/\n+jint execute_dnd(JNIEnv *env, jobject data, jint supported) {\n+    GevlHookRegistration hookReg;\n+    DragSourceContext *ctx = new DragSourceContext();\n+    ctx->performed_action = com_sun_glass_ui_gtk_GtkDnDClipboard_ACTION_NONE;\n+    ctx->data = data;\n@@ -1051,0 +1002,11 @@\n+    try {\n+        dnd_source_push_data(env, data, supported, ctx);\n+    } catch (jni_exception&) {\n+        goto end;\n+    }\n+\n+    hookReg = glass_evloop_hook_add((GevlHookFunction) dnd_source_hook, ctx);\n+\n+    while (is_in_drag()) {\n+        gtk_main_iteration();\n+    }\n@@ -1052,3 +1014,8 @@\n-void DragView::reset_drag_view() {\n-    delete drag_view;\n-    drag_view = NULL;\n+    glass_evloop_hook_remove(hookReg);\n+\n+    end:\n+    jint performed_action = ctx->performed_action;\n+    delete ctx;\n+    \/\/TODO: should clear data?\n+\n+    return performed_action;\n@@ -1057,1 +1024,3 @@\n-gboolean DragView::get_drag_image_offset(int* x, int* y) {\n+\/******************** DRAG VIEW **************************\/\n+\n+gboolean DragView::get_drag_image_offset(jobject obj, int* x, int* y) {\n@@ -1059,1 +1028,1 @@\n-    jobject bb = dnd_source_get_data(\"application\/x-java-drag-image-offset\");\n+    jobject bb = dnd_source_get_data(obj, \"application\/x-java-drag-image-offset\");\n@@ -1085,1 +1054,1 @@\n-GdkPixbuf* DragView::get_drag_image(gboolean* is_raw_image, gint* width, gint* height) {\n+GdkPixbuf* DragView::get_drag_image(jobject obj, gboolean* is_raw_image, gint* width, gint* height) {\n@@ -1089,1 +1058,1 @@\n-    jobject drag_image = dnd_source_get_data(\"application\/x-java-drag-image\");\n+    jobject drag_image = dnd_source_get_data(obj, \"application\/x-java-drag-image\");\n@@ -1128,1 +1097,1 @@\n-        jobject pixels = dnd_source_get_data(\"application\/x-java-rawimage\");\n+        jobject pixels = dnd_source_get_data(obj, \"application\/x-java-rawimage\");\n@@ -1169,16 +1138,0 @@\n-void DragView::set_drag_view() {\n-    reset_drag_view();\n-\n-    gboolean is_raw_image = FALSE;\n-    gint w = 0, h = 0;\n-    GdkPixbuf* pixbuf = get_drag_image(&is_raw_image, &w, &h);\n-\n-    if (GDK_IS_PIXBUF(pixbuf)) {\n-        gint offset_x = w \/ 2;\n-        gint offset_y = h \/ 2;\n-\n-        get_drag_image_offset(&offset_x, &offset_y);\n-        drag_view = new DragView(pixbuf, is_raw_image, offset_x, offset_y);\n-    }\n-}\n-\n@@ -1262,0 +1215,1 @@\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_dnd.cpp","additions":165,"deletions":211,"binary":false,"changes":376,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-void process_dnd_source(GdkWindow *, GdkEvent *);\n@@ -64,0 +63,2 @@\n+    static gboolean get_drag_image_offset(jobject obj, int* x, int* y);\n+    static GdkPixbuf* get_drag_image(jobject obj, gboolean* is_raw_image, gint* width, gint* height);\n@@ -65,2 +66,0 @@\n-    static void set_drag_view();\n-    static void reset_drag_view();\n@@ -70,0 +69,9 @@\n+};\n+\n+struct DragSourceContext {\n+    GdkDragContext *dnd_ctx;\n+    GdkWindow *dnd_window;\n+    DragView *drag_view;\n+    GdkDragAction actions;\n+    jobject data;\n+    jint performed_action;\n@@ -71,2 +79,5 @@\n-    static gboolean get_drag_image_offset(int* x, int* y);\n-    static GdkPixbuf* get_drag_image(gboolean* is_raw_image, gint* width, gint* height);\n+    ~DragSourceContext() {\n+        if (drag_view) {\n+            delete drag_view;\n+        }\n+    };\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_dnd.h","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-#include \"glass_window.h\"\n-#include \"glass_dnd.h\"\n-#include \"glass_screen.h\"\n@@ -34,1 +31,0 @@\n-GdkEventFunc process_events_prev;\n@@ -43,1 +39,2 @@\n-void glass_evloop_initialize() {\n+void\n+glass_evloop_initialize() {\n@@ -46,1 +43,2 @@\n-void glass_evloop_finalize() {\n+void\n+glass_evloop_finalize() {\n@@ -57,1 +55,2 @@\n-void glass_evloop_call_hooks(GdkEvent * event) {\n+void\n+glass_evloop_call_hooks(GdkEvent * event) {\n@@ -68,1 +67,2 @@\n-GevlHookRegistration glass_evloop_hook_add(GevlHookFunction hookFn, void * data) {\n+GevlHookRegistration\n+glass_evloop_hook_add(GevlHookFunction hookFn, void * data) {\n@@ -83,1 +83,2 @@\n-void glass_evloop_hook_remove(GevlHookRegistration hookReg) {\n+void\n+glass_evloop_hook_remove(GevlHookRegistration hookReg) {\n@@ -88,140 +89,0 @@\n-bool is_window_enabled_for_event(GdkWindow * window, WindowContext *ctx, gint event_type) {\n-\n-\n-    if (gdk_window_is_destroyed(window)) {\n-        return FALSE;\n-    }\n-\n-    \/*\n-     * GDK_DELETE can be blocked for disabled window e.q. parent window\n-     * which prevents from closing it\n-     *\/\n-    switch (event_type) {\n-        case GDK_CONFIGURE:\n-        case GDK_DESTROY:\n-        case GDK_EXPOSE:\n-        case GDK_DAMAGE:\n-        case GDK_WINDOW_STATE:\n-        case GDK_FOCUS_CHANGE:\n-            return TRUE;\n-            break;\n-    }\/\/switch\n-\n-    if (ctx != NULL ) {\n-        return ctx->isEnabled();\n-    }\n-    return TRUE;\n-}\n-\n-\n-void glass_evloop_process_events(GdkEvent* event, gpointer data) {\n-    GdkWindow* window = event->any.window;\n-\n-    if (is_in_drag()) {\n-        process_dnd_source(window, event);\n-    }\n-\n-    WindowContext *ctx = window != NULL ? (WindowContext*)\n-        g_object_get_data(G_OBJECT(window), GDK_WINDOW_DATA_CONTEXT) : NULL;\n-\n-    if ((window != NULL)\n-            && !is_window_enabled_for_event(window, ctx, event->type)) {\n-        return;\n-    }\n-\n-    if (ctx != NULL && ctx->hasIME() && ctx->filterIME(event)) {\n-        return;\n-    }\n-\n-    glass_evloop_call_hooks(event);\n-\n-    if (ctx != NULL) {\n-        EventsCounterHelper helper(ctx);\n-        try {\n-            switch (event->type) {\n-                case GDK_PROPERTY_NOTIFY:\n-                    ctx->process_property_notify(&event->property);\n-                    gtk_main_do_event(event);\n-                    break;\n-                case GDK_CONFIGURE:\n-                    ctx->process_configure(&event->configure);\n-                    gtk_main_do_event(event);\n-                    break;\n-                case GDK_FOCUS_CHANGE:\n-                    ctx->process_focus(&event->focus_change);\n-                    gtk_main_do_event(event);\n-                    break;\n-                case GDK_DESTROY:\n-                    destroy_and_delete_ctx(ctx);\n-                    gtk_main_do_event(event);\n-                    break;\n-                case GDK_DELETE:\n-                    ctx->process_delete();\n-                    break;\n-                case GDK_EXPOSE:\n-                case GDK_DAMAGE:\n-                    ctx->process_expose(&event->expose);\n-                    break;\n-                case GDK_WINDOW_STATE:\n-                    ctx->process_state(&event->window_state);\n-                    gtk_main_do_event(event);\n-                    break;\n-                case GDK_BUTTON_PRESS:\n-                case GDK_BUTTON_RELEASE:\n-                    ctx->process_mouse_button(&event->button);\n-                    break;\n-                case GDK_MOTION_NOTIFY:\n-                    ctx->process_mouse_motion(&event->motion);\n-                    gdk_event_request_motions(&event->motion);\n-                    break;\n-                case GDK_SCROLL:\n-                    ctx->process_mouse_scroll(&event->scroll);\n-                    break;\n-                case GDK_ENTER_NOTIFY:\n-                case GDK_LEAVE_NOTIFY:\n-                    ctx->process_mouse_cross(&event->crossing);\n-                    break;\n-                case GDK_KEY_PRESS:\n-                case GDK_KEY_RELEASE:\n-                    ctx->process_key(&event->key);\n-                    break;\n-                case GDK_DROP_START:\n-                case GDK_DRAG_ENTER:\n-                case GDK_DRAG_LEAVE:\n-                case GDK_DRAG_MOTION:\n-                    process_dnd_target(ctx, &event->dnd);\n-                    break;\n-                case GDK_MAP:\n-                    ctx->process_map();\n-                    \/\/ fall-through\n-                case GDK_UNMAP:\n-                case GDK_CLIENT_EVENT:\n-                case GDK_VISIBILITY_NOTIFY:\n-                case GDK_SETTING:\n-                case GDK_OWNER_CHANGE:\n-                    gtk_main_do_event(event);\n-                    break;\n-                default:\n-                    break;\n-            }\n-        } catch (jni_exception&) {\n-        }\n-    } else {\n-\n-        if (window == gdk_screen_get_root_window(gdk_screen_get_default())) {\n-            if (event->any.type == GDK_PROPERTY_NOTIFY) {\n-                if (event->property.atom == gdk_atom_intern_static_string(\"_NET_WORKAREA\")\n-                        || event->property.atom == gdk_atom_intern_static_string(\"_NET_CURRENT_DESKTOP\")) {\n-                    screen_settings_changed(gdk_screen_get_default(), NULL);\n-                }\n-            }\n-        }\n-\n-        \/\/process only for non-FX windows\n-            if (process_events_prev != NULL) {\n-            (*process_events_prev)(event, data);\n-        } else {\n-            gtk_main_do_event(event);\n-        }\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_evloop.cpp","additions":10,"deletions":149,"binary":false,"changes":159,"status":"modified"},{"patch":"@@ -37,1 +37,2 @@\n-GevlHookRegistration glass_evloop_hook_add(GevlHookFunction hookFn, void * data);\n+GevlHookRegistration glass_evloop_hook_add(GevlHookFunction hookFn,\n+                                           void * data);\n@@ -39,1 +40,0 @@\n-void glass_evloop_process_events(GdkEvent*, gpointer);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_evloop.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -535,1 +535,1 @@\n-    return glass_gdk_mouse_devices_grab_with_cursor(gdkWindow, NULL, TRUE, TRUE);\n+    return glass_gdk_mouse_devices_grab_with_cursor(gdkWindow, NULL, TRUE);\n@@ -539,2 +539,2 @@\n-glass_gdk_mouse_devices_grab_with_cursor(GdkWindow *gdkWindow, GdkCursor *cursor, gboolean owner_events, gboolean obey_disable_grab) {\n-    if (disableGrab && obey_disable_grab) {\n+glass_gdk_mouse_devices_grab_with_cursor(GdkWindow *gdkWindow, GdkCursor *cursor, gboolean owner_events) {\n+    if (disableGrab) {\n@@ -544,14 +544,2 @@\n-    GdkGrabStatus status;\n-\n-#ifdef GLASS_GTK3\n-    GdkDevice *device = gdk_device_manager_get_client_pointer(\n-                                    gdk_display_get_device_manager(\n-                                        gdk_display_get_default()));\n-\n-    status = gdk_device_grab(device, gdkWindow, GDK_OWNERSHIP_APPLICATION,\n-                                owner_events, GDK_MOUSE_EVENTS_MASK,\n-                                cursor, GDK_CURRENT_TIME);\n-#else\n-    status = gdk_pointer_grab(gdkWindow, owner_events, GDK_MOUSE_EVENTS_MASK,\n-                                    NULL, cursor, GDK_CURRENT_TIME);\n-#endif\n+    GdkGrabStatus status = gdk_pointer_grab(gdkWindow, owner_events, GDK_MOUSE_EVENTS_MASK,\n+                                            NULL, cursor, GDK_CURRENT_TIME);\n@@ -564,6 +552,0 @@\n-#ifdef GLASS_GTK3\n-    GdkDevice *device = gdk_device_manager_get_client_pointer(\n-                                    gdk_display_get_device_manager(\n-                                        gdk_display_get_default()));\n-    gdk_device_ungrab(device, GDK_CURRENT_TIME);\n-#else\n@@ -571,1 +553,0 @@\n-#endif\n@@ -595,11 +576,0 @@\n-void\n-glass_gdk_device_ungrab(GdkDevice *device) {\n-#ifdef GLASS_GTK3\n-        gdk_device_ungrab(device, GDK_CURRENT_TIME);\n-#else\n-        (void) device;\n-        gdk_pointer_ungrab(GDK_CURRENT_TIME);\n-#endif\n-}\n-\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_general.cpp","additions":5,"deletions":35,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -297,1 +297,1 @@\n-glass_gdk_mouse_devices_grab_with_cursor(GdkWindow * gdkWindow, GdkCursor *cursor, gboolean owner_events, gboolean obey_disable_grab);\n+glass_gdk_mouse_devices_grab_with_cursor(GdkWindow * gdkWindow, GdkCursor *cursor, gboolean owner_events);\n@@ -308,3 +308,0 @@\n-void\n-glass_gdk_device_ungrab(GdkDevice *device);\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_general.h","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-GdkWindow* WindowContextBase::get_gdk_window() {\n+GdkWindow* WindowContextBase::get_gdk_window(){\n@@ -622,1 +622,1 @@\n-            gdk_window, gdk_window_get_cursor(gdk_window), FALSE, TRUE)) {\n+            gdk_window, gdk_window_get_cursor(gdk_window), FALSE)) {\n@@ -632,1 +632,0 @@\n-\n@@ -634,1 +633,0 @@\n-\n@@ -665,2 +663,2 @@\n-            GdkWindow* window = WindowContextBase::sm_mouse_drag_window->get_gdk_window();\n-            glass_gdk_mouse_devices_grab_with_cursor(window, cursor, FALSE, TRUE);\n+            glass_gdk_mouse_devices_grab_with_cursor(\n+                    WindowContextBase::sm_mouse_drag_window->get_gdk_window(), cursor, FALSE);\n@@ -668,2 +666,2 @@\n-            GdkWindow* window = WindowContextBase::sm_grab_window->get_gdk_window();\n-            glass_gdk_mouse_devices_grab_with_cursor(window, cursor, TRUE, TRUE);\n+            glass_gdk_mouse_devices_grab_with_cursor(\n+                    WindowContextBase::sm_grab_window->get_gdk_window(), cursor, TRUE);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.cpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -202,0 +202,1 @@\n+public:\n@@ -214,1 +215,0 @@\n-public:\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}