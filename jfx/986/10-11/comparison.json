{"files":[{"patch":"@@ -0,0 +1,157 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package dragdrop;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ProgressBar;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.input.ClipboardContent;\n+import javafx.scene.input.Dragboard;\n+import javafx.scene.input.TransferMode;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.scene.text.Text;\n+import javafx.stage.Stage;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+\n+public class DragDropDuke extends Application {\n+    private Image image;\n+    private ProgressBar progressBar;\n+    private ImageView imageView;\n+    private Label posLabel;\n+\n+    @Override\n+    public void start(Stage stage) {\n+        progressBar = new ProgressBar();\n+        progressBar.prefWidthProperty().bind(stage.widthProperty().multiply(0.80d));\n+\n+        new Thread(this::download).start();\n+\n+        Text text = new Text(\"Instructions:\\n\" +\n+                \"1. Wait for the image download.\\n\" +\n+                \"2. Drag image and notice it's a transparent png.\\n\" +\n+                \"3. Notice Position changes from \\\"Mouse Move\\\" to \\\"Mouse Drag\\\".\\n\" +\n+                \"4. Drag over and drop on the tomato square.\\n\" +\n+                \"5. While dragging image, press ALT+F4 (should stop Drag).\");\n+\n+        imageView = new ImageView(image);\n+        imageView.setFitHeight(200D);\n+        imageView.setPreserveRatio(true);\n+\n+        Pane pane = new Pane();\n+        pane.setPrefSize(200, 200);\n+        pane.setBackground(Background.fill(Color.TOMATO));\n+        HBox hBox = new HBox(imageView, pane);\n+        hBox.setAlignment(Pos.CENTER);\n+\n+        posLabel = new Label();\n+        VBox vBox = new VBox(text, posLabel, progressBar, hBox);\n+        vBox.setSpacing(5.0);\n+        vBox.setAlignment(Pos.CENTER);\n+        stage.setScene(new Scene(vBox, 480, 480));\n+        stage.setTitle(\"Drag & Drop Duke\");\n+\n+        imageView.setOnDragDetected(event -> {\n+            ClipboardContent content = new ClipboardContent();\n+            content.putImage(image);\n+\n+            Dragboard dragboard = imageView.startDragAndDrop(TransferMode.ANY);\n+            dragboard.setContent(content);\n+            dragboard.setDragViewOffsetX(100);\n+            dragboard.setDragViewOffsetY(100);\n+            dragboard.setDragView(image);\n+        });\n+\n+        stage.getScene().setOnMouseMoved(e -> showPos(\"Mouse Move\", e.getSceneX(), e.getSceneY()));\n+        stage.getScene().setOnDragOver(e -> showPos(\"Mouse Drag\", e.getSceneX(), e.getScreenY()));\n+\n+        pane.setOnDragOver(e -> {\n+            e.acceptTransferModes(TransferMode.ANY);\n+            pane.setBackground(Background.fill(Color.CADETBLUE));\n+        });\n+        pane.setOnDragDropped(e -> pane.setBackground(Background.fill(Color.LAWNGREEN)));\n+        stage.show();\n+    }\n+\n+    private void showPos(String prefix, double x, double y) {\n+        posLabel.setText(String.format(\"%s -> x: %f, y: %f\", prefix, x, y));\n+    }\n+\n+    private void download() {\n+        try {\n+            subDownload();\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private void subDownload() throws IOException {\n+        URL url = new URL(\"http:\/\/cr.openjdk.java.net\/~jeff\/Duke\/png\/Hips.png\");\n+        HttpURLConnection urlConn = (HttpURLConnection) url.openConnection();\n+        int cl = urlConn.getContentLength();\n+\n+        int total = 0;\n+        int read = 0;\n+        try (InputStream in = urlConn.getInputStream();\n+             ByteArrayOutputStream out = new ByteArrayOutputStream(cl)) {\n+            byte[] buf = new byte[1024];\n+\n+            while ((read = in.read(buf)) > 0) {\n+                out.write(buf, 0, read);\n+                total += read;\n+                double percent = (double) total \/ (double) cl * 100d;\n+\n+                Platform.runLater(() -> progressBar.setProgress(percent \/ 100));\n+            }\n+\n+            Platform.runLater(() -> {\n+                image = new Image(new ByteArrayInputStream(out.toByteArray()));\n+                imageView.setImage(image);\n+            });\n+        }\n+    }\n+\n+    public static String info() {\n+        return \"Drag & Drop Duke\";\n+    }\n+\n+    public static void main(String[] args) {\n+        Application.launch(DragDropDuke.class, args);\n+    }\n+}\n","filename":"apps\/toys\/DragDrop\/src\/dragdrop\/DragDropDuke.java","additions":157,"deletions":0,"binary":false,"changes":157,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"apps\/toys\/DragDrop\/src\/dragdrop\/DragDropKeys.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+        register(\"Drag Duke\", DragDropDuke.class, DragDropDuke.info());\n","filename":"apps\/toys\/DragDrop\/src\/dragdrop\/Main.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -790,1 +790,0 @@\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_dnd.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -633,3 +633,1 @@\n-    if (!is_in_drag()) {\n-        glass_gdk_mouse_devices_ungrab();\n-    }\n+    glass_gdk_mouse_devices_ungrab();\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}