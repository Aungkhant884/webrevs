{"files":[{"patch":"@@ -157,8 +157,0 @@\n-\/\/        \/\/ Fix for RT-16565\n-\/\/        getNode().selectionModelProperty().addListener(weakSelectionModelListener);\n-\/\/        if (control.getSelectionModel() != null) {\n-\/\/            control.getSelectionModel().getSelectedIndices().addListener(weakSelectedIndicesListener);\n-\/\/        }\n-\n-\n-\n@@ -258,0 +250,6 @@\n+        getNode().selectionModelProperty().removeListener(weakSelectionModelListener);\n+        MultipleSelectionModel<TreeItem<T>> sm = getNode().getSelectionModel();\n+        if (sm != null) {\n+            sm.getSelectedIndices().removeListener(weakSelectedIndicesListener);\n+        }\n+        getNode().removeEventFilter(KeyEvent.ANY, keyEventListener);\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/TreeViewBehavior.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -139,0 +139,4 @@\n+    private EventHandler<MouseEvent> ml;\n+\n+\n+\n@@ -168,1 +172,1 @@\n-        EventHandler<MouseEvent> ml = event -> {\n+        ml = event -> {\n@@ -229,0 +233,11 @@\n+        if (getSkinnable() == null) return;\n+\n+        getSkinnable().getProperties().removeListener(propertiesMapListener);\n+        setRoot(null);\n+        \/\/ leaking without nulling factory\n+        flow.setCellFactory(null);\n+        \/\/ for completeness - but no effect with\/out? Same as in ListViewSkin\n+        \/\/ don't without seeing any effect - it's not on the skinnable, but on a child, so shouldn't\n+        flow.getVbar().removeEventFilter(MouseEvent.MOUSE_PRESSED, ml);\n+        flow.getHbar().removeEventFilter(MouseEvent.MOUSE_PRESSED, ml);\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TreeViewSkin.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeView;\n@@ -50,0 +52,45 @@\n+\/\/----------- TreeView\n+\n+    \/**\n+     * Test cleanup of selection listeners in TreeViewBehavior.\n+     *\/\n+    @Test\n+    public void testTreeViewBehaviorDisposeSelect() {\n+        TreeView<String> treeView = new TreeView<>(createRoot());\n+        WeakReference<BehaviorBase<?>> weakRef = new WeakReference<>(createBehavior(treeView));\n+        treeView.getSelectionModel().select(1);\n+        weakRef.get().dispose();\n+        treeView.getSelectionModel().select(0);\n+        assertNull(\"anchor must remain cleared on selecting when disposed\",\n+                treeView.getProperties().get(\"anchor\"));\n+    }\n+\n+    @Test\n+    public void testTreeViewBehaviorSelect() {\n+        TreeView<String> treeView = new TreeView<>(createRoot());\n+        createBehavior(treeView);\n+        int last = 1;\n+        treeView.getSelectionModel().select(last);\n+        assertEquals(\"anchor must be set\", last, treeView.getProperties().get(\"anchor\"));\n+    }\n+\n+    @Test\n+    public void testTreeViewBehaviorDispose() {\n+        TreeView<String> treeView = new TreeView<>(createRoot());\n+        WeakReference<BehaviorBase<?>> weakRef = new WeakReference<>(createBehavior(treeView));\n+        treeView.getSelectionModel().select(1);\n+        weakRef.get().dispose();\n+        assertNull(\"anchor must be cleared after dispose\", treeView.getProperties().get(\"anchor\"));\n+    }\n+\n+    \/**\n+     * Creates and returns an expanded treeItem with two children.\n+     *\/\n+    private TreeItem<String> createRoot() {\n+        TreeItem<String> root = new TreeItem<>(\"root\");\n+        root.setExpanded(true);\n+        root.getChildren().addAll(new TreeItem<>(\"child one\"), new TreeItem<>(\"child two\"));\n+        return root;\n+    }\n+\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/behavior\/BehaviorCleanupTest.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-import javafx.scene.control.TreeView;\n@@ -89,2 +88,1 @@\n-                TreeTableView.class,\n-                TreeView.class\n+                TreeTableView.class\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/behavior\/BehaviorMemoryLeakTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.lang.ref.WeakReference;\n+\n@@ -30,1 +32,0 @@\n-import org.junit.Ignore;\n@@ -46,0 +47,1 @@\n+import javafx.scene.control.TreeItem;\n@@ -61,0 +63,71 @@\n+  \/\/---------------- TreeView\n+\n+    \/**\n+     * Sanity: replacing the root has no side-effect, listener to rootProperty\n+     * is registered with skin api\n+     *\/\n+    @Test\n+    public void testTreeViewSetRoot() {\n+        TreeView<String> treeView = new TreeView<>(createRoot());\n+        installDefaultSkin(treeView);\n+        replaceSkin(treeView);\n+        treeView.setRoot(createRoot());\n+    }\n+\n+    \/**\n+     * NPE from event handler to treeModification of root.\n+     *\/\n+    @Test\n+    public void testTreeViewAddRootChild() {\n+        TreeView<String> treeView = new TreeView<>(createRoot());\n+        installDefaultSkin(treeView);\n+        replaceSkin(treeView);\n+        treeView.getRoot().getChildren().add(createRoot());\n+    }\n+\n+    \/**\n+     * NPE from event handler to treeModification of root.\n+     *\/\n+    @Test\n+    public void testTreeViewReplaceRootChildren() {\n+        TreeView<String> treeView = new TreeView<>(createRoot());\n+        installDefaultSkin(treeView);\n+        replaceSkin(treeView);\n+        treeView.getRoot().getChildren().setAll(createRoot().getChildren());\n+    }\n+\n+    \/**\n+     * NPE due to properties listener not removed\n+     *\/\n+    @Test\n+    public void testTreeViewRefresh() {\n+        TreeView<String> treeView = new TreeView<>();\n+        installDefaultSkin(treeView);\n+        replaceSkin(treeView);\n+        treeView.refresh();\n+    }\n+\n+    \/**\n+     * Sanity: guard against potential memory leak from root property listener.\n+     *\/\n+    @Test\n+    public void testMemoryLeakAlternativeSkinWithRoot() {\n+        TreeView<String> treeView = new TreeView<>(createRoot());\n+        installDefaultSkin(treeView);\n+        WeakReference<?> weakRef = new WeakReference<>(replaceSkin(treeView));\n+        assertNotNull(weakRef.get());\n+        attemptGC(weakRef);\n+        assertEquals(\"Skin must be gc'ed\", null, weakRef.get());\n+    }\n+\n+    \/**\n+     * Creates and returns an expanded treeItem with two children\n+     *\/\n+    private TreeItem<String> createRoot() {\n+        TreeItem<String> root = new TreeItem<>(\"root\");\n+        root.setExpanded(true);\n+        root.getChildren().addAll(new TreeItem<>(\"child one\"), new TreeItem<>(\"child two\"));\n+        return root;\n+    }\n+\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SkinCleanupTest.java","additions":74,"deletions":1,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -64,1 +64,0 @@\n-import javafx.scene.control.TreeView;\n@@ -126,2 +125,1 @@\n-                TreeTableView.class,\n-                TreeView.class\n+                TreeTableView.class\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SkinMemoryLeakTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}