{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -240,13 +240,0 @@\n-        @Override\n-        \/\/This code is basically a kind of optimization that prevents a Skin that is equal but not instance equal.\n-        \/\/Although it's not kosher from the property perspective (bindings won't pass through set), it should not do any harm.\n-        \/\/But it should be evaluated in the future.\n-        public void set(Skin<?> v) {\n-            if (v == null\n-                ? oldValue == null\n-                : oldValue != null && v.getClass().equals(oldValue.getClass()))\n-                return;\n-\n-            super.set(v);\n-        }\n-\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Control.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,0 +80,34 @@\n+    \/**\n+     * default skin -> set another instance of default skin\n+     *\/\n+    @Test\n+    public void testMemoryLeakSameSkinClass() {\n+        installDefaultSkin(control);\n+        Skin<?> skin = control.getSkin();\n+        installDefaultSkin(control);\n+\n+        WeakReference<?> weakRef = new WeakReference<>(skin);\n+        skin = null;\n+        attemptGC(weakRef);\n+        assertNull(\"Unused Skin must be gc'ed\", weakRef.get());\n+    }\n+\n+    @Test\n+    public void testControlChildrenSameSkinClass() {\n+        installDefaultSkin(control);\n+        int childCount = control.getChildrenUnmodifiable().size();\n+        installDefaultSkin(control);\n+        assertEquals(\"Old skin should dispose children when a new skin is set\",\n+                childCount, control.getChildrenUnmodifiable().size());\n+    }\n+\n+    @Test\n+    public void testSetSkinOfSameClass() {\n+        installDefaultSkin(control);\n+        Skin<?> oldSkin = control.getSkin();\n+        installDefaultSkin(control);\n+        Skin<?> newSkin = control.getSkin();\n+\n+        assertNotEquals(\"New skin was not set\", oldSkin, newSkin);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SkinMemoryLeakTest.java","additions":35,"deletions":1,"binary":false,"changes":36,"status":"modified"}]}