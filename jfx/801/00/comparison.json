{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -109,0 +109,1 @@\n+    }\n@@ -110,0 +111,7 @@\n+    \/**\n+     * Creates a DatePicker instance and sets the\n+     * {@link #valueProperty() value} to the given date.\n+     *\n+     * @param localDate to be set as the currently selected date in the DatePicker. Can be null.\n+     *\/\n+    public DatePicker(LocalDate localDate) {\n@@ -118,1 +126,1 @@\n-                            ((lastValidDate == null) ? \"null\" : getConverter().toString(lastValidDate)));\n+                        ((lastValidDate == null) ? \"null\" : getConverter().toString(lastValidDate)));\n@@ -135,0 +143,11 @@\n+\n+        setValue(localDate);\n+        getStyleClass().add(DEFAULT_STYLE_CLASS);\n+        setAccessibleRole(AccessibleRole.DATE_PICKER);\n+        setEditable(true);\n+\n+        focusedProperty().addListener(o -> {\n+            if (!isFocused()) {\n+                commitValue();\n+            }\n+        });\n@@ -149,19 +168,0 @@\n-    \/**\n-     * Creates a DatePicker instance and sets the\n-     * {@link #valueProperty() value} to the given date.\n-     *\n-     * @param localDate to be set as the currently selected date in the DatePicker. Can be null.\n-     *\/\n-    public DatePicker(LocalDate localDate) {\n-        setValue(localDate);\n-        getStyleClass().add(DEFAULT_STYLE_CLASS);\n-        setAccessibleRole(AccessibleRole.DATE_PICKER);\n-        setEditable(true);\n-\n-        focusedProperty().addListener(o -> {\n-            if (!isFocused()) {\n-                commitValue();\n-            }\n-        });\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/DatePicker.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.time.DateTimeException;\n@@ -30,0 +31,3 @@\n+import java.time.temporal.ChronoField;\n+import java.time.temporal.TemporalAccessor;\n+import java.time.temporal.ValueRange;\n@@ -623,0 +627,24 @@\n+    @Test\n+    public void testInvalidChronologyIsRestored() {\n+        datePicker = new DatePicker(LocalDate.of(1998, 1, 23));\n+        datePicker.setChronology(IsoChronology.INSTANCE);\n+\n+        assertEquals(IsoChronology.INSTANCE, datePicker.getChronology());\n+\n+        \/\/ This should restore the old set chronology (Iso) as the chronology is invalid.\n+        datePicker.setChronology(new InvalidChronology());\n+        assertEquals(IsoChronology.INSTANCE, datePicker.getChronology());\n+    }\n+\n+    @Test\n+    public void testInvalidValueIsRestored() {\n+        datePicker = new DatePicker(null);\n+        assertNull(datePicker.getValue());\n+\n+        datePicker.setChronology(new InvalidChronology());\n+        \/\/ This should restore the old set value (null) as the chronology is invalid.\n+        datePicker.setValue(LocalDate.of(1998, 1, 23));\n+\n+        assertNull(datePicker.getValue());\n+    }\n+\n@@ -712,0 +740,47 @@\n+    private class InvalidChronology extends AbstractChronology {\n+        @Override\n+        public String getId() {\n+            return null;\n+        }\n+        @Override\n+        public String getCalendarType() {\n+            return null;\n+        }\n+        @Override\n+        public ChronoLocalDate date(int prolepticYear, int month, int dayOfMonth) {\n+            return null;\n+        }\n+        @Override\n+        public ChronoLocalDate dateYearDay(int prolepticYear, int dayOfYear) {\n+            return null;\n+        }\n+        @Override\n+        public ChronoLocalDate dateEpochDay(long epochDay) {\n+            return null;\n+        }\n+        @Override\n+        public ChronoLocalDate date(TemporalAccessor temporal) {\n+            throw new DateTimeException(\"Invalid\");\n+        }\n+        @Override\n+        public boolean isLeapYear(long prolepticYear) {\n+            return false;\n+        }\n+        @Override\n+        public int prolepticYear(Era era, int yearOfEra) {\n+            return 0;\n+        }\n+        @Override\n+        public Era eraOf(int eraValue) {\n+            return null;\n+        }\n+        @Override\n+        public List<Era> eras() {\n+            return null;\n+        }\n+        @Override\n+        public ValueRange range(ChronoField field) {\n+            return null;\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/DatePickerTest.java","additions":76,"deletions":1,"binary":false,"changes":77,"status":"modified"}]}