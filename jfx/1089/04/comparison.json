{"files":[{"patch":"@@ -31,1 +31,1 @@\n-- (void)startDrag:(NSDragOperation)operation;\n+- (void)startDrag:(NSDragOperation)operation withItems:(NSArray<NSDraggingItem*>*)items;\n@@ -39,1 +39,2 @@\n-+ (void)flushWithMask:(jint)mask;\n++ (BOOL)isDelegateSet;\n++ (void)flushWithMask:(jint)mask withItems:(NSArray<NSDraggingItem*>*)items;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassDragSource.h","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -52,1 +52,6 @@\n-+ (void)flushWithMask:(jint)mask\n++ (BOOL)isDelegateSet\n+{\n+    return (gDelegate != nil);\n+}\n+\n++ (void)flushWithMask:(jint)mask withItems:(NSArray<NSDraggingItem*>*)items\n@@ -62,2 +67,2 @@\n-            LOG(\"[gDelegate startDrag:operation]\");\n-                [gDelegate startDrag:operation];\n+            LOG(\"[gDelegate startDrag:operation withItems:items] gDelegate %p\", gDelegate);\n+            [gDelegate startDrag:operation withItems:items];\n@@ -67,1 +72,1 @@\n-            LOG(\"[gDelegate startDrag:operation] NOT TAKEN!\");\n+            LOG(\"[gDelegate startDrag:operation withItems:items] NOT TAKEN!\");\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassDragSource.m","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+#import <Cocoa\/Cocoa.h>\n+\n+@interface GlassDraggingSource : NSObject <NSDraggingSource>\n+{\n+@public\n+    NSDragOperation dragOperation;\n+\n+}\n+\n+- (GlassDraggingSource*)initWithOperation:(NSDragOperation)operation;\n+\n+- (void)draggingSession:(NSDraggingSession *)session willBeginAtPoint:(NSPoint)screenPoint;\n+- (void)draggingSession:(NSDraggingSession *)session movedToPoint:(NSPoint)screenPoint;\n+- (void)draggingSession:(NSDraggingSession *)session endedAtPoint:(NSPoint)screenPoint operation:(NSDragOperation)operation;\n+\n+- (BOOL)ignoreModifierKeysForDraggingSession:(NSDraggingSession *)session;\n+\n+@end\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassDraggingSource.h","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"common.h\"\n+#include <AppKit\/AppKit.h>\n+#import \"GlassDraggingSource.h\"\n+#import \"GlassMacros.h\"\n+\n+\/\/#define VERBOSE\n+#ifndef VERBOSE\n+    #define LOG(MSG, ...)\n+#else\n+    #define LOG(MSG, ...) GLASS_LOG(MSG, ## __VA_ARGS__);\n+#endif\n+\n+\n+@implementation GlassDraggingSource\n+\n+- (NSDragOperation)draggingSession:(NSDraggingSession *)session sourceOperationMaskForDraggingContext:(NSDraggingContext)context\n+{\n+    \/\/ The Command key masks out every operation other than NSDragOperationGeneric. We want\n+    \/\/ internal Move events to get through this filtering so we copy the Move bit into the\n+    \/\/ Generic bit and treat Generic as a synonym for Move.\n+    if (context == NSDraggingContextWithinApplication)\n+    {\n+        NSDragOperation result = self->dragOperation;\n+        if (result & NSDragOperationMove)\n+            result |= NSDragOperationGeneric;\n+        return result;\n+    }\n+    return self->dragOperation;\n+}\n+\n+- (GlassDraggingSource*)initWithOperation:(NSDragOperation)operation\n+{\n+    dragOperation = operation;\n+    return self;\n+}\n+\n+- (void)draggingSession:(NSDraggingSession *)session willBeginAtPoint:(NSPoint)screenPoint\n+{\n+}\n+\n+- (void)draggingSession:(NSDraggingSession *)session movedToPoint:(NSPoint)screenPoint\n+{\n+}\n+\n+- (void)draggingSession:(NSDraggingSession *)session endedAtPoint:(NSPoint)screenPoint operation:(NSDragOperation)operation\n+{\n+}\n+\n+- (BOOL)ignoreModifierKeysForDraggingSession:(NSDraggingSession *)session\n+{\n+    return NO;\n+}\n+\n+@end\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassDraggingSource.m","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -763,1 +763,1 @@\n-        \/\/NSLog(@\"Java_com_sun_glass_ui_mac_MacPasteboard__1putItems itemCount: %d\", itemCount);\n+        LOG(@\"Java_com_sun_glass_ui_mac_MacPasteboard__1putItems itemCount: %d\", itemCount);\n@@ -778,2 +778,16 @@\n-            \/\/ http:\/\/developer.apple.com\/library\/mac\/#documentation\/cocoa\/Conceptual\/PasteboardGuide106\/Articles\/pbCustom.html\n-            [pasteboard writeObjects:objects];\n+            \/\/ We perform a Drag-n-Drop only when our pasteboard is a DnD pasteboard\n+            \/\/ and if drag delegate was set. The latter one is set when DnD operation\n+            \/\/ came from a NSView (ex. mouse drag).\n+            if ([[pasteboard name] isEqualToString:NSDragPboard] && [GlassDragSource isDelegateSet])\n+            {\n+                \/\/ DnD requires separate NSDragging* calls to work since macOS 10.7\n+                \/\/ convert NSPasteboardItem-s array to NSDraggingItem-s\n+                NSMutableArray<NSDraggingItem*> *dItems = [NSMutableArray<NSDraggingItem*> arrayWithCapacity:itemCount];\n+                for (NSPasteboardItem* i in objects)\n+                {\n+                    [dItems addObject:[[NSDraggingItem alloc] initWithPasteboardWriter:i]];\n+                }\n+\n+                \/\/ New DnD API (macOS 10.7+) requires us to skip writing data to Pasteboard.\n+                \/\/ It handles managing the pasteboard separately on its own.\n+                [GlassDragSource flushWithMask:supportedActions withItems:dItems];\n@@ -781,1 +795,6 @@\n-            if (pasteboard == [NSPasteboard pasteboardWithName:NSDragPboard])\n+                for (NSDraggingItem* i in dItems)\n+                {\n+                    [i release];\n+                }\n+            }\n+            else\n@@ -783,1 +802,3 @@\n-                [GlassDragSource flushWithMask:supportedActions];\n+                \/\/ previous write to pasteboard for compatibility\n+                \/\/ http:\/\/developer.apple.com\/library\/mac\/#documentation\/cocoa\/Conceptual\/PasteboardGuide106\/Articles\/pbCustom.html\n+                [pasteboard writeObjects:objects];\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassPasteboard.m","additions":26,"deletions":5,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -582,8 +582,0 @@\n-- (NSDragOperation)draggingSourceOperationMaskForLocal:(BOOL)isLocal\n-{\n-    \/\/ Deprecated for 10.7\n-    \/\/ use NSDraggingSession - (NSDragOperation)draggingSession:(NSDraggingSession *)session sourceOperationMaskForDraggingContext:(NSDraggingContext)context\n-    DNDLOG(\"draggingSourceOperationMaskForLocal\");\n-    return [self->_delegate draggingSourceOperationMaskForLocal:isLocal];\n-}\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassView3D.m","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#import \"GlassDraggingSource.h\"\n@@ -69,1 +70,1 @@\n-    NSDragOperation         dragOperation;\n+    GlassDraggingSource     *draggingSource;\n@@ -103,2 +104,1 @@\n-- (NSDragOperation)draggingSourceOperationMaskForLocal:(BOOL)isLocal;\n-- (void)startDrag:(NSDragOperation)operation;\n+- (void)startDrag:(NSDragOperation)operation withItems:(NSArray<NSDraggingItem*>*)items;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassViewDelegate.h","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"GlassDraggingSource.h\"\n@@ -952,15 +953,0 @@\n-- (NSDragOperation)draggingSourceOperationMaskForLocal:(BOOL)isLocal\n-{\n-    \/\/ The Command key masks out every operation other than NSDragOperationGeneric. We want\n-    \/\/ internal Move events to get through this filtering so we copy the Move bit into the\n-    \/\/ Generic bit and treat Generic as a synonym for Move.\n-    if (isLocal)\n-    {\n-        NSDragOperation result = self->dragOperation;\n-        if (result & NSDragOperationMove)\n-            result |= NSDragOperationGeneric;\n-        return result;\n-    }\n-    return self->dragOperation;\n-}\n-\n@@ -968,1 +954,1 @@\n-- (void)startDrag:(NSDragOperation)operation\n+- (void)startDrag:(NSDragOperation)operation withItems:(NSArray<NSDraggingItem*>*)items\n@@ -971,1 +957,3 @@\n-    self->dragOperation = operation;\n+\n+    \/\/ Set up frames for dragging items\n+    for (NSDraggingItem* item in items)\n@@ -974,1 +962,0 @@\n-        NSPasteboard *pasteboard = [NSPasteboard pasteboardWithName:NSDragPboard];\n@@ -976,0 +963,1 @@\n+        NSRect rect = [item draggingFrame];\n@@ -977,1 +965,4 @@\n-        if ([[pasteboard types] containsObject:DRAG_IMAGE_MIME]) {\n+        NSPasteboardItem *pbItem = (NSPasteboardItem*)[item item];\n+        NSArray<NSPasteboardType> *pbItemTypes = [pbItem types];\n+\n+        if ([pbItemTypes containsObject:DRAG_IMAGE_MIME]) {\n@@ -979,1 +970,1 @@\n-            image = [[NSImage alloc] initWithData:[pasteboard dataForType:DRAG_IMAGE_MIME]];\n+            image = [[NSImage alloc] initWithData:[pbItem dataForType:DRAG_IMAGE_MIME]];\n@@ -982,1 +973,1 @@\n-        if (image == nil && [NSImage canInitWithPasteboard:pasteboard] == YES)\n+        if (image == nil && [pbItemTypes containsObject:NSPasteboardTypeFileURL])\n@@ -984,2 +975,11 @@\n-            \/\/ ask the Pasteboard for ist own image representation of its contents\n-            image = [[NSImage alloc] initWithPasteboard:pasteboard];\n+            \/\/ create an image with contents of URL\n+            NSString *fileURL = [[NSString alloc] initWithData:[pbItem dataForType:NSPasteboardTypeFileURL] encoding:NSUTF8StringEncoding];\n+            [fileURL autorelease];\n+            image = [[NSImage alloc] initByReferencingFile:fileURL];\n+\n+            \/\/ this only works if we reference image files though, so make sure the image is valid\n+            if ([image isValid] == NO)\n+            {\n+                [image release];\n+                image = nil;\n+            }\n@@ -988,1 +988,1 @@\n-        if (image != nil)\n+        if (image == nil && [pbItemTypes containsObject:NSPasteboardTypeURL])\n@@ -990,4 +990,7 @@\n-            \/\/ check the drag image size and scale it down as needed using Safari behavior (sizes) as reference\n-            CGFloat width = [image size].width;\n-            CGFloat height = [image size].height;\n-            if ((width > MAX_DRAG_SIZE) || (height > MAX_DRAG_SIZE))\n+            \/\/ create an image with contents of URL\n+            NSString *url = [[NSString alloc] initWithData:[pbItem dataForType:NSPasteboardTypeURL] encoding:NSUTF8StringEncoding];\n+            [url autorelease];\n+            image = [[NSImage alloc] initByReferencingURL:[NSURL URLWithString:url]];\n+\n+            \/\/ same as with File URL, regular URL can also be invalid\n+            if ([image isValid] == NO)\n@@ -995,14 +998,2 @@\n-                if (width >= height)\n-                {\n-                    CGFloat ratio = height\/width;\n-                    width = MIN(width, MAX_DRAG_SIZE);\n-                    height = ratio * width;\n-                    [image setSize:NSMakeSize(width, height)];\n-                }\n-                else\n-                {\n-                    CGFloat ratio = width\/height;\n-                    height = MIN(height, MAX_DRAG_SIZE);\n-                    width = ratio * height;\n-                    [image setSize:NSMakeSize(width, height)];\n-                }\n+                [image release];\n+                image = nil;\n@@ -1010,2 +1001,4 @@\n-        } else {\n-            NSArray *items = [pasteboard pasteboardItems];\n+        }\n+\n+        if (image == nil)\n+        {\n@@ -1014,0 +1007,1 @@\n+                \/\/ with no custom MIME image default to generic document icon\n@@ -1016,2 +1010,1 @@\n-\n-            if (image == nil)\n+            else\n@@ -1019,0 +1012,1 @@\n+                \/\/ create multiple document image for more than one item in the clipboard\n@@ -1025,0 +1019,25 @@\n+        if (image != nil)\n+        {\n+            DNDLOG(\"created an image with dim %dx%d\", [image size].width, [image size].height);\n+            \/\/ check the drag image size and scale it down as needed using Safari behavior (sizes) as reference\n+            rect.size.width = [image size].width;\n+            rect.size.height = [image size].height;\n+            if ((rect.size.width > MAX_DRAG_SIZE) || (rect.size.height > MAX_DRAG_SIZE))\n+            {\n+                if (rect.size.width >= rect.size.height)\n+                {\n+                    CGFloat ratio = rect.size.height\/rect.size.width;\n+                    rect.size.width = MIN(rect.size.width, MAX_DRAG_SIZE);\n+                    rect.size.height = ratio * rect.size.width;\n+                    [image setSize:NSMakeSize(rect.size.width, rect.size.height)];\n+                }\n+                else\n+                {\n+                    CGFloat ratio = rect.size.width\/rect.size.height;\n+                    rect.size.height = MIN(rect.size.height, MAX_DRAG_SIZE);\n+                    rect.size.width = ratio * rect.size.height;\n+                    [image setSize:NSMakeSize(rect.size.width, rect.size.height)];\n+                }\n+            }\n+        }\n+\n@@ -1032,1 +1051,1 @@\n-            dragPoint.y += ([image size].height\/2.0f);\n+            dragPoint.y -= ([image size].height\/2.0f);\n@@ -1034,1 +1053,1 @@\n-            NSString *offsetString = [pasteboard stringForType:DRAG_IMAGE_OFFSET];\n+            NSString *offsetString = [pbItem stringForType:DRAG_IMAGE_OFFSET];\n@@ -1047,3 +1066,0 @@\n-\n-                dragPoint.x += offset.x;\n-                dragPoint.y -= offset.y;\n@@ -1055,1 +1071,3 @@\n-            image = [[NSImage alloc] initWithSize:NSMakeSize(1.0f, 1.0f)];\n+            rect.size.width = 1.0f;\n+            rect.size.height = 1.0f;\n+            image = [[NSImage alloc] initWithSize:NSMakeSize(rect.size.width, rect.size.height)];\n@@ -1057,5 +1075,0 @@\n-        [self->nsView dragImage:image at:dragPoint offset:NSZeroSize event:self->lastEvent pasteboard:pasteboard source:self->nsView slideBack:YES];\n-\n-        \/\/ main thread blocked here until drag completes\n-\n-        [GlassDragSource setDelegate:nil];\n@@ -1063,0 +1076,2 @@\n+        rect.origin = NSPointToCGPoint(dragPoint);\n+        [item setDraggingFrame:rect contents:image];\n@@ -1065,1 +1080,4 @@\n-    self->dragOperation = NSDragOperationNone;\n+\n+    self->draggingSource = [[GlassDraggingSource alloc] initWithOperation:operation];\n+\n+    NSDraggingSession *session = [self->nsView beginDraggingSessionWithItems:items event:self->lastEvent source:self->draggingSource];\n@@ -1086,0 +1104,10 @@\n+    DNDLOG(\"draggingEnded\");\n+\n+    if (self->draggingSource)\n+    {\n+        [self->draggingSource release];\n+        self->draggingSource = nil;\n+    }\n+\n+    [GlassDragSource setDelegate:nil];\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassViewDelegate.m","additions":86,"deletions":58,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-                new Label(\"3. Click on \\\"DRAG ME\\\" and drop on \\\"DROP HERE\\\"\\n pressing SHIFT.\"),\n+                new Label(\"3. Click on \\\"DRAG ME\\\" and drop on \\\"DROP HERE\\\"\\n pressing SHIFT (Cmd on Mac).\"),\n","filename":"tests\/manual\/dnd\/DndTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+ import javafx.application.Application;\n+ import javafx.scene.Group;\n+ import javafx.scene.Node;\n+ import javafx.scene.Scene;\n+ import javafx.scene.control.Label;\n+ import javafx.scene.input.Dragboard;\n+ import javafx.scene.input.ClipboardContent;\n+ import javafx.scene.input.TransferMode;\n+ import javafx.scene.layout.VBox;\n+ import javafx.scene.paint.Color;\n+ import javafx.scene.text.Text;\n+ import javafx.stage.Stage;\n+\n+ import java.io.File;\n+ import java.io.FileReader;\n+ import java.io.FileWriter;\n+ import java.io.BufferedReader;\n+ import java.util.List;\n+\n+\n+ public class DndTestMultiple extends Application {\n+     private String TEST_STRING_1 = \"test_string_1\";\n+     private String TEST_STRING_2 = \"test_string_2\";\n+\n+\n+     @Override\n+     public void start(Stage stage) {\n+         stage.setTitle(\"Drag And Drop Multiple Test\");\n+\n+         final Text source = new Text(50, 100, \"DRAG ME\");\n+         source.setScaleX(2.0);\n+         source.setScaleY(2.0);\n+\n+         final Text target = new Text(250, 100, \"DROP HERE\");\n+         target.setScaleX(2.0);\n+         target.setScaleY(2.0);\n+\n+         Group group = new Group();\n+\n+         VBox root = new VBox(3,\n+                 new Label(\"Drag and drop from DRAG ME onto DROP HERE.\"),\n+                 new Label(\"If DROP HERE changes to SUCCESS the test passed\"),\n+                 new Label(\"\"),\n+                 group);\n+\n+         Scene scene = new Scene(root, 400, 200);\n+\n+         source.setOnDragDetected(event -> {\n+             File f1, f2;\n+\n+             try {\n+                 \/\/ create test files for dnd operation\n+                 f1 = File.createTempFile(\"dnd_test_file_1\", \".txt\");\n+                 f1.deleteOnExit();\n+\n+                 f2 = File.createTempFile(\"dnd_test_file_2\", \".txt\");\n+                 f2.deleteOnExit();\n+\n+                 FileWriter fw = new FileWriter(f1);\n+                 fw.write(TEST_STRING_1);\n+                 fw.close();\n+\n+                 fw = new FileWriter(f2);\n+                 fw.write(TEST_STRING_2);\n+                 fw.close();\n+             } catch (Exception e) {\n+                 target.setText(\"Failed to start DND - Exception caught: \" + e.getMessage());\n+                 return;\n+             }\n+\n+             List<File> files = List.of(f1, f2);\n+             Dragboard dragBoard = ((Node)event.getSource()).startDragAndDrop(TransferMode.ANY);\n+\n+             ClipboardContent content = new ClipboardContent();\n+             content.putFiles(files);\n+             dragBoard.setContent(content);\n+\n+             event.consume();\n+         });\n+\n+         target.setOnDragOver(event -> {\n+             if (event.getGestureSource() != target &&\n+                     event.getDragboard().hasFiles()) {\n+                 event.acceptTransferModes(TransferMode.COPY_OR_MOVE);\n+             }\n+\n+             event.consume();\n+         });\n+\n+         target.setOnDragEntered(event -> {\n+             if (event.getGestureSource() != target &&\n+                     event.getDragboard().hasFiles()) {\n+                 target.setFill(Color.GREEN);\n+             }\n+\n+             event.consume();\n+         });\n+\n+         target.setOnDragExited(event -> {\n+             target.setFill(Color.BLACK);\n+\n+             event.consume();\n+         });\n+\n+         target.setOnDragDropped(event -> {\n+             Dragboard db = event.getDragboard();\n+             boolean success = true;\n+             if (db.hasFiles()) {\n+                 List<File> files = db.getFiles();\n+\n+                 try {\n+                     BufferedReader reader = new BufferedReader(new FileReader(files.get(0)));\n+                     String result = reader.readLine();\n+                     reader.close();\n+                     if (!result.contains(TEST_STRING_1)) {\n+                         target.setText(\"FAILED - file 1 contents invalid\");\n+                         success = false;\n+                     }\n+\n+                     reader = new BufferedReader(new FileReader(files.get(1)));\n+                     result = reader.readLine();\n+                     reader.close();\n+                     if (!result.contains(TEST_STRING_2)) {\n+                         target.setText(\"FAILED - file 2 contents invalid\");\n+                         success = false;\n+                     }\n+                 } catch (Exception e) {\n+                     target.setText(\"FAILED: \" + e.getMessage());\n+                     success = false;\n+                 }\n+             }\n+\n+             if (success) {\n+                 target.setText(\"SUCCESS\");\n+             }\n+\n+             event.setDropCompleted(success);\n+             event.consume();\n+         });\n+\n+         source.setOnDragDone(event -> {\n+             if (event.getTransferMode() == TransferMode.MOVE) {\n+                 source.setText(\"\");\n+             }\n+\n+             event.consume();\n+         });\n+\n+         group.getChildren().add(source);\n+         group.getChildren().add(target);\n+\n+         stage.setScene(scene);\n+         stage.show();\n+     }\n+\n+     public static void main(String[] args) {\n+         Application.launch(args);\n+     }\n+ }\n","filename":"tests\/manual\/dnd\/DndTestMultiple.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"}]}