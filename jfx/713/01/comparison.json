{"files":[{"patch":"@@ -151,0 +151,1 @@\n+        List<Mnemonic> mnemonics = new ArrayList<>();\n@@ -154,0 +155,4 @@\n+\n+                \/\/ We only need to remove the mnemonics from the old scene,\n+                \/\/ they will be added to the new one as soon as the popup becomes visible again.\n+                removeMnemonicsFromScene(mnemonics, oldValue);\n@@ -156,1 +161,1 @@\n-             \/\/ FIXME: null skinnable should not happen\n+            \/\/ FIXME: null skinnable should not happen\n@@ -184,1 +189,0 @@\n-        List<Mnemonic> mnemonics = new ArrayList<>();\n@@ -204,3 +208,4 @@\n-                List<Mnemonic> mnemonicsToRemove = new ArrayList<>(mnemonics);\n-                mnemonics.clear();\n-                Platform.runLater(() -> mnemonicsToRemove.forEach(scene::removeMnemonic));\n+                \/\/ JDK-8244234: MenuButton: NPE on removing from scene with open popup\n+                if (scene != null) {\n+                    removeMnemonicsFromScene(mnemonics, scene);\n+                }\n@@ -314,0 +319,6 @@\n+    private void removeMnemonicsFromScene(List<Mnemonic> mnemonics, Scene scene) {\n+        List<Mnemonic> mnemonicsToRemove = new ArrayList<>(mnemonics);\n+        mnemonics.clear();\n+        Platform.runLater(() -> mnemonicsToRemove.forEach(scene::removeMnemonic));\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/MenuButtonSkinBase.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.skin;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.scene.Scene;\n+import javafx.scene.control.MenuButton;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.skin.MenuButtonSkinBase;\n+import javafx.scene.input.Mnemonic;\n+import javafx.stage.Stage;\n+\n+public class MenuButtonSkinBaseTest {\n+\n+    private MenuButton menubutton;\n+    private MenuItem menuItem;\n+\n+    @Before\n+    public void setup() {\n+        menubutton = new MenuButton();\n+        menuItem = new MenuItem(\"Menu Item\");\n+        menubutton.getItems().add(menuItem);\n+        menubutton.setSkin(new MenuButtonSkinBase<>(menubutton));\n+    }\n+\n+    @Test\n+    public void testNoNullPointerOnRemovingFromTheSceneWhilePopupIsShowing() {\n+        Thread.UncaughtExceptionHandler originalExceptionHandler = Thread.currentThread().getUncaughtExceptionHandler();\n+\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> {\n+            Assert.fail(\"No exception expected, but was a \" + e);\n+            e.printStackTrace();\n+        });\n+\n+        try {\n+            Scene scene = new Scene(menubutton);\n+            Stage stage = new Stage();\n+            stage.setScene(scene);\n+            stage.show();\n+\n+            menubutton.show();\n+            menuItem.setOnAction(e -> scene.setRoot(new MenuButton()));\n+            menuItem.fire();\n+\n+        } finally {\n+            Thread.currentThread().setUncaughtExceptionHandler(originalExceptionHandler);\n+        }\n+    }\n+\n+    @Test\n+    public void testMnemonicsRemovedOnRemovingFromTheSceneWhilePopupIsShowing() {\n+        menuItem.setText(\"_Menu Item\");\n+        menuItem.setMnemonicParsing(true);\n+\n+        ObjectProperty<Mnemonic> menuItemMnemonic = new SimpleObjectProperty<>();\n+\n+        Scene scene = new Scene(menubutton) {\n+            @Override\n+            public void addMnemonic(Mnemonic m) {\n+                if (menuItemMnemonic.get() != null) {\n+                    \/\/ The test is designed for only one mnemonic.\n+                    Assert.fail(\"Test failure: More than one Mnemonic registered.\");\n+                }\n+                menuItemMnemonic.set(m);\n+                super.addMnemonic(m);\n+            }\n+\n+            @Override\n+            public void removeMnemonic(Mnemonic m) {\n+                if (m == menuItemMnemonic.get()) {\n+                    menuItemMnemonic.set(null);\n+                }\n+                super.removeMnemonic(m);\n+            }\n+        };\n+        Stage stage = new Stage();\n+        stage.setScene(scene);\n+        stage.show();\n+\n+        menubutton.show();\n+        menuItem.setOnAction(e -> scene.setRoot(new MenuButton()));\n+        menuItem.fire();\n+\n+        Assert.assertNull(\"Mnemonic was not removed from the scene,\", menuItemMnemonic.get());\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/MenuButtonSkinBaseTest.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}