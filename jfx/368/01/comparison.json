{"files":[{"patch":"@@ -32,1 +32,1 @@\n-error=blacklist,author,reviewers,merge,message,issues,whitespace,executable\n+error=author,reviewers,merge,message,issues,whitespace,executable\n","filename":".jcheck\/conf","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-\/\/ Merge the Apache Lucene jars into our master jar.\n+\/\/ Merge the Apache Lucene jars into our main jar.\n","filename":"apps\/samples\/Ensemble8\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,4 +57,2 @@\n- * The method getHudsonJobName() will returns the name of the hudson job.\n- * For example, a master build will have the name as \"presidio\", and a\n- * graphics-scrum will have the name as \"presidio-graphics\" and so for.\n- * An empty string is returned if the build isn't build on Hudson, such as a\n+ * The method getHudsonJobName() returns the name of the Hudson job.\n+ * An empty string is returned if the build isn't built on Hudson, such as a\n@@ -63,6 +61,3 @@\n- * The method getHudsonBuildNumber() will returns the number of the hudson job\n- * on a particular build scrum. The job number is sequentially incremented for\n- * each build job.\n- * For example, a master build job number of 25 was built before master job\n- * number 26.\n- * A string of zeros is returned if the build isn't build on Hudson, such as a\n+ * The method getHudsonBuildNumber() returns the number of the Hudson build\n+ * for a particular job.\n+ * A string of zeros is returned if the build isn't built on Hudson, such as a\n","filename":"modules\/javafx.base\/src\/main\/version-info\/VersionInfo.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -106,3 +106,3 @@\n-        float masterTvals[] = mergeTvals(tvals0, tvals1);\n-        geom0.setTvals(masterTvals);\n-        geom1.setTvals(masterTvals);\n+        float combinedTvals[] = mergeTvals(tvals0, tvals1);\n+        geom0.setTvals(combinedTvals);\n+        geom1.setTvals(combinedTvals);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/ShapeEvaluator.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-import com.sun.scenario.animation.AbstractMasterTimer;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n@@ -285,1 +285,1 @@\n-    public AbstractMasterTimer getMasterTimer() {\n+    public AbstractPrimaryTimer getPrimaryTimer() {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/DummyToolkit.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-import com.sun.scenario.animation.AbstractMasterTimer;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n@@ -718,1 +718,1 @@\n-    public abstract AbstractMasterTimer getMasterTimer();\n+    public abstract AbstractPrimaryTimer getPrimaryTimer();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/Toolkit.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,122 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.javafx.tk.quantum;\n-\n-import java.util.Map;\n-import javafx.animation.Timeline;\n-import com.sun.javafx.tk.Toolkit;\n-import com.sun.scenario.DelayedRunnable;\n-import com.sun.scenario.Settings;\n-import com.sun.scenario.animation.AbstractMasterTimer;\n-import com.sun.scenario.animation.AnimationPulse;\n-\n-\/**\n- * This class encapsulates the global static methods that manage scheduling and\n- * actual running of animations against real wall clock time. It only deals in\n- * absolute time values - all relative times that are specified in the\n- * {@link Timeline} class will need to be turned into absolute times when the\n- * {@code Timeline} objects are started.\n- *\n- * For now it is hidden until we have some use to expose it.\n- *\/\n-public final class MasterTimer extends AbstractMasterTimer {\n-\n-    \/** Prevent external instantiation of MasterTimer *\/\n-    private MasterTimer() {\n-    }\n-\n-    private static final Object MASTER_TIMER_KEY = new StringBuilder(\n-            \"MasterTimerKey\");\n-\n-    public static synchronized MasterTimer getInstance() {\n-        Map<Object, Object> contextMap = Toolkit.getToolkit().getContextMap();\n-        MasterTimer instance = (MasterTimer) contextMap.get(MASTER_TIMER_KEY);\n-        if (instance == null) {\n-            instance = new MasterTimer();\n-            contextMap.put(MASTER_TIMER_KEY, instance);\n-            if (Settings.getBoolean(ANIMATION_MBEAN_ENABLED,\n-                                    enableAnimationMBean)) {\n-                AnimationPulse.getDefaultBean().setEnabled(true);\n-            }\n-        }\n-        return instance;\n-    }\n-\n-    \/*\n-     * Called to set the value of PULSE_DURATION or PULSE_DURATION_NS based on\n-     * the refresh rate of the primary screen (unless overridden by the\n-     * FRAMERATE_PROP Setting). If the refresh rate can not be determined the\n-     * default of 60hz is used.\n-     *\n-     * @param precision - precision in (1000 for ms or 1000000000 for ns)\n-     *\n-     * @return pulse duration value, either in ms or ns depending on the\n-     * parameter.\n-     *\/\n-    protected int getPulseDuration(int precision) {\n-        int retVal = precision \/ 60;\n-        \/\/ Allow Setting to override monitor refresh\n-        if (Settings.get(FRAMERATE_PROP) != null) {\n-            int overrideHz = Settings.getInt(FRAMERATE_PROP, 60);\n-            if (overrideHz > 0) {\n-                retVal = precision \/ overrideHz;\n-            }\n-        } else if (Settings.get(PULSE_PROP) != null) {\n-            int overrideHz = Settings.getInt(PULSE_PROP, 60);\n-            if (overrideHz > 0) {\n-                retVal = precision \/ overrideHz;\n-            }\n-        } else {\n-            \/\/ If not explicitly set in Settings, try to set based on\n-            \/\/ refresh rate of display\n-            int rate = Toolkit.getToolkit().getRefreshRate();\n-            if (rate > 0) {\n-                retVal = precision \/ rate;\n-            }\n-            \/\/ if unknown, use default\n-        }\n-        return retVal;\n-    }\n-\n-    protected void postUpdateAnimationRunnable(DelayedRunnable animationRunnable) {\n-        Toolkit.getToolkit().setAnimationRunnable(animationRunnable);\n-    }\n-\n-    @Override\n-    protected void recordStart(long shiftMillis) {\n-        AnimationPulse.getDefaultBean().recordStart(shiftMillis);\n-    }\n-\n-    @Override\n-    protected void recordEnd() {\n-        AnimationPulse.getDefaultBean().recordEnd();\n-    }\n-\n-    @Override\n-    protected void recordAnimationEnd() {\n-        AnimationPulse.getDefaultBean().recordAnimationEnd();\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/MasterTimer.java","additions":0,"deletions":122,"binary":false,"changes":122,"status":"deleted"},{"patch":"@@ -93,1 +93,1 @@\n-        return Toolkit.getToolkit().getMasterTimer().nanos();\n+        return Toolkit.getToolkit().getPrimaryTimer().nanos();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/PerformanceTrackerHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.tk.quantum;\n+\n+import java.util.Map;\n+import javafx.animation.Timeline;\n+import com.sun.javafx.tk.Toolkit;\n+import com.sun.scenario.DelayedRunnable;\n+import com.sun.scenario.Settings;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n+import com.sun.scenario.animation.AnimationPulse;\n+\n+\/**\n+ * This class encapsulates the global static methods that manage scheduling and\n+ * actual running of animations against real wall clock time. It only deals in\n+ * absolute time values - all relative times that are specified in the\n+ * {@link Timeline} class will need to be turned into absolute times when the\n+ * {@code Timeline} objects are started.\n+ *\n+ * For now it is hidden until we have some use to expose it.\n+ *\/\n+public final class PrimaryTimer extends AbstractPrimaryTimer {\n+\n+    \/** Prevent external instantiation of PrimaryTimer *\/\n+    private PrimaryTimer() {\n+    }\n+\n+    private static final Object PRIMARY_TIMER_KEY = new StringBuilder(\n+            \"PrimaryTimerKey\");\n+\n+    public static synchronized PrimaryTimer getInstance() {\n+        Map<Object, Object> contextMap = Toolkit.getToolkit().getContextMap();\n+        PrimaryTimer instance = (PrimaryTimer) contextMap.get(PRIMARY_TIMER_KEY);\n+        if (instance == null) {\n+            instance = new PrimaryTimer();\n+            contextMap.put(PRIMARY_TIMER_KEY, instance);\n+            if (Settings.getBoolean(ANIMATION_MBEAN_ENABLED,\n+                                    enableAnimationMBean)) {\n+                AnimationPulse.getDefaultBean().setEnabled(true);\n+            }\n+        }\n+        return instance;\n+    }\n+\n+    \/*\n+     * Called to set the value of PULSE_DURATION or PULSE_DURATION_NS based on\n+     * the refresh rate of the primary screen (unless overridden by the\n+     * FRAMERATE_PROP Setting). If the refresh rate can not be determined the\n+     * default of 60hz is used.\n+     *\n+     * @param precision - precision in (1000 for ms or 1000000000 for ns)\n+     *\n+     * @return pulse duration value, either in ms or ns depending on the\n+     * parameter.\n+     *\/\n+    protected int getPulseDuration(int precision) {\n+        int retVal = precision \/ 60;\n+        \/\/ Allow Setting to override monitor refresh\n+        if (Settings.get(FRAMERATE_PROP) != null) {\n+            int overrideHz = Settings.getInt(FRAMERATE_PROP, 60);\n+            if (overrideHz > 0) {\n+                retVal = precision \/ overrideHz;\n+            }\n+        } else if (Settings.get(PULSE_PROP) != null) {\n+            int overrideHz = Settings.getInt(PULSE_PROP, 60);\n+            if (overrideHz > 0) {\n+                retVal = precision \/ overrideHz;\n+            }\n+        } else {\n+            \/\/ If not explicitly set in Settings, try to set based on\n+            \/\/ refresh rate of display\n+            int rate = Toolkit.getToolkit().getRefreshRate();\n+            if (rate > 0) {\n+                retVal = precision \/ rate;\n+            }\n+            \/\/ if unknown, use default\n+        }\n+        return retVal;\n+    }\n+\n+    protected void postUpdateAnimationRunnable(DelayedRunnable animationRunnable) {\n+        Toolkit.getToolkit().setAnimationRunnable(animationRunnable);\n+    }\n+\n+    @Override\n+    protected void recordStart(long shiftMillis) {\n+        AnimationPulse.getDefaultBean().recordStart(shiftMillis);\n+    }\n+\n+    @Override\n+    protected void recordEnd() {\n+        AnimationPulse.getDefaultBean().recordEnd();\n+    }\n+\n+    @Override\n+    protected void recordAnimationEnd() {\n+        AnimationPulse.getDefaultBean().recordAnimationEnd();\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/PrimaryTimer.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -128,1 +128,1 @@\n-import com.sun.scenario.animation.AbstractMasterTimer;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n@@ -368,1 +368,1 @@\n-            if (getMasterTimer().isFullspeed()) {\n+            if (getPrimaryTimer().isFullspeed()) {\n@@ -1132,2 +1132,2 @@\n-    @Override public AbstractMasterTimer getMasterTimer() {\n-        return MasterTimer.getInstance();\n+    @Override public AbstractPrimaryTimer getPrimaryTimer() {\n+        return PrimaryTimer.getInstance();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/QuantumToolkit.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    private GLGPUInfo blackList[] = null;\n+    private GLGPUInfo rejectList[] = null;\n@@ -53,2 +53,2 @@\n-    GLGPUInfo[] getBlackList() {\n-        return blackList;\n+    GLGPUInfo[] getRejectList() {\n+        return rejectList;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/EGLFBGLFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    private GLGPUInfo blackList[] = null;\n+    private GLGPUInfo rejectList[] = null;\n@@ -53,2 +53,2 @@\n-    GLGPUInfo[] getBlackList() {\n-        return blackList;\n+    GLGPUInfo[] getRejectList() {\n+        return rejectList;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/EGLX11GLFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -136,2 +136,2 @@\n-    \/\/ Consists of a list of GPUs that we will block from using the es2 pipe.\n-    abstract GLGPUInfo[] getBlackList();\n+    \/\/ Consists of a list of GPUs that we will not use for the es2 pipe.\n+    abstract GLGPUInfo[] getRejectList();\n@@ -166,2 +166,2 @@\n-    private boolean inBlackList(GLGPUInfo gpuInfo) {\n-        return matches(gpuInfo, getBlackList());\n+    private boolean inRejectList(GLGPUInfo gpuInfo) {\n+        return matches(gpuInfo, getRejectList());\n@@ -172,2 +172,1 @@\n-        \/\/ checking against the preQualificationFilter and the \"blocking\"\n-        \/\/ blackLis.\n+        \/\/ checking against the preQualificationFilter and the rejectList.\n@@ -184,1 +183,1 @@\n-        return inPreQualificationFilter(gpuInfo) && !inBlackList(gpuInfo);\n+        return inPreQualificationFilter(gpuInfo) && !inRejectList(gpuInfo);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/GLFactory.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -43,2 +43,2 @@\n-     * Check this GPU information against an entry stored in the whiteList and\n-     * blackList of ES2Qualifier\n+     * Check this GPU information against an entry stored in the preQualificationFilter and\n+     * rejectList of ES2Qualifier\n@@ -46,1 +46,1 @@\n-     * @param gi entry stored in the whiteList or blackList of ES2Qualifier\n+     * @param gi entry stored in the preQualificationFilter or rejectList of ES2Qualifier\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/GLGPUInfo.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    private GLGPUInfo blackList[] = {\n+    private GLGPUInfo rejectList[] = {\n@@ -49,2 +49,2 @@\n-    GLGPUInfo[] getBlackList() {\n-        return blackList;\n+    GLGPUInfo[] getRejectList() {\n+        return rejectList;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/IOSGLFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    private GLGPUInfo blackList[] = {\n+    private GLGPUInfo rejectList[] = {\n@@ -54,2 +54,2 @@\n-    GLGPUInfo[] getBlackList() {\n-        return blackList;\n+    GLGPUInfo[] getRejectList() {\n+        return rejectList;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/MacGLFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    private GLGPUInfo blackList[] = null;\n+    private GLGPUInfo rejectList[] = null;\n@@ -59,2 +59,2 @@\n-    GLGPUInfo[] getBlackList() {\n-        return blackList;\n+    GLGPUInfo[] getRejectList() {\n+        return rejectList;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/MonocleGLFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    private GLGPUInfo blackList[] = null;\n+    private GLGPUInfo rejectList[] = null;\n@@ -48,2 +48,2 @@\n-    GLGPUInfo[] getBlackList() {\n-        return blackList;\n+    GLGPUInfo[] getRejectList() {\n+        return rejectList;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/WinGLFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    private GLGPUInfo blackList[] = {\n+    private GLGPUInfo rejectList[] = {\n@@ -100,2 +100,2 @@\n-    GLGPUInfo[] getBlackList() {\n-        return blackList;\n+    GLGPUInfo[] getRejectList() {\n+        return rejectList;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/X11GLFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        \/\/ It seems no longer necessary to force loading of MasterTimer to pick\n+        \/\/ It seems no longer necessary to force loading of PrimaryTimer to pick\n@@ -58,1 +58,1 @@\n-        \/\/ Object obj = ToolkitAccessor.getMasterTimer();\n+        \/\/ Object obj = ToolkitAccessor.getPrimaryTimer();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/scenario\/Settings.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-public abstract class AbstractMasterTimer {\n+public abstract class AbstractPrimaryTimer {\n@@ -108,1 +108,1 @@\n-    private final MainLoop theMaster = new MainLoop();\n+    private final MainLoop theMainLoop = new MainLoop();\n@@ -151,2 +151,1 @@\n-    \/** Prevent external instantiation of MasterTimer. *\/\n-    protected AbstractMasterTimer() {\n+    protected AbstractPrimaryTimer() {\n@@ -161,1 +160,1 @@\n-     * Note that pulseReceiver cannot be removed from the MasterTimer directly.\n+     * Note that pulseReceiver cannot be removed from the PrimaryTimer directly.\n@@ -176,1 +175,1 @@\n-            theMaster.updateAnimationRunnable();\n+            theMainLoop.updateAnimationRunnable();\n@@ -198,1 +197,1 @@\n-            theMaster.updateAnimationRunnable();\n+            theMainLoop.updateAnimationRunnable();\n@@ -210,1 +209,1 @@\n-            theMaster.updateAnimationRunnable();\n+            theMainLoop.updateAnimationRunnable();\n@@ -232,1 +231,1 @@\n-            theMaster.updateAnimationRunnable();\n+            theMainLoop.updateAnimationRunnable();\n@@ -238,1 +237,1 @@\n-     * MasterTimer to collect data for AnimationPulse Mbean\n+     * PrimaryTimer to collect data for AnimationPulse Mbean\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/scenario\/animation\/AbstractPrimaryTimer.java","additions":9,"deletions":10,"binary":false,"changes":19,"previous_filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/scenario\/animation\/AbstractMasterTimer.java","status":"renamed"},{"patch":"@@ -57,1 +57,1 @@\n-            startNanos = Toolkit.getToolkit().getMasterTimer().nanos();\n+            startNanos = Toolkit.getToolkit().getPrimaryTimer().nanos();\n@@ -67,1 +67,1 @@\n-            animationEndNanos = Toolkit.getToolkit().getMasterTimer().nanos();\n+            animationEndNanos = Toolkit.getToolkit().getPrimaryTimer().nanos();\n@@ -95,1 +95,1 @@\n-            endNanos = Toolkit.getToolkit().getMasterTimer().nanos();\n+            endNanos = Toolkit.getToolkit().getPrimaryTimer().nanos();\n@@ -109,1 +109,1 @@\n-            return unit.convert(Toolkit.getToolkit().getMasterTimer().nanos() - startNanos,\n+            return unit.convert(Toolkit.getToolkit().getPrimaryTimer().nanos() - startNanos,\n@@ -175,1 +175,1 @@\n-        return Toolkit.getToolkit().getMasterTimer().getPulseDuration(1000);\n+        return Toolkit.getToolkit().getPrimaryTimer().getPulseDuration(1000);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/scenario\/animation\/AnimationPulse.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n- * A PulseReceiver can receive regular pulses from the MasterTimer. Removing\n- * receivers from the MasterTimer needs to be in-sync with the\n+ * A PulseReceiver can receive regular pulses from the PrimaryTimer. Removing\n+ * receivers from the PrimaryTimer needs to be in-sync with the\n@@ -42,1 +42,1 @@\n-     * @return true if PulseReceiver should be removed from the MasterTimer.\n+     * @return true if PulseReceiver should be removed from the PrimaryTimer.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/scenario\/animation\/shared\/PulseReceiver.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * A TimerReceiver receives per-frame pulses from the MasterTimer.\n+ * A TimerReceiver receives per-frame pulses from the PrimaryTimer.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/scenario\/animation\/shared\/TimerReceiver.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-import com.sun.scenario.animation.AbstractMasterTimer;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n@@ -152,1 +152,1 @@\n-    private final AbstractMasterTimer timer;\n+    private final AbstractPrimaryTimer timer;\n@@ -155,1 +155,1 @@\n-    \/\/ the master timer (which is called when an animation is played or resumed)\n+    \/\/ the PrimaryTimer (which is called when an animation is played or resumed)\n@@ -1136,1 +1136,1 @@\n-        this.timer = Toolkit.getToolkit().getMasterTimer();\n+        this.timer = Toolkit.getToolkit().getPrimaryTimer();\n@@ -1144,1 +1144,1 @@\n-        this.targetFramerate = TickCalculation.TICKS_PER_SECOND \/ Toolkit.getToolkit().getMasterTimer().getDefaultResolution();\n+        this.targetFramerate = TickCalculation.TICKS_PER_SECOND \/ Toolkit.getToolkit().getPrimaryTimer().getDefaultResolution();\n@@ -1146,1 +1146,1 @@\n-        this.timer = Toolkit.getToolkit().getMasterTimer();\n+        this.timer = Toolkit.getToolkit().getPrimaryTimer();\n@@ -1150,1 +1150,1 @@\n-    Animation(AbstractMasterTimer timer) {\n+    Animation(AbstractPrimaryTimer timer) {\n@@ -1158,1 +1158,1 @@\n-    Animation(AbstractMasterTimer timer, ClipEnvelope clipEnvelope, int resolution) {\n+    Animation(AbstractPrimaryTimer timer, ClipEnvelope clipEnvelope, int resolution) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/animation\/Animation.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import com.sun.scenario.animation.AbstractMasterTimer;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n@@ -63,1 +63,1 @@\n-    private final AbstractMasterTimer timer;\n+    private final AbstractPrimaryTimer timer;\n@@ -74,1 +74,1 @@\n-        timer = Toolkit.getToolkit().getMasterTimer();\n+        timer = Toolkit.getToolkit().getPrimaryTimer();\n@@ -78,1 +78,1 @@\n-    AnimationTimer(AbstractMasterTimer timer) {\n+    AnimationTimer(AbstractPrimaryTimer timer) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/animation\/AnimationTimer.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-import com.sun.scenario.animation.AbstractMasterTimer;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n@@ -300,1 +300,1 @@\n-    ParallelTransition(AbstractMasterTimer timer) {\n+    ParallelTransition(AbstractPrimaryTimer timer) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/animation\/ParallelTransition.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-import com.sun.scenario.animation.AbstractMasterTimer;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n@@ -307,1 +307,1 @@\n-    SequentialTransition(AbstractMasterTimer timer) {\n+    SequentialTransition(AbstractPrimaryTimer timer) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/animation\/SequentialTransition.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import com.sun.scenario.animation.AbstractMasterTimer;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n@@ -165,1 +165,1 @@\n-    Timeline(final AbstractMasterTimer timer) {\n+    Timeline(final AbstractPrimaryTimer timer) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/animation\/Timeline.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import com.sun.scenario.animation.AbstractMasterTimer;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n@@ -151,1 +151,1 @@\n-    Transition(AbstractMasterTimer timer) {\n+    Transition(AbstractPrimaryTimer timer) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/animation\/Transition.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-static UIView      * dragViewParent;\/\/ parental UIView of all GlassWindows (aka masterHostView); do not retain\n+static UIView      * dragViewParent;\/\/ parental UIView of all GlassWindows (aka mainHostView); do not retain\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/ios\/GlassDragDelegate.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -310,1 +310,1 @@\n-     touch = [[UITouch alloc] initInView:[GlassWindow getMasterWindowHost] :touchLocation];\n+     touch = [[UITouch alloc] initInView:[GlassWindow getMainWindowHost] :touchLocation];\n@@ -366,1 +366,1 @@\n-    CGFloat scale = [GlassWindow getMasterWindowHost].contentScaleFactor;\n+    CGFloat scale = [GlassWindow getMainWindowHost].contentScaleFactor;\n@@ -415,1 +415,1 @@\n-    UIView *subview = [[[GlassWindow getMasterWindowHost] subviews] objectAtIndex:0];\n+    UIView *subview = [[[GlassWindow getMainWindowHost] subviews] objectAtIndex:0];\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/ios\/GlassRobot.m","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -744,1 +744,1 @@\n-    [[GlassWindow getMasterWindow] resignFocusOwner];\n+    [[GlassWindow getMainWindow] resignFocusOwner];\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/ios\/GlassViewDelegate.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n-\/\/ once we support multiple screens on iOS - there will be one masterWindow\/\n-\/\/ masterWindowHost per screen; These windows are not part of FX\/Glass window hierarchy, they\n+\/\/ once we support multiple screens on iOS - there will be one mainWindow\/\n+\/\/ mainWindowHost per screen; These windows are not part of FX\/Glass window hierarchy, they\n@@ -78,2 +78,2 @@\n-+(GlassMainWindow *)  getMasterWindow;\n-+(GlassMainView *) getMasterWindowHost;\n++(GlassMainWindow *)  getMainWindow;\n++(GlassMainView *) getMainWindowHost;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/ios\/GlassWindow.h","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -108,4 +108,4 @@\n-\/\/once we support multiple screens on iOS - there will be one masterWindow\/\n-\/\/masterWindowHost per screen\n-static GlassMainWindow * masterWindow = nil;\n-static GlassMainView * masterWindowHost = nil;\n+\/\/once we support multiple screens on iOS - there will be one mainWindow\/\n+\/\/mainWindowHost per screen\n+static GlassMainWindow * mainWindow = nil;\n+static GlassMainView * mainWindowHost = nil;\n@@ -209,2 +209,2 @@\n-+(GlassMainWindow *)  getMasterWindow {\n-    return masterWindow;\n++(GlassMainWindow *)  getMainWindow {\n+    return mainWindow;\n@@ -213,2 +213,2 @@\n-+(GlassMainView *) getMasterWindowHost {\n-    return masterWindowHost;\n++(GlassMainView *) getMainWindowHost {\n+    return mainWindowHost;\n@@ -286,2 +286,2 @@\n-    [masterWindowHost release];\n-    [masterWindow release];\/\/decrease retaincount\n+    [mainWindowHost release];\n+    [mainWindow release];\/\/decrease retaincount\n@@ -831,1 +831,1 @@\n-        if (masterWindow == nil) {\n+        if (mainWindow == nil) {\n@@ -841,2 +841,2 @@\n-            masterWindow = [[GlassMainWindow alloc] initWithFrame:applicationFrame];\n-            masterWindowHost = [[GlassMainView alloc] initWithFrame:CGRectMake(0.0, 0.0, applicationFrame.size.width, applicationFrame.size.height)];\n+            mainWindow = [[GlassMainWindow alloc] initWithFrame:applicationFrame];\n+            mainWindowHost = [[GlassMainView alloc] initWithFrame:CGRectMake(0.0, 0.0, applicationFrame.size.width, applicationFrame.size.height)];\n@@ -846,2 +846,2 @@\n-            [rvc setView:masterWindowHost];\n-            [masterWindow setRootViewController:rvc];\n+            [rvc setView:mainWindowHost];\n+            [mainWindow setRootViewController:rvc];\n@@ -850,2 +850,2 @@\n-            [masterWindow setHidden:NO];\n-            [masterWindowHost setHidden:NO];\n+            [mainWindow setHidden:NO];\n+            [mainWindowHost setHidden:NO];\n@@ -853,2 +853,2 @@\n-            masterWindow = [masterWindow retain];\/\/increase retain count per each GlassWindow\n-            masterWindowHost = [masterWindowHost retain];\n+            mainWindow = [mainWindow retain];\/\/increase retain count per each GlassWindow\n+            mainWindowHost = [mainWindowHost retain];\n@@ -857,2 +857,2 @@\n-        [masterWindow setAutoresizesSubviews:YES];\n-        [masterWindowHost setAutoresizesSubviews:NO];\n+        [mainWindow setAutoresizesSubviews:YES];\n+        [mainWindowHost setAutoresizesSubviews:NO];\n@@ -860,1 +860,1 @@\n-        [masterWindow makeKeyWindow];\n+        [mainWindow makeKeyWindow];\n@@ -883,1 +883,1 @@\n-        [masterWindowHost addSubview:window];\n+        [mainWindowHost addSubview:window];\n@@ -890,1 +890,1 @@\n-            NSArray *views = [masterWindowHost subviews];\n+            NSArray *views = [mainWindowHost subviews];\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/ios\/GlassWindow.m","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.scenario.animation;\n-\n-public class AbstractMasterTimerShim {\n-\n-    public static boolean isPaused(AbstractMasterTimer amt) {\n-        return amt.isPaused();\n-    }\n-\n-    public static long getTotalPausedTime(AbstractMasterTimer amt) {\n-        return amt.getTotalPausedTime();\n-    }\n-\n-    public static long getStartPauseTime(AbstractMasterTimer amt) {\n-        return amt.getStartPauseTime();\n-    }\n-\n-}\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/com\/sun\/scenario\/animation\/AbstractMasterTimerShim.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.scenario.animation;\n+\n+public class AbstractPrimaryTimerShim {\n+\n+    public static boolean isPaused(AbstractPrimaryTimer amt) {\n+        return amt.isPaused();\n+    }\n+\n+    public static long getTotalPausedTime(AbstractPrimaryTimer amt) {\n+        return amt.getTotalPausedTime();\n+    }\n+\n+    public static long getStartPauseTime(AbstractPrimaryTimer amt) {\n+        return amt.getStartPauseTime();\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/com\/sun\/scenario\/animation\/AbstractPrimaryTimerShim.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -28,1 +28,1 @@\n-import com.sun.scenario.animation.AbstractMasterTimer;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n@@ -39,1 +39,1 @@\n-    public AnimationShim(AbstractMasterTimer timer) {\n+    public AnimationShim(AbstractPrimaryTimer timer) {\n@@ -43,1 +43,1 @@\n-    public AnimationShim(AbstractMasterTimer timer, ClipEnvelope clipEnvelope, int resolution) {\n+    public AnimationShim(AbstractPrimaryTimer timer, ClipEnvelope clipEnvelope, int resolution) {\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/javafx\/animation\/AnimationShim.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import com.sun.scenario.animation.AbstractMasterTimer;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n@@ -33,1 +33,1 @@\n-            AbstractMasterTimer timer) {\n+            AbstractPrimaryTimer timer) {\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/javafx\/animation\/ParallelTransitionShim.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import com.sun.scenario.animation.AbstractMasterTimer;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n@@ -32,1 +32,1 @@\n-    public static SequentialTransition getSequentialTransition(AbstractMasterTimer timer) {\n+    public static SequentialTransition getSequentialTransition(AbstractPrimaryTimer timer) {\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/javafx\/animation\/SequentialTransitionShim.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import com.sun.scenario.animation.AbstractMasterTimer;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n@@ -37,1 +37,1 @@\n-    public static Timeline getTimeline( AbstractMasterTimer timer) {\n+    public static Timeline getTimeline( AbstractPrimaryTimer timer) {\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/javafx\/animation\/TimelineShim.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import com.sun.scenario.animation.AbstractMasterTimer;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n@@ -41,1 +41,1 @@\n-    protected TransitionShim(AbstractMasterTimer timer) {\n+    protected TransitionShim(AbstractPrimaryTimer timer) {\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/javafx\/animation\/TransitionShim.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1012,1 +1012,1 @@\n-        ObservableSet<PseudoClass> master = new PseudoClassState();\n+        ObservableSet<PseudoClass> primary = new PseudoClassState();\n@@ -1014,1 +1014,1 @@\n-            master.add(pseudoClasses[n]);\n+            primary.add(pseudoClasses[n]);\n@@ -1017,1 +1017,1 @@\n-        master.addListener((SetChangeListener.Change<? extends PseudoClass> change) -> {\n+        primary.addListener((SetChangeListener.Change<? extends PseudoClass> change) -> {\n@@ -1028,1 +1028,1 @@\n-        master.removeAll(other);\n+        primary.removeAll(other);\n@@ -1031,1 +1031,1 @@\n-        assertEquals(pseudoClasses.length-pseudoClassesToRemove.length, master.size());\n+        assertEquals(pseudoClasses.length-pseudoClassesToRemove.length, primary.size());\n@@ -1066,1 +1066,1 @@\n-        ObservableSet<PseudoClass> master = new PseudoClassState();\n+        ObservableSet<PseudoClass> primary = new PseudoClassState();\n@@ -1068,1 +1068,1 @@\n-            master.add(pseudoClasses[n]);\n+            primary.add(pseudoClasses[n]);\n@@ -1071,1 +1071,1 @@\n-        master.addListener((SetChangeListener.Change<? extends PseudoClass> change) -> {\n+        primary.addListener((SetChangeListener.Change<? extends PseudoClass> change) -> {\n@@ -1082,1 +1082,1 @@\n-        master.retainAll(other);\n+        primary.retainAll(other);\n@@ -1085,1 +1085,1 @@\n-        assertEquals(pseudoClassesToRetain.length, master.size());\n+        assertEquals(pseudoClassesToRetain.length, primary.size());\n@@ -1103,1 +1103,1 @@\n-        ObservableSet<PseudoClass> master = new PseudoClassState();\n+        ObservableSet<PseudoClass> primary = new PseudoClassState();\n@@ -1105,1 +1105,1 @@\n-            master.add(pseudoClasses[n]);\n+            primary.add(pseudoClasses[n]);\n@@ -1108,1 +1108,1 @@\n-        master.addListener((SetChangeListener.Change<? extends PseudoClass> change) -> {\n+        primary.addListener((SetChangeListener.Change<? extends PseudoClass> change) -> {\n@@ -1119,1 +1119,1 @@\n-        master.clear();\n+        primary.clear();\n@@ -1122,1 +1122,1 @@\n-        assertTrue(master.isEmpty());\n+        assertTrue(primary.isEmpty());\n@@ -1128,1 +1128,1 @@\n-        final ObservableSet<PseudoClass> master = new PseudoClassState();\n+        final ObservableSet<PseudoClass> primary = new PseudoClassState();\n@@ -1130,1 +1130,1 @@\n-        master.addListener(new SetChangeListener<PseudoClass>() {\n+        primary.addListener(new SetChangeListener<PseudoClass>() {\n@@ -1134,1 +1134,1 @@\n-                master.removeListener(this);\n+                primary.removeListener(this);\n@@ -1147,1 +1147,1 @@\n-        master.add(PseudoClass.getPseudoClass(\"ONE\"));\n+        primary.add(PseudoClass.getPseudoClass(\"ONE\"));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/PseudoClassTest.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.com.sun.javafx.pgstub;\n-\n-import com.sun.javafx.tk.Toolkit;\n-import com.sun.scenario.DelayedRunnable;\n-import com.sun.scenario.animation.AbstractMasterTimer;\n-\n-\/**\n- * Stubbed implementation of AbstractMasterTimer. An instance\n- * of this is returned by Toolkit.getMasterTimer().\n- *\/\n-public class StubMasterTimer extends AbstractMasterTimer {\n-    private long currentTimeMillis;\n-\n-    protected StubMasterTimer() {\n-    }\n-\n-    protected int getPulseDuration(int precision) {\n-        return precision \/ 60;\n-    }\n-\n-    protected void postUpdateAnimationRunnable(DelayedRunnable animationRunnable) {\n-        Toolkit.getToolkit().setAnimationRunnable(animationRunnable);\n-    }\n-\n-    public void setCurrentTime(long millis) {\n-        currentTimeMillis = millis;\n-    }\n-\n-    @Override\n-    public long nanos() {\n-        return currentTimeMillis * 1000000;\n-    }\n-\n-    @Override\n-    public void pause() { }\n-\n-    @Override\n-    public void resume() { }\n-}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubMasterTimer.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.pgstub;\n+\n+import com.sun.javafx.tk.Toolkit;\n+import com.sun.scenario.DelayedRunnable;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n+\n+\/**\n+ * Stubbed implementation of AbstractPrimaryTimer. An instance\n+ * of this is returned by Toolkit.getPrimaryTimer().\n+ *\/\n+public class StubPrimaryTimer extends AbstractPrimaryTimer {\n+    private long currentTimeMillis;\n+\n+    protected StubPrimaryTimer() {\n+    }\n+\n+    protected int getPulseDuration(int precision) {\n+        return precision \/ 60;\n+    }\n+\n+    protected void postUpdateAnimationRunnable(DelayedRunnable animationRunnable) {\n+        Toolkit.getToolkit().setAnimationRunnable(animationRunnable);\n+    }\n+\n+    public void setCurrentTime(long millis) {\n+        currentTimeMillis = millis;\n+    }\n+\n+    @Override\n+    public long nanos() {\n+        return currentTimeMillis * 1000000;\n+    }\n+\n+    @Override\n+    public void pause() { }\n+\n+    @Override\n+    public void resume() { }\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubPrimaryTimer.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -48,1 +48,1 @@\n-import com.sun.scenario.animation.AbstractMasterTimer;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n@@ -81,1 +81,1 @@\n-    private StubMasterTimer masterTimer = new StubMasterTimer();\n+    private StubPrimaryTimer primaryTimer = new StubPrimaryTimer();\n@@ -338,2 +338,2 @@\n-    public AbstractMasterTimer getMasterTimer() {\n-        return masterTimer;\n+    public AbstractPrimaryTimer getPrimaryTimer() {\n+        return primaryTimer;\n@@ -376,1 +376,1 @@\n-    \/\/ do nothing -- bringing in FrameJob and MasterTimer also bring in\n+    \/\/ do nothing -- bringing in FrameJob and PrimaryTimer also bring in\n@@ -683,1 +683,1 @@\n-        masterTimer.setCurrentTime(millis);\n+        primaryTimer.setCurrentTime(millis);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubToolkit.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n-import com.sun.scenario.animation.AbstractMasterTimer;\n-import com.sun.scenario.animation.AbstractMasterTimerShim;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n+import com.sun.scenario.animation.AbstractPrimaryTimerShim;\n@@ -39,1 +39,1 @@\n-public class AbstractMasterTimerTest {\n+public class AbstractPrimaryTimerTest {\n@@ -41,1 +41,1 @@\n-    private AbstractMasterTimerStub timer;\n+    private AbstractPrimaryTimerStub timer;\n@@ -46,1 +46,1 @@\n-        timer = new AbstractMasterTimerStub();\n+        timer = new AbstractPrimaryTimerStub();\n@@ -156,1 +156,1 @@\n-    private static class AbstractMasterTimerStub extends AbstractMasterTimer {\n+    private static class AbstractPrimaryTimerStub extends AbstractPrimaryTimer {\n@@ -172,3 +172,3 @@\n-            return AbstractMasterTimerShim.isPaused(this) ?\n-                    AbstractMasterTimerShim.getStartPauseTime(this) :\n-                    nanos - AbstractMasterTimerShim.getTotalPausedTime(this);\n+            return AbstractPrimaryTimerShim.isPaused(this) ?\n+                    AbstractPrimaryTimerShim.getStartPauseTime(this) :\n+                    nanos - AbstractPrimaryTimerShim.getTotalPausedTime(this);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/scenario\/animation\/AbstractPrimaryTimerTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"previous_filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/scenario\/animation\/AbstractMasterTimerTest.java","status":"renamed"},{"patch":"@@ -53,1 +53,1 @@\n-        animation = new AnimationMock(Toolkit.getToolkit().getMasterTimer(), AnimationMock.DEFAULT_DURATION, AnimationMock.DEFAULT_RATE, 9, AnimationMock.DEFAULT_AUTOREVERSE);\n+        animation = new AnimationMock(Toolkit.getToolkit().getPrimaryTimer(), AnimationMock.DEFAULT_DURATION, AnimationMock.DEFAULT_RATE, 9, AnimationMock.DEFAULT_AUTOREVERSE);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/scenario\/animation\/shared\/FiniteClipEnvelopeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        animation = new AnimationMock(Toolkit.getToolkit().getMasterTimer(), AnimationMock.DEFAULT_DURATION, AnimationMock.DEFAULT_RATE, Animation.INDEFINITE, AnimationMock.DEFAULT_AUTOREVERSE);\n+        animation = new AnimationMock(Toolkit.getToolkit().getPrimaryTimer(), AnimationMock.DEFAULT_DURATION, AnimationMock.DEFAULT_RATE, Animation.INDEFINITE, AnimationMock.DEFAULT_AUTOREVERSE);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/scenario\/animation\/shared\/InfiniteClipEnvelopeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        animation = new AnimationMock(Toolkit.getToolkit().getMasterTimer(), AnimationMock.DEFAULT_DURATION, AnimationMock.DEFAULT_RATE, 1, AnimationMock.DEFAULT_AUTOREVERSE);\n+        animation = new AnimationMock(Toolkit.getToolkit().getPrimaryTimer(), AnimationMock.DEFAULT_DURATION, AnimationMock.DEFAULT_RATE, 1, AnimationMock.DEFAULT_AUTOREVERSE);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/scenario\/animation\/shared\/SingleLoopClipEnvelopeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import com.sun.scenario.animation.AbstractMasterTimer;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n@@ -35,1 +35,1 @@\n-public class AbstractMasterTimerMock extends AbstractMasterTimer {\n+public class AbstractPrimaryTimerMock extends AbstractPrimaryTimer {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/AbstractPrimaryTimerMock.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/AbstractMasterTimerMock.java","status":"renamed"},{"patch":"@@ -28,1 +28,1 @@\n-import com.sun.scenario.animation.AbstractMasterTimer;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n@@ -34,1 +34,1 @@\n-    public AnimationImpl(AbstractMasterTimer timer, ClipEnvelope clipEnvelope, int resolution) {\n+    public AnimationImpl(AbstractPrimaryTimer timer, ClipEnvelope clipEnvelope, int resolution) {\n@@ -42,1 +42,1 @@\n-    public AnimationImpl(AbstractMasterTimer timer) {\n+    public AnimationImpl(AbstractPrimaryTimer timer) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/AnimationImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import com.sun.scenario.animation.AbstractMasterTimer;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n@@ -56,1 +56,1 @@\n-    public AnimationMock(AbstractMasterTimer timer, Duration cycleDuration, double rate, int cycleCount, boolean autoReverse) {\n+    public AnimationMock(AbstractPrimaryTimer timer, Duration cycleDuration, double rate, int cycleCount, boolean autoReverse) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/AnimationMock.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    private static final int DEFAULT_RESOLUTION = Toolkit.getToolkit().getMasterTimer().getDefaultResolution();\n+    private static final int DEFAULT_RESOLUTION = Toolkit.getToolkit().getPrimaryTimer().getDefaultResolution();\n@@ -45,1 +45,1 @@\n-    private AbstractMasterTimerMock timer;\n+    private AbstractPrimaryTimerMock timer;\n@@ -50,1 +50,1 @@\n-        timer = new AbstractMasterTimerMock();\n+        timer = new AbstractPrimaryTimerMock();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/AnimationPulseReceiverTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    private AbstractMasterTimerMock timer;\n+    private AbstractPrimaryTimerMock timer;\n@@ -49,1 +49,1 @@\n-        timer = new AbstractMasterTimerMock();\n+        timer = new AbstractPrimaryTimerMock();\n@@ -56,1 +56,1 @@\n-    private void assertAnimation(double rate, double currentRate, Status status, boolean addedToMasterTimer) {\n+    private void assertAnimation(double rate, double currentRate, Status status, boolean addedToPrimaryTimer) {\n@@ -60,1 +60,1 @@\n-        assertEquals(addedToMasterTimer, timer.containsPulseReceiver(animation.shim_pulseReceiver()));\n+        assertEquals(addedToPrimaryTimer, timer.containsPulseReceiver(animation.shim_pulseReceiver()));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/AnimationSetRateTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    private AbstractMasterTimerMock timer;\n+    private AbstractPrimaryTimerMock timer;\n@@ -64,1 +64,1 @@\n-        timer = new AbstractMasterTimerMock();\n+        timer = new AbstractPrimaryTimerMock();\n@@ -87,1 +87,1 @@\n-        assertEquals(6000.0 \/ Toolkit.getToolkit().getMasterTimer().getDefaultResolution(), animation0.getTargetFramerate(), EPSILON);\n+        assertEquals(6000.0 \/ Toolkit.getToolkit().getPrimaryTimer().getDefaultResolution(), animation0.getTargetFramerate(), EPSILON);\n@@ -589,1 +589,1 @@\n-        final int resolution = Toolkit.getToolkit().getMasterTimer().getDefaultResolution();\n+        final int resolution = Toolkit.getToolkit().getPrimaryTimer().getDefaultResolution();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/AnimationTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    AbstractMasterTimerMock amt;\n+    AbstractPrimaryTimerMock amt;\n@@ -59,1 +59,1 @@\n-        amt = new AbstractMasterTimerMock();\n+        amt = new AbstractPrimaryTimerMock();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/ParallelTransitionPlayTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    AbstractMasterTimerMock amt;\n+    AbstractPrimaryTimerMock amt;\n@@ -59,1 +59,1 @@\n-        amt = new AbstractMasterTimerMock();\n+        amt = new AbstractPrimaryTimerMock();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/SequentialTransitionPlayTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    private AbstractMasterTimerMock amt;\n+    private AbstractPrimaryTimerMock amt;\n@@ -56,1 +56,1 @@\n-        amt = new AbstractMasterTimerMock();\n+        amt = new AbstractPrimaryTimerMock();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/TimelinePlayTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-        assertEquals(6000.0 \/ Toolkit.getToolkit().getMasterTimer().getDefaultResolution(), timeline0.getTargetFramerate(), EPSILON);\n+        assertEquals(6000.0 \/ Toolkit.getToolkit().getPrimaryTimer().getDefaultResolution(), timeline0.getTargetFramerate(), EPSILON);\n@@ -109,1 +109,1 @@\n-        assertEquals(6000.0 \/ Toolkit.getToolkit().getMasterTimer().getDefaultResolution(), timeline2.getTargetFramerate(), EPSILON);\n+        assertEquals(6000.0 \/ Toolkit.getToolkit().getPrimaryTimer().getDefaultResolution(), timeline2.getTargetFramerate(), EPSILON);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/TimelineTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-        assertEquals(6000.0 \/ Toolkit.getToolkit().getMasterTimer().getDefaultResolution(), t0.getTargetFramerate(), EPSILON);\n+        assertEquals(6000.0 \/ Toolkit.getToolkit().getPrimaryTimer().getDefaultResolution(), t0.getTargetFramerate(), EPSILON);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/TransitionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-        private final VideoDataBuffer master;\n+        private final VideoDataBuffer primary;\n@@ -196,2 +196,2 @@\n-            master = sourceBuffer;\n-            switch (master.getFormat()) {\n+            primary = sourceBuffer;\n+            switch (primary.getFormat()) {\n@@ -210,1 +210,1 @@\n-                    throw new IllegalArgumentException(\"Unsupported video format \"+master.getFormat());\n+                    throw new IllegalArgumentException(\"Unsupported video format \"+primary.getFormat());\n@@ -216,1 +216,1 @@\n-            return master.getBufferForPlane(plane);\n+            return primary.getBufferForPlane(plane);\n@@ -221,1 +221,1 @@\n-            master.holdFrame();\n+            primary.holdFrame();\n@@ -226,1 +226,1 @@\n-            master.releaseFrame();\n+            primary.releaseFrame();\n@@ -236,1 +236,1 @@\n-            return master.getWidth();\n+            return primary.getWidth();\n@@ -241,1 +241,1 @@\n-            return master.getHeight();\n+            return primary.getHeight();\n@@ -246,1 +246,1 @@\n-            return master.getEncodedWidth();\n+            return primary.getEncodedWidth();\n@@ -251,1 +251,1 @@\n-            return master.getEncodedHeight();\n+            return primary.getEncodedHeight();\n@@ -256,1 +256,1 @@\n-            return master.getPlaneCount();\n+            return primary.getPlaneCount();\n@@ -261,1 +261,1 @@\n-            return master.getPlaneStrides();\n+            return primary.getPlaneStrides();\n@@ -266,1 +266,1 @@\n-            return master.getStrideForPlane(planeIndex);\n+            return primary.getStrideForPlane(planeIndex);\n@@ -280,1 +280,1 @@\n-            VideoDataBuffer newVDB = master.convertToFormat(VideoFormat.BGRA_PRE);\n+            VideoDataBuffer newVDB = primary.convertToFormat(VideoFormat.BGRA_PRE);\n","filename":"modules\/javafx.media\/src\/main\/java\/com\/sun\/javafx\/media\/PrismMediaFrameHandler.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -294,1 +294,1 @@\n-     * Gets the master audio equalizer for the player.\n+     * Gets the audio equalizer for the player.\n","filename":"modules\/javafx.media\/src\/main\/java\/com\/sun\/media\/jfxmedia\/MediaPlayer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * Provides a master audio equalizer with up to 15 bands.  Each band can have the center frequency,\n+ * Provides an audio equalizer with up to 15 bands.  Each band can have the center frequency,\n","filename":"modules\/javafx.media\/src\/main\/java\/com\/sun\/media\/jfxmedia\/effects\/AudioEqualizer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,2 +65,2 @@\n-@synthesize window;     \/\/known as masterWindow in glass\n-@synthesize windowView; \/\/known as masterWindowHost in glass\n+@synthesize window;     \/\/known as mainWindow in glass\n+@synthesize windowView; \/\/known as mainWindowHost in glass\n@@ -144,2 +144,2 @@\n-    window = [self getWindow];                          \/\/known as masterWindow in glass\n-    windowView = [[window rootViewController] view];    \/\/known as masterWindowHost in glass\n+    window = [self getWindow];                          \/\/known as mainWindow in glass\n+    windowView = [[window rootViewController] view];    \/\/known as mainWindowHost in glass\n","filename":"modules\/javafx.web\/src\/ios\/native\/WebViewImpl.m","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -61,2 +61,2 @@\n-    \/\/ Whitelist of Class methods to allow\n-    private static final Set<String> classMethodsWhitelist = asSet(\n+    \/\/ List of Class methods to allow\n+    private static final Set<String> classMethodsAllowList = asSet(\n@@ -86,2 +86,2 @@\n-    \/\/ Blacklist of classes to disallow\n-    private static final Set<String> classesBlacklist = asSet(\n+    \/\/ List of classes to reject\n+    private static final Set<String> classesRejectList = asSet(\n@@ -94,2 +94,2 @@\n-    \/\/ Blacklist of packages to disallow\n-    private static final List<String> packagesBlacklist = Arrays.asList(\n+    \/\/ List of packages to reject\n+    private static final List<String> packagesRejectList = Arrays.asList(\n@@ -111,2 +111,2 @@\n-            \/\/ check whitelist of allowable Class methods\n-            if (!classMethodsWhitelist.contains(method.getName())) {\n+            \/\/ check list of allowed Class methods\n+            if (!classMethodsAllowList.contains(method.getName())) {\n@@ -116,1 +116,1 @@\n-            \/\/ check blacklist of class names\n+            \/\/ check list of rejected class names\n@@ -118,1 +118,1 @@\n-            if (classesBlacklist.contains(className)) {\n+            if (classesRejectList.contains(className)) {\n@@ -121,2 +121,2 @@\n-            \/\/ check blacklist of packages\n-            packagesBlacklist.forEach(packageName -> {\n+            \/\/ check list of rejected packages\n+            packagesRejectList.forEach(packageName -> {\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/Utilities.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-                \/\/ 8859_1 is blacklisted in TextEncodingRegistry.cpp:isUndesiredAlias()\n+                \/\/ 8859_1 is rejected in TextEncodingRegistry.cpp:isUndesiredAlias()\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/text\/TextCodec.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}