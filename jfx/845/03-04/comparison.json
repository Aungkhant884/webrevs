{"files":[{"patch":"@@ -225,0 +225,4 @@\n+     * To ensure a one-to-one relationship between a {@code Control} and its {@code Skin},\n+     * {@link Control#setSkin(Skin)} method will check the return value of {@link Skin#getSkinnable()}\n+     * against this Control, and throw an {@code IllegalArgumentException} if it is not the same.\n+     * <p>\n@@ -226,0 +230,1 @@\n+     *\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Control.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -267,1 +267,1 @@\n-            if(skin != null) {\n+            if (skin != null) {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/PopupControl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,3 +31,1 @@\n- * An interface for defining the visual representation of user interface controls\n- * by defining a scene graph of nodes to represent the skin.\n- * A user interface control is abstracted behind the {@link Skinnable} interface.\n+ * An interface for defining the visual representation of user interface controls.\n@@ -83,0 +81,7 @@\n+     *\n+     * @implNote\n+     * Most implementations of Skin in the <code>javafx.controls<\/code> module\n+     * do not need to implement {@link Skin#install()} unless they must set one or more\n+     * properties in the corresponding Skinnable.\n+     *\n+     * @since 20\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Skin.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-     * Skin is responsible for rendering this {@code Skinnable}. From the\n+     * The Skin is responsible for rendering this {@code Skinnable}. From the\n@@ -47,0 +47,5 @@\n+     * To ensure a one-to-one relationship between a {@code Skinnable} and its\n+     * {@code Skin}, some implementations of {@link Skinnable#setSkin(Skin)} method will check\n+     * the return value of {@link Skin#getSkinnable()} against this Skinnable,\n+     * and throw an {@code IllegalArgumentException} if it is not the same.\n+     * <p>\n@@ -53,11 +58,0 @@\n-    \/**\n-     * Sets the skin that will render this {@link Skinnable}.\n-     * <p>\n-     * To ensure a one-to-one relationship between a {@code Skinnable} and its\n-     * {@code Skin}, this method may check the return value of\n-     * {@link Skin#getSkinnable()} against this Skinnable,\n-     * and may throw an {@code IllegalArgumentException} if it is not the same.\n-     *\n-     * @param value the skin value for this Skinnable\n-     * @throws IllegalArgumentException if {@link Skin#getSkinnable()} returns a different {@code Skinnable}\n-     *\/\n@@ -66,4 +60,0 @@\n-    \/**\n-     * Returns the skin that renders this {@link Control}\n-     * @return the skin for this control\n-     *\/\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Skinnable.java","additions":6,"deletions":16,"binary":false,"changes":22,"status":"modified"}]}