{"files":[{"patch":"@@ -226,3 +226,2 @@\n-     * setting the skin property to a non-null {@code Skin} first checks\n-     * the return value of {@link Skin#getSkinnable()} against this Control,\n-     * and throws an {@code IllegalArgumentException} if it is not the same.\n+     * skins which were not created for this control are rejected with an\n+     * {@code IllegalArgumentException}.\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Control.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-     * Called once when {@link Skin} is set, after the\n+     * Called once when {@link Skin} is set, or after the\n@@ -77,2 +77,2 @@\n-     * This method allows a Skin to register listeners, add child nodes, set\n-     * required properties and\/or event handlers.\n+     * The skin can now safely make changes to its associated control, like registering listeners,\n+     * adding child nodes, and modifying properties and event handlers.\n@@ -85,3 +85,3 @@\n-     * Most implementations of Skin\n-     * do not need to implement {@code install} unless they must set one or more\n-     * properties in the corresponding Skinnable.\n+     * Skins only need to implement {@code install} if they need to make direct changes to the control\n+     * like overwriting properties or event handlers.  Such skins should ensure these changes are undone in\n+     * their {@link #dipose()} method.\n@@ -94,5 +94,4 @@\n-     * Disconnects the {@link Skin} from its {@link Skinnable}.\n-     * This method allows a {@link Skin} to implement any logic necessary to clean up itself after\n-     * the {@code Skin} is no longer needed. It may be used to release native resources.\n-     * The methods {@link #getSkinnable()} and {@link #getNode()}\n-     * should return null following a call to dispose.\n+     * Called when a previously installed skin is about to be removed from its associated control.\n+     * This allows the skin to do clean up, like removing listeners and bindings, and undo any changes\n+     * to the control's properties.\n+     * After this method completes, {@link #getSkinnable()} and {@link #getNode()} should return {@code null}.\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Skin.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-     * The Skin is responsible for rendering this {@code Skinnable}. From the\n+     * The Skin responsible for rendering this {@code Skinnable}. From the\n@@ -41,1 +41,1 @@\n-     * It listens and responds to changes in state in a {@code Skinnable}.\n+     * It listens and responds to changes in state of its {@code Skinnable}.\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Skinnable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -812,1 +812,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -815,1 +815,3 @@\n-        c.setSkin(skin);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            c.setSkin(skin);\n+        });\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ControlTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}