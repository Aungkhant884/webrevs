{"files":[{"patch":"@@ -226,3 +226,4 @@\n-     * setting the {@link #skinProperty() skin property} first triggers a check of the return value of\n-     * {@link Skin#getSkinnable()} against this Control, and throw an {@code IllegalArgumentException}\n-     * if it is not the same.  Then, {@link Skin#dispose()} is called on the old skin, disconnecting\n+     * setting the {@link #skinProperty() skin property} to a non-null {@code Skin} first checks\n+     * the return value of {@link Skin#getSkinnable()} against this Control,\n+     * and throws an {@code IllegalArgumentException} if it is not the same.\n+     * Then, {@link Skin#dispose()} is called on the old skin, disconnecting\n@@ -231,2 +232,2 @@\n-     * set\/overwrite properties of their {@code Control} (though commutative operations like add\/remove listener\n-     * can still be done in the {@code Skin} constructor.\n+     * set\/overwrite properties of their {@code Control} (though some operations like adding\/removing a listener\n+     * can still be done in the {@code Skin} constructor).\n@@ -237,1 +238,1 @@\n-     * @throws IllegalArgumentException if {@code (skin != null && skin.getSkinnable() != Control.this)}\n+     * @throws IllegalArgumentException if {@code (skin != null && skin.getSkinnable() != this)}\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Control.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * <li>inside of {@link Control#setSkin(Skin)}:\n+ * <li>when the skin is set on a {@link Skinnable}:\n@@ -75,1 +75,1 @@\n-     * Called once by {@link Skinnable#setSkin(Skin)} after the\n+     * Called once when {@link Skin} is set, after the\n@@ -80,1 +80,1 @@\n-     * Client code must not call this method.\n+     * Application code must not call this method.\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Skin.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}