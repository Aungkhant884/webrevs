{"files":[{"patch":"@@ -225,0 +225,9 @@\n+     * To ensure a one-to-one relationship between a {@code Control} and its {@code Skin},\n+     * skins which were not created for this control are rejected with an\n+     * {@code IllegalArgumentException}.\n+     * Then, {@link Skin#dispose()} is called on the old skin, disconnecting\n+     * it from the corresponding {@code Control}.  And finally, {@link Skin#install()} is invoked\n+     * to complete the process.  Only inside of {@link Skin#install()} should {@code Skin} implementations\n+     * set\/overwrite properties of their {@code Control} (though some operations like adding\/removing a listener\n+     * can still be done in the {@code Skin} constructor).\n+     * <p>\n@@ -226,0 +235,1 @@\n+     *\n@@ -227,0 +237,1 @@\n+     * @throws IllegalArgumentException if {@code (skin != null && skin.getSkinnable() != this)}\n@@ -242,0 +253,9 @@\n+            \/\/ check whether the skin is for right control\n+            if (skin != null) {\n+                if (skin.getSkinnable() != Control.this) {\n+                    unbind();\n+                    set(oldValue);\n+                    throw new IllegalArgumentException(\"Skin does not correspond to this Control\");\n+                }\n+            }\n+\n@@ -291,0 +311,5 @@\n+            \/\/ let the new skin modify this control\n+            if (skin != null) {\n+                skin.install();\n+            }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Control.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -266,0 +266,5 @@\n+            \/\/ let the new skin modify this control\n+            if (skin != null) {\n+                skin.install();\n+            }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/PopupControl.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,3 +31,14 @@\n- * Base class for defining the visual representation of user interface controls\n- * by defining a scene graph of nodes to represent the skin.\n- * A user interface control is abstracted behind the {@link Skinnable} interface.\n+ * An interface for defining the visual representation of user interface controls.\n+ * <p>\n+ * A Skin implementation should generally avoid modifying its control outside of\n+ * {@link #install()} method.  The life cycle of a Skin implementation\n+ * is as follows:\n+ * <ul>\n+ * <li>instantiation\n+ * <li>configuration, such as passing of dependencies and parameters\n+ * <li>when the skin is set on a {@link Skinnable}:\n+ * <ul>\n+ * <li>uninstalling of the old skin via its {@link #dispose()} method\n+ * <li>installing of the new skin via {@link #install()}\n+ * <\/ul>\n+ * <\/ul>\n@@ -64,6 +75,25 @@\n-     * Called by a Skinnable when the Skin is replaced on the Skinnable. This method\n-     * allows a Skin to implement any logic necessary to clean up itself after\n-     * the Skin is no longer needed. It may be used to release native resources.\n-     * The methods {@link #getSkinnable()} and {@link #getNode()}\n-     * should return null following a call to dispose. Calling dispose twice\n-     * has no effect.\n+     * Called once when {@link Skin} is set.  This method is called after the previous skin,\n+     * if any, has been uninstalled via its {@link #dispose()} method.\n+     * The skin can now safely make changes to its associated control, like registering listeners,\n+     * adding child nodes, and modifying properties and event handlers.\n+     * <p>\n+     * Application code must not call this method.\n+     * <p>\n+     * The default implementation of this method does nothing.\n+     *\n+     * @implNote\n+     * Skins only need to implement {@code install} if they need to make direct changes to the control\n+     * like overwriting properties or event handlers.  Such skins should ensure these changes are undone in\n+     * their {@link #dispose()} method.\n+     *\n+     * @since 20\n+     *\/\n+    default public void install() { }\n+\n+    \/**\n+     * Called when a previously installed skin is about to be removed from its associated control.\n+     * This allows the skin to do clean up, like removing listeners and bindings, and undo any changes\n+     * to the control's properties.\n+     * After this method completes, {@link #getSkinnable()} and {@link #getNode()} should return {@code null}.\n+     * <p>\n+     * Calling {@link #dispose()} more than once has no effect.\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Skin.java","additions":40,"deletions":10,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,3 +39,3 @@\n-     * Skin is responsible for rendering this {@code Control}. From the\n-     * perspective of the {@code Control}, the {@code Skin} is a black box.\n-     * It listens and responds to changes in state in a {@code Control}.\n+     * The Skin responsible for rendering this {@code Skinnable}. From the\n+     * perspective of the {@code Skinnable}, the {@code Skin} is a black box.\n+     * It listens and responds to changes in state of its {@code Skinnable}.\n@@ -43,3 +43,5 @@\n-     * There is a one-to-one relationship between a {@code Control} and its\n-     * {@code Skin}. Every {@code Skin} maintains a back reference to the\n-     * {@code Control}.\n+     * Some implementations of {@code Skinnable} define a one-to-one relationship between {@code Skinnable}\n+     * and its {@code Skin}. Every {@code Skin} maintains a back reference to the\n+     * {@code Skinnable}.  When required, this relationship is enforced when the {@code Skin} is set,\n+     * throwing an {@code IllegalArgumentException} if the return value of {@link Skin#getSkinnable()}\n+     * is not the same as this {@code Skinnable}.\n@@ -49,1 +51,1 @@\n-     * @return the skin property for this control\n+     * @return the skin property for this Skinnable\n@@ -53,4 +55,0 @@\n-    \/**\n-     * Sets the skin that will render this {@link Control}\n-     * @param value the skin value for this control\n-     *\/\n@@ -59,4 +57,0 @@\n-    \/**\n-     * Returns the skin that renders this {@link Control}\n-     * @return the skin for this control\n-     *\/\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Skinnable.java","additions":10,"deletions":16,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -790,0 +790,30 @@\n+    \/** verifies that Control.setSkin() calls Skin.install() JDK-8290844 *\/\n+    @Test\n+    public void setSkinCallsInstall() {\n+        class SkinWithInstall extends SkinStub {\n+            public boolean installed;\n+\n+            public SkinWithInstall(Control c) {\n+                super(c);\n+            }\n+\n+            @Override\n+            public void install() {\n+                installed = true;\n+            }\n+        }\n+\n+        SkinWithInstall skin = new SkinWithInstall(c);\n+        c.setSkin(skin);\n+        assertTrue(\"Control.setSkin() must call Skin.install()\", skin.installed);\n+    }\n+\n+    \/** Verifies that an IllegalArgumentException is thrown when setting skin for an unrelated control JDK-8290844 *\/\n+    @Test\n+    public void skinMustCorrespondToControl() {\n+        SkinStub skin = new SkinStub(new ControlStub());\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            c.setSkin(skin);\n+        });\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ControlTest.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"}]}