{"files":[{"patch":"@@ -242,0 +242,7 @@\n+            \/\/ check whether the skin is for right control\n+            if (skin != null) {\n+                if (skin.getSkinnable() != Control.this) {\n+                    throw new IllegalArgumentException(\"There must be 1:1 relationship between Skin and Skinnable\");\n+                }\n+            }\n+\n@@ -291,0 +298,5 @@\n+            \/\/ let the new skin modify this control\n+            if (skin != null) {\n+                skin.install();\n+            }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Control.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -266,0 +266,5 @@\n+            \/\/ let the new skin modify this control\n+            if(skin != null) {\n+                skin.install();\n+            }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/PopupControl.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * Base class for defining the visual representation of user interface controls\n+ * An interface for defining the visual representation of user interface controls\n@@ -34,0 +34,13 @@\n+ * <p>\n+ * A Skin implementation should generally avoid modifying its control outside of\n+ * {@link #install()} method.  The recommended life cycle of a Skin implementation\n+ * is as follows:\n+ * <ul>\n+ * <li>instantiation\n+ * <li>configuration, such as passing of dependencies and parameters\n+ * <li>inside of {@link Control#setSkin(Skin)}:\n+ * <ul>\n+ * <li>uninstalling of the old skin via its {@link #dispose()} method\n+ * <li>installing of the new skin via {@link #install()}\n+ * <\/ul>\n+ * <\/ul>\n@@ -63,0 +76,8 @@\n+    \/**\n+     * Called by {@link Skinnable#setSkin(Skin)} on a pristine control, or after the\n+     * previous skin has been uninstalled via its {@link #dispose()} method.\n+     * This method allows a Skin to register listeners, add child nodes, set\n+     * required properties and\/or event handlers.\n+     *\/\n+    default public void install() { }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Skin.java","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,3 +39,3 @@\n-     * Skin is responsible for rendering this {@code Control}. From the\n-     * perspective of the {@code Control}, the {@code Skin} is a black box.\n-     * It listens and responds to changes in state in a {@code Control}.\n+     * Skin is responsible for rendering this {@code Skinnable}. From the\n+     * perspective of the {@code Skinnable}, the {@code Skin} is a black box.\n+     * It listens and responds to changes in state in a {@code Skinnable}.\n@@ -43,1 +43,1 @@\n-     * There is a one-to-one relationship between a {@code Control} and its\n+     * There is typically a one-to-one relationship between a {@code Skinnable} and its\n@@ -45,1 +45,1 @@\n-     * {@code Control}.\n+     * {@code Skinnable}.\n@@ -49,1 +49,1 @@\n-     * @return the skin property for this control\n+     * @return the skin property for this Skinnable\n@@ -54,2 +54,9 @@\n-     * Sets the skin that will render this {@link Control}\n-     * @param value the skin value for this control\n+     * Sets the skin that will render this {@link Skinnable}.\n+     * <p>\n+     * To ensure a one-to-one relationship between a {@code Skinnable} and its\n+     * {@code Skin}, this method may check the return value of\n+     * {@link Skin#getSkinnable()} against this Skinnable,\n+     * and may throw an {@code IllegalArgumentException} if it is not the same.\n+     *\n+     * @param value the skin value for this Skinnable\n+     * @throws IllegalArgumentException if {@code Skin} does not correspond to this {@code Skinnable}\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Skinnable.java","additions":16,"deletions":9,"binary":false,"changes":25,"status":"modified"}]}