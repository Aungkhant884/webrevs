{"files":[{"patch":"@@ -226,1 +226,1 @@\n-     * setting the {@link #skinProperty() skin property} triggers a check of the return value of\n+     * setting the {@link #skinProperty() skin property} first triggers a check of the return value of\n@@ -228,1 +228,5 @@\n-     * if it is not the same.\n+     * if it is not the same.  Then, {@link Skin#dispose()} is called on the old skin, disconnecting\n+     * it from the corresponding {@code Control}.  And finally, {@link Skin#install()} is invoked\n+     * to complete the process.  Only inside of {@link Skin#install()} should {@code Skin} implementations\n+     * set\/overwrite properties of their {@code Control} (though commutative operations like add\/remove listener\n+     * can still be done in the {@code Skin} constructor.\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Control.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -94,3 +94,3 @@\n-     * Called by a Skinnable when the Skin is replaced on the Skinnable. This method\n-     * allows a Skin to implement any logic necessary to clean up itself after\n-     * the Skin is no longer needed. It may be used to release native resources.\n+     * Disconnects the {@link Skin} from its {@link Skinnable}.\n+     * This method allows a {@link Skin} to implement any logic necessary to clean up itself after\n+     * the {@code Skin} is no longer needed. It may be used to release native resources.\n@@ -98,2 +98,3 @@\n-     * should return null following a call to dispose. Calling dispose twice\n-     * has no effect.\n+     * should return null following a call to dispose.\n+     * <p>\n+     * Calling {@link #dispose()} more than once has no effect.\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Skin.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"}]}