{"files":[{"patch":"@@ -1,1 +1,1 @@\n-## LibFFI v3.4.2\n+## LibFFI v3.4.4\n@@ -6,1 +6,1 @@\n-libffi - Copyright (c) 1996-2021  Anthony Green, Red Hat, Inc and others.\n+libffi - Copyright (c) 1996-2022  Anthony Green, Red Hat, Inc and others.\n@@ -28,0 +28,45 @@\n+Copyright (C) 2007-2010  Free Software Foundation, Inc\n+Copyright (C) 1996-2014  Red Hat, Inc.\n+Copyright (C) 2009-2012 ARM Ltd.\n+Copyright (C) 2011 Plausible Labs Cooperative, Inc.\n+Copyright (C) 2002  Ranjit Mathew\n+Copyright (C) 2002  Bo Thorsen\n+Copyright (C) 2002  Roger Sayle\n+Copyright (C) 2013  The Written Word, Inc.\n+Copyright (C) 2002-2007  Bo Thorsen <bo@suse.de>\n+\n+```\n+\n+### AUTHORS File Information\n+```\n+\n+libffi was originally written by Anthony Green <green@moxielogic.com>.\n+\n+The developers of the GNU Compiler Collection project have made\n+innumerable valuable contributions.  See the ChangeLog file for\n+details.\n+\n+Some of the ideas behind libffi were inspired by Gianni Mariani's free\n+gencall library for Silicon Graphics machines.\n+\n+The closure mechanism was designed and implemented by Kresten Krab\n+Thorup.\n+\n+Major processor architecture ports were contributed by the following\n+developers:\n+\n+    aarch64             Marcus Shawcroft, James Greenhalgh\n+    x86                 Anthony Green, Jon Beniston\n+    x86-64              Bo Thorsen\n+\n+Jesper Skov and Andrew Haley both did more than their fair share of\n+stepping through the code and tracking down bugs.\n+\n+Thanks also to Tom Tromey for bug fixes, documentation and\n+configuration help.\n+\n+Thanks to Jim Blandy, who provided some useful feedback on the libffi\n+interface.\n+\n+Alex Oliva solved the executable page problem for SElinux.\n+\n","filename":"modules\/javafx.media\/src\/main\/legal\/libffi.md","additions":47,"deletions":2,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-libffi - Copyright (c) 1996-2021  Anthony Green, Red Hat, Inc and others.\n+libffi - Copyright (c) 1996-2022  Anthony Green, Red Hat, Inc and others.\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/LICENSE","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-   libffi 3.4.2\n-     - Copyright (c) 2011, 2014, 2019, 2021 Anthony Green\n+   libffi 3.4.4\n+     - Copyright (c) 2011, 2014, 2019, 2021, 2022 Anthony Green\n@@ -323,0 +323,3 @@\n+#if defined(_MSC_VER) && defined(_M_IX86)\n+  void      *padding;\n+#endif\n@@ -363,1 +366,1 @@\n-              void*codeloc);\n+              void *codeloc);\n@@ -381,1 +384,1 @@\n-     handler to do the transaltion, void** -> ffi_raw*.  *\/\n+     handler to do the translation, void** -> ffi_raw*.  *\/\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/include\/mac\/aarch64\/ffi.h","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -7,6 +7,1 @@\n-\/* Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP\n-   systems. This function is required for `alloca.c' support on those systems.\n-   *\/\n-\/* #undef CRAY_STACKSEG_END *\/\n-\n-\/* Define to 1 if using `alloca.c'. *\/\n+\/* Define to 1 if using 'alloca.c'. *\/\n@@ -16,1 +11,1 @@\n-#define EH_FRAME_FLAGS \"aw\"\n+#define EH_FRAME_FLAGS \"a\"\n@@ -27,1 +22,2 @@\n-\/* Define this if you want to enable pax emulated trampolines *\/\n+\/* Define this if you want to enable pax emulated trampolines (experimental)\n+   *\/\n@@ -39,1 +35,1 @@\n-\/* Define to 1 if you have `alloca', as a function or macro. *\/\n+\/* Define to 1 if you have 'alloca', as a function or macro. *\/\n@@ -42,2 +38,1 @@\n-\/* Define to 1 if you have <alloca.h> and it should be used (not on Ultrix).\n-   *\/\n+\/* Define to 1 if <alloca.h> works. *\/\n@@ -111,1 +106,1 @@\n-\/* #undef HAVE_RO_EH_FRAME *\/\n+#define HAVE_RO_EH_FRAME 1\n@@ -116,0 +111,3 @@\n+\/* Define to 1 if you have the <stdio.h> header file. *\/\n+#define HAVE_STDIO_H 1\n+\n@@ -156,1 +154,1 @@\n-#define PACKAGE_STRING \"libffi 3.4.2\"\n+#define PACKAGE_STRING \"libffi 3.4.4\"\n@@ -165,1 +163,1 @@\n-#define PACKAGE_VERSION \"3.4.2\"\n+#define PACKAGE_VERSION \"3.4.4\"\n@@ -184,1 +182,3 @@\n-\/* Define to 1 if you have the ANSI C header files. *\/\n+\/* Define to 1 if all of the C90 standard headers exist (not just the ones\n+   required in a freestanding environment). This macro is provided for\n+   backward compatibility; new code need not use it. *\/\n@@ -195,1 +195,1 @@\n-#define VERSION \"3.4.2\"\n+#define VERSION \"3.4.4\"\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/include\/mac\/aarch64\/fficonfig.h","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-   libffi 3.4.2\n-     - Copyright (c) 2011, 2014, 2019, 2021 Anthony Green\n+   libffi 3.4.4\n+     - Copyright (c) 2011, 2014, 2019, 2021, 2022 Anthony Green\n@@ -323,0 +323,3 @@\n+#if defined(_MSC_VER) && defined(_M_IX86)\n+  void      *padding;\n+#endif\n@@ -363,1 +366,1 @@\n-              void*codeloc);\n+              void *codeloc);\n@@ -381,1 +384,1 @@\n-     handler to do the transaltion, void** -> ffi_raw*.  *\/\n+     handler to do the translation, void** -> ffi_raw*.  *\/\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/include\/mac\/x64\/ffi.h","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -7,6 +7,1 @@\n-\/* Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP\n-   systems. This function is required for `alloca.c' support on those systems.\n-   *\/\n-\/* #undef CRAY_STACKSEG_END *\/\n-\n-\/* Define to 1 if using `alloca.c'. *\/\n+\/* Define to 1 if using 'alloca.c'. *\/\n@@ -16,1 +11,1 @@\n-#define EH_FRAME_FLAGS \"aw\"\n+#define EH_FRAME_FLAGS \"a\"\n@@ -27,1 +22,2 @@\n-\/* Define this if you want to enable pax emulated trampolines *\/\n+\/* Define this if you want to enable pax emulated trampolines (experimental)\n+   *\/\n@@ -39,1 +35,1 @@\n-\/* Define to 1 if you have `alloca', as a function or macro. *\/\n+\/* Define to 1 if you have 'alloca', as a function or macro. *\/\n@@ -42,2 +38,1 @@\n-\/* Define to 1 if you have <alloca.h> and it should be used (not on Ultrix).\n-   *\/\n+\/* Define to 1 if <alloca.h> works. *\/\n@@ -111,1 +106,1 @@\n-\/* #undef HAVE_RO_EH_FRAME *\/\n+#define HAVE_RO_EH_FRAME 1\n@@ -116,0 +111,3 @@\n+\/* Define to 1 if you have the <stdio.h> header file. *\/\n+#define HAVE_STDIO_H 1\n+\n@@ -156,1 +154,1 @@\n-#define PACKAGE_STRING \"libffi 3.4.2\"\n+#define PACKAGE_STRING \"libffi 3.4.4\"\n@@ -165,1 +163,1 @@\n-#define PACKAGE_VERSION \"3.4.2\"\n+#define PACKAGE_VERSION \"3.4.4\"\n@@ -184,1 +182,3 @@\n-\/* Define to 1 if you have the ANSI C header files. *\/\n+\/* Define to 1 if all of the C90 standard headers exist (not just the ones\n+   required in a freestanding environment). This macro is provided for\n+   backward compatibility; new code need not use it. *\/\n@@ -195,1 +195,1 @@\n-#define VERSION \"3.4.2\"\n+#define VERSION \"3.4.4\"\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/include\/mac\/x64\/fficonfig.h","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-   libffi 3.4.2\n-     - Copyright (c) 2011, 2014, 2019, 2021 Anthony Green\n+   libffi 3.4.4\n+     - Copyright (c) 2011, 2014, 2019, 2021, 2022 Anthony Green\n@@ -323,0 +323,3 @@\n+#if defined(_MSC_VER) && defined(_M_IX86)\n+  void      *padding;\n+#endif\n@@ -363,1 +366,1 @@\n-              void*codeloc);\n+              void *codeloc);\n@@ -381,1 +384,1 @@\n-     handler to do the transaltion, void** -> ffi_raw*.  *\/\n+     handler to do the translation, void** -> ffi_raw*.  *\/\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/include\/win\/x64\/ffi.h","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -7,6 +7,1 @@\n-\/* Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP\n-   systems. This function is required for `alloca.c' support on those systems.\n-   *\/\n-\/* #undef CRAY_STACKSEG_END *\/\n-\n-\/* Define to 1 if using `alloca.c'. *\/\n+\/* Define to 1 if using 'alloca.c'. *\/\n@@ -27,1 +22,2 @@\n-\/* Define this if you want to enable pax emulated trampolines *\/\n+\/* Define this if you want to enable pax emulated trampolines (experimental)\n+   *\/\n@@ -39,1 +35,1 @@\n-\/* Define to 1 if you have `alloca', as a function or macro. *\/\n+\/* Define to 1 if you have 'alloca', as a function or macro. *\/\n@@ -42,2 +38,1 @@\n-\/* Define to 1 if you have <alloca.h> and it should be used (not on Ultrix).\n-   *\/\n+\/* Define to 1 if <alloca.h> works. *\/\n@@ -116,0 +111,3 @@\n+\/* Define to 1 if you have the <stdio.h> header file. *\/\n+#define HAVE_STDIO_H 1\n+\n@@ -156,1 +154,1 @@\n-#define PACKAGE_STRING \"libffi 3.4.2\"\n+#define PACKAGE_STRING \"libffi 3.4.4\"\n@@ -165,1 +163,1 @@\n-#define PACKAGE_VERSION \"3.4.2\"\n+#define PACKAGE_VERSION \"3.4.4\"\n@@ -184,1 +182,3 @@\n-\/* Define to 1 if you have the ANSI C header files. *\/\n+\/* Define to 1 if all of the C90 standard headers exist (not just the ones\n+   required in a freestanding environment). This macro is provided for\n+   backward compatibility; new code need not use it. *\/\n@@ -195,1 +195,1 @@\n-#define VERSION \"3.4.2\"\n+#define VERSION \"3.4.4\"\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/include\/win\/x64\/fficonfig.h","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-   libffi 3.4.2\n-     - Copyright (c) 2011, 2014, 2019, 2021 Anthony Green\n+   libffi 3.4.4\n+     - Copyright (c) 2011, 2014, 2019, 2021, 2022 Anthony Green\n@@ -323,0 +323,3 @@\n+#if defined(_MSC_VER) && defined(_M_IX86)\n+  void      *padding;\n+#endif\n@@ -363,1 +366,1 @@\n-              void*codeloc);\n+              void *codeloc);\n@@ -381,1 +384,1 @@\n-     handler to do the transaltion, void** -> ffi_raw*.  *\/\n+     handler to do the translation, void** -> ffi_raw*.  *\/\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/include\/win\/x86\/ffi.h","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -7,6 +7,1 @@\n-\/* Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP\n-   systems. This function is required for `alloca.c' support on those systems.\n-   *\/\n-\/* #undef CRAY_STACKSEG_END *\/\n-\n-\/* Define to 1 if using `alloca.c'. *\/\n+\/* Define to 1 if using 'alloca.c'. *\/\n@@ -27,1 +22,2 @@\n-\/* Define this if you want to enable pax emulated trampolines *\/\n+\/* Define this if you want to enable pax emulated trampolines (experimental)\n+   *\/\n@@ -39,1 +35,1 @@\n-\/* Define to 1 if you have `alloca', as a function or macro. *\/\n+\/* Define to 1 if you have 'alloca', as a function or macro. *\/\n@@ -42,2 +38,1 @@\n-\/* Define to 1 if you have <alloca.h> and it should be used (not on Ultrix).\n-   *\/\n+\/* Define to 1 if <alloca.h> works. *\/\n@@ -116,0 +111,3 @@\n+\/* Define to 1 if you have the <stdio.h> header file. *\/\n+#define HAVE_STDIO_H 1\n+\n@@ -156,1 +154,1 @@\n-#define PACKAGE_STRING \"libffi 3.4.2\"\n+#define PACKAGE_STRING \"libffi 3.4.4\"\n@@ -165,1 +163,1 @@\n-#define PACKAGE_VERSION \"3.4.2\"\n+#define PACKAGE_VERSION \"3.4.4\"\n@@ -184,1 +182,3 @@\n-\/* Define to 1 if you have the ANSI C header files. *\/\n+\/* Define to 1 if all of the C90 standard headers exist (not just the ones\n+   required in a freestanding environment). This macro is provided for\n+   backward compatibility; new code need not use it. *\/\n@@ -195,1 +195,1 @@\n-#define VERSION \"3.4.2\"\n+#define VERSION \"3.4.4\"\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/include\/win\/x86\/fficonfig.h","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -251,1 +251,5 @@\n-   PCS. *\/\n+   PCS.\n+\n+   The struct area is allocated downwards from the top of the argument\n+   area.  It is used to hold copies of structures passed by value that are\n+   bigger than 16 bytes.  *\/\n@@ -258,0 +262,1 @@\n+  size_t next_struct_area;      \/* Place to allocate big structs. *\/\n@@ -266,1 +271,1 @@\n-arg_init (struct arg_state *state)\n+arg_init (struct arg_state *state, size_t size)\n@@ -271,0 +276,1 @@\n+  state->next_struct_area = size;\n@@ -299,0 +305,15 @@\n+\/* Allocate and copy a structure that is passed by value on the stack and\n+   return a pointer to it.  *\/\n+static void *\n+allocate_and_copy_struct_to_stack (struct arg_state *state, void *stack,\n+                                   size_t alignment, size_t size, void *value)\n+{\n+  size_t dest = state->next_struct_area - size;\n+\n+  \/* Round down to the natural alignment of the value.  *\/\n+  dest = FFI_ALIGN_DOWN (dest, alignment);\n+  state->next_struct_area = dest;\n+\n+  return memcpy ((char *) stack + dest, value, size);\n+}\n+\n@@ -305,1 +326,5 @@\n-      return *(UINT8 *) source;\n+      {\n+        UINT8 u8;\n+        memcpy (&u8, source, sizeof (u8));\n+        return u8;\n+      }\n@@ -307,1 +332,5 @@\n-      return *(SINT8 *) source;\n+      {\n+        SINT8 s8;\n+        memcpy (&s8, source, sizeof (s8));\n+        return s8;\n+      }\n@@ -309,1 +338,5 @@\n-      return *(UINT16 *) source;\n+      {\n+        UINT16 u16;\n+        memcpy (&u16, source, sizeof (u16));\n+        return u16;\n+      }\n@@ -311,1 +344,5 @@\n-      return *(SINT16 *) source;\n+      {\n+        SINT16 s16;\n+        memcpy (&s16, source, sizeof (s16));\n+        return s16;\n+      }\n@@ -313,1 +350,5 @@\n-      return *(UINT32 *) source;\n+      {\n+        UINT32 u32;\n+        memcpy (&u32, source, sizeof (u32));\n+        return u32;\n+      }\n@@ -316,1 +357,5 @@\n-      return *(SINT32 *) source;\n+      {\n+        SINT32 s32;\n+        memcpy (&s32, source, sizeof (s32));\n+        return s32;\n+      }\n@@ -319,2 +364,5 @@\n-      return *(UINT64 *) source;\n-      break;\n+      {\n+        UINT64 u64;\n+        memcpy (&u64, source, sizeof (u64));\n+        return u64;\n+      }\n@@ -322,1 +370,5 @@\n-      return *(uintptr_t *) source;\n+      {\n+        uintptr_t uptr;\n+        memcpy (&uptr, source, sizeof (uptr));\n+        return uptr;\n+      }\n@@ -627,1 +679,1 @@\n-  arg_init (&state);\n+  arg_init (&state, stack_bytes);\n@@ -634,0 +686,1 @@\n+      void *dest;\n@@ -681,2 +734,0 @@\n-        void *dest;\n-\n@@ -715,1 +766,1 @@\n-           bytes, then the argument has been copied to memory, and\n+           bytes, then the argument is copied to memory, and\n@@ -717,1 +768,4 @@\n-        a = &avalue[i];\n+        dest = allocate_and_copy_struct_to_stack (&state, stack,\n+                                                  ty->alignment, s,\n+                                                  avalue[i]);\n+        a = &dest;\n@@ -812,2 +866,2 @@\n-#ifdef __MACH__\n-#ifdef HAVE_PTRAUTH\n+# ifdef __MACH__\n+#  ifdef HAVE_PTRAUTH\n@@ -815,1 +869,1 @@\n-#endif\n+#  endif\n@@ -819,1 +873,1 @@\n-#endif\n+# endif\n@@ -821,1 +875,1 @@\n-  static const unsigned char trampoline[16] = {\n+static const unsigned char trampoline[16] = {\n@@ -828,1 +882,1 @@\n-#if defined(FFI_EXEC_STATIC_TRAMP)\n+# if defined(FFI_EXEC_STATIC_TRAMP)\n@@ -839,1 +893,1 @@\n-#endif\n+# endif\n@@ -849,1 +903,1 @@\n-#ifdef _WIN32\n+# ifdef _WIN32\n@@ -853,1 +907,1 @@\n-  #else\n+# else\n@@ -855,1 +909,1 @@\n-  #endif\n+# endif\n@@ -857,0 +911,1 @@\n+# if defined(FFI_EXEC_STATIC_TRAMP)\n@@ -858,0 +913,1 @@\n+# endif\n@@ -920,1 +976,1 @@\n-  arg_init (&state);\n+  arg_init (&state, cif->bytes);\n@@ -1007,0 +1063,8 @@\n+#ifdef __ILP32__\n+             UINT64 avalue_tmp;\n+             memcpy (&avalue_tmp,\n+                  allocate_int_to_reg_or_stack (context, &state,\n+                                               stack, sizeof (void *)),\n+                  sizeof (UINT64));\n+             avalue[i] = (void *)(UINT32)avalue_tmp;\n+#else\n@@ -1010,0 +1074,1 @@\n+#endif\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/src\/aarch64\/ffi.c","additions":92,"deletions":27,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-   closures.c - Copyright (c) 2019 Anthony Green\n+   closures.c - Copyright (c) 2019, 2022 Anthony Green\n@@ -30,1 +30,1 @@\n-#if defined __linux__ && !defined _GNU_SOURCE\n+#if (defined __linux__ || defined __CYGWIN__) && !defined _GNU_SOURCE\n@@ -136,1 +136,1 @@\n-# if defined(_WIN32) || defined(__OS2__)\n+# if defined(__CYGWIN__) || defined(_WIN32) || defined(__OS2__)\n@@ -144,2 +144,2 @@\n-#if FFI_MMAP_EXEC_WRIT && !defined FFI_MMAP_EXEC_SELINUX\n-# if defined(__linux__) && !defined(__ANDROID__)\n+#if FFI_MMAP_EXEC_WRIT && defined(__linux__) && !defined(__ANDROID__)\n+# if !defined FFI_MMAP_EXEC_SELINUX\n@@ -150,2 +150,6 @@\n-# endif\n-#endif\n+# endif \/* !defined FFI_MMAP_EXEC_SELINUX *\/\n+# if !defined FFI_MMAP_PAX\n+\/* Also check for PaX MPROTECT *\/\n+#  define FFI_MMAP_PAX 1\n+# endif \/* !defined FFI_MMAP_PAX *\/\n+#endif \/* FFI_MMAP_EXEC_WRIT && defined(__linux__) && !defined(__ANDROID__) *\/\n@@ -233,1 +237,1 @@\n-  if (kt != KERN_SUCCESS || !(cur_prot & VM_PROT_EXECUTE))\n+  if (kt != KERN_SUCCESS)\n@@ -239,0 +243,12 @@\n+  if (!(cur_prot & VM_PROT_EXECUTE))\n+    {\n+      \/* If VM_PROT_EXECUTE isn't set on the remapped trampoline page, set it *\/\n+      kt = vm_protect (mach_task_self (), trampoline_page, PAGE_MAX_SIZE,\n+         FALSE, cur_prot | VM_PROT_EXECUTE);\n+      if (kt != KERN_SUCCESS)\n+        {\n+          vm_deallocate (mach_task_self (), config_page, PAGE_MAX_SIZE * 2);\n+          return NULL;\n+        }\n+    }\n+\n@@ -470,2 +486,2 @@\n-\/* On PaX enable kernels that have MPROTECT enable we can't use PROT_EXEC. *\/\n-#ifdef FFI_MMAP_EXEC_EMUTRAMP_PAX\n+\/* On PaX enable kernels that have MPROTECT enabled we can't use PROT_EXEC. *\/\n+#if defined FFI_MMAP_PAX\n@@ -474,1 +490,5 @@\n-static int emutramp_enabled = -1;\n+enum {\n+  PAX_MPROTECT = (1 << 0),\n+  PAX_EMUTRAMP = (1 << 1),\n+};\n+static int cached_pax_flags = -1;\n@@ -477,1 +497,1 @@\n-emutramp_enabled_check (void)\n+pax_flags_check (void)\n@@ -491,3 +511,4 @@\n-        char emutramp;\n-        if (sscanf (buf, \"%*s %*c%c\", &emutramp) == 1)\n-          ret = (emutramp == 'E');\n+        if (NULL != strchr (buf + 4, 'M'))\n+          ret |= PAX_MPROTECT;\n+        if (NULL != strchr (buf + 4, 'E'))\n+          ret |= PAX_EMUTRAMP;\n@@ -501,3 +522,7 @@\n-#define is_emutramp_enabled() (emutramp_enabled >= 0 ? emutramp_enabled \\\n-                               : (emutramp_enabled = emutramp_enabled_check ()))\n-#endif \/* FFI_MMAP_EXEC_EMUTRAMP_PAX *\/\n+#define get_pax_flags() (cached_pax_flags >= 0 ? cached_pax_flags \\\n+                               : (cached_pax_flags = pax_flags_check ()))\n+#define has_pax_flags(flags) ((flags) == ((flags) & get_pax_flags ()))\n+#define is_mprotect_enabled() (has_pax_flags (PAX_MPROTECT))\n+#define is_emutramp_enabled() (has_pax_flags (PAX_EMUTRAMP))\n+\n+#endif \/* defined FFI_MMAP_PAX *\/\n@@ -514,3 +539,4 @@\n-#ifndef FFI_MMAP_EXEC_EMUTRAMP_PAX\n-#define is_emutramp_enabled() 0\n-#endif \/* FFI_MMAP_EXEC_EMUTRAMP_PAX *\/\n+#if !defined FFI_MMAP_PAX\n+# define is_mprotect_enabled() 0\n+# define is_emutramp_enabled() 0\n+#endif \/* !defined FFI_MMAP_PAX *\/\n@@ -740,1 +766,1 @@\n-static int\n+int\n@@ -881,1 +907,3 @@\n-  if (execfd == -1 && is_emutramp_enabled ())\n+  \/* -1 != execfd hints that we already decided to use dlmmap_locked\n+     last time.  *\/\n+  if (execfd == -1 && is_mprotect_enabled ())\n@@ -883,2 +911,11 @@\n-      ptr = mmap (start, length, prot & ~PROT_EXEC, flags, fd, offset);\n-      return ptr;\n+#ifdef FFI_MMAP_EXEC_EMUTRAMP_PAX\n+      if (is_emutramp_enabled ())\n+        {\n+          \/* emutramp requires the kernel recognizing the trampoline pattern\n+             generated by ffi_prep_closure_loc; there is no way to test\n+             in advance whether this will work, so this is experimental.  *\/\n+          ptr = mmap (start, length, prot & ~PROT_EXEC, flags, fd, offset);\n+          return ptr;\n+        }\n+#endif\n+      \/* fallback to dlmmap_locked.  *\/\n@@ -886,2 +923,1 @@\n-\n-  if (execfd == -1 && !is_selinux_enabled ())\n+  else if (execfd == -1 && !is_selinux_enabled ())\n@@ -900,8 +936,3 @@\n-  if (execsize == 0 || execfd == -1)\n-    {\n-      pthread_mutex_lock (&open_temp_exec_file_mutex);\n-      ptr = dlmmap_locked (start, length, prot, flags, offset);\n-      pthread_mutex_unlock (&open_temp_exec_file_mutex);\n-\n-      return ptr;\n-    }\n+  pthread_mutex_lock (&open_temp_exec_file_mutex);\n+  ptr = dlmmap_locked (start, length, prot, flags, offset);\n+  pthread_mutex_unlock (&open_temp_exec_file_mutex);\n@@ -909,1 +940,1 @@\n-  return dlmmap_locked (start, length, prot, flags, offset);\n+  return ptr;\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/src\/closures.c","additions":67,"deletions":36,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -595,0 +595,5 @@\n+\/* The system's malloc.h may have conflicting defines. *\/\n+#undef M_TRIM_THRESHOLD\n+#undef M_GRANULARITY\n+#undef M_MMAP_THRESHOLD\n+\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/src\/dlmalloc.c","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+                Copyright (c) 2022 Oracle and\/or its affiliates.\n@@ -243,1 +244,1 @@\n-  for (i = 1; i < ntotalargs; i++)\n+  for (i = nfixedargs; i < ntotalargs; i++)\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/src\/prep_cif.c","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-   ffi.c - Copyright (c) 2017  Anthony Green\n+   ffi.c - Copyright (c) 2017, 2022  Anthony Green\n@@ -120,3 +120,4 @@\n-#ifndef X86\n-      \/* ??? This should be a different ABI rather than an ifdef.  *\/\n-      if (cif->rtype->size == 1)\n+      {\n+#ifdef X86_WIN32\n+        size_t size = cif->rtype->size;\n+        if (size == 1)\n@@ -124,1 +125,1 @@\n-      else if (cif->rtype->size == 2)\n+        else if (size == 2)\n@@ -126,1 +127,1 @@\n-      else if (cif->rtype->size == 4)\n+        else if (size == 4)\n@@ -128,1 +129,1 @@\n-      else if (cif->rtype->size == 8)\n+        else if (size == 8)\n@@ -149,0 +150,1 @@\n+      }\n@@ -185,1 +187,6 @@\n-      bytes = FFI_ALIGN (bytes, t->alignment);\n+#if defined(X86_WIN32)\n+      if (cabi == FFI_STDCALL)\n+        bytes = FFI_ALIGN (bytes, FFI_SIZEOF_ARG);\n+      else\n+#endif\n+        bytes = FFI_ALIGN (bytes, t->alignment);\n@@ -612,0 +619,1 @@\n+#if defined(FFI_EXEC_STATIC_TRAMP)\n@@ -613,0 +621,1 @@\n+#endif\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/src\/x86\/ffi.c","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-   ffi64.c - Copyright (c) 2011, 2018  Anthony Green\n+   ffi64.c - Copyright (c) 2011, 2018, 2022  Anthony Green\n@@ -584,0 +584,3 @@\n+  arg_types = cif->arg_types;\n+  avn = cif->nargs;\n+\n@@ -598,3 +601,0 @@\n-  avn = cif->nargs;\n-  arg_types = cif->arg_types;\n-\n@@ -619,0 +619,1 @@\n+\n@@ -684,0 +685,18 @@\n+  ffi_type **arg_types = cif->arg_types;\n+  int i, nargs = cif->nargs;\n+  const int max_reg_struct_size = cif->abi == FFI_GNUW64 ? 8 : 16;\n+\n+  \/* If we have any large structure arguments, make a copy so we are passing\n+     by value.  *\/\n+  for (i = 0; i < nargs; i++)\n+    {\n+      ffi_type *at = arg_types[i];\n+      int size = at->size;\n+      if (at->type == FFI_TYPE_STRUCT && size > max_reg_struct_size)\n+        {\n+          char *argcopy = alloca (size);\n+          memcpy (argcopy, avalue[i], size);\n+          avalue[i] = argcopy;\n+        }\n+    }\n+\n@@ -783,0 +802,1 @@\n+#if defined(FFI_EXEC_STATIC_TRAMP)\n@@ -784,0 +804,1 @@\n+#endif\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/src\/x86\/ffi64.c","additions":25,"deletions":4,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -44,0 +44,3 @@\n+#warning ******************************************************\n+#warning ********** X86 IS DEFINED ****************************\n+#warning ******************************************************\n@@ -162,1 +165,0 @@\n-\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/src\/x86\/ffitarget.h","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -126,0 +126,2 @@\n+  ffi_type **arg_types = cif->arg_types;\n+  int nargs = cif->nargs;\n@@ -129,0 +131,14 @@\n+  \/* If we have any large structure arguments, make a copy so we are passing\n+     by value.  *\/\n+  for (i = 0; i < nargs; i++)\n+    {\n+      ffi_type *at = arg_types[i];\n+      int size = at->size;\n+      if (at->type == FFI_TYPE_STRUCT && size > 8)\n+        {\n+          char *argcopy = alloca (size);\n+          memcpy (argcopy, avalue[i], size);\n+          avalue[i] = argcopy;\n+        }\n+    }\n+\n@@ -250,0 +266,1 @@\n+#if defined(FFI_EXEC_STATIC_TRAMP)\n@@ -251,0 +268,1 @@\n+#endif\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/src\/x86\/ffiw64.c","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-   sysv.S - Copyright (c) 2017  Anthony Green\n+   sysv.S - Copyright (c) 2017, 2022  Anthony Green\n@@ -92,2 +92,2 @@\n-        \/\/ cfi_def_cfa(%ebp, 8)\n-        \/\/ cfi_rel_offset(%ebp, 0)\n+        \/* cfi_def_cfa(%ebp, 8) *\/\n+        \/* cfi_rel_offset(%ebp, 0) *\/\n@@ -151,4 +151,4 @@\n-        \/\/ cfi_remember_state\n-        \/\/ cfi_def_cfa(%esp, 4)\n-        \/\/ cfi_restore(%ebx)\n-        \/\/ cfi_restore(%ebp)\n+        \/* cfi_remember_state *\/\n+        \/* cfi_def_cfa(%esp, 4) *\/\n+        \/* cfi_restore(%ebx) *\/\n+        \/* cfi_restore(%ebp) *\/\n@@ -157,1 +157,1 @@\n-        \/\/ cfi_restore_state\n+        \/* cfi_restore_state *\/\n@@ -177,1 +177,1 @@\n-        \/\/ cfi_endproc\n+        \/* cfi_endproc *\/\n@@ -245,1 +245,1 @@\n-        \/\/ cfi_startproc\n+        \/* cfi_startproc *\/\n@@ -248,1 +248,1 @@\n-        \/\/ cfi_def_cfa_offset(closure_FS + 4)\n+        \/* cfi_def_cfa_offset(closure_FS + 4) *\/\n@@ -264,1 +264,1 @@\n-        \/\/ cfi_startproc\n+        \/* cfi_startproc *\/\n@@ -267,1 +267,1 @@\n-        \/\/ cfi_def_cfa_offset(closure_FS + 4)\n+        \/* cfi_def_cfa_offset(closure_FS + 4) *\/\n@@ -276,1 +276,1 @@\n-        \/\/ cfi_endproc\n+        \/* cfi_endproc *\/\n@@ -286,1 +286,1 @@\n-        \/\/ cfi_startproc\n+        \/* cfi_startproc *\/\n@@ -289,1 +289,1 @@\n-        \/\/ cfi_def_cfa_offset(closure_FS + 4)\n+        \/* cfi_def_cfa_offset(closure_FS + 4) *\/\n@@ -334,1 +334,1 @@\n-        \/\/ cfi_adjust_cfa_offset(-closure_FS)\n+        \/* cfi_adjust_cfa_offset(-closure_FS) *\/\n@@ -337,1 +337,1 @@\n-        \/\/ cfi_adjust_cfa_offset(closure_FS)\n+        \/* cfi_adjust_cfa_offset(closure_FS) *\/\n@@ -341,1 +341,1 @@\n-        \/\/ cfi_adjust_cfa_offset(-closure_FS)\n+        \/* cfi_adjust_cfa_offset(-closure_FS) *\/\n@@ -344,1 +344,1 @@\n-        \/\/ cfi_adjust_cfa_offset(closure_FS)\n+        \/* cfi_adjust_cfa_offset(closure_FS) *\/\n@@ -361,1 +361,1 @@\n-        \/\/ cfi_endproc\n+        \/* cfi_endproc *\/\n@@ -368,1 +368,1 @@\n-        \/\/ cfi_startproc\n+        \/* cfi_startproc *\/\n@@ -371,1 +371,1 @@\n-        \/\/ cfi_def_cfa_offset(closure_FS + 4)\n+        \/* cfi_def_cfa_offset(closure_FS + 4) *\/\n@@ -380,1 +380,1 @@\n-        \/\/ cfi_endproc\n+        \/* cfi_endproc *\/\n@@ -390,3 +390,3 @@\n-        \/\/ cfi_startproc\n-        \/\/ cfi_def_cfa(%esp, 8)\n-        \/\/ cfi_offset(%eip, -8)\n+        \/* cfi_startproc *\/\n+        \/* cfi_def_cfa(%esp, 8) *\/\n+        \/* cfi_offset(%eip, -8) *\/\n@@ -395,1 +395,1 @@\n-        \/\/ cfi_def_cfa_offset(closure_FS + 4)\n+        \/* cfi_def_cfa_offset(closure_FS + 4) *\/\n@@ -402,1 +402,1 @@\n-        \/\/ cfi_endproc\n+        \/* cfi_endproc *\/\n@@ -413,1 +413,1 @@\n-        \/\/ cfi_startproc\n+        \/* cfi_startproc *\/\n@@ -416,1 +416,1 @@\n-        \/\/ cfi_def_cfa_offset(closure_FS + 4)\n+        \/* cfi_def_cfa_offset(closure_FS + 4) *\/\n@@ -507,1 +507,1 @@\n-        \/\/ cfi_endproc\n+        \/* cfi_endproc *\/\n@@ -518,1 +518,1 @@\n-        \/\/ cfi_startproc\n+        \/* cfi_startproc *\/\n@@ -521,1 +521,1 @@\n-        \/\/ cfi_def_cfa_offset(raw_closure_S_FS + 4)\n+        \/* cfi_def_cfa_offset(raw_closure_S_FS + 4) *\/\n@@ -524,1 +524,1 @@\n-        \/\/ cfi_rel_offset(%ebx, raw_closure_S_FS-4)\n+        \/* cfi_rel_offset(%ebx, raw_closure_S_FS-4) *\/\n@@ -538,5 +538,5 @@\n-\/\/ #ifdef __PIC__\n-\/\/      call    __x86.get_pc_thunk.bx\n-\/\/ L(pc4):\n-\/\/      lea     ecx, L(load_table4)-L(pc4)(%ebx, %eax, 8), %ecx\n-\/\/ #else\n+\/* #ifdef __PIC__ *\/\n+\/*      call    __x86.get_pc_thunk.bx *\/\n+\/* L(pc4): *\/\n+\/*      lea     ecx, L(load_table4)-L(pc4)(%ebx, %eax, 8), %ecx *\/\n+\/* #else *\/\n@@ -544,1 +544,1 @@\n-\/\/ #endif\n+\/* #endif *\/\n@@ -547,1 +547,1 @@\n-        \/\/ cfi_restore(%ebx)\n+        \/* cfi_restore(%ebx) *\/\n@@ -584,1 +584,1 @@\n-        \/\/ cfi_adjust_cfa_offset(-raw_closure_S_FS)\n+        \/* cfi_adjust_cfa_offset(-raw_closure_S_FS) *\/\n@@ -587,1 +587,1 @@\n-        \/\/ cfi_adjust_cfa_offset(raw_closure_S_FS)\n+        \/* cfi_adjust_cfa_offset(raw_closure_S_FS) *\/\n@@ -591,1 +591,1 @@\n-        \/\/ cfi_adjust_cfa_offset(-raw_closure_S_FS)\n+        \/* cfi_adjust_cfa_offset(-raw_closure_S_FS) *\/\n@@ -594,1 +594,1 @@\n-        \/\/ cfi_adjust_cfa_offset(raw_closure_S_FS)\n+        \/* cfi_adjust_cfa_offset(raw_closure_S_FS) *\/\n@@ -611,1 +611,1 @@\n-        \/\/ cfi_endproc\n+        \/* cfi_endproc *\/\n@@ -620,1 +620,1 @@\n-        \/\/ cfi_startproc\n+        \/* cfi_startproc *\/\n@@ -625,2 +625,2 @@\n-        \/\/ cfi_def_cfa_offset(0)\n-        \/\/ cfi_register(%eip, %edx)\n+        \/* cfi_def_cfa_offset(0) *\/\n+        \/* cfi_register(%eip, %edx) *\/\n@@ -629,1 +629,1 @@\n-        \/\/ cfi_adjust_cfa_offset(4)\n+        \/* cfi_adjust_cfa_offset(4) *\/\n@@ -632,2 +632,2 @@\n-        \/\/ cfi_adjust_cfa_offset(4)\n-        \/\/ cfi_rel_offset(%eip, 0)\n+        \/* cfi_adjust_cfa_offset(4) *\/\n+        \/* cfi_rel_offset(%eip, 0) *\/\n@@ -636,1 +636,1 @@\n-        \/\/ cfi_adjust_cfa_offset(raw_closure_T_FS)\n+        \/* cfi_adjust_cfa_offset(raw_closure_T_FS) *\/\n@@ -639,1 +639,1 @@\n-        \/\/ cfi_rel_offset(%ebx, raw_closure_T_FS-4)\n+        \/* cfi_rel_offset(%ebx, raw_closure_T_FS-4) *\/\n@@ -653,5 +653,5 @@\n-\/\/ #ifdef __PIC__\n-\/\/      call    __x86.get_pc_thunk.bx\n-\/\/ L(pc5):\n-\/\/      leal    L(load_table5)-L(pc5)(%ebx, %eax, 8), %ecx\n-\/\/ #else\n+\/* #ifdef __PIC__ *\/\n+\/*      call    __x86.get_pc_thunk.bx *\/\n+\/* L(pc5): *\/\n+\/*      leal    L(load_table5)-L(pc5)(%ebx, %eax, 8), %ecx *\/\n+\/* #else *\/\n@@ -659,1 +659,1 @@\n-\/\/#endif\n+\/*#endif *\/\n@@ -662,1 +662,1 @@\n-        \/\/ cfi_restore(%ebx)\n+        \/* cfi_restore(%ebx) *\/\n@@ -699,1 +699,1 @@\n-        \/\/ cfi_adjust_cfa_offset(-raw_closure_T_FS)\n+        \/* cfi_adjust_cfa_offset(-raw_closure_T_FS) *\/\n@@ -703,1 +703,1 @@\n-        \/\/ cfi_adjust_cfa_offset(raw_closure_T_FS)\n+        \/* cfi_adjust_cfa_offset(raw_closure_T_FS) *\/\n@@ -707,1 +707,1 @@\n-        \/\/ cfi_adjust_cfa_offset(-raw_closure_T_FS)\n+        \/* cfi_adjust_cfa_offset(-raw_closure_T_FS) *\/\n@@ -710,1 +710,1 @@\n-        \/\/ cfi_adjust_cfa_offset(raw_closure_T_FS)\n+        \/* cfi_adjust_cfa_offset(raw_closure_T_FS) *\/\n@@ -727,1 +727,1 @@\n-        \/\/ cfi_endproc\n+        \/* cfi_endproc *\/\n@@ -746,14 +746,17 @@\n-\/\/ #if defined(__PIC__)\n-\/\/      COMDAT(C(__x86.get_pc_thunk.bx))\n-\/\/ C(__x86.get_pc_thunk.bx):\n-\/\/      movl    (%esp), %ebx\n-\/\/      ret\n-\/\/ ENDF(C(__x86.get_pc_thunk.bx))\n-\/\/ # if defined X86_DARWIN || defined HAVE_HIDDEN_VISIBILITY_ATTRIBUTE\n-\/\/      COMDAT(C(__x86.get_pc_thunk.dx))\n-\/\/ C(__x86.get_pc_thunk.dx):\n-\/\/      movl    (%esp), %edx\n-\/\/      ret\n-\/\/ ENDF(C(__x86.get_pc_thunk.dx))\n-\/\/ #endif \/* DARWIN || HIDDEN *\/\n-\/\/ #endif \/* __PIC__ *\/\n+#if 0\n+#if defined(__PIC__)\n+     COMDAT(C(__x86.get_pc_thunk.bx))\n+C(__x86.get_pc_thunk.bx):\n+     movl    (%esp), %ebx\n+     ret\n+ENDF(C(__x86.get_pc_thunk.bx))\n+# if defined X86_DARWIN || defined HAVE_HIDDEN_VISIBILITY_ATTRIBUTE\n+     COMDAT(C(__x86.get_pc_thunk.dx))\n+C(__x86.get_pc_thunk.dx):\n+     movl    (%esp), %edx\n+     ret\n+ENDF(C(__x86.get_pc_thunk.dx))\n+#endif \/* DARWIN || HIDDEN *\/\n+#endif \/* __PIC__ *\/\n+#endif\n+\n@@ -995,1 +998,1 @@\n-END\n\\ No newline at end of file\n+END\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/src\/x86\/sysv_intel.S","additions":85,"deletions":82,"binary":false,"changes":167,"status":"modified"},{"patch":"@@ -42,1 +42,4 @@\n-#if defined(__clang__) || defined(__APPLE__) || (defined (__sun__) && defined(__svr4__))\n+#ifdef __CET__\n+\/* Double slot size to 16 byte to add 4 bytes of ENDBR64.  *\/\n+# define E(BASE, X)     .balign 8; .org BASE + X * 16\n+#elif defined(__clang__) || defined(__APPLE__) || (defined (__sun__) && defined(__svr4__))\n@@ -45,5 +48,1 @@\n-# ifdef __CET__\n-#  define E(BASE, X)    .balign 8; .org BASE + X * 16\n-# else\n-#  define E(BASE, X)    .balign 8; .org BASE + X * 8\n-# endif\n+# define E(BASE, X)     .balign 8; .org BASE + X * 8\n@@ -509,0 +508,3 @@\n+# ifdef __ILP32__\n+#  define X86_CODE_OFFSET       4069\n+# else\n@@ -510,0 +512,1 @@\n+# endif\n@@ -511,2 +514,6 @@\n-#define X86_DATA_OFFSET         4081\n-#define X86_CODE_OFFSET         4077\n+# define X86_DATA_OFFSET        4081\n+# ifdef __ILP32__\n+#  define X86_CODE_OFFSET       4073\n+# else\n+#  define X86_CODE_OFFSET       4077\n+# endif\n@@ -524,0 +531,3 @@\n+ #ifdef __ILP32__\n+        movl    X86_DATA_OFFSET(%rip), %r10d    \/* Copy data into %r10 *\/\n+#else\n@@ -525,0 +535,1 @@\n+#endif\n@@ -526,0 +537,3 @@\n+#ifdef __ILP32__\n+        movl    X86_CODE_OFFSET(%rip), %r10d    \/* Copy code into %r10 *\/\n+#else\n@@ -527,0 +541,1 @@\n+#endif\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/src\/x86\/unix64.S","additions":23,"deletions":8,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -88,6 +88,6 @@\n-.macro epilogue\n-        leaveq\n-        cfi_remember_state\n-        cfi_def_cfa(%rsp, 8)\n-        cfi_restore(%rbp)\n-        ret\n+#define epilogue                \\\n+        leaveq;                 \\\n+        cfi_remember_state;     \\\n+        cfi_def_cfa(%rsp, 8);   \\\n+        cfi_restore(%rbp);      \\\n+        ret;                    \\\n@@ -95,1 +95,0 @@\n-.endm\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/3rd_party\/libffi\/src\/x86\/win64.S","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"}]}