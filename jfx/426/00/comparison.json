{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,3 @@\n+import java.util.ArrayList;\n+import java.util.List;\n+\n@@ -29,0 +32,2 @@\n+    private List<NativeScreen> screens;\n+\n@@ -44,0 +49,17 @@\n+    @Override\n+    protected NativeScreen createScreen() {\n+        return new EGLScreen(0);\n+    }\n+\n+    @Override\n+    protected synchronized List<NativeScreen> createScreens() {\n+        if (screens == null) {\n+            int numScreens = nGetNumberOfScreens();\n+            screens = new ArrayList<>(numScreens);\n+            for (int i = 0; i < numScreens; i++) {\n+                screens.add(new EGLScreen(i));\n+            }\n+        }\n+        return screens;\n+    }\n+\n@@ -53,0 +75,2 @@\n+    private native int nGetNumberOfScreens();\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/monocle\/EGLPlatform.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.glass.ui.monocle;\n+\n+import java.nio.Buffer;\n+import java.nio.ByteBuffer;\n+\n+public class EGLScreen implements NativeScreen {\n+\n+    final int depth;\n+    final int nativeFormat;\n+    final int width, height;\n+    final int offsetX, offsetY;\n+    final int dpi;\n+    final long handle;\n+    final float scale;\n+\n+    public EGLScreen(int idx) {\n+        this.handle = nGetHandle(idx);\n+        this.depth = nGetDepth(idx);\n+        this.nativeFormat = nGetNativeFormat(idx);\n+        this.width = nGetWidth(idx);\n+        this.height = nGetHeight(idx);\n+        this.offsetX = nGetOffsetX(idx);\n+        this.offsetY = nGetOffsetY(idx);\n+        this.dpi = nGetDpi(idx);\n+        this.scale = nGetScale(idx);\n+    }\n+\n+    @Override\n+    public int getDepth() {\n+        return this.depth;\n+    }\n+\n+    @Override\n+    public int getNativeFormat() {\n+        return this.nativeFormat;\n+    }\n+\n+    @Override\n+    public int getWidth() {\n+         return this.width;\n+    }\n+\n+    @Override\n+    public int getHeight() {\n+         return this.height;\n+    }\n+\n+    @Override\n+    public int getOffsetX() {\n+         return this.offsetX;\n+    }\n+\n+    @Override\n+    public int getOffsetY() {\n+         return this.offsetY;\n+    }\n+\n+    @Override\n+    public int getDPI() {\n+         return this.dpi;\n+    }\n+\n+    @Override\n+    public long getNativeHandle() {\n+        return handle;\n+    }\n+\n+    @Override\n+    public void shutdown() {\n+    }\n+\n+    @Override\n+    public void uploadPixels(Buffer b, int x, int y, int width, int height, float alpha) {\n+    }\n+\n+    @Override\n+    public void swapBuffers() {\n+    }\n+\n+    @Override\n+    public ByteBuffer getScreenCapture() {\n+        throw new UnsupportedOperationException(\"No screencapture on EGL platforms\");\n+    }\n+\n+    @Override\n+    public float getScale() {\n+        return this.scale;\n+    }\n+\n+    private native long nGetHandle(int idx);\n+    private native int nGetDepth(int idx);\n+    private native int nGetWidth(int idx);\n+    private native int nGetHeight(int idx);\n+    private native int nGetOffsetX(int idx);\n+    private native int nGetOffsetY(int idx);\n+    private native int nGetDpi(int idx);\n+    private native int nGetNativeFormat(int idx);\n+    private native float nGetScale(int idx);\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/monocle\/EGLScreen.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -45,0 +45,1 @@\n+import java.util.List;\n@@ -222,14 +223,23 @@\n-        NativeScreen ns = platform.getScreen();\n-        Screen screen = new Screen(1l, \/\/ dummy native pointer;\n-                                   ns.getDepth(),\n-                                   0, 0, ns.getWidth(), ns.getHeight(),\n-                                   0, 0, ns.getWidth(), ns.getHeight(),\n-                                   0, 0, ns.getWidth(), ns.getHeight(),\n-                                   ns.getDPI(), ns.getDPI(),\n-                                   1.f, 1.f, ns.getScale(), ns.getScale());\n-        \/\/ Move the cursor to the middle of the screen\n-        MouseState mouseState = new MouseState();\n-        mouseState.setX(ns.getWidth() \/ 2);\n-        mouseState.setY(ns.getHeight() \/ 2);\n-        MouseInput.getInstance().setState(mouseState, false);\n-        return new Screen[] { screen };\n+        List<NativeScreen> screens = platform.getScreens();\n+        Screen[] answer = new Screen[screens.size()];\n+        int cnt = 0;\n+        for (NativeScreen ns: screens) {\n+            Screen screen = new Screen(ns.getNativeHandle(),\n+                    ns.getDepth(),\n+                    ns.getOffsetX(), ns.getOffsetY(), ns.getWidth(), ns.getHeight(),\n+                    ns.getOffsetX(), ns.getOffsetY(), ns.getWidth(), ns.getHeight(),\n+                    ns.getOffsetX(), ns.getOffsetY(), ns.getWidth(), ns.getHeight(),\n+                    ns.getDPI(), ns.getDPI(),\n+                    1.f, 1.f, ns.getScale(), ns.getScale());\n+            answer[cnt] = screen;\n+            \/\/ The first screen is the primaryscreen, we set the cursor to that one.\n+            if (cnt == 0) {\n+                \/\/ Move the cursor to the middle of the screen\n+                MouseState mouseState = new MouseState();\n+                mouseState.setX(ns.getWidth() \/ 2);\n+                mouseState.setY(ns.getHeight() \/ 2);\n+                MouseInput.getInstance().setState(mouseState, false);\n+            }\n+            cnt++;\n+        }\n+        return answer;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/monocle\/MonocleApplication.java","additions":24,"deletions":14,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -42,1 +45,1 @@\n-    private NativeScreen screen;\n+    protected List<NativeScreen> screens;\n@@ -67,2 +70,4 @@\n-        if (screen != null) {\n-            screen.shutdown();\n+        if (screens != null) {\n+            for (NativeScreen screen: screens) {\n+                screen.shutdown();\n+            }\n@@ -123,1 +128,27 @@\n-     * Obtains the singleton NativeScreen\n+     * Create <code>NativeScreen<\/code> instances for all\n+     * available native screens. The default implementation of\n+     * this method will invoke the <code>createScreen<\/code>\n+     * method and return a list with a single screen only.\n+     * Subclasses can override this and return a list\n+     * with all screens. The approach to get this list is\n+     * specific to the subclass and can be done in Java or\n+     * in native code. <p>\n+     * The first element in the returned list is considered\n+     * to be the primary screen.\n+     *\n+     * @return a list with all native screens. This list is\n+     * never <code>null<\/code>, but it can be empty.\n+     *\/\n+    protected synchronized List<NativeScreen> createScreens() {\n+        if (screens == null) {\n+            screens = new ArrayList<>(1);\n+            screens.add(createScreen());\n+        }\n+        return screens;\n+    }\n+\n+    \/**\n+     * Obtains the NativeScreen instances. This method will\n+     * create NativeScreen instances for all native screens,\n+     * and stores them internally. The main screen (primaryscreen)\n+     * is returned.\n@@ -125,1 +156,2 @@\n-     * @return the NativeScreen\n+     * @return the primaryscreen, or <code>null<\/code> if no\n+     * screen is found.\n@@ -128,2 +160,9 @@\n-        if (screen == null) {\n-            screen = createScreen();\n+        if (screens == null) {\n+            screens = createScreens();\n+        }\n+        return (screens.size() == 0 ? null : screens.get(0));\n+    }\n+\n+    synchronized List<NativeScreen> getScreens() {\n+        if (screens == null) {\n+            screens = createScreens();\n@@ -131,1 +170,1 @@\n-        return screen;\n+        return screens;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/monocle\/NativePlatform.java","additions":47,"deletions":8,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -55,0 +55,16 @@\n+    \/**\n+     * Returns the horizontal start position of this screen relative to the total\n+     * combined screen size.\n+     *\/\n+    default int getOffsetX() {\n+        return 0;\n+    }\n+\n+    \/**\n+     * Returns the vertical start position of this screen relative to the total\n+     * combined screen size.\n+     *\/\n+    default int getOffsetY() {\n+        return 0;\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/monocle\/NativeScreen.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -91,0 +91,49 @@\n+JNIEXPORT jlong JNICALL Java_com_sun_glass_ui_monocle_EGLScreen_nGetHandle\n+(JNIEnv *env, jclass clazz, jint idx)  {\n+    return doGetHandle(idx);\n+}\n+\n+JNIEXPORT jint JNICALL Java_com_sun_glass_ui_monocle_EGLScreen_nGetDepth\n+(JNIEnv *env, jclass clazz, jint idx)  {\n+    return doGetDepth(idx);\n+}\n+\n+JNIEXPORT jint JNICALL Java_com_sun_glass_ui_monocle_EGLScreen_nGetWidth\n+(JNIEnv *env, jclass clazz, jint idx)  {\n+    return doGetWidth(idx);\n+}\n+\n+JNIEXPORT jint JNICALL Java_com_sun_glass_ui_monocle_EGLScreen_nGetHeight\n+(JNIEnv *env, jclass clazz, jint idx)  {\n+    return doGetHeight(idx);\n+}\n+\n+JNIEXPORT jint JNICALL Java_com_sun_glass_ui_monocle_EGLScreen_nGetOffsetX\n+(JNIEnv *env, jclass clazz, jint idx)  {\n+    return doGetOffsetX(idx);\n+}\n+\n+JNIEXPORT jint JNICALL Java_com_sun_glass_ui_monocle_EGLScreen_nGetOffsetY\n+(JNIEnv *env, jclass clazz, jint idx)  {\n+    return doGetOffsetY(idx);\n+}\n+\n+JNIEXPORT jint JNICALL Java_com_sun_glass_ui_monocle_EGLScreen_nGetDpi\n+(JNIEnv *env, jclass clazz, jint idx)  {\n+    return doGetDpi(idx);\n+}\n+\n+JNIEXPORT jint JNICALL Java_com_sun_glass_ui_monocle_EGLScreen_nGetNativeFormat\n+(JNIEnv *env, jclass clazz, jint idx)  {\n+    return doGetNativeFormat(idx);\n+}\n+\n+JNIEXPORT jfloat JNICALL Java_com_sun_glass_ui_monocle_EGLScreen_nGetScale\n+(JNIEnv *env, jclass clazz, jint idx)  {\n+    return doGetScale(idx);\n+}\n+\n+JNIEXPORT jint JNICALL Java_com_sun_glass_ui_monocle_EGLPlatform_nGetNumberOfScreens\n+(JNIEnv *env, jclass clazz) {\n+    return doGetNumberOfScreens();\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/monocle\/egl\/eglBridge.c","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -43,0 +43,12 @@\n+\n+extern jlong doGetHandle(jint idx);\n+extern jint doGetDepth(jint idx);\n+extern jint doGetWidth(jint idx);\n+extern jint doGetHeight(jint idx);\n+extern jint doGetOffsetX(jint idx);\n+extern jint doGetOffsetY(jint idx);\n+extern jint doGetDpi(jint idx);\n+extern jint doGetNativeFormat(jint idx);\n+extern jfloat doGetScale(jint idx);\n+extern jint doGetNumberOfScreens();\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/monocle\/egl\/egl_ext.h","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}