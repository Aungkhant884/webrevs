{"files":[{"patch":"@@ -158,1 +158,3 @@\n-add_custom_command(\n+find_program(TOUCH_EXECUTABLE touch)\n+if (TOUCH_EXECUTABLE)\n+    add_custom_command(\n@@ -162,0 +164,1 @@\n+        COMMAND ${TOUCH_EXECUTABLE} -r ${JAVASCRIPTCORE_DIR}\/runtime\/JSCBytecodeCacheVersion.cpp.in ${JavaScriptCore_DERIVED_SOURCES_DIR}\/JSCBytecodeCacheVersion.cpp\n@@ -163,2 +166,10 @@\n-)\n-\n+    )\n+else ()\n+    message(WARNING \"Unable to find touch executable; ${JavaScriptCore_DERIVED_SOURCES_DIR}\/JSCBytecodeCacheVersion.cpp is built non-reproducibly from ${JAVASCRIPTCORE_DIR}\/runtime\/JSCBytecodeCacheVersion.cpp.in\")\n+    add_custom_command(\n+        OUTPUT ${JavaScriptCore_DERIVED_SOURCES_DIR}\/JSCBytecodeCacheVersion.cpp\n+        MAIN_DEPENDENCY ${JAVASCRIPTCORE_DIR}\/runtime\/JSCBytecodeCacheVersion.cpp.in\n+        COMMAND ${PERL_EXECUTABLE} -pe s\/CACHED_TYPES_CKSUM\/__TIMESTAMP__\/ ${JAVASCRIPTCORE_DIR}\/runtime\/JSCBytecodeCacheVersion.cpp.in > ${JavaScriptCore_DERIVED_SOURCES_DIR}\/JSCBytecodeCacheVersion.cpp\n+            VERBATIM\n+    )\n+endif ()\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/CMakeLists.txt","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -80,1 +80,10 @@\n-            candidates.add(block);\n+            bool canCopyBlock = true;\n+            for (Value* value : *block) {\n+                if (value->kind().isCloningForbidden()) {\n+                    canCopyBlock = false;\n+                    break;\n+                }\n+            }\n+\n+            if (canCopyBlock)\n+                candidates.add(block);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/b3\/B3DuplicateTails.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -46,0 +46,2 @@\n+    if (isCloningForbidden())\n+        out.print(comma, \"CloningForbidden\");\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/b3\/B3Kind.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -179,0 +179,23 @@\n+    static constexpr bool hasCloningForbidden(Opcode opcode)\n+    {\n+        switch (opcode) {\n+        case Patchpoint:\n+            return true;\n+        default:\n+            return false;\n+        }\n+    }\n+    bool hasCloningForbidden() const\n+    {\n+        return hasCloningForbidden(m_opcode);\n+    }\n+    bool isCloningForbidden() const\n+    {\n+        return m_cloningForbidden;\n+    }\n+    void setIsCloningForbidden(bool isCloningForbidden)\n+    {\n+        ASSERT(hasCloningForbidden());\n+        m_cloningForbidden = isCloningForbidden;\n+    }\n+\n@@ -192,1 +215,2 @@\n-            && m_isSensitiveToNaN == other.m_isSensitiveToNaN;\n+            && m_isSensitiveToNaN == other.m_isSensitiveToNaN\n+            && m_cloningForbidden == other.m_cloningForbidden;\n@@ -206,1 +230,1 @@\n-        return m_opcode + (static_cast<unsigned>(m_isChill) << 16) + (static_cast<unsigned>(m_traps) << 7) + (static_cast<unsigned>(m_isSensitiveToNaN) << 24);\n+        return m_opcode + (static_cast<unsigned>(m_isChill) << 16) + (static_cast<unsigned>(m_traps) << 7) + (static_cast<unsigned>(m_isSensitiveToNaN) << 24) + (static_cast<unsigned>(m_cloningForbidden) << 13);\n@@ -225,0 +249,1 @@\n+    bool m_cloningForbidden : 1 { false };\n@@ -253,0 +278,6 @@\n+inline Kind cloningForbidden(Kind kind)\n+{\n+    kind.setIsCloningForbidden(true);\n+    return kind;\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/b3\/B3Kind.h","additions":33,"deletions":2,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -54,2 +54,2 @@\n-PatchpointValue::PatchpointValue(Type type, Origin origin)\n-    : Base(CheckedOpcode, Patchpoint, type, origin)\n+PatchpointValue::PatchpointValue(Type type, Origin origin, Kind kind)\n+    : Base(CheckedOpcode, kind, type, origin)\n@@ -58,0 +58,1 @@\n+    ASSERT(accepts(kind));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/b3\/B3PatchpointValue.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    static bool accepts(Kind kind) { return kind == Patchpoint; }\n+    static bool accepts(Kind kind) { return kind.opcode() == Patchpoint; }\n@@ -74,1 +74,2 @@\n-    JS_EXPORT_PRIVATE PatchpointValue(Type, Origin);\n+    static Opcode opcodeFromConstructor(Type, Origin, Kind) { return Patchpoint; }\n+    JS_EXPORT_PRIVATE PatchpointValue(Type, Origin, Kind = Patchpoint);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/b3\/B3PatchpointValue.h","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -103,0 +103,1 @@\n+        ASSERT(m_min <= m_max);\n@@ -451,3 +452,9 @@\n-        int32_t min = m_min;\n-        int32_t max = m_max;\n-        return IntRange(static_cast<uint64_t>(static_cast<uint32_t>(min)), static_cast<uint64_t>(static_cast<uint32_t>(max)));\n+        uint64_t min = static_cast<uint64_t>(static_cast<uint32_t>(m_min));\n+        uint64_t max = static_cast<uint64_t>(static_cast<uint32_t>(m_max));\n+        if (m_max < 0 || m_min >= 0) {\n+            \/\/ m_min = -2, m_max = -1 then should return [0xFFFF_FFFE, 0xFFFF_FFFF]\n+            \/\/ m_min =  1, m_max =  2 then should return [1, 2]\n+            return IntRange(min, max);\n+        }\n+        \/\/ m_min = a negative integer, m_max >= 0 then should return [0, 0xFFFF_FFFF]\n+        return IntRange(0, std::numeric_limits<uint32_t>::max());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/b3\/B3ReduceStrength.cpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -246,0 +246,1 @@\n+    ASSERT(!kind().isCloningForbidden());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/b3\/B3ValueInlines.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -233,0 +233,9 @@\n+        JSValue value;\n+        {\n+            Locker<JSCellLock> cellLocker { NoLockingNecessary };\n+            if (concurrency != Concurrency::MainThread) {\n+                cellLocker = Locker { object->cellLock() };\n+                if (object->structure() != structure)\n+                    return ObjectPropertyCondition();\n+                \/\/ The structure might change from now on, but we are guaranteed to have a sane view of the butterfly.\n+            }\n@@ -237,1 +246,1 @@\n-        JSValue value = object->getDirect(concurrency, structure, offset);\n+            value = object->getDirect(cellLocker, concurrency, structure, offset);\n@@ -240,0 +249,1 @@\n+        }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/bytecode\/ObjectPropertyConditionSet.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -74,15 +74,0 @@\n-ALWAYS_INLINE static bool nonStructurePropertyMayBecomeReadOnlyWithoutTransition(Structure* structure, UniquedStringImpl* uid)\n-{\n-    switch (structure->typeInfo().type()) {\n-    case ArrayType:\n-    case DerivedArrayType:\n-        return uid == structure->vm().propertyNames->length.impl();\n-\n-    case RegExpObjectType:\n-        return uid == structure->vm().propertyNames->lastIndex.impl();\n-\n-    default:\n-        return false;\n-    }\n-}\n-\n@@ -204,1 +189,1 @@\n-        } else if (nonStructurePropertyMayBecomeReadOnlyWithoutTransition(structure, uid())) {\n+        } else if (structure->typeInfo().overridesPut() && JSObject::mightBeSpecialProperty(structure->vm(), structure->typeInfo().type(), uid())) {\n@@ -206,1 +191,5 @@\n-                dataLog(\"Invalid because its put() override may treat \", uid(), \" property as read-only.\\n\");\n+                dataLog(\"Invalid because its put() override may treat \", uid(), \" property as special non-structure one.\\n\");\n+            return false;\n+        } else if (structure->hasNonReifiedStaticProperties() && structure->classInfoForCells()->hasStaticReadOnlyOrGetterSetterProperty(uid())) {\n+            if (PropertyConditionInternal::verbose)\n+                dataLog(\"Invalid because we expected not to have a setter, but we have one in non-reified static property table: \", uid(), \".\\n\");\n@@ -285,0 +274,3 @@\n+        Locker<JSCellLock> cellLocker { NoLockingNecessary };\n+        if (concurrency != Concurrency::MainThread && base)\n+            cellLocker = Locker { base->cellLock() };\n@@ -309,2 +301,2 @@\n-        JSValue currentValue = base->getDirect(concurrency, structure, currentOffset);\n-        if (currentValue != requiredValue()) {\n+        JSValue currentValue = base->getDirect(cellLocker, concurrency, structure, currentOffset);\n+        if (currentValue != requiredValue() || !currentValue) {\n@@ -513,0 +505,3 @@\n+    JSValue value;\n+    {\n+        Locker cellLocker { base->cellLock() };\n@@ -515,1 +510,2 @@\n-    JSValue value = base->getDirectConcurrently(structure, offset());\n+        value = base->getDirectConcurrently(cellLocker, structure, offset());\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/bytecode\/PropertyCondition.cpp","additions":16,"deletions":20,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1329,0 +1329,1 @@\n+    Locker cellLock { object->cellLock() };\n@@ -1333,1 +1334,1 @@\n-    return object->getDirectConcurrently(structure, offset);\n+    return object->getDirectConcurrently(cellLock, structure, offset);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/dfg\/DFGGraph.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -194,0 +194,1 @@\n+            bool mayReadArguments = false;\n@@ -196,0 +197,5 @@\n+            \/\/ This is used iff allInlineFramesAreTailCalls, so we will\n+            \/\/ actually do a real tail call and destroy our frame.\n+            case TailCallForwardVarargs:\n+                isForwardingNode = true;\n+                break;\n@@ -198,1 +204,0 @@\n-            case TailCallForwardVarargs:\n@@ -201,0 +206,1 @@\n+                mayReadArguments = true;\n@@ -213,0 +219,3 @@\n+            if (mayReadArguments)\n+                readWorld(m_node);\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/dfg\/DFGPreciseLocalClobberize.h","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -8833,1 +8833,1 @@\n-        speculationCheck(ExitKind::Overflow, JSValueRegs(), nullptr, branch32(Above, resultGPR, TrustedImm32(std::numeric_limits<int32_t>::max())));\n+        speculationCheck(ExitKind::Overflow, JSValueRegs(), nullptr, branch64(Above, resultGPR, TrustedImm32(std::numeric_limits<int32_t>::max())));\n@@ -8859,1 +8859,1 @@\n-    speculationCheck(ExitKind::Overflow, JSValueRegs(), nullptr, branch32(Above, resultGPR, TrustedImm32(std::numeric_limits<int32_t>::max())));\n+    speculationCheck(ExitKind::Overflow, JSValueRegs(), nullptr, branch64(Above, resultGPR, TrustedImm32(std::numeric_limits<int32_t>::max())));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/dfg\/DFGSpeculativeJIT.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    ASSERT(m_frames.size() < maxCallStackSizeToCapture);\n+    ASSERT(m_frames.size() <= maxCallStackSizeToCapture);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/inspector\/ScriptCallStack.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -251,2 +251,0 @@\n-        ConsoleMessage* newMessage = consoleMessage.get();\n-        m_consoleMessages.append(WTFMove(consoleMessage));\n@@ -257,1 +255,1 @@\n-            newMessage->addToFrontend(*m_frontendDispatcher, m_injectedScriptManager, generatePreview);\n+            consoleMessage->addToFrontend(*m_frontendDispatcher, m_injectedScriptManager, generatePreview);\n@@ -260,0 +258,1 @@\n+        m_consoleMessages.append(WTFMove(consoleMessage));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/inspector\/agents\/InspectorConsoleAgent.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2387,1 +2387,1 @@\n-    args.fill(argumentCountIncludingThis - 1, [&] (JSValue* buffer) {\n+    args.fill(vm, argumentCountIncludingThis - 1, [&](JSValue* buffer) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/llint\/LLIntSlowPaths.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-    void fill(size_t count, const Functor& func)\n+    void fill(VM& vm, size_t count, const Functor& func)\n@@ -214,0 +214,4 @@\n+        if (LIKELY(!m_markSet)) {\n+            m_markSet = &vm.heap.markListSet();\n+            m_markSet->add(this);\n+        }\n@@ -215,1 +219,4 @@\n-        func(reinterpret_cast<JSValue*>(&slotFor(0)));\n+        auto* buffer = reinterpret_cast<JSValue*>(&slotFor(0));\n+        for (unsigned i = 0; i < count; ++i)\n+            buffer[i] = JSValue();\n+        func(buffer);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/ArgList.h","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -212,0 +212,1 @@\n+    JS_EXPORT_PRIVATE bool hasStaticReadOnlyOrGetterSetterProperty(UniquedStringImpl*) const;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/ClassInfo.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1036,0 +1036,1 @@\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/JSArray.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-    \/\/ ordering with the Structure lock is that the Structure lock must be acquired first.\n+    \/\/ ordering with the Structure lock is that the cell lock must be acquired first.\n@@ -130,2 +130,2 @@\n-    \/\/ Locker locker { cell->cellLocker() };\n-    JSCellLock& cellLock() { return *reinterpret_cast<JSCellLock*>(this); }\n+    \/\/ Locker locker { cell->cellLock() };\n+    JSCellLock& cellLock() const { return *reinterpret_cast<JSCellLock*>(const_cast<JSCell*>(this)); }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/JSCell.h","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -279,1 +279,4 @@\n-            if (std::max(to, from) + count > length)\n+            if (std::max(to, from) + count > length) {\n+                \/\/ Either to or from index is larger than the updated length. In this case, we do not need to copy anything and finish copyWithin.\n+                if (std::max(to, from) > length)\n+                    return JSValue::encode(callFrame->thisValue());\n@@ -282,0 +285,1 @@\n+        }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/JSGenericTypedArrayViewPrototypeFunctions.h","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -862,0 +862,13 @@\n+bool JSObject::mightBeSpecialProperty(VM& vm, JSType type, UniquedStringImpl* uid)\n+{\n+    switch (type) {\n+    case ArrayType:\n+    case DerivedArrayType:\n+        return uid == vm.propertyNames->length.impl();\n+    case JSFunctionType:\n+        return uid == vm.propertyNames->length.impl() || uid == vm.propertyNames->name.impl() || uid == vm.propertyNames->prototype.impl();\n+    default:\n+        return true;\n+    }\n+}\n+\n@@ -906,2 +919,2 @@\n-    if (slot.isTaintedByOpaqueObject() || slot.context() == PutPropertySlot::ReflectSet) {\n-        if (receiver->methodTable()->defineOwnProperty != JSObject::defineOwnProperty)\n+    if (slot.isTaintedByOpaqueObject() || receiver->methodTable()->defineOwnProperty != JSObject::defineOwnProperty) {\n+        if (mightBeSpecialProperty(vm, receiver->type(), propertyName.uid()))\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/JSObject.cpp","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -209,0 +209,1 @@\n+    static bool mightBeSpecialProperty(VM&, JSType, UniquedStringImpl*);\n@@ -827,2 +828,2 @@\n-    JSValue getDirect(Concurrency, Structure* expectedStructure, PropertyOffset) const;\n-    JSValue getDirectConcurrently(Structure* expectedStructure, PropertyOffset) const;\n+    JSValue getDirect(Locker<JSCellLock>&, Concurrency, Structure* expectedStructure, PropertyOffset) const;\n+    JSValue getDirectConcurrently(Locker<JSCellLock>&, Structure* expectedStructure, PropertyOffset) const;\n@@ -1396,1 +1397,1 @@\n-ALWAYS_INLINE JSValue JSObject::getDirect(Concurrency concurrency, Structure* expectedStructure, PropertyOffset offset) const\n+ALWAYS_INLINE JSValue JSObject::getDirect(Locker<JSCellLock>& cellLock, Concurrency concurrency, Structure* expectedStructure, PropertyOffset offset) const\n@@ -1403,1 +1404,1 @@\n-        return getDirectConcurrently(expectedStructure, offset);\n+        return getDirectConcurrently(cellLock, expectedStructure, offset);\n@@ -1408,1 +1409,1 @@\n-inline JSValue JSObject::getDirectConcurrently(Structure* structure, PropertyOffset offset) const\n+inline JSValue JSObject::getDirectConcurrently(Locker<JSCellLock>&, Structure* expectedStructure, PropertyOffset offset) const\n@@ -1410,2 +1411,5 @@\n-    ConcurrentJSLocker locker(structure->lock());\n-    if (!structure->isValidOffset(offset))\n+    \/\/ We always take the cell lock before the structure lock.\n+    \/\/ We must take the cell lock to prevent places like JSArray::unshiftCountWithArrayStorage\n+    \/\/ from changing the butterfly out from under us.\n+    ConcurrentJSLocker locker { expectedStructure->lock() };\n+    if (!expectedStructure->isValidOffset(offset))\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/JSObject.h","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+    ReadOnlyOrAccessorOrCustomAccessorOrValue = ReadOnly | Accessor | CustomAccessor | CustomValue,\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/PropertySlot.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1847,0 +1847,3 @@\n+    if (string.is8Bit())\n+        return JSValue::encode(stringValue);\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/StringPrototype.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1434,0 +1434,13 @@\n+bool ClassInfo::hasStaticReadOnlyOrGetterSetterProperty(UniquedStringImpl* uid) const\n+{\n+    for (const ClassInfo* ci = this; ci; ci = ci->parentClass) {\n+        if (const HashTable* table = ci->staticPropHashTable) {\n+            if (!table->hasSetterOrReadonlyProperties)\n+                continue;\n+            if (const HashTableValue* entry = table->entry(uid))\n+                return entry->attributes() & PropertyAttribute::ReadOnlyOrAccessorOrCustomAccessorOrValue;\n+        }\n+    }\n+    return false;\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/Structure.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -3684,1 +3684,1 @@\n-    PatchpointValue* patch = m_proc.add<PatchpointValue>(B3::Void, origin());\n+    PatchpointValue* patch = m_proc.add<PatchpointValue>(B3::Void, origin(), cloningForbidden(Patchpoint));\n@@ -3709,1 +3709,1 @@\n-    PatchpointValue* patch = m_proc.add<PatchpointValue>(B3::Void, origin());\n+    PatchpointValue* patch = m_proc.add<PatchpointValue>(B3::Void, origin(), cloningForbidden(Patchpoint));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmB3IRGenerator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1227,1 +1227,1 @@\n-    walkExpressionStack(args, [&](VirtualRegister& arg, VirtualRegister slot) {\n+    walkExpressionStack(args, m_stackSize + args.size(), [&](VirtualRegister& arg, VirtualRegister slot) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmLLIntGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -206,2 +206,6 @@\n-        || u_hasBinaryProperty(codePoint, UCHAR_DEFAULT_IGNORABLE_CODE_POINT)\n-        || ublock_getCode(codePoint) == UBLOCK_IPA_EXTENSIONS)\n+        || u_hasBinaryProperty(codePoint, UCHAR_DEFAULT_IGNORABLE_CODE_POINT))\n+        return true;\n+\n+    auto block = ublock_getCode(codePoint);\n+    if (block == UBLOCK_IPA_EXTENSIONS\n+        || block == UBLOCK_DESERET)\n@@ -217,0 +221,4 @@\n+    case 0x1E9C: \/* LATIN SMALL LETTER LONG S WITH DIAGONAL STROKE *\/\n+    case 0x1E9D: \/* LATIN SMALL LETTER LONG S WITH HIGH STROKE *\/\n+    case 0x1EFE: \/* LATIN CAPITAL LETTER Y WITH LOOP *\/\n+    case 0x1EFF: \/* LATIN SMALL LETTER Y WITH LOOP *\/\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/URLHelpers.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -107,0 +107,1 @@\n+    EvaluateJavaScriptWithoutTransientActivation,\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/cocoa\/RuntimeApplicationChecksCocoa.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -299,1 +299,0 @@\n-    ASSERT(m_hasPendingActivity);\n@@ -303,0 +302,6 @@\n+    if (!event.isTrusted()) {\n+        EventDispatcher::dispatchEvent({ this }, event);\n+        return;\n+    }\n+\n+    ASSERT(m_hasPendingActivity);\n@@ -315,1 +320,0 @@\n-    if (event.isTrusted())\n@@ -317,1 +321,0 @@\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/IDBRequest.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -311,1 +311,2 @@\n-        if (!frame || !MixedContentChecker::canRunInsecureContent(*frame, document.securityOrigin(), m_url)) {\n+        \/\/ In particular we need to match the error messaging in the console and the inspector instrumentation. See WebSocketChannel::fail.\n+        if (!frame || !MixedContentChecker::frameAndAncestorsCanRunInsecureContent(*frame, document.securityOrigin(), m_url)) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/websockets\/WebSocket.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -417,4 +417,2 @@\n-        \/\/ FIXME: make this mixed content check equivalent to the document mixed content check currently in WebSocket::connect()\n-        if (auto* frame = document.frame()) {\n-            if (auto errorString = MixedContentChecker::checkForMixedContentInFrameTree(*frame, url)) {\n-                peer->fail(WTFMove(errorString).value());\n+        if (document.frame() && !MixedContentChecker::frameAndAncestorsCanRunInsecureContent(*document.frame(), document.securityOrigin(), url, MixedContentChecker::ShouldLogWarning::No)) {\n+            peer->fail(makeString(\"The page at \", document.url().stringCenterEllipsizedToLength(), \" was blocked from connecting insecurely to \", url.stringCenterEllipsizedToLength(), \" either because the protocol is insecure or the page is embedded from an insecure page.\"));\n@@ -423,1 +421,0 @@\n-        }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/websockets\/WorkerThreadableWebSocketChannel.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1100,2 +1100,1 @@\n-                if (operation->isTranslateTransformOperationType()) {\n-                    auto translation = downcast<TranslateTransformOperation>(operation.get());\n+                if (auto* translation = dynamicDowncast<TranslateTransformOperation>(operation.get())) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/animation\/KeyframeEffect.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+enum class RemoveTransientActivation : bool { No, Yes };\n@@ -41,1 +42,1 @@\n-    RunJavaScriptParameters(String&& source, URL&& sourceURL, RunAsAsyncFunction runAsAsyncFunction, std::optional<ArgumentWireBytesMap>&& arguments, ForceUserGesture forceUserGesture)\n+    RunJavaScriptParameters(String&& source, URL&& sourceURL, RunAsAsyncFunction runAsAsyncFunction, std::optional<ArgumentWireBytesMap>&& arguments, ForceUserGesture forceUserGesture, RemoveTransientActivation removeTransientActivation)\n@@ -47,0 +48,1 @@\n+        , removeTransientActivation(removeTransientActivation)\n@@ -50,1 +52,1 @@\n-    RunJavaScriptParameters(const String& source, URL&& sourceURL, bool runAsAsyncFunction, std::optional<ArgumentWireBytesMap>&& arguments, bool forceUserGesture)\n+    RunJavaScriptParameters(const String& source, URL&& sourceURL, bool runAsAsyncFunction, std::optional<ArgumentWireBytesMap>&& arguments, bool forceUserGesture, RemoveTransientActivation removeTransientActivation)\n@@ -56,0 +58,1 @@\n+        , removeTransientActivation(removeTransientActivation)\n@@ -59,1 +62,1 @@\n-    RunJavaScriptParameters(String&& source, URL&& sourceURL, bool runAsAsyncFunction, std::optional<ArgumentWireBytesMap>&& arguments, bool forceUserGesture)\n+    RunJavaScriptParameters(String&& source, URL&& sourceURL, bool runAsAsyncFunction, std::optional<ArgumentWireBytesMap>&& arguments, bool forceUserGesture, RemoveTransientActivation removeTransientActivation)\n@@ -65,0 +68,1 @@\n+        , removeTransientActivation(removeTransientActivation)\n@@ -73,0 +77,1 @@\n+    RemoveTransientActivation removeTransientActivation;\n@@ -76,1 +81,1 @@\n-        encoder << source << sourceURL << runAsAsyncFunction << arguments << forceUserGesture;\n+        encoder << source << sourceURL << runAsAsyncFunction << arguments << forceUserGesture << removeTransientActivation;\n@@ -101,1 +106,5 @@\n-        return { RunJavaScriptParameters { WTFMove(source), WTFMove(sourceURL), runAsAsyncFunction, WTFMove(arguments), forceUserGesture } };\n+        RemoveTransientActivation removeTransientActivation;\n+        if (!decoder.decode(removeTransientActivation))\n+            return std::nullopt;\n+\n+        return { RunJavaScriptParameters { WTFMove(source), WTFMove(sourceURL), runAsAsyncFunction, WTFMove(arguments), forceUserGesture, removeTransientActivation } };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/RunJavaScriptParameters.h","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -579,1 +579,1 @@\n-    auto result = executeScriptInWorld(world, { script, URL { }, false, std::nullopt, forceUserGesture });\n+    auto result = executeScriptInWorld(world, { script, URL { }, false, std::nullopt, forceUserGesture, RemoveTransientActivation::No });\n@@ -597,0 +597,9 @@\n+    if (parameters.forceUserGesture == ForceUserGesture::Yes && UserGestureIndicator::currentUserGesture() && parameters.removeTransientActivation == RemoveTransientActivation::Yes) {\n+        UserGestureIndicator::currentUserGesture()->addDestructionObserver([](UserGestureToken& token) {\n+            token.forEachImpactedDocument([](Document& document) {\n+                if (auto* window = document.domWindow())\n+                    window->consumeTransientActivation();\n+            });\n+        });\n+    }\n+\n@@ -708,1 +717,1 @@\n-    return executeScriptInWorld(world, { script, URL { }, false, std::nullopt, forceUserGesture });\n+    return executeScriptInWorld(world, { script, URL { }, false, std::nullopt, forceUserGesture, RemoveTransientActivation::No });\n@@ -713,0 +722,1 @@\n+    auto runAsAsyncFunction = parameters.runAsAsyncFunction;\n@@ -715,1 +725,1 @@\n-    if (parameters.runAsAsyncFunction == RunAsAsyncFunction::No || !result || !result.value().isObject()) {\n+    if (runAsAsyncFunction == RunAsAsyncFunction::No || !result || !result.value().isObject()) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/ScriptController.cpp","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -7415,0 +7415,1 @@\n+            $hasSetter = \"true\";\n@@ -7417,0 +7418,1 @@\n+            $hasSetter = \"true\";\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/scripts\/CodeGeneratorJS.pm","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3877,1 +3877,1 @@\n-    \/\/ Only prevent navigations by unsandboxed iframes. Such navigations by unsandboxed iframes would have already been blocked unless\n+    \/\/ Only prevent navigations by unsandboxed iframes. Such navigations by sandboxed iframes would have already been blocked unless\n@@ -3879,1 +3879,3 @@\n-    if (sandboxFlags() != SandboxNone) {\n+    \/\/ We also want to guard against bypassing this block via an iframe-provided CSP sandbox.\n+    auto* ownerElement = m_frame->ownerElement();\n+    if ((!ownerElement || ownerElement->sandboxFlags() == sandboxFlags()) && sandboxFlags() != SandboxNone) {\n@@ -3894,2 +3896,2 @@\n-    if (targetDocument && (targetDocument->securityOrigin().isSameOriginDomain(SecurityOrigin::create(destinationURL)) || areRegistrableDomainsEqual(targetDocument->url(), destinationURL)))\n-        return false;\n+    if (!targetDocument)\n+        return true;\n@@ -3897,0 +3899,1 @@\n+    if (targetDocument->securityOrigin().protocol() != destinationURL.protocol())\n@@ -3898,0 +3901,2 @@\n+\n+    return !(targetDocument->securityOrigin().isSameOriginDomain(SecurityOrigin::create(destinationURL)) || areRegistrableDomainsEqual(targetDocument->url(), destinationURL));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Document.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1755,0 +1755,2 @@\n+    bool isNavigationBlockedByThirdPartyIFrameRedirectBlocking(Frame& targetFrame, const URL& destinationURL);\n+\n@@ -1857,1 +1859,0 @@\n-    bool isNavigationBlockedByThirdPartyIFrameRedirectBlocking(Frame& targetFrame, const URL& destinationURL);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Document.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -103,0 +103,5 @@\n+void UserGestureToken::forEachImpactedDocument(Function<void(Document&)>&& function)\n+{\n+    m_documentsImpactedByUserGesture.forEach(function);\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/UserGestureIndicator.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -108,0 +108,2 @@\n+    void forEachImpactedDocument(Function<void(Document&)>&&);\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/UserGestureIndicator.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -195,0 +195,1 @@\n+    page->settings().setLinkPreloadEnabled(false);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/editing\/markup.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -63,0 +63,2 @@\n+    void ref() { refCanvasBase(); }\n+    void deref() { derefCanvasBase(); }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/CanvasBase.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -145,0 +145,3 @@\n+    using HTMLElement::ref;\n+    using HTMLElement::deref;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLCanvasElement.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -512,1 +512,1 @@\n-                    MixedContentChecker::checkFormForMixedContent(*topFrame, topFrame->document()->securityOrigin(), document().completeURL(m_attributes.action()));\n+                    MixedContentChecker::checkFormForMixedContent(*topFrame, document().completeURL(m_attributes.action()));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLFormElement.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -114,3 +114,3 @@\n-        placeholderData->canvas = detachedCanvas->takePlaceholderCanvas();\n-        if (placeholderData->canvas) {\n-            auto& placeholderContext = downcast<PlaceholderRenderingContext>(*placeholderData->canvas->renderingContext());\n+        if (RefPtr canvas = detachedCanvas->takePlaceholderCanvas().get()) {\n+            placeholderData->canvas = canvas;\n+            auto& placeholderContext = downcast<PlaceholderRenderingContext>(*canvas->renderingContext());\n@@ -474,0 +474,1 @@\n+    Ref protectedCanvas { canvas };\n@@ -485,2 +486,3 @@\n-        if (placeholderData->canvas && placeholderData->canvas->document().page() && placeholderData->pendingCommitBuffer) {\n-            GraphicsClient& client = placeholderData->canvas->document().page()->chrome();\n+        if (RefPtr canvas = placeholderData->canvas.get()) {\n+            if (canvas->document().page() && placeholderData->pendingCommitBuffer) {\n+                GraphicsClient& client = canvas->document().page()->chrome();\n@@ -488,1 +490,2 @@\n-            placeholderData->canvas->setImageBufferAndMarkDirty(WTFMove(imageBuffer));\n+                canvas->setImageBufferAndMarkDirty(WTFMove(imageBuffer));\n+            }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/OffscreenCanvas.cpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1680,0 +1680,1 @@\n+    Ref protectedCanvas { sourceCanvas };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/canvas\/CanvasRenderingContext2DBase.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -70,0 +70,2 @@\n+    \/\/ The \"linked resource fetch setup steps\" are defined as part of:\n+    \/\/ https:\/\/html.spec.whatwg.org\/#link-type-manifest\n@@ -78,1 +80,1 @@\n-        FetchOptions::Mode::NoCors,\n+        FetchOptions::Mode::Cors,\n@@ -84,0 +86,1 @@\n+    options.sameOriginDataURLFlag = SameOriginDataURLFlag::Set;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/ApplicationManifestLoader.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -659,0 +659,18 @@\n+    if (auto requester = m_triggeringAction.requester(); requester && requester->documentIdentifier) {\n+        if (RefPtr requestingDocument = Document::allDocumentsMap().get(requester->documentIdentifier); requestingDocument && requestingDocument->frame()) {\n+            if (m_frame && requestingDocument->isNavigationBlockedByThirdPartyIFrameRedirectBlocking(*m_frame, newRequest.url())) {\n+                DOCUMENTLOADER_RELEASE_LOG(\"willSendRequest: canceling - cross-site redirect of top frame triggered by third-party iframe\");\n+                if (m_frame->document()) {\n+                    auto message = makeString(\"Unsafe JavaScript attempt to initiate navigation for frame with URL '\"\n+                        , m_frame->document()->url().string()\n+                        , \"' from frame with URL '\"\n+                        , requestingDocument->url().string()\n+                        , \"'. The frame attempting navigation of the top-level window is cross-origin or untrusted and the user has never interacted with the frame.\");\n+                    m_frame->document()->addConsoleMessage(MessageSource::Security, MessageLevel::Error, message);\n+                }\n+                cancelMainResourceLoad(frameLoader()->cancelledError(newRequest));\n+                return completionHandler(WTFMove(newRequest));\n+            }\n+        }\n+    }\n+\n@@ -719,5 +737,4 @@\n-        if (!MixedContentChecker::canDisplayInsecureContent(*m_frame, m_frame->document()->securityOrigin(), MixedContentChecker::ContentType::Active, newRequest.url(), MixedContentChecker::AlwaysDisplayInNonStrictMode::Yes)) {\n-            cancelMainResourceLoad(frameLoader()->cancelledError(newRequest));\n-            return completionHandler(WTFMove(newRequest));\n-        }\n-        if (!topFrame || !MixedContentChecker::canDisplayInsecureContent(*m_frame, topFrame->document()->securityOrigin(), MixedContentChecker::ContentType::Active, newRequest.url())) {\n+        \/\/ We shouldn't check for mixed content against the current frame when navigating; we only need to be concerned with the ancestor frames.\n+        auto* parentFrame = dynamicDowncast<Frame>(m_frame->tree().parent());\n+        ASSERT(parentFrame && topFrame);\n+        if (!MixedContentChecker::frameAndAncestorsCanDisplayInsecureContent(*parentFrame, MixedContentChecker::ContentType::Active, newRequest.url())) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/DocumentLoader.cpp","additions":22,"deletions":5,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -621,1 +621,1 @@\n-        if (!MixedContentChecker::canRunInsecureContent(*frame, m_document.securityOrigin(), requestURL))\n+        if (!MixedContentChecker::frameAndAncestorsCanRunInsecureContent(*frame, m_document.securityOrigin(), requestURL))\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/DocumentThreadableLoader.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3619,0 +3619,7 @@\n+    bool requesterSandboxedFromScripts = action.requester() ? (action.requester()->sandboxFlags & SandboxScripts) : false;\n+    if (requesterSandboxedFromScripts) {\n+        \/\/ FIXME: This message should be moved off the console once a solution to https:\/\/bugs.webkit.org\/show_bug.cgi?id=103274 exists.\n+        \/\/ This message is identical to the message in ScriptController::canExecuteScripts.\n+        if (auto* document = m_frame.document())\n+            document->addConsoleMessage(MessageSource::Security, MessageLevel::Error, \"Blocked script execution in '\" + action.requester()->url.stringCenterEllipsizedToLength() + \"' because the document's frame is sandboxed and the 'allow-scripts' permission is not set.\");\n+    } else\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/FrameLoader.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (C) 2013-2017 Apple Inc. All rights reserved.\n+ * Copyright (C) 2013-2023 Apple Inc. All rights reserved.\n@@ -36,3 +36,0 @@\n-#include \"FrameDestructionObserverInlines.h\"\n-#include \"FrameLoader.h\"\n-#include \"FrameLoaderClient.h\"\n@@ -40,3 +37,0 @@\n-#include \"Settings.h\"\n-#include <wtf\/text\/CString.h>\n-#include <wtf\/text\/WTFString.h>\n@@ -46,2 +40,1 @@\n-\/\/ static\n-bool MixedContentChecker::isMixedContent(SecurityOrigin& securityOrigin, const URL& url)\n+static bool isMixedContent(const Document& document, const URL& url)\n@@ -49,4 +42,3 @@\n-    if (securityOrigin.protocol() != \"https\"_s)\n-        return false; \/\/ We only care about HTTPS security origins.\n-\n-    \/\/ We're in a secure context, so |url| is mixed content if it's insecure.\n+    \/\/ sandboxed iframes have an opaque origin so we should perform the mixed content check considering the origin\n+    \/\/ the iframe would have had if it were not sandboxed.\n+    if (document.securityOrigin().protocol() == \"https\"_s || (document.securityOrigin().isOpaque() && document.url().protocolIs(\"https\"_s)))\n@@ -54,0 +46,2 @@\n+\n+    return false;\n@@ -56,0 +50,22 @@\n+static bool foundMixedContentInFrameTree(const Frame& frame, const URL& url)\n+{\n+    auto* document = frame.document();\n+\n+    while (document) {\n+        if (isMixedContent(*document, url))\n+            return true;\n+\n+        auto* frame = document->frame();\n+        if (!frame || frame->isMainFrame())\n+            break;\n+\n+        auto* abstractParentFrame = frame->tree().parent();\n+        RELEASE_ASSERT_WITH_MESSAGE(abstractParentFrame, \"Should never have a parentless non main frame\");\n+        if (auto* parentFrame = dynamicDowncast<Frame>(abstractParentFrame))\n+            document = parentFrame->document();\n+    }\n+\n+    return false;\n+}\n+\n+\n@@ -63,1 +79,1 @@\n-bool MixedContentChecker::canDisplayInsecureContent(Frame& frame, SecurityOrigin& securityOrigin, ContentType type, const URL& url, AlwaysDisplayInNonStrictMode alwaysDisplayInNonStrictMode)\n+bool MixedContentChecker::frameAndAncestorsCanDisplayInsecureContent(Frame& frame, ContentType type, const URL& url)\n@@ -65,1 +81,1 @@\n-    if (!isMixedContent(securityOrigin, url))\n+    if (!foundMixedContentInFrameTree(frame, url))\n@@ -71,5 +87,1 @@\n-    bool isStrictMode = frame.document()->isStrictMixedContentMode();\n-    if (!isStrictMode && alwaysDisplayInNonStrictMode == AlwaysDisplayInNonStrictMode::Yes)\n-        return true;\n-\n-    bool allowed = !isStrictMode && (frame.settings().allowDisplayOfInsecureContent() || type == ContentType::ActiveCanWarn) && !frame.document()->geolocationAccessed();\n+    bool allowed = !frame.document()->isStrictMixedContentMode() && (frame.settings().allowDisplayOfInsecureContent() || type == ContentType::ActiveCanWarn) && !frame.document()->geolocationAccessed();\n@@ -86,1 +98,1 @@\n-bool MixedContentChecker::canRunInsecureContent(Frame& frame, SecurityOrigin& securityOrigin, const URL& url)\n+bool MixedContentChecker::frameAndAncestorsCanRunInsecureContent(Frame& frame, SecurityOrigin& securityOrigin, const URL& url, ShouldLogWarning shouldLogWarning)\n@@ -88,1 +100,1 @@\n-    if (!isMixedContent(securityOrigin, url))\n+    if (!foundMixedContentInFrameTree(frame, url))\n@@ -95,0 +107,1 @@\n+    if (LIKELY(shouldLogWarning == ShouldLogWarning::Yes))\n@@ -105,1 +118,1 @@\n-void MixedContentChecker::checkFormForMixedContent(Frame& frame, SecurityOrigin& securityOrigin, const URL& url)\n+void MixedContentChecker::checkFormForMixedContent(Frame& frame, const URL& url)\n@@ -112,1 +125,1 @@\n-    if (!isMixedContent(securityOrigin, url))\n+    if (!isMixedContent(*frame.document(), url))\n@@ -121,23 +134,0 @@\n-std::optional<String> MixedContentChecker::checkForMixedContentInFrameTree(const Frame& frame, const URL& url)\n-{\n-    auto* document = frame.document();\n-\n-    while (document) {\n-        RELEASE_ASSERT_WITH_MESSAGE(document->frame(), \"An unparented document tried to connect to a websocket with url: %s\", url.string().utf8().data());\n-\n-        auto* frame = document->frame();\n-        if (isMixedContent(document->securityOrigin(), url))\n-            return makeString(\"The page at \", document->url().stringCenterEllipsizedToLength(), \" was blocked from connecting insecurely to \", url.stringCenterEllipsizedToLength(), \" either because the protocol is insecure or the page is embedded from an insecure page.\");\n-\n-        if (frame->isMainFrame())\n-            break;\n-\n-        auto* parentFrame = frame->tree().parent();\n-        RELEASE_ASSERT_WITH_MESSAGE(parentFrame, \"Should never have a parentless non main frame\");\n-        if (auto* localParentFrame = dynamicDowncast<LocalFrame>(parentFrame))\n-            document = localParentFrame->document();\n-    }\n-\n-    return std::nullopt;\n-}\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/MixedContentChecker.cpp","additions":37,"deletions":47,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (C) 2023 Apple Inc. All rights reserved.\n@@ -5,2 +6,2 @@\n- * modification, are permitted provided that the following conditions are\n- * met:\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n@@ -8,1 +9,1 @@\n- *     * Redistributions of source code must retain the above copyright\n+ * 1.  Redistributions of source code must retain the above copyright\n@@ -10,7 +11,6 @@\n- *     * Redistributions in binary form must reproduce the above\n- * copyright notice, this list of conditions and the following disclaimer\n- * in the documentation and\/or other materials provided with the\n- * distribution.\n- *     * Neither the name of Google Inc. nor the names of its\n- * contributors may be used to endorse or promote products derived from\n- * this software without specific prior written permission.\n+ * 2.  Redistributions in binary form must reproduce the above copyright\n+ *     notice, this list of conditions and the following disclaimer in the\n+ *     documentation and\/or other materials provided with the distribution.\n+ * 3.  Neither the name of Apple Inc. (\"Apple\") nor the names of\n+ *     its contributors may be used to endorse or promote products derived\n+ *     from this software without specific prior written permission.\n@@ -18,11 +18,10 @@\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS \"AS IS\" AND ANY\n+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n@@ -33,1 +32,0 @@\n-#include <optional>\n@@ -35,1 +33,0 @@\n-#include <wtf\/Noncopyable.h>\n@@ -40,1 +37,0 @@\n-class FrameLoaderClient;\n@@ -43,4 +39,3 @@\n-class MixedContentChecker {\n-    WTF_MAKE_NONCOPYABLE(MixedContentChecker);\n-public:\n-    enum class ContentType {\n+namespace MixedContentChecker {\n+\n+enum class ContentType {\n@@ -49,1 +44,1 @@\n-    };\n+};\n@@ -51,4 +46,1 @@\n-    enum class AlwaysDisplayInNonStrictMode {\n-        No,\n-        Yes,\n-    };\n+enum class ShouldLogWarning { No, Yes };\n@@ -56,7 +48,3 @@\n-    \/\/ FIXME: This should probably have a separate client from FrameLoader.\n-    static bool canDisplayInsecureContent(Frame&, SecurityOrigin&, ContentType, const URL&, AlwaysDisplayInNonStrictMode = AlwaysDisplayInNonStrictMode::No);\n-    static bool canRunInsecureContent(Frame&, SecurityOrigin&, const URL&);\n-    static void checkFormForMixedContent(Frame&, SecurityOrigin&, const URL&);\n-    static bool isMixedContent(SecurityOrigin&, const URL&);\n-    static std::optional<String> checkForMixedContentInFrameTree(const Frame&, const URL&);\n-};\n+bool frameAndAncestorsCanDisplayInsecureContent(Frame&, ContentType, const URL&);\n+bool frameAndAncestorsCanRunInsecureContent(Frame&, SecurityOrigin&, const URL&, ShouldLogWarning = ShouldLogWarning::Yes);\n+void checkFormForMixedContent(Frame&, const URL&);\n@@ -64,0 +52,1 @@\n+} \/\/ namespace MixedContentChecker\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/MixedContentChecker.h","additions":29,"deletions":40,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -57,1 +57,3 @@\n-        createGlobalFrameIdentifier(document)\n+        document.identifier(),\n+        createGlobalFrameIdentifier(document),\n+        document.sandboxFlags()\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/NavigationRequester.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"SecurityContext.h\"\n@@ -43,0 +44,1 @@\n+    ScriptExecutionContextIdentifier documentIdentifier;\n@@ -44,0 +46,2 @@\n+    SandboxFlags sandboxFlags;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/NavigationRequester.h","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-        if (!MixedContentChecker::canRunInsecureContent(m_frame, document->securityOrigin(), url))\n+        if (!MixedContentChecker::frameAndAncestorsCanRunInsecureContent(m_frame, document->securityOrigin(), url))\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/SubframeLoader.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -448,5 +448,1 @@\n-            if (!MixedContentChecker::canRunInsecureContent(*frame, m_document->securityOrigin(), url))\n-                return false;\n-            auto& top = frame->tree().top();\n-            auto* localTop = dynamicDowncast<LocalFrame>(top);\n-            if (&top != frame && localTop && !MixedContentChecker::canRunInsecureContent(*localTop, localTop->document()->securityOrigin(), url))\n+            if (!MixedContentChecker::frameAndAncestorsCanRunInsecureContent(*frame, m_document->securityOrigin(), url))\n@@ -470,5 +466,1 @@\n-            if (!MixedContentChecker::canDisplayInsecureContent(*frame, m_document->securityOrigin(), contentTypeFromResourceType(type), url, MixedContentChecker::AlwaysDisplayInNonStrictMode::Yes))\n-                return false;\n-            auto& topFrame = frame->tree().top();\n-            auto* localTopFrame = dynamicDowncast<LocalFrame>(topFrame);\n-            if (!localTopFrame || !MixedContentChecker::canDisplayInsecureContent(*localTopFrame, localTopFrame->document()->securityOrigin(), contentTypeFromResourceType(type), url))\n+            if (!MixedContentChecker::frameAndAncestorsCanDisplayInsecureContent(*frame, contentTypeFromResourceType(type), url))\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/cache\/CachedResourceLoader.cpp","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2650,11 +2650,0 @@\n-#if ENABLE(TRACKING_PREVENTION)\n-    if (RefPtr document = this->document()) {\n-        if (document->settings().needsSiteSpecificQuirks() && urlStringToOpen == Quirks::BBCRadioPlayerURLString()) {\n-            auto radioPlayerDomain = RegistrableDomain(URL { Quirks::staticRadioPlayerURLString() });\n-            auto BBCDomain = RegistrableDomain(URL { Quirks::BBCRadioPlayerURLString() });\n-            if (!ResourceLoadObserver::shared().hasCrossPageStorageAccess(radioPlayerDomain, BBCDomain))\n-                return RefPtr<WindowProxy> { nullptr };\n-        }\n-    }\n-#endif\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/DOMWindow.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -480,1 +480,1 @@\n-    unsigned m_gamepadEventListenerCount { 0 };\n+    uint64_t m_gamepadEventListenerCount { 0 };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/DOMWindow.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1077,27 +1077,0 @@\n-const String& Quirks::BBCRadioPlayerURLString()\n-{\n-    static NeverDestroyed<String> BBCRadioPlayerURLString = \"https:\/\/www.bbc.co.uk\/sounds\/player\/bbc_world_service\"_s;\n-    return BBCRadioPlayerURLString;\n-}\n-\n-const String& Quirks::staticRadioPlayerURLString()\n-{\n-    static NeverDestroyed<String> staticRadioPlayerURLString = \"https:\/\/static.radioplayer.co.uk\/\"_s;\n-    return staticRadioPlayerURLString;\n-}\n-\n-static bool isBBCDomain(const RegistrableDomain& domain)\n-{\n-    static NeverDestroyed<RegistrableDomain> BBCDomain = RegistrableDomain(URL { Quirks::BBCRadioPlayerURLString() });\n-    return domain == BBCDomain;\n-}\n-\n-static bool isBBCPopUpPlayerElement(const Element& element)\n-{\n-    auto* parentElement = element.parentElement();\n-    if (!element.parentElement() || !element.parentElement()->hasClass() || !parentElement->parentElement() || !parentElement->parentElement()->hasClass())\n-        return false;\n-\n-    return element.parentElement()->classNames().contains(\"p_audioButton_buttonInner\"_s) && parentElement->parentElement()->classNames().contains(\"hidden\"_s);\n-}\n-\n@@ -1227,26 +1200,0 @@\n-\n-        static NeverDestroyed<String> BBCRadioPlayerPopUpWindowFeatureString = \"featurestring width=400,height=730\"_s;\n-        static NeverDestroyed<UserScript> BBCUserScript { \"function triggerRedirect() { document.location.href = \\\"https:\/\/www.bbc.co.uk\/sounds\/player\/bbc_world_service\\\"; } window.addEventListener('load', function () { triggerRedirect(); })\"_s, URL(aboutBlankURL()), Vector<String>(), Vector<String>(), UserScriptInjectionTime::DocumentEnd, UserContentInjectedFrames::InjectInTopFrameOnly, WaitForNotificationBeforeInjecting::Yes };\n-\n-        \/\/ BBC RadioPlayer case.\n-        if (isBBCDomain(domain) && isBBCPopUpPlayerElement(element)) {\n-            return requestStorageAccessAndHandleClick([document = m_document] (ShouldDispatchClick shouldDispatchClick) mutable {\n-                if (!document || shouldDispatchClick == ShouldDispatchClick::No)\n-                    return;\n-\n-                auto domWindow = document->domWindow();\n-                if (domWindow) {\n-                    ExceptionOr<RefPtr<WindowProxy>> proxyOrException = domWindow->open(*domWindow, *domWindow, staticRadioPlayerURLString(), emptyAtom(), BBCRadioPlayerPopUpWindowFeatureString);\n-                    if (proxyOrException.hasException())\n-                        return;\n-                    auto proxy = proxyOrException.releaseReturnValue();\n-                    auto* abstractFrame = proxy->frame();\n-                    if (is<Frame>(abstractFrame)) {\n-                        auto* frame = downcast<Frame>(abstractFrame);\n-                        auto world = ScriptController::createWorld(\"bbcRadioPlayerWorld\"_s, ScriptController::WorldType::User);\n-                        frame->addUserScriptAwaitingNotification(world.get(), BBCUserScript);\n-                        return;\n-                    }\n-                }\n-            });\n-        }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/Quirks.cpp","additions":0,"deletions":53,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -146,2 +146,0 @@\n-    static const String& BBCRadioPlayerURLString();\n-    WEBCORE_EXPORT static const String& staticRadioPlayerURLString();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/Quirks.h","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-SPECIALIZE_TYPE_TRAITS_TRANSFORMOPERATION(WebCore::IdentityTransformOperation, type() == WebCore::TransformOperation::Type::Identity)\n+SPECIALIZE_TYPE_TRAITS_TRANSFORMOPERATION(WebCore::IdentityTransformOperation, WebCore::TransformOperation::Type::Identity ==)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/transforms\/IdentityTransformOperation.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-SPECIALIZE_TYPE_TRAITS_TRANSFORMOPERATION(WebCore::Matrix3DTransformOperation, type() == WebCore::TransformOperation::Type::Matrix3D)\n+SPECIALIZE_TYPE_TRAITS_TRANSFORMOPERATION(WebCore::Matrix3DTransformOperation, WebCore::TransformOperation::Type::Matrix3D ==)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/transforms\/Matrix3DTransformOperation.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-SPECIALIZE_TYPE_TRAITS_TRANSFORMOPERATION(WebCore::MatrixTransformOperation, type() == WebCore::TransformOperation::Type::Matrix)\n+SPECIALIZE_TYPE_TRAITS_TRANSFORMOPERATION(WebCore::MatrixTransformOperation, WebCore::TransformOperation::Type::Matrix ==)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/transforms\/MatrixTransformOperation.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-SPECIALIZE_TYPE_TRAITS_TRANSFORMOPERATION(WebCore::PerspectiveTransformOperation, type() == WebCore::TransformOperation::Type::Perspective)\n+SPECIALIZE_TYPE_TRAITS_TRANSFORMOPERATION(WebCore::PerspectiveTransformOperation, WebCore::TransformOperation::Type::Perspective ==)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/transforms\/PerspectiveTransformOperation.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    ASSERT(isRotateTransformOperationType());\n+    RELEASE_ASSERT(isRotateTransformOperationType(type));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/transforms\/RotateTransformOperation.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-SPECIALIZE_TYPE_TRAITS_TRANSFORMOPERATION(WebCore::RotateTransformOperation, isRotateTransformOperationType())\n+SPECIALIZE_TYPE_TRAITS_TRANSFORMOPERATION(WebCore::RotateTransformOperation, WebCore::TransformOperation::isRotateTransformOperationType)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/transforms\/RotateTransformOperation.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-    ASSERT(isScaleTransformOperationType());\n+    RELEASE_ASSERT(isScaleTransformOperationType(type));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/transforms\/ScaleTransformOperation.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-SPECIALIZE_TYPE_TRAITS_TRANSFORMOPERATION(WebCore::ScaleTransformOperation, isScaleTransformOperationType())\n+SPECIALIZE_TYPE_TRAITS_TRANSFORMOPERATION(WebCore::ScaleTransformOperation, WebCore::TransformOperation::isScaleTransformOperationType)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/transforms\/ScaleTransformOperation.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    ASSERT(isSkewTransformOperationType());\n+    RELEASE_ASSERT(isSkewTransformOperationType(type));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/transforms\/SkewTransformOperation.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-SPECIALIZE_TYPE_TRAITS_TRANSFORMOPERATION(WebCore::SkewTransformOperation, isSkewTransformOperationType())\n+SPECIALIZE_TYPE_TRAITS_TRANSFORMOPERATION(WebCore::SkewTransformOperation, WebCore::TransformOperation::isSkewTransformOperationType)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/transforms\/SkewTransformOperation.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-    bool isRotateTransformOperationType() const\n+    static bool isRotateTransformOperationType(Type type)\n@@ -112,1 +112,5 @@\n-        return type() == Type::RotateX || type() == Type::RotateY || type() == Type::RotateZ || type() == Type::Rotate || type() == Type::Rotate3D;\n+        return type == Type::RotateX\n+            || type == Type::RotateY\n+            || type == Type::RotateZ\n+            || type == Type::Rotate\n+            || type == Type::Rotate3D;\n@@ -115,1 +119,1 @@\n-    bool isScaleTransformOperationType() const\n+    static bool isScaleTransformOperationType(Type type)\n@@ -117,1 +121,5 @@\n-        return type() == Type::ScaleX || type() == Type::ScaleY || type() == Type::ScaleZ || type() == Type::Scale || type() == Type::Scale3D;\n+        return type == Type::ScaleX\n+            || type == Type::ScaleY\n+            || type == Type::ScaleZ\n+            || type == Type::Scale\n+            || type == Type::Scale3D;\n@@ -120,1 +128,1 @@\n-    bool isSkewTransformOperationType() const\n+    static bool isSkewTransformOperationType(Type type)\n@@ -122,1 +130,3 @@\n-        return type() == Type::SkewX || type() == Type::SkewY || type() == Type::Skew;\n+        return type == Type::SkewX\n+            || type == Type::SkewY\n+            || type == Type::Skew;\n@@ -125,1 +135,1 @@\n-    bool isTranslateTransformOperationType() const\n+    static bool isTranslateTransformOperationType(Type type)\n@@ -127,1 +137,5 @@\n-        return type() == Type::TranslateX || type() == Type::TranslateY || type() == Type::TranslateZ || type() == Type::Translate || type() == Type::Translate3D;\n+        return type == Type::TranslateX\n+            || type == Type::TranslateY\n+            || type == Type::TranslateZ\n+            || type == Type::Translate\n+            || type == Type::Translate3D;\n@@ -176,1 +190,1 @@\n-    static bool isType(const WebCore::TransformOperation& operation) { return operation.predicate; } \\\n+    static bool isType(const WebCore::TransformOperation& operation) { return predicate(operation.type()); } \\\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/transforms\/TransformOperation.h","additions":23,"deletions":9,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    ASSERT(isTranslateTransformOperationType());\n+    RELEASE_ASSERT(isTranslateTransformOperationType(type));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/transforms\/TranslateTransformOperation.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-SPECIALIZE_TYPE_TRAITS_TRANSFORMOPERATION(WebCore::TranslateTransformOperation, isTranslateTransformOperationType())\n+SPECIALIZE_TYPE_TRAITS_TRANSFORMOPERATION(WebCore::TranslateTransformOperation, WebCore::TransformOperation::isTranslateTransformOperationType)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/transforms\/TranslateTransformOperation.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-enum class PaintBehavior : uint16_t {\n+enum class PaintBehavior : uint32_t {\n@@ -74,0 +74,1 @@\n+    DontShowVisitedLinks                = 1 << 16,\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/PaintPhase.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1820,0 +1820,5 @@\n+    \/\/ FIXME : CSS Masonry does not properly handle baseline calculations currently.\n+    \/\/ We will just skip this running this step if we detect the RenderGrid is Masonry for now.\n+    if (isMasonry())\n+        return LayoutUnit { };\n+\n@@ -1831,0 +1836,5 @@\n+    \/\/ FIXME : CSS Masonry does not properly handle baseline calculations currently.\n+    \/\/ We will just skip this running this step if we detect the RenderGrid is Masonry for now.\n+    if (isMasonry())\n+        return LayoutUnit { };\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderGrid.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -885,0 +885,5 @@\n+        if (!layoutBox()) {\n+            \/\/ Repaint may be issued on subtrees during content mutation with newly inserted renderers.\n+            ASSERT(needsLayout());\n+            return LayoutSize();\n+        }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderInline.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3265,0 +3265,3 @@\n+        if (filterContext)\n+            localPaintingInfo.paintBehavior.add(PaintBehavior::DontShowVisitedLinks);\n+\n@@ -3699,0 +3702,3 @@\n+    if (localPaintingInfo.paintBehavior & PaintBehavior::DontShowVisitedLinks)\n+        localPaintBehavior.add(PaintBehavior::DontShowVisitedLinks);\n+\n@@ -5730,0 +5736,1 @@\n+    case PaintBehavior::DontShowVisitedLinks: ts << \"DontShowVisitedLinks\"; break;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderLayer.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-            auto color = TextDecorationPainter::decorationColor(*renderStyle.get());\n+            auto color = TextDecorationPainter::decorationColor(*renderStyle.get(), paintInfo.paintBehavior);\n@@ -116,1 +116,1 @@\n-    style.textDecorationStyles = TextDecorationPainter::stylesForRenderer(renderer, lineStyle.textDecorationsInEffect(), isFirstLine);\n+    style.textDecorationStyles = TextDecorationPainter::stylesForRenderer(renderer, lineStyle.textDecorationsInEffect(), isFirstLine, paintInfo.paintBehavior);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/StyledMarkedText.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -321,1 +321,1 @@\n-static void collectStylesForRenderer(TextDecorationPainter::Styles& result, const RenderObject& renderer, OptionSet<TextDecorationLine> remainingDecorations, bool firstLineStyle, PseudoId pseudoId)\n+static void collectStylesForRenderer(TextDecorationPainter::Styles& result, const RenderObject& renderer, OptionSet<TextDecorationLine> remainingDecorations, bool firstLineStyle, OptionSet<PaintBehavior> paintBehavior, PseudoId pseudoId)\n@@ -327,1 +327,1 @@\n-        auto color = TextDecorationPainter::decorationColor(style);\n+        auto color = TextDecorationPainter::decorationColor(style, paintBehavior);\n@@ -378,1 +378,1 @@\n-Color TextDecorationPainter::decorationColor(const RenderStyle& style)\n+Color TextDecorationPainter::decorationColor(const RenderStyle& style, OptionSet<PaintBehavior> paintBehavior)\n@@ -380,1 +380,1 @@\n-    return style.visitedDependentColorWithColorFilter(CSSPropertyTextDecorationColor);\n+    return style.visitedDependentColorWithColorFilter(CSSPropertyTextDecorationColor, paintBehavior);\n@@ -383,1 +383,1 @@\n-auto TextDecorationPainter::stylesForRenderer(const RenderObject& renderer, OptionSet<TextDecorationLine> requestedDecorations, bool firstLineStyle, PseudoId pseudoId) -> Styles\n+auto TextDecorationPainter::stylesForRenderer(const RenderObject& renderer, OptionSet<TextDecorationLine> requestedDecorations, bool firstLineStyle, OptionSet<PaintBehavior> paintBehavior, PseudoId pseudoId) -> Styles\n@@ -389,1 +389,1 @@\n-    collectStylesForRenderer(result, renderer, requestedDecorations, false, pseudoId);\n+    collectStylesForRenderer(result, renderer, requestedDecorations, false, paintBehavior, pseudoId);\n@@ -391,1 +391,1 @@\n-        collectStylesForRenderer(result, renderer, requestedDecorations, true, pseudoId);\n+        collectStylesForRenderer(result, renderer, requestedDecorations, true, paintBehavior, pseudoId);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/TextDecorationPainter.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -81,2 +81,2 @@\n-    static Color decorationColor(const RenderStyle&);\n-    static Styles stylesForRenderer(const RenderObject&, OptionSet<TextDecorationLine> requestedDecorations, bool firstLineStyle = false, PseudoId = PseudoId::None);\n+    static Color decorationColor(const RenderStyle&, OptionSet<PaintBehavior> paintBehavior = { });\n+    static Styles stylesForRenderer(const RenderObject&, OptionSet<TextDecorationLine> requestedDecorations, bool firstLineStyle = false, OptionSet<PaintBehavior> paintBehavior = { }, PseudoId = PseudoId::None);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/TextDecorationPainter.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-    paintStyle.fillColor = lineStyle.visitedDependentColorWithColorFilter(CSSPropertyWebkitTextFillColor);\n+    paintStyle.fillColor = lineStyle.visitedDependentColorWithColorFilter(CSSPropertyWebkitTextFillColor, paintInfo.paintBehavior);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/TextPaintStyle.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2368,1 +2368,1 @@\n-Color RenderStyle::visitedDependentColor(CSSPropertyID colorProperty) const\n+Color RenderStyle::visitedDependentColor(CSSPropertyID colorProperty, OptionSet<PaintBehavior> paintBehavior) const\n@@ -2374,0 +2374,3 @@\n+    if (paintBehavior.contains(PaintBehavior::DontShowVisitedLinks))\n+        return unvisitedColor;\n+\n@@ -2393,1 +2396,1 @@\n-Color RenderStyle::visitedDependentColorWithColorFilter(CSSPropertyID colorProperty) const\n+Color RenderStyle::visitedDependentColorWithColorFilter(CSSPropertyID colorProperty, OptionSet<PaintBehavior> paintBehavior) const\n@@ -2396,1 +2399,1 @@\n-        return visitedDependentColor(colorProperty);\n+        return visitedDependentColor(colorProperty, paintBehavior);\n@@ -2398,1 +2401,1 @@\n-    return colorByApplyingColorFilter(visitedDependentColor(colorProperty));\n+    return colorByApplyingColorFilter(visitedDependentColor(colorProperty, paintBehavior));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/style\/RenderStyle.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -141,0 +141,2 @@\n+enum class PaintBehavior : uint32_t;\n+\n@@ -1663,2 +1665,2 @@\n-    WEBCORE_EXPORT Color visitedDependentColor(CSSPropertyID) const;\n-    WEBCORE_EXPORT Color visitedDependentColorWithColorFilter(CSSPropertyID) const;\n+    WEBCORE_EXPORT Color visitedDependentColor(CSSPropertyID, OptionSet<PaintBehavior> paintBehavior = { }) const;\n+    WEBCORE_EXPORT Color visitedDependentColorWithColorFilter(CSSPropertyID, OptionSet<PaintBehavior> paintBehavior = { }) const;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/style\/RenderStyle.h","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-    auto* element = this->element(renderer->document());\n+    RefPtr element = this->element(renderer->document());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/style\/StyleCanvasImage.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1209,1 +1209,0 @@\n-    auto& valueList = downcast<CSSValueList>(value);\n@@ -1211,0 +1210,2 @@\n+    if (is<CSSValueList>(value))  {\n+        auto& valueList = downcast<CSSValueList>(value);\n@@ -1214,0 +1215,4 @@\n+    } else {\n+        trackSizes.reserveInitialCapacity(1);\n+        validateValueAndAppend(trackSizes, value);\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/style\/StyleBuilderConverter.h","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1580,3 +1580,3 @@\n-    for (auto& item : downcast<CSSValueList>(value)) {\n-        if (item->isImage()) {\n-            builderState.style().setContent(builderState.createStyleImage(item.get()), didSet);\n+    auto processSingleValue = [&] (const CSSValue& item) {\n+        if (item.isImage()) {\n+            builderState.style().setContent(builderState.createStyleImage(item), didSet);\n@@ -1584,1 +1584,1 @@\n-            continue;\n+            return;\n@@ -1587,1 +1587,1 @@\n-        auto* primitive = dynamicDowncast<CSSPrimitiveValue>(item.get());\n+        auto* primitive = dynamicDowncast<CSSPrimitiveValue>(item);\n@@ -1603,1 +1603,1 @@\n-        } else if (item->isCounter()) {\n+        } else if (item.isCounter()) {\n@@ -1605,1 +1605,1 @@\n-            auto& counter = downcast<CSSCounterValue>(item.get());\n+            auto& counter = downcast<CSSCounterValue>(item);\n@@ -1610,1 +1610,1 @@\n-            switch (item->valueID()) {\n+            switch (item.valueID()) {\n@@ -1632,0 +1632,6 @@\n+    };\n+    if (is<CSSValueList>(value)) {\n+        for (auto& item : downcast<CSSValueList>(value))\n+            processSingleValue(item);\n+    } else {\n+        processSingleValue(value);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/style\/StyleBuilderCustom.h","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+    m_animationCallbacks.clear();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerAnimationController.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}