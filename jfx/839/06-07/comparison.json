{"files":[{"patch":"@@ -2818,11 +2818,1 @@\n-            if (isCellSelectionEnabled()) {\n-                int columnCount = tableView.getVisibleLeafColumns().size();\n-                for (int col = 0; col < columnCount; col++) {\n-                    if (selectedCellsMap.isSelected(index, col)) {\n-                        return true;\n-                    }\n-                }\n-                return false;\n-            } else {\n-                return selectedCellsMap.isSelected(index, -1);\n-            }\n+            return super.isSelected(index);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableView.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import javafx.scene.control.cell.PropertyValueFactory;\n+import test.com.sun.javafx.scene.control.test.Person;\n@@ -921,0 +923,73 @@\n+\n+    @Test\n+    public void testRowSelectionAfterSelectAndHideLastColumnMultipleCellEnabled() {\n+        assertRowSelectionAfterSelectAndHideLastColumn(SelectionMode.MULTIPLE, true);\n+    }\n+\n+    @Test\n+    public void testRowSelectionAfterSelectAndHideLastColumnMultipleNotCellEnabled() {\n+        assertRowSelectionAfterSelectAndHideLastColumn(SelectionMode.MULTIPLE, false);\n+    }\n+\n+    @Test\n+    public void testRowSelectionAfterSelectAndHideLastColumnSingleCellEnabled() {\n+        assertRowSelectionAfterSelectAndHideLastColumn(SelectionMode.SINGLE, true);\n+    }\n+\n+    @Test\n+    public void testRowSelectionAfterSelectAndHideLastColumnSingleNotCellEnabled() {\n+        assertRowSelectionAfterSelectAndHideLastColumn(SelectionMode.SINGLE, false);\n+    }\n+\n+    public void assertRowSelectionAfterSelectAndHideLastColumn(SelectionMode mode, boolean cellEnabled) {\n+        TableView<Person> table = createPersonTableView();\n+\n+        TableView.TableViewSelectionModel<Person> sm = table.getSelectionModel();\n+        sm.setCellSelectionEnabled(cellEnabled);\n+        sm.setSelectionMode(mode);\n+        int row = 1;\n+        int col = table.getColumns().size() - 1;\n+        assertRowSelectionAfterSelectAndHideColumn(table, row, col);\n+    }\n+\n+    private void assertRowSelectionAfterSelectAndHideColumn(TableView<Person> table, int row, int col) {\n+        TableViewSelectionModel<Person> sm = table.getSelectionModel();\n+        TableColumn<Person, ?> column = table.getColumns().get(col);\n+        TablePosition<Person, ?> pos = new TablePosition<>(table, row, column);\n+\n+        sm.select(row, column);\n+        assertTrue(\"sanity: row \" + row + \"contained in selectedIndices\", sm.getSelectedIndices().contains(row));\n+        assertTrue(\"sanity: row must be selected\" , sm.isSelected(row));\n+        column.setVisible(false);\n+        assertTrue(\"after hiding column: row \" + row + \"contained in selectedIndices\", sm.getSelectedIndices().contains(row));\n+        assertTrue(\"after hiding column: row must be selected\" , sm.isSelected(row));\n+    }\n+\n+    \/**\n+     * Creates and returns a TableView with Persons and columns for all their properties.\n+     *\/\n+    private TableView<Person> createPersonTableView() {\n+        final ObservableList<Person> data =\n+                FXCollections.observableArrayList(\n+                        new Person(\"Jacob\", \"Smith\", \"jacob.smith@example.com\"),\n+                        new Person(\"Isabella\", \"Johnson\", \"isabella.johnson@example.com\"),\n+                        new Person(\"Ethan\", \"Williams\", \"ethan.williams@example.com\"),\n+                        new Person(\"Emma\", \"Jones\", \"emma.jones@example.com\"),\n+                        new Person(\"Michael\", \"Brown\", \"michael.brown@example.com\"));\n+\n+        TableView<Person> table = new TableView<>();\n+        table.setItems(data);\n+\n+        TableColumn<Person, String> firstNameCol = new TableColumn(\"First Name\");\n+        firstNameCol.setCellValueFactory(new PropertyValueFactory<Person, String>(\"firstName\"));\n+\n+        TableColumn<Person, String> lastNameCol = new TableColumn(\"Last Name\");\n+        lastNameCol.setCellValueFactory(new PropertyValueFactory<Person, String>(\"lastName\"));\n+\n+        TableColumn<Person, String> emailCol = new TableColumn(\"Email\");\n+        emailCol.setCellValueFactory(new PropertyValueFactory<Person, String>(\"email\"));\n+\n+        table.getColumns().addAll(firstNameCol, lastNameCol, emailCol);\n+\n+        return table;\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewSelectionModelImplTest.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"modified"}]}