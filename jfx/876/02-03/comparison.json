{"files":[{"patch":"@@ -0,0 +1,236 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.css.PseudoClass;\n+import javafx.event.EventTarget;\n+import javafx.scene.Node;\n+import javafx.scene.control.TableCell;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TableView.TableViewSelectionModel;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableView;\n+import javafx.scene.control.TreeTableView.TreeTableViewSelectionModel;\n+import javafx.scene.control.skin.TableColumnHeader;\n+import javafx.scene.input.MouseEvent;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n+\n+\/**\n+ * Tests for:\n+ * - NPE with null selection model JDK-8187145\n+ *\/\n+public class TreeAndTableViewTest {\n+    \/** Sorting TableView with a null selection model should not generate an NPE *\/\n+    @Test\n+    public void test_TableView_jdk_8187145() {\n+        TableView<String> table = new TableView<>();\n+        table.requestFocus();\n+        table.getColumns().addAll(\n+            createTableColumn(\"C0\"),\n+            createTableColumn(\"C1\"),\n+            createTableColumn(\"C2\")\n+            );\n+        table.getItems().addAll(\n+            \"\",\n+            \"\",\n+            \"\"\n+            );\n+\n+        \/\/ important: actually creates cells\n+        VirtualFlowTestUtils.getCell(table, 0);\n+\n+        \/\/ row selection mode\n+        TableViewSelectionModel<String> oldSelectionModel = table.getSelectionModel();\n+        table.getSelectionModel().selectAll();\n+        table.setSelectionModel(null);\n+\n+        \/\/ verify none have 'selected' pseudostyle\n+        {\n+            List cells = table.lookupAll(\".table-cell\").\n+                stream().\n+                filter((n) -> ((n instanceof TableCell) && containsPseudoclass(n, \"selected\"))).\n+                collect(Collectors.toList());\n+            assertEquals(0, cells.size());\n+        }\n+\n+        \/\/ cell selection mode\n+        table.setSelectionModel(oldSelectionModel);\n+        table.getSelectionModel().setCellSelectionEnabled(true);\n+        table.getSelectionModel().selectAll();\n+        table.setSelectionModel(null);\n+\n+        \/\/ verify none have 'selected' pseudostyle\n+        {\n+            List cells = table.lookupAll(\".table-cell\").\n+                stream().\n+                filter((n) -> ((n instanceof TableCell) && containsPseudoclass(n, \"selected\"))).\n+                collect(Collectors.toList());\n+            assertEquals(0, cells.size());\n+        }\n+\n+        \/\/ verify no NPE when sorting by clicking on every table column cell,\n+        \/\/ toggling sorting ascending -> descending -> none\n+        {\n+            for (Object x: table.lookupAll(\".table-column\")) {\n+                if (x instanceof TableColumnHeader n) {\n+                    mouseClick(n);\n+                    assertEquals(1, table.getSortOrder().size());\n+                    table.sort();\n+\n+                    mouseClick(n);\n+                    assertEquals(1, table.getSortOrder().size());\n+                    table.sort();\n+\n+                    mouseClick(n);\n+                    assertEquals(0, table.getSortOrder().size());\n+                    table.sort();\n+                }\n+            }\n+        }\n+    }\n+\n+    \/** Sorting TreeTableView with a null selection model should not generate an NPE *\/\n+    @Test\n+    public void test_TreeTableView_jdk_8187145() {\n+        TreeItem<String> root = new TreeItem<String>(\"\");\n+        root.setExpanded(true);\n+        root.getChildren().setAll(\n+            new TreeItem<>(\"\"),\n+            new TreeItem<>(\"\"),\n+            new TreeItem<>(\"\")\n+            );\n+\n+        TreeTableView<String> tree = new TreeTableView<>();\n+        tree.setRoot(root);\n+        tree.setShowRoot(false);\n+        tree.requestFocus();\n+        tree.getColumns().addAll(\n+            createTreeTableColumn(\"C0\"),\n+            createTreeTableColumn(\"C1\"),\n+            createTreeTableColumn(\"C2\")\n+            );\n+\n+        \/\/ important: actually creates cells\n+        VirtualFlowTestUtils.getCell(tree, 0);\n+\n+        \/\/ row selection mode\n+        TreeTableViewSelectionModel<String> oldSelectionModel = tree.getSelectionModel();\n+        tree.getSelectionModel().selectAll();\n+        tree.setSelectionModel(null);\n+\n+        \/\/ verify none have 'selected' pseudostyle\n+        {\n+            List cells = tree.lookupAll(\".table-cell\").\n+                stream().\n+                filter((n) -> ((n instanceof TableCell) && containsPseudoclass(n, \"selected\"))).\n+                collect(Collectors.toList());\n+            assertEquals(0, cells.size());\n+        }\n+\n+        \/\/ cell selection mode\n+        tree.setSelectionModel(oldSelectionModel);\n+        tree.getSelectionModel().setCellSelectionEnabled(true);\n+        tree.getSelectionModel().selectAll();\n+        tree.setSelectionModel(null);\n+\n+        \/\/ verify none have 'selected' pseudostyle\n+        {\n+            List cells = tree.lookupAll(\".table-cell\").\n+                stream().\n+                filter((n) -> ((n instanceof TableCell) && containsPseudoclass(n, \"selected\"))).\n+                collect(Collectors.toList());\n+            assertEquals(0, cells.size());\n+        }\n+\n+        \/\/ verify no NPE when sorting by clicking on every table column cell,\n+        \/\/ toggling sorting ascending -> descending -> none\n+        {\n+            for (Object x: tree.lookupAll(\".table-column\")) {\n+                if (x instanceof TableColumnHeader n) {\n+                    mouseClick(n);\n+                    assertEquals(1, tree.getSortOrder().size());\n+                    tree.sort();\n+\n+                    mouseClick(n);\n+                    assertEquals(1, tree.getSortOrder().size());\n+                    tree.sort();\n+\n+                    mouseClick(n);\n+                    assertEquals(0, tree.getSortOrder().size());\n+                    tree.sort();\n+                }\n+            }\n+        }\n+    }\n+\n+    protected static TreeTableColumn createTreeTableColumn(String name) {\n+        TreeTableColumn c = new TreeTableColumn(name);\n+        c.setCellValueFactory((f) -> new SimpleStringProperty(\"...\"));\n+        return c;\n+    }\n+\n+    protected static void mouseClick(EventTarget t, KeyModifier... modifiers) {\n+        MouseEventFirer m = new MouseEventFirer(t);\n+        m.fireMousePressAndRelease(modifiers);\n+        m.fireMouseEvent(MouseEvent.MOUSE_RELEASED, modifiers);\n+        m.dispose();\n+\n+        Toolkit.getToolkit().firePulse();\n+    }\n+\n+    protected static TableColumn createTableColumn(String name) {\n+        TableColumn c = new TableColumn(name);\n+        c.setCellValueFactory((f) -> new SimpleStringProperty(\"...\"));\n+        return c;\n+    }\n+\n+    protected static <T extends Node> List<T> collectNodes(Node root, String selector, Class<T> type) {\n+        return (List<T>)root.\n+            lookupAll(selector).\n+            stream().\n+            filter((n) -> (n.getClass().isAssignableFrom(type))).\n+            collect(Collectors.toList());\n+    }\n+\n+    protected static boolean containsPseudoclass(Node n, String pseudoclass) {\n+        for (PseudoClass pc: n.getPseudoClassStates()) {\n+            if(pseudoclass.equals(pc.getPseudoClassName())) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeAndTableViewTest.java","additions":236,"deletions":0,"binary":false,"changes":236,"status":"added"}]}