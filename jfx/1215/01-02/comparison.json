{"files":[{"patch":"@@ -28,5 +28,3 @@\n-import com.sun.javafx.beans.IDProperty;\n-import javafx.collections.ObservableSet;\n-import javafx.css.PseudoClass;\n-import javafx.css.Styleable;\n-import javafx.css.CssMetaData;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n@@ -36,0 +34,2 @@\n+import javafx.beans.property.ReadOnlyObjectProperty;\n+import javafx.beans.property.ReadOnlyObjectWrapper;\n@@ -42,0 +42,5 @@\n+import javafx.collections.ObservableMap;\n+import javafx.collections.ObservableSet;\n+import javafx.css.CssMetaData;\n+import javafx.css.PseudoClass;\n+import javafx.css.Styleable;\n@@ -48,0 +53,1 @@\n+import javafx.scene.ContainsProperties;\n@@ -49,0 +55,2 @@\n+import javafx.scene.Parent;\n+import javafx.scene.control.skin.ContextMenuSkin;\n@@ -50,1 +58,1 @@\n-\n+import com.sun.javafx.beans.IDProperty;\n@@ -53,9 +61,0 @@\n-import javafx.scene.control.skin.ContextMenuSkin;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-\n-import javafx.beans.property.ReadOnlyObjectProperty;\n-import javafx.beans.property.ReadOnlyObjectWrapper;\n-import javafx.collections.ObservableMap;\n-import javafx.scene.Parent;\n@@ -97,1 +96,1 @@\n-public class MenuItem implements EventTarget, Styleable {\n+public class MenuItem implements EventTarget, Styleable, ContainsProperties {\n@@ -523,1 +522,2 @@\n-    public ObservableMap<Object, Object> getProperties() {\n+    @Override\n+    public final ObservableMap<Object, Object> getProperties() {\n@@ -535,1 +535,2 @@\n-     public boolean hasProperties() {\n+    @Override\n+    public final boolean hasProperties() {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/MenuItem.java","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import javafx.scene.ContainsProperties;\n@@ -40,1 +41,1 @@\n-public interface Toggle {\n+public interface Toggle extends ContainsProperties {\n@@ -98,16 +99,0 @@\n-\n-    \/**\n-     * Returns an observable map of properties on this toggle for use primarily\n-     * by application developers.\n-     *\n-     * @return An observable map of properties on this toggle for use primarily\n-     * by application developers\n-     *\/\n-    ObservableMap<Object, Object> getProperties();\n-\n-    \/**\n-     * Tests if this toggle has properties.\n-     * @return {@code true} if this toggle has properties.\n-     * @since 22\n-     *\/\n-    boolean hasProperties();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Toggle.java","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.scene;\n+\n+import java.util.HashMap;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableMap;\n+\n+\/**\n+ * Indicates that the implementor contains Properties.\n+ * @since 22\n+ *\/\n+public interface ContainsProperties {\n+\n+    \/**\n+     * Returns an observable map of properties on this object for use primarily by application developers.\n+     * @return an observable map of properties on this node for use primarily by application developers\n+     *\/\n+    public ObservableMap<Object, Object> getProperties();\n+\n+    \/**\n+     * Tests if this object has properties.\n+     * @return true if this object has properties.\n+     *\/\n+    public boolean hasProperties();\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/ContainsProperties.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -408,1 +408,1 @@\n-public abstract class Node implements EventTarget, Styleable {\n+public abstract class Node implements EventTarget, Styleable, ContainsProperties {\n@@ -886,1 +886,2 @@\n-     public final ObservableMap<Object, Object> getProperties() {\n+    @Override\n+    public final ObservableMap<Object, Object> getProperties() {\n@@ -897,1 +898,2 @@\n-     public boolean hasProperties() {\n+    @Override\n+    public final boolean hasProperties() {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}