{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+import com.sun.javafx.scene.control.ListenerHelper;\n+import com.sun.javafx.scene.control.behavior.MenuButtonBehavior;\n+import javafx.event.ActionEvent;\n@@ -32,2 +35,1 @@\n-\n-import com.sun.javafx.scene.control.behavior.MenuButtonBehavior;\n+import javafx.stage.WindowEvent;\n@@ -81,1 +83,0 @@\n-\/\/        control.setInputMap(behavior.getInputMap());\n@@ -86,0 +87,3 @@\n+        \/\/ JDK-8295426:\n+        \/\/ onAutoHide triggers an Event.ANY, making it impossible to add a listener which dispose() can remove.\n+        \/\/ keeping the existing setOnAutoHide(), making sure to setOnAutoHide(null) later.\n@@ -95,0 +99,2 @@\n+        ListenerHelper lh = ListenerHelper.get(this);\n+\n@@ -96,1 +102,1 @@\n-        popup.setOnShown(event -> {\n+        lh.addEventHandler(popup, WindowEvent.WINDOW_SHOWN, (ev) -> {\n@@ -108,3 +114,3 @@\n-        if (control.getOnAction() == null) {\n-            control.setOnAction(e -> control.show());\n-        }\n+        lh.addEventHandler(control, ActionEvent.ACTION, (ev) -> {\n+            control.show();\n+        });\n@@ -124,1 +130,8 @@\n-    @Override public void dispose() {\n+    @Override\n+    public void dispose() {\n+        if (getSkinnable() == null) {\n+            return;\n+        }\n+\n+        popup.setOnAutoHide(null);\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/MenuButtonSkin.java","additions":22,"deletions":9,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -32,0 +34,2 @@\n+import com.sun.javafx.scene.control.ListenerHelper;\n+import com.sun.javafx.scene.control.behavior.MenuButtonBehaviorBase;\n@@ -34,2 +38,0 @@\n-import javafx.beans.value.ChangeListener;\n-import javafx.collections.ListChangeListener;\n@@ -41,1 +43,0 @@\n-import javafx.scene.control.MenuItem;\n@@ -48,4 +49,0 @@\n-import com.sun.javafx.scene.control.behavior.MenuButtonBehaviorBase;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n@@ -76,2 +73,0 @@\n-    private ListChangeListener<MenuItem> itemsChangedListener;\n-    private final ChangeListener<? super Scene> sceneChangeListener;\n@@ -96,0 +91,2 @@\n+        ListenerHelper lh = ListenerHelper.get(this);\n+\n@@ -97,1 +94,1 @@\n-            control.addEventHandler(MouseEvent.MOUSE_PRESSED, e -> {\n+            lh.addEventHandler(control, MouseEvent.MOUSE_PRESSED, (ev) -> {\n@@ -100,1 +97,1 @@\n-                    behavior.mousePressed(e, behaveLikeButton);\n+                    behavior.mousePressed(ev, behaveLikeButton);\n@@ -106,1 +103,1 @@\n-            control.addEventHandler(MouseEvent.MOUSE_RELEASED, e -> {\n+            lh.addEventHandler(control, MouseEvent.MOUSE_RELEASED, (ev) -> {\n@@ -109,1 +106,1 @@\n-                    behavior.mouseReleased(e, behaveLikeButton);\n+                    behavior.mouseReleased(ev, behaveLikeButton);\n@@ -139,4 +136,4 @@\n-        itemsChangedListener = c -> {\n-            while (c.next()) {\n-                popup.getItems().removeAll(c.getRemoved());\n-                popup.getItems().addAll(c.getFrom(), c.getAddedSubList());\n+        lh.addListChangeListener(control.getItems(), (ch) -> {\n+            while (ch.next()) {\n+                popup.getItems().removeAll(ch.getRemoved());\n+                popup.getItems().addAll(ch.getFrom(), ch.getAddedSubList());\n@@ -144,6 +141,1 @@\n-        };\n-        control.getItems().addListener(itemsChangedListener);\n-\n-        if (getSkinnable().getScene() != null) {\n-            ControlAcceleratorSupport.addAcceleratorsIntoScene(getSkinnable().getItems(), getSkinnable());\n-        }\n+        });\n@@ -152,3 +144,4 @@\n-        sceneChangeListener = (scene, oldValue, newValue) -> {\n-            if (oldValue != null) {\n-                ControlAcceleratorSupport.removeAcceleratorsFromScene(getSkinnable().getItems(), oldValue);\n+\n+        lh.addChangeListener(control.sceneProperty(), true, (src, oldScene, newScene) -> {\n+            if (oldScene != null) {\n+                ControlAcceleratorSupport.removeAcceleratorsFromScene(getSkinnable().getItems(), oldScene);\n@@ -158,1 +151,1 @@\n-                removeMnemonicsFromScene(mnemonics, oldValue);\n+                removeMnemonicsFromScene(mnemonics, oldScene);\n@@ -161,2 +154,1 @@\n-            \/\/ FIXME: null skinnable should not happen\n-            if (getSkinnable() != null && getSkinnable().getScene() != null) {\n+            if (getSkinnable().getScene() != null) {\n@@ -165,2 +157,1 @@\n-        };\n-        control.sceneProperty().addListener(sceneChangeListener);\n+        });\n@@ -169,1 +160,1 @@\n-        registerChangeListener(control.showingProperty(), e -> {\n+        lh.addChangeListener(control.showingProperty(), (ev) -> {\n@@ -176,1 +167,2 @@\n-        registerChangeListener(control.focusedProperty(), e -> {\n+\n+        lh.addChangeListener(control.focusedProperty(), (ev) -> {\n@@ -185,1 +177,2 @@\n-        registerChangeListener(control.mnemonicParsingProperty(), e -> {\n+\n+        lh.addChangeListener(control.mnemonicParsingProperty(), (ev) -> {\n@@ -189,1 +182,2 @@\n-        registerChangeListener(popup.showingProperty(), e -> {\n+\n+        lh.addChangeListener(popup.showingProperty(), (ev) -> {\n@@ -200,7 +194,0 @@\n-                \/\/ we wrap this in a runLater so that mnemonics are not removed\n-                \/\/ before all key events are fired (because KEY_PRESSED might have\n-                \/\/ been used to hide the menu, but KEY_TYPED and KEY_RELEASED\n-                \/\/ events are still to be fired, and shouldn't miss out on going\n-                \/\/ through the mnemonics code (especially in case they should be\n-                \/\/ consumed to prevent them being used elsewhere).\n-                \/\/ See JBS-8090026 for more detail.\n@@ -226,1 +213,3 @@\n-        if (getSkinnable() == null) return;\n+        if (getSkinnable() == null) {\n+            return;\n+        }\n@@ -233,3 +222,0 @@\n-        \/\/ Remove listeners\n-        getSkinnable().sceneProperty().removeListener(sceneChangeListener);\n-        getSkinnable().getItems().removeListener(itemsChangedListener);\n@@ -237,0 +223,1 @@\n+\n@@ -322,0 +309,8 @@\n+\n+        \/\/ we wrap this in a runLater so that mnemonics are not removed\n+        \/\/ before all key events are fired (because KEY_PRESSED might have\n+        \/\/ been used to hide the menu, but KEY_TYPED and KEY_RELEASED\n+        \/\/ events are still to be fired, and shouldn't miss out on going\n+        \/\/ through the mnemonics code (especially in case they should be\n+        \/\/ consumed to prevent them being used elsewhere).\n+        \/\/ See JDK-8090026 for more detail.\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/MenuButtonSkinBase.java","additions":41,"deletions":46,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,7 @@\n-import javafx.scene.control.skin.MenuButtonSkin;\n-import com.sun.javafx.tk.Toolkit;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+\n@@ -31,0 +36,3 @@\n+import javafx.event.Event;\n+import javafx.event.EventHandler;\n+import javafx.event.EventType;\n@@ -32,1 +40,0 @@\n-import javafx.scene.Scene;\n@@ -34,1 +41,1 @@\n-import javafx.scene.control.ContentDisplay;\n+import javafx.scene.Scene;\n@@ -36,0 +43,1 @@\n+import javafx.scene.control.ContentDisplay;\n@@ -38,0 +46,2 @@\n+import javafx.scene.control.skin.MenuButtonSkin;\n+import javafx.scene.input.MouseEvent;\n@@ -41,3 +51,0 @@\n-import javafx.event.Event;\n-import javafx.event.EventType;\n-import javafx.event.EventHandler;\n@@ -48,1 +55,4 @@\n-import static org.junit.Assert.*;\n+import com.sun.javafx.scene.SceneHelper;\n+import com.sun.javafx.tk.Toolkit;\n+\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventGenerator;\n@@ -656,0 +666,59 @@\n+\n+    \/**\n+     * JDK-8295426 menu button popup is not shown on mouse click after skin is\n+     * replaced.\n+     *\/\n+    @Test\n+    public void testMenuButtonPopupAfterSkinReplaced() {\n+        MenuItem mi = new MenuItem(\"MenuItem1\");\n+\n+        MenuButton b = new MenuButton(\"Menu Button\");\n+        b.getItems().add(mi);\n+\n+        VBox root = new VBox();\n+        root.getChildren().addAll(b);\n+\n+        Scene scene = new Scene(root, 800, 600);\n+        Stage stage = new Stage();\n+        \/\/ keep stage at 0,0 so the screen X\/Y to be the same as local Node X\/Y, for\n+        \/\/ MouseEventGenerator\n+        stage.setX(0);\n+        stage.setY(0);\n+        stage.setScene(scene);\n+        stage.show();\n+        stage.requestFocus();\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        MenuButtonSkin skin = (MenuButtonSkin)b.getSkin();\n+        assertTrue(skin != null);\n+\n+        double offset = 15;\n+        double x = (b.localToScene(b.getLayoutBounds())).getMinX() + offset;\n+        double y = (b.localToScene(b.getLayoutBounds())).getMinY() + offset;\n+\n+        \/\/ click on menu button to show the popup\n+        SceneHelper.processMouseEvent(scene, MouseEventGenerator.generateMouseEvent(MouseEvent.MOUSE_PRESSED, x, y));\n+        SceneHelper.processMouseEvent(scene, MouseEventGenerator.generateMouseEvent(MouseEvent.MOUSE_RELEASED, x, y));\n+        assertTrue(b.isShowing());\n+\n+        \/\/ change the skin\n+        b.setSkin(new MenuButtonSkin(b));\n+        b.requestFocus();\n+        Toolkit.getToolkit().firePulse();\n+        assertTrue(b.isFocused());\n+\n+        \/\/ click once more on menu button to hide the popup\n+        SceneHelper.processMouseEvent(scene, MouseEventGenerator.generateMouseEvent(MouseEvent.MOUSE_PRESSED, x, y));\n+        SceneHelper.processMouseEvent(scene, MouseEventGenerator.generateMouseEvent(MouseEvent.MOUSE_RELEASED, x, y));\n+        Toolkit.getToolkit().firePulse();\n+        assertFalse(b.isShowing()); \/\/ fails JDK-8295426\n+\n+        \/\/ click again to show the popup\n+        SceneHelper.processMouseEvent(scene, MouseEventGenerator.generateMouseEvent(MouseEvent.MOUSE_PRESSED, x, y));\n+        SceneHelper.processMouseEvent(scene, MouseEventGenerator.generateMouseEvent(MouseEvent.MOUSE_RELEASED, x, y));\n+        Toolkit.getToolkit().firePulse();\n+        assertTrue(b.isShowing());\n+\n+        stage.hide();\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/MenuButtonTest.java","additions":78,"deletions":9,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-                MenuButton.class,\n+                \/\/MenuButton.class,\n@@ -177,1 +177,1 @@\n-                SplitMenuButton.class,\n+                \/\/SplitMenuButton.class,\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/SkinMemoryLeakTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}