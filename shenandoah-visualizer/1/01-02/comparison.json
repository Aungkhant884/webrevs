{"files":[{"patch":"@@ -95,0 +95,1 @@\n+                metaDataLine = processLoggingTag(metaDataLine);\n@@ -106,0 +107,1 @@\n+                regionDataLine = processLoggingTag(regionDataLine);\n@@ -157,0 +159,10 @@\n+    String processLoggingTag(String data) {\n+        if (data.lastIndexOf(\"]\") != -1) {\n+            int startIndex = data.lastIndexOf(\"]\") + 2;\n+            String newData = data.substring(startIndex);\n+            return newData;\n+        } else {\n+            return data;\n+        }\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/DataLogProvider.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2022, Amazon.com, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.shenandoah;\n+\n+import org.HdrHistogram.Histogram;\n+import org.junit.Assert;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+\n+import java.io.IOException;\n+\n+public class ProcessLoggingTagTest {\n+    DataLogProvider dataLogProvider;\n+\n+    @Before\n+    public void setUp() throws IOException {\n+        dataLogProvider = new DataLogProvider(\"src\/test\/resources\/regions-6425.log\");\n+    }\n+\n+    @Test\n+    public void test_process_tagged_meta_data() {\n+        String taggedMetaDataLine = \"[1.666s][info][gc,region] 1665172926 0 3859 1024 2\";\n+        Assert.assertEquals(\"1665172926 0 3859 1024 2\", dataLogProvider.processLoggingTag(taggedMetaDataLine));\n+    }\n+    @Test\n+    public void test_process_tagged_region_data() {\n+        String taggedRegionDataLine = \"[1.667s][info][gc,region] 648518346342989924 648518346342989924 648518346342989924\";\n+        Assert.assertEquals(\"648518346342989924 648518346342989924 648518346342989924\", dataLogProvider.processLoggingTag(taggedRegionDataLine));\n+    }\n+    @Test\n+    public void test_process_not_tagged_meta_data() {\n+        String notTaggedMetaDataLine = \"1665172926 0 3859 1024 2\";\n+        Assert.assertEquals(\"1665172926 0 3859 1024 2\", dataLogProvider.processLoggingTag(notTaggedMetaDataLine));\n+    }\n+    @Test\n+    public void test_process_not_tagged_region_data() {\n+        String notTaggedRegionDataLine = \"648518346342989924 648518346342989924 648518346342989924\";\n+        Assert.assertEquals(\"648518346342989924 648518346342989924 648518346342989924\", dataLogProvider.processLoggingTag(notTaggedRegionDataLine));\n+    }\n+}\n","filename":"src\/test\/java\/org\/openjdk\/shenandoah\/ProcessLoggingTagTest.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}