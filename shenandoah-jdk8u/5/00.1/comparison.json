{"files":[{"patch":"@@ -46,0 +46,3 @@\n+#if INCLUDE_ALL_GCS\n+#include \"shenandoahBarrierSetAssembler_aarch64.hpp\"\n+#endif\n@@ -1638,0 +1641,1 @@\n+\/\/ Return 1 in rscratch1 if the CAS fails.\n@@ -1644,0 +1648,1 @@\n+  Register res = op->result_opr()->as_register();\n@@ -1646,0 +1651,2 @@\n+    assert(op->tmp1()->is_valid(), \"must be\");\n+    Register t1 = op->tmp1()->as_register();\n@@ -1647,7 +1654,19 @@\n-      Register t1 = op->tmp1()->as_register();\n-      assert(op->tmp1()->is_valid(), \"must be\");\n-      __ encode_heap_oop(t1, cmpval);\n-      cmpval = t1;\n-      __ encode_heap_oop(rscratch2, newval);\n-      newval = rscratch2;\n-      casw(addr, newval, cmpval);\n+#if INCLUDE_ALL_GCS\n+      if (UseShenandoahGC && ShenandoahCASBarrier) {\n+        __ encode_heap_oop(t1, cmpval);\n+        cmpval = t1;\n+        assert(op->tmp2()->is_valid(), \"must be\");\n+        Register t2 = op->tmp2()->as_register();\n+        __ encode_heap_oop(t2, newval);\n+        newval = t2;\n+        ShenandoahBarrierSetAssembler::bsasm()->cmpxchg_oop(_masm, addr, cmpval, newval, \/*acquire*\/ false, \/*release*\/ true, \/*weak*\/ false, \/*is_cae*\/ false, res);\n+      } else\n+#endif\n+      {\n+        __ encode_heap_oop(t1, cmpval);\n+        cmpval = t1;\n+        __ encode_heap_oop(rscratch2, newval);\n+        newval = rscratch2;\n+        casw(addr, newval, cmpval);\n+        __ eorw (res, r8, 1);\n+      }\n@@ -1655,1 +1674,9 @@\n-      casl(addr, newval, cmpval);\n+#if INCLUDE_ALL_GCS\n+      if (UseShenandoahGC && ShenandoahCASBarrier) {\n+        ShenandoahBarrierSetAssembler::bsasm()->cmpxchg_oop(_masm, addr, cmpval, newval, \/*acquire*\/ false, \/*release*\/ true, \/*weak*\/ false, \/*is_cae*\/ false, res);\n+      } else\n+#endif\n+      {\n+        casl(addr, newval, cmpval);\n+        __ eorw (res, r8, 1);\n+      }\n@@ -1659,0 +1686,1 @@\n+    __ eorw (res, r8, 1);\n@@ -1661,0 +1689,1 @@\n+    __ eorw (res, r8, 1);\n@@ -2905,1 +2934,8 @@\n-void LIR_Assembler::leal(LIR_Opr addr, LIR_Opr dest) {\n+void LIR_Assembler::leal(LIR_Opr addr, LIR_Opr dest, LIR_PatchCode patch_code, CodeEmitInfo* info) {\n+#if INCLUDE_ALL_GCS\n+  if (UseShenandoahGC && patch_code != lir_patch_none) {\n+    deoptimize_trap(info);\n+    return;\n+  }\n+#endif\n+\n","filename":"hotspot\/src\/cpu\/aarch64\/vm\/c1_LIRAssembler_aarch64.cpp","additions":45,"deletions":9,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -457,0 +457,2 @@\n+  void push_call_clobbered_fp_registers();\n+  void pop_call_clobbered_fp_registers();\n@@ -461,4 +463,1 @@\n-  inline void mov(Register dst, address addr)\n-  {\n-    mov_immediate64(dst, (u_int64_t)addr);\n-  }\n+  void mov(Register dst, address addr);\n","filename":"hotspot\/src\/cpu\/aarch64\/vm\/macroAssembler_aarch64.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -40,0 +40,4 @@\n+#if INCLUDE_ALL_GCS\n+#include \"gc_implementation\/shenandoah\/c2\/shenandoahSupport.hpp\"\n+#endif\n+\n@@ -2359,0 +2363,6 @@\n+#if INCLUDE_ALL_GCS\n+    if (UseShenandoahGC && !C->major_progress()) {\n+      ShenandoahBarrierC2Support::pin_and_expand(this);\n+    }\n+#endif\n+\n@@ -3350,1 +3360,4 @@\n-      if (s->is_Load()) {\n+      if (s->is_Load() ||\n+          (UseShenandoahGC &&\n+           (s->is_ShenandoahBarrier() || s->Opcode() == Op_SafePoint ||\n+            (s->is_CallStaticJava() && s->as_CallStaticJava()->uncommon_trap_request() != 0)))) {\n@@ -3582,0 +3595,3 @@\n+    if (UseShenandoahGC && n->is_CMove()) {\n+      pinned = false;\n+    }\n@@ -3636,1 +3652,1 @@\n-    if (ctrl_out && ctrl_out->is_CountedLoop() &&\n+    if (UseShenandoahGC && ctrl_out && ctrl_out->is_Loop() &&\n@@ -3638,0 +3654,27 @@\n+      \/\/ Move the node above predicates as far up as possible so a\n+      \/\/ following pass of loop predication doesn't hoist a predicate\n+      \/\/ that depends on it above that node.\n+      Node* new_ctrl = least;\n+      for (;;) {\n+        if (!new_ctrl->is_Proj()) {\n+          break;\n+        }\n+        CallStaticJavaNode* call = new_ctrl->as_Proj()->is_uncommon_trap_if_pattern(Deoptimization::Reason_none);\n+        if (call == NULL) {\n+          break;\n+        }\n+        int req = call->uncommon_trap_request();\n+        Deoptimization::DeoptReason trap_reason = Deoptimization::trap_request_reason(req);\n+        if (trap_reason != Deoptimization::Reason_loop_limit_check &&\n+            trap_reason != Deoptimization::Reason_predicate) {\n+          break;\n+        }\n+        Node* c = new_ctrl->in(0)->in(0);\n+        if (is_dominator(c, early) && c != early) {\n+          break;\n+        }\n+        new_ctrl = c;\n+      }\n+      least = new_ctrl;\n+    } else if (ctrl_out && ctrl_out->is_CountedLoop() &&\n+               least == ctrl_out->in(LoopNode::EntryControl)) {\n@@ -3823,0 +3866,1 @@\n+#endif\n@@ -3845,1 +3889,0 @@\n-#endif\n","filename":"hotspot\/src\/share\/vm\/opto\/loopnode.cpp","additions":46,"deletions":3,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -574,0 +574,1 @@\n+public:\n@@ -578,0 +579,1 @@\n+private:\n@@ -753,0 +755,1 @@\n+public:\n@@ -765,0 +768,2 @@\n+\n+private:\n@@ -1048,0 +1053,1 @@\n+\n@@ -1082,0 +1088,1 @@\n+  void rpo( Node *start, Node_Stack &stk, VectorSet &visited, Node_List &rpo_list ) const;\n@@ -1086,1 +1093,0 @@\n-  void rpo( Node *start, Node_Stack &stk, VectorSet &visited, Node_List &rpo_list ) const;\n@@ -1098,0 +1104,3 @@\n+\n+  PhaseIterGVN& igvn() { return _igvn; }\n+  IdealLoopTree* ltree_root() const { return _ltree_root; }\n","filename":"hotspot\/src\/share\/vm\/opto\/loopnode.hpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}