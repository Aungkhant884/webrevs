{"files":[{"patch":"@@ -172,0 +172,2 @@\n+        allowPatternSwitch = (preview.isEnabled() || !preview.isPreview(Feature.PATTERN_SWITCH)) &&\n+                             Feature.PATTERN_SWITCH.allowedInSource(source);\n@@ -212,0 +214,4 @@\n+    \/** Are patterns in switch allowed\n+     *\/\n+    private final boolean allowPatternSwitch;\n+\n@@ -1727,1 +1733,4 @@\n-                            Type pattype = attribExpr(expr, switchEnv, seltype);\n+                            ResultInfo valTypInfo = new ResultInfo(KindSelector.VAL_TYP,\n+                                                                   !seltype.hasTag(ERROR) ? seltype\n+                                                                                          : Type.noType);\n+                            Type pattype = attribTree(expr, switchEnv, valTypInfo);\n@@ -1729,3 +1738,0 @@\n-                                if (!stringSwitch && !types.isAssignable(seltype, syms.intType)) {\n-                                    log.error(pat.pos(), Errors.ConstantLabelNotCompatible(pattype, seltype));\n-                                }\n@@ -1733,2 +1739,10 @@\n-                                    log.error(expr.pos(),\n-                                              (stringSwitch ? Errors.StringConstReq : Errors.ConstExprReq));\n+                                    Symbol s = TreeInfo.symbol(expr);\n+                                    if (s != null && s.kind == TYP && allowPatternSwitch) {\n+                                        log.error(expr.pos(),\n+                                                  Errors.PatternExpected);\n+                                    } else {\n+                                        log.error(expr.pos(),\n+                                                  (stringSwitch ? Errors.StringConstReq : Errors.ConstExprReq));\n+                                    }\n+                                } else if (!stringSwitch && !types.isAssignable(seltype, syms.intType)) {\n+                                    log.error(pat.pos(), Errors.ConstantLabelNotCompatible(pattype, seltype));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":20,"deletions":6,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1192,0 +1192,3 @@\n+compiler.err.pattern.expected=\\\n+    type pattern expected\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.pattern.expected\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n+\n+class PatternSwitch {\n+    private void doSwitch(Object o) {\n+        switch (o) {\n+            case String: break;\n+            default: break;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/PatternExpected.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+SwitchErrors.java:35:31: compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.pattern.switch)\n+SwitchErrors.java:34:18: compiler.err.constant.label.not.compatible: java.lang.String, java.lang.Object\n+SwitchErrors.java:40:18: compiler.err.constant.label.not.compatible: int, java.lang.Object\n+SwitchErrors.java:46:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, java.lang.Integer)\n+SwitchErrors.java:47:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Integer, java.lang.CharSequence)\n+SwitchErrors.java:52:18: compiler.err.preview.feature.disabled: (compiler.misc.feature.case.null)\n+SwitchErrors.java:53:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, int)\n+SwitchErrors.java:54:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: int, java.lang.CharSequence)\n+SwitchErrors.java:60:20: compiler.err.total.pattern.and.default\n+SwitchErrors.java:66:13: compiler.err.pattern.dominated\n+SwitchErrors.java:72:18: compiler.err.total.pattern.and.default\n+SwitchErrors.java:78:18: compiler.err.duplicate.total.pattern\n+SwitchErrors.java:84:20: compiler.err.duplicate.default.label\n+SwitchErrors.java:90:20: compiler.err.duplicate.default.label\n+SwitchErrors.java:101:13: compiler.err.duplicate.case.label\n+SwitchErrors.java:106:13: compiler.err.duplicate.case.label\n+SwitchErrors.java:111:28: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:117:18: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:124:18: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:131:18: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:136:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, java.lang.Integer)\n+SwitchErrors.java:142:18: compiler.err.instanceof.reifiable.not.safe: java.util.List, java.util.List<java.lang.Integer>\n+SwitchErrors.java:148:18: compiler.err.cant.resolve.location: kindname.class, Undefined, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n+SwitchErrors.java:155:18: compiler.err.type.found.req: int, (compiler.misc.type.req.class.array)\n+SwitchErrors.java:172:27: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:178:18: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:184:13: compiler.err.pattern.dominated\n+SwitchErrors.java:196:18: compiler.err.const.expr.req\n+SwitchErrors.java:202:76: compiler.err.cant.resolve.location: kindname.variable, n, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n+SwitchErrors.java:208:71: compiler.err.cant.resolve.location: kindname.variable, n, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n+SwitchErrors.java:33:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:39:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:45:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:51:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:99:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:105:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:110:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:115:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:121:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:128:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:188:9: compiler.err.not.exhaustive.statement\n+41 errors\n","filename":"test\/langtools\/tools\/javac\/patterns\/SwitchErrors-no-preview.out","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile\/fail\/ref=SwitchErrors-no-preview.out -XDrawDiagnostics -XDshould-stop.at=FLOW SwitchErrors.java\n@@ -193,0 +194,6 @@\n+    void errorRecoveryNoPattern1(Object o) {\n+        switch (o) {\n+            case String: break;\n+            case Object obj: break;\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/patterns\/SwitchErrors.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,43 +1,44 @@\n-SwitchErrors.java:33:18: compiler.err.constant.label.not.compatible: java.lang.String, java.lang.Object\n-SwitchErrors.java:39:18: compiler.err.constant.label.not.compatible: int, java.lang.Object\n-SwitchErrors.java:45:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, java.lang.Integer)\n-SwitchErrors.java:46:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Integer, java.lang.CharSequence)\n-SwitchErrors.java:51:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, int)\n-SwitchErrors.java:52:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, int)\n-SwitchErrors.java:53:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: int, java.lang.CharSequence)\n-SwitchErrors.java:59:20: compiler.err.total.pattern.and.default\n-SwitchErrors.java:65:13: compiler.err.pattern.dominated\n-SwitchErrors.java:65:24: compiler.err.total.pattern.and.default\n-SwitchErrors.java:71:18: compiler.err.total.pattern.and.default\n-SwitchErrors.java:77:18: compiler.err.duplicate.total.pattern\n-SwitchErrors.java:83:20: compiler.err.duplicate.default.label\n-SwitchErrors.java:89:20: compiler.err.duplicate.default.label\n-SwitchErrors.java:94:27: compiler.err.duplicate.default.label\n-SwitchErrors.java:100:13: compiler.err.duplicate.case.label\n-SwitchErrors.java:105:13: compiler.err.duplicate.case.label\n-SwitchErrors.java:110:28: compiler.err.flows.through.to.pattern\n-SwitchErrors.java:116:18: compiler.err.flows.through.to.pattern\n-SwitchErrors.java:123:18: compiler.err.flows.through.to.pattern\n-SwitchErrors.java:130:18: compiler.err.flows.through.to.pattern\n-SwitchErrors.java:135:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, java.lang.Integer)\n-SwitchErrors.java:141:18: compiler.err.instanceof.reifiable.not.safe: java.util.List, java.util.List<java.lang.Integer>\n-SwitchErrors.java:147:18: compiler.err.cant.resolve.location: kindname.class, Undefined, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n-SwitchErrors.java:154:18: compiler.err.type.found.req: int, (compiler.misc.type.req.class.array)\n-SwitchErrors.java:160:28: compiler.err.flows.through.from.pattern\n-SwitchErrors.java:166:18: compiler.err.flows.through.from.pattern\n-SwitchErrors.java:171:27: compiler.err.flows.through.to.pattern\n-SwitchErrors.java:177:18: compiler.err.flows.through.to.pattern\n-SwitchErrors.java:183:13: compiler.err.pattern.dominated\n-SwitchErrors.java:195:76: compiler.err.cant.resolve.location: kindname.variable, n, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n-SwitchErrors.java:201:71: compiler.err.cant.resolve.location: kindname.variable, n, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n-SwitchErrors.java:32:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:38:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:44:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:50:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:98:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:104:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:109:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:114:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:120:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:127:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:187:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:34:18: compiler.err.constant.label.not.compatible: java.lang.String, java.lang.Object\n+SwitchErrors.java:40:18: compiler.err.constant.label.not.compatible: int, java.lang.Object\n+SwitchErrors.java:46:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, java.lang.Integer)\n+SwitchErrors.java:47:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Integer, java.lang.CharSequence)\n+SwitchErrors.java:52:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, int)\n+SwitchErrors.java:53:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, int)\n+SwitchErrors.java:54:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: int, java.lang.CharSequence)\n+SwitchErrors.java:60:20: compiler.err.total.pattern.and.default\n+SwitchErrors.java:66:13: compiler.err.pattern.dominated\n+SwitchErrors.java:66:24: compiler.err.total.pattern.and.default\n+SwitchErrors.java:72:18: compiler.err.total.pattern.and.default\n+SwitchErrors.java:78:18: compiler.err.duplicate.total.pattern\n+SwitchErrors.java:84:20: compiler.err.duplicate.default.label\n+SwitchErrors.java:90:20: compiler.err.duplicate.default.label\n+SwitchErrors.java:95:27: compiler.err.duplicate.default.label\n+SwitchErrors.java:101:13: compiler.err.duplicate.case.label\n+SwitchErrors.java:106:13: compiler.err.duplicate.case.label\n+SwitchErrors.java:111:28: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:117:18: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:124:18: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:131:18: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:136:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, java.lang.Integer)\n+SwitchErrors.java:142:18: compiler.err.instanceof.reifiable.not.safe: java.util.List, java.util.List<java.lang.Integer>\n+SwitchErrors.java:148:18: compiler.err.cant.resolve.location: kindname.class, Undefined, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n+SwitchErrors.java:155:18: compiler.err.type.found.req: int, (compiler.misc.type.req.class.array)\n+SwitchErrors.java:161:28: compiler.err.flows.through.from.pattern\n+SwitchErrors.java:167:18: compiler.err.flows.through.from.pattern\n+SwitchErrors.java:172:27: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:178:18: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:184:13: compiler.err.pattern.dominated\n+SwitchErrors.java:196:18: compiler.err.pattern.expected\n+SwitchErrors.java:202:76: compiler.err.cant.resolve.location: kindname.variable, n, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n+SwitchErrors.java:208:71: compiler.err.cant.resolve.location: kindname.variable, n, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n+SwitchErrors.java:33:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:39:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:45:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:51:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:99:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:105:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:110:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:115:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:121:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:128:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:188:9: compiler.err.not.exhaustive.statement\n@@ -46,1 +47,1 @@\n-43 errors\n+44 errors\n","filename":"test\/langtools\/tools\/javac\/patterns\/SwitchErrors.out","additions":45,"deletions":44,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -275,1 +275,1 @@\n-            case \"B\": return \"b\";\n+            case Switches.ConstantClassClash: return \"b\";\n@@ -285,1 +285,1 @@\n-            case \"B\" -> \"b\";\n+            case ConstantClassClash -> \"b\";\n@@ -338,0 +338,6 @@\n+    \/\/verify that for cases like:\n+    \/\/case ConstantClassClash ->\n+    \/\/ConstantClassClash is interpreted as a field, not as a class\n+    private static final String ConstantClassClash = \"B\";\n+    private static class ConstantClassClash {}\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/Switches.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}