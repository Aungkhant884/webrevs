{"files":[{"patch":"@@ -1220,0 +1220,1 @@\n+                depVars.addAll(inferenceContext.freeVarsIn(descType.getThrownTypes()));\n@@ -1241,0 +1242,1 @@\n+                depVars.addAll(inferenceContext.freeVarsIn(descType.getThrownTypes()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/DeferredAttr.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8254571\n+ * @summary Erroneous generic type inference in a lambda expression with a checked exception\n+ * @compile ConsiderExceptionTVarsInStuckExprs.java\n+ *\/\n+\n+class ConsiderExceptionTVarsInStuckExprs {\n+\n+    public static void test() {\n+        outer(nested(x -> mightThrow()));\n+    }\n+\n+    static <A> void outer(Object o) {}\n+\n+    static <B, C, E extends Throwable> B nested(Fun<C,E> fun) {\n+        return null;\n+    }\n+\n+    interface Fun<X, Y extends Throwable> {\n+        void m(X t) throws Y;\n+    }\n+\n+    static void mightThrow() throws Exception {}\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/considerExceptionTVarInStuckExprs\/ConsiderExceptionTVarsInStuckExprs.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"}]}