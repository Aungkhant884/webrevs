{"files":[{"patch":"@@ -1187,7 +1187,1 @@\n-    alen = alloc->Ideal_length();\n-    Node* ccast = alloc->make_ideal_length(_gvn.type(array)->is_oopptr(), &_gvn);\n-    if (ccast != alen) {\n-      _gvn.set_type_bottom(ccast);\n-      record_for_igvn(ccast);\n-      alen = ccast;\n-    }\n+    alen = array_ideal_length(alloc, _gvn.type(array)->is_oopptr(), false);\n@@ -1198,3 +1192,5 @@\n-void GraphKit::cast_replace_array_length_post_allocation(AllocateArrayNode* alloc, const TypeOopPtr* oop_type) {\n-  Node* length = alloc->in(AllocateNode::ALength);\n-  if (map()->find_edge(length) >= 0) {\n+Node* GraphKit::array_ideal_length(AllocateArrayNode* alloc,\n+                                   const TypeOopPtr* oop_type,\n+                                   bool replace_length_in_map) {\n+  Node* length = alloc->Ideal_length();\n+  if (replace_length_in_map == false || map()->find_edge(length) >= 0) {\n@@ -1203,0 +1199,2 @@\n+      \/\/ do not transfrom ccast here, it might convert to top node for\n+      \/\/ negative array length and break assumptions in parsing stage.\n@@ -1205,1 +1203,4 @@\n-      replace_in_map(length, ccast);\n+      if (replace_length_in_map) {\n+        replace_in_map(length, ccast);\n+      }\n+      return ccast;\n@@ -1208,0 +1209,1 @@\n+  return length;\n@@ -3984,1 +3986,1 @@\n-  cast_replace_array_length_post_allocation(alloc, ary_type);\n+  array_ideal_length(alloc, ary_type, true);\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -346,2 +346,6 @@\n-  \/\/ Cast and replace array allocation's length as narrow as possible after allocation.\n-  void cast_replace_array_length_post_allocation(AllocateArrayNode* alloc, const TypeOopPtr* oop_type);\n+  \/\/ Cast array allocation's length as narrow as possible.\n+  \/\/ If replace_length_in_map is true, replace length with CastIINode in map.\n+  \/\/ This method is invoked after creating\/moving ArrayAllocationNode or in load_array_length\n+  Node* array_ideal_length(AllocateArrayNode* alloc,\n+                           const TypeOopPtr* oop_type,\n+                           bool replace_length_in_map);\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -4508,1 +4508,1 @@\n-    cast_replace_array_length_post_allocation(alloc, ary_type);\n+    array_ideal_length(alloc, ary_type, true);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run main\/othervm -XX:-PrintCompilation compiler.c2.TestNegArrayLengthAsIndex1\n+ * @run main\/othervm -XX:-PrintCompilation compiler.arraycopy.TestNegArrayLengthAsIndex1\n@@ -35,1 +35,1 @@\n-package compiler.c2;\n+package compiler.arraycopy;\n","filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestNegArrayLengthAsIndex1.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestNegArrayLengthAsIndex1.java","status":"renamed"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm compiler.c2.TestNegArrayLengthAsIndex2\n+ * @run main\/othervm compiler.arraycopy.TestNegArrayLengthAsIndex2\n@@ -33,1 +33,1 @@\n-package compiler.c2;\n+package compiler.arraycopy;\n","filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestNegArrayLengthAsIndex2.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestNegArrayLengthAsIndex2.java","status":"renamed"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm compiler.c2.TestNegativeArrayCopyAfterLoop\n+ * @run main\/othervm compiler.arraycopy.TestNegativeArrayCopyAfterLoop\n@@ -32,1 +32,1 @@\n-package compiler.c2;\n+package compiler.arraycopy;\n","filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestNegativeArrayCopyAfterLoop.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestNegativeArrayCopyAfterLoop.java","status":"renamed"}]}