{"files":[{"patch":"@@ -1198,0 +1198,12 @@\n+void GraphKit::cast_replace_array_length_post_allocation(AllocateArrayNode* alloc, const TypeOopPtr* oop_type) {\n+  Node* length = alloc->in(AllocateNode::ALength);\n+  if (map()->find_edge(length) >= 0) {\n+    Node* ccast = alloc->make_ideal_length(oop_type, &_gvn);\n+    if (ccast != length) {\n+      _gvn.set_type_bottom(ccast);\n+      record_for_igvn(ccast);\n+      replace_in_map(length, ccast);\n+    }\n+  }\n+}\n+\n@@ -3972,10 +3984,1 @@\n-  \/\/ Cast length on remaining path to be as narrow as possible\n-  if (map()->find_edge(length) >= 0) {\n-    Node* ccast = alloc->make_ideal_length(ary_type, &_gvn);\n-    if (ccast != length) {\n-      _gvn.set_type_bottom(ccast);\n-      record_for_igvn(ccast);\n-      replace_in_map(length, ccast);\n-    }\n-  }\n-\n+  cast_replace_array_length_post_allocation(alloc, ary_type);\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -346,0 +346,2 @@\n+  \/\/ Cast and replace array allocation's length as narrow as possible after allocation.\n+  void cast_replace_array_length_post_allocation(AllocateArrayNode* alloc, const TypeOopPtr* oop_type);\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4451,0 +4451,3 @@\n+    \/\/\n+    \/\/ Multiple identical CastIINodes might exist here. Each GraphKit::load_array_length() call will generate\n+    \/\/ new separate CastIINode (arraycopy guard checks or any array length use between array allocation and ararycopy)\n@@ -4457,2 +4460,2 @@\n-      Node *init_out = init_control->raw_out(i);\n-      if (init_out->is_CastII() && init_out->in(0) == init_control && init_out->in(1) == alloc_length) {\n+      Node* init_out = init_control->raw_out(i);\n+      if (init_out->is_CastII() && init_out->in(TypeFunc::Control) == init_control && init_out->in(1) == alloc_length) {\n@@ -4505,12 +4508,1 @@\n-    \/\/ Cast length on remaining path to be as narrow as possible\n-    \/\/ previous CastNode inserted when creating AllocateArrayNode\n-    \/\/ is removed in early step in LibraryCallKit::inline_arraycopy\n-    Node* length = alloc->in(AllocateNode::ALength);\n-    if (map()->find_edge(length) >= 0) {\n-      Node* ccast = alloc->make_ideal_length(ary_type, &_gvn);\n-      if (ccast != length) {\n-        _gvn.set_type_bottom(ccast);\n-        record_for_igvn(ccast);\n-        replace_in_map(length, ccast);\n-      }\n-    }\n+    cast_replace_array_length_post_allocation(alloc, ary_type);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"}]}