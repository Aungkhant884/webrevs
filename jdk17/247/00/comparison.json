{"files":[{"patch":"@@ -609,0 +609,9 @@\n+      if (is_CountedLoop()) {\n+        Node* opaq = as_CountedLoop()->is_canonical_loop_entry();\n+        if (opaq != NULL) {\n+          \/\/ This is not a loop anymore. No need to keep the Opaque1 node on the test that guards the loop as it won't be\n+          \/\/ subject to further loop opts.\n+          assert(opaq->Opcode() == Op_Opaque1, \"\");\n+          igvn->replace_node(opaq, opaq->in(1));\n+        }\n+      }\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1989,1 +1989,2 @@\n-    if (!is_canonical_loop_entry(loop_head)) {\n+    opaq = loop_head->is_canonical_loop_entry();\n+    if (opaq == NULL) {\n@@ -1992,1 +1993,0 @@\n-    opaq = loop_head->skip_predicates()->in(0)->in(1)->in(1)->in(2);\n@@ -2607,1 +2607,1 @@\n-  if (!is_canonical_loop_entry(cl)) {\n+  if (cl->is_canonical_loop_entry() == NULL) {\n@@ -2936,1 +2936,1 @@\n-  if (!is_canonical_loop_entry(legacy_cl)) return multi_version_succeeded;\n+  if (legacy_cl->is_canonical_loop_entry() == NULL) return multi_version_succeeded;\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2142,3 +2142,4 @@\n-    while (ctrl != NULL && ctrl->is_Proj() && ctrl->in(0)->is_If() &&\n-           ctrl->in(0)->as_If()->proj_out(1-ctrl->as_Proj()->_con)->outcnt() == 1 &&\n-           ctrl->in(0)->as_If()->proj_out(1-ctrl->as_Proj()->_con)->unique_out()->Opcode() == Op_Halt) {\n+    while (ctrl != NULL && ctrl->is_Proj() && ctrl->in(0) != NULL && ctrl->in(0)->is_If() &&\n+            (ctrl->in(0)->as_If()->proj_out_or_null(1-ctrl->as_Proj()->_con) == NULL ||\n+             (ctrl->in(0)->as_If()->proj_out(1-ctrl->as_Proj()->_con)->outcnt() == 1 &&\n+              ctrl->in(0)->as_If()->proj_out(1-ctrl->as_Proj()->_con)->unique_out()->Opcode() == Op_Halt))) {\n@@ -4923,3 +4924,3 @@\n-bool PhaseIdealLoop::is_canonical_loop_entry(CountedLoopNode* cl) {\n-  if (!cl->is_main_loop() && !cl->is_post_loop()) {\n-    return false;\n+Node* CountedLoopNode::is_canonical_loop_entry() {\n+  if (!is_main_loop() && !is_post_loop()) {\n+    return NULL;\n@@ -4927,1 +4928,1 @@\n-  Node* ctrl = cl->skip_predicates();\n+  Node* ctrl = skip_predicates();\n@@ -4930,1 +4931,1 @@\n-    return false;\n+    return NULL;\n@@ -4934,1 +4935,1 @@\n-    return false;\n+    return NULL;\n@@ -4938,1 +4939,1 @@\n-    return false;\n+    return NULL;\n@@ -4942,1 +4943,1 @@\n-    return false;\n+    return NULL;\n@@ -4945,0 +4946,4 @@\n+\n+  int input = is_main_loop() ? 2 : 1;\n+  bool res = cmpzm->in(input)->Opcode() == Op_Opaque1;\n+#ifdef ASSERT\n@@ -4953,4 +4958,3 @@\n-  if (!found_opaque) {\n-    return false;\n-  }\n-  return true;\n+  assert(found_opaque == res, \"wrong pattern\");\n+#endif\n+  return res ? cmpzm->in(input) : NULL;\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -353,0 +353,2 @@\n+  Node* is_canonical_loop_entry();\n+\n@@ -934,2 +936,0 @@\n-  static bool is_canonical_loop_entry(CountedLoopNode* cl);\n-\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-  assert((Opcode() != Op_If && Opcode() != Op_RangeCheck) || outcnt() == 2, \"bad if #1\");\n@@ -78,0 +77,1 @@\n+  assert((Opcode() != Op_If && Opcode() != Op_RangeCheck) || outcnt() == 2, \"bad if #1\");\n","filename":"src\/hotspot\/share\/opto\/multnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3607,1 +3607,1 @@\n-  if (!PhaseIdealLoop::is_canonical_loop_entry(cl)) {\n+  if (cl->is_canonical_loop_entry() == NULL) {\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8269752\n+ * @summary C2: assert(false) failed: Bad graph detected in build_loop_late\n+ *\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestMainBodyExecutedOnce TestMainBodyExecutedOnce\n+ *\n+ *\/\n+\n+\n+public class TestMainBodyExecutedOnce {\n+    static int N;\n+    static long vMeth_check_sum;\n+\n+    public static void main(String[] strArr) {\n+        TestMainBodyExecutedOnce _instance = new TestMainBodyExecutedOnce();\n+        for (int i = 0; i < 10; i++) {\n+            _instance.test();\n+        }\n+    }\n+\n+    void test() {\n+        vMeth(3);\n+    }\n+\n+    void vMeth(int i2) {\n+        double d = 1.74287;\n+        int i3 = -36665, i4, iArr[] = new int[N];\n+        short s;\n+        long lArr[] = new long[N];\n+        while (++i3 < 132) {\n+            if (i2 != 0) {\n+                vMeth_check_sum += i3;\n+                return;\n+            }\n+            i4 = 1;\n+            while (++i4 < 12) {\n+                i2 += i4;\n+            }\n+        }\n+        vMeth_check_sum += i3;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestMainBodyExecutedOnce.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}