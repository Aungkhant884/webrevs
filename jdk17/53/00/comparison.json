{"files":[{"patch":"@@ -855,0 +855,2 @@\n+\n+#undef XTOP\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/barrierSetC2.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#include \"opto\/runtime.hpp\"\n@@ -256,0 +257,2 @@\n+#define XTOP LP64_ONLY(COMMA phase->top())\n+\n@@ -258,0 +261,1 @@\n+\n@@ -259,2 +263,39 @@\n-    \/\/ Clone primitive array\n-    BarrierSetC2::clone_at_expansion(phase, ac);\n+    const TypeAryPtr* ary_ptr = src->get_ptr_type()->isa_aryptr();\n+    BasicType bt;\n+    if (ary_ptr == NULL) {\n+      \/\/ ary_ptr can be null iff we are running with StressReflectiveCode\n+      \/\/ This code will be unreachable\n+      assert(StressReflectiveCode, \"Guard against surprises\");\n+      bt = T_LONG;\n+    } else {\n+      bt = ary_ptr->elem()->array_element_basic_type();\n+      if (is_reference_type(bt)) {\n+        \/\/ Clone object array\n+        bt = T_OBJECT;\n+      } else {\n+        \/\/ Clone primitive array\n+        bt = T_LONG;\n+      }\n+    }\n+\n+    Node* ctrl = ac->in(TypeFunc::Control);\n+    Node* mem = ac->in(TypeFunc::Memory);\n+    Node* src = ac->in(ArrayCopyNode::Src);\n+    Node* src_offset = ac->in(ArrayCopyNode::SrcPos);\n+    Node* dest = ac->in(ArrayCopyNode::Dest);\n+    Node* dest_offset = ac->in(ArrayCopyNode::DestPos);\n+    Node* length = ac->in(ArrayCopyNode::Length);\n+\n+    Node* payload_src = phase->basic_plus_adr(src, src_offset);\n+    Node* payload_dst = phase->basic_plus_adr(dest, dest_offset);\n+\n+    const char* copyfunc_name = \"arraycopy\";\n+    address     copyfunc_addr = phase->basictype2arraycopy(bt, NULL, NULL, true, copyfunc_name, true);\n+\n+    const TypePtr* raw_adr_type = TypeRawPtr::BOTTOM;\n+    const TypeFunc* call_type = OptoRuntime::fast_arraycopy_Type();\n+\n+    Node* call = phase->make_leaf_call(ctrl, mem, call_type, copyfunc_addr, copyfunc_name, raw_adr_type, payload_src, payload_dst, length XTOP);\n+    phase->transform_later(call);\n+\n+    phase->igvn().replace_node(ac, call);\n@@ -292,0 +333,2 @@\n+#undef XTOP\n+\n","filename":"src\/hotspot\/share\/gc\/z\/c2\/zBarrierSetC2.cpp","additions":45,"deletions":2,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -4120,0 +4120,2 @@\n+#undef XTOP\n+\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1227,0 +1227,2 @@\n+#undef XTOP\n+\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,6 @@\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -Xcomp -XX:-ReduceInitialCardMarks\n- *                   -XX:CompileCommand=compileonly,compiler.arraycopy.TestObjectArrayClone::test\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-ReduceInitialCardMarks\n+ *                   -XX:CompileCommand=compileonly,compiler.arraycopy.TestObjectArrayClone::testClone*\n+ *                   compiler.arraycopy.TestObjectArrayClone\n+ *\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:CompileCommand=compileonly,compiler.arraycopy.TestObjectArrayClone::testClone*\n@@ -36,0 +40,67 @@\n+class Payload implements Cloneable {\n+    boolean b;\n+    int i;\n+    char c;\n+    String str;\n+    short s;\n+    int i2;\n+\n+    public Payload(boolean b, int i, char c, String str, short s, int i2) {\n+        super();\n+        this.b = b;\n+        this.i = i;\n+        this.c = c;\n+        this.str = str;\n+        this.s = s;\n+        this.i2 = i2;\n+    }\n+\n+    public Payload clonep() {\n+        try {\n+            return (Payload) super.clone();\n+        } catch(CloneNotSupportedException e) {\n+            return null;\n+        }\n+    }\n+}\n+\n+class Payload2 implements Cloneable {\n+    boolean b;\n+    int i;\n+    char c;\n+    String str;\n+    short s;\n+    int i2;\n+    boolean b2;\n+    int i3;\n+    char c2;\n+    String str2;\n+    short s2;\n+    int i4;\n+\n+    public Payload2(boolean b, int i, char c, String str, short s, int i2, boolean b2, int i3, char c2, String str2,\n+            short s2, int i4) {\n+        super();\n+        this.b = b;\n+        this.i = i;\n+        this.c = c;\n+        this.str = str;\n+        this.s = s;\n+        this.i2 = i2;\n+        this.b2 = b2;\n+        this.i3 = i3;\n+        this.c2 = c2;\n+        this.str2 = str2;\n+        this.s2 = s2;\n+        this.i4 = i4;\n+    }\n+\n+    public Payload2 clonep() {\n+        try {\n+            return (Payload2) super.clone();\n+        } catch(CloneNotSupportedException e) {\n+            return null;\n+        }\n+    }\n+}\n+\n@@ -38,1 +109,43 @@\n-    public static TestObjectArrayClone[] test(TestObjectArrayClone[] arr) {\n+    public static String[] escape_arr;\n+\n+    public static String str1 = new String(\"1\");\n+    public static String str2 = new String(\"2\");\n+    public static String str3 = new String(\"3\");\n+    public static String str4 = new String(\"4\");\n+    public static String str5 = new String(\"5\");\n+\n+    public static String[] testCloneObjectArray(String[] arr) {\n+        return arr.clone();\n+    }\n+\n+    public static String[] testCloneObjectArrayCopy(String[] arr) {\n+        String[] arr2 = new String[arr.length];\n+        System.arraycopy(arr, 0, arr2, 0, arr.length);\n+        return arr2;\n+    }\n+\n+    public static String[] testCloneShortObjectArray() {\n+        String[] arr = new String[5];\n+        arr[0] = str1;\n+        arr[1] = str2;\n+        arr[2] = str3;\n+        arr[3] = str4;\n+        arr[4] = str5;\n+        escape_arr = arr;\n+        return arr.clone();\n+    }\n+\n+    public static String[] testCloneShortObjectArrayCopy() {\n+        String[] arr = new String[5];\n+        arr[0] = str1;\n+        arr[1] = str2;\n+        arr[2] = str3;\n+        arr[3] = str4;\n+        arr[4] = str5;\n+        escape_arr = arr;\n+        String[] arr2 = new String[arr.length];\n+        System.arraycopy(arr, 0, arr2, 0, arr.length);\n+        return arr2;\n+    }\n+\n+    public static int[] testClonePrimitiveArray(int[] arr) {\n@@ -42,0 +155,8 @@\n+    public static Object testCloneOop(Payload p) {\n+      return p.clonep();\n+    }\n+\n+    public static Object testCloneOop2(Payload2 p) {\n+        return p.clonep();\n+    }\n+\n@@ -43,1 +164,163 @@\n-        test(new TestObjectArrayClone[42]);\n+        String[] arr1 = new String[42];\n+        for (int j = 0; j < arr1.length; j++) {\n+            arr1[j] = new String(Integer.toString(j));\n+        }\n+\n+        for (int i = 0; i < 50_000; i++) {\n+            String[] arr2 = testCloneObjectArray(arr1);\n+            verifyStr(arr1, arr2);\n+            String[] arr3 = testCloneObjectArray(arr1);\n+            verifyStr(arr1, arr3);\n+            String[] arr4 = testCloneObjectArray(arr1);\n+            verifyStr(arr1, arr4);\n+            verifyStr(arr1, arr3);\n+            verifyStr(arr1, arr2);\n+        }\n+\n+        for (int i = 0; i < 50_000; i++) {\n+            String[] value = testCloneShortObjectArray();\n+            verifyStr(value, escape_arr);\n+            String[] value2 = testCloneShortObjectArray();\n+            verifyStr(value2, escape_arr);\n+            String[] value3 = testCloneShortObjectArray();\n+            verifyStr(value3, escape_arr);\n+            verifyStr(value, value3);\n+            verifyStr(value, value2);\n+        }\n+\n+        for (int i = 0; i < 50_000; i++) {\n+            String[] arr2 = testCloneObjectArrayCopy(arr1);\n+            verifyStr(arr1, arr2);\n+            String[] arr3 = testCloneObjectArrayCopy(arr1);\n+            verifyStr(arr1, arr3);\n+            String[] arr4 = testCloneObjectArrayCopy(arr1);\n+            verifyStr(arr1, arr4);\n+            verifyStr(arr1, arr3);\n+            verifyStr(arr1, arr2);\n+        }\n+\n+        for (int i = 0; i < 50_000; i++) {\n+            String[] value = testCloneShortObjectArrayCopy();\n+            verifyStr(value, escape_arr);\n+            String[] value2 = testCloneShortObjectArrayCopy();\n+            verifyStr(value2, escape_arr);\n+            String[] value3 = testCloneShortObjectArrayCopy();\n+            verifyStr(value3, escape_arr);\n+            verifyStr(value, value3);\n+            verifyStr(value, value2);\n+        }\n+\n+        for (int i = 0; i < 50_000; i++) {\n+            testClonePrimitiveArray(new int[42]);\n+        }\n+\n+        Payload ref = new Payload(false, -1, 'c', str1, (short) 5, -1);\n+        for (int i = 0; i < 50_000; i++) {\n+            Payload p1 = (Payload) testCloneOop(ref);\n+            verifyPayload(ref, p1);\n+            Payload p2 = (Payload) testCloneOop(ref);\n+            verifyPayload(ref, p2);\n+            Payload p3 = (Payload) testCloneOop(ref);\n+            verifyPayload(ref, p3);\n+            verifyPayload(p2, p3);\n+            verifyPayload(p1, p3);\n+        }\n+\n+        Payload2 ref2 = new Payload2(false, -1, 'c', str1, (short) 5, -1, false, 0, 'k', str2, (short)-1, 0);\n+        for (int i = 0; i < 50_000; i++) {\n+            Payload2 p1 = (Payload2) testCloneOop2(ref2);\n+            verifyPayload2(ref2, p1);\n+            Payload2 p2 = (Payload2) testCloneOop2(ref2);\n+            verifyPayload2(ref2, p2);\n+            Payload2 p3 = (Payload2) testCloneOop2(ref2);\n+            verifyPayload2(ref2, p3);\n+            verifyPayload2(p2, p3);\n+            verifyPayload2(p1, p3);\n+        }\n+    }\n+\n+    public static void verifyPayload(Payload p1, Payload p2) {\n+        if  (p1.b != p2.b) {\n+            throw new RuntimeException(\"b is wrong\");\n+        }\n+        if  (p1.c != p2.c) {\n+            throw new RuntimeException(\"c is wrong\");\n+        }\n+        if  (p1.i != p2.i) {\n+            throw new RuntimeException(\"i is wrong\");\n+        }\n+        if  (p1.s != p2.s) {\n+            throw new RuntimeException(\"s is wrong\");\n+        }\n+        if  (p1.i2 != p2.i2) {\n+            throw new RuntimeException(\"i2 is wrong\");\n+        }\n+        if  (p1.str != p2.str) {\n+            throw new RuntimeException(\"str is wrong\");\n+        }\n+        if  (!p1.str.equals(p2.str)) {\n+            throw new RuntimeException(\"str content is wrong\");\n+        }\n+    }\n+\n+    public static void verifyPayload2(Payload2 p1, Payload2 p2) {\n+        if  (p1.b != p2.b) {\n+            throw new RuntimeException(\"b is wrong\");\n+        }\n+        if  (p1.c != p2.c) {\n+            throw new RuntimeException(\"c is wrong\");\n+        }\n+        if  (p1.i != p2.i) {\n+            throw new RuntimeException(\"i is wrong\");\n+        }\n+        if  (p1.s != p2.s) {\n+            throw new RuntimeException(\"s is wrong\");\n+        }\n+        if  (p1.i2 != p2.i2) {\n+            throw new RuntimeException(\"i2 is wrong\");\n+        }\n+        if  (p1.str != p2.str) {\n+            throw new RuntimeException(\"str is wrong\");\n+        }\n+        if  (!p1.str.equals(p2.str)) {\n+            throw new RuntimeException(\"str content is wrong\");\n+        }\n+        if  (p1.b2 != p2.b2) {\n+            throw new RuntimeException(\"b is wrong\");\n+        }\n+        if  (p1.c2 != p2.c2) {\n+            throw new RuntimeException(\"c is wrong\");\n+        }\n+        if  (p1.i3 != p2.i3) {\n+            throw new RuntimeException(\"i is wrong\");\n+        }\n+        if  (p1.s2 != p2.s2) {\n+            throw new RuntimeException(\"s is wrong\");\n+        }\n+        if  (p1.i4 != p2.i4) {\n+            throw new RuntimeException(\"i2 is wrong\");\n+        }\n+        if  (p1.str2 != p2.str2) {\n+            throw new RuntimeException(\"str is wrong\");\n+        }\n+        if  (!p1.str2.equals(p2.str2)) {\n+            throw new RuntimeException(\"str content is wrong\");\n+        }\n+    }\n+\n+    public static void verifyStr(String[] arr1, String[] arr2) {\n+        if (arr1 == arr2) {\n+            throw new RuntimeException(\"Must not be the same\");\n+        }\n+        if (arr1.length != arr2.length) {\n+            throw new RuntimeException(\"Must have the same length\");\n+        }\n+        for (int i = 0; i < arr1.length; i++) {\n+            if (arr1[i] != arr2[i]) {\n+                throw new RuntimeException(\"Fail cloned element not the same: \" + i);\n+            }\n+            if (!arr1[i].equals(arr2[i])) {\n+                throw new RuntimeException(\"Fail cloned element content not the same\");\n+            }\n+\n+        }\n","filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestObjectArrayClone.java","additions":288,"deletions":5,"binary":false,"changes":293,"status":"modified"}]}