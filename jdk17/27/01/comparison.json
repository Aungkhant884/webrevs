{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -232,0 +232,1 @@\n+        stripNonExistentAnnotations(data);\n@@ -304,0 +305,44 @@\n+    private static final String PREVIEW_FEATURE_ANNOTATION_OLD =\n+            \"Ljdk\/internal\/PreviewFeature;\";\n+    private static final String PREVIEW_FEATURE_ANNOTATION_NEW =\n+            \"Ljdk\/internal\/javac\/PreviewFeature;\";\n+    private static final String PREVIEW_FEATURE_ANNOTATION_INTERNAL =\n+            \"Ljdk\/internal\/PreviewFeature+Annotation;\";\n+    private static final String VALUE_BASED_ANNOTATION =\n+            \"Ljdk\/internal\/ValueBased;\";\n+    private static final String VALUE_BASED_ANNOTATION_INTERNAL =\n+            \"Ljdk\/internal\/ValueBased+Annotation;\";\n+    public static final Set<String> HARDCODED_ANNOTATIONS = new HashSet<>(\n+            List.of(\"Ljdk\/Profile+Annotation;\",\n+                    \"Lsun\/Proprietary+Annotation;\",\n+                    PREVIEW_FEATURE_ANNOTATION_OLD,\n+                    PREVIEW_FEATURE_ANNOTATION_NEW,\n+                    VALUE_BASED_ANNOTATION));\n+\n+    private void stripNonExistentAnnotations(LoadDescriptions data) {\n+        Set<String> allClasses = data.classes.name2Class.keySet();\n+        data.modules.values().forEach(mod -> {\n+            stripNonExistentAnnotations(allClasses, mod.header);\n+        });\n+        data.classes.classes.forEach(clazz -> {\n+            stripNonExistentAnnotations(allClasses, clazz.header);\n+            stripNonExistentAnnotations(allClasses, clazz.fields);\n+            stripNonExistentAnnotations(allClasses, clazz.methods);\n+        });\n+    }\n+\n+    private void stripNonExistentAnnotations(Set<String> allClasses, Iterable<? extends FeatureDescription> descs) {\n+        descs.forEach(d -> stripNonExistentAnnotations(allClasses, d));\n+    }\n+\n+    private void stripNonExistentAnnotations(Set<String> allClasses, FeatureDescription d) {\n+        stripNonExistentAnnotations(allClasses, d.classAnnotations);\n+        stripNonExistentAnnotations(allClasses, d.runtimeAnnotations);\n+    }\n+\n+    private void stripNonExistentAnnotations(Set<String> allClasses, List<AnnotationDescription> annotations) {\n+        if (annotations != null)\n+            annotations.removeIf(ann -> !HARDCODED_ANNOTATIONS.contains(ann.annotationType) &&\n+                                        !allClasses.contains(ann.annotationType.substring(1, ann.annotationType.length() - 1)));\n+    }\n+\n@@ -1143,0 +1188,6 @@\n+        if (VALUE_BASED_ANNOTATION.equals(annotationType)) {\n+            \/\/the non-public ValueBased annotation will not be available in ct.sym,\n+            \/\/replace with purely synthetic javac-internal annotation:\n+            annotationType = VALUE_BASED_ANNOTATION_INTERNAL;\n+        }\n+\n@@ -1147,7 +1198,0 @@\n-    \/\/where:\n-        private static final String PREVIEW_FEATURE_ANNOTATION_OLD =\n-                \"Ljdk\/internal\/PreviewFeature;\";\n-        private static final String PREVIEW_FEATURE_ANNOTATION_NEW =\n-                \"Ljdk\/internal\/javac\/PreviewFeature;\";\n-        private static final String PREVIEW_FEATURE_ANNOTATION_INTERNAL =\n-                \"Ljdk\/internal\/PreviewFeature+Annotation;\";\n","filename":"make\/langtools\/src\/classes\/build\/tools\/symbolgenerator\/CreateSymbols.java","additions":52,"deletions":8,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -38,0 +38,5 @@\n+ * Note this internal annotation is handled specially by the javac compiler.\n+ * To work properly with {@code --release older-release}, it requires special\n+ * handline in {@code make\/langtools\/src\/classes\/build\/tools\/symbolgenerator\/CreateSymbols.java}\n+ * and {@code src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java}.\n+ *\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/ValueBased.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,6 @@\n+ *\n+ * Note this internal annotation is handled specially by the javac compiler.\n+ * To work properly with {@code --release older-release}, it requires special\n+ * handline in {@code make\/langtools\/src\/classes\/build\/tools\/symbolgenerator\/CreateSymbols.java}\n+ * and {@code src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java}.\n+ *\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/NoPreview.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,0 +34,6 @@\n+ *\n+ * Note this internal annotation is handled specially by the javac compiler.\n+ * To work properly with {@code --release older-release}, it requires special\n+ * handline in {@code make\/langtools\/src\/classes\/build\/tools\/symbolgenerator\/CreateSymbols.java}\n+ * and {@code src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java}.\n+ *\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/PreviewFeature.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -314,1 +314,6 @@\n-    public static final long SYSTEM_MODULE = 1L<<53;\n+    public static final long SYSTEM_MODULE = 1L<<53; \/\/ModuleSymbols only\n+\n+    \/**\n+     * Flag to indicate the given ClassSymbol is a value based.\n+     *\/\n+    public static final long VALUE_BASED = 1L<<53; \/\/ClassSymbols only\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -225,0 +225,1 @@\n+    public final Type valueBasedInternalType;\n@@ -591,0 +592,1 @@\n+        valueBasedInternalType = enterSyntheticAnnotation(\"jdk.internal.ValueBased+Annotation\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+import static com.sun.tools.javac.code.Kinds.Kind.TYP;\n@@ -372,1 +373,0 @@\n-            \/\/ Note: @Deprecated has no effect on local variables and parameters\n@@ -380,0 +380,6 @@\n+\n+            if (!c.type.isErroneous()\n+                    && toAnnotate.kind == TYP\n+                    && types.isSameType(c.type, syms.valueBasedType)) {\n+                toAnnotate.flags_field |= Flags.VALUE_BASED;\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Annotate.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1860,8 +1860,1 @@\n-            if (t != null && t.tsym != null) {\n-                for (Attribute.Compound a: t.tsym.getDeclarationAttributes()) {\n-                    if (a.type.tsym == syms.valueBasedType.tsym) {\n-                        return true;\n-                    }\n-                }\n-            }\n-            return false;\n+            return t != null && t.tsym != null && (t.tsym.flags() & VALUE_BASED) != 0;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1449,0 +1449,3 @@\n+            } else if (proxy.type.tsym.flatName() == syms.valueBasedInternalType.tsym.flatName()) {\n+                Assert.check(sym.kind == TYP);\n+                sym.flags_field |= VALUE_BASED;\n@@ -1460,0 +1463,2 @@\n+                }  else if (proxy.type.tsym == syms.valueBasedType.tsym && sym.kind == TYP) {\n+                    sym.flags_field |= VALUE_BASED;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -75,1 +75,0 @@\n-tools\/jdeprscan\/tests\/jdk\/jdeprscan\/TestRelease.java                            8258421    generic-all    Deprecation vs JDK-private annotation class\n","filename":"test\/langtools\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * @bug 8254274\n+ * @bug 8254274 8258421\n@@ -8,0 +8,1 @@\n+ * @compile\/fail\/ref=ExternalAbuseOfVbc.out --release 16 -XDrawDiagnostics -Werror -Xlint:synchronization ExternalAbuseOfVbc.java\n","filename":"test\/langtools\/tools\/javac\/lint\/ExternalAbuseOfVbc.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-ExternalAbuseOfVbc.java:18:13: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n+ExternalAbuseOfVbc.java:19:13: compiler.warn.attempt.to.synchronize.on.instance.of.value.based.class\n","filename":"test\/langtools\/tools\/javac\/lint\/ExternalAbuseOfVbc.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8266036 8258421\n+ * @summary Verify no error is reported for extended ForkJoinPool with --release 8.\n+ * @modules jdk.compiler\n+ * @build NonPublicAnnotations\n+ * @compile -processor NonPublicAnnotations --release 8 NonPublicAnnotations.java\n+ *\/\n+\n+import java.util.Set;\n+import java.util.concurrent.ForkJoinPool;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.TypeElement;\n+\n+@SupportedAnnotationTypes(\"*\")\n+public class NonPublicAnnotations extends AbstractProcessor {\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> roots, RoundEnvironment roundEnv) {\n+        return false;\n+    }\n+\n+    @Override\n+    public SourceVersion getSupportedSourceVersion() {\n+        return SourceVersion.latestSupported();\n+    }\n+\n+}\n+\n+class TestForkJoinPool extends ForkJoinPool {}\n","filename":"test\/langtools\/tools\/javac\/platform\/NonPublicAnnotations.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -218,76 +218,82 @@\n-        doPrintElementTest(\"package t;\" +\n-                           \"import java.lang.annotation.*;\" +\n-                           \"public @Visible @Invisible class T { public void extra() { } }\" +\n-                           \"@Retention(RetentionPolicy.RUNTIME) @interface Visible { }\" +\n-                           \"@Retention(RetentionPolicy.CLASS) @interface Invisible { }\",\n-                           \"package t;\" +\n-                           \"import java.lang.annotation.*;\" +\n-                           \"public @Visible @Invisible class T { }\" +\n-                           \"@Retention(RetentionPolicy.RUNTIME) @interface Visible { }\" +\n-                           \"@Retention(RetentionPolicy.CLASS) @interface Invisible { }\",\n-                           \"t.T\",\n-                           \"package t;\\n\\n\" +\n-                           \"@t.Invisible\\n\" +\n-                           \"@t.Visible\\n\" +\n-                           \"public class T {\\n\\n\" +\n-                           \"  public T();\\n\\n\" +\n-                           \"  public void extra();\\n\" +\n-                           \"}\\n\",\n-                           \"t.Visible\",\n-                           \"package t;\\n\\n\" +\n-                           \"@java.lang.annotation.Retention(RUNTIME)\\n\" +\n-                           \"@interface Visible {\\n\" +\n-                           \"}\\n\");\n-        doPrintElementTest(\"package t;\" +\n-                           \"import java.lang.annotation.*;\" +\n-                           \"import java.util.*;\" +\n-                           \"public class T {\" +\n-                           \"    public void test(int h, @Invisible int i, @Visible List<String> j, int k) { }\" +\n-                           \"}\" +\n-                           \"@Retention(RetentionPolicy.RUNTIME) @interface Visible { }\" +\n-                           \"@Retention(RetentionPolicy.CLASS) @interface Invisible { }\",\n-                           \"package t;\" +\n-                           \"import java.lang.annotation.*;\" +\n-                           \"import java.util.*;\" +\n-                           \"public class T {\" +\n-                           \"    public void test(int h, @Invisible int i, @Visible List<String> j, int k) { }\" +\n-                           \"    public void extra() { }\" +\n-                           \"}\" +\n-                           \"@Retention(RetentionPolicy.RUNTIME) @interface Visible { }\" +\n-                           \"@Retention(RetentionPolicy.CLASS) @interface Invisible { }\",\n-                           \"t.T\",\n-                           \"package t;\\n\\n\" +\n-                           \"public class T {\\n\\n\" +\n-                           \"  public T();\\n\\n\" +\n-                           \"  public void test(int arg0,\\n\" +\n-                           \"    @t.Invisible int arg1,\\n\" +\n-                           \"    @t.Visible java.util.List<java.lang.String> arg2,\\n\" +\n-                           \"    int arg3);\\n\" +\n-                           \"}\\n\",\n-                           \"t.Visible\",\n-                           \"package t;\\n\\n\" +\n-                           \"@java.lang.annotation.Retention(RUNTIME)\\n\" +\n-                           \"@interface Visible {\\n\" +\n-                           \"}\\n\");\n-        doPrintElementTest(\"package t;\" +\n-                           \"import java.lang.annotation.*;\" +\n-                           \"public class T {\" +\n-                           \"    public void test(@Ann(v=\\\"url\\\", dv=\\\"\\\\\\\"\\\\\\\"\\\") String str) { }\" +\n-                           \"}\" +\n-                           \"@Retention(RetentionPolicy.RUNTIME) @interface Ann {\" +\n-                           \"    public String v();\" +\n-                           \"    public String dv();\" +\n-                           \"}\",\n-                           \"package t;\" +\n-                           \"public class T { }\",\n-                           \"t.T\",\n-                           \"package t;\\n\\n\" +\n-                           \"public class T {\\n\\n\" +\n-                           \"  public T();\\n\\n\" +\n-                           \"  public void test(@t.Ann(dv=\\\"\\\\\\\"\\\\\\\"\\\", v=\\\"url\\\") java.lang.String arg0);\\n\" +\n-                           \"}\\n\",\n-                           \"t.T\",\n-                           \"package t;\\n\\n\" +\n-                           \"public class T {\\n\\n\" +\n-                           \"  public T();\\n\" +\n-                           \"}\\n\");\n+        Set<String> extraAnnotations = Set.of(\"Ljava\/lang\/annotation\/Retention;\");\n+        CreateSymbols.HARDCODED_ANNOTATIONS.addAll(extraAnnotations);\n+        try {\n+            doPrintElementTest(\"package t;\" +\n+                               \"import java.lang.annotation.*;\" +\n+                               \"public @Visible @Invisible class T { public void extra() { } }\" +\n+                               \"@Retention(RetentionPolicy.RUNTIME) @interface Visible { }\" +\n+                               \"@Retention(RetentionPolicy.CLASS) @interface Invisible { }\",\n+                               \"package t;\" +\n+                               \"import java.lang.annotation.*;\" +\n+                               \"public @Visible @Invisible class T { }\" +\n+                               \"@Retention(RetentionPolicy.RUNTIME) @interface Visible { }\" +\n+                               \"@Retention(RetentionPolicy.CLASS) @interface Invisible { }\",\n+                               \"t.T\",\n+                               \"package t;\\n\\n\" +\n+                               \"@t.Invisible\\n\" +\n+                               \"@t.Visible\\n\" +\n+                               \"public class T {\\n\\n\" +\n+                               \"  public T();\\n\\n\" +\n+                               \"  public void extra();\\n\" +\n+                               \"}\\n\",\n+                               \"t.Visible\",\n+                               \"package t;\\n\\n\" +\n+                               \"@java.lang.annotation.Retention(RUNTIME)\\n\" +\n+                               \"@interface Visible {\\n\" +\n+                               \"}\\n\");\n+            doPrintElementTest(\"package t;\" +\n+                               \"import java.lang.annotation.*;\" +\n+                               \"import java.util.*;\" +\n+                               \"public class T {\" +\n+                               \"    public void test(int h, @Invisible int i, @Visible List<String> j, int k) { }\" +\n+                               \"}\" +\n+                               \"@Retention(RetentionPolicy.RUNTIME) @interface Visible { }\" +\n+                               \"@Retention(RetentionPolicy.CLASS) @interface Invisible { }\",\n+                               \"package t;\" +\n+                               \"import java.lang.annotation.*;\" +\n+                               \"import java.util.*;\" +\n+                               \"public class T {\" +\n+                               \"    public void test(int h, @Invisible int i, @Visible List<String> j, int k) { }\" +\n+                               \"    public void extra() { }\" +\n+                               \"}\" +\n+                               \"@Retention(RetentionPolicy.RUNTIME) @interface Visible { }\" +\n+                               \"@Retention(RetentionPolicy.CLASS) @interface Invisible { }\",\n+                               \"t.T\",\n+                               \"package t;\\n\\n\" +\n+                               \"public class T {\\n\\n\" +\n+                               \"  public T();\\n\\n\" +\n+                               \"  public void test(int arg0,\\n\" +\n+                               \"    @t.Invisible int arg1,\\n\" +\n+                               \"    @t.Visible java.util.List<java.lang.String> arg2,\\n\" +\n+                               \"    int arg3);\\n\" +\n+                               \"}\\n\",\n+                               \"t.Visible\",\n+                               \"package t;\\n\\n\" +\n+                               \"@java.lang.annotation.Retention(RUNTIME)\\n\" +\n+                               \"@interface Visible {\\n\" +\n+                               \"}\\n\");\n+            doPrintElementTest(\"package t;\" +\n+                               \"import java.lang.annotation.*;\" +\n+                               \"public class T {\" +\n+                               \"    public void test(@Ann(v=\\\"url\\\", dv=\\\"\\\\\\\"\\\\\\\"\\\") String str) { }\" +\n+                               \"}\" +\n+                               \"@Retention(RetentionPolicy.RUNTIME) @interface Ann {\" +\n+                               \"    public String v();\" +\n+                               \"    public String dv();\" +\n+                               \"}\",\n+                               \"package t;\" +\n+                               \"public class T { }\",\n+                               \"t.T\",\n+                               \"package t;\\n\\n\" +\n+                               \"public class T {\\n\\n\" +\n+                               \"  public T();\\n\\n\" +\n+                               \"  public void test(@t.Ann(dv=\\\"\\\\\\\"\\\\\\\"\\\", v=\\\"url\\\") java.lang.String arg0);\\n\" +\n+                               \"}\\n\",\n+                               \"t.T\",\n+                               \"package t;\\n\\n\" +\n+                               \"public class T {\\n\\n\" +\n+                               \"  public T();\\n\" +\n+                               \"}\\n\");\n+        } finally {\n+            CreateSymbols.HARDCODED_ANNOTATIONS.removeAll(extraAnnotations);\n+        }\n@@ -363,0 +369,59 @@\n+    @Test\n+    void testClearMissingAnnotations() throws Exception {\n+        doPrintElementTest(new String[] {\n+                               \"\"\"\n+                               package t;\n+                               import t.impl.HC;\n+                               import t.impl.HR;\n+                               @HC @HR public class T {\n+                                   @HC @HR public static final int i = 0;\n+                                   @HC @HR public void t() {}\n+                               }\n+                               \"\"\",\n+                               \"\"\"\n+                               package t.impl;\n+                               import java.lang.annotation.*;\n+                               @Retention(RetentionPolicy.CLASS)\n+                               public @interface HC {\n+                               }\n+                               \"\"\",\n+                               \"\"\"\n+                               package t.impl;\n+                               import java.lang.annotation.*;\n+                               @Retention(RetentionPolicy.RUNTIME)\n+                               public @interface HR {\n+                               }\n+                               \"\"\"\n+                           },\n+                           new String[] {\n+                               \"\"\"\n+                               package t;\n+                               public class T {\n+                                   public static final int i = 0;\n+                               }\n+                               \"\"\"\n+                           },\n+                           \"t.T\",\n+                           \"\"\"\n+                           package t;\n+\n+                           public class T {\n+                             public static final int i = 0;\n+\n+                             public T();\n+\n+                             public void t();\n+                           }\n+                           \"\"\",\n+                           \"t.T\",\n+                           \"\"\"\n+                           package t;\n+\n+                           public class T {\n+                             public static final int i = 0;\n+\n+                             public T();\n+                           }\n+                           \"\"\");\n+    }\n+\n@@ -367,1 +432,1 @@\n-        Path classes = prepareVersionedCTSym(code7, code8);\n+        Path classes = prepareVersionedCTSym(new String[] {code7}, new String[] {code8});\n@@ -395,0 +460,4 @@\n+        doPrintElementTest(new String[] {code7}, new String[] {code8}, className7, printed7, className8, printed8);\n+    }\n+\n+    void doPrintElementTest(String[] code7, String[] code8, String className7, String printed7, String className8, String printed8) throws Exception {\n@@ -422,1 +491,1 @@\n-        Path classes = prepareVersionedCTSym(code7, code8);\n+        Path classes = prepareVersionedCTSym(new String[] {code7}, new String[] {code8});\n@@ -579,1 +648,1 @@\n-            Path classes = prepareVersionedCTSym(code, \"package other; public class Other {}\");\n+            Path classes = prepareVersionedCTSym(new String[] {code}, new String[] {\"package other; public class Other {}\"});\n@@ -598,1 +667,1 @@\n-    Path prepareVersionedCTSym(String code7, String code8) throws Exception {\n+    Path prepareVersionedCTSym(String[] code7, String[] code8) throws Exception {\n@@ -697,0 +766,1 @@\n+                        .filter(p -> !p.contains(\"impl\"))\n","filename":"test\/langtools\/tools\/javac\/platform\/createsymbols\/CreateSymbolsTestImpl.java","additions":151,"deletions":81,"binary":false,"changes":232,"status":"modified"},{"patch":"@@ -131,4 +131,4 @@\n-        (byte) 0x3C, (byte) 0x03, (byte) 0xEA, (byte) 0x4A,\n-        (byte) 0x62, (byte) 0xD2, (byte) 0x18, (byte) 0xE5,\n-        (byte) 0xA5, (byte) 0xC2, (byte) 0xB7, (byte) 0x85,\n-        (byte) 0x90, (byte) 0xFA, (byte) 0x98, (byte) 0xCD\n+        (byte) 0x45, (byte) 0xCA, (byte) 0x83, (byte) 0xCD,\n+        (byte) 0x1A, (byte) 0x68, (byte) 0x57, (byte) 0x9C,\n+        (byte) 0x6F, (byte) 0x2D, (byte) 0xEB, (byte) 0x28,\n+        (byte) 0xAB, (byte) 0x05, (byte) 0x53, (byte) 0x6E\n@@ -137,4 +137,4 @@\n-        (byte) 0x24, (byte) 0x38, (byte) 0x52, (byte) 0x1C,\n-        (byte) 0x5E, (byte) 0x83, (byte) 0x82, (byte) 0xE6,\n-        (byte) 0x41, (byte) 0xC2, (byte) 0xDD, (byte) 0x2A,\n-        (byte) 0xFD, (byte) 0xFF, (byte) 0x5E, (byte) 0x2F\n+        (byte) 0x26, (byte) 0x8C, (byte) 0xFD, (byte) 0x61,\n+        (byte) 0x53, (byte) 0x00, (byte) 0x57, (byte) 0x10,\n+        (byte) 0x36, (byte) 0x2B, (byte) 0x92, (byte) 0x0B,\n+        (byte) 0xE1, (byte) 0x6A, (byte) 0xB5, (byte) 0xFD\n","filename":"test\/langtools\/tools\/javac\/sym\/ElementStructureTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}