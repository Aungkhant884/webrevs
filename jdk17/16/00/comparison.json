{"files":[{"patch":"@@ -1313,1 +1313,1 @@\n-.B \\f[CB]\\-XX:FlightRecorderOptions:\\f[R]\\f[I]parameter\\f[R]\\f[CB]=\\f[R]\\f[I]value\\f[R] (or)\\f[CB]\\-XX:FlightRecorderOptions:\\f[R]\\f[I]parameter\\f[R]\\f[CB]=\\f[R]\\f[I]value\\f[R]\n+.B \\f[CB]\\-XX:FlightRecorderOptions=\\f[R]\\f[I]parameter\\f[R]\\f[CB]=\\f[R]\\f[I]value\\f[R] (or)\\f[CB]\\-XX:FlightRecorderOptions:\\f[R]\\f[I]parameter\\f[R]\\f[CB]=\\f[R]\\f[I]value\\f[R]\n@@ -1639,1 +1639,1 @@\n-.B \\f[CB]\\-XX:StartFlightRecording:\\f[R]\\f[I]parameter\\f[R]\\f[CB]=\\f[R]\\f[I]value\\f[R]\n+.B \\f[CB]\\-XX:StartFlightRecording=\\f[R]\\f[I]parameter\\f[R]\\f[CB]=\\f[R]\\f[I]value\\f[R]\n@@ -1760,16 +1760,0 @@\n-.PP\n-Event settings and .jfc options can also be specified using the following\n-syntax:\n-.TP\n-.B \\f[CB]option=\\f[R]\\f[I]value\\f[R]\n-Specifies the option value to modify. To list available options, use the \n-JAVA_HOME\/bin\/jfr tool.\n-.TP\n-.B \\f[CB]event-setting=\\f[R]\\f[I]value\\f[R]\n-Specifies the event setting value to modify. Use the form:\n-<event-name>#<setting-name>=<value>\n-To add a new event setting, prefix the event name with '+'.\n-.PP\n-In case of a conflict between a parameter and a .jfc option, the parameter\n-will take precedence. The whitespace delimiter can be omitted for timespan values, i.e. 20ms. For\n-more information about the settings syntax, see Javadoc of the jdk.jfr package.\n@@ -3891,62 +3875,0 @@\n-.B \\f[CB]\\-\\-illegal\\-access=\\f[R]\\f[I]parameter\\f[R]\n-When present at run time, \\f[CB]\\-\\-illegal\\-access=\\f[R] takes a keyword\n-\\f[I]parameter\\f[R] to specify a mode of operation:\n-.RS\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] This option will be removed in a future release.\n-.RE\n-.IP \\[bu] 2\n-\\f[CB]permit\\f[R]: This mode opens each package in each module in the\n-run\\-time image to code in all unnamed modules ( such as code on the\n-class path), if that package existed in JDK 8.\n-This enables both static access, (for example, by compiled bytecode, and\n-deep reflective access) through the platform\\[aq]s various reflection\n-APIs.\n-The first reflective\\-access operation to any such package causes a\n-warning to be issued.\n-However, no warnings are issued after the first occurrence.\n-This single warning describes how to enable further warnings.\n-.IP \\[bu] 2\n-\\f[CB]warn\\f[R]: This mode is identical to \\f[CB]permit\\f[R] except that a\n-warning message is issued for each illegal reflective\\-access operation.\n-.IP \\[bu] 2\n-\\f[CB]debug\\f[R]: This mode is identical to \\f[CB]warn\\f[R] except that both\n-a warning message and a stack trace are issued for each illegal\n-reflective\\-access operation.\n-.IP \\[bu] 2\n-\\f[CB]deny\\f[R]: This mode disables all illegal\\-access operations except\n-for those enabled by other command\\-line options, such as\n-\\f[CB]\\-\\-add\\-opens\\f[R].\n-This mode is the default.\n-.PP\n-If your application does not work with the default mode of\n-\\f[CB]\\-\\-illegal\\-access=deny\\f[R] then you can learn more about what is\n-going on with the \\f[CB]warn\\f[R] and \\f[CB]debug\\f[R] modes.\n-For each library or framework on the class path that requires illegal\n-access, you have two options:\n-.IP \\[bu] 2\n-If the component\\[aq]s maintainers have already released a fixed version\n-that no longer uses JDK\\-internal APIs then you can consider upgrading\n-to that version.\n-.IP \\[bu] 2\n-If the component still needs to be fixed, then you can contact its\n-maintainers and ask them to replace their use of JDK\\-internal APIs with\n-the proper exported APIs.\n-.PP\n-If you must continue to use a component that requires illegal access,\n-then you can eliminate the warning messages by using one or more\n-\\f[CB]\\-\\-add\\-opens\\f[R] options to open only those internal packages to\n-which access is required.\n-.PP\n-To verify that your application is ready for a future version of the\n-JDK, run it with \\f[CB]\\-\\-illegal\\-access=deny\\f[R] along with any\n-necessary \\f[CB]\\-\\-add\\-opens\\f[R] options.\n-Any remaining illegal\\-access errors will most likely be due to static\n-references from compiled code to JDK\\-internal APIs.\n-You can identify those by running the \\f[B]jdeps\\f[R] tool with the\n-\\f[CB]\\-\\-jdk\\-internals\\f[R] option.\n-For performance reasons, the current JDK does not issue warnings for\n-illegal static\\-access operations.\n-.RE\n-.TP\n@@ -4035,2 +3957,10 @@\n-.PP\n-None in JDK 17.\n+.TP\n+.B \\f[CB]\\-\\-illegal\\-access=\\f[R]\\f[I]parameter\\f[R]\n+Controlled \\f[I]relaxed strong encapsulation\\f[R], as defined in \\f[B]JEP\n+261\\f[R]\n+[https:\/\/openjdk.java.net\/jeps\/261#Relaxed\\-strong\\-encapsulation].\n+This option was deprecated in JDK 16 by \\f[B]JEP 396\\f[R]\n+[https:\/\/openjdk.java.net\/jeps\/396] and made obsolete in JDK 17 by\n+\\f[B]JEP 403\\f[R] [https:\/\/openjdk.java.net\/jeps\/403].\n+.RS\n+.RE\n@@ -4377,0 +4307,2 @@\n+.PP\n+\\f[CB]\\-Xlog:\\f[R]\\f[I]directive\\f[R]\n@@ -4407,0 +4339,5 @@\n+.TP\n+.B \\f[I]directive\\f[R]\n+A global option or subcommand: help, disable, async\n+.RS\n+.RE\n@@ -4557,0 +4494,23 @@\n+.SS \\-Xlog Output Mode\n+.PP\n+By default logging messages are output synchronously \\- each log message\n+is written to the designated output when the logging call is made.\n+But you can instead use asynchronous logging mode by specifying:\n+.TP\n+.B \\f[CB]\\-Xlog:async\\f[R]\n+Write all logging asynchronously.\n+.RS\n+.RE\n+.PP\n+In asynchronous logging mode, log sites enqueue all logging messages to\n+an intermediate buffer and a standalone thread is responsible for\n+flushing them to the corresponding outputs.\n+The intermediate buffer is bounded and on buffer exhaustion the\n+enqueuing message is discarded.\n+Log entry write operations are guaranteed non\\-blocking.\n+.PP\n+The option \\f[CB]\\-XX:AsyncLogBufferSize=N\\f[R] specifies the memory\n+budget in bytes for the intermediate buffer.\n+The default value should be big enough to cater for most cases.\n+Users can provide a custom value to trade memory overhead for log\n+accuracy if they need to.\n","filename":"src\/java.base\/share\/man\/java.1","additions":42,"deletions":82,"binary":false,"changes":124,"status":"modified"}]}