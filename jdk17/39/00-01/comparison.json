{"files":[{"patch":"@@ -244,0 +244,25 @@\n+    static Object[][] fixedShapeXSegmentedCastSpeciesArgs(VectorShape srcShape) {\n+        List<Object[]> args = new ArrayList<>();\n+\n+        for (Class<?> srcE : List.of(byte.class, short.class, int.class, long.class, float.class, double.class)) {\n+            VectorSpecies<?> src = VectorSpecies.of(srcE, srcShape);\n+\n+            for (VectorShape dstShape : VectorShape.values()) {\n+                for (Class<?> dstE : List.of(byte.class, short.class, int.class, long.class, float.class, double.class)) {\n+                    VectorSpecies<?> dst = VectorSpecies.of(dstE, dstShape);\n+\n+                    List<VectorSpecies> legal = new ArrayList<VectorSpecies>();\n+                    List<VectorSpecies> illegal = new ArrayList<VectorSpecies>();\n+\n+                    if (dst.length() == src.length()) {\n+                        legal.add(dst);\n+                    } else {\n+                        illegal.add(dst);\n+                    }\n+\n+                    args.add(new Object[]{src, legal, illegal});\n+                }\n+            }\n+        }\n+        return args.toArray(Object[][]::new);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/AbstractVectorConversionTest.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -289,34 +289,0 @@\n-\n-    static  List<VectorSpecies> castSpeciesProvider(VectorSpecies SPECIES, boolean legal) {\n-        List<VectorSpecies> res = new ArrayList<VectorSpecies>();\n-        for (int elmSz : new int[] {8,16,32,64} ) {\n-            int toSpeciesLength = SPECIES.length() * elmSz;\n-            boolean pickSpecies = legal ?\n-                                  toSpeciesLength >= 64 && toSpeciesLength <= 512 :\n-                                  toSpeciesLength < 64 || toSpeciesLength > 512;\n-            if (pickSpecies) {\n-                if (!legal) {\n-                    toSpeciesLength = toSpeciesLength < 64 ? 64 : 512;\n-                }\n-                switch(elmSz) {\n-                    case 8:\n-                        res.add(VectorSpecies.of(byte.class, VectorShape.forBitSize(toSpeciesLength)));\n-                        break;\n-                    case 16:\n-                        res.add(VectorSpecies.of(short.class, VectorShape.forBitSize(toSpeciesLength)));\n-                        break;\n-                    case 32:\n-                        res.add(VectorSpecies.of(int.class, VectorShape.forBitSize(toSpeciesLength)));\n-                        res.add(VectorSpecies.of(float.class, VectorShape.forBitSize(toSpeciesLength)));\n-                        break;\n-                    case 64:\n-                        res.add(VectorSpecies.of(long.class, VectorShape.forBitSize(toSpeciesLength)));\n-                        res.add(VectorSpecies.of(double.class, VectorShape.forBitSize(toSpeciesLength)));\n-                        break;\n-                    default:\n-                        assert false;\n-                }\n-            }\n-        }\n-        return res;\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/AbstractVectorTest.java","additions":0,"deletions":34,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -40,5 +40,0 @@\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -951,28 +942,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5451,66 +5414,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastByte128VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastByte128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastByte128VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastByte128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -40,5 +40,0 @@\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -951,28 +942,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5451,66 +5414,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastByte256VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastByte256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastByte256VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastByte256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -40,5 +40,0 @@\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -951,28 +942,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5451,66 +5414,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastByte512VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastByte512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastByte512VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastByte512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -40,5 +40,0 @@\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -951,28 +942,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5451,66 +5414,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastByte64VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastByte64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastByte64VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastByte64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -40,5 +40,0 @@\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -77,4 +72,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -956,28 +947,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5456,66 +5419,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastByteMaxVectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastByteMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastByteMaxVectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastByteMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,3 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n@@ -43,2 +40,0 @@\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -1083,28 +1074,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5002,66 +4965,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastDouble128VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastDouble128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastDouble128VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastDouble128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,3 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n@@ -43,2 +40,0 @@\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -1083,28 +1074,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5002,66 +4965,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastDouble256VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastDouble256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastDouble256VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastDouble256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,3 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n@@ -43,2 +40,0 @@\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -1083,28 +1074,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5002,66 +4965,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastDouble512VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastDouble512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastDouble512VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastDouble512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,3 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n@@ -43,2 +40,0 @@\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -1083,28 +1074,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5002,66 +4965,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastDouble64VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastDouble64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastDouble64VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastDouble64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,3 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n@@ -43,2 +40,0 @@\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -77,4 +72,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -1088,28 +1079,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5007,66 +4970,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastDoubleMaxVectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastDoubleMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastDoubleMaxVectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastDoubleMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n@@ -41,4 +40,0 @@\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -1093,28 +1084,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -4980,66 +4943,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastFloat128VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastFloat128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastFloat128VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastFloat128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n@@ -41,4 +40,0 @@\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -1093,28 +1084,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -4980,66 +4943,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastFloat256VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastFloat256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastFloat256VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastFloat256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n@@ -41,4 +40,0 @@\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -1093,28 +1084,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -4980,66 +4943,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastFloat512VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastFloat512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastFloat512VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastFloat512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n@@ -41,4 +40,0 @@\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -1093,28 +1084,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -4980,66 +4943,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastFloat64VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastFloat64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastFloat64VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastFloat64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n@@ -41,4 +40,0 @@\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -77,4 +72,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -1098,28 +1089,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -4985,66 +4948,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastFloatMaxVectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastFloatMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastFloatMaxVectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastFloatMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,2 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n@@ -42,3 +40,0 @@\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -941,28 +932,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5405,66 +5368,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastInt128VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastInt128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastInt128VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastInt128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,2 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n@@ -42,3 +40,0 @@\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -941,28 +932,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5405,66 +5368,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastInt256VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastInt256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastInt256VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastInt256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,2 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n@@ -42,3 +40,0 @@\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -941,28 +932,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5405,66 +5368,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastInt512VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastInt512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastInt512VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastInt512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,2 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n@@ -42,3 +40,0 @@\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -941,28 +932,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5405,66 +5368,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastInt64VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastInt64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastInt64VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastInt64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,2 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n@@ -42,3 +40,0 @@\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.LongVector;\n@@ -77,4 +72,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -946,28 +937,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5410,66 +5373,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastIntMaxVectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastIntMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastIntMaxVectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastIntMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,5 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -937,28 +928,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5289,66 +5252,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastLong128VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastLong128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastLong128VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastLong128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,5 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -937,28 +928,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5289,66 +5252,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastLong256VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastLong256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastLong256VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastLong256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,5 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -937,28 +928,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5289,66 +5252,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastLong512VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastLong512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastLong512VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastLong512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,5 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -937,28 +928,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5289,66 +5252,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastLong64VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastLong64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastLong64VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastLong64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,5 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.ShortVector;\n@@ -77,4 +72,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -942,28 +933,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5294,66 +5257,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastLongMaxVectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastLongMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastLongMaxVectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastLongMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,4 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n@@ -44,1 +40,0 @@\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -941,28 +932,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5430,66 +5393,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastShort128VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastShort128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastShort128VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastShort128VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,4 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n@@ -44,1 +40,0 @@\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -941,28 +932,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5430,66 +5393,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastShort256VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastShort256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastShort256VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastShort256VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,4 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n@@ -44,1 +40,0 @@\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -941,28 +932,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5430,66 +5393,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastShort512VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastShort512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastShort512VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastShort512VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,4 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n@@ -44,1 +40,0 @@\n-import jdk.incubator.vector.LongVector;\n@@ -72,4 +67,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -941,28 +932,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5430,66 +5393,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastShort64VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastShort64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastShort64VectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastShort64VectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -39,4 +39,0 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.DoubleVector;\n@@ -44,1 +40,0 @@\n-import jdk.incubator.vector.LongVector;\n@@ -77,4 +72,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -946,28 +937,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -5435,66 +5398,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCastShortMaxVectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCastShortMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCastShortMaxVectorTestsTest(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCastShortMaxVectorTestsTest(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":0,"deletions":103,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import jdk.incubator.vector.VectorMask;\n+import jdk.incubator.vector.VectorShuffle;\n@@ -28,0 +30,1 @@\n+import org.testng.Assert;\n@@ -30,0 +33,1 @@\n+import java.util.List;\n@@ -55,0 +59,5 @@\n+    @DataProvider\n+    public Object[][] fixedShapeXSegmentedCastSpecies() {\n+        return fixedShapeXSegmentedCastSpeciesArgs(SHAPE);\n+    }\n+\n@@ -78,0 +87,41 @@\n+\n+    @Test(dataProvider = \"fixedShapeXSegmentedCastSpecies\")\n+    static void shuffleCast(VectorSpecies src, List<VectorSpecies> legal, List<VectorSpecies> illegal) {\n+        int [] arr = new int[src.length()];\n+        for(int i = 0; i < arr.length; i++) {\n+            arr[i] = i;\n+        }\n+        VectorShuffle shuffle = VectorShuffle.fromArray(src, arr, 0);\n+\n+        for(var sps : legal) {\n+            VectorShuffle res = shuffle.cast(sps);\n+            Assert.assertEquals(res.toArray(), arr);\n+        }\n+\n+        for(var sps : illegal) {\n+            try {\n+                shuffle.cast(sps);\n+                Assert.fail();\n+            } catch (IllegalArgumentException e) {\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"fixedShapeXSegmentedCastSpecies\")\n+    static void maskCast(VectorSpecies src, List<VectorSpecies> legal, List<VectorSpecies> illegal) {\n+        long val = (1L << (src.length() & 63)) - 1L;\n+        VectorMask mask = VectorMask.fromLong(src, val);\n+\n+        for(var sps : legal) {\n+            VectorMask res = mask.cast(sps);\n+            Assert.assertEquals(res.toLong(), val);\n+        }\n+\n+        for(var sps : illegal) {\n+            try {\n+                mask.cast(sps);\n+                Assert.fail();\n+            } catch (IllegalArgumentException e) {\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector128ConversionTests.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import jdk.incubator.vector.VectorMask;\n+import jdk.incubator.vector.VectorShuffle;\n@@ -28,0 +30,1 @@\n+import org.testng.Assert;\n@@ -30,0 +33,1 @@\n+import java.util.List;\n@@ -55,0 +59,5 @@\n+    @DataProvider\n+    public Object[][] fixedShapeXSegmentedCastSpecies() {\n+        return fixedShapeXSegmentedCastSpeciesArgs(SHAPE);\n+    }\n+\n@@ -78,0 +87,41 @@\n+\n+    @Test(dataProvider = \"fixedShapeXSegmentedCastSpecies\")\n+    static void shuffleCast(VectorSpecies src, List<VectorSpecies> legal, List<VectorSpecies> illegal) {\n+        int [] arr = new int[src.length()];\n+        for(int i = 0; i < arr.length; i++) {\n+            arr[i] = i;\n+        }\n+        VectorShuffle shuffle = VectorShuffle.fromArray(src, arr, 0);\n+\n+        for(var sps : legal) {\n+            VectorShuffle res = shuffle.cast(sps);\n+            Assert.assertEquals(res.toArray(), arr);\n+        }\n+\n+        for(var sps : illegal) {\n+            try {\n+                shuffle.cast(sps);\n+                Assert.fail();\n+            } catch (IllegalArgumentException e) {\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"fixedShapeXSegmentedCastSpecies\")\n+    static void maskCast(VectorSpecies src, List<VectorSpecies> legal, List<VectorSpecies> illegal) {\n+        long val = (1L << (src.length() & 63)) - 1L;\n+        VectorMask mask = VectorMask.fromLong(src, val);\n+\n+        for(var sps : legal) {\n+            VectorMask res = mask.cast(sps);\n+            Assert.assertEquals(res.toLong(), val);\n+        }\n+\n+        for(var sps : illegal) {\n+            try {\n+                mask.cast(sps);\n+                Assert.fail();\n+            } catch (IllegalArgumentException e) {\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector256ConversionTests.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import jdk.incubator.vector.VectorMask;\n+import jdk.incubator.vector.VectorShuffle;\n@@ -28,0 +30,1 @@\n+import org.testng.Assert;\n@@ -30,0 +33,1 @@\n+import java.util.List;\n@@ -55,0 +59,5 @@\n+    @DataProvider\n+    public Object[][] fixedShapeXSegmentedCastSpecies() {\n+        return fixedShapeXSegmentedCastSpeciesArgs(SHAPE);\n+    }\n+\n@@ -78,0 +87,41 @@\n+\n+    @Test(dataProvider = \"fixedShapeXSegmentedCastSpecies\")\n+    static void shuffleCast(VectorSpecies src, List<VectorSpecies> legal, List<VectorSpecies> illegal) {\n+        int [] arr = new int[src.length()];\n+        for(int i = 0; i < arr.length; i++) {\n+            arr[i] = i;\n+        }\n+        VectorShuffle shuffle = VectorShuffle.fromArray(src, arr, 0);\n+\n+        for(var sps : legal) {\n+            VectorShuffle res = shuffle.cast(sps);\n+            Assert.assertEquals(res.toArray(), arr);\n+        }\n+\n+        for(var sps : illegal) {\n+            try {\n+                shuffle.cast(sps);\n+                Assert.fail();\n+            } catch (IllegalArgumentException e) {\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"fixedShapeXSegmentedCastSpecies\")\n+    static void maskCast(VectorSpecies src, List<VectorSpecies> legal, List<VectorSpecies> illegal) {\n+        long val = (1L << (src.length() & 63)) - 1L;\n+        VectorMask mask = VectorMask.fromLong(src, val);\n+\n+        for(var sps : legal) {\n+            VectorMask res = mask.cast(sps);\n+            Assert.assertEquals(res.toLong(), val);\n+        }\n+\n+        for(var sps : illegal) {\n+            try {\n+                mask.cast(sps);\n+                Assert.fail();\n+            } catch (IllegalArgumentException e) {\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector512ConversionTests.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import jdk.incubator.vector.VectorMask;\n+import jdk.incubator.vector.VectorShuffle;\n@@ -28,0 +30,1 @@\n+import org.testng.Assert;\n@@ -30,1 +33,1 @@\n-\n+import java.util.List;\n@@ -77,0 +80,5 @@\n+    @DataProvider\n+    public Object[][] fixedShapeXSegmentedCastSpecies() {\n+        return fixedShapeXSegmentedCastSpeciesArgs(SHAPE);\n+    }\n+\n@@ -100,0 +108,41 @@\n+\n+    @Test(dataProvider = \"fixedShapeXSegmentedCastSpecies\")\n+    static void shuffleCast(VectorSpecies src, List<VectorSpecies> legal, List<VectorSpecies> illegal) {\n+        int [] arr = new int[src.length()];\n+        for(int i = 0; i < arr.length; i++) {\n+            arr[i] = i;\n+        }\n+        VectorShuffle shuffle = VectorShuffle.fromArray(src, arr, 0);\n+\n+        for(var sps : legal) {\n+            VectorShuffle res = shuffle.cast(sps);\n+            Assert.assertEquals(res.toArray(), arr);\n+        }\n+\n+        for(var sps : illegal) {\n+            try {\n+                shuffle.cast(sps);\n+                Assert.fail();\n+            } catch (IllegalArgumentException e) {\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"fixedShapeXSegmentedCastSpecies\")\n+    static void maskCast(VectorSpecies src, List<VectorSpecies> legal, List<VectorSpecies> illegal) {\n+        long val = (1L << (src.length() & 63)) - 1L;\n+        VectorMask mask = VectorMask.fromLong(src, val);\n+\n+        for(var sps : legal) {\n+            VectorMask res = mask.cast(sps);\n+            Assert.assertEquals(res.toLong(), val);\n+        }\n+\n+        for(var sps : illegal) {\n+            try {\n+                mask.cast(sps);\n+                Assert.fail();\n+            } catch (IllegalArgumentException e) {\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector64ConversionTests.java","additions":50,"deletions":1,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import jdk.incubator.vector.VectorMask;\n+import jdk.incubator.vector.VectorShuffle;\n@@ -28,0 +30,1 @@\n+import org.testng.Assert;\n@@ -30,0 +33,1 @@\n+import java.util.List;\n@@ -54,0 +58,5 @@\n+    @DataProvider\n+    public Object[][] fixedShapeXSegmentedCastSpecies() {\n+        return fixedShapeXSegmentedCastSpeciesArgs(SHAPE);\n+    }\n+\n@@ -77,0 +86,41 @@\n+\n+    @Test(dataProvider = \"fixedShapeXSegmentedCastSpecies\")\n+    static void shuffleCast(VectorSpecies src, List<VectorSpecies> legal, List<VectorSpecies> illegal) {\n+        int [] arr = new int[src.length()];\n+        for(int i = 0; i < arr.length; i++) {\n+            arr[i] = i;\n+        }\n+        VectorShuffle shuffle = VectorShuffle.fromArray(src, arr, 0);\n+\n+        for(var sps : legal) {\n+            VectorShuffle res = shuffle.cast(sps);\n+            Assert.assertEquals(res.toArray(), arr);\n+        }\n+\n+        for(var sps : illegal) {\n+            try {\n+                shuffle.cast(sps);\n+                Assert.fail();\n+            } catch (IllegalArgumentException e) {\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"fixedShapeXSegmentedCastSpecies\")\n+    static void maskCast(VectorSpecies src, List<VectorSpecies> legal, List<VectorSpecies> illegal) {\n+        long val = (1L << (src.length() & 63)) - 1L;\n+        VectorMask mask = VectorMask.fromLong(src, val);\n+\n+        for(var sps : legal) {\n+            VectorMask res = mask.cast(sps);\n+            Assert.assertEquals(res.toLong(), val);\n+        }\n+\n+        for(var sps : illegal) {\n+            try {\n+                mask.cast(sps);\n+                Assert.fail();\n+            } catch (IllegalArgumentException e) {\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/VectorMaxConversionTests.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -447,66 +447,0 @@\n-    @Test(dataProvider = \"castSpeciesMaskProvider\")\n-    static void maskCast$vectorteststype$Test(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vmask.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castSpeciesShuffleProvider\")\n-    static void shuffleCast$vectorteststype$Test(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] vsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < vsp.length; j++) {\n-                    var res = vshuffle.cast(vsp[j]);\n-                    assertArraysEquals(res.toArray(), a, i);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesMaskProvider\")\n-    static void maskIllegalCast$vectorteststype$Test(IntFunction<boolean[]> fa, List<VectorSpecies> fb) {\n-        boolean[] a = fa.apply(SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vmask = SPECIES.loadMask(a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vmask.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Test(dataProvider = \"castInvalidSpeciesShuffleProvider\")\n-    static void shuffleIllegalCast$vectorteststype$Test(BiFunction<Integer,Integer,int[]> fa, List<VectorSpecies> fb) {\n-        int[] a = fa.apply(SPECIES.length() * BUFFER_REPS, SPECIES.length());\n-        VectorSpecies[] invsp = fb.toArray(VectorSpecies[]::new);\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                var vshuffle = VectorShuffle.fromArray(SPECIES, a, i);\n-                for (int j = 0 ; j < invsp.length; j++) {\n-                    try {\n-                        vshuffle.cast(invsp[j]);\n-                        Assert.fail();\n-                    } catch (IllegalArgumentException e) {\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Miscellaneous.template","additions":0,"deletions":66,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#if[Byte]\n@@ -40,0 +41,2 @@\n+#end[Byte]\n+#if[Float]\n@@ -41,0 +44,2 @@\n+#end[Float]\n+#if[Int]\n@@ -42,0 +47,2 @@\n+#end[Int]\n+#if[Double]\n@@ -43,0 +50,2 @@\n+#end[Double]\n+#if[Short]\n@@ -44,0 +53,2 @@\n+#end[Short]\n+#if[Long]\n@@ -45,0 +56,1 @@\n+#end[Long]\n@@ -84,4 +96,0 @@\n-    static List<VectorSpecies> VALIDCASTSPECIES = castSpeciesProvider(SPECIES, true);\n-\n-    static List<VectorSpecies> INVALIDCASTSPECIES = castSpeciesProvider(SPECIES, false);\n-\n@@ -1137,28 +1145,0 @@\n-    @DataProvider\n-    public Object[][] castSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,VALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesMaskProvider() {\n-        return BOOLEAN_MASK_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    @DataProvider\n-    public Object[][] castInvalidSpeciesShuffleProvider() {\n-        return INT_SHUFFLE_GENERATORS.stream().\n-                map(f -> new Object[]{f,INVALIDCASTSPECIES}).\n-                toArray(Object[][]::new);\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":12,"deletions":32,"binary":false,"changes":44,"status":"modified"}]}