{"files":[{"patch":"@@ -5414,0 +5414,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueByte128VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5414,0 +5414,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueByte256VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5414,0 +5414,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueByte512VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5414,0 +5414,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueByte64VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5419,0 +5419,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueByteMaxVectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -4965,0 +4965,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueDouble128VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -4965,0 +4965,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueDouble256VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -4965,0 +4965,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueDouble512VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -4965,0 +4965,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueDouble64VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -4970,0 +4970,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueDoubleMaxVectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -4943,0 +4943,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueFloat128VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -4943,0 +4943,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueFloat256VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -4943,0 +4943,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueFloat512VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -4943,0 +4943,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueFloat64VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -4948,0 +4948,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueFloatMaxVectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5368,0 +5368,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueInt128VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5368,0 +5368,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueInt256VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5368,0 +5368,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueInt512VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5368,0 +5368,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueInt64VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5373,0 +5373,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueIntMaxVectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5252,0 +5252,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueLong128VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5252,0 +5252,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueLong256VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5252,0 +5252,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueLong512VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5252,0 +5252,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueLong64VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5257,0 +5257,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueLongMaxVectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5393,0 +5393,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueShort128VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5393,0 +5393,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueShort256VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5393,0 +5393,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueShort512VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5393,0 +5393,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueShort64VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -5398,0 +5398,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueShortMaxVectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -447,0 +447,17 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrue$vectorteststype$SmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Miscellaneous.template","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}