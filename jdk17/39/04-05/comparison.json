{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import jdk.incubator.vector.VectorMask;\n@@ -28,0 +29,1 @@\n+import jdk.incubator.vector.VectorShuffle;\n@@ -248,1 +250,0 @@\n-            List<VectorSpecies> sps = new ArrayList<VectorSpecies>();\n@@ -254,1 +255,1 @@\n-                            sps.add(dst);\n+                            args.add(new Object[]{src, dst});\n@@ -258,1 +259,1 @@\n-                            sps.add(dst);\n+                            args.add(new Object[]{src, dst});\n@@ -263,1 +264,0 @@\n-            args.add(new Object[]{src, sps});\n@@ -514,0 +514,46 @@\n+\n+    static <E,F> void legal_mask_cast_kernel(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        for(int i = 0; i < INVOC_COUNT; i++) {\n+            VectorMask<E> mask = VectorMask.fromLong(src, i);\n+            VectorMask<F> res = mask.cast(dst);\n+            Assert.assertEquals(res.toLong(), mask.toLong());\n+        }\n+    }\n+\n+    static <E,F> void illegal_mask_cast_kernel(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        for(int i = 0; i < INVOC_COUNT; i++) {\n+            VectorMask<E> mask = VectorMask.fromLong(src, i);\n+            try {\n+                mask.cast(dst);\n+                Assert.fail();\n+            } catch (IllegalArgumentException e) {\n+            }\n+        }\n+    }\n+\n+    static <E,F> void legal_shuffle_cast_kernel(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        int [] arr = new int[src.length()*INVOC_COUNT];\n+        for(int i = 0; i < arr.length; i++) {\n+            arr[i] = i;\n+        }\n+        for(int i = 0; i < INVOC_COUNT; i++) {\n+            VectorShuffle<E> shuffle = VectorShuffle.fromArray(src, arr, i);\n+            VectorShuffle<F> res = shuffle.cast(dst);\n+            Assert.assertEquals(res.toArray(), shuffle.toArray());\n+        }\n+    }\n+\n+    static <E,F> void illegal_shuffle_cast_kernel(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        int [] arr = new int[src.length()*INVOC_COUNT];\n+        for(int i = 0; i < arr.length; i++) {\n+            arr[i] = i;\n+        }\n+        for(int i = 0; i < INVOC_COUNT; i++) {\n+            VectorShuffle<E> shuffle = VectorShuffle.fromArray(src, arr, i);\n+            try {\n+                shuffle.cast(dst);\n+                Assert.fail();\n+            } catch (IllegalArgumentException e) {\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/AbstractVectorConversionTest.java","additions":50,"deletions":4,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -94,10 +94,2 @@\n-    static void shuffleCast(VectorSpecies src, List<VectorSpecies> legal) {\n-        int [] arr = new int[src.length()];\n-        for(int i = 0; i < arr.length; i++) {\n-            arr[i] = i;\n-        }\n-        VectorShuffle shuffle = VectorShuffle.fromArray(src, arr, 0);\n-        for(var sps : legal) {\n-            VectorShuffle res = shuffle.cast(sps);\n-            Assert.assertEquals(res.toArray(), arr);\n-        }\n+    static <E,F> void shuffleCast(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        legal_shuffle_cast_kernel(src, dst);\n@@ -107,13 +99,2 @@\n-    static void shuffleCastNeg(VectorSpecies src, List<VectorSpecies> illegal) {\n-        int [] arr = new int[src.length()];\n-        for(int i = 0; i < arr.length; i++) {\n-            arr[i] = i;\n-        }\n-        VectorShuffle shuffle = VectorShuffle.fromArray(src, arr, 0);\n-        for(var sps : illegal) {\n-            try {\n-                shuffle.cast(sps);\n-                Assert.fail();\n-            } catch (IllegalArgumentException e) {\n-            }\n-        }\n+    static <E,F> void shuffleCastNeg(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        illegal_shuffle_cast_kernel(src, dst);\n@@ -123,7 +104,2 @@\n-    static void maskCast(VectorSpecies src, List<VectorSpecies> legal) {\n-        long val = (1L << (src.length() & 63)) - 1L;\n-        VectorMask mask = VectorMask.fromLong(src, val);\n-        for(var sps : legal) {\n-            VectorMask res = mask.cast(sps);\n-            Assert.assertEquals(res.toLong(), val);\n-        }\n+    static <E,F> void maskCast(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        legal_mask_cast_kernel(src, dst);\n@@ -133,10 +109,2 @@\n-    static void maskCastNeg(VectorSpecies src, List<VectorSpecies> illegal) {\n-        long val = (1L << (src.length() & 63)) - 1L;\n-        VectorMask mask = VectorMask.fromLong(src, val);\n-        for(var sps : illegal) {\n-            try {\n-                mask.cast(sps);\n-                Assert.fail();\n-            } catch (IllegalArgumentException e) {\n-            }\n-        }\n+    static <E,F> void maskCastNeg(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        illegal_mask_cast_kernel(src, dst);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector128ConversionTests.java","additions":8,"deletions":40,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -94,10 +94,2 @@\n-    static void shuffleCast(VectorSpecies src, List<VectorSpecies> legal) {\n-        int [] arr = new int[src.length()];\n-        for(int i = 0; i < arr.length; i++) {\n-            arr[i] = i;\n-        }\n-        VectorShuffle shuffle = VectorShuffle.fromArray(src, arr, 0);\n-        for(var sps : legal) {\n-            VectorShuffle res = shuffle.cast(sps);\n-            Assert.assertEquals(res.toArray(), arr);\n-        }\n+    static <E,F> void shuffleCast(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        legal_shuffle_cast_kernel(src, dst);\n@@ -107,13 +99,2 @@\n-    static void shuffleCastNeg(VectorSpecies src, List<VectorSpecies> illegal) {\n-        int [] arr = new int[src.length()];\n-        for(int i = 0; i < arr.length; i++) {\n-            arr[i] = i;\n-        }\n-        VectorShuffle shuffle = VectorShuffle.fromArray(src, arr, 0);\n-        for(var sps : illegal) {\n-            try {\n-                shuffle.cast(sps);\n-                Assert.fail();\n-            } catch (IllegalArgumentException e) {\n-            }\n-        }\n+    static <E,F> void shuffleCastNeg(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        illegal_shuffle_cast_kernel(src, dst);\n@@ -123,7 +104,2 @@\n-    static void maskCast(VectorSpecies src, List<VectorSpecies> legal) {\n-        long val = (1L << (src.length() & 63)) - 1L;\n-        VectorMask mask = VectorMask.fromLong(src, val);\n-        for(var sps : legal) {\n-            VectorMask res = mask.cast(sps);\n-            Assert.assertEquals(res.toLong(), val);\n-        }\n+    static <E,F> void maskCast(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        legal_mask_cast_kernel(src, dst);\n@@ -133,10 +109,2 @@\n-    static void maskCastNeg(VectorSpecies src, List<VectorSpecies> illegal) {\n-        long val = (1L << (src.length() & 63)) - 1L;\n-        VectorMask mask = VectorMask.fromLong(src, val);\n-        for(var sps : illegal) {\n-            try {\n-                mask.cast(sps);\n-                Assert.fail();\n-            } catch (IllegalArgumentException e) {\n-            }\n-        }\n+    static <E,F> void maskCastNeg(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        illegal_mask_cast_kernel(src, dst);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector256ConversionTests.java","additions":8,"deletions":40,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -94,11 +94,2 @@\n-    static void shuffleCast(VectorSpecies src, List<VectorSpecies> legal) {\n-        int [] arr = new int[src.length()];\n-        for(int i = 0; i < arr.length; i++) {\n-            arr[i] = i;\n-        }\n-        VectorShuffle shuffle = VectorShuffle.fromArray(src, arr, 0);\n-\n-        for(var sps : legal) {\n-            VectorShuffle res = shuffle.cast(sps);\n-            Assert.assertEquals(res.toArray(), arr);\n-        }\n+    static <E,F> void shuffleCast(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        legal_shuffle_cast_kernel(src, dst);\n@@ -108,13 +99,2 @@\n-    static void shuffleCastNeg(VectorSpecies src, List<VectorSpecies> illegal) {\n-        int [] arr = new int[src.length()];\n-        for(int i = 0; i < arr.length; i++) {\n-            arr[i] = i;\n-        }\n-        VectorShuffle shuffle = VectorShuffle.fromArray(src, arr, 0);\n-        for(var sps : illegal) {\n-            try {\n-                shuffle.cast(sps);\n-                Assert.fail();\n-            } catch (IllegalArgumentException e) {\n-            }\n-        }\n+    static <E,F> void shuffleCastNeg(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        illegal_shuffle_cast_kernel(src, dst);\n@@ -124,7 +104,2 @@\n-    static void maskCast(VectorSpecies src, List<VectorSpecies> legal) {\n-        long val = (1L << (src.length() & 63)) - 1L;\n-        VectorMask mask = VectorMask.fromLong(src, val);\n-        for(var sps : legal) {\n-            VectorMask res = mask.cast(sps);\n-            Assert.assertEquals(res.toLong(), val);\n-        }\n+    static <E,F> void maskCast(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        legal_mask_cast_kernel(src, dst);\n@@ -134,10 +109,2 @@\n-    static void maskCastNeg(VectorSpecies src, List<VectorSpecies> illegal) {\n-        long val = (1L << (src.length() & 63)) - 1L;\n-        VectorMask mask = VectorMask.fromLong(src, val);\n-        for(var sps : illegal) {\n-            try {\n-                mask.cast(sps);\n-                Assert.fail();\n-            } catch (IllegalArgumentException e) {\n-            }\n-        }\n+    static <E,F> void maskCastNeg(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        illegal_mask_cast_kernel(src, dst);\n@@ -145,1 +112,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector512ConversionTests.java","additions":8,"deletions":42,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -115,10 +115,2 @@\n-    static void shuffleCast(VectorSpecies src, List<VectorSpecies> legal) {\n-        int [] arr = new int[src.length()];\n-        for(int i = 0; i < arr.length; i++) {\n-            arr[i] = i;\n-        }\n-        VectorShuffle shuffle = VectorShuffle.fromArray(src, arr, 0);\n-        for(var sps : legal) {\n-            VectorShuffle res = shuffle.cast(sps);\n-            Assert.assertEquals(res.toArray(), arr);\n-        }\n+    static <E,F> void shuffleCast(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        legal_shuffle_cast_kernel(src, dst);\n@@ -128,13 +120,2 @@\n-    static void shuffleCastNeg(VectorSpecies src, List<VectorSpecies> illegal) {\n-        int [] arr = new int[src.length()];\n-        for(int i = 0; i < arr.length; i++) {\n-            arr[i] = i;\n-        }\n-        VectorShuffle shuffle = VectorShuffle.fromArray(src, arr, 0);\n-        for(var sps : illegal) {\n-            try {\n-                shuffle.cast(sps);\n-                Assert.fail();\n-            } catch (IllegalArgumentException e) {\n-            }\n-        }\n+    static <E,F> void shuffleCastNeg(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        illegal_shuffle_cast_kernel(src, dst);\n@@ -144,7 +125,2 @@\n-    static void maskCast(VectorSpecies src, List<VectorSpecies> legal) {\n-        long val = (1L << (src.length() & 63)) - 1L;\n-        VectorMask mask = VectorMask.fromLong(src, val);\n-        for(var sps : legal) {\n-            VectorMask res = mask.cast(sps);\n-            Assert.assertEquals(res.toLong(), val);\n-        }\n+    static <E,F> void maskCast(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        legal_mask_cast_kernel(src, dst);\n@@ -154,10 +130,2 @@\n-    static void maskCastNeg(VectorSpecies src, List<VectorSpecies> illegal) {\n-        long val = (1L << (src.length() & 63)) - 1L;\n-        VectorMask mask = VectorMask.fromLong(src, val);\n-        for(var sps : illegal) {\n-            try {\n-                mask.cast(sps);\n-                Assert.fail();\n-            } catch (IllegalArgumentException e) {\n-            }\n-        }\n+    static <E,F> void maskCastNeg(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        illegal_mask_cast_kernel(src, dst);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector64ConversionTests.java","additions":8,"deletions":40,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -93,10 +93,2 @@\n-    static void shuffleCast(VectorSpecies src, List<VectorSpecies> legal) {\n-        int [] arr = new int[src.length()];\n-        for(int i = 0; i < arr.length; i++) {\n-            arr[i] = i;\n-        }\n-        VectorShuffle shuffle = VectorShuffle.fromArray(src, arr, 0);\n-        for(var sps : legal) {\n-            VectorShuffle res = shuffle.cast(sps);\n-            Assert.assertEquals(res.toArray(), arr);\n-        }\n+    static <E,F> void shuffleCast(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        legal_shuffle_cast_kernel(src, dst);\n@@ -106,13 +98,2 @@\n-    static void shuffleCastNeg(VectorSpecies src, List<VectorSpecies> illegal) {\n-        int [] arr = new int[src.length()];\n-        for(int i = 0; i < arr.length; i++) {\n-            arr[i] = i;\n-        }\n-        VectorShuffle shuffle = VectorShuffle.fromArray(src, arr, 0);\n-        for(var sps : illegal) {\n-            try {\n-                shuffle.cast(sps);\n-                Assert.fail();\n-            } catch (IllegalArgumentException e) {\n-            }\n-        }\n+    static <E,F> void shuffleCastNeg(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        illegal_shuffle_cast_kernel(src, dst);\n@@ -122,7 +103,2 @@\n-    static void maskCast(VectorSpecies src, List<VectorSpecies> legal) {\n-        long val = (1L << (src.length() & 63)) - 1L;\n-        VectorMask mask = VectorMask.fromLong(src, val);\n-        for(var sps : legal) {\n-            VectorMask res = mask.cast(sps);\n-            Assert.assertEquals(res.toLong(), val);\n-        }\n+    static <E,F> void maskCast(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        legal_mask_cast_kernel(src, dst);\n@@ -132,10 +108,2 @@\n-    static void maskCastNeg(VectorSpecies src, List<VectorSpecies> illegal) {\n-        long val = (1L << (src.length() & 63)) - 1L;\n-        VectorMask mask = VectorMask.fromLong(src, val);\n-        for(var sps : illegal) {\n-            try {\n-                mask.cast(sps);\n-                Assert.fail();\n-            } catch (IllegalArgumentException e) {\n-            }\n-        }\n+    static <E,F> void maskCastNeg(VectorSpecies<E> src, VectorSpecies<F> dst) {\n+        illegal_mask_cast_kernel(src, dst);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/VectorMaxConversionTests.java","additions":8,"deletions":40,"binary":false,"changes":48,"status":"modified"}]}