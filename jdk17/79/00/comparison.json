{"files":[{"patch":"@@ -281,0 +281,1 @@\n+        checkSkip();\n","filename":"test\/jdk\/java\/net\/httpclient\/ISO_8859_1_Test.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -153,1 +153,1 @@\n-                        close(channel);\n+                        closeChannel(channel);\n@@ -187,0 +187,4 @@\n+    protected void closeChannel(SocketChannel channel) {\n+        close(channel);\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/DummyWebSocketServer.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ *      -Djdk.httpclient.sendBufferSize=8192\n@@ -51,0 +52,1 @@\n+            server.setReceiveBufferSize(1024);\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingBinaryPingClose.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ *      -Djdk.httpclient.sendBufferSize=8192\n@@ -53,0 +54,1 @@\n+            server.setReceiveBufferSize(1024);\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingBinaryPongClose.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ *      -Djdk.httpclient.sendBufferSize=8192\n@@ -53,0 +54,1 @@\n+            server.setReceiveBufferSize(1024);\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingPingBinaryClose.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ *      -Djdk.httpclient.sendBufferSize=8192\n@@ -55,0 +56,1 @@\n+                server.setReceiveBufferSize(1024);\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingPingTextClose.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ *      -Djdk.httpclient.sendBufferSize=8192\n@@ -53,0 +54,1 @@\n+            server.setReceiveBufferSize(1024);\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingPongBinaryClose.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ *      -Djdk.httpclient.sendBufferSize=8192\n@@ -53,0 +54,1 @@\n+            server.setReceiveBufferSize(1024);\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingPongTextClose.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ *      -Djdk.httpclient.sendBufferSize=8192\n@@ -52,0 +53,1 @@\n+            server.setReceiveBufferSize(1024);\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingTextPongClose.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -139,0 +139,1 @@\n+            volatile Thread reader;\n@@ -141,0 +142,1 @@\n+                reader = Thread.currentThread();\n@@ -142,0 +144,1 @@\n+                    System.out.println(\"Not reading server waiting\");\n@@ -147,0 +150,25 @@\n+\n+            @Override\n+            protected void closeChannel(SocketChannel channel) {\n+                try {\n+                    long read = drain(channel);\n+                    System.out.printf(\"Not reading server drained %s bytes%n\", read);\n+                } catch (IOException io) {\n+                    System.out.println(\"Not reading server failed to drain channel: \" + io);\n+                }\n+                super.closeChannel(channel);\n+            }\n+\n+            @Override\n+            public void close() {\n+                super.close();\n+                Thread thread = reader;\n+                if (thread != null && thread.isAlive() && thread != Thread.currentThread()) {\n+                    try {\n+                        thread.join();\n+                        System.out.println(\"Not reading server: closed\");\n+                    } catch (InterruptedException x) {\n+                        System.out.println(\"Not reading server: close interrupted: \" + x);\n+                    }\n+                }\n+            }\n@@ -150,0 +178,20 @@\n+    static long drain(SocketChannel channel) throws IOException {\n+        System.out.println(\"Not reading server: draining socket\");\n+        var blocking = channel.isBlocking();\n+        if (blocking) channel.configureBlocking(false);\n+        long count = 0;\n+        try {\n+            ByteBuffer buffer = ByteBuffer.allocateDirect(8 * 1024);\n+            int read;\n+            while ((read = channel.read(buffer)) > 0) {\n+                count += read;\n+                buffer.clear();\n+            }\n+            return count;\n+        } finally {\n+            if (blocking != channel.isBlocking()) {\n+                channel.configureBlocking(blocking);\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/Support.java","additions":49,"deletions":1,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,0 +79,1 @@\n+    HttpClient sharedClient;\n@@ -80,1 +81,1 @@\n-    static final int ITERATION_COUNT = 10;\n+    static final int ITERATION_COUNT = 4;\n@@ -109,1 +110,2 @@\n-        HttpClient client = null;\n+        HttpClient client = sharedClient;\n+        boolean pause;\n@@ -112,1 +114,2 @@\n-            if (!sameClient || client == null)\n+            if (!sameClient || client == null) {\n+                pause = client != null;\n@@ -114,0 +117,3 @@\n+                if (pause) gc(10); \/\/ give some time to gc\n+            }\n+            if (sharedClient == null) sharedClient = client;\n@@ -146,0 +152,9 @@\n+    static void gc(long ms) {\n+        System.gc();\n+        try {\n+            Thread.sleep(ms);\n+        } catch (InterruptedException x) {\n+            \/\/ OK\n+        }\n+    }\n+\n@@ -171,0 +186,2 @@\n+        sharedClient = null;\n+        gc(100);\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/WSHandshakeExceptionTest.java","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -407,0 +407,2 @@\n+        System.gc();\n+        try {Thread.sleep(100); } catch (InterruptedException x) { \/* OK *\/ }\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/WebSocketProxyTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}