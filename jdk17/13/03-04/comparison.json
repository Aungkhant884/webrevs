{"files":[{"patch":"@@ -329,2 +329,2 @@\n-    \/\/ Remember original System.err. setSecurityManager() warning goes here\n-    private static volatile @Stable PrintStream originalErrStream = null;\n+    \/\/ Remember initial System.err. setSecurityManager() warning goes here\n+    private static volatile @Stable PrintStream initialErrStream;\n@@ -382,1 +382,1 @@\n-            originalErrStream.printf(\"\"\"\n+            initialErrStream.printf(\"\"\"\n@@ -2218,1 +2218,1 @@\n-        originalErrStream = System.err;\n+        initialErrStream = System.err;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.test.lib.JDKToolFinder;\n@@ -33,0 +34,1 @@\n+import jdk.test.lib.util.JarUtils;\n@@ -35,0 +37,1 @@\n+import java.io.File;\n@@ -36,1 +39,2 @@\n-import java.security.Permission;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -39,0 +43,1 @@\n+\n@@ -41,11 +46,7 @@\n-            run(null)\n-                    .shouldHaveExitValue(0)\n-                    .shouldContain(\"SM is enabled: false\")\n-                    .shouldNotContain(\"A command line option has enabled the Security Manager\")\n-                    .shouldContain(\"System::setSecurityManager will be removed in a future release\");\n-\n-            run(\"allow\")\n-                    .shouldHaveExitValue(0)\n-                    .shouldContain(\"SM is enabled: false\")\n-                    .shouldNotContain(\"A command line option has enabled the Security Manager\")\n-                    .shouldContain(\"System::setSecurityManager will be removed in a future release\");\n+            Files.writeString(Path.of(\"policy\"), \"\"\"\n+                    grant {\n+                        permission java.lang.RuntimePermission \"setIO\";\n+                        permission java.lang.RuntimePermission \"createSecurityManager\";\n+                        permission java.lang.RuntimePermission \"setSecurityManager\";\n+                    };\n+                    \"\"\");\n@@ -53,5 +54,1 @@\n-            run(\"disallow\")\n-                    .shouldNotHaveExitValue(0)\n-                    .shouldContain(\"SM is enabled: false\")\n-                    .shouldNotContain(\"A command line option has enabled the Security Manager\")\n-                    .shouldContain(\"UnsupportedOperationException\");\n+            String testClasses = System.getProperty(\"test.classes\");\n@@ -59,5 +56,6 @@\n-            run(\"SecurityManagerWarnings$MySM\")\n-                    .shouldHaveExitValue(0)\n-                    .shouldContain(\"SM is enabled: true\")\n-                    .shouldContain(\"A command line option has enabled the Security Manager\")\n-                    .shouldContain(\"System::setSecurityManager will be removed in a future release\");\n+            allowTest(null, testClasses);\n+            allowTest(\"allow\", testClasses);\n+            disallowTest(\"disallow\", testClasses);\n+            enableTest(\"\", testClasses);\n+            enableTest(\"default\", testClasses);\n+            enableTest(\"java.lang.SecurityManager\", testClasses);\n@@ -65,1 +63,3 @@\n-            \/\/ Default SecurityManager does not allow setSecurityManager\n+            JarUtils.createJarFile(Path.of(\"a.jar\"),\n+                    Path.of(testClasses),\n+                    Path.of(\"SecurityManagerWarnings.class\"));\n@@ -67,11 +67,1 @@\n-            run(\"\")\n-                    .shouldNotHaveExitValue(0)\n-                    .shouldContain(\"SM is enabled: true\")\n-                    .shouldContain(\"A command line option has enabled the Security Manager\")\n-                    .shouldContain(\"AccessControlException\");\n-\n-            run(\"default\")\n-                    .shouldNotHaveExitValue(0)\n-                    .shouldContain(\"SM is enabled: true\")\n-                    .shouldContain(\"A command line option has enabled the Security Manager\")\n-                    .shouldContain(\"AccessControlException\");\n+            allowTest(null, \"a.jar\");\n@@ -81,2 +71,2 @@\n-            \/\/ Modify System.err, make sure warnings are printed to the\n-            \/\/ original System.err and will not be swallowed.\n+            \/\/ Modify System.err, thus make sure warnings are always printed\n+            \/\/ to the original System.err and will not be swallowed.\n@@ -84,1 +74,0 @@\n-            Exception ex = null;\n@@ -86,1 +75,1 @@\n-                System.setSecurityManager(new MySM());\n+                System.setSecurityManager(new SecurityManager());\n@@ -88,8 +77,3 @@\n-                ex = e;\n-            } finally {\n-                System.setErr(oldErr);\n-            }\n-            \/\/ Revert System.err to make sure the exception is\n-            \/\/ printed to the original System.err.\n-            if (ex != null) {\n-                throw ex;\n+                \/\/ Exception messages must show in original stderr\n+                e.printStackTrace(oldErr);\n+                throw e;\n@@ -100,1 +84,39 @@\n-    static OutputAnalyzer run(String prop) throws Exception {\n+    \/\/ When SM is allowed, no startup warning, has setSM warning\n+    static void allowTest(String prop, String cp) throws Exception {\n+        checkInstallMessage(run(prop, cp), cp)\n+                .shouldHaveExitValue(0)\n+                .stdoutShouldContain(\"SM is enabled: false\")\n+                .shouldNotContain(\"A command line option\");\n+    }\n+\n+    \/\/ When SM is disallowed, no startup warning, setSM fails\n+    static void disallowTest(String prop, String cp) throws Exception {\n+        run(prop, cp)\n+                .shouldNotHaveExitValue(0)\n+                .stdoutShouldContain(\"SM is enabled: false\")\n+                .shouldNotContain(\"A command line option\")\n+                .shouldNotContain(\"A terminally deprecated method\")\n+                .stderrShouldContain(\"UnsupportedOperationException: The Security Manager is deprecated and will be removed in a future release\");\n+    }\n+\n+    \/\/ When SM is allowed, has startup warning, has setSM warning\n+    static void enableTest(String prop, String cp) throws Exception {\n+        checkInstallMessage(run(prop, cp), cp)\n+                .shouldHaveExitValue(0)\n+                .stdoutShouldContain(\"SM is enabled: true\")\n+                .stderrShouldContain(\"WARNING: A command line option has enabled the Security Manager\")\n+                .stderrShouldContain(\"WARNING: The Security Manager is deprecated and will be removed in a future release\");\n+    }\n+\n+    \/\/ Check the setSM warning\n+    static OutputAnalyzer checkInstallMessage(OutputAnalyzer oa, String cp) {\n+        String uri = new File(cp).toURI().toString();\n+        return oa\n+                .stderrShouldContain(\"WARNING: A terminally deprecated method in java.lang.System has been called\")\n+                .stderrShouldContain(\"WARNING: System::setSecurityManager has been called by SecurityManagerWarnings (\" + uri + \")\")\n+                .stderrShouldContain(\"WARNING: Please consider reporting this to the maintainers of SecurityManagerWarnings\")\n+                .stderrShouldContain(\"WARNING: System::setSecurityManager will be removed in a future release\");\n+    }\n+\n+    static OutputAnalyzer run(String prop, String cp) throws Exception {\n+        ProcessBuilder pb;\n@@ -102,1 +124,3 @@\n-            return ProcessTools.executeTestJvm(\n+            pb = new ProcessBuilder(\n+                    JDKToolFinder.getJDKTool(\"java\"),\n+                    \"-cp\", cp,\n@@ -105,1 +129,3 @@\n-            return ProcessTools.executeTestJvm(\n+            pb = new ProcessBuilder(\n+                    JDKToolFinder.getJDKTool(\"java\"),\n+                    \"-cp\", cp,\n@@ -107,0 +133,1 @@\n+                    \"-Djava.security.policy=policy\",\n@@ -109,7 +136,1 @@\n-    }\n-\n-    \/\/ This SecurityManager allows everything!\n-    public static class MySM extends SecurityManager {\n-        @Override\n-        public void checkPermission(Permission perm) {\n-        }\n+        return ProcessTools.executeProcess(pb);\n","filename":"test\/jdk\/java\/lang\/System\/SecurityManagerWarnings.java","additions":77,"deletions":56,"binary":false,"changes":133,"status":"modified"}]}