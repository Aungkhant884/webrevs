{"files":[{"patch":"@@ -47,0 +47,1 @@\n+import java.net.URL;\n@@ -48,4 +49,0 @@\n-import java.security.AccessControlContext;\n-import java.security.ProtectionDomain;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -55,0 +52,5 @@\n+import java.security.AccessControlContext;\n+import java.security.AccessController;\n+import java.security.CodeSource;\n+import java.security.PrivilegedAction;\n+import java.security.ProtectionDomain;\n@@ -327,0 +329,10 @@\n+    \/\/ Remember initial System.err. setSecurityManager() warning goes here\n+    private static volatile @Stable PrintStream initialErrStream;\n+\n+    private static URL codeSource(Class<?> clazz) {\n+        PrivilegedAction<ProtectionDomain> pa = clazz::getProtectionDomain;\n+        @SuppressWarnings(\"removal\")\n+        CodeSource cs = AccessController.doPrivileged(pa).getCodeSource();\n+        return (cs != null) ? cs.getLocation() : null;\n+    }\n+\n@@ -365,0 +377,1 @@\n+    @CallerSensitive\n@@ -367,2 +380,14 @@\n-            System.err.println(\"WARNING: java.lang.System::setSecurityManager\" +\n-                    \" is deprecated and will be removed in a future release.\");\n+            var callerClass = Reflection.getCallerClass();\n+            URL url = codeSource(callerClass);\n+            final String source;\n+            if (url == null) {\n+                source = callerClass.getName();\n+            } else {\n+                source = callerClass.getName() + \" (\" + url + \")\";\n+            }\n+            initialErrStream.printf(\"\"\"\n+                    WARNING: A terminally deprecated method in java.lang.System has been called\n+                    WARNING: System::setSecurityManager has been called by %s\n+                    WARNING: Please consider reporting this to the maintainers of %s\n+                    WARNING: System::setSecurityManager will be removed in a future release\n+                    \"\"\", source, callerClass.getName());\n@@ -374,1 +399,1 @@\n-                    \"Runtime configured to disallow security manager\");\n+                    \"The Security Manager is deprecated and will be removed in a future release\");\n@@ -2194,2 +2219,3 @@\n-            System.err.println(\"WARNING: The Security Manager is deprecated\" +\n-                    \" and will be removed in a future release.\");\n+            System.err.println(\"\"\"\n+                    WARNING: A command line option has enabled the Security Manager\n+                    WARNING: The Security Manager is deprecated and will be removed in a future release\"\"\");\n@@ -2198,0 +2224,2 @@\n+        initialErrStream = System.err;\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":37,"deletions":9,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.stream.Collectors;\n@@ -47,2 +48,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -52,1 +51,0 @@\n-import java.util.ServiceConfigurationError;\n@@ -55,1 +53,0 @@\n-import jdk.internal.logger.SimpleConsoleLogger;\n@@ -205,0 +202,4 @@\n+    private static String withoutWarning(String in) {\n+        return in.lines().filter(s -> !s.startsWith(\"WARNING:\")).collect(Collectors.joining());\n+    }\n+\n@@ -238,6 +239,1 @@\n-                    String smDeprecationWarning\n-                            = \"WARNING: java.lang.System::setSecurityManager is deprecated and will be removed in a future release.\"\n-                            + System.getProperty(\"line.separator\");\n-                    if (warning.startsWith(smDeprecationWarning)) {\n-                        warning = warning.substring(smDeprecationWarning.length());\n-                    }\n+                    warning = withoutWarning(warning);\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/internal\/LoggerFinderLoaderTest\/LoggerFinderLoaderTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8266459\n+ * @bug 8266459 8268349\n@@ -31,0 +31,1 @@\n+import jdk.test.lib.JDKToolFinder;\n@@ -33,0 +34,1 @@\n+import jdk.test.lib.util.JarUtils;\n@@ -34,1 +36,5 @@\n-import java.security.Permission;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -37,0 +43,1 @@\n+\n@@ -39,30 +46,22 @@\n-            run(null)\n-                    .shouldHaveExitValue(0)\n-                    .shouldContain(\"SM is enabled: false\")\n-                    .shouldNotContain(\"Security Manager is deprecated\")\n-                    .shouldContain(\"setSecurityManager is deprecated\");\n-            run(\"allow\")\n-                    .shouldHaveExitValue(0)\n-                    .shouldContain(\"SM is enabled: false\")\n-                    .shouldNotContain(\"Security Manager is deprecated\")\n-                    .shouldContain(\"setSecurityManager is deprecated\");\n-            run(\"disallow\")\n-                    .shouldNotHaveExitValue(0)\n-                    .shouldContain(\"SM is enabled: false\")\n-                    .shouldNotContain(\"Security Manager is deprecated\")\n-                    .shouldContain(\"UnsupportedOperationException\");\n-            run(\"SecurityManagerWarnings$MySM\")\n-                    .shouldHaveExitValue(0)\n-                    .shouldContain(\"SM is enabled: true\")\n-                    .shouldContain(\"Security Manager is deprecated\")\n-                    .shouldContain(\"setSecurityManager is deprecated\");\n-            run(\"\")\n-                    .shouldNotHaveExitValue(0)\n-                    .shouldContain(\"SM is enabled: true\")\n-                    .shouldContain(\"Security Manager is deprecated\")\n-                    .shouldContain(\"AccessControlException\");\n-            run(\"default\")\n-                    .shouldNotHaveExitValue(0)\n-                    .shouldContain(\"SM is enabled: true\")\n-                    .shouldContain(\"Security Manager is deprecated\")\n-                    .shouldContain(\"AccessControlException\");\n+            Files.writeString(Path.of(\"policy\"), \"\"\"\n+                    grant {\n+                        permission java.lang.RuntimePermission \"setIO\";\n+                        permission java.lang.RuntimePermission \"createSecurityManager\";\n+                        permission java.lang.RuntimePermission \"setSecurityManager\";\n+                    };\n+                    \"\"\");\n+\n+            String testClasses = System.getProperty(\"test.classes\");\n+\n+            allowTest(null, testClasses);\n+            allowTest(\"allow\", testClasses);\n+            disallowTest(\"disallow\", testClasses);\n+            enableTest(\"\", testClasses);\n+            enableTest(\"default\", testClasses);\n+            enableTest(\"java.lang.SecurityManager\", testClasses);\n+\n+            JarUtils.createJarFile(Path.of(\"a.jar\"),\n+                    Path.of(testClasses),\n+                    Path.of(\"SecurityManagerWarnings.class\"));\n+\n+            allowTest(null, \"a.jar\");\n@@ -71,1 +70,11 @@\n-            System.setSecurityManager(new SecurityManager());\n+            PrintStream oldErr = System.err;\n+            \/\/ Modify System.err, thus make sure warnings are always printed\n+            \/\/ to the original System.err and will not be swallowed.\n+            System.setErr(new PrintStream(new ByteArrayOutputStream()));\n+            try {\n+                System.setSecurityManager(new SecurityManager());\n+            } catch (Exception e) {\n+                \/\/ Exception messages must show in original stderr\n+                e.printStackTrace(oldErr);\n+                throw e;\n+            }\n@@ -75,1 +84,39 @@\n-    static OutputAnalyzer run(String prop) throws Exception {\n+    \/\/ When SM is allowed, no startup warning, has setSM warning\n+    static void allowTest(String prop, String cp) throws Exception {\n+        checkInstallMessage(run(prop, cp), cp)\n+                .shouldHaveExitValue(0)\n+                .stdoutShouldContain(\"SM is enabled: false\")\n+                .shouldNotContain(\"A command line option\");\n+    }\n+\n+    \/\/ When SM is disallowed, no startup warning, setSM fails\n+    static void disallowTest(String prop, String cp) throws Exception {\n+        run(prop, cp)\n+                .shouldNotHaveExitValue(0)\n+                .stdoutShouldContain(\"SM is enabled: false\")\n+                .shouldNotContain(\"A command line option\")\n+                .shouldNotContain(\"A terminally deprecated method\")\n+                .stderrShouldContain(\"UnsupportedOperationException: The Security Manager is deprecated and will be removed in a future release\");\n+    }\n+\n+    \/\/ When SM is allowed, has startup warning, has setSM warning\n+    static void enableTest(String prop, String cp) throws Exception {\n+        checkInstallMessage(run(prop, cp), cp)\n+                .shouldHaveExitValue(0)\n+                .stdoutShouldContain(\"SM is enabled: true\")\n+                .stderrShouldContain(\"WARNING: A command line option has enabled the Security Manager\")\n+                .stderrShouldContain(\"WARNING: The Security Manager is deprecated and will be removed in a future release\");\n+    }\n+\n+    \/\/ Check the setSM warning\n+    static OutputAnalyzer checkInstallMessage(OutputAnalyzer oa, String cp) {\n+        String uri = new File(cp).toURI().toString();\n+        return oa\n+                .stderrShouldContain(\"WARNING: A terminally deprecated method in java.lang.System has been called\")\n+                .stderrShouldContain(\"WARNING: System::setSecurityManager has been called by SecurityManagerWarnings (\" + uri + \")\")\n+                .stderrShouldContain(\"WARNING: Please consider reporting this to the maintainers of SecurityManagerWarnings\")\n+                .stderrShouldContain(\"WARNING: System::setSecurityManager will be removed in a future release\");\n+    }\n+\n+    static OutputAnalyzer run(String prop, String cp) throws Exception {\n+        ProcessBuilder pb;\n@@ -77,1 +124,3 @@\n-            return ProcessTools.executeTestJvm(\n+            pb = new ProcessBuilder(\n+                    JDKToolFinder.getJDKTool(\"java\"),\n+                    \"-cp\", cp,\n@@ -80,1 +129,3 @@\n-            return ProcessTools.executeTestJvm(\n+            pb = new ProcessBuilder(\n+                    JDKToolFinder.getJDKTool(\"java\"),\n+                    \"-cp\", cp,\n@@ -82,0 +133,1 @@\n+                    \"-Djava.security.policy=policy\",\n@@ -84,7 +136,1 @@\n-    }\n-\n-    \/\/ This SecurityManager allows everything!\n-    public static class MySM extends SecurityManager {\n-        @Override\n-        public void checkPermission(Permission perm) {\n-        }\n+        return ProcessTools.executeProcess(pb);\n","filename":"test\/jdk\/java\/lang\/System\/SecurityManagerWarnings.java","additions":89,"deletions":43,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -150,1 +150,0 @@\n-                                  .filter(s -> !s.contains(\"setSecurityManager is deprecated\"))\n@@ -152,1 +151,1 @@\n-                                  .peek(s -> assertTrue(s.contains(\"does not exist\")))\n+                                  .filter(s -> s.contains(\"does not exist\"))\n@@ -167,1 +166,0 @@\n-                                  .filter(s -> !s.contains(\"setSecurityManager is deprecated\"))\n@@ -169,1 +167,1 @@\n-                                  .peek(s -> assertTrue(s.contains(\"not a directory\")))\n+                                  .filter(s -> s.contains(\"not a directory\"))\n@@ -227,1 +225,0 @@\n-                                      .filter(s -> !s.contains(\"setSecurityManager is deprecated\"))\n@@ -229,1 +226,1 @@\n-                                      .peek(s -> assertTrue(s.contains(\"not writable\")))\n+                                      .filter(s -> s.contains(\"not writable\"))\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/LogGeneratedClassesTest.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -89,0 +89,5 @@\n+\n+    private static String withoutWarning(String in) {\n+        return in.lines().filter(s -> !s.startsWith(\"WARNING:\")).collect(Collectors.joining());\n+    }\n+\n@@ -90,3 +95,2 @@\n-        if (r.exitValue != 0 ||\n-                (!r.output.isEmpty() && !r.output.equals(SECURITY_MANAGER_DEPRECATED)))\n-            throw new RuntimeException(r.output);\n+        if (r.exitValue != 0 || !withoutWarning(r.output).isEmpty())\n+            throw new RuntimeException(\"[\" + r.output + \"]\");\n","filename":"test\/jdk\/java\/net\/spi\/URLStreamHandlerProvider\/Basic.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4947618\n+ * @bug 4947618 8268349\n@@ -90,2 +90,0 @@\n-\n-        System.setSecurityManager(null);\n","filename":"test\/jdk\/java\/security\/ProtectionDomain\/RecursionDebug.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}