{"files":[{"patch":"@@ -47,0 +47,1 @@\n+import java.net.URL;\n@@ -48,4 +49,0 @@\n-import java.security.AccessControlContext;\n-import java.security.ProtectionDomain;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -55,0 +52,5 @@\n+import java.security.AccessControlContext;\n+import java.security.AccessController;\n+import java.security.CodeSource;\n+import java.security.PrivilegedAction;\n+import java.security.ProtectionDomain;\n@@ -327,0 +329,10 @@\n+    \/\/ Remember original System.err. setSecurityManager() warning goes here\n+    private static volatile @Stable PrintStream originalErrStream = null;\n+\n+    private static URL codeSource(Class<?> clazz) {\n+        PrivilegedAction<ProtectionDomain> pa = clazz::getProtectionDomain;\n+        @SuppressWarnings(\"removal\")\n+        CodeSource cs = AccessController.doPrivileged(pa).getCodeSource();\n+        return (cs != null) ? cs.getLocation() : null;\n+    }\n+\n@@ -365,0 +377,1 @@\n+    @CallerSensitive\n@@ -367,2 +380,8 @@\n-            System.err.println(\"WARNING: java.lang.System::setSecurityManager\" +\n-                    \" is deprecated and will be removed in a future release.\");\n+            var caller = Reflection.getCallerClass();\n+            String signature = caller.getName() + \" (\" + codeSource(caller) + \")\";\n+            originalErrStream.printf(\"\"\"\n+                    WARNING: A terminally deprecated method in java.lang.System has been called\n+                    WARNING: java.lang.System::setSecurityManager has been called by %s\n+                    WARNING: Please consider reporting this to the maintainers of %s\n+                    WARNING: java.lang.System::setSecurityManager will be removed in a future release\n+                    \"\"\", signature, caller.getName());\n@@ -374,1 +393,1 @@\n-                    \"Runtime configured to disallow security manager\");\n+                    \"The Security Manager API is deprecated and will be removed in a future release\");\n@@ -2194,2 +2213,5 @@\n-            System.err.println(\"WARNING: The Security Manager is deprecated\" +\n-                    \" and will be removed in a future release.\");\n+            System.err.printf(\"\"\"\n+                    WARNING: A Security Manager has been enabled on the command line\n+                    WARNING: The Security Manager API is deprecated and will be removed in a future release\n+                    WARNING: -Djava.security.manager%s will have no effect when the API is removed\n+                    \"\"\", smProp.isEmpty() ? \"\" : (\"=\" + smProp));\n@@ -2198,0 +2220,2 @@\n+        originalErrStream = System.err;\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":33,"deletions":9,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.stream.Collectors;\n@@ -47,2 +48,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -52,1 +51,0 @@\n-import java.util.ServiceConfigurationError;\n@@ -55,1 +53,0 @@\n-import jdk.internal.logger.SimpleConsoleLogger;\n@@ -205,0 +202,4 @@\n+    private static String withoutWarning(String in) {\n+        return in.lines().filter(s -> !s.startsWith(\"WARNING:\")).collect(Collectors.joining());\n+    }\n+\n@@ -238,6 +239,1 @@\n-                    String smDeprecationWarning\n-                            = \"WARNING: java.lang.System::setSecurityManager is deprecated and will be removed in a future release.\"\n-                            + System.getProperty(\"line.separator\");\n-                    if (warning.startsWith(smDeprecationWarning)) {\n-                        warning = warning.substring(smDeprecationWarning.length());\n-                    }\n+                    warning = withoutWarning(warning);\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/internal\/LoggerFinderLoaderTest\/LoggerFinderLoaderTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n@@ -42,2 +44,3 @@\n-                    .shouldNotContain(\"Security Manager is deprecated\")\n-                    .shouldContain(\"setSecurityManager is deprecated\");\n+                    .shouldNotContain(\"-Djava.security.manager\")\n+                    .shouldContain(\"java.lang.System::setSecurityManager will be removed in a future release\");\n+\n@@ -47,2 +50,3 @@\n-                    .shouldNotContain(\"Security Manager is deprecated\")\n-                    .shouldContain(\"setSecurityManager is deprecated\");\n+                    .shouldNotContain(\"-Djava.security.manager\")\n+                    .shouldContain(\"java.lang.System::setSecurityManager will be removed in a future release\");\n+\n@@ -52,1 +56,1 @@\n-                    .shouldNotContain(\"Security Manager is deprecated\")\n+                    .shouldNotContain(\"-Djava.security.manager\")\n@@ -54,0 +58,1 @@\n+\n@@ -57,2 +62,5 @@\n-                    .shouldContain(\"Security Manager is deprecated\")\n-                    .shouldContain(\"setSecurityManager is deprecated\");\n+                    .shouldContain(\"-Djava.security.manager=SecurityManagerWarnings$MySM will have no effect\")\n+                    .shouldContain(\"java.lang.System::setSecurityManager will be removed in a future release\");\n+\n+            \/\/ Default SecurityManager does not allow setSecurityManager\n+\n@@ -62,1 +70,1 @@\n-                    .shouldContain(\"Security Manager is deprecated\")\n+                    .shouldContain(\"-Djava.security.manager will have no effect\")\n@@ -64,0 +72,1 @@\n+\n@@ -67,1 +76,1 @@\n-                    .shouldContain(\"Security Manager is deprecated\")\n+                    .shouldContain(\"-Djava.security.manager=default will have no effect\")\n@@ -71,1 +80,17 @@\n-            System.setSecurityManager(new SecurityManager());\n+            PrintStream oldErr = System.err;\n+            \/\/ Modify System.err, make sure warnings are printed to the\n+            \/\/ original System.err and will not be swallowed.\n+            System.setErr(new PrintStream(new ByteArrayOutputStream()));\n+            Exception ex = null;\n+            try {\n+                System.setSecurityManager(new MySM());\n+            } catch (Exception e) {\n+                ex = e;\n+            } finally {\n+                System.setErr(oldErr);\n+            }\n+            \/\/ Revert System.err to make sure the exception is\n+            \/\/ printed to the original System.err.\n+            if (ex != null) {\n+                throw ex;\n+            }\n","filename":"test\/jdk\/java\/lang\/System\/SecurityManagerWarnings.java","additions":35,"deletions":10,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -150,1 +150,0 @@\n-                                  .filter(s -> !s.contains(\"setSecurityManager is deprecated\"))\n@@ -152,1 +151,1 @@\n-                                  .peek(s -> assertTrue(s.contains(\"does not exist\")))\n+                                  .filter(s -> s.contains(\"does not exist\"))\n@@ -167,1 +166,0 @@\n-                                  .filter(s -> !s.contains(\"setSecurityManager is deprecated\"))\n@@ -169,1 +167,1 @@\n-                                  .peek(s -> assertTrue(s.contains(\"not a directory\")))\n+                                  .filter(s -> s.contains(\"not a directory\"))\n@@ -227,1 +225,0 @@\n-                                      .filter(s -> !s.contains(\"setSecurityManager is deprecated\"))\n@@ -229,1 +226,1 @@\n-                                      .peek(s -> assertTrue(s.contains(\"not writable\")))\n+                                      .filter(s -> s.contains(\"not writable\"))\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/LogGeneratedClassesTest.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -89,0 +89,5 @@\n+\n+    private static String withoutWarning(String in) {\n+        return in.lines().filter(s -> !s.startsWith(\"WARNING:\")).collect(Collectors.joining());\n+    }\n+\n@@ -90,3 +95,2 @@\n-        if (r.exitValue != 0 ||\n-                (!r.output.isEmpty() && !r.output.equals(SECURITY_MANAGER_DEPRECATED)))\n-            throw new RuntimeException(r.output);\n+        if (r.exitValue != 0 || !withoutWarning(r.output).isEmpty())\n+            throw new RuntimeException(\"[\" + r.output + \"]\");\n","filename":"test\/jdk\/java\/net\/spi\/URLStreamHandlerProvider\/Basic.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4947618\n+ * @bug 4947618 8268349\n@@ -90,2 +90,0 @@\n-\n-        System.setSecurityManager(null);\n","filename":"test\/jdk\/java\/security\/ProtectionDomain\/RecursionDebug.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}