{"files":[{"patch":"@@ -1014,0 +1014,27 @@\n+\n+    int lo = igvn->type(adjusted_lim)->is_int()->_lo;\n+    if (lo < 0) {\n+      \/\/ If range check elimination applies to this comparison, it includes code to protect from overflows that may\n+      \/\/ cause the main loop to be skipped entirely. Delay this transformation.\n+      \/\/ Example:\n+      \/\/ for (int i = 0; i < limit; i++) {\n+      \/\/   if (i < max_jint && i > min_jint) {...\n+      \/\/ }\n+      \/\/ Comparisons folded as:\n+      \/\/ i - min_jint - 1 <u -2\n+      \/\/ when RC applies, main loop limit becomes:\n+      \/\/ min(limit, max(-2 + min_jint + 1, min_jint))\n+      \/\/ = min(limit, min_jint)\n+      \/\/ = min_jint\n+      if (!igvn->C->post_loop_opts_phase()) {\n+        if (adjusted_val->outcnt() == 0) {\n+          igvn->remove_dead_node(adjusted_val);\n+        }\n+        if (adjusted_lim->outcnt() == 0) {\n+          igvn->remove_dead_node(adjusted_lim);\n+        }\n+        igvn->C->record_for_post_loop_opts_igvn(this);\n+        return false;\n+      }\n+    }\n+\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.jdk.incubator.foreign;\n+\n+import jdk.incubator.foreign.CLinker;\n+import jdk.incubator.foreign.MemoryAccess;\n+import jdk.incubator.foreign.MemoryAddress;\n+import jdk.incubator.foreign.MemorySegment;\n+import jdk.incubator.foreign.ResourceScope;\n+import jdk.incubator.vector.ByteVector;\n+import jdk.incubator.vector.IntVector;\n+import jdk.incubator.vector.VectorSpecies;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@State(org.openjdk.jmh.annotations.Scope.Thread)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(value = 1, jvmArgsAppend = {\n+        \"--add-modules=jdk.incubator.foreign\",\n+        \"-Dforeign.restricted=permit\",\n+        \"--enable-native-access\", \"ALL-UNNAMED\"})\n+public class TestLoadBytes {\n+    @Param(\"1024\")\n+    private int size;\n+\n+    private byte[] srcArray;\n+    private ByteBuffer srcBufferNative;\n+    private MemorySegment srcSegmentImplicit;\n+\n+    @Setup\n+    public void setup() {\n+        srcArray = new byte[size];\n+        for (int i = 0; i < srcArray.length; i++) {\n+            srcArray[i] = (byte) i;\n+        }\n+\n+        srcBufferNative = ByteBuffer.allocateDirect(size);\n+        srcSegmentImplicit = MemorySegment.allocateNative(size, ResourceScope.newImplicitScope());\n+    }\n+\n+    @Benchmark\n+    public int arrayScalar() {\n+        int size = 0;\n+        for (int i = 0; i < srcArray.length; i ++) {\n+            var v = srcArray[i];\n+            size += v;\n+        }\n+        return size;\n+    }\n+\n+    @Benchmark\n+    public int arrayScalarConst() {\n+        int size = 0;\n+        for (int i = 0; i < 1024; i ++) {\n+            var v = srcArray[i];\n+            size += v;\n+        }\n+        return size;\n+    }\n+\n+    @Benchmark\n+    public int bufferNativeScalar() {\n+        int size = 0;\n+        for (int i = 0; i < srcArray.length; i++) {\n+            var v = srcBufferNative.get(i);\n+            size += v;\n+        }\n+        return size;\n+    }\n+\n+    @Benchmark\n+    public int bufferNativeScalarConst() {\n+        int size = 0;\n+        for (int i = 0; i < 1024; i++) {\n+            var v = srcBufferNative.get(i);\n+            size += v;\n+        }\n+        return size;\n+    }\n+\n+    @Benchmark\n+    public int segmentNativeScalar() {\n+        int size = 0;\n+        for (int i = 0; i < srcArray.length; i++) {\n+            var v = MemoryAccess.getByteAtOffset(srcSegmentImplicit, i);\n+            size += v;\n+        }\n+        return size;\n+    }\n+\n+    @Benchmark\n+    public int segmentNativeScalarConst() {\n+        int size = 0;\n+        for (int i = 0; i < 1024; i++) {\n+            var v = MemoryAccess.getByteAtOffset(srcSegmentImplicit, i);\n+            size += v;\n+        }\n+        return size;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/TestLoadBytes.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"}]}