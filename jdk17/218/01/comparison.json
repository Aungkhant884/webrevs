{"files":[{"patch":"@@ -72,6 +72,5 @@\n-  return unloaded_thread_id_set != NULL && JfrPredicate<traceid, compare_traceid>::test(unloaded_thread_id_set, tid);\n-}\n-\n-static bool add(GrowableArray<traceid>* set, traceid id) {\n-  assert(set != NULL, \"invariant\");\n-  return JfrMutablePredicate<traceid, compare_traceid>::test(set, id);\n+  if (unloaded_thread_id_set == NULL) {\n+    return false;\n+  }\n+  ThreadIdExclusiveAccess lock;\n+  return JfrPredicate<traceid, compare_traceid>::test(unloaded_thread_id_set, tid);\n@@ -85,1 +84,1 @@\n-  add(unloaded_thread_id_set, tid);\n+  JfrMutablePredicate<traceid, compare_traceid>::test(unloaded_thread_id_set, tid);\n@@ -95,0 +94,9 @@\n+void ObjectSampleCheckpoint::clear() {\n+  assert(SafepointSynchronize::is_at_safepoint(), \"invariant\");\n+  if (unloaded_thread_id_set != NULL) {\n+    delete unloaded_thread_id_set;\n+    unloaded_thread_id_set = NULL;\n+  }\n+  assert(unloaded_thread_id_set == NULL, \"invariant\");\n+}\n+\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleCheckpoint.cpp","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+  friend class StartOperation;\n@@ -51,0 +52,1 @@\n+  static void clear();\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleCheckpoint.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}