{"files":[{"patch":"@@ -189,1 +189,0 @@\n-            Symbol exprSym = TreeInfo.symbol(tree.expr);\n@@ -195,0 +194,3 @@\n+                JCExpression translatedExpr = translate(tree.expr);\n+                Symbol exprSym = TreeInfo.symbol(translatedExpr);\n+\n@@ -206,1 +208,0 @@\n-                JCExpression translatedExpr = translate(tree.expr);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8267610\n+ * @summary LambdaToMethod cannot capture pattern variables. So the TransPatterns should\n+ *          transform the pattern variables and symbols to normal variables and symbols.\n+ * @compile --enable-preview -source ${jdk.version} LambdaCannotCapturePatternVariables.java\n+ * @run main\/othervm --enable-preview LambdaCannotCapturePatternVariables\n+ *\/\n+\n+import java.util.function.Supplier;\n+\n+public class LambdaCannotCapturePatternVariables {\n+\n+    public static void main(String[] args) {\n+        var testVar = new LambdaCannotCapturePatternVariables();\n+        testVar.testInstanceOfPatternVariable(Integer.valueOf(1));\n+        testVar.testSwitchPatternVariable(Integer.valueOf(1));\n+        testVar.test(Integer.valueOf(1));\n+    }\n+\n+    public Integer testInstanceOfPatternVariable(Object x) {\n+        if(x instanceof Number y) {\n+            return ((Supplier<Integer>) (() -> {\n+                return ((y instanceof Integer z) ? z : 1);\n+            })).get();\n+        }\n+        return null;\n+    }\n+\n+    public Integer testSwitchPatternVariable(Object x) {\n+        switch (x) {\n+            case Number n: {\n+                return ((Supplier<Integer>) (() -> {\n+                    return ((n instanceof Integer i) ? i : 1);\n+                })).get();\n+            }\n+            default: return null;\n+        }\n+    }\n+\n+    \/\/ Provided by the user\n+    public Integer test(Object x) {\n+        Integer bar = 1;\n+        return ((x instanceof Number y) ?\n+                ((Supplier<Integer>) (() -> {\n+                    return ((y instanceof Integer z) ? z : bar);\n+                })).get() : bar);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/LambdaCannotCapturePatternVariables.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8268748\n+ * @summary Javac generates error opcodes when using nest pattern variables\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main NestedPatternVariablesBytecode\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.StreamSupport;\n+\n+import com.sun.tools.classfile.ClassFile;\n+import com.sun.tools.classfile.ConstantPoolException;\n+import com.sun.tools.classfile.Method;\n+import com.sun.tools.classfile.Attribute;\n+import com.sun.tools.classfile.Code_attribute;\n+import com.sun.tools.classfile.Instruction;\n+\n+import toolbox.JavacTask;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+public class NestedPatternVariablesBytecode extends TestRunner {\n+    private static final String JAVA_VERSION = System.getProperty(\"java.specification.version\");\n+    private static final String TEST_METHOD = \"test\";\n+\n+    ToolBox tb;\n+    ClassFile cf;\n+\n+    public NestedPatternVariablesBytecode() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        NestedPatternVariablesBytecode t = new NestedPatternVariablesBytecode();\n+        t.runTests();\n+    }\n+\n+    @Test\n+    public void testNestedPatternVariablesBytecode() throws Exception {\n+        String code = \"\"\"\n+                class NestedPatterVariablesTest {\n+                    String test(Object o) {\n+                        if (o instanceof (CharSequence cs && cs instanceof String s)) {\n+                            return s;\n+                        }\n+                        return null;\n+                    }\n+                }\"\"\";\n+        Path curPath = Path.of(\".\");\n+        new JavacTask(tb)\n+                .options(\"--enable-preview\", \"-source\", JAVA_VERSION)\n+                .sources(code)\n+                .outdir(curPath)\n+                .run();\n+\n+        cf = ClassFile.read(curPath.resolve(\"NestedPatterVariablesTest.class\"));\n+        Method testMethod = Arrays.stream(cf.methods)\n+                                  .filter(m -> isTestMethod(m))\n+                                  .findAny()\n+                                  .get();\n+        Code_attribute code_attribute = (Code_attribute) testMethod.attributes.get(Attribute.Code);\n+\n+        List<String> actualCode = getCodeInstructions(code_attribute);\n+        List<String> expectedCode = Arrays.asList(\n+                \"aload_1\", \"instanceof\", \"ifeq\", \"aload_1\", \"checkcast\", \"astore_2\", \"aload_2\", \"instanceof\",\n+                \"ifeq\", \"aload_2\", \"checkcast\", \"astore_3\", \"aload_3\", \"areturn\", \"aconst_null\", \"areturn\");\n+        tb.checkEqual(expectedCode, actualCode);\n+    }\n+\n+    boolean isTestMethod(Method m) {\n+        try {\n+            return TEST_METHOD.equals(m.getName(cf.constant_pool));\n+        } catch (ConstantPoolException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    List<String> getCodeInstructions(Code_attribute code) {\n+        return StreamSupport.stream(code.getInstructions().spliterator(), false)\n+                .map(Instruction::getMnemonic)\n+                .toList();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/NestedPatternVariablesBytecode.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}