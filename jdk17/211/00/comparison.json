{"files":[{"patch":"@@ -2403,0 +2403,8 @@\n+    case Op_VectorMaskCmp:\n+    \/\/ We don't have VectorReinterpret with bit_size less than 64 support for\n+    \/\/ now, even for byte type. To be refined with fully VectorCast support.\n+    case Op_VectorReinterpret:\n+      if (vlen < 2 || bit_size < 64) {\n+        return false;\n+      }\n+      break;\n@@ -2416,3 +2424,15 @@\n-     case Op_VectorMaskCmp:\n-       if (vlen < 2 || bit_size < 64) {\n-         return false;\n+    \/\/ Some types of VectorCast are not implemented for now.\n+    case Op_VectorCastI2X:\n+      if (bt == T_BYTE) {\n+        return false;\n+      }\n+      break;\n+    case Op_VectorCastS2X:\n+      if (vlen < 4 || bit_size < 64) {\n+        return false;\n+      }\n+      break;\n+    case Op_VectorCastF2X:\n+    case Op_VectorCastD2X:\n+      if (bt == T_INT || bt == T_SHORT || bt == T_BYTE || bt == T_LONG) {\n+        return false;\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,504 @@\n+\/*\n+ * Copyright (c) 2021, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import java.util.Random;\n+\n+import jdk.incubator.vector.ByteVector;\n+import jdk.incubator.vector.DoubleVector;\n+import jdk.incubator.vector.FloatVector;\n+import jdk.incubator.vector.IntVector;\n+import jdk.incubator.vector.LongVector;\n+import jdk.incubator.vector.ShortVector;\n+import jdk.incubator.vector.VectorSpecies;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test\n+ * @bug 8268966\n+ * @summary AArch64: 'bad AD file' in some vector conversion tests\n+ * @modules jdk.incubator.vector\n+ * @run testng\/othervm -XX:-TieredCompilation compiler.vectorapi.VectorCastShape128Test\n+ *\/\n+\n+\n+public class VectorCastShape128Test {\n+\n+    private static final VectorSpecies<Long> lspec = LongVector.SPECIES_128;\n+    private static final VectorSpecies<Integer> ispec = IntVector.SPECIES_128;\n+    private static final VectorSpecies<Short> sspec = ShortVector.SPECIES_128;\n+    private static final VectorSpecies<Byte> bspec = ByteVector.SPECIES_128;\n+    private static final VectorSpecies<Float> fspec = FloatVector.SPECIES_128;\n+    private static final VectorSpecies<Double> dspec = DoubleVector.SPECIES_128;\n+\n+    private static final int NUM_ITER = 50000;\n+    private static final int LENGTH = 512;\n+    private static int[] ia;\n+    private static int[] ib;\n+    private static byte[] ba;\n+    private static byte[] bb;\n+    private static short[] sa;\n+    private static short[] sb;\n+    private static long[] la;\n+    private static long[] lb;\n+    private static double[] da;\n+    private static double[] db;\n+    private static float[] fa;\n+    private static float[] fb;\n+\n+    private static void initialize() {\n+        ia = new int[LENGTH];\n+        ib = new int[LENGTH];\n+        la = new long[LENGTH];\n+        lb = new long[LENGTH];\n+        sa = new short[LENGTH];\n+        sb = new short[LENGTH];\n+        ba = new byte[LENGTH];\n+        bb = new byte[LENGTH];\n+        fa = new float[LENGTH];\n+        fb = new float[LENGTH];\n+        da = new double[LENGTH];\n+        db = new double[LENGTH];\n+        Random r = new Random();\n+        for (int i = 0; i < LENGTH; i++) {\n+            ia[i] = r.nextInt();\n+            la[i] = r.nextLong();\n+            sa[i] = (short) r.nextInt();\n+            ba[i] = (byte) r.nextInt();\n+            fa[i] = r.nextFloat();\n+            da[i] = r.nextDouble();\n+        }\n+    }\n+\n+\n+    private static void testDoubleToByte() {\n+        for (int i = 0; i < dspec.loopBound(LENGTH); i += dspec.length()) {\n+            DoubleVector va = DoubleVector.fromArray(dspec, da, i);\n+            ByteVector vb = (ByteVector) va.castShape(bspec, 0);\n+            vb.intoArray(bb, 0);\n+\n+            for (int j = 0; j < Math.min(dspec.length(), bspec.length()); j++) {\n+                Assert.assertEquals(bb[j], (byte) da[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testDoubleToShort() {\n+        for (int i = 0; i < dspec.loopBound(LENGTH); i += dspec.length()) {\n+            DoubleVector va = DoubleVector.fromArray(dspec, da, i);\n+            ShortVector vb = (ShortVector) va.castShape(sspec, 0);\n+            vb.intoArray(sb, 0);\n+\n+            for (int j = 0; j < Math.min(dspec.length(), sspec.length()); j++) {\n+                Assert.assertEquals(sb[j], (short) da[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testDoubleToInt() {\n+        for (int i = 0; i < dspec.loopBound(LENGTH); i += dspec.length()) {\n+            DoubleVector va = DoubleVector.fromArray(dspec, da, i);\n+            IntVector vb = (IntVector) va.castShape(ispec, 0);\n+            vb.intoArray(ib, 0);\n+\n+            for (int j = 0; j < Math.min(dspec.length(), ispec.length()); j++) {\n+                Assert.assertEquals(ib[j], (int) da[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testDoubleToLong() {\n+        for (int i = 0; i < dspec.loopBound(LENGTH); i += dspec.length()) {\n+            DoubleVector va = DoubleVector.fromArray(dspec, da, i);\n+            LongVector vb = (LongVector) va.castShape(lspec, 0);\n+            vb.intoArray(lb, 0);\n+\n+            for (int j = 0; j < Math.min(dspec.length(), lspec.length()); j++) {\n+                Assert.assertEquals(lb[j], (long) da[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testDoubleToFloat() {\n+        for (int i = 0; i < dspec.loopBound(LENGTH); i += dspec.length()) {\n+            DoubleVector va = DoubleVector.fromArray(dspec, da, i);\n+            FloatVector vb = (FloatVector) va.castShape(fspec, 0);\n+            vb.intoArray(fb, 0);\n+\n+            for (int j = 0; j < Math.min(dspec.length(), fspec.length()); j++) {\n+                Assert.assertEquals(fb[j], (float) da[j + i]);\n+            }\n+        }\n+    }\n+\n+\n+    private static void testFloatToByte() {\n+        for (int i = 0; i < fspec.loopBound(LENGTH); i += fspec.length()) {\n+            FloatVector va = FloatVector.fromArray(fspec, fa, i);\n+            ByteVector vb = (ByteVector) va.castShape(bspec, 0);\n+            vb.intoArray(bb, 0);\n+\n+            for (int j = 0; j < Math.min(fspec.length(), bspec.length()); j++) {\n+                Assert.assertEquals(bb[j], (byte) fa[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testFloatToShort() {\n+        for (int i = 0; i < fspec.loopBound(LENGTH); i += fspec.length()) {\n+            FloatVector va = FloatVector.fromArray(fspec, fa, i);\n+            ShortVector vb = (ShortVector) va.castShape(sspec, 0);\n+            vb.intoArray(sb, 0);\n+\n+            for (int j = 0; j < Math.min(fspec.length(), sspec.length()); j++) {\n+                Assert.assertEquals(sb[j], (short) fa[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testFloatToInt() {\n+        for (int i = 0; i < fspec.loopBound(LENGTH); i += fspec.length()) {\n+            FloatVector va = FloatVector.fromArray(fspec, fa, i);\n+            IntVector vb = (IntVector) va.castShape(ispec, 0);\n+            vb.intoArray(ib, 0);\n+\n+            for (int j = 0; j < Math.min(fspec.length(), ispec.length()); j++) {\n+                Assert.assertEquals(ib[j], (int) fa[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testFloatToLong() {\n+        for (int i = 0; i < fspec.loopBound(LENGTH); i += fspec.length()) {\n+            FloatVector va = FloatVector.fromArray(fspec, fa, i);\n+            LongVector vb = (LongVector) va.castShape(lspec, 0);\n+            vb.intoArray(lb, 0);\n+\n+            for (int j = 0; j < Math.min(fspec.length(), lspec.length()); j++) {\n+                Assert.assertEquals(lb[j], (long) fa[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testFloatToDouble() {\n+        for (int i = 0; i < fspec.loopBound(LENGTH); i += fspec.length()) {\n+            FloatVector va = FloatVector.fromArray(fspec, fa, i);\n+            DoubleVector vb = (DoubleVector) va.castShape(dspec, 0);\n+            vb.intoArray(db, 0);\n+\n+            for (int j = 0; j < Math.min(fspec.length(), dspec.length()); j++) {\n+                Assert.assertEquals(db[j], (double) fa[j + i]);\n+            }\n+        }\n+    }\n+\n+\n+    private static void testIntToByte() {\n+        for (int i = 0; i < ispec.loopBound(LENGTH); i += ispec.length()) {\n+            IntVector va = IntVector.fromArray(ispec, ia, i);\n+            ByteVector vb = (ByteVector) va.castShape(bspec, 0);\n+            vb.intoArray(bb, 0);\n+\n+            for (int j = 0; j < Math.min(ispec.length(), bspec.length()); j++) {\n+                Assert.assertEquals(bb[j], (byte) ia[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testIntToShort() {\n+        for (int i = 0; i < ispec.loopBound(LENGTH); i += ispec.length()) {\n+            IntVector va = IntVector.fromArray(ispec, ia, i);\n+            ShortVector vb = (ShortVector) va.castShape(sspec, 0);\n+            vb.intoArray(sb, 0);\n+\n+            for (int j = 0; j < Math.min(ispec.length(), sspec.length()); j++) {\n+                Assert.assertEquals(sb[j], (short) ia[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testIntToLong() {\n+        for (int i = 0; i < ispec.loopBound(LENGTH); i += ispec.length()) {\n+            IntVector va = IntVector.fromArray(ispec, ia, i);\n+            LongVector vb = (LongVector) va.castShape(lspec, 0);\n+            vb.intoArray(lb, 0);\n+\n+            for (int j = 0; j < Math.min(ispec.length(), lspec.length()); j++) {\n+                Assert.assertEquals(lb[j], (long) ia[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testIntToFloat() {\n+        for (int i = 0; i < ispec.loopBound(LENGTH); i += ispec.length()) {\n+            IntVector va = IntVector.fromArray(ispec, ia, i);\n+            FloatVector vb = (FloatVector) va.castShape(fspec, 0);\n+            vb.intoArray(fb, 0);\n+\n+            for (int j = 0; j < Math.min(ispec.length(), fspec.length()); j++) {\n+                Assert.assertEquals(fb[j], (float) ia[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testIntToDouble() {\n+        for (int i = 0; i < ispec.loopBound(LENGTH); i += ispec.length()) {\n+            IntVector va = IntVector.fromArray(ispec, ia, i);\n+            DoubleVector vb = (DoubleVector) va.castShape(dspec, 0);\n+            vb.intoArray(db, 0);\n+\n+            for (int j = 0; j < Math.min(ispec.length(), dspec.length()); j++) {\n+                Assert.assertEquals(db[j], (double) ia[j + i]);\n+            }\n+        }\n+    }\n+\n+\n+    private static void testLongToByte() {\n+        for (int i = 0; i < lspec.loopBound(LENGTH); i += lspec.length()) {\n+            LongVector va = LongVector.fromArray(lspec, la, i);\n+            ByteVector vb = (ByteVector) va.castShape(bspec, 0);\n+            vb.intoArray(bb, 0);\n+\n+            for (int j = 0; j < Math.min(lspec.length(), bspec.length()); j++) {\n+                Assert.assertEquals(bb[j], (byte) la[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testLongToShort() {\n+        for (int i = 0; i < lspec.loopBound(LENGTH); i += lspec.length()) {\n+            LongVector va = LongVector.fromArray(lspec, la, i);\n+            ShortVector vb = (ShortVector) va.castShape(sspec, 0);\n+            vb.intoArray(sb, 0);\n+\n+            for (int j = 0; j < Math.min(lspec.length(), sspec.length()); j++) {\n+                Assert.assertEquals(sb[j], (short) la[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testLongToInt() {\n+        for (int i = 0; i < lspec.loopBound(LENGTH); i += lspec.length()) {\n+            LongVector va = LongVector.fromArray(lspec, la, i);\n+            IntVector vb = (IntVector) va.castShape(ispec, 0);\n+            vb.intoArray(ib, 0);\n+\n+            for (int j = 0; j < Math.min(lspec.length(), ispec.length()); j++) {\n+                Assert.assertEquals(ib[j], (int) la[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testLongToFloat() {\n+        for (int i = 0; i < lspec.loopBound(LENGTH); i += lspec.length()) {\n+            LongVector va = LongVector.fromArray(lspec, la, i);\n+            FloatVector vb = (FloatVector) va.castShape(fspec, 0);\n+            vb.intoArray(fb, 0);\n+\n+            for (int j = 0; j < Math.min(lspec.length(), fspec.length()); j++) {\n+                Assert.assertEquals(fb[j], (float) la[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testLongToDouble() {\n+        for (int i = 0; i < lspec.loopBound(LENGTH); i += lspec.length()) {\n+            LongVector va = LongVector.fromArray(lspec, la, i);\n+            DoubleVector vb = (DoubleVector) va.castShape(dspec, 0);\n+            vb.intoArray(db, 0);\n+\n+            for (int j = 0; j < Math.min(lspec.length(), dspec.length()); j++) {\n+                Assert.assertEquals(db[j], (double) la[j + i]);\n+            }\n+        }\n+    }\n+\n+\n+    private static void testShortToByte() {\n+        for (int i = 0; i < sspec.loopBound(LENGTH); i += sspec.length()) {\n+            ShortVector va = ShortVector.fromArray(sspec, sa, i);\n+            ByteVector vb = (ByteVector) va.castShape(bspec, 0);\n+            vb.intoArray(bb, 0);\n+\n+            for (int j = 0; j < Math.min(sspec.length(), bspec.length()); j++) {\n+                Assert.assertEquals(bb[j], (byte) sa[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testShortToInt() {\n+        for (int i = 0; i < sspec.loopBound(LENGTH); i += sspec.length()) {\n+            ShortVector va = ShortVector.fromArray(sspec, sa, i);\n+            IntVector vb = (IntVector) va.castShape(ispec, 0);\n+            vb.intoArray(ib, 0);\n+\n+            for (int j = 0; j < Math.min(sspec.length(), ispec.length()); j++) {\n+                Assert.assertEquals(ib[j], (int) sa[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testShortToLong() {\n+        for (int i = 0; i < sspec.loopBound(LENGTH); i += sspec.length()) {\n+            ShortVector va = ShortVector.fromArray(sspec, sa, i);\n+            LongVector vb = (LongVector) va.castShape(lspec, 0);\n+            vb.intoArray(lb, 0);\n+\n+            for (int j = 0; j < Math.min(sspec.length(), lspec.length()); j++) {\n+                Assert.assertEquals(lb[j], (long) sa[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testShortToFloat() {\n+        for (int i = 0; i < sspec.loopBound(LENGTH); i += sspec.length()) {\n+            ShortVector va = ShortVector.fromArray(sspec, sa, i);\n+            FloatVector vb = (FloatVector) va.castShape(fspec, 0);\n+            vb.intoArray(fb, 0);\n+\n+            for (int j = 0; j < Math.min(sspec.length(), fspec.length()); j++) {\n+                Assert.assertEquals(fb[j], (float) sa[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testShortToDouble() {\n+        for (int i = 0; i < sspec.loopBound(LENGTH); i += sspec.length()) {\n+            ShortVector va = ShortVector.fromArray(sspec, sa, i);\n+            DoubleVector vb = (DoubleVector) va.castShape(dspec, 0);\n+            vb.intoArray(db, 0);\n+\n+            for (int j = 0; j < Math.min(sspec.length(), dspec.length()); j++) {\n+                Assert.assertEquals(db[j], (double) sa[j + i]);\n+            }\n+        }\n+    }\n+\n+\n+    private static void testByteToShort() {\n+        for (int i = 0; i < bspec.loopBound(LENGTH); i += bspec.length()) {\n+            ByteVector va = ByteVector.fromArray(bspec, ba, i);\n+            ShortVector vb = (ShortVector) va.castShape(sspec, 0);\n+            vb.intoArray(sb, 0);\n+\n+            for (int j = 0; j < Math.min(bspec.length(), sspec.length()); j++) {\n+                Assert.assertEquals(sb[j], (short) ba[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testByteToInt() {\n+        for (int i = 0; i < bspec.loopBound(LENGTH); i += bspec.length()) {\n+            ByteVector va = ByteVector.fromArray(bspec, ba, i);\n+            IntVector vb = (IntVector) va.castShape(ispec, 0);\n+            vb.intoArray(ib, 0);\n+\n+            for (int j = 0; j < Math.min(bspec.length(), ispec.length()); j++) {\n+                Assert.assertEquals(ib[j], (int) ba[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testByteToLong() {\n+        for (int i = 0; i < bspec.loopBound(LENGTH); i += bspec.length()) {\n+            ByteVector va = ByteVector.fromArray(bspec, ba, i);\n+            LongVector vb = (LongVector) va.castShape(lspec, 0);\n+            vb.intoArray(lb, 0);\n+\n+            for (int j = 0; j < Math.min(bspec.length(), lspec.length()); j++) {\n+                Assert.assertEquals(lb[j], (long) ba[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testByteToFloat() {\n+        for (int i = 0; i < bspec.loopBound(LENGTH); i += bspec.length()) {\n+            ByteVector va = ByteVector.fromArray(bspec, ba, i);\n+            FloatVector vb = (FloatVector) va.castShape(fspec, 0);\n+            vb.intoArray(fb, 0);\n+\n+            for (int j = 0; j < Math.min(bspec.length(), fspec.length()); j++) {\n+                Assert.assertEquals(fb[j], (float) ba[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testByteToDouble() {\n+        for (int i = 0; i < bspec.loopBound(LENGTH); i += bspec.length()) {\n+            ByteVector va = ByteVector.fromArray(bspec, ba, i);\n+            DoubleVector vb = (DoubleVector) va.castShape(dspec, 0);\n+            vb.intoArray(db, 0);\n+\n+            for (int j = 0; j < Math.min(bspec.length(), dspec.length()); j++) {\n+                Assert.assertEquals(db[j], (double) ba[j + i]);\n+            }\n+        }\n+    }\n+\n+\n+    @Test\n+    public void testCastShape128() {\n+        initialize();\n+        for (int i = 0; i < NUM_ITER; i++) {\n+            testDoubleToByte();\n+            testDoubleToShort();\n+            testDoubleToInt();\n+            testDoubleToLong();\n+            testDoubleToFloat();\n+\n+            testFloatToByte();\n+            testFloatToShort();\n+            testFloatToInt();\n+            testFloatToLong();\n+            testFloatToDouble();\n+\n+            testLongToByte();\n+            testLongToShort();\n+            testLongToInt();\n+            testLongToFloat();\n+            testLongToDouble();\n+\n+            testIntToByte();\n+            testIntToShort();\n+            testIntToLong();\n+            testIntToFloat();\n+            testIntToDouble();\n+\n+            testShortToByte();\n+            testShortToInt();\n+            testShortToLong();\n+            testShortToFloat();\n+            testShortToDouble();\n+\n+            testByteToShort();\n+            testByteToInt();\n+            testByteToLong();\n+            testByteToFloat();\n+            testByteToDouble();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorCastShape128Test.java","additions":504,"deletions":0,"binary":false,"changes":504,"status":"added"},{"patch":"@@ -0,0 +1,504 @@\n+\/*\n+ * Copyright (c) 2021, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import java.util.Random;\n+\n+import jdk.incubator.vector.ByteVector;\n+import jdk.incubator.vector.DoubleVector;\n+import jdk.incubator.vector.FloatVector;\n+import jdk.incubator.vector.IntVector;\n+import jdk.incubator.vector.LongVector;\n+import jdk.incubator.vector.ShortVector;\n+import jdk.incubator.vector.VectorSpecies;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test\n+ * @bug 8268966\n+ * @summary AArch64: 'bad AD file' in some vector conversion tests\n+ * @modules jdk.incubator.vector\n+ * @run testng\/othervm -XX:-TieredCompilation compiler.vectorapi.VectorCastShape64Test\n+ *\/\n+\n+\n+public class VectorCastShape64Test {\n+\n+    private static final VectorSpecies<Long> lspec = LongVector.SPECIES_64;\n+    private static final VectorSpecies<Integer> ispec = IntVector.SPECIES_64;\n+    private static final VectorSpecies<Short> sspec = ShortVector.SPECIES_64;\n+    private static final VectorSpecies<Byte> bspec = ByteVector.SPECIES_64;\n+    private static final VectorSpecies<Float> fspec = FloatVector.SPECIES_64;\n+    private static final VectorSpecies<Double> dspec = DoubleVector.SPECIES_64;\n+\n+    private static final int NUM_ITER = 50000;\n+    private static final int LENGTH = 512;\n+    private static int[] ia;\n+    private static int[] ib;\n+    private static byte[] ba;\n+    private static byte[] bb;\n+    private static short[] sa;\n+    private static short[] sb;\n+    private static long[] la;\n+    private static long[] lb;\n+    private static double[] da;\n+    private static double[] db;\n+    private static float[] fa;\n+    private static float[] fb;\n+\n+    private static void initialize() {\n+        ia = new int[LENGTH];\n+        ib = new int[LENGTH];\n+        la = new long[LENGTH];\n+        lb = new long[LENGTH];\n+        sa = new short[LENGTH];\n+        sb = new short[LENGTH];\n+        ba = new byte[LENGTH];\n+        bb = new byte[LENGTH];\n+        fa = new float[LENGTH];\n+        fb = new float[LENGTH];\n+        da = new double[LENGTH];\n+        db = new double[LENGTH];\n+        Random r = new Random();\n+        for (int i = 0; i < LENGTH; i++) {\n+            ia[i] = r.nextInt();\n+            la[i] = r.nextLong();\n+            sa[i] = (short) r.nextInt();\n+            ba[i] = (byte) r.nextInt();\n+            fa[i] = r.nextFloat();\n+            da[i] = r.nextDouble();\n+        }\n+    }\n+\n+\n+    private static void testDoubleToByte() {\n+        for (int i = 0; i < dspec.loopBound(LENGTH); i += dspec.length()) {\n+            DoubleVector va = DoubleVector.fromArray(dspec, da, i);\n+            ByteVector vb = (ByteVector) va.castShape(bspec, 0);\n+            vb.intoArray(bb, 0);\n+\n+            for (int j = 0; j < Math.min(dspec.length(), bspec.length()); j++) {\n+                Assert.assertEquals(bb[j], (byte) da[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testDoubleToShort() {\n+        for (int i = 0; i < dspec.loopBound(LENGTH); i += dspec.length()) {\n+            DoubleVector va = DoubleVector.fromArray(dspec, da, i);\n+            ShortVector vb = (ShortVector) va.castShape(sspec, 0);\n+            vb.intoArray(sb, 0);\n+\n+            for (int j = 0; j < Math.min(dspec.length(), sspec.length()); j++) {\n+                Assert.assertEquals(sb[j], (short) da[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testDoubleToInt() {\n+        for (int i = 0; i < dspec.loopBound(LENGTH); i += dspec.length()) {\n+            DoubleVector va = DoubleVector.fromArray(dspec, da, i);\n+            IntVector vb = (IntVector) va.castShape(ispec, 0);\n+            vb.intoArray(ib, 0);\n+\n+            for (int j = 0; j < Math.min(dspec.length(), ispec.length()); j++) {\n+                Assert.assertEquals(ib[j], (int) da[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testDoubleToLong() {\n+        for (int i = 0; i < dspec.loopBound(LENGTH); i += dspec.length()) {\n+            DoubleVector va = DoubleVector.fromArray(dspec, da, i);\n+            LongVector vb = (LongVector) va.castShape(lspec, 0);\n+            vb.intoArray(lb, 0);\n+\n+            for (int j = 0; j < Math.min(dspec.length(), lspec.length()); j++) {\n+                Assert.assertEquals(lb[j], (long) da[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testDoubleToFloat() {\n+        for (int i = 0; i < dspec.loopBound(LENGTH); i += dspec.length()) {\n+            DoubleVector va = DoubleVector.fromArray(dspec, da, i);\n+            FloatVector vb = (FloatVector) va.castShape(fspec, 0);\n+            vb.intoArray(fb, 0);\n+\n+            for (int j = 0; j < Math.min(dspec.length(), fspec.length()); j++) {\n+                Assert.assertEquals(fb[j], (float) da[j + i]);\n+            }\n+        }\n+    }\n+\n+\n+    private static void testFloatToByte() {\n+        for (int i = 0; i < fspec.loopBound(LENGTH); i += fspec.length()) {\n+            FloatVector va = FloatVector.fromArray(fspec, fa, i);\n+            ByteVector vb = (ByteVector) va.castShape(bspec, 0);\n+            vb.intoArray(bb, 0);\n+\n+            for (int j = 0; j < Math.min(fspec.length(), bspec.length()); j++) {\n+                Assert.assertEquals(bb[j], (byte) fa[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testFloatToShort() {\n+        for (int i = 0; i < fspec.loopBound(LENGTH); i += fspec.length()) {\n+            FloatVector va = FloatVector.fromArray(fspec, fa, i);\n+            ShortVector vb = (ShortVector) va.castShape(sspec, 0);\n+            vb.intoArray(sb, 0);\n+\n+            for (int j = 0; j < Math.min(fspec.length(), sspec.length()); j++) {\n+                Assert.assertEquals(sb[j], (short) fa[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testFloatToInt() {\n+        for (int i = 0; i < fspec.loopBound(LENGTH); i += fspec.length()) {\n+            FloatVector va = FloatVector.fromArray(fspec, fa, i);\n+            IntVector vb = (IntVector) va.castShape(ispec, 0);\n+            vb.intoArray(ib, 0);\n+\n+            for (int j = 0; j < Math.min(fspec.length(), ispec.length()); j++) {\n+                Assert.assertEquals(ib[j], (int) fa[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testFloatToLong() {\n+        for (int i = 0; i < fspec.loopBound(LENGTH); i += fspec.length()) {\n+            FloatVector va = FloatVector.fromArray(fspec, fa, i);\n+            LongVector vb = (LongVector) va.castShape(lspec, 0);\n+            vb.intoArray(lb, 0);\n+\n+            for (int j = 0; j < Math.min(fspec.length(), lspec.length()); j++) {\n+                Assert.assertEquals(lb[j], (long) fa[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testFloatToDouble() {\n+        for (int i = 0; i < fspec.loopBound(LENGTH); i += fspec.length()) {\n+            FloatVector va = FloatVector.fromArray(fspec, fa, i);\n+            DoubleVector vb = (DoubleVector) va.castShape(dspec, 0);\n+            vb.intoArray(db, 0);\n+\n+            for (int j = 0; j < Math.min(fspec.length(), dspec.length()); j++) {\n+                Assert.assertEquals(db[j], (double) fa[j + i]);\n+            }\n+        }\n+    }\n+\n+\n+    private static void testIntToByte() {\n+        for (int i = 0; i < ispec.loopBound(LENGTH); i += ispec.length()) {\n+            IntVector va = IntVector.fromArray(ispec, ia, i);\n+            ByteVector vb = (ByteVector) va.castShape(bspec, 0);\n+            vb.intoArray(bb, 0);\n+\n+            for (int j = 0; j < Math.min(ispec.length(), bspec.length()); j++) {\n+                Assert.assertEquals(bb[j], (byte) ia[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testIntToShort() {\n+        for (int i = 0; i < ispec.loopBound(LENGTH); i += ispec.length()) {\n+            IntVector va = IntVector.fromArray(ispec, ia, i);\n+            ShortVector vb = (ShortVector) va.castShape(sspec, 0);\n+            vb.intoArray(sb, 0);\n+\n+            for (int j = 0; j < Math.min(ispec.length(), sspec.length()); j++) {\n+                Assert.assertEquals(sb[j], (short) ia[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testIntToLong() {\n+        for (int i = 0; i < ispec.loopBound(LENGTH); i += ispec.length()) {\n+            IntVector va = IntVector.fromArray(ispec, ia, i);\n+            LongVector vb = (LongVector) va.castShape(lspec, 0);\n+            vb.intoArray(lb, 0);\n+\n+            for (int j = 0; j < Math.min(ispec.length(), lspec.length()); j++) {\n+                Assert.assertEquals(lb[j], (long) ia[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testIntToFloat() {\n+        for (int i = 0; i < ispec.loopBound(LENGTH); i += ispec.length()) {\n+            IntVector va = IntVector.fromArray(ispec, ia, i);\n+            FloatVector vb = (FloatVector) va.castShape(fspec, 0);\n+            vb.intoArray(fb, 0);\n+\n+            for (int j = 0; j < Math.min(ispec.length(), fspec.length()); j++) {\n+                Assert.assertEquals(fb[j], (float) ia[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testIntToDouble() {\n+        for (int i = 0; i < ispec.loopBound(LENGTH); i += ispec.length()) {\n+            IntVector va = IntVector.fromArray(ispec, ia, i);\n+            DoubleVector vb = (DoubleVector) va.castShape(dspec, 0);\n+            vb.intoArray(db, 0);\n+\n+            for (int j = 0; j < Math.min(ispec.length(), dspec.length()); j++) {\n+                Assert.assertEquals(db[j], (double) ia[j + i]);\n+            }\n+        }\n+    }\n+\n+\n+    private static void testLongToByte() {\n+        for (int i = 0; i < lspec.loopBound(LENGTH); i += lspec.length()) {\n+            LongVector va = LongVector.fromArray(lspec, la, i);\n+            ByteVector vb = (ByteVector) va.castShape(bspec, 0);\n+            vb.intoArray(bb, 0);\n+\n+            for (int j = 0; j < Math.min(lspec.length(), bspec.length()); j++) {\n+                Assert.assertEquals(bb[j], (byte) la[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testLongToShort() {\n+        for (int i = 0; i < lspec.loopBound(LENGTH); i += lspec.length()) {\n+            LongVector va = LongVector.fromArray(lspec, la, i);\n+            ShortVector vb = (ShortVector) va.castShape(sspec, 0);\n+            vb.intoArray(sb, 0);\n+\n+            for (int j = 0; j < Math.min(lspec.length(), sspec.length()); j++) {\n+                Assert.assertEquals(sb[j], (short) la[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testLongToInt() {\n+        for (int i = 0; i < lspec.loopBound(LENGTH); i += lspec.length()) {\n+            LongVector va = LongVector.fromArray(lspec, la, i);\n+            IntVector vb = (IntVector) va.castShape(ispec, 0);\n+            vb.intoArray(ib, 0);\n+\n+            for (int j = 0; j < Math.min(lspec.length(), ispec.length()); j++) {\n+                Assert.assertEquals(ib[j], (int) la[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testLongToFloat() {\n+        for (int i = 0; i < lspec.loopBound(LENGTH); i += lspec.length()) {\n+            LongVector va = LongVector.fromArray(lspec, la, i);\n+            FloatVector vb = (FloatVector) va.castShape(fspec, 0);\n+            vb.intoArray(fb, 0);\n+\n+            for (int j = 0; j < Math.min(lspec.length(), fspec.length()); j++) {\n+                Assert.assertEquals(fb[j], (float) la[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testLongToDouble() {\n+        for (int i = 0; i < lspec.loopBound(LENGTH); i += lspec.length()) {\n+            LongVector va = LongVector.fromArray(lspec, la, i);\n+            DoubleVector vb = (DoubleVector) va.castShape(dspec, 0);\n+            vb.intoArray(db, 0);\n+\n+            for (int j = 0; j < Math.min(lspec.length(), dspec.length()); j++) {\n+                Assert.assertEquals(db[j], (double) la[j + i]);\n+            }\n+        }\n+    }\n+\n+\n+    private static void testShortToByte() {\n+        for (int i = 0; i < sspec.loopBound(LENGTH); i += sspec.length()) {\n+            ShortVector va = ShortVector.fromArray(sspec, sa, i);\n+            ByteVector vb = (ByteVector) va.castShape(bspec, 0);\n+            vb.intoArray(bb, 0);\n+\n+            for (int j = 0; j < Math.min(sspec.length(), bspec.length()); j++) {\n+                Assert.assertEquals(bb[j], (byte) sa[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testShortToInt() {\n+        for (int i = 0; i < sspec.loopBound(LENGTH); i += sspec.length()) {\n+            ShortVector va = ShortVector.fromArray(sspec, sa, i);\n+            IntVector vb = (IntVector) va.castShape(ispec, 0);\n+            vb.intoArray(ib, 0);\n+\n+            for (int j = 0; j < Math.min(sspec.length(), ispec.length()); j++) {\n+                Assert.assertEquals(ib[j], (int) sa[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testShortToLong() {\n+        for (int i = 0; i < sspec.loopBound(LENGTH); i += sspec.length()) {\n+            ShortVector va = ShortVector.fromArray(sspec, sa, i);\n+            LongVector vb = (LongVector) va.castShape(lspec, 0);\n+            vb.intoArray(lb, 0);\n+\n+            for (int j = 0; j < Math.min(sspec.length(), lspec.length()); j++) {\n+                Assert.assertEquals(lb[j], (long) sa[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testShortToFloat() {\n+        for (int i = 0; i < sspec.loopBound(LENGTH); i += sspec.length()) {\n+            ShortVector va = ShortVector.fromArray(sspec, sa, i);\n+            FloatVector vb = (FloatVector) va.castShape(fspec, 0);\n+            vb.intoArray(fb, 0);\n+\n+            for (int j = 0; j < Math.min(sspec.length(), fspec.length()); j++) {\n+                Assert.assertEquals(fb[j], (float) sa[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testShortToDouble() {\n+        for (int i = 0; i < sspec.loopBound(LENGTH); i += sspec.length()) {\n+            ShortVector va = ShortVector.fromArray(sspec, sa, i);\n+            DoubleVector vb = (DoubleVector) va.castShape(dspec, 0);\n+            vb.intoArray(db, 0);\n+\n+            for (int j = 0; j < Math.min(sspec.length(), dspec.length()); j++) {\n+                Assert.assertEquals(db[j], (double) sa[j + i]);\n+            }\n+        }\n+    }\n+\n+\n+    private static void testByteToShort() {\n+        for (int i = 0; i < bspec.loopBound(LENGTH); i += bspec.length()) {\n+            ByteVector va = ByteVector.fromArray(bspec, ba, i);\n+            ShortVector vb = (ShortVector) va.castShape(sspec, 0);\n+            vb.intoArray(sb, 0);\n+\n+            for (int j = 0; j < Math.min(bspec.length(), sspec.length()); j++) {\n+                Assert.assertEquals(sb[j], (short) ba[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testByteToInt() {\n+        for (int i = 0; i < bspec.loopBound(LENGTH); i += bspec.length()) {\n+            ByteVector va = ByteVector.fromArray(bspec, ba, i);\n+            IntVector vb = (IntVector) va.castShape(ispec, 0);\n+            vb.intoArray(ib, 0);\n+\n+            for (int j = 0; j < Math.min(bspec.length(), ispec.length()); j++) {\n+                Assert.assertEquals(ib[j], (int) ba[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testByteToLong() {\n+        for (int i = 0; i < bspec.loopBound(LENGTH); i += bspec.length()) {\n+            ByteVector va = ByteVector.fromArray(bspec, ba, i);\n+            LongVector vb = (LongVector) va.castShape(lspec, 0);\n+            vb.intoArray(lb, 0);\n+\n+            for (int j = 0; j < Math.min(bspec.length(), lspec.length()); j++) {\n+                Assert.assertEquals(lb[j], (long) ba[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testByteToFloat() {\n+        for (int i = 0; i < bspec.loopBound(LENGTH); i += bspec.length()) {\n+            ByteVector va = ByteVector.fromArray(bspec, ba, i);\n+            FloatVector vb = (FloatVector) va.castShape(fspec, 0);\n+            vb.intoArray(fb, 0);\n+\n+            for (int j = 0; j < Math.min(bspec.length(), fspec.length()); j++) {\n+                Assert.assertEquals(fb[j], (float) ba[j + i]);\n+            }\n+        }\n+    }\n+\n+    private static void testByteToDouble() {\n+        for (int i = 0; i < bspec.loopBound(LENGTH); i += bspec.length()) {\n+            ByteVector va = ByteVector.fromArray(bspec, ba, i);\n+            DoubleVector vb = (DoubleVector) va.castShape(dspec, 0);\n+            vb.intoArray(db, 0);\n+\n+            for (int j = 0; j < Math.min(bspec.length(), dspec.length()); j++) {\n+                Assert.assertEquals(db[j], (double) ba[j + i]);\n+            }\n+        }\n+    }\n+\n+\n+    @Test\n+    public void testCastShape64() {\n+        initialize();\n+        for (int i = 0; i < NUM_ITER; i++) {\n+            testDoubleToByte();\n+            testDoubleToShort();\n+            testDoubleToInt();\n+            testDoubleToLong();\n+            testDoubleToFloat();\n+\n+            testFloatToByte();\n+            testFloatToShort();\n+            testFloatToInt();\n+            testFloatToLong();\n+            testFloatToDouble();\n+\n+            testLongToByte();\n+            testLongToShort();\n+            testLongToInt();\n+            testLongToFloat();\n+            testLongToDouble();\n+\n+            testIntToByte();\n+            testIntToShort();\n+            testIntToLong();\n+            testIntToFloat();\n+            testIntToDouble();\n+\n+            testShortToByte();\n+            testShortToInt();\n+            testShortToLong();\n+            testShortToFloat();\n+            testShortToDouble();\n+\n+            testByteToShort();\n+            testByteToInt();\n+            testByteToLong();\n+            testByteToFloat();\n+            testByteToDouble();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorCastShape64Test.java","additions":504,"deletions":0,"binary":false,"changes":504,"status":"added"}]}