{"files":[{"patch":"@@ -78,0 +78,1 @@\n+import com.sun.source.util.DocTreePath;\n@@ -1523,3 +1524,10 @@\n-                    messages.warning(ch.getDocTreePath(node),\n-                            \"doclet.tag.invalid_usage\", node);\n-                    result.add(new RawHtml(node.toString()));\n+                    DocTreePath dtp = ch.getDocTreePath(node);\n+                    if (dtp != null) {\n+                        String body = node.getBody();\n+                        if (body.matches(\"(?i)\\\\{@[a-z]+.*\")) {\n+                            messages.warning(dtp,\"doclet.tag.invalid_usage\", body);\n+                        } else {\n+                            messages.warning(dtp, \"doclet.tag.invalid_input\", body);\n+                        }\n+                    }\n+                    result.add(Text.of(node.toString()));\n@@ -1550,1 +1558,4 @@\n-                        messages.warning(ch.getDocTreePath(node), \"doclet.see.nested_link\", \"{@\" + node.getTagName() + \"}\");\n+                        DocTreePath dtp = ch.getDocTreePath(node);\n+                        if (dtp != null) {\n+                            messages.warning(dtp, \"doclet.see.nested_link\", \"{@\" + node.getTagName() + \"}\");\n+                        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -107,0 +107,1 @@\n+doclet.tag.invalid_input=invalid input: ''{0}''\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/standard.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8269722\n+ * @summary NPE in HtmlDocletWriter, reporting errors on inherited tags\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build toolbox.ToolBox javadoc.tester.*\n+ * @run main TestInherited\n+ *\/\n+\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestInherited extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        TestInherited tester = new TestInherited();\n+        tester.runTests(m -> new Object[] { Path.of(m.getName())});\n+    }\n+\n+    private final ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void testBadInheritedParam(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                public class BadParam {\n+                    public static class Base {\n+                        \/**\n+                         * @param i a < b\n+                         *\/\n+                        public void m(int i) { }\n+                    }\n+\n+                    public static class Sub extends Base {\n+                        public void m(int i) { }\n+                    }\n+                }\n+                \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-Xdoclint:-missing\", \"-XDdoe\",\n+                src.resolve(\"BadParam.java\").toString());\n+        checkExit(Exit.OK);\n+    }\n+\n+    @Test\n+    public void testBadInheritedReturn(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                public class BadReturn {\n+                    public static class Base {\n+                        \/**\n+                         * @return  a < b\n+                         *\/\n+                        public int m() { }\n+                    }\n+\n+                    public static class Sub extends Base {\n+                        public int m() { }\n+                    }\n+                }\n+                \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-Xdoclint:-missing\",\n+                src.resolve(\"BadReturn.java\").toString());\n+        checkExit(Exit.OK);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testInherited\/TestInherited.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -377,1 +377,1 @@\n-        checkOutput(Output.OUT, true, \"C.java:31: warning: invalid usage of tag <\");\n+        checkOutput(Output.OUT, true, \"C.java:31: warning: invalid input: '<'\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testJavaFX\/TestJavaFX.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                    <div class=\"block\">case1: A hanging &lt;  : xx<<\/div>\"\"\");\n+                    <div class=\"block\">case1: A hanging &lt;  : xx&lt;<\/div>\"\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testNonInlineHtmlTagRemoval\/TestNonInlineHtmlTagRemoval.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}