{"files":[{"patch":"@@ -4067,2 +4067,2 @@\n-        boolean checkRawTypes;\n-        if (tree.pattern.getTag() == BINDINGPATTERN) {\n+        if (tree.pattern.getTag() == BINDINGPATTERN ||\n+           tree.pattern.getTag() == PARENTHESIZEDPATTERN) {\n@@ -4075,6 +4075,1 @@\n-            JCBindingPattern pattern = (JCBindingPattern) tree.pattern;\n-            typeTree = pattern.var.vartype;\n-            if (!clazztype.hasTag(TYPEVAR)) {\n-                clazztype = chk.checkClassOrArrayType(pattern.var.vartype.pos(), clazztype);\n-            }\n-            checkRawTypes = true;\n+            typeTree = TreeInfo.primaryPatternTree((JCPattern) tree.pattern).var.vartype;\n@@ -4084,1 +4079,1 @@\n-            checkRawTypes = false;\n+            chk.validate(typeTree, env, false);\n@@ -4102,1 +4097,0 @@\n-        chk.validate(typeTree, env, checkRawTypes);\n@@ -4136,0 +4130,1 @@\n+        chk.validate(tree.var.vartype, env, true);\n@@ -4143,0 +4138,1 @@\n+        result = tree.type = tree.pattern.type;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -767,0 +767,1 @@\n+        JCPattern pattern;\n@@ -772,1 +773,1 @@\n-            return toP(F.at(startPos).ParenthesizedPattern(p));\n+            pattern = toP(F.at(startPos).ParenthesizedPattern(p));\n@@ -774,1 +775,0 @@\n-            JCPattern pattern;\n@@ -779,7 +779,0 @@\n-            if (!inInstanceOf && token.kind == AMPAMP) {\n-                checkSourceLevel(Feature.PATTERN_SWITCH);\n-                nextToken();\n-                JCExpression guard = term(EXPR | NOLAMBDA);\n-                pattern = F.at(pos).GuardPattern(pattern, guard);\n-            }\n-            return pattern;\n@@ -787,0 +780,7 @@\n+        if (!inInstanceOf && token.kind == AMPAMP) {\n+            checkSourceLevel(Feature.PATTERN_SWITCH);\n+            nextToken();\n+            JCExpression guard = term(EXPR | NOLAMBDA);\n+            pattern = F.at(pos).GuardPattern(pattern, guard);\n+        }\n+        return pattern;\n@@ -1697,1 +1697,0 @@\n-    @SuppressWarnings(\"fallthrough\")\n@@ -1699,0 +1698,5 @@\n+        return analyzeParens(0);\n+    }\n+\n+    @SuppressWarnings(\"fallthrough\")\n+    ParensResult analyzeParens(int startLookahead) {\n@@ -1702,1 +1706,1 @@\n-        outer: for (int lookahead = 0; ; lookahead++) {\n+        outer: for (int lookahead = startLookahead; ; lookahead++) {\n@@ -1728,1 +1732,1 @@\n-                    if (lookahead != 0) {\n+                    if (lookahead != startLookahead) {\n@@ -3068,2 +3072,1 @@\n-                Token ahead;\n-                while ((ahead = S.token(lookahead)).kind != EOF && ahead.kind != RPAREN && ahead.kind != AMPAMP) {\n+                while (S.token(lookahead + 1).kind == LPAREN) {\n@@ -3072,4 +3075,1 @@\n-                Token twoBack;\n-                boolean pattern = S.token(lookahead - 1).kind == IDENTIFIER &&\n-                                  ((twoBack = S.token(lookahead - 2)).kind == IDENTIFIER ||\n-                                   twoBack.kind == GT || twoBack.kind == GTGT || twoBack.kind == GTGTGT);\n+                boolean pattern = analyzeParens(lookahead) == ParensResult.EXPLICIT_LAMBDA;\n@@ -3077,0 +3077,1 @@\n+                    checkSourceLevel(token.pos, Feature.PATTERN_SWITCH);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -1370,0 +1370,9 @@\n+    public static JCBindingPattern primaryPatternTree(JCPattern pat) {\n+        return switch (pat.getTag()) {\n+            case BINDINGPATTERN -> (JCBindingPattern) pat;\n+            case GUARDPATTERN -> primaryPatternTree(((JCGuardPattern) pat).patt);\n+            case PARENTHESIZEDPATTERN -> primaryPatternTree(((JCParenthesizedPattern) pat).pattern);\n+            default -> throw new AssertionError();\n+        };\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -45,0 +45,14 @@\n+        test.disambiguationTest(\"(a > b)\",\n+                                 ExpressionType.EXPRESSION);\n+        test.disambiguationTest(\"(a >> b)\",\n+                                 ExpressionType.EXPRESSION);\n+        test.disambiguationTest(\"(a >>> b)\",\n+                                 ExpressionType.EXPRESSION);\n+        test.disambiguationTest(\"(a < b | a > b)\",\n+                                 ExpressionType.EXPRESSION);\n+        test.disambiguationTest(\"(a << b | a >> b)\",\n+                                 ExpressionType.EXPRESSION);\n+        test.disambiguationTest(\"(a << b || a < b | a >>> b)\",\n+                                 ExpressionType.EXPRESSION);\n+        test.disambiguationTest(\"(a < c.d > b)\",\n+                                 ExpressionType.PATTERN);\n","filename":"test\/langtools\/tools\/javac\/patterns\/DisambiguateParenthesizedPattern.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -49,0 +49,3 @@\n+        runIfTrue(this::typeGuardAfterParenthesizedTrueSwitchStatement);\n+        runIfTrue(this::typeGuardAfterParenthesizedTrueSwitchExpression);\n+        runIfTrue(this::typeGuardAfterParenthesizedTrueIfStatement);\n@@ -125,0 +128,26 @@\n+    String typeGuardAfterParenthesizedTrueSwitchStatement(Object o) {\n+        switch (o) {\n+            case (Integer i) && i == 0: o = String.valueOf(i); return \"true\";\n+            case ((Integer i) && i == 2): o = String.valueOf(i); return \"second\";\n+            case Object x: return \"any\";\n+        }\n+    }\n+\n+    String typeGuardAfterParenthesizedTrueSwitchExpression(Object o) {\n+        return switch (o) {\n+            case (Integer i) && i == 0: o = String.valueOf(i); yield \"true\";\n+            case ((Integer i) && i == 2): o = String.valueOf(i); yield \"second\";\n+            case Object x: yield \"any\";\n+        };\n+    }\n+\n+    String typeGuardAfterParenthesizedTrueIfStatement(Object o) {\n+        if (o != null && o instanceof ((Integer i) && i == 0)) {\n+            return \"true\";\n+        } else if (o != null && o instanceof (((Integer i) && i == 2)) && (o = i) != null) {\n+            return \"second\";\n+        } else {\n+            return \"any\";\n+        }\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/Guards.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/ref=RawTypeBindingWarning.out -Xlint:rawtypes -XDrawDiagnostics RawTypeBindingWarning.java\n+ * @compile\/ref=RawTypeBindingWarning.out -Xlint:rawtypes -XDrawDiagnostics --enable-preview -source ${jdk.version} RawTypeBindingWarning.java\n@@ -11,0 +11,14 @@\n+    public static void t2(Object o) {\n+        switch (o) {\n+            case RawTypeBindingWarning w -> {}\n+            default -> {}\n+        }\n+        switch (o) {\n+            case (RawTypeBindingWarning w) -> {}\n+            default -> {}\n+        }\n+        switch (o) {\n+            case (RawTypeBindingWarning w && false) -> {}\n+            default -> {}\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/patterns\/RawTypeBindingWarning.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,6 @@\n-1 warning\n+RawTypeBindingWarning.java:13:18: compiler.warn.raw.class.use: RawTypeBindingWarning, RawTypeBindingWarning<T>\n+RawTypeBindingWarning.java:17:19: compiler.warn.raw.class.use: RawTypeBindingWarning, RawTypeBindingWarning<T>\n+RawTypeBindingWarning.java:21:19: compiler.warn.raw.class.use: RawTypeBindingWarning, RawTypeBindingWarning<T>\n+- compiler.note.preview.filename: RawTypeBindingWarning.java, DEFAULT\n+- compiler.note.preview.recompile\n+4 warnings\n","filename":"test\/langtools\/tools\/javac\/patterns\/RawTypeBindingWarning.out","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,157 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8268896\n+ * @summary Verify source level checks are performed properly\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main SourceLevelChecks\n+*\/\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import toolbox.TestRunner;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.ToolBox;\n+\n+public class SourceLevelChecks extends TestRunner {\n+\n+    private static final String JAVA_VERSION = System.getProperty(\"java.specification.version\");\n+\n+    ToolBox tb;\n+\n+    public static void main(String... args) throws Exception {\n+        new SourceLevelChecks().runTests();\n+    }\n+\n+    SourceLevelChecks() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    @Test\n+    public void testPattern(Path base) throws Exception {\n+        doTest(base,\n+               \"\"\"\n+               package test;\n+               public class Test {\n+                   private void test(Integer i) {\n+                       switch (i) {\n+                           case Integer d:\n+                       }\n+                   }\n+               }\n+               \"\"\",\n+               \"Test.java:5:26: compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.pattern.switch)\",\n+               \"1 error\");\n+    }\n+\n+    @Test\n+    public void testParenthesizedPatternIf(Path base) throws Exception {\n+        doTest(base,\n+               \"\"\"\n+               package test;\n+               public class Test {\n+                   private void test(Object o) {\n+                       if (o instanceof (Integer d)) {\n+                       }\n+                   }\n+               }\n+               \"\"\",\n+               \"Test.java:4:26: compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.pattern.switch)\",\n+               \"1 error\");\n+    }\n+\n+    @Test\n+    public void testParenthesizedPatternSwitch(Path base) throws Exception {\n+        doTest(base,\n+               \"\"\"\n+               package test;\n+               public class Test {\n+                   private void test(Integer i) {\n+                       switch (i) {\n+                           case (Integer d):\n+                       }\n+                   }\n+               }\n+               \"\"\",\n+               \"Test.java:5:18: compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.pattern.switch)\",\n+               \"1 error\");\n+    }\n+\n+    @Test\n+    public void testCaseDefault(Path base) throws Exception {\n+        doTest(base,\n+               \"\"\"\n+               package test;\n+               public class Test {\n+                   private void test(Integer i) {\n+                       switch (i) {\n+                           case default:\n+                       }\n+                   }\n+               }\n+               \"\"\",\n+               \"Test.java:5:18: compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.pattern.switch)\",\n+               \"1 error\");\n+    }\n+\n+    private void doTest(Path base, String testCode, String... expectedErrors) throws IOException {\n+        Path current = base.resolve(\".\");\n+        Path src = current.resolve(\"src\");\n+        Path classes = current.resolve(\"classes\");\n+        tb.writeJavaFiles(src, testCode);\n+\n+        Files.createDirectories(classes);\n+\n+        var log =\n+                new JavacTask(tb)\n+                    .options(\"-source\", \"11\",\n+                             \"-Xlint:-options\",\n+                             \"-XDrawDiagnostics\")\n+                    .outdir(classes)\n+                    .files(tb.findJavaFiles(src))\n+                    .run(Task.Expect.FAIL)\n+                    .writeAll()\n+                    .getOutputLines(Task.OutputKind.DIRECT);\n+        if (!List.of(expectedErrors).equals(log)) {\n+            throw new AssertionError(\"Incorrect errors, expected: \" + List.of(expectedErrors) +\n+                                      \", actual: \" + log);\n+        }\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/SourceLevelChecks.java","additions":157,"deletions":0,"binary":false,"changes":157,"status":"added"}]}