{"files":[{"patch":"@@ -636,1 +636,2 @@\n-     * @param bound the upper bound (exclusive) for the returned value. Must be positive.\n+     * @param bound the upper bound (exclusive) for the returned value.\n+     * Must be positive.\n@@ -644,3 +645,3 @@\n-     * positive int. Then invokes {@code nextInt()}, limiting the result to\n-     * be greater equal zero and less than {@code bound}. If {@code bound} is a\n-     * power of two then limiting is a simple masking operation. Otherwise,\n+     * positive {@code int}. Then invokes {@code nextInt()}, limiting the result\n+     * to be greater than or equal zero and less than {@code bound}. If {@code bound}\n+     * is a power of two then limiting is a simple masking operation. Otherwise,\n@@ -648,1 +649,1 @@\n-     * result is greater equal zero and less than {@code bound}.\n+     * result is greater than or equal zero and less than {@code bound}.\n@@ -670,6 +671,6 @@\n-     * {@code bound} are positive ints. Then invokes {@code nextInt()}, limiting\n-     * the result to be greater equal {@code origin} and less than {@code bound}.\n-     * If {@code bound} is a power of two then limiting is a simple masking\n-     * operation. Otherwise, the result is re-calculated  by invoking\n-     * {@code nextInt()} until the result is greater equal {@code origin}\n-     * and less than {@code bound}.\n+     * {@code bound} are positive {@code ints}. Then invokes {@code nextInt()},\n+     * limiting the result to be greater that or equal {@code origin} and less\n+     * than {@code bound}. If {@code bound} is a power of two then limiting is a\n+     * simple masking operation. Otherwise, the result is re-calculated  by\n+     * invoking {@code nextInt()} until the result is greater than or equal\n+     * {@code origin} and less than {@code bound}.\n@@ -694,1 +695,2 @@\n-     * @param bound the upper bound (exclusive) for the returned value.  Must be positive.\n+     * @param bound the upper bound (exclusive) for the returned value.\n+     * Must be positive.\n@@ -702,5 +704,6 @@\n-     * positive long. Then invokes {@code nextLong()}, limiting the result to\n-     * be greater equal zero and less than {@code bound}. If {@code bound} is a\n-     * power of two then limiting is a simple masking operation. Otherwise,\n-     * the result is re-calculated by invoking {@code nextLong()} until the\n-     * result is greater equal zero and less than {@code bound}.\n+     * positive  {@code long}. Then invokes {@code nextLong()}, limiting the\n+     * result to be greater than or equal zero and less than {@code bound}. If\n+     * {@code bound} is a power of two then limiting is a simple masking\n+     * operation. Otherwise, the result is re-calculated by invoking\n+     * {@code nextLong()} until the result is greater than or equal zero and\n+     * less than {@code bound}.\n@@ -728,3 +731,3 @@\n-     * {@code bound} are positive longs. Then invokes {@code nextLong()},\n-     * limiting the result to be greater equal {@code origin} and less than\n-     * {@code bound}. If {@code bound} is a power of two then limiting is a\n+     * {@code bound} are positive {@code longs}. Then invokes {@code nextLong()},\n+     * limiting the result to be greater than or equal {@code origin} and less\n+     * than {@code bound}. If {@code bound} is a power of two then limiting is a\n@@ -732,1 +735,1 @@\n-     * invoking {@code nextLong()} until the result is greater equal\n+     * invoking {@code nextLong()} until the result is greater than or equal\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/RandomGenerator.java","additions":24,"deletions":21,"binary":false,"changes":45,"status":"modified"}]}