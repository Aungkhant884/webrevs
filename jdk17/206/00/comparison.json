{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -191,30 +191,5 @@\n-    \/\/ The first implementation searched three locations for this vtbl\n-    \/\/ value; scanning through the entire object was considered, but\n-    \/\/ we thought we knew where we were looking, and looking only in\n-    \/\/ these specific locations should reduce the probability of\n-    \/\/ mistaking random bits as a pointer (although, realistically\n-    \/\/ speaking, the likelihood of finding a match between the bit\n-    \/\/ pattern of, for example, a double and the vtbl is vanishingly\n-    \/\/ small.)\n-    \/\/    1. The first word of the object (should handle MSVC++ as\n-    \/\/    well as the solstudio compilers with compatibility set to\n-    \/\/    v5.0 or greater)\n-    \/\/    2. and 3. The last two Address-aligned words of the part of\n-    \/\/    the object defined by its topmost polymorphic superclass.\n-    \/\/    This should handle the solstudio compilers, v4.2 or\n-    \/\/    earlier, as well as any other compilers which place the vptr\n-    \/\/    at the end of the user-defined fields of the first base\n-    \/\/    class with virtual functions.\n-    \/\/\n-    \/\/ Unfortunately this algorithm did not work properly for the\n-    \/\/ specific case of the ThreadShadow\/Thread inheritance situation,\n-    \/\/ because the Solaris compiler seems to cleverly eliminate the\n-    \/\/ vtbl for ThreadShadow since the only virtual is empty. (We\n-    \/\/ should get rid of the ThreadShadow and fix the include\n-    \/\/ databases, but need to postpone this for the present.) The\n-    \/\/ current solution performs the three-location check for this\n-    \/\/ class and all of its known superclasses rather than just the\n-    \/\/ topmost polymorphic one.\n-\n-    Type curType = type;\n-\n+    \/\/ See if the vtable at the first address of the object matches the vtable of the\n+    \/\/ specified type. Note this code used to be much more complex in order to support\n+    \/\/ Solaris. It included looking at the last 2 words of the object and also trying\n+    \/\/ to match on all supertypes of the specified type. This turned out to be buggy,\n+    \/\/ and was removed since Solaris is no longer supported. See JDK-8269830.\n@@ -222,24 +197,5 @@\n-      while (curType != null) {\n-        \/\/ Using the size information we have for this type, check the\n-        \/\/ three locations described above.\n-\n-        \/\/ (1)\n-        if (vtblAddr.equals(addr.getAddressAt(0))) {\n-          return true;\n-        }\n-\n-        \/\/ (2)\n-        long offset = curType.getSize();\n-        \/\/ I don't think this should be misaligned under any\n-        \/\/ circumstances, but I'm not sure (FIXME: also not sure which\n-        \/\/ way to go here, up or down -- assuming down)\n-        offset -= (offset % getAddressSize());\n-        if (offset <= 0) {\n-          return false;\n-        }\n-        if (vtblAddr.equals(addr.getAddressAt(offset))) {\n-          return true;\n-        }\n-        offset -= getAddressSize();\n-        if (offset <= 0) {\n-          return false;\n+      if (vtblAddr.equals(addr.getAddressAt(0))) {\n+        return true;\n+      } else {\n+        if (DEBUG) {\n+          System.err.println(\"BasicTypeDataBase.addressTypeIsEqualToType: all vptr tests failed for type \" +  type.getName());\n@@ -247,5 +203,1 @@\n-        if (vtblAddr.equals(addr.getAddressAt(offset))) {\n-          return true;\n-        }\n-\n-        curType = curType.getSuperclass();\n+        return false;\n@@ -253,2 +205,1 @@\n-    }\n-    catch (Exception e) {\n+    } catch (Exception e) {\n@@ -264,7 +215,0 @@\n-\n-    if (DEBUG) {\n-      System.err.println(\"BasicTypeDataBase.addressTypeIsEqualToType: all vptr tests failed for type \" +\n-                         type.getName());\n-    }\n-\n-    return false;\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/types\/basic\/BasicTypeDataBase.java","additions":13,"deletions":69,"binary":false,"changes":82,"status":"modified"}]}