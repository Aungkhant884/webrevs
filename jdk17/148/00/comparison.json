{"files":[{"patch":"@@ -62,1 +62,2 @@\n-     * The interface must be public.  No additional access checks are performed.\n+     * The interface must be public and not {@linkplain Class#isSealed() sealed}.\n+     * No additional access checks are performed.\n@@ -159,0 +160,2 @@\n+        if (intfc.isSealed())\n+            throw newIllegalArgumentException(\"a sealed interface\", intfc.getName());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleProxies.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -713,0 +713,4 @@\n+                if (intf.isSealed()) {\n+                    throw new IllegalArgumentException(intf.getName() + \" is a sealed interface\");\n+                }\n+\n@@ -933,1 +937,2 @@\n-     * must represent {@linkplain Class#isHidden() non-hidden} interfaces,\n+     * must represent {@linkplain Class#isHidden() non-hidden} and\n+     * {@linkplain Class#isSealed() non-sealed} interfaces,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 8206955\n+ * @bug 8206955 8269351\n@@ -102,0 +102,20 @@\n+\n+    public sealed interface Intf permits NonSealedInterface {\n+        String m();\n+    }\n+\n+    public non-sealed interface NonSealedInterface extends Intf {\n+    }\n+\n+    @Test(expectedExceptions = { IllegalArgumentException.class })\n+    public void testSealedInterface() {\n+        MethodHandle target = MethodHandles.constant(String.class, \"Sealed\");\n+        MethodHandleProxies.asInterfaceInstance(Intf.class, target);\n+    }\n+\n+    @Test\n+    public void testNonSealedInterface() {\n+        MethodHandle target = MethodHandles.constant(String.class, \"Non-Sealed\");\n+        NonSealedInterface proxy = MethodHandleProxies.asInterfaceInstance(NonSealedInterface.class, target);\n+        assertEquals(proxy.m(), \"Non-Sealed\");\n+    }\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandlesProxiesTest.java","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8269351\n+ * @run testng SealedInterfaceTest\n+ *\/\n+\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+public class SealedInterfaceTest {\n+    sealed interface Intf permits NonSealedInterface {\n+        void m1();\n+    }\n+\n+    non-sealed interface NonSealedInterface extends Intf {\n+        void m2();\n+    }\n+\n+    @Test(expectedExceptions = { IllegalArgumentException.class })\n+    public void testSealedInterface() {\n+        Proxy.newProxyInstance(SealedInterfaceTest.class.getClassLoader(),\n+                new Class<?>[]{ Intf.class },\n+                new InvocationHandler() {\n+                    @Override\n+                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+                        return null;\n+                    }\n+                });\n+    }\n+\n+    @Test\n+    public void testNonSealedInterface() {\n+        Proxy.newProxyInstance(SealedInterfaceTest.class.getClassLoader(),\n+                new Class<?>[]{ NonSealedInterface.class },\n+                new InvocationHandler() {\n+                    @Override\n+                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+                        return null;\n+                    }\n+                });\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/SealedInterfaceTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}