{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,3 @@\n-void OSXSemaphore::signal(uint count) {\n+bool OSXSemaphore::signal(uint count, bool ignore_overflow) {\n+  \/\/ Semaphore of Darwin-XNU just wraps around its value and returns KERN_SUCCESS.\n+  \/\/ https:\/\/github.com\/apple\/darwin-xnu\/blob\/main\/osfmk\/kern\/sync_sema.c#L400\n@@ -59,0 +61,1 @@\n+  return true;\n","filename":"src\/hotspot\/os\/bsd\/semaphore_bsd.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  void signal(uint count = 1);\n+  bool signal(uint count = 1, bool ignore_overflow = false);\n","filename":"src\/hotspot\/os\/bsd\/semaphore_bsd.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,3 @@\n-void PosixSemaphore::signal(uint count) {\n+bool PosixSemaphore::signal(uint count, bool ignore_overflow) {\n+  bool succeed = true;\n+\n@@ -57,1 +59,7 @@\n-    assert_with_errno(ret == 0, \"sem_post failed\");\n+    if (ignore_overflow && ret != 0) {\n+      assert_with_errno(errno == EOVERFLOW || errno == ERANGE,\n+                        \"semaphore overflow detected\");\n+      ret = false;\n+    } else {\n+      assert_with_errno(ret == 0, \"sem_post failed\");\n+    }\n@@ -59,0 +67,1 @@\n+  return succeed;\n","filename":"src\/hotspot\/os\/posix\/semaphore_posix.cpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-  void signal(uint count = 1);\n+  bool signal(uint count = 1, bool ignore_overflow = false);\n","filename":"src\/hotspot\/os\/posix\/semaphore_posix.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,3 @@\n-void WindowsSemaphore::signal(uint count) {\n+bool WindowsSemaphore::signal(uint count, bool ignore_overflow) {\n+  bool succeed = true;\n+\n@@ -45,0 +47,1 @@\n+    DWORD err = GetLastError();\n@@ -46,1 +49,6 @@\n-    assert(ret != 0, \"ReleaseSemaphore failed with error code: %lu\", GetLastError());\n+    if (ignore_overflow && ret == 0) {\n+      assert(err == ERROR_TOO_MANY_POSTS, \"ReleaseSemaphore failed due to overflow\");\n+      succeed = false;\n+    } else {\n+      assert(ret != 0, \"ReleaseSemaphore failed with error code: %lu\", err);\n+    }\n@@ -48,0 +56,1 @@\n+  return succeed;\n","filename":"src\/hotspot\/os\/windows\/semaphore_windows.cpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-  void signal(uint count = 1);\n+  bool signal(uint count = 1, bool ignore_overflow = false);\n","filename":"src\/hotspot\/os\/windows\/semaphore_windows.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  _sem.signal();\n+  _sem.signal(1, true);\n@@ -201,1 +201,1 @@\n-      _instance->_sem.signal();\n+      _instance->_sem.signal(1, true);\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -141,1 +141,2 @@\n-  \/\/ It decreases in AsyncLogWriter::run()\n+  \/\/ It decreases in AsyncLogWriter::run().\n+  \/\/ It will ignore the error of overflow\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -53,1 +53,3 @@\n-  void signal(uint count = 1) { _impl.signal(count); }\n+  bool signal(uint count = 1, bool ignore_overflow = false) {\n+    return _impl.signal(count, ignore_overflow);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/semaphore.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}