{"files":[{"patch":"@@ -53,1 +53,3 @@\n-void OSXSemaphore::signal(uint count, bool ignore_overflow) {\n+bool OSXSemaphore::signal(uint count, bool ignore_overflow) {\n+  \/\/ Semaphore of Darwin-XNU just wraps around its value and returns KERN_SUCCESS.\n+  \/\/ https:\/\/github.com\/apple\/darwin-xnu\/blob\/main\/osfmk\/kern\/sync_sema.c#L400\n@@ -59,0 +61,1 @@\n+  return true;\n","filename":"src\/hotspot\/os\/bsd\/semaphore_bsd.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  void signal(uint count = 1, bool ignore_overflow = false);\n+  bool signal(uint count = 1, bool ignore_overflow = false);\n","filename":"src\/hotspot\/os\/bsd\/semaphore_bsd.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,3 @@\n-void PosixSemaphore::signal(uint count, bool ignore_overflow) {\n+bool PosixSemaphore::signal(uint count, bool ignore_overflow) {\n+  bool succeed = true;\n+\n@@ -57,2 +59,7 @@\n-    assert_with_errno(ret == 0 || (ignore_overflow && (errno == EOVERFLOW || errno == ERANGE)),\n-                     \"sem_post failed\");\n+    if (ignore_overflow && ret != 0) {\n+      assert_with_errno(errno == EOVERFLOW || errno == ERANGE,\n+                        \"semaphore overflow detected\");\n+      ret = false;\n+    } else {\n+      assert_with_errno(ret == 0, \"sem_post failed\");\n+    }\n@@ -60,0 +67,1 @@\n+  return succeed;\n","filename":"src\/hotspot\/os\/posix\/semaphore_posix.cpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  void signal(uint count = 1, bool ignore_overflow = false);\n+  bool signal(uint count = 1, bool ignore_overflow = false);\n","filename":"src\/hotspot\/os\/posix\/semaphore_posix.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,3 @@\n-void WindowsSemaphore::signal(uint count, bool ignore_overflow) {\n+bool WindowsSemaphore::signal(uint count, bool ignore_overflow) {\n+  bool succeed = true;\n+\n@@ -46,2 +48,7 @@\n-    assert(ret != 0 || (ignore_overflow && ERROR_TOO_MANY_POSTS == err),\n-          \"ReleaseSemaphore failed with error code: %lu\", err);\n+\n+    if (ignore_overflow && ret == 0) {\n+      assert(err == ERROR_TOO_MANY_POSTS, \"ReleaseSemaphore failed due to overflow\");\n+      succeed = false;\n+    } else {\n+      assert(ret != 0, \"ReleaseSemaphore failed with error code: %lu\", err);\n+    }\n@@ -49,0 +56,1 @@\n+  return succeed;\n","filename":"src\/hotspot\/os\/windows\/semaphore_windows.cpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  void signal(uint count = 1, bool ignore_overflow = false);\n+  bool signal(uint count = 1, bool ignore_overflow = false);\n","filename":"src\/hotspot\/os\/windows\/semaphore_windows.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  _sem.signal_overflow();\n+  _sem.signal(1, true);\n@@ -201,1 +201,1 @@\n-      _instance->_sem.signal_overflow();\n+      _instance->_sem.signal(1, true);\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,5 +53,2 @@\n-  void signal(uint count = 1) { _impl.signal(count, false \/* ignore_overflow *\/); }\n-\n-  \/\/ Ignore error of overflow\n-  void signal_overflow(uint count = 1) {\n-    _impl.signal(count, true \/* ignore_overflow *\/);\n+  bool signal(uint count = 1, bool ignore_overflow = false) {\n+    return _impl.signal(count, ignore_overflow);\n","filename":"src\/hotspot\/share\/runtime\/semaphore.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"}]}