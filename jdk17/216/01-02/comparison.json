{"files":[{"patch":"@@ -53,1 +53,1 @@\n-void OSXSemaphore::signal(uint count) {\n+void OSXSemaphore::signal(uint count, bool ignore_overflow) {\n","filename":"src\/hotspot\/os\/bsd\/semaphore_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  void signal(uint count = 1);\n+  void signal(uint count = 1, bool ignore_overflow = false);\n","filename":"src\/hotspot\/os\/bsd\/semaphore_bsd.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-void PosixSemaphore::signal(uint count) {\n+void PosixSemaphore::signal(uint count, bool ignore_overflow) {\n@@ -57,1 +57,2 @@\n-    assert_with_errno(ret == 0, \"sem_post failed\");\n+    assert_with_errno(ret == 0 || (ignore_overflow && (errno == EOVERFLOW || errno == ERANGE)),\n+                     \"sem_post failed\");\n","filename":"src\/hotspot\/os\/posix\/semaphore_posix.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  void signal(uint count = 1);\n+  void signal(uint count = 1, bool ignore_overflow = false);\n","filename":"src\/hotspot\/os\/posix\/semaphore_posix.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-void WindowsSemaphore::signal(uint count) {\n+void WindowsSemaphore::signal(uint count, bool ignore_overflow) {\n","filename":"src\/hotspot\/os\/windows\/semaphore_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  void signal(uint count = 1);\n+  void signal(uint count = 1, bool ignore_overflow = false);\n","filename":"src\/hotspot\/os\/windows\/semaphore_windows.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-int AsyncLogWriter::write() {\n+void AsyncLogWriter::write() {\n@@ -120,1 +120,0 @@\n-  int dequeued  = 0;\n@@ -126,1 +125,0 @@\n-    dequeued = static_cast<int>(logs.size());\n@@ -153,1 +151,0 @@\n-  return dequeued;\n@@ -161,7 +158,1 @@\n-\n-    int n = write();\n-    \/\/ correct the value of _sem.\n-    \/\/ pre-decrement as we already performed the first wait\n-    while (--n > 0) {\n-      _sem.wait();\n-    }\n+    write();\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -110,0 +110,17 @@\n+\/\/ The only difference between this and Semaphore is that\n+\/\/ it ignores errno ERANGE and EOVERFLOW.\n+class AsyncLogSemaphore : public CHeapObj<mtSynchronizer> {\n+  SemaphoreImpl _impl;\n+\n+  NONCOPYABLE(AsyncLogSemaphore);\n+\n+ public:\n+  AsyncLogSemaphore(uint value = 0) : _impl(value) {}\n+\n+  void signal(uint count = 1) {\n+    _impl.signal(count, true\/* ignore_overflow*\/);\n+  }\n+\n+  void wait() { _impl.wait(); }\n+};\n+\n@@ -141,2 +158,3 @@\n-  \/\/ It decreases in AsyncLogWriter::run()\n-  Semaphore _sem;\n+  \/\/ It decreases in AsyncLogWriter::run().\n+  \/\/ It will ignore the error checking inside of _sem.signal() for overflowing.\n+  AsyncLogSemaphore _sem;\n@@ -155,1 +173,1 @@\n-  int write();\n+  void write();\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"}]}