{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/bsd\/semaphore_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/posix\/semaphore_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/posix\/semaphore_posix.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,3 @@\n-\n-    assert(ret != 0, \"ReleaseSemaphore failed with error code: %lu\", GetLastError());\n+    DWORD err = GetLastError();\n+    assert(ret != 0 || (ignore_overflow && ERROR_TOO_MANY_POSTS == err),\n+          \"ReleaseSemaphore failed with error code: %lu\", err);\n","filename":"src\/hotspot\/os\/windows\/semaphore_windows.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os\/windows\/semaphore_windows.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  _sem.signal();\n+  _sem.signal_overflow();\n@@ -201,1 +201,1 @@\n-      _instance->_sem.signal();\n+      _instance->_sem.signal_overflow();\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -110,17 +110,0 @@\n-\/\/ The only difference between this and Semaphore is that\n-\/\/ it ignores errno ERANGE and EOVERFLOW.\n-class AsyncLogSemaphore : public CHeapObj<mtSynchronizer> {\n-  SemaphoreImpl _impl;\n-\n-  NONCOPYABLE(AsyncLogSemaphore);\n-\n- public:\n-  AsyncLogSemaphore(uint value = 0) : _impl(value) {}\n-\n-  void signal(uint count = 1) {\n-    _impl.signal(count, true\/* ignore_overflow*\/);\n-  }\n-\n-  void wait() { _impl.wait(); }\n-};\n-\n@@ -159,2 +142,2 @@\n-  \/\/ It will ignore the error checking inside of _sem.signal() for overflowing.\n-  AsyncLogSemaphore _sem;\n+  \/\/ It will ignore the error of overflow\n+  Semaphore _sem;\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -53,1 +53,6 @@\n-  void signal(uint count = 1) { _impl.signal(count); }\n+  void signal(uint count = 1) { _impl.signal(count, false \/* ignore_overflow *\/); }\n+\n+  \/\/ Ignore error of overflow\n+  void signal_overflow(uint count = 1) {\n+    _impl.signal(count, true \/* ignore_overflow *\/);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/semaphore.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}