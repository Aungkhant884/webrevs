{"files":[{"patch":"@@ -2803,0 +2803,6 @@\n+\n+  if (C->check_node_count(worklist.size() + NodeLimitFudgeFactor,\n+                          \"Too many clones required in clone_for_use_outside_loop in partial peeling\")) {\n+    return -1;\n+  }\n+\n@@ -3355,0 +3361,1 @@\n+  bool too_many_clones = false;\n@@ -3371,1 +3378,6 @@\n-            cloned_for_outside_use += clone_for_use_outside_loop(loop, n, worklist);\n+            int new_clones = clone_for_use_outside_loop(loop, n, worklist);\n+            if (new_clones == -1) {\n+              too_many_clones = true;\n+              break;\n+            }\n+            cloned_for_outside_use += new_clones;\n@@ -3399,1 +3411,1 @@\n-  if (exceed_node_budget || exceed_phi_limit) {\n+  if (too_many_clones || exceed_node_budget || exceed_phi_limit) {\n@@ -3401,1 +3413,1 @@\n-    if (TracePartialPeeling) {\n+    if (TracePartialPeeling && exceed_phi_limit) {\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8256934\n+ * @summary Sinking of nodes in partial peeling creates too many clones resulting in a live node limit exceeded assertion failure.\n+ * @requires vm.compiler2.enabled\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileCommand=compileonly,compiler.loopopts.TestPartialPeelingSinkNodes::test\n+ *                   compiler.loopopts.TestPartialPeelingSinkNodes\n+ *\/\n+\n+package compiler.loopopts;\n+\n+public class TestPartialPeelingSinkNodes {\n+    static int i5 = 168, iFld = 2, x, y;\n+    static boolean b = false, b2 = false;\n+\n+    public static void main(String[] strArr) {\n+        test();\n+    }\n+\n+    \/\/ The algorithm in partial peeling creates ~90000 nodes for this method which triggers the assertion failure.\n+    public static void test() {\n+        for (int i = 0; i < 2480; i++) {\n+            int i2 = -37052, i3 = 39651, i4 = -37052;\n+            int i5 = 168, i6 = -133, i7 = 1, i8 = -10;\n+            double d = -20.82293;\n+\n+            float fArr[] = new float[400];\n+            for (int j = 0; j < 400; j++) {\n+                fArr[j] = (j % 2 == 0) ? 0.300F + j : 0.300F - j;\n+            }\n+\n+            while (--i5 > 0) {\n+                i6 = 1;\n+                do {\n+                    i4 += (((i6 * i2) + i3) - i3);\n+                    i2 += i4;\n+                } while (++i6 < 9);\n+                i3 -= i4;\n+                for (i7 = 1; i7 < 18; i7++) {\n+                    i4 = i5;\n+                    d -= i4;\n+                    i2 -= i8;\n+                    i2 = i8;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestPartialPeelingSinkNodes.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}