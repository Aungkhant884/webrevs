{"files":[{"patch":"@@ -48,0 +48,1 @@\n+import static java.lang.System.Logger.Level.ERROR;\n@@ -311,1 +312,2 @@\n-     * Example, to create a filter that will allow any class loaded from the platform classloader.\n+     * Example, to create a filter that will allow any class loaded from the platform\n+     * or bootstrap classloaders.\n@@ -313,2 +315,3 @@\n-     *     ObjectInputFilter f = allowFilter(cl -> cl.getClassLoader() == ClassLoader.getPlatformClassLoader()\n-     *                                          || cl.getClassLoader() == null, Status.UNDECIDED);\n+     *     ObjectInputFilter f\n+     *         = allowFilter(cl -> cl.getClassLoader() == ClassLoader.getPlatformClassLoader() ||\n+     *                       cl.getClassLoader() == null, Status.UNDECIDED);\n@@ -576,5 +579,0 @@\n-        \/**\n-         * The property name to enable tracing of filters.\n-         *\/\n-        private static final String SERIAL_FILTER_TRACE_PROPNAME = \"jdk.serialFilterTrace\";\n-\n@@ -602,1 +600,1 @@\n-         * Debug: Logger\n+         * Debug and Trace Logger\n@@ -606,5 +604,0 @@\n-        \/**\n-         * True when tracing of filters is enabled.\n-         *\/\n-        private static final boolean traceFilters;\n-\n@@ -615,0 +608,1 @@\n+             * <li>The logger is created.\n@@ -619,2 +613,0 @@\n-             * <li>The property jdk.serialFilterTrace, is read, and if true enables tracing of filters.\n-             * <li>If either property is defined or tracing is enabled, the logger is created.\n@@ -624,0 +616,3 @@\n+            \/\/ Initialize the logger.\n+            configLog = System.getLogger(\"java.io.serialization\");\n+\n@@ -639,6 +634,0 @@\n-            traceFilters = GetBooleanAction.privilegedGetProperty(SERIAL_FILTER_TRACE_PROPNAME);\n-\n-            \/\/ Initialize the logger if either filter factory or filter property is set\n-            configLog = (filterString != null || factoryClassName != null || traceFilters)\n-                    ? System.getLogger(\"java.io.serialization\") : null;\n-\n@@ -653,1 +642,1 @@\n-                    configLog.log(System.Logger.Level.ERROR,\n+                    configLog.log(ERROR,\n@@ -664,2 +653,0 @@\n-                configLog.log(DEBUG,\n-                        \"Creating deserialization filter factory for {0}\", factoryClassName);\n@@ -679,1 +666,1 @@\n-                        configLog.log(System.Logger.Level.ERROR,\n+                        configLog.log(ERROR,\n@@ -685,0 +672,2 @@\n+                    configLog.log(DEBUG,\n+                            \"Creating deserialization filter factory for {0}\", factoryClassName);\n@@ -689,1 +678,1 @@\n-                    configLog.log(System.Logger.Level.ERROR,\n+                    configLog.log(ERROR,\n@@ -710,3 +699,1 @@\n-            if (traceFilters && configLog != null) {\n-                configLog.log(TRACE, msg, args);\n-            }\n+            configLog.log(TRACE, msg, args);\n@@ -837,2 +824,1 @@\n-            if (configLog != null)\n-                configLog.log(DEBUG,\n+            configLog.log(DEBUG,\n@@ -1157,1 +1143,1 @@\n-                            traceFilter(\"Pattern array class: {0}, filter: {1}\", clazz, this);\n+                            traceFilter(\"Pattern filter array class: {0}, filter: {1}\", clazz, this);\n@@ -1168,1 +1154,1 @@\n-                        traceFilter(\"Pattern UNDECIDED, primitive class: {0}, filter: {1}\", clazz, this);\n+                        traceFilter(\"Pattern filter UNDECIDED, primitive class: {0}, filter: {1}\", clazz, this);\n@@ -1178,1 +1164,1 @@\n-                        traceFilter(\"Pattern {0}, class: {1}, filter: {2}\", s, cl, this);\n+                        traceFilter(\"Pattern filter {0}, class: {1}, filter: {2}\", s, cl, this);\n@@ -1277,1 +1263,1 @@\n-                    traceFilter(\"MergeFilter REJECT first: {0}, filter: {1}\",\n+                    traceFilter(\"MergeFilter REJECTED first: {0}, filter: {1}\",\n@@ -1283,1 +1269,1 @@\n-                    traceFilter(\"MergeFilter REJECT {0}, {1}, filter: {2}\",\n+                    traceFilter(\"MergeFilter REJECTED {0}, {1}, filter: {2}\",\n@@ -1288,1 +1274,1 @@\n-                    traceFilter(\"MergeFilter ALLOW either: {0}, {1}, filter: {2}\",\n+                    traceFilter(\"MergeFilter ALLOWED either: {0}, {1}, filter: {2}\",\n@@ -1326,1 +1312,0 @@\n-                status = REJECTED;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputFilter.java","additions":24,"deletions":39,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -984,1 +984,1 @@\n-# Deserialization system-wide filter factory\n+# Deserialization JVM-wide filter factory\n@@ -986,3 +986,1 @@\n-# A filter factory class name is used to configure the system-wide filter factory.\n-# The filter factory value \"OVERRIDE\" in combination with setting \"jdk.serialFilter\"\n-# indicates that the builtin filter factory can be overridden by the application.\n+# A filter factory class name is used to configure the JVM-wide filter factory.\n@@ -990,2 +988,2 @@\n-# java.util.stream.BinaryOperator<ObjectInputFilter> interface, provide its implementation and\n-# be accessible via the application class loader.\n+# java.util.function.BinaryOperator<java.io.ObjectInputFilter> interface, provide its\n+# implementation and be accessible via the application class loader.\n@@ -1001,1 +999,1 @@\n-# Deserialization system-wide filter\n+# Deserialization JVM-wide filter\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-    public void testGlobalFilter() throws Exception {\n+    public void testGlobalFilter() {\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/FilterWithSecurityManagerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n- * @run testng\/othervm -Djdk.serialFilterTrace=true SerialFactoryExample\n- * @run testng\/othervm -Djdk.serialFilterFactory=SerialFactoryExample$FilterInThread -Djdk.serialFilterTrace=true SerialFactoryExample\n+ * @run testng\/othervm SerialFactoryExample\n+ * @run testng\/othervm -Djdk.serialFilterFactory=SerialFactoryExample$FilterInThread SerialFactoryExample\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFactoryExample.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @run testng\/othervm -Djdk.serialFilterTrace=true SerialFilterFunctionTest\n+ * @run testng\/othervm SerialFilterFunctionTest\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFilterFunctionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,2 +56,2 @@\n- * @run testng\/othervm -Djdk.serialFilterTrace=true SerialFilterTest\n- * @run testng\/othervm -Djdk.serialSetFilterAfterRead=true -Djdk.serialFilterTrace=true SerialFilterTest\n+ * @run testng\/othervm SerialFilterTest\n+ * @run testng\/othervm -Djdk.serialSetFilterAfterRead=true SerialFilterTest\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFilterTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}