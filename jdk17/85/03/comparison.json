{"files":[{"patch":"@@ -48,0 +48,1 @@\n+import static java.lang.System.Logger.Level.ERROR;\n@@ -311,1 +312,2 @@\n-     * Example, to create a filter that will allow any class loaded from the platform classloader.\n+     * Example, to create a filter that will allow any class loaded from the platform\n+     * or bootstrap classloaders.\n@@ -313,2 +315,3 @@\n-     *     ObjectInputFilter f = allowFilter(cl -> cl.getClassLoader() == ClassLoader.getPlatformClassLoader()\n-     *                                          || cl.getClassLoader() == null, Status.UNDECIDED);\n+     *     ObjectInputFilter f\n+     *         = allowFilter(cl -> cl.getClassLoader() == ClassLoader.getPlatformClassLoader() ||\n+     *                       cl.getClassLoader() == null, Status.UNDECIDED);\n@@ -530,3 +533,0 @@\n-     * <p> If only `jdk.serialFilter` is set and not `jdk.serialFilterFactory` the builtin\n-     * filter factory, compatible with previous versions, is set and can not be replaced,\n-     * see below to override the builtin filter factory.\n@@ -537,1 +537,1 @@\n-     * filter factory or the special value `OVERRIDE`.\n+     * filter factory.\n@@ -540,3 +540,0 @@\n-     *\n-     * If the value is `OVERRIDE`, the filter factory can be set by the application before\n-     * the first deserialization using {@link Config#setSerialFilterFactory(BinaryOperator)};\n@@ -546,1 +543,1 @@\n-     * <p>If not `OVERRIDE`, the class must be public, must have a public zero-argument constructor, implement the\n+     * <p>The class must be public, must have a public zero-argument constructor, implement the\n@@ -582,5 +579,0 @@\n-        \/**\n-         * The property name to enable tracing of filters.\n-         *\/\n-        private static final String SERIAL_FILTER_TRACE_PROPNAME = \"jdk.serialFilterTrace\";\n-\n@@ -608,1 +600,1 @@\n-         * Debug: Logger\n+         * Debug and Trace Logger\n@@ -612,5 +604,0 @@\n-        \/**\n-         * True when tracing of filters is enabled.\n-         *\/\n-        private static final boolean traceFilters;\n-\n@@ -621,0 +608,1 @@\n+             * <li>The logger is created.\n@@ -625,2 +613,0 @@\n-             * <li>The property jdk.serialFilterTrace, is read, and if set enables tracing of filters.\n-             * <li>If either property is defined or tracing is enabled, the logger is created.\n@@ -630,0 +616,3 @@\n+            \/\/ Initialize the logger.\n+            configLog = System.getLogger(\"java.io.serialization\");\n+\n@@ -645,6 +634,0 @@\n-            traceFilters = GetBooleanAction.privilegedGetProperty(SERIAL_FILTER_TRACE_PROPNAME);\n-\n-            \/\/ Initialize the logger if either filter factory or filter property is set\n-            configLog = (filterString != null || factoryClassName != null || traceFilters)\n-                    ? System.getLogger(\"java.io.serialization\") : null;\n-\n@@ -659,1 +642,1 @@\n-                    configLog.log(System.Logger.Level.ERROR,\n+                    configLog.log(ERROR,\n@@ -667,1 +650,1 @@\n-            if (factoryClassName == null || \"OVERRIDE\".equals(factoryClassName)) {\n+            if (factoryClassName == null) {\n@@ -669,6 +652,0 @@\n-                if (serialFilter != null && factoryClassName == null) {\n-                    \/\/ Ensure backward compatibility, unless factory is explicitly allowed to override\n-                    \/\/ Do not allow factory to be overridden by Config.setSerialFilterFactory\n-                    filterFactoryNoReplace.set(true);\n-                }\n-\n@@ -676,2 +653,0 @@\n-                configLog.log(DEBUG,\n-                        \"Creating deserialization filter factory for {0}\", factoryClassName);\n@@ -680,3 +655,5 @@\n-                    \/\/ The static initialization of the class or constructor may create a race\n-                    \/\/ if either calls Config.setSerialFilterFactory; the command line configured\n-                    \/\/ Class should not be overridden.\n+                    \/\/ Cause Config.setSerialFilterFactory to throw {@link IllegalStateException}\n+                    \/\/ if Config.setSerialFilterFactory is called as a side effect of the\n+                    \/\/ static initialization of the class or constructor.\n+                    filterFactoryNoReplace.set(true);\n+\n@@ -686,1 +663,1 @@\n-                    BinaryOperator<ObjectInputFilter> f =\n+                    BinaryOperator<ObjectInputFilter> factory =\n@@ -689,10 +666,3 @@\n-                    if (serialFilterFactory != null) {\n-                        \/\/ Init cycle if Config.setSerialFilterFactory called from class initialization\n-                        configLog.log(System.Logger.Level.ERROR,\n-                                \"FilterFactory provided on the command line can not be overridden\");\n-                        \/\/ Do not continue if configuration not initialized\n-                        throw new ExceptionInInitializerError(\n-                                \"FilterFactory provided on the command line can not be overridden\");\n-                    }\n-                    serialFilterFactory = f;\n-                    filterFactoryNoReplace.set(true);\n+                    configLog.log(DEBUG,\n+                            \"Creating deserialization filter factory for {0}\", factoryClassName);\n+                    serialFilterFactory = factory;\n@@ -701,2 +671,3 @@\n-                    configLog.log(System.Logger.Level.ERROR,\n-                            \"Error configuring filter factory\", ex);\n+                    Throwable th = (ex instanceof InvocationTargetException ite) ? ite.getCause() : ex;\n+                    configLog.log(ERROR,\n+                            \"Error configuring filter factory\", th);\n@@ -704,2 +675,1 @@\n-                    throw new ExceptionInInitializerError(\n-                            \"FilterFactory configuration: jdk.serialFilterFactory: \" + ex.getMessage());\n+                    throw new ExceptionInInitializerError(th);\n@@ -722,3 +692,1 @@\n-            if (traceFilters && configLog != null) {\n-                configLog.log(TRACE, msg, args);\n-            }\n+            configLog.log(TRACE, msg, args);\n@@ -843,2 +811,0 @@\n-            if (serialFilterFactory == null)\n-                throw new IllegalStateException(\"Serial filter factory initialization incomplete\");\n@@ -846,2 +812,4 @@\n-                throw new IllegalStateException(\"Cannot replace filter factory: \" +\n-                        serialFilterFactory.getClass().getName());\n+                final String msg = serialFilterFactory != null\n+                        ? serialFilterFactory.getClass().getName()\n+                        : \"initialization incomplete\";\n+                throw new IllegalStateException(\"Cannot replace filter factory: \" + msg);\n@@ -849,0 +817,2 @@\n+            configLog.log(DEBUG,\n+                    \"Setting deserialization filter factory to {0}\", filterFactory.getClass().getName());\n@@ -1166,1 +1136,1 @@\n-                            traceFilter(\"Pattern array class: {0}, filter: {1}\", clazz, this);\n+                            traceFilter(\"Pattern filter array class: {0}, filter: {1}\", clazz, this);\n@@ -1177,1 +1147,1 @@\n-                        traceFilter(\"Pattern UNDECIDED, primitive class: {0}, filter: {1}\", clazz, this);\n+                        traceFilter(\"Pattern filter UNDECIDED, primitive class: {0}, filter: {1}\", clazz, this);\n@@ -1187,1 +1157,1 @@\n-                        traceFilter(\"Pattern {0}, class: {1}, filter: {2}\", s, cl, this);\n+                        traceFilter(\"Pattern filter {0}, class: {1}, filter: {2}\", s, cl, this);\n@@ -1286,1 +1256,1 @@\n-                    traceFilter(\"MergeFilter REJECT first: {0}, filter: {1}\",\n+                    traceFilter(\"MergeFilter REJECTED first: {0}, filter: {1}\",\n@@ -1292,1 +1262,1 @@\n-                    traceFilter(\"MergeFilter REJECT {0}, {1}, filter: {2}\",\n+                    traceFilter(\"MergeFilter REJECTED {0}, {1}, filter: {2}\",\n@@ -1297,1 +1267,1 @@\n-                    traceFilter(\"MergeFilter ALLOW either: {0}, {1}, filter: {2}\",\n+                    traceFilter(\"MergeFilter ALLOWED either: {0}, {1}, filter: {2}\",\n@@ -1335,1 +1305,0 @@\n-                status = REJECTED;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputFilter.java","additions":41,"deletions":72,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -984,1 +984,1 @@\n-# Deserialization system-wide filter factory\n+# Deserialization JVM-wide filter factory\n@@ -986,3 +986,1 @@\n-# A filter factory class name is used to configure the system-wide filter factory.\n-# The filter factory value \"OVERRIDE\" in combination with setting \"jdk.serialFilter\"\n-# indicates that the builtin filter factory can be overridden by the application.\n+# A filter factory class name is used to configure the JVM-wide filter factory.\n@@ -990,2 +988,2 @@\n-# java.util.stream.BinaryOperator<ObjectInputFilter> interface, provide its implementation and\n-# be accessible via the application class loader.\n+# java.util.function.BinaryOperator<java.io.ObjectInputFilter> interface, provide its\n+# implementation and be accessible via the application class loader.\n@@ -1001,1 +999,1 @@\n-# Deserialization system-wide filter\n+# Deserialization JVM-wide filter\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,1 @@\n+    @SuppressWarnings(\"removal\")\n@@ -68,1 +69,2 @@\n-    public void testGlobalFilter() throws Exception {\n+    @SuppressWarnings(\"removal\")\n+    public void testGlobalFilter() {\n@@ -91,0 +93,1 @@\n+    @SuppressWarnings(\"removal\")\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/FilterWithSecurityManagerTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -145,0 +145,1 @@\n+    @SuppressWarnings(\"removal\")\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/GlobalFilterTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n- * @run testng\/othervm -Djdk.serialFilterTrace=true SerialFactoryExample\n- * @run testng\/othervm -Djdk.serialFilterFactory=SerialFactoryExample$FilterInThread -Djdk.serialFilterTrace=true SerialFactoryExample\n+ * @run testng\/othervm SerialFactoryExample\n+ * @run testng\/othervm -Djdk.serialFilterFactory=SerialFactoryExample$FilterInThread SerialFactoryExample\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFactoryExample.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.io.ObjectInputFilter;\n+import java.io.ObjectInputFilter.Config;\n+import java.util.function.BinaryOperator;\n+\n+\/* @test\n+ * @run testng\/othervm  -Djdk.serialFilterFactory=ForcedError_NoSuchClass SerialFactoryFaults\n+ * @run testng\/othervm  -Djdk.serialFilterFactory=SerialFactoryFaults$NoPublicConstructor SerialFactoryFaults\n+ * @run testng\/othervm  -Djdk.serialFilterFactory=SerialFactoryFaults$ConstructorThrows SerialFactoryFaults\n+ * @run testng\/othervm  -Djdk.serialFilterFactory=SerialFactoryFaults$FactorySetsFactory SerialFactoryFaults\n+ * @summary Check cases where the Filter Factory initialization from properties fails\n+ *\/\n+\n+@Test\n+public class SerialFactoryFaults {\n+\n+    public void initFaultTest() {\n+        String factoryName = System.getProperty(\"jdk.serialFilterFactory\");\n+        ExceptionInInitializerError ex = Assert.expectThrows(ExceptionInInitializerError.class,\n+                () -> Config.getSerialFilterFactory());\n+        Throwable cause = ex.getCause();\n+\n+        if (factoryName.equals(\"ForcedError_NoSuchClass\")) {\n+            Assert.assertEquals(cause.getClass(),\n+                    ClassNotFoundException.class, \"wrong exception\");\n+        } else if (factoryName.equals(\"SerialFactoryFaults$NoPublicConstructor\")) {\n+            Assert.assertEquals(cause.getClass(),\n+                    NoSuchMethodException.class, \"wrong exception\");\n+        } else if (factoryName.equals(\"SerialFactoryFaults$ConstructorThrows\")) {\n+            Assert.assertEquals(cause.getClass(),\n+                    IllegalStateException.class, \"wrong exception\");\n+        } else if (factoryName.equals(\"SerialFactoryFaults$FactorySetsFactory\")) {\n+            Assert.assertEquals(cause.getClass(),\n+                    IllegalStateException.class, \"wrong exception\");\n+            Assert.assertEquals(cause.getMessage(),\n+                    \"Cannot replace filter factory: initialization incomplete\",\n+                    \"wrong message\");\n+        } else {\n+            Assert.fail(\"No test for filter factory: \" + factoryName);\n+        }\n+    }\n+\n+    \/**\n+     * Test factory that does not have the required public no-arg constructor.\n+     *\/\n+    public static final class NoPublicConstructor\n+            implements BinaryOperator<ObjectInputFilter> {\n+        private NoPublicConstructor() {\n+        }\n+\n+        public ObjectInputFilter apply(ObjectInputFilter curr, ObjectInputFilter next) {\n+            throw new RuntimeException(\"NYI\");\n+        }\n+    }\n+\n+    \/**\n+     * Test factory that has a constructor that throws a runtime exception.\n+     *\/\n+    public static final class ConstructorThrows\n+            implements BinaryOperator<ObjectInputFilter> {\n+        public ConstructorThrows() {\n+            throw new IllegalStateException(\"SerialFactoryFaults$ConstructorThrows\");\n+        }\n+\n+        public ObjectInputFilter apply(ObjectInputFilter curr, ObjectInputFilter next) {\n+            throw new RuntimeException(\"NYI\");\n+        }\n+    }\n+\n+    \/**\n+     * Test factory that has a constructor tries to set the filter factory.\n+     *\/\n+    public static final class FactorySetsFactory\n+            implements BinaryOperator<ObjectInputFilter> {\n+        public FactorySetsFactory() {\n+            Config.setSerialFilterFactory(this);\n+        }\n+\n+        public ObjectInputFilter apply(ObjectInputFilter curr, ObjectInputFilter next) {\n+            throw new RuntimeException(\"NYI\");\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFactoryFaults.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -47,1 +47,0 @@\n- * @run testng\/othervm -Djdk.serialFilter=\"*\" -Djdk.serialFilterFactory=OVERRIDE SerialFilterFactoryTest\n@@ -53,1 +52,0 @@\n- * @run testng\/othervm\/fail  -Djdk.serialFilterFactory=ForcedError_NoSuchClass SerialFilterFactoryTest\n@@ -124,0 +122,1 @@\n+    @SuppressWarnings(\"removal\")\n@@ -166,0 +165,1 @@\n+    @SuppressWarnings(\"removal\")\n@@ -201,0 +201,1 @@\n+    @SuppressWarnings(\"removal\")\n@@ -256,1 +257,1 @@\n-        if (jdkSerialFilterFactoryProp != null && !jdkSerialFilterFactoryProp.equals(\"OVERRIDE\")) {\n+        if (jdkSerialFilterFactoryProp != null) {\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFilterFactoryTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @run testng\/othervm -Djdk.serialFilterTrace=true SerialFilterFunctionTest\n+ * @run testng\/othervm SerialFilterFunctionTest\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFilterFunctionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,2 +56,2 @@\n- * @run testng\/othervm -Djdk.serialFilterTrace=true SerialFilterTest\n- * @run testng\/othervm -Djdk.serialSetFilterAfterRead=true -Djdk.serialFilterTrace=true SerialFilterTest\n+ * @run testng\/othervm SerialFilterTest\n+ * @run testng\/othervm -Djdk.serialSetFilterAfterRead=true SerialFilterTest\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFilterTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# See conf\/security\/java.security for pattern synatx\n+# See conf\/security\/java.security for pattern syntax\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/java.security-extra-factory","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}