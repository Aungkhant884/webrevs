{"files":[{"patch":"@@ -673,1 +673,1 @@\n-                            \"Error configuring filter factory\", th);\n+                            \"Error configuring filter factory: {0}\", (Object)th);\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputFilter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,5 +2,1 @@\n-#  \tDefault Logging Configuration File\n-#\n-# You can use a different file by specifying a filename\n-# with the java.util.logging.config.file system property.\n-# For example, java -Djava.util.logging.config.file=myfile\n+#  \tEnable logging of all serialization levels to the console\n@@ -9,9 +5,0 @@\n-############################################################\n-#  \tGlobal properties\n-############################################################\n-\n-# \"handlers\" specifies a comma-separated list of log Handler\n-# classes.  These handlers will be installed during VM startup.\n-# Note that these classes must be on the system classpath.\n-# By default we only configure a ConsoleHandler, which will only\n-# show messages at the INFO and above levels.\n@@ -20,28 +7,1 @@\n-# To also add the FileHandler, use the following line instead.\n-#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler\n-\n-# Default global logging level.\n-# This specifies which kinds of events are logged across\n-# all loggers.  For any given facility this global level\n-# can be overridden by a facility-specific level\n-# Note that the ConsoleHandler also has a separate level\n-# setting to limit messages printed to the console.\n-.level= INFO\n-\n-############################################################\n-# Handler specific properties.\n-# Describes specific configuration info for Handlers.\n-############################################################\n-\n-# default file output is in user's home directory.\n-java.util.logging.FileHandler.pattern = %h\/java%u.log\n-java.util.logging.FileHandler.limit = 50000\n-java.util.logging.FileHandler.count = 1\n-# Default number of locks FileHandler can obtain synchronously.\n-# This specifies maximum number of attempts to obtain lock file by FileHandler\n-# implemented by incrementing the unique field %u as per FileHandler API documentation.\n-java.util.logging.FileHandler.maxLocks = 100\n-java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter\n-\n-# Limit the messages that are printed on the console to INFO and above.\n-java.util.logging.ConsoleHandler.level = FINEST\n+java.util.logging.ConsoleHandler.level = ALL\n@@ -49,6 +9,0 @@\n-\n-# Example to customize the SimpleFormatter output format\n-# to print one-line log message like this:\n-#     <level>: <log message> [<date\/time>]\n-#\n-# java.util.logging.SimpleFormatter.format=%4$s: %5$s [%1$tc]%n\n@@ -56,20 +10,1 @@\n-\n-############################################################\n-# Facility-specific properties.\n-# Provides extra control for each logger.\n-############################################################\n-\n-java.io.serialization.level = FINER\n-\n-\n-\n-\n-############################################################\n-# Facility-specific properties.\n-# Provides extra control for each logger.\n-############################################################\n-\n-# For example, set the com.xyz.foo logger to only log SEVERE\n-# messages:\n-java.io.serialization.level = FINER\n-\n+java.io.serialization.level = ALL\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/logging.properties","additions":3,"deletions":68,"binary":false,"changes":71,"status":"modified"}]}