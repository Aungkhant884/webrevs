{"files":[{"patch":"@@ -671,0 +671,1 @@\n+                    Throwable th = (ex instanceof InvocationTargetException ite) ? ite.getCause() : ex;\n@@ -672,1 +673,1 @@\n-                            \"Error configuring filter factory\", ex);\n+                            \"Error configuring filter factory\", th);\n@@ -674,2 +675,1 @@\n-                    throw new ExceptionInInitializerError(\n-                            \"FilterFactory configuration: jdk.serialFilterFactory: \" + ex.getMessage());\n+                    throw new ExceptionInInitializerError(th);\n@@ -811,2 +811,0 @@\n-            if (serialFilterFactory == null)\n-                throw new IllegalStateException(\"Serial filter factory initialization incomplete\");\n@@ -814,2 +812,4 @@\n-                throw new IllegalStateException(\"Cannot replace filter factory: \" +\n-                        serialFilterFactory.getClass().getName());\n+                final String msg = serialFilterFactory != null\n+                        ? serialFilterFactory.getClass().getName()\n+                        : \"initialization incomplete\";\n+                throw new IllegalStateException(\"Cannot replace filter factory: \" + msg);\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputFilter.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.io.ObjectInputFilter;\n+import java.io.ObjectInputFilter.Config;\n+import java.util.function.BinaryOperator;\n+\n+\/* @test\n+ * @run testng\/othervm  -Djdk.serialFilterFactory=ForcedError_NoSuchClass SerialFactoryFaults\n+ * @run testng\/othervm  -Djdk.serialFilterFactory=SerialFactoryFaults$NoPublicConstructor SerialFactoryFaults\n+ * @run testng\/othervm  -Djdk.serialFilterFactory=SerialFactoryFaults$ConstructorThrows SerialFactoryFaults\n+ * @run testng\/othervm  -Djdk.serialFilterFactory=SerialFactoryFaults$FactorySetsFactory SerialFactoryFaults\n+ * @summary Check cases where the Filter Factory initialization from properties fails\n+ *\/\n+\n+@Test\n+public class SerialFactoryFaults {\n+\n+    public void initFaultTest() {\n+        String factoryName = System.getProperty(\"jdk.serialFilterFactory\");\n+        ExceptionInInitializerError ex = Assert.expectThrows(ExceptionInInitializerError.class,\n+                () -> Config.getSerialFilterFactory());\n+        Throwable cause = ex.getCause();\n+\n+        if (factoryName.equals(\"ForcedError_NoSuchClass\")) {\n+            Assert.assertEquals(cause.getClass(),\n+                    ClassNotFoundException.class, \"wrong exception\");\n+        } else if (factoryName.equals(\"SerialFactoryFaults$NoPublicConstructor\")) {\n+            Assert.assertEquals(cause.getClass(),\n+                    NoSuchMethodException.class, \"wrong exception\");\n+        } else if (factoryName.equals(\"SerialFactoryFaults$ConstructorThrows\")) {\n+            Assert.assertEquals(cause.getClass(),\n+                    IllegalStateException.class, \"wrong exception\");\n+        } else if (factoryName.equals(\"SerialFactoryFaults$FactorySetsFactory\")) {\n+            Assert.assertEquals(cause.getClass(),\n+                    IllegalStateException.class, \"wrong exception\");\n+            Assert.assertEquals(cause.getMessage(),\n+                    \"Cannot replace filter factory: initialization incomplete\",\n+                    \"wrong message\");\n+        } else {\n+            Assert.fail(\"No test for filter factory: \" + factoryName);\n+        }\n+    }\n+\n+    \/**\n+     * Test factory that does not have the required public no-arg constructor.\n+     *\/\n+    public static final class NoPublicConstructor\n+            implements BinaryOperator<ObjectInputFilter> {\n+        private NoPublicConstructor() {\n+        }\n+\n+        public ObjectInputFilter apply(ObjectInputFilter curr, ObjectInputFilter next) {\n+            throw new RuntimeException(\"NYI\");\n+        }\n+    }\n+\n+    \/**\n+     * Test factory that has a constructor that throws a runtime exception.\n+     *\/\n+    public static final class ConstructorThrows\n+            implements BinaryOperator<ObjectInputFilter> {\n+        public ConstructorThrows() {\n+            throw new IllegalStateException(\"SerialFactoryFaults$ConstructorThrows\");\n+        }\n+\n+        public ObjectInputFilter apply(ObjectInputFilter curr, ObjectInputFilter next) {\n+            throw new RuntimeException(\"NYI\");\n+        }\n+    }\n+\n+    \/**\n+     * Test factory that has a constructor tries to set the filter factory.\n+     *\/\n+    public static final class FactorySetsFactory\n+            implements BinaryOperator<ObjectInputFilter> {\n+        public FactorySetsFactory() {\n+            Config.setSerialFilterFactory(this);\n+        }\n+\n+        public ObjectInputFilter apply(ObjectInputFilter curr, ObjectInputFilter next) {\n+            throw new RuntimeException(\"NYI\");\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFactoryFaults.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -52,1 +52,0 @@\n- * @run testng\/othervm\/fail  -Djdk.serialFilterFactory=ForcedError_NoSuchClass SerialFilterFactoryTest\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFilterFactoryTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# See conf\/security\/java.security for pattern synatx\n+# See conf\/security\/java.security for pattern syntax\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/java.security-extra-factory","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}