{"files":[{"patch":"@@ -3890,0 +3890,3 @@\n+  if (masklen < 64) {\n+    andq(tmp, (((jlong)1 << masklen) - 1));\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -879,1 +879,1 @@\n-    assert(mask->Opcode() == Op_VectorStoreMask, \"\");\n+    assert(mask->bottom_type()->is_vect()->element_basic_type() == T_BOOLEAN, \"\");\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5233,0 +5248,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5236,0 +5259,1 @@\n+        int[] r = new int[a.length];\n@@ -5237,6 +5261,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5244,1 +5266,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5246,0 +5267,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Byte128VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5251,0 +5284,1 @@\n+        int[] r = new int[a.length];\n@@ -5252,6 +5286,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5259,1 +5291,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5261,2 +5293,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Byte128VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5264,0 +5303,1 @@\n+        return i - idx;\n@@ -5269,0 +5309,1 @@\n+        int[] r = new int[a.length];\n@@ -5270,6 +5311,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5277,4 +5316,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5282,0 +5317,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Byte128VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5233,0 +5248,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5236,0 +5259,1 @@\n+        int[] r = new int[a.length];\n@@ -5237,6 +5261,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5244,1 +5266,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5246,0 +5267,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Byte256VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5251,0 +5284,1 @@\n+        int[] r = new int[a.length];\n@@ -5252,6 +5286,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5259,1 +5291,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5261,2 +5293,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Byte256VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5264,0 +5303,1 @@\n+        return i - idx;\n@@ -5269,0 +5309,1 @@\n+        int[] r = new int[a.length];\n@@ -5270,6 +5311,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5277,4 +5316,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5282,0 +5317,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Byte256VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5233,0 +5248,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5236,0 +5259,1 @@\n+        int[] r = new int[a.length];\n@@ -5237,6 +5261,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5244,1 +5266,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5246,0 +5267,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Byte512VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5251,0 +5284,1 @@\n+        int[] r = new int[a.length];\n@@ -5252,6 +5286,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5259,1 +5291,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5261,2 +5293,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Byte512VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5264,0 +5303,1 @@\n+        return i - idx;\n@@ -5269,0 +5309,1 @@\n+        int[] r = new int[a.length];\n@@ -5270,6 +5311,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5277,4 +5316,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5282,0 +5317,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Byte512VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5233,0 +5248,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5236,0 +5259,1 @@\n+        int[] r = new int[a.length];\n@@ -5237,6 +5261,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5244,1 +5266,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5246,0 +5267,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Byte64VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5251,0 +5284,1 @@\n+        int[] r = new int[a.length];\n@@ -5252,6 +5286,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5259,1 +5291,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5261,2 +5293,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Byte64VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5264,0 +5303,1 @@\n+        return i - idx;\n@@ -5269,0 +5309,1 @@\n+        int[] r = new int[a.length];\n@@ -5270,6 +5311,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5277,4 +5316,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5282,0 +5317,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Byte64VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -219,0 +219,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5238,0 +5253,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5241,0 +5264,1 @@\n+        int[] r = new int[a.length];\n@@ -5242,6 +5266,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5249,1 +5271,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5251,0 +5272,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, ByteMaxVectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5256,0 +5289,1 @@\n+        int[] r = new int[a.length];\n@@ -5257,6 +5291,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5264,1 +5296,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5266,2 +5298,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, ByteMaxVectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5269,0 +5308,1 @@\n+        return i - idx;\n@@ -5274,0 +5314,1 @@\n+        int[] r = new int[a.length];\n@@ -5275,6 +5316,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5282,4 +5321,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5287,0 +5322,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, ByteMaxVectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -4784,0 +4799,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4787,0 +4810,1 @@\n+        int[] r = new int[a.length];\n@@ -4788,6 +4812,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -4795,1 +4817,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4797,0 +4818,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Double128VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -4802,0 +4835,1 @@\n+        int[] r = new int[a.length];\n@@ -4803,6 +4837,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -4810,1 +4842,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -4812,2 +4844,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Double128VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -4815,0 +4854,1 @@\n+        return i - idx;\n@@ -4820,0 +4860,1 @@\n+        int[] r = new int[a.length];\n@@ -4821,6 +4862,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -4828,4 +4867,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -4833,0 +4868,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Double128VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -4784,0 +4799,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4787,0 +4810,1 @@\n+        int[] r = new int[a.length];\n@@ -4788,6 +4812,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -4795,1 +4817,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4797,0 +4818,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Double256VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -4802,0 +4835,1 @@\n+        int[] r = new int[a.length];\n@@ -4803,6 +4837,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -4810,1 +4842,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -4812,2 +4844,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Double256VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -4815,0 +4854,1 @@\n+        return i - idx;\n@@ -4820,0 +4860,1 @@\n+        int[] r = new int[a.length];\n@@ -4821,6 +4862,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -4828,4 +4867,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -4833,0 +4868,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Double256VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -4784,0 +4799,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4787,0 +4810,1 @@\n+        int[] r = new int[a.length];\n@@ -4788,6 +4812,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -4795,1 +4817,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4797,0 +4818,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Double512VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -4802,0 +4835,1 @@\n+        int[] r = new int[a.length];\n@@ -4803,6 +4837,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -4810,1 +4842,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -4812,2 +4844,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Double512VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -4815,0 +4854,1 @@\n+        return i - idx;\n@@ -4820,0 +4860,1 @@\n+        int[] r = new int[a.length];\n@@ -4821,6 +4862,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -4828,4 +4867,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -4833,0 +4868,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Double512VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -4784,0 +4799,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4787,0 +4810,1 @@\n+        int[] r = new int[a.length];\n@@ -4788,6 +4812,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -4795,1 +4817,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4797,0 +4818,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Double64VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -4802,0 +4835,1 @@\n+        int[] r = new int[a.length];\n@@ -4803,6 +4837,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -4810,1 +4842,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -4812,2 +4844,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Double64VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -4815,0 +4854,1 @@\n+        return i - idx;\n@@ -4820,0 +4860,1 @@\n+        int[] r = new int[a.length];\n@@ -4821,6 +4862,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -4828,4 +4867,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -4833,0 +4868,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Double64VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -219,0 +219,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -4789,0 +4804,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4792,0 +4815,1 @@\n+        int[] r = new int[a.length];\n@@ -4793,6 +4817,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -4800,1 +4822,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4802,0 +4823,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, DoubleMaxVectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -4807,0 +4840,1 @@\n+        int[] r = new int[a.length];\n@@ -4808,6 +4842,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -4815,1 +4847,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -4817,2 +4849,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, DoubleMaxVectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -4820,0 +4859,1 @@\n+        return i - idx;\n@@ -4825,0 +4865,1 @@\n+        int[] r = new int[a.length];\n@@ -4826,6 +4867,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -4833,4 +4872,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -4838,0 +4873,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, DoubleMaxVectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -4762,0 +4777,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4765,0 +4788,1 @@\n+        int[] r = new int[a.length];\n@@ -4766,6 +4790,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -4773,1 +4795,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4775,0 +4796,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Float128VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -4780,0 +4813,1 @@\n+        int[] r = new int[a.length];\n@@ -4781,6 +4815,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -4788,1 +4820,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -4790,2 +4822,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Float128VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -4793,0 +4832,1 @@\n+        return i - idx;\n@@ -4798,0 +4838,1 @@\n+        int[] r = new int[a.length];\n@@ -4799,6 +4840,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -4806,4 +4845,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -4811,0 +4846,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Float128VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -4762,0 +4777,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4765,0 +4788,1 @@\n+        int[] r = new int[a.length];\n@@ -4766,6 +4790,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -4773,1 +4795,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4775,0 +4796,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Float256VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -4780,0 +4813,1 @@\n+        int[] r = new int[a.length];\n@@ -4781,6 +4815,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -4788,1 +4820,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -4790,2 +4822,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Float256VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -4793,0 +4832,1 @@\n+        return i - idx;\n@@ -4798,0 +4838,1 @@\n+        int[] r = new int[a.length];\n@@ -4799,6 +4840,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -4806,4 +4845,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -4811,0 +4846,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Float256VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -4762,0 +4777,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4765,0 +4788,1 @@\n+        int[] r = new int[a.length];\n@@ -4766,6 +4790,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -4773,1 +4795,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4775,0 +4796,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Float512VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -4780,0 +4813,1 @@\n+        int[] r = new int[a.length];\n@@ -4781,6 +4815,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -4788,1 +4820,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -4790,2 +4822,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Float512VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -4793,0 +4832,1 @@\n+        return i - idx;\n@@ -4798,0 +4838,1 @@\n+        int[] r = new int[a.length];\n@@ -4799,6 +4840,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -4806,4 +4845,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -4811,0 +4846,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Float512VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -4762,0 +4777,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4765,0 +4788,1 @@\n+        int[] r = new int[a.length];\n@@ -4766,6 +4790,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -4773,1 +4795,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4775,0 +4796,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Float64VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -4780,0 +4813,1 @@\n+        int[] r = new int[a.length];\n@@ -4781,6 +4815,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -4788,1 +4820,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -4790,2 +4822,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Float64VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -4793,0 +4832,1 @@\n+        return i - idx;\n@@ -4798,0 +4838,1 @@\n+        int[] r = new int[a.length];\n@@ -4799,6 +4840,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -4806,4 +4845,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -4811,0 +4846,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Float64VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -219,0 +219,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -4767,0 +4782,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4770,0 +4793,1 @@\n+        int[] r = new int[a.length];\n@@ -4771,6 +4795,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -4778,1 +4800,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4780,0 +4801,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, FloatMaxVectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -4785,0 +4818,1 @@\n+        int[] r = new int[a.length];\n@@ -4786,6 +4820,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -4793,1 +4825,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -4795,2 +4827,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, FloatMaxVectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -4798,0 +4837,1 @@\n+        return i - idx;\n@@ -4803,0 +4843,1 @@\n+        int[] r = new int[a.length];\n@@ -4804,6 +4845,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -4811,4 +4850,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -4816,0 +4851,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, FloatMaxVectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5187,0 +5202,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5190,0 +5213,1 @@\n+        int[] r = new int[a.length];\n@@ -5191,6 +5215,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5198,1 +5220,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5200,0 +5221,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Int128VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5205,0 +5238,1 @@\n+        int[] r = new int[a.length];\n@@ -5206,6 +5240,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5213,1 +5245,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5215,2 +5247,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Int128VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5218,0 +5257,1 @@\n+        return i - idx;\n@@ -5223,0 +5263,1 @@\n+        int[] r = new int[a.length];\n@@ -5224,6 +5265,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5231,4 +5270,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5236,0 +5271,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Int128VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5187,0 +5202,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5190,0 +5213,1 @@\n+        int[] r = new int[a.length];\n@@ -5191,6 +5215,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5198,1 +5220,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5200,0 +5221,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Int256VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5205,0 +5238,1 @@\n+        int[] r = new int[a.length];\n@@ -5206,6 +5240,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5213,1 +5245,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5215,2 +5247,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Int256VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5218,0 +5257,1 @@\n+        return i - idx;\n@@ -5223,0 +5263,1 @@\n+        int[] r = new int[a.length];\n@@ -5224,6 +5265,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5231,4 +5270,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5236,0 +5271,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Int256VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5187,0 +5202,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5190,0 +5213,1 @@\n+        int[] r = new int[a.length];\n@@ -5191,6 +5215,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5198,1 +5220,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5200,0 +5221,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Int512VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5205,0 +5238,1 @@\n+        int[] r = new int[a.length];\n@@ -5206,6 +5240,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5213,1 +5245,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5215,2 +5247,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Int512VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5218,0 +5257,1 @@\n+        return i - idx;\n@@ -5223,0 +5263,1 @@\n+        int[] r = new int[a.length];\n@@ -5224,6 +5265,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5231,4 +5270,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5236,0 +5271,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Int512VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5187,0 +5202,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5190,0 +5213,1 @@\n+        int[] r = new int[a.length];\n@@ -5191,6 +5215,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5198,1 +5220,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5200,0 +5221,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Int64VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5205,0 +5238,1 @@\n+        int[] r = new int[a.length];\n@@ -5206,6 +5240,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5213,1 +5245,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5215,2 +5247,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Int64VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5218,0 +5257,1 @@\n+        return i - idx;\n@@ -5223,0 +5263,1 @@\n+        int[] r = new int[a.length];\n@@ -5224,6 +5265,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5231,4 +5270,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5236,0 +5271,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Int64VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -219,0 +219,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5192,0 +5207,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5195,0 +5218,1 @@\n+        int[] r = new int[a.length];\n@@ -5196,6 +5220,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5203,1 +5225,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5205,0 +5226,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, IntMaxVectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5210,0 +5243,1 @@\n+        int[] r = new int[a.length];\n@@ -5211,6 +5245,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5218,1 +5250,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5220,2 +5252,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, IntMaxVectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5223,0 +5262,1 @@\n+        return i - idx;\n@@ -5228,0 +5268,1 @@\n+        int[] r = new int[a.length];\n@@ -5229,6 +5270,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5236,4 +5275,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5241,0 +5276,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, IntMaxVectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -171,0 +171,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5071,0 +5086,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5074,0 +5097,1 @@\n+        int[] r = new int[a.length];\n@@ -5075,6 +5099,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5082,1 +5104,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5084,0 +5105,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Long128VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5089,0 +5122,1 @@\n+        int[] r = new int[a.length];\n@@ -5090,6 +5124,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5097,1 +5129,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5099,2 +5131,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Long128VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5102,0 +5141,1 @@\n+        return i - idx;\n@@ -5107,0 +5147,1 @@\n+        int[] r = new int[a.length];\n@@ -5108,6 +5149,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5115,4 +5154,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5120,0 +5155,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Long128VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -171,0 +171,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5071,0 +5086,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5074,0 +5097,1 @@\n+        int[] r = new int[a.length];\n@@ -5075,6 +5099,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5082,1 +5104,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5084,0 +5105,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Long256VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5089,0 +5122,1 @@\n+        int[] r = new int[a.length];\n@@ -5090,6 +5124,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5097,1 +5129,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5099,2 +5131,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Long256VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5102,0 +5141,1 @@\n+        return i - idx;\n@@ -5107,0 +5147,1 @@\n+        int[] r = new int[a.length];\n@@ -5108,6 +5149,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5115,4 +5154,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5120,0 +5155,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Long256VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -171,0 +171,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5071,0 +5086,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5074,0 +5097,1 @@\n+        int[] r = new int[a.length];\n@@ -5075,6 +5099,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5082,1 +5104,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5084,0 +5105,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Long512VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5089,0 +5122,1 @@\n+        int[] r = new int[a.length];\n@@ -5090,6 +5124,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5097,1 +5129,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5099,2 +5131,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Long512VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5102,0 +5141,1 @@\n+        return i - idx;\n@@ -5107,0 +5147,1 @@\n+        int[] r = new int[a.length];\n@@ -5108,6 +5149,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5115,4 +5154,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5120,0 +5155,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Long512VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -171,0 +171,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5071,0 +5086,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5074,0 +5097,1 @@\n+        int[] r = new int[a.length];\n@@ -5075,6 +5099,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5082,1 +5104,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5084,0 +5105,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Long64VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5089,0 +5122,1 @@\n+        int[] r = new int[a.length];\n@@ -5090,6 +5124,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5097,1 +5129,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5099,2 +5131,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Long64VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5102,0 +5141,1 @@\n+        return i - idx;\n@@ -5107,0 +5147,1 @@\n+        int[] r = new int[a.length];\n@@ -5108,6 +5149,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5115,4 +5154,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5120,0 +5155,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Long64VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -176,0 +176,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5076,0 +5091,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5079,0 +5102,1 @@\n+        int[] r = new int[a.length];\n@@ -5080,6 +5104,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5087,1 +5109,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5089,0 +5110,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, LongMaxVectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5094,0 +5127,1 @@\n+        int[] r = new int[a.length];\n@@ -5095,6 +5129,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5102,1 +5134,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5104,2 +5136,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, LongMaxVectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5107,0 +5146,1 @@\n+        return i - idx;\n@@ -5112,0 +5152,1 @@\n+        int[] r = new int[a.length];\n@@ -5113,6 +5154,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5120,4 +5159,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5125,0 +5160,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, LongMaxVectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5212,0 +5227,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5215,0 +5238,1 @@\n+        int[] r = new int[a.length];\n@@ -5216,6 +5240,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5223,1 +5245,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5225,0 +5246,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Short128VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5230,0 +5263,1 @@\n+        int[] r = new int[a.length];\n@@ -5231,6 +5265,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5238,1 +5270,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5240,2 +5272,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Short128VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5243,0 +5282,1 @@\n+        return i - idx;\n@@ -5248,0 +5288,1 @@\n+        int[] r = new int[a.length];\n@@ -5249,6 +5290,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5256,4 +5295,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5261,0 +5296,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Short128VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5212,0 +5227,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5215,0 +5238,1 @@\n+        int[] r = new int[a.length];\n@@ -5216,6 +5240,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5223,1 +5245,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5225,0 +5246,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Short256VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5230,0 +5263,1 @@\n+        int[] r = new int[a.length];\n@@ -5231,6 +5265,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5238,1 +5270,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5240,2 +5272,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Short256VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5243,0 +5282,1 @@\n+        return i - idx;\n@@ -5248,0 +5288,1 @@\n+        int[] r = new int[a.length];\n@@ -5249,6 +5290,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5256,4 +5295,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5261,0 +5296,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Short256VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5212,0 +5227,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5215,0 +5238,1 @@\n+        int[] r = new int[a.length];\n@@ -5216,6 +5240,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5223,1 +5245,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5225,0 +5246,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Short512VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5230,0 +5263,1 @@\n+        int[] r = new int[a.length];\n@@ -5231,6 +5265,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5238,1 +5270,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5240,2 +5272,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Short512VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5243,0 +5282,1 @@\n+        return i - idx;\n@@ -5248,0 +5288,1 @@\n+        int[] r = new int[a.length];\n@@ -5249,6 +5290,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5256,4 +5295,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5261,0 +5296,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Short512VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5212,0 +5227,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5215,0 +5238,1 @@\n+        int[] r = new int[a.length];\n@@ -5216,6 +5240,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5223,1 +5245,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5225,0 +5246,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Short64VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5230,0 +5263,1 @@\n+        int[] r = new int[a.length];\n@@ -5231,6 +5265,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5238,1 +5270,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5240,2 +5272,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, Short64VectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5243,0 +5282,1 @@\n+        return i - idx;\n@@ -5248,0 +5288,1 @@\n+        int[] r = new int[a.length];\n@@ -5249,6 +5290,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5256,4 +5295,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5261,0 +5296,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Short64VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -219,0 +219,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -5217,0 +5232,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5220,0 +5243,1 @@\n+        int[] r = new int[a.length];\n@@ -5221,6 +5245,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -5228,1 +5250,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5230,0 +5251,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, ShortMaxVectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -5235,0 +5268,1 @@\n+        int[] r = new int[a.length];\n@@ -5236,6 +5270,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -5243,1 +5275,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -5245,2 +5277,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, ShortMaxVectorTests::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -5248,0 +5287,1 @@\n+        return i - idx;\n@@ -5253,0 +5293,1 @@\n+        int[] r = new int[a.length];\n@@ -5254,6 +5295,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -5261,4 +5300,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -5266,0 +5301,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, ShortMaxVectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":63,"deletions":26,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -414,0 +414,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -417,0 +425,1 @@\n+        int[] r = new int[a.length];\n@@ -418,6 +427,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.trueCount();\n@@ -425,1 +432,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -427,0 +433,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, $vectorteststype$::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -432,0 +450,1 @@\n+        int[] r = new int[a.length];\n@@ -433,6 +452,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.lastTrue();\n@@ -440,1 +457,1 @@\n-            int expectedLtrue = j - i;\n+        }\n@@ -442,2 +459,9 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+        assertMaskReductionArraysEquals(r, a, $vectorteststype$::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n@@ -445,0 +469,1 @@\n+        return i - idx;\n@@ -450,0 +475,1 @@\n+        int[] r = new int[a.length];\n@@ -451,6 +477,4 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                r[i] = vmask.firstTrue();\n@@ -458,4 +482,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -463,0 +483,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, $vectorteststype$::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Miscellaneous.template","additions":48,"deletions":26,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -245,0 +245,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}