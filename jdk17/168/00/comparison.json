{"files":[{"patch":"@@ -879,1 +879,1 @@\n-    assert(mask->Opcode() == Op_VectorStoreMask, \"\");\n+    assert(mask->bottom_type()->is_vect()->element_basic_type() == T_BOOLEAN, \"\");\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5237,6 +5237,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5244,1 +5247,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5252,8 +5254,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5261,2 +5264,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5270,8 +5274,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5279,2 +5284,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -5237,6 +5237,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5244,1 +5247,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5252,8 +5254,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5261,2 +5264,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5270,8 +5274,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5279,2 +5284,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -5237,6 +5237,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5244,1 +5247,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5252,8 +5254,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5261,2 +5264,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5270,8 +5274,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5279,2 +5284,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -5237,6 +5237,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5244,1 +5247,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5252,8 +5254,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5261,2 +5264,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5270,8 +5274,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5279,2 +5284,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -5242,6 +5242,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5249,1 +5252,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5257,8 +5259,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5266,2 +5269,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5275,8 +5279,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5284,2 +5289,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -4788,6 +4788,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4795,1 +4798,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4803,8 +4805,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -4812,2 +4815,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -4821,8 +4825,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -4830,2 +4835,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -4788,6 +4788,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4795,1 +4798,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4803,8 +4805,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -4812,2 +4815,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -4821,8 +4825,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -4830,2 +4835,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -4788,6 +4788,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4795,1 +4798,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4803,8 +4805,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -4812,2 +4815,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -4821,8 +4825,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -4830,2 +4835,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -4788,6 +4788,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4795,1 +4798,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4803,8 +4805,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -4812,2 +4815,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -4821,8 +4825,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -4830,2 +4835,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -4793,6 +4793,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4800,1 +4803,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4808,8 +4810,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -4817,2 +4820,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -4826,8 +4830,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -4835,2 +4840,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -4766,6 +4766,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4773,1 +4776,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4781,8 +4783,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -4790,2 +4793,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -4799,8 +4803,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -4808,2 +4813,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -4766,6 +4766,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4773,1 +4776,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4781,8 +4783,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -4790,2 +4793,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -4799,8 +4803,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -4808,2 +4813,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -4766,6 +4766,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4773,1 +4776,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4781,8 +4783,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -4790,2 +4793,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -4799,8 +4803,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -4808,2 +4813,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -4766,6 +4766,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4773,1 +4776,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4781,8 +4783,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -4790,2 +4793,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -4799,8 +4803,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -4808,2 +4813,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -4771,6 +4771,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4778,1 +4781,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -4786,8 +4788,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -4795,2 +4798,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -4804,8 +4808,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -4813,2 +4818,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -5191,6 +5191,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5198,1 +5201,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5206,8 +5208,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5215,2 +5218,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5224,8 +5228,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5233,2 +5238,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -5191,6 +5191,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5198,1 +5201,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5206,8 +5208,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5215,2 +5218,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5224,8 +5228,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5233,2 +5238,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -5191,6 +5191,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5198,1 +5201,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5206,8 +5208,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5215,2 +5218,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5224,8 +5228,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5233,2 +5238,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -5191,6 +5191,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5198,1 +5201,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5206,8 +5208,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5215,2 +5218,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5224,8 +5228,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5233,2 +5238,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -5196,6 +5196,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5203,1 +5206,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5211,8 +5213,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5220,2 +5223,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5229,8 +5233,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5238,2 +5243,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -5075,6 +5075,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5082,1 +5085,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5090,8 +5092,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5099,2 +5102,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5108,8 +5112,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5117,2 +5122,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -5075,6 +5075,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5082,1 +5085,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5090,8 +5092,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5099,2 +5102,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5108,8 +5112,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5117,2 +5122,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -5075,6 +5075,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5082,1 +5085,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5090,8 +5092,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5099,2 +5102,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5108,8 +5112,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5117,2 +5122,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -5075,6 +5075,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5082,1 +5085,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5090,8 +5092,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5099,2 +5102,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5108,8 +5112,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5117,2 +5122,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -5080,6 +5080,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5087,1 +5090,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5095,8 +5097,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5104,2 +5107,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5113,8 +5117,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5122,2 +5127,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -5216,6 +5216,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5223,1 +5226,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5231,8 +5233,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5240,2 +5243,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5249,8 +5253,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5258,2 +5263,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -5216,6 +5216,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5223,1 +5226,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5231,8 +5233,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5240,2 +5243,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5249,8 +5253,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5258,2 +5263,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -5216,6 +5216,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5223,1 +5226,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5231,8 +5233,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5240,2 +5243,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5249,8 +5253,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5258,2 +5263,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -5216,6 +5216,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5223,1 +5226,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5231,8 +5233,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5240,2 +5243,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5249,8 +5253,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5258,2 +5263,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -5221,6 +5221,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5228,1 +5231,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -5236,8 +5238,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n-            }\n-            int expectedLtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n@@ -5245,2 +5248,3 @@\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+            }\n@@ -5254,8 +5258,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n-            }\n-            int expectedFtrue = j - i;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n@@ -5263,2 +5268,3 @@\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -418,6 +418,9 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int tcount = vmask.trueCount();\n-            int expectedTcount = 0;\n-            for (int j = i; j < i + SPECIES.length(); j++) {\n-                expectedTcount += a[j] ? 1 : 0;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int tcount = vmask.trueCount();\n+                int expectedTcount = 0;\n+                for (int j = i; j < i + SPECIES.length(); j++) {\n+                    expectedTcount += a[j] ? 1 : 0;\n+                }\n+                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -425,1 +428,0 @@\n-            Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n@@ -433,6 +435,12 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ltrue = vmask.lastTrue();\n-            int j = i + SPECIES.length() - 1;\n-            for (; j >= i; j--) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ltrue = vmask.lastTrue();\n+                int j = i + SPECIES.length() - 1;\n+                for (; j >= i; j--) {\n+                    if (a[j]) break;\n+                }\n+                int expectedLtrue = j - i;\n+\n+                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n+                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n@@ -440,4 +448,0 @@\n-            int expectedLtrue = j - i;\n-\n-            Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n@@ -451,6 +455,12 @@\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            var vmask = SPECIES.loadMask(a, i);\n-            int ftrue = vmask.firstTrue();\n-            int j = i;\n-            for (; j < i + SPECIES.length() ; j++) {\n-                if (a[j]) break;\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                var vmask = SPECIES.loadMask(a, i);\n+                int ftrue = vmask.firstTrue();\n+                int j = i;\n+                for (; j < i + SPECIES.length() ; j++) {\n+                    if (a[j]) break;\n+                }\n+                int expectedFtrue = j - i;\n+\n+                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n@@ -458,4 +468,0 @@\n-            int expectedFtrue = j - i;\n-\n-            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Miscellaneous.template","additions":33,"deletions":27,"binary":false,"changes":60,"status":"modified"}]}