{"files":[{"patch":"@@ -3866,0 +3866,3 @@\n+  if (masklen < 64) {\n+    andq(tmp, (((jlong)1 << masklen) - 1));\n+  }\n@@ -3890,0 +3893,3 @@\n+  if (masklen < 64) {\n+    andq(tmp, (((jlong)1 << masklen) - 1));\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1120,0 +1135,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -5233,0 +5253,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5236,0 +5264,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5240,6 +5269,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Byte128VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5248,0 +5283,1 @@\n+        return i - idx;\n@@ -5253,0 +5289,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5257,6 +5294,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Byte128VectorTests::maskLastTrue);\n+    }\n@@ -5264,2 +5301,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5268,0 +5308,1 @@\n+        return i - idx;\n@@ -5273,0 +5314,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5277,9 +5319,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5288,0 +5322,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Byte128VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1120,0 +1135,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -5233,0 +5253,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5236,0 +5264,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5240,6 +5269,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Byte256VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5248,0 +5283,1 @@\n+        return i - idx;\n@@ -5253,0 +5289,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5257,6 +5294,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Byte256VectorTests::maskLastTrue);\n+    }\n@@ -5264,2 +5301,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5268,0 +5308,1 @@\n+        return i - idx;\n@@ -5273,0 +5314,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5277,9 +5319,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5288,0 +5322,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Byte256VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1120,0 +1135,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -5233,0 +5253,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5236,0 +5264,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5240,6 +5269,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Byte512VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5248,0 +5283,1 @@\n+        return i - idx;\n@@ -5253,0 +5289,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5257,6 +5294,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Byte512VectorTests::maskLastTrue);\n+    }\n@@ -5264,2 +5301,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5268,0 +5308,1 @@\n+        return i - idx;\n@@ -5273,0 +5314,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5277,9 +5319,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5288,0 +5322,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Byte512VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1120,0 +1135,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -5233,0 +5253,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5236,0 +5264,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5240,6 +5269,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Byte64VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5248,0 +5283,1 @@\n+        return i - idx;\n@@ -5253,0 +5289,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5257,6 +5294,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Byte64VectorTests::maskLastTrue);\n+    }\n@@ -5264,2 +5301,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5268,0 +5308,1 @@\n+        return i - idx;\n@@ -5273,0 +5314,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5277,9 +5319,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5288,0 +5322,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Byte64VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -219,0 +219,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1125,0 +1140,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -5238,0 +5258,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5241,0 +5269,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5245,6 +5274,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, ByteMaxVectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5253,0 +5288,1 @@\n+        return i - idx;\n@@ -5258,0 +5294,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5262,6 +5299,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, ByteMaxVectorTests::maskLastTrue);\n+    }\n@@ -5269,2 +5306,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5273,0 +5313,1 @@\n+        return i - idx;\n@@ -5278,0 +5319,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5282,9 +5324,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5293,0 +5327,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, ByteMaxVectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1256,0 +1271,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -4784,0 +4804,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4787,0 +4815,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4791,6 +4820,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Double128VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -4799,0 +4834,1 @@\n+        return i - idx;\n@@ -4804,0 +4840,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4808,6 +4845,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Double128VectorTests::maskLastTrue);\n+    }\n@@ -4815,2 +4852,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -4819,0 +4859,1 @@\n+        return i - idx;\n@@ -4824,0 +4865,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4828,9 +4870,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -4839,0 +4873,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Double128VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1256,0 +1271,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -4784,0 +4804,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4787,0 +4815,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4791,6 +4820,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Double256VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -4799,0 +4834,1 @@\n+        return i - idx;\n@@ -4804,0 +4840,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4808,6 +4845,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Double256VectorTests::maskLastTrue);\n+    }\n@@ -4815,2 +4852,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -4819,0 +4859,1 @@\n+        return i - idx;\n@@ -4824,0 +4865,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4828,9 +4870,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -4839,0 +4873,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Double256VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1256,0 +1271,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -4784,0 +4804,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4787,0 +4815,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4791,6 +4820,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Double512VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -4799,0 +4834,1 @@\n+        return i - idx;\n@@ -4804,0 +4840,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4808,6 +4845,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Double512VectorTests::maskLastTrue);\n+    }\n@@ -4815,2 +4852,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -4819,0 +4859,1 @@\n+        return i - idx;\n@@ -4824,0 +4865,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4828,9 +4870,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -4839,0 +4873,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Double512VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1256,0 +1271,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -4784,0 +4804,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4787,0 +4815,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4791,6 +4820,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Double64VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -4799,0 +4834,1 @@\n+        return i - idx;\n@@ -4804,0 +4840,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4808,6 +4845,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Double64VectorTests::maskLastTrue);\n+    }\n@@ -4815,2 +4852,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -4819,0 +4859,1 @@\n+        return i - idx;\n@@ -4824,0 +4865,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4828,9 +4870,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -4839,0 +4873,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Double64VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -219,0 +219,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1261,0 +1276,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -4789,0 +4809,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4792,0 +4820,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4796,6 +4825,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, DoubleMaxVectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -4804,0 +4839,1 @@\n+        return i - idx;\n@@ -4809,0 +4845,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4813,6 +4850,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, DoubleMaxVectorTests::maskLastTrue);\n+    }\n@@ -4820,2 +4857,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -4824,0 +4864,1 @@\n+        return i - idx;\n@@ -4829,0 +4870,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4833,9 +4875,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -4844,0 +4878,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, DoubleMaxVectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1266,0 +1281,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -4762,0 +4782,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4765,0 +4793,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4769,6 +4798,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Float128VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -4777,0 +4812,1 @@\n+        return i - idx;\n@@ -4782,0 +4818,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4786,6 +4823,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Float128VectorTests::maskLastTrue);\n+    }\n@@ -4793,2 +4830,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -4797,0 +4837,1 @@\n+        return i - idx;\n@@ -4802,0 +4843,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4806,9 +4848,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -4817,0 +4851,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Float128VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1266,0 +1281,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -4762,0 +4782,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4765,0 +4793,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4769,6 +4798,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Float256VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -4777,0 +4812,1 @@\n+        return i - idx;\n@@ -4782,0 +4818,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4786,6 +4823,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Float256VectorTests::maskLastTrue);\n+    }\n@@ -4793,2 +4830,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -4797,0 +4837,1 @@\n+        return i - idx;\n@@ -4802,0 +4843,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4806,9 +4848,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -4817,0 +4851,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Float256VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1266,0 +1281,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -4762,0 +4782,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4765,0 +4793,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4769,6 +4798,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Float512VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -4777,0 +4812,1 @@\n+        return i - idx;\n@@ -4782,0 +4818,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4786,6 +4823,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Float512VectorTests::maskLastTrue);\n+    }\n@@ -4793,2 +4830,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -4797,0 +4837,1 @@\n+        return i - idx;\n@@ -4802,0 +4843,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4806,9 +4848,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -4817,0 +4851,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Float512VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1266,0 +1281,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -4762,0 +4782,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4765,0 +4793,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4769,6 +4798,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Float64VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -4777,0 +4812,1 @@\n+        return i - idx;\n@@ -4782,0 +4818,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4786,6 +4823,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Float64VectorTests::maskLastTrue);\n+    }\n@@ -4793,2 +4830,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -4797,0 +4837,1 @@\n+        return i - idx;\n@@ -4802,0 +4843,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4806,9 +4848,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -4817,0 +4851,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Float64VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -219,0 +219,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1271,0 +1286,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -4767,0 +4787,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -4770,0 +4798,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4774,6 +4803,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, FloatMaxVectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -4782,0 +4817,1 @@\n+        return i - idx;\n@@ -4787,0 +4823,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4791,6 +4828,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, FloatMaxVectorTests::maskLastTrue);\n+    }\n@@ -4798,2 +4835,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -4802,0 +4842,1 @@\n+        return i - idx;\n@@ -4807,0 +4848,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -4811,9 +4853,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -4822,0 +4856,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, FloatMaxVectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1080,0 +1095,1 @@\n+\n@@ -5187,0 +5203,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5190,0 +5214,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -5194,6 +5219,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Int128VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5202,0 +5233,1 @@\n+        return i - idx;\n@@ -5207,0 +5239,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -5211,6 +5244,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Int128VectorTests::maskLastTrue);\n+    }\n@@ -5218,2 +5251,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5222,0 +5258,1 @@\n+        return i - idx;\n@@ -5227,0 +5264,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -5231,9 +5269,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5242,0 +5272,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Int128VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":55,"deletions":23,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1080,0 +1095,1 @@\n+\n@@ -5187,0 +5203,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5190,0 +5214,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -5194,6 +5219,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Int256VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5202,0 +5233,1 @@\n+        return i - idx;\n@@ -5207,0 +5239,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -5211,6 +5244,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Int256VectorTests::maskLastTrue);\n+    }\n@@ -5218,2 +5251,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5222,0 +5258,1 @@\n+        return i - idx;\n@@ -5227,0 +5264,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -5231,9 +5269,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5242,0 +5272,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Int256VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":55,"deletions":23,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1080,0 +1095,1 @@\n+\n@@ -5187,0 +5203,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5190,0 +5214,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -5194,6 +5219,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Int512VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5202,0 +5233,1 @@\n+        return i - idx;\n@@ -5207,0 +5239,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -5211,6 +5244,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Int512VectorTests::maskLastTrue);\n+    }\n@@ -5218,2 +5251,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5222,0 +5258,1 @@\n+        return i - idx;\n@@ -5227,0 +5264,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -5231,9 +5269,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5242,0 +5272,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Int512VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":55,"deletions":23,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1080,0 +1095,1 @@\n+\n@@ -5187,0 +5203,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5190,0 +5214,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -5194,6 +5219,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Int64VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5202,0 +5233,1 @@\n+        return i - idx;\n@@ -5207,0 +5239,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -5211,6 +5244,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Int64VectorTests::maskLastTrue);\n+    }\n@@ -5218,2 +5251,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5222,0 +5258,1 @@\n+        return i - idx;\n@@ -5227,0 +5264,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -5231,9 +5269,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5242,0 +5272,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Int64VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":55,"deletions":23,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -219,0 +219,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1085,0 +1100,1 @@\n+\n@@ -5192,0 +5208,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5195,0 +5219,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -5199,6 +5224,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, IntMaxVectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5207,0 +5238,1 @@\n+        return i - idx;\n@@ -5212,0 +5244,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -5216,6 +5249,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, IntMaxVectorTests::maskLastTrue);\n+    }\n@@ -5223,2 +5256,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5227,0 +5263,1 @@\n+        return i - idx;\n@@ -5232,0 +5269,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -5236,9 +5274,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5247,0 +5277,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, IntMaxVectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":55,"deletions":23,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -171,0 +171,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1106,0 +1121,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -5071,0 +5091,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5074,0 +5102,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5078,6 +5107,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Long128VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5086,0 +5121,1 @@\n+        return i - idx;\n@@ -5091,0 +5127,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5095,6 +5132,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Long128VectorTests::maskLastTrue);\n+    }\n@@ -5102,2 +5139,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5106,0 +5146,1 @@\n+        return i - idx;\n@@ -5111,0 +5152,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5115,9 +5157,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5126,0 +5160,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Long128VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -171,0 +171,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1106,0 +1121,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -5071,0 +5091,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5074,0 +5102,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5078,6 +5107,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Long256VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5086,0 +5121,1 @@\n+        return i - idx;\n@@ -5091,0 +5127,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5095,6 +5132,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Long256VectorTests::maskLastTrue);\n+    }\n@@ -5102,2 +5139,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5106,0 +5146,1 @@\n+        return i - idx;\n@@ -5111,0 +5152,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5115,9 +5157,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5126,0 +5160,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Long256VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -171,0 +171,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1106,0 +1121,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -5071,0 +5091,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5074,0 +5102,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5078,6 +5107,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Long512VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5086,0 +5121,1 @@\n+        return i - idx;\n@@ -5091,0 +5127,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5095,6 +5132,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Long512VectorTests::maskLastTrue);\n+    }\n@@ -5102,2 +5139,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5106,0 +5146,1 @@\n+        return i - idx;\n@@ -5111,0 +5152,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5115,9 +5157,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5126,0 +5160,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Long512VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -171,0 +171,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1106,0 +1121,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -5071,0 +5091,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5074,0 +5102,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5078,6 +5107,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Long64VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5086,0 +5121,1 @@\n+        return i - idx;\n@@ -5091,0 +5127,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5095,6 +5132,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Long64VectorTests::maskLastTrue);\n+    }\n@@ -5102,2 +5139,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5106,0 +5146,1 @@\n+        return i - idx;\n@@ -5111,0 +5152,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5115,9 +5157,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5126,0 +5160,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Long64VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -176,0 +176,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1111,0 +1126,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -5076,0 +5096,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5079,0 +5107,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5083,6 +5112,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, LongMaxVectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5091,0 +5126,1 @@\n+        return i - idx;\n@@ -5096,0 +5132,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5100,6 +5137,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, LongMaxVectorTests::maskLastTrue);\n+    }\n@@ -5107,2 +5144,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5111,0 +5151,1 @@\n+        return i - idx;\n@@ -5116,0 +5157,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5120,9 +5162,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5131,0 +5165,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, LongMaxVectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1110,0 +1125,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -5212,0 +5232,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5215,0 +5243,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5219,6 +5248,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Short128VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5227,0 +5262,1 @@\n+        return i - idx;\n@@ -5232,0 +5268,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5236,6 +5273,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Short128VectorTests::maskLastTrue);\n+    }\n@@ -5243,2 +5280,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5247,0 +5287,1 @@\n+        return i - idx;\n@@ -5252,0 +5293,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5256,9 +5298,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5267,0 +5301,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Short128VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1110,0 +1125,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -5212,0 +5232,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5215,0 +5243,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5219,6 +5248,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Short256VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5227,0 +5262,1 @@\n+        return i - idx;\n@@ -5232,0 +5268,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5236,6 +5273,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Short256VectorTests::maskLastTrue);\n+    }\n@@ -5243,2 +5280,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5247,0 +5287,1 @@\n+        return i - idx;\n@@ -5252,0 +5293,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5256,9 +5298,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5267,0 +5301,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Short256VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1110,0 +1125,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -5212,0 +5232,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5215,0 +5243,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5219,6 +5248,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Short512VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5227,0 +5262,1 @@\n+        return i - idx;\n@@ -5232,0 +5268,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5236,6 +5273,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Short512VectorTests::maskLastTrue);\n+    }\n@@ -5243,2 +5280,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5247,0 +5287,1 @@\n+        return i - idx;\n@@ -5252,0 +5293,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5256,9 +5298,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5267,0 +5301,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Short512VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1110,0 +1125,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -5212,0 +5232,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5215,0 +5243,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5219,6 +5248,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Short64VectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5227,0 +5262,1 @@\n+        return i - idx;\n@@ -5232,0 +5268,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5236,6 +5273,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, Short64VectorTests::maskLastTrue);\n+    }\n@@ -5243,2 +5280,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5247,0 +5287,1 @@\n+        return i - idx;\n@@ -5252,0 +5293,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5256,9 +5298,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5267,0 +5301,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, Short64VectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -219,0 +219,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1115,0 +1130,5 @@\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+\n@@ -5217,0 +5237,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -5220,0 +5248,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5224,6 +5253,12 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, ShortMaxVectorTests::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n@@ -5232,0 +5267,1 @@\n+        return i - idx;\n@@ -5237,0 +5273,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5241,6 +5278,6 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n+                r[i] = vmask.lastTrue();\n+            }\n+        }\n+\n+        assertMaskReductionArraysEquals(r, a, ShortMaxVectorTests::maskLastTrue);\n+    }\n@@ -5248,2 +5285,5 @@\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n@@ -5252,0 +5292,1 @@\n+        return i - idx;\n@@ -5257,0 +5298,1 @@\n+        int[] r = ifr.apply(SPECIES.length());\n@@ -5261,9 +5303,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -5272,0 +5306,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, ShortMaxVectorTests::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":59,"deletions":23,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -414,0 +414,8 @@\n+    static int maskTrueCount(boolean[] a, int idx) {\n+        int trueCount = 0;\n+        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+            trueCount += a[i] ? 1 : 0;\n+        }\n+        return trueCount;\n+    }\n+\n@@ -417,0 +425,5 @@\n+#if[Int]\n+        int[] r = fr.apply(SPECIES.length());\n+#else[Int]\n+        int[] r = ifr.apply(SPECIES.length());\n+#end[Int]\n@@ -421,6 +434,1 @@\n-                int tcount = vmask.trueCount();\n-                int expectedTcount = 0;\n-                for (int j = i; j < i + SPECIES.length(); j++) {\n-                    expectedTcount += a[j] ? 1 : 0;\n-                }\n-                Assert.assertTrue(tcount == expectedTcount, \"at index \" + i + \", trueCount should be = \" + expectedTcount + \", but is = \" + tcount);\n+                r[i] = vmask.trueCount();\n@@ -429,0 +437,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, $vectorteststype$::maskTrueCount);\n+    }\n+\n+    static int maskLastTrue(boolean[] a, int idx) {\n+        int i = idx + SPECIES.length() - 1;\n+        for (; i >= idx; i--) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -434,0 +454,5 @@\n+#if[Int]\n+        int[] r = fr.apply(SPECIES.length());\n+#else[Int]\n+        int[] r = ifr.apply(SPECIES.length());\n+#end[Int]\n@@ -438,9 +463,1 @@\n-                int ltrue = vmask.lastTrue();\n-                int j = i + SPECIES.length() - 1;\n-                for (; j >= i; j--) {\n-                    if (a[j]) break;\n-                }\n-                int expectedLtrue = j - i;\n-\n-                Assert.assertTrue(ltrue == expectedLtrue, \"at index \" + i +\n-                    \", lastTrue should be = \" + expectedLtrue + \", but is = \" + ltrue);\n+                r[i] = vmask.lastTrue();\n@@ -449,0 +466,12 @@\n+\n+        assertMaskReductionArraysEquals(r, a, $vectorteststype$::maskLastTrue);\n+    }\n+\n+    static int maskFirstTrue(boolean[] a, int idx) {\n+        int i = idx;\n+        for (; i < idx + SPECIES.length(); i++) {\n+            if (a[i]) {\n+                break;\n+            }\n+        }\n+        return i - idx;\n@@ -454,0 +483,5 @@\n+#if[Int]\n+        int[] r = fr.apply(SPECIES.length());\n+#else[Int]\n+        int[] r = ifr.apply(SPECIES.length());\n+#end[Int]\n@@ -458,9 +492,1 @@\n-                int ftrue = vmask.firstTrue();\n-                int j = i;\n-                for (; j < i + SPECIES.length() ; j++) {\n-                    if (a[j]) break;\n-                }\n-                int expectedFtrue = j - i;\n-\n-                Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n-                    \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+                r[i] = vmask.firstTrue();\n@@ -469,0 +495,2 @@\n+\n+        assertMaskReductionArraysEquals(r, a, $vectorteststype$::maskFirstTrue);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Miscellaneous.template","additions":52,"deletions":24,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -245,0 +245,15 @@\n+    interface FMaskReductionOp {\n+        int apply(boolean[] a, int idx);\n+    }\n+\n+    static void assertMaskReductionArraysEquals(int[] r, boolean[] a, FMaskReductionOp f) {\n+        int i = 0;\n+        try {\n+            for (; i < a.length; i += SPECIES.length()) {\n+                Assert.assertEquals(r[i], f.apply(a, i));\n+            }\n+        } catch (AssertionError e) {\n+            Assert.assertEquals(r[i], f.apply(a, i), \"at index #\" + i);\n+        }\n+    }\n+\n@@ -1348,0 +1363,7 @@\n+#if[!Int]\n+    static final IntFunction<int[]> ifr = (vl) -> {\n+        int length = BUFFER_REPS * vl;\n+        return new int[length];\n+    };\n+#end[!Int]\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}