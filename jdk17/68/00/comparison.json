{"files":[{"patch":"@@ -563,1 +563,2 @@\n-            log.noticeUsingKey(\"main.done_in\", Long.toString(elapsedMillis));\n+            JavadocLog.printRawLines(log.getDiagnosticWriter(),\n+                    log.getText(\"main.done_in\", Long.toString(elapsedMillis)));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/Start.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -202,1 +202,1 @@\n-        log.noticeUsingKey(key);\n+        JavadocLog.printRawLines(log.getDiagnosticWriter(), log.getText(key));\n@@ -215,1 +215,1 @@\n-        log.noticeUsingKey(key, a1);\n+        JavadocLog.printRawLines(log.getDiagnosticWriter(), log.getText(key, a1));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/ToolEnvironment.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-        if (!out.contains(\"Loading\")) {\n+        if (!err.contains(\"Loading\")) {\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/ToolProviderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-        String stdOut = javadoc(defaultLocale,\n+        String stdErr = javadoc(defaultLocale,\n@@ -164,1 +164,1 @@\n-                .getOutput(Task.OutputKind.STDOUT);\n+                .getOutput(Task.OutputKind.STDERR);\n@@ -168,1 +168,1 @@\n-            checkContains(stdOut,\n+            checkContains(stdErr,\n@@ -173,1 +173,1 @@\n-            checkContains(stdOut,\n+            checkContains(stdErr,\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/testLocaleOption\/TestLocaleOption.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8268774\n+ * @summary  Residual logging output written to STDOUT, not STDERR\n+ * @library  \/tools\/lib ..\/..\/lib\n+ * @modules  jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build    toolbox.ToolBox javadoc.tester.*\n+ * @run main TestToolStreams\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+\/\/ See also TestReporterStreams for testing doclet\/reporter use of streams\n+public class TestToolStreams extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        TestToolStreams tester = new TestToolStreams();\n+        tester.runTests(m -> new Object[]{Path.of(m.getName())});\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    TestToolStreams() throws IOException {\n+        tb.writeJavaFiles(Path.of(\"src\"),\n+               \"\"\"\n+                    package p1;\n+                    \/** Comment 1. *\/\n+                    public class C1 { }\"\"\",\n+                \"\"\"\n+                    package p2;\n+                    \/** Comment 2. *\/\n+                    public class C2 { }\"\"\");\n+    }\n+\n+    \/**\n+     * Tests the entry point used by the DocumentationTool API and JavadocTester, in which\n+     * all output is written to a single specified writer.\n+     *\/\n+    @Test\n+    public void testSingleStream(Path base) {\n+        test(base, false, Output.OUT, Output.OUT);\n+    }\n+\n+    \/**\n+     * Tests the entry point used by the launcher, in which output is written to\n+     * writers that wrap {@code System.out} and {@code System.err}.\n+     *\/\n+    @Test\n+    public void testStandardStreams(Path base) {\n+        test(base, true, Output.STDOUT, Output.STDERR);\n+    }\n+\n+    void test(Path base, boolean useStdStreams, Output stdOut, Output stdErr) {\n+        setOutputDirectoryCheck(DirectoryCheck.NONE);\n+        setUseStandardStreams(useStdStreams);\n+\n+        javadoc(\"--help\");\n+        checkExit(Exit.OK);\n+\n+        if (stdOut != stdErr) {\n+            checkIsEmpty(stdErr);\n+        }\n+\n+        checkOutput(stdOut, true,\n+                \"Usage:\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", \"src\",\n+                \"-verbose\", \/\/ Note: triggers lots of javac messages as well as the javadoc time-taken message\n+                \"p1\",\n+                Path.of(\"src\").resolve(\"p2\").resolve(\"C2.java\").toString());\n+        checkExit(Exit.OK);\n+\n+        if (stdOut != stdErr) {\n+            checkIsEmpty(stdOut);\n+        }\n+\n+        checkOutput(stdErr, true,\n+                \"Loading source file src\/p2\/C2.java...\".replace(\"\/\", FS),\n+                \"Loading source files for package p1...\",\n+                \"Constructing Javadoc information\",\n+                \"[done in \", \" ms]\"\n+                );\n+    }\n+\n+    void checkIsEmpty(Output out) {\n+        checking(\"no output to \" + out);\n+        String s = getOutput(out);\n+        if (s.isEmpty()) {\n+            passed(\"no output written to \" + out);\n+        } else {\n+            failed(out + \" is not empty\");\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/testToolStreams\/TestToolStreams.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"}]}