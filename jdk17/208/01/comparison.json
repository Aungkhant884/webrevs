{"files":[{"patch":"@@ -1216,2 +1216,2 @@\n-  \/\/ For the main loop, the opaque node is the second input to zer_cmp, for the post loop it's the first input node\n-  Node* zer_opaq = zer_cmp->in(is_main_loop ? 2 : 1);\n+  \/\/ For the main loop, the opaque node might at any input to zer_cmp, for the post loop it's the first input node\n+  Node* zer_opaq = is_main_loop ? get_opaque_from_cmp(zer_cmp) : zer_cmp->in(1);\n@@ -1992,1 +1992,2 @@\n-    opaq = loop_head->skip_predicates()->in(0)->in(1)->in(1)->in(2);\n+    Node *cmp = loop_head->skip_predicates()->in(0)->in(1)->in(1);\n+    opaq = get_opaque_from_cmp(cmp);\n@@ -2614,1 +2615,2 @@\n-  Node *opqzm = iffm->in(1)->in(1)->in(2);\n+  Node *cmpzm = iffm->in(1)->in(1);\n+  Node *opqzm = get_opaque_from_cmp(cmpzm);\n@@ -3145,1 +3147,2 @@\n-  if (pre_cmp->in(2)->Opcode() != Op_Opaque1) {\n+  Node* pre_cmp_opaq = PhaseIdealLoop::get_opaque_from_cmp(pre_cmp);\n+  if (pre_cmp_opaq != NULL) {\n@@ -3170,1 +3173,1 @@\n-  phase->_igvn.replace_input_of(pre_cmp, 2, pre_cmp->in(2)->in(2));\n+  phase->_igvn.replace_input_of(pre_cmp, pre_cmp->in(1) == pre_cmp_opaq ? 1 : 2, pre_cmp_opaq->in(2));\n@@ -3173,2 +3176,3 @@\n-  assert(main_cmp->in(2)->Opcode() == Op_Opaque1, \"main loop has no opaque node?\");\n-  phase->_igvn.replace_input_of(main_cmp, 2, main_cmp->in(2)->in(1));\n+  Node* opaq = PhaseIdealLoop::get_opaque_from_cmp(main_cmp);\n+  assert(opaq != NULL, \"main loop has no opaque node?\");\n+  phase->_igvn.replace_input_of(main_cmp, main_cmp->in(1) == opaq ? 1 : 2, opaq->in(1));\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -4944,0 +4944,7 @@\n+  if (get_opaque_from_cmp(cmpzm) == NULL) {\n+    return false;\n+  }\n+  return true;\n+}\n+\n+Node* PhaseIdealLoop::get_opaque_from_cmp(Node* cmp) {\n@@ -4945,3 +4952,2 @@\n-  bool found_opaque = false;\n-  for (uint i = 1; i < cmpzm->req(); i++) {\n-    Node* opnd = cmpzm->in(i);\n+  for (uint i = 1; i < cmp->req(); i++) {\n+    Node* opnd = cmp->in(i);\n@@ -4949,2 +4955,1 @@\n-      found_opaque = true;\n-      break;\n+      return opnd;\n@@ -4953,4 +4958,1 @@\n-  if (!found_opaque) {\n-    return false;\n-  }\n-  return true;\n+  return NULL;\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -935,0 +935,1 @@\n+  static Node* get_opaque_from_cmp(Node* cmp);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8269820\n+ * @requires vm.compiler2.enabled\n+ * @summary oqaue node in canonical_loop_entry's input chain is not fixed at\n+ *          compare node's in(2).\n+ * @run main\/othervm -Xbatch -XX:-TieredCompilation compiler.loopopts.TestCanonicalLoopEntryOpaqueOrder\n+ *\/\n+\n+package compiler.loopopts;\n+public class TestCanonicalLoopEntryOpaqueOrder {\n+    static void test() {\n+        int ina8[] = new int[1478];\n+        int in2 = 136;\n+        long lo3 = 0L;\n+        try {\n+            for (int i = 0; i < 34; i++) {\n+                Math.log1p(1);\n+            }\n+        } catch (Exception e) {\n+            in2 = 1;\n+        }\n+\n+        for (int i = 0; i < in2; i++) {\n+            if (in2 > 10) {  \/\/ split if and create wrong opaque order\n+                for (int j = 0; j < in2; j++) {\n+                    lo3 -= 1L;\n+                }\n+            }\n+        }\n+    }\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10000; i++) {\n+            test();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestCanonicalLoopEntryOpaqueOrder.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}