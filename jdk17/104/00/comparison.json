{"files":[{"patch":"@@ -27,0 +27,1 @@\n+ * @modules java.base\/jdk.internal.misc\n@@ -31,1 +32,2 @@\n- * @library \/test\/lib\n+ * @library \/vmTestbase\n+ *          \/test\/lib\n@@ -33,1 +35,6 @@\n- * @run driver vm.mlvm.anonloader.stress.oome.metaspace.Test\n+ * @comment build test class and indify classes\n+ * @build vm.mlvm.anonloader.stress.oome.metaspace.Test\n+ * @run driver vm.mlvm.share.IndifiedClassesBuilder\n+ *\n+ * @run main\/othervm -XX:MaxRAMPercentage=25 -XX:-UseGCOverheadLimit -XX:MetaspaceSize=10m\n+ *                   -XX:MaxMetaspaceSize=20m vm.mlvm.anonloader.stress.oome.metaspace.Test\n@@ -38,10 +45,4 @@\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class Test {\n-\n-    public static void main(String[] args) throws Exception {\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-            \"-Xshare:off\", \"-XX:MaxMetaspaceSize=512k\", \"-version\");\n-\n-        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodHandles.Lookup;\n+import java.util.List;\n+import java.io.IOException;\n@@ -49,1 +50,5 @@\n-        analyzer.shouldNotHaveExitValue(0);\n+import vm.mlvm.anonloader.share.AnonkTestee01;\n+import vm.mlvm.share.MlvmOOMTest;\n+import vm.mlvm.share.MlvmTestExecutor;\n+import vm.mlvm.share.Env;\n+import vm.share.FileUtils;\n@@ -51,2 +56,11 @@\n-        if (!analyzer.getStdout().contains(\"OutOfMemoryError\")) {\n-            throw new RuntimeException(\"TEST FAIL : no OOME\");\n+\/**\n+ * This test loads classes using defineHiddenClass and stores them,\n+ * expecting Metaspace OOME.\n+ *\n+ *\/\n+public class Test extends MlvmOOMTest {\n+    @Override\n+    protected void checkOOME(OutOfMemoryError oome) {\n+        String message = oome.getMessage();\n+        if (!\"Metaspace\".equals(message) && !\"Compressed class space\".equals(message)) {\n+            throw new RuntimeException(\"TEST FAIL : wrong OOME\", oome);\n@@ -54,0 +68,1 @@\n+    }\n@@ -55,3 +70,7 @@\n-        if (!analyzer.getStdout().contains(\"Metaspace\") &&\n-            !analyzer.getStdout().contains(\"Compressed class space\")) {\n-            throw new RuntimeException(\"TEST FAIL : wrong OOME\");\n+    @Override\n+    protected void eatMemory(List<Object> list) {\n+        byte[] classBytes = null;\n+        try {\n+            classBytes = FileUtils.readClass(AnonkTestee01.class.getName());\n+        } catch (IOException e) {\n+            Env.throwAsUncheckedException(e);\n@@ -59,0 +78,10 @@\n+        try {\n+            while (true) {\n+                Lookup lookup = MethodHandles.lookup();\n+                Lookup ank_lookup = MethodHandles.privateLookupIn(AnonkTestee01.class, lookup);\n+                Class<?> c = ank_lookup.defineHiddenClass(classBytes, true).lookupClass();\n+                list.add(c.newInstance());\n+             }\n+         } catch (InstantiationException | IllegalAccessException e) {\n+             Env.throwAsUncheckedException(e);\n+         }\n@@ -61,0 +90,3 @@\n+    public static void main(String[] args) {\n+        MlvmTestExecutor.launch(args);\n+    }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/oome\/metaspace\/Test.java","additions":50,"deletions":18,"binary":false,"changes":68,"status":"modified"}]}