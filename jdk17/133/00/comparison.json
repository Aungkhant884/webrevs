{"files":[{"patch":"@@ -952,0 +952,3 @@\n+            lca = place_outside_loop(lca, n_loop);\n+            assert(!n_loop->is_member(get_loop(lca)), \"control must not be back in of loop\");\n+            assert(get_loop(lca)->_nest < n_loop->_nest || lca->in(0)->Opcode() == Op_NeverBranch, \"must not be moved into inner loop\");\n@@ -1150,1 +1153,3 @@\n-    if (loop->is_member(get_loop(dom))) {\n+    if (loop->is_member(get_loop(dom)) ||\n+        \/\/ NeverBranch nodes are not assigned to the loop when constructed\n+        (dom->Opcode() == Op_NeverBranch && loop->is_member(get_loop(dom->in(0))))) {\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8269088\n+ * @summary C2 fails with assert(!n->is_Store() && !n->is_LoadStore()) failed: no node with a side effect\n+ *\n+ * @requires vm.gc.Serial\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestStoreSunkInInnerLoop -XX:CompileCommand=quiet -XX:+UseSerialGC -Xmx256m TestStoreSunkInInnerLoop\n+ *\n+ *\/\n+\n+public class TestStoreSunkInInnerLoop {\n+\n+    public static final int N = 400;\n+\n+    public static int iFld=-10622;\n+    public static long lArrFld[]=new long[N];\n+    public float fArrFld[][]=new float[N][N];\n+\n+    public void mainTest() {\n+\n+        int i8=-10584, i10=37284, i11=38, i13=-238, i14=-18473, i15=-53564;\n+        boolean b1=false;\n+\n+        TestStoreSunkInInnerLoop.iFld -= TestStoreSunkInInnerLoop.iFld;\n+        for (i8 = 224; i8 > 7; i8 -= 2) {\n+            i10 = 1;\n+            while (++i10 < 232) {\n+                TestStoreSunkInInnerLoop.iFld += i8;\n+            }\n+            for (i11 = 8; i11 < 232; ++i11) {\n+                if (b1) continue;\n+                TestStoreSunkInInnerLoop.lArrFld[i11] += i10;\n+            }\n+        }\n+        i13 = 1;\n+        do {\n+            switch ((i13 % 2) + 126) {\n+            case 126:\n+                for (i14 = 102; i14 > 2; i14 -= 3) {\n+                    fArrFld[i13][(-126 >>> 1) % N] -= i15;\n+                }\n+                break;\n+            case 127:\n+                i15 = (i13 % i10);\n+                break;\n+            default:\n+            }\n+        } while (++i13 < 247);\n+    }\n+\n+    public static void main(String[] strArr) {\n+        TestStoreSunkInInnerLoop _instance = new TestStoreSunkInInnerLoop();\n+        for (int i = 0; i < 10; i++ ) {\n+            _instance.mainTest();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestStoreSunkInInnerLoop.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"}]}