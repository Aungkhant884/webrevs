{"files":[{"patch":"@@ -69,1 +69,1 @@\n-     * @throws NullPointerException if any parameter is null\n+     * @throws NullPointerException if any parameter or its contents are {@code null}\n@@ -82,0 +82,3 @@\n+        for (int i = 0; i < this.bootstrapArgs.length; i++) {\n+            requireNonNull(this.bootstrapArgs[i]);\n+        }\n@@ -100,1 +103,1 @@\n-     * @throws NullPointerException if any parameter is null\n+     * @throws NullPointerException if any parameter or its contents are {@code null}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/DynamicCallSiteDesc.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,207 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.invoke.MethodType;\n+import java.lang.constant.*;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import org.testng.annotations.Test;\n+\n+import static java.lang.constant.ConstantDescs.CD_int;\n+import static java.lang.constant.ConstantDescs.CD_void;\n+import static java.util.stream.Collectors.joining;\n+import static java.util.stream.Collectors.toList;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+\/**\n+ * @test\n+ * @compile DynamicCallSiteDescTest.java\n+ * @run testng DynamicCallSiteDescTest\n+ * @summary unit tests for java.lang.constant.DynamicCallSiteDesc\n+ *\/\n+\n+@Test\n+public class DynamicCallSiteDescTest extends SymbolicDescTest {\n+    \/* note there is no unit test for method resolveCallSiteDesc as it is being tested in another test in this\n+     * suite, IndyDescTest\n+     *\/\n+\n+    public void testOf() throws ReflectiveOperationException {\n+        try {\n+            DynamicCallSiteDesc.of(\n+                    ConstantDescs.ofCallsiteBootstrap(\n+                            ClassDesc.of(\"BootstrapAndTarget\"),\n+                            \"bootstrap\",\n+                            ClassDesc.of(\"java.lang.invoke.CallSite\")\n+                    ),\n+                    \"\",\n+                    MethodTypeDesc.ofDescriptor(\"()I\")\n+            );\n+            throw new AssertionError(\"IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException iae) {\n+            \/\/ good\n+        }\n+\n+        try {\n+            DynamicCallSiteDesc.of(\n+                    null,\n+                    \"getTarget\",\n+                    MethodTypeDesc.ofDescriptor(\"()I\")\n+            );\n+            throw new AssertionError(\"NullPointerException expected\");\n+        } catch (NullPointerException npe) {\n+            \/\/ good\n+        }\n+\n+        try {\n+            DynamicCallSiteDesc.of(\n+                    ConstantDescs.ofCallsiteBootstrap(\n+                            ClassDesc.of(\"BootstrapAndTarget\"),\n+                            \"bootstrap\",\n+                            ClassDesc.of(\"java.lang.invoke.CallSite\")\n+                    ),\n+                    null,\n+                    MethodTypeDesc.ofDescriptor(\"()I\")\n+            );\n+            throw new AssertionError(\"NullPointerException expected\");\n+        } catch (NullPointerException npe) {\n+            \/\/ good\n+        }\n+\n+        try {\n+            DynamicCallSiteDesc.of(\n+                    ConstantDescs.ofCallsiteBootstrap(\n+                            ClassDesc.of(\"BootstrapAndTarget\"),\n+                            \"bootstrap\",\n+                            ClassDesc.of(\"java.lang.invoke.CallSite\")\n+                    ),\n+                    \"getTarget\",\n+                    null\n+            );\n+            throw new AssertionError(\"NullPointerException expected\");\n+        } catch (NullPointerException npe) {\n+            \/\/ good\n+        }\n+\n+        try {\n+            DynamicCallSiteDesc.of(\n+                    ConstantDescs.ofCallsiteBootstrap(\n+                            ClassDesc.of(\"BootstrapAndTarget\"),\n+                            \"bootstrap\",\n+                            ClassDesc.of(\"java.lang.invoke.CallSite\")\n+                    ),\n+                    \"getTarget\",\n+                    MethodTypeDesc.ofDescriptor(\"()I\"),\n+                    null\n+            );\n+            throw new AssertionError(\"NullPointerException expected\");\n+        } catch (NullPointerException npe) {\n+            \/\/ good\n+        }\n+        try {\n+            DynamicCallSiteDesc.of(\n+                    ConstantDescs.ofCallsiteBootstrap(\n+                            ClassDesc.of(\"BootstrapAndTarget\"),\n+                            \"bootstrap\",\n+                            ClassDesc.of(\"java.lang.invoke.CallSite\")\n+                    ),\n+                    \"getTarget\",\n+                    MethodTypeDesc.ofDescriptor(\"()I\"),\n+                    new ConstantDesc[]{ null }\n+            );\n+            throw new AssertionError(\"NullPointerException expected\");\n+        } catch (NullPointerException npe) {\n+            \/\/ good\n+        }\n+    }\n+\n+    public void testWithArgs() throws ReflectiveOperationException {\n+        DynamicCallSiteDesc desc = DynamicCallSiteDesc.of(ConstantDescs.ofCallsiteBootstrap(\n+                ClassDesc.of(\"BootstrapAndTarget\"),\n+                \"bootstrap\",\n+                ClassDesc.of(\"java.lang.invoke.CallSite\")\n+            ),\n+            \"getTarget\",\n+            MethodTypeDesc.ofDescriptor(\"()I\")\n+        );\n+\n+        try {\n+            desc.withArgs(null);\n+            throw new AssertionError(\"NullPointerException expected\");\n+        } catch (NullPointerException npe) {\n+            \/\/ good\n+        }\n+\n+        try {\n+            desc.withArgs(new ConstantDesc[]{ null });\n+            throw new AssertionError(\"NullPointerException expected\");\n+        } catch (NullPointerException npe) {\n+            \/\/ good\n+        }\n+    }\n+\n+    public void testWithNameAndType() throws ReflectiveOperationException {\n+        DynamicCallSiteDesc desc = DynamicCallSiteDesc.of(ConstantDescs.ofCallsiteBootstrap(\n+                ClassDesc.of(\"BootstrapAndTarget\"),\n+                \"bootstrap\",\n+                ClassDesc.of(\"java.lang.invoke.CallSite\")\n+                ),\n+                \"getTarget\",\n+                MethodTypeDesc.ofDescriptor(\"()I\")\n+        );\n+\n+        try {\n+            desc.withNameAndType(null, MethodTypeDesc.ofDescriptor(\"()I\"));\n+            throw new AssertionError(\"NullPointerException expected\");\n+        } catch (NullPointerException npe) {\n+            \/\/ good\n+        }\n+\n+        try {\n+            desc.withNameAndType(\"bootstrap\", null);\n+            throw new AssertionError(\"NullPointerException expected\");\n+        } catch (NullPointerException npe) {\n+            \/\/ good\n+        }\n+    }\n+\n+    public void testAccessorsAndFactories() throws ReflectiveOperationException {\n+        DynamicCallSiteDesc desc = DynamicCallSiteDesc.of(ConstantDescs.ofCallsiteBootstrap(\n+                ClassDesc.of(\"BootstrapAndTarget\"),\n+                \"bootstrap\",\n+                ClassDesc.of(\"java.lang.invoke.CallSite\")\n+                ),\n+                \"_\",\n+                MethodTypeDesc.ofDescriptor(\"()I\")\n+        );\n+        assertEquals(desc, DynamicCallSiteDesc.of((DirectMethodHandleDesc)desc.bootstrapMethod(), desc.invocationType()));\n+        assertEquals(desc, DynamicCallSiteDesc.of((DirectMethodHandleDesc)desc.bootstrapMethod(),\n+                desc.invocationName(), desc.invocationType()));\n+        assertEquals(desc, DynamicCallSiteDesc.of((DirectMethodHandleDesc)desc.bootstrapMethod(),\n+                desc.invocationName(), desc.invocationType(), desc.bootstrapArgs()));\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/constant\/DynamicCallSiteDescTest.java","additions":207,"deletions":0,"binary":false,"changes":207,"status":"added"}]}