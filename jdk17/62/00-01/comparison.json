{"files":[{"patch":"@@ -26,0 +26,1 @@\n+#import <QuartzCore\/CAMetalLayer.h>\n@@ -346,0 +347,3 @@\n+        if ([window.contentView.layer isKindOfClass:[CAMetalLayer class]]) {\n+            [window.contentView.layer setOpaque:(BOOL)opaque];\n+        }\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CWrapper.m","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-    self.opaque = FALSE;\n+    self.opaque = TRUE;\n@@ -116,2 +116,1 @@\n-\/\/#define MTL_LAYER_USE_BLIT_ENC\n-#ifdef MTL_LAYER_USE_BLIT_ENC\n+\n@@ -126,28 +125,0 @@\n-#else\n-        id<MTLCommandBuffer> cb = [ctx createCommandBuffer];\n-        id<MTLComputeCommandEncoder> computeEncoder = [cb computeCommandEncoder];\n-        id<MTLComputePipelineState> computePipelineState = [ctx.pipelineStateStorage\n-                                                            getComputePipelineState:@\"tex2tex_opaque\"];\n-        [computeEncoder setComputePipelineState:computePipelineState];\n-\n-        NSUInteger maxTotalThreadsPerThreadgroup = computePipelineState.maxTotalThreadsPerThreadgroup;\n-        NSUInteger w = computePipelineState.threadExecutionWidth;\n-\n-        \/\/ Workaround for some OS\/device bug reporting incorrect maxTotalThreadsPerThreadgroup\n-        if (maxTotalThreadsPerThreadgroup == 0) {\n-            maxTotalThreadsPerThreadgroup = 1;\n-            w = 1;\n-        }\n-\n-        NSUInteger h = maxTotalThreadsPerThreadgroup \/ w;\n-        MTLSize threadgroupSize = MTLSizeMake(w, h, 1);\n-        MTLSize threadgroupCount;\n-\n-        threadgroupCount.width  = (buffer.width - src_x + threadgroupSize.width - 1) \/ threadgroupSize.width;\n-        threadgroupCount.height = (buffer.height - src_y + threadgroupSize.height - 1) \/ threadgroupSize.height;\n-        threadgroupCount.depth = 1;\n-\n-        [computeEncoder setTexture:buffer atIndex:0];\n-        [computeEncoder setTexture:mtlDrawable.texture atIndex:1];\n-        struct InsetsUniforms uniforms = {src_x, src_y};\n-        [computeEncoder setBytes:&uniforms length:sizeof(struct InsetsUniforms) atIndex:2];\n@@ -155,5 +126,0 @@\n-        [computeEncoder dispatchThreadgroups:threadgroupCount\n-                               threadsPerThreadgroup:threadgroupSize];\n-        [computeEncoder endEncoding];\n-        [cb commit];\n-#endif\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLLayer.m","additions":2,"deletions":36,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -164,6 +164,0 @@\n-\n-struct InsetsUniforms {\n-    int left;\n-    int top;\n-};\n-\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/common.h","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -646,10 +646,0 @@\n-kernel void tex2tex_opaque(texture2d<half, access::read> inTexture [[texture(0)]],\n-    texture2d<half, access::write> outTexture [[texture(1)]],\n-    constant InsetsUniforms& uniforms [[buffer(2)]],\n-    uint2 gid [[thread_position_in_grid]])\n-{\n-    half4 inColor  = inTexture.read(uint2(gid[0] + uniforms.left, gid[1] + uniforms.top));\n-    half4 outColor = half4(inColor.rgb, 1.0);\n-    outTexture.write(outColor, gid);\n-}\n-\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/shaders.metal","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"}]}