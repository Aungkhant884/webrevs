{"files":[{"patch":"@@ -136,1 +136,0 @@\n-     * @param member the member to write parameter for.\n@@ -138,0 +137,1 @@\n+     * @param paramType the type of the parameter.\n@@ -141,2 +141,2 @@\n-    protected void addParam(ExecutableElement member, VariableElement param, TypeMirror paramType,\n-            boolean isVarArg, Content tree) {\n+    protected void addParam(VariableElement param, TypeMirror paramType, boolean isVarArg,\n+                            Content tree) {\n@@ -252,1 +252,1 @@\n-                addParam(member, param, paramType,\n+                addParam(param, paramType,\n@@ -271,1 +271,1 @@\n-            addParam(member, parameters.get(i), instMeth.getParameterTypes().get(i),\n+            addParam(parameters.get(i), instMeth.getParameterTypes().get(i),\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractExecutableMemberWriter.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-                if (!refClass.getTypeParameters().isEmpty() && seeText.contains(\"<\")) {\n+                if (seeText.contains(\"<\")) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -110,2 +110,1 @@\n-                if (linkInfo.linkToSelf ||\n-                                !(docPaths.forName(typeElement)).equals(m_writer.filename)) {\n+                if (linkInfo.linkToSelf || typeElement != m_writer.getCurrentPageElement()) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlLinkFactory.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import javax.lang.model.type.DeclaredType;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlLinkInfo.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -169,0 +169,9 @@\n+                    if (linkInfo.linkEnclosingTypes(type)) {\n+                        TypeMirror enc = type.getEnclosingType();\n+                        if (enc instanceof DeclaredType dt) {\n+                            setEnclosingTypeLinkInfo(linkInfo, dt);\n+                            visitDeclared(dt, linkInfo);\n+                            link.add(\".\");\n+                            setEnclosingTypeLinkInfo(linkInfo, type);\n+                        }\n+                    }\n@@ -198,0 +207,6 @@\n+    private void setEnclosingTypeLinkInfo(LinkInfo linkinfo, DeclaredType enclosing) {\n+        linkinfo.typeElement = null;\n+        linkinfo.label = null;\n+        linkinfo.type = enclosing;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/links\/LinkFactory.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import javax.lang.model.type.DeclaredType;\n@@ -117,0 +118,25 @@\n+    \/**\n+     * Checks whether enclosing types of inner classes should be rendered as separate\n+     * links instead of generating a single link for the class with the full class name\n+     * (including the name of the enclosing class) as link label.\n+     *\n+     * @param type the type being linked\n+     * @return true if enclosing types (and their type arguments) should be rendered as\n+     * separate links\n+     *\/\n+    public boolean linkEnclosingTypes(DeclaredType type) {\n+        \/\/ Only render enclosing types as separate links if they have type arguments that\n+        \/\/ should be linked. The rationale is that an enclosing class itself is easy to reach\n+        \/\/ from the documentation of an inner class, so rendering it as separate link would\n+        \/\/ add little benefit but add considerable noise, while type arguments may not\n+        \/\/ otherwise be reachable from the documentation of the inner class.\n+        TypeMirror enc = type.getEnclosingType();\n+        while (enc instanceof DeclaredType declaredType) {\n+            if (!declaredType.getTypeArguments().isEmpty()) {\n+                return true;\n+            }\n+            enc = declaredType.getEnclosingType();\n+        }\n+        return false;\n+    }\n+\n@@ -128,1 +154,4 @@\n-            tlabel.add(configuration.utils.getSimpleName(typeElement));\n+            tlabel.add(type instanceof DeclaredType dt && linkEnclosingTypes(dt)\n+                    \/\/ If enclosing type is rendered as separate links only use own class name\n+                    ? typeElement.getSimpleName().toString()\n+                    : configuration.utils.getSimpleName(typeElement));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/links\/LinkInfo.java","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug     8177280 8262992\n+ * @bug     8177280 8262992 8259499\n@@ -121,0 +121,23 @@\n+        checkOutput(\"pkg1\/A.Inner.html\", true,\n+                \"\"\"\n+                    <dl class=\"notes\">\n+                    <dt>See Also:<\/dt>\n+                    <dd>\n+                    <ul class=\"see-list-long\">\n+                    <li><code><a href=\"A.html\" title=\"class in pkg1\">A<\/a>&lt;<a href=\"http:\/\/exampl\\\n+                    e.com\/docs\/api\/java.base\/java\/lang\/String.html\" title=\"class or interface in jav\\\n+                    a.lang\" class=\"external-link\">String<\/a>,<wbr><a href=\"http:\/\/example.com\/docs\/a\\\n+                    pi\/java.base\/java\/lang\/RuntimeException.html\" title=\"class or interface in java.\\\n+                    lang\" class=\"external-link\">RuntimeException<\/a>&gt;.<a href=\"A.Inner.html\" titl\\\n+                    e=\"class in pkg1\">Inner<\/a><\/code><\/li>\n+                    <li><code><a href=\"A.html\" title=\"class in pkg1\">A<\/a>&lt;<a href=\"A.html\" title\\\n+                    =\"class in pkg1\">A<\/a>&lt;<a href=\"http:\/\/example.com\/docs\/api\/java.base\/java\/la\\\n+                    ng\/String.html\" title=\"class or interface in java.lang\" class=\"external-link\">St\\\n+                    ring<\/a>,<wbr><a href=\"http:\/\/example.com\/docs\/api\/java.base\/java\/lang\/RuntimeEx\\\n+                    ception.html\" title=\"class or interface in java.lang\" class=\"external-link\">Runt\\\n+                    imeException<\/a>&gt;.<a href=\"A.Inner.html\" title=\"class in pkg1\">Inner<\/a>,<wbr\\\n+                    ><a href=\"A.SomeException.html\" title=\"class in pkg1\">A.SomeException<\/a>&gt;<\/c\\\n+                    ode><\/li>\n+                    <\/ul>\n+                    <\/dd>\n+                    <\/dl>\"\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testGenericTypeLink\/TestGenericTypeLink.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,0 +63,5 @@\n+    \/**\n+     * @see A<String, java.lang.RuntimeException>.Inner\n+     * @see A<A<String, java.lang.RuntimeException>.Inner, A.SomeException>\n+     *\/\n+    class Inner {}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testGenericTypeLink\/pkg1\/A.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug      8214126 8241470\n+ * @bug      8214126 8241470 8259499\n@@ -126,1 +126,26 @@\n-                    <div class=\"block\">Generic method with eight type args and annotation.<\/div>\"\"\");\n+                    <div class=\"block\">Generic method with eight type args and annotation.<\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"member-signature\"><span class=\"modifiers\">public<\/span>&nbsp;<span c\\\n+                    lass=\"return-type\"><a href=\"C.Generic.html\" title=\"class in pkg\">C.Generic<\/a>&l\\\n+                    t;java.lang.Integer&gt;.<a href=\"C.Generic.Inner.html\" title=\"class in pkg\">Inne\\\n+                    r<\/a><\/span>&nbsp;<span class=\"element-name\">nestedGeneric1<\/span><wbr><span cla\\\n+                    ss=\"parameters\">(<a href=\"C.Generic.html\" title=\"class in pkg\">C.Generic<\/a>&lt;\\\n+                    java.lang.Integer&gt;.<a href=\"C.Generic.Inner.html\" title=\"class in pkg\">Inner<\\\n+                    \/a>&nbsp;i,\n+                     <a href=\"C.Generic.html\" title=\"class in pkg\">C.Generic<\/a>&lt;<a href=\"C.html\"\\\n+                     title=\"class in pkg\">C<\/a>&gt;.<a href=\"C.Generic.Inner.html\" title=\"class in p\\\n+                    kg\">Inner<\/a>&nbsp;j)<\/span><\/div>\"\"\",\n+                \"\"\"\n+                    <div class=\"member-signature\"><span class=\"modifiers\">public<\/span>&nbsp;<span c\\\n+                    lass=\"return-type\"><a href=\"C.Generic.html\" title=\"class in pkg\">C.Generic<\/a>&l\\\n+                    t;<a href=\"C.F0.html\" title=\"interface in pkg\">C.F0<\/a>&lt;<a href=\"C.html\" titl\\\n+                    e=\"class in pkg\">C<\/a>&gt;&gt;.<a href=\"C.Generic.Inner.html\" title=\"class in pk\\\n+                    g\">Inner<\/a>.<a href=\"C.Generic.Inner.Foo.html\" title=\"class in pkg\">Foo<\/a><\/sp\\\n+                    an>&nbsp;<span class=\"element-name\">nestedGeneric2<\/span><wbr><span class=\"param\\\n+                    eters\">(<a href=\"C.Generic.html\" title=\"class in pkg\">C.Generic<\/a>&lt;java.lang\\\n+                    .Integer&gt;.<a href=\"C.Generic.Inner.html\" title=\"class in pkg\">Inner<\/a>.<a hr\\\n+                    ef=\"C.Generic.Inner.Foo.html\" title=\"class in pkg\">Foo<\/a>&nbsp;f,\n+                     <a href=\"C.Generic.html\" title=\"class in pkg\">C.Generic<\/a>&lt;<a href=\"C.F0.ht\\\n+                    ml\" title=\"interface in pkg\">C.F0<\/a>&lt;<a href=\"C.html\" title=\"class in pkg\">C\\\n+                    <\/a>&gt;&gt;.<a href=\"C.Generic.Inner.html\" title=\"class in pkg\">Inner<\/a>.<a hr\\\n+                    ef=\"C.Generic.Inner.Foo.html\" title=\"class in pkg\">Foo<\/a>&nbsp;g)<\/span><\/div>\"\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMethodSignature\/TestMethodSignature.java","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -159,0 +159,29 @@\n+\n+    \/**\n+     * Inner classes with type arguments in enclosing classes.\n+     *\n+     * @param i param i\n+     * @param j param j\n+     * @return return value\n+     *\/\n+    public Generic<Integer>.Inner nestedGeneric1(Generic<Integer>.Inner i, Generic<C>.Inner j) { return i; }\n+\n+    \/**\n+     * Inner classes with type arguments in enclosing classes.\n+     *\n+     * @param f param f\n+     * @param g param g\n+     * @return return value\n+     *\/\n+    public Generic<C.F0<C>>.Inner.Foo nestedGeneric2(Generic<Integer>.Inner.Foo f, Generic<C.F0<C>>.Inner.Foo g) { return g; }\n+\n+    \/**\n+     * Generic class with multiple inner classes.\n+     * @param <T> type parameter\n+     *\/\n+    public static class Generic<T> {\n+        public class Inner {\n+            T data;\n+            public class Foo {}\n+        }\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMethodSignature\/pkg\/C.java","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"}]}