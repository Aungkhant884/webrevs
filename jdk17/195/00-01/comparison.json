{"files":[{"patch":"@@ -1078,7 +1078,5 @@\n-                if (seeText.contains(\"<\")) {\n-                    \/\/ If this is a generic type link try to use the TypeMirror representation.\n-                    TypeMirror refType = ch.getReferencedType(see);\n-                    if (refType != null) {\n-                        return plainOrCode(isLinkPlain, getLink(\n-                                new HtmlLinkInfo(configuration, HtmlLinkInfo.Kind.DEFAULT, refType)));\n-                    }\n+                TypeMirror referencedType = ch.getReferencedType(see);\n+                if (utils.isGenericType(referencedType)) {\n+                    \/\/ This is a generic type link, use the TypeMirror representation.\n+                    return plainOrCode(isLinkPlain, getLink(\n+                            new HtmlLinkInfo(configuration, HtmlLinkInfo.Kind.DEFAULT, referencedType)));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -195,0 +195,3 @@\n+        \/\/ Workaround for JDK-8269706\n+        if (path == null || dcTree == null || rtree == null)\n+            return null;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/CommentHelper.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -976,0 +976,15 @@\n+    \/**\n+     * Returns true if {@code type} or any of its enclosing types has non-empty type arguments.\n+     * @param type the type\n+     * @return {@code true} if type arguments were found\n+     *\/\n+    public boolean isGenericType(TypeMirror type) {\n+        while (type instanceof DeclaredType dt) {\n+            if (!dt.getTypeArguments().isEmpty()) {\n+                return true;\n+            }\n+            type = dt.getEnclosingType();\n+        }\n+        return false;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -169,8 +169,9 @@\n-                    if (linkInfo.linkEnclosingTypes(type)) {\n-                        TypeMirror enc = type.getEnclosingType();\n-                        if (enc instanceof DeclaredType dt) {\n-                            setEnclosingTypeLinkInfo(linkInfo, dt);\n-                            visitDeclared(dt, linkInfo);\n-                            link.add(\".\");\n-                            setEnclosingTypeLinkInfo(linkInfo, type);\n-                        }\n+                    TypeMirror enc = type.getEnclosingType();\n+                    if (enc instanceof DeclaredType dt && utils.isGenericType(dt)) {\n+                        \/\/ If an enclosing type has type parameters render them as separate links as\n+                        \/\/ otherwise this information is lost. On the other hand, plain enclosing types\n+                        \/\/ are not linked separately as they are easy to reach from the nested type.\n+                        setEnclosingTypeLinkInfo(linkInfo, dt);\n+                        visitDeclared(dt, linkInfo);\n+                        link.add(\".\");\n+                        setEnclosingTypeLinkInfo(linkInfo, type);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/links\/LinkFactory.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.Utils;\n@@ -118,25 +119,0 @@\n-    \/**\n-     * Checks whether enclosing types of inner classes should be rendered as separate\n-     * links instead of generating a single link for the class with the full class name\n-     * (including the name of the enclosing class) as link label.\n-     *\n-     * @param type the type being linked\n-     * @return true if enclosing types (and their type arguments) should be rendered as\n-     * separate links\n-     *\/\n-    public boolean linkEnclosingTypes(DeclaredType type) {\n-        \/\/ Only render enclosing types as separate links if they have type arguments that\n-        \/\/ should be linked. The rationale is that an enclosing class itself is easy to reach\n-        \/\/ from the documentation of an inner class, so rendering it as separate link would\n-        \/\/ add little benefit but add considerable noise, while type arguments may not\n-        \/\/ otherwise be reachable from the documentation of the inner class.\n-        TypeMirror enc = type.getEnclosingType();\n-        while (enc instanceof DeclaredType declaredType) {\n-            if (!declaredType.getTypeArguments().isEmpty()) {\n-                return true;\n-            }\n-            enc = declaredType.getEnclosingType();\n-        }\n-        return false;\n-    }\n-\n@@ -154,1 +130,2 @@\n-            tlabel.add(type instanceof DeclaredType dt && linkEnclosingTypes(dt)\n+            Utils utils = configuration.utils;\n+            tlabel.add(type instanceof DeclaredType dt && utils.isGenericType(dt.getEnclosingType())\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/links\/LinkInfo.java","additions":3,"deletions":26,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -144,0 +144,11 @@\n+\n+        checkOutput(\"pkg1\/C.html\", true,\n+                \"\"\"\n+                    Description copied from class:&nbsp;<code><a href=\"A.html#overriddenMethod()\">A<\\\n+                    \/a><\/code><\/span><\/div>\n+                    <div class=\"block\">Here's a generic link: <code><a href=\"A.html\" title=\"class in\\\n+                     pkg1\">A<\/a>&lt;<a href=\"http:\/\/example.com\/docs\/api\/java.base\/java\/lang\/Object.\\\n+                    html\" title=\"class or interface in java.lang\" class=\"external-link\">Object<\/a>,<\\\n+                    wbr><a href=\"http:\/\/example.com\/docs\/api\/java.base\/java\/lang\/RuntimeException.ht\\\n+                    ml\" title=\"class or interface in java.lang\" class=\"external-link\">RuntimeExcepti\\\n+                    on<\/a>&gt;.<a href=\"A.Inner.html\" title=\"class in pkg1\">Inner<\/a>\"\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testGenericTypeLink\/TestGenericTypeLink.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -63,0 +63,5 @@\n+    \/**\n+     * Here's a generic link: {@link A<Object, RuntimeException>.Inner}\n+     *\/\n+    public void overriddenMethod() {}\n+\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testGenericTypeLink\/pkg1\/A.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package pkg1;\n+\n+import java.util.Map;\n+\n+public class C<T, E extends Exception> extends A {\n+\n+    @Override\n+    public void overriddenMethod() {}\n+\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testGenericTypeLink\/pkg1\/C.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"}]}