{"files":[{"patch":"@@ -2771,0 +2771,1 @@\n+         * @throws NullPointerException if {@code targetName} is null\n@@ -2840,0 +2841,4 @@\n+         * If {@code targetClass} is an array class, {@code targetClass} is accessible\n+         * if the element type of the array class is accessible.  Otherwise,\n+         * {@code targetClass} is determined as accessible as follows.\n+         *\n@@ -2841,1 +2846,1 @@\n-         * If the {@code targetClass} is in the same module as the lookup class,\n+         * If {@code targetClass} is in the same module as the lookup class,\n@@ -2864,1 +2869,1 @@\n-         * Otherwise, the target class is in a different module from {@code lookupClass},\n+         * Otherwise, {@code targetClass} is in a different module from {@code lookupClass},\n@@ -2900,2 +2905,3 @@\n-         * @throws    SecurityException if a security manager is present and it\n-         *                              <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n+         * @throws SecurityException if a security manager is present and it\n+         *                           <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access<\/a>\n+         * @throws NullPointerException if {@code targetClass} is {@code null}\n@@ -2906,1 +2912,1 @@\n-            if (!VerifyAccess.isClassAccessible(targetClass, lookupClass, prevLookupClass, allowedModes)) {\n+            if (!isClassAccessible(targetClass)) {\n@@ -3687,1 +3693,5 @@\n-            return caller == null || VerifyAccess.isClassAccessible(refc, caller, prevLookupClass, allowedModes);\n+            Class<?> type = refc;\n+            while (type.isArray()) {\n+                type = type.getComponentType();\n+            }\n+            return caller == null || VerifyAccess.isClassAccessible(type, caller, prevLookupClass, allowedModes);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n- * @bug 8150782 8207027\n- * @compile TestAccessClass.java TestCls.java\n+ * @bug 8150782 8207027 8266269\n+ * @compile TestAccessClass.java TestCls.java p\/Foo.java q\/Bar.java\n@@ -34,0 +34,4 @@\n+import java.lang.reflect.Modifier;\n+\n+import p.Foo;\n+import q.Bar;\n@@ -58,1 +62,1 @@\n-    public void returnsSameClassInSamePackage() throws IllegalAccessException, ClassNotFoundException {\n+    public void returnsSameClassInSamePackage() throws IllegalAccessException {\n@@ -64,1 +68,1 @@\n-    public void returnsSameArrayClassInSamePackage() throws IllegalAccessException, ClassNotFoundException {\n+    public void returnsSameArrayClassInSamePackage() throws IllegalAccessException {\n@@ -78,1 +82,1 @@\n-    public void illegalAccessExceptionTest(Lookup lookup, Class<?> klass) throws IllegalAccessException, ClassNotFoundException {\n+    public void illegalAccessExceptionTest(Lookup lookup, Class<?> klass) throws IllegalAccessException {\n@@ -87,0 +91,16 @@\n+    \/**\n+     * Verify that a protected Q is as accessible as a public Q during linkage\n+     * (see JLS 15.12.4.3).\n+     *\/\n+    @Test\n+    public void protectedInnerClass() throws Throwable {\n+        lookup().accessClass(Bar.T_CLS);\n+        lookup().accessClass(Bar.T_ARRAY_CLS);\n+        MethodHandle mh = lookup().findStatic(Bar.class, \"meth\", MethodType.methodType(void.class, Bar.T_ARRAY_CLS));\n+        mh.invoke(null);\n+    }\n+\n+    @Test(expectedExceptions = {NullPointerException.class})\n+    public void illegalArgument() throws IllegalAccessException {\n+        lookup().accessClass(null);\n+    }\n","filename":"test\/jdk\/java\/lang\/invoke\/t8150782\/TestAccessClass.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n- * @bug 8150782 8207027\n- * @compile TestFindClass.java TestCls.java\n+ * @bug 8150782 8207027 8266269\n+ * @compile TestFindClass.java TestCls.java p\/Foo.java q\/Bar.java\n@@ -34,0 +34,2 @@\n+import p.Foo;\n+import q.Bar;\n@@ -97,0 +99,14 @@\n+    \/**\n+     * Verify that a protected Q is as accessible as a public Q during linkage\n+     * (see JLS 15.12.4.3).\n+     *\/\n+    @Test\n+    public void protectedInnerClass() throws IllegalAccessException, ClassNotFoundException {\n+        lookup().findClass(\"p.Foo$T\");\n+        lookup().findClass(\"[Lp.Foo$T;\");\n+    }\n+\n+    @Test(expectedExceptions = {NullPointerException.class})\n+    public void illegalArgument() throws IllegalAccessException, ClassNotFoundException {\n+        lookup().findClass(null);\n+    }\n","filename":"test\/jdk\/java\/lang\/invoke\/t8150782\/TestFindClass.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.internal.platform;\n+package p;\n@@ -27,4 +27,2 @@\n-public class SystemMetrics {\n-    public static Metrics instance() {\n-        return null;\n-    }\n+public class Foo {\n+     protected enum T { ONE }\n@@ -32,0 +30,1 @@\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/t8150782\/p\/Foo.java","additions":4,"deletions":5,"binary":false,"changes":9,"previous_filename":"src\/java.base\/unix\/classes\/jdk\/internal\/platform\/SystemMetrics.java","status":"copied"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package q;\n+\n+import p.Foo;\n+\n+\/\/ access protected inner class Foo.T\n+public class Bar extends Foo {\n+    public static final Class<?> T_CLS = T.class;\n+    public static final Class<?> T_ARRAY_CLS = T[].class;\n+\n+    public static void meth(T[] arr) {\n+        System.out.println(\"called method\");\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/invoke\/t8150782\/q\/Bar.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"}]}