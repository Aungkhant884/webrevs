{"files":[{"patch":"@@ -5036,13 +5036,13 @@\n-      \/\/ For Phis only consider Region's inputs that were reached by following the memory edges\n-      if (LCA != early) {\n-        for (uint i = 0; i < worklist.size(); i++) {\n-          Node* s = worklist.at(i);\n-          if (s->is_Phi() && C->can_alias(s->adr_type(), load_alias_idx)) {\n-            Node* r = s->in(0);\n-            for (uint j = 1; j < s->req(); j++) {\n-              Node* in = s->in(j);\n-              Node* r_in = r->in(j);\n-              \/\/ We can't reach any node from a Phi because we don't enqueue Phi's uses above\n-              if (((worklist.member(in) && !in->is_Phi()) || in == mem) && is_dominator(early, r_in)) {\n-                LCA = dom_lca_for_get_late_ctrl(LCA, r_in, n);\n-              }\n+    }\n+    \/\/ For Phis only consider Region's inputs that were reached by following the memory edges\n+    if (LCA != early) {\n+      for (uint i = 0; i < worklist.size(); i++) {\n+        Node* s = worklist.at(i);\n+        if (s->is_Phi() && C->can_alias(s->adr_type(), load_alias_idx)) {\n+          Node* r = s->in(0);\n+          for (uint j = 1; j < s->req(); j++) {\n+            Node* in = s->in(j);\n+            Node* r_in = r->in(j);\n+            \/\/ We can't reach any node from a Phi because we don't enqueue Phi's uses above\n+            if (((worklist.member(in) && !in->is_Phi()) || in == mem) && is_dominator(early, r_in)) {\n+              LCA = dom_lca_for_get_late_ctrl(LCA, r_in, n);\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8269575\n+ * @summary C2: assert(false) failed: graph should be schedulable after JDK-8252372\n+ *\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestSunkNodeDueToBrokenAntiDependency TestSunkNodeDueToBrokenAntiDependency\n+ *\n+ *\/\n+\n+public class TestSunkNodeDueToBrokenAntiDependency {\n+\n+    public static final int N = 400;\n+\n+    public static volatile long instanceCount=-154L;\n+    public volatile int iArrFld[]=new int[N];\n+\n+    public void mainTestSunkNodeDueToBrokenAntiDependency(String[] strArr1) {\n+\n+        int i8=8, i9=-3, i10=-199, i11=13, i12=8, i13=2;\n+        long lArr1[]=new long[N];\n+\n+        for (int i7 : iArrFld) {\n+            for (i8 = 1; i8 < 63; ++i8) {\n+                i10 = 1;\n+                while (++i10 < 2) {\n+                    i7 += (int)TestSunkNodeDueToBrokenAntiDependency.instanceCount;\n+                    lArr1[i10 + 1] -= 3;\n+                }\n+                i11 = 2;\n+                do {\n+                    byte by2=-104;\n+                    by2 = (byte)TestSunkNodeDueToBrokenAntiDependency.instanceCount;\n+                } while (--i11 > 0);\n+                i9 <<= 6;\n+                for (i12 = i8; 2 > i12; i12++) {\n+                    switch (((i11 >>> 1) % 1) + 66) {\n+                    case 66:\n+                        TestSunkNodeDueToBrokenAntiDependency.instanceCount -= i13;\n+                        break;\n+                    }\n+\n+                }\n+            }\n+        }\n+    }\n+    public static void main(String[] strArr) {\n+        TestSunkNodeDueToBrokenAntiDependency _instance = new TestSunkNodeDueToBrokenAntiDependency();\n+        for (int i = 0; i < 10; i++ ) {\n+            _instance.mainTestSunkNodeDueToBrokenAntiDependency(strArr);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestSunkNodeDueToBrokenAntiDependency.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}