{"files":[{"patch":"@@ -34,0 +34,2 @@\n+import java.nio.Buffer;\n+import java.nio.ByteBuffer;\n@@ -35,0 +37,1 @@\n+import jdk.internal.access.JavaNioAccess;\n@@ -36,0 +39,1 @@\n+import jdk.internal.access.foreign.MemorySegmentProxy;\n@@ -38,0 +42,1 @@\n+import jdk.internal.vm.vector.VectorSupport;\n@@ -337,0 +342,120 @@\n+\n+    \/\/ ByteBuffer vector access ops\n+\n+    \/\/ Buffer access constants, to be initalized when required.\n+    \/\/ Avoids a null value for NIO_ACCESS, due to class initalization dependencies\n+    static final class BufferAccess {\n+        \/\/ Buffer.address\n+        static final long BUFFER_ADDRESS\n+                = UNSAFE.objectFieldOffset(Buffer.class, \"address\");\n+\n+        \/\/ ByteBuffer.hb\n+        static final long BYTE_BUFFER_HB\n+                = UNSAFE.objectFieldOffset(ByteBuffer.class, \"hb\");\n+\n+        @ForceInline\n+        static Object bufferBase(ByteBuffer bb) {\n+            return UNSAFE.getReference(bb, BYTE_BUFFER_HB);\n+        }\n+\n+        @ForceInline\n+        static long bufferAddress(ByteBuffer bb, long offset) {\n+            return UNSAFE.getLong(bb, BUFFER_ADDRESS) + offset;\n+        }\n+\n+        static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+\n+        @ForceInline\n+        static ScopedMemoryAccess.Scope scope(ByteBuffer bb) {\n+            MemorySegmentProxy segmentProxy = NIO_ACCESS.bufferSegment(bb);\n+            return segmentProxy != null ?\n+                    segmentProxy.scope() : null;\n+        }\n+    }\n+\n+    @ForceInline\n+    public static\n+    <V extends VectorSupport.Vector<E>, E, S extends VectorSupport.VectorSpecies<E>>\n+    V loadFromByteBuffer(Class<? extends V> vmClass, Class<E> e, int length,\n+                          ByteBuffer bb, int offset,\n+                          S s,\n+                          VectorSupport.LoadOperation<ByteBuffer, V, E, S> defaultImpl) {\n+        try {\n+            return loadFromByteBufferScoped(\n+                    BufferAccess.scope(bb),\n+                    vmClass, e, length,\n+                    bb, offset,\n+                    s,\n+                    defaultImpl);\n+        } catch (ScopedMemoryAccess.Scope.ScopedAccessError ex) {\n+            throw new IllegalStateException(\"This segment is already closed\");\n+        }\n+    }\n+\n+    @Scoped\n+    @ForceInline\n+    private static\n+    <V extends VectorSupport.Vector<E>, E, S extends VectorSupport.VectorSpecies<E>>\n+    V loadFromByteBufferScoped(ScopedMemoryAccess.Scope scope,\n+                          Class<? extends V> vmClass, Class<E> e, int length,\n+                          ByteBuffer bb, int offset,\n+                          S s,\n+                          VectorSupport.LoadOperation<ByteBuffer, V, E, S> defaultImpl) {\n+        try {\n+            if (scope != null) {\n+                scope.checkValidState();\n+            }\n+\n+            return VectorSupport.load(vmClass, e, length,\n+                    BufferAccess.bufferBase(bb), BufferAccess.bufferAddress(bb, offset),\n+                    bb, offset, s,\n+                    defaultImpl);\n+        } finally {\n+            Reference.reachabilityFence(scope);\n+        }\n+    }\n+\n+    @ForceInline\n+    public static\n+    <V extends VectorSupport.Vector<E>, E>\n+    void storeIntoByteBuffer(Class<? extends V> vmClass, Class<E> e, int length,\n+                             V v,\n+                             ByteBuffer bb, int offset,\n+                             VectorSupport.StoreVectorOperation<ByteBuffer, V> defaultImpl) {\n+        try {\n+            storeIntoByteBufferScoped(\n+                    BufferAccess.scope(bb),\n+                    vmClass, e, length,\n+                    v,\n+                    bb, offset,\n+                    defaultImpl);\n+        } catch (ScopedMemoryAccess.Scope.ScopedAccessError ex) {\n+            throw new IllegalStateException(\"This segment is already closed\");\n+        }\n+    }\n+\n+    @Scoped\n+    @ForceInline\n+    private static\n+    <V extends VectorSupport.Vector<E>, E>\n+    void storeIntoByteBufferScoped(ScopedMemoryAccess.Scope scope,\n+                                   Class<? extends V> vmClass, Class<E> e, int length,\n+                                   V v,\n+                                   ByteBuffer bb, int offset,\n+                                   VectorSupport.StoreVectorOperation<ByteBuffer, V> defaultImpl) {\n+        try {\n+            if (scope != null) {\n+                scope.checkValidState();\n+            }\n+\n+            VectorSupport.store(vmClass, e, length,\n+                    BufferAccess.bufferBase(bb), BufferAccess.bufferAddress(bb, offset),\n+                    v,\n+                    bb, offset,\n+                    defaultImpl);\n+        } finally {\n+            Reference.reachabilityFence(scope);\n+        }\n+    }\n+\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":125,"deletions":0,"binary":false,"changes":125,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.misc.ScopedMemoryAccess;\n@@ -3565,9 +3566,8 @@\n-        return VectorSupport.load(\n-            vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n-            bufferBase(bb), bufferAddress(bb, offset),\n-            bb, offset, vsp,\n-            (buf, off, s) -> {\n-                ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n-                return s.ldOp(wb, off,\n-                        (wb_, o, i) -> wb_.get(o + i * 1));\n-           });\n+        return ScopedMemoryAccess.loadFromByteBuffer(\n+                vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n+                bb, offset, vsp,\n+                (buf, off, s) -> {\n+                    ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n+                    return s.ldOp(wb, off,\n+                            (wb_, o, i) -> wb_.get(o + i * 1));\n+                });\n@@ -3616,9 +3616,8 @@\n-        VectorSupport.store(\n-            vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n-            bufferBase(bb), bufferAddress(bb, offset),\n-            this, bb, offset,\n-            (buf, off, v) -> {\n-                ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n-                v.stOp(wb, off,\n-                        (wb_, o, i, e) -> wb_.put(o + i * 1, e));\n-            });\n+        ScopedMemoryAccess.storeIntoByteBuffer(\n+                vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n+                this, bb, offset,\n+                (buf, off, v) -> {\n+                    ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n+                    v.stOp(wb, off,\n+                            (wb_, o, i, e) -> wb_.put(o + i * 1, e));\n+                });\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.misc.ScopedMemoryAccess;\n@@ -3176,9 +3177,8 @@\n-        return VectorSupport.load(\n-            vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n-            bufferBase(bb), bufferAddress(bb, offset),\n-            bb, offset, vsp,\n-            (buf, off, s) -> {\n-                ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n-                return s.ldOp(wb, off,\n-                        (wb_, o, i) -> wb_.getDouble(o + i * 8));\n-           });\n+        return ScopedMemoryAccess.loadFromByteBuffer(\n+                vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n+                bb, offset, vsp,\n+                (buf, off, s) -> {\n+                    ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n+                    return s.ldOp(wb, off,\n+                            (wb_, o, i) -> wb_.getDouble(o + i * 8));\n+                });\n@@ -3227,9 +3227,8 @@\n-        VectorSupport.store(\n-            vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n-            bufferBase(bb), bufferAddress(bb, offset),\n-            this, bb, offset,\n-            (buf, off, v) -> {\n-                ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n-                v.stOp(wb, off,\n-                        (wb_, o, i, e) -> wb_.putDouble(o + i * 8, e));\n-            });\n+        ScopedMemoryAccess.storeIntoByteBuffer(\n+                vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n+                this, bb, offset,\n+                (buf, off, v) -> {\n+                    ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n+                    v.stOp(wb, off,\n+                            (wb_, o, i, e) -> wb_.putDouble(o + i * 8, e));\n+                });\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.misc.ScopedMemoryAccess;\n@@ -3163,9 +3164,8 @@\n-        return VectorSupport.load(\n-            vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n-            bufferBase(bb), bufferAddress(bb, offset),\n-            bb, offset, vsp,\n-            (buf, off, s) -> {\n-                ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n-                return s.ldOp(wb, off,\n-                        (wb_, o, i) -> wb_.getFloat(o + i * 4));\n-           });\n+        return ScopedMemoryAccess.loadFromByteBuffer(\n+                vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n+                bb, offset, vsp,\n+                (buf, off, s) -> {\n+                    ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n+                    return s.ldOp(wb, off,\n+                            (wb_, o, i) -> wb_.getFloat(o + i * 4));\n+                });\n@@ -3214,9 +3214,8 @@\n-        VectorSupport.store(\n-            vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n-            bufferBase(bb), bufferAddress(bb, offset),\n-            this, bb, offset,\n-            (buf, off, v) -> {\n-                ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n-                v.stOp(wb, off,\n-                        (wb_, o, i, e) -> wb_.putFloat(o + i * 4, e));\n-            });\n+        ScopedMemoryAccess.storeIntoByteBuffer(\n+                vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n+                this, bb, offset,\n+                (buf, off, v) -> {\n+                    ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n+                    v.stOp(wb, off,\n+                            (wb_, o, i, e) -> wb_.putFloat(o + i * 4, e));\n+                });\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.misc.ScopedMemoryAccess;\n@@ -3272,9 +3273,8 @@\n-        return VectorSupport.load(\n-            vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n-            bufferBase(bb), bufferAddress(bb, offset),\n-            bb, offset, vsp,\n-            (buf, off, s) -> {\n-                ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n-                return s.ldOp(wb, off,\n-                        (wb_, o, i) -> wb_.getInt(o + i * 4));\n-           });\n+        return ScopedMemoryAccess.loadFromByteBuffer(\n+                vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n+                bb, offset, vsp,\n+                (buf, off, s) -> {\n+                    ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n+                    return s.ldOp(wb, off,\n+                            (wb_, o, i) -> wb_.getInt(o + i * 4));\n+                });\n@@ -3323,9 +3323,8 @@\n-        VectorSupport.store(\n-            vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n-            bufferBase(bb), bufferAddress(bb, offset),\n-            this, bb, offset,\n-            (buf, off, v) -> {\n-                ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n-                v.stOp(wb, off,\n-                        (wb_, o, i, e) -> wb_.putInt(o + i * 4, e));\n-            });\n+        ScopedMemoryAccess.storeIntoByteBuffer(\n+                vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n+                this, bb, offset,\n+                (buf, off, v) -> {\n+                    ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n+                    v.stOp(wb, off,\n+                            (wb_, o, i, e) -> wb_.putInt(o + i * 4, e));\n+                });\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.misc.ScopedMemoryAccess;\n@@ -3175,9 +3176,8 @@\n-        return VectorSupport.load(\n-            vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n-            bufferBase(bb), bufferAddress(bb, offset),\n-            bb, offset, vsp,\n-            (buf, off, s) -> {\n-                ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n-                return s.ldOp(wb, off,\n-                        (wb_, o, i) -> wb_.getLong(o + i * 8));\n-           });\n+        return ScopedMemoryAccess.loadFromByteBuffer(\n+                vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n+                bb, offset, vsp,\n+                (buf, off, s) -> {\n+                    ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n+                    return s.ldOp(wb, off,\n+                            (wb_, o, i) -> wb_.getLong(o + i * 8));\n+                });\n@@ -3226,9 +3226,8 @@\n-        VectorSupport.store(\n-            vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n-            bufferBase(bb), bufferAddress(bb, offset),\n-            this, bb, offset,\n-            (buf, off, v) -> {\n-                ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n-                v.stOp(wb, off,\n-                        (wb_, o, i, e) -> wb_.putLong(o + i * 8, e));\n-            });\n+        ScopedMemoryAccess.storeIntoByteBuffer(\n+                vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n+                this, bb, offset,\n+                (buf, off, v) -> {\n+                    ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n+                    v.stOp(wb, off,\n+                            (wb_, o, i, e) -> wb_.putLong(o + i * 8, e));\n+                });\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.misc.ScopedMemoryAccess;\n@@ -3552,9 +3553,8 @@\n-        return VectorSupport.load(\n-            vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n-            bufferBase(bb), bufferAddress(bb, offset),\n-            bb, offset, vsp,\n-            (buf, off, s) -> {\n-                ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n-                return s.ldOp(wb, off,\n-                        (wb_, o, i) -> wb_.getShort(o + i * 2));\n-           });\n+        return ScopedMemoryAccess.loadFromByteBuffer(\n+                vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n+                bb, offset, vsp,\n+                (buf, off, s) -> {\n+                    ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n+                    return s.ldOp(wb, off,\n+                            (wb_, o, i) -> wb_.getShort(o + i * 2));\n+                });\n@@ -3603,9 +3603,8 @@\n-        VectorSupport.store(\n-            vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n-            bufferBase(bb), bufferAddress(bb, offset),\n-            this, bb, offset,\n-            (buf, off, v) -> {\n-                ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n-                v.stOp(wb, off,\n-                        (wb_, o, i, e) -> wb_.putShort(o + i * 2, e));\n-            });\n+        ScopedMemoryAccess.storeIntoByteBuffer(\n+                vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n+                this, bb, offset,\n+                (buf, off, v) -> {\n+                    ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n+                    v.stOp(wb, off,\n+                            (wb_, o, i, e) -> wb_.putShort(o + i * 2, e));\n+                });\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import jdk.internal.misc.Unsafe;\n@@ -30,2 +29,0 @@\n-import java.nio.Buffer;\n-import java.nio.ByteBuffer;\n@@ -35,19 +32,0 @@\n-    static final Unsafe U = Unsafe.getUnsafe();\n-\n-    static final long BUFFER_ADDRESS\n-            = U.objectFieldOffset(Buffer.class, \"address\");\n-\n-    \/\/ Buffer.limit\n-    static final long BUFFER_LIMIT\n-            = U.objectFieldOffset(Buffer.class, \"limit\");\n-\n-    \/\/ ByteBuffer.hb\n-    static final long BYTE_BUFFER_HB\n-            = U.objectFieldOffset(ByteBuffer.class, \"hb\");\n-\n-    \/\/ ByteBuffer.isReadOnly\n-    static final long BYTE_BUFFER_IS_READ_ONLY\n-            = U.objectFieldOffset(ByteBuffer.class, \"isReadOnly\");\n-\n-    \/* ============================================================================ *\/\n-\n@@ -136,14 +114,0 @@\n-\n-    \/* ============================================================================ *\/\n-\n-    \/*package-private*\/\n-    @ForceInline\n-    static Object bufferBase(ByteBuffer bb) {\n-        return U.getReference(bb, BYTE_BUFFER_HB);\n-    }\n-\n-    \/*package-private*\/\n-    @ForceInline\n-    static long bufferAddress(ByteBuffer bb, long offset) {\n-        return U.getLong(bb, BUFFER_ADDRESS) + offset;\n-    }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorIntrinsics.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.misc.ScopedMemoryAccess;\n@@ -4520,9 +4521,8 @@\n-        return VectorSupport.load(\n-            vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n-            bufferBase(bb), bufferAddress(bb, offset),\n-            bb, offset, vsp,\n-            (buf, off, s) -> {\n-                ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n-                return s.ldOp(wb, off,\n-                        (wb_, o, i) -> wb_.get{#if[byte]?(:$Type$(}o + i * $sizeInBytes$));\n-           });\n+        return ScopedMemoryAccess.loadFromByteBuffer(\n+                vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n+                bb, offset, vsp,\n+                (buf, off, s) -> {\n+                    ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n+                    return s.ldOp(wb, off,\n+                            (wb_, o, i) -> wb_.get{#if[byte]?(:$Type$(}o + i * $sizeInBytes$));\n+                });\n@@ -4571,9 +4571,8 @@\n-        VectorSupport.store(\n-            vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n-            bufferBase(bb), bufferAddress(bb, offset),\n-            this, bb, offset,\n-            (buf, off, v) -> {\n-                ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n-                v.stOp(wb, off,\n-                        (wb_, o, i, e) -> wb_.put{#if[byte]?(:$Type$(}o + i * $sizeInBytes$, e));\n-            });\n+        ScopedMemoryAccess.storeIntoByteBuffer(\n+                vsp.vectorType(), vsp.elementType(), vsp.laneCount(),\n+                this, bb, offset,\n+                (buf, off, v) -> {\n+                    ByteBuffer wb = wrapper(buf, NATIVE_ENDIAN);\n+                    v.stOp(wb, off,\n+                            (wb_, o, i, e) -> wb_.put{#if[byte]?(:$Type$(}o + i * $sizeInBytes$, e));\n+                });\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.incubator.foreign.MemorySegment;\n+import jdk.incubator.foreign.ResourceScope;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.IntFunction;\n+\n+public class AbstractVectorLoadStoreTest extends AbstractVectorTest {\n+\n+    static final Collection<ByteOrder> BYTE_ORDER_VALUES = Set.of(\n+            ByteOrder.BIG_ENDIAN, ByteOrder.LITTLE_ENDIAN);\n+\n+    static final List<IntFunction<ByteBuffer>> BYTE_BUFFER_GENERATORS = List.of(\n+            withToString(\"HB:RW:NE\", (int s) -> {\n+                return ByteBuffer.allocate(s)\n+                        .order(ByteOrder.nativeOrder());\n+            }),\n+            withToString(\"DB:RW:NE\", (int s) -> {\n+                return ByteBuffer.allocateDirect(s)\n+                        .order(ByteOrder.nativeOrder());\n+            }),\n+            withToString(\"MS:RW:NE\", (int s) -> {\n+                return MemorySegment.allocateNative(s, ResourceScope.newImplicitScope())\n+                        .asByteBuffer()\n+                        .order(ByteOrder.nativeOrder());\n+            })\n+    );\n+}\n","filename":"test\/jdk\/jdk\/incubator\/vector\/AbstractVectorLoadStoreTest.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -87,14 +87,0 @@\n-    static final Collection<ByteOrder> BYTE_ORDER_VALUES = Set.of(\n-            ByteOrder.BIG_ENDIAN, ByteOrder.LITTLE_ENDIAN);\n-\n-    static final List<IntFunction<ByteBuffer>> BYTE_BUFFER_GENERATORS = List.of(\n-            withToString(\"HB:RW:NE\", (int s) -> {\n-                return ByteBuffer.allocate(s)\n-                        .order(ByteOrder.nativeOrder());\n-            }),\n-            withToString(\"DB:RW:NE\", (int s) -> {\n-                return ByteBuffer.allocateDirect(s)\n-                        .order(ByteOrder.nativeOrder());\n-            })\n-    );\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/AbstractVectorTest.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -45,1 +45,0 @@\n-import java.util.Arrays;\n@@ -50,1 +49,1 @@\n-public class Byte128VectorLoadStoreTests extends AbstractVectorTest {\n+public class Byte128VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -45,1 +45,0 @@\n-import java.util.Arrays;\n@@ -50,1 +49,1 @@\n-public class Byte256VectorLoadStoreTests extends AbstractVectorTest {\n+public class Byte256VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -45,1 +45,0 @@\n-import java.util.Arrays;\n@@ -50,1 +49,1 @@\n-public class Byte512VectorLoadStoreTests extends AbstractVectorTest {\n+public class Byte512VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -45,1 +45,0 @@\n-import java.util.Arrays;\n@@ -50,1 +49,1 @@\n-public class Byte64VectorLoadStoreTests extends AbstractVectorTest {\n+public class Byte64VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -49,1 +49,0 @@\n-import java.util.Arrays;\n@@ -54,1 +53,1 @@\n-public class ByteMaxVectorLoadStoreTests extends AbstractVectorTest {\n+public class ByteMaxVectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Double128VectorLoadStoreTests extends AbstractVectorTest {\n+public class Double128VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Double256VectorLoadStoreTests extends AbstractVectorTest {\n+public class Double256VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Double512VectorLoadStoreTests extends AbstractVectorTest {\n+public class Double512VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Double64VectorLoadStoreTests extends AbstractVectorTest {\n+public class Double64VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -50,1 +50,0 @@\n-import java.util.Arrays;\n@@ -55,1 +54,1 @@\n-public class DoubleMaxVectorLoadStoreTests extends AbstractVectorTest {\n+public class DoubleMaxVectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Float128VectorLoadStoreTests extends AbstractVectorTest {\n+public class Float128VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Float256VectorLoadStoreTests extends AbstractVectorTest {\n+public class Float256VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Float512VectorLoadStoreTests extends AbstractVectorTest {\n+public class Float512VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Float64VectorLoadStoreTests extends AbstractVectorTest {\n+public class Float64VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -50,1 +50,0 @@\n-import java.util.Arrays;\n@@ -55,1 +54,1 @@\n-public class FloatMaxVectorLoadStoreTests extends AbstractVectorTest {\n+public class FloatMaxVectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Int128VectorLoadStoreTests extends AbstractVectorTest {\n+public class Int128VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Int256VectorLoadStoreTests extends AbstractVectorTest {\n+public class Int256VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Int512VectorLoadStoreTests extends AbstractVectorTest {\n+public class Int512VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Int64VectorLoadStoreTests extends AbstractVectorTest {\n+public class Int64VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -50,1 +50,0 @@\n-import java.util.Arrays;\n@@ -55,1 +54,1 @@\n-public class IntMaxVectorLoadStoreTests extends AbstractVectorTest {\n+public class IntMaxVectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Long128VectorLoadStoreTests extends AbstractVectorTest {\n+public class Long128VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Long256VectorLoadStoreTests extends AbstractVectorTest {\n+public class Long256VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Long512VectorLoadStoreTests extends AbstractVectorTest {\n+public class Long512VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Long64VectorLoadStoreTests extends AbstractVectorTest {\n+public class Long64VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -50,1 +50,0 @@\n-import java.util.Arrays;\n@@ -55,1 +54,1 @@\n-public class LongMaxVectorLoadStoreTests extends AbstractVectorTest {\n+public class LongMaxVectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Short128VectorLoadStoreTests extends AbstractVectorTest {\n+public class Short128VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Short256VectorLoadStoreTests extends AbstractVectorTest {\n+public class Short256VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Short512VectorLoadStoreTests extends AbstractVectorTest {\n+public class Short512VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -46,1 +46,0 @@\n-import java.util.Arrays;\n@@ -51,1 +50,1 @@\n-public class Short64VectorLoadStoreTests extends AbstractVectorTest {\n+public class Short64VectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -50,1 +50,0 @@\n-import java.util.Arrays;\n@@ -55,1 +54,1 @@\n-public class ShortMaxVectorLoadStoreTests extends AbstractVectorTest {\n+public class ShortMaxVectorLoadStoreTests extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorLoadStoreTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @modules jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n+ * @modules jdk.incubator.foreign jdk.incubator.vector java.base\/jdk.internal.vm.annotation\n@@ -60,1 +60,0 @@\n-import java.util.Arrays;\n@@ -65,1 +64,1 @@\n-public class $vectorteststype$ extends AbstractVectorTest {\n+public class $vectorteststype$ extends AbstractVectorLoadStoreTest {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/X-LoadStoreTest.java.template","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}