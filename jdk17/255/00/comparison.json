{"files":[{"patch":"@@ -1399,0 +1399,12 @@\n+static bool is_phi_has_opaque1(Node* n) {\n+  if (n->is_Phi()) {\n+    for (uint i = 1; i < n->req(); i++) {\n+      Node* in = n->in(i);\n+      if (in != NULL && in->is_Opaque1()) {\n+        return true;\n+      }\n+    }\n+  }\n+  return false;\n+}\n+\n@@ -1421,1 +1433,1 @@\n-  if( con->is_Con() && !cmp2->is_Con() && op2 != Op_Opaque1 &&\n+  if( con->is_Con() && !cmp2->is_Con() && op2 != Op_Opaque1 && !is_phi_has_opaque1(cmp2) &&\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8269820\n+ * @requires vm.compiler2.enabled\n+ * @summary oqaue node in canonical_loop_entry's input chain is not fixed at\n+ *          compare node's in(2).\n+ * @run main\/othervm -Xbatch -XX:-TieredCompilation compiler.loopopts.TestCanonicalLoopEntryOpaqueOrder\n+ *\/\n+\n+package compiler.loopopts;\n+public class TestCanonicalLoopEntryOpaqueOrder {\n+    static void test() {\n+        int ina8[] = new int[1478];\n+        int in2 = 136;\n+        long lo3 = 0L;\n+        try {\n+            for (int i = 0; i < 34; i++) {\n+                Math.log1p(1);\n+            }\n+        } catch (Exception e) {\n+            in2 = 1;\n+        }\n+\n+        for (int i = 0; i < in2; i++) {\n+            if (in2 > 10) {  \/\/ split if and create wrong opaque order\n+                for (int j = 0; j < in2; j++) {\n+                    lo3 -= 1L;\n+                }\n+            }\n+        }\n+    }\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10000; i++) {\n+            test();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestCanonicalLoopEntryOpaqueOrder.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}