{"files":[{"patch":"@@ -157,12 +157,10 @@\n-    LogMessage(jfr,startup) msg;\n-    objArrayOop lines = objArrayOop(content);\n-    assert(lines != NULL, \"invariant\");\n-    assert(lines->is_array(), \"must be array\");\n-    const int length = lines->length();\n-    for (int i = 0; i < length; ++i) {\n-      const char* text = JfrJavaSupport::c_str(lines->obj_at(i), THREAD);\n-      if (text == NULL) {\n-        \/\/ An oome has been thrown and is pending.\n-        break;\n-      }\n-      msg.info(\"%s\", text);\n+  LogMessage(jfr,startup) msg;\n+  objArrayOop lines = objArrayOop(content);\n+  assert(lines != NULL, \"invariant\");\n+  assert(lines->is_array(), \"must be array\");\n+  const int length = lines->length();\n+  for (int i = 0; i < length; ++i) {\n+    const char* text = JfrJavaSupport::c_str(lines->obj_at(i), THREAD);\n+    if (text == NULL) {\n+      \/\/ An oome has been thrown and is pending.\n+      break;\n@@ -170,0 +168,2 @@\n+    msg.info(\"%s\", text);\n+  }\n@@ -218,0 +218,2 @@\n+JfrDCmd::JfrDCmd(outputStream* output, bool heap, int num_arguments) : DCmd(output, heap), _args(NULL), _num_arguments(num_arguments), _delimiter('\\0') {}\n+\n@@ -277,0 +279,14 @@\n+static void initialize_dummy_descriptors(GrowableArray<DCmdArgumentInfo*>* array) {\n+  assert(array != NULL, \"invariant\");\n+  DCmdArgumentInfo * const dummy = new DCmdArgumentInfo(NULL,\n+                                                        NULL,\n+                                                        NULL,\n+                                                        NULL,\n+                                                        false,\n+                                                        true, \/\/ a DcmdFramework \"option\"\n+                                                        false);\n+  for (int i = 0; i < array->max_length(); ++i) {\n+    array->append(dummy);\n+  }\n+}\n+\n@@ -343,0 +359,1 @@\n+  GrowableArray<DCmdArgumentInfo*>* const array = new GrowableArray<DCmdArgumentInfo*>(_num_arguments);\n@@ -346,0 +363,12 @@\n+  if (thread->has_pending_exception()) {\n+    \/\/ Most likely an OOME, but the DCmdFramework is not the best place to handle it.\n+    \/\/ We handle it locally by clearing the exception and returning an array with dummy descriptors.\n+    \/\/ This lets the MBean server initialization routine complete successfully,\n+    \/\/ but this particular command will have no argument descriptors exposed.\n+    \/\/ Hence we postpone, or delegate, handling of OOME's to code that is better suited.\n+    log_debug(jfr, system)(\"Exception in DCmd getArgumentInfos\");\n+    thread->clear_pending_exception();\n+    initialize_dummy_descriptors(array);\n+    assert(array->length() == _num_arguments, \"invariant\");\n+    return array;\n+  }\n@@ -349,2 +378,2 @@\n-  GrowableArray<DCmdArgumentInfo*>* const array = new GrowableArray<DCmdArgumentInfo*>();\n-  const int length = arguments->length();\n+  const int num_arguments = arguments->length();\n+  assert(num_arguments == _num_arguments, \"invariant\");\n@@ -352,1 +381,1 @@\n-  for (int i = 0; i < length; ++i) {\n+  for (int i = 0; i < num_arguments; ++i) {\n","filename":"src\/hotspot\/share\/jfr\/dcmd\/jfrDcmds.cpp","additions":44,"deletions":15,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+  const int _num_arguments;\n@@ -35,0 +36,4 @@\n+ protected:\n+  JfrDCmd(outputStream* output, bool heap, int num_arguments);\n+  virtual const char* javaClass() const = 0;\n+  void invoke(JfrJavaArguments& method, TRAPS) const;\n@@ -36,2 +41,0 @@\n-  JfrDCmd(outputStream* output, bool heap) : DCmd(output,heap), _args(NULL), _delimiter('\\0')  {}\n-\n@@ -43,3 +46,0 @@\n- protected:\n-  virtual const char* javaClass() const = 0;\n-  void invoke(JfrJavaArguments& method, TRAPS) const;\n@@ -50,1 +50,1 @@\n-  JfrStartFlightRecordingDCmd(outputStream* output, bool heap) : JfrDCmd(output, heap) {}\n+  JfrStartFlightRecordingDCmd(outputStream* output, bool heap) : JfrDCmd(output, heap, num_arguments()) {}\n@@ -75,1 +75,1 @@\n-  JfrDumpFlightRecordingDCmd(outputStream* output, bool heap) : JfrDCmd(output, heap) {}\n+  JfrDumpFlightRecordingDCmd(outputStream* output, bool heap) : JfrDCmd(output, heap, num_arguments()) {}\n@@ -100,1 +100,1 @@\n-  JfrCheckFlightRecordingDCmd(outputStream* output, bool heap) : JfrDCmd(output, heap) {}\n+  JfrCheckFlightRecordingDCmd(outputStream* output, bool heap) : JfrDCmd(output, heap, num_arguments()) {}\n@@ -125,1 +125,1 @@\n-  JfrStopFlightRecordingDCmd(outputStream* output, bool heap) : JfrDCmd(output, heap) {}\n+  JfrStopFlightRecordingDCmd(outputStream* output, bool heap) : JfrDCmd(output, heap, num_arguments()) {}\n","filename":"src\/hotspot\/share\/jfr\/dcmd\/jfrDcmds.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}