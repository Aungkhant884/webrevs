{"files":[{"patch":"@@ -47,0 +47,1 @@\n+#include \"runtime\/orderAccess.hpp\"\n@@ -110,0 +111,13 @@\n+void StringDedup::forbid_deduplication(oop java_string) {\n+  assert(is_enabled(), \"precondition\");\n+  if (java_lang_String::deduplication_forbidden(java_string)) {\n+    \/\/ DCLP - we don't want a caller's access to the value array to float\n+    \/\/ before the check; string dedup could change the value and another\n+    \/\/ thread could set the flag, and this thread uses a stale value.\n+    OrderAccess::acquire();\n+  } else {\n+    MutexLocker ml(StringDedupIntern_lock, Mutex::_no_safepoint_check_flag);\n+    java_lang_String::set_deduplication_forbidden(java_string);\n+  }\n+}\n+\n@@ -117,4 +131,1 @@\n-  {\n-    MutexLocker ml(StringDedupIntern_lock, Mutex::_no_safepoint_check_flag);\n-    java_lang_String::set_deduplication_forbidden(java_string);\n-  }\n+  forbid_deduplication(java_string);\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedup.cpp","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -150,0 +150,9 @@\n+  \/\/ Marks the String as not being subject to deduplication.  This can be\n+  \/\/ used to prevent deduplication of Strings whose value array must remain\n+  \/\/ stable and cannot be replaced by a shared duplicate.  Must be called\n+  \/\/ before obtaining the value array; this function provides an acquire\n+  \/\/ barrier.\n+  \/\/ precondition: is_enabled()\n+  \/\/ precondition: java_string is a Java String object.\n+  static void forbid_deduplication(oop java_string);\n+\n@@ -151,0 +160,1 @@\n+  \/\/ Implicity forbids deduplication of the String.\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedup.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n@@ -2845,0 +2846,28 @@\n+static typeArrayOop lock_gc_or_pin_string_value(JavaThread* thread, oop str) {\n+  if (Universe::heap()->supports_object_pinning()) {\n+    \/\/ Forbid deduplication before obtaining the value array, to prevent\n+    \/\/ deduplication from replacing the value array while setting up or in\n+    \/\/ the critical section.  That would lead to the release operation\n+    \/\/ unpinning the wrong object.\n+    if (StringDedup::is_enabled()) {\n+      NoSafepointVerifier nsv;\n+      StringDedup::forbid_deduplication(str);\n+    }\n+    typeArrayOop s_value = java_lang_String::value(str);\n+    return (typeArrayOop) Universe::heap()->pin_object(thread, s_value);\n+  } else {\n+    Handle h(thread, str);      \/\/ Handlize across potential safepoint.\n+    GCLocker::lock_critical(thread);\n+    return java_lang_String::value(h());\n+  }\n+}\n+\n+static void unlock_gc_or_unpin_string_value(JavaThread* thread, oop str) {\n+  if (Universe::heap()->supports_object_pinning()) {\n+    typeArrayOop s_value = java_lang_String::value(str);\n+    Universe::heap()->unpin_object(thread, s_value);\n+  } else {\n+    GCLocker::unlock_critical(thread);\n+  }\n+}\n+\n@@ -2847,6 +2876,1 @@\n-  oop s = lock_gc_or_pin_object(thread, string);\n-  typeArrayOop s_value = java_lang_String::value(s);\n-  bool is_latin1 = java_lang_String::is_latin1(s);\n-  if (isCopy != NULL) {\n-    *isCopy = is_latin1 ? JNI_TRUE : JNI_FALSE;\n-  }\n+  oop s = JNIHandles::resolve_non_null(string);\n@@ -2854,1 +2878,2 @@\n-  if (!is_latin1) {\n+  if (!java_lang_String::is_latin1(s)) {\n+    typeArrayOop s_value = lock_gc_or_pin_string_value(thread, s);\n@@ -2856,0 +2881,1 @@\n+    if (isCopy != NULL) *isCopy = JNI_FALSE;\n@@ -2858,0 +2884,1 @@\n+    typeArrayOop s_value = java_lang_String::value(s);\n@@ -2867,0 +2894,1 @@\n+    if (isCopy != NULL) *isCopy = JNI_TRUE;\n@@ -2875,1 +2903,0 @@\n-  \/\/ The str and chars arguments are ignored for UTF16 strings\n@@ -2882,0 +2909,3 @@\n+  } else {\n+    \/\/ For non-latin1 string, drop the associated gc-locker\/pin.\n+    unlock_gc_or_unpin_string_value(thread, s);\n@@ -2883,1 +2913,0 @@\n-  unlock_gc_or_unpin_object(thread, str);\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":38,"deletions":9,"binary":false,"changes":47,"status":"modified"}]}