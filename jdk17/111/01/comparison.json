{"files":[{"patch":"@@ -835,2 +835,0 @@\n-tools\/jpackage\/windows\/WinInstallerIconTest.java 8268404 windows-x64\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.util.function.Consumer;\n@@ -70,5 +69,1 @@\n-        createInstaller(null, \"WithDefaultIcon\", installerIconImg -> {\n-            defaultInstallerIconImg[0] = installerIconImg;\n-        }, null, null);\n-\n-        BufferedImage[] customInstallerIconImg = new BufferedImage[1];\n+        long size1 = createInstaller(null, \"WithDefaultIcon\");\n@@ -77,12 +72,11 @@\n-        \/\/ This installer icon should differ from the icon\n-        \/\/ of the installer created with the default icon.\n-        createInstaller(customIcon, \"2\", installerIconImg -> {\n-            customInstallerIconImg[0] = installerIconImg;\n-        }, null, defaultInstallerIconImg[0]);\n-\n-        \/\/ Create installer with custom icon again.\n-        \/\/ This installer icon should differ from the icon\n-        \/\/ of the installer created with the default icon and should have\n-        \/\/ the same icon as the icon of installer created with custom icon.\n-        createInstaller(customIcon, null, null,\n-                customInstallerIconImg[0], defaultInstallerIconImg[0]);\n+        long size2 = createInstaller(customIcon, \"WithCustomIcon\");\n+\n+        \/\/ Create another installer with custom icon.\n+        long size3 = createInstaller(customIcon, null);\n+\n+        TKit.assertTrue(size2 < size1, \"Installer 2 built with custom icon \" +\n+                \"should  be smaller than Installer 1 built with default icon\");\n+\n+        TKit.assertTrue(size3 < size1, \"Installer 3 built with custom icon \" +\n+                \"should be smaller than Installer 1 built with default icon\");\n+\n@@ -91,4 +85,1 @@\n-    private void createInstaller(Path icon, String nameSuffix,\n-            Consumer<BufferedImage> installerIconImgConsumer,\n-            BufferedImage expectedInstallerIconImg,\n-            BufferedImage unexpectedInstallerIconImg) throws IOException {\n+    private long createInstaller(Path icon, String nameSuffix) throws IOException {\n@@ -115,23 +106,0 @@\n-\n-            Icon actualIcon = FileSystemView.getFileSystemView().getSystemIcon(\n-                    installerExePath[0].toFile());\n-\n-            BufferedImage actualInstallerIconImg = loadIcon(actualIcon);\n-\n-            if (installerIconImgConsumer != null) {\n-                installerIconImgConsumer.accept(actualInstallerIconImg);\n-            }\n-\n-            if (expectedInstallerIconImg != null) {\n-                TKit.assertTrue(imageEquals(expectedInstallerIconImg,\n-                        actualInstallerIconImg), String.format(\n-                                \"Check icon of %s installer is matching expected value\",\n-                                installerExePath[0]));\n-            }\n-\n-            if (unexpectedInstallerIconImg != null) {\n-                TKit.assertFalse(imageEquals(unexpectedInstallerIconImg,\n-                        actualInstallerIconImg), String.format(\n-                                \"Check icon of %s installer is NOT matching unexpected value\",\n-                                installerExePath[0]));\n-            }\n@@ -142,29 +110,6 @@\n-        if (installerExePath[0] != null && nameSuffix != null) {\n-            TKit.deleteIfExists(installerExePath[0]);\n-        }\n-    }\n-\n-    private BufferedImage loadIcon(Icon icon) {\n-        TKit.assertNotEquals(0, icon.getIconWidth(),\n-                \"Check icon has not empty width\");\n-        TKit.assertNotEquals(0, icon.getIconHeight(),\n-                \"Check icon has not empty height\");\n-        BufferedImage img = new BufferedImage(\n-                icon.getIconWidth(),\n-                icon.getIconHeight(),\n-                BufferedImage.TYPE_INT_RGB);\n-        Graphics g = img.createGraphics();\n-        icon.paintIcon(null, g, 0, 0);\n-        g.dispose();\n-        return img;\n-    }\n-\n-    private static boolean imageEquals(BufferedImage imgA, BufferedImage imgB) {\n-        if (imgA.getWidth() == imgB.getWidth() && imgA.getHeight()\n-                == imgB.getHeight()) {\n-            for (int x = 0; x < imgA.getWidth(); x++) {\n-                for (int y = 0; y < imgA.getHeight(); y++) {\n-                    if (imgA.getRGB(x, y) != imgB.getRGB(x, y)) {\n-                        return false;\n-                    }\n-                }\n+        long size = 0L;\n+        if (installerExePath[0] != null) {\n+            size = installerExePath[0].toFile().length();\n+            TKit.trace(\" installer: \" + installerExePath[0] + \" - size: \" + size);\n+            if (nameSuffix != null) {\n+                TKit.deleteIfExists(installerExePath[0]);\n@@ -172,2 +117,0 @@\n-        } else {\n-            return false;\n@@ -175,1 +118,1 @@\n-        return true;\n+        return size;\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinInstallerIconTest.java","additions":20,"deletions":77,"binary":false,"changes":97,"status":"modified"}]}