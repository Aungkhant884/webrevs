{"files":[{"patch":"@@ -202,0 +202,1 @@\n+        jdk.crypto.cryptoki,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -129,4 +129,3 @@\n-    permission java.lang.RuntimePermission\n-                   \"accessClassInPackage.com.sun.crypto.provider\";\n-    permission java.lang.RuntimePermission\n-                   \"accessClassInPackage.sun.security.*\";\n+    permission java.lang.RuntimePermission \"accessClassInPackage.com.sun.crypto.provider\";\n+    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.misc\";\n+    permission java.lang.RuntimePermission \"accessClassInPackage.sun.security.*\";\n@@ -143,2 +142,1 @@\n-    permission java.security.SecurityPermission\n-                   \"getProperty.auth.login.defaultCallbackHandler\";\n+    permission java.security.SecurityPermission \"getProperty.auth.login.defaultCallbackHandler\";\n","filename":"src\/java.base\/share\/lib\/security\/default.policy","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import jdk.internal.misc.InnocuousThread;\n@@ -910,1 +911,1 @@\n-    private static class TokenPoller extends Thread {\n+    private static class TokenPoller implements Runnable {\n@@ -915,4 +916,0 @@\n-            super((ThreadGroup)null, \"Poller-\" + provider.getName());\n-            setContextClassLoader(null);\n-            setDaemon(true);\n-            setPriority(Thread.MIN_PRIORITY);\n@@ -947,0 +944,1 @@\n+    @SuppressWarnings(\"removal\")\n@@ -952,1 +950,11 @@\n-        poller.start();\n+        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n+            Thread t = InnocuousThread.newSystemThread(\n+                    \"Poller \" + getName(),\n+                    poller);\n+            assert t.getContextClassLoader() == null;\n+            t.setDaemon(true);\n+            t.setPriority(Thread.MIN_PRIORITY);\n+            t.start();\n+            return null;\n+        });\n+\n@@ -975,1 +983,1 @@\n-    private class NativeResourceCleaner extends Thread {\n+    private class NativeResourceCleaner implements Runnable {\n@@ -980,7 +988,0 @@\n-        private NativeResourceCleaner() {\n-            super((ThreadGroup)null, \"Cleanup-SunPKCS11\");\n-            setContextClassLoader(null);\n-            setDaemon(true);\n-            setPriority(Thread.MIN_PRIORITY);\n-        }\n-\n@@ -1004,1 +1005,1 @@\n-                    sleep(sleepMillis);\n+                    Thread.sleep(sleepMillis);\n@@ -1025,0 +1026,19 @@\n+    \/\/ create the cleaner thread, if not already active\n+    @SuppressWarnings(\"removal\")\n+    private void createCleaner() {\n+        if (cleaner != null) {\n+            return;\n+        }\n+        cleaner = new NativeResourceCleaner();\n+        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n+            Thread t = InnocuousThread.newSystemThread(\n+                    \"Cleanup-SunPKCS11\",\n+                    cleaner);\n+            assert t.getContextClassLoader() == null;\n+            t.setDaemon(true);\n+            t.setPriority(Thread.MIN_PRIORITY);\n+            t.start();\n+            return null;\n+        });\n+    }\n+\n@@ -1193,2 +1213,1 @@\n-            cleaner = new NativeResourceCleaner();\n-            cleaner.start();\n+            createCleaner();\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/SunPKCS11.java","additions":36,"deletions":17,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,3 +34,1 @@\n-import java.security.KeyStore;\n-import java.security.Provider;\n-import java.security.Security;\n+import java.security.*;\n@@ -38,0 +36,1 @@\n+import java.util.PropertyPermission;\n@@ -47,1 +46,1 @@\n-\n+    static final Policy DEFAULT_POLICY = Policy.getPolicy();\n@@ -50,0 +49,1 @@\n+        String nssConfig = PKCS11Test.getNssConfig();\n@@ -51,1 +51,1 @@\n-            String nssConfig = PKCS11Test.getNssConfig();\n+            \/\/ loop to set up test without security manger\n@@ -57,3 +57,10 @@\n-            providers[i] =\n-                    (SunPKCS11)PKCS11Test.newPKCS11Provider()\n-                    .configure(nssConfig);\n+            providers[i] = (SunPKCS11)PKCS11Test.newPKCS11Provider();\n+        }\n+\n+        if (args.length > 0) {\n+            Policy.setPolicy(new SimplePolicy());\n+            System.setSecurityManager(new SecurityManager());\n+        }\n+\n+        for (int i =0; i < NUM_PROVIDERS; i++) {\n+            providers[i] = (SunPKCS11)providers[i].configure(nssConfig);\n@@ -95,1 +102,0 @@\n-\n@@ -120,0 +126,21 @@\n+    static final class SimplePolicy extends Policy {\n+\n+        final Permissions perms = new Permissions();\n+        SimplePolicy() {\n+            perms.add(new PropertyPermission(\"*\", \"read, write\"));\n+            perms.add(new RuntimePermission(\"accessClassInPackage.sun.*\"));\n+            perms.add(new RuntimePermission(\"accessClassInPackage.sun.security.pkcs11.*\"));\n+            perms.add(new SecurityPermission(\"authProvider.*\"));\n+            perms.add(new SecurityPermission(\"clearProviderProperties.*\"));\n+            perms.add(new SecurityPermission(\"insertProvider.*\"));\n+            perms.add(new SecurityPermission(\"removeProvider.*\"));\n+        }\n+\n+        @Override\n+        public boolean implies(ProtectionDomain domain, Permission permission) {\n+            return perms.implies(permission) ||\n+                    DEFAULT_POLICY.implies(domain, permission);\n+        }\n+\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/MultipleLogins.java","additions":37,"deletions":10,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-# @bug 7777777\n+# @bug 8240256 8269034\n@@ -117,1 +117,1 @@\n-# run test\n+# run test without security manager\n@@ -129,1 +129,1 @@\n-        MultipleLogins\n+        MultipleLogins || exit 10\n@@ -131,2 +131,13 @@\n-# save error status\n-status=$?\n+# run test with security manager\n+${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} \\\n+        -classpath ${TESTCLASSPATH} \\\n+        --add-modules jdk.crypto.cryptoki \\\n+        --add-exports jdk.crypto.cryptoki\/sun.security.pkcs11=ALL-UNNAMED \\\n+        -DCUSTOM_DB_DIR=${TESTCLASSES} \\\n+        -DCUSTOM_P11_CONFIG=${TESTSRC}${FS}MultipleLogins-nss.txt \\\n+        -DNO_DEFAULT=true \\\n+        -DNO_DEIMOS=true \\\n+        -Dtest.src=${TESTSRC} \\\n+        -Dtest.classes=${TESTCLASSES} \\\n+        -Djava.security.debug=${DEBUG} \\\n+        MultipleLogins ${TESTSRC}${FS}MultipleLogins.policy || exit 11\n@@ -134,2 +145,2 @@\n-# return\n-exit $status\n+echo Done\n+exit 0\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/MultipleLogins.sh","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"}]}