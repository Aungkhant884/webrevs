{"files":[{"patch":"@@ -202,0 +202,1 @@\n+        jdk.crypto.cryptoki,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -131,0 +131,1 @@\n+    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.misc\";\n","filename":"src\/java.base\/share\/lib\/security\/default.policy","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import jdk.internal.misc.InnocuousThread;\n@@ -910,1 +911,1 @@\n-    private static class TokenPoller extends Thread {\n+    private static class TokenPoller implements Runnable {\n@@ -915,4 +916,0 @@\n-            super((ThreadGroup)null, \"Poller-\" + provider.getName());\n-            setContextClassLoader(null);\n-            setDaemon(true);\n-            setPriority(Thread.MIN_PRIORITY);\n@@ -947,0 +944,1 @@\n+    @SuppressWarnings(\"removal\")\n@@ -952,1 +950,8 @@\n-        poller.start();\n+        Thread t = InnocuousThread.newSystemThread(\n+                \"Poller-\" + getName(),\n+                poller,\n+                Thread.MIN_PRIORITY);\n+        assert t.getContextClassLoader() == null;\n+        t.setDaemon(true);\n+        t.start();\n+\n@@ -975,1 +980,1 @@\n-    private class NativeResourceCleaner extends Thread {\n+    private class NativeResourceCleaner implements Runnable {\n@@ -980,7 +985,0 @@\n-        private NativeResourceCleaner() {\n-            super((ThreadGroup)null, \"Cleanup-SunPKCS11\");\n-            setContextClassLoader(null);\n-            setDaemon(true);\n-            setPriority(Thread.MIN_PRIORITY);\n-        }\n-\n@@ -1004,1 +1002,1 @@\n-                    sleep(sleepMillis);\n+                    Thread.sleep(sleepMillis);\n@@ -1025,0 +1023,13 @@\n+    \/\/ create the cleaner thread, if not already active\n+    @SuppressWarnings(\"removal\")\n+    private void createCleaner() {\n+        cleaner = new NativeResourceCleaner();\n+        Thread t = InnocuousThread.newSystemThread(\n+                \"Cleanup-SunPKCS11\",\n+                cleaner,\n+                Thread.MIN_PRIORITY);\n+        assert t.getContextClassLoader() == null;\n+        t.setDaemon(true);\n+        t.start();\n+    }\n+\n@@ -1193,2 +1204,1 @@\n-            cleaner = new NativeResourceCleaner();\n-            cleaner.start();\n+            createCleaner();\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/SunPKCS11.java","additions":27,"deletions":17,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,3 +34,1 @@\n-import java.security.KeyStore;\n-import java.security.Provider;\n-import java.security.Security;\n+import java.security.*;\n@@ -38,0 +36,1 @@\n+import java.util.PropertyPermission;\n@@ -47,1 +46,1 @@\n-\n+    static final Policy DEFAULT_POLICY = Policy.getPolicy();\n@@ -50,0 +49,7 @@\n+        String nssConfig = PKCS11Test.getNssConfig();\n+        if (nssConfig == null) {\n+            \/\/ No test framework support yet. Ignore\n+            System.out.println(\"No NSS config found. Skipping.\");\n+            return;\n+        }\n+\n@@ -51,9 +57,11 @@\n-            String nssConfig = PKCS11Test.getNssConfig();\n-            if (nssConfig == null) {\n-                \/\/ No test framework support yet. Ignore\n-                System.out.println(\"No NSS config found. Skipping.\");\n-                return;\n-            }\n-            providers[i] =\n-                    (SunPKCS11)PKCS11Test.newPKCS11Provider()\n-                    .configure(nssConfig);\n+            \/\/ loop to set up test without security manger\n+            providers[i] = (SunPKCS11)PKCS11Test.newPKCS11Provider();\n+        }\n+\n+        if (args.length > 0) {\n+            Policy.setPolicy(new SimplePolicy());\n+            System.setSecurityManager(new SecurityManager());\n+        }\n+\n+        for (int i =0; i < NUM_PROVIDERS; i++) {\n+            providers[i] = (SunPKCS11)providers[i].configure(nssConfig);\n@@ -95,1 +103,0 @@\n-\n@@ -120,0 +127,17 @@\n+    static final class SimplePolicy extends Policy {\n+\n+        final Permissions perms = new Permissions();\n+        SimplePolicy() {\n+            perms.add(new PropertyPermission(\"*\", \"read, write\"));\n+            perms.add(new SecurityPermission(\"authProvider.*\"));\n+            perms.add(new SecurityPermission(\"insertProvider.*\"));\n+            perms.add(new SecurityPermission(\"removeProvider.*\"));\n+        }\n+\n+        @Override\n+        public boolean implies(ProtectionDomain domain, Permission permission) {\n+            return perms.implies(permission) ||\n+                    DEFAULT_POLICY.implies(domain, permission);\n+        }\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/MultipleLogins.java","additions":39,"deletions":15,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-# @bug 7777777\n+# @bug 8240256 8269034\n@@ -117,3 +117,1 @@\n-# run test\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} \\\n-        -classpath ${TESTCLASSPATH} \\\n+TEST_ARGS=\"${TESTVMOPTS} -classpath ${TESTCLASSPATH} \\\n@@ -128,2 +126,4 @@\n-        -Djava.security.debug=${DEBUG} \\\n-        MultipleLogins\n+        -Djava.security.debug=${DEBUG}\"\n+\n+# run test without security manager\n+${TESTJAVA}${FS}bin${FS}java ${TEST_ARGS} MultipleLogins || exit 10\n@@ -131,2 +131,2 @@\n-# save error status\n-status=$?\n+# run test with security manager\n+${TESTJAVA}${FS}bin${FS}java ${TEST_ARGS} MultipleLogins useSimplePolicy || exit 11\n@@ -134,2 +134,2 @@\n-# return\n-exit $status\n+echo Done\n+exit 0\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/MultipleLogins.sh","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}