{"files":[{"patch":"@@ -389,0 +389,1 @@\n+            selector = translate(selector);\n@@ -472,0 +473,2 @@\n+                } else {\n+                    c.stats = translate(c.stats);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.function.BiFunction;\n@@ -30,1 +31,1 @@\n- * @bug 8262891 8268333 8268896\n+ * @bug 8262891 8268333 8268896 8269802 8269808\n@@ -69,0 +70,5 @@\n+        switchNestingTest(this::switchNestingStatementStatement);\n+        switchNestingTest(this::switchNestingStatementExpression);\n+        switchNestingTest(this::switchNestingExpressionStatement);\n+        switchNestingTest(this::switchNestingExpressionExpression);\n+        switchNestingTest(this::switchNestingIfSwitch);\n@@ -122,0 +128,7 @@\n+    void switchNestingTest(BiFunction<Object, Object, String> testCase) {\n+        assertEquals(\"string, string\", testCase.apply(\"\", \"\"));\n+        assertEquals(\"string, other\", testCase.apply(\"\", 1));\n+        assertEquals(\"other, string\", testCase.apply(1, \"\"));\n+        assertEquals(\"other, other\", testCase.apply(1, 1));\n+    }\n+\n@@ -369,0 +382,107 @@\n+    String switchNestingStatementStatement(Object o1, Object o2) {\n+        switch (o1) {\n+            case String s1 -> {\n+                switch (o2) {\n+                    case String s2 -> {\n+                        return \"string, string\";\n+                    }\n+                    default -> {\n+                        return \"string, other\";\n+                    }\n+                }\n+            }\n+            default -> {\n+                switch (o2) {\n+                    case String s2 -> {\n+                        return \"other, string\";\n+                    }\n+                    default -> {\n+                        return \"other, other\";\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    String switchNestingStatementExpression(Object o1, Object o2) {\n+        switch (o1) {\n+            case String s1 -> {\n+                return switch (o2) {\n+                    case String s2 -> \"string, string\";\n+                    default -> \"string, other\";\n+                };\n+            }\n+            default -> {\n+                return switch (o2) {\n+                    case String s2 -> \"other, string\";\n+                    default -> \"other, other\";\n+                };\n+            }\n+        }\n+    }\n+\n+    String switchNestingExpressionStatement(Object o1, Object o2) {\n+        return switch (o1) {\n+            case String s1 -> {\n+                switch (o2) {\n+                    case String s2 -> {\n+                        yield \"string, string\";\n+                    }\n+                    default -> {\n+                        yield \"string, other\";\n+                    }\n+                }\n+            }\n+            default -> {\n+                switch (o2) {\n+                    case String s2 -> {\n+                        yield \"other, string\";\n+                    }\n+                    default -> {\n+                        yield \"other, other\";\n+                    }\n+                }\n+            }\n+        };\n+    }\n+\n+    String switchNestingExpressionExpression(Object o1, Object o2) {\n+        return switch (o1) {\n+            case String s1 ->\n+                switch (o2) {\n+                    case String s2 -> \"string, string\";\n+                    default -> \"string, other\";\n+                };\n+            default ->\n+                switch (o2) {\n+                    case String s2 -> \"other, string\";\n+                    default -> \"other, other\";\n+                };\n+        };\n+    }\n+\n+    String switchNestingIfSwitch(Object o1, Object o2) {\n+        BiFunction<Object, Object, String> f = (n1, n2) -> {\n+            if (o1 instanceof CharSequence cs) {\n+                return switch (cs) {\n+                    case String s1 ->\n+                        switch (o2) {\n+                            case String s2 -> \"string, string\";\n+                            default -> \"string, other\";\n+                        };\n+                    default ->\n+                        switch (o2) {\n+                            case String s2 -> \"other, string\";\n+                            default -> \"other, other\";\n+                        };\n+                };\n+            } else {\n+                return switch (o2) {\n+                            case String s2 -> \"other, string\";\n+                            default -> \"other, other\";\n+                        };\n+            }\n+        };\n+        return f.apply(o1, o2);\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/Switches.java","additions":121,"deletions":1,"binary":false,"changes":122,"status":"modified"}]}