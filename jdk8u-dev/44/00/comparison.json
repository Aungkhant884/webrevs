{"files":[{"patch":"@@ -288,6 +288,1 @@\n-    private static FileNameMap fileNameMap;\n-\n-    \/**\n-     * @since 1.2.2\n-     *\/\n-    private static boolean fileNameMapLoaded = false;\n+    private static volatile FileNameMap fileNameMap;\n@@ -305,4 +300,12 @@\n-    public static synchronized FileNameMap getFileNameMap() {\n-        if ((fileNameMap == null) && !fileNameMapLoaded) {\n-            fileNameMap = sun.net.www.MimeTable.loadTable();\n-            fileNameMapLoaded = true;\n+    public static FileNameMap getFileNameMap() {\n+        FileNameMap map = fileNameMap;\n+\n+        if (map == null) {\n+            fileNameMap = map = new FileNameMap() {\n+                private FileNameMap internalMap =\n+                    sun.net.www.MimeTable.loadTable();\n+\n+                public String getContentTypeFor(String fileName) {\n+                    return internalMap.getContentTypeFor(fileName);\n+                }\n+            };\n@@ -311,6 +314,1 @@\n-        return new FileNameMap() {\n-            private FileNameMap map = fileNameMap;\n-            public String getContentTypeFor(String fileName) {\n-                return map.getContentTypeFor(fileName);\n-            }\n-        };\n+        return map;\n","filename":"jdk\/src\/share\/classes\/java\/net\/URLConnection.java","additions":14,"deletions":16,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2016, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.net.FileNameMap;\n+import java.net.URLConnection;\n@@ -53,0 +55,10 @@\n+\n+        \/\/ Fall back to content types property.\n+        if (result == null) {\n+            Path fileName = file.getFileName();\n+            if (fileName != null) {\n+                FileNameMap fileNameMap = URLConnection.getFileNameMap();\n+                result = fileNameMap.getContentTypeFor(fileName.toString());\n+            }\n+        }\n+\n","filename":"jdk\/src\/share\/classes\/sun\/nio\/fs\/AbstractFileTypeDetector.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @bug 4313887\n+ * @bug 4313887 8129632 8129633 8162624 8146215\n@@ -41,1 +41,0 @@\n-\n@@ -58,0 +57,17 @@\n+    private static void checkMimeTypesFile(Path mimeTypes) {\n+        if (!Files.exists(mimeTypes)) {\n+            System.out.println(mimeTypes + \" does not exist\");\n+        } else if (!Files.isReadable(mimeTypes)) {\n+            System.out.println(mimeTypes + \" is not readable\");\n+        } else {\n+            System.out.println(mimeTypes + \" contents:\");\n+            try (Stream<String> lines = Files.lines(mimeTypes)) {\n+                lines.forEach(System.out::println);\n+                System.out.println(\"\");\n+            } catch (IOException ioe) {\n+                System.err.printf(\"Problem reading %s: %s%n\",\n+                                  mimeTypes, ioe.getMessage());\n+            }\n+        }\n+    }\n+\n@@ -66,14 +82,1 @@\n-                if (!Files.exists(userMimeTypes)) {\n-                    System.out.println(userMimeTypes + \" does not exist\");\n-                } else if (!Files.isReadable(userMimeTypes)) {\n-                    System.out.println(userMimeTypes + \" is not readable\");\n-                } else {\n-                    System.out.println(userMimeTypes + \" contents:\");\n-                    try (Stream<String> lines = Files.lines(userMimeTypes)) {\n-                        lines.forEach(System.out::println);\n-                        System.out.println(\"\");\n-                    } catch (IOException ioe) {\n-                        System.err.println(\"Problem reading \"\n-                                           + userMimeTypes);\n-                    }\n-                }\n+                checkMimeTypesFile(userMimeTypes);\n@@ -82,14 +85,1 @@\n-                if (!Files.exists(etcMimeTypes)) {\n-                    System.out.println(etcMimeTypes + \" does not exist\");\n-                } else if (!Files.isReadable(etcMimeTypes)) {\n-                    System.out.println(etcMimeTypes + \" is not readable\");\n-                } else {\n-                    System.out.println(etcMimeTypes + \" contents:\");\n-                    try (Stream<String> lines = Files.lines(etcMimeTypes)) {\n-                        lines.forEach(System.out::println);\n-                        System.out.println(\"\");\n-                    } catch (IOException ioe) {\n-                        System.err.println(\"Problem reading \"\n-                                           + etcMimeTypes);\n-                    }\n-                }\n+                checkMimeTypesFile(etcMimeTypes);\n@@ -128,3 +118,6 @@\n-            if (type == null)\n-                throw new RuntimeException(\"Custom file type detector not installed?\");\n-            failures += checkContentTypes(\"grape\/unknown\", type);\n+            if (type == null) {\n+                System.err.println(\"Custom file type detector not installed?\");\n+                failures++;\n+            } else {\n+                failures += checkContentTypes(\"grape\/unknown\", type);\n+            }\n","filename":"jdk\/test\/java\/nio\/file\/Files\/probeContentType\/Basic.java","additions":26,"deletions":33,"binary":false,"changes":59,"status":"modified"}]}