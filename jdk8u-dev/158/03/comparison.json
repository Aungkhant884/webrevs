{"files":[{"patch":"@@ -313,2 +313,20 @@\n-          assert(cg_infos[CPUSET_IDX]._mount_path == NULL, \"stomping of _mount_path\");\n-          cg_infos[CPUSET_IDX]._mount_path = os::strdup(tmpmount);\n+          if (cg_infos[CPUSET_IDX]._mount_path != NULL) {\n+            \/\/ On some systems duplicate cpuset controllers get mounted in addition to\n+            \/\/ the main cgroup controllers most likely under \/sys\/fs\/cgroup. In that\n+            \/\/ case pick the one under \/sys\/fs\/cgroup and discard others.\n+            if (strstr(cg_infos[CPUSET_IDX]._mount_path, \"\/sys\/fs\/cgroup\") != cg_infos[CPUSET_IDX]._mount_path) {\n+              if (PrintContainerInfo) {\n+                tty->print_cr(\"Duplicate cpuset controllers detected. Picking %s, skipping %s.\",\n+                              tmpmount, cg_infos[CPUSET_IDX]._mount_path);\n+              }\n+              os::free(cg_infos[CPUSET_IDX]._mount_path);\n+              cg_infos[CPUSET_IDX]._mount_path = os::strdup(tmpmount);\n+            } else {\n+              if (PrintContainerInfo) {\n+                tty->print_cr(\"Duplicate cpuset controllers detected. Picking %s, skipping %s.\",\n+                              cg_infos[CPUSET_IDX]._mount_path, tmpmount);\n+              }\n+            }\n+          } else {\n+            cg_infos[CPUSET_IDX]._mount_path = os::strdup(tmpmount);\n+          }\n","filename":"hotspot\/src\/os\/linux\/vm\/cgroupSubsystem_linux.cpp","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,3 +27,3 @@\n- * @library \/testlibrary \/test\/lib\n- * @build sun.hotspot.WhiteBox\n- * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ * @library \/testlibrary \/testlibrary\/whitebox\n+ * @build CgroupSubsystemFactory\n+ * @run main ClassFileInstaller sun.hotspot.WhiteBox\n@@ -39,0 +39,3 @@\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n@@ -40,3 +43,2 @@\n-import jdk.test.lib.Asserts;\n-import jdk.test.lib.Utils;\n-import jdk.test.lib.util.FileUtils;\n+import com.oracle.java.testlibrary.Asserts;\n+import com.oracle.java.testlibrary.Utils;\n@@ -50,1 +52,1 @@\n-    \/\/ Mirrored from src\/hotspot\/os\/linux\/cgroupSubsystem_linux.hpp\n+    \/\/ Mirrored from hotspot\/src\/os\/linux\/vm\/cgroupSubsystem_linux.hpp\n@@ -64,0 +66,2 @@\n+    private Path cgroupv1MntInfoDoubleCpuset;\n+    private Path cgroupv1MntInfoDoubleCpuset2;\n@@ -106,1 +110,1 @@\n-            \"44 30 0:40 \/ \/sys\/fs\/cgroup\/freezer rw,nosuid,nodev,noexec,relatime shared:16 - cgroup none rw,seclabel,freezer\";\n+            \"44 30 0:40 \/ \/sys\/fs\/cgroup\/freezer rw,nosuid,nodev,noexec,relatime shared:16 - cgroup none rw,seclabel,freezer\\n\";\n@@ -111,0 +115,3 @@\n+    private String mntInfoCgroupv1MoreCpusetLine = \"121 32 0:37 \/ \/cpusets rw,relatime shared:69 - cgroup none rw,cpuset\\n\";\n+    private String mntInfoCgroupv1DoubleCpuset = mntInfoCgroupv1MoreCpusetLine + mntInfoHybrid;\n+    private String mntInfoCgroupv1DoubleCpuset2 =  mntInfoHybrid + mntInfoCgroupv1MoreCpusetLine;\n@@ -132,1 +139,1 @@\n-            Files.writeString(cgroupsZero, cgroupsZeroHierarchy, StandardCharsets.UTF_8);\n+            Files.write(cgroupsZero, cgroupsZeroHierarchy.getBytes(StandardCharsets.UTF_8));\n@@ -136,1 +143,1 @@\n-            Files.writeString(cgroupv1MntInfoZeroHierarchy, mntInfoEmpty);\n+            Files.write(cgroupv1MntInfoZeroHierarchy, mntInfoEmpty.getBytes());\n@@ -139,1 +146,1 @@\n-            Files.writeString(cgroupv2MntInfoZeroHierarchy, mntInfoCgroupsV2Only);\n+            Files.write(cgroupv2MntInfoZeroHierarchy, mntInfoCgroupsV2Only.getBytes());\n@@ -142,1 +149,1 @@\n-            Files.writeString(cgroupv1CgInfoNonZeroHierarchy, cgroupsNonZeroHierarchy);\n+            Files.write(cgroupv1CgInfoNonZeroHierarchy, cgroupsNonZeroHierarchy.getBytes());\n@@ -145,1 +152,1 @@\n-            Files.writeString(cgroupv1MntInfoNonZeroHierarchy, mntInfoHybrid);\n+            Files.write(cgroupv1MntInfoNonZeroHierarchy, mntInfoHybrid.getBytes());\n@@ -148,1 +155,1 @@\n-            Files.writeString(cgroupv1MntInfoNonZeroHierarchyOtherOrder, mntInfoHybridFlippedOrder);\n+            Files.write(cgroupv1MntInfoNonZeroHierarchyOtherOrder, mntInfoHybridFlippedOrder.getBytes());\n@@ -151,1 +158,1 @@\n-            Files.writeString(cgroupV1SelfCgroup, procSelfCgroupHybridContent);\n+            Files.write(cgroupV1SelfCgroup, procSelfCgroupHybridContent.getBytes());\n@@ -154,1 +161,1 @@\n-            Files.writeString(cgroupV2SelfCgroup, procSelfCgroupV2UnifiedContent);\n+            Files.write(cgroupV2SelfCgroup, procSelfCgroupV2UnifiedContent.getBytes());\n@@ -157,1 +164,1 @@\n-            Files.writeString(cgroupv1MntInfoMissingMemoryController, mntInfoHybridMissingMemory);\n+            Files.write(cgroupv1MntInfoMissingMemoryController, mntInfoHybridMissingMemory.getBytes());\n@@ -160,1 +167,7 @@\n-            Files.writeString(cgroupV2MntInfoMissingCgroupv2, mntInfoHybridStub);\n+            Files.write(cgroupV2MntInfoMissingCgroupv2, mntInfoHybridStub.getBytes());\n+\n+            cgroupv1MntInfoDoubleCpuset = Paths.get(existingDirectory.toString(), \"mnt_info_cgroupv1_double_cpuset\");\n+            Files.write(cgroupv1MntInfoDoubleCpuset, mntInfoCgroupv1DoubleCpuset.getBytes());\n+\n+            cgroupv1MntInfoDoubleCpuset2 = Paths.get(existingDirectory.toString(), \"mnt_info_cgroupv1_double_cpuset2\");\n+            Files.write(cgroupv1MntInfoDoubleCpuset2, mntInfoCgroupv1DoubleCpuset2.getBytes());\n@@ -168,1 +181,1 @@\n-            FileUtils.deleteFileTreeWithRetry(existingDirectory);\n+            deleteFileTree(existingDirectory);\n@@ -174,0 +187,19 @@\n+    private static void deleteFileTree(Path dir) throws IOException {\n+        java.nio.file.Files.walkFileTree(dir, new SimpleFileVisitor<Path>() {\n+            @Override\n+            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                Files.delete(file);\n+                return FileVisitResult.CONTINUE;\n+            }\n+            @Override\n+            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {\n+                Files.delete(dir);\n+                return FileVisitResult.CONTINUE;\n+            }\n+            @Override\n+            public FileVisitResult visitFileFailed(Path file, IOException exc) {\n+                return FileVisitResult.CONTINUE;\n+            }\n+        });\n+    }\n+\n@@ -178,0 +210,10 @@\n+    public void testCgroupv1MultipleCpusetMounts(WhiteBox wb, Path mountInfo) {\n+        String procCgroups = cgroupv1CgInfoNonZeroHierarchy.toString();\n+        String procSelfCgroup = cgroupV1SelfCgroup.toString();\n+        String procSelfMountinfo = mountInfo.toString();\n+        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        Asserts.assertEQ(CGROUPS_V1, retval, \"Multiple cpuset controllers, but only one in \/sys\/fs\/cgroup\");\n+        Asserts.assertTrue(isValidCgroup(retval));\n+        System.out.println(\"testCgroupv1MultipleCpusetMounts PASSED!\");\n+    }\n+\n@@ -250,0 +292,2 @@\n+            test.testCgroupv1MultipleCpusetMounts(wb, test.cgroupv1MntInfoDoubleCpuset);\n+            test.testCgroupv1MultipleCpusetMounts(wb, test.cgroupv1MntInfoDoubleCpuset2);\n","filename":"hotspot\/test\/runtime\/containers\/cgroup\/CgroupSubsystemFactory.java","additions":63,"deletions":19,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -35,0 +35,4 @@\n+import java.nio.file.Path;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.FileAttribute;\n@@ -373,0 +377,21 @@\n+\n+    \/**\n+     * Creates an empty directory in \"user.dir\" or \".\"\n+     * <p>\n+     * This method is meant as a replacement for {@code Files#createTempDirectory(String, String, FileAttribute...)}\n+     * that doesn't leave files behind in \/tmp directory of the test machine\n+     * <p>\n+     * If the property \"user.dir\" is not set, \".\" will be used.\n+     *\n+     * @param prefix\n+     * @param attrs\n+     * @return the path to the newly created directory\n+     * @throws IOException\n+     *\n+     * @see {@link Files#createTempDirectory(String, String, FileAttribute...)}\n+     *\/\n+    public static Path createTempDirectory(String prefix, FileAttribute<?>... attrs) throws IOException {\n+        Path dir = Paths.get(System.getProperty(\"user.dir\", \".\"));\n+        return Files.createTempDirectory(dir, prefix);\n+    }\n+\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/Utils.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}