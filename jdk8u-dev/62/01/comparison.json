{"files":[{"patch":"@@ -5,2 +5,1 @@\n-^.hgtip\n-^.bridge2\n+^.src-rev$\n","filename":".hgignore","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4281,1 +4281,1 @@\n-# Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -4307,1 +4307,1 @@\n-VALID_VS_VERSIONS=\"2010 2012 2013 2015 2017\"\n+VALID_VS_VERSIONS=\"2010 2012 2013 2015 2017 2019\"\n@@ -4365,0 +4365,14 @@\n+VS_DESCRIPTION_2019=\"Microsoft Visual Studio 2019\"\n+VS_VERSION_INTERNAL_2019=141\n+VS_MSVCR_2019=vcruntime140.dll\n+VS_MSVCP_2019=msvcp140.dll\n+VS_ENVVAR_2019=\"VS160COMNTOOLS\"\n+VS_USE_UCRT_2019=\"true\"\n+VS_VS_INSTALLDIR_2019=\"Microsoft Visual Studio\/2019\"\n+VS_EDITIONS_2019=\"BuildTools Community Professional Enterprise\"\n+VS_SDK_INSTALLDIR_2019=\n+VS_VS_PLATFORM_NAME_2019=\"v142\"\n+VS_SDK_PLATFORM_NAME_2019=\n+VS_SUPPORTED_2019=false\n+VS_TOOLSET_SUPPORTED_2019=false\n+\n@@ -4406,1 +4420,1 @@\n-DATE_WHEN_GENERATED=1648806331\n+DATE_WHEN_GENERATED=1652838310\n@@ -25877,1 +25891,1 @@\n-    # In VS 2017, the default installation is in a subdir named after the edition.\n+    # In VS 2017 and VS 2019, the default installation is in a subdir named after the edition.\n@@ -25934,1 +25948,1 @@\n-    # In VS 2017, the default installation is in a subdir named after the edition.\n+    # In VS 2017 and VS 2019, the default installation is in a subdir named after the edition.\n@@ -26007,1 +26021,1 @@\n-    # In VS 2017, the default installation is in a subdir named after the edition.\n+    # In VS 2017 and VS 2019, the default installation is in a subdir named after the edition.\n@@ -26066,1 +26080,1 @@\n-    # In VS 2017, the default installation is in a subdir named after the edition.\n+    # In VS 2017 and VS 2019, the default installation is in a subdir named after the edition.\n@@ -26127,1 +26141,1 @@\n-    # In VS 2017, the default installation is in a subdir named after the edition.\n+    # In VS 2017 and VS 2019, the default installation is in a subdir named after the edition.\n@@ -26185,1 +26199,1 @@\n-    # In VS 2017, the default installation is in a subdir named after the edition.\n+    # In VS 2017 and VS 2019, the default installation is in a subdir named after the edition.\n@@ -26242,1 +26256,1 @@\n-    # In VS 2017, the default installation is in a subdir named after the edition.\n+    # In VS 2017 and VS 2019, the default installation is in a subdir named after the edition.\n@@ -50107,1 +50121,1 @@\n-        # Probe: Using well-known location from VS 2017\n+        # Probe: Using well-known location from VS 2017 and VS 2019\n@@ -51510,1 +51524,1 @@\n-        # Probe: Using well-known location from VS 2017\n+        # Probe: Using well-known location from VS 2017 and VS 2019\n","filename":"common\/autoconf\/generated-configure.sh","additions":26,"deletions":12,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -4,1 +4,0 @@\n-^.hgtip\n","filename":"corba\/.hgignore","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -8,1 +8,0 @@\n-^.hgtip\n","filename":"hotspot\/.hgignore","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -7,1 +7,0 @@\n-^.hgtip\n","filename":"jaxp\/.hgignore","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -7,1 +7,0 @@\n-^.hgtip\n","filename":"jaxws\/.hgignore","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -7,1 +7,0 @@\n-^.hgtip\n","filename":"jdk\/.hgignore","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -615,1 +615,1 @@\n-\t$(call info-file-item, \"SOURCE\", \"$(ALL_SOURCE_TIPS)\")\n+\t$(call info-file-item, \"SOURCE\", \"$(strip $(SOURCE_REVISION))\")\n@@ -618,3 +618,3 @@\n-ALL_SOURCE_TIPS = $(shell \\\n-    if [ -f $(OUTPUT_ROOT)\/source_tips ] ; then \\\n-      $(CAT) $(OUTPUT_ROOT)\/source_tips ; \\\n+SOURCE_REVISION = $(shell \\\n+    if [ -f $(SOURCE_REVISION_TRACKER) ] ; then \\\n+      $(CAT) $(SOURCE_REVISION_TRACKER) ; \\\n@@ -623,1 +623,2 @@\n-$(JRE_INFO_FILE): $(OUTPUT_ROOT)\/spec.gmk $(OUTPUT_ROOT)\/source_tips\n+# The SOURCE_REVISION_TRACKER file may not exist. Only depend on it if it does.\n+$(JRE_INFO_FILE): $(OUTPUT_ROOT)\/spec.gmk $(wildcard $(SOURCE_REVISION_TRACKER))\n@@ -630,1 +631,1 @@\n-$(JDK_INFO_FILE): $(OUTPUT_ROOT)\/spec.gmk $(OUTPUT_ROOT)\/source_tips\n+$(JDK_INFO_FILE): $(OUTPUT_ROOT)\/spec.gmk $(wildcard $(SOURCE_REVISION_TRACKER))\n@@ -634,1 +635,1 @@\n-$(JRE_OVERLAY_INFO_FILE): $(OUTPUT_ROOT)\/spec.gmk $(OUTPUT_ROOT)\/source_tips\n+$(JRE_OVERLAY_INFO_FILE): $(OUTPUT_ROOT)\/spec.gmk $(wildcard $(SOURCE_REVISION_TRACKER))\n@@ -638,1 +639,1 @@\n-$(JDK_OVERLAY_INFO_FILE): $(OUTPUT_ROOT)\/spec.gmk $(OUTPUT_ROOT)\/source_tips\n+$(JDK_OVERLAY_INFO_FILE): $(OUTPUT_ROOT)\/spec.gmk $(wildcard $(SOURCE_REVISION_TRACKER))\n","filename":"jdk\/make\/Images.gmk","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -4,1 +4,0 @@\n-^.hgtip\n","filename":"langtools\/.hgignore","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-images:: source-tips demos nashorn images-only\n+images:: create-source-revision-tracker demos nashorn images-only\n@@ -140,1 +140,1 @@\n-overlay-images: source-tips demos overlay-images-only\n+overlay-images: create-source-revision-tracker demos overlay-images-only\n@@ -146,1 +146,1 @@\n-profiles: source-tips jdk hotspot profiles-only\n+profiles: create-source-revision-tracker jdk hotspot profiles-only\n@@ -199,7 +199,2 @@\n-# Stores the tips for each repository. This file is be used when constructing the jdk image and can be\n-# used to track the exact sources used to build that image.\n-source-tips: $(OUTPUT_ROOT)\/source_tips\n-$(OUTPUT_ROOT)\/source_tips: FRC\n-\t@$(MKDIR) -p $(@D)\n-\t@$(RM) $@\n-\t@$(call GetSourceTips)\n+store-source-revision:\n+\t+($(CD) $(SRC_ROOT)\/make && $(MAKE) $(MAKE_ARGS) -f SourceRevision.gmk store-source-revision)\n@@ -207,0 +202,2 @@\n+create-source-revision-tracker:\n+\t+($(CD) $(SRC_ROOT)\/make && $(MAKE) $(MAKE_ARGS) -f SourceRevision.gmk create-source-revision-tracker)\n@@ -210,1 +207,1 @@\n-\t@($(CD) $(OUTPUT_ROOT) && $(RM) -r tmp source_tips build.log* build-trace*.log*)\n+\t@($(CD) $(OUTPUT_ROOT) && $(RM) -r tmp $(wildcard $(patsubst $(OUTPUT_ROOT)\/%,%,$(SOURCE_REVISION_TRACKER))) build.log* build-trace*.log*)\n@@ -268,0 +265,1 @@\n+.PHONY: store-source-revision create-source-revision-tracker\n","filename":"make\/Main.gmk","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,163 @@\n+#\n+# Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+default: all\n+\n+include $(SPEC)\n+include MakeBase.gmk\n+\n+################################################################################\n+# Keep track of what source revision is used to create the build, by creating\n+# a tracker file in the output directory. This tracker file is included in the\n+# source image, and can be used to recreate the source revision used.\n+#\n+# We're either building directly from an SCM repository, and if so, use the\n+# current revision from that SCM. Otherwise, we are building from a source\n+# bundle. As a part of creating this source bundle, the current SCM revisions of\n+# all repos will be stored in a file in the top dir, which is then used when\n+# creating the tracker file.\n+\n+STORED_SOURCE_REVISION := $(TOPDIR)\/.src-rev\n+\n+USE_SCM := false\n+ifneq ($(and $(HG), $(wildcard $(TOPDIR)\/.hg)), )\n+  USE_SCM := true\n+  SCM_DIR := .hg\n+  ID_COMMAND := $(PRINTF) \"hg:%s\" \"$$($(HG) id -i)\"\n+else ifneq ($(and $(GIT), $(wildcard $(TOPDIR)\/.git)), )\n+  USE_SCM := true\n+  SCM_DIR := .git\n+  ID_COMMAND := $(PRINTF) \"git:%s%s\\n\" \\\n+      \"$$(git log -n1 --format=%H | cut -c1-12)\" \\\n+      \"$$(if test -n \"$$(git status --porcelain)\"; then printf '+'; fi)\"\n+endif\n+\n+ifeq ($(USE_SCM), true)\n+\n+  # Verify that the entire forest is consistent\n+  $(foreach repo, $(call FindAllReposRel), \\\n+    $(if $(wildcard $(TOPDIR)\/$(repo)\/$(SCM_DIR)),, \\\n+        $(error Inconsistent revision control: $(repo) is missing $(SCM_DIR) directory)) \\\n+  )\n+\n+  # Replace \".\" with \"_top\" and \"\/\" with \"-\"\n+  MakeFilenameFromRepo = \\\n+      $(strip $(subst .,top, $(subst \/,-, $1)))\n+\n+  ################################################################################\n+  # SetupGetRevisionForRepo defines a make rule for creating a file containing\n+  # the name of the repository and the output of the scm command for that\n+  # repository.\n+  #\n+  # Argument 1 is the relative path to the repository from the top dir.\n+  #\n+  define SetupGetRevisionForRepo\n+    $(call LogSetupMacroEntry,SetupGetRevisionForRepo($(strip $1)))\n+    $(if $(2),$(error Internal makefile error: Too many arguments to SetupGetRevisionForRepo, please update SourceRevision.gmk))\n+\n+    $(call $(0)Body,$(strip $1))\n+  endef\n+\n+  define SetupGetRevisionForRepoBody\n+    $1_REPO_PATH :=  $$(TOPDIR)\/$$(strip $1)\n+    $1_FILENAME := $$(call MakeFilenameFromRepo, $1)\n+\n+    $$(OUTPUT_ROOT)\/src-rev\/$$($1_FILENAME): FRC\n+\t$$(eval $$(call MakeDir, $$(@D)))\n+\t$$(ECHO) $$(strip $1):`$$(CD) $$($1_REPO_PATH) && $$(ID_COMMAND)` > $$@\n+\n+    REPO_REVISIONS += $$(OUTPUT_ROOT)\/src-rev\/$$($1_FILENAME)\n+  endef\n+\n+  # Setup rules for all repos. This makes sure all the \"hg id\" calls are made\n+  # in parallel.\n+  $(foreach repo, $(call FindAllReposRel), \\\n+    $(eval $(call SetupGetRevisionForRepo, $(repo))) \\\n+  )\n+\n+  # Create a complete source revision output file from all repos\n+  # Param 1: The output file\n+  define CreateSourceRevisionFile\n+    $1: $$(REPO_REVISIONS)\n+\t$$(eval $$(call MakeDir, $$(@D)))\n+\t$$(ECHO) `$$(CAT) $$(REPO_REVISIONS)` > $$@.tmp\n+\tif [ ! -f $$@ ] || [ \"`$$(CAT) $$@`\" != \"`$$(CAT) $$@.tmp`\" ]; then \\\n+\t  $$(MV) $$@.tmp $$@ ; \\\n+\telse \\\n+\t  $$(RM) $$@.tmp ; \\\n+\tfi\n+  endef\n+\n+  $(eval $(call CreateSourceRevisionFile, $(STORED_SOURCE_REVISION)))\n+\n+  scm-store-source-revision: $(STORED_SOURCE_REVISION)\n+\n+  $(eval $(call CreateSourceRevisionFile, $(SOURCE_REVISION_TRACKER)))\n+\n+  scm-create-source-revision-tracker: $(SOURCE_REVISION_TRACKER)\n+\n+  STORE_SOURCE_REVISION_TARGET := scm-store-source-revision\n+  CREATE_SOURCE_REVISION_TRACKER_TARGET := scm-create-source-revision-tracker\n+\n+  .PHONY: scm-store-source-revision scm-create-source-revision-tracker\n+\n+else\n+  # Not using any SCM\n+\n+  ifneq ($(wildcard $(STORED_SOURCE_REVISION)), )\n+    # We have a stored source revision (.src-rev)\n+\n+    src-store-source-revision:\n+\t$(ECHO) $(LOG_WARN) Warning: No SCM configuration present, not updating .src-rev\n+\n+    $(SOURCE_REVISION_TRACKER): $(STORED_SOURCE_REVISION)\n+\t$(install-file)\n+\n+    src-create-source-revision-tracker: $(SOURCE_REVISION_TRACKER)\n+  else\n+    src-store-source-revision:\n+\t$(ECHO) $(LOG_WARN) Error: No SCM configuration present, cannot create .src-rev\n+\texit 2\n+\n+    src-create-source-revision-tracker:\n+\t$(ECHO) $(LOG_WARN) Warning: No SCM configuration present and no .src-rev\n+  endif\n+\n+  STORE_SOURCE_REVISION_TARGET := src-store-source-revision\n+  CREATE_SOURCE_REVISION_TRACKER_TARGET := src-create-source-revision-tracker\n+\n+  .PHONY: src-store-source-revision src-create-source-revision-tracker\n+\n+endif\n+\n+all: store-source-revision create-source-revision-tracker\n+\n+store-source-revision: $(STORE_SOURCE_REVISION_TARGET)\n+\n+create-source-revision-tracker: $(CREATE_SOURCE_REVISION_TRACKER_TARGET)\n+\n+FRC: # Force target\n+\n+.PHONY: all store-source-revision create-source-revision-tracker\n","filename":"make\/SourceRevision.gmk","additions":163,"deletions":0,"binary":false,"changes":163,"status":"added"},{"patch":"@@ -296,32 +296,0 @@\n-# The source ids can come from the SCM, or in the files\n-# $(SCM_TIP_FILENAME) which contains the id but is also positioned in the same\n-# directory as the original $(SCM_DIR) directory.\n-ifneq ($(and $(HG), $(wildcard $(TOPDIR)\/.hg)), )\n-  SCM := hg\n-  SCM_VERSION := $(shell $(HG) version 2> \/dev\/null)\n-  SCM_DIR :=.hg\n-  SCM_TIP_FILENAME := .hgtip\n-  ID_COMMAND := $(PRINTF) \"hg:%s\" \"$$( $(HG) id -i)\"\n-else ifneq ($(and $(GIT), $(wildcard $(TOPDIR)\/.git)), )\n-  SCM := git\n-  SCM_VERSION := $(shell $(GIT) version 2> \/dev\/null)\n-  SCM_DIR :=.git\n-  SCM_TIP_FILENAME := .gittip\n-  ID_COMMAND := $(PRINTF) \"git:%s%s\" \\\n-      \"$$( $(GIT) log -n1 --format=%H | cut -c1-12)\" \\\n-      \"$$(if test -n \"$$( $(GIT) status --porcelain)\"; then printf '+'; fi)\"\n-endif\n-SCM_TIP_FILECMD := $(PRINTF) \"$(SCM):%s\" \\\n-\t        \"$$( $(CAT) $(SCM_TIP_FILENAME) )\"\n-\n-\n-# Emit the scm:id pair to $@\n-define GetSourceTips\n-\t$(CD) $(SRC_ROOT) ; \\\n-\tif [ -d $(SCM_DIR) -a \"$(SCM_VERSION)\" != \"\" ] ; then \\\n-\t  $(ID_COMMAND) >> $@ ; \\\n-\telif [ -f $(SCM_TIP_FILENAME) ] ; then \\\n-          $(SCM_TIP_FILECMD) >> $@ ; \\\n-\tfi;\n-\t$(PRINTF) \"\\n\" >> $@\n-endef\n@@ -329,5 +297,14 @@\n-# Create the SCM_TIP_FILENAME file\n-define CreateScmTip\n-\t$(ID_COMMAND) > $(SCM_TIP_FILENAME); \\\n-\t$(ECHO) $(SCM_TIP_FILENAME)\n-endef\n+# A file containing a way to uniquely identify the source code revision that\n+# the build was created from\n+SOURCE_REVISION_TRACKER := $(OUTPUT_ROOT)\/src-rev\/source-revision-tracker\n+\n+# Locate all hg repositories included in the forest, as absolute paths\n+FindAllReposAbs = \\\n+    $(strip $(sort $(dir $(filter-out $(SRC_ROOT)\/build\/%, $(wildcard \\\n+        $(addprefix $(SRC_ROOT)\/, .hg *\/.hg *\/*\/.hg *\/*\/*\/.hg) \\\n+        $(addprefix $(SRC_ROOT)\/, .git *\/.git *\/*\/.git *\/*\/*\/.git *\/*\/*\/*\/.git) \\\n+    )))))\n+\n+# Locate all hg repositories included in the forest, as relative paths\n+FindAllReposRel = \\\n+    $(strip $(subst $(SRC_ROOT)\/,.,$(patsubst $(SRC_ROOT)\/%\/, %, $(FindAllReposAbs))))\n","filename":"make\/common\/MakeBase.gmk","additions":14,"deletions":37,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -3,1 +3,0 @@\n-^.hgtip\n","filename":"nashorn\/.hgignore","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}