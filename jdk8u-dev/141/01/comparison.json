{"files":[{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Frame;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import jdk.testlibrary.OSInfo;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+\/*\n+ * @test 1.2 98\/08\/05\n+ * @bug 4373478 8079255\n+ * @summary Test mouse wheel functionality of Robot\n+ * @author bchristi: area=Robot\n+ * @library ..\/..\/..\/..\/lib\/testlibrary\n+ * @build jdk.testlibrary.OSInfo\n+ * @run main RobotWheelTest\n+ *\/\n+public class RobotWheelTest {\n+\n+    private static final int NUMTESTS = 20;\n+\n+    private static AtomicInteger wheelRotation = new AtomicInteger();\n+    private static int wheelSign = OSInfo.getOSType().equals(OSInfo.OSType.MACOSX) ? -1 : 1;\n+\n+    static Robot robot;\n+\n+    static void waitTillSuccess(int i) {\n+        boolean success = false;\n+\n+        for (int t = 0; t < 5; t++) {\n+            if (i == wheelSign * wheelRotation.get()) {\n+                success = true;\n+                break;\n+            }\n+            System.out.printf(\n+                    \"attempt #%d failed. wheelRotation = %d, expected value = %d\\n\",\n+                    t, wheelRotation.get(), i\n+            );\n+            robot.delay(100);\n+        }\n+\n+        if (!success) {\n+            throw new RuntimeException(\"wheelRotation = \" + wheelRotation.get()\n+                    + \", expected value = \" + i);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+\n+        Frame frame = null;\n+        try {\n+            frame = new Frame();\n+            frame.setSize(200, 200);\n+            Button button = new Button(\"WheelButton\");\n+            button.addMouseWheelListener(e -> wheelRotation.addAndGet(e.getWheelRotation()));\n+            frame.add(button);\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n+\n+            robot.setAutoDelay(100);\n+            robot.waitForIdle();\n+\n+            Rectangle bounds = frame.getBounds();\n+            int centerX = bounds.x + bounds.width \/ 2;\n+            int centerY = bounds.y + bounds.height \/ 2;\n+            robot.mouseMove(centerX, centerY);\n+            robot.waitForIdle();\n+\n+            for (int i = -NUMTESTS; i <= NUMTESTS; i++) {\n+                if (i == 0) {\n+                    continue;\n+                }\n+\n+                wheelRotation.set(0);\n+\n+                robot.mouseWheel(i);\n+                robot.waitForIdle();\n+\n+                waitTillSuccess(i);\n+            }\n+        } finally {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"jdk\/test\/java\/awt\/Robot\/RobotWheelTest\/RobotWheelTest.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"}]}