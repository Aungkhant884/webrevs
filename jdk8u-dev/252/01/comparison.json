{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Red Hat Inc.\n+ * Copyright (c) 2020, 2022, Red Hat Inc.\n@@ -26,0 +26,1 @@\n+ * @bug 8287107\n@@ -85,0 +86,3 @@\n+    private Path cgroupv2CgInfoNoZeroHierarchyOnlyFreezer;\n+    private Path cgroupv2MntInfoNoZeroHierarchyOnlyFreezer;\n+    private Path cgroupv2SelfNoZeroHierarchyOnlyFreezer;\n@@ -201,0 +205,24 @@\n+    \/\/ We have a mix of V1 and V2 controllers, but none of the V1 controllers\n+    \/\/ are used by Java, so the JDK should start in V2 mode.\n+    private String cgroupsNonZeroHierarchyOnlyFreezer =\n+            \"#subsys_name hierarchy  num_cgroups  enabled\\n\" +\n+            \"cpuset  0  171  1\\n\" +\n+            \"cpu  0  171  1\\n\" +\n+            \"cpuacct  0  171  1\\n\" +\n+            \"blkio  0  171  1\\n\" +\n+            \"memory  0  171  1\\n\" +\n+            \"devices  0  171  1\\n\" +\n+            \"freezer  1  1  1\\n\" +\n+            \"net_cls  0  171  1\\n\" +\n+            \"perf_event  0  171  1\\n\" +\n+            \"net_prio  0  171  1\\n\" +\n+            \"hugetlb  0  171  1\\n\" +\n+            \"pids  0  171  1\\n\" +\n+            \"rdma  0  171  1\\n\" +\n+            \"misc  0  171  1\\n\";\n+    private String cgroupv1SelfOnlyFreezerContent = \"1:freezer:\/\\n\" +\n+            \"0::\/user.slice\/user-1000.slice\/session-2.scope\";\n+    private String mntInfoOnlyFreezerInV1 =\n+            \"32 23 0:27 \/ \/sys\/fs\/cgroup rw,nosuid,nodev,noexec,relatime shared:9 - cgroup2 cgroup2 rw,nsdelegate,memory_recursiveprot\\n\" +\n+            \"911 32 0:47 \/ \/sys\/fs\/cgroup\/freezer rw,relatime shared:476 - cgroup freezer rw,freezer\\n\";\n+\n@@ -209,1 +237,1 @@\n-            Files.write(cgroupv1MntInfoZeroHierarchy, mntInfoEmpty.getBytes());\n+            Files.write(cgroupv1MntInfoZeroHierarchy, mntInfoEmpty.getBytes(StandardCharsets.UTF_8));\n@@ -212,1 +240,1 @@\n-            Files.write(cgroupv2MntInfoZeroHierarchy, mntInfoCgroupsV2Only.getBytes());\n+            Files.write(cgroupv2MntInfoZeroHierarchy, mntInfoCgroupsV2Only.getBytes(StandardCharsets.UTF_8));\n@@ -215,1 +243,1 @@\n-            Files.write(cgroupv2MntInfoDouble, mntInfoCgroupsV2Double.getBytes());\n+            Files.write(cgroupv2MntInfoDouble, mntInfoCgroupsV2Double.getBytes(StandardCharsets.UTF_8));\n@@ -218,1 +246,1 @@\n-            Files.write(cgroupv2MntInfoDouble2, mntInfoCgroupsV2Double2.getBytes());\n+            Files.write(cgroupv2MntInfoDouble2, mntInfoCgroupsV2Double2.getBytes(StandardCharsets.UTF_8));\n@@ -221,1 +249,1 @@\n-            Files.write(cgroupv1CgInfoNonZeroHierarchy, cgroupsNonZeroHierarchy.getBytes());\n+            Files.write(cgroupv1CgInfoNonZeroHierarchy, cgroupsNonZeroHierarchy.getBytes(StandardCharsets.UTF_8));\n@@ -224,1 +252,1 @@\n-            Files.write(cgroupv1MntInfoNonZeroHierarchy, mntInfoHybrid.getBytes());\n+            Files.write(cgroupv1MntInfoNonZeroHierarchy, mntInfoHybrid.getBytes(StandardCharsets.UTF_8));\n@@ -227,1 +255,1 @@\n-            Files.write(cgroupv1MntInfoNonZeroHierarchyOtherOrder, mntInfoHybridFlippedOrder.getBytes());\n+            Files.write(cgroupv1MntInfoNonZeroHierarchyOtherOrder, mntInfoHybridFlippedOrder.getBytes(StandardCharsets.UTF_8));\n@@ -230,1 +258,1 @@\n-            Files.write(cgroupV1SelfCgroup, procSelfCgroupHybridContent.getBytes());\n+            Files.write(cgroupV1SelfCgroup, procSelfCgroupHybridContent.getBytes(StandardCharsets.UTF_8));\n@@ -233,1 +261,1 @@\n-            Files.write(cgroupV2SelfCgroup, procSelfCgroupV2UnifiedContent.getBytes());\n+            Files.write(cgroupV2SelfCgroup, procSelfCgroupV2UnifiedContent.getBytes(StandardCharsets.UTF_8));\n@@ -236,1 +264,1 @@\n-            Files.write(cgroupv1MntInfoMissingMemoryController, mntInfoHybridMissingMemory.getBytes());\n+            Files.write(cgroupv1MntInfoMissingMemoryController, mntInfoHybridMissingMemory.getBytes(StandardCharsets.UTF_8));\n@@ -239,1 +267,1 @@\n-            Files.write(cgroupV2MntInfoMissingCgroupv2, mntInfoHybridStub.getBytes());\n+            Files.write(cgroupV2MntInfoMissingCgroupv2, mntInfoHybridStub.getBytes(StandardCharsets.UTF_8));\n@@ -242,1 +270,1 @@\n-            Files.write(cgroupv1MntInfoDoubleCpuset, mntInfoCgroupv1DoubleCpuset.getBytes());\n+            Files.write(cgroupv1MntInfoDoubleCpuset, mntInfoCgroupv1DoubleCpuset.getBytes(StandardCharsets.UTF_8));\n@@ -245,1 +273,1 @@\n-            Files.write(cgroupv1MntInfoDoubleCpuset2, mntInfoCgroupv1DoubleCpuset2.getBytes());\n+            Files.write(cgroupv1MntInfoDoubleCpuset2, mntInfoCgroupv1DoubleCpuset2.getBytes(StandardCharsets.UTF_8));\n@@ -248,1 +276,1 @@\n-            Files.write(cgroupv1MntInfoDoubleMemory, mntInfoCgroupv1DoubleMemory.getBytes());\n+            Files.write(cgroupv1MntInfoDoubleMemory, mntInfoCgroupv1DoubleMemory.getBytes(StandardCharsets.UTF_8));\n@@ -251,1 +279,1 @@\n-            Files.write(cgroupv1MntInfoDoubleMemory2, mntInfoCgroupv1DoubleMemory2.getBytes());\n+            Files.write(cgroupv1MntInfoDoubleMemory2, mntInfoCgroupv1DoubleMemory2.getBytes(StandardCharsets.UTF_8));\n@@ -254,1 +282,1 @@\n-            Files.write(cgroupv1MntInfoDoubleCpu, mntInfoCgroupv1DoubleCpu.getBytes());\n+            Files.write(cgroupv1MntInfoDoubleCpu, mntInfoCgroupv1DoubleCpu.getBytes(StandardCharsets.UTF_8));\n@@ -257,1 +285,1 @@\n-            Files.write(cgroupv1MntInfoDoubleCpu2, mntInfoCgroupv1DoubleCpu2.getBytes());\n+            Files.write(cgroupv1MntInfoDoubleCpu2, mntInfoCgroupv1DoubleCpu2.getBytes(StandardCharsets.UTF_8));\n@@ -260,1 +288,1 @@\n-            Files.write(cgroupv1MntInfoDoublePids, mntInfoCgroupv1DoublePids.getBytes());\n+            Files.write(cgroupv1MntInfoDoublePids, mntInfoCgroupv1DoublePids.getBytes(StandardCharsets.UTF_8));\n@@ -263,1 +291,1 @@\n-            Files.write(cgroupv1MntInfoDoublePids2, mntInfoCgroupv1DoublePids2.getBytes());\n+            Files.write(cgroupv1MntInfoDoublePids2, mntInfoCgroupv1DoublePids2.getBytes(StandardCharsets.UTF_8));\n@@ -266,1 +294,1 @@\n-            Files.write(cgroupv1MntInfoSystemdOnly, mntInfoCgroupsV1SystemdOnly.getBytes());\n+            Files.write(cgroupv1MntInfoSystemdOnly, mntInfoCgroupsV1SystemdOnly.getBytes(StandardCharsets.UTF_8));\n@@ -269,1 +297,1 @@\n-            Files.write(cgroupv1CgroupsJoinControllers, cgroupsNonZeroJoinControllers.getBytes());\n+            Files.write(cgroupv1CgroupsJoinControllers, cgroupsNonZeroJoinControllers.getBytes(StandardCharsets.UTF_8));\n@@ -272,1 +300,1 @@\n-            Files.write(cgroupv1SelfCgroupsJoinControllers, procSelfCgroupV1JoinControllers.getBytes());\n+            Files.write(cgroupv1SelfCgroupsJoinControllers, procSelfCgroupV1JoinControllers.getBytes(StandardCharsets.UTF_8));\n@@ -275,1 +303,10 @@\n-            Files.write(cgroupv1MountInfoJoinControllers, mntInfoCgroupv1JoinControllers.getBytes());\n+            Files.write(cgroupv1MountInfoJoinControllers, mntInfoCgroupv1JoinControllers.getBytes(StandardCharsets.UTF_8));\n+\n+            cgroupv2CgInfoNoZeroHierarchyOnlyFreezer = Paths.get(existingDirectory.toString(), \"cgroups_cgv2_non_zero_only_freezer\");\n+            Files.write(cgroupv2CgInfoNoZeroHierarchyOnlyFreezer, cgroupsNonZeroHierarchyOnlyFreezer.getBytes(StandardCharsets.UTF_8));\n+\n+            cgroupv2SelfNoZeroHierarchyOnlyFreezer = Paths.get(existingDirectory.toString(), \"self_cgroup_non_zero_only_freezer\");\n+            Files.write(cgroupv2SelfNoZeroHierarchyOnlyFreezer, cgroupv1SelfOnlyFreezerContent.getBytes(StandardCharsets.UTF_8));\n+\n+            cgroupv2MntInfoNoZeroHierarchyOnlyFreezer = Paths.get(existingDirectory.toString(), \"self_mountinfo_cgv2_non_zero_only_freezer\");\n+            Files.write(cgroupv2MntInfoNoZeroHierarchyOnlyFreezer, mntInfoOnlyFreezerInV1.getBytes(StandardCharsets.UTF_8));\n@@ -402,0 +439,9 @@\n+    public void testNonZeroHierarchyOnlyFreezer(WhiteBox wb) {\n+        String cgroups = cgroupv2CgInfoNoZeroHierarchyOnlyFreezer.toString();\n+        String mountInfo = cgroupv2MntInfoNoZeroHierarchyOnlyFreezer.toString();\n+        String selfCgroup = cgroupv2SelfNoZeroHierarchyOnlyFreezer.toString();\n+        int retval = wb.validateCgroup(cgroups, selfCgroup, mountInfo);\n+        Asserts.assertEQ(CGROUPS_V2, retval, \"All V1 controllers are ignored\");\n+        Asserts.assertTrue(isValidCgroup(retval));\n+        System.out.println(\"testNonZeroHierarchyOnlyFreezer PASSED!\");\n+    }\n@@ -426,0 +472,1 @@\n+            test.testNonZeroHierarchyOnlyFreezer(wb);\n","filename":"hotspot\/test\/runtime\/containers\/cgroup\/CgroupSubsystemFactory.java","additions":71,"deletions":24,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -142,0 +142,4 @@\n+            \/\/ Only the following controllers are important to Java. All\n+            \/\/ other controllers (such as freezer) are ignored and\n+            \/\/ are not considered in the checks below for\n+            \/\/ anyCgroupsV1Controller\/anyCgroupsV2Controller.\n@@ -218,0 +222,6 @@\n+        String name = tokens[1];\n+        if (!name.equals(\"\")) {\n+            \/\/ This must be a v1 controller that we have ignored (e.g., freezer)\n+            assert infos.get(name) == null;\n+            return;\n+        }\n","filename":"jdk\/src\/linux\/classes\/jdk\/internal\/platform\/CgroupSubsystemFactory.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-            Files.write(longFile, longValueContents.getBytes());\n+            Files.write(longFile, longValueContents.getBytes(StandardCharsets.UTF_8));\n@@ -86,1 +86,1 @@\n-            Files.write(doubleFile, doubleValueContents.getBytes());\n+            Files.write(doubleFile, doubleValueContents.getBytes(StandardCharsets.UTF_8));\n@@ -88,1 +88,1 @@\n-            Files.write(longEntryFile, longEntryContents.getBytes());\n+            Files.write(longEntryFile, longEntryContents.getBytes(StandardCharsets.UTF_8));\n@@ -90,1 +90,1 @@\n-            Files.write(longMatchingLine, longValueMatchingLineContents.getBytes());\n+            Files.write(longMatchingLine, longValueMatchingLineContents.getBytes(StandardCharsets.UTF_8));\n","filename":"jdk\/test\/jdk\/internal\/platform\/cgroup\/TestCgroupSubsystemController.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Red Hat Inc.\n+ * Copyright (c) 2020, 2022, Red Hat Inc.\n@@ -53,1 +53,1 @@\n- * @bug 8293540\n+ * @bug 8293540 8287107\n@@ -57,1 +57,1 @@\n- * @run junit\/othervm TestCgroupSubsystemFactory\n+ * @run junit\/othervm -esa TestCgroupSubsystemFactory\n@@ -81,0 +81,3 @@\n+    private Path cgroupv2CgInfoNoZeroHierarchyOnlyFreezer;\n+    private Path cgroupv2MntInfoNoZeroHierarchyOnlyFreezer;\n+    private Path cgroupv2SelfNoZeroHierarchyOnlyFreezer;\n@@ -225,0 +228,24 @@\n+    \/\/ We have a mix of V1 and V2 controllers, but none of the V1 controllers\n+    \/\/ are used by Java, so the JDK should start in V2 mode.\n+    private String cgroupsNonZeroHierarchyOnlyFreezer =\n+            \"#subsys_name hierarchy  num_cgroups  enabled\\n\" +\n+            \"cpuset  0  171  1\\n\" +\n+            \"cpu  0  171  1\\n\" +\n+            \"cpuacct  0  171  1\\n\" +\n+            \"blkio  0  171  1\\n\" +\n+            \"memory  0  171  1\\n\" +\n+            \"devices  0  171  1\\n\" +\n+            \"freezer  1  1  1\\n\" +\n+            \"net_cls  0  171  1\\n\" +\n+            \"perf_event  0  171  1\\n\" +\n+            \"net_prio  0  171  1\\n\" +\n+            \"hugetlb  0  171  1\\n\" +\n+            \"pids  0  171  1\\n\" +\n+            \"rdma  0  171  1\\n\" +\n+            \"misc  0  171  1\\n\";\n+    private String cgroupv1SelfOnlyFreezerContent = \"1:freezer:\/\\n\" +\n+            \"0::\/user.slice\/user-1000.slice\/session-2.scope\";\n+    private String mntInfoOnlyFreezerInV1 =\n+            \"32 23 0:27 \/ \/sys\/fs\/cgroup rw,nosuid,nodev,noexec,relatime shared:9 - cgroup2 cgroup2 rw,nsdelegate,memory_recursiveprot\\n\" +\n+            \"911 32 0:47 \/ \/sys\/fs\/cgroup\/freezer rw,relatime shared:476 - cgroup freezer rw,freezer\\n\";\n+\n@@ -234,1 +261,1 @@\n-            Files.write(cgroupv1MntInfoZeroHierarchy, mntInfoEmpty.getBytes());\n+            Files.write(cgroupv1MntInfoZeroHierarchy, mntInfoEmpty.getBytes(StandardCharsets.UTF_8));\n@@ -237,1 +264,1 @@\n-            Files.write(cgroupv2MntInfoZeroHierarchy, mntInfoCgroupsV2Only.getBytes());\n+            Files.write(cgroupv2MntInfoZeroHierarchy, mntInfoCgroupsV2Only.getBytes(StandardCharsets.UTF_8));\n@@ -240,1 +267,1 @@\n-            Files.write(cgroupv1CgInfoNonZeroHierarchy, cgroupsNonZeroHierarchy.getBytes());\n+            Files.write(cgroupv1CgInfoNonZeroHierarchy, cgroupsNonZeroHierarchy.getBytes(StandardCharsets.UTF_8));\n@@ -243,1 +270,1 @@\n-            Files.write(cgroupv1MntInfoNonZeroHierarchy, mntInfoHybrid.getBytes());\n+            Files.write(cgroupv1MntInfoNonZeroHierarchy, mntInfoHybrid.getBytes(StandardCharsets.UTF_8));\n@@ -246,1 +273,1 @@\n-            Files.write(cgroupv1MntInfoSystemdOnly, mntInfoCgroupsV1SystemdOnly.getBytes());\n+            Files.write(cgroupv1MntInfoSystemdOnly, mntInfoCgroupsV1SystemdOnly.getBytes(StandardCharsets.UTF_8));\n@@ -249,1 +276,1 @@\n-            Files.write(cgroupv1MntInfoDoubleControllers, mntInfoCgroupsV1DoubleControllers.getBytes());\n+            Files.write(cgroupv1MntInfoDoubleControllers, mntInfoCgroupsV1DoubleControllers.getBytes(StandardCharsets.UTF_8));\n@@ -252,1 +279,1 @@\n-            Files.write(cgroupv1MntInfoDoubleControllers2, mntInfoCgroupsV1DoubleControllers2.getBytes());\n+            Files.write(cgroupv1MntInfoDoubleControllers2, mntInfoCgroupsV1DoubleControllers2.getBytes(StandardCharsets.UTF_8));\n@@ -255,1 +282,1 @@\n-            Files.write(cgroupv1CgroupsJoinControllers, cgroupsNonZeroJoinControllers.getBytes());\n+            Files.write(cgroupv1CgroupsJoinControllers, cgroupsNonZeroJoinControllers.getBytes(StandardCharsets.UTF_8));\n@@ -258,1 +285,1 @@\n-            Files.write(cgroupv1MountInfoJoinControllers, mntInfoCgroupv1JoinControllers.getBytes());\n+            Files.write(cgroupv1MountInfoJoinControllers, mntInfoCgroupv1JoinControllers.getBytes(StandardCharsets.UTF_8));\n@@ -261,1 +288,1 @@\n-            Files.write(cgroupv1MntInfoColonsHierarchy, mntInfoColons.getBytes());\n+            Files.write(cgroupv1MntInfoColonsHierarchy, mntInfoColons.getBytes(StandardCharsets.UTF_8));\n@@ -264,1 +291,1 @@\n-            Files.write(cgroupv1SelfCgroup, cgroupv1SelfCgroupContent.getBytes());\n+            Files.write(cgroupv1SelfCgroup, cgroupv1SelfCgroupContent.getBytes(StandardCharsets.UTF_8));\n@@ -267,1 +294,1 @@\n-            Files.write(cgroupv1SelfColons, cgroupv1SelfColonsContent.getBytes());\n+            Files.write(cgroupv1SelfColons, cgroupv1SelfColonsContent.getBytes(StandardCharsets.UTF_8));\n@@ -270,1 +297,1 @@\n-            Files.write(cgroupv2SelfCgroup, cgroupv2SelfCgroupContent.getBytes());\n+            Files.write(cgroupv2SelfCgroup, cgroupv2SelfCgroupContent.getBytes(StandardCharsets.UTF_8));\n@@ -273,1 +300,1 @@\n-            Files.write(cgroupv1SelfCgroupJoinCtrl, selfCgroupNonZeroJoinControllers.getBytes());\n+            Files.write(cgroupv1SelfCgroupJoinCtrl, selfCgroupNonZeroJoinControllers.getBytes(StandardCharsets.UTF_8));\n@@ -276,1 +303,1 @@\n-            Files.write(cgroupv1CgroupsOnlyCPUCtrl, cgroupsNonZeroCpuControllerOnly.getBytes());\n+            Files.write(cgroupv1CgroupsOnlyCPUCtrl, cgroupsNonZeroCpuControllerOnly.getBytes(StandardCharsets.UTF_8));\n@@ -279,1 +306,1 @@\n-            Files.write(cgroupv1SelfCgroupsOnlyCPUCtrl, selfCgroupNonZeroCpuControllerOnly.getBytes());\n+            Files.write(cgroupv1SelfCgroupsOnlyCPUCtrl, selfCgroupNonZeroCpuControllerOnly.getBytes(StandardCharsets.UTF_8));\n@@ -282,1 +309,10 @@\n-            Files.write(cgroupv1MountInfoCgroupsOnlyCPUCtrl, mntInfoCpuOnly.getBytes());\n+            Files.write(cgroupv1MountInfoCgroupsOnlyCPUCtrl, mntInfoCpuOnly.getBytes(StandardCharsets.UTF_8));\n+\n+            cgroupv2CgInfoNoZeroHierarchyOnlyFreezer = Paths.get(existingDirectory.toString(), \"cgroups_cgv2_non_zero_only_freezer\");\n+            Files.write(cgroupv2CgInfoNoZeroHierarchyOnlyFreezer, cgroupsNonZeroHierarchyOnlyFreezer.getBytes(StandardCharsets.UTF_8));\n+\n+            cgroupv2SelfNoZeroHierarchyOnlyFreezer = Paths.get(existingDirectory.toString(), \"self_cgroup_non_zero_only_freezer\");\n+            Files.write(cgroupv2SelfNoZeroHierarchyOnlyFreezer, cgroupv1SelfOnlyFreezerContent.getBytes(StandardCharsets.UTF_8));\n+\n+            cgroupv2MntInfoNoZeroHierarchyOnlyFreezer = Paths.get(existingDirectory.toString(), \"self_mountinfo_cgv2_non_zero_only_freezer\");\n+            Files.write(cgroupv2MntInfoNoZeroHierarchyOnlyFreezer, mntInfoOnlyFreezerInV1.getBytes(StandardCharsets.UTF_8));\n@@ -416,0 +452,20 @@\n+    @Test\n+    public void testNonZeroHierarchyOnlyFreezer() throws IOException {\n+        String cgroups = cgroupv2CgInfoNoZeroHierarchyOnlyFreezer.toString();\n+        String mountInfo = cgroupv2MntInfoNoZeroHierarchyOnlyFreezer.toString();\n+        String selfCgroup = cgroupv2SelfNoZeroHierarchyOnlyFreezer.toString();\n+        Optional<CgroupTypeResult> result = CgroupSubsystemFactory.determineType(mountInfo, cgroups, selfCgroup);\n+\n+        assertTrue(\"Expected non-empty cgroup result\", result.isPresent());\n+        CgroupTypeResult res = result.get();\n+\n+        assertTrue(\"if all mounted v1 controllers are ignored, we should user cgroups v2\", res.isCgroupV2());\n+        CgroupInfo memoryInfo = res.getInfos().get(\"memory\");\n+        assertEquals(\"\/user.slice\/user-1000.slice\/session-2.scope\", memoryInfo.getCgroupPath());\n+        CgroupInfo cpuInfo = res.getInfos().get(\"cpu\");\n+        assertEquals(memoryInfo.getCgroupPath(), cpuInfo.getCgroupPath());\n+        assertEquals(memoryInfo.getMountPoint(), cpuInfo.getMountPoint());\n+        assertEquals(memoryInfo.getMountRoot(), cpuInfo.getMountRoot());\n+        assertEquals(\"\/sys\/fs\/cgroup\", cpuInfo.getMountPoint());\n+    }\n+\n","filename":"jdk\/test\/jdk\/internal\/platform\/cgroup\/TestCgroupSubsystemFactory.java","additions":76,"deletions":20,"binary":false,"changes":96,"status":"modified"}]}