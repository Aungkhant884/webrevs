{"files":[{"patch":"@@ -546,0 +546,4 @@\n+  jlong phys_mem = os::Linux::physical_memory();\n+  if (PrintContainerInfo) {\n+    tty->print_cr(\"total physical memory: \" JLONG_FORMAT, phys_mem);\n+  }\n@@ -547,0 +551,23 @@\n+\n+  if (mem_limit <= 0 || mem_limit >= phys_mem) {\n+    jlong read_mem_limit = mem_limit;\n+    const char *reason;\n+    if (mem_limit >= phys_mem) {\n+      \/\/ Exceeding physical memory is treated as unlimited. Cg v1's implementation\n+      \/\/ of read_memory_limit_in_bytes() caps this at phys_mem since Cg v1 has no\n+      \/\/ value to represent 'max'. Cg v2 may return a value >= phys_mem if e.g. the\n+      \/\/ container engine was started with a memory flag exceeding it.\n+      reason = \"ignored\";\n+      mem_limit = -1;\n+    } else if (OSCONTAINER_ERROR == mem_limit) {\n+      reason = \"failed\";\n+    } else {\n+      assert(mem_limit == -1, \"Expected unlimited\");\n+      reason = \"unlimited\";\n+    }\n+    if (PrintContainerInfo) {\n+      tty->print_cr(\"container memory limit %s: \" JLONG_FORMAT \", using host value \" JLONG_FORMAT,\n+                    reason, read_mem_limit, phys_mem);\n+    }\n+  }\n+\n","filename":"hotspot\/src\/os\/linux\/vm\/cgroupSubsystem_linux.cpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"os_linux.hpp\"\n@@ -107,1 +108,1 @@\n-  if (memlimit >= _unlimited_memory) {\n+  if (memlimit >= os::Linux::physical_memory()) {\n@@ -117,1 +118,1 @@\n-      if (hier_memlimit >= _unlimited_memory) {\n+      if (hier_memlimit >= os::Linux::physical_memory()) {\n@@ -133,0 +134,1 @@\n+  julong host_total_memsw;\n@@ -135,1 +137,2 @@\n-  if (memswlimit >= _unlimited_memory) {\n+  host_total_memsw = os::Linux::host_swap() + os::Linux::physical_memory();\n+  if (memswlimit >= host_total_memsw) {\n@@ -145,1 +148,1 @@\n-      if (hier_memlimit >= _unlimited_memory) {\n+      if (hier_memlimit >= host_total_memsw) {\n@@ -162,1 +165,1 @@\n-  if (memsoftlimit >= _unlimited_memory) {\n+  if (memsoftlimit >= os::Linux::physical_memory()) {\n","filename":"hotspot\/src\/os\/linux\/vm\/cgroupV1Subsystem_linux.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -97,2 +97,0 @@\n-    julong _unlimited_memory;\n-\n@@ -114,1 +112,0 @@\n-      _unlimited_memory = (LONG_MAX \/ os::vm_page_size()) * os::vm_page_size();\n","filename":"hotspot\/src\/os\/linux\/vm\/cgroupV1Subsystem_linux.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,2 +45,0 @@\n-  jlong mem_limit;\n-\n@@ -66,8 +64,0 @@\n-  \/\/ We need to update the amount of physical memory now that\n-  \/\/ cgroup subsystem files have been processed.\n-  if ((mem_limit = cgroup_subsystem->memory_limit_in_bytes()) > 0) {\n-    os::Linux::set_physical_memory(mem_limit);\n-    if (PrintContainerInfo) {\n-      tty->print_cr(\"Memory Limit is: \" JLONG_FORMAT, mem_limit);\n-    }\n-  }\n@@ -76,1 +66,0 @@\n-\n","filename":"hotspot\/src\/os\/linux\/vm\/osContainer_linux.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -187,8 +187,2 @@\n-    jlong mem_limit, mem_usage;\n-    if ((mem_limit = OSContainer::memory_limit_in_bytes()) < 1) {\n-      if (PrintContainerInfo) {\n-        tty->print_cr(\"container memory limit %s: \" JLONG_FORMAT \", using host value\",\n-                       mem_limit == OSCONTAINER_ERROR ? \"failed\" : \"unlimited\", mem_limit);\n-      }\n-    }\n-\n+    jlong mem_limit = OSContainer::memory_limit_in_bytes();\n+    jlong mem_usage;\n@@ -200,2 +194,1 @@\n-\n-    if (mem_limit > 0 && mem_usage > 0 ) {\n+    if (mem_limit > 0 && mem_usage > 0) {\n@@ -228,5 +221,0 @@\n-\n-    if (PrintContainerInfo) {\n-      tty->print_cr(\"container memory limit %s: \" JLONG_FORMAT \", using host value\",\n-                     mem_limit == OSCONTAINER_ERROR ? \"failed\" : \"unlimited\", mem_limit);\n-    }\n@@ -311,0 +299,8 @@\n+\/\/ Returns the amount of swap currently configured, in bytes.\n+\/\/ This can change at any time.\n+julong os::Linux::host_swap() {\n+  struct sysinfo si;\n+  sysinfo(&si);\n+  return (julong)si.totalswap;\n+}\n+\n","filename":"hotspot\/src\/os\/linux\/vm\/os_linux.cpp","additions":11,"deletions":15,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -84,2 +84,0 @@\n-  static julong physical_memory() { return _physical_memory; }\n-  static void set_physical_memory(julong phys_mem) { _physical_memory = phys_mem; }\n@@ -157,0 +155,3 @@\n+  static julong physical_memory() { return _physical_memory; }\n+  static julong host_swap();\n+\n","filename":"hotspot\/src\/os\/linux\/vm\/os_linux.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @bug 8146115 8292083\n@@ -39,0 +40,1 @@\n+import com.oracle.java.testlibrary.Asserts;\n@@ -75,0 +77,1 @@\n+            testContainerMemExceedsPhysical();\n@@ -93,0 +96,22 @@\n+    \/\/ JDK-8292083\n+    \/\/ Ensure that Java ignores container memory limit values above the host's physical memory.\n+    private static void testContainerMemExceedsPhysical()\n+            throws Exception {\n+\n+        Common.logNewTestCase(\"container memory limit exceeds physical memory\");\n+\n+        DockerRunOptions opts = Common.newOpts(imageName);\n+\n+        \/\/ first run: establish physical memory in test environment and derive\n+        \/\/ a bad value one power of ten larger\n+        String goodMem = Common.run(opts).firstMatch(\"total physical memory: (\\\\d+)\", 1);\n+        Asserts.assertNotNull(goodMem, \"no match for 'total physical memory' in trace output\");\n+        String badMem = goodMem + \"0\";\n+\n+        \/\/ second run: set a container memory limit to the bad value\n+        opts = Common.newOpts(imageName)\n+            .addDockerOpts(\"--memory\", badMem);\n+        Common.run(opts)\n+            .shouldMatch(\"container memory limit (ignored: \" + badMem + \"|unlimited: -1), using host value \" + goodMem);\n+    }\n+\n","filename":"hotspot\/test\/runtime\/containers\/docker\/TestMemoryAwareness.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}