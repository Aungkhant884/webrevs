{"files":[{"patch":"@@ -305,1 +305,0 @@\n-      any_cgroup_mounts_found = true;\n@@ -308,0 +307,1 @@\n+          any_cgroup_mounts_found = true;\n@@ -313,2 +313,21 @@\n-          assert(cg_infos[CPUSET_IDX]._mount_path == NULL, \"stomping of _mount_path\");\n-          cg_infos[CPUSET_IDX]._mount_path = os::strdup(tmpmount);\n+          any_cgroup_mounts_found = true;\n+          if (cg_infos[CPUSET_IDX]._mount_path != NULL) {\n+            \/\/ On some systems duplicate cpuset controllers get mounted in addition to\n+            \/\/ the main cgroup controllers most likely under \/sys\/fs\/cgroup. In that\n+            \/\/ case pick the one under \/sys\/fs\/cgroup and discard others.\n+            if (strstr(cg_infos[CPUSET_IDX]._mount_path, \"\/sys\/fs\/cgroup\") != cg_infos[CPUSET_IDX]._mount_path) {\n+              if (PrintContainerInfo) {\n+                tty->print_cr(\"Duplicate cpuset controllers detected. Picking %s, skipping %s.\",\n+                              tmpmount, cg_infos[CPUSET_IDX]._mount_path);\n+              }\n+              os::free(cg_infos[CPUSET_IDX]._mount_path);\n+              cg_infos[CPUSET_IDX]._mount_path = os::strdup(tmpmount);\n+            } else {\n+              if (PrintContainerInfo) {\n+                tty->print_cr(\"Duplicate cpuset controllers detected. Picking %s, skipping %s.\",\n+                              cg_infos[CPUSET_IDX]._mount_path, tmpmount);\n+              }\n+            }\n+          } else {\n+            cg_infos[CPUSET_IDX]._mount_path = os::strdup(tmpmount);\n+          }\n@@ -318,0 +337,1 @@\n+          any_cgroup_mounts_found = true;\n@@ -323,0 +343,1 @@\n+          any_cgroup_mounts_found = true;\n@@ -337,1 +358,1 @@\n-      tty->print_cr(\"No cgroup controllers mounted.\");\n+      tty->print_cr(\"No relevant cgroup controllers mounted.\");\n","filename":"hotspot\/src\/os\/linux\/vm\/cgroupSubsystem_linux.cpp","additions":25,"deletions":4,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -66,0 +66,3 @@\n+    private Path cgroupv1MntInfoDoubleCpuset;\n+    private Path cgroupv1MntInfoDoubleCpuset2;\n+    private Path cgroupv1MntInfoSystemdOnly;\n@@ -108,1 +111,1 @@\n-            \"44 30 0:40 \/ \/sys\/fs\/cgroup\/freezer rw,nosuid,nodev,noexec,relatime shared:16 - cgroup none rw,seclabel,freezer\";\n+            \"44 30 0:40 \/ \/sys\/fs\/cgroup\/freezer rw,nosuid,nodev,noexec,relatime shared:16 - cgroup none rw,seclabel,freezer\\n\";\n@@ -113,0 +116,3 @@\n+    private String mntInfoCgroupv1MoreCpusetLine = \"121 32 0:37 \/ \/cpusets rw,relatime shared:69 - cgroup none rw,cpuset\\n\";\n+    private String mntInfoCgroupv1DoubleCpuset = mntInfoCgroupv1MoreCpusetLine + mntInfoHybrid;\n+    private String mntInfoCgroupv1DoubleCpuset2 =  mntInfoHybrid + mntInfoCgroupv1MoreCpusetLine;\n@@ -129,0 +135,3 @@\n+    private String mntInfoCgroupsV1SystemdOnly =\n+            \"35 26 0:26 \/ \/sys\/fs\/cgroup\/systemd rw,nosuid,nodev,noexec,relatime - cgroup systemd rw,name=systemd\\n\" +\n+            \"26 18 0:19 \/ \/sys\/fs\/cgroup rw,relatime - tmpfs none rw,size=4k,mode=755\\n\";\n@@ -163,0 +172,9 @@\n+\n+            cgroupv1MntInfoDoubleCpuset = Paths.get(existingDirectory.toString(), \"mnt_info_cgroupv1_double_cpuset\");\n+            Files.write(cgroupv1MntInfoDoubleCpuset, mntInfoCgroupv1DoubleCpuset.getBytes());\n+\n+            cgroupv1MntInfoDoubleCpuset2 = Paths.get(existingDirectory.toString(), \"mnt_info_cgroupv1_double_cpuset2\");\n+            Files.write(cgroupv1MntInfoDoubleCpuset2, mntInfoCgroupv1DoubleCpuset2.getBytes());\n+\n+            cgroupv1MntInfoSystemdOnly = Paths.get(existingDirectory.toString(), \"mnt_info_cgroupv1_systemd_only\");\n+            Files.write(cgroupv1MntInfoSystemdOnly, mntInfoCgroupsV1SystemdOnly.getBytes());\n@@ -199,0 +217,20 @@\n+    public void testCgroupv1MultipleCpusetMounts(WhiteBox wb, Path mountInfo) {\n+        String procCgroups = cgroupv1CgInfoNonZeroHierarchy.toString();\n+        String procSelfCgroup = cgroupV1SelfCgroup.toString();\n+        String procSelfMountinfo = mountInfo.toString();\n+        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        Asserts.assertEQ(CGROUPS_V1, retval, \"Multiple cpuset controllers, but only one in \/sys\/fs\/cgroup\");\n+        Asserts.assertTrue(isValidCgroup(retval));\n+        System.out.println(\"testCgroupv1MultipleCpusetMounts PASSED!\");\n+    }\n+\n+    public void testCgroupv1SystemdOnly(WhiteBox wb) {\n+        String procCgroups = cgroupv1CgInfoZeroHierarchy.toString();\n+        String procSelfCgroup = cgroupV1SelfCgroup.toString();\n+        String procSelfMountinfo = cgroupv1MntInfoSystemdOnly.toString();\n+        int retval = wb.validateCgroup(procCgroups, procSelfCgroup, procSelfMountinfo);\n+        Asserts.assertEQ(INVALID_CGROUPS_NO_MOUNT, retval, \"Only systemd mounted. Invalid\");\n+        Asserts.assertFalse(isValidCgroup(retval));\n+        System.out.println(\"testCgroupv1SystemdOnly PASSED!\");\n+    }\n+\n@@ -265,0 +303,1 @@\n+            test.testCgroupv1SystemdOnly(wb);\n@@ -271,0 +310,2 @@\n+            test.testCgroupv1MultipleCpusetMounts(wb, test.cgroupv1MntInfoDoubleCpuset);\n+            test.testCgroupv1MultipleCpusetMounts(wb, test.cgroupv1MntInfoDoubleCpuset2);\n","filename":"hotspot\/test\/runtime\/containers\/cgroup\/CgroupSubsystemFactory.java","additions":42,"deletions":1,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -47,0 +49,25 @@\n+    \/*\n+     * From https:\/\/www.kernel.org\/doc\/Documentation\/filesystems\/proc.txt\n+     *\n+     *  36 35 98:0 \/mnt1 \/mnt2 rw,noatime master:1 - ext3 \/dev\/root rw,errors=continue\n+     *  (1)(2)(3)   (4)   (5)      (6)      (7)   (8) (9)   (10)         (11)\n+     *\n+     *  (1) mount ID:  unique identifier of the mount (may be reused after umount)\n+     *  (2) parent ID:  ID of parent (or of self for the top of the mount tree)\n+     *  (3) major:minor:  value of st_dev for files on filesystem\n+     *  (4) root:  root of the mount within the filesystem\n+     *  (5) mount point:  mount point relative to the process's root\n+     *  (6) mount options:  per mount options\n+     *  (7) optional fields:  zero or more fields of the form \"tag[:value]\"\n+     *  (8) separator:  marks the end of the optional fields\n+     *  (9) filesystem type:  name of filesystem of the form \"type[.subtype]\"\n+     *  (10) mount source:  filesystem specific information or \"none\"\n+     *  (11) super options:  per super block options\n+     *\/\n+    private static final Pattern MOUNTINFO_PATTERN = Pattern.compile(\n+        \"^[^\\\\s]+\\\\s+[^\\\\s]+\\\\s+[^\\\\s]+\\\\s+\" + \/\/ (1), (2), (3)\n+        \"[^\\\\s]+\\\\s+([^\\\\s]+)\\\\s+\" +           \/\/ (4), (5)     - group 1: mount point\n+        \"[^-]+-\\\\s+\" +                         \/\/ (6), (7), (8)\n+        \"([^\\\\s]+)\\\\s+\" +                      \/\/ (9)          - group 2: filesystem type\n+        \".*$\");                                \/\/ (10), (11)\n+\n@@ -112,2 +139,2 @@\n-        \/\/ If there are no mounted controllers in mountinfo, but we've only\n-        \/\/ seen 0 hierarchy IDs in \/proc\/cgroups, we are on a cgroups v1 system.\n+        \/\/ If there are no mounted, relevant cgroup controllers in mountinfo and only\n+        \/\/ 0 hierarchy IDs in \/proc\/cgroups have been seen, we are on a cgroups v1 system.\n@@ -115,1 +142,2 @@\n-        \/\/ information from mountinfo for the mounted controller paths anyway.\n+        \/\/ information from mountinfo for the mounted controller paths which we wouldn't\n+        \/\/ find anyway in that case.\n@@ -117,1 +145,1 @@\n-            boolean anyCgroupMounted = mntInfo.anyMatch(line -> line.contains(\"cgroup\"));\n+            boolean anyCgroupMounted = mntInfo.anyMatch(CgroupSubsystemFactory::isRelevantControllerMount);\n@@ -126,0 +154,25 @@\n+    private static boolean isRelevantControllerMount(String line) {\n+         Matcher lineMatcher = MOUNTINFO_PATTERN.matcher(line.trim());\n+         if (lineMatcher.matches()) {\n+             String mountPoint = lineMatcher.group(1);\n+             String fsType = lineMatcher.group(2);\n+             if (fsType.equals(\"cgroup\")) {\n+                 String filename = Paths.get(mountPoint).getFileName().toString();\n+                 for (String fn: filename.split(\",\")) {\n+                     switch (fn) {\n+                         case MEMORY_CTRL: \/\/ fall through\n+                         case CPU_CTRL:\n+                         case CPUSET_CTRL:\n+                         case CPUACCT_CTRL:\n+                         case BLKIO_CTRL:\n+                             return true;\n+                         default: break; \/\/ ignore not recognized controllers\n+                     }\n+                 }\n+             } else if (fsType.equals(\"cgroup2\")) {\n+                 return true;\n+             }\n+         }\n+         return false;\n+    }\n+\n","filename":"jdk\/src\/linux\/classes\/jdk\/internal\/platform\/CgroupSubsystemFactory.java","additions":57,"deletions":4,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+    private Path cgroupv1MntInfoSystemdOnly;\n@@ -101,0 +102,3 @@\n+    private String mntInfoCgroupsV1SystemdOnly =\n+            \"35 26 0:26 \/ \/sys\/fs\/cgroup\/systemd rw,nosuid,nodev,noexec,relatime - cgroup systemd rw,name=systemd\\n\" +\n+            \"26 18 0:19 \/ \/sys\/fs\/cgroup rw,relatime - tmpfs none rw,size=4k,mode=755\\n\";\n@@ -121,0 +125,3 @@\n+\n+            cgroupv1MntInfoSystemdOnly = Paths.get(existingDirectory.toString(), \"mountinfo_cgroupv1_systemd_only\");\n+            Files.write(cgroupv1MntInfoSystemdOnly, mntInfoCgroupsV1SystemdOnly.getBytes());\n@@ -135,0 +142,9 @@\n+    @Test\n+    public void testCgroupv1SystemdOnly() throws IOException {\n+        String cgroups = cgroupv1CgInfoZeroHierarchy.toString();\n+        String mountInfo = cgroupv1MntInfoSystemdOnly.toString();\n+        Optional<CgroupTypeResult> result = CgroupSubsystemFactory.determineType(mountInfo, cgroups);\n+\n+        assertTrue(\"zero hierarchy ids with no *relevant* controllers mounted\", Optional.empty().equals(result));\n+    }\n+\n","filename":"jdk\/test\/jdk\/internal\/platform\/cgroup\/TestCgroupSubsystemFactory.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}