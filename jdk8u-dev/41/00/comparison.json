{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2015, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import java.util.Set;\n@@ -590,3 +591,3 @@\n-        \/\/ This listener checks if the key event is a KeyEvent.VK_TAB\n-        \/\/ or shift + KeyEvent.VK_TAB event on a radio button, consume the event\n-        \/\/ if so and move the focus to next\/previous component\n+        \/\/ This listener checks if the key event is a focus traversal key event\n+        \/\/ on a radio button, consume the event if so and move the focus\n+        \/\/ to next\/previous component\n@@ -594,6 +595,9 @@\n-            if (e.getKeyCode() == KeyEvent.VK_TAB) {\n-                 \/\/ Get the source of the event.\n-                Object eventSrc = e.getSource();\n-\n-                \/\/ Check whether the source is a visible and enabled JRadioButton\n-                if (isValidRadioButtonObj(eventSrc)) {\n+            AWTKeyStroke stroke = AWTKeyStroke.getAWTKeyStrokeForEvent(e);\n+            if (stroke != null && e.getSource() instanceof JRadioButton) {\n+                JRadioButton source = (JRadioButton) e.getSource();\n+                boolean next = isFocusTraversalKey(source,\n+                        KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,\n+                        stroke);\n+                if (next || isFocusTraversalKey(source,\n+                        KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,\n+                        stroke)) {\n@@ -601,2 +605,2 @@\n-                    ButtonGroupInfo btnGroupInfo = new ButtonGroupInfo((JRadioButton)eventSrc);\n-                    btnGroupInfo.jumpToNextComponent(!e.isShiftDown());\n+                    ButtonGroupInfo btnGroupInfo = new ButtonGroupInfo(source);\n+                    btnGroupInfo.jumpToNextComponent(next);\n@@ -607,0 +611,6 @@\n+        private boolean isFocusTraversalKey(JComponent c, int id,\n+                                            AWTKeyStroke stroke) {\n+            Set<AWTKeyStroke> keys = c.getFocusTraversalKeys(id);\n+            return keys != null && keys.contains(stroke);\n+        }\n+\n","filename":"jdk\/src\/share\/classes\/javax\/swing\/plaf\/basic\/BasicRadioButtonUI.java","additions":22,"deletions":12,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 8129940\n+   @summary JRadioButton does not honor non-standard FocusTraversalKeys\n+   @author Semyon Sadetsky\n+  *\/\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.KeyEvent;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class FocusTraversal {\n+\n+    private static JFrame frame;\n+    private static JRadioButton a;\n+    private static JRadioButton d;\n+    private static JTextField next;\n+    private static JTextField prev;\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                frame = new JFrame(\"FocusTraversalTest\");\n+                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+                frame.setUndecorated(true);\n+\n+                Set<KeyStroke> keystrokes = new HashSet<KeyStroke>();\n+                keystrokes.add(KeyStroke.getKeyStroke(\"TAB\"));\n+                keystrokes.add(KeyStroke.getKeyStroke(\"ENTER\"));\n+                frame.setFocusTraversalKeys(\n+                        KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,\n+                        keystrokes);\n+\n+                a = new JRadioButton(\"a\");\n+                JRadioButton b = new JRadioButton(\"b\");\n+                JRadioButton c = new JRadioButton(\"c\");\n+                d = new JRadioButton(\"d\");\n+\n+                ButtonGroup radioButtonGroup = new ButtonGroup();\n+                radioButtonGroup.add(a);\n+                radioButtonGroup.add(b);\n+                radioButtonGroup.add(c);\n+                radioButtonGroup.add(d);\n+\n+                JPanel panel = new JPanel();\n+                prev = new JTextField(\"text\");\n+                panel.add(prev);\n+                panel.add(a);\n+                panel.add(b);\n+                panel.add(c);\n+                panel.add(d);\n+                next = new JTextField(\"text\");\n+                panel.add(next);\n+\n+                JPanel root = new JPanel();\n+                root.setLayout(new BorderLayout());\n+                root.add(panel, BorderLayout.CENTER);\n+                root.add(new JButton(\"OK\"), BorderLayout.SOUTH);\n+\n+                frame.add(root);\n+                frame.pack();\n+                frame.setVisible(true);\n+            }\n+        });\n+\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                a.requestFocus();\n+            }\n+        });\n+\n+        Robot robot = new Robot();\n+        robot.waitForIdle();\n+\n+        robot.setAutoDelay(200);\n+\n+        robot.keyPress(KeyEvent.VK_ENTER);\n+        robot.keyRelease(KeyEvent.VK_ENTER);\n+        robot.waitForIdle();\n+\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                Component focusOwner =\n+                        FocusManager.getCurrentManager().getFocusOwner();\n+                if (focusOwner != next) {\n+                    throw new RuntimeException(\n+                            \"Focus component is wrong after forward key \" + focusOwner);\n+                }\n+            }\n+        });\n+\n+        robot.keyPress(KeyEvent.VK_SHIFT);\n+        robot.keyPress(KeyEvent.VK_TAB);\n+        robot.keyRelease(KeyEvent.VK_TAB);\n+        robot.keyRelease(KeyEvent.VK_SHIFT);\n+        robot.waitForIdle();\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                Component focusOwner =\n+                        FocusManager.getCurrentManager().getFocusOwner();\n+                if (focusOwner != d) {\n+                    throw new RuntimeException(\n+                            \"Focus component is wrong after backward key \" + focusOwner);\n+                }\n+            }\n+        });\n+        SwingUtilities.invokeLater(new Runnable() {\n+            @Override\n+            public void run() {\n+                frame.dispose();\n+            }\n+        });\n+        System.out.println(\"ok\");\n+\n+    }\n+}\n","filename":"jdk\/test\/javax\/swing\/JRadioButton\/FocusTraversal\/FocusTraversal.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"}]}