{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,0 +111,1 @@\n+        \/\/ add \"--memory-swappiness 0\" so as to disable anonymous page swapping.\n@@ -112,1 +113,1 @@\n-            .addDockerOpts(\"--memory\", dockerMemLimit, \"--memory-swap\", dockerMemLimit);\n+            .addDockerOpts(\"--memory\", dockerMemLimit, \"--memory-swappiness\", \"0\", \"--memory-swap\", dockerMemLimit);\n@@ -115,5 +116,15 @@\n-        DockerTestUtils.dockerRunJava(opts)\n-            .shouldHaveExitValue(1)\n-            .shouldContain(\"Entering AttemptOOM main\")\n-            .shouldNotContain(\"AttemptOOM allocation successful\")\n-            .shouldContain(\"java.lang.OutOfMemoryError\");\n+        \/\/ make sure we avoid inherited Xmx settings from the jtreg vmoptions\n+        \/\/ set Xmx ourselves instead\n+        System.out.println(\"sizeToAllocInMb is:\" + sizeToAllocInMb + \" sizeToAllocInMb\/2 is:\" + sizeToAllocInMb\/2);\n+        String javaHeapSize = sizeToAllocInMb\/2 + \"m\";\n+        opts.addJavaOptsAppended(\"-Xmx\" + javaHeapSize);\n+\n+        OutputAnalyzer out = DockerTestUtils.dockerRunJava(opts);\n+\n+        if (out.getExitValue() == 0) {\n+            throw new RuntimeException(\"We exited successfully, but we wanted to provoke an OOM inside the container\");\n+        }\n+\n+        out.shouldContain(\"Entering AttemptOOM main\")\n+           .shouldNotContain(\"AttemptOOM allocation successful\")\n+           .shouldContain(\"java.lang.OutOfMemoryError\");\n","filename":"hotspot\/test\/runtime\/containers\/docker\/TestMemoryAwareness.java","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-    public ArrayList<String> dockerOpts = new ArrayList<String>();\n+    public ArrayList<String> dockerOpts = new ArrayList<>();\n@@ -36,1 +36,3 @@\n-    public ArrayList<String> javaOpts = new ArrayList<String>();\n+    public ArrayList<String> javaOpts = new ArrayList<>();\n+    \/\/ more java options, but to be set AFTER the test Java options\n+    public ArrayList<String> javaOptsAppended = new ArrayList<>();\n@@ -38,1 +40,1 @@\n-    public ArrayList<String> classParams = new ArrayList<String>();\n+    public ArrayList<String> classParams = new ArrayList<>();\n@@ -73,0 +75,4 @@\n+    public DockerRunOptions addJavaOptsAppended(String... opts) {\n+        Collections.addAll(javaOptsAppended, opts);\n+        return this;\n+    }\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/DockerRunOptions.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -201,0 +201,1 @@\n+        cmd.addAll(opts.javaOptsAppended);\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/DockerTestUtils.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}