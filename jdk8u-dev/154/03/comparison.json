{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,1 +134,1 @@\n-     *             JAR timestamp if jar files are being validated and the\n+     *             timestamp if JAR files are being validated and the\n@@ -163,1 +163,1 @@\n-     * {@code PKIXParameter} date, and {@code varient}\n+     * {@code PKIXParameter} date, and {@code variant}.\n@@ -167,2 +167,4 @@\n-     * @param pkixdate Date the constraints are checked against. The value is\n-     *             either the PKIXParameters date or null for the current date.\n+     * @param date the date specified by the PKIXParameters date, or the\n+     *             timestamp if JAR files are being validated and the\n+     *             JAR is timestamped. May be null if no timestamp or\n+     *             PKIXParameter date is set.\n@@ -172,2 +174,2 @@\n-    public AlgorithmChecker(TrustAnchor anchor, Date pkixdate, String variant) {\n-        this(anchor, certPathDefaultConstraints, pkixdate, variant);\n+    public AlgorithmChecker(TrustAnchor anchor, Date date, String variant) {\n+        this(anchor, certPathDefaultConstraints, date, variant);\n","filename":"jdk\/src\/share\/classes\/sun\/security\/provider\/certpath\/AlgorithmChecker.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-class CertPathConstraintsParameters implements ConstraintsParameters {\n+public class CertPathConstraintsParameters implements ConstraintsParameters {\n@@ -108,1 +108,1 @@\n-        sb.append(\"\\n  Variant: \").append(variant);\n+        sb.append(\"  Variant: \").append(variant);\n","filename":"jdk\/src\/share\/classes\/sun\/security\/provider\/certpath\/CertPathConstraintsParameters.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -91,0 +91,1 @@\n+        private Date timestampDate;\n@@ -157,0 +158,5 @@\n+        \/\/ The date() param is used when enforcing the validity period\n+        \/\/ of certificates and when checking the time period of revocation data.\n+        \/\/ The main difference between the date() and timestamp() method is\n+        \/\/ that the date() method only uses the timestamp (if specified)\n+        \/\/ for certificates in a code signer's chain.\n@@ -159,2 +165,7 @@\n-                \/\/ use timestamp if checking signed code that is\n-                \/\/ timestamped, otherwise use date parameter\n+                \/\/ Use timestamp if checking signed code that is\n+                \/\/ timestamped, otherwise use date parameter.\n+                \/\/ Note that TSA server certificates do not use the\n+                \/\/ timestamp, which means that an expired TSA certificate\n+                \/\/ is considered a validation failure. This policy means\n+                \/\/ that signed and timestamped code is valid until the TSA\n+                \/\/ certificate expires (assuming all other checks are valid).\n@@ -213,0 +224,11 @@\n+        \/\/ The timestamp() param is passed as the date param when creating an\n+        \/\/ AlgorithmChecker. An AlgorithmChecker always uses the timestamp\n+        \/\/ if specified in order to enforce the denyAfter constraint.\n+        Date timestamp() {\n+            \/\/ return timestamp date if set, otherwise use date parameter\n+            if (timestampDate == null) {\n+                timestampDate = (timestamp != null)\n+                    ? timestamp.getTimestamp() : date();\n+            }\n+            return timestampDate;\n+        }\n","filename":"jdk\/src\/share\/classes\/sun\/security\/provider\/certpath\/PKIX.java","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -175,2 +175,2 @@\n-        certPathCheckers.add(new AlgorithmChecker(anchor, null, params.date(),\n-                params.variant()));\n+        certPathCheckers.add(new AlgorithmChecker(anchor, null,\n+                params.timestamp(), params.variant()));\n","filename":"jdk\/src\/share\/classes\/sun\/security\/provider\/certpath\/PKIXCertPathValidator.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -347,1 +347,1 @@\n-                        buildParams.date(), buildParams.variant()));\n+                        buildParams.timestamp(), buildParams.variant()));\n","filename":"jdk\/src\/share\/classes\/sun\/security\/provider\/certpath\/SunCertPathBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+import sun.security.provider.certpath.CertPathConstraintsParameters;\n@@ -884,1 +885,2 @@\n-                            X509Certificate signer = si.getCertificate(p7);\n+                            ArrayList<X509Certificate> chain = si.getCertificateChain(p7);\n+                            X509Certificate signer = chain.get(0);\n@@ -906,0 +908,2 @@\n+                                JarConstraintsParameters jcp =\n+                                    new JarConstraintsParameters(chain, si.getTimestamp());\n@@ -909,3 +913,3 @@\n-                                        verifyWithWeak(digestAlg, DIGEST_PRIMITIVE_SET, false),\n-                                        verifyWithWeak(sigAlg, SIG_PRIMITIVE_SET, false),\n-                                        verifyWithWeak(key),\n+                                        verifyWithWeak(digestAlg, DIGEST_PRIMITIVE_SET, false, jcp),\n+                                        verifyWithWeak(sigAlg, SIG_PRIMITIVE_SET, false, jcp),\n+                                        verifyWithWeak(key, jcp),\n@@ -914,3 +918,3 @@\n-                                        verifyWithWeak(tsDigestAlg, DIGEST_PRIMITIVE_SET, true),\n-                                        verifyWithWeak(tsSigAlg, SIG_PRIMITIVE_SET, true),\n-                                        verifyWithWeak(tsKey));\n+                                        verifyWithWeak(tsDigestAlg, DIGEST_PRIMITIVE_SET, true, jcp),\n+                                        verifyWithWeak(tsSigAlg, SIG_PRIMITIVE_SET, true, jcp),\n+                                        verifyWithWeak(tsKey, jcp));\n@@ -918,0 +922,2 @@\n+                                JarConstraintsParameters jcp =\n+                                    new JarConstraintsParameters(chain, null);\n@@ -921,3 +927,3 @@\n-                                        verifyWithWeak(digestAlg, DIGEST_PRIMITIVE_SET, false),\n-                                        verifyWithWeak(sigAlg, SIG_PRIMITIVE_SET, false),\n-                                        verifyWithWeak(key));\n+                                        verifyWithWeak(digestAlg, DIGEST_PRIMITIVE_SET, false, jcp),\n+                                        verifyWithWeak(sigAlg, SIG_PRIMITIVE_SET, false, jcp),\n+                                        verifyWithWeak(key, jcp));\n@@ -926,0 +932,1 @@\n+                            e.printStackTrace();\n@@ -1259,4 +1266,16 @@\n-    private String verifyWithWeak(String alg, Set<CryptoPrimitive> primitiveSet, boolean tsa) {\n-        if (DISABLED_CHECK.permits(primitiveSet, alg, null)) {\n-            if (LEGACY_CHECK.permits(primitiveSet, alg, null)) {\n-                return alg;\n+    private String verifyWithWeak(String alg, Set<CryptoPrimitive> primitiveSet,\n+        boolean tsa, JarConstraintsParameters jcp) {\n+\n+        try {\n+            DISABLED_CHECK.permits(alg, jcp);\n+        } catch (CertPathValidatorException e) {\n+            disabledAlgFound = true;\n+            return String.format(rb.getString(\"with.disabled\"), alg);\n+        }\n+        try {\n+            LEGACY_CHECK.permits(alg, jcp);\n+            return alg;\n+        } catch (CertPathValidatorException e) {\n+            if (primitiveSet == SIG_PRIMITIVE_SET) {\n+                legacyAlg |= 2;\n+                legacySigAlg = alg;\n@@ -1264,3 +1283,3 @@\n-                if (primitiveSet == SIG_PRIMITIVE_SET) {\n-                   legacyAlg |= 2;\n-                   legacySigAlg = alg;\n+                if (tsa) {\n+                    legacyAlg |= 4;\n+                    legacyTsaDigestAlg = alg;\n@@ -1268,7 +1287,2 @@\n-                    if (tsa) {\n-                        legacyAlg |= 4;\n-                        legacyTsaDigestAlg = alg;\n-                    } else {\n-                        legacyAlg |= 1;\n-                        legacyDigestAlg = alg;\n-                    }\n+                    legacyAlg |= 1;\n+                    legacyDigestAlg = alg;\n@@ -1276,1 +1290,0 @@\n-                return String.format(rb.getString(\"with.weak\"), alg);\n@@ -1278,3 +1291,1 @@\n-        } else {\n-            disabledAlgFound = true;\n-            return String.format(rb.getString(\"with.disabled\"), alg);\n+            return String.format(rb.getString(\"with.weak\"), alg);\n@@ -1284,1 +1295,1 @@\n-    private String verifyWithWeak(PublicKey key) {\n+    private String verifyWithWeak(PublicKey key, JarConstraintsParameters jcp) {\n@@ -1286,7 +1297,10 @@\n-        if (DISABLED_CHECK.permits(SIG_PRIMITIVE_SET, key)) {\n-            if (LEGACY_CHECK.permits(SIG_PRIMITIVE_SET, key)) {\n-                if (kLen >= 0) {\n-                    return String.format(rb.getString(\"key.bit\"), kLen);\n-                } else {\n-                    return rb.getString(\"unknown.size\");\n-                }\n+        try {\n+            DISABLED_CHECK.permits(key.getAlgorithm(), jcp);\n+        } catch (CertPathValidatorException e) {\n+            disabledAlgFound = true;\n+            return String.format(rb.getString(\"key.bit.disabled\"), kLen);\n+        }\n+        try {\n+            LEGACY_CHECK.permits(key.getAlgorithm(), jcp);\n+            if (kLen >= 0) {\n+                return String.format(rb.getString(\"key.bit\"), kLen);\n@@ -1294,3 +1308,1 @@\n-                weakPublicKey = key;\n-                legacyAlg |= 8;\n-                return String.format(rb.getString(\"key.bit.weak\"), kLen);\n+                return rb.getString(\"unknown.size\");\n@@ -1298,3 +1310,4 @@\n-        } else {\n-           disabledAlgFound = true;\n-           return String.format(rb.getString(\"key.bit.disabled\"), kLen);\n+        } catch (CertPathValidatorException e) {\n+            weakPublicKey = key;\n+            legacyAlg |= 8;\n+            return String.format(rb.getString(\"key.bit.weak\"), kLen);\n@@ -1304,3 +1317,8 @@\n-    private void checkWeakSign(String alg, Set<CryptoPrimitive> primitiveSet, boolean tsa) {\n-        if (DISABLED_CHECK.permits(primitiveSet, alg, null)) {\n-            if (!LEGACY_CHECK.permits(primitiveSet, alg, null)) {\n+    private void checkWeakSign(String alg, Set<CryptoPrimitive> primitiveSet,\n+        boolean tsa, JarConstraintsParameters jcp) {\n+\n+        try {\n+            DISABLED_CHECK.permits(alg, jcp);\n+            try {\n+                LEGACY_CHECK.permits(alg, jcp);\n+            } catch (CertPathValidatorException e) {\n@@ -1308,1 +1326,1 @@\n-                   legacyAlg |= 2;\n+                    legacyAlg |= 2;\n@@ -1317,1 +1335,1 @@\n-        } else {\n+        } catch (CertPathValidatorException e) {\n@@ -1330,3 +1348,6 @@\n-    private void checkWeakSign(PrivateKey key) {\n-        if (DISABLED_CHECK.permits(SIG_PRIMITIVE_SET, key)) {\n-            if (!LEGACY_CHECK.permits(SIG_PRIMITIVE_SET, key)) {\n+    private void checkWeakSign(PrivateKey key, JarConstraintsParameters jcp) {\n+        try {\n+            DISABLED_CHECK.permits(key.getAlgorithm(), jcp);\n+            try {\n+                LEGACY_CHECK.permits(key.getAlgorithm(), jcp);\n+            } catch (CertPathValidatorException e) {\n@@ -1335,1 +1356,1 @@\n-        } else {\n+        } catch (CertPathValidatorException e) {\n@@ -1362,1 +1383,1 @@\n-        Date timestamp, boolean checkUsage) throws Exception {\n+        Date timestamp, boolean checkUsage, CertPathConstraintsParameters cpcp) throws Exception {\n@@ -1561,2 +1582,5 @@\n-        checkWeakSign(digestalg, DIGEST_PRIMITIVE_SET, false);\n-        checkWeakSign(tSADigestAlg, DIGEST_PRIMITIVE_SET, true);\n+        JarConstraintsParameters jcp =\n+            new JarConstraintsParameters(Arrays.asList(certChain), null);\n+        checkWeakSign(digestalg, DIGEST_PRIMITIVE_SET, false, jcp);\n+\n+        checkWeakSign(tSADigestAlg, DIGEST_PRIMITIVE_SET, true, jcp);\n@@ -1570,1 +1594,1 @@\n-        checkWeakSign(sigalg, SIG_PRIMITIVE_SET, false);\n+        checkWeakSign(sigalg, SIG_PRIMITIVE_SET, false, jcp);\n@@ -1572,1 +1596,1 @@\n-        checkWeakSign(privateKey);\n+        checkWeakSign(privateKey, jcp);\n@@ -1848,0 +1872,2 @@\n+                    CertPathConstraintsParameters cpcp =\n+                        new CertPathConstraintsParameters(tsaCert, Validator.VAR_TSA_SERVER, null, null);\n@@ -1849,1 +1875,1 @@\n-                            printCert(true, \"\", tsaCert, null, false));\n+                            printCert(true, \"\", tsaCert, null, false, cpcp));\n@@ -2074,0 +2100,3 @@\n+        @SuppressWarnings(\"unchecked\")\n+        List<X509Certificate> chain = (List<X509Certificate>)certs;\n+        TrustAnchor anchor = findTrustAnchor(chain);\n@@ -2075,1 +2104,3 @@\n-            sb.append(printCert(false, tab2, c, timestamp, first));\n+            CertPathConstraintsParameters cpcp =\n+                new CertPathConstraintsParameters((X509Certificate)c, Validator.VAR_CODE_SIGNING, anchor, timestamp);\n+            sb.append(printCert(false, tab2, c, timestamp, first, cpcp));\n@@ -2088,0 +2119,4 @@\n+            List<? extends Certificate> tscerts = ts.getSignerCertPath().getCertificates();\n+            @SuppressWarnings(\"unchecked\")\n+            List<X509Certificate> tschain = (List<X509Certificate>)tscerts;\n+            anchor = findTrustAnchor(chain);\n@@ -2089,2 +2124,4 @@\n-            for (Certificate c : ts.getSignerCertPath().getCertificates()) {\n-                sb.append(printCert(true, tab2, c, null, false));\n+            for (Certificate c : tschain) {\n+                CertPathConstraintsParameters cpcp =\n+                    new CertPathConstraintsParameters((X509Certificate)c, Validator.VAR_TSA_SERVER, anchor, timestamp);\n+                sb.append(printCert(true, tab2, c, null, false, cpcp));\n@@ -2150,0 +2187,9 @@\n+    private TrustAnchor findTrustAnchor(List<X509Certificate> chain) {\n+        X509Certificate last = chain.get(chain.size() - 1);\n+        Optional<X509Certificate> trusted =\n+            trustedCerts.stream()\n+                        .filter(c -> c.getSubjectX500Principal().equals(last.getIssuerX500Principal()))\n+                        .findFirst();\n+        return trusted.isPresent() ? new TrustAnchor(trusted.get(), null) : null;\n+    }\n+\n","filename":"jdk\/src\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":106,"deletions":60,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import java.text.SimpleDateFormat;\n@@ -684,2 +683,0 @@\n-        private static final SimpleDateFormat dateFormat =\n-                new SimpleDateFormat(\"EEE, MMM d HH:mm:ss z yyyy\");\n@@ -719,1 +716,1 @@\n-                        dateFormat.format(denyAfterDate));\n+                        denyAfterDate);\n@@ -750,2 +747,2 @@\n-                        dateFormat.format(denyAfterDate) + \"; params date: \" +\n-                        dateFormat.format(currentDate) + cp.extendedExceptionMsg(),\n+                        denyAfterDate + \"; params date: \" +\n+                        currentDate + cp.extendedExceptionMsg(),\n","filename":"jdk\/src\/share\/classes\/sun\/security\/util\/DisabledAlgorithmConstraints.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-    \/\/ The keys of the signers\n+    \/\/ The keys of the signers and TSA\n@@ -55,1 +55,1 @@\n-    \/\/ The certs in the signers' chains that are issued by the trust anchor\n+    \/\/ The certs in the signers and TSA chain that are issued by the trust anchor\n@@ -76,1 +76,1 @@\n-            init(signer.getSignerCertPath());\n+            addToCertsAndKeys(signer.getSignerCertPath());\n@@ -85,1 +85,1 @@\n-                init(timestamp.getSignerCertPath());\n+                addToCertsAndKeys(timestamp.getSignerCertPath());\n@@ -101,2 +101,14 @@\n-    \/\/ extract last certificate and key from chain\n-    private void init(CertPath cp) {\n+    public JarConstraintsParameters(List<X509Certificate> chain, Timestamp timestamp) {\n+        this.keys = new HashSet<>();\n+        this.certsIssuedByAnchor = new HashSet<>();\n+        addToCertsAndKeys(chain);\n+        if (timestamp != null) {\n+            addToCertsAndKeys(timestamp.getSignerCertPath());\n+            this.timestamp = timestamp.getTimestamp();\n+        } else {\n+            this.timestamp = null;\n+        }\n+    }\n+\n+    \/\/ extract last certificate and signer's public key from chain\n+    private void addToCertsAndKeys(CertPath cp) {\n@@ -106,0 +118,4 @@\n+        addToCertsAndKeys(chain);\n+    }\n+\n+    private void addToCertsAndKeys(List<X509Certificate> chain) {\n@@ -171,1 +187,1 @@\n-        sb.append(\"\\n  Variant: \").append(getVariant());\n+        sb.append(\"  Variant: \").append(getVariant());\n","filename":"jdk\/src\/share\/classes\/sun\/security\/util\/JarConstraintsParameters.java","additions":24,"deletions":8,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -530,1 +530,1 @@\n-# There is one defined security property:  jdk.disabled.NamedCurves\n+# There is one defined security property:  jdk.disabled.namedCurves\n@@ -607,0 +607,1 @@\n+    SHA1 usage SignedJAR & denyAfter 2019-01-01, \\\n@@ -671,1 +672,2 @@\n-      DSA keySize < 1024, include jdk.disabled.namedCurves\n+      DSA keySize < 1024, SHA1 denyAfter 2019-01-01, \\\n+      include jdk.disabled.namedCurves\n","filename":"jdk\/src\/share\/lib\/security\/java.security-aix","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -530,1 +530,1 @@\n-# There is one defined security property:  jdk.disabled.NamedCurves\n+# There is one defined security property:  jdk.disabled.namedCurves\n@@ -607,0 +607,1 @@\n+    SHA1 usage SignedJAR & denyAfter 2019-01-01, \\\n@@ -671,1 +672,2 @@\n-      DSA keySize < 1024, include jdk.disabled.namedCurves\n+      DSA keySize < 1024, SHA1 denyAfter 2019-01-01, \\\n+      include jdk.disabled.namedCurves\n","filename":"jdk\/src\/share\/lib\/security\/java.security-linux","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -533,1 +533,1 @@\n-# There is one defined security property:  jdk.disabled.NamedCurves\n+# There is one defined security property:  jdk.disabled.namedCurves\n@@ -610,0 +610,1 @@\n+    SHA1 usage SignedJAR & denyAfter 2019-01-01, \\\n@@ -674,1 +675,2 @@\n-      DSA keySize < 1024, include jdk.disabled.namedCurves\n+      DSA keySize < 1024, SHA1 denyAfter 2019-01-01, \\\n+      include jdk.disabled.namedCurves\n","filename":"jdk\/src\/share\/lib\/security\/java.security-macosx","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -531,1 +531,1 @@\n-# There is one defined security property:  jdk.disabled.NamedCurves\n+# There is one defined security property:  jdk.disabled.namedCurves\n@@ -608,0 +608,1 @@\n+    SHA1 usage SignedJAR & denyAfter 2019-01-01, \\\n@@ -672,1 +673,2 @@\n-      DSA keySize < 1024, include jdk.disabled.namedCurves\n+      DSA keySize < 1024, SHA1 denyAfter 2019-01-01, \\\n+      include jdk.disabled.namedCurves\n","filename":"jdk\/src\/share\/lib\/security\/java.security-solaris","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -533,1 +533,1 @@\n-# There is one defined security property:  jdk.disabled.NamedCurves\n+# There is one defined security property:  jdk.disabled.namedCurves\n@@ -610,0 +610,1 @@\n+    SHA1 usage SignedJAR & denyAfter 2019-01-01, \\\n@@ -674,1 +675,2 @@\n-      DSA keySize < 1024, include jdk.disabled.namedCurves\n+      DSA keySize < 1024, SHA1 denyAfter 2019-01-01, \\\n+      include jdk.disabled.namedCurves\n","filename":"jdk\/src\/share\/lib\/security\/java.security-windows","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,98 +0,0 @@\n-#\n-# Copyright (c) 2002, 2013, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 4504355\n-# @summary problems if signed crypto provider is the most preferred provider\n-#\n-# @run shell Dyn.sh\n-\n-# set a few environment variables so that the shell-script can run stand-alone\n-# in the source directory\n-if [ \"${TESTSRC}\" = \"\" ] ; then\n-   TESTSRC=\".\"\n-fi\n-\n-if [ \"${TESTCLASSES}\" = \"\" ] ; then\n-   TESTCLASSES=\".\"\n-fi\n-\n-if [ \"${TESTJAVA}\" = \"\" ] ; then\n-   echo \"TESTJAVA not set.  Test cannot execute.\"\n-   echo \"FAILED!!!\"\n-   exit 1\n-fi\n-\n-if [ \"${COMPILEJAVA}\" = \"\" ]; then\n-   COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-\n-# set platform-dependent variables\n-OS=`uname -s`\n-case \"$OS\" in\n-  SunOS )\n-    PATHSEP=\":\"\n-    FILESEP=\"\/\"\n-    ;;\n-  Linux )\n-    PATHSEP=\":\"\n-    FILESEP=\"\/\"\n-    ;;\n-  Darwin )\n-    PATHSEP=\":\"\n-    FILESEP=\"\/\"\n-    ;;\n-  AIX )\n-    PATHSEP=\":\"\n-    FILESEP=\"\/\"\n-    ;;\n-  CYGWIN* )\n-    PATHSEP=\";\"\n-    FILESEP=\"\/\"\n-    ;;\n-  Windows* )\n-    PATHSEP=\";\"\n-    FILESEP=\"\\\\\"\n-    ;;\n-  * )\n-    echo \"Unrecognized system!\"\n-    exit 1;\n-    ;;\n-esac\n-\n-# remove old class files\n-cd ${TESTCLASSES}${FILESEP}\n-rm DynSignedProvFirst.class\n-\n-# compile the test program\n-${COMPILEJAVA}${FILESEP}bin${FILESEP}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} \\\n-        -classpath ${TESTSRC}${FILESEP}exp.jar \\\n-        -d ${TESTCLASSES}${FILESEP} \\\n-        ${TESTSRC}${FILESEP}DynSignedProvFirst.java\n-\n-# run the test\n-${TESTJAVA}${FILESEP}bin${FILESEP}java ${TESTVMOPTS} \\\n-        -classpath \"${TESTCLASSES}${PATHSEP}${TESTSRC}${FILESEP}exp.jar\" \\\n-        DynSignedProvFirst\n-\n-exit $?\n","filename":"jdk\/test\/java\/security\/Security\/signedfirst\/Dyn.sh","additions":0,"deletions":98,"binary":false,"changes":98,"status":"deleted"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 4504355 4744260\n+ * @summary problems if signed crypto provider is the most preferred provider\n+ * @library \/lib\/testlibrary\n+ * @run main\/othervm DynStatic\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import jdk.testlibrary.ProcessTools;\n+import jdk.testlibrary.JarUtils;\n+\n+public class DynStatic {\n+\n+    private static final String TEST_SRC =\n+        Paths.get(System.getProperty(\"test.src\")).toString();\n+    private static final Path TEST_CLASSES =\n+        Paths.get(System.getProperty(\"test.classes\"));\n+\n+    private static final Path EXP_SRC_DIR = Paths.get(TEST_SRC, \"com\");\n+    private static final Path EXP_DEST_DIR = Paths.get(\"build\");\n+    private static final Path DYN_SRC =\n+        Paths.get(TEST_SRC, \"DynSignedProvFirst.java\");\n+    private static final Path STATIC_SRC =\n+        Paths.get(TEST_SRC, \"StaticSignedProvFirst.java\");\n+\n+    private static final String STATIC_PROPS =\n+        Paths.get(TEST_SRC, \"Static.props\").toString();\n+\n+    public static void main(String[] args) throws Throwable {\n+\n+        \/\/ Compile the provider\n+        CompilerUtils.compile(EXP_SRC_DIR, EXP_DEST_DIR);\n+\n+        \/\/ Create a jar file containing the provider\n+        JarUtils.createJarFile(Paths.get(\"exp.jar\"), EXP_DEST_DIR, Paths.get(\"com\"));\n+\n+        \/\/ Create a keystore\n+        sun.security.tools.keytool.Main.main(\n+            (\"-genkeypair -dname CN=Signer -keystore exp.ks -storepass \"\n+                + \"changeit -keypass changeit -keyalg rsa\").split(\" \"));\n+\n+        \/\/ Sign jar\n+        sun.security.tools.jarsigner.Main.main(\n+                \"-storepass changeit -keystore exp.ks exp.jar mykey\"\n+                        .split(\" \"));\n+\n+        \/\/ Compile the DynSignedProvFirst test program\n+        CompilerUtils.compile(DYN_SRC, TEST_CLASSES, \"-classpath\", \"exp.jar\");\n+\n+        \/\/ Run the DynSignedProvFirst test program\n+        ProcessTools.executeTestJvm(\"-classpath\",\n+            TEST_CLASSES.toString() + File.pathSeparator + \"exp.jar\",\n+            \"DynSignedProvFirst\")\n+            .shouldContain(\"test passed\");\n+\n+        \/\/ Compile the StaticSignedProvFirst test program\n+        CompilerUtils.compile(STATIC_SRC, TEST_CLASSES, \"-classpath\", \"exp.jar\");\n+\n+        \/\/ Run the StaticSignedProvFirst test program\n+        ProcessTools.executeTestJvm(\"-classpath\",\n+            TEST_CLASSES.toString() + File.pathSeparator + \"exp.jar\",\n+            \"-Djava.security.properties=file:\" + STATIC_PROPS,\n+            \"StaticSignedProvFirst\")\n+            .shouldContain(\"test passed\");\n+    }\n+}\n","filename":"jdk\/test\/java\/security\/Security\/signedfirst\/DynStatic.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -1,100 +0,0 @@\n-#\n-# Copyright (c) 2002, 2013, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 4504355 4744260\n-# @summary problems if signed crypto provider is the most preferred provider\n-#\n-# @run shell Static.sh\n-\n-# set a few environment variables so that the shell-script can run stand-alone\n-# in the source directory\n-if [ \"${TESTSRC}\" = \"\" ] ; then\n-   TESTSRC=\".\"\n-fi\n-\n-if [ \"${TESTCLASSES}\" = \"\" ] ; then\n-   TESTCLASSES=\".\"\n-fi\n-\n-if [ \"${TESTJAVA}\" = \"\" ] ; then\n-   echo \"TESTJAVA not set.  Test cannot execute.\"\n-   echo \"FAILED!!!\"\n-   exit 1\n-fi\n-\n-if [ \"${COMPILEJAVA}\" = \"\" ]; then\n-   COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-\n-# set platform-dependent variables\n-OS=`uname -s`\n-case \"$OS\" in\n-  SunOS )\n-    PATHSEP=\":\"\n-    FILESEP=\"\/\"\n-    ;;\n-  Linux )\n-    PATHSEP=\":\"\n-    FILESEP=\"\/\"\n-    ;;\n-  Darwin )\n-    PATHSEP=\":\"\n-    FILESEP=\"\/\"\n-    ;;\n-  AIX )\n-    PATHSEP=\":\"\n-    FILESEP=\"\/\"\n-    ;;\n-  CYGWIN* )\n-    PATHSEP=\";\"\n-    FILESEP=\"\/\"\n-    ;;\n-  Windows* )\n-    PATHSEP=\";\"\n-    FILESEP=\"\\\\\"\n-    ;;\n-  * )\n-    echo \"Unrecognized system!\"\n-    exit 1;\n-    ;;\n-esac\n-\n-# remove old class files\n-cd ${TESTCLASSES}${FILESEP}\n-rm StaticSignedProvFirst.class\n-\n-# compile the test program\n-${COMPILEJAVA}${FILESEP}bin${FILESEP}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} \\\n-        -classpath \"${TESTCLASSES}${PATHSEP}${TESTSRC}${FILESEP}exp.jar\" \\\n-        -d ${TESTCLASSES}${FILESEP} \\\n-        ${TESTSRC}${FILESEP}StaticSignedProvFirst.java\n-\n-# run the test\n-cd ${TESTSRC}${FILESEP}\n-${TESTJAVA}${FILESEP}bin${FILESEP}java ${TESTVMOPTS} \\\n-        -classpath \"${TESTCLASSES}${PATHSEP}${TESTSRC}${FILESEP}exp.jar\" \\\n-        -Djava.security.properties=file:${TESTSRC}${FILESEP}Static.props \\\n-        StaticSignedProvFirst\n-\n-exit $?\n","filename":"jdk\/test\/java\/security\/Security\/signedfirst\/Static.sh","additions":0,"deletions":100,"binary":false,"changes":100,"status":"deleted"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.exp.provider;\n+\n+import java.security.Provider;\n+\n+public class EXP extends Provider {\n+\n+    public EXP() {\n+        super(\"EXP\", 0.0d, \"Test provider\");\n+        put(\"MessageDigest.SHA1\", \"com.sun.exp.provider.SHA\");\n+    }\n+}\n","filename":"jdk\/test\/java\/security\/Security\/signedfirst\/com\/sun\/exp\/provider\/EXP.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.exp.provider;\n+\n+import java.security.MessageDigestSpi;\n+\n+public class SHA extends MessageDigestSpi {\n+    protected void engineReset() {}\n+    protected void engineUpdate(byte input) {}\n+    protected void engineUpdate(byte[] input, int offset, int len) {}\n+    protected byte[] engineDigest() { return null; }\n+}\n","filename":"jdk\/test\/java\/security\/Security\/signedfirst\/com\/sun\/exp\/provider\/SHA.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"filename":"jdk\/test\/java\/security\/Security\/signedfirst\/exp.jar","binary":true,"status":"deleted"},{"filename":"jdk\/test\/java\/security\/Security\/signedfirst\/keystore.jks","binary":true,"status":"deleted"},{"filename":"jdk\/test\/java\/util\/jar\/JarFile\/Signed.jar","binary":true,"status":"modified"},{"filename":"jdk\/test\/java\/util\/jar\/JarFile\/test.jar","binary":true,"status":"modified"},{"filename":"jdk\/test\/java\/util\/jar\/JarInputStream\/signed.jar","binary":true,"status":"modified"},{"patch":"@@ -71,1 +71,7 @@\n-    private static void removeFromDisabledAlgs(String prop, List<String> algs) {\n+    \/**\n+     * Removes constraints that contain the specified constraint from the\n+     * specified security property. For example, List.of(\"SHA1\") will remove\n+     * any constraint containing \"SHA1\".\n+     *\/\n+    public static void removeFromDisabledAlgs(String prop,\n+            List<String> constraints) {\n@@ -75,1 +81,2 @@\n-                      .filter(s -> !algs.contains(s))\n+                      .filter(s -> constraints.stream()\n+                          .allMatch(constraint -> !s.contains(constraint)))\n","filename":"jdk\/test\/lib\/security\/SecurityUtils.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,2 @@\n+# Re-enable SHA-1 since OldSig.java test uses it\n+jdk.jar.disabledAlgorithms=MD2,MD5,RSA keySize < 1024,DSA keySize < 1024\n","filename":"jdk\/test\/sun\/security\/tools\/jarsigner\/OldSig.props","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+ * @library \/lib\/security\n+ * @run main\/othervm Test4431684\n@@ -33,0 +35,1 @@\n+import java.security.*;\n@@ -38,0 +41,3 @@\n+        \/\/ Re-enable SHA1 since JavaApplication1.jar uses it\n+        SecurityUtils.removeFromDisabledAlgs(\"jdk.jar.disabledAlgorithms\",\n+            Arrays.asList(new String[]{\"SHA1\"}));\n","filename":"jdk\/test\/sun\/security\/tools\/jarsigner\/Test4431684.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,1 @@\n- *      8180289 8172404\n+ *      8180289 8172404 8269039\n@@ -205,0 +205,3 @@\n+            } else if (path.equals(\"tsbefore2019\")) {\n+                \/\/ Saturday, August 18, 2018 7:04:58 PM\n+                instant = Instant.ofEpochSecond(1534619098l);\n@@ -352,0 +355,11 @@\n+                \/\/ should not be disabled because timestamped before 2019\n+                signVerbose(\"tsbefore2019\", \"unsigned.jar\", \"tsbefore2019.jar\", \"pre2019signer\",\n+                        \"-digestalg\", \"SHA-1\")\n+                        .shouldHaveExitValue(4);\n+\n+                verify(\"tsbefore2019.jar\", \"-verbose\")\n+                        .shouldHaveExitValue(0)\n+                        .shouldMatch(\"Digest.*SHA-1.*(weak)\")\n+                        .shouldMatch(\"signer certificate expired on .*. \"\n+                                + \"However, the JAR will be valid\");\n+\n@@ -425,1 +439,1 @@\n-                \/\/ Legacy algorithms\n+                \/\/ Disabled algorithms\n@@ -427,10 +441,9 @@\n-                        \"-strict\", \"-digestalg\", \"SHA-1\")\n-                        .shouldHaveExitValue(0)\n-                        .shouldContain(\"jar signed, with signer errors\")\n-                        .shouldMatch(\"SHA-1.*-digestalg.*will be disabled\");\n-                verify(\"sha1alg.jar\", \"-strict\")\n-                        .shouldHaveExitValue(0)\n-                        .shouldContain(\"jar verified, with signer errors\")\n-                        .shouldContain(\"SHA-1 digest algorithm is considered a security risk\")\n-                        .shouldContain(\"This algorithm will be disabled in a future update\")\n-                        .shouldNotContain(\"is disabled\");\n+                        \"-digestalg\", \"SHA-1\")\n+                        .shouldHaveExitValue(4)\n+                        .shouldContain(\"jar signed\")\n+                        .shouldContain(\"with signer errors\")\n+                        .shouldMatch(\"SHA-1.*-digestalg.*is disabled\");\n+                verify(\"sha1alg.jar\", \"-verbose\")\n+                        .shouldHaveExitValue(16)\n+                        .shouldContain(\"treated as unsigned\")\n+                        .shouldMatch(\"Digest.*SHA-1.*(disabled)\");\n@@ -439,9 +452,8 @@\n-                        .shouldHaveExitValue(0)\n-                        .shouldContain(\"jar signed, with signer errors\")\n-                        .shouldMatch(\"SHA-1.*-tsadigestalg.*will be disabled\")\n-                        .shouldNotContain(\"is disabled\");\n-                verify(\"sha1tsaalg.jar\", \"-strict\")\n-                        .shouldHaveExitValue(0)\n-                        .shouldContain(\"jar verified, with signer errors\")\n-                        .shouldContain(\"SHA-1 digest algorithm is considered a security risk\")\n-                        .shouldNotContain(\"is disabled\");\n+                        .shouldHaveExitValue(4)\n+                        .shouldContain(\"jar signed\")\n+                        .shouldContain(\"with signer errors\")\n+                        .shouldMatch(\"SHA-1.*-tsadigestalg.*is disabled\");\n+                verify(\"sha1tsaalg.jar\", \"-verbose\")\n+                        .shouldHaveExitValue(16)\n+                        .shouldContain(\"treated as unsigned\")\n+                        .shouldMatch(\"Timestamp.*digest.*SHA-1.*(disabled)\");\n@@ -449,1 +461,0 @@\n-                \/\/ Disabled algorithms\n@@ -486,1 +497,1 @@\n-                \/\/ Legacy algorithms\n+                \/\/ Disabled algorithms\n@@ -489,5 +500,10 @@\n-                        .shouldHaveExitValue(0)\n-                        .shouldMatch(\"SHA1.*-digestalg.*will be disabled\")\n-                        .shouldMatch(\"SHA1.*-tsadigestalg.*will be disabled\")\n-                        .shouldMatch(\"SHA1withRSA.*-sigalg.*will be disabled\");\n-                checkWeak(\"tsweak.jar\");\n+                        .shouldHaveExitValue(4)\n+                        .shouldMatch(\"SHA1.*-digestalg.*is disabled\")\n+                        .shouldMatch(\"SHA1.*-tsadigestalg.*is disabled\")\n+                        .shouldMatch(\"SHA1withRSA.*-sigalg.*is disabled\");\n+                verify(\"tsweak.jar\", \"-verbose\")\n+                        .shouldHaveExitValue(16)\n+                        .shouldContain(\"treated as unsigned\")\n+                        .shouldMatch(\"Digest algorithm: .*(disabled)\")\n+                        .shouldMatch(\"Signature algorithm: .*(disabled)\")\n+                        .shouldMatch(\"Timestamp digest algorithm: .*(disabled)\");\n@@ -495,0 +511,1 @@\n+                \/\/ Legacy algorithms (1024-bit key)\n@@ -503,1 +520,1 @@\n-                \/\/ Algorithm used in signing is weak\n+                \/\/ Algorithm used in signing is disabled\n@@ -506,4 +523,6 @@\n-                        .shouldContain(\"-digestalg option is considered a security risk.\")\n-                        .shouldContain(\"This algorithm will be disabled in a future update.\")\n-                        .shouldHaveExitValue(0);\n-                checkHalfWeak(\"halfWeak.jar\");\n+                        .shouldContain(\"-digestalg option is considered a security risk and is disabled.\")\n+                        .shouldHaveExitValue(4);\n+                verify(\"halfWeak.jar\", \"-verbose\")\n+                        .shouldHaveExitValue(16)\n+                        .shouldContain(\"treated as unsigned\")\n+                        .shouldMatch(\"Digest algorithm: .*(disabled)\");\n@@ -942,0 +961,1 @@\n+        keytool(\"-alias pre2019signer -genkeypair -dname CN=pre2019signer\");\n@@ -948,0 +968,1 @@\n+        keytool(\"-alias tsbefore2019 -genkeypair -dname CN=tsbefore2019\");\n@@ -971,0 +992,1 @@\n+        gencert(\"pre2019signer\", \"-startdate 2018\/06\/01 -validity 365\");\n@@ -1004,0 +1026,1 @@\n+        gencert(\"tsbefore2019\", \"-ext eku:critical=ts -startdate 2018\/01\/01 -validity 3000\");\n","filename":"jdk\/test\/sun\/security\/tools\/jarsigner\/TimestampCheck.java","additions":57,"deletions":34,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2012, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,1 +91,1 @@\n-    -digestalg SHA1 \\\n+    -digestalg SHA-256 \\\n@@ -105,1 +105,1 @@\n-    -digestalg SHA1 \\\n+    -digestalg SHA-256 \\\n","filename":"jdk\/test\/sun\/security\/tools\/jarsigner\/diffend.sh","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -73,0 +73,3 @@\n+PROP_ARGS=\" -J-Djava.security.properties=${TESTSRC}${FS}OldSig.props\"\n+KS_ARGS=\"-keystore ${TESTSRC}${FS}JarSigning.keystore -storepass bbbbbb\"\n+\n@@ -75,2 +78,1 @@\n-    -keystore ${TESTSRC}${FS}JarSigning.keystore \\\n-    -storepass bbbbbb \\\n+    ${KS_ARGS} \\\n@@ -79,1 +81,6 @@\n-${TESTJAVA}${FS}bin${FS}jarsigner -verify B.jar\n+\n+JAR_VERIFY_CMD=\"${TESTJAVA}${FS}bin${FS}jarsigner -verify ${KS_ARGS} ${PROP_ARGS} -verbose B.jar\"\n+echo ${JAR_VERIFY_CMD}\n+LINES=`${JAR_VERIFY_CMD} | grep smk | grep B.class | wc -l`\n+[ $LINES = 1 ] || exit 1\n+\n","filename":"jdk\/test\/sun\/security\/tools\/jarsigner\/oldsig.sh","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"}]}