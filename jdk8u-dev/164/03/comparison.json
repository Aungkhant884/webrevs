{"files":[{"patch":"@@ -2287,1 +2287,1 @@\n-if (!OSContainer::is_containerized()) {\n+  if (!OSContainer::is_containerized()) {\n","filename":"hotspot\/src\/os\/linux\/vm\/os_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test PlainRead\n+ * @requires os.family == \"linux\"\n+ * @library \/testlibrary \/testlibrary\/whitebox\n+ * @build PlainRead\n+ * @run main ClassFileInstaller sun.hotspot.WhiteBox\n+ *                              sun.hotspot.WhiteBox$WhiteBoxPermission\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI PlainRead\n+ *\/\n+\n+import com.oracle.java.testlibrary.ProcessTools;\n+import com.oracle.java.testlibrary.OutputAnalyzer;\n+import com.oracle.java.testlibrary.Platform;\n+import sun.hotspot.WhiteBox;\n+\n+public class PlainRead {\n+\n+    static public void match(OutputAnalyzer oa, String what, String value) {\n+       oa.shouldMatch(\"^.*\" + what + \" *\" + value + \".*$\");\n+    }\n+\n+    static public void noMatch(OutputAnalyzer oa, String what, String value) {\n+       oa.shouldNotMatch(\"^.*\" + what + \" *\" + value + \".*$\");\n+    }\n+\n+    static final String good_value = \"(\\\\d+|-1|Unlimited)\";\n+    static final String bad_value = \"(failed)\";\n+\n+    static final String[] variables = {\"Memory Limit is:\", \"CPU Shares is:\", \"CPU Quota is:\", \"CPU Period is:\", \"active_processor_count:\"};\n+\n+    static public void isContainer(OutputAnalyzer oa) {\n+        for (String v: variables) {\n+            match(oa, v, good_value);\n+        }\n+        for (String v: variables) {\n+            noMatch(oa, v, bad_value);\n+        }\n+    }\n+\n+    static public void isNotContainer(OutputAnalyzer oa) {\n+       oa.shouldMatch(\"^.*Can't open \/proc\/self\/mountinfo.*$\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        WhiteBox wb = WhiteBox.getWhiteBox();\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+PrintContainerInfo\", \"-version\");\n+\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+        if (wb.isContainerized()) {\n+            System.out.println(\"Inside a cgroup, testing...\");\n+            isContainer(output);\n+        } else {\n+            System.out.println(\"Not in a cgroup, testing...\");\n+            isNotContainer(output);\n+        }\n+    }\n+}\n","filename":"hotspot\/test\/runtime\/containers\/cgroup\/PlainRead.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}