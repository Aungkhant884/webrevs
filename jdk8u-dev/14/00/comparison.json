{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import jdk.test.lib.Utils;\n@@ -90,1 +91,1 @@\n-        return File.createTempFile(\"EvilTransformer\", null, new File(\".\")).getAbsoluteFile();\n+        return Utils.createTempFile(\"EvilTransformer\", null).toFile();\n","filename":"jdk\/test\/jdk\/jfr\/event\/io\/EvilInstrument.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import jdk.test.lib.Utils;\n@@ -58,2 +59,1 @@\n-        File tmp = File.createTempFile(\"TestDisabledEvents\", \".tmp\", new File(\".\"));\n-        tmp.deleteOnExit();\n+        File tmp = Utils.createTempFile(\"TestDisabledEvents\", \".tmp\").toFile();\n","filename":"jdk\/test\/jdk\/jfr\/event\/io\/TestDisabledEvents.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import jdk.test.lib.Utils;\n@@ -51,2 +52,1 @@\n-        File tmp = File.createTempFile(\"TestFileChannelEvents\", \".tmp\", new File(\".\"));\n-        tmp.deleteOnExit();\n+        File tmp = Utils.createTempFile(\"TestFileChannelEvents\", \".tmp\").toFile();\n","filename":"jdk\/test\/jdk\/jfr\/event\/io\/TestFileChannelEvents.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import jdk.test.lib.Utils;\n@@ -53,2 +54,1 @@\n-        File tmp = File.createTempFile(\"TestFileReadOnly\", \".tmp\", new File(\".\"));\n-        tmp.deleteOnExit();\n+        File tmp = Utils.createTempFile(\"TestFileReadOnly\", \".tmp\").toFile();\n","filename":"jdk\/test\/jdk\/jfr\/event\/io\/TestFileReadOnly.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import jdk.test.lib.Utils;\n@@ -51,2 +52,1 @@\n-        File tmp = File.createTempFile(\"TestFileStreamEvents\", \".tmp\", new File(\".\"));\n-        tmp.deleteOnExit();\n+        File tmp = Utils.createTempFile(\"TestFileStreamEvents\", \".tmp\").toFile();\n","filename":"jdk\/test\/jdk\/jfr\/event\/io\/TestFileStreamEvents.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import jdk.test.lib.Utils;\n@@ -50,2 +51,1 @@\n-        File tmp = File.createTempFile(\"TestRandomAccessFileEvents\", \".tmp\", new File(\".\"));\n-        tmp.deleteOnExit();\n+        File tmp = Utils.createTempFile(\"TestRandomAccessFileEvents\", \".tmp\").toFile();\n","filename":"jdk\/test\/jdk\/jfr\/event\/io\/TestRandomAccessFileEvents.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import jdk.test.lib.Utils;\n@@ -65,2 +66,1 @@\n-        File tmp = File.createTempFile(\"TestRandomAccessFileThread\", \".tmp\", new File(\".\"));\n-        tmp.deleteOnExit();\n+        File tmp = Utils.createTempFile(\"TestRandomAccessFileThread\", \".tmp\").toFile();\n","filename":"jdk\/test\/jdk\/jfr\/event\/io\/TestRandomAccessFileThread.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import jdk.test.lib.Utils;\n@@ -65,1 +66,1 @@\n-        String dumpPath = Files.createTempDirectory(\"dump-path\").toAbsolutePath().toString();\n+        String dumpPath = Utils.createTempDirectory(\"dump-path-\").toAbsolutePath().toString();\n","filename":"jdk\/test\/jdk\/jfr\/jcmd\/TestJcmdConfigure.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+import jdk.test.lib.Utils;\n@@ -130,1 +131,1 @@\n-        File f = File.createTempFile(\"stream_\" + streamId + \"_\", \".jfr\", new File(\".\"));\n+        File f = Utils.createTempFile(\"stream_\" + streamId + \"_\", \".jfr\").toFile();\n","filename":"jdk\/test\/jdk\/jfr\/jmx\/JmxHelper.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+import jdk.test.lib.Utils;\n@@ -120,1 +121,1 @@\n-        File file = File.createTempFile(\"test\", \".jfr\");\n+        File file = Utils.createTempFile(\"test\", \".jfr\").toFile();\n","filename":"jdk\/test\/jdk\/jfr\/jvm\/TestJavaEvent.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -811,0 +811,20 @@\n+\n+    \/**\n+     * Creates an empty directory in \"user.dir\" or \".\"\n+     * <p>\n+     * This method is meant as a replacement for {@code Files#createTempDirectory(String, String, FileAttribute...)}\n+     * that doesn't leave files behind in \/tmp directory of the test machine\n+     * <p>\n+     * If the property \"user.dir\" is not set, \".\" will be used.\n+     *\n+     * @param prefix\n+     * @param attrs\n+     * @return the path to the newly created directory\n+     * @throws IOException\n+     *\n+     * @see {@link Files#createTempDirectory(String, String, FileAttribute...)}\n+     *\/\n+    public static Path createTempDirectory(String prefix, FileAttribute<?>... attrs) throws IOException {\n+        Path dir = Paths.get(System.getProperty(\"user.dir\", \".\"));\n+        return Files.createTempDirectory(dir, prefix);\n+    }\n","filename":"jdk\/test\/lib\/jdk\/test\/lib\/Utils.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}