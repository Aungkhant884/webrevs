{"files":[{"patch":"@@ -53,1 +53,1 @@\n-#define  ROUND(x) ((int) (x+0.5))\n+#define  FT26Dot6ToInt(x) (((int)(x)) >> 6)\n@@ -964,1 +964,1 @@\n-                (float) ROUND(FT26Dot6ToFloat(ftglyph->advance.x));\n+                (float) FT26Dot6ToInt(ftglyph->advance.x);\n@@ -969,1 +969,1 @@\n-                (float) ROUND(FT26Dot6ToFloat(-ftglyph->advance.y));\n+                (float) FT26Dot6ToInt(-ftglyph->advance.y);\n","filename":"jdk\/src\/share\/native\/sun\/font\/freetypeScaler.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test RotatedTextTest\n+ * @bug 8203485\n+ * @summary This test verifies that rotated text preserves the width.\n+ * @run main RotatedTextTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.geom.Rectangle2D;\n+import java.awt.image.BufferedImage;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import javax.imageio.ImageIO;\n+\n+public class RotatedTextTest\n+{\n+    static final int size = 720;\n+    static final Font fnt = new Font(Font.SERIF, Font.PLAIN, 12);\n+    static final String text = \"The quick brown fox jumps over the lazy dog\";\n+\n+    static void drawRotatedText(Graphics g) {\n+        Graphics2D g2d = (Graphics2D)g;\n+\n+        g2d.setFont(fnt);\n+\n+        FontMetrics metrics = g2d.getFontMetrics();\n+        Rectangle2D bounds = metrics.getStringBounds(text, g2d);\n+\n+\n+        g2d.setColor(Color.black);\n+        g2d.fillRect(0, 0, size, size);\n+\n+        g2d.setColor(Color.white);\n+\n+        float[] angles = new float[] { 0, 15, 45, 60, 90, -45, -90, -135, -180, 135, };\n+\n+        for (float a : angles) {\n+            Graphics2D rotated = (Graphics2D)g2d.create();\n+\n+            rotated.translate(size\/2, size\/2);\n+            rotated.rotate(Math.toRadians(a));\n+            rotated.translate(30, 0);\n+\n+            int width_original = metrics.stringWidth(text);\n+            int width_rotated = rotated.getFontMetrics().stringWidth(text);\n+\n+            rotated.drawString(text, 0, 0);\n+            rotated.drawString(String.format(\"  %.0f\", a), width_original, 0);\n+\n+            rotated.setColor(Color.green);\n+            rotated.draw(bounds);\n+\n+            System.out.printf(\"Angle: %.0f, width diff: %d\\n\", a, (width_rotated - width_original));\n+\n+            rotated.dispose();\n+\n+            if (width_rotated != width_original) {\n+                throw new RuntimeException(\"Test failed for angle \" + a);\n+            }\n+        }\n+    }\n+\n+    public static void main(String args[])\n+    {\n+        final BufferedImage dst = new BufferedImage(size, size, BufferedImage.TYPE_INT_RGB);\n+        Graphics g = dst.createGraphics();\n+\n+        try {\n+            drawRotatedText(g);\n+        } finally {\n+            g.dispose();\n+            writeToFile(dst);\n+        }\n+    }\n+\n+    static final String title;\n+    static final String file;\n+\n+    static {\n+        String vendorName = System.getProperty(\"java.vendor\");\n+        String version = System.getProperty(\"java.version\");\n+        String runtimeName = System.getProperty(\"java.runtime.name\");\n+\n+\n+        int index = runtimeName.indexOf(\" Runtime Environment\");\n+        runtimeName = runtimeName.substring(0, index).trim();\n+\n+        title = vendorName + \", \" + runtimeName + \", \" + version;\n+        file = \"rotated-text-\" + title.replace(\", \", \"-\")\n+                .replace(\" \", \"-\") + \".png\";\n+    }\n+\n+    private static void writeToFile(final BufferedImage bi) {\n+        File imageFile = new File(file);\n+        FileOutputStream imageOutStream;\n+        BufferedOutputStream imageBOS = null;\n+        try {\n+            imageOutStream = new FileOutputStream(imageFile);\n+            imageBOS = new BufferedOutputStream(imageOutStream);\n+\n+            ImageIO.setUseCache(false);\n+            ImageIO.write(bi, \"png\", imageBOS);\n+\n+            imageBOS.close();\n+            imageOutStream.close();\n+        }\n+        catch (Exception e) {\n+            System.out.println(e.getMessage());\n+        }\n+    }\n+}\n","filename":"jdk\/test\/java\/awt\/font\/Rotate\/RotatedTextTest.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"}]}