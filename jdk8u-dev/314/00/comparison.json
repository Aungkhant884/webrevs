{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -109,3 +109,5 @@\n-        \/\/ in Unicode 6.2. Since code points {32FF} and {20BB..20BF} are not\n-        \/\/ from Unicode 6.2, return false.\n-        if(ch == 0x32FF || (ch>= 0x20BB && ch<= 0x20BF))\n+        \/\/ in Unicode 6.2. Since code points {32FF}, {20BB..20BF}, and\n+        \/\/ {9FCD..9FEF} are not from Unicode 6.2, return false.\n+        if(ch == 0x32FF ||\n+          (ch>= 0x20BB && ch<= 0x20BF) ||\n+          (ch>= 0x9FCD && ch<= 0x9FEF))\n@@ -119,3 +121,5 @@\n-        \/\/ in Unicode 6.2. Since code points {32FF} and {20BB..20BF} are not\n-        \/\/ from Unicode 6.2, return false.\n-        if(ch == 0x32FF || (ch>= 0x20BB && ch<= 0x20BF))\n+        \/\/ in Unicode 6.2. Since code points {32FF}, {20BB..20BF}, and\n+        \/\/ {9FCD..9FEF} are not from Unicode 6.2, return false.\n+        if(ch == 0x32FF ||\n+          (ch>= 0x20BB && ch<= 0x20BF) ||\n+          (ch>= 0x9FCD && ch<= 0x9FEF))\n","filename":"jdk\/make\/data\/characterdata\/CharacterData00.java.template","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -11735,1 +11735,1 @@\n-9FCC;<CJK Ideograph, Last>;Lo;0;L;;;;;N;;;;;\n+9FEF;<CJK Ideograph, Last>;Lo;0;L;;;;;N;;;;;\n","filename":"jdk\/make\/data\/unicodedata\/UnicodeData.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,4 +55,1 @@\n- * of the Unicode Standard, with two extensions. First, the Java SE 8 Platform\n- * allows an implementation of class {@code Character} to use the Japanese Era\n- * code point, {@code U+32FF}, from the first version of the Unicode Standard\n- * after 6.2 that assigns the code point. Second, in recognition of the fact\n+ * of the Unicode Standard, with three extensions. First, in recognition of the fact\n@@ -61,1 +58,8 @@\n- * block from version 10.0 of the Unicode Standard. Consequently, the\n+ * block from version 10.0 of the Unicode Standard. Second, the Java SE 8 Platform\n+ * allows an implementation of class {@code Character} to use the code points\n+ * in the range of {@code U+9FCD} to {@code U+9FEF} from version 11.0 of the\n+ * Unicode Standard, in order for the class to allow the \"Implementation\n+ * Level 1\" of the Chinese GB18030-2022 standard. Third, the Java SE 8 Platform\n+ * allows an implementation of class {@code Character} to use the Japanese Era\n+ * code point, {@code U+32FF}, from the Unicode Standard version 12.1.\n+ * Consequently, the\n","filename":"jdk\/src\/share\/classes\/java\/lang\/Character.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1436,1 +1436,1 @@\n-4E00..9FCC    ; Han # Lo [20941] CJK UNIFIED IDEOGRAPH-4E00..CJK UNIFIED IDEOGRAPH-9FCC\n+4E00..9FEF    ; Han # Lo [20976] CJK UNIFIED IDEOGRAPH-4E00..CJK UNIFIED IDEOGRAPH-9FEF\n@@ -1444,1 +1444,1 @@\n-# Total code points: 75963\n+# Total code points: 75998\n","filename":"jdk\/test\/java\/lang\/Character\/Scripts.txt","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,3 +31,0 @@\n-import java.util.List;\n-import java.util.ArrayList;\n-\n@@ -35,12 +32,9 @@\n-\n-    \/\/ List of new code points are not present in Unicode 6.2.\n-    private static final List<Integer> UNASSIGNED_CODEPOINTS_IN_6_2\n-                                    = new ArrayList<Integer>()\n-                                    {{\n-                                        add(0x20BB); \/\/ NORDIC MARK SIGN\n-                                        add(0x20BC); \/\/ MANAT SIGN\n-                                        add(0x20BD); \/\/ RUBLE SIGN\n-                                        add(0x20BE); \/\/ LARI SIGN\n-                                        add(0x20BF); \/\/ BITCOIN SIGN\n-                                        add(0x32FF); \/\/ SQUARE ERA NAME NEWERA\n-                                    }};\n+    \/\/ Unassigned code points not present in Unicode 6.2 (which Java SE 8\n+    \/\/ is based upon), including: various currency symbol sign code points\n+    \/\/ (Nordic Mark ... Bitcoin), Japanese Era Square character code point,\n+    \/\/ and 35 CJK Unified Ideograph code points from GB18030-2022\n+    private static final int CS_SIGNS_CODEPOINT_START = 0x20BB;\n+    private static final int CS_SIGNS_CODEPOINT_END = 0x20BF;\n+    private static final int JAPANESE_ERA_CODEPOINT = 0x32FF;\n+    private static final int GB18030_2022_CODEPOINT_START = 0x9FCD;\n+    private static final int GB18030_2022_CODEPOINT_END = 0x9FEF;\n@@ -78,1 +72,0 @@\n-\n@@ -81,5 +74,7 @@\n-            \/\/ check if code point is in \"UNASSIGNED_CODEPOINTS_IN_6_2\"\n-            \/\/ list. If the code point is found in list\n-            \/\/ \"UNASSIGNED_CODEPOINTS_IN_6_2\", value of variable\n-            \/\/ \"expected\" is considered false.\n-            if (!UNASSIGNED_CODEPOINTS_IN_6_2.contains(cp)) {\n+            \/\/ check if code point is one of the extra unassigned\n+            \/\/ code points (defined at the beginning of the file). If the code\n+            \/\/ point is found to be one of the unassigned code points,\n+            \/\/ value of variable \"expected\" is considered false.\n+            if (cp != JAPANESE_ERA_CODEPOINT &&\n+                    !(cp >= CS_SIGNS_CODEPOINT_START && cp <= CS_SIGNS_CODEPOINT_END) &&\n+                    !(cp >= GB18030_2022_CODEPOINT_START && cp <= GB18030_2022_CODEPOINT_END)) {\n@@ -127,5 +122,7 @@\n-            \/\/ check if code point is in \"UNASSIGNED_CODEPOINTS_IN_6_2\"\n-            \/\/ list. If the code point is found in list\n-            \/\/ \"UNASSIGNED_CODEPOINTS_IN_6_2\", value of variable\n-            \/\/ \"expected\" is considered false.\n-            if (!UNASSIGNED_CODEPOINTS_IN_6_2.contains(i)) {\n+            \/\/ check if code point is one of the extra unassigned\n+            \/\/ code points (defined at the beginning of the file). If the code\n+            \/\/ point is found to be one of the unassigned code points,\n+            \/\/ value of variable \"expected\" is considered false.\n+            if (i != JAPANESE_ERA_CODEPOINT &&\n+                    !(i >= CS_SIGNS_CODEPOINT_START && i <= CS_SIGNS_CODEPOINT_END) &&\n+                    !(i >= GB18030_2022_CODEPOINT_START && i <= GB18030_2022_CODEPOINT_END)) {\n@@ -168,5 +165,7 @@\n-            \/\/ check if code point is in \"UNASSIGNED_CODEPOINTS_IN_6_2\"\n-            \/\/ list. If the code point is found in list\n-            \/\/ \"UNASSIGNED_CODEPOINTS_IN_6_2\", value of variable\n-            \/\/ \"expected\" is considered false.\n-            if (!UNASSIGNED_CODEPOINTS_IN_6_2.contains(cp)) {\n+            \/\/ check if code point is one of the extra unassigned\n+            \/\/ code points (defined at the beginning of the file). If the code\n+            \/\/ point is found to be one of the unassigned code points,\n+            \/\/ value of variable \"expected\" is considered false.\n+            if (cp != JAPANESE_ERA_CODEPOINT &&\n+                    !(cp >= CS_SIGNS_CODEPOINT_START && cp <= CS_SIGNS_CODEPOINT_END) &&\n+                    !(cp >= GB18030_2022_CODEPOINT_START && cp <= GB18030_2022_CODEPOINT_END)) {\n@@ -206,5 +205,7 @@\n-            \/\/ check if code point is in \"UNASSIGNED_CODEPOINTS_IN_6_2\"\n-            \/\/ list. If the code point is found in list\n-            \/\/ \"UNASSIGNED_CODEPOINTS_IN_6_2\", value of variable\n-            \/\/ \"expected\" is considered false.\n-            if (!UNASSIGNED_CODEPOINTS_IN_6_2.contains(i)) {\n+            \/\/ check if code point is one of the extra unassigned\n+            \/\/ code points (defined at the beginning of the file). If the code\n+            \/\/ point is found to be one of the unassigned code points,\n+            \/\/ value of variable \"expected\" is considered false.\n+            if (i != JAPANESE_ERA_CODEPOINT &&\n+                    !(i >= CS_SIGNS_CODEPOINT_START && i <= CS_SIGNS_CODEPOINT_END) &&\n+                    !(i >= GB18030_2022_CODEPOINT_START && i <= GB18030_2022_CODEPOINT_END)) {\n@@ -244,5 +245,7 @@\n-            \/\/ check if code point is in \"UNASSIGNED_CODEPOINTS_IN_6_2\"\n-            \/\/ list. If the code point is found in list\n-            \/\/ \"UNASSIGNED_CODEPOINTS_IN_6_2\", value of variable\n-            \/\/ \"expected\" is considered false.\n-            if (!UNASSIGNED_CODEPOINTS_IN_6_2.contains(i)) {\n+            \/\/ check if code point is one of the extra unassigned\n+            \/\/ code points (defined at the beginning of the file). If the code\n+            \/\/ point is found to be one of the unassigned code points,\n+            \/\/ value of variable \"expected\" is considered false.\n+            if (i != JAPANESE_ERA_CODEPOINT &&\n+                    !(i >= CS_SIGNS_CODEPOINT_START && i <= CS_SIGNS_CODEPOINT_END) &&\n+                    !(i >= GB18030_2022_CODEPOINT_START && i <= GB18030_2022_CODEPOINT_END)) {\n@@ -286,5 +289,7 @@\n-            \/\/ check if code point is in \"UNASSIGNED_CODEPOINTS_IN_6_2\"\n-            \/\/ list. If the code point is found in list\n-            \/\/ \"UNASSIGNED_CODEPOINTS_IN_6_2\", value of variable\n-            \/\/ \"expected\" is considered false.\n-            if (!UNASSIGNED_CODEPOINTS_IN_6_2.contains(i)) {\n+            \/\/ check if code point is one of the extra unassigned\n+            \/\/ code points (defined at the beginning of the file). If the code\n+            \/\/ point is found to be one of the unassigned code points,\n+            \/\/ value of variable \"expected\" is considered false.\n+            if (i != JAPANESE_ERA_CODEPOINT &&\n+                    !(i >= CS_SIGNS_CODEPOINT_START && i <= CS_SIGNS_CODEPOINT_END) &&\n+                    !(i >= GB18030_2022_CODEPOINT_START && i <= GB18030_2022_CODEPOINT_END)) {\n","filename":"jdk\/test\/java\/lang\/Character\/TestIsJavaIdentifierMethods.java","additions":52,"deletions":47,"binary":false,"changes":99,"status":"modified"}]}