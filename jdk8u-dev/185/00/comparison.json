{"files":[{"patch":"@@ -51,0 +51,1 @@\n+    private static final long NO_SWAP = 0;\n@@ -56,1 +57,1 @@\n-    private long getLongVal(String file) {\n+    private long getLongVal(String file, long defaultValue) {\n@@ -60,1 +61,5 @@\n-                                                      CgroupSubsystem.LONG_RETVAL_UNLIMITED);\n+                                                      defaultValue);\n+    }\n+\n+    private long getLongVal(String file) {\n+        return getLongVal(file, CgroupSubsystem.LONG_RETVAL_UNLIMITED);\n@@ -292,0 +297,5 @@\n+        \/\/ We only get a null string when file memory.swap.max doesn't exist.\n+        \/\/ In that case we return the memory limit without any swap.\n+        if (strVal == null) {\n+            return getMemoryLimit();\n+        }\n@@ -310,1 +320,0 @@\n-        long swapUsage = getLongVal(\"memory.swap.current\");\n@@ -312,1 +321,7 @@\n-        return memoryUsage + swapUsage;\n+        if (memoryUsage >= 0) {\n+            \/\/ If file memory.swap.current doesn't exist, only return the regular\n+            \/\/ memory usage (without swap). Thus, use default value of NO_SWAP.\n+            long swapUsage = getLongVal(\"memory.swap.current\", NO_SWAP);\n+            return memoryUsage + swapUsage;\n+        }\n+        return memoryUsage; \/\/ case of no memory limits\n","filename":"jdk\/src\/linux\/classes\/jdk\/internal\/platform\/cgroupv2\/CgroupV2Subsystem.java","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -235,5 +235,6 @@\n-        oldVal = metrics.getMemoryAndSwapLimit();\n-        long valSwap = getLongLimitValueFromFile(\"memory.swap.max\");\n-        long valMemory = getLongLimitValueFromFile(\"memory.max\");\n-        if (valSwap == UNLIMITED) {\n-            newVal = valSwap;\n+        long memAndSwapLimit = metrics.getMemoryAndSwapLimit();\n+        long memLimit = metrics.getMemoryLimit();\n+        \/\/ Only test swap memory limits if we can. On systems with swapaccount=0\n+        \/\/ we cannot, as swap limits are disabled.\n+        if (memAndSwapLimit <= memLimit) {\n+            System.out.println(\"No swap memory limits, test case(s) skipped\");\n@@ -241,6 +242,12 @@\n-            assert valMemory >= 0;\n-            newVal = valSwap + valMemory;\n-        }\n-        if (!CgroupMetricsTester.compareWithErrorMargin(oldVal, newVal)) {\n-            fail(\"memory.swap.max\", oldVal, newVal);\n-        }\n+            oldVal = memAndSwapLimit;\n+            long valSwap = getLongLimitValueFromFile(\"memory.swap.max\");\n+            long valMemory = getLongLimitValueFromFile(\"memory.max\");\n+            if (valSwap == UNLIMITED) {\n+                newVal = valSwap;\n+            } else {\n+                assert valMemory >= 0;\n+                newVal = valSwap + valMemory;\n+            }\n+            if (!CgroupMetricsTester.compareWithErrorMargin(oldVal, newVal)) {\n+                fail(\"memory.swap.max\", oldVal, newVal);\n+            }\n@@ -248,6 +255,7 @@\n-        oldVal = metrics.getMemoryAndSwapUsage();\n-        long swapUsage = getLongValueFromFile(\"memory.swap.current\");\n-        long memUsage = getLongValueFromFile(\"memory.current\");\n-        newVal = swapUsage + memUsage;\n-        if (!CgroupMetricsTester.compareWithErrorMargin(oldVal, newVal)) {\n-            fail(\"memory.swap.current\", oldVal, newVal);\n+            oldVal = metrics.getMemoryAndSwapUsage();\n+            long swapUsage = getLongValueFromFile(\"memory.swap.current\");\n+            long memUsage = getLongValueFromFile(\"memory.current\");\n+            newVal = swapUsage + memUsage;\n+            if (!CgroupMetricsTester.compareWithErrorMargin(oldVal, newVal)) {\n+                fail(\"memory.swap.current\", oldVal, newVal);\n+            }\n","filename":"jdk\/test\/lib\/jdk\/test\/lib\/containers\/cgroup\/MetricsTesterCgroupV2.java","additions":25,"deletions":17,"binary":false,"changes":42,"status":"modified"}]}