{"files":[{"patch":"@@ -664,1 +664,1 @@\n-FREETYPE_BUNDLE_LIB_PATH\n+FREETYPE_TO_USE\n@@ -1019,1 +1019,0 @@\n-runstatedir\n@@ -1106,2 +1105,0 @@\n-with_freetype_src\n-enable_freetype_bundling\n@@ -1264,1 +1261,0 @@\n-runstatedir='${localstatedir}\/run'\n@@ -1517,9 +1513,0 @@\n-  -runstatedir | --runstatedir | --runstatedi | --runstated \\\n-  | --runstate | --runstat | --runsta | --runst | --runs \\\n-  | --run | --ru | --r)\n-    ac_prev=runstatedir ;;\n-  -runstatedir=* | --runstatedir=* | --runstatedi=* | --runstated=* \\\n-  | --runstate=* | --runstat=* | --runsta=* | --runst=* | --runs=* \\\n-  | --run=* | --ru=* | --r=*)\n-    runstatedir=$ac_optarg ;;\n-\n@@ -1663,1 +1650,1 @@\n-\t\tlibdir localedir mandir runstatedir\n+\t\tlibdir localedir mandir\n@@ -1816,1 +1803,0 @@\n-  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR\/run]\n@@ -1872,4 +1858,0 @@\n-  --disable-freetype-bundling\n-                          disable bundling of the freetype library with the\n-                          build result [enabled on Windows or when using\n-                          --with-freetype, disabled otherwise]\n@@ -1980,3 +1962,7 @@\n-  --with-freetype         specify prefix directory for the freetype package\n-                          (expecting the libraries under PATH\/lib and the\n-                          headers under PATH\/include)\n+  --with-freetype         specify whether to use 'system' or 'bundled'\n+                          freetype. The selected option applies to both build\n+                          time and run time. The default behaviour can be\n+                          platform dependent. If using 'system' and either the\n+                          include files or libraries cannot be located\n+                          automatically, then additionally specify both using\n+                          --with-freetype-include and --with-freetype-lib.\n@@ -1985,3 +1971,0 @@\n-  --with-freetype-src     specify directory with freetype sources to\n-                          automatically build the library (experimental,\n-                          Windows-only)\n@@ -3853,14 +3836,0 @@\n-    freetype)\n-      HELP_MSG=\"\n-The freetype library can now be build during the configure process.\n-Download the freetype sources and unpack them into an arbitrary directory:\n-\n-wget http:\/\/download.savannah.gnu.org\/releases\/freetype\/freetype-2.5.3.tar.gz\n-tar -xzf freetype-2.5.3.tar.gz\n-\n-Then run configure with '--with-freetype-src=<freetype_src>'. This will\n-automatically build the freetype library into '<freetype_src>\/lib64' for 64-bit\n-builds or into '<freetype_src>\/lib32' for 32-bit builds.\n-Afterwards you can always use '--with-freetype-include=<freetype_src>\/include'\n-and '--with-freetype-lib=<freetype_src>\/lib32|64' for other builds.\"\n-      ;;\n@@ -4043,2 +4012,0 @@\n-\n-\n@@ -4440,1 +4407,1 @@\n-DATE_WHEN_GENERATED=1670219878\n+DATE_WHEN_GENERATED=1684924598\n@@ -25183,1 +25150,1 @@\n-  # openjdk is the help tag: freetype, cups, pulse, alsa etc\n+  # openjdk is the help tag: cups, pulse, alsa etc\n@@ -26128,1 +26095,0 @@\n-    eval PLATFORM_TOOLSET=\"\\${VS_VS_PLATFORM_NAME_${VS_VERSION}}\"\n@@ -26246,6 +26212,0 @@\n-      else\n-        # PLATFORM_TOOLSET is used during the compilation of the freetype sources\n-        # (see 'LIB_BUILD_FREETYPE' in libraries.m4) and must be one of 'v100',\n-        # 'v110' or 'v120' for VS 2010, 2012 or VS2013\n-        eval PLATFORM_TOOLSET=\"\\${VS_VS_PLATFORM_NAME_${VS_VERSION}}\"\n-\n@@ -26303,6 +26263,0 @@\n-      else\n-        # PLATFORM_TOOLSET is used during the compilation of the freetype sources\n-        # (see 'LIB_BUILD_FREETYPE' in libraries.m4) and must be one of 'v100',\n-        # 'v110' or 'v120' for VS 2010, 2012 or VS2013\n-        eval PLATFORM_TOOLSET=\"\\${VS_VS_PLATFORM_NAME_${VS_VERSION}}\"\n-\n@@ -26376,6 +26330,0 @@\n-      else\n-        # PLATFORM_TOOLSET is used during the compilation of the freetype sources\n-        # (see 'LIB_BUILD_FREETYPE' in libraries.m4) and must be one of 'v100',\n-        # 'v110' or 'v120' for VS 2010, 2012 or VS2013\n-        eval PLATFORM_TOOLSET=\"\\${VS_VS_PLATFORM_NAME_${VS_VERSION}}\"\n-\n@@ -26435,6 +26383,0 @@\n-      else\n-        # PLATFORM_TOOLSET is used during the compilation of the freetype sources\n-        # (see 'LIB_BUILD_FREETYPE' in libraries.m4) and must be one of 'v100',\n-        # 'v110' or 'v120' for VS 2010, 2012 or VS2013\n-        eval PLATFORM_TOOLSET=\"\\${VS_VS_PLATFORM_NAME_${VS_VERSION}}\"\n-\n@@ -26496,6 +26438,0 @@\n-      else\n-        # PLATFORM_TOOLSET is used during the compilation of the freetype sources\n-        # (see 'LIB_BUILD_FREETYPE' in libraries.m4) and must be one of 'v100',\n-        # 'v110' or 'v120' for VS 2010, 2012 or VS2013\n-        eval PLATFORM_TOOLSET=\"\\${VS_VS_PLATFORM_NAME_${VS_VERSION}}\"\n-\n@@ -26554,6 +26490,0 @@\n-      else\n-        # PLATFORM_TOOLSET is used during the compilation of the freetype sources\n-        # (see 'LIB_BUILD_FREETYPE' in libraries.m4) and must be one of 'v100',\n-        # 'v110' or 'v120' for VS 2010, 2012 or VS2013\n-        eval PLATFORM_TOOLSET=\"\\${VS_VS_PLATFORM_NAME_${VS_VERSION}}\"\n-\n@@ -26611,6 +26541,0 @@\n-      else\n-        # PLATFORM_TOOLSET is used during the compilation of the freetype sources\n-        # (see 'LIB_BUILD_FREETYPE' in libraries.m4) and must be one of 'v100',\n-        # 'v110' or 'v120' for VS 2010, 2012 or VS2013\n-        eval PLATFORM_TOOLSET=\"\\${VS_VS_PLATFORM_NAME_${VS_VERSION}}\"\n-\n@@ -26656,4 +26580,0 @@\n-        # PLATFORM_TOOLSET is used during the compilation of the freetype sources (see\n-        # 'LIB_BUILD_FREETYPE' in libraries.m4) and must be 'Windows7.1SDK' for Windows7.1SDK\n-        # TODO: improve detection for other versions of SDK\n-        eval PLATFORM_TOOLSET=\"\\${VS_SDK_PLATFORM_NAME_${VS_VERSION}}\"\n@@ -26703,4 +26623,0 @@\n-        # PLATFORM_TOOLSET is used during the compilation of the freetype sources (see\n-        # 'LIB_BUILD_FREETYPE' in libraries.m4) and must be 'Windows7.1SDK' for Windows7.1SDK\n-        # TODO: improve detection for other versions of SDK\n-        eval PLATFORM_TOOLSET=\"\\${VS_SDK_PLATFORM_NAME_${VS_VERSION}}\"\n@@ -26750,4 +26666,0 @@\n-        # PLATFORM_TOOLSET is used during the compilation of the freetype sources (see\n-        # 'LIB_BUILD_FREETYPE' in libraries.m4) and must be 'Windows7.1SDK' for Windows7.1SDK\n-        # TODO: improve detection for other versions of SDK\n-        eval PLATFORM_TOOLSET=\"\\${VS_SDK_PLATFORM_NAME_${VS_VERSION}}\"\n@@ -26796,4 +26708,0 @@\n-        # PLATFORM_TOOLSET is used during the compilation of the freetype sources (see\n-        # 'LIB_BUILD_FREETYPE' in libraries.m4) and must be 'Windows7.1SDK' for Windows7.1SDK\n-        # TODO: improve detection for other versions of SDK\n-        eval PLATFORM_TOOLSET=\"\\${VS_SDK_PLATFORM_NAME_${VS_VERSION}}\"\n@@ -26841,4 +26749,0 @@\n-        # PLATFORM_TOOLSET is used during the compilation of the freetype sources (see\n-        # 'LIB_BUILD_FREETYPE' in libraries.m4) and must be 'Windows7.1SDK' for Windows7.1SDK\n-        # TODO: improve detection for other versions of SDK\n-        eval PLATFORM_TOOLSET=\"\\${VS_SDK_PLATFORM_NAME_${VS_VERSION}}\"\n@@ -27648,1 +27552,1 @@\n-  # devkit is the help tag: freetype, cups, pulse, alsa etc\n+  # devkit is the help tag: cups, pulse, alsa etc\n@@ -29389,1 +29293,1 @@\n-  # devkit is the help tag: freetype, cups, pulse, alsa etc\n+  # devkit is the help tag: cups, pulse, alsa etc\n@@ -44581,1 +44485,1 @@\n-  # x11 is the help tag: freetype, cups, pulse, alsa etc\n+  # x11 is the help tag: cups, pulse, alsa etc\n@@ -44675,1 +44579,1 @@\n-  # x11 is the help tag: freetype, cups, pulse, alsa etc\n+  # x11 is the help tag: cups, pulse, alsa etc\n@@ -44935,1 +44839,1 @@\n-  # cups is the help tag: freetype, cups, pulse, alsa etc\n+  # cups is the help tag: cups, pulse, alsa etc\n@@ -44972,5 +44876,0 @@\n-  ###############################################################################\n-  #\n-  # The ubiquitous freetype library is used to render fonts.\n-  #\n-\n@@ -44995,11 +44894,8 @@\n-# Check whether --with-freetype-src was given.\n-if test \"${with_freetype_src+set}\" = set; then :\n-  withval=$with_freetype_src;\n-fi\n-\n-  # Check whether --enable-freetype-bundling was given.\n-if test \"${enable_freetype_bundling+set}\" = set; then :\n-  enableval=$enable_freetype_bundling;\n-fi\n-\n-\n+  # This setup is to verify access to system installed freetype header and\n+  # libraries. On Windows and MacOS this does not apply and using these options\n+  # will report an error. On other platforms they will default to using the\n+  # system libraries. If they are found automatically, nothing need be done.\n+  # If they are not found, the configure \"--with-freetype-*\" options may be\n+  # used to fix that. If the preference is to bundle on these platforms then\n+  # use --with-freetype=bundled.\n+  FREETYPE_BASE_NAME=freetype\n@@ -45008,10 +44904,21 @@\n-  FREETYPE_BUNDLE_LIB_PATH=\n-\n-  if test \"x$FREETYPE_NOT_NEEDED\" = xyes; then\n-    if test \"x$with_freetype\" != x || test \"x$with_freetype_include\" != x || test \"x$with_freetype_lib\" != x || test \"x$with_freetype_src\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: freetype not used, so --with-freetype is ignored\" >&5\n-$as_echo \"$as_me: WARNING: freetype not used, so --with-freetype is ignored\" >&2;}\n-    fi\n-    if test \"x$enable_freetype_bundling\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: freetype not used, so --enable-freetype-bundling is ignored\" >&5\n-$as_echo \"$as_me: WARNING: freetype not used, so --enable-freetype-bundling is ignored\" >&2;}\n+  if (test \"x$with_freetype_include\" = \"x\" && test \"x$with_freetype_lib\" != \"x\") || \\\n+     (test \"x$with_freetype_include\" != \"x\" && test \"x$with_freetype_lib\" = \"x\"); then\n+    as_fn_error $? \"Must specify both or neither of --with-freetype-include and --with-freetype-lib\" \"$LINENO\" 5\n+  fi\n+  FREETYPE_TO_USE=bundled\n+  if test \"x$OPENJDK_TARGET_OS\" != \"xwindows\" && \\\n+      test \"x$OPENJDK_TARGET_OS\" != \"xmacosx\" && \\\n+      test \"x$OPENJDK_TARGET_OS\" != \"xaix\"; then\n+    FREETYPE_TO_USE=system\n+  fi\n+  if test \"x$with_freetype\" != \"x\" ; then\n+    if test \"x$with_freetype\" = \"xsystem\" ; then\n+      FREETYPE_TO_USE=system\n+    elif test \"x$with_freetype\" = \"xbundled\" ; then\n+      FREETYPE_TO_USE=bundled\n+      if test \"x$with_freetype_include\" != \"x\" || \\\n+          test \"x$with_freetype_lib\" != \"x\" ; then\n+        as_fn_error $? \"'bundled' cannot be specified with --with-freetype-include and --with-freetype-lib\" \"$LINENO\" 5\n+      fi\n+    else\n+      as_fn_error $? \"Valid values for --with-freetype are 'system' and 'bundled'\" \"$LINENO\" 5\n@@ -45019,8 +44926,1 @@\n-  else\n-    # freetype is needed to build; go get it!\n-\n-    BUNDLE_FREETYPE=\"$enable_freetype_bundling\"\n-\n-    if  test \"x$with_freetype_src\" != x; then\n-      if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-        # Try to build freetype if --with-freetype-src was given on Windows\n+  fi\n@@ -45028,2 +44928,4 @@\n-  FREETYPE_SRC_PATH=\"$with_freetype_src\"\n-  BUILD_FREETYPE=yes\n+  if test \"x$with_freetype_include\" != \"x\" && \\\n+      test \"x$with_freetype_lib\" != \"x\" ; then\n+    FREETYPE_TO_USE=system\n+  fi\n@@ -45031,5 +44933,4 @@\n-  # Check if the freetype sources are acessible..\n-  if ! test -d $FREETYPE_SRC_PATH; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: --with-freetype-src specified, but can't find path \\\"$FREETYPE_SRC_PATH\\\" - ignoring --with-freetype-src\" >&5\n-$as_echo \"$as_me: WARNING: --with-freetype-src specified, but can't find path \\\"$FREETYPE_SRC_PATH\\\" - ignoring --with-freetype-src\" >&2;}\n-    BUILD_FREETYPE=no\n+  if test \"x$FREETYPE_TO_USE\" = \"xsystem\" && \\\n+     (test \"x$OPENJDK_TARGET_OS\" = \"xwindows\" || \\\n+     test \"x$OPENJDK_TARGET_OS\" = \"xmacosx\"); then\n+    as_fn_error $? \"Only bundled freetype can be specified on Mac and Windows\" \"$LINENO\" 5\n@@ -45037,6 +44938,3 @@\n-  # ..and contain a vc2010 project file\n-  vcxproj_path=\"$FREETYPE_SRC_PATH\/builds\/windows\/vc2010\/freetype.vcxproj\"\n-  if test \"x$BUILD_FREETYPE\" = xyes && ! test -s $vcxproj_path; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: Can't find project file $vcxproj_path (you may try a newer freetype version) - ignoring --with-freetype-src\" >&5\n-$as_echo \"$as_me: WARNING: Can't find project file $vcxproj_path (you may try a newer freetype version) - ignoring --with-freetype-src\" >&2;}\n-    BUILD_FREETYPE=no\n+\n+  if test \"x$with_freetype_include\" != \"x\" ; then\n+    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$with_freetype_include\"\n@@ -45044,5 +44942,2 @@\n-  # Now check if configure found a version of 'msbuild.exe'\n-  if test \"x$BUILD_FREETYPE\" = xyes && test \"x$MSBUILD\" == x ; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: Can't find an msbuild.exe executable (you may try to install .NET 4.0) - ignoring --with-freetype-src\" >&5\n-$as_echo \"$as_me: WARNING: Can't find an msbuild.exe executable (you may try to install .NET 4.0) - ignoring --with-freetype-src\" >&2;}\n-    BUILD_FREETYPE=no\n+  if test \"x$with_freetype_lib\" != \"x\" ; then\n+    POTENTIAL_FREETYPE_LIB_PATH=\"$with_freetype_lib\"\n@@ -45051,2 +44946,4 @@\n-  # Ready to go..\n-  if test \"x$BUILD_FREETYPE\" = xyes; then\n+  if test \"x$FREETYPE_TO_USE\" = \"xsystem\" ; then\n+    if test \"x$POTENTIAL_FREETYPE_INCLUDE_PATH\" != \"x\" && \\\n+        test \"x$POTENTIAL_FREETYPE_LIB_PATH\" != \"x\" ; then\n+      # Okay, we got it. Check that it works.\n@@ -45054,4 +44951,3 @@\n-    # msbuild requires trailing slashes for output directories\n-    freetype_lib_path=\"$FREETYPE_SRC_PATH\/lib$OPENJDK_TARGET_CPU_BITS\/\"\n-    freetype_lib_path_unix=\"$freetype_lib_path\"\n-    freetype_obj_path=\"$FREETYPE_SRC_PATH\/obj$OPENJDK_TARGET_CPU_BITS\/\"\n+  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n+  POTENTIAL_FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n+  METHOD=\"--with-freetype\"\n@@ -45059,7 +44955,11 @@\n-  unix_path=\"$vcxproj_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    windows_path=`$CYGPATH -m \"$unix_path\"`\n-    vcxproj_path=\"$windows_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    windows_path=`cmd \/\/c echo $unix_path`\n-    vcxproj_path=\"$windows_path\"\n+  # Assume we've found freetype to begin\n+  FOUND_FREETYPE=yes\n+\n+  # First look for the canonical freetype main include file ft2build.h.\n+  if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+    # Oh no! Let's try in the freetype2 directory.\n+    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\/freetype2\"\n+    if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+      # Fail.\n+      FOUND_FREETYPE=no\n+    fi\n@@ -45068,0 +44968,5 @@\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n+    # Include file found, let's continue the sanity check.\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&5\n+$as_echo \"$as_me: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&6;}\n+    FOUND_FREETYPE=yes\n@@ -45069,7 +44974,6 @@\n-  unix_path=\"$freetype_lib_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    windows_path=`$CYGPATH -m \"$unix_path\"`\n-    freetype_lib_path=\"$windows_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    windows_path=`cmd \/\/c echo $unix_path`\n-    freetype_lib_path=\"$windows_path\"\n+    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}${FREETYPE_BASE_NAME}${SHARED_LIBRARY_SUFFIX}\"\n+    if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME\"; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&5\n+$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&6;}\n+      FOUND_FREETYPE=no\n+    fi\n@@ -45078,8 +44982,11 @@\n-\n-  unix_path=\"$freetype_obj_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    windows_path=`$CYGPATH -m \"$unix_path\"`\n-    freetype_obj_path=\"$windows_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    windows_path=`cmd \/\/c echo $unix_path`\n-    freetype_obj_path=\"$windows_path\"\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n+    FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype includes\" >&5\n+$as_echo_n \"checking for freetype includes... \" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_INCLUDE_PATH\" >&5\n+$as_echo \"$FREETYPE_INCLUDE_PATH\" >&6; }\n+    FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype libraries\" >&5\n+$as_echo_n \"checking for freetype libraries... \" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_LIB_PATH\" >&5\n+$as_echo \"$FREETYPE_LIB_PATH\" >&6; }\n@@ -45088,46 +44995,2 @@\n-    if test \"x$OPENJDK_TARGET_CPU_BITS\" = x64; then\n-      freetype_platform=x64\n-    else\n-      freetype_platform=win32\n-    fi\n-\n-    # The original freetype project file is for VS 2010 (i.e. 'v100'),\n-    # so we have to adapt the toolset if building with any other toolsed (i.e. SDK).\n-    # Currently 'PLATFORM_TOOLSET' is set in 'TOOLCHAIN_CHECK_POSSIBLE_VISUAL_STUDIO_ROOT'\/\n-    # 'TOOLCHAIN_CHECK_POSSIBLE_WIN_SDK_ROOT' in toolchain_windows.m4\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Trying to compile freetype sources with PlatformToolset=$PLATFORM_TOOLSET to $freetype_lib_path_unix ...\" >&5\n-$as_echo \"$as_me: Trying to compile freetype sources with PlatformToolset=$PLATFORM_TOOLSET to $freetype_lib_path_unix ...\" >&6;}\n-\n-    # First we try to build the freetype.dll\n-    $ECHO -e \"@echo off\\n\"\\\n-\t     \"$MSBUILD $vcxproj_path \"\\\n-\t\t       \"\/p:PlatformToolset=$PLATFORM_TOOLSET \"\\\n-\t\t       \"\/p:Configuration=\\\"Release Multithreaded\\\" \"\\\n-\t\t       \"\/p:Platform=$freetype_platform \"\\\n-\t\t       \"\/p:ConfigurationType=DynamicLibrary \"\\\n-\t\t       \"\/p:TargetName=freetype \"\\\n-\t\t       \"\/p:OutDir=\\\"$freetype_lib_path\\\" \"\\\n-\t\t       \"\/p:IntDir=\\\"$freetype_obj_path\\\" > freetype.log\" > freetype.bat\n-    cmd \/c freetype.bat\n-\n-    if test -s \"$freetype_lib_path_unix\/freetype.dll\"; then\n-      # If that succeeds we also build freetype.lib\n-      $ECHO -e \"@echo off\\n\"\\\n-\t       \"$MSBUILD $vcxproj_path \"\\\n-\t\t\t \"\/p:PlatformToolset=$PLATFORM_TOOLSET \"\\\n-\t\t\t \"\/p:Configuration=\\\"Release Multithreaded\\\" \"\\\n-\t\t\t \"\/p:Platform=$freetype_platform \"\\\n-\t\t\t \"\/p:ConfigurationType=StaticLibrary \"\\\n-\t\t\t \"\/p:TargetName=freetype \"\\\n-\t\t\t \"\/p:OutDir=\\\"$freetype_lib_path\\\" \"\\\n-\t\t\t \"\/p:IntDir=\\\"$freetype_obj_path\\\" >> freetype.log\" > freetype.bat\n-      cmd \/c freetype.bat\n-\n-      if test -s \"$freetype_lib_path_unix\/freetype.lib\"; then\n-\t# Once we build both, lib and dll, set freetype lib and include path appropriately\n-\tPOTENTIAL_FREETYPE_INCLUDE_PATH=\"$FREETYPE_SRC_PATH\/include\"\n-\tPOTENTIAL_FREETYPE_LIB_PATH=\"$freetype_lib_path_unix\"\n-\t{ $as_echo \"$as_me:${as_lineno-$LINENO}: Compiling freetype sources succeeded! (see freetype.log for build results)\" >&5\n-$as_echo \"$as_me: Compiling freetype sources succeeded! (see freetype.log for build results)\" >&6;}\n-      else\n-\tBUILD_FREETYPE=no\n+      if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n+        as_fn_error $? \"Can not find or use freetype at location given by --with-freetype-lib|include\" \"$LINENO\" 5\n@@ -45136,3 +44999,9 @@\n-      BUILD_FREETYPE=no\n-    fi\n-  fi\n+      # User did not specify a location, but asked for system freetype.\n+      # Try to locate it.\n+      # If we have a sysroot, assume that's where we are supposed to look and\n+      # skip pkg-config.\n+      if test \"x$SYSROOT\" = \"x\" ; then\n+        if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n+          # Check modules using pkg-config, but only if we have it (ugly output\n+          # results otherwise)\n+          if test \"x$PKG_CONFIG\" != \"x\" ; then\n@@ -45140,2 +45009,3 @@\n-        if test \"x$BUILD_FREETYPE\" = xyes; then\n-          # Okay, we built it. Check that it works.\n+pkg_failed=no\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for FREETYPE\" >&5\n+$as_echo_n \"checking for FREETYPE... \" >&6; }\n@@ -45143,3 +45013,80 @@\n-  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  POTENTIAL_FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  METHOD=\"--with-freetype-src\"\n+if test -n \"$FREETYPE_CFLAGS\"; then\n+    pkg_cv_FREETYPE_CFLAGS=\"$FREETYPE_CFLAGS\"\n+ elif test -n \"$PKG_CONFIG\"; then\n+    if test -n \"$PKG_CONFIG\" && \\\n+    { { $as_echo \"$as_me:${as_lineno-$LINENO}: \\$PKG_CONFIG --exists --print-errors \\\"freetype2\\\"\"; } >&5\n+  ($PKG_CONFIG --exists --print-errors \"freetype2\") 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; then\n+  pkg_cv_FREETYPE_CFLAGS=`$PKG_CONFIG --cflags \"freetype2\" 2>\/dev\/null`\n+else\n+  pkg_failed=yes\n+fi\n+ else\n+    pkg_failed=untried\n+fi\n+if test -n \"$FREETYPE_LIBS\"; then\n+    pkg_cv_FREETYPE_LIBS=\"$FREETYPE_LIBS\"\n+ elif test -n \"$PKG_CONFIG\"; then\n+    if test -n \"$PKG_CONFIG\" && \\\n+    { { $as_echo \"$as_me:${as_lineno-$LINENO}: \\$PKG_CONFIG --exists --print-errors \\\"freetype2\\\"\"; } >&5\n+  ($PKG_CONFIG --exists --print-errors \"freetype2\") 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; then\n+  pkg_cv_FREETYPE_LIBS=`$PKG_CONFIG --libs \"freetype2\" 2>\/dev\/null`\n+else\n+  pkg_failed=yes\n+fi\n+ else\n+    pkg_failed=untried\n+fi\n+\n+\n+\n+if test $pkg_failed = yes; then\n+\n+if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then\n+        _pkg_short_errors_supported=yes\n+else\n+        _pkg_short_errors_supported=no\n+fi\n+        if test $_pkg_short_errors_supported = yes; then\n+\t        FREETYPE_PKG_ERRORS=`$PKG_CONFIG --short-errors --print-errors \"freetype2\" 2>&1`\n+        else\n+\t        FREETYPE_PKG_ERRORS=`$PKG_CONFIG --print-errors \"freetype2\" 2>&1`\n+        fi\n+\t# Put the nasty error message in config.log where it belongs\n+\techo \"$FREETYPE_PKG_ERRORS\" >&5\n+\n+\t{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n+$as_echo \"no\" >&6; }\n+                FOUND_FREETYPE=no\n+elif test $pkg_failed = untried; then\n+\tFOUND_FREETYPE=no\n+else\n+\tFREETYPE_CFLAGS=$pkg_cv_FREETYPE_CFLAGS\n+\tFREETYPE_LIBS=$pkg_cv_FREETYPE_LIBS\n+        { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n+$as_echo \"yes\" >&6; }\n+\tFOUND_FREETYPE=yes\n+fi\n+            if test \"x$FOUND_FREETYPE\" = \"xyes\" ; then\n+              { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype\" >&5\n+$as_echo_n \"checking for freetype... \" >&6; }\n+              { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes (using pkg-config)\" >&5\n+$as_echo \"yes (using pkg-config)\" >&6; }\n+            fi\n+          fi\n+        fi\n+      fi\n+\n+      if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n+        # Check in well-known locations\n+        FREETYPE_BASE_DIR=\"$SYSROOT\/usr\"\n+        if test \"x$OPENJDK_TARGET_CPU_BITS\" = \"x64\" ; then\n+\n+  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$FREETYPE_BASE_DIR\/include\"\n+  POTENTIAL_FREETYPE_LIB_PATH=\"$FREETYPE_BASE_DIR\/lib\/$OPENJDK_TARGET_CPU-linux-gnu\"\n+  METHOD=\"well-known location\"\n@@ -45147,3 +45094,15 @@\n-  # First check if the files exists.\n-  if test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n-    # We found an arbitrary include file. That's a good sign.\n+  # Assume we've found freetype to begin\n+  FOUND_FREETYPE=yes\n+\n+  # First look for the canonical freetype main include file ft2build.h.\n+  if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+    # Oh no! Let's try in the freetype2 directory.\n+    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\/freetype2\"\n+    if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+      # Fail.\n+      FOUND_FREETYPE=no\n+    fi\n+  fi\n+\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n+    # Include file found, let's continue the sanity check.\n@@ -45154,1 +45113,1 @@\n-    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}freetype${SHARED_LIBRARY_SUFFIX}\"\n+    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}${FREETYPE_BASE_NAME}${SHARED_LIBRARY_SUFFIX}\"\n@@ -45159,12 +45118,0 @@\n-    else\n-      if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-        # On Windows, we will need both .lib and .dll file.\n-        if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib\"; then\n-          { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&5\n-$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&6;}\n-          FOUND_FREETYPE=no\n-        fi\n-      elif test \"x$OPENJDK_TARGET_OS\" = xsolaris && test \"x$OPENJDK_TARGET_CPU\" = xx86_64 && test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\/$FREETYPE_LIB_NAME\"; then\n-        # On solaris-x86_86, default is (normally) PATH\/lib\/amd64. Update our guess!\n-        POTENTIAL_FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\"\n-      fi\n@@ -45174,1 +45121,12 @@\n-  if test \"x$FOUND_FREETYPE\" = xyes; then\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n+    FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype includes\" >&5\n+$as_echo_n \"checking for freetype includes... \" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_INCLUDE_PATH\" >&5\n+$as_echo \"$FREETYPE_INCLUDE_PATH\" >&6; }\n+    FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype libraries\" >&5\n+$as_echo_n \"checking for freetype libraries... \" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_LIB_PATH\" >&5\n+$as_echo \"$FREETYPE_LIB_PATH\" >&6; }\n+  fi\n@@ -45176,1 +45134,1 @@\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+          if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n@@ -45178,4 +45136,3 @@\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n+  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$FREETYPE_BASE_DIR\/include\"\n+  POTENTIAL_FREETYPE_LIB_PATH=\"$FREETYPE_BASE_DIR\/lib64\"\n+  METHOD=\"well-known location\"\n@@ -45183,2 +45140,2 @@\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n+  # Assume we've found freetype to begin\n+  FOUND_FREETYPE=yes\n@@ -45186,12 +45143,8 @@\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_INCLUDE_PATH\" \"$LINENO\" 5\n+  # First look for the canonical freetype main include file ft2build.h.\n+  if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+    # Oh no! Let's try in the freetype2 directory.\n+    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\/freetype2\"\n+    if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+      # Fail.\n+      FOUND_FREETYPE=no\n+    fi\n@@ -45200,2 +45153,5 @@\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n+    # Include file found, let's continue the sanity check.\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&5\n+$as_echo \"$as_me: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&6;}\n+    FOUND_FREETYPE=yes\n@@ -45203,17 +45159,5 @@\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n+    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}${FREETYPE_BASE_NAME}${SHARED_LIBRARY_SUFFIX}\"\n+    if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME\"; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&5\n+$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&6;}\n+      FOUND_FREETYPE=no\n@@ -45223,8 +45167,11 @@\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n+    FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype includes\" >&5\n+$as_echo_n \"checking for freetype includes... \" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_INCLUDE_PATH\" >&5\n+$as_echo \"$FREETYPE_INCLUDE_PATH\" >&6; }\n+    FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype libraries\" >&5\n+$as_echo_n \"checking for freetype libraries... \" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_LIB_PATH\" >&5\n+$as_echo \"$FREETYPE_LIB_PATH\" >&6; }\n@@ -45233,0 +45180,2 @@\n+          fi\n+        else\n@@ -45234,2 +45183,3 @@\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n+  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$FREETYPE_BASE_DIR\/include\"\n+  POTENTIAL_FREETYPE_LIB_PATH=\"$FREETYPE_BASE_DIR\/lib\/i386-linux-gnu\"\n+  METHOD=\"well-known location\"\n@@ -45237,4 +45187,2 @@\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n+  # Assume we've found freetype to begin\n+  FOUND_FREETYPE=yes\n@@ -45242,4 +45190,8 @@\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n+  # First look for the canonical freetype main include file ft2build.h.\n+  if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+    # Oh no! Let's try in the freetype2 directory.\n+    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\/freetype2\"\n+    if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+      # Fail.\n+      FOUND_FREETYPE=no\n+    fi\n@@ -45248,1 +45200,5 @@\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n+    # Include file found, let's continue the sanity check.\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&5\n+$as_echo \"$as_me: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&6;}\n+    FOUND_FREETYPE=yes\n@@ -45250,6 +45206,6 @@\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n+    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}${FREETYPE_BASE_NAME}${SHARED_LIBRARY_SUFFIX}\"\n+    if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME\"; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&5\n+$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&6;}\n+      FOUND_FREETYPE=no\n+    fi\n@@ -45258,10 +45214,11 @@\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n+    FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype includes\" >&5\n+$as_echo_n \"checking for freetype includes... \" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_INCLUDE_PATH\" >&5\n+$as_echo \"$FREETYPE_INCLUDE_PATH\" >&6; }\n+    FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype libraries\" >&5\n+$as_echo_n \"checking for freetype libraries... \" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_LIB_PATH\" >&5\n+$as_echo \"$FREETYPE_LIB_PATH\" >&6; }\n@@ -45270,0 +45227,1 @@\n+          if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n@@ -45271,14 +45229,3 @@\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n+  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$FREETYPE_BASE_DIR\/include\"\n+  POTENTIAL_FREETYPE_LIB_PATH=\"$FREETYPE_BASE_DIR\/lib32\"\n+  METHOD=\"well-known location\"\n@@ -45286,2 +45233,2 @@\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n+  # Assume we've found freetype to begin\n+  FOUND_FREETYPE=yes\n@@ -45289,8 +45236,7 @@\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n+  # First look for the canonical freetype main include file ft2build.h.\n+  if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+    # Oh no! Let's try in the freetype2 directory.\n+    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\/freetype2\"\n+    if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+      # Fail.\n+      FOUND_FREETYPE=no\n@@ -45298,0 +45244,1 @@\n+  fi\n@@ -45299,4 +45246,11 @@\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n+    # Include file found, let's continue the sanity check.\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&5\n+$as_echo \"$as_me: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&6;}\n+    FOUND_FREETYPE=yes\n+\n+    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}${FREETYPE_BASE_NAME}${SHARED_LIBRARY_SUFFIX}\"\n+    if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME\"; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&5\n+$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&6;}\n+      FOUND_FREETYPE=no\n@@ -45304,0 +45258,1 @@\n+  fi\n@@ -45305,1 +45260,11 @@\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n+    FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype includes\" >&5\n+$as_echo_n \"checking for freetype includes... \" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_INCLUDE_PATH\" >&5\n+$as_echo \"$FREETYPE_INCLUDE_PATH\" >&6; }\n+    FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype libraries\" >&5\n+$as_echo_n \"checking for freetype libraries... \" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_LIB_PATH\" >&5\n+$as_echo \"$FREETYPE_LIB_PATH\" >&6; }\n@@ -45308,0 +45273,2 @@\n+          fi\n+        fi\n@@ -45309,1 +45276,1 @@\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+        if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n@@ -45311,4 +45278,3 @@\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n+  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$FREETYPE_BASE_DIR\/include\"\n+  POTENTIAL_FREETYPE_LIB_PATH=\"$FREETYPE_BASE_DIR\/lib\"\n+  METHOD=\"well-known location\"\n@@ -45316,2 +45282,2 @@\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n+  # Assume we've found freetype to begin\n+  FOUND_FREETYPE=yes\n@@ -45319,12 +45285,8 @@\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_LIB_PATH\" \"$LINENO\" 5\n+  # First look for the canonical freetype main include file ft2build.h.\n+  if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+    # Oh no! Let's try in the freetype2 directory.\n+    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\/freetype2\"\n+    if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+      # Fail.\n+      FOUND_FREETYPE=no\n+    fi\n@@ -45333,2 +45295,5 @@\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n+    # Include file found, let's continue the sanity check.\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&5\n+$as_echo \"$as_me: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&6;}\n+    FOUND_FREETYPE=yes\n@@ -45336,17 +45301,5 @@\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n+    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}${FREETYPE_BASE_NAME}${SHARED_LIBRARY_SUFFIX}\"\n+    if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME\"; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&5\n+$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&6;}\n+      FOUND_FREETYPE=no\n@@ -45356,8 +45309,11 @@\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n+    FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype includes\" >&5\n+$as_echo_n \"checking for freetype includes... \" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_INCLUDE_PATH\" >&5\n+$as_echo \"$FREETYPE_INCLUDE_PATH\" >&6; }\n+    FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype libraries\" >&5\n+$as_echo_n \"checking for freetype libraries... \" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_LIB_PATH\" >&5\n+$as_echo \"$FREETYPE_LIB_PATH\" >&6; }\n@@ -45366,0 +45322,1 @@\n+        fi\n@@ -45367,2 +45324,1 @@\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n+        if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n@@ -45370,4 +45326,3 @@\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n+  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$FREETYPE_BASE_DIR\/include\"\n+  POTENTIAL_FREETYPE_LIB_PATH=\"$FREETYPE_BASE_DIR\/lib\/$OPENJDK_TARGET_CPU-$OPENJDK_TARGET_OS-$OPENJDK_TARGET_ABI\"\n+  METHOD=\"well-known location\"\n@@ -45375,4 +45330,11 @@\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n+  # Assume we've found freetype to begin\n+  FOUND_FREETYPE=yes\n+\n+  # First look for the canonical freetype main include file ft2build.h.\n+  if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+    # Oh no! Let's try in the freetype2 directory.\n+    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\/freetype2\"\n+    if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+      # Fail.\n+      FOUND_FREETYPE=no\n+    fi\n@@ -45381,1 +45343,5 @@\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n+    # Include file found, let's continue the sanity check.\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&5\n+$as_echo \"$as_me: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&6;}\n+    FOUND_FREETYPE=yes\n@@ -45383,6 +45349,6 @@\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n+    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}${FREETYPE_BASE_NAME}${SHARED_LIBRARY_SUFFIX}\"\n+    if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME\"; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&5\n+$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&6;}\n+      FOUND_FREETYPE=no\n+    fi\n@@ -45391,10 +45357,11 @@\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n+    FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype includes\" >&5\n+$as_echo_n \"checking for freetype includes... \" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_INCLUDE_PATH\" >&5\n+$as_echo \"$FREETYPE_INCLUDE_PATH\" >&6; }\n+    FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype libraries\" >&5\n+$as_echo_n \"checking for freetype libraries... \" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_LIB_PATH\" >&5\n+$as_echo \"$FREETYPE_LIB_PATH\" >&6; }\n@@ -45403,0 +45370,1 @@\n+        fi\n@@ -45404,8 +45372,1 @@\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n+        if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n@@ -45413,5 +45374,3 @@\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n+  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$FREETYPE_BASE_DIR\/include\"\n+  POTENTIAL_FREETYPE_LIB_PATH=\"$FREETYPE_BASE_DIR\/lib\/$OPENJDK_TARGET_CPU_AUTOCONF-$OPENJDK_TARGET_OS-$OPENJDK_TARGET_ABI\"\n+  METHOD=\"well-known location\"\n@@ -45419,2 +45378,2 @@\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n+  # Assume we've found freetype to begin\n+  FOUND_FREETYPE=yes\n@@ -45422,8 +45381,7 @@\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n+  # First look for the canonical freetype main include file ft2build.h.\n+  if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+    # Oh no! Let's try in the freetype2 directory.\n+    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\/freetype2\"\n+    if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+      # Fail.\n+      FOUND_FREETYPE=no\n@@ -45431,0 +45389,1 @@\n+  fi\n@@ -45432,5 +45391,5 @@\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n+    # Include file found, let's continue the sanity check.\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&5\n+$as_echo \"$as_me: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&6;}\n+    FOUND_FREETYPE=yes\n@@ -45438,1 +45397,6 @@\n-    POTENTIAL_FREETYPE_LIB_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n+    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}${FREETYPE_BASE_NAME}${SHARED_LIBRARY_SUFFIX}\"\n+    if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME\"; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&5\n+$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&6;}\n+      FOUND_FREETYPE=no\n+    fi\n@@ -45441,1 +45405,1 @@\n-\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n@@ -45454,7 +45418,0 @@\n-          if test \"x$FOUND_FREETYPE\" != xyes; then\n-            as_fn_error $? \"Can not use the built freetype at location given by --with-freetype-src\" \"$LINENO\" 5\n-          fi\n-        else\n-          { $as_echo \"$as_me:${as_lineno-$LINENO}: User specified --with-freetype-src but building freetype failed. (see freetype.log for build results)\" >&5\n-$as_echo \"$as_me: User specified --with-freetype-src but building freetype failed. (see freetype.log for build results)\" >&6;}\n-          as_fn_error $? \"Consider building freetype manually and using --with-freetype instead.\" \"$LINENO\" 5\n@@ -45462,5 +45419,0 @@\n-      else\n-        { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: --with-freetype-src is currently only supported on Windows - ignoring\" >&5\n-$as_echo \"$as_me: WARNING: --with-freetype-src is currently only supported on Windows - ignoring\" >&2;}\n-      fi\n-    fi\n@@ -45468,2 +45420,2 @@\n-    if test \"x$with_freetype\" != x || test \"x$with_freetype_include\" != x || test \"x$with_freetype_lib\" != x; then\n-      # User has specified settings\n+        if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n+          FREETYPE_BASE_DIR=\"$SYSROOT\/usr\/X11\"\n@@ -45471,17 +45423,3 @@\n-      if test \"x$BUNDLE_FREETYPE\" = x; then\n-        # If not specified, default is to bundle freetype\n-        BUNDLE_FREETYPE=yes\n-      fi\n-\n-      if test \"x$with_freetype\" != x; then\n-        POTENTIAL_FREETYPE_INCLUDE_PATH=\"$with_freetype\/include\"\n-        POTENTIAL_FREETYPE_LIB_PATH=\"$with_freetype\/lib\"\n-      fi\n-\n-      # Allow --with-freetype-lib and --with-freetype-include to override\n-      if test \"x$with_freetype_include\" != x; then\n-        POTENTIAL_FREETYPE_INCLUDE_PATH=\"$with_freetype_include\"\n-      fi\n-      if test \"x$with_freetype_lib\" != x; then\n-        POTENTIAL_FREETYPE_LIB_PATH=\"$with_freetype_lib\"\n-      fi\n+  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$FREETYPE_BASE_DIR\/include\"\n+  POTENTIAL_FREETYPE_LIB_PATH=\"$FREETYPE_BASE_DIR\/lib\"\n+  METHOD=\"well-known location\"\n@@ -45489,2 +45427,2 @@\n-      if test \"x$POTENTIAL_FREETYPE_INCLUDE_PATH\" != x && test \"x$POTENTIAL_FREETYPE_LIB_PATH\" != x; then\n-        # Okay, we got it. Check that it works.\n+  # Assume we've found freetype to begin\n+  FOUND_FREETYPE=yes\n@@ -45492,3 +45430,9 @@\n-  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  POTENTIAL_FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  METHOD=\"--with-freetype\"\n+  # First look for the canonical freetype main include file ft2build.h.\n+  if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+    # Oh no! Let's try in the freetype2 directory.\n+    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\/freetype2\"\n+    if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+      # Fail.\n+      FOUND_FREETYPE=no\n+    fi\n+  fi\n@@ -45496,3 +45440,2 @@\n-  # First check if the files exists.\n-  if test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n-    # We found an arbitrary include file. That's a good sign.\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n+    # Include file found, let's continue the sanity check.\n@@ -45503,1 +45446,1 @@\n-    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}freetype${SHARED_LIBRARY_SUFFIX}\"\n+    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}${FREETYPE_BASE_NAME}${SHARED_LIBRARY_SUFFIX}\"\n@@ -45508,12 +45451,0 @@\n-    else\n-      if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-        # On Windows, we will need both .lib and .dll file.\n-        if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib\"; then\n-          { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&5\n-$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&6;}\n-          FOUND_FREETYPE=no\n-        fi\n-      elif test \"x$OPENJDK_TARGET_OS\" = xsolaris && test \"x$OPENJDK_TARGET_CPU\" = xx86_64 && test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\/$FREETYPE_LIB_NAME\"; then\n-        # On solaris-x86_86, default is (normally) PATH\/lib\/amd64. Update our guess!\n-        POTENTIAL_FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\"\n-      fi\n@@ -45523,2955 +45454,11 @@\n-  if test \"x$FOUND_FREETYPE\" = xyes; then\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_INCLUDE_PATH\" \"$LINENO\" 5\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-\n-\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n-\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n-  fi\n-\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_LIB_PATH\" \"$LINENO\" 5\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-\n-\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n-\n-    POTENTIAL_FREETYPE_LIB_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n-  fi\n-\n-\n-    FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype includes\" >&5\n-$as_echo_n \"checking for freetype includes... \" >&6; }\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_INCLUDE_PATH\" >&5\n-$as_echo \"$FREETYPE_INCLUDE_PATH\" >&6; }\n-    FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype libraries\" >&5\n-$as_echo_n \"checking for freetype libraries... \" >&6; }\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_LIB_PATH\" >&5\n-$as_echo \"$FREETYPE_LIB_PATH\" >&6; }\n-  fi\n-\n-        if test \"x$FOUND_FREETYPE\" != xyes; then\n-          as_fn_error $? \"Can not find or use freetype at location given by --with-freetype\" \"$LINENO\" 5\n-        fi\n-      else\n-        # User specified only one of lib or include. This is an error.\n-        if test \"x$POTENTIAL_FREETYPE_INCLUDE_PATH\" = x ; then\n-          { $as_echo \"$as_me:${as_lineno-$LINENO}: User specified --with-freetype-lib but not --with-freetype-include\" >&5\n-$as_echo \"$as_me: User specified --with-freetype-lib but not --with-freetype-include\" >&6;}\n-          as_fn_error $? \"Need both freetype lib and include paths. Consider using --with-freetype instead.\" \"$LINENO\" 5\n-        else\n-          { $as_echo \"$as_me:${as_lineno-$LINENO}: User specified --with-freetype-include but not --with-freetype-lib\" >&5\n-$as_echo \"$as_me: User specified --with-freetype-include but not --with-freetype-lib\" >&6;}\n-          as_fn_error $? \"Need both freetype lib and include paths. Consider using --with-freetype instead.\" \"$LINENO\" 5\n-        fi\n-      fi\n-    else\n-      # User did not specify settings, but we need freetype. Try to locate it.\n-\n-      if test \"x$BUNDLE_FREETYPE\" = x; then\n-        # If not specified, default is to bundle freetype only on windows\n-        if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-          BUNDLE_FREETYPE=yes\n-        else\n-          BUNDLE_FREETYPE=no\n-        fi\n-      fi\n-\n-      if test \"x$FOUND_FREETYPE\" != xyes; then\n-        # Check builddeps\n-\n-\n-  if test \"x$with_builddeps_server\" != x || test \"x$with_builddeps_conf\" != x; then\n-    # Source the builddeps file again, to make sure it uses the latest variables!\n-    . $builddepsfile\n-    # Look for a target and build machine specific resource!\n-    eval resource=\\${builddep_freetype2_BUILD_${rewritten_build_var}_TARGET_${rewritten_target_var}}\n-    if test \"x$resource\" = x; then\n-      # Ok, lets instead look for a target specific resource\n-      eval resource=\\${builddep_freetype2_TARGET_${rewritten_target_var}}\n-    fi\n-    if test \"x$resource\" = x; then\n-      # Ok, lets instead look for a build specific resource\n-      eval resource=\\${builddep_freetype2_BUILD_${rewritten_build_var}}\n-    fi\n-    if test \"x$resource\" = x; then\n-      # Ok, lets instead look for a generic resource\n-      # (The freetype2 comes from M4 and not the shell, thus no need for eval here.)\n-      resource=${builddep_freetype2}\n-    fi\n-    if test \"x$resource\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: Using builddeps $resource for freetype2\" >&5\n-$as_echo \"$as_me: Using builddeps $resource for freetype2\" >&6;}\n-      # If the resource in the builddeps.conf file is an existing directory,\n-      # for example \/java\/linux\/cups\n-      if test -d ${resource}; then\n-        depdir=${resource}\n-      else\n-\n-  # freetype2 is for example mymodule\n-  # $resource is for example libs\/general\/libmymod_1_2_3.zip\n-  # $with_builddeps_server is for example ftp:\/\/mybuilddeps.myserver.com\/builddeps\n-  # $with_builddeps_dir is for example \/localhome\/builddeps\n-  # depdir is the name of the variable into which we store the depdir, eg MYMOD\n-  # Will download ftp:\/\/mybuilddeps.myserver.com\/builddeps\/libs\/general\/libmymod_1_2_3.zip and\n-  # unzip into the directory: \/localhome\/builddeps\/libmymod_1_2_3\n-  filename=`basename $resource`\n-  filebase=`echo $filename | sed 's\/\\.[^\\.]*$\/\/'`\n-  filebase=${filename%%.*}\n-  extension=${filename#*.}\n-  installdir=$with_builddeps_dir\/$filebase\n-  if test ! -f $installdir\/$filename.unpacked; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Downloading build dependency freetype2 from $with_builddeps_server\/$resource and installing into $installdir\" >&5\n-$as_echo \"$as_me: Downloading build dependency freetype2 from $with_builddeps_server\/$resource and installing into $installdir\" >&6;}\n-    if test ! -d $installdir; then\n-      mkdir -p $installdir\n-    fi\n-    if test ! -d $installdir; then\n-      as_fn_error $? \"Could not create directory $installdir\" \"$LINENO\" 5\n-    fi\n-    tmpfile=`mktemp $installdir\/freetype2.XXXXXXXXX`\n-    touch $tmpfile\n-    if test ! -f $tmpfile; then\n-      as_fn_error $? \"Could not create files in directory $installdir\" \"$LINENO\" 5\n-    fi\n-\n-  # $with_builddeps_server\/$resource  is the ftp:\/\/abuilddeps.server.com\/libs\/cups.zip\n-  # $tmpfile is the local file name for the downloaded file.\n-  VALID_TOOL=no\n-  if test \"x$BDEPS_FTP\" = xwget; then\n-    VALID_TOOL=yes\n-    wget -O $tmpfile $with_builddeps_server\/$resource\n-  fi\n-  if test \"x$BDEPS_FTP\" = xlftp; then\n-    VALID_TOOL=yes\n-    lftp -c \"get $with_builddeps_server\/$resource  -o $tmpfile\"\n-  fi\n-  if test \"x$BDEPS_FTP\" = xftp; then\n-    VALID_TOOL=yes\n-    FTPSERVER=`echo $with_builddeps_server\/$resource  | cut -f 3 -d '\/'`\n-    FTPPATH=`echo $with_builddeps_server\/$resource  | cut -f 4- -d '\/'`\n-    FTPUSERPWD=${FTPSERVER%%@*}\n-    if test \"x$FTPSERVER\" != \"x$FTPUSERPWD\"; then\n-      FTPUSER=${userpwd%%:*}\n-      FTPPWD=${userpwd#*@}\n-      FTPSERVER=${FTPSERVER#*@}\n-    else\n-      FTPUSER=ftp\n-      FTPPWD=ftp\n-    fi\n-    # the \"pass\" command does not work on some\n-    # ftp clients (read ftp.exe) but if it works,\n-    # passive mode is better!\n-    ( \\\n-        echo \"user $FTPUSER $FTPPWD\"        ; \\\n-        echo \"pass\"                         ; \\\n-        echo \"bin\"                          ; \\\n-        echo \"get $FTPPATH $tmpfile\"              ; \\\n-    ) | ftp -in $FTPSERVER\n-  fi\n-  if test \"x$VALID_TOOL\" != xyes; then\n-    as_fn_error $? \"I do not know how to use the tool: $BDEPS_FTP\" \"$LINENO\" 5\n-  fi\n-\n-    mv $tmpfile $installdir\/$filename\n-    if test ! -s $installdir\/$filename; then\n-      as_fn_error $? \"Could not download $with_builddeps_server\/$resource\" \"$LINENO\" 5\n-    fi\n-    case \"$extension\" in\n-      zip)  echo \"Unzipping $installdir\/$filename...\"\n-        (cd $installdir ; rm -f $installdir\/$filename.unpacked ; $BDEPS_UNZIP $installdir\/$filename > \/dev\/null && touch $installdir\/$filename.unpacked)\n-        ;;\n-      tar.gz) echo \"Untaring $installdir\/$filename...\"\n-        (cd $installdir ; rm -f $installdir\/$filename.unpacked ; tar xzf $installdir\/$filename && touch $installdir\/$filename.unpacked)\n-        ;;\n-      tgz) echo \"Untaring $installdir\/$filename...\"\n-        (cd $installdir ; rm -f $installdir\/$filename.unpacked ; tar xzf $installdir\/$filename && touch $installdir\/$filename.unpacked)\n-        ;;\n-      *) as_fn_error $? \"Cannot handle build depency archive with extension $extension\" \"$LINENO\" 5\n-        ;;\n-    esac\n-  fi\n-  if test -f $installdir\/$filename.unpacked; then\n-    depdir=$installdir\n-  fi\n-\n-      fi\n-      # Source the builddeps file again, because in the previous command, the depdir\n-      # was updated to point at the current build dependency install directory.\n-      . $builddepsfile\n-      # Now extract variables from the builddeps.conf files.\n-      theroot=${builddep_freetype2_ROOT}\n-      thecflags=${builddep_freetype2_CFLAGS}\n-      thelibs=${builddep_freetype2_LIBS}\n-      if test \"x$depdir\" = x; then\n-        as_fn_error $? \"Could not download build dependency freetype2\" \"$LINENO\" 5\n-      fi\n-      FREETYPE=$depdir\n-      if test \"x$theroot\" != x; then\n-        FREETYPE=\"$theroot\"\n-      fi\n-      if test \"x$thecflags\" != x; then\n-        FREETYPE_CFLAGS=\"$thecflags\"\n-      fi\n-      if test \"x$thelibs\" != x; then\n-        FREETYPE_LIBS=\"$thelibs\"\n-      fi\n-      FOUND_FREETYPE=yes\n-      else FOUND_FREETYPE=no\n-\n-    fi\n-    else FOUND_FREETYPE=no\n-\n-  fi\n-\n-        # BDEPS_CHECK_MODULE will set FREETYPE_CFLAGS and _LIBS, but we don't get a lib path for bundling.\n-        if test \"x$FOUND_FREETYPE\" = xyes; then\n-          if test \"x$BUNDLE_FREETYPE\" = xyes; then\n-            { $as_echo \"$as_me:${as_lineno-$LINENO}: Found freetype using builddeps, but ignoring since we can not bundle that\" >&5\n-$as_echo \"$as_me: Found freetype using builddeps, but ignoring since we can not bundle that\" >&6;}\n-            FOUND_FREETYPE=no\n-          else\n-            { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype\" >&5\n-$as_echo_n \"checking for freetype... \" >&6; }\n-            { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes (using builddeps)\" >&5\n-$as_echo \"yes (using builddeps)\" >&6; }\n-          fi\n-        fi\n-      fi\n-\n-      # If we have a sysroot, assume that's where we are supposed to look and skip pkg-config.\n-      if test \"x$SYSROOT\" = x; then\n-        if test \"x$FOUND_FREETYPE\" != xyes; then\n-          # Check modules using pkg-config, but only if we have it (ugly output results otherwise)\n-          if test \"x$PKG_CONFIG\" != x; then\n-\n-pkg_failed=no\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for FREETYPE\" >&5\n-$as_echo_n \"checking for FREETYPE... \" >&6; }\n-\n-if test -n \"$FREETYPE_CFLAGS\"; then\n-    pkg_cv_FREETYPE_CFLAGS=\"$FREETYPE_CFLAGS\"\n- elif test -n \"$PKG_CONFIG\"; then\n-    if test -n \"$PKG_CONFIG\" && \\\n-    { { $as_echo \"$as_me:${as_lineno-$LINENO}: \\$PKG_CONFIG --exists --print-errors \\\"freetype2\\\"\"; } >&5\n-  ($PKG_CONFIG --exists --print-errors \"freetype2\") 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; then\n-  pkg_cv_FREETYPE_CFLAGS=`$PKG_CONFIG --cflags \"freetype2\" 2>\/dev\/null`\n-else\n-  pkg_failed=yes\n-fi\n- else\n-    pkg_failed=untried\n-fi\n-if test -n \"$FREETYPE_LIBS\"; then\n-    pkg_cv_FREETYPE_LIBS=\"$FREETYPE_LIBS\"\n- elif test -n \"$PKG_CONFIG\"; then\n-    if test -n \"$PKG_CONFIG\" && \\\n-    { { $as_echo \"$as_me:${as_lineno-$LINENO}: \\$PKG_CONFIG --exists --print-errors \\\"freetype2\\\"\"; } >&5\n-  ($PKG_CONFIG --exists --print-errors \"freetype2\") 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; then\n-  pkg_cv_FREETYPE_LIBS=`$PKG_CONFIG --libs \"freetype2\" 2>\/dev\/null`\n-else\n-  pkg_failed=yes\n-fi\n- else\n-    pkg_failed=untried\n-fi\n-\n-\n-\n-if test $pkg_failed = yes; then\n-\n-if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then\n-        _pkg_short_errors_supported=yes\n-else\n-        _pkg_short_errors_supported=no\n-fi\n-        if test $_pkg_short_errors_supported = yes; then\n-\t        FREETYPE_PKG_ERRORS=`$PKG_CONFIG --short-errors --print-errors \"freetype2\" 2>&1`\n-        else\n-\t        FREETYPE_PKG_ERRORS=`$PKG_CONFIG --print-errors \"freetype2\" 2>&1`\n-        fi\n-\t# Put the nasty error message in config.log where it belongs\n-\techo \"$FREETYPE_PKG_ERRORS\" >&5\n-\n-\t{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n-$as_echo \"no\" >&6; }\n-                FOUND_FREETYPE=no\n-elif test $pkg_failed = untried; then\n-\tFOUND_FREETYPE=no\n-else\n-\tFREETYPE_CFLAGS=$pkg_cv_FREETYPE_CFLAGS\n-\tFREETYPE_LIBS=$pkg_cv_FREETYPE_LIBS\n-        { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n-$as_echo \"yes\" >&6; }\n-\tFOUND_FREETYPE=yes\n-fi\n-            if test \"x$FOUND_FREETYPE\" = xyes; then\n-              # On solaris, pkg_check adds -lz to freetype libs, which isn't necessary for us.\n-              FREETYPE_LIBS=`$ECHO $FREETYPE_LIBS | $SED 's\/-lz\/\/g'`\n-              # 64-bit libs for Solaris x86 are installed in the amd64 subdirectory, change lib to lib\/amd64\n-              if test \"x$OPENJDK_TARGET_OS\" = xsolaris && test \"x$OPENJDK_TARGET_CPU\" = xx86_64; then\n-                FREETYPE_LIBS=`$ECHO $FREETYPE_LIBS | $SED 's?\/lib?\/lib\/amd64?g'`\n-              fi\n-              # BDEPS_CHECK_MODULE will set FREETYPE_CFLAGS and _LIBS, but we don't get a lib path for bundling.\n-              if test \"x$BUNDLE_FREETYPE\" = xyes; then\n-                { $as_echo \"$as_me:${as_lineno-$LINENO}: Found freetype using pkg-config, but ignoring since we can not bundle that\" >&5\n-$as_echo \"$as_me: Found freetype using pkg-config, but ignoring since we can not bundle that\" >&6;}\n-                FOUND_FREETYPE=no\n-              else\n-                { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype\" >&5\n-$as_echo_n \"checking for freetype... \" >&6; }\n-                { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes (using pkg-config)\" >&5\n-$as_echo \"yes (using pkg-config)\" >&6; }\n-              fi\n-            fi\n-          fi\n-        fi\n-      fi\n-\n-      if test \"x$FOUND_FREETYPE\" != xyes; then\n-        # Check in well-known locations\n-        if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-          FREETYPE_BASE_DIR=\"$PROGRAMFILES\/GnuWin32\"\n-\n-  windows_path=\"$FREETYPE_BASE_DIR\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    FREETYPE_BASE_DIR=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    FREETYPE_BASE_DIR=\"$unix_path\"\n-  fi\n-\n-\n-  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$FREETYPE_BASE_DIR\/include\"\n-  POTENTIAL_FREETYPE_LIB_PATH=\"$FREETYPE_BASE_DIR\/lib\"\n-  METHOD=\"well-known location\"\n-\n-  # First check if the files exists.\n-  if test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n-    # We found an arbitrary include file. That's a good sign.\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&5\n-$as_echo \"$as_me: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&6;}\n-    FOUND_FREETYPE=yes\n-\n-    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}freetype${SHARED_LIBRARY_SUFFIX}\"\n-    if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME\"; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&5\n-$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&6;}\n-      FOUND_FREETYPE=no\n-    else\n-      if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-        # On Windows, we will need both .lib and .dll file.\n-        if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib\"; then\n-          { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&5\n-$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&6;}\n-          FOUND_FREETYPE=no\n-        fi\n-      elif test \"x$OPENJDK_TARGET_OS\" = xsolaris && test \"x$OPENJDK_TARGET_CPU\" = xx86_64 && test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\/$FREETYPE_LIB_NAME\"; then\n-        # On solaris-x86_86, default is (normally) PATH\/lib\/amd64. Update our guess!\n-        POTENTIAL_FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\"\n-      fi\n-    fi\n-  fi\n-\n-  if test \"x$FOUND_FREETYPE\" = xyes; then\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_INCLUDE_PATH\" \"$LINENO\" 5\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-\n-\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n-\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n-  fi\n-\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_LIB_PATH\" \"$LINENO\" 5\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-\n-\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n-\n-    POTENTIAL_FREETYPE_LIB_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n-  fi\n-\n-\n-    FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype includes\" >&5\n-$as_echo_n \"checking for freetype includes... \" >&6; }\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_INCLUDE_PATH\" >&5\n-$as_echo \"$FREETYPE_INCLUDE_PATH\" >&6; }\n-    FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype libraries\" >&5\n-$as_echo_n \"checking for freetype libraries... \" >&6; }\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_LIB_PATH\" >&5\n-$as_echo \"$FREETYPE_LIB_PATH\" >&6; }\n-  fi\n-\n-          if test \"x$FOUND_FREETYPE\" != xyes; then\n-            FREETYPE_BASE_DIR=\"$ProgramW6432\/GnuWin32\"\n-\n-  windows_path=\"$FREETYPE_BASE_DIR\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    FREETYPE_BASE_DIR=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    FREETYPE_BASE_DIR=\"$unix_path\"\n-  fi\n-\n-\n-  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$FREETYPE_BASE_DIR\/include\"\n-  POTENTIAL_FREETYPE_LIB_PATH=\"$FREETYPE_BASE_DIR\/lib\"\n-  METHOD=\"well-known location\"\n-\n-  # First check if the files exists.\n-  if test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n-    # We found an arbitrary include file. That's a good sign.\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&5\n-$as_echo \"$as_me: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&6;}\n-    FOUND_FREETYPE=yes\n-\n-    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}freetype${SHARED_LIBRARY_SUFFIX}\"\n-    if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME\"; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&5\n-$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&6;}\n-      FOUND_FREETYPE=no\n-    else\n-      if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-        # On Windows, we will need both .lib and .dll file.\n-        if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib\"; then\n-          { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&5\n-$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&6;}\n-          FOUND_FREETYPE=no\n-        fi\n-      elif test \"x$OPENJDK_TARGET_OS\" = xsolaris && test \"x$OPENJDK_TARGET_CPU\" = xx86_64 && test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\/$FREETYPE_LIB_NAME\"; then\n-        # On solaris-x86_86, default is (normally) PATH\/lib\/amd64. Update our guess!\n-        POTENTIAL_FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\"\n-      fi\n-    fi\n-  fi\n-\n-  if test \"x$FOUND_FREETYPE\" = xyes; then\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_INCLUDE_PATH\" \"$LINENO\" 5\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-\n-\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n-\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n-  fi\n-\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_LIB_PATH\" \"$LINENO\" 5\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-\n-\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n-\n-    POTENTIAL_FREETYPE_LIB_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n-  fi\n-\n-\n-    FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype includes\" >&5\n-$as_echo_n \"checking for freetype includes... \" >&6; }\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_INCLUDE_PATH\" >&5\n-$as_echo \"$FREETYPE_INCLUDE_PATH\" >&6; }\n-    FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype libraries\" >&5\n-$as_echo_n \"checking for freetype libraries... \" >&6; }\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_LIB_PATH\" >&5\n-$as_echo \"$FREETYPE_LIB_PATH\" >&6; }\n-  fi\n-\n-          fi\n-        else\n-          FREETYPE_BASE_DIR=\"$SYSROOT\/usr\"\n-\n-  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$FREETYPE_BASE_DIR\/include\"\n-  POTENTIAL_FREETYPE_LIB_PATH=\"$FREETYPE_BASE_DIR\/lib\"\n-  METHOD=\"well-known location\"\n-\n-  # First check if the files exists.\n-  if test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n-    # We found an arbitrary include file. That's a good sign.\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&5\n-$as_echo \"$as_me: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&6;}\n-    FOUND_FREETYPE=yes\n-\n-    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}freetype${SHARED_LIBRARY_SUFFIX}\"\n-    if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME\"; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&5\n-$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&6;}\n-      FOUND_FREETYPE=no\n-    else\n-      if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-        # On Windows, we will need both .lib and .dll file.\n-        if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib\"; then\n-          { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&5\n-$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&6;}\n-          FOUND_FREETYPE=no\n-        fi\n-      elif test \"x$OPENJDK_TARGET_OS\" = xsolaris && test \"x$OPENJDK_TARGET_CPU\" = xx86_64 && test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\/$FREETYPE_LIB_NAME\"; then\n-        # On solaris-x86_86, default is (normally) PATH\/lib\/amd64. Update our guess!\n-        POTENTIAL_FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\"\n-      fi\n-    fi\n-  fi\n-\n-  if test \"x$FOUND_FREETYPE\" = xyes; then\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_INCLUDE_PATH\" \"$LINENO\" 5\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-\n-\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n-\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n-  fi\n-\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_LIB_PATH\" \"$LINENO\" 5\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-\n-\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n-\n-    POTENTIAL_FREETYPE_LIB_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n-  fi\n-\n-\n-    FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype includes\" >&5\n-$as_echo_n \"checking for freetype includes... \" >&6; }\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_INCLUDE_PATH\" >&5\n-$as_echo \"$FREETYPE_INCLUDE_PATH\" >&6; }\n-    FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype libraries\" >&5\n-$as_echo_n \"checking for freetype libraries... \" >&6; }\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_LIB_PATH\" >&5\n-$as_echo \"$FREETYPE_LIB_PATH\" >&6; }\n-  fi\n-\n-\n-          if test \"x$FOUND_FREETYPE\" != xyes; then\n-            FREETYPE_BASE_DIR=\"$SYSROOT\/usr\/X11\"\n-\n-  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$FREETYPE_BASE_DIR\/include\"\n-  POTENTIAL_FREETYPE_LIB_PATH=\"$FREETYPE_BASE_DIR\/lib\"\n-  METHOD=\"well-known location\"\n-\n-  # First check if the files exists.\n-  if test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n-    # We found an arbitrary include file. That's a good sign.\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&5\n-$as_echo \"$as_me: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&6;}\n-    FOUND_FREETYPE=yes\n-\n-    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}freetype${SHARED_LIBRARY_SUFFIX}\"\n-    if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME\"; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&5\n-$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&6;}\n-      FOUND_FREETYPE=no\n-    else\n-      if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-        # On Windows, we will need both .lib and .dll file.\n-        if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib\"; then\n-          { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&5\n-$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&6;}\n-          FOUND_FREETYPE=no\n-        fi\n-      elif test \"x$OPENJDK_TARGET_OS\" = xsolaris && test \"x$OPENJDK_TARGET_CPU\" = xx86_64 && test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\/$FREETYPE_LIB_NAME\"; then\n-        # On solaris-x86_86, default is (normally) PATH\/lib\/amd64. Update our guess!\n-        POTENTIAL_FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\"\n-      fi\n-    fi\n-  fi\n-\n-  if test \"x$FOUND_FREETYPE\" = xyes; then\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_INCLUDE_PATH\" \"$LINENO\" 5\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-\n-\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n-\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n-  fi\n-\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_LIB_PATH\" \"$LINENO\" 5\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-\n-\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n-\n-    POTENTIAL_FREETYPE_LIB_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n-  fi\n-\n-\n-    FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype includes\" >&5\n-$as_echo_n \"checking for freetype includes... \" >&6; }\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_INCLUDE_PATH\" >&5\n-$as_echo \"$FREETYPE_INCLUDE_PATH\" >&6; }\n-    FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype libraries\" >&5\n-$as_echo_n \"checking for freetype libraries... \" >&6; }\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_LIB_PATH\" >&5\n-$as_echo \"$FREETYPE_LIB_PATH\" >&6; }\n-  fi\n-\n-          fi\n-\n-          if test \"x$FOUND_FREETYPE\" != xyes; then\n-            FREETYPE_BASE_DIR=\"$SYSROOT\/usr\/sfw\"\n-\n-  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$FREETYPE_BASE_DIR\/include\"\n-  POTENTIAL_FREETYPE_LIB_PATH=\"$FREETYPE_BASE_DIR\/lib\"\n-  METHOD=\"well-known location\"\n-\n-  # First check if the files exists.\n-  if test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n-    # We found an arbitrary include file. That's a good sign.\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&5\n-$as_echo \"$as_me: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&6;}\n-    FOUND_FREETYPE=yes\n-\n-    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}freetype${SHARED_LIBRARY_SUFFIX}\"\n-    if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME\"; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&5\n-$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&6;}\n-      FOUND_FREETYPE=no\n-    else\n-      if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-        # On Windows, we will need both .lib and .dll file.\n-        if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib\"; then\n-          { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&5\n-$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&6;}\n-          FOUND_FREETYPE=no\n-        fi\n-      elif test \"x$OPENJDK_TARGET_OS\" = xsolaris && test \"x$OPENJDK_TARGET_CPU\" = xx86_64 && test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\/$FREETYPE_LIB_NAME\"; then\n-        # On solaris-x86_86, default is (normally) PATH\/lib\/amd64. Update our guess!\n-        POTENTIAL_FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\"\n-      fi\n-    fi\n-  fi\n-\n-  if test \"x$FOUND_FREETYPE\" = xyes; then\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_INCLUDE_PATH\" \"$LINENO\" 5\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-\n-\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n-\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n-  fi\n-\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_LIB_PATH\" \"$LINENO\" 5\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-\n-\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n-\n-    POTENTIAL_FREETYPE_LIB_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n-  fi\n-\n-\n-    FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype includes\" >&5\n-$as_echo_n \"checking for freetype includes... \" >&6; }\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_INCLUDE_PATH\" >&5\n-$as_echo \"$FREETYPE_INCLUDE_PATH\" >&6; }\n-    FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype libraries\" >&5\n-$as_echo_n \"checking for freetype libraries... \" >&6; }\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_LIB_PATH\" >&5\n-$as_echo \"$FREETYPE_LIB_PATH\" >&6; }\n-  fi\n-\n-          fi\n-\n-          if test \"x$FOUND_FREETYPE\" != xyes; then\n-            FREETYPE_BASE_DIR=\"$SYSROOT\/usr\"\n-            if test \"x$OPENJDK_TARGET_CPU_BITS\" = x64; then\n-\n-  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$FREETYPE_BASE_DIR\/include\"\n-  POTENTIAL_FREETYPE_LIB_PATH=\"$FREETYPE_BASE_DIR\/lib\/x86_64-linux-gnu\"\n-  METHOD=\"well-known location\"\n-\n-  # First check if the files exists.\n-  if test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n-    # We found an arbitrary include file. That's a good sign.\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&5\n-$as_echo \"$as_me: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&6;}\n-    FOUND_FREETYPE=yes\n-\n-    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}freetype${SHARED_LIBRARY_SUFFIX}\"\n-    if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME\"; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&5\n-$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&6;}\n-      FOUND_FREETYPE=no\n-    else\n-      if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-        # On Windows, we will need both .lib and .dll file.\n-        if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib\"; then\n-          { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&5\n-$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&6;}\n-          FOUND_FREETYPE=no\n-        fi\n-      elif test \"x$OPENJDK_TARGET_OS\" = xsolaris && test \"x$OPENJDK_TARGET_CPU\" = xx86_64 && test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\/$FREETYPE_LIB_NAME\"; then\n-        # On solaris-x86_86, default is (normally) PATH\/lib\/amd64. Update our guess!\n-        POTENTIAL_FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\"\n-      fi\n-    fi\n-  fi\n-\n-  if test \"x$FOUND_FREETYPE\" = xyes; then\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_INCLUDE_PATH\" \"$LINENO\" 5\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-\n-\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n-\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n-  fi\n-\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_LIB_PATH\" \"$LINENO\" 5\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-\n-\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n-\n-    POTENTIAL_FREETYPE_LIB_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n-  fi\n-\n-\n-    FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype includes\" >&5\n-$as_echo_n \"checking for freetype includes... \" >&6; }\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_INCLUDE_PATH\" >&5\n-$as_echo \"$FREETYPE_INCLUDE_PATH\" >&6; }\n-    FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype libraries\" >&5\n-$as_echo_n \"checking for freetype libraries... \" >&6; }\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_LIB_PATH\" >&5\n-$as_echo \"$FREETYPE_LIB_PATH\" >&6; }\n-  fi\n-\n-            else\n-\n-  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$FREETYPE_BASE_DIR\/include\"\n-  POTENTIAL_FREETYPE_LIB_PATH=\"$FREETYPE_BASE_DIR\/lib\/i386-linux-gnu\"\n-  METHOD=\"well-known location\"\n-\n-  # First check if the files exists.\n-  if test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n-    # We found an arbitrary include file. That's a good sign.\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&5\n-$as_echo \"$as_me: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&6;}\n-    FOUND_FREETYPE=yes\n-\n-    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}freetype${SHARED_LIBRARY_SUFFIX}\"\n-    if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME\"; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&5\n-$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&6;}\n-      FOUND_FREETYPE=no\n-    else\n-      if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-        # On Windows, we will need both .lib and .dll file.\n-        if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib\"; then\n-          { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&5\n-$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&6;}\n-          FOUND_FREETYPE=no\n-        fi\n-      elif test \"x$OPENJDK_TARGET_OS\" = xsolaris && test \"x$OPENJDK_TARGET_CPU\" = xx86_64 && test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\/$FREETYPE_LIB_NAME\"; then\n-        # On solaris-x86_86, default is (normally) PATH\/lib\/amd64. Update our guess!\n-        POTENTIAL_FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\"\n-      fi\n-    fi\n-  fi\n-\n-  if test \"x$FOUND_FREETYPE\" = xyes; then\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_INCLUDE_PATH\" \"$LINENO\" 5\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-\n-\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n-\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n-  fi\n-\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_LIB_PATH\" \"$LINENO\" 5\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-\n-\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n-\n-    POTENTIAL_FREETYPE_LIB_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n-  fi\n-\n-\n-    FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype includes\" >&5\n-$as_echo_n \"checking for freetype includes... \" >&6; }\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_INCLUDE_PATH\" >&5\n-$as_echo \"$FREETYPE_INCLUDE_PATH\" >&6; }\n-    FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype libraries\" >&5\n-$as_echo_n \"checking for freetype libraries... \" >&6; }\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_LIB_PATH\" >&5\n-$as_echo \"$FREETYPE_LIB_PATH\" >&6; }\n-  fi\n-\n-              if test \"x$FOUND_FREETYPE\" != xyes; then\n-\n-  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$FREETYPE_BASE_DIR\/include\"\n-  POTENTIAL_FREETYPE_LIB_PATH=\"$FREETYPE_BASE_DIR\/lib32\"\n-  METHOD=\"well-known location\"\n-\n-  # First check if the files exists.\n-  if test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n-    # We found an arbitrary include file. That's a good sign.\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&5\n-$as_echo \"$as_me: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&6;}\n-    FOUND_FREETYPE=yes\n-\n-    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}freetype${SHARED_LIBRARY_SUFFIX}\"\n-    if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME\"; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&5\n-$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&6;}\n-      FOUND_FREETYPE=no\n-    else\n-      if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-        # On Windows, we will need both .lib and .dll file.\n-        if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib\"; then\n-          { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&5\n-$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.\" >&6;}\n-          FOUND_FREETYPE=no\n-        fi\n-      elif test \"x$OPENJDK_TARGET_OS\" = xsolaris && test \"x$OPENJDK_TARGET_CPU\" = xx86_64 && test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\/$FREETYPE_LIB_NAME\"; then\n-        # On solaris-x86_86, default is (normally) PATH\/lib\/amd64. Update our guess!\n-        POTENTIAL_FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\"\n-      fi\n-    fi\n-  fi\n-\n-  if test \"x$FOUND_FREETYPE\" = xyes; then\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_INCLUDE_PATH\" \"$LINENO\" 5\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-\n-\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n-\n-    POTENTIAL_FREETYPE_INCLUDE_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n+    FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype includes\" >&5\n+$as_echo_n \"checking for freetype includes... \" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_INCLUDE_PATH\" >&5\n+$as_echo \"$FREETYPE_INCLUDE_PATH\" >&6; }\n+    FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for freetype libraries\" >&5\n+$as_echo_n \"checking for freetype libraries... \" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $FREETYPE_LIB_PATH\" >&5\n+$as_echo \"$FREETYPE_LIB_PATH\" >&6; }\n@@ -48480,0 +45467,1 @@\n+        fi\n@@ -48481,23 +45469,2 @@\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of POTENTIAL_FREETYPE_LIB_PATH\" \"$LINENO\" 5\n-  fi\n+        if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n+          FREETYPE_BASE_DIR=\"$SYSROOT\/usr\/local\"\n@@ -48505,2 +45472,3 @@\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n+  POTENTIAL_FREETYPE_INCLUDE_PATH=\"$FREETYPE_BASE_DIR\/include\"\n+  POTENTIAL_FREETYPE_LIB_PATH=\"$FREETYPE_BASE_DIR\/lib\"\n+  METHOD=\"well-known location\"\n@@ -48508,19 +45476,2 @@\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n+  # Assume we've found freetype to begin\n+  FOUND_FREETYPE=yes\n@@ -48528,7 +45479,7 @@\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n+  # First look for the canonical freetype main include file ft2build.h.\n+  if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+    # Oh no! Let's try in the freetype2 directory.\n+    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\/freetype2\"\n+    if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+      # Fail.\n+      FOUND_FREETYPE=no\n@@ -48538,0 +45489,5 @@\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n+    # Include file found, let's continue the sanity check.\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&5\n+$as_echo \"$as_me: Found freetype include files at $POTENTIAL_FREETYPE_INCLUDE_PATH using $METHOD\" >&6;}\n+    FOUND_FREETYPE=yes\n@@ -48539,69 +45495,5 @@\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    POTENTIAL_FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting POTENTIAL_FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$POTENTIAL_FREETYPE_LIB_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of POTENTIAL_FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n+    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}${FREETYPE_BASE_NAME}${SHARED_LIBRARY_SUFFIX}\"\n+    if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME\"; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&5\n+$as_echo \"$as_me: Could not find $POTENTIAL_FREETYPE_LIB_PATH\/$FREETYPE_LIB_NAME. Ignoring location.\" >&6;}\n+      FOUND_FREETYPE=no\n@@ -48609,2 +45501,0 @@\n-\n-    POTENTIAL_FREETYPE_LIB_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n@@ -48613,1 +45503,1 @@\n-\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n@@ -48626,3 +45516,0 @@\n-              fi\n-            fi\n-          fi\n@@ -48632,1 +45519,1 @@\n-      if test \"x$FOUND_FREETYPE\" != xyes; then\n+      if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n@@ -48635,1 +45522,1 @@\n-  # freetype is the help tag: freetype, cups, pulse, alsa etc\n+  # freetype is the help tag: cups, pulse, alsa etc\n@@ -48668,135 +45555,2 @@\n-    if test \"x$FREETYPE_CFLAGS\" = x; then\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$FREETYPE_INCLUDE_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of FREETYPE_INCLUDE_PATH\" \"$LINENO\" 5\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-\n-\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$FREETYPE_INCLUDE_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    FREETYPE_INCLUDE_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting FREETYPE_INCLUDE_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$FREETYPE_INCLUDE_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of FREETYPE_INCLUDE_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n-\n-    FREETYPE_INCLUDE_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n-  fi\n-\n-      if test -d $FREETYPE_INCLUDE_PATH\/freetype2\/freetype; then\n+    if test \"x$FREETYPE_CFLAGS\" = \"x\" ; then\n+      if test -d $FREETYPE_INCLUDE_PATH\/freetype2\/freetype ; then\n@@ -48809,208 +45563,2 @@\n-    if test \"x$FREETYPE_LIBS\" = x; then\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-\n-  # Input might be given as Windows format, start by converting to\n-  # unix format.\n-  path=\"$FREETYPE_LIB_PATH\"\n-  new_path=`$CYGPATH -u \"$path\"`\n-\n-  # preserve original basename\n-  original_basename=`$BASENAME \"${new_path}\"`\n-\n-  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n-  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n-  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n-  # \"foo.exe\" is OK but \"foo\" is an error.\n-  #\n-  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n-  # It is also a way to make sure we got the proper file name for the real test later on.\n-  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n-  if test \"x$test_shortpath\" = x; then\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-    as_fn_error $? \"Cannot locate the the path of FREETYPE_LIB_PATH\" \"$LINENO\" 5\n-  fi\n-\n-  # Call helper function which possibly converts this using DOS-style short mode.\n-  # If so, the updated path is stored in $new_path.\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n-    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n-    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n-      # Going to short mode and back again did indeed matter. Since short mode is\n-      # case insensitive, let's make it lowercase to improve readability.\n-      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-      # Now convert it back to Unix-style (cygpath)\n-      input_path=`$CYGPATH -u \"$shortmode_path\"`\n-      new_path=\"$input_path\"\n-    fi\n-  fi\n-\n-  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n-  if test \"x$test_cygdrive_prefix\" = x; then\n-    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n-    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n-      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n-      # a path prefixed by \/cygdrive for fixpath to work.\n-      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n-    fi\n-  fi\n-\n-\n-  # get basename after fixup\n-  fixed_basename=`$BASENAME \"${new_path}\"`\n-\n-  # if basename changed replace it with original value\n-  if test \"x$original_basename\" != \"x$fixed_basename\"; then\n-    new_path=`echo \"${new_path}\" | sed \"s\/${fixed_basename}$\/${original_basename}\/g\"`\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-\n-  path=\"$FREETYPE_LIB_PATH\"\n-  has_colon=`$ECHO $path | $GREP ^.:`\n-  new_path=\"$path\"\n-  if test \"x$has_colon\" = x; then\n-    # Not in mixed or Windows style, start by that.\n-    new_path=`cmd \/\/c echo $path`\n-  fi\n-\n-\n-  input_path=\"$new_path\"\n-  # Check if we need to convert this using DOS-style short mode. If the path\n-  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n-  # take no chances and rewrite it.\n-  # Note: m4 eats our [], so we need to use [ and ] instead.\n-  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n-  if test \"x$has_forbidden_chars\" != x; then\n-    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n-    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n-  fi\n-\n-\n-  windows_path=\"$new_path\"\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    unix_path=`$CYGPATH -u \"$windows_path\"`\n-    new_path=\"$unix_path\"\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n-    new_path=\"$unix_path\"\n-  fi\n-\n-  if test \"x$path\" != \"x$new_path\"; then\n-    FREETYPE_LIB_PATH=\"$new_path\"\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&5\n-$as_echo \"$as_me: Rewriting FREETYPE_LIB_PATH to \\\"$new_path\\\"\" >&6;}\n-  fi\n-\n-  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n-  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n-\n-  else\n-    # We're on a posix platform. Hooray! :)\n-    path=\"$FREETYPE_LIB_PATH\"\n-    has_space=`$ECHO \"$path\" | $GREP \" \"`\n-    if test \"x$has_space\" != x; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&5\n-$as_echo \"$as_me: The path of FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n-      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n-    fi\n-\n-    # Use eval to expand a potential ~\n-    eval path=\"$path\"\n-    if test ! -f \"$path\" && test ! -d \"$path\"; then\n-      as_fn_error $? \"The path of FREETYPE_LIB_PATH, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n-    fi\n-\n-    FREETYPE_LIB_PATH=\"`cd \"$path\"; $THEPWDCMD -L`\"\n-  fi\n-\n-      if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-        FREETYPE_LIBS=\"$FREETYPE_LIB_PATH\/freetype.lib\"\n-      else\n-        FREETYPE_LIBS=\"-L$FREETYPE_LIB_PATH -lfreetype\"\n-      fi\n-    fi\n-\n-    # Try to compile it\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking if we can compile and link with freetype\" >&5\n-$as_echo_n \"checking if we can compile and link with freetype... \" >&6; }\n-    ac_ext=cpp\n-ac_cpp='$CXXCPP $CPPFLAGS'\n-ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n-ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n-ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n-\n-    PREV_CXXCFLAGS=\"$CXXFLAGS\"\n-    PREV_LIBS=\"$LIBS\"\n-    PREV_CXX=\"$CXX\"\n-    CXXFLAGS=\"$CXXFLAGS $FREETYPE_CFLAGS\"\n-    LIBS=\"$LIBS $FREETYPE_LIBS\"\n-    CXX=\"$FIXPATH $CXX\"\n-    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-\/* end confdefs.h.  *\/\n-\n-          #include<ft2build.h>\n-          #include FT_FREETYPE_H\n-          int main () {\n-            FT_Init_FreeType(NULL);\n-            return 0;\n-          }\n-\n-_ACEOF\n-if ac_fn_cxx_try_link \"$LINENO\"; then :\n-\n-          { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n-$as_echo \"yes\" >&6; }\n-\n-else\n-\n-          { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n-$as_echo \"no\" >&6; }\n-          { $as_echo \"$as_me:${as_lineno-$LINENO}: Could not compile and link with freetype. This might be a 32\/64-bit mismatch.\" >&5\n-$as_echo \"$as_me: Could not compile and link with freetype. This might be a 32\/64-bit mismatch.\" >&6;}\n-          { $as_echo \"$as_me:${as_lineno-$LINENO}: Using FREETYPE_CFLAGS=$FREETYPE_CFLAGS and FREETYPE_LIBS=$FREETYPE_LIBS\" >&5\n-$as_echo \"$as_me: Using FREETYPE_CFLAGS=$FREETYPE_CFLAGS and FREETYPE_LIBS=$FREETYPE_LIBS\" >&6;}\n-\n-\n-  # Print a helpful message on how to acquire the necessary build dependency.\n-  # freetype is the help tag: freetype, cups, pulse, alsa etc\n-  MISSING_DEPENDENCY=freetype\n-\n-  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n-    cygwin_help $MISSING_DEPENDENCY\n-  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n-    msys_help $MISSING_DEPENDENCY\n-  else\n-    PKGHANDLER_COMMAND=\n-\n-    case $PKGHANDLER in\n-      apt-get)\n-        apt_help     $MISSING_DEPENDENCY ;;\n-      yum)\n-        yum_help     $MISSING_DEPENDENCY ;;\n-      port)\n-        port_help    $MISSING_DEPENDENCY ;;\n-      pkgutil)\n-        pkgutil_help $MISSING_DEPENDENCY ;;\n-      pkgadd)\n-        pkgadd_help  $MISSING_DEPENDENCY ;;\n-    esac\n-\n-    if test \"x$PKGHANDLER_COMMAND\" != x; then\n-      HELP_MSG=\"You might be able to fix this by running '$PKGHANDLER_COMMAND'.\"\n+    if test \"x$FREETYPE_LIBS\" = \"x\" ; then\n+      FREETYPE_LIBS=\"-L$FREETYPE_LIB_PATH -l$FREETYPE_BASE_NAME\"\n@@ -49020,26 +45568,2 @@\n-\n-          as_fn_error $? \"Can not continue without freetype. $HELP_MSG\" \"$LINENO\" 5\n-\n-\n-fi\n-rm -f core conftest.err conftest.$ac_objext \\\n-    conftest$ac_exeext conftest.$ac_ext\n-    CXXCFLAGS=\"$PREV_CXXFLAGS\"\n-    LIBS=\"$PREV_LIBS\"\n-    CXX=\"$PREV_CXX\"\n-    ac_ext=cpp\n-ac_cpp='$CXXCPP $CPPFLAGS'\n-ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n-ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n-ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n-\n-\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking if we should bundle freetype\" >&5\n-$as_echo_n \"checking if we should bundle freetype... \" >&6; }\n-    if test \"x$BUNDLE_FREETYPE\" = xyes; then\n-      FREETYPE_BUNDLE_LIB_PATH=\"$FREETYPE_LIB_PATH\"\n-    fi\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $BUNDLE_FREETYPE\" >&5\n-$as_echo \"$BUNDLE_FREETYPE\" >&6; }\n-\n-  fi # end freetype needed\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: Using freetype: $FREETYPE_TO_USE\" >&5\n+$as_echo \"Using freetype: $FREETYPE_TO_USE\" >&6; }\n@@ -49346,1 +45870,1 @@\n-  # alsa is the help tag: freetype, cups, pulse, alsa etc\n+  # alsa is the help tag: cups, pulse, alsa etc\n@@ -49455,1 +45979,1 @@\n-  # fontconfig is the help tag: freetype, cups, pulse, alsa etc\n+  # fontconfig is the help tag: cups, pulse, alsa etc\n","filename":"common\/autoconf\/generated-configure.sh","additions":498,"deletions":3974,"binary":false,"changes":4472,"status":"modified"},{"patch":"@@ -256,83 +256,0 @@\n-AC_DEFUN([LIB_BUILD_FREETYPE],\n-[\n-  FREETYPE_SRC_PATH=\"$1\"\n-  BUILD_FREETYPE=yes\n-\n-  # Check if the freetype sources are acessible..\n-  if ! test -d $FREETYPE_SRC_PATH; then\n-    AC_MSG_WARN([--with-freetype-src specified, but can't find path \"$FREETYPE_SRC_PATH\" - ignoring --with-freetype-src])\n-    BUILD_FREETYPE=no\n-  fi\n-  # ..and contain a vc2010 project file\n-  vcxproj_path=\"$FREETYPE_SRC_PATH\/builds\/windows\/vc2010\/freetype.vcxproj\"\n-  if test \"x$BUILD_FREETYPE\" = xyes && ! test -s $vcxproj_path; then\n-    AC_MSG_WARN([Can't find project file $vcxproj_path (you may try a newer freetype version) - ignoring --with-freetype-src])\n-    BUILD_FREETYPE=no\n-  fi\n-  # Now check if configure found a version of 'msbuild.exe'\n-  if test \"x$BUILD_FREETYPE\" = xyes && test \"x$MSBUILD\" == x ; then\n-    AC_MSG_WARN([Can't find an msbuild.exe executable (you may try to install .NET 4.0) - ignoring --with-freetype-src])\n-    BUILD_FREETYPE=no\n-  fi\n-\n-  # Ready to go..\n-  if test \"x$BUILD_FREETYPE\" = xyes; then\n-\n-    # msbuild requires trailing slashes for output directories\n-    freetype_lib_path=\"$FREETYPE_SRC_PATH\/lib$OPENJDK_TARGET_CPU_BITS\/\"\n-    freetype_lib_path_unix=\"$freetype_lib_path\"\n-    freetype_obj_path=\"$FREETYPE_SRC_PATH\/obj$OPENJDK_TARGET_CPU_BITS\/\"\n-    BASIC_WINDOWS_REWRITE_AS_WINDOWS_MIXED_PATH(vcxproj_path)\n-    BASIC_WINDOWS_REWRITE_AS_WINDOWS_MIXED_PATH(freetype_lib_path)\n-    BASIC_WINDOWS_REWRITE_AS_WINDOWS_MIXED_PATH(freetype_obj_path)\n-    if test \"x$OPENJDK_TARGET_CPU_BITS\" = x64; then\n-      freetype_platform=x64\n-    else\n-      freetype_platform=win32\n-    fi\n-\n-    # The original freetype project file is for VS 2010 (i.e. 'v100'),\n-    # so we have to adapt the toolset if building with any other toolsed (i.e. SDK).\n-    # Currently 'PLATFORM_TOOLSET' is set in 'TOOLCHAIN_CHECK_POSSIBLE_VISUAL_STUDIO_ROOT'\/\n-    # 'TOOLCHAIN_CHECK_POSSIBLE_WIN_SDK_ROOT' in toolchain_windows.m4\n-    AC_MSG_NOTICE([Trying to compile freetype sources with PlatformToolset=$PLATFORM_TOOLSET to $freetype_lib_path_unix ...])\n-\n-    # First we try to build the freetype.dll\n-    $ECHO -e \"@echo off\\n\"\\\n-\t     \"$MSBUILD $vcxproj_path \"\\\n-\t\t       \"\/p:PlatformToolset=$PLATFORM_TOOLSET \"\\\n-\t\t       \"\/p:Configuration=\\\"Release Multithreaded\\\" \"\\\n-\t\t       \"\/p:Platform=$freetype_platform \"\\\n-\t\t       \"\/p:ConfigurationType=DynamicLibrary \"\\\n-\t\t       \"\/p:TargetName=freetype \"\\\n-\t\t       \"\/p:OutDir=\\\"$freetype_lib_path\\\" \"\\\n-\t\t       \"\/p:IntDir=\\\"$freetype_obj_path\\\" > freetype.log\" > freetype.bat\n-    cmd \/c freetype.bat\n-\n-    if test -s \"$freetype_lib_path_unix\/freetype.dll\"; then\n-      # If that succeeds we also build freetype.lib\n-      $ECHO -e \"@echo off\\n\"\\\n-\t       \"$MSBUILD $vcxproj_path \"\\\n-\t\t\t \"\/p:PlatformToolset=$PLATFORM_TOOLSET \"\\\n-\t\t\t \"\/p:Configuration=\\\"Release Multithreaded\\\" \"\\\n-\t\t\t \"\/p:Platform=$freetype_platform \"\\\n-\t\t\t \"\/p:ConfigurationType=StaticLibrary \"\\\n-\t\t\t \"\/p:TargetName=freetype \"\\\n-\t\t\t \"\/p:OutDir=\\\"$freetype_lib_path\\\" \"\\\n-\t\t\t \"\/p:IntDir=\\\"$freetype_obj_path\\\" >> freetype.log\" > freetype.bat\n-      cmd \/c freetype.bat\n-\n-      if test -s \"$freetype_lib_path_unix\/freetype.lib\"; then\n-\t# Once we build both, lib and dll, set freetype lib and include path appropriately\n-\tPOTENTIAL_FREETYPE_INCLUDE_PATH=\"$FREETYPE_SRC_PATH\/include\"\n-\tPOTENTIAL_FREETYPE_LIB_PATH=\"$freetype_lib_path_unix\"\n-\tAC_MSG_NOTICE([Compiling freetype sources succeeded! (see freetype.log for build results)])\n-      else\n-\tBUILD_FREETYPE=no\n-      fi\n-    else\n-      BUILD_FREETYPE=no\n-    fi\n-  fi\n-])\n-\n@@ -345,3 +262,15 @@\n-  # First check if the files exists.\n-  if test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n-    # We found an arbitrary include file. That's a good sign.\n+  # Assume we've found freetype to begin\n+  FOUND_FREETYPE=yes\n+\n+  # First look for the canonical freetype main include file ft2build.h.\n+  if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+    # Oh no! Let's try in the freetype2 directory.\n+    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$POTENTIAL_FREETYPE_INCLUDE_PATH\/freetype2\"\n+    if ! test -s \"$POTENTIAL_FREETYPE_INCLUDE_PATH\/ft2build.h\"; then\n+      # Fail.\n+      FOUND_FREETYPE=no\n+    fi\n+  fi\n+\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n+    # Include file found, let's continue the sanity check.\n@@ -351,1 +280,1 @@\n-    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}freetype${SHARED_LIBRARY_SUFFIX}\"\n+    FREETYPE_LIB_NAME=\"${LIBRARY_PREFIX}${FREETYPE_BASE_NAME}${SHARED_LIBRARY_SUFFIX}\"\n@@ -355,11 +284,0 @@\n-    else\n-      if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-        # On Windows, we will need both .lib and .dll file.\n-        if ! test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib\"; then\n-          AC_MSG_NOTICE([Could not find $POTENTIAL_FREETYPE_LIB_PATH\/freetype.lib. Ignoring location.])\n-          FOUND_FREETYPE=no\n-        fi\n-      elif test \"x$OPENJDK_TARGET_OS\" = xsolaris && test \"x$OPENJDK_TARGET_CPU\" = xx86_64 && test -s \"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\/$FREETYPE_LIB_NAME\"; then\n-        # On solaris-x86_86, default is (normally) PATH\/lib\/amd64. Update our guess!\n-        POTENTIAL_FREETYPE_LIB_PATH=\"$POTENTIAL_FREETYPE_LIB_PATH\/amd64\"\n-      fi\n@@ -369,4 +287,1 @@\n-  if test \"x$FOUND_FREETYPE\" = xyes; then\n-    BASIC_FIXUP_PATH(POTENTIAL_FREETYPE_INCLUDE_PATH)\n-    BASIC_FIXUP_PATH(POTENTIAL_FREETYPE_LIB_PATH)\n-\n+  if test \"x$FOUND_FREETYPE\" = \"xyes\"; then\n@@ -384,5 +299,0 @@\n-\n-  ###############################################################################\n-  #\n-  # The ubiquitous freetype library is used to render fonts.\n-  #\n@@ -390,2 +300,6 @@\n-      [specify prefix directory for the freetype package\n-      (expecting the libraries under PATH\/lib and the headers under PATH\/include)])])\n+      [specify whether to use 'system' or 'bundled' freetype.\n+       The selected option applies to both build time and run time.\n+       The default behaviour can be platform dependent.\n+       If using 'system' and either the include files or libraries cannot be\n+       located automatically, then additionally specify both using\n+       --with-freetype-include and --with-freetype-lib.])])\n@@ -396,4 +310,0 @@\n-  AC_ARG_WITH(freetype-src, [AS_HELP_STRING([--with-freetype-src],\n-      [specify directory with freetype sources to automatically build the library (experimental, Windows-only)])])\n-  AC_ARG_ENABLE(freetype-bundling, [AS_HELP_STRING([--disable-freetype-bundling],\n-      [disable bundling of the freetype library with the build result @<:@enabled on Windows or when using --with-freetype, disabled otherwise@:>@])])\n@@ -401,0 +311,8 @@\n+  # This setup is to verify access to system installed freetype header and\n+  # libraries. On Windows and MacOS this does not apply and using these options\n+  # will report an error. On other platforms they will default to using the\n+  # system libraries. If they are found automatically, nothing need be done.\n+  # If they are not found, the configure \"--with-freetype-*\" options may be\n+  # used to fix that. If the preference is to bundle on these platforms then\n+  # use --with-freetype=bundled.\n+  FREETYPE_BASE_NAME=freetype\n@@ -403,30 +321,18 @@\n-  FREETYPE_BUNDLE_LIB_PATH=\n-\n-  if test \"x$FREETYPE_NOT_NEEDED\" = xyes; then\n-    if test \"x$with_freetype\" != x || test \"x$with_freetype_include\" != x || test \"x$with_freetype_lib\" != x || test \"x$with_freetype_src\" != x; then\n-      AC_MSG_WARN([freetype not used, so --with-freetype is ignored])\n-    fi\n-    if test \"x$enable_freetype_bundling\" != x; then\n-      AC_MSG_WARN([freetype not used, so --enable-freetype-bundling is ignored])\n-    fi\n-  else\n-    # freetype is needed to build; go get it!\n-\n-    BUNDLE_FREETYPE=\"$enable_freetype_bundling\"\n-\n-    if  test \"x$with_freetype_src\" != x; then\n-      if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-        # Try to build freetype if --with-freetype-src was given on Windows\n-        LIB_BUILD_FREETYPE([$with_freetype_src])\n-        if test \"x$BUILD_FREETYPE\" = xyes; then\n-          # Okay, we built it. Check that it works.\n-          LIB_CHECK_POTENTIAL_FREETYPE($POTENTIAL_FREETYPE_INCLUDE_PATH, $POTENTIAL_FREETYPE_LIB_PATH, [--with-freetype-src])\n-          if test \"x$FOUND_FREETYPE\" != xyes; then\n-            AC_MSG_ERROR([Can not use the built freetype at location given by --with-freetype-src])\n-          fi\n-        else\n-          AC_MSG_NOTICE([User specified --with-freetype-src but building freetype failed. (see freetype.log for build results)])\n-          AC_MSG_ERROR([Consider building freetype manually and using --with-freetype instead.])\n-        fi\n-      else\n-        AC_MSG_WARN([--with-freetype-src is currently only supported on Windows - ignoring])\n+  if (test \"x$with_freetype_include\" = \"x\" && test \"x$with_freetype_lib\" != \"x\") || \\\n+     (test \"x$with_freetype_include\" != \"x\" && test \"x$with_freetype_lib\" = \"x\"); then\n+    AC_MSG_ERROR([Must specify both or neither of --with-freetype-include and --with-freetype-lib])\n+  fi\n+  FREETYPE_TO_USE=bundled\n+  if test \"x$OPENJDK_TARGET_OS\" != \"xwindows\" && \\\n+      test \"x$OPENJDK_TARGET_OS\" != \"xmacosx\" && \\\n+      test \"x$OPENJDK_TARGET_OS\" != \"xaix\"; then\n+    FREETYPE_TO_USE=system\n+  fi\n+  if test \"x$with_freetype\" != \"x\" ; then\n+    if test \"x$with_freetype\" = \"xsystem\" ; then\n+      FREETYPE_TO_USE=system\n+    elif test \"x$with_freetype\" = \"xbundled\" ; then\n+      FREETYPE_TO_USE=bundled\n+      if test \"x$with_freetype_include\" != \"x\" || \\\n+          test \"x$with_freetype_lib\" != \"x\" ; then\n+        AC_MSG_ERROR(['bundled' cannot be specified with --with-freetype-include and --with-freetype-lib])\n@@ -434,0 +340,2 @@\n+    else\n+      AC_MSG_ERROR([Valid values for --with-freetype are 'system' and 'bundled'])\n@@ -435,0 +343,1 @@\n+  fi\n@@ -436,7 +345,4 @@\n-    if test \"x$with_freetype\" != x || test \"x$with_freetype_include\" != x || test \"x$with_freetype_lib\" != x; then\n-      # User has specified settings\n-\n-      if test \"x$BUNDLE_FREETYPE\" = x; then\n-        # If not specified, default is to bundle freetype\n-        BUNDLE_FREETYPE=yes\n-      fi\n+  if test \"x$with_freetype_include\" != \"x\" && \\\n+      test \"x$with_freetype_lib\" != \"x\" ; then\n+    FREETYPE_TO_USE=system\n+  fi\n@@ -444,4 +350,5 @@\n-      if test \"x$with_freetype\" != x; then\n-        POTENTIAL_FREETYPE_INCLUDE_PATH=\"$with_freetype\/include\"\n-        POTENTIAL_FREETYPE_LIB_PATH=\"$with_freetype\/lib\"\n-      fi\n+  if test \"x$FREETYPE_TO_USE\" = \"xsystem\" && \\\n+     (test \"x$OPENJDK_TARGET_OS\" = \"xwindows\" || \\\n+     test \"x$OPENJDK_TARGET_OS\" = \"xmacosx\"); then\n+    AC_MSG_ERROR([Only bundled freetype can be specified on Mac and Windows])\n+  fi\n@@ -449,7 +356,6 @@\n-      # Allow --with-freetype-lib and --with-freetype-include to override\n-      if test \"x$with_freetype_include\" != x; then\n-        POTENTIAL_FREETYPE_INCLUDE_PATH=\"$with_freetype_include\"\n-      fi\n-      if test \"x$with_freetype_lib\" != x; then\n-        POTENTIAL_FREETYPE_LIB_PATH=\"$with_freetype_lib\"\n-      fi\n+  if test \"x$with_freetype_include\" != \"x\" ; then\n+    POTENTIAL_FREETYPE_INCLUDE_PATH=\"$with_freetype_include\"\n+  fi\n+  if test \"x$with_freetype_lib\" != \"x\" ; then\n+    POTENTIAL_FREETYPE_LIB_PATH=\"$with_freetype_lib\"\n+  fi\n@@ -457,15 +363,8 @@\n-      if test \"x$POTENTIAL_FREETYPE_INCLUDE_PATH\" != x && test \"x$POTENTIAL_FREETYPE_LIB_PATH\" != x; then\n-        # Okay, we got it. Check that it works.\n-        LIB_CHECK_POTENTIAL_FREETYPE($POTENTIAL_FREETYPE_INCLUDE_PATH, $POTENTIAL_FREETYPE_LIB_PATH, [--with-freetype])\n-        if test \"x$FOUND_FREETYPE\" != xyes; then\n-          AC_MSG_ERROR([Can not find or use freetype at location given by --with-freetype])\n-        fi\n-      else\n-        # User specified only one of lib or include. This is an error.\n-        if test \"x$POTENTIAL_FREETYPE_INCLUDE_PATH\" = x ; then\n-          AC_MSG_NOTICE([User specified --with-freetype-lib but not --with-freetype-include])\n-          AC_MSG_ERROR([Need both freetype lib and include paths. Consider using --with-freetype instead.])\n-        else\n-          AC_MSG_NOTICE([User specified --with-freetype-include but not --with-freetype-lib])\n-          AC_MSG_ERROR([Need both freetype lib and include paths. Consider using --with-freetype instead.])\n-        fi\n+  if test \"x$FREETYPE_TO_USE\" = \"xsystem\" ; then\n+    if test \"x$POTENTIAL_FREETYPE_INCLUDE_PATH\" != \"x\" && \\\n+        test \"x$POTENTIAL_FREETYPE_LIB_PATH\" != \"x\" ; then\n+      # Okay, we got it. Check that it works.\n+      LIB_CHECK_POTENTIAL_FREETYPE($POTENTIAL_FREETYPE_INCLUDE_PATH,\n+          $POTENTIAL_FREETYPE_LIB_PATH, [--with-freetype])\n+      if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n+        AC_MSG_ERROR([Can not find or use freetype at location given by --with-freetype-lib|include])\n@@ -474,31 +373,9 @@\n-      # User did not specify settings, but we need freetype. Try to locate it.\n-\n-      if test \"x$BUNDLE_FREETYPE\" = x; then\n-        # If not specified, default is to bundle freetype only on windows\n-        if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-          BUNDLE_FREETYPE=yes\n-        else\n-          BUNDLE_FREETYPE=no\n-        fi\n-      fi\n-\n-      if test \"x$FOUND_FREETYPE\" != xyes; then\n-        # Check builddeps\n-        BDEPS_CHECK_MODULE(FREETYPE, freetype2, xxx, [FOUND_FREETYPE=yes], [FOUND_FREETYPE=no])\n-        # BDEPS_CHECK_MODULE will set FREETYPE_CFLAGS and _LIBS, but we don't get a lib path for bundling.\n-        if test \"x$FOUND_FREETYPE\" = xyes; then\n-          if test \"x$BUNDLE_FREETYPE\" = xyes; then\n-            AC_MSG_NOTICE([Found freetype using builddeps, but ignoring since we can not bundle that])\n-            FOUND_FREETYPE=no\n-          else\n-            AC_MSG_CHECKING([for freetype])\n-            AC_MSG_RESULT([yes (using builddeps)])\n-          fi\n-        fi\n-      fi\n-\n-      # If we have a sysroot, assume that's where we are supposed to look and skip pkg-config.\n-      if test \"x$SYSROOT\" = x; then\n-        if test \"x$FOUND_FREETYPE\" != xyes; then\n-          # Check modules using pkg-config, but only if we have it (ugly output results otherwise)\n-          if test \"x$PKG_CONFIG\" != x; then\n+      # User did not specify a location, but asked for system freetype.\n+      # Try to locate it.\n+      # If we have a sysroot, assume that's where we are supposed to look and\n+      # skip pkg-config.\n+      if test \"x$SYSROOT\" = \"x\" ; then\n+        if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n+          # Check modules using pkg-config, but only if we have it (ugly output\n+          # results otherwise)\n+          if test \"x$PKG_CONFIG\" != \"x\" ; then\n@@ -506,15 +383,3 @@\n-            if test \"x$FOUND_FREETYPE\" = xyes; then\n-              # On solaris, pkg_check adds -lz to freetype libs, which isn't necessary for us.\n-              FREETYPE_LIBS=`$ECHO $FREETYPE_LIBS | $SED 's\/-lz\/\/g'`\n-              # 64-bit libs for Solaris x86 are installed in the amd64 subdirectory, change lib to lib\/amd64\n-              if test \"x$OPENJDK_TARGET_OS\" = xsolaris && test \"x$OPENJDK_TARGET_CPU\" = xx86_64; then\n-                FREETYPE_LIBS=`$ECHO $FREETYPE_LIBS | $SED 's?\/lib?\/lib\/amd64?g'`\n-              fi\n-              # BDEPS_CHECK_MODULE will set FREETYPE_CFLAGS and _LIBS, but we don't get a lib path for bundling.\n-              if test \"x$BUNDLE_FREETYPE\" = xyes; then\n-                AC_MSG_NOTICE([Found freetype using pkg-config, but ignoring since we can not bundle that])\n-                FOUND_FREETYPE=no\n-              else\n-                AC_MSG_CHECKING([for freetype])\n-                AC_MSG_RESULT([yes (using pkg-config)])\n-              fi\n+            if test \"x$FOUND_FREETYPE\" = \"xyes\" ; then\n+              AC_MSG_CHECKING([for freetype])\n+              AC_MSG_RESULT([yes (using pkg-config)])\n@@ -526,1 +391,1 @@\n-      if test \"x$FOUND_FREETYPE\" != xyes; then\n+      if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n@@ -528,8 +393,7 @@\n-        if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-          FREETYPE_BASE_DIR=\"$PROGRAMFILES\/GnuWin32\"\n-          BASIC_WINDOWS_REWRITE_AS_UNIX_PATH(FREETYPE_BASE_DIR)\n-          LIB_CHECK_POTENTIAL_FREETYPE([$FREETYPE_BASE_DIR\/include], [$FREETYPE_BASE_DIR\/lib], [well-known location])\n-          if test \"x$FOUND_FREETYPE\" != xyes; then\n-            FREETYPE_BASE_DIR=\"$ProgramW6432\/GnuWin32\"\n-            BASIC_WINDOWS_REWRITE_AS_UNIX_PATH(FREETYPE_BASE_DIR)\n-            LIB_CHECK_POTENTIAL_FREETYPE([$FREETYPE_BASE_DIR\/include], [$FREETYPE_BASE_DIR\/lib], [well-known location])\n+        FREETYPE_BASE_DIR=\"$SYSROOT\/usr\"\n+        if test \"x$OPENJDK_TARGET_CPU_BITS\" = \"x64\" ; then\n+          LIB_CHECK_POTENTIAL_FREETYPE([$FREETYPE_BASE_DIR\/include],\n+              [$FREETYPE_BASE_DIR\/lib\/$OPENJDK_TARGET_CPU-linux-gnu], [well-known location])\n+          if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n+            LIB_CHECK_POTENTIAL_FREETYPE([$FREETYPE_BASE_DIR\/include],\n+                [$FREETYPE_BASE_DIR\/lib64], [well-known location])\n@@ -538,6 +402,5 @@\n-          FREETYPE_BASE_DIR=\"$SYSROOT\/usr\"\n-          LIB_CHECK_POTENTIAL_FREETYPE([$FREETYPE_BASE_DIR\/include], [$FREETYPE_BASE_DIR\/lib], [well-known location])\n-\n-          if test \"x$FOUND_FREETYPE\" != xyes; then\n-            FREETYPE_BASE_DIR=\"$SYSROOT\/usr\/X11\"\n-            LIB_CHECK_POTENTIAL_FREETYPE([$FREETYPE_BASE_DIR\/include], [$FREETYPE_BASE_DIR\/lib], [well-known location])\n+          LIB_CHECK_POTENTIAL_FREETYPE([$FREETYPE_BASE_DIR\/include],\n+              [$FREETYPE_BASE_DIR\/lib\/i386-linux-gnu], [well-known location])\n+          if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n+            LIB_CHECK_POTENTIAL_FREETYPE([$FREETYPE_BASE_DIR\/include],\n+                [$FREETYPE_BASE_DIR\/lib32], [well-known location])\n@@ -545,0 +408,1 @@\n+        fi\n@@ -546,4 +410,4 @@\n-          if test \"x$FOUND_FREETYPE\" != xyes; then\n-            FREETYPE_BASE_DIR=\"$SYSROOT\/usr\/sfw\"\n-            LIB_CHECK_POTENTIAL_FREETYPE([$FREETYPE_BASE_DIR\/include], [$FREETYPE_BASE_DIR\/lib], [well-known location])\n-          fi\n+        if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n+          LIB_CHECK_POTENTIAL_FREETYPE([$FREETYPE_BASE_DIR\/include],\n+              [$FREETYPE_BASE_DIR\/lib], [well-known location])\n+        fi\n@@ -551,11 +415,20 @@\n-          if test \"x$FOUND_FREETYPE\" != xyes; then\n-            FREETYPE_BASE_DIR=\"$SYSROOT\/usr\"\n-            if test \"x$OPENJDK_TARGET_CPU_BITS\" = x64; then\n-              LIB_CHECK_POTENTIAL_FREETYPE([$FREETYPE_BASE_DIR\/include], [$FREETYPE_BASE_DIR\/lib\/x86_64-linux-gnu], [well-known location])\n-            else\n-              LIB_CHECK_POTENTIAL_FREETYPE([$FREETYPE_BASE_DIR\/include], [$FREETYPE_BASE_DIR\/lib\/i386-linux-gnu], [well-known location])\n-              if test \"x$FOUND_FREETYPE\" != xyes; then\n-                LIB_CHECK_POTENTIAL_FREETYPE([$FREETYPE_BASE_DIR\/include], [$FREETYPE_BASE_DIR\/lib32], [well-known location])\n-              fi\n-            fi\n-          fi\n+        if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n+          LIB_CHECK_POTENTIAL_FREETYPE([$FREETYPE_BASE_DIR\/include],\n+              [$FREETYPE_BASE_DIR\/lib\/$OPENJDK_TARGET_CPU-$OPENJDK_TARGET_OS-$OPENJDK_TARGET_ABI], [well-known location])\n+        fi\n+\n+        if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n+          LIB_CHECK_POTENTIAL_FREETYPE([$FREETYPE_BASE_DIR\/include],\n+              [$FREETYPE_BASE_DIR\/lib\/$OPENJDK_TARGET_CPU_AUTOCONF-$OPENJDK_TARGET_OS-$OPENJDK_TARGET_ABI], [well-known location])\n+        fi\n+\n+        if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n+          FREETYPE_BASE_DIR=\"$SYSROOT\/usr\/X11\"\n+          LIB_CHECK_POTENTIAL_FREETYPE([$FREETYPE_BASE_DIR\/include],\n+              [$FREETYPE_BASE_DIR\/lib], [well-known location])\n+        fi\n+\n+        if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n+          FREETYPE_BASE_DIR=\"$SYSROOT\/usr\/local\"\n+          LIB_CHECK_POTENTIAL_FREETYPE([$FREETYPE_BASE_DIR\/include],\n+              [$FREETYPE_BASE_DIR\/lib], [well-known location])\n@@ -565,1 +438,1 @@\n-      if test \"x$FOUND_FREETYPE\" != xyes; then\n+      if test \"x$FOUND_FREETYPE\" != \"xyes\" ; then\n@@ -572,3 +445,2 @@\n-    if test \"x$FREETYPE_CFLAGS\" = x; then\n-      BASIC_FIXUP_PATH(FREETYPE_INCLUDE_PATH)\n-      if test -d $FREETYPE_INCLUDE_PATH\/freetype2\/freetype; then\n+    if test \"x$FREETYPE_CFLAGS\" = \"x\" ; then\n+      if test -d $FREETYPE_INCLUDE_PATH\/freetype2\/freetype ; then\n@@ -581,7 +453,2 @@\n-    if test \"x$FREETYPE_LIBS\" = x; then\n-      BASIC_FIXUP_PATH(FREETYPE_LIB_PATH)\n-      if test \"x$OPENJDK_TARGET_OS\" = xwindows; then\n-        FREETYPE_LIBS=\"$FREETYPE_LIB_PATH\/freetype.lib\"\n-      else\n-        FREETYPE_LIBS=\"-L$FREETYPE_LIB_PATH -lfreetype\"\n-      fi\n+    if test \"x$FREETYPE_LIBS\" = \"x\" ; then\n+      FREETYPE_LIBS=\"-L$FREETYPE_LIB_PATH -l$FREETYPE_BASE_NAME\"\n@@ -589,0 +456,1 @@\n+  fi\n@@ -590,42 +458,1 @@\n-    # Try to compile it\n-    AC_MSG_CHECKING([if we can compile and link with freetype])\n-    AC_LANG_PUSH(C++)\n-    PREV_CXXCFLAGS=\"$CXXFLAGS\"\n-    PREV_LIBS=\"$LIBS\"\n-    PREV_CXX=\"$CXX\"\n-    CXXFLAGS=\"$CXXFLAGS $FREETYPE_CFLAGS\"\n-    LIBS=\"$LIBS $FREETYPE_LIBS\"\n-    CXX=\"$FIXPATH $CXX\"\n-    AC_LINK_IFELSE([AC_LANG_SOURCE([[\n-          #include<ft2build.h>\n-          #include FT_FREETYPE_H\n-          int main () {\n-            FT_Init_FreeType(NULL);\n-            return 0;\n-          }\n-        ]])],\n-        [\n-          AC_MSG_RESULT([yes])\n-        ],\n-        [\n-          AC_MSG_RESULT([no])\n-          AC_MSG_NOTICE([Could not compile and link with freetype. This might be a 32\/64-bit mismatch.])\n-          AC_MSG_NOTICE([Using FREETYPE_CFLAGS=$FREETYPE_CFLAGS and FREETYPE_LIBS=$FREETYPE_LIBS])\n-\n-          HELP_MSG_MISSING_DEPENDENCY([freetype])\n-\n-          AC_MSG_ERROR([Can not continue without freetype. $HELP_MSG])\n-        ]\n-    )\n-    CXXCFLAGS=\"$PREV_CXXFLAGS\"\n-    LIBS=\"$PREV_LIBS\"\n-    CXX=\"$PREV_CXX\"\n-    AC_LANG_POP(C++)\n-\n-    AC_MSG_CHECKING([if we should bundle freetype])\n-    if test \"x$BUNDLE_FREETYPE\" = xyes; then\n-      FREETYPE_BUNDLE_LIB_PATH=\"$FREETYPE_LIB_PATH\"\n-    fi\n-    AC_MSG_RESULT([$BUNDLE_FREETYPE])\n-\n-  fi # end freetype needed\n+  AC_MSG_RESULT([Using freetype: $FREETYPE_TO_USE])\n@@ -633,1 +460,1 @@\n-  AC_SUBST(FREETYPE_BUNDLE_LIB_PATH)\n+  AC_SUBST(FREETYPE_TO_USE)\n","filename":"common\/autoconf\/libraries.m4","additions":133,"deletions":306,"binary":false,"changes":439,"status":"modified"},{"patch":"@@ -307,0 +307,1 @@\n+FREETYPE_TO_USE:=@FREETYPE_TO_USE@\n@@ -309,1 +310,0 @@\n-FREETYPE_BUNDLE_LIB_PATH=@FREETYPE_BUNDLE_LIB_PATH@\n","filename":"common\/autoconf\/spec.gmk.in","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -155,6 +155,0 @@\n-      else\n-        # PLATFORM_TOOLSET is used during the compilation of the freetype sources\n-        # (see 'LIB_BUILD_FREETYPE' in libraries.m4) and must be one of 'v100',\n-        # 'v110' or 'v120' for VS 2010, 2012 or VS2013\n-        eval PLATFORM_TOOLSET=\"\\${VS_VS_PLATFORM_NAME_${VS_VERSION}}\"\n-\n@@ -189,4 +183,0 @@\n-        # PLATFORM_TOOLSET is used during the compilation of the freetype sources (see\n-        # 'LIB_BUILD_FREETYPE' in libraries.m4) and must be 'Windows7.1SDK' for Windows7.1SDK\n-        # TODO: improve detection for other versions of SDK\n-        eval PLATFORM_TOOLSET=\"\\${VS_SDK_PLATFORM_NAME_${VS_VERSION}}\"\n@@ -301,1 +291,0 @@\n-    eval PLATFORM_TOOLSET=\"\\${VS_VS_PLATFORM_NAME_${VS_VERSION}}\"\n","filename":"common\/autoconf\/toolchain_windows.m4","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -215,35 +215,0 @@\n-ifneq ($(FREETYPE_BUNDLE_LIB_PATH), )\n-  # We need to bundle the freetype library, so it will be available at runtime as well as link time.\n-  #\n-  # NB: Default freetype build system uses -h linker option and\n-  # result .so contains hardcoded library name that is later\n-  # used for adding dependencies to other objects\n-  # (e.g. libfontmanager.so).\n-  #\n-  # It is not obvious how to extract that hardcoded name (libfreetype.so.6)\n-  # without overcomplicating logic here.\n-  # To workaround this we hardcode .6 suffix for now.\n-  #\n-  # Note that .so.6 library will not be found by System.loadLibrary()\n-  # but fortunately we need to load FreeType library explicitly\n-  # on windows only\n-  #\n-  #TODO: rework this to avoid hardcoding library name in the makefile\n-  #\n-  ifeq ($(OPENJDK_TARGET_OS), windows)\n-    FREETYPE_TARGET_LIB = $(JDK_OUTPUTDIR)\/bin\/$(call SHARED_LIBRARY,freetype)\n-  else\n-    FREETYPE_TARGET_LIB = $(JDK_OUTPUTDIR)\/lib$(OPENJDK_TARGET_CPU_LIBDIR)\/$(call SHARED_LIBRARY,freetype).6\n-  endif\n-\n-  $(FREETYPE_TARGET_LIB): $(FREETYPE_BUNDLE_LIB_PATH)\/$(call SHARED_LIBRARY,freetype)\n-\t$(CP) $(FREETYPE_BUNDLE_LIB_PATH)\/$(call SHARED_LIBRARY,freetype) $@\n-        ifeq ($(OPENJDK_BUILD_OS), windows)\n-\t  $(CHMOD) +rx $@\n-        endif\n-\n-  COPY_FILES += $(FREETYPE_TARGET_LIB)\n-endif\n-\n-##########################################################################################\n-\n","filename":"jdk\/make\/CopyFiles.gmk","additions":0,"deletions":35,"binary":false,"changes":35,"status":"modified"}]}