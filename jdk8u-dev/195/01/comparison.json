{"files":[{"patch":"@@ -501,0 +501,2 @@\n+      # Corresponds to --with-vcruntime-1-dll\n+      BASIC_EVAL_DEVKIT_VARIABLE([DEVKIT_VCRUNTIME_1_DLL])\n","filename":"common\/autoconf\/basics.m4","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -644,0 +644,1 @@\n+VCRUNTIME_1_DLL\n@@ -1117,0 +1118,1 @@\n+with_vcruntime_1_dll\n@@ -2007,0 +2009,2 @@\n+  --with-vcruntime-1-dll  path to microsoft C++ runtime dll (vcruntime*_1.dll)\n+                          (Windows only) [probed]\n@@ -4366,1 +4370,1 @@\n-VS_VERSION_INTERNAL_2019=141\n+VS_VERSION_INTERNAL_2019=142\n@@ -4368,0 +4372,1 @@\n+VS_VCRUNTIME_1_2019=vcruntime140_1.dll\n@@ -4420,1 +4425,1 @@\n-DATE_WHEN_GENERATED=1652838310\n+DATE_WHEN_GENERATED=1669618301\n@@ -14987,0 +14992,6 @@\n+      # Corresponds to --with-vcruntime-1-dll\n+\n+  if test \"x$DEVKIT_VCRUNTIME_1_DLL\" = x; then\n+    eval DEVKIT_VCRUNTIME_1_DLL=\"\\${DEVKIT_VCRUNTIME_1_DLL_${OPENJDK_TARGET_CPU}}\"\n+  fi\n+\n@@ -25802,0 +25813,1 @@\n+    eval VCRUNTIME_1_NAME=\"\\${VS_VCRUNTIME_1_${VS_VERSION}}\"\n@@ -26537,0 +26549,1 @@\n+      eval VCRUNTIME_1_NAME=\"\\${VS_VCRUNTIME_1_${VS_VERSION}}\"\n@@ -49979,2 +49992,1043 @@\n-    if test \"x$MSVC_DLL\" = x; then\n-      as_fn_error $? \"Could not find a proper $MSVCR_NAME as specified by devkit\" \"$LINENO\" 5\n+    if test \"x$MSVC_DLL\" = x; then\n+      as_fn_error $? \"Could not find a proper $MSVCR_NAME as specified by devkit\" \"$LINENO\" 5\n+    fi\n+    MSVCR_DLL=\"$MSVC_DLL\"\n+  else\n+\n+  DLL_NAME=\"${MSVCR_NAME}\"\n+  MSVC_DLL=\n+\n+  if test \"x$MSVC_DLL\" = x; then\n+    if test \"x$VCINSTALLDIR\" != x; then\n+      CYGWIN_VC_INSTALL_DIR=\"$VCINSTALLDIR\"\n+\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+\n+  # Input might be given as Windows format, start by converting to\n+  # unix format.\n+  path=\"$CYGWIN_VC_INSTALL_DIR\"\n+  new_path=`$CYGPATH -u \"$path\"`\n+\n+  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n+  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n+  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n+  # \"foo.exe\" is OK but \"foo\" is an error.\n+  #\n+  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n+  # It is also a way to make sure we got the proper file name for the real test later on.\n+  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n+  if test \"x$test_shortpath\" = x; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of CYGWIN_VC_INSTALL_DIR, which resolves as \\\"$path\\\", is invalid.\" >&5\n+$as_echo \"$as_me: The path of CYGWIN_VC_INSTALL_DIR, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n+    as_fn_error $? \"Cannot locate the the path of CYGWIN_VC_INSTALL_DIR\" \"$LINENO\" 5\n+  fi\n+\n+  # Call helper function which possibly converts this using DOS-style short mode.\n+  # If so, the updated path is stored in $new_path.\n+\n+  input_path=\"$new_path\"\n+  # Check if we need to convert this using DOS-style short mode. If the path\n+  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n+  # take no chances and rewrite it.\n+  # Note: m4 eats our [], so we need to use [ and ] instead.\n+  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n+  if test \"x$has_forbidden_chars\" != x; then\n+    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n+    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n+    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n+    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n+      # Going to short mode and back again did indeed matter. Since short mode is\n+      # case insensitive, let's make it lowercase to improve readability.\n+      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+      # Now convert it back to Unix-style (cygpath)\n+      input_path=`$CYGPATH -u \"$shortmode_path\"`\n+      new_path=\"$input_path\"\n+    fi\n+  fi\n+\n+  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n+  if test \"x$test_cygdrive_prefix\" = x; then\n+    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n+    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n+      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n+      # a path prefixed by \/cygdrive for fixpath to work.\n+      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n+    fi\n+  fi\n+\n+\n+  if test \"x$path\" != \"x$new_path\"; then\n+    CYGWIN_VC_INSTALL_DIR=\"$new_path\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting CYGWIN_VC_INSTALL_DIR to \\\"$new_path\\\"\" >&5\n+$as_echo \"$as_me: Rewriting CYGWIN_VC_INSTALL_DIR to \\\"$new_path\\\"\" >&6;}\n+  fi\n+\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+\n+  path=\"$CYGWIN_VC_INSTALL_DIR\"\n+  has_colon=`$ECHO $path | $GREP ^.:`\n+  new_path=\"$path\"\n+  if test \"x$has_colon\" = x; then\n+    # Not in mixed or Windows style, start by that.\n+    new_path=`cmd \/\/c echo $path`\n+  fi\n+\n+\n+  input_path=\"$new_path\"\n+  # Check if we need to convert this using DOS-style short mode. If the path\n+  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n+  # take no chances and rewrite it.\n+  # Note: m4 eats our [], so we need to use [ and ] instead.\n+  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n+  if test \"x$has_forbidden_chars\" != x; then\n+    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n+    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+  fi\n+\n+\n+  windows_path=\"$new_path\"\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+    unix_path=`$CYGPATH -u \"$windows_path\"`\n+    new_path=\"$unix_path\"\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n+    new_path=\"$unix_path\"\n+  fi\n+\n+  if test \"x$path\" != \"x$new_path\"; then\n+    CYGWIN_VC_INSTALL_DIR=\"$new_path\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting CYGWIN_VC_INSTALL_DIR to \\\"$new_path\\\"\" >&5\n+$as_echo \"$as_me: Rewriting CYGWIN_VC_INSTALL_DIR to \\\"$new_path\\\"\" >&6;}\n+  fi\n+\n+  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n+  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n+\n+  else\n+    # We're on a posix platform. Hooray! :)\n+    path=\"$CYGWIN_VC_INSTALL_DIR\"\n+    has_space=`$ECHO \"$path\" | $GREP \" \"`\n+    if test \"x$has_space\" != x; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of CYGWIN_VC_INSTALL_DIR, which resolves as \\\"$path\\\", is invalid.\" >&5\n+$as_echo \"$as_me: The path of CYGWIN_VC_INSTALL_DIR, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n+      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n+    fi\n+\n+    # Use eval to expand a potential ~\n+    eval path=\"$path\"\n+    if test ! -f \"$path\" && test ! -d \"$path\"; then\n+      as_fn_error $? \"The path of CYGWIN_VC_INSTALL_DIR, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n+    fi\n+\n+    CYGWIN_VC_INSTALL_DIR=\"`cd \"$path\"; $THEPWDCMD -L`\"\n+  fi\n+\n+      if test \"$VS_VERSION\" -lt 2017; then\n+        # Probe: Using well-known location from Visual Studio 12.0 and older\n+        if test \"x$OPENJDK_TARGET_CPU_BITS\" = x64; then\n+          POSSIBLE_MSVC_DLL=\"$CYGWIN_VC_INSTALL_DIR\/redist\/x64\/Microsoft.VC${VS_VERSION_INTERNAL}.CRT\/$DLL_NAME\"\n+        else\n+          POSSIBLE_MSVC_DLL=\"$CYGWIN_VC_INSTALL_DIR\/redist\/x86\/Microsoft.VC${VS_VERSION_INTERNAL}.CRT\/$DLL_NAME\"\n+        fi\n+      else\n+        # Probe: Using well-known location from VS 2017 and VS 2019\n+        if test \"x$OPENJDK_TARGET_CPU_BITS\" = x64; then\n+          POSSIBLE_MSVC_DLL=\"`ls $CYGWIN_VC_INSTALL_DIR\/Redist\/MSVC\/*\/x64\/Microsoft.VC${VS_VERSION_INTERNAL}.CRT\/$DLL_NAME`\"\n+        else\n+          POSSIBLE_MSVC_DLL=\"`ls $CYGWIN_VC_INSTALL_DIR\/Redist\/MSVC\/*\/x86\/Microsoft.VC${VS_VERSION_INTERNAL}.CRT\/$DLL_NAME`\"\n+        fi\n+      fi\n+      # In case any of the above finds more than one file, loop over them.\n+      for possible_msvc_dll in $POSSIBLE_MSVC_DLL; do\n+        $ECHO \"POSSIBLE_MSVC_DLL $possible_msvc_dll\"\n+\n+  DLL_NAME=\"$DLL_NAME\"\n+  POSSIBLE_MSVC_DLL=\"$possible_msvc_dll\"\n+  METHOD=\"well-known location in VCINSTALLDIR\"\n+  if test -n \"$POSSIBLE_MSVC_DLL\" -a -e \"$POSSIBLE_MSVC_DLL\"; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found $DLL_NAME at $POSSIBLE_MSVC_DLL using $METHOD\" >&5\n+$as_echo \"$as_me: Found $DLL_NAME at $POSSIBLE_MSVC_DLL using $METHOD\" >&6;}\n+\n+    # Need to check if the found msvcr is correct architecture\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking found $DLL_NAME architecture\" >&5\n+$as_echo_n \"checking found $DLL_NAME architecture... \" >&6; }\n+    MSVC_DLL_FILETYPE=`$FILE -b \"$POSSIBLE_MSVC_DLL\"`\n+    if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+      # The MSYS 'file' command returns \"PE32 executable for MS Windows (DLL) (GUI) Intel 80386 32-bit\"\n+      # on x32 and \"PE32+ executable for MS Windows (DLL) (GUI) Mono\/.Net assembly\" on x64 systems.\n+      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x32; then\n+        CORRECT_MSVCR_ARCH=\"PE32 executable\"\n+      else\n+        CORRECT_MSVCR_ARCH=\"PE32+ executable\"\n+      fi\n+    else\n+      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x32; then\n+        CORRECT_MSVCR_ARCH=386\n+      else\n+        CORRECT_MSVCR_ARCH=x86-64\n+      fi\n+    fi\n+    if $ECHO \"$MSVC_DLL_FILETYPE\" | $GREP \"$CORRECT_MSVCR_ARCH\" 2>&1 > \/dev\/null; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: ok\" >&5\n+$as_echo \"ok\" >&6; }\n+      MSVC_DLL=\"$POSSIBLE_MSVC_DLL\"\n+\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+\n+  # Input might be given as Windows format, start by converting to\n+  # unix format.\n+  path=\"$MSVC_DLL\"\n+  new_path=`$CYGPATH -u \"$path\"`\n+\n+  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n+  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n+  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n+  # \"foo.exe\" is OK but \"foo\" is an error.\n+  #\n+  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n+  # It is also a way to make sure we got the proper file name for the real test later on.\n+  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n+  if test \"x$test_shortpath\" = x; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&5\n+$as_echo \"$as_me: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n+    as_fn_error $? \"Cannot locate the the path of MSVC_DLL\" \"$LINENO\" 5\n+  fi\n+\n+  # Call helper function which possibly converts this using DOS-style short mode.\n+  # If so, the updated path is stored in $new_path.\n+\n+  input_path=\"$new_path\"\n+  # Check if we need to convert this using DOS-style short mode. If the path\n+  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n+  # take no chances and rewrite it.\n+  # Note: m4 eats our [], so we need to use [ and ] instead.\n+  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n+  if test \"x$has_forbidden_chars\" != x; then\n+    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n+    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n+    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n+    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n+      # Going to short mode and back again did indeed matter. Since short mode is\n+      # case insensitive, let's make it lowercase to improve readability.\n+      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+      # Now convert it back to Unix-style (cygpath)\n+      input_path=`$CYGPATH -u \"$shortmode_path\"`\n+      new_path=\"$input_path\"\n+    fi\n+  fi\n+\n+  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n+  if test \"x$test_cygdrive_prefix\" = x; then\n+    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n+    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n+      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n+      # a path prefixed by \/cygdrive for fixpath to work.\n+      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n+    fi\n+  fi\n+\n+\n+  if test \"x$path\" != \"x$new_path\"; then\n+    MSVC_DLL=\"$new_path\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&5\n+$as_echo \"$as_me: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&6;}\n+  fi\n+\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+\n+  path=\"$MSVC_DLL\"\n+  has_colon=`$ECHO $path | $GREP ^.:`\n+  new_path=\"$path\"\n+  if test \"x$has_colon\" = x; then\n+    # Not in mixed or Windows style, start by that.\n+    new_path=`cmd \/\/c echo $path`\n+  fi\n+\n+\n+  input_path=\"$new_path\"\n+  # Check if we need to convert this using DOS-style short mode. If the path\n+  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n+  # take no chances and rewrite it.\n+  # Note: m4 eats our [], so we need to use [ and ] instead.\n+  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n+  if test \"x$has_forbidden_chars\" != x; then\n+    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n+    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+  fi\n+\n+\n+  windows_path=\"$new_path\"\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+    unix_path=`$CYGPATH -u \"$windows_path\"`\n+    new_path=\"$unix_path\"\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n+    new_path=\"$unix_path\"\n+  fi\n+\n+  if test \"x$path\" != \"x$new_path\"; then\n+    MSVC_DLL=\"$new_path\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&5\n+$as_echo \"$as_me: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&6;}\n+  fi\n+\n+  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n+  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n+\n+  else\n+    # We're on a posix platform. Hooray! :)\n+    path=\"$MSVC_DLL\"\n+    has_space=`$ECHO \"$path\" | $GREP \" \"`\n+    if test \"x$has_space\" != x; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&5\n+$as_echo \"$as_me: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n+      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n+    fi\n+\n+    # Use eval to expand a potential ~\n+    eval path=\"$path\"\n+    if test ! -f \"$path\" && test ! -d \"$path\"; then\n+      as_fn_error $? \"The path of MSVC_DLL, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n+    fi\n+\n+    MSVC_DLL=\"`cd \"$path\"; $THEPWDCMD -L`\"\n+  fi\n+\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $DLL_NAME\" >&5\n+$as_echo_n \"checking for $DLL_NAME... \" >&6; }\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $MSVC_DLL\" >&5\n+$as_echo \"$MSVC_DLL\" >&6; }\n+    else\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: incorrect, ignoring\" >&5\n+$as_echo \"incorrect, ignoring\" >&6; }\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: The file type of the located $DLL_NAME is $MSVC_DLL_FILETYPE\" >&5\n+$as_echo \"$as_me: The file type of the located $DLL_NAME is $MSVC_DLL_FILETYPE\" >&6;}\n+    fi\n+  fi\n+\n+      done\n+    fi\n+  fi\n+\n+  if test \"x$MSVC_DLL\" = x; then\n+    # Probe: Check in the Boot JDK directory.\n+    POSSIBLE_MSVC_DLL=\"$BOOT_JDK\/bin\/$DLL_NAME\"\n+\n+  DLL_NAME=\"$DLL_NAME\"\n+  POSSIBLE_MSVC_DLL=\"$POSSIBLE_MSVC_DLL\"\n+  METHOD=\"well-known location in Boot JDK\"\n+  if test -n \"$POSSIBLE_MSVC_DLL\" -a -e \"$POSSIBLE_MSVC_DLL\"; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found $DLL_NAME at $POSSIBLE_MSVC_DLL using $METHOD\" >&5\n+$as_echo \"$as_me: Found $DLL_NAME at $POSSIBLE_MSVC_DLL using $METHOD\" >&6;}\n+\n+    # Need to check if the found msvcr is correct architecture\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking found $DLL_NAME architecture\" >&5\n+$as_echo_n \"checking found $DLL_NAME architecture... \" >&6; }\n+    MSVC_DLL_FILETYPE=`$FILE -b \"$POSSIBLE_MSVC_DLL\"`\n+    if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+      # The MSYS 'file' command returns \"PE32 executable for MS Windows (DLL) (GUI) Intel 80386 32-bit\"\n+      # on x32 and \"PE32+ executable for MS Windows (DLL) (GUI) Mono\/.Net assembly\" on x64 systems.\n+      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x32; then\n+        CORRECT_MSVCR_ARCH=\"PE32 executable\"\n+      else\n+        CORRECT_MSVCR_ARCH=\"PE32+ executable\"\n+      fi\n+    else\n+      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x32; then\n+        CORRECT_MSVCR_ARCH=386\n+      else\n+        CORRECT_MSVCR_ARCH=x86-64\n+      fi\n+    fi\n+    if $ECHO \"$MSVC_DLL_FILETYPE\" | $GREP \"$CORRECT_MSVCR_ARCH\" 2>&1 > \/dev\/null; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: ok\" >&5\n+$as_echo \"ok\" >&6; }\n+      MSVC_DLL=\"$POSSIBLE_MSVC_DLL\"\n+\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+\n+  # Input might be given as Windows format, start by converting to\n+  # unix format.\n+  path=\"$MSVC_DLL\"\n+  new_path=`$CYGPATH -u \"$path\"`\n+\n+  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n+  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n+  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n+  # \"foo.exe\" is OK but \"foo\" is an error.\n+  #\n+  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n+  # It is also a way to make sure we got the proper file name for the real test later on.\n+  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n+  if test \"x$test_shortpath\" = x; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&5\n+$as_echo \"$as_me: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n+    as_fn_error $? \"Cannot locate the the path of MSVC_DLL\" \"$LINENO\" 5\n+  fi\n+\n+  # Call helper function which possibly converts this using DOS-style short mode.\n+  # If so, the updated path is stored in $new_path.\n+\n+  input_path=\"$new_path\"\n+  # Check if we need to convert this using DOS-style short mode. If the path\n+  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n+  # take no chances and rewrite it.\n+  # Note: m4 eats our [], so we need to use [ and ] instead.\n+  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n+  if test \"x$has_forbidden_chars\" != x; then\n+    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n+    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n+    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n+    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n+      # Going to short mode and back again did indeed matter. Since short mode is\n+      # case insensitive, let's make it lowercase to improve readability.\n+      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+      # Now convert it back to Unix-style (cygpath)\n+      input_path=`$CYGPATH -u \"$shortmode_path\"`\n+      new_path=\"$input_path\"\n+    fi\n+  fi\n+\n+  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n+  if test \"x$test_cygdrive_prefix\" = x; then\n+    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n+    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n+      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n+      # a path prefixed by \/cygdrive for fixpath to work.\n+      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n+    fi\n+  fi\n+\n+\n+  if test \"x$path\" != \"x$new_path\"; then\n+    MSVC_DLL=\"$new_path\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&5\n+$as_echo \"$as_me: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&6;}\n+  fi\n+\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+\n+  path=\"$MSVC_DLL\"\n+  has_colon=`$ECHO $path | $GREP ^.:`\n+  new_path=\"$path\"\n+  if test \"x$has_colon\" = x; then\n+    # Not in mixed or Windows style, start by that.\n+    new_path=`cmd \/\/c echo $path`\n+  fi\n+\n+\n+  input_path=\"$new_path\"\n+  # Check if we need to convert this using DOS-style short mode. If the path\n+  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n+  # take no chances and rewrite it.\n+  # Note: m4 eats our [], so we need to use [ and ] instead.\n+  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n+  if test \"x$has_forbidden_chars\" != x; then\n+    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n+    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+  fi\n+\n+\n+  windows_path=\"$new_path\"\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+    unix_path=`$CYGPATH -u \"$windows_path\"`\n+    new_path=\"$unix_path\"\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n+    new_path=\"$unix_path\"\n+  fi\n+\n+  if test \"x$path\" != \"x$new_path\"; then\n+    MSVC_DLL=\"$new_path\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&5\n+$as_echo \"$as_me: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&6;}\n+  fi\n+\n+  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n+  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n+\n+  else\n+    # We're on a posix platform. Hooray! :)\n+    path=\"$MSVC_DLL\"\n+    has_space=`$ECHO \"$path\" | $GREP \" \"`\n+    if test \"x$has_space\" != x; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&5\n+$as_echo \"$as_me: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n+      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n+    fi\n+\n+    # Use eval to expand a potential ~\n+    eval path=\"$path\"\n+    if test ! -f \"$path\" && test ! -d \"$path\"; then\n+      as_fn_error $? \"The path of MSVC_DLL, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n+    fi\n+\n+    MSVC_DLL=\"`cd \"$path\"; $THEPWDCMD -L`\"\n+  fi\n+\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $DLL_NAME\" >&5\n+$as_echo_n \"checking for $DLL_NAME... \" >&6; }\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $MSVC_DLL\" >&5\n+$as_echo \"$MSVC_DLL\" >&6; }\n+    else\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: incorrect, ignoring\" >&5\n+$as_echo \"incorrect, ignoring\" >&6; }\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: The file type of the located $DLL_NAME is $MSVC_DLL_FILETYPE\" >&5\n+$as_echo \"$as_me: The file type of the located $DLL_NAME is $MSVC_DLL_FILETYPE\" >&6;}\n+    fi\n+  fi\n+\n+  fi\n+\n+  if test \"x$MSVC_DLL\" = x; then\n+    # Probe: Look in the Windows system32 directory\n+    CYGWIN_SYSTEMROOT=\"$SYSTEMROOT\"\n+\n+  windows_path=\"$CYGWIN_SYSTEMROOT\"\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+    unix_path=`$CYGPATH -u \"$windows_path\"`\n+    CYGWIN_SYSTEMROOT=\"$unix_path\"\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n+    CYGWIN_SYSTEMROOT=\"$unix_path\"\n+  fi\n+\n+    POSSIBLE_MSVC_DLL=\"$CYGWIN_SYSTEMROOT\/system32\/$DLL_NAME\"\n+\n+  DLL_NAME=\"$DLL_NAME\"\n+  POSSIBLE_MSVC_DLL=\"$POSSIBLE_MSVC_DLL\"\n+  METHOD=\"well-known location in SYSTEMROOT\"\n+  if test -n \"$POSSIBLE_MSVC_DLL\" -a -e \"$POSSIBLE_MSVC_DLL\"; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found $DLL_NAME at $POSSIBLE_MSVC_DLL using $METHOD\" >&5\n+$as_echo \"$as_me: Found $DLL_NAME at $POSSIBLE_MSVC_DLL using $METHOD\" >&6;}\n+\n+    # Need to check if the found msvcr is correct architecture\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking found $DLL_NAME architecture\" >&5\n+$as_echo_n \"checking found $DLL_NAME architecture... \" >&6; }\n+    MSVC_DLL_FILETYPE=`$FILE -b \"$POSSIBLE_MSVC_DLL\"`\n+    if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+      # The MSYS 'file' command returns \"PE32 executable for MS Windows (DLL) (GUI) Intel 80386 32-bit\"\n+      # on x32 and \"PE32+ executable for MS Windows (DLL) (GUI) Mono\/.Net assembly\" on x64 systems.\n+      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x32; then\n+        CORRECT_MSVCR_ARCH=\"PE32 executable\"\n+      else\n+        CORRECT_MSVCR_ARCH=\"PE32+ executable\"\n+      fi\n+    else\n+      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x32; then\n+        CORRECT_MSVCR_ARCH=386\n+      else\n+        CORRECT_MSVCR_ARCH=x86-64\n+      fi\n+    fi\n+    if $ECHO \"$MSVC_DLL_FILETYPE\" | $GREP \"$CORRECT_MSVCR_ARCH\" 2>&1 > \/dev\/null; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: ok\" >&5\n+$as_echo \"ok\" >&6; }\n+      MSVC_DLL=\"$POSSIBLE_MSVC_DLL\"\n+\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+\n+  # Input might be given as Windows format, start by converting to\n+  # unix format.\n+  path=\"$MSVC_DLL\"\n+  new_path=`$CYGPATH -u \"$path\"`\n+\n+  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n+  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n+  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n+  # \"foo.exe\" is OK but \"foo\" is an error.\n+  #\n+  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n+  # It is also a way to make sure we got the proper file name for the real test later on.\n+  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n+  if test \"x$test_shortpath\" = x; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&5\n+$as_echo \"$as_me: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n+    as_fn_error $? \"Cannot locate the the path of MSVC_DLL\" \"$LINENO\" 5\n+  fi\n+\n+  # Call helper function which possibly converts this using DOS-style short mode.\n+  # If so, the updated path is stored in $new_path.\n+\n+  input_path=\"$new_path\"\n+  # Check if we need to convert this using DOS-style short mode. If the path\n+  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n+  # take no chances and rewrite it.\n+  # Note: m4 eats our [], so we need to use [ and ] instead.\n+  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n+  if test \"x$has_forbidden_chars\" != x; then\n+    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n+    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n+    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n+    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n+      # Going to short mode and back again did indeed matter. Since short mode is\n+      # case insensitive, let's make it lowercase to improve readability.\n+      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+      # Now convert it back to Unix-style (cygpath)\n+      input_path=`$CYGPATH -u \"$shortmode_path\"`\n+      new_path=\"$input_path\"\n+    fi\n+  fi\n+\n+  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n+  if test \"x$test_cygdrive_prefix\" = x; then\n+    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n+    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n+      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n+      # a path prefixed by \/cygdrive for fixpath to work.\n+      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n+    fi\n+  fi\n+\n+\n+  if test \"x$path\" != \"x$new_path\"; then\n+    MSVC_DLL=\"$new_path\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&5\n+$as_echo \"$as_me: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&6;}\n+  fi\n+\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+\n+  path=\"$MSVC_DLL\"\n+  has_colon=`$ECHO $path | $GREP ^.:`\n+  new_path=\"$path\"\n+  if test \"x$has_colon\" = x; then\n+    # Not in mixed or Windows style, start by that.\n+    new_path=`cmd \/\/c echo $path`\n+  fi\n+\n+\n+  input_path=\"$new_path\"\n+  # Check if we need to convert this using DOS-style short mode. If the path\n+  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n+  # take no chances and rewrite it.\n+  # Note: m4 eats our [], so we need to use [ and ] instead.\n+  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n+  if test \"x$has_forbidden_chars\" != x; then\n+    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n+    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+  fi\n+\n+\n+  windows_path=\"$new_path\"\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+    unix_path=`$CYGPATH -u \"$windows_path\"`\n+    new_path=\"$unix_path\"\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n+    new_path=\"$unix_path\"\n+  fi\n+\n+  if test \"x$path\" != \"x$new_path\"; then\n+    MSVC_DLL=\"$new_path\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&5\n+$as_echo \"$as_me: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&6;}\n+  fi\n+\n+  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n+  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n+\n+  else\n+    # We're on a posix platform. Hooray! :)\n+    path=\"$MSVC_DLL\"\n+    has_space=`$ECHO \"$path\" | $GREP \" \"`\n+    if test \"x$has_space\" != x; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&5\n+$as_echo \"$as_me: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n+      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n+    fi\n+\n+    # Use eval to expand a potential ~\n+    eval path=\"$path\"\n+    if test ! -f \"$path\" && test ! -d \"$path\"; then\n+      as_fn_error $? \"The path of MSVC_DLL, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n+    fi\n+\n+    MSVC_DLL=\"`cd \"$path\"; $THEPWDCMD -L`\"\n+  fi\n+\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $DLL_NAME\" >&5\n+$as_echo_n \"checking for $DLL_NAME... \" >&6; }\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $MSVC_DLL\" >&5\n+$as_echo \"$MSVC_DLL\" >&6; }\n+    else\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: incorrect, ignoring\" >&5\n+$as_echo \"incorrect, ignoring\" >&6; }\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: The file type of the located $DLL_NAME is $MSVC_DLL_FILETYPE\" >&5\n+$as_echo \"$as_me: The file type of the located $DLL_NAME is $MSVC_DLL_FILETYPE\" >&6;}\n+    fi\n+  fi\n+\n+  fi\n+\n+  if test \"x$MSVC_DLL\" = x; then\n+    # Probe: If Visual Studio Express is installed, there is usually one with the debugger\n+    if test \"x$VS100COMNTOOLS\" != x; then\n+      CYGWIN_VS_TOOLS_DIR=\"$VS100COMNTOOLS\/..\"\n+\n+  windows_path=\"$CYGWIN_VS_TOOLS_DIR\"\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+    unix_path=`$CYGPATH -u \"$windows_path\"`\n+    CYGWIN_VS_TOOLS_DIR=\"$unix_path\"\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n+    CYGWIN_VS_TOOLS_DIR=\"$unix_path\"\n+  fi\n+\n+      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x64; then\n+        POSSIBLE_MSVC_DLL=`$FIND \"$CYGWIN_VS_TOOLS_DIR\" -name $DLL_NAME \\\n+            | $GREP -i \/x64\/ | $HEAD --lines 1`\n+      else\n+        POSSIBLE_MSVC_DLL=`$FIND \"$CYGWIN_VS_TOOLS_DIR\" -name $DLL_NAME \\\n+            | $GREP -i \/x86\/ | $HEAD --lines 1`\n+      fi\n+\n+  DLL_NAME=\"$DLL_NAME\"\n+  POSSIBLE_MSVC_DLL=\"$POSSIBLE_MSVC_DLL\"\n+  METHOD=\"search of VS100COMNTOOLS\"\n+  if test -n \"$POSSIBLE_MSVC_DLL\" -a -e \"$POSSIBLE_MSVC_DLL\"; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found $DLL_NAME at $POSSIBLE_MSVC_DLL using $METHOD\" >&5\n+$as_echo \"$as_me: Found $DLL_NAME at $POSSIBLE_MSVC_DLL using $METHOD\" >&6;}\n+\n+    # Need to check if the found msvcr is correct architecture\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking found $DLL_NAME architecture\" >&5\n+$as_echo_n \"checking found $DLL_NAME architecture... \" >&6; }\n+    MSVC_DLL_FILETYPE=`$FILE -b \"$POSSIBLE_MSVC_DLL\"`\n+    if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+      # The MSYS 'file' command returns \"PE32 executable for MS Windows (DLL) (GUI) Intel 80386 32-bit\"\n+      # on x32 and \"PE32+ executable for MS Windows (DLL) (GUI) Mono\/.Net assembly\" on x64 systems.\n+      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x32; then\n+        CORRECT_MSVCR_ARCH=\"PE32 executable\"\n+      else\n+        CORRECT_MSVCR_ARCH=\"PE32+ executable\"\n+      fi\n+    else\n+      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x32; then\n+        CORRECT_MSVCR_ARCH=386\n+      else\n+        CORRECT_MSVCR_ARCH=x86-64\n+      fi\n+    fi\n+    if $ECHO \"$MSVC_DLL_FILETYPE\" | $GREP \"$CORRECT_MSVCR_ARCH\" 2>&1 > \/dev\/null; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: ok\" >&5\n+$as_echo \"ok\" >&6; }\n+      MSVC_DLL=\"$POSSIBLE_MSVC_DLL\"\n+\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+\n+  # Input might be given as Windows format, start by converting to\n+  # unix format.\n+  path=\"$MSVC_DLL\"\n+  new_path=`$CYGPATH -u \"$path\"`\n+\n+  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n+  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n+  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n+  # \"foo.exe\" is OK but \"foo\" is an error.\n+  #\n+  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n+  # It is also a way to make sure we got the proper file name for the real test later on.\n+  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n+  if test \"x$test_shortpath\" = x; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&5\n+$as_echo \"$as_me: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n+    as_fn_error $? \"Cannot locate the the path of MSVC_DLL\" \"$LINENO\" 5\n+  fi\n+\n+  # Call helper function which possibly converts this using DOS-style short mode.\n+  # If so, the updated path is stored in $new_path.\n+\n+  input_path=\"$new_path\"\n+  # Check if we need to convert this using DOS-style short mode. If the path\n+  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n+  # take no chances and rewrite it.\n+  # Note: m4 eats our [], so we need to use [ and ] instead.\n+  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n+  if test \"x$has_forbidden_chars\" != x; then\n+    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n+    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n+    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n+    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n+      # Going to short mode and back again did indeed matter. Since short mode is\n+      # case insensitive, let's make it lowercase to improve readability.\n+      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+      # Now convert it back to Unix-style (cygpath)\n+      input_path=`$CYGPATH -u \"$shortmode_path\"`\n+      new_path=\"$input_path\"\n+    fi\n+  fi\n+\n+  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n+  if test \"x$test_cygdrive_prefix\" = x; then\n+    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n+    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n+      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n+      # a path prefixed by \/cygdrive for fixpath to work.\n+      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n+    fi\n+  fi\n+\n+\n+  if test \"x$path\" != \"x$new_path\"; then\n+    MSVC_DLL=\"$new_path\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&5\n+$as_echo \"$as_me: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&6;}\n+  fi\n+\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+\n+  path=\"$MSVC_DLL\"\n+  has_colon=`$ECHO $path | $GREP ^.:`\n+  new_path=\"$path\"\n+  if test \"x$has_colon\" = x; then\n+    # Not in mixed or Windows style, start by that.\n+    new_path=`cmd \/\/c echo $path`\n+  fi\n+\n+\n+  input_path=\"$new_path\"\n+  # Check if we need to convert this using DOS-style short mode. If the path\n+  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n+  # take no chances and rewrite it.\n+  # Note: m4 eats our [], so we need to use [ and ] instead.\n+  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n+  if test \"x$has_forbidden_chars\" != x; then\n+    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n+    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+  fi\n+\n+\n+  windows_path=\"$new_path\"\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+    unix_path=`$CYGPATH -u \"$windows_path\"`\n+    new_path=\"$unix_path\"\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n+    new_path=\"$unix_path\"\n+  fi\n+\n+  if test \"x$path\" != \"x$new_path\"; then\n+    MSVC_DLL=\"$new_path\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&5\n+$as_echo \"$as_me: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&6;}\n+  fi\n+\n+  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n+  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n+\n+  else\n+    # We're on a posix platform. Hooray! :)\n+    path=\"$MSVC_DLL\"\n+    has_space=`$ECHO \"$path\" | $GREP \" \"`\n+    if test \"x$has_space\" != x; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&5\n+$as_echo \"$as_me: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n+      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n+    fi\n+\n+    # Use eval to expand a potential ~\n+    eval path=\"$path\"\n+    if test ! -f \"$path\" && test ! -d \"$path\"; then\n+      as_fn_error $? \"The path of MSVC_DLL, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n+    fi\n+\n+    MSVC_DLL=\"`cd \"$path\"; $THEPWDCMD -L`\"\n+  fi\n+\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $DLL_NAME\" >&5\n+$as_echo_n \"checking for $DLL_NAME... \" >&6; }\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $MSVC_DLL\" >&5\n+$as_echo \"$MSVC_DLL\" >&6; }\n+    else\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: incorrect, ignoring\" >&5\n+$as_echo \"incorrect, ignoring\" >&6; }\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: The file type of the located $DLL_NAME is $MSVC_DLL_FILETYPE\" >&5\n+$as_echo \"$as_me: The file type of the located $DLL_NAME is $MSVC_DLL_FILETYPE\" >&6;}\n+    fi\n+  fi\n+\n+    fi\n+  fi\n+\n+  if test \"x$MSVC_DLL\" = x; then\n+    # Probe: Search wildly in the VCINSTALLDIR. We've probably lost by now.\n+    # (This was the original behaviour; kept since it might turn something up)\n+    if test \"x$CYGWIN_VC_INSTALL_DIR\" != x; then\n+      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x64; then\n+        POSSIBLE_MSVC_DLL=`$FIND \"$CYGWIN_VC_INSTALL_DIR\" -name $DLL_NAME \\\n+          | $GREP x64 | $HEAD --lines 1`\n+      else\n+        POSSIBLE_MSVC_DLL=`$FIND \"$CYGWIN_VC_INSTALL_DIR\" -name $DLL_NAME \\\n+          | $GREP x86 | $GREP -v ia64 | $GREP -v x64 | $HEAD --lines 1`\n+        if test \"x$POSSIBLE_MSVC_DLL\" = x; then\n+          # We're grasping at straws now...\n+          POSSIBLE_MSVC_DLL=`$FIND \"$CYGWIN_VC_INSTALL_DIR\" -name $DLL_NAME \\\n+              | $HEAD --lines 1`\n+        fi\n+      fi\n+\n+\n+  DLL_NAME=\"$DLL_NAME\"\n+  POSSIBLE_MSVC_DLL=\"$POSSIBLE_MSVC_DLL\"\n+  METHOD=\"search of VCINSTALLDIR\"\n+  if test -n \"$POSSIBLE_MSVC_DLL\" -a -e \"$POSSIBLE_MSVC_DLL\"; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found $DLL_NAME at $POSSIBLE_MSVC_DLL using $METHOD\" >&5\n+$as_echo \"$as_me: Found $DLL_NAME at $POSSIBLE_MSVC_DLL using $METHOD\" >&6;}\n+\n+    # Need to check if the found msvcr is correct architecture\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking found $DLL_NAME architecture\" >&5\n+$as_echo_n \"checking found $DLL_NAME architecture... \" >&6; }\n+    MSVC_DLL_FILETYPE=`$FILE -b \"$POSSIBLE_MSVC_DLL\"`\n+    if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+      # The MSYS 'file' command returns \"PE32 executable for MS Windows (DLL) (GUI) Intel 80386 32-bit\"\n+      # on x32 and \"PE32+ executable for MS Windows (DLL) (GUI) Mono\/.Net assembly\" on x64 systems.\n+      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x32; then\n+        CORRECT_MSVCR_ARCH=\"PE32 executable\"\n+      else\n+        CORRECT_MSVCR_ARCH=\"PE32+ executable\"\n+      fi\n+    else\n+      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x32; then\n+        CORRECT_MSVCR_ARCH=386\n+      else\n+        CORRECT_MSVCR_ARCH=x86-64\n+      fi\n+    fi\n+    if $ECHO \"$MSVC_DLL_FILETYPE\" | $GREP \"$CORRECT_MSVCR_ARCH\" 2>&1 > \/dev\/null; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: ok\" >&5\n+$as_echo \"ok\" >&6; }\n+      MSVC_DLL=\"$POSSIBLE_MSVC_DLL\"\n+\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+\n+  # Input might be given as Windows format, start by converting to\n+  # unix format.\n+  path=\"$MSVC_DLL\"\n+  new_path=`$CYGPATH -u \"$path\"`\n+\n+  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n+  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n+  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n+  # \"foo.exe\" is OK but \"foo\" is an error.\n+  #\n+  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n+  # It is also a way to make sure we got the proper file name for the real test later on.\n+  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n+  if test \"x$test_shortpath\" = x; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&5\n+$as_echo \"$as_me: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n+    as_fn_error $? \"Cannot locate the the path of MSVC_DLL\" \"$LINENO\" 5\n+  fi\n+\n+  # Call helper function which possibly converts this using DOS-style short mode.\n+  # If so, the updated path is stored in $new_path.\n+\n+  input_path=\"$new_path\"\n+  # Check if we need to convert this using DOS-style short mode. If the path\n+  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n+  # take no chances and rewrite it.\n+  # Note: m4 eats our [], so we need to use [ and ] instead.\n+  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n+  if test \"x$has_forbidden_chars\" != x; then\n+    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n+    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n+    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n+    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n+      # Going to short mode and back again did indeed matter. Since short mode is\n+      # case insensitive, let's make it lowercase to improve readability.\n+      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+      # Now convert it back to Unix-style (cygpath)\n+      input_path=`$CYGPATH -u \"$shortmode_path\"`\n+      new_path=\"$input_path\"\n+    fi\n+  fi\n+\n+  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n+  if test \"x$test_cygdrive_prefix\" = x; then\n+    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n+    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n+      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n+      # a path prefixed by \/cygdrive for fixpath to work.\n+      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n+    fi\n+  fi\n+\n+\n+  if test \"x$path\" != \"x$new_path\"; then\n+    MSVC_DLL=\"$new_path\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&5\n+$as_echo \"$as_me: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&6;}\n+  fi\n+\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+\n+  path=\"$MSVC_DLL\"\n+  has_colon=`$ECHO $path | $GREP ^.:`\n+  new_path=\"$path\"\n+  if test \"x$has_colon\" = x; then\n+    # Not in mixed or Windows style, start by that.\n+    new_path=`cmd \/\/c echo $path`\n+  fi\n+\n+\n+  input_path=\"$new_path\"\n+  # Check if we need to convert this using DOS-style short mode. If the path\n+  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n+  # take no chances and rewrite it.\n+  # Note: m4 eats our [], so we need to use [ and ] instead.\n+  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n+  if test \"x$has_forbidden_chars\" != x; then\n+    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n+    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+  fi\n+\n+\n+  windows_path=\"$new_path\"\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+    unix_path=`$CYGPATH -u \"$windows_path\"`\n+    new_path=\"$unix_path\"\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n+    new_path=\"$unix_path\"\n+  fi\n+\n+  if test \"x$path\" != \"x$new_path\"; then\n+    MSVC_DLL=\"$new_path\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&5\n+$as_echo \"$as_me: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&6;}\n+  fi\n+\n+  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n+  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n+\n+  else\n+    # We're on a posix platform. Hooray! :)\n+    path=\"$MSVC_DLL\"\n+    has_space=`$ECHO \"$path\" | $GREP \" \"`\n+    if test \"x$has_space\" != x; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&5\n+$as_echo \"$as_me: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n+      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n+    fi\n+\n+    # Use eval to expand a potential ~\n+    eval path=\"$path\"\n+    if test ! -f \"$path\" && test ! -d \"$path\"; then\n+      as_fn_error $? \"The path of MSVC_DLL, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n+    fi\n+\n+    MSVC_DLL=\"`cd \"$path\"; $THEPWDCMD -L`\"\n+  fi\n+\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $DLL_NAME\" >&5\n+$as_echo_n \"checking for $DLL_NAME... \" >&6; }\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $MSVC_DLL\" >&5\n+$as_echo \"$MSVC_DLL\" >&6; }\n+    else\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: incorrect, ignoring\" >&5\n+$as_echo \"incorrect, ignoring\" >&6; }\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: The file type of the located $DLL_NAME is $MSVC_DLL_FILETYPE\" >&5\n+$as_echo \"$as_me: The file type of the located $DLL_NAME is $MSVC_DLL_FILETYPE\" >&6;}\n+    fi\n+  fi\n+\n@@ -49982,0 +51036,10 @@\n+  fi\n+\n+  if test \"x$MSVC_DLL\" = x; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $DLL_NAME\" >&5\n+$as_echo_n \"checking for $DLL_NAME... \" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n+$as_echo \"no\" >&6; }\n+    as_fn_error $? \"Could not find $DLL_NAME. Please specify using --with-msvcr-dll.\" \"$LINENO\" 5\n+  fi\n+\n@@ -49983,0 +51047,147 @@\n+  fi\n+\n+\n+\n+# Check whether --with-msvcp-dll was given.\n+if test \"${with_msvcp_dll+set}\" = set; then :\n+  withval=$with_msvcp_dll;\n+fi\n+\n+\n+  if test \"x$MSVCP_NAME\" != \"x\"; then\n+    if test \"x$with_msvcp_dll\" != x; then\n+      # If given explicitely by user, do not probe. If not present, fail directly.\n+\n+  DLL_NAME=\"$MSVCP_NAME\"\n+  POSSIBLE_MSVC_DLL=\"$with_msvcp_dll\"\n+  METHOD=\"--with-msvcp-dll\"\n+  if test -n \"$POSSIBLE_MSVC_DLL\" -a -e \"$POSSIBLE_MSVC_DLL\"; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found $DLL_NAME at $POSSIBLE_MSVC_DLL using $METHOD\" >&5\n+$as_echo \"$as_me: Found $DLL_NAME at $POSSIBLE_MSVC_DLL using $METHOD\" >&6;}\n+\n+    # Need to check if the found msvcr is correct architecture\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking found $DLL_NAME architecture\" >&5\n+$as_echo_n \"checking found $DLL_NAME architecture... \" >&6; }\n+    MSVC_DLL_FILETYPE=`$FILE -b \"$POSSIBLE_MSVC_DLL\"`\n+    if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+      # The MSYS 'file' command returns \"PE32 executable for MS Windows (DLL) (GUI) Intel 80386 32-bit\"\n+      # on x32 and \"PE32+ executable for MS Windows (DLL) (GUI) Mono\/.Net assembly\" on x64 systems.\n+      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x32; then\n+        CORRECT_MSVCR_ARCH=\"PE32 executable\"\n+      else\n+        CORRECT_MSVCR_ARCH=\"PE32+ executable\"\n+      fi\n+    else\n+      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x32; then\n+        CORRECT_MSVCR_ARCH=386\n+      else\n+        CORRECT_MSVCR_ARCH=x86-64\n+      fi\n+    fi\n+    if $ECHO \"$MSVC_DLL_FILETYPE\" | $GREP \"$CORRECT_MSVCR_ARCH\" 2>&1 > \/dev\/null; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: ok\" >&5\n+$as_echo \"ok\" >&6; }\n+      MSVC_DLL=\"$POSSIBLE_MSVC_DLL\"\n+\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+\n+  # Input might be given as Windows format, start by converting to\n+  # unix format.\n+  path=\"$MSVC_DLL\"\n+  new_path=`$CYGPATH -u \"$path\"`\n+\n+  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n+  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n+  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n+  # \"foo.exe\" is OK but \"foo\" is an error.\n+  #\n+  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n+  # It is also a way to make sure we got the proper file name for the real test later on.\n+  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n+  if test \"x$test_shortpath\" = x; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&5\n+$as_echo \"$as_me: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n+    as_fn_error $? \"Cannot locate the the path of MSVC_DLL\" \"$LINENO\" 5\n+  fi\n+\n+  # Call helper function which possibly converts this using DOS-style short mode.\n+  # If so, the updated path is stored in $new_path.\n+\n+  input_path=\"$new_path\"\n+  # Check if we need to convert this using DOS-style short mode. If the path\n+  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n+  # take no chances and rewrite it.\n+  # Note: m4 eats our [], so we need to use [ and ] instead.\n+  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n+  if test \"x$has_forbidden_chars\" != x; then\n+    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n+    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n+    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n+    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n+      # Going to short mode and back again did indeed matter. Since short mode is\n+      # case insensitive, let's make it lowercase to improve readability.\n+      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+      # Now convert it back to Unix-style (cygpath)\n+      input_path=`$CYGPATH -u \"$shortmode_path\"`\n+      new_path=\"$input_path\"\n+    fi\n+  fi\n+\n+  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n+  if test \"x$test_cygdrive_prefix\" = x; then\n+    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n+    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n+      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n+      # a path prefixed by \/cygdrive for fixpath to work.\n+      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n+    fi\n+  fi\n+\n+\n+  if test \"x$path\" != \"x$new_path\"; then\n+    MSVC_DLL=\"$new_path\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&5\n+$as_echo \"$as_me: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&6;}\n+  fi\n+\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+\n+  path=\"$MSVC_DLL\"\n+  has_colon=`$ECHO $path | $GREP ^.:`\n+  new_path=\"$path\"\n+  if test \"x$has_colon\" = x; then\n+    # Not in mixed or Windows style, start by that.\n+    new_path=`cmd \/\/c echo $path`\n+  fi\n+\n+\n+  input_path=\"$new_path\"\n+  # Check if we need to convert this using DOS-style short mode. If the path\n+  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n+  # take no chances and rewrite it.\n+  # Note: m4 eats our [], so we need to use [ and ] instead.\n+  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n+  if test \"x$has_forbidden_chars\" != x; then\n+    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n+    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+  fi\n+\n+\n+  windows_path=\"$new_path\"\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+    unix_path=`$CYGPATH -u \"$windows_path\"`\n+    new_path=\"$unix_path\"\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n+    new_path=\"$unix_path\"\n+  fi\n+\n+  if test \"x$path\" != \"x$new_path\"; then\n+    MSVC_DLL=\"$new_path\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&5\n+$as_echo \"$as_me: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&6;}\n+  fi\n+\n+  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n+  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n+\n@@ -49984,0 +51195,8 @@\n+    # We're on a posix platform. Hooray! :)\n+    path=\"$MSVC_DLL\"\n+    has_space=`$ECHO \"$path\" | $GREP \" \"`\n+    if test \"x$has_space\" != x; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&5\n+$as_echo \"$as_me: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n+      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n+    fi\n@@ -49985,1 +51204,198 @@\n-  DLL_NAME=\"${MSVCR_NAME}\"\n+    # Use eval to expand a potential ~\n+    eval path=\"$path\"\n+    if test ! -f \"$path\" && test ! -d \"$path\"; then\n+      as_fn_error $? \"The path of MSVC_DLL, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n+    fi\n+\n+    MSVC_DLL=\"`cd \"$path\"; $THEPWDCMD -L`\"\n+  fi\n+\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $DLL_NAME\" >&5\n+$as_echo_n \"checking for $DLL_NAME... \" >&6; }\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $MSVC_DLL\" >&5\n+$as_echo \"$MSVC_DLL\" >&6; }\n+    else\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: incorrect, ignoring\" >&5\n+$as_echo \"incorrect, ignoring\" >&6; }\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: The file type of the located $DLL_NAME is $MSVC_DLL_FILETYPE\" >&5\n+$as_echo \"$as_me: The file type of the located $DLL_NAME is $MSVC_DLL_FILETYPE\" >&6;}\n+    fi\n+  fi\n+\n+      if test \"x$MSVC_DLL\" = x; then\n+        as_fn_error $? \"Could not find a proper $MSVCP_NAME as specified by --with-msvcp-dll\" \"$LINENO\" 5\n+      fi\n+      MSVCP_DLL=\"$MSVC_DLL\"\n+    elif test \"x$DEVKIT_MSVCP_DLL\" != x; then\n+\n+  DLL_NAME=\"$MSVCP_NAME\"\n+  POSSIBLE_MSVC_DLL=\"$DEVKIT_MSVCP_DLL\"\n+  METHOD=\"devkit\"\n+  if test -n \"$POSSIBLE_MSVC_DLL\" -a -e \"$POSSIBLE_MSVC_DLL\"; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Found $DLL_NAME at $POSSIBLE_MSVC_DLL using $METHOD\" >&5\n+$as_echo \"$as_me: Found $DLL_NAME at $POSSIBLE_MSVC_DLL using $METHOD\" >&6;}\n+\n+    # Need to check if the found msvcr is correct architecture\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking found $DLL_NAME architecture\" >&5\n+$as_echo_n \"checking found $DLL_NAME architecture... \" >&6; }\n+    MSVC_DLL_FILETYPE=`$FILE -b \"$POSSIBLE_MSVC_DLL\"`\n+    if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+      # The MSYS 'file' command returns \"PE32 executable for MS Windows (DLL) (GUI) Intel 80386 32-bit\"\n+      # on x32 and \"PE32+ executable for MS Windows (DLL) (GUI) Mono\/.Net assembly\" on x64 systems.\n+      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x32; then\n+        CORRECT_MSVCR_ARCH=\"PE32 executable\"\n+      else\n+        CORRECT_MSVCR_ARCH=\"PE32+ executable\"\n+      fi\n+    else\n+      if test \"x$OPENJDK_TARGET_CPU_BITS\" = x32; then\n+        CORRECT_MSVCR_ARCH=386\n+      else\n+        CORRECT_MSVCR_ARCH=x86-64\n+      fi\n+    fi\n+    if $ECHO \"$MSVC_DLL_FILETYPE\" | $GREP \"$CORRECT_MSVCR_ARCH\" 2>&1 > \/dev\/null; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: ok\" >&5\n+$as_echo \"ok\" >&6; }\n+      MSVC_DLL=\"$POSSIBLE_MSVC_DLL\"\n+\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+\n+  # Input might be given as Windows format, start by converting to\n+  # unix format.\n+  path=\"$MSVC_DLL\"\n+  new_path=`$CYGPATH -u \"$path\"`\n+\n+  # Cygwin tries to hide some aspects of the Windows file system, such that binaries are\n+  # named .exe but called without that suffix. Therefore, \"foo\" and \"foo.exe\" are considered\n+  # the same file, most of the time (as in \"test -f\"). But not when running cygpath -s, then\n+  # \"foo.exe\" is OK but \"foo\" is an error.\n+  #\n+  # This test is therefore slightly more accurate than \"test -f\" to check for file precense.\n+  # It is also a way to make sure we got the proper file name for the real test later on.\n+  test_shortpath=`$CYGPATH -s -m \"$new_path\" 2> \/dev\/null`\n+  if test \"x$test_shortpath\" = x; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&5\n+$as_echo \"$as_me: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n+    as_fn_error $? \"Cannot locate the the path of MSVC_DLL\" \"$LINENO\" 5\n+  fi\n+\n+  # Call helper function which possibly converts this using DOS-style short mode.\n+  # If so, the updated path is stored in $new_path.\n+\n+  input_path=\"$new_path\"\n+  # Check if we need to convert this using DOS-style short mode. If the path\n+  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n+  # take no chances and rewrite it.\n+  # Note: m4 eats our [], so we need to use [ and ] instead.\n+  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-._\/a-zA-Z0-9]`\n+  if test \"x$has_forbidden_chars\" != x; then\n+    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n+    shortmode_path=`$CYGPATH -s -m -a \"$input_path\"`\n+    path_after_shortmode=`$CYGPATH -u \"$shortmode_path\"`\n+    if test \"x$path_after_shortmode\" != \"x$input_to_shortpath\"; then\n+      # Going to short mode and back again did indeed matter. Since short mode is\n+      # case insensitive, let's make it lowercase to improve readability.\n+      shortmode_path=`$ECHO \"$shortmode_path\" | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+      # Now convert it back to Unix-style (cygpath)\n+      input_path=`$CYGPATH -u \"$shortmode_path\"`\n+      new_path=\"$input_path\"\n+    fi\n+  fi\n+\n+  test_cygdrive_prefix=`$ECHO $input_path | $GREP ^\/cygdrive\/`\n+  if test \"x$test_cygdrive_prefix\" = x; then\n+    # As a simple fix, exclude \/usr\/bin since it's not a real path.\n+    if test \"x`$ECHO $new_path | $GREP ^\/usr\/bin\/`\" = x; then\n+      # The path is in a Cygwin special directory (e.g. \/home). We need this converted to\n+      # a path prefixed by \/cygdrive for fixpath to work.\n+      new_path=\"$CYGWIN_ROOT_PATH$input_path\"\n+    fi\n+  fi\n+\n+\n+  if test \"x$path\" != \"x$new_path\"; then\n+    MSVC_DLL=\"$new_path\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&5\n+$as_echo \"$as_me: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&6;}\n+  fi\n+\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+\n+  path=\"$MSVC_DLL\"\n+  has_colon=`$ECHO $path | $GREP ^.:`\n+  new_path=\"$path\"\n+  if test \"x$has_colon\" = x; then\n+    # Not in mixed or Windows style, start by that.\n+    new_path=`cmd \/\/c echo $path`\n+  fi\n+\n+\n+  input_path=\"$new_path\"\n+  # Check if we need to convert this using DOS-style short mode. If the path\n+  # contains just simple characters, use it. Otherwise (spaces, weird characters),\n+  # take no chances and rewrite it.\n+  # Note: m4 eats our [], so we need to use [ and ] instead.\n+  has_forbidden_chars=`$ECHO \"$input_path\" | $GREP [^-_\/:a-zA-Z0-9]`\n+  if test \"x$has_forbidden_chars\" != x; then\n+    # Now convert it to mixed DOS-style, short mode (no spaces, and \/ instead of \\)\n+    new_path=`cmd \/c \"for %A in (\\\"$input_path\\\") do @echo %~sA\"|$TR \\\\\\\\\\\\\\\\ \/ | $TR 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n+  fi\n+\n+\n+  windows_path=\"$new_path\"\n+  if test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.cygwin\"; then\n+    unix_path=`$CYGPATH -u \"$windows_path\"`\n+    new_path=\"$unix_path\"\n+  elif test \"x$OPENJDK_BUILD_OS_ENV\" = \"xwindows.msys\"; then\n+    unix_path=`$ECHO \"$windows_path\" | $SED -e 's,^\\\\(.\\\\):,\/\\\\1,g' -e 's,\\\\\\\\,\/,g'`\n+    new_path=\"$unix_path\"\n+  fi\n+\n+  if test \"x$path\" != \"x$new_path\"; then\n+    MSVC_DLL=\"$new_path\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&5\n+$as_echo \"$as_me: Rewriting MSVC_DLL to \\\"$new_path\\\"\" >&6;}\n+  fi\n+\n+  # Save the first 10 bytes of this path to the storage, so fixpath can work.\n+  all_fixpath_prefixes=(\"${all_fixpath_prefixes[@]}\" \"${new_path:0:10}\")\n+\n+  else\n+    # We're on a posix platform. Hooray! :)\n+    path=\"$MSVC_DLL\"\n+    has_space=`$ECHO \"$path\" | $GREP \" \"`\n+    if test \"x$has_space\" != x; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&5\n+$as_echo \"$as_me: The path of MSVC_DLL, which resolves as \\\"$path\\\", is invalid.\" >&6;}\n+      as_fn_error $? \"Spaces are not allowed in this path.\" \"$LINENO\" 5\n+    fi\n+\n+    # Use eval to expand a potential ~\n+    eval path=\"$path\"\n+    if test ! -f \"$path\" && test ! -d \"$path\"; then\n+      as_fn_error $? \"The path of MSVC_DLL, which resolves as \\\"$path\\\", is not found.\" \"$LINENO\" 5\n+    fi\n+\n+    MSVC_DLL=\"`cd \"$path\"; $THEPWDCMD -L`\"\n+  fi\n+\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $DLL_NAME\" >&5\n+$as_echo_n \"checking for $DLL_NAME... \" >&6; }\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $MSVC_DLL\" >&5\n+$as_echo \"$MSVC_DLL\" >&6; }\n+    else\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: incorrect, ignoring\" >&5\n+$as_echo \"incorrect, ignoring\" >&6; }\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: The file type of the located $DLL_NAME is $MSVC_DLL_FILETYPE\" >&5\n+$as_echo \"$as_me: The file type of the located $DLL_NAME is $MSVC_DLL_FILETYPE\" >&6;}\n+    fi\n+  fi\n+\n+      if test \"x$MSVC_DLL\" = x; then\n+        as_fn_error $? \"Could not find a proper $MSVCP_NAME as specified by devkit\" \"$LINENO\" 5\n+      fi\n+      MSVCP_DLL=\"$MSVC_DLL\"\n+    else\n+\n+  DLL_NAME=\"${MSVCP_NAME}\"\n@@ -51033,2 +52449,2 @@\n-    MSVCR_DLL=\"$MSVC_DLL\"\n-  fi\n+      MSVCP_DLL=\"$MSVC_DLL\"\n+    fi\n@@ -51036,0 +52452,1 @@\n+  fi\n@@ -51038,3 +52455,3 @@\n-# Check whether --with-msvcp-dll was given.\n-if test \"${with_msvcp_dll+set}\" = set; then :\n-  withval=$with_msvcp_dll;\n+# Check whether --with-vcruntime-1-dll was given.\n+if test \"${with_vcruntime_1_dll+set}\" = set; then :\n+  withval=$with_vcruntime_1_dll;\n@@ -51044,3 +52461,3 @@\n-  if test \"x$MSVCP_NAME\" != \"x\"; then\n-    if test \"x$with_msvcp_dll\" != x; then\n-      # If given explicitely by user, do not probe. If not present, fail directly.\n+  if test \"x$VCRUNTIME_1_NAME\" != \"x\" && test \"x$OPENJDK_TARGET_CPU\" = xx86_64; then\n+    if test \"x$with_vcruntime_1_dll\" != x; then\n+      # If given explicitly by user, do not probe. If not present, fail directly.\n@@ -51048,3 +52465,3 @@\n-  DLL_NAME=\"$MSVCP_NAME\"\n-  POSSIBLE_MSVC_DLL=\"$with_msvcp_dll\"\n-  METHOD=\"--with-msvcp-dll\"\n+  DLL_NAME=\"$VCRUNTIME_1_NAME\"\n+  POSSIBLE_MSVC_DLL=\"$with_vcruntime_1_dll\"\n+  METHOD=\"--with-vcruntime-1-dll\"\n@@ -51213,1 +52630,1 @@\n-        as_fn_error $? \"Could not find a proper $MSVCP_NAME as specified by --with-msvcp-dll\" \"$LINENO\" 5\n+        as_fn_error $? \"Could not find a proper $VCRUNTIME_1_NAME as specified by --with-vcruntime-1-dll\" \"$LINENO\" 5\n@@ -51215,2 +52632,2 @@\n-      MSVCP_DLL=\"$MSVC_DLL\"\n-    elif test \"x$DEVKIT_MSVCP_DLL\" != x; then\n+      VCRUNTIME_1_DLL=\"$MSVC_DLL\"\n+    elif test \"x$DEVKIT_VCRUNTIME_1_DLL\" != x; then\n@@ -51218,2 +52635,2 @@\n-  DLL_NAME=\"$MSVCP_NAME\"\n-  POSSIBLE_MSVC_DLL=\"$DEVKIT_MSVCP_DLL\"\n+  DLL_NAME=\"$VCRUNTIME_1_NAME\"\n+  POSSIBLE_MSVC_DLL=\"$DEVKIT_VCRUNTIME_1_DLL\"\n@@ -51383,1 +52800,1 @@\n-        as_fn_error $? \"Could not find a proper $MSVCP_NAME as specified by devkit\" \"$LINENO\" 5\n+        as_fn_error $? \"Could not find a proper $VCRUNTIME_1_NAME as specified by devkit\" \"$LINENO\" 5\n@@ -51385,1 +52802,1 @@\n-      MSVCP_DLL=\"$MSVC_DLL\"\n+      VCRUNTIME_1_DLL=\"$MSVC_DLL\"\n@@ -51388,1 +52805,1 @@\n-  DLL_NAME=\"${MSVCP_NAME}\"\n+  DLL_NAME=\"${VCRUNTIME_1_NAME}\"\n@@ -52436,1 +53853,1 @@\n-      MSVCP_DLL=\"$MSVC_DLL\"\n+      VCRUNTIME_1_DLL=\"$MSVC_DLL\"\n","filename":"common\/autoconf\/generated-configure.sh","additions":1442,"deletions":25,"binary":false,"changes":1467,"status":"modified"},{"patch":"@@ -611,0 +611,1 @@\n+VCRUNTIME_1_DLL:=@VCRUNTIME_1_DLL@\n","filename":"common\/autoconf\/spec.gmk.in","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-VS_VERSION_INTERNAL_2019=141\n+VS_VERSION_INTERNAL_2019=142\n@@ -89,0 +89,1 @@\n+VS_VCRUNTIME_1_2019=vcruntime140_1.dll\n@@ -282,0 +283,1 @@\n+    eval VCRUNTIME_1_NAME=\"\\${VS_VCRUNTIME_1_${VS_VERSION}}\"\n@@ -328,0 +330,1 @@\n+      eval VCRUNTIME_1_NAME=\"\\${VS_VCRUNTIME_1_${VS_VERSION}}\"\n@@ -663,0 +666,25 @@\n+  AC_ARG_WITH(vcruntime-1-dll, [AS_HELP_STRING([--with-vcruntime-1-dll],\n+      [path to microsoft C++ runtime dll (vcruntime*_1.dll) (Windows only) @<:@probed@:>@])])\n+\n+  if test \"x$VCRUNTIME_1_NAME\" != \"x\" && test \"x$OPENJDK_TARGET_CPU\" = xx86_64; then\n+    if test \"x$with_vcruntime_1_dll\" != x; then\n+      # If given explicitly by user, do not probe. If not present, fail directly.\n+      TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL($VCRUNTIME_1_NAME, [$with_vcruntime_1_dll],\n+          [--with-vcruntime-1-dll])\n+      if test \"x$MSVC_DLL\" = x; then\n+        AC_MSG_ERROR([Could not find a proper $VCRUNTIME_1_NAME as specified by --with-vcruntime-1-dll])\n+      fi\n+      VCRUNTIME_1_DLL=\"$MSVC_DLL\"\n+    elif test \"x$DEVKIT_VCRUNTIME_1_DLL\" != x; then\n+      TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL($VCRUNTIME_1_NAME, [$DEVKIT_VCRUNTIME_1_DLL], [devkit])\n+      if test \"x$MSVC_DLL\" = x; then\n+        AC_MSG_ERROR([Could not find a proper $VCRUNTIME_1_NAME as specified by devkit])\n+      fi\n+      VCRUNTIME_1_DLL=\"$MSVC_DLL\"\n+    else\n+      TOOLCHAIN_SETUP_MSVC_DLL([${VCRUNTIME_1_NAME}])\n+      VCRUNTIME_1_DLL=\"$MSVC_DLL\"\n+    fi\n+    AC_SUBST(VCRUNTIME_1_DLL)\n+  fi\n+\n","filename":"common\/autoconf\/toolchain_windows.m4","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -172,0 +172,3 @@\n+!if \"$(MSC_VER)\" >= \"1920\" && \"$(MSC_VER)\" <= \"1929\"\n+COMPILER_NAME=VS2019\n+!endif\n@@ -321,0 +324,15 @@\n+!if \"$(COMPILER_NAME)\" == \"VS2019\"\n+PRODUCT_OPT_OPTION   = \/O2 \/Oy-\n+FASTDEBUG_OPT_OPTION = \/O2 \/Oy-\n+DEBUG_OPT_OPTION     = \/Od\n+GX_OPTION = \/EHsc\n+LD_FLAGS = \/manifest $(LD_FLAGS)\n+MP_FLAG = \/MP\n+# Manifest Tool - used in VS2005 and later to adjust manifests stored\n+# as resources inside build artifacts.\n+!if \"x$(MT)\" == \"x\"\n+MT=mt.exe\n+!endif\n+SAFESEH_FLAG = \/SAFESEH\n+!endif\n+\n","filename":"hotspot\/make\/windows\/makefiles\/compile.make","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+\tif \"$(MSC_VER)\" NEQ \"1920\" if \"$(MSC_VER)\" NEQ \"1921\" if \"$(MSC_VER)\" NEQ \"1922\" if \"$(MSC_VER)\" NEQ \"1923\" if \"$(MSC_VER)\" NEQ \"1924\" \\\n+\tif \"$(MSC_VER)\" NEQ \"1925\" if \"$(MSC_VER)\" NEQ \"1926\" if \"$(MSC_VER)\" NEQ \"1927\" if \"$(MSC_VER)\" NEQ \"1928\" if \"$(MSC_VER)\" NEQ \"1929\" \\\n@@ -42,0 +44,2 @@\n+\tif \"$(LD_VER)\" NEQ \"1420\" if \"$(LD_VER)\" NEQ \"1421\" if \"$(LD_VER)\" NEQ \"1422\" if \"$(LD_VER)\" NEQ \"1423\" if \"$(LD_VER)\" NEQ \"1424\" \\\n+\tif \"$(LD_VER)\" NEQ \"1425\" if \"$(LD_VER)\" NEQ \"1426\" if \"$(LD_VER)\" NEQ \"1427\" if \"$(LD_VER)\" NEQ \"1428\" if \"$(LD_VER)\" NEQ \"1429\" \\\n","filename":"hotspot\/make\/windows\/makefiles\/sanity.make","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-!if \"$(COMPILER_NAME)\" == \"VS2012\" || \"$(COMPILER_NAME)\" == \"VS2013\" || \"$(COMPILER_NAME)\" == \"VS2015\" || \"$(COMPILER_NAME)\" == \"VS2017\"\n+!if \"$(COMPILER_NAME)\" == \"VS2012\" || \"$(COMPILER_NAME)\" == \"VS2013\" || \"$(COMPILER_NAME)\" == \"VS2015\" || \"$(COMPILER_NAME)\" == \"VS2017\" || \"$(COMPILER_NAME)\" == \"VS2019\"\n","filename":"hotspot\/make\/windows\/makefiles\/vm.make","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -266,0 +266,5 @@\n+  $(eval $(call SetupCopyFiles,COPY_VCRUNTIME_1, \\\n+      DEST := $(JDK_OUTPUTDIR)\/bin, \\\n+      FILES := $(VCRUNTIME_1_DLL), \\\n+      MACRO := copy-and-chmod))\n+\n@@ -271,1 +276,1 @@\n-  COPY_FILES += $(COPY_MSVCR) $(COPY_MSVCP)\n+  COPY_FILES += $(COPY_MSVCR) $(COPY_VCRUNTIME_1) $(COPY_MSVCP)\n","filename":"jdk\/make\/CopyFiles.gmk","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -391,0 +391,3 @@\n+  ifneq ($(VCRUNTIME_1_DLL), )\n+    LIBJLI_CFLAGS += -DVCRUNTIME_1_DLL_NAME='\"$(notdir $(VCRUNTIME_1_DLL))\"'\n+  endif\n","filename":"jdk\/make\/lib\/CoreLibraries.gmk","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -289,0 +289,17 @@\n+#ifdef VCRUNTIME_1_DLL_NAME\n+        if (GetJREPath(crtpath, MAXPATHLEN)) {\n+            if (JLI_StrLen(crtpath) + JLI_StrLen(\"\\\\bin\\\\\") +\n+                    JLI_StrLen(VCRUNTIME_1_DLL_NAME) >= MAXPATHLEN) {\n+                JLI_ReportErrorMessage(JRE_ERROR11);\n+                return JNI_FALSE;\n+            }\n+            (void)JLI_StrCat(crtpath, \"\\\\bin\\\\\" VCRUNTIME_1_DLL_NAME);   \/* Add crt dll *\/\n+            JLI_TraceLauncher(\"CRT path is %s\\n\", crtpath);\n+            if (_access(crtpath, 0) == 0) {\n+                if (LoadLibrary(crtpath) == 0) {\n+                    JLI_ReportErrorMessage(DLL_ERROR4, crtpath);\n+                    return JNI_FALSE;\n+                }\n+            }\n+        }\n+#endif \/* VCRUNTIME_1_DLL_NAME *\/\n","filename":"jdk\/src\/windows\/bin\/java_md.c","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"awt.h\"\n","filename":"jdk\/src\/windows\/native\/sun\/windows\/awt_DCHolder.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"awt.h\"\n@@ -32,1 +31,0 @@\n-#include \"awt_Toolkit.h\"\n@@ -36,1 +34,0 @@\n-#include \"alloc.h\"\n@@ -38,0 +35,1 @@\n+#include \"awt_Toolkit.h\"\n","filename":"jdk\/src\/windows\/native\/sun\/windows\/awt_DnDDT.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-#include \"awt.h\"\n@@ -33,0 +32,1 @@\n+#include \"awt.h\"\n","filename":"jdk\/src\/windows\/native\/sun\/windows\/awt_ole.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-# Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-MSVC_DIR=\"Microsoft.VC141.CRT\"\n+MSVC_DIR=\"Microsoft.VC142.CRT\"\n@@ -105,0 +105,1 @@\n+VCRUNTIME_1_DLL=${MSVC_DIR}\/vcruntime${VS_DLL_VERSION}_1.dll\n@@ -191,0 +192,1 @@\n+echo-info \"DEVKIT_VCRUNTIME_1_DLL_x86_64=\\\"\\$DEVKIT_ROOT\/VC\/redist\/x64\/$VCRUNTIME_1_DLL\\\"\"\n","filename":"make\/devkit\/createWindowsDevkit2019.sh","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}