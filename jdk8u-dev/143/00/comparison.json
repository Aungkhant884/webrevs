{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2014, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,4 @@\n+import jdk.testlibrary.OutputAnalyzer;\n+import jdk.testlibrary.ProcessTools;\n+import jdk.testlibrary.Utils;\n+\n@@ -26,4 +30,1 @@\n- * @summary Check that a double agent request fails\n- *\n- * @build VMConnection DoubleAgentTest Exit0\n- * @run main DoubleAgentTest\n+ * @summary Check that multiple -agentlib statements in command line fails\n@@ -31,0 +32,4 @@\n+ * @library \/lib\/testlibrary\n+ * @build jdk.testlibrary.*\n+ * @build DoubleAgentTest Exit0\n+ * @run driver DoubleAgentTest\n@@ -32,5 +37,0 @@\n-import java.io.InputStream;\n-import java.io.IOException;\n-import java.io.File;\n-import java.net.ServerSocket;\n-import java.net.Socket;\n@@ -40,20 +40,2 @@\n-    static Object locker = new Object();\n-    static String outputText = \"\";\n-\n-    \/*\n-     * Helper class to redirect process output\/error\n-     *\/\n-    static class IOHandler implements Runnable {\n-        InputStream in;\n-\n-        IOHandler(InputStream in) {\n-            this.in = in;\n-        }\n-\n-        static Thread handle(InputStream in) {\n-            IOHandler handler = new IOHandler(in);\n-            Thread thr = new Thread(handler);\n-            thr.setDaemon(true);\n-            thr.start();\n-            return thr;\n-        }\n+    private static final String TEST_CLASSES = System.getProperty(\n+            \"test.classes\", \".\");\n@@ -61,24 +43,2 @@\n-        public void run() {\n-            try {\n-                byte b[] = new byte[100];\n-                for (;;) {\n-                    int n = in.read(b, 0, 100);\n-                    \/\/ The first thing that will get read is\n-                    \/\/    Listening for transport dt_socket at address: xxxxx\n-                    \/\/ which shows the debuggee is ready to accept connections.\n-                    synchronized(locker) {\n-                        locker.notify();\n-                    }\n-                    if (n < 0) {\n-                        break;\n-                    }\n-                    String s = new String(b, 0, n, \"UTF-8\");\n-                    System.out.print(s);\n-                    synchronized(outputText) {\n-                        outputText += s;\n-                    }\n-                }\n-            } catch (IOException ioe) {\n-                ioe.printStackTrace();\n-            }\n-        }\n+    public static void main(String[] args) throws Throwable {\n+        int port = Utils.getFreePort();\n@@ -86,8 +46,0 @@\n-    }\n-\n-    \/*\n-     * Launch a server debuggee with the given address\n-     *\/\n-    private static Process launch(String address, String class_name) throws IOException {\n-        String exe =   System.getProperty(\"java.home\")\n-                     + File.separator + \"bin\" + File.separator + \"java\";\n@@ -95,54 +47,1 @@\n-                         + \",server=y\" + \",suspend=y\" + \",address=\" + address;\n-        String cmd = exe + \" \" + VMConnection.getDebuggeeVMOptions()\n-                         + \" \" + jdwpOption\n-                         + \" \" + jdwpOption\n-                         + \" \" + class_name;\n-\n-        System.out.println(\"Starting: \" + cmd);\n-\n-        Process p = Runtime.getRuntime().exec(cmd);\n-\n-        return p;\n-    }\n-\n-    \/*\n-     * - pick a TCP port\n-     * - Launch a server debuggee that should fail\n-     * - verify we saw error\n-     *\/\n-    public static void main(String args[]) throws Exception {\n-        \/\/ find a free port\n-        ServerSocket ss = new ServerSocket(0);\n-        int port = ss.getLocalPort();\n-        ss.close();\n-\n-        String address = String.valueOf(port);\n-\n-        \/\/ launch the server debuggee\n-        Process process = launch(address, \"Exit0\");\n-        Thread t1 = IOHandler.handle(process.getInputStream());\n-        Thread t2 = IOHandler.handle(process.getErrorStream());\n-\n-        \/\/ wait for the debugge to be ready\n-        synchronized(locker) {\n-            locker.wait();\n-        }\n-\n-        int exitCode = process.waitFor();\n-        try {\n-            t1.join();\n-            t2.join();\n-        } catch ( InterruptedException e ) {\n-            e.printStackTrace();\n-            throw new Exception(\"Debuggee failed InterruptedException\");\n-        }\n-\n-        if ( outputText.contains(\"capabilities\") ) {\n-            throw new Exception(\n-                \"Debuggee failed with ERROR about capabilities: \" + outputText);\n-        }\n-\n-        if ( !outputText.contains(\"ERROR\") ) {\n-            throw new Exception(\n-                \"Debuggee does not have ERROR in the output: \" + outputText);\n-        }\n+                         + \",server=y\" + \",suspend=n\" + \",address=*:\" + String.valueOf(port);\n@@ -150,4 +49,5 @@\n-        if ( exitCode == 0 ) {\n-            throw new Exception(\n-                \"Debuggee should have failed with an non-zero exit code\");\n-        }\n+        OutputAnalyzer output = ProcessTools.executeTestJvm(\"-classpath\",\n+                TEST_CLASSES,\n+                jdwpOption, \/\/ Notice jdwpOption specified twice\n+                jdwpOption,\n+                \"Exit0\");\n@@ -155,0 +55,2 @@\n+        output.shouldContain(\"Cannot load this JVM TI agent twice\");\n+        output.shouldHaveExitValue(1);\n","filename":"jdk\/test\/com\/sun\/jdi\/DoubleAgentTest.java","additions":22,"deletions":120,"binary":false,"changes":142,"status":"modified"}]}