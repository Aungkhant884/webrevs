{"files":[{"patch":"@@ -99,1 +99,0 @@\n-\n@@ -103,0 +102,4 @@\n+                    \/\/ Prevent endless loop\n+                    if (w == 0) {\n+                        return out.size();\n+                    }\n@@ -114,1 +117,1 @@\n-                return pos;\n+                return out.size();\n","filename":"jdk\/src\/share\/classes\/jdk\/jfr\/internal\/ChunksChannel.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -685,2 +685,6 @@\n-                        cc.transferTo(fc);\n-                        fc.force(true);\n+                        long bytes = cc.transferTo(fc);\n+                        Logger.log(LogTag.JFR, LogLevel.INFO, \"Transferred \" + bytes + \" bytes from the disk repository\");\n+                        \/\/ No need to force if no data was transferred, which avoids IOException when device is \/dev\/null\n+                        if (bytes != 0) {\n+                            fc.force(true);\n+                        }\n","filename":"jdk\/src\/share\/classes\/jdk\/jfr\/internal\/PlatformRecording.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.api.recording.dump;\n+\n+import java.io.File;\n+\n+import jdk.jfr.Recording;\n+\n+\/**\n+ * @test\n+ * @summary Tests that it's possible to dump to \/dev\/null without a livelock\n+ * @key jfr\n+ *\n+ * @library \/lib \/\n+ * @run main\/othervm -Xlog:jfr jdk.jfr.api.recording.dump.TestDumpDevNull\n+ *\/\n+public class TestDumpDevNull {\n+\n+    public static void main(String[] args) throws Exception {\n+        try (Recording r1 = new Recording()) {\n+            r1.setDestination(new File(\"\/dev\/null\").toPath());\n+            r1.start();\n+            \/\/ Force a chunk rotation which ensures that jdk.jfr.internal.ChunkChannel\n+            \/\/ invokes FileChannel::transferFrom(ReadableByteChannel, position, count) twice.\n+            \/\/ FileChannel will return 0 the second time because position exceeds\n+            \/\/ FileChannel::size(), which is always 0 for \/dev\/null\n+            \/\/ Without proper handling of return value 0, the ChunkChannel will spin indefinitely.\n+            try (Recording r2 = new Recording()) {\n+                r2.start();\n+            }\n+        }\n+    }\n+}\n","filename":"jdk\/test\/jdk\/jfr\/api\/recording\/dump\/TestDumpDevNull.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}