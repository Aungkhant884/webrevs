{"files":[{"patch":"@@ -39,2 +39,2 @@\n-import jdk.test.lib.Utils;\n-import jdk.test.lib.util.FileUtils;\n+import jdk.testlibrary.Utils;\n+import jdk.testlibrary.FileUtils;\n@@ -47,1 +47,1 @@\n- * @library \/test\/lib\n+ * @library \/lib\/testlibrary\n@@ -107,1 +107,1 @@\n-            Files.writeString(cgroupsZero, cgroupsZeroHierarchy, StandardCharsets.UTF_8);\n+            Files.write(cgroupsZero, cgroupsZeroHierarchy.getBytes(StandardCharsets.UTF_8));\n@@ -111,1 +111,1 @@\n-            Files.writeString(cgroupv1MntInfoZeroHierarchy, mntInfoEmpty);\n+            Files.write(cgroupv1MntInfoZeroHierarchy, mntInfoEmpty.getBytes());\n@@ -114,1 +114,1 @@\n-            Files.writeString(cgroupv2MntInfoZeroHierarchy, mntInfoCgroupsV2Only);\n+            Files.write(cgroupv2MntInfoZeroHierarchy, mntInfoCgroupsV2Only.getBytes());\n@@ -117,1 +117,1 @@\n-            Files.writeString(cgroupv1CgInfoNonZeroHierarchy, cgroupsNonZeroHierarchy);\n+            Files.write(cgroupv1CgInfoNonZeroHierarchy, cgroupsNonZeroHierarchy.getBytes());\n@@ -120,1 +120,1 @@\n-            Files.writeString(cgroupv1MntInfoNonZeroHierarchy, mntInfoHybrid);\n+            Files.write(cgroupv1MntInfoNonZeroHierarchy, mntInfoHybrid.getBytes());\n@@ -152,1 +152,1 @@\n-        assertTrue(\"zero hierarchy ids with no mounted controllers => empty result\", result.isEmpty());\n+        assertTrue(\"zero hierarchy ids with no mounted controllers => empty result\", Optional.empty().equals(result));\n","filename":"jdk\/test\/jdk\/internal\/platform\/cgroup\/TestCgroupSubsystemFactory.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -42,0 +44,2 @@\n+import java.nio.file.attribute.FileAttribute;\n+\n@@ -443,0 +447,20 @@\n+\n+    \/**\n+     * Creates an empty directory in \"user.dir\" or \".\"\n+     * <p>\n+     * This method is meant as a replacement for {@code Files#createTempDirectory(String, String, FileAttribute...)}\n+     * that doesn't leave files behind in \/tmp directory of the test machine\n+     * <p>\n+     * If the property \"user.dir\" is not set, \".\" will be used.\n+     *\n+     * @param prefix\n+     * @param attrs\n+     * @return the path to the newly created directory\n+     * @throws IOException\n+     *\n+     * @see {@link Files#createTempDirectory(String, String, FileAttribute...)}\n+     *\/\n+    public static Path createTempDirectory(String prefix, FileAttribute<?>... attrs) throws IOException {\n+        Path dir = Paths.get(System.getProperty(\"user.dir\", \".\"));\n+        return Files.createTempDirectory(dir, prefix);\n+    }\n","filename":"jdk\/test\/lib\/testlibrary\/jdk\/testlibrary\/Utils.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"}]}