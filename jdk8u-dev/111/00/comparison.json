{"files":[{"patch":"@@ -64,1 +64,2 @@\n-    StringNullCheckMode\n+    StringNullCheckMode,\n+    NegativeIntCheckMode\n@@ -121,0 +122,1 @@\n+\n@@ -124,0 +126,5 @@\n+\n+  void push_negative_int_check(Node* value) {\n+    push(value, NegativeIntCheckMode);\n+  }\n+\n@@ -127,0 +134,1 @@\n+\n@@ -487,1 +495,2 @@\n-                  alloc->jvms()->dump_spec(tty); tty->cr();\n+                  alloc->jvms()->dump_spec(tty);\n+                  tty->cr();\n@@ -494,0 +503,21 @@\n+            } else if (sig == ciSymbol::int_void_signature()) {\n+              \/\/ StringBuilder(int) case.\n+              Node* parm = use->in(TypeFunc::Parms + 1);\n+              assert(parm != NULL, \"must exist\");\n+              const TypeInt* type = _gvn->type(parm)->is_int();\n+              if (type->_hi < 0) {\n+                \/\/ Initial capacity argument is always negative in which case StringBuilder(int) throws\n+                \/\/ a NegativeArraySizeException. Bail out from string opts.\n+#ifndef PRODUCT\n+                if (PrintOptimizeStringConcat) {\n+                  tty->print(\"giving up because a negative argument is passed to StringBuilder(int) which \"\n+                             \"throws a NegativeArraySizeException\");\n+                  alloc->jvms()->dump_spec(tty);\n+                  tty->cr();\n+                }\n+#endif\n+                return NULL;\n+              } else if (type->_lo < 0) {\n+                \/\/ Argument could be negative: We need a runtime check to throw NegativeArraySizeException in that case.\n+                sc->push_negative_int_check(parm);\n+              }\n@@ -1480,0 +1510,17 @@\n+      case StringConcat::NegativeIntCheckMode: {\n+        \/\/ Initial capacity argument might be negative in which case StringBuilder(int) throws\n+        \/\/ a NegativeArraySizeException. Insert a runtime check with an uncommon trap.\n+        const TypeInt* type = kit.gvn().type(arg)->is_int();\n+        assert(type->_hi >= 0 && type->_lo < 0, \"no runtime int check needed\");\n+        Node* p = __ Bool(__ CmpI(arg, kit.intcon(0)), BoolTest::ge);\n+        IfNode* iff = kit.create_and_map_if(kit.control(), p, PROB_MIN, COUNT_UNKNOWN);\n+        {\n+          \/\/ Negative int -> uncommon trap.\n+          PreserveJVMState pjvms(&kit);\n+          kit.set_control(__ IfFalse(iff));\n+          kit.uncommon_trap(Deoptimization::Reason_intrinsic,\n+                            Deoptimization::Action_maybe_recompile);\n+        }\n+        kit.set_control(__ IfTrue(iff));\n+        break;\n+      }\n@@ -1604,0 +1651,2 @@\n+          case StringConcat::NegativeIntCheckMode:\n+            break; \/\/ Nothing to do, was only needed to add a runtime check earlier.\n","filename":"hotspot\/src\/share\/vm\/opto\/stringopts.cpp","additions":51,"deletions":2,"binary":false,"changes":53,"status":"modified"}]}