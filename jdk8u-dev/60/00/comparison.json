{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n@@ -634,2 +634,3 @@\n-                SwingUtilities2.getSystemMnemonicKeyMask(),\n-                KeyEvent.META_MASK\n+                SwingUtilities2.getSystemMnemonicKeyMask(), KeyEvent.META_MASK,\n+                SwingUtilities2.setAltGraphMask(\n+                        SwingUtilities2.getSystemMnemonicKeyMask())\n","filename":"jdk\/src\/share\/classes\/com\/sun\/java\/swing\/plaf\/motif\/MotifLookAndFeel.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import sun.swing.SwingUtilities2;\n@@ -144,0 +145,5 @@\n+            map.put(KeyStroke.getKeyStroke(m, SwingUtilities2.setAltGraphMask\n+                            (BasicLookAndFeel.getFocusAcceleratorKeyMask()),\n+                    false),\n+                    \"pressed\");\n+\n@@ -146,0 +152,4 @@\n+            map.put(KeyStroke.getKeyStroke(m,\n+                    SwingUtilities2.setAltGraphMask\n+                            (BasicLookAndFeel.getFocusAcceleratorKeyMask()), true),\n+                    \"released\");\n","filename":"jdk\/src\/share\/classes\/javax\/swing\/plaf\/basic\/BasicButtonListener.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.awt.event.InputEvent;\n@@ -405,0 +406,4 @@\n+            inputMap.put(KeyStroke.getKeyStroke(dka,\n+                    SwingUtilities2.setAltGraphMask (\n+                            BasicLookAndFeel.getFocusAcceleratorKeyMask()),\n+                    false), \"press\");\n@@ -522,0 +527,2 @@\n+                putOnRelease(inputMap, dka, SwingUtilities2.setAltGraphMask (\n+                        BasicLookAndFeel.getFocusAcceleratorKeyMask()));\n@@ -541,0 +548,3 @@\n+                        removeOnRelease(inputMap, dka,\n+                                SwingUtilities2.setAltGraphMask (\n+                                BasicLookAndFeel.getFocusAcceleratorKeyMask()));\n@@ -557,0 +567,3 @@\n+                        putOnRelease(inputMap, dka,\n+                                SwingUtilities2.setAltGraphMask (\n+                                BasicLookAndFeel.getFocusAcceleratorKeyMask()));\n@@ -574,0 +587,3 @@\n+                            removeOnRelease(inputMap, dka,\n+                                    SwingUtilities2.setAltGraphMask (\n+                                    BasicLookAndFeel.getFocusAcceleratorKeyMask()));\n","filename":"jdk\/src\/share\/classes\/javax\/swing\/plaf\/basic\/BasicLabelUI.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1158,1 +1158,3 @@\n-                SwingUtilities2.getSystemMnemonicKeyMask()\n+                SwingUtilities2.getSystemMnemonicKeyMask(),\n+                SwingUtilities2.setAltGraphMask(\n+                        SwingUtilities2.getSystemMnemonicKeyMask())\n","filename":"jdk\/src\/share\/classes\/javax\/swing\/plaf\/basic\/BasicLookAndFeel.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -346,0 +346,1 @@\n+    @SuppressWarnings(\"deprecation\")\n@@ -362,0 +363,39 @@\n+\n+            int modifiers = accelerator.getModifiers();\n+            if (((modifiers & InputEvent.ALT_DOWN_MASK) != 0) &&\n+                    ((modifiers & InputEvent.ALT_GRAPH_DOWN_MASK) != 0)) {\n+                \/\/When both ALT and ALT_GRAPH are set, add the ALT only\n+                \/\/ modifier keystroke which is used for left ALT key.\n+                \/\/ Unsetting the ALT_GRAPH will do that as ALT is already set\n+                modifiers &= ~InputEvent.ALT_GRAPH_DOWN_MASK;\n+                modifiers &= ~InputEvent.ALT_GRAPH_MASK;\n+                KeyStroke keyStroke = KeyStroke.getKeyStroke(accelerator.getKeyCode(),\n+                        modifiers, accelerator.isOnKeyRelease());\n+                windowInputMap.put(keyStroke, \"doClick\");\n+            } else if (((modifiers & InputEvent.ALT_DOWN_MASK) != 0) && (\n+                    (modifiers & InputEvent.ALT_GRAPH_DOWN_MASK) == 0)) {\n+                \/\/When only ALT modifier is set, add the ALT + ALT_GRAPH\n+                \/\/ modifier keystroke which is used for right ALT key\n+                modifiers |= InputEvent.ALT_GRAPH_DOWN_MASK;\n+                KeyStroke keyStroke = KeyStroke.getKeyStroke(accelerator.getKeyCode(),\n+                        modifiers, accelerator.isOnKeyRelease());\n+                windowInputMap.put(keyStroke, \"doClick\");\n+            } else if ((modifiers & InputEvent.ALT_GRAPH_DOWN_MASK) != 0) {\n+                \/\/When only ALT_GRAPH is set, remove the ALT_GRAPH only\n+                \/\/ modifier and add the ALT and ALT+ALT_GRAPH modifiers\n+                \/\/ keystroke which are used for left ALT key and right ALT\n+                \/\/ respectively\n+                modifiers &= ~InputEvent.ALT_GRAPH_DOWN_MASK;\n+                modifiers &= ~InputEvent.ALT_GRAPH_MASK;\n+\n+                modifiers |= InputEvent.ALT_DOWN_MASK;\n+                KeyStroke keyStroke = KeyStroke.getKeyStroke(accelerator.getKeyCode(),\n+                        modifiers, accelerator.isOnKeyRelease());\n+                windowInputMap.put(keyStroke, \"doClick\");\n+\n+                \/\/Add ALT+ALT_GRAPH modifier which is used for right ALT key\n+                modifiers |= InputEvent.ALT_GRAPH_DOWN_MASK;\n+                keyStroke = KeyStroke.getKeyStroke(accelerator.getKeyCode(),\n+                        modifiers, accelerator.isOnKeyRelease());\n+                windowInputMap.put(keyStroke, \"doClick\");\n+            }\n","filename":"jdk\/src\/share\/classes\/javax\/swing\/plaf\/basic\/BasicMenuItemUI.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -118,1 +118,2 @@\n-            shortcutKeys = new int[] {KeyEvent.ALT_MASK};\n+            shortcutKeys = new int[] {KeyEvent.ALT_MASK,\n+                    KeyEvent.ALT_MASK | KeyEvent.ALT_GRAPH_MASK};\n","filename":"jdk\/src\/share\/classes\/javax\/swing\/plaf\/basic\/BasicMenuUI.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -550,0 +550,4 @@\n+        mnemonicInputMap.put(KeyStroke.getKeyStroke(mnemonic,\n+                SwingUtilities2.setAltGraphMask(\n+                        BasicLookAndFeel.getFocusAcceleratorKeyMask())),\n+                \"setSelectedIndex\");\n","filename":"jdk\/src\/share\/classes\/javax\/swing\/plaf\/basic\/BasicTabbedPaneUI.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import sun.swing.SwingUtilities2;\n+\n@@ -501,0 +503,4 @@\n+                    km.put(KeyStroke.getKeyStroke(accelerator,\n+                            SwingUtilities2.setAltGraphMask(\n+                            BasicLookAndFeel.getFocusAcceleratorKeyMask())),\n+                            \"requestFocus\");\n","filename":"jdk\/src\/share\/classes\/javax\/swing\/plaf\/basic\/BasicTextUI.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2031,0 +2031,9 @@\n+    \/**\n+     * Sets the InputEvent.ALT_GRAPH mask on any modifier passed to the function\n+     * @param modifier the modifier passed\n+     * @return the modifier retiurned with ALT_GRAPH flag set\n+     *\/\n+    public static int setAltGraphMask(int modifier) {\n+        return (modifier | InputEvent.ALT_GRAPH_DOWN_MASK);\n+    }\n+\n","filename":"jdk\/src\/share\/classes\/sun\/swing\/SwingUtilities2.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3502,1 +3502,2 @@\n-        BOOL altIsDown = modifiers & java_awt_event_InputEvent_ALT_DOWN_MASK;\n+        BOOL altIsDown = ((modifiers & java_awt_event_InputEvent_ALT_DOWN_MASK) ||\n+                            (modifiers & java_awt_event_InputEvent_ALT_GRAPH_DOWN_MASK));\n@@ -3505,6 +3506,0 @@\n-        \/\/ Windows treats AltGr as Ctrl+Alt\n-        if (modifiers & java_awt_event_InputEvent_ALT_GRAPH_DOWN_MASK) {\n-            altIsDown = TRUE;\n-            ctrlIsDown = TRUE;\n-        }\n-\n","filename":"jdk\/src\/windows\/native\/sun\/windows\/awt_Component.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,269 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8194873\n+ * @requires (os.family == \"Windows\")\n+ * @summary Checks that right ALT (ALT_GRAPH) key works on Swing components\n+ * @run main RightAltKeyTest\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JTabbedPane;\n+import javax.swing.JTextField;\n+import javax.swing.JLabel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.KeyStroke;\n+import javax.swing.event.MenuEvent;\n+import javax.swing.event.MenuListener;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.GridLayout;\n+import java.awt.Robot;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class RightAltKeyTest {\n+\n+    boolean action = false;\n+    JFrame frame;\n+\n+    void testJMenu() {\n+        frame = new JFrame(\"Menu Frame\");\n+        JMenuBar mb = new JMenuBar();\n+        JMenu m1 = new JMenu(\"File\");\n+        JMenuItem i1 = new JMenuItem(\"Save\");\n+        JMenuItem i2 = new JMenuItem(\"Load\");\n+\n+        m1.setMnemonic(KeyEvent.VK_F);\n+\n+        m1.addMenuListener(new MenuListener() {\n+            @Override\n+            public void menuSelected(MenuEvent e) {\n+                action = true;\n+                disposeUI();\n+            }\n+\n+            @Override\n+            public void menuDeselected(MenuEvent e) {\n+            }\n+\n+            @Override\n+            public void menuCanceled(MenuEvent e) {\n+            }\n+        });\n+\n+        frame.setJMenuBar(mb);\n+        mb.add(m1);\n+        m1.add(i1);\n+        m1.add(i2);\n+\n+        frame.setSize(200, 200);\n+        frame.setVisible(true);\n+    }\n+\n+    void testJMenuItem() {\n+        frame = new JFrame(\"Menu Frame\");\n+        JMenuBar mb = new JMenuBar();\n+        JMenu m1 = new JMenu(\"File\");\n+        JMenuItem i1 = new JMenuItem(\"Save\");\n+        i1.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,\n+                InputEvent.ALT_GRAPH_DOWN_MASK));\n+        i1.addActionListener((e) -> {\n+            action = true;\n+            disposeUI();\n+        });\n+\n+        frame.setJMenuBar(mb);\n+        mb.add(m1);\n+        m1.add(i1);\n+\n+        frame.setSize(200, 200);\n+        frame.setVisible(true);\n+    }\n+\n+    void testJOptionPane() {\n+        int selection =  JOptionPane.showConfirmDialog(null, \"Do you wish \" +\n+                \"to save file?\",\"Confirm\", JOptionPane.YES_NO_CANCEL_OPTION);\n+        \/\/Pressed Yes\n+        if (selection == 0) {\n+            action = true;\n+        }\n+    }\n+\n+    void testJTabbedPane() {\n+        frame =new JFrame();\n+        JPanel p1=new JPanel();\n+        JPanel p2=new JPanel();\n+        JTabbedPane tp=new JTabbedPane();\n+        tp.add(\"Main\",p1);\n+        tp.add(\"Visit\",p2);\n+        tp.setMnemonicAt(0, KeyEvent.VK_M);\n+        tp.setMnemonicAt(1, KeyEvent.VK_V);\n+\n+        tp.addChangeListener((e) -> {\n+            if (tp.getSelectedIndex() == 1)\n+                action = true;\n+            disposeUI();\n+        });\n+\n+        frame.add(tp);\n+        frame.setSize(200,200);\n+        frame.setVisible(true);\n+    }\n+\n+    void testJTextArea() {\n+        JTextField firstField = new JTextField(10);\n+        JTextField lastField = new JTextField(10);\n+\n+        JLabel firstLabel = new JLabel(\"First Name\", JLabel.RIGHT);\n+        firstLabel.setDisplayedMnemonic('F');\n+        firstLabel.setLabelFor(firstField);\n+\n+        JLabel lastLabel = new JLabel(\"Last Name\", JLabel.RIGHT);\n+        lastLabel.setDisplayedMnemonic('L');\n+        lastLabel.setLabelFor(lastField);\n+\n+        JPanel p = new JPanel();\n+        p.setLayout(new GridLayout(2, 2, 5, 5));\n+        p.add(firstLabel);\n+        p.add(firstField);\n+        p.add(lastLabel);\n+        p.add(lastField);\n+\n+        frame = new JFrame(\"MnemonicLabels\");\n+        lastField.addFocusListener(new FocusListener() {\n+            @Override\n+            public void focusGained(FocusEvent e) {\n+                action = true;\n+                disposeUI();\n+            }\n+\n+            @Override\n+            public void focusLost(FocusEvent e) {\n+\n+            }\n+        });\n+\n+        frame.add(p);\n+        frame.setSize(200,200);\n+        frame.setVisible(true);\n+    }\n+\n+    void test() throws Exception {\n+        UIManager.LookAndFeelInfo[] lookAndFeels = UIManager\n+                .getInstalledLookAndFeels();\n+        for (UIManager.LookAndFeelInfo lookAndFeel : lookAndFeels) {\n+            UIManager.setLookAndFeel(lookAndFeel.getClassName());\n+\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(100);\n+            robot.waitForIdle();\n+\n+            action = false;\n+            SwingUtilities.invokeLater(this::testJMenu);\n+            robot.waitForIdle();\n+            robot.keyPress(KeyEvent.VK_ALT_GRAPH);\n+            robot.keyPress(KeyEvent.VK_F);\n+            robot.keyRelease(KeyEvent.VK_F);\n+            robot.keyRelease(KeyEvent.VK_ALT_GRAPH);\n+            robot.waitForIdle();\n+            if (!action)\n+                errLog(\"JMenu\", lookAndFeel.getClassName());\n+\n+            action = false;\n+            SwingUtilities.invokeLater(this::testJMenuItem);\n+            robot.waitForIdle();\n+            robot.keyPress(KeyEvent.VK_ALT_GRAPH);\n+            robot.keyPress(KeyEvent.VK_S);\n+            robot.keyRelease(KeyEvent.VK_S);\n+            robot.keyRelease(KeyEvent.VK_ALT_GRAPH);\n+            robot.waitForIdle();\n+            if (!action)\n+                errLog(\"JMenuItem\", lookAndFeel.getClassName());\n+\n+            action = false;\n+            SwingUtilities.invokeLater(this::testJOptionPane);\n+            robot.waitForIdle();\n+            robot.keyPress(KeyEvent.VK_ALT_GRAPH);\n+            robot.keyPress(KeyEvent.VK_Y);\n+            robot.keyRelease(KeyEvent.VK_Y);\n+            robot.keyRelease(KeyEvent.VK_ALT_GRAPH);\n+            robot.waitForIdle();\n+            if (!action)\n+                errLog(\"JOptionPane\", lookAndFeel.getClassName());\n+\n+            action = false;\n+            SwingUtilities.invokeLater(this::testJTabbedPane);\n+            robot.waitForIdle();\n+            robot.keyPress(KeyEvent.VK_ALT_GRAPH);\n+            robot.keyPress(KeyEvent.VK_V);\n+            robot.keyRelease(KeyEvent.VK_V);\n+            robot.keyRelease(KeyEvent.VK_ALT_GRAPH);\n+            robot.waitForIdle();\n+            if (!action)\n+                errLog(\"JTabbedPane\", lookAndFeel.getClassName());\n+\n+            action = false;\n+            SwingUtilities.invokeLater(this::testJTextArea);\n+            robot.waitForIdle();\n+            robot.keyPress(KeyEvent.VK_ALT_GRAPH);\n+            robot.keyPress(KeyEvent.VK_L);\n+            robot.keyRelease(KeyEvent.VK_L);\n+            robot.keyRelease(KeyEvent.VK_ALT_GRAPH);\n+            robot.waitForIdle();\n+            if (!action)\n+                errLog(\"JTextArea\", lookAndFeel.getClassName());\n+        }\n+        System.out.println(\"Passed.\");\n+    }\n+\n+    void disposeUI() {\n+        frame.setVisible(false);\n+        frame.dispose();\n+    }\n+\n+    void errLog(String componentName, String lookAndFeel)\n+            throws InvocationTargetException, InterruptedException\n+    {\n+        SwingUtilities.invokeAndWait(this::disposeUI);\n+        throw new RuntimeException(\"Actions are not performed for \"+\n+                componentName + \" with \" + lookAndFeel + \" look and feel.\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        RightAltKeyTest t = new RightAltKeyTest();\n+        t.test();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/event\/RightAltKeyTest.java","additions":269,"deletions":0,"binary":false,"changes":269,"status":"added"}]}