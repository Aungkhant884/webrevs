{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,2 +122,2 @@\n-                int minKeySize = (int)info.ulMinKeySize;\n-                int maxKeySize = (int)info.ulMaxKeySize;\n+                int minKeySize = info.iMinKeySize;\n+                int maxKeySize = info.iMaxKeySize;\n@@ -125,2 +125,4 @@\n-                    minKeySize = (int)info.ulMinKeySize << 3;\n-                    maxKeySize = (int)info.ulMaxKeySize << 3;\n+                    minKeySize = Math.multiplyExact(minKeySize, 8);\n+                    if (maxKeySize != Integer.MAX_VALUE) {\n+                        maxKeySize = Math.multiplyExact(maxKeySize, 8);\n+                    }\n","filename":"jdk\/src\/share\/classes\/sun\/security\/pkcs11\/P11KeyGenerator.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,1 @@\n-    \/\/ if the value cannot be retrieved or unspecified, -1 is used.\n+    \/\/ if mechanism info is unavailable, 0\/Integer.MAX_VALUE is used\n@@ -86,2 +86,2 @@\n-        int minKeyLen = -1;\n-        int maxKeyLen = -1;\n+        int minKeyLen = 0;\n+        int maxKeyLen = Integer.MAX_VALUE;\n@@ -91,2 +91,2 @@\n-                minKeyLen = (int) mechInfo.ulMinKeySize;\n-                maxKeyLen = (int) mechInfo.ulMaxKeySize;\n+                minKeyLen = mechInfo.iMinKeySize;\n+                maxKeyLen = mechInfo.iMaxKeySize;\n@@ -104,1 +104,1 @@\n-            if ((minKeyLen == -1) || (minKeyLen < 112)) {\n+            if (minKeyLen < 112) {\n@@ -107,1 +107,1 @@\n-            if ((maxKeyLen == -1) || (maxKeyLen > 2048)) {\n+            if (maxKeyLen > 2048) {\n@@ -115,0 +115,3 @@\n+                if (maxKeyLen > 64 * 1024) {\n+                    maxKeyLen = 64 * 1024;\n+                }\n@@ -118,1 +121,1 @@\n-            if ((minKeyLen == -1) || (minKeyLen < 512)) {\n+            if (minKeyLen < 512) {\n@@ -121,5 +124,0 @@\n-            if (algorithm.equals(\"RSA\")) {\n-                if ((maxKeyLen == -1) || (maxKeyLen > 64 * 1024)) {\n-                    maxKeyLen = 64 * 1024;\n-                }\n-            }\n@@ -129,1 +127,1 @@\n-        if ((minKeyLen != -1) && (keySize < minKeyLen)) {\n+        if (keySize < minKeyLen) {\n@@ -132,1 +130,1 @@\n-        if ((maxKeyLen != -1) && (keySize > maxKeyLen)) {\n+        if (keySize > maxKeyLen) {\n@@ -236,0 +234,4 @@\n+        if (keySize <= 0) {\n+            throw new InvalidAlgorithmParameterException\n+                    (\"key size must be positive, got \" + keySize);\n+        }\n@@ -237,1 +239,1 @@\n-        if ((minKeySize != -1) && (keySize < minKeySize)) {\n+        if (keySize < minKeySize) {\n@@ -242,1 +244,1 @@\n-        if ((maxKeySize != -1) && (keySize > maxKeySize)) {\n+        if (keySize > maxKeySize) {\n@@ -275,3 +277,0 @@\n-                    \/\/ Reuse the checking in SunRsaSign provider.\n-                    \/\/ If maxKeySize is -1, then replace it with\n-                    \/\/ Integer.MAX_VALUE to indicate no limit.\n@@ -279,2 +278,1 @@\n-                        minKeySize,\n-                        (maxKeySize==-1? Integer.MAX_VALUE:maxKeySize));\n+                        minKeySize, maxKeySize);\n","filename":"jdk\/src\/share\/classes\/sun\/security\/pkcs11\/P11KeyPairGenerator.java","additions":21,"deletions":23,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -373,2 +373,3 @@\n-        int minKeySize = (int) mechInfo.ulMinKeySize;\n-        int maxKeySize = (int) mechInfo.ulMaxKeySize;\n+        int minKeySize = mechInfo.iMinKeySize;\n+        int maxKeySize = mechInfo.iMaxKeySize;\n+\n@@ -398,1 +399,1 @@\n-        if ((minKeySize != -1) && (keySize < minKeySize)) {\n+        if (keySize < minKeySize) {\n@@ -402,1 +403,1 @@\n-        if ((maxKeySize != -1) && (keySize > maxKeySize)) {\n+        if (keySize > maxKeySize) {\n","filename":"jdk\/src\/share\/classes\/sun\/security\/pkcs11\/P11Signature.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -50,1 +74,1 @@\n-\n+import java.security.ProviderException;\n@@ -77,0 +101,4 @@\n+    \/\/ the integer version of ulMinKeySize for doing the actual range\n+    \/\/ check in SunPKCS11 provider, defaults to 0\n+    public final int iMinKeySize;\n+\n@@ -85,0 +113,4 @@\n+    \/\/ the integer version of ulMaxKeySize for doing the actual range\n+    \/\/ check in SunPKCS11 provider, defaults to Integer.MAX_VALUE\n+    public final int iMaxKeySize;\n+\n@@ -97,0 +129,4 @@\n+        this.iMinKeySize = ((minKeySize < Integer.MAX_VALUE && minKeySize > 0)?\n+                (int)minKeySize : 0);\n+        this.iMaxKeySize = ((maxKeySize < Integer.MAX_VALUE && maxKeySize > 0)?\n+                (int)maxKeySize : Integer.MAX_VALUE);\n","filename":"jdk\/src\/share\/classes\/sun\/security\/pkcs11\/wrapper\/CK_MECHANISM_INFO.java","additions":37,"deletions":1,"binary":false,"changes":38,"status":"modified"}]}