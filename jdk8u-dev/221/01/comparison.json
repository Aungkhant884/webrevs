{"files":[{"patch":"@@ -45,0 +45,7 @@\n+    private static String getHostMaxMemory() throws Exception {\n+        DockerRunOptions opts = Common.newOpts(imageName);\n+        String goodMem = Common.run(opts).firstMatch(\"total physical memory: (\\\\d+)\", 1);\n+        Asserts.assertNotNull(goodMem, \"no match for 'total physical memory' in trace output\");\n+        return goodMem;\n+    }\n+\n@@ -77,1 +84,9 @@\n-            testContainerMemExceedsPhysical();\n+            testOperatingSystemMXBeanAwareness(\n+                \"100M\", Integer.toString(((int) Math.pow(2, 20)) * 100),\n+                \"200M\", Integer.toString(((int) Math.pow(2, 20)) * (200 - 100)),\n+                true \/* additional cgroup fs mounts *\/\n+            );\n+            final String hostMaxMem = getHostMaxMemory();\n+            testOperatingSystemMXBeanIgnoresMemLimitExceedingPhysicalMemory(hostMaxMem);\n+            testMetricsIgnoresMemLimitExceedingPhysicalMemory(hostMaxMem);\n+            testContainerMemExceedsPhysical(hostMaxMem);\n@@ -98,1 +113,1 @@\n-    private static void testContainerMemExceedsPhysical()\n+    private static void testContainerMemExceedsPhysical(final String hostMaxMem)\n@@ -100,1 +115,0 @@\n-\n@@ -102,11 +116,3 @@\n-\n-        DockerRunOptions opts = Common.newOpts(imageName);\n-\n-        \/\/ first run: establish physical memory in test environment and derive\n-        \/\/ a bad value one power of ten larger\n-        String goodMem = Common.run(opts).firstMatch(\"total physical memory: (\\\\d+)\", 1);\n-        Asserts.assertNotNull(goodMem, \"no match for 'total physical memory' in trace output\");\n-        String badMem = goodMem + \"0\";\n-\n-        \/\/ second run: set a container memory limit to the bad value\n-        opts = Common.newOpts(imageName)\n+        String badMem = hostMaxMem + \"0\";\n+        \/\/ set a container memory limit to the bad value\n+        DockerRunOptions opts = Common.newOpts(imageName)\n@@ -114,0 +120,1 @@\n+\n@@ -115,1 +122,1 @@\n-            .shouldMatch(\"container memory limit (ignored: \" + badMem + \"|unlimited: -1), using host value \" + goodMem);\n+            .shouldMatch(\"container memory limit (ignored: \" + badMem + \"|unlimited: -1), using host value \" + hostMaxMem);\n@@ -160,0 +167,6 @@\n+        testOperatingSystemMXBeanAwareness(memoryAllocation, expectedMemory, swapAllocation, expectedSwap, false);\n+    }\n+\n+    private static void testOperatingSystemMXBeanAwareness(String memoryAllocation, String expectedMemory,\n+            String swapAllocation, String expectedSwap, boolean addCgroupMounts) throws Exception {\n+\n@@ -167,0 +180,4 @@\n+        if (addCgroupMounts) {\n+            \/\/ Extra cgroup mount should be ignored by product code\n+            opts.addDockerOpts(\"--volume\", \"\/sys\/fs\/cgroup:\/cgroup-in:ro\");\n+        }\n@@ -190,0 +207,19 @@\n+\n+    \/\/ JDK-8292541: Ensure OperatingSystemMXBean ignores container memory limits above the host's physical memory.\n+    private static void testOperatingSystemMXBeanIgnoresMemLimitExceedingPhysicalMemory(final String hostMaxMem)\n+            throws Exception {\n+        String badMem = hostMaxMem + \"0\";\n+        testOperatingSystemMXBeanAwareness(badMem, hostMaxMem, badMem, hostMaxMem);\n+    }\n+\n+    \/\/ JDK-8292541: Ensure Metrics ignores container memory limits above the host's physical memory.\n+    private static void testMetricsIgnoresMemLimitExceedingPhysicalMemory(final String hostMaxMem)\n+            throws Exception {\n+        Common.logNewTestCase(\"Metrics ignore container memory limit exceeding physical memory\");\n+        String badMem = hostMaxMem + \"0\";\n+        DockerRunOptions opts = Common.newOpts(imageName)\n+            .addJavaOpts(\"-XshowSettings:system\")\n+            .addDockerOpts(\"--memory\", badMem);\n+\n+        DockerTestUtils.dockerRunJava(opts).shouldMatch(\"Memory Limit: Unlimited\");\n+    }\n","filename":"hotspot\/test\/runtime\/containers\/docker\/TestMemoryAwareness.java","additions":51,"deletions":15,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -282,0 +282,1 @@\n+\t\tJava_jdk_internal_platform_CgroupMetrics_getTotalMemorySize0;\n","filename":"jdk\/make\/mapfiles\/libjava\/mapfile-linux","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -124,1 +124,7 @@\n-        return subsystem.getMemoryLimit();\n+        long subsMem = subsystem.getMemoryLimit();\n+        \/\/ Catch the cgroup memory limit exceeding host physical memory.\n+        \/\/ Treat this as unlimited.\n+        if (subsMem >= getTotalMemorySize0()) {\n+            return CgroupSubsystem.LONG_RETVAL_UNLIMITED;\n+        }\n+        return subsMem;\n@@ -171,0 +177,1 @@\n+    private static native long getTotalMemorySize0();\n","filename":"jdk\/src\/linux\/classes\/jdk\/internal\/platform\/CgroupMetrics.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -301,0 +301,1 @@\n+                        case CPUSET_CTRL:\n@@ -303,21 +304,1 @@\n-                            assert info.getMountPoint() == null;\n-                            assert info.getMountRoot() == null;\n-                            info.setMountPoint(mountPath);\n-                            info.setMountRoot(mountRoot);\n-                            cgroupv1ControllerFound = true;\n-                            break;\n-                        }\n-                        case CPUSET_CTRL: {\n-                            CgroupInfo info = infos.get(controllerName);\n-                            if (info.getMountPoint() != null) {\n-                                \/\/ On some systems duplicate cpuset controllers get mounted in addition to\n-                                \/\/ the main cgroup controllers most likely under \/sys\/fs\/cgroup. In that\n-                                \/\/ case pick the one under \/sys\/fs\/cgroup and discard others.\n-                                if (!info.getMountPoint().startsWith(\"\/sys\/fs\/cgroup\")) {\n-                                    info.setMountPoint(mountPath);\n-                                    info.setMountRoot(mountRoot);\n-                                }\n-                            } else {\n-                                info.setMountPoint(mountPath);\n-                                info.setMountRoot(mountRoot);\n-                            }\n+                            setMountPoints(info, mountPath, mountRoot);\n@@ -337,4 +318,1 @@\n-                        assert info.getMountPoint() == null;\n-                        assert info.getMountRoot() == null;\n-                        info.setMountPoint(mountPath);\n-                        info.setMountRoot(mountRoot);\n+                        setMountPoints(info, mountPath, mountRoot);\n@@ -349,0 +327,16 @@\n+    private static void setMountPoints(CgroupInfo info, String mountPath, String mountRoot) {\n+        if (info.getMountPoint() != null) {\n+            \/\/ On some systems duplicate controllers get mounted in addition to\n+            \/\/ the main cgroup controllers (which are under \/sys\/fs\/cgroup). In that\n+            \/\/ case pick the main one and discard others as the limits\n+            \/\/ are associated with the ones in \/sys\/fs\/cgroup.\n+            if (!info.getMountPoint().startsWith(\"\/sys\/fs\/cgroup\")) {\n+                info.setMountPoint(mountPath);\n+                info.setMountRoot(mountRoot);\n+            }\n+        } else {\n+            info.setMountPoint(mountPath);\n+            info.setMountRoot(mountRoot);\n+        }\n+    }\n+\n","filename":"jdk\/src\/linux\/classes\/jdk\/internal\/platform\/CgroupSubsystemFactory.java","additions":19,"deletions":25,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include <unistd.h>\n@@ -36,0 +37,7 @@\n+\n+JNIEXPORT jlong JNICALL\n+Java_jdk_internal_platform_CgroupMetrics_getTotalMemorySize0\n+  (JNIEnv *env, jclass ignored)\n+{\n+    return sysconf(_SC_PHYS_PAGES) * sysconf(_SC_PAGESIZE);\n+}\n","filename":"jdk\/src\/linux\/native\/jdk\/internal\/platform\/cgroupv1\/CgroupMetrics.c","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+ * @bug 8293540\n@@ -70,2 +71,2 @@\n-    private Path cgroupv1MntInfoDoubleCpusets;\n-    private Path cgroupv1MntInfoDoubleCpusets2;\n+    private Path cgroupv1MntInfoDoubleControllers;\n+    private Path cgroupv1MntInfoDoubleControllers2;\n@@ -186,3 +187,7 @@\n-    private String mntInfoCgroupv1MoreCpusetLine = \"121 32 0:37 \/ \/cpuset rw,relatime shared:69 - cgroup none rw,cpuset\\n\";\n-    private String mntInfoCgroupsV1DoubleCpuset = mntInfoHybrid + mntInfoCgroupv1MoreCpusetLine;\n-    private String mntInfoCgroupsV1DoubleCpuset2 = mntInfoCgroupv1MoreCpusetLine + mntInfoHybrid;\n+    private String mntInfoCgroupv1MoreControllers = \"121 32 0:37 \/ \/cpuset rw,relatime shared:69 - cgroup none rw,cpuset\\n\" +\n+            \"35 30 0:31 \/ \/cgroup-in\/memory rw,nosuid,nodev,noexec,relatime shared:7 - cgroup none rw,seclabel,memory\\n\" +\n+            \"36 30 0:32 \/ \/cgroup-in\/pids rw,nosuid,nodev,noexec,relatime shared:8 - cgroup none rw,seclabel,pids\\n\" +\n+            \"40 30 0:36 \/ \/cgroup-in\/cpu,cpuacct rw,nosuid,nodev,noexec,relatime shared:12 - cgroup none rw,seclabel,cpu,cpuacct\\n\" +\n+            \"40 30 0:36 \/ \/cgroup-in\/blkio rw,nosuid,nodev,noexec,relatime shared:12 - cgroup none rw,seclabel,blkio\\n\";\n+    private String mntInfoCgroupsV1DoubleControllers = mntInfoHybrid + mntInfoCgroupv1MoreControllers;\n+    private String mntInfoCgroupsV1DoubleControllers2 = mntInfoCgroupv1MoreControllers + mntInfoHybrid;\n@@ -243,2 +248,2 @@\n-            cgroupv1MntInfoDoubleCpusets = Paths.get(existingDirectory.toString(), \"mountinfo_cgroupv1_double_cpuset\");\n-            Files.write(cgroupv1MntInfoDoubleCpusets, mntInfoCgroupsV1DoubleCpuset.getBytes());\n+            cgroupv1MntInfoDoubleControllers = Paths.get(existingDirectory.toString(), \"mountinfo_cgroupv1_double_controllers\");\n+            Files.write(cgroupv1MntInfoDoubleControllers, mntInfoCgroupsV1DoubleControllers.getBytes());\n@@ -246,2 +251,2 @@\n-            cgroupv1MntInfoDoubleCpusets2 = Paths.get(existingDirectory.toString(), \"mountinfo_cgroupv1_double_cpuset2\");\n-            Files.write(cgroupv1MntInfoDoubleCpusets2, mntInfoCgroupsV1DoubleCpuset2.getBytes());\n+            cgroupv1MntInfoDoubleControllers2 = Paths.get(existingDirectory.toString(), \"mountinfo_cgroupv1_double_controllers2\");\n+            Files.write(cgroupv1MntInfoDoubleControllers2, mntInfoCgroupsV1DoubleControllers2.getBytes());\n@@ -346,2 +351,2 @@\n-        doMultipleCpusetMountsTest(cgroupv1MntInfoDoubleCpusets);\n-        doMultipleCpusetMountsTest(cgroupv1MntInfoDoubleCpusets2);\n+        doMultipleMountsTest(cgroupv1MntInfoDoubleControllers);\n+        doMultipleMountsTest(cgroupv1MntInfoDoubleControllers2);\n@@ -350,1 +355,1 @@\n-    private void doMultipleCpusetMountsTest(Path info) throws IOException {\n+    private void doMultipleMountsTest(Path info) throws IOException {\n@@ -362,0 +367,7 @@\n+        \/\/ Ensure controllers at \/sys\/fs\/cgroup will be used\n+        String[] ctrlNames = new String[] { \"memory\", \"cpu\", \"cpuacct\", \"blkio\", \"pids\" };\n+        for (int i = 0; i < ctrlNames.length; i++) {\n+            CgroupInfo cinfo = res.getInfos().get(ctrlNames[i]);\n+            assertTrue(cinfo.getMountPoint().startsWith(\"\/sys\/fs\/cgroup\/\"));\n+            assertEquals(\"\/\", cinfo.getMountRoot());\n+        }\n","filename":"jdk\/test\/jdk\/internal\/platform\/cgroup\/TestCgroupSubsystemFactory.java","additions":24,"deletions":12,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8293540\n+ * @summary Verify that -XshowSettings:system works\n+ * @library \/lib \/\n+ * @run main\/timeout=360 TestDockerBasic\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerRunOptions;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+\n+public class TestDockerBasic {\n+    private static final String imageName = Common.imageName(\"javaDockerBasic\");\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!DockerTestUtils.canTestDocker()) {\n+            return;\n+        }\n+\n+        DockerTestUtils.buildJdkDockerImage(imageName, \"Dockerfile-BasicTest\", \"jdk-docker\");\n+\n+        try {\n+            testXshowSettingsSystem(true);\n+            testXshowSettingsSystem(false);\n+        } finally {\n+            DockerTestUtils.removeDockerImage(imageName);\n+        }\n+    }\n+\n+    private static void testXshowSettingsSystem(boolean addCgroupMounts) throws Exception {\n+        String testMsg = (addCgroupMounts ? \" with \" : \" without \") + \" additional cgroup FS mounts in \/cgroup-in\";\n+        Common.logNewTestCase(\"Test TestDockerBasic \" + testMsg);\n+        DockerRunOptions opts =\n+                new DockerRunOptions(imageName, \"\/jdk\/bin\/java\", \"-version\");\n+        opts.addJavaOpts(\"-esa\");\n+        opts.addJavaOpts(\"-XshowSettings:system\");\n+        opts.addDockerOpts(\"--memory\", \"300m\");\n+        if (addCgroupMounts) {\n+            \/\/ Extra cgroup mount should be ignored by product code\n+            opts.addDockerOpts(\"--volume\", \"\/sys\/fs\/cgroup:\/cgroup-in:ro\");\n+        }\n+        DockerTestUtils.dockerRunJava(opts).shouldHaveExitValue(0)\n+            .shouldNotContain(\"AssertionError\")\n+            .shouldContain(\"Memory Limit: 300.00M\");\n+    }\n+}\n","filename":"jdk\/test\/jdk\/internal\/platform\/docker\/TestDockerBasic.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -65,0 +65,1 @@\n+            testCpuSet(\"0\", true \/* additional cgroup fs mount *\/);\n@@ -70,0 +71,1 @@\n+            testCpuQuota(200 * 1000, 100 * 1000, true \/* additional cgroup fs mount *\/);\n@@ -108,0 +110,4 @@\n+        testCpuSet(value, false);\n+    }\n+\n+    private static void testCpuSet(String value, boolean addCgroupMount) throws Exception {\n@@ -112,0 +118,4 @@\n+        if (addCgroupMount) {\n+            \/\/ Extra cgroup mount should be ignored by product code\n+            opts.addDockerOpts(\"--volume\", \"\/sys\/fs\/cgroup:\/cgroup-in:ro\");\n+        }\n@@ -119,0 +129,4 @@\n+        testCpuQuota(quota, period, false);\n+    }\n+\n+    private static void testCpuQuota(long quota, long period, boolean addCgroupMount) throws Exception {\n@@ -123,0 +137,4 @@\n+        if (addCgroupMount) {\n+            \/\/ Extra cgroup mount should be ignored by product code\n+            opts.addDockerOpts(\"--volume\", \"\/sys\/fs\/cgroup:\/cgroup-in:ro\");\n+        }\n","filename":"jdk\/test\/jdk\/internal\/platform\/docker\/TestDockerCpuMetrics.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -56,0 +56,2 @@\n+            \/\/ Memory limit test with additional cgroup fs mounted\n+            testMemoryLimit(\"500m\", true \/* cgroup fs mount *\/);\n@@ -89,0 +91,4 @@\n+        testMemoryLimit(value, false);\n+    }\n+\n+    private static void testMemoryLimit(String value, boolean addCgroupMount) throws Exception {\n@@ -96,0 +102,4 @@\n+        if (addCgroupMount) {\n+            \/\/ Extra cgroup mount should be ignored by product code\n+            opts.addDockerOpts(\"--volume\", \"\/sys\/fs\/cgroup:\/cgroup-in:ro\");\n+        }\n","filename":"jdk\/test\/jdk\/internal\/platform\/docker\/TestDockerMemoryMetrics.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}