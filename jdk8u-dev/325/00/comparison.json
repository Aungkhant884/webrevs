{"files":[{"patch":"@@ -2128,1 +2128,1 @@\n-                    root = replacement;\n+                    (root = replacement).red = false;\n","filename":"jdk\/src\/share\/classes\/java\/util\/HashMap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,175 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8205399\n+ * @summary Check for AssertionError from HashMap TreeBin after Iterator.remove\n+ * @run testng\/othervm -esa TreeBinAssert\n+ *\/\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.testng.annotations.BeforeTest;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.Iterator;\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+\n+public class TreeBinAssert {\n+    private static final int ITR_RM = -1; \/\/ Remove an item via Iterator\n+    private static final int BIN352442_SIZE = 524288;\n+    private static final int BIN552165_SIZE = 1048576;\n+\n+    @DataProvider(name = \"SizeAndHashes\")\n+    public Object[][] sizeAndHashes() {\n+        return new Object[][] {\n+            {   \/\/ Bin 352442\n+                BIN352442_SIZE,\n+                new int[] {\n+                    2020958394,\n+                    631595194,\n+                    1984782522,\n+                    419782842,\n+                    285565114,\n+                    1432182970,\n+                    841310394,\n+                    320692410,\n+                    303390906,\n+                    ITR_RM,\n+                    ITR_RM,\n+                    ITR_RM,\n+                    ITR_RM,\n+                    ITR_RM,\n+                    ITR_RM,\n+                    ITR_RM,\n+                    ITR_RM,\n+                    519397562,\n+                    ITR_RM,\n+                    626352314,\n+                    101540026\n+                }\n+            },{ \/\/ Bin 552165\n+                BIN552165_SIZE,\n+                new int[] {\n+                    790129893,\n+                    1214803173,\n+                    1212706021,\n+                    608726245,\n+                    2073586917,\n+                    1433955557,\n+                    692612325,\n+                    370699493,\n+                    2061004005,\n+                    48786661,\n+                    ITR_RM,\n+                    ITR_RM,\n+                    1418226917,\n+                    ITR_RM,\n+                    ITR_RM,\n+                    ITR_RM,\n+                    ITR_RM,\n+                    ITR_RM,\n+                    ITR_RM,\n+                    ITR_RM,\n+                    1487432933,\n+                    ITR_RM,\n+                    ITR_RM,\n+                    1880648933,\n+                    338193637\n+                }\n+            }\n+        };\n+    }\n+\n+    @BeforeTest\n+    public void checkAssertionStatus() {\n+        if (!HashMap.class.desiredAssertionStatus()) {\n+            System.out.println(\"*** Superficial test run.  Test should be run with -esa ***\\n\");\n+            return;\n+        }\n+    }\n+\n+    @Test(dataProvider = \"SizeAndHashes\")\n+    public void testMap(int size, int[] hashes) {\n+        Map<Key,Integer> map = new HashMap<>(size);\n+\n+        doTest(map, hashes,\n+               (c,k) -> { ((Map<Key,Integer>)c).put(k,0); },\n+               (c)   -> { return ((Map<Key,Integer>)c).keySet().iterator(); }\n+        );\n+    }\n+\n+    @Test(dataProvider = \"SizeAndHashes\")\n+    public void testSet(int size, int[] hashes) {\n+        Set<Key> set = new LinkedHashSet<>(size);\n+\n+        doTest(set, hashes,\n+               (c,k) -> { ((Set<Key>)c).add(k); },\n+               (c)   -> { return ((Set<Key>)c).iterator(); }\n+        );\n+    }\n+\n+    private void doTest(Object collection, int[] hashes,\n+                        BiConsumer<Object,Key> addKey,\n+                        Function<Object,Iterator<Key>> mkItr) {\n+        Iterator<Key> itr = null; \/\/ saved iterator, used for removals\n+        for (int h : hashes) {\n+            if (h == ITR_RM) {\n+                if (itr == null) {\n+                    itr = mkItr.apply(collection);\n+                }\n+                itr.next();\n+                itr.remove();\n+            } else {\n+                itr = null;\n+                addKey.accept(collection, new Key(h));\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Class that will have specified hash code in a HashMap.\n+     *\/\n+    static class Key implements Comparable<Key> {\n+        final int hash;\n+\n+        public Key(int desiredHash) {\n+            \/\/ Account for processing done by HashMap\n+            this.hash = desiredHash ^ (desiredHash >>> 16);\n+        }\n+\n+        @Override public int hashCode() { return this.hash; }\n+\n+        @Override public boolean equals(Object o) {\n+            return o.hashCode() == this.hashCode();\n+        }\n+\n+        @Override public int compareTo(Key k) {\n+            return Integer.compare(this.hash, k.hash);\n+        }\n+    }\n+}\n","filename":"jdk\/test\/java\/util\/HashMap\/TreeBinAssert.java","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"}]}