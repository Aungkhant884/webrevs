{"files":[{"patch":"@@ -0,0 +1,201 @@\n+\/*\n+ * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 7124218\n+ * @summary verifies different behaviour of SPACE and ENTER in JTable\n+ * @library ..\/..\/regtesthelpers\n+ * @build Util\n+ * @run main SelectEditTableCell\n+ *\/\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import javax.swing.DefaultListSelectionModel;\n+import javax.swing.JFrame;\n+import javax.swing.JTable;\n+import javax.swing.LookAndFeel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+public class SelectEditTableCell {\n+\n+    private static JFrame frame;\n+    private static JTable table;\n+    private static Robot robot;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.delay(2000);\n+        UIManager.LookAndFeelInfo[] lookAndFeelArray\n+                = UIManager.getInstalledLookAndFeels();\n+        for (UIManager.LookAndFeelInfo lookAndFeelItem : lookAndFeelArray) {\n+            executeCase(lookAndFeelItem.getClassName());\n+        }\n+\n+    }\n+\n+    private static void executeCase(String lookAndFeelString) throws Exception {\n+        if (tryLookAndFeel(lookAndFeelString)) {\n+            createUI(lookAndFeelString);\n+            robot.delay(2000);\n+            runTestCase();\n+            robot.delay(2000);\n+            cleanUp();\n+            robot.delay(2000);\n+        }\n+\n+    }\n+\n+    private static void createUI(final String lookAndFeelString)\n+            throws Exception {\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                String[][] data = {{\"Foo\"}};\n+                String[] cols = {\"One\"};\n+                table = new JTable(data, cols);\n+                table.setSelectionMode(\n+                        DefaultListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\n+                frame = new JFrame(lookAndFeelString);\n+                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+                frame.getContentPane().add(table);\n+                frame.pack();\n+                frame.setSize(500, frame.getSize().height);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+                frame.toFront();\n+            }\n+        });\n+    }\n+\n+    private static void runTestCase() throws Exception {\n+        Point centerPoint;\n+        centerPoint = Util.getCenterPoint(table);\n+        LookAndFeel lookAndFeel = UIManager.getLookAndFeel();\n+        robot.mouseMove(centerPoint.x, centerPoint.y);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                table.clearSelection();\n+                if (table.isEditing() || table.isCellSelected(0, 0)) {\n+                    \/\/ assumption is bad, bail\n+                    frame.dispose();\n+                    throw new AssertionError(\"Failed assumption: assumed no\"\n+                            + \"editing and no selection.\");\n+                }\n+            }\n+        });\n+        robot.waitForIdle();\n+        int fetchKeyCode;\n+        keyTap(fetchKeyCode = isMac(lookAndFeel)\n+                ? KeyEvent.VK_ENTER : KeyEvent.VK_SPACE);\n+        final int keyCode = fetchKeyCode;\n+        robot.waitForIdle();\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                if (!table.isCellSelected(0, 0)) {\n+                    frame.dispose();\n+                    throw new RuntimeException(((keyCode == KeyEvent.VK_ENTER)\n+                            ? \"Enter\" : \"Space\")\n+                            + \" should select cell\");\n+                }\n+            }\n+        });\n+        robot.waitForIdle();\n+        keyTap(KeyEvent.VK_SPACE);\n+        robot.waitForIdle();\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                if (!table.isEditing()) {\n+                    frame.dispose();\n+                    throw new RuntimeException(\"Space should start editing\");\n+                }\n+                table.getCellEditor().cancelCellEditing();\n+                table.clearSelection();\n+                if (table.isEditing() || table.isCellSelected(0, 0)) {\n+                    \/\/ assumption is bad, bail\n+                    frame.dispose();\n+                    throw new AssertionError(\"Failed assumption: assumed no \"\n+                            + \"editing and no selection.\");\n+                }\n+            }\n+        });\n+        robot.waitForIdle();\n+        \/\/ hitting a letter key will start editing\n+        keyTap(KeyEvent.VK_A);\n+        keyTap(KeyEvent.VK_SPACE);\n+        keyTap(KeyEvent.VK_A);\n+        robot.waitForIdle();\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                if (table.isCellSelected(0, 0)) {\n+                    frame.dispose();\n+                    throw new RuntimeException(\"Space should not select when \"\n+                            + \"already editing.\");\n+                }\n+            }\n+        });\n+    }\n+\n+    private static void cleanUp() throws Exception {\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                frame.dispose();\n+            }\n+        });\n+    }\n+\n+    private static boolean isMac(LookAndFeel lookAndFeel) {\n+\n+        return lookAndFeel.toString().toLowerCase().contains(\"mac\");\n+    }\n+\n+    private static void keyTap(int keyCode) {\n+        robot.keyPress(keyCode);\n+        robot.keyRelease(keyCode);\n+    }\n+\n+    private static boolean tryLookAndFeel(String lookAndFeelString)\n+            throws Exception {\n+        try {\n+            UIManager.setLookAndFeel(\n+                    lookAndFeelString);\n+\n+        } catch (UnsupportedLookAndFeelException\n+                | ClassNotFoundException\n+                | InstantiationException\n+                | IllegalAccessException e) {\n+            return false;\n+        }\n+        return true;\n+    }\n+}\n","filename":"jdk\/test\/javax\/swing\/JTable\/7124218\/SelectEditTableCell.java","additions":201,"deletions":0,"binary":false,"changes":201,"status":"added"}]}