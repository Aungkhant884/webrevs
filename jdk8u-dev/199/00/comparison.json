{"files":[{"patch":"@@ -0,0 +1,271 @@\n+\/*\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4975116 7040022 8023577 8025447 8286624\n+ * @key headful\n+ * @summary verify the rounding of negative coordinates in Shape objects\n+ * @run main\/othervm CoordinateTruncationBug\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.Canvas;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Robot;\n+import java.awt.Rectangle;\n+import java.awt.Point;\n+import java.awt.Dimension;\n+import java.awt.Color;\n+import java.awt.AWTException;\n+import java.awt.geom.Line2D;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.VolatileImage;\n+\n+public class CoordinateTruncationBug {\n+    static boolean failure;\n+    static boolean verbose;\n+\n+    static final int W = 80;\n+    static final int H = 80;\n+\n+    static final Line2D vertline = new Line2D.Float(-0.7f, 0f, -0.7f, H);\n+    static final Line2D horizline = new Line2D.Float(0f, -0.7f, W, -0.7f);\n+\n+    public static void main(String argv[]) {\n+        verbose = (argv.length > 0);\n+        new Screen().test();\n+        new BufImg().test();\n+        new VolImg().test();\n+        if (failure) {\n+            throw new RuntimeException(\"Test failed due to 1 or more failures\");\n+        }\n+    }\n+\n+    public static abstract class Test {\n+        public abstract String getName();\n+        public abstract void makeDest();\n+        public abstract void runTest();\n+        public abstract void dispose();\n+        public abstract BufferedImage getSnapshot();\n+\n+        public void test() {\n+            makeDest();\n+            runTest();\n+            dispose();\n+        }\n+\n+        public void runTest(Graphics2D g2d) {\n+            g2d.setColor(Color.white);\n+            g2d.fillRect(0, 0, W, H);\n+\n+            if (!checkAllWhite()) {\n+                System.err.println(\"Aborting test of \"+getName()+\n+                                   \" due to readback failure!\");\n+                return;\n+            }\n+\n+            g2d.setColor(Color.red);\n+            g2d.draw(vertline);\n+            g2d.draw(horizline);\n+            if (!checkAllWhite()) {\n+                System.err.println(getName()+\" failed!\");\n+                failure = true;\n+            }\n+        }\n+\n+        public boolean checkAllWhite() {\n+            BufferedImage bimg = getSnapshot();\n+            if (bimg == null) {\n+                System.err.println(getName()+\" returned null snapshot!\");\n+                return false;\n+            }\n+            boolean ret = true;\n+            for (int y = 0; y < H; y++) {\n+                for (int x = 0; x < W; x++) {\n+                    int rgb = bimg.getRGB(x, y);\n+                    if (rgb != -1) {\n+                        System.err.println(getName()+\"(\"+x+\", \"+y+\") == \"+\n+                                           Integer.toHexString(rgb));\n+                        if (verbose) {\n+                            ret = false;\n+                        } else {\n+                            return false;\n+                        }\n+                    }\n+                }\n+            }\n+            return ret;\n+        }\n+    }\n+\n+    public static class Screen extends Test {\n+        Frame frame;\n+        TestCanvas canvas;\n+\n+        public String getName() {\n+            return \"Screen\";\n+        }\n+\n+        public void makeDest() {\n+            frame = new Frame(\"Screen test\");\n+            frame.setUndecorated(true);\n+            canvas = new TestCanvas(this);\n+            frame.add(canvas);\n+            frame.pack();\n+            frame.setLocationRelativeTo(null);\n+        }\n+\n+        public void runTest() {\n+            frame.show();\n+            canvas.waitForTest();\n+        }\n+\n+        public Graphics2D createGraphics() {\n+            return null;\n+        }\n+\n+        public BufferedImage getSnapshot() {\n+            \/\/ bypass window animation\n+            try {\n+                Thread.sleep(500);\n+            } catch (InterruptedException e) {\n+            };\n+\n+            try {\n+                Robot r = new Robot();\n+                Point p = canvas.getLocationOnScreen();\n+                return r.createScreenCapture(new Rectangle(p.x, p.y, W, H));\n+            } catch (AWTException e) {\n+                return null;\n+            }\n+        }\n+\n+        public void dispose() {\n+            frame.hide();\n+            frame.dispose();\n+        }\n+\n+        public static class TestCanvas extends Canvas {\n+            Test test;\n+            boolean done;\n+\n+            public TestCanvas(Test test) {\n+                this.test = test;\n+            }\n+\n+            public Dimension getPreferredSize() {\n+                return new Dimension(W, H);\n+            }\n+\n+            public synchronized void waitForTest() {\n+                while (!done) {\n+                    try {\n+                        wait();\n+                    } catch (InterruptedException e) {\n+                        System.err.println(getName()+\" interrupted!\");\n+                        failure = true;\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            public void paint(Graphics g) {\n+                if (!done) {\n+                    test.runTest((Graphics2D) g);\n+                    notifyDone();\n+                }\n+            }\n+\n+            public synchronized void notifyDone() {\n+                done = true;\n+                notifyAll();\n+            }\n+        }\n+    }\n+\n+    public abstract static class Standalone extends Test {\n+        public abstract Graphics2D createGraphics();\n+\n+        public void runTest() {\n+            Graphics2D g2d = createGraphics();\n+            runTest(g2d);\n+            g2d.dispose();\n+        }\n+    }\n+\n+    public static class BufImg extends Standalone {\n+        public BufferedImage bimg;\n+\n+        public String getName() {\n+            return \"BufferedImage\";\n+        }\n+\n+        public void makeDest() {\n+            bimg = new BufferedImage(W, H, BufferedImage.TYPE_INT_RGB);\n+        }\n+\n+        public Graphics2D createGraphics() {\n+            return bimg.createGraphics();\n+        }\n+\n+        public BufferedImage getSnapshot() {\n+            return bimg;\n+        }\n+\n+        public void dispose() {\n+        }\n+    }\n+\n+    public static class VolImg extends Standalone {\n+        Frame frame;\n+        VolatileImage vimg;\n+\n+        public String getName() {\n+            return \"VolatileImage\";\n+        }\n+\n+        public void makeDest() {\n+            frame = new Frame();\n+            frame.setSize(W, H);\n+            frame.setLocationRelativeTo(null);\n+            frame.show();\n+            vimg = frame.createVolatileImage(W, H);\n+        }\n+\n+        public Graphics2D createGraphics() {\n+            return vimg.createGraphics();\n+        }\n+\n+        public BufferedImage getSnapshot() {\n+            return vimg.getSnapshot();\n+        }\n+\n+        public void dispose() {\n+            vimg.flush();\n+            frame.hide();\n+            frame.dispose();\n+        }\n+    }\n+}\n","filename":"jdk\/test\/sun\/java2d\/SunGraphics2D\/CoordinateTruncationBug.java","additions":271,"deletions":0,"binary":false,"changes":271,"status":"added"}]}