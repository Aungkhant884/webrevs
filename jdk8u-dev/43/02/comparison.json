{"files":[{"patch":"@@ -1983,0 +1983,3 @@\n+      case T_METADATA:\n+        imm = (intptr_t)(opr2->as_constant_ptr()->as_metadata());\n+        break;\n","filename":"hotspot\/src\/cpu\/aarch64\/vm\/c1_LIRAssembler_aarch64.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1684,0 +1684,12 @@\n+        case T_METADATA:\n+          \/\/ We only need, for now, comparison with NULL for metadata.\n+          { assert(condition == lir_cond_equal || condition == lir_cond_notEqual, \"oops\");\n+            Metadata* m = opr2->as_constant_ptr()->as_metadata();\n+            if (m == NULL) {\n+              __ cmp(opr1->as_register(), 0);\n+            } else {\n+              ShouldNotReachHere();\n+            }\n+          }\n+          break;\n+\n","filename":"hotspot\/src\/cpu\/sparc\/vm\/c1_LIRAssembler_sparc.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2721,0 +2721,9 @@\n+      } else if (c->type() == T_METADATA) {\n+        \/\/ All we need for now is a comparison with NULL for equality.\n+        assert(condition == lir_cond_equal || condition == lir_cond_notEqual, \"oops\");\n+        Metadata* m = c->as_metadata();\n+        if (m == NULL) {\n+          __ cmpptr(reg1, (int32_t)0);\n+        } else {\n+          ShouldNotReachHere();\n+        }\n","filename":"hotspot\/src\/cpu\/x86\/vm\/c1_LIRAssembler_x86.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1308,1 +1308,1 @@\n-  __ cmp(lir_cond_notEqual, temp, LIR_OprFact::intConst(0));\n+  __ cmp(lir_cond_notEqual, temp, LIR_OprFact::metadataConst(0));\n","filename":"hotspot\/src\/share\/vm\/c1\/c1_LIRGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @bug 8233019\n@@ -30,1 +31,2 @@\n- * @run main\/othervm -ea -Diters=30000 -XX:TieredStopAtLevel=1 TestIsPrimitive\n+ * @run main\/othervm -ea -Diters=30000 -XX:-UseSharedSpaces\n+                                       -XX:TieredStopAtLevel=1 TestIsPrimitive\n@@ -51,0 +53,1 @@\n+        testOK(false, InlineConstants::testBooleanArray);\n@@ -62,0 +65,1 @@\n+        testOK(false, StaticConstants::testBooleanArray);\n@@ -74,0 +78,1 @@\n+        testOK(false, NoConstants::testBooleanArray);\n@@ -110,0 +115,1 @@\n+    static volatile Class<?> classBooleanArray = boolean[].class;\n@@ -122,0 +128,1 @@\n+    static final Class<?> staticClassBooleanArray = boolean[].class;\n@@ -134,0 +141,1 @@\n+        static boolean testBooleanArray() { return boolean[].class.isPrimitive(); }\n@@ -148,0 +156,1 @@\n+        static boolean testBooleanArray() { return staticClassBooleanArray.isPrimitive(); }\n@@ -162,0 +171,1 @@\n+        static boolean testBooleanArray() { return classBooleanArray.isPrimitive(); }\n","filename":"hotspot\/test\/compiler\/intrinsics\/klass\/TestIsPrimitive.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"}]}