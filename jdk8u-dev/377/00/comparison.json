{"files":[{"patch":"@@ -88,1 +88,1 @@\n-    private XWindowPeer curRealTransientFor;\n+    private XBaseWindow curRealTransientFor;\n@@ -1055,3 +1055,3 @@\n-                             alwaysOnTop ?\n-                             XLayerProtocol.LAYER_ALWAYS_ON_TOP :\n-                             XLayerProtocol.LAYER_NORMAL);\n+                alwaysOnTop ?\n+                        XLayerProtocol.LAYER_ALWAYS_ON_TOP :\n+                        XLayerProtocol.LAYER_NORMAL);\n@@ -1062,0 +1062,10 @@\n+        if (ownerPeer != null) {\n+            XToolkit.awtLock();\n+            try {\n+                restoreTransientFor(this);\n+                applyWindowType();\n+            }\n+            finally {\n+                XToolkit.awtUnlock();\n+            }\n+        }\n@@ -1105,0 +1115,1 @@\n+        boolean refreshChildsTransientFor = isVisible() != vis;\n@@ -1106,0 +1117,19 @@\n+        if (refreshChildsTransientFor) {\n+            for (Window child : ((Window) target).getOwnedWindows()) {\n+                XToolkit.awtLock();\n+                try {\n+                    if(!child.isLightweight() && child.isVisible()) {\n+                        ComponentPeer childPeer = AWTAccessor.\n+                                getComponentAccessor().getPeer(child);\n+                        if(childPeer instanceof XWindowPeer) {\n+                            XWindowPeer windowPeer = (XWindowPeer) childPeer;\n+                            restoreTransientFor(windowPeer);\n+                            windowPeer.applyWindowType();\n+                        }\n+                    }\n+                }\n+                finally {\n+                    XToolkit.awtUnlock();\n+                }\n+            }\n+        }\n@@ -1634,3 +1664,0 @@\n-        if (window.curRealTransientFor == transientForWindow) {\n-            return;\n-        }\n@@ -1648,1 +1675,3 @@\n-        while (!XlibUtil.isToplevelWindow(tpw) && !XlibUtil.isXAWTToplevelWindow(tpw)) {\n+        XBaseWindow parent = transientForWindow;\n+        while (tpw != 0 && ((!XlibUtil.isToplevelWindow(tpw) &&\n+                !XlibUtil.isXAWTToplevelWindow(tpw)) || !parent.isVisible())) {\n@@ -1650,0 +1679,1 @@\n+            parent = XToolkit.windowToXWindow(tpw);\n@@ -1652,1 +1682,0 @@\n-        XBaseWindow parent = transientForWindow;\n@@ -1662,1 +1691,1 @@\n-        window.curRealTransientFor = transientForWindow;\n+        window.curRealTransientFor = parent;\n@@ -1956,1 +1985,1 @@\n-                typeAtom = (ownerPeer == null) ?\n+                typeAtom = curRealTransientFor == null ?\n","filename":"jdk\/src\/solaris\/classes\/sun\/awt\/X11\/XWindowPeer.java","additions":40,"deletions":11,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -0,0 +1,160 @@\n+\/*\n+ * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test @summary setAlwaysOnTop doesn't behave correctly in Linux\/Solaris under\n+ *                certain scenarios\n+ * @bug 8021961\n+ * @author Semyon Sadetsky\n+ * @run main ChildAlwaysOnTopTest\n+ *\/\n+\n+import javax.swing.*;\n+import java.awt.*;\n+\n+public class ChildAlwaysOnTopTest {\n+\n+    private static Window win1;\n+    private static Window win2;\n+    private static Point point;\n+\n+    public static void main(String[] args) throws Exception {\n+        if( Toolkit.getDefaultToolkit().isAlwaysOnTopSupported() ) {\n+\n+\n+            test(null);\n+\n+            Window f = new Frame();\n+            f.setBackground(Color.darkGray);\n+            f.setSize(500, 500);\n+            try {\n+                test(f);\n+            } finally {\n+                f.dispose();\n+            }\n+\n+            f = new Frame();\n+            f.setBackground(Color.darkGray);\n+            f.setSize(500, 500);\n+            f.setVisible(true);\n+            f = new Dialog((Frame)f);\n+            try {\n+                test(f);\n+            } finally {\n+                ((Frame)f.getParent()).dispose();\n+            }\n+        }\n+        System.out.println(\"ok\");\n+    }\n+\n+    public static void test(Window parent) throws Exception {\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                win1 = parent == null ? new JDialog() : new JDialog(parent);\n+                win1.setName(\"top\");\n+                win2 = parent == null ? new JDialog() : new JDialog(parent);\n+                win2.setName(\"behind\");\n+                win1.setSize(200, 200);\n+                Panel panel = new Panel();\n+                panel.setBackground(Color.GREEN);\n+                win1.add(panel);\n+                panel = new Panel();\n+                panel.setBackground(Color.RED);\n+                win2.add(panel);\n+                win1.setAlwaysOnTop(true);\n+                win2.setAlwaysOnTop(false);\n+                win1.setVisible(true);\n+            }\n+        });\n+\n+        Robot robot = new Robot();\n+        robot.delay(200);\n+        robot.waitForIdle();\n+\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                point = win1.getLocationOnScreen();\n+                win2.setBounds(win1.getBounds());\n+                win2.setVisible(true);\n+            }\n+        });\n+\n+        robot.delay(200);\n+        robot.waitForIdle();\n+\n+        Color color = robot.getPixelColor(point.x + 100, point.y + 100);\n+        if(!color.equals(Color.GREEN)) {\n+            win1.dispose();\n+            win2.dispose();\n+            throw new RuntimeException(\"alawaysOnTop window is sent back by \" +\n+                    \"another child window setVisible(). \" + color);\n+        }\n+\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                win2.toFront();\n+                if (parent != null) {\n+                    parent.setLocation(win1.getLocation());\n+                    parent.toFront();\n+                }\n+            }\n+        });\n+\n+        robot.delay(200);\n+        robot.waitForIdle();\n+\n+        color = robot.getPixelColor(point.x + 100, point.y + 100);\n+        if(!color.equals(Color.GREEN)) {\n+            win1.dispose();\n+            win2.dispose();\n+            throw new RuntimeException(\"alawaysOnTop window is sent back by \" +\n+                    \"another child window toFront(). \" + color);\n+        }\n+\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                win1.setAlwaysOnTop(false);\n+                if (parent != null) {\n+                    parent.setVisible(false);\n+                    parent.setVisible(true);\n+                }\n+                win2.toFront();\n+            }\n+        });\n+\n+        robot.delay(200);\n+        robot.waitForIdle();\n+\n+        color = robot.getPixelColor(point.x + 100, point.y + 100);\n+        if(!color.equals(Color.RED)) {\n+            throw new RuntimeException(\"Failed to unset alawaysOnTop \" + color);\n+        }\n+\n+        win1.dispose();\n+        win2.dispose();\n+    }\n+}\n","filename":"jdk\/test\/java\/awt\/Window\/MultiWindowApp\/ChildAlwaysOnTopTest.java","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"}]}