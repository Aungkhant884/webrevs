{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1986,0 +1986,3 @@\n+                for (Entry.Attribute attr : keyStore.getEntry(alias, null).getAttributes()) {\n+                    System.out.println(\"Attribute \" + attr.getName() + \": \" + attr.getValue());\n+                }\n","filename":"jdk\/src\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,0 +134,5 @@\n+    @Override\n+    public boolean isInvalid(File f) {\n+        return f.getPath().indexOf('\\u0000') < 0 ? false : true;\n+    }\n+\n","filename":"jdk\/src\/solaris\/classes\/java\/io\/UnixFileSystem.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import java.net.URI;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Path;\n@@ -30,0 +33,2 @@\n+\n+import sun.nio.fs.DefaultFileSystemProvider;\n@@ -40,0 +45,8 @@\n+    \/**\n+     * Always use the internal default file system, in case it was modified\n+     * with java.nio.file.spi.DefaultFileSystemProvider.\n+     *\/\n+    private static final java.nio.file.FileSystem builtInFS =\n+            DefaultFileSystemProvider.create()\n+                    .getFileSystem(URI.create(\"file:\/\/\/\"));\n+\n@@ -45,0 +58,15 @@\n+    \/\/ Whether to enable alternative data streams (ADS) by suppressing\n+    \/\/ checking the path for invalid characters, in particular \":\".\n+    \/\/ ADS support will be enabled if and only if the property is set and\n+    \/\/ is the empty string or is equal, ignoring case, to the string \"true\".\n+    \/\/ By default ADS support is disabled.\n+    private static final boolean ENABLE_ADS;\n+    static {\n+        String enableADS = GetPropertyAction.privilegedGetProperty(\"jdk.io.File.enableADS\");\n+        if (enableADS != null) {\n+            ENABLE_ADS = \"\".equals(enableADS) || Boolean.parseBoolean(enableADS);\n+        } else {\n+            ENABLE_ADS = false;\n+        }\n+    }\n+\n@@ -303,0 +331,30 @@\n+    @Override\n+    public boolean isInvalid(File f) {\n+        if (f.getPath().indexOf('\\u0000') >= 0)\n+            return true;\n+\n+        if (ENABLE_ADS)\n+            return false;\n+\n+        \/\/ Invalid if there is a \":\" at a position greater than 1, or if there\n+        \/\/ is a \":\" at position 1 and the first character is not a letter\n+        String pathname = f.getPath();\n+        int lastColon = pathname.lastIndexOf(\":\");\n+\n+        \/\/ Valid if there is no \":\" present or if the last \":\" present is\n+        \/\/ at index 1 and the first character is a latter\n+        if (lastColon < 0 ||\n+            (lastColon == 1 && isLetter(pathname.charAt(0))))\n+            return false;\n+\n+        \/\/ Invalid if path creation fails\n+        Path path = null;\n+        try {\n+            path = builtInFS.getPath(pathname);\n+            return false;\n+        } catch (InvalidPathException ignored) {\n+        }\n+\n+        return true;\n+    }\n+\n","filename":"jdk\/src\/windows\/classes\/java\/io\/WinNTFileSystem.java","additions":59,"deletions":1,"binary":false,"changes":60,"status":"modified"}]}