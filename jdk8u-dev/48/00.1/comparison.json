{"files":[{"patch":"@@ -80,0 +80,1 @@\n+import sun.security.pkcs12.PKCS12KeyStore;\n@@ -83,0 +84,1 @@\n+import sun.security.util.SecurityProperties;\n@@ -193,0 +195,1 @@\n+    private boolean isPasswordlessKeyStore = false;\n@@ -838,0 +841,18 @@\n+        if (keyStore.getProvider().getName().equals(\"SunJSSE\") &&\n+                storetype.equalsIgnoreCase(P12KEYSTORE)) {\n+            if (ksfile != null && ksStream != null) {\n+                try {\n+                    isPasswordlessKeyStore = PKCS12KeyStore.isPasswordless(ksfile);\n+                } catch(IOException ioe) {\n+                    \/\/ This must be a JKS keystore that's opened as a PKCS12\n+                }\n+            } else {\n+                \/\/ When creating a new pkcs12 file, Do not prompt for storepass\n+                \/\/ if certProtectionAlgorithm and macAlgorithm are both NONE.\n+                isPasswordlessKeyStore =\n+                        \"NONE\".equals(SecurityProperties.privilegedGetOverridable(\n+                                \"keystore.pkcs12.certProtectionAlgorithm\"))\n+                                && \"NONE\".equals(SecurityProperties.privilegedGetOverridable(\n+                                \"keystore.pkcs12.macAlgorithm\"));\n+            }\n+        }\n@@ -857,5 +878,4 @@\n-\n-            \/\/ only prompt if (protectedPath == false)\n-\n-            if (!protectedPath && !KeyStoreUtil.isWindowsKeyStore(storetype) &&\n-                (command == CERTREQ ||\n+            if (!protectedPath && !KeyStoreUtil.isWindowsKeyStore(storetype)\n+                    && isKeyStoreRelated(command)\n+                    && !isPasswordlessKeyStore) {\n+                if (command == CERTREQ ||\n@@ -873,31 +893,19 @@\n-                        command == IDENTITYDB)) {\n-                int count = 0;\n-                do {\n-                    if (command == IMPORTKEYSTORE) {\n-                        System.err.print\n-                                (rb.getString(\"Enter.destination.keystore.password.\"));\n-                    } else {\n-                        System.err.print\n-                                (rb.getString(\"Enter.keystore.password.\"));\n-                    }\n-                    System.err.flush();\n-                    storePass = Password.readPassword(System.in);\n-                    passwords.add(storePass);\n-\n-                    \/\/ If we are creating a new non nullStream-based keystore,\n-                    \/\/ insist that the password be at least 6 characters\n-                    if (!nullStream && (storePass == null || storePass.length < 6)) {\n-                        System.err.println(rb.getString\n-                                (\"Keystore.password.is.too.short.must.be.at.least.6.characters\"));\n-                        storePass = null;\n-                    }\n-\n-                    \/\/ If the keystore file does not exist and needs to be\n-                    \/\/ created, the storepass should be prompted twice.\n-                    if (storePass != null && !nullStream && ksStream == null) {\n-                        System.err.print(rb.getString(\"Re.enter.new.password.\"));\n-                        char[] storePassAgain = Password.readPassword(System.in);\n-                        passwords.add(storePassAgain);\n-                        if (!Arrays.equals(storePass, storePassAgain)) {\n-                            System.err.println\n-                                (rb.getString(\"They.don.t.match.Try.again\"));\n+                        command == IDENTITYDB) {\n+                    int count = 0;\n+                    do {\n+                        if (command == IMPORTKEYSTORE) {\n+                            System.err.print\n+                                    (rb.getString(\"Enter.destination.keystore.password.\"));\n+                        } else {\n+                            System.err.print\n+                                    (rb.getString(\"Enter.keystore.password.\"));\n+                        }\n+                        System.err.flush();\n+                        storePass = Password.readPassword(System.in);\n+                        passwords.add(storePass);\n+\n+                        \/\/ If we are creating a new non nullStream-based keystore,\n+                        \/\/ insist that the password be at least 6 characters\n+                        if (!nullStream && (storePass == null || storePass.length < 6)) {\n+                            System.err.println(rb.getString\n+                                    (\"Keystore.password.is.too.short.must.be.at.least.6.characters\"));\n@@ -906,3 +914,12 @@\n-                    }\n-                    count++;\n-                } while ((storePass == null) && count < 3);\n+                        \/\/ If the keystore file does not exist and needs to be\n+                        \/\/ created, the storepass should be prompted twice.\n+                        if (storePass != null && !nullStream && ksStream == null) {\n+                            System.err.print(rb.getString(\"Re.enter.new.password.\"));\n+                            char[] storePassAgain = Password.readPassword(System.in);\n+                            passwords.add(storePassAgain);\n+                            if (!Arrays.equals(storePass, storePassAgain)) {\n+                                System.err.println\n+                                        (rb.getString(\"They.don.t.match.Try.again\"));\n+                                storePass = null;\n+                            }\n+                        }\n@@ -911,0 +928,2 @@\n+                        count++;\n+                    } while ((storePass == null) && count < 3);\n@@ -912,14 +931,14 @@\n-                if (storePass == null) {\n-                    System.err.println\n-                        (rb.getString(\"Too.many.failures.try.later\"));\n-                    return;\n-                }\n-            } else if (!protectedPath\n-                    && !KeyStoreUtil.isWindowsKeyStore(storetype)\n-                    && isKeyStoreRelated(command)) {\n-                \/\/ here we have EXPORTCERT and LIST (info valid until STOREPASSWD)\n-                if (command != PRINTCRL) {\n-                    System.err.print(rb.getString(\"Enter.keystore.password.\"));\n-                    System.err.flush();\n-                    storePass = Password.readPassword(System.in);\n-                    passwords.add(storePass);\n+\n+                    if (storePass == null) {\n+                        System.err.println\n+                                (rb.getString(\"Too.many.failures.try.later\"));\n+                        return;\n+                    }\n+                } else {\n+                    \/\/ here we have EXPORTCERT and LIST (info valid until STOREPASSWD)\n+                    if (command != PRINTCRL) {\n+                        System.err.print(rb.getString(\"Enter.keystore.password.\"));\n+                        System.err.flush();\n+                        storePass = Password.readPassword(System.in);\n+                        passwords.add(storePass);\n+                    }\n@@ -1118,1 +1137,2 @@\n-                    && !KeyStoreUtil.isWindowsKeyStore(storetype)) {\n+                    && !KeyStoreUtil.isWindowsKeyStore(storetype)\n+                    && !isPasswordlessKeyStore) {\n@@ -1496,1 +1516,2 @@\n-                && !KeyStoreUtil.isWindowsKeyStore(storetype)) {\n+                && !KeyStoreUtil.isWindowsKeyStore(storetype)\n+                && !isPasswordlessKeyStore) {\n@@ -1527,1 +1548,1 @@\n-        if (P12KEYSTORE.equalsIgnoreCase(storetype)) {\n+        if (origPass != null && P12KEYSTORE.equalsIgnoreCase(storetype)) {\n@@ -1536,9 +1557,12 @@\n-                System.err.println(form.format(source));\n-                if (orig == null) {\n-                    System.err.print(rb.getString\n-                            (\".RETURN.if.same.as.keystore.password.\"));\n-                } else {\n-                    form = new MessageFormat(rb.getString\n-                            (\".RETURN.if.same.as.for.otherAlias.\"));\n-                    Object[] src = {orig};\n-                    System.err.print(form.format(src));\n+                System.err.print(form.format(source));\n+                if (origPass != null) {\n+                    System.err.println();\n+                    if (orig == null) {\n+                        System.err.print(rb.getString\n+                                (\".RETURN.if.same.as.keystore.password.\"));\n+                    } else {\n+                        form = new MessageFormat(rb.getString\n+                                (\".RETURN.if.same.as.for.otherAlias.\"));\n+                        Object[] src = {orig};\n+                        System.err.print(form.format(src));\n+                    }\n@@ -1549,1 +1573,1 @@\n-                if (entered == null) {\n+                if (entered == null && origPass != null) {\n@@ -1551,1 +1575,1 @@\n-                } else if (entered.length >= 6) {\n+                } else if (entered != null && entered.length >= 6) {\n@@ -1944,0 +1968,3 @@\n+            } else {\n+                out.println(rb.getString\n+                        (\"Certificate.chain.length.\") + 0);\n@@ -2011,0 +2038,1 @@\n+        boolean srcIsPasswordless = false;\n@@ -2035,0 +2063,9 @@\n+            if (store.getProvider().getName().equals(\"SunJSSE\") &&\n+                    srcstoretype.equalsIgnoreCase(P12KEYSTORE) &&\n+                    srcksfile != null && is != null) {\n+                try {\n+                    srcIsPasswordless = PKCS12KeyStore.isPasswordless(srcksfile);\n+                } catch(IOException ioe) {\n+                    \/\/ This must be a JKS keystore that's opened as a PKCS12\n+                }\n+            }\n@@ -2038,1 +2075,2 @@\n-                    && !KeyStoreUtil.isWindowsKeyStore(srcstoretype)) {\n+                    && !KeyStoreUtil.isWindowsKeyStore(srcstoretype)\n+                    && !srcIsPasswordless) {\n@@ -2065,0 +2103,1 @@\n+                && !srcIsPasswordless\n@@ -3378,12 +3417,9 @@\n-            try {\n-                key = keyStore.getKey(alias, storePass);\n-\n-                keyPass = storePass;\n-                passwords.add(keyPass);\n-            } catch (UnrecoverableKeyException e) {\n-                \/\/ Did not work out, so prompt user for key password\n-                if (!token) {\n-                    keyPass = getKeyPasswd(alias, null, null);\n-                    key = keyStore.getKey(alias, keyPass);\n-                } else {\n-                    throw e;\n+            if (storePass != null) {\n+                try {\n+                    key = keyStore.getKey(alias, storePass);\n+                    passwords.add(storePass);\n+                    return Pair.of(key, storePass);\n+                } catch (UnrecoverableKeyException e) {\n+                    if (token) {\n+                        throw e;\n+                    }\n@@ -3392,0 +3428,4 @@\n+            \/\/ prompt user for key password\n+            keyPass = getKeyPasswd(alias, null, null);\n+            key = keyStore.getKey(alias, keyPass);\n+            return Pair.of(key, keyPass);\n@@ -3394,0 +3434,1 @@\n+            return Pair.of(key, keyPass);\n@@ -3395,2 +3436,0 @@\n-\n-        return Pair.of(key, keyPass);\n@@ -3410,4 +3449,3 @@\n-\n-        if (ks.containsAlias(alias) == false) {\n-            MessageFormat form = new MessageFormat\n-                (rb.getString(\"Alias.alias.does.not.exist\"));\n+        if (!ks.containsAlias(alias)) {\n+            MessageFormat form = new MessageFormat(\n+                    rb.getString(\"Alias.alias.does.not.exist\"));\n@@ -3418,3 +3456,3 @@\n-        PasswordProtection pp = null;\n-        Entry entry;\n-\n+        \/\/ Step 1: First attempt to access entry without key password\n+        \/\/ (PKCS11 entry or trusted certificate entry, for example).\n+        \/\/ If fail, go next.\n@@ -3422,5 +3460,2 @@\n-            \/\/ First attempt to access entry without key password\n-            \/\/ (PKCS11 entry or trusted certificate entry, for example)\n-\n-            entry = ks.getEntry(alias, pp);\n-            pkey = null;\n+            Entry entry = ks.getEntry(alias, null);\n+            return Pair.of(entry, null);\n@@ -3428,2 +3463,1 @@\n-\n-                KeyStoreUtil.isWindowsKeyStore(ks.getType())) {\n+                    KeyStoreUtil.isWindowsKeyStore(ks.getType())) {\n@@ -3434,0 +3468,1 @@\n+        }\n@@ -3435,27 +3470,7 @@\n-            \/\/ entry is protected\n-\n-            if (pkey != null) {\n-\n-                \/\/ try provided key password\n-\n-                pp = new PasswordProtection(pkey);\n-                entry = ks.getEntry(alias, pp);\n-\n-            } else {\n-\n-                \/\/ try store pass\n-\n-                try {\n-                    pp = new PasswordProtection(pstore);\n-                    entry = ks.getEntry(alias, pp);\n-                    pkey = pstore;\n-                } catch (UnrecoverableEntryException une2) {\n-                    if (P12KEYSTORE.equalsIgnoreCase(ks.getType())) {\n-\n-                        \/\/ P12 keystore currently does not support separate\n-                        \/\/ store and entry passwords\n-\n-                        throw une2;\n-                    } else {\n-\n-                        \/\/ prompt for entry password\n+        \/\/ entry is protected\n+        \/\/ Step 2: try pkey if not null. If fail, fail.\n+        if (pkey != null) {\n+            PasswordProtection pp = new PasswordProtection(pkey);\n+            Entry entry = ks.getEntry(alias, pp);\n+            return Pair.of(entry, pkey);\n+        }\n@@ -3463,4 +3478,12 @@\n-                        pkey = getKeyPasswd(alias, null, null);\n-                        pp = new PasswordProtection(pkey);\n-                        entry = ks.getEntry(alias, pp);\n-                    }\n+        \/\/ Step 3: try pstore if not null. If fail, go next.\n+        if (pstore != null) {\n+            try {\n+                PasswordProtection pp = new PasswordProtection(pstore);\n+                Entry entry = ks.getEntry(alias, pp);\n+                return Pair.of(entry, pstore);\n+            } catch (UnrecoverableEntryException une) {\n+                if (P12KEYSTORE.equalsIgnoreCase(ks.getType())) {\n+                    \/\/ P12 keystore currently does not support separate\n+                    \/\/ store and entry passwords. We will not prompt for\n+                    \/\/ entry password.\n+                    throw une;\n@@ -3471,0 +3494,4 @@\n+        \/\/ Step 4: prompt for entry password\n+        pkey = getKeyPasswd(alias, null, null);\n+        PasswordProtection pp = new PasswordProtection(pkey);\n+        Entry entry = ks.getEntry(alias, pp);\n@@ -3473,0 +3500,1 @@\n+\n","filename":"jdk\/src\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":155,"deletions":127,"binary":false,"changes":282,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+    private final String userDir;\n@@ -45,0 +46,2 @@\n+        userDir = AccessController.doPrivileged(\n+            new GetPropertyAction(\"user.dir\"));\n@@ -138,1 +141,5 @@\n-        return resolve(System.getProperty(\"user.dir\"), f.getPath());\n+        SecurityManager sm = System.getSecurityManager();\n+        if (sm != null) {\n+            sm.checkPropertyAccess(\"user.dir\");\n+        }\n+        return resolve(userDir, f.getPath());\n","filename":"jdk\/src\/solaris\/classes\/java\/io\/UnixFileSystem.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+    private final String userDir;\n@@ -78,0 +79,2 @@\n+        userDir = AccessController.doPrivileged(\n+            new GetPropertyAction(\"user.dir\"));\n@@ -404,1 +407,5 @@\n-        return normalize(System.getProperty(\"user.dir\"));\n+        SecurityManager sm = System.getSecurityManager();\n+        if (sm != null) {\n+            sm.checkPropertyAccess(\"user.dir\");\n+        }\n+        return normalize(userDir);\n","filename":"jdk\/src\/windows\/classes\/java\/io\/WinNTFileSystem.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}