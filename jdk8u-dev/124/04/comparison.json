{"files":[{"patch":"@@ -27,0 +27,1 @@\n+\n@@ -99,1 +100,1 @@\n-        if (effectiveCpus.length != 0) {\n+        if (effectiveCpus != null) {\n@@ -134,1 +135,1 @@\n-        if (effectiveMems.length != 0) {\n+        if (effectiveMems != null) {\n","filename":"jdk\/test\/jdk\/internal\/platform\/docker\/MetricsCpuTester.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-            throw new RuntimeException(\"oomKillFlag test not supported for cgroups v2\");\n+            throw new RuntimeException(\"kernel memory limit test not supported for cgroups v2\");\n","filename":"jdk\/test\/jdk\/internal\/platform\/docker\/MetricsMemoryTester.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Arrays;\n@@ -44,3 +45,3 @@\n-    public static long convertStringToLong(String strval, long overflowRetval) {\n-        long retval = 0;\n-        if (strval == null) return 0L;\n+    public static long convertStringToLong(String strval, long initialVal, long overflowRetval) {\n+        long retval = initialVal;\n+        if (strval == null) return retval;\n@@ -96,1 +97,1 @@\n-            return new Integer[0];\n+            return null;\n@@ -111,0 +112,15 @@\n+    public static Integer[] boxedArrayOrNull(int[] primitiveArray) {\n+        if (primitiveArray == null) {\n+            return null;\n+        }\n+        return Arrays.stream(primitiveArray).boxed().toArray(Integer[]::new);\n+    }\n+\n+    public static Integer[] sortAllowNull(Integer[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        Arrays.sort(array);\n+        return array;\n+    }\n+\n","filename":"jdk\/test\/lib\/jdk\/test\/lib\/containers\/cgroup\/CgroupMetricsTester.java","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-import jdk.internal.platform.Metrics;\n+import jdk.internal.platform.CgroupSubsystem;\n@@ -43,0 +43,2 @@\n+import jdk.internal.platform.Metrics;\n+import jdk.test.lib.Asserts;\n@@ -46,0 +48,2 @@\n+    \/\/ Aliased for readability\n+    private static final long RETVAL_UNAVAILABLE = CgroupSubsystem.LONG_RETVAL_UNLIMITED;\n@@ -130,3 +134,0 @@\n-        if (startPerCpu == null) {\n-            startPerCpu = new long[0];\n-        }\n@@ -162,1 +163,1 @@\n-        return (data == null || data.isEmpty()) ? 0L : convertStringToLong(data);\n+        return (data == null || data.isEmpty()) ? RETVAL_UNAVAILABLE : convertStringToLong(data);\n@@ -166,1 +167,1 @@\n-        return CgroupMetricsTester.convertStringToLong(strval, Long.MAX_VALUE);\n+        return CgroupMetricsTester.convertStringToLong(strval, RETVAL_UNAVAILABLE, Long.MAX_VALUE);\n@@ -178,1 +179,1 @@\n-        return 0L;\n+        return RETVAL_UNAVAILABLE;\n@@ -183,1 +184,1 @@\n-        return data.isEmpty() ? 0.0 : Double.parseDouble(data);\n+        return data == null || data.isEmpty() ? RETVAL_UNAVAILABLE : Double.parseDouble(data);\n@@ -206,0 +207,7 @@\n+    private Long[] boxedArrayOrNull(long[] primitiveArray) {\n+        if (primitiveArray == null) {\n+            return null;\n+        }\n+        return LongStream.of(primitiveArray).boxed().toArray(Long[]::new);\n+    }\n+\n@@ -218,1 +226,1 @@\n-        newVal = newVal > unlimited_minimum ? -1L : newVal;\n+        newVal = newVal > unlimited_minimum ? CgroupSubsystem.LONG_RETVAL_UNLIMITED : newVal;\n@@ -244,1 +252,1 @@\n-        newVal = newVal > unlimited_minimum ? -1L : newVal;\n+        newVal = newVal > unlimited_minimum ? CgroupSubsystem.LONG_RETVAL_UNLIMITED : newVal;\n@@ -270,1 +278,1 @@\n-        newVal = newVal > unlimited_minimum ? -1L : newVal;\n+        newVal = newVal > unlimited_minimum ? CgroupSubsystem.LONG_RETVAL_UNLIMITED: newVal;\n@@ -298,1 +306,1 @@\n-            newVal = newVal > unlimited_minimum ? -1L : newVal;\n+            newVal = newVal > unlimited_minimum ? CgroupSubsystem.LONG_RETVAL_UNLIMITED : newVal;\n@@ -321,1 +329,1 @@\n-        newVal = newVal > unlimited_minimum ? -1L : newVal;\n+        newVal = newVal > unlimited_minimum ? CgroupSubsystem.LONG_RETVAL_UNLIMITED : newVal;\n@@ -346,1 +354,1 @@\n-        Long[] newVals = new Long[0];\n+        Long[] newVals = null;\n@@ -353,6 +361,6 @@\n-        long[] oldValsPrim = metrics.getPerCpuUsage();\n-        Long[] oldVals = LongStream.of(oldValsPrim == null ? new long[0] : oldValsPrim)\n-                                    .boxed().toArray(Long[]::new);\n-        for (int i = 0; i < oldVals.length; i++) {\n-            if (!CgroupMetricsTester.compareWithErrorMargin(oldVals[i], newVals[i])) {\n-                warn(Controller.CPUACCT, \"cpuacct.usage_percpu\", oldVals[i], newVals[i]);\n+        Long[] oldVals = boxedArrayOrNull(metrics.getPerCpuUsage());\n+        if (oldVals != null) {\n+            for (int i = 0; i < oldVals.length; i++) {\n+                if (!CgroupMetricsTester.compareWithErrorMargin(oldVals[i], newVals[i])) {\n+                    warn(Controller.CPUACCT, \"cpuacct.usage_percpu\", oldVals[i], newVals[i]);\n+                }\n@@ -360,0 +368,2 @@\n+        } else {\n+            Asserts.assertNull(newVals, Controller.CPUACCT.value() + \"cpuacct.usage_percpu not both null\");\n@@ -417,2 +427,2 @@\n-        Integer[] oldVal = Arrays.stream(metrics.getCpuSetCpus()).boxed().toArray(Integer[]::new);\n-        Arrays.sort(oldVal);\n+        Integer[] oldVal = CgroupMetricsTester.boxedArrayOrNull(metrics.getCpuSetCpus());\n+        oldVal = CgroupMetricsTester.sortAllowNull(oldVal);\n@@ -423,1 +433,1 @@\n-        Arrays.sort(newVal);\n+        newVal = CgroupMetricsTester.sortAllowNull(newVal);\n@@ -431,11 +441,8 @@\n-        \/\/ Skip this test if this metric is not supported on this platform\n-        if (cpuSets.length != 0) {\n-            oldVal = Arrays.stream(cpuSets).boxed().toArray(Integer[]::new);\n-            Arrays.sort(oldVal);\n-            cpusstr = getFileContents(Controller.CPUSET, \"cpuset.effective_cpus\");\n-            newVal = CgroupMetricsTester.convertCpuSetsToArray(cpusstr);\n-            Arrays.sort(newVal);\n-            if (!Arrays.equals(oldVal, newVal)) {\n-                fail(Controller.CPUSET, \"cpuset.effective_cpus\", Arrays.toString(oldVal),\n-                        Arrays.toString(newVal));\n-            }\n+        oldVal = CgroupMetricsTester.boxedArrayOrNull(cpuSets);\n+        oldVal = CgroupMetricsTester.sortAllowNull(oldVal);\n+        cpusstr = getFileContents(Controller.CPUSET, \"cpuset.effective_cpus\");\n+        newVal = CgroupMetricsTester.convertCpuSetsToArray(cpusstr);\n+        newVal = CgroupMetricsTester.sortAllowNull(newVal);\n+        if (!Arrays.equals(oldVal, newVal)) {\n+            fail(Controller.CPUSET, \"cpuset.effective_cpus\", Arrays.toString(oldVal),\n+                    Arrays.toString(newVal));\n@@ -444,2 +451,2 @@\n-        oldVal = Arrays.stream(metrics.getCpuSetMems()).boxed().toArray(Integer[]::new);\n-        Arrays.sort(oldVal);\n+        oldVal = CgroupMetricsTester.boxedArrayOrNull(metrics.getCpuSetMems());\n+        oldVal = CgroupMetricsTester.sortAllowNull(oldVal);\n@@ -448,1 +455,1 @@\n-        Arrays.sort(newVal);\n+        newVal = CgroupMetricsTester.sortAllowNull(newVal);\n@@ -456,11 +463,8 @@\n-        \/\/ Skip this test if this metric is not supported on this platform\n-        if (cpuSetMems.length != 0) {\n-            oldVal = Arrays.stream(cpuSetMems).boxed().toArray(Integer[]::new);\n-            Arrays.sort(oldVal);\n-            cpusstr = getFileContents(Controller.CPUSET, \"cpuset.effective_mems\");\n-            newVal = CgroupMetricsTester.convertCpuSetsToArray(cpusstr);\n-            Arrays.sort(newVal);\n-            if (!Arrays.equals(oldVal, newVal)) {\n-                fail(Controller.CPUSET, \"cpuset.effective_mems\", Arrays.toString(oldVal),\n-                        Arrays.toString(newVal));\n-            }\n+        oldVal = CgroupMetricsTester.boxedArrayOrNull(cpuSetMems);\n+        oldVal = CgroupMetricsTester.sortAllowNull(oldVal);\n+        cpusstr = getFileContents(Controller.CPUSET, \"cpuset.effective_mems\");\n+        newVal = CgroupMetricsTester.convertCpuSetsToArray(cpusstr);\n+        newVal = CgroupMetricsTester.sortAllowNull(newVal);\n+        if (!Arrays.equals(oldVal, newVal)) {\n+            fail(Controller.CPUSET, \"cpuset.effective_mems\", Arrays.toString(oldVal),\n+                    Arrays.toString(newVal));\n@@ -507,3 +511,0 @@\n-        if (newPerCpu == null) {\n-            newPerCpu = new long[0];\n-        }\n@@ -527,5 +528,11 @@\n-        boolean success = false;\n-        for (int i = 0; i < startPerCpu.length; i++) {\n-            if (newPerCpu[i] > startPerCpu[i]) {\n-                success = true;\n-                break;\n+        if (startPerCpu != null) {\n+            boolean success = false;\n+            for (int i = 0; i < startPerCpu.length; i++) {\n+                if (newPerCpu[i] > startPerCpu[i]) {\n+                    success = true;\n+                    break;\n+                }\n+            }\n+            if (!success) {\n+                fail(Controller.CPU, \"getPerCpuUsage\", Arrays.toString(newPerCpu),\n+                                                       Arrays.toString(startPerCpu));\n@@ -533,0 +540,2 @@\n+        } else {\n+            Asserts.assertNull(newPerCpu, Controller.CPU.value() + \" getPerCpuUsage not both null\");\n@@ -535,2 +544,0 @@\n-        if(!success) fail(Controller.CPU, \"getPerCpuUsage\", Arrays.toString(newPerCpu),\n-                Arrays.toString(startPerCpu));\n","filename":"jdk\/test\/lib\/jdk\/test\/lib\/containers\/cgroup\/MetricsTesterCgroupV1.java","additions":65,"deletions":58,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import jdk.internal.platform.CgroupSubsystem;\n@@ -41,0 +40,1 @@\n+    private static final long NOT_AVAILABLE = -1;\n@@ -128,1 +128,1 @@\n-            return 0;\n+            return NOT_AVAILABLE;\n@@ -155,1 +155,1 @@\n-        if (rawVal == 0 || rawVal == 100) {\n+        if (rawVal == NOT_AVAILABLE || rawVal == 100) {\n@@ -203,1 +203,8 @@\n-        return CgroupMetricsTester.convertStringToLong(val, UNLIMITED);\n+        return CgroupMetricsTester.convertStringToLong(val, NOT_AVAILABLE, UNLIMITED);\n+    }\n+\n+    private long nanosOrUnlimited(long micros) {\n+        if (micros < 0) {\n+            return UNLIMITED;\n+        }\n+        return TimeUnit.MICROSECONDS.toNanos(micros);\n@@ -268,1 +275,1 @@\n-        long newVal = TimeUnit.MICROSECONDS.toNanos(getLongValueEntryFromFile(\"cpu.stat\", \"usage_usec\"));\n+        long newVal = nanosOrUnlimited(getLongValueEntryFromFile(\"cpu.stat\", \"usage_usec\"));\n@@ -275,1 +282,1 @@\n-        newVal = TimeUnit.MICROSECONDS.toNanos(getLongValueEntryFromFile(\"cpu.stat\", \"user_usec\"));\n+        newVal = nanosOrUnlimited(getLongValueEntryFromFile(\"cpu.stat\", \"user_usec\"));\n@@ -281,1 +288,1 @@\n-        newVal = TimeUnit.MICROSECONDS.toNanos(getLongValueEntryFromFile(\"cpu.stat\", \"system_usec\"));\n+        newVal = nanosOrUnlimited(getLongValueEntryFromFile(\"cpu.stat\", \"system_usec\"));\n@@ -321,1 +328,1 @@\n-        newVal = TimeUnit.MICROSECONDS.toNanos(getLongValueEntryFromFile(\"cpu.stat\", \"throttled_usec\"));\n+        newVal = nanosOrUnlimited(getLongValueEntryFromFile(\"cpu.stat\", \"throttled_usec\"));\n@@ -330,3 +337,2 @@\n-        int[] cpus = mapNullToEmpty(metrics.getCpuSetCpus());\n-        Integer[] oldVal = Arrays.stream(cpus).boxed().toArray(Integer[]::new);\n-        Arrays.sort(oldVal);\n+        Integer[] oldVal = CgroupMetricsTester.boxedArrayOrNull(metrics.getCpuSetCpus());\n+        oldVal = CgroupMetricsTester.sortAllowNull(oldVal);\n@@ -337,1 +343,1 @@\n-        Arrays.sort(newVal);\n+        newVal = CgroupMetricsTester.sortAllowNull(newVal);\n@@ -343,3 +349,2 @@\n-        cpus = mapNullToEmpty(metrics.getEffectiveCpuSetCpus());\n-        oldVal = Arrays.stream(cpus).boxed().toArray(Integer[]::new);\n-        Arrays.sort(oldVal);\n+        oldVal = CgroupMetricsTester.boxedArrayOrNull(metrics.getEffectiveCpuSetCpus());\n+        oldVal = CgroupMetricsTester.sortAllowNull(oldVal);\n@@ -348,1 +353,1 @@\n-        Arrays.sort(newVal);\n+        newVal = CgroupMetricsTester.sortAllowNull(newVal);\n@@ -354,3 +359,2 @@\n-        cpus = mapNullToEmpty(metrics.getCpuSetMems());\n-        oldVal = Arrays.stream(cpus).boxed().toArray(Integer[]::new);\n-        Arrays.sort(oldVal);\n+        oldVal = CgroupMetricsTester.boxedArrayOrNull(metrics.getCpuSetMems());\n+        oldVal = CgroupMetricsTester.sortAllowNull(oldVal);\n@@ -359,1 +363,1 @@\n-        Arrays.sort(newVal);\n+        newVal = CgroupMetricsTester.sortAllowNull(newVal);\n@@ -365,3 +369,2 @@\n-        cpus = mapNullToEmpty(metrics.getEffectiveCpuSetMems());\n-        oldVal = Arrays.stream(cpus).boxed().toArray(Integer[]::new);\n-        Arrays.sort(oldVal);\n+        oldVal = CgroupMetricsTester.boxedArrayOrNull(metrics.getEffectiveCpuSetMems());\n+        oldVal = CgroupMetricsTester.sortAllowNull(oldVal);\n@@ -370,1 +373,1 @@\n-        Arrays.sort(newVal);\n+        newVal = CgroupMetricsTester.sortAllowNull(newVal);\n@@ -377,9 +380,0 @@\n-    private int[] mapNullToEmpty(int[] cpus) {\n-        if (cpus == null) {\n-            \/\/ Not available. For sake of testing continue with an\n-            \/\/ empty array.\n-            cpus = new int[0];\n-        }\n-        return cpus;\n-    }\n-\n@@ -474,1 +468,1 @@\n-            return CgroupSubsystem.LONG_RETVAL_UNLIMITED;\n+            return NOT_AVAILABLE;\n","filename":"jdk\/test\/lib\/jdk\/test\/lib\/containers\/cgroup\/MetricsTesterCgroupV2.java","additions":28,"deletions":34,"binary":false,"changes":62,"status":"modified"}]}