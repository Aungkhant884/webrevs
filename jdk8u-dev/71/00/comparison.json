{"files":[{"patch":"@@ -3940,1 +3940,4 @@\n-    { \/\/ 4 pages of VSN is committed, some is used by chunks\n+    const size_t page_chunks = 4 * (size_t)os::vm_page_size() \/ BytesPerWord;\n+    \/\/ This doesn't work for systems with vm_page_size >= 16K.\n+    if (page_chunks < MediumChunk) {\n+      \/\/ 4 pages of VSN is committed, some is used by chunks\n@@ -3943,2 +3946,1 @@\n-      const size_t page_chunks = 4 * (size_t)os::vm_page_size() \/ BytesPerWord;\n-      assert(page_chunks < MediumChunk, \"Test expects medium chunks to be at least 4*page_size\");\n+\n","filename":"hotspot\/src\/share\/vm\/memory\/metaspace.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run main\/othervm -XX:CompileThreshold=100 -Xbatch -Xss248k StackOverflowBug\n+ * @run main\/othervm -XX:CompileThreshold=100 -Xbatch -Xss512k StackOverflowBug\n","filename":"hotspot\/test\/compiler\/6865265\/StackOverflowBug.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run main\/othervm -XX:CompileCommand=exclude,Test8009761::m2 -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -Xss256K Test8009761\n+ * @run main\/othervm -XX:CompileCommand=exclude,Test8009761::m2 -XX:-UseOnStackReplacement -XX:-BackgroundCompilation -Xss512K Test8009761\n","filename":"hotspot\/test\/compiler\/8009761\/Test8009761.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run main\/othervm -Xcomp -XX:CompileOnly=Test.run -XX:+TieredCompilation -XX:TieredStopAtLevel=2 -Xss256K TestRecursiveReplacedException\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=Test.run -XX:+TieredCompilation -XX:TieredStopAtLevel=2 -Xss512K TestRecursiveReplacedException\n","filename":"hotspot\/test\/compiler\/exceptions\/TestRecursiveReplacedException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run main\/othervm -XX:TieredStopAtLevel=1 -XX:-BackgroundCompilation -XX:CompileCommand=dontinline,StackOverflowGuardPagesOff::m1 -XX:CompileCommand=exclude,StackOverflowGuardPagesOff::m2 -Xss256K -XX:-UseOnStackReplacement StackOverflowGuardPagesOff\n+ * @run main\/othervm -XX:TieredStopAtLevel=1 -XX:-BackgroundCompilation -XX:CompileCommand=dontinline,StackOverflowGuardPagesOff::m1 -XX:CompileCommand=exclude,StackOverflowGuardPagesOff::m2 -Xss512K -XX:-UseOnStackReplacement StackOverflowGuardPagesOff\n","filename":"hotspot\/test\/compiler\/uncommontrap\/StackOverflowGuardPagesOff.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run main\/othervm -XX:-BackgroundCompilation -XX:CompileCommand=dontinline,TestStackBangMonitorOwned::m1 -XX:CompileCommand=exclude,TestStackBangMonitorOwned::m2 -Xss256K -XX:-UseOnStackReplacement TestStackBangMonitorOwned\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:CompileCommand=dontinline,TestStackBangMonitorOwned::m1 -XX:CompileCommand=exclude,TestStackBangMonitorOwned::m2 -Xss512K -XX:-UseOnStackReplacement TestStackBangMonitorOwned\n","filename":"hotspot\/test\/compiler\/uncommontrap\/TestStackBangMonitorOwned.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run main\/othervm -XX:-BackgroundCompilation -XX:CompileCommand=dontinline,TestStackBangRbp::m1 -XX:CompileCommand=exclude,TestStackBangRbp::m2 -Xss256K -XX:-UseOnStackReplacement TestStackBangRbp\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:CompileCommand=dontinline,TestStackBangRbp::m1 -XX:CompileCommand=exclude,TestStackBangRbp::m2 -Xss512K -XX:-UseOnStackReplacement TestStackBangRbp\n","filename":"hotspot\/test\/compiler\/uncommontrap\/TestStackBangRbp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-    expectError(new String[] { gcflag, \"-Xms8M\", \"-XX:InitialHeapSize=4M\", \"-version\" });\n+    expectError(new String[] { gcflag, \"-Xms64M\", \"-XX:InitialHeapSize=32M\", \"-version\" });\n","filename":"hotspot\/test\/gc\/arguments\/TestMaxHeapSizeTools.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,3 @@\n-    private static final int heapSize                       = 200; \/\/ MB\n+    \/\/ Heap sizes < 224 MB are increased to 224 MB if vm_page_size == 64K to\n+    \/\/ fulfill alignment constraints.\n+    private static final int heapSize                       = 224; \/\/ MB\n","filename":"hotspot\/test\/gc\/g1\/TestHumongousAllocInitialMark.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}