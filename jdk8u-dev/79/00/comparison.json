{"files":[{"patch":"@@ -1,1 +0,0 @@\n-<!DOCTYPE HTML PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01 Transitional\/\/EN\">\n@@ -3,2113 +2,669 @@\n-    <head>\n-        <title>OpenJDK Build README<\/title>\n-    <\/head>\n-    <body style=\"background-color:aquamarine\">\n-\n-        <!-- ====================================================== -->\n-        <table width=\"100%\">\n-            <tr>\n-                <td align=\"center\">\n-                    <img alt=\"OpenJDK\" \n-                         src=\"http:\/\/openjdk.java.net\/images\/openjdk.png\" \n-                         width=256>\n-                <\/td>\n-            <\/tr>\n-            <tr>\n-                <td align=center>\n-                    <h1>OpenJDK Build README<\/h1>\n-                <\/td>\n-            <\/tr>\n-        <\/table>\n-\n-        <!-- ====================================================== -->\n-        <hr>\n-        <h2><a name=\"introduction\">Introduction<\/a><\/h2>\n-        <blockquote>\n-            This README file contains build instructions for the\n-            <a href=\"http:\/\/openjdk.java.net\"  target=\"_blank\">OpenJDK<\/a>.\n-            Building the source code for the\n-            OpenJDK\n-            requires\n-            a certain degree of technical expertise.\n-\n-            <!-- ====================================================== -->\n-            <h3>!!!!!!!!!!!!!!! THIS IS A MAJOR RE-WRITE of this document. !!!!!!!!!!!!!<\/h3>\n-            <blockquote>\n-                Some Headlines:\n-                <ul>\n-                    <li>\n-                        The build is now a \"<code>configure &amp;&amp; make<\/code>\" style build\n-                    <\/li>\n-                    <li>\n-                        Any GNU make 3.81 or newer should work\n-                    <\/li>\n-                    <li>\n-                        The build should scale, i.e. more processors should\n-                        cause the build to be done in less wall-clock time\n-                    <\/li>\n-                    <li>\n-                        Nested or recursive make invocations have been significantly\n-                        reduced, as has the total fork\/exec or spawning\n-                        of sub processes during the build\n-                    <\/li>\n-                    <li>\n-                        Windows MKS usage is no longer supported\n-                    <\/li>\n-                    <li>\n-                        Windows Visual Studio <code>vsvars*.bat<\/code> and \n-                        <code>vcvars*.bat<\/code> files are run automatically\n-                    <\/li>\n-                    <li>\n-                        Ant is no longer used when building the OpenJDK\n-                    <\/li>\n-                    <li>\n-                        Use of ALT_* environment variables for configuring the\n-                        build is no longer supported\n-                    <\/li>\n-                <\/ul>\n-            <\/blockquote>\n-        <\/blockquote>\n-\n-        <!-- ====================================================== -->\n-        <hr>\n-        <h2><a name=\"contents\">Contents<\/a><\/h2>\n-        <blockquote>\n-            <ul>\n-                <li><a href=\"#introduction\">Introduction<\/a><\/li>\n-\n-                <li><a href=\"#hg\">Use of Mercurial<\/a>\n-                    <ul>\n-                        <li><a href=\"#get_source\">Getting the Source<\/a><\/li>\n-                        <li><a href=\"#repositories\">Repositories<\/a><\/li>\n-                    <\/ul>\n-                <\/li>\n-\n-                <li><a href=\"#building\">Building<\/a>\n-                    <ul>\n-                        <li><a href=\"#setup\">System Setup<\/a>\n-                            <ul>\n-                                <li><a href=\"#linux\">Linux<\/a><\/li>\n-                                <li><a href=\"#solaris\">Solaris<\/a><\/li>\n-                                <li><a href=\"#macosx\">Mac OS X<\/a><\/li>\n-                                <li><a href=\"#windows\">Windows<\/a><\/li>\n-                            <\/ul>\n-                        <\/li>\n-                        <li><a href=\"#configure\">Configure<\/a><\/li>\n-                        <li><a href=\"#make\">Make<\/a><\/li>\n-                    <\/ul>\n-                <\/li>\n-                <li><a href=\"#testing\">Testing<\/a><\/li>\n-            <\/ul>\n-            <hr>\n-            <ul>\n-                <li><a href=\"#hints\">Appendix A: Hints and Tips<\/a>\n-                    <ul>\n-                        <li><a href=\"#faq\">FAQ<\/a><\/li>\n-                        <li><a href=\"#performance\">Build Performance Tips<\/a><\/li>\n-                        <li><a href=\"#troubleshooting\">Troubleshooting<\/a><\/li>\n-                    <\/ul>\n-                <\/li>\n-                <li><a href=\"#gmake\">Appendix B: GNU Make Information<\/a><\/li>\n-                <li><a href=\"#buildenvironments\">Appendix C: Build Environments<\/a><\/li>\n-\n-                <!-- Leave out\n-                <li><a href=\"#mapping\">Appendix D: Mapping Old Builds to the New Builds<\/a><\/li>    \n-                -->\n-\n-            <\/ul>\n-        <\/blockquote>\n-\n-        <!-- ====================================================== -->\n-        <hr>\n-        <h2><a name=\"hg\">Use of Mercurial<\/a><\/h2>\n-        <blockquote>\n-            The OpenJDK sources are maintained with the revision control system\n-            <a href=\"http:\/\/mercurial.selenic.com\/wiki\/Mercurial\">Mercurial<\/a>.\n-            If you are new to Mercurial, please see the\n-            <a href=\"http:\/\/mercurial.selenic.com\/wiki\/BeginnersGuides\">\n-                Beginner Guides<\/a>\n-            or refer to the <a href=\"http:\/\/hgbook.red-bean.com\/\">\n-                Mercurial Book<\/a>.\n-            The first few chapters of the book provide an excellent overview of\n-            Mercurial, what it is and how it works.\n-            <br>\n-            For using Mercurial with the OpenJDK refer to the\n-            <a href=\"http:\/\/openjdk.java.net\/guide\/repositories.html#installConfig\">\n-                Developer Guide: Installing and Configuring Mercurial<\/a>\n-            section for more information.\n-\n-            <h3><a name=\"get_source\">Getting the Source<\/a><\/h3>\n-            <blockquote>\n-                To get the entire set of OpenJDK Mercurial repositories\n-                use the script <code>get_source.sh<\/code> located in the \n-                root repository:\n-                <blockquote>\n-                    <code>\n-                        hg clone http:\/\/hg.openjdk.java.net\/jdk8\/jdk8 \n-                        <i>YourOpenJDK<\/i>\n-                        <br>\n-                        cd <i>YourOpenJDK<\/i>\n-                        <br>\n-                        bash .\/get_source.sh\n-                    <\/code>\n-                <\/blockquote>\n-                Once you have all the repositories, keep in mind that each\n-                repository is its own independent repository.\n-                You can also re-run <code>.\/get_source.sh<\/code> anytime to\n-                pull over all the latest changesets in all the repositories.\n-                This set of nested repositories has been given the term\n-                \"forest\" and there are various ways to apply the same\n-                <code>hg<\/code> command to each of the repositories.\n-                For example, the script <code>make\/scripts\/hgforest.sh<\/code>\n-                can be used to repeat the same <code>hg<\/code>\n-                command on every repository, e.g.\n-                <blockquote>\n-                    <code>\n-                        cd <i>YourOpenJDK<\/i>\n-                        <br>\n-                        bash .\/make\/scripts\/hgforest.sh status\n-                    <\/code>\n-                <\/blockquote>\n-            <\/blockquote>\n-\n-            <h3><a name=\"repositories\">Repositories<\/a><\/h3>\n-            <blockquote>\n-                <p>The set of repositories and what they contain:<\/p>\n-                <table border=\"1\">\n-                    <thead>\n-                        <tr>\n-                            <th>Repository<\/th>\n-                            <th>Contains<\/th>\n-                        <\/tr>\n-                    <\/thead>                   \n-                    <tbody>\n-                        <tr>\n-                            <td>\n-                                . (root)\n-                            <\/td>\n-                            <td>\n-                                common configure and makefile logic\n-                            <\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td>\n-                                hotspot\n-                            <\/td>\n-                            <td>\n-                                source code and make files for building\n-                                the OpenJDK Hotspot Virtual Machine                         \n-                            <\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td>\n-                                langtools\n-                            <\/td>\n-                            <td>\n-                                source code for the OpenJDK javac and language tools\n-                            <\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td>\n-                                jdk\n-                            <\/td>\n-                            <td>\n-                                source code and make files for building\n-                                the OpenJDK runtime libraries and misc files\n-                            <\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td>\n-                                jaxp\n-                            <\/td>\n-                            <td>\n-                                source code for the OpenJDK JAXP functionality\n-                            <\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td>\n-                                jaxws\n-                            <\/td>\n-                            <td>\n-                                source code for the OpenJDK JAX-WS functionality\n-                            <\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td>\n-                                corba\n-                            <\/td>\n-                            <td>\n-                                source code for the OpenJDK Corba functionality\n-                            <\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td>\n-                                nashorn\n-                            <\/td>\n-                            <td>\n-                                source code for the OpenJDK JavaScript implementation\n-                            <\/td>\n-                        <\/tr>\n-                    <\/tbody>\n-                <\/table>\n-            <\/blockquote>\n-\n-            <h3><a name=\"guidelines\">Repository Source Guidelines<\/a><\/h3>\n-            <blockquote>\n-                There are some very basic guidelines:\n-                <ul>\n-                    <li>\n-                        Use of whitespace in source files\n-                        (.java, .c, .h, .cpp, and .hpp files)\n-                        is restricted.\n-                        No TABs, no trailing whitespace on lines, and files\n-                        should not terminate in more than one blank line.\n-                    <\/li>\n-                    <li>\n-                        Files with execute permissions should not be added\n-                        to the source repositories.\n-                    <\/li>\n-                    <li>\n-                        All generated files need to be kept isolated from \n-                        the files\n-                        maintained or managed by the source control system.\n-                        The standard area for generated files is the top level\n-                        <code>build\/<\/code> directory.\n-                    <\/li>\n-                    <li>\n-                        The default build process should be to build the product\n-                        and nothing else, in one form, e.g. a product (optimized),\n-                        debug (non-optimized, -g plus assert logic), or\n-                        fastdebug (optimized, -g plus assert logic).\n-                    <\/li>\n-                    <li>\n-                        The <tt>.hgignore<\/tt> file in each repository\n-                        must exist and should\n-                        include <tt>^build\/<\/tt>, <tt>^dist\/<\/tt> and \n-                        optionally any\n-                        <tt>nbproject\/private<\/tt> directories.\n-                        <strong>It should NEVER<\/strong> include \n-                        anything in the\n-                        <tt>src\/<\/tt> or <tt>test\/<\/tt>\n-                        or any managed directory area of a repository.\n-                    <\/li>\n-                    <li>\n-                        Directory names and file names should never contain\n-                        blanks or\n-                        non-printing characters.\n-                    <\/li>\n-                    <li>\n-                        Generated source or binary files should NEVER be added to\n-                        the repository (that includes <tt>javah<\/tt> output).\n-                        There are some exceptions to this rule, in particular\n-                        with some of the generated configure scripts.\n-                    <\/li>\n-                    <li>\n-                        Files not needed for typical building\n-                        or testing of the repository\n-                        should not be added to the repository.\n-                    <\/li>\n-                <\/ul>\n-            <\/blockquote>\n-\n-        <\/blockquote>\n-\n-        <!-- ====================================================== -->\n-        <hr>\n-        <h2><a name=\"building\">Building<\/a><\/h2>\n-        <blockquote>\n-            The very first step in building the OpenJDK is making sure the\n-            system itself has everything it needs to do OpenJDK builds.\n-            Once a system is setup, it generally doesn't need to be done again.\n-            <br>\n-            Building the OpenJDK is now done with running a \n-            <a href=\"#configure\"><code>configure<\/code><\/a>\n-            script which will try and find and verify you have everything\n-            you need, followed by running\n-            <a href=\"#gmake\"><code>make<\/code><\/a>, e.g.\n-            <blockquote>\n-                <b>\n-                    <code>\n-                        bash .\/configure<br>\n-                        make all\n-                    <\/code>\n-                <\/b>\n-            <\/blockquote>\n-            Where possible the <code>configure<\/code> script will attempt to located the\n-            various components in the default locations or via component\n-            specific variable settings.\n-            When the normal defaults fail or components cannot be found,\n-            additional <code>configure<\/code> options may be necessary to help <code>configure<\/code>\n-            find the necessary tools for the build, or you may need to\n-            re-visit the setup of your system due to missing software\n-            packages.\n-            <br>\n-            <strong>NOTE:<\/strong> The <code>configure<\/code> script\n-            file does not have\n-            execute permissions and will need to be explicitly run with\n-            <code>bash<\/code>,\n-            see the <a href=\"#guidelines\">source guidelines<\/a>.\n-\n-            <!-- ====================================================== -->\n-            <hr>\n-            <h3><a name=\"setup\">System Setup<\/a><\/h3>\n-            <blockquote>\n-                Before even attempting to use a system to build the OpenJDK\n-                there are some very basic system setups needed.\n-                For all systems:\n-                <ul>\n-                    <li>\n-                        Be sure the GNU make utility is version 3.81 or newer,\n-                        e.g. run \"<code>make -version<\/code>\"\n-                    <\/li>\n-                    <li>\n-                        Install a\n-                        <a name=\"bootjdk\">Bootstrap JDK<\/a>.\n-                        All OpenJDK builds require access to a previously released\n-                        JDK called the <i>bootstrap JDK<\/i> or <i>boot JDK.<\/i>\n-                        The general rule is that the bootstrap JDK\n-                        must be an instance of the previous major\n-                        release of the JDK. In addition, there may be\n-                        a requirement to use a release at or beyond a\n-                        particular update level.\n-                        <br>&nbsp;<br>\n-\n-                        <b><i>Building JDK 8 requires use of a version\n-                        of JDK 7 that is at Update 7 or newer. JDK 8\n-                        developers should not use JDK 8 as the boot\n-                        JDK, to ensure that JDK 8 dependencies are\n-                        not introduced into the parts of the system\n-                        that are built with JDK 7.<\/i><\/b>\n-\n-                        <br>&nbsp;<br>\n-                        The JDK 7 binaries can be downloaded from Oracle's \n-                        <a href=\"http:\/\/www.oracle.com\/technetwork\/java\/javase\/downloads\/index.html\"\n-                           target=\"_blank\">JDK 7 download site<\/a>.\n-                        For build performance reasons\n-                        is very important that this bootstrap JDK be made available \n-                        on the local disk of the machine doing the build.\n-                        You should add its <code>bin<\/code> directory\n-                        to the <code>PATH<\/code> environment variable.\n-                        If <code>configure<\/code> has any issues finding this JDK, you may\n-                        need to use the <code>configure<\/code> option\n-                        <code>--with-boot-jdk<\/code>.\n-                    <\/li>\n-                    <li>\n-                        Ensure that GNU make, the Bootstrap JDK,\n-                        and the compilers are all\n-                        in your PATH environment variable\n-                    <\/li>\n-                <\/ul>\n-                And for specific systems:\n-                <table border=\"1\">\n-                    <thead>\n-                        <tr>\n-                            <th>Linux<\/th>\n-                            <th>Solaris<\/th>\n-                            <th>Windows<\/th>\n-                            <th>Mac OS X<\/th>\n-                        <\/tr>\n-                    <\/thead>                   \n-                    <tbody>\n-                        <tr>\n-                            <td>\n-                                Install all the software development\n-                                packages needed including\n-                                <a href=\"#alsa\">alsa<\/a>,\n-                                <a href=\"#freetype\">freetype<\/a>,\n-                                <a href=\"#cups\">cups<\/a>, and\n-                                <a href=\"#xrender\">xrender<\/a>.\n-                                <br>\n-                                See\n-                                <a href=\"#SDBE\">specific system packages<\/a>.\n-                            <\/td>\n-                            <td>\n-                                Install all the software development\n-                                packages needed  including\n-                                <a href=\"#studio\">Studio Compilers<\/a>,\n-                                <a href=\"#freetype\">freetype<\/a>,\n-                                <a href=\"#cups\">cups<\/a>, and\n-                                <a href=\"#xrender\">xrender<\/a>.\n-                                <br>\n-                                See\n-                                <a href=\"#SDBE\">specific system packages<\/a>.\n-                            <\/td>\n-                            <td>\n-                                <ul>\n-                                    <li>\n-                                        Install one of\n-                                        <a href=\"#cygwin\">CYGWIN<\/a> or\n-                                        <a href=\"#msys\">MinGW\/MSYS<\/a>\n-                                    <\/li>\n-                                    <li>\n-                                        Install\n-                                        <a href=\"#vs2010\">Visual Studio 2010<\/a>\n-                                    <\/li>\n-                                <\/ul>\n-                            <\/td>\n-                            <td>\n-                                Install \n-                                <a href=\"https:\/\/developer.apple.com\/xcode\/\">XCode 4.5.2<\/a> \n-                                and also install the \"Command line tools\" found under the\n-                                preferences pane \"Downloads\"\n-                            <\/td>\n-                        <\/tr>\n-                    <\/tbody>\n-                <\/table>\n-\n-                <h4><a name=\"linux\">Linux<\/a><\/h4>\n-                <blockquote>\n-                    With Linux, try and favor the system packages over \n-                    building your own\n-                    or getting packages from other areas.\n-                    Most Linux builds should be possible with the system's\n-                    available packages.\n-                    <br>\n-                    Note that some Linux systems have a habit of pre-populating\n-                    your environment variables for you, for example <code>JAVA_HOME<\/code>\n-                    might get pre-defined for you to refer to the JDK installed on\n-                    your Linux system.\n-                    You will need to unset <code>JAVA_HOME<\/code>.\n-                    It's a good idea to run <code>env<\/code> and verify the\n-                    environment variables you are getting from the default system\n-                    settings make sense for building the OpenJDK.\n-\n-                <\/blockquote>\n-\n-                <h4><a name=\"solaris\">Solaris<\/a><\/h4>\n-                <blockquote>\n-                    <h5><a name=\"studio\">Studio Compilers<\/a><\/h5>\n-                    <blockquote>\n-                        At a minimum, the\n-                        <a href=\"http:\/\/www.oracle.com\/technetwork\/server-storage\/solarisstudio\/downloads\/index.htm\" target=\"_blank\">\n-                            Studio 12 Update 1 Compilers<\/a>\n-                        (containing version 5.10 of the C and C++ compilers) is required,\n-                        including specific patches.\n-                        <p>\n-                            The Solaris SPARC patch list is:\n-                        <ul>\n-                            <li>\n-                                118683-05: SunOS 5.10: Patch for profiling libraries and assembler\n-                            <\/li>\n-                            <li>\n-                                119963-21: SunOS 5.10: Shared library patch for C++\n-                            <\/li>\n-                            <li>\n-                                120753-08: SunOS 5.10: Microtasking libraries (libmtsk) patch\n-                            <\/li>\n-                            <li>\n-                                128228-09: Sun Studio 12 Update 1: Patch for Sun C++ Compiler\n-                            <\/li>\n-                            <li>\n-                                141860-03: Sun Studio 12 Update 1: Patch for Compiler Common patch for Sun C C++ F77 F95\n-                            <\/li>\n-                            <li>\n-                                141861-05: Sun Studio 12 Update 1: Patch for Sun C Compiler\n-                            <\/li>\n-                            <li>\n-                                142371-01: Sun Studio 12.1 Update 1: Patch for dbx\n-                            <\/li>\n-                            <li>\n-                                143384-02: Sun Studio 12 Update 1: Patch for debuginfo handling\n-                            <\/li>\n-                            <li>\n-                                143385-02: Sun Studio 12 Update 1: Patch for Compiler Common patch for Sun C C++ F77 F95\n-                            <\/li>\n-                            <li>\n-                                142369-01: Sun Studio 12.1: Patch for Performance Analyzer Tools\n-                            <\/li>\n-                        <\/ul>\n-                        <p>\n-                            The Solaris X86 patch list is:\n-                        <ul>\n-                            <li>\n-                                119961-07: SunOS 5.10_x86, x64, Patch for profiling libraries and assembler\n-                            <\/li>\n-                            <li>\n-                                119964-21: SunOS 5.10_x86: Shared library patch for C++_x86\n-                            <\/li>\n-                            <li>\n-                                120754-08: SunOS 5.10_x86: Microtasking libraries (libmtsk) patch\n-                            <\/li>\n-                            <li>\n-                                141858-06: Sun Studio 12 Update 1_x86: Sun Compiler Common patch for x86 backend\n-                            <\/li>\n-                            <li>\n-                                128229-09: Sun Studio 12 Update 1_x86: Patch for C++ Compiler\n-                            <\/li>\n-                            <li>\n-                                142363-05: Sun Studio 12 Update 1_x86: Patch for C Compiler\n-                            <\/li>\n-                            <li>\n-                                142368-01: Sun Studio 12.1_x86: Patch for Performance Analyzer Tools\n-                            <\/li>\n-                        <\/ul>\n-                        <p> \n-                            Place the <code>bin<\/code> directory in <code>PATH<\/code>.\n-                        <p>\n-                            The Oracle Solaris Studio Express compilers at:\n-                            <a href=\"http:\/\/www.oracle.com\/technetwork\/server-storage\/solarisstudio\/downloads\/index-jsp-142582.html\" target=\"_blank\">\n-                                Oracle Solaris Studio Express Download site<\/a>\n-                            are also an option, although these compilers have not\n-                            been extensively used yet.\n-                    <\/blockquote>\n-\n-                <\/blockquote> <!-- Solaris -->\n-\n-                <h4><a name=\"windows\">Windows<\/a><\/h4>\n-                <blockquote>\n-\n-                    <h5><a name=\"toolkit\">Windows Unix Toolkit<\/a><\/h5>\n-                    <blockquote>\n-                        Building on Windows requires a Unix-like environment, notably a \n-                        Unix-like shell.\n-                        There are several such environments available of which \n-                        <a href=\"http:\/\/www.cygwin.com\/\">Cygwin<\/a> and \n-                        <a href=\"http:\/\/www.mingw.org\/wiki\/MSYS\">MinGW\/MSYS<\/a> are \n-                        currently supported for\n-                        the OpenJDK build. One of the differences of these \n-                        systems from standard Windows tools is the way\n-                        they handle Windows path names, particularly path names which contain\n-                        spaces, backslashes as path separators and possibly drive letters. \n-                        Depending\n-                        on the use case and the specifics of each environment these path \n-                        problems can\n-                        be solved by a combination of quoting whole paths, translating \n-                        backslashes to\n-                        forward slashes, escaping backslashes with additional backslashes and\n-                        translating the path names to their \n-                        <a href=\"http:\/\/en.wikipedia.org\/wiki\/8.3_filename\">\n-                            \"8.3\" version<\/a>.\n-\n-                        <h6><a name=\"cygwin\">CYGWIN<\/a><\/h6>\n-                        <blockquote>\n-                            CYGWIN is an open source, Linux-like environment which tries to emulate\n-                            a complete POSIX layer on Windows. It tries to be smart about path names\n-                            and can usually handle all kinds of paths if they are correctly quoted\n-                            or escaped although internally it maps drive letters <code>&lt;drive&gt;:<\/code> \n-                            to a virtual directory <code>\/cygdrive\/&lt;drive&gt;<\/code>.\n-                            <p>\n-                                You can always use the <code>cygpath<\/code> utility to map pathnames with spaces\n-                                or the backslash character into the <code>C:\/<\/code> style of pathname\n-                                (called 'mixed'), e.g. <code>cygpath -s -m \"<i>path<\/i>\"<\/code>.\n-                            <\/p>\n-                            <p>\n-                                Note that the use of CYGWIN creates a unique problem with regards to\n-                                setting <a href=\"#path\"><code>PATH<\/code><\/a>. Normally on Windows\n-                                the <code>PATH<\/code> variable contains directories\n-                                separated with the \";\" character (Solaris and Linux use \":\").\n-                                With CYGWIN, it uses \":\", but that means that paths like \"C:\/path\"\n-                                cannot be placed in the CYGWIN version  of <code>PATH<\/code> and\n-                                instead CYGWIN uses something like <code>\/cygdrive\/c\/path<\/code>\n-                                which CYGWIN understands, but only CYGWIN understands.\n-                            <\/p>\n-                            <p>\n-                                The OpenJDK build requires CYGWIN version 1.7.16 or newer.\n-                                Information about CYGWIN can\n-                                be obtained from the CYGWIN website at\n-                                <a href=\"http:\/\/www.cygwin.com\" target=\"_blank\">www.cygwin.com<\/a>.\n-                            <\/p>\n-                            <p>\n-                                By default CYGWIN doesn't install all the tools required for building\n-                                the OpenJDK.\n-                                Along with the default installation, you need to install\n-                                the following tools.\n-                            <blockquote>\n-                                <table border=\"1\">\n-                                    <thead>\n-                                        <tr>\n-                                            <td>Binary Name<\/td>\n-                                            <td>Category<\/td>\n-                                            <td>Package<\/td>\n-                                            <td>Description<\/td>\n-                                        <\/tr>\n-                                    <\/thead>\n-                                    <tbody>\n-                                        <tr>\n-                                            <td>ar.exe<\/td>\n-                                            <td>Devel<\/td>\n-                                            <td>binutils<\/td>\n-                                            <td>\n-                                                The GNU assembler, linker and binary utilities\n-                                            <\/td>\n-                                        <\/tr>\n-                                        <tr>\n-                                            <td>make.exe<\/td>\n-                                            <td>Devel<\/td>\n-                                            <td>make<\/td>\n-                                            <td>\n-                                                The GNU version of the 'make' utility built for CYGWIN\n-                                            <\/td>\n-                                        <\/tr>\n-                                        <tr>\n-                                            <td>m4.exe<\/td>\n-                                            <td>Interpreters<\/td>\n-                                            <td>m4<\/td>\n-                                            <td>\n-                                                GNU implementation of the traditional Unix macro\n-                                                processor\n-                                            <\/td>\n-                                        <\/tr>\n-                                        <tr>\n-                                            <td>cpio.exe<\/td>\n-                                            <td>Utils<\/td>\n-                                            <td>cpio<\/td>\n-                                            <td>\n-                                                A program to manage archives of files\n-                                            <\/td>\n-                                        <\/tr>\n-                                        <tr>\n-                                            <td>gawk.exe<\/td>\n-                                            <td>Utils<\/td>\n-                                            <td>awk<\/td>\n-                                            <td>\n-                                                Pattern-directed scanning and processing language\n-                                            <\/td>\n-                                        <\/tr>\n-                                        <tr>\n-                                            <td>file.exe<\/td>\n-                                            <td>Utils<\/td>\n-                                            <td>file<\/td>\n-                                            <td>\n-                                                Determines file type using 'magic' numbers\n-                                            <\/td>\n-                                        <\/tr>\n-                                        <tr>\n-                                            <td>zip.exe<\/td>\n-                                            <td>Archive<\/td>\n-                                            <td>zip<\/td>\n-                                            <td>\n-                                                Package and compress (archive) files\n-                                            <\/td>\n-                                        <\/tr>\n-                                        <tr>\n-                                            <td>unzip.exe<\/td>\n-                                            <td>Archive<\/td>\n-                                            <td>unzip<\/td>\n-                                            <td>\n-                                                Extract compressed files in a ZIP archive\n-                                            <\/td>\n-                                        <\/tr>\n-                                        <tr>\n-                                            <td>free.exe<\/td>\n-                                            <td>System<\/td>\n-                                            <td>procps<\/td>\n-                                            <td>\n-                                                Display amount of free and used memory in the system\n-                                            <\/td>\n-                                        <\/tr>\n-                                    <\/tbody>\n-                                <\/table>\n-                            <\/blockquote>\n-                            Note that the CYGWIN software can conflict with other non-CYGWIN\n-                            software on your Windows system.\n-                            CYGWIN provides a\n-                            <a href=\"http:\/\/cygwin.com\/faq\/faq.using.html\" target=\"_blank\">FAQ<\/a> for\n-                            known issues and problems, of particular interest is the\n-                            section on\n-                            <a href=\"http:\/\/cygwin.com\/faq\/faq.using.html#faq.using.bloda\" target=\"_blank\">\n-                                BLODA (applications that interfere with CYGWIN)<\/a>.\n-                        <\/blockquote>\n-\n-                        <h6><a name=\"msys\">MinGW\/MSYS<\/a><\/h6> \n-                        <blockquote>\n-                            MinGW (\"Minimalist GNU for Windows\") is a collection of free Windows\n-                            specific header files and import libraries combined with GNU toolsets that\n-                            allow one to produce native Windows programs that do not rely on any\n-                            3rd-party C runtime DLLs. MSYS is a supplement to MinGW which allows building\n-                            applications and programs which rely on traditional UNIX tools to\n-                            be present. Among others this includes tools like <code>bash<\/code>\n-                            and <code>make<\/code>.\n-                            See <a href=\"http:\/\/www.mingw.org\/wiki\/MSYS\" target=\"_blank\">MinGW\/MSYS<\/a>\n-                            for more information.\n-                            <p>\n-                                Like Cygwin, MinGW\/MSYS can handle different types of path formats. They\n-                                are internally converted to paths with forward slashes and drive letters\n-                                <code>&lt;drive&gt;:<\/code> replaced by a virtual\n-                                directory <code>\/&lt;drive&gt;<\/code>.  Additionally, MSYS automatically\n-                                detects binaries compiled for the MSYS environment and feeds them with the\n-                                internal, Unix-style path names. If native Windows applications are called\n-                                from within MSYS programs their path arguments are automatically converted\n-                                back to Windows style path names with drive letters and backslashes as\n-                                path separators. This may cause problems for Windows applications which\n-                                use forward slashes as parameter separator (e.g. <code>cl \/nologo \/I<\/code>)\n-                                because MSYS may wrongly <a href=\"http:\/\/mingw.org\/wiki\/Posix_path_conversion\">\n-                                    replace such parameters by drive letters<\/a>.\n-                            <\/p>\n-                            <p>\n-                                In addition to the tools which will be installed\n-                                by default, you have\n-                                to manually install the\n-                                <code>msys-zip<\/code> and\n-                                <code>msys-unzip<\/code> packages.\n-                                This can be easily done with the MinGW command line installer:\n-                            <blockquote> \n-                                <code>mingw-get.exe install msys-zip<\/code>\n-                                <br>\n-                                <code>mingw-get.exe install msys-unzip<\/code>\n-                            <\/blockquote> \n-                        <\/blockquote>\n-\n-                    <\/blockquote>\n-\n-                    <h5><a name=\"vs2010\">Visual Studio 2010 Compilers<\/a><\/h5>\n-                    <blockquote>\n-                        <p>\n-                            The 32-bit and 64-bit OpenJDK Windows build requires\n-                            Microsoft Visual Studio C++ 2010 (VS2010) Professional\n-                            Edition or Express compiler.\n-                            The compiler and other tools are expected to reside\n-                            in the location defined by the variable\n-                            <code>VS100COMNTOOLS<\/code> which\n-                            is set by the Microsoft Visual Studio installer.\n-                        <\/p>\n-                        <p>\n-                            Only the C++ part of VS2010 is needed.\n-                            Try to let the installation go to the default \n-                            install directory.\n-                            Always reboot your system after installing VS2010.\n-                            The system environment variable VS100COMNTOOLS \n-                            should be\n-                            set in your environment.\n-                        <\/p>\n-                        <p>\n-                            Make sure that TMP and TEMP are also set \n-                            in the environment\n-                            and refer to Windows paths that exist, \n-                            like <code>C:\\temp<\/code>,\n-                            not <code>\/tmp<\/code>, not <code>\/cygdrive\/c\/temp<\/code>, \n-                            and not <code>C:\/temp<\/code>.\n-                            <code>C:\\temp<\/code> is just an example, \n-                            it is assumed that this area is\n-                            private to the user, so by default \n-                            after installs you should\n-                            see a unique user path in these variables.\n-                        <\/p>\n-                    <\/blockquote>\n-\n-\n-                <\/blockquote> <!-- Windows -->\n-\n-                <h4><a name=\"macosx\">Mac OS X<\/a><\/h4>\n-                <blockquote>\n-                    Make sure you get the right XCode version.\n-                <\/blockquote> <!-- Mac OS X -->\n-\n-            <\/blockquote>\n-\n-            <!-- ====================================================== -->\n-            <hr>\n-            <h3><a name=\"configure\">Configure<\/a><\/h3>\n-            <blockquote>\n-                The basic invocation of the <code>configure<\/code> script\n-                looks like:\n-                <blockquote>\n-                    <b><code>bash .\/configure [<i>options<\/i>]<\/code><\/b>\n-                <\/blockquote>\n-                This will create an output directory containing the\n-                \"configuration\" and setup an area for the build result.\n-                This directory typically looks like:\n-                <blockquote>\n-                    <b><code>build\/linux-x64-normal-server-release<\/code><\/b>\n-                <\/blockquote>\n-                <code>configure<\/code> will try to figure out what system you are running on \n-                and where all necessary build components are.\n-                If you have all prerequisites for building installed,\n-                it should find everything.\n-                If it fails to detect any component automatically,\n-                it will exit and inform you about the problem.\n-                When this happens, read more below in\n-                <a href=\"#configureoptions\">the <code>configure<\/code> options<\/a>.\n-                <p>\n-                    Some examples:\n-                <\/p>\n-                <table border=\"1\">\n-                    <thead>\n-                        <tr>\n-                            <th>Description<\/th>\n-                            <th>Configure Command Line<\/th>\n-                        <\/tr>\n-                    <\/thead>                   \n-                    <tbody>\n-                        <tr>\n-                            <td>Windows 32bit build with freetype specified<\/td>\n-                            <td>\n-                                <code>bash .\/configure --with-freetype=\/cygdrive\/c\/freetype-i586 --with-target-bits=32<\/code>   \n-                            <\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td>Debug 64bit Build<\/td>\n-                            <td>\n-                                <code>bash .\/configure --enable-debug --with-target-bits=64<\/code>   \n-                            <\/td>\n-                        <\/tr>\n-                    <\/tbody>\n-                <\/table>\n-\n-                <!-- ====================================================== -->\n-                <h4><a name=\"configureoptions\">Configure Options<\/a><\/h4>\n-                <blockquote>\n-                    Complete details on all the OpenJDK <code>configure<\/code> options can\n-                    be seen with:\n-                    <blockquote>\n-                        <b><code>bash .\/configure --help=short<\/code><\/b>\n-                    <\/blockquote>\n-                    Use <code>-help<\/code> to see all the <code>configure<\/code> options\n-                    available.\n-\n-                    You can generate any number of different configurations,\n-                    e.g. debug, release, 32, 64, etc.\n-\n-                    Some of the more commonly used <code>configure<\/code> options are:\n-\n-                    <table border=\"1\">\n-                        <thead>\n-                            <tr>\n-                                <th width=\"300\">OpenJDK Configure Option<\/th>\n-                                <th>Description<\/th>\n-                            <\/tr>\n-                        <\/thead>                   \n-                        <tbody>\n-                            <tr>\n-                                <td><b><code>--enable-debug<\/code><\/b><\/td>\n-                                <td>\n-                                    set the debug level to fastdebug (this is a shorthand for\n-                                    <code>--with-debug-level=fastdebug<\/code>)\n-                                <\/td>\n-                            <\/tr>\n-                            <tr>\n-                                <td><b><code>--with-alsa=<\/code><\/b><i>path<\/i><\/td>\n-                                <td>\n-                                    select the location of the\n-                                    <a name=\"alsa\">Advanced Linux Sound Architecture (ALSA)<\/a>\n-                                    <br>                        \n-                                    Version 0.9.1 or newer of the ALSA files are\n-                                    required for building the OpenJDK on Linux.\n-                                    These Linux files are usually available from an \"alsa\"\n-                                    of \"libasound\"\n-                                    development package,\n-                                    and it's highly recommended that you try and use\n-                                    the package provided by the particular version of Linux that\n-                                    you are using.\n-                                <\/td>\n-                            <\/tr>   \n-                            <tr>\n-                                <td><b><code>--with-boot-jdk=<\/code><\/b><i>path<\/i><\/td>\n-                                <td>\n-                                    select the <a href=\"#bootjdk\">Bootstrap JDK<\/a>\n-                                <\/td>\n-                            <\/tr>                      \n-                            <tr>\n-                                <td><b><code>--with-boot-jdk-jvmargs=<\/code><\/b>\"<i>args<\/i>\"<\/td>\n-                                <td>\n-                                    provide the JVM options to be used to run the \n-                                    <a href=\"#bootjdk\">Bootstrap JDK<\/a>\n-                                <\/td>\n-                            <\/tr>\n-                            <tr>\n-                                <td><b><code>--with-cacerts=<\/code><\/b><i>path<\/i><\/td>\n-                                <td>\n-                                    select the path to the cacerts file.\n-                                    <br>\n-                                    See <a href=\"http:\/\/en.wikipedia.org\/wiki\/Certificate_Authority\" target=\"_blank\">\n-                                        http:\/\/en.wikipedia.org\/wiki\/Certificate_Authority<\/a>\n-                                    for a better understanding of the Certificate Authority (CA).\n-                                    A certificates file named \"cacerts\"\n-                                    represents a system-wide keystore with CA certificates. \n-                                    In JDK and JRE\n-                                    binary bundles, the \"cacerts\" file contains root CA certificates from\n-                                    several public CAs (e.g., VeriSign, Thawte, and Baltimore).\n-                                    The source contain a cacerts file\n-                                    without CA root certificates. \n-                                    Formal JDK builders will need to secure\n-                                    permission from each public CA and include the certificates into their\n-                                    own custom cacerts file. \n-                                    Failure to provide a populated cacerts file\n-                                    will result in verification errors of a certificate chain during runtime.\n-                                    By default an empty cacerts file is provided and that should be\n-                                    fine for most JDK developers.\n-                                <\/td>\n-                            <\/tr>    \n-                            <tr>\n-                                <td><b><code>--with-cups=<\/code><\/b><i>path<\/i><\/td>\n-                                <td>\n-                                    select the CUPS install location\n-                                    <br>\n-                                    The\n-                                    <a name=\"cups\">Common UNIX Printing System (CUPS) Headers<\/a>\n-                                    are required for building the \n-                                    OpenJDK on Solaris and Linux.\n-                                    The Solaris header files can be obtained by installing \n-                                    the package <strong>SFWcups<\/strong> from the Solaris Software\n-                                    Companion CD\/DVD, these often will be installed into the\n-                                    directory <code>\/opt\/sfw\/cups<\/code>.\n-                                    <br>\n-                                    The CUPS header files can always be downloaded from\n-                                    <a href=\"http:\/\/www.cups.org\" target=\"_blank\">www.cups.org<\/a>.\n-                                <\/td>\n-                            <\/tr>    \n-                            <tr>\n-                                <td><b><code>--with-cups-include=<\/code><\/b><i>path<\/i><\/td>\n-                                <td>\n-                                    select the CUPS include directory location\n-                                <\/td>\n-                            <\/tr>                           \n-                            <tr>\n-                                <td><b><code>--with-debug-level=<\/code><\/b><i>level<\/i><\/td>\n-                                <td>\n-                                    select the debug information level of release,\n-                                    fastdebug, or slowdebug\n-                                <\/td>\n-                            <\/tr>                          \n-                            <tr>\n-                                <td><b><code>--with-dev-kit=<\/code><\/b><i>path<\/i><\/td>\n-                                <td>\n-                                    select location of the compiler install or\n-                                    developer install location\n-                                <\/td>\n-                            <\/tr>       \n-                            <tr>\n-                                <td><b><code>--with-freetype=<\/code><\/b><i>path<\/i><\/td>\n-                                <td>\n-                                    select the freetype files to use.\n-                                    <br>\n-                                    Expecting the\n-                                    <a name=\"freetype\">freetype<\/a> libraries under\n-                                    <code>lib\/<\/code> and the\n-                                    headers under <code>include\/<\/code>.\n-                                    <br>\n-                                    Version 2.3 or newer of FreeType is required.\n-                                    On Unix systems required files can be available as part of your\n-                                    distribution (while you still may need to upgrade them).\n-                                    Note that you need development version of package that \n-                                    includes both the FreeType library and header files.\n-                                    <br>\n-                                    You can always download latest FreeType version from the\n-                                    <a href=\"http:\/\/www.freetype.org\" target=\"_blank\">FreeType website<\/a>.\n-                                    <br>\n-                                    Building the freetype 2 libraries from scratch is also possible,\n-                                    however on Windows refer to the\n-                                    <a href=\"http:\/\/freetype.freedesktop.org\/wiki\/FreeType_DLL\">\n-                                        Windows FreeType DLL build instructions<\/a>.\n-                                    <br>\n-                                    Note that by default FreeType is built with byte code hinting\n-                                    support disabled due to licensing restrictions.\n-                                    In this case, text appearance and metrics are expected to\n-                                    differ from Sun's official JDK build.\n-                                    See\n-                                    <a href=\"http:\/\/freetype.sourceforge.net\/freetype2\/index.html\">\n-                                        the SourceForge FreeType2 Home Page\n-                                    <\/a>\n-                                    for more information.\n-                                <\/td>\n-                            <\/tr>                          \n-                            <tr>\n-                                <td><b><code>--with-import-hotspot=<\/code><\/b><i>path<\/i><\/td>\n-                                <td>\n-                                    select the location to find hotspot\n-                                    binaries from a previous build to avoid building\n-                                    hotspot\n-                                <\/td>\n-                            <\/tr>                          \n-                            <tr>\n-                                <td><b><code>--with-target-bits=<\/code><\/b><i>arg<\/i><\/td>\n-                                <td>\n-                                    select 32 or 64 bit build\n-                                <\/td>\n-                            <\/tr>                           \n-                            <tr>\n-                                <td><b><code>--with-jvm-variants=<\/code><\/b><i>variants<\/i><\/td>\n-                                <td>\n-                                    select the JVM variants to build from, comma\n-                                    separated list that can include:\n-                                    server, client, kernel, zero and zeroshark\n-                                <\/td>\n-                            <\/tr>                           \n-                            <tr>\n-                                <td><b><code>--with-memory-size=<\/code><\/b><i>size<\/i><\/td>\n-                                <td>\n-                                    select the RAM size that GNU make will think\n-                                    this system has\n-                                <\/td>\n-                            <\/tr>                            \n-                            <tr>\n-                                <td><a name=\"msvcrNN\"><b><code>--with-msvcr-dll=<\/code><\/b><i>path<\/i><\/a><\/td>\n-                                <td>\n-                                    select the <code>msvcr100.dll<\/code>\n-                                    file to include in the\n-                                    Windows builds (C\/C++ runtime library for\n-                                    Visual Studio).\n-                                    <br>\n-                                    This is usually picked up automatically\n-                                    from the redist\n-                                    directories of Visual Studio 2010.\n-                                <\/td>\n-                            <\/tr>                            \n-                            <tr>\n-                                <td><b><code>--with-num-cores=<\/code><\/b><i>cores<\/i><\/td>\n-                                <td>\n-                                    select the number of cores to use (processor\n-                                    count or CPU count)\n-                                <\/td>\n-                            <\/tr>\n-                            <tr>\n-                                <td><b><code>--with-x=<\/code><\/b><i>path<\/i><\/td>\n-                                <td>\n-                                    select the location of the X11 and xrender files.\n-                                    <br>\n-                                    The\n-                                    <a name=\"xrender\">XRender Extension Headers<\/a>\n-                                    are required for building the\n-                                    OpenJDK on Solaris and Linux.\n-                                    <br>\n-                                    The Linux header files are usually available from a \"Xrender\"\n-                                    development package, it's recommended that you try and use\n-                                    the package provided by the particular distribution of Linux that\n-                                    you are using.\n-                                    <br>\n-                                    The Solaris XRender header files is\n-                                    included with the other X11 header files\n-                                    in the package <strong>SFWxwinc<\/strong>\n-                                    on new enough versions of\n-                                    Solaris and will be installed in\n-                                    <code>\/usr\/X11\/include\/X11\/extensions\/Xrender.h<\/code> or\n-                                    <code>\/usr\/openwin\/share\/include\/X11\/extensions\/Xrender.h<\/code>\n-                                <\/td>\n-                            <\/tr>\n-                        <\/tbody>\n-                    <\/table>\n-                <\/blockquote>\n-\n-            <\/blockquote>\n-\n-            <!-- ====================================================== -->\n-            <hr>\n-            <h3><a name=\"make\">Make<\/a><\/h3>\n-            <blockquote>\n-                The basic invocation of the <code>make<\/code> utility\n-                looks like:\n-                <blockquote>\n-                    <b><code>make all<\/code><\/b>\n-                <\/blockquote>\n-                This will start the build to the output directory containing the\n-                \"configuration\" that was created by the <code>configure<\/code>\n-                script. Run <code>make help<\/code> for more information on\n-                the available targets.\n-                <br>\n-                There are some of the make targets that\n-                are of general interest:\n-                <table border=\"1\">\n-                    <thead>\n-                        <tr>\n-                            <th>Make Target<\/th>\n-                            <th>Description<\/th>\n-                        <\/tr>\n-                    <\/thead>                   \n-                    <tbody>\n-                        <tr>\n-                            <td><i>empty<\/i><\/td>\n-                            <td>build everything but no images<\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td><b><code>all<\/code><\/b><\/td>\n-                            <td>build everything including images<\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td><b><code>all-conf<\/code><\/b><\/td>\n-                            <td>build all configurations<\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td><b><code>images<\/code><\/b><\/td>\n-                            <td>create complete j2sdk and j2re images<\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td><b><code>install<\/code><\/b><\/td>\n-                            <td>install the generated images locally, \n-                                typically in <code>\/usr\/local<\/code><\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td><b><code>clean<\/code><\/b><\/td>\n-                            <td>remove all files generated by make, \n-                                but not those generated by <code>configure<\/code><\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td><b><code>dist-clean<\/code><\/b><\/td>\n-                            <td>remove all files generated by both \n-                                and <code>configure<\/code> (basically killing the configuration)<\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td><b><code>help<\/code><\/b><\/td>\n-                            <td>give some help on using <code>make<\/code>, \n-                                including some interesting make targets<\/td>\n-                        <\/tr>\n-                    <\/tbody>\n-                <\/table>\n-            <\/blockquote>\n-        <\/blockquote>\n-\n-        <!-- ====================================================== -->\n-        <hr>\n-        <h2><a name=\"testing\">Testing<\/a><\/h2>\n-        <blockquote>\n-            When the build is completed, you should see the generated\n-            binaries and associated files in the <code>j2sdk-image<\/code> \n-            directory in the output directory. \n-            In particular, the \n-            <code>build\/<i>*<\/i>\/images\/j2sdk-image\/bin<\/code>\n-            directory should contain executables for the \n-            OpenJDK tools and utilities for that configuration.\n-            The testing tool <code>jtreg<\/code> will be needed\n-            and can be found at:\n-            <a href=\"http:\/\/openjdk.java.net\/jtreg\/\" target=\"_blank\">\n-                the jtreg site<\/a>.\n-            The provided regression tests in the repositories\n-            can be run with the command:\n-            <blockquote>\n-                <code><b>cd test &amp;&amp; make PRODUCT_HOME=`pwd`\/..\/build\/*\/images\/j2sdk-image all<\/b><\/code>\n-            <\/blockquote>\n-        <\/blockquote>\n-\n-        <!-- ====================================================== -->\n-        <!-- ====================================================== -->\n-        <!-- ====================================================== -->\n-        <!-- ====================================================== -->\n-        <!-- ====================================================== -->\n-        <!-- ====================================================== -->\n-        <!-- ====================================================== -->\n-        <!-- ====================================================== -->\n-        <!-- ====================================================== -->\n-\n-        <!-- ====================================================== -->\n-        <hr>\n-        <h2><a name=\"hints\">Appendix A: Hints and Tips<\/a><\/h2>\n-        <blockquote>\n-\n-            <h3><a name=\"faq\">FAQ<\/a><\/h3>\n-            <blockquote>\n-\n-                <p>\n-                    <b>Q:<\/b> The <code>generated-configure.sh<\/code> file looks horrible! \n-                    How are you going to edit it?\n-                    <br>\n-                    <b>A:<\/b> The <code>generated-configure.sh<\/code> file is generated (think\n-                    \"compiled\") by the autoconf tools. The source code is\n-                    in <code>configure.ac<\/code> and various .m4 files in common\/autoconf,\n-                    which are much more readable.\n-                <\/p>\n-\n-                <p>\n-                    <b>Q:<\/b> \n-                    Why is the <code>generated-configure.sh<\/code> file checked in, \n-                    if it is generated?\n-                    <br>\n-                    <b>A:<\/b> \n-                    If it was not generated, every user would need to have the autoconf \n-                    tools installed, and re-generate the <code>configure<\/code> file\n-                    as the first step. \n-                    Our goal is to minimize the work needed to be done by the user \n-                    to start building OpenJDK, and to minimize\n-                    the number of external dependencies required.\n-                <\/p>\n-\n-                <p>\n-                    <b>Q:<\/b>\n-                    Do you require a specific version of autoconf for regenerating\n-                    <code>generated-configure.sh<\/code>?\n-                    <br>\n-                    <b>A:<\/b>\n-                    Yes, version 2.69 is required and should be easy\n-                    enough to aquire on all supported operating\n-                    systems.  The reason for this is to avoid\n-                    large spurious changes in <code>generated-configure.sh<\/code>.\n-                <\/p>\n-\n-                <p>\n-                    <b>Q:<\/b>\n-                    How do you regenerate <code>generated-configure.sh<\/code>\n-                    after making changes to the input files?\n-                    <br>\n-                    <b>A:<\/b>\n-                    Regnerating <code>generated-configure.sh<\/code>\n-                    should always be done using the\n-                    script <code>common\/autoconf\/autogen.sh<\/code> to\n-                    ensure that the correct files get updated. This\n-                    script should also be run after mercurial tries to\n-                    merge <code>generated-configure.sh<\/code> as a\n-                    merge of the generated file is not guaranteed to\n-                    be correct.\n-                <\/p>\n-\n-                <p>\n-                    <b>Q:<\/b> \n-                    What are the files in <code>common\/makefiles\/support\/*<\/code> for? \n-                    They look like gibberish.\n-                    <br>\n-                    <b>A:<\/b>\n-                    They are a somewhat ugly hack to compensate for command line length\n-                    limitations on certain platforms (Windows, Solaris).\n-                    Due to a combination of limitations in make and the shell, \n-                    command lines containing too many files will not work properly. \n-                    These\n-                    helper files are part of an elaborate hack that will compress the\n-                    command line in the makefile and then uncompress it safely. \n-                    We're\n-                    not proud of it, but it does fix the problem. \n-                    If you have any better suggestions, we're all ears! :-)\n-                <\/p>\n-\n-                <p>\n-                    <b>Q:<\/b> \n-                    I want to see the output of the commands that make runs, \n-                    like in the old build. How do I do that?\n-                    <br>\n-                    <b>A:<\/b> \n-                    You specify the <code>LOG<\/code> variable to make. There are\n-                    several log levels:\n-                <\/p>\n-                <blockquote>\n-                    <ul>\n-                        <li>\n-                            <b><code>warn<\/code><\/b> &mdash; Default and very quiet.\n-                        <\/li>\n-                        <li>\n-                            <b><code>info<\/code><\/b> &mdash; Shows more progress information\n-                            than warn.\n-                        <\/li>\n-                        <li>\n-                            <b><code>debug<\/code><\/b> &mdash; Echos all command lines and\n-                            prints all macro calls for compilation definitions.\n-                        <\/li>\n-                        <li>\n-                            <b><code>trace<\/code><\/b> &mdash; Echos all $(shell) command\n-                            lines as well.\n-                        <\/li>\n-                    <\/ul>\n-                <\/blockquote>\n-\n-                <p>\n-                    <b>Q:<\/b> \n-                    When do I have to re-run <code>configure<\/code>?\n-                    <br>\n-                    <b>A:<\/b> \n-                    Normally you will run <code>configure<\/code> only once for creating a \n-                    configuration. \n-                    You need to re-run configuration only if you want to change any\n-                    configuration options, \n-                    or if you pull down changes to the <code>configure<\/code> script.\n-                <\/p>\n-\n-                <p>\n-                    <b>Q:<\/b> \n-                    I have added a new source file. Do I need to modify the makefiles?\n-                    <br>\n-                    <b>A:<\/b> \n-                    Normally, no. If you want to create e.g. a new native\n-                    library, \n-                    you will need to modify the makefiles. But for normal file\n-                    additions or removals, no changes are needed. There are certan\n-                    exceptions for some native libraries where the source files are spread\n-                    over many directories which also contain sources for other\n-                    libraries. In these cases it was simply easier to create include lists\n-                    rather than excludes.\n-                <\/p>\n-\n-                <p>\n-                    <b>Q:<\/b>\n-                    When I run <code>configure --help<\/code>, I see many strange options, \n-                    like <code>--dvidir<\/code>. What is this?\n-                    <br>\n-                    <b>A:<\/b> \n-                    Configure provides a slew of options by default, to all projects \n-                    that use autoconf. Most of them are not used in OpenJDK,\n-                    so you can safely ignore them. To list only OpenJDK specific features, \n-                    use <code>configure --help=short<\/code> instead.\n-                <\/p>\n-\n-                <p>\n-                    <b>Q:<\/b> \n-                    <code>configure<\/code> provides OpenJDK-specific features such as\n-                    <code>--with-builddeps-server<\/code> that are not\n-                    described in this document. What about those? \n-                    <br>\n-                    <b>A:<\/b>\n-                    Try them out if you like! But be aware that most of these are \n-                    experimental features. \n-                    Many of them don't do anything at all at the moment; the option \n-                    is just a placeholder. Others depend on\n-                    pieces of code or infrastructure that is currently \n-                    not ready for prime time.\n-                <\/p>\n-\n-                <p>\n-                    <b>Q:<\/b> \n-                    How will you make sure you don't break anything?\n-                    <br>\n-                    <b>A:<\/b> \n-                    We have a script that compares the result of the new build system\n-                    with the result of the old. For most part, we aim for (and achieve)\n-                    byte-by-byte identical output. There are however technical issues \n-                    with e.g. native binaries, which might differ in a byte-by-byte \n-                    comparison, even\n-                    when building twice with the old build system. \n-                    For these, we compare relevant aspects \n-                    (e.g. the symbol table and file size). \n-                    Note that we still don't have 100%\n-                    equivalence, but we're close.\n-                <\/p>\n-\n-                <p>\n-                    <b>Q:<\/b> \n-                    I noticed this thing X in the build that looks very broken by design. \n-                    Why don't you fix it?\n-                    <br>\n-                    <b>A:<\/b>\n-                    Our goal is to produce a build output that is as close as \n-                    technically possible to the old build output. \n-                    If things were weird in the old build,\n-                    they will be weird in the new build. \n-                    Often, things were weird before due to obscurity, \n-                    but in the new build system the weird stuff comes up to the surface.\n-                    The plan is to attack these things at a later stage, \n-                    after the new build system is established.\n-                <\/p>\n-\n-                <p>\n-                    <b>Q:<\/b> \n-                    The code in the new build system is not that well-structured.\n-                    Will you fix this?\n-                    <br>\n-                    <b>A:<\/b>\n-                    Yes! The new build system has grown bit by bit as we converted \n-                    the old system. When all of the old build system is converted,\n-                    we can take a step back and clean up the structure of the new build\n-                    system. Some of this we plan to do before replacing the old build\n-                    system and some will need to wait until after.\n-                <\/p>\n-\n-                <p>\n-                    <b>Q:<\/b> \n-                    Is anything able to use the results of the new build's default make target?\n-                    <br>\n-                    <b>A:<\/b> \n-                    Yes, this is the minimal (or roughly minimal) \n-                    set of compiled output needed for a developer to actually \n-                    execute the newly built JDK. The idea is that in an incremental \n-                    development fashion, when doing a normal make, \n-                    you should only spend time recompiling what's changed \n-                    (making it purely incremental) and only do the work that's \n-                    needed to actually run and test your code.\n-                    The packaging stuff that is part of the <code>images<\/code>\n-                    target is not needed for a normal developer who wants to\n-                    test his new code. Even if it's quite fast, it's still unnecessary. \n-                    We're targeting sub-second incremental rebuilds! ;-) \n-                    (Or, well, at least single-digit seconds...)\n-                <\/p>\n-\n-                <p>\n-                    <b>Q:<\/b>\n-                    I usually set a specific environment variable when building, \n-                    but I can't find the equivalent in the new build. \n-                    What should I do?\n-                    <br>\n-                    <b>A:<\/b>\n-                    It might very well be that we have neglected to add support for\n-                    an option that was actually used from outside the build system.\n-                    Email us and we will add support for it!\n-                <\/p>\n-\n-            <\/blockquote>\n-\n-            <h3><a name=\"performance\">Build Performance Tips<\/a><\/h3>\n-            <blockquote>\n-\n-                <p>Building OpenJDK requires a lot of horsepower. \n-                    Some of the build tools can be adjusted to utilize more or less\n-                    of resources such as\n-                    parallel threads and memory. \n-                    The <code>configure<\/code> script analyzes your system and selects reasonable \n-                    values for such options based on your hardware.\n-                    If you encounter resource problems, such as out of memory conditions, \n-                    you can modify the detected values with:<\/p>\n-\n-                <ul>\n-                    <li>\n-                        <b><code>--with-num-cores<\/code><\/b> \n-                        &mdash; \n-                        number of cores in the build system,\n-                        e.g. <code>--with-num-cores=8<\/code>\n-                    <\/li>\n-                    <li>\n-                        <b><code>--with-memory-size<\/code><\/b> \n-                        &mdash; memory (in MB) available in the build system,\n-                        e.g. <code>--with-memory-size=1024<\/code>\n-                    <\/li>\n-                <\/ul>\n-\n-                <p>It might also be necessary to specify the JVM arguments passed \n-                    to the Bootstrap JDK, using e.g.\n-                    <code>--with-boot-jdk-jvmargs=\"-Xmx8G -enableassertions\"<\/code>. \n-                    Doing this will override the default JVM arguments \n-                    passed to the Bootstrap JDK.<\/p>\n-\n-\n-                <p>One of the top goals of the new build system is to improve the\n-                    build performance and decrease the time needed to build. This will\n-                    soon also apply to the java compilation when the Smart Javac wrapper\n-                    is making its way into jdk8. It can be tried in the build-infra\n-                    repository already. You are likely to find that the new build system\n-                    is faster than the old one even without this feature.<\/p>\n-\n-                <p>At the end of a successful execution of <code>configure<\/code>, \n-                    you will get a performance summary, \n-                    indicating how well the build will perform. Here you will\n-                    also get performance hints. \n-                    If you want to build fast, pay attention to those!<\/p>\n-\n-                <h4>Building with ccache<\/h4>\n-\n-                <p>A simple way to radically speed up compilation of native code\n-                    (typically hotspot and native libraries in JDK) is to install\n-                    ccache. This will cache and reuse prior compilation results, if the\n-                    source code is unchanged. However, ccache versions prior to 3.1.4\n-                    does not work correctly with the precompiled headers used in\n-                    OpenJDK. So if your platform supports ccache at 3.1.4 or later, we\n-                    highly recommend installing it. This is currently only supported on\n-                    linux.<\/p> \n-\n-                <h4>Building on local disk<\/h4>\n-\n-                <p>If you are using network shares, e.g. via NFS, for your source code, \n-                    make sure the build directory is situated on local disk. \n-                    The performance\n-                    penalty is extremely high for building on a network share, \n-                    close to unusable.<\/p>\n-\n-                <h4>Building only one JVM<\/h4>\n-\n-                <p>The old build builds multiple JVMs on 32-bit systems (client and\n-                    server; and on Windows kernel as well). In the new build we have\n-                    changed this default to only build server when it's available. This\n-                    improves build times for those not interested in multiple JVMs. To\n-                    mimic the old behavior on platforms that support it, \n-                    use <code>--with-jvm-variants=client,server<\/code>.<\/p>\n-\n-                <h4>Selecting the number of cores to build on<\/h4>\n-\n-                <p>By default, <code>configure<\/code> will analyze your machine and run the make\n-                    process in parallel with as many threads as you have cores. This\n-                    behavior can be overridden, either \"permanently\" (on a <code>configure<\/code>\n-                    basis) using <code>--with-num-cores=N<\/code> or for a single build\n-                    only (on a make basis), using <code>make JOBS=N<\/code>.<\/p>\n-\n-                <p>If you want to make a slower build just this time, to save some CPU\n-                    power for other processes, you can run\n-                    e.g. <code>make JOBS=2<\/code>. This will force the makefiles\n-                    to only run 2 parallel processes, or even <code>make JOBS=1<\/code>\n-                    which will disable parallelism.<\/p>\n-\n-                <p>If you want to have it the other way round, namely having slow \n-                    builds default and override with fast if you're\n-                    impatient, you should call <code>configure<\/code> with \n-                    <code>--with-num-cores=2<\/code>, making 2 the default. \n-                    If you want to run with more\n-                    cores, run <code>make JOBS=8<\/code><\/p>\n-\n-            <\/blockquote>\n-\n-            <h3><a name=\"troubleshooting\">Troubleshooting<\/a><\/h3>\n-            <blockquote>\n-\n-                <h4>Solving build problems<\/h4>\n-\n-                <blockquote>\n-                    If the build fails (and it's not due to a compilation error in \n-                    a source file you've changed), the first thing you should do\n-                    is to re-run the build with more verbosity. \n-                    Do this by adding <code>LOG=debug<\/code> to your make command line.\n-                    <br>\n-                    The build log (with both stdout and stderr intermingled,\n-                    basically the same as you see on your console) can be found as\n-                    <code>build.log<\/code> in your build directory.\n-                    <br>\n-                    You can ask for help on build problems with the new build system \n-                    on either the\n-                    <a href=\"http:\/\/mail.openjdk.java.net\/mailman\/listinfo\/build-dev\">\n-                        build-dev<\/a>\n-                    or the\n-                    <a href=\"http:\/\/mail.openjdk.java.net\/mailman\/listinfo\/build-infra-dev\">\n-                        build-infra-dev<\/a>\n-                    mailing lists. Please include the relevant parts\n-                    of the build log.\n-                    <br>\n-                    A build can fail for any number of reasons. \n-                    Most failures\n-                    are a result of trying to build in an environment in which all the\n-                    pre-build requirements have not been met. \n-                    The first step in\n-                    troubleshooting a build failure is to recheck that you have satisfied\n-                    all the pre-build requirements for your platform.\n-                    Scanning the <code>configure<\/code> log is a good first step, making\n-                    sure that what it found makes sense for your system.\n-                    Look for strange error messages or any difficulties that\n-                    <code>configure<\/code> had in finding things.\n-                    <br>\n-                    Some of the more common problems with builds are briefly\n-                    described\n-                    below, with suggestions for remedies.\n-                    <ul>\n-                        <li>\n-                            <b>Corrupted Bundles on Windows:<\/b>\n-                            <blockquote>\n-                                Some virus scanning software has been known to \n-                                corrupt the\n-                                downloading of zip bundles.\n-                                It may be necessary to disable the 'on access' or \n-                                'real time'\n-                                virus scanning features to prevent this corruption.\n-                                This type of \"real time\" virus scanning can also \n-                                slow down the\n-                                build process significantly.\n-                                Temporarily disabling the feature, or excluding the build\n-                                output directory may be necessary to get correct and\n-                                faster builds.\n-                            <\/blockquote>\n-                        <\/li>\n-                        <li>\n-                            <b>Slow Builds:<\/b>\n-                            <blockquote>\n-                                If your build machine seems to be overloaded from too many\n-                                simultaneous C++ compiles, try setting the \n-                                <code>JOBS=1<\/code> on the <code>make<\/code> command line.\n-                                Then try increasing the count slowly to an acceptable\n-                                level for your system. Also:\n-                                <blockquote>\n-                                    Creating the javadocs can be very slow, \n-                                    if you are running\n-                                    javadoc, consider skipping that step.\n-                                    <br>\n-                                    Faster CPUs, more RAM, and a faster DISK usually helps.\n-                                    The VM build tends to be CPU intensive \n-                                    (many C++ compiles),\n-                                    and the rest of the JDK will often be disk intensive.\n-                                    <br>\n-                                    Faster compiles are possible using a tool called\n-                                    <a href=\"http:\/\/ccache.samba.org\/\" target=\"_blank\">ccache<\/a>.\n-                                <\/blockquote>\n-                            <\/blockquote>\n-                        <\/li>\n-                        <li>\n-                            <b>File time issues:<\/b>\n-                            <blockquote>\n-                                If you see warnings that refer to file time stamps, e.g.\n-                                <blockquote>\n-                                    <i>Warning message:<\/i><code> \n-                                        File `xxx' has modification time in\n-                                        the future.<\/code>\n-                                    <br>\n-                                    <i>Warning message:<\/i> <code> Clock skew detected. \n-                                        Your build may\n-                                        be incomplete.<\/code>\n-                                <\/blockquote>\n-                                These warnings can occur when the clock on the build \n-                                machine is out of\n-                                sync with the timestamps on the source files. \n-                                Other errors, apparently\n-                                unrelated but in fact caused by the clock skew, \n-                                can occur along with\n-                                the clock skew warnings. \n-                                These secondary errors may tend to obscure the\n-                                fact that the true root cause of the problem \n-                                is an out-of-sync clock.\n-                                <p>\n-                                    If you see these warnings, reset the clock on the\n-                                    build\n-                                    machine, run \"<code><i>gmake<\/i> clobber<\/code>\" \n-                                    or delete the directory\n-                                    containing the build output, and restart the \n-                                    build from the beginning.\n-                            <\/blockquote>\n-                        <\/li>\n-                        <li>\n-                            <b>Error message: \n-                                <code>Trouble writing out table to disk<\/code><\/b>\n-                            <blockquote>\n-                                Increase the amount of swap space on your build machine.\n-                                This  could be caused by overloading the system and\n-                                it may be necessary to use:\n-                                <blockquote>\n-                                    <code>make JOBS=1<\/code>\n-                                <\/blockquote>\n-                                to reduce the load on the system.\n-                            <\/blockquote>\n-                        <\/li>\n-                        <li>\n-                            <b>Error Message: \n-                                <code>libstdc++ not found:<\/code><\/b>\n-                            <blockquote>\n-                                This is caused by a missing libstdc++.a library.\n-                                This is installed as part of a specific package\n-                                (e.g. libstdc++.so.devel.386).\n-                                By default some 64-bit Linux versions (e.g. Fedora)\n-                                only install the 64-bit version of the libstdc++ package.\n-                                Various parts of the JDK build require a static\n-                                link of the C++ runtime libraries to allow for maximum\n-                                portability of the built images.\n-                            <\/blockquote>\n-                        <\/li>\n-                        <li>\n-                            <b>Linux Error Message:\n-                                <code>cannot restore segment prot after reloc<\/code><\/b>\n-                            <blockquote>\n-                                This is probably an issue with SELinux (See\n-                                <a href=\"http:\/\/en.wikipedia.org\/wiki\/SELinux\" target=\"_blank\">\n-                                    http:\/\/en.wikipedia.org\/wiki\/SELinux<\/a>).\n-                                Parts of the VM is built without the <code>-fPIC<\/code> for\n-                                performance reasons.\n-                                <p>\n-                                    To completely disable SELinux:\n-                                <ol>\n-                                    <li><code>$ su root<\/code><\/li>\n-                                    <li><code># system-config-securitylevel<\/code><\/li>\n-                                    <li><code>In the window that appears, select the SELinux tab<\/code><\/li>\n-                                    <li><code>Disable SELinux<\/code><\/li>\n-                                <\/ol>\n-                                <p>\n-                                    Alternatively, instead of completely disabling it you could\n-                                    disable just this one check.\n-                                <ol>\n-                                    <li>Select System->Administration->SELinux Management<\/li>\n-                                    <li>In the SELinux Management Tool which appears,\n-                                        select \"Boolean\" from the menu on the left<\/li>\n-                                    <li>Expand the \"Memory Protection\" group<\/li>\n-                                    <li>Check the first item, labeled\n-                                        \"Allow all unconfined executables to use \n-                                        libraries requiring text relocation ...\"<\/li>\n-                                <\/ol>\n-                            <\/blockquote>\n-                        <\/li>\n-                        <li>\n-                            <b>Windows Error Messages:<\/b>\n-                            <br>\n-                            <code>*** fatal error - couldn't allocate heap, ... <\/code>\n-                            <br>\n-                            <code>rm fails with \"Directory not empty\"<\/code>\n-                            <br>\n-                            <code>unzip fails with \"cannot create ... Permission denied\"<\/code>\n-                            <br>\n-                            <code>unzip fails with \"cannot create ... Error 50\"<\/code>\n-                            <br>\n-                            <blockquote>\n-                                The CYGWIN software can conflict with other non-CYGWIN\n-                                software. See the CYGWIN FAQ section on\n-                                <a href=\"http:\/\/cygwin.com\/faq\/faq.using.html#faq.using.bloda\" target=\"_blank\">\n-                                    BLODA (applications that interfere with CYGWIN)<\/a>.\n-                            <\/blockquote>\n-                        <\/li>\n-                        <li>\n-                            <b>Windows Error Message: <code>spawn failed<\/code><\/b>\n-                            <blockquote>\n-                                Try rebooting the system, or there could be some kind of\n-                                issue with the disk or disk partition being used.\n-                                Sometimes it comes with a \"Permission Denied\" message.\n-                            <\/blockquote>\n-                        <\/li>\n-                    <\/ul>\n-                <\/blockquote>\n-\n-            <\/blockquote> <!-- Troubleshooting -->\n-\n-        <\/blockquote> <!-- Appendix A -->\n-\n-        <!-- ====================================================== -->\n-        <hr>\n-        <h2><a name=\"gmake\">Appendix B: GNU make<\/a><\/h2>\n-        <blockquote>\n-\n-            The Makefiles in the OpenJDK are only valid when used with the \n-            GNU version of the utility command <code>make<\/code>\n-            (usually called <code>gmake<\/code> on Solaris).\n-            A few notes about using GNU make:\n-            <ul>\n-                <li>\n-                    You need GNU make version 3.81 or newer.\n-                    If the GNU make utility on your systems is not\n-                    3.81 or newer,\n-                    see <a href=\"#buildgmake\">\"Building GNU make\"<\/a>.\n-                <\/li>\n-                <li>\n-                    Place the location of the GNU make binary in the\n-                    <code>PATH<\/code>. \n-                <\/li>\n-                <li>\n-                    <strong>Solaris:<\/strong>\n-                    Do NOT use <code>\/usr\/bin\/make<\/code> on Solaris.\n-                    If your Solaris system has the software\n-                    from the Solaris Developer Companion CD installed, \n-                    you should try and use <code>gmake<\/code>\n-                    which will be located in either the\n-                    <code>\/usr\/bin<\/code>, <code>\/opt\/sfw\/bin<\/code> or \n-                    <code>\/usr\/sfw\/bin<\/code> directory.\n-                <\/li>\n-                <li>\n-                    <strong>Windows:<\/strong>\n-                    Make sure you start your build inside a bash shell.\n-                <\/li>\n-                <li>\n-                    <strong>Mac OS X:<\/strong>\n-                    The XCode \"command line tools\" must be installed on your Mac.\n-                <\/li>\n-            <\/ul>\n-            <p>\n-                Information on GNU make, and access to ftp download sites, are\n-                available on the\n-                <a href=\"http:\/\/www.gnu.org\/software\/make\/make.html\" target=\"_blank\">\n-                    GNU make web site\n-                <\/a>.\n-                The latest source to GNU make is available at\n-                <a href=\"http:\/\/ftp.gnu.org\/pub\/gnu\/make\/\" target=\"_blank\">\n-                    ftp.gnu.org\/pub\/gnu\/make\/<\/a>.\n-            <\/p>\n-\n-            <h3><a name=\"buildgmake\">Building GNU make<\/a><\/h3>\n-            <blockquote>\n-                First step is to get the GNU make 3.81 or newer source from\n-                <a href=\"http:\/\/ftp.gnu.org\/pub\/gnu\/make\/\" target=\"_blank\">\n-                    ftp.gnu.org\/pub\/gnu\/make\/<\/a>.\n-                Building is a little different depending on the OS but is\n-                basically done with:\n-                <blockquote>\n-                    <code>bash .\/configure<\/code>\n-                    <br>\n-                    <code>make<\/code>\n-                <\/blockquote>\n-            <\/blockquote>\n-\n-        <\/blockquote> <!-- Appendix B -->\n-\n-        <!-- ====================================================== -->\n-        <hr>\n-        <h2><a name=\"buildenvironments\">Appendix C: Build Environments<\/a><\/h2>\n-        <blockquote>\n-\n-            <h3><a name=\"MBE\">Minimum Build Environments<\/a><\/h3>\n-            <blockquote>\n-                This file often describes specific requirements for what we \n-                call the\n-                \"minimum build environments\" (MBE) for this \n-                specific release of the JDK.\n-                What is listed below is what the Oracle Release\n-                Engineering Team will use to build the Oracle JDK product.\n-                Building with the MBE will hopefully generate the most compatible\n-                bits that install on, and run correctly on, the most variations\n-                of the same base OS and hardware architecture.\n-                In some cases, these represent what is often called the\n-                least common denominator, but each Operating System has different\n-                aspects to it.\n-                <p>\n-                    In all cases, the Bootstrap JDK version minimum is critical,\n-                    we cannot guarantee builds will work with older Bootstrap JDK's.\n-                    Also in all cases, more RAM and more processors is better,\n-                    the minimums listed below are simply recommendations.\n-                <p>\n-                    With Solaris and Mac OS X, the version listed below is the\n-                    oldest release we can guarantee builds and works, and the\n-                    specific version of the compilers used could be critical.\n-                <p>\n-                    With Windows the critical aspect is the Visual Studio compiler\n-                    used, which due to it's runtime, generally dictates what Windows\n-                    systems can do the builds and where the resulting bits can\n-                    be used.<br>\n-                    <b>NOTE: We expect a change here off these older Windows OS releases\n-                        and to a 'less older' one, probably Windows 2008R2 X64.<\/b>\n-                <p>\n-                    With Linux, it was just a matter of picking a\n-                    stable distribution that is a good representative for Linux\n-                    in general.<br>\n-                    <b>NOTE: We expect a change here from Fedora 9 to something else,\n-                        but it has not been completely determined yet, possibly\n-                        Ubuntu 12.04 X64, unbiased community feedback would be welcome on\n-                        what a good choice would be here.<\/b>\n-                <p>\n-                    It is understood that most developers will NOT be using these \n-                    specific versions, and in fact creating these specific versions\n-                    may be difficult due to the age of some of this software.\n-                    It is expected that developers are more often using the more\n-                    recent releases and distributions of these operating systems.\n-                <p>\n-                    Compilation problems with newer or different C\/C++ compilers is a\n-                    common problem.\n-                    Similarly, compilation problems related to changes to the\n-                    <code>\/usr\/include<\/code> or system header files is also a\n-                    common problem with older, newer, or unreleased OS versions.\n-                    Please report these types of problems as bugs so that they\n-                    can be dealt with accordingly.\n-                <\/p>\n-                <table border=\"1\">\n-                    <thead>\n-                        <tr>\n-                            <th>Base OS and Architecture<\/th>\n-                            <th>OS<\/th>\n-                            <th>C\/C++ Compiler<\/th>\n-                            <th>Bootstrap JDK<\/th>\n-                            <th>Processors<\/th>\n-                            <th>RAM Minimum<\/th>\n-                            <th>DISK Needs<\/th>\n-                        <\/tr>\n-                    <\/thead>\n-                    <tbody>\n-                        <tr>\n-                            <td>Linux X86 (32-bit) and X64 (64-bit)<\/td>\n-                            <td>Fedora 9<\/td>\n-                            <td>gcc 4.3 <\/td>\n-                            <td>JDK 7u7<\/td>\n-                            <td>2 or more<\/td>\n-                            <td>1 GB<\/td>\n-                            <td>6 GB<\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td>Solaris SPARC (32-bit) and SPARCV9 (64-bit)<\/td>\n-                            <td>Solaris 10 Update 6<\/td>\n-                            <td>Studio 12 Update 1 + patches<\/td>\n-                            <td>JDK 7u7<\/td>\n-                            <td>4 or more<\/td>\n-                            <td>4 GB<\/td>\n-                            <td>8 GB<\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td>Solaris X86 (32-bit) and X64 (64-bit)<\/td>\n-                            <td>Solaris 10 Update 6<\/td>\n-                            <td>Studio 12 Update 1 + patches<\/td>\n-                            <td>JDK 7u7<\/td>\n-                            <td>4 or more<\/td>\n-                            <td>4 GB<\/td>\n-                            <td>8 GB<\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td>Windows X86 (32-bit)<\/td>\n-                            <td>Windows XP<\/td>\n-                            <td>Microsoft Visual Studio C++ 2010 Professional Edition<\/td>\n-                            <td>JDK 7u7<\/td>\n-                            <td>2 or more<\/td>\n-                            <td>2 GB<\/td>\n-                            <td>6 GB<\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td>Windows X64 (64-bit)<\/td>\n-                            <td>Windows Server 2003 - Enterprise x64 Edition<\/td>\n-                            <td>Microsoft Visual Studio C++ 2010 Professional Edition<\/td>\n-                            <td>JDK 7u7<\/td>\n-                            <td>2 or more<\/td>\n-                            <td>2 GB<\/td>\n-                            <td>6 GB<\/td>\n-                        <\/tr>\n-                        <tr>\n-                            <td>Mac OS X X64 (64-bit)<\/td>\n-                            <td>Mac OS X 10.7 \"Lion\"<\/td>\n-                            <td>XCode 4.5.2 or newer<\/td>\n-                            <td>JDK 7u7<\/td>\n-                            <td>2 or more<\/td>\n-                            <td>4 GB<\/td>\n-                            <td>6 GB<\/td>\n-                        <\/tr>\n-                    <\/tbody>\n-                <\/table>\n-            <\/blockquote>\n-\n-            <!-- ====================================================== -->\n-            <hr>\n-            <h3><a name=\"SDBE\">Specific Developer Build Environments<\/a><\/h3>\n-            <blockquote>\n-                We won't be listing all the possible environments, but\n-                we will try to provide what information we have available to us.\n-                <p>\n-                    <strong>NOTE: The community can help out by updating\n-                        this part of the document.\n-                    <\/strong>\n-\n-                <h4><a name=\"fedora\">Fedora<\/a><\/h4>\n-                <blockquote>\n-                    After installing the latest\n-                    <a href=\"http:\/\/fedoraproject.org\">Fedora<\/a>\n-                    you need to install several build dependencies.\n-                    The simplest way to do it is to execute the \n-                    following commands as user <code>root<\/code>:\n-                    <blockquote>\n-                        <code>yum-builddep java-1.7.0-openjdk<\/code>\n-                        <br>\n-                        <code>yum install gcc gcc-c++<\/code>\n-                    <\/blockquote>\n-                    <p>\n-                        In addition, it's necessary to set a few environment \n-                        variables for the build:\n-                    <blockquote>\n-                        <code>export LANG=C<\/code>\n-                        <br>\n-                        <code>export PATH=\"\/usr\/lib\/jvm\/java-openjdk\/bin:${PATH}\"<\/code>\n-                    <\/blockquote>\n-                <\/blockquote>\n-\n-\n-                <h4><a name=\"centos\">CentOS 5.5<\/a><\/h4>\n-                <blockquote>\n-                    After installing\n-                    <a href=\"http:\/\/www.centos.org\/\">CentOS 5.5<\/a>\n-                    you need to make sure you have\n-                    the following Development bundles installed:\n-                    <blockquote>\n-                        <ul>\n-                            <li>Development Libraries<\/li>\n-                            <li>Development Tools<\/li>\n-                            <li>Java Development<\/li>\n-                            <li>X Software Development (Including XFree86-devel)<\/li>\n-                        <\/ul>\n-                    <\/blockquote>\n-                    <p>\n-                        Plus the following packages:\n-                    <blockquote>\n-                        <ul>\n-                            <li>cups devel: Cups Development Package<\/li>\n-                            <li>alsa devel: Alsa Development Package<\/li>\n-                            <li>Xi devel: libXi.so Development Package<\/li>\n-                        <\/ul>\n-                    <\/blockquote>\n-                    <p>\n-                        The freetype 2.3 packages don't seem to be available,\n-                        but the freetype 2.3 sources can be downloaded, built,\n-                        and installed easily enough from\n-                        <a href=\"http:\/\/downloads.sourceforge.net\/freetype\">\n-                            the freetype site<\/a>.\n-                        Build and install with something like:\n-                    <blockquote>\n-                        <code>bash .\/configure<\/code>\n-                        <br>\n-                        <code>make<\/code>\n-                        <br>\n-                        <code>sudo -u root make install<\/code>\n-                    <\/blockquote>\n-                    <p>\n-                        Mercurial packages could not be found easily, but a Google\n-                        search should find ones, and they usually include Python if\n-                        it's needed.\n-                <\/blockquote>\n-\n-                <h4><a name=\"debian\">Debian 5.0 (Lenny)<\/a><\/h4>\n-                <blockquote>\n-                    After installing <a href=\"http:\/\/debian.org\">Debian<\/a> 5 \n-                    you need to install several build dependencies. \n-                    The simplest way to install the build dependencies is to \n-                    execute the following commands as user <code>root<\/code>:\n-                    <blockquote>\n-                        <code>aptitude build-dep openjdk-7<\/code>\n-                        <br>\n-                        <code>aptitude install openjdk-7-jdk libmotif-dev<\/code>\n-                    <\/blockquote>\n-                    <p>\n-                        In addition, it's necessary to set a few environment \n-                        variables for the build:\n-                    <blockquote>\n-                        <code>export LANG=C<\/code>\n-                        <br>\n-                        <code>export PATH=\"\/usr\/lib\/jvm\/java-7-openjdk\/bin:${PATH}\"<\/code>\n-                    <\/blockquote>\n-                <\/blockquote>\n-\n-                <h4><a name=\"ubuntu\">Ubuntu 12.04<\/a><\/h4>\n-                <blockquote>                       \n-                    After installing <a href=\"http:\/\/ubuntu.org\">Ubuntu<\/a> 12.04 \n-                    you need to install several build dependencies. The simplest\n-                    way to do it is to execute the following commands:\n-                    <blockquote>\n-                        <code>sudo aptitude build-dep openjdk-7<\/code>\n-                        <br>\n-                        <code>sudo aptitude install openjdk-7-jdk<\/code>\n-                    <\/blockquote>\n-                    <p>\n-                        In addition, it's necessary to set a few environment \n-                        variables for the build:\n-                    <blockquote>\n-                        <code>export LANG=C<\/code>\n-                        <br>\n-                        <code>export PATH=\"\/usr\/lib\/jvm\/java-7-openjdk\/bin:${PATH}\"<\/code>\n-                    <\/blockquote>\n-                <\/blockquote>\n-\n-                <h4><a name=\"opensuse\">OpenSUSE 11.1<\/a><\/h4>\n-                <blockquote>\n-                    After installing <a href=\"http:\/\/opensuse.org\">OpenSUSE<\/a> 11.1 \n-                    you need to install several build dependencies. \n-                    The simplest way to install the build dependencies is to \n-                    execute the following commands:\n-                    <blockquote>\n-                        <code>sudo zypper source-install -d java-1_7_0-openjdk<\/code>\n-                        <br>\n-                        <code>sudo zypper install make<\/code>\n-                    <\/blockquote>\n-                    <p>\n-                        In addition, it is necessary to set a few environment \n-                        variables for the build:\n-                    <blockquote>\n-                        <code>export LANG=C<\/code>\n-                        <br>\n-                        <code>export PATH=\"\/usr\/lib\/jvm\/java-1.7.0-openjdk\/bin:$[PATH}\"<\/code>\n-                    <\/blockquote>\n-                    <p>\n-                        Finally, you need to unset the <code>JAVA_HOME<\/code> \n-                        environment variable:\n-                    <blockquote>\n-                        <code>export -n JAVA_HOME<\/code>\n-                    <\/blockquote>\n-                <\/blockquote>\n-\n-                <h4><a name=\"mandriva\">Mandriva Linux One 2009 Spring<\/a><\/h4>\n-                <blockquote>\n-                    After installing <a href=\"http:\/\/mandriva.org\">Mandriva<\/a>\n-                    Linux One 2009 Spring \n-                    you need to install several build dependencies. \n-                    The simplest way to install the build dependencies is to \n-                    execute the following commands as user <code>root<\/code>:\n-                    <blockquote>\n-                        <code>urpmi java-1.7.0-openjdk-devel make gcc gcc-c++ \n-                            freetype-devel zip unzip libcups2-devel libxrender1-devel\n-                            libalsa2-devel libstc++-static-devel libxtst6-devel \n-                            libxi-devel<\/code>\n-                    <\/blockquote>\n-                    <p>\n-                        In addition, it is necessary to set a few environment \n-                        variables for the build:\n-                    <blockquote>\n-                        <code>export LANG=C<\/code>\n-                        <br>\n-                        <code>export PATH=\"\/usr\/lib\/jvm\/java-1.7.0-openjdk\/bin:${PATH}\"<\/code>\n-                    <\/blockquote>\n-                <\/blockquote>\n-\n-                <h4><a name=\"opensolaris\">OpenSolaris 2009.06<\/a><\/h4>\n-                <blockquote>\n-                    After installing <a href=\"http:\/\/opensolaris.org\">OpenSolaris<\/a> 2009.06 \n-                    you need to install several build dependencies. \n-                    The simplest way to install the build dependencies is to \n-                    execute the following commands:\n-                    <blockquote>\n-                        <code>pfexec pkg install SUNWgmake SUNWj7dev \n-                            sunstudioexpress SUNWcups SUNWzip SUNWunzip SUNWxwhl \n-                            SUNWxorg-headers SUNWaudh SUNWfreetype2<\/code>\n-                    <\/blockquote>\n-                    <p>\n-                        In addition, it is necessary to set a few environment \n-                        variables for the build:\n-                    <blockquote>\n-                        <code>export LANG=C<\/code>\n-                        <br>\n-                        <code>export PATH=\"\/opt\/SunStudioExpress\/bin:${PATH}\"<\/code>\n-                    <\/blockquote>\n-                <\/blockquote>\n-\n-            <\/blockquote>\n-\n-        <\/blockquote> <!-- Appendix C -->\n-\n-        <!-- ====================================================== -->\n-\n-        <!-- Leave out Appendix D --\n-\n-<hr>\n-<h2><a name=\"mapping\">Appendix D: Mapping Old to New<\/a><\/h2>\n+  <head>\n+    <title>OpenJDK Build README<\/title>\n+  <\/head>\n+  <body>\n+<p><img src=\"http:\/\/openjdk.java.net\/images\/openjdk.png\" alt=\"OpenJDK\" title=\"\" \/><\/p>\n+\n+<h1>OpenJDK Build README<\/h1>\n+\n+<hr \/>\n+\n+<p><a name=\"introduction\"><\/a><\/p>\n+\n+<h2>Introduction<\/h2>\n+\n+<p>This README file contains build instructions for the\n+<a href=\"http:\/\/openjdk.java.net\">OpenJDK<\/a>. Building the source code for the OpenJDK\n+requires a certain degree of technical expertise.<\/p>\n+\n+<h3>!!!!!!!!!!!!!!! THIS IS A MAJOR RE-WRITE of this document. !!!!!!!!!!!!!<\/h3>\n+\n+<p>Some Headlines:<\/p>\n+\n+<ul>\n+<li>The build is now a \"<code>configure &amp;&amp; make<\/code>\" style build<\/li>\n+<li>Any GNU make 3.81 or newer should work<\/li>\n+<li>The build should scale, i.e. more processors should cause the build to be\n+done in less wall-clock time<\/li>\n+<li>Nested or recursive make invocations have been significantly reduced,\n+as has the total fork\/exec or spawning of sub processes during the build<\/li>\n+<li>Windows MKS usage is no longer supported<\/li>\n+<li>Windows Visual Studio <code>vsvars*.bat<\/code> and <code>vcvars*.bat<\/code> files are run\n+automatically<\/li>\n+<li>Ant is no longer used when building the OpenJDK<\/li>\n+<li>Use of ALT_* environment variables for configuring the build is no longer\n+supported<\/li>\n+<\/ul>\n+\n+<hr \/>\n+\n+<h2>Contents<\/h2>\n+\n+<ul>\n+<li><a href=\"#introduction\">Introduction<\/a><\/li>\n+<li><a href=\"#hg\">Use of Mercurial<\/a>\n+<ul>\n+<li><a href=\"#get_source\">Getting the Source<\/a><\/li>\n+<li><a href=\"#repositories\">Repositories<\/a><\/li>\n+<\/ul><\/li>\n+<li><a href=\"#building\">Building<\/a>\n+<ul>\n+<li><a href=\"#setup\">System Setup<\/a>\n+<ul>\n+<li><a href=\"#linux\">Linux<\/a><\/li>\n+<li><a href=\"#solaris\">Solaris<\/a><\/li>\n+<li><a href=\"#macosx\">Mac OS X<\/a><\/li>\n+<li><a href=\"#windows\">Windows<\/a><\/li>\n+<\/ul><\/li>\n+<li><a href=\"#configure\">Configure<\/a><\/li>\n+<li><a href=\"#make\">Make<\/a><\/li>\n+<\/ul><\/li>\n+<li><a href=\"#testing\">Testing<\/a><\/li>\n+<\/ul>\n+\n+<hr \/>\n+\n+<ul>\n+<li><a href=\"#hints\">Appendix A: Hints and Tips<\/a>\n+<ul>\n+<li><a href=\"#faq\">FAQ<\/a><\/li>\n+<li><a href=\"#performance\">Build Performance Tips<\/a><\/li>\n+<li><a href=\"#troubleshooting\">Troubleshooting<\/a><\/li>\n+<\/ul><\/li>\n+<li><a href=\"#gmake\">Appendix B: GNU Make Information<\/a><\/li>\n+<li><a href=\"#buildenvironments\">Appendix C: Build Environments<\/a><\/li>\n+<\/ul>\n+\n+<hr \/>\n+\n+<p><a name=\"hg\"><\/a><\/p>\n+\n+<h2>Use of Mercurial<\/h2>\n+\n+<p>The OpenJDK sources are maintained with the revision control system\n+<a href=\"http:\/\/mercurial.selenic.com\/wiki\/Mercurial\">Mercurial<\/a>. If you are new to\n+Mercurial, please see the <a href=\"http:\/\/mercurial.selenic.com\/wiki\/\n+BeginnersGuides\">Beginner Guides<\/a> or refer to the <a href=\"http:\/\/hgbook.red-bean.com\/\">Mercurial Book<\/a>.\n+The first few chapters of the book provide an excellent overview of Mercurial,\n+what it is and how it works.<\/p>\n+\n+<p>For using Mercurial with the OpenJDK refer to the <a href=\"http:\/\/openjdk.java.net\/guide\/\n+repositories.html#installConfig\">Developer Guide: Installing\n+and Configuring Mercurial<\/a> section for more information.<\/p>\n+\n+<p><a name=\"get_source\"><\/a><\/p>\n+\n+<h3>Getting the Source<\/h3>\n+\n+<p>To get the entire set of OpenJDK Mercurial repositories use the script\n+<code>get_source.sh<\/code> located in the root repository:<\/p>\n+\n+<pre><code>  hg clone http:\/\/hg.openjdk.java.net\/jdk8\/jdk8 YourOpenJDK\n+  cd YourOpenJDK\n+  bash .\/get_source.sh\n+<\/code><\/pre>\n+\n+<p>Once you have all the repositories, keep in mind that each repository is its\n+own independent repository. You can also re-run <code>.\/get_source.sh<\/code> anytime to\n+pull over all the latest changesets in all the repositories. This set of\n+nested repositories has been given the term \"forest\" and there are various\n+ways to apply the same <code>hg<\/code> command to each of the repositories. For\n+example, the script <code>make\/scripts\/hgforest.sh<\/code> can be used to repeat the\n+same <code>hg<\/code> command on every repository, e.g.<\/p>\n+\n+<pre><code>  cd YourOpenJDK\n+  bash .\/make\/scripts\/hgforest.sh status\n+<\/code><\/pre>\n+\n+<p><a name=\"repositories\"><\/a><\/p>\n+\n+<h3>Repositories<\/h3>\n+\n+<p>The set of repositories and what they contain:<\/p>\n+\n+<ul>\n+<li><strong>. (root)<\/strong> contains common configure and makefile logic<\/li>\n+<li><strong>hotspot<\/strong> contains source code and make files for building the OpenJDK\n+Hotspot Virtual Machine<\/li>\n+<li><strong>langtools<\/strong> contains source code for the OpenJDK javac and language tools<\/li>\n+<li><strong>jdk<\/strong> contains source code and make files for building the OpenJDK runtime\n+libraries and misc files<\/li>\n+<li><strong>jaxp<\/strong> contains source code for the OpenJDK JAXP functionality<\/li>\n+<li><strong>jaxws<\/strong> contains source code for the OpenJDK JAX-WS functionality<\/li>\n+<li><strong>corba<\/strong> contains source code for the OpenJDK Corba functionality<\/li>\n+<li><strong>nashorn<\/strong> contains source code for the OpenJDK JavaScript implementation<\/li>\n+<\/ul>\n+\n+<h3>Repository Source Guidelines<\/h3>\n+\n+<p>There are some very basic guidelines:<\/p>\n+\n+<ul>\n+<li>Use of whitespace in source files (.java, .c, .h, .cpp, and .hpp files) is\n+restricted. No TABs, no trailing whitespace on lines, and files should not\n+terminate in more than one blank line.<\/li>\n+<li>Files with execute permissions should not be added to the source\n+repositories.<\/li>\n+<li>All generated files need to be kept isolated from the files maintained or\n+managed by the source control system. The standard area for generated files\n+is the top level <code>build\/<\/code> directory.<\/li>\n+<li>The default build process should be to build the product and nothing else,\n+in one form, e.g. a product (optimized), debug (non-optimized, -g plus\n+assert logic), or fastdebug (optimized, -g plus assert logic).<\/li>\n+<li>The <code>.hgignore<\/code> file in each repository must exist and should include\n+<code>^build\/<\/code>, <code>^dist\/<\/code> and optionally any <code>nbproject\/private<\/code> directories. <strong>It\n+should NEVER<\/strong> include anything in the <code>src\/<\/code> or <code>test\/<\/code> or any managed\n+directory area of a repository.<\/li>\n+<li>Directory names and file names should never contain blanks or non-printing\n+characters.<\/li>\n+<li>Generated source or binary files should NEVER be added to the repository\n+(that includes <code>javah<\/code> output). There are some exceptions to this rule, in\n+particular with some of the generated configure scripts.<\/li>\n+<li>Files not needed for typical building or testing of the repository should\n+not be added to the repository.<\/li>\n+<\/ul>\n+\n+<hr \/>\n+\n+<p><a name=\"building\"><\/a><\/p>\n+\n+<h2>Building<\/h2>\n+\n+<p>The very first step in building the OpenJDK is making sure the system itself\n+has everything it needs to do OpenJDK builds. Once a system is setup, it\n+generally doesn't need to be done again.<\/p>\n+\n+<p>Building the OpenJDK is now done with running a <code>configure<\/code> script which will\n+try and find and verify you have everything you need, followed by running\n+<code>make<\/code>, e.g.<\/p>\n+\n+<blockquote>\n+  <p><strong><code>bash .\/configure<\/code><\/strong> <br \/>\n+ <strong><code>make all<\/code><\/strong><\/p>\n+<\/blockquote>\n+\n+<p>Where possible the <code>configure<\/code> script will attempt to located the various\n+components in the default locations or via component specific variable\n+settings. When the normal defaults fail or components cannot be found,\n+additional <code>configure<\/code> options may be necessary to help <code>configure<\/code> find the\n+necessary tools for the build, or you may need to re-visit the setup of your\n+system due to missing software packages.<\/p>\n+\n+<p><strong>NOTE:<\/strong> The <code>configure<\/code> script file does not have execute permissions and\n+will need to be explicitly run with <code>bash<\/code>, see the source guidelines.<\/p>\n+\n+<hr \/>\n+\n+<p><a name=\"setup\"><\/a><\/p>\n+\n+<h3>System Setup<\/h3>\n+\n+<p>Before even attempting to use a system to build the OpenJDK there are some very\n+basic system setups needed. For all systems:<\/p>\n+\n+<ul>\n+<li><p>Be sure the GNU make utility is version 3.81 or newer, e.g.\n+run \"<code>make -version<\/code>\"<\/p>\n+\n+<p><a name=\"bootjdk\"><\/a><\/p><\/li>\n+<li><p>Install a Bootstrap JDK. All OpenJDK builds require access to a previously\n+released JDK called the <em>bootstrap JDK<\/em> or <em>boot JDK.<\/em> The general rule is\n+that the bootstrap JDK must be an instance of the previous major release of\n+the JDK. In addition, there may be a requirement to use a release at or\n+beyond a particular update level.<\/p>\n+\n+<p><strong><em>Building JDK 8 requires use of a version of JDK 7 this is at Update 7\n+or newer. JDK 8 developers should not use JDK 8 as the boot JDK, to ensure\n+that JDK 8 dependencies are not introduced into the parts of the system\n+that are built with JDK 7.<\/em><\/strong><\/p>\n+\n+<p>The JDK 7 binaries can be downloaded from Oracle's <a href=\"http:\/\/www.oracle.com\/technetwork\/java\/javase\/downloads\/index.html\">JDK 7 download\n+site<\/a>.\n+For build performance reasons it is very important that this bootstrap JDK\n+be made available on the local disk of the machine doing the build. You\n+should add its <code>bin<\/code> directory to the <code>PATH<\/code> environment variable. If\n+<code>configure<\/code> has any issues finding this JDK, you may need to use the\n+<code>configure<\/code> option <code>--with-boot-jdk<\/code>.<\/p><\/li>\n+<li><p>Ensure that GNU make, the Bootstrap JDK, and the compilers are all in your\n+PATH environment variable.<\/p><\/li>\n+<\/ul>\n+\n+<p>And for specific systems:<\/p>\n+\n+<ul>\n+<li><p><strong>Linux<\/strong><\/p>\n+\n+<p>Install all the software development packages needed including\n+<a href=\"#alsa\">alsa<\/a>, <a href=\"#freetype\">freetype<\/a>, <a href=\"#cups\">cups<\/a>, and\n+<a href=\"#xrender\">xrender<\/a>. See <a href=\"#SDBE\">specific system packages<\/a>.<\/p><\/li>\n+<li><p><strong>Solaris<\/strong><\/p>\n+\n+<p>Install all the software development packages needed including <a href=\"#studio\">Studio\n+Compilers<\/a>, <a href=\"#freetype\">freetype<\/a>, <a href=\"#cups\">cups<\/a>, and\n+<a href=\"#xrender\">xrender<\/a>. See <a href=\"#SDBE\">specific system packages<\/a>.<\/p><\/li>\n+<li><p><strong>Windows<\/strong><\/p>\n+\n+<ul>\n+<li>Install one of <a href=\"#cygwin\">CYGWIN<\/a> or <a href=\"#msys\">MinGW\/MSYS<\/a><\/li>\n+<li>Install <a href=\"#vs2010\">Visual Studio 2010<\/a><\/li>\n+<\/ul><\/li>\n+<li><p><strong>Mac OS X<\/strong><\/p>\n+\n+<p>Install <a href=\"https:\/\/developer.apple.com\/xcode\/\">XCode 4.5.2<\/a> and also\n+install the \"Command line tools\" found under the preferences pane\n+\"Downloads\"<\/p><\/li>\n+<\/ul>\n+\n+<p><a name=\"linux\"><\/a><\/p>\n+\n+<h4>Linux<\/h4>\n+\n+<p>With Linux, try and favor the system packages over building your own or getting\n+packages from other areas. Most Linux builds should be possible with the\n+system's available packages.<\/p>\n+\n+<p>Note that some Linux systems have a habit of pre-populating your environment\n+variables for you, for example <code>JAVA_HOME<\/code> might get pre-defined for you to\n+refer to the JDK installed on your Linux system. You will need to unset\n+<code>JAVA_HOME<\/code>. It's a good idea to run <code>env<\/code> and verify the environment variables\n+you are getting from the default system settings make sense for building the\n+OpenJDK.<\/p>\n+\n+<p><a name=\"solaris\"><\/a><\/p>\n+\n+<h4>Solaris<\/h4>\n+\n+<p><a name=\"studio\"><\/a><\/p>\n+\n+<h5>Studio Compilers<\/h5>\n+\n+<p>At a minimum, the <a href=\"http:\/\/www.oracle.com\/\n+technetwork\/server-storage\/solarisstudio\/downloads\/index.htm\">Studio 12 Update 1 Compilers<\/a> (containing\n+version 5.10 of the C and C++ compilers) is required, including specific\n+patches.<\/p>\n+\n+<p>The Solaris SPARC patch list is:<\/p>\n+\n+<ul>\n+<li>118683-05: SunOS 5.10: Patch for profiling libraries and assembler<\/li>\n+<li>119963-21: SunOS 5.10: Shared library patch for C++<\/li>\n+<li>120753-08: SunOS 5.10: Microtasking libraries (libmtsk) patch<\/li>\n+<li>128228-09: Sun Studio 12 Update 1: Patch for Sun C++ Compiler<\/li>\n+<li>141860-03: Sun Studio 12 Update 1: Patch for Compiler Common patch for Sun C\n+C++ F77 F95<\/li>\n+<li>141861-05: Sun Studio 12 Update 1: Patch for Sun C Compiler<\/li>\n+<li>142371-01: Sun Studio 12.1 Update 1: Patch for dbx<\/li>\n+<li>143384-02: Sun Studio 12 Update 1: Patch for debuginfo handling<\/li>\n+<li>143385-02: Sun Studio 12 Update 1: Patch for Compiler Common patch for Sun C\n+C++ F77 F95<\/li>\n+<li>142369-01: Sun Studio 12.1: Patch for Performance Analyzer Tools<\/li>\n+<\/ul>\n+\n+<p>The Solaris X86 patch list is:<\/p>\n+\n+<ul>\n+<li>119961-07: SunOS 5.10_x86, x64, Patch for profiling libraries and assembler<\/li>\n+<li>119964-21: SunOS 5.10_x86: Shared library patch for C++_x86<\/li>\n+<li>120754-08: SunOS 5.10_x86: Microtasking libraries (libmtsk) patch<\/li>\n+<li>141858-06: Sun Studio 12 Update 1_x86: Sun Compiler Common patch for x86\n+backend<\/li>\n+<li>128229-09: Sun Studio 12 Update 1_x86: Patch for C++ Compiler<\/li>\n+<li>142363-05: Sun Studio 12 Update 1_x86: Patch for C Compiler<\/li>\n+<li>142368-01: Sun Studio 12.1_x86: Patch for Performance Analyzer Tools<\/li>\n+<\/ul>\n+\n+<p>Place the <code>bin<\/code> directory in <code>PATH<\/code>.<\/p>\n+\n+<p>The Oracle Solaris Studio Express compilers at: <a href=\"http:\/\/www.oracle.com\/technetwork\/server-storage\/solarisstudio\/\n+downloads\/index-jsp-142582.html\">Oracle Solaris Studio Express\n+Download site<\/a> are also an option, although these compilers\n+have not been extensively used yet.<\/p>\n+\n+<p><a name=\"windows\"><\/a><\/p>\n+\n+<h4>Windows<\/h4>\n+\n+<h5>Windows Unix Toolkit<\/h5>\n+\n+<p>Building on Windows requires a Unix-like environment, notably a Unix-like\n+shell. There are several such environments available of which\n+<a href=\"http:\/\/www.cygwin.com\/\">Cygwin<\/a> and\n+<a href=\"http:\/\/www.mingw.org\/wiki\/MSYS\">MinGW\/MSYS<\/a> are currently supported for the\n+OpenJDK build. One of the differences of these systems from standard Windows\n+tools is the way they handle Windows path names, particularly path names which\n+contain spaces, backslashes as path separators and possibly drive letters.\n+Depending on the use case and the specifics of each environment these path\n+problems can be solved by a combination of quoting whole paths, translating\n+backslashes to forward slashes, escaping backslashes with additional\n+backslashes and translating the path names to their <a href=\"http:\/\/en.wikipedia.org\/wiki\/8.3_filename\">\"8.3\"\n+version<\/a>.<\/p>\n+\n+<p><a name=\"cygwin\"><\/a><\/p>\n+\n+<h6>CYGWIN<\/h6>\n+\n+<p>CYGWIN is an open source, Linux-like environment which tries to emulate a\n+complete POSIX layer on Windows. It tries to be smart about path names and can\n+usually handle all kinds of paths if they are correctly quoted or escaped\n+although internally it maps drive letters <code>&lt;drive&gt;:<\/code> to a virtual directory\n+<code>\/cygdrive\/&lt;drive&gt;<\/code>.<\/p>\n+\n+<p>You can always use the <code>cygpath<\/code> utility to map pathnames with spaces or the\n+backslash character into the <code>C:\/<\/code> style of pathname (called 'mixed'), e.g.\n+<code>cygpath -s -m \"&lt;path&gt;\"<\/code>.<\/p>\n+\n+<p>Note that the use of CYGWIN creates a unique problem with regards to setting\n+<a href=\"#path\"><code>PATH<\/code><\/a>. Normally on Windows the <code>PATH<\/code> variable contains directories\n+separated with the \";\" character (Solaris and Linux use \":\"). With CYGWIN, it\n+uses \":\", but that means that paths like \"C:\/path\" cannot be placed in the\n+CYGWIN version of <code>PATH<\/code> and instead CYGWIN uses something like\n+<code>\/cygdrive\/c\/path<\/code> which CYGWIN understands, but only CYGWIN understands.<\/p>\n+\n+<p>The OpenJDK build requires CYGWIN version 1.7.16 or newer. Information about\n+CYGWIN can be obtained from the CYGWIN website at\n+<a href=\"http:\/\/www.cygwin.com\">www.cygwin.com<\/a>.<\/p>\n+\n+<p>By default CYGWIN doesn't install all the tools required for building the\n+OpenJDK. Along with the default installation, you need to install the following\n+tools.<\/p>\n+\n+<blockquote>\n+  <p><table border=\"1\">\n+     <thead>\n+       <tr>\n+         <td>Binary Name<\/td>\n+         <td>Category<\/td>\n+         <td>Package<\/td>\n+         <td>Description<\/td>\n+      <\/tr>\n+     <\/thead>\n+     <tbody>\n+       <tr>\n+         <td>ar.exe<\/td>\n+         <td>Devel<\/td>\n+         <td>binutils<\/td>\n+         <td>The GNU assembler, linker and binary utilities<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>make.exe<\/td>\n+         <td>Devel<\/td>\n+         <td>make<\/td>\n+         <td>The GNU version of the 'make' utility built for CYGWIN<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>m4.exe<\/td>\n+         <td>Interpreters<\/td>\n+         <td>m4<\/td>\n+         <td>GNU implementation of the traditional Unix macro processor<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>cpio.exe<\/td>\n+         <td>Utils<\/td>\n+         <td>cpio<\/td>\n+         <td>A program to manage archives of files<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>gawk.exe<\/td>\n+         <td>Utils<\/td>\n+         <td>awk<\/td>\n+         <td>Pattern-directed scanning and processing language<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>file.exe<\/td>\n+         <td>Utils<\/td>\n+         <td>file<\/td>\n+         <td>Determines file type using 'magic' numbers<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>zip.exe<\/td>\n+         <td>Archive<\/td>\n+         <td>zip<\/td>\n+         <td>Package and compress (archive) files<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>unzip.exe<\/td>\n+         <td>Archive<\/td>\n+         <td>unzip<\/td>\n+         <td>Extract compressed files in a ZIP archive<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>free.exe<\/td>\n+         <td>System<\/td>\n+         <td>procps<\/td>\n+         <td>Display amount of free and used memory in the system<\/td>\n+       <\/tr>\n+     <\/tbody>\n+   <\/table><\/p>\n+<\/blockquote>\n+\n+<p>Note that the CYGWIN software can conflict with other non-CYGWIN software on\n+your Windows system. CYGWIN provides a <a href=\"http:\/\/cygwin.com\/faq\/\n+faq.using.html\">FAQ<\/a> for known issues and problems, of particular interest is the\n+section on <a href=\"http:\/\/cygwin.com\/faq\/faq.using.html#faq.using.bloda\">BLODA (applications that interfere with\n+CYGWIN)<\/a>.<\/p>\n+\n+<p><a name=\"msys\"><\/a><\/p>\n+\n+<h6>MinGW\/MSYS<\/h6>\n+\n+<p>MinGW (\"Minimalist GNU for Windows\") is a collection of free Windows specific\n+header files and import libraries combined with GNU toolsets that allow one to\n+produce native Windows programs that do not rely on any 3rd-party C runtime\n+DLLs. MSYS is a supplement to MinGW which allows building applications and\n+programs which rely on traditional UNIX tools to be present. Among others this\n+includes tools like <code>bash<\/code> and <code>make<\/code>. See <a href=\"http:\/\/www.mingw.org\/\n+wiki\/MSYS\">MinGW\/MSYS<\/a> for more information.<\/p>\n+\n+<p>Like Cygwin, MinGW\/MSYS can handle different types of path formats. They are\n+internally converted to paths with forward slashes and drive letters\n+<code>&lt;drive&gt;:<\/code> replaced by a virtual directory <code>\/&lt;drive&gt;<\/code>. Additionally, MSYS\n+automatically detects binaries compiled for the MSYS environment and feeds them\n+with the internal, Unix-style path names. If native Windows applications are\n+called from within MSYS programs their path arguments are automatically\n+converted back to Windows style path names with drive letters and backslashes\n+as path separators. This may cause problems for Windows applications which use\n+forward slashes as parameter separator (e.g. <code>cl \/nologo \/I<\/code>) because MSYS may\n+wrongly <a href=\"http:\/\/mingw.org\/wiki\/\n+Posix_path_conversion\">replace such parameters by drive letters<\/a>.<\/p>\n+\n+<p>In addition to the tools which will be installed by default, you have to\n+manually install the <code>msys-zip<\/code> and <code>msys-unzip<\/code> packages. This can be easily\n+done with the MinGW command line installer:<\/p>\n+\n+<pre><code>  mingw-get.exe install msys-zip\n+  mingw-get.exe install msys-unzip\n+<\/code><\/pre>\n+\n+<p><a name=\"vs2010\"><\/a><\/p>\n+\n+<h5>Visual Studio 2010 Compilers<\/h5>\n+\n+<p>The 32-bit and 64-bit OpenJDK Windows build requires Microsoft Visual Studio\n+C++ 2010 (VS2010) Professional Edition or Express compiler. The compiler and\n+other tools are expected to reside in the location defined by the variable\n+<code>VS100COMNTOOLS<\/code> which is set by the Microsoft Visual Studio installer.<\/p>\n+\n+<p>Only the C++ part of VS2010 is needed. Try to let the installation go to the\n+default install directory. Always reboot your system after installing VS2010.\n+The system environment variable VS100COMNTOOLS should be set in your\n+environment.<\/p>\n+\n+<p>Make sure that TMP and TEMP are also set in the environment and refer to\n+Windows paths that exist, like <code>C:\\temp<\/code>, not <code>\/tmp<\/code>, not <code>\/cygdrive\/c\/temp<\/code>,\n+and not <code>C:\/temp<\/code>. <code>C:\\temp<\/code> is just an example, it is assumed that this area\n+is private to the user, so by default after installs you should see a unique\n+user path in these variables.<\/p>\n+\n+<p><a name=\"macosx\"><\/a><\/p>\n+\n+<h4>Mac OS X<\/h4>\n+\n+<p>Make sure you get the right XCode version.<\/p>\n+\n+<hr \/>\n+\n+<p><a name=\"configure\"><\/a><\/p>\n+\n+<h3>Configure<\/h3>\n+\n+<p>The basic invocation of the <code>configure<\/code> script looks like:<\/p>\n+\n+<blockquote>\n+  <p><strong><code>bash .\/configure [options]<\/code><\/strong><\/p>\n+<\/blockquote>\n+\n+<p>This will create an output directory containing the \"configuration\" and setup\n+an area for the build result. This directory typically looks like:<\/p>\n+\n+<blockquote>\n+  <p><strong><code>build\/linux-x64-normal-server-release<\/code><\/strong><\/p>\n+<\/blockquote>\n+\n+<p><code>configure<\/code> will try to figure out what system you are running on and where all\n+necessary build components are. If you have all prerequisites for building\n+installed, it should find everything. If it fails to detect any component\n+automatically, it will exit and inform you about the problem. When this\n+happens, read more below in <a href=\"#configureoptions\">the <code>configure<\/code> options<\/a>.<\/p>\n+\n+<p>Some examples:<\/p>\n+\n+<blockquote>\n+  <p><strong>Windows 32bit build with freetype specified:<\/strong> <br \/>\n+ <code>bash .\/configure --with-freetype=\/cygdrive\/c\/freetype-i586 --with-target-\n+bits=32<\/code><\/p>\n+\n+<p><strong>Debug 64bit Build:<\/strong> <br \/>\n+ <code>bash .\/configure --enable-debug --with-target-bits=64<\/code><\/p>\n+<\/blockquote>\n+\n+<p><a name=\"configureoptions\"><\/a><\/p>\n+\n+<h4>Configure Options<\/h4>\n+\n+<p>Complete details on all the OpenJDK <code>configure<\/code> options can be seen with:<\/p>\n+\n+<blockquote>\n+  <p><strong><code>bash .\/configure --help=short<\/code><\/strong><\/p>\n+<\/blockquote>\n+\n+<p>Use <code>-help<\/code> to see all the <code>configure<\/code> options available. You can generate any\n+number of different configurations, e.g. debug, release, 32, 64, etc.<\/p>\n+\n+<p>Some of the more commonly used <code>configure<\/code> options are:<\/p>\n+\n+<blockquote>\n+  <p><strong><code>--enable-debug<\/code><\/strong> <br \/>\n+ set the debug level to fastdebug (this is a shorthand for <code>--with-debug-\n+   level=fastdebug<\/code>)<\/p>\n+<\/blockquote>\n+\n+<p><a name=\"alsa\"><\/a><\/p>\n+\n+<blockquote>\n+  <p><strong><code>--with-alsa=<\/code><\/strong><em>path<\/em> <br \/>\n+ select the location of the Advanced Linux Sound Architecture (ALSA)<\/p>\n+\n+<p>Version 0.9.1 or newer of the ALSA files are required for building the\n+   OpenJDK on Linux. These Linux files are usually available from an \"alsa\" of\n+   \"libasound\" development package, and it's highly recommended that you try\n+   and use the package provided by the particular version of Linux that you are\n+   using.<\/p>\n+\n+<p><strong><code>--with-boot-jdk=<\/code><\/strong><em>path<\/em> <br \/>\n+ select the <a href=\"#bootjdk\">Bootstrap JDK<\/a><\/p>\n+\n+<p><strong><code>--with-boot-jdk-jvmargs=<\/code><\/strong>\"<em>args<\/em>\" <br \/>\n+ provide the JVM options to be used to run the <a href=\"#bootjdk\">Bootstrap JDK<\/a><\/p>\n+\n+<p><strong><code>--with-cacerts=<\/code><\/strong><em>path<\/em> <br \/>\n+ select the path to the cacerts file.<\/p>\n+\n+<p>See <a href=\"http:\/\/en.wikipedia.org\/wiki\/\n+   Certificate_Authority\">Certificate Authority on Wikipedia<\/a> for a better understanding of the Certificate\n+   Authority (CA). A certificates file named \"cacerts\" represents a system-wide\n+   keystore with CA certificates. In JDK and JRE binary bundles, the \"cacerts\"\n+   file contains root CA certificates from several public CAs (e.g., VeriSign,\n+   Thawte, and Baltimore). The source contain a cacerts file without CA root\n+   certificates. Formal JDK builders will need to secure permission from each\n+   public CA and include the certificates into their own custom cacerts file.\n+   Failure to provide a populated cacerts file will result in verification\n+   errors of a certificate chain during runtime. By default an empty cacerts\n+   file is provided and that should be fine for most JDK developers.<\/p>\n+<\/blockquote>\n+\n+<p><a name=\"cups\"><\/a><\/p>\n+\n+<blockquote>\n+  <p><strong><code>--with-cups=<\/code><\/strong><em>path<\/em> <br \/>\n+ select the CUPS install location<\/p>\n+\n+<p>The Common UNIX Printing System (CUPS) Headers are required for building the\n+   OpenJDK on Solaris and Linux. The Solaris header files can be obtained by\n+   installing the package <strong>SFWcups<\/strong> from the Solaris Software Companion\n+   CD\/DVD, these often will be installed into the directory <code>\/opt\/sfw\/cups<\/code>.<\/p>\n+\n+<p>The CUPS header files can always be downloaded from\n+   <a href=\"http:\/\/www.cups.org\">www.cups.org<\/a>.<\/p>\n+\n+<p><strong><code>--with-cups-include=<\/code><\/strong><em>path<\/em> <br \/>\n+ select the CUPS include directory location<\/p>\n+\n+<p><strong><code>--with-debug-level=<\/code><\/strong><em>level<\/em> <br \/>\n+ select the debug information level of release, fastdebug, or slowdebug<\/p>\n+\n+<p><strong><code>--with-dev-kit=<\/code><\/strong><em>path<\/em> <br \/>\n+ select location of the compiler install or developer install location<\/p>\n+<\/blockquote>\n+\n+<p><a name=\"freetype\"><\/a><\/p>\n+\n+<blockquote>\n+  <p><strong><code>--with-freetype=<\/code><\/strong><em>path<\/em> <br \/>\n+ select the freetype files to use.<\/p>\n+\n+<p>Expecting the freetype libraries under <code>lib\/<\/code> and the headers under\n+   <code>include\/<\/code>.<\/p>\n+\n+<p>Version 2.3 or newer of FreeType is required. On Unix systems required files\n+   can be available as part of your distribution (while you still may need to\n+   upgrade them). Note that you need development version of package that\n+   includes both the FreeType library and header files.<\/p>\n+\n+<p>You can always download latest FreeType version from the <a href=\"http:\/\/www.freetype.org\">FreeType\n+   website<\/a>. Building the freetype 2 libraries from\n+   scratch is also possible, however on Windows refer to the <a href=\"http:\/\/freetype.freedesktop.org\/wiki\/FreeType_DLL\">Windows FreeType\n+   DLL build instructions<\/a>.<\/p>\n+\n+<p>Note that by default FreeType is built with byte code hinting support\n+   disabled due to licensing restrictions. In this case, text appearance and\n+   metrics are expected to differ from Sun's official JDK build. See the\n+   <a href=\"http:\/\/freetype.sourceforge.net\/freetype2\">SourceForge FreeType2 Home Page<\/a>\n+   for more information.<\/p>\n+\n+<p><strong><code>--with-import-hotspot=<\/code><\/strong><em>path<\/em> <br \/>\n+ select the location to find hotspot binaries from a previous build to avoid\n+   building hotspot<\/p>\n+\n+<p><strong><code>--with-target-bits=<\/code><\/strong><em>arg<\/em> <br \/>\n+ select 32 or 64 bit build<\/p>\n+\n+<p><strong><code>--with-jvm-variants=<\/code><\/strong><em>variants<\/em> <br \/>\n+ select the JVM variants to build from, comma separated list that can\n+   include: server, client, kernel, zero and zeroshark<\/p>\n+\n+<p><strong><code>--with-memory-size=<\/code><\/strong><em>size<\/em> <br \/>\n+ select the RAM size that GNU make will think this system has<\/p>\n+\n+<p><strong><code>--with-msvcr-dll=<\/code><\/strong><em>path<\/em> <br \/>\n+ select the <code>msvcr100.dll<\/code> file to include in the Windows builds (C\/C++\n+   runtime library for Visual Studio).<\/p>\n+\n+<p>This is usually picked up automatically from the redist directories of\n+   Visual Studio 2010.<\/p>\n+\n+<p><strong><code>--with-num-cores=<\/code><\/strong><em>cores<\/em> <br \/>\n+ select the number of cores to use (processor count or CPU count)<\/p>\n+<\/blockquote>\n+\n+<p><a name=\"xrender\"><\/a><\/p>\n+\n@@ -2117,378 +672,717 @@\n-    <p>This table will help you convert some idioms of the old build\n-        system to the new build system.<\/p>\n-    <table summary=\"Cheat sheet for converting from old to new build system\">\n-        <tr valign=\"top\">\n-            <th>In the old build system, you used to...<\/th>\n-            <th>In the new build system, you should ...<\/th>\n-        <\/tr>\n-        <tr valign=\"top\">\n-            <td>run <code>make sanity<\/code><\/td>\n-            <td>run <code>bash .\/configure<\/code><\/td>\n-        <\/tr>\n-        <tr valign=\"top\">\n-            <td>set <code>ALT_OUTPUTDIR=build\/my-special-output<\/code><\/td>\n-            <td>before building the first time:\n-                <br>\n-                <code>cd build\/my-special-output<\/code>\n-                <br>\n-                <code>bash ..\/..\/configure<\/code>\n-                <br>\n-                to build:\n-                <br>\n-                <code>cd build\/my-special-output<\/code>\n-                <br>\n-                <code>make<\/code>\n-            <\/td>\n-        <\/tr>\n-        <tr valign=\"top\">\n-            <td>set <code>ALT_BOOTDIR=\/opt\/java\/jdk7<\/code><\/td>\n-            <td>run <code>configure --with-boot-jdk=\/opt\/java\/jdk7<\/code><\/td>\n-        <\/tr>\n-        <tr valign=\"top\">\n-            <td>run <code>make ARCH_DATA_MODEL=32<\/code><\/td>\n-            <td>run <code>configure --with-target-bits=32<\/code><\/td>\n-        <\/tr>\n-        <tr valign=\"top\">\n-            <td>set <code>BUILD_CLIENT_ONLY=true<\/code><\/td>\n-            <td>run <code>configure --with-jvm-variants=client<\/code><\/td>\n-        <\/tr>\n-        <tr valign=\"top\">\n-            <td>set <code>ALT_FREETYPE_LIB_PATH=\/opt\/freetype\/lib<\/code> \n-                and <code>ALT_FREETYPE_HEADERS_PATH=\/opt\/freetype\/include<\/code><\/td>\n-            <td>run <code>configure --with-freetype=\/opt\/freetype<\/code><\/td>\n-        <\/tr>\n-        <tr valign=\"top\">\n-            <td>set <code>ALT_CUPS_HEADERS_PATH=\/opt\/cups\/include<\/code><\/td>\n-            <td>run <code>configure --with-cups=\/opt\/cups<\/code><\/td>\n-        <\/tr>\n-        <tr valign=\"top\">\n-            <td>set <code>ALT_OPENWIN_HOME=\/opt\/X11R6<\/code><\/td>\n-            <td>run <code>configure --with-x=\/opt\/X11R6<\/code><\/td>\n-        <\/tr>\n-        <tr valign=\"top\">\n-            <td>set <code>ALT_MSVCRNN_DLL_PATH=c:\/vc_redist<\/code><\/td>\n-            <td>run <code>configure --with-msvcr100dll=\/cygdrive\/c\/vc_redist<\/code><\/td>\n-        <\/tr>\n-        <tr valign=\"top\">\n-            <td>set <code>ALT_COMPILER_PATH=\/opt\/my-gcc\/bin\/gcc<\/code><\/td>\n-            <td>run <code>CC=\/opt\/my-gcc\/bin\/gcc configure<\/code> \n-                or <code>CXX=\/opt\/my-gcc\/bin\/g++ configure<\/code>\n-            <\/td>\n-        <\/tr>\n-        <tr valign=\"top\">\n-            <td>set <code>BUILD_HEADLESS_ONLY=true<\/code><\/td>\n-            <td>run <code>configure --disable-headful<\/code><\/td>\n-        <\/tr>\n-        <tr valign=\"top\">\n-            <td>set <code>ALT_DEVTOOLS_PATH=\/opt\/mytools<\/code><\/td>\n-            <td>just run <code>configure<\/code>, \n-                your tools should be detected automatically. \n-                If you have an unusual configuration, \n-                add the tools directory to your <code>PATH<\/code>.\n-            <\/td>\n-        <\/tr>\n-        <tr valign=\"top\">\n-            <td>set <code>ALT_DROPS_DIR=\/home\/user\/dropdir<\/code><\/td>\n-            <td>source drops are not used anymore<\/td>\n-        <\/tr>\n-        <tr valign=\"top\">\n-            <td>set <code>USE_ONLY_BOOTDIR_TOOLS=true<\/code><\/td>\n-            <td>not needed, <code>configure<\/code> should always do the Right Thing automatically<\/td>\n-        <\/tr>\n-        <tr valign=\"top\">\n-            <td>set <code>ALT_JDK_IMPORT_PATH=\/opt\/java\/import-jdk<\/code>\n-                or <code>ALT_BUILD_JDK_IMPORT_PATH=\/opt\/java\/import-jdk<\/code>\n-            <\/td>\n-            <td>Importing JDKs is no longer possible, \n-                but hotspot can be imported using \n-                <code>--with-import-hotspot<\/code>. \n-                Documentation on how to achieve a \n-                similar solution will come soon!\n-            <\/td>\n-        <\/tr>\n-        <tr valign=\"top\">\n-            <td>set <code>EXTRA_CFLAGS=-Xfoo<\/code><\/td>\n-            <td>run <code>CFLAGS=-Xfoo configure<\/code><\/td>\n-        <\/tr>\n-        <tr valign=\"top\">\n-            <td>set <code>CROSS_COMPILE_ARCH=i586<\/code><\/td>\n-            <td>see <a href=\"#sec7.3\"> section 7.3, Cross-compilation<\/a><\/td>\n-        <\/tr>\n-        <tr valign=\"top\">\n-            <td>set <code>SKIP_BOOT_CYCLE=false<\/code><\/td>\n-            <td>Run <code>make bootcycle-images<\/code>.<\/td>\n-        <\/tr>\n-    <\/table>\n-\n-    <h3><a name=\"variables\">Environment\/Make Variables<\/a><\/h3>\n-    <p>\n-        Some of the\n-        environment or make variables (just called <b>variables<\/b> in this\n-        document) that can impact the build are:\n-    <blockquote>\n-        <dl>\n-            <dt><a name=\"path\"><code>PATH<\/code><\/a> <\/dt>\n-            <dd>Typically you want to set the <code>PATH<\/code> to include:\n-                <ul>\n-                    <li>The location of the GNU make binary<\/li>\n-                    <li>The location of the Bootstrap JDK <code>java<\/code> \n-                        (see <a href=\"#bootjdk\">Bootstrap JDK<\/a>)<\/li>\n-                    <li>The location of the C\/C++ compilers \n-                        (see <a href=\"#compilers\"><code>compilers<\/code><\/a>)<\/li>\n-                    <li>The location or locations for the Unix command utilities\n-                        (e.g. <code>\/usr\/bin<\/code>)<\/li>\n-                <\/ul>\n-            <\/dd>\n-            <dt><code>MILESTONE<\/code> <\/dt>\n-            <dd>\n-                The milestone name for the build (<i>e.g.<\/i>\"beta\"). \n-                The default value is \"internal\".\n-            <\/dd>\n-            <dt><code>BUILD_NUMBER<\/code> <\/dt>\n-            <dd>\n-                The build number for the build (<i>e.g.<\/i> \"b27\"). \n-                The default value is \"b00\".\n-            <\/dd>\n-            <dt><a name=\"arch_data_model\"><code>ARCH_DATA_MODEL<\/code><\/a><\/dt>\n-            <dd>The <code>ARCH_DATA_MODEL<\/code> variable\n-                is used to specify whether the build is to generate 32-bit or 64-bit\n-                binaries. \n-                The Solaris build supports either 32-bit or 64-bit builds, but\n-                Windows and Linux will support only one, depending on the specific\n-                OS being used.\n-                Normally, setting this variable is only necessary on Solaris.\n-                Set <code>ARCH_DATA_MODEL<\/code> to <code>32<\/code> for generating 32-bit binaries, \n-                or to <code>64<\/code> for generating 64-bit binaries.\n-            <\/dd>\n-            <dt><a name=\"ALT_BOOTDIR\"><code>ALT_BOOTDIR<\/code><\/a><\/dt>\n-            <dd>\n-                The location of the bootstrap JDK installation. \n-                See <a href=\"#bootjdk\">Bootstrap JDK<\/a> for more information.\n-                You should always install your own local Bootstrap JDK and\n-                always set <code>ALT_BOOTDIR<\/code> explicitly.\n-            <\/dd>\n-            <dt><a name=\"ALT_OUTPUTDIR\"><code>ALT_OUTPUTDIR<\/code><\/a> <\/dt>\n-            <dd>\n-                An override for specifying the (absolute) path of where the\n-                build output is to go.\n-                The default output directory will be build\/<i>platform<\/i>.\n-            <\/dd>\n-            <dt><a name=\"ALT_COMPILER_PATH\"><code>ALT_COMPILER_PATH<\/code><\/a> <\/dt>\n-            <dd>\n-                The location of the C\/C++ compiler.\n-                The default varies depending on the platform. \n-            <\/dd>\n-            <dt><code><a name=\"ALT_CACERTS_FILE\">ALT_CACERTS_FILE<\/a><\/code><\/dt>\n-            <dd>\n-                The location of the <a href=\"#cacerts\">cacerts<\/a> file.\n-                The default will refer to \n-                <code>jdk\/src\/share\/lib\/security\/cacerts<\/code>.\n-            <\/dd>\n-            <dt><a name=\"ALT_CUPS_HEADERS_PATH\"><code>ALT_CUPS_HEADERS_PATH<\/code><\/a> <\/dt>\n-            <dd>\n-                The location of the CUPS header files.\n-                See <a href=\"#cups\">CUPS information<\/a> for more information.\n-                If this path does not exist the fallback path is \n-                <code>\/usr\/include<\/code>.\n-            <\/dd>\n-            <dt><a name=\"ALT_FREETYPE_LIB_PATH\"><code>ALT_FREETYPE_LIB_PATH<\/code><\/a><\/dt>\n-            <dd>\n-                The location of the FreeType shared library. \n-                See <a href=\"#freetype\">FreeType information<\/a> for details. \n-            <\/dd>\n-            <dt><a name=\"ALT_FREETYPE_HEADERS_PATH\"><code>ALT_FREETYPE_HEADERS_PATH<\/code><\/a><\/dt>\n-            <dd>\n-                The location of the FreeType header files.\n-                See <a href=\"#freetype\">FreeType information<\/a> for details. \n-            <\/dd>\n-            <dt><a name=\"ALT_JDK_DEVTOOLS_PATH\"><code>ALT_JDK_DEVTOOLS_PATH<\/code><\/a><\/dt>\n-            <dd>\n-                The default root location of the devtools.\n-                The default value is \n-                <code>$(ALT_SLASH_JAVA)\/devtools<\/code>.\n-            <\/dd>\n-            <dt><code><a name=\"ALT_DEVTOOLS_PATH\">ALT_DEVTOOLS_PATH<\/a><\/code> <\/dt>\n-            <dd>\n-                The location of tools like the \n-                <a href=\"#zip\"><code>zip<\/code> and <code>unzip<\/code><\/a>\n-                binaries, but might also contain the GNU make utility\n-                (<code><i>gmake<\/i><\/code>).\n-                So this area is a bit of a grab bag, especially on Windows.\n-                The default value depends on the platform and\n-                Unix Commands being used.\n-                On Linux the default will be \n-                <code>$(ALT_JDK_DEVTOOLS_PATH)\/linux\/bin<\/code>, \n-                on Solaris\n-                <code>$(ALT_JDK_DEVTOOLS_PATH)\/<i>{sparc,i386}<\/i>\/bin<\/code>, \n-                and on Windows with CYGWIN\n-                <code>\/usr\/bin<\/code>.\n-            <\/dd>\n-            <dt><a name=\"ALT_UNIXCCS_PATH\"><code>ALT_UNIXCCS_PATH<\/code><\/a><\/dt>\n-            <dd>\n-                <strong>Solaris only:<\/strong>\n-                An override for specifying where the Unix CCS\n-                command set are located.\n-                The default location is <code>\/usr\/ccs\/bin<\/code> \n-            <\/dd>\n-            <dt><a name=\"ALT_SLASH_JAVA\"><code>ALT_SLASH_JAVA<\/code><\/a><\/dt>\n-            <dd>\n-                The default root location for many of the ALT path locations\n-                of the following ALT variables.\n-                The default value is \n-                <code>\"\/java\"<\/code> on Solaris and Linux, \n-                <code>\"J:\"<\/code> on Windows.\n-            <\/dd>\n-\n-            <dt><a name=\"ALT_OPENWIN_HOME\"><code>ALT_OPENWIN_HOME<\/code><\/a><\/dt>\n-            <dd>\n-                The top-level directory of the libraries and include files \n-                for the platform's \n-                graphical programming environment. \n-                The default location is platform specific. \n-                For example, on Linux it defaults to <code>\/usr\/X11R6\/<\/code>.\n-            <\/dd>\n-            <dt><strong>Windows specific:<\/strong><\/dt>\n-            <dd>\n-                <dl>\n-                    <dt><a name=\"ALT_WINDOWSSDKDIR\"><code>ALT_WINDOWSSDKDIR<\/code><\/a> <\/dt>\n-                    <dd>\n-                        The location of the \n-                        Microsoft Windows SDK where some tools will be\n-                        located.\n-                        The default is whatever WINDOWSSDKDIR is set to\n-                        (or WindowsSdkDir) or the path\n-                        <br>\n-                        <code>c:\\Program Files\\Microsoft SDKs\\Windows\\v7.0a<\/code>\n-                    <\/dd>\n-                    <dt><code><a name=\"ALT_DXSDK_PATH\">ALT_DXSDK_PATH<\/a><\/code> <\/dt>\n-                    <dd>\n-                        The location of the \n-                        <a href=\"#dxsdk\">Microsoft DirectX 9 SDK<\/a>.\n-                        The default will be to try and use the DirectX environment\n-                        variable <code>DXSDK_DIR<\/code>,\n-                        failing that, look in <code>C:\/DXSDK<\/code>.\n-                    <\/dd>\n-                    <dt><code><a name=\"ALT_MSVCRNN_DLL_PATH\">ALT_MSVCRNN_DLL_PATH<\/a><\/code> <\/dt>\n-                    <dd>\n-                        The location of the \n-                        <a href=\"#msvcrNN\"><code>MSVCR100.DLL<\/code><\/a>. \n-                    <\/dd>\n-                <\/dl>\n-            <\/dd>\n-            <dt><strong>Cross-Compilation Support:<\/strong><\/dt>\n-            <dd>\n-                <dl>\n-                    <dt><a name=\"CROSS_COMPILE_ARCH\"><code>CROSS_COMPILE_ARCH<\/code><\/a> <\/dt>\n-                    <dd>\n-                        Set to the target architecture of a \n-                        cross-compilation build. If set, this\n-                        variable is used to signify that we are \n-                        cross-compiling. The expectation\n-                        is that\n-                        <a href=\"#ALT_COMPILER_PATH\"><code>ALT_COMPILER_PATH<\/code><\/a> \n-                        is set\n-                        to point to the cross-compiler and that any\n-                        cross-compilation specific flags\n-                        are passed using \n-                        <a href=\"#EXTRA_CFLAGS\"><code>EXTRA_CFLAGS<\/code><\/a>.\n-                        The <a href=\"#ALT_OPENWIN_HOME\"><code>ALT_OPENWIN_HOME<\/code><\/a>\n-                        variable should \n-                        also be set to point to the graphical header files\n-                        (e.g. X11) provided with \n-                        the cross-compiler.\n-                        When cross-compiling we skip execution of any demos \n-                        etc that may be built, and\n-                        also skip binary-file verification.\n-                    <\/dd>\n-                    <dt><code><a name=\"EXTRA_CFLAGS\">EXTRA_CFLAGS<\/a><\/code> <\/dt>\n-                    <dd>\n-                        Used to pass cross-compilation options to the \n-                        cross-compiler.\n-                        These are added to the <code>CFLAGS<\/code> \n-                        and <code>CXXFLAGS<\/code> variables. \n-                    <\/dd>\n-                    <dt><code><a name=\"USE_ONLY_BOOTDIR_TOOLS\">USE_ONLY_BOOTDIR_TOOLS<\/a><\/code> <\/dt>\n-                    <dd>\n-                        Used primarily for cross-compilation builds\n-                        (and always set in that case)\n-                        this variable indicates that tools from the\n-                        boot JDK should be used during\n-                        the build process, not the tools\n-                        (<code>javac<\/code>, <code>javah<\/code>, <code>jar<\/code>)\n-                        just built (which can't execute on the build host).\n-                    <\/dd>\n-                    <dt><code><a name=\"HOST_CC\">HOST_CC<\/a><\/code> <\/dt>\n-                    <dd>\n-                        The location of the C compiler to generate programs \n-                        to run on the build host.\n-                        Some parts of the build generate programs that are\n-                        then compiled and executed\n-                        to produce other parts of the build. Normally the \n-                        primary C compiler is used\n-                        to do this, but when cross-compiling that would be\n-                        the cross-compiler and the\n-                        resulting program could not be executed. \n-                        On Linux this defaults to <code>\/usr\/bin\/gcc<\/code>; \n-                        on other platforms it must be\n-                        set explicitly.\n-                    <\/dd>\n-                <\/dl>\n-            <dt><strong>Specialized Build Options:<\/strong><\/dt>\n-            <dd>\n-                Some build variables exist to support specialized build \n-                environments and\/or specialized\n-                build products. Their use is only supported in those contexts:\n-                <dl>\n-                    <dt><code><a name=\"BUILD_CLIENT_ONLY\">BUILD_CLIENT_ONLY<\/a><\/code> <\/dt>\n-                    <dd>\n-                        Indicates this build will only contain the \n-                        Hotspot client VM. In addition to\n-                        controlling the Hotspot build target, \n-                        it ensures that we don't try to copy\n-                        any server VM files\/directories, \n-                        and defines a default <code>jvm.cfg<\/code> file\n-                        suitable for a client-only environment. \n-                        Using this in a 64-bit build will\n-                        generate a sanity warning as 64-bit client \n-                        builds are not directly supported.\n-                    <\/dd>\n-                    <dt><code><a name=\"BUILD_HEADLESS_ONLY\"><\/a>BUILD_HEADLESS_ONLY<\/code> <\/dt>\n-                    <dd>\n-                        Used when the build environment has no graphical \n-                        capabilities at all. This\n-                        excludes building anything that requires graphical \n-                        libraries to be available.\n-                    <\/dd>\n-                    <dt><code><a name=\"JAVASE_EMBEDDED\"><\/a>JAVASE_EMBEDDED<\/code> <\/dt>\n-                    <dd>\n-                        Used to indicate this is a build of the Oracle \n-                        Java SE Embedded product. \n-                        This will enable the directives included in the \n-                        SE-Embedded specific build \n-                        files.\n-                    <\/dd>\n-                    <dt><code><a name=\"LIBZIP_CAN_USE_MMAP\">LIBZIP_CAN_USE_MMAP<\/a><\/code> <\/dt>\n-                    <dd>\n-                        If set to false, disables the use of mmap by the\n-                        zip utility. Otherwise,\n-                        mmap will be used.\n-                    <\/dd>\n-                    <dt><code><a name=\"COMPRESS_JARS\"><\/a>COMPRESS_JARS<\/code> <\/dt>\n-                    <dd>\n-                        If set to true, causes certain jar files that \n-                        would otherwise be built without\n-                        compression, to use compression.\n-                    <\/dd>\n-                <\/dl>\n-            <\/dd>\n-        <\/dl>\n-    <\/blockquote>\n-\n-<\/blockquote> <!-- Appendix D -->\n-\n-        <!-- ====================================================== -->\n-        <hr>\n-        <p>End of OpenJDK README-builds.html document.<br>Please come again!\n-        <hr>\n-\n-    <\/body>\n+  <p><strong><code>--with-x=<\/code><\/strong><em>path<\/em> <br \/>\n+ select the location of the X11 and xrender files.<\/p>\n+\n+<p>The XRender Extension Headers are required for building the OpenJDK on\n+   Solaris and Linux. The Linux header files are usually available from a\n+   \"Xrender\" development package, it's recommended that you try and use the\n+   package provided by the particular distribution of Linux that you are using.\n+   The Solaris XRender header files is included with the other X11 header files\n+   in the package <strong>SFWxwinc<\/strong> on new enough versions of Solaris and will be\n+   installed in <code>\/usr\/X11\/include\/X11\/extensions\/Xrender.h<\/code> or\n+   <code>\/usr\/openwin\/share\/include\/X11\/extensions\/Xrender.h<\/code><\/p>\n+<\/blockquote>\n+\n+<hr \/>\n+\n+<p><a name=\"make\"><\/a><\/p>\n+\n+<h3>Make<\/h3>\n+\n+<p>The basic invocation of the <code>make<\/code> utility looks like:<\/p>\n+\n+<blockquote>\n+  <p><strong><code>make all<\/code><\/strong><\/p>\n+<\/blockquote>\n+\n+<p>This will start the build to the output directory containing the\n+\"configuration\" that was created by the <code>configure<\/code> script. Run <code>make help<\/code> for\n+more information on the available targets.<\/p>\n+\n+<p>There are some of the make targets that are of general interest:<\/p>\n+\n+<blockquote>\n+  <p><em>empty<\/em> <br \/>\n+ build everything but no images<\/p>\n+\n+<p><strong><code>all<\/code><\/strong> <br \/>\n+ build everything including images<\/p>\n+\n+<p><strong><code>all-conf<\/code><\/strong> <br \/>\n+ build all configurations<\/p>\n+\n+<p><strong><code>images<\/code><\/strong> <br \/>\n+ create complete j2sdk and j2re images<\/p>\n+\n+<p><strong><code>install<\/code><\/strong> <br \/>\n+ install the generated images locally, typically in <code>\/usr\/local<\/code><\/p>\n+\n+<p><strong><code>clean<\/code><\/strong> <br \/>\n+ remove all files generated by make, but not those generated by <code>configure<\/code><\/p>\n+\n+<p><strong><code>dist-clean<\/code><\/strong> <br \/>\n+ remove all files generated by both and <code>configure<\/code> (basically killing the\n+   configuration)<\/p>\n+\n+<p><strong><code>help<\/code><\/strong> <br \/>\n+ give some help on using <code>make<\/code>, including some interesting make targets<\/p>\n+<\/blockquote>\n+\n+<hr \/>\n+\n+<p><a name=\"testing\"><\/a><\/p>\n+\n+<h2>Testing<\/h2>\n+\n+<p>When the build is completed, you should see the generated binaries and\n+associated files in the <code>j2sdk-image<\/code> directory in the output directory. In\n+particular, the <code>build\/*\/images\/j2sdk-image\/bin<\/code> directory should contain\n+executables for the OpenJDK tools and utilities for that configuration. The\n+testing tool <code>jtreg<\/code> will be needed and can be found at: <a href=\"http:\/\/openjdk.java.net\/jtreg\/\">the jtreg\n+site<\/a>. The provided regression tests in the\n+repositories can be run with the command:<\/p>\n+\n+<blockquote>\n+  <p><strong><code>cd test &amp;&amp; make PRODUCT_HOME=`pwd`\/..\/build\/*\/images\/j2sdk-image all<\/code><\/strong><\/p>\n+<\/blockquote>\n+\n+<hr \/>\n+\n+<p><a name=\"hints\"><\/a><\/p>\n+\n+<h2>Appendix A: Hints and Tips<\/h2>\n+\n+<p><a name=\"faq\"><\/a><\/p>\n+\n+<h3>FAQ<\/h3>\n+\n+<p><strong>Q:<\/strong> The <code>generated-configure.sh<\/code> file looks horrible! How are you going to\n+edit it? <br \/>\n+<strong>A:<\/strong> The <code>generated-configure.sh<\/code> file is generated (think \"compiled\") by the\n+autoconf tools. The source code is in <code>configure.ac<\/code> and various .m4 files in\n+common\/autoconf, which are much more readable.<\/p>\n+\n+<p><strong>Q:<\/strong> Why is the <code>generated-configure.sh<\/code> file checked in, if it is \n+generated? <br \/>\n+<strong>A:<\/strong> If it was not generated, every user would need to have the autoconf\n+tools installed, and re-generate the <code>configure<\/code> file as the first step. Our\n+goal is to minimize the work needed to be done by the user to start building\n+OpenJDK, and to minimize the number of external dependencies required.<\/p>\n+\n+<p><strong>Q:<\/strong> Do you require a specific version of autoconf for regenerating\n+<code>generated-configure.sh<\/code>? <br \/>\n+<strong>A:<\/strong> Yes, version 2.69 is required and should be easy enough to aquire on all\n+supported operating systems. The reason for this is to avoid large spurious\n+changes in <code>generated-configure.sh<\/code>.<\/p>\n+\n+<p><strong>Q:<\/strong> How do you regenerate <code>generated-configure.sh<\/code> after making changes to\n+the input files? <br \/>\n+<strong>A:<\/strong> Regnerating <code>generated-configure.sh<\/code> should always be done using the\n+script <code>common\/autoconf\/autogen.sh<\/code> to ensure that the correct files get\n+updated. This script should also be run after mercurial tries to merge\n+<code>generated-configure.sh<\/code> as a merge of the generated file is not guaranteed to\n+be correct.<\/p>\n+\n+<p><strong>Q:<\/strong> What are the files in <code>common\/makefiles\/support\/*<\/code> for? They look like\n+gibberish. <br \/>\n+<strong>A:<\/strong> They are a somewhat ugly hack to compensate for command line length\n+limitations on certain platforms (Windows, Solaris). Due to a combination of\n+limitations in make and the shell, command lines containing too many files will\n+not work properly. These helper files are part of an elaborate hack that will\n+compress the command line in the makefile and then uncompress it safely. We're\n+not proud of it, but it does fix the problem. If you have any better\n+suggestions, we're all ears! :-)<\/p>\n+\n+<p><strong>Q:<\/strong> I want to see the output of the commands that make runs, like in the old\n+build. How do I do that? <br \/>\n+<strong>A:<\/strong> You specify the <code>LOG<\/code> variable to make. There are several log levels:<\/p>\n+\n+<ul>\n+<li><strong><code>warn<\/code><\/strong> -- Default and very quiet.<\/li>\n+<li><strong><code>info<\/code><\/strong> -- Shows more progress information than warn.<\/li>\n+<li><strong><code>debug<\/code><\/strong> -- Echos all command lines and prints all macro calls for\n+compilation definitions.<\/li>\n+<li><strong><code>trace<\/code><\/strong> -- Echos all $(shell) command lines as well.<\/li>\n+<\/ul>\n+\n+<p><strong>Q:<\/strong> When do I have to re-run <code>configure<\/code>? <br \/>\n+<strong>A:<\/strong> Normally you will run <code>configure<\/code> only once for creating a\n+configuration. You need to re-run configuration only if you want to change any\n+configuration options, or if you pull down changes to the <code>configure<\/code> script.<\/p>\n+\n+<p><strong>Q:<\/strong> I have added a new source file. Do I need to modify the makefiles? <br \/>\n+<strong>A:<\/strong> Normally, no. If you want to create e.g. a new native library, you will\n+need to modify the makefiles. But for normal file additions or removals, no\n+changes are needed. There are certan exceptions for some native libraries where\n+the source files are spread over many directories which also contain sources\n+for other libraries. In these cases it was simply easier to create include\n+lists rather than excludes.<\/p>\n+\n+<p><strong>Q:<\/strong> When I run <code>configure --help<\/code>, I see many strange options, like\n+<code>--dvidir<\/code>. What is this? <br \/>\n+<strong>A:<\/strong> Configure provides a slew of options by default, to all projects that\n+use autoconf. Most of them are not used in OpenJDK, so you can safely ignore\n+them. To list only OpenJDK specific features, use <code>configure --help=short<\/code>\n+instead.<\/p>\n+\n+<p><strong>Q:<\/strong> <code>configure<\/code> provides OpenJDK-specific features such as <code>--with-\n+builddeps-server<\/code> that are not described in this document. What about those? <br \/>\n+<strong>A:<\/strong> Try them out if you like! But be aware that most of these are\n+experimental features. Many of them don't do anything at all at the moment; the\n+option is just a placeholder. Others depend on pieces of code or infrastructure\n+that is currently not ready for prime time.<\/p>\n+\n+<p><strong>Q:<\/strong> How will you make sure you don't break anything? <br \/>\n+<strong>A:<\/strong> We have a script that compares the result of the new build system with\n+the result of the old. For most part, we aim for (and achieve) byte-by-byte\n+identical output. There are however technical issues with e.g. native binaries,\n+which might differ in a byte-by-byte comparison, even when building twice with\n+the old build system. For these, we compare relevant aspects (e.g. the symbol\n+table and file size). Note that we still don't have 100% equivalence, but we're\n+close.<\/p>\n+\n+<p><strong>Q:<\/strong> I noticed this thing X in the build that looks very broken by design.\n+Why don't you fix it? <br \/>\n+<strong>A:<\/strong> Our goal is to produce a build output that is as close as technically\n+possible to the old build output. If things were weird in the old build, they\n+will be weird in the new build. Often, things were weird before due to\n+obscurity, but in the new build system the weird stuff comes up to the surface.\n+The plan is to attack these things at a later stage, after the new build system\n+is established.<\/p>\n+\n+<p><strong>Q:<\/strong> The code in the new build system is not that well-structured. Will you\n+fix this? <br \/>\n+<strong>A:<\/strong> Yes! The new build system has grown bit by bit as we converted the old\n+system. When all of the old build system is converted, we can take a step back\n+and clean up the structure of the new build system. Some of this we plan to do\n+before replacing the old build system and some will need to wait until after.<\/p>\n+\n+<p><strong>Q:<\/strong> Is anything able to use the results of the new build's default make\n+target? <br \/>\n+<strong>A:<\/strong> Yes, this is the minimal (or roughly minimal) set of compiled output\n+needed for a developer to actually execute the newly built JDK. The idea is\n+that in an incremental development fashion, when doing a normal make, you\n+should only spend time recompiling what's changed (making it purely\n+incremental) and only do the work that's needed to actually run and test your\n+code. The packaging stuff that is part of the <code>images<\/code> target is not needed for\n+a normal developer who wants to test his new code. Even if it's quite fast,\n+it's still unnecessary. We're targeting sub-second incremental rebuilds! ;-)\n+(Or, well, at least single-digit seconds...)<\/p>\n+\n+<p><strong>Q:<\/strong> I usually set a specific environment variable when building, but I can't\n+find the equivalent in the new build. What should I do? <br \/>\n+<strong>A:<\/strong> It might very well be that we have neglected to add support for an\n+option that was actually used from outside the build system. Email us and we\n+will add support for it!<\/p>\n+\n+<p><a name=\"performance\"><\/a><\/p>\n+\n+<h3>Build Performance Tips<\/h3>\n+\n+<p>Building OpenJDK requires a lot of horsepower. Some of the build tools can be\n+adjusted to utilize more or less of resources such as parallel threads and\n+memory. The <code>configure<\/code> script analyzes your system and selects reasonable\n+values for such options based on your hardware. If you encounter resource\n+problems, such as out of memory conditions, you can modify the detected values\n+with:<\/p>\n+\n+<ul>\n+<li><strong><code>--with-num-cores<\/code><\/strong> -- number of cores in the build system, e.g.\n+<code>--with-num-cores=8<\/code><\/li>\n+<li><strong><code>--with-memory-size<\/code><\/strong> -- memory (in MB) available in the build system,\n+e.g. <code>--with-memory-size=1024<\/code><\/li>\n+<\/ul>\n+\n+<p>It might also be necessary to specify the JVM arguments passed to the Bootstrap\n+JDK, using e.g. <code>--with-boot-jdk-jvmargs=\"-Xmx8G -enableassertions\"<\/code>. Doing\n+this will override the default JVM arguments passed to the Bootstrap JDK.<\/p>\n+\n+<p>One of the top goals of the new build system is to improve the build\n+performance and decrease the time needed to build. This will soon also apply to\n+the java compilation when the Smart Javac wrapper is making its way into jdk8.\n+It can be tried in the build-infra repository already. You are likely to find\n+that the new build system is faster than the old one even without this feature.<\/p>\n+\n+<p>At the end of a successful execution of <code>configure<\/code>, you will get a performance\n+summary, indicating how well the build will perform. Here you will also get\n+performance hints. If you want to build fast, pay attention to those!<\/p>\n+\n+<h4>Building with ccache<\/h4>\n+\n+<p>A simple way to radically speed up compilation of native code\n+(typically hotspot and native libraries in JDK) is to install\n+ccache. This will cache and reuse prior compilation results, if the\n+source code is unchanged. However, ccache versions prior to 3.1.4 does\n+not work correctly with the precompiled headers used in OpenJDK. So if\n+your platform supports ccache at 3.1.4 or later, we highly recommend\n+installing it.  This is currently only supported on linux.<\/p>\n+\n+<h4>Building on local disk<\/h4>\n+\n+<p>If you are using network shares, e.g. via NFS, for your source code, make sure\n+the build directory is situated on local disk. The performance penalty is\n+extremely high for building on a network share, close to unusable.<\/p>\n+\n+<h4>Building only one JVM<\/h4>\n+\n+<p>The old build builds multiple JVMs on 32-bit systems (client and server; and on\n+Windows kernel as well). In the new build we have changed this default to only\n+build server when it's available. This improves build times for those not\n+interested in multiple JVMs. To mimic the old behavior on platforms that\n+support it, use <code>--with-jvm-variants=client,server<\/code>.<\/p>\n+\n+<h4>Selecting the number of cores to build on<\/h4>\n+\n+<p>By default, <code>configure<\/code> will analyze your machine and run the make process in\n+parallel with as many threads as you have cores. This behavior can be\n+overridden, either \"permanently\" (on a <code>configure<\/code> basis) using\n+<code>--with-num-cores=N<\/code> or for a single build only (on a make basis), using\n+<code>make JOBS=N<\/code>.<\/p>\n+\n+<p>If you want to make a slower build just this time, to save some CPU power for\n+other processes, you can run e.g. <code>make JOBS=2<\/code>. This will force the makefiles\n+to only run 2 parallel processes, or even <code>make JOBS=1<\/code> which will disable\n+parallelism.<\/p>\n+\n+<p>If you want to have it the other way round, namely having slow builds default\n+and override with fast if you're impatient, you should call <code>configure<\/code> with\n+<code>--with-num-cores=2<\/code>, making 2 the default. If you want to run with more cores,\n+run <code>make JOBS=8<\/code><\/p>\n+\n+<p><a name=\"troubleshooting\"><\/a><\/p>\n+\n+<h3>Troubleshooting<\/h3>\n+\n+<h4>Solving build problems<\/h4>\n+\n+<p>If the build fails (and it's not due to a compilation error in a source file\n+you've changed), the first thing you should do is to re-run the build with more\n+verbosity. Do this by adding <code>LOG=debug<\/code> to your make command line.<\/p>\n+\n+<p>The build log (with both stdout and stderr intermingled, basically the same as\n+you see on your console) can be found as <code>build.log<\/code> in your build directory.<\/p>\n+\n+<p>You can ask for help on build problems with the new build system on either the\n+<a href=\"http:\/\/mail.openjdk.java.net\/mailman\/listinfo\/build-dev\">build-dev<\/a> or the\n+<a href=\"http:\/\/mail.openjdk.java.net\/mailman\/listinfo\/build-infra-dev\">build-infra-dev<\/a>\n+mailing lists. Please include the relevant parts of the build log.<\/p>\n+\n+<p>A build can fail for any number of reasons. Most failures are a result of\n+trying to build in an environment in which all the pre-build requirements have\n+not been met. The first step in troubleshooting a build failure is to recheck\n+that you have satisfied all the pre-build requirements for your platform.\n+Scanning the <code>configure<\/code> log is a good first step, making sure that what it\n+found makes sense for your system. Look for strange error messages or any\n+difficulties that <code>configure<\/code> had in finding things.<\/p>\n+\n+<p>Some of the more common problems with builds are briefly described below, with\n+suggestions for remedies.<\/p>\n+\n+<ul>\n+<li><p><strong>Corrupted Bundles on Windows:<\/strong> <br \/>\n+Some virus scanning software has been known to corrupt the downloading of\n+zip bundles. It may be necessary to disable the 'on access' or 'real time'\n+virus scanning features to prevent this corruption. This type of 'real time'\n+virus scanning can also slow down the build process significantly.\n+Temporarily disabling the feature, or excluding the build output directory\n+may be necessary to get correct and faster builds.<\/p><\/li>\n+<li><p><strong>Slow Builds:<\/strong> <br \/>\n+If your build machine seems to be overloaded from too many simultaneous C++\n+compiles, try setting the <code>JOBS=1<\/code> on the <code>make<\/code> command line. Then try\n+increasing the count slowly to an acceptable level for your system. Also:<\/p>\n+\n+<p>Creating the javadocs can be very slow, if you are running javadoc, consider\n+skipping that step.<\/p>\n+\n+<p>Faster CPUs, more RAM, and a faster DISK usually helps. The VM build tends\n+to be CPU intensive (many C++ compiles), and the rest of the JDK will often\n+be disk intensive.<\/p>\n+\n+<p>Faster compiles are possible using a tool called\n+<a href=\"http:\/\/ccache.samba.org\/\">ccache<\/a>.<\/p><\/li>\n+<li><p><strong>File time issues:<\/strong> <br \/>\n+If you see warnings that refer to file time stamps, e.g.<\/p>\n+\n+<blockquote>\n+  <p><em>Warning message:<\/em> <code>File 'xxx' has modification time in the future.<\/code> <br \/>\n+<em>Warning message:<\/em> <code>Clock skew detected. Your build may be incomplete.<\/code><\/p>\n+<\/blockquote>\n+\n+<p>These warnings can occur when the clock on the build machine is out of sync\n+with the timestamps on the source files. Other errors, apparently unrelated\n+but in fact caused by the clock skew, can occur along with the clock skew\n+warnings. These secondary errors may tend to obscure the fact that the true\n+root cause of the problem is an out-of-sync clock.<\/p>\n+\n+<p>If you see these warnings, reset the clock on the build machine, run\n+\"<code>gmake clobber<\/code>\" or delete the directory containing the build output, and\n+restart the build from the beginning.<\/p><\/li>\n+<li><p><strong>Error message: <code>Trouble writing out table to disk<\/code><\/strong> <br \/>\n+Increase the amount of swap space on your build machine. This could be\n+caused by overloading the system and it may be necessary to use:<\/p>\n+\n+<blockquote>\n+  <p><code>make JOBS=1<\/code><\/p>\n+<\/blockquote>\n+\n+<p>to reduce the load on the system.<\/p><\/li>\n+<li><p><strong>Error Message: <code>libstdc++ not found<\/code>:<\/strong> <br \/>\n+This is caused by a missing libstdc++.a library. This is installed as part\n+of a specific package (e.g. libstdc++.so.devel.386). By default some 64-bit\n+Linux versions (e.g. Fedora) only install the 64-bit version of the\n+libstdc++ package. Various parts of the JDK build require a static link of\n+the C++ runtime libraries to allow for maximum portability of the built\n+images.<\/p><\/li>\n+<li><p><strong>Linux Error Message: <code>cannot restore segment prot after reloc<\/code><\/strong> <br \/>\n+This is probably an issue with SELinux (See <a href=\"http:\/\/en.wikipedia.org\/wiki\/SELinux\">SELinux on\n+Wikipedia<\/a>). Parts of the VM is built\n+without the <code>-fPIC<\/code> for performance reasons.<\/p>\n+\n+<p>To completely disable SELinux:<\/p>\n+\n+<ol>\n+<li><code>$ su root<\/code><\/li>\n+<li><code># system-config-securitylevel<\/code><\/li>\n+<li><code>In the window that appears, select the SELinux tab<\/code><\/li>\n+<li><code>Disable SELinux<\/code><\/li>\n+<\/ol>\n+\n+<p>Alternatively, instead of completely disabling it you could disable just\n+this one check.<\/p>\n+\n+<ol>\n+<li>Select System->Administration->SELinux Management<\/li>\n+<li>In the SELinux Management Tool which appears, select \"Boolean\" from the\n+menu on the left<\/li>\n+<li>Expand the \"Memory Protection\" group<\/li>\n+<li>Check the first item, labeled \"Allow all unconfined executables to use\n+libraries requiring text relocation ...\"<\/li>\n+<\/ol><\/li>\n+<li><p><strong>Windows Error Messages:<\/strong> <br \/>\n+<code>*** fatal error - couldn't allocate heap, ...<\/code> <br \/>\n+<code>rm fails with \"Directory not empty\"<\/code> <br \/>\n+<code>unzip fails with \"cannot create ... Permission denied\"<\/code> <br \/>\n+<code>unzip fails with \"cannot create ... Error 50\"<\/code><\/p>\n+\n+<p>The CYGWIN software can conflict with other non-CYGWIN software. See the\n+CYGWIN FAQ section on <a href=\"http:\/\/cygwin.com\/faq\/faq.using.html#faq.using.bloda\">BLODA (applications that interfere with\n+CYGWIN)<\/a>.<\/p><\/li>\n+<li><p><strong>Windows Error Message: <code>spawn failed<\/code><\/strong> <br \/>\n+Try rebooting the system, or there could be some kind of issue with the disk\n+or disk partition being used. Sometimes it comes with a \"Permission Denied\"\n+message.<\/p><\/li>\n+<\/ul>\n+\n+<hr \/>\n+\n+<p><a name=\"gmake\"><\/a><\/p>\n+\n+<h2>Appendix B: GNU make<\/h2>\n+\n+<p>The Makefiles in the OpenJDK are only valid when used with the GNU version of\n+the utility command <code>make<\/code> (usually called <code>gmake<\/code> on Solaris). A few notes\n+about using GNU make:<\/p>\n+\n+<ul>\n+<li>You need GNU make version 3.81 or newer. If the GNU make utility on your\n+systems is not 3.81 or newer, see \"<a href=\"#buildgmake\">Building GNU make<\/a>\".<\/li>\n+<li>Place the location of the GNU make binary in the <code>PATH<\/code>.<\/li>\n+<li><strong>Solaris:<\/strong> Do NOT use <code>\/usr\/bin\/make<\/code> on Solaris. If your Solaris system\n+has the software from the Solaris Developer Companion CD installed, you\n+should try and use <code>gmake<\/code> which will be located in either the <code>\/usr\/bin<\/code>,\n+<code>\/opt\/sfw\/bin<\/code> or <code>\/usr\/sfw\/bin<\/code> directory.<\/li>\n+<li><strong>Windows:<\/strong> Make sure you start your build inside a bash shell.<\/li>\n+<li><strong>Mac OS X:<\/strong> The XCode \"command line tools\" must be installed on your Mac.<\/li>\n+<\/ul>\n+\n+<p>Information on GNU make, and access to ftp download sites, are available on the\n+<a href=\"http:\/\/www.gnu.org\/software\/make\/make.html\">GNU make web site <\/a>. The latest\n+source to GNU make is available at\n+<a href=\"http:\/\/ftp.gnu.org\/pub\/gnu\/make\/\">ftp.gnu.org\/pub\/gnu\/make\/<\/a>.<\/p>\n+\n+<p><a name=\"buildgmake\"><\/a><\/p>\n+\n+<h3>Building GNU make<\/h3>\n+\n+<p>First step is to get the GNU make 3.81 or newer source from\n+<a href=\"http:\/\/ftp.gnu.org\/pub\/gnu\/make\/\">ftp.gnu.org\/pub\/gnu\/make\/<\/a>. Building is a\n+little different depending on the OS but is basically done with:<\/p>\n+\n+<pre><code>  bash .\/configure\n+  make\n+<\/code><\/pre>\n+\n+<hr \/>\n+\n+<p><a name=\"buildenvironments\"><\/a><\/p>\n+\n+<h2>Appendix C: Build Environments<\/h2>\n+\n+<h3>Minimum Build Environments<\/h3>\n+\n+<p>This file often describes specific requirements for what we call the \"minimum\n+build environments\" (MBE) for this specific release of the JDK. What is listed\n+below is what the Oracle Release Engineering Team will use to build the Oracle\n+JDK product. Building with the MBE will hopefully generate the most compatible\n+bits that install on, and run correctly on, the most variations of the same\n+base OS and hardware architecture. In some cases, these represent what is often\n+called the least common denominator, but each Operating System has different\n+aspects to it.<\/p>\n+\n+<p>In all cases, the Bootstrap JDK version minimum is critical, we cannot\n+guarantee builds will work with older Bootstrap JDK's. Also in all cases, more\n+RAM and more processors is better, the minimums listed below are simply\n+recommendations.<\/p>\n+\n+<p>With Solaris and Mac OS X, the version listed below is the oldest release we\n+can guarantee builds and works, and the specific version of the compilers used\n+could be critical.<\/p>\n+\n+<p>With Windows the critical aspect is the Visual Studio compiler used, which due\n+to it's runtime, generally dictates what Windows systems can do the builds and\n+where the resulting bits can be used.<\/p>\n+\n+<p><strong>NOTE: We expect a change here off these older Windows OS releases and to a\n+'less older' one, probably Windows 2008R2 X64.<\/strong><\/p>\n+\n+<p>With Linux, it was just a matter of picking a stable distribution that is a\n+good representative for Linux in general.<\/p>\n+\n+<p><strong>NOTE: We expect a change here from Fedora 9 to something else, but it has not\n+been completely determined yet, possibly Ubuntu 12.04 X64, unbiased community\n+feedback would be welcome on what a good choice would be here.<\/strong><\/p>\n+\n+<p>It is understood that most developers will NOT be using these specific\n+versions, and in fact creating these specific versions may be difficult due to\n+the age of some of this software. It is expected that developers are more often\n+using the more recent releases and distributions of these operating systems.<\/p>\n+\n+<p>Compilation problems with newer or different C\/C++ compilers is a common\n+problem. Similarly, compilation problems related to changes to the\n+<code>\/usr\/include<\/code> or system header files is also a common problem with older,\n+newer, or unreleased OS versions. Please report these types of problems as bugs\n+so that they can be dealt with accordingly.<\/p>\n+\n+<blockquote>\n+  <p><table border=\"1\">\n+     <thead>\n+       <tr>\n+         <th>Base OS and Architecture<\/th>\n+         <th>OS<\/th>\n+         <th>C\/C++ Compiler<\/th>\n+         <th>Bootstrap JDK<\/th>\n+         <th>Processors<\/th>\n+         <th>RAM Minimum<\/th>\n+         <th>DISK Needs<\/th>\n+       <\/tr>\n+     <\/thead>\n+     <tbody>\n+       <tr>\n+         <td>Linux X86 (32-bit) and X64 (64-bit)<\/td>\n+         <td>Fedora 9<\/td>\n+         <td>gcc 4.3 <\/td>\n+         <td>JDK 7u7<\/td>\n+         <td>2 or more<\/td>\n+         <td>1 GB<\/td>\n+         <td>6 GB<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>Solaris SPARC (32-bit) and SPARCV9 (64-bit)<\/td>\n+         <td>Solaris 10 Update 6<\/td>\n+         <td>Studio 12 Update 1 + patches<\/td>\n+         <td>JDK 7u7<\/td>\n+         <td>4 or more<\/td>\n+         <td>4 GB<\/td>\n+         <td>8 GB<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>Solaris X86 (32-bit) and X64 (64-bit)<\/td>\n+         <td>Solaris 10 Update 6<\/td>\n+         <td>Studio 12 Update 1 + patches<\/td>\n+         <td>JDK 7u7<\/td>\n+         <td>4 or more<\/td>\n+         <td>4 GB<\/td>\n+         <td>8 GB<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>Windows X86 (32-bit)<\/td>\n+         <td>Windows XP<\/td>\n+         <td>Microsoft Visual Studio C++ 2010 Professional Edition<\/td>\n+         <td>JDK 7u7<\/td>\n+         <td>2 or more<\/td>\n+         <td>2 GB<\/td>\n+         <td>6 GB<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>Windows X64 (64-bit)<\/td>\n+         <td>Windows Server 2003 - Enterprise x64 Edition<\/td>\n+         <td>Microsoft Visual Studio C++ 2010 Professional Edition<\/td>\n+         <td>JDK 7u7<\/td>\n+         <td>2 or more<\/td>\n+         <td>2 GB<\/td>\n+         <td>6 GB<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>Mac OS X X64 (64-bit)<\/td>\n+         <td>Mac OS X 10.7 \"Lion\"<\/td>\n+         <td>XCode 4.5.2 or newer<\/td>\n+         <td>JDK 7u7<\/td>\n+         <td>2 or more<\/td>\n+         <td>4 GB<\/td>\n+         <td>6 GB<\/td>\n+       <\/tr>\n+     <\/tbody>\n+   <\/table><\/p>\n+<\/blockquote>\n+\n+<hr \/>\n+\n+<p><a name=\"SDBE\"><\/a><\/p>\n+\n+<h3>Specific Developer Build Environments<\/h3>\n+\n+<p>We won't be listing all the possible environments, but we will try to provide\n+what information we have available to us.<\/p>\n+\n+<p><strong>NOTE: The community can help out by updating this part of the document.<\/strong><\/p>\n+\n+<h4>Fedora<\/h4>\n+\n+<p>After installing the latest <a href=\"http:\/\/fedoraproject.org\">Fedora<\/a> you need to\n+install several build dependencies. The simplest way to do it is to execute the\n+following commands as user <code>root<\/code>:<\/p>\n+\n+<pre><code>  yum-builddep java-1.7.0-openjdk\n+  yum install gcc gcc-c++\n+<\/code><\/pre>\n+\n+<p>In addition, it's necessary to set a few environment variables for the build:<\/p>\n+\n+<pre><code>  export LANG=C\n+  export PATH=\"\/usr\/lib\/jvm\/java-openjdk\/bin:${PATH}\"\n+<\/code><\/pre>\n+\n+<h4>CentOS 5.5<\/h4>\n+\n+<p>After installing <a href=\"http:\/\/www.centos.org\/\">CentOS 5.5<\/a> you need to make sure you\n+have the following Development bundles installed:<\/p>\n+\n+<ul>\n+<li>Development Libraries<\/li>\n+<li>Development Tools<\/li>\n+<li>Java Development<\/li>\n+<li>X Software Development (Including XFree86-devel)<\/li>\n+<\/ul>\n+\n+<p>Plus the following packages:<\/p>\n+\n+<ul>\n+<li>cups devel: Cups Development Package<\/li>\n+<li>alsa devel: Alsa Development Package<\/li>\n+<li>Xi devel: libXi.so Development Package<\/li>\n+<\/ul>\n+\n+<p>The freetype 2.3 packages don't seem to be available, but the freetype 2.3\n+sources can be downloaded, built, and installed easily enough from <a href=\"http:\/\/downloads.sourceforge.net\/freetype\">the\n+freetype site<\/a>. Build and install\n+with something like:<\/p>\n+\n+<pre><code>  bash .\/configure\n+  make\n+  sudo -u root make install\n+<\/code><\/pre>\n+\n+<p>Mercurial packages could not be found easily, but a Google search should find\n+ones, and they usually include Python if it's needed.<\/p>\n+\n+<h4>Debian 5.0 (Lenny)<\/h4>\n+\n+<p>After installing <a href=\"http:\/\/debian.org\">Debian<\/a> 5 you need to install several\n+build dependencies. The simplest way to install the build dependencies is to\n+execute the following commands as user <code>root<\/code>:<\/p>\n+\n+<pre><code>  aptitude build-dep openjdk-7\n+  aptitude install openjdk-7-jdk libmotif-dev\n+<\/code><\/pre>\n+\n+<p>In addition, it's necessary to set a few environment variables for the build:<\/p>\n+\n+<pre><code>  export LANG=C\n+  export PATH=\"\/usr\/lib\/jvm\/java-7-openjdk\/bin:${PATH}\"\n+<\/code><\/pre>\n+\n+<h4>Ubuntu 12.04<\/h4>\n+\n+<p>After installing <a href=\"http:\/\/ubuntu.org\">Ubuntu<\/a> 12.04 you need to install several\n+build dependencies. The simplest way to do it is to execute the following\n+commands:<\/p>\n+\n+<pre><code>  sudo aptitude build-dep openjdk-7\n+  sudo aptitude install openjdk-7-jdk\n+<\/code><\/pre>\n+\n+<p>In addition, it's necessary to set a few environment variables for the build:<\/p>\n+\n+<pre><code>  export LANG=C\n+  export PATH=\"\/usr\/lib\/jvm\/java-7-openjdk\/bin:${PATH}\"\n+<\/code><\/pre>\n+\n+<h4>OpenSUSE 11.1<\/h4>\n+\n+<p>After installing <a href=\"http:\/\/opensuse.org\">OpenSUSE<\/a> 11.1 you need to install\n+several build dependencies. The simplest way to install the build dependencies\n+is to execute the following commands:<\/p>\n+\n+<pre><code>  sudo zypper source-install -d java-1_7_0-openjdk\n+  sudo zypper install make\n+<\/code><\/pre>\n+\n+<p>In addition, it is necessary to set a few environment variables for the build:<\/p>\n+\n+<pre><code>  export LANG=C\n+  export PATH=\"\/usr\/lib\/jvm\/java-1.7.0-openjdk\/bin:$[PATH}\"\n+<\/code><\/pre>\n+\n+<p>Finally, you need to unset the <code>JAVA_HOME<\/code> environment variable:<\/p>\n+\n+<pre><code>  export -n JAVA_HOME`\n+<\/code><\/pre>\n+\n+<h4>Mandriva Linux One 2009 Spring<\/h4>\n+\n+<p>After installing <a href=\"http:\/\/mandriva.org\">Mandriva<\/a> Linux One 2009 Spring you need\n+to install several build dependencies. The simplest way to install the build\n+dependencies is to execute the following commands as user <code>root<\/code>:<\/p>\n+\n+<pre><code>  urpmi java-1.7.0-openjdk-devel make gcc gcc-c++ freetype-devel zip unzip\n+    libcups2-devel libxrender1-devel libalsa2-devel libstc++-static-devel\n+    libxtst6-devel libxi-devel\n+<\/code><\/pre>\n+\n+<p>In addition, it is necessary to set a few environment variables for the build:<\/p>\n+\n+<pre><code>  export LANG=C\n+  export PATH=\"\/usr\/lib\/jvm\/java-1.7.0-openjdk\/bin:${PATH}\"\n+<\/code><\/pre>\n+\n+<h4>OpenSolaris 2009.06<\/h4>\n+\n+<p>After installing <a href=\"http:\/\/opensolaris.org\">OpenSolaris<\/a> 2009.06 you need to\n+install several build dependencies. The simplest way to install the build\n+dependencies is to execute the following commands:<\/p>\n+\n+<pre><code>  pfexec pkg install SUNWgmake SUNWj7dev sunstudioexpress SUNWcups SUNWzip\n+    SUNWunzip SUNWxwhl SUNWxorg-headers SUNWaudh SUNWfreetype2\n+<\/code><\/pre>\n+\n+<p>In addition, it is necessary to set a few environment variables for the build:<\/p>\n+\n+<pre><code>  export LANG=C\n+  export PATH=\"\/opt\/SunStudioExpress\/bin:${PATH}\"\n+<\/code><\/pre>\n+\n+<hr \/>\n+\n+<p>End of the OpenJDK build README document.<\/p>\n+\n+<p>Please come again!<\/p>\n+  <\/body>\n","filename":"README-builds.html","additions":1386,"deletions":2492,"binary":false,"changes":3878,"status":"modified"},{"patch":"@@ -0,0 +1,1266 @@\n+![OpenJDK](http:\/\/openjdk.java.net\/images\/openjdk.png)\n+# OpenJDK Build README\n+\n+*****\n+\n+<a name=\"introduction\"><\/a>\n+## Introduction\n+\n+This README file contains build instructions for the\n+[OpenJDK](http:\/\/openjdk.java.net). Building the source code for the OpenJDK\n+requires a certain degree of technical expertise.\n+\n+### !!!!!!!!!!!!!!! THIS IS A MAJOR RE-WRITE of this document. !!!!!!!!!!!!!\n+\n+Some Headlines:\n+\n+ * The build is now a \"`configure && make`\" style build\n+ * Any GNU make 3.81 or newer should work\n+ * The build should scale, i.e. more processors should cause the build to be\n+   done in less wall-clock time\n+ * Nested or recursive make invocations have been significantly reduced,\n+   as has the total fork\/exec or spawning of sub processes during the build\n+ * Windows MKS usage is no longer supported\n+ * Windows Visual Studio `vsvars*.bat` and `vcvars*.bat` files are run\n+   automatically\n+ * Ant is no longer used when building the OpenJDK\n+ * Use of ALT_* environment variables for configuring the build is no longer\n+   supported\n+\n+*****\n+\n+## Contents\n+\n+  * [Introduction](#introduction)\n+  * [Use of Mercurial](#hg)\n+    * [Getting the Source](#get_source)\n+    * [Repositories](#repositories)\n+  * [Building](#building)\n+    * [System Setup](#setup)\n+      * [Linux](#linux)\n+      * [Solaris](#solaris)\n+      * [Mac OS X](#macosx)\n+      * [Windows](#windows)\n+    * [Configure](#configure)\n+    * [Make](#make)\n+  * [Testing](#testing)\n+\n+*****\n+\n+  * [Appendix A: Hints and Tips](#hints)\n+    * [FAQ](#faq)\n+    * [Build Performance Tips](#performance)\n+    * [Troubleshooting](#troubleshooting)\n+  * [Appendix B: GNU Make Information](#gmake)\n+  * [Appendix C: Build Environments](#buildenvironments)\n+\n+*****\n+\n+<a name=\"hg\"><\/a>\n+## Use of Mercurial\n+\n+The OpenJDK sources are maintained with the revision control system\n+[Mercurial](http:\/\/mercurial.selenic.com\/wiki\/Mercurial). If you are new to\n+Mercurial, please see the [Beginner Guides](http:\/\/mercurial.selenic.com\/wiki\/\n+BeginnersGuides) or refer to the [Mercurial Book](http:\/\/hgbook.red-bean.com\/).\n+The first few chapters of the book provide an excellent overview of Mercurial,\n+what it is and how it works.\n+\n+For using Mercurial with the OpenJDK refer to the [Developer Guide: Installing\n+and Configuring Mercurial](http:\/\/openjdk.java.net\/guide\/\n+repositories.html#installConfig) section for more information.\n+\n+<a name=\"get_source\"><\/a>\n+### Getting the Source\n+\n+To get the entire set of OpenJDK Mercurial repositories use the script\n+`get_source.sh` located in the root repository:\n+\n+      hg clone http:\/\/hg.openjdk.java.net\/jdk8\/jdk8 YourOpenJDK\n+      cd YourOpenJDK\n+      bash .\/get_source.sh\n+\n+Once you have all the repositories, keep in mind that each repository is its\n+own independent repository. You can also re-run `.\/get_source.sh` anytime to\n+pull over all the latest changesets in all the repositories. This set of\n+nested repositories has been given the term \"forest\" and there are various\n+ways to apply the same `hg` command to each of the repositories. For\n+example, the script `make\/scripts\/hgforest.sh` can be used to repeat the\n+same `hg` command on every repository, e.g.\n+\n+      cd YourOpenJDK\n+      bash .\/make\/scripts\/hgforest.sh status\n+\n+<a name=\"repositories\"><\/a>\n+### Repositories\n+\n+The set of repositories and what they contain:\n+\n+ * **. (root)** contains common configure and makefile logic\n+ * **hotspot** contains source code and make files for building the OpenJDK\n+   Hotspot Virtual Machine\n+ * **langtools** contains source code for the OpenJDK javac and language tools\n+ * **jdk** contains source code and make files for building the OpenJDK runtime\n+   libraries and misc files\n+ * **jaxp** contains source code for the OpenJDK JAXP functionality\n+ * **jaxws** contains source code for the OpenJDK JAX-WS functionality\n+ * **corba** contains source code for the OpenJDK Corba functionality\n+ * **nashorn** contains source code for the OpenJDK JavaScript implementation\n+\n+### Repository Source Guidelines\n+\n+There are some very basic guidelines:\n+\n+ * Use of whitespace in source files (.java, .c, .h, .cpp, and .hpp files) is\n+   restricted. No TABs, no trailing whitespace on lines, and files should not\n+   terminate in more than one blank line.\n+ * Files with execute permissions should not be added to the source\n+   repositories.\n+ * All generated files need to be kept isolated from the files maintained or\n+   managed by the source control system. The standard area for generated files\n+   is the top level `build\/` directory.\n+ * The default build process should be to build the product and nothing else,\n+   in one form, e.g. a product (optimized), debug (non-optimized, -g plus\n+   assert logic), or fastdebug (optimized, -g plus assert logic).\n+ * The `.hgignore` file in each repository must exist and should include\n+   `^build\/`, `^dist\/` and optionally any `nbproject\/private` directories. **It\n+   should NEVER** include anything in the `src\/` or `test\/` or any managed\n+   directory area of a repository.\n+ * Directory names and file names should never contain blanks or non-printing\n+   characters.\n+ * Generated source or binary files should NEVER be added to the repository\n+   (that includes `javah` output). There are some exceptions to this rule, in\n+   particular with some of the generated configure scripts.\n+ * Files not needed for typical building or testing of the repository should\n+   not be added to the repository.\n+\n+*****\n+\n+<a name=\"building\"><\/a>\n+## Building\n+\n+The very first step in building the OpenJDK is making sure the system itself\n+has everything it needs to do OpenJDK builds. Once a system is setup, it\n+generally doesn't need to be done again.\n+\n+Building the OpenJDK is now done with running a `configure` script which will\n+try and find and verify you have everything you need, followed by running\n+`make`, e.g.\n+\n+>  **`bash .\/configure`**  \n+>  **`make all`**\n+\n+Where possible the `configure` script will attempt to located the various\n+components in the default locations or via component specific variable\n+settings. When the normal defaults fail or components cannot be found,\n+additional `configure` options may be necessary to help `configure` find the\n+necessary tools for the build, or you may need to re-visit the setup of your\n+system due to missing software packages.\n+\n+**NOTE:** The `configure` script file does not have execute permissions and\n+will need to be explicitly run with `bash`, see the source guidelines.\n+\n+*****\n+\n+<a name=\"setup\"><\/a>\n+### System Setup\n+\n+Before even attempting to use a system to build the OpenJDK there are some very\n+basic system setups needed. For all systems:\n+\n+ * Be sure the GNU make utility is version 3.81 or newer, e.g.\n+   run \"`make -version`\"\n+\n+   <a name=\"bootjdk\"><\/a>\n+ * Install a Bootstrap JDK. All OpenJDK builds require access to a previously\n+   released JDK called the _bootstrap JDK_ or _boot JDK._ The general rule is\n+   that the bootstrap JDK must be an instance of the previous major release of\n+   the JDK. In addition, there may be a requirement to use a release at or\n+   beyond a particular update level.\n+\n+   **_Building JDK 8 requires use of a version of JDK 7 this is at Update 7\n+   or newer. JDK 8 developers should not use JDK 8 as the boot JDK, to ensure\n+   that JDK 8 dependencies are not introduced into the parts of the system\n+   that are built with JDK 7._**\n+\n+   The JDK 7 binaries can be downloaded from Oracle's [JDK 7 download\n+   site](http:\/\/www.oracle.com\/technetwork\/java\/javase\/downloads\/index.html).\n+   For build performance reasons it is very important that this bootstrap JDK\n+   be made available on the local disk of the machine doing the build. You\n+   should add its `bin` directory to the `PATH` environment variable. If\n+   `configure` has any issues finding this JDK, you may need to use the\n+   `configure` option `--with-boot-jdk`.\n+\n+ * Ensure that GNU make, the Bootstrap JDK, and the compilers are all in your\n+   PATH environment variable.\n+\n+And for specific systems:\n+\n+ * **Linux**\n+\n+   Install all the software development packages needed including\n+   [alsa](#alsa), [freetype](#freetype), [cups](#cups), and\n+   [xrender](#xrender). See [specific system packages](#SDBE).\n+\n+ * **Solaris**\n+\n+   Install all the software development packages needed including [Studio\n+   Compilers](#studio), [freetype](#freetype), [cups](#cups), and\n+   [xrender](#xrender). See [specific system packages](#SDBE).\n+\n+ * **Windows**\n+\n+   * Install one of [CYGWIN](#cygwin) or [MinGW\/MSYS](#msys)\n+   * Install [Visual Studio 2010](#vs2010)\n+\n+ * **Mac OS X**\n+\n+   Install [XCode 4.5.2](https:\/\/developer.apple.com\/xcode\/) and also\n+   install the \"Command line tools\" found under the preferences pane\n+   \"Downloads\"\n+\n+<a name=\"linux\"><\/a>\n+#### Linux\n+\n+With Linux, try and favor the system packages over building your own or getting\n+packages from other areas. Most Linux builds should be possible with the\n+system's available packages.\n+\n+Note that some Linux systems have a habit of pre-populating your environment\n+variables for you, for example `JAVA_HOME` might get pre-defined for you to\n+refer to the JDK installed on your Linux system. You will need to unset\n+`JAVA_HOME`. It's a good idea to run `env` and verify the environment variables\n+you are getting from the default system settings make sense for building the\n+OpenJDK.\n+\n+<a name=\"solaris\"><\/a>\n+#### Solaris\n+\n+<a name=\"studio\"><\/a>\n+##### Studio Compilers\n+\n+At a minimum, the [Studio 12 Update 1 Compilers](http:\/\/www.oracle.com\/\n+technetwork\/server-storage\/solarisstudio\/downloads\/index.htm) (containing\n+version 5.10 of the C and C++ compilers) is required, including specific\n+patches.\n+\n+The Solaris SPARC patch list is:\n+\n+ * 118683-05: SunOS 5.10: Patch for profiling libraries and assembler\n+ * 119963-21: SunOS 5.10: Shared library patch for C++\n+ * 120753-08: SunOS 5.10: Microtasking libraries (libmtsk) patch\n+ * 128228-09: Sun Studio 12 Update 1: Patch for Sun C++ Compiler\n+ * 141860-03: Sun Studio 12 Update 1: Patch for Compiler Common patch for Sun C\n+   C++ F77 F95\n+ * 141861-05: Sun Studio 12 Update 1: Patch for Sun C Compiler\n+ * 142371-01: Sun Studio 12.1 Update 1: Patch for dbx\n+ * 143384-02: Sun Studio 12 Update 1: Patch for debuginfo handling\n+ * 143385-02: Sun Studio 12 Update 1: Patch for Compiler Common patch for Sun C\n+   C++ F77 F95\n+ * 142369-01: Sun Studio 12.1: Patch for Performance Analyzer Tools\n+\n+The Solaris X86 patch list is:\n+\n+ * 119961-07: SunOS 5.10_x86, x64, Patch for profiling libraries and assembler\n+ * 119964-21: SunOS 5.10_x86: Shared library patch for C++\\_x86\n+ * 120754-08: SunOS 5.10_x86: Microtasking libraries (libmtsk) patch\n+ * 141858-06: Sun Studio 12 Update 1_x86: Sun Compiler Common patch for x86\n+   backend\n+ * 128229-09: Sun Studio 12 Update 1_x86: Patch for C++ Compiler\n+ * 142363-05: Sun Studio 12 Update 1_x86: Patch for C Compiler\n+ * 142368-01: Sun Studio 12.1_x86: Patch for Performance Analyzer Tools\n+\n+Place the `bin` directory in `PATH`.\n+\n+The Oracle Solaris Studio Express compilers at: [Oracle Solaris Studio Express\n+Download site](http:\/\/www.oracle.com\/technetwork\/server-storage\/solarisstudio\/\n+downloads\/index-jsp-142582.html) are also an option, although these compilers\n+have not been extensively used yet.\n+\n+<a name=\"windows\"><\/a>\n+#### Windows\n+\n+##### Windows Unix Toolkit\n+\n+Building on Windows requires a Unix-like environment, notably a Unix-like\n+shell. There are several such environments available of which\n+[Cygwin](http:\/\/www.cygwin.com\/) and\n+[MinGW\/MSYS](http:\/\/www.mingw.org\/wiki\/MSYS) are currently supported for the\n+OpenJDK build. One of the differences of these systems from standard Windows\n+tools is the way they handle Windows path names, particularly path names which\n+contain spaces, backslashes as path separators and possibly drive letters.\n+Depending on the use case and the specifics of each environment these path\n+problems can be solved by a combination of quoting whole paths, translating\n+backslashes to forward slashes, escaping backslashes with additional\n+backslashes and translating the path names to their [\"8.3\"\n+version](http:\/\/en.wikipedia.org\/wiki\/8.3_filename).\n+\n+<a name=\"cygwin\"><\/a>\n+###### CYGWIN\n+\n+CYGWIN is an open source, Linux-like environment which tries to emulate a\n+complete POSIX layer on Windows. It tries to be smart about path names and can\n+usually handle all kinds of paths if they are correctly quoted or escaped\n+although internally it maps drive letters `<drive>:` to a virtual directory\n+`\/cygdrive\/<drive>`.\n+\n+You can always use the `cygpath` utility to map pathnames with spaces or the\n+backslash character into the `C:\/` style of pathname (called 'mixed'), e.g.\n+`cygpath -s -m \"<path>\"`.\n+\n+Note that the use of CYGWIN creates a unique problem with regards to setting\n+[`PATH`](#path). Normally on Windows the `PATH` variable contains directories\n+separated with the \";\" character (Solaris and Linux use \":\"). With CYGWIN, it\n+uses \":\", but that means that paths like \"C:\/path\" cannot be placed in the\n+CYGWIN version of `PATH` and instead CYGWIN uses something like\n+`\/cygdrive\/c\/path` which CYGWIN understands, but only CYGWIN understands.\n+\n+The OpenJDK build requires CYGWIN version 1.7.16 or newer. Information about\n+CYGWIN can be obtained from the CYGWIN website at\n+[www.cygwin.com](http:\/\/www.cygwin.com).\n+\n+By default CYGWIN doesn't install all the tools required for building the\n+OpenJDK. Along with the default installation, you need to install the following\n+tools.\n+\n+>  <table border=\"1\">\n+     <thead>\n+       <tr>\n+         <td>Binary Name<\/td>\n+         <td>Category<\/td>\n+         <td>Package<\/td>\n+         <td>Description<\/td>\n+      <\/tr>\n+     <\/thead>\n+     <tbody>\n+       <tr>\n+         <td>ar.exe<\/td>\n+         <td>Devel<\/td>\n+         <td>binutils<\/td>\n+         <td>The GNU assembler, linker and binary utilities<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>make.exe<\/td>\n+         <td>Devel<\/td>\n+         <td>make<\/td>\n+         <td>The GNU version of the 'make' utility built for CYGWIN<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>m4.exe<\/td>\n+         <td>Interpreters<\/td>\n+         <td>m4<\/td>\n+         <td>GNU implementation of the traditional Unix macro processor<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>cpio.exe<\/td>\n+         <td>Utils<\/td>\n+         <td>cpio<\/td>\n+         <td>A program to manage archives of files<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>gawk.exe<\/td>\n+         <td>Utils<\/td>\n+         <td>awk<\/td>\n+         <td>Pattern-directed scanning and processing language<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>file.exe<\/td>\n+         <td>Utils<\/td>\n+         <td>file<\/td>\n+         <td>Determines file type using 'magic' numbers<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>zip.exe<\/td>\n+         <td>Archive<\/td>\n+         <td>zip<\/td>\n+         <td>Package and compress (archive) files<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>unzip.exe<\/td>\n+         <td>Archive<\/td>\n+         <td>unzip<\/td>\n+         <td>Extract compressed files in a ZIP archive<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>free.exe<\/td>\n+         <td>System<\/td>\n+         <td>procps<\/td>\n+         <td>Display amount of free and used memory in the system<\/td>\n+       <\/tr>\n+     <\/tbody>\n+   <\/table>\n+\n+Note that the CYGWIN software can conflict with other non-CYGWIN software on\n+your Windows system. CYGWIN provides a [FAQ](http:\/\/cygwin.com\/faq\/\n+faq.using.html) for known issues and problems, of particular interest is the\n+section on [BLODA (applications that interfere with\n+CYGWIN)](http:\/\/cygwin.com\/faq\/faq.using.html#faq.using.bloda).\n+\n+<a name=\"msys\"><\/a>\n+###### MinGW\/MSYS\n+\n+MinGW (\"Minimalist GNU for Windows\") is a collection of free Windows specific\n+header files and import libraries combined with GNU toolsets that allow one to\n+produce native Windows programs that do not rely on any 3rd-party C runtime\n+DLLs. MSYS is a supplement to MinGW which allows building applications and\n+programs which rely on traditional UNIX tools to be present. Among others this\n+includes tools like `bash` and `make`. See [MinGW\/MSYS](http:\/\/www.mingw.org\/\n+wiki\/MSYS) for more information.\n+\n+Like Cygwin, MinGW\/MSYS can handle different types of path formats. They are\n+internally converted to paths with forward slashes and drive letters\n+`<drive>:` replaced by a virtual directory `\/<drive>`. Additionally, MSYS\n+automatically detects binaries compiled for the MSYS environment and feeds them\n+with the internal, Unix-style path names. If native Windows applications are\n+called from within MSYS programs their path arguments are automatically\n+converted back to Windows style path names with drive letters and backslashes\n+as path separators. This may cause problems for Windows applications which use\n+forward slashes as parameter separator (e.g. `cl \/nologo \/I`) because MSYS may\n+wrongly [replace such parameters by drive letters](http:\/\/mingw.org\/wiki\/\n+Posix_path_conversion).\n+\n+In addition to the tools which will be installed by default, you have to\n+manually install the `msys-zip` and `msys-unzip` packages. This can be easily\n+done with the MinGW command line installer:\n+\n+      mingw-get.exe install msys-zip\n+      mingw-get.exe install msys-unzip\n+\n+<a name=\"vs2010\"><\/a>\n+##### Visual Studio 2010 Compilers\n+\n+The 32-bit and 64-bit OpenJDK Windows build requires Microsoft Visual Studio\n+C++ 2010 (VS2010) Professional Edition or Express compiler. The compiler and\n+other tools are expected to reside in the location defined by the variable\n+`VS100COMNTOOLS` which is set by the Microsoft Visual Studio installer.\n+\n+Only the C++ part of VS2010 is needed. Try to let the installation go to the\n+default install directory. Always reboot your system after installing VS2010.\n+The system environment variable VS100COMNTOOLS should be set in your\n+environment.\n+\n+Make sure that TMP and TEMP are also set in the environment and refer to\n+Windows paths that exist, like `C:\\temp`, not `\/tmp`, not `\/cygdrive\/c\/temp`,\n+and not `C:\/temp`. `C:\\temp` is just an example, it is assumed that this area\n+is private to the user, so by default after installs you should see a unique\n+user path in these variables.\n+\n+<a name=\"macosx\"><\/a>\n+#### Mac OS X\n+\n+Make sure you get the right XCode version.\n+\n+*****\n+\n+<a name=\"configure\"><\/a>\n+### Configure\n+\n+The basic invocation of the `configure` script looks like:\n+\n+>  **`bash .\/configure [options]`**\n+\n+This will create an output directory containing the \"configuration\" and setup\n+an area for the build result. This directory typically looks like:\n+\n+>  **`build\/linux-x64-normal-server-release`**\n+\n+`configure` will try to figure out what system you are running on and where all\n+necessary build components are. If you have all prerequisites for building\n+installed, it should find everything. If it fails to detect any component\n+automatically, it will exit and inform you about the problem. When this\n+happens, read more below in [the `configure` options](#configureoptions).\n+\n+Some examples:\n+\n+>  **Windows 32bit build with freetype specified:**  \n+>  `bash .\/configure --with-freetype=\/cygdrive\/c\/freetype-i586 --with-target-\n+bits=32`\n+\n+>  **Debug 64bit Build:**  \n+>  `bash .\/configure --enable-debug --with-target-bits=64`\n+\n+<a name=\"configureoptions\"><\/a>\n+#### Configure Options\n+\n+Complete details on all the OpenJDK `configure` options can be seen with:\n+\n+>  **`bash .\/configure --help=short`**\n+\n+Use `-help` to see all the `configure` options available. You can generate any\n+number of different configurations, e.g. debug, release, 32, 64, etc.\n+\n+Some of the more commonly used `configure` options are:\n+\n+>  **`--enable-debug`**  \n+>  set the debug level to fastdebug (this is a shorthand for `--with-debug-\n+   level=fastdebug`)\n+\n+<a name=\"alsa\"><\/a>\n+>  **`--with-alsa=`**_path_  \n+>  select the location of the Advanced Linux Sound Architecture (ALSA)\n+\n+>  Version 0.9.1 or newer of the ALSA files are required for building the\n+   OpenJDK on Linux. These Linux files are usually available from an \"alsa\" of\n+   \"libasound\" development package, and it's highly recommended that you try\n+   and use the package provided by the particular version of Linux that you are\n+   using.\n+\n+>  **`--with-boot-jdk=`**_path_  \n+>  select the [Bootstrap JDK](#bootjdk)\n+\n+>  **`--with-boot-jdk-jvmargs=`**\"_args_\"  \n+>  provide the JVM options to be used to run the [Bootstrap JDK](#bootjdk)\n+\n+>  **`--with-cacerts=`**_path_  \n+>  select the path to the cacerts file.\n+\n+>  See [Certificate Authority on Wikipedia](http:\/\/en.wikipedia.org\/wiki\/\n+   Certificate_Authority) for a better understanding of the Certificate\n+   Authority (CA). A certificates file named \"cacerts\" represents a system-wide\n+   keystore with CA certificates. In JDK and JRE binary bundles, the \"cacerts\"\n+   file contains root CA certificates from several public CAs (e.g., VeriSign,\n+   Thawte, and Baltimore). The source contain a cacerts file without CA root\n+   certificates. Formal JDK builders will need to secure permission from each\n+   public CA and include the certificates into their own custom cacerts file.\n+   Failure to provide a populated cacerts file will result in verification\n+   errors of a certificate chain during runtime. By default an empty cacerts\n+   file is provided and that should be fine for most JDK developers.\n+\n+<a name=\"cups\"><\/a>\n+>  **`--with-cups=`**_path_  \n+>  select the CUPS install location\n+\n+>  The Common UNIX Printing System (CUPS) Headers are required for building the\n+   OpenJDK on Solaris and Linux. The Solaris header files can be obtained by\n+   installing the package **SFWcups** from the Solaris Software Companion\n+   CD\/DVD, these often will be installed into the directory `\/opt\/sfw\/cups`.\n+\n+>  The CUPS header files can always be downloaded from\n+   [www.cups.org](http:\/\/www.cups.org).\n+\n+>  **`--with-cups-include=`**_path_  \n+>  select the CUPS include directory location\n+\n+>  **`--with-debug-level=`**_level_  \n+>  select the debug information level of release, fastdebug, or slowdebug\n+\n+>  **`--with-dev-kit=`**_path_  \n+>  select location of the compiler install or developer install location\n+\n+<a name=\"freetype\"><\/a>\n+>  **`--with-freetype=`**_path_  \n+>  select the freetype files to use.\n+\n+>  Expecting the freetype libraries under `lib\/` and the headers under\n+   `include\/`.\n+\n+>  Version 2.3 or newer of FreeType is required. On Unix systems required files\n+   can be available as part of your distribution (while you still may need to\n+   upgrade them). Note that you need development version of package that\n+   includes both the FreeType library and header files.\n+\n+>  You can always download latest FreeType version from the [FreeType\n+   website](http:\/\/www.freetype.org). Building the freetype 2 libraries from\n+   scratch is also possible, however on Windows refer to the [Windows FreeType\n+   DLL build instructions](http:\/\/freetype.freedesktop.org\/wiki\/FreeType_DLL).\n+\n+>  Note that by default FreeType is built with byte code hinting support\n+   disabled due to licensing restrictions. In this case, text appearance and\n+   metrics are expected to differ from Sun's official JDK build. See the\n+   [SourceForge FreeType2 Home Page](http:\/\/freetype.sourceforge.net\/freetype2)\n+   for more information.\n+\n+>  **`--with-import-hotspot=`**_path_  \n+>  select the location to find hotspot binaries from a previous build to avoid\n+   building hotspot\n+\n+>  **`--with-target-bits=`**_arg_  \n+>  select 32 or 64 bit build\n+\n+>  **`--with-jvm-variants=`**_variants_  \n+>  select the JVM variants to build from, comma separated list that can\n+   include: server, client, kernel, zero and zeroshark\n+\n+>  **`--with-memory-size=`**_size_  \n+>  select the RAM size that GNU make will think this system has\n+\n+>  **`--with-msvcr-dll=`**_path_  \n+>  select the `msvcr100.dll` file to include in the Windows builds (C\/C++\n+   runtime library for Visual Studio).\n+\n+>  This is usually picked up automatically from the redist directories of\n+   Visual Studio 2010.\n+\n+>  **`--with-num-cores=`**_cores_  \n+>  select the number of cores to use (processor count or CPU count)\n+\n+<a name=\"xrender\"><\/a>\n+>  **`--with-x=`**_path_  \n+>  select the location of the X11 and xrender files.\n+\n+>  The XRender Extension Headers are required for building the OpenJDK on\n+   Solaris and Linux. The Linux header files are usually available from a\n+   \"Xrender\" development package, it's recommended that you try and use the\n+   package provided by the particular distribution of Linux that you are using.\n+   The Solaris XRender header files is included with the other X11 header files\n+   in the package **SFWxwinc** on new enough versions of Solaris and will be\n+   installed in `\/usr\/X11\/include\/X11\/extensions\/Xrender.h` or\n+   `\/usr\/openwin\/share\/include\/X11\/extensions\/Xrender.h`\n+\n+*****\n+\n+<a name=\"make\"><\/a>\n+### Make\n+\n+The basic invocation of the `make` utility looks like:\n+\n+>  **`make all`**\n+\n+This will start the build to the output directory containing the\n+\"configuration\" that was created by the `configure` script. Run `make help` for\n+more information on the available targets.\n+\n+There are some of the make targets that are of general interest:\n+\n+>  _empty_  \n+>  build everything but no images\n+\n+>  **`all`**  \n+>  build everything including images\n+\n+>  **`all-conf`**  \n+>  build all configurations\n+\n+>  **`images`**  \n+>  create complete j2sdk and j2re images\n+\n+>  **`install`**  \n+>  install the generated images locally, typically in `\/usr\/local`\n+\n+>  **`clean`**  \n+>  remove all files generated by make, but not those generated by `configure`\n+\n+>  **`dist-clean`**  \n+>  remove all files generated by both and `configure` (basically killing the\n+   configuration)\n+\n+>  **`help`**  \n+>  give some help on using `make`, including some interesting make targets\n+\n+*****\n+\n+<a name=\"testing\"><\/a>\n+## Testing\n+\n+When the build is completed, you should see the generated binaries and\n+associated files in the `j2sdk-image` directory in the output directory. In\n+particular, the `build\/*\/images\/j2sdk-image\/bin` directory should contain\n+executables for the OpenJDK tools and utilities for that configuration. The\n+testing tool `jtreg` will be needed and can be found at: [the jtreg\n+site](http:\/\/openjdk.java.net\/jtreg\/). The provided regression tests in the\n+repositories can be run with the command:\n+\n+>  **``cd test && make PRODUCT_HOME=`pwd`\/..\/build\/*\/images\/j2sdk-image all``**\n+\n+*****\n+\n+<a name=\"hints\"><\/a>\n+## Appendix A: Hints and Tips\n+\n+<a name=\"faq\"><\/a>\n+### FAQ\n+\n+**Q:** The `generated-configure.sh` file looks horrible! How are you going to\n+edit it?  \n+**A:** The `generated-configure.sh` file is generated (think \"compiled\") by the\n+autoconf tools. The source code is in `configure.ac` and various .m4 files in\n+common\/autoconf, which are much more readable.\n+\n+**Q:** Why is the `generated-configure.sh` file checked in, if it is \n+generated?  \n+**A:** If it was not generated, every user would need to have the autoconf\n+tools installed, and re-generate the `configure` file as the first step. Our\n+goal is to minimize the work needed to be done by the user to start building\n+OpenJDK, and to minimize the number of external dependencies required.\n+\n+**Q:** Do you require a specific version of autoconf for regenerating\n+`generated-configure.sh`?  \n+**A:** Yes, version 2.69 is required and should be easy enough to aquire on all\n+supported operating systems. The reason for this is to avoid large spurious\n+changes in `generated-configure.sh`.\n+\n+**Q:** How do you regenerate `generated-configure.sh` after making changes to\n+the input files?  \n+**A:** Regnerating `generated-configure.sh` should always be done using the\n+script `common\/autoconf\/autogen.sh` to ensure that the correct files get\n+updated. This script should also be run after mercurial tries to merge\n+`generated-configure.sh` as a merge of the generated file is not guaranteed to\n+be correct.\n+\n+**Q:** What are the files in `common\/makefiles\/support\/*` for? They look like\n+gibberish.  \n+**A:** They are a somewhat ugly hack to compensate for command line length\n+limitations on certain platforms (Windows, Solaris). Due to a combination of\n+limitations in make and the shell, command lines containing too many files will\n+not work properly. These helper files are part of an elaborate hack that will\n+compress the command line in the makefile and then uncompress it safely. We're\n+not proud of it, but it does fix the problem. If you have any better\n+suggestions, we're all ears! :-)\n+\n+**Q:** I want to see the output of the commands that make runs, like in the old\n+build. How do I do that?  \n+**A:** You specify the `LOG` variable to make. There are several log levels:\n+\n+ * **`warn`** -- Default and very quiet.\n+ * **`info`** -- Shows more progress information than warn.\n+ * **`debug`** -- Echos all command lines and prints all macro calls for\n+   compilation definitions.\n+ * **`trace`** -- Echos all $(shell) command lines as well.\n+\n+**Q:** When do I have to re-run `configure`?  \n+**A:** Normally you will run `configure` only once for creating a\n+configuration. You need to re-run configuration only if you want to change any\n+configuration options, or if you pull down changes to the `configure` script.\n+\n+**Q:** I have added a new source file. Do I need to modify the makefiles?  \n+**A:** Normally, no. If you want to create e.g. a new native library, you will\n+need to modify the makefiles. But for normal file additions or removals, no\n+changes are needed. There are certan exceptions for some native libraries where\n+the source files are spread over many directories which also contain sources\n+for other libraries. In these cases it was simply easier to create include\n+lists rather than excludes.\n+\n+**Q:** When I run `configure --help`, I see many strange options, like\n+`--dvidir`. What is this?  \n+**A:** Configure provides a slew of options by default, to all projects that\n+use autoconf. Most of them are not used in OpenJDK, so you can safely ignore\n+them. To list only OpenJDK specific features, use `configure --help=short`\n+instead.\n+\n+**Q:** `configure` provides OpenJDK-specific features such as `--with-\n+builddeps-server` that are not described in this document. What about those?  \n+**A:** Try them out if you like! But be aware that most of these are\n+experimental features. Many of them don't do anything at all at the moment; the\n+option is just a placeholder. Others depend on pieces of code or infrastructure\n+that is currently not ready for prime time.\n+\n+**Q:** How will you make sure you don't break anything?  \n+**A:** We have a script that compares the result of the new build system with\n+the result of the old. For most part, we aim for (and achieve) byte-by-byte\n+identical output. There are however technical issues with e.g. native binaries,\n+which might differ in a byte-by-byte comparison, even when building twice with\n+the old build system. For these, we compare relevant aspects (e.g. the symbol\n+table and file size). Note that we still don't have 100% equivalence, but we're\n+close.\n+\n+**Q:** I noticed this thing X in the build that looks very broken by design.\n+Why don't you fix it?  \n+**A:** Our goal is to produce a build output that is as close as technically\n+possible to the old build output. If things were weird in the old build, they\n+will be weird in the new build. Often, things were weird before due to\n+obscurity, but in the new build system the weird stuff comes up to the surface.\n+The plan is to attack these things at a later stage, after the new build system\n+is established.\n+\n+**Q:** The code in the new build system is not that well-structured. Will you\n+fix this?  \n+**A:** Yes! The new build system has grown bit by bit as we converted the old\n+system. When all of the old build system is converted, we can take a step back\n+and clean up the structure of the new build system. Some of this we plan to do\n+before replacing the old build system and some will need to wait until after.\n+\n+**Q:** Is anything able to use the results of the new build's default make\n+target?  \n+**A:** Yes, this is the minimal (or roughly minimal) set of compiled output\n+needed for a developer to actually execute the newly built JDK. The idea is\n+that in an incremental development fashion, when doing a normal make, you\n+should only spend time recompiling what's changed (making it purely\n+incremental) and only do the work that's needed to actually run and test your\n+code. The packaging stuff that is part of the `images` target is not needed for\n+a normal developer who wants to test his new code. Even if it's quite fast,\n+it's still unnecessary. We're targeting sub-second incremental rebuilds! ;-)\n+(Or, well, at least single-digit seconds...)\n+\n+**Q:** I usually set a specific environment variable when building, but I can't\n+find the equivalent in the new build. What should I do?  \n+**A:** It might very well be that we have neglected to add support for an\n+option that was actually used from outside the build system. Email us and we\n+will add support for it!\n+\n+<a name=\"performance\"><\/a>\n+### Build Performance Tips\n+\n+Building OpenJDK requires a lot of horsepower. Some of the build tools can be\n+adjusted to utilize more or less of resources such as parallel threads and\n+memory. The `configure` script analyzes your system and selects reasonable\n+values for such options based on your hardware. If you encounter resource\n+problems, such as out of memory conditions, you can modify the detected values\n+with:\n+\n+ * **`--with-num-cores`** -- number of cores in the build system, e.g.\n+   `--with-num-cores=8`\n+ * **`--with-memory-size`** -- memory (in MB) available in the build system,\n+    e.g. `--with-memory-size=1024`\n+\n+It might also be necessary to specify the JVM arguments passed to the Bootstrap\n+JDK, using e.g. `--with-boot-jdk-jvmargs=\"-Xmx8G -enableassertions\"`. Doing\n+this will override the default JVM arguments passed to the Bootstrap JDK.\n+\n+One of the top goals of the new build system is to improve the build\n+performance and decrease the time needed to build. This will soon also apply to\n+the java compilation when the Smart Javac wrapper is making its way into jdk8.\n+It can be tried in the build-infra repository already. You are likely to find\n+that the new build system is faster than the old one even without this feature.\n+\n+At the end of a successful execution of `configure`, you will get a performance\n+summary, indicating how well the build will perform. Here you will also get\n+performance hints. If you want to build fast, pay attention to those!\n+\n+#### Building with ccache\n+\n+A simple way to radically speed up compilation of native code\n+(typically hotspot and native libraries in JDK) is to install\n+ccache. This will cache and reuse prior compilation results, if the\n+source code is unchanged. However, ccache versions prior to 3.1.4 does\n+not work correctly with the precompiled headers used in OpenJDK. So if\n+your platform supports ccache at 3.1.4 or later, we highly recommend\n+installing it.  This is currently only supported on linux.\n+\n+#### Building on local disk\n+\n+If you are using network shares, e.g. via NFS, for your source code, make sure\n+the build directory is situated on local disk. The performance penalty is\n+extremely high for building on a network share, close to unusable.\n+\n+#### Building only one JVM\n+\n+The old build builds multiple JVMs on 32-bit systems (client and server; and on\n+Windows kernel as well). In the new build we have changed this default to only\n+build server when it's available. This improves build times for those not\n+interested in multiple JVMs. To mimic the old behavior on platforms that\n+support it, use `--with-jvm-variants=client,server`.\n+\n+#### Selecting the number of cores to build on\n+\n+By default, `configure` will analyze your machine and run the make process in\n+parallel with as many threads as you have cores. This behavior can be\n+overridden, either \"permanently\" (on a `configure` basis) using\n+`--with-num-cores=N` or for a single build only (on a make basis), using\n+`make JOBS=N`.\n+\n+If you want to make a slower build just this time, to save some CPU power for\n+other processes, you can run e.g. `make JOBS=2`. This will force the makefiles\n+to only run 2 parallel processes, or even `make JOBS=1` which will disable\n+parallelism.\n+\n+If you want to have it the other way round, namely having slow builds default\n+and override with fast if you're impatient, you should call `configure` with\n+`--with-num-cores=2`, making 2 the default. If you want to run with more cores,\n+run `make JOBS=8`\n+\n+<a name=\"troubleshooting\"><\/a>\n+### Troubleshooting\n+\n+#### Solving build problems\n+\n+If the build fails (and it's not due to a compilation error in a source file\n+you've changed), the first thing you should do is to re-run the build with more\n+verbosity. Do this by adding `LOG=debug` to your make command line.\n+\n+The build log (with both stdout and stderr intermingled, basically the same as\n+you see on your console) can be found as `build.log` in your build directory.\n+\n+You can ask for help on build problems with the new build system on either the\n+[build-dev](http:\/\/mail.openjdk.java.net\/mailman\/listinfo\/build-dev) or the\n+[build-infra-dev](http:\/\/mail.openjdk.java.net\/mailman\/listinfo\/build-infra-dev)\n+mailing lists. Please include the relevant parts of the build log.\n+\n+A build can fail for any number of reasons. Most failures are a result of\n+trying to build in an environment in which all the pre-build requirements have\n+not been met. The first step in troubleshooting a build failure is to recheck\n+that you have satisfied all the pre-build requirements for your platform.\n+Scanning the `configure` log is a good first step, making sure that what it\n+found makes sense for your system. Look for strange error messages or any\n+difficulties that `configure` had in finding things.\n+\n+Some of the more common problems with builds are briefly described below, with\n+suggestions for remedies.\n+\n+ * **Corrupted Bundles on Windows:**  \n+   Some virus scanning software has been known to corrupt the downloading of\n+   zip bundles. It may be necessary to disable the 'on access' or 'real time'\n+   virus scanning features to prevent this corruption. This type of 'real time'\n+   virus scanning can also slow down the build process significantly.\n+   Temporarily disabling the feature, or excluding the build output directory\n+   may be necessary to get correct and faster builds.\n+\n+ * **Slow Builds:**  \n+   If your build machine seems to be overloaded from too many simultaneous C++\n+   compiles, try setting the `JOBS=1` on the `make` command line. Then try\n+   increasing the count slowly to an acceptable level for your system. Also:\n+\n+   Creating the javadocs can be very slow, if you are running javadoc, consider\n+   skipping that step.\n+\n+   Faster CPUs, more RAM, and a faster DISK usually helps. The VM build tends\n+   to be CPU intensive (many C++ compiles), and the rest of the JDK will often\n+   be disk intensive.\n+\n+   Faster compiles are possible using a tool called\n+   [ccache](http:\/\/ccache.samba.org\/).\n+\n+ * **File time issues:**  \n+   If you see warnings that refer to file time stamps, e.g.\n+\n+   > _Warning message:_ ` File 'xxx' has modification time in the future.`  \n+   > _Warning message:_ ` Clock skew detected. Your build may be incomplete.`\n+\n+   These warnings can occur when the clock on the build machine is out of sync\n+   with the timestamps on the source files. Other errors, apparently unrelated\n+   but in fact caused by the clock skew, can occur along with the clock skew\n+   warnings. These secondary errors may tend to obscure the fact that the true\n+   root cause of the problem is an out-of-sync clock.\n+\n+   If you see these warnings, reset the clock on the build machine, run\n+   \"`gmake clobber`\" or delete the directory containing the build output, and\n+   restart the build from the beginning.\n+\n+ * **Error message: `Trouble writing out table to disk`**  \n+   Increase the amount of swap space on your build machine. This could be\n+   caused by overloading the system and it may be necessary to use:\n+\n+   > `make JOBS=1`\n+\n+   to reduce the load on the system.\n+\n+ * **Error Message: `libstdc++ not found`:**  \n+   This is caused by a missing libstdc++.a library. This is installed as part\n+   of a specific package (e.g. libstdc++.so.devel.386). By default some 64-bit\n+   Linux versions (e.g. Fedora) only install the 64-bit version of the\n+   libstdc++ package. Various parts of the JDK build require a static link of\n+   the C++ runtime libraries to allow for maximum portability of the built\n+   images.\n+\n+ * **Linux Error Message: `cannot restore segment prot after reloc`**  \n+   This is probably an issue with SELinux (See [SELinux on\n+   Wikipedia](http:\/\/en.wikipedia.org\/wiki\/SELinux)). Parts of the VM is built\n+   without the `-fPIC` for performance reasons.\n+\n+   To completely disable SELinux:\n+\n+   1. `$ su root`\n+   2. `# system-config-securitylevel`\n+   3. `In the window that appears, select the SELinux tab`\n+   4. `Disable SELinux`\n+\n+   Alternatively, instead of completely disabling it you could disable just\n+   this one check.\n+\n+   1. Select System->Administration->SELinux Management\n+   2. In the SELinux Management Tool which appears, select \"Boolean\" from the\n+      menu on the left\n+   3. Expand the \"Memory Protection\" group\n+   4. Check the first item, labeled \"Allow all unconfined executables to use\n+      libraries requiring text relocation ...\"\n+\n+ * **Windows Error Messages:**  \n+   `*** fatal error - couldn't allocate heap, ... `  \n+   `rm fails with \"Directory not empty\"`  \n+   `unzip fails with \"cannot create ... Permission denied\"`  \n+   `unzip fails with \"cannot create ... Error 50\"`\n+\n+   The CYGWIN software can conflict with other non-CYGWIN software. See the\n+   CYGWIN FAQ section on [BLODA (applications that interfere with\n+   CYGWIN)](http:\/\/cygwin.com\/faq\/faq.using.html#faq.using.bloda).\n+\n+ * **Windows Error Message: `spawn failed`**  \n+   Try rebooting the system, or there could be some kind of issue with the disk\n+   or disk partition being used. Sometimes it comes with a \"Permission Denied\"\n+   message.\n+\n+*****\n+\n+<a name=\"gmake\"><\/a>\n+## Appendix B: GNU make\n+\n+The Makefiles in the OpenJDK are only valid when used with the GNU version of\n+the utility command `make` (usually called `gmake` on Solaris). A few notes\n+about using GNU make:\n+\n+ * You need GNU make version 3.81 or newer. If the GNU make utility on your\n+   systems is not 3.81 or newer, see \"[Building GNU make](#buildgmake)\".\n+ * Place the location of the GNU make binary in the `PATH`.\n+ * **Solaris:** Do NOT use `\/usr\/bin\/make` on Solaris. If your Solaris system\n+   has the software from the Solaris Developer Companion CD installed, you\n+   should try and use `gmake` which will be located in either the `\/usr\/bin`,\n+   `\/opt\/sfw\/bin` or `\/usr\/sfw\/bin` directory.\n+ * **Windows:** Make sure you start your build inside a bash shell.\n+ * **Mac OS X:** The XCode \"command line tools\" must be installed on your Mac.\n+\n+Information on GNU make, and access to ftp download sites, are available on the\n+[GNU make web site ](http:\/\/www.gnu.org\/software\/make\/make.html). The latest\n+source to GNU make is available at\n+[ftp.gnu.org\/pub\/gnu\/make\/](http:\/\/ftp.gnu.org\/pub\/gnu\/make\/).\n+\n+<a name=\"buildgmake\"><\/a>\n+### Building GNU make\n+\n+First step is to get the GNU make 3.81 or newer source from\n+[ftp.gnu.org\/pub\/gnu\/make\/](http:\/\/ftp.gnu.org\/pub\/gnu\/make\/). Building is a\n+little different depending on the OS but is basically done with:\n+\n+      bash .\/configure\n+      make\n+\n+*****\n+\n+<a name=\"buildenvironments\"><\/a>\n+## Appendix C: Build Environments\n+\n+### Minimum Build Environments\n+\n+This file often describes specific requirements for what we call the \"minimum\n+build environments\" (MBE) for this specific release of the JDK. What is listed\n+below is what the Oracle Release Engineering Team will use to build the Oracle\n+JDK product. Building with the MBE will hopefully generate the most compatible\n+bits that install on, and run correctly on, the most variations of the same\n+base OS and hardware architecture. In some cases, these represent what is often\n+called the least common denominator, but each Operating System has different\n+aspects to it.\n+\n+In all cases, the Bootstrap JDK version minimum is critical, we cannot\n+guarantee builds will work with older Bootstrap JDK's. Also in all cases, more\n+RAM and more processors is better, the minimums listed below are simply\n+recommendations.\n+\n+With Solaris and Mac OS X, the version listed below is the oldest release we\n+can guarantee builds and works, and the specific version of the compilers used\n+could be critical.\n+\n+With Windows the critical aspect is the Visual Studio compiler used, which due\n+to it's runtime, generally dictates what Windows systems can do the builds and\n+where the resulting bits can be used.\n+\n+**NOTE: We expect a change here off these older Windows OS releases and to a\n+'less older' one, probably Windows 2008R2 X64.**\n+\n+With Linux, it was just a matter of picking a stable distribution that is a\n+good representative for Linux in general.\n+\n+**NOTE: We expect a change here from Fedora 9 to something else, but it has not\n+been completely determined yet, possibly Ubuntu 12.04 X64, unbiased community\n+feedback would be welcome on what a good choice would be here.**\n+\n+It is understood that most developers will NOT be using these specific\n+versions, and in fact creating these specific versions may be difficult due to\n+the age of some of this software. It is expected that developers are more often\n+using the more recent releases and distributions of these operating systems.\n+\n+Compilation problems with newer or different C\/C++ compilers is a common\n+problem. Similarly, compilation problems related to changes to the\n+`\/usr\/include` or system header files is also a common problem with older,\n+newer, or unreleased OS versions. Please report these types of problems as bugs\n+so that they can be dealt with accordingly.\n+\n+>  <table border=\"1\">\n+     <thead>\n+       <tr>\n+         <th>Base OS and Architecture<\/th>\n+         <th>OS<\/th>\n+         <th>C\/C++ Compiler<\/th>\n+         <th>Bootstrap JDK<\/th>\n+         <th>Processors<\/th>\n+         <th>RAM Minimum<\/th>\n+         <th>DISK Needs<\/th>\n+       <\/tr>\n+     <\/thead>\n+     <tbody>\n+       <tr>\n+         <td>Linux X86 (32-bit) and X64 (64-bit)<\/td>\n+         <td>Fedora 9<\/td>\n+         <td>gcc 4.3 <\/td>\n+         <td>JDK 7u7<\/td>\n+         <td>2 or more<\/td>\n+         <td>1 GB<\/td>\n+         <td>6 GB<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>Solaris SPARC (32-bit) and SPARCV9 (64-bit)<\/td>\n+         <td>Solaris 10 Update 6<\/td>\n+         <td>Studio 12 Update 1 + patches<\/td>\n+         <td>JDK 7u7<\/td>\n+         <td>4 or more<\/td>\n+         <td>4 GB<\/td>\n+         <td>8 GB<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>Solaris X86 (32-bit) and X64 (64-bit)<\/td>\n+         <td>Solaris 10 Update 6<\/td>\n+         <td>Studio 12 Update 1 + patches<\/td>\n+         <td>JDK 7u7<\/td>\n+         <td>4 or more<\/td>\n+         <td>4 GB<\/td>\n+         <td>8 GB<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>Windows X86 (32-bit)<\/td>\n+         <td>Windows XP<\/td>\n+         <td>Microsoft Visual Studio C++ 2010 Professional Edition<\/td>\n+         <td>JDK 7u7<\/td>\n+         <td>2 or more<\/td>\n+         <td>2 GB<\/td>\n+         <td>6 GB<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>Windows X64 (64-bit)<\/td>\n+         <td>Windows Server 2003 - Enterprise x64 Edition<\/td>\n+         <td>Microsoft Visual Studio C++ 2010 Professional Edition<\/td>\n+         <td>JDK 7u7<\/td>\n+         <td>2 or more<\/td>\n+         <td>2 GB<\/td>\n+         <td>6 GB<\/td>\n+       <\/tr>\n+       <tr>\n+         <td>Mac OS X X64 (64-bit)<\/td>\n+         <td>Mac OS X 10.7 \"Lion\"<\/td>\n+         <td>XCode 4.5.2 or newer<\/td>\n+         <td>JDK 7u7<\/td>\n+         <td>2 or more<\/td>\n+         <td>4 GB<\/td>\n+         <td>6 GB<\/td>\n+       <\/tr>\n+     <\/tbody>\n+   <\/table>\n+\n+*****\n+\n+<a name=\"SDBE\"><\/a>\n+### Specific Developer Build Environments\n+\n+We won't be listing all the possible environments, but we will try to provide\n+what information we have available to us.\n+\n+**NOTE: The community can help out by updating this part of the document.**\n+\n+#### Fedora\n+\n+After installing the latest [Fedora](http:\/\/fedoraproject.org) you need to\n+install several build dependencies. The simplest way to do it is to execute the\n+following commands as user `root`:\n+\n+      yum-builddep java-1.7.0-openjdk\n+      yum install gcc gcc-c++\n+\n+In addition, it's necessary to set a few environment variables for the build:\n+\n+      export LANG=C\n+      export PATH=\"\/usr\/lib\/jvm\/java-openjdk\/bin:${PATH}\"\n+\n+#### CentOS 5.5\n+\n+After installing [CentOS 5.5](http:\/\/www.centos.org\/) you need to make sure you\n+have the following Development bundles installed:\n+\n+ * Development Libraries\n+ * Development Tools\n+ * Java Development\n+ * X Software Development (Including XFree86-devel)\n+\n+Plus the following packages:\n+\n+ * cups devel: Cups Development Package\n+ * alsa devel: Alsa Development Package\n+ * Xi devel: libXi.so Development Package\n+\n+The freetype 2.3 packages don't seem to be available, but the freetype 2.3\n+sources can be downloaded, built, and installed easily enough from [the\n+freetype site](http:\/\/downloads.sourceforge.net\/freetype). Build and install\n+with something like:\n+\n+      bash .\/configure\n+      make\n+      sudo -u root make install\n+\n+Mercurial packages could not be found easily, but a Google search should find\n+ones, and they usually include Python if it's needed.\n+\n+#### Debian 5.0 (Lenny)\n+\n+After installing [Debian](http:\/\/debian.org) 5 you need to install several\n+build dependencies. The simplest way to install the build dependencies is to\n+execute the following commands as user `root`:\n+\n+      aptitude build-dep openjdk-7\n+      aptitude install openjdk-7-jdk libmotif-dev\n+\n+In addition, it's necessary to set a few environment variables for the build:\n+\n+      export LANG=C\n+      export PATH=\"\/usr\/lib\/jvm\/java-7-openjdk\/bin:${PATH}\"\n+\n+#### Ubuntu 12.04\n+\n+After installing [Ubuntu](http:\/\/ubuntu.org) 12.04 you need to install several\n+build dependencies. The simplest way to do it is to execute the following\n+commands:\n+\n+      sudo aptitude build-dep openjdk-7\n+      sudo aptitude install openjdk-7-jdk\n+\n+In addition, it's necessary to set a few environment variables for the build:\n+\n+      export LANG=C\n+      export PATH=\"\/usr\/lib\/jvm\/java-7-openjdk\/bin:${PATH}\"\n+\n+#### OpenSUSE 11.1\n+\n+After installing [OpenSUSE](http:\/\/opensuse.org) 11.1 you need to install\n+several build dependencies. The simplest way to install the build dependencies\n+is to execute the following commands:\n+\n+      sudo zypper source-install -d java-1_7_0-openjdk\n+      sudo zypper install make\n+\n+In addition, it is necessary to set a few environment variables for the build:\n+\n+      export LANG=C\n+      export PATH=\"\/usr\/lib\/jvm\/java-1.7.0-openjdk\/bin:$[PATH}\"\n+\n+Finally, you need to unset the `JAVA_HOME` environment variable:\n+\n+      export -n JAVA_HOME`\n+\n+#### Mandriva Linux One 2009 Spring\n+\n+After installing [Mandriva](http:\/\/mandriva.org) Linux One 2009 Spring you need\n+to install several build dependencies. The simplest way to install the build\n+dependencies is to execute the following commands as user `root`:\n+\n+      urpmi java-1.7.0-openjdk-devel make gcc gcc-c++ freetype-devel zip unzip\n+        libcups2-devel libxrender1-devel libalsa2-devel libstc++-static-devel\n+        libxtst6-devel libxi-devel\n+\n+In addition, it is necessary to set a few environment variables for the build:\n+\n+      export LANG=C\n+      export PATH=\"\/usr\/lib\/jvm\/java-1.7.0-openjdk\/bin:${PATH}\"\n+\n+#### OpenSolaris 2009.06\n+\n+After installing [OpenSolaris](http:\/\/opensolaris.org) 2009.06 you need to\n+install several build dependencies. The simplest way to install the build\n+dependencies is to execute the following commands:\n+\n+      pfexec pkg install SUNWgmake SUNWj7dev sunstudioexpress SUNWcups SUNWzip\n+        SUNWunzip SUNWxwhl SUNWxorg-headers SUNWaudh SUNWfreetype2\n+\n+In addition, it is necessary to set a few environment variables for the build:\n+\n+      export LANG=C\n+      export PATH=\"\/opt\/SunStudioExpress\/bin:${PATH}\"\n+\n+*****\n+\n+End of the OpenJDK build README document.\n+\n+Please come again!\n","filename":"README-builds.md","additions":1266,"deletions":0,"binary":false,"changes":1266,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+#!\/bin\/bash\n+\n+# Get an absolute path to this script, since that determines the top-level\n+# directory.\n+this_script_dir=`dirname $0`\n+TOPDIR=`cd $this_script_dir\/..\/.. > \/dev\/null && pwd`\n+\n+GREP=grep\n+MD_FILE=$TOPDIR\/README-builds.md\n+HTML_FILE=$TOPDIR\/README-builds.html\n+\n+# Locate the markdown processor tool and check that it is the correct version.\n+locate_markdown_processor() {\n+  if [ -z \"$MARKDOWN\" ]; then\n+    MARKDOWN=`which markdown 2> \/dev\/null`\n+    if [ -z \"$MARKDOWN\" ]; then\n+      echo \"Error: Cannot locate markdown processor\" 1>&2\n+      exit 1\n+    fi\n+  fi\n+\n+  # Test version\n+  MARKDOWN_VERSION=`$MARKDOWN -version | $GREP version`\n+  if [ \"x$MARKDOWN_VERSION\" != \"xThis is Markdown, version 1.0.1.\" ]; then\n+    echo \"Error: Expected markdown version 1.0.1.\" 1>&2\n+    echo \"Actual version found: $MARKDOWN_VERSION\" 1>&2\n+    echo \"Download markdown here: https:\/\/daringfireball.net\/projects\/markdown\/\"  1>&2\n+    exit 1\n+  fi\n+\n+}\n+\n+# Verify that the source markdown file looks sound.\n+verify_source_code() {\n+  TOO_LONG_LINES=`$GREP -E -e '^.{80}.+$' $MD_FILE`\n+  if [ \"x$TOO_LONG_LINES\" != x ]; then\n+    echo \"Warning: The following lines are longer than 80 characters:\"\n+    $GREP -E -e '^.{80}.+$' $MD_FILE\n+  fi\n+}\n+\n+# Convert the markdown file to html format.\n+process_source() {\n+  echo \"Generating html file from markdown\"\n+  cat > $HTML_FILE << END\n+<html>\n+  <head>\n+    <title>OpenJDK Build README<\/title>\n+  <\/head>\n+  <body>\n+END\n+  ${MARKDOWN} $MD_FILE >> $HTML_FILE\n+  cat >> $HTML_FILE <<END\n+  <\/body>\n+<\/html>\n+END\n+  echo \"Done\"\n+}\n+\n+locate_markdown_processor\n+verify_source_code\n+process_source\n","filename":"common\/bin\/update-build-readme.sh","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"}]}