{"files":[{"patch":"@@ -40,1 +40,2 @@\n-}\n\\ No newline at end of file\n+}\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/CustomReport\/CustomReport6.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,1 +39,2 @@\n-}\n\\ No newline at end of file\n+}\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/CustomReport\/CustomReport7.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,408 +46,416 @@\n-    public static Icon getIcon(JDialogOperator config, int index) {\n-    Icon icon = ((JLabel) new JListOperator(config).getRenderedComponent(index)).getIcon();\n-    return icon;\n-    }\n-\n-    public static void pushEnableBookmarks(JDialogOperator config) {\n-    new JMenuOperator(config, \"Bookmarks\").pushMenu(new String[]{\"Bookmarks\", getExecResource(\"ct.markers.ckb\")});\n-    }\n-\n-    public static void pushShowOnlyBookmarked(JDialogOperator config) {\n-    new JMenuOperator(config, \"Bookmarks\").pushMenu(new String[]{\"Bookmarks\", \"Show Only Bookmarked Questions\"});\n-    }\n-\n-    public static void pushClearBookmarkedAnswer(JDialogOperator config) {\n-    new JMenuOperator(config, \"Bookmarks\").pushMenu(new String[]{\"Bookmarks\", \"Clear Answers For Current Question\"});\n-    }\n-\n-    public static void pushClearAllBookmarkedAnswers(JDialogOperator config) {\n-    new JMenuOperator(config, \"Bookmarks\").pushMenu(new String[]{\"Bookmarks\", \"Clear Answers to Bookmarked Questions\"});\n-    }\n-\n-    public static void pushOpenHiddenGroupByMenu(JDialogOperator config) {\n-    new JMenuOperator(config, \"Bookmarks\").pushMenu(new String[]{\"Bookmarks\", \"Open \\\". . .\\\" Group\"});\n-    }\n-\n-    public static void pushOpenHiddenGroupByMouse(JDialogOperator config, int index) {\n-    JListOperatorExt list = new JListOperatorExt(config);\n-    list.clickOnItem(index, 1);\n-    if (list.clickOnItem(index, 2, MouseEvent.BUTTON1_MASK) == null) {\n-        throw new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n-    }\n-    }\n-\n-    public static void pushCloseHiddenGroupByMouse(JDialogOperator config, int index) {\n-    JListOperatorExt list = new JListOperatorExt(config);\n-    list.clickOnItem(index, 1);\n-    if (list.clickOnItem(index, 2, MouseEvent.BUTTON1_MASK) == null) {\n-        throw new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n-    }\n-    }\n-\n-    public static void pushCloseByMenu(JDialogOperator config) {\n-    new JMenuOperator(config, \"Bookmarks\").pushMenu(new String[]{\"Bookmarks\", \"Close \\\". . .\\\" Group\"});\n-    }\n-\n-    public static void pushCloseByPopup(JDialogOperator config, int index) {\n-    JListOperatorExt list = new JListOperatorExt(config);\n-    list.clickOnItem(index, 1);\n-    if (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n-        throw new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n-    }\n-    new JPopupMenuOperator(config).pushMenu(\"Close \\\". . .\\\" Group\");\n-    }\n-\n-    public static void pushOpenHiddenGroupByPopup(JDialogOperator config, int index) {\n-    JListOperatorExt list = new JListOperatorExt(config);\n-    list.clickOnItem(index, 1);\n-    if (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n-        throw new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n-    }\n-    new JPopupMenuOperator(config).pushMenu(\"Open \\\". . .\\\" Group\");\n-    }\n-\n-    public static void clearByMenu(JDialogOperator config, int index) {\n-    new JListOperator(config).selectItem(index);\n-    new JMenuOperator(config, \"Bookmarks\").pushMenu(new String[]{\"Bookmarks\", \"Clear Answer For Current Question\"});\n-    }\n-\n-    public static void setBookmarkedByMenu(JDialogOperator config, int index) {\n-    new JListOperator(config).selectItem(index);\n-    new JMenuOperator(config, \"Bookmarks\").pushMenu(new String[]{\"Bookmarks\", \"Mark Current Question\"});\n-    }\n-\n-    public static void unsetBookmarkedByMenu(JDialogOperator config, int index) {\n-    new JListOperator(config).selectItem(index);\n-    new JMenuOperator(config, \"Bookmarks\").pushMenu(new String[]{\"Bookmarks\", \"Unmark Current Question\"});\n-    }\n-\n-    public static void setBookmarkedByMenu(JDialogOperator config, int[] indexes) {\n-    JMenuOperator bookmarksMenu = new JMenuOperator(config, \"Bookmarks\");\n-    String[] menuPath = new String[]{\"Bookmarks\", \"Mark Current Question\"};\n-    JListOperator list = new JListOperator(config);\n-    for (int index : indexes) {\n-        list.selectItem(index);\n-        bookmarksMenu.pushMenu(menuPath);\n-    }\n-    }\n-\n-    public static void setBookmarkedByPopup(JDialogOperator config, int[] indexes) {\n-    for (int index : indexes)\n-        setBookmarkedByPopup(config, index);\n-    }\n-\n-    public static void setBookmarkedByMouse(JDialogOperator config, int index) {\n-    JListOperatorExt list = new JListOperatorExt(config);\n-    list.clickOnItem(index, 1, MouseEvent.BUTTON1_MASK, 10);\n-    }\n-\n-    public static String[] getElementsNames(JDialogOperator config, int[] indexes) {\n-    JListOperator list = new JListOperator(config);\n-    String temp[] = new String[indexes.length];\n-    for (int i = 0; i < indexes.length; i++) {\n-        temp[i] = ((JLabel) list.getRenderedComponent(indexes[i])).getText();\n-    }\n-    return temp;\n-    }\n-\n-    public static String[] getElementsNames(JDialogOperator config) {\n-    JListOperator list = new JListOperator(config);\n-    String temp[] = new String[list.getModel().getSize()];\n-    for (int i = 0; i < list.getModel().getSize(); i++) {\n-        temp[i] = ((JLabel) list.getRenderedComponent(i)).getText();\n-    }\n-    return temp;\n-    }\n-\n-    public static void setBookmarkedByPopup(JDialogOperator config, int index) {\n-    JListOperatorExt list = new JListOperatorExt(config);\n-    list.clickOnItem(index, 1);\n-    if (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n-        throw new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n-    }\n-    new JPopupMenuOperator(config).pushMenu(\"Mark Current Question\");\n-    }\n-\n-    public static void clickBookmarkedByMouse(JDialogOperator config, int index) {\n-    JListOperatorExt list = new JListOperatorExt(config);\n-    list.clickOnItem(index, 1);\n-    if (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n-        throw new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n-    }\n-    new JPopupMenuOperator(config).pushMenu(\"Mark Current Question\");\n-    }\n-\n-    public static void unsetBookmarkedByPopup(JDialogOperator config, int index) {\n-    JListOperatorExt list = new JListOperatorExt(config);\n-    list.clickOnItem(index, 1);\n-    if (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n-        throw new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n-    }\n-    new JPopupMenuOperator(config).pushMenu(\"Unmark Current Question\");\n-    }\n-\n-    public static void clearByPopup(JDialogOperator config, int index) {\n-    JListOperatorExt list = new JListOperatorExt(config);\n-    new JListOperator(config).selectItem(index);\n-    if (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n-        throw new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n-    }\n-    new JPopupMenuOperator(config).pushMenu(\"Clear Answer For Current Question\");\n-    }\n-\n-    public static int[] checkVisibility(JDialogOperator config, String[] names) {\n-    JListOperator list = new JListOperator(config);\n-\n-    int marks[] = new int[names.length];\n-    for (int mark : marks) {\n-        mark = -1;\n-    }\n-    for (int i = 0; i < list.getModel().getSize(); i++) {\n-        String text = ((JLabel) list.getRenderedComponent(i)).getText();\n-        if (text != null) {\n-        for (int j = 0; j < names.length; j++) {\n-            if (text.equals(names[j])) {\n-            marks[j] = i;\n-            }\n-        }\n-        }\n-    }\n-\n-    for (int i = 0; i < marks.length; i++) {\n-        if (marks[i] == -1) {\n-        throw new JemmyException(\"Element with name '\" + names[i] + \"' wasn't found\");\n-        }\n-    }\n-\n-    return marks;\n-    }\n-\n-    public static void checkVisibilityAll(JDialogOperator config, String[] names) {\n-    JListOperator list = new JListOperator(config);\n-    for (int i = 0; i < list.getModel().getSize(); i++) {\n-        String text = ((JLabel) list.getRenderedComponent(i)).getText();\n-        if (text == null) {\n-        throw new JemmyException(\"Element N\" + i + \" hasn't any name while expected '\" + names[i] + \"'\");\n-        }\n-        if (!text.equals(names[i])) {\n-        throw new JemmyException(\"Element N\" + i + \" has name '\" + list.getRenderedComponent(i).getName() + \"' while expected '\" + names[i] + \"'\");\n-        }\n-    }\n-    }\n-\n-    public static void checkHiddenGroups(JDialogOperator config, int[] indexes, String[] names) {\n-    JListOperator list = new JListOperator(config);\n-\n-    if (indexes.length > 0) {\n-        int temp = 0;\n-\n-        for (int i = 0; i < indexes.length; i++) {\n-        if (indexes[i] - temp > 1) {\n-            if (((JLabel) list.getRenderedComponent(indexes[i] - 1)).getText() != null) {\n-            throw new JemmyException(\"element \" + (indexes[i] - 1) + \" isn't '...'\");\n-            }\n-        }\n-        temp = indexes[i];\n-        }\n-    }\n-    }\n-\n-    public static void openGroupByMenu(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n-    JListOperator list = new JListOperator(config);\n-\n-    int i;\n-    for (i = 0; i < list.getModel().getSize(); i++) {\n-        if (((JLabel) list.getRenderedComponent(i)).getText() == null) {\n-        break;\n-        }\n-    }\n-\n-    list.selectItem(i);\n-    pushOpenHiddenGroupByMenu(config);\n-\n-    for (int j = i; j < list.getModel().getSize(); j++) {\n-        String text = ((JLabel) list.getRenderedComponent(j)).getText();\n-        if (!(text.equals(namesAll[j]))) {\n-        throw new JemmyException(\"Element \" + j + \" is '\" + text + \"' after opening '...' group while expected '\" + namesAll[j] + \"'\");\n-        }\n-        if (text.equals(namesHidden[i + 1])) {\n-        break;\n-        }\n-    }\n-    }\n-\n-    public static void openGroupByMouse(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n-    JListOperator list = new JListOperator(config);\n-\n-    int i;\n-    for (i = 0; i < list.getModel().getSize(); i++) {\n-        if (((JLabel) list.getRenderedComponent(i)).getText() == null) {\n-        break;\n-        }\n-    }\n-\n-    pushOpenHiddenGroupByMouse(config, i);\n-\n-    for (int j = i; j < list.getModel().getSize(); j++) {\n-        String text = ((JLabel) list.getRenderedComponent(j)).getText();\n-        if (!(text.equals(namesAll[j]))) {\n-        throw new JemmyException(\"Element \" + j + \" is '\" + text + \"' after opening '...' group while expected '\" + namesAll[j] + \"'\");\n-        }\n-        if (text.equals(namesHidden[i + 1])) {\n-        break;\n-        }\n-    }\n-    }\n-\n-    public static void openGroupByPopup(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n-    JListOperator list = new JListOperator(config);\n-\n-    int i;\n-    for (i = 0; i < list.getModel().getSize(); i++) {\n-        if (((JLabel) list.getRenderedComponent(i)).getText() == null) {\n-        break;\n-        }\n-    }\n-\n-    pushOpenHiddenGroupByPopup(config, i);\n-\n-    for (int j = i; j < list.getModel().getSize(); j++) {\n-        String text = ((JLabel) list.getRenderedComponent(j)).getText();\n-        if (!(text.equals(namesAll[j]))) {\n-        throw new JemmyException(\"Element \" + j + \" is '\" + text + \"' after opening '...' group while expected '\" + namesAll[j] + \"'\");\n-        }\n-        if (text.equals(namesHidden[i + 1])) {\n-        break;\n-        }\n-    }\n-\n-    }\n-\n-    public static void closeGroupByMenu(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n-    JListOperator list = new JListOperator(config);\n-\n-    int i;\n-    for (i = 0; i < namesHidden.length; i++) {\n-        if (namesHidden[i] == null) {\n-        break;\n-        }\n-    }\n-\n-    list.selectItem(i);\n-    pushCloseByMenu(config);\n-\n-    if (((JLabel) list.getRenderedComponent(i)).getText() != null) {\n-        throw new JemmyException(\"Element \" + i + \" isn't '...' after closing\");\n-    }\n-    if (!(((JLabel) list.getRenderedComponent(i + 1)).getText().equals(namesHidden[i + 1]))) {\n-        throw new JemmyException(\"Element \" + (i + 1) + \" isn't \" + namesHidden[i + 1] + \" after closing\");\n-    }\n-    }\n-\n-    public static void closeGroupByPopup(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n-    JListOperator list = new JListOperator(config);\n-\n-    int i;\n-    for (i = 0; i < namesHidden.length; i++) {\n-        if (namesHidden[i] == null) {\n-        break;\n-        }\n-    }\n-\n-    pushCloseByPopup(config, i);\n-\n-    if (((JLabel) list.getRenderedComponent(i)).getText() != null) {\n-        throw new JemmyException(\"Element \" + i + \" isn't '...' after closing\");\n-    }\n-    if (!(((JLabel) list.getRenderedComponent(i + 1)).getText().equals(namesHidden[i + 1]))) {\n-        throw new JemmyException(\"Element \" + (i + 1) + \" isn't \" + namesHidden[i + 1] + \" after closing\");\n-    }\n-    }\n-\n-    public static void closeGroupByMouse(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n-    JListOperator list = new JListOperator(config);\n-\n-    int i;\n-    for (i = 0; i < namesHidden.length; i++) {\n-        if (namesHidden[i] == null) {\n-        break;\n-        }\n-    }\n-\n-    pushCloseHiddenGroupByMouse(config, i);\n-\n-    if (((JLabel) list.getRenderedComponent(i)).getText() != null) {\n-        throw new JemmyException(\"Element \" + i + \" isn't '...' after closing\");\n-    }\n-    if (!(((JLabel) list.getRenderedComponent(i + 1)).getText().equals(namesHidden[i + 1]))) {\n-        throw new JemmyException(\"Element \" + (i + 1) + \" isn't \" + namesHidden[i + 1] + \" after closing\");\n-    }\n-    }\n-\n-    public static boolean checkBookmarked(JDialogOperator config, int index) {\n-    JListOperator list = new JListOperator(config);\n-    return ((JLabel)list.getRenderedComponent(index)).getIcon() != null;\n-    }\n-\n-    static class JListOperatorExt extends JListOperator {\n-\n-    public JListOperatorExt(ContainerOperator c) {\n-        super(c);\n-    }\n-\n-    public Object clickOnItem(final int itemIndex, final int clickCount, final int mouseButton) {\n-        if (itemIndex > getModel().getSize()) {\n-        throw new JemmyException(\"bad index\");\n-        }\n-        scrollToItem(itemIndex);\n-\n-        if (((JList) getSource()).getModel().getSize() <= itemIndex) {\n-        return (null);\n-        }\n-        if (((JList) getSource()).getAutoscrolls()) {\n-        ((JList) getSource()).ensureIndexIsVisible(itemIndex);\n-        }\n-        return (getQueueTool().invokeSmoothly(new QueueTool.QueueAction(\"Path selecting\") {\n-\n-        public Object launch() {\n-            Rectangle rect = getCellBounds(itemIndex, itemIndex);\n-            if (rect == null) {\n-            return (null);\n-            }\n-            Point point = new Point((int) (rect.getX() + rect.getWidth() \/ 2),\n-                (int) (rect.getY() + rect.getHeight() \/ 2));\n-            Object result = getModel().getElementAt(itemIndex);\n-            clickMouse(point.x, point.y, clickCount, mouseButton);\n-            return (result);\n-        }\n-        }));\n-    }\n-\n-    public Object clickOnItem(final int itemIndex, final int clickCount, final int mouseButton, final int x) {\n-        if (itemIndex > getModel().getSize()) {\n-        throw new JemmyException(\"bad index\");\n-        }\n-        scrollToItem(itemIndex);\n-\n-        if (((JList) getSource()).getModel().getSize() <= itemIndex) {\n-        return (null);\n-        }\n-        if (((JList) getSource()).getAutoscrolls()) {\n-        ((JList) getSource()).ensureIndexIsVisible(itemIndex);\n-        }\n-        return (getQueueTool().invokeSmoothly(new QueueTool.QueueAction(\"Path selecting\") {\n-\n-        public Object launch() {\n-            Rectangle rect = getCellBounds(itemIndex, itemIndex);\n-            if (rect == null) {\n-            return (null);\n-            }\n-            Point point = new Point((int) (rect.getX() + x == 0 ? rect.getWidth() \/ 2:x),\n-                (int) (rect.getY() + rect.getHeight() \/ 2));\n-            Object result = getModel().getElementAt(itemIndex);\n-            clickMouse(point.x, point.y, clickCount, mouseButton);\n-            return (result);\n-        }\n-        }));\n-    }\n-    }\n+\tpublic static Icon getIcon(JDialogOperator config, int index) {\n+\t\tIcon icon = ((JLabel) new JListOperator(config).getRenderedComponent(index)).getIcon();\n+\t\treturn icon;\n+\t}\n+\n+\tpublic static void pushEnableBookmarks(JDialogOperator config) {\n+\t\tnew JMenuOperator(config, \"Bookmarks\")\n+\t\t\t\t.pushMenu(new String[] { \"Bookmarks\", getExecResource(\"ct.markers.ckb\") });\n+\t}\n+\n+\tpublic static void pushShowOnlyBookmarked(JDialogOperator config) {\n+\t\tnew JMenuOperator(config, \"Bookmarks\").pushMenu(new String[] { \"Bookmarks\", \"Show Only Bookmarked Questions\" });\n+\t}\n+\n+\tpublic static void pushClearBookmarkedAnswer(JDialogOperator config) {\n+\t\tnew JMenuOperator(config, \"Bookmarks\")\n+\t\t\t\t.pushMenu(new String[] { \"Bookmarks\", \"Clear Answers For Current Question\" });\n+\t}\n+\n+\tpublic static void pushClearAllBookmarkedAnswers(JDialogOperator config) {\n+\t\tnew JMenuOperator(config, \"Bookmarks\")\n+\t\t\t\t.pushMenu(new String[] { \"Bookmarks\", \"Clear Answers to Bookmarked Questions\" });\n+\t}\n+\n+\tpublic static void pushOpenHiddenGroupByMenu(JDialogOperator config) {\n+\t\tnew JMenuOperator(config, \"Bookmarks\").pushMenu(new String[] { \"Bookmarks\", \"Open \\\". . .\\\" Group\" });\n+\t}\n+\n+\tpublic static void pushOpenHiddenGroupByMouse(JDialogOperator config, int index) {\n+\t\tJListOperatorExt list = new JListOperatorExt(config);\n+\t\tlist.clickOnItem(index, 1);\n+\t\tif (list.clickOnItem(index, 2, MouseEvent.BUTTON1_MASK) == null) {\n+\t\t\tthrow new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+\t\t}\n+\t}\n+\n+\tpublic static void pushCloseHiddenGroupByMouse(JDialogOperator config, int index) {\n+\t\tJListOperatorExt list = new JListOperatorExt(config);\n+\t\tlist.clickOnItem(index, 1);\n+\t\tif (list.clickOnItem(index, 2, MouseEvent.BUTTON1_MASK) == null) {\n+\t\t\tthrow new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+\t\t}\n+\t}\n+\n+\tpublic static void pushCloseByMenu(JDialogOperator config) {\n+\t\tnew JMenuOperator(config, \"Bookmarks\").pushMenu(new String[] { \"Bookmarks\", \"Close \\\". . .\\\" Group\" });\n+\t}\n+\n+\tpublic static void pushCloseByPopup(JDialogOperator config, int index) {\n+\t\tJListOperatorExt list = new JListOperatorExt(config);\n+\t\tlist.clickOnItem(index, 1);\n+\t\tif (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n+\t\t\tthrow new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+\t\t}\n+\t\tnew JPopupMenuOperator(config).pushMenu(\"Close \\\". . .\\\" Group\");\n+\t}\n+\n+\tpublic static void pushOpenHiddenGroupByPopup(JDialogOperator config, int index) {\n+\t\tJListOperatorExt list = new JListOperatorExt(config);\n+\t\tlist.clickOnItem(index, 1);\n+\t\tif (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n+\t\t\tthrow new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+\t\t}\n+\t\tnew JPopupMenuOperator(config).pushMenu(\"Open \\\". . .\\\" Group\");\n+\t}\n+\n+\tpublic static void clearByMenu(JDialogOperator config, int index) {\n+\t\tnew JListOperator(config).selectItem(index);\n+\t\tnew JMenuOperator(config, \"Bookmarks\")\n+\t\t\t\t.pushMenu(new String[] { \"Bookmarks\", \"Clear Answer For Current Question\" });\n+\t}\n+\n+\tpublic static void setBookmarkedByMenu(JDialogOperator config, int index) {\n+\t\tnew JListOperator(config).selectItem(index);\n+\t\tnew JMenuOperator(config, \"Bookmarks\").pushMenu(new String[] { \"Bookmarks\", \"Mark Current Question\" });\n+\t}\n+\n+\tpublic static void unsetBookmarkedByMenu(JDialogOperator config, int index) {\n+\t\tnew JListOperator(config).selectItem(index);\n+\t\tnew JMenuOperator(config, \"Bookmarks\").pushMenu(new String[] { \"Bookmarks\", \"Unmark Current Question\" });\n+\t}\n+\n+\tpublic static void setBookmarkedByMenu(JDialogOperator config, int[] indexes) {\n+\t\tJMenuOperator bookmarksMenu = new JMenuOperator(config, \"Bookmarks\");\n+\t\tString[] menuPath = new String[] { \"Bookmarks\", \"Mark Current Question\" };\n+\t\tJListOperator list = new JListOperator(config);\n+\t\tfor (int index : indexes) {\n+\t\t\tlist.selectItem(index);\n+\t\t\tbookmarksMenu.pushMenu(menuPath);\n+\t\t}\n+\t}\n+\n+\tpublic static void setBookmarkedByPopup(JDialogOperator config, int[] indexes) {\n+\t\tfor (int index : indexes)\n+\t\t\tsetBookmarkedByPopup(config, index);\n+\t}\n+\n+\tpublic static void setBookmarkedByMouse(JDialogOperator config, int index) {\n+\t\tJListOperatorExt list = new JListOperatorExt(config);\n+\t\tlist.clickOnItem(index, 1, MouseEvent.BUTTON1_MASK, 10);\n+\t}\n+\n+\tpublic static String[] getElementsNames(JDialogOperator config, int[] indexes) {\n+\t\tJListOperator list = new JListOperator(config);\n+\t\tString temp[] = new String[indexes.length];\n+\t\tfor (int i = 0; i < indexes.length; i++) {\n+\t\t\ttemp[i] = ((JLabel) list.getRenderedComponent(indexes[i])).getText();\n+\t\t}\n+\t\treturn temp;\n+\t}\n+\n+\tpublic static String[] getElementsNames(JDialogOperator config) {\n+\t\tJListOperator list = new JListOperator(config);\n+\t\tString temp[] = new String[list.getModel().getSize()];\n+\t\tfor (int i = 0; i < list.getModel().getSize(); i++) {\n+\t\t\ttemp[i] = ((JLabel) list.getRenderedComponent(i)).getText();\n+\t\t}\n+\t\treturn temp;\n+\t}\n+\n+\tpublic static void setBookmarkedByPopup(JDialogOperator config, int index) {\n+\t\tJListOperatorExt list = new JListOperatorExt(config);\n+\t\tlist.clickOnItem(index, 1);\n+\t\tif (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n+\t\t\tthrow new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+\t\t}\n+\t\tnew JPopupMenuOperator(config).pushMenu(\"Mark Current Question\");\n+\t}\n+\n+\tpublic static void clickBookmarkedByMouse(JDialogOperator config, int index) {\n+\t\tJListOperatorExt list = new JListOperatorExt(config);\n+\t\tlist.clickOnItem(index, 1);\n+\t\tif (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n+\t\t\tthrow new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+\t\t}\n+\t\tnew JPopupMenuOperator(config).pushMenu(\"Mark Current Question\");\n+\t}\n+\n+\tpublic static void unsetBookmarkedByPopup(JDialogOperator config, int index) {\n+\t\tJListOperatorExt list = new JListOperatorExt(config);\n+\t\tlist.clickOnItem(index, 1);\n+\t\tif (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n+\t\t\tthrow new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+\t\t}\n+\t\tnew JPopupMenuOperator(config).pushMenu(\"Unmark Current Question\");\n+\t}\n+\n+\tpublic static void clearByPopup(JDialogOperator config, int index) {\n+\t\tJListOperatorExt list = new JListOperatorExt(config);\n+\t\tnew JListOperator(config).selectItem(index);\n+\t\tif (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n+\t\t\tthrow new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+\t\t}\n+\t\tnew JPopupMenuOperator(config).pushMenu(\"Clear Answer For Current Question\");\n+\t}\n+\n+\tpublic static int[] checkVisibility(JDialogOperator config, String[] names) {\n+\t\tJListOperator list = new JListOperator(config);\n+\n+\t\tint marks[] = new int[names.length];\n+\t\tfor (int mark : marks) {\n+\t\t\tmark = -1;\n+\t\t}\n+\t\tfor (int i = 0; i < list.getModel().getSize(); i++) {\n+\t\t\tString text = ((JLabel) list.getRenderedComponent(i)).getText();\n+\t\t\tif (text != null) {\n+\t\t\t\tfor (int j = 0; j < names.length; j++) {\n+\t\t\t\t\tif (text.equals(names[j])) {\n+\t\t\t\t\t\tmarks[j] = i;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tfor (int i = 0; i < marks.length; i++) {\n+\t\t\tif (marks[i] == -1) {\n+\t\t\t\tthrow new JemmyException(\"Element with name '\" + names[i] + \"' wasn't found\");\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn marks;\n+\t}\n+\n+\tpublic static void checkVisibilityAll(JDialogOperator config, String[] names) {\n+\t\tJListOperator list = new JListOperator(config);\n+\t\tfor (int i = 0; i < list.getModel().getSize(); i++) {\n+\t\t\tString text = ((JLabel) list.getRenderedComponent(i)).getText();\n+\t\t\tif (text == null) {\n+\t\t\t\tthrow new JemmyException(\"Element N\" + i + \" hasn't any name while expected '\" + names[i] + \"'\");\n+\t\t\t}\n+\t\t\tif (!text.equals(names[i])) {\n+\t\t\t\tthrow new JemmyException(\"Element N\" + i + \" has name '\" + list.getRenderedComponent(i).getName()\n+\t\t\t\t\t\t+ \"' while expected '\" + names[i] + \"'\");\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static void checkHiddenGroups(JDialogOperator config, int[] indexes, String[] names) {\n+\t\tJListOperator list = new JListOperator(config);\n+\n+\t\tif (indexes.length > 0) {\n+\t\t\tint temp = 0;\n+\n+\t\t\tfor (int i = 0; i < indexes.length; i++) {\n+\t\t\t\tif (indexes[i] - temp > 1) {\n+\t\t\t\t\tif (((JLabel) list.getRenderedComponent(indexes[i] - 1)).getText() != null) {\n+\t\t\t\t\t\tthrow new JemmyException(\"element \" + (indexes[i] - 1) + \" isn't '...'\");\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\ttemp = indexes[i];\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static void openGroupByMenu(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n+\t\tJListOperator list = new JListOperator(config);\n+\n+\t\tint i;\n+\t\tfor (i = 0; i < list.getModel().getSize(); i++) {\n+\t\t\tif (((JLabel) list.getRenderedComponent(i)).getText() == null) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\tlist.selectItem(i);\n+\t\tpushOpenHiddenGroupByMenu(config);\n+\n+\t\tfor (int j = i; j < list.getModel().getSize(); j++) {\n+\t\t\tString text = ((JLabel) list.getRenderedComponent(j)).getText();\n+\t\t\tif (!(text.equals(namesAll[j]))) {\n+\t\t\t\tthrow new JemmyException(\"Element \" + j + \" is '\" + text\n+\t\t\t\t\t\t+ \"' after opening '...' group while expected '\" + namesAll[j] + \"'\");\n+\t\t\t}\n+\t\t\tif (text.equals(namesHidden[i + 1])) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static void openGroupByMouse(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n+\t\tJListOperator list = new JListOperator(config);\n+\n+\t\tint i;\n+\t\tfor (i = 0; i < list.getModel().getSize(); i++) {\n+\t\t\tif (((JLabel) list.getRenderedComponent(i)).getText() == null) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\tpushOpenHiddenGroupByMouse(config, i);\n+\n+\t\tfor (int j = i; j < list.getModel().getSize(); j++) {\n+\t\t\tString text = ((JLabel) list.getRenderedComponent(j)).getText();\n+\t\t\tif (!(text.equals(namesAll[j]))) {\n+\t\t\t\tthrow new JemmyException(\"Element \" + j + \" is '\" + text\n+\t\t\t\t\t\t+ \"' after opening '...' group while expected '\" + namesAll[j] + \"'\");\n+\t\t\t}\n+\t\t\tif (text.equals(namesHidden[i + 1])) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static void openGroupByPopup(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n+\t\tJListOperator list = new JListOperator(config);\n+\n+\t\tint i;\n+\t\tfor (i = 0; i < list.getModel().getSize(); i++) {\n+\t\t\tif (((JLabel) list.getRenderedComponent(i)).getText() == null) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\tpushOpenHiddenGroupByPopup(config, i);\n+\n+\t\tfor (int j = i; j < list.getModel().getSize(); j++) {\n+\t\t\tString text = ((JLabel) list.getRenderedComponent(j)).getText();\n+\t\t\tif (!(text.equals(namesAll[j]))) {\n+\t\t\t\tthrow new JemmyException(\"Element \" + j + \" is '\" + text\n+\t\t\t\t\t\t+ \"' after opening '...' group while expected '\" + namesAll[j] + \"'\");\n+\t\t\t}\n+\t\t\tif (text.equals(namesHidden[i + 1])) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t}\n+\n+\tpublic static void closeGroupByMenu(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n+\t\tJListOperator list = new JListOperator(config);\n+\n+\t\tint i;\n+\t\tfor (i = 0; i < namesHidden.length; i++) {\n+\t\t\tif (namesHidden[i] == null) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\tlist.selectItem(i);\n+\t\tpushCloseByMenu(config);\n+\n+\t\tif (((JLabel) list.getRenderedComponent(i)).getText() != null) {\n+\t\t\tthrow new JemmyException(\"Element \" + i + \" isn't '...' after closing\");\n+\t\t}\n+\t\tif (!(((JLabel) list.getRenderedComponent(i + 1)).getText().equals(namesHidden[i + 1]))) {\n+\t\t\tthrow new JemmyException(\"Element \" + (i + 1) + \" isn't \" + namesHidden[i + 1] + \" after closing\");\n+\t\t}\n+\t}\n+\n+\tpublic static void closeGroupByPopup(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n+\t\tJListOperator list = new JListOperator(config);\n+\n+\t\tint i;\n+\t\tfor (i = 0; i < namesHidden.length; i++) {\n+\t\t\tif (namesHidden[i] == null) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\tpushCloseByPopup(config, i);\n+\n+\t\tif (((JLabel) list.getRenderedComponent(i)).getText() != null) {\n+\t\t\tthrow new JemmyException(\"Element \" + i + \" isn't '...' after closing\");\n+\t\t}\n+\t\tif (!(((JLabel) list.getRenderedComponent(i + 1)).getText().equals(namesHidden[i + 1]))) {\n+\t\t\tthrow new JemmyException(\"Element \" + (i + 1) + \" isn't \" + namesHidden[i + 1] + \" after closing\");\n+\t\t}\n+\t}\n+\n+\tpublic static void closeGroupByMouse(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n+\t\tJListOperator list = new JListOperator(config);\n+\n+\t\tint i;\n+\t\tfor (i = 0; i < namesHidden.length; i++) {\n+\t\t\tif (namesHidden[i] == null) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\tpushCloseHiddenGroupByMouse(config, i);\n+\n+\t\tif (((JLabel) list.getRenderedComponent(i)).getText() != null) {\n+\t\t\tthrow new JemmyException(\"Element \" + i + \" isn't '...' after closing\");\n+\t\t}\n+\t\tif (!(((JLabel) list.getRenderedComponent(i + 1)).getText().equals(namesHidden[i + 1]))) {\n+\t\t\tthrow new JemmyException(\"Element \" + (i + 1) + \" isn't \" + namesHidden[i + 1] + \" after closing\");\n+\t\t}\n+\t}\n+\n+\tpublic static boolean checkBookmarked(JDialogOperator config, int index) {\n+\t\tJListOperator list = new JListOperator(config);\n+\t\treturn ((JLabel) list.getRenderedComponent(index)).getIcon() != null;\n+\t}\n+\n+\tstatic class JListOperatorExt extends JListOperator {\n+\n+\t\tpublic JListOperatorExt(ContainerOperator c) {\n+\t\t\tsuper(c);\n+\t\t}\n+\n+\t\tpublic Object clickOnItem(final int itemIndex, final int clickCount, final int mouseButton) {\n+\t\t\tif (itemIndex > getModel().getSize()) {\n+\t\t\t\tthrow new JemmyException(\"bad index\");\n+\t\t\t}\n+\t\t\tscrollToItem(itemIndex);\n+\n+\t\t\tif (((JList) getSource()).getModel().getSize() <= itemIndex) {\n+\t\t\t\treturn (null);\n+\t\t\t}\n+\t\t\tif (((JList) getSource()).getAutoscrolls()) {\n+\t\t\t\t((JList) getSource()).ensureIndexIsVisible(itemIndex);\n+\t\t\t}\n+\t\t\treturn (getQueueTool().invokeSmoothly(new QueueTool.QueueAction(\"Path selecting\") {\n+\n+\t\t\t\tpublic Object launch() {\n+\t\t\t\t\tRectangle rect = getCellBounds(itemIndex, itemIndex);\n+\t\t\t\t\tif (rect == null) {\n+\t\t\t\t\t\treturn (null);\n+\t\t\t\t\t}\n+\t\t\t\t\tPoint point = new Point((int) (rect.getX() + rect.getWidth() \/ 2),\n+\t\t\t\t\t\t\t(int) (rect.getY() + rect.getHeight() \/ 2));\n+\t\t\t\t\tObject result = getModel().getElementAt(itemIndex);\n+\t\t\t\t\tclickMouse(point.x, point.y, clickCount, mouseButton);\n+\t\t\t\t\treturn (result);\n+\t\t\t\t}\n+\t\t\t}));\n+\t\t}\n+\n+\t\tpublic Object clickOnItem(final int itemIndex, final int clickCount, final int mouseButton, final int x) {\n+\t\t\tif (itemIndex > getModel().getSize()) {\n+\t\t\t\tthrow new JemmyException(\"bad index\");\n+\t\t\t}\n+\t\t\tscrollToItem(itemIndex);\n+\n+\t\t\tif (((JList) getSource()).getModel().getSize() <= itemIndex) {\n+\t\t\t\treturn (null);\n+\t\t\t}\n+\t\t\tif (((JList) getSource()).getAutoscrolls()) {\n+\t\t\t\t((JList) getSource()).ensureIndexIsVisible(itemIndex);\n+\t\t\t}\n+\t\t\treturn (getQueueTool().invokeSmoothly(new QueueTool.QueueAction(\"Path selecting\") {\n+\n+\t\t\t\tpublic Object launch() {\n+\t\t\t\t\tRectangle rect = getCellBounds(itemIndex, itemIndex);\n+\t\t\t\t\tif (rect == null) {\n+\t\t\t\t\t\treturn (null);\n+\t\t\t\t\t}\n+\t\t\t\t\tPoint point = new Point((int) (rect.getX() + x == 0 ? rect.getWidth() \/ 2 : x),\n+\t\t\t\t\t\t\t(int) (rect.getY() + rect.getHeight() \/ 2));\n+\t\t\t\t\tObject result = getModel().getElementAt(itemIndex);\n+\t\t\t\t\tclickMouse(point.x, point.y, clickCount, mouseButton);\n+\t\t\t\t\treturn (result);\n+\t\t\t\t}\n+\t\t\t}));\n+\t\t}\n+\t}\n@@ -455,0 +463,1 @@\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Markers\/Markers.java","additions":417,"deletions":408,"binary":false,"changes":825,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Markers\/Markers2.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Markers\/Markers3.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/ReportCreate\/ReportCreate2.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/ReportCreate\/ReportCreate3.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}