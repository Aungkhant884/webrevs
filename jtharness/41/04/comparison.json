{"files":[{"patch":"@@ -30,1 +30,2 @@\n- * This test case verifies that report can be generated in html format.\n+ * This test case verifies that report can be generated in html and plain text\n+ * format.\n@@ -32,0 +33,1 @@\n+public class CustomReport6 extends CReport {\n@@ -33,4 +35,2 @@\n-public class CustomReport1 extends CReport {\n-\n-    public CustomReport1() {\n-        super(true, false, false);\n+    public CustomReport6() {\n+        super(true, true, false);\n@@ -38,0 +38,1 @@\n+\n@@ -39,0 +40,1 @@\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/CustomReport\/CustomReport6.java","additions":7,"deletions":5,"binary":false,"changes":12,"previous_filename":"gui-tests\/src\/gui\/src\/jthtest\/CustomReport\/CustomReport1.java","status":"copied"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jthtest.CustomReport;\n+\n+\/**\n+ * This test case verifies that report can be generated in html,xml and plain\n+ * text format.\n+ *\/\n+public class CustomReport7 extends CReport {\n+\n+    public CustomReport7() {\n+        super(true, true, true);\n+    }\n+}\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/CustomReport\/CustomReport7.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,466 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jthtest.Markers;\n+\n+import jthtest.ConfigTools;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.event.MouseEvent;\n+import javax.swing.Icon;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import org.netbeans.jemmy.JemmyException;\n+import org.netbeans.jemmy.QueueTool;\n+import org.netbeans.jemmy.operators.ContainerOperator;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JListOperator;\n+import org.netbeans.jemmy.operators.JMenuOperator;\n+import org.netbeans.jemmy.operators.JPopupMenuOperator;\n+\n+\/**\n+ * This class contains the methods to perform certain actions on Bookmarks Menu options in the JavaTest configuration editor\n+ *\/\n+public class Markers extends ConfigTools {\n+\n+    public static Icon getIcon(JDialogOperator config, int index) {\n+        Icon icon = ((JLabel) new JListOperator(config).getRenderedComponent(index)).getIcon();\n+        return icon;\n+    }\n+\n+    public static void pushEnableBookmarks(JDialogOperator config) {\n+        new JMenuOperator(config, \"Bookmarks\")\n+                .pushMenu(new String[] { \"Bookmarks\", getExecResource(\"ct.markers.ckb\") });\n+    }\n+\n+    public static void pushShowOnlyBookmarked(JDialogOperator config) {\n+        new JMenuOperator(config, \"Bookmarks\").pushMenu(new String[] { \"Bookmarks\", \"Show Only Bookmarked Questions\" });\n+    }\n+\n+    public static void pushClearBookmarkedAnswer(JDialogOperator config) {\n+        new JMenuOperator(config, \"Bookmarks\")\n+                .pushMenu(new String[] { \"Bookmarks\", \"Clear Answers For Current Question\" });\n+    }\n+\n+    public static void pushClearAllBookmarkedAnswers(JDialogOperator config) {\n+        new JMenuOperator(config, \"Bookmarks\")\n+                .pushMenu(new String[] { \"Bookmarks\", \"Clear Answers to Bookmarked Questions\" });\n+    }\n+\n+    public static void pushOpenHiddenGroupByMenu(JDialogOperator config) {\n+        new JMenuOperator(config, \"Bookmarks\").pushMenu(new String[] { \"Bookmarks\", \"Open \\\". . .\\\" Group\" });\n+    }\n+\n+    public static void pushOpenHiddenGroupByMouse(JDialogOperator config, int index) {\n+        JListOperatorExt list = new JListOperatorExt(config);\n+        list.clickOnItem(index, 1);\n+        if (list.clickOnItem(index, 2, MouseEvent.BUTTON1_MASK) == null) {\n+            throw new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+        }\n+    }\n+\n+    public static void pushCloseHiddenGroupByMouse(JDialogOperator config, int index) {\n+        JListOperatorExt list = new JListOperatorExt(config);\n+        list.clickOnItem(index, 1);\n+        if (list.clickOnItem(index, 2, MouseEvent.BUTTON1_MASK) == null) {\n+            throw new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+        }\n+    }\n+\n+    public static void pushCloseByMenu(JDialogOperator config) {\n+        new JMenuOperator(config, \"Bookmarks\").pushMenu(new String[] { \"Bookmarks\", \"Close \\\". . .\\\" Group\" });\n+    }\n+\n+    public static void pushCloseByPopup(JDialogOperator config, int index) {\n+        JListOperatorExt list = new JListOperatorExt(config);\n+        list.clickOnItem(index, 1);\n+        if (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n+            throw new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+        }\n+        new JPopupMenuOperator(config).pushMenu(\"Close \\\". . .\\\" Group\");\n+    }\n+\n+    public static void pushOpenHiddenGroupByPopup(JDialogOperator config, int index) {\n+        JListOperatorExt list = new JListOperatorExt(config);\n+        list.clickOnItem(index, 1);\n+        if (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n+            throw new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+        }\n+        new JPopupMenuOperator(config).pushMenu(\"Open \\\". . .\\\" Group\");\n+    }\n+\n+    public static void clearByMenu(JDialogOperator config, int index) {\n+        new JListOperator(config).selectItem(index);\n+        new JMenuOperator(config, \"Bookmarks\")\n+                .pushMenu(new String[] { \"Bookmarks\", \"Clear Answer For Current Question\" });\n+    }\n+\n+    public static void setBookmarkedByMenu(JDialogOperator config, int index) {\n+        new JListOperator(config).selectItem(index);\n+        new JMenuOperator(config, \"Bookmarks\").pushMenu(new String[] { \"Bookmarks\", \"Mark Current Question\" });\n+    }\n+\n+    public static void unsetBookmarkedByMenu(JDialogOperator config, int index) {\n+        new JListOperator(config).selectItem(index);\n+        new JMenuOperator(config, \"Bookmarks\").pushMenu(new String[] { \"Bookmarks\", \"Unmark Current Question\" });\n+    }\n+\n+    public static void setBookmarkedByMenu(JDialogOperator config, int[] indexes) {\n+        JMenuOperator bookmarksMenu = new JMenuOperator(config, \"Bookmarks\");\n+        String[] menuPath = new String[] { \"Bookmarks\", \"Mark Current Question\" };\n+        JListOperator list = new JListOperator(config);\n+        for (int index : indexes) {\n+            list.selectItem(index);\n+            bookmarksMenu.pushMenu(menuPath);\n+        }\n+    }\n+\n+    public static void setBookmarkedByPopup(JDialogOperator config, int[] indexes) {\n+        for (int index : indexes)\n+            setBookmarkedByPopup(config, index);\n+    }\n+\n+    public static void setBookmarkedByMouse(JDialogOperator config, int index) {\n+        JListOperatorExt list = new JListOperatorExt(config);\n+        list.clickOnItem(index, 1, MouseEvent.BUTTON1_MASK, 10);\n+    }\n+\n+    public static String[] getElementsNames(JDialogOperator config, int[] indexes) {\n+        JListOperator list = new JListOperator(config);\n+        String temp[] = new String[indexes.length];\n+        for (int i = 0; i < indexes.length; i++) {\n+            temp[i] = ((JLabel) list.getRenderedComponent(indexes[i])).getText();\n+        }\n+        return temp;\n+    }\n+\n+    public static String[] getElementsNames(JDialogOperator config) {\n+        JListOperator list = new JListOperator(config);\n+        String temp[] = new String[list.getModel().getSize()];\n+        for (int i = 0; i < list.getModel().getSize(); i++) {\n+            temp[i] = ((JLabel) list.getRenderedComponent(i)).getText();\n+        }\n+        return temp;\n+    }\n+\n+    public static void setBookmarkedByPopup(JDialogOperator config, int index) {\n+        JListOperatorExt list = new JListOperatorExt(config);\n+        list.clickOnItem(index, 1);\n+        if (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n+            throw new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+        }\n+        new JPopupMenuOperator(config).pushMenu(\"Mark Current Question\");\n+    }\n+\n+    public static void clickBookmarkedByMouse(JDialogOperator config, int index) {\n+        JListOperatorExt list = new JListOperatorExt(config);\n+        list.clickOnItem(index, 1);\n+        if (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n+            throw new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+        }\n+        new JPopupMenuOperator(config).pushMenu(\"Mark Current Question\");\n+    }\n+\n+    public static void unsetBookmarkedByPopup(JDialogOperator config, int index) {\n+        JListOperatorExt list = new JListOperatorExt(config);\n+        list.clickOnItem(index, 1);\n+        if (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n+            throw new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+        }\n+        new JPopupMenuOperator(config).pushMenu(\"Unmark Current Question\");\n+    }\n+\n+    public static void clearByPopup(JDialogOperator config, int index) {\n+        JListOperatorExt list = new JListOperatorExt(config);\n+        new JListOperator(config).selectItem(index);\n+        if (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n+            throw new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+        }\n+        new JPopupMenuOperator(config).pushMenu(\"Clear Answer For Current Question\");\n+    }\n+\n+    public static int[] checkVisibility(JDialogOperator config, String[] names) {\n+        JListOperator list = new JListOperator(config);\n+\n+        int marks[] = new int[names.length];\n+        for (int mark : marks) {\n+            mark = -1;\n+        }\n+        for (int i = 0; i < list.getModel().getSize(); i++) {\n+            String text = ((JLabel) list.getRenderedComponent(i)).getText();\n+            if (text != null) {\n+                for (int j = 0; j < names.length; j++) {\n+                    if (text.equals(names[j])) {\n+                        marks[j] = i;\n+                    }\n+                }\n+            }\n+        }\n+\n+        for (int i = 0; i < marks.length; i++) {\n+            if (marks[i] == -1) {\n+                throw new JemmyException(\"Element with name '\" + names[i] + \"' wasn't found\");\n+            }\n+        }\n+\n+        return marks;\n+    }\n+\n+    public static void checkVisibilityAll(JDialogOperator config, String[] names) {\n+        JListOperator list = new JListOperator(config);\n+        for (int i = 0; i < list.getModel().getSize(); i++) {\n+            String text = ((JLabel) list.getRenderedComponent(i)).getText();\n+            if (text == null) {\n+                throw new JemmyException(\"Element N\" + i + \" hasn't any name while expected '\" + names[i] + \"'\");\n+            }\n+            if (!text.equals(names[i])) {\n+                throw new JemmyException(\"Element N\" + i + \" has name '\" + list.getRenderedComponent(i).getName()\n+                        + \"' while expected '\" + names[i] + \"'\");\n+            }\n+        }\n+    }\n+\n+    public static void checkHiddenGroups(JDialogOperator config, int[] indexes, String[] names) {\n+        JListOperator list = new JListOperator(config);\n+\n+        if (indexes.length > 0) {\n+            int temp = 0;\n+\n+            for (int i = 0; i < indexes.length; i++) {\n+                if (indexes[i] - temp > 1) {\n+                    if (((JLabel) list.getRenderedComponent(indexes[i] - 1)).getText() != null) {\n+                        throw new JemmyException(\"element \" + (indexes[i] - 1) + \" isn't '...'\");\n+                    }\n+                }\n+                temp = indexes[i];\n+            }\n+        }\n+    }\n+\n+    public static void openGroupByMenu(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n+        JListOperator list = new JListOperator(config);\n+\n+        int i;\n+        for (i = 0; i < list.getModel().getSize(); i++) {\n+            if (((JLabel) list.getRenderedComponent(i)).getText() == null) {\n+                break;\n+            }\n+        }\n+\n+        list.selectItem(i);\n+        pushOpenHiddenGroupByMenu(config);\n+\n+        for (int j = i; j < list.getModel().getSize(); j++) {\n+            String text = ((JLabel) list.getRenderedComponent(j)).getText();\n+            if (!(text.equals(namesAll[j]))) {\n+                throw new JemmyException(\"Element \" + j + \" is '\" + text\n+                        + \"' after opening '...' group while expected '\" + namesAll[j] + \"'\");\n+            }\n+            if (text.equals(namesHidden[i + 1])) {\n+                break;\n+            }\n+        }\n+    }\n+\n+    public static void openGroupByMouse(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n+        JListOperator list = new JListOperator(config);\n+\n+        int i;\n+        for (i = 0; i < list.getModel().getSize(); i++) {\n+            if (((JLabel) list.getRenderedComponent(i)).getText() == null) {\n+                break;\n+            }\n+        }\n+\n+        pushOpenHiddenGroupByMouse(config, i);\n+\n+        for (int j = i; j < list.getModel().getSize(); j++) {\n+            String text = ((JLabel) list.getRenderedComponent(j)).getText();\n+            if (!(text.equals(namesAll[j]))) {\n+                throw new JemmyException(\"Element \" + j + \" is '\" + text\n+                        + \"' after opening '...' group while expected '\" + namesAll[j] + \"'\");\n+            }\n+            if (text.equals(namesHidden[i + 1])) {\n+                break;\n+            }\n+        }\n+    }\n+\n+    public static void openGroupByPopup(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n+        JListOperator list = new JListOperator(config);\n+\n+        int i;\n+        for (i = 0; i < list.getModel().getSize(); i++) {\n+            if (((JLabel) list.getRenderedComponent(i)).getText() == null) {\n+                break;\n+            }\n+        }\n+\n+        pushOpenHiddenGroupByPopup(config, i);\n+\n+        for (int j = i; j < list.getModel().getSize(); j++) {\n+            String text = ((JLabel) list.getRenderedComponent(j)).getText();\n+            if (!(text.equals(namesAll[j]))) {\n+                throw new JemmyException(\"Element \" + j + \" is '\" + text\n+                        + \"' after opening '...' group while expected '\" + namesAll[j] + \"'\");\n+            }\n+            if (text.equals(namesHidden[i + 1])) {\n+                break;\n+            }\n+        }\n+\n+    }\n+\n+    public static void closeGroupByMenu(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n+        JListOperator list = new JListOperator(config);\n+\n+        int i;\n+        for (i = 0; i < namesHidden.length; i++) {\n+            if (namesHidden[i] == null) {\n+                break;\n+            }\n+        }\n+\n+        list.selectItem(i);\n+        pushCloseByMenu(config);\n+\n+        if (((JLabel) list.getRenderedComponent(i)).getText() != null) {\n+            throw new JemmyException(\"Element \" + i + \" isn't '...' after closing\");\n+        }\n+        if (!(((JLabel) list.getRenderedComponent(i + 1)).getText().equals(namesHidden[i + 1]))) {\n+            throw new JemmyException(\"Element \" + (i + 1) + \" isn't \" + namesHidden[i + 1] + \" after closing\");\n+        }\n+    }\n+\n+    public static void closeGroupByPopup(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n+        JListOperator list = new JListOperator(config);\n+\n+        int i;\n+        for (i = 0; i < namesHidden.length; i++) {\n+            if (namesHidden[i] == null) {\n+                break;\n+            }\n+        }\n+\n+        pushCloseByPopup(config, i);\n+\n+        if (((JLabel) list.getRenderedComponent(i)).getText() != null) {\n+            throw new JemmyException(\"Element \" + i + \" isn't '...' after closing\");\n+        }\n+        if (!(((JLabel) list.getRenderedComponent(i + 1)).getText().equals(namesHidden[i + 1]))) {\n+            throw new JemmyException(\"Element \" + (i + 1) + \" isn't \" + namesHidden[i + 1] + \" after closing\");\n+        }\n+    }\n+\n+    public static void closeGroupByMouse(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n+        JListOperator list = new JListOperator(config);\n+\n+        int i;\n+        for (i = 0; i < namesHidden.length; i++) {\n+            if (namesHidden[i] == null) {\n+                break;\n+            }\n+        }\n+\n+        pushCloseHiddenGroupByMouse(config, i);\n+\n+        if (((JLabel) list.getRenderedComponent(i)).getText() != null) {\n+            throw new JemmyException(\"Element \" + i + \" isn't '...' after closing\");\n+        }\n+        if (!(((JLabel) list.getRenderedComponent(i + 1)).getText().equals(namesHidden[i + 1]))) {\n+            throw new JemmyException(\"Element \" + (i + 1) + \" isn't \" + namesHidden[i + 1] + \" after closing\");\n+        }\n+    }\n+\n+    public static boolean checkBookmarked(JDialogOperator config, int index) {\n+        JListOperator list = new JListOperator(config);\n+        return ((JLabel) list.getRenderedComponent(index)).getIcon() != null;\n+    }\n+\n+    static class JListOperatorExt extends JListOperator {\n+\n+        public JListOperatorExt(ContainerOperator c) {\n+            super(c);\n+        }\n+\n+        public Object clickOnItem(final int itemIndex, final int clickCount, final int mouseButton) {\n+            if (itemIndex > getModel().getSize()) {\n+                throw new JemmyException(\"bad index\");\n+            }\n+            scrollToItem(itemIndex);\n+\n+            if (((JList) getSource()).getModel().getSize() <= itemIndex) {\n+                return (null);\n+            }\n+            if (((JList) getSource()).getAutoscrolls()) {\n+                ((JList) getSource()).ensureIndexIsVisible(itemIndex);\n+            }\n+            return (getQueueTool().invokeSmoothly(new QueueTool.QueueAction(\"Path selecting\") {\n+\n+                public Object launch() {\n+                    Rectangle rect = getCellBounds(itemIndex, itemIndex);\n+                    if (rect == null) {\n+                        return (null);\n+                    }\n+                    Point point = new Point((int) (rect.getX() + rect.getWidth() \/ 2),\n+                            (int) (rect.getY() + rect.getHeight() \/ 2));\n+                    Object result = getModel().getElementAt(itemIndex);\n+                    clickMouse(point.x, point.y, clickCount, mouseButton);\n+                    return (result);\n+                }\n+            }));\n+        }\n+\n+        public Object clickOnItem(final int itemIndex, final int clickCount, final int mouseButton, final int x) {\n+            if (itemIndex > getModel().getSize()) {\n+                throw new JemmyException(\"bad index\");\n+            }\n+            scrollToItem(itemIndex);\n+\n+            if (((JList) getSource()).getModel().getSize() <= itemIndex) {\n+                return (null);\n+            }\n+            if (((JList) getSource()).getAutoscrolls()) {\n+                ((JList) getSource()).ensureIndexIsVisible(itemIndex);\n+            }\n+            return (getQueueTool().invokeSmoothly(new QueueTool.QueueAction(\"Path selecting\") {\n+\n+                public Object launch() {\n+                    Rectangle rect = getCellBounds(itemIndex, itemIndex);\n+                    if (rect == null) {\n+                        return (null);\n+                    }\n+                    Point point = new Point((int) (rect.getX() + x == 0 ? rect.getWidth() \/ 2 : x),\n+                            (int) (rect.getY() + rect.getHeight() \/ 2));\n+                    Object result = getModel().getElementAt(itemIndex);\n+                    clickMouse(point.x, point.y, clickCount, mouseButton);\n+                    return (result);\n+                }\n+            }));\n+        }\n+    }\n+}\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Markers\/Markers.java","additions":466,"deletions":0,"binary":false,"changes":466,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jthtest.Markers;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import jthtest.Config_Edit.Config_Edit;\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.JemmyException;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JFrameOperator;\n+\n+\/**\n+ * This test case verifies that if marker is enabled, the questions in the index pane will shift to the right.\n+ *\/\n+public class Markers2 extends Markers {\n+    public static void main(String args[]) {\n+        JUnitCore.main(\"jthtest.gui.Markers.Markers2\");\n+    }\n+\n+    @Test\n+    public void testMarkers2() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException {\n+        startJavatestNewDesktop();\n+\n+        JFrameOperator mainFrame = findMainFrame();\n+\n+        closeQS(mainFrame);\n+        openTestSuite(mainFrame);\n+        createWorkDirInTemp(mainFrame);\n+        openConfigFile(openLoadConfigDialogByMenu(mainFrame), CONFIG_NAME);\n+        Config_Edit.waitForConfigurationLoading(mainFrame, CONFIG_NAME);\n+\n+        openConfigDialogByKey(mainFrame);\n+        JDialogOperator config = findConfigEditor(mainFrame);\n+\n+        if (getIcon(config, 1) != null) {\n+            throw new JemmyException(\"Icon was found before enabling bookmark\");\n+        }\n+        pushEnableBookmarks(config);\n+        if (getIcon(config, 1) == null) {\n+            throw new JemmyException(\"Icon wasn't found after enabling bookmark (list isn't shifted)\");\n+        }\n+    }\n+}\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Markers\/Markers2.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jthtest.Markers;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.Icon;\n+import jthtest.Test;\n+import jthtest.tools.ConfigDialog;\n+import jthtest.tools.Configuration;\n+import jthtest.tools.JTFrame;\n+\n+\/**\n+ * This test case verifies that a marked question has a small icon to indicate that it has been marked.\n+ *\/\n+public class Markers3 extends Test {\n+\n+    public void testImpl() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException {\n+        mainFrame = new JTFrame(true);\n+\n+        mainFrame.openDefaultTestSuite();\n+        addUsedFile(mainFrame.createWorkDirectoryInTemp());\n+\n+        Configuration config = mainFrame.getConfiguration();\n+        config.load(CONFIG_NAME, true);\n+\n+        ConfigDialog confDialog = config.openByMenu(true);\n+\n+        confDialog.getBookmarks_EnableBookmarks().push();\n+        Icon emptyIcon = confDialog.getIcon(1);\n+        confDialog.setBookmarkedByMenu(1);\n+        if (confDialog.getIcon(1) == emptyIcon) {\n+            errors.add(\"Icon wasn't found\");\n+        }\n+    }\n+}\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Markers\/Markers3.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jthtest.ReportCreate;\n+\n+import java.io.File;\n+import static jthtest.ReportCreate.ReportCreate.*;\n+import jthtest.Test;\n+import jthtest.tools.JTFrame;\n+import org.netbeans.jemmy.JemmyException;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JFrameOperator;\n+\n+\/**\n+ * This test case verifies that Create Report button under Report menu will create a report directory for a valid name.\n+ *\/\n+public class ReportCreate2 extends Test {\n+\n+    public void testImpl() throws Exception {\n+        deleteUserData();\n+\n+        mainFrame = JTFrame.startJTWithRunWD();\n+\n+        JDialogOperator rep = openReportCreation(mainFrame.getJFrameOperator());\n+        String path = TEMP_PATH + REPORT_NAME + \"_new\" + File.separator;\n+        deleteDirectory(path);\n+        setPath(rep, path);\n+\n+        pressCreate(rep);\n+        addUsedFile(path);\n+\n+        if (!new File(path).exists()) {\n+            throw new JemmyException(\"Directory was not created\");\n+        }\n+    }\n+}\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/ReportCreate\/ReportCreate2.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jthtest.ReportCreate;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JFrameOperator;\n+\n+\/**\n+ * This test case verifies that Create Report button under Report menu will produce an error message if a report directory name is not specified.\n+ *\/\n+public class ReportCreate3 extends ReportCreate {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.ReportCreate.ReportCreate3\");\n+    }\n+\n+    @Test\n+    public void testReportCreate3() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException {\n+        startJavaTestWithDefaultWorkDirectory();\n+\n+        JFrameOperator mainFrame = findMainFrame();\n+\n+        JDialogOperator rep = openReportCreation(mainFrame);\n+\n+        pressCreate(rep);\n+\n+        new JDialogOperator(WINDOWNAME + \" Harness: Error\");\n+    }\n+}\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/ReportCreate\/ReportCreate3.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}