{"files":[{"patch":"@@ -30,1 +30,2 @@\n- * This test case verifies that report can be generated in html format.\n+ * This test case verifies that report can be generated in html and plain text\n+ * format.\n@@ -33,1 +34,1 @@\n-public class CustomReport1 extends CReport {\n+public class CustomReport6 extends CReport {\n@@ -35,2 +36,2 @@\n-    public CustomReport1() {\n-        super(true, false, false);\n+    public CustomReport6() {\n+        super(true, true, false);\n@@ -38,0 +39,1 @@\n+\n@@ -39,0 +41,1 @@\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/CustomReport\/CustomReport6.java","additions":7,"deletions":4,"binary":false,"changes":11,"previous_filename":"gui-tests\/src\/gui\/src\/jthtest\/CustomReport\/CustomReport1.java","status":"copied"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jthtest.CustomReport;\n+\n+\/**\n+ * This test case verifies that report can be generated in html,xml and plain\n+ * text format.\n+ *\/\n+\n+public class CustomReport7 extends CReport {\n+\n+    public CustomReport7() {\n+        super(true, true, true);\n+    }\n+}\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/CustomReport\/CustomReport7.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -0,0 +1,463 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jthtest.Markers;\n+\n+import jthtest.ConfigTools;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.event.MouseEvent;\n+import javax.swing.Icon;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import org.netbeans.jemmy.JemmyException;\n+import org.netbeans.jemmy.QueueTool;\n+import org.netbeans.jemmy.operators.ContainerOperator;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JListOperator;\n+import org.netbeans.jemmy.operators.JMenuOperator;\n+import org.netbeans.jemmy.operators.JPopupMenuOperator;\n+\n+public class Markers extends ConfigTools {\n+\n+\tpublic static Icon getIcon(JDialogOperator config, int index) {\n+\t\tIcon icon = ((JLabel) new JListOperator(config).getRenderedComponent(index)).getIcon();\n+\t\treturn icon;\n+\t}\n+\n+\tpublic static void pushEnableBookmarks(JDialogOperator config) {\n+\t\tnew JMenuOperator(config, \"Bookmarks\")\n+\t\t\t\t.pushMenu(new String[] { \"Bookmarks\", getExecResource(\"ct.markers.ckb\") });\n+\t}\n+\n+\tpublic static void pushShowOnlyBookmarked(JDialogOperator config) {\n+\t\tnew JMenuOperator(config, \"Bookmarks\").pushMenu(new String[] { \"Bookmarks\", \"Show Only Bookmarked Questions\" });\n+\t}\n+\n+\tpublic static void pushClearBookmarkedAnswer(JDialogOperator config) {\n+\t\tnew JMenuOperator(config, \"Bookmarks\")\n+\t\t\t\t.pushMenu(new String[] { \"Bookmarks\", \"Clear Answers For Current Question\" });\n+\t}\n+\n+\tpublic static void pushClearAllBookmarkedAnswers(JDialogOperator config) {\n+\t\tnew JMenuOperator(config, \"Bookmarks\")\n+\t\t\t\t.pushMenu(new String[] { \"Bookmarks\", \"Clear Answers to Bookmarked Questions\" });\n+\t}\n+\n+\tpublic static void pushOpenHiddenGroupByMenu(JDialogOperator config) {\n+\t\tnew JMenuOperator(config, \"Bookmarks\").pushMenu(new String[] { \"Bookmarks\", \"Open \\\". . .\\\" Group\" });\n+\t}\n+\n+\tpublic static void pushOpenHiddenGroupByMouse(JDialogOperator config, int index) {\n+\t\tJListOperatorExt list = new JListOperatorExt(config);\n+\t\tlist.clickOnItem(index, 1);\n+\t\tif (list.clickOnItem(index, 2, MouseEvent.BUTTON1_MASK) == null) {\n+\t\t\tthrow new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+\t\t}\n+\t}\n+\n+\tpublic static void pushCloseHiddenGroupByMouse(JDialogOperator config, int index) {\n+\t\tJListOperatorExt list = new JListOperatorExt(config);\n+\t\tlist.clickOnItem(index, 1);\n+\t\tif (list.clickOnItem(index, 2, MouseEvent.BUTTON1_MASK) == null) {\n+\t\t\tthrow new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+\t\t}\n+\t}\n+\n+\tpublic static void pushCloseByMenu(JDialogOperator config) {\n+\t\tnew JMenuOperator(config, \"Bookmarks\").pushMenu(new String[] { \"Bookmarks\", \"Close \\\". . .\\\" Group\" });\n+\t}\n+\n+\tpublic static void pushCloseByPopup(JDialogOperator config, int index) {\n+\t\tJListOperatorExt list = new JListOperatorExt(config);\n+\t\tlist.clickOnItem(index, 1);\n+\t\tif (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n+\t\t\tthrow new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+\t\t}\n+\t\tnew JPopupMenuOperator(config).pushMenu(\"Close \\\". . .\\\" Group\");\n+\t}\n+\n+\tpublic static void pushOpenHiddenGroupByPopup(JDialogOperator config, int index) {\n+\t\tJListOperatorExt list = new JListOperatorExt(config);\n+\t\tlist.clickOnItem(index, 1);\n+\t\tif (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n+\t\t\tthrow new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+\t\t}\n+\t\tnew JPopupMenuOperator(config).pushMenu(\"Open \\\". . .\\\" Group\");\n+\t}\n+\n+\tpublic static void clearByMenu(JDialogOperator config, int index) {\n+\t\tnew JListOperator(config).selectItem(index);\n+\t\tnew JMenuOperator(config, \"Bookmarks\")\n+\t\t\t\t.pushMenu(new String[] { \"Bookmarks\", \"Clear Answer For Current Question\" });\n+\t}\n+\n+\tpublic static void setBookmarkedByMenu(JDialogOperator config, int index) {\n+\t\tnew JListOperator(config).selectItem(index);\n+\t\tnew JMenuOperator(config, \"Bookmarks\").pushMenu(new String[] { \"Bookmarks\", \"Mark Current Question\" });\n+\t}\n+\n+\tpublic static void unsetBookmarkedByMenu(JDialogOperator config, int index) {\n+\t\tnew JListOperator(config).selectItem(index);\n+\t\tnew JMenuOperator(config, \"Bookmarks\").pushMenu(new String[] { \"Bookmarks\", \"Unmark Current Question\" });\n+\t}\n+\n+\tpublic static void setBookmarkedByMenu(JDialogOperator config, int[] indexes) {\n+\t\tJMenuOperator bookmarksMenu = new JMenuOperator(config, \"Bookmarks\");\n+\t\tString[] menuPath = new String[] { \"Bookmarks\", \"Mark Current Question\" };\n+\t\tJListOperator list = new JListOperator(config);\n+\t\tfor (int index : indexes) {\n+\t\t\tlist.selectItem(index);\n+\t\t\tbookmarksMenu.pushMenu(menuPath);\n+\t\t}\n+\t}\n+\n+\tpublic static void setBookmarkedByPopup(JDialogOperator config, int[] indexes) {\n+\t\tfor (int index : indexes)\n+\t\t\tsetBookmarkedByPopup(config, index);\n+\t}\n+\n+\tpublic static void setBookmarkedByMouse(JDialogOperator config, int index) {\n+\t\tJListOperatorExt list = new JListOperatorExt(config);\n+\t\tlist.clickOnItem(index, 1, MouseEvent.BUTTON1_MASK, 10);\n+\t}\n+\n+\tpublic static String[] getElementsNames(JDialogOperator config, int[] indexes) {\n+\t\tJListOperator list = new JListOperator(config);\n+\t\tString temp[] = new String[indexes.length];\n+\t\tfor (int i = 0; i < indexes.length; i++) {\n+\t\t\ttemp[i] = ((JLabel) list.getRenderedComponent(indexes[i])).getText();\n+\t\t}\n+\t\treturn temp;\n+\t}\n+\n+\tpublic static String[] getElementsNames(JDialogOperator config) {\n+\t\tJListOperator list = new JListOperator(config);\n+\t\tString temp[] = new String[list.getModel().getSize()];\n+\t\tfor (int i = 0; i < list.getModel().getSize(); i++) {\n+\t\t\ttemp[i] = ((JLabel) list.getRenderedComponent(i)).getText();\n+\t\t}\n+\t\treturn temp;\n+\t}\n+\n+\tpublic static void setBookmarkedByPopup(JDialogOperator config, int index) {\n+\t\tJListOperatorExt list = new JListOperatorExt(config);\n+\t\tlist.clickOnItem(index, 1);\n+\t\tif (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n+\t\t\tthrow new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+\t\t}\n+\t\tnew JPopupMenuOperator(config).pushMenu(\"Mark Current Question\");\n+\t}\n+\n+\tpublic static void clickBookmarkedByMouse(JDialogOperator config, int index) {\n+\t\tJListOperatorExt list = new JListOperatorExt(config);\n+\t\tlist.clickOnItem(index, 1);\n+\t\tif (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n+\t\t\tthrow new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+\t\t}\n+\t\tnew JPopupMenuOperator(config).pushMenu(\"Mark Current Question\");\n+\t}\n+\n+\tpublic static void unsetBookmarkedByPopup(JDialogOperator config, int index) {\n+\t\tJListOperatorExt list = new JListOperatorExt(config);\n+\t\tlist.clickOnItem(index, 1);\n+\t\tif (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n+\t\t\tthrow new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+\t\t}\n+\t\tnew JPopupMenuOperator(config).pushMenu(\"Unmark Current Question\");\n+\t}\n+\n+\tpublic static void clearByPopup(JDialogOperator config, int index) {\n+\t\tJListOperatorExt list = new JListOperatorExt(config);\n+\t\tnew JListOperator(config).selectItem(index);\n+\t\tif (list.clickOnItem(index, 1, MouseEvent.BUTTON3_MASK) == null) {\n+\t\t\tthrow new JemmyException(\"Error occured while clicking on \" + index + \" item of list \" + list);\n+\t\t}\n+\t\tnew JPopupMenuOperator(config).pushMenu(\"Clear Answer For Current Question\");\n+\t}\n+\n+\tpublic static int[] checkVisibility(JDialogOperator config, String[] names) {\n+\t\tJListOperator list = new JListOperator(config);\n+\n+\t\tint marks[] = new int[names.length];\n+\t\tfor (int mark : marks) {\n+\t\t\tmark = -1;\n+\t\t}\n+\t\tfor (int i = 0; i < list.getModel().getSize(); i++) {\n+\t\t\tString text = ((JLabel) list.getRenderedComponent(i)).getText();\n+\t\t\tif (text != null) {\n+\t\t\t\tfor (int j = 0; j < names.length; j++) {\n+\t\t\t\t\tif (text.equals(names[j])) {\n+\t\t\t\t\t\tmarks[j] = i;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tfor (int i = 0; i < marks.length; i++) {\n+\t\t\tif (marks[i] == -1) {\n+\t\t\t\tthrow new JemmyException(\"Element with name '\" + names[i] + \"' wasn't found\");\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn marks;\n+\t}\n+\n+\tpublic static void checkVisibilityAll(JDialogOperator config, String[] names) {\n+\t\tJListOperator list = new JListOperator(config);\n+\t\tfor (int i = 0; i < list.getModel().getSize(); i++) {\n+\t\t\tString text = ((JLabel) list.getRenderedComponent(i)).getText();\n+\t\t\tif (text == null) {\n+\t\t\t\tthrow new JemmyException(\"Element N\" + i + \" hasn't any name while expected '\" + names[i] + \"'\");\n+\t\t\t}\n+\t\t\tif (!text.equals(names[i])) {\n+\t\t\t\tthrow new JemmyException(\"Element N\" + i + \" has name '\" + list.getRenderedComponent(i).getName()\n+\t\t\t\t\t\t+ \"' while expected '\" + names[i] + \"'\");\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static void checkHiddenGroups(JDialogOperator config, int[] indexes, String[] names) {\n+\t\tJListOperator list = new JListOperator(config);\n+\n+\t\tif (indexes.length > 0) {\n+\t\t\tint temp = 0;\n+\n+\t\t\tfor (int i = 0; i < indexes.length; i++) {\n+\t\t\t\tif (indexes[i] - temp > 1) {\n+\t\t\t\t\tif (((JLabel) list.getRenderedComponent(indexes[i] - 1)).getText() != null) {\n+\t\t\t\t\t\tthrow new JemmyException(\"element \" + (indexes[i] - 1) + \" isn't '...'\");\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\ttemp = indexes[i];\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static void openGroupByMenu(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n+\t\tJListOperator list = new JListOperator(config);\n+\n+\t\tint i;\n+\t\tfor (i = 0; i < list.getModel().getSize(); i++) {\n+\t\t\tif (((JLabel) list.getRenderedComponent(i)).getText() == null) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\tlist.selectItem(i);\n+\t\tpushOpenHiddenGroupByMenu(config);\n+\n+\t\tfor (int j = i; j < list.getModel().getSize(); j++) {\n+\t\t\tString text = ((JLabel) list.getRenderedComponent(j)).getText();\n+\t\t\tif (!(text.equals(namesAll[j]))) {\n+\t\t\t\tthrow new JemmyException(\"Element \" + j + \" is '\" + text\n+\t\t\t\t\t\t+ \"' after opening '...' group while expected '\" + namesAll[j] + \"'\");\n+\t\t\t}\n+\t\t\tif (text.equals(namesHidden[i + 1])) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static void openGroupByMouse(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n+\t\tJListOperator list = new JListOperator(config);\n+\n+\t\tint i;\n+\t\tfor (i = 0; i < list.getModel().getSize(); i++) {\n+\t\t\tif (((JLabel) list.getRenderedComponent(i)).getText() == null) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\tpushOpenHiddenGroupByMouse(config, i);\n+\n+\t\tfor (int j = i; j < list.getModel().getSize(); j++) {\n+\t\t\tString text = ((JLabel) list.getRenderedComponent(j)).getText();\n+\t\t\tif (!(text.equals(namesAll[j]))) {\n+\t\t\t\tthrow new JemmyException(\"Element \" + j + \" is '\" + text\n+\t\t\t\t\t\t+ \"' after opening '...' group while expected '\" + namesAll[j] + \"'\");\n+\t\t\t}\n+\t\t\tif (text.equals(namesHidden[i + 1])) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static void openGroupByPopup(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n+\t\tJListOperator list = new JListOperator(config);\n+\n+\t\tint i;\n+\t\tfor (i = 0; i < list.getModel().getSize(); i++) {\n+\t\t\tif (((JLabel) list.getRenderedComponent(i)).getText() == null) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\tpushOpenHiddenGroupByPopup(config, i);\n+\n+\t\tfor (int j = i; j < list.getModel().getSize(); j++) {\n+\t\t\tString text = ((JLabel) list.getRenderedComponent(j)).getText();\n+\t\t\tif (!(text.equals(namesAll[j]))) {\n+\t\t\t\tthrow new JemmyException(\"Element \" + j + \" is '\" + text\n+\t\t\t\t\t\t+ \"' after opening '...' group while expected '\" + namesAll[j] + \"'\");\n+\t\t\t}\n+\t\t\tif (text.equals(namesHidden[i + 1])) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t}\n+\n+\tpublic static void closeGroupByMenu(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n+\t\tJListOperator list = new JListOperator(config);\n+\n+\t\tint i;\n+\t\tfor (i = 0; i < namesHidden.length; i++) {\n+\t\t\tif (namesHidden[i] == null) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\tlist.selectItem(i);\n+\t\tpushCloseByMenu(config);\n+\n+\t\tif (((JLabel) list.getRenderedComponent(i)).getText() != null) {\n+\t\t\tthrow new JemmyException(\"Element \" + i + \" isn't '...' after closing\");\n+\t\t}\n+\t\tif (!(((JLabel) list.getRenderedComponent(i + 1)).getText().equals(namesHidden[i + 1]))) {\n+\t\t\tthrow new JemmyException(\"Element \" + (i + 1) + \" isn't \" + namesHidden[i + 1] + \" after closing\");\n+\t\t}\n+\t}\n+\n+\tpublic static void closeGroupByPopup(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n+\t\tJListOperator list = new JListOperator(config);\n+\n+\t\tint i;\n+\t\tfor (i = 0; i < namesHidden.length; i++) {\n+\t\t\tif (namesHidden[i] == null) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\tpushCloseByPopup(config, i);\n+\n+\t\tif (((JLabel) list.getRenderedComponent(i)).getText() != null) {\n+\t\t\tthrow new JemmyException(\"Element \" + i + \" isn't '...' after closing\");\n+\t\t}\n+\t\tif (!(((JLabel) list.getRenderedComponent(i + 1)).getText().equals(namesHidden[i + 1]))) {\n+\t\t\tthrow new JemmyException(\"Element \" + (i + 1) + \" isn't \" + namesHidden[i + 1] + \" after closing\");\n+\t\t}\n+\t}\n+\n+\tpublic static void closeGroupByMouse(JDialogOperator config, String[] namesAll, String[] namesHidden) {\n+\t\tJListOperator list = new JListOperator(config);\n+\n+\t\tint i;\n+\t\tfor (i = 0; i < namesHidden.length; i++) {\n+\t\t\tif (namesHidden[i] == null) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\tpushCloseHiddenGroupByMouse(config, i);\n+\n+\t\tif (((JLabel) list.getRenderedComponent(i)).getText() != null) {\n+\t\t\tthrow new JemmyException(\"Element \" + i + \" isn't '...' after closing\");\n+\t\t}\n+\t\tif (!(((JLabel) list.getRenderedComponent(i + 1)).getText().equals(namesHidden[i + 1]))) {\n+\t\t\tthrow new JemmyException(\"Element \" + (i + 1) + \" isn't \" + namesHidden[i + 1] + \" after closing\");\n+\t\t}\n+\t}\n+\n+\tpublic static boolean checkBookmarked(JDialogOperator config, int index) {\n+\t\tJListOperator list = new JListOperator(config);\n+\t\treturn ((JLabel) list.getRenderedComponent(index)).getIcon() != null;\n+\t}\n+\n+\tstatic class JListOperatorExt extends JListOperator {\n+\n+\t\tpublic JListOperatorExt(ContainerOperator c) {\n+\t\t\tsuper(c);\n+\t\t}\n+\n+\t\tpublic Object clickOnItem(final int itemIndex, final int clickCount, final int mouseButton) {\n+\t\t\tif (itemIndex > getModel().getSize()) {\n+\t\t\t\tthrow new JemmyException(\"bad index\");\n+\t\t\t}\n+\t\t\tscrollToItem(itemIndex);\n+\n+\t\t\tif (((JList) getSource()).getModel().getSize() <= itemIndex) {\n+\t\t\t\treturn (null);\n+\t\t\t}\n+\t\t\tif (((JList) getSource()).getAutoscrolls()) {\n+\t\t\t\t((JList) getSource()).ensureIndexIsVisible(itemIndex);\n+\t\t\t}\n+\t\t\treturn (getQueueTool().invokeSmoothly(new QueueTool.QueueAction(\"Path selecting\") {\n+\n+\t\t\t\tpublic Object launch() {\n+\t\t\t\t\tRectangle rect = getCellBounds(itemIndex, itemIndex);\n+\t\t\t\t\tif (rect == null) {\n+\t\t\t\t\t\treturn (null);\n+\t\t\t\t\t}\n+\t\t\t\t\tPoint point = new Point((int) (rect.getX() + rect.getWidth() \/ 2),\n+\t\t\t\t\t\t\t(int) (rect.getY() + rect.getHeight() \/ 2));\n+\t\t\t\t\tObject result = getModel().getElementAt(itemIndex);\n+\t\t\t\t\tclickMouse(point.x, point.y, clickCount, mouseButton);\n+\t\t\t\t\treturn (result);\n+\t\t\t\t}\n+\t\t\t}));\n+\t\t}\n+\n+\t\tpublic Object clickOnItem(final int itemIndex, final int clickCount, final int mouseButton, final int x) {\n+\t\t\tif (itemIndex > getModel().getSize()) {\n+\t\t\t\tthrow new JemmyException(\"bad index\");\n+\t\t\t}\n+\t\t\tscrollToItem(itemIndex);\n+\n+\t\t\tif (((JList) getSource()).getModel().getSize() <= itemIndex) {\n+\t\t\t\treturn (null);\n+\t\t\t}\n+\t\t\tif (((JList) getSource()).getAutoscrolls()) {\n+\t\t\t\t((JList) getSource()).ensureIndexIsVisible(itemIndex);\n+\t\t\t}\n+\t\t\treturn (getQueueTool().invokeSmoothly(new QueueTool.QueueAction(\"Path selecting\") {\n+\n+\t\t\t\tpublic Object launch() {\n+\t\t\t\t\tRectangle rect = getCellBounds(itemIndex, itemIndex);\n+\t\t\t\t\tif (rect == null) {\n+\t\t\t\t\t\treturn (null);\n+\t\t\t\t\t}\n+\t\t\t\t\tPoint point = new Point((int) (rect.getX() + x == 0 ? rect.getWidth() \/ 2 : x),\n+\t\t\t\t\t\t\t(int) (rect.getY() + rect.getHeight() \/ 2));\n+\t\t\t\t\tObject result = getModel().getElementAt(itemIndex);\n+\t\t\t\t\tclickMouse(point.x, point.y, clickCount, mouseButton);\n+\t\t\t\t\treturn (result);\n+\t\t\t\t}\n+\t\t\t}));\n+\t\t}\n+\t}\n+}\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Markers\/Markers.java","additions":463,"deletions":0,"binary":false,"changes":463,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jthtest.Markers;\n+\n+\/**\n+ * This test case verifies that if marker is enabled, the questions in the index pane will shift to the right.\n+ *\/\n+\n+import java.lang.reflect.InvocationTargetException;\n+import jthtest.Config_Edit.Config_Edit;\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.JemmyException;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JFrameOperator;\n+\n+public class Markers2 extends Markers {\n+    public static void main(String args[]) {\n+        JUnitCore.main(\"jthtest.gui.Markers.Markers2\");\n+    }\n+\n+    @Test\n+    public void testMarkers2() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException {\n+        startJavatestNewDesktop();\n+\n+        JFrameOperator mainFrame = findMainFrame();\n+\n+        closeQS(mainFrame);\n+        openTestSuite(mainFrame);\n+        createWorkDirInTemp(mainFrame);\n+        openConfigFile(openLoadConfigDialogByMenu(mainFrame), CONFIG_NAME);\n+        Config_Edit.waitForConfigurationLoading(mainFrame, CONFIG_NAME);\n+\n+        openConfigDialogByKey(mainFrame);\n+        JDialogOperator config = findConfigEditor(mainFrame);\n+\n+        if (getIcon(config, 1) != null) {\n+            throw new JemmyException(\"Icon was found before enabling bookmark\");\n+        }\n+        pushEnableBookmarks(config);\n+        if (getIcon(config, 1) == null) {\n+            throw new JemmyException(\"Icon wasn't found after enabling bookmark (list isn't shifted)\");\n+        }\n+    }\n+}\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Markers\/Markers2.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jthtest.Markers;\n+\n+\/**\n+ * This test case verifies that a marked question has a small icon to indicate that it has been marked.\n+ *\/\n+\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.Icon;\n+import jthtest.Test;\n+import jthtest.tools.ConfigDialog;\n+import jthtest.tools.Configuration;\n+import jthtest.tools.JTFrame;\n+\n+public class Markers3 extends Test {\n+\n+    public void testImpl() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException {\n+        mainFrame = new JTFrame(true);\n+\n+        mainFrame.openDefaultTestSuite();\n+        addUsedFile(mainFrame.createWorkDirectoryInTemp());\n+\n+        Configuration config = mainFrame.getConfiguration();\n+        config.load(CONFIG_NAME, true);\n+\n+        ConfigDialog confDialog = config.openByMenu(true);\n+\n+        confDialog.getBookmarks_EnableBookmarks().push();\n+        Icon emptyIcon = confDialog.getIcon(1);\n+        confDialog.setBookmarkedByMenu(1);\n+        if (confDialog.getIcon(1) == emptyIcon) {\n+            errors.add(\"Icon wasn't found\");\n+        }\n+    }\n+}\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Markers\/Markers3.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jthtest.ReportCreate;\n+\n+\/**\n+ * This test case verifies that Create Report button under Report menu will create a report directory for a valid name.\n+ *\/\n+\n+import java.io.File;\n+import static jthtest.ReportCreate.ReportCreate.*;\n+import jthtest.Test;\n+import jthtest.tools.JTFrame;\n+import org.netbeans.jemmy.JemmyException;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JFrameOperator;\n+\n+public class ReportCreate2 extends Test {\n+\n+    public void testImpl() throws Exception {\n+        deleteUserData();\n+\n+        mainFrame = JTFrame.startJTWithRunWD();\n+\n+        JDialogOperator rep = openReportCreation(mainFrame.getJFrameOperator());\n+        String path = TEMP_PATH + REPORT_NAME + \"_new\" + File.separator;\n+        deleteDirectory(path);\n+        setPath(rep, path);\n+\n+        pressCreate(rep);\n+        addUsedFile(path);\n+\n+        if (!new File(path).exists()) {\n+            throw new JemmyException(\"Directory was not created\");\n+        }\n+    }\n+\n+}\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/ReportCreate\/ReportCreate2.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jthtest.ReportCreate;\n+\n+\/**\n+ * This test case verifies that Create Report button under Report menu will produce an error message if a report directory name is not specified.\n+ *\/\n+\n+import java.lang.reflect.InvocationTargetException;\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JFrameOperator;\n+\n+public class ReportCreate3 extends ReportCreate {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.ReportCreate.ReportCreate3\");\n+    }\n+\n+    @Test\n+    public void testReportCreate3() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException {\n+        startJavaTestWithDefaultWorkDirectory();\n+\n+        JFrameOperator mainFrame = findMainFrame();\n+\n+        JDialogOperator rep = openReportCreation(mainFrame);\n+\n+        pressCreate(rep);\n+\n+        new JDialogOperator(WINDOWNAME + \" Harness: Error\");\n+    }\n+}\n+\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/ReportCreate\/ReportCreate3.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"}]}