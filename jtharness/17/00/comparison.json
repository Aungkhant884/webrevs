{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import com.sun.javatest.util.Log;\n@@ -640,2 +641,22 @@\n-        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n-        ext = ext.toLowerCase();\n+        String extLowerCase = filename.substring(filename.lastIndexOf('.') + 1).toLowerCase();\n+        \/\/ setting content type by default as extension in lower case\n+        String type = extLowerCase;\n+\n+        \/\/ Performing a special treatment of files that have .html\/.htm extension\n+        \/\/ yet contain XML contents inside, which is transformed to HTML\n+        \/\/ with JavaScript on-the-fly in external web browser.\n+        \/\/ In JavaTest we have to display such html files as XML files (in plain text),\n+        \/\/ not trying to render them as HTML with Swing component.\n+        if (extLowerCase.startsWith(\"htm\")) {\n+            \/\/ reading contents and checking first line\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))) {\n+                String firstLine = reader.readLine();\n+                if (firstLine != null && firstLine.toLowerCase().startsWith(\"<?xml \")) {\n+                    \/\/ OK, assuming this file contains XML content inside\n+                    type = \"xml\";\n+                }\n+            } catch (IOException e) {\n+                \/\/ Failed to read file, staying with the original default type detection\n+                Log.warning(\"Failed to read \" + url + \", thrown \" + e);\n+            }\n+        }\n@@ -643,1 +664,1 @@\n-        return extensionsToMIME.get(ext);\n+        return extensionsToMIME.get(type);\n","filename":"src\/com\/sun\/javatest\/exec\/MultiFormatPane.java","additions":24,"deletions":3,"binary":false,"changes":27,"status":"modified"}]}