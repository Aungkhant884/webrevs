{"files":[{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 1996, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,3 @@\n-import java.net.ServerSocket;\n-import java.net.Socket;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ServerSocketChannel;\n+import java.nio.channels.SocketChannel;\n@@ -54,1 +55,1 @@\n-    private ServerSocket serverSocket;\n+    private ServerSocketChannel serverSocketChannel;\n@@ -86,2 +87,2 @@\n-        return port == 0 && serverSocket != null ?\n-                serverSocket.getLocalPort() : port;\n+        return port == 0 && serverSocketChannel != null ?\n+                serverSocketChannel.socket().getLocalPort() : port;\n@@ -128,1 +129,1 @@\n-        return serverSocket != null;\n+        return serverSocketChannel != null;\n@@ -148,2 +149,2 @@\n-            if (serverSocket != null) {\n-                if (port == 0 || serverSocket.getLocalPort() == port) {\n+            if (serverSocketChannel != null) {\n+                if (port == 0 || serverSocketChannel.socket().getLocalPort() == port) {\n@@ -152,1 +153,1 @@\n-                    closeNoExceptions(serverSocket);\n+                    closeNoExceptions(serverSocketChannel);\n@@ -156,1 +157,1 @@\n-            serverSocket = SocketConnection.createServerSocket(port);\n+            serverSocketChannel = SocketConnection.createServerSocketChannel(port);\n@@ -164,2 +165,2 @@\n-            if (serverSocket != null) {\n-                serverSocket.close();\n+            if (serverSocketChannel != null) {\n+                serverSocketChannel.close();\n@@ -167,1 +168,1 @@\n-            serverSocket = null;\n+            serverSocketChannel = null;\n@@ -189,1 +190,1 @@\n-        ServerSocket ss;\n+        ServerSocketChannel ssc;\n@@ -196,1 +197,1 @@\n-            ss = serverSocket;\n+            ssc = serverSocketChannel;\n@@ -208,1 +209,1 @@\n-                    Socket s = ss.accept();\n+                    SocketChannel sc = ssc.accept();\n@@ -213,2 +214,2 @@\n-                        if (ss == serverSocket) {\n-                            entries.add(new Entry(s));\n+                        if (ssc == serverSocketChannel) {\n+                            entries.add(new Entry(sc));\n@@ -216,1 +217,1 @@\n-                            closeNoExceptions(s);\n+                            closeNoExceptions(sc);\n@@ -227,1 +228,1 @@\n-                        if (ss != serverSocket) {\n+                        if (ssc != serverSocketChannel) {\n@@ -243,2 +244,2 @@\n-                if (serverSocket == ss) {\n-                    serverSocket = null;\n+                if (serverSocketChannel == ssc) {\n+                    serverSocketChannel = null;\n@@ -248,1 +249,1 @@\n-            closeNoExceptions(ss);\n+            closeNoExceptions(ssc);\n@@ -285,1 +286,1 @@\n-    private void closeNoExceptions(Socket s) {\n+    private void closeNoExceptions(SocketChannel sc) {\n@@ -287,1 +288,1 @@\n-            s.close();\n+            sc.close();\n@@ -292,1 +293,1 @@\n-    private void closeNoExceptions(ServerSocket ss) {\n+    private void closeNoExceptions(ServerSocketChannel ssc) {\n@@ -294,1 +295,1 @@\n-            ss.close();\n+            ssc.close();\n@@ -337,1 +338,1 @@\n-        private final Socket socket;\n+        private final SocketChannel socketChannel;\n@@ -345,4 +346,4 @@\n-        Entry(Socket socket) throws IOException {\n-            this.socket = socket;\n-            socketInput = socket.getInputStream();\n-            socketOutput = socket.getOutputStream();\n+        Entry(SocketChannel socketChannel) throws IOException {\n+            this.socketChannel = socketChannel;\n+            socketInput = Channels.newInputStream(socketChannel);\n+            socketOutput = Channels.newOutputStream(socketChannel);\n@@ -355,1 +356,1 @@\n-                sb.append(socket.getInetAddress().getHostName());\n+                sb.append(socketChannel.socket().getInetAddress().getHostName());\n@@ -357,1 +358,1 @@\n-                sb.append(socket.getPort());\n+                sb.append(socketChannel.socket().getPort());\n@@ -359,1 +360,1 @@\n-                sb.append(socket.getLocalPort());\n+                sb.append(socketChannel.socket().getLocalPort());\n","filename":"src\/com\/sun\/javatest\/agent\/ActiveAgentPool.java","additions":37,"deletions":36,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 1996, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-import java.net.Socket;\n+import java.net.InetSocketAddress;\n@@ -32,0 +32,1 @@\n+import java.nio.channels.SocketChannel;\n@@ -83,1 +84,2 @@\n-            return new SocketConnection(new Socket(host, port));\n+            return new SocketConnection(\n+                    SocketChannel.open(new InetSocketAddress(host, port)));\n","filename":"src\/com\/sun\/javatest\/agent\/ActiveConnectionFactory.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 2008, 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.nio.channels.SocketChannel;\n@@ -40,0 +41,4 @@\n+    public InterruptableSocketConnection(SocketChannel socketChannel) throws IOException {\n+        super(socketChannel);\n+    }\n+\n","filename":"src\/com\/sun\/javatest\/agent\/InterruptableSocketConnection.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 1996, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+import java.nio.channels.ServerSocketChannel;\n+import java.util.Optional;\n@@ -36,1 +38,2 @@\n-    private ServerSocket serverSocket;\n+    private final ServerSocket serverSocket;\n+    private final Optional<ServerSocketChannel> serverSocketChannel;\n@@ -54,2 +57,2 @@\n-\n-        serverSocket = SocketConnection.createServerSocket(port, backlog);\n+        this.serverSocketChannel = Optional.of(SocketConnection.createServerSocketChannel(port, backlog));\n+        this.serverSocket = serverSocketChannel.get().socket();\n@@ -67,0 +70,13 @@\n+        this.serverSocketChannel = Optional.empty();\n+    }\n+\n+    \/**\n+     * Create a factory for creating connections to be used by agents running\n+     * in \"passive\" mode.\n+     *\n+     * @param serverSocketChannel The server socket channel used to accept incoming\n+     *                            connection requests.\n+     *\/\n+    public PassiveConnectionFactory(ServerSocketChannel serverSocketChannel) {\n+        this.serverSocketChannel = Optional.of(serverSocketChannel);\n+        this.serverSocket = serverSocketChannel.socket();\n@@ -82,1 +98,5 @@\n-            return new InterruptableSocketConnection(serverSocket.accept());\n+            if (serverSocketChannel.isPresent()) {\n+                return new InterruptableSocketConnection(serverSocketChannel.get().accept());\n+            } else {\n+                return new InterruptableSocketConnection(serverSocket.accept());\n+            }\n@@ -92,0 +112,3 @@\n+            if (serverSocketChannel.isPresent()) {\n+                serverSocketChannel.get().close();\n+            }\n","filename":"src\/com\/sun\/javatest\/agent\/PassiveConnectionFactory.java","additions":28,"deletions":5,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 1996, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,3 @@\n-import java.net.ServerSocket;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ServerSocketChannel;\n+import java.nio.channels.SocketChannel;\n@@ -39,0 +41,1 @@\n+import java.net.StandardSocketOptions;\n@@ -40,0 +43,2 @@\n+import java.util.Objects;\n+import java.util.Optional;\n@@ -49,0 +54,1 @@\n+    private final Optional<SocketChannel> socketChannel;\n@@ -67,0 +73,1 @@\n+        this.socketChannel = Optional.empty();\n@@ -71,0 +78,13 @@\n+    \/**\n+     * Create a connection via a TCP\/IP socketChannel.\n+     *\n+     * @param socketChannel The socket channel to use for the connection.\n+     * @throws NullPointerException if socketChannel is null\n+     *\/\n+    public SocketConnection(SocketChannel socketChannel) {\n+        this.socket = socketChannel.socket();\n+        this.socketChannel = Optional.of(socketChannel);\n+        socketInput = Channels.newInputStream(socketChannel);\n+        socketOutput = Channels.newOutputStream(socketChannel);\n+    }\n+\n@@ -103,1 +123,2 @@\n-            socket = new Socket(host, port);\n+            socketChannel = Optional.of(SocketChannel.open(new InetSocketAddress(host, port)));\n+            socket = socketChannel.get().socket();\n@@ -110,2 +131,2 @@\n-        socketInput = socket.getInputStream();\n-        socketOutput = socket.getOutputStream();\n+        socketInput = Channels.newInputStream(socketChannel.get());\n+        socketOutput = Channels.newOutputStream(socketChannel.get());\n@@ -124,1 +145,1 @@\n-     * Creates a ServerSocket instance in the environment where reading\n+     * Creates a ServerSocketChannel instance in the environment where reading\n@@ -128,1 +149,1 @@\n-     * @return new created ServerSocket\n+     * @return new created ServerSocketChannel\n@@ -131,2 +152,2 @@\n-    public static ServerSocket createServerSocket(int port) throws IOException {\n-        return createServerSocket(port, 50);\n+    public static ServerSocketChannel createServerSocketChannel(int port) throws IOException {\n+        return createServerSocketChannel(port, 50);\n@@ -136,1 +157,1 @@\n-     * Creates a ServerSocket instance in the environment where reading\n+     * Creates a ServerSocketChannel instance in the environment where reading\n@@ -141,1 +162,1 @@\n-     * @return new created ServerSocket\n+     * @return new created ServerSocketChannel\n@@ -144,1 +165,1 @@\n-    public static synchronized ServerSocket createServerSocket(int port, int backlog)\n+    public static synchronized ServerSocketChannel createServerSocketChannel(int port, int backlog)\n@@ -154,1 +175,1 @@\n-            ServerSocket serverSocket = new ServerSocket();\n+            ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n@@ -158,3 +179,3 @@\n-            serverSocket.setReuseAddress(false);\n-            serverSocket.bind(new InetSocketAddress(port), backlog);\n-            return serverSocket;\n+            serverSocketChannel.setOption(StandardSocketOptions.SO_REUSEADDR, Boolean.FALSE);\n+            serverSocketChannel.bind(new InetSocketAddress(port), backlog);\n+            return serverSocketChannel;\n@@ -195,0 +216,3 @@\n+        if (socketChannel.isPresent()) {\n+            socketChannel.get().close();\n+        }\n","filename":"src\/com\/sun\/javatest\/agent\/SocketConnection.java","additions":40,"deletions":16,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 1996, 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,2 @@\n-import java.net.ServerSocket;\n-import java.net.Socket;\n+import java.nio.channels.ServerSocketChannel;\n+import java.nio.channels.SocketChannel;\n@@ -52,1 +52,1 @@\n-    private static ServerSocket socket;\n+    private static ServerSocketChannel serverSocketChannel;\n@@ -74,1 +74,1 @@\n-        if (socket == null) {\n+        if (serverSocketChannel == null) {\n@@ -78,1 +78,1 @@\n-        return socket.getLocalPort();\n+        return serverSocketChannel.socket().getLocalPort();\n@@ -132,1 +132,1 @@\n-                Socket ns = socket.accept();\n+                SocketChannel socketChannel = serverSocketChannel.accept();\n@@ -134,1 +134,1 @@\n-                    System.out.println(\"httpd-New connection \" + ns);\n+                    System.out.println(\"httpd-New connection \" + socketChannel);\n@@ -137,1 +137,1 @@\n-                RequestHandler handler = new RequestHandler(ns);\n+                RequestHandler handler = new RequestHandler(socketChannel);\n@@ -168,1 +168,1 @@\n-                socket = SocketConnection.createServerSocket(i, 25);\n+                serverSocketChannel = SocketConnection.createServerSocketChannel(i, 25);\n@@ -172,1 +172,1 @@\n-                        String.valueOf(socket.getLocalPort())));\n+                        String.valueOf(serverSocketChannel.socket().getLocalPort())));\n@@ -177,1 +177,1 @@\n-                buf.append(socket.getLocalPort());\n+                buf.append(serverSocketChannel.socket().getLocalPort());\n","filename":"src\/com\/sun\/javatest\/httpd\/HttpdServer.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 1996, 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,2 @@\n+import java.nio.channels.Channels;\n+import java.nio.channels.SocketChannel;\n@@ -54,1 +56,1 @@\n-    private Socket soc;\n+    private SocketChannel socketChannel;\n@@ -63,2 +65,2 @@\n-    public RequestHandler(Socket soc) {\n-        this.soc = soc;\n+    public RequestHandler(SocketChannel socketChannel) {\n+        this.socketChannel = socketChannel;\n@@ -76,1 +78,1 @@\n-                buf.append(soc.getInetAddress().getHostName());\n+                buf.append(socketChannel.socket().getInetAddress().getHostName());\n@@ -78,1 +80,1 @@\n-                buf.append(soc.getInetAddress().getHostAddress());\n+                buf.append(socketChannel.socket().getInetAddress().getHostAddress());\n@@ -84,2 +86,2 @@\n-            out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(soc.getOutputStream(), StandardCharsets.UTF_8)));\n-            in = new LineNumberReader(new InputStreamReader(soc.getInputStream(), StandardCharsets.UTF_8));\n+            out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(Channels.newOutputStream(socketChannel), StandardCharsets.UTF_8)));\n+            in = new LineNumberReader(new InputStreamReader(Channels.newInputStream(socketChannel), StandardCharsets.UTF_8));\n","filename":"src\/com\/sun\/javatest\/httpd\/RequestHandler.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,10 +29,0 @@\n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.io.PipedReader;\n-import java.io.PipedWriter;\n-import java.io.PrintStream;\n-import java.io.PrintWriter;\n-import java.io.Reader;\n-import java.net.ServerSocket;\n-import java.util.Vector;\n-\n@@ -43,1 +33,6 @@\n-public class RemoteTest {\n+import java.io.*;\n+import java.net.InetSocketAddress;\n+import java.nio.channels.ServerSocketChannel;\n+import java.util.Vector;\n+\n+public class RemoteTestChannel {\n@@ -48,1 +43,1 @@\n-        RemoteTest t = new RemoteTest();\n+        RemoteTestChannel t = new RemoteTestChannel();\n@@ -59,1 +54,3 @@\n-            ServerSocket ss = new ServerSocket(port);\n+            ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n+            serverSocketChannel.bind(new InetSocketAddress(port));\n+\n@@ -61,2 +58,2 @@\n-                port = ss.getLocalPort();\n-            ConnectionFactory cf = new PassiveConnectionFactory(ss);\n+                port = serverSocketChannel.socket().getLocalPort();\n+            ConnectionFactory cf = new PassiveConnectionFactory(serverSocketChannel);\n@@ -87,0 +84,1 @@\n+            e.printStackTrace(log);\n@@ -152,0 +150,1 @@\n+                e.printStackTrace(log);\n@@ -207,1 +206,1 @@\n-                int expectCount = rgen.nextInt(RemoteTest.MAX_LINES_PER_TEST);\n+                int expectCount = rgen.nextInt(RemoteTestChannel.MAX_LINES_PER_TEST);\n@@ -254,1 +253,1 @@\n-                int n = rgen.nextInt(RemoteTest.MAX_LINES_PER_TEST);\n+                int n = rgen.nextInt(RemoteTestChannel.MAX_LINES_PER_TEST);\n@@ -315,1 +314,1 @@\n-            int l = nextInt(RemoteTest.MAX_CHARS_PER_LINE);\n+            int l = nextInt(MAX_CHARS_PER_LINE);\n","filename":"unit-tests\/com\/sun\/javatest\/agent\/RemoteTestChannel.java","additions":18,"deletions":19,"binary":false,"changes":37,"previous_filename":"unit-tests\/com\/sun\/javatest\/agent\/RemoteTest.java","status":"copied"}]}