{"files":[{"patch":"@@ -46,0 +46,1 @@\n+import java.util.Comparator;\n@@ -48,1 +49,0 @@\n-import java.util.List;\n@@ -51,0 +51,1 @@\n+import java.util.TreeMap;\n@@ -134,3 +135,3 @@\n-                ctx.printMessage(i18n, \"runTests.totalTime\", tt \/ 1000L);\n-                ctx.printMessage(i18n, \"runTests.setupTime\", setupT \/ 1000L);\n-                ctx.printMessage(i18n, \"runTests.cleanupTime\", cleanupT \/ 1000L);\n+                ctx.printMessage(i18n, \"runTests.totalTime\", formattedDuration(tt \/ 1000L));\n+                ctx.printMessage(i18n, \"runTests.setupTime\", formattedDuration(setupT \/ 1000L));\n+                ctx.printMessage(i18n, \"runTests.cleanupTime\", formattedDuration(cleanupT \/ 1000L));\n@@ -163,0 +164,36 @@\n+    \/**\n+     * Converts the given duration in seconds to a more readable string representation:\n+     * for example \"2 days 1 minute 4 seconds\".\n+     * This method doesn't generates weeks, months or years, only days\n+     * which is expected to be sufficient for printing total time taken by even a long test run.\n+     *\n+     * @param durationSeconds the seconds to convert to human-readable form\n+     * @return formatted representation, i.e. \"1 hour 53 seconds\"\n+     *\/\n+    public static String formattedDuration(long durationSeconds) {\n+\n+        if (durationSeconds < 1) {\n+            return \"0 seconds\";\n+        }\n+        String result = \"\";\n+        long remaining_seconds = durationSeconds;\n+        \/\/ have to map duration to names to have durations sorted (TreeMap maintains order for keys)\n+        TreeMap<Long, String> units = new TreeMap(Comparator.reverseOrder()) {{\n+            put(1L, \"second\");\n+            put(60L, \"minute\");\n+            put(60L * 60L, \"hour\");\n+            put(60L * 60L * 24L, \"day\");\n+        }};\n+        for (Map.Entry<Long, String> entry : units.entrySet()) {\n+            long amount = remaining_seconds \/ entry.getKey();\n+            if (amount > 0 ) {\n+                remaining_seconds = remaining_seconds % entry.getKey();\n+                result += \" \" + amount + \" \" + entry.getValue();\n+                if (amount > 1) {\n+                    result += \"s\";\n+                }\n+            }\n+        }\n+        return result.trim();\n+    }\n+\n","filename":"src\/com\/sun\/javatest\/batch\/RunTestsCommand.java","additions":41,"deletions":4,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-runTests.cleanupTime=Cleanup time = {0}s\n+runTests.cleanupTime=Cleanup time: {0}\n@@ -62,1 +62,1 @@\n-runTests.setupTime=Setup time = {0}s\n+runTests.setupTime=Setup time: {0}\n@@ -66,1 +66,1 @@\n-runTests.totalTime=Total time = {0}s\n+runTests.totalTime=Total time: {0}\n","filename":"src\/com\/sun\/javatest\/batch\/i18n.properties","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,183 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.javatest.batch;\n+\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import javax.script.ScriptEngine;\n+import javax.script.ScriptEngineFactory;\n+import javax.script.ScriptEngineManager;\n+import javax.script.ScriptException;\n+import java.util.List;\n+\n+\/**\n+ * Checking function that produces strings with human readable duration, i.e. \"2 hours 31 minutes 1 second\"\n+ *\/\n+public class RunTestsCommand_formattedDuration {\n+\n+    @Test\n+    public void zero() {\n+        Assert.assertEquals(\"0 seconds\", RunTestsCommand.formattedDuration(0));\n+        Assert.assertEquals(\"0 seconds\", RunTestsCommand.formattedDuration(-1));\n+        Assert.assertEquals(\"0 seconds\", RunTestsCommand.formattedDuration(-400));\n+        Assert.assertEquals(\"0 seconds\", RunTestsCommand.formattedDuration(Integer.MIN_VALUE));\n+        Assert.assertEquals(\"0 seconds\", RunTestsCommand.formattedDuration(Long.MIN_VALUE));\n+    }\n+\n+    @Test\n+    public void maxValues() {\n+        Assert.assertEquals(\"24855 days 3 hours 14 minutes 7 seconds\",\n+                RunTestsCommand.formattedDuration(Integer.MAX_VALUE));\n+        Assert.assertEquals(\n+                24855 * 60 * 60 * 24 + 60 * 60 * 3 + 60 * 14 + 7,\n+                Integer.MAX_VALUE\n+        );\n+\n+        Assert.assertEquals(\"106751991167300 days 15 hours 30 minutes 7 seconds\",\n+                RunTestsCommand.formattedDuration(Long.MAX_VALUE));\n+        Assert.assertEquals(\n+                106751991167300L * 60L * 60L * 24L + 60L * 60L * 15L + 60L * 30L + 7L,\n+                Long.MAX_VALUE\n+        );\n+    }\n+\n+    @Test\n+    public void seconds() {\n+        Assert.assertEquals(\"1 second\", RunTestsCommand.formattedDuration(1));\n+        Assert.assertEquals(\"2 seconds\", RunTestsCommand.formattedDuration(2));\n+        Assert.assertEquals(\"3 seconds\", RunTestsCommand.formattedDuration(3));\n+        Assert.assertEquals(\"30 seconds\", RunTestsCommand.formattedDuration(30));\n+        Assert.assertEquals(\"40 seconds\", RunTestsCommand.formattedDuration(40));\n+        Assert.assertEquals(\"59 seconds\", RunTestsCommand.formattedDuration(59));\n+    }\n+\n+    @Test\n+    public void minutes() {\n+        Assert.assertEquals(\"1 minute\", RunTestsCommand.formattedDuration(60));\n+        Assert.assertEquals(\"2 minutes\", RunTestsCommand.formattedDuration(120));\n+        Assert.assertEquals(\"3 minutes\", RunTestsCommand.formattedDuration(180));\n+        Assert.assertEquals(\"10 minutes\", RunTestsCommand.formattedDuration(600));\n+        Assert.assertEquals(\"59 minutes\", RunTestsCommand.formattedDuration(60 * 59));\n+        Assert.assertEquals(\"11 minutes\", RunTestsCommand.formattedDuration(660));\n+    }\n+\n+    @Test\n+    public void hours() {\n+        Assert.assertEquals(\"1 hour\", RunTestsCommand.formattedDuration(60 * 60));\n+        Assert.assertEquals(\"7 hours\", RunTestsCommand.formattedDuration(60 * 60 * 7));\n+        Assert.assertEquals(\"23 hours\", RunTestsCommand.formattedDuration(60 * 60 * 23));\n+    }\n+\n+    @Test\n+    public void days() {\n+        Assert.assertEquals(\"1 day\", RunTestsCommand.formattedDuration(60 * 60 * 24));\n+        Assert.assertEquals(\"2 days\", RunTestsCommand.formattedDuration(60 * 60 * 48));\n+        Assert.assertEquals(\"7 days\", RunTestsCommand.formattedDuration(60 * 60 * 24 * 7));\n+        Assert.assertEquals(\"100 days\", RunTestsCommand.formattedDuration(60 * 60 * 24 * 100));\n+    }\n+\n+    @Test\n+    public void days_hours() {\n+        Assert.assertEquals(\"1 day 1 hour\", RunTestsCommand.formattedDuration(60 * 60 * 25));\n+        Assert.assertEquals(\"2 days 3 hours\", RunTestsCommand.formattedDuration(60 * 60 * 51));\n+        Assert.assertEquals(\"2 days 23 hours\", RunTestsCommand.formattedDuration(60 * 60 * 71));\n+    }\n+\n+    @Test\n+    public void days_hours_minutes() {\n+        Assert.assertEquals(\"1 day 1 hour 1 minute\", RunTestsCommand.formattedDuration(60 * 60 * 25 + 60));\n+        Assert.assertEquals(\"1 day 5 hours 3 minutes\", RunTestsCommand.formattedDuration(60 * 60 * 29 + 180));\n+    }\n+\n+    @Test\n+    public void days_seconds() {\n+        Assert.assertEquals(\"1 day 59 seconds\", RunTestsCommand.formattedDuration(60 * 60 * 24 + 59));\n+        Assert.assertEquals(\"1 day 1 second\", RunTestsCommand.formattedDuration(60 * 60 * 24 + 1));\n+        Assert.assertEquals(\"1 day 2 seconds\", RunTestsCommand.formattedDuration(60 * 60 * 24 + 2));\n+        Assert.assertEquals(\"3 days 1 second\", RunTestsCommand.formattedDuration(60 * 60 * 72 + 1));\n+    }\n+\n+    @Test\n+    public void days_minutes() {\n+        Assert.assertEquals(\"1 day 2 minutes\", RunTestsCommand.formattedDuration(60 * 60 * 24 + 120));\n+        Assert.assertEquals(\"1 day 10 minutes\", RunTestsCommand.formattedDuration(60 * 60 * 24 + 600));\n+    }\n+\n+    @Test\n+    public void days_hours_minutes_seconds() {\n+        Assert.assertEquals(\"1 day 1 hour 1 minute 4 seconds\", RunTestsCommand.formattedDuration(60 * 60 * 25 + 64));\n+        Assert.assertEquals(\"1 day 1 hour 2 minutes 7 seconds\", RunTestsCommand.formattedDuration(60 * 60 * 25 + 127));\n+        Assert.assertEquals(\"2 days 1 hour 2 minutes 7 seconds\", RunTestsCommand.formattedDuration(60 * 60 * 49 + 127));\n+    }\n+\n+    @Test\n+    public void days_minutes_seconds() {\n+        Assert.assertEquals(\"1 day 8 minutes 15 seconds\", RunTestsCommand.formattedDuration(60 * 60 * 24 + 60*8 + 15));\n+        Assert.assertEquals(\"2 days 1 minute 4 seconds\", RunTestsCommand.formattedDuration(60 * 60 * 48 + 64));\n+    }\n+\n+    @Test\n+    public void days_hours_seconds() {\n+        Assert.assertEquals(\"1 day 1 hour 4 seconds\", RunTestsCommand.formattedDuration(60 * 60 * 25 + 4));\n+        Assert.assertEquals(\"1 day 23 hours 59 seconds\", RunTestsCommand.formattedDuration(60 * 60 * 47 + 59));\n+    }\n+\n+    @Test\n+    public void minutes_seconds() {\n+        Assert.assertEquals(\"1 minute 1 second\", RunTestsCommand.formattedDuration(61));\n+        Assert.assertEquals(\"1 minute 59 seconds\", RunTestsCommand.formattedDuration(119));\n+        Assert.assertEquals(\"2 minutes 1 second\", RunTestsCommand.formattedDuration(121));\n+        Assert.assertEquals(\"2 minutes 3 seconds\", RunTestsCommand.formattedDuration(123));\n+        Assert.assertEquals(\"2 minutes 6 seconds\", RunTestsCommand.formattedDuration(126));\n+        Assert.assertEquals(\"3 minutes 11 seconds\", RunTestsCommand.formattedDuration(191));\n+        Assert.assertEquals(\"10 minutes 1 second\", RunTestsCommand.formattedDuration(601));\n+        Assert.assertEquals(\"10 minutes 5 seconds\", RunTestsCommand.formattedDuration(605));\n+        Assert.assertEquals(\"10 minutes 59 seconds\", RunTestsCommand.formattedDuration(659));\n+    }\n+\n+    @Test\n+    public void hours_minutes() {\n+        Assert.assertEquals(\"1 hour 40 minutes\", RunTestsCommand.formattedDuration(6000));\n+        Assert.assertEquals(\"1 hour 41 minutes\", RunTestsCommand.formattedDuration(6060));\n+        Assert.assertEquals(\"1 hour 59 minutes\", RunTestsCommand.formattedDuration(60 * 60 + 60 * 59));\n+    }\n+\n+    @Test\n+    public void hours_seconds() {\n+        Assert.assertEquals(\"19 hours 15 seconds\", RunTestsCommand.formattedDuration(60 * 60 * 19 + 15));\n+    }\n+\n+    @Test\n+    public void hours_minutes_seconds() {\n+        Assert.assertEquals(\"1 hour 41 minutes 7 seconds\", RunTestsCommand.formattedDuration(6067));\n+        Assert.assertEquals(\"5 hours 45 minutes 45 seconds\", RunTestsCommand.formattedDuration(45 + 60*45 + 60*60*5));\n+    }\n+\n+\n+}\n","filename":"unit-tests\/com\/sun\/javatest\/batch\/RunTestsCommand_formattedDuration.java","additions":183,"deletions":0,"binary":false,"changes":183,"status":"added"}]}