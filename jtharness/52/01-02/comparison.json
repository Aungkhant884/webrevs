{"files":[{"patch":"@@ -1,998 +0,0 @@\n-\/*\n- * $Id$\n- *\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jthtest;\n-\n-import java.awt.Component;\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.io.FileReader;\n-import java.io.FileWriter;\n-import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.lang.reflect.InvocationTargetException;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.nio.channels.FileChannel;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.ResourceBundle;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-\n-import org.junit.After;\n-import org.netbeans.jemmy.ClassReference;\n-import org.netbeans.jemmy.ComponentChooser;\n-import org.netbeans.jemmy.JemmyException;\n-import org.netbeans.jemmy.JemmyProperties;\n-import org.netbeans.jemmy.TestOut;\n-import org.netbeans.jemmy.TimeoutExpiredException;\n-import org.netbeans.jemmy.operators.JButtonOperator;\n-import org.netbeans.jemmy.operators.JCheckBoxOperator;\n-import org.netbeans.jemmy.operators.JComboBoxOperator;\n-import org.netbeans.jemmy.operators.JDialogOperator;\n-import org.netbeans.jemmy.operators.JFrameOperator;\n-import org.netbeans.jemmy.operators.JLabelOperator;\n-import org.netbeans.jemmy.operators.JMenuBarOperator;\n-import org.netbeans.jemmy.operators.JMenuOperator;\n-import org.netbeans.jemmy.operators.JRadioButtonOperator;\n-import org.netbeans.jemmy.operators.JTabbedPaneOperator;\n-import org.netbeans.jemmy.operators.JTableOperator;\n-import org.netbeans.jemmy.operators.JTextAreaOperator;\n-import org.netbeans.jemmy.operators.JTextFieldOperator;\n-import org.netbeans.jemmy.operators.JTreeOperator;\n-import org.netbeans.jemmy.operators.Operator.StringComparator;\n-import org.netbeans.jemmy.util.NameComponentChooser;\n-\n-import javax.swing.JComboBox;\n-import javax.swing.JComponent;\n-import javax.swing.JDialog;\n-import javax.swing.JTextField;\n-\n-import com.sun.javatest.TestResult;\n-\n-import jthtest.menu.Menu;\n-\n-public class Tools {\n-\n-     @Deprecated\n-     public static final String TEMP_WD_NAME = \"javatest_guitest_demowd\";\n-     @Deprecated\n-     public static final String DEFAULT_WD_NAME = \"demowd_config\";\n-     @Deprecated\n-     public static final String WD_RUN_NAME = \"demowd_run\";\n-     @Deprecated\n-     public static final String TEST_SUITE_NAME = \"demots\";\n-     @Deprecated\n-     public static final String TEMPLATE_NAME = \"demotemplate.jtm\";\n-     @Deprecated\n-     public static final String INCOMPLETE_TEMPLATE_NAME = \"demotemplate_incomplete.jtm\";\n-     @Deprecated\n-     public static final String REPORT_NAME = \"demoreport\";\n-     @Deprecated\n-     public static final String CONFIG_NAME = \"democonfig.jti\";\n-     @Deprecated\n-     public static final String TESTS_DIRECTORY_PREFIX = \"tests\" + File.separator;\n-     @Deprecated\n-     public static final String NEWDESKTOP_ARG = \"-newdesktop\";\n-     @Deprecated\n-     \/\/ public static final String WINDOWNAME =\n-     \/\/ System.getProperty(\"jt_gui_test.name\");\n-     public static final String WINDOWNAME = \"JT\";\n-     @Deprecated\n-     public static final String TESTSUITENAME = \"DemoTS 1.0 Test Suite (Tag Tests)\";\n-     public static final int MAX_WAIT_TIME = 20000;\n-     @Deprecated\n-     public static String TEMP_PATH;\n-     @Deprecated\n-     public static String LOCAL_PATH;\n-     @Deprecated\n-     public static String DEFAULT_PATH;\n-     @Deprecated\n-     public static String USER_HOME_PATH;\n-     private static ResourceBundle i18nExecResources; \/\/ reading resources exacly from the javatest.jar to not to do\n-                                                                      \/\/ mistakes in element's names\n-     private static ResourceBundle i18nToolResources; \/\/ reading resources of dialog boxes exacly from the javatest.jar\n-                                                                      \/\/ to not to do mistakes in element's names\n-     private static ResourceBundle i18nJckResources;\n-     private static LinkedList<File> usedFiles = new LinkedList<File>();\n-\n-     static {\n-          JemmyProperties.getCurrentTimeouts().setTimeout(\"ComponentOperator.WaitComponentTimeout\", MAX_WAIT_TIME);\n-          JemmyProperties.setCurrentOutput(new TestOut(null, (PrintWriter) null, null));\n-\n-          i18nJckResources = ResourceBundle.getBundle(\"com.sun.javatest.tool.i18n_jck\");\n-          i18nExecResources = ResourceBundle.getBundle(\"com.sun.javatest.exec.i18n\");\n-          i18nToolResources = ResourceBundle.getBundle(\"com.sun.javatest.tool.i18n\");\n-\n-          String temp = System.getProperty(\"user.dir\") + File.separator;\n-          if (temp == null || \"\".equals(temp)) {\n-               File tmp = new File(\"\");\n-               temp = tmp.getAbsolutePath();\n-          }\n-          DEFAULT_PATH = LOCAL_PATH = temp;\n-\n-\/\/        StringBuffer tempPath = new StringBuffer();\n-\/\/        try {\n-\/\/            File tmp = File.createTempFile(\"xxxxxxx\", \"yyy\");\n-\/\/            tempPath.append(tmp.getCanonicalPath().split(\"xxxxxxx\")[0]);\n-\/\/            tmp.delete();\n-\/\/        } catch (IOException e) {\n-\/\/            System.err.println(\"Error while initialization: cannot create temp file\");\n-\/\/        }\n-\/\/        temp = tempPath.toString();\n-\/\/        if (temp == null || \"\".equals(temp)) {\n-\/\/            temp = LOCAL_PATH;\n-\/\/        }\n-\/\/        TEMP_PATH = temp;\n-          TEMP_PATH = LOCAL_PATH + File.separator + \"temp\";\n-\n-          USER_HOME_PATH = System.getProperty(\"user.home\") + File.separator;\n-     }\n-\n-     ;\n-\n-     public static JTabbedPaneOperator getPage(JFrameOperator frame, TestList list) {\n-          JTabbedPaneOperator tabs = new JTabbedPaneOperator(frame, new NameComponentChooser(\"br.tabs\"));\n-\n-          switch (list) {\n-          case PASSED:\n-               tabs.selectPage(getExecResource(\"br.tabs.tl0.tab\"));\n-               break;\n-          case FAILED:\n-               tabs.selectPage(getExecResource(\"br.tabs.tl1.tab\"));\n-               break;\n-          case ERROR:\n-               tabs.selectPage(getExecResource(\"br.tabs.tl2.tab\"));\n-               break;\n-          case NOT_RUN:\n-               tabs.selectPage(getExecResource(\"br.tabs.tl3.tab\"));\n-               break;\n-          case FILTERED_OUT:\n-               tabs.selectPage(getExecResource(\"br.tabs.fo.tab\"));\n-               break;\n-          }\n-          return tabs;\n-     }\n-\n-     public static String getExecResource(String key) {\n-          return i18nExecResources.getString(key);\n-     }\n-\n-     public static String getToolResource(String key) {\n-          return i18nToolResources.getString(key);\n-     }\n-\n-     public static String getJckResource(String key) {\n-          return i18nJckResources.getString(key);\n-     }\n-\n-     \/\/ checks if panel is opened\n-     public static boolean checkPanel() {\n-          return true;\n-     }\n-\n-     \/\/ checks if configuration editor contains standard config file\n-     public static boolean checkStandardConfig(JDialogOperator configEditor) {\n-          return true;\n-     }\n-\n-     \/\/ opens standard test suite\n-     public static void openTestSuite(JFrameOperator frame) {\n-\n-          try {\n-               Thread.sleep(3000);\n-          } catch (InterruptedException e) {\n-               e.printStackTrace();\n-          }\n-\n-          Menu.getFile_Open_TestSuiteMenu(frame).pushNoBlock();\n-          \/\/ Wait for dialog box to appear\n-          JDialogOperator openDialog = new JDialogOperator(getToolResource(\"tsc.title\"));\n-          \/\/ Find edit box for file name\n-          new JTextFieldOperator(openDialog, \"\").enterText(TEST_SUITE_NAME);\n-     }\n-\n-     \/\/ creates standard work directory using menu\n-     @Deprecated\n-     public static String createWorkDirInTemp(JFrameOperator mainFrame) {\n-          int attempts = 0;\n-\n-          new JMenuOperator(mainFrame)\n-                    .pushMenuNoBlock(getExecResource(\"qlb.file.menu\") + \"|\" + getExecResource(\"ch.newWorkDir.act\"), \"|\");\n-\n-          JDialogOperator filer = new JDialogOperator(mainFrame, getToolResource(\"wdc.new.title\"));\n-          String path = TEMP_PATH + TEMP_WD_NAME;\n-          while (attempts < 10) {\n-               File file = new File(path);\n-               if (!file.exists()) {\n-                    usedFiles.add(file);\n-                    break;\n-               }\n-               deleteDirectory(file);\n-               file = new File(path);\n-               if (!file.exists()) {\n-                    usedFiles.add(file);\n-                    break;\n-               }\n-               path = TEMP_PATH + TEMP_WD_NAME + (int) (Math.random() * 10000);\n-               attempts++;\n-          }\n-          if (attempts >= 10) {\n-               throw new JemmyException(\"error\");\n-          }\n-          JTextFieldOperator tf;\n-\n-          tf = new JTextFieldOperator((JTextField) Tools.getComponent(filer,\n-                    new String[] { \"Folder name:\", \"File name:\", \"Folder Name:\", \"File Name:\" }));\n-          tf.enterText(path);\n-          return path;\n-     }\n-\n-     \/\/ picks standatd work directory using dialog box \"work directory needed\"\n-     public static void pickWorkDir(JFrameOperator mainFrame) {\n-          JDialogOperator wrkDir = new JDialogOperator(mainFrame, getExecResource(\"exec.wd.need.title\"));\n-\n-          new JButtonOperator(wrkDir, getExecResource(\"exec.wd.new.btn\")).push();\n-\n-          wrkDir = new JDialogOperator(mainFrame, getExecResource(\"wdc.createtitle\"));\n-\n-          deleteDirectory(new File(TEMP_PATH + TEMP_WD_NAME));\n-          getTextField(wrkDir, getExecResource(\"wdc.dir.name.lbl\")).typeText(TEMP_WD_NAME);\n-\n-          new JButtonOperator(wrkDir, getExecResource(\"wdc.browse.btn\")).push();\n-\n-          JDialogOperator filer = new JDialogOperator(mainFrame, getExecResource(\"wdc.filechoosertitle\"));\n-\n-          JTextFieldOperator tf;\n-\n-          tf = new JTextFieldOperator(\n-                    (JTextField) Tools.getComponent(filer, new String[] { \"Folder name:\", \"File name:\" }));\n-          tf.enterText(TEMP_WD_NAME);\n-\n-          new JButtonOperator(wrkDir, getExecResource(\"wdc.create.btn\")).push();\n-     }\n-\n-     \/\/ gets TextField in dialog by it's caption\n-     public static JTextFieldOperator getTextField(JDialogOperator dialog, String caption) {\n-          JLabelOperator label = new JLabelOperator(dialog, caption);\n-          return new JTextFieldOperator((JTextField) label.getLabelFor());\n-     }\n-\n-     \/\/ gets JTextField in dialog by it's dialog name\n-     public static String getTextField(JDialogOperator dialog) {\n-          return new JTextFieldOperator(dialog, \"\").getText();\n-     }\n-\n-     \/\/ gets JTextArea in dialog by it's dialog name\n-     public static String getTextArea(JDialogOperator dialog) {\n-          return new JTextAreaOperator(dialog, \"\").getText();\n-     }\n-\n-     public static JComponent getComponent(final JDialogOperator dialog, final String captions[]) {\n-          ComponentFinder threads[] = new ComponentFinder[captions.length];\n-          final JLabelOperatorRef ref = new JLabelOperatorRef();\n-          for (int i = 0; i < captions.length; i++) {\n-               threads[i] = new ComponentFinder(ref, dialog, captions[i]);\n-               threads[i].start();\n-          }\n-          boolean someIsAlive = true;\n-          while (ref.isOpNull() && someIsAlive) {\n-               someIsAlive = false;\n-               for (ComponentFinder finder : threads) {\n-                    if (finder.isAlive) {\n-                         someIsAlive = true;\n-                    }\n-                    if (!ref.isOpNull())\n-                         break;\n-               }\n-          }\n-          if (!ref.isOpNull()) {\n-               return (JComponent) ref.getOp().getLabelFor();\n-          }\n-          StringBuilder build = new StringBuilder(\"Was not found any of components: \");\n-          for (String caption : captions) {\n-               build.append(caption).append(\" \");\n-          }\n-          throw new JemmyException(\"Error occured while searching components\",\n-                    new TimeoutExpiredException(build.toString()));\n-     }\n-\n-     public static <ComponentClass extends JComponent> ComponentClass getComponentPar(final JDialogOperator dialog,\n-               final String captions[]) {\n-          ComponentFinder threads[] = new ComponentFinder[captions.length];\n-          final JLabelOperatorRef ref = new JLabelOperatorRef();\n-          for (int i = 0; i < captions.length; i++) {\n-               threads[i] = new ComponentFinder(ref, dialog, captions[i]);\n-               threads[i].start();\n-          }\n-          boolean anyFinderAlive;\n-          ComponentFindersCheck: do {\n-               anyFinderAlive = false;\n-               for (ComponentFinder finder : threads) {\n-                    if (!ref.isOpNull()) {\n-                         try {\n-                              ComponentClass check = (ComponentClass) ref.getOp().getLabelFor();\n-                              return check;\n-                         } catch (Exception e) {\n-                         }\n-                    }\n-                    if (finder.isAlive) {\n-                         anyFinderAlive = true;\n-                         continue ComponentFindersCheck;\n-                    }\n-               }\n-          } while (anyFinderAlive);\n-          StringBuilder build = new StringBuilder(\"Was not found any of components: \");\n-          for (String caption : captions) {\n-               build.append(caption).append(\" \");\n-          }\n-          throw new JemmyException(\"Error occured while searching components\",\n-                    new TimeoutExpiredException(build.toString()));\n-     }\n-\n-     public static JComboBoxOperator getComboBox(JDialogOperator dialog, String caption) {\n-          JLabelOperator label = new JLabelOperator(dialog, caption);\n-          return new JComboBoxOperator((JComboBox) label.getLabelFor());\n-     }\n-\n-     \/\/\/\/\/\/\/\/\/\/\/ Quick Start dialog box methods\n-     \/\/ opens QS using menu dialog box\n-     public static JDialogOperator openQuickStart(JFrameOperator mainFrame) {\n-          new JMenuOperator(mainFrame)\n-                    .pushMenu(getExecResource(\"qlb.file.menu\") + \"|\" + getExecResource(\"mgr.openQuickStart.act\"), \"|\");\n-          return findQuickStart(mainFrame);\n-     }\n-\n-     \/\/ click \"next\" in QS\n-     public static void next(JDialogOperator quickStartDialog) {\n-          new JButtonOperator(quickStartDialog, getExecResource(\"qsw.next.btn\")).push();\n-     }\n-\n-     \/\/ click \"finish\" in QS with test running\n-     public static void finish(JDialogOperator quickStartDialog, boolean startConfigEditor, boolean runTests) {\n-          new JCheckBoxOperator(quickStartDialog, getExecResource(\"qsw.end.cfg.ckb\")).setSelected(startConfigEditor);\n-          new JCheckBoxOperator(quickStartDialog, getExecResource(\"qsw.end.run.ckb\")).setSelected(runTests);\n-\n-          new JButtonOperator(quickStartDialog, getExecResource(\"qsw.done.btn\")).push();\n-     }\n-\n-     \/\/ click \"finish\" in QS\n-     public static void finish(JDialogOperator quickStartDialog, boolean startConfigEditor) {\n-          new JCheckBoxOperator(quickStartDialog, getExecResource(\"qsw.end.cfg.ckb\")).setSelected(startConfigEditor);\n-\n-          new JButtonOperator(quickStartDialog, getExecResource(\"qsw.done.btn\")).push();\n-     }\n-\n-     \/\/ uses standart testsuite in QS\n-     public static void pickDefaultTestsuite(JDialogOperator quickStartDialog) {\n-\n-          getTextField(quickStartDialog, getExecResource(\"qsw.ts.hd\")).typeText(TEST_SUITE_NAME);\n-\n-     }\n-\n-     \/\/ activates flag of creating new configuration in QS\n-     public static void createConfiguration(JDialogOperator quickStartDialog) {\n-\n-          new JRadioButtonOperator(quickStartDialog, getExecResource(\"qsw.cfg.new.rb\")).push();\n-     }\n-\n-     \/\/ activates flag of starting config editor in QS\n-     public static void startConfigEditor(JDialogOperator quickStartDialog) {\n-          new JCheckBoxOperator(quickStartDialog, getExecResource(\"qsw.end.cfg.ckb\")).push();\n-     }\n-\n-     \/\/ uses template config in QS\n-     static public void useConfigTemplate(JDialogOperator quickStartDialog) {\n-\n-          new JRadioButtonOperator(quickStartDialog, getExecResource(\"qsw.cfg.template.rb\")).push();\n-\n-          getTextField(quickStartDialog, getExecResource(\"qsw.cfg.jtm.field.lbl\")).typeText(TEMPLATE_NAME);\n-     }\n-\n-     \/\/ uses incomplete template config in QS\n-     static public void useIncompleteConfigTemplate(JDialogOperator quickStartDialog) {\n-\n-          new JRadioButtonOperator(quickStartDialog, getExecResource(\"qsw.cfg.template.rb\")).push();\n-\n-          getTextField(quickStartDialog, getExecResource(\"qsw.cfg.jtm.field.lbl\")).typeText(INCOMPLETE_TEMPLATE_NAME);\n-     }\n-\n-     \/\/ uses bad template config in QS\n-     static public void useBadConfigTemplate(JDialogOperator quickStartDialog) {\n-\n-          new JRadioButtonOperator(quickStartDialog, getExecResource(\"qsw.cfg.template.rb\")).push();\n-\n-          getTextField(quickStartDialog, getExecResource(\"qsw.cfg.jtm.field.lbl\")).typeText(\"democonfig_broken.jti\");\n-     }\n-\n-     \/\/ uses missing template config in QS\n-     static public void useMissingConfigTemplate(JDialogOperator quickStartDialog) {\n-\n-          new JRadioButtonOperator(quickStartDialog, getExecResource(\"qsw.cfg.template.rb\")).push();\n-\n-          getTextField(quickStartDialog, getExecResource(\"qsw.cfg.jtm.field.lbl\")).typeText(\"\/tmp\/missing.jti\");\n-     }\n-\n-     \/\/ checks if \"next\" button is available in QS\n-     static public boolean isNextEnabled(JDialogOperator quickStartDialog) {\n-\n-          return JButtonOperator\n-                    .findJButton(quickStartDialog.getContentPane(), getExecResource(\"qsw.next.btn\"), false, false)\n-                    .isEnabled();\n-     }\n-\n-     \/\/ close QS\n-     static public void closeQS(JFrameOperator mainFrame) {\n-          new JDialogOperator(mainFrame, getExecResource(\"qsw.title\")).close();\n-     }\n-\n-     \/\/\/\/\/\/\/\/\/\/\/\/ JavaTest starting\n-     \/\/ starts the JT\n-     public static void startJavaTestWithDefaultWorkDirectory()\n-               throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException {\n-          new ClassReference(\"com.sun.javatest.tool.Main\")\n-                    .startApplication(new String[] { \"-NewDesktop\", \"-open\", DEFAULT_WD_NAME });\n-     }\n-\n-     public static void startJavatest() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException {\n-          \/\/ Start JT Harness\n-          new ClassReference(\"com.sun.javatest.tool.Main\").startApplication(new String[] {});\n-     }\n-\n-     \/\/ starts the JT with specified params\n-     public static void startJavatest(String params)\n-               throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException {\n-          \/\/ Start JT Harness with Specified parameters\n-          new ClassReference(\"com.sun.javatest.tool.Main\").startApplication(new String[] { params });\n-     }\n-\n-     \/\/ starts the JT with specified params\n-     public static void startJavatest(String[] params)\n-               throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException {\n-          \/\/ Start JT Harness with Specified parameters\n-          new ClassReference(\"com.sun.javatest.tool.Main\").startApplication(params);\n-     }\n-\n-     \/\/ starts the JT with specified testsuite, workdir and config\n-     public static void startJavatest(String testsuite, String workdir, String config)\n-               throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException {\n-          \/\/ Start JT Harness with specified testsuite, workdir and config file\n-          new ClassReference(\"com.sun.javatest.tool.Main\")\n-                    .startApplication(new String[] { \"-open\", testsuite, \"-workdir\", workdir, \"-config\", config });\n-     }\n-\n-     public static void startJavatestNewDesktop()\n-               throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException {\n-          new ClassReference(\"com.sun.javatest.tool.Main\").startApplication(new String[] { \"-NewDesktop\" });\n-     }\n-\n-     \/\/ returns main frame\n-     public static JFrameOperator findMainFrame() {\n-          return new JFrameOperator(WINDOWNAME + \" Harness\");\n-     }\n-\n-     \/\/ returns QS\n-     public static JDialogOperator findQuickStart(JFrameOperator mainFrame) {\n-          return new JDialogOperator(mainFrame, WINDOWNAME + \" Harness Quick Start\");\n-     }\n-\n-     \/\/ returns config editor dialog box\n-     public static JDialogOperator findConfigEditor(JFrameOperator mainFrame) {\n-          return new JDialogOperator(mainFrame, getExecResource(\"ce.name\"));\n-     }\n-\n-     \/\/ returns dialog box of work directory creation\n-     public static JDialogOperator findWorkDir(JFrameOperator mainFrame) {\n-          return new JDialogOperator(mainFrame, getToolResource(\"wdc.new.title\"));\n-     }\n-\n-     \/\/ click \"ok\" in filter editor dialog box\n-     public static void ok(JDialogOperator filterEditor) {\n-          new JButtonOperator(filterEditor, getExecResource(\"fconfig.edit.done.btn\")).push();\n-     }\n-\n-     \/\/ click \"cancel\" in dialod box\n-     public static void cancel(JDialogOperator dialog) {\n-          new JButtonOperator(dialog, \"cancel\").push(); \/\/ Cancel of filter dialog not found in resource files\n-     }\n-\n-     \/\/ check some counters?\n-     public static void checkCounters(JFrameOperator mainFrame, int[] counters) {\n-          for (int i = 0; i < counters.length; i++) {\n-               int value = counters[i];\n-\n-               String actual = new JTextFieldOperator(mainFrame, new NameComponentChooser(\"br.summ.\" + i)).getText();\n-\n-               if (!actual.equals(Integer.toString(value))) {\n-                    throw new JemmyException(\"Wrong counters value in the main frame. Expected: \" + value + \". Found: \"\n-                              + actual + \". In row: \" + i);\n-               }\n-          }\n-     }\n-\n-     static public boolean deleteDirectory(String path) {\n-          return deleteDirectory(new File(path));\n-     }\n-\n-     \/\/ deletes directory\n-     static public boolean deleteDirectory(File path) {\n-          if (path != null && path.exists()) {\n-               File[] files = path.listFiles();\n-               for (int i = 0; i < files.length; i++) {\n-                    if (files[i].isDirectory()) {\n-                         deleteDirectory(files[i]);\n-                    } else {\n-                         files[i].delete();\n-                    }\n-               }\n-               return (path.delete());\n-          }\n-          return true;\n-     }\n-\n-     public static boolean copyFile(String from, String to) throws IOException {\n-          return copyFile(new File(from), new File(to));\n-     }\n-\n-     public static boolean copyFile(File from, File to) throws IOException {\n-          if (from.isDirectory()) {\n-               return copyDirectory(from, to);\n-          }\n-\n-          if (!from.exists()) {\n-               throw new IOException(\"Source file \" + from.getAbsolutePath() + \" doesn't exist\");\n-          }\n-          if (!from.canRead()) {\n-               throw new IOException(\"Can't read source file \" + from.getAbsolutePath());\n-          }\n-\n-          if (!to.exists()) {\n-               if (!to.createNewFile()) {\n-                    throw new IOException(\"Can't create destination file \" + to.getAbsolutePath());\n-               }\n-               copyFile_(from, to);\n-               return true;\n-          } else {\n-               if (to.isDirectory()) {\n-                    String name = from.getName();\n-                    to = new File(to, name);\n-                    return copyFile(from, to);\n-               } else {\n-                    throw new IOException(\"Destination file \" + to.getAbsolutePath() + \" exists\");\n-               }\n-          }\n-     }\n-\n-     private static void copyFile_(File from, File to) throws IOException {\n-          to.createNewFile();\n-          if (\"configHistory.jtl\".equals(from.getName())) {\n-               BufferedReader reader = new BufferedReader(new FileReader(from));\n-               FileWriter writer = new FileWriter(to);\n-               String temp;\n-               while ((temp = reader.readLine()).startsWith(\"#\")) {\n-                    writer.write(temp + \"\\n\");\n-               }\n-               while (temp != null) {\n-                    File tempFile = new File(temp);\n-                    if (tempFile.exists()) {\n-                         if (!new File(to.getParentFile(), tempFile.getName()).exists()) {\n-                              copyFile(tempFile, to.getParentFile());\n-                         }\n-                         writer.write(to.getParentFile().getAbsolutePath() + File.separator + tempFile.getName());\n-                    } else {\n-                         writer.write(temp);\n-                    }\n-                    temp = reader.readLine();\n-               }\n-               writer.flush();\n-          } else {\n-               FileChannel fromChannel = new FileInputStream(from).getChannel();\n-               FileChannel toChannel = new FileOutputStream(to).getChannel();\n-               try {\n-                    fromChannel.transferTo(0, fromChannel.size(), toChannel);\n-               } finally {\n-                    fromChannel.close();\n-                    toChannel.close();\n-               }\n-          }\n-     }\n-\n-     public static boolean copyDirectory(File from, File to) throws IOException {\n-          System.out.println(from.getAbsolutePath());\n-          if (!from.exists()) {\n-               throw new IOException(\"Source file \" + from.getAbsolutePath() + \" doesn't exist\");\n-          }\n-          if (!from.canRead()) {\n-               throw new IOException(\"Can't read source file \" + from.getAbsolutePath());\n-          }\n-          if (from.isFile()) {\n-               return copyFile(from, to);\n-          }\n-\n-          if (!to.exists()) {\n-               to.mkdirs();\n-               boolean res = true;\n-               for (File f : from.listFiles()) {\n-                    if (f.isFile()) {\n-                         copyFile_(f, new File(to, f.getName()));\n-                    } else if (f.isDirectory()) {\n-                         res = res & copyDirectory_(f, to);\n-                    }\n-                    return res;\n-               }\n-          } else {\n-               if (!to.isDirectory()) {\n-                    throw new IOException(\"Destination file is not a directory\");\n-               }\n-               if (!to.canWrite()) {\n-                    throw new IOException(\"Can not write in destination directory\");\n-               }\n-\n-               return copyDirectory_(from, to);\n-          }\n-\n-          return true;\n-     }\n-\n-     private static boolean copyDirectory_(File from, File to) throws IOException {\n-          File newDir = new File(to, from.getName());\n-          newDir.mkdir();\n-          for (File f : from.listFiles()) {\n-               if (f.isFile()) {\n-                    copyFile_(f, new File(newDir, f.getName()));\n-               } else if (f.isDirectory()) {\n-                    copyDirectory_(f, newDir);\n-               }\n-          }\n-          return true;\n-     }\n-\n-     \/\/ finds the test tree in the main frame\n-     public static JTreeOperator findTree(JFrameOperator mainFrame) {\n-          return new JTreeOperator(mainFrame, new NameComponentChooser(\"tree\"));\n-     }\n-\n-     public static JTreeOperator findTree(JFrameOperator mainFrame, int n) {\n-          return new JTreeOperator(mainFrame, new NameComponentChooser(\"tree\"), n);\n-     }\n-\n-     \/\/ checks tabs of test results\n-     public static void checkAllTestLists(JFrameOperator frame, String[] passed, String[] failed, String[] error,\n-               String[] notrun, String[] filtered) {\n-          JTabbedPaneOperator tabs = new JTabbedPaneOperator(frame, new NameComponentChooser(\"br.tabs\"));\n-          if (passed != null) {\n-               checkTestList(frame, TestList.PASSED, passed);\n-          } else {\n-               if (tabs.isEnabledAt(2)) {\n-                    throw new JemmyException(\"The 'Passed' page is enabled while it must be not\");\n-               }\n-          }\n-\n-          if (failed != null) {\n-               checkTestList(frame, TestList.FAILED, failed);\n-          } else {\n-               if (tabs.isEnabledAt(3)) {\n-                    throw new JemmyException(\"The 'Failed' page is enabled while it must be not\");\n-               }\n-          }\n-\n-          if (error != null) {\n-               checkTestList(frame, TestList.ERROR, error);\n-          } else {\n-               if (tabs.isEnabledAt(4)) {\n-                    throw new JemmyException(\"The 'Error' page is enabled while it must be not\");\n-               }\n-          }\n-\n-          if (notrun != null) {\n-               checkTestList(frame, TestList.NOT_RUN, notrun);\n-          } else {\n-               if (tabs.isEnabledAt(5)) {\n-                    throw new JemmyException(\"The 'Not Run' page is enabled while it must be not\");\n-               }\n-          }\n-\n-          if (filtered != null) {\n-               checkTestList(frame, TestList.FILTERED_OUT, filtered);\n-          } else {\n-               if (tabs.isEnabledAt(6)) {\n-                    throw new JemmyException(\"The 'Filtered Out' page is enabled while it must be not\");\n-               }\n-          }\n-\n-     }\n-\n-     \/\/ checks a tab of test results\n-     public static void checkTestList(JFrameOperator frame, TestList list, String[] expected) throws JemmyException {\n-          JTreeOperator tree = findTree(frame);\n-          tree.selectRow(0);\n-          JTabbedPaneOperator tabs = getPage(frame, list);\n-          checkTestList(new JTableOperator(tabs, 0), expected);\n-     }\n-\n-     \/\/ checks a tab of test results\n-     private static void checkTestList(JTableOperator list, String[] expected) throws JemmyException {\n-\n-          if (list.getRowCount() != expected.length) {\n-               throw new JemmyException(\n-                         \"Wrong test count. Expected: \" + expected.length + \", found: \" + list.getRowCount());\n-          }\n-\n-          boolean[] appeared = new boolean[expected.length];\n-\n-          for (int i = 0; i < expected.length; i++) {\n-               final Object o = list.getValueAt(i, 0);\n-               final TestResult tr = (TestResult) o;\n-               final String testName = tr.getTestName();\n-               final int pos = find(expected, testName);\n-\n-               if (pos == -1) {\n-                    throw new JemmyException(\"Test \" + testName + \" is not expected\");\n-               }\n-\n-               if (appeared[pos]) {\n-                    throw new JemmyException(\"Test \" + testName + \" has been found more than once\");\n-               }\n-\n-               appeared[pos] = true;\n-          }\n-     }\n-\n-     \/\/ find string s in string array a\n-     private static int find(String[] a, String s) {\n-          for (int i = 0; i < a.length; i++) {\n-               if (a[i].equals(s)) {\n-                    return i;\n-               }\n-          }\n-          return -1;\n-     }\n-\n-     \/\/ Prepares the JavaTest for the next test run\n-     public static void closeAll(JFrameOperator frame) throws InterruptedException {\n-          \/\/ Close all dialog windows\n-          JDialog dialog;\n-          while ((dialog = JDialogOperator.findJDialog(new AnyComponentChooser())) != null) {\n-               new JDialogOperator(dialog).close();\n-          }\n-\n-          \/\/ Close all tabs\n-          JTabbedPaneOperator tabs = new JTabbedPaneOperator(frame);\n-          while (tabs.getTabCount() > 0) {\n-               Thread.sleep(500);\n-               JMenuBarOperator jmbo = new JMenuBarOperator(frame);\n-               jmbo.pushMenuNoBlock(\"File|Close\");\n-               \/\/ new JMenuOperator(frame).pushMenuNoBlock(getExecResource(\"cb.file.menu\") +\n-               \/\/ \"|Close\", \"|\"); \/\/ Close from the File tab is in strange resource file\n-          }\n-     }\n-\n-     public static void closeJT(JFrameOperator frame) throws InterruptedException {\n-          closeAll(frame);\n-          Thread.sleep(500);\n-          JMenuBarOperator jmbo = new JMenuBarOperator(frame);\n-          Thread.sleep(500);\n-          jmbo.pushMenuNoBlock(\"File\/Exit\", \"\/\");\n-          \/\/ new JMenuOperator(frame).pushMenuNoBlock(getExecResource(\"qlb.file.menu\") +\n-          \/\/ \"|\" + getToolResource(\"dt.file.exit.mit\"), \"|\");\n-     }\n-\n-     \/\/ concat 2 string arrays\n-     public static String[] concat(String[] a, String[] b) {\n-          List<String> list = new ArrayList<String>(a.length + b.length);\n-          list.addAll(Arrays.asList(a));\n-          list.addAll(Arrays.asList(b));\n-          String[] result = new String[a.length + b.length];\n-          return list.toArray(result);\n-     }\n-\n-     public static void pressYes(JDialogOperator dialog) {\n-          new JButtonOperator(dialog, \"Yes\").push();\n-     }\n-\n-     public static URL urlFile(String path) {\n-          URL u = null;\n-          try {\n-               u = new File(path).toURI().toURL();\n-          } catch (MalformedURLException ex) {\n-               Logger.getLogger(Tools.class.getName()).log(Level.SEVERE, null, ex);\n-          }\n-          return u;\n-     }\n-\n-     public static int findInStringArray(String[] in, String what) {\n-          for (int i = 0; i < in.length; i++) {\n-               String ExpectedString = null;\n-               if (what.contains(\"#\"))\n-                    ExpectedString = what.replace(\"#\", \"\");\n-               else\n-                    ExpectedString = what;\n-               if (in[i].replaceAll(\"[^a-zA-Z\/\/.-]\", \" \").trim().replaceAll(\" +\", \" \").contains(ExpectedString.trim())) {\n-                    return i;\n-               }\n-          }\n-          return -1;\n-     }\n-\n-     public static void deleteUserData() {\n-          deleteDirectory(new File(USER_HOME_PATH + \".javatest\"));\n-     }\n-\n-     public static void openWorkDirectory_(JFrameOperator mainFrame, String path) {\n-          new JMenuOperator(mainFrame).pushMenuNoBlock(\n-                    getExecResource(\"qlb.file.menu\") + \"|\" + getExecResource(\"tmgr.openMenu.menu\") + \"|Work Directory ...\",\n-                    \"|\", new StringComparator() {\n-\n-                         public boolean equals(String arg0, String arg1) {\n-                              return arg0.equals(arg1);\n-                         }\n-                    });\n-\n-          JDialogOperator filer = new JDialogOperator(mainFrame, \"Open Work Directory\");\n-\n-          JTextFieldOperator tf;\n-\n-          tf = new JTextFieldOperator(\n-                    (JTextField) Tools.getComponent(filer, new String[] { \"Folder name:\", \"File name:\" }));\n-          tf.enterText(path);\n-     }\n-\n-     public static void waitForWDLoading(JFrameOperator mainFrame, WDLoadingResult type) {\n-          new JTextFieldOperator(mainFrame, getExecResource(\"br.worst.\" + type.ordinal()));\n-     }\n-\n-     public static void startTests(JFrameOperator mainFrame) {\n-          new JMenuOperator(mainFrame, \"Run Tests\").pushMenu(new String[] { \"Run Tests\", \"Start\" });\n-     }\n-\n-     public static void pushClose(JFrameOperator mainFrame) {\n-          new JMenuOperator(mainFrame, \"File\").pushMenuNoBlock(new String[] { \"File\", \"Close\" });\n-     }\n-\n-     public static void startJavaTestWithDefaultTestSuite()\n-               throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException {\n-          new ClassReference(\"com.sun.javatest.tool.Main\")\n-                    .startApplication(new String[] { \"-NewDesktop\", \"-open\", TEST_SUITE_NAME });\n-     }\n-\n-     \/\/ sleep for 10 seconds\n-     public static void pause() {\n-          try {\n-               Thread.sleep(10000);\n-          } catch (Exception e) {\n-          }\n-     }\n-\n-     ;\n-\n-     public static void pause(int seconds) {\n-          try {\n-               Thread.sleep(seconds * 1000);\n-          } catch (Exception e) {\n-          }\n-     }\n-\n-     @After\n-     public void removeFiles() {\n-          for (File f : usedFiles) {\n-               if (f.exists()) {\n-                    if (f.isDirectory()) {\n-                         deleteDirectory(f);\n-                    } else if (f.isFile()) {\n-                         f.delete();\n-                    }\n-                    if (f.exists()) {\n-                         System.err.println(\n-                                   \"Temporary file \" + f.getAbsolutePath() + \" was not removed. Please remove it manualy.\");\n-                    }\n-               }\n-          }\n-     }\n-\n-     public static enum TestList {\n-\n-          PASSED, FAILED, ERROR, NOT_RUN, FILTERED_OUT\n-     }\n-\n-     public enum FiltersType {\n-\n-          LAST_TEST_RUN, CURRENT_CONFIGURATION, ALL_TESTS, CUSTOM\n-     }\n-\n-     public enum WDLoadingResult {\n-\n-          ALL_PASSED, SOME_FAILED, SOME_ERRORS, SOME_NOTRUN\n-     }\n-\n-     private static class JLabelOperatorRef {\n-\n-          private JLabelOperator op1 = null;\n-\n-          public synchronized boolean isOpNull() {\n-               return op1 == null;\n-          }\n-\n-          public JLabelOperator getOp() {\n-               return op1;\n-          }\n-\n-          public synchronized void setOp(JLabelOperator op) {\n-               this.op1 = op;\n-          }\n-     }\n-\n-     private static class ComponentFinder extends Thread {\n-\n-          private final JLabelOperatorRef ref;\n-          private JDialogOperator dialog;\n-          private String caption;\n-          private boolean isAlive = true;\n-\n-          public ComponentFinder(JLabelOperatorRef ref, JDialogOperator dialog, String caption) {\n-               this.dialog = dialog;\n-               this.caption = caption;\n-               this.ref = ref;\n-          }\n-\n-          public void run() {\n-               try {\n-                    JLabelOperator op = new JLabelOperator(dialog, caption);\n-                    if (ref != null && ref.isOpNull()) {\n-                         ref.setOp(op);\n-                    }\n-               } catch (TimeoutExpiredException ex) {\n-               }\n-               isAlive = false;\n-          }\n-     }\n-\n-     public static class AnyComponentChooser implements ComponentChooser {\n-\n-          public AnyComponentChooser() {\n-          }\n-\n-          public boolean checkComponent(Component arg0) {\n-               return true;\n-          }\n-\n-          public String getDescription() {\n-               return \"\";\n-          }\n-     }\n-\n-     public static class SimpleStringComparator implements StringComparator {\n-\n-          public boolean equals(String arg0, String arg1) {\n-               return arg0.equals(arg1);\n-          }\n-     }\n-}\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Tools.java","additions":0,"deletions":998,"binary":false,"changes":998,"status":"deleted"}]}