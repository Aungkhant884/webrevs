{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import com.sun.javatest.util.Crash;\n@@ -33,0 +34,1 @@\n+import java.util.Arrays;\n@@ -36,0 +38,4 @@\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -203,0 +209,6 @@\n+            if(this.crashOnly && result.getStatus().getType() == Status.FAILED && ! this.didCrash(td)){\n+                result = new TestResult(td, new Status(Status.PASSED, \"only a regular fail\"));\n+                if(result.getStatus().getType() == Status.PASSED){\n+                }\n+            }\n+\n@@ -220,0 +232,20 @@\n+    \/**\n+     * checks for the occurrence of hs_err_pid file that suggest that crash happened during execution\n+     **\/\n+    private boolean didCrash(TestDescription td){\n+        return !getCrashes(td).isEmpty();\n+    }\n+\n+    private List<Crash> getCrashes(TestDescription td){\n+        Pattern pattern = Pattern.compile(\"^hs_err_pid(\\\\d+)\\\\.log\");\n+        List<String> hs_errs = Arrays.stream(td.getDir().list()).filter(pattern.asPredicate()).toList();\n+        List<Crash> crashes = new ArrayList<>();\n+        for(String hs_err : hs_errs){\n+            Matcher m = pattern.matcher(hs_err);\n+            m.find();\n+            String pid = m.group(1);\n+            crashes.add(new Crash(td, hs_err, pid));\n+        }\n+        return crashes;\n+    }\n+\n","filename":"src\/com\/sun\/javatest\/DefaultTestRunner.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import com.sun.javatest.interview.BasicInterviewParameters;\n@@ -768,0 +769,4 @@\n+        if (params instanceof BasicInterviewParameters){\n+            BasicInterviewParameters basicInterviewParameters = (BasicInterviewParameters) params;\n+            r.setTestWideParameters(basicInterviewParameters.getTestWideParameters());\n+        }\n","filename":"src\/com\/sun\/javatest\/Harness.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1003,0 +1003,11 @@\n+\n+    \/**\n+     * An interface providing abstract access to a boolean\n+     * specifying whether the individual test runs should ignore non-crashing failures or not.\n+     * This is useful for testing fastdebug JVM builds. Could possibly accomodate other parameters\n+     * that should be applied to individual testruns.\n+     *\/\n+    interface TestWideParameters {\n+        boolean getCrashOnly();\n+        void setCrashOnly(boolean crashOnly);\n+    }\n","filename":"src\/com\/sun\/javatest\/Parameters.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -49,0 +49,4 @@\n+    \/**\n+     * TestWideParameters\n+     *\/\n+    protected boolean crashOnly = false;\n@@ -250,0 +254,4 @@\n+\n+    void setTestWideParameters(Parameters.TestWideParameters twp){\n+        this.crashOnly = twp.getCrashOnly();\n+    }\n","filename":"src\/com\/sun\/javatest\/TestRunner.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-public abstract class BasicInterviewParameters extends InterviewParameters {\n+public abstract class BasicInterviewParameters extends InterviewParameters implements Parameters.TestWideParameters {\n@@ -501,0 +501,11 @@\n+    \/**\n+     * Get an object which provides access to the parameters\n+     * that need to be applied to all the tests in the current run\n+     *\n+     * @return object which provides access to the parameters\n+     * that need to be applied to all the tests in the current run\n+     *\/\n+    public TestWideParameters getTestWideParameters(){\n+        return this;\n+    };\n+\n@@ -629,0 +640,12 @@\n+\n+    @Override\n+    public void setCrashOnly(boolean crashOnly) {\n+        this.crashOnly = crashOnly;\n+    }\n+\n+    @Override\n+    public boolean getCrashOnly() {\n+        return this.crashOnly;\n+    }\n+\n+    private boolean crashOnly;\n","filename":"src\/com\/sun\/javatest\/interview\/BasicInterviewParameters.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+package com.sun.javatest.util;\n+\n+import com.sun.javatest.TestDescription;\n+\n+import java.io.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\/**\n+ *  Basic class for information about a crash of jvm.\n+ *\/\n+public class Crash {\n+    private String pid;\n+    private List<String> lines;\n+\n+\n+    public Crash(TestDescription td, String hs_err, String pid) {\n+        File hs_err_File = new File(td.getDir(), hs_err);\n+        this.pid = pid;\n+        List <String> lines = new ArrayList<>();\n+        try (BufferedReader reader = new BufferedReader(new FileReader(hs_err_File))){\n+            String line;\n+            \/\/ Read all lines from the file\n+            while ((line = reader.readLine()) != null) {\n+                lines.add(line);\n+            }\n+        } catch (\n+                FileNotFoundException e) {\n+            throw new RuntimeException(e);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        this.lines = lines;\n+    }\n+\n+    public String getPid() {\n+        return pid;\n+    }\n+\n+    public List<String> getLines() {\n+        return lines;\n+    }\n+}\n","filename":"src\/com\/sun\/javatest\/util\/Crash.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"}]}