{"files":[{"patch":"@@ -30,1 +30,1 @@\n-build.number = b24\n+build.number = b27\n","filename":"build\/build.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -337,0 +337,1 @@\n+            writeAttr(\"lang\", i18n.getString(\"wp.html.lang\"));\n@@ -855,7 +856,1 @@\n-        boolean alpha = true;\n-        for (int i = 0; i < value.length() && alpha; i++) {\n-            alpha = Character.isLetter(value.charAt(i));\n-        }\n-        if (!alpha) {\n-            out.write(\"\\\"\");\n-        }\n+        out.write(\"\\\"\");\n@@ -863,3 +858,1 @@\n-        if (!alpha) {\n-            out.write(\"\\\"\");\n-        }\n+        out.write(\"\\\"\");\n","filename":"src\/com\/sun\/interview\/WizPrint.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -87,0 +87,1 @@\n+wp.html.lang=en\n","filename":"src\/com\/sun\/interview\/i18n.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,12 @@\n+package com.sun.javatest;\n+\n+import com.sun.javatest.interview.BasicInterviewParameters;\n+\n+public class CrashOnlyHarness extends Harness{\n+    @Override\n+    protected TestRunner prepareTestRunner(Parameters p) throws Fault, TestSuite.Fault{\n+        CrashOnlyTestRunner r = (CrashOnlyTestRunner)super.prepareTestRunner(p);\n+        r.setCrashOnly();\n+        return r;\n+    }\n+}\n","filename":"src\/com\/sun\/javatest\/CrashOnlyHarness.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"added"},{"patch":"@@ -0,0 +1,5 @@\n+package com.sun.javatest;\n+\n+public interface CrashOnlyParameters extends Parameters {\n+\n+}\n","filename":"src\/com\/sun\/javatest\/CrashOnlyParameters.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+package com.sun.javatest;\n+\n+import com.sun.javatest.util.BackupPolicy;\n+import com.sun.javatest.util.Crash;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+public class CrashOnlyTestRunner extends DefaultTestRunner{\n+\n+    private boolean crashOnly = false;\n+\n+    public void setCrashOnly(){\n+        crashOnly = true;\n+    }\n+    @Override\n+    protected TestResult runTestGiveResult(TestDescription td) {\n+        TestResult result = super.runTestGiveResult(td);\n+        if(this.crashOnly && result.getStatus().getType() == Status.FAILED && ! this.didCrash(td)){\n+            result = new com.sun.javatest.TestResult(td, new Status(Status.PASSED, \"only a regular fail\"));\n+        }\n+        return result;\n+    }\n+\n+    \/**\n+     * checks for the occurrence of hs_err_pid file that suggest that crash happened during execution\n+     **\/\n+    private boolean didCrash(TestDescription td){\n+        return !getCrashes(td).isEmpty();\n+    }\n+\n+    private List<Crash> getCrashes(TestDescription td){\n+        Pattern pattern = Pattern.compile(\"^hs_err_pid(\\\\d+)\\\\.log\");\n+        List<String> hs_errs = Arrays.stream(td.getDir().list()).filter(pattern.asPredicate()).toList();\n+        List<Crash> crashes = new ArrayList<>();\n+        for(String hs_err : hs_errs){\n+            String pid = pattern.matcher(hs_err).group(1);\n+            crashes.add(new Crash(td, hs_err, pid));\n+        }\n+        return crashes;\n+    }\n+}\n","filename":"src\/com\/sun\/javatest\/CrashOnlyTestRunner.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -160,1 +160,1 @@\n-    protected boolean runTest(TestDescription td) {\n+    protected TestResult runTestGiveResult(TestDescription td){\n@@ -217,1 +217,5 @@\n-        return result.getStatus().getType() == Status.PASSED;\n+        return result;\n+    }\n+\n+    protected boolean runTest(TestDescription td) {\n+        return runTestGiveResult(td).getStatus().getType() == Status.PASSED;\n","filename":"src\/com\/sun\/javatest\/DefaultTestRunner.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -688,4 +688,1 @@\n-    private boolean runTests(Parameters p, boolean zeroTestsOK)\n-            throws Fault, TestSuite.Fault {\n-\n-        boolean ok = true; \/\/ default return\/finished notification value\n+    protected TestRunner prepareTestRunner(Parameters p) throws Fault, TestSuite.Fault{\n@@ -775,0 +772,2 @@\n+        return r;\n+    }\n@@ -776,0 +775,12 @@\n+    \/**\n+     * This method is the one that does the work and runs the tests. Any parameters\n+     * should have been set up in the constructor.\n+     *\n+     * @return The result is `true' if and only if all tests passed.\n+     *\/\n+    \/\/ This methods notifies observers for startingTestRun and stoppingTestRun.\n+    \/\/ The caller should notify finishedTestRun when it is OK to run start again\n+    \/\/ (i.e. when worker has been reset to null.\n+    private boolean runTests(Parameters p, boolean zeroTestsOK)\n+            throws Fault, TestSuite.Fault {\n+        TestRunner r = prepareTestRunner(p);\n@@ -779,0 +790,1 @@\n+        boolean ok = true; \/\/ default return\/finished notification value\n","filename":"src\/com\/sun\/javatest\/Harness.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -620,0 +620,1 @@\n+                writer.writeLangAttr();\n@@ -627,0 +628,1 @@\n+                writer.writeAttr(HTMLWriterEx.SUMMARY, i18n.getString(\"tmpltProp.Configuration\"));\n@@ -725,0 +727,1 @@\n+                    writers[i].writeAttr(HTMLWriterEx.SUMMARY, i18n.getString(\"tmpltProp.Configuration\"));\n","filename":"src\/com\/sun\/javatest\/InterviewPropagator.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -154,4 +154,0 @@\n-    private static int min(int a, int b) {\n-        return a < b ? a : b;\n-    }\n-\n@@ -428,1 +424,1 @@\n-                    int millis = MILLIS_PER_SECOND * min(5, getRetryDelay());\n+                    int millis = MILLIS_PER_SECOND * Math.min(5, getRetryDelay());\n@@ -1105,1 +1101,1 @@\n-                classLoaderClass = (Class<? extends ClassLoader>) Class.forName(pkg + \".AgentClassLoader2\");\n+                classLoaderClass = Class.forName(pkg + \".AgentClassLoader2\").asSubclass(ClassLoader.class);\n@@ -1147,0 +1143,1 @@\n+    }\n@@ -1148,1 +1145,1 @@\n-        private class CommandExecutor {\n+        private static class CommandExecutor {\n@@ -1220,1 +1217,0 @@\n-    }\n","filename":"src\/com\/sun\/javatest\/agent\/Agent.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -92,0 +92,1 @@\n+        out.writeLangAttr();\n@@ -100,0 +101,1 @@\n+        out.writeAttr(HTMLWriterEx.SUMMARY, uif.getI18NString(\"smry.html.desc\"));\n","filename":"src\/com\/sun\/javatest\/audit\/SummaryPane.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -338,0 +338,1 @@\n+            out.writeLangAttr();\n","filename":"src\/com\/sun\/javatest\/exec\/MultiFormatPane.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -209,0 +209,1 @@\n+            out.writeLangAttr();\n@@ -229,0 +230,1 @@\n+            out.writeLangAttr();\n@@ -248,0 +250,1 @@\n+            out.writeAttr(HTMLWriterEx.SUMMARY, uif.getI18NString(\"test.out.script\"));\n@@ -261,0 +264,1 @@\n+                out.writeAttr(HTMLWriterEx.SUMMARY, uif.getI18NString(\"test.out.scriptArgs\"));\n@@ -280,0 +284,1 @@\n+                    out.writeAttr(HTMLWriterEx.SUMMARY, uif.getI18NString(\"test.out.smry.scriptLog.txt\"));\n@@ -303,0 +308,1 @@\n+                out.writeAttr(HTMLWriterEx.SUMMARY, uif.getI18NString(\"test.out.smry.sections.txt\"));\n@@ -338,0 +344,1 @@\n+            out.writeAttr(HTMLWriterEx.SUMMARY, uif.getI18NString(\"test.out.outcome.head\"));\n@@ -371,0 +378,1 @@\n+            out.writeLangAttr();\n@@ -385,0 +393,1 @@\n+            out.writeAttr(HTMLWriterEx.SUMMARY, uif.getI18NString(\"test.out.outputSummary.txt\"));\n@@ -453,0 +462,1 @@\n+            out.writeLangAttr();\n@@ -468,0 +478,5 @@\n+            if (subpanelTest.getSectionCount() > 0) {\n+                out.writeAttr(HTMLWriterEx.SUMMARY, uif.getI18NString(\"test.out.testResultForOutput.txt\"));\n+            } else {\n+                out.writeAttr(HTMLWriterEx.SUMMARY, uif.getI18NString(\"test.out.testResultNoOutput.txt\"));\n+            }\n","filename":"src\/com\/sun\/javatest\/exec\/TP_OutputSubpanel.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -389,0 +389,1 @@\n+            out.writeLangAttr();\n","filename":"src\/com\/sun\/javatest\/mrep\/BrowserPane.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -373,0 +373,1 @@\n+            out.writeLangAttr();\n","filename":"src\/com\/sun\/javatest\/mrep\/ReportTool.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -101,0 +101,1 @@\n+        repWriter.writeAttr(HTMLWriterEx.SUMMARY, i18n.getString(\"config.testSuite\"));\n@@ -159,0 +160,1 @@\n+        out.writeAttr(HTMLWriterEx.SUMMARY, i18n.getString(\"config.selectValue\"));\n@@ -292,0 +294,1 @@\n+        out.writeAttr(HTMLWriterEx.SUMMARY, i18n.getString(\"config.execValue\"));\n@@ -357,0 +360,1 @@\n+        out.writeAttr(HTMLWriterEx.SUMMARY, i18n.getString(\"config.locValue\"));\n@@ -412,0 +416,1 @@\n+        out.writeAttr(HTMLWriterEx.SUMMARY, i18n.getString(\"config.env.title\", envName));\n@@ -443,0 +448,1 @@\n+            out.writeAttr(HTMLWriterEx.SUMMARY, i18n.getString(\"config.excludedTests\"));\n","filename":"src\/com\/sun\/javatest\/report\/ConfigSection.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -284,0 +284,1 @@\n+        repWriter.writeAttr(HTMLWriterEx.SUMMARY, i18n.getString(\"kfl.files.list\"));\n@@ -437,0 +438,1 @@\n+        out.writeAttr(HTMLWriterEx.SUMMARY, i18n.getString(prefix + \".title\"));\n","filename":"src\/com\/sun\/javatest\/report\/KflSection.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -448,0 +448,1 @@\n+            out.writeLangAttr();\n","filename":"src\/com\/sun\/javatest\/report\/Report.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -79,0 +79,1 @@\n+        writeAttr(\"lang\", i18n.getString(\"html.lang\"));\n","filename":"src\/com\/sun\/javatest\/report\/ReportWriter.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -126,0 +126,1 @@\n+        repWriter.writeAttr(HTMLWriterEx.SUMMARY, getName());\n","filename":"src\/com\/sun\/javatest\/report\/ResultSection.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -220,0 +220,1 @@\n+        out.writeAttr(HTMLWriterEx.SUMMARY, i18n.getString(\"stats.keywordValue\"));\n","filename":"src\/com\/sun\/javatest\/report\/StatisticsSection.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -218,0 +218,1 @@\n+html.lang=en\n","filename":"src\/com\/sun\/javatest\/report\/i18n.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -980,0 +980,1 @@\n+                out.writeLangAttr();\n","filename":"src\/com\/sun\/javatest\/tool\/Desktop.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,29 @@\n+package com.sun.javatest.util;\n+\n+import com.sun.javatest.TestDescription;\n+\n+import java.io.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\/**\n+ *  Basic class for information about a crash of jvm.\n+ *\/\n+public class Crash {\n+    private String pid;\n+    private File file;\n+\n+\n+    public Crash(TestDescription td, String hs_err, String pid) {\n+        this.pid = pid;\n+        this.file = new File(td.getDir(), hs_err);\n+    }\n+\n+    public String getPid() {\n+        return pid;\n+    }\n+\n+    public File getFile() {\n+        return file;\n+    }\n+}\n","filename":"src\/com\/sun\/javatest\/util\/Crash.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -186,0 +186,4 @@\n+    \/**\n+     * The HTML \"summary\" attribute.\n+     *\/\n+    public static final String SUMMARY = \"summary\";\n@@ -378,2 +382,1 @@\n-     * The value will be quoted if necessary when writing it to the underlying\n-     * stream. No check is made that the attribute is valid for the current tag.\n+     * The value will be quoted. No check is made that the attribute is valid for the current tag.\n@@ -396,7 +399,1 @@\n-        boolean alpha = true;\n-        for (int i = 0; i < value.length() && alpha; i++) {\n-            alpha = Character.isLetter(value.charAt(i));\n-        }\n-        if (!alpha) {\n-            out.write(\"\\\"\");\n-        }\n+        out.write(\"\\\"\");\n@@ -404,3 +401,11 @@\n-        if (!alpha) {\n-            out.write(\"\\\"\");\n-        }\n+        out.write(\"\\\"\");\n+    }\n+\n+    \/**\n+     * Writes value of 'lang' attribute that is defined in resource bundle.\n+     * This method is expected to be called after opening (starting) the root HTML tag.\n+     *\n+     * @throws IOException if there is a problem writing to the underlying stream\n+     *\/\n+    public void writeLangAttr() throws IOException {\n+        writeAttr(\"lang\", i18n.getString(\"html.lang\"));\n","filename":"src\/com\/sun\/javatest\/util\/HTMLWriter.java","additions":17,"deletions":12,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+html.lang=en\n","filename":"src\/com\/sun\/javatest\/util\/i18n.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1260,0 +1260,12 @@\n+    \/**\n+     * Invokes the specified function and checks that it throws the expected exception instance\n+     *\/\n+    public static void assertThrows(Thrower thrower, Throwable expectedExceptionInstance) {\n+        try {\n+            thrower.throwThrowable();\n+            fail(\"The expected throwable \" + expectedExceptionInstance + \" was not thrown\");\n+        } catch (Throwable t) {\n+            assertSame(expectedExceptionInstance, t);\n+        }\n+    }\n+\n","filename":"src\/com\/sun\/tck\/lib\/Assert.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -4800,0 +4800,8 @@\n+    @Test(expected = AssertionFailedException.class)\n+    public void test_assertThrowsInstance_not_throws_01() {\n+        com.sun.tck.lib.Assert.assertThrows(\n+                () -> {\n+                }, new Throwable()\n+        );\n+    }\n+\n@@ -4853,0 +4861,80 @@\n+    @Test(expected = AssertionFailedException.class)\n+    public void test_assertThrowsInstance_wrongType_01() {\n+        com.sun.tck.lib.Assert.assertThrows(\n+                () -> {\n+                    throw new Throwable();\n+                }, new RuntimeException()\n+        );\n+    }\n+\n+    @Test(expected = AssertionFailedException.class)\n+    public void test_assertThrowsInstance_wrongType_01_01() {\n+        com.sun.tck.lib.Assert.assertThrows(\n+                () -> {\n+                    throw new RuntimeException();\n+                }, new Throwable()\n+        );\n+    }\n+\n+    @Test(expected = AssertionFailedException.class)\n+    public void test_assertThrowsInstance_wrongType_02() {\n+        com.sun.tck.lib.Assert.assertThrows(\n+                () -> {\n+                    throw new RuntimeException();\n+                }, new IllegalArgumentException()\n+        );\n+    }\n+\n+    @Test(expected = AssertionFailedException.class)\n+    public void test_assertThrowsInstance_wrongType_03() {\n+        com.sun.tck.lib.Assert.assertThrows(\n+                () -> {\n+                    throw new IllegalBlockingModeException();\n+                }, new Error()\n+        );\n+    }\n+\n+    @Test(expected = AssertionFailedException.class)\n+    public void test_assertThrowsInstance_sameType_notSameInstances() {\n+        com.sun.tck.lib.Assert.assertThrows(\n+                () -> {\n+                    throw new IllegalBlockingModeException();\n+                }, new IllegalBlockingModeException()\n+        );\n+    }\n+\n+    @Test(expected = AssertionFailedException.class)\n+    public void test_assertThrowsInstance_sameType_notEqInstances_01() {\n+        com.sun.tck.lib.Assert.assertThrows(\n+                () -> {\n+                    throw new MyThrowable(123);\n+                }, new MyThrowable(456)\n+        );\n+    }\n+\n+    class MyThrowable extends Throwable {\n+        int code;\n+        public MyThrowable(int code) {\n+            this.code = code;\n+        }\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (null == o || this.getClass() != o.getClass()) return false;\n+            final MyThrowable that = (MyThrowable) o;\n+            return this.code == that.code;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(this.code);\n+        }\n+    };\n+\n+    @Test(expected = AssertionFailedException.class)\n+    public void test_assertThrowsInstance_sameType_eqButNotSameInstances() {\n+        MyThrowable t1 = new MyThrowable(123);\n+        MyThrowable t2 = new MyThrowable(123);\n+        com.sun.tck.lib.Assert.assertThrows(() -> {throw t1;}, t2);\n+    }\n+\n@@ -4938,0 +5026,12 @@\n+    @Test\n+    public void test_assertThrowsInstance_OK_01() {\n+        Throwable throwable = new Throwable();\n+        com.sun.tck.lib.Assert.assertThrows(() -> {throw throwable;}, throwable);\n+    }\n+\n+    @Test\n+    public void test_assertThrowsInstance_OK_02() {\n+        MyThrowable myThrowable = new MyThrowable(23);\n+        com.sun.tck.lib.Assert.assertThrows(() -> {throw myThrowable;}, myThrowable);\n+    }\n+\n","filename":"unit-tests\/com\/oracle\/tck\/lib\/autd2\/unittests\/tgfported\/asserts\/TestPureAssert.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"modified"}]}