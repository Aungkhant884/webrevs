{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.util.Arrays;\n@@ -36,0 +37,1 @@\n+import java.util.regex.Pattern;\n@@ -203,0 +205,6 @@\n+            if(this.crashOnly && result.getStatus().getType() == Status.FAILED && ! this.didCrash(td)){\n+                result = new TestResult(td, new Status(Status.PASSED, \"only a regular fail\"));\n+                if(result.getStatus().getType() == Status.PASSED){\n+                }\n+            }\n+\n@@ -220,0 +228,8 @@\n+    \/**\n+     * checks for the occurrence of hs_err_pid file that suggest that crash happened during execution\n+     **\/\n+    private boolean didCrash(TestDescription td){\n+        Pattern pattern = Pattern.compile(\"^hs_err_.*\");\n+        return Arrays.stream(td.getDir().list()).anyMatch(pattern.asPredicate());\n+    }\n+\n","filename":"src\/com\/sun\/javatest\/DefaultTestRunner.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import com.sun.javatest.interview.BasicInterviewParameters;\n@@ -768,0 +769,4 @@\n+        if (params instanceof BasicInterviewParameters){\n+            BasicInterviewParameters basicInterviewParameters = (BasicInterviewParameters) params;\n+            r.setTestWideParameters(basicInterviewParameters.getTestWideParameters());\n+        }\n","filename":"src\/com\/sun\/javatest\/Harness.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1003,0 +1003,11 @@\n+\n+    \/**\n+     * An interface providing abstract access to a boolean\n+     * specifying whether the individual test runs should ignore non-crashing failures or not.\n+     * This is useful for testing fastdebug JVM builds. Could possibly accomodate other parameters\n+     * that should be applied to individual testruns.\n+     *\/\n+    interface TestWideParameters {\n+        boolean getCrashOnly();\n+        void setCrashOnly(boolean crashOnly);\n+    }\n","filename":"src\/com\/sun\/javatest\/Parameters.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.reflect.Parameter;\n@@ -49,0 +50,4 @@\n+    \/**\n+     * TestWideParameters\n+     *\/\n+    protected boolean crashOnly = false;\n@@ -250,0 +255,4 @@\n+\n+    void setTestWideParameters(Parameters.TestWideParameters twp){\n+        this.crashOnly = twp.getCrashOnly();\n+    }\n","filename":"src\/com\/sun\/javatest\/TestRunner.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-public abstract class BasicInterviewParameters extends InterviewParameters {\n+public abstract class BasicInterviewParameters extends InterviewParameters implements Parameters.TestWideParameters {\n@@ -501,0 +501,11 @@\n+    \/**\n+     * Get an object which provides access to the parameters\n+     * that need to be applied to all the tests in the current run\n+     *\n+     * @return object which provides access to the parameters\n+     * that need to be applied to all the tests in the current run\n+     *\/\n+    public TestWideParameters getTestWideParameters(){\n+        return this;\n+    };\n+\n@@ -629,0 +640,12 @@\n+\n+    @Override\n+    public void setCrashOnly(boolean crashOnly) {\n+        this.crashOnly = crashOnly;\n+    }\n+\n+    @Override\n+    public boolean getCrashOnly() {\n+        return this.crashOnly;\n+    }\n+\n+    private boolean crashOnly;\n","filename":"src\/com\/sun\/javatest\/interview\/BasicInterviewParameters.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"}]}