{"files":[{"patch":"@@ -703,0 +703,147 @@\n+    \/\/region Environment access\n+\n+    \/**\n+     * Looks up a parameter in the {@link #env test environment} and extracts a single value.\n+     * If a parameter is found, and it has a non-empty array of values, and the first of these values is not null\n+     * then that value is returned.\n+     * Otherwise, an exception is thrown.\n+     *\n+     * @param name parameter to look up.\n+     *\n+     * @return first of the values associated with the named parameter.\n+     *\n+     * @throws RuntimeException               if {@link TestEnvironment#lookup(String) lookup}\n+     *                                        throws {@link Fault}.\n+     * @throws ArrayIndexOutOfBoundsException if {@link TestEnvironment#lookup(String) lookup} returns an empty array.\n+     * @throws NullPointerException           if {@link TestEnvironment#lookup(String) lookup} returns null\n+     *                                        or if the first element of the returned array is null.\n+     *\/\n+    public String lookupOneOrFail(String name) {\n+        String s = lookupMultipleOrFail(name)[0];\n+\n+        if (s == null) {\n+            throw new NullPointerException(\"First value associated with parameter \" + name\n+                    + \" is unexpectedly null\");\n+        }\n+\n+        return s;\n+    }\n+\n+    \/**\n+     * Looks up a parameter in the {@link #env test environment}.\n+     * If a parameter is found, returns array of values associated with it.\n+     * Otherwise, an exception is thrown.\n+     *\n+     * @param name parameter to look up.\n+     *\n+     * @return array of values associated with the named parameter.\n+     *\n+     * @throws RuntimeException               if {@link TestEnvironment#lookup(String) lookup}\n+     *                                        throws {@link Fault}.\n+     * @throws NullPointerException           if {@link TestEnvironment#lookup(String) lookup} returns null.\n+     *\/\n+    public String[] lookupMultipleOrFail(String name) {\n+        String[] values;\n+\n+        try {\n+            values = lookup(name);\n+        } catch (Fault e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        if (values == null) {\n+            throw new NullPointerException(\"Array of values associated with parameter \" + name\n+                    + \" is unexpectedly null\");\n+        }\n+\n+        return values;\n+    }\n+\n+    \/**\n+     * Resolves a string using the {@link #env test environment} and joins the result into a single string.\n+     *\n+     * @param s string to resolve.\n+     *\n+     * @return string obtained by joining array of values produced by the string resolution with spaces.\n+     *\n+     * @throws RuntimeException if {@link TestEnvironment#resolve(String) resolve} throws {@link Fault}.\n+     *\/\n+    public String resolveAndJoinOrFail(String s) {\n+        return String.join(\" \", resolveMultipleOrFail(s));\n+    }\n+\n+    \/**\n+     * Resolves a string using the {@link #env test environment}.\n+     *\n+     * @param s string to resolve.\n+     *\n+     * @return array of values produced by the string resolution.\n+     *\n+     * @throws RuntimeException if {@link TestEnvironment#resolve(String) resolve} throws {@link Fault}.\n+     *\/\n+    public String[] resolveMultipleOrFail(String s) {\n+        try {\n+            return resolve(s);\n+        } catch (Fault e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    \/**\n+     * Looks up a string using the {@link #env test environment} and joins the result into a single string.\n+     *\n+     * @param s string to resolve.\n+     *\n+     * @return string obtained by joining array of values produced by the string lookup with spaces.\n+     *\n+     * @throws RuntimeException if {@link TestEnvironment#lookup(String) resolve} throws {@link Fault}.\n+     *\/\n+    public String lookupAndJoinOrFail(String s) {\n+        return String.join(\" \", lookupMultipleOrFail(s));\n+    }\n+\n+\n+    \/**\n+     * Safely looks up a parameter in the {@link #env test environment}.\n+     * If a parameter is found and has non-empty value\n+     * then first of the values in the array returned by {@link TestEnvironment#lookup(String)} is returned.\n+     * Otherwise, null is returned.\n+     *\n+     * @param name parameter to look up.\n+     *\n+     * @return first of the values associated with the named parameter, if any; otherwise, null.\n+     *\/\n+    public String lookupOneOrNull(String name) {\n+        try {\n+            String[] arr = lookup(name);\n+            return (arr == null || arr.length == 0)\n+                    ? null\n+                    : arr[0];\n+        } catch (Fault ignored) {\n+            return null;\n+        }\n+    }\n+\n+    \/**\n+     * Safely looks up a parameter in the {@link #env test environment}.\n+     * If a parameter is found and has non-empty value\n+     * then first of the values in the array returned by {@link TestEnvironment#lookup(String)} is returned.\n+     * Otherwise, empty String is returned.\n+     *\n+     * @param name parameter to look up.\n+     *\n+     * @return first of the values associated with the named parameter, if any; otherwise, empty String.\n+     *\/\n+    public String lookupOneOrEmpty(String name) {\n+        try {\n+            String[] arr = lookup(name);\n+            return (arr == null || arr.length == 0)\n+                    ? \"\"\n+                    : arr[0];\n+        } catch (Fault ignored) {\n+            return null;\n+        }\n+    }\n+\n+    \/\/endregion\n+\n","filename":"src\/com\/sun\/javatest\/TestEnvironment.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"modified"}]}