{"files":[{"patch":"@@ -0,0 +1,184 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.fail;\n+\n+import java.io.FileNotFoundException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.ComponentChooser;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JTableOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.util.NameComponentChooser;\n+\n+import jthtest.menu.Menu;\n+\n+public class Test_Config_Edit3 extends Config_New {\n+    \/\/ This is the 10th Sanity Test. It tests functionality of Edit Configuration.\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_Config_Edit3\");\n+    }\n+\n+    \/\/ function for filling current question.\n+    public void fillquestion(JDialogOperator config, int question_num) {\n+        if (question_num == 1) {\n+            return;\n+        } else if (question_num == 2) {\n+            ComponentChooser n = new NameComponentChooser(\"str.txt\");\n+            JTextFieldOperator test = new JTextFieldOperator(config, n);\n+            test.typeText(\"test_name\");\n+        } else if (question_num == 3) {\n+            ComponentChooser n = new NameComponentChooser(\"str.txt\");\n+            JTextFieldOperator test = new JTextFieldOperator(config, n);\n+            test.typeText(\"test_desc\");\n+        } else if (question_num == 4) {\n+            JTableOperator test_table = new JTableOperator(config);\n+            test_table.clickOnCell(0, 0);\n+        } else if (question_num == 5) {\n+            String os = System.getProperty(\"os.name\");\n+            System.out.println(os);\n+            boolean iswindows = false;\n+            if (os.startsWith(\"Windows\")) {\n+                iswindows = true;\n+            }\n+            ComponentChooser n = new NameComponentChooser(\"file.txt\");\n+            JTextFieldOperator test = new JTextFieldOperator(config, n);\n+            test.clearText();\n+            Path p = Paths.get(System.getenv(\"JAVA_HOME\"));\n+            Path p1;\n+            if (iswindows) {\n+                p1 = Paths.get(p.toString(), \"bin\", \"java.exe\");\n+            } else {\n+                p1 = Paths.get(p.toString(), \"bin\", \"java\");\n+            }\n+\n+            test.typeText(p1.toString());\n+        } else {\n+            fail(\"Failure due to wrong question number\");\n+        }\n+        return;\n+    }\n+\n+    \/\/ Function for checking title of current question.\n+    public boolean checkquestiontitle(JDialogOperator config, int question_num) {\n+        ComponentChooser n = new NameComponentChooser(\"qu.title\");\n+        JTextFieldOperator test = new JTextFieldOperator(config, n);\n+        \/\/ System.out.println(test.getText());\n+        if (question_num == 1) {\n+            if (test.getText().equals(\"Welcome!\")) {\n+                return true;\n+            }\n+        } else if (question_num == 2) {\n+            if (test.getText().equals(\"Configuration Name\")) {\n+                return true;\n+            }\n+        } else if (question_num == 3) {\n+            if (test.getText().equals(\"Description\")) {\n+                return true;\n+            }\n+        } else if (question_num == 4) {\n+            if (test.getText().equals(\"How to Run Tests\")) {\n+                return true;\n+            }\n+        } else if (question_num == 5) {\n+            if (test.getText().equals(\"Java Virtual Machine\")) {\n+                return true;\n+            }\n+        } else if (question_num == 6) {\n+            if (test.getText().equals(\"Test Verboseness\")) {\n+                return true;\n+            }\n+        } else {\n+            fail(\"Failure due to wrong question number\");\n+        }\n+        return false;\n+    }\n+\n+    @Test\n+    public void test10() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException,\n+            FileNotFoundException, InterruptedException {\n+\n+        \/\/ Opening work directory.\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+        Menu.getFile_Open_WorkDirectoryMenu(mainFrame).pushNoBlock();\n+\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.open.title\"));\n+        \/\/ Find edit box for file name\n+        String dirname0 = \"demowd\";\n+        new JTextFieldOperator(openDialog, \"\").enterText(dirname0); \/\/ for build.xml use \"demowd\" else use \"temp_dir\".\n+\n+        \/\/ Checking if open dialog box disappeared or not.\n+        if (openDialog.isVisible()) {\n+            fail(\"Failure because the dialog window 'open work directory' didnt close properly.\");\n+        }\n+\n+        \/\/ Pressing Configuration->Edit configuration.\n+        jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+        Menu.getConfigure_NewConfigurationMenu(mainFrame).push();\n+\n+        JDialogOperator configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+\n+        \/\/ Checking and filling configuration.\n+        for (int i = 1; i < 6; i++) {\n+            if (!checkquestiontitle(configEditorDialog, i)) {\n+                fail(\"Failure because question number \" + i + \" has mismatching titles.\");\n+            }\n+            fillquestion(configEditorDialog, i);\n+            pushNextConfigEditor(configEditorDialog);\n+        }\n+\n+        \/\/ Checking title of last question.\n+        if (!checkquestiontitle(configEditorDialog, 6)) {\n+            fail(\"Failure because question number 6 has mismatching titles.\");\n+        }\n+\n+        pushDoneConfigEditor(configEditorDialog);\n+\n+        JDialogOperator saveconfigdialog = new JDialogOperator(getExecResource(\"ce.save.title\"));\n+\n+        if (!saveconfigdialog.isVisible()) {\n+            fail(\"Failure due to save configuration file dialog didnt open properly.\");\n+        }\n+\n+        new JTextFieldOperator(saveconfigdialog, \"\").enterText(\"temp_config.jti\");\n+\n+        \/\/ Checking if configuration editor closed properly.\n+        if (configEditorDialog.isVisible()) {\n+            fail(\"Failure Because pressing done button didn't close the configuration editor window.\");\n+        }\n+\n+    }\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_Config_Edit3.java","additions":184,"deletions":0,"binary":false,"changes":184,"status":"added"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.fail;\n+\n+import java.io.FileNotFoundException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.ComponentChooser;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JTableOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.util.NameComponentChooser;\n+\n+import jthtest.menu.Menu;\n+\n+public class Test_Config_EditA1 extends Config_New {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_Config_Edit1A\");\n+    }\n+\n+    \/\/ function for filling current question.\n+    public void fillquestion(JDialogOperator config, int question_num) {\n+        if (question_num == 1) {\n+            return;\n+        } else if (question_num == 2) {\n+            ComponentChooser n = new NameComponentChooser(\"str.txt\");\n+            JTextFieldOperator test = new JTextFieldOperator(config, n);\n+            test.typeText(\"test_name\");\n+        } else if (question_num == 3) {\n+            ComponentChooser n = new NameComponentChooser(\"str.txt\");\n+            JTextFieldOperator test = new JTextFieldOperator(config, n);\n+            test.typeText(\"test_desc\");\n+        } else if (question_num == 4) {\n+            JTableOperator test_table = new JTableOperator(config);\n+            test_table.clickOnCell(0, 0);\n+        } else if (question_num == 5) {\n+            String os = System.getProperty(\"os.name\");\n+            System.out.println(os);\n+            boolean iswindows = false;\n+            if (os.startsWith(\"Windows\")) {\n+                iswindows = true;\n+            }\n+            ComponentChooser n = new NameComponentChooser(\"file.txt\");\n+            JTextFieldOperator test = new JTextFieldOperator(config, n);\n+            test.clearText();\n+            Path p = Paths.get(System.getenv(\"JAVA_HOME\"));\n+            Path p1;\n+            if (iswindows) {\n+                p1 = Paths.get(p.toString(), \"bin\", \"java.exe\");\n+            } else {\n+                p1 = Paths.get(p.toString(), \"bin\", \"java\");\n+            }\n+\n+            test.typeText(p1.toString());\n+        } else {\n+            fail(\"Failure due to wrong question number\");\n+        }\n+        return;\n+    }\n+\n+    \/\/ Function for checking title of current question.\n+    public boolean checkquestiontitle(JDialogOperator config, int question_num) {\n+        ComponentChooser n = new NameComponentChooser(\"qu.title\");\n+        JTextFieldOperator test = new JTextFieldOperator(config, n);\n+        \/\/ System.out.println(test.getText());\n+        if (question_num == 1) {\n+            if (test.getText().equals(\"Welcome!\")) {\n+                return true;\n+            }\n+        } else if (question_num == 2) {\n+            if (test.getText().equals(\"Configuration Name\")) {\n+                return true;\n+            }\n+        } else if (question_num == 3) {\n+            if (test.getText().equals(\"Description\")) {\n+                return true;\n+            }\n+        } else if (question_num == 4) {\n+            if (test.getText().equals(\"How to Run Tests\")) {\n+                return true;\n+            }\n+        } else if (question_num == 5) {\n+            if (test.getText().equals(\"Java Virtual Machine\")) {\n+                return true;\n+            }\n+        } else if (question_num == 6) {\n+            if (test.getText().equals(\"Test Verboseness\")) {\n+                return true;\n+            }\n+        } else {\n+            fail(\"Failure due to wrong question number\");\n+        }\n+        return false;\n+    }\n+\n+    @Test\n+    public void test8() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException,\n+            FileNotFoundException, InterruptedException {\n+\n+        \/\/ Opening work directory.\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+        Menu.getFile_Open_WorkDirectoryMenu(mainFrame).pushNoBlock();\n+\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.open.title\"));\n+        \/\/ Find edit box for file name\n+        String dirname0 = \"demowd\";\n+        new JTextFieldOperator(openDialog, \"\").enterText(dirname0);\n+\n+        \/\/ Checking if open dialog box disappeared or not.\n+        if (openDialog.isVisible()) {\n+            fail(\"Failure because the dialog window 'open work directory' didnt close properly.\");\n+        }\n+\n+        \/\/ Pressing Configuration->Edit configuration.\n+        jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+        Menu.getConfigure_NewConfigurationMenu(mainFrame).push();\n+\n+        JDialogOperator configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+\n+        \/\/ Checking and filling configuration.\n+        for (int i = 1; i < 6; i++) {\n+            if (!checkquestiontitle(configEditorDialog, i)) {\n+                fail(\"Failure because question number \" + i + \" has mismatching titles.\");\n+            }\n+            fillquestion(configEditorDialog, i);\n+            pushNextConfigEditor(configEditorDialog);\n+        }\n+\n+        if (!checkquestiontitle(configEditorDialog, 6)) {\n+            fail(\"Failure because question number 6 has mismatching titles.\");\n+        }\n+\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_Config_EditA1.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.fail;\n+\n+import java.io.FileNotFoundException;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.ComponentChooser;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JListOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.util.NameComponentChooser;\n+\n+import jthtest.menu.Menu;\n+\n+public class Test_Config_EditA2 extends Config_New {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_Config_Edit2A\");\n+    }\n+\n+    \/\/ Function for checking title of current question.\n+    public boolean checkquestiontitle(JDialogOperator config, int question_num) {\n+        ComponentChooser n = new NameComponentChooser(\"qu.title\");\n+        JTextFieldOperator test = new JTextFieldOperator(config, n);\n+        System.out.println(test.getText());\n+        if (question_num == 1) {\n+            if (test.getText().equals(\"Welcome!\")) {\n+                return true;\n+            }\n+        } else if (question_num == 2) {\n+            if (test.getText().equals(\"Configuration Name\")) {\n+                return true;\n+            }\n+        } else if (question_num == 3) {\n+            if (test.getText().equals(\"Description\")) {\n+                return true;\n+            }\n+        } else if (question_num == 4) {\n+            if (test.getText().equals(\"How to Run Tests\")) {\n+                return true;\n+            }\n+        } else if (question_num == 5) {\n+            if (test.getText().equals(\"Java Virtual Machine\")) {\n+                return true;\n+            }\n+        } else if (question_num == 6) {\n+            if (test.getText().equals(\"Test Verboseness\")) {\n+                return true;\n+            }\n+        } else {\n+            fail(\"Failure due to wrong question number\");\n+        }\n+        return false;\n+    }\n+\n+    @Test\n+    public void test9() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException,\n+            FileNotFoundException, InterruptedException {\n+        \/\/ Opening work directory.\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+\n+        Thread.sleep(1000);\n+        Menu.getFile_Open_WorkDirectoryMenu(mainFrame).push();\n+\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.open.title\"));\n+        \/\/ Find edit box for file name\n+        String dirname = \"demowd_config\";\n+        new JTextFieldOperator(openDialog, \"\").enterText(dirname); \/\/ for build.xml use \"demowd\" else use \"temp_dir\".\n+\n+        \/\/ Checking if open dialog box disappeared or not.\n+        if (openDialog.isVisible()) {\n+            fail(\"Failure because the dialog window 'open work directory' didnt close properly.\");\n+        }\n+\n+        \/\/ Pressing Configuration->Edit configuration.\n+        jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+        Menu.getConfigure_EditConfigurationMenu(mainFrame).push();\n+\n+        \/\/ Selecting question one from the list of questions.\n+        JDialogOperator configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+        JListOperator list = new JListOperator(configEditorDialog);\n+        list.selectItem(1);\n+\n+        \/\/ Checking and filling configuration.\n+        for (int i = 2; i < 6; i++) {\n+            if (!checkquestiontitle(configEditorDialog, i)) {\n+                fail(\"Failure because question number \" + i + \" has mismatching titles.\");\n+            }\n+            \/\/ fillquestion(configEditorDialog,i);\n+            pushNextConfigEditor(configEditorDialog);\n+        }\n+\n+        \/\/ Checking last title.\n+        if (!checkquestiontitle(configEditorDialog, 6)) {\n+            fail(\"Failure because question number 6 has mismatching titles.\");\n+        }\n+\n+        pushDoneConfigEditor(configEditorDialog);\n+\n+        \/\/ Checking if configuration editor closed properly.\n+        if (configEditorDialog.isVisible()) {\n+            fail(\"Failure Because pressing done button didn't close the configuration editor window.\");\n+        }\n+\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_Config_EditA2.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.fail;\n+\n+import java.io.FileNotFoundException;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.ComponentChooser;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JListOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.util.NameComponentChooser;\n+\n+import jthtest.menu.Menu;\n+\n+public class Test_Config_EditB1 extends Config_New {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_Config_Edit1B\");\n+    }\n+\n+    \/\/Function for checking title of current question.\n+    public boolean checkquestiontitle(JDialogOperator config,int question_num) {\n+        ComponentChooser n = new NameComponentChooser(\"qu.title\");\n+        JTextFieldOperator test = new JTextFieldOperator(config,n);\n+        System.out.println(test.getText());\n+        if(question_num==1) {\n+            if(test.getText().equals(\"Welcome!\")) {\n+                return true;\n+            }\n+        }\n+        else if(question_num==2) {\n+            if(test.getText().equals(\"Configuration Name\")) {\n+                return true;\n+            }\n+        }\n+        else if(question_num==3) {\n+            if(test.getText().equals(\"Description\")) {\n+                return true;\n+            }\n+        }\n+        else if(question_num==4) {\n+            if(test.getText().equals(\"How to Run Tests\")) {\n+                return true;\n+            }\n+        }\n+        else if(question_num==5) {\n+            if(test.getText().equals(\"Java Virtual Machine\")) {\n+                return true;\n+            }\n+        }\n+        else if(question_num==6) {\n+            if(test.getText().equals(\"Test Verboseness\")) {\n+                return true;\n+            }\n+        }\n+        else {\n+            fail(\"Failure due to wrong question number\");\n+        }\n+        return false;\n+    }\n+\n+    @Test\n+    public void test8() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException , FileNotFoundException, InterruptedException{\n+        \/\/Opening work directory.\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+\n+        Thread.sleep(1000);\n+        Menu.getFile_Open_WorkDirectoryMenu(mainFrame).push();\n+\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.open.title\"));\n+        \/\/Find edit box for file name\n+        String dirname=\"demowd_config\";\n+        new JTextFieldOperator(openDialog, \"\").enterText(dirname);\n+\n+        \/\/Checking if open dialog box disappeared or not.\n+        if(openDialog.isVisible()) {\n+            fail(\"Failure because the dialog window 'open work directory' didnt close properly.\");\n+        }\n+\n+        \/\/Pressing Configuration->Edit configuration.\n+        jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+        Menu.getConfigure_EditConfigurationMenu(mainFrame).push();\n+\n+        \/\/Selecting question one from the list of questions.\n+        JDialogOperator configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+        JListOperator list = new  JListOperator(configEditorDialog);\n+        list.selectItem(1);\n+\n+        \/\/Checking and filling configuration.\n+        for(int i=2;i<6;i++) {\n+            if(!checkquestiontitle(configEditorDialog,i)) {\n+                fail(\"Failure because question number \"+i+\" has mismatching titles.\");\n+            }\n+            \/\/fillquestion(configEditorDialog,i);\n+            pushNextConfigEditor(configEditorDialog);\n+        }\n+\n+        if(!checkquestiontitle(configEditorDialog,6)) {\n+            fail(\"Failure because question number 6 has mismatching titles.\");\n+        }\n+\n+\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_Config_EditB1.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.fail;\n+\n+import java.io.FileNotFoundException;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.ComponentChooser;\n+import org.netbeans.jemmy.operators.JButtonOperator;\n+import org.netbeans.jemmy.operators.JCheckBoxOperator;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JListOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.util.NameComponentChooser;\n+\n+import jthtest.menu.Menu;\n+\n+public class Test_Config_EditB2 extends Config_New {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_Config_Edit2B\");\n+    }\n+\n+    \/\/ Function for checking title of current question.\n+    public boolean checkquestiontitle(JDialogOperator config, int question_num) {\n+        ComponentChooser n = new NameComponentChooser(\"qu.title\");\n+        JTextFieldOperator test = new JTextFieldOperator(config, n);\n+        System.out.println(test.getText());\n+        if (question_num == 1) {\n+            if (test.getText().equals(\"Welcome!\")) {\n+                return true;\n+            }\n+        } else if (question_num == 2) {\n+            if (test.getText().equals(\"Configuration Name\")) {\n+                return true;\n+            }\n+        } else if (question_num == 3) {\n+            if (test.getText().equals(\"Description\")) {\n+                return true;\n+            }\n+        } else if (question_num == 4) {\n+            if (test.getText().equals(\"How to Run Tests\")) {\n+                return true;\n+            }\n+        } else if (question_num == 5) {\n+            if (test.getText().equals(\"Java Virtual Machine\")) {\n+                return true;\n+            }\n+        } else if (question_num == 6) {\n+            if (test.getText().equals(\"Test Verboseness\")) {\n+                return true;\n+            }\n+        } else {\n+            fail(\"Failure due to wrong question number\");\n+        }\n+        return false;\n+    }\n+\n+    @Test\n+    public void test8() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException,\n+            FileNotFoundException, InterruptedException {\n+        \/\/ Opening work directory.\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+        Menu.getFile_Open_WorkDirectoryMenu(mainFrame).pushNoBlock();\n+\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.open.title\"));\n+        \/\/ Find edit box for file name\n+        String dirname = \"demowd_config\";\n+        new JTextFieldOperator(openDialog, \"\").enterText(dirname);\n+\n+        \/\/ Checking if open dialog box disappeared or not.\n+        if (openDialog.isVisible()) {\n+            fail(\"Failure because the dialog window 'open work directory' didnt close properly.\");\n+        }\n+\n+        \/\/ Pressing Configuration->Edit configuration.\n+        jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+        Menu.getConfigure_LoadConfigurationMenu(mainFrame).pushNoBlock();\n+\n+        \/\/ Selecting load configuration dialog box.\n+        JDialogOperator loadConfigDialog = new JDialogOperator(getExecResource(\"wdc.loadconfig\"));\n+\n+        \/\/ Pushing \"Browse\" Button for opening config finder dialog box.\n+        \/\/ Selecting Configuration finder dialog box and further Text area inside it.\n+        JCheckBoxOperator launch_config_checkbox = new JCheckBoxOperator(loadConfigDialog);\n+\n+        launch_config_checkbox.clickMouse();\n+        new JButtonOperator(loadConfigDialog, \"Browse\").push();\n+        JDialogOperator loadConfigfinderDialog = new JDialogOperator(getExecResource(\"wdc.configchoosertitle\"));\n+        JTextFieldOperator browsetext = new JTextFieldOperator(loadConfigfinderDialog);\n+        browsetext.clearText();\n+        browsetext.enterText(\"democonfig.jti\");\n+\n+        \/\/ Pressing load to load the selected file.\n+        JButtonOperator loadbutton = new JButtonOperator(loadConfigDialog, getExecResource(\"wdc.load.btn\"));\n+        loadbutton.push();\n+\n+        \/\/ Selecting question one from the list of questions.\n+        JDialogOperator configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+        JListOperator list = new JListOperator(configEditorDialog);\n+        list.selectItem(1);\n+\n+        \/\/ Checking and filling configuration.\n+        for (int i = 2; i < 6; i++) {\n+            if (!checkquestiontitle(configEditorDialog, i)) {\n+                fail(\"Failure because question number \" + i + \" has mismatching titles.\");\n+            }\n+            \/\/ fillquestion(configEditorDialog,i);\n+            pushNextConfigEditor(configEditorDialog);\n+        }\n+\n+        pushDoneConfigEditor(configEditorDialog);\n+\n+        \/\/ Checking if configuration editor closed properly.\n+        if (configEditorDialog.isVisible()) {\n+            fail(\"Failure Because pressing done button didn't close the configuration editor window.\");\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_Config_EditB2.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.fail;\n+\n+import java.io.FileNotFoundException;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.ComponentChooser;\n+import org.netbeans.jemmy.operators.JButtonOperator;\n+import org.netbeans.jemmy.operators.JCheckBoxOperator;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JListOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.util.NameComponentChooser;\n+\n+import jthtest.menu.Menu;\n+\n+public class Test_Config_EditC1 extends Config_New {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_Config_Edit1C\");\n+    }\n+\n+    \/\/ Function for checking title of current question.\n+    public boolean checkquestiontitle(JDialogOperator config, int question_num) {\n+        ComponentChooser n = new NameComponentChooser(\"qu.title\");\n+        JTextFieldOperator test = new JTextFieldOperator(config, n);\n+        \/\/ System.out.println(test.getText());\n+        if (question_num == 1) {\n+            if (test.getText().equals(\"Welcome!\")) {\n+                return true;\n+            }\n+        } else if (question_num == 2) {\n+            if (test.getText().equals(\"Configuration Name\")) {\n+                return true;\n+            }\n+        } else if (question_num == 3) {\n+            if (test.getText().equals(\"Description\")) {\n+                return true;\n+            }\n+        } else if (question_num == 4) {\n+            if (test.getText().equals(\"How to Run Tests\")) {\n+                return true;\n+            }\n+        } else if (question_num == 5) {\n+            if (test.getText().equals(\"Java Virtual Machine\")) {\n+                return true;\n+            }\n+        } else if (question_num == 6) {\n+            if (test.getText().equals(\"Test Verboseness\")) {\n+                return true;\n+            }\n+        } else {\n+            fail(\"Failure due to wrong question number\");\n+        }\n+        return false;\n+    }\n+\n+    @Test\n+    public void test8() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException,\n+            FileNotFoundException, InterruptedException {\n+\n+        \/\/ Opening work directory.\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+        Menu.getFile_Open_WorkDirectoryMenu(mainFrame).pushNoBlock();\n+\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.open.title\"));\n+        \/\/ Find edit box for file name\n+        String dirname = \"demowd\";\n+        new JTextFieldOperator(openDialog, \"\").enterText(dirname);\n+\n+        \/\/ Checking if open dialog box disappeared or not.\n+        if (openDialog.isVisible()) {\n+            fail(\"Failure because the dialog window 'open work directory' didnt close properly.\");\n+        }\n+\n+        \/\/ Pressing Configuration->Edit configuration.\n+        jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+        Menu.getConfigure_LoadConfigurationMenu(mainFrame).pushNoBlock();\n+\n+        \/\/ Selecting load configuration dialog box.\n+        JDialogOperator loadConfigDialog = new JDialogOperator(getExecResource(\"wdc.loadconfig\"));\n+\n+        \/\/ Pushing \"Browse\" Button for opening config finder dialog box.\n+        \/\/ Selecting Configuration finder dialog box and further Text area inside it.\n+        JCheckBoxOperator launch_config_checkbox = new JCheckBoxOperator(loadConfigDialog);\n+\n+        launch_config_checkbox.clickMouse();\n+        new JButtonOperator(loadConfigDialog, \"Browse\").push();\n+        JDialogOperator loadConfigfinderDialog = new JDialogOperator(getExecResource(\"wdc.configchoosertitle\"));\n+        JTextFieldOperator browsetext = new JTextFieldOperator(loadConfigfinderDialog);\n+        browsetext.clearText();\n+        browsetext.enterText(\"democonfig.jti\");\n+\n+        \/\/ Pressing load to load the selected file.\n+        JButtonOperator loadbutton = new JButtonOperator(loadConfigDialog, getExecResource(\"wdc.load.btn\"));\n+        loadbutton.push();\n+\n+        \/\/ Selecting question one from the list of questions.\n+        JDialogOperator configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+        JListOperator list = new JListOperator(configEditorDialog);\n+        list.selectItem(1);\n+\n+        \/\/ Checking and filling configuration.\n+        for (int i = 2; i < 6; i++) {\n+            if (!checkquestiontitle(configEditorDialog, i)) {\n+                fail(\"Failure because question number \" + i + \" has mismatching titles.\");\n+            }\n+            \/\/ fillquestion(configEditorDialog,i);\n+            pushNextConfigEditor(configEditorDialog);\n+        }\n+\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_Config_EditC1.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.io.FileNotFoundException;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.ComponentChooser;\n+import org.netbeans.jemmy.operators.JButtonOperator;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.util.NameComponentChooser;\n+\n+import jthtest.menu.Menu;\n+\n+public class Test_Config_Load1 extends Config_New {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_Config_Load1\");\n+    }\n+\n+    @Test\n+    public void test7()\n+            throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException, FileNotFoundException {\n+\n+        \/\/ Opening work directory.\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+        Menu.getFile_Open_WorkDirectoryMenu(mainFrame).pushNoBlock();\n+\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.open.title\"));\n+        \/\/ Find edit box for file name\n+        String dirname = \"demowd\";\n+        new JTextFieldOperator(openDialog, \"\").enterText(dirname);\n+\n+        if (openDialog.isVisible()) {\n+            fail(\"Failure because the dialog window 'open work directory' didnt close properly.\");\n+        }\n+\n+        jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+        Menu.getConfigure_LoadConfigurationMenu(mainFrame).pushNoBlock();\n+\n+        \/\/ Selecting load configuration dialog box.\n+        JDialogOperator loadConfigDialog = new JDialogOperator(getExecResource(\"wdc.loadconfig\"));\n+\n+        \/\/ Pushing \"Browse\" Button for opening config finder dialog box.\n+        new JButtonOperator(loadConfigDialog, \"Browse\").push();\n+\n+        \/\/ Selecting Configuration finder dialog box and further Text area inside it.\n+        JDialogOperator loadConfigfinderDialog = new JDialogOperator(getExecResource(\"wdc.configchoosertitle\"));\n+        JTextFieldOperator browsetext = new JTextFieldOperator(loadConfigfinderDialog);\n+\n+        \/\/ Entering the required configuration file name.\n+        browsetext.clearText();\n+        browsetext.enterText(\"democonfig.jti\");\n+\n+        \/\/ Pressing load to load the selected file.\n+        JButtonOperator loadbutton = new JButtonOperator(loadConfigDialog, getExecResource(\"wdc.load.btn\"));\n+        loadbutton.push();\n+\n+        \/\/ asserting if the name of the config file shown is same as the one we loaded.\n+        ComponentChooser n = new NameComponentChooser(\"bcc.Configuration\");\n+        JTextFieldOperator current_config_text = new JTextFieldOperator(mainFrame, n);\n+\n+        assertEquals(\"Failure because current configuration name mismatches. Expected: democonfig.jti Actual: \"\n+                + current_config_text.getText() + \".\", current_config_text.getText(), \"democonfig.jti\");\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_Config_Load1.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JListOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+\n+import javax.swing.JLabel;\n+\n+import jthtest.menu.Menu;\n+\n+public class Test_Config_New1 extends Open_Test_Suite {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_Config_New1\");\n+    }\n+\n+    @Test\n+    public void testOpenTestSuite1() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException {\n+        \/\/ Opening a work directory which already have configuration file in it.\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+        Menu.getFile_Open_WorkDirectoryMenu(mainFrame).pushNoBlock();\n+\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.open.title\"));\n+        \/\/ Find edit box for file name\n+        String dirname = \"demowd_config\";\n+        new JTextFieldOperator(openDialog, \"\").enterText(dirname);\n+\n+        waitForWDLoading(mainFrame, WDLoadingResult.SOME_NOTRUN);\n+\n+        \/\/ Clicking on new configuration in configure menu.\n+        jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+        Menu.getConfigure_NewConfigurationMenu(mainFrame).pushNoBlock();\n+\n+        \/\/ Selecting the dialog box and finding the names of two of the last list items.\n+        JDialogOperator configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+        JListOperator list = new JListOperator(configEditorDialog);\n+        \/\/ int last_index=list.getMaxSelectionIndex();\n+        String lastlistitem = ((JLabel) list.getRenderedComponent(list.getModel().getSize() - 1)).getText();\n+        String secondlastlistitem = ((JLabel) list.getRenderedComponent(list.getModel().getSize() - 2)).getText();\n+\n+        \/\/ Comparing the string fetched with expected strings.\n+        assertEquals(\"Last item was Expected: 'More...' But was: \" + lastlistitem, \" More...\", lastlistitem);\n+        assertEquals(\"Second Last item was Expected: 'Configuration Name' But was: \" + secondlastlistitem,\n+                \"   Configuration Name\", secondlastlistitem);\n+\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_Config_New1.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JListOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+\n+import javax.swing.JLabel;\n+\n+import jthtest.menu.Menu;\n+\n+public class Test_Config_New2 extends Open_Test_Suite {\n+\/\/This is the 6th Sanity Test. It checks that an empty configuration should appear when new configuration is pressed in a newly created work directory.\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_Config_New2\");\n+    }\n+\n+    @Test\n+    public void testOpenTestSuite1() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException {\n+\n+        \/\/ Opening a test suite and creating work directory.\n+        openTestSuite(mainFrame);\n+        waitForWDLoading(mainFrame, WDLoadingResult.SOME_NOTRUN);\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+        Menu.getFile_CreateWorkDirectoryMenu(mainFrame).pushNoBlock();\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.new.title\"));\n+        new JTextFieldOperator(openDialog, \"\").enterText(\"temp_dir_for_config2\");\n+\n+        \/\/ Checking if the dialog box closed properly or not.\n+        if (openDialog.isVisible()) {\n+            fail(\"Failed because Create Dialog is still open.\");\n+        }\n+\n+        waitForWDLoading(mainFrame, WDLoadingResult.SOME_NOTRUN);\n+\n+        \/\/ clicking \"new configuration and checking if an empty configuration opens or\n+        \/\/ not.\n+        jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+\n+        Menu.getConfigure_NewConfigurationMenu(mainFrame).pushNoBlock();\n+\n+        \/\/ Selecting the dialog box and finding the names of two of the last list items.\n+        JDialogOperator configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+        JListOperator list = new JListOperator(configEditorDialog);\n+        \/\/ int last_index=list.getMaxSelectionIndex();\n+        String lastlistitem = ((JLabel) list.getRenderedComponent(list.getModel().getSize() - 1)).getText();\n+        String secondlastlistitem = ((JLabel) list.getRenderedComponent(list.getModel().getSize() - 2)).getText();\n+\n+        \/\/ Comparing the string fetched with expected strings.\n+        assertEquals(\"Last item was Expected: 'More...' But was: \" + lastlistitem, \" More...\", lastlistitem);\n+        assertEquals(\"Second Last item was Expected: 'Configuration Name' But was: \" + secondlastlistitem,\n+                \"   Configuration Name\", secondlastlistitem);\n+\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_Config_New2.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -0,0 +1,274 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.fail;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.ComponentChooser;\n+import org.netbeans.jemmy.operators.JButtonOperator;\n+import org.netbeans.jemmy.operators.JCheckBoxOperator;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JListOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JTableOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.util.NameComponentChooser;\n+\n+import jthtest.menu.Menu;\n+\n+public class Test_Config_Save1 extends Config_New {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_Config_Save1\");\n+    }\n+\n+    \/\/ Below fill question function is modified for this test case please be careful\n+    \/\/ while using it.\n+    public void fillquestion(JDialogOperator config, int question_num) throws FileNotFoundException {\n+        if (question_num == 1) {\n+            return;\n+        } else if (question_num == 2) {\n+            ComponentChooser n = new NameComponentChooser(\"str.txt\");\n+            JTextFieldOperator test = new JTextFieldOperator(config, n);\n+            test.clearText();\n+            test.typeText(\"test11_name\");\n+        } else if (question_num == 3) {\n+            ComponentChooser n = new NameComponentChooser(\"str.txt\");\n+            JTextFieldOperator test = new JTextFieldOperator(config, n);\n+            test.clearText();\n+            test.typeText(\"test11_desc\");\n+        } else if (question_num == 4) {\n+            JTableOperator test_table = new JTableOperator(config);\n+            test_table.clickOnCell(0, 0);\n+        } else if (question_num == 5) {\n+            String os = System.getProperty(\"os.name\");\n+            System.out.println(os);\n+            boolean iswindows = false;\n+            if (os.startsWith(\"Windows\")) {\n+                iswindows = true;\n+            }\n+            ComponentChooser n = new NameComponentChooser(\"file.txt\");\n+            JTextFieldOperator test = new JTextFieldOperator(config, n);\n+            test.clearText();\n+            Path p = Paths.get(System.getenv(\"JAVA_HOME\"));\n+            Path p1;\n+            if (iswindows) {\n+                p1 = Paths.get(p.toString(), \"bin\", \"java.exe\");\n+            } else {\n+                p1 = Paths.get(p.toString(), \"bin\", \"java\");\n+            }\n+\n+            test.typeText(p1.toString());\n+        } else if (question_num == 6) {\n+            JTableOperator test_table = new JTableOperator(config);\n+            test_table.clickOnCell(1, 0);\n+            \/\/ Dumper.dumpAll( \"C:\\\\Users\\\\arpit\\\\Desktop\\\\test11_2.txt\" );\n+        } else {\n+            fail(\"Failure due to wrong question number\");\n+        }\n+        return;\n+    }\n+\n+    \/\/ Function for checking title of current question.\n+    public boolean checkquestiontitle(JDialogOperator config, int question_num) {\n+        ComponentChooser n = new NameComponentChooser(\"qu.title\");\n+        JTextFieldOperator test = new JTextFieldOperator(config, n);\n+        \/\/ System.out.println(test.getText());\n+        if (question_num == 1) {\n+            if (test.getText().equals(\"Welcome!\")) {\n+                return true;\n+            }\n+        } else if (question_num == 2) {\n+            if (test.getText().equals(\"Configuration Name\")) {\n+                return true;\n+            }\n+        } else if (question_num == 3) {\n+            if (test.getText().equals(\"Description\")) {\n+                return true;\n+            }\n+        } else if (question_num == 4) {\n+            if (test.getText().equals(\"How to Run Tests\")) {\n+                return true;\n+            }\n+        } else if (question_num == 5) {\n+            if (test.getText().equals(\"Java Virtual Machine\")) {\n+                return true;\n+            }\n+        } else if (question_num == 6) {\n+            if (test.getText().equals(\"Test Verboseness\")) {\n+                return true;\n+            }\n+        } else {\n+            fail(\"Failure due to wrong question number\");\n+        }\n+        return false;\n+    }\n+\n+    \/\/ Function to check the response in the current question.\n+    public boolean checkresponse(JDialogOperator config, int question_num) throws FileNotFoundException, IOException {\n+        if (question_num == 1) {\n+            return true;\n+        } else if (question_num == 2) {\n+            ComponentChooser n = new NameComponentChooser(\"str.txt\");\n+            JTextFieldOperator test = new JTextFieldOperator(config, n);\n+            if (test.getText().equals(\"test11_name\")) {\n+                return true;\n+            }\n+        } else if (question_num == 3) {\n+            ComponentChooser n = new NameComponentChooser(\"str.txt\");\n+            JTextFieldOperator test = new JTextFieldOperator(config, n);\n+            \/\/ System.out.println(test.getText());\n+            if (test.getText().equals(\"test11_desc\")) {\n+                return true;\n+            }\n+        } else if (question_num == 4 || question_num == 5) {\n+            return true;\n+        } else if (question_num == 6) {\n+            \/\/ read 19th line as it contains information on test verbose question.\n+            String s = Files.readAllLines(Paths.get(\"democonfig.jti\")).get(19);\n+            \/\/ split the string at = sign.\n+            String[] tokens = s.split(\"=\");\n+            \/\/ compare with string you set in the first half of the code.\n+            if (tokens[1].equals(\"medium\")) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Test\n+    public void test11() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException,\n+            FileNotFoundException, InterruptedException, IOException {\n+        \/\/ Opening work directory.\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+        Menu.getFile_Open_WorkDirectoryMenu(mainFrame).pushNoBlock();\n+\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.open.title\"));\n+        \/\/ Find edit box for file name\n+        String dirname = \"demowd\";\n+        new JTextFieldOperator(openDialog, \"\").enterText(dirname); \/\/ for build.xml use \"demowd\" else use \"temp_dir\".\n+\n+        \/\/ Checking if open dialog box disappeared or not.\n+        if (openDialog.isVisible()) {\n+            fail(\"Failure because the dialog window 'open work directory' didnt close properly.\");\n+        }\n+\n+        jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+        Menu.getConfigure_LoadConfigurationMenu(mainFrame).pushNoBlock();\n+\n+        \/\/ Selecting load configuration dialog box.\n+        JDialogOperator loadConfigDialog = new JDialogOperator(getExecResource(\"wdc.loadconfig\"));\n+\n+        \/\/ Pushing \"Browse\" Button for opening config finder dialog box.\n+\n+        \/\/ Selecting Configuration finder dialog box and further Text area inside it.\n+        JCheckBoxOperator launch_config_checkbox = new JCheckBoxOperator(loadConfigDialog);\n+\n+        launch_config_checkbox.clickMouse();\n+        new JButtonOperator(loadConfigDialog, \"Browse\").push();\n+        JDialogOperator loadConfigfinderDialog = new JDialogOperator(getExecResource(\"wdc.configchoosertitle\"));\n+        JTextFieldOperator browsetext = new JTextFieldOperator(loadConfigfinderDialog);\n+        browsetext.clearText();\n+        browsetext.enterText(\"democonfig.jti\");\n+\n+        \/\/ Pressing load to load the selected file.\n+        JButtonOperator loadbutton = new JButtonOperator(loadConfigDialog, getExecResource(\"wdc.load.btn\"));\n+        loadbutton.push();\n+\n+        \/\/ Selecting question one from the list of questions.\n+        JDialogOperator configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+        JListOperator list = new JListOperator(configEditorDialog);\n+        list.selectItem(1);\n+\n+        \/\/ Checking and filling configuration.\n+        for (int i = 2; i < 7; i++) {\n+            if (!checkquestiontitle(configEditorDialog, i)) {\n+                fail(\"Failure because question number \" + i + \" has mismatching titles.\");\n+            }\n+            fillquestion(configEditorDialog, i);\n+            pushNextConfigEditor(configEditorDialog);\n+        }\n+\n+        \/\/ Saving current changes.\n+        JMenuBarOperator jmbo1 = new JMenuBarOperator(configEditorDialog);\n+        jmbo1.pushMenuNoBlock(\"File\", \"\/\");\n+        jmbo1.pushMenuNoBlock(\"File\/Save\", \"\/\");\n+\n+        pushDoneConfigEditor(configEditorDialog);\n+\n+        if (configEditorDialog.isVisible()) {\n+            fail(\"Failure Because pressing done button didn't close the configuration editor window.\");\n+        }\n+\n+        jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+        Menu.getConfigure_LoadConfigurationMenu(mainFrame).pushNoBlock();\n+\n+        \/\/ Selecting load configuration dialog box.\n+        loadConfigDialog = new JDialogOperator(getExecResource(\"wdc.loadconfig\"));\n+\n+        \/\/ Pushing \"Browse\" Button for opening config finder dialog box.\n+\n+        \/\/ Selecting Configuration finder dialog box and further Text area inside it.\n+        launch_config_checkbox = new JCheckBoxOperator(loadConfigDialog);\n+\n+        launch_config_checkbox.clickMouse();\n+        new JButtonOperator(loadConfigDialog, \"Browse\").push();\n+        loadConfigfinderDialog = new JDialogOperator(getExecResource(\"wdc.configchoosertitle\"));\n+        browsetext = new JTextFieldOperator(loadConfigfinderDialog);\n+        browsetext.clearText();\n+        browsetext.enterText(\"democonfig.jti\");\n+\n+        \/\/ Pressing load to load the selected file.\n+        loadbutton = new JButtonOperator(loadConfigDialog, getExecResource(\"wdc.load.btn\"));\n+        loadbutton.push();\n+\n+        \/\/ Selecting question one from the list of questions.\n+        configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+        list = new JListOperator(configEditorDialog);\n+        list.selectItem(1);\n+\n+        \/\/ Checking responses after reloading the config file.\n+        for (int i = 2; i < 7; i++) {\n+            if (!checkresponse(configEditorDialog, i)) {\n+                fail(\"Wrong response on question number \" + i + \".\");\n+            }\n+            pushNextConfigEditor(configEditorDialog);\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_Config_Save1.java","additions":274,"deletions":0,"binary":false,"changes":274,"status":"added"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JTabbedPaneOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+\n+import jthtest.menu.Menu;\n+\n+public class Test_Create_Work_Dir1 extends Create_Work_Dir {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_Create_Work_Dir1\");\n+    }\n+\n+    @Test\n+    public void testCreate_Work_Dir1() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException {\n+\n+        \/\/ Opening a test suite using previous test.\n+        openTestSuite(mainFrame);\n+        \/\/ Find the \"DemoTS\" tab\n+        waitForWDLoading(mainFrame, WDLoadingResult.SOME_NOTRUN);\n+\n+        \/\/ Clicking on the File menu option and then selecting create work directory\n+        \/\/ option.\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+        Menu.getFile_CreateWorkDirectoryMenu(mainFrame).pushNoBlock();\n+\n+        \/\/ Selecting the \"Create work directory\" dialog box and then entering \"temp_dir\"\n+        \/\/ in the text field.\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.new.title\"));\n+        \/\/ Find edit box for file name\n+        new JTextFieldOperator(openDialog, \"\").enterText(\"temp_dir\");\n+\n+        \/\/ Check if dialog box closed properly.\n+        if (openDialog.isVisible()) {\n+            fail(\"Failed because Create Dialog is still open.\");\n+        }\n+\n+        \/\/ Wait for the Test suite to load properly.\n+        waitForWDLoading(mainFrame, WDLoadingResult.SOME_NOTRUN);\n+        new JTabbedPaneOperator(mainFrame, TAB_CAPTION);\n+\n+        \/\/ verifying path of the newly created work directory.\n+        Path path = Paths.get(\".\/temp_dir\");\n+        String message = \"Failure due to error in creation of work directory.\";\n+        assertTrue(message, Files.exists(path));\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_Create_Work_Dir1.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.fail;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.operators.JTabbedPaneOperator;\n+\n+public class Test_Open_Test_Suite1 extends Open_Test_Suite {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_Open_Test_Suite1\");\n+    }\n+\n+    @Test\n+    public void testOpenTestSuite1() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException {\n+\n+        \/\/ Function in Tools.java used to open test suits\n+        openTestSuite(mainFrame);\n+        \/\/ Find the \"DemoTS\" tab\n+        \/\/ Wait until \"some test cases are yet to run\" appears in text field.\n+        waitForWDLoading(mainFrame, WDLoadingResult.SOME_NOTRUN);\n+        JTabbedPaneOperator tab = new JTabbedPaneOperator(mainFrame, TAB_CAPTION);\n+        if (!tab.isVisible()) {\n+            fail(\"Error while loading test suite.\");\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_Open_Test_Suite1.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.io.FileNotFoundException;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.ComponentChooser;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JTabbedPaneOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.util.NameComponentChooser;\n+\n+import jthtest.menu.Menu;\n+\n+public class Test_Open_Work_Dir1 extends Open_Work_Dir {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_Open_Work_Dir1\");\n+    }\n+\n+    @Test\n+    public void testOpenTestSuite1()\n+            throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException, FileNotFoundException {\n+\n+        \/\/ Opening work directory.\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+        Menu.getFile_Open_WorkDirectoryMenu(mainFrame).pushNoBlock();\n+\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.open.title\"));\n+        \/\/ Find edit box for file name\n+        String dirname = \"demowd\";\n+        new JTextFieldOperator(openDialog, \"\").enterText(dirname);\n+\n+        if (openDialog.isVisible()) {\n+            fail(\"Failure because the open work directory dialog window didnt close.\");\n+        }\n+\n+        \/\/ Finding the text field which displays the current work directory name.\n+        ComponentChooser n = new NameComponentChooser(\"bcc.WorkDir\");\n+        JTextFieldOperator work_directory_dialog = new JTextFieldOperator(mainFrame, n);\n+\n+        waitForWDLoading(mainFrame, WDLoadingResult.SOME_NOTRUN);\n+        new JTabbedPaneOperator(mainFrame, TAB_CAPTION);\n+\n+        \/\/ verifying that name of our work directory matches with the one written in the\n+        \/\/ text field.\n+        assertEquals(\"Failure because current working directory is not same as \" + dirname + \".\",\n+                work_directory_dialog.getText(), dirname);\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_Open_Work_Dir1.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.fail;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/\/import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+\/\/import org.netbeans.jemmy.operators.JDialogOperator;\n+\/\/import org.netbeans.jemmy.operators.JMenuBarOperator;\n+\/\/import org.netbeans.jemmy.operators.JTabbedPaneOperator;\n+\/\/import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+\n+\/\/import jthtest.Tools;\n+import jthtest.menu.Menu;\n+\n+public class Test_Open_Work_Dir2 extends Open_Work_Dir {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_Open_Work_Dir2\");\n+    }\n+\n+    @Test\n+    public void testOpenTestSuite1() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException {\n+\n+        \/\/ navigating to a non work directory.\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+        Menu.getFile_Open_WorkDirectoryMenu(mainFrame).pushNoBlock();\n+\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.open.title\"));\n+\n+        \/\/ Trying to open a non work directory.\n+        new JTextFieldOperator(openDialog, \"\").enterText(\"classes\");\n+\n+        \/\/ Checking if it opens or not.\n+        if (!openDialog.isVisible()) {\n+            fail(\"Failure because the dialog window didnt close.\");\n+        } else {\n+            openDialog.close();\n+        }\n+\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_Open_Work_Dir2.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JListOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+\n+import javax.swing.JLabel;\n+\n+import jthtest.menu.Menu;\n+\n+public class Test_QSM_NewA1 extends Open_Test_Suite {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_QSM_New1A\");\n+    }\n+\n+    @Test\n+    public void test13()\n+            throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException, InterruptedException {\n+        \/\/ Opening a work directory which already have configuration file in it.\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+        Menu.getFile_Open_WorkDirectoryMenu(mainFrame).pushNoBlock();\n+\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.open.title\"));\n+        \/\/ Find edit box for file name\n+        String dirname = \"demowd_config\";\n+        new JTextFieldOperator(openDialog, \"\").enterText(dirname);\n+\n+        waitForWDLoading(mainFrame, WDLoadingResult.SOME_NOTRUN);\n+\n+        \/\/ Clicking on new configuration in configure menu.\n+        jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+        Menu.getConfigure_EditConfigurationMenu(mainFrame).pushNoBlock();\n+\n+        \/\/ Pressing View->Quick Set Mode.\n+        JDialogOperator configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+        JMenuBarOperator jmbo1 = new JMenuBarOperator(configEditorDialog);\n+        jmbo1.pushMenuNoBlock(\"View\", \"\/\");\n+        jmbo1.pushMenuNoBlock(\"View\/Quick Set Mode\", \"\/\");\n+\n+        Thread.sleep(1000);\n+        \/\/ Pressing File->New Configuration.\n+        System.out.println(\"QS Mode\");\n+        JMenuBarOperator jmbo2 = new JMenuBarOperator(configEditorDialog);\n+        jmbo2.pushMenu(\"File\", \"\/\");\n+        jmbo2.pushMenu(\"File\/New Configuration\", \"\/\");\n+\n+        \/\/ Selecting the dialog box and finding the names of two of the last list items.\n+        JListOperator list = new JListOperator(configEditorDialog);\n+        \/\/ int last_index=list.getMaxSelectionIndex();\n+        String lastlistitem = ((JLabel) list.getRenderedComponent(list.getModel().getSize() - 1)).getText();\n+        String secondlastlistitem = ((JLabel) list.getRenderedComponent(list.getModel().getSize() - 2)).getText();\n+\n+        \/\/ Comparing the string fetched with expected strings.\n+        assertEquals(\"Last item was Expected: 'More...' But was: \" + lastlistitem, \" More...\", lastlistitem);\n+        assertEquals(\"Second Last item was Expected: 'Configuration Name' But was: \" + secondlastlistitem,\n+                \"   Configuration Name\", secondlastlistitem);\n+\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_QSM_NewA1.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.operators.JButtonOperator;\n+import org.netbeans.jemmy.operators.JCheckBoxOperator;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JListOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+\n+import javax.swing.JLabel;\n+\n+import jthtest.menu.Menu;\n+\n+public class Test_QSM_NewB1 extends Open_Test_Suite {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_QSM_New1B\");\n+    }\n+\n+    @Test\n+    public void testOpenTestSuite1()\n+            throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException, InterruptedException {\n+        \/\/ Opening a work directory which already have configuration file in it.\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+        Menu.getFile_Open_WorkDirectoryMenu(mainFrame).pushNoBlock();\n+\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.open.title\"));\n+        \/\/ Find edit box for file name\n+        String dirname = \"demowd\";\n+        new JTextFieldOperator(openDialog, \"\").enterText(dirname);\n+\n+        if (openDialog.isVisible()) {\n+            fail(\"Failure because the dialog window 'open work directory' didnt close properly.\");\n+        }\n+\n+        \/\/ Loading new configuration.\n+        jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+        Menu.getConfigure_LoadConfigurationMenu(mainFrame).pushNoBlock();\n+\n+        \/\/ Selecting load configuration dialog box.\n+        JDialogOperator loadConfigDialog = new JDialogOperator(getExecResource(\"wdc.loadconfig\"));\n+\n+        \/\/ Pushing \"Browse\" Button for opening config finder dialog box.\n+        \/\/ Selecting Configuration finder dialog box and further Text area inside it.\n+        JCheckBoxOperator launch_config_checkbox = new JCheckBoxOperator(loadConfigDialog);\n+\n+        \/\/ enabling checkbox on load config dialog.\n+        launch_config_checkbox.clickMouse();\n+\n+        new JButtonOperator(loadConfigDialog, \"Browse\").push();\n+        JDialogOperator loadConfigfinderDialog = new JDialogOperator(getExecResource(\"wdc.configchoosertitle\"));\n+        JTextFieldOperator browsetext = new JTextFieldOperator(loadConfigfinderDialog);\n+        browsetext.clearText();\n+        browsetext.enterText(\"democonfig.jti\");\n+\n+        \/\/ Pressing load to load the selected file.\n+        JButtonOperator loadbutton = new JButtonOperator(loadConfigDialog, getExecResource(\"wdc.load.btn\"));\n+        loadbutton.push();\n+\n+        \/\/ Opening Quick set mode\n+        JDialogOperator configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+        JMenuBarOperator jmbo1 = new JMenuBarOperator(configEditorDialog);\n+        jmbo1.pushMenuNoBlock(\"View\", \"\/\");\n+        jmbo1.pushMenuNoBlock(\"View\/Quick Set Mode\", \"\/\");\n+\n+        Thread.sleep(1000);\n+        \/\/ clicking new configuration in file menu.\n+        \/\/ JMenuBarOperator jmbo2 = new JMenuBarOperator(configEditorDialog);\n+        jmbo1.pushMenuNoBlock(\"File\", \"\/\");\n+        jmbo1.pushMenu(\"File\/New Configuration\", \"\/\");\n+\n+        \/\/ Selecting the dialog box and finding the names of two of the last list items.\n+        JListOperator list = new JListOperator(configEditorDialog);\n+        \/\/ int last_index=list.getMaxSelectionIndex();\n+        String lastlistitem = ((JLabel) list.getRenderedComponent(list.getModel().getSize() - 1)).getText();\n+        String secondlastlistitem = ((JLabel) list.getRenderedComponent(list.getModel().getSize() - 2)).getText();\n+\n+        \/\/ Comparing the string fetched with expected strings.\n+        assertEquals(\"Last item was Expected: 'More...' But was: \" + lastlistitem, \" More...\", lastlistitem);\n+        assertEquals(\"Second Last item was Expected: 'Configuration Name' But was: \" + secondlastlistitem,\n+                \"   Configuration Name\", secondlastlistitem);\n+\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_QSM_NewB1.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -0,0 +1,312 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.awt.Rectangle;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.operators.JButtonOperator;\n+import org.netbeans.jemmy.operators.JCheckBoxOperator;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JListOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JRadioButtonOperator;\n+import org.netbeans.jemmy.operators.JTabbedPaneOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.operators.JTreeOperator;\n+import org.netbeans.jemmy.operators.Operator;\n+\n+import javax.swing.JLabel;\n+\n+import jthtest.menu.Menu;\n+\n+public class Test_QSM_SaveA1 extends Config_New {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_QSM_Save1A\");\n+    }\n+\n+    \/\/ This function is taken from the jthtest.tools.configdialog class.\n+    public void clickOnCheckbox(JTreeOperator tree, int row) {\n+        Rectangle r = tree.getRowBounds(row);\n+        prepareToClickOnRow(tree, row);\n+        int x = Operator.getDefaultMouseButton();\n+        \/\/ System.out.println(tree.fi);\n+        tree.clickMouse((int) r.getX() + 6, (int) r.getY() + (int) (r.getHeight() \/ 2), 1, x, 0, false);\n+        \/\/ System.out.println(tree.getCenterXForClick());\n+        \/\/ Tools.pause(1);\n+    }\n+\n+    \/\/ This function is taken from the jthtest.tools.configdialog class.\n+    public void prepareToClickOnRow(JTreeOperator tree, int row) {\n+        tree.makeComponentVisible();\n+        tree.scrollToRow(row);\n+        tree.makeVisible(tree.getPathForRow(row));\n+        if (!tree.isVisible(tree.getPathForRow(row))) {\n+            System.out.println(\n+                    \"Error, row is not visible after prepairing. Index \" + row + \", tree width \" \/* getWidth() *\/);\n+        }\n+    }\n+\n+    \/\/ This function is used to fill fields in a particular tab.\n+    public void filltab(JDialogOperator config, JTabbedPaneOperator tab, int tab_num) throws FileNotFoundException {\n+        if (tab_num == 0) {\n+            JRadioButtonOperator test = new JRadioButtonOperator(tab, 1);\n+            test.push();\n+\n+            JTreeOperator tree = new JTreeOperator(tab, 0);\n+\n+            clickOnCheckbox(tree, 1);\n+\n+            String lastlistitem = ((JLabel) tree.getRenderedComponent(tree.getPathForRow(2))).getText();\n+            System.out.println(lastlistitem);\n+\n+        } else if (tab_num == 1) {\n+            \/\/ push other radio button.\n+            JRadioButtonOperator test = new JRadioButtonOperator(tab, 3);\n+            test.push();\n+\n+            JButtonOperator add = new JButtonOperator(tab, \"Add\");\n+            add.push();\n+            JDialogOperator addDialog = new JDialogOperator(\"Select\");\n+            String filename = \"demo.jtx\";\n+            new JTextFieldOperator(addDialog, \"\").enterText(filename);\n+        } else if (tab_num == 2) {\n+            JRadioButtonOperator test = new JRadioButtonOperator(tab, 1);\n+            test.push();\n+\n+            JButtonOperator add = new JButtonOperator(tab, \"Add\");\n+            add.push();\n+            JDialogOperator addDialog = new JDialogOperator(\"Select\");\n+            String filename = \"knownfailures.kfl\";\n+            new JTextFieldOperator(addDialog, \"\").enterText(filename);\n+        } else if (tab_num == 3) {\n+            JCheckBoxOperator test = new JCheckBoxOperator(tab, 0);\n+            test.push();\n+\n+            JCheckBoxOperator passed = new JCheckBoxOperator(tab, 1);\n+            passed.push();\n+        } else if (tab_num == 4) {\n+            new JTextFieldOperator(tab, 0).enterText(\"2\");\n+            new JTextFieldOperator(tab, 1).enterText(\"2\");\n+        } else {\n+            fail(\"Wrong tab number\");\n+        }\n+    }\n+\n+    \/\/ Function to check title of a particular tab.\n+    public boolean checktab(JDialogOperator config, JTabbedPaneOperator tab, int tab_num) {\n+        if (tab_num == 0) {\n+            return true;\n+        } else if (tab_num == 1) {\n+            JListOperator test = new JListOperator(tab, 0);\n+            String filepath = ((JLabel) test.getRenderedComponent(0)).getText();\n+            Path path = Paths.get(\"demo.jtx\");\n+            String actualpath = path.toAbsolutePath().toString();\n+\n+            if (!filepath.equals(actualpath)) {\n+                fail(\"Error in tab 3 that is exclude list tab\");\n+            }\n+        } else if (tab_num == 2) {\n+            JListOperator test = new JListOperator(tab, 0);\n+            String filepath = ((JLabel) test.getRenderedComponent(0)).getText();\n+            Path path = Paths.get(\"knownfailures.kfl\");\n+            String actualpath = path.toAbsolutePath().toString();\n+\n+            if (!filepath.equals(actualpath)) {\n+                fail(\"Error in tab 3 that is KF list tab\");\n+            }\n+        } else if (tab_num == 3) {\n+            JCheckBoxOperator passed = new JCheckBoxOperator(tab, 1);\n+            JCheckBoxOperator other1 = new JCheckBoxOperator(tab, 2);\n+            JCheckBoxOperator other2 = new JCheckBoxOperator(tab, 3);\n+            JCheckBoxOperator other3 = new JCheckBoxOperator(tab, 4);\n+            if (!passed.isSelected() || other1.isSelected() || other2.isSelected() || other3.isSelected()) {\n+                fail(\"Error in tab4 that is selection tab**update this name**\");\n+            }\n+        } else if (tab_num == 4) {\n+            String test1 = new JTextFieldOperator(tab, 0).getText();\n+            String test2 = new JTextFieldOperator(tab, 1).getText();\n+            assertEquals(\"Error in tab5 that is concurrency test.\", test1, \"2\");\n+            assertEquals(\"Error in tab5 that is concurrency test.\", test2, \"2\");\n+        } else {\n+            fail(\"Wrong tab number\");\n+        }\n+        return false;\n+    }\n+\n+    \/\/ Function to reset Fields in a particular tab.\n+    public void resettab(JDialogOperator config, JTabbedPaneOperator tab, int tab_num) {\n+        if (tab_num == 0) {\n+            JRadioButtonOperator test = new JRadioButtonOperator(tab, 1);\n+            test.push();\n+\n+            JTreeOperator tree = new JTreeOperator(tab, 0);\n+\n+            clickOnCheckbox(tree, 1);\n+\n+            JRadioButtonOperator test1 = new JRadioButtonOperator(tab, 0);\n+            test1.push();\n+        } else if (tab_num == 1) {\n+            JListOperator test1 = new JListOperator(tab, 0);\n+            test1.selectItem(0);\n+            JButtonOperator remove = new JButtonOperator(tab, \"Remove\");\n+            remove.push();\n+\n+            JRadioButtonOperator test = new JRadioButtonOperator(tab, 0);\n+            test.push();\n+        } else if (tab_num == 2) {\n+            JListOperator test1 = new JListOperator(tab, 0);\n+            test1.selectItem(0);\n+            JButtonOperator remove = new JButtonOperator(tab, \"Remove\");\n+            remove.push();\n+\n+            JRadioButtonOperator test = new JRadioButtonOperator(tab, 0);\n+            test.push();\n+        } else if (tab_num == 3) {\n+            JCheckBoxOperator passed = new JCheckBoxOperator(tab, 1);\n+            passed.push();\n+\n+            JCheckBoxOperator test = new JCheckBoxOperator(tab, 0);\n+            test.push();\n+        } else if (tab_num == 4) {\n+            new JTextFieldOperator(tab, 0).enterText(\"1\");\n+            new JTextFieldOperator(tab, 1).enterText(\"1\");\n+        } else {\n+            fail(\"Wrong tab number\");\n+        }\n+    }\n+\n+    @Test\n+    public void test14() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException,\n+            FileNotFoundException, InterruptedException, IOException {\n+        \/\/ Opening a work directory with a configuration file already loaded.\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+        Menu.getFile_Open_WorkDirectoryMenu(mainFrame).pushNoBlock();\n+\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.open.title\"));\n+        \/\/ Find edit box for file name\n+        String dirname = \"demowd_config\";\n+        new JTextFieldOperator(openDialog, \"\").enterText(dirname);\n+\n+        if (openDialog.isVisible()) {\n+            fail(\"Failure because the dialog window 'open work directory' didnt close properly.\");\n+        }\n+\n+        \/\/ Opening Configuration editor.\n+        jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+        Menu.getConfigure_EditConfigurationMenu(mainFrame).pushNoBlock();\n+\n+        JDialogOperator configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+        JListOperator list = new JListOperator(configEditorDialog);\n+        list.selectItem(1);\n+\n+        JMenuBarOperator jmbo1 = new JMenuBarOperator(configEditorDialog);\n+        jmbo1.pushMenu(\"View\", \"\/\");\n+        jmbo1.pushMenu(\"View\/Quick Set Mode\", \"\/\");\n+\n+        \/\/ Now QSM is open and we will make changes here.\n+        JTabbedPaneOperator QSM_tabs = new JTabbedPaneOperator(configEditorDialog);\n+        for (int i = 0; i < 5; i++) {\n+            QSM_tabs.setSelectedIndex(i);\n+            filltab(configEditorDialog, QSM_tabs, i);\n+        }\n+\n+        \/\/ Clicking save to save the configuration.\n+        jmbo1.pushMenuNoBlock(\"File\", \"\/\");\n+        jmbo1.pushMenuNoBlock(\"File\/Save\", \"\/\");\n+\n+        pushDoneConfigEditor(configEditorDialog);\n+\n+        if (configEditorDialog.isVisible()) {\n+            fail(\"Failure Because pressing done button didn't close the configuration editor window.\");\n+        }\n+\n+        jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+        Menu.getConfigure_LoadConfigurationMenu(mainFrame).pushNoBlock();\n+\n+        \/\/ Selecting load configuration dialog box.\n+        JDialogOperator loadConfigDialog = new JDialogOperator(getExecResource(\"wdc.loadconfig\"));\n+\n+        \/\/ Pushing \"Browse\" Button for opening config finder dialog box.\n+\n+        \/\/ Selecting Configuration finder dialog box and further Text area inside it.\n+        JCheckBoxOperator launch_config_checkbox = new JCheckBoxOperator(loadConfigDialog);\n+\n+        launch_config_checkbox.clickMouse();\n+        new JButtonOperator(loadConfigDialog, \"Browse\").push();\n+        JDialogOperator loadConfigfinderDialog = new JDialogOperator(getExecResource(\"wdc.configchoosertitle\"));\n+        JTextFieldOperator browsetext = new JTextFieldOperator(loadConfigfinderDialog);\n+        browsetext.clearText();\n+        browsetext.enterText(\"democonfig.jti\");\n+\n+        \/\/ Pressing load to load the selected file.\n+        JButtonOperator loadbutton = new JButtonOperator(loadConfigDialog, getExecResource(\"wdc.load.btn\"));\n+        loadbutton.push();\n+\n+        configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+        list = new JListOperator(configEditorDialog);\n+        list.selectItem(1);\n+\n+        jmbo1 = new JMenuBarOperator(configEditorDialog);\n+        jmbo1.pushMenu(\"View\", \"\/\");\n+        jmbo1.pushMenu(\"View\/Quick Set Mode\", \"\/\");\n+\n+        \/\/ Now we have loaded the config file again and we are checking the values that\n+        \/\/ we change above and also reset them as we check\n+        \/\/ so that it can be used in the next part that is part B.\n+        QSM_tabs = new JTabbedPaneOperator(configEditorDialog);\n+        for (int i = 0; i < 5; i++) {\n+            QSM_tabs.setSelectedIndex(i);\n+            checktab(configEditorDialog, QSM_tabs, i);\n+            resettab(configEditorDialog, QSM_tabs, i);\n+        }\n+\n+        jmbo1 = new JMenuBarOperator(configEditorDialog);\n+        jmbo1.pushMenuNoBlock(\"File\", \"\/\");\n+        jmbo1.pushMenuNoBlock(\"File\/Save\", \"\/\");\n+\n+        pushDoneConfigEditor(configEditorDialog);\n+\n+        if (configEditorDialog.isVisible()) {\n+            fail(\"Failure Because pressing done button didn't close the configuration editor window.\");\n+        }\n+\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_QSM_SaveA1.java","additions":312,"deletions":0,"binary":false,"changes":312,"status":"added"},{"patch":"@@ -0,0 +1,330 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.awt.Rectangle;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.operators.JButtonOperator;\n+import org.netbeans.jemmy.operators.JCheckBoxOperator;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JListOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JRadioButtonOperator;\n+import org.netbeans.jemmy.operators.JTabbedPaneOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.operators.JTreeOperator;\n+import org.netbeans.jemmy.operators.Operator;\n+\n+import javax.swing.JLabel;\n+\n+import jthtest.menu.Menu;\n+\n+public class Test_QSM_SaveB1 extends Config_New {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_QSM_Save1B\");\n+    }\n+\n+    \/\/ This function is taken from the jthtest.tools.configdialog class.\n+    public void clickOnCheckbox(JTreeOperator tree, int row) {\n+        Rectangle r = tree.getRowBounds(row);\n+        prepareToClickOnRow(tree, row);\n+        int x = Operator.getDefaultMouseButton();\n+        tree.clickMouse((int) r.getX() + 6, (int) r.getY() + (int) (r.getHeight() \/ 2), 1, x, 0, false);\n+\/\/        Tools.pause(1);\n+    }\n+\n+    \/\/ This function is taken from the jthtest.tools.configdialog class.\n+    public void prepareToClickOnRow(JTreeOperator tree, int row) {\n+        tree.makeComponentVisible();\n+        tree.scrollToRow(row);\n+        tree.makeVisible(tree.getPathForRow(row));\n+        if (!tree.isVisible(tree.getPathForRow(row))) {\n+            System.out.println(\n+                    \"Error, row is not visible after prepairing. Index \" + row + \", tree width \" \/* getWidth() *\/);\n+        }\n+    }\n+\n+    \/\/ This function is used to fill fields in a particular tab.\n+    public void filltab(JDialogOperator config, JTabbedPaneOperator tab, int tab_num) throws FileNotFoundException {\n+        if (tab_num == 0) {\n+            JRadioButtonOperator test = new JRadioButtonOperator(tab, 1);\n+            test.push();\n+\n+            JTreeOperator tree = new JTreeOperator(tab, 0);\n+\n+            clickOnCheckbox(tree, 1);\n+        } else if (tab_num == 1) {\n+            \/\/ push other radio button.\n+            JRadioButtonOperator test = new JRadioButtonOperator(tab, 3);\n+            test.push();\n+\n+            JButtonOperator add = new JButtonOperator(tab, \"Add\");\n+            add.push();\n+            JDialogOperator addDialog = new JDialogOperator(\"Select\");\n+            String filename = \"demo.jtx\";\n+            new JTextFieldOperator(addDialog, \"\").enterText(filename);\n+        } else if (tab_num == 2) {\n+            JRadioButtonOperator test = new JRadioButtonOperator(tab, 1);\n+            test.push();\n+\n+            JButtonOperator add = new JButtonOperator(tab, \"Add\");\n+            add.push();\n+            JDialogOperator addDialog = new JDialogOperator(\"Select\");\n+            String filename = \"knownfailures.kfl\";\n+            new JTextFieldOperator(addDialog, \"\").enterText(filename);\n+        } else if (tab_num == 3) {\n+            JCheckBoxOperator test = new JCheckBoxOperator(tab, 0);\n+            test.push();\n+\n+            JCheckBoxOperator passed = new JCheckBoxOperator(tab, 1);\n+            passed.push();\n+        } else if (tab_num == 4) {\n+            new JTextFieldOperator(tab, 0).enterText(\"2\");\n+            new JTextFieldOperator(tab, 1).enterText(\"2\");\n+        } else {\n+            fail(\"Wrong tab number\");\n+        }\n+    }\n+\n+    \/\/ Function to check title of a particular tab.\n+    public boolean checktab(JDialogOperator config, JTabbedPaneOperator tab, int tab_num) {\n+        if (tab_num == 0) {\n+            return true;\n+        } else if (tab_num == 1) {\n+            JListOperator test = new JListOperator(tab, 0);\n+            String filepath = ((JLabel) test.getRenderedComponent(0)).getText();\n+            Path path = Paths.get(\"demo.jtx\");\n+            String actualpath = path.toAbsolutePath().toString();\n+            \/\/ assertEquals(\"Error in tab2 that is Exclude List.\",filepath,actualpath);\n+            \/\/ System.out.println(filepath);\n+            \/\/ System.out.println(actualpath);\n+            if (!filepath.equals(actualpath)) {\n+                fail(\"Error in tab 3 that is exclude list tab\");\n+            }\n+        } else if (tab_num == 2) {\n+            JListOperator test = new JListOperator(tab, 0);\n+            String filepath = ((JLabel) test.getRenderedComponent(0)).getText();\n+            Path path = Paths.get(\"knownfailures.kfl\");\n+            String actualpath = path.toAbsolutePath().toString();\n+            \/\/ assertEquals(\"Error in tab2 that is Exclude List.\",filepath,actualpath);\n+            if (!filepath.equals(actualpath)) {\n+                fail(\"Error in tab 3 that is KF list tab\");\n+            }\n+        } else if (tab_num == 3) {\n+            JCheckBoxOperator passed = new JCheckBoxOperator(tab, 1);\n+            JCheckBoxOperator other1 = new JCheckBoxOperator(tab, 2);\n+            JCheckBoxOperator other2 = new JCheckBoxOperator(tab, 3);\n+            JCheckBoxOperator other3 = new JCheckBoxOperator(tab, 4);\n+            if (!passed.isSelected() || other1.isSelected() || other2.isSelected() || other3.isSelected()) {\n+                fail(\"Error in tab4 that is selection tab**update this name**\");\n+            }\n+        } else if (tab_num == 4) {\n+            String test1 = new JTextFieldOperator(tab, 0).getText();\n+            String test2 = new JTextFieldOperator(tab, 1).getText();\n+            assertEquals(\"Error in tab5 that is concurrency test.\", test1, \"2\");\n+            assertEquals(\"Error in tab5 that is concurrency test.\", test2, \"2\");\n+        } else {\n+            fail(\"Wrong tab number\");\n+        }\n+        return false;\n+    }\n+\n+    \/\/ Function to reset Fields in a particular tab.\n+    public void resettab(JDialogOperator config, JTabbedPaneOperator tab, int tab_num) {\n+        if (tab_num == 0) {\n+            JRadioButtonOperator test = new JRadioButtonOperator(tab, 1);\n+            test.push();\n+\n+            JTreeOperator tree = new JTreeOperator(tab, 0);\n+\n+            clickOnCheckbox(tree, 1);\n+\n+            JRadioButtonOperator test1 = new JRadioButtonOperator(tab, 0);\n+            test1.push();\n+        } else if (tab_num == 1) {\n+            JListOperator test1 = new JListOperator(tab, 0);\n+            test1.selectItem(0);\n+            JButtonOperator remove = new JButtonOperator(tab, \"Remove\");\n+            remove.push();\n+\n+            JRadioButtonOperator test = new JRadioButtonOperator(tab, 0);\n+            test.push();\n+        } else if (tab_num == 2) {\n+            JListOperator test1 = new JListOperator(tab, 0);\n+            test1.selectItem(0);\n+            JButtonOperator remove = new JButtonOperator(tab, \"Remove\");\n+            remove.push();\n+\n+            JRadioButtonOperator test = new JRadioButtonOperator(tab, 0);\n+            test.push();\n+        } else if (tab_num == 3) {\n+            JCheckBoxOperator passed = new JCheckBoxOperator(tab, 1);\n+            passed.push();\n+\n+            JCheckBoxOperator test = new JCheckBoxOperator(tab, 0);\n+            test.push();\n+        } else if (tab_num == 4) {\n+            new JTextFieldOperator(tab, 0).enterText(\"1\");\n+            new JTextFieldOperator(tab, 1).enterText(\"1\");\n+        } else {\n+            fail(\"Wrong tab number\");\n+        }\n+    }\n+\n+    @Test\n+    public void test14() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException,\n+            FileNotFoundException, InterruptedException, IOException {\n+        \/\/ Opening a work directory with a configuration file already loaded.\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+        Menu.getFile_Open_WorkDirectoryMenu(mainFrame).pushNoBlock();\n+\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.open.title\"));\n+        \/\/ Find edit box for file name\n+        String dirname = \"demowd_config\";\n+        new JTextFieldOperator(openDialog, \"\").enterText(dirname); \/\/ for build.xml use \"demowd\" else use \"temp_dir\".\n+\n+        if (openDialog.isVisible()) {\n+            fail(\"Failure because the dialog window 'open work directory' didnt close properly.\");\n+        }\n+\n+        \/\/ Opening Configuration editor.\n+        jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+        Menu.getConfigure_LoadConfigurationMenu(mainFrame).pushNoBlock();\n+\n+        \/\/ Selecting load configuration dialog box.\n+        JDialogOperator loadConfigDialog = new JDialogOperator(getExecResource(\"wdc.loadconfig\"));\n+\n+        \/\/ Pushing \"Browse\" Button for opening config finder dialog box.\n+\n+        \/\/ Selecting Configuration finder dialog box and further Text area inside it.\n+        JCheckBoxOperator launch_config_checkbox = new JCheckBoxOperator(loadConfigDialog);\n+\n+        \/\/ enabling checkbox on load config dialog.\n+        launch_config_checkbox.clickMouse();\n+\n+        new JButtonOperator(loadConfigDialog, \"Browse\").push();\n+        JDialogOperator loadConfigfinderDialog = new JDialogOperator(getExecResource(\"wdc.configchoosertitle\"));\n+        JTextFieldOperator browsetext = new JTextFieldOperator(loadConfigfinderDialog);\n+        browsetext.clearText();\n+        browsetext.enterText(\"democonfig.jti\");\n+\n+        \/\/ Pressing load to load the selected file.\n+        JButtonOperator loadbutton = new JButtonOperator(loadConfigDialog, getExecResource(\"wdc.load.btn\"));\n+        loadbutton.push();\n+\n+        JDialogOperator configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+        JListOperator list = new JListOperator(configEditorDialog);\n+        list.selectItem(1);\n+\n+        JMenuBarOperator jmbo1 = new JMenuBarOperator(configEditorDialog);\n+        jmbo1.pushMenu(\"View\", \"\/\");\n+        jmbo1.pushMenu(\"View\/Quick Set Mode\", \"\/\");\n+\n+        \/\/ Now QSM is open and we will make changes here.\n+        JTabbedPaneOperator QSM_tabs = new JTabbedPaneOperator(configEditorDialog);\n+        for (int i = 0; i < 5; i++) {\n+            QSM_tabs.setSelectedIndex(i);\n+            filltab(configEditorDialog, QSM_tabs, i);\n+        }\n+\n+        \/\/ Clicking save to save the configuration.\n+        jmbo1.pushMenuNoBlock(\"File\", \"\/\");\n+        jmbo1.pushMenuNoBlock(\"File\/Save\", \"\/\");\n+\n+        Thread.sleep(1000);\n+        pushDoneConfigEditor(configEditorDialog);\n+\n+        if (configEditorDialog.isVisible()) {\n+            fail(\"Failure Because pressing done button didn't close the configuration editor window.\");\n+        }\n+\n+        jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+        Menu.getConfigure_LoadConfigurationMenu(mainFrame).pushNoBlock();\n+\n+        \/\/ Selecting load configuration dialog box.\n+        loadConfigDialog = new JDialogOperator(getExecResource(\"wdc.loadconfig\"));\n+\n+        \/\/ Pushing \"Browse\" Button for opening config finder dialog box.\n+\n+        \/\/ Selecting Configuration finder dialog box and further Text area inside it.\n+        launch_config_checkbox = new JCheckBoxOperator(loadConfigDialog);\n+\n+        launch_config_checkbox.clickMouse();\n+        new JButtonOperator(loadConfigDialog, \"Browse\").push();\n+        loadConfigfinderDialog = new JDialogOperator(getExecResource(\"wdc.configchoosertitle\"));\n+        browsetext = new JTextFieldOperator(loadConfigfinderDialog);\n+        browsetext.clearText();\n+        browsetext.enterText(\"democonfig.jti\");\n+\n+        \/\/ Pressing load to load the selected file.\n+        loadbutton = new JButtonOperator(loadConfigDialog, getExecResource(\"wdc.load.btn\"));\n+        loadbutton.push();\n+\n+        configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+        list = new JListOperator(configEditorDialog);\n+        list.selectItem(1);\n+\n+        jmbo1 = new JMenuBarOperator(configEditorDialog);\n+        jmbo1.pushMenu(\"View\", \"\/\");\n+        jmbo1.pushMenu(\"View\/Quick Set Mode\", \"\/\");\n+\n+        \/\/ Now we have loaded the config file again and we are checking the values that\n+        \/\/ we change above and also reset them as we check\n+        \/\/ so that it can be used in the next part that is part B.\n+        QSM_tabs = new JTabbedPaneOperator(configEditorDialog);\n+        for (int i = 0; i < 5; i++) {\n+            QSM_tabs.setSelectedIndex(i);\n+            checktab(configEditorDialog, QSM_tabs, i);\n+            resettab(configEditorDialog, QSM_tabs, i);\n+        }\n+\n+        jmbo1 = new JMenuBarOperator(configEditorDialog);\n+        jmbo1.pushMenuNoBlock(\"File\", \"\/\");\n+        jmbo1.pushMenuNoBlock(\"File\/Save\", \"\/\");\n+\n+        pushDoneConfigEditor(configEditorDialog);\n+\n+        if (configEditorDialog.isVisible()) {\n+            fail(\"Failure Because pressing done button didn't close the configuration editor window.\");\n+        }\n+\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_QSM_SaveB1.java","additions":330,"deletions":0,"binary":false,"changes":330,"status":"added"},{"patch":"@@ -0,0 +1,189 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.awt.Rectangle;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.operators.JComboBoxOperator;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JListOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JRadioButtonOperator;\n+import org.netbeans.jemmy.operators.JTabbedPaneOperator;\n+import org.netbeans.jemmy.operators.JTableOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.operators.JTreeOperator;\n+import org.netbeans.jemmy.operators.Operator;\n+import org.netbeans.jemmy.util.NameComponentChooser;\n+\n+import javax.swing.JLabel;\n+\n+import jthtest.menu.Menu;\n+\n+public class Test_QSM_Test1 extends Config_New {\n+    \/\/ This is the 17th Sanity Test. It tests functionality of Tests to run option\n+    \/\/ in QSM of configuration editor.\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_QSM_Test1\");\n+    }\n+\n+    \/\/ This function is used to click on the check boxes in JTreeOperator.\n+    public void clickOnCheckbox(JTreeOperator tree, int row) {\n+        Rectangle r = tree.getRowBounds(row);\n+        prepareToClickOnRow(tree, row);\n+        int x = Operator.getDefaultMouseButton();\n+\n+        tree.clickMouse((int) r.getX() + 6, (int) r.getY() + (int) (r.getHeight() \/ 2), 1, x, 0, false);\n+\n+    }\n+\n+    \/\/ This function is taken from the jthtest.tools.configdialog class.\n+    public void prepareToClickOnRow(JTreeOperator tree, int row) {\n+        tree.makeComponentVisible();\n+        tree.scrollToRow(row);\n+        tree.makeVisible(tree.getPathForRow(row));\n+        if (!tree.isVisible(tree.getPathForRow(row))) {\n+            System.out.println(\n+                    \"Error, row is not visible after prepairing. Index \" + row + \", tree width \" \/* getWidth() *\/);\n+        }\n+    }\n+\n+    @Test\n+    public void test17() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException,\n+            FileNotFoundException, InterruptedException, IOException {\n+\n+        \/\/ Opening a Work directory.\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+        Menu.getFile_Open_WorkDirectoryMenu(mainFrame).pushNoBlock();\n+\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.open.title\"));\n+        \/\/ Find edit box for file name\n+        String dirname = \"demowd_config\";\n+        new JTextFieldOperator(openDialog, \"\").enterText(dirname); \/\/ for build.xml use \"demowd\" else use \"temp_dir\".\n+\n+        \/\/ Checking if open work directory dialog box disappears.\n+        if (openDialog.isVisible()) {\n+            fail(\"Failure because the dialog window 'open work directory' didnt close properly.\");\n+        }\n+\n+        \/\/ Opening configuration editor via edit configuration.\n+        jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+        Menu.getConfigure_EditConfigurationMenu(mainFrame).pushNoBlock();\n+\n+        \/\/ Selecting configration editor and moving to question one.\n+        JDialogOperator configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+        JListOperator list = new JListOperator(configEditorDialog);\n+        list.selectItem(1);\n+\n+        JMenuBarOperator jmbo1 = new JMenuBarOperator(configEditorDialog);\n+        \/\/ Changing mode to QSM.\n+        jmbo1.pushMenu(\"View\", \"\/\");\n+        jmbo1.pushMenu(\"View\/Quick Set Mode\", \"\/\");\n+\n+        \/\/ Now QSM is open and we will make changes here.\n+        JTabbedPaneOperator QSM_tabs = new JTabbedPaneOperator(configEditorDialog);\n+\n+        \/\/ Selecting and editing tab1 that is test tab.\n+        QSM_tabs.setSelectedIndex(0);\n+        JRadioButtonOperator test = new JRadioButtonOperator(QSM_tabs, 1);\n+        test.push();\n+        JTreeOperator tree = new JTreeOperator(QSM_tabs, 0);\n+        clickOnCheckbox(tree, 1);\n+\n+        \/\/ Saving the changes and pressing done.\n+        jmbo1.pushMenuNoBlock(\"File\", \"\/\");\n+        jmbo1.pushMenuNoBlock(\"File\/Save\", \"\/\");\n+        pushDoneConfigEditor(configEditorDialog);\n+\n+        if (configEditorDialog.isVisible()) {\n+            fail(\"Failure Because pressing done button didn't close the configuration editor window.\");\n+        }\n+\n+        \/\/ Selecting 'current configuration' on the dropdown on mainframe.\n+        JComboBoxOperator viewfilter = new JComboBoxOperator(mainFrame, 0);\n+        viewfilter.selectItem(1);\n+\n+        \/\/ selecting 'filtered test tab'.\n+        JTabbedPaneOperator mainpane = new JTabbedPaneOperator(mainFrame, new NameComponentChooser(\"br.tabs\"));\n+        mainpane.setSelectedIndex(6);\n+\n+        JTableOperator filtered = new JTableOperator(mainpane);\n+\n+        \/\/ checking if correct tests are filtered or not.\n+        String testname = ((JLabel) filtered.getRenderedComponent(0, 0)).getText();\n+        assertEquals(\n+                \"Wrong test filtered while seperating tests via tests to run filter. Expected first test: BigNum\/AddTest.java#id0 But was: \"\n+                        + testname,\n+                \"BigNum\/AddTest.java#id0\", testname);\n+\n+        \/\/ Reopening the configuration editor.\n+        jmbo.pushMenuNoBlock(\"Configure\", \"\/\");\n+        Menu.getConfigure_EditConfigurationMenu(mainFrame).pushNoBlock();\n+\n+        configEditorDialog = new JDialogOperator(getExecResource(\"ce.name\"));\n+        list = new JListOperator(configEditorDialog);\n+        list.selectItem(1);\n+\n+        \/\/ Changing to QSM.\n+        jmbo1 = new JMenuBarOperator(configEditorDialog);\n+        jmbo1.pushMenu(\"View\", \"\/\");\n+        jmbo1.pushMenu(\"View\/Quick Set Mode\", \"\/\");\n+\n+        \/\/ Now QSM is open and we will make changes here.\n+        QSM_tabs = new JTabbedPaneOperator(configEditorDialog);\n+\n+        \/\/ Resetting changes done in the configuration.\n+        QSM_tabs.setSelectedIndex(0);\n+        JRadioButtonOperator test3 = new JRadioButtonOperator(QSM_tabs, 1);\n+        test3.push();\n+        tree = new JTreeOperator(QSM_tabs, 0);\n+        clickOnCheckbox(tree, 1);\n+\n+        JRadioButtonOperator test1 = new JRadioButtonOperator(QSM_tabs, 0);\n+        test1.push();\n+\n+        \/\/ Saving back the configuration.\n+        jmbo1.pushMenuNoBlock(\"File\", \"\/\");\n+        jmbo1.pushMenuNoBlock(\"File\/Save\", \"\/\");\n+\n+        pushDoneConfigEditor(configEditorDialog);\n+\n+        if (configEditorDialog.isVisible()) {\n+            fail(\"Failure Because pressing done button didn't close the configuration editor window.\");\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_QSM_Test1.java","additions":189,"deletions":0,"binary":false,"changes":189,"status":"added"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.operators.JButtonOperator;\n+import org.netbeans.jemmy.operators.JComboBoxOperator;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JListOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+import org.netbeans.jemmy.util.NameComponentChooser;\n+\n+import javax.swing.JCheckBox;\n+\n+import jthtest.menu.Menu;\n+\n+public class Test_Report_Create1 extends Config_New {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_Report_Create1\");\n+    }\n+\n+    \/\/ Function to check if all neccesary files are created or not.\n+    public void checkreport(String name) {\n+        Path p[] = new Path[13];\n+        p[0] = Paths.get(\".\/\" + name + \"\/index.html\");\n+        p[1] = Paths.get(\".\/\" + name + \"\/reportdir.dat\");\n+        p[2] = Paths.get(\".\/\" + name + \"\/xml\/report.xml\");\n+        p[3] = Paths.get(\".\/\" + name + \"\/text\/summary.txt\");\n+        p[4] = Paths.get(\".\/\" + name + \"\/html\/config.html\");\n+        p[5] = Paths.get(\".\/\" + name + \"\/html\/env.html\");\n+        p[6] = Paths.get(\".\/\" + name + \"\/html\/error.html\");\n+        p[7] = Paths.get(\".\/\" + name + \"\/html\/excluded.html\");\n+        p[8] = Paths.get(\".\/\" + name + \"\/html\/failed.html\");\n+        p[9] = Paths.get(\".\/\" + name + \"\/html\/notRun.html\");\n+        p[10] = Paths.get(\".\/\" + name + \"\/html\/passed.html\");\n+        p[11] = Paths.get(\".\/\" + name + \"\/html\/report.css\");\n+        p[12] = Paths.get(\".\/\" + name + \"\/html\/report.html\");\n+\n+        for (int i = 0; i < 13; i++) {\n+            assertTrue(\"File number \" + i + \" not found. Expected File at path: \" + p[i].toString(),\n+                    Files.exists(p[i]));\n+        }\n+    }\n+\n+    @Test\n+    public void test18() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException,\n+            FileNotFoundException, InterruptedException, IOException {\n+        \/\/ Opening Work Directory.\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+        Menu.getFile_Open_WorkDirectoryMenu(mainFrame).pushNoBlock();\n+\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.open.title\"));\n+        \/\/ Find edit box for file name\n+        String dirname = \"demowd_config\";\n+        new JTextFieldOperator(openDialog, \"\").enterText(dirname); \/\/ for build.xml use \"demowd\" else use \"temp_dir\".\n+\n+        \/\/ Checking if work directory opened properly or not.\n+        if (openDialog.isVisible()) {\n+            fail(\"Failure because the dialog window 'open work directory' didnt close properly.\");\n+        }\n+\n+        \/\/ Repeating the test for all four options in the drop down available.\n+        for (int j = 0; j < 4; j++) {\n+            \/\/ Opening a report via Report->Create Report.\n+            jmbo.pushMenuNoBlock(\"Report\", \"\/\");\n+            Menu.getReport_CreateReportMenu(mainFrame).pushNoBlock();\n+\n+            \/\/ Selecting a Create report dialog box and selecting jth dropdown element.\n+            JDialogOperator reportDialog = new JDialogOperator(getExecResource(\"nrd.title\"));\n+            JComboBoxOperator dropdown = new JComboBoxOperator(reportDialog, 0);\n+            dropdown.setSelectedIndex(j);\n+\n+            \/\/ Selecting a checking the list of check boxes.\n+            JListOperator typelist = new JListOperator(reportDialog, new NameComponentChooser(\"nrd.typel\"));\n+            for (int i = 0; i < 3; i++) {\n+                JCheckBox reporttype = (JCheckBox) typelist.getModel().getElementAt(i);\n+                if (!reporttype.isSelected()) {\n+                    reporttype.setSelected(true);\n+                }\n+            }\n+\n+            \/\/ Entering report directory name and pressing create button.\n+            JTextFieldOperator reportname = new JTextFieldOperator(reportDialog, 0);\n+            String report_dir = \"temp_report_\" + j;\n+            \/\/ reportname.clearText();\n+            reportname.setText(report_dir);\n+            JButtonOperator createbutton = new JButtonOperator(reportDialog, new NameComponentChooser(\"nrd.ok\"));\n+            createbutton.push();\n+\n+            \/\/ Pressing \"No\" on show report prompt.\n+            JDialogOperator viewreportques = new JDialogOperator(getExecResource(\"nrd.showReport.title\"));\n+            new JButtonOperator(viewreportques, 1).push();\n+            \/\/ Calling check function.\n+            checkreport(report_dir);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_Report_Create1.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * $Id$\n+ *\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jthtest.Sanity_Tests;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Test;\n+import org.junit.runner.JUnitCore;\n+import org.netbeans.jemmy.operators.JDialogOperator;\n+import org.netbeans.jemmy.operators.JEditorPaneOperator;\n+import org.netbeans.jemmy.operators.JMenuBarOperator;\n+import org.netbeans.jemmy.operators.JTextFieldOperator;\n+\n+import jthtest.menu.Menu;\n+\n+public class Test_Report_Open1 extends Config_New {\n+\n+    public static void main(String[] args) {\n+        JUnitCore.main(\"jthtest.gui.Sanity_Tests.Test_Report_Open1\");\n+    }\n+\n+    \/\/ Function to check if all neccesary files are created or not.\n+    public void checkreport(String name) {\n+        Path p[] = new Path[13];\n+        p[0] = Paths.get(\".\/\" + name + \"\/index.html\");\n+        p[1] = Paths.get(\".\/\" + name + \"\/reportdir.dat\");\n+        p[2] = Paths.get(\".\/\" + name + \"\/xml\/report.xml\");\n+        p[3] = Paths.get(\".\/\" + name + \"\/text\/summary.txt\");\n+        p[4] = Paths.get(\".\/\" + name + \"\/html\/config.html\");\n+        p[5] = Paths.get(\".\/\" + name + \"\/html\/env.html\");\n+        p[6] = Paths.get(\".\/\" + name + \"\/html\/error.html\");\n+        p[7] = Paths.get(\".\/\" + name + \"\/html\/excluded.html\");\n+        p[8] = Paths.get(\".\/\" + name + \"\/html\/failed.html\");\n+        p[9] = Paths.get(\".\/\" + name + \"\/html\/notRun.html\");\n+        p[10] = Paths.get(\".\/\" + name + \"\/html\/passed.html\");\n+        p[11] = Paths.get(\".\/\" + name + \"\/html\/report.css\");\n+        p[12] = Paths.get(\".\/\" + name + \"\/html\/report.html\");\n+\n+        for (int i = 0; i < 13; i++) {\n+            assertTrue(\"file number \" + i + \" not found.\", Files.exists(p[i]));\n+        }\n+    }\n+\n+    @Test\n+    public void test19() throws ClassNotFoundException, InvocationTargetException, NoSuchMethodException,\n+            FileNotFoundException, InterruptedException, IOException {\n+        \/\/ Opening Work Directory.\n+        JMenuBarOperator jmbo = new JMenuBarOperator(mainFrame);\n+        jmbo.pushMenuNoBlock(\"File\", \"\/\");\n+        Menu.getFile_Open_WorkDirectoryMenu(mainFrame).pushNoBlock();\n+\n+        JDialogOperator openDialog = new JDialogOperator(getToolResource(\"wdc.open.title\"));\n+        \/\/ Find edit box for file name\n+        String dirname = \"demowd_config\";\n+        new JTextFieldOperator(openDialog, \"\").enterText(dirname); \/\/ for build.xml use \"demowd\" else use \"temp_dir\".\n+\n+        \/\/ Checking if work directory opened properly or not.\n+        if (openDialog.isVisible()) {\n+            fail(\"Failure because the dialog window 'open work directory' didnt close properly and is still visible on screen.\");\n+        }\n+\n+        \/\/ Opening a report via Report->Open Report.\n+        jmbo.pushMenuNoBlock(\"Report\", \"\/\");\n+        Menu.getReport_OpenReportMenu(mainFrame).pushNoBlock();\n+\n+        \/\/ Selecting a Open report dialog box and entering a report name.\n+        JDialogOperator reportDialog = new JDialogOperator(getExecResource(\"rh.open.title\"));\n+        JTextFieldOperator openreporttext = new JTextFieldOperator(reportDialog, \"\");\n+        openreporttext.enterText(\"temp_report_0\");\n+        openreporttext.enterText(\"index.html\");\n+\n+        \/\/ Selecting Report Browser and linking on link 'HTML Report'.\n+        JDialogOperator reportdialog = new JDialogOperator(\"Report Browser\");\n+        JEditorPaneOperator test1 = new JEditorPaneOperator(reportdialog);\n+        \/\/ HTMLDocument doc = (HTMLDocument)test1.getDocument();\n+        Thread.sleep(1000);\n+        test1.clickMouse(test1.modelToView(test1.getPositionByText(\"HTML Report\")).x,\n+                test1.modelToView(test1.getPositionByText(\"HTML Report\")).y, 1);\n+        Thread.sleep(1000);\n+        \/\/ Checking if correct page opens up after clicking the link.\n+        JEditorPaneOperator test2 = new JEditorPaneOperator(reportdialog);\n+        assertTrue(\"Failure Beacuse Wrong page or unexpected error dialog box appeared on screen.\",\n+                test2.getText().contains(\"JT Harness : Report\"));\n+    }\n+}\n\\ No newline at end of file\n","filename":"gui-tests\/src\/gui\/src\/jthtest\/Sanity_Tests\/Test_Report_Open1.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}