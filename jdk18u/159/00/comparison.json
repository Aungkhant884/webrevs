{"files":[{"patch":"@@ -2179,1 +2179,1 @@\n-void MacroAssembler::wrap_add_sub_imm_insn(Register Rd, Register Rn, unsigned imm,\n+void MacroAssembler::wrap_add_sub_imm_insn(Register Rd, Register Rn, uint64_t imm,\n@@ -2181,1 +2181,2 @@\n-                                           add_sub_reg_insn insn2) {\n+                                           add_sub_reg_insn insn2,\n+                                           bool is32) {\n@@ -2183,1 +2184,2 @@\n-  if (operand_valid_for_add_sub_immediate((int)imm)) {\n+  bool fits = operand_valid_for_add_sub_immediate(is32 ? (int32_t)imm : imm);\n+  if (fits) {\n@@ -2191,1 +2193,1 @@\n-       mov(Rd, (uint64_t)imm);\n+       mov(Rd, imm);\n@@ -2199,4 +2201,6 @@\n-void MacroAssembler::wrap_adds_subs_imm_insn(Register Rd, Register Rn, unsigned imm,\n-                                           add_sub_imm_insn insn1,\n-                                           add_sub_reg_insn insn2) {\n-  if (operand_valid_for_add_sub_immediate((int)imm)) {\n+void MacroAssembler::wrap_adds_subs_imm_insn(Register Rd, Register Rn, uint64_t imm,\n+                                             add_sub_imm_insn insn1,\n+                                             add_sub_reg_insn insn2,\n+                                             bool is32) {\n+  bool fits = operand_valid_for_add_sub_immediate(is32 ? (int32_t)imm : imm);\n+  if (fits) {\n@@ -2207,1 +2211,1 @@\n-    mov(Rd, (uint64_t)imm);\n+    mov(Rd, imm);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-      addw(Rd, Rn, 0U);\n+      Assembler::addw(Rd, Rn, 0U);\n@@ -223,1 +223,1 @@\n-      add(Rd, Rn, 0U);\n+      Assembler::add(Rd, Rn, 0U);\n@@ -1130,1 +1130,1 @@\n-  void wrap_add_sub_imm_insn(Register Rd, Register Rn, unsigned imm,\n+  void wrap_add_sub_imm_insn(Register Rd, Register Rn, uint64_t imm,\n@@ -1132,1 +1132,1 @@\n-                             add_sub_reg_insn insn2);\n+                             add_sub_reg_insn insn2, bool is32);\n@@ -1134,3 +1134,3 @@\n-  void wrap_adds_subs_imm_insn(Register Rd, Register Rn, unsigned imm,\n-                             add_sub_imm_insn insn1,\n-                             add_sub_reg_insn insn2);\n+  void wrap_adds_subs_imm_insn(Register Rd, Register Rn, uint64_t imm,\n+                               add_sub_imm_insn insn1,\n+                               add_sub_reg_insn insn2, bool is32);\n@@ -1138,3 +1138,3 @@\n-#define WRAP(INSN)                                                      \\\n-  void INSN(Register Rd, Register Rn, unsigned imm) {                   \\\n-    wrap_add_sub_imm_insn(Rd, Rn, imm, &Assembler::INSN, &Assembler::INSN); \\\n+#define WRAP(INSN, is32)                                                \\\n+  void INSN(Register Rd, Register Rn, uint64_t imm) {                   \\\n+    wrap_add_sub_imm_insn(Rd, Rn, imm, &Assembler::INSN, &Assembler::INSN, is32); \\\n@@ -1157,1 +1157,1 @@\n-  WRAP(add) WRAP(addw) WRAP(sub) WRAP(subw)\n+  WRAP(add, false) WRAP(addw, true) WRAP(sub, false) WRAP(subw, true)\n@@ -1160,3 +1160,3 @@\n-#define WRAP(INSN)                                                      \\\n-  void INSN(Register Rd, Register Rn, unsigned imm) {                   \\\n-    wrap_adds_subs_imm_insn(Rd, Rn, imm, &Assembler::INSN, &Assembler::INSN); \\\n+#define WRAP(INSN, is32)                                                \\\n+  void INSN(Register Rd, Register Rn, uint64_t imm) {                   \\\n+    wrap_adds_subs_imm_insn(Rd, Rn, imm, &Assembler::INSN, &Assembler::INSN, is32); \\\n@@ -1179,1 +1179,1 @@\n-  WRAP(adds) WRAP(addsw) WRAP(subs) WRAP(subsw)\n+  WRAP(adds, false) WRAP(addsw, true) WRAP(subs, false) WRAP(subsw, true)\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -6547,1 +6547,1 @@\n-    __ sub(sp, rfp, ((unsigned)framesize-4) << LogBytesPerInt); \/\/ prolog\n+    __ sub(sp, rfp, ((uint64_t)framesize-4) << LogBytesPerInt); \/\/ prolog\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}