{"files":[{"patch":"@@ -1938,0 +1938,6 @@\n+  if (init->Opcode() == Op_CastII) {\n+    \/\/ skip over the cast added by PhaseIdealLoop::cast_incr_before_loop() when pre\/post\/main loops are created because\n+    \/\/ it can get in the way of type propagation\n+    assert(((CastIINode*)init)->carry_dependency() && loop_head->skip_predicates() == init->in(0), \"casted iv phi from pre loop expected\");\n+    init = init->in(1);\n+  }\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3731,0 +3731,2 @@\n+      post = new CastIINode(post, phi->bottom_type()); \/\/ preserve the iv phi's type\n+      register_new_node(post, c);\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Utils;\n+import java.util.Random;\n+\n+\/*\n+ * @test\n+ * @bug 8278228\n+ * @summary C2: Improve identical back-to-back if elimination\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestSkeletonPredicates\n+ *\/\n+\n+public class TestSkeletonPredicates {\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"-XX:-UseLoopPredicate\", \"-XX:LoopUnrollLimit=240\", \"-XX:+StressIGVN\", \"-XX:StressSeed=255527877\");\n+        TestFramework.runWithFlags(\"-XX:-UseLoopPredicate\", \"-XX:LoopUnrollLimit=240\", \"-XX:+StressIGVN\");\n+    }\n+\n+    static volatile int barrier;\n+\n+    @ForceInline\n+    static boolean test1_helper(int start, int stop, double[] array1, double[] array2) {\n+        for (int i = start; i < stop; i++) {\n+            if ((i % 2) == 0) {\n+                array1[i] = 42.42;\n+            } else {\n+                barrier = 0x42;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.COUNTEDLOOP, \"3\" })\n+    static double[] test1(int stop, double[] array2) {\n+        double[] array1 = null;\n+        array1 = new double[10];\n+        for (int j = 0; j < stop; j++) {\n+            if (test1_helper(8, j, array1, array2)) {\n+                return null;\n+            }\n+        }\n+        return array1;\n+    }\n+\n+    @Run(test = \"test1\")\n+    void test1_runner() {\n+        double[] array2 = new double[10];\n+        double[] array3 = new double[1000];\n+        test1_helper(1, 1000, array3, array3);\n+        test1(11, array3);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestSkeletonPredicates.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}