{"files":[{"patch":"@@ -818,5 +818,4 @@\n-        const Type* cmp1 = sub(tr1, t2);\n-        const Type* cmp2 = sub(tr2, t2);\n-        if (cmp1 == cmp2) {\n-          return cmp1; \/\/ Hit!\n-        }\n+        const TypeInt* cmp1 = sub(tr1, t2)->is_int();\n+        const TypeInt* cmp2 = sub(tr2, t2)->is_int();\n+        \/\/ compute union, so that cmp handles all possible results from the two cases\n+        return cmp1->meet(cmp2);\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8286638\n+ * @summary Dominator failure because ConvL2I node becomes TOP, kills data-flow, but range-check does not collapse\n+ *          due to insufficient overflow\/underflow handling in CmpUNode::Value.\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN -Xcomp -XX:-TieredCompilation\n+ *                   -XX:CompileCommand=compileonly,compiler.rangechecks.TestRangeCheckCmpUUnderflow::*\n+ *                   -XX:RepeatCompilation=300\n+ *                   compiler.rangechecks.TestRangeCheckCmpUUnderflow\n+*\/\n+\n+package compiler.rangechecks;\n+\n+public class TestRangeCheckCmpUUnderflow {\n+    volatile int a;\n+    int b[];\n+    float c[];\n+    void e() {\n+        int g, f, i;\n+        for (g = 2;; g++) {\n+            for (i = g; i < 1; i++) {\n+                f = a;\n+                c[i - 1] -= b[i];\n+            }\n+        }\n+    }\n+    public static void main(String[] args) {\n+        try {\n+            TestRangeCheckCmpUUnderflow j = new TestRangeCheckCmpUUnderflow();\n+            j.e();\n+        } catch (Exception ex) {}\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestRangeCheckCmpUUnderflow.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}