{"files":[{"patch":"@@ -2052,0 +2052,8 @@\n+WB_ENTRY(jboolean, WB_IsDTraceIncluded(JNIEnv* env))\n+#if defined(DTRACE_ENABLED)\n+  return true;\n+#else\n+  return false;\n+#endif \/\/ DTRACE_ENABLED\n+WB_END\n+\n@@ -2697,0 +2705,1 @@\n+  {CC\"isDTraceIncluded\",                  CC\"()Z\",    (void*)&WB_IsDTraceIncluded },\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2920,0 +2920,12 @@\n+    } else if (match_option(option, \"-XX:+DTraceMethodProbes\")) {\n+      jio_fprintf(defaultStream::error_stream(),\n+                  \"DTraceMethodProbes flag is not applicable for this configuration\\n\");\n+      return JNI_EINVAL;\n+    } else if (match_option(option, \"-XX:+DTraceAllocProbes\")) {\n+      jio_fprintf(defaultStream::error_stream(),\n+                  \"DTraceAllocProbes flag is not applicable for this configuration\\n\");\n+      return JNI_EINVAL;\n+    } else if (match_option(option, \"-XX:+DTraceMonitorProbes\")) {\n+      jio_fprintf(defaultStream::error_stream(),\n+                  \"DTraceMonitorProbes flag is not applicable for this configuration\\n\");\n+      return JNI_EINVAL;\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+    vm.hasDTrace \\\n","filename":"test\/hotspot\/jtreg\/TEST.ROOT","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=with-dtrace\n@@ -27,0 +27,1 @@\n+ * @requires vm.hasDTrace\n@@ -29,1 +30,18 @@\n- * @run main\/othervm -XX:CompileCommand=compileonly,Test8168712.* -XX:CompileCommand=compileonly,*Object.* -XX:+DTraceMethodProbes -XX:-UseOnStackReplacement -XX:+DeoptimizeRandom compiler.runtime.Test8168712\n+ * @run main\/othervm -XX:CompileCommand=compileonly,Test8168712.*\n+ *                   -XX:CompileCommand=compileonly,*Object.*\n+ *                   -XX:+DTraceMethodProbes\n+ *                   -XX:-UseOnStackReplacement\n+ *                   -XX:+DeoptimizeRandom\n+ *                   compiler.runtime.Test8168712\n+ *\/\n+\n+\/**\n+ * @test id=without-dtrace\n+ * @requires vm.debug\n+ * @bug 8168712\n+ *\n+ * @run main\/othervm -XX:CompileCommand=compileonly,Test8168712.*\n+ *                   -XX:CompileCommand=compileonly,*Object.*\n+ *                   -XX:-UseOnStackReplacement\n+ *                   -XX:+DeoptimizeRandom\n+ *                   compiler.runtime.Test8168712\n","filename":"test\/hotspot\/jtreg\/compiler\/runtime\/Test8168712.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @requires vm.hasDTrace\n@@ -39,1 +40,0 @@\n-import jtreg.SkippedException;\n@@ -47,11 +47,1 @@\n-        {\n-            var pb = ProcessTools.createJavaProcessBuilder(\n-                    \"-XX:+ExtendedDTraceProbes\",\n-                    \"-version\");\n-            var oa = new OutputAnalyzer(pb.start());\n-            \/\/ This test only matters when build with DTRACE_ENABLED.\n-            if (oa.getExitValue() != 0) {\n-                throw new SkippedException(\"Not build using DTRACE_ENABLED\");\n-            }\n-        }\n-\n+        \/\/ This test only matters when build with DTRACE_ENABLED.\n","filename":"test\/hotspot\/jtreg\/serviceability\/7170638\/SDTProbesGNULinuxTest.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc.  All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test id=enabled\n+ * @bug 8281822\n+ * @summary Test DTrace options are accepted on suitable builds\n+ * @requires vm.flagless\n+ * @requires vm.hasDTrace\n+ *\n+ * @library \/test\/lib\n+ * @run driver DTraceOptionsTest true\n+ *\/\n+\n+\/*\n+ * @test id=disabled\n+ * @bug 8281822\n+ * @summary Test DTrace options are rejected on unsuitable builds\n+ * @requires vm.flagless\n+ * @requires !vm.hasDTrace\n+ *\n+ * @library \/test\/lib\n+ * @run driver DTraceOptionsTest disabled\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class DTraceOptionsTest {\n+    public static void main(String[] args) throws Throwable {\n+        boolean dtraceEnabled;\n+        if (args.length > 0) {\n+            dtraceEnabled = Boolean.parseBoolean(args[0]);\n+        } else {\n+            throw new IllegalArgumentException(\"Should provide the argument\");\n+        }\n+\n+        String[] options = {\n+            \"ExtendedDTraceProbes\",\n+            \"DTraceMethodProbes\",\n+            \"DTraceAllocProbes\",\n+            \"DTraceMonitorProbes\",\n+        };\n+\n+        for (String opt : options) {\n+            var pb = ProcessTools.createJavaProcessBuilder(\"-XX:+\" + opt, \"-version\");\n+            var oa = new OutputAnalyzer(pb.start());\n+            if (dtraceEnabled) {\n+                oa.shouldHaveExitValue(0);\n+            } else {\n+                oa.shouldNotHaveExitValue(0);\n+                oa.shouldContain(opt + \" flag is not applicable for this configuration\");\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/dtrace\/DTraceOptionsTest.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -105,0 +105,1 @@\n+        map.put(\"vm.hasDTrace\", this::vmHasDTrace);\n@@ -369,0 +370,7 @@\n+    }\n+\n+    \/**\n+     * @return \"true\" if the VM is compiled with DTrace\n+     *\/\n+    protected String vmHasDTrace() {\n+        return \"\" + WB.isDTraceIncluded();\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -635,0 +635,1 @@\n+  public native boolean isDTraceIncluded();\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -636,0 +636,1 @@\n+  public native boolean isDTraceIncluded();\n","filename":"test\/lib\/sun\/hotspot\/WhiteBox.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}