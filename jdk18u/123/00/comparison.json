{"files":[{"patch":"@@ -2362,1 +2362,0 @@\n-         n->req() == 2 &&\n@@ -2370,1 +2369,1 @@\n-      return n->req() == 2;\n+      return true;\n@@ -2385,0 +2384,3 @@\n+  if (n->is_predicated_vector()) {\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import jdk.incubator.vector.*;\n+import jdk.test.lib.format.ArrayDiff;\n+\n+\/*\n+ * @test\n+ * @bug 8286283\n+ * @summary Test correctness of macrologic optimization\n+ * @modules jdk.incubator.vector\n+ * @requires vm.cpu.features ~= \".*avx512f.*\"\n+ * @library \/test\/lib\n+ *\n+ * @run main compiler.vectorapi.Test8286283\n+ *\/\n+public class Test8286283 {\n+   public static final int LEN = 1024;\n+   public static VectorSpecies<Integer> SPECIES = IntVector.SPECIES_512;\n+\n+    public static void test_vec(int [] r, int [] a, int [] b, int [] c) {\n+        VectorMask<Integer> mask = VectorMask.fromLong(SPECIES, -1);\n+        for(int i = 0 ; i < r.length; i+=SPECIES.length()) {\n+            IntVector avec = IntVector.fromArray(SPECIES, a, i);\n+            IntVector bvec = IntVector.fromArray(SPECIES, b, i);\n+            IntVector cvec = IntVector.fromArray(SPECIES, c, i);\n+            avec.lanewise(VectorOperators.AND, bvec)\n+                .lanewise(VectorOperators.OR, cvec)\n+                .lanewise(VectorOperators.NOT)\n+                .lanewise(VectorOperators.NOT, mask)\n+                .reinterpretAsInts()\n+                .intoArray(r, i);\n+        }\n+    }\n+\n+    public static void test_scalar(int [] r, int [] a, int [] b, int [] c) {\n+        for(int i = 0; i < r.length; i++) {\n+            r[i] = ~(~(a[i] & b[i] | c[i]));\n+        }\n+    }\n+\n+    public static void main(String [] args) {\n+        int res = 0;\n+        int [] a = new int[LEN];\n+        int [] b = new int[LEN];\n+        int [] c = new int[LEN];\n+        int [] rv = new int[LEN];\n+        int [] rs = new int[LEN];\n+\n+        for(int i = 0 ; i < LEN; i++) {\n+            a[i] = i;\n+            b[i] = i+1;\n+            c[i] = i+2;\n+        }\n+\n+        for (int i = 0 ; i < 10000; i++) {\n+            test_vec(rv, a, b ,c);\n+            test_scalar(rs, a, b ,c);\n+        }\n+\n+        var diff = ArrayDiff.of(rv, rs);\n+        if (!diff.areEqual()) {\n+            throw new AssertionError(\"scalar vs vector result mismatch: \" + diff.format());\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/Test8286283.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}