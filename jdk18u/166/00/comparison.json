{"files":[{"patch":"@@ -1301,2 +1301,6 @@\n-  LabelObj* L_not_prim = new LabelObj();\n-  LabelObj* L_done = new LabelObj();\n+  \/\/ While reading off the universal constant mirror is less efficient than doing\n+  \/\/ another branch and returning the constant answer, this branchless code runs into\n+  \/\/ much less risk of confusion for C1 register allocator. The choice of the universe\n+  \/\/ object here is correct as long as it returns the same modifiers we would expect\n+  \/\/ from the primitive class itself. See spec for Class.getModifiers that provides\n+  \/\/ the typed array klasses with similar modifiers as their component types.\n@@ -1304,0 +1308,8 @@\n+  Klass* univ_klass_obj = Universe::byteArrayKlassObj();\n+  assert(univ_klass_obj->modifier_flags() == (JVM_ACC_ABSTRACT | JVM_ACC_FINAL | JVM_ACC_PUBLIC), \"Sanity\");\n+  LIR_Opr prim_klass = LIR_OprFact::metadataConst(univ_klass_obj);\n+\n+  LIR_Opr recv_klass = new_register(T_METADATA);\n+  __ move(new LIR_Address(receiver.result(), java_lang_Class::klass_offset(), T_ADDRESS), recv_klass, info);\n+\n+  \/\/ Check if this is a Java mirror of primitive type, and select the appropriate klass.\n@@ -1305,8 +1317,4 @@\n-  \/\/ Checking if it's a java mirror of primitive type\n-  __ move(new LIR_Address(receiver.result(), java_lang_Class::klass_offset(), T_ADDRESS), klass, info);\n-  __ cmp(lir_cond_notEqual, klass, LIR_OprFact::metadataConst(0));\n-  __ branch(lir_cond_notEqual, L_not_prim->label());\n-  __ move(LIR_OprFact::intConst(JVM_ACC_ABSTRACT | JVM_ACC_FINAL | JVM_ACC_PUBLIC), result);\n-  __ branch(lir_cond_always, L_done->label());\n-\n-  __ branch_destination(L_not_prim->label());\n+  __ cmp(lir_cond_equal, recv_klass, LIR_OprFact::metadataConst(0));\n+  __ cmove(lir_cond_equal, prim_klass, recv_klass, klass, T_ADDRESS);\n+\n+  \/\/ Get the answer.\n@@ -1314,1 +1322,0 @@\n-  __ branch_destination(L_done->label());\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":18,"deletions":11,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib\n+ * @run main\/othervm -Xint\n+ *                   -XX:CompileCommand=dontinline,*TestGetModifiers.test\n+ *                   compiler.intrinsics.klass.TestGetModifiers\n+ *\/\n+\n+\/*\n+ * @test\n+ * @requires vm.compiler1.enabled\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:TieredStopAtLevel=1 -XX:+TieredCompilation\n+ *                   -XX:CompileCommand=dontinline,*TestGetModifiers.test\n+ *                   compiler.intrinsics.klass.TestGetModifiers\n+ *\/\n+\n+\/*\n+ * @test\n+ * @requires vm.compiler2.enabled\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:-TieredCompilation\n+ *                   -XX:CompileCommand=dontinline,*TestGetModifiers.test\n+ *                   compiler.intrinsics.klass.TestGetModifiers\n+ *\/\n+\n+package compiler.intrinsics.klass;\n+\n+import java.lang.reflect.Modifier;\n+import static java.lang.reflect.Modifier.*;\n+\n+import jdk.test.lib.Asserts;\n+\n+public class TestGetModifiers {\n+    public static class T1 {\n+    }\n+\n+    public static final class T2 {\n+    }\n+\n+    private static class T3 {\n+    }\n+\n+    protected static class T4 {\n+    }\n+\n+    class T5 {\n+    }\n+\n+    interface T6 {\n+    }\n+\n+    static void test(Class cl, int expectedMods) {\n+        for (int i = 0; i < 100_000; i++) {\n+            int actualMods = cl.getModifiers();\n+            if (actualMods != expectedMods) {\n+                throw new IllegalStateException(\"Error with: \" + cl);\n+            }\n+        }\n+    }\n+\n+    public static void main(String... args) {\n+        test(T1.class,                                      PUBLIC | STATIC);\n+        test(T2.class,                                      PUBLIC | FINAL | STATIC);\n+        test(T3.class,                                      PRIVATE | STATIC);\n+        test(T4.class,                                      PROTECTED | STATIC);\n+        test(new TestGetModifiers().new T5().getClass(),    0);\n+        test(T6.class,                                      ABSTRACT | STATIC | INTERFACE);\n+\n+        test(int.class,                                     PUBLIC | ABSTRACT | FINAL);\n+        test(long.class,                                    PUBLIC | ABSTRACT | FINAL);\n+        test(double.class,                                  PUBLIC | ABSTRACT | FINAL);\n+        test(float.class,                                   PUBLIC | ABSTRACT | FINAL);\n+        test(char.class,                                    PUBLIC | ABSTRACT | FINAL);\n+        test(byte.class,                                    PUBLIC | ABSTRACT | FINAL);\n+        test(short.class,                                   PUBLIC | ABSTRACT | FINAL);\n+        test(void.class,                                    PUBLIC | ABSTRACT | FINAL);\n+        test(int[].class,                                   PUBLIC | ABSTRACT | FINAL);\n+        test(long[].class,                                  PUBLIC | ABSTRACT | FINAL);\n+        test(double[].class,                                PUBLIC | ABSTRACT | FINAL);\n+        test(float[].class,                                 PUBLIC | ABSTRACT | FINAL);\n+        test(char[].class,                                  PUBLIC | ABSTRACT | FINAL);\n+        test(byte[].class,                                  PUBLIC | ABSTRACT | FINAL);\n+        test(short[].class,                                 PUBLIC | ABSTRACT | FINAL);\n+        test(Object[].class,                                PUBLIC | ABSTRACT | FINAL);\n+        test(TestGetModifiers[].class,                      PUBLIC | ABSTRACT | FINAL);\n+\n+        test(new TestGetModifiers().getClass(),             PUBLIC);\n+        test(new T1().getClass(),                           PUBLIC | STATIC);\n+        test(new T2().getClass(),                           PUBLIC | FINAL | STATIC);\n+        test(new T3().getClass(),                           PRIVATE | STATIC);\n+        test(new T4().getClass(),                           PROTECTED | STATIC);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/klass\/TestGetModifiers.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}