{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -498,1 +498,4 @@\n-  int share  = cpu_shares();\n+\n+  \/\/ It's not a good idea to use cpu_shares() to limit the number\n+  \/\/ of CPUs used by the JVM. See JDK-8281181.\n+  int share  = UseContainerCpuShares ? cpu_shares() : -1;\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,0 +62,4 @@\n+  product(bool, UseContainerCpuShares, false,                           \\\n+          \"Include CPU shares in the CPU availability\"                  \\\n+          \" calculation.\")                                              \\\n+                                                                        \\\n","filename":"src\/hotspot\/os\/linux\/globals_linux.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-    static final String[] variables = {\"Memory Limit is:\", \"CPU Shares is:\", \"CPU Quota is:\", \"CPU Period is:\", \"active_processor_count:\"};\n+    static final String[] variables = {\"Memory Limit is:\", \"CPU Quota is:\", \"CPU Period is:\", \"active_processor_count:\"};\n","filename":"test\/hotspot\/jtreg\/containers\/cgroup\/PlainRead.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,0 +103,5 @@\n+        \/\/ OLD = use the -XX:+UseContainerCpuShares flag, which\n+        \/\/ may be removed in a future JDK release. See JDK-8281181.\n+        boolean OLD = true;\n+        boolean NEW = false;\n+\n@@ -111,1 +116,2 @@\n-                testAPCCombo(testCpuSet, 200*1000, 100*1000,   4*1024, true, 1);\n+                testAPCCombo(OLD, testCpuSet, 200*1000, 100*1000,   4*1024, true, 1);\n+                testAPCCombo(NEW, testCpuSet, 200*1000, 100*1000,   4*1024, true, 1);\n@@ -117,3 +123,7 @@\n-                testAPCCombo(testCpuSet, 200*1000, 100*1000, 4*1024, true, 2);\n-                testAPCCombo(testCpuSet, 200*1000, 100*1000, 1023,   true, 2);\n-                testAPCCombo(testCpuSet, 200*1000, 100*1000, 1023,   false,  1);\n+                testAPCCombo(OLD, testCpuSet, 200*1000, 100*1000, 4*1024, true, 2);\n+                testAPCCombo(OLD, testCpuSet, 200*1000, 100*1000, 1023,   true, 2);\n+                testAPCCombo(OLD, testCpuSet, 200*1000, 100*1000, 1023,   false,1);\n+\n+                testAPCCombo(NEW, testCpuSet, 200*1000, 100*1000, 4*1024, true, 2);\n+                testAPCCombo(NEW, testCpuSet, 200*1000, 100*1000, 1023,   true, 2);\n+                testAPCCombo(NEW, testCpuSet, 200*1000, 100*1000, 1023,   false,2);\n@@ -125,3 +135,7 @@\n-                testAPCCombo(testCpuSet, 100*1000, 100*1000, 2*1024, true, 1);\n-                testAPCCombo(testCpuSet, 200*1000, 100*1000, 1023,   true, 2);\n-                testAPCCombo(testCpuSet, 200*1000, 100*1000, 1023,   false,  1);\n+                testAPCCombo(OLD, testCpuSet, 100*1000, 100*1000, 2*1024, true, 1);\n+                testAPCCombo(OLD, testCpuSet, 200*1000, 100*1000, 1023,   true, 2);\n+                testAPCCombo(OLD, testCpuSet, 200*1000, 100*1000, 1023,   false,1);\n+\n+                testAPCCombo(NEW, testCpuSet, 100*1000, 100*1000, 2*1024, true, 1);\n+                testAPCCombo(NEW, testCpuSet, 200*1000, 100*1000, 1023,   true, 2);\n+                testAPCCombo(NEW, testCpuSet, 200*1000, 100*1000, 1023,   false,2);\n@@ -184,2 +198,5 @@\n-    \/\/ Test correctess of automatically selected active processor cound\n-    private static void testAPCCombo(String cpuset, int quota, int period, int shares,\n+    \/\/ Test correctess of automatically selected active processor count\n+    \/\/ Note: when -XX:+UseContainerCpuShares is removed,\n+    \/\/ useContainerCpuShares, shares, and usePreferContainerQuotaForCPUCount\n+    \/\/ should also be removed.\n+    private static void testAPCCombo(boolean useContainerCpuShares, String cpuset, int quota, int period, int shares,\n@@ -193,0 +210,1 @@\n+        System.out.println(\"useContainerCpuShares = \" + useContainerCpuShares);\n@@ -204,0 +222,1 @@\n+        if (useContainerCpuShares) opts.addJavaOpts(\"-XX:+UseContainerCpuShares\");\n@@ -211,0 +230,1 @@\n+    \/\/ Note: when -XX:+UseContainerCpuShares is removed, this test should also be removed.\n@@ -219,0 +239,1 @@\n+        opts.addJavaOpts(\"-XX:+UseContainerCpuShares\");\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestCPUAwareness.java","additions":31,"deletions":10,"binary":false,"changes":41,"status":"modified"}]}