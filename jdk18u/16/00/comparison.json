{"files":[{"patch":"@@ -112,9 +112,0 @@\n-        if (method == null) {\n-            \/\/ Must be a stub\n-            resultInstalledCode = new HotSpotRuntimeStub(name);\n-        } else {\n-            hsCompiledNmethod = (HotSpotCompiledNmethod) hsCompiledCode;\n-            HotSpotResolvedJavaMethodImpl hsMethod = (HotSpotResolvedJavaMethodImpl) method;\n-            resultInstalledCode = new HotSpotNmethod(hsMethod, name, isDefault, hsCompiledNmethod.id);\n-        }\n-\n@@ -127,1 +118,0 @@\n-\n@@ -137,0 +127,12 @@\n+\n+        if (method == null) {\n+            \/\/ Must be a stub\n+            resultInstalledCode = new HotSpotRuntimeStub(name);\n+        } else {\n+            hsCompiledNmethod = (HotSpotCompiledNmethod) hsCompiledCode;\n+            HotSpotResolvedJavaMethodImpl hsMethod = (HotSpotResolvedJavaMethodImpl) method;\n+            HotSpotNmethod nmethod = new HotSpotNmethod(hsMethod, name, isDefault, hsCompiledNmethod.id);\n+            nmethod.setSpeculationLog(speculationLog);\n+            resultInstalledCode = nmethod;\n+        }\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotCodeCacheProvider.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -71,2 +71,2 @@\n-     * the field records the nmethod's compile identifier. This value is used to confirm an entry in\n-     * the code cache retrieved by {@link #address} is indeed the nmethod represented by this\n+     * the field records the nmethod's compile identifier. This value is used to confirm if an entry\n+     * in the code cache retrieved by {@link #address} is indeed the nmethod represented by this\n@@ -88,0 +88,17 @@\n+    \/**\n+     * Attaches {@code log} to this object. If {@code log.managesFailedSpeculations() == true}, this\n+     * ensures the failed speculation list lives at least as long as this object.\n+     *\/\n+    public void setSpeculationLog(HotSpotSpeculationLog log) {\n+        this.speculationLog = log;\n+    }\n+\n+    \/**\n+     * The speculation log containing speculations embedded in the nmethod.\n+     *\n+     * If {@code speculationLog.managesFailedSpeculations() == true}, this field ensures the failed\n+     * speculation list lives at least as long as this object. This prevents deoptimization from\n+     * appending to an already freed list.\n+     *\/\n+    @SuppressWarnings(\"unused\") private HotSpotSpeculationLog speculationLog;\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotNmethod.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"}]}