{"files":[{"patch":"@@ -38,1 +38,1 @@\n-import java.awt.image.BufferedImage;\n+import java.awt.image.*;\n@@ -522,0 +522,60 @@\n+    static class BlitImageParticleRenderer extends FlatParticleRenderer {\n+        BufferedImage image;\n+\n+        BlitImageParticleRenderer(int n, float r, BufferedImage img) {\n+            super(n, r);\n+            image = img;\n+            fill(image);\n+        }\n+\n+        @Override\n+        public void render(Graphics2D g2d, int id, float[] x, float[] y, float[] vx, float[] vy) {\n+            g2d.drawImage(image, (int)(x[id] - r), (int)(y[id] - r), (int)(2*r), (int)(2*r), null);\n+        }\n+\n+        private static void fill(final Image image) {\n+            final Graphics2D graphics = (Graphics2D) image.getGraphics();\n+            graphics.setComposite(AlphaComposite.Src);\n+            for (int i = 0; i < image.getHeight(null); ++i) {\n+                graphics.setColor(new Color(i, 0, 0));\n+                graphics.fillRect(0, i, image.getWidth(null), 1);\n+            }\n+            graphics.dispose();\n+        }\n+\n+    }\n+\n+    static class SwBlitImageParticleRenderer extends BlitImageParticleRenderer {\n+\n+        SwBlitImageParticleRenderer(int n, float r, final int type) {\n+            super(n, r, makeUnmanagedBI(type));\n+        }\n+\n+        private static BufferedImage makeUnmanagedBI(final int type) {\n+            final BufferedImage bi = new BufferedImage(17, 33, type);\n+            final DataBuffer db = bi.getRaster().getDataBuffer();\n+            if (db instanceof DataBufferInt) {\n+                ((DataBufferInt) db).getData();\n+            } else if (db instanceof DataBufferShort) {\n+                ((DataBufferShort) db).getData();\n+            } else if (db instanceof DataBufferByte) {\n+                ((DataBufferByte) db).getData();\n+            }\n+            bi.setAccelerationPriority(0.0f);\n+            return bi;\n+        }\n+    }\n+\n+    static class SurfaceBlitImageParticleRenderer extends BlitImageParticleRenderer {\n+\n+        SurfaceBlitImageParticleRenderer(int n, float r, final int type) {\n+            super(n, r, makeManagedBI(type));\n+        }\n+\n+        private static BufferedImage makeManagedBI(final int type) {\n+            final BufferedImage bi = new BufferedImage(17, 33, type);\n+            bi.setAccelerationPriority(1.0f);\n+            return bi;\n+        }\n+    }\n+\n@@ -668,0 +728,4 @@\n+    private static final ParticleRenderer argbSwBlitImageRenderer = new SwBlitImageParticleRenderer(N, R, BufferedImage.TYPE_INT_ARGB);\n+    private static final ParticleRenderer bgrSwBlitImageRenderer = new SwBlitImageParticleRenderer(N, R, BufferedImage.TYPE_INT_BGR);\n+    private static final ParticleRenderer argbSurfaceBlitImageRenderer = new SurfaceBlitImageParticleRenderer(N, R, BufferedImage.TYPE_INT_ARGB);\n+    private static final ParticleRenderer bgrSurfaceBlitImageRenderer = new SurfaceBlitImageParticleRenderer(N, R, BufferedImage.TYPE_INT_BGR);\n@@ -836,0 +900,16 @@\n+    public void testArgbSwBlitImage() throws Exception {\n+        (new PerfMeter(\"ArgbSwBlitImage\")).exec(createPR(argbSwBlitImageRenderer)).report();\n+    }\n+\n+    public void testBgrSwBlitImage() throws Exception {\n+        (new PerfMeter(\"BgrSwBlitImage\")).exec(createPR(bgrSwBlitImageRenderer)).report();\n+    }\n+\n+    public void testArgbSurfaceBlitImage() throws Exception {\n+        (new PerfMeter(\"ArgbSurfaceBlitImageRenderer\")).exec(createPR(argbSurfaceBlitImageRenderer)).report();\n+    }\n+\n+    public void testBgrSurfaceBlitImage() throws Exception {\n+        (new PerfMeter(\"BgrSurfaceBlitImage\")).exec(createPR(bgrSurfaceBlitImageRenderer)).report();\n+    }\n+\n","filename":"src\/demo\/share\/java2d\/RenderPerfTest\/src\/renderperf\/RenderPerfTest.java","additions":81,"deletions":1,"binary":false,"changes":82,"status":"modified"}]}