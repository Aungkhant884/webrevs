{"files":[{"patch":"@@ -318,0 +318,4 @@\n+const int SCANLINE_MAX_VERTEX_SIZE = 4096;\n+const int VERTEX_STRUCT_SIZE = 8;\n+const int NUM_OF_VERTICES_PER_SCANLINE = 3;\n+\n@@ -333,13 +337,18 @@\n-    struct Vertex verts[2*scanlineCount];\n-\n-    for (int j = 0, i = 0; j < scanlineCount; j++) {\n-        \/\/ Translate each vertex by a fraction so\n-        \/\/ that we hit pixel centers.\n-        float x1 = ((float)*(scanlines++)) + 0.2f;\n-        float x2 = ((float)*(scanlines++)) + 1.2f;\n-        float y  = ((float)*(scanlines++)) + 0.5f;\n-        struct Vertex v1 = {{x1, y}};\n-        struct Vertex v2 = {{x2, y}};\n-        verts[i++] = v1;\n-        verts[i++] = v2;\n-    }\n+    int vertexSize = NUM_OF_VERTICES_PER_SCANLINE\n+        * scanlineCount * VERTEX_STRUCT_SIZE;\n+    J2dTraceLn1(J2D_TRACE_INFO, \"MTLRenderer_DrawScanlines: Total vertex size : %d\", vertexSize);\n+\n+    if (vertexSize <= SCANLINE_MAX_VERTEX_SIZE) {\n+        struct Vertex verts[NUM_OF_VERTICES_PER_SCANLINE * scanlineCount];\n+\n+        for (int j = 0, i = 0; j < scanlineCount; j++) {\n+            \/\/ Translate each vertex by a fraction so\n+            \/\/ that we hit pixel centers.\n+            float x1 = ((float)*(scanlines++)) + 0.2f;\n+            float x2 = ((float)*(scanlines++)) + 1.2f;\n+            float y  = ((float)*(scanlines++)) + 0.5f;\n+            struct Vertex v1 = {{x1, y}};\n+            struct Vertex v2 = {{x2, y}};\n+            verts[i++] = v1;\n+            verts[i++] = v2;\n+        }\n@@ -347,2 +356,49 @@\n-    [mtlEncoder setVertexBytes:verts length:sizeof(verts) atIndex:MeshVertexBuffer];\n-    [mtlEncoder drawPrimitives:MTLPrimitiveTypeLine vertexStart:0 vertexCount:2*scanlineCount];\n+        [mtlEncoder setVertexBytes:verts length:sizeof(verts) atIndex:MeshVertexBuffer];\n+        [mtlEncoder drawPrimitives:MTLPrimitiveTypeLine vertexStart:0\n+            vertexCount:NUM_OF_VERTICES_PER_SCANLINE * scanlineCount];\n+    } else {\n+        int remainingScanlineCount = vertexSize;\n+        do {\n+            if (remainingScanlineCount > SCANLINE_MAX_VERTEX_SIZE) {\n+                struct Vertex verts[SCANLINE_MAX_VERTEX_SIZE\/ VERTEX_STRUCT_SIZE];\n+\n+                for (int j = 0, i = 0; j < (SCANLINE_MAX_VERTEX_SIZE \/ (VERTEX_STRUCT_SIZE * 2)); j++) {\n+                    \/\/ Translate each vertex by a fraction so\n+                    \/\/ that we hit pixel centers.\n+                    float x1 = ((float)*(scanlines++)) + 0.2f;\n+                    float x2 = ((float)*(scanlines++)) + 1.2f;\n+                    float y  = ((float)*(scanlines++)) + 0.5f;\n+                    struct Vertex v1 = {{x1, y}};\n+                    struct Vertex v2 = {{x2, y}};\n+                    verts[i++] = v1;\n+                    verts[i++] = v2;\n+                }\n+\n+                [mtlEncoder setVertexBytes:verts length:sizeof(verts) atIndex:MeshVertexBuffer];\n+                [mtlEncoder drawPrimitives:MTLPrimitiveTypeLine vertexStart:0\n+                    vertexCount:(SCANLINE_MAX_VERTEX_SIZE \/ VERTEX_STRUCT_SIZE)];\n+                remainingScanlineCount -= SCANLINE_MAX_VERTEX_SIZE;\n+            } else {\n+                struct Vertex verts[remainingScanlineCount \/ VERTEX_STRUCT_SIZE];\n+\n+                for (int j = 0, i = 0; j < (remainingScanlineCount \/ (VERTEX_STRUCT_SIZE * 2)); j++) {\n+                    \/\/ Translate each vertex by a fraction so\n+                    \/\/ that we hit pixel centers.\n+                    float x1 = ((float)*(scanlines++)) + 0.2f;\n+                    float x2 = ((float)*(scanlines++)) + 1.2f;\n+                    float y  = ((float)*(scanlines++)) + 0.5f;\n+                    struct Vertex v1 = {{x1, y}};\n+                    struct Vertex v2 = {{x2, y}};\n+                    verts[i++] = v1;\n+                    verts[i++] = v2;\n+                }\n+\n+                [mtlEncoder setVertexBytes:verts length:sizeof(verts) atIndex:MeshVertexBuffer];\n+                [mtlEncoder drawPrimitives:MTLPrimitiveTypeLine vertexStart:0\n+                    vertexCount:(remainingScanlineCount \/ VERTEX_STRUCT_SIZE)];\n+                remainingScanlineCount -= remainingScanlineCount;\n+            }\n+            J2dTraceLn1(J2D_TRACE_INFO,\n+                \"MTLRenderer_DrawScanlines: Remaining vertex size %d\", remainingScanlineCount);\n+        } while (remainingScanlineCount != 0);\n+    }\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLRenderer.m","additions":71,"deletions":15,"binary":false,"changes":86,"status":"modified"}]}