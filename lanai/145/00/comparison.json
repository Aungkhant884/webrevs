{"files":[{"patch":"@@ -25,1 +25,0 @@\n-@property (readonly) id<MTLTexture> stencilAADataRef;\n@@ -28,0 +27,4 @@\n+@property NSUInteger shapeX;\n+@property NSUInteger shapeY;\n+@property NSUInteger shapeWidth;\n+@property NSUInteger shapeHeight;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLClip.h","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -56,1 +56,2 @@\n-    BOOL _aaClipReady;\n+    MTLOrigin _clipShapeOrigin;\n+    MTLSize _clipShapeSize;\n@@ -67,1 +68,0 @@\n-        _aaClipReady = NO;\n@@ -152,3 +152,2 @@\n-        NSUInteger width = (NSUInteger)dstOps->width;\n-        NSUInteger height = (NSUInteger)dstOps->height;\n-        NSUInteger size = width * height;\n+        _clipShapeSize = MTLSizeMake(0, 0, 1);\n+        _clipShapeOrigin = MTLOriginMake(0, 0, 0);\n@@ -190,5 +189,1 @@\n-        if (dstOps->width > 0 && dstOps->height > 0) {\n-            NSUInteger width = (NSUInteger)dstOps->width;\n-            NSUInteger height = (NSUInteger)dstOps->height;\n-            NSUInteger size = width * height;\n-\n+        if (_clipShapeSize.width > 0 && _clipShapeSize.height > 0) {\n@@ -197,2 +192,0 @@\n-            MTLSize sourceSize = MTLSizeMake(width, height, 1);\n-            MTLOrigin origin = MTLOriginMake(0, 0, 0);\n@@ -202,2 +195,2 @@\n-                            sourceOrigin:origin\n-                              sourceSize:sourceSize\n+                            sourceOrigin:_clipShapeOrigin\n+                              sourceSize:_clipShapeSize\n@@ -206,2 +199,2 @@\n-                  destinationBytesPerRow:width\n-                destinationBytesPerImage:size];\n+                  destinationBytesPerRow:_clipShapeSize.width\n+                destinationBytesPerImage:_clipShapeSize.width*_clipShapeSize.height];\n@@ -218,1 +211,0 @@\n-    _aaClipReady = NO;\n@@ -290,0 +282,12 @@\n+\n+            MTLRenderPassDescriptor* clearPassDescriptor = [MTLRenderPassDescriptor renderPassDescriptor];\n+            \/\/ set color buffer properties\n+            clearPassDescriptor.stencilAttachment.texture = _stencilTextureRef;\n+            clearPassDescriptor.stencilAttachment.clearStencil = 0;\n+            clearPassDescriptor.stencilAttachment.loadAction = MTLLoadActionClear;\n+\n+            id<MTLCommandBuffer> commandBuf = [_mtlc createCommandBuffer];\n+            id <MTLRenderCommandEncoder> clearEncoder = [commandBuf renderCommandEncoderWithDescriptor:clearPassDescriptor];\n+            [clearEncoder endEncoding];\n+            [commandBuf commit];\n+\n@@ -293,4 +297,0 @@\n-\n-            NSUInteger width = _stencilTextureRef.width;\n-            NSUInteger height = _stencilTextureRef.height;\n-\n@@ -299,3 +299,3 @@\n-                      sourceBytesPerRow:width\n-                    sourceBytesPerImage:width * height\n-                             sourceSize:MTLSizeMake(width, height, 1)\n+                      sourceBytesPerRow:_clipShapeSize.width\n+                    sourceBytesPerImage:_clipShapeSize.width * _clipShapeSize.height\n+                             sourceSize:_clipShapeSize\n@@ -305,1 +305,1 @@\n-                      destinationOrigin:MTLOriginMake(0, 0, 0)];\n+                      destinationOrigin:_clipShapeOrigin];\n@@ -314,2 +314,3 @@\n-- (id<MTLTexture>) stencilAADataRef {\n-    if (_dstOps == NULL) return nil;\n+- (NSUInteger)shapeX {\n+    return _clipShapeOrigin.x;\n+}\n@@ -317,1 +318,3 @@\n-    id <MTLTexture> _stencilAADataRef = _dstOps->pAAStencilData;\n+- (void)setShapeX:(NSUInteger)shapeX {\n+    _clipShapeOrigin.x = shapeX;\n+}\n@@ -319,1 +322,3 @@\n-    if (!_aaClipReady) {\n+- (NSUInteger)shapeY {\n+    return _clipShapeOrigin.y;\n+}\n@@ -321,1 +326,3 @@\n-        @autoreleasepool {\n+- (void)setShapeY:(NSUInteger)shapeY {\n+    _clipShapeOrigin.y = shapeY;\n+}\n@@ -323,25 +330,3 @@\n-            id <MTLCommandBuffer> cb = [_mtlc createCommandBuffer];\n-            id <MTLComputeCommandEncoder> computeEncoder = [cb computeCommandEncoder];\n-            id<MTLComputePipelineState> computePipelineState = [_mtlc.pipelineStateStorage getComputePipelineState:@\"stencil2tex\"];\n-            id <MTLBuffer> _stencilDataBufRef = _dstOps->pStencilDataBuf;\n-            id <MTLBuffer> _stencilAADataBufRef = _dstOps->pAAStencilDataBuf;\n-            NSUInteger width = _stencilAADataRef.width;\n-            NSUInteger height = _stencilAADataRef.height;\n-            NSUInteger size = width * height;\n-\n-            [computeEncoder setComputePipelineState:computePipelineState];\n-\n-            [computeEncoder setBuffer:_stencilDataBufRef offset:0 atIndex:0];\n-            [computeEncoder setBuffer:_stencilAADataBufRef offset:0 atIndex:1];\n-            NSUInteger threadGroupSize = computePipelineState.maxTotalThreadsPerThreadgroup;\n-            if (threadGroupSize > _stencilDataBufRef.length)\n-            {\n-                threadGroupSize = _stencilDataBufRef.length;\n-            }\n-\n-            MTLSize threadgroupCounts = MTLSizeMake(threadGroupSize, 1, 1);\n-            MTLSize threadgroups = MTLSizeMake(_stencilDataBufRef.length \/ threadGroupSize,\n-                                               1, 1);\n-            [computeEncoder dispatchThreadgroups:threadgroups\n-                           threadsPerThreadgroup:threadgroupCounts];\n-            [computeEncoder endEncoding];\n+- (NSUInteger)shapeWidth {\n+    return _clipShapeSize.width;\n+}\n@@ -349,1 +334,3 @@\n-            id <MTLBlitCommandEncoder> blitEncoder = [cb blitCommandEncoder];\n+- (void)setShapeWidth:(NSUInteger)shapeWidth {\n+    _clipShapeSize.width = shapeWidth;\n+}\n@@ -351,10 +338,3 @@\n-            [blitEncoder copyFromBuffer:_stencilAADataBufRef\n-                           sourceOffset:0\n-                      sourceBytesPerRow:width * 4\n-                    sourceBytesPerImage:size * 4\n-                             sourceSize:MTLSizeMake(width, height, 1)\n-                              toTexture:_stencilAADataRef\n-                       destinationSlice:0\n-                       destinationLevel:0\n-                      destinationOrigin:MTLOriginMake(0, 0, 0)];\n-            [blitEncoder endEncoding];\n+- (NSUInteger)shapeHeight {\n+    return _clipShapeSize.height;\n+}\n@@ -362,5 +342,2 @@\n-            [cb commit];\n-            _aaClipReady = YES;\n-        }\n-    }\n-    return _stencilAADataRef;\n+- (void)setShapeHeight:(NSUInteger)shapeHeight {\n+    _clipShapeSize.height = shapeHeight;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLClip.m","additions":48,"deletions":71,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -421,0 +421,5 @@\n+    jfloat shapeX1 = mtlc.clip.shapeX;\n+    jfloat shapeY1 = mtlc.clip.shapeY;\n+    jfloat shapeX2 = shapeX1 + mtlc.clip.shapeWidth;\n+    jfloat shapeY2 = shapeY1 + mtlc.clip.shapeHeight;\n+\n@@ -422,1 +427,0 @@\n-    jint *aaspans = spans;\n@@ -429,0 +433,7 @@\n+        if (mtlc.clip.stencilMaskGenerationInProgress == JNI_TRUE) {\n+            if (shapeX1 > x1) shapeX1 = x1;\n+            if (shapeY1 > y1) shapeY1 = y1;\n+            if (shapeX2 < x2) shapeX2 = x2;\n+            if (shapeY2 < y2) shapeY2 = y2;\n+        }\n+\n@@ -455,0 +466,16 @@\n+\n+    if (mtlc.clip.stencilMaskGenerationInProgress == JNI_TRUE) {\n+        if (shapeX1 < 0) shapeX1 = 0;\n+        if (shapeY1 < 0) shapeY1 = 0;\n+        if (shapeX1 > dest.width) shapeX1 = dest.width;\n+        if (shapeY1 > dest.height) shapeY1 = dest.height;\n+        if (shapeX2 < 0) shapeX2 = 0;\n+        if (shapeY2 < 0) shapeY2 = 0;\n+        if (shapeX2 > dest.width) shapeX2 = dest.width;\n+        if (shapeY2 > dest.height) shapeY2 = dest.height;\n+\n+        mtlc.clip.shapeX = (NSUInteger) shapeX1;\n+        mtlc.clip.shapeY = (NSUInteger) shapeY1;\n+        mtlc.clip.shapeWidth = (NSUInteger) (shapeX2 - shapeX1);\n+        mtlc.clip.shapeHeight = (NSUInteger) (shapeY2 - shapeY1);\n+    }\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLRenderer.m","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"}]}