{"files":[{"patch":"@@ -514,1 +514,1 @@\n-                    MTLRenderer_DrawParallelogram(mtlc, dstOps,\n+                    MTLRenderer_DrawParallelogram(mtlc, dstOps, JNI_FALSE,\n@@ -533,1 +533,1 @@\n-                    MTLRenderer_DrawAAParallelogram(mtlc, dstOps,\n+                    MTLRenderer_DrawParallelogram(mtlc, dstOps, JNI_TRUE,\n@@ -591,1 +591,1 @@\n-                    MTLRenderer_FillParallelogram(mtlc, dstOps,\n+                    MTLRenderer_FillParallelogram(mtlc, dstOps, JNI_FALSE,\n@@ -606,1 +606,1 @@\n-                    MTLRenderer_FillAAParallelogram(mtlc, dstOps,\n+                    MTLRenderer_FillParallelogram(mtlc, dstOps, JNI_TRUE,\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLRenderQueue.m","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-void MTLRenderer_DrawParallelogram(MTLContext *mtlc, BMTLSDOps * dstOps,\n+void MTLRenderer_DrawParallelogram(MTLContext *mtlc, BMTLSDOps * dstOps, jboolean isAA,\n@@ -58,5 +58,0 @@\n-void MTLRenderer_DrawAAParallelogram(MTLContext *mtlc, BMTLSDOps *dstOps,\n-                                     jfloat fx11, jfloat fy11,\n-                                     jfloat dx21, jfloat dy21,\n-                                     jfloat dx12, jfloat dy12,\n-                                     jfloat lw21, jfloat lw12);\n@@ -68,1 +63,1 @@\n-void MTLRenderer_FillParallelogram(MTLContext *mtlc, BMTLSDOps * dstOps,\n+void MTLRenderer_FillParallelogram(MTLContext *mtlc, BMTLSDOps * dstOps, jboolean isAA,\n@@ -72,7 +67,0 @@\n-void MTLRenderer_FillAAParallelogram(MTLContext *mtlc, BMTLSDOps *dstOps,\n-                                     jfloat fx11, jfloat fy11,\n-                                     jfloat dx21, jfloat dy21,\n-                                     jfloat dx12, jfloat dy12);\n-\n-void MTLRenderer_EnableAAParallelogramProgram();\n-void MTLRenderer_DisableAAParallelogramProgram();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLRenderer.h","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -427,1 +427,1 @@\n-MTLRenderer_FillParallelogram(MTLContext *mtlc, BMTLSDOps * dstOps,\n+MTLRenderer_FillParallelogram(MTLContext *mtlc, BMTLSDOps * dstOps, jboolean isAA,\n@@ -439,2 +439,2 @@\n-    J2dTraceLn7(J2D_TRACE_INFO,\n-                \"MTLRenderer_FillParallelogram \"\n+    J2dTraceLn8(J2D_TRACE_INFO,\n+                \"MTLRenderer_FillParallelogram (isAA = %d)\"\n@@ -444,0 +444,1 @@\n+                isAA,\n@@ -456,2 +457,9 @@\n-    id<MTLRenderCommandEncoder> mtlEncoder = [mtlc.encoderManager getRenderEncoder:dstOps];\n-    if (mtlEncoder == nil)\n+    id<MTLRenderCommandEncoder> mtlEncoder = nil;\n+    if (isAA == JNI_TRUE) {\n+        mtlEncoder = [mtlc.encoderManager getAARenderEncoder:dstOps];\n+    } else {\n+        mtlEncoder = [mtlc.encoderManager getRenderEncoder:dstOps];\n+    }\n+\n+    if (mtlEncoder == nil) {\n+        J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLRenderer_FillParallelogram: error creating MTLRenderCommandEncoder.\");\n@@ -459,0 +467,1 @@\n+    }\n@@ -465,1 +474,1 @@\n-MTLRenderer_DrawParallelogram(MTLContext *mtlc, BMTLSDOps * dstOps,\n+MTLRenderer_DrawParallelogram(MTLContext *mtlc, BMTLSDOps * dstOps, jboolean isAA,\n@@ -481,0 +490,1 @@\n+    J2dTraceLn1(J2D_TRACE_INFO, \"MTLRenderer_DrawParallelogram (isAA = %d)\", isAA);\n@@ -482,1 +492,0 @@\n-                \"MTLRenderer_DrawParallelogram \"\n@@ -577,2 +586,9 @@\n-        id<MTLRenderCommandEncoder> mtlEncoder = [mtlc.encoderManager getRenderEncoder:dstOps];\n-        if (mtlEncoder == nil)\n+        id<MTLRenderCommandEncoder> mtlEncoder = nil;\n+        if (isAA == JNI_TRUE) {\n+            mtlEncoder = [mtlc.encoderManager getAARenderEncoder:dstOps];\n+        } else {\n+            mtlEncoder = [mtlc.encoderManager getRenderEncoder:dstOps];\n+        }\n+\n+        if (mtlEncoder == nil) {\n+            J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLRenderer_DrawParallelogram: error creating MTLRenderCommandEncoder.\");\n@@ -580,0 +596,1 @@\n+        }\n@@ -592,174 +609,1 @@\n-        MTLRenderer_FillParallelogram(mtlc, dstOps, ox11, oy11, dx21, dy21, dx12, dy12);\n-    }\n-}\n-\n-\n-static GLhandleARB aaPgramProgram = 0;\n-\n-\/*\n- * This shader fills the space between an outer and inner parallelogram.\n- * It can be used to draw an outline by specifying both inner and outer\n- * values.  It fills pixels by estimating what portion falls inside the\n- * outer shape, and subtracting an estimate of what portion falls inside\n- * the inner shape.  Specifying both inner and outer values produces a\n- * standard \"wide outline\".  Specifying an inner shape that falls far\n- * outside the outer shape allows the same shader to fill the outer\n- * shape entirely since pixels that fall within the outer shape are never\n- * inside the inner shape and so they are filled based solely on their\n- * coverage of the outer shape.\n- *\n- * The setup code renders this shader over the bounds of the outer\n- * shape (or the only shape in the case of a fill operation) and\n- * sets the texture 0 coordinates so that 0,0=>0,1=>1,1=>1,0 in those\n- * texture coordinates map to the four corners of the parallelogram.\n- * Similarly the texture 1 coordinates map the inner shape to the\n- * unit square as well, but in a different coordinate system.\n- *\n- * When viewed in the texture coordinate systems the parallelograms\n- * we are filling are unit squares, but the pixels have then become\n- * tiny parallelograms themselves.  Both of the texture coordinate\n- * systems are affine transforms so the rate of change in X and Y\n- * of the texture coordinates are essentially constants and happen\n- * to correspond to the size and direction of the slanted sides of\n- * the distorted pixels relative to the \"square mapped\" boundary\n- * of the parallelograms.\n- *\n- * The shader uses the dFdx() and dFdy() functions to measure the \"rate\n- * of change\" of these texture coordinates and thus gets an accurate\n- * measure of the size and shape of a pixel relative to the two\n- * parallelograms.  It then uses the bounds of the size and shape\n- * of a pixel to intersect with the unit square to estimate the\n- * coverage of the pixel.  Unfortunately, without a lot more work\n- * to calculate the exact area of intersection between a unit\n- * square (the original parallelogram) and a parallelogram (the\n- * distorted pixel), this shader only approximates the pixel\n- * coverage, but emperically the estimate is very useful and\n- * produces visually pleasing results, if not theoretically accurate.\n- *\/\n-static const char *aaPgramShaderSource =\n-    \"void main() {\"\n-    \/\/ Calculate the vectors for the \"legs\" of the pixel parallelogram\n-    \/\/ for the outer parallelogram.\n-    \"    vec2 oleg1 = dFdx(gl_TexCoord[0].st);\"\n-    \"    vec2 oleg2 = dFdy(gl_TexCoord[0].st);\"\n-    \/\/ Calculate the bounds of the distorted pixel parallelogram.\n-    \"    vec2 corner = gl_TexCoord[0].st - (oleg1+oleg2)\/2.0;\"\n-    \"    vec2 omin = min(corner, corner+oleg1);\"\n-    \"    omin = min(omin, corner+oleg2);\"\n-    \"    omin = min(omin, corner+oleg1+oleg2);\"\n-    \"    vec2 omax = max(corner, corner+oleg1);\"\n-    \"    omax = max(omax, corner+oleg2);\"\n-    \"    omax = max(omax, corner+oleg1+oleg2);\"\n-    \/\/ Calculate the vectors for the \"legs\" of the pixel parallelogram\n-    \/\/ for the inner parallelogram.\n-    \"    vec2 ileg1 = dFdx(gl_TexCoord[1].st);\"\n-    \"    vec2 ileg2 = dFdy(gl_TexCoord[1].st);\"\n-    \/\/ Calculate the bounds of the distorted pixel parallelogram.\n-    \"    corner = gl_TexCoord[1].st - (ileg1+ileg2)\/2.0;\"\n-    \"    vec2 imin = min(corner, corner+ileg1);\"\n-    \"    imin = min(imin, corner+ileg2);\"\n-    \"    imin = min(imin, corner+ileg1+ileg2);\"\n-    \"    vec2 imax = max(corner, corner+ileg1);\"\n-    \"    imax = max(imax, corner+ileg2);\"\n-    \"    imax = max(imax, corner+ileg1+ileg2);\"\n-    \/\/ Clamp the bounds of the parallelograms to the unit square to\n-    \/\/ estimate the intersection of the pixel parallelogram with\n-    \/\/ the unit square.  The ratio of the 2 rectangle areas is a\n-    \/\/ reasonable estimate of the proportion of coverage.\n-    \"    vec2 o1 = clamp(omin, 0.0, 1.0);\"\n-    \"    vec2 o2 = clamp(omax, 0.0, 1.0);\"\n-    \"    float oint = (o2.y-o1.y)*(o2.x-o1.x);\"\n-    \"    float oarea = (omax.y-omin.y)*(omax.x-omin.x);\"\n-    \"    vec2 i1 = clamp(imin, 0.0, 1.0);\"\n-    \"    vec2 i2 = clamp(imax, 0.0, 1.0);\"\n-    \"    float iint = (i2.y-i1.y)*(i2.x-i1.x);\"\n-    \"    float iarea = (imax.y-imin.y)*(imax.x-imin.x);\"\n-    \/\/ Proportion of pixel in outer shape minus the proportion\n-    \/\/ of pixel in the inner shape == the coverage of the pixel\n-    \/\/ in the area between the two.\n-    \"    float coverage = oint\/oarea - iint \/ iarea;\"\n-    \"    gl_FragColor = gl_Color * coverage;\"\n-    \"}\";\n-\n-#define ADJUST_PGRAM(V1, DV, V2) \\\n-    do { \\\n-        if ((DV) >= 0) { \\\n-            (V2) += (DV); \\\n-        } else { \\\n-            (V1) += (DV); \\\n-        } \\\n-    } while (0)\n-\n-\/\/ Invert the following transform:\n-\/\/ DeltaT(0, 0) == (0,       0)\n-\/\/ DeltaT(1, 0) == (DX1,     DY1)\n-\/\/ DeltaT(0, 1) == (DX2,     DY2)\n-\/\/ DeltaT(1, 1) == (DX1+DX2, DY1+DY2)\n-\/\/ TM00 = DX1,   TM01 = DX2,   (TM02 = X11)\n-\/\/ TM10 = DY1,   TM11 = DY2,   (TM12 = Y11)\n-\/\/ Determinant = TM00*TM11 - TM01*TM10\n-\/\/             =  DX1*DY2  -  DX2*DY1\n-\/\/ Inverse is:\n-\/\/ IM00 =  TM11\/det,   IM01 = -TM01\/det\n-\/\/ IM10 = -TM10\/det,   IM11 =  TM00\/det\n-\/\/ IM02 = (TM01 * TM12 - TM11 * TM02) \/ det,\n-\/\/ IM12 = (TM10 * TM02 - TM00 * TM12) \/ det,\n-\n-#define DECLARE_MATRIX(MAT) \\\n-    jfloat MAT ## 00, MAT ## 01, MAT ## 02, MAT ## 10, MAT ## 11, MAT ## 12\n-\n-#define GET_INVERTED_MATRIX(MAT, X11, Y11, DX1, DY1, DX2, DY2, RET_CODE) \\\n-    do { \\\n-        jfloat det = DX1*DY2 - DX2*DY1; \\\n-        if (det == 0) { \\\n-            RET_CODE; \\\n-        } \\\n-        MAT ## 00 = DY2\/det; \\\n-        MAT ## 01 = -DX2\/det; \\\n-        MAT ## 10 = -DY1\/det; \\\n-        MAT ## 11 = DX1\/det; \\\n-        MAT ## 02 = (DX2 * Y11 - DY2 * X11) \/ det; \\\n-        MAT ## 12 = (DY1 * X11 - DX1 * Y11) \/ det; \\\n-    } while (0)\n-\n-#define TRANSFORM(MAT, TX, TY, X, Y) \\\n-    do { \\\n-        TX = (X) * MAT ## 00 + (Y) * MAT ## 01 + MAT ## 02; \\\n-        TY = (X) * MAT ## 10 + (Y) * MAT ## 11 + MAT ## 12; \\\n-    } while (0)\n-\n-void\n-MTLRenderer_FillAAParallelogram(MTLContext *mtlc, BMTLSDOps *dstOps,\n-                                jfloat fx11, jfloat fy11,\n-                                jfloat dx21, jfloat dy21,\n-                                jfloat dx12, jfloat dy12)\n-{\n-    if (mtlc == NULL || dstOps == NULL || dstOps->pTexture == NULL) {\n-        J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLRenderer_FillParallelogram: current dest is null\");\n-        return;\n-    }\n-\n-    J2dTraceLn7(J2D_TRACE_INFO,\n-                \"MTLRenderer_FillAAParallelogram \"\n-                \"(x=%6.2f y=%6.2f \"\n-                \"dx1=%6.2f dy1=%6.2f \"\n-                \"dx2=%6.2f dy2=%6.2f dst tex=%p)\",\n-                fx11, fy11,\n-                dx21, dy21,\n-                dx12, dy12, dstOps->pTexture);\n-\n-    struct Vertex verts[QUAD_VERTEX_COUNT] = {\n-            { {fx11, fy11}},\n-            { {fx11+dx21, fy11+dy21}},\n-            { {fx11+dx12, fy11+dy12}},\n-            { {fx11 + dx21 + dx12, fy11+ dy21 + dy12}\n-            }};\n-\n-    id<MTLTexture> dstTxt = dstOps->pTexture;\n-\n-    \/\/ Encode render command.\n-    id<MTLRenderCommandEncoder> mtlEncoder =\n-        [mtlc.encoderManager getAARenderEncoder:dstOps];\n-\n-    if (mtlEncoder == nil) {\n-        return;\n+        MTLRenderer_FillParallelogram(mtlc, dstOps, isAA, ox11, oy11, dx21, dy21, dx12, dy12);\n@@ -767,56 +611,0 @@\n-\n-    [mtlEncoder setVertexBytes:verts length:sizeof(verts) atIndex:MeshVertexBuffer];\n-    [mtlEncoder drawPrimitives:MTLPrimitiveTypeTriangleStrip vertexStart:0 vertexCount: QUAD_VERTEX_COUNT];\n-}\n-\n-void\n-MTLRenderer_FillAAParallelogramInnerOuter(MTLContext *mtlc, MTLSDOps *dstOps,\n-                                          jfloat ox11, jfloat oy11,\n-                                          jfloat ox21, jfloat oy21,\n-                                          jfloat ox12, jfloat oy12,\n-                                          jfloat ix11, jfloat iy11,\n-                                          jfloat ix21, jfloat iy21,\n-                                          jfloat ix12, jfloat iy12)\n-{\n-    \/\/TODO\n-    J2dTraceLn(J2D_TRACE_ERROR, \"MTLRenderer_FillAAParallelogramInnerOuter -- :TODO\");\n-}\n-\n-void\n-MTLRenderer_DrawAAParallelogram(MTLContext *mtlc, BMTLSDOps *dstOps,\n-                                jfloat fx11, jfloat fy11,\n-                                jfloat dx21, jfloat dy21,\n-                                jfloat dx12, jfloat dy12,\n-                                jfloat lwr21, jfloat lwr12)\n-{\n-    \/\/TODO\n-    \/\/ dx,dy for line width in the \"21\" and \"12\" directions.\n-    jfloat ldx21, ldy21, ldx12, ldy12;\n-    \/\/ parameters for \"outer\" parallelogram\n-    jfloat ofx11, ofy11, odx21, ody21, odx12, ody12;\n-    \/\/ parameters for \"inner\" parallelogram\n-    jfloat ifx11, ify11, idx21, idy21, idx12, idy12;\n-\n-    J2dTraceLn8(J2D_TRACE_ERROR,\n-                \"MTLRenderer_DrawAAParallelogram -- :TODO\"\n-                \"(x=%6.2f y=%6.2f \"\n-                \"dx1=%6.2f dy1=%6.2f lwr1=%6.2f \"\n-                \"dx2=%6.2f dy2=%6.2f lwr2=%6.2f)\",\n-                fx11, fy11,\n-                dx21, dy21, lwr21,\n-                dx12, dy12, lwr12);\n-\n-}\n-\n-void\n-MTLRenderer_EnableAAParallelogramProgram()\n-{\n-    \/\/TODO\n-    J2dTraceLn(J2D_TRACE_INFO, \"MTLRenderer_EnableAAParallelogramProgram -- :TODO\");\n-}\n-\n-void\n-MTLRenderer_DisableAAParallelogramProgram()\n-{\n-    \/\/TODO\n-    J2dTraceLn(J2D_TRACE_INFO, \"MTLRenderer_DisableAAParallelogramProgram -- :TODO\");\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLRenderer.m","additions":27,"deletions":239,"binary":false,"changes":266,"status":"modified"}]}