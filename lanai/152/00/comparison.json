{"files":[{"patch":"@@ -95,0 +95,43 @@\n+template <typename Uniforms> inline\n+float4 frag_single_grad(float a, Uniforms uniforms)\n+{\n+    int fa = floor(a);\n+    if (uniforms.isCyclic) {\n+        if (fa%2) {\n+            a = 1.0 + fa - a;\n+        } else {\n+            a = a - fa;\n+        }\n+    } else {\n+        a = saturate(a);\n+    }\n+    return mix(uniforms.color1, uniforms.color2, a);\n+}\n+\n+template <typename Uniforms> inline\n+float4 frag_multi_grad(float a, Uniforms uniforms)\n+{\n+      if (uniforms.cycleMethod > GradNoCycle) {\n+          int fa = floor(a);\n+          a = a - fa;\n+          if (uniforms.cycleMethod == GradReflect && fa%2) {\n+              a = 1.0 - a;\n+          }\n+      } else {\n+          a = saturate(a);\n+      }\n+\n+      int n = 0;\n+      for (;n < GRAD_MAX_FRACTIONS - 1; n++) {\n+          if (a <= uniforms.fract[n + 1]) break;\n+      }\n+\n+      a = (a - uniforms.fract[n]) \/ (uniforms.fract[n + 1] - uniforms.fract[n]);\n+\n+      float4 c = mix(uniforms.color[n], uniforms.color[n + 1], a);\n+      if (uniforms.isLinear) {\n+          c.rgb = 1.055 * pow(c.rgb, float3(0.416667)) - 0.055;\n+      }\n+      return c;\n+}\n+\n@@ -290,15 +333,1 @@\n-    int fa = floor(a);\n-    if (uniforms.isCyclic) {\n-        if (fa%2) {\n-            a = 1.0 + fa - a;\n-        } else {\n-            a = a - fa;\n-        }\n-    } else {\n-        a = saturate(a);\n-    }\n-    float4 c = mix(uniforms.color1, uniforms.color2, a);\n-    return half4(c.r*renderColor.a,\n-                 c.g*renderColor.a,\n-                 c.b*renderColor.a,\n-                 c.a*renderColor.a) * uniforms.extraAlpha;\n+    return half4(frag_single_grad(a, uniforms)*renderColor.a)*uniforms.extraAlpha;\n@@ -315,1 +344,0 @@\n-\n@@ -318,30 +346,1 @@\n-    float lf = 1.0\/(uniforms.numFracts - 1);\n-\n-    if (uniforms.cycleMethod > GradNoCycle) {\n-        int fa = floor(a);\n-        a = a - fa;\n-        if (uniforms.cycleMethod == GradReflect && fa%2) {\n-            a = 1.0 - a;\n-        }\n-    }  else {\n-        a = saturate(a);\n-    }\n-\n-    int n = floor(a\/lf);\n-    if (uniforms.cycleMethod > GradNoCycle) {\n-        n = ((n % uniforms.numFracts) + uniforms.numFracts) % uniforms.numFracts;\n-    } else {\n-        if (n < 0) n = 0;\n-        if (n > uniforms.numFracts - 2) n = uniforms.numFracts - 2;\n-    }\n-    a = (a - n*lf)\/lf;\n-    float4 c = mix(uniforms.color[n], uniforms.color[n + 1], a);\n-\n-    if (uniforms.isLinear) {\n-        c.rgb = 1.055 * pow(c.rgb, float3(0.416667)) - 0.055;\n-    }\n-\n-    return half4(c.r*renderColor.a,\n-                 c.g*renderColor.a,\n-                 c.b*renderColor.a,\n-                 c.a*renderColor.a) * uniforms.extraAlpha;\n+    return half4(frag_multi_grad(a, uniforms)*renderColor.a)*uniforms.extraAlpha;\n@@ -364,31 +363,1 @@\n-\n-    float lf = 1.0\/(uniforms.numFracts - 1);\n-\n-    if (uniforms.cycleMethod > GradNoCycle) {\n-        int fa = floor(a);\n-        a = a - fa;\n-        if (uniforms.cycleMethod == GradReflect && fa%2) {\n-            a = 1.0 - a;\n-        }\n-    } else {\n-        a = saturate(a);\n-    }\n-\n-    int n = floor(a\/lf);\n-    if (uniforms.cycleMethod > GradNoCycle) {\n-        n = ((n % uniforms.numFracts) + uniforms.numFracts) % uniforms.numFracts;\n-    } else {\n-        if (n < 0) n = 0;\n-        if (n > uniforms.numFracts - 2) n = uniforms.numFracts - 2;\n-    }\n-    a = (a - n*lf)\/lf;\n-    float4 c = mix(uniforms.color[n], uniforms.color[n + 1], a);\n-\n-    if (uniforms.isLinear) {\n-        c.rgb = 1.055 * pow(c.rgb, float3(0.416667)) - 0.055;\n-    }\n-\n-    return half4(c.r*renderColor.a,\n-                     c.g*renderColor.a,\n-                     c.b*renderColor.a,\n-                     c.a*renderColor.a) * uniforms.extraAlpha;\n+    return half4(frag_multi_grad(a, uniforms)*renderColor.a)*uniforms.extraAlpha;\n@@ -537,12 +506,1 @@\n-    int fa = floor(a);\n-    if (uniforms.isCyclic) {\n-        if (fa%2) {\n-            a = 1.0 + fa - a;\n-        } else {\n-            a = a - fa;\n-        }\n-    } else {\n-        a = saturate(a);\n-    }\n-    float4 c = mix(uniforms.color1, uniforms.color2, a);\n-    return half4(c) * uniforms.extraAlpha;\n+    return half4(frag_single_grad(a, uniforms)) * uniforms.extraAlpha;\n@@ -555,26 +513,2 @@\n-    float  a = dot(v,uniforms.params);\n-    float lf = 1.0\/(uniforms.numFracts - 1);\n-\n-    if (uniforms.cycleMethod > GradNoCycle) {\n-        int fa = floor(a);\n-        a = a - fa;\n-        if (uniforms.cycleMethod == GradReflect && fa%2) {\n-            a = 1.0 - a;\n-        }\n-    } else {\n-        a = saturate(a);\n-    }\n-\n-    int n = floor(a\/lf);\n-    if (uniforms.cycleMethod > GradNoCycle) {\n-        n = ((n % uniforms.numFracts) + uniforms.numFracts) % uniforms.numFracts;\n-    } else {\n-        if (n < 0) n = 0;\n-        if (n > uniforms.numFracts - 2) n = uniforms.numFracts - 2;\n-    }\n-    a = (a - n*lf)\/lf;\n-    float4 c = mix(uniforms.color[n], uniforms.color[n + 1], a);\n-    if (uniforms.isLinear) {\n-        c.rgb = 1.055 * pow(c.rgb, float3(0.416667)) - 0.055;\n-    }\n-    return half4(c) * uniforms.extraAlpha;\n+    float  a = dot(v, uniforms.params);\n+    return half4(frag_multi_grad(a, uniforms))*uniforms.extraAlpha;\n@@ -590,27 +524,1 @@\n-\n-    float lf = 1.0\/(uniforms.numFracts - 1);\n-\n-    if (uniforms.cycleMethod > GradNoCycle) {\n-        int fa = floor(a);\n-        a = a - fa;\n-        if (uniforms.cycleMethod == GradReflect && fa%2) {\n-            a = 1.0 - a;\n-        }\n-    } else {\n-        a = saturate(a);\n-    }\n-\n-    int n = floor(a\/lf);\n-    if (uniforms.cycleMethod > GradNoCycle) {\n-        n = ((n % uniforms.numFracts) + uniforms.numFracts) % uniforms.numFracts;\n-    } else {\n-        if (n < 0) n = 0;\n-        if (n > uniforms.numFracts - 2) n = uniforms.numFracts - 2;\n-    }\n-    a = (a - n*lf)\/lf;\n-    float4 c = mix(uniforms.color[n], uniforms.color[n + 1], a);\n-\n-    if (uniforms.isLinear) {\n-            c.rgb = 1.055 * pow(c.rgb, float3(0.416667)) - 0.055;\n-    }\n-    return half4(c) * uniforms.extraAlpha;\n+    return half4(frag_multi_grad(a, uniforms))*uniforms.extraAlpha;\n@@ -619,1 +527,0 @@\n-\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/shaders.metal","additions":50,"deletions":143,"binary":false,"changes":193,"status":"modified"}]}