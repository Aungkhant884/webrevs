{"files":[{"patch":"@@ -620,0 +620,10 @@\n+kernel void rgb_to_rgba(const device uchar *imageBuffer [[buffer(0)]],\n+                        device uchar *outputBuffer [[buffer(1)]],\n+                        uint gid [[thread_position_in_grid]])\n+{\n+    outputBuffer[4 * gid]     = imageBuffer[4 * gid];     \/\/ r\n+    outputBuffer[4 * gid + 1] = imageBuffer[4 * gid + 1]; \/\/ g\n+    outputBuffer[4 * gid + 2] = imageBuffer[4 * gid + 2]; \/\/ b\n+    outputBuffer[4 * gid + 3] = 255;                      \/\/ a\n+}\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/shaders.metal","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        { MTLPixelFormatBGRA8Unorm, 0, 1, nil }, \/* 2 - IntRgb       *\/\n+        { MTLPixelFormatBGRA8Unorm, 0, 1, @\"rgb_to_rgba\" }, \/* 2 - IntRgb       *\/\n@@ -166,0 +166,3 @@\n+    if (dw < sw || dh < sh) {\n+        J2dTraceLn4(J2D_TRACE_WARNING, \"replaceTextureRegion: dest size: (%d, %d) less than source size: (%d, %d)\", dw, dh, sw, sh);\n+    }\n@@ -173,2 +176,0 @@\n-        \/\/ NOTE: we might want to fill alpha channel when !rfi->hasAlpha\n-\n@@ -229,1 +230,1 @@\n-        MTLRasterFormatInfo * rfi, jboolean useBlitEncoder, jint hint,\n+        MTLRasterFormatInfo *rfi, jint hint,\n@@ -249,17 +250,3 @@\n-    \/\/ TODO: useBlitEncoder is always false, remove dead code\n-    if (useBlitEncoder) {\n-        id <MTLBlitCommandEncoder> blitEncoder = [mtlc.encoderManager createBlitEncoder];\n-        [blitEncoder copyFromTexture:texBuff\n-                         sourceSlice:0\n-                         sourceLevel:0\n-                        sourceOrigin:MTLOriginMake(0, 0, 0)\n-                          sourceSize:MTLSizeMake(sw, sh, 1)\n-                           toTexture:dest\n-                    destinationSlice:0\n-                    destinationLevel:0\n-                   destinationOrigin:MTLOriginMake(dx1, dy1, 0)];\n-        [blitEncoder endEncoding];\n-    } else {\n-        drawTex2Tex(mtlc, texBuff, dest, !rfi->hasAlpha, bmtlsdOps->isOpaque, hint,\n-                    0, 0, sw, sh, dx1, dy1, dx2, dy2);\n-    }\n+\n+    drawTex2Tex(mtlc, texBuff, dest, !rfi->hasAlpha, bmtlsdOps->isOpaque, hint,\n+                0, 0, sw, sh, dx1, dy1, dx2, dy2);\n@@ -585,4 +572,0 @@\n-            const jboolean useReplaceRegion = texture ||\n-                    (!rfi.hasAlpha\n-                     && !xform\n-                     && isIntegerAndUnscaled(sx1, sy1, sx2, sy2, dx1, dy1, dx2, dy2));\n@@ -590,17 +573,4 @@\n-            if (useReplaceRegion) {\n-                if (dstOps->isOpaque || rfi.hasAlpha) {\n-#ifdef TRACE_BLIT\n-                    J2dTraceImpl(J2D_TRACE_VERBOSE, JNI_TRUE,\" [replaceTextureRegion]\");\n-#endif \/\/TRACE_BLIT\n-                    replaceTextureRegion(mtlc, dest, &srcInfo, &rfi, (int) dx1, (int) dy1, (int) dx2, (int) dy2);\n-                } else {\n-#ifdef TRACE_BLIT\n-                    J2dTraceImpl(J2D_TRACE_VERBOSE, JNI_TRUE,\" [via pooled + blit]\");\n-#endif \/\/TRACE_BLIT\n-                    MTLBlitSwToTextureViaPooledTexture(mtlc, &srcInfo, dstOps, &rfi, false, hint, dx1, dy1, dx2, dy2);\n-                }\n-            } else { \/\/ !useReplaceRegion\n-#ifdef TRACE_BLIT\n-                J2dTraceImpl(J2D_TRACE_VERBOSE, JNI_TRUE,\" [via pooled texture]\");\n-#endif \/\/TRACE_BLIT\n-                MTLBlitSwToTextureViaPooledTexture(mtlc, &srcInfo, dstOps, &rfi, false, hint, dx1, dy1, dx2, dy2);\n+            if (texture) {\n+                replaceTextureRegion(mtlc, dest, &srcInfo, &rfi, (int) dx1, (int) dy1, (int) dx2, (int) dy2);\n+            } else {\n+                MTLBlitSwToTextureViaPooledTexture(mtlc, &srcInfo, dstOps, &rfi, hint, dx1, dy1, dx2, dy2);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLBlitLoops.m","additions":12,"deletions":42,"binary":false,"changes":54,"status":"modified"}]}