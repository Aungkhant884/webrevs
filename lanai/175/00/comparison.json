{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/metal\/MTLGraphicsConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -192,2 +192,2 @@\n-                    event.getScrollDeltaX(), event.getScrollDeltaY(),\n-                    event.getScrollPhase());\n+                                        event.getScrollDeltaX(), event.getScrollDeltaY(),\n+                                        event.getScrollPhase());\n@@ -196,2 +196,2 @@\n-                    event.getClickCount(), x, y,\n-                    absX, absY);\n+                                       event.getClickCount(), x, y,\n+                                       absX, absY);\n@@ -203,1 +203,1 @@\n-                event.getCharactersIgnoringModifiers(), event.getKeyCode(), true, false);\n+                                 event.getCharactersIgnoringModifiers(), event.getKeyCode(), true, false);\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPlatformView.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -226,2 +226,2 @@\n-                                    CWrapper.NSWindow.NSWindowAbove,\n-                                    ownerPtr);\n+                                                          CWrapper.NSWindow.NSWindowAbove,\n+                                                          ownerPtr);\n@@ -370,1 +370,1 @@\n-                        ownerWindow, ico.getWidth(), ico.getHeight());\n+                    ownerWindow, ico.getWidth(), ico.getHeight());\n@@ -382,1 +382,1 @@\n-                ownerWindow.getFont());\n+                                 ownerWindow.getFont());\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CWarningWindow.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n- * *\/\n+ *\/\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/EncoderManager.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -204,1 +204,1 @@\n-        \/\/ don't set setScissorOrStencil when generateion in progress\n+        \/\/ don't set setScissorOrStencil when generation in progress\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/EncoderManager.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-    bool metalSupported = JNI_FALSE;\n+    jboolean metalSupported = JNI_FALSE;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLGraphicsConfig.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n- * The MTLPaint class represents paint mode (color, gradient, e.t.c.)\n- * *\/\n+ * The MTLPaint class represents paint mode (color, gradient etc.)\n+ *\/\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLPaints.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * The MTLSDOps structure describes a native OpenGL surface and contains all\n+ * The MTLSDOps structure describes a native Metal surface and contains all\n@@ -42,1 +42,1 @@\n- * Pointer to native-specific (GLX, WGL, etc.) SurfaceData info, such as the\n+ * Pointer to native-specific (Metal) SurfaceData info, such as the\n@@ -56,5 +56,0 @@\n- *     jboolean needsInit;\n- * If true, the surface requires some one-time initialization, which should\n- * be performed after a context has been made current to the surface for\n- * the first time.\n- *\n@@ -86,3 +81,1 @@\n- * The actual bounds of the texture object for this surface.  If the\n- * GL_ARB_texture_non_power_of_two extension is not present, the dimensions\n- * of an OpenGL texture object must be a power-of-two (e.g. 64x32 or 128x512).\n+ * The actual bounds of the texture object for this surface.\n@@ -90,5 +83,1 @@\n- * and height fields in this MTLSDOps structure.  For example, if the image\n- * to be stored in the texture has dimensions 115x47, the actual OpenGL\n- * texture we allocate will have dimensions 128x64 to meet the pow2\n- * restriction.  The image bounds within the texture can be accessed using\n- * floating point texture coordinates in the range [0.0,1.0].\n+ * and height fields in this MTLSDOps structure.\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLSurfaceDataBase.h","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n- * and (in theory) OpenGL drivers should be smart enough to manage that\n+ * and (in theory) Metal drivers should be smart enough to manage that\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLTextRenderer.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -238,1 +238,0 @@\n-\n","filename":"src\/java.desktop\/share\/native\/libawt\/java2d\/SurfaceData.c","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}