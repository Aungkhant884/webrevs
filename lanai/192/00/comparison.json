{"files":[{"patch":"@@ -755,0 +755,26 @@\n+    jint texWidth = ((id<MTLTexture>)dstOps->pTexture).width;\n+    jint texHeight = ((id<MTLTexture>)dstOps->pTexture).height;\n+\n+    SurfaceDataBounds srcBounds, dstBounds;\n+    srcBounds.x1 = x;\n+    srcBounds.y1 = y;\n+    srcBounds.x2 = srcBounds.x1 + width;\n+    srcBounds.y2 = srcBounds.y1 + height;\n+    dstBounds.x1 = x + dx;\n+    dstBounds.y1 = y + dy;\n+    dstBounds.x2 = dstBounds.x1 + width;\n+    dstBounds.y2 = dstBounds.y1 + height;\n+\n+    SurfaceData_IntersectBoundsXYXY(&srcBounds, 0, 0, texWidth, texHeight);\n+    SurfaceData_IntersectBoundsXYXY(&dstBounds, 0, 0, texWidth, texHeight);\n+    SurfaceData_IntersectBlitBounds(&dstBounds, &srcBounds, -dx, -dy);\n+\n+    int srcWidth = (srcBounds.x2 - srcBounds.x1);\n+    int srcHeight = (srcBounds.y2 - srcBounds.y1);\n+\n+   if ((srcBounds.x1 < srcBounds.x2 && srcBounds.y1 < srcBounds.y2) &&\n+       (dstBounds.x1 < dstBounds.x2 && dstBounds.y1 < dstBounds.y2))\n+   {\n+        @autoreleasepool {\n+            id<MTLCommandBuffer> cb = [mtlc createCommandBuffer];\n+            id<MTLBlitCommandEncoder> blitEncoder = [cb blitCommandEncoder];\n@@ -756,7 +782,3 @@\n-    @autoreleasepool {\n-        id<MTLCommandBuffer> cb = [mtlc createCommandBuffer];\n-        id<MTLBlitCommandEncoder> blitEncoder = [cb blitCommandEncoder];\n-\n-        \/\/ Create an intrermediate buffer\n-        int totalBuffsize = width * height * 4;\n-        id <MTLBuffer> buff = [[mtlc.device newBufferWithLength:totalBuffsize options:MTLResourceStorageModePrivate] autorelease];\n+            \/\/ Create an intrermediate buffer\n+            int totalBuffsize = srcWidth * srcHeight * 4;\n+            id <MTLBuffer> buff = [[mtlc.device newBufferWithLength:totalBuffsize options:MTLResourceStorageModePrivate] autorelease];\n@@ -764,3 +786,3 @@\n-        [blitEncoder copyFromTexture:dstOps->pTexture\n-                sourceSlice:0 sourceLevel:0 sourceOrigin:MTLOriginMake(x, y, 0) sourceSize:MTLSizeMake(width, height, 1)\n-                 toBuffer:buff destinationOffset:0 destinationBytesPerRow:(width * 4) destinationBytesPerImage:totalBuffsize];\n+            [blitEncoder copyFromTexture:dstOps->pTexture\n+                    sourceSlice:0 sourceLevel:0 sourceOrigin:MTLOriginMake(srcBounds.x1, srcBounds.y1, 0) sourceSize:MTLSizeMake(srcWidth, srcHeight, 1)\n+                     toBuffer:buff destinationOffset:0 destinationBytesPerRow:(srcWidth * 4) destinationBytesPerImage:totalBuffsize];\n@@ -768,7 +790,4 @@\n-        [blitEncoder copyFromBuffer:buff\n-                sourceOffset:0 sourceBytesPerRow:width*4 sourceBytesPerImage:totalBuffsize sourceSize:MTLSizeMake(width, height, 1)\n-                toTexture:dstOps->pTexture destinationSlice:0 destinationLevel:0 destinationOrigin:MTLOriginMake(x + dx, y + dy, 0)];\n-        [blitEncoder endEncoding];\n-\n-        [cb commit];\n-    }\n+            [blitEncoder copyFromBuffer:buff\n+                    sourceOffset:0 sourceBytesPerRow:srcWidth*4 sourceBytesPerImage:totalBuffsize sourceSize:MTLSizeMake(srcWidth, srcHeight, 1)\n+                    toTexture:dstOps->pTexture destinationSlice:0 destinationLevel:0 destinationOrigin:MTLOriginMake(dstBounds.x1, dstBounds.y1, 0)];\n+            [blitEncoder endEncoding];\n@@ -776,2 +795,3 @@\n-    \/\/ TODO:\n-    \/\/  1. check rect bounds\n+            [cb commit];\n+        }\n+   }\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLBlitLoops.m","additions":39,"deletions":19,"binary":false,"changes":58,"status":"modified"}]}