{"files":[{"patch":"@@ -66,1 +66,1 @@\n-        implements OGLGraphicsConfig\n+    implements OGLGraphicsConfig\n@@ -105,1 +105,1 @@\n-                new CGLGCDisposerRecord(pConfigInfo));\n+                           new CGLGCDisposerRecord(pConfigInfo));\n@@ -116,3 +116,3 @@\n-                getColorModel(transparency),\n-                null,\n-                OGLSurfaceData.TEXTURE);\n+                                         getColorModel(transparency),\n+                                         null,\n+                                         OGLSurfaceData.TEXTURE);\n@@ -188,1 +188,1 @@\n-                raster = model.createCompatibleWritableRaster(width, height);\n+            raster = model.createCompatibleWritableRaster(width, height);\n@@ -190,1 +190,1 @@\n-                null);\n+                                 null);\n@@ -196,13 +196,13 @@\n-            case Transparency.OPAQUE:\n-                \/\/ REMIND: once the ColorModel spec is changed, this should be\n-                \/\/         an opaque premultiplied DCM...\n-                return new DirectColorModel(24, 0xff0000, 0xff00, 0xff);\n-            case Transparency.BITMASK:\n-                return new DirectColorModel(25, 0xff0000, 0xff00, 0xff, 0x1000000);\n-            case Transparency.TRANSLUCENT:\n-                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);\n-                return new DirectColorModel(cs, 32,\n-                        0xff0000, 0xff00, 0xff, 0xff000000,\n-                        true, DataBuffer.TYPE_INT);\n-            default:\n-                return null;\n+        case Transparency.OPAQUE:\n+            \/\/ REMIND: once the ColorModel spec is changed, this should be\n+            \/\/         an opaque premultiplied DCM...\n+            return new DirectColorModel(24, 0xff0000, 0xff00, 0xff);\n+        case Transparency.BITMASK:\n+            return new DirectColorModel(25, 0xff0000, 0xff00, 0xff, 0x1000000);\n+        case Transparency.TRANSLUCENT:\n+            ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);\n+            return new DirectColorModel(cs, 32,\n+                                        0xff0000, 0xff00, 0xff, 0xff000000,\n+                                        true, DataBuffer.TYPE_INT);\n+        default:\n+            return null;\n@@ -263,1 +263,1 @@\n-                model.isAlphaPremultiplied());\n+                                  model.isAlphaPremultiplied());\n@@ -294,1 +294,1 @@\n-                : Transparency.OPAQUE;\n+                                                      : Transparency.OPAQUE;\n@@ -320,1 +320,1 @@\n-                        backBuffer.getHeight(null));\n+                             backBuffer.getHeight(null));\n@@ -330,1 +330,1 @@\n-                    dblBuf ? FlipContents.UNDEFINED : null);\n+                  dblBuf ? FlipContents.UNDEFINED : null);\n@@ -366,1 +366,1 @@\n-                transparency, type);\n+                                                          transparency, type);\n@@ -369,1 +369,1 @@\n-                ((AccelSurface)sd).getType() != type)\n+            ((AccelSurface)sd).getType() != type)\n@@ -386,1 +386,1 @@\n-                getBounds().width);\n+                        getBounds().width);\n@@ -392,1 +392,1 @@\n-                getBounds().height);\n+                        getBounds().height);\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/opengl\/CGLGraphicsConfig.java","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -760,2 +760,2 @@\n-    id<MTLCommandBuffer> cb = [mtlc createCommandBuffer];\n-    id<MTLBlitCommandEncoder> blitEncoder = [cb blitCommandEncoder];\n+        id<MTLCommandBuffer> cb = [mtlc createCommandBuffer];\n+        id<MTLBlitCommandEncoder> blitEncoder = [cb blitCommandEncoder];\n@@ -763,3 +763,3 @@\n-    \/\/ Create an intrermediate buffer\n-    int totalBuffsize = width * height * 4;\n-    id <MTLBuffer> buff = [[mtlc.device newBufferWithLength:totalBuffsize options:MTLResourceStorageModePrivate] autorelease];\n+        \/\/ Create an intrermediate buffer\n+        int totalBuffsize = width * height * 4;\n+        id <MTLBuffer> buff = [[mtlc.device newBufferWithLength:totalBuffsize options:MTLResourceStorageModePrivate] autorelease];\n@@ -767,3 +767,3 @@\n-    [blitEncoder copyFromTexture:dstOps->pTexture\n-            sourceSlice:0 sourceLevel:0 sourceOrigin:MTLOriginMake(x, y, 0) sourceSize:MTLSizeMake(width, height, 1)\n-             toBuffer:buff destinationOffset:0 destinationBytesPerRow:(width * 4) destinationBytesPerImage:totalBuffsize];\n+        [blitEncoder copyFromTexture:dstOps->pTexture\n+                sourceSlice:0 sourceLevel:0 sourceOrigin:MTLOriginMake(x, y, 0) sourceSize:MTLSizeMake(width, height, 1)\n+                 toBuffer:buff destinationOffset:0 destinationBytesPerRow:(width * 4) destinationBytesPerImage:totalBuffsize];\n@@ -771,13 +771,4 @@\n-    [blitEncoder copyFromBuffer:buff\n-            sourceOffset:0 sourceBytesPerRow:width*4 sourceBytesPerImage:totalBuffsize sourceSize:MTLSizeMake(width, height, 1)\n-            toTexture:dstOps->pTexture destinationSlice:0 destinationLevel:0 destinationOrigin:MTLOriginMake(x + dx, y + dy, 0)];\n-    [blitEncoder endEncoding];\n-\n-    [cb commit];\n-    \/\/[cb waitUntilCompleted];\n-\n-    \/*[blitEncoder\n-            copyFromTexture:dstOps->pTexture\n-            sourceSlice:0 sourceLevel:0 sourceOrigin:MTLOriginMake(x, y, 0) sourceSize:MTLSizeMake(width, height, 1)\n-            toTexture:dstOps->pTexture destinationSlice:0 destinationLevel:0 destinationOrigin:MTLOriginMake(x + dx, y + dy, 0)];\n-    [blitEncoder endEncoding];*\/\n+        [blitEncoder copyFromBuffer:buff\n+                sourceOffset:0 sourceBytesPerRow:width*4 sourceBytesPerImage:totalBuffsize sourceSize:MTLSizeMake(width, height, 1)\n+                toTexture:dstOps->pTexture destinationSlice:0 destinationLevel:0 destinationOrigin:MTLOriginMake(x + dx, y + dy, 0)];\n+        [blitEncoder endEncoding];\n@@ -785,0 +776,1 @@\n+        [cb commit];\n@@ -786,0 +778,1 @@\n+\n@@ -788,1 +781,0 @@\n-    \/\/  2. support CopyArea with extra-alpha (and with custom Composite if necessary)\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLBlitLoops.m","additions":14,"deletions":22,"binary":false,"changes":36,"status":"modified"}]}