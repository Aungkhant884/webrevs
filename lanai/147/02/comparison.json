{"files":[{"patch":"@@ -59,1 +59,2 @@\n-    private final GraphicsConfiguration config;\n+    private GraphicsConfiguration config;\n+    private static boolean metalPipelineEnabled = false;\n@@ -68,3 +69,20 @@\n-        config = MacOSFlags.isMetalEnabled() ?\n-                MTLGraphicsConfig.getConfig(this, displayID, 0) :\n-                CGLGraphicsConfig.getConfig(this);\n+\n+        if (MacOSFlags.isMetalEnabled()) {\n+\n+            \/\/ Try to get MTLGraphicsConfig\n+            this.config = MTLGraphicsConfig.getConfig(this, displayID, 0);\n+\n+            \/\/ If MTLGraphicsConfig creation succeeds\n+            if (this.config != null) {\n+                metalPipelineEnabled = true;\n+            } else {\n+                if (MacOSFlags.isMetalVerbose()) {\n+                    System.out.println(\"Metal rendering pipeline initialization failed. Using OpenGL rendering pipeline.\");\n+                }\n+            }\n+        }\n+\n+        if (!metalPipelineEnabled) {\n+            this.config = CGLGraphicsConfig.getConfig(this);\n+        }\n+\n@@ -272,0 +290,4 @@\n+    public static boolean useMetalPipeline() {\n+        return metalPipelineEnabled;\n+    }\n+\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/awt\/CGraphicsDevice.java","additions":26,"deletions":4,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import sun.java2d.macos.MacOSFlags;\n+import sun.awt.CGraphicsDevice;\n@@ -54,1 +54,1 @@\n-        return MacOSFlags.isMetalEnabled() ? new MTLVolatileSurfaceManager(vImg, context) :\n+        return CGraphicsDevice.useMetalPipeline() ? new MTLVolatileSurfaceManager(vImg, context) :\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/MacosxSurfaceManagerFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import sun.java2d.metal.MTLGraphicsConfig;\n+\n@@ -39,0 +41,1 @@\n+    private static boolean metalVerbose;\n@@ -69,0 +72,12 @@\n+    private static boolean isBooleanPropTrueVerbose(String p) {\n+        String propString = System.getProperty(p);\n+        if (propString != null) {\n+            if (propString.equals(\"True\") ||\n+                propString.equals(\"T\"))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n@@ -79,0 +94,12 @@\n+                    if (metalEnabled) {\n+                        metalVerbose = isBooleanPropTrueVerbose(\"sun.java2d.metal\");\n+\n+                        \/\/ Check whether Metal framework is available on the system\n+                        if (!MTLGraphicsConfig.isMetalAvailable()) {\n+                            metalEnabled = false;\n+\n+                            if (metalVerbose) {\n+                                System.out.println(\"Could not enable Metal pipeline (Metal framework not available)\");\n+                            }\n+                        }\n+                    }\n@@ -86,0 +113,4 @@\n+\n+    public static boolean isMetalVerbose() {\n+        return metalVerbose;\n+    }\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/macos\/MacOSFlags.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -81,1 +81,2 @@\n-    private static native boolean initMTL();\n+    private static native boolean isMetalFrameworkAvailable();\n+    private static native boolean tryLoadMetalLibrary(int displayID, String shaderLib);\n@@ -91,1 +92,1 @@\n-        mtlAvailable = initMTL();\n+        mtlAvailable = isMetalFrameworkAvailable();\n@@ -129,0 +130,4 @@\n+        if (!tryLoadMetalLibrary(displayID, mtlShadersLib)) {\n+            return null;\n+        }\n+\n@@ -167,0 +172,4 @@\n+    public static boolean isMetalAvailable() {\n+        return mtlAvailable;\n+    }\n+\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/metal\/MTLGraphicsConfig.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+import sun.awt.CGraphicsDevice;\n@@ -77,1 +78,0 @@\n-import sun.java2d.macos.MacOSFlags;\n@@ -1420,1 +1420,1 @@\n-        RenderQueue rq = MacOSFlags.isMetalEnabled() ?\n+        RenderQueue rq =  CGraphicsDevice.useMetalPipeline() ?\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/LWComponentPeer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import sun.awt.CGraphicsDevice;\n@@ -32,1 +33,0 @@\n-import sun.java2d.macos.MacOSFlags;\n@@ -59,1 +59,1 @@\n-        if (MacOSFlags.isMetalEnabled()) {\n+        if ( CGraphicsDevice.useMetalPipeline()) {\n@@ -74,1 +74,1 @@\n-        if (MacOSFlags.isMetalEnabled()) {\n+        if (CGraphicsDevice.useMetalPipeline()) {\n@@ -83,1 +83,1 @@\n-        if (MacOSFlags.isMetalEnabled()) {\n+        if ( CGraphicsDevice.useMetalPipeline()) {\n@@ -118,1 +118,1 @@\n-        if (MacOSFlags.isMetalEnabled()) {\n+        if ( CGraphicsDevice.useMetalPipeline()) {\n@@ -127,1 +127,1 @@\n-        if (MacOSFlags.isMetalEnabled()) {\n+        if ( CGraphicsDevice.useMetalPipeline()) {\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPlatformEmbeddedFrame.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import sun.java2d.macos.MacOSFlags;\n+import sun.awt.CGraphicsDevice;\n@@ -64,1 +64,1 @@\n-        this.windowLayer = MacOSFlags.isMetalEnabled()? createMTLLayer() : createCGLayer();\n+        this.windowLayer = CGraphicsDevice.useMetalPipeline()? createMTLLayer() : createCGLayer();\n@@ -107,1 +107,1 @@\n-        surfaceData = (MacOSFlags.isMetalEnabled()) ?\n+        surfaceData = (CGraphicsDevice.useMetalPipeline()) ?\n@@ -125,1 +125,1 @@\n-        return MacOSFlags.isMetalEnabled() ?\n+        return CGraphicsDevice.useMetalPipeline() ?\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPlatformView.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -112,1 +112,0 @@\n-import sun.java2d.macos.MacOSFlags;\n@@ -505,2 +504,2 @@\n-        \/\/ flush the OGL\/MTL pipeline (this is a no-op if OGL\/MTL is not enabled)\n-        if (MacOSFlags.isMetalEnabled()) {\n+        \/\/ flush the rendering pipeline\n+        if (CGraphicsDevice.useMetalPipeline()) {\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/LWCToolkit.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -73,1 +73,0 @@\n-@property (strong) id<MTLLibrary>              library;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLContext.h","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-            vertexCacheEnabled, aaEnabled, device, library, pipelineStateStorage,\n+            vertexCacheEnabled, aaEnabled, device, pipelineStateStorage,\n@@ -127,1 +127,1 @@\n-        texturePool = [[MTLTexturePool alloc] initWithDevice:device];\n+\n@@ -129,0 +129,6 @@\n+        if (pipelineStateStorage == nil) {\n+            J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLContext.initWithDevice(): Failed to initialize MTLPipelineStatesStorage.\");\n+            return nil;\n+        }\n+\n+        texturePool = [[MTLTexturePool alloc] initWithDevice:device];\n@@ -134,8 +140,0 @@\n-        NSError *error = nil;\n-\n-        library = [device newLibraryWithFile:shadersLib error:&error];\n-        if (!library) {\n-            NSLog(@\"Failed to load library. error %@\", error);\n-            exit(0);\n-        }\n-\n@@ -167,1 +165,0 @@\n-    self.library = nil;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLContext.m","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#ifndef MTLFuncs_h_Included\n-#define MTLFuncs_h_Included\n-\n-#ifdef MACOSX\n-#include <dlfcn.h>\n-#endif\n-#include \"jni.h\"\n-#include \"Trace.h\"\n-\n-jboolean MTLFuncs_OpenLibrary();\n-void     MTLFuncs_CloseLibrary();\n-jboolean MTLFuncs_InitPlatformFuncs();\n-jboolean MTLFuncs_InitBaseFuncs();\n-jboolean MTLFuncs_InitExtFuncs();\n-\n-#endif \/* MTLFuncs_h_Included *\/\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLFuncs.h","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#ifndef HEADLESS\n-\n-#include \"MTLFuncs.h\"\n-\n-\n-jboolean\n-MTLFuncs_OpenLibrary()\n-{\n-    \/\/TODO\n-\n-    J2dRlsTraceLn(J2D_TRACE_INFO, \"MTLFuncs_OpenLibrary\");\n-\n-\n-    return JNI_TRUE;\n-}\n-\n-void\n-MTLFuncs_CloseLibrary()\n-{\n-    \/\/TODO\n-    J2dRlsTraceLn(J2D_TRACE_INFO, \"MTLFuncs_CloseLibrary\");\n-\n-}\n-\n-jboolean\n-MTLFuncs_InitPlatformFuncs()\n-{\n-    \/\/TODO\n-    J2dRlsTraceLn(J2D_TRACE_INFO, \"MTLFuncs_InitPlatformFuncs\");\n-\n-    return JNI_TRUE;\n-}\n-\n-jboolean\n-MTLFuncs_InitBaseFuncs()\n-{\n-    \/\/TODO\n-    J2dRlsTraceLn(J2D_TRACE_INFO, \"MTLFuncs_InitBaseFuncs\");\n-\n-\n-    return JNI_TRUE;\n-}\n-\n-jboolean\n-MTLFuncs_InitExtFuncs()\n-{\n-    \/\/TODO\n-    J2dRlsTraceLn(J2D_TRACE_INFO, \"MTLFuncs_InitExtFuncs\");\n-\n-    return JNI_TRUE;\n-}\n-\n-#endif \/* !HEADLESS *\/\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLFuncs.m","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -32,0 +32,2 @@\n+#import \"MTLUtils.h\"\n+\n@@ -39,1 +41,1 @@\n-#pragma mark \"--- Mac OS X specific methods for GL pipeline ---\"\n+#pragma mark \"--- Mac OS X specific methods for Metal pipeline ---\"\n@@ -74,1 +76,1 @@\n- * Attempts to initialize MTL and the core Metal library.\n+ * Probe Metal framework availability using system profiler\n@@ -77,2 +79,2 @@\n-Java_sun_java2d_metal_MTLGraphicsConfig_initMTL\n-    (JNIEnv *env, jclass cglgc)\n+Java_sun_java2d_metal_MTLGraphicsConfig_isMetalFrameworkAvailable\n+    (JNIEnv *env, jclass mtlgc)\n@@ -80,3 +82,0 @@\n-    J2dRlsTraceLn(J2D_TRACE_INFO, \"MTLGraphicsConfig_initMTL\");\n-\n-#ifdef METAL_DEBUG\n@@ -84,1 +83,1 @@\n-    bool metalSupport = FALSE;\n+    bool metalSupported = JNI_FALSE;\n@@ -93,2 +92,2 @@\n-                puts(str);\n-                metalSupport = JNI_TRUE;\n+                \/\/puts(str);\n+                metalSupported = JNI_TRUE;\n@@ -100,1 +99,3 @@\n-    if (!metalSupport) {\n+\n+#ifdef METAL_DEBUG\n+    if (!metalSupported) {\n@@ -107,3 +108,1 @@\n-    if (!MTLFuncs_OpenLibrary()) {\n-        return JNI_FALSE;\n-    }\n+    J2dRlsTraceLn1(J2D_TRACE_INFO, \"MTLGraphicsConfig_isMetalFrameworkAvailable : %d\", metalSupported);\n@@ -111,7 +110,2 @@\n-    if (!MTLFuncs_InitPlatformFuncs() ||\n-        !MTLFuncs_InitBaseFuncs() ||\n-        !MTLFuncs_InitExtFuncs())\n-    {\n-        MTLFuncs_CloseLibrary();\n-        return JNI_FALSE;\n-    }\n+    return metalSupported;\n+}\n@@ -119,1 +113,18 @@\n-    return JNI_TRUE;\n+JNIEXPORT jboolean JNICALL\n+Java_sun_java2d_metal_MTLGraphicsConfig_tryLoadMetalLibrary\n+    (JNIEnv *env, jclass mtlgc, jint displayID, jstring shadersLibName)\n+{\n+  jboolean ret = JNI_FALSE;\n+  JNF_COCOA_ENTER(env);\n+  NSMutableArray * retArray = [NSMutableArray arrayWithCapacity:3];\n+  [retArray addObject: [NSNumber numberWithInt: (int)displayID]];\n+  [retArray addObject: [NSString stringWithUTF8String: JNU_GetStringPlatformChars(env, shadersLibName, 0)]];\n+  if ([NSThread isMainThread]) {\n+      [MTLGraphicsConfigUtil _tryLoadMetalLibrary: retArray];\n+  } else {\n+      [MTLGraphicsConfigUtil performSelectorOnMainThread: @selector(_tryLoadMetalLibrary:) withObject: retArray waitUntilDone: YES];\n+  }\n+  NSNumber * num = (NSNumber *)[retArray objectAtIndex: 0];\n+  ret = (jboolean)[num boolValue];\n+  JNF_COCOA_EXIT(env);\n+  return ret;\n@@ -135,1 +146,1 @@\n-    (JNIEnv *env, jclass cglgc, jint displayID, jstring mtlShadersLib)\n+    (JNIEnv *env, jclass mtlgc, jint displayID, jstring mtlShadersLib)\n@@ -196,1 +207,1 @@\n-        J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLGC_InitMTLContext: could not allocate memory for mtlc\");\n+        J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLGC_InitMTLContext: could not initialze MTLContext.\");\n@@ -217,0 +228,30 @@\n+\n++ (void) _tryLoadMetalLibrary: (NSMutableArray *)argValue {\n+    AWT_ASSERT_APPKIT_THREAD;\n+\n+    jint displayID = (jint)[(NSNumber *)[argValue objectAtIndex: 0] intValue];\n+    NSString *mtlShadersLib = (NSString *)[argValue objectAtIndex: 1];\n+    JNIEnv *env = [ThreadUtilities getJNIEnvUncached];\n+    [argValue removeAllObjects];\n+\n+    J2dRlsTraceLn(J2D_TRACE_INFO, \"MTLGraphicsConfigUtil_tryLoadMTLLibrary\");\n+\n+\n+    BOOL ret = FALSE;;\n+    id<MTLDevice> device = CGDirectDisplayCopyCurrentMetalDevice(displayID);\n+    if (device != nil) {\n+        NSError *error = nil;\n+        id<MTLLibrary> lib = [device newLibraryWithFile:mtlShadersLib error:&error];\n+        if (lib != nil) {\n+            ret = TRUE;\n+        } else {\n+            J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLGraphicsConfig_tryLoadMetalLibrary - Failed to load Metal shader library.\");\n+        }\n+    } else {\n+        J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLGraphicsConfig_tryLoadMetalLibrary - Failed to create MTLDevice.\");\n+    }\n+\n+    [argValue addObject: [NSNumber numberWithBool: ret]];\n+\n+}\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLGraphicsConfig.m","additions":65,"deletions":24,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n-        NSLog(@\"Failed to load library. error %@\", error);\n-        exit(0);\n+        J2dRlsTraceLn(J2D_TRACE_ERROR, \"MTLPipelineStatesStorage.initWithDevice() - Failed to load Metal shader library.\");\n+        return nil;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLPipelineStatesStorage.m","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#include \"MTLFuncs.h\"\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLSurfaceDataBase.h","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}