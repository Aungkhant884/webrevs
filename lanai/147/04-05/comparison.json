{"files":[{"patch":"@@ -73,1 +73,17 @@\n-            createMTLGraphicsConfig(displayID);\n+            \/\/ Try to create MTLGraphicsConfig, if it fails, try to create CGLGraphicsConfig as a fallback\n+            this.config = MTLGraphicsConfig.getConfig(this, displayID, 0);\n+\n+            if (this.config != null) {\n+                metalPipelineEnabled = true;\n+            } else {\n+                \/\/ Try falling back to OpenGL pipeline\n+                if (MacOSFlags.isMetalVerbose()) {\n+                    System.out.println(\"Metal rendering pipeline initialization failed. Using OpenGL rendering pipeline.\");\n+                }\n+\n+                this.config = CGLGraphicsConfig.getConfig(this);\n+\n+                if (this.config != null) {\n+                    oglPipelineEnabled = true;\n+                }\n+            }\n@@ -75,1 +91,17 @@\n-            creatCGLGraphicsConfig(displayID);\n+            \/\/ Try to create CGLGraphicsConfig, if it fails, try to create MTLGraphicsConfig as a fallback\n+            this.config = CGLGraphicsConfig.getConfig(this);\n+\n+            if (this.config != null) {\n+                oglPipelineEnabled = true;\n+            } else {\n+                \/\/ Try falling back to Metal pipeline\n+                if (MacOSFlags.isOGLVerbose()) {\n+                    System.out.println(\"OpenGL rendering pipeline initialization failed. Using Metal rendering pipeline.\");\n+                }\n+\n+                this.config = MTLGraphicsConfig.getConfig(this, displayID, 0);\n+\n+                if (this.config != null) {\n+                    metalPipelineEnabled = true;\n+                }\n+            }\n@@ -81,2 +113,1 @@\n-            System.out.println(\"Error - unable to initialize any rendering pipeline.\");\n-            throw new RuntimeException(\"Error - unable to initialize any rendering pipeline.\");\n+            throw new InternalError(\"Error - unable to initialize any rendering pipeline.\");\n@@ -286,1 +317,1 @@\n-    public static boolean useMetalPipeline() {\n+    public static boolean usingMetalPipeline() {\n@@ -301,42 +332,0 @@\n-    \/\/ This method tries to create MTLGraphicsConfig\n-    \/\/ if it fails, it tries to create CGLGraphicsConfig as a fallback\n-    private void createMTLGraphicsConfig(final int displayID) {\n-        this.config = MTLGraphicsConfig.getConfig(this, displayID, 0);\n-\n-        if (this.config != null) {\n-            metalPipelineEnabled = true;\n-        } else {\n-            \/\/ Try falling back to OpenGL pipeline\n-            if (MacOSFlags.isMetalVerbose()) {\n-                System.out.println(\"Metal rendering pipeline initialization failed. Using OpenGL rendering pipeline.\");\n-            }\n-\n-            this.config = CGLGraphicsConfig.getConfig(this);\n-\n-            if (this.config != null) {\n-                oglPipelineEnabled = true;\n-            }\n-        }\n-    }\n-\n-    \/\/ This method tries to create CGLGraphicsConfig\n-    \/\/ if it fails, it tries to create MTLLGraphicsConfig as a fallback\n-    private void creatCGLGraphicsConfig(final int displayID) {\n-        this.config = CGLGraphicsConfig.getConfig(this);\n-\n-        if (this.config != null) {\n-            oglPipelineEnabled = true;\n-        } else {\n-            \/\/ Try falling back to Metal pipeline\n-            if (MacOSFlags.isOGLVerbose()) {\n-                System.out.println(\"OpenGL rendering pipeline initialization failed. Using Metal rendering pipeline.\");\n-            }\n-\n-            this.config = MTLGraphicsConfig.getConfig(this, displayID, 0);\n-\n-            if (this.config != null) {\n-                metalPipelineEnabled = true;\n-            }\n-        }\n-    }\n-\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/awt\/CGraphicsDevice.java","additions":36,"deletions":47,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        return CGraphicsDevice.useMetalPipeline() ? new MTLVolatileSurfaceManager(vImg, context) :\n+        return CGraphicsDevice.usingMetalPipeline() ? new MTLVolatileSurfaceManager(vImg, context) :\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/MacosxSurfaceManagerFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,6 +89,0 @@\n-\n-    private static boolean getPropertySet(String p) {\n-        String propString = System.getProperty(p);\n-        return (propString != null) ? true : false;\n-    }\n-\n@@ -101,0 +95,2 @@\n+                    \/\/ Note : Currently OpenGL is the default pipeline.\n+                    \/\/ Switch logic in this if-else ladder if default pipeline is changed to Metal\n@@ -105,1 +101,1 @@\n-                        } else if (oglState == PropertyState.ENABLED || oglState == PropertyState.UNSPECIFIED) {\n+                        } else {\n@@ -110,4 +106,1 @@\n-                        if (oglState == PropertyState.DISABLED || oglState == PropertyState.UNSPECIFIED) {\n-                            oglEnabled = false;\n-                            metalEnabled = true;\n-                        } else if (oglState == PropertyState.ENABLED) {\n+                        if (oglState == PropertyState.ENABLED) {\n@@ -116,0 +109,3 @@\n+                        } else {\n+                            oglEnabled = false;\n+                            metalEnabled = true;\n@@ -125,8 +121,0 @@\n-                    boolean oglAvailable = CGLGraphicsConfig.isCGLAvailable();\n-                    boolean metalAvailable = MTLGraphicsConfig.isMetalAvailable();\n-\n-                    if (!oglAvailable && !metalAvailable) {\n-                        \/\/ Should never reach here\n-                        throw new RuntimeException(\"Error - Both, OpenGL and Metal frameworks not available.\");\n-                    }\n-\n@@ -135,1 +123,1 @@\n-                        if (!oglAvailable) {\n+                        if (!CGLGraphicsConfig.isCGLAvailable()) {\n@@ -140,1 +128,1 @@\n-                            metalEnabled = metalAvailable;\n+                            metalEnabled = MTLGraphicsConfig.isMetalAvailable();\n@@ -144,1 +132,1 @@\n-                        if (!metalAvailable) {\n+                        if (!MTLGraphicsConfig.isMetalAvailable()) {\n@@ -149,1 +137,1 @@\n-                            oglEnabled = oglAvailable;\n+                            oglEnabled = CGLGraphicsConfig.isCGLAvailable();\n@@ -155,1 +143,1 @@\n-                        throw new RuntimeException(\"Error - unable to initialize any rendering pipeline.\");\n+                        throw new InternalError(\"Error - unable to initialize any rendering pipeline.\");\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/macos\/MacOSFlags.java","additions":12,"deletions":24,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1420,1 +1420,1 @@\n-        RenderQueue rq =  CGraphicsDevice.useMetalPipeline() ?\n+        RenderQueue rq =  CGraphicsDevice.usingMetalPipeline() ?\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/LWComponentPeer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-        if ( CGraphicsDevice.useMetalPipeline()) {\n+        if ( CGraphicsDevice.usingMetalPipeline()) {\n@@ -74,1 +74,1 @@\n-        if (CGraphicsDevice.useMetalPipeline()) {\n+        if (CGraphicsDevice.usingMetalPipeline()) {\n@@ -83,1 +83,1 @@\n-        if ( CGraphicsDevice.useMetalPipeline()) {\n+        if ( CGraphicsDevice.usingMetalPipeline()) {\n@@ -118,1 +118,1 @@\n-        if ( CGraphicsDevice.useMetalPipeline()) {\n+        if ( CGraphicsDevice.usingMetalPipeline()) {\n@@ -127,1 +127,1 @@\n-        if ( CGraphicsDevice.useMetalPipeline()) {\n+        if ( CGraphicsDevice.usingMetalPipeline()) {\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPlatformEmbeddedFrame.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        this.windowLayer = CGraphicsDevice.useMetalPipeline()? createMTLLayer() : createCGLayer();\n+        this.windowLayer = CGraphicsDevice.usingMetalPipeline()? createMTLLayer() : createCGLayer();\n@@ -107,1 +107,1 @@\n-        surfaceData = (CGraphicsDevice.useMetalPipeline()) ?\n+        surfaceData = (CGraphicsDevice.usingMetalPipeline()) ?\n@@ -125,1 +125,1 @@\n-        return CGraphicsDevice.useMetalPipeline() ?\n+        return CGraphicsDevice.usingMetalPipeline() ?\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPlatformView.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -505,1 +505,1 @@\n-        if (CGraphicsDevice.useMetalPipeline()) {\n+        if (CGraphicsDevice.usingMetalPipeline()) {\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/LWCToolkit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}