{"files":[{"patch":"@@ -61,0 +61,2 @@\n+    private static boolean oglPipelineEnabled = false;\n+\n@@ -71,12 +73,3 @@\n-\n-            \/\/ Try to get MTLGraphicsConfig\n-            this.config = MTLGraphicsConfig.getConfig(this, displayID, 0);\n-\n-            \/\/ If MTLGraphicsConfig creation succeeds\n-            if (this.config != null) {\n-                metalPipelineEnabled = true;\n-            } else {\n-                if (MacOSFlags.isMetalVerbose()) {\n-                    System.out.println(\"Metal rendering pipeline initialization failed. Using OpenGL rendering pipeline.\");\n-                }\n-            }\n+            createMTLGraphicsConfig(displayID);\n+        } else {\n+            creatCGLGraphicsConfig(displayID);\n@@ -85,2 +78,4 @@\n-        if (!metalPipelineEnabled) {\n-            this.config = CGLGraphicsConfig.getConfig(this);\n+        if (!metalPipelineEnabled && !oglPipelineEnabled) {\n+            \/\/ Should never reach here, but still have to check this\n+            System.out.println(\"Error - unable to initialize any rendering pipeline.\");\n+            \/\/ Throw exception????\n@@ -305,0 +300,40 @@\n+    \/\/ This method tries to create MTLGraphicsConfig\n+    \/\/ if it fails, it tries to create CGLGraphicsConfig as a fallback\n+    private void createMTLGraphicsConfig(final int displayID) {\n+        this.config = MTLGraphicsConfig.getConfig(this, displayID, 0);\n+\n+        if (this.config != null) {\n+            metalPipelineEnabled = true;\n+        } else {\n+            \/\/ Try falling back to OpenGL pipeline\n+            if (MacOSFlags.isMetalVerbose()) {\n+                System.out.println(\"Metal rendering pipeline initialization failed. Using OpenGL rendering pipeline.\");\n+            }\n+\n+            this.config = CGLGraphicsConfig.getConfig(this);\n+\n+            if (this.config != null) {\n+                oglPipelineEnabled = true;\n+            }\n+        }\n+    }\n+\n+    \/\/ This method tries to create CGLGraphicsConfig\n+    \/\/ if it fails, it tries to create MTLLGraphicsConfig as a fallback\n+    private void creatCGLGraphicsConfig(final int displayID) {\n+        this.config = CGLGraphicsConfig.getConfig(this);\n+\n+        if (this.config != null) {\n+            oglPipelineEnabled = true;\n+        } else {\n+            \/\/ Try falling back to Metal pipeline\n+            System.out.println(\"OpenGL rendering pipeline initialization failed. Using Metal rendering pipeline.\");\n+\n+            this.config = MTLGraphicsConfig.getConfig(this, displayID, 0);\n+\n+            if (this.config != null) {\n+                metalPipelineEnabled = true;\n+            }\n+        }\n+    }\n+\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/awt\/CGraphicsDevice.java","additions":49,"deletions":14,"binary":false,"changes":63,"status":"modified"}]}