{"files":[{"patch":"@@ -327,0 +327,22 @@\n+    static class LinGrad3OvalRotParticleRenderer extends FlatOvalRotParticleRenderer {\n+\n+\n+        LinGrad3OvalRotParticleRenderer(int n, float r) {\n+            super(n, r);\n+        }\n+\n+        @Override\n+        void setPaint(Graphics2D g2d, int id) {\n+            Point2D start = new Point2D.Double(- r,  - 0.5*r);\n+            Point2D end = new Point2D.Double( 2 * r, r);\n+            float[] dist = {0.0f, 0.5f, 1.0f};\n+            Color[] cls = {\n+                colors[id %colors.length],\n+                colors[(colors.length - id) %colors.length],\n+                colors[(id*5) %colors.length]};\n+            LinearGradientPaint p =\n+                new LinearGradientPaint(start, end, dist, cls);\n+            g2d.setPaint(p);\n+        }\n+    }\n+\n@@ -619,0 +641,1 @@\n+    private static final ParticleRenderer linGrad3OvalRotRenderer = new LinGrad3OvalRotParticleRenderer(N, R);\n@@ -697,0 +720,8 @@\n+    public void testLinGrad3OvalRotBubbles() throws Exception {\n+        (new PerfMeter(\"LinGrad3RotatedOval\")).exec(createPR(linGrad3OvalRotRenderer)).report();\n+    }\n+\n+    public void testLinGrad3OvalRotBubblesAA() throws Exception {\n+        (new PerfMeter(\"LinGrad3RotatedOvalAA\")).exec(createPR(linGrad3OvalRotRenderer).configure(AA)).report();\n+    }\n+\n","filename":"src\/demo\/share\/java2d\/RenderPerfTest\/src\/renderperf\/RenderPerfTest.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+import static sun.java2d.metal.MTLContext.MTLContextCaps.CAPS_EXT_GRAD_SHADER;\n@@ -162,1 +163,2 @@\n-                        CAPS_MULTITEXTURE | CAPS_TEXNONPOW2 | CAPS_TEXNONSQUARE | CAPS_EXT_BIOP_SHADER,\n+                        CAPS_MULTITEXTURE | CAPS_TEXNONPOW2 | CAPS_TEXNONSQUARE |\n+                        CAPS_EXT_BIOP_SHADER | CAPS_EXT_GRAD_SHADER,\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/metal\/MTLGraphicsConfig.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -196,0 +196,4 @@\n+        @Override\n+        boolean isPaintValid(SunGraphics2D sg2d) {\n+            return false;\n+        }\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/metal\/MTLPaints.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#define GRAD_MAX_FRACTIONS 12\n@@ -34,0 +35,5 @@\n+enum GradCycleMethod {\n+    GradNoCycle = 0,\n+    GradReflect = 1,\n+    GradRepeat = 2\n+};\n@@ -60,0 +66,8 @@\n+struct LinGradFrameUniforms {\n+    vector_float3 params;\n+    float fract[GRAD_MAX_FRACTIONS];\n+    vector_float4 color[GRAD_MAX_FRACTIONS];\n+    int numFracts;\n+    int cycleMethod;\n+};\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/common.h","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -224,0 +224,36 @@\n+fragment half4 frag_txt_lin_grad(GradShaderInOut in [[stage_in]],\n+                                 constant LinGradFrameUniforms& uniforms [[buffer(0)]],\n+                                 texture2d<float, access::sample> renderTexture [[texture(0)]])\n+{\n+    constexpr sampler textureSampler (address::repeat, mag_filter::nearest,\n+                                      min_filter::nearest);\n+\n+    float4 renderColor = renderTexture.sample(textureSampler, in.texCoords);\n+\n+    float3 v = float3(in.position.x, in.position.y, 1);\n+    float  a = dot(v,uniforms.params);\n+    float lf = 1.0\/(uniforms.numFracts - 1);\n+\n+    if (uniforms.cycleMethod > GradNoCycle) {\n+        int fa = floor(a);\n+        a = a - fa;\n+        if (uniforms.cycleMethod == GradReflect && fa%2) {\n+            a = 1.0 - a;\n+        }\n+    }\n+\n+    int n = floor(a\/lf);\n+    if (uniforms.cycleMethod > GradNoCycle) {\n+        n = ((n % uniforms.numFracts) + uniforms.numFracts) % uniforms.numFracts;\n+    } else {\n+        if (n < 0) n = 0;\n+        if (n > uniforms.numFracts - 2) n = uniforms.numFracts - 2;\n+    }\n+    a = (a - n*lf)\/lf;\n+    float4 c = mix(uniforms.color[n], uniforms.color[n + 1], a);\n+    return half4(c.r*renderColor.a,\n+                 c.g*renderColor.a,\n+                 c.b*renderColor.a,\n+                 renderColor.a);\n+}\n+\n@@ -375,0 +411,26 @@\n+\/\/ LinGradFrameUniforms\n+fragment half4 frag_lin_grad(GradShaderInOut in [[stage_in]],\n+                             constant LinGradFrameUniforms& uniforms [[buffer(0)]]) {\n+    float3 v = float3(in.position.x, in.position.y, 1);\n+    float  a = dot(v,uniforms.params);\n+    float lf = 1.0\/(uniforms.numFracts - 1);\n+\n+    if (uniforms.cycleMethod > GradNoCycle) {\n+        int fa = floor(a);\n+        a = a - fa;\n+        if (uniforms.cycleMethod == GradReflect && fa%2) {\n+            a = 1.0 - a;\n+        }\n+    }\n+\n+    int n = floor(a\/lf);\n+    if (uniforms.cycleMethod > GradNoCycle) {\n+        n = ((n % uniforms.numFracts) + uniforms.numFracts) % uniforms.numFracts;\n+    } else {\n+        if (n < 0) n = 0;\n+        if (n > uniforms.numFracts - 2) n = uniforms.numFracts - 2;\n+    }\n+    a = (a - n*lf)\/lf;\n+    float4 c = mix(uniforms.color[n], uniforms.color[n + 1], a);\n+    return half4(c);\n+}\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/shaders.metal","additions":62,"deletions":0,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -220,1 +220,1 @@\n-              cycleMethod:(jboolean)cycleMethod\n+              cycleMethod:(jint)cycleMethod\n@@ -225,2 +225,2 @@\n-                fractions:(void *)fractions\n-                   pixels:(void *)pixels;\n+                fractions:(jfloat *)fractions\n+                   pixels:(jint *)pixels;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLContext.h","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -339,1 +339,5 @@\n-                   cycleMethod:(jboolean)cycleMethod\n+                   cycleMethod:(jint)cycleMethod\n+                                \/\/ 0 - NO_CYCLE\n+                                \/\/ 1 - REFLECT\n+                                \/\/ 2 - REPEAT\n+\n@@ -344,2 +348,2 @@\n-                     fractions:(void *)fractions\n-                        pixels:(void *)pixels\n+                     fractions:(jfloat*)fractions\n+                        pixels:(jint*)pixels\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLContext.m","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -67,2 +67,2 @@\n-                fractions:(void *)fractions\n-                   pixels:(void *)pixels;\n+                fractions:(jfloat *)fractions\n+                   pixels:(jint *)pixels;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLPaints.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -107,3 +107,4 @@\n-    jboolean      _cyclic;\n-    jint          _pixel1;\n-    jint          _pixel2;\n+    jint          _cyclic;\n+    jint          _pixel[GRAD_MAX_FRACTIONS];\n+    jfloat        _fract[GRAD_MAX_FRACTIONS];\n+    jint          _numFracts;\n@@ -136,2 +137,2 @@\n-               && _pixel1 == other->_pixel1\n-               && _pixel2 == other->_pixel2;\n+               && _pixel[0] == other->_pixel[0]\n+               && _pixel[1] == other->_pixel[1];\n@@ -139,0 +140,15 @@\n+\n+    if (_paintState == sun_java2d_SunGraphics2D_PAINT_LIN_GRADIENT) {\n+        if (_p0 != other->_p0\n+            || _p1 != other->_p1\n+            || _p3 != other->_p3\n+            || _numFracts != other->_numFracts) return NO;\n+\n+\n+        for (int i = 0; i < _numFracts; i++) {\n+            if (_fract[i] != other->_fract[i]) return NO;\n+            if (_pixel[i] != other->_pixel[i]) return NO;\n+        }\n+        return YES;\n+    }\n+\n@@ -165,2 +181,14 @@\n-        _pixel1 = other->_pixel1;\n-        _pixel2 = other->_pixel2;\n+        _pixel[0] = other->_pixel[0];\n+        _pixel[1] = other->_pixel[1];\n+        return;\n+    }\n+\n+    if (other->_paintState == sun_java2d_SunGraphics2D_PAINT_LIN_GRADIENT) {\n+\n+        _p0 = other->_p0;\n+        _p1 = other->_p1;\n+        _p3 = other->_p3;\n+        _cyclic = other->_cyclic;\n+        memcpy(_fract, other->_fract, other->_numFracts*sizeof(jfloat));\n+        memcpy(_pixel, other->_pixel, other->_numFracts*sizeof(jint));\n+        _numFracts = other->_numFracts;\n@@ -169,0 +197,1 @@\n+\n@@ -193,0 +222,4 @@\n+    if (_paintState == sun_java2d_SunGraphics2D_PAINT_LIN_GRADIENT) {\n+        return [NSString stringWithFormat:@\"linear_gradient\"];\n+    }\n+\n@@ -234,2 +267,2 @@\n-    _pixel1 = pixel1;\n-    _pixel2 = pixel2;\n+    _pixel[0] = pixel1;\n+    _pixel[1] = pixel2;\n@@ -249,2 +282,2 @@\n-                fractions:(void *)fractions\n-                   pixels:(void *)pixels\n+                fractions:(jfloat*)fractions\n+                   pixels:(jint*)pixels\n@@ -253,1 +286,10 @@\n-    [self setColor:0];\n+    _paintState = sun_java2d_SunGraphics2D_PAINT_LIN_GRADIENT;\n+    _useMask = useMask;\n+    memcpy(_fract, fractions, numStops*sizeof(jfloat));\n+    memcpy(_pixel, pixels, numStops*sizeof(jint));\n+    _p0 = p0;\n+    _p1 = p1;\n+    _p3 = p3;\n+    _cyclic = cycleMethod;\n+    _numFracts = numStops;\n+\n@@ -418,0 +460,1 @@\n+            \/\/ Gradient paint in AA mode\n@@ -422,2 +465,2 @@\n-                    RGBA_TO_V4(_pixel1),\n-                    RGBA_TO_V4(_pixel2),\n+                    RGBA_TO_V4(_pixel[0]),\n+                    RGBA_TO_V4(_pixel[1]),\n@@ -427,0 +470,20 @@\n+        }  else if (_paintState == sun_java2d_SunGraphics2D_PAINT_LIN_GRADIENT) {\n+            \/\/ Linear gradient paint in AA mode\n+            vertShader = @\"vert_txt_grad\";\n+            fragShader = @\"frag_txt_lin_grad\";\n+\n+            struct LinGradFrameUniforms uf = {\n+                    {_p0, _p1, _p3},\n+                    {},\n+                    {},\n+                    _numFracts,\n+                    _cyclic\n+            };\n+\n+            memcpy(uf.fract, _fract, _numFracts*sizeof(jfloat));\n+            for (int i = 0; i < _numFracts; i++) {\n+                vector_float4 v = RGBA_TO_V4(_pixel[i]);\n+                uf.color[i] = v;\n+            }\n+            [encoder setFragmentBytes:&uf length:sizeof(uf) atIndex:0];\n+\n@@ -454,2 +517,14 @@\n-                    RGBA_TO_V4(_pixel1),\n-                    RGBA_TO_V4(_pixel2),\n+                    RGBA_TO_V4(_pixel[0]),\n+                    RGBA_TO_V4(_pixel[1]),\n+                    _cyclic\n+            };\n+            [encoder setFragmentBytes:&uf length:sizeof(uf) atIndex:0];\n+        } else if (_paintState == sun_java2d_SunGraphics2D_PAINT_LIN_GRADIENT) {\n+            vertShader = @\"vert_grad\";\n+            fragShader = @\"frag_lin_grad\";\n+\n+            struct LinGradFrameUniforms uf = {\n+                    {_p0, _p1, _p3},\n+                    {},\n+                    {},\n+                    _numFracts,\n@@ -458,0 +533,6 @@\n+\n+            memcpy(uf.fract, _fract, _numFracts*sizeof(jfloat));\n+            for (int i = 0; i < _numFracts; i++) {\n+                vector_float4 v = RGBA_TO_V4(_pixel[i]);\n+                uf.color[i] = v;\n+            }\n@@ -459,0 +540,1 @@\n+\n@@ -530,2 +612,2 @@\n-                        RGBA_TO_V4(_pixel1 ^ xorColor),\n-                        RGBA_TO_V4(_pixel2 ^ xorColor),\n+                        RGBA_TO_V4(_pixel[0] ^ xorColor),\n+                        RGBA_TO_V4(_pixel[1] ^ xorColor),\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLPaints.m","additions":100,"deletions":18,"binary":false,"changes":118,"status":"modified"}]}