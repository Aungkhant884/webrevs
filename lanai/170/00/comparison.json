{"files":[{"patch":"@@ -109,7 +109,1 @@\n-        \/**\n-         * This cap will only be set if the fbobject system property has been\n-         * enabled and we are able to create an FBO with depth buffer.\n-         *\/\n-        @Native\n-        public static final int CAPS_EXT_FBOBJECT     =\n-                (CAPS_RT_TEXTURE_ALPHA | CAPS_RT_TEXTURE_OPAQUE);\n+\n@@ -152,3 +146,0 @@\n-            if ((caps & CAPS_EXT_FBOBJECT) != 0) {\n-                sb.append(\"CAPS_EXT_FBOBJECT|\");\n-            }\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/metal\/MTLContext.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -248,17 +248,0 @@\n-    \/\/ TODO: CGraphicsConfig doesn't implement displayChanged() yet\n-    \/\/@Override\n-    public synchronized void displayChanged() {\n-        \/\/super.displayChanged();\n-\n-        \/\/ the context could hold a reference to a MTLSurfaceData, which in\n-        \/\/ turn has a reference back to this MTLGraphicsConfig, so in order\n-        \/\/ for this instance to be disposed we need to break the connection\n-        MTLRenderQueue rq = MTLRenderQueue.getInstance();\n-        rq.lock();\n-        try {\n-            MTLContext.invalidateCurrentContext();\n-        } finally {\n-            rq.unlock();\n-        }\n-    }\n-\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/metal\/MTLGraphicsConfig.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -588,3 +588,2 @@\n-     * SurfaceData object representing an off-screen buffer (either a FBO or\n-     * Texture).\n-+     *\/\n+     * SurfaceData object representing an off-screen buffer\n+     *\/\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/java2d\/metal\/MTLSurfaceData.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -212,1 +212,1 @@\n-        \/\/ initialize the surface as an OGLSD_WINDOW\n+        \/\/ initialize the surface as an MTLSD_WINDOW\n@@ -230,11 +230,0 @@\n-    \/\/ perform additional one-time initialization, if necessary\n-    if (dstOps->needsInit) {\n-        if (dstOps->isOpaque) {\n-            \/\/ in this case we are treating the destination as opaque, but\n-            \/\/ to do so, first we need to ensure that the alpha channel\n-            \/\/ is filled with fully opaque values (see 6319663)\n-            \/\/MTLContext_InitAlphaChannel();\n-        }\n-        dstOps->needsInit = JNI_FALSE;\n-    }\n-\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLContext.m","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -43,4 +43,0 @@\n- *\n- *     jint screen;\n- * The screen for the associated MTLGraphicsConfig.\n- *\n@@ -51,1 +47,0 @@\n-    jint                screen;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLGraphicsConfig.h","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -222,1 +222,0 @@\n-    mtlinfo->screen = displayID;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLGraphicsConfig.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -274,4 +274,0 @@\n-    if (bmtlsdo->drawableType == MTLSD_WINDOW) {\n-        \/\/ TODO: detach the NSView from the metal context\n-    }\n-\n@@ -369,1 +365,0 @@\n-    bmtlsdo->needsInit = JNI_TRUE;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLSurfaceData.m","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -102,1 +102,0 @@\n-    jboolean                     needsInit;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLSurfaceDataBase.h","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}