{"files":[{"patch":"@@ -616,2 +616,2 @@\n-    sub(t1, sp, offset);\n-    sd(zr, Address(t1));\n+    sub(t0, sp, offset);\n+    sd(zr, Address(t0));\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -898,5 +898,3 @@\n-  \/\/ Bang each page in the shadow zone. We can't assume it's been done for\n-  \/\/ an interpreter frame with greater than a page of locals, so each page\n-  \/\/ needs to be checked.  Only true for non-native.\n-  const int n_shadow_pages = StackOverflow::stack_shadow_zone_size() \/ os::vm_page_size();\n-  const int start_page = native_call ? n_shadow_pages : 1;\n+  \/\/ See more discussion in stackOverflow.hpp.\n+\n+  const int shadow_zone_size = checked_cast<int>(StackOverflow::stack_shadow_zone_size());\n@@ -904,3 +902,23 @@\n-  for (int pages = start_page; pages <= n_shadow_pages ; pages++) {\n-    __ sub(t1, sp, pages * page_size);\n-    __ sd(zr, Address(t1));\n+  const int n_shadow_pages = shadow_zone_size \/ page_size;\n+\n+#ifdef ASSERT\n+  Label L_good_limit;\n+  __ ld(t0, Address(xthread, JavaThread::shadow_zone_safe_limit()));\n+  __ bnez(t0, L_good_limit);\n+  __ stop(\"shadow zone safe limit is not initialized\");\n+  __ bind(L_good_limit);\n+\n+  Label L_good_watermark;\n+  __ ld(t0, Address(xthread, JavaThread::shadow_zone_growth_watermark()));\n+  __ bnez(t0, L_good_watermark);\n+  __ stop(\"shadow zone growth watermark is not initialized\");\n+  __ bind(L_good_watermark);\n+#endif\n+\n+  Label L_done;\n+\n+  __ ld(t0, Address(xthread, JavaThread::shadow_zone_growth_watermark()));\n+  __ bgtu(sp, t0, L_done);\n+\n+  for (int p = 1; p <= n_shadow_pages; p++) {\n+    __ bang_stack_with_offset(p * page_size);\n@@ -908,0 +926,8 @@\n+\n+  \/\/ Record the new watermark, but only if the update is above the safe limit.\n+  \/\/ Otherwise, the next time around the check above would pass the safe limit.\n+  __ ld(t0, Address(xthread, JavaThread::shadow_zone_safe_limit()));\n+  __ bleu(sp, t0, L_done);\n+  __ sd(sp, Address(xthread, JavaThread::shadow_zone_growth_watermark()));\n+\n+  __ bind(L_done);\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":34,"deletions":8,"binary":false,"changes":42,"status":"modified"}]}