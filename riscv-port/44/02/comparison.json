{"files":[{"patch":"@@ -6417,1 +6417,1 @@\n-instruct lShiftL_regI_immGE32(iRegLNoSp dst, iRegIorL2I src, uimmI6_ge32 scale) %{\n+instruct lShiftL_regI_immGE32(iRegLNoSp dst, iRegI src, uimmI6_ge32 scale) %{\n@@ -6592,15 +6592,0 @@\n-instruct smulI(iRegLNoSp dst, iRegIorL2I src1, iRegIorL2I src2) %{\n-  match(Set dst (MulL (ConvI2L src1) (ConvI2L src2)));\n-  ins_cost(IMUL_COST);\n-  format %{ \"mul  $dst, $src1, $src2\\t#@smulI\" %}\n-\n-  \/\/ Signed Multiply Long multiplies two 32-bit signed values to produce a 64-bit result.\n-  ins_encode %{\n-    __ mul(as_Register($dst$$reg),\n-            as_Register($src1$$reg),\n-            as_Register($src2$$reg));\n-  %}\n-\n-  ins_pipe(imul_reg_reg);\n-%}\n-\n@@ -6707,0 +6692,1 @@\n+\/\/ In RV64I, only the low 5 bits of src2 are considered for the shift amount\n@@ -6739,0 +6725,1 @@\n+\/\/ In RV64I, only the low 5 bits of src2 are considered for the shift amount\n@@ -6771,0 +6758,1 @@\n+\/\/ In RV64I, only the low 5 bits of src2 are considered for the shift amount\n@@ -6805,0 +6793,1 @@\n+\/\/ In RV64I, only the low 6 bits of src2 are considered for the shift amount\n@@ -6839,0 +6828,1 @@\n+\/\/ In RV64I, only the low 6 bits of src2 are considered for the shift amount\n@@ -6891,0 +6881,1 @@\n+\/\/ In RV64I, only the low 6 bits of src2 are considered for the shift amount\n@@ -6924,2 +6915,1 @@\n-instruct regI_not_reg(iRegINoSp dst,\n-                         iRegIorL2I src1, immI_M1 m1) %{\n+instruct regI_not_reg(iRegINoSp dst, iRegI src1, immI_M1 m1) %{\n@@ -6937,2 +6927,1 @@\n-instruct regL_not_reg(iRegLNoSp dst,\n-                      iRegL src1, immL_M1 m1) %{\n+instruct regL_not_reg(iRegLNoSp dst, iRegL src1, immL_M1 m1) %{\n@@ -7372,1 +7361,1 @@\n-instruct andI_reg_reg(iRegINoSp dst, iRegIorL2I src1, iRegIorL2I src2) %{\n+instruct andI_reg_reg(iRegINoSp dst, iRegI src1, iRegI src2) %{\n@@ -7388,1 +7377,1 @@\n-instruct andI_reg_imm(iRegINoSp dst, iRegIorL2I src1, immIAdd src2) %{\n+instruct andI_reg_imm(iRegINoSp dst, iRegI src1, immIAdd src2) %{\n@@ -7404,1 +7393,1 @@\n-instruct orI_reg_reg(iRegINoSp dst, iRegIorL2I src1, iRegIorL2I src2) %{\n+instruct orI_reg_reg(iRegINoSp dst, iRegI src1, iRegI src2) %{\n@@ -7420,1 +7409,1 @@\n-instruct orI_reg_imm(iRegINoSp dst, iRegIorL2I src1, immIAdd src2) %{\n+instruct orI_reg_imm(iRegINoSp dst, iRegI src1, immIAdd src2) %{\n@@ -7436,1 +7425,1 @@\n-instruct xorI_reg_reg(iRegINoSp dst, iRegIorL2I src1, iRegIorL2I src2) %{\n+instruct xorI_reg_reg(iRegINoSp dst, iRegI src1, iRegI src2) %{\n@@ -7452,1 +7441,1 @@\n-instruct xorI_reg_imm(iRegINoSp dst, iRegIorL2I src1, immIAdd src2) %{\n+instruct xorI_reg_imm(iRegINoSp dst, iRegI src1, immIAdd src2) %{\n@@ -7844,1 +7833,1 @@\n-instruct convI2Bool(iRegINoSp dst, iRegIorL2I src)\n+instruct convI2Bool(iRegINoSp dst, iRegI src)\n@@ -7880,1 +7869,1 @@\n-  format %{ \"addw  $dst, $src\\t#@convI2L_reg_reg\" %}\n+  format %{ \"addw  $dst, $src, zr\\t#@convI2L_reg_reg\" %}\n@@ -8440,1 +8429,1 @@\n-instruct cmpLTMask_reg_reg(iRegINoSp dst, iRegIorL2I p, iRegIorL2I q)\n+instruct cmpLTMask_reg_reg(iRegINoSp dst, iRegI p, iRegI q)\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":18,"deletions":29,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -907,1 +907,1 @@\n-instruct vreduce_maxB(iRegINoSp dst, iRegIorL2I src1, vReg src2, vReg tmp) %{\n+instruct vreduce_maxB(iRegINoSp dst, iRegI src1, vReg src2, vReg tmp) %{\n@@ -925,1 +925,1 @@\n-instruct vreduce_maxS(iRegINoSp dst, iRegIorL2I src1, vReg src2, vReg tmp) %{\n+instruct vreduce_maxS(iRegINoSp dst, iRegI src1, vReg src2, vReg tmp) %{\n@@ -974,1 +974,1 @@\n-instruct vreduce_minB(iRegINoSp dst, iRegIorL2I src1, vReg src2, vReg tmp) %{\n+instruct vreduce_minB(iRegINoSp dst, iRegI src1, vReg src2, vReg tmp) %{\n@@ -992,1 +992,1 @@\n-instruct vreduce_minS(iRegINoSp dst, iRegIorL2I src1, vReg src2, vReg tmp) %{\n+instruct vreduce_minS(iRegINoSp dst, iRegI src1, vReg src2, vReg tmp) %{\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}