{"files":[{"patch":"@@ -42,0 +42,25 @@\n+Register NativeInstruction::extract_rs1(address instr) {\n+  assert_cond(instr != NULL);\n+  return as_Register(Assembler::extract(((unsigned*)instr)[0], 19, 15));\n+}\n+\n+Register NativeInstruction::extract_rs2(address instr) {\n+  assert_cond(instr != NULL);\n+  return as_Register(Assembler::extract(((unsigned*)instr)[0], 24, 20));\n+}\n+\n+Register NativeInstruction::extract_rd(address instr) {\n+  assert_cond(instr != NULL);\n+  return as_Register(Assembler::extract(((unsigned*)instr)[0], 11, 7));\n+}\n+\n+uint32_t NativeInstruction::extract_opcode(address instr) {\n+  assert_cond(instr != NULL);\n+  return Assembler::extract(((unsigned*)instr)[0], 6, 0);\n+}\n+\n+uint32_t NativeInstruction::extract_funct3(address instr) {\n+  assert_cond(instr != NULL);\n+  return Assembler::extract(((unsigned*)instr)[0], 14, 12);\n+}\n+\n@@ -47,6 +72,6 @@\n-  if ((is_auipc_at(instr)) &&\n-      (is_addi_at(instr + 4) || is_jalr_at(instr + 4) || is_load_at(instr + 4) || is_float_load_at(instr + 4)) &&\n-      check_pc_relative_data_dependency(instr)) {\n-    return true;\n-  }\n-  return false;\n+  return (is_auipc_at(instr)) &&\n+         (is_addi_at(instr + instruction_size) ||\n+          is_jalr_at(instr + instruction_size) ||\n+          is_load_at(instr + instruction_size) ||\n+          is_float_load_at(instr + instruction_size)) &&\n+         check_pc_relative_data_dependency(instr);\n@@ -57,6 +82,3 @@\n-  if (is_auipc_at(instr) && \/\/ auipc\n-      is_ld_at(instr + 4) && \/\/ ld\n-      check_load_pc_relative_data_dependency(instr)) {\n-      return true;\n-  }\n-  return false;\n+  return is_auipc_at(instr) && \/\/ auipc\n+         is_ld_at(instr + instruction_size) && \/\/ ld\n+         check_load_pc_relative_data_dependency(instr);\n@@ -66,10 +88,9 @@\n-  if (is_lui_at(instr) && \/\/ Lui\n-      is_addi_at(instr + 4) && \/\/ Addi\n-      is_slli_shift_at(instr + 8, 11) && \/\/ Slli Rd, Rs, 11\n-      is_addi_at(instr + 12) && \/\/ Addi\n-      is_slli_shift_at(instr + 16, 5) && \/\/ Slli Rd, Rs, 5\n-      (is_addi_at(instr + 20) || is_jalr_at(instr + 20) || is_load_at(instr + 20)) && \/\/ Addi\/Jalr\/Load\n-      check_movptr_data_dependency(instr)) {\n-    return true;\n-  }\n-  return false;\n+  return is_lui_at(instr) && \/\/ Lui\n+         is_addi_at(instr + instruction_size) && \/\/ Addi\n+         is_slli_shift_at(instr + instruction_size * 2, 11) && \/\/ Slli Rd, Rs, 11\n+         is_addi_at(instr + instruction_size * 3) && \/\/ Addi\n+         is_slli_shift_at(instr + instruction_size * 4, 5) && \/\/ Slli Rd, Rs, 5\n+         (is_addi_at(instr + instruction_size * 5) ||\n+          is_jalr_at(instr + instruction_size * 5) ||\n+          is_load_at(instr + instruction_size * 5)) && \/\/ Addi\/Jalr\/Load\n+         check_movptr_data_dependency(instr);\n@@ -79,6 +100,3 @@\n-  if (is_lui_at(instr) && \/\/ lui\n-      is_addiw_at(instr + 4) && \/\/ addiw\n-      check_li32_data_dependency(instr)) {\n-    return true;\n-  }\n-  return false;\n+  return is_lui_at(instr) && \/\/ lui\n+         is_addiw_at(instr + instruction_size) && \/\/ addiw\n+         check_li32_data_dependency(instr);\n@@ -88,12 +106,9 @@\n-  if (is_lui_at(instr) && \/\/ lui\n-      is_addi_at(instr + 4) && \/\/ addi\n-      is_slli_shift_at(instr + 8, 12)&&  \/\/ Slli Rd, Rs, 12\n-      is_addi_at(instr + 12) && \/\/ addi\n-      is_slli_shift_at(instr + 16, 12) && \/\/ Slli Rd, Rs, 12\n-      is_addi_at(instr + 20) && \/\/ addi\n-      is_slli_shift_at(instr + 24, 8) && \/\/ Slli Rd, Rs, 8\n-      is_addi_at(instr + 28) && \/\/ addi\n-      check_li64_data_dependency(instr)) {\n-    return true;\n-  }\n-  return false;\n+  return is_lui_at(instr) && \/\/ lui\n+         is_addi_at(instr + instruction_size) && \/\/ addi\n+         is_slli_shift_at(instr + instruction_size * 2, 12) &&  \/\/ Slli Rd, Rs, 12\n+         is_addi_at(instr + instruction_size * 3) && \/\/ addi\n+         is_slli_shift_at(instr + instruction_size * 4, 12) &&  \/\/ Slli Rd, Rs, 12\n+         is_addi_at(instr + instruction_size * 5) && \/\/ addi\n+         is_slli_shift_at(instr + instruction_size * 6, 8) &&   \/\/ Slli Rd, Rs, 8\n+         is_addi_at(instr + instruction_size * 7) && \/\/ addi\n+         check_li64_data_dependency(instr);\n@@ -310,4 +325,3 @@\n-  unsigned insn = *(unsigned*)instr;\n-  return (Assembler::extract(insn, 6, 0) == 0b0000011 &&\n-          Assembler::extract(insn, 14, 12) == 0b110 &&\n-          Assembler::extract(insn, 11, 7) == 0b00000); \/\/ zr\n+  return (extract_opcode(instr) == 0b0000011 &&\n+          extract_funct3(instr) == 0b110 &&\n+          extract_rd(instr) == zr);         \/\/ zr\n@@ -368,2 +382,0 @@\n-  NativeGeneralJump* n_jump = (NativeGeneralJump*)code_pos;\n-\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":58,"deletions":46,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -69,15 +69,11 @@\n-  static bool is_jal_at(address instr)        { assert_cond(instr != NULL); return Assembler::extract(((unsigned*)instr)[0], 6, 0) == 0b1101111; }\n-  static bool is_jalr_at(address instr)       { assert_cond(instr != NULL); return (Assembler::extract(((unsigned*)instr)[0], 6, 0) == 0b1100111 &&\n-                                                Assembler::extract(((unsigned*)instr)[0], 14, 12) == 0b000); }\n-  static bool is_branch_at(address instr)     { assert_cond(instr != NULL); return Assembler::extract(((unsigned*)instr)[0], 6, 0) == 0b1100011; }\n-  static bool is_ld_at(address instr)         { assert_cond(instr != NULL); return (Assembler::extract(((unsigned*)instr)[0], 6, 0) == 0b0000011 &&\n-                                                Assembler::extract(((unsigned*)instr)[0], 14, 12) == 0b011); }\n-  static bool is_load_at(address instr)       { assert_cond(instr != NULL); return Assembler::extract(((unsigned*)instr)[0], 6, 0) == 0b0000011; }\n-  static bool is_float_load_at(address instr) { assert_cond(instr != NULL); return Assembler::extract(((unsigned*)instr)[0], 6, 0) == 0b0000111; }\n-  static bool is_auipc_at(address instr)      { assert_cond(instr != NULL); return Assembler::extract(((unsigned*)instr)[0], 6, 0) == 0b0010111; }\n-  static bool is_jump_at(address instr)       { assert_cond(instr != NULL); return (is_branch_at(instr) || is_jal_at(instr) || is_jalr_at(instr)); }\n-  static bool is_addi_at(address instr)       { assert_cond(instr != NULL); return (Assembler::extract(((unsigned*)instr)[0], 6, 0) == 0b0010011 &&\n-                                                Assembler::extract(((unsigned*)instr)[0], 14, 12) == 0b000); }\n-  static bool is_addiw_at(address instr)      { assert_cond(instr != NULL); return (Assembler::extract(((unsigned*)instr)[0], 6, 0) == 0b0011011 &&\n-                                                Assembler::extract(((unsigned*)instr)[0], 14, 12) == 0b000); }\n-  static bool is_lui_at(address instr)        { assert_cond(instr != NULL); return Assembler::extract(((unsigned*)instr)[0], 6, 0) == 0b0110111; }\n+  static bool is_jal_at(address instr)        { assert_cond(instr != NULL); return extract_opcode(instr) == 0b1101111; }\n+  static bool is_jalr_at(address instr)       { assert_cond(instr != NULL); return extract_opcode(instr) == 0b1100111 && extract_funct3(instr) == 0b000; }\n+  static bool is_branch_at(address instr)     { assert_cond(instr != NULL); return extract_opcode(instr) == 0b1100011; }\n+  static bool is_ld_at(address instr)         { assert_cond(instr != NULL); return is_load_at(instr) && extract_funct3(instr) == 0b011; }\n+  static bool is_load_at(address instr)       { assert_cond(instr != NULL); return extract_opcode(instr) == 0b0000011; }\n+  static bool is_float_load_at(address instr) { assert_cond(instr != NULL); return extract_opcode(instr) == 0b0000111; }\n+  static bool is_auipc_at(address instr)      { assert_cond(instr != NULL); return extract_opcode(instr) == 0b0010111; }\n+  static bool is_jump_at(address instr)       { assert_cond(instr != NULL); return is_branch_at(instr) || is_jal_at(instr) || is_jalr_at(instr); }\n+  static bool is_addi_at(address instr)       { assert_cond(instr != NULL); return extract_opcode(instr) == 0b0010011 && extract_funct3(instr) == 0b000; }\n+  static bool is_addiw_at(address instr)      { assert_cond(instr != NULL); return extract_opcode(instr) == 0b0011011 && extract_funct3(instr) == 0b000; }\n+  static bool is_lui_at(address instr)        { assert_cond(instr != NULL); return extract_opcode(instr) == 0b0110111; }\n@@ -86,2 +82,2 @@\n-    return (Assembler::extract(((unsigned*)instr)[0], 6, 0) == 0b0010011 && \/\/ opcode field\n-            Assembler::extract(((unsigned*)instr)[0], 14, 12) == 0b001 &&   \/\/ funct3 field, select the type of operation\n+    return (extract_opcode(instr) == 0b0010011 && \/\/ opcode field\n+            extract_funct3(instr) == 0b001 &&     \/\/ funct3 field, select the type of operation\n@@ -91,5 +87,5 @@\n-  \/\/ return true if the (index1~index2) field of instr1 is equal to (index3~index4) field of instr2, otherwise false\n-  static bool compare_instr_field(address instr1, int index1, int index2, address instr2, int index3, int index4) {\n-    assert_cond(instr1 != NULL && instr2 != NULL);\n-    return Assembler::extract(((unsigned*)instr1)[0], index1, index2) == Assembler::extract(((unsigned*)instr2)[0], index3, index4);\n-  }\n+  static Register extract_rs1(address instr);\n+  static Register extract_rs2(address instr);\n+  static Register extract_rd(address instr);\n+  static uint32_t extract_opcode(address instr);\n+  static uint32_t extract_funct3(address instr);\n@@ -105,9 +101,15 @@\n-    return compare_instr_field(instr + 4, 19, 15, instr, 11, 7)       &&     \/\/ check the rs1 field of addi and the rd field of lui\n-           compare_instr_field(instr + 4, 19, 15, instr + 4, 11, 7)   &&     \/\/ check the rs1 field and the rd field of addi\n-           compare_instr_field(instr + 8, 19, 15, instr + 4, 11, 7)   &&     \/\/ check the rs1 field of slli and the rd field of addi\n-           compare_instr_field(instr + 8, 19, 15, instr + 8, 11, 7)   &&     \/\/ check the rs1 field and the rd field of slli\n-           compare_instr_field(instr + 12, 19, 15, instr + 8, 11, 7)  &&     \/\/ check the rs1 field of addi and the rd field of slli\n-           compare_instr_field(instr + 12, 19, 15, instr + 12, 11, 7) &&     \/\/ check the rs1 field and the rd field of addi\n-           compare_instr_field(instr + 16, 19, 15, instr + 12, 11, 7) &&     \/\/ check the rs1 field of slli and the rd field of addi\n-           compare_instr_field(instr + 16, 19, 15, instr + 16, 11, 7) &&     \/\/ check the rs1 field and the rd field of slli\n-           compare_instr_field(instr + 20, 19, 15, instr + 16, 11, 7);       \/\/ check the rs1 field of addi\/jalr\/load and the rd field of slli\n+    address lui = instr;\n+    address addi1 = lui + instruction_size;\n+    address slli1 = addi1 + instruction_size;\n+    address addi2 = slli1 + instruction_size;\n+    address slli2 = addi2 + instruction_size;\n+    address last_instr = slli2 + instruction_size;\n+    return extract_rs1(addi1) == extract_rd(lui) &&\n+           extract_rs1(addi1) == extract_rd(addi1) &&\n+           extract_rs1(slli1) == extract_rd(addi1) &&\n+           extract_rs1(slli1) == extract_rd(slli1) &&\n+           extract_rs1(addi2) == extract_rd(slli1) &&\n+           extract_rs1(addi2) == extract_rd(addi2) &&\n+           extract_rs1(slli2) == extract_rd(addi2) &&\n+           extract_rs1(slli2) == extract_rd(slli2) &&\n+           extract_rs1(last_instr) == extract_rd(slli2);\n@@ -126,14 +128,22 @@\n-    return compare_instr_field(instr + 4, 19, 15, instr, 11, 7)       &&  \/\/ check the rs1 field of addi and the rd field of lui\n-           compare_instr_field(instr + 4, 19, 15, instr + 4, 11, 7)   &&  \/\/ check the rs1 field and the rd field of addi\n-           compare_instr_field(instr + 8, 19, 15, instr + 4, 11, 7)   &&  \/\/ check the rs1 field of slli and the rd field of addi\n-           compare_instr_field(instr + 8, 19, 15, instr + 8, 11, 7)   &&  \/\/ check the rs1 field and the rd field of slli\n-           compare_instr_field(instr + 12, 19, 15, instr + 8, 11, 7)  &&  \/\/ check the rs1 field of addi and the rd field of slli\n-           compare_instr_field(instr + 12, 19, 15, instr + 12, 11, 7) &&  \/\/ check the rs1 field and the rd field of addi\n-           compare_instr_field(instr + 16, 19, 15, instr + 12, 11, 7) &&  \/\/ check the rs1 field of slli and the rd field of addi\n-           compare_instr_field(instr + 16, 19, 15, instr + 16, 11, 7) &&  \/\/ check the rs1 field and the rd field fof slli\n-           compare_instr_field(instr + 20, 19, 15, instr + 16, 11, 7) &&  \/\/ check the rs1 field of addi and the rd field of slli\n-           compare_instr_field(instr + 20, 19, 15, instr + 20, 11, 7) &&  \/\/ check the rs1 field and the rd field of addi\n-           compare_instr_field(instr + 24, 19, 15, instr + 20, 11, 7) &&  \/\/ check the rs1 field of slli and the rd field of addi\n-           compare_instr_field(instr + 24, 19, 15, instr + 24, 11, 7) &&  \/\/ check the rs1 field and the rd field of slli\n-           compare_instr_field(instr + 28, 19, 15, instr + 24, 11, 7) &&  \/\/ check the rs1 field of addi and the rd field of slli\n-           compare_instr_field(instr + 28, 19, 15, instr + 28, 11, 7);    \/\/ check the rs1 field and the rd field of addi\n+    address lui = instr;\n+    address addi1 = lui + instruction_size;\n+    address slli1 = addi1 + instruction_size;\n+    address addi2 = slli1 + instruction_size;\n+    address slli2 = addi2 + instruction_size;\n+    address addi3 = slli2 + instruction_size;\n+    address slli3 = addi3 + instruction_size;\n+    address addi4 = slli3 + instruction_size;\n+    return extract_rs1(addi1) == extract_rd(lui) &&\n+           extract_rs1(addi1) == extract_rd(addi1) &&\n+           extract_rs1(slli1) == extract_rd(addi1) &&\n+           extract_rs1(slli1) == extract_rd(slli1) &&\n+           extract_rs1(addi2) == extract_rd(slli1) &&\n+           extract_rs1(addi2) == extract_rd(addi2) &&\n+           extract_rs1(slli2) == extract_rd(addi2) &&\n+           extract_rs1(slli2) == extract_rd(slli2) &&\n+           extract_rs1(addi3) == extract_rd(slli2) &&\n+           extract_rs1(addi3) == extract_rd(addi3) &&\n+           extract_rs1(slli3) == extract_rd(addi3) &&\n+           extract_rs1(slli3) == extract_rd(slli3) &&\n+           extract_rs1(addi4) == extract_rd(slli3) &&\n+           extract_rs1(addi4) == extract_rd(addi4);\n@@ -146,2 +156,5 @@\n-    return compare_instr_field(instr + 4, 19, 15, instr, 11, 7) &&     \/\/ check the rs1 field of addiw and the rd field of lui\n-           compare_instr_field(instr + 4, 19, 15, instr + 4, 11, 7);   \/\/ check the rs1 field and the rd field of addiw\n+    address lui = instr;\n+    address addiw = lui + instruction_size;\n+\n+    return extract_rs1(addiw) == extract_rd(lui) &&\n+           extract_rs1(addiw) == extract_rd(addiw);\n@@ -154,1 +167,4 @@\n-    return compare_instr_field(instr, 11, 7, instr + 4, 19, 15);          \/\/ check the rd field of auipc and the rs1 field of jalr\/addi\/load\/float_load\n+    address auipc = instr;\n+    address last_instr = auipc + instruction_size;\n+\n+    return extract_rs1(last_instr) == extract_rd(auipc);\n@@ -161,2 +177,5 @@\n-    return compare_instr_field(instr, 11, 7, instr + 4, 11, 7) &&      \/\/ check the rd field of auipc and the rd field of load\n-           compare_instr_field(instr + 4, 19, 15, instr + 4, 11, 7);   \/\/ check the rs1 field of load and the rd field of load\n+    address auipc = instr;\n+    address load = auipc + instruction_size;\n+\n+    return extract_rd(load) == extract_rd(auipc) &&\n+           extract_rs1(load) == extract_rd(load);\n@@ -180,2 +199,0 @@\n-  inline bool is_illegal();\n-  inline bool is_return();\n@@ -183,1 +200,0 @@\n-  inline bool is_cond_jump();\n@@ -213,2 +229,1 @@\n-    unsigned int insn = uint_at(0);\n-    return (insn & 0x7f) == 0b1111 && Assembler::extract(insn, 14, 12) == 0;\n+    return (uint_at(0) & 0x7f) == 0b1111 && extract_funct3(addr_at(0)) == 0;\n@@ -520,5 +535,6 @@\n-  if (NativeInstruction::is_auipc_at(addr) && NativeInstruction::is_ld_at(addr + 4) && NativeInstruction::is_jalr_at(addr + 8) &&\n-      (as_Register((intptr_t)Assembler::extract(((unsigned*)addr)[0], 11, 7))     == x5) &&\n-      (as_Register((intptr_t)Assembler::extract(((unsigned*)addr)[1], 11, 7))     == x5) &&\n-      (as_Register((intptr_t)Assembler::extract(((unsigned*)addr)[1], 19, 15))    == x5) &&\n-      (as_Register((intptr_t)Assembler::extract(((unsigned*)addr)[2], 19, 15))    == x5) &&\n+  const int instr_size = NativeInstruction::instruction_size;\n+  if (NativeInstruction::is_auipc_at(addr) && NativeInstruction::is_ld_at(addr + instr_size) && NativeInstruction::is_jalr_at(addr + 2 * instr_size) &&\n+      (NativeInstruction::extract_rd(addr)                    == x5) &&\n+      (NativeInstruction::extract_rd(addr + instr_size)       == x5) &&\n+      (NativeInstruction::extract_rs1(addr + instr_size)      == x5) &&\n+      (NativeInstruction::extract_rs1(addr + 2 * instr_size)  == x5) &&\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.hpp","additions":76,"deletions":60,"binary":false,"changes":136,"status":"modified"}]}