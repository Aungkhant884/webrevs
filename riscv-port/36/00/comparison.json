{"files":[{"patch":"@@ -3028,0 +3028,66 @@\n+#ifdef COMPILER2\n+\/\/ Code for BigInteger::mulAdd instrinsic\n+\/\/ out     = x10\n+\/\/ in      = x11\n+\/\/ offset  = x12  (already out.length-offset)\n+\/\/ len     = x13\n+\/\/ k       = x14\n+\/\/ tmp     = x28\n+\/\/\n+\/\/ pseudo code from java implementation:\n+\/\/ carry = 0;\n+\/\/ offset = out.length-offset - 1;\n+\/\/ for (int j = len - 1; j >= 0; j--) {\n+\/\/     product = (in[j] & LONG_MASK) * kLong + (out[offset] & LONG_MASK) + carry;\n+\/\/     out[offset--] = (int)product;\n+\/\/     carry = product >>> 32;\n+\/\/ }\n+\/\/ return (int)carry;\n+void MacroAssembler::mul_add(Register out, Register in, Register offset,\n+                             Register len, Register k, Register tmp) {\n+  Label L_tail_loop, L_unroll, L_end;\n+  mv(tmp, out);\n+  mv(out, zr);\n+  beqz(len, L_end);\n+  zero_ext(k, k, 32);\n+  slli(t0, offset, LogBytesPerInt);\n+  add(offset, tmp, t0);\n+  slli(t0, len, LogBytesPerInt);\n+  add(in, in, t0);\n+\n+  const int unroll = 8;\n+  li(tmp, unroll);\n+  blt(len, tmp, L_tail_loop);\n+  bind(L_unroll);\n+  for (unsigned i = 0; i < unroll; i++) {\n+    sub(in, in, BytesPerInt);\n+    lwu(t0, Address(in, 0));\n+    mul(t1, t0, k);\n+    add(t0, t1, out);\n+    sub(offset, offset, BytesPerInt);\n+    lwu(t1, Address(offset, 0));\n+    add(t0, t0, t1);\n+    sw(t0, Address(offset, 0));\n+    srli(out, t0, 32);\n+  }\n+  sub(len, len, tmp);\n+  bge(len, tmp, L_unroll);\n+\n+  bind(L_tail_loop);\n+  beqz(len, L_end);\n+  sub(in, in, BytesPerInt);\n+  lwu(t0, Address(in, 0));\n+  mul(t1, t0, k);\n+  add(t0, t1, out);\n+  sub(offset, offset, BytesPerInt);\n+  lwu(t1, Address(offset, 0));\n+  add(t0, t0, t1);\n+  sw(t0, Address(offset, 0));\n+  srli(out, t0, 32);\n+  sub(len, len, 1);\n+  j(L_tail_loop);\n+\n+  bind(L_end);\n+}\n+#endif\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":66,"deletions":0,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -659,0 +659,5 @@\n+#ifdef COMPILER2\n+  void mul_add(Register out, Register in, Register offset,\n+               Register len, Register k, Register tmp);\n+#endif\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2773,0 +2773,25 @@\n+#ifdef COMPILER2\n+  address generate_mulAdd()\n+  {\n+    __ align(CodeEntryAlignment);\n+    StubCodeMark mark(this, \"StubRoutines\", \"mulAdd\");\n+\n+    address entry = __ pc();\n+\n+    const Register out     = x10;\n+    const Register in      = x11;\n+    const Register offset  = x12;\n+    const Register len     = x13;\n+    const Register k       = x14;\n+    const Register tmp     = x28;\n+\n+    BLOCK_COMMENT(\"Entry:\");\n+    __ enter();\n+    __ mul_add(out, in, offset, len, k, tmp);\n+    __ leave();\n+    __ ret();\n+\n+    return entry;\n+  }\n+#endif\n+\n@@ -2943,0 +2968,6 @@\n+#ifdef COMPILER2\n+    if (UseMulAddIntrinsic) {\n+      StubRoutines::_mulAdd = generate_mulAdd();\n+    }\n+#endif\n+\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -164,0 +164,4 @@\n+\n+  if (FLAG_IS_DEFAULT(UseMulAddIntrinsic)) {\n+    FLAG_SET_DEFAULT(UseMulAddIntrinsic, true);\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}