{"files":[{"patch":"@@ -1961,0 +1961,7 @@\n+  INSN(andn,      0b0110011, 0b111, 0b0100000);\n+  INSN(orn,       0b0110011, 0b110, 0b0100000);\n+  INSN(xnor,      0b0110011, 0b100, 0b0100000);\n+  INSN(max,       0b0110011, 0b110, 0b0000101);\n+  INSN(maxu,      0b0110011, 0b111, 0b0000101);\n+  INSN(min,       0b0110011, 0b100, 0b0000101);\n+  INSN(minu,      0b0110011, 0b101, 0b0000101);\n@@ -1985,0 +1992,1 @@\n+  INSN(orc_b,  0b0010011, 0b101, 0b001010000111);\n@@ -2001,1 +2009,2 @@\n-  INSN(rori, 0b0010011, 0b101, 0b011000);\n+  INSN(rori,    0b0010011, 0b101, 0b011000);\n+  INSN(slli_uw, 0b0011011, 0b001, 0b000010);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -7370,0 +7370,38 @@\n+instruct absI_reg(iRegINoSp dst, iRegIorL2I src) %{\n+  match(Set dst (AbsI src));\n+\n+  ins_cost(ALU_COST * 3);\n+  format %{\n+    \"sraiw  t0, $src, 0x1f\\n\\t\"\n+    \"addw  $dst, $src, t0\\n\\t\"\n+    \"xorr  $dst, $dst, t0\\t#@absI_reg\"\n+  %}\n+\n+  ins_encode %{\n+    __ sraiw(t0, as_Register($src$$reg), 0x1f);\n+    __ addw(as_Register($dst$$reg), as_Register($src$$reg), t0);\n+    __ xorr(as_Register($dst$$reg), as_Register($dst$$reg), t0);\n+  %}\n+\n+  ins_pipe(ialu_reg_reg);\n+%}\n+\n+instruct absL_reg(iRegLNoSp dst, iRegL src) %{\n+  match(Set dst (AbsL src));\n+\n+  ins_cost(ALU_COST * 3);\n+  format %{\n+    \"srai  t0, $src, 0x3f\\n\\t\"\n+    \"add  $dst, $src, t0\\n\\t\"\n+    \"xorr  $dst, $dst, t0\\t#@absL_reg\"\n+  %}\n+\n+  ins_encode %{\n+    __ srai(t0, as_Register($src$$reg), 0x3f);\n+    __ add(as_Register($dst$$reg), as_Register($src$$reg), t0);\n+    __ xorr(as_Register($dst$$reg), as_Register($dst$$reg), t0);\n+  %}\n+\n+  ins_pipe(ialu_reg_reg);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -395,0 +395,132 @@\n+%}\n+\n+\/\/ Max and Min\n+instruct minI_reg_rvb(iRegINoSp dst, iRegI src1, iRegI src2) %{\n+  predicate(UseRVB);\n+  match(Set dst (MinI src1 src2));\n+\n+  ins_cost(ALU_COST);\n+  format %{ \"min  $dst, $src1, $src2\\t#@minI_reg_rvb\" %}\n+\n+  ins_encode %{\n+    __ min(as_Register($dst$$reg), as_Register($src1$$reg), as_Register($src2$$reg));\n+  %}\n+\n+  ins_pipe(ialu_reg_reg);\n+%}\n+\n+instruct maxI_reg_rvb(iRegINoSp dst, iRegI src1, iRegI src2) %{\n+  predicate(UseRVB);\n+  match(Set dst (MaxI src1 src2));\n+\n+  ins_cost(ALU_COST);\n+  format %{ \"max  $dst, $src1, $src2\\t#@maxI_reg_rvb\" %}\n+\n+  ins_encode %{\n+    __ max(as_Register($dst$$reg), as_Register($src1$$reg), as_Register($src2$$reg));\n+  %}\n+\n+  ins_pipe(ialu_reg_reg);\n+%}\n+\n+\/\/ Abs\n+instruct absI_reg_rvb(iRegINoSp dst, iRegI src) %{\n+  predicate(UseRVB);\n+  match(Set dst (AbsI src));\n+\n+  ins_cost(ALU_COST * 2);\n+  format %{\n+    \"negw  t0, $src\\n\\t\"\n+    \"max  $dst, $src, t0\\t#@absI_reg_rvb\"\n+  %}\n+\n+  ins_encode %{\n+    __ negw(t0, as_Register($src$$reg));\n+    __ max(as_Register($dst$$reg), as_Register($src$$reg), t0);\n+  %}\n+\n+  ins_pipe(ialu_reg_reg);\n+%}\n+\n+instruct absL_reg_rvb(iRegLNoSp dst, iRegL src) %{\n+  predicate(UseRVB);\n+  match(Set dst (AbsL src));\n+\n+  ins_cost(ALU_COST * 2);\n+  format %{\n+    \"neg  t0, $src\\n\\t\"\n+    \"max $dst, $src, t0\\t#@absL_reg_rvb\"\n+  %}\n+\n+  ins_encode %{\n+    __ neg(t0, as_Register($src$$reg));\n+    __ max(as_Register($dst$$reg), as_Register($src$$reg), t0);\n+  %}\n+\n+  ins_pipe(ialu_reg);\n+%}\n+\n+\/\/ And Not\n+instruct andnI_reg_reg_rvb(iRegINoSp dst, iRegI src1, iRegI src2, immI_M1 m1) %{\n+  predicate(UseRVB);\n+  match(Set dst (AndI src1 (XorI src2 m1)));\n+\n+  ins_cost(ALU_COST);\n+  format %{ \"andn  $dst, $src1, $src2\\t#@andnI_reg_reg_rvb\" %}\n+\n+  ins_encode %{\n+    __ andn(as_Register($dst$$reg),\n+            as_Register($src1$$reg),\n+            as_Register($src2$$reg));\n+  %}\n+\n+  ins_pipe(ialu_reg_reg);\n+%}\n+\n+instruct andnL_reg_reg_rvb(iRegLNoSp dst, iRegL src1, iRegL src2, immL_M1 m1) %{\n+  predicate(UseRVB);\n+  match(Set dst (AndL src1 (XorL src2 m1)));\n+\n+  ins_cost(ALU_COST);\n+  format %{ \"andn  $dst, $src1, $src2\\t#@andnL_reg_reg_rvb\" %}\n+\n+  ins_encode %{\n+    __ andn(as_Register($dst$$reg),\n+            as_Register($src1$$reg),\n+            as_Register($src2$$reg));\n+  %}\n+\n+  ins_pipe(ialu_reg_reg);\n+%}\n+\n+\/\/ Or Not\n+instruct ornI_reg_reg_rvb(iRegINoSp dst, iRegI src1, iRegI src2, immI_M1 m1) %{\n+  predicate(UseRVB);\n+  match(Set dst (OrI src1 (XorI src2 m1)));\n+\n+  ins_cost(ALU_COST);\n+  format %{ \"orn  $dst, $src1, $src2\\t#@ornI_reg_reg_rvb\" %}\n+\n+  ins_encode %{\n+    __ orn(as_Register($dst$$reg),\n+           as_Register($src1$$reg),\n+           as_Register($src2$$reg));\n+  %}\n+\n+  ins_pipe(ialu_reg_reg);\n+%}\n+\n+instruct ornL_reg_reg_rvb(iRegLNoSp dst, iRegL src1, iRegL src2, immL_M1 m1) %{\n+  predicate(UseRVB);\n+  match(Set dst (OrL src1 (XorL src2 m1)));\n+\n+  ins_cost(ALU_COST);\n+  format %{ \"orn  $dst, $src1, $src2\\t#@ornL_reg_reg_rvb\" %}\n+\n+  ins_encode %{\n+    __ orn(as_Register($dst$$reg),\n+           as_Register($src1$$reg),\n+           as_Register($src2$$reg));\n+  %}\n+\n+  ins_pipe(ialu_reg_reg);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_b.ad","additions":132,"deletions":0,"binary":false,"changes":132,"status":"modified"}]}