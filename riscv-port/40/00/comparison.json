{"files":[{"patch":"@@ -30,8 +30,5 @@\n-  e8    = 0b000,\n-  e16   = 0b001,\n-  e32   = 0b010,\n-  e64   = 0b011,\n-  e128  = 0b100,\n-  e256  = 0b101,\n-  e512  = 0b110,\n-  e1024 = 0b111,\n+  e8,\n+  e16,\n+  e32,\n+  e64,\n+  RESERVED,\n@@ -60,3 +57,7 @@\n-static Assembler::SEW elemBytes_to_sew(int esize) {\n-  assert(esize > 0 && esize <= 64 && is_power_of_2(esize), \"unsupported element size\");\n-  return (Assembler::SEW) log2i_exact(esize);\n+static Assembler::SEW elembytes_to_sew(int ebytes) {\n+  assert(ebytes > 0 && ebytes <= 8, \"unsupported element size\");\n+  return (Assembler::SEW) exact_log2(ebytes);\n+}\n+\n+static Assembler::SEW elemtype_to_sew(BasicType etype) {\n+  return Assembler::elembytes_to_sew(type2aelembytes(etype));\n@@ -67,1 +68,1 @@\n-      guarantee((vlmul | vsew | vsew | vta | vma == 0),      \\\n+      guarantee((vlmul | vsew | vta | vma == 0),             \\\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv_v.hpp","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -3056,1 +3056,0 @@\n-  sign_extend(len, len, 32);\n@@ -3414,2 +3413,2 @@\n-  sign_extend(idx, ylen, 32); \/\/ idx = ylen;\n-  sign_extend(kdx, zlen, 32); \/\/ kdx = xlen+ylen;\n+  mv(idx, ylen); \/\/ idx = ylen;\n+  mv(kdx, zlen); \/\/ kdx = xlen+ylen;\n@@ -3439,1 +3438,1 @@\n-    sign_extend(jdx, ylen, 32);\n+    mv(jdx, ylen);\n@@ -3518,1 +3517,1 @@\n-  sign_extend(jdx, ylen, 32); \/\/ j = ystart+1\n+  mv(jdx, ylen); \/\/ j = ystart+1\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -36,3 +36,0 @@\n-  static Assembler::SEW elemType_to_sew(BasicType bt) {\n-    return Assembler::elemBytes_to_sew(type2aelembytes(bt));\n-  }\n@@ -42,1 +39,1 @@\n-    Assembler::SEW sew = elemType_to_sew(bt);\n+    Assembler::SEW sew = Assembler::elemtype_to_sew(bt);\n@@ -54,4 +51,4 @@\n-      case Op_MulReductionVD: \/\/ fall through\n-      case Op_MulReductionVF: \/\/ fall through\n-      case Op_MulReductionVI: \/\/ fall through\n-      case Op_MulReductionVL: \/\/ fall through\n+      case Op_MulReductionVD:\n+      case Op_MulReductionVF:\n+      case Op_MulReductionVI:\n+      case Op_MulReductionVL:\n@@ -59,8 +56,8 @@\n-      case Op_Extract:        \/\/ fall through\n-      case Op_ExtractB:       \/\/ fall through\n-      case Op_ExtractC:       \/\/ fall through\n-      case Op_ExtractD:       \/\/ fall through\n-      case Op_ExtractF:       \/\/ fall through\n-      case Op_ExtractI:       \/\/ fall through\n-      case Op_ExtractL:       \/\/ fall through\n-      case Op_ExtractS:       \/\/ fall through\n+      case Op_Extract:\n+      case Op_ExtractB:\n+      case Op_ExtractC:\n+      case Op_ExtractD:\n+      case Op_ExtractF:\n+      case Op_ExtractI:\n+      case Op_ExtractL:\n+      case Op_ExtractS:\n@@ -373,1 +370,1 @@\n-    Assembler::SEW sew = elemType_to_sew(bt);\n+    Assembler::SEW sew = Assembler::elemtype_to_sew(bt);\n@@ -389,1 +386,1 @@\n-    Assembler::SEW sew = elemType_to_sew(bt);\n+    Assembler::SEW sew = Assembler::elemtype_to_sew(bt);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":15,"deletions":18,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -842,2 +842,1 @@\n-    Assembler::SEW sew = Assembler::elemBytes_to_sew(granularity);\n-    assert(sew >= Assembler::e8 && sew <= Assembler::e64, \"illegal SEW\");\n+    Assembler::SEW sew = Assembler::elembytes_to_sew(granularity);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}