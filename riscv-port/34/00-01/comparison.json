{"files":[{"patch":"@@ -83,0 +83,5 @@\n+  CHECK_CEXT_AND_COMPRESSIBLE(is_imm_in_range(imm, 6, 0) && Rd != x0) {\n+    c_li(Rd, imm);\n+    return;\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -383,1 +383,5 @@\n-    emit_int32(0);\n+    CHECK_CEXT() {\n+      emit_int16(0);\n+    } else {\n+      emit_int32(0);\n+    }\n@@ -386,2 +390,2 @@\n-\/\/ Rigster Instruction\n-#define INSN(NAME, op, funct3, funct7)                          \\\n+\/\/ Register Instruction\n+#define INSN(NAME, op, funct3, funct7, C)                       \\\n@@ -389,0 +393,1 @@\n+    EMIT_MAY_COMPRESS(C, NAME, Rd, Rs1, Rs2)                    \\\n@@ -399,28 +404,28 @@\n-  INSN(add,   0b0110011, 0b000, 0b0000000);\n-  INSN(sub,   0b0110011, 0b000, 0b0100000);\n-  INSN(andr,  0b0110011, 0b111, 0b0000000);\n-  INSN(orr,   0b0110011, 0b110, 0b0000000);\n-  INSN(xorr,  0b0110011, 0b100, 0b0000000);\n-  INSN(sll,   0b0110011, 0b001, 0b0000000);\n-  INSN(sra,   0b0110011, 0b101, 0b0100000);\n-  INSN(srl,   0b0110011, 0b101, 0b0000000);\n-  INSN(slt,   0b0110011, 0b010, 0b0000000);\n-  INSN(sltu,  0b0110011, 0b011, 0b0000000);\n-  INSN(addw,  0b0111011, 0b000, 0b0000000);\n-  INSN(subw,  0b0111011, 0b000, 0b0100000);\n-  INSN(sllw,  0b0111011, 0b001, 0b0000000);\n-  INSN(sraw,  0b0111011, 0b101, 0b0100000);\n-  INSN(srlw,  0b0111011, 0b101, 0b0000000);\n-  INSN(mul,   0b0110011, 0b000, 0b0000001);\n-  INSN(mulh,  0b0110011, 0b001, 0b0000001);\n-  INSN(mulhsu,0b0110011, 0b010, 0b0000001);\n-  INSN(mulhu, 0b0110011, 0b011, 0b0000001);\n-  INSN(mulw,  0b0111011, 0b000, 0b0000001);\n-  INSN(div,   0b0110011, 0b100, 0b0000001);\n-  INSN(divu,  0b0110011, 0b101, 0b0000001);\n-  INSN(divw,  0b0111011, 0b100, 0b0000001);\n-  INSN(divuw, 0b0111011, 0b101, 0b0000001);\n-  INSN(rem,   0b0110011, 0b110, 0b0000001);\n-  INSN(remu,  0b0110011, 0b111, 0b0000001);\n-  INSN(remw,  0b0111011, 0b110, 0b0000001);\n-  INSN(remuw, 0b0111011, 0b111, 0b0000001);\n+  INSN(add,   0b0110011, 0b000, 0b0000000, COMPRESSIBLE);\n+  INSN(sub,   0b0110011, 0b000, 0b0100000, COMPRESSIBLE);\n+  INSN(andr,  0b0110011, 0b111, 0b0000000, COMPRESSIBLE);\n+  INSN(orr,   0b0110011, 0b110, 0b0000000, COMPRESSIBLE);\n+  INSN(xorr,  0b0110011, 0b100, 0b0000000, COMPRESSIBLE);\n+  INSN(sll,   0b0110011, 0b001, 0b0000000, NOT_COMPRESSIBLE);\n+  INSN(sra,   0b0110011, 0b101, 0b0100000, NOT_COMPRESSIBLE);\n+  INSN(srl,   0b0110011, 0b101, 0b0000000, NOT_COMPRESSIBLE);\n+  INSN(slt,   0b0110011, 0b010, 0b0000000, NOT_COMPRESSIBLE);\n+  INSN(sltu,  0b0110011, 0b011, 0b0000000, NOT_COMPRESSIBLE);\n+  INSN(addw,  0b0111011, 0b000, 0b0000000, COMPRESSIBLE);\n+  INSN(subw,  0b0111011, 0b000, 0b0100000, COMPRESSIBLE);\n+  INSN(sllw,  0b0111011, 0b001, 0b0000000, NOT_COMPRESSIBLE);\n+  INSN(sraw,  0b0111011, 0b101, 0b0100000, NOT_COMPRESSIBLE);\n+  INSN(srlw,  0b0111011, 0b101, 0b0000000, NOT_COMPRESSIBLE);\n+  INSN(mul,   0b0110011, 0b000, 0b0000001, NOT_COMPRESSIBLE);\n+  INSN(mulh,  0b0110011, 0b001, 0b0000001, NOT_COMPRESSIBLE);\n+  INSN(mulhsu,0b0110011, 0b010, 0b0000001, NOT_COMPRESSIBLE);\n+  INSN(mulhu, 0b0110011, 0b011, 0b0000001, NOT_COMPRESSIBLE);\n+  INSN(mulw,  0b0111011, 0b000, 0b0000001, NOT_COMPRESSIBLE);\n+  INSN(div,   0b0110011, 0b100, 0b0000001, NOT_COMPRESSIBLE);\n+  INSN(divu,  0b0110011, 0b101, 0b0000001, NOT_COMPRESSIBLE);\n+  INSN(divw,  0b0111011, 0b100, 0b0000001, NOT_COMPRESSIBLE);\n+  INSN(divuw, 0b0111011, 0b101, 0b0000001, NOT_COMPRESSIBLE);\n+  INSN(rem,   0b0110011, 0b110, 0b0000001, NOT_COMPRESSIBLE);\n+  INSN(remu,  0b0110011, 0b111, 0b0000001, NOT_COMPRESSIBLE);\n+  INSN(remw,  0b0111011, 0b110, 0b0000001, NOT_COMPRESSIBLE);\n+  INSN(remuw, 0b0111011, 0b111, 0b0000001, NOT_COMPRESSIBLE);\n@@ -438,1 +443,1 @@\n-#define INSN(NAME, op, funct3)                                                                     \\\n+#define INSN(NAME, op, funct3, C)                                                                  \\\n@@ -440,1 +445,0 @@\n-    unsigned insn = 0;                                                                             \\\n@@ -442,0 +446,2 @@\n+    EMIT_MAY_COMPRESS(C, NAME, Rd, Rs, offset)                                                     \\\n+    unsigned insn = 0;                                                                             \\\n@@ -495,7 +501,7 @@\n-  INSN(lb,  0b0000011, 0b000);\n-  INSN(lbu, 0b0000011, 0b100);\n-  INSN(ld,  0b0000011, 0b011);\n-  INSN(lh,  0b0000011, 0b001);\n-  INSN(lhu, 0b0000011, 0b101);\n-  INSN(lw,  0b0000011, 0b010);\n-  INSN(lwu, 0b0000011, 0b110);\n+  INSN(lb,  0b0000011, 0b000, NOT_COMPRESSIBLE);\n+  INSN(lbu, 0b0000011, 0b100, NOT_COMPRESSIBLE);\n+  INSN(lh,  0b0000011, 0b001, NOT_COMPRESSIBLE);\n+  INSN(lhu, 0b0000011, 0b101, NOT_COMPRESSIBLE);\n+  INSN(lw,  0b0000011, 0b010, COMPRESSIBLE);\n+  INSN(lwu, 0b0000011, 0b110, NOT_COMPRESSIBLE);\n+  INSN(ld,  0b0000011, 0b011, COMPRESSIBLE);\n@@ -505,1 +511,1 @@\n-#define INSN(NAME, op, funct3)                                                                     \\\n+#define INSN(NAME, op, funct3, C)                                                                  \\\n@@ -507,1 +513,0 @@\n-    unsigned insn = 0;                                                                             \\\n@@ -509,0 +514,2 @@\n+    EMIT_MAY_COMPRESS(C, NAME, Rd, Rs, offset)                                                     \\\n+    unsigned insn = 0;                                                                             \\\n@@ -554,2 +561,2 @@\n-  INSN(flw, 0b0000111, 0b010);\n-  INSN(fld, 0b0000111, 0b011);\n+  INSN(flw, 0b0000111, 0b010, NOT_COMPRESSIBLE);\n+  INSN(fld, 0b0000111, 0b011, COMPRESSIBLE);\n@@ -558,1 +565,1 @@\n-#define INSN(NAME, op, funct3)                                                                           \\\n+#define INSN(NAME, op, funct3, C)                                                                        \\\n@@ -560,1 +567,0 @@\n-    unsigned insn = 0;                                                                                   \\\n@@ -562,0 +568,2 @@\n+    EMIT_MAY_COMPRESS(C, NAME, Rs1, Rs2, offset)                                                         \\\n+    unsigned insn = 0;                                                                                   \\\n@@ -587,6 +595,6 @@\n-  INSN(beq,  0b1100011, 0b000);\n-  INSN(bge,  0b1100011, 0b101);\n-  INSN(bgeu, 0b1100011, 0b111);\n-  INSN(blt,  0b1100011, 0b100);\n-  INSN(bltu, 0b1100011, 0b110);\n-  INSN(bne,  0b1100011, 0b001);\n+  INSN(beq,  0b1100011, 0b000, COMPRESSIBLE);\n+  INSN(bne,  0b1100011, 0b001, COMPRESSIBLE);\n+  INSN(bge,  0b1100011, 0b101, NOT_COMPRESSIBLE);\n+  INSN(bgeu, 0b1100011, 0b111, NOT_COMPRESSIBLE);\n+  INSN(blt,  0b1100011, 0b100, NOT_COMPRESSIBLE);\n+  INSN(bltu, 0b1100011, 0b110, NOT_COMPRESSIBLE);\n@@ -610,1 +618,1 @@\n-#define INSN(NAME, REGISTER, op, funct3)                                                                    \\\n+#define INSN(NAME, REGISTER, op, funct3, C)                                                                 \\\n@@ -612,1 +620,0 @@\n-    unsigned insn = 0;                                                                                      \\\n@@ -614,0 +621,2 @@\n+    EMIT_MAY_COMPRESS(C, NAME, Rs1, Rs2, offset)                                                            \\\n+    unsigned insn = 0;                                                                                      \\\n@@ -629,6 +638,6 @@\n-  INSN(sb,  Register,      0b0100011, 0b000);\n-  INSN(sh,  Register,      0b0100011, 0b001);\n-  INSN(sw,  Register,      0b0100011, 0b010);\n-  INSN(sd,  Register,      0b0100011, 0b011);\n-  INSN(fsw, FloatRegister, 0b0100111, 0b010);\n-  INSN(fsd, FloatRegister, 0b0100111, 0b011);\n+  INSN(sb,  Register,      0b0100011, 0b000, NOT_COMPRESSIBLE);\n+  INSN(sh,  Register,      0b0100011, 0b001, NOT_COMPRESSIBLE);\n+  INSN(sw,  Register,      0b0100011, 0b010, COMPRESSIBLE);\n+  INSN(sd,  Register,      0b0100011, 0b011, COMPRESSIBLE);\n+  INSN(fsw, FloatRegister, 0b0100111, 0b010, NOT_COMPRESSIBLE);\n+  INSN(fsd, FloatRegister, 0b0100111, 0b011, COMPRESSIBLE);\n@@ -761,1 +770,1 @@\n-#define INSN(NAME, op)                                                                        \\\n+#define INSN(NAME, op, C)                                                                     \\\n@@ -763,1 +772,0 @@\n-    unsigned insn = 0;                                                                        \\\n@@ -765,0 +773,2 @@\n+    EMIT_MAY_COMPRESS(C, NAME, Rd, offset)                                                    \\\n+    unsigned insn = 0;                                                                        \\\n@@ -790,1 +800,1 @@\n-  INSN(jal, 0b1101111);\n+  INSN(jal, 0b1101111, COMPRESSIBLE);\n@@ -796,1 +806,1 @@\n-#define INSN(NAME, op, funct)                                                              \\\n+#define INSN(NAME, op, funct, C)                                                           \\\n@@ -798,1 +808,0 @@\n-    unsigned insn = 0;                                                                     \\\n@@ -800,0 +809,2 @@\n+    EMIT_MAY_COMPRESS(C, NAME, Rd, Rs, offset)                                             \\\n+    unsigned insn = 0;                                                                     \\\n@@ -809,1 +820,1 @@\n-  INSN(jalr, 0b1100111, 0b000);\n+  INSN(jalr, 0b1100111, 0b000, COMPRESSIBLE);\n@@ -832,1 +843,1 @@\n-#define INSN(NAME, op, funct3, funct7)                      \\\n+#define INSN(NAME, op, funct3, funct7, C)                   \\\n@@ -834,0 +845,1 @@\n+    EMIT_MAY_COMPRESS(C, NAME)                              \\\n@@ -843,3 +855,3 @@\n-  INSN(fence_i, 0b0001111, 0b001, 0b000000000000);\n-  INSN(ecall,   0b1110011, 0b000, 0b000000000000);\n-  INSN(ebreak,  0b1110011, 0b000, 0b000000000001);\n+  INSN(fence_i, 0b0001111, 0b001, 0b000000000000, NOT_COMPRESSIBLE);\n+  INSN(ecall,   0b1110011, 0b000, 0b000000000000, NOT_COMPRESSIBLE);\n+  INSN(ebreak,  0b1110011, 0b000, 0b000000000001, COMPRESSIBLE);\n@@ -941,1 +953,1 @@\n-#define INSN(NAME, op, funct3)                                                              \\\n+#define INSN(NAME, op, funct3, C)                                                           \\\n@@ -944,0 +956,1 @@\n+    EMIT_MAY_COMPRESS(C, NAME, Rd, Rs1, imm)                                                \\\n@@ -953,6 +966,6 @@\n-  INSN(addi,  0b0010011, 0b000);\n-  INSN(slti,  0b0010011, 0b010);\n-  INSN(addiw, 0b0011011, 0b000);\n-  INSN(and_imm12,  0b0010011, 0b111);\n-  INSN(ori,   0b0010011, 0b110);\n-  INSN(xori,  0b0010011, 0b100);\n+  INSN(addi,      0b0010011, 0b000, COMPRESSIBLE);\n+  INSN(slti,      0b0010011, 0b010, NOT_COMPRESSIBLE);\n+  INSN(addiw,     0b0011011, 0b000, COMPRESSIBLE);\n+  INSN(and_imm12, 0b0010011, 0b111, COMPRESSIBLE);\n+  INSN(ori,       0b0010011, 0b110, NOT_COMPRESSIBLE);\n+  INSN(xori,      0b0010011, 0b100, NOT_COMPRESSIBLE);\n@@ -979,1 +992,1 @@\n-#define INSN(NAME, op, funct3, funct6)                                   \\\n+#define INSN(NAME, op, funct3, funct6, C)                                \\\n@@ -982,0 +995,1 @@\n+    EMIT_MAY_COMPRESS(C, NAME, Rd, Rs1, shamt)                           \\\n@@ -992,3 +1006,3 @@\n-  INSN(slli,  0b0010011, 0b001, 0b000000);\n-  INSN(srai,  0b0010011, 0b101, 0b010000);\n-  INSN(srli,  0b0010011, 0b101, 0b000000);\n+  INSN(slli,  0b0010011, 0b001, 0b000000, COMPRESSIBLE);\n+  INSN(srai,  0b0010011, 0b101, 0b010000, COMPRESSIBLE);\n+  INSN(srli,  0b0010011, 0b101, 0b000000, COMPRESSIBLE);\n@@ -1019,1 +1033,1 @@\n-#define INSN(NAME, op)                                                  \\\n+#define INSN(NAME, op, C)                                               \\\n@@ -1021,0 +1035,1 @@\n+    EMIT_MAY_COMPRESS(C, NAME, Rd, imm)                                 \\\n@@ -1030,2 +1045,2 @@\n-  INSN(lui,   0b0110111);\n-  INSN(auipc, 0b0010111);\n+  INSN(lui,   0b0110111, COMPRESSIBLE);\n+  INSN(auipc, 0b0010111, NOT_COMPRESSIBLE);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":99,"deletions":84,"binary":false,"changes":183,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n-#ifndef CPU_RISCV_ASSEMBLER_RISCV_CEXT_HPP\n-#define CPU_RISCV_ASSEMBLER_RISCV_CEXT_HPP\n+#ifndef CPU_RISCV_ASSEMBLER_RISCV_C_HPP\n+#define CPU_RISCV_ASSEMBLER_RISCV_C_HPP\n@@ -36,1 +36,1 @@\n-  \/\/ C-Ext: If an instruction is compressible, then\n+  \/\/ RVC: If an instruction is compressible, then\n@@ -46,1 +46,1 @@\n-  \/\/   2. C-Ext's instructions in Assembler always begin with 'c_' prefix, as 'c_li',\n+  \/\/   2. RVC instructions in Assembler always begin with 'c_' prefix, as 'c_li',\n@@ -48,5 +48,2 @@\n-  \/\/   3. In some cases, we need to force using one instruction's uncompressed version,\n-  \/\/      for instance code being patched should remain its general and longest version\n-  \/\/      to cover all possible cases, or code requiring a fixed length.\n-  \/\/      So we introduce 'UncompressibleRegion' to force instructions in its range\n-  \/\/      to remain its normal 4-byte version.\n+  \/\/   3. We introduce 'CompressibleRegion' to hint instructions in this Region's RTTI range\n+  \/\/      are qualified to change to their 2-byte versions.\n@@ -56,5 +53,1 @@\n-  \/\/        __ andr(...);      \/\/ this instruction could change to c.and if qualified\n-  \/\/        {\n-  \/\/          UncompressibleRegion ur(_masm);\n-  \/\/          __ andr(...);    \/\/ this instruction would remain the normal 32-bit form of andr\n-  \/\/        }\n+  \/\/        __ andr(...);      \/\/ this instruction could change to c.and if able to\n@@ -62,1 +55,1 @@\n-  \/\/   4. Using -XX:PrintAssemblyOptions=no-aliases could print C-Ext instructions instead of\n+  \/\/   4. Using -XX:PrintAssemblyOptions=no-aliases could print RVC instructions instead of\n@@ -66,1 +59,1 @@\n-  \/\/ C-Ext: extract a 16-bit instruction.\n+  \/\/ RVC: extract a 16-bit instruction.\n@@ -83,1 +76,1 @@\n-  \/\/ C-Ext: patch a 16-bit instruction.\n+  \/\/ RVC: patch a 16-bit instruction.\n@@ -102,1 +95,1 @@\n-  \/\/ C-Ext: patch a 16-bit instruction with a general purpose register ranging [0, 31] (5 bits)\n+  \/\/ RVC: patch a 16-bit instruction with a general purpose register ranging [0, 31] (5 bits)\n@@ -107,1 +100,1 @@\n-  \/\/ C-Ext: patch a 16-bit instruction with a general purpose register ranging [8, 15] (3 bits)\n+  \/\/ RVC: patch a 16-bit instruction with a general purpose register ranging [8, 15] (3 bits)\n@@ -112,1 +105,1 @@\n-  \/\/ C-Ext: patch a 16-bit instruction with a float register ranging [0, 31] (5 bits)\n+  \/\/ RVC: patch a 16-bit instruction with a float register ranging [0, 31] (5 bits)\n@@ -117,1 +110,1 @@\n-  \/\/ C-Ext: patch a 16-bit instruction with a float register ranging [8, 15] (3 bits)\n+  \/\/ RVC: patch a 16-bit instruction with a float register ranging [8, 15] (3 bits)\n@@ -124,1 +117,1 @@\n-\/\/ C-Ext: Compressed Instructions\n+\/\/ RVC: Compressed Instructions\n@@ -126,1 +119,1 @@\n-\/\/ --------------  C-Ext Instruction Definitions  --------------\n+\/\/ --------------  RVC Instruction Definitions  --------------\n@@ -548,0 +541,323 @@\n+\/\/ --------------  RVC Transformation Macros  --------------\n+\n+\/\/ two RVC macros\n+#define COMPRESSIBLE          true\n+#define NOT_COMPRESSIBLE      false\n+\n+\/\/ a pivotal dispatcher for RVC\n+#define EMIT_MAY_COMPRESS(C, NAME, ...)               EMIT_MAY_COMPRESS_##C(NAME, __VA_ARGS__)\n+#define EMIT_MAY_COMPRESS_true(NAME, ...)             EMIT_MAY_COMPRESS_##NAME(__VA_ARGS__)\n+#define EMIT_MAY_COMPRESS_false(NAME, ...)\n+\n+#define IS_COMPRESSIBLE(...)                          if (__VA_ARGS__)\n+#define CHECK_CEXT_AND_COMPRESSIBLE(...)              IS_COMPRESSIBLE(UseRVC && in_compressible_region() && __VA_ARGS__)\n+#define CHECK_CEXT()                                  if (UseRVC && in_compressible_region())\n+\n+\/\/ RVC transformation macros\n+#define EMIT_RVC_cond(PREFIX, COND, EMIT) {                                            \\\n+    PREFIX                                                                             \\\n+    CHECK_CEXT_AND_COMPRESSIBLE(COND) {                                                \\\n+      EMIT;                                                                            \\\n+      return;                                                                          \\\n+    }                                                                                  \\\n+  }\n+\n+#define EMIT_RVC_cond2(PREFIX, COND1, EMIT1, COND2, EMIT2) {                           \\\n+    PREFIX                                                                             \\\n+    CHECK_CEXT() {                                                                     \\\n+      IS_COMPRESSIBLE(COND1) {                                                         \\\n+        EMIT1;                                                                         \\\n+        return;                                                                        \\\n+      } else IS_COMPRESSIBLE(COND2) {                                                  \\\n+        EMIT2;                                                                         \\\n+        return;                                                                        \\\n+      }                                                                                \\\n+    }                                                                                  \\\n+  }\n+\n+#define EMIT_RVC_cond4(PREFIX, COND1, EMIT1, COND2, EMIT2, COND3, EMIT3, COND4, EMIT4) {  \\\n+    PREFIX                                                                             \\\n+    CHECK_CEXT() {                                                                     \\\n+      IS_COMPRESSIBLE(COND1) {                                                         \\\n+        EMIT1;                                                                         \\\n+        return;                                                                        \\\n+      } else IS_COMPRESSIBLE(COND2) {                                                  \\\n+        EMIT2;                                                                         \\\n+        return;                                                                        \\\n+      } else IS_COMPRESSIBLE(COND3) {                                                  \\\n+        EMIT3;                                                                         \\\n+        return;                                                                        \\\n+      } else IS_COMPRESSIBLE(COND4) {                                                  \\\n+        EMIT4;                                                                         \\\n+        return;                                                                        \\\n+      }                                                                                \\\n+    }                                                                                  \\\n+  }\n+\n+\/\/ --------------------------\n+\/\/ Register instructions\n+\/\/ --------------------------\n+\/\/ add -> c.add\n+#define EMIT_MAY_COMPRESS_add(Rd, Rs1, Rs2)                                            \\\n+  EMIT_RVC_cond(                                                                       \\\n+    Register src = noreg;,                                                             \\\n+    Rs1 != x0 && Rs2 != x0 && ((src = Rs1, Rs2 == Rd) || (src = Rs2, Rs1 == Rd)),      \\\n+    c_add(Rd, src)                                                                     \\\n+  )\n+\n+\/\/ --------------------------\n+\/\/ sub\/subw -> c.sub\/c.subw\n+#define EMIT_MAY_COMPRESS_sub_helper(C_NAME, Rd, Rs1, Rs2)                             \\\n+  EMIT_RVC_cond(,                                                                      \\\n+    Rs1 == Rd && Rd->is_compressed_valid() && Rs2->is_compressed_valid(),              \\\n+    C_NAME(Rd, Rs2)                                                                    \\\n+  )\n+\n+#define EMIT_MAY_COMPRESS_sub(Rd, Rs1, Rs2)                                            \\\n+  EMIT_MAY_COMPRESS_sub_helper(c_sub, Rd, Rs1, Rs2)\n+\n+#define EMIT_MAY_COMPRESS_subw(Rd, Rs1, Rs2)                                           \\\n+  EMIT_MAY_COMPRESS_sub_helper(c_subw, Rd, Rs1, Rs2)\n+\n+\/\/ --------------------------\n+\/\/ xor\/or\/and\/addw -> c.xor\/c.or\/c.and\/c.addw\n+#define EMIT_MAY_COMPRESS_xorr_orr_andr_addw_helper(C_NAME, Rd, Rs1, Rs2)              \\\n+  EMIT_RVC_cond(                                                                       \\\n+    Register src = noreg;,                                                             \\\n+    Rs1->is_compressed_valid() && Rs2->is_compressed_valid() &&                        \\\n+      ((src = Rs1, Rs2 == Rd) || (src = Rs2, Rs1 == Rd)),                              \\\n+    C_NAME(Rd, src)                                                                    \\\n+  )\n+\n+#define EMIT_MAY_COMPRESS_xorr(Rd, Rs1, Rs2)                                           \\\n+  EMIT_MAY_COMPRESS_xorr_orr_andr_addw_helper(c_xor, Rd, Rs1, Rs2)\n+\n+#define EMIT_MAY_COMPRESS_orr(Rd, Rs1, Rs2)                                            \\\n+  EMIT_MAY_COMPRESS_xorr_orr_andr_addw_helper(c_or, Rd, Rs1, Rs2)\n+\n+#define EMIT_MAY_COMPRESS_andr(Rd, Rs1, Rs2)                                           \\\n+  EMIT_MAY_COMPRESS_xorr_orr_andr_addw_helper(c_and, Rd, Rs1, Rs2)\n+\n+#define EMIT_MAY_COMPRESS_addw(Rd, Rs1, Rs2)                                           \\\n+  EMIT_MAY_COMPRESS_xorr_orr_andr_addw_helper(c_addw, Rd, Rs1, Rs2)\n+\n+\/\/ --------------------------\n+\/\/ Load\/store register (all modes)\n+\/\/ --------------------------\n+private:\n+\n+#define FUNC(NAME, funct3, bits)                                                       \\\n+  bool NAME(Register rs1, Register rd_rs2, int32_t imm12, bool ld) {                   \\\n+    return rs1 == sp &&                                                                \\\n+      is_unsigned_imm_in_range(imm12, bits, 0) &&                                      \\\n+      (intx(imm12) & funct3) == 0x0 &&                                                 \\\n+      (!ld || rd_rs2 != x0);                                                           \\\n+  }                                                                                    \\\n+\n+  FUNC(is_c_ldsdsp,  0b111, 9);\n+  FUNC(is_c_lwswsp,  0b011, 8);\n+#undef FUNC\n+\n+#define FUNC(NAME, funct3, bits)                                                       \\\n+  bool NAME(Register rs1, int32_t imm12) {                                             \\\n+    return rs1 == sp &&                                                                \\\n+      is_unsigned_imm_in_range(imm12, bits, 0) &&                                      \\\n+      (intx(imm12) & funct3) == 0x0;                                                   \\\n+  }                                                                                    \\\n+\n+  FUNC(is_c_fldsdsp, 0b111, 9);\n+#undef FUNC\n+\n+#define FUNC(NAME, REG_TYPE, funct3, bits)                                             \\\n+  bool NAME(Register rs1, REG_TYPE rd_rs2, int32_t imm12) {                            \\\n+    return rs1->is_compressed_valid() &&                                               \\\n+      rd_rs2->is_compressed_valid() &&                                                 \\\n+      is_unsigned_imm_in_range(imm12, bits, 0) &&                                      \\\n+      (intx(imm12) & funct3) == 0x0;                                                   \\\n+  }                                                                                    \\\n+\n+  FUNC(is_c_ldsd,  Register,      0b111, 8);\n+  FUNC(is_c_lwsw,  Register,      0b011, 7);\n+  FUNC(is_c_fldsd, FloatRegister, 0b111, 8);\n+#undef FUNC\n+\n+public:\n+\/\/ --------------------------\n+\/\/ ld -> c.ldsp\/c.ld\n+#define EMIT_MAY_COMPRESS_ld(Rd, Rs, offset)                                           \\\n+  EMIT_RVC_cond2(,                                                                     \\\n+     is_c_ldsdsp(Rs, Rd, offset, true),                                                \\\n+     c_ldsp(Rd, offset),                                                               \\\n+     is_c_ldsd(Rs, Rd, offset),                                                        \\\n+     c_ld(Rd, Rs, offset)                                                              \\\n+  )\n+\n+\/\/ --------------------------\n+\/\/ sd -> c.sdsp\/c.sd\n+#define EMIT_MAY_COMPRESS_sd(Rd, Rs, offset)                                           \\\n+  EMIT_RVC_cond2(,                                                                     \\\n+     is_c_ldsdsp(Rs, Rd, offset, false),                                               \\\n+     c_sdsp(Rd, offset),                                                               \\\n+     is_c_ldsd(Rs, Rd, offset),                                                        \\\n+     c_sd(Rd, Rs, offset)                                                              \\\n+  )\n+\n+\/\/ --------------------------\n+\/\/ lw -> c.lwsp\/c.lw\n+#define EMIT_MAY_COMPRESS_lw(Rd, Rs, offset)                                           \\\n+  EMIT_RVC_cond2(,                                                                     \\\n+     is_c_lwswsp(Rs, Rd, offset, true),                                                \\\n+     c_lwsp(Rd, offset),                                                               \\\n+     is_c_lwsw(Rs, Rd, offset),                                                        \\\n+     c_lw(Rd, Rs, offset)                                                              \\\n+  )\n+\n+\/\/ --------------------------\n+\/\/ sw -> c.swsp\/c.sw\n+#define EMIT_MAY_COMPRESS_sw(Rd, Rs, offset)                                           \\\n+  EMIT_RVC_cond2(,                                                                     \\\n+     is_c_lwswsp(Rs, Rd, offset, false),                                               \\\n+     c_swsp(Rd, offset),                                                               \\\n+     is_c_lwsw(Rs, Rd, offset),                                                        \\\n+     c_sw(Rd, Rs, offset)                                                              \\\n+  )\n+\n+\/\/ --------------------------\n+\/\/ fld -> c.fldsp\/c.fld\n+#define EMIT_MAY_COMPRESS_fld(Rd, Rs, offset)                                          \\\n+  EMIT_RVC_cond2(,                                                                     \\\n+     is_c_fldsdsp(Rs, offset),                                                         \\\n+     c_fldsp(Rd, offset),                                                              \\\n+     is_c_fldsd(Rs, Rd, offset),                                                       \\\n+     c_fld(Rd, Rs, offset)                                                             \\\n+  )\n+\n+\/\/ --------------------------\n+\/\/ fsd -> c.fsdsp\/c.fsd\n+#define EMIT_MAY_COMPRESS_fsd(Rd, Rs, offset)                                          \\\n+  EMIT_RVC_cond2(,                                                                     \\\n+     is_c_fldsdsp(Rs, offset),                                                         \\\n+     c_fsdsp(Rd, offset),                                                              \\\n+     is_c_fldsd(Rs, Rd, offset),                                                       \\\n+     c_fsd(Rd, Rs, offset)                                                             \\\n+  )\n+\n+\/\/ --------------------------\n+\/\/ Conditional branch instructions\n+\/\/ --------------------------\n+\/\/ beq\/bne -> c.beqz\/c.bnez\n+\n+\/\/ Note: offset == 0 means this beqz\/benz is jumping forward and we cannot know the future position\n+\/\/   so we cannot compress this instrution.\n+#define EMIT_MAY_COMPRESS_beqz_bnez_helper(C_NAME, Rs1, Rs2, offset)                   \\\n+  EMIT_RVC_cond(,                                                                      \\\n+    offset != 0 && Rs2 == x0 && Rs1->is_compressed_valid() &&                          \\\n+      is_imm_in_range(offset, 8, 1),                                                   \\\n+    C_NAME(Rs1, offset)                                                                \\\n+  )\n+\n+#define EMIT_MAY_COMPRESS_beq(Rs1, Rs2, offset)                                        \\\n+  EMIT_MAY_COMPRESS_beqz_bnez_helper(c_beqz, Rs1, Rs2, offset)\n+\n+#define EMIT_MAY_COMPRESS_bne(Rs1, Rs2, offset)                                        \\\n+  EMIT_MAY_COMPRESS_beqz_bnez_helper(c_bnez, Rs1, Rs2, offset)\n+\n+\/\/ --------------------------\n+\/\/ Unconditional branch instructions\n+\/\/ --------------------------\n+\/\/ jalr\/jal -> c.jr\/c.jalr\/c.j\n+\n+#define EMIT_MAY_COMPRESS_jalr(Rd, Rs, offset)                                         \\\n+  EMIT_RVC_cond2(,                                                                     \\\n+    offset == 0 && Rd == x1 && Rs != x0,                                               \\\n+    c_jalr(Rs),                                                                        \\\n+    offset == 0 && Rd == x0 && Rs != x0,                                               \\\n+    c_jr(Rs)                                                                           \\\n+  )\n+\n+\/\/ Note: offset == 0 means this j() is jumping forward and we cannot know the future position\n+\/\/   so we cannot compress this instrution.\n+#define EMIT_MAY_COMPRESS_jal(Rd, offset)                                              \\\n+  EMIT_RVC_cond(,                                                                      \\\n+    offset != 0 && Rd == x0 && is_imm_in_range(offset, 11, 1),                         \\\n+    c_j(offset)                                                                        \\\n+  )\n+\n+\/\/ --------------------------\n+\/\/ Upper Immediate Instruction\n+\/\/ --------------------------\n+\/\/ lui -> c.lui\n+#define EMIT_MAY_COMPRESS_lui(Rd, imm)                                                 \\\n+  EMIT_RVC_cond(,                                                                      \\\n+    Rd != x0 && Rd != x2 && imm != 0 && is_imm_in_range(imm, 18, 0),                   \\\n+    c_lui(Rd, imm)                                                                     \\\n+  )\n+\n+\/\/ --------------------------\n+\/\/ Miscellaneous Instructions\n+\/\/ --------------------------\n+\/\/ ebreak -> c.ebreak\n+#define EMIT_MAY_COMPRESS_ebreak()                                                     \\\n+  EMIT_RVC_cond(,                                                                      \\\n+    true,                                                                              \\\n+    c_ebreak()                                                                         \\\n+  )\n+\n+\/\/ --------------------------\n+\/\/ Immediate Instructions\n+\/\/ --------------------------\n+\/\/ addi -> c.addi\/c.nop\/c.mv\/c.addi16sp\/c.addi4spn.\n+#define EMIT_MAY_COMPRESS_addi(Rd, Rs1, imm)                                                          \\\n+  EMIT_RVC_cond4(,                                                                                    \\\n+    Rd == Rs1 && is_imm_in_range(imm, 6, 0),                                                          \\\n+    c_addi(Rd, imm),                                                                                  \\\n+    imm == 0 && Rd != x0 && Rs1 != x0,                                                                \\\n+    c_mv(Rd, Rs1),                                                                                    \\\n+    Rs1 == sp && Rd == Rs1 && imm != 0 && (imm & 0b1111) == 0x0 && is_imm_in_range(imm, 10, 0),       \\\n+    c_addi16sp(imm),                                                                                  \\\n+    Rs1 == sp && Rd->is_compressed_valid() && imm != 0 && (imm & 0b11) == 0x0 && is_unsigned_imm_in_range(imm, 10, 0),  \\\n+    c_addi4spn(Rd, imm)                                                                               \\\n+  )\n+\n+\/\/ --------------------------\n+\/\/ addiw -> c.addiw\n+#define EMIT_MAY_COMPRESS_addiw(Rd, Rs1, imm)                                          \\\n+  EMIT_RVC_cond(,                                                                      \\\n+    Rd == Rs1 && Rd != x0 && is_imm_in_range(imm, 6, 0),                               \\\n+    c_addiw(Rd, imm)                                                                   \\\n+  )\n+\n+\/\/ --------------------------\n+\/\/ and_imm12 -> c.andi\n+#define EMIT_MAY_COMPRESS_and_imm12(Rd, Rs1, imm)                                      \\\n+  EMIT_RVC_cond(,                                                                      \\\n+    Rd == Rs1 && Rd->is_compressed_valid() && is_imm_in_range(imm, 6, 0),              \\\n+    c_andi(Rd, imm)                                                                    \\\n+  )\n+\n+\/\/ --------------------------\n+\/\/ Shift Immediate Instructions\n+\/\/ --------------------------\n+\/\/ slli -> c.slli\n+#define EMIT_MAY_COMPRESS_slli(Rd, Rs1, shamt)                                         \\\n+  EMIT_RVC_cond(,                                                                      \\\n+    Rd == Rs1 && Rd != x0 && shamt != 0,                                               \\\n+    c_slli(Rd, shamt)                                                                  \\\n+  )\n+\n+\/\/ --------------------------\n+\/\/ srai\/srli -> c.srai\/c.srli\n+#define EMIT_MAY_COMPRESS_srai_srli_helper(C_NAME, Rd, Rs1, shamt)                     \\\n+  EMIT_RVC_cond(,                                                                      \\\n+    Rd == Rs1 && Rd->is_compressed_valid() && shamt != 0,                              \\\n+    C_NAME(Rd, shamt)                                                                  \\\n+  )\n+\n+#define EMIT_MAY_COMPRESS_srai(Rd, Rs1, shamt)                                         \\\n+  EMIT_MAY_COMPRESS_srai_srli_helper(c_srai, Rd, Rs1, shamt)\n+\n+#define EMIT_MAY_COMPRESS_srli(Rd, Rs1, shamt)                                         \\\n+  EMIT_MAY_COMPRESS_srai_srli_helper(c_srli, Rd, Rs1, shamt)\n+\n+\/\/ --------------------------\n+\n@@ -549,2 +865,2 @@\n-\/\/ C-Ext: an abstact compressible region\n-class AbstractCompressibleRegion : public StackObj {\n+\/\/ RVC: a compressible region\n+class CompressibleRegion : public StackObj {\n@@ -554,7 +870,0 @@\n-protected:\n-  AbstractCompressibleRegion(Assembler *_masm)\n-  : _masm(_masm)\n-  , _prev_in_compressible_region(_masm->in_compressible_region()) {}\n-};\n-\n-class CompressibleRegion : public AbstractCompressibleRegion {\n@@ -562,1 +871,3 @@\n-  CompressibleRegion(Assembler *_masm) : AbstractCompressibleRegion(_masm) {\n+  CompressibleRegion(Assembler *_masm)\n+  : _masm(_masm)\n+  , _prev_in_compressible_region(_masm->in_compressible_region()) {\n@@ -570,12 +881,1 @@\n-\/\/ C-Ext: an uncompressible region\n-class UncompressibleRegion : public AbstractCompressibleRegion {\n-public:\n-  UncompressibleRegion(Assembler *_masm) : AbstractCompressibleRegion(_masm) {\n-    _masm->set_in_compressible_region(false);\n-  }\n-  ~UncompressibleRegion() {\n-    _masm->set_in_compressible_region(_prev_in_compressible_region);\n-  }\n-};\n-\n-#endif \/\/ CPU_RISCV_ASSEMBLER_RISCV_CEXT_HPP\n\\ No newline at end of file\n+#endif \/\/ CPU_RISCV_ASSEMBLER_RISCV_C_HPP\n\\ No newline at end of file\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv_c.hpp","additions":345,"deletions":45,"binary":false,"changes":390,"status":"modified"},{"patch":"@@ -1325,1 +1325,6 @@\n-void LIR_Assembler::align_call(LIR_Code code) {  }\n+void LIR_Assembler::align_call(LIR_Code code) {\n+  \/\/ RVC: With RVC a call may get 2-byte aligned.\n+  \/\/   the address of jal itself (which will be patched later) should not span the cache line.\n+  \/\/   See CallDynamicJavaDirectNode::compute_padding() for more info.\n+  __ align(4);\n+}\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-define_pd_global(intx, InteriorEntryAlignment,       16);\n+define_pd_global(intx, InteriorEntryAlignment,       4);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_globals_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -234,0 +234,2 @@\n+extern int nmethod_barrier_guard_offset();\n+\n@@ -241,0 +243,4 @@\n+  \/\/ RVC: RISCV's amoswap instructions need an alignment for the memory address it swaps\n+  \/\/   when we reach here we may get a 2-byte alignment so need to align it\n+  __ align(4, nmethod_barrier_guard_offset());\n+\n@@ -259,0 +265,1 @@\n+  assert(__ offset() % 4 == 0, \"RISCV CAS needs an alignment for memory\");\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,0 +39,7 @@\n+public:\n+  enum {\n+    guard_offset   = 12 * instruction_size,\n+    barrier_size   = guard_offset + 4,  \/\/ guard_offset + an int32 nmethod guard value\n+  };\n+\n+private:\n@@ -43,1 +50,1 @@\n-    return reinterpret_cast<int*>(instruction_address() + 12 * 4);\n+    return reinterpret_cast<int*>(instruction_address() + guard_offset);\n@@ -58,0 +65,4 @@\n+int nmethod_barrier_guard_offset() {\n+  return NativeNMethodBarrier::guard_offset;\n+}\n+\n@@ -144,1 +155,1 @@\n-static const int entry_barrier_offset = -4 * 13;\n+static const int entry_barrier_offset = - NativeNMethodBarrier::barrier_size;\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetNMethod_riscv.cpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-define_pd_global(intx, CodeEntryAlignment,       64);\n+define_pd_global(intx, CodeEntryAlignment,       16);\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,2 +91,3 @@\n-void MacroAssembler::align(int modulus) {\n-  while (offset() % modulus != 0) { nop(); }\n+void MacroAssembler::align(int modulus, int extra_offset) {\n+  CompressibleRegion cr(this);\n+  while ((offset() + extra_offset) % modulus != 0) { nop(); }\n@@ -812,0 +813,1 @@\n+\n@@ -971,0 +973,1 @@\n+  CompressibleRegion cr(this);\n@@ -992,0 +995,1 @@\n+  CompressibleRegion cr(this);\n@@ -1014,0 +1018,1 @@\n+  CompressibleRegion cr(this);\n@@ -1033,0 +1038,1 @@\n+  CompressibleRegion cr(this);\n@@ -1053,0 +1059,1 @@\n+  CompressibleRegion cr(this);\n@@ -1074,0 +1081,1 @@\n+  CompressibleRegion cr(this);\n@@ -1096,0 +1104,1 @@\n+  CompressibleRegion cr(this);\n@@ -1110,0 +1119,1 @@\n+  CompressibleRegion cr(this);\n@@ -1123,0 +1133,1 @@\n+  CompressibleRegion cr(this);\n@@ -1128,0 +1139,1 @@\n+  CompressibleRegion cr(this);\n@@ -1132,0 +1144,1 @@\n+  CompressibleRegion cr(this);\n@@ -1153,0 +1166,1 @@\n+  CompressibleRegion cr(this);\n@@ -2923,1 +2937,2 @@\n-  while (offset() % wordSize == 0) { nop(); }\n+  \/\/ RVC: when we reach here we may get a 2-byte alignment so need to align it\n+  align(wordSize, NativeCallTrampolineStub::data_offset);\n@@ -2938,0 +2953,1 @@\n+  assert(offset() % wordSize == 0, \"address loaded by ld must be 8-byte aligned under riscv64\");\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  void align(int modulus);\n+  void align(int modulus, int extra_offset = 0);\n@@ -447,0 +447,1 @@\n+  void bnez(Register Rs, const address &dest);\n@@ -451,1 +452,0 @@\n-  void bnez(Register Rs, const address &dest);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    \/\/ C-Ext: integer registers in the range of [x8~x15] are correspond for RVC. Please see Table 16.2 in spec.\n+    \/\/ RVC: integer registers in the range of [x8~x15] correspond to RVC. Please see Table 16.2 in spec.\n@@ -143,1 +143,1 @@\n-    \/\/ C-Ext: float registers in the range of [f8~f15] are correspond for RVC. Please see Table 16.2 in spec.\n+    \/\/ RVC: float registers in the range of [f8~f15] correspond to RVC. Please see Table 16.2 in spec.\n","filename":"src\/hotspot\/cpu\/riscv\/register_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1193,0 +1193,28 @@\n+\/\/ RVC: With RVC a call may get 2-byte aligned.\n+\/\/   The offset encoding in jal ranges bits [12, 31], which could span the cache line.\n+\/\/   Patching this unaligned address will make the write operation not atomic.\n+\/\/   Other threads may be running the same piece of code at full speed, causing concurrency issues.\n+\/\/   So we must ensure that it does not span a cache line so that it can be patched.\n+int CallStaticJavaDirectNode::compute_padding(int current_offset) const\n+{\n+  \/\/ to make sure the address of jal 4-byte aligned.\n+  return align_up(current_offset, alignment_required()) - current_offset;\n+}\n+\n+\/\/ RVC: With RVC a call may get 2-byte aligned.\n+\/\/   The offset encoding in jal ranges bits [12, 31], which could span the cache line.\n+\/\/   Patching this unaligned address will make the write operation not atomic.\n+\/\/   Other threads may be running the same piece of code at full speed, causing concurrency issues.\n+\/\/   So we must ensure that it does not span a cache line so that it can be patched.\n+int CallDynamicJavaDirectNode::compute_padding(int current_offset) const\n+{\n+  \/\/ skip the movptr in MacroAssembler::ic_call():\n+  \/\/ lui + addi + slli + addi + slli + addi\n+  \/\/ Though movptr() has already 4-byte aligned with or without RVC,\n+  \/\/ We need to prevent from further changes by explicitly calculating the size.\n+  const int movptr_size = 6 * NativeInstruction::instruction_size;\n+  current_offset += movptr_size;\n+  \/\/ to make sure the address of jal 4-byte aligned.\n+  return align_up(current_offset, alignment_required()) - current_offset;\n+}\n+\n@@ -1204,0 +1232,1 @@\n+  Assembler::CompressibleRegion cr(&_masm);\n@@ -1221,0 +1250,1 @@\n+    Assembler::CompressibleRegion cr(&_masm); \/\/ RVC: nops shall be 2-byte under RVC for alignment purposes.\n@@ -1227,1 +1257,1 @@\n-    return _count * NativeInstruction::instruction_size;\n+    return _count * (UseRVC ? NativeInstruction::compressed_instruction_size : NativeInstruction::instruction_size);\n@@ -1491,0 +1521,1 @@\n+      Assembler::CompressibleRegion cr(&_masm);\n@@ -1511,0 +1542,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -2037,0 +2069,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -2063,0 +2096,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -2475,0 +2509,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -2481,0 +2516,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -2496,0 +2532,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -4441,0 +4478,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -4456,0 +4494,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -4486,0 +4525,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -4517,0 +4557,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -4547,0 +4588,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -4592,0 +4634,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -4876,0 +4919,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -4905,0 +4949,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -4935,0 +4980,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -4965,0 +5011,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -5009,0 +5056,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -5024,0 +5072,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -6319,0 +6368,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -6334,0 +6384,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -6350,0 +6401,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -6366,0 +6418,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -6381,0 +6434,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -6396,0 +6450,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -6412,0 +6467,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -6427,0 +6483,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -6444,0 +6501,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -6460,0 +6518,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -6476,0 +6535,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -6491,0 +6551,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -6635,0 +6696,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -6786,0 +6848,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -6820,0 +6883,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -6838,0 +6902,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -6872,0 +6937,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -7337,0 +7403,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -7353,0 +7420,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -7369,0 +7437,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -7401,0 +7470,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -7433,0 +7503,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -7449,0 +7520,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -7465,0 +7537,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -7497,0 +7570,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -7698,0 +7772,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -7713,0 +7788,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -7869,0 +7945,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -8026,0 +8103,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -8044,0 +8122,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -8140,0 +8219,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -8176,0 +8256,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -8194,0 +8275,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -8230,0 +8312,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -8248,0 +8331,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -8266,0 +8350,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n@@ -9802,0 +9887,1 @@\n+  ins_alignment(4);\n@@ -9821,0 +9907,1 @@\n+  ins_alignment(4);\n@@ -10401,0 +10488,1 @@\n+    Assembler::CompressibleRegion cr(&_masm);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":89,"deletions":1,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -332,1 +332,1 @@\n-#if defined(X86) && !defined(AMD64)\n+#if (defined(X86) && !defined(AMD64)) || defined(RISCV)\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsCompiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}