{"files":[{"patch":"@@ -2030,2 +2030,2 @@\n-\/\/ 3. We introduce 'CompressibleRegion' to hint instructions in this Region's RTTI range\n-\/\/    are qualified to change to their 2-byte versions.\n+\/\/ 3. 'CompressibleRegion' is introduced to hint instructions in this Region's RTTI range\n+\/\/    are qualified to be compressed with their 2-byte versions.\n@@ -2037,1 +2037,1 @@\n-\/\/ 4. Using -XX:PrintAssemblyOptions=no-aliases could print RVC instructions instead of\n+\/\/ 4. Using -XX:PrintAssemblyOptions=no-aliases could distinguish RVC instructions from\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1326,3 +1326,2 @@\n-  \/\/ With RVC a call may get 2-byte aligned.\n-  \/\/   the address of jal itself (which will be patched later) should not span the cache line.\n-  \/\/   See CallStaticJavaDirectNode::compute_padding() for more info.\n+  \/\/ With RVC a call instruction (which will be patched later) may get 2-byte aligned and could\n+  \/\/ span multiple cache lines. See CallStaticJavaDirectNode::compute_padding() for more info.\n@@ -1352,1 +1351,1 @@\n-  assert((__ offset() % 4) == 0, \"call pc (patchable jals) must be aligned to maintain atomicity\");\n+  assert((__ offset() % 4) == 0, \"call sites must be properly aligned\");\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-  \/\/ RISCV's amoswap instructions need a 4-byte alignment for the 4-byte word it swaps in memory\n+  \/\/ RISCV's amoswap instructions require that the memory address must be naturally aligned.\n@@ -262,1 +262,1 @@\n-  assert(__ offset() % 4 == 0, \"RISCV CAS needs a 4-byte alignment for the 4-byte word it swaps in memory\");\n+  assert(__ offset() % 4 == 0, \"bad alignment\");\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1193,5 +1193,4 @@\n-\/\/ With RVC a call may get 2-byte aligned.\n-\/\/   The offset encoding in jal ranges bits [12, 31] could span the cache line.\n-\/\/   Patching this unaligned address will make the write operation not atomic.\n-\/\/   Other threads may be running the same piece of code at full speed, causing concurrency issues.\n-\/\/   So we must ensure that it does not span a cache line so that it can be patched.\n+\/\/ With RVC a call site may get 2-byte aligned.\n+\/\/ The offset encoding in jal instruction bits [12, 31] could span multiple cache lines.\n+\/\/ Patching this jal instruction will not be atomic when its address is not naturally aligned.\n+\/\/ Other threads may be running the same piece of code at the same time, thus causing concurrency issues.\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}