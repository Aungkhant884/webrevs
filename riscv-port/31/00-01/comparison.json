{"files":[{"patch":"@@ -289,1 +289,1 @@\n-  \/\/ if the number of pushed regs is odd, zr will be added\n+  \/\/ if the number of pushed regs is odd, one slot will be reserved for alignment\n@@ -319,1 +319,1 @@\n-  \/\/ if the number of popped regs is odd, zr will be added\n+  \/\/ if the number of popped regs is odd, the reserved slot for alignment will be removed\n@@ -335,1 +335,1 @@\n-  \/\/ if the number of popped regs is odd, zr will be added\n+  \/\/ if the number of popped regs is odd, the reserved slot for alignment will be removed\n@@ -352,2 +352,1 @@\n-  \/\/ we save x0, x5 ~ x31, except x1, x2, x3, x4\n-  cpu_reg_save_offsets[0] = sp_offset;\n+  \/\/ a slot reserved for stack 16-byte alignment, see MacroAssembler::push_reg\n@@ -355,1 +354,1 @@\n-  \/\/ 3: loop starts from x5\n+  \/\/ we save x5 ~ x31, except x0 ~ x4: loop starts from x5\n","filename":"src\/hotspot\/cpu\/riscv\/c1_Runtime1_riscv.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-  \/\/ |---zr---|\n+  \/\/ |---reserved slot for stack alignment---|\n@@ -120,1 +120,1 @@\n-  int x0_offset_in_bytes(void) {\n+  int reserved_slot_offset_in_bytes(void) {\n@@ -129,1 +129,1 @@\n-    return x0_offset_in_bytes() + (r->encoding() - 4 \/* x1, x2, x3, x4 *\/) * wordSize;\n+    return reserved_slot_offset_in_bytes() + (r->encoding() - 4 \/* x1, x2, x3, x4 *\/) * wordSize;\n@@ -137,1 +137,1 @@\n-    return x0_offset_in_bytes() +\n+    return reserved_slot_offset_in_bytes() +\n@@ -193,2 +193,0 @@\n-  \/\/ ignore zr, ra, sp, gp and tp, being ignored also by push_CPU_state (pushing zr only for stack alignment)\n-  sp_offset_in_slots += RegisterImpl::max_slots_per_register;\n@@ -196,1 +194,5 @@\n-  for (int i = 5; i < RegisterImpl::number_of_registers; i++, sp_offset_in_slots += step_in_slots) {\n+  \/\/ skip the slot reserved for alignment, see MacroAssembler::push_reg;\n+  \/\/ also skip x5 ~ x6 on the stack because they are caller-saved registers.\n+  sp_offset_in_slots += RegisterImpl::max_slots_per_register * 3;\n+  \/\/ besides, we ignore x0 ~ x4 because push_CPU_state won't push them on the stack.\n+  for (int i = 7; i < RegisterImpl::number_of_registers; i++, sp_offset_in_slots += step_in_slots) {\n@@ -198,1 +200,1 @@\n-    if (r != xthread && r != t0 && r != t1) {\n+    if (r != xthread) {\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"}]}