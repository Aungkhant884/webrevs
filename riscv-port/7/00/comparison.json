{"files":[{"patch":"@@ -2722,1 +2722,4 @@\n-\/\/ by the call to Thread::current() or, indeed, the call setup code.\n+\/\/ by the call to JavaThread::riscv64_get_thread_helper() or, indeed,\n+\/\/ the call setup code.\n+\/\/\n+\/\/ riscv64_get_thread_helper() clobbers only x10.\n@@ -2724,4 +2727,0 @@\n-\/\/ FIXME: RISC-V does not yet support TLSDESC (Thread-Local Storage\n-\/\/ Descriptors), once supported, we should repalce Thread::current\n-\/\/ with JavaThread::riscv64_get_thread_helper() to reduce the clbber\n-\/\/ of non-callee save context.\n@@ -2729,3 +2728,1 @@\n-  \/\/ save all call-clobbered regs except thread\n-  RegSet saved_regs = RegSet::range(x5, x7) + RegSet::range(x10, x17) +\n-                      RegSet::range(x28, x31) + lr - thread;\n+  RegSet saved_regs = RegSet::of(x10) + lr - thread;\n@@ -2734,2 +2731,6 @@\n-  call_VM_leaf_base(CAST_FROM_FN_PTR(address, Thread::current), 0);\n-  mv(thread, x10); \/\/ x10 is function call_vm_leaf_base return value, return java_thread value.\n+  int32_t offset = 0;\n+  movptr_with_offset(lr, CAST_FROM_FN_PTR(address, JavaThread::riscv64_get_thread_helper), offset);\n+  jalr(lr, lr, offset);\n+  if (thread != x10) {\n+    mv(thread, x10);\n+  }\n@@ -2737,1 +2738,0 @@\n-  \/\/ restore pushed registers\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/\/ Copyright (c) 2015, Red Hat Inc. All rights reserved.\n+\/\/ Copyright (c) 2021, Alibaba Group Holding Limited. All Rights Reserved.\n+\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\/\/\n+\/\/ This code is free software; you can redistribute it and\/or modify it\n+\/\/ under the terms of the GNU General Public License version 2 only, as\n+\/\/ published by the Free Software Foundation.\n+\/\/\n+\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n+\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+\/\/ version 2 for more details (a copy is included in the LICENSE file that\n+\/\/ accompanied this code).\n+\/\/\n+\/\/ You should have received a copy of the GNU General Public License version\n+\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n+\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\/\/\n+\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+\/\/ or visit www.oracle.com if you need additional information or have any\n+\/\/ questions.\n+\n+        \/\/ JavaThread::riscv64_get_thread_helper()\n+        \/\/\n+        \/\/ Return the current thread pointer in a0(x10).\n+        \/\/ All other registers are preserved,\n+\n+    .global _ZN10JavaThread25riscv64_get_thread_helperEv\n+    .type   _ZN10JavaThread25riscv64_get_thread_helperEv, %function\n+\n+_ZN10JavaThread25riscv64_get_thread_helperEv:\n+    la.tls.ie a0, _ZN6Thread12_thr_currentE\n+    add     a0, a0, tp\n+    ld      a0, 0(a0)\n+    ret\n+\n+    .size _ZN10JavaThread25riscv64_get_thread_helperEv, .-_ZN10JavaThread25riscv64_get_thread_helperEv\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/threadLS_linux_riscv.S","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -168,5 +168,0 @@\n-\/\/ TODO: Implement JavaThread::riscv64_get_thread_helper and revert this change\n-#if defined(RISCV)\n-#define USE_LIBRARY_BASED_TLS_ONLY 1\n-#endif\n-\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_gcc.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}