{"files":[{"patch":"@@ -31,1 +31,1 @@\n-instruct compareAndSwapP_shenandoah(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp, rFlagsReg cr) %{\n+instruct compareAndSwapP_shenandoah(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp) %{\n@@ -35,1 +35,1 @@\n-  effect(TEMP tmp, KILL cr);\n+  effect(TEMP tmp);\n@@ -52,1 +52,1 @@\n-instruct compareAndSwapN_shenandoah(iRegINoSp res, indirect mem, iRegN oldval, iRegN newval, iRegNNoSp tmp, rFlagsReg cr) %{\n+instruct compareAndSwapN_shenandoah(iRegINoSp res, indirect mem, iRegN oldval, iRegN newval, iRegNNoSp tmp) %{\n@@ -56,1 +56,1 @@\n-  effect(TEMP tmp, KILL cr);\n+  effect(TEMP tmp);\n@@ -73,1 +73,1 @@\n-instruct compareAndSwapPAcq_shenandoah(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp, rFlagsReg cr) %{\n+instruct compareAndSwapPAcq_shenandoah(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp) %{\n@@ -78,1 +78,1 @@\n-  effect(TEMP tmp, KILL cr);\n+  effect(TEMP tmp);\n@@ -95,1 +95,1 @@\n-instruct compareAndSwapNAcq_shenandoah(iRegINoSp res, indirect mem, iRegN oldval, iRegN newval, iRegNNoSp tmp, rFlagsReg cr) %{\n+instruct compareAndSwapNAcq_shenandoah(iRegINoSp res, indirect mem, iRegN oldval, iRegN newval, iRegNNoSp tmp) %{\n@@ -100,1 +100,1 @@\n-  effect(TEMP tmp, KILL cr);\n+  effect(TEMP tmp);\n@@ -117,1 +117,1 @@\n-instruct compareAndExchangeN_shenandoah(iRegNNoSp res, indirect mem, iRegN oldval, iRegN newval, iRegNNoSp tmp, rFlagsReg cr) %{\n+instruct compareAndExchangeN_shenandoah(iRegNNoSp res, indirect mem, iRegN oldval, iRegN newval, iRegNNoSp tmp) %{\n@@ -120,1 +120,1 @@\n-  effect(TEMP_DEF res, TEMP tmp, KILL cr);\n+  effect(TEMP_DEF res, TEMP tmp);\n@@ -137,1 +137,1 @@\n-instruct compareAndExchangeP_shenandoah(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp, rFlagsReg cr) %{\n+instruct compareAndExchangeP_shenandoah(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp) %{\n@@ -141,1 +141,1 @@\n-  effect(TEMP_DEF res, TEMP tmp, KILL cr);\n+  effect(TEMP_DEF res, TEMP tmp);\n@@ -157,1 +157,1 @@\n-instruct weakCompareAndSwapN_shenandoah(iRegINoSp res, indirect mem, iRegN oldval, iRegN newval, iRegNNoSp tmp, rFlagsReg cr) %{\n+instruct weakCompareAndSwapN_shenandoah(iRegINoSp res, indirect mem, iRegN oldval, iRegN newval, iRegNNoSp tmp) %{\n@@ -161,1 +161,1 @@\n-  effect(TEMP tmp, KILL cr);\n+  effect(TEMP tmp);\n@@ -179,1 +179,1 @@\n-instruct compareAndExchangeNAcq_shenandoah(iRegNNoSp res, indirect mem, iRegN oldval, iRegN newval, iRegNNoSp tmp, rFlagsReg cr) %{\n+instruct compareAndExchangeNAcq_shenandoah(iRegNNoSp res, indirect mem, iRegN oldval, iRegN newval, iRegNNoSp tmp) %{\n@@ -184,1 +184,1 @@\n-  effect(TEMP_DEF res, TEMP tmp, KILL cr);\n+  effect(TEMP_DEF res, TEMP tmp);\n@@ -200,1 +200,1 @@\n-instruct compareAndExchangePAcq_shenandoah(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp, rFlagsReg cr) %{\n+instruct compareAndExchangePAcq_shenandoah(iRegPNoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp) %{\n@@ -205,1 +205,1 @@\n-  effect(TEMP_DEF res, TEMP tmp, KILL cr);\n+  effect(TEMP_DEF res, TEMP tmp);\n@@ -221,1 +221,1 @@\n-instruct weakCompareAndSwapP_shenandoah(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp, rFlagsReg cr) %{\n+instruct weakCompareAndSwapP_shenandoah(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp) %{\n@@ -225,1 +225,1 @@\n-  effect(TEMP tmp, KILL cr);\n+  effect(TEMP tmp);\n@@ -241,1 +241,1 @@\n-instruct weakCompareAndSwapNAcq_shenandoah(iRegINoSp res, indirect mem, iRegN oldval, iRegN newval, iRegNNoSp tmp, rFlagsReg cr) %{\n+instruct weakCompareAndSwapNAcq_shenandoah(iRegINoSp res, indirect mem, iRegN oldval, iRegN newval, iRegNNoSp tmp) %{\n@@ -246,1 +246,1 @@\n-  effect(TEMP tmp, KILL cr);\n+  effect(TEMP tmp);\n@@ -264,1 +264,1 @@\n-instruct weakCompareAndSwapPAcq_shenandoah(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp, rFlagsReg cr) %{\n+instruct weakCompareAndSwapPAcq_shenandoah(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval, iRegPNoSp tmp) %{\n@@ -269,1 +269,1 @@\n-  effect(TEMP tmp, KILL cr);\n+  effect(TEMP tmp);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoah_riscv64.ad","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-instruct zCompareAndSwapP(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval, rFlagsReg cr) %{\n+instruct zCompareAndSwapP(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval) %{\n@@ -78,1 +78,1 @@\n-  effect(KILL cr, TEMP_DEF res);\n+  effect(TEMP_DEF res);\n@@ -110,1 +110,1 @@\n-instruct zCompareAndSwapPAcq(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval, rFlagsReg cr) %{\n+instruct zCompareAndSwapPAcq(iRegINoSp res, indirect mem, iRegP oldval, iRegP newval) %{\n@@ -114,1 +114,1 @@\n-  effect(KILL cr, TEMP_DEF res);\n+  effect(TEMP_DEF res);\n@@ -202,1 +202,1 @@\n-instruct zGetAndSetP(indirect mem, iRegP newv, iRegPNoSp prev, rFlagsReg cr) %{\n+instruct zGetAndSetP(indirect mem, iRegP newv, iRegPNoSp prev) %{\n@@ -205,1 +205,1 @@\n-  effect(TEMP_DEF prev, KILL cr);\n+  effect(TEMP_DEF prev);\n@@ -219,1 +219,1 @@\n-instruct zGetAndSetPAcq(indirect mem, iRegP newv, iRegPNoSp prev, rFlagsReg cr) %{\n+instruct zGetAndSetPAcq(indirect mem, iRegP newv, iRegPNoSp prev) %{\n@@ -222,1 +222,1 @@\n-  effect(TEMP_DEF prev, KILL cr);\n+  effect(TEMP_DEF prev);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/z_riscv64.ad","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -71,2 +71,2 @@\n-\/\/   x7, x9-x17, x28-x31 volatile (caller save)\n-\/\/   x0-x4, x8, x27 system (no save, no allocate)\n+\/\/   x9-x22, x24-x26, x27-x31 volatile (caller save)\n+\/\/   x0-x4, x8, x23 system (no save, no allocate)\n@@ -74,0 +74,1 @@\n+\/\/   x7 as flag register (caller save)\n@@ -83,4 +84,2 @@\n-reg_def R0      ( NS,  NS,  Op_RegI, 0,  x0->as_VMReg()         ); \/\/ zr\n-reg_def R0_H    ( NS,  NS,  Op_RegI, 0,  x0->as_VMReg()->next() );\n-reg_def R1      ( SOC, SOC, Op_RegI, 1,  x1->as_VMReg()         ); \/\/ ra\n-reg_def R1_H    ( SOC, SOC, Op_RegI, 1,  x1->as_VMReg()->next() );\n+reg_def R1      ( NS,  SOC, Op_RegI, 1,  x1->as_VMReg()         ); \/\/ ra\n+reg_def R1_H    ( NS,  SOC, Op_RegI, 1,  x1->as_VMReg()->next() );\n@@ -93,2 +92,0 @@\n-reg_def R7      ( SOC, SOC, Op_RegI, 7,  x7->as_VMReg()         );\n-reg_def R7_H    ( SOC, SOC, Op_RegI, 7,  x7->as_VMReg()->next() );\n@@ -404,1 +401,1 @@\n-\/\/ On riscv, the physical flag register is missing, so we use t1 instead,\n+\/\/ On riscv, the physical flag register is missing, so we use t2 instead,\n@@ -407,1 +404,1 @@\n-reg_def RFLAGS   (SOC, SOC, Op_RegFlags, 6, x6->as_VMReg()        );\n+reg_def RFLAGS   (SOC, SOC, Op_RegFlags, 7, x7->as_VMReg()        );\n@@ -419,1 +416,0 @@\n-    R7,  R7_H,\n@@ -451,1 +447,0 @@\n-    R0,  R0_H,  \/\/ zero\n@@ -544,1 +539,0 @@\n-    R0,\n@@ -549,1 +543,0 @@\n-    R7,\n@@ -595,1 +588,0 @@\n-    R0,  R0_H,\n@@ -600,1 +592,0 @@\n-    R7,  R7_H,\n@@ -634,1 +625,0 @@\n-    R0,                       \/\/ zr\n@@ -644,1 +634,0 @@\n-    R0,  R0_H,                \/\/ zr\n@@ -730,4 +719,0 @@\n-\/\/ Class for zero registesr\n-reg_class zr_reg(\n-    R0, R0_H\n-);\n@@ -1021,3 +1006,0 @@\n-\n-\/\/ predicate using the temp register for decoding klass\n-bool maybe_use_tmp_register_decoding_klass();\n@@ -1040,1 +1022,0 @@\n-  _ANY_REG32_mask.Remove(OptoReg::as_OptoReg(x0->as_VMReg()));\n@@ -1043,1 +1024,0 @@\n-  _ANY_REG_mask.SUBTRACT(_ZR_REG_mask);\n@@ -1046,1 +1026,0 @@\n-  _PTR_REG_mask.SUBTRACT(_ZR_REG_mask);\n@@ -1144,6 +1123,0 @@\n-\n-bool maybe_use_tmp_register_decoding_klass() {\n-  return !UseCompressedOops &&\n-         CompressedKlassPointers::base() != NULL &&\n-         CompressedKlassPointers::shift() != 0;\n-}\n@@ -1279,2 +1252,2 @@\n-  st->print(\"sd  fp, [sp, #%d]\", - 2 * wordSize);\n-  st->print(\"sd  ra, [sp, #%d]\", - wordSize);\n+  st->print(\"sd  fp, [sp, #%d]\\n\\t\", - 2 * wordSize);\n+  st->print(\"sd  ra, [sp, #%d]\\n\\t\", - wordSize);\n@@ -1439,3 +1412,3 @@\n-  \/\/ we have 30 int registers * 2 halves\n-  \/\/ (t0 and t1 are omitted)\n-  int slots_of_int_registers = RegisterImpl::max_slots_per_register * (RegisterImpl::number_of_registers - 2);\n+  \/\/ we have 28 int registers * 2 halves\n+  \/\/ (zr, t0, t1 and t2 are omitted)\n+  int slots_of_int_registers = RegisterImpl::max_slots_per_register * (RegisterImpl::number_of_registers - 4);\n@@ -1684,1 +1657,1 @@\n-    st->print_cr(\"\\tlw t0, [j_rarg0, oopDesc::klass_offset_in_bytes()]\\t# compressed klass\");\n+    st->print_cr(\"\\tlwu t0, [j_rarg0, oopDesc::klass_offset_in_bytes()]\\t# compressed klass\");\n@@ -1689,1 +1662,1 @@\n-   st->print_cr(\"\\tld t0, [j_rarg0, oopDesc::klass_offset_in_bytes()]\\t# compressed klass\");\n+    st->print_cr(\"\\tld t0, [j_rarg0, oopDesc::klass_offset_in_bytes()]\\t# compressed klass\");\n@@ -1691,1 +1664,3 @@\n-  st->print_cr(\"\\tbne x10, t0, SharedRuntime::_ic_miss_stub\\t # Inline cache check\");\n+  st->print_cr(\"\\tbeq t0, t1, ic_hit\");\n+  st->print_cr(\"\\tj SharedRuntime::_ic_miss_stub\\t # Inline cache check\");\n+  st->print_cr(\"\\tic_hit:\");\n@@ -2184,1 +2159,1 @@\n-    Register cr_reg = t1;\n+    Register cr_reg = t2;\n@@ -2288,1 +2263,1 @@\n-    Register flag = t1;\n+    Register flag = t2;\n@@ -2378,1 +2353,1 @@\n-    Register flag = t1;\n+    Register flag = t2;\n@@ -5083,1 +5058,1 @@\n-    \"sc_d t1, $newval $heap_top_ptr,\\t# ptr store conditional, #@storePConditional\"\n+    \"sc_d t2, $newval $heap_top_ptr,\\t# ptr store conditional, #@storePConditional\"\n@@ -5101,1 +5076,1 @@\n-    \"cmpxchg t1, $mem, $oldval, $newval, $mem\\t# if $mem == $oldval then $mem <-- $newval\"\n+    \"cmpxchg $mem, $oldval, $newval, $cr\\t# if $mem == $oldval then $mem <-- $newval\"\n@@ -5123,1 +5098,1 @@\n-    \"cmpxchgw t1, $mem, $oldval, $newval, $mem\\t# if $mem == $oldval then $mem <-- $newval\"\n+    \"cmpxchgw $mem, $oldval, $newval, $cr\\t# if $mem == $oldval then $mem <-- $newval\"\n@@ -5138,1 +5113,1 @@\n-instruct compareAndSwapB(iRegINoSp res, indirect mem, iRegI_R12 oldval, iRegI_R13 newval, iRegI tmp1, iRegI tmp2, iRegI tmp3, rFlagsReg cr)\n+instruct compareAndSwapB(iRegINoSp res, indirect mem, iRegI_R12 oldval, iRegI_R13 newval, iRegI tmp1, iRegI tmp2, iRegI tmp3)\n@@ -5144,1 +5119,1 @@\n-  effect(TEMP_DEF res, KILL cr, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n+  effect(TEMP_DEF res, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n@@ -5160,1 +5135,1 @@\n-instruct compareAndSwapS(iRegINoSp res, indirect mem, iRegI_R12 oldval, iRegI_R13 newval, iRegI tmp1, iRegI tmp2, iRegI tmp3, rFlagsReg cr)\n+instruct compareAndSwapS(iRegINoSp res, indirect mem, iRegI_R12 oldval, iRegI_R13 newval, iRegI tmp1, iRegI tmp2, iRegI tmp3)\n@@ -5166,1 +5141,1 @@\n-  effect(TEMP_DEF res, KILL cr, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n+  effect(TEMP_DEF res, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n@@ -5249,1 +5224,1 @@\n-                            iRegI tmp1, iRegI tmp2, iRegI tmp3, rFlagsReg cr)\n+                            iRegI tmp1, iRegI tmp2, iRegI tmp3)\n@@ -5257,1 +5232,1 @@\n-  effect(TEMP_DEF res, KILL cr, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n+  effect(TEMP_DEF res, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n@@ -5274,1 +5249,1 @@\n-                            iRegI tmp1, iRegI tmp2, iRegI tmp3, rFlagsReg cr)\n+                            iRegI tmp1, iRegI tmp2, iRegI tmp3)\n@@ -5282,1 +5257,1 @@\n-  effect(TEMP_DEF res, KILL cr, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n+  effect(TEMP_DEF res, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n@@ -5377,1 +5352,1 @@\n-                             iRegI tmp1, iRegI tmp2, iRegI tmp3, rFlagsReg cr)\n+                             iRegI tmp1, iRegI tmp2, iRegI tmp3)\n@@ -5383,1 +5358,1 @@\n-  effect(TEMP_DEF res, KILL cr, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n+  effect(TEMP_DEF res, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n@@ -5399,1 +5374,1 @@\n-                             iRegI tmp1, iRegI tmp2, iRegI tmp3, rFlagsReg cr)\n+                             iRegI tmp1, iRegI tmp2, iRegI tmp3)\n@@ -5405,1 +5380,1 @@\n-  effect(TEMP_DEF res, KILL cr, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n+  effect(TEMP_DEF res, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n@@ -5502,1 +5477,1 @@\n-                                iRegI tmp1, iRegI tmp2, iRegI tmp3, rFlagsReg cr)\n+                                iRegI tmp1, iRegI tmp2, iRegI tmp3)\n@@ -5510,1 +5485,1 @@\n-  effect(TEMP_DEF res, KILL cr, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n+  effect(TEMP_DEF res, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n@@ -5526,1 +5501,1 @@\n-                                iRegI tmp1, iRegI tmp2, iRegI tmp3, rFlagsReg cr)\n+                                iRegI tmp1, iRegI tmp2, iRegI tmp3)\n@@ -5534,1 +5509,1 @@\n-  effect(TEMP_DEF res, KILL cr, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n+  effect(TEMP_DEF res, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n@@ -5638,1 +5613,1 @@\n-                             iRegI tmp1, iRegI tmp2, iRegI tmp3, rFlagsReg cr)\n+                             iRegI tmp1, iRegI tmp2, iRegI tmp3)\n@@ -5644,1 +5619,1 @@\n-  effect(TEMP_DEF res, KILL cr, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n+  effect(TEMP_DEF res, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n@@ -5662,1 +5637,1 @@\n-                             iRegI tmp1, iRegI tmp2, iRegI tmp3, rFlagsReg cr)\n+                             iRegI tmp1, iRegI tmp2, iRegI tmp3)\n@@ -5668,1 +5643,1 @@\n-  effect(TEMP_DEF res, KILL cr, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n+  effect(TEMP_DEF res, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n@@ -5767,1 +5742,1 @@\n-                                iRegI tmp1, iRegI tmp2, iRegI tmp3, rFlagsReg cr)\n+                                iRegI tmp1, iRegI tmp2, iRegI tmp3)\n@@ -5775,1 +5750,1 @@\n-  effect(TEMP_DEF res, KILL cr, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n+  effect(TEMP_DEF res, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n@@ -5793,1 +5768,1 @@\n-                                iRegI tmp1, iRegI tmp2, iRegI tmp3, rFlagsReg cr)\n+                                iRegI tmp1, iRegI tmp2, iRegI tmp3)\n@@ -5801,1 +5776,1 @@\n-  effect(TEMP_DEF res, KILL cr, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n+  effect(TEMP_DEF res, USE_KILL oldval, USE_KILL newval, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n@@ -7521,1 +7496,1 @@\n-instruct bytes_reverse_int(rFlagsReg cr, iRegINoSp dst, iRegIorL2I src) %{\n+instruct bytes_reverse_int(iRegINoSp dst, iRegIorL2I src) %{\n@@ -7523,1 +7498,0 @@\n-  effect(TEMP cr);\n@@ -7535,1 +7509,1 @@\n-instruct bytes_reverse_long(rFlagsReg cr, iRegLNoSp dst, iRegL src) %{\n+instruct bytes_reverse_long(iRegLNoSp dst, iRegL src) %{\n@@ -7537,1 +7511,0 @@\n-  effect(TEMP cr);\n@@ -8107,19 +8080,0 @@\n-  predicate(!maybe_use_tmp_register_decoding_klass());\n-\n-  match(Set dst (DecodeNKlass src));\n-\n-  ins_cost(ALU_COST);\n-  format %{ \"decode_klass_not_null  $dst, $src\\t#@decodeKlass_not_null\" %}\n-\n-  ins_encode %{\n-    Register src_reg = as_Register($src$$reg);\n-    Register dst_reg = as_Register($dst$$reg);\n-    __ decode_klass_not_null(dst_reg, src_reg, UseCompressedOops ? xheapbase : t0);\n-  %}\n-\n-   ins_pipe(ialu_reg);\n-%}\n-\n-instruct decodeKlass_not_null_with_tmp(iRegPNoSp dst, iRegN src, rFlagsReg tmp) %{\n-  predicate(maybe_use_tmp_register_decoding_klass());\n-\n@@ -8128,2 +8082,0 @@\n-  effect(TEMP tmp);\n-\n@@ -8136,2 +8088,1 @@\n-    Register tmp_reg = as_Register($tmp$$reg);\n-    __ decode_klass_not_null(dst_reg, src_reg, tmp_reg);\n+    __ decode_klass_not_null(dst_reg, src_reg, t1);\n@@ -9823,1 +9774,1 @@\n-instruct CallDynamicJavaDirect(method meth, rFlagsReg cr)\n+instruct CallDynamicJavaDirect(method meth)\n@@ -9827,1 +9778,1 @@\n-  effect(USE meth, KILL cr);\n+  effect(USE meth);\n@@ -9841,1 +9792,1 @@\n-instruct CallRuntimeDirect(method meth, rFlagsReg cr)\n+instruct CallRuntimeDirect(method meth)\n@@ -9845,1 +9796,1 @@\n-  effect(USE meth, KILL cr);\n+  effect(USE meth);\n@@ -9858,1 +9809,1 @@\n-instruct CallLeafDirect(method meth, rFlagsReg cr)\n+instruct CallLeafDirect(method meth)\n@@ -9862,1 +9813,1 @@\n-  effect(USE meth, KILL cr);\n+  effect(USE meth);\n@@ -9875,1 +9826,1 @@\n-instruct CallLeafNoFPDirect(method meth, rFlagsReg cr)\n+instruct CallLeafNoFPDirect(method meth)\n@@ -9879,1 +9830,1 @@\n-  effect(USE meth, KILL cr);\n+  effect(USE meth);\n@@ -9898,1 +9849,1 @@\n-instruct partialSubtypeCheck(rFlagsReg cr, iRegP_R14 sub, iRegP_R10 super, iRegP_R12 temp, iRegP_R15 result)\n+instruct partialSubtypeCheck(iRegP_R14 sub, iRegP_R10 super, iRegP_R12 temp, iRegP_R15 result)\n@@ -9901,1 +9852,1 @@\n-  effect(KILL temp, KILL cr);\n+  effect(KILL temp);\n@@ -9930,1 +9881,1 @@\n-                         iRegI_R10 result, iRegP_R28 tmp1, iRegL_R29 tmp2, iRegL_R30 tmp3, rFlagsReg cr)\n+                         iRegI_R10 result, iRegP_R28 tmp1, iRegL_R29 tmp2, iRegL_R30 tmp3)\n@@ -9934,1 +9885,1 @@\n-  effect(KILL tmp1, KILL tmp2, KILL tmp3, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n+  effect(KILL tmp1, KILL tmp2, KILL tmp3, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2);\n@@ -9948,1 +9899,1 @@\n-                         iRegI_R10 result, iRegP_R28 tmp1, iRegL_R29 tmp2, iRegL_R30 tmp3, rFlagsReg cr)\n+                         iRegI_R10 result, iRegP_R28 tmp1, iRegL_R29 tmp2, iRegL_R30 tmp3)\n@@ -9952,1 +9903,1 @@\n-  effect(KILL tmp1, KILL tmp2, KILL tmp3, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n+  effect(KILL tmp1, KILL tmp2, KILL tmp3, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2);\n@@ -9965,1 +9916,1 @@\n-                          iRegI_R10 result, iRegP_R28 tmp1, iRegL_R29 tmp2, iRegL_R30 tmp3, rFlagsReg cr)\n+                          iRegI_R10 result, iRegP_R28 tmp1, iRegL_R29 tmp2, iRegL_R30 tmp3)\n@@ -9969,1 +9920,1 @@\n-  effect(KILL tmp1, KILL tmp2, KILL tmp3, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n+  effect(KILL tmp1, KILL tmp2, KILL tmp3, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2);\n@@ -9982,2 +9933,1 @@\n-                          iRegI_R10 result, iRegP_R28 tmp1, iRegL_R29 tmp2, iRegL_R30 tmp3,\n-                          rFlagsReg cr)\n+                          iRegI_R10 result, iRegP_R28 tmp1, iRegL_R29 tmp2, iRegL_R30 tmp3)\n@@ -9987,1 +9937,1 @@\n-  effect(KILL tmp1, KILL tmp2, KILL tmp3, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2, KILL cr);\n+  effect(KILL tmp1, KILL tmp2, KILL tmp3, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2);\n@@ -10001,1 +9951,1 @@\n-       iRegINoSp tmp4, iRegINoSp tmp5, iRegINoSp tmp6, rFlagsReg tmp)\n+       iRegINoSp tmp4, iRegINoSp tmp5, iRegINoSp tmp6)\n@@ -10006,1 +9956,1 @@\n-         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP tmp5, TEMP tmp6, KILL tmp);\n+         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP tmp5, TEMP tmp6);\n@@ -10022,1 +9972,1 @@\n-       iRegINoSp tmp4, iRegINoSp tmp5, iRegINoSp tmp6, rFlagsReg tmp)\n+       iRegINoSp tmp4, iRegINoSp tmp5, iRegINoSp tmp6)\n@@ -10027,1 +9977,1 @@\n-         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP tmp5, TEMP tmp6, KILL tmp);\n+         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP tmp5, TEMP tmp6);\n@@ -10043,1 +9993,1 @@\n-       iRegINoSp tmp4, iRegINoSp tmp5, iRegINoSp tmp6, rFlagsReg tmp)\n+       iRegINoSp tmp4, iRegINoSp tmp5, iRegINoSp tmp6)\n@@ -10048,1 +9998,1 @@\n-         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP tmp5, TEMP tmp6, KILL tmp);\n+         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, TEMP tmp5, TEMP tmp6);\n@@ -10064,1 +10014,1 @@\n-                 iRegINoSp tmp3, iRegINoSp tmp4, rFlagsReg tmp)\n+                 iRegINoSp tmp3, iRegINoSp tmp4)\n@@ -10069,1 +10019,1 @@\n-         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, KILL tmp);\n+         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4);\n@@ -10085,1 +10035,1 @@\n-                 iRegINoSp tmp3, iRegINoSp tmp4, rFlagsReg tmp)\n+                 iRegINoSp tmp3, iRegINoSp tmp4)\n@@ -10090,1 +10040,1 @@\n-         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, KILL tmp);\n+         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4);\n@@ -10106,1 +10056,1 @@\n-                 iRegINoSp tmp3, iRegINoSp tmp4, rFlagsReg tmp)\n+                 iRegINoSp tmp3, iRegINoSp tmp4)\n@@ -10111,1 +10061,1 @@\n-         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, KILL tmp);\n+         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4);\n@@ -10127,1 +10077,1 @@\n-                              iRegINoSp tmp3, iRegINoSp tmp4, rFlagsReg tmp)\n+                              iRegINoSp tmp3, iRegINoSp tmp4)\n@@ -10132,1 +10082,1 @@\n-         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, KILL tmp);\n+         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4);\n@@ -10147,1 +10097,1 @@\n-                              iRegINoSp tmp3, iRegINoSp tmp4, rFlagsReg tmp)\n+                              iRegINoSp tmp3, iRegINoSp tmp4)\n@@ -10152,1 +10102,1 @@\n-         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, KILL tmp);\n+         TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4);\n@@ -10165,1 +10115,1 @@\n-instruct clearArray_reg_reg(iRegL_R29 cnt, iRegP_R28 base, Universe dummy, rFlagsReg cr)\n+instruct clearArray_reg_reg(iRegL_R29 cnt, iRegP_R28 base, Universe dummy)\n@@ -10185,1 +10135,1 @@\n-instruct clearArray_imm_reg(immL cnt, iRegP_R28 base, Universe dummy, rFlagsReg cr)\n+instruct clearArray_imm_reg(immL cnt, iRegP_R28 base, Universe dummy)\n@@ -10190,1 +10140,1 @@\n-  effect(USE_KILL base, KILL cr);\n+  effect(USE_KILL base);\n@@ -10202,2 +10152,1 @@\n-instruct string_equalsL(iRegP_R11 str1, iRegP_R13 str2, iRegI_R14 cnt,\n-                        iRegI_R10 result, rFlagsReg cr)\n+instruct string_equalsL(iRegP_R11 str1, iRegP_R13 str2, iRegI_R14 cnt, iRegI_R10 result)\n@@ -10207,1 +10156,1 @@\n-  effect(USE_KILL str1, USE_KILL str2, USE_KILL cnt, KILL cr);\n+  effect(USE_KILL str1, USE_KILL str2, USE_KILL cnt);\n@@ -10218,2 +10167,1 @@\n-instruct string_equalsU(iRegP_R11 str1, iRegP_R13 str2, iRegI_R14 cnt,\n-                        iRegI_R10 result, rFlagsReg cr)\n+instruct string_equalsU(iRegP_R11 str1, iRegP_R13 str2, iRegI_R14 cnt, iRegI_R10 result)\n@@ -10223,1 +10171,1 @@\n-  effect(USE_KILL str1, USE_KILL str2, USE_KILL cnt, KILL cr);\n+  effect(USE_KILL str1, USE_KILL str2, USE_KILL cnt);\n@@ -10236,1 +10184,1 @@\n-                       iRegP_R16 tmp4, iRegP_R28 tmp, rFlagsReg cr)\n+                       iRegP_R16 tmp4, iRegP_R28 tmp)\n@@ -10240,1 +10188,1 @@\n-  effect(KILL tmp, USE_KILL ary1, USE_KILL ary2, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, KILL cr);\n+  effect(KILL tmp, USE_KILL ary1, USE_KILL ary2, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4);\n@@ -10253,1 +10201,1 @@\n-                       iRegP_R16 tmp4, iRegP_R28 tmp, rFlagsReg cr)\n+                       iRegP_R16 tmp4, iRegP_R28 tmp)\n@@ -10257,1 +10205,1 @@\n-  effect(KILL tmp, USE_KILL ary1, USE_KILL ary2, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, KILL cr);\n+  effect(KILL tmp, USE_KILL ary1, USE_KILL ary2, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4);\n@@ -10305,1 +10253,1 @@\n-\/\/ using t1 as the 'flag' register to bridge the BoolNode producers and consumers\n+\/\/ using t2 as the 'flag' register to bridge the BoolNode producers and consumers\n@@ -10319,1 +10267,1 @@\n-\/\/ using t1 as the 'flag' register to bridge the BoolNode producers and consumers\n+\/\/ using t2 as the 'flag' register to bridge the BoolNode producers and consumers\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":97,"deletions":149,"binary":false,"changes":246,"status":"modified"},{"patch":"@@ -1813,1 +1813,1 @@\n-                         vReg_V2 v2, vReg_V3 v3, rFlagsReg r6)\n+                         vReg_V2 v2, vReg_V3 v3)\n@@ -1817,1 +1817,1 @@\n-  effect(USE_KILL str1, USE_KILL str2, USE_KILL cnt, KILL r6, TEMP v1, TEMP v2, TEMP v3);\n+  effect(USE_KILL str1, USE_KILL str2, USE_KILL cnt, TEMP v1, TEMP v2, TEMP v3);\n@@ -1830,1 +1830,1 @@\n-                         vReg_V2 v2, vReg_V3 v3, rFlagsReg r6)\n+                         vReg_V2 v2, vReg_V3 v3)\n@@ -1834,1 +1834,1 @@\n-  effect(USE_KILL str1, USE_KILL str2, USE_KILL cnt, KILL r6, TEMP v1, TEMP v2, TEMP v3);\n+  effect(USE_KILL str1, USE_KILL str2, USE_KILL cnt, TEMP v1, TEMP v2, TEMP v3);\n@@ -1846,1 +1846,1 @@\n-                        vReg_V1 v1, vReg_V2 v2, vReg_V3 v3, iRegP_R28 tmp, rFlagsReg r6)\n+                        vReg_V1 v1, vReg_V2 v2, vReg_V3 v3, iRegP_R28 tmp)\n@@ -1850,1 +1850,1 @@\n-  effect(KILL tmp, USE_KILL ary1, USE_KILL ary2, TEMP v1, TEMP v2, TEMP v3, KILL r6);\n+  effect(KILL tmp, USE_KILL ary1, USE_KILL ary2, TEMP v1, TEMP v2, TEMP v3);\n@@ -1861,1 +1861,1 @@\n-                        vReg_V1 v1, vReg_V2 v2, vReg_V3 v3, iRegP_R28 tmp, rFlagsReg r6)\n+                        vReg_V1 v1, vReg_V2 v2, vReg_V3 v3, iRegP_R28 tmp)\n@@ -1865,1 +1865,1 @@\n-  effect(KILL tmp, USE_KILL ary1, USE_KILL ary2, TEMP v1, TEMP v2, TEMP v3, KILL r6);\n+  effect(KILL tmp, USE_KILL ary1, USE_KILL ary2, TEMP v1, TEMP v2, TEMP v3);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_vext.ad","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}