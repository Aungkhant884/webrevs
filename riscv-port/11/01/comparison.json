{"files":[{"patch":"@@ -137,4 +137,3 @@\n-  \/\/ NOTE the difference in using sender_sp and\n-  \/\/ interpreter_frame_sender_sp interpreter_frame_sender_sp is\n-  \/\/ the original sp of the caller (the unextended_sp) and\n-  \/\/ sender_sp is fp+8\/16 (32bit\/64bit)\n+  \/\/ NOTE the difference in using sender_sp and interpreter_frame_sender_sp\n+  \/\/ interpreter_frame_sender_sp is the original sp of the caller (the unextended_sp)\n+  \/\/ and sender_sp is fp\n","filename":"src\/hotspot\/cpu\/riscv\/abstractInterpreter_riscv.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1304,46 +1304,0 @@\n-\/\/ Vector AMO operations\n-#define INSN(NAME, op, funct3, funct5)                                   \\\n-  void NAME(VectorRegister vSrc, Register rBase, VectorRegister vOffset, \\\n-            bool src_as_dst, VectorMask vm = unmasked) {                 \\\n-    unsigned insn = 0;                                                   \\\n-    patch((address)&insn, 6, 0, op);                                     \\\n-    patch((address)&insn, 14, 12, funct3);                               \\\n-    patch((address)&insn, 25, vm);                                       \\\n-    patch((address)&insn, 26, (uint32_t)src_as_dst);                     \\\n-    patch((address)&insn, 31, 27, funct5);                               \\\n-    patch_reg((address)&insn, 7, vSrc);                                  \\\n-    patch_reg((address)&insn, 15, rBase);                                \\\n-    patch_reg((address)&insn, 20, vOffset);                              \\\n-    emit(insn);                                                          \\\n-  }\n-\n-  INSN(vamoswapei8_v,  0b0101111, 0b000, 0b00001);\n-  INSN(vamoswapei16_v, 0b0101111, 0b101, 0b00001);\n-  INSN(vamoswapei32_v, 0b0101111, 0b110, 0b00001);\n-  INSN(vamoaddei8_v,   0b0101111, 0b000, 0b00000);\n-  INSN(vamoaddei16_v,  0b0101111, 0b101, 0b00000);\n-  INSN(vamoaddei32_v,  0b0101111, 0b110, 0b00000);\n-  INSN(vamoxorei8_v,   0b0101111, 0b000, 0b00100);\n-  INSN(vamoxorei16_v,  0b0101111, 0b101, 0b00100);\n-  INSN(vamoxorei32_v,  0b0101111, 0b110, 0b00100);\n-  INSN(vamoandei8_v,   0b0101111, 0b000, 0b01100);\n-  INSN(vamoandei16_v,  0b0101111, 0b101, 0b01100);\n-  INSN(vamoandei32_v,  0b0101111, 0b110, 0b01100);\n-  INSN(vamoorei8_v,    0b0101111, 0b000, 0b01000);\n-  INSN(vamoorei16_v,   0b0101111, 0b101, 0b01000);\n-  INSN(vamoorei32_v,   0b0101111, 0b110, 0b01000);\n-  INSN(vamominei8_v,   0b0101111, 0b000, 0b10000);\n-  INSN(vamominei16_v,  0b0101111, 0b101, 0b10000);\n-  INSN(vamominei32_v,  0b0101111, 0b110, 0b10000);\n-  INSN(vamomaxei8_v,   0b0101111, 0b000, 0b10100);\n-  INSN(vamomaxei16_v,  0b0101111, 0b101, 0b10100);\n-  INSN(vamomaxei32_v,  0b0101111, 0b110, 0b10100);\n-  INSN(vamominuei8_v,  0b0101111, 0b000, 0b11000);\n-  INSN(vamominuei16_v, 0b0101111, 0b101, 0b11000);\n-  INSN(vamominuei32_v, 0b0101111, 0b110, 0b11000);\n-  INSN(vamomaxuei8_v,  0b0101111, 0b000, 0b11100);\n-  INSN(vamomaxuei16_v, 0b0101111, 0b101, 0b11100);\n-  INSN(vamomaxuei32_v, 0b0101111, 0b110, 0b11100);\n-\n-#undef INSN\n-\n@@ -1399,19 +1353,0 @@\n-  \/\/ Vector Widening Floating-Point\/Integer Type-Convert Instructions\n-  INSN(vfwcvt_xu_f_v, 0b1010111, 0b001, 0b01000, 0b010010);\n-  INSN(vfwcvt_x_f_v,  0b1010111, 0b001, 0b01001, 0b010010);\n-  INSN(vfwcvt_f_xu_v, 0b1010111, 0b001, 0b01010, 0b010010);\n-  INSN(vfwcvt_f_x_v,  0b1010111, 0b001, 0b01011, 0b010010);\n-  INSN(vfwcvt_f_f_v,  0b1010111, 0b001, 0b01100, 0b010010);\n-  INSN(vfwcvt_rtz_xu_f_v, 0b1010111, 0b001, 0b01110, 0b010010);\n-  INSN(vfwcvt_rtz_x_f_v,  0b1010111, 0b001, 0b01111, 0b010010);\n-\n-  \/\/ Vector Narrowing Floating-Point\/Integer Type-Convert Instructions\n-  INSN(vfncvt_xu_f_w, 0b1010111, 0b001, 0b10000, 0b010010);\n-  INSN(vfncvt_x_f_w,  0b1010111, 0b001, 0b10001, 0b010010);\n-  INSN(vfncvt_f_xu_w, 0b1010111, 0b001, 0b10010, 0b010010);\n-  INSN(vfncvt_f_x_w,  0b1010111, 0b001, 0b10011, 0b010010);\n-  INSN(vfncvt_f_f_w,  0b1010111, 0b001, 0b10100, 0b010010);\n-  INSN(vfncvt_rod_f_f_w,  0b1010111, 0b001, 0b10101, 0b010010);\n-  INSN(vfncvt_rtz_xu_f_w, 0b1010111, 0b001, 0b10110, 0b010010);\n-  INSN(vfncvt_rtz_x_f_w,  0b1010111, 0b001, 0b10111, 0b010010);\n-\n@@ -1465,19 +1400,0 @@\n-  \/\/ Vector Register Gather Instruction\n-  INSN(vrgather_vi,   0b1010111, 0b011, 0b001100);\n-\n-  \/\/ Vector Slide Instructions\n-  INSN(vslidedown_vi, 0b1010111, 0b011, 0b001111);\n-  INSN(vslideup_vi,   0b1010111, 0b011, 0b001110);\n-\n-  \/\/ Vector Narrowing Fixed-Point Clip Instructions\n-  INSN(vnclip_wi,  0b1010111, 0b011, 0b101111);\n-  INSN(vnclipu_wi, 0b1010111, 0b011, 0b101110);\n-\n-  \/\/ Vector Single-Width Scaling Shift Instructions\n-  INSN(vssra_vi,   0b1010111, 0b011, 0b101011);\n-  INSN(vssrl_vi,   0b1010111, 0b011, 0b101010);\n-\n-  \/\/ Vector Narrowing Integer Right Shift Instructions\n-  INSN(vnsra_wi,   0b1010111, 0b011, 0b101101);\n-  INSN(vnsrl_wi,   0b1010111, 0b011, 0b101100);\n-\n@@ -1496,6 +1412,0 @@\n-  \/\/ Vector Widening Floating-Point Fused Multiply-Add Instructions\n-  INSN(vfwnmsac_vv, 0b1010111, 0b001, 0b111111);\n-  INSN(vfwmsac_vv,  0b1010111, 0b001, 0b111110);\n-  INSN(vfwnmacc_vv, 0b1010111, 0b001, 0b111101);\n-  INSN(vfwmacc_vv,  0b1010111, 0b001, 0b111100);\n-\n@@ -1512,5 +1422,0 @@\n-  \/\/ Vector Widening Integer Multiply-Add Instructions\n-  INSN(vwmaccsu_vv, 0b1010111, 0b010, 0b111111);\n-  INSN(vwmacc_vv,   0b1010111, 0b010, 0b111101);\n-  INSN(vwmaccu_vv,  0b1010111, 0b010, 0b111100);\n-\n@@ -1530,6 +1435,0 @@\n-  \/\/ Vector Widening Integer Multiply-Add Instructions\n-  INSN(vwmaccsu_vx, 0b1010111, 0b110, 0b111111);\n-  INSN(vwmacc_vx,   0b1010111, 0b110, 0b111101);\n-  INSN(vwmaccu_vx,  0b1010111, 0b110, 0b111100);\n-  INSN(vwmaccus_vx, 0b1010111, 0b110, 0b111110);\n-\n@@ -1551,6 +1450,0 @@\n-  \/\/ Vector Widening Floating-Point Fused Multiply-Add Instructions\n-  INSN(vfwnmsac_vf, 0b1010111, 0b101, 0b111111);\n-  INSN(vfwmsac_vf,  0b1010111, 0b101, 0b111110);\n-  INSN(vfwnmacc_vf, 0b1010111, 0b101, 0b111101);\n-  INSN(vfwmacc_vf,  0b1010111, 0b101, 0b111100);\n-\n@@ -1574,8 +1467,0 @@\n-  \/\/ Vector Register Gather Instruction\n-  INSN(vrgather_vv,     0b1010111, 0b000, 0b001100);\n-  INSN(vrgatherei16_vv, 0b1010111, 0b000, 0b001110);\n-\n-  \/\/ Vector Widening Floating-Point Reduction Instructions\n-  INSN(vfwredsum_vs,  0b1010111, 0b001, 0b110001);\n-  INSN(vfwredosum_vs, 0b1010111, 0b001, 0b110011);\n-\n@@ -1598,4 +1483,0 @@\n-  \/\/ Vector Widening Integer Reduction Instructions\n-  INSN(vwredsumu_vs,  0b1010111, 0b000, 0b110000);\n-  INSN(vwredsum_vs,   0b1010111, 0b000, 0b110001);\n-\n@@ -1617,3 +1498,0 @@\n-  \/\/ Vector Widening Floating-Point Multiply\n-  INSN(vfwmul_vv,  0b1010111, 0b001, 0b111000);\n-\n@@ -1624,6 +1502,0 @@\n-  \/\/ Vector Widening Floating-Point Add\/Subtract Instructions\n-  INSN(vfwsub_wv, 0b1010111, 0b001, 0b110110);\n-  INSN(vfwsub_vv, 0b1010111, 0b001, 0b110010);\n-  INSN(vfwadd_wv, 0b1010111, 0b001, 0b110100);\n-  INSN(vfwadd_vv, 0b1010111, 0b001, 0b110000);\n-\n@@ -1634,8 +1506,0 @@\n-  \/\/ Vector Narrowing Fixed-Point Clip Instructions\n-  INSN(vnclip_wv,  0b1010111, 0b000, 0b101111);\n-  INSN(vnclipu_wv, 0b1010111, 0b000, 0b101110);\n-\n-  \/\/ Vector Single-Width Scaling Shift Instructions\n-  INSN(vssra_vv, 0b1010111, 0b000, 0b101011);\n-  INSN(vssrl_vv, 0b1010111, 0b000, 0b101010);\n-\n@@ -1645,17 +1509,0 @@\n-  \/\/ Vector Single-Width Averaging Add and Subtract\n-  INSN(vasubu_vv, 0b1010111, 0b010, 0b001010);\n-  INSN(vasub_vv,  0b1010111, 0b010, 0b001011);\n-  INSN(vaaddu_vv, 0b1010111, 0b010, 0b001000);\n-  INSN(vaadd_vv,  0b1010111, 0b010, 0b001001);\n-\n-  \/\/ Vector Single-Width Saturating Add and Subtract\n-  INSN(vssub_vv,  0b1010111, 0b000, 0b100011);\n-  INSN(vssubu_vv, 0b1010111, 0b000, 0b100010);\n-  INSN(vsadd_vv,  0b1010111, 0b000, 0b100001);\n-  INSN(vsaddu_vv, 0b1010111, 0b000, 0b100000);\n-\n-  \/\/ Vector Widening Integer Multiply Instructions\n-  INSN(vwmul_vv,   0b1010111, 0b010, 0b111011);\n-  INSN(vwmulsu_vv, 0b1010111, 0b010, 0b111010);\n-  INSN(vwmulu_vv,  0b1010111, 0b010, 0b111000);\n-\n@@ -1688,4 +1535,0 @@\n-  \/\/ Vector Narrowing Integer Right Shift Instructions\n-  INSN(vnsra_wv, 0b1010111, 0b000, 0b101101);\n-  INSN(vnsrl_wv, 0b1010111, 0b000, 0b101100);\n-\n@@ -1702,10 +1545,0 @@\n-  \/\/ Vector Widening Integer Add\/Subtract\n-  INSN(vwsub_wv,  0b1010111, 0b010, 0b110111);\n-  INSN(vwsubu_wv, 0b1010111, 0b010, 0b110110);\n-  INSN(vwadd_wv,  0b1010111, 0b010, 0b110101);\n-  INSN(vwaddu_wv, 0b1010111, 0b010, 0b110100);\n-  INSN(vwsub_vv,  0b1010111, 0b010, 0b110011);\n-  INSN(vwsubu_vv, 0b1010111, 0b010, 0b110010);\n-  INSN(vwadd_vv,  0b1010111, 0b010, 0b110001);\n-  INSN(vwaddu_vv, 0b1010111, 0b010, 0b110000);\n-\n@@ -1724,37 +1557,0 @@\n-  \/\/ Vector Register Gather Instruction\n-  INSN(vrgather_vx, 0b1010111, 0b100, 0b001100);\n-\n-  \/\/ Vector Slide Instructions\n-  INSN(vslide1down_vx, 0b1010111, 0b110, 0b001111);\n-  INSN(vslidedown_vx,  0b1010111, 0b100, 0b001111);\n-  INSN(vslide1up_vx,   0b1010111, 0b110, 0b001110);\n-  INSN(vslideup_vx,    0b1010111, 0b100, 0b001110);\n-\n-  \/\/ Vector Narrowing Fixed-Point Clip Instructions\n-  INSN(vnclip_wx,  0b1010111, 0b100, 0b101111);\n-  INSN(vnclipu_wx, 0b1010111, 0b100, 0b101110);\n-\n-  \/\/ Vector Single-Width Scaling Shift Instructions\n-  INSN(vssra_vx, 0b1010111, 0b100, 0b101011);\n-  INSN(vssrl_vx, 0b1010111, 0b100, 0b101010);\n-\n-  \/\/ Vector Single-Width Fractional Multiply with Rounding and Saturation\n-  INSN(vsmul_vx, 0b1010111, 0b100, 0b100111);\n-\n-  \/\/ Vector Single-Width Averaging Add and Subtract\n-  INSN(vasubu_vx, 0b1010111, 0b110, 0b001010);\n-  INSN(vasub_vx,  0b1010111, 0b110, 0b001011);\n-  INSN(vaaddu_vx, 0b1010111, 0b110, 0b001000);\n-  INSN(vaadd_vx,  0b1010111, 0b110, 0b001001);\n-\n-  \/\/ Vector Single-Width Saturating Add and Subtract\n-  INSN(vssub_vx,  0b1010111, 0b100, 0b100011);\n-  INSN(vssubu_vx, 0b1010111, 0b100, 0b100010);\n-  INSN(vsadd_vx,  0b1010111, 0b100, 0b100001);\n-  INSN(vsaddu_vx, 0b1010111, 0b100, 0b100000);\n-\n-  \/\/ Vector Widening Integer Multiply Instructions\n-  INSN(vwmul_vx,   0b1010111, 0b110, 0b111011);\n-  INSN(vwmulsu_vx, 0b1010111, 0b110, 0b111010);\n-  INSN(vwmulu_vx,  0b1010111, 0b110, 0b111000);\n-\n@@ -1803,11 +1599,0 @@\n-  \/\/ Vector Widening Integer Add\/Subtract\n-  INSN(vwsub_wx,  0b1010111, 0b110, 0b110111);\n-  INSN(vwsubu_wx, 0b1010111, 0b110, 0b110110);\n-  INSN(vwadd_wx,  0b1010111, 0b110, 0b110101);\n-  INSN(vwadd_wv,  0b1010111, 0b010, 0b110101);\n-  INSN(vwaddu_wx, 0b1010111, 0b110, 0b110100);\n-  INSN(vwsub_vx,  0b1010111, 0b110, 0b110011);\n-  INSN(vwsubu_vx, 0b1010111, 0b110, 0b110010);\n-  INSN(vwadd_vx,  0b1010111, 0b110, 0b110001);\n-  INSN(vwaddu_vx, 0b1010111, 0b110, 0b110000);\n-\n@@ -1833,4 +1618,0 @@\n-  \/\/ Vector Slide1up\/Slide1down Instruction\n-  INSN(vfslide1down_vf, 0b1010111, 0b101, 0b001111);\n-  INSN(vfslide1up_vf,   0b1010111, 0b101, 0b001110);\n-\n@@ -1846,3 +1627,0 @@\n-  \/\/ Vector Widening Floating-Point Multiply\n-  INSN(vfwmul_vf, 0b1010111, 0b101, 0b111000);\n-\n@@ -1854,6 +1632,0 @@\n-  \/\/ Vector Widening Floating-Point Add\/Subtract Instructions\n-  INSN(vfwsub_wf, 0b1010111, 0b101, 0b110110);\n-  INSN(vfwsub_vf, 0b1010111, 0b101, 0b110010);\n-  INSN(vfwadd_wf, 0b1010111, 0b101, 0b110100);\n-  INSN(vfwadd_vf, 0b1010111, 0b101, 0b110000);\n-\n@@ -1873,2 +1645,0 @@\n-  INSN(vsadd_vi,  0b1010111, 0b011, 0b100001);\n-  INSN(vsaddu_vi, 0b1010111, 0b011, 0b100000);\n@@ -1918,61 +1688,0 @@\n-#define INSN(NAME, op, funct3, vm, funct6)                                                  \\\n-  void NAME(VectorRegister Vd, VectorRegister Vs2, int32_t imm, VectorRegister V0) {        \\\n-    guarantee(is_imm_in_range(imm, 5, 0), \"imm is invalid\");                                \\\n-    patch_VArith(op, Vd, funct3, (uint32_t)(imm & 0x1f), Vs2, vm, funct6);                  \\\n-  }\n-\n-  \/\/ Vector Integer Merge Instructions\n-  INSN(vmerge_vim, 0b1010111, 0b011, 0b0, 0b010111);\n-\n-  \/\/ Vector Integer Add-with-Carry \/ Subtract-with-Borrow Instructions\n-  INSN(vadc_vim,   0b1010111, 0b011, 0b0, 0b010000);\n-  INSN(vmadc_vim,  0b1010111, 0b011, 0b0, 0b010001);\n-\n-#undef INSN\n-\n-#define INSN(NAME, op, funct3, vm, funct6)                                                  \\\n-  void NAME(VectorRegister Vd, VectorRegister Vs2, VectorRegister Vs1, VectorRegister V0) { \\\n-    patch_VArith(op, Vd, funct3, Vs1->encoding_nocheck(), Vs2, vm, funct6);                 \\\n-  }\n-\n-  \/\/ Vector Integer Merge Instructions\n-  INSN(vmerge_vvm, 0b1010111, 0b000, 0b0, 0b010111);\n-\n-  \/\/ Vector Integer Add-with-Carry \/ Subtract-with-Borrow Instructions\n-  INSN(vsbc_vvm, 0b1010111, 0b000, 0b0, 0b010010);\n-  INSN(vadc_vvm, 0b1010111, 0b000, 0b0, 0b010000);\n-\n-  \/\/ Vector Integer Add-with-Carry \/ Subtract-with-Borrow Instructions\n-  INSN(vmadc_vvm, 0b1010111, 0b000, 0b0, 0b010001);\n-  INSN(vmsbc_vvm, 0b1010111, 0b000, 0b0, 0b010011);\n-\n-#undef INSN\n-\n-#define INSN(NAME, op, funct3, vm, funct6)                                                  \\\n-  void NAME(VectorRegister Vd, VectorRegister Vs2, FloatRegister Rs1, VectorRegister V0) {  \\\n-    patch_VArith(op, Vd, funct3, Rs1->encoding_nocheck(), Vs2, vm, funct6);                 \\\n-  }\n-\n-  \/\/ Vector Floating-Point Merge Instruction\n-  INSN(vfmerge_vfm, 0b1010111, 0b101, 0b0, 0b010111);\n-\n-#undef INSN\n-\n-#define INSN(NAME, op, funct3, vm, funct6)                                                  \\\n-  void NAME(VectorRegister Vd, VectorRegister Vs2, Register Rs1, VectorRegister V0) {       \\\n-    patch_VArith(op, Vd, funct3, Rs1->encoding_nocheck(), Vs2, vm, funct6);                 \\\n-  }\n-\n-  \/\/ Vector Integer Merge Instructions\n-  INSN(vmerge_vxm, 0b1010111, 0b100, 0b0, 0b010111);\n-\n-  \/\/ Vector Integer Add-with-Carry \/ Subtract-with-Borrow Instructions\n-  INSN(vsbc_vxm, 0b1010111, 0b100, 0b0, 0b010010);\n-  INSN(vadc_vxm, 0b1010111, 0b100, 0b0, 0b010000);\n-\n-  \/\/ Vector Integer Add-with-Carry \/ Subtract-with-Borrow Instructions\n-  INSN(vmadc_vxm, 0b1010111, 0b100, 0b0, 0b010001);\n-  INSN(vmsbc_vxm, 0b1010111, 0b100, 0b0, 0b010011);\n-\n-#undef INSN\n-\n@@ -2152,31 +1861,0 @@\n-#undef INSN\n-\n-#define INSN(NAME, op, width, mop, mew)                                                                   \\\n-  void NAME(VectorRegister Vs3, Register Rs1, VectorRegister Vs2, VectorMask vm = unmasked, Nf nf = g1) { \\\n-    patch_VLdSt(op, Vs3, width, Rs1, Vs2->encoding_nocheck(), vm, mop, mew, nf);                          \\\n-  }\n-\n-  \/\/ Vector unordered-indexed store instructions\n-  INSN(vsuxei8_v,  0b0100111, 0b000, 0b01, 0b0);\n-  INSN(vsuxei16_v, 0b0100111, 0b101, 0b01, 0b0);\n-  INSN(vsuxei32_v, 0b0100111, 0b110, 0b01, 0b0);\n-  INSN(vsuxei64_v, 0b0100111, 0b111, 0b01, 0b0);\n-\n-  \/\/ Vector ordered indexed store instructions\n-  INSN(vsoxei8_v,  0b0100111, 0b000, 0b11, 0b0);\n-  INSN(vsoxei16_v, 0b0100111, 0b101, 0b11, 0b0);\n-  INSN(vsoxei32_v, 0b0100111, 0b110, 0b11, 0b0);\n-  INSN(vsoxei64_v, 0b0100111, 0b111, 0b11, 0b0);\n-\n-#undef INSN\n-\n-#define INSN(NAME, op, width, mop, mew)                                                                   \\\n-  void NAME(VectorRegister Vs3, Register Rs1, Register Rs2, VectorMask vm = unmasked, Nf nf = g1) {       \\\n-    patch_VLdSt(op, Vs3, width, Rs1, Rs2->encoding_nocheck(), vm, mop, mew, nf);                          \\\n-  }\n-\n-  INSN(vsse8_v,  0b0100111, 0b000, 0b10, 0b0);\n-  INSN(vsse16_v, 0b0100111, 0b101, 0b10, 0b0);\n-  INSN(vsse32_v, 0b0100111, 0b110, 0b10, 0b0);\n-  INSN(vsse64_v, 0b0100111, 0b111, 0b10, 0b0);\n-\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":0,"deletions":322,"binary":false,"changes":322,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    int      con_size_in_bytes,        \/\/ object size in bytes if   known at compile time\n+    int      con_size_in_bytes,        \/\/ object size in bytes if known at compile time\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -244,1 +244,1 @@\n-\/\/ Tries to smart of about FP registers.  In particular we separate\n+\/\/ Tries to smart of about FPU registers.  In particular we separate\n@@ -262,1 +262,1 @@\n-  \/\/ in c1_FrameMap_riscv64.cpp for detail.\n+  \/\/ in c1_FrameMap_riscv.cpp for detail.\n","filename":"src\/hotspot\/cpu\/riscv\/c1_Runtime1_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,18 +75,19 @@\n-#define ARCH_FLAGS(develop,                                             \\\n-                   product,                                             \\\n-                   notproduct,                                          \\\n-                   range,                                               \\\n-                   constraint)                                          \\\n-                                                                        \\\n-  product(bool, NearCpool, true,                                        \\\n-         \"constant pool is close to instructions\")                      \\\n-  product(intx, BlockZeroingLowLimit, 256,                              \\\n-          \"Minimum size in bytes when block zeroing will be used\")      \\\n-          range(1, max_jint)                                            \\\n-  product(bool, TraceTraps, false, \"Trace all traps the signal handler\")\\\n-  product(bool, UseConservativeFence, true,                             \\\n-          \"Extend i for r and o for w in the pred\/succ flags of fence;\" \\\n-          \"Extend fence.i to fence.i + fence.\")                         \\\n-  product(bool, UseVExt, false, \"Use RVV instructions\")                 \\\n-  product(bool, AvoidUnalignedAccesses, true,                           \\\n-          \"Avoid generating unaligned memory accesses\")                 \\\n+#define ARCH_FLAGS(develop,                                                      \\\n+                   product,                                                      \\\n+                   notproduct,                                                   \\\n+                   range,                                                        \\\n+                   constraint)                                                   \\\n+                                                                                 \\\n+  product(bool, NearCpool, true,                                                 \\\n+         \"constant pool is close to instructions\")                               \\\n+  product(intx, BlockZeroingLowLimit, 256,                                       \\\n+          \"Minimum size in bytes when block zeroing will be used\")               \\\n+          range(1, max_jint)                                                     \\\n+  product(bool, TraceTraps, false, \"Trace all traps the signal handler\")         \\\n+  \/* For now we're going to be safe and add the I\/O bits to userspace fences. *\/ \\\n+  product(bool, UseConservativeFence, true,                                      \\\n+          \"Extend i for r and o for w in the pred\/succ flags of fence;\"          \\\n+          \"Extend fence.i to fence.i + fence.\")                                  \\\n+  product(bool, UseRVV, false, EXPERIMENTAL, \"Use RVV instructions\")             \\\n+  product(bool, AvoidUnalignedAccesses, true,                                    \\\n+          \"Avoid generating unaligned memory accesses\")                          \\\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  \/\/ note: even though the code contains an embedded value, we do not need reloc info\n+  \/\/ Note: even though the code contains an embedded value, we do not need reloc info\n","filename":"src\/hotspot\/cpu\/riscv\/icBuffer_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-\/\/ Interface for updating the instruction cache.  Whenever the VM\n+\/\/ Interface for updating the instruction cache. Whenever the VM\n@@ -36,1 +36,1 @@\n-    stub_size      = 16,                 \/\/ Size of the icache flush stub in bytes\n+    stub_size      = 16,                \/\/ Size of the icache flush stub in bytes\n","filename":"src\/hotspot\/cpu\/riscv\/icache_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -226,1 +226,1 @@\n-  \/\/ convert from field index to ConstantPoolCacheEntry\n+  \/\/ Convert from field index to ConstantPoolCacheEntry\n@@ -228,1 +228,1 @@\n-  \/\/ install it in cache. instead we pre-add the indexed offset to\n+  \/\/ install it in cache. Instead we pre-add the indexed offset to\n@@ -264,1 +264,1 @@\n-  \/\/ convert from field index to ConstantPoolCacheEntry index\n+  \/\/ Convert from field index to ConstantPoolCacheEntry index\n@@ -280,1 +280,1 @@\n-  \/\/ load pointer for resolved_references[] objArray\n+  \/\/ Load pointer for resolved_references[] objArray\n@@ -596,1 +596,1 @@\n-  \/\/ Note: Registers x13 xmm0 may be in use for the\n+  \/\/ Note: Registers x13 may be in use for the\n@@ -805,1 +805,1 @@\n-    \/\/ Load object pointer into obj_reg %c_rarg3\n+    \/\/ Load object pointer into obj_reg c_rarg3\n@@ -829,1 +829,1 @@\n-    \/\/  2) rsp <= mark < mark + os::pagesize()\n+    \/\/  2) sp <= mark < mark + os::pagesize()\n@@ -832,1 +832,1 @@\n-    \/\/ expression: ((mark - rsp) & (7 - os::vm_page_size())),\n+    \/\/ expression: ((mark - sp) & (7 - os::vm_page_size())),\n@@ -835,1 +835,1 @@\n-    \/\/ NOTE: the oopMark is in swap_reg %x10 as the result of cmpxchg\n+    \/\/ NOTE: the oopMark is in swap_reg x10 as the result of cmpxchg\n@@ -883,1 +883,1 @@\n-    \/\/ structure Store the BasicLock address into %x10\n+    \/\/ structure Store the BasicLock address into x10\n@@ -886,1 +886,1 @@\n-    \/\/ Load oop into obj_reg(%c_rarg3)\n+    \/\/ Load oop into obj_reg(c_rarg3)\n@@ -1488,1 +1488,1 @@\n-    \/\/ if no method data exists, go to profile_continue.\n+    \/\/ If no method data exists, go to profile_continue.\n@@ -1666,2 +1666,2 @@\n-                           \/\/ do. The unknown bit may have been\n-                           \/\/ set already but no need to check.\n+                  \/\/ do. The unknown bit may have been\n+                  \/\/ set already but no need to check.\n@@ -1899,1 +1899,0 @@\n-\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -1194,1 +1194,1 @@\n-  return NativeInstruction::instruction_size;                                             \/\/ only one instruction\n+  return NativeInstruction::instruction_size;                                   \/\/ only one instruction\n@@ -2587,1 +2587,1 @@\n-\/\/ scans count pointer sized words at [addr] for occurence of value,\n+\/\/ Scans count pointer sized words at [addr] for occurence of value,\n@@ -2621,1 +2621,1 @@\n-  \/\/ a couple of usefule fields in sub_klass:\n+  \/\/ A couple of usefule fields in sub_klass:\n@@ -3031,1 +3031,1 @@\n-\/\/ find pattern element in src, compute match mask,\n+\/\/ Find pattern element in src, compute match mask,\n@@ -3048,1 +3048,1 @@\n-\/\/ count bits of trailing zero chars from lsb to msb until first non-zero element.\n+\/\/ Count bits of trailing zero chars from lsb to msb until first non-zero element.\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-    return UseVExt;\n+    return UseRVV;\n","filename":"src\/hotspot\/cpu\/riscv\/matcher_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-  \/\/ x13: argument locator (parameter slot count, added to rsp)\n+  \/\/ x13: argument locator (parameter slot count, added to sp)\n","filename":"src\/hotspot\/cpu\/riscv\/methodHandles_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1779,1 +1779,1 @@\n-      return UseVExt;\n+      return UseRVV;\n@@ -1781,1 +1781,1 @@\n-      return UseVExt && SpecialEncodeISOArray;\n+      return UseRVV && SpecialEncodeISOArray;\n@@ -1844,2 +1844,2 @@\n-  if (UseVExt) {\n-    \/\/ The MaxVectorSize should have been set by detecting RVV max vector register size when check UseVExt.\n+  if (UseRVV) {\n+    \/\/ The MaxVectorSize should have been set by detecting RVV max vector register size when check UseRVV.\n@@ -1863,1 +1863,1 @@\n-  if (UseVExt) {\n+  if (UseRVV) {\n@@ -9916,1 +9916,1 @@\n-  predicate(!UseVExt && ((StrCompNode *)n)->encoding() == StrIntrinsicNode::UU);\n+  predicate(!UseRVV && ((StrCompNode *)n)->encoding() == StrIntrinsicNode::UU);\n@@ -9934,1 +9934,1 @@\n-  predicate(!UseVExt && ((StrCompNode *)n)->encoding() == StrIntrinsicNode::LL);\n+  predicate(!UseRVV && ((StrCompNode *)n)->encoding() == StrIntrinsicNode::LL);\n@@ -9951,1 +9951,1 @@\n-  predicate(!UseVExt && ((StrCompNode *)n)->encoding() == StrIntrinsicNode::UL);\n+  predicate(!UseRVV && ((StrCompNode *)n)->encoding() == StrIntrinsicNode::UL);\n@@ -9969,1 +9969,1 @@\n-  predicate(!UseVExt && ((StrCompNode *)n)->encoding() == StrIntrinsicNode::LU);\n+  predicate(!UseRVV && ((StrCompNode *)n)->encoding() == StrIntrinsicNode::LU);\n@@ -10114,1 +10114,1 @@\n-  predicate(!UseVExt && (((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::U));\n+  predicate(!UseRVV && (((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::U));\n@@ -10134,1 +10134,1 @@\n-  predicate(!UseVExt && (((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::L));\n+  predicate(!UseRVV && (((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::L));\n@@ -10151,1 +10151,1 @@\n-  predicate(!UseVExt);\n+  predicate(!UseRVV);\n@@ -10171,1 +10171,1 @@\n-  predicate(!UseVExt && (uint64_t)n->in(2)->get_long()\n+  predicate(!UseRVV && (uint64_t)n->in(2)->get_long()\n@@ -10189,1 +10189,1 @@\n-  predicate(!UseVExt && ((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::LL);\n+  predicate(!UseRVV && ((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::LL);\n@@ -10205,1 +10205,1 @@\n-  predicate(!UseVExt && ((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::UU);\n+  predicate(!UseRVV && ((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::UU);\n@@ -10222,1 +10222,1 @@\n-  predicate(!UseVExt && ((AryEqNode*)n)->encoding() == StrIntrinsicNode::LL);\n+  predicate(!UseRVV && ((AryEqNode*)n)->encoding() == StrIntrinsicNode::LL);\n@@ -10239,1 +10239,1 @@\n-  predicate(!UseVExt && ((AryEqNode*)n)->encoding() == StrIntrinsicNode::UU);\n+  predicate(!UseRVV && ((AryEqNode*)n)->encoding() == StrIntrinsicNode::UU);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-        return UseVExt;\n+        return UseRVV;\n@@ -1815,1 +1815,1 @@\n-  predicate(UseVExt && ((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::LL);\n+  predicate(UseRVV && ((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::LL);\n@@ -1832,1 +1832,1 @@\n-  predicate(UseVExt && ((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::UU);\n+  predicate(UseRVV && ((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::UU);\n@@ -1848,1 +1848,1 @@\n-  predicate(UseVExt && ((AryEqNode*)n)->encoding() == StrIntrinsicNode::LL);\n+  predicate(UseRVV && ((AryEqNode*)n)->encoding() == StrIntrinsicNode::LL);\n@@ -1863,1 +1863,1 @@\n-  predicate(UseVExt && ((AryEqNode*)n)->encoding() == StrIntrinsicNode::UU);\n+  predicate(UseRVV && ((AryEqNode*)n)->encoding() == StrIntrinsicNode::UU);\n@@ -1879,1 +1879,1 @@\n-  predicate(UseVExt && ((StrCompNode *)n)->encoding() == StrIntrinsicNode::UU);\n+  predicate(UseRVV && ((StrCompNode *)n)->encoding() == StrIntrinsicNode::UU);\n@@ -1898,1 +1898,1 @@\n-  predicate(UseVExt && ((StrCompNode *)n)->encoding() == StrIntrinsicNode::LL);\n+  predicate(UseRVV && ((StrCompNode *)n)->encoding() == StrIntrinsicNode::LL);\n@@ -1917,1 +1917,1 @@\n-  predicate(UseVExt && ((StrCompNode *)n)->encoding() == StrIntrinsicNode::UL);\n+  predicate(UseRVV && ((StrCompNode *)n)->encoding() == StrIntrinsicNode::UL);\n@@ -1935,1 +1935,1 @@\n-  predicate(UseVExt && ((StrCompNode *)n)->encoding() == StrIntrinsicNode::LU);\n+  predicate(UseRVV && ((StrCompNode *)n)->encoding() == StrIntrinsicNode::LU);\n@@ -1954,1 +1954,1 @@\n-  predicate(UseVExt);\n+  predicate(UseRVV);\n@@ -1969,1 +1969,1 @@\n-  predicate(UseVExt);\n+  predicate(UseRVV);\n@@ -1986,1 +1986,1 @@\n-  predicate(UseVExt);\n+  predicate(UseRVV);\n@@ -2001,1 +2001,1 @@\n-  predicate(UseVExt);\n+  predicate(UseRVV);\n@@ -2015,1 +2015,1 @@\n-  predicate(UseVExt && (((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::U));\n+  predicate(UseRVV && (((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::U));\n@@ -2035,1 +2035,1 @@\n-  predicate(UseVExt && (((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::L));\n+  predicate(UseRVV && (((StrIndexOfCharNode*)n)->encoding() == StrIntrinsicNode::L));\n@@ -2055,1 +2055,1 @@\n-  predicate(UseVExt);\n+  predicate(UseRVV);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_vext.ad","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-  RegisterSaver(bool save_vectors) : _save_vectors(UseVExt && save_vectors) {}\n+  RegisterSaver(bool save_vectors) : _save_vectors(UseRVV && save_vectors) {}\n@@ -1898,1 +1898,1 @@\n-  \/\/ e.g., the forward exception stub (see stubGenerator_riscv64.cpp).\n+  \/\/ e.g., the forward exception stub (see stubGenerator_riscv.cpp).\n@@ -2257,1 +2257,1 @@\n-  \/\/ location of rfp is known implicitly by the frame sender code\n+  \/\/ location of fp is known implicitly by the frame sender code\n@@ -2615,2 +2615,0 @@\n-\/\/ This is here instead of runtime_riscv64.cpp because it uses SimpleRuntimeFrame\n-\/\/\n@@ -2620,1 +2618,1 @@\n-\/\/ (see emit_exception_handler in riscv64.ad file)\n+\/\/ (see emit_exception_handler in riscv.ad file)\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -396,1 +396,1 @@\n-  \/\/ rsp.\n+  \/\/ sp.\n@@ -889,1 +889,1 @@\n-    if (UseVExt) {\n+    if (UseRVV) {\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-  if (UseVExt) {\n+  if (UseRVV) {\n@@ -109,1 +109,1 @@\n-      FLAG_SET_DEFAULT(UseVExt, false);\n+      FLAG_SET_DEFAULT(UseRVV, false);\n@@ -135,1 +135,1 @@\n-  if (!UseVExt) {\n+  if (!UseRVV) {\n@@ -139,1 +139,1 @@\n-  if (!UseVExt && MaxVectorSize) {\n+  if (!UseRVV && MaxVectorSize) {\n@@ -143,1 +143,1 @@\n-  if (UseVExt) {\n+  if (UseRVV) {\n@@ -148,1 +148,1 @@\n-      UseVExt = false;\n+      UseRVV = false;\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-    decl(B,            \"B\",            1)     \\\n@@ -52,1 +51,2 @@\n-    decl(V,            \"V\",           21)\n+    decl(V,            \"V\",           21)     \\\n+    decl(B,            \"B\",            1)\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,4 +55,0 @@\n-#ifndef HWCAP_ISA_B\n-#define HWCAP_ISA_B  (1 << ('B' - 'A'))\n-#endif\n-\n@@ -67,0 +63,4 @@\n+#ifndef HWCAP_ISA_B\n+#define HWCAP_ISA_B  (1 << ('B' - 'A'))\n+#endif\n+\n@@ -91,1 +91,0 @@\n-  static_assert(CPU_B == HWCAP_ISA_B, \"Flag CPU_B must follow Linux HWCAP\");\n@@ -94,0 +93,1 @@\n+  static_assert(CPU_B == HWCAP_ISA_B, \"Flag CPU_B must follow Linux HWCAP\");\n@@ -100,1 +100,0 @@\n-      HWCAP_ISA_B |\n@@ -102,1 +101,2 @@\n-      HWCAP_ISA_V);\n+      HWCAP_ISA_V |\n+      HWCAP_ISA_B);\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/vm_version_linux_riscv.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}