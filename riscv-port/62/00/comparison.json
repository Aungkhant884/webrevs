{"files":[{"patch":"@@ -104,1 +104,1 @@\n-  \/\/ On riscv64 we always keep the stack pointer 16-aligned, so we\n+  \/\/ On riscv we always keep the stack pointer 16-aligned, so we\n","filename":"src\/hotspot\/cpu\/riscv\/abstractInterpreter_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3037,1 +3037,1 @@\n-  \/\/ The maximum range of a branch is fixed for the riscv64\n+  \/\/ The maximum range of a branch is fixed for the riscv\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 2020, 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -264,1 +264,1 @@\n-\/\/ RISCV64 don't use C1 runtime patching. When need patch, just deoptimize.\n+\/\/ RISCV don't use C1 runtime patching. When need patch, just deoptimize.\n@@ -267,1 +267,1 @@\n-  assert(false, \"RISCV64 should not use C1 runtime patching\");\n+  assert(false, \"RISCV should not use C1 runtime patching\");\n","filename":"src\/hotspot\/cpu\/riscv\/c1_CodeStubs_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -79,1 +79,1 @@\n-\/\/ RISCV64 where floats and doubles are stored in their native form.\n+\/\/ RISCV where floats and doubles are stored in their native form.\n","filename":"src\/hotspot\/cpu\/riscv\/c1_Defs_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -30,1 +30,1 @@\n-\/\/ No FPU stack on RISCV64\n+\/\/ No FPU stack on RISCV\n","filename":"src\/hotspot\/cpu\/riscv\/c1_FpuStackSim_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -29,1 +29,1 @@\n-\/\/ No FPU stack on RISCV64\n+\/\/ No FPU stack on RISCV\n","filename":"src\/hotspot\/cpu\/riscv\/c1_FpuStackSim_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -383,1 +383,1 @@\n-  return LIR_OprFact::illegalOpr;  \/\/ Not needed on riscv64\n+  return LIR_OprFact::illegalOpr;  \/\/ Not needed on riscv\n","filename":"src\/hotspot\/cpu\/riscv\/c1_FrameMap_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -29,1 +29,1 @@\n-\/\/  On RISCV64 the frame looks as follows:\n+\/\/  On RISCV the frame looks as follows:\n","filename":"src\/hotspot\/cpu\/riscv\/c1_FrameMap_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 2020, 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -31,1 +31,1 @@\n-\/\/ processor dependent initialization for riscv64\n+\/\/ processor dependent initialization for riscv\n","filename":"src\/hotspot\/cpu\/riscv\/c2_init_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-\/\/ On (riscv64), we assume a constant instruction length.\n+\/\/ On riscv, we assume a constant instruction length.\n","filename":"src\/hotspot\/cpu\/riscv\/disassembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -391,1 +391,1 @@\n-  \/\/ On riscv64, sites calling method handle intrinsics and lambda forms are treated\n+  \/\/ On riscv, sites calling method handle intrinsics and lambda forms are treated\n@@ -654,1 +654,1 @@\n-  \/\/ Not used on riscv64, but we must return something.\n+  \/\/ Not used on riscv, but we must return something.\n","filename":"src\/hotspot\/cpu\/riscv\/frame_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-\/\/ Inline functions for RISCV64 frames:\n+\/\/ Inline functions for RISCV frames:\n","filename":"src\/hotspot\/cpu\/riscv\/frame_riscv.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -227,1 +227,1 @@\n-  \/\/ riscv64 already has the cache in xcpool so there is no need to\n+  \/\/ riscv already has the cache in xcpool so there is no need to\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2021, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -41,1 +41,1 @@\n-  \/\/ riscv64 supports misaligned vectors store\/load.\n+  \/\/ riscv supports misaligned vectors store\/load.\n","filename":"src\/hotspot\/cpu\/riscv\/matcher_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -356,1 +356,1 @@\n-         \"riscv64 cannot replace non-jump with jump\");\n+         \"riscv cannot replace non-jump with jump\");\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -237,1 +237,1 @@\n-\/\/ The natural type of an RISCV64 instruction is uint32_t\n+\/\/ The natural type of an RISCV instruction is uint32_t\n@@ -249,1 +249,1 @@\n-  enum RISCV64_specific_constants {\n+  enum RISCV_specific_constants {\n@@ -333,1 +333,1 @@\n-  enum RISCV64_specific_constants {\n+  enum RISCV_specific_constants {\n@@ -399,1 +399,1 @@\n-\/\/ RISCV64 should not use C1 runtime patching, so just leave NativeMovRegMem Unimplemented.\n+\/\/ RISCV should not use C1 runtime patching, so just leave NativeMovRegMem Unimplemented.\n@@ -437,1 +437,1 @@\n-  enum RISCV64_specific_constants {\n+  enum RISCV_specific_constants {\n@@ -471,1 +471,1 @@\n-  enum RISCV64_specific_constants {\n+  enum RISCV_specific_constants {\n@@ -510,1 +510,1 @@\n-  enum RISCV64_specific_constants {\n+  enum RISCV_specific_constants {\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-\/\/ The integer registers of the RISCV64 architecture\n+\/\/ The integer registers of the RISCV architecture\n@@ -191,1 +191,1 @@\n-\/\/ The float registers of the RISCV64 architecture\n+\/\/ The float registers of the RISCV architecture\n","filename":"src\/hotspot\/cpu\/riscv\/register_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-\/\/ RISCV64 Architecture Description File\n+\/\/ RISCV Architecture Description File\n@@ -157,1 +157,1 @@\n-\/\/ RISCV64 has 32 floating-point registers. Each can store a single\n+\/\/ RISCV has 32 floating-point registers. Each can store a single\n@@ -1174,1 +1174,1 @@\n-  \/\/ see riscv64_enc_java_to_runtime\n+  \/\/ see riscv_enc_java_to_runtime\n@@ -2076,1 +2076,1 @@\n-  enc_class riscv64_enc_li_imm(iRegIorL dst, immIorL src) %{\n+  enc_class riscv_enc_li_imm(iRegIorL dst, immIorL src) %{\n@@ -2084,1 +2084,1 @@\n-  enc_class riscv64_enc_mov_p(iRegP dst, immP src) %{\n+  enc_class riscv_enc_mov_p(iRegP dst, immP src) %{\n@@ -2103,1 +2103,1 @@\n-  enc_class riscv64_enc_mov_p1(iRegP dst) %{\n+  enc_class riscv_enc_mov_p1(iRegP dst) %{\n@@ -2110,1 +2110,1 @@\n-  enc_class riscv64_enc_mov_byte_map_base(iRegP dst) %{\n+  enc_class riscv_enc_mov_byte_map_base(iRegP dst) %{\n@@ -2115,1 +2115,1 @@\n-  enc_class riscv64_enc_mov_n(iRegN dst, immN src) %{\n+  enc_class riscv_enc_mov_n(iRegN dst, immN src) %{\n@@ -2128,1 +2128,1 @@\n-  enc_class riscv64_enc_mov_zero(iRegNorP dst) %{\n+  enc_class riscv_enc_mov_zero(iRegNorP dst) %{\n@@ -2134,1 +2134,1 @@\n-  enc_class riscv64_enc_mov_nk(iRegN dst, immNKlass src) %{\n+  enc_class riscv_enc_mov_nk(iRegN dst, immNKlass src) %{\n@@ -2147,1 +2147,1 @@\n-  enc_class riscv64_enc_cmpxchgw(iRegINoSp res, memory mem, iRegINoSp oldval, iRegINoSp newval) %{\n+  enc_class riscv_enc_cmpxchgw(iRegINoSp res, memory mem, iRegINoSp oldval, iRegINoSp newval) %{\n@@ -2154,1 +2154,1 @@\n-  enc_class riscv64_enc_cmpxchgn(iRegINoSp res, memory mem, iRegINoSp oldval, iRegINoSp newval) %{\n+  enc_class riscv_enc_cmpxchgn(iRegINoSp res, memory mem, iRegINoSp oldval, iRegINoSp newval) %{\n@@ -2161,1 +2161,1 @@\n-  enc_class riscv64_enc_cmpxchg(iRegINoSp res, memory mem, iRegLNoSp oldval, iRegLNoSp newval) %{\n+  enc_class riscv_enc_cmpxchg(iRegINoSp res, memory mem, iRegLNoSp oldval, iRegLNoSp newval) %{\n@@ -2168,1 +2168,1 @@\n-  enc_class riscv64_enc_cmpxchgw_acq(iRegINoSp res, memory mem, iRegINoSp oldval, iRegINoSp newval) %{\n+  enc_class riscv_enc_cmpxchgw_acq(iRegINoSp res, memory mem, iRegINoSp oldval, iRegINoSp newval) %{\n@@ -2175,1 +2175,1 @@\n-  enc_class riscv64_enc_cmpxchgn_acq(iRegINoSp res, memory mem, iRegINoSp oldval, iRegINoSp newval) %{\n+  enc_class riscv_enc_cmpxchgn_acq(iRegINoSp res, memory mem, iRegINoSp oldval, iRegINoSp newval) %{\n@@ -2182,1 +2182,1 @@\n-  enc_class riscv64_enc_cmpxchg_acq(iRegINoSp res, memory mem, iRegLNoSp oldval, iRegLNoSp newval) %{\n+  enc_class riscv_enc_cmpxchg_acq(iRegINoSp res, memory mem, iRegLNoSp oldval, iRegLNoSp newval) %{\n@@ -2191,1 +2191,1 @@\n-  enc_class riscv64_enc_j(label lbl) %{\n+  enc_class riscv_enc_j(label lbl) %{\n@@ -2197,1 +2197,1 @@\n-  enc_class riscv64_enc_far_cmpULtGe_imm0_branch(cmpOpULtGe cmp, iRegIorL op1, label lbl) %{\n+  enc_class riscv_enc_far_cmpULtGe_imm0_branch(cmpOpULtGe cmp, iRegIorL op1, label lbl) %{\n@@ -2213,1 +2213,1 @@\n-  enc_class riscv64_enc_partial_subtype_check(iRegP sub, iRegP super, iRegP temp, iRegP result) %{\n+  enc_class riscv_enc_partial_subtype_check(iRegP sub, iRegP super, iRegP temp, iRegP result) %{\n@@ -2240,1 +2240,1 @@\n-  enc_class riscv64_enc_java_static_call(method meth) %{\n+  enc_class riscv_enc_java_static_call(method meth) %{\n@@ -2272,1 +2272,1 @@\n-  enc_class riscv64_enc_java_dynamic_call(method meth) %{\n+  enc_class riscv_enc_java_dynamic_call(method meth) %{\n@@ -2282,1 +2282,1 @@\n-  enc_class riscv64_enc_call_epilog() %{\n+  enc_class riscv_enc_call_epilog() %{\n@@ -2290,1 +2290,1 @@\n-  enc_class riscv64_enc_java_to_runtime(method meth) %{\n+  enc_class riscv_enc_java_to_runtime(method meth) %{\n@@ -2319,1 +2319,1 @@\n-  enc_class riscv64_enc_fast_lock(iRegP object, iRegP box, iRegP tmp1, iRegP tmp2) %{\n+  enc_class riscv_enc_fast_lock(iRegP object, iRegP box, iRegP tmp1, iRegP tmp2) %{\n@@ -2413,1 +2413,1 @@\n-  enc_class riscv64_enc_fast_unlock(iRegP object, iRegP box, iRegP tmp1, iRegP tmp2) %{\n+  enc_class riscv_enc_fast_unlock(iRegP object, iRegP box, iRegP tmp1, iRegP tmp2) %{\n@@ -2484,1 +2484,1 @@\n-  enc_class riscv64_enc_divw(iRegI dst, iRegI src1, iRegI src2) %{\n+  enc_class riscv_enc_divw(iRegI dst, iRegI src1, iRegI src2) %{\n@@ -2492,1 +2492,1 @@\n-  enc_class riscv64_enc_div(iRegI dst, iRegI src1, iRegI src2) %{\n+  enc_class riscv_enc_div(iRegI dst, iRegI src1, iRegI src2) %{\n@@ -2500,1 +2500,1 @@\n-  enc_class riscv64_enc_modw(iRegI dst, iRegI src1, iRegI src2) %{\n+  enc_class riscv_enc_modw(iRegI dst, iRegI src1, iRegI src2) %{\n@@ -2508,1 +2508,1 @@\n-  enc_class riscv64_enc_mod(iRegI dst, iRegI src1, iRegI src2) %{\n+  enc_class riscv_enc_mod(iRegI dst, iRegI src1, iRegI src2) %{\n@@ -2516,1 +2516,1 @@\n-  enc_class riscv64_enc_tail_call(iRegP jump_target) %{\n+  enc_class riscv_enc_tail_call(iRegP jump_target) %{\n@@ -2523,1 +2523,1 @@\n-  enc_class riscv64_enc_tail_jmp(iRegP jump_target) %{\n+  enc_class riscv_enc_tail_jmp(iRegP jump_target) %{\n@@ -2534,1 +2534,1 @@\n-  enc_class riscv64_enc_rethrow() %{\n+  enc_class riscv_enc_rethrow() %{\n@@ -2539,1 +2539,1 @@\n-  enc_class riscv64_enc_ret() %{\n+  enc_class riscv_enc_ret() %{\n@@ -2598,1 +2598,1 @@\n-\/\/           (the latter is true on Intel but is it false on RISCV64?)\n+\/\/           (the latter is true on Intel but is it false on RISCV?)\n@@ -3544,1 +3544,1 @@\n-\/\/ RISCV64 opto stubs need to write to the pc slot in the thread anchor\n+\/\/ RISCV opto stubs need to write to the pc slot in the thread anchor\n@@ -4697,1 +4697,1 @@\n-  ins_encode(riscv64_enc_li_imm(dst, src));\n+  ins_encode(riscv_enc_li_imm(dst, src));\n@@ -4710,1 +4710,1 @@\n-  ins_encode(riscv64_enc_li_imm(dst, src));\n+  ins_encode(riscv_enc_li_imm(dst, src));\n@@ -4723,1 +4723,1 @@\n-  ins_encode(riscv64_enc_mov_p(dst, con));\n+  ins_encode(riscv_enc_mov_p(dst, con));\n@@ -4736,1 +4736,1 @@\n-  ins_encode(riscv64_enc_mov_zero(dst));\n+  ins_encode(riscv_enc_mov_zero(dst));\n@@ -4749,1 +4749,1 @@\n-  ins_encode(riscv64_enc_mov_p1(dst));\n+  ins_encode(riscv_enc_mov_p1(dst));\n@@ -4761,1 +4761,1 @@\n-  ins_encode(riscv64_enc_mov_byte_map_base(dst));\n+  ins_encode(riscv_enc_mov_byte_map_base(dst));\n@@ -4774,1 +4774,1 @@\n-  ins_encode(riscv64_enc_mov_n(dst, con));\n+  ins_encode(riscv_enc_mov_n(dst, con));\n@@ -4787,1 +4787,1 @@\n-  ins_encode(riscv64_enc_mov_zero(dst));\n+  ins_encode(riscv_enc_mov_zero(dst));\n@@ -4800,1 +4800,1 @@\n-  ins_encode(riscv64_enc_mov_nk(dst, con));\n+  ins_encode(riscv_enc_mov_nk(dst, con));\n@@ -5144,1 +5144,1 @@\n-\/\/ respectively the RISCV64 hw load-reserve and store-conditional\n+\/\/ respectively the RISCV hw load-reserve and store-conditional\n@@ -5292,1 +5292,1 @@\n-  ins_encode(riscv64_enc_cmpxchgw(res, mem, oldval, newval));\n+  ins_encode(riscv_enc_cmpxchgw(res, mem, oldval, newval));\n@@ -5308,1 +5308,1 @@\n-  ins_encode(riscv64_enc_cmpxchg(res, mem, oldval, newval));\n+  ins_encode(riscv_enc_cmpxchg(res, mem, oldval, newval));\n@@ -5326,1 +5326,1 @@\n-  ins_encode(riscv64_enc_cmpxchg(res, mem, oldval, newval));\n+  ins_encode(riscv_enc_cmpxchg(res, mem, oldval, newval));\n@@ -5342,1 +5342,1 @@\n-  ins_encode(riscv64_enc_cmpxchgn(res, mem, oldval, newval));\n+  ins_encode(riscv_enc_cmpxchgn(res, mem, oldval, newval));\n@@ -5411,1 +5411,1 @@\n-  ins_encode(riscv64_enc_cmpxchgw_acq(res, mem, oldval, newval));\n+  ins_encode(riscv_enc_cmpxchgw_acq(res, mem, oldval, newval));\n@@ -5429,1 +5429,1 @@\n-  ins_encode(riscv64_enc_cmpxchg_acq(res, mem, oldval, newval));\n+  ins_encode(riscv_enc_cmpxchg_acq(res, mem, oldval, newval));\n@@ -5447,1 +5447,1 @@\n-  ins_encode(riscv64_enc_cmpxchg_acq(res, mem, oldval, newval));\n+  ins_encode(riscv_enc_cmpxchg_acq(res, mem, oldval, newval));\n@@ -5465,1 +5465,1 @@\n-  ins_encode(riscv64_enc_cmpxchgn_acq(res, mem, oldval, newval));\n+  ins_encode(riscv_enc_cmpxchgn_acq(res, mem, oldval, newval));\n@@ -6697,1 +6697,1 @@\n-  ins_encode(riscv64_enc_divw(dst, src1, src2));\n+  ins_encode(riscv_enc_divw(dst, src1, src2));\n@@ -6719,1 +6719,1 @@\n-  ins_encode(riscv64_enc_div(dst, src1, src2));\n+  ins_encode(riscv_enc_div(dst, src1, src2));\n@@ -6742,1 +6742,1 @@\n-  ins_encode(riscv64_enc_modw(dst, src1, src2));\n+  ins_encode(riscv_enc_modw(dst, src1, src2));\n@@ -6753,1 +6753,1 @@\n-  ins_encode(riscv64_enc_mod(dst, src1, src2));\n+  ins_encode(riscv_enc_mod(dst, src1, src2));\n@@ -8666,1 +8666,1 @@\n-  ins_encode(riscv64_enc_j(lbl));\n+  ins_encode(riscv_enc_j(lbl));\n@@ -9616,1 +9616,1 @@\n-  ins_encode(riscv64_enc_far_cmpULtGe_imm0_branch(cmp, op1, lbl));\n+  ins_encode(riscv_enc_far_cmpULtGe_imm0_branch(cmp, op1, lbl));\n@@ -9631,1 +9631,1 @@\n-  ins_encode(riscv64_enc_far_cmpULtGe_imm0_branch(cmp, op1, lbl));\n+  ins_encode(riscv_enc_far_cmpULtGe_imm0_branch(cmp, op1, lbl));\n@@ -9715,1 +9715,1 @@\n-  ins_encode(riscv64_enc_far_cmpULtGe_imm0_branch(cmp, op1, lbl));\n+  ins_encode(riscv_enc_far_cmpULtGe_imm0_branch(cmp, op1, lbl));\n@@ -9730,1 +9730,1 @@\n-  ins_encode(riscv64_enc_far_cmpULtGe_imm0_branch(cmp, op1, lbl));\n+  ins_encode(riscv_enc_far_cmpULtGe_imm0_branch(cmp, op1, lbl));\n@@ -9953,2 +9953,2 @@\n-  ins_encode( riscv64_enc_java_static_call(meth),\n-              riscv64_enc_call_epilog );\n+  ins_encode(riscv_enc_java_static_call(meth),\n+             riscv_enc_call_epilog);\n@@ -9975,2 +9975,2 @@\n-  ins_encode( riscv64_enc_java_dynamic_call(meth),\n-              riscv64_enc_call_epilog );\n+  ins_encode(riscv_enc_java_dynamic_call(meth),\n+             riscv_enc_call_epilog);\n@@ -9994,1 +9994,1 @@\n-  ins_encode( riscv64_enc_java_to_runtime(meth) );\n+  ins_encode(riscv_enc_java_to_runtime(meth));\n@@ -10011,1 +10011,1 @@\n-  ins_encode( riscv64_enc_java_to_runtime(meth) );\n+  ins_encode(riscv_enc_java_to_runtime(meth));\n@@ -10028,1 +10028,1 @@\n-  ins_encode( riscv64_enc_java_to_runtime(meth) );\n+  ins_encode(riscv_enc_java_to_runtime(meth));\n@@ -10049,1 +10049,1 @@\n-  ins_encode(riscv64_enc_partial_subtype_check(sub, super, tmp, result));\n+  ins_encode(riscv_enc_partial_subtype_check(sub, super, tmp, result));\n@@ -10065,1 +10065,1 @@\n-  ins_encode(riscv64_enc_partial_subtype_check(sub, super, tmp, result));\n+  ins_encode(riscv_enc_partial_subtype_check(sub, super, tmp, result));\n@@ -10456,1 +10456,1 @@\n-  ins_encode(riscv64_enc_fast_lock(object, box, tmp1, tmp2));\n+  ins_encode(riscv_enc_fast_lock(object, box, tmp1, tmp2));\n@@ -10470,1 +10470,1 @@\n-  ins_encode(riscv64_enc_fast_unlock(object, box, tmp1, tmp2));\n+  ins_encode(riscv_enc_fast_unlock(object, box, tmp1, tmp2));\n@@ -10487,1 +10487,1 @@\n-  ins_encode(riscv64_enc_tail_call(jump_target));\n+  ins_encode(riscv_enc_tail_call(jump_target));\n@@ -10500,1 +10500,1 @@\n-  ins_encode(riscv64_enc_tail_jmp(jump_target));\n+  ins_encode(riscv_enc_tail_jmp(jump_target));\n@@ -10532,1 +10532,1 @@\n-  ins_encode( riscv64_enc_rethrow() );\n+  ins_encode(riscv_enc_rethrow());\n@@ -10546,1 +10546,1 @@\n-  ins_encode(riscv64_enc_ret());\n+  ins_encode(riscv_enc_ret());\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":77,"deletions":77,"binary":false,"changes":154,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-    \/\/ we don't expect any arg reg save area so riscv64 asserts that\n+    \/\/ we don't expect any arg reg save area so riscv asserts that\n@@ -688,1 +688,1 @@\n-  assert(regs2 == NULL, \"not needed on riscv64\");\n+  assert(regs2 == NULL, \"not needed on riscv\");\n@@ -2202,1 +2202,1 @@\n-\/\/ RISCV64 needs two words for RA (return address) and FP (frame pointer).\n+\/\/ RISCV needs two words for RA (return address) and FP (frame pointer).\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-    address riscv64_entry = __ pc();\n+    address riscv_entry = __ pc();\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 2020, 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -257,1 +257,1 @@\n-  \/\/ riscv64 cache line size is 64 bytes, but we want to limit alignment loss.\n+  \/\/ riscv cache line size is 64 bytes, but we want to limit alignment loss.\n","filename":"src\/hotspot\/cpu\/riscv\/vtableStubs_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -43,3 +43,0 @@\n-class Thread;\n-extern __thread Thread *riscv64_currentThread;\n-\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/globals_linux_riscv.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -47,3 +47,0 @@\n-public:\n-\n-  static Thread *riscv64_get_thread_helper();\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/thread_linux_riscv.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"}]}