{"files":[{"patch":"@@ -102,3 +102,0 @@\n-\/\/ link rigster\n-REGISTER_DECLARATION(Register, lr,        x1);\n-\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -110,2 +110,2 @@\n-  __ la_patchable(lr, RuntimeAddress(Runtime1::entry_for(stub_id)), off);\n-  __ jalr(lr, lr, off);\n+  __ la_patchable(ra, RuntimeAddress(Runtime1::entry_for(stub_id)), off);\n+  __ jalr(ra, ra, off);\n@@ -256,1 +256,1 @@\n-  __ la(lr, _continuation);\n+  __ la(ra, _continuation);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_CodeStubs_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -233,1 +233,1 @@\n-  map_register(i, x1);  r1_opr  = LIR_OprFact::single_cpu(i); i++;  \/\/ lr\n+  map_register(i, x1);  r1_opr  = LIR_OprFact::single_cpu(i); i++;  \/\/ ra\n","filename":"src\/hotspot\/cpu\/riscv\/c1_FrameMap_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -422,1 +422,1 @@\n-      \/\/ exception pc (lr) are dead.\n+      \/\/ exception pc (ra) are dead.\n@@ -523,1 +523,1 @@\n-  __ sd(lr, Address(sp));\n+  __ sd(ra, Address(sp));\n@@ -526,1 +526,1 @@\n-  __ call_VM_leaf(CAST_FROM_FN_PTR(address, SharedRuntime::exception_handler_for_return_address), xthread, lr);\n+  __ call_VM_leaf(CAST_FROM_FN_PTR(address, SharedRuntime::exception_handler_for_return_address), xthread, ra);\n@@ -537,2 +537,2 @@\n-  \/\/ lr has been destroyed by the call\n-  __ ld(lr, Address(sp));\n+  \/\/ ra has been destroyed by the call\n+  __ ld(ra, Address(sp));\n@@ -541,1 +541,1 @@\n-  __ mv(x13, lr);\n+  __ mv(x13, ra);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_Runtime1_riscv.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -268,1 +268,1 @@\n-    \/\/ LR is live.  It must be saved around calls.\n+    \/\/ RA is live.  It must be saved around calls.\n@@ -434,2 +434,2 @@\n-  \/\/ LR is free here, so we can use it to hold the byte_map_base.\n-  const Register byte_map_base = lr;\n+  \/\/ RA is free here, so we can use it to hold the byte_map_base.\n+  const Register byte_map_base = ra;\n@@ -466,2 +466,2 @@\n-  \/\/ Reuse LR to hold buffer_addr\n-  const Register buffer_addr = lr;\n+  \/\/ Reuse RA to hold buffer_addr\n+  const Register buffer_addr = ra;\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/g1\/g1BarrierSetAssembler_riscv.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  \/\/ LR is live. It must be saved around calls.\n+  \/\/ RA is live. It must be saved around calls.\n@@ -250,1 +250,1 @@\n-  __ jalr(lr, t0, offset);\n+  __ jalr(ra, t0, offset);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-  { 0x000fffff, 0x000280e7, \"jalr   lr, imm3(t0)    \"},\n+  { 0x000fffff, 0x000280e7, \"jalr   ra, imm3(t0)    \"},\n@@ -107,1 +107,1 @@\n-    intptr_t *sp; intptr_t *fp; address lr; address pc;\n+    intptr_t *sp; intptr_t *fp; address ra; address pc;\n@@ -131,1 +131,1 @@\n-  new_frame->lr = frame.pc();\n+  new_frame->ra = frame.pc();\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetNMethod_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -286,1 +286,1 @@\n-      __ li(lr, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_strong_narrow);\n+      __ li(ra, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_strong_narrow);\n@@ -288,1 +288,1 @@\n-      __ li(lr, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_strong);\n+      __ li(ra, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_strong);\n@@ -292,1 +292,1 @@\n-      __ li(lr, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_weak_narrow);\n+      __ li(ra, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_weak_narrow);\n@@ -294,1 +294,1 @@\n-      __ li(lr, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_weak);\n+      __ li(ra, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_weak);\n@@ -299,1 +299,1 @@\n-    __ li(lr, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_weak);\n+    __ li(ra, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_weak);\n@@ -301,1 +301,1 @@\n-  __ jalr(lr);\n+  __ jalr(ra);\n@@ -682,1 +682,1 @@\n-      __ li(lr, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_strong);\n+      __ li(ra, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_strong);\n@@ -685,1 +685,1 @@\n-        __ li(lr, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_strong_narrow);\n+        __ li(ra, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_strong_narrow);\n@@ -687,1 +687,1 @@\n-        __ li(lr, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_strong);\n+        __ li(ra, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_strong);\n@@ -693,1 +693,1 @@\n-      __ li(lr, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_weak_narrow);\n+      __ li(ra, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_weak_narrow);\n@@ -695,1 +695,1 @@\n-      __ li(lr, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_weak);\n+      __ li(ra, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_weak);\n@@ -700,1 +700,1 @@\n-    __ li(lr, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_phantom);\n+    __ li(ra, (int64_t)(uintptr_t)ShenandoahRuntime::load_reference_barrier_phantom);\n@@ -702,1 +702,1 @@\n-  __ jalr(lr);\n+  __ jalr(ra);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -377,1 +377,1 @@\n-  push_reg(RegSet::of(lr, t0, t1, c_rarg0), sp);\n+  push_reg(RegSet::of(ra, t0, t1, c_rarg0), sp);\n@@ -392,1 +392,1 @@\n-  pop_reg(RegSet::of(lr, t0, t1, c_rarg0), sp);\n+  pop_reg(RegSet::of(ra, t0, t1, c_rarg0), sp);\n@@ -411,1 +411,1 @@\n-  push_reg(RegSet::of(lr, t0, t1, c_rarg0), sp);\n+  push_reg(RegSet::of(ra, t0, t1, c_rarg0), sp);\n@@ -431,1 +431,1 @@\n-  pop_reg(RegSet::of(lr, t0, t1, c_rarg0), sp);\n+  pop_reg(RegSet::of(ra, t0, t1, c_rarg0), sp);\n@@ -2731,1 +2731,1 @@\n-                      RegSet::range(x28, x31) + lr - thread;\n+                      RegSet::range(x28, x31) + ra - thread;\n@@ -2774,1 +2774,1 @@\n-  assert(framesize >= 2, \"framesize must include space for FP\/LR\");\n+  assert(framesize >= 2, \"framesize must include space for FP\/RA\");\n@@ -2778,1 +2778,1 @@\n-  sd(lr, Address(sp, framesize - wordSize));\n+  sd(ra, Address(sp, framesize - wordSize));\n@@ -2784,1 +2784,1 @@\n-  assert(framesize >= 2, \"framesize must include space for FP\/LR\");\n+  assert(framesize >= 2, \"framesize must include space for FP\/RA\");\n@@ -2787,1 +2787,1 @@\n-  ld(lr, Address(sp, framesize - wordSize));\n+  ld(ra, Address(sp, framesize - wordSize));\n@@ -2798,1 +2798,1 @@\n-    enter();   \/\/ LR and FP are live.\n+    enter();   \/\/ RA and FP are live.\n@@ -2924,1 +2924,1 @@\n-\/\/   branch (LR still points to the call site above)\n+\/\/   branch (RA still points to the call site above)\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    sd(lr, Address(sp, wordSize));\n+    sd(ra, Address(sp, wordSize));\n@@ -65,1 +65,1 @@\n-    ld(lr, Address(sp, -wordSize));\n+    ld(ra, Address(sp, -wordSize));\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -256,1 +256,1 @@\n-      Assembler::patch(pInsn, 11, 7, lr->encoding()); \/\/ Rd must be x1, need lr\n+      Assembler::patch(pInsn, 11, 7, ra->encoding()); \/\/ Rd must be x1, need ra\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -180,1 +180,0 @@\n-REGISTER_DEFINITION(Register, lr);\n","filename":"src\/hotspot\/cpu\/riscv\/register_definitions_riscv.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-reg_def R1      ( SOC, SOC, Op_RegI, 1,  x1->as_VMReg()         ); \/\/ lr\n+reg_def R1      ( SOC, SOC, Op_RegI, 1,  x1->as_VMReg()         ); \/\/ ra\n@@ -452,1 +452,1 @@\n-    R1,  R1_H,  \/\/ lr\n+    R1,  R1_H,  \/\/ ra\n@@ -635,1 +635,1 @@\n-    R1,                       \/\/ lr\n+    R1,                       \/\/ ra\n@@ -645,1 +645,1 @@\n-    R1,  R1_H,                \/\/ lr\n+    R1,  R1_H,                \/\/ ra\n@@ -746,1 +746,1 @@\n-reg_class lr_reg(\n+reg_class ra_reg(\n@@ -1280,1 +1280,1 @@\n-  st->print(\"sd  lr, [sp, #%d]\", - wordSize);\n+  st->print(\"sd  ra, [sp, #%d]\", - wordSize);\n@@ -1372,1 +1372,1 @@\n-    st->print(\"ld  lr, [sp,#%d]\\n\\t\", (2 * wordSize));\n+    st->print(\"ld  ra, [sp,#%d]\\n\\t\", (2 * wordSize));\n@@ -1377,1 +1377,1 @@\n-    st->print(\"ld  lr, [sp,#%d]\\n\\t\", - 2 * wordSize);\n+    st->print(\"ld  ra, [sp,#%d]\\n\\t\", - 2 * wordSize);\n@@ -2467,1 +2467,1 @@\n-    \/\/ ret addr has been popped into lr\n+    \/\/ ret addr has been popped into ra\n@@ -2469,1 +2469,1 @@\n-    __ mv(x13, lr);\n+    __ mv(x13, ra);\n@@ -10380,1 +10380,1 @@\n-\/\/ epilog node loads ret address into lr as part of frame pop\n+\/\/ epilog node loads ret address into ra as part of frame pop\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -227,1 +227,1 @@\n-  \/\/ Account for saved fp and lr\n+  \/\/ Account for saved fp and ra\n@@ -350,1 +350,1 @@\n-  __ mv(c_rarg1, lr);\n+  __ mv(c_rarg1, ra);\n@@ -1501,1 +1501,1 @@\n-  const Register tmp      = lr;\n+  const Register tmp      = ra;\n@@ -2082,1 +2082,1 @@\n-  __ ld(lr, Address(sp, wordSize));\n+  __ ld(ra, Address(sp, wordSize));\n@@ -2084,1 +2084,1 @@\n-  \/\/ LR should now be the return address to the caller (3)\n+  \/\/ RA should now be the return address to the caller (3)\n@@ -2123,1 +2123,1 @@\n-  __ ld(lr, Address(x12, 0));          \/\/ Load pc\n+  __ ld(ra, Address(x12, 0));          \/\/ Load pc\n@@ -2135,1 +2135,1 @@\n-  __ ld(lr, Address(x12));\n+  __ ld(ra, Address(x12));\n@@ -2192,1 +2192,1 @@\n-\/\/ Riscv64 needs two words for LR (return address) and FP (frame pointer).\n+\/\/ Riscv64 needs two words for RA (return address) and FP (frame pointer).\n@@ -2215,1 +2215,1 @@\n-  \/\/ Push self-frame.  We get here with a return address in LR\n+  \/\/ Push self-frame.  We get here with a return address in RA\n@@ -2219,1 +2219,1 @@\n-  __ sd(lr, Address(sp, wordSize));\n+  __ sd(ra, Address(sp, wordSize));\n@@ -2292,1 +2292,1 @@\n-  __ ld(lr, sp, wordSize);\n+  __ ld(ra, sp, wordSize);\n@@ -2294,1 +2294,1 @@\n-  \/\/ LR should now be the return address to the caller (3) frame\n+  \/\/ RA should now be the return address to the caller (3) frame\n@@ -2338,1 +2338,1 @@\n-  __ ld(lr, Address(x12, 0));        \/\/ Save return address\n+  __ ld(ra, Address(x12, 0));        \/\/ Save return address\n@@ -2349,1 +2349,1 @@\n-  __ ld(lr, Address(x12, 0));        \/\/ save final return address\n+  __ ld(ra, Address(x12, 0));        \/\/ save final return address\n@@ -2666,1 +2666,1 @@\n-  __ sd(lr, Address(sp, wordSize));\n+  __ sd(ra, Address(sp, wordSize));\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-  \/\/ we save x1 (lr) as the return PC at the base of the frame and\n+  \/\/ we save x1 (ra) as the return PC at the base of the frame and\n@@ -152,1 +152,1 @@\n-  \/\/  -1 [ saved lr       (x1)  ]\n+  \/\/  -1 [ saved ra       (x1)  ]\n@@ -447,1 +447,1 @@\n-  \/\/ NOTE: At entry of this stub, exception-pc must be in LR !!\n+  \/\/ NOTE: At entry of this stub, exception-pc must be in RA !!\n@@ -456,1 +456,1 @@\n-    \/\/ Upon entry, LR points to the return address returning into\n+    \/\/ Upon entry, RA points to the return address returning into\n@@ -480,1 +480,1 @@\n-    \/\/ in x11. n.b. the caller pc is in lr, unlike x86 where it is on\n+    \/\/ in x11. n.b. the caller pc is in ra, unlike x86 where it is on\n@@ -482,2 +482,2 @@\n-    __ mv(c_rarg1, lr);\n-    \/\/ lr will be trashed by the VM call so we move it to x9\n+    __ mv(c_rarg1, ra);\n+    \/\/ ra will be trashed by the VM call so we move it to x9\n@@ -486,1 +486,1 @@\n-    __ mv(x9, lr);\n+    __ mv(x9, ra);\n@@ -491,1 +491,1 @@\n-    \/\/ we should not really care that lr is no longer the callee\n+    \/\/ we should not really care that ra is no longer the callee\n@@ -496,2 +496,2 @@\n-    \/\/ Java method. So, we restore lr here to satisfy that assert.\n-    __ mv(lr, x9);\n+    \/\/ Java method. So, we restore ra here to satisfy that assert.\n+    __ mv(ra, x9);\n@@ -533,1 +533,1 @@\n-  \/\/    [tos + 2]: saved lr\n+  \/\/    [tos + 2]: saved ra\n@@ -590,1 +590,1 @@\n-    __ mv(c_rarg1, lr);             \/\/ pass return address\n+    __ mv(c_rarg1, ra);             \/\/ pass return address\n@@ -2403,1 +2403,1 @@\n-    __ set_last_Java_frame(sp, fp, lr, t0);\n+    __ set_last_Java_frame(sp, fp, ra, t0);\n@@ -2430,1 +2430,1 @@\n-    __ ld(lr, Address(sp, wordSize * 2));\n+    __ ld(ra, Address(sp, wordSize * 2));\n@@ -2831,1 +2831,1 @@\n-    __ enter(); \/\/ Save FP and LR before call\n+    __ enter(); \/\/ Save FP and RA before call\n@@ -2835,1 +2835,1 @@\n-    \/\/ lr and fp are already in place\n+    \/\/ ra and fp are already in place\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-  __ sd(lr, Address(sp, 0));\n+  __ sd(ra, Address(sp, 0));\n@@ -105,2 +105,2 @@\n-  \/\/ Restore LR\n-  __ ld(lr, Address(sp, 0));\n+  \/\/ Restore ra\n+  __ ld(ra, Address(sp, 0));\n@@ -163,1 +163,1 @@\n-  \/\/ retaddr in lr\n+  \/\/ retaddr in ra\n@@ -167,1 +167,1 @@\n-  Register continuation = lr;\n+  Register continuation = ra;\n@@ -185,1 +185,1 @@\n-      __ mv(x9, lr);\n+      __ mv(x9, ra);\n@@ -199,1 +199,1 @@\n-      __ mv(x9, lr);\n+      __ mv(x9, ra);\n@@ -213,1 +213,1 @@\n-      __ mv(x9, lr);\n+      __ mv(x9, ra);\n@@ -227,1 +227,1 @@\n-      __ mv(x9, lr);\n+      __ mv(x9, ra);\n@@ -241,1 +241,1 @@\n-      __ mv(x9, lr);\n+      __ mv(x9, ra);\n@@ -255,1 +255,1 @@\n-      __ mv(x9, lr);\n+      __ mv(x9, ra);\n@@ -267,1 +267,1 @@\n-      __ mv(x9, lr);\n+      __ mv(x9, ra);\n@@ -735,1 +735,1 @@\n-\/\/      lr: return address\n+\/\/      ra: return address\n@@ -780,1 +780,1 @@\n-  __ sd(lr, Address(sp, 11 * wordSize));\n+  __ sd(ra, Address(sp, 11 * wordSize));\n@@ -782,1 +782,1 @@\n-  __ la(fp, Address(sp, 12 * wordSize)); \/\/ include lr & fp\n+  __ la(fp, Address(sp, 12 * wordSize)); \/\/ include ra & fp\n@@ -837,1 +837,1 @@\n-  \/\/ LR is live.  It must be saved around calls.\n+  \/\/ ra is live.  It must be saved around calls.\n@@ -1640,1 +1640,1 @@\n-  \/\/ lr: return address\/pc that threw exception\n+  \/\/ ra: return address\/pc that threw exception\n@@ -1643,1 +1643,1 @@\n-  \/\/ FIXME: There's no point saving LR here because VM calls don't trash it\n+  \/\/ FIXME: There's no point saving ra here because VM calls don't trash it\n@@ -1646,1 +1646,1 @@\n-  __ sd(lr, Address(sp, wordSize));             \/\/ save return address\n+  __ sd(ra, Address(sp, wordSize));             \/\/ save return address\n@@ -1649,1 +1649,1 @@\n-                        xthread, lr);\n+                        xthread, ra);\n@@ -1652,1 +1652,1 @@\n-  __ ld(lr, Address(sp, wordSize));             \/\/ restore return address\n+  __ ld(ra, Address(sp, wordSize));             \/\/ restore return address\n@@ -1656,1 +1656,1 @@\n-  __ mv(x13, lr);\n+  __ mv(x13, ra);\n@@ -1723,1 +1723,1 @@\n-  __ push_reg(lr);\n+  __ push_reg(ra);\n@@ -1730,1 +1730,1 @@\n-  __ pop_reg(lr);\n+  __ pop_reg(ra);\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -3243,1 +3243,1 @@\n-    __ ld(lr, Address(t0, 0));\n+    __ ld(ra, Address(t0, 0));\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -134,2 +134,2 @@\n-  \/\/ In compiled code, the stack banging is performed before LR\n-  \/\/ has been saved in the frame. LR is live, and SP and FP\n+  \/\/ In compiled code, the stack banging is performed before RA\n+  \/\/ has been saved in the frame. RA is live, and SP and FP\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/os_linux_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1283,0 +1283,1 @@\n+\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}