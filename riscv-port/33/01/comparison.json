{"files":[{"patch":"@@ -783,2 +783,1 @@\n-  \/\/ Return true if an addres is within the 48-bit Riscv64 address\n-  \/\/ space.\n+  \/\/ Return true if an address is within the 48-bit RISCV64 address space.\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3460,1 +3460,1 @@\n-\/\/ Riscv64 opto stubs need to write to the pc slot in the thread anchor\n+\/\/ RISCV64 opto stubs need to write to the pc slot in the thread anchor\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2200,1 +2200,1 @@\n-\/\/ Riscv64 needs two words for RA (return address) and FP (frame pointer).\n+\/\/ RISCV64 needs two words for RA (return address) and FP (frame pointer).\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-  snprintf(_cpu_desc, CPU_DETAILED_DESC_BUF_SIZE, \"RV64%s\", _features_string);\n+  snprintf(_cpu_desc, CPU_DETAILED_DESC_BUF_SIZE, \"RISCV64%s\", _features_string);\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import sun.jvm.hotspot.debugger.MachineDescriptionRiscv64;\n+import sun.jvm.hotspot.debugger.MachineDescriptionRISCV64;\n@@ -574,1 +574,1 @@\n-            machDesc = new MachineDescriptionRiscv64();\n+            machDesc = new MachineDescriptionRISCV64();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/HotSpotAgent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-public class MachineDescriptionRiscv64 extends MachineDescriptionTwosComplement implements MachineDescription {\n+public class MachineDescriptionRISCV64 extends MachineDescriptionTwosComplement implements MachineDescription {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/MachineDescriptionRISCV64.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/MachineDescriptionRiscv64.java","status":"renamed"},{"patch":"@@ -42,1 +42,1 @@\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedRiscv64CPU;\n+import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedRISCV64CPU;\n@@ -53,1 +53,1 @@\n-                new GenericTestCaseForUnsupportedRiscv64CPU(\n+                new GenericTestCaseForUnsupportedRISCV64CPU(\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/TestUseSHA1IntrinsicsOptionOnUnsupportedCPU.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedRiscv64CPU;\n+import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedRISCV64CPU;\n@@ -53,1 +53,1 @@\n-                new GenericTestCaseForUnsupportedRiscv64CPU(\n+                new GenericTestCaseForUnsupportedRISCV64CPU(\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/TestUseSHA256IntrinsicsOptionOnUnsupportedCPU.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedRiscv64CPU;\n+import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedRISCV64CPU;\n@@ -53,1 +53,1 @@\n-                new GenericTestCaseForUnsupportedRiscv64CPU(\n+                new GenericTestCaseForUnsupportedRISCV64CPU(\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/TestUseSHA512IntrinsicsOptionOnUnsupportedCPU.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedRiscv64CPU;\n+import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedRISCV64CPU;\n@@ -53,1 +53,1 @@\n-                new GenericTestCaseForUnsupportedRiscv64CPU(\n+                new GenericTestCaseForUnsupportedRISCV64CPU(\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/TestUseSHAOptionOnUnsupportedCPU.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * AArch64, Riscv64, PPC, S390x, and X86.\n+ * AArch64, RISCV64, PPC, S390x, and X86.\n@@ -47,1 +47,1 @@\n-        \/\/ Execute the test case on any CPU except AArch64, Riscv64, PPC, S390x, and X86.\n+        \/\/ Execute the test case on any CPU except AArch64, RISCV64, PPC, S390x, and X86.\n@@ -50,1 +50,1 @@\n-                              new OrPredicate(Platform::isRiscv64,\n+                              new OrPredicate(Platform::isRISCV64,\n@@ -63,1 +63,1 @@\n-        \/\/ Verify that on non-x86, non-Riscv64 and non-AArch64 CPU usage of SHA-related\n+        \/\/ Verify that on non-x86, non-RISCV64 and non-AArch64 CPU usage of SHA-related\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/testcases\/GenericTestCaseForOtherCPU.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * Generic test case for SHA-related options targeted to Riscv64 CPUs\n+ * Generic test case for SHA-related options targeted to RISCV64 CPUs\n@@ -38,1 +38,1 @@\n-public class GenericTestCaseForUnsupportedRiscv64CPU extends\n+public class GenericTestCaseForUnsupportedRISCV64CPU extends\n@@ -43,1 +43,1 @@\n-    public GenericTestCaseForUnsupportedRiscv64CPU(String optionName) {\n+    public GenericTestCaseForUnsupportedRISCV64CPU(String optionName) {\n@@ -47,2 +47,2 @@\n-    public GenericTestCaseForUnsupportedRiscv64CPU(String optionName, boolean checkUseSHA) {\n-        super(optionName, new AndPredicate(Platform::isRiscv64,\n+    public GenericTestCaseForUnsupportedRISCV64CPU(String optionName, boolean checkUseSHA) {\n+        super(optionName, new AndPredicate(Platform::isRISCV64,\n@@ -100,1 +100,1 @@\n-                            + \"Riscv64CPU even if set to true directly\", optionName),\n+                            + \"RISCV64CPU even if set to true directly\", optionName),\n@@ -107,1 +107,1 @@\n-                            + \"Riscv64CPU even if %s flag set to JVM\",\n+                            + \"RISCV64CPU even if %s flag set to JVM\",\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/testcases\/GenericTestCaseForUnsupportedRISCV64CPU.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/testcases\/GenericTestCaseForUnsupportedRiscv64CPU.java","status":"renamed"},{"patch":"@@ -136,1 +136,1 @@\n-            if (Platform.isWindows() || Platform.isARM() || Platform.isRiscv64()) {\n+            if (Platform.isWindows() || Platform.isARM() || Platform.isRISCV64()) {\n","filename":"test\/hotspot\/jtreg\/runtime\/NMT\/CheckForProperDetailStackTrace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -243,1 +243,1 @@\n-              Platform.isX86() || Platform.isAArch64() || Platform.isRiscv64())) ||\n+              Platform.isX86() || Platform.isAArch64() || Platform.isRISCV64())) ||\n","filename":"test\/hotspot\/jtreg\/runtime\/ReservedStack\/ReservedStackTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,2 +55,2 @@\n-            Events.assertField(event, \"cpu\").containsAny(\"Intel\", \"AMD\", \"Unknown x86\", \"ARM\", \"PPC\", \"PowerPC\", \"AArch64\", \"Riscv64\", \"s390\");\n-            Events.assertField(event, \"description\").containsAny(\"Intel\", \"AMD\", \"Unknown x86\", \"ARM\", \"PPC\", \"PowerPC\", \"AArch64\", \"Riscv64\", \"s390\");\n+            Events.assertField(event, \"cpu\").containsAny(\"Intel\", \"AMD\", \"Unknown x86\", \"ARM\", \"PPC\", \"PowerPC\", \"AArch64\", \"RISCV64\", \"s390\");\n+            Events.assertField(event, \"description\").containsAny(\"Intel\", \"AMD\", \"Unknown x86\", \"ARM\", \"PPC\", \"PowerPC\", \"AArch64\", \"RISCV64\", \"s390\");\n","filename":"test\/jdk\/jdk\/jfr\/event\/os\/TestCPUInformation.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-        ARCH(\"isAArch64\", \"isARM\", \"isRiscv64\", \"isPPC\", \"isS390x\", \"isX64\", \"isX86\"),\n+        ARCH(\"isAArch64\", \"isARM\", \"isRISCV64\", \"isPPC\", \"isS390x\", \"isX64\", \"isX86\"),\n","filename":"test\/lib-test\/jdk\/test\/lib\/TestMutuallyExclusivePlatformPredicates.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -198,1 +198,1 @@\n-    public static boolean isRiscv64() {\n+    public static boolean isRISCV64() {\n","filename":"test\/lib\/jdk\/test\/lib\/Platform.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}