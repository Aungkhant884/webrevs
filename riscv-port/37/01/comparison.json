{"files":[{"patch":"@@ -33,1 +33,1 @@\n-#define registerSize 64\n+#define XLEN 64\n@@ -1260,0 +1260,1 @@\n+  #include \"assembler_riscv_b.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_RISCV_ASSEMBLER_RISCV_B_HPP\n+#define CPU_RISCV_ASSEMBLER_RISCV_B_HPP\n+\n+#define INSN(NAME, op, funct3, funct7)                  \\\n+  void NAME(Register Rd, Register Rs1, Register Rs2) {  \\\n+    unsigned insn = 0;                                  \\\n+    patch((address)&insn, 6,  0, op);                   \\\n+    patch((address)&insn, 14, 12, funct3);              \\\n+    patch((address)&insn, 31, 25, funct7);              \\\n+    patch_reg((address)&insn, 7, Rd);                   \\\n+    patch_reg((address)&insn, 15, Rs1);                 \\\n+    patch_reg((address)&insn, 20, Rs2);                 \\\n+    emit(insn);                                         \\\n+  }\n+\n+  INSN(add_uw, 0b0111011, 0b000, 0b0000100);\n+\n+#undef INSN\n+\n+#define INSN(NAME, op, funct3, funct12)                 \\\n+  void NAME(Register Rd, Register Rs1) {                \\\n+    unsigned insn = 0;                                  \\\n+    patch((address)&insn, 6, 0, op);                    \\\n+    patch((address)&insn, 14, 12, funct3);              \\\n+    patch((address)&insn, 31, 20, funct12);             \\\n+    patch_reg((address)&insn, 7, Rd);                   \\\n+    patch_reg((address)&insn, 15, Rs1);                 \\\n+    emit(insn);                                         \\\n+  }\n+\n+  INSN(sext_b, 0b0010011, 0b001, 0b011000000100);\n+  INSN(sext_h, 0b0010011, 0b001, 0b011000000101);\n+  INSN(zext_h, 0b0111011, 0b100, 0b000010000000);\n+\n+#undef INSN\n+\n+\/\/ RVB pseudo instructions\n+\/\/ zero extend word\n+void zext_w(Register Rd, Register Rs) {\n+  add_uw(Rd, Rs, zr);\n+}\n+\n+\n+#endif \/\/ CPU_RISCV_ASSEMBLER_RISCV_B_HPP\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv_b.hpp","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -67,2 +67,1 @@\n-          __ slli(t1, t1, registerSize - shift);\n-          __ srli(t1, t1, registerSize - shift);\n+          __ zero_extend(t1, t1, shift);\n@@ -82,2 +81,1 @@\n-          __ slli(t0, t0, registerSize - shift);\n-          __ srli(t0, t0, registerSize - shift);\n+          __ zero_extend(t0, t0, shift);\n@@ -206,2 +204,1 @@\n-            __ slli(t0, t0, registerSize - shift);\n-            __ srli(t0, t0, registerSize - shift);\n+            __ zero_extend(t0, t0, shift);\n@@ -226,2 +223,1 @@\n-            __ slli(t1, t1, registerSize - shift);\n-            __ srli(t1, t1, registerSize - shift);\n+            __ zero_extend(t1, t1, shift);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_arith_riscv.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -954,1 +954,1 @@\n-      __ zero_ext(dest->as_register(), src->as_register(), registerSize - 16); break; \/\/ 16: char size\n+      __ zero_extend(dest->as_register(), src->as_register(), 16); break;\n@@ -958,1 +958,1 @@\n-      __ sign_ext(dest->as_register(), src->as_register(), registerSize - 16); break; \/\/ 16: short size\n+      __ sign_extend(dest->as_register(), src->as_register(), 16); break;\n@@ -960,1 +960,1 @@\n-      __ sign_ext(dest->as_register(), src->as_register(), registerSize - 8); break;  \/\/ 8: byte size\n+      __ sign_extend(dest->as_register(), src->as_register(), 8); break;\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -822,2 +822,2 @@\n-          __ slli(tmp1, tmp1, registerSize - lh_header_size_msb);\n-          __ srli(tmp1, tmp1, registerSize - lh_header_size_width);\n+          __ slli(tmp1, tmp1, XLEN - lh_header_size_msb);\n+          __ srli(tmp1, tmp1, XLEN - lh_header_size_width);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_Runtime1_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -453,4 +453,4 @@\n-    slli(ch2, tmp6, registerSize - 24);\n-    srli(ch2, ch2, registerSize - 8); \/\/ pattern[m-2], 0x0000000b\n-    slli(ch1, tmp6, registerSize - 16);\n-    srli(ch1, ch1, registerSize - 8); \/\/ pattern[m-3], 0x0000000c\n+    slli(ch2, tmp6, XLEN - 24);\n+    srli(ch2, ch2, XLEN - 8); \/\/ pattern[m-2], 0x0000000b\n+    slli(ch1, tmp6, XLEN - 16);\n+    srli(ch1, ch1, XLEN - 8); \/\/ pattern[m-3], 0x0000000c\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -93,1 +93,2 @@\n-  product(bool, UseRVV, false, EXPERIMENTAL, \"Use RVV instructions\")\n+  product(bool, UseRVV, false, EXPERIMENTAL, \"Use RVV instructions\")             \\\n+  product(bool, UseRVB, false, EXPERIMENTAL, \"Use RVB instructions\")\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  sign_ext(result, result, registerSize - 8);\n+  sign_extend(result, result, 8);\n@@ -76,1 +76,1 @@\n-  zero_ext(result, result, registerSize - 16); \/\/ turncate upper 48 bits\n+  zero_extend(result, result, 16);\n@@ -80,1 +80,1 @@\n-  sign_ext(result, result, registerSize - 16); \/\/ sign-extend short\n+  sign_extend(result, result, 16);\n@@ -253,2 +253,2 @@\n-  slli(bytecode, bytecode, registerSize - (shift_count + BitsPerByte));\n-  srli(bytecode, bytecode, registerSize - BitsPerByte);\n+  slli(bytecode, bytecode, XLEN - (shift_count + BitsPerByte));\n+  srli(bytecode, bytecode, XLEN - BitsPerByte);\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -686,0 +686,4 @@\n+void MacroAssembler::zext_b(Register Rd, Register Rs) {\n+  andi(Rd, Rs, 0xFF);\n+}\n+\n@@ -1905,1 +1909,1 @@\n-    zero_ext(dst, src, 32); \/\/ clear upper 32 bits\n+    zero_extend(dst, src, 32);\n@@ -2222,1 +2226,1 @@\n-      clear_upper_bits(t0, 32);\n+      zero_extend(t0, t0, 32);\n@@ -2265,1 +2269,1 @@\n-    zero_ext(mask, mask, registerSize - 16);\n+    zero_extend(mask, mask, 16);\n@@ -2318,1 +2322,1 @@\n-      sign_ext(result, result, registerSize - 8);\n+      sign_extend(result, result, 8);\n@@ -2321,1 +2325,1 @@\n-      sign_ext(result, result, registerSize - 16);\n+      sign_extend(result, result, 16);\n@@ -2451,1 +2455,1 @@\n-  clear_upper_bits(prev, 32);                                                        \\\n+  zero_extend(prev, prev, 32);                                                       \\\n@@ -2830,1 +2834,1 @@\n-  clear_upper_bits(dst, 32); \/\/ clear upper 32bit, do not sign extend.\n+  zero_extend(dst, dst, 32);\n@@ -2844,1 +2848,1 @@\n-  clear_upper_bits(dst, 32); \/\/ clear upper 32bit, do not sign extend.\n+  zero_extend(dst, dst, 32);\n@@ -3053,1 +3057,1 @@\n-  zero_ext(k, k, 32);\n+  zero_extend(k, k, 32);\n@@ -3430,3 +3434,17 @@\n-void MacroAssembler::zero_ext(Register dst, Register src, int clear_bits) {\n-  slli(dst, src, clear_bits);\n-  srli(dst, dst, clear_bits);\n+void MacroAssembler::zero_extend(Register dst, Register src, int bits) {\n+  if (UseRVB) {\n+    if (bits == 16) {\n+      zext_h(dst, src);\n+      return;\n+    } else if (bits == 32) {\n+      zext_w(dst, src);\n+      return;\n+    }\n+  }\n+\n+  if (bits == 8) {\n+    zext_b(dst, src);\n+  } else {\n+    slli(dst, src, XLEN - bits);\n+    srli(dst, dst, XLEN - bits);\n+  }\n@@ -3435,3 +3453,17 @@\n-void MacroAssembler::sign_ext(Register dst, Register src, int clear_bits) {\n-  slli(dst, src, clear_bits);\n-  srai(dst, dst, clear_bits);\n+void MacroAssembler::sign_extend(Register dst, Register src, int bits) {\n+  if (UseRVB) {\n+    if (bits == 8) {\n+      sext_b(dst, src);\n+      return;\n+    } else if (bits == 16) {\n+      sext_h(dst, src);\n+      return;\n+    }\n+  }\n+\n+  if (bits == 32) {\n+    sext_w(dst, src);\n+  } else {\n+    slli(dst, src, XLEN - bits);\n+    srai(dst, dst, XLEN - bits);\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":47,"deletions":15,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -405,1 +405,2 @@\n-  void sext_w(Register Rd, Register Rs);        \/\/ mv Rd[31:0], Rs[31:0]\n+  void sext_w(Register Rd, Register Rs);\n+  void zext_b(Register Rd, Register Rs);\n@@ -621,11 +622,0 @@\n-  void clear_upper_bits(Register r, unsigned upper_bits) {\n-    assert(upper_bits < 64, \"bit count to clear must be less than 64\");\n-\n-    int sig_bits = 64 - upper_bits; \/\/ significance bits\n-    if (sig_bits < 12) {\n-      andi(r, r, (1UL << sig_bits) - 1);\n-    } else {\n-      zero_ext(r, r, upper_bits);\n-    }\n-  }\n-\n@@ -728,1 +718,1 @@\n-        zero_ext(Rt, Rt, registerSize - 16);\n+        zero_extend(Rt, Rt, 16);\n@@ -731,1 +721,1 @@\n-        sign_ext(Rt, Rt, registerSize - 8);\n+        sign_extend(Rt, Rt, 8);\n@@ -734,1 +724,1 @@\n-        sign_ext(Rt, Rt, registerSize - 16);\n+        sign_extend(Rt, Rt, 16);\n@@ -752,2 +742,2 @@\n-  void zero_ext(Register dst, Register src, int clear_bits);\n-  void sign_ext(Register dst, Register src, int clear_bits);\n+  void zero_extend(Register dst, Register src, int bits);\n+  void sign_extend(Register dst, Register src, int bits);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":7,"deletions":17,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1515,4 +1515,5 @@\n-          __ mv(as_Register(Matcher::_regEncode[dst_lo]),\n-                as_Register(Matcher::_regEncode[src_lo]));\n-          if (!is64 && this->ideal_reg() != Op_RegI) \/\/ zero extended for narrow oop or klass\n-            __ clear_upper_bits(as_Register(Matcher::_regEncode[dst_lo]), 32);\n+          if (!is64 && this->ideal_reg() != Op_RegI) { \/\/ zero extended for narrow oop or klass\n+            __ zero_extend(as_Register(Matcher::_regEncode[dst_lo]), as_Register(Matcher::_regEncode[src_lo]), 32);\n+          } else {\n+            __ mv(as_Register(Matcher::_regEncode[dst_lo]), as_Register(Matcher::_regEncode[src_lo]));\n+          }\n@@ -7866,2 +7867,1 @@\n-  format %{ \"slli  $dst, $src, 32\\t# ui2l\\n\\t\"\n-            \"srli  $dst, $dst, 32\\t# ui2l, #@convUI2L_reg_reg\" %}\n+  format %{ \"zero_extend $dst, $src, 32\\t# ui2l, #@convUI2L_reg_reg\" %}\n@@ -7870,1 +7870,1 @@\n-    __ zero_ext(as_Register($dst$$reg), as_Register($src$$reg), 32);\n+    __ zero_extend(as_Register($dst$$reg), as_Register($src$$reg), 32);\n@@ -8020,5 +8020,2 @@\n-  ins_cost(ALU_COST);\n-  format %{ \"mv  $dst,  $src\\t# ptr -> int\\n\\t\"\n-            \"slli $dst, $dst, 32\\n\\t\"\n-            \"srli $dst, $dst, 32\\t#@convP2I\"\n-  %}\n+  ins_cost(ALU_COST * 2);\n+  format %{ \"zero_extend $dst, $src, 32\\t# ptr -> int, #@convP2I\" %}\n@@ -8027,2 +8024,1 @@\n-    __ mv($dst$$Register, $src$$Register);\n-    __ clear_upper_bits($dst$$Register, 32);\n+    __ zero_extend($dst$$Register, $src$$Register, 32);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1562,2 +1562,2 @@\n-    __ clear_upper_bits(src_pos, 32);\n-    __ clear_upper_bits(dst_pos, 32);\n+    __ zero_extend(src_pos, src_pos, 32);\n+    __ zero_extend(dst_pos, dst_pos, 32);\n@@ -1777,2 +1777,2 @@\n-    __ slli(t0_offset, lh, registerSize - lh_header_size_msb);          \/\/ left shift to remove 24 ~ 32;\n-    __ srli(t0_offset, t0_offset, registerSize - lh_header_size_width); \/\/ array_offset\n+    __ slli(t0_offset, lh, XLEN - lh_header_size_msb);          \/\/ left shift to remove 24 ~ 32;\n+    __ srli(t0_offset, t0_offset, XLEN - lh_header_size_width); \/\/ array_offset\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -370,1 +370,1 @@\n-  __ zero_ext(c_rarg2, x11, 32);\n+  __ zero_extend(c_rarg2, x11, 32);\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -487,2 +487,2 @@\n-  __ slli(flags, flags, registerSize - (ConstantPoolCacheEntry::tos_state_shift + ConstantPoolCacheEntry::tos_state_bits));\n-  __ srli(flags, flags, registerSize - ConstantPoolCacheEntry::tos_state_bits); \/\/ (1 << 5) - 4 --> 28~31==> flags:0~3\n+  __ slli(flags, flags, XLEN - (ConstantPoolCacheEntry::tos_state_shift + ConstantPoolCacheEntry::tos_state_bits));\n+  __ srli(flags, flags, XLEN - ConstantPoolCacheEntry::tos_state_bits); \/\/ (1 << 5) - 4 --> 28~31==> flags:0~3\n@@ -1574,1 +1574,1 @@\n-  __ zero_ext(x12, x11, 48);\n+  __ zero_extend(x12, x11, 16);\n@@ -1633,1 +1633,1 @@\n-      __ sign_ext(x10, x10, registerSize - 32);\n+      __ sign_extend(x10, x10, 32);\n@@ -1642,1 +1642,1 @@\n-      __ sign_ext(x10, x10, registerSize - 8);\n+      __ sign_extend(x10, x10, 8);\n@@ -1645,1 +1645,1 @@\n-      __ zero_ext(x10, x10, registerSize - 16);\n+      __ zero_extend(x10, x10, 16);\n@@ -1648,1 +1648,1 @@\n-      __ sign_ext(x10, x10, registerSize - 16);\n+      __ sign_extend(x10, x10, 16);\n@@ -2448,3 +2448,3 @@\n-  __ slli(flags, raw_flags, registerSize - (ConstantPoolCacheEntry::tos_state_shift +\n-                                            ConstantPoolCacheEntry::tos_state_bits));\n-  __ srli(flags, flags, registerSize - ConstantPoolCacheEntry::tos_state_bits);\n+  __ slli(flags, raw_flags, XLEN - (ConstantPoolCacheEntry::tos_state_shift +\n+                                    ConstantPoolCacheEntry::tos_state_bits));\n+  __ srli(flags, flags, XLEN - ConstantPoolCacheEntry::tos_state_bits);\n@@ -2683,3 +2683,3 @@\n-  __ slli(flags, flags, registerSize - (ConstantPoolCacheEntry::tos_state_shift +\n-                                        ConstantPoolCacheEntry::tos_state_bits));\n-  __ srli(flags, flags, registerSize - ConstantPoolCacheEntry::tos_state_bits);\n+  __ slli(flags, flags, XLEN - (ConstantPoolCacheEntry::tos_state_shift +\n+                                ConstantPoolCacheEntry::tos_state_bits));\n+  __ srli(flags, flags, XLEN - ConstantPoolCacheEntry::tos_state_bits);\n@@ -3234,2 +3234,2 @@\n-  __ slli(t1, flags, registerSize - (ConstantPoolCacheEntry::tos_state_shift + ConstantPoolCacheEntry::tos_state_bits));\n-  __ srli(t1, t1, registerSize - ConstantPoolCacheEntry::tos_state_bits); \/\/ (1 << 5) - 4 --> 28~31==> t1:0~3\n+  __ slli(t1, flags, XLEN - (ConstantPoolCacheEntry::tos_state_shift + ConstantPoolCacheEntry::tos_state_bits));\n+  __ srli(t1, t1, XLEN - ConstantPoolCacheEntry::tos_state_bits); \/\/ (1 << 5) - 4 --> 28~31==> t1:0~3\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -119,0 +119,5 @@\n+  if (UseRVB && !(_features & CPU_B)) {\n+    warning(\"RVB is not supported on this CPU\");\n+    FLAG_SET_DEFAULT(UseRVB, false);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}