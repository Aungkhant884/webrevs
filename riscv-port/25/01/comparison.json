{"files":[{"patch":"@@ -956,2 +956,0 @@\n-  DEBUG_ONLY(int words_pushed = 0;)\n-\n@@ -959,5 +957,2 @@\n-  \/\/ Sp is x2, and zr is x0, which should not be pushed.\n-  \/\/ If the number of registers is odd, zr is used for stack alignment.Otherwise, it will be ignored.\n-  bitset &= ~ (1U << 2);\n-  bitset |= 0x1;\n-\n+  \/\/ Zr and sp (x0, x2) should not be pushed\n+  assert((bitset & 0b101) == 0, \"zr or sp is in bitset: %x\", bitset);\n@@ -971,1 +966,0 @@\n-  count &= ~1;  \/\/ Only push an even number of regs\n@@ -982,0 +976,2 @@\n+  \/\/ reserve one slot to align for odd count\n+  int offset = is_even(count) ? 0 : wordSize;\n@@ -984,1 +980,1 @@\n-    addi(stack, stack, - count * wordSize);\n+    addi(stack, stack, - count * wordSize - offset);\n@@ -987,1 +983,1 @@\n-    sd(as_Register(regs[i]), Address(stack, (count -1 - i) * wordSize));\n+    sd(as_Register(regs[i]), Address(stack, (count -1 - i) * wordSize + offset));\n@@ -1001,0 +997,2 @@\n+  \/\/ reserve one slot to align for odd count\n+  int offset = is_even(count) ? 0 : wordSize;\n@@ -1003,1 +1001,1 @@\n-    ld(as_Register(regs[i]), Address(stack, (count -1 - i) * wordSize));\n+    ld(as_Register(regs[i]), Address(stack, (count - 1 - i) * wordSize + offset));\n@@ -1008,1 +1006,1 @@\n-    addi(stack, stack, count * wordSize);\n+    addi(stack, stack, count * wordSize + offset);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1183,1 +1183,1 @@\n-  \/\/ for real runtime callouts it will be six instructions\n+  \/\/ for real runtime callouts it will be five instructions\n@@ -1188,1 +1188,0 @@\n-  \/\/   sd(zr, Address(sp))\n@@ -1195,1 +1194,1 @@\n-    return 12 * NativeInstruction::instruction_size;\n+    return 11 * NativeInstruction::instruction_size;\n@@ -2277,1 +2276,0 @@\n-      __ sd(zr, Address(sp));\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}