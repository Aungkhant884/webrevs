{"files":[{"patch":"@@ -202,1 +202,1 @@\n-                                         Register temp) {\n+                                         Register tmp) {\n@@ -212,2 +212,2 @@\n-    mv(temp, sp);\n-    last_java_sp = temp;\n+    mv(tmp, sp);\n+    last_java_sp = tmp;\n@@ -229,1 +229,1 @@\n-                                         Register temp) {\n+                                         Register tmp) {\n@@ -232,2 +232,2 @@\n-  la(temp, last_java_pc);\n-  sd(temp, Address(xthread, JavaThread::frame_anchor_offset() + JavaFrameAnchor::last_Java_pc_offset()));\n+  la(tmp, last_java_pc);\n+  sd(tmp, Address(xthread, JavaThread::frame_anchor_offset() + JavaFrameAnchor::last_Java_pc_offset()));\n@@ -235,1 +235,1 @@\n-  set_last_Java_frame(last_java_sp, last_java_fp, noreg, temp);\n+  set_last_Java_frame(last_java_sp, last_java_fp, noreg, tmp);\n@@ -241,1 +241,1 @@\n-                                         Register temp) {\n+                                         Register tmp) {\n@@ -243,1 +243,1 @@\n-    set_last_Java_frame(last_java_sp, last_java_fp, target(L), temp);\n+    set_last_Java_frame(last_java_sp, last_java_fp, target(L), tmp);\n@@ -247,1 +247,1 @@\n-    set_last_Java_frame(last_java_sp, last_java_fp, pc() \/* Patched later *\/, temp);\n+    set_last_Java_frame(last_java_sp, last_java_fp, pc() \/* Patched later *\/, tmp);\n@@ -1625,0 +1625,16 @@\n+\/\/ rotate right with shift bits\n+void MacroAssembler::ror_imm(Register dst, Register src, uint32_t shift, Register tmp)\n+{\n+  if (UseRVB) {\n+    rori(dst, src, shift);\n+    return;\n+  }\n+\n+  assert_different_registers(dst, tmp);\n+  assert_different_registers(src, tmp);\n+  assert(shift < 64, \"shift amount must be < 64\");\n+  slli(tmp, src, 64 - shift);\n+  srli(dst, src, shift);\n+  orr(dst, dst, tmp);\n+}\n+\n@@ -2059,1 +2075,1 @@\n-                                             Register scan_temp,\n+                                             Register scan_tmp,\n@@ -2062,2 +2078,2 @@\n-  assert_different_registers(recv_klass, intf_klass, scan_temp);\n-  assert_different_registers(method_result, intf_klass, scan_temp);\n+  assert_different_registers(recv_klass, intf_klass, scan_tmp);\n+  assert_different_registers(method_result, intf_klass, scan_tmp);\n@@ -2076,1 +2092,1 @@\n-  lwu(scan_temp, Address(recv_klass, Klass::vtable_length_offset()));\n+  lwu(scan_tmp, Address(recv_klass, Klass::vtable_length_offset()));\n@@ -2079,2 +2095,2 @@\n-  shadd(scan_temp, scan_temp, recv_klass, scan_temp, 3);\n-  add(scan_temp, scan_temp, vtable_base);\n+  shadd(scan_tmp, scan_tmp, recv_klass, scan_tmp, 3);\n+  add(scan_tmp, scan_tmp, vtable_base);\n@@ -2098,1 +2114,1 @@\n-  ld(method_result, Address(scan_temp, itableOffsetEntry::interface_offset_in_bytes()));\n+  ld(method_result, Address(scan_tmp, itableOffsetEntry::interface_offset_in_bytes()));\n@@ -2105,2 +2121,2 @@\n-  addi(scan_temp, scan_temp, scan_step);\n-  ld(method_result, Address(scan_temp, itableOffsetEntry::interface_offset_in_bytes()));\n+  addi(scan_tmp, scan_tmp, scan_step);\n+  ld(method_result, Address(scan_tmp, itableOffsetEntry::interface_offset_in_bytes()));\n@@ -2113,2 +2129,2 @@\n-    lwu(scan_temp, Address(scan_temp, itableOffsetEntry::offset_offset_in_bytes()));\n-    add(method_result, recv_klass, scan_temp);\n+    lwu(scan_tmp, Address(scan_tmp, itableOffsetEntry::offset_offset_in_bytes()));\n+    add(method_result, recv_klass, scan_tmp);\n@@ -2175,1 +2191,1 @@\n-                                         Register temp_reg,\n+                                         Register tmp_reg,\n@@ -2178,2 +2194,2 @@\n-  check_klass_subtype_fast_path(sub_klass, super_klass, temp_reg, &L_success, &L_failure, NULL);\n-  check_klass_subtype_slow_path(sub_klass, super_klass, temp_reg, noreg, &L_success, NULL);\n+  check_klass_subtype_fast_path(sub_klass, super_klass, tmp_reg, &L_success, &L_failure, NULL);\n+  check_klass_subtype_slow_path(sub_klass, super_klass, tmp_reg, noreg, &L_success, NULL);\n@@ -2513,1 +2529,1 @@\n-                                                   Register temp_reg,\n+                                                   Register tmp_reg,\n@@ -2518,1 +2534,1 @@\n-  assert_different_registers(sub_klass, super_klass, temp_reg);\n+  assert_different_registers(sub_klass, super_klass, tmp_reg);\n@@ -2521,1 +2537,1 @@\n-    assert(temp_reg != noreg, \"supply either a temp or a register offset\");\n+    assert(tmp_reg != noreg, \"supply either a temp or a register offset\");\n@@ -2553,2 +2569,2 @@\n-    lwu(temp_reg, super_check_offset_addr);\n-    super_check_offset = temp_reg;\n+    lwu(tmp_reg, super_check_offset_addr);\n+    super_check_offset = tmp_reg;\n@@ -2588,1 +2604,1 @@\n-                                Register temp) {\n+                                Register tmp) {\n@@ -2592,2 +2608,2 @@\n-  ld(temp, addr);\n-  beq(value, temp, Lexit);\n+  ld(tmp, addr);\n+  beq(value, tmp, Lexit);\n@@ -2602,2 +2618,2 @@\n-                                                   Register temp_reg,\n-                                                   Register temp2_reg,\n+                                                   Register tmp1_reg,\n+                                                   Register tmp2_reg,\n@@ -2606,3 +2622,3 @@\n-  assert_different_registers(sub_klass, super_klass, temp_reg);\n-  if (temp2_reg != noreg) {\n-    assert_different_registers(sub_klass, super_klass, temp_reg, temp2_reg, t0);\n+  assert_different_registers(sub_klass, super_klass, tmp1_reg);\n+  if (tmp2_reg != noreg) {\n+    assert_different_registers(sub_klass, super_klass, tmp1_reg, tmp2_reg, t0);\n@@ -2610,1 +2626,1 @@\n-#define IS_A_TEMP(reg) ((reg) == temp_reg || (reg) == temp2_reg)\n+#define IS_A_TEMP(reg) ((reg) == tmp1_reg || (reg) == tmp2_reg)\n@@ -2677,1 +2693,1 @@\n-  \/\/ Unspill the temp. registers:\n+  \/\/ Unspill the temp registers:\n@@ -3138,16 +3154,0 @@\n-\/\/ rotate right with shift bits\n-void MacroAssembler::ror_imm(Register dst, Register src, uint32_t shift, Register tmp)\n-{\n-  if (UseRVB) {\n-    rori(dst, src, shift);\n-    return;\n-  }\n-\n-  assert_different_registers(dst, tmp);\n-  assert_different_registers(src, tmp);\n-  assert(shift < 64, \"shift amount must be < 64\");\n-  slli(tmp, src, 64 - shift);\n-  srli(dst, src, shift);\n-  orr(dst, dst, tmp);\n-}\n-\n@@ -3791,1 +3791,1 @@\n-void MacroAssembler:: FLOATCVT##_safe(Register dst, FloatRegister src, Register temp) {          \\\n+void MacroAssembler:: FLOATCVT##_safe(Register dst, FloatRegister src, Register tmp) {           \\\n@@ -3795,5 +3795,5 @@\n-  frcsr(temp);                                                                                   \\\n-  andi(temp, temp, 0x1E);                                                                        \\\n-  beqz(temp, L_Okay);                                                                            \\\n-  FLOATEQ(temp, src, src);                                                                       \\\n-  bnez(temp, L_Okay);                                                                            \\\n+  frcsr(tmp);                                                                                    \\\n+  andi(tmp, tmp, 0x1E);                                                                          \\\n+  beqz(tmp, L_Okay);                                                                             \\\n+  FLOATEQ(tmp, src, src);                                                                        \\\n+  bnez(tmp, L_Okay);                                                                             \\\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":61,"deletions":61,"binary":false,"changes":122,"status":"modified"},{"patch":"@@ -139,3 +139,3 @@\n-  void set_last_Java_frame(Register last_java_sp, Register last_java_fp, address last_java_pc, Register temp);\n-  void set_last_Java_frame(Register last_java_sp, Register last_java_fp, Label &last_java_pc, Register temp);\n-  void set_last_Java_frame(Register last_java_sp, Register last_java_fp, Register last_java_pc,Register temp);\n+  void set_last_Java_frame(Register last_java_sp, Register last_java_fp, address last_java_pc, Register tmp);\n+  void set_last_Java_frame(Register last_java_sp, Register last_java_fp, Label &last_java_pc, Register tmp);\n+  void set_last_Java_frame(Register last_java_sp, Register last_java_fp, Register last_java_pc, Register tmp);\n@@ -251,1 +251,1 @@\n-                               Register scan_temp,\n+                               Register scan_tmp,\n@@ -291,1 +291,1 @@\n-  \/\/ No registers are killed, except temp_reg\n+  \/\/ No registers are killed, except tmp_reg\n@@ -294,1 +294,1 @@\n-                                     Register temp_reg,\n+                                     Register tmp_reg,\n@@ -302,1 +302,1 @@\n-  \/\/ The temp_reg and temp2_reg can be noreg, if no temps are avaliable.\n+  \/\/ The tmp1_reg and tmp2_reg can be noreg, if no temps are avaliable.\n@@ -306,2 +306,2 @@\n-                                     Register temp_reg,\n-                                     Register temp2_reg,\n+                                     Register tmp1_reg,\n+                                     Register tmp2_reg,\n@@ -313,1 +313,1 @@\n-                           Register temp_reg,\n+                           Register tmp_reg,\n@@ -540,1 +540,2 @@\n-  void andi(Register Rd, Register Rn, int64_t increment, Register temp = t0);\n+  void ror_imm(Register dst, Register src, uint32_t shift, Register tmp = t0);\n+  void andi(Register Rd, Register Rn, int64_t imm, Register tmp = t0);\n@@ -653,1 +654,0 @@\n-  void ror_imm(Register dst, Register src, uint32_t shift, Register tmp = t0);\n@@ -691,4 +691,4 @@\n-  void fcvt_w_s_safe(Register dst, FloatRegister src, Register temp = t0);\n-  void fcvt_l_s_safe(Register dst, FloatRegister src, Register temp = t0);\n-  void fcvt_w_d_safe(Register dst, FloatRegister src, Register temp = t0);\n-  void fcvt_l_d_safe(Register dst, FloatRegister src, Register temp = t0);\n+  void fcvt_w_s_safe(Register dst, FloatRegister src, Register tmp = t0);\n+  void fcvt_l_s_safe(Register dst, FloatRegister src, Register tmp = t0);\n+  void fcvt_w_d_safe(Register dst, FloatRegister src, Register tmp = t0);\n+  void fcvt_l_d_safe(Register dst, FloatRegister src, Register tmp = t0);\n@@ -799,1 +799,1 @@\n-  void repne_scan(Register addr, Register value, Register count, Register temp);\n+  void repne_scan(Register addr, Register value, Register count, Register tmp);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"}]}