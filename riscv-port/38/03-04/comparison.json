{"files":[{"patch":"@@ -3424,28 +3424,44 @@\n-  \/\/ Check if x and y are both 8-byte aligned.\n-  orr(t0, xlen, ylen);\n-  andi(t0, t0, 0x1);\n-  beqz(t0, L_multiply_64_x_64_loop);\n-\n-  multiply_32_x_32_loop(x, xstart, x_xstart, y, y_idx, z, carry, product, idx, kdx);\n-  slli(t0, xstart, LogBytesPerInt);\n-  add(t0, z, t0);\n-  sw(carry, Address(t0, 0));\n-\n-  Label L_second_loop_unaligned;\n-  bind(L_second_loop_unaligned);\n-  mv(carry, zr);\n-  mv(jdx, ylen);\n-  sub(xstart, xstart, 1);\n-  bltz(xstart, L_done);\n-  sub(sp, sp, 2 * wordSize);\n-  sd(z, Address(sp, 0));\n-  sd(zr, Address(sp, wordSize));\n-  slli(t0, xstart, LogBytesPerInt);\n-  add(t0, z, t0);\n-  addi(z, t0, 4);\n-  slli(t0, xstart, LogBytesPerInt);\n-  add(t0, x, t0);\n-  lwu(product, Address(t0, 0));\n-  Label L_third_loop, L_third_loop_exit;\n-\n-  blez(jdx, L_third_loop_exit);\n+  if (AvoidUnalignedAccesses) {\n+    \/\/ Check if x and y are both 8-byte aligned.\n+    orr(t0, xlen, ylen);\n+    andi(t0, t0, 0x1);\n+    beqz(t0, L_multiply_64_x_64_loop);\n+\n+    multiply_32_x_32_loop(x, xstart, x_xstart, y, y_idx, z, carry, product, idx, kdx);\n+    slli(t0, xstart, LogBytesPerInt);\n+    add(t0, z, t0);\n+    sw(carry, Address(t0, 0));\n+\n+    Label L_second_loop_unaligned;\n+    bind(L_second_loop_unaligned);\n+    mv(carry, zr);\n+    mv(jdx, ylen);\n+    sub(xstart, xstart, 1);\n+    bltz(xstart, L_done);\n+    sub(sp, sp, 2 * wordSize);\n+    sd(z, Address(sp, 0));\n+    sd(zr, Address(sp, wordSize));\n+    slli(t0, xstart, LogBytesPerInt);\n+    add(t0, z, t0);\n+    addi(z, t0, 4);\n+    slli(t0, xstart, LogBytesPerInt);\n+    add(t0, x, t0);\n+    lwu(product, Address(t0, 0));\n+    Label L_third_loop, L_third_loop_exit;\n+\n+    blez(jdx, L_third_loop_exit);\n+\n+    bind(L_third_loop);\n+    sub(jdx, jdx, 1);\n+    slli(t0, jdx, LogBytesPerInt);\n+    add(t0, y, t0);\n+    lwu(t0, Address(t0, 0));\n+    mul(t1, t0, product);\n+    add(t0, t1, carry);\n+    slli(t1, jdx, LogBytesPerInt);\n+    add(tmp6, z, t1);\n+    lwu(t1, Address(tmp6, 0));\n+    add(t0, t0, t1);\n+    sw(t0, Address(tmp6, 0));\n+    srli(carry, t0, 32);\n+    bgtz(jdx, L_third_loop);\n@@ -3453,14 +3469,6 @@\n-  bind(L_third_loop);\n-  sub(jdx, jdx, 1);\n-  slli(t0, jdx, LogBytesPerInt);\n-  add(t0, y, t0);\n-  lwu(t0, Address(t0, 0));\n-  mul(t1, t0, product);\n-  add(t0, t1, carry);\n-  slli(t1, jdx, LogBytesPerInt);\n-  add(tmp6, z, t1);\n-  lwu(t1, Address(tmp6, 0));\n-  add(t0, t0, t1);\n-  sw(t0, Address(tmp6, 0));\n-  srli(carry, t0, 32);\n-  bgtz(jdx, L_third_loop);\n+    bind(L_third_loop_exit);\n+    ld(z, Address(sp, 0));\n+    addi(sp, sp, 2 * wordSize);\n+    slli(t0, xstart, LogBytesPerInt);\n+    add(t0, z, t0);\n+    sw(carry, Address(t0, 0));\n@@ -3468,8 +3476,2 @@\n-  bind(L_third_loop_exit);\n-  ld(z, Address(sp, 0));\n-  addi(sp, sp, 2 * wordSize);\n-  slli(t0, xstart, LogBytesPerInt);\n-  add(t0, z, t0);\n-  sw(carry, Address(t0, 0));\n-\n-  j(L_second_loop_unaligned);\n+    j(L_second_loop_unaligned);\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":52,"deletions":50,"binary":false,"changes":102,"status":"modified"}]}