{"files":[{"patch":"@@ -48,0 +48,21 @@\n+Register InterpreterRuntime::SignatureHandlerGenerator::next_gpr() {\n+  if (_num_reg_int_args < Argument::n_int_register_parameters_c - 1) {\n+    return g_INTArgReg[++_num_reg_int_args];\n+  }\n+  return noreg;\n+}\n+\n+FloatRegister InterpreterRuntime::SignatureHandlerGenerator::next_fpr() {\n+  if (_num_reg_fp_args < Argument::n_float_register_parameters_c) {\n+    return g_FPArgReg[_num_reg_fp_args++];\n+  } else {\n+    return fnoreg;\n+  }\n+}\n+\n+int InterpreterRuntime::SignatureHandlerGenerator::next_stack_offset() {\n+  int ret = _stack_offset;\n+  _stack_offset += wordSize;\n+  return ret;\n+}\n+\n@@ -51,2 +72,2 @@\n-  _num_int_args = (method->is_static() ? 1 : 0);\n-  _num_fp_args = 0;\n+  _num_reg_int_args = (method->is_static() ? 1 : 0);\n+  _num_reg_fp_args = 0;\n@@ -59,2 +80,3 @@\n-  if (_num_int_args < Argument::n_int_register_parameters_c - 1) {\n-    __ lw(g_INTArgReg[++_num_int_args], src);\n+  Register reg = next_gpr();\n+  if (reg != noreg) {\n+    __ lw(reg, src);\n@@ -63,3 +85,1 @@\n-    __ sw(x10, Address(to(), _stack_offset));\n-    _stack_offset += wordSize;\n-    _num_int_args++;\n+    __ sw(x10, Address(to(), next_stack_offset()));\n@@ -72,3 +92,4 @@\n-  if (_num_int_args < Argument::n_int_register_parameters_c - 1) {\n-    __ ld(g_INTArgReg[++_num_int_args], src);\n-  } else {\n+  Register reg = next_gpr();\n+  if (reg != noreg) {\n+    __ ld(reg, src);\n+  } else  {\n@@ -76,3 +97,1 @@\n-    __ sd(x10, Address(to(), _stack_offset));\n-    _stack_offset += wordSize;\n-    _num_int_args++;\n+    __ sd(x10, Address(to(), next_stack_offset()));\n@@ -85,6 +104,3 @@\n-  if (_num_fp_args < Argument::n_float_register_parameters_c) {\n-    \/\/ to c_farg\n-    __ flw(g_FPArgReg[_num_fp_args++], src);\n-  } else if (_num_int_args < Argument::n_int_register_parameters_c - 1) {\n-    \/\/ to c_rarg\n-    __ lwu(g_INTArgReg[++_num_int_args], src);\n+  FloatRegister reg = next_fpr();\n+  if (reg != fnoreg) {\n+    __ flw(reg, src);\n@@ -92,5 +108,3 @@\n-    \/\/ to stack\n-    __ lwu(x10, src);\n-    __ sw(x10, Address(to(), _stack_offset));\n-    _stack_offset += wordSize;\n-    _num_fp_args++;\n+    \/\/ a floating-point argument is passed according to the integer calling\n+    \/\/ convention if no floating-point argument register available\n+    pass_int();\n@@ -103,6 +117,3 @@\n-  if (_num_fp_args < Argument::n_float_register_parameters_c) {\n-    \/\/ to c_farg\n-    __ fld(g_FPArgReg[_num_fp_args++], src);\n-  } else if (_num_int_args < Argument::n_int_register_parameters_c - 1) {\n-    \/\/ to c_rarg\n-    __ ld(g_INTArgReg[++_num_int_args], src);\n+  FloatRegister reg = next_fpr();\n+  if (reg != fnoreg) {\n+    __ fld(reg, src);\n@@ -110,5 +121,3 @@\n-    \/\/ to stack\n-    __ ld(x10, src);\n-    __ sd(x10, Address(to(), _stack_offset));\n-    _stack_offset += wordSize;\n-    _num_fp_args++;\n+    \/\/ a floating-point argument is passed according to the integer calling\n+    \/\/ convention if no floating-point argument register available\n+    pass_long();\n@@ -119,8 +128,5 @@\n-\n-  if (_num_int_args < Argument::n_int_register_parameters_c - 1) {\n-    \/\/ to reg\n-    if (_num_int_args == 0) {\n-      assert(offset() == 0, \"argument register 1 can only be (non-null) receiver\");\n-      __ addi(c_rarg1, from(), Interpreter::local_offset_in_bytes(offset()));\n-      _num_int_args++;\n-    } else {\n+  Register reg = next_gpr();\n+  if (reg == c_rarg1) {\n+    assert(offset() == 0, \"argument register 1 can only be (non-null) receiver\");\n+    __ addi(c_rarg1, from(), Interpreter::local_offset_in_bytes(offset()));\n+  } else if (reg != noreg) {\n@@ -129,1 +135,1 @@\n-      __ mv(g_INTArgReg[++_num_int_args], 0); \/\/_num_int_args:c_rarg -> 1:c_rarg2,  2:c_rarg3...\n+      __ mv(reg, zr); \/\/_num_reg_int_args:c_rarg -> 1:c_rarg2,  2:c_rarg3...\n@@ -133,1 +139,1 @@\n-      __ mv(g_INTArgReg[_num_int_args], x10);\n+      __ mv(reg, x10);\n@@ -135,1 +141,0 @@\n-    }\n@@ -144,3 +149,2 @@\n-    __ sd(x10, Address(to(), _stack_offset));\n-    _stack_offset += wordSize;\n-    _num_int_args++;\n+    assert(sizeof(jobject) == wordSize, \"\");\n+    __ sd(x10, Address(to(), next_stack_offset()));\n@@ -171,1 +175,1 @@\n-  intptr_t* _to;\n+  char*     _to;\n@@ -175,2 +179,2 @@\n-  unsigned int _num_int_args;\n-  unsigned int _num_fp_args;\n+  unsigned int _num_reg_int_args;\n+  unsigned int _num_reg_fp_args;\n@@ -178,3 +182,2 @@\n-  virtual void pass_int()\n-  {\n-    jint from_obj = *(jint *)(_from + Interpreter::local_offset_in_bytes(0));\n+  intptr_t* single_slot_addr() {\n+    intptr_t* from_addr = (intptr_t*)(_from + Interpreter::local_offset_in_bytes(0));\n@@ -182,0 +185,2 @@\n+    return from_addr;\n+  }\n@@ -183,6 +188,10 @@\n-    if (_num_int_args < Argument::n_int_register_parameters_c - 1) {\n-      *_int_args++ = from_obj;\n-      _num_int_args++;\n-    } else {\n-      *_to++ = from_obj;\n-      _num_int_args++;\n+  intptr_t* double_slot_addr() {\n+    intptr_t* from_addr = (intptr_t*)(_from + Interpreter::local_offset_in_bytes(1));\n+    _from -= 2 * Interpreter::stackElementSize;\n+    return from_addr;\n+  }\n+\n+  int pass_gpr(intptr_t value) {\n+    if (_num_reg_int_args < Argument::n_int_register_parameters_c - 1) {\n+      *_int_args++ = value;\n+      return _num_reg_int_args++;\n@@ -190,0 +199,1 @@\n+    return -1;\n@@ -192,11 +202,4 @@\n-  virtual void pass_long()\n-  {\n-    intptr_t from_obj = *(intptr_t*)(_from + Interpreter::local_offset_in_bytes(1));\n-    _from -= 2*Interpreter::stackElementSize;\n-\n-    if (_num_int_args < Argument::n_int_register_parameters_c - 1) {\n-      *_int_args++ = from_obj;\n-      _num_int_args++;\n-    } else {\n-      *_to++ = from_obj;\n-      _num_int_args++;\n+  int pass_fpr(intptr_t value) {\n+    if (_num_reg_fp_args < Argument::n_float_register_parameters_c) {\n+      *_fp_args++ = value;\n+      return _num_reg_fp_args++;\n@@ -204,0 +207,1 @@\n+    return -1;\n@@ -206,4 +210,5 @@\n-  virtual void pass_object()\n-  {\n-    intptr_t *from_addr = (intptr_t*)(_from + Interpreter::local_offset_in_bytes(0));\n-    _from -= Interpreter::stackElementSize;\n+  template<typename T>\n+  void pass_stack(T value) {\n+    *(T *)_to = value;\n+    _to += wordSize;\n+  }\n@@ -211,6 +216,4 @@\n-    if (_num_int_args < Argument::n_int_register_parameters_c - 1) {\n-      *_int_args++ = (*from_addr == 0) ? NULL : (intptr_t)from_addr;\n-      _num_int_args++;\n-    } else {\n-      *_to++ = (*from_addr == 0) ? NULL : (intptr_t) from_addr;\n-      _num_int_args++;\n+  virtual void pass_int() {\n+    jint value = *(jint*)single_slot_addr();\n+    if (pass_gpr(value) < 0) {\n+      pass_stack<>(value);\n@@ -220,4 +223,6 @@\n-  virtual void pass_float()\n-  {\n-    jint from_obj = *(jint*)(_from + Interpreter::local_offset_in_bytes(0));\n-    _from -= Interpreter::stackElementSize;\n+  virtual void pass_long() {\n+    intptr_t value = *double_slot_addr();\n+    if (pass_gpr(value) < 0) {\n+      pass_stack<>(value);\n+    }\n+  }\n@@ -225,9 +230,5 @@\n-    if (_num_fp_args < Argument::n_float_register_parameters_c) {\n-      *_fp_args++ = from_obj;\n-      _num_fp_args++;\n-    } else if (_num_int_args < Argument::n_int_register_parameters_c - 1) {\n-      *_int_args++ = from_obj;\n-      _num_int_args++;\n-    } else {\n-      *_to++ = from_obj;\n-      _num_fp_args++;\n+  virtual void pass_object() {\n+    intptr_t* addr = single_slot_addr();\n+    intptr_t value = *addr == 0 ? NULL : (intptr_t)addr;\n+    if (pass_gpr(value) < 0) {\n+      pass_stack<>(value);\n@@ -237,16 +238,16 @@\n-  virtual void pass_double()\n-  {\n-    intptr_t from_obj = *(intptr_t*)(_from + Interpreter::local_offset_in_bytes(1));\n-    _from -= 2*Interpreter::stackElementSize;\n-\n-    if (_num_fp_args < Argument::n_float_register_parameters_c) {\n-      *_fp_args++ = from_obj;\n-      *_fp_identifiers |= (1ull << _num_fp_args); \/\/ mark as double\n-      _num_fp_args++;\n-    } else if (_num_int_args < Argument::n_int_register_parameters_c - 1) {\n-      \/\/ ld\/st from_obj as integer, no need to mark _fp_identifiers\n-      *_int_args++ = from_obj;\n-      _num_int_args++;\n-    } else {\n-      *_to++ = from_obj;\n-      _num_fp_args++;\n+  virtual void pass_float() {\n+    jint value = *(jint*) single_slot_addr();\n+    \/\/ a floating-point argument is passed according to the integer calling\n+    \/\/ convention if no floating-point argument register available\n+    if (pass_fpr(value) < 0 && pass_gpr(value) < 0) {\n+      pass_stack<>(value);\n+    }\n+  }\n+\n+  virtual void pass_double() {\n+    intptr_t value = *double_slot_addr();\n+    int arg = pass_fpr(value);\n+    if (0 <= arg) {\n+      *_fp_identifiers |= (1ull << arg); \/\/ mark as double\n+    } else if (pass_gpr(value) < 0) { \/\/ no need to mark if passing by integer registers or stack\n+      pass_stack<>(value);\n@@ -261,1 +262,1 @@\n-    _to   = to;\n+    _to   = (char*) to;\n@@ -267,2 +268,2 @@\n-    _num_int_args = (method->is_static() ? 1 : 0);\n-    _num_fp_args = 0;\n+    _num_reg_int_args = (method->is_static() ? 1 : 0);\n+    _num_reg_fp_args = 0;\n@@ -270,0 +271,1 @@\n+\n","filename":"src\/hotspot\/cpu\/riscv\/interpreterRT_riscv.cpp","additions":116,"deletions":114,"binary":false,"changes":230,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-  unsigned int _num_fp_args;\n-  unsigned int _num_int_args;\n+  unsigned int _num_reg_fp_args;\n+  unsigned int _num_reg_int_args;\n@@ -48,0 +48,4 @@\n+  Register next_gpr();\n+  FloatRegister next_fpr();\n+  int next_stack_offset();\n+\n","filename":"src\/hotspot\/cpu\/riscv\/interpreterRT_riscv.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}