{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,0 +99,4 @@\n+            if (!tmpPublicExponent.testBit(0)) {\n+                throw new InvalidAlgorithmParameterException\n+                        (\"Public exponent must be an odd number\");\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAKeyPairGenerator.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8216012\n+ * @summary Tests the RSA public key exponent for KeyPairGenerator\n+ * @run main\/timeout=60 TestKeyPairGeneratorExponent\n+ *\/\n+\n+import java.math.BigInteger;\n+\n+import java.security.*;\n+import java.security.interfaces.*;\n+import java.security.spec.*;\n+\n+public class TestKeyPairGeneratorExponent {\n+    private static int keyLen = 512;\n+\n+    private static BigInteger[] validExponents = new BigInteger[] {\n+        RSAKeyGenParameterSpec.F0,\n+        RSAKeyGenParameterSpec.F4,\n+        BigInteger.ONE.shiftLeft(keyLen - 1).subtract(BigInteger.ONE)\n+    };\n+\n+    private static BigInteger[] invalidExponents = new BigInteger[] {\n+        BigInteger.valueOf(-1),\n+        BigInteger.ZERO,\n+        BigInteger.ONE,\n+        \/\/ without this fix, an even value causes an infinite loop\n+        BigInteger.valueOf(4)\n+    };\n+\n+    public static void testValidExponents(KeyPairGenerator kpg,\n+            BigInteger exponent) {\n+        System.out.println(\"Testing exponent = \" + exponent.toString(16));\n+        try {\n+            kpg.initialize(new RSAKeyGenParameterSpec(keyLen, exponent));\n+            kpg.generateKeyPair();\n+            System.out.println(\"OK, key pair generated\");\n+        } catch(InvalidAlgorithmParameterException iape){\n+            throw new RuntimeException(\"Error: Unexpected Exception: \" + iape);\n+        }\n+    }\n+\n+    public static void testInvalidExponents(KeyPairGenerator kpg,\n+            BigInteger exponent) {\n+        System.out.println(\"Testing exponent = \" + exponent.toString(16));\n+        try {\n+            kpg.initialize(new RSAKeyGenParameterSpec(keyLen, exponent));\n+            kpg.generateKeyPair();\n+            throw new RuntimeException(\"Error: Expected IAPE not thrown.\");\n+        } catch(InvalidAlgorithmParameterException iape){\n+            \/\/ Expected InvalidAlgorithmParameterException was thrown\n+            System.out.println(\"OK, expected IAPE thrown\");\n+        } catch(Exception e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(\"Error: unexpected exception \" + e);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        KeyPairGenerator kpg =\n+                KeyPairGenerator.getInstance(\"RSA\", \"SunRsaSign\");\n+\n+        for(BigInteger validExponent : validExponents) {\n+            testValidExponents(kpg, validExponent);\n+        }\n+\n+        for(BigInteger invalidExponent : invalidExponents) {\n+            testInvalidExponents(kpg, invalidExponent);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/rsa\/TestKeyPairGeneratorExponent.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}