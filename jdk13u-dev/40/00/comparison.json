{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-    $(BUILDTOOLS_OUTPUTDIR)\/interim_cldrconverter_classes \\\n","filename":"make\/CompileToolsJdk.gmk","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,52 +0,0 @@\n-#\n-# Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-default: all\n-\n-include $(SPEC)\n-include MakeBase.gmk\n-\n-##########################################################################################\n-\n-### CLDRConverter needs the JRE time zone names from the java.base source.\n-\n-define cldrconverter_copytznames\n-\t$(call MakeTargetDir)\n-\t$(RM) '$@'\n-\t$(SED) -e \"s\/package sun.util.resources\/package build.tools.cldrconverter\/\" \\\n-        -e \"s\/extends TimeZoneNamesBundle\/\/\" \\\n-        -e \"s\/protected final\/static final\/\" \\\n-        < $(<) > $@\n-endef\n-\n-$(eval $(call SetupCopyFiles,COPY_INTERIM_CLDRCONVERTER, \\\n-    SRC := $(TOPDIR)\/src\/java.base\/share\/classes\/sun\/util\/resources, \\\n-    DEST := $(BUILDTOOLS_OUTPUTDIR)\/interim_cldrconverter_classes\/build\/tools\/cldrconverter, \\\n-    FILES := TimeZoneNames.java, \\\n-    MACRO := cldrconverter_copytznames))\n-\n-##########################################################################################\n-\n-all: $(COPY_INTERIM_CLDRCONVERTER)\n","filename":"make\/CopyInterimCLDRConverter.gmk","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -78,3 +78,0 @@\n-interim-cldrconverter:\n-\t+($(CD) $(TOPDIR)\/make && $(MAKE) $(MAKE_ARGS) -f CopyInterimCLDRConverter.gmk)\n-\n@@ -95,1 +92,1 @@\n-    interim-rmic interim-cldrconverter interim-tzdb buildtools-jdk buildtools-modules \\\n+    interim-rmic interim-tzdb buildtools-jdk buildtools-modules \\\n@@ -674,1 +671,1 @@\n-  buildtools-jdk: interim-langtools interim-cldrconverter interim-tzdb\n+  buildtools-jdk: interim-langtools interim-tzdb\n","filename":"make\/Main.gmk","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -308,1 +308,0 @@\n-        \/\/ Fill in any missing abbreviations if locale is \"en\".\n@@ -321,4 +320,0 @@\n-\n-                if (id.equals(\"en\")) {\n-                    fillInJREs(key, nameMap);\n-                }\n@@ -653,36 +648,0 @@\n-    static List<Object[]> jreTimeZoneNames = Arrays.asList(TimeZoneNames.getContents());\n-    private void fillInJREs(String key, Map<String, String> map) {\n-        String tzid = null;\n-\n-        if (key.startsWith(CLDRConverter.METAZONE_ID_PREFIX)) {\n-            \/\/ Look for tzid\n-            String meta = key.substring(CLDRConverter.METAZONE_ID_PREFIX.length());\n-            if (meta.equals(\"GMT\")) {\n-                tzid = meta;\n-            } else {\n-                for (String tz : CLDRConverter.handlerMetaZones.keySet()) {\n-                    if (CLDRConverter.handlerMetaZones.get(tz).equals(meta)) {\n-                        tzid = tz;\n-                        break;\n-                    }\n-                }\n-            }\n-        } else {\n-            tzid = key.substring(CLDRConverter.TIMEZONE_ID_PREFIX.length());\n-        }\n-\n-        if (tzid != null) {\n-            for (Object[] jreZone : jreTimeZoneNames) {\n-                if (jreZone[0].equals(tzid)) {\n-                    for (int i = 0; i < ZONE_NAME_KEYS.length; i++) {\n-                        if (map.get(ZONE_NAME_KEYS[i]) == null) {\n-                            String[] jreNames = (String[])jreZone[1];\n-                            map.put(ZONE_NAME_KEYS[i], jreNames[i]);\n-                        }\n-                    }\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/Bundle.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import static build.tools.cldrconverter.Bundle.jreTimeZoneNames;\n@@ -91,0 +90,1 @@\n+    static final String META_EMPTY_ZONE_NAME = \"EMPTY_ZONE\";\n@@ -92,0 +92,1 @@\n+    static final String META_ETCUTC_ZONE_NAME = \"ETC_UTC\";\n@@ -679,54 +680,0 @@\n-        \/\/ Copy over missing time zone ids from JRE for English locale\n-        if (id.equals(\"en\")) {\n-            Map<String[], String> jreMetaMap = new HashMap<>();\n-            jreTimeZoneNames.stream().forEach(e -> {\n-                String tzid = (String)e[0];\n-                String[] data = (String[])e[1];\n-\n-                if (map.get(TIMEZONE_ID_PREFIX + tzid) == null &&\n-                    handlerMetaZones.get(tzid) == null ||\n-                    handlerMetaZones.get(tzid) != null &&\n-                    map.get(METAZONE_ID_PREFIX + handlerMetaZones.get(tzid)) == null) {\n-\n-                    \/\/ First, check the alias\n-                    String canonID = canonicalTZMap.get(tzid);\n-                    if (canonID != null && !tzid.equals(canonID)) {\n-                        Object value = map.get(TIMEZONE_ID_PREFIX + canonID);\n-                        if (value != null) {\n-                            names.put(tzid, value);\n-                            return;\n-                        } else {\n-                            String meta = handlerMetaZones.get(canonID);\n-                            if (meta != null) {\n-                                value = map.get(METAZONE_ID_PREFIX + meta);\n-                                if (value != null) {\n-                                    names.put(tzid, meta);\n-                                    return;\n-                                }\n-                            }\n-                        }\n-                    }\n-\n-                    \/\/ Check the CLDR meta key\n-                    Optional<Map.Entry<String, String>> cldrMeta =\n-                        handlerMetaZones.getData().entrySet().stream()\n-                            .filter(me ->\n-                                Arrays.deepEquals(data,\n-                                    (String[])map.get(METAZONE_ID_PREFIX + me.getValue())))\n-                            .findAny();\n-                    cldrMeta.ifPresentOrElse(meta -> names.put(tzid, meta.getValue()), () -> {\n-                        \/\/ Check the JRE meta key, add if there is not.\n-                        Optional<Map.Entry<String[], String>> jreMeta =\n-                            jreMetaMap.entrySet().stream()\n-                                .filter(jm -> Arrays.deepEquals(data, jm.getKey()))\n-                                .findAny();\n-                        jreMeta.ifPresentOrElse(meta -> names.put(tzid, meta.getValue()), () -> {\n-                                String metaName = \"JRE_\" + tzid.replaceAll(\"[\/-]\", \"_\");\n-                                names.put(METAZONE_ID_PREFIX + metaName, data);\n-                                names.put(tzid, metaName);\n-                        });\n-                    });\n-                }\n-            });\n-        }\n-\n@@ -740,1 +687,8 @@\n-                names.put(tzid, data);\n+                \/\/ Hack for UTC. UTC is an alias to Etc\/UTC in CLDR\n+                if (tzid.equals(\"Etc\/UTC\") && !map.containsKey(TIMEZONE_ID_PREFIX + \"UTC\")) {\n+                    names.put(METAZONE_ID_PREFIX + META_ETCUTC_ZONE_NAME, data);\n+                    names.put(tzid, META_ETCUTC_ZONE_NAME);\n+                    names.put(\"UTC\", META_ETCUTC_ZONE_NAME);\n+                } else {\n+                    names.put(tzid, data);\n+                }\n@@ -757,3 +711,2 @@\n-                .filter(e -> e.getKey().startsWith(CLDRConverter.EXEMPLAR_CITY_PREFIX))\n-                .collect(Collectors\n-                        .toMap(Map.Entry::getKey, Map.Entry::getValue));\n+            .filter(e -> e.getKey().startsWith(CLDRConverter.EXEMPLAR_CITY_PREFIX))\n+            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n@@ -762,11 +715,4 @@\n-        if (!id.equals(\"en\") &&\n-            !names.isEmpty()) {\n-            \/\/ CLDR does not have UTC entry, so add it here.\n-            names.put(\"UTC\", EMPTY_ZONE);\n-\n-            \/\/ no metazone zones\n-            Arrays.asList(handlerMetaZones.get(MetaZonesParseHandler.NO_METAZONE_KEY)\n-                .split(\"\\\\s\")).stream()\n-                .forEach(tz -> {\n-                    names.put(tz, EMPTY_ZONE);\n-                });\n+        \/\/ If there's no UTC entry at this point, add an empty one\n+        if (!names.isEmpty() && !names.containsKey(\"UTC\")) {\n+            names.putIfAbsent(METAZONE_ID_PREFIX + META_EMPTY_ZONE_NAME, EMPTY_ZONE);\n+            names.put(\"UTC\", META_EMPTY_ZONE_NAME);\n@@ -775,0 +721,7 @@\n+        \/\/ Finally some compatibility stuff\n+        ZoneId.SHORT_IDS.entrySet().stream()\n+            .filter(e -> !names.containsKey(e.getKey()) && names.containsKey(e.getValue()))\n+            .forEach(e -> {\n+                names.put(e.getKey(), names.get(e.getValue()));\n+            });\n+\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/CLDRConverter.java","additions":24,"deletions":71,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -4240,1 +4240,8 @@\n-                        return parseOffsetBased(context, text, position, position + 3, OffsetIdPrinterParser.INSTANCE_ID_ZERO);\n+                        \/\/ There are localized zone texts that start with \"UTC\", e.g.\n+                        \/\/ \"UTC\\u221210:00\" (MINUS SIGN instead of HYPHEN-MINUS) in French.\n+                        \/\/ Exclude those ZoneText cases.\n+                        if (!(this instanceof ZoneTextPrinterParser)) {\n+                            return parseOffsetBased(context, text, position, position + 3, OffsetIdPrinterParser.INSTANCE_ID_ZERO);\n+                        }\n+                    } else {\n+                        return parseOffsetBased(context, text, position, position + 2, OffsetIdPrinterParser.INSTANCE_ID_ZERO);\n@@ -4242,1 +4249,0 @@\n-                    return parseOffsetBased(context, text, position, position + 2, OffsetIdPrinterParser.INSTANCE_ID_ZERO);\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import java.util.stream.Collectors;\n@@ -76,2 +75,0 @@\n-        \/\/ Use English for the ROOT locale\n-        locale = locale.equals(Locale.ROOT) ? Locale.ENGLISH : locale;\n@@ -97,1 +94,1 @@\n-                                       !exists(namesSuper, INDEX_DST_LONG));\n+                                       !TimeZone.getTimeZone(id).useDaylightTime());\n@@ -102,1 +99,1 @@\n-                                                i % 2 != 0, locale);\n+                                                locale);\n@@ -124,2 +121,0 @@\n-        \/\/ Use English for the ROOT locale\n-        locale = locale.equals(Locale.ROOT) ? Locale.ENGLISH : locale;\n@@ -129,6 +124,2 @@\n-        \/\/ English names are prefilled for performance.\n-        if (!locale.equals(Locale.ENGLISH) &&\n-            !locale.equals(Locale.US)) {\n-            for (int zoneIndex = 0; zoneIndex < ret.length; zoneIndex++) {\n-                deriveFallbackNames(ret[zoneIndex], locale);\n-            }\n+        for (int zoneIndex = 0; zoneIndex < ret.length; zoneIndex++) {\n+            deriveFallbackNames(ret[zoneIndex], locale);\n@@ -141,1 +132,2 @@\n-        boolean noDST = !exists(names, INDEX_DST_LONG);\n+        boolean noDST = !TimeZone.getTimeZone(names[0]).useDaylightTime();\n+\n@@ -155,1 +147,1 @@\n-                                    index % 2 != 0, locale);\n+                                    locale);\n@@ -160,0 +152,14 @@\n+        \/\/ Check parent locale first\n+        if (!exists(names, index)) {\n+            CLDRLocaleProviderAdapter clpa = (CLDRLocaleProviderAdapter)LocaleProviderAdapter.forType(Type.CLDR);\n+            var cands = clpa.getCandidateLocales(\"\", locale);\n+            if (cands.size() > 1) {\n+                var parentLoc = cands.get(1); \/\/ immediate parent locale\n+                String[] parentNames = super.getDisplayNameArray(id, parentLoc);\n+                if (parentNames != null && !parentNames[index].isEmpty()) {\n+                    names[index] = parentNames[index];\n+                    return;\n+                }\n+            }\n+        }\n+\n@@ -176,2 +182,2 @@\n-        \/\/ Type Fallback\n-        if (noDST && typeFallback(names, index)) {\n+        \/\/ Region Fallback\n+        if (regionFormatFallback(names, index, locale)) {\n@@ -181,2 +187,2 @@\n-        \/\/ Region Fallback\n-        if (regionFormatFallback(names, index, locale)) {\n+        \/\/ Type Fallback\n+        if (noDST && typeFallback(names, index)) {\n@@ -187,20 +193,17 @@\n-        if (!id.toUpperCase(Locale.ROOT).startsWith(\"UT\")) {\n-            names[index] = toGMTFormat(id,\n-                                       index == INDEX_DST_LONG || index == INDEX_DST_SHORT,\n-                                       index % 2 != 0,\n-                                       locale);\n-            \/\/ aliases of \"GMT\" timezone.\n-            if ((exists(names, INDEX_STD_LONG)) && (id.startsWith(\"Etc\/\")\n-                    || id.startsWith(\"GMT\") || id.startsWith(\"Greenwich\"))) {\n-                switch (id) {\n-                case \"Etc\/GMT\":\n-                case \"Etc\/GMT-0\":\n-                case \"Etc\/GMT+0\":\n-                case \"Etc\/GMT0\":\n-                case \"GMT+0\":\n-                case \"GMT-0\":\n-                case \"GMT0\":\n-                case \"Greenwich\":\n-                    names[INDEX_DST_LONG] = names[INDEX_GEN_LONG] = names[INDEX_STD_LONG];\n-                    break;\n-                }\n+        names[index] = toGMTFormat(id,\n+                                   index == INDEX_DST_LONG || index == INDEX_DST_SHORT,\n+                                   locale);\n+        \/\/ aliases of \"GMT\" timezone.\n+        if ((exists(names, INDEX_STD_LONG)) && (id.startsWith(\"Etc\/\")\n+                || id.startsWith(\"GMT\") || id.startsWith(\"Greenwich\"))) {\n+            switch (id) {\n+            case \"Etc\/GMT\":\n+            case \"Etc\/GMT-0\":\n+            case \"Etc\/GMT+0\":\n+            case \"Etc\/GMT0\":\n+            case \"GMT+0\":\n+            case \"GMT-0\":\n+            case \"GMT0\":\n+            case \"Greenwich\":\n+                names[INDEX_DST_LONG] = names[INDEX_GEN_LONG] = names[INDEX_STD_LONG];\n+                break;\n@@ -220,1 +223,1 @@\n-        if (!exists(names, index) && exists(names, genIndex)) {\n+        if (!exists(names, index) && exists(names, genIndex) && !names[genIndex].startsWith(\"GMT\")) {\n@@ -225,1 +228,1 @@\n-            if (!exists(names, index) && exists(names, stdIndex)) {\n+            if (!exists(names, index) && exists(names, stdIndex) && !names[stdIndex].startsWith(\"GMT\")) {\n@@ -238,0 +241,1 @@\n+        id = TimeZoneNameUtility.canonicalTZID(id).orElse(id);\n@@ -267,1 +271,1 @@\n-    private String toGMTFormat(String id, boolean daylight, boolean isShort, Locale l) {\n+    private String toGMTFormat(String id, boolean daylight, Locale l) {\n@@ -286,1 +290,1 @@\n-                .replaceFirst(\"H+\", (isShort ? \"\\\\%1\\\\$d\" : \"\\\\%1\\\\$02d\"))\n+                .replaceFirst(\"H+\", \"\\\\%1\\\\$02d\")\n","filename":"src\/java.base\/share\/classes\/sun\/util\/cldr\/CLDRTimeZoneNameProviderImpl.java","additions":48,"deletions":44,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ *      8234347 8236548\n@@ -98,0 +99,1 @@\n+        \/* 8234347: CLDR Converter will not pre-fill short display names from COMPAT anymore.\n@@ -104,0 +106,1 @@\n+        *\/\n@@ -112,1 +115,1 @@\n-            fmtROOT.parse(\"Thu Nov 13 04:35:51 AKST 2008\");\n+            fmtROOT.parse(\"Thu Nov 13 04:35:51 GMT-09:00 2008\");\n@@ -157,0 +160,1 @@\n+        \/* 8234347: CLDR Converter will not pre-fill short display names from COMPAT anymore.\n@@ -166,0 +170,1 @@\n+        *\/\n","filename":"test\/jdk\/java\/util\/TimeZone\/CLDRDisplayNamesTest.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8134384\n+ * @bug 8134384 8234347 8236548\n@@ -46,1 +46,0 @@\n-                testParse(Locale.ROOT, date1, tz);\n@@ -51,1 +50,0 @@\n-                testParse(Locale.ROOT, date2, tz);\n","filename":"test\/jdk\/sun\/util\/resources\/cldr\/Bug8134384.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8181157 8202537\n+ * @bug 8181157 8202537 8234347 8236548\n@@ -32,2 +32,1 @@\n-import static org.testng.Assert.assertEquals;\n-\n+import java.text.DateFormatSymbols;\n@@ -36,0 +35,1 @@\n+import java.util.Arrays;\n@@ -37,0 +37,1 @@\n+import java.util.Objects;\n@@ -39,0 +40,2 @@\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n@@ -54,2 +57,2 @@\n-            {\"Asia\/Srednekolymsk\",      Locale.US, \"Srednekolymsk Time\",\n-                                                    \"SRET\",\n+            {\"Asia\/Srednekolymsk\",      Locale.US, \"Srednekolymsk Standard Time\",\n+                                                    \"GMT+11:00\",\n@@ -57,1 +60,1 @@\n-                                                    \"SREDT\",\n+                                                    \"GMT+11:00\",\n@@ -59,1 +62,1 @@\n-                                                    \"SRET\"},\n+                                                    \"GMT+11:00\"},\n@@ -62,1 +65,1 @@\n-                                                    \"Srednekolymsk (heure standard)\",\n+                                                    \"Srednekolymsk (heure d\\u2019\\u00e9t\\u00e9)\",\n@@ -68,1 +71,1 @@\n-                                                    \"Punta Arenas Standard Time\",\n+                                                    \"Punta Arenas Daylight Time\",\n@@ -74,1 +77,1 @@\n-                                                    \"Punta Arenas (heure standard)\",\n+                                                    \"Punta Arenas (heure d\\u2019\\u00e9t\\u00e9)\",\n@@ -78,6 +81,6 @@\n-            {\"Asia\/Famagusta\",          Locale.US, \"Eastern European Time\",\n-                                                    \"EET\",\n-                                                    \"Eastern European Summer Time\",\n-                                                    \"EEST\",\n-                                                    \"Eastern European Time\",\n-                                                    \"EET\"},\n+            {\"Asia\/Famagusta\",          Locale.US, \"Famagusta Standard Time\",\n+                                                    \"GMT+02:00\",\n+                                                    \"Famagusta Daylight Time\",\n+                                                    \"GMT+03:00\",\n+                                                    \"Famagusta Time\",\n+                                                    \"GMT+02:00\"},\n@@ -86,1 +89,1 @@\n-                                                    \"Famagouste (heure standard)\",\n+                                                    \"Famagouste (heure d\\u2019\\u00e9t\\u00e9)\",\n@@ -92,1 +95,1 @@\n-                                                    \"Astrakhan Standard Time\",\n+                                                    \"Astrakhan Daylight Time\",\n@@ -98,1 +101,1 @@\n-                                                    \"Astrakhan (heure standard)\",\n+                                                    \"Astrakhan (heure d\\u2019\\u00e9t\\u00e9)\",\n@@ -104,1 +107,1 @@\n-                                                    \"Saratov Standard Time\",\n+                                                    \"Saratov Daylight Time\",\n@@ -110,1 +113,1 @@\n-                                                    \"Saratov (heure standard)\",\n+                                                    \"Saratov (heure d\\u2019\\u00e9t\\u00e9)\",\n@@ -116,1 +119,1 @@\n-                                                    \"Ulyanovsk Standard Time\",\n+                                                    \"Ulyanovsk Daylight Time\",\n@@ -122,1 +125,1 @@\n-                                                    \"Oulianovsk (heure standard)\",\n+                                                    \"Oulianovsk (heure d\\u2019\\u00e9t\\u00e9)\",\n@@ -127,1 +130,1 @@\n-                                                    \"BST\",\n+                                                    \"GMT+11:00\",\n@@ -129,1 +132,1 @@\n-                                                    \"BST\",\n+                                                    \"GMT+11:00\",\n@@ -131,1 +134,1 @@\n-                                                    \"BT\"},\n+                                                    \"GMT+11:00\"},\n@@ -134,1 +137,1 @@\n-                                                    \"Bougainville (heure standard)\",\n+                                                    \"Bougainville (heure d\\u2019\\u00e9t\\u00e9)\",\n@@ -138,1 +141,36 @@\n-\n+            {\"Europe\/Istanbul\",    Locale.US, \"Istanbul Standard Time\",\n+                                                    \"GMT+03:00\",\n+                                                    \"Istanbul Daylight Time\",\n+                                                    \"GMT+03:00\",\n+                                                    \"Istanbul Time\",\n+                                                    \"GMT+03:00\"},\n+            {\"Europe\/Istanbul\",    Locale.FRANCE, \"Istanbul (heure standard)\",\n+                                                    \"UTC+03:00\",\n+                                                    \"Istanbul (heure d\\u2019\\u00e9t\\u00e9)\",\n+                                                    \"UTC+03:00\",\n+                                                    \"heure : Istanbul\",\n+                                                    \"UTC+03:00\"},\n+            {\"Asia\/Istanbul\",    Locale.US, \"Istanbul Standard Time\",\n+                                                    \"GMT+03:00\",\n+                                                    \"Istanbul Daylight Time\",\n+                                                    \"GMT+03:00\",\n+                                                    \"Istanbul Time\",\n+                                                    \"GMT+03:00\"},\n+            {\"Asia\/Istanbul\",    Locale.FRANCE, \"Istanbul (heure standard)\",\n+                                                    \"UTC+03:00\",\n+                                                    \"Istanbul (heure d\\u2019\\u00e9t\\u00e9)\",\n+                                                    \"UTC+03:00\",\n+                                                    \"heure : Istanbul\",\n+                                                    \"UTC+03:00\"},\n+            {\"Turkey\",    Locale.US, \"Istanbul Standard Time\",\n+                                                    \"GMT+03:00\",\n+                                                    \"Istanbul Daylight Time\",\n+                                                    \"GMT+03:00\",\n+                                                    \"Istanbul Time\",\n+                                                    \"GMT+03:00\"},\n+            {\"Turkey\",    Locale.FRANCE, \"Istanbul (heure standard)\",\n+                                                    \"UTC+03:00\",\n+                                                    \"Istanbul (heure d\\u2019\\u00e9t\\u00e9)\",\n+                                                    \"UTC+03:00\",\n+                                                    \"heure : Istanbul\",\n+                                                    \"UTC+03:00\"},\n@@ -157,0 +195,16 @@\n+\n+    \/\/ Make sure getZoneStrings() returns non-empty string array\n+    @Test\n+    public void test_getZoneStrings() {\n+        assertFalse(\n+            Arrays.stream(Locale.getAvailableLocales())\n+                .peek(l -> System.out.println(\"Locale: \" + l))\n+                .map(l -> DateFormatSymbols.getInstance(l).getZoneStrings())\n+                .flatMap(zs -> Arrays.stream(zs))\n+                .peek(names -> System.out.println(\"    tz: \" + names[0]))\n+                .flatMap(names -> Arrays.stream(names))\n+                .filter(name -> Objects.isNull(name) || name.isEmpty())\n+                .findAny()\n+                .isPresent(),\n+            \"getZoneStrings() returned array containing non-empty string element(s)\");\n+    }\n","filename":"test\/jdk\/sun\/util\/resources\/cldr\/TimeZoneNamesTest.java","additions":83,"deletions":29,"binary":false,"changes":112,"status":"modified"}]}