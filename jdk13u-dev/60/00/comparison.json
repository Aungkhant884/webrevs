{"files":[{"patch":"@@ -29,2 +29,3 @@\n-  <Event name=\"ThreadStart\" category=\"Java Application\" label=\"Java Thread Start\" thread=\"true\" startTime=\"false\">\n-    <Field type=\"Thread\" name=\"thread\" label=\"Java Thread\" \/>\n+  <Event name=\"ThreadStart\" category=\"Java Application\" label=\"Java Thread Start\" thread=\"true\" startTime=\"false\" stackTrace=\"true\">\n+    <Field type=\"Thread\" name=\"thread\" label=\"New Java Thread\" \/>\n+    <Field type=\"Thread\" name=\"parentThread\" label=\"Parent Java Thread\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -58,1 +58,5 @@\n-  _dead(false) {}\n+  _dead(false) {\n+\n+  Thread* thread = Thread::current_or_null();\n+  _parent_trace_id = thread != NULL ? thread->jfr_thread_local()->trace_id() : (traceid)0;\n+}\n@@ -81,0 +85,1 @@\n+  event.set_parentThread(jt->jfr_thread_local()->parent_thread_id());\n@@ -92,0 +97,3 @@\n+  if (t->jfr_thread_local()->has_cached_stack_trace()) {\n+    t->jfr_thread_local()->clear_cached_stack_trace();\n+  }\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+  traceid _parent_trace_id;\n@@ -130,0 +131,4 @@\n+  traceid parent_thread_id() const {\n+    return _parent_trace_id;\n+  }\n+\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3835,1 +3835,8 @@\n-    event.commit();\n+    event.set_parentThread((traceid)0);\n+    if (EventThreadStart::is_stacktrace_enabled()) {\n+      jt->jfr_thread_local()->set_cached_stack_trace_id((traceid)0);\n+      event.commit();\n+      jt->jfr_thread_local()->clear_cached_stack_trace();\n+    } else {\n+      event.commit();\n+    }\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -96,0 +96,1 @@\n+#include <jfr\/recorder\/jfrRecorder.hpp>\n@@ -2811,0 +2812,9 @@\n+#if INCLUDE_JFR\n+  if (JfrRecorder::is_recording() && EventThreadStart::is_enabled() &&\n+      EventThreadStart::is_stacktrace_enabled()) {\n+    JfrThreadLocal* tl = native_thread->jfr_thread_local();\n+    \/\/ skip Thread.start() and Thread.start0()\n+    tl->set_cached_stack_trace_id(JfrStackTraceRepository::record(thread, 2));\n+  }\n+#endif\n+\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+      <setting name=\"stackTrace\">true<\/setting>\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+      <setting name=\"stackTrace\">true<\/setting>\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import static jdk.test.lib.Asserts.assertEQ;\n+import static jdk.test.lib.Asserts.assertNotNull;\n+\n@@ -34,0 +37,2 @@\n+import jdk.jfr.consumer.RecordedMethod;\n+import jdk.jfr.consumer.RecordedStackTrace;\n@@ -65,1 +70,0 @@\n-        long currentThreadId = Thread.currentThread().getId();\n@@ -67,0 +71,1 @@\n+        events.sort((e1, e2) -> e1.getStartTime().compareTo(e2.getStartTime()));\n@@ -69,2 +74,1 @@\n-            System.out.println(\"Event:\" + event);\n-            if (event.getThread().getJavaThreadId() != currentThreadId) {\n+            if (!event.getThread().getJavaName().startsWith(THREAD_NAME_PREFIX)) {\n@@ -73,0 +77,1 @@\n+            System.out.println(\"Event:\" + event);\n@@ -77,1 +82,9 @@\n-                throw new Exception(\"Expected event of tyoe \" + eventName + \" but got \" + event.getEventType().getName());\n+                throw new Exception(\"Expected event of type \" + eventName + \" but got \" + event.getEventType().getName());\n+            }\n+\n+            if (eventName == EVENT_NAME_THREAD_START) {\n+                Events.assertEventThread(event, \"parentThread\", Thread.currentThread());\n+                RecordedStackTrace stackTrace = event.getValue(\"stackTrace\");\n+                assertNotNull(stackTrace);\n+                RecordedMethod topMethod = stackTrace.getFrames().get(0).getMethod();\n+                assertEQ(topMethod.getName(), \"startThread\");\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestThreadStartEndEvents.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"}]}