{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.security.AccessController;\n@@ -32,0 +31,1 @@\n+\n@@ -123,7 +123,0 @@\n-            String osName = AccessController.doPrivileged(\n-                new sun.security.action.GetPropertyAction(\"os.name\"));\n-            \/\/ There's no capability for Win98 to refresh printers.\n-            \/\/ See \"OpenPrinter\" for more info.\n-            if (osName != null && osName.startsWith(\"Windows 98\")) {\n-                return;\n-            }\n@@ -359,6 +352,1 @@\n-    class PrinterChangeListener implements Runnable {\n-        long chgObj;\n-        PrinterChangeListener() {\n-            chgObj = notifyFirstPrinterChange(null);\n-        }\n-\n+    private final class PrinterChangeListener implements Runnable {\n@@ -367,15 +355,1 @@\n-            if (chgObj != -1) {\n-                while (true) {\n-                    \/\/ wait for configuration to change\n-                    if (notifyPrinterChange(chgObj) != 0) {\n-                        try {\n-                            refreshServices();\n-                        } catch (SecurityException se) {\n-                            break;\n-                        }\n-                    } else {\n-                        notifyClosePrinterChange(chgObj);\n-                        break;\n-                    }\n-                }\n-            }\n+            notifyLocalPrinterChange(); \/\/ busy loop in the native code\n@@ -449,3 +423,1 @@\n-    private native long notifyFirstPrinterChange(String printer);\n-    private native void notifyClosePrinterChange(long chgObj);\n-    private native int notifyPrinterChange(long chgObj);\n+    private native void notifyLocalPrinterChange();\n","filename":"src\/java.desktop\/windows\/classes\/sun\/print\/PrintServiceLookupProvider.java","additions":5,"deletions":33,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -188,0 +188,8 @@\n+JNIEXPORT void JNICALL\n+Java_sun_print_PrintServiceLookupProvider_notifyLocalPrinterChange(JNIEnv *env,\n+                                                                   jobject peer)\n+{\n+    jclass cls = env->GetObjectClass(peer);\n+    CHECK_NULL(cls);\n+    jmethodID refresh = env->GetMethodID(cls, \"refreshServices\", \"()V\");\n+    CHECK_NULL(refresh);\n@@ -189,4 +197,0 @@\n-JNIEXPORT jlong JNICALL\n-Java_sun_print_PrintServiceLookupProvider_notifyFirstPrinterChange(JNIEnv *env,\n-                                                                jobject peer,\n-                                                                jstring printer) {\n@@ -194,14 +198,3 @@\n-\n-    LPTSTR printerName = NULL;\n-    if (printer != NULL) {\n-        printerName = (LPTSTR)JNU_GetStringPlatformChars(env,\n-                                                         printer,\n-                                                         NULL);\n-        JNU_ReleaseStringPlatformChars(env, printer, printerName);\n-    }\n-\n-    \/\/ printerName - \"Win NT\/2K\/XP: If NULL, it indicates the local printer\n-    \/\/ server\" - MSDN.   Win9x : OpenPrinter returns 0.\n-    BOOL ret = OpenPrinter(printerName, &hPrinter, NULL);\n-    if (!ret) {\n-      return (jlong)-1;\n+    LPTSTR printerName = NULL; \/\/ NULL indicates the local printer server\n+    if (!::OpenPrinter(printerName, &hPrinter, NULL)) {\n+        return;\n@@ -209,1 +202,0 @@\n-\n@@ -218,18 +210,13 @@\n-    return (chgObj == INVALID_HANDLE_VALUE) ? (jlong)-1 : (jlong)chgObj;\n-}\n-\n-\n-\n-JNIEXPORT void JNICALL\n-Java_sun_print_PrintServiceLookupProvider_notifyClosePrinterChange(JNIEnv *env,\n-                                                                jobject peer,\n-                                                                jlong chgObject) {\n-    FindClosePrinterChangeNotification((HANDLE)chgObject);\n-}\n-\n-\n-JNIEXPORT jint JNICALL\n-Java_sun_print_PrintServiceLookupProvider_notifyPrinterChange(JNIEnv *env,\n-                                                           jobject peer,\n-                                                           jlong chgObject) {\n-    DWORD dwChange;\n+    if (chgObj != INVALID_HANDLE_VALUE) {\n+        BOOL keepMonitoring;\n+        do {\n+            keepMonitoring = FALSE;\n+            if (WaitForSingleObject(chgObj, INFINITE) == WAIT_OBJECT_0) {\n+                DWORD dwChange;\n+                keepMonitoring = FindNextPrinterChangeNotification(\n+                                                 chgObj, &dwChange, NULL, NULL);\n+            }\n+            if (keepMonitoring) {\n+                env->CallVoidMethod(peer, refresh);\n+            }\n+        } while (keepMonitoring && !env->ExceptionCheck());\n@@ -237,6 +224,1 @@\n-    DWORD ret = WaitForSingleObject((HANDLE)chgObject, INFINITE);\n-    if (ret == WAIT_OBJECT_0) {\n-        return(FindNextPrinterChangeNotification((HANDLE)chgObject,\n-                                                  &dwChange, NULL, NULL));\n-    } else {\n-        return 0;\n+        FindClosePrinterChangeNotification(chgObj);\n@@ -244,0 +226,1 @@\n+    ::ClosePrinter(hPrinter);\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/WPrinterJob.cpp","additions":26,"deletions":43,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.Arrays;\n+\n+import javax.print.PrintServiceLookup;\n+\n+\/*\n+ * @test\n+ * @bug 8241829\n+ *\/\n+public final class PrintServicesSecurityManager {\n+\n+    public static void main(String[] args) throws InterruptedException {\n+        System.setSecurityManager(new SecurityManager());\n+        test();\n+        Thread.sleep(3000); \/\/ to be sure the pooling thread started\n+        test();\n+    }\n+\n+    private static void test() {\n+        Object[] services = PrintServiceLookup.lookupPrintServices(null, null);\n+        if (services.length != 0) {\n+            System.err.println(\"services = \" + Arrays.toString(services));\n+            throw new RuntimeException(\"The array of Services must be empty\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrintServicesSecurityManager.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"}]}