{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+\n@@ -27,2 +28,7 @@\n-import java.awt.*;\n-import java.awt.peer.*;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.SystemColor;\n+import java.awt.Window;\n+import java.awt.peer.DialogPeer;\n@@ -30,2 +36,2 @@\n-import sun.awt.*;\n-import sun.awt.im.*;\n+import sun.awt.AWTAccessor;\n+import sun.awt.im.InputMethodManager;\n@@ -113,2 +119,0 @@\n-        } else {\n-            return new Dimension(getSysMinWidth(), getSysMinHeight());\n@@ -116,0 +120,2 @@\n+        return new Dimension(scaleDownX(getSysMinWidth()),\n+                             scaleDownY(getSysMinHeight()));\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WDialogPeer.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-    public Dimension getMinimumSize() {\n+    public final Dimension getMinimumSize() {\n@@ -153,1 +153,2 @@\n-            d.setSize(getSysMinWidth(), getSysMinHeight());\n+            d.setSize(scaleDownX(getSysMinWidth()),\n+                      scaleDownY(getSysMinHeight()));\n@@ -156,1 +157,1 @@\n-            d.height += getSysMenuHeight();\n+            d.height += scaleDownY(getSysMenuHeight());\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WFramePeer.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -441,4 +441,2 @@\n-            int msw = getSysMinWidth();\n-            int msh = getSysMinHeight();\n-            int w = (minimumSize.width >= msw) ? minimumSize.width : msw;\n-            int h = (minimumSize.height >= msh) ? minimumSize.height : msh;\n+            int w = Math.max(minimumSize.width, scaleDownX(getSysMinWidth()));\n+            int h = Math.max(minimumSize.height, scaleDownY(getSysMinHeight()));\n@@ -726,0 +724,16 @@\n+    final int scaleUpX(int x) {\n+        return Region.clipRound(x * scaleX);\n+    }\n+\n+    final int scaleUpY(int y) {\n+        return Region.clipRound(y * scaleY);\n+    }\n+\n+    final int scaleDownX(int x) {\n+        return Region.clipRound(x \/ scaleX);\n+    }\n+\n+    final int scaleDownY(int y) {\n+        return Region.clipRound(y \/ scaleY);\n+    }\n+\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WWindowPeer.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -2579,2 +2579,2 @@\n-                int minWidth = ::GetSystemMetrics(SM_CXMIN);\n-                int minHeight = ::GetSystemMetrics(SM_CYMIN);\n+                int minWidth = p->ScaleDownX(::GetSystemMetrics(SM_CXMIN));\n+                int minHeight = p->ScaleDownY(::GetSystemMetrics(SM_CYMIN));\n@@ -3876,1 +3876,1 @@\n-    \/\/ global refs and mds are deleted in _SetMinSize\n+    \/\/ global refs and mds are deleted in _SetOpacity\n@@ -3897,1 +3897,1 @@\n-    \/\/ global refs and mds are deleted in _SetMinSize\n+    \/\/ global refs and mds are deleted in _SetOpaque\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Window.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -556,2 +556,0 @@\n-java\/awt\/Mixing\/AWT_Mixing\/MixingFrameResizing.java 8238720 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/HierarchyBoundsListenerMixingTest.java 8238720 windows-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @bug 6768230\n+ * @bug 6768230 8221823\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/HierarchyBoundsListenerMixingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * @bug 6777370\n+ * @bug 6777370 8221823\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/MixingFrameResizing.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @bug 6786219\n+ * @bug 6786219 8221823\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/MixingPanelsResizing.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Window;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/**\n+ * @test\n+ * @bug 8221823\n+ * @key headful\n+ * @summary Verifies TOP level component's minimumSize using different DPI\n+ * @library \/test\/lib\n+ * @run main\/othervm -Dsun.java2d.uiScale=1 MinimumSizeDPIVariation\n+ *\/\n+public final class MinimumSizeDPIVariation {\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            Dimension minimumSize = test(new Frame());\n+            checkAllDPI(\"frame\", minimumSize.width, minimumSize.height);\n+            minimumSize = test(new Window(null));\n+            checkAllDPI(\"window\", minimumSize.width, minimumSize.height);\n+            minimumSize = test(new Dialog((Frame) null));\n+            checkAllDPI(\"dialog\", minimumSize.width, minimumSize.height);\n+        } else {\n+            String comp = args[0];\n+            int w = Integer.parseInt(args[1]);\n+            int h = Integer.parseInt(args[2]);\n+            double scale = Double.parseDouble(args[3]);\n+\n+            System.err.println(\"comp = \" + comp);\n+            System.err.println(\"scale = \" + scale);\n+\n+            Dimension minimumSize = switch (comp) {\n+                case \"frame\" -> test(new Frame());\n+                case \"window\" -> test(new Window(null));\n+                case \"dialog\" -> test(new Dialog((Frame) null));\n+                default -> throw new java.lang.IllegalStateException(\n+                        \"Unexpected value: \" + comp);\n+            };\n+            check(minimumSize.width, Math.max(w \/ scale, 1));\n+            check(minimumSize.height, Math.max(h \/ scale, 1));\n+        }\n+    }\n+\n+    private static Dimension test(Window window) {\n+        try {\n+            window.setLayout(null); \/\/ trigger use the minimum size of the peer\n+            window.setSize(new Dimension(1, 1));\n+            window.pack();\n+            Dimension minimumSize = window.getMinimumSize();\n+            Dimension size = window.getSize();\n+            if (!minimumSize.equals(size)) {\n+                System.err.println(window);\n+                System.err.println(\"Expected: \" + minimumSize);\n+                System.err.println(\"Actual: \" + size);\n+                throw new RuntimeException(\"Wrong size\");\n+            }\n+            return minimumSize;\n+        } finally {\n+            window.dispose();\n+        }\n+    }\n+\n+    private static void check(int actual, double expected) {\n+        double i = 100 * (actual - expected) \/ expected;\n+        if (Math.abs(i) > 10) { \/\/ no more than 10% variation\n+            System.err.println(\"Expected: \" + expected);\n+            System.err.println(\"Actual: \" + actual);\n+            throw new RuntimeException(\"Difference is too big: \" + i);\n+        }\n+    }\n+\n+    private static void checkAllDPI(String comp, int w, int h)\n+            throws Exception {\n+        if (!Platform.isOSX()) {\n+            for (String dpi : List.of(\"1.5\", \"1.75\", \"2\", \"2.5\")) {\n+                runPocess(dpi, comp, w, h);\n+            }\n+        }\n+    }\n+\n+    private static void runPocess(String dpi, String comp, int w, int h)\n+            throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-Dsun.java2d.uiScale=\" + dpi,\n+                MinimumSizeDPIVariation.class.getSimpleName(), comp,\n+                String.valueOf(w), String.valueOf(h), dpi);\n+        Process worker = ProcessTools.startProcess(\"Worker\", pb, null, 20,\n+                TimeUnit.SECONDS);\n+        new OutputAnalyzer(worker).shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Window\/MinimumSizeDPIVariation\/MinimumSizeDPIVariation.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"}]}