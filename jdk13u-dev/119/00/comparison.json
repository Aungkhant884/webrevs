{"files":[{"patch":"@@ -188,0 +188,15 @@\n+    \/\/This is workaround used to draw the highlight\n+    \/\/ when the MENU or MenuItem is selected on some platforms\n+    \/\/This should be properly fixed by reading color from css\n+    private void paintComponentBackground(SynthContext context,\n+                                          Graphics g, int x, int y,\n+                                          int w, int h) {\n+        GTKStyle style = (GTKStyle) context.getStyle();\n+        Color highlightColor =\n+                style.getGTKColor(GTKEngine.WidgetType.TEXT_AREA.ordinal(),\n+                GTKLookAndFeel.synthStateToGTKStateType(SynthConstants.SELECTED).ordinal(),\n+                ColorType.BACKGROUND.getID());\n+        g.setColor(highlightColor);\n+        g.fillRect(x, y, w, h);\n+    }\n+\n@@ -199,0 +214,4 @@\n+            if (GTKLookAndFeel.is3()) {\n+                paintComponentBackground(context, g, x, y, w, h);\n+                return;\n+            }\n@@ -538,28 +557,0 @@\n-    private int getBrightness(Color c) {\n-        return Math.max(c.getRed(), Math.max(c.getGreen(), c.getBlue()));\n-    }\n-\n-    private int getMaxColorDiff(Color c1, Color c2) {\n-        return Math.max(Math.abs(c1.getRed() - c2.getRed()),\n-                Math.max(Math.abs(c1.getGreen() - c2.getGreen()),\n-                        Math.abs(c1.getBlue() - c2.getBlue())));\n-    }\n-\n-    private int scaleColorComponent(int color, double scaleFactor) {\n-        return (int)(color + color * scaleFactor);\n-    }\n-    private Color deriveColor(Color originalColor, int originalBrightness,\n-                              int targetBrightness) {\n-        int r, g, b;\n-        if (originalBrightness == 0) {\n-            r = g = b = targetBrightness;\n-        } else {\n-            double scaleFactor = (targetBrightness - originalBrightness)\n-                    \/ originalBrightness    ;\n-            r = scaleColorComponent(originalColor.getRed(), scaleFactor);\n-            g = scaleColorComponent(originalColor.getGreen(), scaleFactor);\n-            b = scaleColorComponent(originalColor.getBlue(), scaleFactor);\n-        }\n-        return new Color(r, g, b);\n-    }\n-\n@@ -582,50 +573,3 @@\n-            if (GTKLookAndFeel.is3() && context.getRegion() == Region.MENU) {\n-                GTKStyle style = (GTKStyle)context.getStyle();\n-                Color highlightColor = style.getGTKColor(\n-                        GTKEngine.WidgetType.MENU_ITEM.ordinal(),\n-                        gtkState, ColorType.BACKGROUND.getID());\n-                Color backgroundColor = style.getGTKColor(\n-                        GTKEngine.WidgetType.MENU_BAR.ordinal(),\n-                        SynthConstants.ENABLED, ColorType.BACKGROUND.getID());\n-\n-                int minBrightness = 0, maxBrightness = 255;\n-                int minBrightnessDifference = 100;\n-                int actualBrightnessDifference =\n-                        getMaxColorDiff(highlightColor, backgroundColor);\n-                if (actualBrightnessDifference < minBrightnessDifference) {\n-                    int highlightBrightness =\n-                            getBrightness(highlightColor);\n-                    int backgroundBrightness =\n-                            getBrightness(backgroundColor);\n-                    int originalHighlightBrightness =\n-                            highlightBrightness;\n-                    if (highlightBrightness >= backgroundBrightness) {\n-                        if (backgroundBrightness + minBrightnessDifference <=\n-                                maxBrightness) {\n-                            highlightBrightness =\n-                                    backgroundBrightness +\n-                                            minBrightnessDifference;\n-                        } else {\n-                            highlightBrightness =\n-                                    backgroundBrightness -\n-                                            minBrightnessDifference;\n-                        }\n-                    } else {\n-                        if (backgroundBrightness - minBrightnessDifference >=\n-                                minBrightness) {\n-                            highlightBrightness =\n-                                    backgroundBrightness -\n-                                            minBrightnessDifference;\n-                        } else {\n-                            highlightBrightness =\n-                                    backgroundBrightness +\n-                                            minBrightnessDifference;\n-                        }\n-                    }\n-\n-                    g.setColor(deriveColor(highlightColor,\n-                            originalHighlightBrightness,\n-                            highlightBrightness));\n-                    g.fillRect(x, y, w, h);\n-                    return;\n-                }\n+            if (GTKLookAndFeel.is3()) {\n+                paintComponentBackground(context, g, x, y, w, h);\n+                return;\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/GTKPainter.java","additions":22,"deletions":78,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -0,0 +1,206 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @requires (os.family == \"linux\")\n+ * @key headful\n+ * @bug 8248637\n+ * @summary Tests selected JMenu and JMenuitem is properly highlighted in GTKL&F\n+ *  with gtk3 version\n+ * @run main\/othervm -Djdk.gtk.version=3 JMenuSelectedColorTest\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.FlowLayout;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+\n+public class JMenuSelectedColorTest {\n+    private static JFrame frame;\n+    private static JMenu menu;\n+    private static JMenuItem menuitem;\n+    private static Point point;\n+    private static Rectangle rect;\n+    private static Robot robot;\n+    private static final String GTK_LAF_CLASS = \"GTKLookAndFeel\";\n+    private static int minColorDifference = 100;\n+\n+    private static void blockTillDisplayed(Component comp) {\n+        Point p = null;\n+        while (p == null) {\n+            try {\n+                p = comp.getLocationOnScreen();\n+            } catch (IllegalStateException e) {\n+                try {\n+                    Thread.sleep(500);\n+                } catch (InterruptedException ie) {\n+                }\n+            }\n+        }\n+    }\n+\n+    private static int getMaxColorDiff(Color c1, Color c2) {\n+        return Math.max(Math.abs(c1.getRed() - c2.getRed()),\n+                Math.max(Math.abs(c1.getGreen() - c2.getGreen()),\n+                        Math.abs(c1.getBlue() - c2.getBlue())));\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!System.getProperty(\"os.name\").startsWith(\"Linux\")) {\n+            System.out.println(\"This test is meant for Linux platform only\");\n+            return;\n+        }\n+\n+        for (UIManager.LookAndFeelInfo lookAndFeelInfo :\n+                UIManager.getInstalledLookAndFeels()) {\n+            if (lookAndFeelInfo.getClassName().contains(GTK_LAF_CLASS)) {\n+                try {\n+                    UIManager.setLookAndFeel(lookAndFeelInfo.getClassName());\n+                } catch (final UnsupportedLookAndFeelException ignored) {\n+                    System.out.println(\"GTK L&F could not be set, so this \" +\n+                            \"test can not be run in this scenario \");\n+                    return;\n+                }\n+            }\n+        }\n+\n+        robot = new Robot();\n+        robot.setAutoDelay(100);\n+\n+        try {\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                public void run() {\n+                    menu = new JMenu(\"         \") ;\n+                    menuitem = new JMenuItem(\"        \");\n+                    menu.add(menuitem);\n+\n+                    JPanel panel = new JPanel();\n+                    panel.setLayout(new BorderLayout());\n+\n+                    JMenuBar menuBar = new JMenuBar();\n+                    JPanel menuPanel = new JPanel();\n+\n+                    menuPanel.setLayout(new FlowLayout());\n+\n+                    menuBar.add(menu);\n+                    menuPanel.add(menuBar);\n+                    panel.add(menuPanel, BorderLayout.CENTER);\n+                    frame = new JFrame(\"JMenuSelectedColor\");\n+                    frame.add(panel);\n+                    frame.setSize(200, 200);\n+                    frame.setAlwaysOnTop(true);\n+                    frame.setLocationRelativeTo(null);\n+                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+                    frame.setVisible(true);\n+                }\n+            });\n+\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            blockTillDisplayed(menu);\n+            SwingUtilities.invokeAndWait(() -> {\n+                point = menu.getLocationOnScreen();\n+                rect = menu.getBounds();\n+            });\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            Color backgroundColor = robot\n+                    .getPixelColor(point.x+rect.width\/2, point.y+rect.height\/2);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            menu.setSelected(true);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            Color highlightColor = robot\n+                    .getPixelColor(point.x+rect.width\/2, point.y+rect.height\/2);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            int actualColorDifference = getMaxColorDiff(backgroundColor, highlightColor);\n+            if (actualColorDifference < minColorDifference) {\n+                throw new RuntimeException(\"The expected highlight color for \" +\n+                        \"Menu was not found\");\n+            }\n+\n+            robot.mouseMove(point.x + rect.width \/ 2,\n+                    point.y + rect.height \/ 2);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            blockTillDisplayed(menuitem);\n+            SwingUtilities.invokeAndWait(() -> {\n+                point = menuitem.getLocationOnScreen();\n+                rect = menuitem.getBounds();\n+            });\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            backgroundColor = robot\n+                    .getPixelColor(point.x+rect.width\/2, point.y+rect.height\/2);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            robot.mouseMove(point.x + rect.width \/ 2,\n+                    point.y + rect.height \/ 2);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            highlightColor = robot\n+                    .getPixelColor(point.x+rect.width\/2, point.y+rect.height\/2);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            actualColorDifference = getMaxColorDiff(backgroundColor, highlightColor);\n+            if (actualColorDifference < minColorDifference) {\n+                throw new RuntimeException(\"The expected highlight color for \" +\n+                        \"Menuitem was not found\");\n+            }\n+        } finally {\n+            if (frame != null) {\n+                SwingUtilities.invokeAndWait(frame::dispose);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenu\/JMenuSelectedColorTest.java","additions":206,"deletions":0,"binary":false,"changes":206,"status":"added"}]}