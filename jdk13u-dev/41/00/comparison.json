{"files":[{"patch":"@@ -36,3 +36,0 @@\n-#ifdef ASSERT\n-int CompileTask::_num_allocated_tasks = 0;\n-#endif\n@@ -53,2 +50,0 @@\n-    DEBUG_ONLY(_num_allocated_tasks++;)\n-    assert (WhiteBoxAPI || JVMCI_ONLY(UseJVMCICompiler ||) _num_allocated_tasks < 10000, \"Leaking compilation tasks?\");\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -78,4 +78,0 @@\n-#ifdef ASSERT\n-  static int          _num_allocated_tasks;\n-#endif\n-\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8163511\n+ * @bug 8163511 8230402\n@@ -29,1 +29,1 @@\n- * @run main\/othervm -XX:-TieredCompilation -XX:CompileThreshold=2 -XX:CICompilerCount=1\n+ * @run main\/othervm\/timeout=300 -XX:-TieredCompilation -XX:CompileThreshold=2 -XX:CICompilerCount=1\n@@ -31,1 +31,1 @@\n- * @run main\/othervm -XX:TieredCompileTaskTimeout=1000 -XX:CompileThresholdScaling=0.001 -XX:CICompilerCount=2\n+ * @run main\/othervm\/timeout=300 -XX:TieredCompileTaskTimeout=1000 -XX:CompileThresholdScaling=0.001 -XX:CICompilerCount=2\n@@ -40,0 +40,1 @@\n+import java.util.Arrays;\n@@ -43,0 +44,3 @@\n+    public static final int ITERS_A = 1000; \/\/ Increase for longer stress testing\n+\n+    public static int iArr[] = new int[100];\n@@ -66,0 +70,53 @@\n+    \/\/ More methods that do some more complex things. Therefore, the compiler needs to spend some more time compiling them.\n+    \/\/ With 50 methods, a queue size of 10000 is also reached in the second run with TieredCompilation enabled.\n+    public static void testA0()  { Arrays.sort(iArr); }\n+    public static void testA1()  { Arrays.sort(iArr); }\n+    public static void testA2()  { Arrays.sort(iArr); }\n+    public static void testA3()  { Arrays.sort(iArr); }\n+    public static void testA4()  { Arrays.sort(iArr); }\n+    public static void testA5()  { Arrays.sort(iArr); }\n+    public static void testA6()  { Arrays.sort(iArr); }\n+    public static void testA7()  { Arrays.sort(iArr); }\n+    public static void testA8()  { Arrays.sort(iArr); }\n+    public static void testA9()  { Arrays.sort(iArr); }\n+    public static void testA10() { Arrays.sort(iArr); }\n+    public static void testA11() { Arrays.sort(iArr); }\n+    public static void testA12() { Arrays.sort(iArr); }\n+    public static void testA13() { Arrays.sort(iArr); }\n+    public static void testA14() { Arrays.sort(iArr); }\n+    public static void testA15() { Arrays.sort(iArr); }\n+    public static void testA16() { Arrays.sort(iArr); }\n+    public static void testA17() { Arrays.sort(iArr); }\n+    public static void testA18() { Arrays.sort(iArr); }\n+    public static void testA19() { Arrays.sort(iArr); }\n+    public static void testA20() { Arrays.sort(iArr); }\n+    public static void testA21() { Arrays.sort(iArr); }\n+    public static void testA22() { Arrays.sort(iArr); }\n+    public static void testA23() { Arrays.sort(iArr); }\n+    public static void testA24() { Arrays.sort(iArr); }\n+    public static void testA25() { Arrays.sort(iArr); }\n+    public static void testA26() { Arrays.sort(iArr); }\n+    public static void testA27() { Arrays.sort(iArr); }\n+    public static void testA28() { Arrays.sort(iArr); }\n+    public static void testA29() { Arrays.sort(iArr); }\n+    public static void testA30() { Arrays.sort(iArr); }\n+    public static void testA31() { Arrays.sort(iArr); }\n+    public static void testA32() { Arrays.sort(iArr); }\n+    public static void testA33() { Arrays.sort(iArr); }\n+    public static void testA34() { Arrays.sort(iArr); }\n+    public static void testA35() { Arrays.sort(iArr); }\n+    public static void testA36() { Arrays.sort(iArr); }\n+    public static void testA37() { Arrays.sort(iArr); }\n+    public static void testA38() { Arrays.sort(iArr); }\n+    public static void testA39() { Arrays.sort(iArr); }\n+    public static void testA40() { Arrays.sort(iArr); }\n+    public static void testA41() { Arrays.sort(iArr); }\n+    public static void testA42() { Arrays.sort(iArr); }\n+    public static void testA43() { Arrays.sort(iArr); }\n+    public static void testA44() { Arrays.sort(iArr); }\n+    public static void testA45() { Arrays.sort(iArr); }\n+    public static void testA46() { Arrays.sort(iArr); }\n+    public static void testA47() { Arrays.sort(iArr); }\n+    public static void testA48() { Arrays.sort(iArr); }\n+    public static void testA49() { Arrays.sort(iArr); }\n+\n@@ -67,0 +124,5 @@\n+        run();\n+        runA();\n+    }\n+\n+    public static void run() throws Throwable {\n@@ -87,0 +149,19 @@\n+\n+    public static void runA() throws Throwable {\n+        Class<?> thisClass = TestOverloadCompileQueues.class;\n+        ClassLoader defaultLoader = thisClass.getClassLoader();\n+        URL classesDir = thisClass.getProtectionDomain().getCodeSource().getLocation();\n+\n+        for (int i = 0; i < ITERS_A; ++i) {\n+            \/\/ Load test class with own class loader\n+            URLClassLoader myLoader = URLClassLoader.newInstance(new URL[] {classesDir}, defaultLoader.getParent());\n+            Class<?> testClass = Class.forName(thisClass.getCanonicalName(), true, myLoader);\n+\n+            \/\/ Execute all test methods to trigger compilation and fill up compile queue\n+            for (int j = 0; j < 50; ++j) {\n+                Method method = testClass.getDeclaredMethod(\"testA\" + j);\n+                method.invoke(null);\n+                method.invoke(null);\n+            }\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/classUnloading\/methodUnloading\/TestOverloadCompileQueues.java","additions":84,"deletions":3,"binary":false,"changes":87,"status":"modified"}]}