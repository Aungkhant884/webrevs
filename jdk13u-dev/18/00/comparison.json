{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -422,0 +422,1 @@\n+        NamingException namingException = null;\n@@ -424,1 +425,1 @@\n-            \/\/ a response is received\n+            \/\/ a response is received OR until the connection is closed or cancelled\n@@ -430,0 +431,7 @@\n+        } catch (CommunicationException ce) {\n+            \/\/ Re-throw\n+            throw ce;\n+        } catch (NamingException ne) {\n+            \/\/ Connection is timed out OR closed\/cancelled\n+            namingException = ne;\n+            rber = null;\n@@ -434,4 +442,8 @@\n-            throw new NamingException(\n-                    \"LDAP response read timed out, timeout used:\"\n-                            + readTimeout + \"ms.\" );\n-\n+        }\n+        \/\/ namingException can be not null in the following cases:\n+        \/\/  a) The response is timed-out\n+        \/\/  b) LDAP request connection has been closed or cancelled\n+        \/\/ The exception message is initialized in LdapRequest::getReplyBer\n+        if (namingException != null) {\n+            \/\/ Re-throw NamingException after all cleanups are done\n+            throw namingException;\n@@ -856,9 +868,0 @@\n-\/*\n-if (dump > 0) {\n-System.err.println(\"seqlen: \" + seqlen);\n-System.err.println(\"bufsize: \" + offset);\n-System.err.println(\"bytesleft: \" + bytesleft);\n-System.err.println(\"bytesread: \" + bytesread);\n-}\n-*\/\n-\n@@ -972,32 +975,0 @@\n-\n-    \/\/ This code must be uncommented to run the LdapAbandonTest.\n-    \/*public void sendSearchReqs(String dn, int numReqs) {\n-        int i;\n-        String attrs[] = null;\n-        for(i = 1; i <= numReqs; i++) {\n-            BerEncoder ber = new BerEncoder(2048);\n-\n-            try {\n-            ber.beginSeq(Ber.ASN_SEQUENCE | Ber.ASN_CONSTRUCTOR);\n-                ber.encodeInt(i);\n-                ber.beginSeq(LdapClient.LDAP_REQ_SEARCH);\n-                    ber.encodeString(dn == null ? \"\" : dn);\n-                    ber.encodeInt(0, LdapClient.LBER_ENUMERATED);\n-                    ber.encodeInt(3, LdapClient.LBER_ENUMERATED);\n-                    ber.encodeInt(0);\n-                    ber.encodeInt(0);\n-                    ber.encodeBoolean(true);\n-                    LdapClient.encodeFilter(ber, \"\");\n-                    ber.beginSeq(Ber.ASN_SEQUENCE | Ber.ASN_CONSTRUCTOR);\n-                        ber.encodeStringArray(attrs);\n-                    ber.endSeq();\n-                ber.endSeq();\n-            ber.endSeq();\n-            writeRequest(ber, i);\n-            \/\/System.err.println(\"wrote request \" + i);\n-            } catch (Exception ex) {\n-            \/\/System.err.println(\"ldap.search: Caught \" + ex + \" building req\");\n-            }\n-\n-        }\n-    } *\/\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/Connection.java","additions":18,"deletions":47,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import javax.naming.NamingException;\n@@ -37,0 +38,2 @@\n+    private final static String CLOSE_MSG = \"LDAP connection has been closed\";\n+    private final static String TIMEOUT_MSG_FMT = \"LDAP response read timed out, timeout used: %d ms.\";\n@@ -98,1 +101,9 @@\n-    BerDecoder getReplyBer(long millis) throws CommunicationException,\n+    \/**\n+     * Read reply BER\n+     * @param millis timeout, infinite if the value is negative\n+     * @return BerDecoder if reply was read successfully\n+     * @throws CommunicationException request has been canceled and request does not need to be abandoned\n+     * @throws NamingException request has been closed or timed out. Request does need to be abandoned\n+     * @throws InterruptedException LDAP operation has been interrupted\n+     *\/\n+    BerDecoder getReplyBer(long millis) throws NamingException,\n@@ -105,1 +116,1 @@\n-            return null;\n+            throw new NamingException(CLOSE_MSG);\n@@ -116,1 +127,9 @@\n-        return result == EOF ? null : result;\n+        \/\/ poll from 'replies' blocking queue ended-up with timeout\n+        if (result == null) {\n+            throw new NamingException(String.format(TIMEOUT_MSG_FMT, millis));\n+        }\n+        \/\/ Unexpected EOF can be caused by connection closure or cancellation\n+        if (result == EOF) {\n+            throw new NamingException(CLOSE_MSG);\n+        }\n+        return result;\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/LdapRequest.java","additions":23,"deletions":4,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,164 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8062947\n+ * @summary Test that NamingException message text matches the failure reason\n+ * @library \/test\/lib lib\n+ * @run testng NamingExceptionMessageTest\n+ *\/\n+\n+import javax.naming.Context;\n+import javax.naming.NamingException;\n+import javax.naming.directory.InitialDirContext;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.Hashtable;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.testng.annotations.Test;\n+import org.testng.Assert;\n+import jdk.test.lib.net.URIBuilder;\n+\n+public class NamingExceptionMessageTest {\n+\n+    @Test\n+    public void timeoutMessageTest() throws Exception {\n+        try (var ldapServer = TestLdapServer.newInstance(false)) {\n+            ldapServer.start();\n+            ldapServer.awaitStartup();\n+            var env = ldapServer.getInitialLdapCtxEnvironment(TIMEOUT_VALUE);\n+            var namingException = Assert.expectThrows(NamingException.class, () -> new InitialDirContext(env));\n+            System.out.println(\"Got naming exception:\" + namingException);\n+            Assert.assertEquals(namingException.getMessage(), EXPECTED_TIMEOUT_MESSAGE);\n+        }\n+    }\n+\n+    @Test\n+    public void connectionClosureMessageTest() throws Exception {\n+        try (var ldapServer = TestLdapServer.newInstance(true)) {\n+            ldapServer.start();\n+            ldapServer.awaitStartup();\n+            var env = ldapServer.getInitialLdapCtxEnvironment(0);\n+            var namingException = Assert.expectThrows(NamingException.class, () -> new InitialDirContext(env));\n+            System.out.println(\"Got naming exception:\" + namingException);\n+            Assert.assertEquals(namingException.getMessage(), EXPECTED_CLOSURE_MESSAGE);\n+        }\n+    }\n+\n+    \/\/ Test LDAP server\n+    private static class TestLdapServer extends BaseLdapServer {\n+\n+        private final boolean closeConnections;\n+        private final CountDownLatch startupLatch = new CountDownLatch(1);\n+\n+        public Hashtable<Object, Object> getInitialLdapCtxEnvironment(int readTimeoutValue) {\n+            \/\/ Create environment for initial LDAP context\n+            Hashtable<Object, Object> env = new Hashtable<>();\n+\n+            \/\/ Activate LDAPv3\n+            env.put(\"java.naming.ldap.version\", \"3\");\n+\n+            \/\/ De-activate the ManageDsaIT control\n+            env.put(Context.REFERRAL, \"follow\");\n+            env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n+            env.put(Context.PROVIDER_URL, getUrlString());\n+            env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n+            env.put(Context.SECURITY_PRINCIPAL, \"name\");\n+            env.put(Context.SECURITY_CREDENTIALS, \"pwd\");\n+\n+            if (readTimeoutValue > 0) {\n+                env.put(\"com.sun.jndi.ldap.read.timeout\", String.valueOf(readTimeoutValue));\n+                env.put(\"com.sun.jndi.ldap.connect.timeout\", String.valueOf(readTimeoutValue));\n+            }\n+\n+            return env;\n+        }\n+\n+        private String getUrlString() {\n+            String url = URIBuilder.newBuilder()\n+                    .scheme(\"ldap\")\n+                    .loopback()\n+                    .port(getPort())\n+                    .buildUnchecked()\n+                    .toString();\n+            return url;\n+        }\n+\n+        public static TestLdapServer newInstance(boolean closeConnections) throws IOException {\n+            ServerSocket srvSock = new ServerSocket();\n+            srvSock.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n+            return new TestLdapServer(srvSock, closeConnections);\n+        }\n+\n+        void awaitStartup() throws InterruptedException {\n+            startupLatch.await();\n+        }\n+\n+        private TestLdapServer(ServerSocket serverSocket, boolean closeConnections) {\n+            super(serverSocket);\n+            this.closeConnections = closeConnections;\n+\n+        }\n+\n+        @Override\n+        protected void beforeAcceptingConnections() {\n+            startupLatch.countDown();\n+        }\n+\n+        @Override\n+        protected void handleRequest(Socket socket,\n+                                     LdapMessage msg,\n+                                     OutputStream out)\n+                throws IOException {\n+            switch (msg.getOperation()) {\n+                case BIND_REQUEST:\n+                    if (closeConnections) {\n+                        closeSilently(socket);\n+                    } else {\n+                        try {\n+                            TimeUnit.DAYS.sleep(Integer.MAX_VALUE);\n+                        } catch (InterruptedException e) {\n+                            Thread.currentThread().interrupt();\n+                        }\n+                    }\n+                default:\n+                    break;\n+            }\n+        }\n+    }\n+\n+    \/\/ Expected message for case when connection is closed on server side\n+    private static final String EXPECTED_CLOSURE_MESSAGE = \"LDAP connection has been closed\";\n+    \/\/ read and connect timeouts value\n+    private static final int TIMEOUT_VALUE = 129;\n+    \/\/ Expected message text when connection is timed-out\n+    private static final String EXPECTED_TIMEOUT_MESSAGE = String.format(\n+            \"LDAP response read timed out, timeout used: %d ms.\", TIMEOUT_VALUE);\n+}\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/NamingExceptionMessageTest.java","additions":164,"deletions":0,"binary":false,"changes":164,"status":"added"}]}