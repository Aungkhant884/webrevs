{"files":[{"patch":"@@ -91,0 +91,1 @@\n+    cur_cpu_time -= excess;\n@@ -94,1 +95,0 @@\n-      cur_cpu_time -= excess;\n@@ -96,1 +96,0 @@\n-      cur_cpu_time -= excess;\n@@ -98,0 +97,1 @@\n+      cur_user_time -= user_time;\n@@ -99,1 +99,0 @@\n-      cur_user_time = 0;\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrThreadCPULoadEvent.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -143,0 +143,6 @@\n+\n+  MockOs::user_cpu_time += 50 * NANOSECS_PER_MILLISEC;\n+  MockOs::system_cpu_time += 50 * NANOSECS_PER_MILLISEC;\n+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (400 + 400) * NANOSECS_PER_MILLISEC, 1));\n+  EXPECT_FLOAT_EQ(0.125, event.user);\n+  EXPECT_FLOAT_EQ(0.125, event.system);\n@@ -172,0 +178,37 @@\n+\n+  \/\/ Third call: make sure there are no leftovers\n+  MockOs::user_cpu_time += 50 * NANOSECS_PER_MILLISEC;\n+  MockOs::system_cpu_time += 50 * NANOSECS_PER_MILLISEC;\n+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (200 + 400 + 400) * NANOSECS_PER_MILLISEC, 1));\n+  EXPECT_FLOAT_EQ(0.125, event.user);\n+  EXPECT_FLOAT_EQ(0.125, event.system);\n+}\n+\n+TEST_VM_F(JfrTestThreadCPULoadSingle, UserAboveMaximumNonZeroBase) {\n+\n+  \/\/ Setup a non zero base\n+  \/\/ Previously there was a bug when cur_user_time would be reset to zero and test that uses zero base would fail to detect it\n+  MockOs::user_cpu_time = 100 * NANOSECS_PER_MILLISEC;\n+  MockOs::system_cpu_time = 100 * NANOSECS_PER_MILLISEC;\n+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, 400 * NANOSECS_PER_MILLISEC, 1));\n+  EXPECT_FLOAT_EQ(0.25, event.user);\n+  EXPECT_FLOAT_EQ(0.25, event.system);\n+\n+  \/\/ First call will not report above 100%\n+  MockOs::user_cpu_time += 200 * NANOSECS_PER_MILLISEC;\n+  MockOs::system_cpu_time += 100 * NANOSECS_PER_MILLISEC;\n+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (400 + 200) * NANOSECS_PER_MILLISEC, 1));\n+  EXPECT_FLOAT_EQ(0.5, event.user);\n+  EXPECT_FLOAT_EQ(0.5, event.system);\n+\n+  \/\/ Second call will see an extra 100 millisecs user time from the remainder\n+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (400 + 200 + 400) * NANOSECS_PER_MILLISEC, 1));\n+  EXPECT_FLOAT_EQ(0.25, event.user);\n+  EXPECT_FLOAT_EQ(0, event.system);\n+\n+  \/\/ Third call: make sure there are no leftovers\n+  MockOs::user_cpu_time += 50 * NANOSECS_PER_MILLISEC;\n+  MockOs::system_cpu_time += 50 * NANOSECS_PER_MILLISEC;\n+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (400 + 200 + 400 + 400) * NANOSECS_PER_MILLISEC, 1));\n+  EXPECT_FLOAT_EQ(0.125, event.user);\n+  EXPECT_FLOAT_EQ(0.125, event.system);\n@@ -187,0 +230,37 @@\n+\n+  \/\/ Third call: make sure there are no leftovers\n+  MockOs::user_cpu_time += 50 * NANOSECS_PER_MILLISEC;\n+  MockOs::system_cpu_time += 50 * NANOSECS_PER_MILLISEC;\n+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (200 + 400 + 400) * NANOSECS_PER_MILLISEC, 1));\n+  EXPECT_FLOAT_EQ(0.125, event.user);\n+  EXPECT_FLOAT_EQ(0.125, event.system);\n+}\n+\n+TEST_VM_F(JfrTestThreadCPULoadSingle, SystemAboveMaximumNonZeroBase) {\n+\n+  \/\/ Setup a non zero base\n+  \/\/ Previously there was a bug when cur_user_time would be reset to zero and test that uses zero base would fail to detect it\n+  MockOs::user_cpu_time = 100 * NANOSECS_PER_MILLISEC;\n+  MockOs::system_cpu_time = 100 * NANOSECS_PER_MILLISEC;\n+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, 400 * NANOSECS_PER_MILLISEC, 1));\n+  EXPECT_FLOAT_EQ(0.25, event.user);\n+  EXPECT_FLOAT_EQ(0.25, event.system);\n+\n+  \/\/ First call will not report above 100%\n+  MockOs::user_cpu_time += 100 * NANOSECS_PER_MILLISEC;\n+  MockOs::system_cpu_time += 300 * NANOSECS_PER_MILLISEC;\n+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (400 + 200) * NANOSECS_PER_MILLISEC, 1));\n+  EXPECT_FLOAT_EQ(0, event.user);\n+  EXPECT_FLOAT_EQ(1, event.system);\n+\n+  \/\/ Second call will see an extra 100 millisecs user and system time from the remainder\n+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (400 + 200 + 400) * NANOSECS_PER_MILLISEC, 1));\n+  EXPECT_FLOAT_EQ(0.25, event.user);\n+  EXPECT_FLOAT_EQ(0.25, event.system);\n+\n+  \/\/ Third call: make sure there are no leftovers\n+  MockOs::user_cpu_time += 50 * NANOSECS_PER_MILLISEC;\n+  MockOs::system_cpu_time += 50 * NANOSECS_PER_MILLISEC;\n+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (400 + 200 + 400 + 400) * NANOSECS_PER_MILLISEC, 1));\n+  EXPECT_FLOAT_EQ(0.125, event.user);\n+  EXPECT_FLOAT_EQ(0.125, event.system);\n","filename":"test\/hotspot\/gtest\/jfr\/test_threadCpuLoad.cpp","additions":80,"deletions":0,"binary":false,"changes":80,"status":"modified"}]}