{"files":[{"patch":"@@ -228,0 +228,2 @@\n+                boolean isSwapEnabled = getSwapEnabled(memorySubSystem);\n+                memorySubSystem.setSwapEnabled(isSwapEnabled);\n@@ -237,0 +239,6 @@\n+    private static boolean getSwapEnabled(MemorySubSystem subsystem) {\n+        long retval = SubSystem.getLongValue(subsystem, \"memory.memsw.limit_in_bytes\");\n+        return retval > 0;\n+    }\n+\n+\n@@ -471,0 +479,3 @@\n+        if (!memory.isSwapEnabled()) {\n+            return getMemoryFailCount();\n+        }\n@@ -475,0 +486,3 @@\n+        if (!memory.isSwapEnabled()) {\n+            return getMemoryLimit();\n+        }\n@@ -491,0 +505,3 @@\n+        if (!memory.isSwapEnabled()) {\n+            return getMemoryMaxUsage();\n+        }\n@@ -495,0 +512,3 @@\n+        if (!memory.isSwapEnabled()) {\n+            return getMemoryUsage();\n+        }\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv1\/Metrics.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -269,0 +269,1 @@\n+        private boolean swapenabled;\n@@ -282,0 +283,7 @@\n+        boolean isSwapEnabled() {\n+            return swapenabled;\n+        }\n+\n+        void setSwapEnabled(boolean swapenabled) {\n+            this.swapenabled = swapenabled;\n+        }\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv1\/SubSystem.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -151,4 +151,6 @@\n-           .shouldMatch(\"OperatingSystemMXBean\\\\.getFreePhysicalMemorySize: [1-9][0-9]+\")\n-           .shouldMatch(\"OperatingSystemMXBean\\\\.getFreeSwapSpaceSize: [1-9][0-9]+\");\n-        \/\/ in case of warnings like : \"Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.\"\n-        \/\/ the getTotalSwapSpaceSize does not return the expected result, but 0\n+           .shouldMatch(\"OperatingSystemMXBean\\\\.getFreePhysicalMemorySize: [1-9][0-9]+\");\n+\n+        \/\/ in case of warnings like : \"Your kernel does not support swap limit capabilities\n+        \/\/ or the cgroup is not mounted. Memory limited without swap.\"\n+        \/\/ the getTotalSwapSpaceSize and getFreeSwapSpaceSize return the system\n+        \/\/ values as the container setup isn't supported in that case.\n@@ -158,1 +160,7 @@\n-            out.shouldContain(\"OperatingSystemMXBean.getTotalSwapSpaceSize: 0\");\n+            out.shouldMatch(\"OperatingSystemMXBean.getTotalSwapSpaceSize: [0-9]+\");\n+        }\n+\n+        try {\n+            out.shouldMatch(\"OperatingSystemMXBean\\\\.getFreeSwapSpaceSize: [1-9][0-9]+\");\n+        } catch(RuntimeException ex) {\n+            out.shouldMatch(\"OperatingSystemMXBean\\\\.getFreeSwapSpaceSize: 0\");\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -64,1 +64,2 @@\n-        long count = Metrics.systemMetrics().getMemoryFailCount();\n+        long memAndSwapLimit = Metrics.systemMetrics().getMemoryAndSwapLimit();\n+        long memLimit = Metrics.systemMetrics().getMemoryLimit();\n@@ -66,8 +67,17 @@\n-        \/\/ Allocate 512M of data\n-        byte[][] bytes = new byte[64][];\n-        for (int i = 0; i < 64; i++) {\n-            try {\n-                bytes[i] = new byte[8 * 1024 * 1024];\n-                \/\/ Break out as soon as we see an increase in failcount\n-                \/\/ to avoid getting killed by the OOM killer.\n-                if (Metrics.systemMetrics().getMemoryFailCount() > count) {\n+        \/\/ We need swap to execute this test or will SEGV\n+        if (memAndSwapLimit <= memLimit) {\n+            System.out.println(\"No swap memory limits, test case skipped\");\n+        } else {\n+            long count = Metrics.systemMetrics().getMemoryFailCount();\n+\n+            \/\/ Allocate 512M of data\n+            byte[][] bytes = new byte[64][];\n+            for (int i = 0; i < 64; i++) {\n+                try {\n+                    bytes[i] = new byte[8 * 1024 * 1024];\n+                    \/\/ Break out as soon as we see an increase in failcount\n+                    \/\/ to avoid getting killed by the OOM killer.\n+                    if (Metrics.systemMetrics().getMemoryFailCount() > count) {\n+                        break;\n+                    }\n+                } catch (Error e) { \/\/ OOM error\n@@ -76,2 +86,0 @@\n-            } catch (Error e) { \/\/ OOM error\n-                break;\n@@ -79,5 +87,5 @@\n-        }\n-        if (Metrics.systemMetrics().getMemoryFailCount() <= count) {\n-            throw new RuntimeException(\"Memory fail count : new : [\"\n-                    + Metrics.systemMetrics().getMemoryFailCount() + \"]\"\n-                    + \", old : [\" + count + \"]\");\n+            if (Metrics.systemMetrics().getMemoryFailCount() <= count) {\n+                throw new RuntimeException(\"Memory fail count : new : [\"\n+                        + Metrics.systemMetrics().getMemoryFailCount() + \"]\"\n+                        + \", old : [\" + count + \"]\");\n+            }\n@@ -115,0 +123,1 @@\n+        long actualMemAndSwap = Metrics.systemMetrics().getMemoryAndSwapLimit();\n@@ -117,2 +126,3 @@\n-                || expectedMemAndSwap != Metrics.systemMetrics().getMemoryAndSwapLimit()) {\n-            System.err.println(\"Memory and swap limit not equal, expected : [\"\n+                || (expectedMemAndSwap != actualMemAndSwap\n+                && expectedMem != actualMemAndSwap)) {\n+            throw new RuntimeException(\"Memory and swap limit not equal, expected : [\"\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/MetricsMemoryTester.java","additions":28,"deletions":18,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -313,5 +313,7 @@\n-        oldVal = metrics.getMemoryAndSwapFailCount();\n-        newVal = getLongValueFromFile(SubSystem.MEMORY, \"memory.memsw.failcnt\");\n-        if (!compareWithErrorMargin(oldVal, newVal)) {\n-            fail(SubSystem.MEMORY, \"memory.memsw.failcnt\", oldVal, newVal);\n-        }\n+        \/\/ Skip swap tests if no swap is configured.\n+        if (metrics.getMemoryAndSwapLimit() > metrics.getMemoryLimit()) {\n+            oldVal = metrics.getMemoryAndSwapFailCount();\n+            newVal = getLongValueFromFile(SubSystem.MEMORY, \"memory.memsw.failcnt\");\n+            if (!compareWithErrorMargin(oldVal, newVal)) {\n+                fail(SubSystem.MEMORY, \"memory.memsw.failcnt\", oldVal, newVal);\n+            }\n@@ -319,6 +321,6 @@\n-        oldVal = metrics.getMemoryAndSwapLimit();\n-        newVal = getLongValueFromFile(SubSystem.MEMORY, \"memory.memsw.limit_in_bytes\");\n-        newVal = newVal > unlimited_minimum ? -1L : newVal;\n-        if (!compareWithErrorMargin(oldVal, newVal)) {\n-            fail(SubSystem.MEMORY, \"memory.memsw.limit_in_bytes\", oldVal, newVal);\n-        }\n+            oldVal = metrics.getMemoryAndSwapLimit();\n+            newVal = getLongValueFromFile(SubSystem.MEMORY, \"memory.memsw.limit_in_bytes\");\n+            newVal = newVal > unlimited_minimum ? -1L : newVal;\n+            if (!compareWithErrorMargin(oldVal, newVal)) {\n+                fail(SubSystem.MEMORY, \"memory.memsw.limit_in_bytes\", oldVal, newVal);\n+            }\n@@ -326,5 +328,5 @@\n-        oldVal = metrics.getMemoryAndSwapMaxUsage();\n-        newVal = getLongValueFromFile(SubSystem.MEMORY, \"memory.memsw.max_usage_in_bytes\");\n-        if (!compareWithErrorMargin(oldVal, newVal)) {\n-            fail(SubSystem.MEMORY, \"memory.memsw.max_usage_in_bytes\", oldVal, newVal);\n-        }\n+            oldVal = metrics.getMemoryAndSwapMaxUsage();\n+            newVal = getLongValueFromFile(SubSystem.MEMORY, \"memory.memsw.max_usage_in_bytes\");\n+            if (!compareWithErrorMargin(oldVal, newVal)) {\n+                fail(SubSystem.MEMORY, \"memory.memsw.max_usage_in_bytes\", oldVal, newVal);\n+            }\n@@ -332,4 +334,5 @@\n-        oldVal = metrics.getMemoryAndSwapUsage();\n-        newVal = getLongValueFromFile(SubSystem.MEMORY, \"memory.memsw.usage_in_bytes\");\n-        if (!compareWithErrorMargin(oldVal, newVal)) {\n-            fail(SubSystem.MEMORY, \"memory.memsw.usage_in_bytes\", oldVal, newVal);\n+            oldVal = metrics.getMemoryAndSwapUsage();\n+            newVal = getLongValueFromFile(SubSystem.MEMORY, \"memory.memsw.usage_in_bytes\");\n+            if (!compareWithErrorMargin(oldVal, newVal)) {\n+                fail(SubSystem.MEMORY, \"memory.memsw.usage_in_bytes\", oldVal, newVal);\n+            }\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/cgroup\/MetricsTester.java","additions":23,"deletions":20,"binary":false,"changes":43,"status":"modified"}]}