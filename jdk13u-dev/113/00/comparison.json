{"files":[{"patch":"@@ -309,1 +309,2 @@\n-      the PCDesc with realPC closest to the current PC. *\/\n+      the PCDesc with realPC closest to the current PC that has\n+      a valid scope decode offset. *\/\n@@ -315,0 +316,4 @@\n+      if (pcDesc.getScopeDecodeOffset() == DebugInformationRecorder.SERIALIZED_NULL) {\n+        \/\/ We've observed a serialized null decode offset. Ignore this PcDesc.\n+        continue;\n+      }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/NMethod.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2019, Red Hat Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\/**\n+ * @test\n+ * @bug 8196969\n+ * @requires vm.hasSAandCanAttach\n+ * @library \/test\/lib\n+ * @run main\/othervm ClhsdbJstackXcompStress\n+ *\/\n+public class ClhsdbJstackXcompStress {\n+\n+    private static final int MAX_ITERATIONS = 20;\n+    private static final boolean DEBUG = false;\n+\n+    private static boolean isMatchCompiledFrame(List<String> output) {\n+        List<String> filtered = output.stream().filter( s -> s.contains(\"Compiled frame\"))\n+                                               .collect(Collectors.toList());\n+        System.out.println(\"DEBUG: \" + filtered);\n+        return !filtered.isEmpty() &&\n+               filtered.stream().anyMatch( s -> s.contains(\"LingeredAppWithRecComputation\") );\n+    }\n+\n+    private static void runJstackInLoop(LingeredApp app) throws Exception {\n+        boolean anyMatchedCompiledFrame = false;\n+        for (int i = 0; i < MAX_ITERATIONS; i++) {\n+            JDKToolLauncher launcher = JDKToolLauncher\n+                    .createUsingTestJDK(\"jhsdb\");\n+            launcher.addToolArg(\"jstack\");\n+            launcher.addToolArg(\"--pid\");\n+            launcher.addToolArg(Long.toString(app.getPid()));\n+\n+            ProcessBuilder pb = new ProcessBuilder();\n+            pb.command(launcher.getCommand());\n+            Process jhsdb = pb.start();\n+            OutputAnalyzer out = new OutputAnalyzer(jhsdb);\n+\n+            jhsdb.waitFor();\n+\n+            if (DEBUG) {\n+                System.out.println(out.getStdout());\n+                System.err.println(out.getStderr());\n+            }\n+\n+            out.stderrShouldBeEmpty(); \/\/ NPE's are reported on the err stream\n+            out.stdoutShouldNotContain(\"Error occurred during stack walking:\");\n+            out.stdoutShouldContain(LingeredAppWithRecComputation.THREAD_NAME);\n+            List<String> stdoutList = Arrays.asList(out.getStdout().split(\"\\\\R\"));\n+            anyMatchedCompiledFrame = anyMatchedCompiledFrame || isMatchCompiledFrame(stdoutList);\n+        }\n+        if (!anyMatchedCompiledFrame) {\n+             throw new RuntimeException(\"Expected jstack output to contain 'Compiled frame'\");\n+        }\n+        System.out.println(\"DEBUG: jhsdb jstack did not throw NPE, as expected.\");\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        LingeredApp app = null;\n+        try {\n+            List<String> vmArgs = List.of(\"-Xcomp\",\n+                                          \"-XX:CompileCommand=dontinline,LingeredAppWithRecComputation.factorial\",\n+                                          \"-XX:CompileCommand=compileonly,LingeredAppWithRecComputation.testLoop\",\n+                                          \"-XX:CompileCommand=compileonly,LingeredAppWithRecComputation.factorial\");\n+            app = new LingeredAppWithRecComputation();\n+            LingeredApp.startApp(vmArgs, app);\n+            System.out.println(\"Started LingeredAppWithRecComputation with pid \" + app.getPid());\n+            runJstackInLoop(app);\n+            System.out.println(\"Test Completed\");\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            throw e;\n+        } finally {\n+            LingeredApp.stopApp(app);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbJstackXcompStress.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2019, Red Hat Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.apps.LingeredApp;\n+\n+public class LingeredAppWithRecComputation extends LingeredApp {\n+\n+    public static final String THREAD_NAME = \"LingeredAppWithRecComputation.factorial()\";\n+\n+    private long factorial(int n) {\n+        if (n <= 1) {\n+                return 1;\n+        }\n+        if (n == 2) {\n+                return 2;\n+        }\n+        return n * factorial(n - 1);\n+    }\n+\n+    public void testLoop() {\n+        long result = 0;\n+        long[] lastNResults = new long[20];\n+        int i = 0;\n+        int j = 0;\n+        while (true) {\n+            result = factorial(i);\n+            lastNResults[j] = result;\n+            if (i % 12 == 0) {\n+                    i = -1; \/\/ reset i\n+            }\n+            if (j % 19 == 0) {\n+                    j = -1; \/\/ reset j\n+            }\n+            i++; j++;\n+        }\n+    }\n+\n+    public static void main(String args[]) {\n+        LingeredAppWithRecComputation app = new LingeredAppWithRecComputation();\n+        Thread factorial = new Thread(() -> {\n+            app.testLoop();\n+        });\n+        factorial.setName(THREAD_NAME);\n+        factorial.start();\n+        LingeredApp.main(args);\n+    }\n+ }\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/LingeredAppWithRecComputation.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"}]}