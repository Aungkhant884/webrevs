{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,1 +92,2 @@\n-        private AlpnSpec(ByteBuffer buffer) throws IOException {\n+        private AlpnSpec(HandshakeContext hc,\n+                ByteBuffer buffer) throws IOException {\n@@ -95,1 +96,2 @@\n-                throw new SSLProtocolException(\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n@@ -97,1 +99,1 @@\n-                    \"insufficient data (length=\" + buffer.remaining() + \")\");\n+                    \"insufficient data (length=\" + buffer.remaining() + \")\"));\n@@ -102,1 +104,2 @@\n-                throw new SSLProtocolException(\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n@@ -104,1 +107,1 @@\n-                    \"incorrect list length (length=\" + listLen + \")\");\n+                    \"incorrect list length (length=\" + listLen + \")\"));\n@@ -112,1 +115,2 @@\n-                    throw new SSLProtocolException(\n+                    throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                            new SSLProtocolException(\n@@ -114,1 +118,1 @@\n-                        \"extension: empty application protocol name\");\n+                        \"extension: empty application protocol name\"));\n@@ -133,1 +137,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -135,1 +139,1 @@\n-                return (new AlpnSpec(buffer)).toString();\n+                return (new AlpnSpec(hc, buffer)).toString();\n@@ -304,6 +308,1 @@\n-            AlpnSpec spec;\n-            try {\n-                spec = new AlpnSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n+            AlpnSpec spec = new AlpnSpec(shc, buffer);\n@@ -485,6 +484,1 @@\n-            AlpnSpec spec;\n-            try {\n-                spec = new AlpnSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n+            AlpnSpec spec = new AlpnSpec(chc, buffer);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/AlpnExtension.java","additions":16,"deletions":22,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -61,1 +61,2 @@\n-                return (new SignatureSchemesSpec(buffer)).toString();\n+                return (new SignatureSchemesSpec(hc, buffer))\n+                        .toString();\n@@ -153,6 +154,1 @@\n-            SignatureSchemesSpec spec;\n-            try {\n-                spec = new SignatureSchemesSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n+            SignatureSchemesSpec spec = new SignatureSchemesSpec(shc, buffer);\n@@ -298,6 +294,1 @@\n-            SignatureSchemesSpec spec;\n-            try {\n-                spec = new SignatureSchemesSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n+            SignatureSchemesSpec spec = new SignatureSchemesSpec(chc, buffer);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertSignAlgsExtension.java","additions":6,"deletions":15,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -124,1 +124,2 @@\n-        private CertStatusRequestSpec(ByteBuffer buffer) throws IOException {\n+        private CertStatusRequestSpec(HandshakeContext hc,\n+                ByteBuffer buffer) throws IOException {\n@@ -133,2 +134,3 @@\n-                throw new SSLProtocolException(\n-                    \"Invalid status_request extension: insufficient data\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid status_request extension: insufficient data\"));\n@@ -181,1 +183,2 @@\n-        private CertStatusResponseSpec(ByteBuffer buffer) throws IOException {\n+        private CertStatusResponseSpec(HandshakeContext hc,\n+                ByteBuffer buffer) throws IOException {\n@@ -183,2 +186,3 @@\n-                throw new SSLProtocolException(\n-                    \"Invalid status_request extension: insufficient data\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid status_request extension: insufficient data\"));\n@@ -215,1 +219,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -217,1 +221,1 @@\n-                return (new CertStatusRequestSpec(buffer)).toString();\n+                return (new CertStatusRequestSpec(hc, buffer)).toString();\n@@ -228,1 +232,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -230,1 +234,1 @@\n-                return (new CertStatusResponseSpec(buffer)).toString();\n+                return (new CertStatusResponseSpec(hc, buffer)).toString();\n@@ -602,6 +606,1 @@\n-            CertStatusRequestSpec spec;\n-            try {\n-                spec = new CertStatusRequestSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n+            CertStatusRequestSpec spec = new CertStatusRequestSpec(shc, buffer);\n@@ -779,1 +778,2 @@\n-        private CertStatusRequestV2Spec(ByteBuffer message) throws IOException {\n+        private CertStatusRequestV2Spec(HandshakeContext hc,\n+                ByteBuffer message) throws IOException {\n@@ -790,2 +790,3 @@\n-                throw new SSLProtocolException(\n-                    \"Invalid status_request_v2 extension: insufficient data\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid status_request_v2 extension: insufficient data\"));\n@@ -796,1 +797,2 @@\n-                throw new SSLProtocolException(\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n@@ -798,1 +800,1 @@\n-                    \"(received length: \" + listLen + \")\");\n+                    \"(received length: \" + listLen + \")\"));\n@@ -808,1 +810,3 @@\n-                    throw new SSLProtocolException(\n+                        throw hc.conContext.fatal(\n+                                Alert.DECODE_ERROR,\n+                                new SSLProtocolException(\n@@ -811,1 +815,1 @@\n-                            \", remining=\" + message.remaining() + \")\");\n+                            \", remining=\" + message.remaining() + \")\"));\n@@ -826,1 +830,3 @@\n-                        throw new SSLProtocolException(\n+                        throw hc.conContext.fatal(\n+                                Alert.DECODE_ERROR,\n+                                new SSLProtocolException(\n@@ -828,1 +834,1 @@\n-                            \"insufficient data\");\n+                            \"insufficient data\"));\n@@ -877,1 +883,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -879,1 +885,1 @@\n-                return (new CertStatusRequestV2Spec(buffer)).toString();\n+                return (new CertStatusRequestV2Spec(hc, buffer)).toString();\n@@ -960,6 +966,1 @@\n-            CertStatusRequestV2Spec spec;\n-            try {\n-                spec = new CertStatusRequestV2Spec(buffer);\n-            } catch (IOException ioe) {\n-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n+            CertStatusRequestV2Spec spec = new CertStatusRequestV2Spec(shc, buffer);\n@@ -1188,6 +1189,1 @@\n-            CertStatusResponseSpec spec;\n-            try {\n-                spec = new CertStatusResponseSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw chc.conContext.fatal(Alert.DECODE_ERROR, ioe);\n-            }\n+            CertStatusResponseSpec spec = new CertStatusResponseSpec(chc, buffer);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertStatusExtension.java","additions":35,"deletions":39,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,2 @@\n-        private CookieSpec(ByteBuffer m) throws IOException {\n+        private CookieSpec(HandshakeContext hc,\n+                ByteBuffer m) throws IOException {\n@@ -69,2 +70,3 @@\n-                throw new SSLProtocolException(\n-                    \"Invalid cookie extension: insufficient data\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid cookie extension: insufficient data\"));\n@@ -93,1 +95,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -95,1 +97,1 @@\n-                return (new CookieSpec(buffer)).toString();\n+                return (new CookieSpec(hc, buffer)).toString();\n@@ -162,7 +164,1 @@\n-            CookieSpec spec;\n-            try {\n-                spec = new CookieSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n-\n+            CookieSpec spec = new CookieSpec(shc, buffer);\n@@ -267,7 +263,1 @@\n-            CookieSpec spec;\n-            try {\n-                spec = new CookieSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n-\n+            CookieSpec spec = new CookieSpec(chc, buffer);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CookieExtension.java","additions":10,"deletions":20,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,2 @@\n-        private ECPointFormatsSpec(ByteBuffer m) throws IOException {\n+        private ECPointFormatsSpec(HandshakeContext hc,\n+                ByteBuffer m) throws IOException {\n@@ -69,1 +70,2 @@\n-                throw new SSLProtocolException(\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n@@ -71,1 +73,1 @@\n-                    \"insufficient data\");\n+                    \"insufficient data\"));\n@@ -120,1 +122,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -122,1 +124,1 @@\n-                return (new ECPointFormatsSpec(buffer)).toString();\n+                return (new ECPointFormatsSpec(hc, buffer)).toString();\n@@ -230,6 +232,1 @@\n-            ECPointFormatsSpec spec;\n-            try {\n-                spec = new ECPointFormatsSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n+            ECPointFormatsSpec spec = new ECPointFormatsSpec(shc, buffer);\n@@ -279,6 +276,1 @@\n-            ECPointFormatsSpec spec;\n-            try {\n-                spec = new ECPointFormatsSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n+            ECPointFormatsSpec spec = new ECPointFormatsSpec(chc, buffer);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ECPointFormatsExtension.java","additions":10,"deletions":18,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,2 @@\n-        private ExtendedMasterSecretSpec(ByteBuffer m) throws IOException {\n+        private ExtendedMasterSecretSpec(HandshakeContext hc,\n+                ByteBuffer m) throws IOException {\n@@ -74,1 +75,2 @@\n-                throw new SSLProtocolException(\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n@@ -76,1 +78,1 @@\n-                    \"not empty\");\n+                    \"not empty\"));\n@@ -89,1 +91,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -91,1 +93,1 @@\n-                return (new ExtendedMasterSecretSpec(buffer)).toString();\n+                return (new ExtendedMasterSecretSpec(hc, buffer)).toString();\n@@ -171,7 +173,2 @@\n-            ExtendedMasterSecretSpec spec;\n-            try {\n-                spec = new ExtendedMasterSecretSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n-\n+            ExtendedMasterSecretSpec spec =\n+                    new ExtendedMasterSecretSpec(shc, buffer);\n@@ -326,7 +323,2 @@\n-            ExtendedMasterSecretSpec spec;\n-            try {\n-                spec = new ExtendedMasterSecretSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n-\n+            ExtendedMasterSecretSpec spec =\n+                    new ExtendedMasterSecretSpec(chc, buffer);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ExtendedMasterSecretExtension.java","additions":12,"deletions":20,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -142,1 +142,2 @@\n-        private CHKeyShareSpec(ByteBuffer buffer) throws IOException {\n+        private CHKeyShareSpec(HandshakeContext handshakeContext,\n+                ByteBuffer buffer) throws IOException {\n@@ -147,1 +148,2 @@\n-                throw new SSLProtocolException(\n+                throw handshakeContext.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n@@ -149,1 +151,1 @@\n-                    \"insufficient data (length=\" + buffer.remaining() + \")\");\n+                    \"insufficient data (length=\" + buffer.remaining() + \")\"));\n@@ -154,1 +156,2 @@\n-                throw new SSLProtocolException(\n+                throw handshakeContext.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n@@ -156,1 +159,1 @@\n-                    \"incorrect list length (length=\" + listLen + \")\");\n+                    \"incorrect list length (length=\" + listLen + \")\"));\n@@ -164,2 +167,3 @@\n-                    throw new SSLProtocolException(\n-                        \"Invalid key_share extension: empty key_exchange\");\n+                    throw handshakeContext.conContext.fatal(Alert.DECODE_ERROR,\n+                            new SSLProtocolException(\n+                        \"Invalid key_share extension: empty key_exchange\"));\n@@ -194,1 +198,2 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(\n+                HandshakeContext handshakeContext, ByteBuffer buffer) {\n@@ -196,1 +201,1 @@\n-                return (new CHKeyShareSpec(buffer)).toString();\n+                return (new CHKeyShareSpec(handshakeContext, buffer)).toString();\n@@ -329,7 +334,1 @@\n-            CHKeyShareSpec spec;\n-            try {\n-                spec = new CHKeyShareSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n-\n+            CHKeyShareSpec spec = new CHKeyShareSpec(shc, buffer);\n@@ -418,1 +417,2 @@\n-        private SHKeyShareSpec(ByteBuffer buffer) throws IOException {\n+        private SHKeyShareSpec(HandshakeContext handshakeContext,\n+                ByteBuffer buffer) throws IOException {\n@@ -423,1 +423,2 @@\n-                throw new SSLProtocolException(\n+                throw handshakeContext.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n@@ -425,1 +426,1 @@\n-                    \"insufficient data (length=\" + buffer.remaining() + \")\");\n+                    \"insufficient data (length=\" + buffer.remaining() + \")\"));\n@@ -432,2 +433,3 @@\n-                throw new SSLProtocolException(\n-                    \"Invalid key_share extension: unknown extra data\");\n+                throw handshakeContext.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid key_share extension: unknown extra data\"));\n@@ -462,1 +464,2 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext handshakeContext,\n+                ByteBuffer buffer) {\n@@ -464,1 +467,1 @@\n-                return (new SHKeyShareSpec(buffer)).toString();\n+                return (new SHKeyShareSpec(handshakeContext, buffer)).toString();\n@@ -616,7 +619,1 @@\n-            SHKeyShareSpec spec;\n-            try {\n-                spec = new SHKeyShareSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n-\n+            SHKeyShareSpec spec = new SHKeyShareSpec(chc, buffer);\n@@ -695,1 +692,2 @@\n-        private HRRKeyShareSpec(ByteBuffer buffer) throws IOException {\n+        private HRRKeyShareSpec(HandshakeContext handshakeContext,\n+                ByteBuffer buffer) throws IOException {\n@@ -700,1 +698,2 @@\n-                throw new SSLProtocolException(\n+                throw handshakeContext.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n@@ -702,1 +701,1 @@\n-                    \"improper data (length=\" + buffer.remaining() + \")\");\n+                    \"improper data (length=\" + buffer.remaining() + \")\"));\n@@ -722,1 +721,2 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext handshakeContext,\n+                ByteBuffer buffer) {\n@@ -724,1 +724,1 @@\n-                return (new HRRKeyShareSpec(buffer)).toString();\n+                return (new HRRKeyShareSpec(handshakeContext, buffer)).toString();\n@@ -868,7 +868,1 @@\n-            HRRKeyShareSpec spec;\n-            try {\n-                spec = new HRRKeyShareSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n-\n+            HRRKeyShareSpec spec = new HRRKeyShareSpec(chc, buffer);\n@@ -877,1 +871,1 @@\n-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE,\n+                throw chc.conContext.fatal(Alert.ILLEGAL_PARAMETER,\n@@ -883,1 +877,1 @@\n-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE,\n+                throw chc.conContext.fatal(Alert.ILLEGAL_PARAMETER,\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/KeyShareExtension.java","additions":39,"deletions":45,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,2 @@\n-        private MaxFragLenSpec(ByteBuffer buffer) throws IOException {\n+        private MaxFragLenSpec(HandshakeContext hc,\n+                ByteBuffer buffer) throws IOException {\n@@ -76,2 +77,3 @@\n-                throw new SSLProtocolException(\n-                    \"Invalid max_fragment_length extension data\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid max_fragment_length extension data\"));\n@@ -91,1 +93,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -93,1 +95,1 @@\n-                return (new MaxFragLenSpec(buffer)).toString();\n+                return (new MaxFragLenSpec(hc, buffer)).toString();\n@@ -252,7 +254,1 @@\n-            MaxFragLenSpec spec;\n-            try {\n-                spec = new MaxFragLenSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n-\n+            MaxFragLenSpec spec = new MaxFragLenSpec(shc, buffer);\n@@ -366,7 +362,1 @@\n-            MaxFragLenSpec spec;\n-            try {\n-                spec = new MaxFragLenSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n-\n+            MaxFragLenSpec spec = new MaxFragLenSpec(chc, buffer);\n@@ -538,7 +528,1 @@\n-            MaxFragLenSpec spec;\n-            try {\n-                spec = new MaxFragLenSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n-\n+            MaxFragLenSpec spec = new MaxFragLenSpec(chc, buffer);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/MaxFragExtension.java","additions":11,"deletions":27,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import javax.net.ssl.SSLProtocolException;\n@@ -110,1 +111,1 @@\n-        CHPreSharedKeySpec(HandshakeContext context,\n+        CHPreSharedKeySpec(HandshakeContext hc,\n@@ -117,1 +118,2 @@\n-                throw context.conContext.fatal(Alert.ILLEGAL_PARAMETER,\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n@@ -119,1 +121,1 @@\n-                    \"insufficient data (length=\" + m.remaining() + \")\");\n+                    \"insufficient data (length=\" + m.remaining() + \")\"));\n@@ -124,1 +126,2 @@\n-                throw context.conContext.fatal(Alert.ILLEGAL_PARAMETER,\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n@@ -126,1 +129,1 @@\n-                    \"insufficient identities (length=\" + idEncodedLength + \")\");\n+                    \"insufficient identities (length=\" + idEncodedLength + \")\"));\n@@ -134,1 +137,2 @@\n-                    throw context.conContext.fatal(Alert.ILLEGAL_PARAMETER,\n+                    throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                            new SSLProtocolException(\n@@ -136,1 +140,1 @@\n-                        \"insufficient identity (length=\" + id.length + \")\");\n+                        \"insufficient identity (length=\" + id.length + \")\"));\n@@ -146,4 +150,5 @@\n-                throw context.conContext.fatal(Alert.ILLEGAL_PARAMETER,\n-                        \"Invalid pre_shared_key extension: \" +\n-                        \"insufficient binders data (length=\" +\n-                        m.remaining() + \")\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid pre_shared_key extension: \" +\n+                    \"insufficient binders data (length=\" +\n+                    m.remaining() + \")\"));\n@@ -154,4 +159,5 @@\n-                throw context.conContext.fatal(Alert.ILLEGAL_PARAMETER,\n-                        \"Invalid pre_shared_key extension: \" +\n-                        \"insufficient binders (length=\" +\n-                        bindersEncodedLen + \")\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid pre_shared_key extension: \" +\n+                    \"insufficient binders (length=\" +\n+                    bindersEncodedLen + \")\"));\n@@ -165,4 +171,5 @@\n-                    throw context.conContext.fatal(Alert.ILLEGAL_PARAMETER,\n-                            \"Invalid pre_shared_key extension: \" +\n-                            \"insufficient binder entry (length=\" +\n-                            binder.length + \")\");\n+                    throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                            new SSLProtocolException(\n+                        \"Invalid pre_shared_key extension: \" +\n+                        \"insufficient binder entry (length=\" +\n+                        binder.length + \")\"));\n@@ -256,1 +263,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -258,7 +265,1 @@\n-                \/\/ As the HandshakeContext parameter of CHPreSharedKeySpec\n-                \/\/ constructor is used for fatal alert only, we can use\n-                \/\/ null HandshakeContext here as we don't care about exception.\n-                \/\/\n-                \/\/ Please take care of this code if the CHPreSharedKeySpec\n-                \/\/ constructor is updated in the future.\n-                return (new CHPreSharedKeySpec(null, buffer)).toString();\n+                return (new CHPreSharedKeySpec(hc, buffer)).toString();\n@@ -280,1 +281,1 @@\n-        SHPreSharedKeySpec(HandshakeContext context,\n+        SHPreSharedKeySpec(HandshakeContext hc,\n@@ -283,4 +284,5 @@\n-                throw context.conContext.fatal(Alert.ILLEGAL_PARAMETER,\n-                        \"Invalid pre_shared_key extension: \" +\n-                        \"insufficient selected_identity (length=\" +\n-                        m.remaining() + \")\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid pre_shared_key extension: \" +\n+                    \"insufficient selected_identity (length=\" +\n+                    m.remaining() + \")\"));\n@@ -317,1 +319,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -319,7 +321,1 @@\n-                \/\/ As the HandshakeContext parameter of SHPreSharedKeySpec\n-                \/\/ constructor is used for fatal alert only, we can use\n-                \/\/ null HandshakeContext here as we don't care about exception.\n-                \/\/\n-                \/\/ Please take care of this code if the SHPreSharedKeySpec\n-                \/\/ constructor is updated in the future.\n-                return (new SHPreSharedKeySpec(null, buffer)).toString();\n+                return (new SHPreSharedKeySpec(hc, buffer)).toString();\n@@ -356,6 +352,1 @@\n-            CHPreSharedKeySpec pskSpec = null;\n-            try {\n-                pskSpec = new CHPreSharedKeySpec(shc, buffer);\n-            } catch (IOException ioe) {\n-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n+            CHPreSharedKeySpec pskSpec = new CHPreSharedKeySpec(shc, buffer);\n@@ -395,1 +386,1 @@\n-                                new SessionTicketSpec(requestedId.identity).\n+                            new SessionTicketSpec(shc, requestedId.identity).\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/PreSharedKeyExtension.java","additions":39,"deletions":48,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,1 +98,2 @@\n-        PskKeyExchangeModesSpec(ByteBuffer m) throws IOException {\n+        PskKeyExchangeModesSpec(HandshakeContext hc,\n+                ByteBuffer m) throws IOException {\n@@ -100,1 +101,2 @@\n-                throw new SSLProtocolException(\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n@@ -102,1 +104,1 @@\n-                    \"insufficient data\");\n+                    \"insufficient data\"));\n@@ -154,1 +156,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -156,1 +158,1 @@\n-                return (new PskKeyExchangeModesSpec(buffer)).toString();\n+                return (new PskKeyExchangeModesSpec(hc, buffer)).toString();\n@@ -200,6 +202,2 @@\n-            PskKeyExchangeModesSpec spec;\n-            try {\n-                spec = new PskKeyExchangeModesSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n+            PskKeyExchangeModesSpec spec =\n+                    new PskKeyExchangeModesSpec(shc, buffer);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/PskKeyExchangeModesExtension.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,2 @@\n-        private RenegotiationInfoSpec(ByteBuffer m) throws IOException {\n+        private RenegotiationInfoSpec(HandshakeContext hc,\n+                ByteBuffer m) throws IOException {\n@@ -80,1 +81,2 @@\n-                throw new SSLProtocolException(\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n@@ -82,1 +84,1 @@\n-                    \"insufficient data\");\n+                    \"insufficient data\"));\n@@ -108,1 +110,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -110,1 +112,1 @@\n-                return (new RenegotiationInfoSpec(buffer)).toString();\n+                return (new RenegotiationInfoSpec(hc, buffer)).toString();\n@@ -223,7 +225,1 @@\n-            RenegotiationInfoSpec spec;\n-            try {\n-                spec = new RenegotiationInfoSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n-\n+            RenegotiationInfoSpec spec = new RenegotiationInfoSpec(shc, buffer);\n@@ -436,8 +432,1 @@\n-            RenegotiationInfoSpec spec;\n-            try {\n-                spec = new RenegotiationInfoSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n-\n-\n+            RenegotiationInfoSpec spec = new RenegotiationInfoSpec(chc, buffer);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/RenegoInfoExtension.java","additions":10,"deletions":21,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -646,1 +646,2 @@\n-    public String toString(ByteBuffer byteBuffer) {\n+    public String toString(\n+            HandshakeContext handshakeContext, ByteBuffer byteBuffer) {\n@@ -659,1 +660,1 @@\n-            extData = stringizer.toString(byteBuffer);\n+            extData = stringizer.toString(handshakeContext, byteBuffer);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLExtension.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -349,1 +349,2 @@\n-                                ext.toString(ByteBuffer.wrap(en.getValue())));\n+                            ext.toString(handshakeMessage.handshakeContext,\n+                                    ByteBuffer.wrap(en.getValue())));\n@@ -362,1 +363,2 @@\n-                        en.getKey().toString(ByteBuffer.wrap(en.getValue())));\n+                        en.getKey().toString(handshakeMessage.handshakeContext,\n+                                ByteBuffer.wrap(en.getValue())));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLExtensions.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-    String toString(ByteBuffer buffer);\n+    String toString(HandshakeContext handshakeContext, ByteBuffer buffer);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLStringizer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,2 +50,0 @@\n-import static sun.security.ssl.SSLExtension.SH_SESSION_TICKET;\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ServerHello.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,1 +96,2 @@\n-        private CHServerNamesSpec(ByteBuffer buffer) throws IOException {\n+        private CHServerNamesSpec(HandshakeContext hc,\n+                ByteBuffer buffer) throws IOException {\n@@ -98,2 +99,3 @@\n-                throw new SSLProtocolException(\n-                    \"Invalid server_name extension: insufficient data\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid server_name extension: insufficient data\"));\n@@ -104,2 +106,3 @@\n-                throw new SSLProtocolException(\n-                    \"Invalid server_name extension: incomplete data\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid server_name extension: incomplete data\"));\n@@ -124,2 +127,3 @@\n-                        throw new SSLProtocolException(\n-                            \"Empty HostName in server_name extension\");\n+                        throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                                new SSLProtocolException(\n+                            \"Empty HostName in server_name extension\"));\n@@ -137,1 +141,2 @@\n-                        throw (SSLProtocolException)spe.initCause(iae);\n+                        throw hc.conContext.fatal(Alert.ILLEGAL_PARAMETER,\n+                                (SSLProtocolException)spe.initCause(iae));\n@@ -147,1 +152,2 @@\n-                        throw (SSLProtocolException)spe.initCause(iae);\n+                        throw hc.conContext.fatal(Alert.ILLEGAL_PARAMETER,\n+                                (SSLProtocolException)spe.initCause(iae));\n@@ -153,1 +159,2 @@\n-                    throw new SSLProtocolException(\n+                        throw hc.conContext.fatal(Alert.ILLEGAL_PARAMETER,\n+                                new SSLProtocolException(\n@@ -155,1 +162,1 @@\n-                            serverName.getType());\n+                            serverName.getType()));\n@@ -186,1 +193,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -188,1 +195,1 @@\n-                return (new CHServerNamesSpec(buffer)).toString();\n+                return (new CHServerNamesSpec(hc, buffer)).toString();\n@@ -294,6 +301,1 @@\n-            CHServerNamesSpec spec;\n-            try {\n-                spec = new CHServerNamesSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n+            CHServerNamesSpec spec = new CHServerNamesSpec(shc, buffer);\n@@ -393,1 +395,2 @@\n-        private SHServerNamesSpec(ByteBuffer buffer) throws IOException {\n+        private SHServerNamesSpec(HandshakeContext hc,\n+                ByteBuffer buffer) throws IOException {\n@@ -395,2 +398,3 @@\n-                throw new SSLProtocolException(\n-                    \"Invalid ServerHello server_name extension: not empty\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid ServerHello server_name extension: not empty\"));\n@@ -408,1 +412,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -410,1 +414,1 @@\n-                return (new SHServerNamesSpec(buffer)).toString();\n+                return (new SHServerNamesSpec(hc, buffer)).toString();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ServerNameExtension.java","additions":29,"deletions":25,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -240,2 +240,2 @@\n-        SessionTicketSpec(byte[] b) throws IOException {\n-            this(ByteBuffer.wrap(b));\n+        SessionTicketSpec(HandshakeContext hc, byte[] b) throws IOException {\n+            this(hc, ByteBuffer.wrap(b));\n@@ -244,1 +244,2 @@\n-        SessionTicketSpec(ByteBuffer buf) throws IOException {\n+        SessionTicketSpec(HandshakeContext hc,\n+                ByteBuffer buf) throws IOException {\n@@ -246,2 +247,3 @@\n-                throw new SSLProtocolException(\n-                        \"SessionTicket buffer too small\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"SessionTicket buffer too small\"));\n@@ -250,2 +252,3 @@\n-                throw new SSLProtocolException(\n-                        \"SessionTicket buffer too large. \" + buf.remaining());\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"SessionTicket buffer too large. \" + buf.remaining()));\n@@ -369,2 +372,0 @@\n-        SessionTicketStringizer() {}\n-\n@@ -372,1 +373,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -374,1 +375,1 @@\n-                return new SessionTicketSpec(buffer).toString();\n+                return new SessionTicketSpec(hc, buffer).toString();\n@@ -459,10 +460,1 @@\n-            SessionTicketSpec spec;\n-            try {\n-                 spec = new SessionTicketSpec(buffer);\n-            } catch (IOException | RuntimeException e) {\n-                if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {\n-                    SSLLogger.fine(\"SessionTicket data invalid. Doing full \" +\n-                            \"handshake.\");\n-                }\n-                return;\n-            }\n+            SessionTicketSpec spec = new SessionTicketSpec(shc, buffer);\n@@ -535,8 +527,2 @@\n-            try {\n-                if (new SessionTicketSpec(buffer) == null) {\n-                    return;\n-                }\n-                chc.statelessResumption = true;\n-            } catch (IOException e) {\n-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, e);\n-            }\n+            SessionTicketSpec spec = new SessionTicketSpec(chc, buffer);\n+            chc.statelessResumption = true;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SessionTicketExtension.java","additions":16,"deletions":30,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,1 +85,2 @@\n-        SignatureSchemesSpec(ByteBuffer buffer) throws IOException {\n+        SignatureSchemesSpec(HandshakeContext hc,\n+                ByteBuffer buffer) throws IOException {\n@@ -87,2 +88,3 @@\n-                throw new SSLProtocolException(\n-                    \"Invalid signature_algorithms: insufficient data\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid signature_algorithms: insufficient data\"));\n@@ -93,2 +95,3 @@\n-                throw new SSLProtocolException(\n-                    \"Invalid signature_algorithms: unknown extra data\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid signature_algorithms: unknown extra data\"));\n@@ -98,2 +101,3 @@\n-                throw new SSLProtocolException(\n-                    \"Invalid signature_algorithms: incomplete data\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid signature_algorithms: incomplete data\"));\n@@ -147,1 +151,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -149,1 +153,1 @@\n-                return (new SignatureSchemesSpec(buffer)).toString();\n+                return (new SignatureSchemesSpec(hc, buffer)).toString();\n@@ -238,6 +242,1 @@\n-            SignatureSchemesSpec spec;\n-            try {\n-                spec = new SignatureSchemesSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n+            SignatureSchemesSpec spec = new SignatureSchemesSpec(shc, buffer);\n@@ -464,6 +463,1 @@\n-            SignatureSchemesSpec spec;\n-            try {\n-                spec = new SignatureSchemesSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n+            SignatureSchemesSpec spec = new SignatureSchemesSpec(chc, buffer);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SignatureAlgorithmsExtension.java","additions":16,"deletions":22,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,2 @@\n-        private SupportedGroupsSpec(ByteBuffer m) throws IOException  {\n+        private SupportedGroupsSpec(HandshakeContext hc,\n+                ByteBuffer m) throws IOException  {\n@@ -85,2 +86,3 @@\n-                throw new SSLProtocolException(\n-                    \"Invalid supported_groups extension: insufficient data\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid supported_groups extension: insufficient data\"));\n@@ -91,2 +93,3 @@\n-                throw new SSLProtocolException(\n-                    \"Invalid supported_groups extension: unknown extra data\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid supported_groups extension: unknown extra data\"));\n@@ -96,2 +99,3 @@\n-                throw new SSLProtocolException(\n-                    \"Invalid supported_groups extension: incomplete data\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid supported_groups extension: incomplete data\"));\n@@ -143,1 +147,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -145,1 +149,1 @@\n-                return (new SupportedGroupsSpec(buffer)).toString();\n+                return (new SupportedGroupsSpec(hc, buffer)).toString();\n@@ -419,6 +423,1 @@\n-            SupportedGroupsSpec spec;\n-            try {\n-                spec = new SupportedGroupsSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n+            SupportedGroupsSpec spec = new SupportedGroupsSpec(shc, buffer);\n@@ -569,6 +568,1 @@\n-            SupportedGroupsSpec spec;\n-            try {\n-                spec = new SupportedGroupsSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n+            SupportedGroupsSpec spec = new SupportedGroupsSpec(chc, buffer);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SupportedGroupsExtension.java","additions":16,"deletions":22,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,2 @@\n-        private CHSupportedVersionsSpec(ByteBuffer m) throws IOException  {\n+        private CHSupportedVersionsSpec(HandshakeContext hc,\n+                ByteBuffer m) throws IOException  {\n@@ -79,2 +80,3 @@\n-                throw new SSLProtocolException(\n-                    \"Invalid supported_versions extension: insufficient data\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid supported_versions extension: insufficient data\"));\n@@ -85,2 +87,3 @@\n-                throw new SSLProtocolException(\n-                    \"Invalid supported_versions extension: unknown extra data\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid supported_versions extension: unknown extra data\"));\n@@ -90,2 +93,3 @@\n-                throw new SSLProtocolException(\n-                    \"Invalid supported_versions extension: incomplete data\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid supported_versions extension: incomplete data\"));\n@@ -139,1 +143,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -141,1 +145,1 @@\n-                return (new CHSupportedVersionsSpec(buffer)).toString();\n+                return (new CHSupportedVersionsSpec(hc, buffer)).toString();\n@@ -224,6 +228,2 @@\n-            CHSupportedVersionsSpec spec;\n-            try {\n-                spec = new CHSupportedVersionsSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n+            CHSupportedVersionsSpec spec =\n+                    new CHSupportedVersionsSpec(shc, buffer);\n@@ -252,1 +252,2 @@\n-        private SHSupportedVersionsSpec(ByteBuffer m) throws IOException  {\n+        private SHSupportedVersionsSpec(HandshakeContext hc,\n+                ByteBuffer m) throws IOException  {\n@@ -254,2 +255,3 @@\n-                throw new SSLProtocolException(\n-                    \"Invalid supported_versions: insufficient data\");\n+                throw hc.conContext.fatal(Alert.DECODE_ERROR,\n+                        new SSLProtocolException(\n+                    \"Invalid supported_versions: insufficient data\"));\n@@ -278,1 +280,1 @@\n-        public String toString(ByteBuffer buffer) {\n+        public String toString(HandshakeContext hc, ByteBuffer buffer) {\n@@ -280,1 +282,1 @@\n-                return (new SHSupportedVersionsSpec(buffer)).toString();\n+                return (new SHSupportedVersionsSpec(hc, buffer)).toString();\n@@ -366,6 +368,2 @@\n-            SHSupportedVersionsSpec spec;\n-            try {\n-                spec = new SHSupportedVersionsSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n+            SHSupportedVersionsSpec spec =\n+                    new SHSupportedVersionsSpec(chc, buffer);\n@@ -455,6 +453,2 @@\n-            SHSupportedVersionsSpec spec;\n-            try {\n-                spec = new SHSupportedVersionsSpec(buffer);\n-            } catch (IOException ioe) {\n-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);\n-            }\n+            SHSupportedVersionsSpec spec =\n+                    new SHSupportedVersionsSpec(chc, buffer);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SupportedVersionsExtension.java","additions":27,"deletions":33,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-class TransportContext implements ConnectionContext {\n+final class TransportContext implements ConnectionContext {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/TransportContext.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}