{"files":[{"patch":"@@ -989,1 +989,1 @@\n-            return new ModuleAnalyzer(config, log, modules).run();\n+            return new ModuleAnalyzer(config, log, modules).run(options.ignoreMissingDeps);\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/JdepsTask.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import static com.sun.tools.jdeps.Graph.*;\n@@ -34,1 +33,0 @@\n-import com.sun.tools.jdeps.JdepsTask.BadArgs;\n@@ -37,1 +35,0 @@\n-import java.io.OutputStream;\n@@ -40,3 +37,0 @@\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.Collections;\n@@ -83,1 +77,1 @@\n-    public boolean run() throws IOException {\n+    public boolean run(boolean ignoreMissingDeps) throws IOException {\n@@ -85,4 +79,3 @@\n-            \/\/ compute \"requires transitive\" dependences\n-            modules.values().forEach(ModuleDeps::computeRequiresTransitive);\n-\n-            modules.values().forEach(md -> {\n+            for (ModuleDeps md: modules.values()) {\n+                \/\/ compute \"requires transitive\" dependences\n+                md.computeRequiresTransitive(ignoreMissingDeps);\n@@ -90,1 +83,4 @@\n-                md.computeRequires();\n+                md.computeRequires(ignoreMissingDeps);\n+                \/\/ print module descriptor\n+                md.printModuleDescriptor();\n+\n@@ -92,2 +88,8 @@\n-                md.analyzeDeps();\n-            });\n+                boolean ok = md.analyzeDeps();\n+                if (!ok) return false;\n+\n+                if (ignoreMissingDeps && md.hasMissingDependencies()) {\n+                    log.format(\"Warning: --ignore-missing-deps specified. Missing dependencies from %s are ignored%n\",\n+                               md.root.name());\n+                }\n+            }\n@@ -100,0 +102,1 @@\n+\n@@ -113,1 +116,1 @@\n-        private void computeRequiresTransitive() {\n+        private void computeRequiresTransitive(boolean ignoreMissingDeps) {\n@@ -115,1 +118,1 @@\n-            this.requiresTransitive = computeRequires(true)\n+            this.requiresTransitive = computeRequires(true, ignoreMissingDeps)\n@@ -122,2 +125,2 @@\n-        private void computeRequires() {\n-            this.requires = computeRequires(false).collect(toSet());\n+        private void computeRequires(boolean ignoreMissingDeps) {\n+            this.requires = computeRequires(false, ignoreMissingDeps).collect(toSet());\n@@ -127,1 +130,1 @@\n-        private Stream<Module> computeRequires(boolean apionly) {\n+        private Stream<Module> computeRequires(boolean apionly, boolean ignoreMissingDeps) {\n@@ -129,1 +132,0 @@\n-\n@@ -138,0 +140,1 @@\n+                        .filter(a -> !(ignoreMissingDeps && Analyzer.notFound(a)))\n@@ -141,0 +144,4 @@\n+        boolean hasMissingDependencies() {\n+            return dependencyFinder.getDependences(root).anyMatch(Analyzer::notFound);\n+        }\n+\n@@ -199,0 +206,15 @@\n+        private void showMissingDeps() {\n+            \/\/ build the analyzer if there are missing dependences\n+            Analyzer analyzer = new Analyzer(configuration, Analyzer.Type.CLASS, DEFAULT_FILTER);\n+            analyzer.run(Set.of(root), dependencyFinder.locationToArchive());\n+            log.println(\"Error: Missing dependencies: classes not found from the module path.\");\n+            Analyzer.Visitor visitor = new Analyzer.Visitor() {\n+                @Override\n+                public void visitDependence(String origin, Archive originArchive, String target, Archive targetArchive) {\n+                    log.format(\"   %-50s -> %-50s %s%n\", origin, target, targetArchive.getName());\n+                }\n+            };\n+            analyzer.visitDependences(root, visitor, Analyzer.Type.VERBOSE, Analyzer::notFound);\n+            log.println();\n+        }\n+\n@@ -203,2 +225,5 @@\n-        private void analyzeDeps() {\n-            printModuleDescriptor(log, root);\n+        private boolean analyzeDeps() {\n+            if (requires.stream().anyMatch(m -> m == UNNAMED_MODULE)) {\n+                showMissingDeps();\n+                return false;\n+            }\n@@ -226,0 +251,1 @@\n+            return true;\n@@ -242,0 +268,4 @@\n+        void printModuleDescriptor() {\n+            printModuleDescriptor(log, root);\n+        }\n+\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/ModuleAnalyzer.java","additions":53,"deletions":23,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -86,0 +86,8 @@\n+    @Test\n+    public void checkModuleDeps() {\n+        JdepsTest test = new JdepsTest();\n+        test.options(List.of(\"--module-path\", \"m1.jar\", \"--multi-release\", VERSION, \"--check\", \"m1\"));\n+        test.checkMissingDeps();\n+        test.ignoreMissingDeps(\"requires java.management\");\n+    }\n+\n","filename":"test\/langtools\/tools\/jdeps\/missingDeps\/MissingDepsTest.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,1 +89,1 @@\n-            assertTrue(analyzer.run());\n+            assertTrue(analyzer.run(false));\n@@ -149,1 +149,1 @@\n-            assertTrue(analyzer.run());\n+            assertTrue(analyzer.run(false));\n","filename":"test\/langtools\/tools\/jdeps\/modules\/CheckModuleTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}