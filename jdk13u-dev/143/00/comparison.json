{"files":[{"patch":"@@ -733,2 +733,2 @@\n-jdk.tls.disabledAlgorithms=SSLv3, RC4, DES, MD5withRSA, DH keySize < 1024, \\\n-    EC keySize < 224, 3DES_EDE_CBC, anon, NULL, \\\n+jdk.tls.disabledAlgorithms=SSLv3, TLSv1, TLSv1.1, RC4, DES, MD5withRSA, \\\n+    DH keySize < 1024, EC keySize < 224, 3DES_EDE_CBC, anon, NULL, \\\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -44,0 +45,2 @@\n+import jdk.test.lib.security.SecurityUtils;\n+\n@@ -185,0 +188,8 @@\n+        \/\/ Re-enable context version if it is disabled.\n+        \/\/ If context version is SSLv3, TLSv1 needs to be re-enabled.\n+        if (contextVersion.equals(\"SSLv3\")) {\n+            SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1\");\n+        } else if (contextVersion.equals(\"TLSv1\") ||\n+                   contextVersion.equals(\"TLSv1.1\")) {\n+            SecurityUtils.removeFromDisabledTlsAlgs(contextVersion);\n+        }\n","filename":"test\/jdk\/javax\/net\/ssl\/SSLEngine\/Arrays.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8049432 8069038 8234723\n+ * @bug 8049432 8069038 8234723 8202343\n@@ -82,1 +82,1 @@\n-                    \"TLSv1\", \"TLSv1.1\", \"TLSv1.2\", \"TLSv1.3\"\n+                    \"TLSv1.2\", \"TLSv1.3\"\n@@ -93,1 +93,0 @@\n-                    \"TLSv1\"\n@@ -99,1 +98,0 @@\n-                    \"TLSv1\", \"TLSv1.1\"\n@@ -105,1 +103,1 @@\n-                    \"TLSv1\", \"TLSv1.1\", \"TLSv1.2\"\n+                    \"TLSv1.2\"\n@@ -112,1 +110,1 @@\n-                    \"TLSv1\", \"TLSv1.1\", \"TLSv1.2\", \"TLSv1.3\"\n+                    \"TLSv1.2\", \"TLSv1.3\"\n","filename":"test\/jdk\/javax\/net\/ssl\/TLS\/TLSClientPropertyTest.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/test\/lib\n@@ -53,0 +54,2 @@\n+import jdk.test.lib.security.SecurityUtils;\n+\n@@ -174,0 +177,3 @@\n+        \/\/ Re-enable TLSv1.1 since test depends on it.\n+        SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1.1\");\n+\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSv11\/GenericBlockCipher.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import jdk.test.lib.security.SecurityUtils;\n+\n@@ -32,0 +34,1 @@\n+ *          \/test\/lib\n@@ -98,0 +101,4 @@\n+        \/\/ Re-enable protocol if disabled.\n+        if (protocol.equals(\"TLSv1\") || protocol.equals(\"TLSv1.1\")) {\n+            SecurityUtils.removeFromDisabledTlsAlgs(protocol);\n+        }\n","filename":"test\/jdk\/javax\/net\/ssl\/sanity\/ciphersuites\/SystemPropCipherSuitesOrder.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import jdk.test.lib.security.SecurityUtils;\n+\n@@ -32,0 +34,1 @@\n+ *          \/test\/lib\n@@ -70,0 +73,4 @@\n+        \/\/ Re-enable protocol if it is disabled.\n+        if (protocol.equals(\"TLSv1\") || protocol.equals(\"TLSv1.1\")) {\n+            SecurityUtils.removeFromDisabledTlsAlgs(protocol);\n+        }\n","filename":"test\/jdk\/javax\/net\/ssl\/sanity\/ciphersuites\/TLSCipherSuitesOrder.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.test.lib.security.SecurityUtils;\n+\n@@ -33,0 +35,1 @@\n+  *          \/test\/lib\n@@ -142,0 +145,3 @@\n+        \/\/ Re-enable TLSv1 and TLSv1.1 since test depends on it.\n+        SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1\", \"TLSv1.1\");\n+\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/NamedGroupsWithCipherSuite.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -79,0 +80,2 @@\n+import jdk.test.lib.security.SecurityUtils;\n+\n@@ -303,0 +306,3 @@\n+        \/\/ Re-enable TLSv1 since test depends on it.\n+        SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1\");\n+\n","filename":"test\/jdk\/sun\/security\/ssl\/ClientHandshaker\/LengthCheckTest.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * test\n+ * @test\n@@ -28,1 +28,4 @@\n- *\n+ * @library \/test\/lib\n+ * @run main DebugReportsOneExtraByte\n+ *\/\n+\/*\n@@ -78,0 +81,4 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.security.SecurityUtils;\n+\n@@ -85,11 +92,0 @@\n-    \/*\n-     * Enables the JSSE system debugging system property:\n-     *\n-     *     -Djavax.net.debug=all\n-     *\n-     * This gives a lot of low-level information about operations underway,\n-     * including specific handshake messages, and might be best examined\n-     * after gaining some familiarity with this application.\n-     *\/\n-    private static boolean debug = false;\n-\n@@ -133,3 +129,0 @@\n-        if (debug) {\n-            System.setProperty(\"javax.net.debug\", \"all\");\n-        }\n@@ -137,2 +130,5 @@\n-        DebugReportsOneExtraByte test = new DebugReportsOneExtraByte();\n-        test.runTest();\n+        if (args.length == 0) {\n+            OutputAnalyzer output = ProcessTools.executeTestJvm(\n+                \"-Dtest.src=\" + System.getProperty(\"test.src\"),\n+                \"-Djavax.net.debug=all\", \"DebugReportsOneExtraByte\", \"p\");\n+            output.shouldContain(\"WRITE: TLS10 application_data, length = 8\");\n@@ -140,1 +136,8 @@\n-        System.out.println(\"Test Passed.\");\n+            System.out.println(\"Test Passed.\");\n+        } else {\n+            \/\/ Re-enable TLSv1 since test depends on it\n+            SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1\");\n+\n+            DebugReportsOneExtraByte test = new DebugReportsOneExtraByte();\n+            test.runTest();\n+        }\n","filename":"test\/jdk\/sun\/security\/ssl\/EngineArgs\/DebugReportsOneExtraByte.java","additions":23,"deletions":20,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -1,81 +0,0 @@\n-#! \/bin\/sh\n-\n-#\n-# Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 7126889\n-# @summary Incorrect SSLEngine debug output\n-#\n-# ${TESTJAVA} is pointing to the JDK under test.\n-#\n-# set platform-dependent variables\n-\n-OS=`uname -s`\n-case \"$OS\" in\n-  SunOS | Linux | Darwin | AIX )\n-    PS=\":\"\n-    FS=\"\/\"\n-    ;;\n-  CYGWIN* )\n-    PS=\";\"\n-    FS=\"\/\"\n-    ;;\n-  Windows* )\n-    PS=\";\"\n-    FS=\"\\\\\"\n-    ;;\n-  * )\n-    echo \"Unrecognized system!\"\n-    exit 1;\n-    ;;\n-esac\n-\n-${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d . \\\n-    ${TESTSRC}${FS}DebugReportsOneExtraByte.java\n-\n-STRING='WRITE: TLS10 application_data, length = 8'\n-\n-echo \"Examining debug output for the string:\"\n-echo \"${STRING}\"\n-echo \"=========\"\n-\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} -Djavax.net.debug=all \\\n-    -Dtest.src=${TESTSRC} \\\n-    DebugReportsOneExtraByte 2>&1 | \\\n-    grep \"${STRING}\"\n-RETVAL=$?\n-\n-echo \"=========\"\n-\n-if [ ${RETVAL} -ne 0 ]; then\n-    echo \"Did NOT see the expected debug output.\"\n-    exit 1\n-else\n-    echo \"Received the expected debug output.\"\n-    exit 0\n-fi\n-else\n-    echo \"Received the expected debug output.\"\n-    exit 0\n-fi\n","filename":"test\/jdk\/sun\/security\/ssl\/EngineArgs\/DebugReportsOneExtraByte.sh","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+ * @library \/test\/lib\n@@ -51,0 +52,2 @@\n+import jdk.test.lib.security.SecurityUtils;\n+\n@@ -82,0 +85,4 @@\n+        \/\/ Re-enable TLSv1.1 when test depends on it.\n+        if (protocol[0].equals(\"TLSv1.1\")) {\n+            SecurityUtils.removeFromDisabledTlsAlgs(protocol[0]);\n+        }\n","filename":"test\/jdk\/sun\/security\/ssl\/HandshakeHash\/HandshakeHashCloneExhaustion.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ * @library \/test\/lib\n@@ -38,0 +39,2 @@\n+import jdk.test.lib.security.SecurityUtils;\n+\n@@ -63,0 +66,3 @@\n+        \/\/ Re-enable TLSv1 and TLSv1.1 since test depends on them.\n+        SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1\", \"TLSv1.1\");\n+\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLContextImpl\/IllegalProtocolProperty.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/\n+\/\/ SunJSSE does not support dynamic system properties, no way to re-use\n+\/\/ system properties in samevm\/agentvm mode.\n+\/\/\n+\n+\/*\n+ * @test\n+ * @bug 8202343\n+ * @summary Check that SSLv3, TLSv1 and TLSv1.1 are disabled by default\n+ * @run main\/othervm SSLContextDefault\n+ *\/\n+\n+import java.util.List;\n+import javax.net.ssl.*;\n+\n+public class SSLContextDefault {\n+\n+    private final static String[] protocols = {\n+        \"\", \"SSL\", \"TLS\", \"SSLv3\", \"TLSv1\", \"TLSv1.1\", \"TLSv1.2\", \"TLSv1.3\"\n+    };\n+\n+    private final static List<String> disabledProtocols = List.<String>of(\n+        \"SSLv3\", \"TLSv1\", \"TLSv1.1\"\n+    );\n+\n+    public static void main(String[] args) throws Exception {\n+        for (String protocol : protocols) {\n+            System.out.println(\"\/\/\");\n+            System.out.println(\"\/\/ \" + \"Testing for SSLContext of \" +\n+                    (protocol.isEmpty() ? \"<default>\" : protocol));\n+            System.out.println(\"\/\/\");\n+            checkForProtocols(protocol);\n+            System.out.println();\n+        }\n+    }\n+\n+    public static void checkForProtocols(String protocol) throws Exception {\n+        SSLContext context;\n+        if (protocol.isEmpty()) {\n+            context = SSLContext.getDefault();\n+        } else {\n+            context = SSLContext.getInstance(protocol);\n+            context.init(null, null, null);\n+        }\n+\n+        \/\/ check for the presence of supported protocols of SSLContext\n+        SSLParameters parameters = context.getSupportedSSLParameters();\n+        checkProtocols(parameters.getProtocols(),\n+                \"Supported protocols in SSLContext\", false);\n+\n+\n+        \/\/ check for the presence of default protocols of SSLContext\n+        parameters = context.getDefaultSSLParameters();\n+        checkProtocols(parameters.getProtocols(),\n+                \"Enabled protocols in SSLContext\", true);\n+\n+        \/\/ check for the presence of supported protocols of SSLEngine\n+        SSLEngine engine = context.createSSLEngine();\n+        checkProtocols(engine.getSupportedProtocols(),\n+                \"Supported protocols in SSLEngine\", false);\n+\n+        \/\/ Check for the presence of default protocols of SSLEngine\n+        checkProtocols(engine.getEnabledProtocols(),\n+                \"Enabled protocols in SSLEngine\", true);\n+\n+        SSLSocketFactory factory = context.getSocketFactory();\n+        try (SSLSocket socket = (SSLSocket)factory.createSocket()) {\n+            \/\/ check for the presence of supported protocols of SSLSocket\n+            checkProtocols(socket.getSupportedProtocols(),\n+                \"Supported cipher suites in SSLSocket\", false);\n+\n+            \/\/ Check for the presence of default protocols of SSLSocket\n+            checkProtocols(socket.getEnabledProtocols(),\n+                \"Enabled protocols in SSLSocket\", true);\n+        }\n+\n+        SSLServerSocketFactory serverFactory = context.getServerSocketFactory();\n+        try (SSLServerSocket serverSocket =\n+                (SSLServerSocket)serverFactory.createServerSocket()) {\n+            \/\/ check for the presence of supported protocols of SSLServerSocket\n+            checkProtocols(serverSocket.getSupportedProtocols(),\n+                \"Supported cipher suites in SSLServerSocket\", false);\n+\n+            \/\/ Check for the presence of default protocols of SSLServerSocket\n+            checkProtocols(serverSocket.getEnabledProtocols(),\n+                \"Enabled protocols in SSLServerSocket\", true);\n+        }\n+    }\n+\n+    private static void checkProtocols(String[] protocols,\n+            String title, boolean disabled) throws Exception {\n+        showProtocols(protocols, title);\n+\n+        if (disabled) {\n+            for (String protocol : protocols ) {\n+                if (disabledProtocols.contains(protocol)) {\n+                    throw new Exception(protocol +\n+                                        \" should not be enabled by default\");\n+                }\n+            }\n+        } else {\n+            for (String disabledProtocol : disabledProtocols) {\n+                if (!List.of(protocols).contains(disabledProtocol)) {\n+                    throw new Exception(disabledProtocol +\n+                                        \" should be supported by default\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void showProtocols(String[] protocols, String title) {\n+        System.out.println(title + \"[\" + protocols.length + \"]:\");\n+        for (String protocol : protocols) {\n+            System.out.println(\"  \" + protocol);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLContextImpl\/SSLContextDefault.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+ * @library \/test\/lib\n@@ -37,0 +38,2 @@\n+import jdk.test.lib.security.SecurityUtils;\n+\n@@ -60,0 +63,3 @@\n+        \/\/ Re-enable TLSv1 and TLSv1.1 since test depends on them.\n+        SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1\", \"TLSv1.1\");\n+\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLContextImpl\/SSLContextVersion.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+ * @library \/test\/lib\n@@ -42,0 +43,2 @@\n+import jdk.test.lib.security.SecurityUtils;\n+\n@@ -157,0 +160,2 @@\n+        \/\/ Re-enable TLSv1 since test depends on it.\n+        SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1\");\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLEngineImpl\/EmptyExtensionData.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+ * @library \/test\/lib\n@@ -89,0 +90,2 @@\n+import jdk.test.lib.security.SecurityUtils;\n+\n@@ -161,0 +164,3 @@\n+        \/\/ Re-enable TLSv1 and TLSv1.1 since test depends on them.\n+        SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1\", \"TLSv1.1\");\n+\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLEngineImpl\/SSLEngineBadBufferArrayAccess.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+import jdk.test.lib.security.SecurityUtils;\n+\n@@ -56,0 +58,6 @@\n+\n+        \/\/ Re-enable TLSv1 or TLSv1.1 when test depends on it.\n+        if (protocol.equals(\"TLSv1\") || protocol.equals(\"TLSv1.1\")) {\n+            SecurityUtils.removeFromDisabledTlsAlgs(protocol);\n+        }\n+\n","filename":"test\/jdk\/sun\/security\/util\/HostnameMatcher\/NullHostnameCheck.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import java.security.Security;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n@@ -51,0 +55,18 @@\n+    \/**\n+     * Removes the specified protocols from the jdk.tls.disabledAlgorithms\n+     * security property.\n+     *\/\n+    public static void removeFromDisabledTlsAlgs(String... protocols) {\n+        removeFromDisabledAlgs(\"jdk.tls.disabledAlgorithms\",\n+                               List.<String>of(protocols));\n+    }\n+\n+    private static void removeFromDisabledAlgs(String prop, List<String> algs) {\n+        String value = Security.getProperty(prop);\n+        value = Arrays.stream(value.split(\",\"))\n+                      .map(s -> s.trim())\n+                      .filter(s -> !algs.contains(s))\n+                      .collect(Collectors.joining(\",\"));\n+        Security.setProperty(prop, value);\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/security\/SecurityUtils.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"}]}