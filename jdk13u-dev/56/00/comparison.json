{"files":[{"patch":"@@ -3694,3 +3694,0 @@\n-#define ASM_SUBTRACT\n-\n-#ifdef ASM_SUBTRACT\n@@ -3698,4 +3695,4 @@\n-static unsigned long\n-sub(unsigned long a[], unsigned long b[], unsigned long carry, long len) {\n-  long i = 0, cnt = len;\n-  unsigned long tmp;\n+static julong\n+sub(julong a[], julong b[], julong carry, long len) {\n+  long long i = 0, cnt = len;\n+  julong tmp;\n@@ -3714,18 +3711,0 @@\n-#else \/\/ ASM_SUBTRACT\n-typedef int __attribute__((mode(TI))) int128;\n-\n-\/\/ Subtract 0:b from carry:a.  Return carry.\n-static unsigned long\n-sub(unsigned long a[], unsigned long b[], unsigned long carry, int len) {\n-  int128 tmp = 0;\n-  int i;\n-  for (i = 0; i < len; i++) {\n-    tmp += a[i];\n-    tmp -= b[i];\n-    a[i] = tmp;\n-    tmp >>= 64;\n-    assert(-1 <= tmp && tmp <= 0, \"invariant\");\n-  }\n-  return tmp + carry;\n-}\n-#endif \/\/ ! ASM_SUBTRACT\n@@ -3754,0 +3733,42 @@\n+#else \/\/_WINDOWS\n+\n+static julong\n+sub(julong a[], julong b[], julong carry, long len) {\n+  long i;\n+  julong tmp;\n+  unsigned char c = 1;\n+  for (i = 0; i < len; i++) {\n+    c = _addcarry_u64(c, a[i], ~b[i], &tmp);\n+    a[i] = tmp;\n+  }\n+  c = _addcarry_u64(c, carry, ~0, &tmp);\n+  return tmp;\n+}\n+\n+\/\/ Multiply (unsigned) Long A by Long B, accumulating the double-\n+\/\/ length result into the accumulator formed of T0, T1, and T2.\n+#define MACC(A, B, T0, T1, T2)                          \\\n+do {                                                    \\\n+  julong hi, lo;                            \\\n+  lo = _umul128(A, B, &hi);                             \\\n+  unsigned char c = _addcarry_u64(0, lo, T0, &T0);      \\\n+  c = _addcarry_u64(c, hi, T1, &T1);                    \\\n+  _addcarry_u64(c, T2, 0, &T2);                         \\\n+ } while(0)\n+\n+\/\/ As above, but add twice the double-length result into the\n+\/\/ accumulator.\n+#define MACC2(A, B, T0, T1, T2)                         \\\n+do {                                                    \\\n+  julong hi, lo;                            \\\n+  lo = _umul128(A, B, &hi);                             \\\n+  unsigned char c = _addcarry_u64(0, lo, T0, &T0);      \\\n+  c = _addcarry_u64(c, hi, T1, &T1);                    \\\n+  _addcarry_u64(c, T2, 0, &T2);                         \\\n+  c = _addcarry_u64(0, lo, T0, &T0);                    \\\n+  c = _addcarry_u64(c, hi, T1, &T1);                    \\\n+  _addcarry_u64(c, T2, 0, &T2);                         \\\n+ } while(0)\n+\n+#endif \/\/_WINDOWS\n+\n@@ -3758,4 +3779,4 @@\n-static void __attribute__((noinline))\n-montgomery_multiply(unsigned long a[], unsigned long b[], unsigned long n[],\n-                    unsigned long m[], unsigned long inv, int len) {\n-  unsigned long t0 = 0, t1 = 0, t2 = 0; \/\/ Triple-precision accumulator\n+static void NOINLINE\n+montgomery_multiply(julong a[], julong b[], julong n[],\n+                    julong m[], julong inv, int len) {\n+  julong t0 = 0, t1 = 0, t2 = 0; \/\/ Triple-precision accumulator\n@@ -3764,1 +3785,1 @@\n-  assert(inv * n[0] == -1UL, \"broken inverse in Montgomery multiply\");\n+  assert(inv * n[0] == -1ULL, \"broken inverse in Montgomery multiply\");\n@@ -3800,4 +3821,4 @@\n-static void __attribute__((noinline))\n-montgomery_square(unsigned long a[], unsigned long n[],\n-                  unsigned long m[], unsigned long inv, int len) {\n-  unsigned long t0 = 0, t1 = 0, t2 = 0; \/\/ Triple-precision accumulator\n+static void NOINLINE\n+montgomery_square(julong a[], julong n[],\n+                  julong m[], julong inv, int len) {\n+  julong t0 = 0, t1 = 0, t2 = 0; \/\/ Triple-precision accumulator\n@@ -3806,1 +3827,1 @@\n-  assert(inv * n[0] == -1UL, \"broken inverse in Montgomery multiply\");\n+  assert(inv * n[0] == -1ULL, \"broken inverse in Montgomery square\");\n@@ -3852,1 +3873,1 @@\n-static unsigned long swap(unsigned long x) {\n+static julong swap(julong x) {\n@@ -3858,1 +3879,1 @@\n-static void reverse_words(unsigned long *s, unsigned long *d, int len) {\n+static void reverse_words(julong *s, julong *d, int len) {\n@@ -3880,1 +3901,1 @@\n-  int total_allocation = longwords * sizeof (unsigned long) * 4;\n+  int total_allocation = longwords * sizeof (julong) * 4;\n@@ -3882,1 +3903,1 @@\n-  unsigned long *scratch = (unsigned long *)alloca(total_allocation);\n+  julong *scratch = (julong *)alloca(total_allocation);\n@@ -3885,1 +3906,1 @@\n-  unsigned long\n+  julong\n@@ -3891,3 +3912,3 @@\n-  reverse_words((unsigned long *)a_ints, a, longwords);\n-  reverse_words((unsigned long *)b_ints, b, longwords);\n-  reverse_words((unsigned long *)n_ints, n, longwords);\n+  reverse_words((julong *)a_ints, a, longwords);\n+  reverse_words((julong *)b_ints, b, longwords);\n+  reverse_words((julong *)n_ints, n, longwords);\n@@ -3895,1 +3916,1 @@\n-  ::montgomery_multiply(a, b, n, m, (unsigned long)inv, longwords);\n+  ::montgomery_multiply(a, b, n, m, (julong)inv, longwords);\n@@ -3897,1 +3918,1 @@\n-  reverse_words(m, (unsigned long *)m_ints, longwords);\n+  reverse_words(m, (julong *)m_ints, longwords);\n@@ -3909,1 +3930,1 @@\n-  int total_allocation = longwords * sizeof (unsigned long) * 3;\n+  int total_allocation = longwords * sizeof (julong) * 3;\n@@ -3911,1 +3932,1 @@\n-  unsigned long *scratch = (unsigned long *)alloca(total_allocation);\n+  julong *scratch = (julong *)alloca(total_allocation);\n@@ -3914,1 +3935,1 @@\n-  unsigned long\n+  julong\n@@ -3919,2 +3940,2 @@\n-  reverse_words((unsigned long *)a_ints, a, longwords);\n-  reverse_words((unsigned long *)n_ints, n, longwords);\n+  reverse_words((julong *)a_ints, a, longwords);\n+  reverse_words((julong *)n_ints, n, longwords);\n@@ -3923,1 +3944,1 @@\n-    ::montgomery_square(a, n, m, (unsigned long)inv, longwords);\n+    ::montgomery_square(a, n, m, (julong)inv, longwords);\n@@ -3925,1 +3946,1 @@\n-    ::montgomery_multiply(a, a, n, m, (unsigned long)inv, longwords);\n+    ::montgomery_multiply(a, a, n, m, (julong)inv, longwords);\n@@ -3928,1 +3949,1 @@\n-  reverse_words(m, (unsigned long *)m_ints, longwords);\n+  reverse_words(m, (julong *)m_ints, longwords);\n@@ -3931,2 +3952,0 @@\n-#endif \/\/ WINDOWS\n-\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":74,"deletions":55,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -6068,1 +6068,0 @@\n-#ifndef _WINDOWS\n@@ -6077,1 +6076,0 @@\n-#endif \/\/ WINDOWS\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}