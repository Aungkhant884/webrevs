{"files":[{"patch":"@@ -2696,1 +2696,2 @@\n-\n+        Devices::InstanceAccess devices;\n+        AwtWin32GraphicsDevice *device = devices->GetDevice(screen);\n@@ -2699,4 +2700,4 @@\n-                rect.top,\n-                rect.left,\n-                rect.bottom,\n-                rect.right);\n+                device == NULL ? rect.top : device->ScaleDownY(rect.top),\n+                device == NULL ? rect.left : device->ScaleDownX(rect.left),\n+                device == NULL ? rect.bottom : device->ScaleDownY(rect.bottom),\n+                device == NULL ? rect.right : device->ScaleDownX(rect.right));\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Toolkit.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Insets;\n+import java.awt.Toolkit;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/**\n+ * @test\n+ * @bug 8243925\n+ * @key headful\n+ * @requires (os.family == \"windows\")\n+ * @summary Verifies Toolkit.getScreenInsets using different DPI\n+ * @library \/test\/lib\n+ * @run main\/othervm -Dsun.java2d.uiScale=1 ScreenInsetsDPIVariation\n+ *\/\n+public final class ScreenInsetsDPIVariation {\n+\n+    public static void main(String[] args) throws Exception {\n+        var ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n+        GraphicsDevice[] screenDevices = ge.getScreenDevices();\n+        if (args.length == 0) {\n+            for (int i = 0; i < screenDevices.length; i++) {\n+                var gd = screenDevices[i];\n+                var gc = gd.getDefaultConfiguration();\n+                Insets insets = Toolkit.getDefaultToolkit().getScreenInsets(gc);\n+                checkAllDPI(i, insets);\n+            }\n+        } else {\n+            int screen = Integer.parseInt(args[0]);\n+            int left = Integer.parseInt(args[1]);\n+            int right = Integer.parseInt(args[2]);\n+            int top = Integer.parseInt(args[3]);\n+            int bottom = Integer.parseInt(args[4]);\n+            double scale = Double.parseDouble(args[5]);\n+\n+            System.err.println(\"screen = \" + screen);\n+            System.err.println(\"scale = \" + scale);\n+            if (screen >= screenDevices.length) {\n+                return; \/\/ devices were changed, skip\n+            }\n+            var gc = screenDevices[screen].getDefaultConfiguration();\n+            Insets insets = Toolkit.getDefaultToolkit().getScreenInsets(gc);\n+            check(insets.left, left \/ scale);\n+            check(insets.right, right \/ scale);\n+            check(insets.top, top \/ scale);\n+            check(insets.bottom, bottom \/ scale);\n+        }\n+    }\n+\n+    private static void check(int actual, double expected) {\n+        if (actual != clipRound(expected)) {\n+            System.err.println(\"Expected: \" + expected);\n+            System.err.println(\"Actual: \" + actual);\n+            throw new RuntimeException(\"Wrong size\");\n+        }\n+    }\n+\n+    private static void checkAllDPI(int screen, Insets insets)\n+            throws Exception {\n+        for (String dpi : List.of(\"1\", \"1.5\", \"1.75\", \"2\", \"2.5\", \"3\", \"3.1\")) {\n+            runProcess(dpi, screen, insets);\n+        }\n+    }\n+\n+    public static int clipRound(double coordinate) {\n+        double newv = coordinate - 0.5;\n+        if (newv < Integer.MIN_VALUE) {\n+            return Integer.MIN_VALUE;\n+        }\n+        if (newv > Integer.MAX_VALUE) {\n+            return Integer.MAX_VALUE;\n+        }\n+        return (int) Math.ceil(newv);\n+    }\n+\n+    private static void runProcess(String dpi, int screen, Insets insets)\n+            throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-Dsun.java2d.uiScale=\" + dpi,\n+                ScreenInsetsDPIVariation.class.getSimpleName(),\n+                String.valueOf(screen), String.valueOf(insets.left),\n+                String.valueOf(insets.right), String.valueOf(insets.top),\n+                String.valueOf(insets.bottom), dpi);\n+        Process worker = ProcessTools.startProcess(\"Worker\", pb, null, 20,\n+                TimeUnit.SECONDS);\n+        new OutputAnalyzer(worker).shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Toolkit\/ScreenInsetsDPIVariation\/ScreenInsetsDPIVariation.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -62,5 +62,9 @@\n-            Dimension minimumSize = switch (comp) {\n-                case \"frame\" -> test(new Frame());\n-                case \"window\" -> test(new Window(null));\n-                case \"dialog\" -> test(new Dialog((Frame) null));\n-                default -> throw new java.lang.IllegalStateException(\n+            Dimension minimumSize = null;\n+            if (comp.equals(\"frame\")) {\n+                minimumSize = test(new Frame());\n+            } else if (comp.equals(\"window\")) {\n+                minimumSize = test(new Window(null));\n+            } else if (comp.equals(\"dialog\")) {\n+                minimumSize = test(new Dialog((Frame)null));\n+            } else {\n+                throw new java.lang.IllegalStateException(\n@@ -68,1 +72,2 @@\n-            };\n+            }\n+\n@@ -106,1 +111,1 @@\n-                runPocess(dpi, comp, w, h);\n+                runProcess(dpi, comp, w, h);\n@@ -111,1 +116,1 @@\n-    private static void runPocess(String dpi, String comp, int w, int h)\n+    private static void runProcess(String dpi, String comp, int w, int h)\n","filename":"test\/jdk\/java\/awt\/Window\/MinimumSizeDPIVariation\/MinimumSizeDPIVariation.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"}]}