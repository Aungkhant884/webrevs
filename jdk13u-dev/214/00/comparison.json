{"files":[{"patch":"@@ -381,3 +381,0 @@\n-            if (session == null) {\n-                session = token.getOpSession();\n-            }\n@@ -393,0 +390,3 @@\n+            if (session == null) {\n+                session = token.getOpSession();\n+            }\n@@ -401,1 +401,0 @@\n-            \/\/e.printStackTrace();\n@@ -721,1 +720,3 @@\n-        } else if (errorCode == CKR_ENCRYPTED_DATA_INVALID) {\n+        } else if (errorCode == CKR_ENCRYPTED_DATA_INVALID ||\n+                \/\/ Solaris-specific\n+                errorCode == CKR_GENERAL_ERROR) {\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11AEADCipher.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,0 +106,1 @@\n+        case (int)CKM_SHA512_224:\n@@ -109,0 +110,1 @@\n+        case (int)CKM_SHA512_256:\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Digest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,0 +94,1 @@\n+        case (int)CKM_SHA512_224_HMAC:\n@@ -97,0 +98,1 @@\n+        case (int)CKM_SHA512_256_HMAC:\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Mac.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -724,1 +724,1 @@\n-    ckParamPtr->prfMechanism = jLongToCKULong(jPrfMechanism);\n+    ckParamPtr->prfHashMechanism = jLongToCKULong(jPrfMechanism);\n@@ -1017,1 +1017,2 @@\n- * converts the Java CK_GCM_PARAMS object to a CK_GCM_PARAMS pointer\n+ * converts the Java CK_GCM_PARAMS object to a CK_GCM_PARAMS_NO_IVBITS pointer\n+ * Note: Need to try NSS definition first to avoid SIGSEGV.\n@@ -1022,1 +1023,1 @@\n- * @return pointer to the new CK_GCM_PARAMS structure\n+ * @return pointer to the new CK_GCM_PARAMS_NO_IVBITS structure\n@@ -1024,1 +1025,1 @@\n-CK_GCM_PARAMS_PTR\n+CK_GCM_PARAMS_NO_IVBITS_PTR\n@@ -1027,1 +1028,1 @@\n-    CK_GCM_PARAMS_PTR ckParamPtr;\n+    CK_GCM_PARAMS_NO_IVBITS_PTR ckParamPtr;\n@@ -1055,2 +1056,2 @@\n-    \/\/ allocate memory for CK_GCM_PARAMS pointer\n-    ckParamPtr = calloc(1, sizeof(CK_GCM_PARAMS));\n+    \/\/ allocate memory for CK_GCM_PARAMS_NO_IVBITS pointer\n+    ckParamPtr = calloc(1, sizeof(CK_GCM_PARAMS_NO_IVBITS));\n@@ -1076,1 +1077,1 @@\n-        *pLength = sizeof(CK_GCM_PARAMS);\n+        *pLength = sizeof(CK_GCM_PARAMS_NO_IVBITS);\n@@ -1078,1 +1079,1 @@\n-    TRACE1(\"Created inner GCM_PARAMS PTR %lX\\n\", ptr_to_jlong(ckParamPtr));\n+    TRACE1(\"Created inner GCM_PARAMS PTR w\/o ulIvBits %p\\n\", ckParamPtr);\n@@ -1085,1 +1086,0 @@\n-\n@@ -1182,1 +1182,1 @@\n-    TRACE1(\"DEBUG jMechanismToCKMechanismPtr: allocated mech %p \\n\", ckpMech);\n+    TRACE1(\"DEBUG jMechanismToCKMechanismPtr: allocated mech %p\\n\", ckpMech);\n","filename":"src\/jdk.crypto.cryptoki\/share\/native\/libj2pkcs11\/p11_convert.c","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+    CK_MECHANISM_PTR ckpTemp;\n@@ -84,0 +85,3 @@\n+    TRACE1(\"DEBUG C_EncryptInit: created pMech = %p\\n\",\n+            ckpMechanism);\n+\n@@ -89,2 +93,12 @@\n-    \/\/ if OAEP, then cannot free here\n-    freeCKMechanismPtr(ckpMechanism);\n+    if (ckpMechanism->mechanism == CKM_AES_GCM) {\n+        if (rv == CKR_ARGUMENTS_BAD || rv == CKR_MECHANISM_PARAM_INVALID) {\n+            \/\/ retry with CKM_GCM_PARAMS structure in pkcs11t.h\n+            TRACE0(\"DEBUG C_EncryptInit: retry with CK_GCM_PARAMS\\n\");\n+            ckpTemp = updateGCMParams(env, ckpMechanism);\n+            if (ckpTemp != NULL) { \/\/ only re-call if conversion succeeds\n+                ckpMechanism = ckpTemp;\n+                rv = (*ckpFunctions->C_EncryptInit)(ckSessionHandle, ckpMechanism,\n+                        ckKeyHandle);\n+            }\n+        }\n+    }\n@@ -92,0 +106,2 @@\n+    TRACE1(\"DEBUG C_EncryptInit: freed pMech = %p\\n\", ckpMechanism);\n+    freeCKMechanismPtr(ckpMechanism);\n@@ -93,0 +109,2 @@\n+\n+    TRACE0(\"FINISHED\\n\");\n@@ -295,0 +313,1 @@\n+    CK_MECHANISM_PTR ckpTemp;\n@@ -304,0 +323,3 @@\n+    TRACE1(\"DEBUG C_DecryptInit: created pMech = %p\\n\",\n+            ckpMechanism);\n+\n@@ -309,2 +331,12 @@\n-    \/\/ if OAEP, then cannot free here\n-    freeCKMechanismPtr(ckpMechanism);\n+    if (ckpMechanism->mechanism == CKM_AES_GCM) {\n+        if (rv == CKR_ARGUMENTS_BAD || rv == CKR_MECHANISM_PARAM_INVALID) {\n+            \/\/ retry with CKM_GCM_PARAMS structure in pkcs11t.h\n+            TRACE0(\"DEBUG C_DecryptInit: retry with CK_GCM_PARAMS\\n\");\n+            ckpTemp = updateGCMParams(env, ckpMechanism);\n+            if (ckpTemp != NULL) { \/\/ only re-call if conversion succeeds\n+                ckpMechanism = ckpTemp;\n+                rv = (*ckpFunctions->C_DecryptInit)(ckSessionHandle, ckpMechanism,\n+                        ckKeyHandle);\n+            }\n+        }\n+    }\n@@ -312,0 +344,2 @@\n+    TRACE1(\"DEBUG C_DecryptInit: freed pMech = %p\\n\", ckpMechanism);\n+    freeCKMechanismPtr(ckpMechanism);\n@@ -313,0 +347,2 @@\n+\n+    TRACE0(\"FINISHED\\n\");\n","filename":"src\/jdk.crypto.cryptoki\/share\/native\/libj2pkcs11\/p11_crypt.c","additions":40,"deletions":4,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -305,2 +305,2 @@\n-         TRACE2(\"DEBUG: free mech %lX (mech id = 0x%lX)\\n\",\n-                 ptr_to_jlong(mechPtr),  mechPtr->mechanism);\n+         TRACE2(\"DEBUG freeCKMechanismPtr: free pMech %p (mech 0x%lX)\\n\",\n+                 mechPtr,  mechPtr->mechanism);\n@@ -308,0 +308,1 @@\n+             tmp = mechPtr->pParameter;\n@@ -310,5 +311,9 @@\n-                     tmp = mechPtr->pParameter;\n-                     TRACE1(\"\\t=> free GCM_PARAMS %lX\\n\",\n-                             ptr_to_jlong(tmp));\n-                     free(((CK_GCM_PARAMS*)tmp)->pIv);\n-                     free(((CK_GCM_PARAMS*)tmp)->pAAD);\n+                     if (mechPtr->ulParameterLen == sizeof(CK_GCM_PARAMS_NO_IVBITS)) {\n+                         TRACE0(\"[ GCM_PARAMS w\/o ulIvBits ]\\n\");\n+                         free(((CK_GCM_PARAMS_NO_IVBITS*)tmp)->pIv);\n+                         free(((CK_GCM_PARAMS_NO_IVBITS*)tmp)->pAAD);\n+                     } else if (mechPtr->ulParameterLen == sizeof(CK_GCM_PARAMS)) {\n+                         TRACE0(\"[ GCM_PARAMS ]\\n\");\n+                         free(((CK_GCM_PARAMS*)tmp)->pIv);\n+                         free(((CK_GCM_PARAMS*)tmp)->pAAD);\n+                     }\n@@ -317,3 +322,1 @@\n-                     tmp = mechPtr->pParameter;\n-                     TRACE1(\"\\t=> free CK_CCM_PARAMS %lX\\n\",\n-                             ptr_to_jlong(tmp));\n+                     TRACE0(\"[ CK_CCM_PARAMS ]\\n\");\n@@ -325,3 +328,1 @@\n-                     tmp = mechPtr->pParameter;\n-                     TRACE1(\"\\t=> free CK_TLS_PRF_PARAMS %lX\\n\",\n-                         ptr_to_jlong(tmp));\n+                     TRACE0(\"[ CK_TLS_PRF_PARAMS ]\\n\");\n@@ -337,3 +338,2 @@\n-                     sslMkdTmp = mechPtr->pParameter;\n-                     TRACE1(\"\\t=> free CK_SSL3_MASTER_KEY_DERIVE_PARAMS %lX\\n\",\n-                         ptr_to_jlong(sslMkdTmp));\n+                     sslMkdTmp = tmp;\n+                     TRACE0(\"[ CK_SSL3_MASTER_KEY_DERIVE_PARAMS ]\\n\");\n@@ -346,3 +346,2 @@\n-                     sslKmTmp = mechPtr->pParameter;\n-                     TRACE1(\"\\t=> free CK_SSL3_KEY_MAT_PARAMS %lX\\n\",\n-                         ptr_to_jlong(sslKmTmp));\n+                     sslKmTmp = tmp;\n+                     TRACE0(\"[ CK_SSL3_KEY_MAT_PARAMS ]\\n\");\n@@ -359,3 +358,2 @@\n-                     tlsMkdTmp = mechPtr->pParameter;\n-                     TRACE1(\"\\t=> CK_TLS12_MASTER_KEY_DERIVE_PARAMS %lX\\n\",\n-                         ptr_to_jlong(tlsMkdTmp));\n+                     tlsMkdTmp = tmp;\n+                     TRACE0(\"[ CK_TLS12_MASTER_KEY_DERIVE_PARAMS ]\\n\");\n@@ -367,3 +365,2 @@\n-                     tlsKmTmp = mechPtr->pParameter;\n-                     TRACE1(\"\\t=> free CK_TLS12_KEY_MAT_PARAMS %lX\\n\",\n-                         ptr_to_jlong(tlsKmTmp));\n+                     tlsKmTmp = tmp;\n+                     TRACE0(\"[ CK_TLS12_KEY_MAT_PARAMS ]\\n\");\n@@ -380,3 +377,1 @@\n-                     tmp = mechPtr->pParameter;\n-                     TRACE1(\"\\t=> free CK_ECDH1_DERIVE_PARAMS %lX\\n\",\n-                         ptr_to_jlong(tmp));\n+                     TRACE0(\"[ CK_ECDH1_DERIVE_PARAMS ]\\n\");\n@@ -390,1 +385,0 @@\n-                     TRACE0(\"\\t=> NO OP\\n\");\n@@ -402,1 +396,1 @@\n-                     TRACE0(\"\\t=> ERROR UNSUPPORTED CK PARAMS\\n\");\n+                     TRACE0(\"ERROR: UNSUPPORTED CK_MECHANISM\\n\");\n@@ -405,1 +399,2 @@\n-             free(mechPtr->pParameter);\n+             TRACE1(\"\\t=> freed param %p\\n\", tmp);\n+             free(tmp);\n@@ -407,1 +402,1 @@\n-             TRACE0(\"DEBUG => Parameter NULL\\n\");\n+             TRACE0(\"\\t=> param NULL\\n\");\n@@ -410,0 +405,1 @@\n+         TRACE0(\"FINISHED\\n\");\n@@ -413,0 +409,40 @@\n+\/* This function replaces the CK_GCM_PARAMS_NO_IVBITS structure associated\n+ * with the specified CK_MECHANISM structure with CK_GCM_PARAMS\n+ * structure.\n+ *\n+ * @param mechPtr pointer to the CK_MECHANISM structure containing\n+ * the to-be-converted CK_GCM_PARAMS_NO_IVBITS structure.\n+ * @return pointer to the CK_MECHANISM structure containing the\n+ * converted CK_GCM_PARAMS structure or NULL if no conversion took place.\n+ *\/\n+CK_MECHANISM_PTR updateGCMParams(JNIEnv *env, CK_MECHANISM_PTR mechPtr) {\n+    CK_GCM_PARAMS* pGcmParams2 = NULL;\n+    CK_GCM_PARAMS_NO_IVBITS* pParams = NULL;\n+    if ((mechPtr->mechanism == CKM_AES_GCM) &&\n+            (mechPtr->pParameter != NULL_PTR) &&\n+            (mechPtr->ulParameterLen == sizeof(CK_GCM_PARAMS_NO_IVBITS))) {\n+        pGcmParams2 = calloc(1, sizeof(CK_GCM_PARAMS));\n+        if (pGcmParams2 == NULL) {\n+            throwOutOfMemoryError(env, 0);\n+            return NULL;\n+        }\n+        pParams = (CK_GCM_PARAMS_NO_IVBITS*) mechPtr->pParameter;\n+        pGcmParams2->pIv = pParams->pIv;\n+        pGcmParams2->ulIvLen = pParams->ulIvLen;\n+        pGcmParams2->ulIvBits = (pGcmParams2->ulIvLen << 3);\n+        pGcmParams2->pAAD = pParams->pAAD;\n+        pGcmParams2->ulAADLen = pParams->ulAADLen;\n+        pGcmParams2->ulTagBits = pParams->ulTagBits;\n+        TRACE1(\"DEBUG updateGCMParams: pMech %p\\n\", mechPtr);\n+        TRACE2(\"\\t=> GCM param w\/o ulIvBits %p => GCM param %p\\n\", pParams,\n+                pGcmParams2);\n+        free(pParams);\n+        mechPtr->pParameter = pGcmParams2;\n+        mechPtr->ulParameterLen = sizeof(CK_GCM_PARAMS);\n+        return mechPtr;\n+    } else {\n+        TRACE0(\"DEBUG updateGCMParams: no conversion done\\n\");\n+    }\n+    return NULL;\n+}\n+\n","filename":"src\/jdk.crypto.cryptoki\/share\/native\/libj2pkcs11\/p11_util.c","additions":68,"deletions":32,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* There is a known incompatibility for CK_GCM_PARAMS structure.\n+ * PKCS#11 v2.40 standard mechanisms specification specifies\n+ * CK_GCM_PARAMS as\n+ *     typedef struct CK_GCM_PARAMS {\n+ *         CK_BYTE_PTR       pIv;\n+ *         CK_ULONG          ulIvLen;\n+ *         CK_BYTE_PTR       pAAD;\n+ *         CK_ULONG          ulAADLen;\n+ *         CK_ULONG          ulTagBits;\n+ *     } CK_GCM_PARAMS;\n+ * However, the official header file of PKCS#11 v2.40 defines the\n+ * CK_GCM_PARAMS with an extra \"ulIvBits\" field (type CK_ULONG).\n+ * NSS uses the spec version while Solaris and SoftHSM2 use the header\n+ * version. In order to work with both sides, SunPKCS11 provider defines\n+ * the spec version of CK_GCM_PARAMS as CK_GCM_PARAMS_NO_IVBITS (as in this\n+ * file) and uses it first before failing over to the header version.\n+ *\/\n+#ifndef _PKCS11GCM2_H_\n+#define _PKCS11GCM2_H_ 1\n+\n+\/* include the platform dependent part of the header *\/\n+typedef struct CK_GCM_PARAMS_NO_IVBITS {\n+    CK_BYTE_PTR       pIv;\n+    CK_ULONG          ulIvLen;\n+    CK_BYTE_PTR       pAAD;\n+    CK_ULONG          ulAADLen;\n+    CK_ULONG          ulTagBits;\n+} CK_GCM_PARAMS_NO_IVBITS;\n+\n+typedef CK_GCM_PARAMS_NO_IVBITS CK_PTR CK_GCM_PARAMS_NO_IVBITS_PTR;\n+\n+#endif \/* _PKCS11GCM2_H_ *\/\n","filename":"src\/jdk.crypto.cryptoki\/share\/native\/libj2pkcs11\/pkcs11gcm2.h","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -1836,0 +1836,1 @@\n+    CK_ULONG          ulIvBits;\n@@ -1965,1 +1966,1 @@\n-    CK_MECHANISM_TYPE         prfMechanism;\n+    CK_MECHANISM_TYPE         prfHashMechanism;\n@@ -2003,0 +2004,1 @@\n+\n","filename":"src\/jdk.crypto.cryptoki\/share\/native\/libj2pkcs11\/pkcs11t.h","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -162,1 +162,0 @@\n-#include \"pkcs11.h\"\n@@ -299,0 +298,4 @@\n+\/* function to update the CK_NSS_GCM_PARAMS in mechanism pointer with\n+ * CK_GCM_PARAMS\n+ *\/\n+CK_MECHANISM_PTR updateGCMParams(JNIEnv *env, CK_MECHANISM_PTR mechPtr);\n","filename":"src\/jdk.crypto.cryptoki\/share\/native\/libj2pkcs11\/pkcs11wrapper.h","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,4 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ *\/\n+\n@@ -72,0 +76,1 @@\n+#include \"pkcs11gcm2.h\"\n","filename":"src\/jdk.crypto.cryptoki\/unix\/native\/libj2pkcs11\/p11_md.h","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,4 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ *\/\n+\n@@ -80,0 +84,1 @@\n+#include \"pkcs11gcm2.h\"\n","filename":"src\/jdk.crypto.cryptoki\/windows\/native\/libj2pkcs11\/p11_md.h","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8080462\n+ * @bug 8080462 8229243\n@@ -84,0 +84,1 @@\n+        System.out.println(\"Testing against \" + p.getName());\n@@ -114,1 +115,0 @@\n-        \/\/ Should be ok to use the same key+iv for decryption\n@@ -119,1 +119,1 @@\n-            throw new Exception(\"decryption result mismatch\");\n+            throw new Exception(\"Decryption result mismatch\");\n@@ -128,0 +128,1 @@\n+            System.out.println(\"Expected IAPE thrown\");\n@@ -141,1 +142,2 @@\n-        AlgorithmParameterSpec spec2 = new GCMParameterSpec(128, new byte[30]);\n+        AlgorithmParameterSpec spec2 = new GCMParameterSpec(128,\n+            \"Solaris PKCS11 lib does not allow all-zero IV\".getBytes());\n@@ -157,1 +159,1 @@\n-            throw new Exception(\"decryption result mismatch\");\n+            throw new Exception(\"Decryption result mismatch\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestGCMKeyAndIvCheck.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"}]}