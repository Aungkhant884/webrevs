{"files":[{"patch":"@@ -761,1 +761,1 @@\n-                                (getManifestFromReference());\n+                                (getManifestFromReference(), jv.manifestName);\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-                mev = new ManifestEntryVerifier(man);\n+                mev = new ManifestEntryVerifier(man, jv.manifestName);\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarInputStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -447,1 +447,1 @@\n-            this.mev = new ManifestEntryVerifier(man);\n+            this.mev = new ManifestEntryVerifier(man, jv.manifestName);\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarVerifier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,3 @@\n-    private Manifest man;\n+\n+    private final String manifestFileName; \/\/ never null\n+    private final Manifest man;\n@@ -77,1 +79,1 @@\n-    public ManifestEntryVerifier(Manifest man)\n+    public ManifestEntryVerifier(Manifest man, String manifestFileName)\n@@ -82,0 +84,1 @@\n+        this.manifestFileName = manifestFileName;\n@@ -190,1 +193,0 @@\n-     *\n@@ -212,1 +214,0 @@\n-\n@@ -254,1 +255,2 @@\n-     * or null if the signers for this entry have already been checked.\n+     * or null if the signers for this entry have already been checked\n+     * or there are no signers for this entry.\n@@ -265,1 +267,1 @@\n-        if (verifiedSigners.containsKey(JarFile.MANIFEST_NAME)) {\n+        if (verifiedSigners.containsKey(manifestFileName)) {\n@@ -271,1 +273,1 @@\n-                    verifiedSigners.get(JarFile.MANIFEST_NAME));\n+                    verifiedSigners.get(manifestFileName));\n@@ -274,0 +276,3 @@\n+            if (debug != null) {\n+                debug.println(manifestFileName + \" not present in verifiedSigners\");\n+            }\n@@ -275,1 +280,1 @@\n-            if (verifiedSigners.containsValue(signers)) {\n+            if (signers == null || verifiedSigners.containsValue(signers)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/ManifestEntryVerifier.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.util.JarUtils;\n+\n+import java.nio.file.*;\n+import java.security.Security;\n+import java.util.Collections;\n+\n+\n+\/**\n+ * @test\n+ * @bug 8273826\n+ * @summary Test for signed jar file with lowercase META-INF files\n+ * @library \/test\/lib ..\/\n+ * @build jdk.test.lib.util.JarUtils\n+ * @run main LowerCaseManifest\n+ *\/\n+public class LowerCaseManifest extends Test {\n+\n+    public static void main(String[] args) throws Throwable {\n+        new LowerCaseManifest().start();\n+    }\n+\n+    private void start() throws Throwable {\n+        \/\/ create a jar file that contains one class file\n+        Utils.createFiles(FIRST_FILE);\n+        JarUtils.createJar(UNSIGNED_JARFILE, FIRST_FILE);\n+\n+        \/\/ create key pair for jar signing\n+        createAlias(CA_KEY_ALIAS, \"-ext\", \"bc:c\");\n+        createAlias(KEY_ALIAS);\n+\n+        issueCert(KEY_ALIAS);\n+\n+        \/\/ sign jar\n+        OutputAnalyzer analyzer = jarsigner(\n+                \"-keystore\", KEYSTORE,\n+                \"-verbose\",\n+                \"-storepass\", PASSWORD,\n+                \"-keypass\", PASSWORD,\n+                \"-signedjar\", SIGNED_JARFILE,\n+                UNSIGNED_JARFILE,\n+                KEY_ALIAS);\n+\n+        checkSigning(analyzer);\n+\n+        \/\/ verify signed jar\n+        analyzer = jarsigner(\n+                \"-verify\",\n+                \"-verbose\",\n+                \"-keystore\", KEYSTORE,\n+                \"-storepass\", PASSWORD,\n+                \"-keypass\", PASSWORD,\n+                SIGNED_JARFILE,\n+                KEY_ALIAS);\n+\n+        checkVerifying(analyzer, 0, JAR_VERIFIED);\n+\n+        \/\/ verify signed jar in strict mode\n+        analyzer = jarsigner(\n+                \"-verify\",\n+                \"-verbose\",\n+                \"-strict\",\n+                \"-keystore\", KEYSTORE,\n+                \"-storepass\", PASSWORD,\n+                \"-keypass\", PASSWORD,\n+                SIGNED_JARFILE,\n+                KEY_ALIAS);\n+\n+        checkVerifying(analyzer, 0, JAR_VERIFIED);\n+\n+        \/\/ convert the META-INF\/ files to lower case\n+        FileSystem fs = FileSystems.newFileSystem(Path.of(SIGNED_JARFILE), Collections.emptyMap());\n+        for (String s : new String[]{\"ALIAS.SF\",  \"ALIAS.RSA\", \"MANIFEST.MF\"}) {\n+            Path origPath = fs.getPath(\"META-INF\/\" + s);\n+            Path lowerCase = fs.getPath(\"META-INF\/\" + s.toLowerCase());\n+            Files.write(lowerCase, Files.readAllBytes(origPath));\n+            Files.delete(origPath);\n+        }\n+        fs.close();\n+\n+        \/\/ verify signed jar in strict mode (with lower case META-INF names in place)\n+        analyzer = jarsigner(\n+                \"-verify\",\n+                \"-verbose\",\n+                \"-strict\",\n+                \"-J-Djava.security.debug=jar\",\n+                \"-keystore\", KEYSTORE,\n+                \"-storepass\", PASSWORD,\n+                \"-keypass\", PASSWORD,\n+                SIGNED_JARFILE,\n+                KEY_ALIAS);\n+\n+        checkVerifying(analyzer, 0,\n+                JAR_VERIFIED, \"!not present in verifiedSigners\");\n+        System.out.println(\"Test passed\");\n+    }\n+\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/warnings\/LowerCaseManifest.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"}]}