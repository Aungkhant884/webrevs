{"files":[{"patch":"@@ -483,1 +483,4 @@\n-                cl.recordingStateChanged(getRecording());\n+                \/\/ Skip internal recordings\n+                if (recording != null) {\n+                    cl.recordingStateChanged(recording);\n+                }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformRecording.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+package jdk.jfr.api.recorder;\n+\n+import java.nio.file.Paths;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import jdk.jfr.FlightRecorder;\n+import jdk.jfr.FlightRecorderListener;\n+import jdk.jfr.Recording;\n+\/**\n+ * @test TestRecorderListenerWithDump\n+ *\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @run main\/othervm jdk.jfr.api.recorder.TestRecorderListenerWithDump\n+ *\/\n+public class TestRecorderListenerWithDump {\n+\n+    public static void main(String... args) throws Exception {\n+        AtomicBoolean nullRecording = new AtomicBoolean();\n+        FlightRecorder.addListener(new FlightRecorderListener() {\n+            public void recordingStateChanged(Recording r) {\n+                if (r == null) {\n+                    nullRecording.set(true);\n+                } else {\n+                    System.out.println(\"Recording \" + r.getName() + \" \" + r.getState());\n+                }\n+            }\n+        });\n+        try (Recording r = new Recording()) {\n+            r.start();\n+            r.dump(Paths.get(\"dump.jfr\"));\n+        }\n+        if (nullRecording.get()) {\n+            throw new Exception(\"FlightRecorderListener returned null recording\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/api\/recorder\/TestRecorderListenerWithDump.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"}]}