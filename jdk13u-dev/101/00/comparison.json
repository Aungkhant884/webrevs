{"files":[{"patch":"@@ -1963,0 +1963,7 @@\n+static void _print_ascii_file_h(const char* header, const char* filename, outputStream* st) {\n+  st->print(\"%s\", header);\n+  if (!_print_ascii_file(filename, st)) {\n+    st->print_cr(\"<Not Available>\");\n+  }\n+}\n+\n@@ -2405,0 +2412,48 @@\n+\/\/ additional information about CPU e.g. available frequency ranges\n+static void print_sys_devices_cpu_info(outputStream* st, char* buf, size_t buflen) {\n+  _print_ascii_file_h(\"Online cpus:\", \"\/sys\/devices\/system\/cpu\/online\", st);\n+  _print_ascii_file_h(\"Offline cpus:\", \"\/sys\/devices\/system\/cpu\/offline\", st);\n+\n+  if (ExtensiveErrorReports) {\n+    \/\/ cache related info (cpu 0, should be similar for other CPUs)\n+    for (unsigned int i=0; i < 10; i++) { \/\/ handle max. 10 cache entries\n+      char hbuf_level[60];\n+      char hbuf_type[60];\n+      char hbuf_size[60];\n+      char hbuf_coherency_line_size[80];\n+      snprintf(hbuf_level, 60, \"\/sys\/devices\/system\/cpu\/cpu0\/cache\/index%u\/level\", i);\n+      snprintf(hbuf_type, 60, \"\/sys\/devices\/system\/cpu\/cpu0\/cache\/index%u\/type\", i);\n+      snprintf(hbuf_size, 60, \"\/sys\/devices\/system\/cpu\/cpu0\/cache\/index%u\/size\", i);\n+      snprintf(hbuf_coherency_line_size, 80, \"\/sys\/devices\/system\/cpu\/cpu0\/cache\/index%u\/coherency_line_size\", i);\n+      if (file_exists(hbuf_level)) {\n+        _print_ascii_file_h(\"cache level:\", hbuf_level, st);\n+        _print_ascii_file_h(\"cache type:\", hbuf_type, st);\n+        _print_ascii_file_h(\"cache size:\", hbuf_size, st);\n+        _print_ascii_file_h(\"cache coherency line size:\", hbuf_coherency_line_size, st);\n+      }\n+    }\n+  }\n+\n+  \/\/ we miss the cpufreq entries on Power and s390x\n+#if defined(IA32) || defined(AMD64)\n+  _print_ascii_file_h(\"BIOS frequency limitation:\", \"\/sys\/devices\/system\/cpu\/cpu0\/cpufreq\/bios_limit\", st);\n+  _print_ascii_file_h(\"Frequency switch latency (ns):\", \"\/sys\/devices\/system\/cpu\/cpu0\/cpufreq\/cpuinfo_transition_latency\", st);\n+  _print_ascii_file_h(\"Available cpu frequencies:\", \"\/sys\/devices\/system\/cpu\/cpu0\/cpufreq\/scaling_available_frequencies\", st);\n+  \/\/ min and max should be in the Available range but still print them (not all info might be available for all kernels)\n+  if (ExtensiveErrorReports) {\n+    _print_ascii_file_h(\"Maximum cpu frequency:\", \"\/sys\/devices\/system\/cpu\/cpu0\/cpufreq\/cpuinfo_max_freq\", st);\n+    _print_ascii_file_h(\"Minimum cpu frequency:\", \"\/sys\/devices\/system\/cpu\/cpu0\/cpufreq\/cpuinfo_min_freq\", st);\n+    _print_ascii_file_h(\"Current cpu frequency:\", \"\/sys\/devices\/system\/cpu\/cpu0\/cpufreq\/scaling_cur_freq\", st);\n+  }\n+  \/\/ governors are power schemes, see https:\/\/wiki.archlinux.org\/index.php\/CPU_frequency_scaling\n+  if (ExtensiveErrorReports) {\n+    _print_ascii_file_h(\"Available governors:\", \"\/sys\/devices\/system\/cpu\/cpu0\/cpufreq\/scaling_available_governors\", st);\n+  }\n+  _print_ascii_file_h(\"Current governor:\", \"\/sys\/devices\/system\/cpu\/cpu0\/cpufreq\/scaling_governor\", st);\n+  \/\/ Core performance boost, see https:\/\/www.kernel.org\/doc\/Documentation\/cpu-freq\/boost.txt\n+  \/\/ Raise operating frequency of some cores in a multi-core package if certain conditions apply, e.g.\n+  \/\/ whole chip is not fully utilized\n+  _print_ascii_file_h(\"Core performance\/turbo boost:\", \"\/sys\/devices\/system\/cpu\/cpufreq\/boost\", st);\n+#endif\n+}\n+\n@@ -2413,0 +2468,1 @@\n+  print_sys_devices_cpu_info(st, buf, buflen);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":56,"deletions":0,"binary":false,"changes":56,"status":"modified"}]}