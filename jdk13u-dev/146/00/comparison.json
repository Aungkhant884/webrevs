{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -305,2 +305,1 @@\n-     * @throws ClosedChannelException if the channel is closed\n-     * @throws NotYetConnectedException if the channel is not yet connected\n+     * @throws ClosedChannelException if blocking and the channel is closed\n@@ -314,1 +313,1 @@\n-                ensureOpenAndConnected();\n+                ensureOpen();\n@@ -318,2 +317,0 @@\n-        } else {\n-            ensureOpenAndConnected();\n@@ -354,0 +351,1 @@\n+            ensureOpenAndConnected();\n@@ -396,0 +394,1 @@\n+            ensureOpenAndConnected();\n@@ -433,2 +432,1 @@\n-     * @throws ClosedChannelException if the channel is closed or output shutdown\n-     * @throws NotYetConnectedException if the channel is not yet connected\n+     * @throws ClosedChannelException if blocking and the channel is closed\n@@ -442,1 +440,1 @@\n-                ensureOpenAndConnected();\n+                ensureOpen();\n@@ -448,2 +446,0 @@\n-        } else {\n-            ensureOpenAndConnected();\n@@ -477,1 +473,0 @@\n-\n@@ -480,0 +475,1 @@\n+            ensureOpenAndConnected();\n@@ -510,0 +506,1 @@\n+            ensureOpenAndConnected();\n@@ -538,0 +535,1 @@\n+            ensureOpenAndConnected();\n@@ -1125,0 +1123,2 @@\n+            ensureOpenAndConnected();\n+\n@@ -1202,0 +1202,2 @@\n+            ensureOpenAndConnected();\n+\n@@ -1209,1 +1211,0 @@\n-            beginWrite(true);\n@@ -1211,0 +1212,1 @@\n+                beginWrite(true);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.ClosedChannelException;\n+import java.nio.channels.ServerSocketChannel;\n+import java.nio.channels.SocketChannel;\n+\n+import static org.testng.Assert.*;\n+\n+\/*\n+ * @test\n+ * @bug 8246707\n+ * @library \/test\/lib\n+ * @summary Reading or Writing to a closed SocketChannel should throw a ClosedChannelException\n+ * @run testng\/othervm ReadWriteAfterClose\n+ *\/\n+\n+public class ReadWriteAfterClose {\n+\n+    private ServerSocketChannel listener;\n+    private SocketAddress saddr;\n+    private static final int bufCapacity = 4;\n+    private static final int bufArraySize = 4;\n+    private static final Class<ClosedChannelException> CCE = ClosedChannelException.class;\n+\n+    @BeforeTest\n+    public void setUp() throws IOException {\n+        listener = ServerSocketChannel.open();\n+        listener.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n+        saddr = listener.getLocalAddress();\n+    }\n+\n+    @Test\n+    public void testWriteAfterClose1() throws IOException {\n+        SocketChannel sc = SocketChannel.open(saddr);\n+        sc.close();\n+        ByteBuffer bufWrite = ByteBuffer.allocate(bufCapacity);\n+        Throwable ex = expectThrows(CCE, () -> sc.write(bufWrite));\n+        assertEquals(ex.getClass(), CCE);\n+    }\n+\n+    @Test\n+    public void testWriteAfterClose2() throws IOException {\n+        SocketChannel sc = SocketChannel.open(saddr);\n+        sc.close();\n+        ByteBuffer[] bufArrayWrite = allocateBufArray();\n+        Throwable ex = expectThrows(CCE, () -> sc.write(bufArrayWrite));\n+        assertEquals(ex.getClass(), CCE);\n+    }\n+\n+    @Test\n+    public void testWriteAfterClose3() throws IOException {\n+        SocketChannel sc = SocketChannel.open(saddr);\n+        sc.close();\n+        ByteBuffer[] bufArrayWrite = allocateBufArray();\n+        Throwable ex = expectThrows(CCE, () -> sc.write(bufArrayWrite, 0, bufArraySize));\n+        assertEquals(ex.getClass(), CCE);\n+    }\n+\n+    @Test\n+    public void testReadAfterClose1() throws IOException {\n+        SocketChannel sc = SocketChannel.open(saddr);\n+        sc.close();\n+        ByteBuffer dst = ByteBuffer.allocate(bufCapacity);\n+        Throwable ex = expectThrows(CCE, () -> sc.read(dst));\n+        assertEquals(ex.getClass(), CCE);\n+    }\n+\n+    @Test\n+    public void testReadAfterClose2() throws IOException {\n+        SocketChannel sc = SocketChannel.open(saddr);\n+        sc.close();\n+        ByteBuffer[] dstArray = allocateBufArray();\n+        Throwable ex = expectThrows(CCE, () -> sc.read(dstArray));\n+        assertEquals(ex.getClass(), CCE);\n+    }\n+\n+    @Test\n+    public void testReadAfterClose3() throws IOException {\n+        SocketChannel sc = SocketChannel.open(saddr);\n+        sc.close();\n+        ByteBuffer[] dstArray = allocateBufArray();\n+        Throwable ex = expectThrows(CCE, () -> sc.read(dstArray, 0, bufArraySize));\n+        assertEquals(ex.getClass(), CCE);\n+    }\n+\n+    public ByteBuffer[] allocateBufArray() {\n+        ByteBuffer[] bufArr = new ByteBuffer[bufArraySize];\n+        for (int i = 0; i < bufArraySize; i++)\n+            bufArr[i] = ByteBuffer.allocate(bufCapacity);\n+        return bufArr;\n+    }\n+\n+    @AfterTest\n+    public void tearDown() throws IOException {\n+        listener.close();\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/nio\/channels\/SocketChannel\/ReadWriteAfterClose.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"}]}