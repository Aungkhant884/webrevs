{"files":[{"patch":"@@ -135,2 +135,3 @@\n-    handle_assert_poison_fault(ucVoid, info->si_addr);\n-    return;\n+    if (handle_assert_poison_fault(ucVoid, info->si_addr)) {\n+      return;\n+    }\n","filename":"src\/hotspot\/os\/posix\/vmError_posix.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -245,2 +245,3 @@\n-    handle_assert_poison_fault(ucVoid, info->si_addr);\n-    return 1;\n+    if (handle_assert_poison_fault(ucVoid, info->si_addr)) {\n+      return 1;\n+    }\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -304,2 +304,3 @@\n-    handle_assert_poison_fault(ucVoid, info->si_addr);\n-    return 1;\n+    if (handle_assert_poison_fault(ucVoid, info->si_addr)) {\n+      return 1;\n+    }\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/os_linux_arm.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -274,2 +274,3 @@\n-    handle_assert_poison_fault(ucVoid, info->si_addr);\n-    return 1;\n+    if (handle_assert_poison_fault(ucVoid, info->si_addr)) {\n+      return 1;\n+    }\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/os_linux_ppc.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -273,2 +273,3 @@\n-    handle_assert_poison_fault(ucVoid, info->si_addr);\n-    return 1;\n+    if (handle_assert_poison_fault(ucVoid, info->si_addr)) {\n+      return 1;\n+    }\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/os_linux_s390.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -513,2 +513,3 @@\n-    handle_assert_poison_fault(ucVoid, info->si_addr);\n-    return 1;\n+    if (handle_assert_poison_fault(ucVoid, info->si_addr)) {\n+      return 1;\n+    }\n","filename":"src\/hotspot\/os_cpu\/linux_sparc\/os_linux_sparc.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -306,2 +306,3 @@\n-    handle_assert_poison_fault(ucVoid, info->si_addr);\n-    return 1;\n+    if (handle_assert_poison_fault(ucVoid, info->si_addr)) {\n+      return 1;\n+    }\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -737,0 +737,4 @@\n+void disarm_assert_poison() {\n+  g_assert_poison = &g_dummy;\n+}\n+\n@@ -749,1 +753,8 @@\n-    os::protect_memory((char*)g_assert_poison, os::vm_page_size(), os::MEM_PROT_RWX);\n+    if (os::protect_memory((char*)g_assert_poison, os::vm_page_size(), os::MEM_PROT_RWX) == false) {\n+#ifdef ASSERT\n+      fprintf(stderr, \"Assertion poison page cannot be unprotected - mprotect failed with %d (%s)\",\n+              errno, os::strerror(errno));\n+      fflush(stderr);\n+#endif\n+      return false; \/\/ unprotecting memory may fail in OOM situations, as surprising as this sounds.\n+    }\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+void disarm_assert_poison();\n","filename":"src\/hotspot\/share\/utilities\/debug.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1339,0 +1339,6 @@\n+#ifdef CAN_SHOW_REGISTERS_ON_ASSERT\n+  \/\/ Disarm assertion poison page, since from this point on we do not need this mechanism anymore and it may\n+  \/\/ cause problems in error handling during native OOM, see JDK-8227275.\n+  disarm_assert_poison();\n+#endif\n+\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}