{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020 Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @version $Id$\n@@ -30,0 +29,1 @@\n+ * @LastModified: Jan 2020\n@@ -183,0 +183,12 @@\n+  \/** Major version number of class files for Java 14.\n+   *  @see #MINOR_14\n+   *  @since 6.4.0\n+   *  *\/\n+  public static final short MAJOR_14 = 58;\n+\n+  \/** Minor version number of class files for Java 14.\n+   *  @see #MAJOR_14\n+   *  @since 6.4.0\n+   *  *\/\n+  public static final short MINOR_14 = 0;\n+\n@@ -202,6 +214,8 @@\n-   *  @see <a href='http:\/\/docs.oracle.com\/javase\/specs\/jvms\/se8\/html\/jvms-4.html#jvms-4.5'>\n-   *  Flag definitions for Fields in the Java Virtual Machine Specification (Java SE 8 Edition).<\/a>\n-   *  @see <a href='http:\/\/docs.oracle.com\/javase\/specs\/jvms\/se8\/html\/jvms-4.html#jvms-4.6'>\n-   *  Flag definitions for Methods in the Java Virtual Machine Specification (Java SE 8 Edition).<\/a>\n-   *  @see <a href='http:\/\/docs.oracle.com\/javase\/specs\/jvms\/se8\/html\/jvms-4.html#jvms-4.7.6-300-D.1-D.1'>\n-   *  Flag definitions for Classes in the Java Virtual Machine Specification (Java SE 8 Edition).<\/a>\n+   *  @see <a href='http:\/\/docs.oracle.com\/javase\/specs\/jvms\/se9\/html\/jvms-4.html#jvms-4.1-200-E.1'>\n+   *  Flag definitions for Classes in the Java Virtual Machine Specification (Java SE 9 Edition).<\/a>\n+   *  @see <a href='http:\/\/docs.oracle.com\/javase\/specs\/jvms\/se9\/html\/jvms-4.html#jvms-4.5'>\n+   *  Flag definitions for Fields in the Java Virtual Machine Specification (Java SE 9 Edition).<\/a>\n+   *  @see <a href='http:\/\/docs.oracle.com\/javase\/specs\/jvms\/se9\/html\/jvms-4.html#jvms-4.6'>\n+   *  Flag definitions for Methods in the Java Virtual Machine Specification (Java SE 9 Edition).<\/a>\n+   *  @see <a href='http:\/\/docs.oracle.com\/javase\/specs\/jvms\/se9\/html\/jvms-4.html#jvms-4.7.6-300-D.1-D.1'>\n+   *  Flag definitions for Inner Classes in the Java Virtual Machine Specification (Java SE 9 Edition).<\/a>\n@@ -231,1 +245,11 @@\n-  \/** One of the access flags for fields, methods, or classes.\n+  \/** One of the access flags for the Module attribute.\n+   *  @see #ACC_PUBLIC\n+   *\/\n+  public static final short ACC_OPEN         = 0x0020;\n+\n+  \/** One of the access flags for classes.\n+   *  @see #ACC_PUBLIC\n+   *\/\n+  public static final short ACC_SUPER        = 0x0020;\n+\n+  \/** One of the access flags for methods.\n@@ -236,1 +260,1 @@\n-  \/** One of the access flags for fields, methods, or classes.\n+  \/** One of the access flags for the Module attribute.\n@@ -239,1 +263,1 @@\n-  public static final short ACC_VOLATILE     = 0x0040;\n+  public static final short ACC_TRANSITIVE   = 0x0020;\n@@ -241,1 +265,1 @@\n-  \/** One of the access flags for fields, methods, or classes.\n+  \/** One of the access flags for methods.\n@@ -246,1 +270,11 @@\n-  \/** One of the access flags for fields, methods, or classes.\n+  \/** One of the access flags for the Module attribute.\n+   *  @see #ACC_PUBLIC\n+   *\/\n+  public static final short ACC_STATIC_PHASE = 0x0040;\n+\n+  \/** One of the access flags for fields.\n+   *  @see #ACC_PUBLIC\n+   *\/\n+  public static final short ACC_VOLATILE     = 0x0040;\n+\n+  \/** One of the access flags for fields.\n@@ -251,1 +285,1 @@\n-  \/** One of the access flags for fields, methods, or classes.\n+  \/** One of the access flags for methods.\n@@ -256,1 +290,1 @@\n-  \/** One of the access flags for fields, methods, or classes.\n+  \/** One of the access flags for methods.\n@@ -261,1 +295,1 @@\n-  \/** One of the access flags for fields, methods, or classes.\n+  \/** One of the access flags for classes.\n@@ -266,1 +300,1 @@\n-  \/** One of the access flags for fields, methods, or classes.\n+  \/** One of the access flags for methods or classes.\n@@ -271,1 +305,1 @@\n-  \/** One of the access flags for fields, methods, or classes.\n+  \/** One of the access flags for methods.\n@@ -276,1 +310,1 @@\n-  \/** One of the access flags for fields, methods, or classes.\n+  \/** One of the access flags for fields, methods, classes, MethodParameter attribute, or Module attribute.\n@@ -281,1 +315,1 @@\n-  \/** One of the access flags for fields, methods, or classes.\n+  \/** One of the access flags for classes.\n@@ -286,1 +320,1 @@\n-  \/** One of the access flags for fields, methods, or classes.\n+  \/** One of the access flags for fields or classes.\n@@ -291,1 +325,2 @@\n-  \/** One of the access flags for fields, methods, or classes.\n+  \/\/ Applies to classes compiled by new compilers only\n+  \/** One of the access flags for MethodParameter or Module attributes.\n@@ -296,2 +331,1 @@\n-  \/\/ Applies to classes compiled by new compilers only\n-  \/** One of the access flags for fields, methods, or classes.\n+  \/** One of the access flags for classes.\n@@ -300,1 +334,1 @@\n-  public static final short ACC_SUPER        = 0x0020;\n+  public static final short ACC_MODULE       = (short) 0x8000;\n@@ -304,0 +338,1 @@\n+   *  @deprecated Use {@link #MAX_ACC_FLAG_I}\n@@ -305,0 +340,1 @@\n+  @Deprecated\n@@ -307,0 +343,12 @@\n+  \/** One of the access flags for fields, methods, or classes.\n+   * ACC_MODULE is negative as a short.\n+   * @see #ACC_PUBLIC\n+   * @since 6.4.0\n+   *\/\n+  public static final int MAX_ACC_FLAG_I = 0x8000; \/\/ ACC_MODULE is negative as a short\n+\n+  \/\/ Note that do to overloading:\n+  \/\/ 'synchronized' is for methods, might be 'open' (if Module), 'super' (if class), or 'transitive' (if Module).\n+  \/\/ 'volatile'     is for fields,  might be 'bridge' (if method) or 'static_phase' (if Module)\n+  \/\/ 'transient'    is for fields,  might be 'varargs' (if method)\n+  \/\/ 'module'       is for classes, might be 'mandated' (if Module or MethodParameters)\n@@ -313,1 +361,1 @@\n-    \"synthetic\", \"annotation\", \"enum\"\n+    \"synthetic\", \"annotation\", \"enum\", \"module\"\n@@ -2282,0 +2330,5 @@\n+  public static final byte ATTR_MODULE                                  = 22;\n+  public static final byte ATTR_MODULE_PACKAGES                         = 23;\n+  public static final byte ATTR_MODULE_MAIN_CLASS                       = 24;\n+  public static final byte ATTR_NEST_HOST                               = 25;\n+  public static final byte ATTR_NEST_MEMBERS                            = 26;\n@@ -2283,1 +2336,1 @@\n-  public static final short KNOWN_ATTRIBUTES = 22; \/\/ count of attributes\n+  public static final short KNOWN_ATTRIBUTES = 27; \/\/ count of attributes\n@@ -2293,1 +2346,2 @@\n-    \"BootstrapMethods\", \"MethodParameters\"\n+    \"BootstrapMethods\", \"MethodParameters\", \"Module\", \"ModulePackages\",\n+    \"ModuleMainClass\", \"NestHost\", \"NestMembers\"\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/Const.java","additions":82,"deletions":28,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020 Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @LastModified: Oct 2017\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/ExceptionConst.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n@@ -43,1 +42,2 @@\n-    \/** @return currently used repository instance\n+    \/**\n+     * @return currently used repository instance\n@@ -50,1 +50,2 @@\n-    \/** Set repository instance to be used for class loading\n+    \/**\n+     * Sets repository instance to be used for class loading\n@@ -57,1 +58,2 @@\n-    \/** Lookup class somewhere found on your CLASSPATH, or whereever the\n+    \/**\n+     * Lookups class somewhere found on your CLASSPATH, or whereever the\n@@ -70,1 +72,2 @@\n-     * Try to find class source using the internal repository instance.\n+     * Tries to find class source using the internal repository instance.\n+     *\n@@ -90,1 +93,1 @@\n-     * Add clazz to repository if there isn't an equally named class already in there.\n+     * Adds clazz to repository if there isn't an equally named class already in there.\n@@ -102,1 +105,1 @@\n-     * Remove class with given (fully qualified) name from repository.\n+     * Removes class with given (fully qualified) name from repository.\n@@ -110,1 +113,1 @@\n-     * Remove given class from repository.\n+     * Removes given class from repository.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/Repository.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/AccessFlags.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @version $Id: AnnotationDefault 1 2005-02-13 03:15:08Z dbrosius $\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/AnnotationDefault.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n- * @version $Id: AnnotationEntry\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/AnnotationEntry.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n- * @version $Id: Annotations\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Annotations.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n- * @version $Id$\n@@ -51,1 +50,1 @@\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n@@ -54,1 +53,1 @@\n-\n+    private static final boolean debug = false;\n@@ -60,29 +59,0 @@\n-    protected Attribute(final byte tag, final int name_index, final int length, final ConstantPool constant_pool) {\n-        this.tag = tag;\n-        this.name_index = name_index;\n-        this.length = length;\n-        this.constant_pool = constant_pool;\n-    }\n-\n-    \/**\n-     * Called by objects that are traversing the nodes of the tree implicitely\n-     * defined by the contents of a Java class. I.e., the hierarchy of methods,\n-     * fields, attributes, etc. spawns a tree of objects.\n-     *\n-     * @param v Visitor object\n-     *\/\n-    @Override\n-    public abstract void accept(Visitor v);\n-\n-    \/**\n-     * Dump attribute to file stream in binary format.\n-     *\n-     * @param file Output file stream\n-     * @throws IOException\n-     *\/\n-    public void dump(final DataOutputStream file) throws IOException\n-    {\n-        file.writeShort(name_index);\n-        file.writeInt(length);\n-    }\n-\n@@ -104,28 +74,4 @@\n-    \/**\n-     * Remove attribute reader\n-     *\n-     * @param name the name of the attribute as stored in the class file\n-     *\/\n-    public static void removeAttributeReader(final String name)\n-    {\n-        readers.remove(name);\n-    }\n-\n-    \/**\n-     * Class method reads one attribute from the input data stream. This method\n-     * must not be accessible from the outside. It is called by the Field and\n-     * Method constructor methods.\n-     *\n-     * @see Field\n-     * @see Method\n-     *\n-     * @param file Input stream\n-     * @param constant_pool Array of constants\n-     * @return Attribute\n-     * @throws IOException\n-     * @throws ClassFormatException\n-     *\/\n-    public static Attribute readAttribute(final DataInputStream file, final ConstantPool constant_pool)\n-            throws IOException, ClassFormatException\n-    {\n-        return readAttribute((DataInput) file, constant_pool);\n+    protected static void println(final String msg) {\n+        if (debug) {\n+            System.err.println(msg);\n+        }\n@@ -206,1 +152,1 @@\n-                System.err.println(\"Warning: Obsolete StackMap attribute ignored.\");\n+                println(\"Warning: Obsolete StackMap attribute ignored.\");\n@@ -230,0 +176,10 @@\n+            case Const.ATTR_MODULE:\n+                return new Module(name_index, length, file, constant_pool);\n+            case Const.ATTR_MODULE_PACKAGES:\n+                return new ModulePackages(name_index, length, file, constant_pool);\n+            case Const.ATTR_MODULE_MAIN_CLASS:\n+                return new ModuleMainClass(name_index, length, file, constant_pool);\n+            case Const.ATTR_NEST_HOST:\n+                return new NestHost(name_index, length, file, constant_pool);\n+            case Const.ATTR_NEST_MEMBERS:\n+                return new NestMembers(name_index, length, file, constant_pool);\n@@ -237,2 +193,12 @@\n-     * @return Name of attribute\n-     * @since 6.0\n+     * Class method reads one attribute from the input data stream. This method\n+     * must not be accessible from the outside. It is called by the Field and\n+     * Method constructor methods.\n+     *\n+     * @see Field\n+     * @see Method\n+     *\n+     * @param file Input stream\n+     * @param constant_pool Array of constants\n+     * @return Attribute\n+     * @throws IOException\n+     * @throws ClassFormatException\n@@ -240,1 +206,2 @@\n-    public String getName()\n+    public static Attribute readAttribute(final DataInputStream file, final ConstantPool constant_pool)\n+            throws IOException, ClassFormatException\n@@ -242,2 +209,1 @@\n-        final ConstantUtf8 c = (ConstantUtf8) constant_pool.getConstant(name_index, Const.CONSTANT_Utf8);\n-        return c.getBytes();\n+        return readAttribute((DataInput) file, constant_pool);\n@@ -247,1 +213,3 @@\n-     * @return Length of attribute field in bytes.\n+     * Remove attribute reader\n+     *\n+     * @param name the name of the attribute as stored in the class file\n@@ -249,1 +217,1 @@\n-    public final int getLength()\n+    public static void removeAttributeReader(final String name)\n@@ -251,1 +219,1 @@\n-        return length;\n+        readers.remove(name);\n@@ -254,4 +222,1 @@\n-    \/**\n-     * @param length length in bytes.\n-     *\/\n-    public final void setLength(final int length)\n+    protected Attribute(final byte tag, final int name_index, final int length, final ConstantPool constant_pool)\n@@ -259,0 +224,2 @@\n+        this.tag = tag;\n+        this.name_index = name_index;\n@@ -260,0 +227,1 @@\n+        this.constant_pool = constant_pool;\n@@ -263,1 +231,6 @@\n-     * @param name_index of attribute.\n+     * Called by objects that are traversing the nodes of the tree implicitely\n+     * defined by the contents of a Java class. I.e., the hierarchy of methods,\n+     * fields, attributes, etc. spawns a tree of objects.\n+     *\n+     * @param v\n+     *            Visitor object\n@@ -265,4 +238,2 @@\n-    public final void setNameIndex(final int name_index)\n-    {\n-        this.name_index = name_index;\n-    }\n+    @Override\n+    public abstract void accept(Visitor v);\n@@ -271,1 +242,4 @@\n-     * @return Name index in constant pool of attribute name.\n+     * Use copy() if you want to have a deep copy(), i.e., with all references\n+     * copied correctly.\n+     *\n+     * @return shallow copy of this attribute\n@@ -273,1 +247,2 @@\n-    public final int getNameIndex()\n+    @Override\n+    public Object clone()\n@@ -275,1 +250,10 @@\n-        return name_index;\n+        Attribute attr = null;\n+        try\n+        {\n+            attr = (Attribute) super.clone();\n+        }\n+        catch (final CloneNotSupportedException e)\n+        {\n+            throw new Error(\"Clone Not Supported\"); \/\/ never happens\n+        }\n+        return attr;\n@@ -279,1 +263,1 @@\n-     * @return Tag of attribute, i.e., its type. Value may not be altered, thus there is no setTag() method.\n+     * @return deep copy of this attribute\n@@ -281,1 +265,10 @@\n-    public final byte getTag()\n+    public abstract Attribute copy(ConstantPool _constant_pool);\n+\n+    \/**\n+     * Dump attribute to file stream in binary format.\n+     *\n+     * @param file\n+     *            Output file stream\n+     * @throws IOException\n+     *\/\n+    public void dump(final DataOutputStream file) throws IOException\n@@ -283,1 +276,2 @@\n-        return tag;\n+        file.writeShort(name_index);\n+        file.writeInt(length);\n@@ -295,0 +289,34 @@\n+    \/**\n+     * @return Length of attribute field in bytes.\n+     *\/\n+    public final int getLength()\n+    {\n+        return length;\n+    }\n+\n+    \/**\n+     * @return Name of attribute\n+     * @since 6.0\n+     *\/\n+    public String getName()\n+    {\n+        final ConstantUtf8 c = (ConstantUtf8) constant_pool.getConstant(name_index, Const.CONSTANT_Utf8);\n+        return c.getBytes();\n+    }\n+\n+    \/**\n+     * @return Name index in constant pool of attribute name.\n+     *\/\n+    public final int getNameIndex()\n+    {\n+        return name_index;\n+    }\n+\n+    \/**\n+     * @return Tag of attribute, i.e., its type. Value may not be altered, thus there is no setTag() method.\n+     *\/\n+    public final byte getTag()\n+    {\n+        return tag;\n+    }\n+\n@@ -305,4 +333,1 @@\n-     * Use copy() if you want to have a deep copy(), i.e., with all references\n-     * copied correctly.\n-     *\n-     * @return shallow copy of this attribute\n+     * @param length length in bytes.\n@@ -310,2 +335,1 @@\n-    @Override\n-    public Object clone()\n+    public final void setLength(final int length)\n@@ -313,10 +337,1 @@\n-        Attribute attr = null;\n-        try\n-        {\n-            attr = (Attribute) super.clone();\n-        }\n-        catch (final CloneNotSupportedException e)\n-        {\n-            throw new Error(\"Clone Not Supported\"); \/\/ never happens\n-        }\n-        return attr;\n+        this.length = length;\n@@ -326,1 +341,1 @@\n-     * @return deep copy of this attribute\n+     * @param name_index of attribute.\n@@ -328,1 +343,4 @@\n-    public abstract Attribute copy(ConstantPool _constant_pool);\n+    public final void setNameIndex(final int name_index)\n+    {\n+        this.name_index = name_index;\n+    }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Attribute.java","additions":121,"deletions":103,"binary":false,"changes":224,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/AttributeReader.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-     * @param bootstrap_arguments int[] indices into constant_pool of CONSTANT_<type>_info\n+     * @param bootstrap_arguments int[] indices into constant_pool of CONSTANT_[type]_info\n@@ -99,1 +99,1 @@\n-     * @return int[] of bootstrap_method indices into constant_pool of CONSTANT_<type>_info\n+     * @return int[] of bootstrap_method indices into constant_pool of CONSTANT_[type]_info\n@@ -113,1 +113,1 @@\n-     * @param bootstrap_arguments int[] indices into constant_pool of CONSTANT_<type>_info\n+     * @param bootstrap_arguments int[] indices into constant_pool of CONSTANT_[type]_info\n@@ -136,1 +136,1 @@\n-        buf.append(Utility.compactClassName(bootstrap_method_name));\n+        buf.append(Utility.compactClassName(bootstrap_method_name, false));\n@@ -139,1 +139,1 @@\n-            buf.append(\"\\n     Method Arguments:\");\n+            buf.append(\"\\nMethod Arguments:\");\n@@ -141,1 +141,1 @@\n-                buf.append(\"\\n     \").append(i).append(\": \");\n+                buf.append(\"\\n  \").append(i).append(\": \");\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/BootstrapMethod.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-        buf.append(\"):\\n\");\n+        buf.append(\"):\");\n@@ -143,0 +143,2 @@\n+            buf.append(\"\\n\");\n+            final int start = buf.length();\n@@ -144,1 +146,6 @@\n-            buf.append(bootstrap_methods[i].toString(super.getConstantPool())).append(\"\\n\");\n+            final int indent_count = buf.length() - start;\n+            final String[] lines = (bootstrap_methods[i].toString(super.getConstantPool())).split(\"\\\\r?\\\\n\");\n+            buf.append(lines[0]);\n+            for (int j = 1; j < lines.length; j++) {\n+                buf.append(\"\\n\").append(\"          \".substring(0,indent_count)).append(lines[j]);\n+            }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/BootstrapMethods.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ClassFormatException.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n- * @version $Id$\n@@ -69,1 +68,1 @@\n-     * Parse class from the given stream.\n+     * Parses class from the given stream.\n@@ -87,1 +86,1 @@\n-    \/** Parse class from given .class file.\n+    \/** Parses class from given .class file.\n@@ -98,1 +97,1 @@\n-    \/** Parse class from given .class file in a ZIP-archive\n+    \/** Parses class from given .class file in a ZIP-archive\n@@ -112,1 +111,1 @@\n-     * Parse the given Java class file and return an object that represents\n+     * Parses the given Java class file and return an object that represents\n@@ -202,1 +201,1 @@\n-     * Read information about the attributes of the class.\n+     * Reads information about the attributes of the class.\n@@ -216,1 +215,1 @@\n-     * Read information about the class and its super class.\n+     * Reads information about the class and its super class.\n@@ -238,1 +237,1 @@\n-     * Read constant pool entries.\n+     * Reads constant pool entries.\n@@ -248,1 +247,1 @@\n-     * Read information about the fields of the class, i.e., its variables.\n+     * Reads information about the fields of the class, i.e., its variables.\n@@ -263,1 +262,1 @@\n-     * Check whether the header of the file is ok.\n+     * Checks whether the header of the file is ok.\n@@ -276,1 +275,1 @@\n-     * Read information about the interfaces implemented by this class.\n+     * Reads information about the interfaces implemented by this class.\n@@ -290,1 +289,1 @@\n-     * Read information about the methods of the class.\n+     * Reads information about the methods of the class.\n@@ -304,1 +303,1 @@\n-     * Read major and minor version of compiler which created the file.\n+     * Reads major and minor version of compiler which created the file.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ClassParser.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n- * @version $Id$\n@@ -147,1 +146,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -168,1 +167,1 @@\n-    public final Attribute[] getAttributes() {\n+    public Attribute[] getAttributes() {\n@@ -202,1 +201,1 @@\n-    public final byte[] getCode() {\n+    public byte[] getCode() {\n@@ -211,1 +210,1 @@\n-    public final CodeException[] getExceptionTable() {\n+    public CodeException[] getExceptionTable() {\n@@ -219,1 +218,1 @@\n-    public final int getMaxLocals() {\n+    public int getMaxLocals() {\n@@ -227,1 +226,1 @@\n-    public final int getMaxStack() {\n+    public int getMaxStack() {\n@@ -263,1 +262,1 @@\n-    public final void setAttributes( final Attribute[] attributes ) {\n+    public void setAttributes( final Attribute[] attributes ) {\n@@ -272,1 +271,1 @@\n-    public final void setCode( final byte[] code ) {\n+    public void setCode( final byte[] code ) {\n@@ -281,1 +280,1 @@\n-    public final void setExceptionTable( final CodeException[] exception_table ) {\n+    public void setExceptionTable( final CodeException[] exception_table ) {\n@@ -290,1 +289,1 @@\n-    public final void setMaxLocals( final int max_locals ) {\n+    public void setMaxLocals( final int max_locals ) {\n@@ -298,1 +297,1 @@\n-    public final void setMaxStack( final int max_stack ) {\n+    public void setMaxStack( final int max_stack ) {\n@@ -306,1 +305,1 @@\n-    public final String toString( final boolean verbose ) {\n+    public String toString( final boolean verbose ) {\n@@ -331,1 +330,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Code.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n- * @version $Id$\n@@ -36,1 +35,1 @@\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n@@ -107,1 +106,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -119,1 +118,1 @@\n-    public final int getCatchType() {\n+    public int getCatchType() {\n@@ -127,1 +126,1 @@\n-    public final int getEndPC() {\n+    public int getEndPC() {\n@@ -135,1 +134,1 @@\n-    public final int getHandlerPC() {\n+    public int getHandlerPC() {\n@@ -143,1 +142,1 @@\n-    public final int getStartPC() {\n+    public int getStartPC() {\n@@ -151,1 +150,1 @@\n-    public final void setCatchType( final int catch_type ) {\n+    public void setCatchType( final int catch_type ) {\n@@ -159,1 +158,1 @@\n-    public final void setEndPC( final int end_pc ) {\n+    public void setEndPC( final int end_pc ) {\n@@ -167,1 +166,1 @@\n-    public final void setHandlerPC( final int handler_pc ) { \/\/ TODO unused\n+    public void setHandlerPC( final int handler_pc ) { \/\/ TODO unused\n@@ -175,1 +174,1 @@\n-    public final void setStartPC( final int start_pc ) { \/\/ TODO unused\n+    public void setStartPC( final int start_pc ) { \/\/ TODO unused\n@@ -184,1 +183,1 @@\n-    public final String toString() {\n+    public String toString() {\n@@ -193,1 +192,1 @@\n-    public final String toString( final ConstantPool cp, final boolean verbose ) {\n+    public String toString( final ConstantPool cp, final boolean verbose ) {\n@@ -205,1 +204,1 @@\n-    public final String toString( final ConstantPool cp ) {\n+    public String toString( final ConstantPool cp ) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/CodeException.java","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n@@ -67,1 +66,0 @@\n-\n@@ -72,1 +70,0 @@\n-\n@@ -83,1 +80,0 @@\n-\n@@ -86,1 +82,0 @@\n-\n@@ -95,1 +90,0 @@\n-\n@@ -104,1 +98,0 @@\n-\n@@ -117,1 +110,0 @@\n-\n@@ -127,1 +119,0 @@\n-\n@@ -129,1 +120,1 @@\n-     * Read one constant from the given input, the type depends on a tag byte.\n+     * Reads one constant from the given input, the type depends on a tag byte.\n@@ -186,1 +177,0 @@\n-\n@@ -194,1 +184,0 @@\n-\n@@ -196,1 +185,1 @@\n-     * Return value as defined by given BCELComparator strategy.\n+     * Returns value as defined by given BCELComparator strategy.\n@@ -207,1 +196,0 @@\n-\n@@ -209,1 +197,1 @@\n-     * Return value as defined by given BCELComparator strategy.\n+     * Returns value as defined by given BCELComparator strategy.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Constant.java","additions":5,"deletions":17,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantCP.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -99,1 +99,1 @@\n-    public final int getNameIndex() {\n+    public int getNameIndex() {\n@@ -107,1 +107,1 @@\n-    public final void setNameIndex( final int name_index ) {\n+    public void setNameIndex( final int name_index ) {\n@@ -132,1 +132,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantClass.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @version $Id$\n@@ -90,1 +89,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -99,1 +98,1 @@\n-    public final double getBytes() {\n+    public double getBytes() {\n@@ -107,1 +106,1 @@\n-    public final void setBytes( final double bytes ) {\n+    public void setBytes( final double bytes ) {\n@@ -116,1 +115,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantDouble.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-    public final int getBootstrapMethodAttrIndex() {\n+    public int getBootstrapMethodAttrIndex() {\n@@ -91,1 +91,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantDynamic.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantFieldref.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @version $Id$\n@@ -91,1 +90,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -100,1 +99,1 @@\n-    public final float getBytes() {\n+    public float getBytes() {\n@@ -108,1 +107,1 @@\n-    public final void setBytes( final float bytes ) {\n+    public void setBytes( final float bytes ) {\n@@ -117,1 +116,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantFloat.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @version $Id$\n@@ -90,1 +89,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -99,1 +98,1 @@\n-    public final int getBytes() {\n+    public int getBytes() {\n@@ -107,1 +106,1 @@\n-    public final void setBytes( final int bytes ) {\n+    public void setBytes( final int bytes ) {\n@@ -116,1 +115,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantInteger.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantInterfaceMethodref.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-    public final int getBootstrapMethodAttrIndex() {\n+    public int getBootstrapMethodAttrIndex() {\n@@ -91,1 +91,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantInvokeDynamic.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020 Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @version $Id$\n@@ -35,0 +34,1 @@\n+ * @LastModified: Jan 2020\n@@ -89,1 +89,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -98,1 +98,1 @@\n-    public final long getBytes() {\n+    public long getBytes() {\n@@ -106,1 +106,1 @@\n-    public final void setBytes( final long bytes ) {\n+    public void setBytes( final long bytes ) {\n@@ -115,1 +115,1 @@\n-    public final String toString() {\n+    public String toString() {\n@@ -124,1 +124,1 @@\n-        return Long.valueOf(bytes);\n+        return bytes;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantLong.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -120,1 +120,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantMethodHandle.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -107,1 +107,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantMethodType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantMethodref.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -102,1 +102,1 @@\n-    public final int getNameIndex() {\n+    public int getNameIndex() {\n@@ -110,1 +110,1 @@\n-    public final void setNameIndex( final int name_index ) {\n+    public void setNameIndex( final int name_index ) {\n@@ -135,1 +135,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantModule.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n- * @version $Id$\n@@ -94,1 +93,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -104,1 +103,1 @@\n-    public final int getNameIndex() {\n+    public int getNameIndex() {\n@@ -111,1 +110,1 @@\n-    public final String getName( final ConstantPool cp ) {\n+    public String getName( final ConstantPool cp ) {\n@@ -119,1 +118,1 @@\n-    public final int getSignatureIndex() {\n+    public int getSignatureIndex() {\n@@ -126,1 +125,1 @@\n-    public final String getSignature( final ConstantPool cp ) {\n+    public String getSignature( final ConstantPool cp ) {\n@@ -134,1 +133,1 @@\n-    public final void setNameIndex( final int name_index ) {\n+    public void setNameIndex( final int name_index ) {\n@@ -142,1 +141,1 @@\n-    public final void setSignatureIndex( final int signature_index ) {\n+    public void setSignatureIndex( final int signature_index ) {\n@@ -151,1 +150,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantNameAndType.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantObject.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-     * Called by objects that are traversing the nodes of the tree implicitely\n+     * Called by objects that are traversing the nodes of the tree implicitly\n@@ -93,1 +93,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -102,1 +102,1 @@\n-    public final int getNameIndex() {\n+    public int getNameIndex() {\n@@ -110,1 +110,1 @@\n-    public final void setNameIndex( final int name_index ) {\n+    public void setNameIndex( final int name_index ) {\n@@ -135,1 +135,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantPackage.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n- * @version $Id$\n@@ -46,1 +45,0 @@\n-\n@@ -54,1 +52,0 @@\n-\n@@ -56,1 +53,1 @@\n-     * Read constants from given input stream.\n+     * Reads constants from given input stream.\n@@ -85,1 +82,0 @@\n-\n@@ -98,1 +94,0 @@\n-\n@@ -100,1 +95,1 @@\n-     * Resolve constant to a string representation.\n+     * Resolves constant to a string representation.\n@@ -166,0 +161,10 @@\n+            case Const.CONSTANT_Module:\n+                i = ((ConstantModule) c).getNameIndex();\n+                c = getConstant(i, Const.CONSTANT_Utf8);\n+                str = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);\n+                break;\n+            case Const.CONSTANT_Package:\n+                i = ((ConstantPackage) c).getNameIndex();\n+                c = getConstant(i, Const.CONSTANT_Utf8);\n+                str = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);\n+                break;\n@@ -172,1 +177,0 @@\n-\n@@ -201,1 +205,0 @@\n-\n@@ -203,1 +206,1 @@\n-     * Retrieve constant at `index' from constant pool and resolve it to\n+     * Retrieves constant at `index' from constant pool and resolve it to\n@@ -215,1 +218,0 @@\n-\n@@ -231,1 +233,0 @@\n-\n@@ -233,1 +234,1 @@\n-     * Get constant from constant pool.\n+     * Gets constant from constant pool.\n@@ -247,1 +248,0 @@\n-\n@@ -249,1 +249,1 @@\n-     * Get constant from constant pool and check whether it has the\n+     * Gets constant from constant pool and check whether it has the\n@@ -271,1 +271,0 @@\n-\n@@ -280,1 +279,0 @@\n-\n@@ -282,1 +280,1 @@\n-     * Get string from constant pool and bypass the indirection of\n+     * Gets string from constant pool and bypass the indirection of\n@@ -298,1 +296,1 @@\n-        \/* This switch() is not that elegant, since the two classes have the\n+        \/* This switch() is not that elegant, since the four classes have the\n@@ -312,0 +310,6 @@\n+            case Const.CONSTANT_Module:\n+                i = ((ConstantModule) c).getNameIndex();\n+                break;\n+            case Const.CONSTANT_Package:\n+                i = ((ConstantPackage) c).getNameIndex();\n+                break;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantPool.java","additions":23,"deletions":19,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n- * @version $Id$\n@@ -90,1 +89,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -99,1 +98,1 @@\n-    public final int getStringIndex() {\n+    public int getStringIndex() {\n@@ -107,1 +106,1 @@\n-    public final void setStringIndex( final int string_index ) {\n+    public void setStringIndex( final int string_index ) {\n@@ -116,1 +115,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantString.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,1 @@\n- * This class is derived from the abstract {@link Constant}\n- * and represents a reference to a Utf8 encoded string.\n+ * Extends the abstract {@link Constant} to represent a reference to a UTF-8 encoded string.\n@@ -35,3 +34,2 @@\n- * @version $Id$\n- * @see     Constant\n- * @LastModified: Jun 2019\n+ * @see Constant\n+ * @LastModified: Jan 2020\n@@ -41,1 +39,1 @@\n-    private final String bytes;\n+    private static class Cache {\n@@ -43,5 +41,3 @@\n-    \/\/ TODO these should perhaps be AtomicInt?\n-    private static volatile int considered = 0;\n-    private static volatile int hits = 0;\n-    private static volatile int skipped = 0;\n-    private static volatile int created = 0;\n+        private static final boolean BCEL_STATISTICS = false;\n+        private static final int MAX_ENTRIES = 20000;\n+        private static final int INITIAL_CAPACITY = (int) (MAX_ENTRIES \/ 0.75);\n@@ -49,3 +45,2 @@\n-    \/\/ Set the size to 0 or below to skip caching entirely\n-    private static final int MAX_CACHED_SIZE = 200;\n-    private static final boolean BCEL_STATISTICS = false;\n+        private static final HashMap<String, ConstantUtf8> CACHE = new LinkedHashMap<String, ConstantUtf8>(\n+            INITIAL_CAPACITY, 0.75f, true) {\n@@ -53,8 +48,0 @@\n-\n-    private static class CACHE_HOLDER {\n-\n-        private static final int MAX_CACHE_ENTRIES = 20000;\n-        private static final int INITIAL_CACHE_CAPACITY = (int)(MAX_CACHE_ENTRIES\/0.75);\n-\n-        private static final HashMap<String, ConstantUtf8> CACHE =\n-                new LinkedHashMap<String, ConstantUtf8>(INITIAL_CACHE_CAPACITY, 0.75f, true) {\n@@ -65,1 +52,1 @@\n-                 return size() > MAX_CACHE_ENTRIES;\n+                return size() > MAX_ENTRIES;\n@@ -69,1 +56,2 @@\n-    }\n+        \/\/ Set the size to 0 or below to skip caching entirely\n+        private static final int MAX_ENTRY_SIZE = 200;\n@@ -71,5 +59,3 @@\n-    \/\/ for accesss by test code\n-    static void printStats() {\n-        System.err.println(\"Cache hit \" + hits + \"\/\" + considered +\", \" + skipped + \" skipped\");\n-        System.err.println(\"Total of \" + created + \" ConstantUtf8 objects created\");\n-    }\n+        static boolean isEnabled() {\n+            return Cache.MAX_ENTRIES > 0 && MAX_ENTRY_SIZE > 0;\n+        }\n@@ -77,3 +63,0 @@\n-    \/\/ for accesss by test code\n-    static void clearStats() {\n-        hits = considered = skipped = created = 0;\n@@ -82,9 +65,7 @@\n-    static {\n-        if (BCEL_STATISTICS) {\n-            Runtime.getRuntime().addShutdownHook(new Thread() {\n-                @Override\n-                public void run() {\n-                    printStats();\n-                }\n-            });\n-        }\n+    \/**\n+     * Clears the cache.\n+     *\n+     * @since 6.4.0\n+     *\/\n+    public static synchronized void clearCache() {\n+        Cache.CACHE.clear();\n@@ -94,0 +75,7 @@\n+     * Gets a new or cached instance of the given value.\n+     * <p>\n+     * See {@link ConstantUtf8} class Javadoc for details.\n+     * <\/p>\n+     *\n+     * @param value the value.\n+     * @return a new or cached instance of the given value.\n@@ -96,4 +84,3 @@\n-    public static ConstantUtf8 getCachedInstance(final String s) {\n-        if (s.length() > MAX_CACHED_SIZE) {\n-            skipped++;\n-            return  new ConstantUtf8(s);\n+    public static ConstantUtf8 getCachedInstance(final String value) {\n+        if (value.length() > Cache.MAX_ENTRY_SIZE) {\n+            return new ConstantUtf8(value);\n@@ -101,1 +88,1 @@\n-        considered++;\n+\n@@ -103,1 +90,1 @@\n-            ConstantUtf8 result = CACHE_HOLDER.CACHE.get(s);\n+            ConstantUtf8 result = Cache.CACHE.get(value);\n@@ -105,5 +92,4 @@\n-                    hits++;\n-                    return result;\n-                }\n-            result = new ConstantUtf8(s);\n-            CACHE_HOLDER.CACHE.put(s, result);\n+                return result;\n+            }\n+            result = new ConstantUtf8(value);\n+            Cache.CACHE.put(value, result);\n@@ -115,0 +101,8 @@\n+     * Gets a new or cached instance of the given value.\n+     * <p>\n+     * See {@link ConstantUtf8} class Javadoc for details.\n+     * <\/p>\n+     *\n+     * @param dataInput the value.\n+     * @return a new or cached instance of the given value.\n+     * @throws IOException if an I\/O error occurs.\n@@ -117,2 +111,2 @@\n-    public static ConstantUtf8 getInstance(final String s) {\n-        return new ConstantUtf8(s);\n+    public static ConstantUtf8 getInstance(final DataInput dataInput) throws IOException {\n+        return getInstance(dataInput.readUTF());\n@@ -122,0 +116,7 @@\n+     * Gets a new or cached instance of the given value.\n+     * <p>\n+     * See {@link ConstantUtf8} class Javadoc for details.\n+     * <\/p>\n+     *\n+     * @param value the value.\n+     * @return a new or cached instance of the given value.\n@@ -124,2 +125,2 @@\n-    public static ConstantUtf8 getInstance (final DataInput input)  throws IOException {\n-        return getInstance(input.readUTF());\n+    public static ConstantUtf8 getInstance(final String value) {\n+        return Cache.isEnabled() ? getCachedInstance(value) : new ConstantUtf8(value);\n@@ -128,0 +129,2 @@\n+    private final String value;\n+\n@@ -129,1 +132,3 @@\n-     * Initialize from another object.\n+     * Initializes from another object.\n+     *\n+     * @param constantUtf8 the value.\n@@ -131,2 +136,2 @@\n-    public ConstantUtf8(final ConstantUtf8 c) {\n-        this(c.getBytes());\n+    public ConstantUtf8(final ConstantUtf8 constantUtf8) {\n+        this(constantUtf8.getBytes());\n@@ -135,1 +140,0 @@\n-\n@@ -137,1 +141,1 @@\n-     * Initialize instance from file data.\n+     * Initializes instance from file data.\n@@ -139,1 +143,1 @@\n-     * @param file Input stream\n+     * @param dataInput Input stream\n@@ -142,1 +146,1 @@\n-    ConstantUtf8(final DataInput file) throws IOException {\n+    ConstantUtf8(final DataInput dataInput) throws IOException {\n@@ -144,2 +148,1 @@\n-        bytes = file.readUTF();\n-        created++;\n+        value = dataInput.readUTF();\n@@ -148,1 +151,0 @@\n-\n@@ -150,1 +152,1 @@\n-     * @param bytes Data\n+     * @param value Data\n@@ -152,1 +154,1 @@\n-    public ConstantUtf8(final String bytes) {\n+    public ConstantUtf8(final String value) {\n@@ -154,2 +156,2 @@\n-        if (bytes == null) {\n-            throw new IllegalArgumentException(\"bytes must not be null!\");\n+        if (value == null) {\n+            throw new IllegalArgumentException(\"Value must not be null.\");\n@@ -157,2 +159,1 @@\n-        this.bytes = bytes;\n-        created++;\n+        this.value = value;\n@@ -161,1 +162,0 @@\n-\n@@ -163,3 +163,2 @@\n-     * Called by objects that are traversing the nodes of the tree implicitely\n-     * defined by the contents of a Java class. I.e., the hierarchy of methods,\n-     * fields, attributes, etc. spawns a tree of objects.\n+     * Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class.\n+     * I.e., the hierarchy of methods, fields, attributes, etc. spawns a tree of objects.\n@@ -170,1 +169,1 @@\n-    public void accept( final Visitor v ) {\n+    public void accept(final Visitor v) {\n@@ -174,1 +173,0 @@\n-\n@@ -176,1 +174,1 @@\n-     * Dump String in Utf8 format to file stream.\n+     * Dumps String in Utf8 format to file stream.\n@@ -182,1 +180,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump(final DataOutputStream file) throws IOException {\n@@ -184,1 +182,1 @@\n-        file.writeUTF(bytes);\n+        file.writeUTF(value);\n@@ -187,1 +185,0 @@\n-\n@@ -191,2 +188,2 @@\n-    public final String getBytes() {\n-        return bytes;\n+    public String getBytes() {\n+        return value;\n@@ -195,1 +192,0 @@\n-\n@@ -197,1 +193,1 @@\n-     * @param bytes the raw bytes of this Utf-8\n+     * @param bytes the raw bytes of this UTF-8\n@@ -201,1 +197,1 @@\n-    public final void setBytes( final String bytes ) {\n+    public void setBytes(final String bytes) {\n@@ -205,1 +201,0 @@\n-\n@@ -210,2 +205,2 @@\n-    public final String toString() {\n-        return super.toString() + \"(\\\"\" + Utility.replace(bytes, \"\\n\", \"\\\\n\") + \"\\\")\";\n+    public String toString() {\n+        return super.toString() + \"(\\\"\" + Utility.replace(value, \"\\n\", \"\\\\n\") + \"\\\")\";\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantUtf8.java","additions":86,"deletions":91,"binary":false,"changes":177,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n- * @version $Id$\n@@ -99,1 +98,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -108,1 +107,1 @@\n-    public final int getConstantValueIndex() {\n+    public int getConstantValueIndex() {\n@@ -116,1 +115,1 @@\n-    public final void setConstantValueIndex( final int constantvalue_index ) {\n+    public void setConstantValueIndex( final int constantvalue_index ) {\n@@ -125,1 +124,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantValue.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n- * @version $Id$\n@@ -78,1 +77,1 @@\n-            System.err.println(\"Deprecated attribute with length > 0\");\n+            println(\"Deprecated attribute with length > 0\");\n@@ -103,1 +102,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -114,1 +113,1 @@\n-    public final byte[] getBytes() {\n+    public byte[] getBytes() {\n@@ -122,1 +121,1 @@\n-    public final void setBytes( final byte[] bytes ) {\n+    public void setBytes( final byte[] bytes ) {\n@@ -131,1 +130,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Deprecated.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n@@ -503,0 +502,15 @@\n+    {\n+        stack.push(obj);\n+        obj.accept(visitor);\n+        final MethodParameter[] table = obj.getParameters();\n+        for (final MethodParameter element : table) {\n+            element.accept(this);\n+        }\n+        stack.pop();\n+    }\n+\n+    \/**\n+     * @since 6.4.0\n+     *\/\n+    @Override\n+    public void visitMethodParameter(final MethodParameter obj)\n@@ -556,0 +570,88 @@\n+\n+    \/** @since 6.4.0 *\/\n+    @Override\n+    public void visitModule(final Module obj) {\n+        stack.push(obj);\n+        obj.accept(visitor);\n+        final ModuleRequires[] rtable = obj.getRequiresTable();\n+        for (final ModuleRequires element : rtable) {\n+            element.accept(this);\n+        }\n+        final ModuleExports[] etable = obj.getExportsTable();\n+        for (final ModuleExports element : etable) {\n+            element.accept(this);\n+        }\n+        final ModuleOpens[] otable = obj.getOpensTable();\n+        for (final ModuleOpens element : otable) {\n+            element.accept(this);\n+        }\n+        final ModuleProvides[] ptable = obj.getProvidesTable();\n+        for (final ModuleProvides element : ptable) {\n+            element.accept(this);\n+        }\n+        stack.pop();\n+    }\n+\n+    \/** @since 6.4.0 *\/\n+    @Override\n+    public void visitModuleRequires(final ModuleRequires obj) {\n+        stack.push(obj);\n+        obj.accept(visitor);\n+        stack.pop();\n+    }\n+\n+    \/** @since 6.4.0 *\/\n+    @Override\n+    public void visitModuleExports(final ModuleExports obj) {\n+        stack.push(obj);\n+        obj.accept(visitor);\n+        stack.pop();\n+    }\n+\n+    \/** @since 6.4.0 *\/\n+    @Override\n+    public void visitModuleOpens(final ModuleOpens obj) {\n+        stack.push(obj);\n+        obj.accept(visitor);\n+        stack.pop();\n+    }\n+\n+    \/** @since 6.4.0 *\/\n+    @Override\n+    public void visitModuleProvides(final ModuleProvides obj) {\n+        stack.push(obj);\n+        obj.accept(visitor);\n+        stack.pop();\n+    }\n+\n+    \/** @since 6.4.0 *\/\n+    @Override\n+    public void visitModulePackages(final ModulePackages obj) {\n+        stack.push(obj);\n+        obj.accept(visitor);\n+        stack.pop();\n+    }\n+\n+    \/** @since 6.4.0 *\/\n+    @Override\n+    public void visitModuleMainClass(final ModuleMainClass obj) {\n+        stack.push(obj);\n+        obj.accept(visitor);\n+        stack.pop();\n+    }\n+\n+    \/** @since 6.4.0 *\/\n+    @Override\n+    public void visitNestHost(final NestHost obj) {\n+        stack.push(obj);\n+        obj.accept(visitor);\n+        stack.pop();\n+    }\n+\n+    \/** @since 6.4.0 *\/\n+    @Override\n+    public void visitNestMembers(final NestMembers obj) {\n+        stack.push(obj);\n+        obj.accept(visitor);\n+        stack.pop();\n+    }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/DescendingVisitor.java","additions":103,"deletions":1,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @version $Id: ElementValue\n@@ -30,1 +29,1 @@\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ElementValue.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @version $Id: ElementValuePair\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ElementValuePair.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n@@ -282,0 +281,8 @@\n+    \/**\n+     * @since 6.4.0\n+     *\/\n+    @Override\n+    public void visitMethodParameter(final MethodParameter obj)\n+    {\n+    }\n+\n@@ -318,1 +325,0 @@\n-\n@@ -325,0 +331,45 @@\n+\n+    \/** @since 6.4.0 *\/\n+    @Override\n+    public void visitModule(final Module obj) {\n+    }\n+\n+    \/** @since 6.4.0 *\/\n+    @Override\n+    public void visitModuleRequires(final ModuleRequires obj) {\n+    }\n+\n+    \/** @since 6.4.0 *\/\n+    @Override\n+    public void visitModuleExports(final ModuleExports obj) {\n+    }\n+\n+    \/** @since 6.4.0 *\/\n+    @Override\n+    public void visitModuleOpens(final ModuleOpens obj) {\n+    }\n+\n+    \/** @since 6.4.0 *\/\n+    @Override\n+    public void visitModuleProvides(final ModuleProvides obj) {\n+    }\n+\n+    \/** @since 6.4.0 *\/\n+    @Override\n+    public void visitModulePackages(final ModulePackages obj) {\n+    }\n+\n+    \/** @since 6.4.0 *\/\n+    @Override\n+    public void visitModuleMainClass(final ModuleMainClass obj) {\n+    }\n+\n+    \/** @since 6.4.0 *\/\n+    @Override\n+    public void visitNestHost(final NestHost obj) {\n+    }\n+\n+    \/** @since 6.4.0 *\/\n+    @Override\n+    public void visitNestMembers(final NestMembers obj) {\n+    }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/EmptyVisitor.java","additions":53,"deletions":2,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n- * @version $Id$\n@@ -106,1 +105,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -118,1 +117,1 @@\n-    public final int[] getExceptionIndexTable() {\n+    public int[] getExceptionIndexTable() {\n@@ -126,1 +125,1 @@\n-    public final int getNumberOfExceptions() {\n+    public int getNumberOfExceptions() {\n@@ -134,1 +133,1 @@\n-    public final String[] getExceptionNames() {\n+    public String[] getExceptionNames() {\n@@ -148,1 +147,1 @@\n-    public final void setExceptionIndexTable( final int[] exception_index_table ) {\n+    public void setExceptionIndexTable( final int[] exception_index_table ) {\n@@ -157,1 +156,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ExceptionTable.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n- * @version $Id$\n@@ -107,1 +106,1 @@\n-    public final ConstantValue getConstantValue() {\n+    public ConstantValue getConstantValue() {\n@@ -124,1 +123,1 @@\n-    public final String toString() {\n+    public String toString() {\n@@ -152,1 +151,1 @@\n-    public final Field copy( final ConstantPool _constant_pool ) {\n+    public Field copy( final ConstantPool _constant_pool ) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Field.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n@@ -72,1 +71,2 @@\n-    protected FieldOrMethod(final DataInputStream file, final ConstantPool constant_pool) throws IOException,\n+    protected FieldOrMethod(final DataInputStream file, final ConstantPool constant_pool)\n+            throws IOException,\n@@ -83,2 +83,2 @@\n-    protected FieldOrMethod(final DataInput file,\n-            final ConstantPool constant_pool) throws IOException, ClassFormatException {\n+    protected FieldOrMethod(final DataInput file, final ConstantPool constant_pool)\n+            throws IOException, ClassFormatException {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/FieldOrMethod.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n- * @version $Id$\n@@ -100,1 +99,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -111,1 +110,1 @@\n-    public final int getInnerAccessFlags() {\n+    public int getInnerAccessFlags() {\n@@ -119,1 +118,1 @@\n-    public final int getInnerClassIndex() {\n+    public int getInnerClassIndex() {\n@@ -127,1 +126,1 @@\n-    public final int getInnerNameIndex() {\n+    public int getInnerNameIndex() {\n@@ -135,1 +134,1 @@\n-    public final int getOuterClassIndex() {\n+    public int getOuterClassIndex() {\n@@ -143,1 +142,1 @@\n-    public final void setInnerAccessFlags( final int inner_access_flags ) {\n+    public void setInnerAccessFlags( final int inner_access_flags ) {\n@@ -151,1 +150,1 @@\n-    public final void setInnerClassIndex( final int inner_class_index ) {\n+    public void setInnerClassIndex( final int inner_class_index ) {\n@@ -159,1 +158,1 @@\n-    public final void setInnerNameIndex( final int inner_name_index ) { \/\/ TODO unused\n+    public void setInnerNameIndex( final int inner_name_index ) { \/\/ TODO unused\n@@ -167,1 +166,1 @@\n-    public final void setOuterClassIndex( final int outer_class_index ) { \/\/ TODO unused\n+    public void setOuterClassIndex( final int outer_class_index ) { \/\/ TODO unused\n@@ -176,1 +175,1 @@\n-    public final String toString() {\n+    public String toString() {\n@@ -185,1 +184,1 @@\n-    public final String toString( final ConstantPool constant_pool ) {\n+    public String toString( final ConstantPool constant_pool ) {\n@@ -190,1 +189,1 @@\n-        inner_class_name = Utility.compactClassName(inner_class_name);\n+        inner_class_name = Utility.compactClassName(inner_class_name, false);\n@@ -194,1 +193,1 @@\n-            outer_class_name = \" of class \" + Utility.compactClassName(outer_class_name);\n+            outer_class_name = \" of class \" + Utility.compactClassName(outer_class_name, false);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/InnerClass.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n- * @version $Id$\n@@ -106,1 +105,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -118,1 +117,1 @@\n-    public final InnerClass[] getInnerClasses() {\n+    public InnerClass[] getInnerClasses() {\n@@ -126,1 +125,1 @@\n-    public final void setInnerClasses( final InnerClass[] inner_classes ) {\n+    public void setInnerClasses( final InnerClass[] inner_classes ) {\n@@ -135,1 +134,1 @@\n-    public final String toString() {\n+    public String toString() {\n@@ -143,1 +142,1 @@\n-        return buf.toString();\n+        return buf.substring(0, buf.length()-1); \/\/ remove the last newline\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/InnerClasses.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,5 +42,5 @@\n- * Represents a Java class, i.e., the data structures, constant pool, fields,\n- * methods and commands contained in a Java .class file. See <a\n- * href=\"http:\/\/docs.oracle.com\/javase\/specs\/\">JVM specification<\/a> for\n- * details. The intent of this class is to represent a parsed or otherwise\n- * existing class file. Those interested in programatically generating classes\n+ * Represents a Java class, i.e., the data structures, constant pool,\n+ * fields, methods and commands contained in a Java .class file.\n+ * See <a href=\"http:\/\/docs.oracle.com\/javase\/specs\/\">JVM specification<\/a> for details.\n+ * The intent of this class is to represent a parsed or otherwise existing\n+ * class file.  Those interested in programatically generating classes\n@@ -49,1 +49,0 @@\n- * @version $Id$\n@@ -51,1 +50,1 @@\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n@@ -78,0 +77,1 @@\n+    private static final boolean debug = false;\n@@ -221,0 +221,10 @@\n+\n+    \/* Print debug information depending on `JavaClass.debug'\n+     *\/\n+    static void Debug( final String str ) {\n+        if (debug) {\n+            System.out.println(str);\n+        }\n+    }\n+\n+\n@@ -609,1 +619,1 @@\n-        buf.append(\"filename\\t\\t\").append(file_name).append('\\n');\n+        buf.append(\"file name\\t\\t\").append(file_name).append('\\n');\n@@ -719,1 +729,1 @@\n-                      inner_class_name = Utility.compactClassName(inner_class_name);\n+                      inner_class_name = Utility.compactClassName(inner_class_name, false);\n@@ -757,1 +767,1 @@\n-    public void setRepository(final com.sun.org.apache.bcel.internal.util.Repository repository) {\n+    public void setRepository( final com.sun.org.apache.bcel.internal.util.Repository repository ) { \/\/ TODO make protected?\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/JavaClass.java","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @version $Id$\n@@ -58,1 +57,1 @@\n-     * @throws IOEXception if an I\/O Exception occurs in readUnsignedShort\n+     * @throws IOException if an I\/O Exception occurs in readUnsignedShort\n@@ -92,1 +91,1 @@\n-     * @throws IOEXception if an I\/O Exception occurs in writeShort\n+     * @throws IOException if an I\/O Exception occurs in writeShort\n@@ -94,1 +93,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -103,1 +102,1 @@\n-    public final int getLineNumber() {\n+    public int getLineNumber() {\n@@ -111,1 +110,1 @@\n-    public final int getStartPC() {\n+    public int getStartPC() {\n@@ -119,1 +118,1 @@\n-    public final void setLineNumber( final int line_number ) {\n+    public void setLineNumber( final int line_number ) {\n@@ -127,1 +126,1 @@\n-    public final void setStartPC( final int start_pc ) {\n+    public void setStartPC( final int start_pc ) {\n@@ -136,1 +135,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/LineNumber.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @version $Id$\n@@ -36,1 +35,1 @@\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n@@ -71,1 +70,1 @@\n-     * @throws IOEXception if an I\/O Exception occurs in readUnsignedShort\n+     * @throws IOException if an I\/O Exception occurs in readUnsignedShort\n@@ -99,1 +98,1 @@\n-     * @throws IOEXception if an I\/O Exception occurs in writeShort\n+     * @throws IOException if an I\/O Exception occurs in writeShort\n@@ -102,1 +101,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -113,1 +112,1 @@\n-    public final LineNumber[] getLineNumberTable() {\n+    public LineNumber[] getLineNumberTable() {\n@@ -120,1 +119,1 @@\n-    public final void setLineNumberTable( final LineNumber[] line_number_table ) {\n+    public void setLineNumberTable( final LineNumber[] line_number_table ) {\n@@ -128,1 +127,1 @@\n-    public final String toString() {\n+    public String toString() {\n@@ -164,1 +163,1 @@\n-            final int i = (l + r) \/ 2;\n+            final int i = (l + r) >>> 1;\n@@ -207,1 +206,1 @@\n-    public final int getTableLength() {\n+    public int getTableLength() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/LineNumberTable.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -31,1 +31,7 @@\n- * scope, name, signature and index on the method's frame.\n+ * scope, name, signature and index on the method's frame.  It is used both\n+ * to represent an element of the LocalVariableTable as well as an element\n+ * of the LocalVariableTypeTable.  The nomenclature used here may be a bit confusing;\n+ * while the two items have the same layout in a class file, a LocalVariableTable\n+ * attribute contains a descriptor_index, not a signature_index.  The\n+ * LocalVariableTypeTable attribute does have a signature_index.\n+ * @see com.sun.org.apache.bcel.internal.classfile.Utility for more details on the difference.\n@@ -33,1 +39,0 @@\n- * @version $Id$\n@@ -35,1 +40,2 @@\n- * @LastModified: Jun 2019\n+ * @see     LocalVariableTypeTable\n+ * @LastModified: Jan 2020\n@@ -42,0 +48,2 @@\n+    \/\/ Technically, a decscriptor_index for a local variable table entry\n+    \/\/ and a signature_index for a local variable type table entry.\n@@ -43,1 +51,1 @@\n-    private int index; \/* Variable is `index'th local variable on\n+    private int index; \/* Variable is index'th local variable on\n@@ -51,1 +59,1 @@\n-     * Initialize from another object. Note that both objects use the same\n+     * Initializes from another LocalVariable. Note that both objects use the same\n@@ -53,0 +61,2 @@\n+     *\n+     * @param localVariable Another LocalVariable.\n@@ -54,4 +64,4 @@\n-    public LocalVariable(final LocalVariable c) {\n-        this(c.getStartPC(), c.getLength(), c.getNameIndex(), c.getSignatureIndex(), c.getIndex(),\n-                c.getConstantPool());\n-        this.orig_index = c.getOrigIndex();\n+    public LocalVariable(final LocalVariable localVariable) {\n+        this(localVariable.getStartPC(), localVariable.getLength(), localVariable.getNameIndex(),\n+                localVariable.getSignatureIndex(), localVariable.getIndex(), localVariable.getConstantPool());\n+        this.orig_index = localVariable.getOrigIndex();\n@@ -60,1 +70,0 @@\n-\n@@ -62,1 +71,1 @@\n-     * Construct object from file stream.\n+     * Constructs object from file stream.\n@@ -127,1 +136,1 @@\n-     * Dump local variable to file stream in binary format.\n+     * Dumps local variable to file stream in binary format.\n@@ -129,2 +138,3 @@\n-     * @param file Output file stream\n-     * @throws IOException\n+     * @param dataOutputStream Output file stream\n+     * @exception IOException if an I\/O error occurs.\n+     * @see java.io.FilterOutputStream#out\n@@ -132,6 +142,6 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n-        file.writeShort(start_pc);\n-        file.writeShort(length);\n-        file.writeShort(name_index);\n-        file.writeShort(signature_index);\n-        file.writeShort(index);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(start_pc);\n+        dataOutputStream.writeShort(length);\n+        dataOutputStream.writeShort(name_index);\n+        dataOutputStream.writeShort(signature_index);\n+        dataOutputStream.writeShort(index);\n@@ -140,1 +150,0 @@\n-\n@@ -144,1 +153,1 @@\n-    public final ConstantPool getConstantPool() {\n+    public ConstantPool getConstantPool() {\n@@ -152,1 +161,1 @@\n-    public final int getLength() {\n+    public int getLength() {\n@@ -160,1 +169,1 @@\n-    public final String getName() {\n+    public String getName() {\n@@ -170,1 +179,1 @@\n-    public final int getNameIndex() {\n+    public int getNameIndex() {\n@@ -178,1 +187,1 @@\n-    public final String getSignature() {\n+    public String getSignature() {\n@@ -188,1 +197,1 @@\n-    public final int getSignatureIndex() {\n+    public int getSignatureIndex() {\n@@ -196,1 +205,1 @@\n-    public final int getIndex() {\n+    public int getIndex() {\n@@ -204,1 +213,1 @@\n-    public final int getOrigIndex() {\n+    public int getOrigIndex() {\n@@ -210,1 +219,1 @@\n-     * @return Start of range where he variable is valid\n+     * @return Start of range where the variable is valid\n@@ -212,1 +221,1 @@\n-    public final int getStartPC() {\n+    public int getStartPC() {\n@@ -220,1 +229,1 @@\n-    final String toStringShared( final boolean typeTable ) {\n+    String toStringShared( final boolean typeTable ) {\n@@ -232,1 +241,1 @@\n-    public final void setConstantPool( final ConstantPool constant_pool ) {\n+    public void setConstantPool( final ConstantPool constant_pool ) {\n@@ -240,1 +249,1 @@\n-    public final void setLength( final int length ) {\n+    public void setLength( final int length ) {\n@@ -248,1 +257,1 @@\n-    public final void setNameIndex( final int name_index ) { \/\/ TODO unused\n+    public void setNameIndex( final int name_index ) { \/\/ TODO unused\n@@ -256,1 +265,1 @@\n-    public final void setSignatureIndex( final int signature_index ) { \/\/ TODO unused\n+    public void setSignatureIndex( final int signature_index ) { \/\/ TODO unused\n@@ -264,1 +273,1 @@\n-    public final void setIndex( final int index ) { \/\/ TODO unused\n+    public void setIndex( final int index ) { \/\/ TODO unused\n@@ -272,1 +281,1 @@\n-    public final void setStartPC( final int start_pc ) { \/\/ TODO unused\n+    public void setStartPC( final int start_pc ) { \/\/ TODO unused\n@@ -281,1 +290,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/LocalVariable.java","additions":48,"deletions":39,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/LocalVariableTable.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n- * @version $Id$\n@@ -119,1 +118,1 @@\n-    public final Code getCode() {\n+    public Code getCode() {\n@@ -133,1 +132,1 @@\n-    public final ExceptionTable getExceptionTable() {\n+    public ExceptionTable getExceptionTable() {\n@@ -146,1 +145,1 @@\n-    public final LocalVariableTable getLocalVariableTable() {\n+    public LocalVariableTable getLocalVariableTable() {\n@@ -158,1 +157,1 @@\n-    public final LineNumberTable getLineNumberTable() {\n+    public LineNumberTable getLineNumberTable() {\n@@ -174,1 +173,1 @@\n-    public final String toString() {\n+    public String toString() {\n@@ -203,1 +202,1 @@\n-    public final Method copy( final ConstantPool _constant_pool ) {\n+    public Method copy( final ConstantPool _constant_pool ) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Method.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -98,0 +98,4 @@\n+    public void accept(final Visitor v) {\n+        v.visitMethodParameter(this);\n+    }\n+\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/MethodParameter.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,261 @@\n+\/*\n+ * reserved comment block\n+ * DO NOT REMOVE OR ALTER!\n+ *\/\n+\/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\/\n+\n+package com.sun.org.apache.bcel.internal.classfile;\n+\n+import java.io.DataInput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+import com.sun.org.apache.bcel.internal.Const;\n+\n+\/**\n+ * This class is derived from <em>Attribute<\/em> and represents the list of modules required, exported, opened or provided by a module.\n+ * There may be at most one Module attribute in a ClassFile structure.\n+ *\n+ * @see   Attribute\n+ * @since 6.4.0\n+ *\/\n+public final class Module extends Attribute {\n+\n+    private final int module_name_index;\n+    private final int module_flags;\n+    private final int module_version_index;\n+\n+    private ModuleRequires[] requires_table;\n+    private ModuleExports[] exports_table;\n+    private ModuleOpens[] opens_table;\n+    private final int uses_count;\n+    private final int[] uses_index;\n+    private ModuleProvides[] provides_table;\n+\n+    \/**\n+     * Construct object from input stream.\n+     * @param name_index Index in constant pool\n+     * @param length Content length in bytes\n+     * @param input Input stream\n+     * @param constant_pool Array of constants\n+     * @throws IOException\n+     *\/\n+    Module(final int name_index, final int length, final DataInput input, final ConstantPool constant_pool) throws IOException {\n+        super(Const.ATTR_MODULE, name_index, length, constant_pool);\n+\n+        module_name_index = input.readUnsignedShort();\n+        module_flags = input.readUnsignedShort();\n+        module_version_index = input.readUnsignedShort();\n+\n+        final int requires_count = input.readUnsignedShort();\n+        requires_table = new ModuleRequires[requires_count];\n+        for (int i = 0; i < requires_count; i++) {\n+            requires_table[i] = new ModuleRequires(input);\n+        }\n+\n+        final int exports_count = input.readUnsignedShort();\n+        exports_table = new ModuleExports[exports_count];\n+        for (int i = 0; i < exports_count; i++) {\n+            exports_table[i] = new ModuleExports(input);\n+        }\n+\n+        final int opens_count = input.readUnsignedShort();\n+        opens_table = new ModuleOpens[opens_count];\n+        for (int i = 0; i < opens_count; i++) {\n+            opens_table[i] = new ModuleOpens(input);\n+        }\n+\n+        uses_count = input.readUnsignedShort();\n+        uses_index = new int[uses_count];\n+        for (int i = 0; i < uses_count; i++) {\n+            uses_index[i] = input.readUnsignedShort();\n+        }\n+\n+        final int provides_count = input.readUnsignedShort();\n+        provides_table = new ModuleProvides[provides_count];\n+        for (int i = 0; i < provides_count; i++) {\n+            provides_table[i] = new ModuleProvides(input);\n+        }\n+    }\n+\n+\n+    \/**\n+     * Called by objects that are traversing the nodes of the tree implicitely\n+     * defined by the contents of a Java class. I.e., the hierarchy of methods,\n+     * fields, attributes, etc. spawns a tree of objects.\n+     *\n+     * @param v Visitor object\n+     *\/\n+    @Override\n+    public void accept( final Visitor v ) {\n+        v.visitModule(this);\n+    }\n+\n+    \/\/ TODO add more getters and setters?\n+\n+    \/**\n+     * @return table of required modules\n+     * @see ModuleRequires\n+     *\/\n+    public ModuleRequires[] getRequiresTable() {\n+        return requires_table;\n+    }\n+\n+\n+    \/**\n+     * @return table of exported interfaces\n+     * @see ModuleExports\n+     *\/\n+    public ModuleExports[] getExportsTable() {\n+        return exports_table;\n+    }\n+\n+\n+    \/**\n+     * @return table of provided interfaces\n+     * @see ModuleOpens\n+     *\/\n+    public ModuleOpens[] getOpensTable() {\n+        return opens_table;\n+    }\n+\n+\n+    \/**\n+     * @return table of provided interfaces\n+     * @see ModuleProvides\n+     *\/\n+    public ModuleProvides[] getProvidesTable() {\n+        return provides_table;\n+    }\n+\n+\n+    \/**\n+     * Dump Module attribute to file stream in binary format.\n+     *\n+     * @param file Output file stream\n+     * @throws IOException\n+     *\/\n+    @Override\n+    public void dump( final DataOutputStream file ) throws IOException {\n+        super.dump(file);\n+\n+        file.writeShort(module_name_index);\n+        file.writeShort(module_flags);\n+        file.writeShort(module_version_index);\n+\n+        file.writeShort(requires_table.length);\n+        for (final ModuleRequires entry : requires_table) {\n+            entry.dump(file);\n+        }\n+\n+        file.writeShort(exports_table.length);\n+        for (final ModuleExports entry : exports_table) {\n+            entry.dump(file);\n+        }\n+\n+        file.writeShort(opens_table.length);\n+        for (final ModuleOpens entry : opens_table) {\n+            entry.dump(file);\n+        }\n+\n+        file.writeShort(uses_index.length);\n+        for (final int entry : uses_index) {\n+            file.writeShort(entry);\n+        }\n+\n+        file.writeShort(provides_table.length);\n+        for (final ModuleProvides entry : provides_table) {\n+            entry.dump(file);\n+        }\n+    }\n+\n+\n+    \/**\n+     * @return String representation, i.e., a list of packages.\n+     *\/\n+    @Override\n+    public String toString() {\n+        final ConstantPool cp = super.getConstantPool();\n+        final StringBuilder buf = new StringBuilder();\n+        buf.append(\"Module:\\n\");\n+        buf.append(\"  name:    \") .append(cp.getConstantString(module_name_index, Const.CONSTANT_Module).replace('\/', '.')).append(\"\\n\");\n+        buf.append(\"  flags:   \") .append(String.format(\"%04x\", module_flags)).append(\"\\n\");\n+        final String version = module_version_index == 0 ? \"0\" : cp.getConstantString(module_version_index, Const.CONSTANT_Utf8);\n+        buf.append(\"  version: \") .append(version).append(\"\\n\");\n+\n+        buf.append(\"  requires(\").append(requires_table.length).append(\"):\\n\");\n+        for (final ModuleRequires module : requires_table) {\n+            buf.append(\"    \").append(module.toString(cp)).append(\"\\n\");\n+        }\n+\n+        buf.append(\"  exports(\").append(exports_table.length).append(\"):\\n\");\n+        for (final ModuleExports module : exports_table) {\n+            buf.append(\"    \").append(module.toString(cp)).append(\"\\n\");\n+        }\n+\n+        buf.append(\"  opens(\").append(opens_table.length).append(\"):\\n\");\n+        for (final ModuleOpens module : opens_table) {\n+            buf.append(\"    \").append(module.toString(cp)).append(\"\\n\");\n+        }\n+\n+        buf.append(\"  uses(\").append(uses_index.length).append(\"):\\n\");\n+        for (final int index : uses_index) {\n+            final String class_name = cp.getConstantString(index, Const.CONSTANT_Class);\n+            buf.append(\"    \").append(Utility.compactClassName(class_name, false)).append(\"\\n\");\n+        }\n+\n+        buf.append(\"  provides(\").append(provides_table.length).append(\"):\\n\");\n+        for (final ModuleProvides module : provides_table) {\n+            buf.append(\"    \").append(module.toString(cp)).append(\"\\n\");\n+        }\n+\n+        return buf.substring(0, buf.length()-1); \/\/ remove the last newline\n+    }\n+\n+\n+    \/**\n+     * @return deep copy of this attribute\n+     *\/\n+    @Override\n+    public Attribute copy( final ConstantPool _constant_pool ) {\n+        final Module c = (Module) clone();\n+\n+        c.requires_table = new ModuleRequires[requires_table.length];\n+        for (int i = 0; i < requires_table.length; i++) {\n+            c.requires_table[i] = requires_table[i].copy();\n+        }\n+\n+        c.exports_table = new ModuleExports[exports_table.length];\n+        for (int i = 0; i < exports_table.length; i++) {\n+            c.exports_table[i] = exports_table[i].copy();\n+        }\n+\n+        c.opens_table = new ModuleOpens[opens_table.length];\n+        for (int i = 0; i < opens_table.length; i++) {\n+            c.opens_table[i] = opens_table[i].copy();\n+        }\n+\n+        c.provides_table = new ModuleProvides[provides_table.length];\n+        for (int i = 0; i < provides_table.length; i++) {\n+            c.provides_table[i] = provides_table[i].copy();\n+        }\n+\n+        c.setConstantPool(_constant_pool);\n+        return c;\n+    }\n+}\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Module.java","additions":261,"deletions":0,"binary":false,"changes":261,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * reserved comment block\n+ * DO NOT REMOVE OR ALTER!\n+ *\/\n+\/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\/\n+\n+package com.sun.org.apache.bcel.internal.classfile;\n+\n+import java.io.DataInput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+import com.sun.org.apache.bcel.internal.Const;\n+\n+\/**\n+ * This class represents an entry in the exports table of the Module attribute.\n+ * Each entry describes a package which may open the parent module.\n+ *\n+ * @see   Module\n+ * @since 6.4.0\n+ *\/\n+public final class ModuleExports implements Cloneable, Node {\n+\n+    private final int exports_index;  \/\/ points to CONSTANT_Package_info\n+    private final int exports_flags;\n+    private final int exports_to_count;\n+    private final int[] exports_to_index;  \/\/ points to CONSTANT_Module_info\n+\n+\n+    \/**\n+     * Construct object from file stream.\n+     *\n+     * @param file Input stream\n+     * @throws IOException if an I\/O Exception occurs in readUnsignedShort\n+     *\/\n+    ModuleExports(final DataInput file) throws IOException {\n+        exports_index = file.readUnsignedShort();\n+        exports_flags = file.readUnsignedShort();\n+        exports_to_count = file.readUnsignedShort();\n+        exports_to_index = new int[exports_to_count];\n+        for (int i = 0; i < exports_to_count; i++) {\n+            exports_to_index[i] = file.readUnsignedShort();\n+        }\n+    }\n+\n+\n+    \/**\n+     * Called by objects that are traversing the nodes of the tree implicitely\n+     * defined by the contents of a Java class. I.e., the hierarchy of methods,\n+     * fields, attributes, etc. spawns a tree of objects.\n+     *\n+     * @param v Visitor object\n+     *\/\n+    @Override\n+    public void accept( final Visitor v ) {\n+        v.visitModuleExports(this);\n+    }\n+\n+    \/\/ TODO add more getters and setters?\n+\n+    \/**\n+     * Dump table entry to file stream in binary format.\n+     *\n+     * @param file Output file stream\n+     * @throws IOException if an I\/O Exception occurs in writeShort\n+     *\/\n+    public void dump( final DataOutputStream file ) throws IOException {\n+        file.writeShort(exports_index);\n+        file.writeShort(exports_flags);\n+        file.writeShort(exports_to_count);\n+        for (final int entry : exports_to_index) {\n+            file.writeShort(entry);\n+        }\n+    }\n+\n+\n+    \/**\n+     * @return String representation\n+     *\/\n+    @Override\n+    public String toString() {\n+        return \"exports(\" + exports_index + \", \" + exports_flags + \", \" + exports_to_count + \", ...)\";\n+    }\n+\n+\n+    \/**\n+     * @return Resolved string representation\n+     *\/\n+    public String toString( final ConstantPool constant_pool ) {\n+        final StringBuilder buf = new StringBuilder();\n+        final String package_name = constant_pool.constantToString(exports_index, Const.CONSTANT_Package);\n+        buf.append(Utility.compactClassName(package_name, false));\n+        buf.append(\", \").append(String.format(\"%04x\", exports_flags));\n+        buf.append(\", to(\").append(exports_to_count).append(\"):\\n\");\n+        for (final int index : exports_to_index) {\n+            final String module_name = constant_pool.getConstantString(index, Const.CONSTANT_Module);\n+            buf.append(\"      \").append(Utility.compactClassName(module_name, false)).append(\"\\n\");\n+        }\n+        return buf.substring(0, buf.length()-1); \/\/ remove the last newline\n+    }\n+\n+\n+    \/**\n+     * @return deep copy of this object\n+     *\/\n+    public ModuleExports copy() {\n+        try {\n+            return (ModuleExports) clone();\n+        } catch (final CloneNotSupportedException e) {\n+            \/\/ TODO should this throw?\n+        }\n+        return null;\n+    }\n+}\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ModuleExports.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * reserved comment block\n+ * DO NOT REMOVE OR ALTER!\n+ *\/\n+\/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\/\n+\n+package com.sun.org.apache.bcel.internal.classfile;\n+\n+import java.io.DataInput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+import com.sun.org.apache.bcel.internal.Const;\n+\n+\/**\n+ * This class is derived from <em>Attribute<\/em> and indicates the main class of a module.\n+ * There may be at most one ModuleMainClass attribute in a ClassFile structure.\n+ *\n+ * @see     Attribute\n+ *\/\n+public final class ModuleMainClass extends Attribute {\n+\n+    private int main_class_index;\n+\n+\n+    \/**\n+     * Initialize from another object. Note that both objects use the same\n+     * references (shallow copy). Use copy() for a physical copy.\n+     *\/\n+    public ModuleMainClass(final ModuleMainClass c) {\n+        this(c.getNameIndex(), c.getLength(), c.getHostClassIndex(), c.getConstantPool());\n+    }\n+\n+\n+    \/**\n+     * @param name_index Index in constant pool\n+     * @param length Content length in bytes\n+     * @param main_class_index Host class index\n+     * @param constant_pool Array of constants\n+     *\/\n+    public ModuleMainClass(final int name_index, final int length, final int main_class_index,\n+            final ConstantPool constant_pool) {\n+        super(Const.ATTR_NEST_MEMBERS, name_index, length, constant_pool);\n+        this.main_class_index = main_class_index;\n+    }\n+\n+\n+    \/**\n+     * Construct object from input stream.\n+     * @param name_index Index in constant pool\n+     * @param length Content length in bytes\n+     * @param input Input stream\n+     * @param constant_pool Array of constants\n+     * @throws IOException\n+     *\/\n+    ModuleMainClass(final int name_index, final int length, final DataInput input, final ConstantPool constant_pool) throws IOException {\n+        this(name_index, length, 0, constant_pool);\n+        main_class_index = input.readUnsignedShort();\n+    }\n+\n+\n+    \/**\n+     * Called by objects that are traversing the nodes of the tree implicitly\n+     * defined by the contents of a Java class. I.e., the hierarchy of methods,\n+     * fields, attributes, etc. spawns a tree of objects.\n+     *\n+     * @param v Visitor object\n+     *\/\n+    @Override\n+    public void accept( final Visitor v ) {\n+        v.visitModuleMainClass(this);\n+    }\n+\n+\n+    \/**\n+     * Dump ModuleMainClass attribute to file stream in binary format.\n+     *\n+     * @param file Output file stream\n+     * @throws IOException if an I\/O error occurs.\n+     *\/\n+    @Override\n+    public void dump( final DataOutputStream file ) throws IOException {\n+        super.dump(file);\n+        file.writeShort(main_class_index);\n+    }\n+\n+\n+    \/**\n+     * @return index into constant pool of host class name.\n+     *\/\n+    public int getHostClassIndex() {\n+        return main_class_index;\n+    }\n+\n+\n+    \/**\n+     * @param main_class_index the host class index\n+     *\/\n+    public void setHostClassIndex( final int main_class_index ) {\n+        this.main_class_index = main_class_index;\n+    }\n+\n+\n+    \/**\n+     * @return String representation\n+     *\/\n+    @Override\n+    public String toString() {\n+        final StringBuilder buf = new StringBuilder();\n+        buf.append(\"ModuleMainClass: \");\n+        final String class_name = super.getConstantPool().getConstantString(main_class_index, Const.CONSTANT_Class);\n+        buf.append(Utility.compactClassName(class_name, false));\n+        return buf.toString();\n+    }\n+\n+\n+    \/**\n+     * @return deep copy of this attribute\n+     *\/\n+    @Override\n+    public Attribute copy( final ConstantPool _constant_pool ) {\n+        final ModuleMainClass c = (ModuleMainClass) clone();\n+        c.setConstantPool(_constant_pool);\n+        return c;\n+    }\n+}\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ModuleMainClass.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * reserved comment block\n+ * DO NOT REMOVE OR ALTER!\n+ *\/\n+\/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\/\n+\n+package com.sun.org.apache.bcel.internal.classfile;\n+\n+import java.io.DataInput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+import com.sun.org.apache.bcel.internal.Const;\n+\n+\/**\n+ * This class represents an entry in the opens table of the Module attribute.\n+ * Each entry describes a package which the parent module opens.\n+ *\n+ * @see   Module\n+ * @since 6.4.0\n+ *\/\n+public final class ModuleOpens implements Cloneable, Node {\n+\n+    private final int opens_index;  \/\/ points to CONSTANT_Package_info\n+    private final int opens_flags;\n+    private final int opens_to_count;\n+    private final int[] opens_to_index;  \/\/ points to CONSTANT_Module_info\n+\n+\n+    \/**\n+     * Construct object from file stream.\n+     *\n+     * @param file Input stream\n+     * @throws IOException if an I\/O Exception occurs in readUnsignedShort\n+     *\/\n+    ModuleOpens(final DataInput file) throws IOException {\n+        opens_index = file.readUnsignedShort();\n+        opens_flags = file.readUnsignedShort();\n+        opens_to_count = file.readUnsignedShort();\n+        opens_to_index = new int[opens_to_count];\n+        for (int i = 0; i < opens_to_count; i++) {\n+            opens_to_index[i] = file.readUnsignedShort();\n+        }\n+    }\n+\n+\n+    \/**\n+     * Called by objects that are traversing the nodes of the tree implicitely\n+     * defined by the contents of a Java class. I.e., the hierarchy of methods,\n+     * fields, attributes, etc. spawns a tree of objects.\n+     *\n+     * @param v Visitor object\n+     *\/\n+    @Override\n+    public void accept( final Visitor v ) {\n+        v.visitModuleOpens(this);\n+    }\n+\n+    \/\/ TODO add more getters and setters?\n+\n+    \/**\n+     * Dump table entry to file stream in binary format.\n+     *\n+     * @param file Output file stream\n+     * @throws IOException if an I\/O Exception occurs in writeShort\n+     *\/\n+    public void dump( final DataOutputStream file ) throws IOException {\n+        file.writeShort(opens_index);\n+        file.writeShort(opens_flags);\n+        file.writeShort(opens_to_count);\n+        for (final int entry : opens_to_index) {\n+            file.writeShort(entry);\n+        }\n+    }\n+\n+\n+    \/**\n+     * @return String representation\n+     *\/\n+    @Override\n+    public String toString() {\n+        return \"opens(\" + opens_index + \", \" + opens_flags + \", \" + opens_to_count + \", ...)\";\n+    }\n+\n+\n+    \/**\n+     * @return Resolved string representation\n+     *\/\n+    public String toString( final ConstantPool constant_pool ) {\n+        final StringBuilder buf = new StringBuilder();\n+        final String package_name = constant_pool.constantToString(opens_index, Const.CONSTANT_Package);\n+        buf.append(Utility.compactClassName(package_name, false));\n+        buf.append(\", \").append(String.format(\"%04x\", opens_flags));\n+        buf.append(\", to(\").append(opens_to_count).append(\"):\\n\");\n+        for (final int index : opens_to_index) {\n+            final String module_name = constant_pool.getConstantString(index, Const.CONSTANT_Module);\n+            buf.append(\"      \").append(Utility.compactClassName(module_name, false)).append(\"\\n\");\n+        }\n+        return buf.substring(0, buf.length()-1); \/\/ remove the last newline\n+    }\n+\n+\n+    \/**\n+     * @return deep copy of this object\n+     *\/\n+    public ModuleOpens copy() {\n+        try {\n+            return (ModuleOpens) clone();\n+        } catch (final CloneNotSupportedException e) {\n+            \/\/ TODO should this throw?\n+        }\n+        return null;\n+    }\n+}\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ModuleOpens.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -0,0 +1,179 @@\n+\/*\n+ * reserved comment block\n+ * DO NOT REMOVE OR ALTER!\n+ *\/\n+\/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\/\n+\n+package com.sun.org.apache.bcel.internal.classfile;\n+\n+import java.io.DataInput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+import com.sun.org.apache.bcel.internal.Const;\n+\n+\/**\n+ * This class is derived from <em>Attribute<\/em> and represents the list of packages that are exported or opened by the Module attribute.\n+ * There may be at most one ModulePackages attribute in a ClassFile structure.\n+ *\n+ * @see     Attribute\n+ *\/\n+public final class ModulePackages extends Attribute {\n+\n+    private int[] package_index_table;\n+\n+\n+    \/**\n+     * Initialize from another object. Note that both objects use the same\n+     * references (shallow copy). Use copy() for a physical copy.\n+     *\/\n+    public ModulePackages(final ModulePackages c) {\n+        this(c.getNameIndex(), c.getLength(), c.getPackageIndexTable(), c.getConstantPool());\n+    }\n+\n+\n+    \/**\n+     * @param name_index Index in constant pool\n+     * @param length Content length in bytes\n+     * @param package_index_table Table of indices in constant pool\n+     * @param constant_pool Array of constants\n+     *\/\n+    public ModulePackages(final int name_index, final int length, final int[] package_index_table,\n+            final ConstantPool constant_pool) {\n+        super(Const.ATTR_MODULE_PACKAGES, name_index, length, constant_pool);\n+        this.package_index_table = package_index_table != null ? package_index_table : new int[0];\n+    }\n+\n+\n+    \/**\n+     * Construct object from input stream.\n+     * @param name_index Index in constant pool\n+     * @param length Content length in bytes\n+     * @param input Input stream\n+     * @param constant_pool Array of constants\n+     * @throws IOException\n+     *\/\n+    ModulePackages(final int name_index, final int length, final DataInput input, final ConstantPool constant_pool) throws IOException {\n+        this(name_index, length, (int[]) null, constant_pool);\n+        final int number_of_packages = input.readUnsignedShort();\n+        package_index_table = new int[number_of_packages];\n+        for (int i = 0; i < number_of_packages; i++) {\n+            package_index_table[i] = input.readUnsignedShort();\n+        }\n+    }\n+\n+\n+    \/**\n+     * Called by objects that are traversing the nodes of the tree implicitely\n+     * defined by the contents of a Java class. I.e., the hierarchy of methods,\n+     * fields, attributes, etc. spawns a tree of objects.\n+     *\n+     * @param v Visitor object\n+     *\/\n+    @Override\n+    public void accept( final Visitor v ) {\n+        v.visitModulePackages(this);\n+    }\n+\n+\n+    \/**\n+     * Dump ModulePackages attribute to file stream in binary format.\n+     *\n+     * @param file Output file stream\n+     * @throws IOException\n+     *\/\n+    @Override\n+    public void dump( final DataOutputStream file ) throws IOException {\n+        super.dump(file);\n+        file.writeShort(package_index_table.length);\n+        for (final int index : package_index_table) {\n+            file.writeShort(index);\n+        }\n+    }\n+\n+\n+    \/**\n+     * @return array of indices into constant pool of package names.\n+     *\/\n+    public int[] getPackageIndexTable() {\n+        return package_index_table;\n+    }\n+\n+\n+    \/**\n+     * @return Length of package table.\n+     *\/\n+    public int getNumberOfPackages() {\n+        return package_index_table == null ? 0 : package_index_table.length;\n+    }\n+\n+\n+    \/**\n+     * @return string array of package names\n+     *\/\n+    public String[] getPackageNames() {\n+        final String[] names = new String[package_index_table.length];\n+        for (int i = 0; i < package_index_table.length; i++) {\n+            names[i] = super.getConstantPool().getConstantString(package_index_table[i],\n+                    Const.CONSTANT_Package).replace('\/', '.');\n+        }\n+        return names;\n+    }\n+\n+\n+    \/**\n+     * @param package_index_table the list of package indexes\n+     * Also redefines number_of_packages according to table length.\n+     *\/\n+    public void setPackageIndexTable( final int[] package_index_table ) {\n+        this.package_index_table = package_index_table != null ? package_index_table : new int[0];\n+    }\n+\n+\n+    \/**\n+     * @return String representation, i.e., a list of packages.\n+     *\/\n+    @Override\n+    public String toString() {\n+        final StringBuilder buf = new StringBuilder();\n+        buf.append(\"ModulePackages(\");\n+        buf.append(package_index_table.length);\n+        buf.append(\"):\\n\");\n+        for (final int index : package_index_table) {\n+            final String package_name = super.getConstantPool().getConstantString(index, Const.CONSTANT_Package);\n+            buf.append(\"  \").append(Utility.compactClassName(package_name, false)).append(\"\\n\");\n+        }\n+        return buf.substring(0, buf.length()-1); \/\/ remove the last newline\n+    }\n+\n+\n+    \/**\n+     * @return deep copy of this attribute\n+     *\/\n+    @Override\n+    public Attribute copy( final ConstantPool _constant_pool ) {\n+        final ModulePackages c = (ModulePackages) clone();\n+        if (package_index_table != null) {\n+            c.package_index_table = new int[package_index_table.length];\n+            System.arraycopy(package_index_table, 0, c.package_index_table, 0,\n+                    package_index_table.length);\n+        }\n+        c.setConstantPool(_constant_pool);\n+        return c;\n+    }\n+}\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ModulePackages.java","additions":179,"deletions":0,"binary":false,"changes":179,"status":"added"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * reserved comment block\n+ * DO NOT REMOVE OR ALTER!\n+ *\/\n+\/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\/\n+\n+package com.sun.org.apache.bcel.internal.classfile;\n+\n+import java.io.DataInput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+import com.sun.org.apache.bcel.internal.Const;\n+\n+\/**\n+ * This class represents an entry in the provides table of the Module attribute.\n+ * Each entry describes a service implementation that the parent module provides.\n+ *\n+ * @see   Module\n+ * @since 6.4.0\n+ *\/\n+public final class ModuleProvides implements Cloneable, Node {\n+\n+    private final int provides_index;  \/\/ points to CONSTANT_Class_info\n+    private final int provides_with_count;\n+    private final int[] provides_with_index;  \/\/ points to CONSTANT_Class_info\n+\n+\n+    \/**\n+     * Construct object from file stream.\n+     *\n+     * @param file Input stream\n+     * @throws IOException if an I\/O Exception occurs in readUnsignedShort\n+     *\/\n+    ModuleProvides(final DataInput file) throws IOException {\n+        provides_index = file.readUnsignedShort();\n+        provides_with_count = file.readUnsignedShort();\n+        provides_with_index = new int[provides_with_count];\n+        for (int i = 0; i < provides_with_count; i++) {\n+            provides_with_index[i] = file.readUnsignedShort();\n+        }\n+    }\n+\n+\n+    \/**\n+     * Called by objects that are traversing the nodes of the tree implicitely\n+     * defined by the contents of a Java class. I.e., the hierarchy of methods,\n+     * fields, attributes, etc. spawns a tree of objects.\n+     *\n+     * @param v Visitor object\n+     *\/\n+    @Override\n+    public void accept( final Visitor v ) {\n+        v.visitModuleProvides(this);\n+    }\n+\n+    \/\/ TODO add more getters and setters?\n+\n+    \/**\n+     * Dump table entry to file stream in binary format.\n+     *\n+     * @param file Output file stream\n+     * @throws IOException if an I\/O Exception occurs in writeShort\n+     *\/\n+    public void dump( final DataOutputStream file ) throws IOException {\n+        file.writeShort(provides_index);\n+        file.writeShort(provides_with_count);\n+        for (final int entry : provides_with_index) {\n+            file.writeShort(entry);\n+        }\n+    }\n+\n+\n+    \/**\n+     * @return String representation\n+     *\/\n+    @Override\n+    public String toString() {\n+        return \"provides(\" + provides_index + \", \" + provides_with_count + \", ...)\";\n+    }\n+\n+\n+    \/**\n+     * @return Resolved string representation\n+     *\/\n+    public String toString( final ConstantPool constant_pool ) {\n+        final StringBuilder buf = new StringBuilder();\n+        final String interface_name = constant_pool.constantToString(provides_index, Const.CONSTANT_Class);\n+        buf.append(Utility.compactClassName(interface_name, false));\n+        buf.append(\", with(\").append(provides_with_count).append(\"):\\n\");\n+        for (final int index : provides_with_index) {\n+            final String class_name = constant_pool.getConstantString(index, Const.CONSTANT_Class);\n+            buf.append(\"      \").append(Utility.compactClassName(class_name, false)).append(\"\\n\");\n+        }\n+        return buf.substring(0, buf.length()-1); \/\/ remove the last newline\n+    }\n+\n+\n+    \/**\n+     * @return deep copy of this object\n+     *\/\n+    public ModuleProvides copy() {\n+        try {\n+            return (ModuleProvides) clone();\n+        } catch (final CloneNotSupportedException e) {\n+            \/\/ TODO should this throw?\n+        }\n+        return null;\n+    }\n+}\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ModuleProvides.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * reserved comment block\n+ * DO NOT REMOVE OR ALTER!\n+ *\/\n+\/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\/\n+\n+package com.sun.org.apache.bcel.internal.classfile;\n+\n+import java.io.DataInput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+import com.sun.org.apache.bcel.internal.Const;\n+\n+\/**\n+ * This class represents an entry in the requires table of the Module attribute.\n+ * Each entry describes a module on which the parent module depends.\n+ *\n+ * @see   Module\n+ * @since 6.4.0\n+ *\/\n+public final class ModuleRequires implements Cloneable, Node {\n+\n+    private final int requires_index;  \/\/ points to CONSTANT_Module_info\n+    private final int requires_flags;\n+    private final int requires_version_index;  \/\/ either 0 or points to CONSTANT_Utf8_info\n+\n+\n+    \/**\n+     * Construct object from file stream.\n+     *\n+     * @param file Input stream\n+     * @throws IOException if an I\/O Exception occurs in readUnsignedShort\n+     *\/\n+    ModuleRequires(final DataInput file) throws IOException {\n+        requires_index = file.readUnsignedShort();\n+        requires_flags = file.readUnsignedShort();\n+        requires_version_index = file.readUnsignedShort();\n+    }\n+\n+\n+    \/**\n+     * Called by objects that are traversing the nodes of the tree implicitely\n+     * defined by the contents of a Java class. I.e., the hierarchy of methods,\n+     * fields, attributes, etc. spawns a tree of objects.\n+     *\n+     * @param v Visitor object\n+     *\/\n+    @Override\n+    public void accept( final Visitor v ) {\n+        v.visitModuleRequires(this);\n+    }\n+\n+    \/\/ TODO add more getters and setters?\n+\n+    \/**\n+     * Dump table entry to file stream in binary format.\n+     *\n+     * @param file Output file stream\n+     * @throws IOException if an I\/O Exception occurs in writeShort\n+     *\/\n+    public void dump( final DataOutputStream file ) throws IOException {\n+        file.writeShort(requires_index);\n+        file.writeShort(requires_flags);\n+        file.writeShort(requires_version_index);\n+    }\n+\n+\n+    \/**\n+     * @return String representation\n+     *\/\n+    @Override\n+    public String toString() {\n+        return \"requires(\" + requires_index + \", \" + String.format(\"%04x\", requires_flags) + \", \" + requires_version_index + \")\";\n+    }\n+\n+\n+    \/**\n+     * @return Resolved string representation\n+     *\/\n+    public String toString( final ConstantPool constant_pool ) {\n+        final StringBuilder buf = new StringBuilder();\n+        final String module_name = constant_pool.constantToString(requires_index, Const.CONSTANT_Module);\n+        buf.append(Utility.compactClassName(module_name, false));\n+        buf.append(\", \").append(String.format(\"%04x\", requires_flags));\n+        final String version = requires_version_index == 0 ? \"0\" : constant_pool.getConstantString(requires_version_index, Const.CONSTANT_Utf8);\n+        buf.append(\", \").append(version);\n+        return buf.toString();\n+    }\n+\n+\n+    \/**\n+     * @return deep copy of this object\n+     *\/\n+    public ModuleRequires copy() {\n+        try {\n+            return (ModuleRequires) clone();\n+        } catch (final CloneNotSupportedException e) {\n+            \/\/ TODO should this throw?\n+        }\n+        return null;\n+    }\n+}\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ModuleRequires.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -0,0 +1,142 @@\n+\/*\n+ * reserved comment block\n+ * DO NOT REMOVE OR ALTER!\n+ *\/\n+\/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\/\n+\n+package com.sun.org.apache.bcel.internal.classfile;\n+\n+import java.io.DataInput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+import com.sun.org.apache.bcel.internal.Const;\n+\n+\/**\n+ * This class is derived from <em>Attribute<\/em> and records the nest host of the nest\n+ * to which the current class or interface claims to belong.\n+ * There may be at most one NestHost attribute in a ClassFile structure.\n+ *\n+ * @see     Attribute\n+ *\/\n+public final class NestHost extends Attribute {\n+\n+    private int host_class_index;\n+\n+\n+    \/**\n+     * Initializes from another object. Note that both objects use the same\n+     * references (shallow copy). Use copy() for a physical copy.\n+     *\/\n+    public NestHost(final NestHost c) {\n+        this(c.getNameIndex(), c.getLength(), c.getHostClassIndex(), c.getConstantPool());\n+    }\n+\n+\n+    \/**\n+     * @param name_index Index in constant pool\n+     * @param length Content length in bytes\n+     * @param host_class_index Host class index\n+     * @param constant_pool Array of constants\n+     *\/\n+    public NestHost(final int name_index, final int length, final int host_class_index,\n+            final ConstantPool constant_pool) {\n+        super(Const.ATTR_NEST_MEMBERS, name_index, length, constant_pool);\n+        this.host_class_index = host_class_index;\n+    }\n+\n+\n+    \/**\n+     * Constructs object from input stream.\n+     * @param name_index Index in constant pool\n+     * @param length Content length in bytes\n+     * @param input Input stream\n+     * @param constant_pool Array of constants\n+     * @throws IOException\n+     *\/\n+    NestHost(final int name_index, final int length, final DataInput input, final ConstantPool constant_pool) throws IOException {\n+        this(name_index, length, 0, constant_pool);\n+        host_class_index = input.readUnsignedShort();\n+    }\n+\n+\n+    \/**\n+     * Called by objects that are traversing the nodes of the tree implicitely\n+     * defined by the contents of a Java class. I.e., the hierarchy of methods,\n+     * fields, attributes, etc. spawns a tree of objects.\n+     *\n+     * @param v Visitor object\n+     *\/\n+    @Override\n+    public void accept( final Visitor v ) {\n+        v.visitNestHost(this);\n+    }\n+\n+\n+    \/**\n+     * Dumps NestHost attribute to file stream in binary format.\n+     *\n+     * @param file Output file stream\n+     * @throws IOException if an I\/O error occurs.\n+     *\/\n+    @Override\n+    public void dump( final DataOutputStream file ) throws IOException {\n+        super.dump(file);\n+        file.writeShort(host_class_index);\n+    }\n+\n+\n+    \/**\n+     * @return index into constant pool of host class name.\n+     *\/\n+    public int getHostClassIndex() {\n+        return host_class_index;\n+    }\n+\n+\n+    \/**\n+     * @param host_class_index the host class index\n+     *\/\n+    public void setHostClassIndex( final int host_class_index ) {\n+        this.host_class_index = host_class_index;\n+    }\n+\n+\n+    \/**\n+     * @return String representation\n+     *\/\n+    @Override\n+    public String toString() {\n+        final StringBuilder buf = new StringBuilder();\n+        buf.append(\"NestHost: \");\n+        final String class_name = super.getConstantPool().getConstantString(host_class_index, Const.CONSTANT_Class);\n+        buf.append(Utility.compactClassName(class_name, false));\n+        return buf.toString();\n+    }\n+\n+\n+    \/**\n+     * @return deep copy of this attribute\n+     *\/\n+    @Override\n+    public Attribute copy( final ConstantPool _constant_pool ) {\n+        final NestHost c = (NestHost) clone();\n+        c.setConstantPool(_constant_pool);\n+        return c;\n+    }\n+}\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/NestHost.java","additions":142,"deletions":0,"binary":false,"changes":142,"status":"added"},{"patch":"@@ -0,0 +1,180 @@\n+\/*\n+ * reserved comment block\n+ * DO NOT REMOVE OR ALTER!\n+ *\/\n+\/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\/\n+\n+package com.sun.org.apache.bcel.internal.classfile;\n+\n+import java.io.DataInput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+import com.sun.org.apache.bcel.internal.Const;\n+\n+\/**\n+ * This class is derived from <em>Attribute<\/em> and records the classes and interfaces that\n+ * are authorized to claim membership in the nest hosted by the current class or interface.\n+ * There may be at most one NestMembers attribute in a ClassFile structure.\n+ *\n+ * @see     Attribute\n+ *\/\n+public final class NestMembers extends Attribute {\n+\n+    private int[] classes;\n+\n+\n+    \/**\n+     * Initialize from another object. Note that both objects use the same\n+     * references (shallow copy). Use copy() for a physical copy.\n+     *\/\n+    public NestMembers(final NestMembers c) {\n+        this(c.getNameIndex(), c.getLength(), c.getClasses(), c.getConstantPool());\n+    }\n+\n+\n+    \/**\n+     * @param name_index Index in constant pool\n+     * @param length Content length in bytes\n+     * @param classes Table of indices in constant pool\n+     * @param constant_pool Array of constants\n+     *\/\n+    public NestMembers(final int name_index, final int length, final int[] classes,\n+            final ConstantPool constant_pool) {\n+        super(Const.ATTR_NEST_MEMBERS, name_index, length, constant_pool);\n+        this.classes = classes != null ? classes : new int[0];\n+    }\n+\n+\n+    \/**\n+     * Construct object from input stream.\n+     * @param name_index Index in constant pool\n+     * @param length Content length in bytes\n+     * @param input Input stream\n+     * @param constant_pool Array of constants\n+     * @throws IOException\n+     *\/\n+    NestMembers(final int name_index, final int length, final DataInput input, final ConstantPool constant_pool) throws IOException {\n+        this(name_index, length, (int[]) null, constant_pool);\n+        final int number_of_classes = input.readUnsignedShort();\n+        classes = new int[number_of_classes];\n+        for (int i = 0; i < number_of_classes; i++) {\n+            classes[i] = input.readUnsignedShort();\n+        }\n+    }\n+\n+\n+    \/**\n+     * Called by objects that are traversing the nodes of the tree implicitely\n+     * defined by the contents of a Java class. I.e., the hierarchy of methods,\n+     * fields, attributes, etc. spawns a tree of objects.\n+     *\n+     * @param v Visitor object\n+     *\/\n+    @Override\n+    public void accept( final Visitor v ) {\n+        v.visitNestMembers(this);\n+    }\n+\n+\n+    \/**\n+     * Dump NestMembers attribute to file stream in binary format.\n+     *\n+     * @param file Output file stream\n+     * @throws IOException\n+     *\/\n+    @Override\n+    public void dump( final DataOutputStream file ) throws IOException {\n+        super.dump(file);\n+        file.writeShort(classes.length);\n+        for (final int index : classes) {\n+            file.writeShort(index);\n+        }\n+    }\n+\n+\n+    \/**\n+     * @return array of indices into constant pool of class names.\n+     *\/\n+    public int[] getClasses() {\n+        return classes;\n+    }\n+\n+\n+    \/**\n+     * @return Length of classes table.\n+     *\/\n+    public int getNumberClasses() {\n+        return classes == null ? 0 : classes.length;\n+    }\n+\n+\n+    \/**\n+     * @return string array of class names\n+     *\/\n+    public String[] getClassNames() {\n+        final String[] names = new String[classes.length];\n+        for (int i = 0; i < classes.length; i++) {\n+            names[i] = super.getConstantPool().getConstantString(classes[i],\n+                    Const.CONSTANT_Class).replace('\/', '.');\n+        }\n+        return names;\n+    }\n+\n+\n+    \/**\n+     * @param classes the list of class indexes\n+     * Also redefines number_of_classes according to table length.\n+     *\/\n+    public void setClasses( final int[] classes ) {\n+        this.classes = classes != null ? classes : new int[0];\n+    }\n+\n+\n+    \/**\n+     * @return String representation, i.e., a list of classes.\n+     *\/\n+    @Override\n+    public String toString() {\n+        final StringBuilder buf = new StringBuilder();\n+        buf.append(\"NestMembers(\");\n+        buf.append(classes.length);\n+        buf.append(\"):\\n\");\n+        for (final int index : classes) {\n+            final String class_name = super.getConstantPool().getConstantString(index, Const.CONSTANT_Class);\n+            buf.append(\"  \").append(Utility.compactClassName(class_name, false)).append(\"\\n\");\n+        }\n+        return buf.substring(0, buf.length()-1); \/\/ remove the last newline\n+    }\n+\n+\n+    \/**\n+     * @return deep copy of this attribute\n+     *\/\n+    @Override\n+    public Attribute copy( final ConstantPool _constant_pool ) {\n+        final NestMembers c = (NestMembers) clone();\n+        if (classes != null) {\n+            c.classes = new int[classes.length];\n+            System.arraycopy(classes, 0, c.classes, 0,\n+                    classes.length);\n+        }\n+        c.setConstantPool(_constant_pool);\n+        return c;\n+    }\n+}\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/NestMembers.java","additions":180,"deletions":0,"binary":false,"changes":180,"status":"added"},{"patch":"@@ -27,1 +27,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Node.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n- * @version $Id$\n@@ -91,1 +90,1 @@\n-        System.err.println(\"Visiting non-standard PMGClass object\");\n+        println(\"Visiting non-standard PMGClass object\");\n@@ -102,1 +101,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -112,1 +111,1 @@\n-    public final int getPMGClassIndex() {\n+    public int getPMGClassIndex() {\n@@ -120,1 +119,1 @@\n-    public final void setPMGClassIndex( final int pmg_class_index ) {\n+    public void setPMGClassIndex( final int pmg_class_index ) {\n@@ -128,1 +127,1 @@\n-    public final int getPMGIndex() {\n+    public int getPMGIndex() {\n@@ -136,1 +135,1 @@\n-    public final void setPMGIndex( final int pmg_index ) {\n+    public void setPMGIndex( final int pmg_index ) {\n@@ -144,1 +143,1 @@\n-    public final String getPMGName() {\n+    public String getPMGName() {\n@@ -154,1 +153,1 @@\n-    public final String getPMGClassName() {\n+    public String getPMGClassName() {\n@@ -165,1 +164,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/PMGClass.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n- * @version $Id: ParameterAnnotationEntry\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ParameterAnnotationEntry.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n- * @version $Id: ParameterAnnotations\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ParameterAnnotations.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n- * @version $Id: RuntimeInvisibleAnnotations\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/RuntimeInvisibleAnnotations.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @version $Id: RuntimeInvisibleParameterAnnotations\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/RuntimeInvisibleParameterAnnotations.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n- * @version $Id: RuntimeVisibleAnnotations\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/RuntimeVisibleAnnotations.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @version $Id: RuntimeVisibleParameterAnnotations\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/RuntimeVisibleParameterAnnotations.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n- * @version $Id$\n@@ -99,1 +98,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -108,1 +107,1 @@\n-    public final int getSignatureIndex() {\n+    public int getSignatureIndex() {\n@@ -116,1 +115,1 @@\n-    public final void setSignatureIndex( final int signature_index ) {\n+    public void setSignatureIndex( final int signature_index ) {\n@@ -124,1 +123,1 @@\n-    public final String getSignature() {\n+    public String getSignature() {\n@@ -140,1 +139,1 @@\n-        final String getData() {\n+        String getData() {\n@@ -145,1 +144,1 @@\n-        final void unread() {\n+        void unread() {\n@@ -261,1 +260,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Signature.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n- * @version $Id$\n@@ -106,1 +105,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -115,1 +114,1 @@\n-    public final int getSourceFileIndex() {\n+    public int getSourceFileIndex() {\n@@ -123,1 +122,1 @@\n-    public final void setSourceFileIndex( final int sourcefile_index ) {\n+    public void setSourceFileIndex( final int sourcefile_index ) {\n@@ -131,1 +130,1 @@\n-    public final String getSourceFileName() {\n+    public String getSourceFileName() {\n@@ -142,1 +141,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/SourceFile.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -33,4 +33,4 @@\n- * href=\"http:\/\/java.sun.com\/j2me\/\"> Java 2 Micro Edition<\/a>\n- * (J2ME). This attribute is used by the <a\n- * href=\"http:\/\/java.sun.com\/products\/cldc\/\">KVM<\/a> and contained\n- * within the Code attribute of a method. See CLDC specification\n+ * href=\"https:\/\/www.oracle.com\/java\/technologies\/javameoverview.html\">Java Platform, Micro Edition<\/a>\n+ * (Java ME). This attribute is used by the <a\n+ * href=\"https:\/\/www.oracle.com\/technetwork\/java\/embedded\/javame\/java-mobile\/kvmwp-150240.pdf\">KVM<\/a>\n+ * and contained within the Code attribute of a method. See CLDC specification\n@@ -39,1 +39,0 @@\n- * @version $Id$\n@@ -87,1 +86,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -99,1 +98,1 @@\n-    public final StackMapEntry[] getStackMap() {\n+    public StackMapEntry[] getStackMap() {\n@@ -107,1 +106,1 @@\n-    public final void setStackMap( final StackMapEntry[] map ) {\n+    public void setStackMap( final StackMapEntry[] map ) {\n@@ -121,1 +120,1 @@\n-    public final String toString() {\n+    public String toString() {\n@@ -162,1 +161,1 @@\n-    public final int getMapLength() {\n+    public int getMapLength() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/StackMap.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n- * @version $Id$\n@@ -145,1 +144,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -185,1 +184,1 @@\n-    public final String toString() {\n+    public String toString() {\n@@ -429,1 +428,1 @@\n-    public final ConstantPool getConstantPool() {\n+    public ConstantPool getConstantPool() {\n@@ -437,1 +436,1 @@\n-    public final void setConstantPool( final ConstantPool constant_pool ) {\n+    public void setConstantPool( final ConstantPool constant_pool ) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/StackMapEntry.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n- * @version $Id$\n@@ -106,1 +105,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -116,1 +115,1 @@\n-    public final boolean hasIndex() {\n+    public boolean hasIndex() {\n@@ -139,1 +138,1 @@\n-    public final String toString() {\n+    public String toString() {\n@@ -160,1 +159,1 @@\n-    public final ConstantPool getConstantPool() {\n+    public ConstantPool getConstantPool() {\n@@ -168,1 +167,1 @@\n-    public final void setConstantPool( final ConstantPool constant_pool ) {\n+    public void setConstantPool( final ConstantPool constant_pool ) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/StackMapType.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n- * @version $Id$\n@@ -85,1 +84,1 @@\n-            System.err.println(\"Synthetic attribute with length > 0\");\n+            println(\"Synthetic attribute with length > 0\");\n@@ -110,1 +109,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -121,1 +120,1 @@\n-    public final byte[] getBytes() {\n+    public byte[] getBytes() {\n@@ -129,1 +128,1 @@\n-    public final void setBytes( final byte[] bytes ) {\n+    public void setBytes( final byte[] bytes ) {\n@@ -138,1 +137,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Synthetic.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n- * @version $Id$\n@@ -127,1 +126,1 @@\n-    public final void dump( final DataOutputStream file ) throws IOException {\n+    public void dump( final DataOutputStream file ) throws IOException {\n@@ -138,1 +137,1 @@\n-    public final byte[] getBytes() {\n+    public byte[] getBytes() {\n@@ -147,1 +146,1 @@\n-    public final String getName() {\n+    public String getName() {\n@@ -155,1 +154,1 @@\n-    public final void setBytes( final byte[] bytes ) {\n+    public void setBytes( final byte[] bytes ) {\n@@ -164,1 +163,1 @@\n-    public final String toString() {\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Unknown.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/UnknownAttributeReader.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n@@ -55,1 +54,0 @@\n-\n@@ -60,0 +58,5 @@\n+    \/* How many chars have been consumed\n+     * during parsing in typeSignatureToString().\n+     * Read by methodSignatureToString().\n+     * Set by side effect, but only internally.\n+     *\/\n@@ -61,1 +64,0 @@\n-\n@@ -66,6 +68,3 @@\n-    };\/* How many chars have been consumed\n-     * during parsing in signatureToString().\n-     * Read by methodSignatureToString().\n-     * Set by side effect,but only internally.\n-     *\/\n-    private static boolean wide = false; \/* The `WIDE' instruction is used in the\n+    };\n+\n+    \/* The `WIDE' instruction is used in the\n@@ -80,0 +79,1 @@\n+    private static boolean wide = false;\n@@ -108,1 +108,1 @@\n-        for (int i = 0; p < Const.MAX_ACC_FLAG; i++) { \/\/ Loop through known flags\n+        for (int i = 0; p < Const.MAX_ACC_FLAG_I; i++) { \/\/ Loop through known flags\n@@ -472,0 +472,15 @@\n+    \/**\n+     * Shorten long class names, <em>java\/lang\/String<\/em> becomes\n+     * <em>java.lang.String<\/em>,\n+     * e.g.. If <em>chopit<\/em> is <em>true<\/em> the prefix <em>java.lang<\/em>\n+     * is also removed.\n+     *\n+     * @param str The long class name\n+     * @param chopit flag that determines whether chopping is executed or not\n+     * @return Compacted class name\n+     *\/\n+    public static String compactClassName( final String str, final boolean chopit ) {\n+        return compactClassName(str, \"java.lang.\", chopit);\n+    }\n+\n+\n@@ -480,1 +495,1 @@\n-     * @param chopit Flag that determines whether chopping is executed or not\n+     * @param chopit flag that determines whether chopping is executed or not\n@@ -496,15 +511,0 @@\n-    \/**\n-     * Shorten long class names, <em>java\/lang\/String<\/em> becomes\n-     * <em>java.lang.String<\/em>,\n-     * e.g.. If <em>chopit<\/em> is <em>true<\/em> the prefix <em>java.lang<\/em>\n-     * is also removed.\n-     *\n-     * @param str The long class name\n-     * @param chopit Flag that determines whether chopping is executed or not\n-     * @return Compacted class name\n-     *\/\n-    public static String compactClassName( final String str, final boolean chopit ) {\n-        return compactClassName(str, \"java.lang.\", chopit);\n-    }\n-\n-\n@@ -566,0 +566,2 @@\n+     * Converts argument list portion of method signature to string with all class names compacted.\n+     *\n@@ -567,2 +569,2 @@\n-     * @return Array of argument types\n-     * @throws  ClassFormatException\n+     * @return String Array of argument types\n+     * @throws ClassFormatException\n@@ -577,0 +579,2 @@\n+     * Converts argument list portion of method signature to string.\n+     *\n@@ -578,3 +582,3 @@\n-     * @param chopit Shorten class names ?\n-     * @return Array of argument types\n-     * @throws  ClassFormatException\n+     * @param  chopit flag that determines whether chopping is executed or not\n+     * @return String Array of argument types\n+     * @throws ClassFormatException\n@@ -586,2 +590,4 @@\n-        try { \/\/ Read all declarations between for `(' and `)'\n-            if (signature.charAt(0) != '(') {\n+        try {\n+            \/\/ Skip any type arguments to read argument declarations between `(' and `)'\n+            index = signature.indexOf('(') + 1;\n+            if (index <= 0) {\n@@ -590,1 +596,0 @@\n-            index = 1; \/\/ current string position\n@@ -592,1 +597,1 @@\n-                vec.add(signatureToString(signature.substring(index), chopit));\n+                vec.add(typeSignatureToString(signature.substring(index), chopit));\n@@ -604,0 +609,2 @@\n+     * Converts return type portion of method signature to string with all class names compacted.\n+     *\n@@ -605,2 +612,2 @@\n-     * @return return type of method\n-     * @throws  ClassFormatException\n+     * @return String representation of method return type\n+     * @throws ClassFormatException\n@@ -614,0 +621,2 @@\n+     * Converts return type portion of method signature to string.\n+     *\n@@ -615,3 +624,3 @@\n-     * @param chopit Shorten class names ?\n-     * @return return type of method\n-     * @throws  ClassFormatException\n+     * @param  chopit flag that determines whether chopping is executed or not\n+     * @return String representation of method return type\n+     * @throws ClassFormatException\n@@ -625,1 +634,4 @@\n-            type = signatureToString(signature.substring(index), chopit);\n+            if (index <= 0) {\n+                throw new ClassFormatException(\"Invalid method signature: \" + signature);\n+            }\n+            type = typeSignatureToString(signature.substring(index), chopit);\n@@ -636,3 +648,3 @@\n-     * @param signature to convert\n-     * @param name of method\n-     * @param access flags of method\n+     * @param  signature to convert\n+     * @param  name of method\n+     * @param  access flags of method\n@@ -646,0 +658,9 @@\n+    \/**\n+     * Converts method signature to string.\n+     *\n+     * @param  signature to convert\n+     * @param  name of method\n+     * @param  access flags of method\n+     * @param  chopit flag that determines whether chopping is executed or not\n+     * @return Human readable signature\n+     *\/\n@@ -652,23 +673,1 @@\n-     * A returntype signature represents the return value from a method.\n-     * It is a series of bytes in the following grammar:\n-     *\n-     * <pre>\n-     * &lt;return_signature&gt; ::= &lt;field_type&gt; | V\n-     * <\/pre>\n-     *\n-     * The character V indicates that the method returns no value. Otherwise, the\n-     * signature indicates the type of the return value.\n-     * An argument signature represents an argument passed to a method:\n-     *\n-     * <pre>\n-     * &lt;argument_signature&gt; ::= &lt;field_type&gt;\n-     * <\/pre>\n-     *\n-     * A method signature represents the arguments that the method expects, and\n-     * the value that it returns.\n-     * <pre>\n-     * &lt;method_signature&gt; ::= (&lt;arguments_signature&gt;) &lt;return_signature&gt;\n-     * &lt;arguments_signature&gt;::= &lt;argument_signature&gt;*\n-     * <\/pre>\n-     *\n-     * This method converts such a string into a Java type declaration like\n+     * This method converts a method signature string into a Java type declaration like\n@@ -681,2 +680,2 @@\n-     * @param chopit\n-     * @param vars\n+     * @param  chopit flag that determines whether chopping is executed or not\n+     * @param  vars the LocalVariableTable for the method\n@@ -684,1 +683,1 @@\n-     * @throws  ClassFormatException\n+     * @throws ClassFormatException\n@@ -692,2 +691,4 @@\n-        try { \/\/ Read all declarations between for `(' and `)'\n-            if (signature.charAt(0) != '(') {\n+        try {\n+            \/\/ Skip any type arguments to read argument declarations between `(' and `)'\n+            index = signature.indexOf('(') + 1;\n+            if (index <= 0) {\n@@ -696,1 +697,0 @@\n-            index = 1; \/\/ current string position\n@@ -698,1 +698,1 @@\n-                final String param_type = signatureToString(signature.substring(index), chopit);\n+                final String param_type = typeSignatureToString(signature.substring(index), chopit);\n@@ -719,1 +719,1 @@\n-            type = signatureToString(signature.substring(index), chopit);\n+            type = typeSignatureToString(signature.substring(index), chopit);\n@@ -723,0 +723,1 @@\n+        \/\/ ignore any throws information in the signature\n@@ -732,1 +733,0 @@\n-    \/\/ Guess what this does\n@@ -770,1 +770,1 @@\n-     * Converts signature to string with all class names compacted.\n+     * WARNING:\n@@ -772,2 +772,32 @@\n-     * @param signature to convert\n-     * @return Human readable signature\n+     * There is some nomenclature confusion through much of the BCEL code base with\n+     * respect to the terms Descriptor and Signature.  For the offical definitions see:\n+     *\n+     * @see <a href=\"http:\/\/docs.oracle.com\/javase\/specs\/jvms\/se8\/html\/jvms-4.html#jvms-4.3\">\n+     * Descriptors in The Java Virtual Machine Specification<\/a>\n+     *\n+     * @see <a href=\"http:\/\/docs.oracle.com\/javase\/specs\/jvms\/se8\/html\/jvms-4.html#jvms-4.7.9.1\">\n+     * Signatures in The Java Virtual Machine Specification<\/a>\n+     *\n+     * In brief, a descriptor is a string representing the type of a field or method.\n+     * Signatures are similar, but more complex.  Signatures are used to encode declarations\n+     * written in the Java programming language that use types outside the type system of the\n+     * Java Virtual Machine.  They are used to describe the type of any class, interface,\n+     * constructor, method or field whose declaration uses type variables or parameterized types.\n+     *\n+     * To parse a descriptor, call typeSignatureToString.\n+     * To parse a signature, call signatureToString.\n+     *\n+     * Note that if the signature string is a single, non-generic item, the call to\n+     * signatureToString reduces to a call to typeSignatureToString.\n+     * Also note, that if you only wish to parse the first item in a longer signature\n+     * string, you should call typeSignatureToString directly.\n+     *\/\n+\n+\n+    \/**\n+     * Converts a signature to a string with all class names compacted.\n+     * Class, Method and Type signatures are supported.\n+     * Enum and Interface signatures are not supported.\n+     *\n+     * @param  signature signature to convert\n+     * @return String containg human readable signature\n@@ -781,32 +811,7 @@\n-     * The field signature represents the value of an argument to a function or\n-     * the value of a variable. It is a series of bytes generated by the\n-     * following grammar:\n-     *\n-     * <PRE>\n-     * &lt;field_signature&gt; ::= &lt;field_type&gt;\n-     * &lt;field_type&gt;      ::= &lt;base_type&gt;|&lt;object_type&gt;|&lt;array_type&gt;\n-     * &lt;base_type&gt;       ::= B|C|D|F|I|J|S|Z\n-     * &lt;object_type&gt;     ::= L&lt;fullclassname&gt;;\n-     * &lt;array_type&gt;      ::= [&lt;field_type&gt;\n-     *\n-     * The meaning of the base types is as follows:\n-     * B byte signed byte\n-     * C char character\n-     * D double double precision IEEE float\n-     * F float single precision IEEE float\n-     * I int integer\n-     * J long long integer\n-     * L&lt;fullclassname&gt;; ... an object of the given class\n-     * S short signed short\n-     * Z boolean true or false\n-     * [&lt;field sig&gt; ... array\n-     * <\/PRE>\n-     *\n-     * This method converts this string into a Java type declaration such as\n-     * `String[]' and throws a `ClassFormatException' when the parsed type is\n-     * invalid.\n-     *\n-     * @param  signature  Class signature\n-     * @param chopit Flag that determines whether chopping is executed or not\n-     * @return Java type declaration\n-     * @throws ClassFormatException\n+     * Converts a signature to a string.\n+     * Class, Method and Type signatures are supported.\n+     * Enum and Interface signatures are not supported.\n+     *\n+     * @param  signature signature to convert\n+     * @param  chopit flag that determines whether chopping is executed or not\n+     * @return String containg human readable signature\n@@ -815,0 +820,143 @@\n+        String type = \"\";\n+        String typeParams = \"\";\n+        int index = 0;\n+        if (signature.charAt(0) == '<') {\n+            \/\/ we have type paramters\n+            typeParams = typeParamTypesToString(signature, chopit);\n+            index += unwrap(consumed_chars); \/\/ update position\n+        }\n+        if (signature.charAt(index) == '(') {\n+            \/\/ We have a Method signature.\n+            \/\/ add types of arguments\n+            type = typeParams + typeSignaturesToString(signature.substring(index), chopit, ')');\n+            index += unwrap(consumed_chars); \/\/ update position\n+            \/\/ add return type\n+            type = type + typeSignatureToString(signature.substring(index), chopit);\n+            index += unwrap(consumed_chars); \/\/ update position\n+            \/\/ ignore any throws information in the signature\n+            return type;\n+        } else {\n+            \/\/ Could be Class or Type...\n+            type = typeSignatureToString(signature.substring(index), chopit);\n+            index += unwrap(consumed_chars); \/\/ update position\n+            if ((typeParams.length() == 0) && (index == signature.length())) {\n+                \/\/ We have a Type signature.\n+                return type;\n+            }\n+            \/\/ We have a Class signature.\n+            final StringBuilder typeClass = new StringBuilder(typeParams);\n+            typeClass.append(\" extends \");\n+            typeClass.append(type);\n+            if (index < signature.length()) {\n+                typeClass.append(\" implements \");\n+                typeClass.append(typeSignatureToString(signature.substring(index), chopit));\n+                index += unwrap(consumed_chars); \/\/ update position\n+            }\n+            while (index < signature.length()) {\n+                typeClass.append(\", \");\n+                typeClass.append(typeSignatureToString(signature.substring(index), chopit));\n+                index += unwrap(consumed_chars); \/\/ update position\n+            }\n+            return typeClass.toString();\n+        }\n+    }\n+\n+\n+    \/**\n+     * Converts a type parameter list signature to a string.\n+     *\n+     * @param  signature signature to convert\n+     * @param  chopit flag that determines whether chopping is executed or not\n+     * @return String containg human readable signature\n+     *\/\n+    private static String typeParamTypesToString( final String signature, final boolean chopit ) {\n+        \/\/ The first character is guranteed to be '<'\n+        final StringBuilder typeParams = new StringBuilder(\"<\");\n+        int index = 1;  \/\/ skip the '<'\n+        \/\/ get the first TypeParameter\n+        typeParams.append(typeParamTypeToString(signature.substring(index), chopit));\n+        index += unwrap(consumed_chars); \/\/ update position\n+        \/\/ are there more TypeParameters?\n+        while (signature.charAt(index) != '>') {\n+            typeParams.append(\", \");\n+            typeParams.append(typeParamTypeToString(signature.substring(index), chopit));\n+            index += unwrap(consumed_chars); \/\/ update position\n+        }\n+        wrap(consumed_chars, index + 1); \/\/ account for the '>' char\n+        return typeParams.append(\">\").toString();\n+    }\n+\n+\n+    \/**\n+     * Converts a type parameter signature to a string.\n+     *\n+     * @param  signature signature to convert\n+     * @param  chopit flag that determines whether chopping is executed or not\n+     * @return String containg human readable signature\n+     *\/\n+    private static String typeParamTypeToString( final String signature, final boolean chopit ) {\n+        int index = signature.indexOf(':');\n+        if (index <= 0) {\n+            throw new ClassFormatException(\"Invalid type parameter signature: \" + signature);\n+        }\n+        \/\/ get the TypeParameter identifier\n+        final StringBuilder typeParam = new StringBuilder(signature.substring(0, index));\n+        index++;  \/\/ account for the ':'\n+        if (signature.charAt(index) != ':') {\n+            \/\/ we have a class bound\n+            typeParam.append(\" extends \");\n+            typeParam.append(typeSignatureToString(signature.substring(index), chopit));\n+            index += unwrap(consumed_chars); \/\/ update position\n+        }\n+        \/\/ look for interface bounds\n+        while (signature.charAt(index) == ':') {\n+            index++;  \/\/ skip over the ':'\n+            typeParam.append(\" & \");\n+            typeParam.append(typeSignatureToString(signature.substring(index), chopit));\n+            index += unwrap(consumed_chars); \/\/ update position\n+        }\n+        wrap(consumed_chars, index);\n+        return typeParam.toString();\n+    }\n+\n+\n+    \/**\n+     * Converts a list of type signatures to a string.\n+     *\n+     * @param  signature signature to convert\n+     * @param  chopit flag that determines whether chopping is executed or not\n+     * @param  term character indicating the end of the list\n+     * @return String containg human readable signature\n+     *\/\n+    private static String typeSignaturesToString( final String signature, final boolean chopit, final char term ) {\n+        \/\/ The first character will be an 'open' that matches the 'close' contained in term.\n+        final StringBuilder typeList = new StringBuilder(signature.substring(0, 1));\n+        int index = 1;  \/\/ skip the 'open' character\n+        \/\/ get the first Type in the list\n+        if (signature.charAt(index) != term) {\n+            typeList.append(typeSignatureToString(signature.substring(index), chopit));\n+            index += unwrap(consumed_chars); \/\/ update position\n+        }\n+        \/\/ are there more types in the list?\n+        while (signature.charAt(index) != term) {\n+            typeList.append(\", \");\n+            typeList.append(typeSignatureToString(signature.substring(index), chopit));\n+            index += unwrap(consumed_chars); \/\/ update position\n+        }\n+        wrap(consumed_chars, index + 1); \/\/ account for the term char\n+        return typeList.append(term).toString();\n+    }\n+\n+\n+    \/**\n+     *\n+     * This method converts a type signature string into a Java type declaration such as\n+     * `String[]' and throws a `ClassFormatException' when the parsed type is invalid.\n+     *\n+     * @param  signature type signature\n+     * @param  chopit flag that determines whether chopping is executed or not\n+     * @return string containing human readable type signature\n+     * @throws ClassFormatException\n+     * @since 6.4.0\n+     *\/\n+    public static String typeSignatureToString( final String signature, final boolean chopit ) throws ClassFormatException {\n@@ -834,1 +982,1 @@\n-                        throw new ClassFormatException(\"Invalid signature: \" + signature);\n+                        throw new ClassFormatException(\"Invalid type variable signature: \" + signature);\n@@ -894,1 +1042,1 @@\n-                        type.append(signatureToString(signature.substring(consumed_chars), chopit));\n+                        type.append(typeSignatureToString(signature.substring(consumed_chars), chopit));\n@@ -915,1 +1063,1 @@\n-                            type.append(signatureToString(signature.substring(consumed_chars), chopit));\n+                            type.append(typeSignatureToString(signature.substring(consumed_chars), chopit));\n@@ -931,1 +1079,1 @@\n-                        type.append(signatureToString(\"L\" + signature.substring(consumed_chars+1), chopit));\n+                        type.append(typeSignatureToString(\"L\" + signature.substring(consumed_chars+1), chopit));\n@@ -961,1 +1109,1 @@\n-                    type = signatureToString(signature.substring(n), chopit);\n+                    type = typeSignatureToString(signature.substring(n), chopit);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Utility.java","additions":266,"deletions":118,"binary":false,"changes":384,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n@@ -139,0 +138,7 @@\n+    \/**\n+     * @since 6.4.0\n+     *\/\n+    default void visitMethodParameter(final MethodParameter obj) {\n+        \/\/ empty\n+    }\n+\n@@ -167,1 +173,64 @@\n-    default void visitConstantDynamic(ConstantDynamic constantDynamic) {\n+    default void visitConstantDynamic(final ConstantDynamic constantDynamic) {\n+        \/\/ empty\n+    }\n+\n+    \/**\n+     * @since 6.4.0\n+     *\/\n+    default void visitModule(final Module constantModule) {\n+        \/\/ empty\n+    }\n+\n+    \/**\n+     * @since 6.4.0\n+     *\/\n+    default void visitModuleRequires(final ModuleRequires constantModule) {\n+        \/\/ empty\n+    }\n+\n+    \/**\n+     * @since 6.4.0\n+     *\/\n+    default void visitModuleExports(final ModuleExports constantModule) {\n+        \/\/ empty\n+    }\n+\n+    \/**\n+     * @since 6.4.0\n+     *\/\n+    default void visitModuleOpens(final ModuleOpens constantModule) {\n+        \/\/ empty\n+    }\n+\n+    \/**\n+     * @since 6.4.0\n+     *\/\n+    default void visitModuleProvides(final ModuleProvides constantModule) {\n+        \/\/ empty\n+    }\n+\n+    \/**\n+     * @since 6.4.0\n+     *\/\n+    default void visitModulePackages(final ModulePackages constantModule) {\n+        \/\/ empty\n+    }\n+\n+    \/**\n+     * @since 6.4.0\n+     *\/\n+    default void visitModuleMainClass(final ModuleMainClass obj) {\n+        \/\/ empty\n+    }\n+\n+    \/**\n+     * @since 6.4.0\n+     *\/\n+    default void visitNestHost(final NestHost obj) {\n+        \/\/ empty\n+    }\n+\n+    \/**\n+     * @since 6.4.0\n+     *\/\n+    default void visitNestMembers(final NestMembers obj) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Visitor.java","additions":71,"deletions":2,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/AALOAD.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/AASTORE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ACONST_NULL.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ALOAD.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ANEWARRAY.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ARETURN.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ARRAYLENGTH.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ASTORE.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ATHROW.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/AllocationInstruction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/AnnotationEntryGen.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ArithmeticInstruction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ArrayInstruction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ArrayType.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/BALOAD.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/BASTORE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/BIPUSH.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/BREAKPOINT.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/BasicType.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/BranchHandle.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/BranchInstruction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/CALOAD.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/CASTORE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/CHECKCAST.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/CPInstruction.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ClassGen.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ClassGenException.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ClassObserver.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/CodeExceptionGen.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/CompoundInstruction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,0 @@\n- * @version $Id$\n@@ -54,1 +53,1 @@\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n@@ -185,0 +184,4 @@\n+            } else if (c instanceof com.sun.org.apache.bcel.internal.classfile.ConstantModule) {\n+                \/\/ TODO should this be handled somehow?\n+            } else if (c instanceof com.sun.org.apache.bcel.internal.classfile.ConstantPackage) {\n+                \/\/ TODO should this be handled somehow?\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ConstantPoolGen.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ConstantPushInstruction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ConversionInstruction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/D2F.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/D2I.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/D2L.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DADD.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DALOAD.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DASTORE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DCMPG.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DCMPL.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DCONST.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DDIV.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DLOAD.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DMUL.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DNEG.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DREM.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DRETURN.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DSTORE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DSUB.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DUP.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DUP2.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DUP2_X1.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DUP2_X2.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DUP_X1.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/DUP_X2.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ElementValueGen.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/EmptyVisitor.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ExceptionThrower.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/F2D.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/F2I.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/F2L.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FADD.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FALOAD.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FASTORE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FCMPG.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FCMPL.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FCONST.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FDIV.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FLOAD.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FMUL.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FNEG.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FREM.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FRETURN.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FSTORE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FSUB.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n- * @version $Id$\n@@ -45,1 +44,1 @@\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FieldGen.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jun 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FieldGenOrMethodGen.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FieldInstruction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FieldObserver.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n- * @version $Id$\n@@ -43,0 +42,1 @@\n+        \/\/ no init\n@@ -56,1 +56,1 @@\n-    public String getSignature( final ConstantPoolGen cpg ) {\n+    public String getSignature(final ConstantPoolGen cpg) {\n@@ -66,1 +66,1 @@\n-    public String getName( final ConstantPoolGen cpg ) {\n+    public String getName(final ConstantPoolGen cpg) {\n@@ -86,1 +86,1 @@\n-    public String getClassName( final ConstantPoolGen cpg ) {\n+    public String getClassName(final ConstantPoolGen cpg) {\n@@ -104,1 +104,1 @@\n-    public ObjectType getClassType( final ConstantPoolGen cpg ) {\n+    public ObjectType getClassType(final ConstantPoolGen cpg) {\n@@ -110,1 +110,1 @@\n-     * Return the reference type representing the class, interface,\n+     * Gets the reference type representing the class, interface,\n@@ -117,1 +117,1 @@\n-    public ReferenceType getReferenceType( final ConstantPoolGen cpg ) {\n+    public ReferenceType getReferenceType(final ConstantPoolGen cpg) {\n@@ -130,1 +130,1 @@\n-     * Get the ObjectType of the method return or field.\n+     * Gets the ObjectType of the method return or field.\n@@ -136,1 +136,1 @@\n-    public ObjectType getLoadClassType( final ConstantPoolGen cpg ) {\n+    public ObjectType getLoadClassType(final ConstantPoolGen cpg) {\n@@ -138,2 +138,2 @@\n-        if(rt instanceof ObjectType) {\n-            return (ObjectType)rt;\n+        if (rt instanceof ObjectType) {\n+            return (ObjectType) rt;\n@@ -141,1 +141,2 @@\n-        throw new ClassGenException(rt.getSignature() + \" does not represent an ObjectType\");\n+        throw new ClassGenException(rt.getClass().getCanonicalName() + \" \" +\n+                rt.getSignature() + \" does not represent an ObjectType\");\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FieldOrMethod.java","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/GETFIELD.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/GETSTATIC.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/GOTO.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/GOTO_W.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/GotoInstruction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/I2B.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/I2C.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/I2D.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/I2F.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/I2L.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/I2S.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IADD.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IALOAD.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IAND.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IASTORE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ICONST.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IDIV.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IFEQ.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IFGE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IFGT.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IFLE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IFLT.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IFNE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IFNONNULL.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IFNULL.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IF_ACMPEQ.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IF_ACMPNE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IF_ICMPEQ.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IF_ICMPGE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IF_ICMPGT.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IF_ICMPLE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IF_ICMPLT.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IF_ICMPNE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @version $Id$\n@@ -53,1 +52,1 @@\n-        super(); \/\/ Default behaviour of LocalVariableInstruction causes error\n+        super(); \/\/ Default behavior of LocalVariableInstruction causes error\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IINC.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ILOAD.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IMPDEP1.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IMPDEP2.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IMUL.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/INEG.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/INSTANCEOF.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n- * @version $Id: InvokeInstruction.java 1152072 2011-07-29 01:54:05Z dbrosius $\n@@ -43,1 +42,1 @@\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/INVOKEDYNAMIC.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/INVOKEINTERFACE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/INVOKESPECIAL.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/INVOKESTATIC.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/INVOKEVIRTUAL.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IOR.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IREM.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IRETURN.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ISHL.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ISHR.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ISTORE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ISUB.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IUSHR.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IXOR.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IfInstruction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/IndexedInstruction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/Instruction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,3 @@\n- * call.<br>The DEFAULT comparator however, considers two instructions\n+ * call.\n+ * <p>\n+ * The DEFAULT comparator however, considers two instructions\n@@ -32,0 +34,1 @@\n+ * <\/p>\n@@ -34,1 +37,0 @@\n- * @version $Id$\n@@ -38,8 +40,5 @@\n-    InstructionComparator DEFAULT = new InstructionComparator() {\n-\n-        @Override\n-        public boolean equals( final Instruction i1, final Instruction i2 ) {\n-            if (i1.getOpcode() == i2.getOpcode()) {\n-                if (i1 instanceof BranchInstruction) {\n-                 \/\/ BIs are never equal to make targeters work correctly (BCEL-195)\n-                    return false;\n+    InstructionComparator DEFAULT = (i1, i2) -> {\n+        if (i1.getOpcode() == i2.getOpcode()) {\n+            if (i1 instanceof BranchInstruction) {\n+             \/\/ BIs are never equal to make targeters work correctly (BCEL-195)\n+                return false;\n@@ -48,11 +47,10 @@\n-                } else if (i1 instanceof ConstantPushInstruction) {\n-                    return ((ConstantPushInstruction) i1).getValue().equals(\n-                            ((ConstantPushInstruction) i2).getValue());\n-                } else if (i1 instanceof IndexedInstruction) {\n-                    return ((IndexedInstruction) i1).getIndex() == ((IndexedInstruction) i2)\n-                            .getIndex();\n-                } else if (i1 instanceof NEWARRAY) {\n-                    return ((NEWARRAY) i1).getTypecode() == ((NEWARRAY) i2).getTypecode();\n-                } else {\n-                    return true;\n-                }\n+            } else if (i1 instanceof ConstantPushInstruction) {\n+                return ((ConstantPushInstruction) i1).getValue().equals(\n+                        ((ConstantPushInstruction) i2).getValue());\n+            } else if (i1 instanceof IndexedInstruction) {\n+                return ((IndexedInstruction) i1).getIndex() == ((IndexedInstruction) i2)\n+                        .getIndex();\n+            } else if (i1 instanceof NEWARRAY) {\n+                return ((NEWARRAY) i1).getTypecode() == ((NEWARRAY) i2).getTypecode();\n+            } else {\n+                return true;\n@@ -60,1 +58,0 @@\n-            return false;\n@@ -62,0 +59,1 @@\n+        return false;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/InstructionComparator.java","additions":20,"deletions":22,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n- * @version $Id: InstructionConstants.java 1695415 2015-08-12 01:02:39Z chas $\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/InstructionConst.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n- * @version $Id$\n@@ -36,1 +35,1 @@\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/InstructionFactory.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n- * @version $Id$\n@@ -46,0 +45,1 @@\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/InstructionHandle.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,0 @@\n- * @version $Id$\n@@ -51,1 +50,1 @@\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n@@ -69,1 +68,2 @@\n-     * @param i initial instruction\n+     * @param i\n+     *            initial instruction\n@@ -78,1 +78,2 @@\n-     * @param i initial instruction\n+     * @param i\n+     *            initial instruction\n@@ -88,1 +89,2 @@\n-     * @param c compound instruction (list)\n+     * @param c\n+     *            compound instruction (list)\n@@ -105,5 +107,8 @@\n-     * @param ihs array of instruction handles, i.e. il.getInstructionHandles()\n-     * @param pos array of positions corresponding to ihs, i.e.\n-     * il.getInstructionPositions()\n-     * @param count length of arrays\n-     * @param target target position to search for\n+     * @param ihs\n+     *            array of instruction handles, i.e. il.getInstructionHandles()\n+     * @param pos\n+     *            array of positions corresponding to ihs, i.e. il.getInstructionPositions()\n+     * @param count\n+     *            length of arrays\n+     * @param target\n+     *            target position to search for\n@@ -112,1 +117,2 @@\n-    public static InstructionHandle findHandle(final InstructionHandle[] ihs, final int[] pos, final int count, final int target) {\n+    public static InstructionHandle findHandle(final InstructionHandle[] ihs,\n+            final int[] pos, final int count, final int target) {\n@@ -119,1 +125,1 @@\n-            final int i = (l + r) \/ 2;\n+            final int i = (l + r) >>> 1;\n@@ -137,1 +143,2 @@\n-     * @param pos byte code position to search for\n+     * @param pos\n+     *            byte code position to search for\n@@ -155,1 +162,2 @@\n-     * @param code byte array containing the instructions\n+     * @param code\n+     *            byte array containing the instructions\n@@ -198,2 +206,2 @@\n-                                                                * Byte code position: relative -> absolute.\n-                 *\/\n+                 * Byte code position: relative -> absolute.\n+                *\/\n@@ -227,4 +235,5 @@\n-     * @param ih where to append the instruction list\n-     * @param il Instruction list to append to this one\n-     * @return instruction handle pointing to the <B>first<\/B> appended\n-     * instruction\n+     * @param ih\n+     *            where to append the instruction list\n+     * @param il\n+     *            Instruction list to append to this one\n+     * @return instruction handle pointing to the <B>first<\/B> appended instruction\n@@ -258,4 +267,5 @@\n-     * @param i where to append the instruction list\n-     * @param il Instruction list to append to this one\n-     * @return instruction handle pointing to the <B>first<\/B> appended\n-     * instruction\n+     * @param i\n+     *            where to append the instruction list\n+     * @param il\n+     *            Instruction list to append to this one\n+     * @return instruction handle pointing to the <B>first<\/B> appended instruction\n@@ -275,1 +285,2 @@\n-     * @param il list to append to end of this list\n+     * @param il\n+     *            list to append to end of this list\n@@ -298,1 +309,2 @@\n-     * @param ih instruction to append\n+     * @param ih\n+     *            instruction to append\n@@ -310,1 +322,0 @@\n-\n@@ -317,1 +328,2 @@\n-     * @param i instruction to append\n+     * @param i\n+     *            instruction to append\n@@ -329,1 +341,2 @@\n-     * @param i branch instruction to append\n+     * @param i\n+     *            branch instruction to append\n@@ -342,2 +355,4 @@\n-     * @param i Instruction in list\n-     * @param j Instruction to append after i in list\n+     * @param i\n+     *            Instruction in list\n+     * @param j\n+     *            Instruction to append after i in list\n@@ -353,2 +368,4 @@\n-     * @param i Instruction in list\n-     * @param c The composite instruction (containing an InstructionList)\n+     * @param i\n+     *            Instruction in list\n+     * @param c\n+     *            The composite instruction (containing an InstructionList)\n@@ -364,1 +381,2 @@\n-     * @param c The composite instruction (containing an InstructionList)\n+     * @param c\n+     *            The composite instruction (containing an InstructionList)\n@@ -374,2 +392,4 @@\n-     * @param ih where to append the instruction list\n-     * @param c The composite instruction (containing an InstructionList)\n+     * @param ih\n+     *            where to append the instruction list\n+     * @param c\n+     *            The composite instruction (containing an InstructionList)\n@@ -383,2 +403,1 @@\n-     * Append an instruction after instruction (handle) ih contained in this\n-     * list.\n+     * Append an instruction after instruction (handle) ih contained in this list.\n@@ -386,4 +405,5 @@\n-     * @param ih where to append the instruction list\n-     * @param i Instruction to append\n-     * @return instruction handle pointing to the <B>first<\/B> appended\n-     * instruction\n+     * @param ih\n+     *            where to append the instruction list\n+     * @param i\n+     *            Instruction to append\n+     * @return instruction handle pointing to the <B>first<\/B> appended instruction\n@@ -396,2 +416,1 @@\n-     * Append an instruction after instruction (handle) ih contained in this\n-     * list.\n+     * Append an instruction after instruction (handle) ih contained in this list.\n@@ -399,4 +418,5 @@\n-     * @param ih where to append the instruction list\n-     * @param i Instruction to append\n-     * @return instruction handle pointing to the <B>first<\/B> appended\n-     * instruction\n+     * @param ih\n+     *            where to append the instruction list\n+     * @param i\n+     *            Instruction to append\n+     * @return instruction handle pointing to the <B>first<\/B> appended instruction\n@@ -416,2 +436,4 @@\n-     * @param ih where to append the instruction list\n-     * @param il Instruction list to insert\n+     * @param ih\n+     *            where to append the instruction list\n+     * @param il\n+     *            Instruction list to insert\n@@ -445,1 +467,2 @@\n-     * @param il list to insert before start of this list\n+     * @param il\n+     *            list to insert before start of this list\n@@ -459,1 +482,2 @@\n-     * @param ih instruction to insert\n+     * @param ih\n+     *            instruction to insert\n@@ -478,4 +502,5 @@\n-     * @param i where to append the instruction list\n-     * @param il Instruction list to insert\n-     * @return instruction handle pointing to the first inserted instruction,\n-     * i.e., il.getStart()\n+     * @param i\n+     *            where to append the instruction list\n+     * @param il\n+     *            Instruction list to insert\n+     * @return instruction handle pointing to the first inserted instruction, i.e., il.getStart()\n@@ -494,1 +519,2 @@\n-     * @param i instruction to insert\n+     * @param i\n+     *            instruction to insert\n@@ -506,1 +532,2 @@\n-     * @param i branch instruction to insert\n+     * @param i\n+     *            branch instruction to insert\n@@ -519,2 +546,4 @@\n-     * @param i Instruction in list\n-     * @param j Instruction to insert before i in list\n+     * @param i\n+     *            Instruction in list\n+     * @param j\n+     *            Instruction to insert before i in list\n@@ -530,2 +559,4 @@\n-     * @param i Instruction in list\n-     * @param c The composite instruction (containing an InstructionList)\n+     * @param i\n+     *            Instruction in list\n+     * @param c\n+     *            The composite instruction (containing an InstructionList)\n@@ -541,1 +572,2 @@\n-     * @param c The composite instruction (containing an InstructionList)\n+     * @param c\n+     *            The composite instruction (containing an InstructionList)\n@@ -549,2 +581,1 @@\n-     * Insert an instruction before instruction (handle) ih contained in this\n-     * list.\n+     * Insert an instruction before instruction (handle) ih contained in this list.\n@@ -552,2 +583,4 @@\n-     * @param ih where to insert to the instruction list\n-     * @param i Instruction to insert\n+     * @param ih\n+     *            where to insert to the instruction list\n+     * @param i\n+     *            Instruction to insert\n@@ -563,2 +596,4 @@\n-     * @param ih where to insert the instruction list\n-     * @param c The composite instruction (containing an InstructionList)\n+     * @param ih\n+     *            where to insert the instruction list\n+     * @param c\n+     *            The composite instruction (containing an InstructionList)\n@@ -572,2 +607,1 @@\n-     * Insert an instruction before instruction (handle) ih contained in this\n-     * list.\n+     * Insert an instruction before instruction (handle) ih contained in this list.\n@@ -575,2 +609,4 @@\n-     * @param ih where to insert to the instruction list\n-     * @param i Instruction to insert\n+     * @param ih\n+     *            where to insert to the instruction list\n+     * @param i\n+     *            Instruction to insert\n@@ -590,2 +626,3 @@\n-     * and target must not be located withing this range. If you want to move\n-     * something to the start of the list use null as value for target.<br>\n+     * and target must not be located within this range. If you want to move\n+     * something to the start of the list use null as value for target.\n+     * <p>\n@@ -595,3 +632,6 @@\n-     * @param start of moved block\n-     * @param end of moved block\n-     * @param target of moved block\n+     * @param start\n+     *            of moved block\n+     * @param end\n+     *            of moved block\n+     * @param target\n+     *            of moved block\n@@ -651,2 +691,4 @@\n-     * @param ih moved instruction\n-     * @param target new location of moved instruction\n+     * @param ih\n+     *            moved instruction\n+     * @param target\n+     *            new location of moved instruction\n@@ -663,2 +705,4 @@\n-     * @param prev where to start deleting (predecessor, exclusive)\n-     * @param next where to end deleting (successor, exclusive)\n+     * @param prev\n+     *            where to start deleting (predecessor, exclusive)\n+     * @param next\n+     *            where to end deleting (successor, exclusive)\n@@ -719,1 +763,2 @@\n-     * @param ih instruction (handle) to remove\n+     * @param ih\n+     *            instruction (handle) to remove\n@@ -726,2 +771,1 @@\n-     * Remove instruction from this list. The corresponding Instruction handles\n-     * must not be reused!\n+     * Remove instruction from this list. The corresponding Instruction handles must not be reused!\n@@ -729,1 +773,2 @@\n-     * @param i instruction to remove\n+     * @param i\n+     *            instruction to remove\n@@ -745,2 +790,4 @@\n-     * @param from where to start deleting (inclusive)\n-     * @param to where to end deleting (inclusive)\n+     * @param from\n+     *            where to start deleting (inclusive)\n+     * @param to\n+     *            where to end deleting (inclusive)\n@@ -758,2 +805,4 @@\n-     * @param from where to start deleting (inclusive)\n-     * @param to where to end deleting (inclusive)\n+     * @param from\n+     *            where to start deleting (inclusive)\n+     * @param to\n+     *            where to end deleting (inclusive)\n@@ -776,1 +825,2 @@\n-     * @param i instruction to search for\n+     * @param i\n+     *            instruction to search for\n@@ -791,1 +841,2 @@\n-     * @param i instruction to search for\n+     * @param i\n+     *            instruction to search for\n@@ -827,2 +878,2 @@\n-     * @param check Perform sanity checks, e.g. if all targeted instructions\n-     * really belong to this list\n+     * @param check\n+     *            Perform sanity checks, e.g. if all targeted instructions really belong to this list\n@@ -885,1 +936,1 @@\n-                    break;\n+                break;\n@@ -889,1 +940,1 @@\n-                    break;\n+                break;\n@@ -912,6 +963,2 @@\n-        if (length == count) {\n-            byte_positions = pos;\n-        } else {\n-            byte_positions = new int[count]; \/\/ Trim to proper size\n-            System.arraycopy(pos, 0, byte_positions, 0, count);\n-        }\n+        byte_positions = new int[count]; \/\/ Trim to proper size\n+        System.arraycopy(pos, 0, byte_positions, 0, count);\n@@ -966,1 +1013,2 @@\n-     * @param verbose toggle output format\n+     * @param verbose\n+     *            toggle output format\n@@ -1148,2 +1196,4 @@\n-     * @param old_target the old target instruction handle\n-     * @param new_target the new target instruction handle\n+     * @param old_target\n+     *            the old target instruction handle\n+     * @param new_target\n+     *            the new target instruction handle\n@@ -1151,2 +1201,1 @@\n-    public void redirectBranches(final InstructionHandle old_target,\n-            final InstructionHandle new_target) {\n+    public void redirectBranches(final InstructionHandle old_target, final InstructionHandle new_target) {\n@@ -1176,3 +1225,6 @@\n-     * @param lg array of local variables\n-     * @param old_target the old target instruction handle\n-     * @param new_target the new target instruction handle\n+     * @param lg\n+     *            array of local variables\n+     * @param old_target\n+     *            the old target instruction handle\n+     * @param new_target\n+     *            the new target instruction handle\n@@ -1181,2 +1233,1 @@\n-    public void redirectLocalVariables(final LocalVariableGen[] lg,\n-            final InstructionHandle old_target, final InstructionHandle new_target) {\n+    public void redirectLocalVariables(final LocalVariableGen[] lg, final InstructionHandle old_target, final InstructionHandle new_target) {\n@@ -1196,2 +1247,1 @@\n-     * Redirect all references of exception handlers from old_target to\n-     * new_target.\n+     * Redirect all references of exception handlers from old_target to new_target.\n@@ -1199,3 +1249,6 @@\n-     * @param exceptions array of exception handlers\n-     * @param old_target the old target instruction handle\n-     * @param new_target the new target instruction handle\n+     * @param exceptions\n+     *            array of exception handlers\n+     * @param old_target\n+     *            the old target instruction handle\n+     * @param new_target\n+     *            the new target instruction handle\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/InstructionList.java","additions":171,"deletions":118,"binary":false,"changes":289,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/InstructionListObserver.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/InstructionTargeter.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n@@ -62,2 +61,13 @@\n-        return Const.getOpcodeName(super.getOpcode()) + \" \" + tok.nextToken().replace('.', '\/')\n-                + tok.nextToken();\n+\n+        final String opcodeName = Const.getOpcodeName(super.getOpcode());\n+\n+        final StringBuilder sb = new StringBuilder(opcodeName);\n+        if (tok.hasMoreTokens()) {\n+            sb.append(\" \");\n+            sb.append(tok.nextToken().replace('.', '\/'));\n+            if (tok.hasMoreTokens()) {\n+                sb.append(tok.nextToken());\n+            }\n+        }\n+\n+        return sb.toString();\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/InvokeInstruction.java","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/JSR.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/JSR_W.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/JsrInstruction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/L2D.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/L2F.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/L2I.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LADD.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LALOAD.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LAND.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LASTORE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LCMP.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LCONST.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LDC.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LDC2_W.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LDC_W.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LDIV.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LLOAD.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LMUL.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LNEG.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LOOKUPSWITCH.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LOR.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LREM.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LRETURN.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LSHL.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LSHR.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LSTORE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LSUB.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LUSHR.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LXOR.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LineNumberGen.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LoadClass.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LoadInstruction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * This class represents a local variable within a method. It contains its\n+ * Represents a local variable within a method. It contains its\n@@ -32,1 +32,0 @@\n- * @version $Id$\n@@ -73,1 +72,1 @@\n-     * Generate a local variable that with index `index'. Note that double and long\n+     * Generates a local variable that with index `index'. Note that double and long\n@@ -91,1 +90,1 @@\n-     * Get LocalVariable object.\n+     * Gets LocalVariable object.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LocalVariableGen.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LocalVariableInstruction.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/MONITORENTER.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/MONITOREXIT.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/MULTIANEWARRAY.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import java.util.Comparator;\n@@ -46,0 +45,1 @@\n+import java.util.Objects;\n@@ -58,1 +58,0 @@\n- * @version $Id$\n@@ -61,1 +60,1 @@\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n@@ -89,2 +88,2 @@\n-            return THIS.getName().equals(THAT.getName())\n-                    && THIS.getSignature().equals(THAT.getSignature());\n+            return Objects.equals(THIS.getName(), THAT.getName())\n+                    && Objects.equals(THIS.getSignature(), THAT.getSignature());\n@@ -360,6 +359,1 @@\n-            Arrays.sort(lg, new Comparator<LocalVariableGen>() {\n-                @Override\n-                public int compare(final LocalVariableGen o1, final LocalVariableGen o2) {\n-                    return o1.getIndex() - o2.getIndex();\n-                }\n-            });\n+            Arrays.sort(lg, (o1, o2) -> o1.getIndex() - o2.getIndex());\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/MethodGen.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/MethodObserver.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/NEW.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/NEWARRAY.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/NOP.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @version $Id: FieldOrMethod.java 1481383 2013-05-11 17:34:32Z dbrosius $\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/NameSignatureInstruction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/NamedAndTyped.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ObjectType.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/POP.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/POP2.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n@@ -179,1 +178,1 @@\n-    public final InstructionList getInstructionList() {\n+    public InstructionList getInstructionList() {\n@@ -184,1 +183,1 @@\n-    public final Instruction getInstruction() {\n+    public Instruction getInstruction() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/PUSH.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/PUTFIELD.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/PUTSTATIC.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/PopInstruction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/PushInstruction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/RET.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/RETURN.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ReferenceType.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ReturnInstruction.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ReturnaddressType.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/SALOAD.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/SASTORE.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/SIPUSH.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/SWAP.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- * @version $Id$\n@@ -109,1 +108,1 @@\n-        final int m = match[(l + r) \/ 2];\n+        final int m = match[(l + r) >>> 1];\n@@ -152,1 +151,1 @@\n-    public final InstructionList getInstructionList() {\n+    public InstructionList getInstructionList() {\n@@ -157,1 +156,1 @@\n-    public final Instruction getInstruction() {\n+    public Instruction getInstruction() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/SWITCH.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @version $Id$\n@@ -36,1 +35,1 @@\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n@@ -49,2 +48,2 @@\n-     * Empty constructor needed for the Class.newInstance() statement in\n-     * Instruction.readInstruction(). Not to be used otherwise.\n+     * Empty constructor needed for Instruction.readInstruction.\n+     * Not to be used otherwise.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/Select.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/StackConsumer.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/StackInstruction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/StackProducer.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/StoreInstruction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/TABLESWITCH.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/TargetLostException.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n@@ -210,3 +209,2 @@\n-            \/\/ Utility.signatureToString understands how to parse\n-            \/\/ generic types.\n-            final String parsedSignature = Utility.signatureToString(signature, false);\n+            \/\/ Utility.typeSignatureToString understands how to parse generic types.\n+            final String parsedSignature = Utility.typeSignatureToString(signature, false);\n@@ -245,2 +243,4 @@\n-        try { \/\/ Read all declarations between for `(' and `)'\n-            if (signature.charAt(0) != '(') {\n+        try {\n+            \/\/ Skip any type arguments to read argument declarations between `(' and `)'\n+            index = signature.indexOf('(') + 1;\n+            if (index <= 0) {\n@@ -249,1 +249,0 @@\n-            index = 1; \/\/ current string position\n@@ -347,2 +346,4 @@\n-        try { \/\/ Read all declarations between for `(' and `)'\n-            if (signature.charAt(0) != '(') {\n+        try {\n+            \/\/ Skip any type arguments to read argument declarations between `(' and `)'\n+            index = signature.indexOf('(') + 1;\n+            if (index <= 0) {\n@@ -351,1 +352,0 @@\n-            index = 1; \/\/ current string position\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/Type.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/TypedInstruction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/UnconditionalBranch.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/VariableLengthInstruction.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/Visitor.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n- * @version $Id$\n@@ -76,1 +75,1 @@\n-    final void close() {\n+    void close() {\n@@ -82,1 +81,1 @@\n-    final void writeAttribute( final Attribute attribute, final String anchor ) {\n+    void writeAttribute( final Attribute attribute, final String anchor ) {\n@@ -87,1 +86,1 @@\n-    final void writeAttribute( final Attribute attribute, final String anchor, final int method_number ) {\n+    void writeAttribute( final Attribute attribute, final String anchor, final int method_number ) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/AttributeHTML.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/BCELComparator.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,2 +67,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/BCELFactory.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n- * @version $Id$\n@@ -116,0 +115,2 @@\n+        _out.println(\"    _cg.setMajor(\" + clazz.getMajor() +\");\");\n+        _out.println(\"    _cg.setMinor(\" + clazz.getMinor() +\");\");\n@@ -219,1 +220,1 @@\n-        for (int i = 0, pow = 1; pow <= Const.MAX_ACC_FLAG; i++) {\n+        for (int i = 0, pow = 1; pow <= Const.MAX_ACC_FLAG_I; i++) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/BCELifier.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- * @version $Id$\n@@ -45,1 +44,1 @@\n-    public final int getIndex() {\n+    public int getIndex() {\n@@ -50,1 +49,1 @@\n-    final void unreadByte() {\n+    void unreadByte() {\n@@ -60,1 +59,1 @@\n-        final int getPosition() {\n+        int getPosition() {\n@@ -65,1 +64,1 @@\n-        final void unreadByte() {\n+        void unreadByte() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/ByteSequence.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,2 +56,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/Class2HTML.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/ClassQueue.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/ClassSet.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/ClassStack.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/CodeHTML.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/ConstantHTML.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,0 @@\n- * @version $Id$\n@@ -68,1 +67,1 @@\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/InstructionFinder.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n- * @version $Id$\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/MethodHTML.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -90,6 +90,4 @@\n-            if (classLoader != null) {\n-                classLoader.close();\n-            }\n-            if (fileSystem != null) {\n-                fileSystem.close();\n-            }\n+            classLoader.close();\n+        }\n+        if (fileSystem != null) {\n+            fileSystem.close();\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/ModularRuntimeImage.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n@@ -38,2 +37,1 @@\n-    void storeClass( JavaClass clazz );\n-\n+    void storeClass(JavaClass clazz);\n@@ -44,2 +42,1 @@\n-    void removeClass( JavaClass clazz );\n-\n+    void removeClass(JavaClass clazz);\n@@ -48,2 +45,1 @@\n-     * Finds the class with the name provided, if the class\n-     * isn't there, return NULL.\n+     * Finds the class with the name provided, if the class isn't there, return NULL.\n@@ -51,2 +47,1 @@\n-    JavaClass findClass( String className );\n-\n+    JavaClass findClass(String className);\n@@ -55,2 +50,1 @@\n-     * Finds the class with the name provided, if the class\n-     * isn't there, make an attempt to load it.\n+     * Finds the class with the name provided, if the class isn't there, make an attempt to load it.\n@@ -58,2 +52,1 @@\n-    JavaClass loadClass( String className ) throws java.lang.ClassNotFoundException;\n-\n+    JavaClass loadClass(String className) throws java.lang.ClassNotFoundException;\n@@ -64,2 +57,1 @@\n-    JavaClass loadClass( Class<?> clazz ) throws java.lang.ClassNotFoundException;\n-\n+    JavaClass loadClass(Class<?> clazz) throws java.lang.ClassNotFoundException;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/Repository.java","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,1 @@\n- * @version $Id$\n- * @LastModified: Jun 2019\n+ * @LastModified: Jan 2020\n@@ -82,1 +81,1 @@\n-}\n+        }\n@@ -98,1 +97,1 @@\n-        }\n+    }\n@@ -129,1 +128,1 @@\n-        }\n+    }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/SyntheticRepository.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-## Apache Commons Byte Code Engineering Library (BCEL) Version 6.3.1\n+## Apache Commons Byte Code Engineering Library (BCEL) Version 6.4.1\n","filename":"src\/java.xml\/share\/legal\/bcel.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}