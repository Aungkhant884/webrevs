{"files":[{"patch":"@@ -491,3 +491,3 @@\n-     Display information about the specified command. The slash must be included.\\n\\t\\\n-     Only the first few letters of the command are needed -- if more than one\\n\\t\\\n-     each will be displayed.  Example:  \/help \/li\\n\\n\\\n+     Display information about the specified command.\\n\\t\\\n+     Only the first few letters of the command are needed -- if there is more than\\n\\t\\\n+     one match, each will be displayed.  Example:  \/help \/li\\n\\n\\\n@@ -532,3 +532,3 @@\n-     Display information about the specified command. The slash must be included.\\n\\t\\\n-     Only the first few letters of the command are needed -- if more than one\\n\\t\\\n-     match, each will be displayed.  Example:  \/? \/li\\n\\\n+     Display information about the specified command.\\n\\t\\\n+     Only the first few letters of the command are needed -- if there is more than\\n\\t\\\n+     one match, each will be displayed.  Example:  \/? \/li\\n\\n\\\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/resources\/l10n.properties","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1109,1 +1109,1 @@\n-            } else if (r.getFileName().equals(\"<none>\")) {\n+            } else if (\"<none>\".equals(r.getFileName())) {\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/Eval.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,2 +27,7 @@\n- * @bug 8198801 8212167\n- * @build KullaTesting TestingInputStream\n+ * @bug 8198801 8212167 8210527\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jdeps\/com.sun.tools.javap\n+ * @library \/tools\/lib\n+ * @build toolbox.ToolBox toolbox.JarTask toolbox.JavacTask\n+ * @build KullaTesting TestingInputStream Compiler\n@@ -41,0 +46,3 @@\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n@@ -48,0 +56,3 @@\n+    private final Compiler compiler = new Compiler();\n+    private final Path outDir = Paths.get(\"test_class_path\");\n+\n@@ -210,0 +221,30 @@\n+    \/\/ test 8210527\n+    public void throwFromWithoutSource() {\n+        String message = \"show this\";\n+        SnippetEvent se = assertEvalException(\"java.lang.reflect.Proxy.newProxyInstance(\" +\n+                \"Thread.currentThread().getContextClassLoader(), new Class[] {},\" +\n+                \"(p, m, a) -> { throw new IllegalStateException(\\\"\" + message + \"\\\"); }).hashCode()\");\n+        assertExceptionMatch(se,\n+                new ExceptionInfo(IllegalStateException.class, message,\n+                        newStackTraceElement(\"\", \"lambda$do_it$$0\", se.snippet(), 1),\n+                        new StackTraceElement(\"com.sun.proxy.$Proxy0\", \"hashCode\", null, -1),\n+                        newStackTraceElement(\"\", \"\", se.snippet(), 1)));\n+    }\n+\n+    \/\/ test 8210527\n+    public void throwFromNoSource() {\n+        Path path = outDir.resolve(\"fail\");\n+        compiler.compile(path,\n+                \"package fail;\\n\" +\n+                        \"public class Fail {\\n\" +\n+                        \"  static { int x = 1 \/ 0; }\\n\" +\n+                        \"}\\n\");\n+        addToClasspath(compiler.getPath(path));\n+        SnippetEvent se = assertEvalException(\"Class.forName(\\\"fail.Fail\\\")\");\n+        assertExceptionMatch(se,\n+                new ExceptionInfo(ExceptionInInitializerError.class, null,\n+                        new StackTraceElement(\"java.lang.Class\", \"forName0\",  \"Class.java\", -2),\n+                        new StackTraceElement(\"java.lang.Class\", \"forName\", \"Class.java\", -2),\n+                        newStackTraceElement(\"\", \"\", se.snippet(), 1)));\n+    }\n+\n@@ -370,1 +411,1 @@\n-                    assertEquals(actualElement.getClassName(), expectedElement.getClassName(), message + \" : class names\");\n+                    assertEquals(actualElement.getClassName(), expectedElement.getClassName(), message + \" : class names [\" + i + \"]\");\n@@ -375,1 +416,7 @@\n-                        assertEquals(actualElement.getMethodName(), expectedElement.getMethodName(), message + \" : method names\");\n+                        assertEquals(actualElement.getMethodName(), expectedElement.getMethodName(), message + \" : method names [\" + i + \"]\");\n+                    }\n+                    assertEquals(actualElement.getFileName(), expectedElement.getFileName(), message + \" : file names [\" + i + \"]\");\n+                    if (expectedElement.getLineNumber() >= 0) {\n+                        assertEquals(actualElement.getLineNumber(), expectedElement.getLineNumber(), message + \" : line numbers [\" + i + \"]\"\n+                                + \" -- actual: \" + actualElement.getLineNumber() + \", expected: \" + expectedElement.getLineNumber() +\n+                                \" -- in: \" + actualElement.getClassName());\n@@ -377,4 +424,0 @@\n-                    assertEquals(actualElement.getFileName(), expectedElement.getFileName(), message + \" : file names\");\n-                    assertEquals(actualElement.getLineNumber(), expectedElement.getLineNumber(), message + \" : line numbers\"\n-                        + \" -- actual: \" + actualElement.getLineNumber() + \", expected: \" + expectedElement.getLineNumber() +\n-                            \" -- in: \" + actualElement.getClassName());\n","filename":"test\/langtools\/jdk\/jshell\/ExceptionsTest.java","additions":51,"deletions":8,"binary":false,"changes":59,"status":"modified"}]}