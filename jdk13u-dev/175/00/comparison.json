{"files":[{"patch":"@@ -101,0 +101,1 @@\n+          -ljava \\\n@@ -115,0 +116,2 @@\n+  $(BUILD_LIBOSXAPP): $(call FindLib, java.base, java)\n+\n","filename":"make\/lib\/Lib-java.desktop.gmk","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1293,0 +1293,1 @@\n+    CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/AWTView.m","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-#define GET_CPRINTERDIALOG_METHOD_RETURN(ret) \\\n+#define GET_CPRINTERDIALOG_FIELD_RETURN(ret) \\\n@@ -627,0 +627,1 @@\n+        CHECK_EXCEPTION();\n@@ -667,1 +668,1 @@\n-    GET_CPRINTERDIALOG_METHOD_RETURN(NO);\n+    GET_CPRINTERDIALOG_FIELD_RETURN(NO);\n@@ -672,0 +673,1 @@\n+    CHECK_EXCEPTION();\n@@ -716,1 +718,1 @@\n-    GET_CPRINTERDIALOG_METHOD_RETURN(NO);\n+    GET_CPRINTERDIALOG_FIELD_RETURN(NO);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CPrinterJob.m","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#import <JavaNativeFoundation\/JavaNativeFoundation.h>\n@@ -58,4 +59,5 @@\n-    return NSMakeRect((*env)->CallDoubleMethod(env, rect, jm_rect_getX),\n-                      (*env)->CallDoubleMethod(env, rect, jm_rect_getY),\n-                      (*env)->CallDoubleMethod(env, rect, jm_rect_getWidth),\n-                      (*env)->CallDoubleMethod(env, rect, jm_rect_getHeight));\n+    jdouble x = (*env)->CallDoubleMethod(env, rect, jm_rect_getX); CHECK_EXCEPTION();\n+    jdouble y = (*env)->CallDoubleMethod(env, rect, jm_rect_getY); CHECK_EXCEPTION();\n+    jdouble w = (*env)->CallDoubleMethod(env, rect, jm_rect_getWidth); CHECK_EXCEPTION();\n+    jdouble h = (*env)->CallDoubleMethod(env, rect, jm_rect_getHeight); CHECK_EXCEPTION();\n+    return NSMakeRect(x, y, w, h);\n@@ -76,3 +78,3 @@\n-\n-    return NSMakePoint((*env)->CallDoubleMethod(env, point, jm_pt_getX),\n-                       (*env)->CallDoubleMethod(env, point, jm_pt_getY));\n+    jdouble x = (*env)->CallDoubleMethod(env, point, jm_pt_getX); CHECK_EXCEPTION();\n+    jdouble y = (*env)->CallDoubleMethod(env, point, jm_pt_getY); CHECK_EXCEPTION();\n+    return NSMakePoint(x, y);\n@@ -93,3 +95,3 @@\n-\n-    return NSMakeSize((*env)->CallDoubleMethod(env, dimension, jm_sz_getWidth),\n-                      (*env)->CallDoubleMethod(env, dimension, jm_sz_getHeight));\n+    jdouble w = (*env)->CallDoubleMethod(env, dimension, jm_sz_getWidth); CHECK_EXCEPTION();\n+    jdouble h = (*env)->CallDoubleMethod(env, dimension, jm_sz_getHeight); CHECK_EXCEPTION();\n+    return NSMakeSize(w, h);\n@@ -101,0 +103,1 @@\n+    if (env != NULL) [JNFException raise:env as:kRuntimeException reason:\"Failed to convert, no screen.\"];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/GeomUtilities.m","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -626,0 +626,1 @@\n+            CHECK_EXCEPTION();\n@@ -914,0 +915,1 @@\n+        CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaComponentAccessibility.m","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -163,1 +163,0 @@\n-    CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaTextAccessibility.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -126,0 +126,1 @@\n+    CHECK_EXCEPTION();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/PrinterView.m","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+#import <Cocoa\/Cocoa.h>\n+\n@@ -37,0 +39,11 @@\n+       NSLog(@\"%@\",[NSThread callStackSymbols]); \\\n+       if ([NSThread isMainThread] == NO) { \\\n+           if ((*env)->ExceptionOccurred(env) == NULL) { \\\n+              JNU_ThrowInternalError(env, \"Bad JNI Lookup\"); \\\n+           } \\\n+       } else { \\\n+              if ((*env)->ExceptionOccurred(env) != NULL) { \\\n+                  (*env)->ExceptionDescribe(env); \\\n+           } \\\n+       } \\\n+       [NSException raise:NSGenericException format:@\"JNI Lookup Exception\"];  \\\n@@ -150,0 +163,23 @@\n+\/*\n+ * Some explanation to set context of the bigger picture.\n+ * Before returning to Java from JNI, NSExceptions are caught - so long as\n+ * the body of the native method is wrapped in the ENTER\/EXIT macros.\n+ * So if we want to directly return to Java from some nested Objective-C\n+ * function when detecting a Java exception, we just need to raise an\n+ * NSException. Then clear that right before returning to Java,\n+ * leaving the Java exception to be seen back in Java-land.\n+ *\n+ * But if the current thread is the Appkit thread we might as well clear\n+ * the Java Exception right now since there's nothing to receive it.\n+ * In such a case control will propagate back to the run loop which might\n+ * terminate the application. One drawback of that is that the location of\n+ * termination does not show where the NSException originated.\n+ * And for whatever reason, something swallows that exception.\n+ * So as a debugging aid, when on the AppKit thread we can provide a\n+ * way (via an env. var.) to log the location.\n+ * Additionally provide a similar way to prevent the NSException being\n+ * raised and instead just clear the Java Exception.\n+ * Together these provide alternate behaviours for more debugging info\n+ * or maybe a way for the app to continue running depending on the exact\n+ * nature of the problem that has been detected and how survivable it is.\n+ *\/\n@@ -152,1 +188,13 @@\n-        (*env)->ExceptionClear(env); \\\n+        if ([NSThread isMainThread] == YES) { \\\n+            if (getenv(\"JNU_APPKIT_TRACE\")) { \\\n+                (*env)->ExceptionDescribe(env); \\\n+                NSLog(@\"%@\",[NSThread callStackSymbols]); \\\n+              } else { \\\n+                  (*env)->ExceptionClear(env); \\\n+              } \\\n+         }  \\\n+        if (getenv(\"JNU_NO_COCOA_EXCEPTION\") == NULL) { \\\n+            [NSException raise:NSGenericException format:@\"Java Exception\"]; \\\n+        } else { \\\n+            (*env)->ExceptionClear(env); \\\n+        } \\\n","filename":"src\/java.desktop\/macosx\/native\/libosxapp\/JNIUtilities.h","additions":49,"deletions":1,"binary":false,"changes":50,"status":"modified"}]}