{"files":[{"patch":"@@ -922,1 +922,1 @@\n-            const Type* recv_type = arg_type->join_speculative(sig_type); \/\/ keep speculative part\n+            const Type* recv_type = arg_type->filter_speculative(sig_type); \/\/ keep speculative part\n@@ -935,1 +935,1 @@\n-              const Type* narrowed_arg_type = arg_type->join_speculative(sig_type); \/\/ keep speculative part\n+              const Type* narrowed_arg_type = arg_type->filter_speculative(sig_type); \/\/ keep speculative part\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8269285\n+ * @summary Crash\/miscompile in CallGenerator::for_method_handle_inline after JDK-8191998\n+ * @requires vm.compMode == \"Xmixed\" & vm.flavor == \"server\"\n+ *\n+ * @run main\/othervm\n+ *        -Xcomp -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,compiler.types.TestMethodHandleSpeculation::main\n+ *        compiler.types.TestMethodHandleSpeculation\n+ *\/\n+\n+package compiler.types;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.function.Supplier;\n+\n+public class TestMethodHandleSpeculation {\n+\n+    public static void main(String... args) {\n+        byte[] serObj = {1};\n+        MyClass<byte[]> obj = new MyClass<>();\n+        for (int i = 0; i < 100_000; i++) {\n+            boolean test = obj.test(serObj);\n+            if (test) {\n+                throw new IllegalStateException(\"Cannot be null\");\n+            }\n+        }\n+    }\n+\n+    static class MyClass<V extends Serializable> {\n+        boolean test(V obj) {\n+            Supplier<Boolean> supp = () -> (obj == null);\n+            return supp.get();\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/types\/TestMethodHandleSpeculation.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}