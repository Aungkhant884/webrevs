{"files":[{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -896,2 +897,1 @@\n-  NetworkPerformance(const NetworkPerformance& rhs); \/\/ no impl\n-  NetworkPerformance& operator=(const NetworkPerformance& rhs); \/\/ no impl\n+  NONCOPYABLE(NetworkPerformance);\n","filename":"src\/hotspot\/os\/aix\/os_perf_aix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -75,2 +76,2 @@\n-  CPUPerformance(const CPUPerformance& rhs); \/\/ no impl\n-  CPUPerformance& operator=(const CPUPerformance& rhs); \/\/ no impl\n+  NONCOPYABLE(CPUPerformance);\n+\n@@ -267,2 +268,1 @@\n-  SystemProcesses(const SystemProcesses& rhs); \/\/ no impl\n-  SystemProcesses& operator=(const SystemProcesses& rhs); \/\/ no impl\n+  NONCOPYABLE(SystemProcesses);\n@@ -415,2 +415,1 @@\n-  NetworkPerformance(const NetworkPerformance& rhs); \/\/ no impl\n-  NetworkPerformance& operator=(const NetworkPerformance& rhs); \/\/ no impl\n+  NONCOPYABLE(NetworkPerformance);\n","filename":"src\/hotspot\/os\/bsd\/os_perf_bsd.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n@@ -40,3 +42,1 @@\n-  \/\/ Prevent copying and assignment.\n-  OSXSemaphore(const OSXSemaphore&);\n-  OSXSemaphore& operator=(const OSXSemaphore&);\n+  NONCOPYABLE(OSXSemaphore);\n","filename":"src\/hotspot\/os\/bsd\/semaphore_bsd.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -960,2 +961,1 @@\n-  NetworkPerformance(const NetworkPerformance& rhs); \/\/ no impl\n-  NetworkPerformance& operator=(const NetworkPerformance& rhs); \/\/ no impl\n+  NONCOPYABLE(NetworkPerformance);\n","filename":"src\/hotspot\/os\/linux\/os_perf_linux.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -33,3 +34,1 @@\n-  \/\/ Prevent copying and assignment of LinuxWaitBarrier instances.\n-  LinuxWaitBarrier(const LinuxWaitBarrier&);\n-  LinuxWaitBarrier& operator=(const LinuxWaitBarrier&);\n+  NONCOPYABLE(LinuxWaitBarrier);\n","filename":"src\/hotspot\/os\/linux\/waitBarrier_linux.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -289,0 +289,3 @@\n+ private:\n+  NONCOPYABLE(PlatformMonitor);\n+\n","filename":"src\/hotspot\/os\/posix\/os_posix.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -35,3 +36,1 @@\n-  \/\/ Prevent copying and assignment.\n-  PosixSemaphore(const PosixSemaphore&);\n-  PosixSemaphore& operator=(const PosixSemaphore&);\n+  NONCOPYABLE(PosixSemaphore);\n","filename":"src\/hotspot\/os\/posix\/semaphore_posix.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -748,2 +749,1 @@\n-  NetworkPerformance(const NetworkPerformance& rhs); \/\/ no impl\n-  NetworkPerformance& operator=(const NetworkPerformance& rhs); \/\/ no impl\n+  NONCOPYABLE(NetworkPerformance);\n","filename":"src\/hotspot\/os\/solaris\/os_perf_solaris.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -344,0 +344,2 @@\n+  NONCOPYABLE(PlatformMonitor);\n+\n","filename":"src\/hotspot\/os\/solaris\/os_solaris.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -1372,2 +1373,1 @@\n-  NetworkPerformance(const NetworkPerformance& rhs); \/\/ no impl\n-  NetworkPerformance& operator=(const NetworkPerformance& rhs); \/\/ no impl\n+  NONCOPYABLE(NetworkPerformance);\n","filename":"src\/hotspot\/os\/windows\/os_perf_windows.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -197,0 +197,2 @@\n+  NONCOPYABLE(PlatformMonitor);\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -35,3 +36,1 @@\n-  \/\/ Prevent copying and assignment.\n-  WindowsSemaphore(const WindowsSemaphore&);\n-  WindowsSemaphore& operator=(const WindowsSemaphore&);\n+  NONCOPYABLE(WindowsSemaphore);\n","filename":"src\/hotspot\/os\/windows\/semaphore_windows.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -48,3 +48,1 @@\n-  \/\/ Noncopyable.\n-  G1FreeIdSet(const G1FreeIdSet&);\n-  G1FreeIdSet& operator=(const G1FreeIdSet&);\n+  NONCOPYABLE(G1FreeIdSet);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FreeIdSet.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,3 +40,1 @@\n-  \/\/ Noncopyable\n-  G1SharedDirtyCardQueue(const G1SharedDirtyCardQueue&);\n-  G1SharedDirtyCardQueue& operator=(const G1SharedDirtyCardQueue&);\n+  NONCOPYABLE(G1SharedDirtyCardQueue);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SharedDirtyCardQueue.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -199,3 +199,1 @@\n-    \/\/ Noncopyable.\n-    AllocationList(const AllocationList&);\n-    AllocationList& operator=(const AllocationList&);\n+    NONCOPYABLE(AllocationList);\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,3 +51,1 @@\n-  \/\/ Noncopyable\n-  ActiveArray(const ActiveArray&);\n-  ActiveArray& operator=(const ActiveArray&);\n+  NONCOPYABLE(ActiveArray);\n@@ -121,3 +119,1 @@\n-  \/\/ Noncopyable.\n-  AllocationListEntry(const AllocationListEntry&);\n-  AllocationListEntry& operator=(const AllocationListEntry&);\n+  NONCOPYABLE(AllocationListEntry);\n@@ -156,3 +152,1 @@\n-  \/\/ Noncopyable.\n-  Block(const Block&);\n-  Block& operator=(const Block&);\n+  NONCOPYABLE(Block);\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.inline.hpp","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"utilities\/macros.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -137,3 +137,1 @@\n-  \/\/ Noncopyable.\n-  BasicParState(const BasicParState&);\n-  BasicParState& operator=(const BasicParState&);\n+  NONCOPYABLE(BasicParState);\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorageParState.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -47,3 +48,1 @@\n-  \/\/ Noncopyable - not defined.\n-  PtrQueue(const PtrQueue&);\n-  PtrQueue& operator=(const PtrQueue&);\n+  NONCOPYABLE(PtrQueue);\n@@ -208,0 +207,2 @@\n+  NONCOPYABLE(BufferNode);\n+\n@@ -277,0 +278,2 @@\n+  NONCOPYABLE(Allocator);\n+\n@@ -312,0 +315,2 @@\n+  NONCOPYABLE(PtrQueueSet);\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/ptrQueue.hpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -517,3 +518,2 @@\n-  \/\/ Noncopyable.\n-  TaskTerminator(const TaskTerminator&);\n-  TaskTerminator& operator=(const TaskTerminator&);\n+  NONCOPYABLE(TaskTerminator);\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -55,4 +56,2 @@\n-private:\n-  \/\/ Noncopyable.\n-  ShenandoahParallelCodeCacheIterator(const ShenandoahParallelCodeCacheIterator& o);\n-  ShenandoahParallelCodeCacheIterator& operator=(const ShenandoahParallelCodeCacheIterator& o);\n+  NONCOPYABLE(ShenandoahParallelCodeCacheIterator);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCodeRoots.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -70,2 +71,1 @@\n-  ShenandoahRegionIterator(const ShenandoahRegionIterator& that);\n-  ShenandoahRegionIterator& operator=(const ShenandoahRegionIterator& o);\n+  NONCOPYABLE(ShenandoahRegionIterator);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2013, 2019, Red Hat, Inc. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -43,2 +44,1 @@\n-  ShenandoahHeapRegionSetIterator(const ShenandoahHeapRegionSetIterator& that);\n-  ShenandoahHeapRegionSetIterator& operator=(const ShenandoahHeapRegionSetIterator& o);\n+  NONCOPYABLE(ShenandoahHeapRegionSetIterator);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionSet.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -38,3 +39,1 @@\n-  \/\/ Copy and assignment are not allowed\n-  ZArray(const ZArray<T>& array);\n-  ZArray<T>& operator=(const ZArray<T>& array);\n+  NONCOPYABLE(ZArray);\n","filename":"src\/hotspot\/share\/gc\/z\/zArray.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -71,3 +72,1 @@\n-  \/\/ Passing by value and assignment is not allowed\n-  ZList(const ZList<T>& list);\n-  ZList<T>& operator=(const ZList<T>& list);\n+  NONCOPYABLE(ZList);\n","filename":"src\/hotspot\/share\/gc\/z\/zList.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -89,2 +90,1 @@\n-    Parameters(const Parameters&); \/\/ no impl\n-    Parameters& operator=(const Parameters&); \/\/ no impl\n+    NONCOPYABLE(Parameters);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaCall.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -107,3 +108,2 @@\n-    \/\/ Noncopyable.\n-    Ref(const Ref&);\n-    Ref& operator=(const Ref&);\n+    NONCOPYABLE(Ref);\n+\n","filename":"src\/hotspot\/share\/memory\/metaspaceClosure.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -52,3 +53,1 @@\n-  \/\/ Turn off copy constructor and assignment operator.\n-  Array(const Array<T>&);\n-  void operator=(const Array<T>&);\n+  NONCOPYABLE(Array);\n","filename":"src\/hotspot\/share\/oops\/array.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -193,3 +194,2 @@\n-  NetworkInterface(); \/\/ no impl\n-  NetworkInterface(const NetworkInterface& rhs); \/\/ no impl\n-  NetworkInterface& operator=(const NetworkInterface& rhs); \/\/ no impl\n+  NONCOPYABLE(NetworkInterface);\n+\n@@ -271,2 +271,2 @@\n-  NetworkPerformanceInterface(const NetworkPerformanceInterface& rhs); \/\/ no impl\n-  NetworkPerformanceInterface& operator=(const NetworkPerformanceInterface& rhs); \/\/ no impl\n+  NONCOPYABLE(NetworkPerformanceInterface);\n+\n","filename":"src\/hotspot\/share\/runtime\/os_perf.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -46,3 +47,1 @@\n-  \/\/ Prevent copying and assignment of Semaphore instances.\n-  Semaphore(const Semaphore&);\n-  Semaphore& operator=(const Semaphore&);\n+  NONCOPYABLE(Semaphore);\n","filename":"src\/hotspot\/share\/runtime\/semaphore.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -873,3 +874,1 @@\n-  \/\/ Noncopyable.\n-  Iterator(const Iterator&);\n-  Iterator& operator=(const Iterator&);\n+  NONCOPYABLE(Iterator);\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -360,3 +361,1 @@\n-  \/\/ Don't allow copy or assignment.\n-  ArenaBitMap(const ArenaBitMap&);\n-  ArenaBitMap& operator=(const ArenaBitMap&);\n+  NONCOPYABLE(ArenaBitMap);\n@@ -371,2 +370,1 @@\n-  CHeapBitMap(const CHeapBitMap&);\n-  CHeapBitMap& operator=(const CHeapBitMap&);\n+  NONCOPYABLE(CHeapBitMap);\n","filename":"src\/hotspot\/share\/utilities\/bitMap.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -69,0 +69,13 @@\n+\/\/ Declare the named class to be noncopyable.  This macro must be used in\n+\/\/ a private part of the class's definition, followed by a semi-colon.\n+\/\/ Doing so provides private declarations for the class's copy constructor\n+\/\/ and assignment operator.  Because these operations are private, most\n+\/\/ potential callers will fail to compile because they are inaccessible.\n+\/\/ The operations intentionally lack a definition, to provoke link-time\n+\/\/ failures for calls from contexts where they are accessible, e.g. from\n+\/\/ within the class or from a friend of the class.\n+\/\/ Note: The lack of definitions is still not completely bullet-proof, as\n+\/\/ an apparent call might be optimized away by copy elision.\n+\/\/ For C++11 the declarations should be changed to deleted definitions.\n+#define NONCOPYABLE(C) C(C const&); C& operator=(C const&) \/* next token must be ; *\/\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"utilities\/macros.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -72,3 +72,1 @@\n-  \/\/ Noncopyable.\n-  LockFreeStack(const LockFreeStack&);\n-  LockFreeStack& operator=(const LockFreeStack&);\n+  NONCOPYABLE(LockFreeStack);\n","filename":"src\/hotspot\/share\/utilities\/lockFreeStack.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,2 +46,1 @@\n-   outputStream(const outputStream&);\n-   outputStream& operator=(const outputStream&);\n+   NONCOPYABLE(outputStream);\n","filename":"src\/hotspot\/share\/utilities\/ostream.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,3 +58,1 @@\n-  \/\/ Noncopyable.\n-  SingleWriterSynchronizer(const SingleWriterSynchronizer&);\n-  SingleWriterSynchronizer& operator=(const SingleWriterSynchronizer&);\n+  NONCOPYABLE(SingleWriterSynchronizer);\n","filename":"src\/hotspot\/share\/utilities\/singleWriterSynchronizer.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -84,3 +85,1 @@\n-  \/\/ Prevent copying and assignment of WaitBarrier instances.\n-  WaitBarrierType(const WaitBarrierDefault&);\n-  WaitBarrierType& operator=(const WaitBarrierDefault&);\n+  NONCOPYABLE(WaitBarrierType);\n","filename":"src\/hotspot\/share\/utilities\/waitBarrier.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -42,3 +43,1 @@\n-  \/\/ Prevent copying and assignment of GenericWaitBarrier instances.\n-  GenericWaitBarrier(const GenericWaitBarrier&);\n-  GenericWaitBarrier& operator=(const GenericWaitBarrier&);\n+  NONCOPYABLE(GenericWaitBarrier);\n","filename":"src\/hotspot\/share\/utilities\/waitBarrier_generic.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}