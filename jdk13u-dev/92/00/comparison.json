{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -129,3 +129,0 @@\n-        if (attr.reason != null) {\n-            report(attr.reason);\n-        }\n@@ -143,1 +140,5 @@\n-        println(\"length = 0x\" + toHex(attr.info.length));\n+        print(\"length = 0x\" + toHex(attr.info.length));\n+        if (attr.reason != null) {\n+            print(\" (\" + attr.reason + \")\");\n+        }\n+        println();\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/AttributeWriter.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8234687\n+ * @summary change javap reporting on unknown attributes\n+ * @modules jdk.jdeps\/com.sun.tools.javap\n+ * @run main BadAttributeName\n+ *\/\n+\n+\n+import java.io.*;\n+import java.nio.file.*;\n+\n+public class BadAttributeName {\n+\n+    public static String source = \"public class Test {\\n\" +\n+                                  \"    public static void main(String[] args) {}\\n\" +\n+                                  \"}\";\n+\n+    public static void main(String[] args) throws Exception {\n+        final File srcFile = new File(\"Test.java\");\n+        Files.writeString(Path.of(\"Test.java\"), source);\n+\n+        final String[] javacOpts = {\"Test.java\"};\n+\n+        if (com.sun.tools.javac.Main.compile(javacOpts) != 0) {\n+            throw new Exception(\"Can't compile embedded test.\");\n+        }\n+\n+        RandomAccessFile raf = new RandomAccessFile(\"Test.class\", \"rw\");\n+        String sourceFile = \"SourceFile\";\n+        long namePos = getConstantPoolUTF8Pos(raf, sourceFile);\n+        if (namePos < 0) {\n+            throw new Exception(\"The class file contains no SourceFile attribute.\");\n+        }\n+\n+        raf.seek(namePos); \/\/ Jump to the SourceFile name\n+        \/\/ Create a \"custom\" attribute by reusing\/renaming an unimportant existing one\n+        String customAttr = \"CustomAttribute\".substring(0, sourceFile.length());\n+        raf.writeUTF(customAttr);\n+        raf.close();\n+\n+        String[] opts = { \"-v\", \"Test.class\" };\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pout = new PrintWriter(sw);\n+\n+        com.sun.tools.javap.Main.run(opts, pout);\n+        pout.flush();\n+\n+        String expect = customAttr + \": length = 0x2 (unknown attribute)\";\n+        if (sw.toString().indexOf(expect) == -1) {\n+            sw.toString().lines().forEach(System.out::println);\n+            throw new Exception(\"expected text not found: \" + expect);\n+        }\n+    }\n+\n+    private static long getConstantPoolUTF8Pos(RandomAccessFile cfile, String name) throws Exception {\n+        cfile.seek(0);\n+        int v1, v2;\n+        v1 = cfile.readInt();\n+        \/\/ System.out.println(\"Magic: \" + String.format(\"%X\", v1));\n+\n+        v1 = cfile.readUnsignedShort();\n+        v2 = cfile.readUnsignedShort();\n+        \/\/ System.out.println(\"Version: \" + String.format(\"%d.%d\", v1, v2));\n+\n+        v1 = cfile.readUnsignedShort();\n+        \/\/ System.out.println(\"CPool size: \" + v1);\n+        \/\/ Exhaust the constant pool\n+        for (; v1 > 1; v1--) {\n+            \/\/ System.out.print(\".\");\n+            byte tag = cfile.readByte();\n+            switch (tag) {\n+                case 7  : \/\/ Class\n+                case 8  : \/\/ String\n+                    \/\/ Data is 2 bytes long\n+                    cfile.skipBytes(2);\n+                    break;\n+                case 3  : \/\/ Integer\n+                case 4  : \/\/ Float\n+                case 9  : \/\/ FieldRef\n+                case 10 : \/\/ MethodRef\n+                case 11 : \/\/ InterfaceMethodRef\n+                case 12 : \/\/ Name and Type\n+                    \/\/ Data is 4 bytes long\n+                    cfile.skipBytes(4);\n+                    break;\n+                case 5  : \/\/ Long\n+                case 6  : \/\/ Double\n+                    \/\/ Data is 8 bytes long\n+                    cfile.skipBytes(8);\n+                    break;\n+                case 1  : \/\/ Utf8\n+                    long fp = cfile.getFilePointer();\n+                    String s = cfile.readUTF();\n+                    if (s.equals(name)) {\n+                        return fp;\n+                    }\n+                    break;\n+                default :\n+                    throw new Exception(\"Unexpected tag in CPool: [\" + tag + \"] at \"\n+                            + Long.toHexString(cfile.getFilePointer()));\n+            }\n+        }\n+        \/\/ System.out.println();\n+\n+        \/\/ Bummer! Name not found!\n+        return -1L;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javap\/BadAttributeName.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"}]}