{"files":[{"patch":"@@ -384,1 +384,3 @@\n-                    \/\/ If we are keeping state, see if the identity is in the cache\n+                    \/\/ If we are keeping state, see if the identity is in the\n+                    \/\/ cache. Note that for TLS 1.3, we would also clean\n+                    \/\/ up the cached session if it is not rejoinable.\n@@ -386,1 +388,1 @@\n-                        s = sessionCache.get(requestedId.identity);\n+                        s = sessionCache.pull(requestedId.identity);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/PreSharedKeyExtension.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -178,0 +178,9 @@\n+    \/\/ package-private method, find and remove session from cache\n+    \/\/ return found session\n+    SSLSessionImpl pull(byte[] id) {\n+        if (id != null) {\n+            return sessionCache.pull(new SessionId(id));\n+        }\n+        return null;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSessionContextImpl.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -563,3 +563,0 @@\n-\n-                \/\/ The session can't be resumed again---remove it from cache\n-                sessionCache.remove(shc.resumingSession.getSessionId());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ServerHello.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -103,0 +103,5 @@\n+    \/**\n+     * Pull an entry from the cache.\n+     *\/\n+    public abstract V pull(Object key);\n+\n@@ -227,0 +232,4 @@\n+    public V pull(Object key) {\n+        return null;\n+    }\n+\n@@ -405,0 +414,20 @@\n+    public synchronized V pull(Object key) {\n+        emptyQueue();\n+        CacheEntry<K,V> entry = cacheMap.remove(key);\n+        if (entry == null) {\n+            return null;\n+        }\n+\n+        long time = (lifetime == 0) ? 0 : System.currentTimeMillis();\n+        if (entry.isValid(time)) {\n+            V value = entry.getValue();\n+            entry.invalidate();\n+            return value;\n+        } else {\n+            if (DEBUG) {\n+                System.out.println(\"Ignoring expired entry\");\n+            }\n+            return null;\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Cache.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"}]}