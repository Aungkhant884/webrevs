{"files":[{"patch":"@@ -25,0 +25,1 @@\n+JVM_IsUseContainerSupport\n","filename":"make\/hotspot\/symbols\/symbols-linux","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -161,0 +161,3 @@\n+JNIEXPORT jboolean JNICALL\n+JVM_IsUseContainerSupport(void);\n+\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -530,1 +530,9 @@\n-\n+JVM_ENTRY_NO_ENV(jboolean, JVM_IsUseContainerSupport(void))\n+  JVMWrapper(\"JVM_IsUseContainerSupport\");\n+#ifdef LINUX\n+  if (UseContainerSupport) {\n+    return JNI_TRUE;\n+  }\n+#endif\n+  return JNI_FALSE;\n+JVM_END\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -63,0 +63,3 @@\n+        if (!isUseContainerSupport()) {\n+            return null;\n+        }\n@@ -519,0 +522,2 @@\n+    private static native boolean isUseContainerSupport();\n+\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv1\/Metrics.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2020, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"jni.h\"\n+#include \"jvm.h\"\n+\n+#include \"jdk_internal_platform_cgroupv1_Metrics.h\"\n+\n+JNIEXPORT jboolean JNICALL\n+Java_jdk_internal_platform_cgroupv1_Metrics_isUseContainerSupport(JNIEnv *env, jclass ignored)\n+{\n+    return JVM_IsUseContainerSupport();\n+}\n","filename":"src\/java.base\/linux\/native\/libjava\/Metrics.c","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2020, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.internal.platform.Metrics;\n+\n+public class CheckUseContainerSupport {\n+\n+    \/\/ Usage: boolean value of -XX:+\/-UseContainerSupport\n+    \/\/        passed as the only argument\n+    public static void main(String[] args) throws Exception {\n+        if (args.length != 1) {\n+            throw new RuntimeException(\"Expected only one boolean argument\");\n+        }\n+        boolean expectedContainerSupport = Boolean.parseBoolean(args[0]);\n+        boolean actualContainerSupport = (Metrics.systemMetrics() != null);\n+        if (expectedContainerSupport != actualContainerSupport) {\n+            String msg = \"-XX:\" + ( expectedContainerSupport ? \"+\" : \"-\") + \"UseContainerSupport, but got \" +\n+                         \"Metrics.systemMetrics() == \" + (Metrics.systemMetrics() == null ? \"null\" : \"non-null\");\n+            System.out.println(msg);\n+            System.out.println(\"TEST FAILED!!!\");\n+            return;\n+        }\n+        System.out.println(\"TEST PASSED!!!\");\n+    }\n+\n+}\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/CheckUseContainerSupport.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2020, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary UseContainerSupport flag should reflect Metrics being available\n+ * @requires docker.support\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.platform\n+ * @build CheckUseContainerSupport\n+ * @run main\/timeout=360 TestUseContainerSupport\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerRunOptions;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+\n+public class TestUseContainerSupport {\n+    private static final String imageName = Common.imageName(\"useContainerSupport\");\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!DockerTestUtils.canTestDocker()) {\n+            return;\n+        }\n+\n+        DockerTestUtils.buildJdkDockerImage(imageName, \"Dockerfile-BasicTest\", \"jdk-docker\");\n+\n+        try {\n+            testUseContainerSupport(true);\n+            testUseContainerSupport(false);\n+        } finally {\n+            DockerTestUtils.removeDockerImage(imageName);\n+        }\n+    }\n+\n+    private static void testUseContainerSupport(boolean useContainerSupport) throws Exception {\n+        String testMsg = \" with -XX:\" + (useContainerSupport ? \"+\" : \"-\") + \"UseContainerSupport\";\n+        Common.logNewTestCase(\"Test TestUseContainerSupport\" + testMsg);\n+        DockerRunOptions opts =\n+                new DockerRunOptions(imageName, \"\/jdk\/bin\/java\", \"CheckUseContainerSupport\");\n+        opts.addClassOptions(Boolean.valueOf(useContainerSupport).toString());\n+        opts.addDockerOpts(\"--memory\", \"200m\")\n+            .addDockerOpts(\"--volume\", Utils.TEST_CLASSES + \":\/test-classes\/\");\n+        if (useContainerSupport) {\n+            opts.addJavaOpts(\"-XX:+UseContainerSupport\");\n+        } else {\n+            opts.addJavaOpts(\"-XX:-UseContainerSupport\");\n+        }\n+        opts.addJavaOpts(\"-cp\", \"\/test-classes\/\");\n+        opts.addJavaOpts(\"--add-exports\", \"java.base\/jdk.internal.platform=ALL-UNNAMED\");\n+        DockerTestUtils.dockerRunJava(opts).shouldHaveExitValue(0).shouldContain(\"TEST PASSED!!!\");\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestUseContainerSupport.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}