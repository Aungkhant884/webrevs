{"files":[{"patch":"@@ -110,0 +110,1 @@\n+import sun.awt.dnd.SunDragSourceContextPeer;\n@@ -466,0 +467,7 @@\n+        if (SunDragSourceContextPeer.isDragDropInProgress()\n+                || EventQueue.isDispatchThread()) {\n+            \/\/ The java code started the DnD, but the native drag may still not\n+            \/\/ start, the last attempt to flush the native events,\n+            \/\/ also do not block EDT for a long time\n+            timeout = 50;\n+        }\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/LWCToolkit.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#import \"LWCToolkit.h\"\n@@ -514,2 +515,0 @@\n-    sNeedsEnter = YES;\n-\n@@ -517,0 +516,2 @@\n+        sNeedsEnter = YES;\n+        AWTToolkit.inDoDragDropLoop = YES;\n@@ -564,0 +565,1 @@\n+        AWTToolkit.inDoDragDropLoop = NO;\n@@ -610,1 +612,1 @@\n-\n+    [AWTToolkit eventCountPlusPlus];\n@@ -618,1 +620,1 @@\n-\n+    [AWTToolkit eventCountPlusPlus];\n@@ -628,0 +630,1 @@\n+    [AWTToolkit eventCountPlusPlus];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CDragSource.m","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n++ (BOOL) inDoDragDropLoop;\n++ (void) setInDoDragDropLoop:(BOOL)val;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/LWCToolkit.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,0 +73,13 @@\n+static BOOL inDoDragDropLoop;\n+\n++ (BOOL) inDoDragDropLoop {\n+  @synchronized(self) {\n+    return inDoDragDropLoop;\n+  }\n+}\n+\n++ (void) setInDoDragDropLoop:(BOOL)val {\n+  @synchronized(self) {\n+    inDoDragDropLoop = val;\n+  }\n+}\n@@ -75,0 +88,1 @@\n+  @synchronized(self) {\n@@ -76,0 +90,1 @@\n+  }\n@@ -79,0 +94,1 @@\n+  @synchronized(self) {\n@@ -80,0 +96,1 @@\n+  }\n@@ -423,4 +440,10 @@\n-        [theApp postDummyEvent:false];\n-        [theApp waitForDummyEvent:timeout \/ 2.0];\n-        [theApp postDummyEvent:true];\n-        [theApp waitForDummyEvent:timeout \/ 2.0];\n+\n+        \/\/ If the native drag is in progress, skip native sync.\n+        if (!AWTToolkit.inDoDragDropLoop) {\n+            [theApp postDummyEvent:false];\n+            [theApp waitForDummyEvent:timeout \/ 2.0];\n+        }\n+        if (!AWTToolkit.inDoDragDropLoop) {\n+            [theApp postDummyEvent:true];\n+            [theApp waitForDummyEvent:timeout \/ 2.0];\n+        }\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/LWCToolkit.m","additions":28,"deletions":5,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,2 +77,2 @@\n-    private static boolean    dragDropInProgress = false;\n-    private static boolean    discardingMouseEvents = false;\n+    private static volatile boolean dragDropInProgress = false;\n+    private static boolean discardingMouseEvents = false;\n@@ -384,0 +384,4 @@\n+    public static boolean isDragDropInProgress() {\n+        return dragDropInProgress;\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/dnd\/SunDragSourceContextPeer.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.dnd.*;\n+import java.awt.event.InputEvent;\n+\n+import test.java.awt.regtesthelpers.Util;\n+\n+\/**\n+ * @test\n+ * @key headful\n+ * @bug 7185258\n+ * @summary Robot.waitForIdle() should not hang forever if dnd is in progress\n+ * @library ..\/..\/regtesthelpers\n+ * @build Util\n+ * @run main\/othervm DragWaitForIdle\n+ *\/\n+public final class DragWaitForIdle {\n+\n+    public static void main(final String[] args) throws Exception {\n+        Frame frame = new Frame();\n+        Robot robot = new Robot();\n+        robot.setAutoWaitForIdle(true); \/\/ key point of the test\n+\n+        DragGestureListener dragGestureListener = dge -> {\n+            dge.startDrag(null, new StringSelection(\"OK\"), new DragSourceAdapter(){});\n+        };\n+\n+        new DragSource().createDefaultDragGestureRecognizer(frame,\n+                DnDConstants.ACTION_MOVE, dragGestureListener);\n+\n+        new DropTarget(frame, new DropTargetAdapter() {\n+            public void drop(DropTargetDropEvent dtde) {\n+                dtde.acceptDrop(DnDConstants.ACTION_MOVE);\n+                dtde.dropComplete(true);\n+            }\n+        });\n+\n+        try {\n+            frame.setUndecorated(true);\n+            frame.setBounds(100, 100, 200, 200);\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n+            robot.waitForIdle();\n+            frame.toFront();\n+\n+            Point startPoint = frame.getLocationOnScreen();\n+            Point endPoint = new Point(startPoint);\n+            startPoint.translate(50, 50);\n+            endPoint.translate(150, 150);\n+\n+            Util.drag(robot, startPoint, endPoint, InputEvent.BUTTON2_MASK);\n+\n+            robot.delay(500);\n+        } finally {\n+            frame.dispose();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DragWaitForIdle\/DragWaitForIdle.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}