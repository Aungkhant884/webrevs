{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-\n+import java.util.Objects;\n@@ -90,4 +90,2 @@\n-        if ((off < 0) || (off > bs.length) || (len < 0) ||\n-            ((off + len) > bs.length) || ((off + len) < 0)) {\n-            throw new IndexOutOfBoundsException();\n-        } else if (len == 0)\n+        Objects.checkFromIndexSize(off, len, bs.length);\n+        if (len == 0)\n@@ -122,0 +120,20 @@\n+    public synchronized long skip(long n) throws IOException {\n+        \/\/ special case where the channel is to a file\n+        if (ch instanceof SeekableByteChannel && n > 0) {\n+            SeekableByteChannel sbc = (SeekableByteChannel)ch;\n+            try {\n+                long pos = sbc.position();\n+                long size = sbc.size();\n+                if (pos >= size) {\n+                   return 0L;\n+                }\n+                n = Math.min(n, size - pos);\n+                sbc.position(pos + n);\n+                return sbc.position() - pos;\n+            } catch (ClosedChannelException cce) {\n+                throw new IOException(cce);\n+            }\n+        }\n+        return super.skip(n);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ChannelInputStream.java","additions":24,"deletions":6,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @bug 4313887 6838333 8005566 8032220 8215467\n+ * @bug 4313887 6838333 8005566 8032220 8215467 8227080\n@@ -30,0 +30,3 @@\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.channels.ClosedChannelException;\n@@ -47,0 +50,1 @@\n+            testSkip(dir);\n@@ -375,0 +379,32 @@\n+    \/**\n+     * Tests Files.newInputStream(Path).skip().\n+     *\/\n+    static void testSkip(Path tmpdir) throws IOException {\n+        Path file = createFile(tmpdir.resolve(\"foo\"));\n+        try (OutputStream out = Files.newOutputStream(file)) {\n+            byte[] blah = new byte[8192];\n+            Arrays.fill(blah, (byte)42);\n+            out.write(blah);\n+            out.close();\n+            try (InputStream in = Files.newInputStream(file)) {\n+                assertTrue(in.skip(-1) == 0);\n+                assertTrue(in.skip(0) == 0);\n+                assertTrue(in.skip(blah.length\/4) == blah.length\/4);\n+                assertTrue(in.skip(blah.length\/2) == blah.length\/2);\n+                assertTrue(in.skip(Long.MAX_VALUE) == blah.length\/4);\n+                in.close();\n+                try {\n+                    long n = in.skip(1);\n+                    throw new RuntimeException(\"skip() did not fail\");\n+                } catch (IOException ioe) {\n+                    if (!(ioe.getCause() instanceof ClosedChannelException)) {\n+                        throw new RuntimeException\n+                            (\"IOException not caused by ClosedChannelException\");\n+                    }\n+                }\n+            }\n+        } finally {\n+            delete(file);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/nio\/file\/Files\/Misc.java","additions":37,"deletions":1,"binary":false,"changes":38,"status":"modified"}]}