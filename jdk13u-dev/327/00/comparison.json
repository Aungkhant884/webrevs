{"files":[{"patch":"@@ -1656,2 +1656,2 @@\n-                    if (bitLength(mag, mag.length) +\n-                        bitLength(val.mag, val.mag.length) >\n+                    if ((long)bitLength(mag, mag.length) +\n+                        (long)bitLength(val.mag, val.mag.length) >\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6910473\n+ * @bug 6910473 8272541\n@@ -31,0 +31,1 @@\n+import java.util.function.Supplier;\n@@ -33,2 +34,1 @@\n-\n-    public static void main(String[] args) {\n+    private static void test(Supplier<BigInteger> s) {\n@@ -36,5 +36,3 @@\n-            BigInteger x = BigInteger.ONE.shiftLeft(Integer.MAX_VALUE); \/\/ x = pow(2,Integer.MAX_VALUE)\n-            if (x.bitLength() != (1L << 31)) {\n-                throw new RuntimeException(\"Incorrect bitLength() \" + x.bitLength());\n-            }\n-            System.out.println(\"Surprisingly passed with correct bitLength() \" + x.bitLength());\n+            BigInteger x = s.get();\n+            System.out.println(\"Surprisingly passed with correct bitLength() \" +\n+                               x.bitLength());\n@@ -43,1 +41,1 @@\n-            System.out.println(\"Overflow is reported by ArithmeticException, as expected\");\n+            System.out.println(\"Overflow reported by ArithmeticException, as expected\");\n@@ -50,0 +48,17 @@\n+\n+    public static void main(String[] args) {\n+        test(() -> {\n+            \/\/ x = pow(2,Integer.MAX_VALUE)\n+            BigInteger x = BigInteger.ONE.shiftLeft(Integer.MAX_VALUE);\n+            if (x.bitLength() != (1L << 31)) {\n+                throw new RuntimeException(\"Incorrect bitLength() \" +\n+                                           x.bitLength());\n+            }\n+            return x;\n+        });\n+        test(() -> {\n+            BigInteger a = BigInteger.ONE.shiftLeft(1073742825);\n+            BigInteger b = BigInteger.ONE.shiftLeft(1073742825);\n+            return a.multiply(b);\n+        });\n+    }\n","filename":"test\/jdk\/java\/math\/BigInteger\/BitLengthOverflow.java","additions":25,"deletions":10,"binary":false,"changes":35,"status":"modified"}]}