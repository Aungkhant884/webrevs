{"files":[{"patch":"@@ -122,1 +122,1 @@\n-        if (ch instanceof SeekableByteChannel && n > 0) {\n+        if (ch instanceof SeekableByteChannel) {\n@@ -124,2 +124,4 @@\n-            try {\n-                long pos = sbc.position();\n+            long pos = sbc.position();\n+            long newPos;\n+            if (n > 0) {\n+                newPos = pos + n;\n@@ -127,2 +129,2 @@\n-                if (pos >= size) {\n-                   return 0L;\n+                if (newPos < 0 || newPos > size) {\n+                    newPos = size;\n@@ -130,5 +132,2 @@\n-                n = Math.min(n, size - pos);\n-                sbc.position(pos + n);\n-                return sbc.position() - pos;\n-            } catch (ClosedChannelException cce) {\n-                throw new IOException(cce);\n+            } else {\n+                newPos = Long.max(pos + n, 0);\n@@ -136,0 +135,2 @@\n+            sbc.position(newPos);\n+            return newPos - pos;\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ChannelInputStream.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8227609\n+ * @summary Test of InputStream and OutputStream created by java.nio.file.Files\n+ * @library ..\n+ *\/\n+\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.channels.ClosedChannelException;\n+import java.nio.file.*;\n+import static java.nio.file.Files.*;\n+import static java.nio.file.LinkOption.*;\n+import java.nio.file.attribute.*;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class InputStreamTest {\n+\n+    public static void main(String[] args) throws IOException {\n+        Path dir = TestUtil.createTemporaryDirectory();\n+        try {\n+            testSkip(dir);\n+        } finally {\n+            TestUtil.removeAll(dir);\n+        }\n+    }\n+\n+    \/**\n+     * Tests Files.newInputStream(Path).skip().\n+     *\/\n+    static void testSkip(Path tmpdir) throws IOException {\n+        Path file = createFile(tmpdir.resolve(\"foo\"));\n+        try (OutputStream out = Files.newOutputStream(file)) {\n+            final int size = 512;\n+            byte[] blah = new byte[size];\n+            for (int i = 0; i < size; i++) {\n+                blah[i] = (byte)(i % 128);\n+            }\n+            out.write(blah);\n+            out.close();\n+\n+            try (InputStream in = Files.newInputStream(file)) {\n+                assertTrue(in.available() == size);\n+                assertTrue(in.skip(size\/4) == size\/4); \/\/ 0.25\n+                assertTrue(in.available() == 3*size\/4);\n+\n+                int b = in.read();\n+                assertTrue(b == blah[size\/4]);\n+                assertTrue(in.available() == 3*size\/4 - 1);\n+                assertTrue(in.skip(-1) == -1); \/\/ 0.25\n+                assertTrue(in.available() == 3*size\/4);\n+\n+                assertTrue(in.skip(-size\/2) == -size\/4); \/\/ 0\n+                assertTrue(in.available() == size);\n+\n+                assertTrue(in.skip(5*size\/4) == size); \/\/ 1.0\n+                assertTrue(in.available() == 0);\n+\n+                assertTrue(in.skip(-3*size\/4) == -3*size\/4); \/\/ 0.25\n+                assertTrue(in.available() == 3*size\/4);\n+\n+                byte[] buf = new byte[16];\n+                in.read(buf, 2, 12);\n+                assertTrue(Arrays.equals(buf, 2, 14,\n+                    blah, size\/4, size\/4 + 12));\n+                assertTrue(in.skip(-12) == -12); \/\/ 0.25\n+\n+                assertTrue(in.skip(3*size\/4) == 3*size\/4); \/\/ 1.0\n+                assertTrue(in.available() == 0);\n+\n+                assertTrue(in.skip(-size\/2) == -size\/2); \/\/ 0.5\n+                assertTrue(in.available() == size\/2);\n+\n+                assertTrue(in.skip(-size) == -size\/2); \/\/ 0\n+                assertTrue(in.available() == size);\n+\n+                assertTrue(in.skip(size\/2) == size\/2); \/\/ 0.5\n+                assertTrue(in.available() == size\/2);\n+\n+                assertTrue(in.skip(Long.MIN_VALUE) == -size\/2); \/\/ 0\n+                assertTrue(in.available() == size);\n+\n+                assertTrue(in.skip(size\/2) == size\/2); \/\/ 0.5\n+                assertTrue(in.available() == size\/2);\n+\n+                assertTrue(in.skip(Long.MAX_VALUE - size\/4) == size\/2);\n+                assertTrue(in.available() == 0);\n+\n+                in.close();\n+                try {\n+                    in.skip(1);\n+                    throw new RuntimeException(\"skip() did not fail\");\n+                } catch (IOException ioe) {\n+                    if (!(ioe instanceof ClosedChannelException)) {\n+                        throw new RuntimeException\n+                            (\"IOException is not a ClosedChannelException\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    static void assertTrue(boolean okay) {\n+        if (!okay)\n+            throw new RuntimeException(\"Assertion Failed\");\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/file\/Files\/InputStreamTest.java","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n- * @bug 4313887 6838333 8005566 8032220 8215467 8227080\n+ * @bug 4313887 6838333 8005566 8032220 8215467\n@@ -30,3 +30,0 @@\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.nio.channels.ClosedChannelException;\n@@ -50,1 +47,0 @@\n-            testSkip(dir);\n@@ -379,32 +375,0 @@\n-    \/**\n-     * Tests Files.newInputStream(Path).skip().\n-     *\/\n-    static void testSkip(Path tmpdir) throws IOException {\n-        Path file = createFile(tmpdir.resolve(\"foo\"));\n-        try (OutputStream out = Files.newOutputStream(file)) {\n-            byte[] blah = new byte[8192];\n-            Arrays.fill(blah, (byte)42);\n-            out.write(blah);\n-            out.close();\n-            try (InputStream in = Files.newInputStream(file)) {\n-                assertTrue(in.skip(-1) == 0);\n-                assertTrue(in.skip(0) == 0);\n-                assertTrue(in.skip(blah.length\/4) == blah.length\/4);\n-                assertTrue(in.skip(blah.length\/2) == blah.length\/2);\n-                assertTrue(in.skip(Long.MAX_VALUE) == blah.length\/4);\n-                in.close();\n-                try {\n-                    long n = in.skip(1);\n-                    throw new RuntimeException(\"skip() did not fail\");\n-                } catch (IOException ioe) {\n-                    if (!(ioe.getCause() instanceof ClosedChannelException)) {\n-                        throw new RuntimeException\n-                            (\"IOException not caused by ClosedChannelException\");\n-                    }\n-                }\n-            }\n-        } finally {\n-            delete(file);\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/nio\/file\/Files\/Misc.java","additions":1,"deletions":37,"binary":false,"changes":38,"status":"modified"}]}