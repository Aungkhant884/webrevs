{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -242,0 +242,3 @@\n+  jlong        (JNICALL *GetOneThreadAllocatedMemory)\n+                                                 (JNIEnv *env,\n+                                                  jlong thread_id);\n","filename":"src\/hotspot\/share\/include\/jmm.h","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2071,0 +2071,25 @@\n+\/\/ Gets the amount of memory allocated on the Java heap for a single thread.\n+\/\/ Returns -1 if the thread does not exist or has terminated.\n+JVM_ENTRY(jlong, jmm_GetOneThreadAllocatedMemory(JNIEnv *env, jlong thread_id))\n+  if (thread_id < 0) {\n+    THROW_MSG_(vmSymbols::java_lang_IllegalArgumentException(),\n+               \"Invalid thread ID\", -1);\n+  }\n+\n+  if (thread_id == 0) {\n+    \/\/ current thread\n+    if (THREAD->is_Java_thread()) {\n+      return ((JavaThread*)THREAD)->cooked_allocated_bytes();\n+    }\n+    return -1;\n+  }\n+\n+  ThreadsListHandle tlh;\n+  JavaThread* java_thread = tlh.list()->find_JavaThread_from_java_tid(thread_id);\n+\n+  if (java_thread != NULL) {\n+    return java_thread->cooked_allocated_bytes();\n+  }\n+  return -1;\n+JVM_END\n+\n@@ -2195,0 +2220,1 @@\n+  jmm_GetOneThreadAllocatedMemory,\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -163,1 +163,1 @@\n-     * @throws java.lang.SecurityException if a security manager\n+     * @throws SecurityException if a security manager\n@@ -202,1 +202,1 @@\n-     * @throws java.lang.SecurityException if a security manager\n+     * @throws SecurityException if a security manager\n@@ -240,1 +240,1 @@\n-     * @throws java.lang.SecurityException if a security manager\n+     * @throws SecurityException if a security manager\n@@ -287,1 +287,1 @@\n-     * @throws java.lang.SecurityException if a security manager\n+     * @throws SecurityException if a security manager\n@@ -340,1 +340,1 @@\n-     * @throws java.lang.SecurityException if a security manager\n+     * @throws SecurityException if a security manager\n@@ -363,1 +363,1 @@\n-     * @throws java.lang.UnsupportedOperationException if the Java virtual\n+     * @throws UnsupportedOperationException if the Java virtual\n@@ -377,1 +377,1 @@\n-     * @throws java.lang.UnsupportedOperationException if the Java\n+     * @throws UnsupportedOperationException if the Java\n@@ -380,1 +380,1 @@\n-     * @throws java.lang.SecurityException if a security manager\n+     * @throws SecurityException if a security manager\n@@ -397,1 +397,1 @@\n-     * This is a convenient method for local management use and is\n+     * This is a convenience method for local management use and is\n@@ -406,1 +406,1 @@\n-     * @throws java.lang.UnsupportedOperationException if the Java\n+     * @throws UnsupportedOperationException if the Java\n@@ -424,1 +424,1 @@\n-     * This is a convenient method for local management use and is\n+     * This is a convenience method for local management use and is\n@@ -433,1 +433,1 @@\n-     * @throws java.lang.UnsupportedOperationException if the Java\n+     * @throws UnsupportedOperationException if the Java\n@@ -470,1 +470,1 @@\n-     * @throws java.lang.UnsupportedOperationException if the Java\n+     * @throws UnsupportedOperationException if the Java\n@@ -505,1 +505,1 @@\n-     * @throws java.lang.UnsupportedOperationException if the Java\n+     * @throws UnsupportedOperationException if the Java\n@@ -551,1 +551,1 @@\n-     * @throws java.lang.UnsupportedOperationException if the Java virtual\n+     * @throws UnsupportedOperationException if the Java virtual\n@@ -567,1 +567,1 @@\n-     * @throws java.lang.UnsupportedOperationException if the Java\n+     * @throws UnsupportedOperationException if the Java\n@@ -571,1 +571,1 @@\n-     * @throws java.lang.SecurityException if a security manager\n+     * @throws SecurityException if a security manager\n@@ -607,1 +607,1 @@\n-     * @throws java.lang.SecurityException if a security manager\n+     * @throws SecurityException if a security manager\n@@ -619,1 +619,1 @@\n-     * @throws java.lang.SecurityException if a security manager\n+     * @throws SecurityException if a security manager\n@@ -645,1 +645,1 @@\n-     * @throws java.lang.SecurityException if a security manager\n+     * @throws SecurityException if a security manager\n@@ -648,1 +648,1 @@\n-     * @throws java.lang.UnsupportedOperationException if the Java virtual\n+     * @throws UnsupportedOperationException if the Java virtual\n@@ -707,1 +707,1 @@\n-     * @throws java.lang.SecurityException if a security manager\n+     * @throws SecurityException if a security manager\n@@ -710,1 +710,1 @@\n-     * @throws java.lang.UnsupportedOperationException\n+     * @throws UnsupportedOperationException\n@@ -797,1 +797,1 @@\n-     * @throws java.lang.SecurityException if a security manager\n+     * @throws SecurityException if a security manager\n@@ -800,1 +800,1 @@\n-     * @throws java.lang.UnsupportedOperationException\n+     * @throws UnsupportedOperationException\n@@ -838,1 +838,1 @@\n-     * @throws java.lang.SecurityException if a security manager\n+     * @throws SecurityException if a security manager\n@@ -841,1 +841,1 @@\n-     * @throws java.lang.UnsupportedOperationException\n+     * @throws UnsupportedOperationException\n@@ -887,1 +887,1 @@\n-     * @throws java.lang.SecurityException if a security manager\n+     * @throws SecurityException if a security manager\n@@ -890,1 +890,1 @@\n-     * @throws java.lang.UnsupportedOperationException\n+     * @throws UnsupportedOperationException\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/ThreadMXBean.java","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.Objects;\n@@ -115,1 +116,1 @@\n-    protected boolean isThreadAllocatedMemoryEnabled() {\n+    private void ensureThreadAllocatedMemorySupported() {\n@@ -118,1 +119,1 @@\n-                \"Thread allocated memory measurement is not supported\");\n+                \"Thread allocated memory measurement is not supported.\");\n@@ -120,0 +121,4 @@\n+    }\n+\n+    protected boolean isThreadAllocatedMemoryEnabled() {\n+        ensureThreadAllocatedMemorySupported();\n@@ -158,3 +163,4 @@\n-    private void verifyThreadIds(long[] ids) {\n-        if (ids == null) {\n-            throw new NullPointerException(\"Null ids parameter.\");\n+    private void verifyThreadId(long id) {\n+        if (id <= 0) {\n+            throw new IllegalArgumentException(\n+                \"Invalid thread ID parameter: \" + id);\n@@ -162,0 +168,4 @@\n+    }\n+\n+    private void verifyThreadIds(long[] ids) {\n+        Objects.requireNonNull(ids);\n@@ -164,4 +174,1 @@\n-            if (ids[i] <= 0) {\n-                throw new IllegalArgumentException(\n-                    \"Invalid thread ID parameter: \" + ids[i]);\n-            }\n+            verifyThreadId(ids[i]);\n@@ -345,5 +352,5 @@\n-    protected long getThreadAllocatedBytes(long id) {\n-        long[] ids = new long[1];\n-        ids[0] = id;\n-        final long[] sizes = getThreadAllocatedBytes(ids);\n-        return sizes[0];\n+    protected long getCurrentThreadAllocatedBytes() {\n+        if (isThreadAllocatedMemoryEnabled()) {\n+            return getThreadAllocatedMemory0(0);\n+        }\n+        return -1;\n@@ -352,2 +359,4 @@\n-    private boolean verifyThreadAllocatedMemory(long[] ids) {\n-        verifyThreadIds(ids);\n+    private boolean verifyThreadAllocatedMemory(long id) {\n+        verifyThreadId(id);\n+        return isThreadAllocatedMemoryEnabled();\n+    }\n@@ -355,4 +364,6 @@\n-        \/\/ check if Thread allocated memory measurement is supported.\n-        if (!isThreadAllocatedMemorySupported()) {\n-            throw new UnsupportedOperationException(\n-                \"Thread allocated memory measurement is not supported.\");\n+    protected long getThreadAllocatedBytes(long id) {\n+        boolean verified = verifyThreadAllocatedMemory(id);\n+\n+        if (verified) {\n+            return getThreadAllocatedMemory0(\n+                Thread.currentThread().getId() == id ? 0 : id);\n@@ -360,0 +371,2 @@\n+        return -1;\n+    }\n@@ -361,0 +374,2 @@\n+    private boolean verifyThreadAllocatedMemory(long[] ids) {\n+        verifyThreadIds(ids);\n@@ -365,0 +380,7 @@\n+        Objects.requireNonNull(ids);\n+\n+        if (ids.length == 1) {\n+            long size = getThreadAllocatedBytes(ids[0]);\n+            return new long[] { size };\n+        }\n+\n@@ -377,4 +399,1 @@\n-        if (!isThreadAllocatedMemorySupported()) {\n-            throw new UnsupportedOperationException(\n-                \"Thread allocated memory measurement is not supported.\");\n-        }\n+        ensureThreadAllocatedMemorySupported();\n@@ -514,0 +533,1 @@\n+    private static native long getThreadAllocatedMemory0(long id);\n","filename":"src\/java.management\/share\/classes\/sun\/management\/ThreadImpl.java","additions":44,"deletions":24,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,0 +97,7 @@\n+JNIEXPORT jlong JNICALL\n+Java_sun_management_ThreadImpl_getThreadAllocatedMemory0\n+  (JNIEnv *env, jclass cls, jlong tid)\n+{\n+  return jmm_interface->GetOneThreadAllocatedMemory(env, tid);\n+}\n+\n","filename":"src\/java.management\/share\/native\/libmanagement\/ThreadImpl.c","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-     * @throws java.lang.UnsupportedOperationException if the Java\n+     * @throws UnsupportedOperationException if the Java\n@@ -98,1 +98,1 @@\n-     * @throws java.lang.UnsupportedOperationException if the Java\n+     * @throws UnsupportedOperationException if the Java\n@@ -112,1 +112,38 @@\n-     * allocated in heap memory for the thread of the specified ID.\n+     * allocated in heap memory for the current thread.\n+     * The returned value is an approximation because some Java virtual machine\n+     * implementations may use object allocation mechanisms that result in a\n+     * delay between the time an object is allocated and the time its size is\n+     * recorded.\n+     *\n+     * <p>\n+     * This is a convenience method for local management use and is\n+     * equivalent to calling:\n+     * <blockquote><pre>\n+     *   {@link #getThreadAllocatedBytes getThreadAllocatedBytes}(Thread.currentThread().getId());\n+     * <\/pre><\/blockquote>\n+     *\n+     * @implSpec The default implementation throws\n+     * {@code UnsupportedOperationException}.\n+     *\n+     * @return an approximation of the total memory allocated, in bytes, in\n+     * heap memory for the current thread\n+     * if thread memory allocation measurement is enabled;\n+     * {@code -1} otherwise.\n+     *\n+     * @throws UnsupportedOperationException if the Java virtual\n+     *         machine implementation does not support thread memory allocation\n+     *         measurement.\n+     *\n+     * @see #isThreadAllocatedMemorySupported\n+     * @see #isThreadAllocatedMemoryEnabled\n+     * @see #setThreadAllocatedMemoryEnabled\n+     *\n+     * @since 13.0.6\n+     *\/\n+    public default long getCurrentThreadAllocatedBytes() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    \/**\n+     * Returns an approximation of the total amount of memory, in bytes,\n+     * allocated in heap memory for the thread with the specified ID.\n@@ -118,1 +155,1 @@\n-     * If the thread of the specified ID is not alive or does not exist,\n+     * If the thread with the specified ID is not alive or does not exist,\n@@ -130,2 +167,2 @@\n-     * heap memory for a thread of the specified ID\n-     * if the thread of the specified ID exists, the thread is alive,\n+     * heap memory for the thread with the specified ID\n+     * if the thread with the specified ID exists, the thread is alive,\n@@ -136,1 +173,1 @@\n-     * @throws java.lang.UnsupportedOperationException if the Java virtual\n+     * @throws UnsupportedOperationException if the Java virtual\n@@ -168,1 +205,1 @@\n-     * @throws java.lang.UnsupportedOperationException if the Java virtual\n+     * @throws UnsupportedOperationException if the Java virtual\n@@ -197,1 +234,1 @@\n-     * @throws java.lang.UnsupportedOperationException if the Java virtual\n+     * @throws UnsupportedOperationException if the Java virtual\n@@ -211,1 +248,1 @@\n-     * @throws java.lang.UnsupportedOperationException if the Java virtual\n+     * @throws UnsupportedOperationException if the Java virtual\n@@ -214,1 +251,1 @@\n-     * @throws java.lang.SecurityException if a security manager\n+     * @throws SecurityException if a security manager\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/ThreadMXBean.java","additions":49,"deletions":12,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -60,0 +60,5 @@\n+    @Override\n+    public long getCurrentThreadAllocatedBytes() {\n+        return super.getCurrentThreadAllocatedBytes();\n+    }\n+\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/HotSpotThreadImpl.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,2 @@\n-    Tests getThreadAllocatedBytes(long id) and  getThreadAllocatedBytes(long[] ids),\n+    Tests getCurrentThreadAllocatedBytes(), getThreadAllocatedBytes(long id),\n+    and getThreadAllocatedBytes(long[] ids),\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/ThreadMXBean\/GetThreadAllocatedBytes\/BaseBehaviorTest.README","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,2 @@\n- * Tests getThreadAllocatedBytes(long id) and  getThreadAllocatedBytes(long[] ids),\n+ * Tests getCurrentThreadAllocatedBytes(), getThreadAllocatedBytes(long id).\n+ * and getThreadAllocatedBytes(long[] ids),\n@@ -52,0 +53,20 @@\n+\n+        \/\/ Expect -1 if thread allocated memory is disabled\n+        threadMXBean.setThreadAllocatedMemoryEnabled(false);\n+        long result = threadMXBean.getCurrentThreadAllocatedBytes();\n+        if (result != -1)\n+            throw new TestFailure(\"Failure! getCurrentThreadAllocatedBytes() should \"\n+                    + \"return -1 if ThreadAllocatedMemoryEnabled is set to false. \"\n+                    + \"Received : \" + result);\n+        threadMXBean.setThreadAllocatedMemoryEnabled(true);\n+        \/\/ Expect >= 0 value for current thread\n+        result = threadMXBean.getCurrentThreadAllocatedBytes();\n+        if (result < 0)\n+            throw new TestFailure(\"Failure! getCurrentThreadAllocatedBytes() should \"\n+                    + \"return >= 0 value for current thread. Received : \" + result);\n+        \/\/ Expect >= 0 value for current thread from getThreadAllocatedBytes(id)\n+        result = threadMXBean.getThreadAllocatedBytes(Thread.currentThread().getId());\n+        if (result < 0)\n+            throw new TestFailure(\"Failure! getThreadAllocatedBytes(id) should \"\n+                    + \"return >= 0 value for current thread. Received : \" + result);\n+\n@@ -55,1 +76,0 @@\n-        long result;\n@@ -57,0 +77,1 @@\n+\n@@ -83,1 +104,1 @@\n-            \/\/ Expect > 0 value for running threads\n+            \/\/ Expect >= 0 value for running threads\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/ThreadMXBean\/GetThreadAllocatedBytes\/BaseBehaviorTest.java","additions":25,"deletions":4,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,0 +62,4 @@\n+    public long getCurrentThreadAllocatedBytes() {\n+        return getLongAttribute(\"CurrentThreadAllocatedBytes\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/monitoring\/share\/server\/ServerThreadMXBeanNew.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug     6173675\n+ * @bug     6173675 8231209\n@@ -36,3 +36,2 @@\n-    private static boolean testFailed = false;\n-    private static boolean done = false;\n-    private static boolean done1 = false;\n+    private static volatile boolean done = false;\n+    private static volatile boolean done1 = false;\n@@ -47,0 +46,16 @@\n+        testSupportEnableDisable();\n+\n+        \/\/ Test current thread two ways\n+        testGetCurrentThreadAllocatedBytes();\n+        testCurrentThreadGetThreadAllocatedBytes();\n+\n+        \/\/ Test a single thread that is not this one\n+        testGetThreadAllocatedBytes();\n+\n+        \/\/ Test many threads that are not this one\n+        testGetThreadsAllocatedBytes();\n+\n+        System.out.println(\"Test passed\");\n+    }\n+\n+    private static void testSupportEnableDisable() {\n@@ -61,4 +76,1 @@\n-        Thread curThread = Thread.currentThread();\n-        long id = curThread.getId();\n-\n-        long s = mbean.getThreadAllocatedBytes(id);\n+        long s = mbean.getCurrentThreadAllocatedBytes();\n@@ -80,0 +92,16 @@\n+    }\n+\n+    private static void testGetCurrentThreadAllocatedBytes() {\n+        long size = mbean.getCurrentThreadAllocatedBytes();\n+        ensureValidSize(size);\n+\n+        \/\/ do some more allocation\n+        doit();\n+\n+        checkResult(Thread.currentThread(), size,\n+                    mbean.getCurrentThreadAllocatedBytes());\n+    }\n+\n+    private static void testCurrentThreadGetThreadAllocatedBytes() {\n+        Thread curThread = Thread.currentThread();\n+        long id = curThread.getId();\n@@ -82,6 +110,1 @@\n-        \/\/ implementation could have started measurement when\n-        \/\/ measurement was enabled, in which case size can be 0\n-        if (size < 0) {\n-            throw new RuntimeException(\n-                \"Invalid allocated bytes returned = \" + size);\n-        }\n+        ensureValidSize(size);\n@@ -89,0 +112,1 @@\n+        \/\/ do some more allocation\n@@ -91,5 +115,35 @@\n-        \/\/ Expected to be size1 >= size\n-        long size1 = mbean.getThreadAllocatedBytes(id);\n-        if (size1 < size) {\n-            throw new RuntimeException(\"Allocated bytes \" + size1 +\n-                \" expected >= \" + size);\n+        checkResult(curThread, size, mbean.getThreadAllocatedBytes(id));\n+    }\n+\n+    private static void testGetThreadAllocatedBytes()\n+        throws Exception {\n+\n+        \/\/ start a thread\n+        done = false; done1 = false;\n+        Thread curThread = new MyThread(\"MyThread\");\n+        curThread.start();\n+        long id = curThread.getId();\n+\n+        \/\/ wait for thread to block after doing some allocation\n+        waitUntilThreadBlocked(curThread);\n+\n+        long size = mbean.getThreadAllocatedBytes(id);\n+        ensureValidSize(size);\n+\n+        \/\/ let thread go to do some more allocation\n+        synchronized (obj) {\n+            done = true;\n+            obj.notifyAll();\n+        }\n+\n+        \/\/ wait for thread to get going again. we don't care if we\n+        \/\/ catch it in mid-execution or if it hasn't\n+        \/\/ restarted after we're done sleeping.\n+        goSleep(400);\n+\n+        checkResult(curThread, size, mbean.getThreadAllocatedBytes(id));\n+\n+        \/\/ let thread exit\n+        synchronized (obj) {\n+            done1 = true;\n+            obj.notifyAll();\n@@ -97,3 +151,0 @@\n-        System.out.println(curThread.getName() +\n-            \" Current thread allocated bytes = \" + size +\n-            \" allocated bytes = \" + size1);\n@@ -101,0 +152,7 @@\n+        try {\n+            curThread.join();\n+        } catch (InterruptedException e) {\n+            System.out.println(\"Unexpected exception is thrown.\");\n+            e.printStackTrace(System.out);\n+        }\n+    }\n@@ -102,1 +160,5 @@\n-        \/\/ start threads, wait for them to block\n+    private static void testGetThreadsAllocatedBytes()\n+        throws Exception {\n+\n+        \/\/ start threads\n+        done = false; done1 = false;\n@@ -108,2 +170,2 @@\n-        \/\/ threads block after doing some allocation\n-        waitUntilThreadBlocked();\n+        \/\/ wait for threads to block after doing some allocation\n+        waitUntilThreadsBlocked();\n@@ -113,0 +175,1 @@\n+            ensureValidSize(sizes[i]);\n@@ -115,1 +178,1 @@\n-        \/\/ let threads go and do some more allocation\n+        \/\/ let threads go to do some more allocation\n@@ -121,1 +184,1 @@\n-        \/\/ wait for threads to get going again.  we don't care if we\n+        \/\/ wait for threads to get going again. we don't care if we\n@@ -127,10 +190,2 @@\n-            long newSize = mbean.getThreadAllocatedBytes(threads[i].getId());\n-            if (sizes[i] > newSize) {\n-                throw new RuntimeException(\"TEST FAILED: \" +\n-                    threads[i].getName() +\n-                    \" previous allocated bytes = \" + sizes[i] +\n-                    \" > current allocated bytes = \" + newSize);\n-            }\n-            System.out.println(threads[i].getName() +\n-                \" Previous allocated bytes = \" + sizes[i] +\n-                \" Current allocated bytes = \" + newSize);\n+            checkResult(threads[i], sizes[i],\n+                        mbean.getThreadAllocatedBytes(threads[i].getId()));\n@@ -151,1 +206,0 @@\n-                testFailed = true;\n@@ -155,3 +209,1 @@\n-        if (testFailed) {\n-            throw new RuntimeException(\"TEST FAILED\");\n-        }\n+    }\n@@ -159,1 +211,7 @@\n-        System.out.println(\"Test passed\");\n+    private static void ensureValidSize(long size) {\n+        \/\/ implementation could have started measurement when\n+        \/\/ measurement was enabled, in which case size can be 0\n+        if (size < 0) {\n+            throw new RuntimeException(\n+                \"Invalid allocated bytes returned = \" + size);\n+        }\n@@ -162,0 +220,10 @@\n+    private static void checkResult(Thread curThread,\n+                                    long prev_size, long curr_size) {\n+        if (curr_size < prev_size) {\n+            throw new RuntimeException(\"Allocated bytes \" + curr_size +\n+                                       \" expected >= \" + prev_size);\n+        }\n+        System.out.println(curThread.getName() +\n+                           \" Previous allocated bytes = \" + prev_size +\n+                           \" Current allocated bytes = \" + curr_size);\n+    }\n@@ -172,1 +240,12 @@\n-    private static void waitUntilThreadBlocked()\n+    private static void waitUntilThreadBlocked(Thread thread)\n+        throws Exception {\n+        while (true) {\n+            goSleep(100);\n+            ThreadInfo info = mbean.getThreadInfo(thread.getId());\n+            if (info.getThreadState() == Thread.State.WAITING) {\n+                break;\n+            }\n+        }\n+    }\n+\n+    private static void waitUntilThreadsBlocked()\n@@ -213,1 +292,0 @@\n-                        testFailed = true;\n@@ -228,1 +306,1 @@\n-                throw new RuntimeException(\"TEST FAILED: \" + getName() +\n+                throw new RuntimeException(getName() +\n@@ -240,1 +318,0 @@\n-                        testFailed = true;\n","filename":"test\/jdk\/com\/sun\/management\/ThreadMXBean\/ThreadAllocatedMemory.java","additions":124,"deletions":47,"binary":false,"changes":171,"status":"modified"}]}