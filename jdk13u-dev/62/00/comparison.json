{"files":[{"patch":"@@ -1,1 +1,1 @@\n-## The FreeType Project: Freetype v2.10.1\n+## The FreeType Project: Freetype v2.10.2\n","filename":"src\/java.desktop\/share\/legal\/freetype.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/config\/ftconfig.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/config\/ftheader.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n@@ -295,0 +295,16 @@\n+  \/**************************************************************************\n+   *\n+   * Brotli support.\n+   *\n+   *   FreeType uses the Brotli library to provide support for decompressing\n+   *   WOFF2 streams.\n+   *\n+   *   Define this macro if you want to enable this 'feature'.\n+   *\n+   *   If you use a build system like cmake or the `configure` script,\n+   *   options set by those programs have precedence, overwriting the value\n+   *   here with the configured one.\n+   *\/\n+\/* #define FT_CONFIG_OPTION_USE_BROTLI *\/\n+\n+\n@@ -874,1 +890,1 @@\n-   * (yet) handle.\n+   * (yet) handle.  Currently, this needs option `AF_CONFIG_OPTION_CJK`.\n@@ -876,0 +892,1 @@\n+#ifdef AF_CONFIG_OPTION_CJK\n@@ -877,0 +894,1 @@\n+#endif\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/config\/ftoption.h","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/config\/ftstdlib.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n@@ -1242,1 +1242,1 @@\n-          ( (face)->face_flags & FT_FACE_FLAG_HORIZONTAL )\n+          ( !!( (face)->face_flags & FT_FACE_FLAG_HORIZONTAL ) )\n@@ -1256,1 +1256,1 @@\n-          ( (face)->face_flags & FT_FACE_FLAG_VERTICAL )\n+          ( !!( (face)->face_flags & FT_FACE_FLAG_VERTICAL ) )\n@@ -1270,1 +1270,1 @@\n-          ( (face)->face_flags & FT_FACE_FLAG_KERNING )\n+          ( !!( (face)->face_flags & FT_FACE_FLAG_KERNING ) )\n@@ -1285,1 +1285,1 @@\n-          ( (face)->face_flags & FT_FACE_FLAG_SCALABLE )\n+          ( !!( (face)->face_flags & FT_FACE_FLAG_SCALABLE ) )\n@@ -1304,1 +1304,1 @@\n-          ( (face)->face_flags & FT_FACE_FLAG_SFNT )\n+          ( !!( (face)->face_flags & FT_FACE_FLAG_SFNT ) )\n@@ -1319,1 +1319,1 @@\n-          ( (face)->face_flags & FT_FACE_FLAG_FIXED_WIDTH )\n+          ( !!( (face)->face_flags & FT_FACE_FLAG_FIXED_WIDTH ) )\n@@ -1334,1 +1334,1 @@\n-          ( (face)->face_flags & FT_FACE_FLAG_FIXED_SIZES )\n+          ( !!( (face)->face_flags & FT_FACE_FLAG_FIXED_SIZES ) )\n@@ -1360,1 +1360,1 @@\n-          ( (face)->face_flags & FT_FACE_FLAG_GLYPH_NAMES )\n+          ( !!( (face)->face_flags & FT_FACE_FLAG_GLYPH_NAMES ) )\n@@ -1375,1 +1375,1 @@\n-          ( (face)->face_flags & FT_FACE_FLAG_MULTIPLE_MASTERS )\n+          ( !!( (face)->face_flags & FT_FACE_FLAG_MULTIPLE_MASTERS ) )\n@@ -1397,1 +1397,1 @@\n-          ( (face)->face_index & 0x7FFF0000L )\n+          ( !!( (face)->face_index & 0x7FFF0000L ) )\n@@ -1415,1 +1415,1 @@\n-          ( (face)->face_flags & FT_FACE_FLAG_VARIATION )\n+          ( !!( (face)->face_flags & FT_FACE_FLAG_VARIATION ) )\n@@ -1432,1 +1432,1 @@\n-          ( (face)->face_flags & FT_FACE_FLAG_CID_KEYED )\n+          ( !!( (face)->face_flags & FT_FACE_FLAG_CID_KEYED ) )\n@@ -1446,1 +1446,1 @@\n-          ( (face)->face_flags & FT_FACE_FLAG_TRICKY )\n+          ( !!( (face)->face_flags & FT_FACE_FLAG_TRICKY ) )\n@@ -1463,1 +1463,1 @@\n-          ( (face)->face_flags & FT_FACE_FLAG_COLOR )\n+          ( !!( (face)->face_flags & FT_FACE_FLAG_COLOR ) )\n@@ -2081,1 +2081,2 @@\n-   *     A pointer to an 8-bit file pathname.\n+   *     A pointer to an 8-bit file pathname.  The pointer is not owned by\n+   *     FreeType.\n@@ -4784,1 +4785,1 @@\n-#define FREETYPE_PATCH  1\n+#define FREETYPE_PATCH  2\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/freetype.h","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2008-2019 by\n+ * Copyright (C) 2008-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftadvanc.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftbbox.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftbdf.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2004-2019 by\n+ * Copyright (C) 2004-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftbitmap.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2007-2019 by\n+ * Copyright (C) 2007-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftcid.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2018-2019 by\n+ * Copyright (C) 2018-2020 by\n@@ -128,3 +128,3 @@\n-   *     A read-only array of palette name IDs with `num_palettes` elements,\n-   *     corresponding to entries like 'dark' or 'light' in the font's 'name'\n-   *     table.\n+   *     An optional read-only array of palette name IDs with `num_palettes`\n+   *     elements, corresponding to entries like 'dark' or 'light' in the\n+   *     font's 'name' table.\n@@ -138,2 +138,2 @@\n-   *     A read-only array of palette flags with `num_palettes` elements.\n-   *     Possible values are an ORed combination of\n+   *     An optional read-only array of palette flags with `num_palettes`\n+   *     elements.  Possible values are an ORed combination of\n@@ -150,1 +150,1 @@\n-   *     A read-only array of palette entry name IDs with\n+   *     An optional read-only array of palette entry name IDs with\n@@ -166,0 +166,3 @@\n+   *   Use function @FT_Palette_Select to get the colors associated with a\n+   *   palette entry.\n+   *\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftcolor.h","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2017-2019 by\n+ * Copyright (C) 2017-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftdriver.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/fterrdef.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/fterrors.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftfntfmt.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2007-2019 by\n+ * Copyright (C) 2007-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftgasp.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftglyph.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftgzip.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftimage.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftincrem.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 2006-2019 by\n+ * Copyright (C) 2006-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftlcdfil.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftlist.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftmac.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftmm.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftmodapi.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftmoderr.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftoutln.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2017-2019 by\n+ * Copyright (C) 2017-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftparams.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftrender.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftsizes.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftsnames.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n@@ -117,7 +117,6 @@\n-   *     segments are extended until they meet at an angle.  If the segments\n-   *     meet at too sharp an angle (such that the miter would extend from\n-   *     the intersection of the segments a distance greater than the product\n-   *     of the miter limit value and the border radius), then a bevel join\n-   *     (see above) is used instead.  This prevents long spikes being\n-   *     created.  `FT_STROKER_LINEJOIN_MITER_FIXED` generates a miter line\n-   *     join as used in PostScript and PDF.\n+   *     segments are extended until they meet at an angle.  A bevel join\n+   *     (see above) is used if the segments meet at too sharp an angle and\n+   *     the outer edges meet beyond a distance corresponding to the meter\n+   *     limit.  This prevents long spikes being created.\n+   *     `FT_STROKER_LINEJOIN_MITER_FIXED` generates a miter line join as\n+   *     used in PostScript and PDF.\n@@ -128,5 +127,3 @@\n-   *     limit is exceeded.  The intersection of the strokes is clipped at a\n-   *     line perpendicular to the bisector of the angle between the strokes,\n-   *     at the distance from the intersection of the segments equal to the\n-   *     product of the miter limit value and the border radius.  This\n-   *     prevents long spikes being created.\n+   *     limit is exceeded.  The intersection of the strokes is clipped\n+   *     perpendicularly to the bisector, at a distance corresponding to\n+   *     the miter limit. This prevents long spikes being created.\n@@ -299,3 +296,2 @@\n-   *     The miter limit for the `FT_STROKER_LINEJOIN_MITER_FIXED` and\n-   *     `FT_STROKER_LINEJOIN_MITER_VARIABLE` line join styles, expressed as\n-   *     16.16 fixed-point value.\n+   *     The maximum reciprocal sine of half-angle at the miter join,\n+   *     expressed as 16.16 fixed point value.\n@@ -304,1 +300,7 @@\n-   *   The radius is expressed in the same units as the outline coordinates.\n+   *   The `radius` is expressed in the same units as the outline\n+   *   coordinates.\n+   *\n+   *   The `miter_limit` multiplied by the `radius` gives the maximum size\n+   *   of a miter spike, at which it is clipped for\n+   *   @FT_STROKER_LINEJOIN_MITER_VARIABLE or replaced with a bevel join for\n+   *   @FT_STROKER_LINEJOIN_MITER_FIXED.\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftstroke.h","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 2000-2019 by\n+ * Copyright (C) 2000-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftsynth.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ftsystem.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/fttrigon.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/fttypes.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/autohint.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2017-2019 by\n+ * Copyright (C) 2017-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/cffotypes.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/cfftypes.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/ftcalc.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/ftdebug.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/ftdrv.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/ftgloadr.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n@@ -60,0 +60,8 @@\n+  \/* The calculation `NULL + n' is undefined in C.  Even if the resulting *\/\n+  \/* pointer doesn't get dereferenced, this causes warnings with          *\/\n+  \/* sanitizers.                                                          *\/\n+  \/*                                                                      *\/\n+  \/* We thus provide a macro that should be used if `base' can be NULL.   *\/\n+#define FT_OFFSET( base, count )  ( (base) ? (base) + (count) : NULL )\n+\n+\n@@ -156,4 +164,4 @@\n-#define FT_MEM_FREE( ptr )                \\\n-          FT_BEGIN_STMNT                  \\\n-            ft_mem_free( memory, (ptr) ); \\\n-            (ptr) = NULL;                 \\\n+#define FT_MEM_FREE( ptr )                                  \\\n+          FT_BEGIN_STMNT                                    \\\n+            FT_DEBUG_INNER( ft_mem_free( memory, (ptr) ) ); \\\n+            (ptr) = NULL;                                   \\\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/ftmemory.h","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/ftobjs.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2017-2019 by\n+ * Copyright (C) 2017-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/ftpsprop.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2004-2019 by\n+ * Copyright (C) 2004-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/ftrfork.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/ftserv.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/ftstream.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n@@ -52,0 +52,1 @@\n+FT_TRACE_DEF( sfwoff2 )   \/* WOFF2 format handler    (sfwoff2.c)  *\/\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/fttrace.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2004-2019 by\n+ * Copyright (C) 2004-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/ftvalid.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/internal.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/psaux.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/pshints.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svbdf.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2017-2019 by\n+ * Copyright (C) 2017-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svcfftl.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2007-2019 by\n+ * Copyright (C) 2007-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svcid.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svfntfmt.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svgldict.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2004-2019 by\n+ * Copyright (C) 2004-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svgxval.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2006-2019 by\n+ * Copyright (C) 2006-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svkern.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2016-2019 by\n+ * Copyright (C) 2016-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svmetric.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svmm.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2004-2019 by\n+ * Copyright (C) 2004-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svotval.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svpfr.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svpostnm.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2012-2019 by\n+ * Copyright (C) 2012-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svprop.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svpscmap.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svpsinfo.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svsfnt.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svttcmap.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2006-2019 by\n+ * Copyright (C) 2006-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svtteng.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2007-2019 by\n+ * Copyright (C) 2007-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svttglyf.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/services\/svwinfnt.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/sfnt.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/t1types.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/tttypes.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n@@ -107,0 +107,201 @@\n+  \/**************************************************************************\n+   *\n+   * @struct:\n+   *   WOFF2_TtcFontRec\n+   *\n+   * @description:\n+   *   Metadata for a TTC font entry in WOFF2.\n+   *\n+   * @fields:\n+   *   flavor ::\n+   *     TTC font flavor.\n+   *\n+   *   num_tables ::\n+   *     Number of tables in TTC, indicating number of elements in\n+   *     `table_indices`.\n+   *\n+   *   table_indices ::\n+   *     Array of table indices for each TTC font.\n+   *\/\n+  typedef struct  WOFF2_TtcFontRec_\n+  {\n+    FT_ULong    flavor;\n+    FT_UShort   num_tables;\n+    FT_UShort*  table_indices;\n+\n+  } WOFF2_TtcFontRec, *WOFF2_TtcFont;\n+\n+\n+  \/**************************************************************************\n+   *\n+   * @struct:\n+   *   WOFF2_HeaderRec\n+   *\n+   * @description:\n+   *   WOFF2 file format header.\n+   *\n+   * @fields:\n+   *   See\n+   *\n+   *     https:\/\/www.w3.org\/TR\/WOFF2\/#woff20Header\n+   *\n+   * @note:\n+   *   We don't care about the fields `reserved`, `majorVersion` and\n+   *   `minorVersion`, so they are not included.  The `totalSfntSize` field\n+   *   does not necessarily represent the actual size of the uncompressed\n+   *   SFNT font stream, so that is used as a reference value instead.\n+   *\/\n+  typedef struct  WOFF2_HeaderRec_\n+  {\n+    FT_ULong   signature;\n+    FT_ULong   flavor;\n+    FT_ULong   length;\n+    FT_UShort  num_tables;\n+    FT_ULong   totalSfntSize;\n+    FT_ULong   totalCompressedSize;\n+    FT_ULong   metaOffset;\n+    FT_ULong   metaLength;\n+    FT_ULong   metaOrigLength;\n+    FT_ULong   privOffset;\n+    FT_ULong   privLength;\n+\n+    FT_ULong   uncompressed_size;    \/* uncompressed brotli stream size *\/\n+    FT_ULong   compressed_offset;    \/* compressed stream offset        *\/\n+    FT_ULong   header_version;       \/* version of original TTC Header  *\/\n+    FT_UShort  num_fonts;            \/* number of fonts in TTC          *\/\n+    FT_ULong   actual_sfnt_size;     \/* actual size of sfnt stream      *\/\n+\n+    WOFF2_TtcFont  ttc_fonts;        \/* metadata for fonts in a TTC     *\/\n+\n+  } WOFF2_HeaderRec, *WOFF2_Header;\n+\n+\n+  \/**************************************************************************\n+   *\n+   * @struct:\n+   *   WOFF2_TableRec\n+   *\n+   * @description:\n+   *   This structure describes a given table of a WOFF2 font.\n+   *\n+   * @fields:\n+   *   See\n+   *\n+   *     https:\/\/www.w3.org\/TR\/WOFF2\/#table_dir_format\n+   *\/\n+  typedef struct  WOFF2_TableRec_\n+  {\n+    FT_Byte   FlagByte;           \/* table type and flags      *\/\n+    FT_ULong  Tag;                \/* table file offset         *\/\n+    FT_ULong  dst_length;         \/* uncompressed table length *\/\n+    FT_ULong  TransformLength;    \/* transformed length        *\/\n+\n+    FT_ULong  flags;              \/* calculated flags          *\/\n+    FT_ULong  src_offset;         \/* compressed table offset   *\/\n+    FT_ULong  src_length;         \/* compressed table length   *\/\n+    FT_ULong  dst_offset;         \/* uncompressed table offset *\/\n+\n+  } WOFF2_TableRec, *WOFF2_Table;\n+\n+\n+  \/**************************************************************************\n+   *\n+   * @struct:\n+   *   WOFF2_InfoRec\n+   *\n+   * @description:\n+   *   Metadata for WOFF2 font that may be required for reconstruction of\n+   *   sfnt tables.\n+   *\n+   * @fields:\n+   *   header_checksum ::\n+   *     Checksum of SFNT offset table.\n+   *\n+   *   num_glyphs ::\n+   *     Number of glyphs in the font.\n+   *\n+   *   num_hmetrics ::\n+   *     `numberOfHMetrics` field in the 'hhea' table.\n+   *\n+   *   x_mins ::\n+   *     `xMin` values of glyph bounding box.\n+   *\n+   *   glyf_table ::\n+   *     A pointer to the `glyf' table record.\n+   *\n+   *   loca_table ::\n+   *     A pointer to the `loca' table record.\n+   *\n+   *   head_table ::\n+   *     A pointer to the `head' table record.\n+   *\/\n+  typedef struct  WOFF2_InfoRec_\n+  {\n+    FT_ULong   header_checksum;\n+    FT_UShort  num_glyphs;\n+    FT_UShort  num_hmetrics;\n+    FT_Short*  x_mins;\n+\n+    WOFF2_Table  glyf_table;\n+    WOFF2_Table  loca_table;\n+    WOFF2_Table  head_table;\n+\n+  } WOFF2_InfoRec, *WOFF2_Info;\n+\n+\n+  \/**************************************************************************\n+   *\n+   * @struct:\n+   *   WOFF2_SubstreamRec\n+   *\n+   * @description:\n+   *   This structure stores information about a substream in the transformed\n+   *   'glyf' table in a WOFF2 stream.\n+   *\n+   * @fields:\n+   *   start ::\n+   *     Beginning of the substream relative to uncompressed table stream.\n+   *\n+   *   offset ::\n+   *     Offset of the substream relative to uncompressed table stream.\n+   *\n+   *   size ::\n+   *     Size of the substream.\n+   *\/\n+  typedef struct  WOFF2_SubstreamRec_\n+  {\n+    FT_ULong  start;\n+    FT_ULong  offset;\n+    FT_ULong  size;\n+\n+  } WOFF2_SubstreamRec, *WOFF2_Substream;\n+\n+\n+  \/**************************************************************************\n+   *\n+   * @struct:\n+   *   WOFF2_PointRec\n+   *\n+   * @description:\n+   *   This structure stores information about a point in the transformed\n+   *   'glyf' table in a WOFF2 stream.\n+   *\n+   * @fields:\n+   *   x ::\n+   *     x-coordinate of point.\n+   *\n+   *   y ::\n+   *     y-coordinate of point.\n+   *\n+   *   on_curve ::\n+   *     Set if point is on-curve.\n+   *\/\n+  typedef struct  WOFF2_PointRec_\n+  {\n+    FT_Int   x;\n+    FT_Int   y;\n+    FT_Bool  on_curve;\n+\n+  } WOFF2_PointRec, *WOFF2_Point;\n+\n+\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/internal\/wofftypes.h","additions":202,"deletions":1,"binary":false,"changes":203,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/t1tables.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/ttnameid.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/tttables.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n@@ -110,0 +110,1 @@\n+#define TTAG_wOF2  FT_MAKE_TAG( 'w', 'O', 'F', '2' )\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/freetype\/tttags.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/include\/ft2build.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afangles.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n- * Copyright (C) 2013-2019 by\n+ * Copyright (C) 2013-2020 by\n@@ -343,0 +343,6 @@\n+    '\\xF0', '\\x90', '\\xB4', '\\x83', ' ', '\\xF0', '\\x90', '\\xB4', '\\x80', ' ', '\\xF0', '\\x90', '\\xB4', '\\x86', ' ', '\\xF0', '\\x90', '\\xB4', '\\x96', ' ', '\\xF0', '\\x90', '\\xB4', '\\x95',  \/* 𐴃 𐴀 𐴆 𐴖 𐴕 *\/\n+    '\\0',\n+    '\\xF0', '\\x90', '\\xB4', '\\x94', ' ', '\\xF0', '\\x90', '\\xB4', '\\x96', ' ', '\\xF0', '\\x90', '\\xB4', '\\x95', ' ', '\\xF0', '\\x90', '\\xB4', '\\x91', ' ', '\\xF0', '\\x90', '\\xB4', '\\x90',  \/* 𐴔 𐴖 𐴕 𐴑 𐴐 *\/\n+    '\\0',\n+    '\\xD9', '\\x80',  \/* ـ *\/\n+    '\\0',\n@@ -690,0 +696,4 @@\n+    { AF_BLUE_STRING_ROHINGYA_TOP,    AF_BLUE_PROPERTY_LATIN_TOP     },\n+    { AF_BLUE_STRING_ROHINGYA_BOTTOM, 0                              },\n+    { AF_BLUE_STRING_ROHINGYA_JOIN,   AF_BLUE_PROPERTY_LATIN_NEUTRAL },\n+    { AF_BLUE_STRING_MAX,             0                              },\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afblue.c","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2013-2019 by\n+ * Copyright (C) 2013-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afblue.cin","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-\/\/ Copyright (C) 2013-2019 by\n+\/\/ Copyright (C) 2013-2020 by\n@@ -446,0 +446,7 @@\n+  AF_BLUE_STRING_ROHINGYA_TOP\n+    \"𐴃 𐴀 𐴆 𐴖 𐴕\"\n+  AF_BLUE_STRING_ROHINGYA_BOTTOM\n+    \"𐴔 𐴖 𐴕 𐴑 𐴐\"\n+  AF_BLUE_STRING_ROHINGYA_JOIN\n+    \"ـ\"\n+\n@@ -1005,0 +1012,6 @@\n+  AF_BLUE_STRINGSET_ROHG\n+    { AF_BLUE_STRING_ROHINGYA_TOP,    AF_BLUE_PROPERTY_LATIN_TOP     }\n+    { AF_BLUE_STRING_ROHINGYA_BOTTOM, 0                              }\n+    { AF_BLUE_STRING_ROHINGYA_JOIN,   AF_BLUE_PROPERTY_LATIN_NEUTRAL }\n+    { AF_BLUE_STRING_MAX,             0                              }\n+\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afblue.dat","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n- * Copyright (C) 2013-2019 by\n+ * Copyright (C) 2013-2020 by\n@@ -237,30 +237,33 @@\n-    AF_BLUE_STRING_SAURASHTRA_TOP = 4190,\n-    AF_BLUE_STRING_SAURASHTRA_BOTTOM = 4222,\n-    AF_BLUE_STRING_SHAVIAN_TOP = 4242,\n-    AF_BLUE_STRING_SHAVIAN_BOTTOM = 4252,\n-    AF_BLUE_STRING_SHAVIAN_DESCENDER = 4277,\n-    AF_BLUE_STRING_SHAVIAN_SMALL_TOP = 4287,\n-    AF_BLUE_STRING_SHAVIAN_SMALL_BOTTOM = 4322,\n-    AF_BLUE_STRING_SINHALA_TOP = 4337,\n-    AF_BLUE_STRING_SINHALA_BOTTOM = 4369,\n-    AF_BLUE_STRING_SINHALA_DESCENDER = 4401,\n-    AF_BLUE_STRING_SUNDANESE_TOP = 4445,\n-    AF_BLUE_STRING_SUNDANESE_BOTTOM = 4469,\n-    AF_BLUE_STRING_SUNDANESE_DESCENDER = 4501,\n-    AF_BLUE_STRING_TAI_VIET_TOP = 4509,\n-    AF_BLUE_STRING_TAI_VIET_BOTTOM = 4529,\n-    AF_BLUE_STRING_TAMIL_TOP = 4541,\n-    AF_BLUE_STRING_TAMIL_BOTTOM = 4573,\n-    AF_BLUE_STRING_TELUGU_TOP = 4605,\n-    AF_BLUE_STRING_TELUGU_BOTTOM = 4633,\n-    AF_BLUE_STRING_THAI_TOP = 4661,\n-    AF_BLUE_STRING_THAI_BOTTOM = 4685,\n-    AF_BLUE_STRING_THAI_ASCENDER = 4713,\n-    AF_BLUE_STRING_THAI_LARGE_ASCENDER = 4725,\n-    AF_BLUE_STRING_THAI_DESCENDER = 4737,\n-    AF_BLUE_STRING_THAI_LARGE_DESCENDER = 4753,\n-    AF_BLUE_STRING_THAI_DIGIT_TOP = 4761,\n-    AF_BLUE_STRING_TIFINAGH = 4773,\n-    AF_BLUE_STRING_VAI_TOP = 4805,\n-    AF_BLUE_STRING_VAI_BOTTOM = 4837,\n-    af_blue_1_1 = 4868,\n+    AF_BLUE_STRING_ROHINGYA_TOP = 4190,\n+    AF_BLUE_STRING_ROHINGYA_BOTTOM = 4215,\n+    AF_BLUE_STRING_ROHINGYA_JOIN = 4240,\n+    AF_BLUE_STRING_SAURASHTRA_TOP = 4243,\n+    AF_BLUE_STRING_SAURASHTRA_BOTTOM = 4275,\n+    AF_BLUE_STRING_SHAVIAN_TOP = 4295,\n+    AF_BLUE_STRING_SHAVIAN_BOTTOM = 4305,\n+    AF_BLUE_STRING_SHAVIAN_DESCENDER = 4330,\n+    AF_BLUE_STRING_SHAVIAN_SMALL_TOP = 4340,\n+    AF_BLUE_STRING_SHAVIAN_SMALL_BOTTOM = 4375,\n+    AF_BLUE_STRING_SINHALA_TOP = 4390,\n+    AF_BLUE_STRING_SINHALA_BOTTOM = 4422,\n+    AF_BLUE_STRING_SINHALA_DESCENDER = 4454,\n+    AF_BLUE_STRING_SUNDANESE_TOP = 4498,\n+    AF_BLUE_STRING_SUNDANESE_BOTTOM = 4522,\n+    AF_BLUE_STRING_SUNDANESE_DESCENDER = 4554,\n+    AF_BLUE_STRING_TAI_VIET_TOP = 4562,\n+    AF_BLUE_STRING_TAI_VIET_BOTTOM = 4582,\n+    AF_BLUE_STRING_TAMIL_TOP = 4594,\n+    AF_BLUE_STRING_TAMIL_BOTTOM = 4626,\n+    AF_BLUE_STRING_TELUGU_TOP = 4658,\n+    AF_BLUE_STRING_TELUGU_BOTTOM = 4686,\n+    AF_BLUE_STRING_THAI_TOP = 4714,\n+    AF_BLUE_STRING_THAI_BOTTOM = 4738,\n+    AF_BLUE_STRING_THAI_ASCENDER = 4766,\n+    AF_BLUE_STRING_THAI_LARGE_ASCENDER = 4778,\n+    AF_BLUE_STRING_THAI_DESCENDER = 4790,\n+    AF_BLUE_STRING_THAI_LARGE_DESCENDER = 4806,\n+    AF_BLUE_STRING_THAI_DIGIT_TOP = 4814,\n+    AF_BLUE_STRING_TIFINAGH = 4826,\n+    AF_BLUE_STRING_VAI_TOP = 4858,\n+    AF_BLUE_STRING_VAI_BOTTOM = 4890,\n+    af_blue_1_1 = 4921,\n@@ -368,11 +371,12 @@\n-    AF_BLUE_STRINGSET_SAUR = 210,\n-    AF_BLUE_STRINGSET_SHAW = 213,\n-    AF_BLUE_STRINGSET_SINH = 219,\n-    AF_BLUE_STRINGSET_SUND = 223,\n-    AF_BLUE_STRINGSET_TAML = 227,\n-    AF_BLUE_STRINGSET_TAVT = 230,\n-    AF_BLUE_STRINGSET_TELU = 233,\n-    AF_BLUE_STRINGSET_TFNG = 236,\n-    AF_BLUE_STRINGSET_THAI = 239,\n-    AF_BLUE_STRINGSET_VAII = 247,\n-    af_blue_2_1 = 250,\n+    AF_BLUE_STRINGSET_ROHG = 210,\n+    AF_BLUE_STRINGSET_SAUR = 214,\n+    AF_BLUE_STRINGSET_SHAW = 217,\n+    AF_BLUE_STRINGSET_SINH = 223,\n+    AF_BLUE_STRINGSET_SUND = 227,\n+    AF_BLUE_STRINGSET_TAML = 231,\n+    AF_BLUE_STRINGSET_TAVT = 234,\n+    AF_BLUE_STRINGSET_TELU = 237,\n+    AF_BLUE_STRINGSET_TFNG = 240,\n+    AF_BLUE_STRINGSET_THAI = 243,\n+    AF_BLUE_STRINGSET_VAII = 251,\n+    af_blue_2_1 = 254,\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afblue.h","additions":46,"deletions":42,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2013-2019 by\n+ * Copyright (C) 2013-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afblue.hin","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2006-2019 by\n+ * Copyright (C) 2006-2020 by\n@@ -809,1 +809,1 @@\n-    AF_Segment    segment_limit = segments + axis->num_segments;\n+    AF_Segment    segment_limit = FT_OFFSET( segments, axis->num_segments );\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afcjk.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2006-2019 by\n+ * Copyright (C) 2006-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afcjk.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2013-2019 by\n+ * Copyright (C) 2013-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afcover.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afdummy.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afdummy.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2005-2019 by\n+ * Copyright (C) 2005-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/aferrors.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afglobal.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afglobal.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afhints.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afhints.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2007-2019 by\n+ * Copyright (C) 2007-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afindic.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 2007-2019 by\n+ * Copyright (C) 2007-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afindic.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n@@ -1913,1 +1913,1 @@\n-      AF_Segment  segments_end = segments + axis->num_segments;\n+      AF_Segment  segments_end = FT_OFFSET( segments, axis->num_segments );\n@@ -2317,1 +2317,1 @@\n-      AF_Edge  edge_limit = edges + axis->num_edges;\n+      AF_Edge  edge_limit = FT_OFFSET( edges, axis->num_edges );\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/aflatin.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/aflatin.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afloader.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afloader.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afmodule.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afmodule.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2013-2019 by\n+ * Copyright (C) 2013-2020 by\n@@ -781,0 +781,12 @@\n+  const AF_Script_UniRangeRec  af_rohg_uniranges[] =\n+  {\n+    AF_UNIRANGE_REC( 0x10D00, 0x10D3F ),   \/* Hanifi Rohingya *\/\n+    AF_UNIRANGE_REC(       0,       0 )\n+  };\n+\n+  const AF_Script_UniRangeRec  af_rohg_nonbase_uniranges[] =\n+  {\n+    AF_UNIRANGE_REC( 0, 0 )\n+  };\n+\n+\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afranges.c","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2013-2019 by\n+ * Copyright (C) 2013-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afranges.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2013-2019 by\n+ * Copyright (C) 2013-2020 by\n@@ -294,0 +294,6 @@\n+  SCRIPT( rohg, ROHG,\n+          \"Hanifi Rohingya\",\n+          HB_SCRIPT_HANIFI_ROHINGYA,\n+          HINTING_BOTTOM_TO_TOP,\n+          \"\\xF0\\x90\\xB4\\xB0\" ) \/* 𐴰 *\/\n+\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afscript.h","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2013-2019 by\n+ * Copyright (C) 2013-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afshaper.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2013-2019 by\n+ * Copyright (C) 2013-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afshaper.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2013-2019 by\n+ * Copyright (C) 2013-2020 by\n@@ -381,0 +381,7 @@\n+  STYLE( rohg_dflt, ROHG_DFLT,\n+         \"Hanifi Rohingya default style\",\n+         AF_WRITING_SYSTEM_LATIN,\n+         AF_SCRIPT_ROHG,\n+         AF_BLUE_STRINGSET_ROHG,\n+         AF_COVERAGE_DEFAULT )\n+\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afstyles.h","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/aftypes.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2006-2019 by\n+ * Copyright (C) 2006-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afwarp.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2006-2019 by\n+ * Copyright (C) 2006-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afwarp.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2013-2019 by\n+ * Copyright (C) 2013-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/autofit\/afwrtsys.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2008-2019 by\n+ * Copyright (C) 2008-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftadvanc.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2008-2019 by\n+ * Copyright (C) 2008-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftbase.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n@@ -297,4 +297,4 @@\n-      q1 <<=  shift;\n-      q2 <<=  shift;\n-      q3 <<=  shift;\n-      q4 <<=  shift;\n+      q1 *= 1 << shift;\n+      q2 *= 1 << shift;\n+      q3 *= 1 << shift;\n+      q4 *= 1 << shift;\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftbbox.c","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2004-2019 by\n+ * Copyright (C) 2004-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftbitmap.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftcalc.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2007-2019 by\n+ * Copyright (C) 2007-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftcid.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n@@ -624,2 +624,4 @@\n-            \"freeing memory block at %p more than once at (%s:%ld)\\n\"\n-            \"block allocated at (%s:%ld) and released at (%s:%ld)\",\n+            \"freeing memory block at %p more than once\\n\"\n+            \"  at (%s:%ld)!\\n\"\n+            \"  Block was allocated at (%s:%ld)\\n\"\n+            \"  and released at (%s:%ld).\",\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftdbgmem.c","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftdebug.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftfntfmt.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2008-2019 by\n+ * Copyright (C) 2008-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftfstype.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2007-2019 by\n+ * Copyright (C) 2007-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftgasp.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n@@ -149,3 +149,3 @@\n-    current->points   = base->points   + base->n_points;\n-    current->tags     = base->tags     + base->n_points;\n-    current->contours = base->contours + base->n_contours;\n+    current->points   = FT_OFFSET( base->points,   base->n_points );\n+    current->tags     = FT_OFFSET( base->tags,     base->n_points );\n+    current->contours = FT_OFFSET( base->contours, base->n_contours );\n@@ -172,0 +172,4 @@\n+    if ( loader->max_points == 0           ||\n+         loader->base.extra_points != NULL )\n+      return FT_Err_Ok;\n+\n@@ -192,1 +196,1 @@\n-    current->subglyphs = base->subglyphs + base->num_subglyphs;\n+    current->subglyphs = FT_OFFSET( base->subglyphs, base->num_subglyphs );\n@@ -214,0 +218,4 @@\n+    error = FT_GlyphLoader_CreateExtra( loader );\n+    if ( error )\n+      return error;\n+\n@@ -247,0 +255,4 @@\n+    error = FT_GlyphLoader_CreateExtra( loader );\n+    if ( error )\n+      return error;\n+\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftgloadr.c","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftglyph.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftinit.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2006-2019 by\n+ * Copyright (C) 2006-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftlcdfil.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftmac.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftmm.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftobjs.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n@@ -714,1 +714,1 @@\n-    if ( !outline || !matrix )\n+    if ( !outline || !matrix || !outline->points )\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftoutln.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 2007-2019 by\n+ * Copyright (C) 2007-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftpatent.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 2017-2019 by\n+ * Copyright (C) 2017-2020 by\n@@ -168,2 +168,0 @@\n-\n-        return error;\n@@ -171,0 +169,2 @@\n+\n+      return error;\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftpsprop.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2004-2019 by\n+ * Copyright (C) 2004-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftrfork.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftsnames.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2000-2019 by\n+ * Copyright (C) 2000-2020 by\n@@ -289,1 +289,1 @@\n-      stream->limit  = stream->cursor + count;\n+      stream->limit  = FT_OFFSET( stream->cursor, count );\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftstream.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n@@ -543,3 +543,3 @@\n-    FT_Angle   total, angle, step, rotate, next, theta;\n-    FT_Vector  a, b, a2, b2;\n-    FT_Fixed   length;\n+    FT_Fixed   coef;\n+    FT_Vector  a0, a1, a2, a3;\n+    FT_Int     i, arcs = 1;\n@@ -549,4 +549,4 @@\n-    \/* compute start point *\/\n-    FT_Vector_From_Polar( &a, radius, angle_start );\n-    a.x += center->x;\n-    a.y += center->y;\n+    \/* number of cubic arcs to draw *\/\n+    while (  angle_diff > FT_ARC_CUBIC_ANGLE * arcs ||\n+            -angle_diff > FT_ARC_CUBIC_ANGLE * arcs )\n+      arcs++;\n@@ -554,3 +554,3 @@\n-    total  = angle_diff;\n-    angle  = angle_start;\n-    rotate = ( angle_diff >= 0 ) ? FT_ANGLE_PI2 : -FT_ANGLE_PI2;\n+    \/* control tangents *\/\n+    coef  = FT_Tan( angle_diff \/ ( 4 * arcs ) );\n+    coef += coef \/ 3;\n@@ -558,13 +558,4 @@\n-    while ( total != 0 )\n-    {\n-      step = total;\n-      if ( step > FT_ARC_CUBIC_ANGLE )\n-        step = FT_ARC_CUBIC_ANGLE;\n-\n-      else if ( step < -FT_ARC_CUBIC_ANGLE )\n-        step = -FT_ARC_CUBIC_ANGLE;\n-\n-      next  = angle + step;\n-      theta = step;\n-      if ( theta < 0 )\n-        theta = -theta;\n+    \/* compute start and first control point *\/\n+    FT_Vector_From_Polar( &a0, radius, angle_start );\n+    a1.x = FT_MulFix( -a0.y, coef );\n+    a1.y = FT_MulFix(  a0.x, coef );\n@@ -572,1 +563,4 @@\n-      theta >>= 1;\n+    a0.x += center->x;\n+    a0.y += center->y;\n+    a1.x += a0.x;\n+    a1.y += a0.y;\n@@ -574,12 +568,7 @@\n-      \/* compute end point *\/\n-      FT_Vector_From_Polar( &b, radius, next );\n-      b.x += center->x;\n-      b.y += center->y;\n-\n-      \/* compute first and second control points *\/\n-      length = FT_MulDiv( radius, FT_Sin( theta ) * 4,\n-                          ( 0x10000L + FT_Cos( theta ) ) * 3 );\n-\n-      FT_Vector_From_Polar( &a2, length, angle + rotate );\n-      a2.x += a.x;\n-      a2.y += a.y;\n+    for ( i = 1; i <= arcs; i++ )\n+    {\n+      \/* compute end and second control point *\/\n+      FT_Vector_From_Polar( &a3, radius,\n+                            angle_start + i * angle_diff \/ arcs );\n+      a2.x = FT_MulFix(  a3.y, coef );\n+      a2.y = FT_MulFix( -a3.x, coef );\n@@ -587,3 +576,4 @@\n-      FT_Vector_From_Polar( &b2, length, next - rotate );\n-      b2.x += b.x;\n-      b2.y += b.y;\n+      a3.x += center->x;\n+      a3.y += center->y;\n+      a2.x += a3.x;\n+      a2.y += a3.y;\n@@ -592,1 +582,1 @@\n-      error = ft_stroke_border_cubicto( border, &a2, &b2, &b );\n+      error = ft_stroke_border_cubicto( border, &a1, &a2, &a3 );\n@@ -596,4 +586,3 @@\n-      \/* process the rest of the arc ?? *\/\n-      a      = b;\n-      total -= step;\n-      angle  = next;\n+      \/* a0 = a3; *\/\n+      a1.x = a3.x - a2.x + a3.x;\n+      a1.y = a3.y - a2.y + a3.y;\n@@ -937,1 +926,1 @@\n-    else if ( stroker->line_cap == FT_STROKER_LINECAP_SQUARE )\n+    else\n@@ -939,3 +928,2 @@\n-      \/* add a square cap *\/\n-      FT_Vector        delta, delta2;\n-      FT_Angle         rotate = FT_SIDE_TO_ROTATE( side );\n+      \/* add a square or butt cap *\/\n+      FT_Vector        middle, delta;\n@@ -946,26 +934,4 @@\n-      FT_Vector_From_Polar( &delta2, radius, angle + rotate );\n-      FT_Vector_From_Polar( &delta,  radius, angle );\n-\n-      delta.x += stroker->center.x + delta2.x;\n-      delta.y += stroker->center.y + delta2.y;\n-\n-      error = ft_stroke_border_lineto( border, &delta, FALSE );\n-      if ( error )\n-        goto Exit;\n-\n-      FT_Vector_From_Polar( &delta2, radius, angle - rotate );\n-      FT_Vector_From_Polar( &delta,  radius, angle );\n-\n-      delta.x += delta2.x + stroker->center.x;\n-      delta.y += delta2.y + stroker->center.y;\n-\n-      error = ft_stroke_border_lineto( border, &delta, FALSE );\n-    }\n-    else if ( stroker->line_cap == FT_STROKER_LINECAP_BUTT )\n-    {\n-      \/* add a butt ending *\/\n-      FT_Vector        delta;\n-      FT_Angle         rotate = FT_SIDE_TO_ROTATE( side );\n-      FT_Fixed         radius = stroker->radius;\n-      FT_StrokeBorder  border = stroker->borders + side;\n-\n+      \/* compute middle point and first angle point *\/\n+      FT_Vector_From_Polar( &middle, radius, angle );\n+      delta.x = side ?  middle.y : -middle.y;\n+      delta.y = side ? -middle.x :  middle.x;\n@@ -973,1 +939,10 @@\n-      FT_Vector_From_Polar( &delta, radius, angle + rotate );\n+      if ( stroker->line_cap == FT_STROKER_LINECAP_SQUARE )\n+      {\n+        middle.x += stroker->center.x;\n+        middle.y += stroker->center.y;\n+      }\n+      else  \/* FT_STROKER_LINECAP_BUTT *\/\n+      {\n+        middle.x  = stroker->center.x;\n+        middle.y  = stroker->center.y;\n+      }\n@@ -975,2 +950,2 @@\n-      delta.x += stroker->center.x;\n-      delta.y += stroker->center.y;\n+      delta.x  += middle.x;\n+      delta.y  += middle.y;\n@@ -982,4 +957,3 @@\n-      FT_Vector_From_Polar( &delta, radius, angle - rotate );\n-\n-      delta.x += stroker->center.x;\n-      delta.y += stroker->center.y;\n+      \/* compute second angle point *\/\n+      delta.x = middle.x - delta.x + middle.x;\n+      delta.y = middle.y - delta.y + middle.y;\n@@ -1003,2 +977,2 @@\n-    FT_Fixed         length, thcos;\n-    FT_Vector        delta;\n+    FT_Fixed         length;\n+    FT_Vector        sigma, delta;\n@@ -1022,2 +996,1 @@\n-      FT_Fixed  min_length = ft_pos_abs( FT_MulFix( stroker->radius,\n-                                                    FT_Tan( theta ) ) );\n+      FT_Fixed  min_length;\n@@ -1026,0 +999,4 @@\n+      FT_Vector_Unit( &sigma, theta );\n+      min_length =\n+        ft_pos_abs( FT_MulDiv( stroker->radius, sigma.y, sigma.x ) );\n+\n@@ -1043,3 +1020,1 @@\n-      phi = stroker->angle_in + theta;\n-\n-      thcos = FT_Cos( theta );\n+      phi = stroker->angle_in + theta + rotate;\n@@ -1047,1 +1022,1 @@\n-      length = FT_DivFix( stroker->radius, thcos );\n+      length = FT_DivFix( stroker->radius, sigma.x );\n@@ -1049,1 +1024,1 @@\n-      FT_Vector_From_Polar( &delta, length, phi + rotate );\n+      FT_Vector_From_Polar( &delta, length, phi );\n@@ -1076,4 +1051,4 @@\n-      FT_Fixed  sigma = 0, radius = stroker->radius;\n-      FT_Angle  theta = 0, phi = 0;\n-      FT_Fixed  thcos = 0;\n-      FT_Bool   bevel, fixed_bevel;\n+      FT_Fixed   radius = stroker->radius;\n+      FT_Vector  sigma;\n+      FT_Angle   theta = 0, phi = 0;\n+      FT_Bool    bevel, fixed_bevel;\n@@ -1090,0 +1065,1 @@\n+      \/* check miter limit first *\/\n@@ -1092,1 +1068,1 @@\n-        theta = FT_Angle_Diff( stroker->angle_in, stroker->angle_out );\n+        theta = FT_Angle_Diff( stroker->angle_in, stroker->angle_out ) \/ 2;\n@@ -1094,10 +1070,2 @@\n-        if ( theta == FT_ANGLE_PI )\n-        {\n-          theta = rotate;\n-          phi   = stroker->angle_in;\n-        }\n-        else\n-        {\n-          theta \/= 2;\n-          phi    = stroker->angle_in + theta + rotate;\n-        }\n+        if ( theta == FT_ANGLE_PI2 )\n+          theta = -rotate;\n@@ -1105,2 +1073,3 @@\n-        thcos = FT_Cos( theta );\n-        sigma = FT_MulFix( stroker->miter_limit, thcos );\n+        phi    = stroker->angle_in + theta + rotate;\n+\n+        FT_Vector_From_Polar( &sigma, stroker->miter_limit, theta );\n@@ -1109,1 +1078,1 @@\n-        if ( sigma < 0x10000L )\n+        if ( sigma.x < 0x10000L )\n@@ -1136,1 +1105,1 @@\n-        else \/* variable bevel *\/\n+        else \/* variable bevel or clipped miter *\/\n@@ -1140,1 +1109,1 @@\n-          FT_Fixed   length;\n+          FT_Fixed   coef;\n@@ -1143,1 +1112,1 @@\n-          \/* compute middle point *\/\n+          \/* compute middle point and first angle point *\/\n@@ -1147,2 +1116,0 @@\n-          middle.x += stroker->center.x;\n-          middle.y += stroker->center.y;\n@@ -1150,3 +1117,3 @@\n-          \/* compute first angle point *\/\n-          length = FT_MulDiv( radius, 0x10000L - sigma,\n-                              ft_pos_abs( FT_Sin( theta ) ) );\n+          coef    = FT_DivFix(  0x10000L - sigma.x, sigma.y );\n+          delta.x = FT_MulFix(  middle.y, coef );\n+          delta.y = FT_MulFix( -middle.x, coef );\n@@ -1154,3 +1121,4 @@\n-          FT_Vector_From_Polar( &delta, length, phi + rotate );\n-          delta.x += middle.x;\n-          delta.y += middle.y;\n+          middle.x += stroker->center.x;\n+          middle.y += stroker->center.y;\n+          delta.x  += middle.x;\n+          delta.y  += middle.y;\n@@ -1163,3 +1131,2 @@\n-          FT_Vector_From_Polar( &delta, length, phi - rotate );\n-          delta.x += middle.x;\n-          delta.y += middle.y;\n+          delta.x = middle.x - delta.x + middle.x;\n+          delta.y = middle.y - delta.y + middle.y;\n@@ -1192,1 +1159,1 @@\n-        length = FT_DivFix( stroker->radius, thcos );\n+        length = FT_MulDiv( stroker->radius, stroker->miter_limit, sigma.x );\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftstroke.c","additions":91,"deletions":124,"binary":false,"changes":215,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2000-2019 by\n+ * Copyright (C) 2000-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftsynth.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftsystem.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/fttrigon.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/fttype1.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/base\/ftutil.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cff\/cffcmap.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cff\/cffcmap.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cff\/cffdrivr.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cff\/cffdrivr.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cff\/cfferrs.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cff\/cffgload.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cff\/cffgload.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n@@ -2060,1 +2060,1 @@\n-      error = cff_parser_run( &parser, dict, dict + dict_len );\n+      error = cff_parser_run( &parser, dict, FT_OFFSET( dict, dict_len ) );\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cff\/cffload.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cff\/cffload.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n@@ -1021,3 +1021,3 @@\n-      \/* CID-keyed CFF fonts don't have glyph names -- the SFNT loader *\/\n-      \/* has unset this flag because of the 3.0 `post' table.          *\/\n-      if ( dict->cid_registry == 0xFFFFU )\n+      \/* CID-keyed CFF or CFF2 fonts don't have glyph names -- the SFNT *\/\n+      \/* loader has unset this flag because of the 3.0 `post' table.    *\/\n+      if ( dict->cid_registry == 0xFFFFU && !cff2 )\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cff\/cffobjs.c","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cff\/cffobjs.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cff\/cffparse.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cff\/cffparse.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cff\/cfftoken.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cid\/ciderrs.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cid\/cidgload.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cid\/cidgload.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n@@ -718,1 +718,1 @@\n-        val = (FT_Byte)( *p - 'a' );\n+        val = (FT_Byte)( *p - 'a' + 10 );\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cid\/cidload.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cid\/cidload.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cid\/cidobjs.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cid\/cidobjs.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cid\/cidparse.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cid\/cidparse.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cid\/cidriver.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cid\/cidriver.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/cid\/cidtoken.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2006-2019 by\n+ * Copyright (C) 2006-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psaux\/afmparse.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2006-2019 by\n+ * Copyright (C) 2006-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psaux\/afmparse.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2017-2019 by\n+ * Copyright (C) 2017-2020 by\n@@ -333,1 +333,1 @@\n-    builder->pos_x = adx - asb;\n+    builder->pos_x = SUB_LONG( adx, asb );\n@@ -533,0 +533,3 @@\n+    if ( !charstring_base )\n+      return FT_Err_Ok;\n+\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psaux\/cffdecode.c","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2017-2019 by\n+ * Copyright (C) 2017-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psaux\/cffdecode.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psaux\/psauxerr.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2000-2019 by\n+ * Copyright (C) 2000-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psaux\/psauxmod.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2000-2019 by\n+ * Copyright (C) 2000-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psaux\/psauxmod.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2006-2019 by\n+ * Copyright (C) 2006-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psaux\/psconv.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2006-2019 by\n+ * Copyright (C) 2006-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psaux\/psconv.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -316,1 +316,1 @@\n-    FT_Bool    is_t1 = decoder->builder.is_t1;\n+    FT_Bool  is_t1 = decoder->builder.is_t1;\n@@ -388,1 +388,1 @@\n-      buf.end   = charstring_base + charstring_len;\n+      buf.end   = FT_OFFSET( charstring_base, charstring_len );\n@@ -700,1 +700,1 @@\n-    buf->end   = charstring + len;\n+    buf->end   = FT_OFFSET( charstring, len );\n@@ -823,1 +823,1 @@\n-        buf->end = buf->start + decoder->locals_len[idx];\n+        buf->end = FT_OFFSET( buf->start, decoder->locals_len[idx] );\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psaux\/psft.c","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1436,0 +1436,7 @@\n+\n+                    \/* save the left bearing and width of the SEAC   *\/\n+                    \/* glyph as they will be erased by the next load *\/\n+\n+                    left_bearing = *decoder->builder.left_bearing;\n+                    advance      = *decoder->builder.advance;\n+\n@@ -1446,2 +1453,2 @@\n-                    \/* save the left bearing and width of the base       *\/\n-                    \/* character as they will be erased by the next load *\/\n+                    \/* If the SEAC glyph doesn't have a (H)SBW of its *\/\n+                    \/* own use the values from the base glyph.        *\/\n@@ -1449,2 +1456,5 @@\n-                    left_bearing = *decoder->builder.left_bearing;\n-                    advance      = *decoder->builder.advance;\n+                    if ( !haveWidth )\n+                    {\n+                      left_bearing = *decoder->builder.left_bearing;\n+                      advance      = *decoder->builder.advance;\n+                    }\n@@ -1476,2 +1486,2 @@\n-                    \/* restore the left side bearing and   *\/\n-                    \/* advance width of the base character *\/\n+                    \/* restore the left side bearing and advance width   *\/\n+                    \/* of the SEAC glyph or base character (saved above) *\/\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psaux\/psintrp.c","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n@@ -217,1 +217,1 @@\n-    table->elements[idx] = table->block + table->cursor;\n+    table->elements[idx] = FT_OFFSET( table->block, table->cursor );\n@@ -2580,1 +2580,1 @@\n-                         buffer + length,\n+                         FT_OFFSET( buffer, length ),\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psaux\/psobjs.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psaux\/psobjs.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psaux\/t1cmap.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psaux\/t1cmap.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2000-2019 by\n+ * Copyright (C) 2000-2020 by\n@@ -370,0 +370,6 @@\n+    \/* save the left bearing and width of the SEAC   *\/\n+    \/* glyph as they will be erased by the next load *\/\n+\n+    left_bearing = decoder->builder.left_bearing;\n+    advance      = decoder->builder.advance;\n+\n@@ -377,2 +383,2 @@\n-    \/* save the left bearing and width of the base character *\/\n-    \/* as they will be erased by the next load.              *\/\n+    \/* If the SEAC glyph doesn't have a (H)SBW of its *\/\n+    \/* own use the values from the base glyph.        *\/\n@@ -380,2 +386,5 @@\n-    left_bearing = decoder->builder.left_bearing;\n-    advance      = decoder->builder.advance;\n+    if ( decoder->builder.parse_state != T1_Parse_Have_Width )\n+    {\n+      left_bearing = decoder->builder.left_bearing;\n+      advance      = decoder->builder.advance;\n+    }\n@@ -399,2 +408,2 @@\n-    \/* restore the left side bearing and   *\/\n-    \/* advance width of the base character *\/\n+    \/* restore the left side bearing and advance width   *\/\n+    \/* of the SEAC glyph or base character (saved above) *\/\n@@ -653,1 +662,0 @@\n-          {\n@@ -656,1 +664,0 @@\n-          }\n@@ -1693,0 +1700,1 @@\n+    FT_Bool          large_int;\n@@ -1710,0 +1718,2 @@\n+    large_int = FALSE;\n+\n@@ -1770,0 +1780,3 @@\n+        case 12:\n+          op = op_div;\n+          break;\n@@ -1799,3 +1812,8 @@\n-          FT_ERROR(( \"t1_decoder_parse_metrics:\"\n-                     \" large integer found for width\\n\" ));\n-          goto Syntax_Error;\n+          if ( large_int )\n+          {\n+            FT_ERROR(( \"t1_decoder_parse_metrics:\"\n+                       \" no `div' after large integer\\n\" ));\n+            goto Syntax_Error;\n+          }\n+          else\n+            large_int = TRUE;\n@@ -1805,1 +1823,2 @@\n-          value = (FT_Int32)( (FT_UInt32)value << 16 );\n+          if ( !large_int )\n+            value = (FT_Int32)( (FT_UInt32)value << 16 );\n@@ -1830,1 +1849,2 @@\n-          value = (FT_Int32)( (FT_UInt32)value << 16 );\n+          if ( !large_int )\n+            value = (FT_Int32)( (FT_UInt32)value << 16 );\n@@ -1840,0 +1860,7 @@\n+      if ( large_int && !( op == op_none || op == op_div ) )\n+      {\n+        FT_ERROR(( \"t1_decoder_parse_metrics:\"\n+                   \" no `div' after large integer\\n\" ));\n+        goto Syntax_Error;\n+      }\n+\n@@ -1854,0 +1881,3 @@\n+        if ( large_int )\n+          FT_TRACE4(( \" %d\", value ));\n+        else\n@@ -1872,5 +1902,8 @@\n-        if ( top - decoder->stack != num_args )\n-          FT_TRACE0(( \"t1_decoder_parse_metrics:\"\n-                      \" too much operands on the stack\"\n-                      \" (seen %d, expected %d)\\n\",\n-                      top - decoder->stack, num_args ));\n+        if ( op != op_div )\n+        {\n+          if ( top - decoder->stack != num_args )\n+            FT_TRACE0(( \"t1_decoder_parse_metrics:\"\n+                        \" too much operands on the stack\"\n+                        \" (seen %d, expected %d)\\n\",\n+                        top - decoder->stack, num_args ));\n+        }\n@@ -1920,0 +1953,12 @@\n+        case op_div:\n+          FT_TRACE4(( \" div\" ));\n+\n+          \/* if `large_int' is set, we divide unscaled numbers; *\/\n+          \/* otherwise, we divide numbers in 16.16 format --    *\/\n+          \/* in both cases, it is the same operation            *\/\n+          *top = FT_DivFix( top[0], top[1] );\n+          top++;\n+\n+          large_int = FALSE;\n+          break;\n+\n@@ -1926,0 +1971,2 @@\n+        decoder->top = top;\n+\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psaux\/t1decode.c","additions":66,"deletions":19,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2000-2019 by\n+ * Copyright (C) 2000-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psaux\/t1decode.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/pshinter\/pshalgo.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/pshinter\/pshalgo.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/pshinter\/pshglob.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/pshinter\/pshglob.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/pshinter\/pshmod.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/pshinter\/pshmod.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2003-2019 by\n+ * Copyright (C) 2003-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/pshinter\/pshnterr.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/pshinter\/pshrec.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/pshinter\/pshrec.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psnames\/psmodule.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psnames\/psmodule.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psnames\/psnamerr.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2005-2019 by\n+ * Copyright (C) 2005-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/psnames\/pstables.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 2005-2019 by\n+ * Copyright (C) 2005-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/raster\/ftmisc.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/raster\/ftraster.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/raster\/ftraster.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/raster\/ftrend1.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/raster\/ftrend1.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/raster\/rasterrs.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2013-2019 by\n+ * Copyright (C) 2013-2020 by\n@@ -71,0 +71,1 @@\n+    defined( __SSE__ )                                                 && \\\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/pngshim.c","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2013-2019 by\n+ * Copyright (C) 2013-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/pngshim.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/sfdriver.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/sfdriver.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/sferrors.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n@@ -25,0 +25,1 @@\n+#include \"sfwoff2.h\"\n@@ -344,1 +345,3 @@\n-                  TT_Face    face )\n+                  TT_Face    face,\n+                  FT_Int*    face_instance_index,\n+                  FT_Long*   woff2_num_faces )\n@@ -388,0 +391,19 @@\n+    if ( tag == TTAG_wOF2 )\n+    {\n+      FT_TRACE2(( \"sfnt_open_font: file is a WOFF2; synthesizing SFNT\\n\" ));\n+\n+      if ( FT_STREAM_SEEK( offset ) )\n+        return error;\n+\n+      error = woff2_open_font( stream,\n+                               face,\n+                               face_instance_index,\n+                               woff2_num_faces );\n+      if ( error )\n+        return error;\n+\n+      \/* Swap out stream and retry! *\/\n+      stream = face->root.stream;\n+      goto retry;\n+    }\n+\n@@ -464,1 +486,1 @@\n-    FT_Library    library = face->root.driver->root.library;\n+    FT_Library    library         = face->root.driver->root.library;\n@@ -467,0 +489,1 @@\n+    FT_Long       woff2_num_faces = 0;\n@@ -517,1 +540,4 @@\n-    error = sfnt_open_font( stream, face );\n+    error = sfnt_open_font( stream,\n+                            face,\n+                            &face_instance_index,\n+                            &woff2_num_faces );\n@@ -692,0 +718,4 @@\n+    \/* `num_faces' for a WOFF2 needs to be handled separately. *\/\n+    if ( woff2_num_faces )\n+      face->root.num_faces = woff2_num_faces;\n+\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/sfobjs.c","additions":34,"deletions":4,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/sfobjs.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n@@ -374,1 +374,1 @@\n-          goto Exit;\n+          goto Exit1;\n@@ -379,1 +379,1 @@\n-          goto Exit;\n+          goto Exit1;\n@@ -385,1 +385,1 @@\n-        goto Exit;\n+        goto Exit1;\n@@ -427,0 +427,4 @@\n+\n+  Exit1:\n+    FT_FRAME_EXIT();\n+    goto Exit;\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/sfwoff.c","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/sfwoff.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,2328 @@\n+\/****************************************************************************\n+ *\n+ * sfwoff2.c\n+ *\n+ *   WOFF2 format management (base).\n+ *\n+ * Copyright (C) 2019-2020 by\n+ * Nikhil Ramakrishnan, David Turner, Robert Wilhelm, and Werner Lemberg.\n+ *\n+ * This file is part of the FreeType project, and may only be used,\n+ * modified, and distributed under the terms of the FreeType project\n+ * license, LICENSE.TXT.  By continuing to use, modify, or distribute\n+ * this file you indicate that you have read the license and\n+ * understand and accept it fully.\n+ *\n+ *\/\n+\n+#include <ft2build.h>\n+#include \"sfwoff2.h\"\n+#include \"woff2tags.h\"\n+#include FT_TRUETYPE_TAGS_H\n+#include FT_INTERNAL_DEBUG_H\n+#include FT_INTERNAL_STREAM_H\n+\n+\n+#ifdef FT_CONFIG_OPTION_USE_BROTLI\n+\n+#include <brotli\/decode.h>\n+\n+#endif\n+\n+\n+  \/**************************************************************************\n+   *\n+   * The macro FT_COMPONENT is used in trace mode.  It is an implicit\n+   * parameter of the FT_TRACE() and FT_ERROR() macros, used to print\/log\n+   * messages during execution.\n+   *\/\n+#undef  FT_COMPONENT\n+#define FT_COMPONENT  sfwoff2\n+\n+\n+#define READ_255USHORT( var )  FT_SET_ERROR( Read255UShort( stream, &var ) )\n+\n+#define READ_BASE128( var )    FT_SET_ERROR( ReadBase128( stream, &var ) )\n+\n+#define ROUND4( var )          ( ( var + 3 ) & ~3 )\n+\n+#define WRITE_USHORT( p, v )                \\\n+          do                                \\\n+          {                                 \\\n+            *(p)++ = (FT_Byte)( (v) >> 8 ); \\\n+            *(p)++ = (FT_Byte)( (v) >> 0 ); \\\n+                                            \\\n+          } while ( 0 )\n+\n+#define WRITE_ULONG( p, v )                  \\\n+          do                                 \\\n+          {                                  \\\n+            *(p)++ = (FT_Byte)( (v) >> 24 ); \\\n+            *(p)++ = (FT_Byte)( (v) >> 16 ); \\\n+            *(p)++ = (FT_Byte)( (v) >>  8 ); \\\n+            *(p)++ = (FT_Byte)( (v) >>  0 ); \\\n+                                             \\\n+          } while ( 0 )\n+\n+#define WRITE_SHORT( p, v )        \\\n+          do                       \\\n+          {                        \\\n+            *(p)++ = ( (v) >> 8 ); \\\n+            *(p)++ = ( (v) >> 0 ); \\\n+                                   \\\n+          } while ( 0 )\n+\n+#define WRITE_SFNT_BUF( buf, s ) \\\n+          write_buf( &sfnt, sfnt_size, &dest_offset, buf, s, memory )\n+\n+#define WRITE_SFNT_BUF_AT( offset, buf, s ) \\\n+          write_buf( &sfnt, sfnt_size, &offset, buf, s, memory )\n+\n+#define N_CONTOUR_STREAM    0\n+#define N_POINTS_STREAM     1\n+#define FLAG_STREAM         2\n+#define GLYPH_STREAM        3\n+#define COMPOSITE_STREAM    4\n+#define BBOX_STREAM         5\n+#define INSTRUCTION_STREAM  6\n+\n+\n+  static void\n+  stream_close( FT_Stream  stream )\n+  {\n+    FT_Memory  memory = stream->memory;\n+\n+\n+    FT_FREE( stream->base );\n+\n+    stream->size  = 0;\n+    stream->base  = NULL;\n+    stream->close = NULL;\n+  }\n+\n+\n+  FT_CALLBACK_DEF( int )\n+  compare_tags( const void*  a,\n+                const void*  b )\n+  {\n+    WOFF2_Table  table1 = *(WOFF2_Table*)a;\n+    WOFF2_Table  table2 = *(WOFF2_Table*)b;\n+\n+    FT_ULong  tag1 = table1->Tag;\n+    FT_ULong  tag2 = table2->Tag;\n+\n+\n+    if ( tag1 > tag2 )\n+      return 1;\n+    else if ( tag1 < tag2 )\n+      return -1;\n+    else\n+      return 0;\n+  }\n+\n+\n+  static FT_Error\n+  Read255UShort( FT_Stream   stream,\n+                 FT_UShort*  value )\n+  {\n+    static const FT_Int  oneMoreByteCode1 = 255;\n+    static const FT_Int  oneMoreByteCode2 = 254;\n+    static const FT_Int  wordCode         = 253;\n+    static const FT_Int  lowestUCode      = 253;\n+\n+    FT_Error   error        = FT_Err_Ok;\n+    FT_Byte    code;\n+    FT_Byte    result_byte  = 0;\n+    FT_UShort  result_short = 0;\n+\n+\n+    if ( FT_READ_BYTE( code ) )\n+      return error;\n+    if ( code == wordCode )\n+    {\n+      \/* Read next two bytes and store `FT_UShort' value. *\/\n+      if ( FT_READ_USHORT( result_short ) )\n+        return error;\n+      *value = result_short;\n+      return FT_Err_Ok;\n+    }\n+    else if ( code == oneMoreByteCode1 )\n+    {\n+      if ( FT_READ_BYTE( result_byte ) )\n+        return error;\n+      *value = result_byte + lowestUCode;\n+      return FT_Err_Ok;\n+    }\n+    else if ( code == oneMoreByteCode2 )\n+    {\n+      if ( FT_READ_BYTE( result_byte ) )\n+        return error;\n+      *value = result_byte + lowestUCode * 2;\n+      return FT_Err_Ok;\n+    }\n+    else\n+    {\n+      *value = code;\n+      return FT_Err_Ok;\n+    }\n+  }\n+\n+\n+  static FT_Error\n+  ReadBase128( FT_Stream  stream,\n+               FT_ULong*  value )\n+  {\n+    FT_ULong  result = 0;\n+    FT_Int    i;\n+    FT_Byte   code;\n+    FT_Error  error  = FT_Err_Ok;\n+\n+\n+    for ( i = 0; i < 5; ++i )\n+    {\n+      code = 0;\n+      if ( FT_READ_BYTE( code ) )\n+        return error;\n+\n+      \/* Leading zeros are invalid. *\/\n+      if ( i == 0 && code == 0x80 )\n+        return FT_THROW( Invalid_Table );\n+\n+      \/* If any of top seven bits are set then we're about to overflow. *\/\n+      if ( result & 0xfe000000 )\n+        return FT_THROW( Invalid_Table );\n+\n+      result = ( result << 7 ) | ( code & 0x7f );\n+\n+      \/* Spin until most significant bit of data byte is false. *\/\n+      if ( ( code & 0x80 ) == 0 )\n+      {\n+        *value = result;\n+        return FT_Err_Ok;\n+      }\n+    }\n+\n+    \/* Make sure not to exceed the size bound. *\/\n+    return FT_THROW( Invalid_Table );\n+  }\n+\n+\n+  \/* Extend memory of `dst_bytes' buffer and copy data from `src'. *\/\n+  static FT_Error\n+  write_buf( FT_Byte**  dst_bytes,\n+             FT_ULong*  dst_size,\n+             FT_ULong*  offset,\n+             FT_Byte*   src,\n+             FT_ULong   size,\n+             FT_Memory  memory )\n+  {\n+    FT_Error  error = FT_Err_Ok;\n+    \/* We are reallocating memory for `dst', so its pointer may change. *\/\n+    FT_Byte*  dst   = *dst_bytes;\n+\n+\n+    \/* Check whether we are within limits. *\/\n+    if ( ( *offset + size ) > WOFF2_DEFAULT_MAX_SIZE  )\n+      return FT_THROW( Array_Too_Large );\n+\n+    \/* Reallocate `dst'. *\/\n+    if ( ( *offset + size ) > *dst_size )\n+    {\n+      FT_TRACE6(( \"Reallocating %lu to %lu.\\n\",\n+                  *dst_size, (*offset + size) ));\n+      if ( FT_REALLOC( dst,\n+                       (FT_ULong)( *dst_size ),\n+                       (FT_ULong)( *offset + size ) ) )\n+        goto Exit;\n+\n+      *dst_size = *offset + size;\n+    }\n+\n+    \/* Copy data. *\/\n+    ft_memcpy( dst + *offset, src, size );\n+\n+    *offset += size;\n+    \/* Set pointer of `dst' to its correct value. *\/\n+    *dst_bytes = dst;\n+\n+  Exit:\n+    return error;\n+  }\n+\n+\n+  \/* Pad buffer to closest multiple of 4. *\/\n+  static FT_Error\n+  pad4( FT_Byte**  sfnt_bytes,\n+        FT_ULong*  sfnt_size,\n+        FT_ULong*  out_offset,\n+        FT_Memory  memory )\n+  {\n+    FT_Byte*  sfnt        = *sfnt_bytes;\n+    FT_ULong  dest_offset = *out_offset;\n+\n+    FT_Byte   zeroes[] = { 0, 0, 0 };\n+    FT_ULong  pad_bytes;\n+\n+\n+    if ( dest_offset + 3 < dest_offset )\n+      return FT_THROW( Invalid_Table );\n+\n+    pad_bytes = ROUND4( dest_offset ) - dest_offset;\n+    if ( pad_bytes > 0 )\n+    {\n+      if ( WRITE_SFNT_BUF( &zeroes[0], pad_bytes ) )\n+        return FT_THROW( Invalid_Table );\n+    }\n+\n+    *sfnt_bytes = sfnt;\n+    *out_offset = dest_offset;\n+    return FT_Err_Ok;\n+  }\n+\n+\n+  \/* Calculate table checksum of `buf'. *\/\n+  static FT_Long\n+  compute_ULong_sum( FT_Byte*  buf,\n+                     FT_ULong  size )\n+  {\n+    FT_ULong  checksum     = 0;\n+    FT_ULong  aligned_size = size & ~3;\n+    FT_ULong  i;\n+    FT_ULong  v;\n+\n+\n+    for ( i = 0; i < aligned_size; i += 4 )\n+      checksum += ( (FT_ULong)buf[i    ] << 24 ) |\n+                  ( (FT_ULong)buf[i + 1] << 16 ) |\n+                  ( (FT_ULong)buf[i + 2] <<  8 ) |\n+                  ( (FT_ULong)buf[i + 3] <<  0 );\n+\n+    \/* If size is not aligned to 4, treat as if it is padded with 0s. *\/\n+    if ( size != aligned_size )\n+    {\n+      v = 0;\n+      for ( i = aligned_size ; i < size; ++i )\n+        v |= (FT_ULong)buf[i] << ( 24 - 8 * ( i & 3 ) );\n+      checksum += v;\n+    }\n+\n+    return checksum;\n+  }\n+\n+\n+  static FT_Error\n+  woff2_decompress( FT_Byte*        dst,\n+                    FT_ULong        dst_size,\n+                    const FT_Byte*  src,\n+                    FT_ULong        src_size )\n+  {\n+#ifdef FT_CONFIG_OPTION_USE_BROTLI\n+\n+    FT_ULong             uncompressed_size = dst_size;\n+    BrotliDecoderResult  result;\n+\n+\n+    result = BrotliDecoderDecompress( src_size,\n+                                      src,\n+                                      &uncompressed_size,\n+                                      dst );\n+\n+    if ( result != BROTLI_DECODER_RESULT_SUCCESS ||\n+         uncompressed_size != dst_size           )\n+    {\n+      FT_ERROR(( \"woff2_decompress: Stream length mismatch.\\n\" ));\n+      return FT_THROW( Invalid_Table );\n+    }\n+\n+    FT_TRACE2(( \"woff2_decompress: Brotli stream decompressed.\\n\" ));\n+    return FT_Err_Ok;\n+\n+#else \/* !FT_CONFIG_OPTION_USE_BROTLI *\/\n+\n+    FT_ERROR(( \"woff2_decompress: Brotli support not available.\\n\" ));\n+    return FT_THROW( Unimplemented_Feature );\n+\n+#endif \/* !FT_CONFIG_OPTION_USE_BROTLI *\/\n+  }\n+\n+\n+  static WOFF2_Table\n+  find_table( WOFF2_Table*  tables,\n+              FT_UShort     num_tables,\n+              FT_ULong      tag )\n+  {\n+    FT_Int  i;\n+\n+\n+    for ( i = 0; i < num_tables; i++ )\n+    {\n+      if ( tables[i]->Tag == tag )\n+        return tables[i];\n+    }\n+    return NULL;\n+  }\n+\n+\n+  \/* Read `numberOfHMetrics' field from `hhea' table. *\/\n+  static FT_Error\n+  read_num_hmetrics( FT_Stream   stream,\n+                     FT_UShort*  num_hmetrics )\n+  {\n+    FT_Error   error = FT_Err_Ok;\n+    FT_UShort  num_metrics;\n+\n+\n+    if ( FT_STREAM_SKIP( 34 )  )\n+      return FT_THROW( Invalid_Table );\n+\n+    if ( FT_READ_USHORT( num_metrics ) )\n+      return FT_THROW( Invalid_Table );\n+\n+    *num_hmetrics = num_metrics;\n+\n+    return error;\n+  }\n+\n+\n+  \/* An auxiliary function for overflow-safe addition. *\/\n+  static FT_Int\n+  with_sign( FT_Byte  flag,\n+             FT_Int   base_val )\n+  {\n+    \/* Precondition: 0 <= base_val < 65536 (to avoid overflow). *\/\n+    return ( flag & 1 ) ? base_val : -base_val;\n+  }\n+\n+\n+  \/* An auxiliary function for overflow-safe addition. *\/\n+  static FT_Int\n+  safe_int_addition( FT_Int   a,\n+                     FT_Int   b,\n+                     FT_Int*  result )\n+  {\n+    if ( ( ( a > 0 ) && ( b > FT_INT_MAX - a ) ) ||\n+         ( ( a < 0 ) && ( b < FT_INT_MIN - a ) ) )\n+      return FT_THROW( Invalid_Table );\n+\n+    *result = a + b;\n+    return FT_Err_Ok;\n+  }\n+\n+\n+  \/*\n+   * Decode variable-length (flag, xCoordinate, yCoordinate) triplet for a\n+   * simple glyph.  See\n+   *\n+   *   https:\/\/www.w3.org\/TR\/WOFF2\/#triplet_decoding\n+   *\/\n+  static FT_Error\n+  triplet_decode( const FT_Byte*  flags_in,\n+                  const FT_Byte*  in,\n+                  FT_ULong        in_size,\n+                  FT_ULong        n_points,\n+                  WOFF2_Point     result,\n+                  FT_ULong*       in_bytes_used )\n+  {\n+    FT_Int  x = 0;\n+    FT_Int  y = 0;\n+    FT_Int  dx;\n+    FT_Int  dy;\n+    FT_Int  b0, b1, b2;\n+\n+    FT_ULong  triplet_index = 0;\n+    FT_ULong  data_bytes;\n+\n+    FT_UInt  i;\n+\n+\n+    if ( n_points > in_size )\n+      return FT_THROW( Invalid_Table );\n+\n+    for ( i = 0; i < n_points; ++i )\n+    {\n+      FT_Byte  flag     = flags_in[i];\n+      FT_Bool  on_curve = !( flag >> 7 );\n+\n+\n+      flag &= 0x7f;\n+      if ( flag < 84 )\n+        data_bytes = 1;\n+      else if ( flag < 120 )\n+        data_bytes = 2;\n+      else if ( flag < 124 )\n+        data_bytes = 3;\n+      else\n+        data_bytes = 4;\n+\n+      \/* Overflow checks *\/\n+      if ( triplet_index + data_bytes > in_size       ||\n+           triplet_index + data_bytes < triplet_index )\n+        return FT_THROW( Invalid_Table );\n+\n+      if ( flag < 10 )\n+      {\n+        dx = 0;\n+        dy = with_sign( flag,\n+                        ( ( flag & 14 ) << 7 ) + in[triplet_index] );\n+      }\n+      else if ( flag < 20 )\n+      {\n+        dx = with_sign( flag,\n+                        ( ( ( flag - 10 ) & 14 ) << 7 ) +\n+                          in[triplet_index] );\n+        dy = 0;\n+      }\n+      else if ( flag < 84 )\n+      {\n+        b0 = flag - 20;\n+        b1 = in[triplet_index];\n+        dx = with_sign( flag,\n+                        1 + ( b0 & 0x30 ) + ( b1 >> 4 ) );\n+        dy = with_sign( flag >> 1,\n+                        1 + ( ( b0 & 0x0c ) << 2 ) + ( b1 & 0x0f ) );\n+      }\n+      else if ( flag < 120 )\n+      {\n+        b0 = flag - 84;\n+        dx = with_sign( flag,\n+                        1 + ( ( b0 \/ 12 ) << 8 ) + in[triplet_index] );\n+        dy = with_sign( flag >> 1,\n+                        1 + ( ( ( b0 % 12 ) >> 2 ) << 8 ) +\n+                          in[triplet_index + 1] );\n+      }\n+      else if ( flag < 124 )\n+      {\n+        b2 = in[triplet_index + 1];\n+        dx = with_sign( flag,\n+                        ( in[triplet_index] << 4 ) + ( b2 >> 4 ) );\n+        dy = with_sign( flag >> 1,\n+                        ( ( b2 & 0x0f ) << 8 ) + in[triplet_index + 2] );\n+      }\n+      else\n+      {\n+        dx = with_sign( flag,\n+                        ( in[triplet_index] << 8 ) +\n+                          in[triplet_index + 1] );\n+        dy = with_sign( flag >> 1,\n+                        ( in[triplet_index + 2] << 8 ) +\n+                          in[triplet_index + 3] );\n+      }\n+\n+      triplet_index += data_bytes;\n+\n+      if ( safe_int_addition( x, dx, &x ) )\n+        return FT_THROW( Invalid_Table );\n+\n+      if ( safe_int_addition( y, dy, &y ) )\n+        return FT_THROW( Invalid_Table );\n+\n+      result[i].x        = x;\n+      result[i].y        = y;\n+      result[i].on_curve = on_curve;\n+    }\n+\n+    *in_bytes_used = triplet_index;\n+    return FT_Err_Ok;\n+  }\n+\n+\n+  \/* Store decoded points in glyph buffer. *\/\n+  static FT_Error\n+  store_points( FT_ULong           n_points,\n+                const WOFF2_Point  points,\n+                FT_UShort          n_contours,\n+                FT_UShort          instruction_len,\n+                FT_Byte*           dst,\n+                FT_ULong           dst_size,\n+                FT_ULong*          glyph_size )\n+  {\n+    FT_UInt   flag_offset  = 10 + ( 2 * n_contours ) + 2 + instruction_len;\n+    FT_Int    last_flag    = -1;\n+    FT_Int    repeat_count =  0;\n+    FT_Int    last_x       =  0;\n+    FT_Int    last_y       =  0;\n+    FT_UInt   x_bytes      =  0;\n+    FT_UInt   y_bytes      =  0;\n+    FT_UInt   xy_bytes;\n+    FT_UInt   i;\n+    FT_UInt   x_offset;\n+    FT_UInt   y_offset;\n+    FT_Byte*  pointer;\n+\n+\n+    for ( i = 0; i < n_points; ++i )\n+    {\n+      const WOFF2_PointRec  point = points[i];\n+\n+      FT_Int  flag = point.on_curve ? GLYF_ON_CURVE : 0;\n+      FT_Int  dx   = point.x - last_x;\n+      FT_Int  dy   = point.y - last_y;\n+\n+\n+      if ( dx == 0 )\n+        flag |= GLYF_THIS_X_IS_SAME;\n+      else if ( dx > -256 && dx < 256 )\n+      {\n+        flag |= GLYF_X_SHORT | ( dx > 0 ? GLYF_THIS_X_IS_SAME : 0 );\n+        x_bytes += 1;\n+      }\n+      else\n+        x_bytes += 2;\n+\n+      if ( dy == 0 )\n+        flag |= GLYF_THIS_Y_IS_SAME;\n+      else if ( dy > -256 && dy < 256 )\n+      {\n+        flag |= GLYF_Y_SHORT | ( dy > 0 ? GLYF_THIS_Y_IS_SAME : 0 );\n+        y_bytes += 1;\n+      }\n+      else\n+        y_bytes += 2;\n+\n+      if ( flag == last_flag && repeat_count != 255 )\n+      {\n+        dst[flag_offset - 1] |= GLYF_REPEAT;\n+        repeat_count++;\n+      }\n+      else\n+      {\n+        if ( repeat_count != 0 )\n+        {\n+          if ( flag_offset >= dst_size )\n+            return FT_THROW( Invalid_Table );\n+\n+          dst[flag_offset++] = repeat_count;\n+        }\n+        if ( flag_offset >= dst_size )\n+          return FT_THROW( Invalid_Table );\n+\n+        dst[flag_offset++] = flag;\n+        repeat_count       = 0;\n+      }\n+\n+      last_x    = point.x;\n+      last_y    = point.y;\n+      last_flag = flag;\n+    }\n+\n+    if ( repeat_count != 0 )\n+    {\n+      if ( flag_offset >= dst_size )\n+        return FT_THROW( Invalid_Table );\n+\n+      dst[flag_offset++] = repeat_count;\n+    }\n+\n+    xy_bytes = x_bytes + y_bytes;\n+    if ( xy_bytes < x_bytes                   ||\n+         flag_offset + xy_bytes < flag_offset ||\n+         flag_offset + xy_bytes > dst_size    )\n+      return FT_THROW( Invalid_Table );\n+\n+    x_offset = flag_offset;\n+    y_offset = flag_offset + x_bytes;\n+    last_x = 0;\n+    last_y = 0;\n+\n+    for ( i = 0; i < n_points; ++i )\n+    {\n+      FT_Int  dx = points[i].x - last_x;\n+      FT_Int  dy = points[i].y - last_y;\n+\n+\n+      if ( dx == 0 )\n+        ;\n+      else if ( dx > -256 && dx < 256 )\n+        dst[x_offset++] = FT_ABS( dx );\n+      else\n+      {\n+        pointer = dst + x_offset;\n+        WRITE_SHORT( pointer, dx );\n+        x_offset += 2;\n+      }\n+\n+      last_x += dx;\n+\n+      if ( dy == 0 )\n+        ;\n+      else if ( dy > -256 && dy < 256 )\n+        dst[y_offset++] = FT_ABS( dy );\n+      else\n+      {\n+        pointer = dst + y_offset;\n+        WRITE_SHORT( pointer, dy );\n+        y_offset += 2;\n+      }\n+\n+      last_y += dy;\n+    }\n+\n+    *glyph_size = y_offset;\n+    return FT_Err_Ok;\n+  }\n+\n+\n+  static void\n+  compute_bbox( FT_ULong           n_points,\n+                const WOFF2_Point  points,\n+                FT_Byte*           dst,\n+                FT_UShort*         src_x_min )\n+  {\n+    FT_Int  x_min = 0;\n+    FT_Int  y_min = 0;\n+    FT_Int  x_max = 0;\n+    FT_Int  y_max = 0;\n+\n+    FT_UInt  i;\n+\n+    FT_ULong  offset;\n+    FT_Byte*  pointer;\n+\n+\n+    if ( n_points > 0 )\n+    {\n+      x_min = points[0].x;\n+      y_min = points[0].y;\n+      x_max = points[0].x;\n+      y_max = points[0].y;\n+    }\n+\n+    for ( i = 1; i < n_points; ++i )\n+    {\n+      FT_Int  x = points[i].x;\n+      FT_Int  y = points[i].y;\n+\n+\n+      x_min = FT_MIN( x, x_min );\n+      y_min = FT_MIN( y, y_min );\n+      x_max = FT_MAX( x, x_max );\n+      y_max = FT_MAX( y, y_max );\n+    }\n+\n+    \/* Write values to `glyf' record. *\/\n+    offset  = 2;\n+    pointer = dst + offset;\n+\n+    WRITE_SHORT( pointer, x_min );\n+    WRITE_SHORT( pointer, y_min );\n+    WRITE_SHORT( pointer, x_max );\n+    WRITE_SHORT( pointer, y_max );\n+\n+    *src_x_min = (FT_UShort)x_min;\n+  }\n+\n+\n+  static FT_Error\n+  compositeGlyph_size( FT_Stream  stream,\n+                       FT_ULong   offset,\n+                       FT_ULong*  size,\n+                       FT_Bool*   have_instructions )\n+  {\n+    FT_Error   error        = FT_Err_Ok;\n+    FT_ULong   start_offset = offset;\n+    FT_Bool    we_have_inst = FALSE;\n+    FT_UShort  flags        = FLAG_MORE_COMPONENTS;\n+\n+\n+    if ( FT_STREAM_SEEK( start_offset ) )\n+      goto Exit;\n+    while ( flags & FLAG_MORE_COMPONENTS )\n+    {\n+      FT_ULong  arg_size;\n+\n+\n+      if ( FT_READ_USHORT( flags ) )\n+        goto Exit;\n+      we_have_inst |= ( flags & FLAG_WE_HAVE_INSTRUCTIONS ) != 0;\n+      \/* glyph index *\/\n+      arg_size = 2;\n+      if ( flags & FLAG_ARG_1_AND_2_ARE_WORDS )\n+        arg_size += 4;\n+      else\n+        arg_size += 2;\n+\n+      if ( flags & FLAG_WE_HAVE_A_SCALE )\n+        arg_size += 2;\n+      else if ( flags & FLAG_WE_HAVE_AN_X_AND_Y_SCALE )\n+        arg_size += 4;\n+      else if ( flags & FLAG_WE_HAVE_A_TWO_BY_TWO )\n+        arg_size += 8;\n+\n+      if ( FT_STREAM_SKIP( arg_size ) )\n+        goto Exit;\n+    }\n+\n+    *size              = FT_STREAM_POS() - start_offset;\n+    *have_instructions = we_have_inst;\n+\n+  Exit:\n+    return error;\n+  }\n+\n+\n+  \/* Store loca values (provided by `reconstruct_glyf') to output stream. *\/\n+  static FT_Error\n+  store_loca( FT_ULong*  loca_values,\n+              FT_ULong   loca_values_size,\n+              FT_UShort  index_format,\n+              FT_ULong*  checksum,\n+              FT_Byte**  sfnt_bytes,\n+              FT_ULong*  sfnt_size,\n+              FT_ULong*  out_offset,\n+              FT_Memory  memory )\n+  {\n+    FT_Error  error       = FT_Err_Ok;\n+    FT_Byte*  sfnt        = *sfnt_bytes;\n+    FT_ULong  dest_offset = *out_offset;\n+\n+    FT_Byte*  loca_buf = NULL;\n+    FT_Byte*  dst      = NULL;\n+\n+    FT_UInt   i = 0;\n+    FT_ULong  loca_buf_size;\n+\n+    const FT_ULong  offset_size = index_format ? 4 : 2;\n+\n+\n+    if ( ( loca_values_size << 2 ) >> 2 != loca_values_size )\n+      goto Fail;\n+\n+    loca_buf_size = loca_values_size * offset_size;\n+    if ( FT_NEW_ARRAY( loca_buf, loca_buf_size ) )\n+      goto Fail;\n+\n+    dst = loca_buf;\n+    for ( i = 0; i < loca_values_size; i++ )\n+    {\n+      FT_ULong  value = loca_values[i];\n+\n+\n+      if ( index_format )\n+        WRITE_ULONG( dst, value );\n+      else\n+        WRITE_USHORT( dst, ( value >> 1 ) );\n+    }\n+\n+    *checksum = compute_ULong_sum( loca_buf, loca_buf_size );\n+    \/* Write `loca' table to sfnt buffer. *\/\n+    if ( WRITE_SFNT_BUF( loca_buf, loca_buf_size ) )\n+      goto Fail;\n+\n+    \/* Set pointer `sfnt_bytes' to its correct value. *\/\n+    *sfnt_bytes = sfnt;\n+    *out_offset = dest_offset;\n+\n+    FT_FREE( loca_buf );\n+    return error;\n+\n+  Fail:\n+    if ( !error )\n+      error = FT_THROW( Invalid_Table );\n+\n+    FT_FREE( loca_buf );\n+\n+    return error;\n+  }\n+\n+\n+  static FT_Error\n+  reconstruct_glyf( FT_Stream    stream,\n+                    FT_ULong*    glyf_checksum,\n+                    FT_ULong*    loca_checksum,\n+                    FT_Byte**    sfnt_bytes,\n+                    FT_ULong*    sfnt_size,\n+                    FT_ULong*    out_offset,\n+                    WOFF2_Info   info,\n+                    FT_Memory    memory )\n+  {\n+    FT_Error  error = FT_Err_Ok;\n+    FT_Byte*  sfnt  = *sfnt_bytes;\n+\n+    \/* current position in stream *\/\n+    const FT_ULong  pos = FT_STREAM_POS();\n+\n+    FT_UInt  num_substreams = 7;\n+\n+    FT_UShort  num_glyphs;\n+    FT_UShort  index_format;\n+    FT_ULong   expected_loca_length;\n+    FT_UInt    offset;\n+    FT_UInt    i;\n+    FT_ULong   points_size;\n+    FT_ULong   bitmap_length;\n+    FT_ULong   glyph_buf_size;\n+    FT_ULong   bbox_bitmap_offset;\n+\n+    const FT_ULong  glyf_start  = *out_offset;\n+    FT_ULong        dest_offset = *out_offset;\n+\n+    WOFF2_Substream  substreams = NULL;\n+\n+    FT_ULong*    loca_values  = NULL;\n+    FT_UShort*   n_points_arr = NULL;\n+    FT_Byte*     glyph_buf    = NULL;\n+    WOFF2_Point  points       = NULL;\n+\n+\n+    if ( FT_NEW_ARRAY( substreams, num_substreams ) )\n+      goto Fail;\n+\n+    if ( FT_STREAM_SKIP( 4 ) )\n+      goto Fail;\n+    if ( FT_READ_USHORT( num_glyphs ) )\n+      goto Fail;\n+    if ( FT_READ_USHORT( index_format ) )\n+      goto Fail;\n+\n+    FT_TRACE4(( \"num_glyphs = %u; index_format = %u\\n\",\n+                num_glyphs, index_format ));\n+\n+    info->num_glyphs = num_glyphs;\n+\n+    \/* Calculate expected length of loca and compare.          *\/\n+    \/* See https:\/\/www.w3.org\/TR\/WOFF2\/#conform-mustRejectLoca *\/\n+    \/* index_format = 0 => Short version `loca'.               *\/\n+    \/* index_format = 1 => Long version `loca'.                *\/\n+    expected_loca_length = ( index_format ? 4 : 2 ) *\n+                             ( (FT_ULong)num_glyphs + 1 );\n+    if ( info->loca_table->dst_length != expected_loca_length )\n+      goto Fail;\n+\n+    offset = ( 2 + num_substreams ) * 4;\n+    if ( offset > info->glyf_table->TransformLength )\n+      goto Fail;\n+\n+    for ( i = 0; i < num_substreams; ++i )\n+    {\n+      FT_ULong  substream_size;\n+\n+\n+      if ( FT_READ_ULONG( substream_size ) )\n+        goto Fail;\n+      if ( substream_size > info->glyf_table->TransformLength - offset )\n+        goto Fail;\n+\n+      substreams[i].start  = pos + offset;\n+      substreams[i].offset = pos + offset;\n+      substreams[i].size   = substream_size;\n+\n+      FT_TRACE5(( \"  Substream %d: offset = %lu; size = %lu;\\n\",\n+                  i, substreams[i].offset, substreams[i].size ));\n+      offset += substream_size;\n+    }\n+\n+    if ( FT_NEW_ARRAY( loca_values, num_glyphs + 1 ) )\n+      goto Fail;\n+\n+    points_size        = 0;\n+    bbox_bitmap_offset = substreams[BBOX_STREAM].offset;\n+\n+    \/* Size of bboxBitmap = 4 * floor((numGlyphs + 31) \/ 32) *\/\n+    bitmap_length                   = ( ( num_glyphs + 31 ) >> 5 ) << 2;\n+    substreams[BBOX_STREAM].offset += bitmap_length;\n+\n+    glyph_buf_size = WOFF2_DEFAULT_GLYPH_BUF;\n+    if ( FT_NEW_ARRAY( glyph_buf, glyph_buf_size ) )\n+      goto Fail;\n+\n+    if ( FT_NEW_ARRAY( info->x_mins, num_glyphs ) )\n+      goto Fail;\n+\n+    for ( i = 0; i < num_glyphs; ++i )\n+    {\n+      FT_ULong   glyph_size = 0;\n+      FT_UShort  n_contours = 0;\n+      FT_Bool    have_bbox  = FALSE;\n+      FT_Byte    bbox_bitmap;\n+      FT_ULong   bbox_offset;\n+      FT_UShort  x_min      = 0;\n+\n+\n+      \/* Set `have_bbox'. *\/\n+      bbox_offset = bbox_bitmap_offset + ( i >> 3 );\n+      if ( FT_STREAM_SEEK( bbox_offset ) ||\n+           FT_READ_BYTE( bbox_bitmap )   )\n+        goto Fail;\n+      if ( bbox_bitmap & ( 0x80 >> ( i & 7 ) ) )\n+        have_bbox = TRUE;\n+\n+      \/* Read value from `nContourStream'. *\/\n+      if ( FT_STREAM_SEEK( substreams[N_CONTOUR_STREAM].offset ) ||\n+           FT_READ_USHORT( n_contours )                          )\n+        goto Fail;\n+      substreams[N_CONTOUR_STREAM].offset += 2;\n+\n+      if ( n_contours == 0xffff )\n+      {\n+        \/* composite glyph *\/\n+        FT_Bool    have_instructions = FALSE;\n+        FT_UShort  instruction_size  = 0;\n+        FT_ULong   composite_size;\n+        FT_ULong   size_needed;\n+        FT_Byte*   pointer           = NULL;\n+\n+\n+        \/* Composite glyphs must have explicit bbox. *\/\n+        if ( !have_bbox )\n+          goto Fail;\n+\n+        if ( compositeGlyph_size( stream,\n+                                  substreams[COMPOSITE_STREAM].offset,\n+                                  &composite_size,\n+                                  &have_instructions) )\n+          goto Fail;\n+\n+        if ( have_instructions )\n+        {\n+          if ( FT_STREAM_SEEK( substreams[GLYPH_STREAM].offset ) ||\n+               READ_255USHORT( instruction_size )                )\n+            goto Fail;\n+          substreams[GLYPH_STREAM].offset = FT_STREAM_POS();\n+        }\n+\n+        size_needed = 12 + composite_size + instruction_size;\n+        if ( glyph_buf_size < size_needed )\n+        {\n+          if ( FT_RENEW_ARRAY( glyph_buf, glyph_buf_size, size_needed ) )\n+            goto Fail;\n+          glyph_buf_size = size_needed;\n+        }\n+\n+        pointer = glyph_buf + glyph_size;\n+        WRITE_USHORT( pointer, n_contours );\n+        glyph_size += 2;\n+\n+        \/* Read x_min for current glyph. *\/\n+        if ( FT_STREAM_SEEK( substreams[BBOX_STREAM].offset ) ||\n+             FT_READ_USHORT( x_min )                          )\n+          goto Fail;\n+        \/* No increment here because we read again. *\/\n+\n+        if ( FT_STREAM_SEEK( substreams[BBOX_STREAM].offset ) ||\n+             FT_STREAM_READ( glyph_buf + glyph_size, 8 )      )\n+          goto Fail;\n+\n+        substreams[BBOX_STREAM].offset += 8;\n+        glyph_size                     += 8;\n+\n+        if ( FT_STREAM_SEEK( substreams[COMPOSITE_STREAM].offset )    ||\n+             FT_STREAM_READ( glyph_buf + glyph_size, composite_size ) )\n+          goto Fail;\n+\n+        substreams[COMPOSITE_STREAM].offset += composite_size;\n+        glyph_size                          += composite_size;\n+\n+        if ( have_instructions )\n+        {\n+          pointer = glyph_buf + glyph_size;\n+          WRITE_USHORT( pointer, instruction_size );\n+          glyph_size += 2;\n+\n+          if ( FT_STREAM_SEEK( substreams[INSTRUCTION_STREAM].offset )    ||\n+               FT_STREAM_READ( glyph_buf + glyph_size, instruction_size ) )\n+            goto Fail;\n+\n+          substreams[INSTRUCTION_STREAM].offset += instruction_size;\n+          glyph_size                            += instruction_size;\n+        }\n+      }\n+      else if ( n_contours > 0 )\n+      {\n+        \/* simple glyph *\/\n+        FT_ULong   total_n_points = 0;\n+        FT_UShort  n_points_contour;\n+        FT_UInt    j;\n+        FT_ULong   flag_size;\n+        FT_ULong   triplet_size;\n+        FT_ULong   triplet_bytes_used;\n+        FT_Byte*   flags_buf   = NULL;\n+        FT_Byte*   triplet_buf = NULL;\n+        FT_UShort  instruction_size;\n+        FT_ULong   size_needed;\n+        FT_Int     end_point;\n+        FT_UInt    contour_ix;\n+\n+        FT_Byte*   pointer = NULL;\n+\n+\n+        if ( FT_NEW_ARRAY( n_points_arr, n_contours ) )\n+          goto Fail;\n+\n+        if ( FT_STREAM_SEEK( substreams[N_POINTS_STREAM].offset ) )\n+          goto Fail;\n+\n+        for ( j = 0; j < n_contours; ++j )\n+        {\n+          if ( READ_255USHORT( n_points_contour ) )\n+            goto Fail;\n+          n_points_arr[j] = n_points_contour;\n+          \/* Prevent negative\/overflow. *\/\n+          if ( total_n_points + n_points_contour < total_n_points )\n+            goto Fail;\n+          total_n_points += n_points_contour;\n+        }\n+        substreams[N_POINTS_STREAM].offset = FT_STREAM_POS();\n+\n+        flag_size = total_n_points;\n+        if ( flag_size > substreams[FLAG_STREAM].size )\n+          goto Fail;\n+\n+        flags_buf   = stream->base + substreams[FLAG_STREAM].offset;\n+        triplet_buf = stream->base + substreams[GLYPH_STREAM].offset;\n+\n+        if ( substreams[GLYPH_STREAM].size <\n+               ( substreams[GLYPH_STREAM].offset -\n+                 substreams[GLYPH_STREAM].start ) )\n+          goto Fail;\n+\n+        triplet_size       = substreams[GLYPH_STREAM].size -\n+                               ( substreams[GLYPH_STREAM].offset -\n+                                 substreams[GLYPH_STREAM].start );\n+        triplet_bytes_used = 0;\n+\n+        \/* Create array to store point information. *\/\n+        points_size = total_n_points;\n+        if ( FT_NEW_ARRAY( points, points_size ) )\n+          goto Fail;\n+\n+        if ( triplet_decode( flags_buf,\n+                             triplet_buf,\n+                             triplet_size,\n+                             total_n_points,\n+                             points,\n+                             &triplet_bytes_used ) )\n+          goto Fail;\n+\n+        substreams[FLAG_STREAM].offset  += flag_size;\n+        substreams[GLYPH_STREAM].offset += triplet_bytes_used;\n+\n+        if ( FT_STREAM_SEEK( substreams[GLYPH_STREAM].offset ) ||\n+             READ_255USHORT( instruction_size )                )\n+          goto Fail;\n+\n+        substreams[GLYPH_STREAM].offset = FT_STREAM_POS();\n+\n+        if ( total_n_points >= ( 1 << 27 ) )\n+          goto Fail;\n+\n+        size_needed = 12 +\n+                      ( 2 * n_contours ) +\n+                      ( 5 * total_n_points ) +\n+                      instruction_size;\n+        if ( glyph_buf_size < size_needed )\n+        {\n+          if ( FT_RENEW_ARRAY( glyph_buf, glyph_buf_size, size_needed ) )\n+            goto Fail;\n+          glyph_buf_size = size_needed;\n+        }\n+\n+        pointer = glyph_buf + glyph_size;\n+        WRITE_USHORT( pointer, n_contours );\n+        glyph_size += 2;\n+\n+        if ( have_bbox )\n+        {\n+          \/* Read x_min for current glyph. *\/\n+          if ( FT_STREAM_SEEK( substreams[BBOX_STREAM].offset ) ||\n+               FT_READ_USHORT( x_min )                          )\n+            goto Fail;\n+          \/* No increment here because we read again. *\/\n+\n+          if ( FT_STREAM_SEEK( substreams[BBOX_STREAM].offset ) ||\n+               FT_STREAM_READ( glyph_buf + glyph_size, 8 )      )\n+            goto Fail;\n+          substreams[BBOX_STREAM].offset += 8;\n+        }\n+        else\n+          compute_bbox( total_n_points, points, glyph_buf, &x_min );\n+\n+        glyph_size = CONTOUR_OFFSET_END_POINT;\n+\n+        pointer   = glyph_buf + glyph_size;\n+        end_point = -1;\n+\n+        for ( contour_ix = 0; contour_ix < n_contours; ++contour_ix )\n+        {\n+          end_point += n_points_arr[contour_ix];\n+          if ( end_point >= 65536 )\n+            goto Fail;\n+\n+          WRITE_SHORT( pointer, end_point );\n+          glyph_size += 2;\n+        }\n+\n+        WRITE_USHORT( pointer, instruction_size );\n+        glyph_size += 2;\n+\n+        if ( FT_STREAM_SEEK( substreams[INSTRUCTION_STREAM].offset )    ||\n+             FT_STREAM_READ( glyph_buf + glyph_size, instruction_size ) )\n+          goto Fail;\n+\n+        substreams[INSTRUCTION_STREAM].offset += instruction_size;\n+        glyph_size                            += instruction_size;\n+\n+        if ( store_points( total_n_points,\n+                           points,\n+                           n_contours,\n+                           instruction_size,\n+                           glyph_buf,\n+                           glyph_buf_size,\n+                           &glyph_size ) )\n+          goto Fail;\n+\n+        FT_FREE( points );\n+        FT_FREE( n_points_arr );\n+      }\n+      else\n+      {\n+        \/* Empty glyph.          *\/\n+        \/* Must not have a bbox. *\/\n+        if ( have_bbox )\n+        {\n+          FT_ERROR(( \"Empty glyph has a bbox.\\n\" ));\n+          goto Fail;\n+        }\n+      }\n+\n+      loca_values[i] = dest_offset - glyf_start;\n+\n+      if ( WRITE_SFNT_BUF( glyph_buf, glyph_size ) )\n+        goto Fail;\n+\n+      if ( pad4( &sfnt, sfnt_size, &dest_offset, memory ) )\n+        goto Fail;\n+\n+      *glyf_checksum += compute_ULong_sum( glyph_buf, glyph_size );\n+\n+      \/* Store x_mins, may be required to reconstruct `hmtx'. *\/\n+      if ( n_contours > 0 )\n+        info->x_mins[i] = x_min;\n+    }\n+\n+    info->glyf_table->dst_length = dest_offset - info->glyf_table->dst_offset;\n+    info->loca_table->dst_offset = dest_offset;\n+\n+    \/* `loca[n]' will be equal to the length of the `glyf' table. *\/\n+    loca_values[num_glyphs] = info->glyf_table->dst_length;\n+\n+    if ( store_loca( loca_values,\n+                     num_glyphs + 1,\n+                     index_format,\n+                     loca_checksum,\n+                     &sfnt,\n+                     sfnt_size,\n+                     &dest_offset,\n+                     memory ) )\n+      goto Fail;\n+\n+    info->loca_table->dst_length = dest_offset - info->loca_table->dst_offset;\n+\n+    FT_TRACE4(( \"  loca table info:\\n\" ));\n+    FT_TRACE4(( \"    dst_offset = %lu\\n\", info->loca_table->dst_offset ));\n+    FT_TRACE4(( \"    dst_length = %lu\\n\", info->loca_table->dst_length ));\n+    FT_TRACE4(( \"    checksum = %09x\\n\", *loca_checksum ));\n+\n+    \/* Set pointer `sfnt_bytes' to its correct value. *\/\n+    *sfnt_bytes = sfnt;\n+    *out_offset = dest_offset;\n+\n+    FT_FREE( substreams );\n+    FT_FREE( loca_values );\n+    FT_FREE( n_points_arr );\n+    FT_FREE( glyph_buf );\n+    FT_FREE( points );\n+\n+    return error;\n+\n+  Fail:\n+    if ( !error )\n+      error = FT_THROW( Invalid_Table );\n+\n+    \/* Set pointer `sfnt_bytes' to its correct value. *\/\n+    *sfnt_bytes = sfnt;\n+\n+    FT_FREE( substreams );\n+    FT_FREE( loca_values );\n+    FT_FREE( n_points_arr );\n+    FT_FREE( glyph_buf );\n+    FT_FREE( points );\n+\n+    return error;\n+  }\n+\n+\n+  \/* Get `x_mins' for untransformed `glyf' table. *\/\n+  static FT_Error\n+  get_x_mins( FT_Stream     stream,\n+              WOFF2_Table*  tables,\n+              FT_UShort     num_tables,\n+              WOFF2_Info    info,\n+              FT_Memory     memory )\n+  {\n+    FT_UShort  num_glyphs;\n+    FT_UShort  index_format;\n+    FT_ULong   glyf_offset;\n+    FT_UShort  glyf_offset_short;\n+    FT_ULong   loca_offset;\n+    FT_Int     i;\n+    FT_Error   error = FT_Err_Ok;\n+    FT_ULong   offset_size;\n+\n+    \/* At this point of time those tables might not have been read yet. *\/\n+    const WOFF2_Table  maxp_table = find_table( tables, num_tables,\n+                                                TTAG_maxp );\n+    const WOFF2_Table  head_table = find_table( tables, num_tables,\n+                                                TTAG_head );\n+\n+\n+    if ( !maxp_table )\n+    {\n+      FT_ERROR(( \"`maxp' table is missing.\\n\" ));\n+      return FT_THROW( Invalid_Table );\n+    }\n+\n+    if ( !head_table )\n+    {\n+      FT_ERROR(( \"`head' table is missing.\\n\" ));\n+      return FT_THROW( Invalid_Table );\n+    }\n+\n+    \/* Read `numGlyphs' field from `maxp' table. *\/\n+    if ( FT_STREAM_SEEK( maxp_table->src_offset ) || FT_STREAM_SKIP( 8 ) )\n+      return error;\n+\n+    if ( FT_READ_USHORT( num_glyphs ) )\n+      return error;\n+\n+    info->num_glyphs = num_glyphs;\n+\n+    \/* Read `indexToLocFormat' field from `head' table. *\/\n+    if ( FT_STREAM_SEEK( head_table->src_offset ) ||\n+         FT_STREAM_SKIP( 50 )                     )\n+      return error;\n+\n+    if ( FT_READ_USHORT( index_format ) )\n+      return error;\n+\n+    offset_size = index_format ? 4 : 2;\n+\n+    \/* Create `x_mins' array. *\/\n+    if ( FT_NEW_ARRAY( info->x_mins, num_glyphs ) )\n+      return error;\n+\n+    loca_offset = info->loca_table->src_offset;\n+\n+    for ( i = 0; i < num_glyphs; ++i )\n+    {\n+      if ( FT_STREAM_SEEK( loca_offset ) )\n+        return error;\n+\n+      loca_offset += offset_size;\n+\n+      if ( index_format )\n+      {\n+        if ( FT_READ_ULONG( glyf_offset ) )\n+          return error;\n+      }\n+      else\n+      {\n+        if ( FT_READ_USHORT( glyf_offset_short ) )\n+          return error;\n+\n+        glyf_offset = (FT_ULong)( glyf_offset_short );\n+        glyf_offset = glyf_offset << 1;\n+      }\n+\n+      glyf_offset += info->glyf_table->src_offset;\n+\n+      if ( FT_STREAM_SEEK( glyf_offset ) || FT_STREAM_SKIP( 2 ) )\n+        return error;\n+\n+      if ( FT_READ_USHORT( info->x_mins[i] ) )\n+        return error;\n+    }\n+\n+    return error;\n+  }\n+\n+\n+  static FT_Error\n+  reconstruct_hmtx( FT_Stream  stream,\n+                    FT_UShort  num_glyphs,\n+                    FT_UShort  num_hmetrics,\n+                    FT_Short*  x_mins,\n+                    FT_ULong*  checksum,\n+                    FT_Byte**  sfnt_bytes,\n+                    FT_ULong*  sfnt_size,\n+                    FT_ULong*  out_offset,\n+                    FT_Memory  memory )\n+  {\n+    FT_Error  error       = FT_Err_Ok;\n+    FT_Byte*  sfnt        = *sfnt_bytes;\n+    FT_ULong  dest_offset = *out_offset;\n+\n+    FT_Byte   hmtx_flags;\n+    FT_Bool   has_proportional_lsbs, has_monospace_lsbs;\n+    FT_ULong  hmtx_table_size;\n+    FT_Int    i;\n+\n+    FT_UShort*  advance_widths = NULL;\n+    FT_Short*   lsbs           = NULL;\n+    FT_Byte*    hmtx_table     = NULL;\n+    FT_Byte*    dst            = NULL;\n+\n+\n+    if ( FT_READ_BYTE( hmtx_flags ) )\n+      goto Fail;\n+\n+    has_proportional_lsbs = ( hmtx_flags & 1 ) == 0;\n+    has_monospace_lsbs    = ( hmtx_flags & 2 ) == 0;\n+\n+    \/* Bits 2-7 are reserved and MUST be zero. *\/\n+    if ( ( hmtx_flags & 0xFC ) != 0 )\n+      goto Fail;\n+\n+    \/* Are you REALLY transformed? *\/\n+    if ( has_proportional_lsbs && has_monospace_lsbs )\n+      goto Fail;\n+\n+    \/* Cannot have a transformed `hmtx' without `glyf'. *\/\n+    if ( ( num_hmetrics > num_glyphs ) ||\n+         ( num_hmetrics < 1 )          )\n+      goto Fail;\n+\n+    \/* Must have at least one entry. *\/\n+    if ( num_hmetrics < 1 )\n+      goto Fail;\n+\n+    if ( FT_NEW_ARRAY( advance_widths, num_hmetrics ) ||\n+         FT_NEW_ARRAY( lsbs, num_glyphs )             )\n+      goto Fail;\n+\n+    \/* Read `advanceWidth' stream.  Always present. *\/\n+    for ( i = 0; i < num_hmetrics; i++ )\n+    {\n+      FT_UShort  advance_width;\n+\n+\n+      if ( FT_READ_USHORT( advance_width ) )\n+        goto Fail;\n+\n+      advance_widths[i] = advance_width;\n+    }\n+\n+    \/* lsb values for proportional glyphs. *\/\n+    for ( i = 0; i < num_hmetrics; i++ )\n+    {\n+      FT_Short  lsb;\n+\n+\n+      if ( has_proportional_lsbs )\n+      {\n+        if ( FT_READ_SHORT( lsb ) )\n+          goto Fail;\n+      }\n+      else\n+        lsb = x_mins[i];\n+\n+      lsbs[i] = lsb;\n+    }\n+\n+    \/* lsb values for monospaced glyphs. *\/\n+    for ( i = num_hmetrics; i < num_glyphs; i++ )\n+    {\n+      FT_Short  lsb;\n+\n+\n+      if ( has_monospace_lsbs )\n+      {\n+        if ( FT_READ_SHORT( lsb ) )\n+          goto Fail;\n+      }\n+      else\n+        lsb = x_mins[i];\n+\n+      lsbs[i] = lsb;\n+    }\n+\n+    \/* Build the hmtx table. *\/\n+    hmtx_table_size = 2 * num_hmetrics + 2 * num_glyphs;\n+    if ( FT_NEW_ARRAY( hmtx_table, hmtx_table_size ) )\n+      goto Fail;\n+\n+    dst = hmtx_table;\n+    FT_TRACE6(( \"hmtx values: \\n\" ));\n+    for ( i = 0; i < num_glyphs; i++ )\n+    {\n+      if ( i < num_hmetrics )\n+      {\n+        WRITE_SHORT( dst, advance_widths[i] );\n+        FT_TRACE6(( \"%d \", advance_widths[i] ));\n+      }\n+\n+      WRITE_SHORT( dst, lsbs[i] );\n+      FT_TRACE6(( \"%d \", lsbs[i] ));\n+    }\n+    FT_TRACE6(( \"\\n\" ));\n+\n+    *checksum = compute_ULong_sum( hmtx_table, hmtx_table_size );\n+    \/* Write `hmtx' table to sfnt buffer. *\/\n+    if ( WRITE_SFNT_BUF( hmtx_table, hmtx_table_size ) )\n+      goto Fail;\n+\n+    \/* Set pointer `sfnt_bytes' to its correct value. *\/\n+    *sfnt_bytes = sfnt;\n+    *out_offset = dest_offset;\n+\n+    FT_FREE( advance_widths );\n+    FT_FREE( lsbs );\n+    FT_FREE( hmtx_table );\n+\n+    return error;\n+\n+  Fail:\n+    FT_FREE( advance_widths );\n+    FT_FREE( lsbs );\n+    FT_FREE( hmtx_table );\n+\n+    if ( !error )\n+      error = FT_THROW( Invalid_Table );\n+\n+    return error;\n+  }\n+\n+\n+  static FT_Error\n+  reconstruct_font( FT_Byte*      transformed_buf,\n+                    FT_ULong      transformed_buf_size,\n+                    WOFF2_Table*  indices,\n+                    WOFF2_Header  woff2,\n+                    WOFF2_Info    info,\n+                    FT_Byte**     sfnt_bytes,\n+                    FT_ULong*     sfnt_size,\n+                    FT_Memory     memory )\n+  {\n+    \/* Memory management of `transformed_buf' is handled by the caller. *\/\n+\n+    FT_Error   error       = FT_Err_Ok;\n+    FT_Stream  stream      = NULL;\n+    FT_Byte*   buf_cursor  = NULL;\n+    FT_Byte*   table_entry = NULL;\n+\n+    \/* We are reallocating memory for `sfnt', so its pointer may change. *\/\n+    FT_Byte*   sfnt = *sfnt_bytes;\n+\n+    FT_UShort  num_tables  = woff2->num_tables;\n+    FT_ULong   dest_offset = 12 + num_tables * 16UL;\n+\n+    FT_ULong   checksum      = 0;\n+    FT_ULong   loca_checksum = 0;\n+    FT_Int     nn            = 0;\n+    FT_UShort  num_hmetrics  = 0;\n+    FT_ULong   font_checksum = info->header_checksum;\n+    FT_Bool    is_glyf_xform = FALSE;\n+\n+    FT_ULong  table_entry_offset = 12;\n+\n+\n+    \/* A few table checks before reconstruction. *\/\n+    \/* `glyf' must be present with `loca'.       *\/\n+    info->glyf_table = find_table( indices, num_tables, TTAG_glyf );\n+    info->loca_table = find_table( indices, num_tables, TTAG_loca );\n+\n+    if ( ( info->glyf_table == NULL ) ^ ( info->loca_table == NULL ) )\n+    {\n+      FT_ERROR(( \"One of `glyf'\/`loca' tables missing.\\n\" ));\n+      return FT_THROW( Invalid_Table );\n+    }\n+\n+    \/* Both `glyf' and `loca' must have same transformation. *\/\n+    if ( info->glyf_table != NULL )\n+    {\n+      if ( ( info->glyf_table->flags & WOFF2_FLAGS_TRANSFORM ) !=\n+           ( info->loca_table->flags & WOFF2_FLAGS_TRANSFORM ) )\n+      {\n+        FT_ERROR(( \"Transformation mismatch\"\n+                   \" between `glyf' and `loca' table.\" ));\n+        return FT_THROW( Invalid_Table );\n+      }\n+    }\n+\n+    \/* Create buffer for table entries. *\/\n+    if ( FT_NEW_ARRAY( table_entry, 16 ) )\n+      goto Fail;\n+\n+    \/* Create a stream for the uncompressed buffer. *\/\n+    if ( FT_NEW( stream ) )\n+      goto Fail;\n+    FT_Stream_OpenMemory( stream, transformed_buf, transformed_buf_size );\n+\n+    FT_ASSERT( FT_STREAM_POS() == 0 );\n+\n+    \/* Reconstruct\/copy tables to output stream. *\/\n+    for ( nn = 0; nn < num_tables; nn++ )\n+    {\n+      WOFF2_TableRec  table = *( indices[nn] );\n+\n+\n+      FT_TRACE3(( \"Seeking to %d with table size %d.\\n\",\n+                  table.src_offset, table.src_length ));\n+      FT_TRACE3(( \"Table tag: %c%c%c%c.\\n\",\n+                  (FT_Char)( table.Tag >> 24 ),\n+                  (FT_Char)( table.Tag >> 16 ),\n+                  (FT_Char)( table.Tag >> 8  ),\n+                  (FT_Char)( table.Tag       ) ));\n+\n+      if ( FT_STREAM_SEEK( table.src_offset ) )\n+        goto Fail;\n+\n+      if ( table.src_offset + table.src_length > transformed_buf_size )\n+        goto Fail;\n+\n+      \/* Get stream size for fields of `hmtx' table. *\/\n+      if ( table.Tag == TTAG_hhea )\n+      {\n+        if ( read_num_hmetrics( stream, &num_hmetrics ) )\n+          goto Fail;\n+      }\n+\n+      info->num_hmetrics = num_hmetrics;\n+\n+      checksum = 0;\n+      if ( ( table.flags & WOFF2_FLAGS_TRANSFORM ) != WOFF2_FLAGS_TRANSFORM )\n+      {\n+        \/* Check whether `head' is at least 12 bytes. *\/\n+        if ( table.Tag == TTAG_head )\n+        {\n+          if ( table.src_length < 12 )\n+            goto Fail;\n+\n+          buf_cursor = transformed_buf + table.src_offset + 8;\n+          \/* Set checkSumAdjustment = 0 *\/\n+          WRITE_ULONG( buf_cursor, 0 );\n+        }\n+\n+        table.dst_offset = dest_offset;\n+\n+        checksum = compute_ULong_sum( transformed_buf + table.src_offset,\n+                                      table.src_length );\n+        FT_TRACE4(( \"Checksum = %09x.\\n\", checksum ));\n+\n+        if ( WRITE_SFNT_BUF( transformed_buf + table.src_offset,\n+                             table.src_length ) )\n+          goto Fail;\n+      }\n+      else\n+      {\n+        FT_TRACE3(( \"This table is transformed.\\n\" ));\n+\n+        if ( table.Tag == TTAG_glyf )\n+        {\n+          is_glyf_xform    = TRUE;\n+          table.dst_offset = dest_offset;\n+\n+          if ( reconstruct_glyf( stream,\n+                                 &checksum,\n+                                 &loca_checksum,\n+                                 &sfnt,\n+                                 sfnt_size,\n+                                 &dest_offset,\n+                                 info,\n+                                 memory ) )\n+            goto Fail;\n+\n+          FT_TRACE4(( \"Checksum = %09x.\\n\", checksum ));\n+        }\n+\n+        else if ( table.Tag == TTAG_loca )\n+          checksum = loca_checksum;\n+\n+        else if ( table.Tag == TTAG_hmtx )\n+        {\n+          \/* If glyf is not transformed and hmtx is, handle separately. *\/\n+          if ( !is_glyf_xform )\n+          {\n+            if ( get_x_mins( stream, indices, num_tables, info, memory ) )\n+              goto Fail;\n+          }\n+\n+          table.dst_offset = dest_offset;\n+\n+          if ( reconstruct_hmtx( stream,\n+                                 info->num_glyphs,\n+                                 info->num_hmetrics,\n+                                 info->x_mins,\n+                                 &checksum,\n+                                 &sfnt,\n+                                 sfnt_size,\n+                                 &dest_offset,\n+                                 memory ) )\n+            goto Fail;\n+        }\n+        else\n+        {\n+          \/* Unknown transform. *\/\n+          FT_ERROR(( \"Unknown table transform.\\n\" ));\n+          goto Fail;\n+        }\n+      }\n+\n+      font_checksum += checksum;\n+\n+      buf_cursor = &table_entry[0];\n+      WRITE_ULONG( buf_cursor, table.Tag );\n+      WRITE_ULONG( buf_cursor, checksum );\n+      WRITE_ULONG( buf_cursor, table.dst_offset );\n+      WRITE_ULONG( buf_cursor, table.dst_length );\n+\n+      WRITE_SFNT_BUF_AT( table_entry_offset, table_entry, 16 );\n+\n+      \/* Update checksum. *\/\n+      font_checksum += compute_ULong_sum( table_entry, 16 );\n+\n+      if ( pad4( &sfnt, sfnt_size, &dest_offset, memory ) )\n+        goto Fail;\n+\n+      \/* Sanity check. *\/\n+      if ( (FT_ULong)( table.dst_offset + table.dst_length ) > dest_offset )\n+      {\n+        FT_ERROR(( \"Table was partially written.\\n\" ));\n+        goto Fail;\n+      }\n+    }\n+\n+    \/* Update `head' checkSumAdjustment. *\/\n+    info->head_table = find_table( indices, num_tables, TTAG_head );\n+    if ( !info->head_table )\n+    {\n+      FT_ERROR(( \"`head' table is missing.\\n\" ));\n+      goto Fail;\n+    }\n+\n+    if ( info->head_table->dst_length < 12 )\n+      goto Fail;\n+\n+    buf_cursor    = sfnt + info->head_table->dst_offset + 8;\n+    font_checksum = 0xB1B0AFBA - font_checksum;\n+\n+    WRITE_ULONG( buf_cursor, font_checksum );\n+\n+    FT_TRACE2(( \"Final checksum = %09x.\\n\", font_checksum ));\n+\n+    woff2->actual_sfnt_size = dest_offset;\n+\n+    \/* Set pointer of sfnt stream to its correct value. *\/\n+    *sfnt_bytes = sfnt;\n+\n+    FT_FREE( table_entry );\n+    FT_Stream_Close( stream );\n+    FT_FREE( stream );\n+\n+    return error;\n+\n+  Fail:\n+    if ( !error )\n+      error = FT_THROW( Invalid_Table );\n+\n+    \/* Set pointer of sfnt stream to its correct value. *\/\n+    *sfnt_bytes = sfnt;\n+\n+    FT_FREE( table_entry );\n+    FT_Stream_Close( stream );\n+    FT_FREE( stream );\n+\n+    return error;\n+  }\n+\n+\n+  \/* Replace `face->root.stream' with a stream containing the extracted *\/\n+  \/* SFNT of a WOFF2 font.                                              *\/\n+\n+  FT_LOCAL_DEF( FT_Error )\n+  woff2_open_font( FT_Stream  stream,\n+                   TT_Face    face,\n+                   FT_Int*    face_instance_index,\n+                   FT_Long*   num_faces )\n+  {\n+    FT_Memory  memory = stream->memory;\n+    FT_Error   error  = FT_Err_Ok;\n+    FT_Int     face_index;\n+\n+    WOFF2_HeaderRec  woff2;\n+    WOFF2_InfoRec    info         = { 0, 0, 0, NULL, NULL, NULL, NULL };\n+    WOFF2_Table      tables       = NULL;\n+    WOFF2_Table*     indices      = NULL;\n+    WOFF2_Table*     temp_indices = NULL;\n+    WOFF2_Table      last_table;\n+\n+    FT_Int     nn;\n+    FT_ULong   j;\n+    FT_ULong   flags;\n+    FT_UShort  xform_version;\n+    FT_ULong   src_offset = 0;\n+\n+    FT_UInt    glyf_index;\n+    FT_UInt    loca_index;\n+    FT_UInt32  file_offset;\n+\n+    FT_Byte*   sfnt        = NULL;\n+    FT_Stream  sfnt_stream = NULL;\n+    FT_Byte*   sfnt_header;\n+    FT_ULong   sfnt_size;\n+\n+    FT_Byte*  uncompressed_buf = NULL;\n+\n+    static const FT_Frame_Field  woff2_header_fields[] =\n+    {\n+#undef  FT_STRUCTURE\n+#define FT_STRUCTURE  WOFF2_HeaderRec\n+\n+      FT_FRAME_START( 48 ),\n+        FT_FRAME_ULONG     ( signature ),\n+        FT_FRAME_ULONG     ( flavor ),\n+        FT_FRAME_ULONG     ( length ),\n+        FT_FRAME_USHORT    ( num_tables ),\n+        FT_FRAME_SKIP_BYTES( 2 ),\n+        FT_FRAME_ULONG     ( totalSfntSize ),\n+        FT_FRAME_ULONG     ( totalCompressedSize ),\n+        FT_FRAME_SKIP_BYTES( 2 * 2 ),\n+        FT_FRAME_ULONG     ( metaOffset ),\n+        FT_FRAME_ULONG     ( metaLength ),\n+        FT_FRAME_ULONG     ( metaOrigLength ),\n+        FT_FRAME_ULONG     ( privOffset ),\n+        FT_FRAME_ULONG     ( privLength ),\n+      FT_FRAME_END\n+    };\n+\n+\n+    FT_ASSERT( stream == face->root.stream );\n+    FT_ASSERT( FT_STREAM_POS() == 0 );\n+\n+    face_index = FT_ABS( *face_instance_index ) & 0xFFFF;\n+\n+    \/* Read WOFF2 Header. *\/\n+    if ( FT_STREAM_READ_FIELDS( woff2_header_fields, &woff2 ) )\n+      return error;\n+\n+    FT_TRACE4(( \"signature     -> 0x%X\\n\", woff2.signature ));\n+    FT_TRACE2(( \"flavor        -> 0x%08lx\\n\", woff2.flavor ));\n+    FT_TRACE4(( \"length        -> %lu\\n\", woff2.length ));\n+    FT_TRACE2(( \"num_tables    -> %hu\\n\", woff2.num_tables ));\n+    FT_TRACE4(( \"totalSfntSize -> %lu\\n\", woff2.totalSfntSize ));\n+    FT_TRACE4(( \"metaOffset    -> %hu\\n\", woff2.metaOffset ));\n+    FT_TRACE4(( \"metaLength    -> %hu\\n\", woff2.metaLength ));\n+    FT_TRACE4(( \"privOffset    -> %hu\\n\", woff2.privOffset ));\n+    FT_TRACE4(( \"privLength    -> %hu\\n\", woff2.privLength ));\n+\n+    \/* Make sure we don't recurse back here. *\/\n+    if ( woff2.flavor == TTAG_wOF2 )\n+      return FT_THROW( Invalid_Table );\n+\n+    \/* Miscellaneous checks. *\/\n+    if ( woff2.length != stream->size                               ||\n+         woff2.num_tables == 0                                      ||\n+         48 + woff2.num_tables * 20UL >= woff2.length               ||\n+         ( woff2.metaOffset == 0 && ( woff2.metaLength != 0     ||\n+                                      woff2.metaOrigLength != 0 ) ) ||\n+         ( woff2.metaLength != 0 && woff2.metaOrigLength == 0 )     ||\n+         ( woff2.metaOffset >= woff2.length )                       ||\n+         ( woff2.length - woff2.metaOffset < woff2.metaLength )     ||\n+         ( woff2.privOffset == 0 && woff2.privLength != 0 )         ||\n+         ( woff2.privOffset >= woff2.length )                       ||\n+         ( woff2.length - woff2.privOffset < woff2.privLength )     )\n+    {\n+      FT_ERROR(( \"woff2_open_font: invalid WOFF2 header\\n\" ));\n+      return FT_THROW( Invalid_Table );\n+    }\n+\n+    FT_TRACE2(( \"woff2_open_font: WOFF2 Header is valid.\\n\" ));\n+\n+    woff2.ttc_fonts = NULL;\n+\n+    \/* Read table directory. *\/\n+    if ( FT_NEW_ARRAY( tables, woff2.num_tables )  ||\n+         FT_NEW_ARRAY( indices, woff2.num_tables ) )\n+      goto Exit;\n+\n+    FT_TRACE2(( \"\\n\"\n+                \"  tag    flags    transform   origLen   transformLen\\n\"\n+                \"  --------------------------------------------------\\n\" ));\n+\n+    for ( nn = 0; nn < woff2.num_tables; nn++ )\n+    {\n+      WOFF2_Table  table = tables + nn;\n+\n+\n+      if ( FT_READ_BYTE( table->FlagByte ) )\n+        goto Exit;\n+\n+      if ( ( table->FlagByte & 0x3f ) == 0x3f )\n+      {\n+        if ( FT_READ_ULONG( table->Tag ) )\n+          goto Exit;\n+      }\n+      else\n+      {\n+        table->Tag = woff2_known_tags( table->FlagByte & 0x3f );\n+        if ( !table->Tag )\n+        {\n+          FT_ERROR(( \"woff2_open_font: Unknown table tag.\" ));\n+          error = FT_THROW( Invalid_Table );\n+          goto Exit;\n+        }\n+      }\n+\n+      flags = 0;\n+      xform_version = ( table->FlagByte >> 6 ) & 0x03;\n+\n+      \/* 0 means xform for glyph\/loca, non-0 for others. *\/\n+      if ( table->Tag == TTAG_glyf || table->Tag == TTAG_loca )\n+      {\n+        if ( xform_version == 0 )\n+          flags |= WOFF2_FLAGS_TRANSFORM;\n+      }\n+      else if ( xform_version != 0 )\n+        flags |= WOFF2_FLAGS_TRANSFORM;\n+\n+      flags |= xform_version;\n+\n+      if ( READ_BASE128( table->dst_length ) )\n+        goto Exit;\n+\n+      table->TransformLength = table->dst_length;\n+\n+      if ( ( flags & WOFF2_FLAGS_TRANSFORM ) != 0 )\n+      {\n+        if ( READ_BASE128( table->TransformLength ) )\n+          goto Exit;\n+\n+        if ( table->Tag == TTAG_loca && table->TransformLength )\n+        {\n+          FT_ERROR(( \"woff2_open_font: Invalid loca `transformLength'.\\n\" ));\n+          error = FT_THROW( Invalid_Table );\n+          goto Exit;\n+        }\n+      }\n+\n+      if ( src_offset + table->TransformLength < src_offset )\n+      {\n+        FT_ERROR(( \"woff2_open_font: invalid WOFF2 table directory.\\n\" ));\n+        error = FT_THROW( Invalid_Table );\n+        goto Exit;\n+      }\n+\n+      table->src_offset = src_offset;\n+      table->src_length = table->TransformLength;\n+      src_offset       += table->TransformLength;\n+      table->flags      = flags;\n+\n+      FT_TRACE2(( \"  %c%c%c%c  %08d  %08d    %08ld  %08ld\\n\",\n+                  (FT_Char)( table->Tag >> 24 ),\n+                  (FT_Char)( table->Tag >> 16 ),\n+                  (FT_Char)( table->Tag >> 8  ),\n+                  (FT_Char)( table->Tag       ),\n+                  table->FlagByte & 0x3f,\n+                  ( table->FlagByte >> 6 ) & 0x03,\n+                  table->dst_length,\n+                  table->TransformLength,\n+                  table->src_length,\n+                  table->src_offset ));\n+\n+      indices[nn] = table;\n+    }\n+\n+    \/* End of last table is uncompressed size. *\/\n+    last_table = indices[woff2.num_tables - 1];\n+\n+    woff2.uncompressed_size = last_table->src_offset +\n+                              last_table->src_length;\n+    if ( woff2.uncompressed_size < last_table->src_offset )\n+    {\n+      error = FT_THROW( Invalid_Table );\n+      goto Exit;\n+    }\n+\n+    FT_TRACE2(( \"Table directory parsed.\\n\" ));\n+\n+    \/* Check for and read collection directory. *\/\n+    woff2.num_fonts      = 1;\n+    woff2.header_version = 0;\n+\n+    if ( woff2.flavor == TTAG_ttcf )\n+    {\n+      FT_TRACE2(( \"Font is a TTC, reading collection directory.\\n\" ));\n+\n+      if ( FT_READ_ULONG( woff2.header_version ) )\n+        goto Exit;\n+\n+      if ( woff2.header_version != 0x00010000 &&\n+           woff2.header_version != 0x00020000 )\n+      {\n+        error = FT_THROW( Invalid_Table );\n+        goto Exit;\n+      }\n+\n+      if ( READ_255USHORT( woff2.num_fonts ) )\n+        goto Exit;\n+\n+      if ( !woff2.num_fonts )\n+      {\n+        error = FT_THROW( Invalid_Table );\n+        goto Exit;\n+      }\n+\n+      FT_TRACE4(( \"Number of fonts in TTC: %ld\\n\", woff2.num_fonts ));\n+\n+      if ( FT_NEW_ARRAY( woff2.ttc_fonts, woff2.num_fonts ) )\n+        goto Exit;\n+\n+      for ( nn = 0; nn < woff2.num_fonts; nn++ )\n+      {\n+        WOFF2_TtcFont  ttc_font = woff2.ttc_fonts + nn;\n+\n+\n+        if ( READ_255USHORT( ttc_font->num_tables ) )\n+          goto Exit;\n+        if ( FT_READ_ULONG( ttc_font->flavor ) )\n+          goto Exit;\n+\n+        if ( FT_NEW_ARRAY( ttc_font->table_indices, ttc_font->num_tables ) )\n+          goto Exit;\n+\n+        FT_TRACE5(( \"Number of tables in font %d: %ld\\n\",\n+                    nn, ttc_font->num_tables ));\n+\n+#ifdef FT_DEBUG_LEVEL_TRACE\n+        if ( ttc_font->num_tables )\n+          FT_TRACE6(( \"  Indices: \" ));\n+#endif\n+\n+        glyf_index = 0;\n+        loca_index = 0;\n+\n+        for ( j = 0; j < ttc_font->num_tables; j++ )\n+        {\n+          FT_UShort    table_index;\n+          WOFF2_Table  table;\n+\n+\n+          if ( READ_255USHORT( table_index ) )\n+            goto Exit;\n+\n+          FT_TRACE6(( \"%hu \", table_index ));\n+          if ( table_index >= woff2.num_tables )\n+          {\n+            FT_ERROR(( \"woff2_open_font: invalid table index\\n\" ));\n+            error = FT_THROW( Invalid_Table );\n+            goto Exit;\n+          }\n+\n+          ttc_font->table_indices[j] = table_index;\n+\n+          table = indices[table_index];\n+          if ( table->Tag == TTAG_loca )\n+            loca_index = table_index;\n+          if ( table->Tag == TTAG_glyf )\n+            glyf_index = table_index;\n+        }\n+\n+#ifdef FT_DEBUG_LEVEL_TRACE\n+        if ( ttc_font->num_tables )\n+          FT_TRACE6(( \"\\n\" ));\n+#endif\n+\n+        \/* glyf and loca must be consecutive *\/\n+        if ( glyf_index > 0 || loca_index > 0 )\n+        {\n+          if ( glyf_index > loca_index      ||\n+               loca_index - glyf_index != 1 )\n+          {\n+            error = FT_THROW( Invalid_Table );\n+            goto Exit;\n+          }\n+        }\n+      }\n+\n+      \/* Collection directory reading complete. *\/\n+      FT_TRACE2(( \"WOFF2 collection directory is valid.\\n\" ));\n+    }\n+    else\n+      woff2.ttc_fonts = NULL;\n+\n+    woff2.compressed_offset = FT_STREAM_POS();\n+    file_offset             = ROUND4( woff2.compressed_offset +\n+                                      woff2.totalCompressedSize );\n+\n+    \/* Some more checks before we start reading the tables. *\/\n+    if ( file_offset > woff2.length )\n+    {\n+      error = FT_THROW( Invalid_Table );\n+      goto Exit;\n+    }\n+\n+    if ( woff2.metaOffset )\n+    {\n+      if ( file_offset != woff2.metaOffset )\n+      {\n+        error = FT_THROW( Invalid_Table );\n+        goto Exit;\n+      }\n+      file_offset = ROUND4(woff2.metaOffset + woff2.metaLength);\n+    }\n+\n+    if ( woff2.privOffset )\n+    {\n+      if ( file_offset != woff2.privOffset )\n+      {\n+        error = FT_THROW( Invalid_Table );\n+        goto Exit;\n+      }\n+      file_offset = ROUND4(woff2.privOffset + woff2.privLength);\n+    }\n+\n+    if ( file_offset != ( ROUND4( woff2.length ) ) )\n+    {\n+      error = FT_THROW( Invalid_Table );\n+      goto Exit;\n+    }\n+\n+    \/* Validate requested face index. *\/\n+    *num_faces = woff2.num_fonts;\n+    \/* value -(N+1) requests information on index N *\/\n+    if ( *face_instance_index < 0 )\n+      face_index--;\n+\n+    if ( face_index >= woff2.num_fonts )\n+    {\n+      if ( *face_instance_index >= 0 )\n+      {\n+        error = FT_THROW( Invalid_Argument );\n+        goto Exit;\n+      }\n+      else\n+        face_index = 0;\n+    }\n+\n+    \/* Only retain tables of the requested face in a TTC. *\/\n+    if ( woff2.header_version )\n+    {\n+      WOFF2_TtcFont  ttc_font = woff2.ttc_fonts + face_index;\n+\n+\n+      \/* Create a temporary array. *\/\n+      if ( FT_NEW_ARRAY( temp_indices,\n+                         ttc_font->num_tables ) )\n+        goto Exit;\n+\n+      FT_TRACE4(( \"Storing tables for TTC face index %d.\\n\", face_index ));\n+      for ( nn = 0; nn < ttc_font->num_tables; nn++ )\n+        temp_indices[nn] = indices[ttc_font->table_indices[nn]];\n+\n+      \/* Resize array to required size. *\/\n+      if ( FT_RENEW_ARRAY( indices,\n+                           woff2.num_tables,\n+                           ttc_font->num_tables ) )\n+        goto Exit;\n+\n+      for ( nn = 0; nn < ttc_font->num_tables; nn++ )\n+        indices[nn] = temp_indices[nn];\n+\n+      FT_FREE( temp_indices );\n+\n+      \/* Change header values. *\/\n+      woff2.flavor     = ttc_font->flavor;\n+      woff2.num_tables = ttc_font->num_tables;\n+    }\n+\n+    \/* We need to allocate this much at the minimum. *\/\n+    sfnt_size = 12 + woff2.num_tables * 16UL;\n+    \/* This is what we normally expect.                              *\/\n+    \/* Initially trust `totalSfntSize' and change later as required. *\/\n+    if ( woff2.totalSfntSize > sfnt_size )\n+    {\n+      \/* However, adjust the value to something reasonable. *\/\n+\n+      \/* Factor 64 is heuristic. *\/\n+      if ( ( woff2.totalSfntSize >> 6 ) > woff2.length )\n+        sfnt_size = woff2.length << 6;\n+      else\n+        sfnt_size = woff2.totalSfntSize;\n+\n+      \/* Value 1<<26 = 67108864 is heuristic. *\/\n+      if (sfnt_size >= (1 << 26))\n+        sfnt_size = 1 << 26;\n+\n+#ifdef FT_DEBUG_LEVEL_TRACE\n+      if ( sfnt_size != woff2.totalSfntSize )\n+        FT_TRACE4(( \"adjusting estimate of uncompressed font size\"\n+                    \" to %lu bytes\\n\",\n+                    sfnt_size ));\n+#endif\n+    }\n+\n+    \/* Write sfnt header. *\/\n+    if ( FT_ALLOC( sfnt, sfnt_size ) ||\n+         FT_NEW( sfnt_stream )       )\n+      goto Exit;\n+\n+    sfnt_header = sfnt;\n+\n+    WRITE_ULONG( sfnt_header, woff2.flavor );\n+\n+    if ( woff2.num_tables )\n+    {\n+      FT_UInt  searchRange, entrySelector, rangeShift, x;\n+\n+\n+      x             = woff2.num_tables;\n+      entrySelector = 0;\n+      while ( x )\n+      {\n+        x            >>= 1;\n+        entrySelector += 1;\n+      }\n+      entrySelector--;\n+\n+      searchRange = ( 1 << entrySelector ) * 16;\n+      rangeShift  = ( woff2.num_tables * 16 ) - searchRange;\n+\n+      WRITE_USHORT( sfnt_header, woff2.num_tables );\n+      WRITE_USHORT( sfnt_header, searchRange );\n+      WRITE_USHORT( sfnt_header, entrySelector );\n+      WRITE_USHORT( sfnt_header, rangeShift );\n+    }\n+\n+    info.header_checksum = compute_ULong_sum( sfnt, 12 );\n+\n+    \/* Sort tables by tag. *\/\n+    ft_qsort( indices,\n+              woff2.num_tables,\n+              sizeof ( WOFF2_Table ),\n+              compare_tags );\n+\n+    if ( woff2.uncompressed_size < 1 )\n+    {\n+      error = FT_THROW( Invalid_Table );\n+      goto Exit;\n+    }\n+\n+    if ( woff2.uncompressed_size > sfnt_size )\n+    {\n+      FT_ERROR(( \"woff2_open_font: SFNT table lengths are too large.\\n\" ));\n+      error = FT_THROW( Invalid_Table );\n+      goto Exit;\n+    }\n+\n+    \/* Allocate memory for uncompressed table data. *\/\n+    if ( FT_ALLOC( uncompressed_buf, woff2.uncompressed_size ) ||\n+         FT_FRAME_ENTER( woff2.totalCompressedSize )           )\n+      goto Exit;\n+\n+    \/* Uncompress the stream. *\/\n+    error = woff2_decompress( uncompressed_buf,\n+                              woff2.uncompressed_size,\n+                              stream->cursor,\n+                              woff2.totalCompressedSize );\n+\n+    FT_FRAME_EXIT();\n+\n+    if ( error )\n+      goto Exit;\n+\n+    error = reconstruct_font( uncompressed_buf,\n+                              woff2.uncompressed_size,\n+                              indices,\n+                              &woff2,\n+                              &info,\n+                              &sfnt,\n+                              &sfnt_size,\n+                              memory );\n+\n+    if ( error )\n+      goto Exit;\n+\n+    \/* Resize `sfnt' to actual size of sfnt stream. *\/\n+    if ( woff2.actual_sfnt_size < sfnt_size )\n+    {\n+      FT_TRACE5(( \"Trimming sfnt stream from %lu to %lu.\\n\",\n+                  sfnt_size, woff2.actual_sfnt_size ));\n+      if ( FT_REALLOC( sfnt,\n+                       (FT_ULong)( sfnt_size ),\n+                       (FT_ULong)( woff2.actual_sfnt_size ) ) )\n+        goto Exit;\n+    }\n+\n+    \/* `reconstruct_font' has done all the work. *\/\n+    \/* Swap out stream and return.               *\/\n+    FT_Stream_OpenMemory( sfnt_stream, sfnt, woff2.actual_sfnt_size );\n+    sfnt_stream->memory = stream->memory;\n+    sfnt_stream->close  = stream_close;\n+\n+    FT_Stream_Free(\n+      face->root.stream,\n+      ( face->root.face_flags & FT_FACE_FLAG_EXTERNAL_STREAM ) != 0 );\n+\n+    face->root.stream      = sfnt_stream;\n+    face->root.face_flags &= ~FT_FACE_FLAG_EXTERNAL_STREAM;\n+\n+    \/* Set face_index to 0 or -1. *\/\n+    if ( *face_instance_index >= 0 )\n+      *face_instance_index = 0;\n+    else\n+      *face_instance_index = -1;\n+\n+    FT_TRACE2(( \"woff2_open_font: SFNT synthesized.\\n\" ));\n+\n+  Exit:\n+    FT_FREE( tables );\n+    FT_FREE( indices );\n+    FT_FREE( uncompressed_buf );\n+    FT_FREE( info.x_mins );\n+\n+    if ( woff2.ttc_fonts )\n+    {\n+      WOFF2_TtcFont  ttc_font = woff2.ttc_fonts;\n+\n+\n+      for ( nn = 0; nn < woff2.num_fonts; nn++ )\n+      {\n+        FT_FREE( ttc_font->table_indices );\n+        ttc_font++;\n+      }\n+\n+      FT_FREE( woff2.ttc_fonts );\n+    }\n+\n+    if ( error )\n+    {\n+      FT_FREE( sfnt );\n+      if ( sfnt_stream )\n+      {\n+        FT_Stream_Close( sfnt_stream );\n+        FT_FREE( sfnt_stream );\n+      }\n+    }\n+\n+    return error;\n+  }\n+\n+\n+#undef READ_255USHORT\n+#undef READ_BASE128\n+#undef ROUND4\n+#undef WRITE_USHORT\n+#undef WRITE_ULONG\n+#undef WRITE_SHORT\n+#undef WRITE_SFNT_BUF\n+#undef WRITE_SFNT_BUF_AT\n+\n+#undef N_CONTOUR_STREAM\n+#undef N_POINTS_STREAM\n+#undef FLAG_STREAM\n+#undef GLYPH_STREAM\n+#undef COMPOSITE_STREAM\n+#undef BBOX_STREAM\n+#undef INSTRUCTION_STREAM\n+\n+\n+\/* END *\/\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/sfwoff2.c","additions":2328,"deletions":0,"binary":false,"changes":2328,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/****************************************************************************\n+ *\n+ * sfwoff2.h\n+ *\n+ *   WOFFF2 format management (specification).\n+ *\n+ * Copyright (C) 2019-2020 by\n+ * Nikhil Ramakrishnan, David Turner, Robert Wilhelm, and Werner Lemberg.\n+ *\n+ * This file is part of the FreeType project, and may only be used,\n+ * modified, and distributed under the terms of the FreeType project\n+ * license, LICENSE.TXT.  By continuing to use, modify, or distribute\n+ * this file you indicate that you have read the license and\n+ * understand and accept it fully.\n+ *\n+ *\/\n+\n+\n+#ifndef SFWOFF2_H_\n+#define SFWOFF2_H_\n+\n+\n+#include <ft2build.h>\n+#include FT_INTERNAL_SFNT_H\n+#include FT_INTERNAL_OBJECTS_H\n+\n+\n+FT_BEGIN_HEADER\n+\n+\n+  \/* Leave the first byte open to store `flag_byte'. *\/\n+#define WOFF2_FLAGS_TRANSFORM   1 << 8\n+\n+#define WOFF2_SFNT_HEADER_SIZE  12\n+#define WOFF2_SFNT_ENTRY_SIZE   16\n+\n+  \/* Suggested maximum size for output. *\/\n+#define WOFF2_DEFAULT_MAX_SIZE  30 * 1024 * 1024\n+\n+  \/* 98% of Google Fonts have no glyph above 5k bytes. *\/\n+#define WOFF2_DEFAULT_GLYPH_BUF  5120\n+\n+  \/* Composite glyph flags.                                      *\/\n+  \/* See `CompositeGlyph.java' in `sfntly' for full definitions. *\/\n+#define FLAG_ARG_1_AND_2_ARE_WORDS     1 << 0\n+#define FLAG_WE_HAVE_A_SCALE           1 << 3\n+#define FLAG_MORE_COMPONENTS           1 << 5\n+#define FLAG_WE_HAVE_AN_X_AND_Y_SCALE  1 << 6\n+#define FLAG_WE_HAVE_A_TWO_BY_TWO      1 << 7\n+#define FLAG_WE_HAVE_INSTRUCTIONS      1 << 8\n+\n+  \/* Simple glyph flags *\/\n+#define GLYF_ON_CURVE        1 << 0\n+#define GLYF_X_SHORT         1 << 1\n+#define GLYF_Y_SHORT         1 << 2\n+#define GLYF_REPEAT          1 << 3\n+#define GLYF_THIS_X_IS_SAME  1 << 4\n+#define GLYF_THIS_Y_IS_SAME  1 << 5\n+\n+  \/* Other constants *\/\n+#define CONTOUR_OFFSET_END_POINT  10\n+\n+\n+  FT_LOCAL( FT_Error )\n+  woff2_open_font( FT_Stream  stream,\n+                   TT_Face    face,\n+                   FT_Int*    face_index,\n+                   FT_Long*   num_faces );\n+\n+\n+FT_END_HEADER\n+\n+#endif \/* SFWOFF2_H_ *\/\n+\n+\n+\/* END *\/\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/sfwoff2.h","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n@@ -3767,2 +3767,2 @@\n-    FT_Byte*           table = face->cmap_table;\n-    FT_Byte*           limit = table + face->cmap_size;\n+    FT_Byte* const     table   = face->cmap_table;\n+    FT_Byte*           limit;\n@@ -3770,1 +3770,1 @@\n-    FT_Byte* volatile  p     = table;\n+    FT_Byte* volatile  p       = table;\n@@ -3776,1 +3776,1 @@\n-    if ( !p || p + 4 > limit )\n+    if ( !p || face->cmap_size < 4 )\n@@ -3779,8 +3779,10 @@\n-    \/* only recognize format 0 *\/\n-    if ( TT_NEXT_USHORT( p ) != 0 )\n-    {\n-      FT_ERROR(( \"tt_face_build_cmaps:\"\n-                 \" unsupported `cmap' table format = %d\\n\",\n-                 TT_PEEK_USHORT( p - 2 ) ));\n-      return FT_THROW( Invalid_Table );\n-    }\n+    \/* Version 1.8.3 of the OpenType specification contains the following *\/\n+    \/* (https:\/\/docs.microsoft.com\/en-us\/typography\/opentype\/spec\/cmap):  *\/\n+    \/*                                                                    *\/\n+    \/*   The 'cmap' table version number remains at 0x0000 for fonts that *\/\n+    \/*   make use of the newer subtable formats.                          *\/\n+    \/*                                                                    *\/\n+    \/* This essentially means that a version format test is useless.      *\/\n+\n+    \/* ignore format *\/\n+    p += 2;\n@@ -3789,0 +3791,1 @@\n+    limit     = table + face->cmap_size;\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/ttcmap.c","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2002-2019 by\n+ * Copyright (C) 2002-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/ttcmap.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2009-2019 by\n+ * Copyright (C) 2009-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/ttcmapc.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2018-2019 by\n+ * Copyright (C) 2018-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/ttcolr.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2018-2019 by\n+ * Copyright (C) 2018-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/ttcolr.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2018-2019 by\n+ * Copyright (C) 2018-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/ttcpal.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2018-2019 by\n+ * Copyright (C) 2018-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/ttcpal.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/ttkern.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/ttkern.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n@@ -400,0 +400,1 @@\n+    {\n@@ -401,0 +402,7 @@\n+      if ( !valid_entries )\n+      {\n+        FT_TRACE2(( \"tt_face_load_font_dir: no valid tables found\\n\" ));\n+        error = FT_THROW( Unknown_File_Format );\n+        goto Exit;\n+      }\n+    }\n@@ -919,1 +927,1 @@\n-        TT_LangTag  limit = entry + table->numLangTagRecords;\n+        TT_LangTag  limit = FT_OFFSET( entry, table->numLangTagRecords );\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/ttload.c","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/ttload.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2006-2019 by\n+ * Copyright (C) 2006-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/ttmtx.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2006-2019 by\n+ * Copyright (C) 2006-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/ttmtx.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/ttpost.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/ttpost.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2005-2019 by\n+ * Copyright (C) 2005-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/ttsbit.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/ttsbit.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,110 @@\n+\/****************************************************************************\n+ *\n+ * woff2tags.c\n+ *\n+ *   WOFF2 Font table tags (base).\n+ *\n+ * Copyright (C) 2019-2020 by\n+ * Nikhil Ramakrishnan, David Turner, Robert Wilhelm, and Werner Lemberg.\n+ *\n+ * This file is part of the FreeType project, and may only be used,\n+ * modified, and distributed under the terms of the FreeType project\n+ * license, LICENSE.TXT.  By continuing to use, modify, or distribute\n+ * this file you indicate that you have read the license and\n+ * understand and accept it fully.\n+ *\n+ *\/\n+\n+\n+#include <ft2build.h>\n+#include FT_TRUETYPE_TAGS_H\n+\n+\n+  \/*\n+   * Return tag from index in the order given in WOFF2 specification.\n+   *\n+   * See\n+   *\n+   *       https:\/\/www.w3.org\/TR\/WOFF2\/#table_dir_format\n+   *\n+   * for details.\n+   *\/\n+  FT_LOCAL_DEF( FT_ULong )\n+  woff2_known_tags( FT_Byte  index )\n+  {\n+    const FT_ULong  known_tags[63] =\n+    {\n+      FT_MAKE_TAG('c', 'm', 'a', 'p'),  \/*  0  *\/\n+      FT_MAKE_TAG('h', 'e', 'a', 'd'),  \/*  1  *\/\n+      FT_MAKE_TAG('h', 'h', 'e', 'a'),  \/*  2  *\/\n+      FT_MAKE_TAG('h', 'm', 't', 'x'),  \/*  3  *\/\n+      FT_MAKE_TAG('m', 'a', 'x', 'p'),  \/*  4  *\/\n+      FT_MAKE_TAG('n', 'a', 'm', 'e'),  \/*  5  *\/\n+      FT_MAKE_TAG('O', 'S', '\/', '2'),  \/*  6  *\/\n+      FT_MAKE_TAG('p', 'o', 's', 't'),  \/*  7  *\/\n+      FT_MAKE_TAG('c', 'v', 't', ' '),  \/*  8  *\/\n+      FT_MAKE_TAG('f', 'p', 'g', 'm'),  \/*  9  *\/\n+      FT_MAKE_TAG('g', 'l', 'y', 'f'),  \/*  10 *\/\n+      FT_MAKE_TAG('l', 'o', 'c', 'a'),  \/*  11 *\/\n+      FT_MAKE_TAG('p', 'r', 'e', 'p'),  \/*  12 *\/\n+      FT_MAKE_TAG('C', 'F', 'F', ' '),  \/*  13 *\/\n+      FT_MAKE_TAG('V', 'O', 'R', 'G'),  \/*  14 *\/\n+      FT_MAKE_TAG('E', 'B', 'D', 'T'),  \/*  15 *\/\n+      FT_MAKE_TAG('E', 'B', 'L', 'C'),  \/*  16 *\/\n+      FT_MAKE_TAG('g', 'a', 's', 'p'),  \/*  17 *\/\n+      FT_MAKE_TAG('h', 'd', 'm', 'x'),  \/*  18 *\/\n+      FT_MAKE_TAG('k', 'e', 'r', 'n'),  \/*  19 *\/\n+      FT_MAKE_TAG('L', 'T', 'S', 'H'),  \/*  20 *\/\n+      FT_MAKE_TAG('P', 'C', 'L', 'T'),  \/*  21 *\/\n+      FT_MAKE_TAG('V', 'D', 'M', 'X'),  \/*  22 *\/\n+      FT_MAKE_TAG('v', 'h', 'e', 'a'),  \/*  23 *\/\n+      FT_MAKE_TAG('v', 'm', 't', 'x'),  \/*  24 *\/\n+      FT_MAKE_TAG('B', 'A', 'S', 'E'),  \/*  25 *\/\n+      FT_MAKE_TAG('G', 'D', 'E', 'F'),  \/*  26 *\/\n+      FT_MAKE_TAG('G', 'P', 'O', 'S'),  \/*  27 *\/\n+      FT_MAKE_TAG('G', 'S', 'U', 'B'),  \/*  28 *\/\n+      FT_MAKE_TAG('E', 'B', 'S', 'C'),  \/*  29 *\/\n+      FT_MAKE_TAG('J', 'S', 'T', 'F'),  \/*  30 *\/\n+      FT_MAKE_TAG('M', 'A', 'T', 'H'),  \/*  31 *\/\n+      FT_MAKE_TAG('C', 'B', 'D', 'T'),  \/*  32 *\/\n+      FT_MAKE_TAG('C', 'B', 'L', 'C'),  \/*  33 *\/\n+      FT_MAKE_TAG('C', 'O', 'L', 'R'),  \/*  34 *\/\n+      FT_MAKE_TAG('C', 'P', 'A', 'L'),  \/*  35 *\/\n+      FT_MAKE_TAG('S', 'V', 'G', ' '),  \/*  36 *\/\n+      FT_MAKE_TAG('s', 'b', 'i', 'x'),  \/*  37 *\/\n+      FT_MAKE_TAG('a', 'c', 'n', 't'),  \/*  38 *\/\n+      FT_MAKE_TAG('a', 'v', 'a', 'r'),  \/*  39 *\/\n+      FT_MAKE_TAG('b', 'd', 'a', 't'),  \/*  40 *\/\n+      FT_MAKE_TAG('b', 'l', 'o', 'c'),  \/*  41 *\/\n+      FT_MAKE_TAG('b', 's', 'l', 'n'),  \/*  42 *\/\n+      FT_MAKE_TAG('c', 'v', 'a', 'r'),  \/*  43 *\/\n+      FT_MAKE_TAG('f', 'd', 's', 'c'),  \/*  44 *\/\n+      FT_MAKE_TAG('f', 'e', 'a', 't'),  \/*  45 *\/\n+      FT_MAKE_TAG('f', 'm', 't', 'x'),  \/*  46 *\/\n+      FT_MAKE_TAG('f', 'v', 'a', 'r'),  \/*  47 *\/\n+      FT_MAKE_TAG('g', 'v', 'a', 'r'),  \/*  48 *\/\n+      FT_MAKE_TAG('h', 's', 't', 'y'),  \/*  49 *\/\n+      FT_MAKE_TAG('j', 'u', 's', 't'),  \/*  50 *\/\n+      FT_MAKE_TAG('l', 'c', 'a', 'r'),  \/*  51 *\/\n+      FT_MAKE_TAG('m', 'o', 'r', 't'),  \/*  52 *\/\n+      FT_MAKE_TAG('m', 'o', 'r', 'x'),  \/*  53 *\/\n+      FT_MAKE_TAG('o', 'p', 'b', 'd'),  \/*  54 *\/\n+      FT_MAKE_TAG('p', 'r', 'o', 'p'),  \/*  55 *\/\n+      FT_MAKE_TAG('t', 'r', 'a', 'k'),  \/*  56 *\/\n+      FT_MAKE_TAG('Z', 'a', 'p', 'f'),  \/*  57 *\/\n+      FT_MAKE_TAG('S', 'i', 'l', 'f'),  \/*  58 *\/\n+      FT_MAKE_TAG('G', 'l', 'a', 't'),  \/*  59 *\/\n+      FT_MAKE_TAG('G', 'l', 'o', 'c'),  \/*  60 *\/\n+      FT_MAKE_TAG('F', 'e', 'a', 't'),  \/*  61 *\/\n+      FT_MAKE_TAG('S', 'i', 'l', 'l'),  \/*  62 *\/\n+    };\n+\n+\n+    if ( index > 62 )\n+      return 0;\n+\n+    return known_tags[index];\n+  }\n+\n+\n+\/* END *\/\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/woff2tags.c","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/****************************************************************************\n+ *\n+ * woff2tags.h\n+ *\n+ *   WOFFF2 Font table tags (specification).\n+ *\n+ * Copyright (C) 1996-2020 by\n+ * Nikhil Ramakrishnan, David Turner, Robert Wilhelm, and Werner Lemberg.\n+ *\n+ * This file is part of the FreeType project, and may only be used,\n+ * modified, and distributed under the terms of the FreeType project\n+ * license, LICENSE.TXT.  By continuing to use, modify, or distribute\n+ * this file you indicate that you have read the license and\n+ * understand and accept it fully.\n+ *\n+ *\/\n+\n+\n+#ifndef WOFF2TAGS_H\n+#define WOFF2TAGS_H\n+\n+\n+#include <ft2build.h>\n+#include FT_INTERNAL_OBJECTS_H\n+\n+\n+FT_BEGIN_HEADER\n+\n+\n+  FT_LOCAL( FT_ULong )\n+  woff2_known_tags( FT_Byte  index );\n+\n+\n+FT_END_HEADER\n+\n+#endif \/* WOFF2TAGS_H *\/\n+\n+\n+\/* END *\/\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/sfnt\/woff2tags.h","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2000-2019 by\n+ * Copyright (C) 2000-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/smooth\/ftgrays.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/smooth\/ftgrays.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/smooth\/ftsmerrs.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2000-2019 by\n+ * Copyright (C) 2000-2020 by\n@@ -158,0 +158,3 @@\n+    if ( !bitmap->rows || !bitmap->pitch )\n+      goto Exit;\n+\n@@ -191,1 +194,1 @@\n-      FT_Vector*  points_end = points + outline->n_points;\n+      FT_Vector*  points_end = FT_OFFSET( points, outline->n_points );\n@@ -210,1 +213,1 @@\n-      FT_Vector*  points_end = points + outline->n_points;\n+      FT_Vector*  points_end = FT_OFFSET( points, outline->n_points );\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/smooth\/ftsmooth.c","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/smooth\/ftsmooth.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/truetype\/ttdriver.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/truetype\/ttdriver.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/truetype\/tterrors.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n@@ -1105,3 +1105,10 @@\n-      \/* if we have a HVAR table, `pp1' and\/or `pp2' are already adjusted *\/\n-      if ( !( loader->face->variation_support & TT_FACE_FLAG_VAR_HADVANCE ) ||\n-           !IS_HINTED( loader->load_flags )                                 )\n+      \/* if we have a HVAR table, `pp1' and\/or `pp2' *\/\n+      \/* are already adjusted but unscaled           *\/\n+      if ( ( loader->face->variation_support & TT_FACE_FLAG_VAR_HADVANCE ) &&\n+           IS_HINTED( loader->load_flags )                                 )\n+      {\n+        loader->pp1.x = FT_MulFix( loader->pp1.x, x_scale );\n+        loader->pp2.x = FT_MulFix( loader->pp2.x, x_scale );\n+        \/* pp1.y and pp2.y are always zero *\/\n+      }\n+      else\n@@ -1115,3 +1122,11 @@\n-      \/* if we have a VVAR table, `pp3' and\/or `pp4' are already adjusted *\/\n-      if ( !( loader->face->variation_support & TT_FACE_FLAG_VAR_VADVANCE ) ||\n-           !IS_HINTED( loader->load_flags )                                 )\n+      \/* if we have a VVAR table, `pp3' and\/or `pp4' *\/\n+      \/* are already adjusted but unscaled           *\/\n+      if ( ( loader->face->variation_support & TT_FACE_FLAG_VAR_VADVANCE ) &&\n+           IS_HINTED( loader->load_flags )                                 )\n+      {\n+        loader->pp3.x = FT_MulFix( loader->pp3.x, x_scale );\n+        loader->pp3.y = FT_MulFix( loader->pp3.y, y_scale );\n+        loader->pp4.x = FT_MulFix( loader->pp4.x, x_scale );\n+        loader->pp4.y = FT_MulFix( loader->pp4.y, y_scale );\n+      }\n+      else\n@@ -2290,1 +2305,1 @@\n-        top = (FT_Short)FT_DivFix( loader->pp3.y - bbox.yMax,\n+        top = (FT_Short)FT_DivFix( SUB_LONG( loader->pp3.y, bbox.yMax ),\n@@ -2296,1 +2311,2 @@\n-          advance = (FT_UShort)FT_DivFix( loader->pp3.y - loader->pp4.y,\n+          advance = (FT_UShort)FT_DivFix( SUB_LONG( loader->pp3.y,\n+                                                    loader->pp4.y ),\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/truetype\/ttgload.c","additions":25,"deletions":9,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/truetype\/ttgload.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2004-2019 by\n+ * Copyright (C) 2004-2020 by\n@@ -1473,0 +1473,1 @@\n+    FT_ULong      offsets_len;\n@@ -1533,3 +1534,7 @@\n-    \/* rough sanity check: offsets can be either 2 or 4 bytes *\/\n-    if ( (FT_ULong)gvar_head.glyphCount *\n-           ( ( gvar_head.flags & 1 ) ? 4 : 2 ) > table_len )\n+    \/* offsets can be either 2 or 4 bytes                  *\/\n+    \/* (one more offset than glyphs, to mark size of last) *\/\n+    offsets_len = ( gvar_head.glyphCount + 1 ) *\n+                  ( ( gvar_head.flags & 1 ) ? 4L : 2L );\n+\n+    \/* rough sanity check *\/\n+    if (offsets_len > table_len )\n@@ -1544,4 +1549,2 @@\n-    blend->gvar_size   = table_len;\n-    blend->tuplecount  = gvar_head.globalCoordCount;\n-    blend->gv_glyphcnt = gvar_head.glyphCount;\n-    offsetToData       = gvar_start + gvar_head.offsetToData;\n+    blend->gvar_size = table_len;\n+    offsetToData     = gvar_start + gvar_head.offsetToData;\n@@ -1550,3 +1553,3 @@\n-                blend->tuplecount == 1 ? \"is\" : \"are\",\n-                blend->tuplecount,\n-                blend->tuplecount == 1 ? \"\" : \"s\" ));\n+                gvar_head.globalCoordCount == 1 ? \"is\" : \"are\",\n+                gvar_head.globalCoordCount,\n+                gvar_head.globalCoordCount == 1 ? \"\" : \"s\" ));\n@@ -1554,1 +1557,1 @@\n-    if ( FT_NEW_ARRAY( blend->glyphoffsets, blend->gv_glyphcnt + 1 ) )\n+    if ( FT_FRAME_ENTER( offsets_len ) )\n@@ -1557,0 +1560,4 @@\n+    \/* offsets (one more offset than glyphs, to mark size of last) *\/\n+    if ( FT_NEW_ARRAY( blend->glyphoffsets, gvar_head.glyphCount + 1 ) )\n+      goto Fail2;\n+\n@@ -1559,1 +1566,2 @@\n-      FT_ULong  limit = gvar_start + table_len;\n+      FT_ULong  limit      = gvar_start + table_len;\n+      FT_ULong  max_offset = 0;\n@@ -1562,5 +1570,1 @@\n-      \/* long offsets (one more offset than glyphs, to mark size of last) *\/\n-      if ( FT_FRAME_ENTER( ( blend->gv_glyphcnt + 1 ) * 4L ) )\n-        goto Exit;\n-\n-      for ( i = 0; i <= blend->gv_glyphcnt; i++ )\n+      for ( i = 0; i <= gvar_head.glyphCount; i++ )\n@@ -1569,2 +1573,4 @@\n-        \/* use `>', not `>=' *\/\n-        if ( blend->glyphoffsets[i] > limit )\n+\n+        if ( max_offset <= blend->glyphoffsets[i] )\n+          max_offset = blend->glyphoffsets[i];\n+        else\n@@ -1573,1 +1579,1 @@\n-                      \" invalid glyph variation data offset for index %d\\n\",\n+                      \" glyph variation data offset %d not monotonic\\n\",\n@@ -1575,2 +1581,10 @@\n-          error = FT_THROW( Invalid_Table );\n-          break;\n+          blend->glyphoffsets[i] = max_offset;\n+        }\n+\n+        \/* use `<', not `<=' *\/\n+        if ( limit < blend->glyphoffsets[i] )\n+        {\n+          FT_TRACE2(( \"ft_var_load_gvar:\"\n+                      \" glyph variation data offset %d out of range\\n\",\n+                      i ));\n+          blend->glyphoffsets[i] = limit;\n@@ -1582,1 +1596,2 @@\n-      FT_ULong  limit = gvar_start + table_len;\n+      FT_ULong  limit      = gvar_start + table_len;\n+      FT_ULong  max_offset = 0;\n@@ -1585,5 +1600,1 @@\n-      \/* short offsets (one more offset than glyphs, to mark size of last) *\/\n-      if ( FT_FRAME_ENTER( ( blend->gv_glyphcnt + 1 ) * 2L ) )\n-        goto Exit;\n-\n-      for ( i = 0; i <= blend->gv_glyphcnt; i++ )\n+      for ( i = 0; i <= gvar_head.glyphCount; i++ )\n@@ -1592,2 +1603,4 @@\n-        \/* use `>', not `>=' *\/\n-        if ( blend->glyphoffsets[i] > limit )\n+\n+        if ( max_offset <= blend->glyphoffsets[i] )\n+          max_offset = blend->glyphoffsets[i];\n+        else\n@@ -1596,1 +1609,1 @@\n-                      \" invalid glyph variation data offset for index %d\\n\",\n+                      \" glyph variation data offset %d not monotonic\\n\",\n@@ -1598,2 +1611,10 @@\n-          error = FT_THROW( Invalid_Table );\n-          break;\n+          blend->glyphoffsets[i] = max_offset;\n+        }\n+\n+        \/* use `<', not `<=' *\/\n+        if ( limit < blend->glyphoffsets[i] )\n+        {\n+          FT_TRACE2(( \"ft_var_load_gvar:\"\n+                      \" glyph variation data offset %d out of range\\n\",\n+                      i ));\n+          blend->glyphoffsets[i] = limit;\n@@ -1604,0 +1625,2 @@\n+    blend->gv_glyphcnt = gvar_head.glyphCount;\n+\n@@ -1605,2 +1628,0 @@\n-    if ( error )\n-      goto Exit;\n@@ -1608,1 +1629,1 @@\n-    if ( blend->tuplecount != 0 )\n+    if ( gvar_head.globalCoordCount != 0 )\n@@ -1610,3 +1631,8 @@\n-      if ( FT_NEW_ARRAY( blend->tuplecoords,\n-                         gvar_head.axisCount * blend->tuplecount ) )\n-        goto Exit;\n+      if ( FT_STREAM_SEEK( gvar_start + gvar_head.offsetToCoord ) ||\n+           FT_FRAME_ENTER( gvar_head.globalCoordCount *\n+                           gvar_head.axisCount * 2L )             )\n+      {\n+        FT_TRACE2(( \"ft_var_load_gvar:\"\n+                    \" glyph variation shared tuples missing\\n\" ));\n+        goto Fail;\n+      }\n@@ -1614,3 +1640,3 @@\n-      if ( FT_STREAM_SEEK( gvar_start + gvar_head.offsetToCoord )         ||\n-           FT_FRAME_ENTER( blend->tuplecount * gvar_head.axisCount * 2L ) )\n-        goto Exit;\n+      if ( FT_NEW_ARRAY( blend->tuplecoords,\n+                         gvar_head.axisCount * gvar_head.globalCoordCount ) )\n+        goto Fail2;\n@@ -1618,1 +1644,1 @@\n-      for ( i = 0; i < blend->tuplecount; i++ )\n+      for ( i = 0; i < gvar_head.globalCoordCount; i++ )\n@@ -1631,0 +1657,2 @@\n+      blend->tuplecount = gvar_head.globalCoordCount;\n+\n@@ -1638,0 +1666,8 @@\n+\n+  Fail2:\n+    FT_FRAME_EXIT();\n+\n+  Fail:\n+    FT_FREE( blend->glyphoffsets );\n+    blend->gv_glyphcnt = 0;\n+    goto Exit;\n@@ -2130,1 +2166,1 @@\n-    \/* offsets into the `mmlen' array, must be multiples of the *\/\n+    \/* offsets into the `mmvar' array, must be multiples of the *\/\n@@ -3040,1 +3076,1 @@\n-    FT_Error    error = FT_ERR( Invalid_Argument );\n+    FT_Error    error;\n@@ -3060,0 +3096,2 @@\n+    {\n+      error = FT_ERR( Invalid_Argument );\n@@ -3061,0 +3099,1 @@\n+    }\n@@ -3769,1 +3808,1 @@\n-                  \" no variation data for this glyph\\n\" ));\n+                  \" no variation data for glyph %d\\n\", glyph_index ));\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/truetype\/ttgxvar.c","additions":86,"deletions":47,"binary":false,"changes":133,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2004-2019 by\n+ * Copyright (C) 2004-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/truetype\/ttgxvar.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n@@ -3721,1 +3721,1 @@\n-    limit = rec + exc->numFDefs;\n+    limit = FT_OFFSET( rec, exc->numFDefs );\n@@ -3968,0 +3968,3 @@\n+    if ( !exc->FDefs )\n+      goto Fail;\n+\n@@ -4065,1 +4068,1 @@\n-    def = exc->FDefs + F;\n+    def = FT_OFFSET( exc->FDefs, F );\n@@ -4073,1 +4076,1 @@\n-      limit = def + exc->numFDefs;\n+      limit = FT_OFFSET( def, exc->numFDefs );\n@@ -4153,1 +4156,1 @@\n-    limit = def + exc->numIDefs;\n+    limit = FT_OFFSET( def, exc->numIDefs );\n@@ -6349,6 +6352,8 @@\n-      exc->zp1.org[point].x = exc->zp0.org[exc->GS.rp0].x +\n-                              TT_MulFix14( cvt_dist,\n-                                           exc->GS.freeVector.x );\n-      exc->zp1.org[point].y = exc->zp0.org[exc->GS.rp0].y +\n-                              TT_MulFix14( cvt_dist,\n-                                           exc->GS.freeVector.y );\n+      exc->zp1.org[point].x = ADD_LONG(\n+                                exc->zp0.org[exc->GS.rp0].x,\n+                                TT_MulFix14( cvt_dist,\n+                                             exc->GS.freeVector.x ) );\n+      exc->zp1.org[point].y = ADD_LONG(\n+                                exc->zp0.org[exc->GS.rp0].y,\n+                                TT_MulFix14( cvt_dist,\n+                                             exc->GS.freeVector.y ) );\n@@ -7718,1 +7723,1 @@\n-    TT_DefRecord*  limit = def + exc->numIDefs;\n+    TT_DefRecord*  limit = FT_OFFSET( def, exc->numIDefs );\n@@ -7870,1 +7875,1 @@\n-      exc->loopcall_counter_max = 300 + 8 * exc->cvtSize;\n+      exc->loopcall_counter_max = 300 + 22 * exc->cvtSize;\n@@ -8570,1 +8575,1 @@\n-            TT_DefRecord*  limit = def + exc->numIDefs;\n+            TT_DefRecord*  limit = FT_OFFSET( def, exc->numIDefs );\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/truetype\/ttinterp.c","additions":19,"deletions":14,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/truetype\/ttinterp.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/truetype\/ttobjs.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/truetype\/ttobjs.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n@@ -636,1 +636,1 @@\n-    FT_Byte*  record      = face->hdmx_table + 8;\n+    FT_Byte*  record      = FT_OFFSET( face->hdmx_table, 8 );\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/truetype\/ttpload.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/truetype\/ttpload.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2010-2019 by\n+ * Copyright (C) 2010-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/truetype\/ttsubpix.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2010-2019 by\n+ * Copyright (C) 2010-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/truetype\/ttsubpix.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/type1\/t1afm.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/type1\/t1afm.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/type1\/t1driver.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/type1\/t1driver.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 2001-2019 by\n+ * Copyright (C) 2001-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/type1\/t1errors.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/type1\/t1gload.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/type1\/t1gload.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n@@ -312,0 +312,5 @@\n+    FT_UShort*       axis_flags;\n+\n+    FT_Offset  mmvar_size;\n+    FT_Offset  axis_flags_size;\n+    FT_Offset  axis_size;\n@@ -317,3 +322,18 @@\n-    if ( FT_ALLOC( mmvar,\n-                   sizeof ( FT_MM_Var ) +\n-                     mmaster.num_axis * sizeof ( FT_Var_Axis ) ) )\n+\n+    \/* the various `*_size' variables, which we also use as     *\/\n+    \/* offsets into the `mmvar' array, must be multiples of the *\/\n+    \/* pointer size (except the last one); without such an      *\/\n+    \/* alignment there might be runtime errors due to           *\/\n+    \/* misaligned addresses                                     *\/\n+#undef  ALIGN_SIZE\n+#define ALIGN_SIZE( n ) \\\n+          ( ( (n) + sizeof (void*) - 1 ) & ~( sizeof (void*) - 1 ) )\n+\n+    mmvar_size      = ALIGN_SIZE( sizeof ( FT_MM_Var ) );\n+    axis_flags_size = ALIGN_SIZE( mmaster.num_axis *\n+                                  sizeof ( FT_UShort ) );\n+    axis_size       = mmaster.num_axis * sizeof ( FT_Var_Axis );\n+\n+    if ( FT_ALLOC( mmvar, mmvar_size +\n+                          axis_flags_size +\n+                          axis_size ) )\n@@ -325,3 +345,10 @@\n-    mmvar->axis            = (FT_Var_Axis*)&mmvar[1];\n-                                      \/* Point to axes after MM_Var struct *\/\n-    mmvar->namedstyle      = NULL;\n+\n+    \/* while axis flags are meaningless here, we have to provide the array *\/\n+    \/* to make `FT_Get_Var_Axis_Flags' work: the function expects that the *\/\n+    \/* values directly follow the data of `FT_MM_Var'                      *\/\n+    axis_flags = (FT_UShort*)( (char*)mmvar + mmvar_size );\n+    for ( i = 0; i < mmaster.num_axis; i++ )\n+      axis_flags[i] = 0;\n+\n+    mmvar->axis       = (FT_Var_Axis*)( (char*)axis_flags + axis_flags_size );\n+    mmvar->namedstyle = NULL;\n@@ -334,3 +361,0 @@\n-      mmvar->axis[i].def     = ( mmvar->axis[i].minimum +\n-                                   mmvar->axis[i].maximum ) \/ 2;\n-                            \/* Does not apply.  But this value is in range *\/\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/type1\/t1load.c","additions":34,"deletions":10,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/type1\/t1load.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/type1\/t1objs.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/type1\/t1objs.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/type1\/t1parse.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/type1\/t1parse.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * Copyright (C) 1996-2019 by\n+ * Copyright (C) 1996-2020 by\n","filename":"src\/java.desktop\/share\/native\/libfreetype\/src\/type1\/t1tokens.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}