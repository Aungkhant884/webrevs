{"files":[{"patch":"@@ -1903,1 +1903,1 @@\n-            if (inflaters.size() < MAX_FLATER) {\n+            if (deflaters.size() < MAX_FLATER) {\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8234011\n+ * @summary Check that jdk.nio.zipfs.ZipFileSystem doesn't cache more than ZipFileSystem.MAX_FLATER Inflater\/Deflater objects\n+ * @run main ReleaseDeflater\n+ * @modules jdk.zipfs\/jdk.nio.zipfs:+open\n+ * @author Volker Simonis\n+ *\/\n+\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.lang.reflect.Field;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.spi.FileSystemProvider;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ArrayList;\n+\n+public class ReleaseDeflater {\n+    public static void main(String[] args) throws Throwable {\n+        Path zipFile = Paths.get(\"ReleaseDeflaterTest.zip\");\n+        try (FileSystem fs = FileSystems.newFileSystem(zipFile, Map.of(\"create\", true))) {\n+            FileSystemProvider zprov = fs.provider();\n+            Path test = fs.getPath(\"test.txt\");\n+            int STREAMS = 100;\n+            List<OutputStream> ostreams = new ArrayList<>(STREAMS);\n+            List<InputStream> istreams = new ArrayList<>(STREAMS);\n+            for (int i = 0; i < STREAMS; i++) {\n+                OutputStream zos = zprov.newOutputStream(test);\n+                ostreams.add(zos);\n+                zos.write(\"Hello\".getBytes());\n+            }\n+            for (OutputStream os : ostreams) {\n+                os.close();\n+            }\n+            for (int i = 0; i < STREAMS; i++) {\n+                InputStream zis = zprov.newInputStream(test);\n+                istreams.add(zis);\n+            }\n+            for (InputStream is : istreams) {\n+                is.close();\n+            }\n+            try {\n+                Field max_flaters = fs.getClass().getDeclaredField(\"MAX_FLATER\");\n+                max_flaters.setAccessible(true);\n+                int MAX_FLATERS = max_flaters.getInt(fs);\n+                Field inflaters = fs.getClass().getDeclaredField(\"inflaters\");\n+                inflaters.setAccessible(true);\n+                int inflater_count = ((List<?>) inflaters.get(fs)).size();\n+                if (inflater_count > MAX_FLATERS) {\n+                    throw new Exception(\"Too many inflaters \" + inflater_count);\n+                }\n+                Field deflaters = fs.getClass().getDeclaredField(\"deflaters\");\n+                deflaters.setAccessible(true);\n+                int deflater_count = ((List<?>) deflaters.get(fs)).size();\n+                if (deflater_count > MAX_FLATERS) {\n+                    throw new Exception(\"Too many deflaters \" + deflater_count);\n+                }\n+            } catch (NoSuchFieldException nsfe) {\n+                \/\/ Probably the implementation has changed, so there's not much we can do...\n+                throw new RuntimeException(\"Implementation of jdk.nio.zipfs.ZipFileSystem changed - disable or fix the test\");\n+            }\n+        } finally {\n+            Files.deleteIfExists(zipFile);\n+        }\n+\n+    }\n+}\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/ReleaseDeflater.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}