{"files":[{"patch":"@@ -1157,1 +1157,1 @@\n-            if (hasDotOrDotDot(inode.name)) {\n+            if (inode.pathHasDotOrDotDot()) {\n@@ -1159,1 +1159,1 @@\n-                        \"because an entry has a '.' or '..' element in its name\");\n+                        \"because entry \\\"\" + inode.nameAsString() + \"\\\" has a '.' or '..' element in its name\");\n@@ -1177,38 +1177,0 @@\n-    \/**\n-     * Check Inode.name to see if it includes a \".\" or \"..\" in the name array\n-     * @param path  the path as stored in Inode.name to verify\n-     * @return true if the path contains a \".\" or \"..\" entry; false otherwise\n-     *\/\n-    private boolean hasDotOrDotDot(byte[] path) {\n-        \/\/ Inode.name always includes \"\/\" in path[0]\n-        assert path[0] == '\/';\n-        if (path.length == 1) {\n-            return false;\n-        }\n-        int index = 1;\n-        while (index < path.length) {\n-            int starting = index;\n-            while (index < path.length && path[index] != '\/') {\n-                index++;\n-            }\n-            \/\/ Check the path snippet for a \".\" or \"..\"\n-            if (isDotOrDotDotPath(path, starting, index)) {\n-                return true;\n-            }\n-            index++;\n-        }\n-        return false;\n-    }\n-\n-    \/**\n-     * Check the path to see if it includes a \".\" or \"..\"\n-     * @param path  the path to check\n-     * @return true if the path contains a \".\" or \"..\" entry; false otherwise\n-     *\/\n-    private boolean isDotOrDotDotPath(byte[] path, int start, int index) {\n-        int pathLen = index - start;\n-        if ((pathLen == 1 && path[start] == '.'))\n-            return true;\n-        return (pathLen == 2 && path[start] == '.') && path[start + 1] == '.';\n-    }\n-\n@@ -2245,0 +2207,31 @@\n+        \/**\n+         * Check name if it contains a \".\" or \"..\" path element\n+         * @return true if the path contains a \".\" or \"..\" entry; false otherwise\n+         *\/\n+        private boolean pathHasDotOrDotDot() {\n+            \/\/ name always includes \"\/\" in path[0]\n+            assert name[0] == '\/';\n+            if (name.length == 1) {\n+                return false;\n+            }\n+            int index = 1;\n+            while (index < name.length) {\n+                int start = index;\n+                while (index < name.length && name[index] != '\/') {\n+                    index++;\n+                }\n+                if (name[start] == '.') {\n+                    int len = index - start;\n+                    if (len == 1 || (name[start + 1] == '.' && len == 2)) {\n+                        return true;\n+                    }\n+                }\n+                index++;\n+            }\n+            return false;\n+        }\n+\n+        protected String nameAsString() {\n+            return new String(name);\n+        }\n+\n@@ -2263,1 +2256,1 @@\n-            return new String(name) + (isdir ? \" (dir)\" : \" \") + \", index: \" + pos;\n+            return nameAsString() + (isdir ? \" (dir)\" : \" \") + \", index: \" + pos;\n@@ -2741,1 +2734,1 @@\n-            fm.format(\"    name            : %s%n\", new String(name));\n+            fm.format(\"    name            : %s%n\", nameAsString());\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":35,"deletions":42,"binary":false,"changes":77,"status":"modified"}]}