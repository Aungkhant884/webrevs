{"files":[{"patch":"@@ -1041,0 +1041,1 @@\n+                        hc.algorithmConstraints,\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateMessage.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -740,0 +740,1 @@\n+                        hc.algorithmConstraints,\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateRequest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -589,0 +589,1 @@\n+                    chc.algorithmConstraints,\n@@ -901,0 +902,1 @@\n+                    context.algorithmConstraints,\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateVerify.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-import sun.security.ssl.NamedGroup.NamedGroupType;\n-import static sun.security.ssl.NamedGroup.NamedGroupType.*;\n+import sun.security.ssl.NamedGroup.NamedGroupSpec;\n+import static sun.security.ssl.NamedGroup.NamedGroupSpec.*;\n@@ -1128,1 +1128,1 @@\n-        final NamedGroupType[] groupTypes;\n+        final NamedGroupSpec[] groupTypes;\n@@ -1133,1 +1133,1 @@\n-                boolean isAnonymous, NamedGroupType... groupTypes) {\n+                boolean isAnonymous, NamedGroupSpec... groupTypes) {\n@@ -1147,2 +1147,2 @@\n-            if (NamedGroupType.arrayContains(\n-                    groupTypes, NamedGroupType.NAMED_GROUP_ECDHE)) {\n+            if (NamedGroupSpec.arrayContains(groupTypes,\n+                    NamedGroupSpec.NAMED_GROUP_ECDHE)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CipherSuite.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-import sun.security.ssl.NamedGroup.NamedGroupType;\n+import sun.security.ssl.NamedGroup.NamedGroupSpec;\n@@ -79,1 +79,1 @@\n-            if (ng.type != NamedGroupType.NAMED_GROUP_FFDHE) {\n+            if (ng.spec != NamedGroupSpec.NAMED_GROUP_FFDHE) {\n@@ -88,5 +88,1 @@\n-            DHParameterSpec params = (DHParameterSpec)ng.getParameterSpec();\n-            if (params == null) {\n-                return null;\n-            }\n-\n+            DHParameterSpec params = (DHParameterSpec)ng.keAlgParamSpec;\n@@ -113,3 +109,1 @@\n-                DHParameterSpec params =\n-                        (DHParameterSpec)namedGroup.getParameterSpec();\n-                kpg.initialize(params, random);\n+                kpg.initialize(namedGroup.keAlgParamSpec, random);\n@@ -324,2 +318,1 @@\n-                        SupportedGroups.getPreferredGroup(\n-                                context.negotiatedProtocol,\n+                        SupportedGroups.getPreferredGroup(context.negotiatedProtocol,\n@@ -327,2 +320,2 @@\n-                                new NamedGroupType [] {\n-                                    NamedGroupType.NAMED_GROUP_FFDHE },\n+                                new NamedGroupSpec [] {\n+                                    NamedGroupSpec.NAMED_GROUP_FFDHE },\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DHKeyExchange.java","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -128,0 +128,1 @@\n+                            shc.algorithmConstraints,\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DHServerKeyExchange.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import java.security.spec.ECGenParameterSpec;\n@@ -47,1 +46,1 @@\n-import sun.security.ssl.NamedGroup.NamedGroupType;\n+import sun.security.ssl.NamedGroup.NamedGroupSpec;\n@@ -91,1 +90,1 @@\n-            if (namedGroup.type != NamedGroupType.NAMED_GROUP_ECDHE) {\n+            if (namedGroup.spec != NamedGroupSpec.NAMED_GROUP_ECDHE) {\n@@ -101,5 +100,1 @@\n-                    ECUtil.getECParameterSpec(null, namedGroup.oid);\n-            if (parameters == null) {\n-                return null;\n-            }\n-\n+                    (ECParameterSpec)namedGroup.keAlgParamSpec;\n@@ -123,3 +118,1 @@\n-                ECGenParameterSpec params =\n-                        (ECGenParameterSpec)namedGroup.getParameterSpec();\n-                kpg.initialize(params, random);\n+                kpg.initialize(namedGroup.keAlgParamSpec, random);\n@@ -251,3 +244,3 @@\n-                        new NamedGroupType[] {\n-                            NamedGroupType.NAMED_GROUP_ECDHE,\n-                            NamedGroupType.NAMED_GROUP_XDH },\n+                        new NamedGroupSpec[] {\n+                            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+                            NamedGroupSpec.NAMED_GROUP_XDH },\n@@ -259,3 +252,3 @@\n-                        new NamedGroupType[] {\n-                            NamedGroupType.NAMED_GROUP_ECDHE,\n-                            NamedGroupType.NAMED_GROUP_XDH });\n+                        new NamedGroupSpec[] {\n+                            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+                            NamedGroupSpec.NAMED_GROUP_XDH });\n@@ -311,1 +304,2 @@\n-                    \/\/ unlikely, have been checked during cipher suite negotiation.\n+                    \/\/ unlikely, have been checked during cipher suite\n+                    \/\/ negotiation.\n@@ -483,1 +477,1 @@\n-            switch (namedGroup.type) {\n+            switch (namedGroup.spec) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ECDHKeyExchange.java","additions":13,"deletions":19,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import sun.security.ssl.NamedGroup.NamedGroupSpec;\n@@ -113,0 +114,6 @@\n+            if ((namedGroup == null) || (!namedGroup.isAvailable)) {\n+                \/\/ unlikely\n+                throw shc.conContext.fatal(Alert.ILLEGAL_PARAMETER,\n+                    \"Missing or improper named group: \" + namedGroup);\n+            }\n+\n@@ -115,2 +122,1 @@\n-\n-            if ((namedGroup == null) || (namedGroup.oid == null) ) {\n+            if (publicPoint == null) {\n@@ -119,1 +125,1 @@\n-                    \"Missing Named Group\");\n+                    \"Missing public point for named group: \" + namedGroup);\n@@ -133,0 +139,1 @@\n+                            shc.algorithmConstraints,\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ECDHServerKeyExchange.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import sun.security.ssl.NamedGroup.NamedGroupType;\n+import sun.security.ssl.NamedGroup.NamedGroupSpec;\n@@ -182,1 +182,1 @@\n-            if (NamedGroupType.NAMED_GROUP_ECDHE.isSupported(\n+            if (NamedGroupSpec.NAMED_GROUP_ECDHE.isSupported(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ECPointFormatsExtension.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,2 +49,2 @@\n-import sun.security.ssl.NamedGroup.NamedGroupType;\n-import static sun.security.ssl.NamedGroup.NamedGroupType.*;\n+import sun.security.ssl.NamedGroup.NamedGroupSpec;\n+import static sun.security.ssl.NamedGroup.NamedGroupSpec.*;\n@@ -287,2 +287,2 @@\n-            Map<NamedGroupType, Boolean> cachedStatus =\n-                    new EnumMap<>(NamedGroupType.class);\n+            Map<NamedGroupSpec, Boolean> cachedStatus =\n+                    new EnumMap<>(NamedGroupSpec.class);\n@@ -327,2 +327,2 @@\n-            Map<NamedGroupType, Boolean> cachedStatus =\n-                    new EnumMap<>(NamedGroupType.class);\n+            Map<NamedGroupSpec, Boolean> cachedStatus =\n+                    new EnumMap<>(NamedGroupSpec.class);\n@@ -513,1 +513,1 @@\n-            Map<NamedGroupType, Boolean> cachedStatus) {\n+            Map<NamedGroupSpec, Boolean> cachedStatus) {\n@@ -524,2 +524,2 @@\n-            NamedGroupType[] groupTypes = suite.keyExchange.groupTypes;\n-            for (NamedGroupType groupType : groupTypes) {\n+            NamedGroupSpec[] groupTypes = suite.keyExchange.groupTypes;\n+            for (NamedGroupSpec groupType : groupTypes) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/HandshakeContext.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.Collections;\n@@ -34,4 +35,2 @@\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.concurrent.ConcurrentHashMap;\n-import javax.crypto.*;\n+import java.util.Set;\n+import javax.crypto.KeyAgreement;\n@@ -40,0 +39,1 @@\n+import sun.security.util.CurveDB;\n@@ -41,1 +41,0 @@\n-import sun.security.util.ECUtil;\n@@ -55,6 +54,8 @@\n-    SECT163_K1(0x0001, \"sect163k1\", \"1.3.132.0.1\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n-    SECT163_R1(0x0002, \"sect163r1\", \"1.3.132.0.2\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n+    SECT163_K1(0x0001, \"sect163k1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"sect163k1\")),\n+    SECT163_R1(0x0002, \"sect163r1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"sect163r1\")),\n@@ -63,9 +64,12 @@\n-    SECT163_R2(0x0003, \"sect163r2\", \"1.3.132.0.15\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n-    SECT193_R1(0x0004, \"sect193r1\", \"1.3.132.0.24\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n-    SECT193_R2(0x0005, \"sect193r2\", \"1.3.132.0.25\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n+    SECT163_R2(0x0003, \"sect163r2\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"sect163r2\")),\n+    SECT193_R1(0x0004, \"sect193r1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"sect193r1\")),\n+    SECT193_R2(0x0005, \"sect193r2\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"sect193r2\")),\n@@ -74,3 +78,4 @@\n-    SECT233_K1(0x0006, \"sect233k1\", \"1.3.132.0.26\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n+    SECT233_K1(0x0006, \"sect233k1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"sect233k1\")),\n@@ -79,6 +84,8 @@\n-    SECT233_R1(0x0007, \"sect233r1\", \"1.3.132.0.27\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n-    SECT239_K1(0x0008, \"sect239k1\", \"1.3.132.0.3\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n+    SECT233_R1(0x0007, \"sect233r1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"sect233r1\")),\n+    SECT239_K1(0x0008, \"sect239k1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"sect239k1\")),\n@@ -87,3 +94,4 @@\n-    SECT283_K1(0x0009, \"sect283k1\", \"1.3.132.0.16\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n+    SECT283_K1(0x0009, \"sect283k1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"sect283k1\")),\n@@ -92,3 +100,4 @@\n-    SECT283_R1(0x000A, \"sect283r1\", \"1.3.132.0.17\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n+    SECT283_R1(0x000A, \"sect283r1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"sect283r1\")),\n@@ -97,3 +106,4 @@\n-    SECT409_K1(0x000B, \"sect409k1\", \"1.3.132.0.36\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n+    SECT409_K1(0x000B, \"sect409k1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"sect409k1\")),\n@@ -102,3 +112,4 @@\n-    SECT409_R1(0x000C, \"sect409r1\", \"1.3.132.0.37\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n+    SECT409_R1(0x000C, \"sect409r1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"sect409r1\")),\n@@ -107,3 +118,4 @@\n-    SECT571_K1(0x000D, \"sect571k1\", \"1.3.132.0.38\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n+    SECT571_K1(0x000D, \"sect571k1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"sect571k1\")),\n@@ -112,15 +124,20 @@\n-    SECT571_R1(0x000E, \"sect571r1\", \"1.3.132.0.39\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n-    SECP160_K1(0x000F, \"secp160k1\", \"1.3.132.0.9\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n-    SECP160_R1(0x0010, \"secp160r1\", \"1.3.132.0.8\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n-    SECP160_R2(0x0011, \"secp160r2\", \"1.3.132.0.30\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n-    SECP192_K1(0x0012, \"secp192k1\", \"1.3.132.0.31\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n+    SECT571_R1(0x000E, \"sect571r1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"sect571r1\")),\n+    SECP160_K1(0x000F, \"secp160k1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"secp160k1\")),\n+    SECP160_R1(0x0010, \"secp160r1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"secp160r1\")),\n+    SECP160_R2(0x0011, \"secp160r2\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"secp160r2\")),\n+    SECP192_K1(0x0012, \"secp192k1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"secp192k1\")),\n@@ -129,6 +146,8 @@\n-    SECP192_R1(0x0013, \"secp192r1\", \"1.2.840.10045.3.1.1\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n-    SECP224_K1(0x0014, \"secp224k1\", \"1.3.132.0.32\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n+    SECP192_R1(0x0013, \"secp192r1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"secp192r1\")),\n+    SECP224_K1(0x0014, \"secp224k1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"secp224k1\")),\n@@ -137,6 +156,8 @@\n-    SECP224_R1(0x0015, \"secp224r1\", \"1.3.132.0.33\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n-    SECP256_K1(0x0016, \"secp256k1\", \"1.3.132.0.10\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n+    SECP224_R1(0x0015, \"secp224r1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"secp224r1\")),\n+    SECP256_K1(0x0016, \"secp256k1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            CurveDB.lookup(\"secp256k1\")),\n@@ -145,3 +166,4 @@\n-    SECP256_R1(0x0017, \"secp256r1\", \"1.2.840.10045.3.1.7\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_13),\n+    SECP256_R1(0x0017, \"secp256r1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_13,\n+            CurveDB.lookup(\"secp256r1\")),\n@@ -150,3 +172,4 @@\n-    SECP384_R1(0x0018, \"secp384r1\", \"1.3.132.0.34\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_13),\n+    SECP384_R1(0x0018, \"secp384r1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_13,\n+            CurveDB.lookup(\"secp384r1\")),\n@@ -155,3 +178,4 @@\n-    SECP521_R1(0x0019, \"secp521r1\", \"1.3.132.0.35\",\n-            NamedGroupType.NAMED_GROUP_ECDHE,\n-            ProtocolVersion.PROTOCOLS_TO_13),\n+    SECP521_R1(0x0019, \"secp521r1\",\n+            NamedGroupSpec.NAMED_GROUP_ECDHE,\n+            ProtocolVersion.PROTOCOLS_TO_13,\n+            CurveDB.lookup(\"secp521r1\")),\n@@ -160,6 +184,8 @@\n-    X25519(0x001D, \"x25519\", \"1.3.101.110\",\n-            NamedGroupType.NAMED_GROUP_XDH,\n-            ProtocolVersion.PROTOCOLS_TO_13),\n-    X448(0x001E, \"x448\", \"1.3.101.111\",\n-            NamedGroupType.NAMED_GROUP_XDH,\n-            ProtocolVersion.PROTOCOLS_TO_13),\n+    X25519(0x001D, \"x25519\",\n+            NamedGroupSpec.NAMED_GROUP_XDH,\n+            ProtocolVersion.PROTOCOLS_TO_13,\n+            NamedParameterSpec.X25519),\n+    X448(0x001E, \"x448\",\n+            NamedGroupSpec.NAMED_GROUP_XDH,\n+            ProtocolVersion.PROTOCOLS_TO_13,\n+            NamedParameterSpec.X448),\n@@ -168,15 +194,21 @@\n-    FFDHE_2048(0x0100, \"ffdhe2048\", null,\n-            NamedGroupType.NAMED_GROUP_FFDHE,\n-            ProtocolVersion.PROTOCOLS_TO_13),\n-    FFDHE_3072(0x0101, \"ffdhe3072\", null,\n-            NamedGroupType.NAMED_GROUP_FFDHE,\n-            ProtocolVersion.PROTOCOLS_TO_13),\n-    FFDHE_4096(0x0102, \"ffdhe4096\", null,\n-            NamedGroupType.NAMED_GROUP_FFDHE,\n-            ProtocolVersion.PROTOCOLS_TO_13),\n-    FFDHE_6144(0x0103, \"ffdhe6144\", null,\n-            NamedGroupType.NAMED_GROUP_FFDHE,\n-            ProtocolVersion.PROTOCOLS_TO_13),\n-    FFDHE_8192(0x0104, \"ffdhe8192\", null,\n-            NamedGroupType.NAMED_GROUP_FFDHE,\n-            ProtocolVersion.PROTOCOLS_TO_13),\n+    FFDHE_2048(0x0100, \"ffdhe2048\",\n+            NamedGroupSpec.NAMED_GROUP_FFDHE,\n+            ProtocolVersion.PROTOCOLS_TO_13,\n+            PredefinedDHParameterSpecs.ffdheParams.get(2048)),\n+\n+    FFDHE_3072(0x0101, \"ffdhe3072\",\n+            NamedGroupSpec.NAMED_GROUP_FFDHE,\n+            ProtocolVersion.PROTOCOLS_TO_13,\n+            PredefinedDHParameterSpecs.ffdheParams.get(3072)),\n+    FFDHE_4096(0x0102, \"ffdhe4096\",\n+            NamedGroupSpec.NAMED_GROUP_FFDHE,\n+            ProtocolVersion.PROTOCOLS_TO_13,\n+            PredefinedDHParameterSpecs.ffdheParams.get(4096)),\n+    FFDHE_6144(0x0103, \"ffdhe6144\",\n+            NamedGroupSpec.NAMED_GROUP_FFDHE,\n+            ProtocolVersion.PROTOCOLS_TO_13,\n+            PredefinedDHParameterSpecs.ffdheParams.get(6144)),\n+    FFDHE_8192(0x0104, \"ffdhe8192\",\n+            NamedGroupSpec.NAMED_GROUP_FFDHE,\n+            ProtocolVersion.PROTOCOLS_TO_13,\n+            PredefinedDHParameterSpecs.ffdheParams.get(8192)),\n@@ -187,6 +219,8 @@\n-    ARBITRARY_PRIME(0xFF01, \"arbitrary_explicit_prime_curves\", null,\n-            NamedGroupType.NAMED_GROUP_ARBITRARY,\n-            ProtocolVersion.PROTOCOLS_TO_12),\n-    ARBITRARY_CHAR2(0xFF02, \"arbitrary_explicit_char2_curves\", null,\n-            NamedGroupType.NAMED_GROUP_ARBITRARY,\n-            ProtocolVersion.PROTOCOLS_TO_12);\n+    ARBITRARY_PRIME(0xFF01, \"arbitrary_explicit_prime_curves\",\n+            NamedGroupSpec.NAMED_GROUP_ARBITRARY,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            null),\n+    ARBITRARY_CHAR2(0xFF02, \"arbitrary_explicit_char2_curves\",\n+            NamedGroupSpec.NAMED_GROUP_ARBITRARY,\n+            ProtocolVersion.PROTOCOLS_TO_12,\n+            null);\n@@ -195,1 +229,0 @@\n-    final NamedGroupType type;  \/\/ group type\n@@ -197,2 +230,1 @@\n-    final String oid;           \/\/ object identifier of the named group\n-    final String algorithm;     \/\/ signature algorithm\n+    final NamedGroupSpec spec;  \/\/ group type\n@@ -200,1 +232,8 @@\n-    private final NamedGroupFunctions functions;    \/\/ may be null\n+    final String algorithm;     \/\/ key exchange algorithm\n+    final AlgorithmParameterSpec keAlgParamSpec;\n+    final AlgorithmParameters keAlgParams;\n+    final boolean isAvailable;\n+\n+    \/\/ performance optimization\n+    private static final Set<CryptoPrimitive> KEY_AGREEMENT_PRIMITIVE_SET =\n+        Collections.unmodifiableSet(EnumSet.of(CryptoPrimitive.KEY_AGREEMENT));\n@@ -203,3 +242,4 @@\n-    private NamedGroup(int id, String name, String oid,\n-            NamedGroupType namedGroupType,\n-            ProtocolVersion[] supportedProtocols) {\n+    private NamedGroup(int id, String name,\n+            NamedGroupSpec namedGroupSpec,\n+            ProtocolVersion[] supportedProtocols,\n+            AlgorithmParameterSpec keAlgParamSpec) {\n@@ -208,2 +248,2 @@\n-        this.oid = oid;\n-        this.type = namedGroupType;\n+        this.spec = namedGroupSpec;\n+        this.algorithm = namedGroupSpec.algorithm;\n@@ -211,0 +251,1 @@\n+        this.keAlgParamSpec = keAlgParamSpec;\n@@ -212,14 +253,39 @@\n-        if (this.type == NamedGroupType.NAMED_GROUP_ECDHE) {\n-            this.functions = ECDHFunctions.getInstance();\n-            this.algorithm = \"EC\";\n-        } else if (this.type == NamedGroupType.NAMED_GROUP_FFDHE) {\n-            this.functions = FFDHFunctions.getInstance();\n-            this.algorithm = \"DiffieHellman\";\n-        } else if (this.type == NamedGroupType.NAMED_GROUP_XDH) {\n-            this.functions = XDHFunctions.getInstance();\n-            this.algorithm = \"XDH\";\n-        } else if (this.type == NamedGroupType.NAMED_GROUP_ARBITRARY) {\n-            this.functions = null;\n-            this.algorithm = \"EC\";\n-        } else {\n-            throw new RuntimeException(\"Unexpected Named Group Type\");\n+        AlgorithmParameters algParams = null;\n+        boolean mediator = (keAlgParamSpec != null);\n+        if (mediator) {\n+            try {\n+                algParams =\n+                    AlgorithmParameters.getInstance(namedGroupSpec.algorithm);\n+                algParams.init(keAlgParamSpec);\n+            } catch (InvalidParameterSpecException\n+                    | NoSuchAlgorithmException exp) {\n+                if (namedGroupSpec != NamedGroupSpec.NAMED_GROUP_XDH) {\n+                    mediator = false;\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {\n+                        SSLLogger.warning(\n+                            \"No AlgorithmParameters for \" + name, exp);\n+                    }\n+                } else {\n+                    \/\/ HACK CODE\n+                    \/\/\n+                    \/\/ Please remove the following code if the XDH\/X25519\/X448\n+                    \/\/ AlgorithmParameters algorithms are supported in JDK.\n+                    algParams = null;\n+                    try {\n+                        KeyAgreement.getInstance(name);\n+\n+                        \/\/ The following service is also needed.  But for\n+                        \/\/ performance, check the KeyAgreement impl only.\n+                        \/\/\n+                        \/\/ KeyFactory.getInstance(name);\n+                        \/\/ KeyPairGenerator.getInstance(name);\n+                        \/\/ AlgorithmParameters.getInstance(name);\n+                    } catch (NoSuchAlgorithmException nsae) {\n+                        mediator = false;\n+                        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {\n+                            SSLLogger.warning(\n+                                \"No AlgorithmParameters for \" + name, nsae);\n+                        }\n+                    }\n+                }\n+            }\n@@ -227,1 +293,0 @@\n-    }\n@@ -229,2 +294,2 @@\n-    private Optional<NamedGroupFunctions> getFunctions() {\n-        return Optional.ofNullable(functions);\n+        this.isAvailable = mediator;\n+        this.keAlgParams = mediator ? algParams : null;\n@@ -233,0 +298,1 @@\n+    \/\/\n@@ -234,1 +300,1 @@\n-\n+    \/\/\n@@ -246,6 +312,5 @@\n-        String oid = ECUtil.getCurveName(null, params);\n-        if ((oid != null) && (!oid.isEmpty())) {\n-            for (NamedGroup group : NamedGroup.values()) {\n-                if ((group.type == NamedGroupType.NAMED_GROUP_ECDHE)\n-                        && oid.equals(group.oid)) {\n-                    return group;\n+        for (NamedGroup ng : NamedGroup.values()) {\n+            if (ng.spec == NamedGroupSpec.NAMED_GROUP_ECDHE) {\n+                if ((params == ng.keAlgParamSpec) ||\n+                        (ng.keAlgParamSpec == CurveDB.lookup(params))) {\n+                    return ng;\n@@ -261,14 +326,1 @@\n-            if (ng.type != NamedGroupType.NAMED_GROUP_FFDHE) {\n-                continue;\n-            }\n-\n-            DHParameterSpec ngParams = null;\n-            \/\/ functions is non-null for FFDHE type\n-            AlgorithmParameters aps = ng.functions.getParameters(ng);\n-            try {\n-                ngParams = aps.getParameterSpec(DHParameterSpec.class);\n-            } catch (InvalidParameterSpecException ipse) {\n-                \/\/ should be unlikely\n-            }\n-\n-            if (ngParams == null) {\n+            if (ng.spec != NamedGroupSpec.NAMED_GROUP_FFDHE) {\n@@ -278,0 +330,1 @@\n+            DHParameterSpec ngParams = (DHParameterSpec)ng.keAlgParamSpec;\n@@ -307,2 +360,1 @@\n-    \/\/ Are the NamedGroups available for the protocol desired?\n-\n+    \/\/ Is the NamedGroup available for the protocols desired?\n@@ -310,3 +362,5 @@\n-        for (ProtocolVersion pv : supportedProtocols) {\n-            if (protocolVersions.contains(pv)) {\n-                return true;\n+        if (this.isAvailable) {\n+            for (ProtocolVersion pv : supportedProtocols) {\n+                if (protocolVersions.contains(pv)) {\n+                    return true;\n+                }\n@@ -315,0 +369,1 @@\n+\n@@ -319,3 +374,5 @@\n-        for (ProtocolVersion pv : supportedProtocols) {\n-            if (protocolVersion == pv) {\n-                return true;\n+        if (this.isAvailable) {\n+            for (ProtocolVersion pv : supportedProtocols) {\n+                if (protocolVersion == pv) {\n+                    return true;\n+                }\n@@ -324,0 +381,1 @@\n+\n@@ -328,1 +386,0 @@\n-\n@@ -333,2 +390,2 @@\n-                    || (NamedGroupType.arrayContains(\n-                        cs.keyExchange.groupTypes, type)))) {\n+                    || (NamedGroupSpec.arrayContains(\n+                            cs.keyExchange.groupTypes, spec)))) {\n@@ -338,2 +395,0 @@\n-        return false;\n-    }\n@@ -341,7 +396,1 @@\n-    \/\/ lazy loading of parameters\n-    AlgorithmParameters getParameters() {\n-        Optional<NamedGroupFunctions> ngf = getFunctions();\n-        if (ngf.isEmpty()) {\n-            return null;\n-        }\n-        return ngf.get().getParameters(this);\n+        return false;\n@@ -350,9 +399,5 @@\n-    \/\/ The next set of methods use the NamedGroupFunctions table\n-    \/\/ to do various operations in a consistent way.\n-\n-    AlgorithmParameterSpec getParameterSpec() {\n-        Optional<NamedGroupFunctions> ngf = getFunctions();\n-        if (ngf.isEmpty()) {\n-            return null;\n-        }\n-        return ngf.get().getParameterSpec(this);\n+    boolean isPermitted(AlgorithmConstraints constraints) {\n+        return constraints.permits(KEY_AGREEMENT_PRIMITIVE_SET,\n+                        this.name, null) &&\n+                constraints.permits(KEY_AGREEMENT_PRIMITIVE_SET,\n+                        this.algorithm, this.keAlgParams);\n@@ -363,6 +408,1 @@\n-\n-        Optional<NamedGroupFunctions> ngf = getFunctions();\n-        if (ngf.isEmpty()) {\n-            return null;\n-        }\n-        return ngf.get().encodePossessionPublicKey(namedGroupPossession);\n+        return spec.encodePossessionPublicKey(namedGroupPossession);\n@@ -375,7 +415,2 @@\n-\n-        Optional<NamedGroupFunctions> ngf = getFunctions();\n-        if (ngf.isEmpty()) {\n-            return null;\n-        }\n-        return ngf.get().decodeCredentials(this, encoded, constraints,\n-                onConstraintFail);\n+        return spec.decodeCredentials(\n+                this, encoded, constraints, onConstraintFail);\n@@ -385,0 +420,2 @@\n+        return spec.createPossession(this, random);\n+    }\n@@ -386,5 +423,3 @@\n-        Optional<NamedGroupFunctions> ngf = getFunctions();\n-        if (ngf.isEmpty()) {\n-            return null;\n-        }\n-        return ngf.get().createPossession(this, random);\n+    SSLKeyDerivation createKeyDerivation(\n+            HandshakeContext hc) throws IOException {\n+        return spec.createKeyDerivation(hc);\n@@ -393,2 +428,3 @@\n-    SSLKeyDerivation createKeyDerivation(HandshakeContext hc)\n-            throws IOException {\n+    interface ExceptionSupplier {\n+        void apply(String s) throws SSLException;\n+    }\n@@ -396,3 +432,10 @@\n-        Optional<NamedGroupFunctions> ngf = getFunctions();\n-        if (ngf.isEmpty()) {\n-            return null;\n+    \/\/ A list of operations related to named groups.\n+    private interface NamedGroupScheme {\n+        default void checkConstraints(PublicKey publicKey,\n+                AlgorithmConstraints constraints,\n+                ExceptionSupplier onConstraintFail) throws SSLException {\n+            if (!constraints.permits(\n+                    EnumSet.of(CryptoPrimitive.KEY_AGREEMENT), publicKey)) {\n+                onConstraintFail.apply(\"key share entry does not \"\n+                        + \"comply with algorithm constraints\");\n+            }\n@@ -400,1 +443,0 @@\n-        return ngf.get().createKeyDerivation(hc);\n@@ -402,1 +444,2 @@\n-    }\n+        byte[] encodePossessionPublicKey(\n+                NamedGroupPossession namedGroupPossession);\n@@ -404,7 +447,10 @@\n-    boolean isAvailableGroup() {\n-        Optional<NamedGroupFunctions> ngfOpt = getFunctions();\n-        if (ngfOpt.isEmpty()) {\n-            return false;\n-        }\n-        NamedGroupFunctions ngf = ngfOpt.get();\n-        return ngf.isAvailable(this);\n+        SSLCredentials decodeCredentials(\n+                NamedGroup ng, byte[] encoded,\n+                AlgorithmConstraints constraints,\n+                ExceptionSupplier onConstraintFail\n+            ) throws IOException, GeneralSecurityException;\n+\n+        SSLPossession createPossession(NamedGroup ng, SecureRandom random);\n+\n+        SSLKeyDerivation createKeyDerivation(\n+                HandshakeContext hc) throws IOException;\n@@ -413,6 +459,23 @@\n-    enum NamedGroupType {\n-        NAMED_GROUP_ECDHE,      \/\/ Elliptic Curve Groups (ECDHE)\n-        NAMED_GROUP_FFDHE,      \/\/ Finite Field Groups (DHE)\n-        NAMED_GROUP_XDH,        \/\/ Finite Field Groups (XDH)\n-        NAMED_GROUP_ARBITRARY,  \/\/ arbitrary prime and curves (ECDHE)\n-        NAMED_GROUP_NONE;       \/\/ Not predefined named group\n+    enum NamedGroupSpec implements NamedGroupScheme {\n+        \/\/ Elliptic Curve Groups (ECDHE)\n+        NAMED_GROUP_ECDHE(\"EC\", ECDHEScheme.instance),\n+\n+        \/\/ Finite Field Groups (DHE)\n+        NAMED_GROUP_FFDHE(\"DiffieHellman\", FFDHEScheme.instance),\n+\n+        \/\/ Finite Field Groups (XDH)\n+        NAMED_GROUP_XDH(\"XDH\", XDHScheme.instance),\n+\n+        \/\/ arbitrary prime and curves (ECDHE)\n+        NAMED_GROUP_ARBITRARY(\"EC\", null),\n+\n+        \/\/ Not predefined named group\n+        NAMED_GROUP_NONE(\"\", null);\n+\n+        private final String algorithm;     \/\/ key exchange name\n+        private final NamedGroupScheme scheme;  \/\/ named group operations\n+\n+        private NamedGroupSpec(String algorithm, NamedGroupScheme scheme) {\n+            this.algorithm = algorithm;\n+            this.scheme = scheme;\n+        }\n@@ -431,3 +494,3 @@\n-        static boolean arrayContains(NamedGroupType[] namedGroupTypes,\n-                NamedGroupType namedGroupType) {\n-            for (NamedGroupType ng : namedGroupTypes) {\n+        static boolean arrayContains(NamedGroupSpec[] namedGroupTypes,\n+                NamedGroupSpec namedGroupType) {\n+            for (NamedGroupSpec ng : namedGroupTypes) {\n@@ -438,0 +501,1 @@\n+\n@@ -440,24 +504,0 @@\n-    }\n-\n-    interface ExceptionSupplier {\n-        void apply(String s) throws SSLException;\n-    }\n-\n-    \/*\n-     * A list of functions to do NamedGroup operations in a\n-     * algorithm-independent and consistent way.\n-     *\/\n-    private static abstract class NamedGroupFunctions {\n-\n-        \/\/ cache to speed up the parameters construction\n-        protected static final Map<NamedGroup, AlgorithmParameters>\n-                namedGroupParams = new ConcurrentHashMap<>();\n-\n-        protected void checkConstraints(PublicKey publicKey,\n-                AlgorithmConstraints constraints,\n-                ExceptionSupplier onConstraintFail)\n-                throws SSLException {\n-\n-            if (!constraints.permits(\n-                    EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),\n-                    publicKey)) {\n@@ -465,2 +505,5 @@\n-                onConstraintFail.apply(\"key share entry does not \"\n-                        + \"comply with algorithm constraints\");\n+        @Override\n+        public byte[] encodePossessionPublicKey(\n+                NamedGroupPossession namedGroupPossession) {\n+            if (scheme != null) {\n+                return scheme.encodePossessionPublicKey(namedGroupPossession);\n@@ -468,1 +511,0 @@\n-        }\n@@ -470,1 +512,2 @@\n-        public AlgorithmParameters getParameters(NamedGroup ng) {\n+            return null;\n+        }\n@@ -472,7 +515,8 @@\n-            AlgorithmParameters result = namedGroupParams.get(ng);\n-            if (result == null) {\n-                Optional<AlgorithmParameters> paramsOpt = getParametersImpl(ng);\n-                if (paramsOpt.isPresent()) {\n-                    result = paramsOpt.get();\n-                    namedGroupParams.put(ng, result);\n-                }\n+        @Override\n+        public SSLCredentials decodeCredentials(NamedGroup ng, byte[] encoded,\n+                    AlgorithmConstraints constraints,\n+                    ExceptionSupplier onConstraintFail\n+                ) throws IOException, GeneralSecurityException {\n+            if (scheme != null) {\n+                return scheme.decodeCredentials(\n+                        ng, encoded, constraints, onConstraintFail);\n@@ -481,1 +525,1 @@\n-            return result;\n+            return null;\n@@ -484,19 +528,6 @@\n-        public abstract byte[] encodePossessionPublicKey(\n-                NamedGroupPossession namedGroupPossession);\n-\n-        public abstract SSLCredentials decodeCredentials(\n-                NamedGroup ng, byte[] encoded,\n-                AlgorithmConstraints constraints,\n-                ExceptionSupplier onConstraintFail)\n-                throws IOException, GeneralSecurityException;\n-\n-        public abstract SSLPossession createPossession(NamedGroup ng,\n-                SecureRandom random);\n-\n-        public abstract SSLKeyDerivation createKeyDerivation(\n-                HandshakeContext hc) throws IOException;\n-\n-        protected abstract Optional<AlgorithmParameters> getParametersImpl(\n-                NamedGroup ng);\n-\n-        public abstract AlgorithmParameterSpec getParameterSpec(NamedGroup ng);\n+        @Override\n+        public SSLPossession createPossession(\n+                NamedGroup ng, SecureRandom random) {\n+            if (scheme != null) {\n+                return scheme.createPossession(ng, random);\n+            }\n@@ -504,2 +535,2 @@\n-        public abstract boolean isAvailable(NamedGroup ng);\n-    }\n+            return null;\n+        }\n@@ -507,1 +538,6 @@\n-    private static class FFDHFunctions extends NamedGroupFunctions {\n+        @Override\n+        public SSLKeyDerivation createKeyDerivation(\n+                HandshakeContext hc) throws IOException {\n+            if (scheme != null) {\n+                return scheme.createKeyDerivation(hc);\n+            }\n@@ -509,3 +545,1 @@\n-        \/\/ lazy initialization\n-        private static class FunctionsHolder {\n-            private static final FFDHFunctions instance = new FFDHFunctions();\n+            return null;\n@@ -513,0 +547,1 @@\n+    }\n@@ -514,3 +549,2 @@\n-        private static FFDHFunctions getInstance() {\n-            return FunctionsHolder.instance;\n-        }\n+    private static class FFDHEScheme implements NamedGroupScheme {\n+        private static final FFDHEScheme instance = new FFDHEScheme();\n@@ -527,2 +561,2 @@\n-                ExceptionSupplier onConstraintFail)\n-                throws IOException, GeneralSecurityException {\n+                ExceptionSupplier onConstraintFail\n+            ) throws IOException, GeneralSecurityException {\n@@ -546,2 +580,2 @@\n-        public SSLKeyDerivation createKeyDerivation(HandshakeContext hc)\n-                throws IOException {\n+        public SSLKeyDerivation createKeyDerivation(\n+                HandshakeContext hc) throws IOException {\n@@ -551,88 +585,0 @@\n-\n-        @Override\n-        public AlgorithmParameterSpec getParameterSpec(NamedGroup ng) {\n-            return getDHParameterSpec(ng);\n-        }\n-\n-        DHParameterSpec getDHParameterSpec(NamedGroup ng) {\n-\n-            AlgorithmParameters params = getParameters(ng);\n-            try {\n-                return params.getParameterSpec(DHParameterSpec.class);\n-            } catch (InvalidParameterSpecException ipse) {\n-                \/\/ should be unlikely\n-                return getPredefinedDHParameterSpec(ng);\n-            }\n-        }\n-\n-        private static DHParameterSpec getFFDHEDHParameterSpec(\n-                NamedGroup namedGroup) {\n-\n-            DHParameterSpec spec = null;\n-            switch (namedGroup) {\n-                case FFDHE_2048:\n-                    spec = PredefinedDHParameterSpecs.ffdheParams.get(2048);\n-                    break;\n-                case FFDHE_3072:\n-                    spec = PredefinedDHParameterSpecs.ffdheParams.get(3072);\n-                    break;\n-                case FFDHE_4096:\n-                    spec = PredefinedDHParameterSpecs.ffdheParams.get(4096);\n-                    break;\n-                case FFDHE_6144:\n-                    spec = PredefinedDHParameterSpecs.ffdheParams.get(6144);\n-                    break;\n-                case FFDHE_8192:\n-                    spec = PredefinedDHParameterSpecs.ffdheParams.get(8192);\n-            }\n-\n-            return spec;\n-        }\n-\n-        private static DHParameterSpec getPredefinedDHParameterSpec(\n-                NamedGroup namedGroup) {\n-\n-            DHParameterSpec spec = null;\n-            switch (namedGroup) {\n-                case FFDHE_2048:\n-                    spec = PredefinedDHParameterSpecs.definedParams.get(2048);\n-                    break;\n-                case FFDHE_3072:\n-                    spec = PredefinedDHParameterSpecs.definedParams.get(3072);\n-                    break;\n-                case FFDHE_4096:\n-                    spec = PredefinedDHParameterSpecs.definedParams.get(4096);\n-                    break;\n-                case FFDHE_6144:\n-                    spec = PredefinedDHParameterSpecs.definedParams.get(6144);\n-                    break;\n-                case FFDHE_8192:\n-                    spec = PredefinedDHParameterSpecs.definedParams.get(8192);\n-            }\n-\n-            return spec;\n-        }\n-\n-        @Override\n-        public boolean isAvailable(NamedGroup ng) {\n-\n-            AlgorithmParameters params = getParameters(ng);\n-            return params != null;\n-        }\n-\n-        @Override\n-        protected Optional<AlgorithmParameters> getParametersImpl(\n-                NamedGroup ng) {\n-            try {\n-                AlgorithmParameters params\n-                        = AlgorithmParameters.getInstance(\"DiffieHellman\");\n-                AlgorithmParameterSpec spec\n-                        = getFFDHEDHParameterSpec(ng);\n-                params.init(spec);\n-                return Optional.of(params);\n-            } catch (InvalidParameterSpecException\n-                    | NoSuchAlgorithmException ex) {\n-                return Optional.empty();\n-            }\n-        }\n-\n@@ -641,10 +587,2 @@\n-    private static class ECDHFunctions extends NamedGroupFunctions {\n-\n-        \/\/ lazy initialization\n-        private static class FunctionsHolder {\n-            private static final ECDHFunctions instance = new ECDHFunctions();\n-        }\n-\n-        private static ECDHFunctions getInstance() {\n-            return FunctionsHolder.instance;\n-        }\n+    private static class ECDHEScheme implements NamedGroupScheme {\n+        private static final ECDHEScheme instance = new ECDHEScheme();\n@@ -661,2 +599,2 @@\n-                ExceptionSupplier onConstraintFail)\n-                throws IOException, GeneralSecurityException {\n+                ExceptionSupplier onConstraintFail\n+            ) throws IOException, GeneralSecurityException {\n@@ -680,3 +618,2 @@\n-        public SSLKeyDerivation createKeyDerivation(HandshakeContext hc)\n-                throws IOException {\n-\n+        public SSLKeyDerivation createKeyDerivation(\n+                HandshakeContext hc) throws IOException {\n@@ -685,29 +622,0 @@\n-\n-        @Override\n-        public AlgorithmParameterSpec getParameterSpec(NamedGroup ng) {\n-            return SupportedGroupsExtension.SupportedGroups\n-                    .getECGenParamSpec(ng);\n-        }\n-\n-        @Override\n-        public boolean isAvailable(NamedGroup ng) {\n-\n-            AlgorithmParameters params = getParameters(ng);\n-            return params != null;\n-        }\n-\n-        @Override\n-        protected Optional<AlgorithmParameters> getParametersImpl(\n-                NamedGroup ng) {\n-            try {\n-                AlgorithmParameters params\n-                        = AlgorithmParameters.getInstance(\"EC\");\n-                AlgorithmParameterSpec spec\n-                        = new ECGenParameterSpec(ng.oid);\n-                params.init(spec);\n-                return Optional.of(params);\n-            } catch (InvalidParameterSpecException\n-                    | NoSuchAlgorithmException ex) {\n-                return Optional.empty();\n-            }\n-        }\n@@ -716,10 +624,2 @@\n-    private static class XDHFunctions extends NamedGroupFunctions {\n-\n-        \/\/ lazy initialization\n-        private static class FunctionsHolder {\n-            private static final XDHFunctions instance = new XDHFunctions();\n-        }\n-\n-        private static XDHFunctions getInstance() {\n-            return FunctionsHolder.instance;\n-        }\n+    private static class XDHScheme implements NamedGroupScheme {\n+        private static final XDHScheme instance = new XDHScheme();\n@@ -735,2 +635,2 @@\n-                ExceptionSupplier onConstraintFail)\n-                throws IOException, GeneralSecurityException {\n+                ExceptionSupplier onConstraintFail\n+            ) throws IOException, GeneralSecurityException {\n@@ -754,2 +654,2 @@\n-        public SSLKeyDerivation createKeyDerivation(HandshakeContext hc)\n-                throws IOException {\n+        public SSLKeyDerivation createKeyDerivation(\n+                HandshakeContext hc) throws IOException {\n@@ -758,22 +658,0 @@\n-\n-        @Override\n-        public AlgorithmParameterSpec getParameterSpec(NamedGroup ng) {\n-            return new NamedParameterSpec(ng.name);\n-        }\n-\n-        @Override\n-        public boolean isAvailable(NamedGroup ng) {\n-\n-            try {\n-                KeyAgreement.getInstance(ng.algorithm);\n-                return true;\n-            } catch (NoSuchAlgorithmException ex) {\n-                return false;\n-            }\n-        }\n-\n-        @Override\n-        protected Optional<AlgorithmParameters> getParametersImpl(\n-                NamedGroup ng) {\n-            return Optional.empty();\n-        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/NamedGroup.java","additions":338,"deletions":460,"binary":false,"changes":798,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-import sun.security.ssl.NamedGroup.NamedGroupType;\n+import sun.security.ssl.NamedGroup.NamedGroupSpec;\n@@ -152,1 +152,1 @@\n-    private final AlgorithmParameterSpec signAlgParameter;\n+    private final SigAlgParamSpec signAlgParams;    \/\/ signature parameters\n@@ -187,2 +187,3 @@\n-        final private AlgorithmParameterSpec parameterSpec;\n-        final boolean isAvailable;\n+        private final AlgorithmParameterSpec parameterSpec;\n+        private final AlgorithmParameters parameters;\n+        private final boolean isAvailable;\n@@ -195,0 +196,1 @@\n+            AlgorithmParameters pssParams = null;\n@@ -200,0 +202,1 @@\n+                pssParams = signer.getParameters();\n@@ -201,1 +204,2 @@\n-                    NoSuchAlgorithmException exp) {\n+                    NoSuchAlgorithmException | RuntimeException exp) {\n+                \/\/ Signature.getParameters() may throw RuntimeException.\n@@ -212,4 +216,1 @@\n-        }\n-\n-        AlgorithmParameterSpec getParameterSpec() {\n-            return parameterSpec;\n+            this.parameters = mediator ? pssParams : null;\n@@ -258,1 +259,1 @@\n-            SigAlgParamSpec signAlgParamSpec,\n+            SigAlgParamSpec signAlgParams,\n@@ -266,2 +267,1 @@\n-        this.signAlgParameter =\n-            signAlgParamSpec != null ? signAlgParamSpec.parameterSpec : null;\n+        this.signAlgParams = signAlgParams;\n@@ -275,2 +275,2 @@\n-        if (signAlgParamSpec != null) {\n-            mediator = signAlgParamSpec.isAvailable;\n+        if (signAlgParams != null) {\n+            mediator = signAlgParams.isAvailable;\n@@ -345,0 +345,12 @@\n+    private boolean isPermitted(AlgorithmConstraints constraints) {\n+        return constraints.permits(SIGNATURE_PRIMITIVE_SET,\n+                        this.name, null) &&\n+               constraints.permits(SIGNATURE_PRIMITIVE_SET,\n+                        this.keyAlgorithm, null) &&\n+               constraints.permits(SIGNATURE_PRIMITIVE_SET,\n+                        this.algorithm, (signAlgParams != null ?\n+                                signAlgParams.parameters : null)) &&\n+               (namedGroup != null ?\n+                        namedGroup.isPermitted(constraints) : true);\n+    }\n+\n@@ -373,2 +385,1 @@\n-                if (constraints.permits(\n-                        SIGNATURE_PRIMITIVE_SET, ss.algorithm, null)) {\n+                if (ss.isPermitted(constraints)) {\n@@ -408,2 +419,1 @@\n-                    constraints.permits(SIGNATURE_PRIMITIVE_SET,\n-                           ss.algorithm, null)) {\n+                    ss.isPermitted(constraints)) {\n@@ -423,0 +433,1 @@\n+            AlgorithmConstraints constraints,\n@@ -430,2 +441,2 @@\n-                    certScheme.keyAlgorithm.equalsIgnoreCase(ss.keyAlgorithm)) {\n-\n+                    certScheme.keyAlgorithm.equalsIgnoreCase(ss.keyAlgorithm) &&\n+                    ss.isPermitted(constraints)) {\n@@ -440,0 +451,1 @@\n+            AlgorithmConstraints constraints,\n@@ -457,3 +469,4 @@\n-                    keyAlgorithm.equalsIgnoreCase(ss.keyAlgorithm)) {\n-                if ((ss.namedGroup != null) && (ss.namedGroup.type ==\n-                        NamedGroupType.NAMED_GROUP_ECDHE)) {\n+                    keyAlgorithm.equalsIgnoreCase(ss.keyAlgorithm) &&\n+                    ss.isPermitted(constraints)) {\n+                if ((ss.namedGroup != null) && (ss.namedGroup.spec ==\n+                        NamedGroupSpec.NAMED_GROUP_ECDHE)) {\n@@ -530,1 +543,2 @@\n-                    signAlgParameter);\n+                    (signAlgParams != null ?\n+                            signAlgParams.parameterSpec : null));\n@@ -533,1 +547,3 @@\n-                    signAlgParameter, null);\n+                    (signAlgParams != null ?\n+                            signAlgParams.parameterSpec : null),\n+                    null);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SignatureScheme.java","additions":41,"deletions":25,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -31,4 +31,0 @@\n-import java.security.AlgorithmParameters;\n-import java.security.CryptoPrimitive;\n-import java.security.spec.ECGenParameterSpec;\n-import java.security.spec.InvalidParameterSpecException;\n@@ -38,1 +34,0 @@\n-import java.util.EnumSet;\n@@ -44,1 +39,1 @@\n-import sun.security.ssl.NamedGroup.NamedGroupType;\n+import sun.security.ssl.NamedGroup.NamedGroupSpec;\n@@ -193,1 +188,1 @@\n-                            if (isAvailableGroup(namedGroup)) {\n+                            if (namedGroup.isAvailable) {\n@@ -229,1 +224,1 @@\n-                    if (isAvailableGroup(group)) {\n+                    if (group.isAvailable) {\n@@ -247,25 +242,0 @@\n-        \/\/ check whether the group is supported by the underlying providers\n-        private static boolean isAvailableGroup(NamedGroup namedGroup) {\n-            return namedGroup.isAvailableGroup();\n-        }\n-\n-        static ECGenParameterSpec getECGenParamSpec(NamedGroup ng) {\n-            if (ng.type != NamedGroupType.NAMED_GROUP_ECDHE) {\n-                 throw new RuntimeException(\n-                         \"Not a named EC group: \" + ng);\n-            }\n-\n-            \/\/ parameters are non-null\n-            AlgorithmParameters params = ng.getParameters();\n-            try {\n-                return params.getParameterSpec(ECGenParameterSpec.class);\n-            } catch (InvalidParameterSpecException ipse) {\n-                \/\/ should be unlikely\n-                return new ECGenParameterSpec(ng.oid);\n-            }\n-        }\n-\n-        static AlgorithmParameters getParameters(NamedGroup ng) {\n-            return ng.getParameters();\n-        }\n-\n@@ -274,1 +244,1 @@\n-                AlgorithmConstraints constraints, NamedGroupType type) {\n+                AlgorithmConstraints constraints, NamedGroupSpec type) {\n@@ -278,6 +248,2 @@\n-                if (namedGroup.type == type) {\n-                    if (constraints.permits(\n-                            EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),\n-                            namedGroup.algorithm,\n-                            getParameters(namedGroup))) {\n-\n+                if (namedGroup.isAvailable && namedGroup.spec == type) {\n+                    if (namedGroup.isPermitted(constraints)) {\n@@ -288,1 +254,1 @@\n-                            (type == NamedGroupType.NAMED_GROUP_FFDHE)) {\n+                            (type == NamedGroupSpec.NAMED_GROUP_FFDHE)) {\n@@ -300,1 +266,1 @@\n-            return !hasFFDHEGroups && type == NamedGroupType.NAMED_GROUP_FFDHE;\n+            return !hasFFDHEGroups && type == NamedGroupSpec.NAMED_GROUP_FFDHE;\n@@ -306,1 +272,1 @@\n-            if (!isSupported(namedGroup)) {\n+            if (!namedGroup.isAvailable || !isSupported(namedGroup)) {\n@@ -310,4 +276,1 @@\n-            return constraints.permits(\n-                            EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),\n-                            namedGroup.algorithm,\n-                            getParameters(namedGroup));\n+            return namedGroup.isPermitted(constraints);\n@@ -329,1 +292,1 @@\n-                AlgorithmConstraints constraints, NamedGroupType[] types,\n+                AlgorithmConstraints constraints, NamedGroupSpec[] types,\n@@ -332,1 +295,1 @@\n-                if ((NamedGroupType.arrayContains(types, namedGroup.type)) &&\n+                if ((NamedGroupSpec.arrayContains(types, namedGroup.spec)) &&\n@@ -335,4 +298,1 @@\n-                        constraints.permits(\n-                                EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),\n-                                namedGroup.algorithm,\n-                                getParameters(namedGroup))) {\n+                        namedGroup.isPermitted(constraints)) {\n@@ -348,1 +308,1 @@\n-                AlgorithmConstraints constraints, NamedGroupType[] types) {\n+                AlgorithmConstraints constraints, NamedGroupSpec[] types) {\n@@ -350,1 +310,1 @@\n-                if ((NamedGroupType.arrayContains(types, namedGroup.type)) &&\n+                if ((NamedGroupSpec.arrayContains(types, namedGroup.spec)) &&\n@@ -352,4 +312,1 @@\n-                        constraints.permits(\n-                                EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),\n-                                namedGroup.algorithm,\n-                                getParameters(namedGroup))) {\n+                        namedGroup.isPermitted(constraints)) {\n@@ -395,1 +352,1 @@\n-                    (ng.type == NamedGroupType.NAMED_GROUP_FFDHE)) {\n+                    (ng.spec == NamedGroupSpec.NAMED_GROUP_FFDHE)) {\n@@ -401,3 +358,1 @@\n-                        chc.algorithmConstraints.permits(\n-                            EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),\n-                            ng.algorithm, getParameters(ng))) {\n+                        ng.isPermitted(chc.algorithmConstraints)) {\n@@ -551,1 +506,1 @@\n-                    (ng.type == NamedGroupType.NAMED_GROUP_FFDHE)) {\n+                    (ng.spec == NamedGroupSpec.NAMED_GROUP_FFDHE)) {\n@@ -557,3 +512,1 @@\n-                        shc.algorithmConstraints.permits(\n-                            EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),\n-                            ng.algorithm, getParameters(ng))) {\n+                        ng.isPermitted(shc.algorithmConstraints)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SupportedGroupsExtension.java","additions":20,"deletions":67,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import sun.security.ssl.NamedGroup.NamedGroupType;\n+import sun.security.ssl.NamedGroup.NamedGroupSpec;\n@@ -71,1 +71,1 @@\n-            if (namedGroup.type != NamedGroupType.NAMED_GROUP_XDH) {\n+            if (namedGroup.spec != NamedGroupSpec.NAMED_GROUP_XDH) {\n@@ -104,2 +104,1 @@\n-                AlgorithmParameterSpec params = namedGroup.getParameterSpec();\n-                kpg.initialize(params, random);\n+                kpg.initialize(namedGroup.keAlgParamSpec, random);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/XDHKeyExchange.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    static NamedCurve lookup(String name) {\n+    public static NamedCurve lookup(String name) {\n@@ -86,1 +86,1 @@\n-    static NamedCurve lookup(ECParameterSpec params) {\n+    public static NamedCurve lookup(ECParameterSpec params) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/CurveDB.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -544,3 +544,3 @@\n-# algorithm. See \"Java Cryptography Architecture Standard Algorithm Name\n-# Documentation\" for information about Standard Algorithm Names.  Matching\n-# is performed using a case-insensitive sub-element matching rule.  (For\n+# algorithm. See the Java Security Standard Algorithm Names Specification\n+# for information about Standard Algorithm Names.  Matching is\n+# performed using a case-insensitive sub-element matching rule.  (For\n@@ -680,2 +680,3 @@\n-# protocol version negotiation, cipher suites selection, peer authentication\n-# and key exchange mechanisms.\n+# protocol version negotiation, cipher suites selection, named groups\n+# selection, signature schemes selection, peer authentication and key\n+# exchange mechanisms.\n@@ -702,1 +703,2 @@\n-#   jdk.tls.disabledAlgorithms=MD5, SSLv3, DSA, RSA keySize < 2048\n+#   jdk.tls.disabledAlgorithms=MD5, SSLv3, DSA, RSA keySize < 2048, \\\n+#       rsa_pkcs1_sha1, secp224r1\n@@ -746,2 +748,2 @@\n-# See SSL\/TLS specifications and \"Java Cryptography Architecture Standard\n-# Algorithm Name Documentation\" for information about the algorithm names.\n+# See SSL\/TLS specifications and the Java Security Standard Algorithm Names\n+# Specification for information about the algorithm names.\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8226374\n+ * @library \/javax\/net\/ssl\/templates\n+ * @summary Restrict signature algorithms and named groups\n+ * @run main\/othervm RestrictNamedGroup x25519\n+ * @run main\/othervm RestrictNamedGroup x448\n+ * @run main\/othervm RestrictNamedGroup secp256r1\n+ * @run main\/othervm RestrictNamedGroup secp384r1\n+ * @run main\/othervm RestrictNamedGroup secp521r1\n+ * @run main\/othervm RestrictNamedGroup ffdhe2048\n+ * @run main\/othervm RestrictNamedGroup ffdhe3072\n+ * @run main\/othervm RestrictNamedGroup ffdhe4096\n+ * @run main\/othervm RestrictNamedGroup ffdhe6144\n+ * @run main\/othervm RestrictNamedGroup ffdhe8192\n+ *\/\n+\n+import java.security.Security;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLServerSocket;\n+import javax.net.ssl.SSLException;\n+\n+public class RestrictNamedGroup extends SSLSocketTemplate {\n+\n+    private static volatile int index;\n+    private static final String[][][] protocols = {\n+        {{\"TLSv1.3\"}, {\"TLSv1.3\"}},\n+        {{\"TLSv1.3\", \"TLSv1.2\"}, {\"TLSv1.2\"}},\n+        {{\"TLSv1.3\", \"TLSv1.2\"}, {\"TLSv1.2\"}},\n+        {{\"TLSv1.2\"}, {\"TLSv1.3\", \"TLSv1.2\"}},\n+        {{\"TLSv1.2\"}, {\"TLSv1.2\"}}\n+    };\n+\n+    \/\/ Servers are configured before clients, increment test case after.\n+    @Override\n+    protected void configureClientSocket(SSLSocket socket) {\n+        String[] ps = protocols[index][0];\n+\n+        System.out.print(\"Setting client protocol(s): \");\n+        Arrays.stream(ps).forEachOrdered(System.out::print);\n+        System.out.println();\n+\n+        socket.setEnabledProtocols(ps);\n+        socket.setEnabledCipherSuites(new String[] {\n+            \"TLS_AES_128_GCM_SHA256\",\n+            \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\"});\n+    }\n+\n+    @Override\n+    protected void configureServerSocket(SSLServerSocket serverSocket) {\n+        String[] ps = protocols[index][1];\n+\n+        System.out.print(\"Setting server protocol(s): \");\n+        Arrays.stream(ps).forEachOrdered(System.out::print);\n+        System.out.println();\n+\n+        serverSocket.setEnabledProtocols(ps);\n+        serverSocket.setEnabledCipherSuites(new String[] {\n+            \"TLS_AES_128_GCM_SHA256\",\n+            \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\"});\n+    }\n+\n+    \/*\n+     * Run the test case.\n+     *\/\n+    public static void main(String[] args) throws Exception {\n+        Security.setProperty(\"jdk.tls.disabledAlgorithms\", args[0]);\n+        System.setProperty(\"jdk.tls.namedGroups\", args[0]);\n+\n+        for (index = 0; index < protocols.length; index++) {\n+            try {\n+                (new RestrictNamedGroup()).run();\n+            } catch (SSLException | IllegalStateException ssle) {\n+                \/\/ The named group should be restricted.\n+                continue;\n+            }\n+\n+            throw new Exception(\"The test case should be disabled\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/RestrictNamedGroup.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,232 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8226374\n+ * @library \/javax\/net\/ssl\/templates\n+ * @summary Restrict signature algorithms and named groups\n+ * @run main\/othervm RestrictSignatureScheme\n+ *\/\n+import java.io.ByteArrayInputStream;\n+import java.security.KeyFactory;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.Security;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLServerSocket;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.SSLException;\n+\n+public class RestrictSignatureScheme extends SSLSocketTemplate {\n+\n+    private static volatile int index;\n+    private static final String[][][] protocols = {\n+        {{\"TLSv1.3\"}, {\"TLSv1.3\"}},\n+        {{\"TLSv1.3\", \"TLSv1.2\"}, {\"TLSv1.2\"}},\n+        {{\"TLSv1.3\", \"TLSv1.2\"}, {\"TLSv1.2\"}},\n+        {{\"TLSv1.2\"}, {\"TLSv1.3\", \"TLSv1.2\"}},\n+        {{\"TLSv1.2\"}, {\"TLSv1.2\"}}\n+    };\n+\n+    private final SSLContext context;\n+    RestrictSignatureScheme() throws Exception {\n+        this.context = createSSLContext();\n+    }\n+\n+    @Override\n+    protected SSLContext createClientSSLContext() throws Exception {\n+        return context;\n+    }\n+\n+    @Override\n+    protected SSLContext createServerSSLContext() throws Exception {\n+        return context;\n+    }\n+\n+    \/\/ Servers are configured before clients, increment test case after.\n+    @Override\n+    protected void configureClientSocket(SSLSocket socket) {\n+        String[] ps = protocols[index][0];\n+\n+        System.out.print(\"Setting client protocol(s): \");\n+        Arrays.stream(ps).forEachOrdered(System.out::print);\n+        System.out.println();\n+\n+        socket.setEnabledProtocols(ps);\n+        socket.setEnabledCipherSuites(new String[] {\n+            \"TLS_AES_128_GCM_SHA256\",\n+            \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\"});\n+    }\n+\n+    @Override\n+    protected void configureServerSocket(SSLServerSocket serverSocket) {\n+        String[] ps = protocols[index][1];\n+\n+        System.out.print(\"Setting server protocol(s): \");\n+        Arrays.stream(ps).forEachOrdered(System.out::print);\n+        System.out.println();\n+\n+        serverSocket.setEnabledProtocols(ps);\n+        serverSocket.setEnabledCipherSuites(new String[] {\n+            \"TLS_AES_128_GCM_SHA256\",\n+            \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\"});\n+    }\n+\n+    \/*\n+     * Run the test case.\n+     *\/\n+    public static void main(String[] args) throws Exception {\n+        Security.setProperty(\"jdk.tls.disabledAlgorithms\", \"RSASSA-PSS\");\n+\n+        for (index = 0; index < protocols.length; index++) {\n+            try {\n+                (new RestrictSignatureScheme()).run();\n+            } catch (SSLException | IllegalStateException ssle) {\n+                \/\/ The named group should be restricted.\n+                continue;\n+            }\n+\n+            throw new Exception(\"The test case should be disabled\");\n+        }\n+    }\n+\n+\n+    private static final String trustedCertStr =\n+        \/**\n+        * Signature Algorithm: rsassaPss\n+        * Issuer: CN = localhost\n+        * Validity Not Before: Jun 6 07:11:00 2018 GMT\n+        * Not After : Jun 1 07:11:00 2038 GMT\n+        * Subject: CN = localhost\n+        * Public Key Algorithm: rsassaPss\n+        *\/\n+       \"-----BEGIN CERTIFICATE-----\\n\"\n+       + \"MIIDZjCCAh2gAwIBAgIUHxwPs3eAgJ057nJwiLgWZWeNqdgwPgYJKoZIhvcNAQEK\\n\"\n+       + \"MDGgDTALBglghkgBZQMEAgGhGjAYBgkqhkiG9w0BAQgwCwYJYIZIAWUDBAIBogQC\\n\"\n+       + \"AgDeMBQxEjAQBgNVBAMMCWxvY2FsaG9zdDAeFw0xODA2MDYwNzExMDBaFw0zODA2\\n\"\n+       + \"MDEwNzExMDBaMBQxEjAQBgNVBAMMCWxvY2FsaG9zdDCCASAwCwYJKoZIhvcNAQEK\\n\"\n+       + \"A4IBDwAwggEKAoIBAQCl8r4Qrg27BYUO\/1Va2Ix8QPGzN\/lvzmKvP5Ff26ovNW4v\\n\"\n+       + \"RUx68HzAhhiWtcl+PwLSbJqJreEkTlle7PnRAypby3fO7ZAK0Y3YiHquaBg7d+7Y\\n\"\n+       + \"FhhHwv8gG0lZcyA0BkXFJHqdq76qar0xHC6DVezXm0K3mcceymGtFR9BzWmAj+7D\\n\"\n+       + \"YsSwvtTQ7WNoQmf0cdDMSM71IwaTwIwvT2wzX1vv5hcdDyXdr64WFqWSA9sNJ2K6\\n\"\n+       + \"arxaaU1klwKSgDokF6njafWQ4UxdR67d5W1MYoiioDs2Yy3utsMpO2OUzZVBZNdT\\n\"\n+       + \"gkr1jsJhIurpz\/5K51lwJIRQBezEFSb+60AFVoMJAgMBAAGjUDBOMB0GA1UdDgQW\\n\"\n+       + \"BBQfFit5ilWJmZgCX4QY0HsaI9iIDDAfBgNVHSMEGDAWgBQfFit5ilWJmZgCX4QY\\n\"\n+       + \"0HsaI9iIDDAMBgNVHRMEBTADAQH\/MD4GCSqGSIb3DQEBCjAxoA0wCwYJYIZIAWUD\\n\"\n+       + \"BAIBoRowGAYJKoZIhvcNAQEIMAsGCWCGSAFlAwQCAaIEAgIA3gOCAQEAa4yUQ3gh\\n\"\n+       + \"d1YWPdEa1sv2hdkhtenw6m5yxbmaQl2+nIKSpk4RfpXC7K1EYwBF8TdfFbD8hGGh\\n\"\n+       + \"5n81BT0\/dn1R9SRGCv7KTxx4lfQt31frlsw\/tVciwyXQtcUZ6DqfnLP0\/aRVLNgx\\n\"\n+       + \"zaP542JUHFYLTC3EGz2zUgv70ZUTlIsPG3\/p8YO1iXdnYGQyzOuQPUBpI7nS7UtR\\n\"\n+       + \"Ug8VE9ACpBxxI3qChMahFZGHlXCCSjSmxpQa6UO4SQl8q5tPNnqdzWwvAW8qkCy4\\n\"\n+       + \"6barRQ4sMcGayhHh\/uSTx7bcl0FMJpcI1ygbw7\/Pc03zKtw0gMTBMns7q4yXjb\/u\\n\"\n+       + \"ef47nW0t+LRAAg==\\n\"\n+       + \"-----END CERTIFICATE-----\\n\";\n+\n+    private static final String keyCertStr = trustedCertStr;\n+\n+    private static final String privateKey =\n+        \"MIIEuwIBADALBgkqhkiG9w0BAQoEggSnMIIEowIBAAKCAQEApfK+EK4NuwWFDv9V\\n\"\n+        + \"WtiMfEDxszf5b85irz+RX9uqLzVuL0VMevB8wIYYlrXJfj8C0myaia3hJE5ZXuz5\\n\"\n+        + \"0QMqW8t3zu2QCtGN2Ih6rmgYO3fu2BYYR8L\/IBtJWXMgNAZFxSR6nau+qmq9MRwu\\n\"\n+        + \"g1Xs15tCt5nHHsphrRUfQc1pgI\/uw2LEsL7U0O1jaEJn9HHQzEjO9SMGk8CML09s\\n\"\n+        + \"M19b7+YXHQ8l3a+uFhalkgPbDSdiumq8WmlNZJcCkoA6JBep42n1kOFMXUeu3eVt\\n\"\n+        + \"TGKIoqA7NmMt7rbDKTtjlM2VQWTXU4JK9Y7CYSLq6c\/+SudZcCSEUAXsxBUm\/utA\\n\"\n+        + \"BVaDCQIDAQABAoIBAAc4vRS0vlw5LUUtz2UYr2Ro3xvRf8Vh0eGWfpkRUiKjzJu6\\n\"\n+        + \"BE4FUSh\/rWpBlvcrfs\/xcfgz3OxbjIAZB\/YUkS9Vd21F4VLXM7kMl2onlYZg\/b\/h\\n\"\n+        + \"lkTpM3kONu7xl6Er9LVTlRJveuinpHwSoeONRbVMSGb9BjFM1VtW4\/lVGxZBG05D\\n\"\n+        + \"y9i\/o4vCZqULn9cAumOwicKuCyTcS58XcMJ+puSPfRA71PYLxqFkASAoJsUwCXpo\\n\"\n+        + \"gs39lLsIFgrfO8mBO1ux\/SE+QaRc+9XqFSHHKD1XqF\/9zSYBgWjE910EcpdYEdZx\\n\"\n+        + \"GEkwea7Fn4brO5OpIrHY\/45naqbUOBzv6gufMAECgYEAz7PHCdcrQvmOb8EiNbQH\\n\"\n+        + \"uvSimwObWJFeN1ykp6mfRbSnkXw7p8+M4Tc8HFi8QLpoq63Ev2AwoaQCQvHbFC2Y\\n\"\n+        + \"1Cz0EkC0aOp+tZP7U2AUBdkcDesZAJQTad0zV6KesyIUXdxZXDG8JJ1XSNWfTJV4\\n\"\n+        + \"QD+BjLZ0jiAyCIfVYvWQqYkCgYEAzIln1nKTixLMPr5CldSmR7ZarEtPJU+hHwVg\\n\"\n+        + \"dV\/Lc6d2Yy9JgunOXRo4BXB1TEo8JFbK3HBQH6tS8li4qDr7WK5wyYfh8qb4WZyu\\n\"\n+        + \"lc562f2WVYntcN8\/Ojb+Vyrt7lk9sq\/8KoVHxEAWd6mqL9VTPYuAu1Vw9fTGIZfB\\n\"\n+        + \"lDeELYECgYAvdzU4UXzofGGJtohb332YwwlaBZP9xJLUcg6K5l+orWVSASMc8XiP\\n\"\n+        + \"i3DoRXsYC8GZ4kdBOPlEJ1gA9oaLcPQpIPDSLwlLpLM6Scw4vI822uvnXl\/DWxOo\\n\"\n+        + \"sM1n7Jj59QLUhGPDhvYpI+\/rjC4wcUQe4qR3hMbUKBVnD6u7RsU9iQKBgQCQ17VK\\n\"\n+        + \"7bSCRfuRaxaoGADww7gOTv5rQ6qr1xjpxb7D1hFGR9Rc+smCsPB\/GZZXQjK44SWj\\n\"\n+        + \"WX3ED4Ubzaxmpe4cbNu+O5XMSmWQwB36RFBHUwdE5\/nXdqDFzu\/qNqJrqZLBmVKP\\n\"\n+        + \"ofaiiWffsaytVvotmT6+atElvAMbAua42V+nAQKBgHtIn3mYMHLriYGhQzpkFEA2\\n\"\n+        + \"8YcAMlKppueOMAKVy8nLu2r3MidmLAhMiKJQKG45I3Yg0\/t\/25tXLiOPJlwrOebh\\n\"\n+        + \"xQqUBI\/JUOIpGAEnr48jhOXnCS+i+z294G5U\/RgjXrlR4bCPvrtCmwzWwe0h79w2\\n\"\n+        + \"Q2hO5ZTW6UD9CVA85whf\";\n+\n+    private static SSLContext createSSLContext() throws Exception {\n+        \/\/ Generate certificate from cert string\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+\n+        \/\/ Create a key store\n+        KeyStore ts = KeyStore.getInstance(\"PKCS12\");\n+        KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n+        ts.load(null, null);\n+        ks.load(null, null);\n+        char passphrase[] = \"passphrase\".toCharArray();\n+\n+        \/\/ Import the trusted cert\n+        ts.setCertificateEntry(\"trusted-cert-RSASSA-PSS\",\n+                cf.generateCertificate(new ByteArrayInputStream(\n+                        trustedCertStr.getBytes())));\n+\n+        boolean hasKeyMaterials = keyCertStr != null && privateKey != null;\n+        if (hasKeyMaterials) {\n+\n+            \/\/ Generate the private key.\n+            PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(\n+                    Base64.getMimeDecoder().decode(privateKey));\n+            KeyFactory kf = KeyFactory.getInstance(\"RSASSA-PSS\");\n+            PrivateKey priKey = kf.generatePrivate(priKeySpec);\n+\n+            \/\/ Generate certificate chain\n+            Certificate keyCert = cf.generateCertificate(\n+                    new ByteArrayInputStream(keyCertStr.getBytes()));\n+            Certificate[] chain = new Certificate[]{keyCert};\n+\n+            \/\/ Import the key entry.\n+            ks.setKeyEntry(\"cert-RSASSA-PSS\", priKey, passphrase, chain);\n+        }\n+\n+        \/\/ Create SSL context\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n+        tmf.init(ts);\n+\n+        SSLContext context = SSLContext.getInstance(\"TLS\");\n+        if (hasKeyMaterials) {\n+            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"NewSunX509\");\n+            kmf.init(ks, passphrase);\n+            context.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n+        } else {\n+            context.init(null, tmf.getTrustManagers(), null);\n+        }\n+\n+        return context;\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/RestrictSignatureScheme.java","additions":232,"deletions":0,"binary":false,"changes":232,"status":"added"}]}