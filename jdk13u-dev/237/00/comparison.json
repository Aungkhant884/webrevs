{"files":[{"patch":"@@ -196,0 +196,4 @@\n+    private static final DisabledAlgorithmConstraints LEGACY_CHECK =\n+            new DisabledAlgorithmConstraints(\n+                    DisabledAlgorithmConstraints.PROPERTY_SECURITY_LEGACY_ALGS);\n+\n@@ -3324,1 +3328,5 @@\n-            return alg;\n+            if (LEGACY_CHECK.permits(SIG_PRIMITIVE_SET, alg, null)) {\n+                return alg;\n+            } else {\n+                return String.format(rb.getString(\"with.weak\"), alg);\n+            }\n@@ -3326,1 +3334,1 @@\n-            return String.format(rb.getString(\"with.weak\"), alg);\n+            return String.format(rb.getString(\"with.disabled\"), alg);\n@@ -3345,2 +3353,6 @@\n-            if (kLen >= 0) {\n-                return String.format(rb.getString(\"key.bit\"), kLen, displayAlg);\n+            if (LEGACY_CHECK.permits(SIG_PRIMITIVE_SET, key)) {\n+                if (kLen >= 0) {\n+                    return String.format(rb.getString(\"key.bit\"), kLen, displayAlg);\n+                } else {\n+                    return String.format(rb.getString(\"unknown.size.1\"), displayAlg);\n+                }\n@@ -3348,1 +3360,1 @@\n-                return String.format(rb.getString(\"unknown.size.1\"), displayAlg);\n+                return String.format(rb.getString(\"key.bit.weak\"), kLen, displayAlg);\n@@ -3351,1 +3363,1 @@\n-            return String.format(rb.getString(\"key.bit.weak\"), kLen, displayAlg);\n+            return String.format(rb.getString(\"key.bit.disabled\"), kLen, displayAlg);\n@@ -4628,5 +4640,8 @@\n-\n-        if (sigAlg != null && !DISABLED_CHECK.permits(\n-                SIG_PRIMITIVE_SET, sigAlg, null)) {\n-            weakWarnings.add(String.format(\n-                    rb.getString(\"whose.sigalg.risk\"), label, sigAlg));\n+        if (sigAlg != null) {\n+            if (!DISABLED_CHECK.permits(SIG_PRIMITIVE_SET, sigAlg, null)) {\n+                weakWarnings.add(String.format(\n+                    rb.getString(\"whose.sigalg.disabled\"), label, sigAlg));\n+            } else if (!LEGACY_CHECK.permits(SIG_PRIMITIVE_SET, sigAlg, null)) {\n+                weakWarnings.add(String.format(\n+                    rb.getString(\"whose.sigalg.weak\"), label, sigAlg));\n+            }\n@@ -4634,4 +4649,5 @@\n-        if (key != null && !DISABLED_CHECK.permits(SIG_PRIMITIVE_SET, key)) {\n-            weakWarnings.add(String.format(\n-                    rb.getString(\"whose.key.risk\"),\n-                    label,\n+\n+        if (key != null) {\n+            if (!DISABLED_CHECK.permits(SIG_PRIMITIVE_SET, key)) {\n+                weakWarnings.add(String.format(\n+                    rb.getString(\"whose.key.disabled\"), label,\n@@ -4639,1 +4655,7 @@\n-                            KeyUtil.getKeySize(key), fullDisplayAlgName(key))));\n+                    KeyUtil.getKeySize(key), fullDisplayAlgName(key))));\n+            } else if (!LEGACY_CHECK.permits(SIG_PRIMITIVE_SET, key)) {\n+                weakWarnings.add(String.format(\n+                    rb.getString(\"whose.key.weak\"), label,\n+                    String.format(rb.getString(\"key.bit\"),\n+                    KeyUtil.getKeySize(key), fullDisplayAlgName(key))));\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":38,"deletions":16,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -462,0 +462,1 @@\n+        {\"with.disabled\", \"%s (disabled)\"},\n@@ -464,0 +465,1 @@\n+        {\"key.bit.disabled\", \"%1$d-bit %2$s key (disabled)\"},\n@@ -471,2 +473,4 @@\n-        {\"whose.sigalg.risk\", \"%1$s uses the %2$s signature algorithm which is considered a security risk.\"},\n-        {\"whose.key.risk\", \"%1$s uses a %2$s which is considered a security risk.\"},\n+        {\"whose.sigalg.disabled\", \"%1$s uses the %2$s signature algorithm which is considered a security risk and is disabled.\"},\n+        {\"whose.sigalg.weak\", \"%1$s uses the %2$s signature algorithm which is considered a security risk. This algorithm will be disabled in a future update.\"},\n+        {\"whose.key.disabled\", \"%1$s uses a %2$s which is considered a security risk and is disabled.\"},\n+        {\"whose.key.weak\", \"%1$s uses a %2$s which is considered a security risk. This key size will be disabled in a future update.\"},\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Resources.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -72,0 +72,4 @@\n+    \/\/ Legacy algorithm security property for certificate path and jar\n+    public static final String PROPERTY_SECURITY_LEGACY_ALGS =\n+            \"jdk.security.legacyAlgorithms\";\n+\n@@ -978,1 +982,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DisabledAlgorithmConstraints.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -657,0 +657,20 @@\n+#\n+# Legacy algorithms for certification path (CertPath) processing and\n+# signed JAR files.\n+#\n+# In some environments, a certain algorithm or key length may be undesirable\n+# but is not yet disabled.\n+#\n+# Tools such as keytool and jarsigner may emit warnings when these legacy\n+# algorithms are used. See the man pages for those tools for more information.\n+#\n+# The syntax is the same as the \"jdk.certpath.disabledAlgorithms\" and\n+# \"jdk.jar.disabledAlgorithms\" security properties.\n+#\n+# Note: This property is currently used by the JDK Reference\n+# implementation. It is not guaranteed to be examined and used by other\n+# implementations.\n+\n+jdk.security.legacyAlgorithms=SHA1, \\\n+    RSA keySize < 2048, DSA keySize < 2048\n+\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -102,0 +102,4 @@\n+    private static final DisabledAlgorithmConstraints LEGACY_CHECK =\n+            new DisabledAlgorithmConstraints(\n+                    DisabledAlgorithmConstraints.PROPERTY_SECURITY_LEGACY_ALGS);\n+\n@@ -175,0 +179,5 @@\n+    private PublicKey weakPublicKey = null;\n+    private boolean disabledAlgFound = false;\n+    private String legacyDigestAlg = null;\n+    private String legacyTsaDigestAlg = null;\n+    private String legacySigAlg = null;\n@@ -185,1 +194,2 @@\n-    private int weakAlg = 0; \/\/ 1. digestalg, 2. sigalg, 4. tsadigestalg\n+    private int legacyAlg = 0; \/\/ 1. digestalg, 2. sigalg, 4. tsadigestalg, 8. key\n+    private int disabledAlg = 0; \/\/ 1. digestalg, 2. sigalg, 4. tsadigestalg, 8. key\n@@ -202,2 +212,0 @@\n-    private boolean seeWeak = false;\n-\n@@ -292,1 +300,1 @@\n-            if (weakAlg != 0 || chainNotValidated || hasExpiredCert\n+            if (disabledAlg != 0 || chainNotValidated || hasExpiredCert\n@@ -916,1 +924,1 @@\n-            \/\/ must be generated so seeWeak can be updated.\n+            \/\/ must be generated so disabledAlgFound can be updated.\n@@ -960,3 +968,3 @@\n-                                        withWeak(digestAlg, DIGEST_PRIMITIVE_SET),\n-                                        withWeak(sigAlg, SIG_PRIMITIVE_SET),\n-                                        withWeak(key),\n+                                        verifyWithWeak(digestAlg, DIGEST_PRIMITIVE_SET, false),\n+                                        verifyWithWeak(sigAlg, SIG_PRIMITIVE_SET, false),\n+                                        verifyWithWeak(key),\n@@ -965,3 +973,3 @@\n-                                        withWeak(tsDigestAlg, DIGEST_PRIMITIVE_SET),\n-                                        withWeak(tsSigAlg, SIG_PRIMITIVE_SET),\n-                                        withWeak(tsKey));\n+                                        verifyWithWeak(tsDigestAlg, DIGEST_PRIMITIVE_SET, true),\n+                                        verifyWithWeak(tsSigAlg, SIG_PRIMITIVE_SET, true),\n+                                        verifyWithWeak(tsKey));\n@@ -972,3 +980,3 @@\n-                                        withWeak(digestAlg, DIGEST_PRIMITIVE_SET),\n-                                        withWeak(sigAlg, SIG_PRIMITIVE_SET),\n-                                        withWeak(key));\n+                                        verifyWithWeak(digestAlg, DIGEST_PRIMITIVE_SET, false),\n+                                        verifyWithWeak(sigAlg, SIG_PRIMITIVE_SET, false),\n+                                        verifyWithWeak(key));\n@@ -998,0 +1006,1 @@\n+\n@@ -999,1 +1008,1 @@\n-                if (seeWeak) {\n+                if (disabledAlgFound) {\n@@ -1042,2 +1051,2 @@\n-                hasUnsignedEntry || signerSelfSigned || (weakAlg != 0) ||\n-                aliasNotInStore || notSignedByAlias ||\n+                hasUnsignedEntry || signerSelfSigned || (legacyAlg != 0) ||\n+                (disabledAlg != 0) || aliasNotInStore || notSignedByAlias ||\n@@ -1125,7 +1134,6 @@\n-            \/\/ weakAlg only detected in signing. The jar file is\n-            \/\/ now simply treated unsigned in verifying.\n-            if ((weakAlg & 1) == 1) {\n-                errors.add(String.format(\n-                        rb.getString(\"The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk.\"),\n-                        digestalg, \"-digestalg\"));\n-            }\n+            if (isSigning) {\n+                if ((legacyAlg & 1) == 1) {\n+                    warnings.add(String.format(\n+                            rb.getString(\"The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update.\"),\n+                            digestalg, \"-digestalg\"));\n+                }\n@@ -1133,14 +1141,62 @@\n-            if ((weakAlg & 2) == 2) {\n-                errors.add(String.format(\n-                        rb.getString(\"The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk.\"),\n-                        sigalg, \"-sigalg\"));\n-            }\n-            if ((weakAlg & 4) == 4) {\n-                errors.add(String.format(\n-                        rb.getString(\"The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk.\"),\n-                        tSADigestAlg, \"-tsadigestalg\"));\n-            }\n-            if ((weakAlg & 8) == 8) {\n-                errors.add(String.format(\n-                        rb.getString(\"The.1.signing.key.has.a.keysize.of.2.which.is.considered.a.security.risk.\"),\n-                        privateKey.getAlgorithm(), KeyUtil.getKeySize(privateKey)));\n+                if ((disabledAlg & 1) == 1) {\n+                    errors.add(String.format(\n+                            rb.getString(\"The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk.and.is.disabled.\"),\n+                            digestalg, \"-digestalg\"));\n+                }\n+\n+                if ((legacyAlg & 2) == 2) {\n+                    warnings.add(String.format(\n+                            rb.getString(\"The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update.\"),\n+                            sigalg, \"-sigalg\"));\n+                }\n+                if ((disabledAlg & 2) == 2) {\n+                    errors.add(String.format(\n+                            rb.getString(\"The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk.and.is.disabled.\"),\n+                            sigalg, \"-sigalg\"));\n+                }\n+\n+                if ((legacyAlg & 4) == 4) {\n+                    warnings.add(String.format(\n+                            rb.getString(\"The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update.\"),\n+                            tSADigestAlg, \"-tsadigestalg\"));\n+                }\n+                if ((disabledAlg & 4) == 4) {\n+                    errors.add(String.format(\n+                            rb.getString(\"The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk.and.is.disabled.\"),\n+                            tSADigestAlg, \"-tsadigestalg\"));\n+                }\n+\n+                if ((legacyAlg & 8) == 8) {\n+                    warnings.add(String.format(\n+                            rb.getString(\"The.1.signing.key.has.a.keysize.of.2.which.is.considered.a.security.risk..This.key.size.will.be.disabled.in.a.future.update.\"),\n+                            privateKey.getAlgorithm(), KeyUtil.getKeySize(privateKey)));\n+                }\n+                if ((disabledAlg & 8) == 8) {\n+                    errors.add(String.format(\n+                            rb.getString(\"The.1.signing.key.has.a.keysize.of.2.which.is.considered.a.security.risk.and.is.disabled.\"),\n+                            privateKey.getAlgorithm(), KeyUtil.getKeySize(privateKey)));\n+                }\n+            } else {\n+                if ((legacyAlg & 1) != 0) {\n+                    warnings.add(String.format(\n+                            rb.getString(\"The.digest.algorithm.1.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update.\"),\n+                            legacyDigestAlg));\n+                }\n+\n+                if ((legacyAlg & 2) == 2) {\n+                     warnings.add(String.format(\n+                             rb.getString(\"The.signature.algorithm.1.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update.\"),\n+                             legacySigAlg));\n+                }\n+\n+                if ((legacyAlg & 4) != 0) {\n+                    warnings.add(String.format(\n+                            rb.getString(\"The.digest.algorithm.1.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update.\"),\n+                            legacyTsaDigestAlg));\n+                }\n+\n+                if ((legacyAlg & 8) == 8) {\n+                    warnings.add(String.format(\n+                            rb.getString(\"The.1.signing.key.has.a.keysize.of.2.which.is.considered.a.security.risk..This.key.size.will.be.disabled.in.a.future.update.\"),\n+                            weakPublicKey.getAlgorithm(), KeyUtil.getKeySize(weakPublicKey)));\n+                }\n@@ -1255,1 +1311,1 @@\n-    private String withWeak(String alg, Set<CryptoPrimitive> primitiveSet) {\n+    private String verifyWithWeak(String alg, Set<CryptoPrimitive> primitiveSet, boolean tsa) {\n@@ -1257,1 +1313,17 @@\n-            return alg;\n+            if (LEGACY_CHECK.permits(primitiveSet, alg, null)) {\n+                return alg;\n+            } else {\n+                if (primitiveSet == SIG_PRIMITIVE_SET) {\n+                   legacyAlg |= 2;\n+                   legacySigAlg = alg;\n+                } else {\n+                    if (tsa) {\n+                        legacyAlg |= 4;\n+                        legacyTsaDigestAlg = alg;\n+                    } else {\n+                        legacyAlg |= 1;\n+                        legacyDigestAlg = alg;\n+                    }\n+                }\n+                return String.format(rb.getString(\"with.weak\"), alg);\n+            }\n@@ -1259,2 +1331,2 @@\n-            seeWeak = true;\n-            return String.format(rb.getString(\"with.weak\"), alg);\n+            disabledAlgFound = true;\n+            return String.format(rb.getString(\"with.disabled\"), alg);\n@@ -1264,1 +1336,2 @@\n-    private String withWeak(PublicKey key) {\n+    private String verifyWithWeak(PublicKey key) {\n+        int kLen = KeyUtil.getKeySize(key);\n@@ -1266,3 +1339,6 @@\n-            int kLen = KeyUtil.getKeySize(key);\n-            if (kLen >= 0) {\n-                return String.format(rb.getString(\"key.bit\"), kLen);\n+            if (LEGACY_CHECK.permits(SIG_PRIMITIVE_SET, key)) {\n+                if (kLen >= 0) {\n+                    return String.format(rb.getString(\"key.bit\"), kLen);\n+                } else {\n+                    return rb.getString(\"unknown.size\");\n+                }\n@@ -1270,1 +1346,3 @@\n-                return rb.getString(\"unknown.size\");\n+                weakPublicKey = key;\n+                legacyAlg |= 8;\n+                return String.format(rb.getString(\"key.bit.weak\"), kLen);\n@@ -1273,3 +1351,38 @@\n-            seeWeak = true;\n-            return String.format(\n-                    rb.getString(\"key.bit.weak\"), KeyUtil.getKeySize(key));\n+           disabledAlgFound = true;\n+           return String.format(rb.getString(\"key.bit.disabled\"), kLen);\n+        }\n+    }\n+\n+    private void checkWeakSign(String alg, Set<CryptoPrimitive> primitiveSet, boolean tsa) {\n+        if (DISABLED_CHECK.permits(primitiveSet, alg, null)) {\n+            if (!LEGACY_CHECK.permits(primitiveSet, alg, null)) {\n+                if (primitiveSet == SIG_PRIMITIVE_SET) {\n+                   legacyAlg |= 2;\n+                } else {\n+                    if (tsa) {\n+                        legacyAlg |= 4;\n+                    } else {\n+                        legacyAlg |= 1;\n+                    }\n+                }\n+            }\n+        } else {\n+           if (primitiveSet == SIG_PRIMITIVE_SET) {\n+               disabledAlg |= 2;\n+           } else {\n+               if (tsa) {\n+                   disabledAlg |= 4;\n+               } else {\n+                   disabledAlg |= 1;\n+               }\n+           }\n+        }\n+    }\n+\n+    private void checkWeakSign(PrivateKey key) {\n+        if (DISABLED_CHECK.permits(SIG_PRIMITIVE_SET, key)) {\n+            if (!LEGACY_CHECK.permits(SIG_PRIMITIVE_SET, key)) {\n+                legacyAlg |= 8;\n+            }\n+        } else {\n+            disabledAlg |= 8;\n@@ -1502,3 +1615,2 @@\n-        if (digestalg != null && !DISABLED_CHECK.permits(\n-                DIGEST_PRIMITIVE_SET, digestalg, null)) {\n-            weakAlg |= 1;\n+        if (digestalg == null) {\n+            digestalg = JarSigner.Builder.getDefaultDigestAlgorithm();\n@@ -1506,7 +1618,4 @@\n-        if (tSADigestAlg != null && !DISABLED_CHECK.permits(\n-                DIGEST_PRIMITIVE_SET, tSADigestAlg, null)) {\n-            weakAlg |= 4;\n-        }\n-        if (sigalg != null && !DISABLED_CHECK.permits(\n-                SIG_PRIMITIVE_SET , sigalg, null)) {\n-            weakAlg |= 2;\n+        checkWeakSign(digestalg, DIGEST_PRIMITIVE_SET, false);\n+\n+        if (tSADigestAlg == null) {\n+            tSADigestAlg = JarSigner.Builder.getDefaultDigestAlgorithm();\n@@ -1514,3 +1623,4 @@\n-        if (!DISABLED_CHECK.permits(\n-                SIG_PRIMITIVE_SET, privateKey)) {\n-            weakAlg |= 8;\n+        checkWeakSign(tSADigestAlg, DIGEST_PRIMITIVE_SET, true);\n+\n+        if (sigalg == null) {\n+            sigalg = JarSigner.Builder.getDefaultSignatureAlgorithm(privateKey);\n@@ -1518,0 +1628,3 @@\n+        checkWeakSign(sigalg, SIG_PRIMITIVE_SET, false);\n+\n+        checkWeakSign(privateKey);\n@@ -1754,1 +1867,0 @@\n-\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":176,"deletions":64,"binary":false,"changes":240,"status":"modified"},{"patch":"@@ -171,0 +171,1 @@\n+        {\"with.disabled\", \"%s (disabled)\"},\n@@ -173,0 +174,1 @@\n+        {\"key.bit.disabled\", \"%d-bit key (disabled)\"},\n@@ -282,4 +284,12 @@\n-        {\"The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk.\",\n-                \"The %1$s algorithm specified for the %2$s option is considered a security risk.\"},\n-        {\"The.1.signing.key.has.a.keysize.of.2.which.is.considered.a.security.risk.\",\n-                \"The %1$s signing key has a keysize of %2$d which is considered a security risk.\"},\n+        {\"The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update.\",\n+                \"The %1$s algorithm specified for the %2$s option is considered a security risk. This algorithm will be disabled in a future update.\"},\n+        {\"The.1.algorithm.specified.for.the.2.option.is.considered.a.security.risk.and.is.disabled.\",\n+                \"The %1$s algorithm specified for the %2$s option is considered a security risk and is disabled.\"},\n+        {\"The.digest.algorithm.1.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update.\",\n+                \"The %1$s digest algorithm is considered a security risk. This algorithm will be disabled in a future update.\"},\n+        {\"The.signature.algorithm.1.is.considered.a.security.risk..This.algorithm.will.be.disabled.in.a.future.update.\",\n+                \"The %1$s signature algorithm is considered a security risk. This algorithm will be disabled in a future update.\"},\n+        {\"The.1.signing.key.has.a.keysize.of.2.which.is.considered.a.security.risk..This.key.size.will.be.disabled.in.a.future.update.\",\n+                \"The %1$s signing key has a keysize of %2$d which is considered a security risk. This key size will be disabled in a future update.\"},\n+        {\"The.1.signing.key.has.a.keysize.of.2.which.is.considered.a.security.risk.and.is.disabled.\",\n+                \"The %1$s signing key has a keysize of %2$d which is considered a security risk and is disabled.\"},\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Resources.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        \/\/ Choose 1024-bit RSA to make sure it runs fine and fast. In\n+        \/\/ Choose 2048-bit RSA to make sure it runs fine and fast. In\n@@ -47,1 +47,1 @@\n-                + \"-keystore ks -keyalg rsa -keysize 1024 \" + cmd);\n+                + \"-keystore ks -keyalg rsa -keysize 2048 \" + cmd);\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/ConciseJarsigner.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-                \"jarsigner.sign = -digestalg SHA1\",\n+                \"jarsigner.sign = -digestalg SHA-512\",\n@@ -84,1 +84,1 @@\n-                    .anyMatch(s -> s.toString().contains(\"SHA1-Digest\")));\n+                    .anyMatch(s -> s.toString().contains(\"SHA-512-Digest\")));\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/DefaultOptions.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n-        js(\"a.jar b -debug -strict -sigalg SHA1withECDSA\").shouldHaveExitValue(0);\n+        js(\"a.jar b -debug -strict -sigalg SHA256withECDSA\").shouldHaveExitValue(0);\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/EC.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-        SecurityTools.jarsigner(common + \"a.jar a -digestalg SHA1\")\n+        SecurityTools.jarsigner(common + \"a.jar a -digestalg SHA-256\")\n@@ -52,1 +52,1 @@\n-        SecurityTools.jarsigner(common + \"a.jar b -digestalg SHA-1\")\n+        SecurityTools.jarsigner(common + \"a.jar b -digestalg SHA-256\")\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/NameClash.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n- * @bug 6543842 6543440 6939248 8009636 8024302 8163304 8169911 8180289\n+ * @bug 6543842 6543440 6939248 8009636 8024302 8163304 8169911 8180289 8172404\n@@ -227,1 +227,2 @@\n-            Signature sig = Signature.getInstance(\"SHA1withRSA\");\n+            String sigAlg = \"SHA256withRSA\";\n+            Signature sig = Signature.getInstance(sigAlg);\n@@ -244,1 +245,3 @@\n-                    AlgorithmId.get(\"SHA-1\"), AlgorithmId.get(\"RSA\"), sig.sign());\n+                    AlgorithmId.get(AlgorithmId.getDigAlgFromSigAlg(sigAlg)),\n+                    AlgorithmId.get(AlgorithmId.getEncAlgFromSigAlg(sigAlg)),\n+                    sig.sign());\n@@ -420,1 +423,1 @@\n-                sign(\"sha1alg\", \"-tsadigestalg\", \"SHA\")\n+                sign(\"sha384alg\", \"-tsadigestalg\", \"SHA-384\")\n@@ -422,3 +425,28 @@\n-                checkTimestamp(\"sha1alg.jar\", defaultPolicyId, \"SHA-1\");\n-\n-                sign(\"tsweak\", \"-digestalg\", \"MD5\",\n+                checkTimestamp(\"sha384alg.jar\", defaultPolicyId, \"SHA-384\");\n+\n+                \/\/ Legacy algorithms\n+                signVerbose(null, \"unsigned.jar\", \"sha1alg.jar\", \"signer\",\n+                        \"-strict\", \"-digestalg\", \"SHA-1\")\n+                        .shouldHaveExitValue(0)\n+                        .shouldContain(\"jar signed, with signer errors\")\n+                        .shouldMatch(\"SHA-1.*-digestalg.*will be disabled\");\n+                verify(\"sha1alg.jar\", \"-strict\")\n+                        .shouldHaveExitValue(0)\n+                        .shouldContain(\"jar verified, with signer errors\")\n+                        .shouldContain(\"SHA-1 digest algorithm is considered a security risk\")\n+                        .shouldContain(\"This algorithm will be disabled in a future update\")\n+                        .shouldNotContain(\"is disabled\");\n+\n+                sign(\"sha1tsaalg\", \"-tsadigestalg\", \"SHA-1\", \"-strict\")\n+                        .shouldHaveExitValue(0)\n+                        .shouldContain(\"jar signed, with signer errors\")\n+                        .shouldMatch(\"SHA-1.*-tsadigestalg.*will be disabled\")\n+                        .shouldNotContain(\"is disabled\");\n+                verify(\"sha1tsaalg.jar\", \"-strict\")\n+                        .shouldHaveExitValue(0)\n+                        .shouldContain(\"jar verified, with signer errors\")\n+                        .shouldContain(\"SHA-1 digest algorithm is considered a security risk\")\n+                        .shouldNotContain(\"is disabled\");\n+\n+                \/\/ Disabled algorithms\n+                sign(\"tsdisabled\", \"-digestalg\", \"MD5\",\n@@ -428,4 +456,5 @@\n-                        .shouldMatch(\"MD5.*-digestalg.*risk\")\n-                        .shouldMatch(\"MD5.*-tsadigestalg.*risk\")\n-                        .shouldMatch(\"MD5withRSA.*-sigalg.*risk\");\n-                checkWeak(\"tsweak.jar\");\n+\/\/                        .shouldContain(\"The timestamp is invalid. Without a valid timestamp\")\n+                        .shouldMatch(\"MD5.*-digestalg.*is disabled\")\n+                        .shouldMatch(\"MD5.*-tsadigestalg.*is disabled\")\n+                        .shouldMatch(\"MD5withRSA.*-sigalg.*is disabled\");\n+                checkDisabled(\"tsdisabled.jar\");\n@@ -433,1 +462,1 @@\n-                signVerbose(\"tsweak\", \"unsigned.jar\", \"tsweak2.jar\", \"signer\")\n+                signVerbose(\"tsdisabled\", \"unsigned.jar\", \"tsdisabled2.jar\", \"signer\")\n@@ -437,2 +466,2 @@\n-                \/\/ Weak timestamp is an error and jar treated unsigned\n-                verify(\"tsweak2.jar\", \"-verbose\")\n+                \/\/ Disabled timestamp is an error and jar treated unsigned\n+                verify(\"tsdisabled2.jar\", \"-verbose\")\n@@ -441,1 +470,1 @@\n-                        .shouldMatch(\"Timestamp.*512.*weak\");\n+                        .shouldMatch(\"Timestamp.*512.*(disabled)\");\n@@ -443,2 +472,2 @@\n-                \/\/ Algorithm used in signing is weak\n-                signVerbose(\"normal\", \"unsigned.jar\", \"halfWeak.jar\", \"signer\",\n+                \/\/ Algorithm used in signing is disabled\n+                signVerbose(\"normal\", \"unsigned.jar\", \"halfDisabled.jar\", \"signer\",\n@@ -446,1 +475,1 @@\n-                        .shouldContain(\"-digestalg option is considered a security risk\")\n+                        .shouldContain(\"-digestalg option is considered a security risk and is disabled\")\n@@ -448,1 +477,1 @@\n-                checkHalfWeak(\"halfWeak.jar\");\n+                checkHalfDisabled(\"halfDisabled.jar\");\n@@ -455,1 +484,1 @@\n-                signVerbose(\"normal\", \"sign1.jar\", \"sign2.jar\", \"weakkeysize\")\n+                signVerbose(\"normal\", \"sign1.jar\", \"sign2.jar\", \"disabledkeysize\")\n@@ -460,0 +489,36 @@\n+                \/\/ Legacy algorithms\n+                sign(\"tsweak\", \"-digestalg\", \"SHA1\",\n+                                \"-sigalg\", \"SHA1withRSA\", \"-tsadigestalg\", \"SHA1\")\n+                        .shouldHaveExitValue(0)\n+                        .shouldMatch(\"SHA1.*-digestalg.*will be disabled\")\n+                        .shouldMatch(\"SHA1.*-tsadigestalg.*will be disabled\")\n+                        .shouldMatch(\"SHA1withRSA.*-sigalg.*will be disabled\");\n+                checkWeak(\"tsweak.jar\");\n+\n+                signVerbose(\"tsweak\", \"unsigned.jar\", \"tsweak2.jar\", \"signer\")\n+                        .shouldHaveExitValue(0);\n+\n+                verify(\"tsweak2.jar\", \"-verbose\")\n+                        .shouldHaveExitValue(0)\n+                        .shouldContain(\"jar verified\")\n+                        .shouldMatch(\"Timestamp.*1024.*(weak)\");\n+\n+                \/\/ Algorithm used in signing is weak\n+                signVerbose(\"normal\", \"unsigned.jar\", \"halfWeak.jar\", \"signer\",\n+                        \"-digestalg\", \"SHA1\")\n+                        .shouldContain(\"-digestalg option is considered a security risk.\")\n+                        .shouldContain(\"This algorithm will be disabled in a future update.\")\n+                        .shouldHaveExitValue(0);\n+                checkHalfWeak(\"halfWeak.jar\");\n+\n+                \/\/ sign with DSA key\n+                signVerbose(\"normal\", \"unsigned.jar\", \"sign1.jar\", \"dsakey\")\n+                        .shouldHaveExitValue(0);\n+\n+                \/\/ sign with RSAkeysize < 2048\n+                signVerbose(\"normal\", \"sign1.jar\", \"sign2.jar\", \"weakkeysize\")\n+                        .shouldNotContain(\"Algorithm constraints check failed on keysize\")\n+                        .shouldHaveExitValue(0);\n+                checkMultipleWeak(\"sign2.jar\");\n+\n+\n@@ -693,1 +758,1 @@\n-    static void checkWeak(String file) throws Exception {\n+    static void checkDisabled(String file) throws Exception {\n@@ -703,5 +768,5 @@\n-                .shouldMatch(\"Digest algorithm: .*weak\")\n-                .shouldMatch(\"Signature algorithm: .*weak\")\n-                .shouldMatch(\"Timestamp digest algorithm: .*weak\")\n-                .shouldNotMatch(\"Timestamp signature algorithm: .*weak.*weak\")\n-                .shouldMatch(\"Timestamp signature algorithm: .*key.*weak\");\n+                .shouldMatch(\"Digest algorithm: .*(disabled)\")\n+                .shouldMatch(\"Signature algorithm: .*(disabled)\")\n+                .shouldMatch(\"Timestamp digest algorithm: .*(disabled)\")\n+                .shouldNotMatch(\"Timestamp signature algorithm: .*(weak).*(weak)\")\n+                .shouldMatch(\"Timestamp signature algorithm: .*key.*(disabled)\");\n@@ -713,1 +778,1 @@\n-        \/\/              generating cert\/cert req using weak algorithms.\n+        \/\/              generating cert\/cert req using disabled algorithms.\n@@ -718,1 +783,1 @@\n-                        \" which is considered a security risk.\")\n+                        \" which is considered a security risk and is disabled.\")\n@@ -720,2 +785,2 @@\n-        if (sout.indexOf(\"weak\", sout.indexOf(\"Timestamp:\")) < 0) {\n-            throw new RuntimeException(\"timestamp not weak: \" + sout);\n+        if (sout.indexOf(\"disabled\", sout.indexOf(\"Timestamp:\")) < 0) {\n+            throw new RuntimeException(\"timestamp not disabled: \" + sout);\n@@ -725,1 +790,1 @@\n-    static void checkHalfWeak(String file) throws Exception {\n+    static void checkHalfDisabled(String file) throws Exception {\n@@ -735,5 +800,8 @@\n-                .shouldMatch(\"Digest algorithm: .*weak\")\n-                .shouldNotMatch(\"Signature algorithm: .*weak\")\n-                .shouldNotMatch(\"Timestamp digest algorithm: .*weak\")\n-                .shouldNotMatch(\"Timestamp signature algorithm: .*weak.*weak\")\n-                .shouldNotMatch(\"Timestamp signature algorithm: .*key.*weak\");\n+                .shouldMatch(\"Digest algorithm: .*(disabled)\")\n+                .shouldNotMatch(\"Signature algorithm: .*(weak)\")\n+                .shouldNotMatch(\"Signature algorithm: .*(disabled)\")\n+                .shouldNotMatch(\"Timestamp digest algorithm: .*(disabled)\")\n+                .shouldNotMatch(\"Timestamp signature algorithm: .*(weak).*(weak)\")\n+                .shouldNotMatch(\"Timestamp signature algorithm: .*(disabled).*(disabled)\")\n+                .shouldNotMatch(\"Timestamp signature algorithm: .*key.*(weak)\")\n+                .shouldNotMatch(\"Timestamp signature algorithm: .*key.*(disabled)\");\n@@ -750,1 +818,60 @@\n-                .shouldNotMatch(\"X.509.*CN=weakkeysize\")\n+                .shouldNotMatch(\"X.509.*CN=disabledkeysize\")\n+                .shouldMatch(\"Signed by .*CN=dsakey\")\n+                .shouldMatch(\"Signed by .*CN=disabledkeysize\")\n+                .shouldMatch(\"Signature algorithm: .*key.*(disabled)\");\n+    }\n+\n+    static void checkWeak(String file) throws Exception {\n+        verify(file)\n+                .shouldHaveExitValue(0)\n+                .shouldNotContain(\"treated as unsigned\");\n+        verify(file, \"-verbose\")\n+                .shouldHaveExitValue(0)\n+                .shouldNotContain(\"treated as unsigned\")\n+                .shouldMatch(\"Digest algorithm: .*(weak)\")\n+                .shouldMatch(\"Signature algorithm: .*(weak)\")\n+                .shouldMatch(\"Timestamp digest algorithm: .*(weak)\")\n+                .shouldNotMatch(\"Timestamp signature algorithm: .*(weak).*(weak)\")\n+                .shouldMatch(\"Timestamp signature algorithm: .*key.*(weak)\");\n+        verify(file, \"-J-Djava.security.debug=jar\")\n+                .shouldHaveExitValue(0)\n+                .shouldNotMatch(\"SignatureException:.*disabled\");\n+\n+        \/\/ keytool should print out warnings when reading or\n+        \/\/ generating cert\/cert req using legacy algorithms.\n+        String sout = SecurityTools.keytool(\"-printcert -jarfile \" + file)\n+                .stderrShouldContain(\"The TSA certificate uses a 1024-bit RSA key\" +\n+                        \" which is considered a security risk.\" +\n+                        \" This key size will be disabled in a future update.\")\n+                .getStdout();\n+        if (sout.indexOf(\"weak\", sout.indexOf(\"Timestamp:\")) < 0) {\n+            throw new RuntimeException(\"timestamp not weak: \" + sout);\n+        }\n+    }\n+\n+    static void checkHalfWeak(String file) throws Exception {\n+        verify(file)\n+                .shouldHaveExitValue(0)\n+                .shouldNotContain(\"treated as unsigned\");\n+        verify(file, \"-verbose\")\n+                .shouldHaveExitValue(0)\n+                .shouldNotContain(\"treated as unsigned\")\n+                .shouldMatch(\"Digest algorithm: .*(weak)\")\n+                .shouldNotMatch(\"Signature algorithm: .*(weak)\")\n+                .shouldNotMatch(\"Signature algorithm: .*(disabled)\")\n+                .shouldNotMatch(\"Timestamp digest algorithm: .*(weak)\")\n+                .shouldNotMatch(\"Timestamp signature algorithm: .*(weak).*(weak)\")\n+                .shouldNotMatch(\"Timestamp signature algorithm: .*(disabled).*(disabled)\")\n+                .shouldNotMatch(\"Timestamp signature algorithm: .*key.*(weak)\")\n+                .shouldNotMatch(\"Timestamp signature algorithm: .*key.*(disabled)\");\n+    }\n+\n+    static void checkMultipleWeak(String file) throws Exception {\n+        verify(file)\n+                .shouldHaveExitValue(0)\n+                .shouldContain(\"jar verified\");\n+        verify(file, \"-verbose\", \"-certs\")\n+                .shouldHaveExitValue(0)\n+                .shouldContain(\"jar verified\")\n+                .shouldMatch(\"X.509.*CN=dsakey\")\n+                .shouldMatch(\"X.509.*CN=weakkeysize\")\n@@ -753,2 +880,2 @@\n-                .shouldMatch(\"Signature algorithm: .*key.*weak\");\n-     }\n+                .shouldMatch(\"Signature algorithm: .*key.*(weak)\");\n+    }\n@@ -824,1 +951,2 @@\n-        keytool(\"-alias weakkeysize -genkeypair -keysize 512 -dname CN=weakkeysize\");\n+        keytool(\"-alias weakkeysize -genkeypair -keysize 1024 -dname CN=weakkeysize\");\n+        keytool(\"-alias disabledkeysize -genkeypair -keysize 512 -dname CN=disabledkeysize\");\n@@ -828,1 +956,2 @@\n-        keytool(\"-alias tsweak -genkeypair -keysize 512 -dname CN=tsweak\");\n+        keytool(\"-alias tsweak -genkeypair -keysize 1024 -dname CN=tsweak\");\n+        keytool(\"-alias tsdisabled -genkeypair -keysize 512 -dname CN=tsdisabled\");\n@@ -852,0 +981,1 @@\n+        gencert(\"disabledkeysize\");\n@@ -884,0 +1014,1 @@\n+        gencert(\"tsdisabled\", \"-ext eku:critical=ts\");\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/TimestampCheck.java","additions":173,"deletions":42,"binary":false,"changes":215,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -142,1 +142,1 @@\n-            \/\/ TSA server uses SHA-1 digest algorithm\n+            \/\/ TSA server uses SHA-512 digest algorithm\n@@ -153,1 +153,1 @@\n-                    \"-tsadigestalg\", \"SHA-1\",\n+                    \"-tsadigestalg\", \"SHA-512\",\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/TsacertOptionTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-                .shouldContain(\"-digestalg option is considered a security risk.\");\n+                .shouldContain(\"-digestalg option is considered a security risk and is disabled.\");\n@@ -80,1 +80,1 @@\n-                .shouldContain(\"-digestalg option is considered a security risk.\");\n+                .shouldContain(\"-digestalg option is considered a security risk and is disabled.\");\n@@ -82,1 +82,1 @@\n-                .shouldContain(\"-sigalg option is considered a security risk\");\n+                .shouldContain(\"-sigalg option is considered a security risk and is disabled.\");\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/Warning.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8171319 8177569 8182879\n+ * @bug 8171319 8177569 8182879 8172404\n@@ -73,0 +73,1 @@\n+        \/\/ Tests for \"disabled\" algorithms\n@@ -75,3 +76,3 @@\n-        checkGenKeyPair(\"a\", \"-keyalg RSA -sigalg MD5withRSA\", \"MD5withRSA\");\n-        checkGenKeyPair(\"b\", \"-keyalg RSA -keysize 512\", \"512-bit RSA key\");\n-        checkGenKeyPair(\"c\", \"-keyalg RSA\", null);\n+        checkDisabledGenKeyPair(\"a\", \"-keyalg RSA -sigalg MD5withRSA\", \"MD5withRSA\");\n+        checkDisabledGenKeyPair(\"b\", \"-keyalg RSA -keysize 512\", \"512-bit RSA key\");\n+        checkDisabledGenKeyPair(\"c\", \"-keyalg RSA\", null);\n@@ -81,2 +82,2 @@\n-                .shouldMatch(\"<a>.*MD5withRSA.*risk\")\n-                .shouldMatch(\"<b>.*512-bit RSA key.*risk\");\n+                .shouldMatch(\"<a>.*MD5withRSA.*is disabled\")\n+                .shouldMatch(\"<b>.*512-bit RSA key.*is disabled\");\n@@ -85,4 +86,4 @@\n-                .shouldMatch(\"<a>.*MD5withRSA.*risk\")\n-                .shouldContain(\"MD5withRSA (weak)\")\n-                .shouldMatch(\"<b>.*512-bit RSA key.*risk\")\n-                .shouldContain(\"512-bit RSA key (weak)\");\n+                .shouldMatch(\"<a>.*MD5withRSA.*is disabled\")\n+                .shouldContain(\"MD5withRSA (disabled)\")\n+                .shouldMatch(\"<b>.*512-bit RSA key.*is disabled\")\n+                .shouldContain(\"512-bit RSA key (disabled)\");\n@@ -94,1 +95,1 @@\n-        checkCertReq(\"a\", \"\", null);\n+        checkDisabledCertReq(\"a\", \"\", null);\n@@ -99,1 +100,1 @@\n-                .shouldMatch(\"The generated certificate.*MD2withRSA.*risk\");\n+                .shouldMatch(\"The generated certificate.*MD2withRSA.*is disabled\");\n@@ -101,1 +102,1 @@\n-        checkCertReq(\"a\", \"-sigalg MD5withRSA\", \"MD5withRSA\");\n+        checkDisabledCertReq(\"a\", \"-sigalg MD5withRSA\", \"MD5withRSA\");\n@@ -104,1 +105,1 @@\n-                .shouldMatch(\"The certificate request.*MD5withRSA.*risk\");\n+                .shouldMatch(\"The certificate request.*MD5withRSA.*is disabled\");\n@@ -107,2 +108,2 @@\n-                .shouldMatch(\"The certificate request.*MD5withRSA.*risk\")\n-                .shouldMatch(\"The generated certificate.*MD2withRSA.*risk\");\n+                .shouldMatch(\"The certificate request.*MD5withRSA.*is disabled\")\n+                .shouldMatch(\"The generated certificate.*MD2withRSA.*is disabled\");\n@@ -110,1 +111,1 @@\n-        checkCertReq(\"b\", \"\", \"512-bit RSA key\");\n+        checkDisabledCertReq(\"b\", \"\", \"512-bit RSA key\");\n@@ -113,2 +114,2 @@\n-                .shouldMatch(\"The certificate request.*512-bit RSA key.*risk\")\n-                .shouldMatch(\"The generated certificate.*512-bit RSA key.*risk\");\n+                .shouldMatch(\"The certificate request.*512-bit RSA key.*is disabled\")\n+                .shouldMatch(\"The generated certificate.*512-bit RSA key.*is disabled\");\n@@ -116,1 +117,1 @@\n-        checkCertReq(\"c\", \"\", null);\n+        checkDisabledCertReq(\"c\", \"\", null);\n@@ -119,1 +120,1 @@\n-                .shouldMatch(\"The issuer.*MD5withRSA.*risk\");\n+                .shouldMatch(\"The issuer.*MD5withRSA.*is disabled\");\n@@ -124,1 +125,1 @@\n-                .shouldNotContain(\"weak\");\n+                .shouldNotContain(\"(disabled)\");\n@@ -128,1 +129,1 @@\n-                .shouldMatch(\"The issuer.*512-bit RSA key.*risk\");\n+                .shouldMatch(\"The issuer.*512-bit RSA key.*is disabled\");\n@@ -138,4 +139,4 @@\n-        checkGenCRL(\"a\", \"\", null);\n-        checkGenCRL(\"a\", \"-sigalg MD5withRSA\", \"MD5withRSA\");\n-        checkGenCRL(\"b\", \"\", \"512-bit RSA key\");\n-        checkGenCRL(\"c\", \"\", null);\n+        checkDisabledGenCRL(\"a\", \"\", null);\n+        checkDisabledGenCRL(\"a\", \"-sigalg MD5withRSA\", \"MD5withRSA\");\n+        checkDisabledGenCRL(\"b\", \"\", \"512-bit RSA key\");\n+        checkDisabledGenCRL(\"c\", \"\", null);\n@@ -150,0 +151,72 @@\n+\n+        rm(\"ks\");\n+\n+        \/\/ Tests for \"legacy\" algorithms\n+        \/\/ -genkeypair, and -printcert, -list -alias, -exportcert\n+        \/\/ (w\/ different formats)\n+        checkWeakGenKeyPair(\"x\", \"-keyalg RSA -sigalg SHA1withRSA\", \"SHA1withRSA\");\n+        checkWeakGenKeyPair(\"y\", \"-keyalg RSA -keysize 1024\", \"1024-bit RSA key\");\n+        checkWeakGenKeyPair(\"z\", \"-keyalg RSA\", null);\n+\n+        kt(\"-list\")\n+                .shouldContain(\"Warning:\")\n+                .shouldMatch(\"<x>.*SHA1withRSA.*will be disabled\")\n+                .shouldMatch(\"<y>.*1024-bit RSA key.*will be disabled\");\n+        kt(\"-list -v\")\n+                .shouldContain(\"Warning:\")\n+                .shouldMatch(\"<x>.*SHA1withRSA.*will be disabled\")\n+                .shouldContain(\"SHA1withRSA (weak)\")\n+                .shouldMatch(\"<y>.*1024-bit RSA key.*will be disabled\")\n+                .shouldContain(\"1024-bit RSA key (weak)\");\n+\n+        \/\/ Multiple warnings for multiple cert in -printcert\n+        \/\/ or -list or -exportcert\n+\n+        \/\/ -certreq, -printcertreq, -gencert\n+        checkWeakCertReq(\"x\", \"\", null);\n+        gencert(\"z-x\", \"\")\n+                .shouldNotContain(\"Warning\"); \/\/ new sigalg is not weak\n+        gencert(\"z-x\", \"-sigalg SHA1withRSA\")\n+                .shouldContain(\"Warning:\")\n+                .shouldMatch(\"The generated certificate.*SHA1withRSA.*will be disabled\");\n+\n+        checkWeakCertReq(\"x\", \"-sigalg SHA1withRSA\", \"SHA1withRSA\");\n+        gencert(\"z-x\", \"\")\n+                .shouldContain(\"Warning:\")\n+                .shouldMatch(\"The certificate request.*SHA1withRSA.*will be disabled\");\n+        gencert(\"z-x\", \"-sigalg SHA1withRSA\")\n+                .shouldContain(\"Warning:\")\n+                .shouldMatch(\"The certificate request.*SHA1withRSA.*will be disabled\")\n+                .shouldMatch(\"The generated certificate.*SHA1withRSA.*will be disabled\");\n+\n+        checkWeakCertReq(\"y\", \"\", \"1024-bit RSA key\");\n+        gencert(\"z-y\", \"\")\n+                .shouldContain(\"Warning:\")\n+                .shouldMatch(\"The certificate request.*1024-bit RSA key.*will be disabled\")\n+                .shouldMatch(\"The generated certificate.*1024-bit RSA key.*will be disabled\");\n+\n+        checkWeakCertReq(\"z\", \"\", null);\n+        gencert(\"x-z\", \"\")\n+                .shouldContain(\"Warning:\")\n+                .shouldMatch(\"The issuer.*SHA1withRSA.*will be disabled\");\n+\n+        \/\/ but the new cert is not weak\n+        kt(\"-printcert -file x-z.cert\")\n+                .shouldNotContain(\"Warning\")\n+                .shouldNotContain(\"weak\");\n+\n+        gencert(\"y-z\", \"\")\n+                .shouldContain(\"Warning:\")\n+                .shouldMatch(\"The issuer.*1024-bit RSA key.*will be disabled\");\n+\n+        \/\/ -gencrl, -printcrl\n+        checkWeakGenCRL(\"x\", \"\", null);\n+        checkWeakGenCRL(\"x\", \"-sigalg SHA1withRSA\", \"SHA1withRSA\");\n+        checkWeakGenCRL(\"y\", \"\", \"1024-bit RSA key\");\n+        checkWeakGenCRL(\"z\", \"\", null);\n+\n+        kt(\"-delete -alias y\");\n+        kt(\"-printcrl -file y.crl\")\n+                .shouldContain(\"WARNING: not verified\");\n+\n+        jksTypeCheck();\n@@ -156,1 +229,1 @@\n-                .shouldNotContain(\"Warning:\");\n+                .shouldNotContain(\"proprietary format\");\n@@ -231,2 +304,2 @@\n-                .shouldMatch(\"<b>.*512-bit RSA key.*risk\")\n-                .shouldMatch(\"<a>.*MD5withRSA.*risk\");\n+                .shouldMatch(\"<b>.*512-bit RSA key.*is disabled\")\n+                .shouldMatch(\"<a>.*MD5withRSA.*is disabled\");\n@@ -236,1 +309,1 @@\n-                .shouldMatch(\"<a>.*MD5withRSA.*risk\");\n+                .shouldMatch(\"<a>.*MD5withRSA.*is disabled\");\n@@ -316,1 +389,1 @@\n-                .shouldMatch(\"The input.*MD5withRSA.*risk\")\n+                .shouldMatch(\"The input.*MD5withRSA.*is disabled\")\n@@ -320,1 +393,1 @@\n-                .shouldMatch(\"The input.*MD5withRSA.*risk\")\n+                .shouldMatch(\"The input.*MD5withRSA.*is disabled\")\n@@ -328,2 +401,2 @@\n-                .shouldContain(\"MD5withRSA (weak)\")\n-                .shouldMatch(\"The input.*MD5withRSA.*risk\")\n+                .shouldContain(\"MD5withRSA (disabled)\")\n+                .shouldMatch(\"The input.*MD5withRSA.*is disabled\")\n@@ -333,1 +406,1 @@\n-                .shouldMatch(\"The input.*MD5withRSA.*risk\")\n+                .shouldMatch(\"The input.*MD5withRSA.*is disabled\")\n@@ -369,1 +442,1 @@\n-                    .shouldContain(\"name: \" + weakSigAlgCA + \" (weak)\")\n+                    .shouldContain(\"name: \" + weakSigAlgCA + \" (disabled)\")\n@@ -371,1 +444,1 @@\n-                    .shouldMatch(\"The certificate.*\" + weakSigAlgCA + \".*risk\");\n+                    .shouldMatch(\"The certificate.*\" + weakSigAlgCA + \".*is disabled\");\n@@ -373,1 +446,1 @@\n-                    .shouldContain(\"name: \" + weakSigAlgCA + \" (weak)\")\n+                    .shouldContain(\"name: \" + weakSigAlgCA + \" (disabled)\")\n@@ -375,1 +448,1 @@\n-                    .shouldMatch(\"The certificate.*\" + weakSigAlgCA + \".*risk\");\n+                    .shouldMatch(\"The certificate.*\" + weakSigAlgCA + \".*is disabled\");\n@@ -390,1 +463,1 @@\n-                    .shouldContain(\"name: \" + weakSigAlgCA + \" (weak)\")\n+                    .shouldContain(\"name: \" + weakSigAlgCA + \" (disabled)\")\n@@ -392,1 +465,1 @@\n-                    .shouldMatch(\"The input.*\" + weakSigAlgCA + \".*risk\")\n+                    .shouldMatch(\"The input.*\" + weakSigAlgCA + \".*is disabled\")\n@@ -396,1 +469,1 @@\n-                    .shouldMatch(\"The input.*\" + weakSigAlgCA + \".*risk\")\n+                    .shouldMatch(\"The input.*\" + weakSigAlgCA + \".*is disabled\")\n@@ -406,2 +479,2 @@\n-                .shouldNotContain(\"512-bit RSA key (weak)\")\n-                .shouldMatch(\"The input.*512-bit RSA key.*risk\")\n+                .shouldNotContain(\"512-bit RSA key (disabled)\")\n+                .shouldMatch(\"The input.*512-bit RSA key.*is disabled\")\n@@ -416,2 +489,2 @@\n-                .shouldContain(\"512-bit RSA key (weak)\")\n-                .shouldMatch(\"The input.*512-bit RSA key.*risk\")\n+                .shouldContain(\"512-bit RSA key (disabled)\")\n+                .shouldMatch(\"The input.*512-bit RSA key.*is disabled\")\n@@ -421,1 +494,1 @@\n-                .shouldMatch(\"The input.*512-bit RSA key.*risk\")\n+                .shouldMatch(\"The input.*512-bit RSA key.*is disabled\")\n@@ -450,1 +523,1 @@\n-                .shouldMatch(\"Issuer <a>.*MD5withRSA.*risk\");\n+                .shouldMatch(\"Issuer <a>.*MD5withRSA.*is disabled\");\n@@ -459,1 +532,1 @@\n-                .shouldNotContain(\"weak\")\n+                .shouldNotContain(\"disabled\")\n@@ -474,2 +547,2 @@\n-                .shouldMatch(\"Reply #2 of 3.*512-bit RSA key.*risk\")\n-                .shouldMatch(\"Reply #3 of 3.*MD5withRSA.*risk\")\n+                .shouldMatch(\"Reply #2 of 3.*512-bit RSA key.*is disabled\")\n+                .shouldMatch(\"Reply #3 of 3.*MD5withRSA.*is disabled\")\n@@ -482,2 +555,2 @@\n-                .shouldMatch(\"Reply #2 of 2.*512-bit RSA key.*risk\")\n-                .shouldMatch(\"Issuer <a>.*MD5withRSA.*risk\")\n+                .shouldMatch(\"Reply #2 of 2.*512-bit RSA key.*is disabled\")\n+                .shouldMatch(\"Issuer <a>.*MD5withRSA.*is disabled\")\n@@ -491,1 +564,1 @@\n-                .shouldMatch(\"Issuer <b>.*512-bit RSA key.*risk\")\n+                .shouldMatch(\"Issuer <b>.*512-bit RSA key.*is disabled\")\n@@ -499,1 +572,1 @@\n-                .shouldMatch(\"The input.*512-bit RSA key.*risk\")\n+                .shouldMatch(\"The input.*512-bit RSA key.*is disabled\")\n@@ -509,1 +582,1 @@\n-                .shouldMatch(\"The certificate #2 of 2.*512-bit RSA key.*risk\");\n+                .shouldMatch(\"The certificate #2 of 2.*512-bit RSA key.*is disabled\");\n@@ -515,1 +588,1 @@\n-                .shouldMatch(\"Reply #2 of 2.*512-bit RSA key.*risk\")\n+                .shouldMatch(\"Reply #2 of 2.*512-bit RSA key.*is disabled\")\n@@ -521,1 +594,1 @@\n-                .shouldContain(\"512-bit RSA key (weak)\")\n+                .shouldContain(\"512-bit RSA key (disabled)\")\n@@ -523,1 +596,1 @@\n-                .shouldMatch(\"Reply #2 of 2.*512-bit RSA key.*risk\")\n+                .shouldMatch(\"Reply #2 of 2.*512-bit RSA key.*is disabled\")\n@@ -527,1 +600,1 @@\n-                .shouldMatch(\"Reply #2 of 2.*512-bit RSA key.*risk\")\n+                .shouldMatch(\"Reply #2 of 2.*512-bit RSA key.*is disabled\")\n@@ -546,1 +619,1 @@\n-    static void checkGenCRL(String alias, String options, String bad) {\n+    static void checkDisabledGenCRL(String alias, String options, String bad) {\n@@ -554,1 +627,1 @@\n-                    .shouldMatch(\"The generated CRL.*\" + bad + \".*risk\");\n+                    .shouldMatch(\"The generated CRL.*\" + bad + \".*is disabled\");\n@@ -561,1 +634,1 @@\n-                    .shouldNotContain(\"(weak\");\n+                    .shouldNotContain(\"(disabled\");\n@@ -564,1 +637,1 @@\n-                    .shouldMatch(\"The CRL.*\" + bad + \".*risk\")\n+                    .shouldMatch(\"The CRL.*\" + bad + \".*is disabled\")\n@@ -566,1 +639,1 @@\n-                    .shouldContain(bad + \" (weak)\");\n+                    .shouldContain(bad + \" (disabled)\");\n@@ -570,1 +643,1 @@\n-    static void checkCertReq(\n+    static void checkDisabledCertReq(\n@@ -578,1 +651,1 @@\n-                    .shouldMatch(\"The generated certificate request.*\" + bad + \".*risk\");\n+                    .shouldMatch(\"The generated certificate request.*\" + bad + \".*is disabled\");\n@@ -584,1 +657,1 @@\n-                    .shouldNotContain(\"(weak)\");\n+                    .shouldNotContain(\"(disabled)\");\n@@ -587,2 +660,2 @@\n-                    .shouldMatch(\"The certificate request.*\" + bad + \".*risk\")\n-                    .shouldContain(bad + \" (weak)\");\n+                    .shouldMatch(\"The certificate request.*\" + bad + \".*is disabled\")\n+                    .shouldContain(bad + \" (disabled)\");\n@@ -592,1 +665,1 @@\n-    static void checkGenKeyPair(\n+    static void checkDisabledGenKeyPair(\n@@ -600,1 +673,1 @@\n-                    .shouldMatch(\"The generated certificate.*\" + bad + \".*risk\");\n+                    .shouldMatch(\"The generated certificate.*\" + bad + \".*is disabled\");\n@@ -608,1 +681,1 @@\n-                    .shouldMatch(\"The certificate.*\" + bad + \".*risk\");\n+                    .shouldMatch(\"The certificate.*\" + bad + \".*is disabled\");\n@@ -616,1 +689,1 @@\n-                    .shouldMatch(\"The certificate.*\" + bad + \".*risk\");\n+                    .shouldMatch(\"The certificate.*\" + bad + \".*is disabled\");\n@@ -624,1 +697,1 @@\n-                    .shouldMatch(\"The certificate.*\" + bad + \".*risk\");\n+                    .shouldMatch(\"The certificate.*\" + bad + \".*is disabled\");\n@@ -632,1 +705,65 @@\n-                    .shouldMatch(\"The certificate.*\" + bad + \".*risk\");\n+                    .shouldMatch(\"The certificate.*\" + bad + \".*is disabled\");\n+        }\n+\n+        \/\/ With cert content\n+\n+        oa = kt(\"-printcert -file \" + alias + \".cert\");\n+        if (bad == null) {\n+            oa.shouldNotContain(\"Warning\");\n+        } else {\n+            oa.shouldContain(\"Warning\")\n+                    .shouldContain(bad + \" (disabled)\")\n+                    .shouldMatch(\"The certificate.*\" + bad + \".*is disabled\");\n+        }\n+\n+        oa = kt(\"-list -v -alias \" + alias);\n+        if (bad == null) {\n+            oa.shouldNotContain(\"Warning\");\n+        } else {\n+            oa.shouldContain(\"Warning\")\n+                    .shouldContain(bad + \" (disabled)\")\n+                    .shouldMatch(\"The certificate.*\" + bad + \".*is disabled\");\n+        }\n+    }\n+\n+    static void checkWeakGenKeyPair(\n+            String alias, String options, String bad) {\n+\n+        OutputAnalyzer oa = genkeypair(alias, options);\n+        if (bad == null) {\n+            oa.shouldNotContain(\"Warning\");\n+        } else {\n+            oa.shouldContain(\"Warning\")\n+                    .shouldMatch(\"The generated certificate.*\" + bad + \".*will be disabled\");\n+        }\n+\n+        oa = kt(\"-exportcert -alias \" + alias + \" -file \" + alias + \".cert\");\n+        if (bad == null) {\n+            oa.shouldNotContain(\"Warning\");\n+        } else {\n+            oa.shouldContain(\"Warning\")\n+                    .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+        }\n+\n+        oa = kt(\"-exportcert -rfc -alias \" + alias + \" -file \" + alias + \".cert\");\n+        if (bad == null) {\n+            oa.shouldNotContain(\"Warning\");\n+        } else {\n+            oa.shouldContain(\"Warning\")\n+                    .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+        }\n+\n+        oa = kt(\"-printcert -rfc -file \" + alias + \".cert\");\n+        if (bad == null) {\n+            oa.shouldNotContain(\"Warning\");\n+        } else {\n+            oa.shouldContain(\"Warning\")\n+                    .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+        }\n+\n+        oa = kt(\"-list -alias \" + alias);\n+        if (bad == null) {\n+            oa.shouldNotContain(\"Warning\");\n+        } else {\n+            oa.shouldContain(\"Warning\")\n+                    .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n@@ -643,1 +780,1 @@\n-                    .shouldMatch(\"The certificate.*\" + bad + \".*risk\");\n+                    .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n@@ -652,1 +789,48 @@\n-                    .shouldMatch(\"The certificate.*\" + bad + \".*risk\");\n+                    .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+        }\n+    }\n+\n+\n+    static void checkWeakGenCRL(String alias, String options, String bad) {\n+\n+        OutputAnalyzer oa = kt(\"-gencrl -alias \" + alias\n+                + \" -id 1 -file \" + alias + \".crl \" + options);\n+        if (bad == null) {\n+            oa.shouldNotContain(\"Warning\");\n+        } else {\n+            oa.shouldContain(\"Warning\")\n+                    .shouldMatch(\"The generated CRL.*\" + bad + \".*will be disabled\");\n+        }\n+\n+        oa = kt(\"-printcrl -file \" + alias + \".crl\");\n+        if (bad == null) {\n+            oa.shouldNotContain(\"Warning\")\n+                    .shouldContain(\"Verified by \" + alias + \" in keystore\")\n+                    .shouldNotContain(\"(weak\");\n+        } else {\n+            oa.shouldContain(\"Warning:\")\n+                    .shouldMatch(\"The CRL.*\" + bad + \".*will be disabled\")\n+                    .shouldContain(\"Verified by \" + alias + \" in keystore\")\n+                    .shouldContain(bad + \" (weak)\");\n+        }\n+    }\n+\n+    static void checkWeakCertReq(\n+            String alias, String options, String bad) {\n+\n+        OutputAnalyzer oa = certreq(alias, options);\n+        if (bad == null) {\n+            oa.shouldNotContain(\"Warning\");\n+        } else {\n+            oa.shouldContain(\"Warning\")\n+                    .shouldMatch(\"The generated certificate request.*\" + bad + \".*will be disabled\");\n+        }\n+\n+        oa = kt(\"-printcertreq -file \" + alias + \".req\");\n+        if (bad == null) {\n+            oa.shouldNotContain(\"Warning\")\n+                    .shouldNotContain(\"(weak)\");\n+        } else {\n+            oa.shouldContain(\"Warning\")\n+                    .shouldMatch(\"The certificate request.*\" + bad + \".*will be disabled\")\n+                    .shouldContain(bad + \" (weak)\");\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/WeakAlg.java","additions":264,"deletions":80,"binary":false,"changes":344,"status":"modified"}]}