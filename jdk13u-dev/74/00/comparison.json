{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,3 @@\n-\/\/ simple template to manage array delete across early (error) returns\n+\n+\/\/ Wrappers to simplify cleanup on errors.\n+namespace {\n@@ -54,12 +56,34 @@\n-      T* m_ptr;\n-   public:\n-      AutoArrayPtr(T* ptr) : m_ptr(ptr) {\n-      }\n-\n-      ~AutoArrayPtr() {\n-         delete [] m_ptr;\n-      }\n-\n-      T* asPtr() {\n-         return m_ptr;\n-      }\n+  T* m_ptr;\n+public:\n+  AutoArrayPtr(T* ptr) : m_ptr(ptr) {\n+  }\n+\n+  ~AutoArrayPtr() {\n+    delete [] m_ptr;\n+  }\n+\n+  operator T* () const {\n+    return m_ptr;\n+  }\n+};\n+\n+\/\/ Manage COM 'auto' pointers to avoid multiple Release\n+\/\/ calls at every early (exception) returns.\n+\n+template <class T>\n+class AutoCOMPtr {\n+  T* m_ptr;\n+\n+public:\n+  AutoCOMPtr(T* ptr) : m_ptr(ptr) {\n+  }\n+\n+  ~AutoCOMPtr() {\n+    if (m_ptr) {\n+      m_ptr->Release();\n+    }\n+  }\n+\n+  T* operator->() const {\n+    return m_ptr;\n+  }\n@@ -69,16 +93,19 @@\n-      JNIEnv* m_env;\n-      jstring m_str;\n-      const char* m_buf;\n-\n-   public:\n-      AutoJavaString(JNIEnv* env, jstring str, const char* buf)\n-        : m_env(env), m_str(str), m_buf(buf) {\n-      }\n-\n-      ~AutoJavaString() {\n-         m_env->ReleaseStringUTFChars(m_str, m_buf);\n-      }\n-\n-      operator const char* () {\n-         return m_buf;\n-      }\n+  JNIEnv* m_env;\n+  jstring m_str;\n+  const char* m_buf;\n+\n+public:\n+  \/\/ check env->ExceptionOccurred() after ctor\n+  AutoJavaString(JNIEnv* env, jstring str)\n+    : m_env(env), m_str(str), m_buf(env->GetStringUTFChars(str, nullptr)) {\n+  }\n+\n+  ~AutoJavaString() {\n+    if (m_buf) {\n+      m_env->ReleaseStringUTFChars(m_str, m_buf);\n+    }\n+  }\n+\n+  operator const char* () const {\n+    return m_buf;\n+  }\n@@ -87,0 +114,31 @@\n+class AutoJavaByteArray {\n+  JNIEnv* env;\n+  jbyteArray byteArray;\n+  jbyte* bytePtr;\n+  jint releaseMode;\n+\n+public:\n+  \/\/ check env->ExceptionOccurred() after ctor\n+  AutoJavaByteArray(JNIEnv* env, jbyteArray byteArray, jint releaseMode = JNI_ABORT)\n+    : env(env), byteArray(byteArray), releaseMode(releaseMode),\n+      bytePtr(env->GetByteArrayElements(byteArray, nullptr)) {\n+  }\n+\n+  ~AutoJavaByteArray() {\n+    if (bytePtr) {\n+      env->ReleaseByteArrayElements(byteArray, bytePtr, releaseMode);\n+    }\n+  }\n+\n+  void setReleaseMode(jint mode) {\n+    releaseMode = mode;\n+  }\n+\n+  operator jbyte* () const {\n+    return bytePtr;\n+  }\n+};\n+\n+} \/\/ unnamed namespace\n+\n+\n@@ -104,2 +162,2 @@\n-#define CHECK_EXCEPTION_(value) if(env->ExceptionOccurred()) { return value; }\n-#define CHECK_EXCEPTION if(env->ExceptionOccurred()) { return;}\n+#define CHECK_EXCEPTION_(value) if (env->ExceptionOccurred()) { return value; }\n+#define CHECK_EXCEPTION if (env->ExceptionOccurred()) { return; }\n@@ -110,2 +168,2 @@\n-#define THROW_NEW_DEBUGGER_EXCEPTION(str) { throwNewDebuggerException(env, str); \\\n- return;}\n+#define THROW_NEW_DEBUGGER_EXCEPTION(str) { \\\n+                          throwNewDebuggerException(env, str); return; }\n@@ -119,0 +177,16 @@\n+\/\/ Verifies COM call result is S_OK, throws DebuggerException and exits otherwise.\n+\/\/ Note: other success results (like S_FALSE) are considered errors.\n+#define COM_VERIFY_OK_(v, str, retValue) \\\n+  do { \\\n+    const HRESULT hr = (v); \\\n+    if (hr != S_OK) { \\\n+      AutoArrayPtr<char> errmsg(new char[strlen(str) + 32]); \\\n+      if (errmsg == nullptr) { \\\n+        THROW_NEW_DEBUGGER_EXCEPTION_(str, retValue); \\\n+      } else { \\\n+        sprintf(errmsg, \"%s (hr: 0x%08X)\", str, hr); \\\n+        THROW_NEW_DEBUGGER_EXCEPTION_(errmsg, retValue); \\\n+      } \\\n+    } \\\n+  } while (false)\n+\n@@ -125,1 +199,1 @@\n-  (JNIEnv *env, jclass clazz) {\n+      (JNIEnv *env, jclass clazz) {\n@@ -141,2 +215,1 @@\n-  ptrIDebugOutputCallbacks_ID = env->GetFieldID(clazz,\n-                                            \"ptrIDebugOutputCallbacks\", \"J\");\n+  ptrIDebugOutputCallbacks_ID = env->GetFieldID(clazz, \"ptrIDebugOutputCallbacks\", \"J\");\n@@ -148,2 +221,1 @@\n-  ptrIDebugSymbols_ID = env->GetFieldID(clazz,\n-                                         \"ptrIDebugSymbols\", \"J\");\n+  ptrIDebugSymbols_ID = env->GetFieldID(clazz, \"ptrIDebugSymbols\", \"J\");\n@@ -152,2 +224,1 @@\n-  ptrIDebugSystemObjects_ID = env->GetFieldID(clazz,\n-                                         \"ptrIDebugSystemObjects\", \"J\");\n+  ptrIDebugSystemObjects_ID = env->GetFieldID(clazz, \"ptrIDebugSystemObjects\", \"J\");\n@@ -156,2 +227,1 @@\n-  addLoadObject_ID = env->GetMethodID(clazz, \"addLoadObject\",\n-                                         \"(Ljava\/lang\/String;JJ)V\");\n+  addLoadObject_ID = env->GetMethodID(clazz, \"addLoadObject\", \"(Ljava\/lang\/String;JJ)V\");\n@@ -164,1 +234,1 @@\n-    \"(Ljava\/lang\/String;J)Lsun\/jvm\/hotspot\/debugger\/cdbg\/ClosestSymbol;\");\n+                            \"(Ljava\/lang\/String;J)Lsun\/jvm\/hotspot\/debugger\/cdbg\/ClosestSymbol;\");\n@@ -170,1 +240,0 @@\n-\n@@ -176,30 +245,30 @@\n-   LONG  m_refCount;\n-   char* m_msgBuffer;\n-\n-   public:\n-      SAOutputCallbacks() : m_refCount(0), m_msgBuffer(0) {\n-      }\n-\n-      ~SAOutputCallbacks() {\n-         clearBuffer();\n-      }\n-\n-      const char* getBuffer() const {\n-         return m_msgBuffer;\n-      }\n-\n-      void clearBuffer() {\n-         if (m_msgBuffer) {\n-            free(m_msgBuffer);\n-            m_msgBuffer = 0;\n-         }\n-      }\n-\n-      STDMETHOD_(ULONG, AddRef)(THIS);\n-      STDMETHOD_(ULONG, Release)(THIS);\n-      STDMETHOD(QueryInterface)(THIS_\n-                                IN REFIID interfaceId,\n-                                OUT PVOID* ppInterface);\n-      STDMETHOD(Output)(THIS_\n-                        IN ULONG mask,\n-                        IN PCSTR msg);\n+  LONG  m_refCount;\n+  char* m_msgBuffer;\n+\n+public:\n+  SAOutputCallbacks() : m_refCount(1), m_msgBuffer(nullptr) {\n+  }\n+\n+  ~SAOutputCallbacks() {\n+    clearBuffer();\n+  }\n+\n+  const char* getBuffer() const {\n+    return m_msgBuffer;\n+  }\n+\n+  void clearBuffer() {\n+    if (m_msgBuffer) {\n+      free(m_msgBuffer);\n+      m_msgBuffer = 0;\n+    }\n+  }\n+\n+  STDMETHOD_(ULONG, AddRef)(THIS);\n+  STDMETHOD_(ULONG, Release)(THIS);\n+  STDMETHOD(QueryInterface)(THIS_\n+                            IN REFIID interfaceId,\n+                            OUT PVOID* ppInterface);\n+  STDMETHOD(Output)(THIS_\n+                    IN ULONG mask,\n+                    IN PCSTR msg);\n@@ -209,2 +278,1 @@\n-   InterlockedIncrement(&m_refCount);\n-   return m_refCount;\n+  return InterlockedIncrement(&m_refCount);\n@@ -214,7 +282,5 @@\n-   LONG retVal;\n-   InterlockedDecrement(&m_refCount);\n-   retVal = m_refCount;\n-   if (retVal == 0) {\n-      delete this;\n-   }\n-   return retVal;\n+  LONG retVal = InterlockedDecrement(&m_refCount);\n+  if (retVal == 0) {\n+    delete this;\n+  }\n+  return retVal;\n@@ -226,9 +292,9 @@\n-   *ppInterface = 0;\n-   HRESULT res = E_NOINTERFACE;\n-   if (TRUE == IsEqualIID(interfaceId, __uuidof(IUnknown)) ||\n-       TRUE == IsEqualIID(interfaceId, __uuidof(IDebugOutputCallbacks))) {\n-      *ppInterface = (IDebugOutputCallbacks*) this;\n-      AddRef();\n-      res = S_OK;\n-   }\n-   return res;\n+  *ppInterface = nullptr;\n+  if (IsEqualIID(interfaceId, __uuidof(IUnknown)) ||\n+      IsEqualIID(interfaceId, __uuidof(IDebugOutputCallbacks))) {\n+    *ppInterface = static_cast<IDebugOutputCallbacks*>(this);\n+  } else {\n+    return E_NOINTERFACE;\n+  }\n+  AddRef();\n+  return S_OK;\n@@ -240,17 +306,17 @@\n-   int len = (int) (strlen(msg) + 1);\n-   if (m_msgBuffer == 0) {\n-      m_msgBuffer = (char*) malloc(len);\n-      if (m_msgBuffer == 0) {\n-         fprintf(stderr, \"out of memory debugger output!\\n\");\n-         return S_FALSE;\n-      }\n-      strcpy(m_msgBuffer, msg);\n-   } else {\n-      m_msgBuffer = (char*) realloc(m_msgBuffer, len + strlen(m_msgBuffer));\n-      if (m_msgBuffer == 0) {\n-         fprintf(stderr, \"out of memory debugger output!\\n\");\n-         return S_FALSE;\n-      }\n-      strcat(m_msgBuffer, msg);\n-   }\n-   return S_OK;\n+  size_t len = strlen(msg) + 1;\n+  if (m_msgBuffer == 0) {\n+    m_msgBuffer = (char*) malloc(len);\n+    if (m_msgBuffer == 0) {\n+      fprintf(stderr, \"out of memory debugger output!\\n\");\n+      return S_FALSE;\n+    }\n+    strcpy(m_msgBuffer, msg);\n+  } else {\n+    m_msgBuffer = (char*) realloc(m_msgBuffer, len + strlen(m_msgBuffer));\n+    if (m_msgBuffer == 0) {\n+      fprintf(stderr, \"out of memory debugger output!\\n\");\n+      return S_FALSE;\n+    }\n+    strcat(m_msgBuffer, msg);\n+  }\n+  return S_OK;\n@@ -263,3 +329,2 @@\n-  if (DebugCreate(__uuidof(IDebugClient), (PVOID*) &ptrIDebugClient) != S_OK) {\n-     THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: not able to create IDebugClient object!\", false);\n-  }\n+  COM_VERIFY_OK_(DebugCreate(__uuidof(IDebugClient), (PVOID*) &ptrIDebugClient),\n+                 \"Windbg Error: not able to create IDebugClient object!\", false);\n@@ -269,4 +334,3 @@\n-  if (ptrIDebugClient->QueryInterface(__uuidof(IDebugControl), (PVOID*) &ptrIDebugControl)\n-     != S_OK) {\n-     THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: not able to get IDebugControl\", false);\n-  }\n+  COM_VERIFY_OK_(ptrIDebugClient->QueryInterface(\n+                    __uuidof(IDebugControl), (PVOID*) &ptrIDebugControl),\n+                 \"Windbg Error: not able to get IDebugControl\", false);\n@@ -276,4 +340,3 @@\n-  if (ptrIDebugClient->QueryInterface(__uuidof(IDebugDataSpaces), (PVOID*) &ptrIDebugDataSpaces)\n-     != S_OK) {\n-     THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: not able to get IDebugDataSpaces object!\", false);\n-  }\n+  COM_VERIFY_OK_(ptrIDebugClient->QueryInterface(\n+                    __uuidof(IDebugDataSpaces), (PVOID*) &ptrIDebugDataSpaces),\n+                 \"Windbg Error: not able to get IDebugDataSpaces object!\", false);\n@@ -283,1 +346,0 @@\n-  ptrIDebugOutputCallbacks->AddRef();\n@@ -288,4 +350,3 @@\n-  if (ptrIDebugClient->QueryInterface(__uuidof(IDebugAdvanced), (PVOID*) &ptrIDebugAdvanced)\n-     != S_OK) {\n-     THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: not able to get IDebugAdvanced object!\", false);\n-  }\n+  COM_VERIFY_OK_(ptrIDebugClient->QueryInterface(\n+                    __uuidof(IDebugAdvanced), (PVOID*) &ptrIDebugAdvanced),\n+                 \"Windbg Error: not able to get IDebugAdvanced object!\", false);\n@@ -295,4 +356,3 @@\n-  if (ptrIDebugClient->QueryInterface(__uuidof(IDebugSymbols), (PVOID*) &ptrIDebugSymbols)\n-     != S_OK) {\n-     THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: not able to get IDebugSymbols object!\", false);\n-  }\n+  COM_VERIFY_OK_(ptrIDebugClient->QueryInterface(\n+                    __uuidof(IDebugSymbols), (PVOID*) &ptrIDebugSymbols),\n+                 \"Windbg Error: not able to get IDebugSymbols object!\", false);\n@@ -302,4 +362,3 @@\n-  if (ptrIDebugClient->QueryInterface(__uuidof(IDebugSystemObjects), (PVOID*) &ptrIDebugSystemObjects)\n-     != S_OK) {\n-     THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: not able to get IDebugSystemObjects object!\", false);\n-  }\n+  COM_VERIFY_OK_(ptrIDebugClient->QueryInterface(\n+                    __uuidof(IDebugSystemObjects), (PVOID*) &ptrIDebugSystemObjects),\n+                 \"Windbg Error: not able to get IDebugSystemObjects object!\", false);\n@@ -312,1 +371,0 @@\n-  jboolean isCopy;\n@@ -316,1 +374,0 @@\n-  const char* buf;\n@@ -320,1 +377,1 @@\n-  if (path == NULL) {\n+  if (path == nullptr) {\n@@ -323,1 +380,1 @@\n-  buf = env->GetStringUTFChars(path, &isCopy);\n+  AutoJavaString imagePath(env, path);\n@@ -325,1 +382,0 @@\n-  AutoJavaString imagePath(env, path, buf);\n@@ -329,1 +385,1 @@\n-  if (path == NULL) {\n+  if (path == nullptr) {\n@@ -332,1 +388,1 @@\n-  buf = env->GetStringUTFChars(path, &isCopy);\n+  AutoJavaString symbolPath(env, path);\n@@ -334,1 +390,0 @@\n-  AutoJavaString symbolPath(env, path, buf);\n@@ -336,2 +391,1 @@\n-  IDebugSymbols* ptrIDebugSymbols = (IDebugSymbols*) env->GetLongField(obj,\n-                                                      ptrIDebugSymbols_ID);\n+  IDebugSymbols* ptrIDebugSymbols = (IDebugSymbols*)env->GetLongField(obj, ptrIDebugSymbols_ID);\n@@ -347,2 +401,1 @@\n-  jboolean isCopy;\n-  const char* buf = env->GetStringUTFChars(coreFileName, &isCopy);\n+  AutoJavaString coreFile(env, coreFileName);\n@@ -350,2 +403,1 @@\n-  AutoJavaString coreFile(env, coreFileName, buf);\n-  if (setImageAndSymbolPath(env, obj) == false) {\n+  if (!setImageAndSymbolPath(env, obj)) {\n@@ -355,2 +407,1 @@\n-  IDebugClient* ptrIDebugClient = (IDebugClient*) env->GetLongField(obj,\n-                                                      ptrIDebugClient_ID);\n+  IDebugClient* ptrIDebugClient = (IDebugClient*)env->GetLongField(obj, ptrIDebugClient_ID);\n@@ -358,3 +409,2 @@\n-  if (ptrIDebugClient->OpenDumpFile(coreFile) != S_OK) {\n-     THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: OpenDumpFile failed!\", false);\n-  }\n+  COM_VERIFY_OK_(ptrIDebugClient->OpenDumpFile(coreFile),\n+                 \"Windbg Error: OpenDumpFile failed!\", false);\n@@ -362,2 +412,1 @@\n-  IDebugControl* ptrIDebugControl = (IDebugControl*) env->GetLongField(obj,\n-                                                     ptrIDebugControl_ID);\n+  IDebugControl* ptrIDebugControl = (IDebugControl*)env->GetLongField(obj, ptrIDebugControl_ID);\n@@ -365,3 +414,2 @@\n-  if (ptrIDebugControl->WaitForEvent(DEBUG_WAIT_DEFAULT, INFINITE) != S_OK) {\n-     THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: WaitForEvent failed!\", false);\n-  }\n+  COM_VERIFY_OK_(ptrIDebugControl->WaitForEvent(DEBUG_WAIT_DEFAULT, INFINITE),\n+                 \"Windbg Error: WaitForEvent failed!\", false);\n@@ -374,1 +422,1 @@\n-  if (setImageAndSymbolPath(env, obj) == false) {\n+  if (!setImageAndSymbolPath(env, obj)) {\n@@ -377,2 +425,1 @@\n-  IDebugClient* ptrIDebugClient = (IDebugClient*) env->GetLongField(obj,\n-                                                      ptrIDebugClient_ID);\n+  IDebugClient* ptrIDebugClient = (IDebugClient*)env->GetLongField(obj, ptrIDebugClient_ID);\n@@ -398,3 +445,2 @@\n-  if (ptrIDebugClient->AttachProcess(0, pid, DEBUG_ATTACH_NONINVASIVE) != S_OK) {\n-     THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: AttachProcess failed!\", false);\n-  }\n+  COM_VERIFY_OK_(ptrIDebugClient->AttachProcess(0, pid, DEBUG_ATTACH_NONINVASIVE),\n+                 \"Windbg Error: AttachProcess failed!\", false);\n@@ -405,3 +451,2 @@\n-  if (ptrIDebugControl->WaitForEvent(DEBUG_WAIT_DEFAULT, INFINITE) != S_OK) {\n-     THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: WaitForEvent failed!\", false);\n-  }\n+  COM_VERIFY_OK_(ptrIDebugControl->WaitForEvent(DEBUG_WAIT_DEFAULT, INFINITE),\n+                 \"Windbg Error: WaitForEvent failed!\", false);\n@@ -418,3 +463,2 @@\n-  if (ptrIDebugSymbols->GetNumberModules(&loaded, &unloaded) != S_OK) {\n-     THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: GetNumberModules failed!\", false);\n-  }\n+  COM_VERIFY_OK_(ptrIDebugSymbols->GetNumberModules(&loaded, &unloaded),\n+                 \"Windbg Error: GetNumberModules failed!\", false);\n@@ -424,1 +468,1 @@\n-  if (params.asPtr() == 0) {\n+  if (params == nullptr) {\n@@ -428,3 +472,2 @@\n-  if (ptrIDebugSymbols->GetModuleParameters(loaded, 0, NULL, params.asPtr()) != S_OK) {\n-     THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: GetModuleParameters failed!\", false);\n-  }\n+  COM_VERIFY_OK_(ptrIDebugSymbols->GetModuleParameters(loaded, nullptr, 0, params),\n+                 \"Windbg Error: GetModuleParameters failed!\", false);\n@@ -433,6 +476,5 @@\n-     TCHAR imageName[MAX_PATH];\n-     if (ptrIDebugSymbols->GetModuleNames(DEBUG_ANY_ID, params.asPtr()[u].Base,\n-                                      imageName, MAX_PATH, NULL, NULL,\n-                                      0, NULL, NULL, 0, NULL) != S_OK) {\n-        THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: GetModuleNames failed!\", false);\n-     }\n+    TCHAR imageName[MAX_PATH];\n+    COM_VERIFY_OK_(ptrIDebugSymbols->GetModuleNames(DEBUG_ANY_ID, params[u].Base,\n+                                                    imageName, MAX_PATH, nullptr, nullptr,\n+                                                    0, nullptr, nullptr, 0, nullptr),\n+                   \"Windbg Error: GetModuleNames failed!\", false);\n@@ -440,5 +482,5 @@\n-     jstring strName = env->NewStringUTF(imageName);\n-     CHECK_EXCEPTION_(false);\n-     env->CallVoidMethod(obj, addLoadObject_ID, strName, (jlong) params.asPtr()[u].Size,\n-                               (jlong) params.asPtr()[u].Base);\n-     CHECK_EXCEPTION_(false);\n+    jstring strName = env->NewStringUTF(imageName);\n+    CHECK_EXCEPTION_(false);\n+    env->CallVoidMethod(obj, addLoadObject_ID, strName, (jlong) params[u].Size,\n+                        (jlong) params[u].Base);\n+    CHECK_EXCEPTION_(false);\n@@ -456,3 +498,2 @@\n-  if (ptrIDebugSystemObjects->GetNumberThreads(&numThreads) != S_OK) {\n-     THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: GetNumberThreads failed!\", false);\n-  }\n+  COM_VERIFY_OK_(ptrIDebugSystemObjects->GetNumberThreads(&numThreads),\n+                 \"Windbg Error: GetNumberThreads failed!\", false);\n@@ -460,1 +501,1 @@\n-  AutoArrayPtr<ULONG> ptrSysThreadIds = new ULONG[numThreads];\n+  AutoArrayPtr<ULONG> ptrSysThreadIds(new ULONG[numThreads]);\n@@ -462,1 +503,1 @@\n-  if (ptrSysThreadIds.asPtr() == 0) {\n+  if (ptrSysThreadIds == nullptr) {\n@@ -466,1 +507,1 @@\n-  AutoArrayPtr<ULONG> ptrThreadIds = new ULONG[numThreads];\n+  AutoArrayPtr<ULONG> ptrThreadIds(new ULONG[numThreads]);\n@@ -468,1 +509,1 @@\n-  if (ptrThreadIds.asPtr() == 0) {\n+  if (ptrThreadIds == nullptr) {\n@@ -472,4 +513,3 @@\n-  if (ptrIDebugSystemObjects->GetThreadIdsByIndex(0, numThreads,\n-                                      ptrThreadIds.asPtr(), ptrSysThreadIds.asPtr()) != S_OK) {\n-     THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: GetThreadIdsByIndex failed!\", false);\n-  }\n+  COM_VERIFY_OK_(ptrIDebugSystemObjects->GetThreadIdsByIndex(0, numThreads,\n+                                      ptrThreadIds, ptrSysThreadIds),\n+                 \"Windbg Error: GetThreadIdsByIndex failed!\", false);\n@@ -484,3 +524,2 @@\n-     if (ptrIDebugSystemObjects->SetCurrentThreadId(ptrThreadIds.asPtr()[t]) != S_OK) {\n-        THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: SetCurrentThread failed!\", false);\n-     }\n+    COM_VERIFY_OK_(ptrIDebugSystemObjects->SetCurrentThreadId(ptrThreadIds[t]),\n+                   \"Windbg Error: SetCurrentThread failed!\", false);\n@@ -488,2 +527,2 @@\n-     jlongArray regs = env->NewLongArray(NPRGREG);\n-     CHECK_EXCEPTION_(false);\n+    jlongArray regs = env->NewLongArray(NPRGREG);\n+    CHECK_EXCEPTION_(false);\n@@ -491,3 +530,2 @@\n-     jboolean isCopy = JNI_FALSE;\n-     jlong* ptrRegs = env->GetLongArrayElements(regs, &isCopy);\n-     CHECK_EXCEPTION_(false);\n+    jlong* ptrRegs = env->GetLongArrayElements(regs, nullptr);\n+    CHECK_EXCEPTION_(false);\n@@ -495,3 +533,3 @@\n-     \/\/ copy register values from the CONTEXT struct\n-     CONTEXT context;\n-     memset(&context, 0, sizeof(CONTEXT));\n+    \/\/ copy register values from the CONTEXT struct\n+    CONTEXT context;\n+    memset(&context, 0, sizeof(CONTEXT));\n@@ -501,30 +539,30 @@\n-     #define REG_INDEX(x) sun_jvm_hotspot_debugger_x86_X86ThreadContext_##x\n-\n-     context.ContextFlags = CONTEXT_FULL | CONTEXT_DEBUG_REGISTERS;\n-     ptrIDebugAdvanced->GetThreadContext(&context, sizeof(CONTEXT));\n-\n-     ptrRegs[REG_INDEX(GS)]  = context.SegGs;\n-     ptrRegs[REG_INDEX(FS)]  = context.SegFs;\n-     ptrRegs[REG_INDEX(ES)]  = context.SegEs;\n-     ptrRegs[REG_INDEX(DS)]  = context.SegDs;\n-\n-     ptrRegs[REG_INDEX(EDI)] = context.Edi;\n-     ptrRegs[REG_INDEX(ESI)] = context.Esi;\n-     ptrRegs[REG_INDEX(EBX)] = context.Ebx;\n-     ptrRegs[REG_INDEX(EDX)] = context.Edx;\n-     ptrRegs[REG_INDEX(ECX)] = context.Ecx;\n-     ptrRegs[REG_INDEX(EAX)] = context.Eax;\n-\n-     ptrRegs[REG_INDEX(FP)] = context.Ebp;\n-     ptrRegs[REG_INDEX(PC)] = context.Eip;\n-     ptrRegs[REG_INDEX(CS)]  = context.SegCs;\n-     ptrRegs[REG_INDEX(EFL)] = context.EFlags;\n-     ptrRegs[REG_INDEX(SP)] = context.Esp;\n-     ptrRegs[REG_INDEX(SS)]  = context.SegSs;\n-\n-     ptrRegs[REG_INDEX(DR0)] = context.Dr0;\n-     ptrRegs[REG_INDEX(DR1)] = context.Dr1;\n-     ptrRegs[REG_INDEX(DR2)] = context.Dr2;\n-     ptrRegs[REG_INDEX(DR3)] = context.Dr3;\n-     ptrRegs[REG_INDEX(DR6)] = context.Dr6;\n-     ptrRegs[REG_INDEX(DR7)] = context.Dr7;\n+    #define REG_INDEX(x) sun_jvm_hotspot_debugger_x86_X86ThreadContext_##x\n+\n+    context.ContextFlags = CONTEXT_FULL | CONTEXT_DEBUG_REGISTERS;\n+    ptrIDebugAdvanced->GetThreadContext(&context, sizeof(CONTEXT));\n+\n+    ptrRegs[REG_INDEX(GS)]  = context.SegGs;\n+    ptrRegs[REG_INDEX(FS)]  = context.SegFs;\n+    ptrRegs[REG_INDEX(ES)]  = context.SegEs;\n+    ptrRegs[REG_INDEX(DS)]  = context.SegDs;\n+\n+    ptrRegs[REG_INDEX(EDI)] = context.Edi;\n+    ptrRegs[REG_INDEX(ESI)] = context.Esi;\n+    ptrRegs[REG_INDEX(EBX)] = context.Ebx;\n+    ptrRegs[REG_INDEX(EDX)] = context.Edx;\n+    ptrRegs[REG_INDEX(ECX)] = context.Ecx;\n+    ptrRegs[REG_INDEX(EAX)] = context.Eax;\n+\n+    ptrRegs[REG_INDEX(FP)] = context.Ebp;\n+    ptrRegs[REG_INDEX(PC)] = context.Eip;\n+    ptrRegs[REG_INDEX(CS)]  = context.SegCs;\n+    ptrRegs[REG_INDEX(EFL)] = context.EFlags;\n+    ptrRegs[REG_INDEX(SP)] = context.Esp;\n+    ptrRegs[REG_INDEX(SS)]  = context.SegSs;\n+\n+    ptrRegs[REG_INDEX(DR0)] = context.Dr0;\n+    ptrRegs[REG_INDEX(DR1)] = context.Dr1;\n+    ptrRegs[REG_INDEX(DR2)] = context.Dr2;\n+    ptrRegs[REG_INDEX(DR3)] = context.Dr3;\n+    ptrRegs[REG_INDEX(DR6)] = context.Dr6;\n+    ptrRegs[REG_INDEX(DR7)] = context.Dr7;\n@@ -533,35 +571,35 @@\n-     #define REG_INDEX(x) sun_jvm_hotspot_debugger_amd64_AMD64ThreadContext_##x\n-\n-     context.ContextFlags = CONTEXT_FULL | CONTEXT_DEBUG_REGISTERS;\n-     ptrIDebugAdvanced->GetThreadContext(&context, sizeof(CONTEXT));\n-\n-     \/\/ Segment Registers and processor flags\n-     ptrRegs[REG_INDEX(CS)]  = context.SegCs;\n-     ptrRegs[REG_INDEX(DS)]  = context.SegDs;\n-     ptrRegs[REG_INDEX(ES)]  = context.SegEs;\n-     ptrRegs[REG_INDEX(FS)]  = context.SegFs;\n-     ptrRegs[REG_INDEX(GS)]  = context.SegGs;\n-     ptrRegs[REG_INDEX(SS)]  = context.SegSs;\n-     ptrRegs[REG_INDEX(RFL)] = context.EFlags;\n-\n-     \/\/ Integer registers\n-     ptrRegs[REG_INDEX(RDI)] = context.Rdi;\n-     ptrRegs[REG_INDEX(RSI)] = context.Rsi;\n-     ptrRegs[REG_INDEX(RAX)] = context.Rax;\n-     ptrRegs[REG_INDEX(RCX)] = context.Rcx;\n-     ptrRegs[REG_INDEX(RDX)] = context.Rdx;\n-     ptrRegs[REG_INDEX(RBX)] = context.Rbx;\n-     ptrRegs[REG_INDEX(RBP)] = context.Rbp;\n-     ptrRegs[REG_INDEX(RSP)] = context.Rsp;\n-\n-     ptrRegs[REG_INDEX(R8)]  = context.R8;\n-     ptrRegs[REG_INDEX(R9)]  = context.R9;\n-     ptrRegs[REG_INDEX(R10)] = context.R10;\n-     ptrRegs[REG_INDEX(R11)] = context.R11;\n-     ptrRegs[REG_INDEX(R12)] = context.R12;\n-     ptrRegs[REG_INDEX(R13)] = context.R13;\n-     ptrRegs[REG_INDEX(R14)] = context.R14;\n-     ptrRegs[REG_INDEX(R15)] = context.R15;\n-\n-     \/\/ Program counter\n-     ptrRegs[REG_INDEX(RIP)] = context.Rip;\n+    #define REG_INDEX(x) sun_jvm_hotspot_debugger_amd64_AMD64ThreadContext_##x\n+\n+    context.ContextFlags = CONTEXT_FULL | CONTEXT_DEBUG_REGISTERS;\n+    ptrIDebugAdvanced->GetThreadContext(&context, sizeof(CONTEXT));\n+\n+    \/\/ Segment Registers and processor flags\n+    ptrRegs[REG_INDEX(CS)]  = context.SegCs;\n+    ptrRegs[REG_INDEX(DS)]  = context.SegDs;\n+    ptrRegs[REG_INDEX(ES)]  = context.SegEs;\n+    ptrRegs[REG_INDEX(FS)]  = context.SegFs;\n+    ptrRegs[REG_INDEX(GS)]  = context.SegGs;\n+    ptrRegs[REG_INDEX(SS)]  = context.SegSs;\n+    ptrRegs[REG_INDEX(RFL)] = context.EFlags;\n+\n+    \/\/ Integer registers\n+    ptrRegs[REG_INDEX(RDI)] = context.Rdi;\n+    ptrRegs[REG_INDEX(RSI)] = context.Rsi;\n+    ptrRegs[REG_INDEX(RAX)] = context.Rax;\n+    ptrRegs[REG_INDEX(RCX)] = context.Rcx;\n+    ptrRegs[REG_INDEX(RDX)] = context.Rdx;\n+    ptrRegs[REG_INDEX(RBX)] = context.Rbx;\n+    ptrRegs[REG_INDEX(RBP)] = context.Rbp;\n+    ptrRegs[REG_INDEX(RSP)] = context.Rsp;\n+\n+    ptrRegs[REG_INDEX(R8)]  = context.R8;\n+    ptrRegs[REG_INDEX(R9)]  = context.R9;\n+    ptrRegs[REG_INDEX(R10)] = context.R10;\n+    ptrRegs[REG_INDEX(R11)] = context.R11;\n+    ptrRegs[REG_INDEX(R12)] = context.R12;\n+    ptrRegs[REG_INDEX(R13)] = context.R13;\n+    ptrRegs[REG_INDEX(R14)] = context.R14;\n+    ptrRegs[REG_INDEX(R15)] = context.R15;\n+\n+    \/\/ Program counter\n+    ptrRegs[REG_INDEX(RIP)] = context.Rip;\n@@ -570,2 +608,2 @@\n-     env->ReleaseLongArrayElements(regs, ptrRegs, JNI_COMMIT);\n-     CHECK_EXCEPTION_(false);\n+    env->ReleaseLongArrayElements(regs, ptrRegs, JNI_COMMIT);\n+    CHECK_EXCEPTION_(false);\n@@ -573,3 +611,2 @@\n-     env->CallVoidMethod(obj, setThreadIntegerRegisterSet_ID,\n-                        (jlong) ptrThreadIds.asPtr()[t], regs);\n-     CHECK_EXCEPTION_(false);\n+    env->CallVoidMethod(obj, setThreadIntegerRegisterSet_ID, (jlong)ptrThreadIds[t], regs);\n+    CHECK_EXCEPTION_(false);\n@@ -577,4 +614,3 @@\n-     ULONG sysId;\n-     if (ptrIDebugSystemObjects->GetCurrentThreadSystemId(&sysId) != S_OK) {\n-        THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: GetCurrentThreadSystemId failed!\", false);\n-     }\n+    ULONG sysId;\n+    COM_VERIFY_OK_(ptrIDebugSystemObjects->GetCurrentThreadSystemId(&sysId),\n+                   \"Windbg Error: GetCurrentThreadSystemId failed!\", false);\n@@ -582,2 +618,2 @@\n-     env->CallVoidMethod(obj, addThread_ID, (jlong) sysId);\n-     CHECK_EXCEPTION_(false);\n+    env->CallVoidMethod(obj, addThread_ID, (jlong) sysId);\n+    CHECK_EXCEPTION_(false);\n@@ -597,1 +633,1 @@\n-  if (getWindbgInterfaces(env, obj) == false) {\n+  if (!getWindbgInterfaces(env, obj)) {\n@@ -601,1 +637,1 @@\n-  if (openDumpFile(env, obj, coreFileName) == false) {\n+  if (!openDumpFile(env, obj, coreFileName)) {\n@@ -605,1 +641,1 @@\n-  if (addLoadObjects(env, obj) == false) {\n+  if (!addLoadObjects(env, obj)) {\n@@ -609,1 +645,1 @@\n-  if (addThreads(env, obj) == false) {\n+  if (!addThreads(env, obj)) {\n@@ -622,1 +658,1 @@\n-  if (getWindbgInterfaces(env, obj) == false) {\n+  if (!getWindbgInterfaces(env, obj)) {\n@@ -626,1 +662,1 @@\n-  if (attachToProcess(env, obj, pid) == false) {\n+  if (!attachToProcess(env, obj, pid)) {\n@@ -630,1 +666,1 @@\n-  if (addLoadObjects(env, obj) == false) {\n+  if (!addLoadObjects(env, obj)) {\n@@ -634,1 +670,1 @@\n-  if (addThreads(env, obj) == false) {\n+  if (!addThreads(env, obj)) {\n@@ -640,14 +676,8 @@\n-static bool releaseWindbgInterfaces(JNIEnv* env, jobject obj) {\n-  IDebugDataSpaces* ptrIDebugDataSpaces = (IDebugDataSpaces*) env->GetLongField(obj,\n-                                                      ptrIDebugDataSpaces_ID);\n-  CHECK_EXCEPTION_(false);\n-  if (ptrIDebugDataSpaces != 0) {\n-     ptrIDebugDataSpaces->Release();\n-  }\n-\n-  IDebugOutputCallbacks* ptrIDebugOutputCallbacks = (IDebugOutputCallbacks*)\n-                          env->GetLongField(obj, ptrIDebugOutputCallbacks_ID);\n-  CHECK_EXCEPTION_(false);\n-  if (ptrIDebugOutputCallbacks != 0) {\n-     ptrIDebugOutputCallbacks->Release();\n-  }\n+#define RELEASE(fieldID) \\\n+  do { \\\n+    IUnknown* ptr = (IUnknown*)env->GetLongField(obj, fieldID); \\\n+    CHECK_EXCEPTION_(false); \\\n+    if (ptr) { \\\n+      ptr->Release(); \\\n+    } \\\n+  } while (false)\n@@ -655,35 +685,8 @@\n-  IDebugAdvanced* ptrIDebugAdvanced = (IDebugAdvanced*) env->GetLongField(obj,\n-                                                      ptrIDebugAdvanced_ID);\n-  CHECK_EXCEPTION_(false);\n-\n-  if (ptrIDebugAdvanced != 0) {\n-     ptrIDebugAdvanced->Release();\n-  }\n-\n-  IDebugSymbols* ptrIDebugSymbols = (IDebugSymbols*) env->GetLongField(obj,\n-                                                      ptrIDebugSymbols_ID);\n-  CHECK_EXCEPTION_(false);\n-  if (ptrIDebugSymbols != 0) {\n-     ptrIDebugSymbols->Release();\n-  }\n-\n-  IDebugSystemObjects* ptrIDebugSystemObjects = (IDebugSystemObjects*) env->GetLongField(obj,\n-                                                      ptrIDebugSystemObjects_ID);\n-  CHECK_EXCEPTION_(false);\n-  if (ptrIDebugSystemObjects != 0) {\n-     ptrIDebugSystemObjects->Release();\n-  }\n-\n-  IDebugControl* ptrIDebugControl = (IDebugControl*) env->GetLongField(obj,\n-                                                     ptrIDebugControl_ID);\n-  CHECK_EXCEPTION_(false);\n-  if (ptrIDebugControl != 0) {\n-     ptrIDebugControl->Release();\n-  }\n-\n-  IDebugClient* ptrIDebugClient = (IDebugClient*) env->GetLongField(obj,\n-                                                      ptrIDebugClient_ID);\n-  CHECK_EXCEPTION_(false);\n-  if (ptrIDebugClient != 0) {\n-     ptrIDebugClient->Release();\n-  }\n+static bool releaseWindbgInterfaces(JNIEnv* env, jobject obj) {\n+  RELEASE(ptrIDebugDataSpaces_ID);\n+  RELEASE(ptrIDebugOutputCallbacks_ID);\n+  RELEASE(ptrIDebugAdvanced_ID);\n+  RELEASE(ptrIDebugSymbols_ID);\n+  RELEASE(ptrIDebugSystemObjects_ID);\n+  RELEASE(ptrIDebugControl_ID);\n+  RELEASE(ptrIDebugClient_ID);\n@@ -700,3 +703,2 @@\n-  (JNIEnv *env, jobject obj) {\n-  IDebugClient* ptrIDebugClient = (IDebugClient*) env->GetLongField(obj,\n-                                                      ptrIDebugClient_ID);\n+    (JNIEnv *env, jobject obj) {\n+  IDebugClient* ptrIDebugClient = (IDebugClient*) env->GetLongField(obj, ptrIDebugClient_ID);\n@@ -715,2 +717,2 @@\n-  (JNIEnv *env, jobject obj, jlong address, jlong numBytes) {\n-  jbyteArray byteArray = env->NewByteArray((long) numBytes);\n+    (JNIEnv *env, jobject obj, jlong address, jlong numBytes) {\n+  jbyteArray byteArray = env->NewByteArray((jsize)numBytes);\n@@ -719,2 +721,1 @@\n-  jboolean isCopy = JNI_FALSE;\n-  jbyte* bytePtr = env->GetByteArrayElements(byteArray, &isCopy);\n+  AutoJavaByteArray arrayBytes(env, byteArray);\n@@ -725,4 +726,1 @@\n-  if (env->ExceptionOccurred()) {\n-     env->ReleaseByteArrayElements(byteArray, bytePtr, JNI_ABORT);\n-     return 0;\n-  }\n+  CHECK_EXCEPTION_(0);\n@@ -731,6 +729,3 @@\n-  if (ptrIDebugDataSpaces->ReadVirtual((ULONG64) address, (PVOID) bytePtr,\n-                                  (ULONG)numBytes, &bytesRead) != S_OK) {\n-     env->ReleaseByteArrayElements(byteArray, bytePtr, JNI_ABORT);\n-     throwNewDebuggerException(env, \"Windbg Error: ReadVirtual failed!\");\n-     return 0;\n-  }\n+  COM_VERIFY_OK_(ptrIDebugDataSpaces->ReadVirtual((ULONG64)address, arrayBytes,\n+                                                  (ULONG)numBytes, &bytesRead),\n+                 \"Windbg Error: ReadVirtual failed!\", 0);\n@@ -739,1 +734,0 @@\n-     env->ReleaseByteArrayElements(byteArray, bytePtr, JNI_ABORT);\n@@ -742,1 +736,0 @@\n-  env->ReleaseByteArrayElements(byteArray, bytePtr, 0);\n@@ -744,1 +737,1 @@\n-  CHECK_EXCEPTION_(0);\n+  arrayBytes.setReleaseMode(0);\n@@ -755,1 +748,1 @@\n-  (JNIEnv *env, jobject obj, jlong sysId) {\n+    (JNIEnv *env, jobject obj, jlong sysId) {\n@@ -761,3 +754,2 @@\n-  if (ptrIDebugSystemObjects->GetThreadIdBySystemId((ULONG)sysId, &id) != S_OK) {\n-     THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: GetThreadIdBySystemId failed!\", 0);\n-  }\n+  COM_VERIFY_OK_(ptrIDebugSystemObjects->GetThreadIdBySystemId((ULONG)sysId, &id),\n+                 \"Windbg Error: GetThreadIdBySystemId failed!\", 0);\n@@ -768,22 +760,0 @@\n-\/\/ manage COM 'auto' pointers (to avoid multiple Release\n-\/\/ calls at every early (exception) returns). Similar to AutoArrayPtr.\n-\n-template <class T>\n-class AutoCOMPtr {\n-      T* m_ptr;\n-\n-   public:\n-      AutoCOMPtr(T* ptr) : m_ptr(ptr) {\n-      }\n-\n-      ~AutoCOMPtr() {\n-         if (m_ptr) {\n-            m_ptr->Release();\n-         }\n-      }\n-\n-      T* operator->() {\n-         return m_ptr;\n-      }\n-};\n-\n@@ -796,3 +766,2 @@\n-  (JNIEnv *env, jobject obj, jstring cmd) {\n-  jboolean isCopy = JNI_FALSE;\n-  const char* buf = env->GetStringUTFChars(cmd, &isCopy);\n+    (JNIEnv *env, jobject obj, jstring cmd) {\n+  AutoJavaString command(env, cmd);\n@@ -800,1 +769,0 @@\n-  AutoJavaString command(env, cmd, buf);\n@@ -806,3 +774,2 @@\n-  if (ptrIDebugClient->CreateClient(&tmpClientPtr) != S_OK) {\n-     THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: CreateClient failed!\", 0);\n-  }\n+  COM_VERIFY_OK_(ptrIDebugClient->CreateClient(&tmpClientPtr),\n+                 \"Windbg Error: CreateClient failed!\", 0);\n@@ -812,3 +779,2 @@\n-  if (tmpClient->QueryInterface(__uuidof(IDebugControl), (PVOID*) &tmpControlPtr) != S_OK) {\n-     THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: QueryInterface (IDebugControl) failed\", 0);\n-  }\n+  COM_VERIFY_OK_(tmpClient->QueryInterface(__uuidof(IDebugControl), (PVOID*) &tmpControlPtr),\n+                 \"Windbg Error: QueryInterface (IDebugControl) failed\", 0);\n@@ -823,3 +789,2 @@\n-  if (tmpClient->SetOutputCallbacks(saOutputCallbacks) != S_OK) {\n-     THROW_NEW_DEBUGGER_EXCEPTION_(\"Windbg Error: SetOutputCallbacks failed!\", 0);\n-  }\n+  COM_VERIFY_OK_(tmpClient->SetOutputCallbacks(saOutputCallbacks),\n+                 \"Windbg Error: SetOutputCallbacks failed!\", 0);\n@@ -846,3 +811,2 @@\n-(JNIEnv *env, jobject obj, jstring objName, jstring sym) {\n-  IDebugSymbols* ptrIDebugSymbols = (IDebugSymbols*) env->GetLongField(obj,\n-                                                      ptrIDebugSymbols_ID);\n+    (JNIEnv *env, jobject obj, jstring objName, jstring sym) {\n+  IDebugSymbols* ptrIDebugSymbols = (IDebugSymbols*)env->GetLongField(obj, ptrIDebugSymbols_ID);\n@@ -851,2 +815,1 @@\n-  jboolean isCopy;\n-  const char* buf = env->GetStringUTFChars(sym, &isCopy);\n+  AutoJavaString name(env, sym);\n@@ -854,1 +817,0 @@\n-  AutoJavaString name(env, sym, buf);\n@@ -875,3 +837,2 @@\n-(JNIEnv *env, jobject obj, jlong address) {\n-  IDebugSymbols* ptrIDebugSymbols = (IDebugSymbols*) env->GetLongField(obj,\n-                                                      ptrIDebugSymbols_ID);\n+    (JNIEnv *env, jobject obj, jlong address) {\n+  IDebugSymbols* ptrIDebugSymbols = (IDebugSymbols*) env->GetLongField(obj, ptrIDebugSymbols_ID);\n@@ -884,2 +845,1 @@\n-  if (ptrIDebugSymbols->GetNameByOffset(address, buf, sizeof(buf),0,&disp)\n-      != S_OK) {\n+  if (ptrIDebugSymbols->GetNameByOffset(address, buf, sizeof(buf), 0, &disp) != S_OK) {\n","filename":"src\/jdk.hotspot.agent\/windows\/native\/libsaproc\/sawindbg.cpp","additions":370,"deletions":410,"binary":false,"changes":780,"status":"modified"}]}