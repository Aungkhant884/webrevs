{"files":[{"patch":"@@ -81,0 +81,2 @@\n+    permission java.lang.RuntimePermission\n+                   \"getStackWalkerWithClassReference\";\n","filename":"src\/java.base\/share\/lib\/security\/default.policy","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,4 @@\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.util.logging.Level;\n+\n@@ -30,0 +34,15 @@\n+    \/**\n+     * StackWalker to find out the caller of this class so that it can be\n+     * shown in the log output. The multiple private log0() methods below\n+     * skip exactly 2 frames -- one log0() itself, the other one of the\n+     * public debug()\/warn()\/error()\/trace() methods in this class --\n+     * to find the caller.\n+     *\/\n+    private static final StackWalker WALKER;\n+    static {\n+        final PrivilegedAction<StackWalker> action =\n+                () -> StackWalker.getInstance(StackWalker.Option\n+                        .RETAIN_CLASS_REFERENCE);\n+        WALKER = AccessController.doPrivileged(action);\n+    }\n+\n@@ -37,1 +56,1 @@\n-        return impl.isLoggable(java.util.logging.Level.FINE);\n+        return impl.isLoggable(Level.FINE);\n@@ -41,1 +60,1 @@\n-        return impl.isLoggable(java.util.logging.Level.FINE);\n+        return impl.isLoggable(Level.FINE);\n@@ -45,1 +64,1 @@\n-        impl.log(java.util.logging.Level.FINE, s);\n+        log0(Level.FINE, s);\n@@ -49,1 +68,1 @@\n-        impl.log(java.util.logging.Level.FINE, s, e);\n+        log0(Level.FINE, s, e);\n@@ -53,1 +72,1 @@\n-        impl.log(java.util.logging.Level.FINE, s, o);\n+        log0(Level.FINE, s, o);\n@@ -57,1 +76,1 @@\n-        impl.log(java.util.logging.Level.FINE, s);\n+        log0(Level.FINE, s);\n@@ -61,1 +80,1 @@\n-        impl.log(java.util.logging.Level.SEVERE, s);\n+        log0(Level.SEVERE, s);\n@@ -65,1 +84,1 @@\n-        impl.log(java.util.logging.Level.SEVERE, s, e);\n+        log0(Level.SEVERE, s, e);\n@@ -69,1 +88,1 @@\n-        impl.log(java.util.logging.Level.SEVERE, s, o);\n+        log0(Level.SEVERE, s, o);\n@@ -73,1 +92,1 @@\n-        impl.log(java.util.logging.Level.WARNING, s);\n+        log0(Level.WARNING, s);\n@@ -77,1 +96,47 @@\n-        impl.log(java.util.logging.Level.WARNING, s, e);\n+        log0(Level.WARNING, s, e);\n+    }\n+\n+    private void log0(Level level, String s) {\n+        if (impl.isLoggable(level)) {\n+            var sf = WALKER.walk(f -> f.skip(2).findFirst()).get();\n+            impl.logp(Level.FINE, sf.getClassName(), sf.getMethodName(), s);\n+        }\n+    }\n+\n+    public void log0(Level level, String s, Throwable e) {\n+        if (impl.isLoggable(level)) {\n+            var sf = WALKER.walk(f -> f.skip(2).findFirst()).get();\n+            impl.logp(Level.FINE, sf.getClassName(), sf.getMethodName(), s, e);\n+        }\n+    }\n+\n+    public void log0(Level level, String s, Object... o) {\n+        if (impl.isLoggable(level)) {\n+            var sf = WALKER.walk(f -> f.skip(2).findFirst()).get();\n+            impl.logp(Level.FINE, sf.getClassName(), sf.getMethodName(),\n+                    addIndex(s), o);\n+        }\n+    }\n+\n+    \/**\n+     * Translate the log4j message format \"Hello {}, {}\" to the\n+     * java.util.logging format \"Hello {0}, {1}\".\n+     *\/\n+    private static String addIndex(String s) {\n+        int start = 0;\n+        int index = 0;\n+        StringBuilder sb = new StringBuilder();\n+        while (true) {\n+            int pos = s.indexOf(\"{}\", start);\n+            if (pos < 0) {\n+                break;\n+            }\n+            sb.append(s, start, pos + 1).append(index++);\n+            start = pos + 1;\n+        }\n+        if (index == 0) {\n+            return s;\n+        } else {\n+            sb.append(s, start, s.length());\n+            return sb.toString();\n+        }\n","filename":"src\/java.xml.crypto\/share\/classes\/com\/sun\/org\/slf4j\/internal\/Logger.java","additions":77,"deletions":12,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.hexdump.HexPrinter;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.util.logging.*;\n+\n+\/**\n+ * @test\n+ * @bug 8247907\n+ * @library \/test\/lib\n+ * @modules java.xml.crypto\/com.sun.org.slf4j.internal\n+ *\/\n+public class LogParameters {\n+    public static void main(String[] args) {\n+\n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+        Logger.getLogger(String.class.getName()).setLevel(Level.ALL);\n+        Handler h = new StreamHandler(bout, new SimpleFormatter());\n+        h.setLevel(Level.ALL);\n+        Logger.getLogger(String.class.getName()).addHandler(h);\n+\n+        com.sun.org.slf4j.internal.Logger log =\n+                com.sun.org.slf4j.internal.LoggerFactory.getLogger(String.class);\n+        log.debug(\"I have {} {}s.\", 10, \"apple\");\n+\n+        h.flush();\n+\n+        byte[] data = bout.toByteArray();\n+        String s = new String(data);\n+        if (!s.contains(\"LogParameters main\")\n+                || !s.contains(\"FINE: I have 10 apples.\")) {\n+            HexPrinter.simple().format(data);\n+            throw new RuntimeException(\"Unexpected log output: \" + s);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/xml\/crypto\/dsig\/LogParameters.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"}]}