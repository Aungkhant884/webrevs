{"files":[{"patch":"@@ -770,1 +770,1 @@\n-  jccb  (Assembler::notZero, CheckSucc);\n+  jccb  (Assembler::notZero, DONE_LABEL);\n@@ -774,17 +774,0 @@\n-  if (LockingMode != LM_MONITOR) {\n-    bind (Stacked);\n-    if (LockingMode == LM_LIGHTWEIGHT) {\n-      mov(boxReg, tmpReg);\n-      fast_unlock_impl(objReg, boxReg, tmpReg, DONE_LABEL);\n-      xorl(tmpReg, tmpReg);\n-    } else if (LockingMode == LM_LEGACY) {\n-      \/\/ It's not inflated and it's not recursively stack-locked and it's not biased.\n-      \/\/ It must be stack-locked.\n-      \/\/ Try to reset the header to displaced header.\n-      \/\/ The \"box\" value on the stack is stable, so we can reload\n-      \/\/ and be assured we observe the same value as above.\n-      movptr(tmpReg, Address(boxReg, 0));\n-      lock();\n-      cmpxchgptr(tmpReg, Address(objReg, oopDesc::mark_offset_in_bytes())); \/\/ Uses RAX which is box\n-    }\n-  }\n@@ -881,1 +864,1 @@\n-    } else {\n+    } else if (LockingMode == LM_LEGACY) {\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -706,1 +706,1 @@\n-  SharedRuntime::monitor_enter_helper(obj, LockingMode == LM_LIGHTWEIGHT ? nullptr : lock->lock(), current);\n+  SharedRuntime::monitor_enter_helper(obj, LockingMode == LM_LIGHTWEIGHT ? NULL : lock->lock(), current);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -758,1 +758,1 @@\n-  ObjectSynchronizer::enter(h_obj, nullptr, current);\n+  ObjectSynchronizer::enter(h_obj, NULL, current);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    _base[i] = nullptr;\n+    _base[i] = NULL;\n@@ -69,1 +69,1 @@\n-      assert(_base[i] != nullptr, \"no zapped before top\");\n+      assert(_base[i] != NULL, \"no zapped before top\");\n@@ -75,1 +75,1 @@\n-      assert(_base[i] == nullptr, \"only zapped entries after top: i: %d, top: %d, entry: \" PTR_FORMAT, i, top, p2i(_base[i]));\n+      assert(_base[i] == NULL, \"only zapped entries after top: i: %d, top: %d, entry: \" PTR_FORMAT, i, top, p2i(_base[i]));\n","filename":"src\/hotspot\/share\/runtime\/lockStack.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-  assert(_base[to_index(_top)] == nullptr, \"expect zapped entry\");\n+  assert(_base[to_index(_top)] == NULL, \"expect zapped entry\");\n@@ -73,1 +73,1 @@\n-  _base[to_index(_top)] = nullptr;\n+  _base[to_index(_top)] = NULL;\n@@ -92,1 +92,1 @@\n-      _base[to_index(_top)] = nullptr;\n+      _base[to_index(_top)] = NULL;\n@@ -109,1 +109,1 @@\n-    if (watermark != nullptr) {\n+    if (watermark != NULL) {\n","filename":"src\/hotspot\/share\/runtime\/lockStack.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -282,1 +282,1 @@\n-    set_owner_from(nullptr, anon_owner_ptr());\n+    set_owner_from(NULL, anon_owner_ptr());\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}