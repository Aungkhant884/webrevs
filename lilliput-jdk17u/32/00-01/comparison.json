{"files":[{"patch":"@@ -33,1 +33,1 @@\n-#include \"gc\/g1\/g1FullGCCompactionPoint.inline.hpp\"\n+#include \"gc\/g1\/g1FullGCCompactionPoint.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -58,0 +58,5 @@\n+ public:\n+  G1AdjustRegionClosure(G1FullCollector* collector, uint worker_id) :\n+    _collector(collector),\n+    _bitmap(collector->mark_bitmap()),\n+    _worker_id(worker_id) { }\n@@ -59,1 +64,10 @@\n-  template<bool ALT_FWD>\n+  bool do_heap_region(HeapRegion* r) {\n+    if (UseAltGCForwarding) {\n+      return do_heap_region_impl<true>(r);\n+    } else {\n+      return do_heap_region_impl<false>(r);\n+    }\n+  }\n+\n+ private:\n+  template <bool ALT_FWD>\n@@ -76,14 +90,0 @@\n-\n-public:\n-  G1AdjustRegionClosure(G1FullCollector* collector, uint worker_id) :\n-    _collector(collector),\n-    _bitmap(collector->mark_bitmap()),\n-    _worker_id(worker_id) { }\n-\n-  bool do_heap_region(HeapRegion* r) {\n-    if (UseAltGCForwarding) {\n-      return do_heap_region_impl<true>(r);\n-    } else {\n-      return do_heap_region_impl<false>(r);\n-    }\n-  }\n@@ -102,1 +102,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCAdjustTask.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCAdjustTask.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -96,0 +97,46 @@\n+template <bool ALT_FWD>\n+void G1FullGCCompactionPoint::forward(oop object, size_t size) {\n+  assert(_current_region != NULL, \"Must have been initialized\");\n+\n+  \/\/ Ensure the object fit in the current region.\n+  while (!object_will_fit(size)) {\n+    switch_region();\n+  }\n+\n+  \/\/ Store a forwarding pointer if the object should be moved.\n+  if (cast_from_oop<HeapWord*>(object) != _compaction_top) {\n+    SlidingForwarding::forward_to<ALT_FWD>(object, cast_to_oop(_compaction_top));\n+  } else {\n+    assert(!SlidingForwarding::is_forwarded(object), \"should not be forwarded\");\n+    \/*\n+    if (object->forwardee() != NULL) {\n+      \/\/ Object should not move but mark-word is used so it looks like the\n+      \/\/ object is forwarded. Need to clear the mark and it's no problem\n+      \/\/ since it will be restored by preserved marks. There is an exception\n+      \/\/ with BiasedLocking, in this case forwardee() will return NULL\n+      \/\/ even if the mark-word is used. This is no problem since\n+      \/\/ forwardee() will return NULL in the compaction phase as well.\n+      object->init_mark();\n+    } else {\n+      \/\/ Make sure object has the correct mark-word set or that it will be\n+      \/\/ fixed when restoring the preserved marks.\n+      assert(object->mark() == markWord::prototype_for_klass(object->klass()) || \/\/ Correct mark\n+             object->mark_must_be_preserved() || \/\/ Will be restored by PreservedMarksSet\n+             (UseBiasedLocking && object->has_bias_pattern()), \/\/ Will be restored by BiasedLocking\n+             \"should have correct prototype obj: \" PTR_FORMAT \" mark: \" PTR_FORMAT \" prototype: \" PTR_FORMAT,\n+             p2i(object), object->mark().value(), markWord::prototype_for_klass(object->klass()).value());\n+    }\n+    assert(object->forwardee() == NULL, \"should be forwarded to NULL\");\n+    *\/\n+  }\n+\n+  \/\/ Update compaction values.\n+  _compaction_top += size;\n+  if (_compaction_top > _threshold) {\n+    _threshold = _current_region->cross_threshold(_compaction_top - size, _compaction_top);\n+  }\n+}\n+\n+template void G1FullGCCompactionPoint::forward<true>(oop object, size_t size);\n+template void G1FullGCCompactionPoint::forward<false>(oop object, size_t size);\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.cpp","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -54,2 +54,2 @@\n-  template<bool ALT_FWD>\n-  inline void forward(oop object, size_t size);\n+  template <bool ALT_FWD>\n+  void forward(oop object, size_t size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_G1_G1FULLGCCOMPACTIONPOINT_INLINE_HPP\n-#define SHARE_GC_G1_G1FULLGCCOMPACTIONPOINT_INLINE_HPP\n-\n-#include \"gc\/g1\/g1FullGCCompactionPoint.hpp\"\n-#include \"gc\/g1\/heapRegion.hpp\"\n-#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n-#include \"oops\/oop.inline.hpp\"\n-\n-template<bool ALT_FWD>\n-void G1FullGCCompactionPoint::forward(oop object, size_t size) {\n-  assert(_current_region != NULL, \"Must have been initialized\");\n-\n-  \/\/ Ensure the object fit in the current region.\n-  while (!object_will_fit(size)) {\n-    switch_region();\n-  }\n-\n-  \/\/ Store a forwarding pointer if the object should be moved.\n-  if (cast_from_oop<HeapWord*>(object) != _compaction_top) {\n-    SlidingForwarding::forward_to<ALT_FWD>(object, cast_to_oop(_compaction_top));\n-  } else {\n-    assert(!SlidingForwarding::is_forwarded(object), \"should not be forwarded\");\n-    \/*\n-    if (object->forwardee() != NULL) {\n-      \/\/ Object should not move but mark-word is used so it looks like the\n-      \/\/ object is forwarded. Need to clear the mark and it's no problem\n-      \/\/ since it will be restored by preserved marks. There is an exception\n-      \/\/ with BiasedLocking, in this case forwardee() will return NULL\n-      \/\/ even if the mark-word is used. This is no problem since\n-      \/\/ forwardee() will return NULL in the compaction phase as well.\n-      object->init_mark();\n-    } else {\n-      \/\/ Make sure object has the correct mark-word set or that it will be\n-      \/\/ fixed when restoring the preserved marks.\n-      assert(object->mark() == markWord::prototype_for_klass(object->klass()) || \/\/ Correct mark\n-             object->mark_must_be_preserved() || \/\/ Will be restored by PreservedMarksSet\n-             (UseBiasedLocking && object->has_bias_pattern()), \/\/ Will be restored by BiasedLocking\n-             \"should have correct prototype obj: \" PTR_FORMAT \" mark: \" PTR_FORMAT \" prototype: \" PTR_FORMAT,\n-             p2i(object), object->mark().value(), markWord::prototype_for_klass(object->klass()).value());\n-    }\n-    assert(object->forwardee() == NULL, \"should be forwarded to NULL\");\n-    *\/\n-  }\n-\n-  \/\/ Update compaction values.\n-  _compaction_top += size;\n-  if (_compaction_top > _threshold) {\n-    _threshold = _current_region->cross_threshold(_compaction_top - size, _compaction_top);\n-  }\n-}\n-\n-#endif \/\/ SHARE_GC_G1_G1FULLGCCOMPACTIONPOINT_INLINE_HPP\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.inline.hpp","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -80,1 +80,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCOopClosures.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -100,1 +100,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -102,1 +102,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCOopClosures.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"gc\/g1\/g1FullGCCompactionPoint.inline.hpp\"\n+#include \"gc\/g1\/g1FullGCCompactionPoint.hpp\"\n@@ -160,1 +160,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -164,1 +164,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -171,1 +171,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -212,1 +212,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -58,1 +58,1 @@\n-    template<bool is_humongous>\n+    template <bool is_humongous>\n@@ -81,1 +81,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -90,1 +90,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -176,1 +176,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -143,1 +143,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -188,1 +188,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -208,1 +208,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -184,1 +184,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -158,1 +158,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -350,1 +350,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -434,1 +434,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/shared\/space.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -304,1 +304,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -384,1 +384,29 @@\n-  template<bool ALT_FWD>\n+public:\n+  ShenandoahPrepareForCompactionTask(PreservedMarksSet *preserved_marks, ShenandoahHeapRegionSet **worker_slices) :\n+    AbstractGangTask(\"Shenandoah Prepare For Compaction\"),\n+    _preserved_marks(preserved_marks),\n+    _heap(ShenandoahHeap::heap()), _worker_slices(worker_slices) {\n+  }\n+\n+  static bool is_candidate_region(ShenandoahHeapRegion* r) {\n+    \/\/ Empty region: get it into the slice to defragment the slice itself.\n+    \/\/ We could have skipped this without violating correctness, but we really\n+    \/\/ want to compact all live regions to the start of the heap, which sometimes\n+    \/\/ means moving them into the fully empty regions.\n+    if (r->is_empty()) return true;\n+\n+    \/\/ Can move the region, and this is not the humongous region. Humongous\n+    \/\/ moves are special cased here, because their moves are handled separately.\n+    return r->is_stw_move_allowed() && !r->is_humongous();\n+  }\n+\n+  void work(uint worker_id) {\n+    if (UseAltGCForwarding) {\n+      work_impl<true>(worker_id);\n+    } else {\n+      work_impl<false>(worker_id);\n+    }\n+  }\n+\n+private:\n+  template <bool ALT_FWD>\n@@ -425,26 +453,0 @@\n-public:\n-  ShenandoahPrepareForCompactionTask(PreservedMarksSet *preserved_marks, ShenandoahHeapRegionSet **worker_slices) :\n-    AbstractGangTask(\"Shenandoah Prepare For Compaction\"),\n-    _preserved_marks(preserved_marks),\n-    _heap(ShenandoahHeap::heap()), _worker_slices(worker_slices) {\n-  }\n-\n-  static bool is_candidate_region(ShenandoahHeapRegion* r) {\n-    \/\/ Empty region: get it into the slice to defragment the slice itself.\n-    \/\/ We could have skipped this without violating correctness, but we really\n-    \/\/ want to compact all live regions to the start of the heap, which sometimes\n-    \/\/ means moving them into the fully empty regions.\n-    if (r->is_empty()) return true;\n-\n-    \/\/ Can move the region, and this is not the humongous region. Humongous\n-    \/\/ moves are special cased here, because their moves are handled separately.\n-    return r->is_stw_move_allowed() && !r->is_humongous();\n-  }\n-\n-  void work(uint worker_id) {\n-    if (UseAltGCForwarding) {\n-      work_impl<true>(worker_id);\n-    } else {\n-      work_impl<false>(worker_id);\n-    }\n-  }\n@@ -453,1 +455,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -747,1 +749,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -775,1 +777,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -796,12 +798,0 @@\n-  template<bool ALT_FWD>\n-  void work_impl(uint worker_id) {\n-    ShenandoahParallelWorkerSession worker_session(worker_id);\n-    ShenandoahAdjustPointersObjectClosure<ALT_FWD> obj_cl;\n-    ShenandoahHeapRegion* r = _regions.next();\n-    while (r != NULL) {\n-      if (!r->is_humongous_continuation() && r->has_live()) {\n-        _heap->marked_object_iterate(r, &obj_cl);\n-      }\n-      r = _regions.next();\n-    }\n-  }\n@@ -821,0 +811,14 @@\n+\n+private:\n+  template <bool ALT_FWD>\n+  void work_impl(uint worker_id) {\n+    ShenandoahParallelWorkerSession worker_session(worker_id);\n+    ShenandoahAdjustPointersObjectClosure<ALT_FWD> obj_cl;\n+    ShenandoahHeapRegion* r = _regions.next();\n+    while (r != NULL) {\n+      if (!r->is_humongous_continuation() && r->has_live()) {\n+        _heap->marked_object_iterate(r, &obj_cl);\n+      }\n+      r = _regions.next();\n+    }\n+  }\n@@ -828,1 +832,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -874,1 +878,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -902,1 +906,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -984,1 +988,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":51,"deletions":47,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -87,1 +87,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -90,1 +90,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}