{"files":[{"patch":"@@ -863,0 +863,1 @@\n+template<bool RESOLVE>\n@@ -865,6 +866,3 @@\n-  if (G1CollectedHeap::heap()->collector_state()->in_full_gc()) {\n-    while (p < top()) {\n-      if (block_is_obj(p)) {\n-        blk->do_object(cast_to_oop(p));\n-      }\n-      p += block_size(p);\n+  while (p < top()) {\n+    if (block_is_obj(p)) {\n+      blk->do_object(cast_to_oop(p));\n@@ -872,0 +870,7 @@\n+    p += block_size<RESOLVE>(p);\n+  }\n+}\n+\n+void HeapRegion::object_iterate(ObjectClosure* blk) {\n+  if (G1CollectedHeap::heap()->collector_state()->in_full_gc()) {\n+    object_iterate<false>(blk);\n@@ -873,6 +878,1 @@\n-    while (p < top()) {\n-      if (block_is_obj(p)) {\n-        blk->do_object(cast_to_oop(p));\n-      }\n-      p += block_size_resolve(p);\n-    }\n+    object_iterate<true>(blk);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -148,0 +148,3 @@\n+  template<bool RESOLVE>\n+  void object_iterate(ObjectClosure* blk);\n+\n@@ -186,0 +189,2 @@\n+  template<bool RESOLVE>\n+  size_t block_size(const HeapWord* p) const;\n@@ -187,1 +192,0 @@\n-  size_t block_size_resolve(const HeapWord* p) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -180,0 +180,1 @@\n+template <bool RESOLVE>\n@@ -185,14 +186,0 @@\n-  if (block_is_obj(addr)) {\n-    oop obj = cast_to_oop(addr);\n-    assert(G1CollectedHeap::heap()->collector_state()->in_full_gc() || !obj->is_forwarded(), \"need to resolve object\");\n-    return obj->size();\n-  }\n-\n-  return block_size_using_bitmap(addr, G1CollectedHeap::heap()->concurrent_mark()->prev_mark_bitmap());\n-}\n-\n-inline size_t HeapRegion::block_size_resolve(const HeapWord *addr) const {\n-  if (addr == top()) {\n-    return pointer_delta(end(), addr);\n-  }\n-\n@@ -202,2 +189,1 @@\n-    assert(!G1CollectedHeap::heap()->collector_state()->in_full_gc(), \"don't resolve in full GC\");\n-    if (obj->is_forwarded()) {\n+    if (RESOLVE && obj->is_forwarded()) {\n@@ -213,0 +199,4 @@\n+inline size_t HeapRegion::block_size(const HeapWord *addr) const {\n+  return block_size<false>(addr);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp","additions":6,"deletions":16,"binary":false,"changes":22,"status":"modified"}]}