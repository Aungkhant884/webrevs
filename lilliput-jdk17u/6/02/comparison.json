{"files":[{"patch":"@@ -863,0 +863,1 @@\n+template<bool RESOLVE>\n@@ -869,1 +870,9 @@\n-    p += block_size(p);\n+    p += block_size<RESOLVE>(p);\n+  }\n+}\n+\n+void HeapRegion::object_iterate(ObjectClosure* blk) {\n+  if (G1CollectedHeap::heap()->collector_state()->in_full_gc()) {\n+    object_iterate<false>(blk);\n+  } else {\n+    object_iterate<true>(blk);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -148,0 +148,3 @@\n+  template<bool RESOLVE>\n+  void object_iterate(ObjectClosure* blk);\n+\n@@ -186,0 +189,1 @@\n+  template<bool RESOLVE = false>\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -180,0 +180,1 @@\n+template <bool RESOLVE>\n@@ -188,1 +189,1 @@\n-    if (obj->is_forwarded() && CompressedKlassPointers::is_null(obj->mark().narrow_klass())) {\n+    if (RESOLVE && obj->is_forwarded()) {\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8303027\n+ * @summary Test that we're failing with OOME and not with VM crash\n+ * @run main\/othervm -Xmx10g TestOOM\n+ *\/\n+public class TestOOM {\n+    public static void main(String[] args) {\n+        \/\/ Test that it exits with OOME and not with VM crash.\n+        try {\n+            LinkedInsanity previous = null;\n+            while (true) {\n+                previous = new LinkedInsanity(previous);\n+            }\n+        } catch (OutOfMemoryError e) {\n+            \/\/ That's expected\n+        }\n+    }\n+\n+    private static class LinkedInsanity {\n+        private final LinkedInsanity previous;\n+        private final int[] padding = new int[64000];\n+\n+        public LinkedInsanity(LinkedInsanity previous) {\n+            this.previous = previous;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/oom\/TestOOM.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"}]}