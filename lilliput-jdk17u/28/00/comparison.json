{"files":[{"patch":"@@ -4024,1 +4024,1 @@\n-    if (UseCompactObjectHeaders) {\n+    if (UseBiasedLocking || UseCompactObjectHeaders) {\n@@ -4029,1 +4029,1 @@\n-      __ movptr(Address(rax, oopDesc::mark_offset_in_bytes()),\n+      __ movptr(Address(rax, oopDesc::mark_offset_in_bytes ()),\n@@ -4032,0 +4032,2 @@\n+    }\n+    if (!UseCompactObjectHeaders) {\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -429,1 +429,1 @@\n-    if (UseCompactObjectHeaders) {\n+    if (UseBiasedLocking) {\n@@ -431,0 +431,2 @@\n+    } else if (UseCompactObjectHeaders) {\n+      oopDesc::release_set_mark(mem, k->prototype_header());\n@@ -433,0 +435,2 @@\n+    }\n+    if (!UseCompactObjectHeaders) {\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -387,4 +387,3 @@\n-  \/\/ Need a release store to ensure array\/class length, mark word, and\n-  \/\/ object zeroing are visible before setting the klass non-NULL, for\n-  \/\/ concurrent collectors.\n-  if (UseCompactObjectHeaders) {\n+  if (UseBiasedLocking) {\n+    oopDesc::set_mark(mem, _klass->prototype_header());\n+  } else if (UseCompactObjectHeaders) {\n@@ -393,0 +392,1 @@\n+    \/\/ May be bootstrapping\n@@ -394,0 +394,5 @@\n+  }\n+  \/\/ Need a release store to ensure array\/class length, mark word, and\n+  \/\/ object zeroing are visible before setting the klass non-NULL, for\n+  \/\/ concurrent collectors.\n+  if (!UseCompactObjectHeaders) {\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -596,6 +596,6 @@\n-#ifdef _LP64\n-    t->set_mark(Universe::intArrayKlassObj()->prototype_header());\n-#else\n-    t->set_mark(markWord::prototype());\n-    t->set_klass(Universe::intArrayKlassObj());\n-#endif\n+    if (UseCompactObjectHeaders) {\n+      t->set_mark(Universe::intArrayKlassObj()->prototype_header());\n+    } else {\n+      t->set_mark(markWord::prototype());\n+      t->set_klass(Universe::intArrayKlassObj());\n+    }\n@@ -607,6 +607,6 @@\n-#ifdef _LP64\n-    obj->set_mark(vmClasses::Object_klass()->prototype_header());\n-#else\n-    obj->set_mark(markWord::prototype());\n-    obj->set_klass(vmClasses::Object_klass());\n-#endif\n+    if (UseCompactObjectHeaders) {\n+      obj->set_mark(vmClasses::Object_klass()->prototype_header());\n+    } else {\n+      obj->set_mark(markWord::prototype());\n+      obj->set_klass(vmClasses::Object_klass());\n+    }\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1958,6 +1958,6 @@\n-#ifdef _LP64\n-              oopDesc::release_set_mark(result, ik->prototype_header());\n-#else\n-              obj->set_mark(markWord::prototype());\n-              obj->set_klass(ik);\n-#endif\n+              if (UseCompactObjectHeaders) {\n+                oopDesc::release_set_mark(result, ik->prototype_header());\n+              } else {\n+                obj->set_mark(markWord::prototype());\n+                obj->set_klass(ik);\n+              }\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}