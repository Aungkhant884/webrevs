{"files":[{"patch":"@@ -77,0 +77,1 @@\n+#ifdef _LP64\n@@ -87,0 +88,1 @@\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/c2_CodeStubs_x86.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -597,1 +597,1 @@\n-  cmpxchgptr(scrReg, Address(boxReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(owner)));\n+  cmpxchgptr(thread, Address(boxReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(owner)));\n@@ -599,8 +599,0 @@\n-  \/\/ If we weren't able to swing _owner from NULL to the BasicLock\n-  \/\/ then take the slow path.\n-  jccb  (Assembler::notZero, DONE_LABEL);\n-  \/\/ update _owner from BasicLock to thread\n-  get_thread (scrReg);                    \/\/ beware: clobbers ICCs\n-  movptr(Address(boxReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(owner)), scrReg);\n-  xorptr(boxReg, boxReg);                 \/\/ set icc.ZFlag = 1 to indicate success\n-\n@@ -772,8 +764,14 @@\n-  \/\/ It's not inflated and it's not recursively stack-locked and it's not biased.\n-  \/\/ It must be stack-locked.\n-  \/\/ Try to reset the header to displaced header.\n-  \/\/ The \"box\" value on the stack is stable, so we can reload\n-  \/\/ and be assured we observe the same value as above.\n-  movptr(tmpReg, Address(boxReg, 0));\n-  lock();\n-  cmpxchgptr(tmpReg, Address(objReg, oopDesc::mark_offset_in_bytes())); \/\/ Uses RAX which is box\n+  if (UseFastLocking) {\n+    mov(boxReg, tmpReg);\n+    fast_unlock_impl(objReg, boxReg, tmpReg, DONE_LABEL);\n+    xorl(tmpReg, tmpReg);\n+  } else {\n+    \/\/ It's not inflated and it's not recursively stack-locked and it's not biased.\n+    \/\/ It must be stack-locked.\n+    \/\/ Try to reset the header to displaced header.\n+    \/\/ The \"box\" value on the stack is stable, so we can reload\n+    \/\/ and be assured we observe the same value as above.\n+    movptr(tmpReg, Address(boxReg, 0));\n+    lock();\n+    cmpxchgptr(tmpReg, Address(objReg, oopDesc::mark_offset_in_bytes())); \/\/ Uses RAX which is box\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":15,"deletions":17,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -42,3 +42,0 @@\n-#include \"opto\/c2_CodeStubs.hpp\"\n-#include \"opto\/compile.hpp\"\n-#include \"opto\/output.hpp\"\n@@ -60,0 +57,6 @@\n+#ifdef COMPILER2\n+#include \"opto\/c2_CodeStubs.hpp\"\n+#include \"opto\/compile.hpp\"\n+#include \"opto\/output.hpp\"\n+#endif\n+\n@@ -5229,1 +5232,1 @@\n-#ifdef _LP64\n+#if defined(_LP64) && defined(COMPILER2)\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -4027,2 +4027,1 @@\n-    Register tmp_store_klass = LP64_ONLY(rscratch1) NOT_LP64(noreg);\n-    __ store_klass(rax, rcx, tmp_store_klass);  \/\/ klass\n+    __ store_klass(rax, rcx);  \/\/ klass\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -13726,1 +13726,1 @@\n-                 $scr$$Register, noreg, noreg, $thread$$Register, NULL, NULL, NULL, false, false);\n+                 $scr$$Register, noreg, noreg, $thread$$Register, NULL, NULL, NULL, NULL, false, false);\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -702,1 +702,1 @@\n-  if (!UseHeavyMonitors) {\n+  if (UseHeavyMonitors) {\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -187,0 +187,1 @@\n+#ifdef _LP64\n@@ -190,0 +191,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -489,0 +489,1 @@\n+#ifdef _LP64\n@@ -492,0 +493,1 @@\n+#endif\n@@ -615,1 +617,0 @@\n-    obj->set_klass_gap(0);\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -81,0 +81,1 @@\n+#ifdef _LP64\n@@ -90,0 +91,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/opto\/c2_CodeStubs.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3159,0 +3159,1 @@\n+#ifdef _LP64\n@@ -3160,1 +3161,1 @@\n-\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -273,1 +273,1 @@\n-    return _owner == ANONYMOUS_OWNER;\n+    return owner_raw() == ANONYMOUS_OWNER;\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3762,1 +3762,2 @@\n-    if (monitor->is_owner_anonymous()) {\n+    void* raw_owner = monitor->owner_raw();\n+    if (raw_owner == ANONYMOUS_OWNER) {\n@@ -3764,0 +3765,2 @@\n+    } else if (raw_owner == DEFLATER_MARKER) {\n+      return NULL;\n@@ -3765,1 +3768,13 @@\n-      Thread* owner = reinterpret_cast<Thread*>(monitor->owner());\n+      Thread* owner = reinterpret_cast<Thread*>(raw_owner);\n+#ifdef ASSERT\n+      if (owner != NULL) {\n+        bool found = false;\n+        DO_JAVA_THREADS(t_list, q) {\n+          if (q == owner) {\n+            found = true;;\n+            break;\n+          }\n+        }\n+        assert(found, \"owner is not a thread: \" PTR_FORMAT, p2i(owner));\n+      }\n+#endif\n@@ -3770,2 +3785,1 @@\n-    address owner = (address)monitor->owner();\n-    return owning_thread_from_monitor_owner(t_list, owner);\n+    return owning_thread_from_monitor_owner(t_list, (address)monitor->owner());\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -51,0 +51,3 @@\n+    if (!VM.getVM().isLP64()) {\n+      klass      = new MetadataField(type.getAddressField(\"_klass\"), 0);\n+    }\n@@ -73,0 +76,1 @@\n+  private static MetadataField  klass;\n@@ -86,2 +90,6 @@\n-    assert(VM.getVM().isCompressedKlassPointersEnabled());\n-    return getKlass(getMark());\n+    if (VM.getVM().isLP64()) {\n+      assert(VM.getVM().isCompressedKlassPointersEnabled());\n+      return getKlass(getMark());\n+    } else {\n+      return (Klass)klass.getValue(getHandle());\n+    }\n@@ -208,2 +216,6 @@\n-    Mark mark = new Mark(handle);\n-    return getKlass(mark);\n+    if (VM.getVM().isLP64()) {\n+      Mark mark = new Mark(handle);\n+      return getKlass(mark);\n+    } else {\n+      return (Klass)Metadata.instantiateWrapperFor(handle.getAddressAt(klass.getOffset()));\n+    }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Oop.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"}]}