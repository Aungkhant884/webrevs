{"files":[{"patch":"@@ -865,3 +865,13 @@\n-  while (p < top()) {\n-    if (block_is_obj(p)) {\n-      blk->do_object(cast_to_oop(p));\n+  if (G1CollectedHeap::heap()->collector_state()->in_full_gc()) {\n+    while (p < top()) {\n+      if (block_is_obj(p)) {\n+        blk->do_object(cast_to_oop(p));\n+      }\n+      p += block_size(p);\n+    }\n+  } else {\n+    while (p < top()) {\n+      if (block_is_obj(p)) {\n+        blk->do_object(cast_to_oop(p));\n+      }\n+      p += block_size_resolve(p);\n@@ -869,1 +879,0 @@\n-    p += block_size(p);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -187,0 +187,1 @@\n+  size_t block_size_resolve(const HeapWord* p) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -185,0 +185,14 @@\n+  if (block_is_obj(addr)) {\n+    oop obj = cast_to_oop(addr);\n+    assert(G1CollectedHeap::heap()->collector_state()->in_full_gc() || !obj->is_forwarded(), \"need to resolve object\");\n+    return obj->size();\n+  }\n+\n+  return block_size_using_bitmap(addr, G1CollectedHeap::heap()->concurrent_mark()->prev_mark_bitmap());\n+}\n+\n+inline size_t HeapRegion::block_size_resolve(const HeapWord *addr) const {\n+  if (addr == top()) {\n+    return pointer_delta(end(), addr);\n+  }\n+\n@@ -188,1 +202,2 @@\n-    if (obj->is_forwarded() && CompressedKlassPointers::is_null(obj->mark().narrow_klass())) {\n+    assert(!G1CollectedHeap::heap()->collector_state()->in_full_gc(), \"don't resolve in full GC\");\n+    if (obj->is_forwarded()) {\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8303027\n+ * @summary Test that we're failing with OOME and not with VM crash\n+ * @run main\/othervm -Xmx10g TestOOM\n+ *\/\n+public class TestOOM {\n+    public static void main(String[] args) {\n+        \/\/ Test that it exits with OOME and not with VM crash.\n+        try {\n+            LinkedInsanity previous = null;\n+            while (true) {\n+                previous = new LinkedInsanity(previous);\n+            }\n+        } catch (OutOfMemoryError e) {\n+            \/\/ That's expected\n+        }\n+    }\n+\n+    private static class LinkedInsanity {\n+        private final LinkedInsanity previous;\n+        private final int[] padding = new int[64000];\n+\n+        public LinkedInsanity(LinkedInsanity previous) {\n+            this.previous = previous;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/oom\/TestOOM.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"}]}