{"files":[{"patch":"@@ -39,2 +39,4 @@\n-#ifndef _LP64\n-  o->set_klass(Universe::boolArrayKlassObj());\n+#ifdef _LP64\n+  if (UseCompactObjectHeaders) {\n+    o->set_mark(Universe::boolArrayKlassObj()->prototype_header());\n+  } else\n@@ -42,0 +44,3 @@\n+  {\n+    o->set_klass(Universe::boolArrayKlassObj());\n+  }\n","filename":"test\/hotspot\/gtest\/oops\/test_typeArrayOop.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Xcomp -XX:-UseCompressedClassPointers -XX:CompileOnly=TestArrayCopyToFromObject.test TestArrayCopyToFromObject\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/TestArrayCopyToFromObject.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,5 @@\n+ *                                 -XX:+UseCompressedOops -XX:-UseCompressedClassPointers\n+ *                                 -XX:CompileCommand=dontinline,compiler.unsafe.OpaqueAccesses::test*\n+ *                                 compiler.unsafe.OpaqueAccesses\n+ * @run main\/bootclasspath\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n+ *                                 -XX:-TieredCompilation -Xbatch\n@@ -38,0 +43,5 @@\n+ *                                 compiler.unsafe.OpaqueAccesses\n+ * @run main\/bootclasspath\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions\n+ *                                 -XX:-TieredCompilation -Xbatch\n+ *                                 -XX:-UseCompressedOops -XX:-UseCompressedClassPointers\n+ *                                 -XX:CompileCommand=dontinline,compiler.unsafe.OpaqueAccesses::test*\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/OpaqueAccesses.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-        return Platform.is64bit() && !InputArguments.contains(\"-XX:-UseCompressedClassPointers\") \/*&& !InputArguments.contains(\"-XX:-UseCompactObjectHeaders\") *\/;\n+        return Platform.is64bit() && InputArguments.contains(\"-XX:+UseCompressedClassPointers\");\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/TestMetaspacePerfCounters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,2 @@\n- * @run driver gc.metaspace.TestSizeTransitions -XX:+UseSerialGC\n+ * @run driver gc.metaspace.TestSizeTransitions false -XX:+UseSerialGC\n+ * @run driver gc.metaspace.TestSizeTransitions true  -XX:+UseSerialGC\n@@ -45,1 +46,2 @@\n- * @run driver gc.metaspace.TestSizeTransitions -XX:+UseParallelGC\n+ * @run driver gc.metaspace.TestSizeTransitions false -XX:+UseParallelGC\n+ * @run driver gc.metaspace.TestSizeTransitions true  -XX:+UseParallelGC\n@@ -52,1 +54,2 @@\n- * @run driver gc.metaspace.TestSizeTransitions -XX:+UseG1GC\n+ * @run driver gc.metaspace.TestSizeTransitions false -XX:+UseG1GC\n+ * @run driver gc.metaspace.TestSizeTransitions true  -XX:+UseG1GC\n@@ -90,2 +93,2 @@\n-    \/\/ args: <gc-arg>\n-    if (args.length != 1) {\n+    \/\/ args: <use-coops> <gc-arg>\n+    if (args.length != 2) {\n@@ -96,1 +99,8 @@\n-    final String gcArg = args[0];\n+    final boolean useCompressedKlassPointers = Boolean.parseBoolean(args[0]);\n+    final String gcArg = args[1];\n+\n+    if (!hasCompressedKlassPointers && useCompressedKlassPointers) {\n+       \/\/ No need to run this configuration.\n+       System.out.println(\"Skipping test.\");\n+       return;\n+    }\n@@ -99,0 +109,3 @@\n+    if (hasCompressedKlassPointers) {\n+      jvmArgs.add(useCompressedKlassPointers ? \"-XX:+UseCompressedClassPointers\" : \"-XX:-UseCompressedClassPointers\");\n+    }\n@@ -114,1 +127,1 @@\n-    if (hasCompressedKlassPointers) {\n+    if (useCompressedKlassPointers) {\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/TestSizeTransitions.java","additions":20,"deletions":7,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -30,0 +30,11 @@\n+\n+\/* @test\n+ * @bug 8264008\n+ * @summary Run metaspace utils related gtests with compressed class pointers off\n+ * @requires vm.bits == 64\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.xml\n+ * @requires vm.flagless\n+ * @run main\/native GTestWrapper --gtest_filter=MetaspaceUtils* -XX:-UseCompressedClassPointers\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gtest\/MetaspaceUtilsGtests.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -56,3 +56,0 @@\n-    \/* Lilliput: cannot work due to drastically reduced narrow klass pointer range (atm 2g and that may get\n-       smaller still). There is an argument for improving CDS\/CCS reservation and make it more likely to run\n-       zero-based, but that logic has to be rethought.\n@@ -73,1 +70,0 @@\n-     *\/\n@@ -77,1 +73,0 @@\n-    \/* Lilliput: See comment above.\n@@ -92,1 +87,0 @@\n-    *\/\n@@ -97,2 +91,0 @@\n-    \/* Lilliput: I am not sure what the point of this test CCS reservation is independent from\n-       heap. See below the desparate attempts to predict heap reservation on PPC. Why do we even care?\n@@ -119,1 +111,0 @@\n-     *\/\n@@ -125,1 +116,0 @@\n-    \/* Lilliput: narrow klass pointer range drastically reduced. See comments under smallHeapTest().\n@@ -145,1 +135,0 @@\n-    *\/\n@@ -148,4 +137,0 @@\n-    \/* Lilliput: not sure what the point of this test is. The ability to have a class space if heap uses\n-       large pages? Why would that be a problem? Kept alive for now since it makes no problems even with\n-       smaller class pointers.\n-     *\/\n@@ -212,1 +197,0 @@\n-    \/* Lilliput: narrow klass pointer range drastically reduced. See comments under smallHeapTest().\n@@ -228,1 +212,0 @@\n-    *\/\n@@ -230,1 +213,0 @@\n-    \/* Lilliput: narrow klass pointer range drastically reduced. See comments under smallHeapTest().\n@@ -250,1 +232,0 @@\n-    *\/\n@@ -252,1 +233,0 @@\n-    \/* Lilliput: narrow klass pointer range drastically reduced. See comments under smallHeapTest().\n@@ -272,1 +252,0 @@\n-    *\/\n@@ -341,4 +320,4 @@\n-        \/\/ smallHeapTest();\n-        \/\/ smallHeapTestWith1G();\n-        \/\/ largeHeapTest();\n-        \/\/ largeHeapAbove32GTest();\n+        smallHeapTest();\n+        smallHeapTestWith1G();\n+        largeHeapTest();\n+        largeHeapAbove32GTest();\n@@ -356,3 +335,3 @@\n-            \/\/ smallHeapTestNoCoop();\n-            \/\/ smallHeapTestWith1GNoCoop();\n-            \/\/ largeHeapTestNoCoop();\n+            smallHeapTestNoCoop();\n+            smallHeapTestWith1GNoCoop();\n+            largeHeapTestNoCoop();\n","filename":"test\/hotspot\/jtreg\/runtime\/CompressedOops\/CompressedClassPointers.java","additions":7,"deletions":28,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -86,0 +86,8 @@\n+\n+\n+        pb = ProcessTools.createJavaProcessBuilder(\"-XX:-UseCompressedClassPointers\",\n+                                                   \"-XX:CompressedClassSpaceSize=1m\",\n+                                                   \"-version\");\n+        output = new OutputAnalyzer(pb.start());\n+        output.shouldContain(\"Setting CompressedClassSpaceSize has no effect when compressed class pointers are not used\")\n+              .shouldHaveExitValue(0);\n","filename":"test\/hotspot\/jtreg\/runtime\/CompressedOops\/CompressedClassSpaceSize.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+ * @run main\/othervm -XX:+UseCompressedOops -XX:-UseCompressedClassPointers FieldDensityTest\n","filename":"test\/hotspot\/jtreg\/runtime\/FieldLayout\/FieldDensityTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -70,0 +70,20 @@\n+\/*\n+ * @test id=test-64bit-noccs\n+ * @summary Test the VM.metaspace command\n+ * @requires vm.bits == \"64\"\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run main\/othervm -Dwithout-compressed-class-space -XX:MaxMetaspaceSize=201M -Xmx100M -XX:-UseCompressedOops -XX:-UseCompressedClassPointers PrintMetaspaceDcmd\n+ *\/\n+\n+ \/*\n+ * @test id=test-nospecified\n+ * @summary Test the VM.metaspace command\n+ * @requires vm.bits == \"64\"\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run main\/othervm -Dno-specified-flag -Xmx100M -XX:-UseCompressedOops -XX:-UseCompressedClassPointers PrintMetaspaceDcmd\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/PrintMetaspaceDcmd.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+        {\"-Xint\", \"-XX:+UseBiasedLocking\"},\n@@ -46,0 +47,1 @@\n+        {\"-Xcomp\", \"-XX:TieredStopAtLevel=1\", \"-XX:+UseBiasedLocking\"},\n@@ -48,0 +50,2 @@\n+        {\"-Xcomp\", \"-XX:-TieredCompilation\", \"-XX:+UseBiasedLocking\", \"-XX:+IgnoreUnrecognizedVMOptions\", \"-XX:+UseOptoBiasInlining\"},\n+        {\"-Xcomp\", \"-XX:-TieredCompilation\", \"-XX:+UseBiasedLocking\", \"-XX:+IgnoreUnrecognizedVMOptions\", \"-XX:-UseOptoBiasInlining\"}\n","filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/SyncOnValueBasedClassTest.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,0 +70,2 @@\n+        testTable.add( new TestVector(\"-XX:+UseCompressedClassPointers\", \"-XX:-UseCompressedClassPointers\",\n+           \"The saved state of UseCompressedOops and UseCompressedClassPointers is different from runtime, CDS will be disabled.\", 1) );\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/CommandLineFlagComboNegative.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+        public boolean useCompressedClassPointers;   \/\/ UseCompressedClassPointers\n@@ -51,1 +52,1 @@\n-        public ConfArg(boolean useCompressedOops, String msg, int code) {\n+        public ConfArg(boolean useCompressedOops, boolean useCompressedClassPointers, String msg, int code) {\n@@ -53,0 +54,1 @@\n+            this.useCompressedClassPointers = useCompressedClassPointers;\n@@ -67,1 +69,1 @@\n-            *          UseCompressedOops   Result\n+            *          UseCompressedOops   UseCompressedClassPointers  Result\n@@ -69,3 +71,5 @@\n-            *    dump: on\n-            *    test: on                  Pass\n-            *          off                 Fail\n+            *    dump: on                  on\n+            *    test: on                  on                          Pass\n+            *          on                  off                         Fail\n+            *          off                 on                          Fail\n+            *          off                 off                         Fail\n@@ -73,3 +77,15 @@\n-            *    dump: off\n-            *    test: off                 Pass\n-            *          on                  Fail\n+            *    dump: on                  off\n+            *    test: on                  off                         Pass\n+            *          on                  on                          Fail\n+            *          off                 on                          Pass\n+            *          off                 off                         Fail\n+            *    3.\n+            *    dump: off                 on\n+            *    test: off                 on                          Pass\n+            *          on                  on                          Fail\n+            *          on                  off                         Fail\n+            *    4.\n+            *    dump: off                 off\n+            *    test: off                 off                         Pass\n+            *          on                  on                          Fail\n+            *          on                  off                         Fail\n@@ -78,1 +94,1 @@\n-            if (dumpArg.useCompressedOops) {\n+            if (dumpArg.useCompressedOops && dumpArg.useCompressedClassPointers) {\n@@ -80,1 +96,1 @@\n-                    .add(new ConfArg(true, HELLO_STRING, PASS));\n+                    .add(new ConfArg(true, true, HELLO_STRING, PASS));\n@@ -82,1 +98,15 @@\n-                    .add(new ConfArg(false, EXEC_ABNORMAL_MSG, FAIL));\n+                    .add(new ConfArg(true, false, EXEC_ABNORMAL_MSG, FAIL));\n+                execArgs\n+                    .add(new ConfArg(false, true, EXEC_ABNORMAL_MSG, FAIL));\n+                execArgs\n+                    .add(new ConfArg(false, false, EXEC_ABNORMAL_MSG, FAIL));\n+\n+            }  else if(dumpArg.useCompressedOops && !dumpArg.useCompressedClassPointers) {\n+                execArgs\n+                    .add(new ConfArg(true, false, HELLO_STRING, PASS));\n+                execArgs\n+                    .add(new ConfArg(true, true, EXEC_ABNORMAL_MSG, FAIL));\n+                execArgs\n+                    .add(new ConfArg(false, true, EXEC_ABNORMAL_MSG, FAIL));\n+                execArgs\n+                    .add(new ConfArg(false, false, EXEC_ABNORMAL_MSG, FAIL));\n@@ -84,1 +114,3 @@\n-            } else if (!dumpArg.useCompressedOops) {\n+            } else if (!dumpArg.useCompressedOops && dumpArg.useCompressedClassPointers) {\n+                execArgs\n+                    .add(new ConfArg(false, true, HELLO_STRING, PASS));\n@@ -86,1 +118,1 @@\n-                    .add(new ConfArg(false, HELLO_STRING, PASS));\n+                    .add(new ConfArg(true, true, EXEC_ABNORMAL_MSG, FAIL));\n@@ -88,1 +120,8 @@\n-                    .add(new ConfArg(true, EXEC_ABNORMAL_MSG, FAIL));\n+                    .add(new ConfArg(true, false, EXEC_ABNORMAL_MSG, FAIL));\n+            } else if (!dumpArg.useCompressedOops && !dumpArg.useCompressedClassPointers) {\n+                execArgs\n+                    .add(new ConfArg(false, false, HELLO_STRING, PASS));\n+                execArgs\n+                    .add(new ConfArg(true, true, EXEC_ABNORMAL_MSG, FAIL));\n+                execArgs\n+                    .add(new ConfArg(true, false, EXEC_ABNORMAL_MSG, FAIL));\n@@ -98,0 +137,5 @@\n+    public static String getCompressedClassPointersArg(boolean on) {\n+        if (on) return \"-XX:+UseCompressedClassPointers\";\n+        else    return \"-XX:-UseCompressedClassPointers\";\n+    }\n+\n@@ -103,1 +147,5 @@\n-            .add(new RunArg(new ConfArg(true, null, PASS)));\n+            .add(new RunArg(new ConfArg(true, true, null, PASS)));\n+        runList\n+            .add(new RunArg(new ConfArg(true, false, null, PASS)));\n+        runList\n+            .add(new RunArg(new ConfArg(false, true, null, PASS)));\n@@ -105,1 +153,1 @@\n-            .add(new RunArg(new ConfArg(false, null, PASS)));\n+            .add(new RunArg(new ConfArg(false, false, null, PASS)));\n@@ -117,0 +165,1 @@\n+                      getCompressedClassPointersArg(t.dumpArg.useCompressedClassPointers),\n@@ -129,0 +178,1 @@\n+                                      getCompressedClassPointersArg(c.useCompressedClassPointers),\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestCombinedCompressedFlags.java","additions":66,"deletions":16,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -75,1 +75,13 @@\n-         System.out.println(\"3. Run with -UseCompressedOops +UseCompressedClassPointers\");\n+         System.out.println(\"3. Run with -UseCompressedOops -UseCompressedClassPointers\");\n+         out = TestCommon\n+                   .exec(helloJar,\n+                         \"-XX:+UseSerialGC\",\n+                         \"-XX:-UseCompressedOops\",\n+                         \"-XX:-UseCompressedClassPointers\",\n+                         \"-Xlog:cds\",\n+                         \"Hello\");\n+         out.shouldContain(UNABLE_TO_USE_ARCHIVE);\n+         out.shouldContain(ERR_MSG);\n+         out.shouldHaveExitValue(1);\n+\n+         System.out.println(\"4. Run with -UseCompressedOops +UseCompressedClassPointers\");\n@@ -86,1 +98,13 @@\n-         System.out.println(\"4. Run with +UseCompressedOops +UseCompressedClassPointers\");\n+         System.out.println(\"5. Run with +UseCompressedOops -UseCompressedClassPointers\");\n+         out = TestCommon\n+                   .exec(helloJar,\n+                         \"-XX:+UseSerialGC\",\n+                         \"-XX:+UseCompressedOops\",\n+                         \"-XX:-UseCompressedClassPointers\",\n+                         \"-Xlog:cds\",\n+                         \"Hello\");\n+         out.shouldContain(UNABLE_TO_USE_ARCHIVE);\n+         out.shouldContain(ERR_MSG);\n+         out.shouldHaveExitValue(1);\n+\n+         System.out.println(\"6. Run with +UseCompressedOops +UseCompressedClassPointers\");\n@@ -98,1 +122,12 @@\n-         System.out.println(\"5. Run with ZGC\");\n+         System.out.println(\"7. Dump with -UseCompressedOops -UseCompressedClassPointers\");\n+         out = TestCommon\n+                   .dump(helloJar,\n+                         new String[] {\"Hello\"},\n+                         \"-XX:+UseSerialGC\",\n+                         \"-XX:-UseCompressedOops\",\n+                         \"-XX:+UseCompressedClassPointers\",\n+                         \"-Xlog:cds\");\n+         out.shouldContain(\"Dumping shared data to file:\");\n+         out.shouldHaveExitValue(0);\n+\n+         System.out.println(\"8. Run with ZGC\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestZGCWithCDS.java","additions":38,"deletions":3,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -316,0 +316,3 @@\n+    static final boolean COMPACT_HEADERS = WhiteBox.getWhiteBox().getBooleanVMFlag(\"UseCompactObjectHeaders\");\n+    static final int HEADER_SIZE = COMPACT_HEADERS ? 8 : (Platform.is64bit() ? 16 : 8);\n+\n@@ -375,1 +378,1 @@\n-        long expected = roundUp(8, OBJ_ALIGN);\n+        long expected = roundUp(HEADER_SIZE, OBJ_ALIGN);\n@@ -382,1 +385,1 @@\n-        long expected = roundUp(8, OBJ_ALIGN);\n+        long expected = roundUp(HEADER_SIZE, OBJ_ALIGN);\n@@ -392,1 +395,1 @@\n-        long expected = roundUp(8, OBJ_ALIGN);\n+        long expected = roundUp(HEADER_SIZE, OBJ_ALIGN);\n","filename":"test\/jdk\/java\/lang\/instrument\/GetObjectSizeIntrinsicsTest.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -73,2 +73,1 @@\n-        \/\/ length will be in klass-gap on 64 bits, extra field on 32 bits.\n-        int objectHeaderSize = bytesPerWord * (runsOn32Bit ? 3 : 2);\n+        int objectHeaderSize = bytesPerWord * 3; \/\/ length will be aligned on 64 bits\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/objectcount\/ObjectCountEventVerifier.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}