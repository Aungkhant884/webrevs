{"files":[{"patch":"@@ -3966,1 +3966,0 @@\n-      Label L;\n@@ -3968,5 +3967,1 @@\n-      __ cmp(disp_hdr, (unsigned char)(intptr_t) ANONYMOUS_OWNER);\n-      __ br(Assembler::NE, L);\n-      __ tst(oop, oop); \/\/ Indicate failure at cont -- dive into slow-path.\n-      __ b(cont);\n-      __ bind(L);\n+      __ tbnz(disp_hdr, (unsigned char)(intptr_t) ANONYMOUS_OWNER, cont);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -707,6 +707,2 @@\n-    Label L;\n-    cmpptr(Address(tmpReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(owner)), (int32_t) (intptr_t) ANONYMOUS_OWNER);\n-    jccb(Assembler::notEqual, L);\n-    testptr(objReg, objReg); \/\/ Clear ZF to indicate failure at DONE_LABEL.\n-    jmp(DONE_LABEL);\n-    bind(L);\n+    testb(Address(tmpReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(owner)), (int) (intptr_t) ANONYMOUS_OWNER);\n+    jcc(Assembler::notEqual, DONE_LABEL);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -148,2 +148,9 @@\n-  \/\/ Used by async deflation as a marker in the _owner field:\n-  #define DEFLATER_MARKER reinterpret_cast<void*>(-1)\n+  \/\/ Used by async deflation as a marker in the _owner field.\n+  \/\/ Note that the choice of the two markers is peculiar:\n+  \/\/ - They need to represent values that cannot be pointers. In particular,\n+  \/\/   we achieve this by using the lowest two bits\n+  \/\/ - ANONYMOUS_OWNER should be a small value, it is used in generated code\n+  \/\/   and small values encode much better\n+  \/\/ - We test for anonymous owner by testing for the lowest bit, therefore\n+  \/\/   DEFLATER_MARKER must *not* have that bit set.\n+  #define DEFLATER_MARKER reinterpret_cast<void*>(2)\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"}]}