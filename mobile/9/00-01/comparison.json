{"files":[{"patch":"@@ -2,1 +2,1 @@\n-project=jdk\n+project=mobile\n","filename":".jcheck\/conf","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -121,2 +121,2 @@\n-ifeq ($(call isTargetOs, macosx), true)\n-  # exclude all X11 on Mac.\n+ifeq ($(call isTargetOs, macosx ios), true)\n+  # exclude all X11 on Mac and iOS.\n","filename":"make\/CompileJavaModules.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,2 @@\n-if ! echo $* | grep '^aarch64-' >\/dev\/null ; then\n+# or that ends with \"-ios\" or \"-android\"\n+if ! echo $* | egrep \"^aarch64-|-ios|-android\" >\/dev\/null ; then\n@@ -50,0 +51,8 @@\n+        *-ios* )\n+            echo $1\n+            exit\n+            ;;\n+        *-android* )\n+            echo $1\n+            exit\n+            ;;\n","filename":"make\/autoconf\/build-aux\/config.sub","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -375,0 +375,4 @@\n+  elif test \"x$OPENJDK_TARGET_OS\" = xios; then\n+    CFLAGS_OS_DEF_JDK=\"-DMACOSX -D_ALLBSD_SOURCE -DTARGET_IOS -D_DARWIN_UNLIMITED_SELECT\"\n+  elif test \"x$OPENJDK_TARGET_OS\" = xandroid; then\n+    CFLAGS_OS_DEF_JDK=\"-target aarch64-linux-android -D__USE_BSD\"\n@@ -401,0 +405,3 @@\n+  if test \"x$OPENJDK_TARGET_OS\" = xios; then\n+    ALWAYS_CFLAGS_JDK=\"$ALWAYS_CFLAGS_JDK -I${TOPDIR}\/src\/java.base\/macosx\/native\/libjava\"\n+  fi\n","filename":"make\/autoconf\/flags-cflags.m4","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -260,1 +260,5 @@\n-  GLOBAL_CPPFLAGS=\"$SYSROOT_CFLAGS\"\n+  if test \"x$OPENJDK_TARGET_OS\" = xios; then\n+    GLOBAL_CPPFLAGS=\"$MACHINE_FLAG $USER_CFLAGS $SYSROOT_CFLAGS\"\n+  else\n+    GLOBAL_CPPFLAGS=\"$SYSROOT_CFLAGS\"\n+  fi\n","filename":"make\/autoconf\/flags.m4","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -106,1 +106,3 @@\n-      test \"x$OPENJDK_TARGET_OS\" != \"xaix\"; then\n+      test \"x$OPENJDK_TARGET_OS\" != \"xaix\" && \\\n+      test \"x$OPENJDK_TARGET_OS\" != \"xandroid\" && \\\n+      test \"x$OPENJDK_TARGET_OS\" != \"xios\"; then\n","filename":"make\/autoconf\/lib-freetype.m4","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,2 +43,2 @@\n-  if test \"x$OPENJDK_TARGET_OS\" = xwindows || test \"x$OPENJDK_TARGET_OS\" = xmacosx; then\n-    # No X11 support on windows or macosx\n+  if test \"x$OPENJDK_TARGET_OS\" = xwindows || test \"x$OPENJDK_TARGET_OS\" = xmacosx || test \"x$OPENJDK_TARGET_OS\" = xios || test \"x$OPENJDK_TARGET_OS\" = xandroid; then\n+    # No X11 support on windows, macosx, ios or android\n@@ -53,2 +53,2 @@\n-  if test \"x$OPENJDK_TARGET_OS\" = xwindows || test \"x$OPENJDK_TARGET_OS\" = xmacosx; then\n-    # No fontconfig support on windows or macosx\n+  if test \"x$OPENJDK_TARGET_OS\" = xwindows || test \"x$OPENJDK_TARGET_OS\" = xmacosx || test \"x$OPENJDK_TARGET_OS\" = xios || test \"x$OPENJDK_TARGET_OS\" = xandroid; then\n+    # No fontconfig support on windows, macosx, ios or android\n","filename":"make\/autoconf\/libraries.m4","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -193,0 +193,4 @@\n+    *android*)\n+      VAR_OS=android\n+      VAR_OS_TYPE=unix\n+      ;;\n@@ -197,0 +201,4 @@\n+    *ios*)\n+      VAR_OS=ios\n+      VAR_OS_TYPE=unix\n+      ;;\n","filename":"make\/autoconf\/platform.m4","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-    if test \"x$OPENJDK_TARGET_OS\" = xmacosx; then\n+    if test \"x$OPENJDK_TARGET_OS\" = \"xmacosx\" || test \"x$OPENJDK_TARGET_OS\" = \"xios\" ; then\n@@ -225,1 +225,1 @@\n-  if test \"x$OPENJDK_TARGET_OS\" = xmacosx; then\n+  if test \"x$OPENJDK_TARGET_OS\" = \"xmacosx\" || test \"x$OPENJDK_TARGET_OS\" = \"xios\" ; then\n@@ -930,5 +930,7 @@\n-    TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CC, [BuildC])\n-    TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CXX, [BuildC++])\n-    TOOLCHAIN_PREPARE_FOR_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_], [build ])\n-    TOOLCHAIN_EXTRACT_LD_VERSION(BUILD_LD, [build linker])\n-    TOOLCHAIN_PREPARE_FOR_LD_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_])\n+    if test \"x$OPENJDK_TARGET_OS\" != \"xandroid\"; then\n+      TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CC, [BuildC])\n+      TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CXX, [BuildC++])\n+      TOOLCHAIN_PREPARE_FOR_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_], [build ])\n+      TOOLCHAIN_EXTRACT_LD_VERSION(BUILD_LD, [build linker])\n+      TOOLCHAIN_PREPARE_FOR_LD_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_])\n+    fi\n","filename":"make\/autoconf\/toolchain.m4","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -44,0 +44,12 @@\n+ifeq ($(OPENJDK_TARGET_OS), ios)\n+  FindSrcDirsForLib += \\\n+    $(call uniq, $(wildcard \\\n+        $(TOPDIR)\/src\/$(strip $1)\/macosx\/native\/lib$(strip $2)))\n+endif\n+\n+ifeq ($(OPENJDK_TARGET_OS), android)\n+  FindSrcDirsForLib += \\\n+    $(call uniq, $(wildcard \\\n+        $(TOPDIR)\/src\/$(strip $1)\/linux\/native\/lib$(strip $2)))\n+endif\n+\n","filename":"make\/common\/JdkNativeCompilation.gmk","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -244,0 +244,8 @@\n+ifeq ($(OPENJDK_TARGET_OS), ios)\n+  SRC_SUBDIRS += macosx\/classes\n+endif\n+\n+ifeq ($(OPENJDK_TARGET_OS), android)\n+  SRC_SUBDIRS += linux\/classes\n+endif\n+\n","filename":"make\/common\/Modules.gmk","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -51,0 +51,5 @@\n+\n+ifeq ($(call isTargetOs, ios), true)\n+  LAUNCHER_CFLAGS += -I$(TOPDIR)\/src\/java.base\/macosx\/native\/libjli\n+fi\n+\n","filename":"make\/common\/modules\/LauncherCommon.gmk","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-ifeq ($(call isTargetOs, macosx), true)\n+ifeq ($(call isTargetOs, macosx ios), true)\n@@ -169,1 +169,1 @@\n-ifeq ($(call isTargetOs, macosx), true)\n+ifeq ($(call isTargetOs, macosx ios), true)\n@@ -205,0 +205,1 @@\n+    CFLAGS_ios := -I$(TOPDIR)\/src\/java.base\/macosx\/native\/libjli, \\\n","filename":"make\/modules\/java.base\/lib\/CoreLibraries.gmk","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-ifeq ($(call isTargetOs, linux macosx), true)\n+ifeq ($(call isTargetOs, linux macosx ios android), true)\n","filename":"make\/modules\/jdk.net\/Lib.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#ifndef TARGET_IOS\n@@ -35,0 +36,12 @@\n+#else\n+#include <stdlib.h>\n+#include <string.h>\n+#include <sys\/param.h>\n+#include <objc\/runtime.h>\n+#include <objc\/objc.h>\n+#include <objc\/message.h>\n+#include <CoreFoundation\/CoreFoundation.h>\n+#include <CoreFoundation\/CFlocale.h>\n+\n+#endif\n+\n@@ -37,0 +50,2 @@\n+#ifndef TARGET_IOS\n+\n@@ -476,0 +491,28 @@\n+#else\n+#define LOCALEIDLENGTH  128\n+char *getPosixLocale(int cat) {\n+    char *lc = setlocale(cat, NULL);\n+    if ((lc == NULL) || (strcmp(lc, \"C\") == 0)) {\n+        lc = getenv(\"LANG\");\n+    }\n+    if (lc == NULL) return NULL;\n+    return strdup(lc);\n+  }\n+\n+char *getMacOSXLocale(int cat) {\n+    char localeString[LOCALEIDLENGTH];\n+    \/\/ Get current user locale.\n+    CFLocaleRef loc = CFLocaleCopyCurrent();\n+    char *localstr;\n+    if (CFStringGetCString(CFLocaleGetIdentifier(loc),\n+                           localeString, LOCALEIDLENGTH,\n+                           kCFStringEncodingUTF8))\n+      localstr = strdup(localeString);\n+    else\n+      localstr =  NULL;\n+\n+    CFRelease(loc);\n+    return (localstr);\n+}\n+\n+#endif\n","filename":"src\/java.base\/macosx\/native\/libjava\/java_props_macosx.c","additions":43,"deletions":0,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#ifndef TARGET_IOS\n@@ -46,0 +47,1 @@\n+#endif\n@@ -213,0 +215,2 @@\n+#elif defined(__arm64__)\n+        preferredJVM = \"zero\";\n@@ -273,0 +277,3 @@\n+#ifdef TARGET_IOS\n+static jboolean awtLoaded = 0;\n+#else\n@@ -274,0 +281,1 @@\n+#endif\n@@ -281,0 +289,3 @@\n+#ifdef TARGET_IOS\n+    awtLoaded = 1;\n+#else\n@@ -282,0 +293,1 @@\n+#endif\n@@ -310,0 +322,1 @@\n+#ifndef TARGET_IOS\n@@ -324,0 +337,1 @@\n+#endif\n@@ -354,0 +368,1 @@\n+#ifndef TARGET_IOS\n@@ -355,0 +370,1 @@\n+#endif\n@@ -888,0 +904,1 @@\n+#ifndef TARGET_IOS\n@@ -918,0 +935,3 @@\n+#else\n+    return ContinueInNewThread(ifn, threadStackSize, argc, argv, mode, what, ret);\n+#endif\n","filename":"src\/java.base\/macosx\/native\/libjli\/java_md_macosx.m","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#ifndef TARGET_IOS\n@@ -29,0 +30,1 @@\n+#endif\n","filename":"src\/java.base\/unix\/native\/libnet\/NetworkInterface.c","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+#ifdef ANDROID\n+#include <netinet\/in.h>\n+#endif\n","filename":"src\/java.base\/unix\/native\/libnet\/net_util_md.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}