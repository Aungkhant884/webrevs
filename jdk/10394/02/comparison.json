{"files":[{"patch":"@@ -34,0 +34,1 @@\n+import java.util.Properties;\n@@ -35,0 +36,1 @@\n+\n@@ -72,1 +74,3 @@\n-    private static class JavaSecurityAccessImpl implements JavaSecurityAccess {\n+    static class JavaSecurityAccessImpl implements JavaSecurityAccess {\n+        \/* cache a copy for recording purposes *\/\n+        static Properties initialSecurityProperties;\n@@ -130,0 +134,5 @@\n+\n+        @Override\n+        public Properties getInitialProperties() {\n+            return initialSecurityProperties;\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/security\/ProtectionDomain.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -107,0 +107,8 @@\n+        ProtectionDomain.JavaSecurityAccessImpl.initialSecurityProperties = (Properties) props.clone();\n+        if (sdebug != null) {\n+            for (Map.Entry<Object, Object> entry : props.entrySet()) {\n+                sdebug.println(\"Initial security property: \" + entry.getKey() + \"=\" +\n+                    entry.getValue());\n+            }\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/security\/Security.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.Properties;\n@@ -53,0 +54,2 @@\n+\n+    Properties getInitialProperties();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaSecurityAccess.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -168,0 +168,1 @@\n+        jdk.jfr,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.events;\n+\n+import jdk.jfr.*;\n+import jdk.jfr.internal.MirrorEvent;\n+\n+@Category({\"Java Development Kit\", \"Security\"})\n+@Label(\"Initial Security Property\")\n+@Name(\"jdk.InitialSecurityProperty\")\n+@Description(\"Initial Security Properties\")\n+public final class InitialSecurityPropertyEvent extends AbstractJDKEvent {\n+    @Label(\"Key\")\n+    public String key;\n+\n+    @Label(\"Value\")\n+    public String value;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/InitialSecurityPropertyEvent.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -30,0 +30,2 @@\n+import java.util.Map;\n+import java.util.Properties;\n@@ -31,0 +33,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -47,0 +50,1 @@\n+import jdk.jfr.events.InitialSecurityPropertyEvent;\n@@ -110,1 +114,2 @@\n-        DirectBufferStatisticsEvent.class\n+        DirectBufferStatisticsEvent.class,\n+        InitialSecurityPropertyEvent.class,\n@@ -133,0 +138,1 @@\n+    private static final Runnable emitInitialSecurityProperties = JDKEvents::emitInitialSecurityProperties;\n@@ -149,0 +155,1 @@\n+                RequestEngine.addTrustedJDKHook(InitialSecurityPropertyEvent.class, emitInitialSecurityProperties);\n@@ -291,0 +298,1 @@\n+        RequestEngine.removeHook(emitInitialSecurityProperties);\n@@ -303,0 +311,12 @@\n+\n+    private static void emitInitialSecurityProperties() {\n+        Properties p = SharedSecrets.getJavaSecurityAccess().getInitialProperties();\n+        if (p != null) {\n+            for (Map.Entry<Object, Object> entry : p.entrySet()) {\n+                InitialSecurityPropertyEvent e = new InitialSecurityPropertyEvent();\n+                e.key = (String) entry.getKey();\n+                e.value = (String) entry.getValue();\n+                e.commit();\n+            }\n+        }\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/JDKEvents.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -712,0 +712,5 @@\n+    <event name=\"jdk.InitialSecurityProperty\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"period\">beginChunk<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -712,0 +712,5 @@\n+    <event name=\"jdk.InitialSecurityProperty\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"period\">beginChunk<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @bug 8155246 8292297\n+ * @bug 8155246 8292297 8292177\n@@ -45,0 +45,8 @@\n+    private static final String EXPECTED_DEBUG_OUTPUT =\n+        \"Initial security property: crypto.policy=unlimited\";\n+\n+    private static final String UNEXPECTED_DEBUG_OUTPUT =\n+            \"Initial security property: postInitTest=shouldNotRecord\";\n+\n+    private static boolean overrideDetected = false;\n+\n@@ -55,0 +63,1 @@\n+            Security.setProperty(\"postInitTest\", \"shouldNotRecord\");\n@@ -102,0 +111,4 @@\n+\n+            if (!overrideDetected) {\n+                throw new RuntimeException(\"Override scenario not seen\");\n+            }\n@@ -108,1 +121,16 @@\n-        oa.shouldHaveExitValue(exitCode).shouldContain(output);\n+        oa.shouldHaveExitValue(exitCode)\n+                .shouldContain(output);\n+\n+        \/\/ extra checks on debug output\n+        if (exitCode != 1) {\n+            if (oa.getStderr().contains(\"overriding other security properties files!\")) {\n+                overrideDetected = true;\n+                \/\/ master file is not in use - only provider properties are set in custom file\n+                oa.shouldContain(\"security.provider.2=SunRsaSign\")\n+                        .shouldNotContain(EXPECTED_DEBUG_OUTPUT)\n+                        .shouldNotContain(UNEXPECTED_DEBUG_OUTPUT);\n+            } else{\n+                oa.shouldContain(EXPECTED_DEBUG_OUTPUT)\n+                        .shouldNotContain(UNEXPECTED_DEBUG_OUTPUT);\n+            }\n+        }\n","filename":"test\/jdk\/java\/security\/Security\/ConfigFileTest.java","additions":30,"deletions":2,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.security;\n+\n+import jdk.internal.access.SharedSecrets;\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+\n+import java.security.Security;\n+import java.util.List;\n+import java.util.Properties;\n+\n+\/*\n+ * @test\n+ * @bug 8292177\n+ * @summary InitialSecurityProperty JFR event\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.access\n+ * @run main\/othervm jdk.jfr.event.security.TestInitialSecurityPropertyEvent\n+ *\/\n+public class TestInitialSecurityPropertyEvent {\n+\n+    private static final String SEC_KEY = \"security.overridePropertiesFile\";\n+    public static void main(String[] args) throws Exception {\n+        try (Recording recording = new Recording()) {\n+            recording.enable(EventNames.InitialSecurityProperty)\n+                    .with(\"period\", \"beginChunk\");\n+            recording.start();\n+            \/\/ this property edit should not be recorded\n+            Security.setProperty(SEC_KEY, \"false\");\n+            recording.stop();\n+\n+            Properties p = SharedSecrets.getJavaSecurityAccess().getInitialProperties();\n+            List<RecordedEvent> events = Events.fromRecording(recording);\n+            if (events.size() == 0) {\n+                throw new Exception(\"No security properties - Security class may not have loaded ?\");\n+            }\n+            Asserts.assertEquals(events.size(), p.size(), \"Incorrect number of events\");\n+            assertEvent(events, SEC_KEY, \"true\");\n+        }\n+    }\n+\n+    private static void assertEvent(List<RecordedEvent> events, String key, String origValue) throws Exception {\n+        for (RecordedEvent e : events) {\n+            if (e.getString(\"key\").equals(key)) {\n+                Events.assertField(e, \"value\").equal(origValue);\n+                return;\n+            }\n+        }\n+        System.out.println(events);\n+        throw new Exception(\"Incorrect value for \" + key + \" property recorded\");\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/security\/TestInitialSecurityPropertyEvent.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -195,0 +195,1 @@\n+    public final static String InitialSecurityProperty = PREFIX + \"InitialSecurityProperty\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}