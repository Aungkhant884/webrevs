{"files":[{"patch":"@@ -2130,0 +2130,4 @@\n+    if (length == 0) {\n+        \/\/indicate the PermittedSubclasses attribute is not present by returning null:\n+        return NULL;\n+    }\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4396,1 +4396,1 @@\n-     * an empty array is returned.\n+     * null is returned.\n@@ -4409,1 +4409,2 @@\n-     * @return an array of {@code Class} objects of the permitted subclasses of this class or interface\n+     * @return an array of {@code Class} objects of the permitted subclasses of this class or interface,\n+     *         or null if this class or interface is not sealed\n@@ -4426,1 +4427,4 @@\n-        if (isArray() || isPrimitive() || (subClasses = getPermittedSubclasses0()).length == 0) {\n+        if (isArray() || isPrimitive() || (subClasses = getPermittedSubclasses0()) == null) {\n+            return null;\n+        }\n+        if (subClasses.length == 0) {\n@@ -4429,6 +4433,4 @@\n-        if (subClasses.length > 0) {\n-            if (Arrays.stream(subClasses).anyMatch(c -> !isDirectSubType(c))) {\n-                subClasses = Arrays.stream(subClasses)\n-                                   .filter(this::isDirectSubType)\n-                                   .toArray(s -> new Class<?>[s]);\n-            }\n+        if (Arrays.stream(subClasses).anyMatch(c -> !isDirectSubType(c))) {\n+            subClasses = Arrays.stream(subClasses)\n+                               .filter(this::isDirectSubType)\n+                               .toArray(s -> new Class<?>[s]);\n@@ -4487,1 +4489,1 @@\n-        return getPermittedSubclasses().length != 0;\n+        return getPermittedSubclasses() != null;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -623,0 +623,70 @@\n+\n+class SealedButNoLoadableSubclasses {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  60; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"SealedButNoLoadableSubclasses\"; \/\/ #8\n+    Utf8 \"Code\"; \/\/ #9\n+    Utf8 \"LineNumberTable\"; \/\/ #10\n+    Utf8 \"SourceFile\"; \/\/ #11\n+    Utf8 \"SealedButNotLoadableSubclasses.java\"; \/\/ #12\n+    Utf8 \"PermittedSubclasses\"; \/\/ #13\n+    class #15; \/\/ #14\n+    Utf8 \"SealedButNoLoadableSubclassesSubType\"; \/\/ #15\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#9) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#10) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#11) { \/\/ SourceFile\n+      #12;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#13) { \/\/ PermittedSubclasses\n+      0x0001000E;\n+    } \/\/ end PermittedSubclasses\n+  } \/\/ Attributes\n+} \/\/ end class SealedButNoLoadableSubclasses\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/GetPermittedSubclasses.jcod","additions":70,"deletions":0,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -56,4 +56,9 @@\n-        if (permitted.length != expected.length) {\n-            throw new RuntimeException(\n-                \"Unexpected number of permitted subclasses for: \" + c.toString() + \"(\" + java.util.Arrays.asList(permitted));\n-        }\n+        if (expected != null) {\n+            if (permitted == null) {\n+                throw new RuntimeException(\"Unexpected null permitted subclasses: \" + c.toString());\n+            }\n+\n+            if (permitted.length != expected.length) {\n+                throw new RuntimeException(\n+                    \"Unexpected number of permitted subclasses for: \" + c.toString() + \"(\" + java.util.Arrays.asList(permitted));\n+            }\n@@ -61,1 +66,0 @@\n-        if (permitted.length > 0) {\n@@ -90,0 +94,3 @@\n+            if (permitted != null) {\n+                throw new RuntimeException(\"Unexpected non-null permitted subclasses: \" + c.toString());\n+            }\n@@ -111,2 +118,2 @@\n-        testSealedInfo(Final4.class, new String[] { });\n-        testSealedInfo(NotSealed.class, new String[] { });\n+        testSealedInfo(Final4.class, null);\n+        testSealedInfo(NotSealed.class, null);\n@@ -115,1 +122,1 @@\n-        testSealedInfo(OldClassFile.class, new String[] { });\n+        testSealedInfo(OldClassFile.class, null);\n@@ -144,0 +151,8 @@\n+\n+        \/\/SealedButNoLoadableSubclasses has a PermittedSubclasses attribute, but the class specified there is not loadable\n+        \/\/isSealed() should return null, getPermittedSubclasses() should return an empty array.\n+        testSealedInfo(SealedButNoLoadableSubclasses.class, new String[] {});\n+\n+        \/\/array class objects and primitive type class objects are final, and hence not sealed:\n+        testSealedInfo(Object[].class, null);\n+        testSealedInfo(int.class, null);\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/GetPermittedSubclassesTest.java","additions":23,"deletions":8,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -113,2 +113,1 @@\n-        assertTrue(cls.getPermittedSubclasses() != null);\n-        assertTrue(cls.getPermittedSubclasses().length == 0);\n+        assertNull(cls.getPermittedSubclasses());\n@@ -131,2 +130,1 @@\n-        assertTrue(cls.getPermittedSubclasses() != null);\n-        assertTrue(cls.getPermittedSubclasses().length == 0);\n+        assertNull(cls.getPermittedSubclasses());\n","filename":"test\/jdk\/java\/lang\/reflect\/sealed_classes\/SealedClassesReflectionTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -636,1 +636,1 @@\n-            Assert.check(c.getPermittedSubclasses().length == 0);\n+            Assert.check(c.getPermittedSubclasses() == null);\n","filename":"test\/langtools\/tools\/javac\/sealed\/SealedCompilationTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}