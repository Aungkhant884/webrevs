{"files":[{"patch":"@@ -2130,4 +2130,0 @@\n-    if (length == 0) {\n-        \/\/indicate the PermittedSubclasses attribute is not present by returning null:\n-        return NULL;\n-    }\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3035,2 +3035,1 @@\n-                                    final ClassLoader ccl, boolean checkProxyInterfaces,\n-                                    Class<?>[] subClasses) {\n+                                    final ClassLoader ccl, Class<?>[] subClasses) {\n@@ -4396,1 +4395,1 @@\n-     * null is returned.\n+     * an empty array is returned.\n@@ -4409,2 +4408,1 @@\n-     * @return an array of {@code Class} objects of the permitted subclasses of this class or interface,\n-     *         or null if this class or interface is not sealed\n+     * @return an array of {@code Class} objects of the permitted subclasses of this class or interface\n@@ -4427,4 +4425,1 @@\n-        if (isArray() || isPrimitive() || (subClasses = getPermittedSubclasses0()) == null) {\n-            return null;\n-        }\n-        if (subClasses.length == 0) {\n+        if (isArray() || isPrimitive() || (subClasses = getPermittedSubclasses0()).length == 0) {\n@@ -4433,4 +4428,6 @@\n-        if (Arrays.stream(subClasses).anyMatch(c -> !isDirectSubType(c))) {\n-            subClasses = Arrays.stream(subClasses)\n-                               .filter(this::isDirectSubType)\n-                               .toArray(s -> new Class<?>[s]);\n+        if (subClasses.length > 0) {\n+            if (Arrays.stream(subClasses).anyMatch(c -> !isDirectSubType(c))) {\n+                subClasses = Arrays.stream(subClasses)\n+                                   .filter(this::isDirectSubType)\n+                                   .toArray(s -> new Class<?>[s]);\n+            }\n@@ -4444,1 +4441,0 @@\n-                                             true,\n@@ -4489,1 +4485,1 @@\n-        return getPermittedSubclasses() != null;\n+        return getPermittedSubclasses().length != 0;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":11,"deletions":15,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -623,70 +623,0 @@\n-\n-class SealedButNoLoadableSubclasses {\n-  0xCAFEBABE;\n-  65535; \/\/ minor version\n-  60; \/\/ version\n-  [] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    Method #2 #3; \/\/ #1\n-    class #4; \/\/ #2\n-    NameAndType #5 #6; \/\/ #3\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4\n-    Utf8 \"<init>\"; \/\/ #5\n-    Utf8 \"()V\"; \/\/ #6\n-    class #8; \/\/ #7\n-    Utf8 \"SealedButNoLoadableSubclasses\"; \/\/ #8\n-    Utf8 \"Code\"; \/\/ #9\n-    Utf8 \"LineNumberTable\"; \/\/ #10\n-    Utf8 \"SourceFile\"; \/\/ #11\n-    Utf8 \"SealedButNotLoadableSubclasses.java\"; \/\/ #12\n-    Utf8 \"PermittedSubclasses\"; \/\/ #13\n-    class #15; \/\/ #14\n-    Utf8 \"SealedButNoLoadableSubclassesSubType\"; \/\/ #15\n-  } \/\/ Constant Pool\n-\n-  0x0020; \/\/ access\n-  #7;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n-\n-  [] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [] { \/\/ Fields\n-  } \/\/ Fields\n-\n-  [] { \/\/ Methods\n-    {  \/\/ method\n-      0x0000; \/\/ access\n-      #5; \/\/ name_index\n-      #6; \/\/ descriptor_index\n-      [] { \/\/ Attributes\n-        Attr(#9) { \/\/ Code\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[]{\n-            0x2AB70001B1;\n-          }\n-          [] { \/\/ Traps\n-          } \/\/ end Traps\n-          [] { \/\/ Attributes\n-            Attr(#10) { \/\/ LineNumberTable\n-              [] { \/\/ line_number_table\n-                0  1;\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [] { \/\/ Attributes\n-    Attr(#11) { \/\/ SourceFile\n-      #12;\n-    } \/\/ end SourceFile\n-    ;\n-    Attr(#13) { \/\/ PermittedSubclasses\n-      0x0001000E;\n-    } \/\/ end PermittedSubclasses\n-  } \/\/ Attributes\n-} \/\/ end class SealedButNoLoadableSubclasses\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/GetPermittedSubclasses.jcod","additions":0,"deletions":70,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -56,9 +56,4 @@\n-        if (expected != null) {\n-            if (permitted == null) {\n-                throw new RuntimeException(\"Unexpected null permitted subclasses: \" + c.toString());\n-            }\n-\n-            if (permitted.length != expected.length) {\n-                throw new RuntimeException(\n-                    \"Unexpected number of permitted subclasses for: \" + c.toString() + \"(\" + java.util.Arrays.asList(permitted));\n-            }\n+        if (permitted.length != expected.length) {\n+            throw new RuntimeException(\n+                \"Unexpected number of permitted subclasses for: \" + c.toString() + \"(\" + java.util.Arrays.asList(permitted));\n+        }\n@@ -66,0 +61,1 @@\n+        if (permitted.length > 0) {\n@@ -94,3 +90,0 @@\n-            if (permitted != null) {\n-                throw new RuntimeException(\"Unexpected non-null permitted subclasses: \" + c.toString());\n-            }\n@@ -118,2 +111,2 @@\n-        testSealedInfo(Final4.class, null);\n-        testSealedInfo(NotSealed.class, null);\n+        testSealedInfo(Final4.class, new String[] { });\n+        testSealedInfo(NotSealed.class, new String[] { });\n@@ -122,1 +115,1 @@\n-        testSealedInfo(OldClassFile.class, null);\n+        testSealedInfo(OldClassFile.class, new String[] { });\n@@ -151,8 +144,0 @@\n-\n-        \/\/SealedButNoLoadableSubclasses has a PermittedSubclasses attribute, but the class specified there is not loadable\n-        \/\/isSealed() should return null, getPermittedSubclasses() should return an empty array.\n-        testSealedInfo(SealedButNoLoadableSubclasses.class, new String[] {});\n-\n-        \/\/array class objects and primitive type class objects are final, and hence not sealed:\n-        testSealedInfo(Object[].class, null);\n-        testSealedInfo(int.class, null);\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/GetPermittedSubclassesTest.java","additions":8,"deletions":23,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -113,1 +113,2 @@\n-        assertNull(cls.getPermittedSubclasses());\n+        assertTrue(cls.getPermittedSubclasses() != null);\n+        assertTrue(cls.getPermittedSubclasses().length == 0);\n@@ -130,1 +131,2 @@\n-        assertNull(cls.getPermittedSubclasses());\n+        assertTrue(cls.getPermittedSubclasses() != null);\n+        assertTrue(cls.getPermittedSubclasses().length == 0);\n","filename":"test\/jdk\/java\/lang\/reflect\/sealed_classes\/SealedClassesReflectionTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.net.MalformedURLException;\n@@ -46,0 +47,1 @@\n+import java.util.stream.Collectors;\n@@ -51,1 +53,1 @@\n-    private static final ClassLoader OBJECT_CL = Object.class.getClassLoader();\n+    private static final ClassLoader OBJECT_CL = null;\n@@ -63,4 +65,1 @@\n-        URL testLocation = TestSecurityManagerChecks.class\n-                                                    .getProtectionDomain()\n-                                                    .getCodeSource()\n-                                                    .getLocation();\n+        URL[] testClassPath = getTestClassPath();\n@@ -69,1 +68,1 @@\n-        ClassLoader testCL = new URLClassLoader(new URL[] {testLocation}, OBJECT_CL);\n+        ClassLoader testCL = new URLClassLoader(testClassPath, OBJECT_CL);\n@@ -86,1 +85,1 @@\n-        Class<?> sealed = testLayer.findLoader(\"test\").loadClass(\"test.Base\");\n+        Class<?> sealed = Class.forName(testLayer.findModule(\"test\").get(), \"test.Base\");\n@@ -89,9 +88,3 @@\n-        Class<?>[] subclasses = sealed.getPermittedSubclasses();\n-\n-        if (subclasses.length != 3) {\n-            throw new AssertionError(\"Incorrect permitted subclasses: \" +\n-                                       Arrays.asList(subclasses));\n-        }\n-\n-        System.out.println(\"OK - getPermittedSubclasses for \" + sealed.getName() +\n-                           \" got result: \" + Arrays.asList(subclasses));\n+        checkPermittedSubclasses(sealed, \"test.a.ImplA1\",\n+                                         \"test.a.ImplA2\",\n+                                         \"test.b.ImplB\");\n@@ -119,2 +112,4 @@\n-        \/\/should pass - does not return a class from package \"test\":\n-        sealed.getPermittedSubclasses();\n+        \/\/passes - does not return a class from package \"test\":\n+        checkPermittedSubclasses(sealed, \"test.a.ImplA1\",\n+                                         \"test.a.ImplA2\",\n+                                         \"test.b.ImplB\");\n@@ -165,4 +160,1 @@\n-        URL testLocation = TestSecurityManagerChecks.class\n-                                                    .getProtectionDomain()\n-                                                    .getCodeSource()\n-                                                    .getLocation();\n+        URL[] testClassPath = getTestClassPath();\n@@ -171,1 +163,1 @@\n-        ClassLoader testCL = new URLClassLoader(new URL[] {testLocation}, OBJECT_CL);\n+        ClassLoader testCL = new URLClassLoader(testClassPath, OBJECT_CL);\n@@ -185,9 +177,3 @@\n-        Class<?>[] subclasses = sealed.getPermittedSubclasses();\n-\n-        if (subclasses.length != 3) {\n-            throw new AssertionError(\"Incorrect permitted subclasses: \" +\n-                                       Arrays.asList(subclasses));\n-        }\n-\n-        System.out.println(\"OK - getPermittedSubclasses for \" + sealed.getName() +\n-                           \" got result: \" + Arrays.asList(subclasses));\n+        checkPermittedSubclasses(sealed, \"test.ImplA1\",\n+                                         \"test.ImplA2\",\n+                                         \"test.ImplB\");\n@@ -215,2 +201,4 @@\n-        \/\/should pass - does not return a class from package \"test.unknown\":\n-        sealed.getPermittedSubclasses();\n+        \/\/passes - does not return a class from package \"test.unknown\":\n+        checkPermittedSubclasses(sealed, \"test.ImplA1\",\n+                                         \"test.ImplA2\",\n+                                         \"test.ImplB\");\n@@ -260,0 +248,27 @@\n+\n+    private static void checkPermittedSubclasses(Class<?> c, String... expected) {\n+        Class<?>[] subclasses = c.getPermittedSubclasses();\n+        List<String> subclassesNames = Arrays.stream(subclasses)\n+                                             .map(Class::getName)\n+                                             .collect(Collectors.toList());\n+        if (!subclassesNames.equals(Arrays.asList(expected))) {\n+            throw new AssertionError(\"Incorrect permitted subclasses: \" +\n+                                       subclassesNames);\n+        }\n+    }\n+\n+    private static URL[] getTestClassPath() {\n+        return Arrays.stream(System.getProperty(\"test.class.path\")\n+                                    .split(System.getProperty(\"path.separator\")))\n+                     .map(TestSecurityManagerChecks::path2URL)\n+                     .toArray(s -> new URL[s]);\n+    }\n+\n+    private static URL path2URL(String p) {\n+        try {\n+            return Path.of(p).toUri().toURL();\n+        } catch (MalformedURLException ex) {\n+            throw new AssertionError(ex);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/sealed_classes\/TestSecurityManagerChecks.java","additions":49,"deletions":34,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -636,1 +636,1 @@\n-            Assert.check(c.getPermittedSubclasses() == null);\n+            Assert.check(c.getPermittedSubclasses().length == 0);\n","filename":"test\/langtools\/tools\/javac\/sealed\/SealedCompilationTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}