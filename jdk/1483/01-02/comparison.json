{"files":[{"patch":"@@ -3032,0 +3032,1 @@\n+     * NOTE: this method does not support Proxy classes\n@@ -3033,3 +3034,4 @@\n-    private static void checkPackageAccessForClasses(SecurityManager sm, final ClassLoader ccl,\n-                                    boolean checkProxyInterfaces, Class<?>[] classes) {\n-        final ClassLoader cl = classes[0].getClassLoader0();\n+    private static void checkPackageAccessForPermittedSubclasses(SecurityManager sm,\n+                                    final ClassLoader ccl, boolean checkProxyInterfaces,\n+                                    Class<?>[] subClasses) {\n+        final ClassLoader cl = subClasses[0].getClassLoader0();\n@@ -3040,7 +3042,6 @@\n-            for (Class<?> c : classes) {\n-                \/\/ skip the package access check on a proxy class in default proxy package\n-                if (!Proxy.isProxyClass(c) || ReflectUtil.isNonPublicProxyClass(c)) {\n-                    String pkg = c.getPackageName();\n-                    if (pkg != null && !pkg.isEmpty()) {\n-                        packages.add(pkg);\n-                    }\n+            for (Class<?> c : subClasses) {\n+                if (Proxy.isProxyClass(c))\n+                        throw new InternalError(\"a permitted subclass should not be a proxy class: \" + c);\n+                String pkg = c.getPackageName();\n+                if (pkg != null && !pkg.isEmpty()) {\n+                    packages.add(pkg);\n@@ -3053,8 +3054,0 @@\n-        \/\/ check package access on the proxy interfaces\n-        if (checkProxyInterfaces) {\n-            for (Class<?> c : classes) {\n-                if (Proxy.isProxyClass(c)) {\n-                    ReflectUtil.checkProxyPackageAccess(ccl, c.getInterfaces());\n-                }\n-            }\n-        }\n@@ -4410,1 +4403,2 @@\n-     * The {@code Class} objects which can be obtained using this procedure\n+     * The {@code Class} objects which can be obtained using this procedure,\n+     * and which are direct subinterfaces or subclasses of this class or interface,\n@@ -4415,1 +4409,1 @@\n-     * @return an array of class objects of the permitted subclasses of this class or interface\n+     * @return an array of {@code Class} objects of the permitted subclasses of this class or interface\n@@ -4435,0 +4429,7 @@\n+        if (subClasses.length > 0) {\n+            if (Arrays.stream(subClasses).anyMatch(c -> !isDirectSubType(c))) {\n+                subClasses = Arrays.stream(subClasses)\n+                                   .filter(this::isDirectSubType)\n+                                   .toArray(s -> new Class<?>[s]);\n+            }\n+        }\n@@ -4439,1 +4440,1 @@\n-                checkPackageAccessForClasses(sm,\n+                checkPackageAccessForPermittedSubclasses(sm,\n@@ -4448,0 +4449,13 @@\n+    private boolean isDirectSubType(Class<?> c) {\n+        if (isInterface()) {\n+            for (Class<?> i : c.getInterfaces(\/* cloneArray *\/ false)) {\n+                if (i == this) {\n+                    return true;\n+                }\n+            }\n+        } else {\n+            return c.getSuperclass() == this;\n+        }\n+        return false;\n+    }\n+\n@@ -4461,4 +4475,0 @@\n-     * @apiNote\n-     * Sealed class or interface has no relationship with\n-     * {@linkplain Package#isSealed package sealing}.\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":35,"deletions":25,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-\/\/ sealed class NoLoadSubclasses permits OldClassFile, I\/Dont\/Exist\/Either { }\n+\/\/ sealed class NoLoadSubclasses permits ExistingClassFile, I\/Dont\/Exist\/Either { }\n@@ -49,1 +49,1 @@\n-    Utf8 \"OldClassFile\"; \/\/ #15     at 0xA0\n+    Utf8 \"ExistingClassFile\"; \/\/ #15     at 0xA0\n@@ -101,0 +101,25 @@\n+\/\/ class ExistingClassFile extends NoLoadSubclasses { }\n+\/\/\n+class ExistingClassFile {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  55; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #3 #10; \/\/ #1\n+    class #11; \/\/ #2\n+    class #12; \/\/ #3\n+    Utf8 \"<init>\"; \/\/ #4\n+    Utf8 \"()V\"; \/\/ #5\n+    Utf8 \"Code\"; \/\/ #6\n+    Utf8 \"LineNumberTable\"; \/\/ #7\n+    Utf8 \"SourceFile\"; \/\/ #8\n+    Utf8 \"ExistingClassFile.java\"; \/\/ #9\n+    NameAndType #4 #5; \/\/ #10\n+    Utf8 \"ExistingClassFile\"; \/\/ #11\n+    Utf8 \"NoLoadSubclasses\"; \/\/ #12\n+  } \/\/ Constant Pool\n+\n+  0x0021; \/\/ access\n+  #2;\/\/ this_cpx\n+  #3;\/\/ super_cpx\n@@ -102,0 +127,38 @@\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #4; \/\/ name_index\n+      #5; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#6) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#7) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  1;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#8) { \/\/ SourceFile\n+      #9;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class ExistingClassFile\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/GetPermittedSubclasses.jcod","additions":65,"deletions":2,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+ * @compile --enable-preview -source ${jdk.version} noSubclass\/BaseC.java noSubclass\/BaseI.java noSubclass\/Impl1.java\n+ * @compile --enable-preview -source ${jdk.version} noSubclass\/Impl2.java\n@@ -32,1 +34,0 @@\n-import java.lang.constant.ClassDesc;\n@@ -53,1 +54,1 @@\n-        Object[] permitted = c.getPermittedSubclasses();\n+        var permitted = c.getPermittedSubclasses();\n@@ -57,1 +58,1 @@\n-                \"Unexpected number of permitted subclasses for: \" + c.toString());\n+                \"Unexpected number of permitted subclasses for: \" + c.toString() + \"(\" + java.util.Arrays.asList(permitted));\n@@ -68,1 +69,1 @@\n-                permittedNames.add(((Class)permitted[i]).getName());\n+                permittedNames.add(permitted[i].getName());\n@@ -120,1 +121,1 @@\n-        testSealedInfo(NoLoadSubclasses.class, new String[]{\"OldClassFile\" });\n+        testSealedInfo(NoLoadSubclasses.class, new String[]{\"ExistingClassFile\" });\n@@ -138,0 +139,5 @@\n+\n+        \/\/test type enumerated in the PermittedSubclasses attribute,\n+        \/\/which are not direct subtypes of the current class are not returned:\n+        testSealedInfo(noSubclass.BaseC.class, new String[] {\"noSubclass.ImplCIntermediate\"});\n+        testSealedInfo(noSubclass.BaseI.class, new String[] {\"noSubclass.ImplIIntermediateI\", \"noSubclass.ImplIIntermediateC\"});\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/GetPermittedSubclassesTest.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,26 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package noSubclass;\n+\n+public sealed class BaseC permits ImplC, ImplCIntermediate, ImplCIndirect {}\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/noSubclass\/BaseC.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -0,0 +1,26 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package noSubclass;\n+\n+public sealed interface BaseI permits ImplII, ImplIIntermediateI, ImplIIndirectI, ImplIC, ImplIIntermediateC, ImplIIndirectC {}\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/noSubclass\/BaseI.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package noSubclass;\n+\n+final class ImplC extends BaseC {}\n+non-sealed class ImplCIntermediate extends BaseC {}\n+final class ImplCIndirect extends BaseC {}\n+\n+non-sealed interface ImplII extends BaseI {}\n+non-sealed interface ImplIIntermediateI extends BaseI {}\n+non-sealed interface ImplIIndirectI extends ImplIIntermediateI, BaseI {}\n+\n+final class ImplIC implements BaseI {}\n+non-sealed class ImplIIntermediateC implements BaseI {}\n+final class ImplIIndirectC extends ImplIIntermediateC implements BaseI {}\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/noSubclass\/Impl1.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package noSubclass;\n+\n+final class ImplC {}\n+non-sealed class ImplCIntermediate extends BaseC {}\n+final class ImplCIndirect extends ImplCIntermediate {}\n+\n+interface ImplII {}\n+non-sealed interface ImplIIntermediateI extends BaseI {}\n+interface ImplIIndirectI extends ImplIIntermediateI {}\n+\n+final class ImplIC {}\n+non-sealed class ImplIIntermediateC implements BaseI {}\n+final class ImplIIndirectC extends ImplIIntermediateC {}\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/noSubclass\/Impl2.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/reflect\/sealed_classes\/TestSecurityManagerChecks.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}