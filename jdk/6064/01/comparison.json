{"files":[{"patch":"@@ -261,1 +261,1 @@\n-            if (!d3dw.isSurfaceLost() || validate(d3dw)) {\n+            if (!d3dw.isSurfaceLost() || validate(d3dw, false)) {\n@@ -455,1 +455,1 @@\n-                    } else if (!validate(sd)) {\n+                    } else if (!validate(sd, true)) {\n@@ -477,1 +477,1 @@\n-    private boolean validate(D3DWindowSurfaceData sd) {\n+    private boolean validate(D3DWindowSurfaceData sd, boolean postEvent) {\n@@ -494,1 +494,3 @@\n-                repaintPeerTarget(sd.getPeer());\n+                if (postEvent) {\n+                    repaintPeerTarget(sd.getPeer());\n+                }\n","filename":"src\/java.desktop\/windows\/classes\/sun\/java2d\/d3d\/D3DScreenUpdateManager.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8275715\n+ * @summary Tests that paint method is not called twice\n+ * @run main\/othervm MultiPaintEventTest\n+ *\/\n+\n+import java.awt.*;\n+\n+public class MultiPaintEventTest extends Canvas {\n+\n+    private int count = 0;\n+    private final Object lock = new Object();\n+\n+    public void paint(Graphics g) {\n+        synchronized(lock) {\n+            count++;\n+        }\n+\n+        int w = getWidth();\n+        int h = getHeight();\n+\n+        Graphics2D g2d = (Graphics2D)g;\n+        if (count % 2 == 1) {\n+            g2d.setColor(Color.green);\n+        } else {\n+            g2d.setColor(Color.red);\n+        }\n+        g2d.fillRect(0, 0, w, h);\n+    }\n+\n+    public int getCount() {\n+        synchronized(lock) {\n+            return count;\n+        }\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(400, 400);\n+    }\n+\n+    public static void main(String[] args) {\n+        MultiPaintEventTest test = new MultiPaintEventTest();\n+        Frame frame = new Frame();\n+        frame.setUndecorated(true);\n+        frame.add(test);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+\n+        try {\n+            Thread.sleep(2000);\n+            if (test.getCount() > 1) {\n+                throw new RuntimeException(\"Processed unnecessary paint().\");\n+            }\n+        } catch (InterruptedException ex) {\n+            throw new RuntimeException(\"Failed: Interrupted\");\n+        } finally {\n+            frame.dispose();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/java2d\/DirectX\/MultiPaintEventTest\/MultiPaintEventTest.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}