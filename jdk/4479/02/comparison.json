{"files":[{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -31,2 +32,4 @@\n-Semaphore AsyncLogWriter::_sem(0);\n-Semaphore AsyncLogWriter::_io_sem(1);\n+\/\/ RAII class which implements a lock using semaphore(1)\n+class SemaphoreLocker : public StackObj {\n+  Semaphore* _sem;\n+  DEBUG_ONLY(intx _locking_thread_id;)\n@@ -34,3 +37,0 @@\n-class AsyncLogLocker : public StackObj {\n- private:\n-  static Semaphore _lock;\n@@ -38,2 +38,6 @@\n-  AsyncLogLocker() {\n-    _lock.wait();\n+  SemaphoreLocker(Semaphore* sem): _sem(sem)\n+  DEBUG_ONLY(COMMA _locking_thread_id(os::current_thread_id())) {\n+\n+    assert(sem != nullptr && sem->_value == 1,\n+          \"given semaphore must guarantee mutual exclusion!\");\n+    _sem->wait();\n@@ -42,2 +46,3 @@\n-  ~AsyncLogLocker() {\n-    _lock.signal();\n+  ~SemaphoreLocker() {\n+    DEBUG_ONLY(_locking_thread_id = -1);\n+    _sem->signal();\n@@ -45,1 +50,0 @@\n-};\n@@ -47,1 +51,6 @@\n-Semaphore AsyncLogLocker::_lock(1);\n+#ifdef ASSERT\n+  bool current_thread_has_lock() {\n+    return _locking_thread_id == os::current_thread_id();\n+  }\n+#endif\n+};\n@@ -67,1 +76,1 @@\n-    AsyncLogLocker lock;\n+    SemaphoreLocker locker(&_lock);\n@@ -69,0 +78,1 @@\n+    assert(locker.current_thread_has_lock(), \"critical region is broken\");\n@@ -75,1 +85,1 @@\n-  AsyncLogLocker lock;\n+  SemaphoreLocker locker(&_lock);\n@@ -81,0 +91,2 @@\n+\n+  assert(locker.current_thread_has_lock(), \"critical region is broken\");\n@@ -84,1 +96,2 @@\n-  : _initialized(false),\n+  : _lock(1), _sem(0), _io_sem(1),\n+    _initialized(false),\n@@ -128,1 +141,1 @@\n-    AsyncLogLocker lock;\n+    SemaphoreLocker locker(&_lock);\n@@ -135,0 +148,1 @@\n+    assert(locker.current_thread_has_lock(), \"critical region is broken\");\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":29,"deletions":15,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -137,0 +137,2 @@\n+  \/\/ _lock(1) denotes a critional region.\n+  Semaphore _lock;\n@@ -139,1 +141,1 @@\n-  static Semaphore _sem;\n+  Semaphore _sem;\n@@ -141,1 +143,1 @@\n-  static Semaphore _io_sem;\n+  Semaphore _io_sem;\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,2 @@\n+  friend class SemaphoreLocker;\n+\n@@ -46,0 +48,1 @@\n+  DEBUG_ONLY(const uint _value;)\n@@ -50,1 +53,1 @@\n-  Semaphore(uint value = 0) : _impl(value) {}\n+  Semaphore(uint value = 0) : _impl(value) DEBUG_ONLY(COMMA _value(value)) {}\n","filename":"src\/hotspot\/share\/runtime\/semaphore.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}