{"files":[{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -31,1 +32,2 @@\n-class AsyncLogLocker : public StackObj {\n+\/\/ RAII class which implements a lock using semaphore(1)\n+class SemaphoreLocker : public StackObj {\n@@ -33,0 +35,1 @@\n+  DEBUG_ONLY(intx _locking_thread_id;)\n@@ -35,2 +38,4 @@\n-  AsyncLogLocker(Semaphore* sem): _sem(sem) {\n-    assert(sem != nullptr && sem->value() == 1,\n+  SemaphoreLocker(Semaphore* sem): _sem(sem)\n+  DEBUG_ONLY(COMMA _locking_thread_id(os::current_thread_id())) {\n+\n+    assert(sem != nullptr && sem->_value == 1,\n@@ -41,1 +46,2 @@\n-  ~AsyncLogLocker() {\n+  ~SemaphoreLocker() {\n+    DEBUG_ONLY(_locking_thread_id = -1);\n@@ -44,0 +50,6 @@\n+\n+#ifdef ASSERT\n+  bool current_thread_has_lock() {\n+    return _locking_thread_id == os::current_thread_id();\n+  }\n+#endif\n@@ -64,1 +76,1 @@\n-    AsyncLogLocker locker(&_lock);\n+    SemaphoreLocker locker(&_lock);\n@@ -66,0 +78,1 @@\n+    assert(locker.current_thread_has_lock(), \"critical region is broken\");\n@@ -72,1 +85,1 @@\n-  AsyncLogLocker locker(&_lock);\n+  SemaphoreLocker locker(&_lock);\n@@ -78,0 +91,2 @@\n+\n+  assert(locker.current_thread_has_lock(), \"critical region is broken\");\n@@ -126,1 +141,1 @@\n-    AsyncLogLocker locker(&_lock);\n+    SemaphoreLocker locker(&_lock);\n@@ -133,0 +148,1 @@\n+    assert(locker.current_thread_has_lock(), \"critical region is broken\");\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -45,0 +45,2 @@\n+  friend class SemaphoreLocker;\n+\n@@ -61,4 +63,0 @@\n-\n-#ifdef ASSERT\n-  uint value() const { return _value; }\n-#endif\n","filename":"src\/hotspot\/share\/runtime\/semaphore.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}