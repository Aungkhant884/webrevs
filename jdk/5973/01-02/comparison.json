{"files":[{"patch":"@@ -497,1 +497,1 @@\n-     * {@return The latest source version that is usable under the\n+     * {@return the latest source version that is usable under the\n@@ -511,3 +511,3 @@\n-     * An expression to convert from an integer value, for example\n-     * {@code 17}, to the corresponding source version, {@code\n-     * RELEASE_17}, is<br>:\n+     * An expression to convert from a string value, for example\n+     * {@code \"17\"}, to the corresponding source version, {@code\n+     * RELEASE_17}, is:\n@@ -515,1 +515,1 @@\n-     * {@code SourceVersion.valueOf(Runtime.Version.parse(Integer.toString(17)))}\n+     * <pre>{@code SourceVersion.valueOf(Runtime.Version.parse(\"17\"))}<\/pre>\n@@ -531,0 +531,16 @@\n+\n+    \/**\n+     * {@return the least runtime version that supports this source\n+     * version} The returned runtime version has a {@linkplain\n+     * Runtime.Version#feature() feature} large enough to support this\n+     * source version and has no other elements set.\n+     *\/\n+    public Runtime.Version runtimeVersion() {\n+        \/\/ Runtime.Version was added in JDK 9 for for now, limiting\n+        \/\/ supported range to 9 and up.\n+        if (this.compareTo(RELEASE_9) >= 0) {\n+            return Runtime.Version.parse(Integer.toString(ordinal()));\n+        } else {\n+            return null;\n+        }\n+    }\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/SourceVersion.java","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"}]}