{"files":[{"patch":"@@ -495,0 +495,36 @@\n+\n+    \/**\n+     * {@return The latest source version that is usable under the\n+     * runtime version argument} If the runtime version's {@linkplain\n+     * Runtime.Version#feature() feature} is greater than the feature\n+     * of the platform's {@linkplain Runtime#version() version}, an\n+     * {@code IllegalArgumentException} is thrown.\n+     *\n+     * <p>Because the source versions of the Java programming language\n+     * have so far followed a linear progression, only the feature\n+     * component of a runtime version is queried to determine the\n+     * mapping to a source version. If that linearity changes in the\n+     * future, other components of the runtime version may influence\n+     * the result.\n+     *\n+     * @apiNote\n+     * An expression to convert from an integer value, for example\n+     * {@code 17}, to the corresponding source version, {@code\n+     * RELEASE_17}, is<br>:\n+     *\n+     * {@code SourceVersion.valueOf(Runtime.Version.parse(Integer.toString(17)))\n+     *\n+     * @param rv runtime version to map to a source version\n+     * @throws IllegalArgumentException if the feature of version\n+     * argument is greater than the feature of the platform version.\n+     *\/\n+    public static SourceVersion valueOf(Runtime.Version rv) {\n+        int feature = rv.feature();\n+        if (feature > Runtime.version().feature()) {\n+            throw new IllegalArgumentException(\"No matching SourceVersion for \" + rv);\n+        } else {\n+            \/\/ Could also implement this as a switch where a case was\n+            \/\/ added with each new release.\n+            return valueOf(\"RELEASE_\" + feature);\n+        }\n+    }\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/SourceVersion.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"}]}