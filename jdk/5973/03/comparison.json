{"files":[{"patch":"@@ -495,0 +495,52 @@\n+\n+    \/**\n+     * {@return the latest source version that is usable under the\n+     * runtime version argument} If the runtime version's {@linkplain\n+     * Runtime.Version#feature() feature} is greater than the feature\n+     * of the platform's {@linkplain Runtime#version() version}, an\n+     * {@code IllegalArgumentException} is thrown.\n+     *\n+     * <p>Because the source versions of the Java programming language\n+     * have so far followed a linear progression, only the feature\n+     * component of a runtime version is queried to determine the\n+     * mapping to a source version. If that linearity changes in the\n+     * future, other components of the runtime version may influence\n+     * the result.\n+     *\n+     * @apiNote\n+     * An expression to convert from a string value, for example\n+     * {@code \"17\"}, to the corresponding source version, {@code\n+     * RELEASE_17}, is:\n+     *\n+     * <pre>{@code SourceVersion.valueOf(Runtime.Version.parse(\"17\"))}<\/pre>\n+     *\n+     * @param rv runtime version to map to a source version\n+     * @throws IllegalArgumentException if the feature of version\n+     * argument is greater than the feature of the platform version.\n+     *\/\n+    public static SourceVersion valueOf(Runtime.Version rv) {\n+        int feature = rv.feature();\n+        if (feature > Runtime.version().feature()) {\n+            throw new IllegalArgumentException(\"No matching SourceVersion for \" + rv);\n+        } else {\n+            \/\/ Could also implement this as a switch where a case was\n+            \/\/ added with each new release.\n+            return valueOf(\"RELEASE_\" + feature);\n+        }\n+    }\n+\n+    \/**\n+     * {@return the least runtime version that supports this source\n+     * version} The returned runtime version has a {@linkplain\n+     * Runtime.Version#feature() feature} large enough to support this\n+     * source version and has no other elements set.\n+     *\/\n+    public Runtime.Version runtimeVersion() {\n+        \/\/ The javax.lang.model API was added in JDK 6; for now,\n+        \/\/ limiting supported range to 6 and up.\n+        if (this.compareTo(RELEASE_6) >= 0) {\n+            return Runtime.Version.parse(Integer.toString(ordinal()));\n+        } else {\n+            return null;\n+        }\n+    }\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/SourceVersion.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -48,0 +48,2 @@\n+        testValueOfRV();\n+        testRuntimeVersion();\n@@ -150,0 +152,33 @@\n+\n+    private static void testValueOfRV() {\n+        for (SourceVersion sv : SourceVersion.values()) {\n+            if (sv == RELEASE_0) {\n+                continue;\n+            } else {\n+                Runtime.Version rv = Runtime.Version.parse(Integer.toString(sv.ordinal()));\n+                SourceVersion  result = SourceVersion.valueOf(rv);\n+                if (result != sv) {\n+                    throw new RuntimeException(\"Unexpected result \" + result +\n+                                               \" of mapping Runtime.Version \" + rv);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void testRuntimeVersion() {\n+        for (SourceVersion sv : SourceVersion.values()) {\n+            Runtime.Version result = sv.runtimeVersion();\n+            if (sv.compareTo(RELEASE_6) < 0) {\n+                if (result != null) {\n+                    throw new RuntimeException(\"Unexpected result non-null \" + result +\n+                                               \" as runtime version of  \" + sv);\n+                }\n+            } else {\n+                Runtime.Version expected = Runtime.Version.parse(Integer.toString(sv.ordinal()));\n+                if (!result.equals(expected)) {\n+                    throw new RuntimeException(\"Unexpected result \" + result +\n+                                               \" as runtime version of \" + sv);\n+                }\n+            }\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/TestSourceVersion.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"}]}