{"files":[{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.io.JdkConsoleImpl;\n@@ -96,1 +97,1 @@\n-public sealed class Console implements Flushable permits ConsoleImpl, ProxyingConsole {\n+public sealed class Console implements Flushable permits ProxyingConsole {\n@@ -383,0 +384,2 @@\n+        Console c;\n+\n@@ -395,1 +398,1 @@\n-                        .orElse(istty ? new ConsoleImpl() : null);\n+                        .orElse(null);\n@@ -397,1 +400,1 @@\n-            return AccessController.doPrivileged(pa);\n+            c = AccessController.doPrivileged(pa);\n@@ -399,2 +402,6 @@\n-            \/\/ default to built-in Console\n-            return istty ? new ConsoleImpl() : null;\n+            c = null;\n+        }\n+\n+        \/\/ If not found, default to built-in Console\n+        if (istty && c == null) {\n+            c = new ProxyingConsole(new JdkConsoleImpl(CHARSET));\n@@ -402,0 +409,2 @@\n+\n+        return c;\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-package java.io;\n+package jdk.internal.io;\n@@ -28,1 +28,8 @@\n-import java.util.*;\n+import java.io.IOError;\n+import java.io.IOException;\n+import java.io.FileDescriptor;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.PrintWriter;\n+import java.io.Reader;\n+import java.io.Writer;\n@@ -30,0 +37,2 @@\n+import java.util.Arrays;\n+import java.util.Formatter;\n@@ -35,1 +44,1 @@\n- * Console implementation based on the platform's TTY.\n+ * JdkConsole implementation based on the platform's TTY.\n@@ -37,5 +46,1 @@\n-\n-final class ConsoleImpl extends Console {\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n+public final class JdkConsoleImpl implements JdkConsole {\n@@ -47,3 +52,0 @@\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n@@ -55,3 +57,0 @@\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n@@ -59,1 +58,1 @@\n-    public Console format(String fmt, Object ...args) {\n+    public JdkConsole format(String fmt, Object ...args) {\n@@ -64,3 +63,0 @@\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n@@ -68,1 +64,1 @@\n-    public Console printf(String format, Object ... args) {\n+    public JdkConsole printf(String format, Object ... args) {\n@@ -72,3 +68,0 @@\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n@@ -94,3 +87,0 @@\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n@@ -102,3 +92,0 @@\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n@@ -167,3 +154,0 @@\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n@@ -175,3 +159,0 @@\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n@@ -183,3 +164,0 @@\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n@@ -188,2 +166,2 @@\n-        assert CHARSET != null : \"charset() should not return null\";\n-        return CHARSET;\n+        assert charset != null : \"charset() should not return null\";\n+        return charset;\n@@ -192,0 +170,1 @@\n+    private final Charset charset;\n@@ -351,1 +330,2 @@\n-    ConsoleImpl() {\n+    public JdkConsoleImpl(Charset charset) {\n+        this.charset = charset;\n@@ -357,2 +337,5 @@\n-                CHARSET);\n-        pw = new PrintWriter(out, true) { public void close() {} };\n+                charset);\n+        pw = new PrintWriter(out, true) {\n+            public void close() {\n+            }\n+        };\n@@ -363,1 +346,1 @@\n-                CHARSET));\n+                charset));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsoleImpl.java","additions":26,"deletions":43,"binary":false,"changes":69,"previous_filename":"src\/java.base\/share\/classes\/java\/io\/ConsoleImpl.java","status":"renamed"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"java_io_ConsoleImpl.h\"\n@@ -34,1 +33,0 @@\n-#include <termios.h>\n@@ -47,24 +45,0 @@\n-\n-JNIEXPORT jboolean JNICALL\n-Java_java_io_ConsoleImpl_echo(JNIEnv *env,\n-                          jclass cls,\n-                          jboolean on)\n-{\n-    struct termios tio;\n-    jboolean old;\n-    int tty = fileno(stdin);\n-    if (tcgetattr(tty, &tio) == -1) {\n-        JNU_ThrowIOExceptionWithLastError(env, \"tcgetattr failed\");\n-        return !on;\n-    }\n-    old = (tio.c_lflag & ECHO) != 0;\n-    if (on) {\n-        tio.c_lflag |= ECHO;\n-    } else {\n-        tio.c_lflag &= ~ECHO;\n-    }\n-    if (tcsetattr(tty, TCSANOW, &tio) == -1) {\n-        JNU_ThrowIOExceptionWithLastError(env, \"tcsetattr failed\");\n-    }\n-    return old;\n-}\n","filename":"src\/java.base\/unix\/native\/libjava\/Console_md.c","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"jni.h\"\n+#include \"jni_util.h\"\n+#include \"jvm.h\"\n+#include \"jdk_internal_io_JdkConsoleImpl.h\"\n+\n+#include <stdlib.h>\n+#include <unistd.h>\n+#include <termios.h>\n+\n+JNIEXPORT jboolean JNICALL\n+Java_jdk_internal_io_JdkConsoleImpl_echo(JNIEnv *env,\n+                          jclass cls,\n+                          jboolean on)\n+{\n+    struct termios tio;\n+    jboolean old;\n+    int tty = fileno(stdin);\n+    if (tcgetattr(tty, &tio) == -1) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"tcgetattr failed\");\n+        return !on;\n+    }\n+    old = (tio.c_lflag & ECHO) != 0;\n+    if (on) {\n+        tio.c_lflag |= ECHO;\n+    } else {\n+        tio.c_lflag &= ~ECHO;\n+    }\n+    if (tcsetattr(tty, TCSANOW, &tio) == -1) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"tcsetattr failed\");\n+    }\n+    return old;\n+}\n","filename":"src\/java.base\/unix\/native\/libjava\/JdkConsoleImpl_md.c","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}