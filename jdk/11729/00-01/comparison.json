{"files":[{"patch":"@@ -384,0 +384,2 @@\n+        Console c;\n+\n@@ -396,1 +398,1 @@\n-                        .orElse(istty ? new ProxyingConsole(JdkConsoleImpl.getJdkConsole(CHARSET)) : null);\n+                        .orElse(null);\n@@ -398,1 +400,1 @@\n-            return AccessController.doPrivileged(pa);\n+            c = AccessController.doPrivileged(pa);\n@@ -400,2 +402,6 @@\n-            \/\/ default to built-in Console\n-            return istty ? new ProxyingConsole(JdkConsoleImpl.getJdkConsole(CHARSET)) : null;\n+            c = null;\n+        }\n+\n+        \/\/ If not found, default to built-in Console\n+        if (istty && c == null) {\n+            c = new ProxyingConsole(new JdkConsoleImpl(CHARSET));\n@@ -403,0 +409,2 @@\n+\n+        return c;\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-public final class JdkConsoleImpl implements JdkConsole, JdkConsoleProvider {\n+public final class JdkConsoleImpl implements JdkConsole {\n@@ -170,10 +170,7 @@\n-    \/\/ The singleton\n-    private volatile static JdkConsole INSTANCE;\n-\n-    private Charset charset;\n-    private Object readLock;\n-    private Object writeLock;\n-    private Reader reader;\n-    private Writer out;\n-    private PrintWriter pw;\n-    private Formatter formatter;\n+    private final Charset charset;\n+    private final Object readLock;\n+    private final Object writeLock;\n+    private final Reader reader;\n+    private final Writer out;\n+    private final PrintWriter pw;\n+    private final Formatter formatter;\n@@ -333,22 +330,10 @@\n-    @Override\n-    public JdkConsole console(boolean isTTY, Charset charset) {\n-        if (isTTY) {\n-            if (INSTANCE == null) {\n-                this.charset = charset;\n-                readLock = new Object();\n-                writeLock = new Object();\n-                out = StreamEncoder.forOutputStreamWriter(\n-                        new FileOutputStream(FileDescriptor.out),\n-                        writeLock,\n-                        charset);\n-                pw = new PrintWriter(out, true) {\n-                    public void close() {\n-                    }\n-                };\n-                formatter = new Formatter(out);\n-                reader = new LineReader(StreamDecoder.forInputStreamReader(\n-                        new FileInputStream(FileDescriptor.in),\n-                        readLock,\n-                        charset));\n-                rcb = new char[1024];\n-                INSTANCE = this;\n+    public JdkConsoleImpl(Charset charset) {\n+        this.charset = charset;\n+        readLock = new Object();\n+        writeLock = new Object();\n+        out = StreamEncoder.forOutputStreamWriter(\n+                new FileOutputStream(FileDescriptor.out),\n+                writeLock,\n+                charset);\n+        pw = new PrintWriter(out, true) {\n+            public void close() {\n@@ -356,10 +341,7 @@\n-            return INSTANCE;\n-        } else {\n-            \/\/ not instantiable\n-            return null;\n-        }\n-    }\n-\n-    \/\/ For convenience\n-    public static JdkConsole getJdkConsole(Charset cs) {\n-        return INSTANCE != null ? INSTANCE : new JdkConsoleImpl().console(true, cs);\n+        };\n+        formatter = new Formatter(out);\n+        reader = new LineReader(StreamDecoder.forInputStreamReader(\n+                new FileInputStream(FileDescriptor.in),\n+                readLock,\n+                charset));\n+        rcb = new char[1024];\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsoleImpl.java","additions":25,"deletions":43,"binary":false,"changes":68,"status":"modified"}]}