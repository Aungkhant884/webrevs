{"files":[{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.io.JdkConsoleImpl;\n@@ -96,1 +97,1 @@\n-public sealed class Console implements Flushable permits ConsoleImpl, ProxyingConsole {\n+public sealed class Console implements Flushable permits ProxyingConsole {\n@@ -395,1 +396,1 @@\n-                        .orElse(istty ? new ConsoleImpl() : null);\n+                        .orElse(istty ? new ProxyingConsole(JdkConsoleImpl.getJdkConsole(CHARSET)) : null);\n@@ -400,1 +401,1 @@\n-            return istty ? new ConsoleImpl() : null;\n+            return istty ? new ProxyingConsole(JdkConsoleImpl.getJdkConsole(CHARSET)) : null;\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,366 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.io;\n-\n-import java.util.*;\n-import java.nio.charset.Charset;\n-import jdk.internal.access.SharedSecrets;\n-import sun.nio.cs.StreamDecoder;\n-import sun.nio.cs.StreamEncoder;\n-\n-\/**\n- * Console implementation based on the platform's TTY.\n- *\/\n-\n-final class ConsoleImpl extends Console {\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n-    @Override\n-    public PrintWriter writer() {\n-        return pw;\n-    }\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n-    @Override\n-    public Reader reader() {\n-        return reader;\n-    }\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n-    @Override\n-    public Console format(String fmt, Object ...args) {\n-        formatter.format(fmt, args).flush();\n-        return this;\n-    }\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n-    @Override\n-    public Console printf(String format, Object ... args) {\n-        return format(format, args);\n-    }\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n-    @Override\n-    public String readLine(String fmt, Object ... args) {\n-        String line = null;\n-        synchronized (writeLock) {\n-            synchronized(readLock) {\n-                if (!fmt.isEmpty())\n-                    pw.format(fmt, args);\n-                try {\n-                    char[] ca = readline(false);\n-                    if (ca != null)\n-                        line = new String(ca);\n-                } catch (IOException x) {\n-                    throw new IOError(x);\n-                }\n-            }\n-        }\n-        return line;\n-    }\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n-    @Override\n-    public String readLine() {\n-        return readLine(\"\");\n-    }\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n-    @Override\n-    public char[] readPassword(String fmt, Object ... args) {\n-        char[] passwd = null;\n-        synchronized (writeLock) {\n-            synchronized(readLock) {\n-                installShutdownHook();\n-                try {\n-                    restoreEcho = echo(false);\n-                } catch (IOException x) {\n-                    throw new IOError(x);\n-                }\n-                IOError ioe = null;\n-                try {\n-                    if (!fmt.isEmpty())\n-                        pw.format(fmt, args);\n-                    passwd = readline(true);\n-                } catch (IOException x) {\n-                    ioe = new IOError(x);\n-                } finally {\n-                    try {\n-                        if (restoreEcho)\n-                            restoreEcho = echo(true);\n-                    } catch (IOException x) {\n-                        if (ioe == null)\n-                            ioe = new IOError(x);\n-                        else\n-                            ioe.addSuppressed(x);\n-                    }\n-                    if (ioe != null)\n-                        throw ioe;\n-                }\n-                pw.println();\n-            }\n-        }\n-        return passwd;\n-    }\n-\n-    private void installShutdownHook() {\n-        if (shutdownHookInstalled)\n-            return;\n-        try {\n-            \/\/ Add a shutdown hook to restore console's echo state should\n-            \/\/ it be necessary.\n-            SharedSecrets.getJavaLangAccess()\n-                    .registerShutdownHook(0 \/* shutdown hook invocation order *\/,\n-                            false \/* only register if shutdown is not in progress *\/,\n-                            new Runnable() {\n-                                public void run() {\n-                                    try {\n-                                        if (restoreEcho) {\n-                                            echo(true);\n-                                        }\n-                                    } catch (IOException x) { }\n-                                }\n-                            });\n-        } catch (IllegalStateException e) {\n-            \/\/ shutdown is already in progress and readPassword is first used\n-            \/\/ by a shutdown hook\n-        }\n-        shutdownHookInstalled = true;\n-    }\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n-    @Override\n-    public char[] readPassword() {\n-        return readPassword(\"\");\n-    }\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n-    @Override\n-    public void flush() {\n-        pw.flush();\n-    }\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n-    @Override\n-    public Charset charset() {\n-        assert CHARSET != null : \"charset() should not return null\";\n-        return CHARSET;\n-    }\n-\n-    private final Object readLock;\n-    private final Object writeLock;\n-    private final Reader reader;\n-    private final Writer out;\n-    private final PrintWriter pw;\n-    private final Formatter formatter;\n-    private char[] rcb;\n-    private boolean restoreEcho;\n-    private boolean shutdownHookInstalled;\n-\n-    private char[] readline(boolean zeroOut) throws IOException {\n-        int len = reader.read(rcb, 0, rcb.length);\n-        if (len < 0)\n-            return null;  \/\/EOL\n-        if (rcb[len-1] == '\\r')\n-            len--;        \/\/remove CR at end;\n-        else if (rcb[len-1] == '\\n') {\n-            len--;        \/\/remove LF at end;\n-            if (len > 0 && rcb[len-1] == '\\r')\n-                len--;    \/\/remove the CR, if there is one\n-        }\n-        char[] b = new char[len];\n-        if (len > 0) {\n-            System.arraycopy(rcb, 0, b, 0, len);\n-            if (zeroOut) {\n-                Arrays.fill(rcb, 0, len, ' ');\n-            }\n-        }\n-        return b;\n-    }\n-\n-    private char[] grow() {\n-        assert Thread.holdsLock(readLock);\n-        char[] t = new char[rcb.length * 2];\n-        System.arraycopy(rcb, 0, t, 0, rcb.length);\n-        rcb = t;\n-        return rcb;\n-    }\n-\n-    \/*\n-     * Sets the console echo status to {@code on} and returns the previous\n-     * console on\/off status.\n-     * @param on    the echo status to set to. {@code true} for echo on and\n-     *              {@code false} for echo off\n-     * @return true if the previous console echo status is on\n-     *\/\n-    private static native boolean echo(boolean on) throws IOException;\n-\n-    class LineReader extends Reader {\n-        private final Reader in;\n-        private final char[] cb;\n-        private int nChars, nextChar;\n-        boolean leftoverLF;\n-        LineReader(Reader in) {\n-            this.in = in;\n-            cb = new char[1024];\n-            nextChar = nChars = 0;\n-            leftoverLF = false;\n-        }\n-        public void close () {}\n-        public boolean ready() throws IOException {\n-            \/\/in.ready synchronizes on readLock already\n-            return in.ready();\n-        }\n-\n-        public int read(char[] cbuf, int offset, int length)\n-                throws IOException\n-        {\n-            int off = offset;\n-            int end = offset + length;\n-            if (offset < 0 || offset > cbuf.length || length < 0 ||\n-                    end < 0 || end > cbuf.length) {\n-                throw new IndexOutOfBoundsException();\n-            }\n-            synchronized(readLock) {\n-                boolean eof = false;\n-                char c;\n-                for (;;) {\n-                    if (nextChar >= nChars) {   \/\/fill\n-                        int n;\n-                        do {\n-                            n = in.read(cb, 0, cb.length);\n-                        } while (n == 0);\n-                        if (n > 0) {\n-                            nChars = n;\n-                            nextChar = 0;\n-                            if (n < cb.length &&\n-                                    cb[n-1] != '\\n' && cb[n-1] != '\\r') {\n-                                \/*\n-                                 * we're in canonical mode so each \"fill\" should\n-                                 * come back with an eol. if there is no lf or nl at\n-                                 * the end of returned bytes we reached an eof.\n-                                 *\/\n-                                eof = true;\n-                            }\n-                        } else { \/*EOF*\/\n-                            if (off - offset == 0)\n-                                return -1;\n-                            return off - offset;\n-                        }\n-                    }\n-                    if (leftoverLF && cbuf == rcb && cb[nextChar] == '\\n') {\n-                        \/*\n-                         * if invoked by our readline, skip the leftover, otherwise\n-                         * return the LF.\n-                         *\/\n-                        nextChar++;\n-                    }\n-                    leftoverLF = false;\n-                    while (nextChar < nChars) {\n-                        c = cbuf[off++] = cb[nextChar];\n-                        cb[nextChar++] = 0;\n-                        if (c == '\\n') {\n-                            return off - offset;\n-                        } else if (c == '\\r') {\n-                            if (off == end) {\n-                                \/* no space left even the next is LF, so return\n-                                 * whatever we have if the invoker is not our\n-                                 * readLine()\n-                                 *\/\n-                                if (cbuf == rcb) {\n-                                    cbuf = grow();\n-                                } else {\n-                                    leftoverLF = true;\n-                                    return off - offset;\n-                                }\n-                            }\n-                            if (nextChar == nChars && in.ready()) {\n-                                \/*\n-                                 * we have a CR and we reached the end of\n-                                 * the read in buffer, fill to make sure we\n-                                 * don't miss a LF, if there is one, it's possible\n-                                 * that it got cut off during last round reading\n-                                 * simply because the read in buffer was full.\n-                                 *\/\n-                                nChars = in.read(cb, 0, cb.length);\n-                                nextChar = 0;\n-                            }\n-                            if (nextChar < nChars && cb[nextChar] == '\\n') {\n-                                cbuf[off++] = '\\n';\n-                                nextChar++;\n-                            }\n-                            return off - offset;\n-                        } else if (off == end) {\n-                            if (cbuf == rcb) {\n-                                cbuf = grow();\n-                                end = cbuf.length;\n-                            } else {\n-                                return off - offset;\n-                            }\n-                        }\n-                    }\n-                    if (eof)\n-                        return off - offset;\n-                }\n-            }\n-        }\n-    }\n-\n-    ConsoleImpl() {\n-        readLock = new Object();\n-        writeLock = new Object();\n-        out = StreamEncoder.forOutputStreamWriter(\n-                new FileOutputStream(FileDescriptor.out),\n-                writeLock,\n-                CHARSET);\n-        pw = new PrintWriter(out, true) { public void close() {} };\n-        formatter = new Formatter(out);\n-        reader = new LineReader(StreamDecoder.forInputStreamReader(\n-                new FileInputStream(FileDescriptor.in),\n-                readLock,\n-                CHARSET));\n-        rcb = new char[1024];\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/io\/ConsoleImpl.java","additions":0,"deletions":366,"binary":false,"changes":366,"status":"deleted"},{"patch":"@@ -0,0 +1,367 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.io;\n+\n+import java.io.IOError;\n+import java.io.IOException;\n+import java.io.FileDescriptor;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.PrintWriter;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.Charset;\n+import java.util.Arrays;\n+import java.util.Formatter;\n+import jdk.internal.access.SharedSecrets;\n+import sun.nio.cs.StreamDecoder;\n+import sun.nio.cs.StreamEncoder;\n+\n+\/**\n+ * JdkConsole implementation based on the platform's TTY.\n+ *\/\n+public final class JdkConsoleImpl implements JdkConsole, JdkConsoleProvider {\n+    @Override\n+    public PrintWriter writer() {\n+        return pw;\n+    }\n+\n+    @Override\n+    public Reader reader() {\n+        return reader;\n+    }\n+\n+    @Override\n+    public JdkConsole format(String fmt, Object ...args) {\n+        formatter.format(fmt, args).flush();\n+        return this;\n+    }\n+\n+    @Override\n+    public JdkConsole printf(String format, Object ... args) {\n+        return format(format, args);\n+    }\n+\n+    @Override\n+    public String readLine(String fmt, Object ... args) {\n+        String line = null;\n+        synchronized (writeLock) {\n+            synchronized(readLock) {\n+                if (!fmt.isEmpty())\n+                    pw.format(fmt, args);\n+                try {\n+                    char[] ca = readline(false);\n+                    if (ca != null)\n+                        line = new String(ca);\n+                } catch (IOException x) {\n+                    throw new IOError(x);\n+                }\n+            }\n+        }\n+        return line;\n+    }\n+\n+    @Override\n+    public String readLine() {\n+        return readLine(\"\");\n+    }\n+\n+    @Override\n+    public char[] readPassword(String fmt, Object ... args) {\n+        char[] passwd = null;\n+        synchronized (writeLock) {\n+            synchronized(readLock) {\n+                installShutdownHook();\n+                try {\n+                    restoreEcho = echo(false);\n+                } catch (IOException x) {\n+                    throw new IOError(x);\n+                }\n+                IOError ioe = null;\n+                try {\n+                    if (!fmt.isEmpty())\n+                        pw.format(fmt, args);\n+                    passwd = readline(true);\n+                } catch (IOException x) {\n+                    ioe = new IOError(x);\n+                } finally {\n+                    try {\n+                        if (restoreEcho)\n+                            restoreEcho = echo(true);\n+                    } catch (IOException x) {\n+                        if (ioe == null)\n+                            ioe = new IOError(x);\n+                        else\n+                            ioe.addSuppressed(x);\n+                    }\n+                    if (ioe != null)\n+                        throw ioe;\n+                }\n+                pw.println();\n+            }\n+        }\n+        return passwd;\n+    }\n+\n+    private void installShutdownHook() {\n+        if (shutdownHookInstalled)\n+            return;\n+        try {\n+            \/\/ Add a shutdown hook to restore console's echo state should\n+            \/\/ it be necessary.\n+            SharedSecrets.getJavaLangAccess()\n+                    .registerShutdownHook(0 \/* shutdown hook invocation order *\/,\n+                            false \/* only register if shutdown is not in progress *\/,\n+                            new Runnable() {\n+                                public void run() {\n+                                    try {\n+                                        if (restoreEcho) {\n+                                            echo(true);\n+                                        }\n+                                    } catch (IOException x) { }\n+                                }\n+                            });\n+        } catch (IllegalStateException e) {\n+            \/\/ shutdown is already in progress and readPassword is first used\n+            \/\/ by a shutdown hook\n+        }\n+        shutdownHookInstalled = true;\n+    }\n+\n+    @Override\n+    public char[] readPassword() {\n+        return readPassword(\"\");\n+    }\n+\n+    @Override\n+    public void flush() {\n+        pw.flush();\n+    }\n+\n+    @Override\n+    public Charset charset() {\n+        assert charset != null : \"charset() should not return null\";\n+        return charset;\n+    }\n+\n+    \/\/ The singleton\n+    private volatile static JdkConsole INSTANCE;\n+\n+    private Charset charset;\n+    private Object readLock;\n+    private Object writeLock;\n+    private Reader reader;\n+    private Writer out;\n+    private PrintWriter pw;\n+    private Formatter formatter;\n+    private char[] rcb;\n+    private boolean restoreEcho;\n+    private boolean shutdownHookInstalled;\n+\n+    private char[] readline(boolean zeroOut) throws IOException {\n+        int len = reader.read(rcb, 0, rcb.length);\n+        if (len < 0)\n+            return null;  \/\/EOL\n+        if (rcb[len-1] == '\\r')\n+            len--;        \/\/remove CR at end;\n+        else if (rcb[len-1] == '\\n') {\n+            len--;        \/\/remove LF at end;\n+            if (len > 0 && rcb[len-1] == '\\r')\n+                len--;    \/\/remove the CR, if there is one\n+        }\n+        char[] b = new char[len];\n+        if (len > 0) {\n+            System.arraycopy(rcb, 0, b, 0, len);\n+            if (zeroOut) {\n+                Arrays.fill(rcb, 0, len, ' ');\n+            }\n+        }\n+        return b;\n+    }\n+\n+    private char[] grow() {\n+        assert Thread.holdsLock(readLock);\n+        char[] t = new char[rcb.length * 2];\n+        System.arraycopy(rcb, 0, t, 0, rcb.length);\n+        rcb = t;\n+        return rcb;\n+    }\n+\n+    \/*\n+     * Sets the console echo status to {@code on} and returns the previous\n+     * console on\/off status.\n+     * @param on    the echo status to set to. {@code true} for echo on and\n+     *              {@code false} for echo off\n+     * @return true if the previous console echo status is on\n+     *\/\n+    private static native boolean echo(boolean on) throws IOException;\n+\n+    class LineReader extends Reader {\n+        private final Reader in;\n+        private final char[] cb;\n+        private int nChars, nextChar;\n+        boolean leftoverLF;\n+        LineReader(Reader in) {\n+            this.in = in;\n+            cb = new char[1024];\n+            nextChar = nChars = 0;\n+            leftoverLF = false;\n+        }\n+        public void close () {}\n+        public boolean ready() throws IOException {\n+            \/\/in.ready synchronizes on readLock already\n+            return in.ready();\n+        }\n+\n+        public int read(char[] cbuf, int offset, int length)\n+                throws IOException\n+        {\n+            int off = offset;\n+            int end = offset + length;\n+            if (offset < 0 || offset > cbuf.length || length < 0 ||\n+                    end < 0 || end > cbuf.length) {\n+                throw new IndexOutOfBoundsException();\n+            }\n+            synchronized(readLock) {\n+                boolean eof = false;\n+                char c;\n+                for (;;) {\n+                    if (nextChar >= nChars) {   \/\/fill\n+                        int n;\n+                        do {\n+                            n = in.read(cb, 0, cb.length);\n+                        } while (n == 0);\n+                        if (n > 0) {\n+                            nChars = n;\n+                            nextChar = 0;\n+                            if (n < cb.length &&\n+                                    cb[n-1] != '\\n' && cb[n-1] != '\\r') {\n+                                \/*\n+                                 * we're in canonical mode so each \"fill\" should\n+                                 * come back with an eol. if there is no lf or nl at\n+                                 * the end of returned bytes we reached an eof.\n+                                 *\/\n+                                eof = true;\n+                            }\n+                        } else { \/*EOF*\/\n+                            if (off - offset == 0)\n+                                return -1;\n+                            return off - offset;\n+                        }\n+                    }\n+                    if (leftoverLF && cbuf == rcb && cb[nextChar] == '\\n') {\n+                        \/*\n+                         * if invoked by our readline, skip the leftover, otherwise\n+                         * return the LF.\n+                         *\/\n+                        nextChar++;\n+                    }\n+                    leftoverLF = false;\n+                    while (nextChar < nChars) {\n+                        c = cbuf[off++] = cb[nextChar];\n+                        cb[nextChar++] = 0;\n+                        if (c == '\\n') {\n+                            return off - offset;\n+                        } else if (c == '\\r') {\n+                            if (off == end) {\n+                                \/* no space left even the next is LF, so return\n+                                 * whatever we have if the invoker is not our\n+                                 * readLine()\n+                                 *\/\n+                                if (cbuf == rcb) {\n+                                    cbuf = grow();\n+                                } else {\n+                                    leftoverLF = true;\n+                                    return off - offset;\n+                                }\n+                            }\n+                            if (nextChar == nChars && in.ready()) {\n+                                \/*\n+                                 * we have a CR and we reached the end of\n+                                 * the read in buffer, fill to make sure we\n+                                 * don't miss a LF, if there is one, it's possible\n+                                 * that it got cut off during last round reading\n+                                 * simply because the read in buffer was full.\n+                                 *\/\n+                                nChars = in.read(cb, 0, cb.length);\n+                                nextChar = 0;\n+                            }\n+                            if (nextChar < nChars && cb[nextChar] == '\\n') {\n+                                cbuf[off++] = '\\n';\n+                                nextChar++;\n+                            }\n+                            return off - offset;\n+                        } else if (off == end) {\n+                            if (cbuf == rcb) {\n+                                cbuf = grow();\n+                                end = cbuf.length;\n+                            } else {\n+                                return off - offset;\n+                            }\n+                        }\n+                    }\n+                    if (eof)\n+                        return off - offset;\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public JdkConsole console(boolean isTTY, Charset charset) {\n+        if (isTTY) {\n+            if (INSTANCE == null) {\n+                this.charset = charset;\n+                readLock = new Object();\n+                writeLock = new Object();\n+                out = StreamEncoder.forOutputStreamWriter(\n+                        new FileOutputStream(FileDescriptor.out),\n+                        writeLock,\n+                        charset);\n+                pw = new PrintWriter(out, true) {\n+                    public void close() {\n+                    }\n+                };\n+                formatter = new Formatter(out);\n+                reader = new LineReader(StreamDecoder.forInputStreamReader(\n+                        new FileInputStream(FileDescriptor.in),\n+                        readLock,\n+                        charset));\n+                rcb = new char[1024];\n+                INSTANCE = this;\n+            }\n+            return INSTANCE;\n+        } else {\n+            \/\/ not instantiable\n+            return null;\n+        }\n+    }\n+\n+    \/\/ For convenience\n+    public static JdkConsole getJdkConsole(Charset cs) {\n+        return INSTANCE != null ? INSTANCE : new JdkConsoleImpl().console(true, cs);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsoleImpl.java","additions":367,"deletions":0,"binary":false,"changes":367,"status":"added"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"java_io_ConsoleImpl.h\"\n@@ -34,1 +33,0 @@\n-#include <termios.h>\n@@ -47,24 +45,0 @@\n-\n-JNIEXPORT jboolean JNICALL\n-Java_java_io_ConsoleImpl_echo(JNIEnv *env,\n-                          jclass cls,\n-                          jboolean on)\n-{\n-    struct termios tio;\n-    jboolean old;\n-    int tty = fileno(stdin);\n-    if (tcgetattr(tty, &tio) == -1) {\n-        JNU_ThrowIOExceptionWithLastError(env, \"tcgetattr failed\");\n-        return !on;\n-    }\n-    old = (tio.c_lflag & ECHO) != 0;\n-    if (on) {\n-        tio.c_lflag |= ECHO;\n-    } else {\n-        tio.c_lflag &= ~ECHO;\n-    }\n-    if (tcsetattr(tty, TCSANOW, &tio) == -1) {\n-        JNU_ThrowIOExceptionWithLastError(env, \"tcsetattr failed\");\n-    }\n-    return old;\n-}\n","filename":"src\/java.base\/unix\/native\/libjava\/Console_md.c","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"jni.h\"\n+#include \"jni_util.h\"\n+#include \"jvm.h\"\n+#include \"jdk_internal_io_JdkConsoleImpl.h\"\n+\n+#include <stdlib.h>\n+#include <unistd.h>\n+#include <termios.h>\n+\n+JNIEXPORT jboolean JNICALL\n+Java_jdk_internal_io_JdkConsoleImpl_echo(JNIEnv *env,\n+                          jclass cls,\n+                          jboolean on)\n+{\n+    struct termios tio;\n+    jboolean old;\n+    int tty = fileno(stdin);\n+    if (tcgetattr(tty, &tio) == -1) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"tcgetattr failed\");\n+        return !on;\n+    }\n+    old = (tio.c_lflag & ECHO) != 0;\n+    if (on) {\n+        tio.c_lflag |= ECHO;\n+    } else {\n+        tio.c_lflag &= ~ECHO;\n+    }\n+    if (tcsetattr(tty, TCSANOW, &tio) == -1) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"tcsetattr failed\");\n+    }\n+    return old;\n+}\n","filename":"src\/java.base\/unix\/native\/libjava\/JdkConsoleImpl_md.c","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}