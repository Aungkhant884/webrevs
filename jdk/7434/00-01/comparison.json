{"files":[{"patch":"@@ -41,2 +41,2 @@\n-                 \"retainDenominator\", \"divByNegOne\", \"divByPow2And\",\n-                 \"divByPow2And1\",  \"divByPow2\", \"divByNegPow2\",\n+                 \"retainDenominator\", \"divByNegOne\", \"divByPow2AND\",\n+                 \"divByPow2AND1\",  \"divByPow2\", \"divByNegPow2\",\n@@ -88,2 +88,2 @@\n-        Asserts.assertEQ((a & -4) \/ 2 , divByPow2And(a));\n-        Asserts.assertEQ((a & -2) \/ 2 , divByPow2And1(a));\n+        Asserts.assertEQ((a & -4) \/ 2 , divByPow2AND(a));\n+        Asserts.assertEQ((a & -2) \/ 2 , divByPow2AND1(a));\n@@ -97,1 +97,1 @@\n-    @IR(counts = {IRNode.TRAP, \"1\"})\n+    @IR(counts = {IRNode.DIV_BY_ZERO_TRAP, \"1\"})\n@@ -119,1 +119,1 @@\n-    @IR(counts = {IRNode.TRAP, \"1\"})\n+    @IR(counts = {IRNode.DIV_BY_ZERO_TRAP, \"1\"})\n@@ -128,1 +128,1 @@\n-                  IRNode.TRAP, \"1\"\n+                  IRNode.DIV_BY_ZERO_TRAP, \"1\"\n@@ -150,1 +150,1 @@\n-    public int divByPow2And(int x) {\n+    public int divByPow2AND(int x) {\n@@ -159,1 +159,1 @@\n-    public int divByPow2And1(int x) {\n+    public int divByPow2AND1(int x) {\n@@ -195,2 +195,2 @@\n-                  IRNode.CONVI2L, \"1\",\n-                  IRNode.CONVL2I, \"1\",\n+                  IRNode.CONV_I2L, \"1\",\n+                  IRNode.CONV_L2I, \"1\",\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/DivINodeIdealizationTests.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n-                 \"retainDenominator\", \"divByNegOne\", \"divByPow2And\",\n-                 \"divByPow2And1\",  \"divByPow2\", \"divByNegPow2\"})\n+                 \"retainDenominator\", \"divByNegOne\", \"divByPow2AND\",\n+                 \"divByPow2AND1\",  \"divByPow2\", \"divByNegPow2\"})\n@@ -87,2 +87,2 @@\n-        Asserts.assertEQ((a & -4) \/ 2 , divByPow2And(a));\n-        Asserts.assertEQ((a & -2) \/ 2 , divByPow2And1(a));\n+        Asserts.assertEQ((a & -4) \/ 2 , divByPow2AND(a));\n+        Asserts.assertEQ((a & -2) \/ 2 , divByPow2AND1(a));\n@@ -95,1 +95,1 @@\n-    @IR(counts = {IRNode.TRAP, \"1\"})\n+    @IR(counts = {IRNode.DIV_BY_ZERO_TRAP, \"1\"})\n@@ -117,1 +117,1 @@\n-    @IR(counts = {IRNode.TRAP, \"1\"})\n+    @IR(counts = {IRNode.DIV_BY_ZERO_TRAP, \"1\"})\n@@ -126,1 +126,1 @@\n-                  IRNode.TRAP, \"1\"\n+                  IRNode.DIV_BY_ZERO_TRAP, \"1\"\n@@ -149,1 +149,1 @@\n-    public long divByPow2And(long x) {\n+    public long divByPow2AND(long x) {\n@@ -159,1 +159,1 @@\n-    public long divByPow2And1(long x) {\n+    public long divByPow2AND1(long x) {\n@@ -190,1 +190,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/DivLNodeIdealizationTests.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -87,5 +87,5 @@\n-            this.blackhole();\n-            if (i == 0){\n-                break;\n-           }\n-           else {\n+\t\t\tthis.blackhole();\n+           \tif (i == 0) {\n+            \tbreak;\n+           \t}\n+           \telse {\n@@ -94,2 +94,2 @@\n-           }\n-        }\n+           \t}\n+\t\t}\n@@ -127,1 +127,1 @@\n-        while (i < 500){\n+        while (i < 500) {\n@@ -129,1 +129,1 @@\n-            if (i == 0){\n+            if (i == 0) {\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/loopOpts\/LoopIdealizationTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -133,0 +133,1 @@\n+    public static final String DIV_BY_ZERO_TRAP = START + \"CallStaticJava\" + MID + \"uncommon_trap.*div0_check\" + END;\n@@ -143,0 +144,1 @@\n+    public static final String AND = START + \"And(I|L)\" + MID + END;\n@@ -147,0 +149,1 @@\n+    public static final String LSHIFT = START + \"LShift(I|L)\" + MID + END;\n@@ -149,0 +152,7 @@\n+    public static final String RSHIFT = START + \"RShift(I|L)\" + MID + END;\n+    public static final String RSHIFT_I = START + \"RShiftI\" + MID + END;\n+    public static final String RSHIFT_L = START + \"RShiftL\" + MID + END;\n+    public static final String URSHIFT = START + \"URShift(B|S|I|L)\" + MID + END;\n+    public static final String URSHIFT_I = START + \"URShiftI\" + MID + END;\n+    public static final String URSHIFT_L = START + \"URShiftL\" + MID + END;\n+    public static final String ADD = START + \"Add(I|L|F|D|P)\" + MID + END;\n@@ -152,0 +162,1 @@\n+    public static final String SUB = START + \"Sub(I|L|F|D)\" + MID + END;\n@@ -156,0 +167,1 @@\n+    public static final String MUL = START + \"Mul(I|L|F|D)\" + MID + END;\n@@ -158,0 +170,2 @@\n+    public static final String DIV = START + \"Div(I|L|F|D)\" + MID + END;\n+    public static final String DIV_L = START + \"DivL\" + MID + END;\n@@ -159,0 +173,1 @@\n+    public static final String CONV_L2I = START + \"ConvL2I\" + MID + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}