{"files":[{"patch":"@@ -666,3 +666,0 @@\n-#ifndef PRODUCT\n-  set_trace_escape_analysis(directive->TraceEscapeAnalysisOption);\n-#endif\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -327,1 +327,0 @@\n-  bool                  _trace_escape_analysis; \/\/ True if we should print escape analysis for this compilation\n@@ -622,2 +621,0 @@\n-  bool              trace_escape_analysis() const{ return _trace_escape_analysis; }\n-  void          set_trace_escape_analysis(bool z){ _trace_escape_analysis = z; }\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -222,1 +222,1 @@\n-  if (_compile->trace_escape_analysis()) {\n+  if (_compile->directive()->TraceEscapeAnalysisOption) {\n@@ -882,1 +882,1 @@\n-    set_escape_state(ptn, PointsToNode::GlobalEscape DEBUG_ONLY(COMMA \"stored at raw address\"));\n+    set_escape_state(ptn, PointsToNode::GlobalEscape NOT_PRODUCT(COMMA \"stored at raw address\"));\n@@ -909,1 +909,1 @@\n-    DEBUG_ONLY(const char* nsr_reason = \"\");\n+    NOT_PRODUCT(const char* nsr_reason = \"\");\n@@ -918,1 +918,1 @@\n-          DEBUG_ONLY(nsr_reason = \"has a non-constant or too big length\");\n+          NOT_PRODUCT(nsr_reason = \"has a non-constant or too big length\");\n@@ -933,1 +933,1 @@\n-          DEBUG_ONLY(nsr_reason = \"has too many fields\");\n+          NOT_PRODUCT(nsr_reason = \"has too many fields\");\n@@ -940,1 +940,1 @@\n-      set_not_scalar_replaceable(ptn DEBUG_ONLY(COMMA nsr_reason));\n+      set_not_scalar_replaceable(ptn NOT_PRODUCT(COMMA nsr_reason));\n@@ -971,1 +971,1 @@\n-      set_not_scalar_replaceable(ptnode_adr(call_idx) DEBUG_ONLY(COMMA \"is result of multinewarray\"));\n+      set_not_scalar_replaceable(ptnode_adr(call_idx) NOT_PRODUCT(COMMA \"is result of multinewarray\"));\n@@ -993,1 +993,1 @@\n-        set_not_scalar_replaceable(ptnode_adr(call_idx) DEBUG_ONLY(COMMA \"is result of call\"));\n+        set_not_scalar_replaceable(ptnode_adr(call_idx) NOT_PRODUCT(COMMA \"is result of call\"));\n@@ -1148,1 +1148,1 @@\n-          set_escape_state(arg_ptn, es DEBUG_ONLY(COMMA \"reason unknown (1)\"));\n+          set_escape_state(arg_ptn, es NOT_PRODUCT(COMMA \"reason unknown (1)\"));\n@@ -1203,1 +1203,1 @@\n-              set_escape_state(arg_ptn, PointsToNode::GlobalEscape DEBUG_ONLY(COMMA trace_arg_escape_message(call)));\n+              set_escape_state(arg_ptn, PointsToNode::GlobalEscape NOT_PRODUCT(COMMA trace_arg_escape_message(call)));\n@@ -1205,1 +1205,1 @@\n-              set_escape_state(arg_ptn, PointsToNode::ArgEscape DEBUG_ONLY(COMMA trace_arg_escape_message(call)));\n+              set_escape_state(arg_ptn, PointsToNode::ArgEscape NOT_PRODUCT(COMMA trace_arg_escape_message(call)));\n@@ -1208,1 +1208,1 @@\n-                set_fields_escape_state(arg_ptn, PointsToNode::GlobalEscape DEBUG_ONLY(COMMA trace_arg_escape_message(call)));\n+                set_fields_escape_state(arg_ptn, PointsToNode::GlobalEscape NOT_PRODUCT(COMMA trace_arg_escape_message(call)));\n@@ -1237,1 +1237,1 @@\n-          set_escape_state(ptnode_adr(arg->_idx), PointsToNode::GlobalEscape DEBUG_ONLY(COMMA trace_arg_escape_message(call)));\n+          set_escape_state(ptnode_adr(arg->_idx), PointsToNode::GlobalEscape NOT_PRODUCT(COMMA trace_arg_escape_message(call)));\n@@ -1421,1 +1421,1 @@\n-          set_fields_escape_state(e, field_es DEBUG_ONLY(COMMA trace_propagate_message(ptn)));\n+          set_fields_escape_state(e, field_es NOT_PRODUCT(COMMA trace_propagate_message(ptn)));\n@@ -1427,1 +1427,1 @@\n-          set_escape_state(e, es DEBUG_ONLY(COMMA trace_propagate_message(ptn)));\n+          set_escape_state(e, es NOT_PRODUCT(COMMA trace_propagate_message(ptn)));\n@@ -1434,1 +1434,1 @@\n-          set_fields_escape_state(e, field_es DEBUG_ONLY(COMMA trace_propagate_message(ptn)));\n+          set_fields_escape_state(e, field_es NOT_PRODUCT(COMMA trace_propagate_message(ptn)));\n@@ -1441,1 +1441,1 @@\n-          set_escape_state(e, field_es DEBUG_ONLY(COMMA trace_propagate_message(ptn)));\n+          set_escape_state(e, field_es NOT_PRODUCT(COMMA trace_propagate_message(ptn)));\n@@ -1444,1 +1444,1 @@\n-          set_escape_state(e, es DEBUG_ONLY(COMMA trace_propagate_message(ptn)));\n+          set_escape_state(e, es NOT_PRODUCT(COMMA trace_propagate_message(ptn)));\n@@ -1810,1 +1810,1 @@\n-        set_not_scalar_replaceable(jobj DEBUG_ONLY(COMMA \"is stored at unknown offset\"));\n+        set_not_scalar_replaceable(jobj NOT_PRODUCT(COMMA \"is stored at unknown offset\"));\n@@ -1819,1 +1819,1 @@\n-            set_not_scalar_replaceable(jobj DEBUG_ONLY(COMMA \"is stored into field with potentially null base\"));\n+            set_not_scalar_replaceable(jobj NOT_PRODUCT(COMMA \"is stored into field with potentially null base\"));\n@@ -1831,2 +1831,2 @@\n-        set_not_scalar_replaceable(jobj DEBUG_ONLY(COMMA \"is merged with other object\"));\n-        set_not_scalar_replaceable(ptn DEBUG_ONLY(COMMA \"is merged with other object\"));\n+        set_not_scalar_replaceable(jobj NOT_PRODUCT(COMMA \"is merged with other object\"));\n+        set_not_scalar_replaceable(ptn NOT_PRODUCT(COMMA \"is merged with other object\"));\n@@ -1852,1 +1852,1 @@\n-      set_not_scalar_replaceable(jobj DEBUG_ONLY(COMMA \"has field with unknown offset\"));\n+      set_not_scalar_replaceable(jobj NOT_PRODUCT(COMMA \"has field with unknown offset\"));\n@@ -1867,1 +1867,1 @@\n-      set_not_scalar_replaceable(jobj DEBUG_ONLY(COMMA \"is used as base of mixed unsafe access\"));\n+      set_not_scalar_replaceable(jobj NOT_PRODUCT(COMMA \"is used as base of mixed unsafe access\"));\n@@ -1874,1 +1874,1 @@\n-        set_not_scalar_replaceable(jobj DEBUG_ONLY(COMMA \"is used in LoadStore or mismatched access\"));\n+        set_not_scalar_replaceable(jobj NOT_PRODUCT(COMMA \"is used in LoadStore or mismatched access\"));\n@@ -1903,2 +1903,2 @@\n-          set_not_scalar_replaceable(jobj DEBUG_ONLY(COMMA \"may point to more than one object\"));\n-          set_not_scalar_replaceable(base DEBUG_ONLY(COMMA \"may point to more than one object\"));\n+          set_not_scalar_replaceable(jobj NOT_PRODUCT(COMMA \"may point to more than one object\"));\n+          set_not_scalar_replaceable(base NOT_PRODUCT(COMMA \"may point to more than one object\"));\n@@ -3169,1 +3169,1 @@\n-      set_escape_state(ptnode_adr(n->_idx), es DEBUG_ONLY(COMMA \"reason unknown (2)\")); \/\/ CheckCastPP escape state\n+      set_escape_state(ptnode_adr(n->_idx), es NOT_PRODUCT(COMMA \"reason unknown (2)\")); \/\/ CheckCastPP escape state\n@@ -3738,1 +3738,1 @@\n-  if (_compile->trace_escape_analysis()) {\n+  if (_compile->directive()->TraceEscapeAnalysisOption) {\n@@ -3749,1 +3749,1 @@\n-  if (_compile->trace_escape_analysis()) {\n+  if (_compile->directive()->TraceEscapeAnalysisOption) {\n@@ -3760,1 +3760,1 @@\n-  if (_compile->trace_escape_analysis()) {\n+  if (_compile->directive()->TraceEscapeAnalysisOption) {\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -434,1 +434,1 @@\n-                        DEBUG_ONLY(COMMA const char* reason=\"reason unknown\")) {\n+                        NOT_PRODUCT(COMMA const char* reason)) {\n@@ -438,1 +438,1 @@\n-        DEBUG_ONLY(trace_es_update_helper(ptn, esc, false, reason));\n+        NOT_PRODUCT(trace_es_update_helper(ptn, esc, false, reason));\n@@ -442,1 +442,1 @@\n-        DEBUG_ONLY(trace_es_update_helper(ptn, esc, true, reason));\n+        NOT_PRODUCT(trace_es_update_helper(ptn, esc, true, reason));\n@@ -448,1 +448,1 @@\n-                               DEBUG_ONLY(COMMA const char* reason=\"reason unknown\")) {\n+                               NOT_PRODUCT(COMMA const char* reason)) {\n@@ -452,1 +452,1 @@\n-        DEBUG_ONLY(trace_es_update_helper(ptn, esc, true, reason));\n+        NOT_PRODUCT(trace_es_update_helper(ptn, esc, true, reason));\n@@ -578,1 +578,1 @@\n-  void set_not_scalar_replaceable(PointsToNode* ptn DEBUG_ONLY(COMMA const char* reason=\"reason unknown\")) const {\n+  void set_not_scalar_replaceable(PointsToNode* ptn NOT_PRODUCT(COMMA const char* reason)) const {\n@@ -580,1 +580,1 @@\n-    if (_compile->trace_escape_analysis()) {\n+    if (_compile->directive()->TraceEscapeAnalysisOption) {\n","filename":"src\/hotspot\/share\/opto\/escape.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}