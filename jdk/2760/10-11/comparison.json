{"files":[{"patch":"@@ -1092,1 +1092,1 @@\n-                                         bool do_maximal_compaction) {\n+                                         bool do_maximum_compaction) {\n@@ -1103,1 +1103,1 @@\n-  G1FullCollector collector(this, explicit_gc, do_clear_all_soft_refs, do_maximal_compaction);\n+  G1FullCollector collector(this, explicit_gc, do_clear_all_soft_refs, do_maximum_compaction);\n@@ -1118,1 +1118,3 @@\n-  bool do_maximal_compaction = clear_all_soft_refs;\n+  \/\/ When clear_all_soft_refs is set we want to do a maximum compaction\n+  \/\/ not leaving any dead wood.\n+  bool do_maximum_compaction = clear_all_soft_refs;\n@@ -1121,1 +1123,1 @@\n-                                  do_maximal_compaction);\n+                                  do_maximum_compaction);\n@@ -1163,1 +1165,3 @@\n-    bool do_maximal_compaction = clear_all_soft_refs;\n+    \/\/ When clear_all_soft_refs is set we want to do a maximum compaction\n+    \/\/ not leaving any dead wood.\n+    bool do_maximum_compaction = clear_all_soft_refs;\n@@ -1167,1 +1171,1 @@\n-                                       do_maximal_compaction);\n+                                       do_maximum_compaction);\n@@ -2880,1 +2884,1 @@\n-                                     false \/* do_maximal_compaction *\/);\n+                                     false \/* do_maximum_compaction *\/);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -502,1 +502,2 @@\n-  \/\/ - if do_maximal_compaction is true, full gc will do maximal compaction.\n+  \/\/ - if do_maximum_compaction is true, full gc will do a maximally\n+  \/\/   compacting collection, leaving no dead wood.\n@@ -507,1 +508,1 @@\n-                          bool do_maximal_compaction = false);\n+                          bool do_maximum_compaction);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-                                 bool do_maximal_compaction) :\n+                                 bool do_maximum_compaction) :\n@@ -113,1 +113,1 @@\n-    _scope(heap->g1mm(), explicit_gc, clear_soft_refs, do_maximal_compaction),\n+    _scope(heap->g1mm(), explicit_gc, clear_soft_refs, do_maximum_compaction),\n@@ -233,1 +233,0 @@\n-    \/\/ Pin high live ratio region\n@@ -237,1 +236,0 @@\n-\n@@ -243,2 +241,1 @@\n-    \/\/ Update _region_attr_table after free pinned regions,\n-    \/\/ as the region can not be accessed in G1ResetPinnedClosure.\n+    \/\/ Everything else is processed normally.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+\n@@ -83,1 +84,1 @@\n-                  bool do_maximal_compaction);\n+                  bool do_maximum_compaction);\n@@ -100,1 +101,1 @@\n-  size_t                   hr_live_words(uint hr_index) { return _live_stats[hr_index]._live_words; }\n+  size_t                   live_words(uint region_index) { return _live_stats[region_index]._live_words; }\n@@ -105,1 +106,0 @@\n-  inline bool is_in_pinned_or_closed(uint hr_index) const;\n@@ -107,0 +107,1 @@\n+  inline bool is_in_pinned(uint region_index) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,4 +36,0 @@\n-bool G1FullCollector::is_in_pinned_or_closed(uint hr_index) const {\n-  return _region_attr_table.is_pinned_or_closed(hr_index);\n-}\n-\n@@ -44,0 +40,4 @@\n+bool G1FullCollector::is_in_pinned(uint region_index) const {\n+  return _region_attr_table.is_pinned(region_index);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,5 +45,2 @@\n-    uint hr_index = r->hrm_index();\n-    \/\/ In the prepare phase, we \"pin\" the regions with high survival ratio\n-    \/\/ by _region_attr_table, so here we use _region_attr_table rather than\n-    \/\/ HeapRegion itself to tell whether a region is pinned.\n-    if (!_collector->is_in_pinned_or_closed(hr_index)) {\n+    uint region_index = r->hrm_index();\n+    if (!_collector->is_in_pinned(region_index)) {\n@@ -52,1 +49,1 @@\n-    assert(_collector->hr_live_words(hr_index) > _collector->scope()->hr_live_words_threshold() ||\n+    assert(_collector->live_words(region_index) > _collector->scope()->region_compaction_threshold() ||\n@@ -56,2 +53,1 @@\n-    r->reset_pinned_after_full_gc();\n-\n+    r->reset_not_compacted_after_full_gc();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,0 +34,5 @@\n+\/\/ In particular, the table collects whether a region should be considered pinned\n+\/\/ during full gc (only), and that there are two reasons a\n+\/\/ region is pinned (and excluded from compaction):\n+\/\/ (1) the HeapRegion itself has been pinned at the start of Full GC.\n+\/\/ (2) the occupancy of the region is too high to be considered eligible for compaction.\n@@ -65,4 +70,0 @@\n-  bool is_pinned_or_closed(uint hr_index) const {\n-    return get_by_index(hr_index) >= Pinned;\n-  }\n-\n@@ -74,0 +75,4 @@\n+  bool is_pinned(uint idx) const {\n+    return get_by_index(idx) == Pinned;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCHeapRegionAttr.hpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -44,1 +44,4 @@\n-  if (hr->is_pinned()) {\n+  if (should_compact(hr)) {\n+    assert(!hr->is_humongous(), \"moving humongous objects not supported.\");\n+    prepare_for_compaction(hr);\n+  } else {\n@@ -58,12 +61,2 @@\n-    } else {\n-      \/\/ There are no other pinned regions than humongous or all kinds of archive regions\n-      \/\/ at this time.\n-      assert(hr->is_closed_archive(), \"Only closed archive regions can also be pinned.\");\n-    }\n-  } else {\n-    assert(!hr->is_humongous(), \"moving humongous objects not supported.\");\n-    size_t live_words = _collector->hr_live_words(hr->hrm_index());\n-    size_t live_words_threshold = _collector->scope()->hr_live_words_threshold();\n-\n-    if(live_words <= live_words_threshold) {\n-      prepare_for_compaction(hr);\n+    } else if (hr->is_closed_archive()) {\n+      \/\/ nothing to do with closed archive region\n@@ -73,0 +66,1 @@\n+\n@@ -77,1 +71,1 @@\n-                            hr->hrm_index(), live_words);\n+                            hr->hrm_index(), _collector->live_words(hr->hrm_index()));\n@@ -156,0 +150,13 @@\n+bool G1FullGCPrepareTask::G1CalculatePointersClosure::should_compact(HeapRegion* hr) {\n+  if (hr->is_pinned()) {\n+    return false;\n+  }\n+  size_t live_words = _collector->live_words(hr->hrm_index());\n+  size_t live_words_threshold = _collector->scope()->region_compaction_threshold();\n+  if (live_words <= live_words_threshold) {\n+    return true;\n+  }\n+  \/\/ High live ratio region will not be compacted.\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.cpp","additions":21,"deletions":14,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+    bool should_compact(HeapRegion* hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-                             bool do_maximal_compaction) :\n+                             bool do_maximum_compaction) :\n@@ -44,3 +44,3 @@\n-    _hr_live_words_threshold(do_maximal_compaction ?\n-                               HeapRegion::GrainWords :\n-                               (1 - MarkSweepDeadRatio \/ 100.0) * HeapRegion::GrainWords) {\n+    _region_compaction_threshold(do_maximum_compaction ?\n+                                 HeapRegion::GrainWords :\n+                                 (1 - MarkSweepDeadRatio \/ 100.0) * HeapRegion::GrainWords) {\n@@ -85,2 +85,2 @@\n-size_t G1FullGCScope::hr_live_words_threshold() {\n-  return _hr_live_words_threshold;\n+size_t G1FullGCScope::region_compaction_threshold() {\n+  return _region_compaction_threshold;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  size_t                  _hr_live_words_threshold;\n+  size_t                  _region_compaction_threshold;\n@@ -71,1 +71,1 @@\n-  size_t hr_live_words_threshold();\n+  size_t region_compaction_threshold();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,2 +49,2 @@\n-  uint hr_index = G1CollectedHeap::heap()->addr_to_region(cast_from_oop<HeapWord*>(obj));\n-  add_live_words(hr_index, (size_t) obj->size());\n+  uint region_index = G1CollectedHeap::heap()->addr_to_region(cast_from_oop<HeapWord*>(obj));\n+  add_live_words(region_index, (size_t) obj->size());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionMarkStatsCache.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,3 @@\n-  _gc_succeeded = g1h->do_full_collection(true \/* explicit_gc *\/, false \/* clear_all_soft_refs *\/);\n+  _gc_succeeded = g1h->do_full_collection(true  \/* explicit_gc *\/,\n+                                          false \/* clear_all_soft_refs *\/,\n+                                          false \/* do_maximum_compaction *\/);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1VMOperations.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -306,0 +306,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1_globals.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-  void reset_pinned_after_full_gc();\n+  void reset_not_compacted_after_full_gc();\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -201,1 +201,1 @@\n-inline void HeapRegion::reset_pinned_after_full_gc() {\n+inline void HeapRegion::reset_not_compacted_after_full_gc() {\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -675,4 +675,4 @@\n-          \"G1 full gc treats this as dead bytes upper threshold to skip \"   \\\n-          \"compaction of heap regions, i.e. if a heap region has dead \"     \\\n-          \"bytes less than this value, then this region will not be \"       \\\n-          \"compacted during G1 full GC.\")                                   \\\n+          \"G1 full gc treats this as an allowed garbage threshold to skip \" \\\n+          \"compaction of heap regions, i.e. if a heap region has less \"     \\\n+          \"garbage than this value, then the region will not be compacted\"  \\\n+          \"during G1 full GC.\")                                             \\\n","filename":"src\/hotspot\/share\/gc\/shared\/gc_globals.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}