{"files":[{"patch":"@@ -1792,1 +1792,1 @@\n-    marking_phase(vmthread_cm, maximum_heap_compaction, &_gc_tracer);\n+    marking_phase(vmthread_cm, &_gc_tracer);\n@@ -2077,1 +2077,0 @@\n-                                      bool maximum_heap_compaction,\n@@ -2282,1 +2281,0 @@\n-    MutableSpace* const space = space_info->space();\n@@ -3092,6 +3090,0 @@\n-\/\/\n-\/\/ For more details, please refer to ยง4.2 of the VEE'19 paper:\n-\/\/ Haoyu Li, Mingyu Wu, Binyu Zang, and Haibo Chen. 2019. ScissorGC: scalable and efficient\n-\/\/ compaction for Java full garbage collection. In Proceedings of the 15th ACM SIGPLAN\/SIGOPS\n-\/\/ International Conference on Virtual Execution Environments (VEE 2019). ACM, New York, NY, USA,\n-\/\/ 108-121. DOI: https:\/\/doi.org\/10.1145\/3313808.3313820\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -964,0 +964,19 @@\n+\/\/\n+\/\/ During compaction, there is a natural task dependency among regions because\n+\/\/ destination regions may also be source regions themselves.  Consequently, the\n+\/\/ destination regions are not available for processing until all live objects\n+\/\/ within them are evacuated to their destinations. These dependencies lead to\n+\/\/ limited thread utilization as threads spin waiting on regions to be ready.\n+\/\/ Shadow regions are utilized to address these region dependencies. The basic\n+\/\/ idea is that, if a region is unavailable because it still contains live\n+\/\/ objects  and thus cannot serve as a destination momentarily, the GC thread\n+\/\/ may allocate a shadow region as a substitute destination and directly copy\n+\/\/ live objects into this shadow region. Live objects in the shadow region will\n+\/\/ be copied into the target destination region when it becomes available.\n+\/\/\n+\/\/ For more details on shadow regions, please refer to ยง4.2 of the VEE'19 paper:\n+\/\/ Haoyu Li, Mingyu Wu, Binyu Zang, and Haibo Chen. 2019. ScissorGC: scalable\n+\/\/ and efficient compaction for Java full garbage collection. In Proceedings of\n+\/\/ the 15th ACM SIGPLAN\/SIGOPS International Conference on Virtual Execution\n+\/\/ Environments (VEE 2019). ACM, New York, NY, USA, 108-121. DOI:\n+\/\/ https:\/\/doi.org\/10.1145\/3313808.3313820\n@@ -1048,1 +1067,0 @@\n-                            bool maximum_heap_compaction,\n@@ -1117,1 +1135,0 @@\n-  static void compact_perm(ParCompactionManager* cm);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.hpp","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"}]}