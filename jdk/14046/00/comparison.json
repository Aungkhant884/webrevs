{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1097,0 +1097,3 @@\n+                if (!it.hasTag(CLASS)) {\n+                    continue;\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Modules.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8133884 8162711 8133896 8172158 8172262 8173636 8175119 8189747 8236842 8254023 8263432\n+ * @bug 8133884 8162711 8133896 8172158 8172262 8173636 8175119 8189747 8236842 8254023 8263432 8305225\n@@ -2136,0 +2136,88 @@\n+    @Test\n+    public void testCreateProvidesWithAP(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path m1 = src.resolve(\"m\");\n+\n+        tb.writeJavaFiles(m1,\n+                          \"\"\"\n+                          module m {\n+                              provides api1.Api with test.Test;\n+                              uses api1.Api;\n+                              uses api2.Api;\n+                          }\n+                          \"\"\");\n+\n+        Path classes = base.resolve(\"classes\");\n+        Files.createDirectories(classes);\n+\n+        List<String> expectedErrors = List.of(\n+                \"module-info.java:2:18: compiler.err.doesnt.exist: api1\",\n+                \"module-info.java:2:32: compiler.err.doesnt.exist: test\",\n+                \"module-info.java:3:14: compiler.err.doesnt.exist: api1\",\n+                \"module-info.java:4:14: compiler.err.doesnt.exist: api2\",\n+                \"4 errors\");\n+        List<String> actualErrors = new JavacTask(tb)\n+                .options(\"-XDrawDiagnostics\")\n+                .outdir(classes)\n+                .files(findJavaFiles(m1))\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(OutputKind.DIRECT);\n+\n+        tb.checkEqual(expectedErrors, actualErrors);\n+\n+        new JavacTask(tb)\n+                .options(\"-processor\", CreateProvidesWithAP.class.getName())\n+                .outdir(classes)\n+                .files(findJavaFiles(m1))\n+                .run()\n+                .writeAll();\n+    }\n+\n+    @SupportedAnnotationTypes(\"*\")\n+    public static final class CreateProvidesWithAP extends AbstractProcessor {\n+\n+        int round;\n+\n+        @Override\n+        public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+            processingEnv.getElementUtils().getModuleElement(\"m\").getDirectives();\n+            if (round++ == 0) {\n+                try (Writer w = processingEnv.getFiler().createSourceFile(\"test.Test\").openWriter()) {\n+                    w.append(\"\"\"\n+                             package test;\n+                             public class Test implements api1.Api {\n+                             }\n+                             \"\"\");\n+                } catch (IOException ex) {\n+                    throw new IllegalStateException(ex);\n+                }\n+                try (Writer w = processingEnv.getFiler().createSourceFile(\"api1.Api\").openWriter()) {\n+                    w.append(\"\"\"\n+                             package api1;\n+                             public interface Api {\n+                             }\n+                             \"\"\");\n+                } catch (IOException ex) {\n+                    throw new IllegalStateException(ex);\n+                }\n+                try (Writer w = processingEnv.getFiler().createSourceFile(\"api2.Api\").openWriter()) {\n+                    w.append(\"\"\"\n+                             package api2;\n+                             public interface Api {\n+                             }\n+                             \"\"\");\n+                } catch (IOException ex) {\n+                    throw new IllegalStateException(ex);\n+                }\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public SourceVersion getSupportedSourceVersion() {\n+            return SourceVersion.latest();\n+        }\n+\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/modules\/AnnotationProcessing.java","additions":90,"deletions":2,"binary":false,"changes":92,"status":"modified"}]}