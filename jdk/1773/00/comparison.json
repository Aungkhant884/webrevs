{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,1 +87,1 @@\n-  JMM_TOTAL_CLASSLOAD_TIME_MS        = 103,  \/* Accumulated VM class loader time (TraceClassLoadingTime) *\/\n+  JMM_TOTAL_CLASSLOAD_TIME_MS        = 103,  \/* Accumulated VM class loader time *\/\n","filename":"src\/hotspot\/share\/include\/jmm.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -521,1 +521,0 @@\n-  { \"UseMembar\",                    JDK_Version::jdk(10), JDK_Version::jdk(12), JDK_Version::undefined() },\n@@ -540,9 +539,2 @@\n-  { \"PermSize\",                      JDK_Version::undefined(), JDK_Version::jdk(8),  JDK_Version::undefined() },\n-  { \"MaxPermSize\",                   JDK_Version::undefined(), JDK_Version::jdk(8),  JDK_Version::undefined() },\n-  { \"SharedReadWriteSize\",           JDK_Version::undefined(), JDK_Version::jdk(10), JDK_Version::undefined() },\n-  { \"SharedReadOnlySize\",            JDK_Version::undefined(), JDK_Version::jdk(10), JDK_Version::undefined() },\n-  { \"SharedMiscDataSize\",            JDK_Version::undefined(), JDK_Version::jdk(10), JDK_Version::undefined() },\n-  { \"SharedMiscCodeSize\",            JDK_Version::undefined(), JDK_Version::jdk(10), JDK_Version::undefined() },\n-#ifdef BSD\n-  { \"UseBsdPosixThreadCPUClocks\",    JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"UseOprofile\",                   JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+#ifdef ASSERT\n+  { \"DummyObsoleteTestFlag\",        JDK_Version::undefined(), JDK_Version::jdk(17), JDK_Version::undefined() },\n@@ -550,26 +542,0 @@\n-  { \"PrintVMQWaitTime\",              JDK_Version::jdk(15), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"UseNewFieldLayout\",             JDK_Version::jdk(15), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"UseSemaphoreGCThreadsSynchronization\", JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"ForceNUMA\",                     JDK_Version::jdk(15), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"InitialBootClassLoaderMetaspaceSize\", JDK_Version::jdk(15), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"UseLargePagesInMetaspace\",            JDK_Version::jdk(15), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"InsertMemBarAfterArraycopy\",    JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"Debugging\",                     JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"UseRDPCForConstantTableBase\",   JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"VerifyMergedCPBytecodes\",       JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"PrintSharedSpaces\",             JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"TraceBiasedLocking\",            JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"TraceClassLoading\",             JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"TraceClassLoadingPreorder\",     JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"TraceClassPaths\",               JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"TraceClassResolution\",          JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"TraceClassUnloading\",           JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"TraceExceptions\",               JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"TraceInvokeDynamic\",            JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"TraceLoaderConstraints\",        JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"TraceMethodHandles\",            JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"TraceMonitorInflation\",         JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"TraceSafepointCleanupTime\",     JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"TraceJVMTIObjectTagging\",       JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"TraceRedefineClasses\",          JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n-  { \"PrintJNIResolving\",             JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":2,"deletions":36,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-.TH \"JAVA\" \"1\" \"2020\" \"JDK 16\" \"JDK Commands\"\n+.TH \"JAVA\" \"1\" \"2020\" \"JDK 17\" \"JDK Commands\"\n@@ -184,1 +184,1 @@\n-(\\f[CB]16\\f[R]) and a limited number of previous releases, detailed in the\n+(\\f[CB]17\\f[R]) and a limited number of previous releases, detailed in the\n@@ -1123,66 +1123,0 @@\n-.B \\f[CB]\\-\\-illegal\\-access=\\f[R]\\f[I]parameter\\f[R]\n-When present at run time, \\f[CB]\\-\\-illegal\\-access=\\f[R] takes a keyword\n-\\f[I]parameter\\f[R] to specify a mode of operation:\n-.RS\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] This option will be removed in a future release.\n-.RE\n-.IP \\[bu] 2\n-\\f[CB]permit\\f[R]: This mode opens each package in each module in the\n-run\\-time image to code in all unnamed modules ( such as code on the\n-class path), if that package existed in JDK 8.\n-This enables both static access, (for example, by compiled bytecode, and\n-deep reflective access) through the platform\\[aq]s various reflection\n-APIs.\n-The first reflective\\-access operation to any such package causes a\n-warning to be issued.\n-However, no warnings are issued after the first occurrence.\n-This single warning describes how to enable further warnings.\n-This mode is the default for the current JDK but will change in a future\n-release.\n-.IP \\[bu] 2\n-\\f[CB]warn\\f[R]: This mode is identical to \\f[CB]permit\\f[R] except that a\n-warning message is issued for each illegal reflective\\-access operation.\n-.IP \\[bu] 2\n-\\f[CB]debug\\f[R]: This mode is identical to \\f[CB]warn\\f[R] except that both\n-a warning message and a stack trace are issued for each illegal\n-reflective\\-access operation.\n-.IP \\[bu] 2\n-\\f[CB]deny\\f[R]: This mode disables all illegal\\-access operations except\n-for those enabled by other command\\-line options, such as\n-\\f[CB]\\-\\-add\\-opens\\f[R].\n-This mode will become the default in a future release.\n-.PP\n-The default mode, \\f[CB]\\-\\-illegal\\-access=permit\\f[R], is intended to\n-make you aware of code on the class path that reflectively accesses any\n-JDK\\-internal APIs at least once.\n-To learn about all such accesses, you can use the \\f[CB]warn\\f[R] or the\n-\\f[CB]debug\\f[R] modes.\n-For each library or framework on the class path that requires illegal\n-access, you have two options:\n-.IP \\[bu] 2\n-If the component\\[aq]s maintainers have already released a fixed version\n-that no longer uses JDK\\-internal APIs then you can consider upgrading\n-to that version.\n-.IP \\[bu] 2\n-If the component still needs to be fixed, then you can contact its\n-maintainers and ask them to replace their use of JDK\\-internal APIs with\n-the proper exported APIs.\n-.PP\n-If you must continue to use a component that requires illegal access,\n-then you can eliminate the warning messages by using one or more\n-\\f[CB]\\-\\-add\\-opens\\f[R] options to open only those internal packages to\n-which access is required.\n-.PP\n-To verify that your application is ready for a future version of the\n-JDK, run it with \\f[CB]\\-\\-illegal\\-access=deny\\f[R] along with any\n-necessary \\f[CB]\\-\\-add\\-opens\\f[R] options.\n-Any remaining illegal\\-access errors will most likely be due to static\n-references from compiled code to JDK\\-internal APIs.\n-You can identify those by running the \\f[B]jdeps\\f[R] tool with the\n-\\f[CB]\\-\\-jdk\\-internals\\f[R] option.\n-For performance reasons, the current JDK does not issue warnings for\n-illegal static\\-access operations.\n-.RE\n-.TP\n@@ -3940,0 +3874,62 @@\n+.B \\f[CB]\\-\\-illegal\\-access=\\f[R]\\f[I]parameter\\f[R]\n+When present at run time, \\f[CB]\\-\\-illegal\\-access=\\f[R] takes a keyword\n+\\f[I]parameter\\f[R] to specify a mode of operation:\n+.RS\n+.RS\n+.PP\n+\\f[B]Note:\\f[R] This option will be removed in a future release.\n+.RE\n+.IP \\[bu] 2\n+\\f[CB]permit\\f[R]: This mode opens each package in each module in the\n+run\\-time image to code in all unnamed modules ( such as code on the\n+class path), if that package existed in JDK 8.\n+This enables both static access, (for example, by compiled bytecode, and\n+deep reflective access) through the platform\\[aq]s various reflection\n+APIs.\n+The first reflective\\-access operation to any such package causes a\n+warning to be issued.\n+However, no warnings are issued after the first occurrence.\n+This single warning describes how to enable further warnings.\n+.IP \\[bu] 2\n+\\f[CB]warn\\f[R]: This mode is identical to \\f[CB]permit\\f[R] except that a\n+warning message is issued for each illegal reflective\\-access operation.\n+.IP \\[bu] 2\n+\\f[CB]debug\\f[R]: This mode is identical to \\f[CB]warn\\f[R] except that both\n+a warning message and a stack trace are issued for each illegal\n+reflective\\-access operation.\n+.IP \\[bu] 2\n+\\f[CB]deny\\f[R]: This mode disables all illegal\\-access operations except\n+for those enabled by other command\\-line options, such as\n+\\f[CB]\\-\\-add\\-opens\\f[R].\n+This mode is the default.\n+.PP\n+If your application does not work with the default mode of\n+\\f[CB]\\-\\-illegal\\-access=deny\\f[R] then you can learn more about what is\n+going on with the \\f[CB]warn\\f[R] and \\f[CB]debug\\f[R] modes.\n+For each library or framework on the class path that requires illegal\n+access, you have two options:\n+.IP \\[bu] 2\n+If the component\\[aq]s maintainers have already released a fixed version\n+that no longer uses JDK\\-internal APIs then you can consider upgrading\n+to that version.\n+.IP \\[bu] 2\n+If the component still needs to be fixed, then you can contact its\n+maintainers and ask them to replace their use of JDK\\-internal APIs with\n+the proper exported APIs.\n+.PP\n+If you must continue to use a component that requires illegal access,\n+then you can eliminate the warning messages by using one or more\n+\\f[CB]\\-\\-add\\-opens\\f[R] options to open only those internal packages to\n+which access is required.\n+.PP\n+To verify that your application is ready for a future version of the\n+JDK, run it with \\f[CB]\\-\\-illegal\\-access=deny\\f[R] along with any\n+necessary \\f[CB]\\-\\-add\\-opens\\f[R] options.\n+Any remaining illegal\\-access errors will most likely be due to static\n+references from compiled code to JDK\\-internal APIs.\n+You can identify those by running the \\f[B]jdeps\\f[R] tool with the\n+\\f[CB]\\-\\-jdk\\-internals\\f[R] option.\n+For performance reasons, the current JDK does not issue warnings for\n+illegal static\\-access operations.\n+.RE\n+.TP\n@@ -4009,0 +4005,46 @@\n+.B \\f[CB]\\-XX:+UseBiasedLocking\\f[R]\n+Enables the use of biased locking.\n+Some applications with significant amounts of uncontended\n+synchronization may attain significant speedups with this flag enabled,\n+but applications with certain patterns of locking may see slowdowns.\n+.RS\n+.PP\n+By default, this option is disabled.\n+.RE\n+.SH OBSOLETE JAVA OPTIONS\n+.PP\n+These \\f[CB]java\\f[R] options are still accepted but ignored, and a\n+warning is issued when they\\[aq]re used.\n+.PP\n+None in JDK 17.\n+.SH REMOVED JAVA OPTIONS\n+.PP\n+These \\f[CB]java\\f[R] options have been removed in JDK 17 and using them\n+results in an error of:\n+.RS\n+.PP\n+\\f[CB]Unrecognized\\ VM\\ option\\f[R] \\f[I]option\\-name\\f[R]\n+.RE\n+.TP\n+.B \\f[CB]\\-XX:+UseMembar\\f[R]\n+Enabled issuing membars on thread\\-state transitions.\n+This option was disabled by default on all platforms except ARM servers,\n+where it was enabled.\n+.RS\n+.RE\n+.TP\n+.B \\f[CB]\\-XX:MaxPermSize=\\f[R]\\f[I]size\\f[R]\n+Sets the maximum permanent generation space size (in bytes).\n+This option was deprecated in JDK 8 and superseded by the\n+\\f[CB]\\-XX:MaxMetaspaceSize\\f[R] option.\n+.RS\n+.RE\n+.TP\n+.B \\f[CB]\\-XX:PermSize=\\f[R]\\f[I]size\\f[R]\n+Sets the space (in bytes) allocated to the permanent generation that\n+triggers a garbage collection if it\\[aq]s exceeded.\n+This option was deprecated in JDK 8 and superseded by the\n+\\f[CB]\\-XX:MetaspaceSize\\f[R] option.\n+.RS\n+.RE\n+.TP\n@@ -4056,52 +4098,0 @@\n-.TP\n-.B \\f[CB]\\-XX:+UseBiasedLocking\\f[R]\n-Enables the use of biased locking.\n-Some applications with significant amounts of uncontended\n-synchronization may attain significant speedups with this flag enabled,\n-but applications with certain patterns of locking may see slowdowns.\n-.RS\n-.PP\n-By default, this option is disabled.\n-.RE\n-.SH OBSOLETE JAVA OPTIONS\n-.PP\n-These \\f[CB]java\\f[R] options are still accepted but ignored, and a\n-warning is issued when they\\[aq]re used.\n-.TP\n-.B \\f[CB]\\-XX:+UseMembar\\f[R]\n-Enabled issuing membars on thread\\-state transitions.\n-This option was disabled by default on all platforms except ARM servers,\n-where it was enabled.\n-.RS\n-.RE\n-.TP\n-.B \\f[CB]\\-XX:MaxPermSize=\\f[R]\\f[I]size\\f[R]\n-Sets the maximum permanent generation space size (in bytes).\n-This option was deprecated in JDK 8 and superseded by the\n-\\f[CB]\\-XX:MaxMetaspaceSize\\f[R] option.\n-.RS\n-.RE\n-.TP\n-.B \\f[CB]\\-XX:PermSize=\\f[R]\\f[I]size\\f[R]\n-Sets the space (in bytes) allocated to the permanent generation that\n-triggers a garbage collection if it\\[aq]s exceeded.\n-This option was deprecated in JDK 8 and superseded by the\n-\\f[CB]\\-XX:MetaspaceSize\\f[R] option.\n-.RS\n-.RE\n-.SH REMOVED JAVA OPTIONS\n-.PP\n-These \\f[CB]java\\f[R] options have been removed in JDK 15 and using them\n-results in an error of:\n-.RS\n-.PP\n-\\f[CB]Unrecognized\\ VM\\ option\\f[R] \\f[I]option\\-name\\f[R]\n-.RE\n-.TP\n-.B \\f[CB]\\-XX:+UseParallelOldGC\\f[R]\n-Enables the use of the parallel garbage collector for full GCs.\n-By default, this option is disabled.\n-Enabling it automatically enables the \\f[CB]\\-XX:+UseParallelGC\\f[R]\n-option.\n-.RS\n-.RE\n@@ -4112,0 +4102,3 @@\n+\\f[B]Java Platform, Standard Edition Tools Reference, Release 16\\f[R]\n+[https:\/\/docs.oracle.com\/en\/java\/javase\/16\/docs\/specs\/man\/java.html]\n+.IP \\[bu] 2\n@@ -4797,0 +4790,4 @@\n+These legacy flags are no longer recognized and will cause an error if\n+used directly.\n+Use their unified logging equivalent instead.\n+.PP\n","filename":"src\/java.base\/share\/man\/java.1","additions":117,"deletions":120,"binary":false,"changes":237,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @requires vm.debug == true\n@@ -39,0 +40,2 @@\n+    String flag = \"DummyObsoleteTestFlag\";\n+\n@@ -41,1 +44,1 @@\n-        \"-XX:UseMembarPlusJunk\", \"-version\");\n+        \"-XX:\" + flag + \"PlusJunk\", \"-version\");\n@@ -44,1 +47,1 @@\n-    output.shouldContain(\"Unrecognized VM option 'UseMembarPlusJunk'\"); \/\/ Must identify bad option.\n+    output.shouldContain(\"Unrecognized VM option '\" + flag + \"PlusJunk'\"); \/\/ Must identify bad option.\n@@ -49,1 +52,1 @@\n-        \"-XX:+UseMembar\", \"-version\");\n+        \"-XX:+\" + flag, \"-version\");\n@@ -53,1 +56,1 @@\n-    output2.shouldContain(\"UseMembar\");\n+    output2.shouldContain(flag);\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/ObsoleteFlagErrorMessage.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8167446\n- * @summary Commandline options PermSize and MaxPermSize should be recognized but ignored.\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @run driver PermGenFlagsTest\n- *\/\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class PermGenFlagsTest {\n-    public static void main(String[] args) throws Exception {\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-XX:PermSize=22k\",\n-                                                                  \"-version\");\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        output.shouldContain(\"Ignoring option PermSize; support was removed in 8.0\");\n-        output.shouldHaveExitValue(0);\n-\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:MaxPermSize=22k\",\n-                                                   \"-version\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldContain(\"Ignoring option MaxPermSize; support was removed in 8.0\");\n-        output.shouldHaveExitValue(0);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/PermGenFlagsTest.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -52,1 +52,0 @@\n-        \/\/ (1) Default VM arguments\n@@ -54,7 +53,0 @@\n-\n-        \/\/ (2) Use the now deprecated VM arguments. They should have no effect.\n-        test(\"-Xlog:cds=debug\",\n-             \"-XX:SharedReadWriteSize=128M\",\n-             \"-XX:SharedReadOnlySize=128M\",\n-             \"-XX:SharedMiscDataSize=128M\",\n-             \"-XX:SharedMiscCodeSize=128M\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/SpaceUtilizationCheck.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -120,1 +120,0 @@\n-                \"-XX:SharedReadOnlySize=30m\",\n@@ -127,1 +126,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/GCSharedStringsDuringDump.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}