{"files":[{"patch":"@@ -1,32 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8278185\n- * @summary Test matching method of ImageStringsReader\n- * @library patch-src\n- * @modules java.base\/jdk.internal.jimage\n- * @build java.base\/jdk.internal.jimage.ImageStringsMatchTest\n- * @run main\/othervm java.base\/jdk.internal.jimage.ImageStringsMatchTest\n- *\/\n","filename":"test\/jdk\/jdk\/internal\/jimage\/JImageStringsMatchTestRun.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * (No at-test tag because it's run by JImageStringsMatchTestRun)\n- *\/\n-\n-package jdk.internal.jimage;\n-\n-import java.nio.ByteBuffer;\n-import java.nio.charset.StandardCharsets;\n-import jdk.internal.jimage.ImageStringsReader;\n-\n-public class ImageStringsMatchTest {\n-    private static String[] testStrings = {\n-        \"\\u3042\",\n-        \"\/test\/\\u3042\",\n-        \"\\u3042\/test\",\n-        \"\/test\/\\u3042\/test\",\n-    };\n-\n-    private static void matchTest(String str) {\n-        byte[] b = str.getBytes(StandardCharsets.UTF_8);\n-        ByteBuffer buf = ByteBuffer.allocate(b.length + 1);\n-        buf.put(b);\n-        buf.put((byte)0); \/\/ Explicit null termination is required\n-        int match = ImageStringsReader.stringFromByteBufferMatches(buf, 0, str, 0);\n-        if (match != str.length()) {\n-            throw new RuntimeException(\"Unexpected mismatch for \\\"\" + str + \"\\\"\");\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        for (String str: testStrings) {\n-            matchTest(str);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/jdk\/internal\/jimage\/patch-src\/java.base\/jdk\/internal\/jimage\/ImageStringsMatchTest.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+import jdk.internal.jimage.BasicImageReader;\n+import jdk.internal.jimage.ImageLocation;\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n+import jdk.test.lib.util.JarBuilder;\n+\n+import tests.Helper;\n+import tests.JImageGenerator;\n+import tests.Result;\n+\n+\/*\n+ * @test\n+ * @bug 8278185\n+ * @summary Test non-ASCII path in custom JRE\n+ * @library ..\/lib\n+ *          \/test\/lib\n+ * @modules java.base\/jdk.internal.jimage\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ *          jdk.jlink\/jdk.tools.jimage\n+ * @build tests.*\n+ * @run main\/othervm JImageStringsTest\n+ *\/\n+\n+public class JImageStringsTest {\n+    private final static String moduleName = \"A_module\";\n+    private final static String packageName = \"test.\\u3042\"; \/\/non-ASCII\n+    private final static String className = \"A\";\n+    private final static String fullName = packageName + \".\" + className;\n+    private static Helper helper;\n+\n+    public static void main(String[] args) throws Exception {\n+        helper = Helper.newHelper();\n+        if (helper == null) {\n+            System.err.println(\"Test not run\");\n+            return;\n+        }\n+\n+        String source =\n+            \"package \"+packageName+\";\" +\n+            \"public class \"+className+\" {\" +\n+            \"    public static void main(String[] args) {}\" +\n+            \"}\";\n+        String moduleInfo = \"module \" + moduleName + \" {}\";\n+\n+        \/\/ Using InMemory features to avoid generating non-ASCII name file\n+        byte[] byteA = InMemoryJavaCompiler.compile(fullName, source);\n+        byte[] byteModule = InMemoryJavaCompiler.compile(\n+                \"module-info\", moduleInfo);\n+\n+        Path jarDir = helper.getJarDir();\n+        JarBuilder jb = new JarBuilder(\n+                jarDir.resolve(moduleName + \".jar\").toString());\n+        jb.addEntry(fullName.replace(\".\",\"\/\") + \".class\", byteA);\n+        jb.addEntry(\"module-info.class\", byteModule);\n+        jb.build();\n+\n+        Path outDir = helper.createNewImageDir(moduleName);\n+\n+        Result result = JImageGenerator.getJLinkTask()\n+                .modulePath(helper.defaultModulePath())\n+                .output(outDir)\n+                .addMods(moduleName)\n+                .call();\n+        Path testImage = result.assertSuccess();\n+\n+        BasicImageReader bir = BasicImageReader.open(\n+                testImage.resolve(\"lib\").resolve(\"modules\"));\n+        ImageLocation loc = bir.findLocation(moduleName,\n+                fullName.replace(\".\",\"\/\") + \".class\");\n+        if (loc == null) {\n+            throw new RuntimeException(\"Failed to find \" +\n+                    fullName + \" in module \" +moduleName);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jimage\/JImageStringsTest.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}