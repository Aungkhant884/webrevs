{"files":[{"patch":"@@ -69,1 +69,2 @@\n-    Names of the annotation processors to run; bypasses default discovery process\n+    Names of the annotation processors to run;\\n\\\n+    bypasses default discovery process\n@@ -88,1 +89,2 @@\n-    Generate class files suitable for the specified Java SE release. Supported releases: {0}\n+    Generate class files suitable for the specified Java SE release.\\n\\\n+    Supported releases: {0}\n@@ -90,1 +92,2 @@\n-    Compile for the specified Java SE release. Supported releases: {0}\n+    Compile for the specified Java SE release.\\n\\\n+    Supported releases: {0}\n@@ -92,1 +95,2 @@\n-    Provide source compatibility with the specified Java SE release. Supported releases: {0}\n+    Provide source compatibility with the specified Java SE release.\\n\\\n+    Supported releases: {0}\n@@ -98,1 +102,1 @@\n-    Specify whether or not to generate class files for implicitly referenced files\n+    Specify whether to generate class files for implicitly referenced files\n@@ -294,2 +298,3 @@\n-    where <group> is one of accessibility, html, missing, reference, or syntax,\\n\\\n-    and <access> is one of public, protected, package, or private.\n+    where <group> is one of accessibility, html, missing, reference,\\n\\\n+    or syntax, and <access> is one of public, protected, package,\\n\\\n+    or private.\n@@ -301,4 +306,4 @@\n-    Enable or disable checks in specific packages. Each <package> is either the\\n\\\n-    qualified name of a package or a package name prefix followed by '.*', which\\n\\\n-    expands to all sub-packages of the given package. Each <package> can be prefixed\\n\\\n-    with '-' to disable checks for the specified package or packages.\n+    Enable or disable checks in specific packages. Each <package> is either\\n\\\n+    the qualified name of a package or a package name prefix followed by '.*',\\n\\\n+    which expands to all sub-packages of the given package. Each <package>\\n\\\n+    can be prefixed with '-' to disable checks for the specified package(s).\n@@ -321,1 +326,2 @@\n-    Print information about which annotations a processor is asked to process\n+    Print information about which annotations a processor\\n\\\n+    is asked to process\n@@ -325,1 +331,2 @@\n-    Specify which file to read when both a source file and class file are found for an implicitly compiled class\n+    Specify which file to read when both a source file and class file\\n\\\n+    are found for an implicitly compiled class\n@@ -327,1 +334,2 @@\n-    Enable preview language features. To be used in conjunction with either -source or --release.\n+    Enable preview language features.\\n\\\n+    To be used in conjunction with either -source or --release.\n@@ -333,2 +341,3 @@\n-    Specify a package to be considered as exported from its defining module\\n\\\n-    to additional modules, or to all unnamed modules if <other-module> is ALL-UNNAMED.\n+    Specify a package to be considered as exported from its\\n\\\n+    defining module to additional modules, or to all unnamed modules\\n\\\n+    if <other-module> is ALL-UNNAMED.\n@@ -338,2 +347,3 @@\n-    Specify additional modules to be considered as required by a given module.\\n\\\n-    <other-module> may be ALL-UNNAMED to require the unnamed module.\n+    Specify additional modules to be considered as required by\\n\\\n+    a given module; <other-module> may be ALL-UNNAMED to require\\n\\\n+    the unnamed module.\n@@ -348,2 +358,2 @@\n-    Root modules to resolve in addition to the initial modules, or all modules\\n\\\n-    on the module path if <module> is ALL-MODULE-PATH.\n+    Root modules to resolve in addition to the initial modules,\\n\\\n+    or all modules on the module path if <module> is ALL-MODULE-PATH.\n@@ -363,1 +373,2 @@\n-    Fallback target module for files created by annotation processors, if none specified or inferred.\n+    Fallback target module for files created by annotation processors,\\n\\\n+    if none specified or inferred.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac.properties","additions":32,"deletions":21,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8296420\n+ * @summary Verify command line help output does not exceed maximum column width\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main HelpOutputColumnWidthTest\n+*\/\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+\n+public class HelpOutputColumnWidthTest extends TestRunner {\n+\n+    public static final int MAX_COLUMNS = 80;\n+\n+    protected ToolBox tb;\n+\n+    public HelpOutputColumnWidthTest() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    @Test\n+    public void testHelp(Path base) throws Exception {\n+        this.checkColumnWidth(\"--help\");\n+    }\n+\n+    @Test\n+    public void testHelpExtra(Path base) throws Exception {\n+        this.checkColumnWidth(\"--help-extra\");\n+    }\n+\n+    private void checkColumnWidth(String... args) throws Exception {\n+\n+        \/\/ Compile source\n+        List<String> log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .options(args)\n+                .run(Task.Expect.SUCCESS)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        \/\/ Check column width\n+        final String tooLongLines = log.stream()\n+          .filter(line -> line.length() > MAX_COLUMNS)\n+          .map(String::trim)\n+          .collect(Collectors.joining(\"]\\n    [\"));\n+        if (!tooLongLines.isEmpty())\n+            throw new Exception(\"output line(s) too long:\\n    [\" + tooLongLines + \"]\");\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new HelpOutputColumnWidthTest().runTests();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/options\/HelpOutputColumnWidthTest.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}