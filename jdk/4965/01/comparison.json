{"files":[{"patch":"@@ -2240,2 +2240,1 @@\n-            Type result = asType().getReceiverType();\n-            return (result == null) ? Type.noType : result;\n+            return asType().getReceiverType();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1489,1 +1489,3 @@\n-        public Type              getReceiverType()   { return recvtype; }\n+        public Type              getReceiverType()   {\n+            return (recvtype == null) ? Type.noType : recvtype;\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8222369\n+ * @bug 8222369 8225488\n@@ -83,0 +83,15 @@\n+\n+        \/\/ Get kind from the type of the executable directly\n+        TypeKind kindFromType = new TypeKindVisitor<TypeKind, Object>(null) {\n+            @Override\n+            public TypeKind visitExecutable(ExecutableType t, Object p) {\n+                return t.getReceiverType().getKind();\n+            }\n+        }.visit(executable.asType());\n+\n+        if (kindFromType != expectedKind) {\n+            messager.printMessage(ERROR,\n+                                  String.format(\"Unexpected TypeKind on executable's asType() of %s:\" +\n+                                                \" expected %s\\t got %s%n\",\n+                                                executable, expectedKind, kindFromType));\n+        }\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestExecutableReceiverType.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,1 @@\n+import javax.lang.model.type.TypeKind;\n@@ -329,1 +330,1 @@\n-            scan(t.getReceiverType());\n+            scan(t.getReceiverType(), p);\n@@ -474,1 +475,1 @@\n-    @Test(posn=2, annoType=TA.class, expect=\"4\")\n+    @Test(posn=3, annoType=TA.class, expect=\"4\")\n@@ -480,1 +481,1 @@\n-    @Test(posn=3, annoType=TA.class, expect=\"6\")\n+    @Test(posn=4, annoType=TA.class, expect=\"6\")\n@@ -484,1 +485,1 @@\n-    @Test(posn=7, annoType=TA.class, expect=\"8\")\n+    @Test(posn=8, annoType=TA.class, expect=\"8\")\n@@ -531,2 +532,2 @@\n-    @Test(posn=5, annoType = TA.class, expect = \"25\")\n-    @Test(posn=5, annoType = TB.class, expect = \"26\")\n+    @Test(posn=6, annoType = TA.class, expect = \"25\")\n+    @Test(posn=6, annoType = TB.class, expect = \"26\")\n@@ -542,1 +543,1 @@\n-    @Test(posn=5, annoType = TB.class, expect = \"41\")\n+    @Test(posn=6, annoType = TB.class, expect = \"41\")\n@@ -551,2 +552,2 @@\n-    @Test(posn=5, annoType = TA.class, expect = \"60\")\n-    @Test(posn=5, annoType = TB.class, expect = \"61\")\n+    @Test(posn=6, annoType = TA.class, expect = \"60\")\n+    @Test(posn=6, annoType = TB.class, expect = \"61\")\n@@ -562,1 +563,1 @@\n-    @Test(posn=5, annoType = TB.class, expect = \"81\")\n+    @Test(posn=6, annoType = TB.class, expect = \"81\")\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/type\/BasicAnnoTests.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"}]}