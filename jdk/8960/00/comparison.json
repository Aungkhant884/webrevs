{"files":[{"patch":"@@ -36,1 +36,0 @@\n-import java.util.HashSet;\n@@ -43,1 +42,0 @@\n-import java.util.StringTokenizer;\n@@ -66,2 +64,0 @@\n-    \/\/ language aliases map\n-    private static volatile Map<String,String> langAliasesMap;\n@@ -70,0 +66,3 @@\n+    \/\/ cache the available locales\n+    private static volatile Locale[] AVAILABLE_LOCALES;\n+\n@@ -72,1 +71,0 @@\n-        langAliasesMap = new ConcurrentHashMap<>();\n@@ -178,5 +176,4 @@\n-        Set<String> all = createLanguageTagSet(\"AvailableLocales\");\n-        Locale[] locs = new Locale[all.size()];\n-        int index = 0;\n-        for (String tag : all) {\n-            locs[index++] = Locale.forLanguageTag(tag);\n+        if (AVAILABLE_LOCALES == null) {\n+            AVAILABLE_LOCALES = createLanguageTagSet(\"AvailableLocales\").stream()\n+                .map(Locale::forLanguageTag)\n+                .toArray(Locale[]::new);\n@@ -184,1 +181,1 @@\n-        return locs;\n+        return AVAILABLE_LOCALES;\n@@ -188,13 +185,4 @@\n-        if (langAliasesMap.isEmpty()) {\n-            langAliasesMap = baseMetaInfo.getLanguageAliasMap();\n-        }\n-        Locale locale = langAliasesCache.get(loc);\n-        if (locale == null) {\n-            String locTag = loc.toLanguageTag();\n-            Locale aliasLocale = langAliasesMap.containsKey(locTag)\n-                    ? Locale.forLanguageTag(langAliasesMap.get(locTag)) : loc;\n-            langAliasesCache.putIfAbsent(loc, aliasLocale);\n-            return aliasLocale;\n-        } else {\n-            return locale;\n-        }\n+        return langAliasesCache.computeIfAbsent(loc, l -> {\n+            var alias = baseMetaInfo.getLanguageAliasMap().get(l.toLanguageTag());\n+            return alias != null ? Locale.forLanguageTag(alias) : l;\n+        });\n@@ -223,9 +211,3 @@\n-        if (supportedLocaleString == null) {\n-            return Collections.emptySet();\n-        }\n-        StringTokenizer tokens = new StringTokenizer(supportedLocaleString);\n-        Set<String> tagset = new HashSet<>((tokens.countTokens() * 4 + 2) \/ 3);\n-        while (tokens.hasMoreTokens()) {\n-            tagset.add(tokens.nextToken());\n-        }\n-        return tagset;\n+        return supportedLocaleString != null ?\n+                Set.of(supportedLocaleString.split(\"\\s+\")) :\n+                Collections.emptySet();\n","filename":"src\/java.base\/share\/classes\/sun\/util\/cldr\/CLDRLocaleProviderAdapter.java","additions":15,"deletions":33,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.Arrays;\n@@ -40,1 +41,0 @@\n-import java.util.HashSet;\n@@ -45,1 +45,0 @@\n-import java.util.ServiceConfigurationError;\n@@ -47,1 +46,0 @@\n-import java.util.StringTokenizer;\n@@ -457,10 +455,3 @@\n-        if (supportedLocaleString == null) {\n-            return Collections.emptySet();\n-        }\n-        StringTokenizer tokens = new StringTokenizer(supportedLocaleString);\n-        Set<String> tagset = new HashSet<>((tokens.countTokens() * 4 + 2) \/ 3);\n-        while (tokens.hasMoreTokens()) {\n-            tagset.add(tokens.nextToken());\n-        }\n-\n-        return tagset;\n+        return supportedLocaleString != null ?\n+            Set.of(supportedLocaleString.split(\"\\s+\")) :\n+            Collections.emptySet();\n@@ -523,22 +514,11 @@\n-        StringTokenizer localeStringTokenizer = new StringTokenizer(supportedLocaleString);\n-\n-        int length = localeStringTokenizer.countTokens();\n-        Locale[] locales = new Locale[length + 1];\n-        locales[0] = Locale.ROOT;\n-        for (int i = 1; i <= length; i++) {\n-            String currentToken = localeStringTokenizer.nextToken();\n-            switch (currentToken) {\n-                case \"ja-JP-JP\":\n-                    locales[i] = JRELocaleConstants.JA_JP_JP;\n-                    break;\n-                case \"no-NO-NY\":\n-                    locales[i] = JRELocaleConstants.NO_NO_NY;\n-                    break;\n-                case \"th-TH-TH\":\n-                    locales[i] = JRELocaleConstants.TH_TH_TH;\n-                    break;\n-                default:\n-                    locales[i] = Locale.forLanguageTag(currentToken);\n-            }\n-        }\n-        return locales;\n+        return Arrays.stream(supportedLocaleString.split(\"\\s+\"))\n+            .map(t -> {\n+                return switch (t) {\n+                    case \"ja-JP-JP\" -> JRELocaleConstants.JA_JP_JP;\n+                    case \"no-NO-NY\" -> JRELocaleConstants.NO_NO_NY;\n+                    case \"th-TH-TH\" -> JRELocaleConstants.TH_TH_TH;\n+                    default -> Locale.forLanguageTag(t);\n+                };\n+            })\n+            .distinct()\n+            .toArray(Locale[]::new);\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/provider\/JRELocaleProviderAdapter.java","additions":15,"deletions":35,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.util.Arrays;\n@@ -311,17 +312,10 @@\n-        Locale[] locs = new Locale[tags.size() + 1];\n-        int index = 0;\n-        locs[index++] = Locale.ROOT;\n-        for (String tag : tags) {\n-            switch (tag) {\n-            case \"ja-JP-JP\":\n-                locs[index++] = JRELocaleConstants.JA_JP_JP;\n-                break;\n-            case \"th-TH-TH\":\n-                locs[index++] = JRELocaleConstants.TH_TH_TH;\n-                break;\n-            default:\n-                locs[index++] = Locale.forLanguageTag(tag);\n-                break;\n-            }\n-        }\n-        return locs;\n+        return tags.stream()\n+            .map(t -> {\n+                return switch (t) {\n+                    case \"ja-JP-JP\" -> JRELocaleConstants.JA_JP_JP;\n+                    case \"no-NO-NY\" -> JRELocaleConstants.NO_NO_NY;\n+                    case \"th-TH-TH\" -> JRELocaleConstants.TH_TH_TH;\n+                    default -> Locale.forLanguageTag(t);\n+                };\n+            })\n+            .toArray(Locale[]::new);\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/provider\/LocaleProviderAdapter.java","additions":12,"deletions":18,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8038436 8158504 8065555 8167143 8167273 8189272\n+ * @bug 8038436 8158504 8065555 8167143 8167273 8189272 8287340\n@@ -35,6 +35,0 @@\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n@@ -42,2 +36,0 @@\n-import java.util.Formatter;\n-import java.util.GregorianCalendar;\n@@ -46,1 +38,0 @@\n-import java.util.stream.Collectors;\n@@ -64,14 +55,15 @@\n-    static final String[] bipLocs = (\"ar, ar-JO, ar-LB, ar-SY, be, be-BY, bg, \" +\n-        \"bg-BG, ca, ca-ES, cs, cs-CZ, da, da-DK, de, de-AT, de-CH, de-DE, \" +\n-        \"de-LU, el, el-CY, el-GR, en, en-AU, en-CA, en-GB, en-IE, en-IN, \" +\n-        \"en-MT, en-NZ, en-PH, en-SG, en-US, en-ZA, es, es-AR, es-BO, es-CL, \" +\n-        \"es-CO, es-CR, es-DO, es-EC, es-ES, es-GT, es-HN, es-MX, es-NI, \" +\n-        \"es-PA, es-PE, es-PR, es-PY, es-SV, es-US, es-UY, es-VE, et, et-EE, \" +\n-        \"fi, fi-FI, fr, fr-BE, fr-CA, fr-CH, fr-FR, ga, ga-IE, he, he-IL, \" +\n-        \"hi-IN, hr, hr-HR, hu, hu-HU, id, id-ID, is, is-IS, it, it-CH, it-IT, \" +\n-        \"ja, ja-JP, ko, ko-KR, lt, lt-LT, lv, lv-LV, mk, mk-MK, ms, ms-MY, mt, \" +\n-        \"mt-MT, nb, nb-NO, nl, nl-BE, nl-NL, nn-NO, no, no-NO, no-NO, pl, pl-PL, pt, pt-BR, \" +\n-        \"pt-PT, ro, ro-RO, ru, ru-RU, sk, sk-SK, sl, sl-SI, sq, sq-AL, sr, \" +\n-        \"sr-BA, sr-CS, sr-Latn, sr-Latn-ME, sr-ME, sr-RS, sv, sv-SE, th, th-TH, \" +\n-        \"tr, tr-TR, uk, uk-UA, und, vi, vi-VN, zh, zh-CN, zh-HK, zh-Hans-CN, \" +\n-        \"zh-Hans-SG, zh-Hant-HK, zh-Hant-TW, zh-SG, zh-TW, \").split(\",\\\\s*\");\n+    static final String[] bipLocs = (\", ar, ar_JO, ar_LB, ar_SY, be, be_BY, bg, \" +\n+        \"bg_BG, ca, ca_ES, cs, cs_CZ, da, da_DK, de, de_AT, de_CH, de_DE, \" +\n+        \"de_LU, el, el_CY, el_GR, en, en_AU, en_CA, en_GB, en_IE, en_IN, \" +\n+        \"en_MT, en_NZ, en_PH, en_SG, en_US, en_ZA, es, es_AR, es_BO, es_CL, \" +\n+        \"es_CO, es_CR, es_DO, es_EC, es_ES, es_GT, es_HN, es_MX, es_NI, \" +\n+        \"es_PA, es_PE, es_PR, es_PY, es_SV, es_US, es_UY, es_VE, et, et_EE, \" +\n+        \"fi, fi_FI, fr, fr_BE, fr_CA, fr_CH, fr_FR, ga, ga_IE, he, he_IL, \" +\n+        \"hi_IN, hr, hr_HR, hu, hu_HU, id, id_ID, is, is_IS, it, it_CH, it_IT, \" +\n+        \"ja, ja_JP, ko, ko_KR, lt, lt_LT, lv, lv_LV, mk, mk_MK, ms, ms_MY, mt, \" +\n+        \"mt_MT, nb, nb_NO, nl, nl_BE, nl_NL, nn_NO, no, no_NO, no_NO_NY, pl, pl_PL, pt, pt_BR, \" +\n+        \"pt_PT, ro, ro_RO, ru, ru_RU, sk, sk_SK, sl, sl_SI, sq, sq_AL, sr, \" +\n+        \"sr_BA, sr_CS, sr_ME, sr_ME_#Latn, sr_RS, sr__#Latn, sv, sv_SE, th, th_TH, \" +\n+        \"tr, tr_TR, uk, uk_UA, vi, vi_VN, zh, zh_CN, zh_CN_#Hans, zh_HK, \" +\n+        \"zh_HK_#Hant, zh_SG, zh_SG_#Hans, zh_TW, zh_TW_#Hant, \").split(\",\\\\s*\");\n+\n@@ -82,49 +74,49 @@\n-    static final String[] cpLocs = (\"ar, be, bg, ca, cs, da, el, es, et, fi, \" +\n-        \"fr, he, hi, hr, hu, is, ja, ko, lt, lv, mk, nb, nb-NO, nn-NO, no, pl, ro, ru, sk, sl, \" +\n-        \"sq, sr, sr-Latn, sv, th, tr, uk, und, vi, zh, zh-HK, zh-Hant-HK, \" +\n-        \"zh-Hant-TW, zh-TW, \").split(\",\\\\s*\");\n-    static final String[] nfpLocs = (\"ar, ar-AE, ar-BH, ar-DZ, ar-EG, ar-IQ, \" +\n-        \"ar-JO, ar-KW, ar-LB, ar-LY, ar-MA, ar-OM, ar-QA, ar-SA, ar-SD, ar-SY, \" +\n-        \"ar-TN, ar-YE, be, be-BY, bg, bg-BG, ca, ca-ES, cs, cs-CZ, da, da-DK, \" +\n-        \"de, de-AT, de-CH, de-DE, de-LU, el, el-CY, el-GR, en, en-AU, \" +\n-        \"en-CA, en-GB, en-IE, en-IN, en-MT, en-NZ, en-PH, en-SG, en-US, en-ZA, \" +\n-        \"es, es-AR, es-BO, es-CL, es-CO, es-CR, es-CU, es-DO, es-EC, es-ES, \" +\n-        \"es-GT, es-HN, es-MX, es-NI, es-PA, es-PE, es-PR, es-PY, es-SV, es-US, \" +\n-        \"es-UY, es-VE, et, et-EE, fi, fi-FI, fr, fr-BE, fr-CA, fr-CH, fr-FR, \" +\n-        \"fr-LU, ga, ga-IE, he, he-IL, hi, hi-IN, hr, hr-HR, hu, hu-HU, id, \" +\n-        \"id-ID, is, is-IS, it, it-CH, it-IT, ja, ja-JP, \" +\n-        \"ja-JP-u-ca-japanese-x-lvariant-JP, ko, ko-KR, lt, lt-LT, lv, lv-LV, \" +\n-        \"mk, mk-MK, ms, ms-MY, mt, mt-MT, nb, nb-NO, nl, nl-BE, nl-NL, nn-NO, \" +\n-        \"nn-NO, no, no-NO, pl, pl-PL, pt, pt-BR, pt-PT, ro, ro-RO, ru, ru-RU, \" +\n-        \"sk, sk-SK, sl, sl-SI, sq, sq-AL, sr, sr-BA, sr-CS, sr-Latn, \" +\n-        \"sr-Latn-BA, sr-Latn-ME, sr-Latn-RS, sr-ME, sr-RS, sv, sv-SE, th, \" +\n-        \"th-TH, th-TH-u-nu-thai-x-lvariant-TH, tr, tr-TR, uk, uk-UA, und, vi, \" +\n-        \"vi-VN, zh, zh-CN, zh-HK, zh-Hans-CN, zh-Hans-SG, zh-Hant-HK, \" +\n-        \"zh-Hant-TW, zh-SG, zh-TW, \").split(\",\\\\s*\");\n-    static final String[] currencynpLocs = (\"ar-AE, ar-BH, ar-DZ, ar-EG, ar-IQ, \" +\n-        \"ar-JO, ar-KW, ar-LB, ar-LY, ar-MA, ar-OM, ar-QA, ar-SA, ar-SD, ar-SY, \" +\n-        \"ar-TN, ar-YE, be-BY, bg-BG, ca-ES, cs-CZ, da-DK, de, de-AT, de-CH, \" +\n-        \"de-DE, de-LU, el-CY, el-GR, en-AU, en-CA, en-GB, en-IE, en-IN, \" +\n-        \"en-MT, en-NZ, en-PH, en-SG, en-US, en-ZA, es, es-AR, es-BO, es-CL, \" +\n-        \"es-CO, es-CR, es-CU, es-DO, es-EC, es-ES, es-GT, es-HN, es-MX, es-NI, \" +\n-        \"es-PA, es-PE, es-PR, es-PY, es-SV, es-US, es-UY, es-VE, et-EE, fi-FI, \" +\n-        \"fr, fr-BE, fr-CA, fr-CH, fr-FR, fr-LU, ga-IE, he-IL, hi-IN, hr-HR, \" +\n-        \"hu-HU, id-ID, is-IS, it, it-CH, it-IT, ja, ja-JP, ko, ko-KR, lt-LT, \" +\n-        \"lv-LV, mk-MK, ms-MY, mt-MT, nb,  nb-NO, nl-BE, nl-NL, nn-NO, no-NO, pl-PL, pt, pt-BR, \" +\n-        \"pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sq-AL, sr-BA, sr-CS, sr-Latn-BA, \" +\n-        \"sr-Latn-ME, sr-Latn-RS, sr-ME, sr-RS, sv, sv-SE, th-TH, tr-TR, uk-UA, \" +\n-        \"und, vi-VN, zh-CN, zh-HK, zh-Hans-CN, zh-Hans-SG, zh-Hant-HK, \" +\n-        \"zh-Hant-TW, zh-SG, zh-TW, \").split(\",\\\\s*\");\n-    static final String[] lnpLocs = (\"ar, be, bg, ca, cs, da, de, el, el-CY, \" +\n-        \"en, en-MT, en-PH, en-SG, es, es-US, et, fi, fr, ga, he, hi, hr, hu, \" +\n-        \"id, is, it, ja, ko, lt, lv, mk, ms, mt, nb, nb-NO, nl, nn-NO, no, no-NO, pl, pt, pt-BR, \" +\n-        \"pt-PT, ro, ru, sk, sl, sq, sr, sr-Latn, sv, th, tr, uk, und, vi, zh, \" +\n-        \"zh-HK, zh-Hans-SG, zh-Hant-HK, zh-Hant-TW, zh-SG, zh-TW, \").split(\",\\\\s*\");\n-    static final String[] tznpLocs = (\"de, en, en-CA, en-GB, en-IE, es, fr, hi, \" +\n-        \"it, ja, ko, nb,  nb-NO, nn-NO, pt-BR, sv, und, zh-CN, zh-HK, zh-Hans-CN, zh-Hant-HK, \" +\n-        \"zh-Hant-TW, zh-TW, \").split(\",\\\\s*\");\n-    static final String[] caldpLocs = (\"ar, be, bg, ca, cs, da, de, el, el-CY, \" +\n-        \"en, en-GB, en-IE, en-MT, es, es-ES, es-US, et, fi, fr, fr-CA, he, hi, \" +\n-        \"hr, hu, id-ID, is, it, ja, ko, lt, lv, mk, ms-MY, mt, mt-MT, nb, nb-NO, nl, nn-NO, no, \" +\n-        \"pl, pt, pt-BR, pt-PT, ro, ru, sk, sl, sq, sr, sr-Latn-BA, sr-Latn-ME, \" +\n-        \"sr-Latn-RS, sv, th, tr, uk, und, vi, zh, \").split(\",\\\\s*\");\n+    static final String[] cpLocs = (\", ar, be, bg, ca, cs, da, el, es, et, fi, \" +\n+        \"fr, he, hi, hr, hu, is, ja, ko, lt, lv, mk, nb, nb_NO, nn_NO, no, pl, ro, ru, sk, sl, \" +\n+        \"sq, sr, sr__#Latn, sv, th, tr, uk, vi, zh, zh_HK, zh_HK_#Hant, \" +\n+        \"zh_TW, zh_TW_#Hant, \").split(\",\\\\s*\");\n+    static final String[] nfpLocs = (\", ar, ar_AE, ar_BH, ar_DZ, ar_EG, ar_IQ, \" +\n+        \"ar_JO, ar_KW, ar_LB, ar_LY, ar_MA, ar_OM, ar_QA, ar_SA, ar_SD, ar_SY, \" +\n+        \"ar_TN, ar_YE, be, be_BY, bg, bg_BG, ca, ca_ES, cs, cs_CZ, da, da_DK, \" +\n+        \"de, de_AT, de_CH, de_DE, de_LU, el, el_CY, el_GR, en, en_AU, \" +\n+        \"en_CA, en_GB, en_IE, en_IN, en_MT, en_NZ, en_PH, en_SG, en_US, en_ZA, \" +\n+        \"es, es_AR, es_BO, es_CL, es_CO, es_CR, es_CU, es_DO, es_EC, es_ES, \" +\n+        \"es_GT, es_HN, es_MX, es_NI, es_PA, es_PE, es_PR, es_PY, es_SV, es_US, \" +\n+        \"es_UY, es_VE, et, et_EE, fi, fi_FI, fr, fr_BE, fr_CA, fr_CH, fr_FR, \" +\n+        \"fr_LU, ga, ga_IE, he, he_IL, hi, hi_IN, hr, hr_HR, hu, hu_HU, id, \" +\n+        \"id_ID, is, is_IS, it, it_CH, it_IT, ja, ja_JP, \" +\n+        \"ja_JP_JP_#u-ca-japanese, ko, ko_KR, lt, lt_LT, lv, lv_LV, \" +\n+        \"mk, mk_MK, ms, ms_MY, mt, mt_MT, nb, nb_NO, nl, nl_BE, nl_NL, nn_NO, \" +\n+        \"no, no_NO, no_NO_NY, pl, pl_PL, pt, pt_BR, pt_PT, ro, ro_RO, ru, ru_RU, \" +\n+        \"sk, sk_SK, sl, sl_SI, sq, sq_AL, sr, sr_BA, sr_BA_#Latn, sr_CS, sr_ME, \" +\n+        \"sr_ME_#Latn, sr_RS, sr_RS_#Latn, sr__#Latn, sv, sv_SE, th, \" +\n+        \"th_TH, th_TH_TH_#u-nu-thai, tr, tr_TR, uk, uk_UA, vi, \" +\n+        \"vi_VN, zh, zh_CN, zh_CN_#Hans, zh_HK, zh_HK_#Hant, zh_SG, zh_SG_#Hans, \" +\n+        \"zh_TW, zh_TW_#Hant, \").split(\",\\\\s*\");\n+    static final String[] currencynpLocs = (\", ar_AE, ar_BH, ar_DZ, ar_EG, ar_IQ, \" +\n+        \"ar_JO, ar_KW, ar_LB, ar_LY, ar_MA, ar_OM, ar_QA, ar_SA, ar_SD, ar_SY, \" +\n+        \"ar_TN, ar_YE, be_BY, bg_BG, ca_ES, cs_CZ, da_DK, de, de_AT, de_CH, \" +\n+        \"de_DE, de_LU, el_CY, el_GR, en_AU, en_CA, en_GB, en_IE, en_IN, \" +\n+        \"en_MT, en_NZ, en_PH, en_SG, en_US, en_ZA, es, es_AR, es_BO, es_CL, \" +\n+        \"es_CO, es_CR, es_CU, es_DO, es_EC, es_ES, es_GT, es_HN, es_MX, es_NI, \" +\n+        \"es_PA, es_PE, es_PR, es_PY, es_SV, es_US, es_UY, es_VE, et_EE, fi_FI, \" +\n+        \"fr, fr_BE, fr_CA, fr_CH, fr_FR, fr_LU, ga_IE, he_IL, hi_IN, hr_HR, \" +\n+        \"hu_HU, id_ID, is_IS, it, it_CH, it_IT, ja, ja_JP, ko, ko_KR, lt_LT, \" +\n+        \"lv_LV, mk_MK, ms_MY, mt_MT, nb,  nb_NO, nl_BE, nl_NL, nn_NO, no_NO, pl_PL, pt, pt_BR, \" +\n+        \"pt_PT, ro_RO, ru_RU, sk_SK, sl_SI, sq_AL, sr_BA, sr_BA_#Latn, sr_CS, \" +\n+        \"sr_ME, sr_ME_#Latn, sr_RS, sr_RS_#Latn, sv, sv_SE, th_TH, tr_TR, uk_UA, \" +\n+        \"vi_VN, zh_CN, zh_CN_#Hans, zh_HK, zh_HK_#Hant, zh_SG, zh_SG_#Hans, \" +\n+        \"zh_TW, zh_TW_#Hant, \").split(\",\\\\s*\");\n+    static final String[] lnpLocs = (\", ar, be, bg, ca, cs, da, de, el, el_CY, \" +\n+        \"en, en_MT, en_PH, en_SG, es, es_US, et, fi, fr, ga, he, hi, hr, hu, \" +\n+        \"id, is, it, ja, ko, lt, lv, mk, ms, mt, nb, nb_NO, nl, nn_NO, no, no_NO_NY, pl, pt, pt_BR, \" +\n+        \"pt_PT, ro, ru, sk, sl, sq, sr, sr__#Latn, sv, th, tr, uk, vi, zh, \" +\n+        \"zh_HK, zh_HK_#Hant, zh_SG, zh_SG_#Hans, zh_TW, zh_TW_#Hant, \").split(\",\\\\s*\");\n+    static final String[] tznpLocs = (\", de, en, en_CA, en_GB, en_IE, es, fr, hi, \" +\n+        \"it, ja, ko, nb,  nb_NO, nn_NO, pt_BR, sv, zh_CN, zh_CN_#Hans, zh_HK, zh_HK_#Hant, \" +\n+        \"zh_TW, zh_TW_#Hant, \").split(\",\\\\s*\");\n+    static final String[] caldpLocs = (\", ar, be, bg, ca, cs, da, de, el, el_CY, \" +\n+        \"en, en_GB, en_IE, en_MT, es, es_ES, es_US, et, fi, fr, fr_CA, he, hi, \" +\n+        \"hr, hu, id_ID, is, it, ja, ko, lt, lv, mk, ms_MY, mt, mt_MT, nb, nb_NO, nl, nn_NO, no, \" +\n+        \"pl, pt, pt_BR, pt_PT, ro, ru, sk, sl, sq, sr, sr_BA_#Latn, sr_ME_#Latn, sr_RS_#Latn, \" +\n+        \"sv, th, tr, uk, vi, zh, \").split(\",\\\\s*\");\n@@ -170,2 +162,2 @@\n-        List<Locale> gotList = Arrays.asList(got).stream()\n-            .map(Locale::toLanguageTag)\n+        List<String> gotList = Arrays.stream(got)\n+            .map(Locale::toString)\n@@ -173,5 +165,3 @@\n-            .map(Locale::forLanguageTag)\n-            .collect(Collectors.toList());\n-        List<Locale> expectedList = Arrays.asList(expected).stream()\n-            .map(Locale::forLanguageTag)\n-            .collect(Collectors.toList());\n+            .toList();\n+        List<String> expectedList = Arrays.stream(expected)\n+            .toList();\n@@ -180,2 +170,1 @@\n-            throw new RuntimeException(\"\\n\" + gotList.toString() + \"\\n is not equal to \\n\" +\n-                                       expectedList.toString());\n+            throw new RuntimeException(\"\\n\" + gotList + \"\\n is not equal to \\n\" + expectedList);\n","filename":"test\/jdk\/sun\/util\/locale\/provider\/Bug8038436.java","additions":72,"deletions":83,"binary":false,"changes":155,"status":"modified"}]}