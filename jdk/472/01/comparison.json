{"files":[{"patch":"@@ -900,2 +900,8 @@\n-          JVMCI_event_4(\"implicit exception at %i\", pc_offset);\n-          _implicit_exception_table.add_deoptimize(pc_offset);\n+          if (jvmci_env()->isa_site_ImplicitExceptionDispatch(site)) {\n+            jint dispatch_offset = jvmci_env()->get_site_ImplicitExceptionDispatch_dispatchOffset(site);\n+            JVMCI_event_4(\"implicit exception at %i, dispatch to %i\", pc_offset, dispatch_offset);\n+            _implicit_exception_table.append(pc_offset, dispatch_offset);\n+          } else {\n+            JVMCI_event_4(\"implicit exception at %i\", pc_offset);\n+            _implicit_exception_table.add_deoptimize(pc_offset);\n+          }\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -180,0 +180,3 @@\n+  start_class(site_ImplicitExceptionDispatch, jdk_vm_ci_code_site_ImplicitExceptionDispatch)                  \\\n+    int_field(site_ImplicitExceptionDispatch, dispatchOffset)                                                 \\\n+  end_class                                                                                                   \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciJavaClasses.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -95,0 +95,1 @@\n+  template(jdk_vm_ci_code_site_ImplicitExceptionDispatch,         \"jdk\/vm\/ci\/code\/site\/ImplicitExceptionDispatch\")                        \\\n","filename":"src\/hotspot\/share\/jvmci\/vmSymbols_jvmci.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.vm.ci.code.site;\n+\n+import jdk.vm.ci.code.DebugInfo;\n+\n+\/**\n+ * Represents an implicit exception dispatch in the code. Implicit exception dispatch is a\n+ * platform-specific optimization that makes use of an operating system's trap mechanism, to turn\n+ * specific branches into sequential code with implicit traps. Information contained in this class\n+ * will be used by the runtime to register implicit exception dispatch, i.e., a mapping from an\n+ * exceptional PC offset to a continuation PC offset.\n+ *\/\n+public final class ImplicitExceptionDispatch extends Infopoint {\n+\n+    public final int dispatchOffset;\n+\n+    \/**\n+     * Construct an implicit exception dispatch.\n+     *\n+     * @param pcOffset the exceptional PC offset\n+     * @param dispatchOffset the continuation PC offset\n+     * @param debugInfo debugging information at the exceptional PC\n+     *\/\n+    public ImplicitExceptionDispatch(int pcOffset, int dispatchOffset, DebugInfo debugInfo) {\n+        super(pcOffset, debugInfo, InfopointReason.IMPLICIT_EXCEPTION);\n+        this.dispatchOffset = dispatchOffset;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj instanceof ImplicitExceptionDispatch && super.equals(obj)) {\n+            ImplicitExceptionDispatch that = (ImplicitExceptionDispatch) obj;\n+            if (this.dispatchOffset == that.dispatchOffset) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(pcOffset);\n+        sb.append(\"->\");\n+        sb.append(dispatchOffset);\n+\n+        if (debugInfo != null) {\n+            appendDebugInfo(sb, debugInfo);\n+        }\n+\n+        return sb.toString();\n+    }\n+}\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.code\/src\/jdk\/vm\/ci\/code\/site\/ImplicitExceptionDispatch.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}