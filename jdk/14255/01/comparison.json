{"files":[{"patch":"@@ -241,3 +241,3 @@\n-                CreateSymbolicLink(targetPath,\n-                                   WindowsPath.addPrefixIfNeeded(linkTarget),\n-                                   flags);\n+                WindowsLinkSupport.createSymbolicLink(targetPath,\n+                                                      WindowsPath.addPrefixIfNeeded(linkTarget),\n+                                                      flags);\n@@ -444,3 +444,3 @@\n-                CreateSymbolicLink(targetPath,\n-                                   WindowsPath.addPrefixIfNeeded(linkTarget),\n-                                   SYMBOLIC_LINK_FLAG_DIRECTORY);\n+                WindowsLinkSupport.createSymbolicLink(targetPath,\n+                                                      WindowsPath.addPrefixIfNeeded(linkTarget),\n+                                                      SYMBOLIC_LINK_FLAG_DIRECTORY);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileCopy.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -597,3 +597,3 @@\n-            CreateSymbolicLink(link.getPathForWin32Calls(),\n-                               WindowsPath.addPrefixIfNeeded(target.toString()),\n-                               flags);\n+            WindowsLinkSupport.createSymbolicLink(link.getPathForWin32Calls(),\n+                                                  WindowsPath.addPrefixIfNeeded(target.toString()),\n+                                                  flags);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileSystemProvider.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -48,0 +48,30 @@\n+    \/**\n+     * Creates a symbolic link, retyring if not privileged\n+     *\/\n+    static void createSymbolicLink(String link, String target, int flags)\n+        throws WindowsException\n+    {\n+        try {\n+            CreateSymbolicLink(link, target, flags);\n+        } catch (WindowsException x) {\n+            \/\/ Retry if the privilege to create symbolic links is not held\n+            if (x.lastError() == ERROR_PRIVILEGE_NOT_HELD) {\n+                flags |= SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE;\n+                try {\n+                    CreateSymbolicLink(link, target, flags);\n+                    return;\n+                } catch (WindowsException y) {\n+                    \/\/ Throw an exception if and only if it is not due to symbolic link creation\n+                    \/\/ privilege not being held (ERROR_PRIVILEGE_NOT_HELD) nor the\n+                    \/\/ SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE flag not being recognized\n+                    \/\/ (ERROR_INVALID_PARAMETER). The latter will occur for Windows builds\n+                    \/\/ older than 14972.\n+                    int lastError = y.lastError();\n+                    if (lastError != ERROR_PRIVILEGE_NOT_HELD && lastError != ERROR_INVALID_PARAMETER)\n+                        throw y;\n+                }\n+            }\n+            throw x;\n+        }\n+    }\n+\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsLinkSupport.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -978,13 +978,0 @@\n-        } catch (WindowsException x) {\n-            if (x.lastError() == ERROR_PRIVILEGE_NOT_HELD) {\n-                flags |= SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE;\n-                try {\n-                    CreateSymbolicLink0(linkBuffer.address(),\n-                                        targetBuffer.address(), flags);\n-                    return;\n-                } catch (WindowsException ignored) {\n-                    \/\/ Will fail with ERROR_INVALID_PARAMETER for Windows\n-                    \/\/ builds older than 14972.\n-                }\n-            }\n-            throw x;\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsNativeDispatcher.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4313887 6838333 6863864\n+ * @bug 4313887 6838333 6863864 8307887\n@@ -51,0 +51,13 @@\n+        \/\/ Check for FileAlreadyExistsException. This must be done\n+        \/\/ before the check of whether symlinks are supported.\n+        Path pathLink = Files.createTempFile(\"link\", null);\n+        Path pathTarget = Files.createTempFile(\"target\", null);\n+        try {\n+            Files.createSymbolicLink(pathLink, pathTarget);\n+            throw new RuntimeException(\"Symbolic link created\");\n+        } catch (FileAlreadyExistsException expected) {\n+        } finally {\n+            Files.deleteIfExists(pathLink);\n+            Files.deleteIfExists(pathTarget);\n+        }\n+\n","filename":"test\/jdk\/java\/nio\/file\/Files\/Links.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"}]}