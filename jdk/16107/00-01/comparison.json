{"files":[{"patch":"@@ -48,2 +48,4 @@\n-  \/\/ Check if enough time has passed since the last whole heap GC.\n-  uintx time_since_last_gc = (uintx)g1h->millis_since_last_whole_heap_examined();\n+  \/\/ Check if enough time has passed since the last GC.\n+  uintx time_since_last_gc = G1PeriodicGCCheckWholeHeap ?\n+          (uintx)g1h->millis_since_last_whole_heap_examined() :\n+          (uintx)g1h->time_since_last_collection().milliseconds();\n@@ -51,1 +53,1 @@\n-    log_debug(gc, periodic)(\"Last whole heap GC occurred \" UINTX_FORMAT \"ms before which is below threshold \" UINTX_FORMAT \"ms. Skipping.\",\n+    log_debug(gc, periodic)(\"Last GC occurred \" UINTX_FORMAT \"ms before which is below threshold \" UINTX_FORMAT \"ms. Skipping.\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PeriodicGCTask.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -294,0 +294,5 @@\n+  product(bool, G1PeriodicGCCheckWholeHeap, false,                          \\\n+          \"Check for recent whole heap GC instead of any recent GC for \"    \\\n+          \"periodic GC triggers. Enabling this would trigger periodic GC \"  \\\n+          \"even when young GCs happened recently.\")                         \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/g1\/g1_globals.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,0 +33,7 @@\n+\/**\n+ * @test id=young-only-whole\n+ * @requires vm.gc.G1 & vm.flagless\n+ * @library \/test\/lib \/\n+ * @run driver gc.g1.TestPeriodicCollectionWholeHeap young-only-whole\n+ *\/\n+\n@@ -40,0 +47,7 @@\n+\/**\n+ * @test id=concurrent-whole\n+ * @requires vm.gc.G1 & vm.flagless\n+ * @library \/test\/lib \/\n+ * @run driver gc.g1.TestPeriodicCollectionWholeHeap concurrent-whole\n+ *\/\n+\n@@ -47,0 +61,7 @@\n+\/**\n+ * @test id=full-whole\n+ * @requires vm.gc.G1 & vm.flagless\n+ * @library \/test\/lib \/\n+ * @run driver gc.g1.TestPeriodicCollectionWholeHeap full-whole\n+ *\/\n+\n@@ -76,1 +97,1 @@\n-            \/\/ Young GC should not prevent periodic GC to start.\n+            \/\/ Young GC should prevent periodic GC to start.\n@@ -80,0 +101,19 @@\n+                opts.add(\"-XX:-G1PeriodicGCCheckWholeHeap\");\n+                opts.addAll(commonOpts);\n+\n+                ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(opts);\n+                OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+                output.shouldContain(MSG_YOUNG);\n+                output.shouldNotContain(MSG_CONCURRENT);\n+                output.shouldNotContain(MSG_FULL);\n+                output.shouldNotContain(MSG_PERIODIC);\n+\n+                break;\n+            }\n+\n+            \/\/ Young GC should not prevent periodic GC to start.\n+            case \"young-only-whole\": {\n+                List<String> opts = new ArrayList<>();\n+                opts.add(\"-XX:G1PeriodicGCInterval=3000\");\n+                opts.add(\"-XX:+G1PeriodicGCCheckWholeHeap\");\n@@ -98,0 +138,21 @@\n+                opts.add(\"-XX:-G1PeriodicGCCheckWholeHeap\");\n+                opts.addAll(commonOpts);\n+                opts.add(\"1000\");\n+\n+                ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(opts);\n+                OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+                output.shouldContain(MSG_YOUNG);\n+                output.shouldContain(MSG_CONCURRENT);\n+                output.shouldNotContain(MSG_FULL);\n+                output.shouldNotContain(MSG_PERIODIC);\n+\n+                break;\n+            }\n+\n+            \/\/ Periodic GC should not start when concurrent GCs are running frequently.\n+            case \"concurrent-whole\": {\n+                List<String> opts = new ArrayList<>();\n+                opts.add(\"-XX:G1PeriodicGCInterval=3000\");\n+                opts.add(\"-XX:+ExplicitGCInvokesConcurrent\");\n+                opts.add(\"-XX:+G1PeriodicGCCheckWholeHeap\");\n@@ -117,0 +178,21 @@\n+                opts.add(\"-XX:-G1PeriodicGCCheckWholeHeap\");\n+                opts.addAll(commonOpts);\n+                opts.add(\"1000\");\n+\n+                ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(opts);\n+                OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+                output.shouldContain(MSG_YOUNG);\n+                output.shouldNotContain(MSG_CONCURRENT);\n+                output.shouldContain(MSG_FULL);\n+                output.shouldNotContain(MSG_PERIODIC);\n+\n+                break;\n+            }\n+\n+            \/\/ Periodic GC should not start when Full GCs are running frequently.\n+            case \"full-whole\": {\n+                List<String> opts = new ArrayList<>();\n+                opts.add(\"-XX:G1PeriodicGCInterval=3000\");\n+                opts.add(\"-XX:-ExplicitGCInvokesConcurrent\");\n+                opts.add(\"-XX:+G1PeriodicGCCheckWholeHeap\");\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestPeriodicCollectionWholeHeap.java","additions":83,"deletions":1,"binary":false,"changes":84,"status":"modified"}]}