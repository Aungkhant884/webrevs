{"files":[{"patch":"@@ -593,1 +593,2 @@\n-     * this class are not associated with any map's entry-set view.\n+     * this class are not associated with any map nor with any\n+     * map's entry-set view.\n@@ -733,1 +734,2 @@\n-     * this class are not associated with any map's entry-set view.\n+     * this class are not associated with any map nor with any map's\n+     * entry-set view.\n","filename":"src\/java.base\/share\/classes\/java\/util\/AbstractMap.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -401,11 +401,9 @@\n-     * Instances of the {@code Map.Entry} interface may be obtained by iterating\n-     * the entry-set view of a map. These instances maintain a connection to the\n-     * original, backing map. This connection to the backing map is valid\n-     * <i>only<\/i> for the duration of iteration over the entry-set view.\n-     * During iteration of the entry-set view, if supported by the backing map,\n-     * a change to a {@code Map.Entry}'s value via the\n-     * {@link Map.Entry#setValue setValue} method will be visible in the backing map.\n-     * The behavior of such a {@code Map.Entry} instance is undefined outside of\n-     * iteration of the map's entry-set view. It is also undefined if the backing\n-     * map has been modified after the {@code Map.Entry} was returned by the\n-     * iterator, except through the {@code Map.Entry.setValue} method. In particular,\n+     * An Entry maintains a connection to its underlying map if the Entry was obtained by\n+     * iterating the {@link Map#entrySet} view of a map, either explicitly by using an\n+     * {@link Iterator} or implicitly via the enhanced {@code for} statement. This connection\n+     * to the backing map is valid <i>only<\/i> during iteration of the entry-set view. During\n+     * the iteration, if supported by the backing map, a change to a Entry's value via\n+     * the {@link Map.Entry#setValue setValue} method will be visible in the backing map.\n+     * The behavior of such an Entry is undefined outside of iteration of the map's entry-set\n+     * view. It is also undefined if the backing map has been modified after the Entry was\n+     * returned by the iterator, except through the {@code setValue} method. In addition,\n@@ -413,1 +411,24 @@\n-     * visible in the corresponding {@code Map.Entry} element of the entry-set view.\n+     * visible in the corresponding Entry of the entry-set view.\n+     * <p>\n+     * An Entry may also be extracted from a map's entry-set view by other means, for\n+     * example, using the\n+     * {@link Set#parallelStream parallelStream},\n+     * {@link Set#stream stream},\n+     * {@link Set#spliterator spliterator} methods,\n+     * any of the\n+     * {@link Set#toArray toArray} overloads,\n+     * or by copying the entry-set view into another collection. It is unspecified whether\n+     * the Entry instances thus obtained are connected to the underlying map, whether\n+     * changes to an Entry will affect the underlying the map and vice-versa, and whether\n+     * such an Entry supports the optional {@link Map.Entry#setValue setValue} method.\n+     * <p>\n+     * In addition, an Entry may be obtained directly from a map, for example via calls\n+     * to methods directly on the {@link NavigableMap} interface. An entry thus obtained\n+     * is generally not connected to the map and is an unmodifiable snapshot of the mapping\n+     * as of the time of the call. Such an Entry also does not generally support the\n+     * {@code setValue} method.\n+     * <p>\n+     * An Entry obtained by direct construction of the {@link AbstractMap.SimpleEntry}\n+     * or {@link AbstractMap.SimpleImmutableEntry} classes or from a call to the\n+     * {@link Map#entry Map.entry} or {@link Map.Entry#copyOf Map.Entry.copyOf} methods\n+     * is not connected to any map.\n@@ -416,4 +437,6 @@\n-     * It is possible to create a {@code Map.Entry} instance that is disconnected\n-     * from a backing map by using the {@link Map.Entry#copyOf copyOf} method. For example,\n-     * the following creates a snapshot of a map's entries that is guaranteed not to\n-     * change even if the original map is modified:\n+     * The exact behavior of Entry instances obtained from a map's entry-set view other than\n+     * via iteration varies across different map implementations; some are connected to the\n+     * backing map, and some are not. To guarantee that an Entry is disconnected from its\n+     * backing map, use the {@link Map.Entry#copyOf copyOf} method. For example, the following\n+     * creates a snapshot of a map's entries that is guaranteed not to change even if the\n+     * original map is modified:\n@@ -592,1 +615,1 @@\n-         * The {@code copyOf}  method may be used to create a {@code Map.Entry} instance,\n+         * The {@code copyOf} method may be used to create a {@code Map.Entry} instance,\n","filename":"src\/java.base\/share\/classes\/java\/util\/Map.java","additions":40,"deletions":17,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -69,6 +69,12 @@\n- * <p>Implementations of entry-returning methods are expected to\n- * return {@code Map.Entry} pairs representing snapshots of mappings\n- * at the time they were produced, and thus generally do <em>not<\/em>\n- * support the optional {@code Entry.setValue} method. Note however\n- * that it is possible to change mappings in the associated map using\n- * method {@code put}.\n+ * <p>The methods\n+ * {@link #ceilingEntry},\n+ * {@link #firstEntry},\n+ * {@link #floorEntry},\n+ * {@link #higherEntry},\n+ * {@link #lastEntry},\n+ * {@link #lowerEntry},\n+ * {@link #pollFirstEntry}, and\n+ * {@link #pollLastEntry}\n+ * return {@link Map.Entry} instances that represent snapshots of mappings as\n+ * of the time of the call, and they do <em>not<\/em> support mutation of the\n+ * underlying map via the optional {@link Map.Entry#setValue setValue} method.\n","filename":"src\/java.base\/share\/classes\/java\/util\/NavigableMap.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -89,5 +89,12 @@\n- * <p>All {@code Map.Entry} pairs returned by methods in this class\n- * and its views represent snapshots of mappings at the time they were\n- * produced. They do <strong>not<\/strong> support the {@code Entry.setValue}\n- * method. (Note however that it is possible to change mappings in the\n- * associated map using {@code put}.)\n+ * <p>The methods\n+ * {@link #ceilingEntry},\n+ * {@link #firstEntry},\n+ * {@link #floorEntry},\n+ * {@link #higherEntry},\n+ * {@link #lastEntry},\n+ * {@link #lowerEntry},\n+ * {@link #pollFirstEntry}, and\n+ * {@link #pollLastEntry}\n+ * return {@link Map.Entry} instances that represent snapshots of mappings as\n+ * of the time of the call, and they do <em>not<\/em> support mutation of the\n+ * underlying map via the optional {@link Map.Entry#setValue setValue} method.\n@@ -422,1 +429,2 @@\n-     * key; if no such entry exists, returns {@code null}.\n+     * key; if no such entry exists (i.e., the least key in the Tree is greater\n+     * than the specified key), returns {@code null}.\n@@ -453,4 +461,3 @@\n-     * Gets the entry for the least key greater than the specified\n-     * key; if no such entry exists, returns the entry for the least\n-     * key greater than the specified key; if no such entry exists\n-     * returns {@code null}.\n+     * Returns the entry for the least key greater than the specified key; if\n+     * no such entry exists (i.e., the greatest key in the Tree is less than\n+     * or equal to the specified key), returns {@code null}.\n@@ -487,1 +494,1 @@\n-     * the specified key), returns {@code null}.\n+     * or equal to the specified key), returns {@code null}.\n","filename":"src\/java.base\/share\/classes\/java\/util\/TreeMap.java","additions":18,"deletions":11,"binary":false,"changes":29,"status":"modified"}]}