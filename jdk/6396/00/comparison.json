{"files":[{"patch":"@@ -332,1 +332,2 @@\n-        sign(params);\n+\n+        doSigning(params);\n@@ -358,1 +359,6 @@\n-    private void sign(Map<String, ? super Object> params) throws IOException {\n+    private void doSigning(Map<String, ? super Object> params)\n+            throws IOException {\n+\n+        \/\/ signing or not, unsign first ...\n+        unsignAppBundle(params, root);\n+\n@@ -650,1 +656,46 @@\n-    static void signAppBundle(\n+    private static void unsignAppBundle(Map<String, ? super Object> params,\n+            Path appLocation) throws IOException {\n+\n+        \/\/ unsign all dylibs and executables\n+        try (Stream<Path> stream = Files.walk(appLocation)) {\n+            stream.peek(path -> { \/\/ fix permissions\n+                try {\n+                    Set<PosixFilePermission> pfp =\n+                            Files.getPosixFilePermissions(path);\n+                    if (!pfp.contains(PosixFilePermission.OWNER_WRITE)) {\n+                        pfp = EnumSet.copyOf(pfp);\n+                        pfp.add(PosixFilePermission.OWNER_WRITE);\n+                        Files.setPosixFilePermissions(path, pfp);\n+                    }\n+                } catch (IOException e) {\n+                    Log.verbose(e);\n+                }\n+            }).filter(p -> Files.isRegularFile(p) &&\n+                      (Files.isExecutable(p) || p.toString().endsWith(\".dylib\"))\n+                      && !(p.toString().contains(\"dylib.dSYM\/Contents\"))\n+                     ).forEach(p -> {\n+                \/\/ If p is a symlink then skip.\n+                if (Files.isSymbolicLink(p)) {\n+                    Log.verbose(MessageFormat.format(I18N.getString(\n+                            \"message.ignoring.symlink\"), p.toString()));\n+                } else {\n+                    List<String> args = new ArrayList<>();\n+                    args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n+                            \"--remove-signature\", p.toString()));\n+                    try {\n+                        Set<PosixFilePermission> oldPermissions =\n+                                Files.getPosixFilePermissions(p);\n+                        p.toFile().setWritable(true, true);\n+                        ProcessBuilder pb = new ProcessBuilder(args);\n+                        IOUtils.exec(pb);\n+                        Files.setPosixFilePermissions(p,oldPermissions);\n+                    } catch (IOException ioe) {\n+                        Log.verbose(ioe);\n+                        return;\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void signAppBundle(\n@@ -685,23 +736,1 @@\n-                    List<String> args;\n-                    \/\/ runtime and Framework files will be signed below\n-                    \/\/ but they need to be unsigned first here\n-                    if ((p.toString().contains(\"\/Contents\/runtime\")) ||\n-                        (p.toString().contains(\"\/Contents\/Frameworks\"))) {\n-\n-                        args = new ArrayList<>();\n-                        args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n-                                \"--remove-signature\", p.toString()));\n-                        try {\n-                            Set<PosixFilePermission> oldPermissions =\n-                                    Files.getPosixFilePermissions(p);\n-                            p.toFile().setWritable(true, true);\n-                            ProcessBuilder pb = new ProcessBuilder(args);\n-                            IOUtils.exec(pb);\n-                            Files.setPosixFilePermissions(p,oldPermissions);\n-                        } catch (IOException ioe) {\n-                            Log.verbose(ioe);\n-                            toThrow.set(ioe);\n-                            return;\n-                        }\n-                    }\n-                    args = new ArrayList<>();\n+                    List<String> args = new ArrayList<>();\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppImageBuilder.java","additions":55,"deletions":26,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import java.util.List;\n+\n@@ -27,0 +29,1 @@\n+import jdk.jpackage.test.Annotations.Parameters;\n@@ -60,0 +63,11 @@\n+    final boolean doSign;\n+\n+    public SigningAppImageTest(String flag) {\n+        this.doSign = \"true\".equals(flag);\n+    }\n+\n+    @Parameters\n+    public static List<Object[]> data() {\n+        return List.of(new Object[][] {{\"true\"}, {\"false\"}});\n+    }\n+\n@@ -61,1 +75,1 @@\n-    public static void test() throws Exception {\n+    public void test() throws Exception {\n@@ -65,3 +79,5 @@\n-        cmd.addArguments(\"--mac-sign\", \"--mac-signing-key-user-name\",\n-                SigningBase.DEV_NAME, \"--mac-signing-keychain\",\n-                SigningBase.KEYCHAIN);\n+        if (doSign) {\n+            cmd.addArguments(\"--mac-sign\", \"--mac-signing-key-user-name\",\n+                    SigningBase.DEV_NAME, \"--mac-signing-keychain\",\n+                    SigningBase.KEYCHAIN);\n+        }\n@@ -71,1 +87,1 @@\n-        SigningBase.verifyCodesign(launcherPath, true);\n+        SigningBase.verifyCodesign(launcherPath, doSign);\n@@ -74,2 +90,4 @@\n-        SigningBase.verifyCodesign(appImage, true);\n-        SigningBase.verifySpctl(appImage, \"exec\");\n+        SigningBase.verifyCodesign(appImage, doSign);\n+        if (doSign) {\n+            SigningBase.verifySpctl(appImage, \"exec\");\n+        }\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningAppImageTest.java","additions":25,"deletions":7,"binary":false,"changes":32,"status":"modified"}]}