{"files":[{"patch":"@@ -42,0 +42,1 @@\n+#include \"opto\/regalloc.hpp\"\n@@ -2818,0 +2819,22 @@\n+\n+#ifndef PRODUCT\n+void BlackholeNode::format(PhaseRegAlloc* ra, outputStream* st) const {\n+  st->print(\"blackhole \");\n+  bool first = true;\n+  for (uint i = 0; i < req(); i++) {\n+    Node* n = in(i);\n+    if (n != NULL && OptoReg::is_valid(ra->get_reg_first(n))) {\n+      if (first) {\n+        first = false;\n+      } else {\n+        st->print(\", \");\n+      }\n+      char buf[128];\n+      ra->dump_register(n, buf);\n+      st->print(\"%s\", buf);\n+    }\n+  }\n+  st->cr();\n+}\n+#endif\n+\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -607,0 +607,24 @@\n+\/\/------------------------------BlackholeNode----------------------------\n+\/\/ Blackhole all arguments. This node would survive through the compiler\n+\/\/ the effects on its arguments, and would be finally matched to nothing.\n+class BlackholeNode : public MultiNode {\n+public:\n+  BlackholeNode(Node* ctrl) : MultiNode(1) {\n+    init_req(TypeFunc::Control, ctrl);\n+  }\n+  virtual int   Opcode() const;\n+  virtual uint ideal_reg() const { return 0; } \/\/ not matched in the AD file\n+  virtual const Type* bottom_type() const { return TypeTuple::MEMBAR; }\n+\n+  const RegMask &in_RegMask(uint idx) const {\n+    \/\/ Fake the incoming arguments mask for blackholes: accept all registers\n+    \/\/ and all stack slots. This would avoid any redundant register moves\n+    \/\/ for blackhole inputs.\n+    return RegMask::All;\n+  }\n+#ifndef PRODUCT\n+  virtual void format(PhaseRegAlloc* ra, outputStream* st) const;\n+#endif\n+};\n+\n+\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -7774,9 +7774,6 @@\n-  \/\/ Like GraphKit::insert_mem_bar, this code takes and produces control\n-  \/\/ to pin the Blackhole in the graph. Unlike GraphKit::insert_mem_bar,\n-  \/\/ this code neither uses nor produces memory, which avoids the unfortunate\n-  \/\/ side effects like breaking the optimizations across the blackhole.\n-\n-  MemBarNode* mb = MemBarNode::make(C, Op_Blackhole);\n-  mb->init_req(TypeFunc::Control, control());\n-  mb->init_req(TypeFunc::Memory,  C->top());\n-  Node* bh = _gvn.transform(mb);\n+  \/\/ Blackhole node pinches only the control, not memory. This allows\n+  \/\/ the blackhole to be pinned in the loop that computes blackholed\n+  \/\/ values, but have no other side effects, like breaking the optimizations\n+  \/\/ across the blackhole.\n+\n+  Node* bh = _gvn.transform(new BlackholeNode(control()));\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -3264,1 +3264,0 @@\n-  case Op_Blackhole:         return new BlackholeNode(C, atp, pn);\n@@ -3504,20 +3503,0 @@\n-#ifndef PRODUCT\n-void BlackholeNode::format(PhaseRegAlloc* ra, outputStream* st) const {\n-  st->print(\"blackhole \");\n-  bool first = true;\n-  for (uint i = 0; i < req(); i++) {\n-    Node* n = in(i);\n-    if (n != NULL && OptoReg::is_valid(ra->get_reg_first(n))) {\n-      if (first) {\n-        first = false;\n-      } else {\n-        st->print(\", \");\n-      }\n-      char buf[128];\n-      ra->dump_register(n, buf);\n-      st->print(\"%s\", buf);\n-    }\n-  }\n-  st->cr();\n-}\n-#endif\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1299,20 +1299,0 @@\n-\/\/------------------------------BlackholeNode----------------------------\n-\/\/ Blackhole all arguments. This node would survive through the compiler\n-\/\/ the effects on its arguments, and would be finally matched to nothing.\n-class BlackholeNode : public MemBarNode {\n-public:\n-  BlackholeNode(Compile* C, int alias_idx, Node* precedent)\n-    : MemBarNode(C, alias_idx, precedent) {}\n-  virtual int   Opcode() const;\n-  virtual uint ideal_reg() const { return 0; } \/\/ not matched in the AD file\n-  const RegMask &in_RegMask(uint idx) const {\n-    \/\/ Fake the incoming arguments mask for blackholes: accept all registers\n-    \/\/ and all stack slots. This would avoid any redundant register moves\n-    \/\/ for blackhole inputs.\n-    return RegMask::All;\n-  }\n-#ifndef PRODUCT\n-  virtual void format(PhaseRegAlloc* ra, outputStream* st) const;\n-#endif\n-};\n-\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1568,1 +1568,1 @@\n-  declare_c2_type(BlackholeNode, MemBarNode)                              \\\n+  declare_c2_type(BlackholeNode, MultiNode)                               \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}