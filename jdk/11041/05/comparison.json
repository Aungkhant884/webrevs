{"files":[{"patch":"@@ -42,0 +42,1 @@\n+#include \"opto\/regalloc.hpp\"\n@@ -2740,0 +2741,22 @@\n+\n+#ifndef PRODUCT\n+void BlackholeNode::format(PhaseRegAlloc* ra, outputStream* st) const {\n+  st->print(\"blackhole \");\n+  bool first = true;\n+  for (uint i = 0; i < req(); i++) {\n+    Node* n = in(i);\n+    if (n != NULL && OptoReg::is_valid(ra->get_reg_first(n))) {\n+      if (first) {\n+        first = false;\n+      } else {\n+        st->print(\", \");\n+      }\n+      char buf[128];\n+      ra->dump_register(n, buf);\n+      st->print(\"%s\", buf);\n+    }\n+  }\n+  st->cr();\n+}\n+#endif\n+\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+class     BlackholeNode;\n@@ -607,0 +608,24 @@\n+\/\/------------------------------BlackholeNode----------------------------\n+\/\/ Blackhole all arguments. This node would survive through the compiler\n+\/\/ the effects on its arguments, and would be finally matched to nothing.\n+class BlackholeNode : public MultiNode {\n+public:\n+  BlackholeNode(Node* ctrl) : MultiNode(1) {\n+    init_req(TypeFunc::Control, ctrl);\n+  }\n+  virtual int   Opcode() const;\n+  virtual uint ideal_reg() const { return 0; } \/\/ not matched in the AD file\n+  virtual const Type* bottom_type() const { return TypeTuple::MEMBAR; }\n+\n+  const RegMask &in_RegMask(uint idx) const {\n+    \/\/ Fake the incoming arguments mask for blackholes: accept all registers\n+    \/\/ and all stack slots. This would avoid any redundant register moves\n+    \/\/ for blackhole inputs.\n+    return RegMask::All;\n+  }\n+#ifndef PRODUCT\n+  virtual void format(PhaseRegAlloc* ra, outputStream* st) const;\n+#endif\n+};\n+\n+\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -7844,0 +7844,8 @@\n+  \/\/ Blackhole node pinches only the control, not memory. This allows\n+  \/\/ the blackhole to be pinned in the loop that computes blackholed\n+  \/\/ values, but have no other side effects, like breaking the optimizations\n+  \/\/ across the blackhole.\n+\n+  Node* bh = _gvn.transform(new BlackholeNode(control()));\n+  set_control(_gvn.transform(new ProjNode(bh, TypeFunc::Control)));\n+\n@@ -7845,1 +7853,0 @@\n-  Node* bh = insert_mem_bar(Op_Blackhole);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3264,1 +3264,0 @@\n-  case Op_Blackhole:         return new BlackholeNode(C, atp, pn);\n@@ -3504,20 +3503,0 @@\n-#ifndef PRODUCT\n-void BlackholeNode::format(PhaseRegAlloc* ra, outputStream* st) const {\n-  st->print(\"blackhole \");\n-  bool first = true;\n-  for (uint i = 0; i < req(); i++) {\n-    Node* n = in(i);\n-    if (n != NULL && OptoReg::is_valid(ra->get_reg_first(n))) {\n-      if (first) {\n-        first = false;\n-      } else {\n-        st->print(\", \");\n-      }\n-      char buf[128];\n-      ra->dump_register(n, buf);\n-      st->print(\"%s\", buf);\n-    }\n-  }\n-  st->cr();\n-}\n-#endif\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1299,20 +1299,0 @@\n-\/\/------------------------------BlackholeNode----------------------------\n-\/\/ Blackhole all arguments. This node would survive through the compiler\n-\/\/ the effects on its arguments, and would be finally matched to nothing.\n-class BlackholeNode : public MemBarNode {\n-public:\n-  BlackholeNode(Compile* C, int alias_idx, Node* precedent)\n-    : MemBarNode(C, alias_idx, precedent) {}\n-  virtual int   Opcode() const;\n-  virtual uint ideal_reg() const { return 0; } \/\/ not matched in the AD file\n-  const RegMask &in_RegMask(uint idx) const {\n-    \/\/ Fake the incoming arguments mask for blackholes: accept all registers\n-    \/\/ and all stack slots. This would avoid any redundant register moves\n-    \/\/ for blackhole inputs.\n-    return RegMask::All;\n-  }\n-#ifndef PRODUCT\n-  virtual void format(PhaseRegAlloc* ra, outputStream* st) const;\n-#endif\n-};\n-\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1569,1 +1569,1 @@\n-  declare_c2_type(BlackholeNode, MemBarNode)                              \\\n+  declare_c2_type(BlackholeNode, MultiNode)                               \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8296545\n+ * @requires vm.compiler2.enabled\n+ * @summary Blackholes should allow load optimizations\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.blackhole.BlackholeLoadOptoTest\n+ *\/\n+\n+package compiler.c2.irTests.blackhole;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+\n+public class BlackholeLoadOptoTest {\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\n+            \"-XX:+UnlockExperimentalVMOptions\",\n+            \"-XX:CompileThreshold=100\",\n+            \"-XX:-TieredCompilation\",\n+            \"-XX:CompileCommand=blackhole,compiler.c2.irTests.blackhole.BlackholeLoadOptoTest::blackhole\",\n+            \"-XX:CompileCommand=dontinline,compiler.c2.irTests.blackhole.BlackholeLoadOptoTest::dontinline\"\n+        );\n+    }\n+\n+    static int x, y;\n+\n+\n+    \/*\n+     * Negative test: check that dangling expressions are eliminated\n+     *\/\n+\n+    @Test\n+    @IR(failOn = {IRNode.LOAD_I, IRNode.MUL_I})\n+    static void testNothing() {\n+        int r1 = x * y;\n+        int r2 = x * y;\n+    }\n+\n+    @Run(test = \"testNothing\")\n+    static void runNothing() {\n+        testNothing();\n+    }\n+\n+    \/*\n+     * Auxiliary test: check that dontinline method does break optimizations\n+     *\/\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_I, \"4\"})\n+    @IR(counts = {IRNode.MUL_I, \"2\"})\n+    static void testDontline() {\n+        int r1 = x * y;\n+        dontinline(r1);\n+        int r2 = x * y;\n+        dontinline(r2);\n+    }\n+\n+    static void dontinline(int x) {}\n+\n+    @Run(test = \"testDontline\")\n+    static void runDontinline() {\n+        testDontline();\n+    }\n+\n+    \/*\n+     * Positive test: check that blackhole does not break optimizations\n+     *\/\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_I, \"2\"})\n+    @IR(counts = {IRNode.MUL_I, \"1\"})\n+    static void testBlackholed() {\n+        int r1 = x * y;\n+        blackhole(r1);\n+        int r2 = x * y;\n+        blackhole(r2);\n+    }\n+\n+    static void blackhole(int x) {}\n+\n+    @Run(test = \"testBlackholed\")\n+    static void runBlackholed() {\n+        testBlackholed();\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/blackhole\/BlackholeLoadOptoTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"}]}