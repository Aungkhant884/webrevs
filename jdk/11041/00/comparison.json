{"files":[{"patch":"@@ -689,0 +689,1 @@\n+    if (op == Op_Blackhole)                    continue;  \/\/ Blackholes are not really stores\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -7779,0 +7779,15 @@\n+  \/\/ Like GraphKit::insert_mem_bar, this code takes and produces control\n+  \/\/ to pin the Blackhole in the graph. Unlike GraphKit::insert_mem_bar,\n+  \/\/ this code only uses memory, but does not produce it, which avoids\n+  \/\/ the unfortunate side effects like breaking the optimizations across\n+  \/\/ the blackhole.\n+\n+  Node* mem = reset_memory();\n+  set_all_memory(mem);\n+\n+  MemBarNode* mb = MemBarNode::make(C, Op_Blackhole);\n+  mb->init_req(TypeFunc::Control, control());\n+  mb->init_req(TypeFunc::Memory,  mem);\n+  Node* bh = _gvn.transform(mb);\n+  set_control(_gvn.transform(new ProjNode(bh, TypeFunc::Control)));\n+\n@@ -7780,1 +7795,0 @@\n-  Node* bh = insert_mem_bar(Op_Blackhole);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8296545\n+ * @requires vm.compiler2.enabled\n+ * @summary Blackholes should allow load optimizations\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.blackhole.BlackholeLoadOptoTest\n+ *\/\n+\n+package compiler.c2.irTests.blackhole;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+\n+public class BlackholeLoadOptoTest {\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\n+            \"-XX:+UnlockExperimentalVMOptions\",\n+            \"-XX:CompileThreshold=100\",\n+            \"-XX:-TieredCompilation\",\n+            \"-XX:CompileCommand=blackhole,compiler.c2.irTests.blackhole.BlackholeLoadOptoTest::blackhole\",\n+            \"-XX:CompileCommand=dontinline,compiler.c2.irTests.blackhole.BlackholeLoadOptoTest::dontinline\"\n+        );\n+    }\n+\n+    static int x, y;\n+\n+\n+    \/*\n+     * Negative test: check that dangling expressions are eliminated\n+     *\/\n+\n+    @Test\n+    @IR(failOn = {IRNode.LOAD_I, IRNode.MUL_I})\n+    static void testNothing() {\n+        int r1 = x * y;\n+        int r2 = x * y;\n+    }\n+\n+    @Run(test = \"testNothing\")\n+    static void runNothing() {\n+        testNothing();\n+    }\n+\n+    \/*\n+     * Auxiliary test: check that dontinline method does break optimizations\n+     *\/\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_I, \"4\"})\n+    @IR(counts = {IRNode.MUL_I, \"2\"})\n+    static void testDontline() {\n+        int r1 = x * y;\n+        dontinline(r1);\n+        int r2 = x * y;\n+        dontinline(r2);\n+    }\n+\n+    static void dontinline(int x) {}\n+\n+    @Run(test = \"testDontline\")\n+    static void runDontinline() {\n+        testDontline();\n+    }\n+\n+    \/*\n+     * Positive test: check that blackhole does not break optimizations\n+     *\/\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_I, \"2\"})\n+    @IR(counts = {IRNode.MUL_I, \"1\"})\n+    static void testBlackholed() {\n+        int r1 = x * y;\n+        blackhole(r1);\n+        int r2 = x * y;\n+        blackhole(r2);\n+    }\n+\n+    static void blackhole(int x) {}\n+\n+    @Run(test = \"testBlackholed\")\n+    static void runBlackholed() {\n+        testBlackholed();\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/blackhole\/BlackholeLoadOptoTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"}]}