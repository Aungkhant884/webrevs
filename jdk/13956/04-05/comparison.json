{"files":[{"patch":"@@ -168,0 +168,3 @@\n+    \/\/ The file descriptor for reporting errors back to our parent we got on the command\n+    \/\/ line should be the same like the one in the ChildStuff struct we've just read.\n+    assert(c.fail[1] == fdout);\n","filename":"src\/java.base\/unix\/native\/jspawnhelper\/jspawnhelper.c","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -560,1 +560,3 @@\n-    restartableWrite(c->childenv[1], (char *)&magic, sizeof(magic)); \/\/ magic number first\n+    if (writeFully(c->childenv[1], (char *)&magic, sizeof(magic)) != sizeof(magic)) { \/\/ magic number first\n+        return -1;\n+    }\n@@ -564,3 +566,8 @@\n-    restartableWrite(c->childenv[1], (char *)c, sizeof(*c));\n-    restartableWrite(c->childenv[1], (char *)&sp, sizeof(sp));\n-    restartableWrite(c->childenv[1], buf, bufsize);\n+    if (writeFully(c->childenv[1], (char *)c, sizeof(*c)) != sizeof(*c) ||\n+        writeFully(c->childenv[1], (char *)&sp, sizeof(sp)) != sizeof(sp) ||\n+        writeFully(c->childenv[1], buf, bufsize) != bufsize) {\n+        return -1;\n+    }\n+    \/* We're done. Let jspwanhelper know he can't expect any more data from us. *\/\n+    close(c->childenv[1]);\n+    c->childenv[1] = -1;\n@@ -623,0 +630,2 @@\n+    \/\/ Reset errno to protect against bogus error messages\n+    errno = 0;\n@@ -721,1 +730,0 @@\n-            assert(errnum == CHILD_IS_ALIVE);\n@@ -723,3 +731,2 @@\n-                \/* Should never happen since the first thing the spawn\n-                 * helper should do is to send an alive ping to the parent,\n-                 * before doing any subsequent work. *\/\n+                \/* This can happen if the spawn helper encounters an error\n+                 * before or during the handshake with the parent. *\/\n","filename":"src\/java.base\/unix\/native\/libjava\/ProcessImpl_md.c","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -39,8 +39,0 @@\n-ssize_t\n-restartableWrite(int fd, const void *buf, size_t count)\n-{\n-    ssize_t result;\n-    RESTARTABLE(write(fd, buf, count), result);\n-    return result;\n-}\n-\n@@ -166,0 +158,40 @@\n+\/*\n+ * Writes nbyte bytes from buf into file descriptor fd,\n+ * The write operation is retried in case of EINTR or partial writes.\n+ *\n+ * Returns number of bytes written (normally nbyte).\n+ * In case of write errors, returns -1 and sets errno.\n+ *\/\n+ssize_t\n+writeFully(int fd, const void *buf, size_t nbyte)\n+{\n+#ifdef DEBUG\n+\/* This code is only used in debug builds for testing truncated writes\n+ * during the handshake with the spawn helper for MODE_POSIX_SPAWN.\n+ * See: test\/jdk\/java\/lang\/ProcessBuilder\/JspawnhelperProtocol.java\n+ *\/\n+    const char* env = getenv(\"JTREG_JSPAWNHELPER_PROTOCOL_TEST\");\n+    if (env != NULL && atoi(env) == 99 && nbyte == sizeof(ChildStuff)) {\n+        printf(\"posix_spawn: truncating write of ChildStuff struct\\n\");\n+        fflush(stdout);\n+        nbyte = nbyte \/ 2;\n+    }\n+#endif\n+    ssize_t remaining = nbyte;\n+    for (;;) {\n+        ssize_t n = write(fd, buf, remaining);\n+        if (n > 0) {\n+            remaining -= n;\n+            if (remaining <= 0)\n+                return nbyte;\n+            \/* We were interrupted in the middle of writing the bytes.\n+             * Unlikely, but possible. *\/\n+            buf = (void *) (((char *)buf) + n);\n+        } else if (n == -1 && errno == EINTR) {\n+            \/* Retry *\/\n+        } else {\n+            return -1;\n+        }\n+    }\n+}\n+\n@@ -324,1 +356,3 @@\n-        restartableWrite(fail_pipe_fd, &code, sizeof(code));\n+        if (writeFully(fail_pipe_fd, &code, sizeof(code)) != sizeof(code)) {\n+            goto WhyCantJohnnyExec;\n+        }\n@@ -396,1 +430,1 @@\n-        restartableWrite(fail_pipe_fd, &errnum, sizeof(errnum));\n+        writeFully(fail_pipe_fd, &errnum, sizeof(errnum));\n","filename":"src\/java.base\/unix\/native\/libjava\/childproc.c","additions":44,"deletions":10,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-ssize_t restartableWrite(int fd, const void *buf, size_t count);\n+ssize_t writeFully(int fd, const void *buf, size_t count);\n","filename":"src\/java.base\/unix\/native\/libjava\/childproc.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.concurrent.TimeoutException;\n@@ -45,1 +46,1 @@\n-    \/\/ Base error code to communicate various error states from grandchild to child process\n+    \/\/ Base error code to communicate various error states from the parent process to the top-level test\n@@ -56,1 +57,1 @@\n-            System.out.println(e.toString());\n+            e.printStackTrace(System.out);\n@@ -146,1 +147,1 @@\n-        long grandChildPid = Integer.parseInt(line.substring(line.indexOf(':') + 1));\n+        long childPid = Integer.parseInt(line.substring(line.indexOf(':') + 1));\n@@ -152,1 +153,1 @@\n-        Optional<ProcessHandle> oph = ProcessHandle.of(grandChildPid);\n+        Optional<ProcessHandle> oph = ProcessHandle.of(childPid);\n@@ -155,3 +156,8 @@\n-            Optional<String> cmd = ph.info().command();\n-            if (cmd.isPresent() && cmd.get().endsWith(\"jspawnhelper\")) {\n-                throw new Exception(\"jspawnhelper still alive after parent Java process terminated\");\n+            try {\n+                \/\/ Give jspawnhelper a chance to exit gracefully\n+                ph.onExit().get(TIMEOUT, TimeUnit.SECONDS);\n+            } catch (TimeoutException te) {\n+                Optional<String> cmd = ph.info().command();\n+                if (cmd.isPresent() && cmd.get().endsWith(\"jspawnhelper\")) {\n+                    throw new Exception(\"jspawnhelper still alive after parent Java process terminated\");\n+                }\n@@ -167,0 +173,35 @@\n+    private static void simulateTruncatedWriteInParent(int stage) throws Exception {\n+        ProcessBuilder pb;\n+        pb = ProcessTools.createJavaProcessBuilder(\"-Djdk.lang.Process.launchMechanism=posix_spawn\",\n+                                                   \"JspawnhelperProtocol\",\n+                                                   \"simulateTruncatedWriteInParent\" + stage);\n+        pb.environment().put(ENV_KEY, Integer.toString(stage));\n+        Process p = pb.start();\n+\n+        BufferedReader br = p.inputReader();\n+        String line = br.readLine();\n+        while (line != null && !line.startsWith(\"posix_spawn:\")) {\n+            System.out.println(line);\n+            line = br.readLine();\n+        }\n+        if (line == null) {\n+            throw new Exception(\"Wrong output from parent process\");\n+        }\n+        System.out.println(line);\n+\n+        if (!p.waitFor(TIMEOUT, TimeUnit.SECONDS)) {\n+            throw new Exception(\"Parent process timed out\");\n+        }\n+        line = br.readLine();\n+        while (line != null) {\n+            System.out.println(line);\n+            line = br.readLine();\n+        }\n+\n+        int ret = p.exitValue();\n+        if (ret != ERROR) {\n+            throw new Exception(\"Expected exit code \" + ERROR + \" but got \" + ret);\n+        }\n+        System.out.println(\"Parent exit code: \" + ret);\n+    }\n+\n@@ -193,0 +234,1 @@\n+            simulateTruncatedWriteInParent(99);\n@@ -195,1 +237,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/JspawnhelperProtocol.java","additions":50,"deletions":8,"binary":false,"changes":58,"status":"modified"}]}