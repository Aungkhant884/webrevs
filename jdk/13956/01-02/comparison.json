{"files":[{"patch":"@@ -0,0 +1,176 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8307990\n+ * @requires (os.family == \"linux\" & !vm.musl)\n+ * @requires vm.debug\n+ * @library \/test\/lib\n+ * @run main\/othervm\/timeout=300 JspawnhelperProtocol\n+ *\/\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class JspawnhelperProtocol {\n+    \/\/ Timout in seconds\n+    private static final int TIMEOUT = 60;\n+    private static final int ERROR = 10;\n+    private static final String[] CMD = { \"pwd\" };\n+    private static final String ENV_KEY = \"JTREG_JSPAWNHELPER_PROTOCOL_TEST\";\n+\n+    private static void childCode(String arg) throws IOException, InterruptedException {\n+        System.out.println(\"Recursively executing 'JspawnhelperProtocol \" + arg + \"'\");\n+        Process p = null;\n+        try {\n+            p = Runtime.getRuntime().exec(CMD);\n+        } catch (Exception e) {\n+            System.out.println(e.toString());\n+            System.exit(ERROR);\n+        }\n+        if (!p.waitFor(TIMEOUT, TimeUnit.SECONDS)) {\n+            System.exit(ERROR + 1);\n+        }\n+        if (p.exitValue() == 0) {\n+            String pwd = p.inputReader().readLine();\n+            if (!Path.of(\"\").toAbsolutePath().toString().equals(pwd)) {\n+                System.exit(ERROR + 2);\n+            }\n+            System.out.println(\"  Successfully executed '\" + CMD[0] + \"'\");\n+            System.exit(0);\n+        } else {\n+            System.out.println(\"  Failed to executed '\" + CMD[0] + \"' (exitValue=\" + p.exitValue() + \")\");\n+            System.exit(ERROR + 3);\n+        }\n+    }\n+\n+    private static void normalExec() throws Exception {\n+        ProcessBuilder pb;\n+        pb = ProcessTools.createJavaProcessBuilder(\"-Djdk.lang.Process.launchMechanism=posix_spawn\",\n+                                                   \"JspawnhelperProtocol\",\n+                                                   \"normalExec\");\n+        Process p = pb.start();\n+        if (!p.waitFor(TIMEOUT, TimeUnit.SECONDS)) {\n+            System.exit(ERROR + 4);\n+        }\n+        if (p.exitValue() != 0) {\n+            throw new Exception(\"Child exited with \" + p.exitValue());\n+        }\n+        System.out.println(new String(p.getInputStream().readAllBytes()));\n+    }\n+\n+    private static void simulateCrashInChild(int stage) throws Exception {\n+        ProcessBuilder pb;\n+        pb = ProcessTools.createJavaProcessBuilder(\"-Djdk.lang.Process.launchMechanism=posix_spawn\",\n+                                                   \"JspawnhelperProtocol\",\n+                                                   \"simulateCrashInChild\" + stage);\n+        pb.environment().put(ENV_KEY, Integer.toString(stage));\n+        Process p = pb.start();\n+\n+        BufferedReader br = p.inputReader();\n+        String line = br.readLine();\n+        boolean foundCrashInfo = false;\n+        while (line != null) {\n+            System.out.println(line);\n+            if (line.equals(\"posix_spawn:0\")) {\n+                foundCrashInfo = true;\n+            }\n+            line = br.readLine();\n+        }\n+        if (!foundCrashInfo) {\n+            throw new Exception(\"Wrong output from child process\");\n+        }\n+        if (!p.waitFor(TIMEOUT, TimeUnit.SECONDS)) {\n+            System.exit(ERROR + 5);\n+        }\n+\n+        int ret = p.exitValue();\n+        if (ret == 0) {\n+            throw new Exception(\"Expected error in child execution\");\n+        }\n+        System.out.println(\"Child exit code: \" + ret);\n+    }\n+\n+    private static void simulateCrashInParent(int stage) throws Exception {\n+        ProcessBuilder pb;\n+        pb = ProcessTools.createJavaProcessBuilder(\"-Djdk.lang.Process.launchMechanism=posix_spawn\",\n+                                                   \"JspawnhelperProtocol\",\n+                                                   \"simulateCrashInParent\" + stage);\n+        pb.environment().put(ENV_KEY, Integer.toString(stage));\n+        Process p = pb.start();\n+\n+        BufferedReader br = p.inputReader();\n+        String line = br.readLine();\n+        while (line != null && !line.startsWith(\"posix_spawn:\")) {\n+            System.out.println(line);\n+            line = br.readLine();\n+        }\n+        if (line == null) {\n+            throw new Exception(\"Wrong output from child process\");\n+        }\n+        System.out.println(line);\n+        long grandChildPid = Integer.parseInt(line.substring(line.indexOf(':') + 1));\n+\n+        if (!p.waitFor(TIMEOUT, TimeUnit.SECONDS)) {\n+            System.exit(ERROR + 6);\n+        }\n+\n+        Optional<ProcessHandle> oph = ProcessHandle.of(grandChildPid);\n+        if (!oph.isEmpty()) {\n+            ProcessHandle ph = oph.get();\n+            Optional<String> cmd = ph.info().command();\n+            if (cmd.isPresent() && cmd.get().endsWith(\"jspawnhelper\")) {\n+                throw new Exception(\"jspawnhelper still alive after parent Java process terminated\");\n+            }\n+        }\n+        int ret = p.exitValue();\n+        if (ret != stage) {\n+            throw new Exception(\"Expected exit code \" + stage + \" but got \" + ret);\n+        }\n+        System.out.println(\"Child exit code: \" + ret);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (args.length > 0) {\n+            \/\/ We enter here if we get executed recursively from within this test (see below)\n+            childCode(args[0]);\n+        } else {\n+            \/\/ Normal test entry\n+            normalExec();\n+            simulateCrashInParent(1);\n+            simulateCrashInParent(2);\n+            simulateCrashInParent(3);\n+            simulateCrashInChild(4);\n+            simulateCrashInChild(5);\n+            simulateCrashInChild(6);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/JspawnhelperProtocol.java","additions":176,"deletions":0,"binary":false,"changes":176,"status":"added"}]}