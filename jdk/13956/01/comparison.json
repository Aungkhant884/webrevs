{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include <assert.h>\n@@ -86,1 +87,5 @@\n-    if (readFully (fdin, c, sizeof(*c)) == -1) {\n+#ifdef DEBUG\n+    jtregSimulateCrash(0, 5);\n+#endif\n+\n+    if (readFully (fdin, c, sizeof(*c)) != sizeof(*c)) {\n@@ -90,1 +95,1 @@\n-    if (readFully (fdin, &sp, sizeof(sp)) == -1) {\n+    if (readFully (fdin, &sp, sizeof(sp)) != sizeof(sp)) {\n@@ -99,1 +104,1 @@\n-    if (readFully (fdin, buf, bufsize) == -1) {\n+    if (readFully (fdin, buf, bufsize) != bufsize) {\n@@ -135,1 +140,1 @@\n-    int r, fdin, fdout;\n+    int r, fdinr, fdinw, fdout;\n@@ -138,3 +143,6 @@\n-    r = sscanf (argv[argc-1], \"%d:%d\", &fdin, &fdout);\n-    if (r == 2 && fcntl(fdin, F_GETFD) != -1) {\n-        fstat(fdin, &buf);\n+#ifdef DEBUG\n+    jtregSimulateCrash(0, 4);\n+#endif\n+    r = sscanf (argv[argc-1], \"%d:%d:%d\", &fdinr, &fdinw, &fdout);\n+    if (r == 3 && fcntl(fdinr, F_GETFD) != -1 && fcntl(fdinw, F_GETFD) != -1) {\n+        fstat(fdinr, &buf);\n@@ -151,1 +159,9 @@\n-    initChildStuff (fdin, fdout, &c);\n+    \/\/ Close the writing end of the pipe we use for reading from the parent.\n+    \/\/ We have to do this before we start reading from the parent to avoid\n+    \/\/ blocking in the case the parent exits before we finished reading from it.\n+    close(fdinw); \/\/ Deliberately ignore errors (see https:\/\/lwn.net\/Articles\/576478\/).\n+    initChildStuff (fdinr, fdout, &c);\n+    \/\/ Now set the file descriptor for the pipe's writing end to -1\n+    \/\/ for the case that somebody tries to close it again.\n+    assert(c.childenv[1] == fdinw);\n+    c.childenv[1] = -1;\n","filename":"src\/java.base\/unix\/native\/jspawnhelper\/jspawnhelper.c","additions":25,"deletions":9,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -490,1 +490,1 @@\n-    char *buf, buf1[16];\n+    char *buf, buf1[24];\n@@ -497,1 +497,1 @@\n-    snprintf(buf1, sizeof(buf1), \"%d:%d\", c->childenv[0], c->fail[1]);\n+    snprintf(buf1, sizeof(buf1), \"%d:%d:%d\", c->childenv[0], c->childenv[1], c->fail[1]);\n@@ -530,1 +530,1 @@\n-                fcntl(c->fds[i], F_SETFD, flags & (~1));\n+                fcntl(c->fds[i], F_SETFD, flags & (~FD_CLOEXEC));\n@@ -541,0 +541,4 @@\n+#ifdef DEBUG\n+    jtregSimulateCrash(resultPid, 1);\n+#endif\n+\n@@ -556,4 +560,7 @@\n-    write(c->childenv[1], (char *)&magic, sizeof(magic)); \/\/ magic number first\n-    write(c->childenv[1], (char *)c, sizeof(*c));\n-    write(c->childenv[1], (char *)&sp, sizeof(sp));\n-    write(c->childenv[1], buf, bufsize);\n+    restartableWrite(c->childenv[1], (char *)&magic, sizeof(magic)); \/\/ magic number first\n+#ifdef DEBUG\n+    jtregSimulateCrash(resultPid, 2);\n+#endif\n+    restartableWrite(c->childenv[1], (char *)c, sizeof(*c));\n+    restartableWrite(c->childenv[1], (char *)&sp, sizeof(sp));\n+    restartableWrite(c->childenv[1], buf, bufsize);\n@@ -561,0 +568,3 @@\n+#ifdef DEBUG\n+    jtregSimulateCrash(resultPid, 3);\n+#endif\n","filename":"src\/java.base\/unix\/native\/libjava\/ProcessImpl_md.c","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -213,1 +213,1 @@\n-    if (mode == MODE_CLONE || mode == MODE_VFORK) {\n+    if (mode == MODE_VFORK) {\n@@ -327,0 +327,3 @@\n+#ifdef DEBUG\n+    jtregSimulateCrash(0, 6);\n+#endif\n@@ -399,0 +402,16 @@\n+\n+#ifdef DEBUG\n+\/* This method is only used in debug builds for testing MODE_POSIX_SPAWN\n+ * in the light of abnormal program termination of either the parent JVM\n+ * or the newly created jspawnhelper child process during the execution of\n+ * Java_java_lang_ProcessImpl_forkAndExec().\n+ * See: test\/jdk\/java\/lang\/ProcessBuilder\/JspawnhelperProtocol.java\n+ *\/\n+void jtregSimulateCrash(pid_t child, int stage) {\n+    const char* env = getenv(\"JTREG_JSPAWNHELPER_PROTOCOL_TEST\");\n+    if (env != NULL && atoi(env) == stage) {\n+        printf(\"posix_spawn:%d\\n\", child);\n+        exit(stage);\n+    }\n+}\n+#endif\n","filename":"src\/java.base\/unix\/native\/libjava\/childproc.c","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,1 +88,0 @@\n-#define MODE_CLONE 4\n@@ -152,0 +151,10 @@\n+#ifdef DEBUG\n+\/* This method is only used in debug builds for testing MODE_POSIX_SPAWN\n+ * in the light of abnormal program termination of either the parent JVM\n+ * or the newly created jspawnhelper child process during the execution of\n+ * Java_java_lang_ProcessImpl_forkAndExec().\n+ * See: test\/jdk\/java\/lang\/ProcessBuilder\/JspawnhelperProtocol.java\n+ *\/\n+void jtregSimulateCrash(pid_t child, int stage);\n+#endif\n+\n","filename":"src\/java.base\/unix\/native\/libjava\/childproc.h","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"}]}