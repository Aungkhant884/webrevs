{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+#include <assert.h>\n@@ -86,1 +87,1 @@\n-    if (readFully (fdin, c, sizeof(*c)) == -1) {\n+    if (readFully (fdin, c, sizeof(*c)) != sizeof(*c)) {\n@@ -90,1 +91,1 @@\n-    if (readFully (fdin, &sp, sizeof(sp)) == -1) {\n+    if (readFully (fdin, &sp, sizeof(sp)) != sizeof(sp)) {\n@@ -99,1 +100,1 @@\n-    if (readFully (fdin, buf, bufsize) == -1) {\n+    if (readFully (fdin, buf, bufsize) != bufsize) {\n@@ -135,1 +136,1 @@\n-    int r, fdin, fdout;\n+    int r, fdinr, fdinw, fdout;\n@@ -138,3 +139,3 @@\n-    r = sscanf (argv[argc-1], \"%d:%d\", &fdin, &fdout);\n-    if (r == 2 && fcntl(fdin, F_GETFD) != -1) {\n-        fstat(fdin, &buf);\n+    r = sscanf (argv[argc-1], \"%d:%d:%d\", &fdinr, &fdinw, &fdout);\n+    if (r == 3 && fcntl(fdinr, F_GETFD) != -1 && fcntl(fdinw, F_GETFD) != -1) {\n+        fstat(fdinr, &buf);\n@@ -151,1 +152,9 @@\n-    initChildStuff (fdin, fdout, &c);\n+    \/\/ Close the writing end of the pipe we use for reading from the parent.\n+    \/\/ We have to do this before we start reading from the parent to avoid\n+    \/\/ blocking in the case the parent exits before we finished reading from it.\n+    close(fdinw); \/\/ Deliberately ignore errors (see https:\/\/lwn.net\/Articles\/576478\/).\n+    initChildStuff (fdinr, fdout, &c);\n+    \/\/ Now set the file descriptor for the pipe's writing end to -1\n+    \/\/ for the case that somebody tries to close it again.\n+    assert(c.childenv[1] == fdinw);\n+    c.childenv[1] = -1;\n","filename":"src\/java.base\/unix\/native\/jspawnhelper\/jspawnhelper.c","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -490,1 +490,1 @@\n-    char *buf, buf1[16];\n+    char *buf, buf1[24];\n@@ -497,1 +497,1 @@\n-    snprintf(buf1, sizeof(buf1), \"%d:%d\", c->childenv[0], c->fail[1]);\n+    snprintf(buf1, sizeof(buf1), \"%d:%d:%d\", c->childenv[0], c->childenv[1], c->fail[1]);\n@@ -556,4 +556,4 @@\n-    write(c->childenv[1], (char *)&magic, sizeof(magic)); \/\/ magic number first\n-    write(c->childenv[1], (char *)c, sizeof(*c));\n-    write(c->childenv[1], (char *)&sp, sizeof(sp));\n-    write(c->childenv[1], buf, bufsize);\n+    restartableWrite(c->childenv[1], (char *)&magic, sizeof(magic)); \/\/ magic number first\n+    restartableWrite(c->childenv[1], (char *)c, sizeof(*c));\n+    restartableWrite(c->childenv[1], (char *)&sp, sizeof(sp));\n+    restartableWrite(c->childenv[1], buf, bufsize);\n","filename":"src\/java.base\/unix\/native\/libjava\/ProcessImpl_md.c","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -213,1 +213,1 @@\n-    if (mode == MODE_CLONE || mode == MODE_VFORK) {\n+    if (mode == MODE_VFORK) {\n","filename":"src\/java.base\/unix\/native\/libjava\/childproc.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,1 +88,0 @@\n-#define MODE_CLONE 4\n","filename":"src\/java.base\/unix\/native\/libjava\/childproc.h","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}