{"files":[{"patch":"@@ -28,1 +28,1 @@\n- * @requires (os.family == \"linux\" & !vm.musl)\n+ * @requires (os.family == \"linux\")\n@@ -50,1 +50,1 @@\n-    private static void childCode(String arg) throws IOException, InterruptedException {\n+    private static void parentCode(String arg) throws IOException, InterruptedException {\n@@ -60,1 +60,1 @@\n-            System.out.println(\"Grandchild process timed out\");\n+            System.out.println(\"Child process timed out\");\n@@ -67,1 +67,1 @@\n-                System.out.println(\"Grandchild process returned '\" + pwd + \"' (expected '\" + realPwd + \"')\");\n+                System.out.println(\"Child process returned '\" + pwd + \"' (expected '\" + realPwd + \"')\");\n@@ -86,1 +86,1 @@\n-            throw new Exception(\"Child process timed out\");\n+            throw new Exception(\"Parent process timed out\");\n@@ -89,1 +89,1 @@\n-            throw new Exception(\"Child process exited with \" + p.exitValue());\n+            throw new Exception(\"Parent process exited with \" + p.exitValue());\n@@ -116,1 +116,1 @@\n-            throw new Exception(\"Child process timed out\");\n+            throw new Exception(\"Parent process timed out\");\n@@ -121,1 +121,1 @@\n-            throw new Exception(\"Expected error in child execution\");\n+            throw new Exception(\"Expected error during child execution\");\n@@ -123,1 +123,1 @@\n-        System.out.println(\"Child exit code: \" + ret);\n+        System.out.println(\"Parent exit code: \" + ret);\n@@ -143,1 +143,1 @@\n-            throw new Exception(\"Wrong output from child process\");\n+            throw new Exception(\"Wrong output from parent process\");\n@@ -149,1 +149,1 @@\n-            throw new Exception(\"Child process timed out\");\n+            throw new Exception(\"Parent process timed out\");\n@@ -164,1 +164,1 @@\n-        System.out.println(\"Child exit code: \" + ret);\n+        System.out.println(\"Parent exit code: \" + ret);\n@@ -168,1 +168,13 @@\n-\n+        \/\/ This test works as follows:\n+        \/\/  - jtreg executes the test class `JspawnhelperProtocol` without arguments.\n+        \/\/    This is the initial \"grandparent\" process.\n+        \/\/  - For each sub-test (i.e. `normalExec()`, `simulateCrashInParent()` and\n+        \/\/    `simulateCrashInChild()`), a new sub-process (called the \"parent\") will be\n+        \/\/    forked which executes `JspawnhelperProtocol` recursively with a corresponding\n+        \/\/    command line argument.\n+        \/\/  - The forked `JspawnhelperProtocol` process (i.e. the \"parent\") runs\n+        \/\/    `JspawnhelperProtocol::parentCode()` which forks off yet another sub-process\n+        \/\/    (called the \"child\").\n+        \/\/  - The sub-tests in the \"grandparent\" check that various abnormal program\n+        \/\/    terminations in the \"parent\" or the \"child\" process are handled gracefully and\n+        \/\/    don't lead to deadlocks or zombie processes.\n@@ -170,2 +182,2 @@\n-            \/\/ We enter here if we get executed recursively from within this test (see below)\n-            childCode(args[0]);\n+            \/\/ Entry point for recursive execution in the \"parent\" process\n+            parentCode(args[0]);\n@@ -173,1 +185,1 @@\n-            \/\/ Normal test entry\n+            \/\/ Main test entry for execution from jtreg\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/JspawnhelperProtocol.java","additions":28,"deletions":16,"binary":false,"changes":44,"status":"modified"}]}