{"files":[{"patch":"@@ -1525,0 +1525,3 @@\n+Thread* os::ThreadCrashProtection::_protected_thread = NULL;\n+os::ThreadCrashProtection* os::ThreadCrashProtection::_crash_protection = NULL;\n+\n@@ -1526,0 +1529,1 @@\n+  assert(Thread::current()->is_JfrSampler_thread(), \"should be JFRSampler\");\n@@ -1527,1 +1531,1 @@\n-};\n+}\n@@ -1536,1 +1540,0 @@\n-  assert(_protected_thread != NULL, \"Cannot crash protect a NULL thread\");\n@@ -1546,1 +1549,1 @@\n-    _protected_thread->set_crash_protection(this);\n+    _crash_protection = this;\n@@ -1549,1 +1552,2 @@\n-    _protected_thread->set_crash_protection(NULL);\n+    _crash_protection = NULL;\n+    _protected_thread = NULL;\n@@ -1553,1 +1557,0 @@\n-  assert(_protected_thread == Thread::current(), \"protected thread must be current thread\");\n@@ -1555,1 +1558,2 @@\n-  _protected_thread->set_crash_protection(NULL);\n+  _crash_protection = NULL;\n+  _protected_thread = NULL;\n@@ -1559,3 +1563,15 @@\n-void os::ThreadCrashProtection::check_crash_protection(int sig) {\n-  if (sig == SIGSEGV || sig == SIGBUS) {\n-    siglongjmp(_jmpbuf, 1);\n+void os::ThreadCrashProtection::restore() {\n+  assert(_crash_protection != NULL, \"must have crash protection\");\n+  siglongjmp(_jmpbuf, 1);\n+}\n+\n+void os::ThreadCrashProtection::check_crash_protection(int sig,\n+    Thread* thread) {\n+\n+  if (thread != NULL &&\n+      thread == _protected_thread &&\n+      _crash_protection != NULL) {\n+\n+    if (sig == SIGSEGV || sig == SIGBUS) {\n+      _crash_protection->restore();\n+    }\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":25,"deletions":9,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -149,2 +149,3 @@\n- * Wrap the callback with a sigsetjmp and in case of a SIGSEGV\/SIGBUS we\n- * siglongjmp back.\n+ * Crash protection for the JfrSampler thread. Wrap the callback\n+ * with a sigsetjmp and in case of a SIGSEGV\/SIGBUS we siglongjmp\n+ * back.\n@@ -157,2 +158,0 @@\n-  Thread* _protected_thread;\n-  sigjmp_buf _jmpbuf;\n@@ -160,0 +159,4 @@\n+  static bool is_crash_protected(Thread* thr) {\n+    return _crash_protection != NULL && _protected_thread == thr;\n+  }\n+\n@@ -162,1 +165,7 @@\n-  void check_crash_protection(int sig);\n+\n+  static void check_crash_protection(int signal, Thread* thread);\n+private:\n+  static Thread* _protected_thread;\n+  static ThreadCrashProtection* _crash_protection;\n+  void restore();\n+  sigjmp_buf _jmpbuf;\n","filename":"src\/hotspot\/os\/posix\/os_posix.hpp","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -5000,0 +5000,3 @@\n+Thread* os::ThreadCrashProtection::_protected_thread = NULL;\n+os::ThreadCrashProtection* os::ThreadCrashProtection::_crash_protection = NULL;\n+\n@@ -5001,0 +5004,1 @@\n+  assert(Thread::current()->is_JfrSampler_thread(), \"should be JFRSampler\");\n@@ -5002,1 +5006,1 @@\n-};\n+}\n@@ -5011,1 +5015,0 @@\n-  assert(_protected_thread != NULL, \"Cannot crash protect a NULL thread\");\n@@ -5014,1 +5017,1 @@\n-    _protected_thread->set_crash_protection(this);\n+    _crash_protection = this;\n@@ -5018,1 +5021,0 @@\n-    assert(_protected_thread == Thread::current(), \"protected thread must be current thread\");\n@@ -5021,1 +5023,2 @@\n-  _protected_thread->set_crash_protection(NULL);\n+  _crash_protection = NULL;\n+  _protected_thread = NULL;\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -131,1 +131,2 @@\n- * Wrap the callback with a __try { call() }\n+ * Crash protection for the JfrSampler thread. Wrap the callback\n+ * with a __try { call() }\n@@ -138,1 +139,0 @@\n-  Thread* _protected_thread;\n@@ -140,0 +140,4 @@\n+  static bool is_crash_protected(Thread* thr) {\n+    return _crash_protection != NULL && _protected_thread == thr;\n+  }\n+\n@@ -142,0 +146,3 @@\n+private:\n+  static Thread* _protected_thread;\n+  static ThreadCrashProtection* _crash_protection;\n","filename":"src\/hotspot\/os\/windows\/os_windows.hpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -434,3 +434,1 @@\n-  if (t != NULL) {\n-    t->check_crash_protection(sig);\n-  }\n+  os::ThreadCrashProtection::check_crash_protection(sig, t);\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/os_bsd_x86.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -206,3 +206,1 @@\n-  if (t != NULL) {\n-    t->check_crash_protection(sig);\n-  }\n+  os::ThreadCrashProtection::check_crash_protection(sig, t);\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -253,3 +253,1 @@\n-  if (t != NULL) {\n-    t->check_crash_protection(sig);\n-  }\n+  os::ThreadCrashProtection::check_crash_protection(sig, t);\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/os_linux_arm.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -248,3 +248,1 @@\n-  if (t != NULL) {\n-    t->check_crash_protection(sig);\n-  }\n+  os::ThreadCrashProtection::check_crash_protection(sig, t);\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/os_linux_s390.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -245,3 +245,1 @@\n-  if (t != NULL) {\n-    t->check_crash_protection(sig);\n-  }\n+  os::ThreadCrashProtection::check_crash_protection(sig, t);\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -346,0 +346,1 @@\n+  bool is_JfrSampler_thread() const { return true; }\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,2 @@\n-  assert(!thread->has_crash_protection(), \"locking not allowed when crash protection is set\");\n+  assert(!os::ThreadCrashProtection::is_crash_protected(thread),\n+         \"locking not allowed when crash protection is set\");\n","filename":"src\/hotspot\/share\/runtime\/mutex.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -685,1 +685,1 @@\n-  assert(Thread::current_or_null() == NULL || !Thread::current()->has_crash_protection(),\n+  assert(!os::ThreadCrashProtection::is_crash_protected(Thread::current_or_null()),\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -264,1 +264,0 @@\n-  _crash_protection = NULL;\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -496,0 +496,1 @@\n+  virtual bool is_JfrSampler_thread() const          { return false; }\n@@ -740,17 +741,0 @@\n-private:\n-  os::ThreadCrashProtection *_crash_protection;\n-\n-public:\n-  bool has_crash_protection() const { return _crash_protection != NULL; }\n-  void set_crash_protection(os::ThreadCrashProtection *crash_protection) {\n-    _crash_protection = crash_protection;\n-  }\n-#ifndef _WINDOWS\n-  void check_crash_protection(int sig) const {\n-    assert(this == Thread::current(), \"should only call check_crash_protection() on self\");\n-    if (_crash_protection != NULL) {\n-      _crash_protection->check_crash_protection(sig);\n-    }\n-  }\n-#endif\n-\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"}]}