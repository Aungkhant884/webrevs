{"files":[{"patch":"@@ -3630,10 +3630,2 @@\n-  InstanceKlass* shared_lambda = nullptr;\n-  if (caller_ik->is_shared()) {\n-    shared_lambda = SystemDictionaryShared::get_shared_lambda_proxy_class(caller_ik, interface_method_name, factory_type,\n-                                                                          interface_method_type, m, dynamic_method_type);\n-  }\n-\n-  if (shared_lambda == nullptr) {\n-    SystemDictionaryShared::add_lambda_proxy_class(caller_ik, lambda_ik, interface_method_name, factory_type,\n-                                                   interface_method_type, m, dynamic_method_type, THREAD);\n-  }\n+  SystemDictionaryShared::add_lambda_proxy_class(caller_ik, lambda_ik, interface_method_name, factory_type,\n+                                                 interface_method_type, m, dynamic_method_type, THREAD);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -258,0 +258,14 @@\n+            if (CDS.isSharingEnabled()) {\n+                \/\/ load from CDS archive if present\n+                Class<?> innerClass = LambdaProxyClassArchive.find(targetClass,\n+                                                                   interfaceMethodName,\n+                                                                   factoryType,\n+                                                                   interfaceMethodType,\n+                                                                   implementation,\n+                                                                   dynamicMethodType,\n+                                                                   isSerializable,\n+                                                                   altInterfaces,\n+                                                                   altMethods);\n+                if (innerClass != null) return innerClass;\n+            }\n+\n@@ -274,11 +288,0 @@\n-            \/\/ load from CDS archive if present\n-            Class<?> innerClass = LambdaProxyClassArchive.find(targetClass,\n-                                                               interfaceMethodName,\n-                                                               factoryType,\n-                                                               interfaceMethodType,\n-                                                               implementation,\n-                                                               dynamicMethodType,\n-                                                               isSerializable,\n-                                                               altInterfaces,\n-                                                               altMethods);\n-            if (innerClass != null) return innerClass;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -104,3 +104,0 @@\n-        if (CDS.isDumpingArchive())\n-            throw new IllegalStateException(\"cannot load class from CDS archive at dump time\");\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaProxyClassArchive.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -58,0 +58,2 @@\n+    static final String usedAllStatic =\n+        \"Used all static archived lambda proxy classes for: LambdasWithSameKey\";\n@@ -88,1 +90,1 @@\n-        String[] launchArgs  = {\n+        String[] launchArgs = {\n@@ -117,1 +119,4 @@\n-            .assertNormalExit(output -> checkLambdas(output, lambdaPattern, 1));\n+            .assertNormalExit(output -> checkLambdas(output, lambdaPattern, 1))\n+            .assertNormalExit(output -> {\n+                output.shouldContain(usedAllStatic);\n+            });\n@@ -125,0 +130,1 @@\n+            .assertNormalExit(output -> { output.shouldContain(usedAllStatic); })\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/LambdasInTwoArchives.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}