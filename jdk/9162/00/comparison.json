{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import java.util.Set;\n@@ -100,2 +99,1 @@\n-    public void addLinkToPackageContent(PackageElement pkg,\n-            Set<PackageElement> printedPackageHeaders, Content content) {\n+    public void addLinkToPackageContent(String abbrevPackageName, Content content) {\n@@ -104,1 +102,1 @@\n-        if (pkg.isUnnamed()) {\n+        if (abbrevPackageName.isEmpty()) {\n@@ -108,3 +106,2 @@\n-            String parsedPackageName = utils.parsePackageName(pkg);\n-            Content packageNameContent = Text.of(parsedPackageName + \".*\");\n-            link = links.createLink(DocLink.fragment(parsedPackageName),\n+            Content packageNameContent = Text.of(abbrevPackageName + \".*\");\n+            link = links.createLink(DocLink.fragment(abbrevPackageName),\n@@ -112,2 +109,0 @@\n-            PackageElement abbrevPkg = configuration.workArounds.getAbbreviatedPackageElement(pkg);\n-            printedPackageHeaders.add(abbrevPkg);\n@@ -139,2 +134,2 @@\n-    public void addPackageName(PackageElement pkg, Content toContent, boolean first) {\n-        Content pkgNameContent;\n+    public void addPackageGroup(String abbrevPackageName, Content toContent) {\n+        Content headingContent;\n@@ -142,4 +137,1 @@\n-        if (!first) {\n-            toContent.add(summarySection);\n-        }\n-        if (pkg.isUnnamed()) {\n+        if (abbrevPackageName.isEmpty()) {\n@@ -147,1 +139,1 @@\n-            pkgNameContent = contents.defaultPackageLabel;\n+            headingContent = contents.defaultPackageLabel;\n@@ -149,3 +141,4 @@\n-            String parsedPackageName = utils.parsePackageName(pkg);\n-            anchorName = htmlIds.forPackage(pkg);\n-            pkgNameContent = getPackageLabel(parsedPackageName);\n+            anchorName = htmlIds.forPackageName(abbrevPackageName);\n+            headingContent = new ContentBuilder(\n+                    getPackageLabel(abbrevPackageName),\n+                    Text.of(\".*\"));\n@@ -153,4 +146,3 @@\n-        var headingContent = Text.of(\".*\");\n-        var heading = HtmlTree.HEADING_TITLE(Headings.ConstantsSummary.PACKAGE_HEADING,\n-                pkgNameContent);\n-        heading.add(headingContent);\n+        var heading = HtmlTree.HEADING_TITLE(\n+                Headings.ConstantsSummary.PACKAGE_HEADING,\n+                headingContent);\n@@ -159,0 +151,2 @@\n+\n+        toContent.add(summarySection);\n@@ -178,1 +172,1 @@\n-        Content classlink = (utils.isPublic(typeElement) || utils.isProtected(typeElement)) ?\n+        Content classLink = (utils.isPublic(typeElement) || utils.isProtected(typeElement)) ?\n@@ -189,1 +183,1 @@\n-        caption.add(classlink);\n+        caption.add(classLink);\n@@ -248,3 +242,0 @@\n-        if (summarySection != null) {\n-            content.add(summarySection);\n-        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ConstantsSummaryWriterImpl.java","additions":19,"deletions":28,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -137,0 +137,13 @@\n+    \/**\n+     * Returns an id for a package name.\n+     *\n+     * @param pkgName the package name\n+     *\n+     * @return the id\n+     *\/\n+    HtmlId forPackageName(String pkgName) {\n+        return pkgName.isEmpty()\n+                ? UNNAMED_PACKAGE_ANCHOR\n+                : HtmlId.of(pkgName);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlIds.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -58,4 +58,2 @@\n-     * @param pkg                    the {@link PackageElement} to index.\n-     * @param writtenPackageHeaders  the set of package headers that have already\n-     *                               been indexed, we want to index utmost once.\n-     * @param content                the content to which the link will be added\n+     * @param abbrevPackageName the abbreviated package name\n+     * @param content       the content to which the link will be added\n@@ -63,2 +61,1 @@\n-    void addLinkToPackageContent(PackageElement pkg, Set<PackageElement> writtenPackageHeaders,\n-                                 Content content);\n+    void addLinkToPackageContent(String abbrevPackageName, Content content);\n@@ -81,1 +78,1 @@\n-     * Adds the given package name.\n+     * Adds a header for the given abbreviated package name.\n@@ -83,4 +80,1 @@\n-     * @param pkg  the parsed package name.  We only Write the\n-     *                          first 2 directory levels of the package\n-     *                          name. For example, java.lang.ref would be\n-     *                          indexed as java.lang.*.\n+     * @param abbrevPackageName  the abbreviated package name\n@@ -88,2 +82,0 @@\n-     * @param first true if the first package is listed\n-     *                    be written\n@@ -91,1 +83,1 @@\n-    void addPackageName(PackageElement pkg, Content toContent, boolean first);\n+    void addPackageGroup(String abbrevPackageName, Content toContent);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/ConstantsSummaryWriter.java","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -503,16 +503,0 @@\n-    \/\/ TODO: we need to eliminate this, as it is hacky.\n-    \/**\n-     * Returns a representation of the package truncated to two levels.\n-     * For instance if the given package represents foo.bar.baz will return\n-     * a representation of foo.bar\n-     * @param pkg the PackageElement\n-     * @return an abbreviated PackageElement\n-     *\/\n-    public PackageElement getAbbreviatedPackageElement(PackageElement pkg) {\n-        String parsedPackageName = utils.parsePackageName(pkg);\n-        ModuleElement encl = (ModuleElement) pkg.getEnclosingElement();\n-        return encl == null\n-                ? utils.elementUtils.getPackageElement(parsedPackageName)\n-                : ((JavacElements) utils.elementUtils).getPackageElement(encl, parsedPackageName);\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/WorkArounds.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n-     * The maximum number of package directories shown in the constant\n-     * value index.\n+     * The maximum number of package directories shown in the headings of\n+     * the constant values contents list and headings.\n@@ -51,1 +51,1 @@\n-    public static final int MAX_CONSTANT_VALUE_INDEX_LENGTH = 2;\n+    private static final int MAX_CONSTANT_VALUE_INDEX_LENGTH = 2;\n@@ -59,1 +59,1 @@\n-     * The set of TypeElements that have constant fields.\n+     * The set of type elements that have constant fields.\n@@ -64,1 +64,1 @@\n-     * The set of printed package headers.\n+     * The set of package-group headings.\n@@ -66,1 +66,1 @@\n-    protected final Set<PackageElement> printedPackageHeaders;\n+    protected final Set<String> packageGroupHeadings;\n@@ -79,6 +79,1 @@\n-     * True if first package is listed.\n-     *\/\n-    private boolean first = true;\n-\n-    \/**\n-     * Construct a new ConstantsSummaryBuilder.\n+     * Constructs a new {@code ConstantsSummaryBuilder}.\n@@ -86,1 +81,1 @@\n-     * @param context       the build context.\n+     * @param context       the build context\n@@ -91,1 +86,1 @@\n-        this.printedPackageHeaders = new TreeSet<>(utils.comparators.makePackageComparator());\n+        this.packageGroupHeadings = new TreeSet<>(utils::compareStrings);\n@@ -95,1 +90,1 @@\n-     * Construct a ConstantsSummaryBuilder.\n+     * Constructs a {@code ConstantsSummaryBuilder}.\n@@ -97,1 +92,1 @@\n-     * @param context       the build context.\n+     * @param context       the build context\n@@ -120,1 +115,1 @@\n-     * Build the constant summary.\n+     * Builds the constant summary page.\n@@ -135,1 +130,1 @@\n-     * Build the list of packages.\n+     * Builds the list of contents for the groups of packages appearing in the constants summary page.\n@@ -139,1 +134,1 @@\n-        printedPackageHeaders.clear();\n+        packageGroupHeadings.clear();\n@@ -141,2 +136,4 @@\n-            if (hasConstantField(pkg) && !hasPrintedPackageIndex(pkg)) {\n-                writer.addLinkToPackageContent(pkg, printedPackageHeaders, contentList);\n+            String abbrevPackageName = getAbbrevPackageName(pkg);\n+            if (hasConstantField(pkg) && !packageGroupHeadings.contains(abbrevPackageName)) {\n+                writer.addLinkToPackageContent(abbrevPackageName, contentList);\n+                packageGroupHeadings.add(abbrevPackageName);\n@@ -149,1 +146,1 @@\n-     * Build the summary for each documented package.\n+     * Builds the summary for each documented package.\n@@ -154,1 +151,1 @@\n-        printedPackageHeaders.clear();\n+        packageGroupHeadings.clear();\n@@ -160,1 +157,0 @@\n-\n@@ -163,2 +159,0 @@\n-\n-                first = false;\n@@ -171,1 +165,1 @@\n-     * Build the header for the given package.\n+     * Builds the header for the given package.\n@@ -176,4 +170,4 @@\n-        PackageElement abbrevPkg = configuration.workArounds.getAbbreviatedPackageElement(currentPackage);\n-        if (!printedPackageHeaders.contains(abbrevPkg)) {\n-            writer.addPackageName(currentPackage, target, first);\n-            printedPackageHeaders.add(abbrevPkg);\n+        String abbrevPkgName = getAbbrevPackageName(currentPackage);\n+        if (!packageGroupHeadings.contains(abbrevPkgName)) {\n+            writer.addPackageGroup(abbrevPkgName, target);\n+            packageGroupHeadings.add(abbrevPkgName);\n@@ -184,1 +178,1 @@\n-     * Build the summary for the current class.\n+     * Builds the summary for the current class.\n@@ -209,1 +203,1 @@\n-     * Build the summary of constant members in the class.\n+     * Builds the summary of constant members in the class.\n@@ -211,2 +205,1 @@\n-     * @param target the content to which the constant members table\n-     *               will be added\n+     * @param target the content to which the table of constant members will be added\n@@ -219,1 +212,1 @@\n-     * Return true if the given package has constant fields to document.\n+     * {@return true if the given package has constant fields to document}\n@@ -221,2 +214,1 @@\n-     * @param pkg   the package being checked.\n-     * @return true if the given package has constant fields to document.\n+     * @param pkg   the package to be checked\n@@ -238,1 +230,1 @@\n-     * Return true if the given class has constant fields to document.\n+     * {@return true if the given class has constant fields to document}\n@@ -240,2 +232,1 @@\n-     * @param typeElement the class being checked.\n-     * @return true if the given package has constant fields to document.\n+     * @param typeElement the class to be checked\n@@ -257,2 +248,1 @@\n-     * Return true if the given package name has been printed.  Also\n-     * return true if the root of this package has been printed.\n+     * {@return the abbreviated name for a package, containing the leading segments of the name}\n@@ -260,1 +250,1 @@\n-     * @param pkg the name of the package to check.\n+     * @param pkg the package\n@@ -262,5 +252,3 @@\n-    private boolean hasPrintedPackageIndex(PackageElement pkg) {\n-        for (PackageElement printedPkg : printedPackageHeaders) {\n-            if (utils.getPackageName(pkg).startsWith(utils.parsePackageName(printedPkg))) {\n-                return true;\n-            }\n+    public String getAbbrevPackageName(PackageElement pkg) {\n+        if (pkg.isUnnamed()) {\n+            return \"\";\n@@ -268,1 +256,7 @@\n-        return false;\n+\n+        String packageName = utils.getPackageName(pkg);\n+        int index = -1;\n+        for (int j = 0; j < MAX_CONSTANT_VALUE_INDEX_LENGTH; j++) {\n+            index = packageName.indexOf(\".\", index + 1);\n+        }\n+        return index == -1 ? packageName : packageName.substring(0, index);\n@@ -272,1 +266,1 @@\n-     * Print the table of constants.\n+     * Builder for the table of fields with constant values.\n@@ -277,1 +271,1 @@\n-         * The typeElement that we are examining constants for.\n+         * The type element that we are examining constants for.\n@@ -282,2 +276,2 @@\n-         * Construct a ConstantFieldSubWriter.\n-         * @param typeElement the typeElement that we are examining constants for.\n+         * Constructs a {@code ConstantFieldBuilder}.\n+         * @param typeElement the type element that we are examining constants for\n@@ -292,2 +286,1 @@\n-         * @param target the content to which the class constants table\n-         *               will be added\n+         * @param target the content to which the table of class constants will be added\n@@ -303,2 +296,1 @@\n-         * Returns a set of visible constant fields for the given type.\n-         * @return the set of visible constant fields for the given type.\n+         * {@return a set of visible constant fields for the given type}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/ConstantsSummaryBuilder.java","additions":50,"deletions":58,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -127,1 +127,0 @@\n-import static jdk.javadoc.internal.doclets.toolkit.builders.ConstantsSummaryBuilder.MAX_CONSTANT_VALUE_INDEX_LENGTH;\n@@ -908,16 +907,0 @@\n-    \/**\n-     * Parse the package name.  We only want to display package name up to\n-     * 2 levels.\n-     *\/\n-    public String parsePackageName(PackageElement p) {\n-        String pkgname = p.isUnnamed() ? \"\" : getPackageName(p);\n-        int index = -1;\n-        for (int j = 0; j < MAX_CONSTANT_VALUE_INDEX_LENGTH; j++) {\n-            index = pkgname.indexOf(\".\", index + 1);\n-        }\n-        if (index != -1) {\n-            pkgname = pkgname.substring(0, index);\n-        }\n-        return pkgname;\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -26,4 +26,3 @@\n- * @bug 4681599\n- * @summary Test to make sure that constant values page does not get\n- * generated when doclet has nothing to document.\n- * @library ..\/..\/lib\n+ * @bug 4681599 8288058\n+ * @summary Tests for the Constant Values page.\n+ * @library \/tools\/lib ..\/..\/lib\n@@ -31,1 +30,1 @@\n- * @build javadoc.tester.*\n+ * @build toolbox.ToolBox javadoc.tester.*\n@@ -35,0 +34,2 @@\n+import java.nio.file.Path;\n+\n@@ -36,0 +37,1 @@\n+import toolbox.ToolBox;\n@@ -44,0 +46,6 @@\n+    ToolBox tb = new ToolBox();\n+\n+    \/**\n+     * Test to make sure that constant values page does not get\n+     * generated when doclet has nothing to document.\n+     *\/\n@@ -45,1 +53,1 @@\n-    public void test() {\n+    public void testNoPage() {\n@@ -53,0 +61,195 @@\n+        checkFiles(false, \"constant-values.html\");\n+    }\n+\n+    \/**\n+     * Tests the \"contents\" list for a group of named packages in the unnamed module.\n+     *\/\n+    @Test\n+    public void testIndexNamed(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p1.p2a.p3a;\n+                    public class CA {\n+                        public static final int ia = 1;\n+                        public static final String sa = \"string\";\n+                    }\n+                    \"\"\",\n+                \"\"\"\n+                    package p1.p2a.p3b;\n+                    public class CB {\n+                        public static final int ib = 1;\n+                        public static final String sb = \"string\";\n+                    }\n+                    \"\"\",\n+                \"\"\"\n+                    package p1.p2b.p3c;\n+                    public class CC {\n+                        public static final int ic = 1;\n+                        public static final String sc = \"string\";\n+                    }\n+                    \"\"\",\n+                \"\"\"\n+                    package p2;\n+                    public class CD {\n+                        public static final int id = 1;\n+                        public static final String sd = \"string\";\n+                    }\n+                    \"\"\");\n+\n+        setAutomaticCheckLinks(true); \/\/ ensure link-checking enabled for this test\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"-sourcepath\", src.toString(),\n+                \"p1.p2a.p3a\", \"p1.p2a.p3b\", \"p1.p2b.p3c\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"constant-values.html\", true,\n+                \"\"\"\n+                    <section class=\"packages\">\n+                    <h2 title=\"Contents\">Contents<\/h2>\n+                    <ul>\n+                    <li><a href=\"#p1.p2a\">p1.p2a.*<\/a><\/li>\n+                    <li><a href=\"#p1.p2b\">p1.p2b.*<\/a><\/li>\n+                    <\/ul>\n+                    <\/section>\"\"\");\n+    }\n+\n+    \/**\n+     * Tests the \"contents\" list for the unnamed package in the unnamed module.\n+     *\/\n+    @Test\n+    public void testIndexUnnamed(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    public class C {\n+                        public static final int ia = 1;\n+                        public static final String sa = \"string\";\n+                    }\n+                    \"\"\");\n+\n+        setAutomaticCheckLinks(true); \/\/ ensure link-checking enabled for this test\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"-sourcepath\", src.toString(),\n+                src.resolve(\"C.java\").toString());\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"constant-values.html\", true,\n+                \"\"\"\n+                    <section class=\"packages\">\n+                    <h2 title=\"Contents\">Contents<\/h2>\n+                    <ul>\n+                    <li><a href=\"#unnamed-package\">Unnamed Package<\/a><\/li>\n+                    <\/ul>\n+                    <\/section>\"\"\");\n+    }\n+\n+    \/**\n+     * Tests the \"contents\" list for a group of named and unnamed packages in the unnamed module.\n+     *\/\n+    @Test\n+    public void testMixed(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p1.p2a.p3a;\n+                    public class CA {\n+                        public static final int ia = 1;\n+                        public static final String sa = \"string\";\n+                    }\n+                    \"\"\",\n+                \"\"\"\n+                    public class C {\n+                        public static final int ia = 1;\n+                        public static final String sa = \"string\";\n+                    }\n+                    \"\"\");\n+\n+        setAutomaticCheckLinks(true); \/\/ ensure link-checking enabled for this test\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"-sourcepath\", src.toString(),\n+                \"p1.p2a.p3a\", src.resolve(\"C.java\").toString());\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"constant-values.html\", true,\n+                \"\"\"\n+                    <section class=\"packages\">\n+                    <h2 title=\"Contents\">Contents<\/h2>\n+                    <ul>\n+                    <li><a href=\"#unnamed-package\">Unnamed Package<\/a><\/li>\n+                    <li><a href=\"#p1.p2a\">p1.p2a.*<\/a><\/li>\n+                    <\/ul>\n+                    <\/section>\"\"\");\n+    }\n+\n+    \/**\n+     * Tests the \"contents\" list for a group of named packages in named modules.\n+     *\/\n+    @Test\n+    public void testModules(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path src_mA = src.resolve(\"mA\");\n+        tb.writeJavaFiles(src_mA,\n+                \"\"\"\n+                    module mA {\n+                        exports p.a;\n+                        exports p.q.r1;\n+                    }\n+                    \"\"\",\n+                \"\"\"\n+                    package p.a;\n+                    public class CA {\n+                        public static final int iA = 1;\n+                    }\n+                    \"\"\",\n+                \"\"\"\n+                    package p.q.r1;\n+                    public class C1 {\n+                        public static final int i1 = 1;\n+                    }\n+                    \"\"\");\n+        Path src_mB = src.resolve(\"mB\");\n+        tb.writeJavaFiles(src_mB,\n+                \"\"\"\n+                    module mB {\n+                        exports p.b;\n+                        exports p.q.r2;\n+                    }\n+                    \"\"\",\n+                \"\"\"\n+                    package p.b;\n+                    public class CB {\n+                        public static final int iB = 1;\n+                    }\n+                    \"\"\",\n+                \"\"\"\n+                    package p.q.r2;\n+                    public class C2 {\n+                        public static final int i2 = 1;\n+                    }\n+                    \"\"\");\n+\n+        setAutomaticCheckLinks(true); \/\/ ensure link-checking enabled for this test\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--module-source-path\", src.toString(),\n+                \"--module\", \"mA,mB\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"constant-values.html\", true,\n+                \"\"\"\n+                    <section class=\"packages\">\n+                    <h2 title=\"Contents\">Contents<\/h2>\n+                    <ul>\n+                    <li><a href=\"#p.a\">p.a.*<\/a><\/li>\n+                    <li><a href=\"#p.b\">p.b.*<\/a><\/li>\n+                    <li><a href=\"#p.q\">p.q.*<\/a><\/li>\n+                    <\/ul>\n+                    <\/section>\"\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testConstantValuesPage\/TestConstantValuesPage.java","additions":209,"deletions":6,"binary":false,"changes":215,"status":"modified"}]}