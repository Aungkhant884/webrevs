{"files":[{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8299255\n+ * @summary Verify no round error in Font scaling\n+ *\/\n+\n+import java.awt.Font;\n+import java.awt.Graphics2D;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.LineMetrics;\n+import java.awt.geom.AffineTransform;\n+import java.awt.image.BufferedImage;\n+\n+public class FontScalerRoundTest {\n+    public static void main(String[] args) {\n+        final double SCALE = 4096.0;\n+        final double STEP = 0.0001;\n+        final double LIMIT = STEP * 100.0;\n+\n+        BufferedImage img = new BufferedImage(100, 100,\n+                                    BufferedImage.TYPE_INT_ARGB);\n+        Graphics2D g2d = img.createGraphics();\n+        FontRenderContext frc = g2d.getFontRenderContext();\n+\n+        Font font = new Font(Font.DIALOG, Font.PLAIN, 1);\n+        float h1 = getScaledHeight(font, frc, SCALE);\n+        float h2 = getScaledHeight(font, frc, SCALE + STEP);\n+        float diff = Math.abs(h1 - h2);\n+\n+        if (diff > LIMIT) {\n+            throw new RuntimeException(\"Font metrix had round error \" +\n+                                       h1 + \",\" + h2);\n+        }\n+    }\n+\n+    private static float getScaledHeight(Font font,\n+                                         FontRenderContext frc,\n+                                         double scale) {\n+        AffineTransform at = new AffineTransform(scale, 0.0, 0.0, scale,\n+                                                 0.0, 0.0);\n+        Font transFont = font.deriveFont(at);\n+        LineMetrics m = transFont.getLineMetrics(\"0\", frc);\n+        return m.getHeight();\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/FontClass\/FontScalerRoundTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}