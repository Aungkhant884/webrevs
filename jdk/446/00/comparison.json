{"files":[{"patch":"@@ -1,136 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.lang.reflect.InvocationTargetException;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Properties;\n-\n-\/**\n- * Replaces all {@code ${<X>}} with value of corresponding property({@code X}),\n- * resulting string is handled similarly to {@code @run main} in jtreg.\n- * In other words, {@code main} of first token will be executed with the rest\n- * tokens as arguments.\n- *\n- * If one of properties can't be resolved, {@link Error} will be thrown.\n- *\/\n-public class PropertyResolvingWrapper {\n-    private static final Properties properties;\n-    static {\n-        Properties p = System.getProperties();\n-        String name = p.getProperty(\"os.name\");\n-        String arch = p.getProperty(\"os.arch\");\n-        String family;\n-        String simple_arch;\n-\n-        \/\/ copy from jtreg\/src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/OS.java\n-        if (name.startsWith(\"AIX\"))\n-            family = \"aix\";\n-        else if (name.startsWith(\"Linux\"))\n-            family = \"linux\";\n-        else if (name.startsWith(\"Mac\") || name.startsWith(\"Darwin\"))\n-            family = \"mac\";\n-        else if (name.startsWith(\"OS400\") || name.startsWith(\"OS\/400\") )\n-            family = \"os400\";\n-        else if (name.startsWith(\"Windows\"))\n-            family = \"windows\";\n-        else\n-            family = name.replaceFirst(\"^([^ ]+).*\", \"$1\"); \/\/ use first word of name\n-\n-        if (arch.contains(\"64\")\n-                 && !arch.equals(\"ia64\")\n-                 && !arch.equals(\"ppc64\")\n-                 && !arch.equals(\"ppc64le\")\n-                 && !arch.equals(\"zArch_64\")\n-                 && !arch.equals(\"aarch64\"))\n-             simple_arch = \"x64\";\n-        else if (arch.contains(\"86\"))\n-            simple_arch = \"i586\";\n-        else if (arch.equals(\"ppc\") || arch.equals(\"powerpc\"))\n-            simple_arch = \"ppc\";\n-        else if (arch.equals(\"s390x\") || arch.equals(\"zArch_64\"))\n-            simple_arch = \"s390x\";\n-        else\n-            simple_arch = arch;\n-\n-        p.setProperty(\"os.family\", family);\n-        p.setProperty(\"os.simpleArch\", simple_arch);\n-        properties = p;\n-    }\n-\n-    public static void main(String[] args) throws Throwable {\n-        List<String> command = new ArrayList<>(args.length);\n-        for (int i = 0; i < args.length; ++i) {\n-            StringBuilder arg = new StringBuilder(args[i]);\n-            while (i < args.length - 1\n-                    && (arg.chars()\n-                       .filter(c -> c == '\"')\n-                       .count() % 2) != 0) {\n-                arg.append(\" \")\n-                   .append(args[++i]);\n-            }\n-            command.add(eval(arg.toString()));\n-        }\n-        System.out.println(\"run \" + command);\n-        try {\n-            Class.forName(command.remove(0))\n-                 .getMethod(\"main\", String[].class)\n-                 .invoke(null, new Object[]{command.toArray(new String[0])});\n-        } catch (InvocationTargetException e) {\n-           Throwable t = e.getCause();\n-           t = t != null ? t : e;\n-           throw t;\n-        }\n-    }\n-\n-    private static String eval(String string) {\n-        int index;\n-        int current = 0;\n-        StringBuilder result = new StringBuilder();\n-        while (current < string.length() && (index = string.indexOf(\"${\", current)) >= 0) {\n-            result.append(string.substring(current, index));\n-            int endName = string.indexOf('}', index);\n-            current = endName + 1;\n-            String name = string.substring(index + 2, endName);\n-            String value = properties.getProperty(name);\n-            if (value == null) {\n-                throw new Error(\"can't find property \" + name);\n-            }\n-            result.append(value);\n-        }\n-        if (current < string.length()) {\n-            result.append(string.substring(current));\n-        }\n-        int length = result.length();\n-\n-        if (length > 1 && result.charAt(0) == '\"' && result.charAt(length - 1) == '\"') {\n-            result.deleteCharAt(length - 1);\n-            result.deleteCharAt(0);\n-        }\n-        return result.toString();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/PropertyResolvingWrapper.java","additions":0,"deletions":136,"binary":false,"changes":136,"status":"deleted"}]}