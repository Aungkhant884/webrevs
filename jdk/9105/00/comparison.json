{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Microsoft Corporation. All rights reserved.\n+ * Copyright (c) 2020, 2022, Microsoft Corporation. All rights reserved.\n@@ -31,9 +31,0 @@\n-#if _MSC_VER < 1700\n-\n-\/* Not needed for VS2012 compiler, comes from winnt.h. *\/\n-#define UNW_FLAG_EHANDLER  0x01\n-#define UNW_FLAG_UHANDLER  0x02\n-#define UNW_FLAG_CHAININFO 0x04\n-\n-#endif\n-\n@@ -73,29 +64,0 @@\n-#if _MSC_VER < 1700\n-\n-\/* Not needed for VS2012 compiler, comes from winnt.h. *\/\n-typedef struct _DISPATCHER_CONTEXT {\n-    ULONG64 ControlPc;\n-    ULONG64 ImageBase;\n-    PRUNTIME_FUNCTION FunctionEntry;\n-    ULONG64 EstablisherFrame;\n-    ULONG64 TargetIp;\n-    PCONTEXT ContextRecord;\n-\/\/    PEXCEPTION_ROUTINE LanguageHandler;\n-    char * LanguageHandler; \/\/ double dependency problem\n-    PVOID HandlerData;\n-} DISPATCHER_CONTEXT, *PDISPATCHER_CONTEXT;\n-\n-#endif\n-\n-#if _MSC_VER < 1500\n-\n-\/* Not needed for VS2008 compiler, comes from winnt.h. *\/\n-typedef EXCEPTION_DISPOSITION (*PEXCEPTION_ROUTINE) (\n-    IN PEXCEPTION_RECORD ExceptionRecord,\n-    IN ULONG64 EstablisherFrame,\n-    IN OUT PCONTEXT ContextRecord,\n-    IN OUT PDISPATCHER_CONTEXT DispatcherContext\n-);\n-\n-#endif\n-\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/unwind_windows_aarch64.hpp","additions":1,"deletions":39,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,9 +32,0 @@\n-#if _MSC_VER < 1700\n-\n-\/* Not needed for VS2012 compiler, comes from winnt.h. *\/\n-#define UNW_FLAG_EHANDLER  0x01\n-#define UNW_FLAG_UHANDLER  0x02\n-#define UNW_FLAG_CHAININFO 0x04\n-\n-#endif\n-\n@@ -58,1 +49,0 @@\n-\n@@ -67,29 +57,0 @@\n-#if _MSC_VER < 1700\n-\n-\/* Not needed for VS2012 compiler, comes from winnt.h. *\/\n-typedef struct _DISPATCHER_CONTEXT {\n-    ULONG64 ControlPc;\n-    ULONG64 ImageBase;\n-    PRUNTIME_FUNCTION FunctionEntry;\n-    ULONG64 EstablisherFrame;\n-    ULONG64 TargetIp;\n-    PCONTEXT ContextRecord;\n-\/\/    PEXCEPTION_ROUTINE LanguageHandler;\n-    char * LanguageHandler; \/\/ double dependency problem\n-    PVOID HandlerData;\n-} DISPATCHER_CONTEXT, *PDISPATCHER_CONTEXT;\n-\n-#endif\n-\n-#if _MSC_VER < 1500\n-\n-\/* Not needed for VS2008 compiler, comes from winnt.h. *\/\n-typedef EXCEPTION_DISPOSITION (*PEXCEPTION_ROUTINE) (\n-    IN PEXCEPTION_RECORD ExceptionRecord,\n-    IN ULONG64 EstablisherFrame,\n-    IN OUT PCONTEXT ContextRecord,\n-    IN OUT PDISPATCHER_CONTEXT DispatcherContext\n-);\n-\n-#endif\n-\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/unwind_windows_x86.hpp","additions":1,"deletions":40,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,0 @@\n-#if _MSC_VER >= 1300\n@@ -47,1 +46,0 @@\n-#endif\n@@ -49,1 +47,0 @@\n-#if _MSC_VER >= 1400\n@@ -51,1 +48,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/adlc\/adlc.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -492,1 +492,1 @@\n-#if !defined(_WIN32) || defined(_WIN64) || _MSC_VER < 1400\n+#if !defined(_WIN32) || defined(_WIN64)\n","filename":"src\/hotspot\/share\/adlc\/main.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,10 +32,0 @@\n-\n-#if defined(WIN32) && (defined(_MSC_VER) && (_MSC_VER < 1600))\n-\/\/ Windows AMD64 Compiler Hangs compiling this file\n-\/\/ unless optimization is off\n-#ifdef _M_AMD64\n-#pragma optimize (\"\", off)\n-#endif\n-#endif\n-\n-\n","filename":"src\/hotspot\/share\/interpreter\/bytecodes.cpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,40 +37,0 @@\n-#ifdef _MSC_VER\n-#if _MSC_VER > 1400 && _MSC_VER < 1600\n-\n-\/*\n- * When building for Microsoft Windows, main has a dependency on msvcr??.dll.\n- *\n- * When using Visual Studio 2005 or 2008, that must be recorded in\n- * the [java,javaw].exe.manifest file.\n- *\n- * As of VS2010 (ver=1600), the runtimes again no longer need manifests.\n- *\n- * Reference:\n- *     C:\/Program Files\/Microsoft SDKs\/Windows\/v6.1\/include\/crtdefs.h\n- *\/\n-#include <crtassem.h>\n-#ifdef _M_IX86\n-\n-#pragma comment(linker,\"\/manifestdependency:\\\"type='win32' \"            \\\n-        \"name='\" __LIBRARIES_ASSEMBLY_NAME_PREFIX \".CRT' \"              \\\n-        \"version='\" _CRT_ASSEMBLY_VERSION \"' \"                          \\\n-        \"processorArchitecture='x86' \"                                  \\\n-        \"publicKeyToken='\" _VC_ASSEMBLY_PUBLICKEYTOKEN \"'\\\"\")\n-\n-#endif \/* _M_IX86 *\/\n-\n-\/\/This may not be necessary yet for the Windows 64-bit build, but it\n-\/\/will be when that build environment is updated.  Need to test to see\n-\/\/if it is harmless:\n-#ifdef _M_AMD64\n-\n-#pragma comment(linker,\"\/manifestdependency:\\\"type='win32' \"            \\\n-        \"name='\" __LIBRARIES_ASSEMBLY_NAME_PREFIX \".CRT' \"              \\\n-        \"version='\" _CRT_ASSEMBLY_VERSION \"' \"                          \\\n-        \"processorArchitecture='amd64' \"                                \\\n-        \"publicKeyToken='\" _VC_ASSEMBLY_PUBLICKEYTOKEN \"'\\\"\")\n-\n-#endif  \/* _M_AMD64 *\/\n-#endif  \/* _MSC_VER > 1400 && _MSC_VER < 1600 *\/\n-#endif  \/* _MSC_VER *\/\n-\n","filename":"src\/java.base\/share\/native\/launcher\/main.c","additions":1,"deletions":41,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-#if defined(_MSC_VER) && _MSC_VER >= 1800\n+#if defined(_MSC_VER)\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/ThemeReader.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-#if defined(_MSC_VER) && _MSC_VER >= 1800\n+#if defined(_MSC_VER)\n@@ -289,1 +289,1 @@\n-#if defined(_MSC_VER) && (_MSC_VER >= 1600)\n+#if defined(_MSC_VER)\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_DesktopProperties.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-#if defined(_MSC_VER) && _MSC_VER >= 1800\n+#if defined(_MSC_VER)\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Window.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}