{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -900,19 +900,0 @@\n-    \/**\n-     * Trim whitespace off end of string\n-     *\n-     * @param s\n-     * @return\n-     *\/\n-    static String trimEnd(String s) {\n-        int last = s.length() - 1;\n-        int i = last;\n-        while (i >= 0 && Character.isWhitespace(s.charAt(i))) {\n-            --i;\n-        }\n-        if (i != last) {\n-            return s.substring(0, i + 1);\n-        } else {\n-            return s;\n-        }\n-    }\n-\n@@ -1237,1 +1218,1 @@\n-            \/\/ It is a snipet. Separate the source from the remaining. Evaluate\n+            \/\/ It is a snippet. Separate the source from the remaining. Evaluate\n@@ -1240,1 +1221,1 @@\n-            if (processSourceCatchingReset(trimEnd(an.source()))) {\n+            if (processSourceCatchingReset(an.source().stripTrailing())) {\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/JShellTool.java","additions":3,"deletions":22,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-        String compileSource = Util.trimEnd(new MaskCommentsAndModifiers(userSource, false).cleared());\n+        String compileSource = new MaskCommentsAndModifiers(userSource, false).cleared().stripTrailing();\n@@ -443,1 +443,1 @@\n-     *   enclosing context, make them an explicit paramters of the constructor\n+     *   enclosing context, make them an explicit parameters of the constructor\n@@ -853,1 +853,1 @@\n-        String compileSource = Util.trimEnd(new MaskCommentsAndModifiers(userSource, true).cleared());\n+        String compileSource = new MaskCommentsAndModifiers(userSource, true).cleared().stripTrailing();\n@@ -1145,1 +1145,1 @@\n-                \/\/ are new) have been redefined, and no new dependnencies were\n+                \/\/ are new) have been redefined, and no new dependencies were\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/Eval.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -176,1 +176,1 @@\n-        String trimmedInput = Util.trimEnd(cleared);\n+        String trimmedInput = cleared.stripTrailing();\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/SourceCodeAnalysisImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,14 +120,0 @@\n-\n-    static String trimEnd(String s) {\n-        int last = s.length() - 1;\n-        int i = last;\n-        while (i >= 0 && Character.isWhitespace(s.charAt(i))) {\n-            --i;\n-        }\n-        if (i != last) {\n-            return s.substring(0, i + 1);\n-        } else {\n-            return s;\n-        }\n-    }\n-\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/Util.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"}]}