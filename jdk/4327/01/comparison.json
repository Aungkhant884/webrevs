{"files":[{"patch":"@@ -266,0 +266,15 @@\n+  \/\/ There are functions that all subtypes of MetaspaceObj are expected\n+  \/\/ to implement, so that templates which are defined for this class hierarchy\n+  \/\/ can work uniformly. Within the sub-hierarchy of Metadata, these are virtuals.\n+  \/\/ Elsewhere in the hierarchy of MetaspaceObj, type(), size(), and\/or on_stack()\n+  \/\/ can be static if constant.\n+  \/\/\n+  \/\/ The following functions are required by MetaspaceClosure:\n+  \/\/   void metaspace_pointers_do(MetaspaceClosure* it) { <walk my refs> }\n+  \/\/   int size() const { return align_up(sizeof(<This>), wordSize) \/ wordSize; }\n+  \/\/   MetaspaceObj::Type type() const { return <This>Type; }\n+  \/\/\n+  \/\/ The following functions are required by MetadataFactory::free_metadata():\n+  \/\/   bool on_stack() { return false; }\n+  \/\/   void deallocate_contents(ClassLoaderData* loader_data);\n+\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}