{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.util.stream.ParallelStreamable;\n@@ -31,0 +32,1 @@\n+import java.util.stream.Streamable;\n@@ -253,1 +255,1 @@\n-public interface Collection<E> extends Iterable<E> {\n+public interface Collection<E> extends Iterable<E>, Streamable<E>, ParallelStreamable<E> {\n@@ -742,0 +744,1 @@\n+    @Override\n@@ -748,1 +751,1 @@\n-     * source.  It is allowable for this method to return a sequential stream.\n+     * source. It is allowable for this method to return a sequential stream.\n@@ -763,0 +766,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collection.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.stream.Streamable;\n@@ -62,1 +63,1 @@\n-public final class Optional<T> {\n+public final class Optional<T> implements Streamable<T> {\n@@ -333,0 +334,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/util\/Optional.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.util.stream;\n+\n+\/**\n+ * Implementing this interface allows an object to be streamed, possibly in\n+ * parallel, using the Stream API.\n+ *\n+ * @param <T> the type of element(s) returned by the stream\n+ *\n+ * @author  Rik Schaaf\n+ * @see     Collection\n+ * @since 18\n+ *\/\n+public interface ParallelStreamable<T> {\n+\n+    \/**\n+     * Returns a possibly parallel {@code Stream} with this object as its\n+     * source. It is allowable for this method to return a sequential stream.\n+     *\n+     * @return a possibly parallel {@code Stream} over the element(s) in this\n+     * object\n+     * @since 18\n+     *\/\n+    Stream<T> parallelStream();\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/ParallelStreamable.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.util.stream;\n+\n+\/**\n+ * Implementing this interface allows an object to be sequentially streamed\n+ * using the Stream API.\n+ *\n+ * @param <T> the type of element(s) returned by the stream\n+ *\n+ * @author  Rik Schaaf\n+ * @see     Collection\n+ * @see     Optional\n+ * @since 18\n+ *\/\n+public interface Streamable<T> {\n+\n+    \/**\n+     * Returns a sequential {@code Stream} with this object as its source.\n+     *\n+     * @return a sequential {@code Stream} over the element(s) in this object\n+     * @since 18\n+     *\/\n+    Stream<T> stream();\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/Streamable.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"}]}