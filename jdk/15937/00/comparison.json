{"files":[{"patch":"@@ -29,0 +29,1 @@\n+#include \"classfile\/systemDictionary.hpp\"\n@@ -320,0 +321,6 @@\n+template <typename T>\n+void update_buffered_object_field(address buffered_obj, int field_offset, T value) {\n+  T* field_addr = cast_to_oop(buffered_obj)->field_addr<T>(field_offset);\n+  *field_addr = value;\n+}\n+\n@@ -345,0 +352,14 @@\n+  \/\/ These native pointers will be restored explicitly at run time.\n+  if (java_lang_Module::is_instance(src_obj)) {\n+    update_buffered_object_field<ModuleEntry*>(to, java_lang_Module::module_entry_offset(), nullptr);\n+  } else if (java_lang_ClassLoader::is_instance(src_obj)) {\n+#ifdef ASSERT\n+    \/\/ We only archive these loaders\n+    if (src_obj != SystemDictionary::java_platform_loader() &&\n+        src_obj != SystemDictionary::java_system_loader()) {\n+      assert(src_obj->klass()->name()->equals(\"jdk\/internal\/loader\/ClassLoaders$BootClassLoader\"), \"must be\");\n+    }\n+#endif\n+    update_buffered_object_field<ClassLoaderData*>(to, java_lang_ClassLoader::loader_data_offset(), nullptr);\n+  }\n+\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -138,2 +138,0 @@\n-ClassLoaderData* HeapShared::_saved_java_platform_loader_data = nullptr;\n-ClassLoaderData* HeapShared::_saved_java_system_loader_data = nullptr;\n@@ -298,16 +296,2 @@\n-    if (java_lang_Module::is_instance(obj)) {\n-      if (Modules::check_module_oop(obj)) {\n-        Modules::update_oops_in_archived_module(obj, append_root(obj));\n-      }\n-      java_lang_Module::set_module_entry(obj, nullptr);\n-    } else if (java_lang_ClassLoader::is_instance(obj)) {\n-      \/\/ class_data will be restored explicitly at run time and after dumptime\n-      guarantee(obj == SystemDictionary::java_platform_loader() ||\n-                obj == SystemDictionary::java_system_loader() ||\n-                java_lang_ClassLoader::loader_data(obj) == nullptr, \"must be\");\n-      if (obj == SystemDictionary::java_platform_loader()) {\n-        _saved_java_platform_loader_data = java_lang_ClassLoader::loader_data_acquire(SystemDictionary::java_platform_loader());\n-      } else if (obj == SystemDictionary::java_system_loader()) {\n-        _saved_java_system_loader_data = java_lang_ClassLoader::loader_data_acquire(SystemDictionary::java_system_loader());\n-      }\n-      java_lang_ClassLoader::release_set_loader_data(obj, nullptr);\n+    if (java_lang_Module::is_instance(obj) && Modules::check_archived_module_oop(obj)) {\n+      Modules::update_oops_in_archived_module(obj, append_root(obj));\n@@ -320,6 +304,0 @@\n-void HeapShared::restore_loader_data() {\n-  log_info(cds)(\"Restoring java platform and system loaders\");\n-  java_lang_ClassLoader::release_set_loader_data(SystemDictionary::java_platform_loader(), _saved_java_platform_loader_data);\n-  java_lang_ClassLoader::release_set_loader_data(SystemDictionary::java_system_loader(), _saved_java_system_loader_data);\n-}\n-\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":2,"deletions":24,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -286,3 +286,0 @@\n-  static ClassLoaderData* _saved_java_platform_loader_data;\n-  static ClassLoaderData* _saved_java_system_loader_data;\n-\n@@ -404,1 +401,0 @@\n-  static void restore_loader_data() NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -666,7 +666,0 @@\n-\n-#if INCLUDE_CDS_JAVA_HEAP\n-  \/\/ Restore the java loaders that were cleared at dump time\n-  if (use_full_module_graph()) {\n-    HeapShared::restore_loader_data();\n-  }\n-#endif\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -855,0 +855,3 @@\n+    \/\/ CDS\n+    static int module_entry_offset() { return _module_entry_offset; }\n+\n@@ -1468,0 +1471,1 @@\n+  \/\/ Support for CDS\n@@ -1469,0 +1473,1 @@\n+  static int loader_data_offset() { return  _loader_data_offset; }\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -486,1 +486,1 @@\n-bool Modules::check_module_oop(oop orig_module_obj) {\n+bool Modules::check_archived_module_oop(oop orig_module_obj) {\n@@ -547,1 +547,1 @@\n-  assert(check_module_oop(orig_module_obj) == true, \"sanity\");\n+  assert(check_archived_module_oop(orig_module_obj) == true, \"sanity\");\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-  static bool check_module_oop(oop orig_module_obj) NOT_CDS_JAVA_HEAP_RETURN_(false);\n+  static bool check_archived_module_oop(oop orig_module_obj) NOT_CDS_JAVA_HEAP_RETURN_(false);\n","filename":"src\/hotspot\/share\/classfile\/modules.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}