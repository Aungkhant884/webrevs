{"files":[{"patch":"@@ -30,0 +30,9 @@\n+import jdk.internal.classfile.constantpool.ConstantValueEntry;\n+import jdk.internal.classfile.constantpool.DoubleEntry;\n+import jdk.internal.classfile.constantpool.FieldRefEntry;\n+import jdk.internal.classfile.constantpool.FloatEntry;\n+import jdk.internal.classfile.constantpool.IntegerEntry;\n+import jdk.internal.classfile.constantpool.InterfaceMethodRefEntry;\n+import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n+import jdk.internal.classfile.constantpool.LongEntry;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n@@ -166,0 +175,90 @@\n+    \/**\n+     * {@return the constant value entry whose index is given at the specified\n+     * offset within the classfile}\n+     * @param offset the offset of the index within the classfile\n+     * @throws ConstantPoolException if the index is out of range of the\n+     *         constant pool size, or zero, or the index does not correspond to\n+     *         a constant value entry\n+     *\/\n+    ConstantValueEntry readConstantValueEntry(int offset);\n+\n+    \/**\n+     * {@return the integer entry whose index is given at the specified\n+     * offset within the classfile}\n+     * @param offset the offset of the index within the classfile\n+     * @throws ConstantPoolException if the index is out of range of the\n+     *         constant pool size, or zero, or the index does not correspond to\n+     *         an integer entry\n+     *\/\n+    IntegerEntry readIntegerEntry(int offset);\n+\n+    \/**\n+     * {@return the double entry whose index is given at the specified\n+     * offset within the classfile}\n+     * @param offset the offset of the index within the classfile\n+     * @throws ConstantPoolException if the index is out of range of the\n+     *         constant pool size, or zero, or the index does not correspond to\n+     *         a double entry\n+     *\/\n+    DoubleEntry readDoubleEntry(int offset);\n+\n+    \/**\n+     * {@return the long entry whose index is given at the specified\n+     * offset within the classfile}\n+     * @param offset the offset of the index within the classfile\n+     * @throws ConstantPoolException if the index is out of range of the\n+     *         constant pool size, or zero, or the index does not correspond to\n+     *         a long entry\n+     *\/\n+    LongEntry readLongEntry(int offset);\n+\n+    \/**\n+     * {@return the float entry whose index is given at the specified\n+     * offset within the classfile}\n+     * @param offset the offset of the index within the classfile\n+     * @throws ConstantPoolException if the index is out of range of the\n+     *         constant pool size, or zero, or the index does not correspond to\n+     *         a float entry\n+     *\/\n+    FloatEntry readFloatEntry(int offset);\n+\n+    \/**\n+     * {@return the field ref entry whose index is given at the specified\n+     * offset within the classfile}\n+     * @param offset the offset of the index within the classfile\n+     * @throws ConstantPoolException if the index is out of range of the\n+     *         constant pool size, or zero, or the index does not correspond to\n+     *         a field ref entry\n+     *\/\n+    FieldRefEntry readFieldRefEntry(int offset);\n+\n+    \/**\n+     * {@return the member ref entry whose index is given at the specified\n+     * offset within the classfile}\n+     * @param offset the offset of the index within the classfile\n+     * @throws ConstantPoolException if the index is out of range of the\n+     *         constant pool size, or zero, or the index does not correspond to\n+     *         a member ref entry\n+     *\/\n+    MemberRefEntry readMemberRefEntry(int offset);\n+\n+    \/**\n+     * {@return the interface method ref entry whose index is given at the specified\n+     * offset within the classfile}\n+     * @param offset the offset of the index within the classfile\n+     * @throws ConstantPoolException if the index is out of range of the\n+     *         constant pool size, or zero, or the index does not correspond to\n+     *         an interface method ref entry\n+     *\/\n+    InterfaceMethodRefEntry readInterfaceMethodRefEntry(int offset);\n+\n+    \/**\n+     * {@return the invoke dynamic entry whose index is given at the specified\n+     * offset within the classfile}\n+     * @param offset the offset of the index within the classfile\n+     * @throws ConstantPoolException if the index is out of range of the\n+     *         constant pool size, or zero, or the index does not correspond to\n+     *         an invoke dynamic entry\n+     *\/\n+    InvokeDynamicEntry readInvokeDynamicEntry(int offset);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassReader.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -386,1 +386,1 @@\n-                fieldEntry = (FieldRefEntry) code.classReader.readEntry(pos + 1);\n+                fieldEntry = code.classReader.readFieldRefEntry(pos + 1);\n@@ -416,1 +416,1 @@\n-                methodEntry = (MemberRefEntry) code.classReader.readEntry(pos + 1);\n+                methodEntry = code.classReader.readMemberRefEntry(pos + 1);\n@@ -456,1 +456,1 @@\n-                methodEntry = (InterfaceMethodRefEntry) code.classReader.readEntry(pos + 1);\n+                methodEntry = code.classReader.readInterfaceMethodRefEntry(pos + 1);\n@@ -496,1 +496,1 @@\n-                indyEntry = (InvokeDynamicEntry) code.classReader.readEntry(pos + 1);\n+                indyEntry = code.classReader.readInvokeDynamicEntry(pos + 1);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractInstruction.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -61,8 +61,8 @@\n-            case AEV_BYTE -> new AnnotationImpl.OfByteImpl((IntegerEntry)classReader.readEntry(p));\n-            case AEV_CHAR -> new AnnotationImpl.OfCharacterImpl((IntegerEntry)classReader.readEntry(p));\n-            case AEV_DOUBLE -> new AnnotationImpl.OfDoubleImpl((DoubleEntry)classReader.readEntry(p));\n-            case AEV_FLOAT -> new AnnotationImpl.OfFloatImpl((FloatEntry)classReader.readEntry(p));\n-            case AEV_INT -> new AnnotationImpl.OfIntegerImpl((IntegerEntry)classReader.readEntry(p));\n-            case AEV_LONG -> new AnnotationImpl.OfLongImpl((LongEntry)classReader.readEntry(p));\n-            case AEV_SHORT -> new AnnotationImpl.OfShortImpl((IntegerEntry)classReader.readEntry(p));\n-            case AEV_BOOLEAN -> new AnnotationImpl.OfBooleanImpl((IntegerEntry)classReader.readEntry(p));\n+            case AEV_BYTE -> new AnnotationImpl.OfByteImpl(classReader.readIntegerEntry(p));\n+            case AEV_CHAR -> new AnnotationImpl.OfCharacterImpl(classReader.readIntegerEntry(p));\n+            case AEV_DOUBLE -> new AnnotationImpl.OfDoubleImpl(classReader.readDoubleEntry(p));\n+            case AEV_FLOAT -> new AnnotationImpl.OfFloatImpl(classReader.readFloatEntry(p));\n+            case AEV_INT -> new AnnotationImpl.OfIntegerImpl(classReader.readIntegerEntry(p));\n+            case AEV_LONG -> new AnnotationImpl.OfLongImpl(classReader.readLongEntry(p));\n+            case AEV_SHORT -> new AnnotationImpl.OfShortImpl(classReader.readIntegerEntry(p));\n+            case AEV_BOOLEAN -> new AnnotationImpl.OfBooleanImpl(classReader.readIntegerEntry(p));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationReader.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -505,1 +505,1 @@\n-            return (ConstantValueEntry) classReader.readEntry(payloadStart);\n+            return classReader.readConstantValueEntry(payloadStart);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundAttribute.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Collection;\n@@ -39,0 +38,7 @@\n+import jdk.internal.classfile.constantpool.ConstantValueEntry;\n+import jdk.internal.classfile.constantpool.DoubleEntry;\n+import jdk.internal.classfile.constantpool.FieldRefEntry;\n+import jdk.internal.classfile.constantpool.FloatEntry;\n+import jdk.internal.classfile.constantpool.IntegerEntry;\n+import jdk.internal.classfile.constantpool.InterfaceMethodRefEntry;\n+import jdk.internal.classfile.constantpool.InvokeDynamicEntry;\n@@ -40,0 +46,2 @@\n+import jdk.internal.classfile.constantpool.LongEntry;\n+import jdk.internal.classfile.constantpool.MemberRefEntry;\n@@ -446,0 +454,54 @@\n+    @Override\n+    public ConstantValueEntry readConstantValueEntry(int pos) {\n+        if (readEntry(pos) instanceof ConstantValueEntry e) return e;\n+        throw new ConstantPoolException(\"Not a constant value entry at pos: \" + pos);\n+    }\n+\n+    @Override\n+    public IntegerEntry readIntegerEntry(int pos) {\n+        if (readEntry(pos) instanceof IntegerEntry e) return e;\n+        throw new ConstantPoolException(\"Not an integer entry at pos: \" + pos);\n+    }\n+\n+    @Override\n+    public DoubleEntry readDoubleEntry(int pos) {\n+        if (readEntry(pos) instanceof DoubleEntry e) return e;\n+        throw new ConstantPoolException(\"Not a double entry at pos: \" + pos);\n+    }\n+\n+    @Override\n+    public LongEntry readLongEntry(int pos) {\n+        if (readEntry(pos) instanceof LongEntry e) return e;\n+        throw new ConstantPoolException(\"Not a long entry at pos: \" + pos);\n+    }\n+\n+    @Override\n+    public FloatEntry readFloatEntry(int pos) {\n+        if (readEntry(pos) instanceof FloatEntry e) return e;\n+        throw new ConstantPoolException(\"Not a float entry at pos: \" + pos);\n+    }\n+\n+    @Override\n+    public FieldRefEntry readFieldRefEntry(int pos) {\n+        if (readEntry(pos) instanceof FieldRefEntry e) return e;\n+        throw new ConstantPoolException(\"Not a field ref entry at pos: \" + pos);\n+    }\n+\n+    @Override\n+    public MemberRefEntry readMemberRefEntry(int pos) {\n+        if (readEntry(pos) instanceof MemberRefEntry e) return e;\n+        throw new ConstantPoolException(\"Not a member ref entry at pos: \" + pos);\n+    }\n+\n+    @Override\n+    public InterfaceMethodRefEntry readInterfaceMethodRefEntry(int pos) {\n+        if (readEntry(pos) instanceof InterfaceMethodRefEntry e) return e;\n+        throw new ConstantPoolException(\"Not an interface method ref entry at pos: \" + pos);\n+    }\n+\n+    @Override\n+    public InvokeDynamicEntry readInvokeDynamicEntry(int pos) {\n+        if (readEntry(pos) instanceof InvokeDynamicEntry e) return e;\n+        throw new ConstantPoolException(\"Not an invoke dynamic entry at pos: \" + pos);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":63,"deletions":1,"binary":false,"changes":64,"status":"modified"}]}