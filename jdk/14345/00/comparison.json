{"files":[{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8306112\n+ * @enablePreview\n+ * @build Unnamed TestUnnamedClass\n+ * @run main TestUnnamedClass\n+ * @summary Basic checks of java.lang.Class support for unnamed classes\n+ *\/\n+\n+import java.lang.reflect.Modifier;\n+\n+public class TestUnnamedClass {\n+    public static void main(String... args) throws Exception {\n+        Class<?> unnamedClass = Class.forName(\"Unnamed\");\n+\n+        \/*\n+         * From JEP 445 JLS changes:\n+         *\n+         * \"An unnamed class compilation unit implicitly declares a class that satisfies the following\n+         * properties:\n+         * It is always a top level class.\n+         * It is always an unnamed class (it has no canonical or fully qualified name (6.7)).\n+         * It is never abstract (8.1.1.1).\n+         * It is always final (8.1.1.2).\n+         * It is always a member of an unnamed package (7.4.2) and has package access.\n+         * Its direct superclass type is always Object (8.1.4).\n+         * It never has any direct superinterface types (8.1.5).\n+         *\/\n+\n+        check(unnamedClass.isUnnamedClass(), \"Unnamed class was isUnnamedClass() false\");\n+\n+        check(!(unnamedClass.isInterface() ||\n+                unnamedClass.isEnum()      ||\n+                unnamedClass.isRecord()    ||\n+                unnamedClass.isHidden()),\n+              \"Unnamed class was not a normal class\");\n+\n+        check(!(unnamedClass.isLocalClass()  ||\n+                unnamedClass.isMemberClass() ||\n+                unnamedClass.isPrimitive()   ||\n+                unnamedClass.isArray()),\n+              \"Unnamed class was not top-level\");\n+\n+        check(\"Unnamed\".equals(unnamedClass.getName()),     \"Unexpected Class.getName result\");\n+        check(\"Unnamed\".equals(unnamedClass.getTypeName()), \"Unexpected Class.getTypeName result\");\n+        check(\"\".equals(unnamedClass.getSimpleName()),      \"Unexpected Class.getSimpleName result\");\n+        check(unnamedClass.getCanonicalName() == null,      \"Unexpected non-null Class.getCanonicalName\");\n+\n+        int modifiers = unnamedClass.getModifiers();\n+        check((modifiers & Modifier.ABSTRACT) == 0,    \"Unnamed class was abstract\");\n+        check((modifiers & Modifier.FINAL) != 0,       \"Unnamed class was not final\");\n+        check((modifiers & (Modifier.PUBLIC  |\n+                            Modifier.PRIVATE |\n+                            Modifier.PROTECTED)) == 0, \"Unnamed class was not package access\");\n+\n+        check(unnamedClass.isSynthetic(), \"Unnamed class was not synthetic\");\n+\n+        check(\"\".equals(unnamedClass.getPackage().getName()), \"Unnamed class not in an unnamed package\");\n+\n+        check(unnamedClass.getSuperclass() == Object.class, \"Superclass was not java.lang.Object\");\n+\n+        check(unnamedClass.getInterfaces().length == 0, \"Unnamed class had super interfaces\");\n+    }\n+\n+    private static void check(boolean predicate, String message) {\n+        if (!predicate) {\n+            throw new RuntimeException(message);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/Class\/UnnamedClass\/TestUnnamedClass.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -24,4 +24,6 @@\n-public class TestUnnamedVariableElementData {\n-    private void test() {\n-        int _ = 0;\n-    }\n+\n+\/**\n+ * Exemplar unnamed class.\n+ *\/\n+public void main() {\n+    System.out.println(\"Hello, world.\");\n","filename":"test\/jdk\/java\/lang\/Class\/UnnamedClass\/Unnamed.java","additions":6,"deletions":4,"binary":false,"changes":10,"previous_filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestUnnamedVariableElementData.java","status":"copied"}]}