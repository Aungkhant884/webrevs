{"files":[{"patch":"@@ -177,0 +177,1 @@\n+        boolean internal;\n@@ -200,0 +201,1 @@\n+            pos.writeBoolean(internal);\n@@ -490,0 +492,1 @@\n+                currentType.internal = getBoolean(attributes, \"internal\", false);\n@@ -866,0 +869,3 @@\n+        if (type.isEvent && type.internal) {\n+            out.write(\"    JfrEventSetting::unhide_internal_types();\");\n+        }\n","filename":"make\/src\/classes\/build\/tools\/jfr\/GenerateJfrFiles.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,0 +48,2 @@\n+static Symbol* unhide_internal_types_sym = NULL;\n+static Symbol* unhide_internal_types_sig_sym = NULL;\n@@ -58,1 +60,3 @@\n-    initialized = bytes_for_eager_instrumentation_sig_sym != NULL;\n+    unhide_internal_types_sym = SymbolTable::new_permanent_symbol(\"unhideInternalTypes\");\n+    unhide_internal_types_sig_sym = SymbolTable::new_permanent_symbol(\"()V\");\n+    initialized = unhide_internal_types_sig_sym != NULL;\n@@ -85,1 +89,2 @@\n-    log_error(jfr, system)(\"JfrUpcall failed\");\n+    ResourceMark rm(THREAD);\n+    log_error(jfr, system)(\"JfrUpcall failed for %s\", method_sym->as_C_string());\n@@ -182,0 +187,16 @@\n+\n+bool JfrUpcalls::unhide_internal_types(TRAPS) {\n+  DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_vm(THREAD));\n+  JavaValue result(T_VOID);\n+  const Klass* klass = SystemDictionary::resolve_or_fail(jvm_upcalls_class_sym, true, CHECK_false);\n+  assert(klass != NULL, \"invariant\");\n+  JfrJavaArguments args(&result, klass, unhide_internal_types_sym, unhide_internal_types_sig_sym);\n+  JfrJavaSupport::call_static(&args, THREAD);\n+  if (HAS_PENDING_EXCEPTION) {\n+    CLEAR_PENDING_EXCEPTION;\n+    ResourceMark rm(THREAD);\n+    log_error(jfr, system)(\"JfrUpcall failed for %s\", unhide_internal_types_sym->as_C_string());\n+    return false;\n+  }\n+  return true;\n+}\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrUpcalls.cpp","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -56,0 +56,2 @@\n+\n+  static bool unhide_internal_types(TRAPS);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrUpcalls.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,49 @@\n+  <!-- Internal events are only to be used during development, i.e. temporary time measurements, without the need \n+       to modify .jfc files etc. Code that commits an internal event should NEVER be checked in.\n+\n+       Example usage:\n+\n+       #include \"jfr\/jfrEvents.hpp\"\n+\n+       void foo() {\n+         EventDuration event;\n+         bar();\n+         baz();\n+         event.commit();\n+       }\n+\n+       $ make images\n+       $ java -XX:StartFlightRecording:settings=none,filename=dump.jfr ...  \n+       ...\n+       $ jfr print dump.jfr\n+\n+       Programmatic access:\n+       try (var rf = new RecordingFile(Path.of(\"dump.jfr)) {\n+           while (rf.hasMoreEvents()) {\n+               RecordedEvent e = rf.readEvent();\n+               System.out.println(e.getName() + \" \" + e.getDuration()));\n+           }\n+       };\n+  !-->\n+\n+  <Event name=\"Duration\" category=\"Java Virtual Machine, Internal\" label=\"Duration\" startTime=\"true\" thread=\"true\" stackTrace=\"false\" internal=\"true\">\n+  <\/Event>\n+\n+  <Event name=\"Instant\" category=\"Java Virtual Machine, Internal\" label=\"Instant\" startTime=\"false\" thread=\"true\" stackTrace=\"false\" internal=\"true\">\n+  <\/Event>\n+\n+  <Event name=\"Value\" category=\"Java Virtual Machine, Internal\" label=\"Value\" startTime=\"false\" thread=\"true\" stackTrace=\"false\" internal=\"true\">\n+    <Field type=\"ulong\" name=\"value\" label=\"Value\"\/>\n+  <\/Event>\n+\n+  <Event name=\"Text\" category=\"Java Virtual Machine, Internal\" label=\"Text\" startTime=\"false\" thread=\"true\" stackTrace=\"false\" internal=\"true\">\n+    <Field type=\"string\" name=\"text\" label=\"Text\"\/>\n+  <\/Event>\n+  \n+  <Event name=\"ZThreadDebug\" category=\"Java Virtual Machine, GC, Detailed\" label=\"ZGC Thread Event\" description=\"Temporary latency measurements used during development and debugging of ZGC\" thread=\"true\" internal=\"true\">\n+    <Field type=\"uint\" name=\"gcId\" label=\"GC Identifier\" relation=\"GcId\"\/>\n+    <Field type=\"string\" name=\"name\" label=\"Name\" \/>\n+  <\/Event>\n+\n+  <!-- Ordinary and experimental events !-->\n+  \n@@ -1037,5 +1086,0 @@\n-  <Event name=\"ZThreadDebug\" category=\"Java Virtual Machine, GC, Detailed\" label=\"ZGC Thread Event\" description=\"Temporary latency measurements used during development and debugging of ZGC\" thread=\"true\" experimental=\"true\">\n-    <Field type=\"uint\" name=\"gcId\" label=\"GC Identifier\" relation=\"GcId\"\/>\n-    <Field type=\"string\" name=\"name\" label=\"Name\" \/>\n-  <\/Event>\n-\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":49,"deletions":5,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-ï»¿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n@@ -68,0 +68,1 @@\n+              <xs:attribute name=\"internal\" type=\"xs:boolean\" use=\"optional\" \/>\n@@ -90,0 +91,1 @@\n+                    <xs:attribute name=\"internal\" type=\"xs:boolean\" use=\"optional\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xsd","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"jfr\/jni\/jfrUpcalls.hpp\"\n@@ -29,0 +30,1 @@\n+#include \"jfr\/recorder\/jfrEventSetting.inline.hpp\"\n@@ -34,0 +36,1 @@\n+#include \"utilities\/exceptions.hpp\"\n@@ -39,0 +42,11 @@\n+static void check_internal_types() {\n+  static bool visible = false;\n+  if (!visible && JfrEventSetting::is_internal_types_visible()) {\n+    JavaThread* const jt = JavaThread::current();\n+    DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_native(jt));\n+    \/\/ can safepoint here\n+    ThreadInVMfromNative transition(jt);\n+    visible = JfrUpcalls::unhide_internal_types(jt);\n+  }\n+}\n+\n@@ -56,0 +70,1 @@\n+  check_internal_types();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrMetadataEvent.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+bool JfrEventSetting::_internal_types = false;\n@@ -61,0 +62,9 @@\n+void JfrEventSetting::unhide_internal_types() {\n+  _internal_types = true;\n+}\n+\n+bool JfrEventSetting::is_internal_types_visible() {\n+  return _internal_types;\n+}\n+\n+\n@@ -72,0 +82,1 @@\n+\n","filename":"src\/hotspot\/share\/jfr\/recorder\/jfrEventSetting.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+  static bool _internal_types;\n@@ -51,0 +52,2 @@\n+  static void unhide_internal_types();\n+  static bool is_internal_types_visible();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/jfrEventSetting.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -244,0 +244,5 @@\n+\n+    \/\/ package private\n+    boolean isVisible() {\n+        return platformEventType.isVisible();\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/EventType.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -206,0 +206,5 @@\n+\n+        @Override\n+        public boolean isVisible(EventType t) {\n+            return t.isVisible();\n+        }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/FlightRecorderPermission.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -295,1 +295,1 @@\n-            if (Utils.isSettingVisible(nc.control, type.hasEventHook())) {\n+            if (Utils.isSettingVisible(nc.control, type.hasEventHook()) && type.isVisible()) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventControl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -128,0 +128,10 @@\n+    \/**\n+     * Called by the JVM to ensure metadata for internal events\/types become public.\n+     *\n+     * Must be called after metadata repository has been initialized (JFR created).\n+     *\n+     *\/\n+    static void unhideInternalTypes() {\n+        MetadataRepository.unhideInternalTypes();\n+    }\n+\n@@ -131,2 +141,1 @@\n-     * @param systemThreadGroup\n-     *            the system thread group\n+     * @param systemThreadGroup  the system thread group\n@@ -134,2 +143,1 @@\n-     * @param contextClassLoader\n-     *            the context class loader.\n+     * @param contextClassLoader the context class loader.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVMUpcalls.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -56,1 +56,2 @@\n-    private final AnnotationElement ENABLED = new AnnotationElement(Enabled.class, false);\n+    private final AnnotationElement ENABLED = new AnnotationElement(Enabled.class, true);\n+    private final AnnotationElement DISABLED = new AnnotationElement(Enabled.class, false);\n@@ -85,0 +86,1 @@\n+        private final boolean internal;\n@@ -104,0 +106,1 @@\n+            internal = dis.readBoolean();\n@@ -318,1 +321,5 @@\n-                aes.add(ENABLED);\n+                if (t.internal) {\n+                    aes.add(ENABLED);\n+                } else {\n+                    aes.add(DISABLED);\n+                }\n@@ -331,0 +338,9 @@\n+            if (t.internal) {\n+                type.setInternal(true);\n+                \/\/ Internal types are hidden by default\n+                type.setVisible(false);\n+                \/\/ Internal events are enabled by default\n+                if (type instanceof PlatformEventType pe) {\n+                    pe.setEnabled(true);\n+                }\n+            }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MetadataLoader.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.util.Comparator;\n@@ -74,1 +75,1 @@\n-        for (Type type : typeLibrary.getTypes()) {\n+        for (Type type : new ArrayList<>(typeLibrary.getTypes())) {\n@@ -109,1 +110,5 @@\n-        eventTypes.addAll(nativeEventTypes);\n+        for (EventType t : nativeEventTypes) {\n+            if (PrivateAccess.getInstance().isVisible(t)) {\n+                eventTypes.add(t);\n+            }\n+        }\n@@ -246,1 +251,7 @@\n-            List<Type> types = typeLibrary.getTypes();\n+            List<Type> types = typeLibrary.getVisibleTypes();\n+            if (Logger.shouldLog(LogTag.JFR_METADATA, LogLevel.DEBUG)) {\n+                Collections.sort(types,Comparator.comparing(Type::getName));\n+                for (Type t: types) {\n+                    Logger.log(LogTag.JFR_METADATA, LogLevel.INFO, \"Serialized type: \" + t.getName() + \" id=\" + t.getId());\n+                }\n+            }\n@@ -352,0 +363,16 @@\n+    static void unhideInternalTypes() {\n+        for (Type t : TypeLibrary.getInstance().getTypes()) {\n+            if (t.isInternal()) {\n+                t.setVisible(true);\n+                Logger.log(LogTag.JFR_METADATA, LogLevel.DEBUG, \"Unhiding internal type \" + t.getName());\n+            }\n+        }\n+        \/\/ Singleton should have been initialized here.\n+        \/\/ It's not possible to call MetadataRepository().getInstance(),\n+        \/\/ because it will deadlock with Java thread calling flush() or setOutput();\n+        instance.storeDescriptorInJVM();\n+    }\n+\n+    public synchronized List<Type> getVisibleTypes() {\n+        return typeLibrary.getVisibleTypes();\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MetadataRepository.java","additions":30,"deletions":3,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -106,0 +106,2 @@\n+\n+    public abstract boolean isVisible(EventType t);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PrivateAccess.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,0 +92,2 @@\n+    private boolean visible = true;\n+    private boolean internal;\n@@ -340,0 +342,16 @@\n+\n+    public void setVisible(boolean visible) {\n+        this.visible = visible;\n+    }\n+\n+    public boolean isVisible() {\n+        return visible;\n+    }\n+\n+    public void setInternal(boolean internal) {\n+        this.internal = internal;\n+    }\n+\n+    public boolean isInternal() {\n+        return internal;\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Type.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -122,2 +122,13 @@\n-    public List<Type> getTypes() {\n-        return new ArrayList<>(types.values());\n+    public Collection<Type> getTypes() {\n+        return types.values();\n+    }\n+\n+    \/\/ Returned list should be mutable (for in-place sorting)\n+    public List<Type> getVisibleTypes() {\n+        List<Type> visible = new ArrayList<>(types.size());\n+        types.values().forEach(t -> {\n+            if (t.isVisible()) {\n+                visible.add(t);\n+            }\n+        });\n+        return visible;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/TypeLibrary.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-import jdk.jfr.internal.TypeLibrary;\n+import jdk.jfr.internal.MetadataRepository;\n@@ -233,1 +233,1 @@\n-            return TypeLibrary.getInstance().getTypes();\n+            return MetadataRepository.getInstance().getVisibleTypes();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Metadata.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -778,5 +778,0 @@\n-    <event name=\"jdk.ZThreadDebug\">\n-      <setting name=\"enabled\">true<\/setting>\n-      <setting name=\"threshold\">0 ms<\/setting>\n-    <\/event>\n-\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -778,5 +778,0 @@\n-    <event name=\"jdk.ZThreadDebug\">\n-      <setting name=\"enabled\">true<\/setting>\n-      <setting name=\"threshold\">0 ms<\/setting>\n-    <\/event>\n-\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}