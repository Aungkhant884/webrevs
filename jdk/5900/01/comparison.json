{"files":[{"patch":"@@ -456,0 +456,8 @@\n+# L10N: do not localize these words: warn info\n+doclet.usage.link-modularity-mismatch.parameters=\\\n+    (warn|info)\n+doclet.usage.link-modularity-mismatch.description=\\\n+    Report external documentation with wrong modularity as either\\n\\\n+    warning or informational message. The default behaviour is to\\n\\\n+    report a warning.\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/standard.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -168,0 +168,14 @@\n+    \/**\n+     * An enum of policies for handling modularity mismatches in external documentation.\n+     *\/\n+    public enum ModularityMismatchPolicy {\n+        info,\n+        warn\n+    }\n+\n+    \/**\n+     * Argument for command-line option {@code --link-modularity-mismatch}.\n+     * Describes how to handle external documentation with non-matching modularity.\n+     *\/\n+    private ModularityMismatchPolicy linkModularityMismatch = ModularityMismatchPolicy.warn;\n+\n@@ -406,0 +420,16 @@\n+                new Option(resources, \"--link-modularity-mismatch\", 1) {\n+                    @Override\n+                    public boolean process(String opt, List<String> args) {\n+                        String s = args.get(0);\n+                        switch (s) {\n+                            case \"warn\", \"info\" -> linkModularityMismatch = ModularityMismatchPolicy.valueOf(s);\n+                            default -> {\n+                                reporter.print(ERROR, resources.getText(\n+                                        \"doclet.Option_invalid\", s, \"--link-modularity-mismatch\"));\n+                                return false;\n+                            }\n+                        }\n+                        return true;\n+                    }\n+                },\n+\n@@ -467,7 +497,3 @@\n-                            case \"summary\":\n-                                summarizeOverriddenMethods = true;\n-                                break;\n-                            case \"detail\":\n-                                summarizeOverriddenMethods = false;\n-                                break;\n-                            default:\n+                            case \"summary\" -> summarizeOverriddenMethods = true;\n+                            case \"detail\"  -> summarizeOverriddenMethods = false;\n+                            default -> {\n@@ -477,0 +503,1 @@\n+                            }\n@@ -830,0 +857,8 @@\n+    \/**\n+     * Argument for command-line option {@code --link-modularity-mismatch}.\n+     * Describes how to handle external documentation with non-matching modularity.\n+     *\/\n+    public ModularityMismatchPolicy linkModularityMismatch() {\n+        return linkModularityMismatch;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/BaseOptions.java","additions":42,"deletions":7,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -517,1 +517,1 @@\n-            boolean issueWarning = true;\n+            boolean showDiagnostic = true;\n@@ -537,1 +537,1 @@\n-                            actualModuleName = checkLinkCompatibility(elemname, moduleName, path, issueWarning);\n+                            actualModuleName = checkLinkCompatibility(elemname, moduleName, path, showDiagnostic);\n@@ -544,1 +544,1 @@\n-                        issueWarning = false;\n+                        showDiagnostic = false;\n@@ -559,1 +559,1 @@\n-     * @param issueWarning whether to print a warning in case of modularity mismatch\n+     * @param showDiagnostic whether to print a diagnostic message in case of modularity mismatch\n@@ -562,1 +562,1 @@\n-    private String checkLinkCompatibility(String packageName, String moduleName, String path, boolean issueWarning)  {\n+    private String checkLinkCompatibility(String packageName, String moduleName, String path, boolean showDiagnostic)  {\n@@ -567,3 +567,2 @@\n-                if (moduleName != null && issueWarning) {\n-                    configuration.getReporter().print(Kind.WARNING,\n-                            resources.getText(\"doclet.linkMismatch_PackagedLinkedtoModule\", path));\n+                if (moduleName != null && showDiagnostic) {\n+                    printModularityMismatchDiagnostic(\"doclet.linkMismatch_PackagedLinkedtoModule\", path);\n@@ -574,4 +573,3 @@\n-                \/\/ suppress the warning message in the case of automatic modules\n-                if (!utils.elementUtils.isAutomaticModule(me) && issueWarning) {\n-                    configuration.getReporter().print(Kind.WARNING,\n-                            resources.getText(\"doclet.linkMismatch_ModuleLinkedtoPackage\", path));\n+                \/\/ suppress the diagnostic message in the case of automatic modules\n+                if (!utils.elementUtils.isAutomaticModule(me) && showDiagnostic) {\n+                    printModularityMismatchDiagnostic(\"doclet.linkMismatch_ModuleLinkedtoPackage\", path);\n@@ -662,0 +660,7 @@\n+\n+    private void printModularityMismatchDiagnostic(String key, Object arg) {\n+        switch (configuration.getOptions().linkModularityMismatch()) {\n+            case info -> configuration.getMessages().notice(key, arg);\n+            case warn -> configuration.getMessages().warning(key, arg);\n+        }\n+    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Extern.java","additions":17,"deletions":12,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8205593 8240169\n+ * @bug 8205593 8240169 8274639\n@@ -74,0 +74,1 @@\n+                \"-Werror\", \"-Xdoclint:-missing\",\n@@ -112,0 +113,1 @@\n+                \"--link-modularity-mismatch\", \"warn\",\n@@ -118,1 +120,1 @@\n-                \"The code being documented uses modules but the packages defined \"\n+                \"warning: The code being documented uses modules but the packages defined \"\n@@ -140,1 +142,1 @@\n-                \"The code being documented uses packages in the unnamed module, but the packages defined \"\n+                \"warning: The code being documented uses packages in the unnamed module, but the packages defined \"\n@@ -147,0 +149,49 @@\n+    @Test\n+    public void testModuleLinkedToPackageNoWarning(Path base) throws Exception {\n+        Path out1 = base.resolve(\"out5a\"), out2 = base.resolve(\"out5b\");\n+\n+        javadoc(\"-d\", out1.toString(),\n+                \"-sourcepath\", packageSrc.toString(),\n+                \"-subpackages\", \"com.ex1\");\n+\n+        javadoc(\"-d\", out2.toString(),\n+                \"--link-modularity-mismatch\", \"info\",\n+                \"-Werror\", \"-Xdoclint:-missing\",\n+                \"--module-source-path\", moduleSrc.toString(),\n+                \"--module\", \"com.ex2\",\n+                \"-link\", \"..\/\" + out1.getFileName());\n+\n+        checkExit(Exit.OK);\n+        checkOutput(Output.OUT, true,\n+                \"The code being documented uses modules but the packages defined \"\n+                        + \"in ..\/out5a\/ are in the unnamed module\");\n+        checkOutput(\"com.ex2\/com\/ex2\/B.html\", true,\n+                \"\"\"\n+                    <a href=\"..\/..\/..\/..\/out5a\/com\/ex1\/A.html\" title=\"class or interface in com.ex1\" class=\"external-link\">A<\/a>\"\"\");\n+    }\n+\n+    @Test\n+    public void testPackageLinkedToModuleNoWarning(Path base) throws Exception {\n+        Path out1 = base.resolve(\"out6a\"), out2 = base.resolve(\"out6b\");\n+\n+        javadoc(\"-d\", out1.toString(),\n+                \"--module-source-path\", moduleSrc.toString(),\n+                \"--module\", \"com.ex1\");\n+\n+        javadoc(\"-d\", out2.toString(),\n+                \"--link-modularity-mismatch\", \"info\",\n+                \"-quiet\",  \/\/ should not print modularity mismatch info\n+                \"-Werror\", \"-Xdoclint:-missing\",\n+                \"-sourcepath\", packageSrc.toString(),\n+                \"-subpackages\", \"com.ex2\",\n+                \"-link\", \"..\/\" + out1.getFileName());\n+\n+        checkExit(Exit.OK);\n+        \/\/ Modularity mismatch diagnostic should not be printed because we're runnning with -quiet option\n+        checkOutput(Output.OUT, false,\n+                \"The code being documented uses packages in the unnamed module, but the packages defined \"\n+                        + \"in ..\/out6a\/ are in named modules\");\n+        checkOutput(\"com\/ex2\/B.html\", true,\n+                \"\"\"\n+                    <a href=\"..\/..\/..\/out6a\/com.ex1\/com\/ex1\/A.html\" title=\"class or interface in com.ex1\" class=\"external-link\">A<\/a>\"\"\");\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testLinkOption\/TestLinkOptionWithModule.java","additions":55,"deletions":4,"binary":false,"changes":59,"status":"modified"}]}