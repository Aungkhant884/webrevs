{"files":[{"patch":"@@ -253,1 +253,3 @@\n-        Long flags = supplementaryFlags.get(c.packge());\n+        PackageSymbol packge = c.packge();\n+\n+        Long flags = supplementaryFlags.get(packge);\n@@ -257,3 +259,12 @@\n-                JRTIndex.CtSym ctSym = jrtIndex.getCtSym(c.packge().flatName());\n-                Profile minProfile = Profile.DEFAULT;\n-                if (ctSym.proprietary)\n+                ModuleSymbol owningModule = packge.modle;\n+                if (owningModule == syms.noModule) {\n+                    JRTIndex.CtSym ctSym = jrtIndex.getCtSym(packge.flatName());\n+                    Profile minProfile = Profile.DEFAULT;\n+                    if (ctSym.proprietary)\n+                        newFlags |= PROPRIETARY;\n+                    if (ctSym.minProfile != null)\n+                        minProfile = Profile.lookup(ctSym.minProfile);\n+                    if (profile != Profile.DEFAULT && minProfile.value > profile.value) {\n+                        newFlags |= NOT_IN_PROFILE;\n+                    }\n+                } else if (owningModule.name == names.jdk_unsupported) {\n@@ -261,4 +272,0 @@\n-                if (ctSym.minProfile != null)\n-                    minProfile = Profile.lookup(ctSym.minProfile);\n-                if (profile != Profile.DEFAULT && minProfile.value > profile.value) {\n-                    newFlags |= NOT_IN_PROFILE;\n@@ -268,1 +275,1 @@\n-            supplementaryFlags.put(c.packge(), flags = newFlags);\n+            supplementaryFlags.put(packge, flags = newFlags);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/ClassFinder.java","additions":16,"deletions":9,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-com.sun.nio.file.*: compact1\n+com.sun.nio.file.*: proprietary compact1\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/ct.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,0 +125,1 @@\n+    public final Name jdk_unsupported;\n@@ -304,0 +305,1 @@\n+        jdk_unsupported = fromString(\"jdk.unsupported\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Names.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8259039\n+ * @summary Verify behavior of --release and -source related to com.sun.nio.file\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.platform\n+ *          jdk.compiler\/com.sun.tools.javac.util:+open\n+ * @build toolbox.ToolBox CtPropertiesTest\n+ * @run main CtPropertiesTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.ToolBox;\n+\n+public class CtPropertiesTest {\n+\n+    public static void main(String... args) throws IOException, URISyntaxException {\n+        CtPropertiesTest t = new CtPropertiesTest();\n+\n+        t.runSource();\n+        t.runRelease();\n+    }\n+\n+    void runSource() throws IOException {\n+        Path root = Paths.get(\".\");\n+        Path classes = root.resolve(\"classes\");\n+        Files.createDirectories(classes);\n+        ToolBox tb = new ToolBox();\n+        List<String> log;\n+        List<String> expected;\n+\n+        expected = List.of(\n+                \"Test.java:2:21: compiler.warn.sun.proprietary: com.sun.nio.file.ExtendedOpenOption\",\n+                \"1 warning\"\n+        );\n+\n+        List<String> versions = new ArrayList<>();\n+\n+        Path javaHome = FileSystems.getDefault().getPath(System.getProperty(\"java.home\"));\n+        Path thisSystemModules = javaHome.resolve(\"lib\").resolve(\"modules\");\n+\n+        if (Files.isRegularFile(thisSystemModules)) {\n+            \/\/only use -source 8 when running on full JDK images (not on the exploded JDK), as the\n+            \/\/classfiles are not considered to be part of JRT image when running with -source 8:\n+            versions.add(\"8\");\n+        }\n+\n+        versions.addAll(List.of(\"11\", \"17\", System.getProperty(\"java.specification.version\")));\n+\n+        for (String version : versions) {\n+            log = new JavacTask(tb)\n+                    .outdir(classes)\n+                    .options(\"-source\", version,\n+                             \"-XDrawDiagnostics\",\n+                             \"-Xlint:-options\")\n+                    .sources(\"\"\"\n+                             public class Test {\n+                                 com.sun.nio.file.ExtendedOpenOption o;\n+                             }\n+                             \"\"\")\n+                    .run()\n+                    .writeAll()\n+                    .getOutputLines(Task.OutputKind.DIRECT);\n+\n+            if (!expected.equals(log)) {\n+                throw new AssertionError(\"Unexpected output: \" + log + \", version: \" + version);\n+            }\n+        }\n+    }\n+\n+    void runRelease() throws IOException {\n+        Path root = Paths.get(\".\");\n+        Path classes = root.resolve(\"classes\");\n+        Files.createDirectories(classes);\n+        ToolBox tb = new ToolBox();\n+        List<String> log;\n+        List<String> expected;\n+\n+        expected = List.of(\n+                \"Test.java:2:21: compiler.warn.sun.proprietary: com.sun.nio.file.ExtendedOpenOption\",\n+                \"1 warning\"\n+        );\n+\n+        for (String version : new String[] {\"11\", \"17\", System.getProperty(\"java.specification.version\")}) {\n+            log = new JavacTask(tb)\n+                    .outdir(classes)\n+                    .options(\"--release\", version,\n+                             \"-XDrawDiagnostics\")\n+                    .sources(\"\"\"\n+                             public class Test {\n+                                 com.sun.nio.file.ExtendedOpenOption o;\n+                             }\n+                             \"\"\")\n+                    .run()\n+                    .writeAll()\n+                    .getOutputLines(Task.OutputKind.DIRECT);\n+\n+            if (!expected.equals(log)) {\n+                throw new AssertionError(\"Unexpected output: \" + log + \", version: \" + version);\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/platform\/CtPropertiesTest.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"}]}