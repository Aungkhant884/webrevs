{"files":[{"patch":"@@ -1846,1 +1846,1 @@\n-instruct vcmeq8B(vecD dst, vecD src1, vecD src2, immI cond)\n+instruct vcmpD(vecD dst, vecD src1, vecD src2, immI cond)\n@@ -1848,3 +1848,1 @@\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n+  predicate(n->as_Vector()->length_in_bytes() == 8);\n@@ -1852,1 +1850,1 @@\n-  format %{ \"cmeq  $dst, T8B, $src1, $src2\\t# vector cmp (8B)\" %}\n+  format %{ \"vcmpD  $dst, $src1, $src2\\t# vector compare \" %}\n@@ -1855,2 +1853,4 @@\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n+    BasicType bt = vector_element_basic_type(this);\n+    assert(type2aelembytes(bt) != 8, \"not supported\");\n+    __ neon_compare(as_FloatRegister($dst$$reg), bt, as_FloatRegister($src1$$reg),\n+                    as_FloatRegister($src2$$reg), (int)$cond$$constant, \/*isQ*\/ false);\n@@ -1861,1 +1861,1 @@\n-instruct vcmeq16B(vecX dst, vecX src1, vecX src2, immI cond)\n+instruct vcmpX(vecX dst, vecX src1, vecX src2, immI cond)\n@@ -1863,3 +1863,1 @@\n-  predicate(n->as_Vector()->length() == 16 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n@@ -1867,1 +1865,1 @@\n-  format %{ \"cmeq  $dst, T16B, $src1, $src2\\t# vector cmp (16B)\" %}\n+  format %{ \"vcmpX  $dst, $src1, $src2\\t# vector compare \" %}\n@@ -1870,892 +1868,3 @@\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmeq4S(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T4H, $src1, $src2\\t# vector cmp (4S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmeq8S(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T8H, $src1, $src2\\t# vector cmp (8S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmeq2I(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T2S, $src1, $src2\\t# vector cmp (2I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmeq4I(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T4S, $src1, $src2\\t# vector cmp (4I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmeq2L(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T2D, $src1, $src2\\t# vector cmp (2L)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmeq2F(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmeq  $dst, T2S, $src1, $src2\\t# vector cmp (2F)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmeq(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmeq4F(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmeq  $dst, T4S, $src1, $src2\\t# vector cmp (4F)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmeq(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmeq2D(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::eq &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmeq  $dst, T2D, $src1, $src2\\t# vector cmp (2D)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmeq(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmgt8B(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T8B, $src1, $src2\\t# vector cmp (8B)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmgt16B(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 16 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T16B, $src1, $src2\\t# vector cmp (16B)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmgt4S(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T4H, $src1, $src2\\t# vector cmp (4S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmgt8S(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T8H, $src1, $src2\\t# vector cmp (8S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmgt2I(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T2S, $src1, $src2\\t# vector cmp (2I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmgt4I(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T4S, $src1, $src2\\t# vector cmp (4I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmgt2L(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T2D, $src1, $src2\\t# vector cmp (2L)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmgt2F(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmgt  $dst, T2S, $src1, $src2\\t# vector cmp (2F)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmgt(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmgt4F(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmgt  $dst, T4S, $src1, $src2\\t# vector cmp (4F)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmgt(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmgt2D(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::gt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmgt  $dst, T2D, $src1, $src2\\t# vector cmp (2D)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmgt(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmge8B(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T8B, $src1, $src2\\t# vector cmp (8B)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmge16B(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 16 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T16B, $src1, $src2\\t# vector cmp (16B)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmge4S(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T4H, $src1, $src2\\t# vector cmp (4S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmge8S(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T8H, $src1, $src2\\t# vector cmp (8S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmge2I(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T2S, $src1, $src2\\t# vector cmp (2I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmge4I(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T4S, $src1, $src2\\t# vector cmp (4I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmge2L(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T2D, $src1, $src2\\t# vector cmp (2L)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmge2F(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmge  $dst, T2S, $src1, $src2\\t# vector cmp (2F)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmge(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmge4F(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmge  $dst, T4S, $src1, $src2\\t# vector cmp (4F)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmge(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmge2D(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ge &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmge  $dst, T2D, $src1, $src2\\t# vector cmp (2D)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmge(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmne8B(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T8B, $src1, $src2\\n\\t# vector cmp (8B)\"\n-            \"not   $dst, T8B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmne16B(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 16 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T16B, $src1, $src2\\n\\t# vector cmp (16B)\"\n-            \"not   $dst, T16B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T16B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmne4S(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T4H, $src1, $src2\\n\\t# vector cmp (4S)\"\n-            \"not   $dst, T8B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmne8S(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T8H, $src1, $src2\\n\\t# vector cmp (8S)\"\n-            \"not   $dst, T16B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T16B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmne2I(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T2S, $src1, $src2\\n\\t# vector cmp (2I)\"\n-            \"not   $dst, T8B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmne4I(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T4S, $src1, $src2\\n\\t# vector cmp (4I)\"\n-            \"not   $dst, T16B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T16B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmne2L(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmeq  $dst, T2D, $src1, $src2\\n\\t# vector cmp (2L)\"\n-            \"not   $dst, T16B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmeq(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T16B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmne2F(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmeq  $dst, T2S, $src1, $src2\\n\\t# vector cmp (2F)\"\n-            \"not   $dst, T8B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmeq(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmne4F(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmeq  $dst, T4S, $src1, $src2\\n\\t# vector cmp (4F)\"\n-            \"not   $dst, T16B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmeq(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T16B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmne2D(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmeq  $dst, T2D, $src1, $src2\\n\\t# vector cmp (2D)\"\n-            \"not   $dst, T16B, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmeq(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T16B, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcmlt8B(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T8B, $src2, $src1\\t# vector cmp (8B)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmlt16B(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 16 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T16B, $src2, $src1\\t# vector cmp (16B)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmlt4S(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T4H, $src2, $src1\\t# vector cmp (4S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmlt8S(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T8H, $src2, $src1\\t# vector cmp (8S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmlt2I(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T2S, $src2, $src1\\t# vector cmp (2I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmlt4I(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T4S, $src2, $src1\\t# vector cmp (4I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmlt2L(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmgt  $dst, T2D, $src2, $src1\\t# vector cmp (2L)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmgt(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmlt2F(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmgt  $dst, T2S, $src2, $src1\\t# vector cmp (2F)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmgt(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmlt4F(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmgt  $dst, T4S, $src2, $src1\\t# vector cmp (4F)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmgt(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmlt2D(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::lt &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmgt  $dst, T2D, $src2, $src1\\t# vector cmp (2D)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmgt(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmle8B(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T8B, $src2, $src1\\t# vector cmp (8B)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmle16B(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 16 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T16B, $src2, $src1\\t# vector cmp (16B)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmle4S(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T4H, $src2, $src1\\t# vector cmp (4S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmle8S(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 8 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T8H, $src2, $src1\\t# vector cmp (8S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmle2I(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T2S, $src2, $src1\\t# vector cmp (2I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmle4I(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T4S, $src2, $src1\\t# vector cmp (4I)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmle2L(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"cmge  $dst, T2D, $src2, $src1\\t# vector cmp (2L)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ cmge(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmle2F(vecD dst, vecD src1, vecD src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmge  $dst, T2S, $src2, $src1\\t# vector cmp (2F)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmge(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vcmle4F(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 4 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmge  $dst, T4S, $src2, $src1\\t# vector cmp (4F)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmge(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vcmle2D(vecX dst, vecX src1, vecX src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == 2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::le &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"fcmge  $dst, T2D, $src2, $src1\\t# vector cmp (2D)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fcmge(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n+    BasicType bt = vector_element_basic_type(this);\n+    __ neon_compare(as_FloatRegister($dst$$reg), bt, as_FloatRegister($src1$$reg),\n+                    as_FloatRegister($src2$$reg), (int)$cond$$constant, \/*isQ*\/ true);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":13,"deletions":904,"binary":false,"changes":917,"status":"modified"},{"patch":"@@ -867,2 +867,2 @@\n-define(`VECTOR_CMP_EQ_GT_GE', `\n-instruct vcm$1$2$3`'(vec$4 dst, vec$4 src1, vec$4 src2, immI cond)\n+\n+instruct vcmpD(vecD dst, vecD src1, vecD src2, immI cond)\n@@ -870,3 +870,1 @@\n-  predicate(n->as_Vector()->length() == $2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::$1 &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($3));\n+  predicate(n->as_Vector()->length_in_bytes() == 8);\n@@ -874,1 +872,1 @@\n-  format %{ \"$6cm$1  $dst, T$2$5, $src1, $src2\\t# vector cmp ($2$3)\" %}\n+  format %{ \"vcmpD  $dst, $src1, $src2\\t# vector compare \" %}\n@@ -877,2 +875,4 @@\n-    __ $6cm$1(as_FloatRegister($dst$$reg), __ T$2$5,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n+    BasicType bt = vector_element_basic_type(this);\n+    assert(type2aelembytes(bt) != 8, \"not supported\");\n+    __ neon_compare(as_FloatRegister($dst$$reg), bt, as_FloatRegister($src1$$reg),\n+                    as_FloatRegister($src2$$reg), (int)$cond$$constant, \/*isQ*\/ false);\n@@ -880,69 +880,6 @@\n-  ins_pipe(vdop$7);\n-%}')dnl\n-dnl                $1   $2 $3 $4 $5 $6 $7\n-VECTOR_CMP_EQ_GT_GE(eq, 8, B, D, B,  , 64)\n-VECTOR_CMP_EQ_GT_GE(eq, 16,B, X, B,  , 128)\n-VECTOR_CMP_EQ_GT_GE(eq, 4, S, D, H,  , 64)\n-VECTOR_CMP_EQ_GT_GE(eq, 8, S, X, H,  , 128)\n-VECTOR_CMP_EQ_GT_GE(eq, 2, I, D, S,  , 64)\n-VECTOR_CMP_EQ_GT_GE(eq, 4, I, X, S,  , 128)\n-VECTOR_CMP_EQ_GT_GE(eq, 2, L, X, D,  , 128)\n-VECTOR_CMP_EQ_GT_GE(eq, 2, F, D, S, f, 64)\n-VECTOR_CMP_EQ_GT_GE(eq, 4, F, X, S, f, 128)\n-VECTOR_CMP_EQ_GT_GE(eq, 2, D, X, D, f, 128)\n-VECTOR_CMP_EQ_GT_GE(gt, 8, B, D, B,  , 64)\n-VECTOR_CMP_EQ_GT_GE(gt, 16,B, X, B,  , 128)\n-VECTOR_CMP_EQ_GT_GE(gt, 4, S, D, H,  , 64)\n-VECTOR_CMP_EQ_GT_GE(gt, 8, S, X, H,  , 128)\n-VECTOR_CMP_EQ_GT_GE(gt, 2, I, D, S,  , 64)\n-VECTOR_CMP_EQ_GT_GE(gt, 4, I, X, S,  , 128)\n-VECTOR_CMP_EQ_GT_GE(gt, 2, L, X, D,  , 128)\n-VECTOR_CMP_EQ_GT_GE(gt, 2, F, D, S, f, 64)\n-VECTOR_CMP_EQ_GT_GE(gt, 4, F, X, S, f, 128)\n-VECTOR_CMP_EQ_GT_GE(gt, 2, D, X, D, f, 128)\n-VECTOR_CMP_EQ_GT_GE(ge, 8, B, D, B,  , 64)\n-VECTOR_CMP_EQ_GT_GE(ge, 16,B, X, B,  , 128)\n-VECTOR_CMP_EQ_GT_GE(ge, 4, S, D, H,  , 64)\n-VECTOR_CMP_EQ_GT_GE(ge, 8, S, X, H,  , 128)\n-VECTOR_CMP_EQ_GT_GE(ge, 2, I, D, S,  , 64)\n-VECTOR_CMP_EQ_GT_GE(ge, 4, I, X, S,  , 128)\n-VECTOR_CMP_EQ_GT_GE(ge, 2, L, X, D,  , 128)\n-VECTOR_CMP_EQ_GT_GE(ge, 2, F, D, S, f, 64)\n-VECTOR_CMP_EQ_GT_GE(ge, 4, F, X, S, f, 128)\n-VECTOR_CMP_EQ_GT_GE(ge, 2, D, X, D, f, 128)\n-dnl\n-define(`VECTOR_CMP_NE', `\n-instruct vcmne$1$2`'(vec$3 dst, vec$3 src1, vec$3 src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == $1 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::ne &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($2));\n-  match(Set dst (VectorMaskCmp (Binary src1 src2) cond));\n-  format %{ \"$5cmeq  $dst, T$1$4, $src1, $src2\\n\\t# vector cmp ($1$2)\"\n-            \"not   $dst, T$6, $dst\\t\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ $5cmeq(as_FloatRegister($dst$$reg), __ T$1$4,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-    __ notr(as_FloatRegister($dst$$reg), __ T$6, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}')dnl\n-dnl           $1 $2 $3 $4 $5 $6\n-VECTOR_CMP_NE(8, B, D, B,  , 8B)\n-VECTOR_CMP_NE(16,B, X, B,  , 16B)\n-VECTOR_CMP_NE(4, S, D, H,  , 8B)\n-VECTOR_CMP_NE(8, S, X, H,  , 16B)\n-VECTOR_CMP_NE(2, I, D, S,  , 8B)\n-VECTOR_CMP_NE(4, I, X, S,  , 16B)\n-VECTOR_CMP_NE(2, L, X, D,  , 16B)\n-VECTOR_CMP_NE(2, F, D, S, f, 8B)\n-VECTOR_CMP_NE(4, F, X, S, f, 16B)\n-VECTOR_CMP_NE(2, D, X, D, f, 16B)\n-dnl\n-define(`VECTOR_CMP_LT_LE', `\n-instruct vcm$1$2$3`'(vec$4 dst, vec$4 src1, vec$4 src2, immI cond)\n-%{\n-  predicate(n->as_Vector()->length() == $2 &&\n-            n->as_VectorMaskCmp()->get_predicate() == BoolTest::$1 &&\n-            n->in(1)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($3));\n+  ins_pipe(vdop64);\n+%}\n+\n+instruct vcmpX(vecX dst, vecX src1, vecX src2, immI cond)\n+%{\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n@@ -950,1 +887,1 @@\n-  format %{ \"$6cm$7  $dst, T$2$5, $src2, $src1\\t# vector cmp ($2$3)\" %}\n+  format %{ \"vcmpX  $dst, $src1, $src2\\t# vector compare \" %}\n@@ -953,2 +890,3 @@\n-    __ $6cm$7(as_FloatRegister($dst$$reg), __ T$2$5,\n-            as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n+    BasicType bt = vector_element_basic_type(this);\n+    __ neon_compare(as_FloatRegister($dst$$reg), bt, as_FloatRegister($src1$$reg),\n+                    as_FloatRegister($src2$$reg), (int)$cond$$constant, \/*isQ*\/ true);\n@@ -956,24 +894,2 @@\n-  ins_pipe(vdop$8);\n-%}')dnl\n-dnl              $1  $2 $3 $4 $5 $6 $7  $8\n-VECTOR_CMP_LT_LE(lt, 8, B, D, B,  , gt, 64)\n-VECTOR_CMP_LT_LE(lt, 16,B, X, B,  , gt, 128)\n-VECTOR_CMP_LT_LE(lt, 4, S, D, H,  , gt, 64)\n-VECTOR_CMP_LT_LE(lt, 8, S, X, H,  , gt, 128)\n-VECTOR_CMP_LT_LE(lt, 2, I, D, S,  , gt, 64)\n-VECTOR_CMP_LT_LE(lt, 4, I, X, S,  , gt, 128)\n-VECTOR_CMP_LT_LE(lt, 2, L, X, D,  , gt, 128)\n-VECTOR_CMP_LT_LE(lt, 2, F, D, S, f, gt, 64)\n-VECTOR_CMP_LT_LE(lt, 4, F, X, S, f, gt, 128)\n-VECTOR_CMP_LT_LE(lt, 2, D, X, D, f, gt, 128)\n-VECTOR_CMP_LT_LE(le, 8, B, D, B,  , ge, 64)\n-VECTOR_CMP_LT_LE(le, 16,B, X, B,  , ge, 128)\n-VECTOR_CMP_LT_LE(le, 4, S, D, H,  , ge, 64)\n-VECTOR_CMP_LT_LE(le, 8, S, X, H,  , ge, 128)\n-VECTOR_CMP_LT_LE(le, 2, I, D, S,  , ge, 64)\n-VECTOR_CMP_LT_LE(le, 4, I, X, S,  , ge, 128)\n-VECTOR_CMP_LT_LE(le, 2, L, X, D,  , ge, 128)\n-VECTOR_CMP_LT_LE(le, 2, F, D, S, f, ge, 64)\n-VECTOR_CMP_LT_LE(le, 4, F, X, S, f, ge, 128)\n-VECTOR_CMP_LT_LE(le, 2, D, X, D, f, ge, 128)\n-dnl\n+  ins_pipe(vdop128);\n+%}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":20,"deletions":104,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,19 @@\n+Assembler::SIMD_Arrangement Assembler::_esize2arrangement_table[9][2] = {\n+  \/\/ esize        isQ:false             isQ:true\n+  \/*   0  *\/      {INVALID_ARRANGEMENT, INVALID_ARRANGEMENT},\n+  \/*   1  *\/      {T8B,                 T16B},\n+  \/*   2  *\/      {T4H,                 T8H},\n+  \/*   3  *\/      {INVALID_ARRANGEMENT, INVALID_ARRANGEMENT},\n+  \/*   4  *\/      {T2S,                 T4S},\n+  \/*   5  *\/      {INVALID_ARRANGEMENT, INVALID_ARRANGEMENT},\n+  \/*   6  *\/      {INVALID_ARRANGEMENT, INVALID_ARRANGEMENT},\n+  \/*   7  *\/      {INVALID_ARRANGEMENT, INVALID_ARRANGEMENT},\n+  \/*   8  *\/      {T1D,                 T2D}\n+  };\n+\n+\n+Assembler::SIMD_Arrangement Assembler::esize2arrangement(int esize, bool isQ) {\n+    guarantee(esize == 1 || esize == 2 || esize == 4 || esize == 8, \"unsupported element size\");\n+    return _esize2arrangement_table[esize][isQ];\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.cpp","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1533,1 +1533,1 @@\n-    T8B, T16B, T4H, T8H, T2S, T4S, T1D, T2D, T1Q\n+    T8B, T16B, T4H, T8H, T2S, T4S, T1D, T2D, T1Q, INVALID_ARRANGEMENT\n@@ -1536,0 +1536,8 @@\n+private:\n+\n+  static SIMD_Arrangement _esize2arrangement_table[9][2];\n+\n+public:\n+\n+  static SIMD_Arrangement esize2arrangement(int esize, bool isQ);\n+\n@@ -2413,0 +2421,1 @@\n+  INSN(cmhs,   1, 0b001111, true);  \/\/ accepted arrangements: T8B, T16B, T4H, T8H, T2S, T4S, T2D\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -5342,0 +5342,43 @@\n+void MacroAssembler::neon_compare(FloatRegister dst, BasicType bt, FloatRegister src1,\n+                                  FloatRegister src2, int cond, bool isQ) {\n+  SIMD_Arrangement size = esize2arrangement(type2aelembytes(bt), isQ);\n+  if (bt == T_FLOAT || bt == T_DOUBLE) {\n+    switch (cond) {\n+      case BoolTest::eq: fcmeq(dst, size, src1, src2); break;\n+      case BoolTest::ne: {\n+        fcmeq(dst, size, src1, src2);\n+        notr(dst, T16B, dst);\n+        break;\n+      }\n+      case BoolTest::ge: fcmge(dst, size, src1, src2); break;\n+      case BoolTest::gt: fcmgt(dst, size, src1, src2); break;\n+      case BoolTest::le: fcmge(dst, size, src2, src1); break;\n+      case BoolTest::lt: fcmgt(dst, size, src2, src1); break;\n+      default:\n+        assert(false, \"unsupported\");\n+        ShouldNotReachHere();\n+    }\n+  } else {\n+    switch (cond) {\n+      case BoolTest::eq: cmeq(dst, size, src1, src2); break;\n+      case BoolTest::ne: {\n+        cmeq(dst, size, src1, src2);\n+        notr(dst, T16B, dst);\n+        break;\n+      }\n+      case BoolTest::ge: cmge(dst, size, src1, src2); break;\n+      case BoolTest::gt: cmgt(dst, size, src1, src2); break;\n+      case BoolTest::le: cmge(dst, size, src2, src1); break;\n+      case BoolTest::lt: cmgt(dst, size, src2, src1); break;\n+      case BoolTest::uge: cmhs(dst, size, src1, src2); break;\n+      case BoolTest::ugt: cmhi(dst, size, src1, src2); break;\n+      case BoolTest::ult: cmhi(dst, size, src2, src1); break;\n+      case BoolTest::ule: cmhs(dst, size, src2, src1); break;\n+      default:\n+        assert(false, \"unsupported\");\n+        ShouldNotReachHere();\n+    }\n+  }\n+}\n+\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":43,"deletions":0,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -1060,0 +1060,3 @@\n+\n+  \/\/ SIMD&FP comparison\n+  void neon_compare(FloatRegister dst, BasicType bt, FloatRegister src1, FloatRegister src2, int cond, bool isQ);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -142,2 +142,3 @@\n-  static constexpr bool supports_vector_comparison_unsigned(int vlen, BasicType bt) {\n-    return false;\n+  static const bool supports_vector_comparison_unsigned(int vlen, BasicType bt) {\n+    \/\/ Not supported on SVE yet.\n+    return !UseSVE;\n","filename":"src\/hotspot\/cpu\/aarch64\/matcher_aarch64.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1487,0 +1487,8 @@\n+          [\"cmhi\", \"cmhi\", \"8B\"], [\"cmhi\", \"cmhi\", \"16B\"],\n+          [\"cmhi\", \"cmhi\", \"4H\"], [\"cmhi\", \"cmhi\", \"8H\"],\n+          [\"cmhi\", \"cmhi\", \"2S\"], [\"cmhi\", \"cmhi\", \"4S\"],\n+          [\"cmhi\", \"cmhi\", \"2D\"],\n+          [\"cmhs\", \"cmhs\", \"8B\"], [\"cmhs\", \"cmhs\", \"16B\"],\n+          [\"cmhs\", \"cmhs\", \"4H\"], [\"cmhs\", \"cmhs\", \"8H\"],\n+          [\"cmhs\", \"cmhs\", \"2S\"], [\"cmhs\", \"cmhs\", \"4S\"],\n+          [\"cmhs\", \"cmhs\", \"2D\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -676,10 +676,24 @@\n-    __ fcmgt(v14, __ T2S, v15, v16);                   \/\/       fcmgt   v14.2S, v15.2S, v16.2S\n-    __ fcmgt(v21, __ T4S, v22, v23);                   \/\/       fcmgt   v21.4S, v22.4S, v23.4S\n-    __ fcmgt(v3, __ T2D, v4, v5);                      \/\/       fcmgt   v3.2D, v4.2D, v5.2D\n-    __ cmge(v23, __ T8B, v24, v25);                    \/\/       cmge    v23.8B, v24.8B, v25.8B\n-    __ cmge(v8, __ T16B, v9, v10);                     \/\/       cmge    v8.16B, v9.16B, v10.16B\n-    __ cmge(v24, __ T4H, v25, v26);                    \/\/       cmge    v24.4H, v25.4H, v26.4H\n-    __ cmge(v19, __ T8H, v20, v21);                    \/\/       cmge    v19.8H, v20.8H, v21.8H\n-    __ cmge(v15, __ T2S, v16, v17);                    \/\/       cmge    v15.2S, v16.2S, v17.2S\n-    __ cmge(v16, __ T4S, v17, v18);                    \/\/       cmge    v16.4S, v17.4S, v18.4S\n-    __ cmge(v2, __ T2D, v3, v4);                       \/\/       cmge    v2.2D, v3.2D, v4.2D\n+    __ cmhi(v14, __ T8B, v15, v16);                    \/\/       cmhi    v14.8B, v15.8B, v16.8B\n+    __ cmhi(v21, __ T16B, v22, v23);                   \/\/       cmhi    v21.16B, v22.16B, v23.16B\n+    __ cmhi(v3, __ T4H, v4, v5);                       \/\/       cmhi    v3.4H, v4.4H, v5.4H\n+    __ cmhi(v23, __ T8H, v24, v25);                    \/\/       cmhi    v23.8H, v24.8H, v25.8H\n+    __ cmhi(v8, __ T2S, v9, v10);                      \/\/       cmhi    v8.2S, v9.2S, v10.2S\n+    __ cmhi(v24, __ T4S, v25, v26);                    \/\/       cmhi    v24.4S, v25.4S, v26.4S\n+    __ cmhi(v19, __ T2D, v20, v21);                    \/\/       cmhi    v19.2D, v20.2D, v21.2D\n+    __ cmhs(v15, __ T8B, v16, v17);                    \/\/       cmhs    v15.8B, v16.8B, v17.8B\n+    __ cmhs(v16, __ T16B, v17, v18);                   \/\/       cmhs    v16.16B, v17.16B, v18.16B\n+    __ cmhs(v2, __ T4H, v3, v4);                       \/\/       cmhs    v2.4H, v3.4H, v4.4H\n+    __ cmhs(v1, __ T8H, v2, v3);                       \/\/       cmhs    v1.8H, v2.8H, v3.8H\n+    __ cmhs(v0, __ T2S, v1, v2);                       \/\/       cmhs    v0.2S, v1.2S, v2.2S\n+    __ cmhs(v24, __ T4S, v25, v26);                    \/\/       cmhs    v24.4S, v25.4S, v26.4S\n+    __ cmhs(v4, __ T2D, v5, v6);                       \/\/       cmhs    v4.2D, v5.2D, v6.2D\n+    __ fcmgt(v3, __ T2S, v4, v5);                      \/\/       fcmgt   v3.2S, v4.2S, v5.2S\n+    __ fcmgt(v11, __ T4S, v12, v13);                   \/\/       fcmgt   v11.4S, v12.4S, v13.4S\n+    __ fcmgt(v30, __ T2D, v31, v0);                    \/\/       fcmgt   v30.2D, v31.2D, v0.2D\n+    __ cmge(v27, __ T8B, v28, v29);                    \/\/       cmge    v27.8B, v28.8B, v29.8B\n+    __ cmge(v9, __ T16B, v10, v11);                    \/\/       cmge    v9.16B, v10.16B, v11.16B\n+    __ cmge(v25, __ T4H, v26, v27);                    \/\/       cmge    v25.4H, v26.4H, v27.4H\n+    __ cmge(v2, __ T8H, v3, v4);                       \/\/       cmge    v2.8H, v3.8H, v4.8H\n+    __ cmge(v12, __ T2S, v13, v14);                    \/\/       cmge    v12.2S, v13.2S, v14.2S\n+    __ cmge(v17, __ T4S, v18, v19);                    \/\/       cmge    v17.4S, v18.4S, v19.4S\n+    __ cmge(v30, __ T2D, v31, v0);                     \/\/       cmge    v30.2D, v31.2D, v0.2D\n@@ -687,2 +701,2 @@\n-    __ fcmge(v0, __ T4S, v1, v2);                      \/\/       fcmge   v0.4S, v1.4S, v2.4S\n-    __ fcmge(v24, __ T2D, v25, v26);                   \/\/       fcmge   v24.2D, v25.2D, v26.2D\n+    __ fcmge(v12, __ T4S, v13, v14);                   \/\/       fcmge   v12.4S, v13.4S, v14.4S\n+    __ fcmge(v28, __ T2D, v29, v30);                   \/\/       fcmge   v28.2D, v29.2D, v30.2D\n@@ -782,9 +796,9 @@\n-    __ swp(Assembler::xword, r4, r3, r12);             \/\/       swp     x4, x3, [x12]\n-    __ ldadd(Assembler::xword, zr, r28, r10);          \/\/       ldadd   xzr, x28, [x10]\n-    __ ldbic(Assembler::xword, r26, r2, r12);          \/\/       ldclr   x26, x2, [x12]\n-    __ ldeor(Assembler::xword, r16, zr, r1);           \/\/       ldeor   x16, xzr, [x1]\n-    __ ldorr(Assembler::xword, r13, r29, r0);          \/\/       ldset   x13, x29, [x0]\n-    __ ldsmin(Assembler::xword, r19, r12, r17);        \/\/       ldsmin  x19, x12, [x17]\n-    __ ldsmax(Assembler::xword, r22, r13, r28);        \/\/       ldsmax  x22, x13, [x28]\n-    __ ldumin(Assembler::xword, r30, zr, r1);          \/\/       ldumin  x30, xzr, [x1]\n-    __ ldumax(Assembler::xword, r26, r28, r4);         \/\/       ldumax  x26, x28, [x4]\n+    __ swp(Assembler::xword, r0, r19, r12);            \/\/       swp     x0, x19, [x12]\n+    __ ldadd(Assembler::xword, r17, r22, r13);         \/\/       ldadd   x17, x22, [x13]\n+    __ ldbic(Assembler::xword, r28, r30, sp);          \/\/       ldclr   x28, x30, [sp]\n+    __ ldeor(Assembler::xword, r1, r26, r28);          \/\/       ldeor   x1, x26, [x28]\n+    __ ldorr(Assembler::xword, r4, r30, r4);           \/\/       ldset   x4, x30, [x4]\n+    __ ldsmin(Assembler::xword, r6, r30, r26);         \/\/       ldsmin  x6, x30, [x26]\n+    __ ldsmax(Assembler::xword, r16, r9, r8);          \/\/       ldsmax  x16, x9, [x8]\n+    __ ldumin(Assembler::xword, r12, r0, r20);         \/\/       ldumin  x12, x0, [x20]\n+    __ ldumax(Assembler::xword, r1, r24, r2);          \/\/       ldumax  x1, x24, [x2]\n@@ -793,9 +807,9 @@\n-    __ swpa(Assembler::xword, r30, r4, r6);            \/\/       swpa    x30, x4, [x6]\n-    __ ldadda(Assembler::xword, r30, r26, r15);        \/\/       ldadda  x30, x26, [x15]\n-    __ ldbica(Assembler::xword, r9, r8, r12);          \/\/       ldclra  x9, x8, [x12]\n-    __ ldeora(Assembler::xword, r0, r20, r1);          \/\/       ldeora  x0, x20, [x1]\n-    __ ldorra(Assembler::xword, r24, r2, r0);          \/\/       ldseta  x24, x2, [x0]\n-    __ ldsmina(Assembler::xword, r9, r24, r26);        \/\/       ldsmina x9, x24, [x26]\n-    __ ldsmaxa(Assembler::xword, r16, r30, r3);        \/\/       ldsmaxa x16, x30, [x3]\n-    __ ldumina(Assembler::xword, r10, r23, r10);       \/\/       ldumina x10, x23, [x10]\n-    __ ldumaxa(Assembler::xword, r4, r16, r2);         \/\/       ldumaxa x4, x16, [x2]\n+    __ swpa(Assembler::xword, r0, r9, r24);            \/\/       swpa    x0, x9, [x24]\n+    __ ldadda(Assembler::xword, r26, r16, r30);        \/\/       ldadda  x26, x16, [x30]\n+    __ ldbica(Assembler::xword, r3, r10, r23);         \/\/       ldclra  x3, x10, [x23]\n+    __ ldeora(Assembler::xword, r10, r4, r15);         \/\/       ldeora  x10, x4, [x15]\n+    __ ldorra(Assembler::xword, r2, r11, r8);          \/\/       ldseta  x2, x11, [x8]\n+    __ ldsmina(Assembler::xword, r10, r15, r17);       \/\/       ldsmina x10, x15, [x17]\n+    __ ldsmaxa(Assembler::xword, r2, r10, r12);        \/\/       ldsmaxa x2, x10, [x12]\n+    __ ldumina(Assembler::xword, r12, r15, r13);       \/\/       ldumina x12, x15, [x13]\n+    __ ldumaxa(Assembler::xword, r2, r7, r20);         \/\/       ldumaxa x2, x7, [x20]\n@@ -804,9 +818,9 @@\n-    __ swpal(Assembler::xword, r11, r8, r10);          \/\/       swpal   x11, x8, [x10]\n-    __ ldaddal(Assembler::xword, r15, r17, r2);        \/\/       ldaddal x15, x17, [x2]\n-    __ ldbical(Assembler::xword, r10, r12, r12);       \/\/       ldclral x10, x12, [x12]\n-    __ ldeoral(Assembler::xword, r15, r13, r2);        \/\/       ldeoral x15, x13, [x2]\n-    __ ldorral(Assembler::xword, r7, r20, r26);        \/\/       ldsetal x7, x20, [x26]\n-    __ ldsminal(Assembler::xword, r16, r4, r2);        \/\/       ldsminal        x16, x4, [x2]\n-    __ ldsmaxal(Assembler::xword, r4, r12, r15);       \/\/       ldsmaxal        x4, x12, [x15]\n-    __ lduminal(Assembler::xword, r21, r16, r15);      \/\/       lduminal        x21, x16, [x15]\n-    __ ldumaxal(Assembler::xword, r11, r21, r23);      \/\/       ldumaxal        x11, x21, [x23]\n+    __ swpal(Assembler::xword, r26, r16, r4);          \/\/       swpal   x26, x16, [x4]\n+    __ ldaddal(Assembler::xword, r2, r4, r12);         \/\/       ldaddal x2, x4, [x12]\n+    __ ldbical(Assembler::xword, r16, r21, r16);       \/\/       ldclral x16, x21, [x16]\n+    __ ldeoral(Assembler::xword, r16, r11, r21);       \/\/       ldeoral x16, x11, [x21]\n+    __ ldorral(Assembler::xword, r23, r12, r26);       \/\/       ldsetal x23, x12, [x26]\n+    __ ldsminal(Assembler::xword, r23, r28, r14);      \/\/       ldsminal        x23, x28, [x14]\n+    __ ldsmaxal(Assembler::xword, r11, r24, r1);       \/\/       ldsmaxal        x11, x24, [x1]\n+    __ lduminal(Assembler::xword, r12, zr, r10);       \/\/       lduminal        x12, xzr, [x10]\n+    __ ldumaxal(Assembler::xword, r16, r7, r2);        \/\/       ldumaxal        x16, x7, [x2]\n@@ -815,9 +829,9 @@\n-    __ swpl(Assembler::xword, r12, r26, r23);          \/\/       swpl    x12, x26, [x23]\n-    __ ldaddl(Assembler::xword, r28, r14, r11);        \/\/       ldaddl  x28, x14, [x11]\n-    __ ldbicl(Assembler::xword, r24, r1, r12);         \/\/       ldclrl  x24, x1, [x12]\n-    __ ldeorl(Assembler::xword, zr, r10, r16);         \/\/       ldeorl  xzr, x10, [x16]\n-    __ ldorrl(Assembler::xword, r7, r2, r3);           \/\/       ldsetl  x7, x2, [x3]\n-    __ ldsminl(Assembler::xword, r13, r19, r17);       \/\/       ldsminl x13, x19, [x17]\n-    __ ldsmaxl(Assembler::xword, r16, r3, r1);         \/\/       ldsmaxl x16, x3, [x1]\n-    __ lduminl(Assembler::xword, r11, r30, r5);        \/\/       lduminl x11, x30, [x5]\n-    __ ldumaxl(Assembler::xword, r8, r15, r29);        \/\/       ldumaxl x8, x15, [x29]\n+    __ swpl(Assembler::xword, r3, r13, r19);           \/\/       swpl    x3, x13, [x19]\n+    __ ldaddl(Assembler::xword, r17, r16, r3);         \/\/       ldaddl  x17, x16, [x3]\n+    __ ldbicl(Assembler::xword, r1, r11, r30);         \/\/       ldclrl  x1, x11, [x30]\n+    __ ldeorl(Assembler::xword, r5, r8, r15);          \/\/       ldeorl  x5, x8, [x15]\n+    __ ldorrl(Assembler::xword, r29, r30, r0);         \/\/       ldsetl  x29, x30, [x0]\n+    __ ldsminl(Assembler::xword, r20, r7, r20);        \/\/       ldsminl x20, x7, [x20]\n+    __ ldsmaxl(Assembler::xword, r23, r28, r21);       \/\/       ldsmaxl x23, x28, [x21]\n+    __ lduminl(Assembler::xword, r27, r25, r5);        \/\/       lduminl x27, x25, [x5]\n+    __ ldumaxl(Assembler::xword, r1, r23, r16);        \/\/       ldumaxl x1, x23, [x16]\n@@ -826,9 +840,9 @@\n-    __ swp(Assembler::word, r30, r0, r20);             \/\/       swp     w30, w0, [x20]\n-    __ ldadd(Assembler::word, r7, r20, r23);           \/\/       ldadd   w7, w20, [x23]\n-    __ ldbic(Assembler::word, r28, r21, r27);          \/\/       ldclr   w28, w21, [x27]\n-    __ ldeor(Assembler::word, r25, r5, r1);            \/\/       ldeor   w25, w5, [x1]\n-    __ ldorr(Assembler::word, r23, r16, sp);           \/\/       ldset   w23, w16, [sp]\n-    __ ldsmin(Assembler::word, r5, r12, r9);           \/\/       ldsmin  w5, w12, [x9]\n-    __ ldsmax(Assembler::word, r28, r15, r29);         \/\/       ldsmax  w28, w15, [x29]\n-    __ ldumin(Assembler::word, r22, zr, r19);          \/\/       ldumin  w22, wzr, [x19]\n-    __ ldumax(Assembler::word, zr, r5, r14);           \/\/       ldumax  wzr, w5, [x14]\n+    __ swp(Assembler::word, zr, r5, r12);              \/\/       swp     wzr, w5, [x12]\n+    __ ldadd(Assembler::word, r9, r28, r15);           \/\/       ldadd   w9, w28, [x15]\n+    __ ldbic(Assembler::word, r29, r22, sp);           \/\/       ldclr   w29, w22, [sp]\n+    __ ldeor(Assembler::word, r19, zr, r5);            \/\/       ldeor   w19, wzr, [x5]\n+    __ ldorr(Assembler::word, r14, r16, sp);           \/\/       ldset   w14, w16, [sp]\n+    __ ldsmin(Assembler::word, r16, r27, r20);         \/\/       ldsmin  w16, w27, [x20]\n+    __ ldsmax(Assembler::word, r16, r12, r11);         \/\/       ldsmax  w16, w12, [x11]\n+    __ ldumin(Assembler::word, r9, r6, r30);           \/\/       ldumin  w9, w6, [x30]\n+    __ ldumax(Assembler::word, r17, r27, r28);         \/\/       ldumax  w17, w27, [x28]\n@@ -837,9 +851,9 @@\n-    __ swpa(Assembler::word, r16, zr, r15);            \/\/       swpa    w16, wzr, [x15]\n-    __ ldadda(Assembler::word, r27, r20, r16);         \/\/       ldadda  w27, w20, [x16]\n-    __ ldbica(Assembler::word, r12, r11, r9);          \/\/       ldclra  w12, w11, [x9]\n-    __ ldeora(Assembler::word, r6, r30, r17);          \/\/       ldeora  w6, w30, [x17]\n-    __ ldorra(Assembler::word, r27, r28, r30);         \/\/       ldseta  w27, w28, [x30]\n-    __ ldsmina(Assembler::word, r7, r10, r20);         \/\/       ldsmina w7, w10, [x20]\n-    __ ldsmaxa(Assembler::word, r10, r4, r24);         \/\/       ldsmaxa w10, w4, [x24]\n-    __ ldumina(Assembler::word, r17, r17, r22);        \/\/       ldumina w17, w17, [x22]\n-    __ ldumaxa(Assembler::word, r3, r29, r15);         \/\/       ldumaxa w3, w29, [x15]\n+    __ swpa(Assembler::word, r30, r7, r10);            \/\/       swpa    w30, w7, [x10]\n+    __ ldadda(Assembler::word, r20, r10, r4);          \/\/       ldadda  w20, w10, [x4]\n+    __ ldbica(Assembler::word, r24, r17, r17);         \/\/       ldclra  w24, w17, [x17]\n+    __ ldeora(Assembler::word, r22, r3, r29);          \/\/       ldeora  w22, w3, [x29]\n+    __ ldorra(Assembler::word, r15, r22, r19);         \/\/       ldseta  w15, w22, [x19]\n+    __ ldsmina(Assembler::word, r19, r22, r2);         \/\/       ldsmina w19, w22, [x2]\n+    __ ldsmaxa(Assembler::word, r15, r6, r12);         \/\/       ldsmaxa w15, w6, [x12]\n+    __ ldumina(Assembler::word, r16, r11, r13);        \/\/       ldumina w16, w11, [x13]\n+    __ ldumaxa(Assembler::word, r23, r1, r30);         \/\/       ldumaxa w23, w1, [x30]\n@@ -848,9 +862,9 @@\n-    __ swpal(Assembler::word, r22, r19, r19);          \/\/       swpal   w22, w19, [x19]\n-    __ ldaddal(Assembler::word, r22, r2, r15);         \/\/       ldaddal w22, w2, [x15]\n-    __ ldbical(Assembler::word, r6, r12, r16);         \/\/       ldclral w6, w12, [x16]\n-    __ ldeoral(Assembler::word, r11, r13, r23);        \/\/       ldeoral w11, w13, [x23]\n-    __ ldorral(Assembler::word, r1, r30, r19);         \/\/       ldsetal w1, w30, [x19]\n-    __ ldsminal(Assembler::word, r5, r17, r2);         \/\/       ldsminal        w5, w17, [x2]\n-    __ ldsmaxal(Assembler::word, r16, r22, r13);       \/\/       ldsmaxal        w16, w22, [x13]\n-    __ lduminal(Assembler::word, r10, r21, r29);       \/\/       lduminal        w10, w21, [x29]\n-    __ ldumaxal(Assembler::word, r27, r12, r27);       \/\/       ldumaxal        w27, w12, [x27]\n+    __ swpal(Assembler::word, r19, r5, r17);           \/\/       swpal   w19, w5, [x17]\n+    __ ldaddal(Assembler::word, r2, r16, r22);         \/\/       ldaddal w2, w16, [x22]\n+    __ ldbical(Assembler::word, r13, r10, r21);        \/\/       ldclral w13, w10, [x21]\n+    __ ldeoral(Assembler::word, r29, r27, r12);        \/\/       ldeoral w29, w27, [x12]\n+    __ ldorral(Assembler::word, r27, r3, r1);          \/\/       ldsetal w27, w3, [x1]\n+    __ ldsminal(Assembler::word, zr, r24, r19);        \/\/       ldsminal        wzr, w24, [x19]\n+    __ ldsmaxal(Assembler::word, r17, r9, r28);        \/\/       ldsmaxal        w17, w9, [x28]\n+    __ lduminal(Assembler::word, r27, r15, r7);        \/\/       lduminal        w27, w15, [x7]\n+    __ ldumaxal(Assembler::word, r21, r23, sp);        \/\/       ldumaxal        w21, w23, [sp]\n@@ -859,9 +873,9 @@\n-    __ swpl(Assembler::word, r3, r1, sp);              \/\/       swpl    w3, w1, [sp]\n-    __ ldaddl(Assembler::word, r24, r19, r17);         \/\/       ldaddl  w24, w19, [x17]\n-    __ ldbicl(Assembler::word, r9, r28, r27);          \/\/       ldclrl  w9, w28, [x27]\n-    __ ldeorl(Assembler::word, r15, r7, r21);          \/\/       ldeorl  w15, w7, [x21]\n-    __ ldorrl(Assembler::word, r23, zr, r25);          \/\/       ldsetl  w23, wzr, [x25]\n-    __ ldsminl(Assembler::word, r2, zr, r27);          \/\/       ldsminl w2, wzr, [x27]\n-    __ ldsmaxl(Assembler::word, r16, r10, r23);        \/\/       ldsmaxl w16, w10, [x23]\n-    __ lduminl(Assembler::word, r19, r3, r15);         \/\/       lduminl w19, w3, [x15]\n-    __ ldumaxl(Assembler::word, r0, r25, r26);         \/\/       ldumaxl w0, w25, [x26]\n+    __ swpl(Assembler::word, r25, r2, sp);             \/\/       swpl    w25, w2, [sp]\n+    __ ldaddl(Assembler::word, r27, r16, r10);         \/\/       ldaddl  w27, w16, [x10]\n+    __ ldbicl(Assembler::word, r23, r19, r3);          \/\/       ldclrl  w23, w19, [x3]\n+    __ ldeorl(Assembler::word, r16, r0, r25);          \/\/       ldeorl  w16, w0, [x25]\n+    __ ldorrl(Assembler::word, r26, r23, r2);          \/\/       ldsetl  w26, w23, [x2]\n+    __ ldsminl(Assembler::word, r16, r12, r4);         \/\/       ldsminl w16, w12, [x4]\n+    __ ldsmaxl(Assembler::word, r28, r30, r29);        \/\/       ldsmaxl w28, w30, [x29]\n+    __ lduminl(Assembler::word, r16, r27, r6);         \/\/       lduminl w16, w27, [x6]\n+    __ ldumaxl(Assembler::word, r9, r29, r15);         \/\/       ldumaxl w9, w29, [x15]\n@@ -870,4 +884,4 @@\n-    __ bcax(v22, __ T16B, v2, v17, v12);               \/\/       bcax            v22.16B, v2.16B, v17.16B, v12.16B\n-    __ eor3(v3, __ T16B, v27, v29, v28);               \/\/       eor3            v3.16B, v27.16B, v29.16B, v28.16B\n-    __ rax1(v16, __ T2D, v26, v6);                     \/\/       rax1            v16.2D, v26.2D, v6.2D\n-    __ xar(v9, __ T2D, v28, v17, 14);                  \/\/       xar             v9.2D, v28.2D, v17.2D, #14\n+    __ bcax(v7, __ T16B, v4, v7, v15);                 \/\/       bcax            v7.16B, v4.16B, v7.16B, v15.16B\n+    __ eor3(v9, __ T16B, v22, v8, v2);                 \/\/       eor3            v9.16B, v22.16B, v8.16B, v2.16B\n+    __ rax1(v27, __ T2D, v20, v30);                    \/\/       rax1            v27.2D, v20.2D, v30.2D\n+    __ xar(v5, __ T2D, v26, v0, 34);                   \/\/       xar             v5.2D, v26.2D, v0.2D, #34\n@@ -876,4 +890,4 @@\n-    __ sha512h(v4, __ T2D, v7, v15);                   \/\/       sha512h         q4, q7, v15.2D\n-    __ sha512h2(v9, __ T2D, v22, v8);                  \/\/       sha512h2                q9, q22, v8.2D\n-    __ sha512su0(v2, __ T2D, v27);                     \/\/       sha512su0               v2.2D, v27.2D\n-    __ sha512su1(v20, __ T2D, v30, v5);                \/\/       sha512su1               v20.2D, v30.2D, v5.2D\n+    __ sha512h(v14, __ T2D, v3, v25);                  \/\/       sha512h         q14, q3, v25.2D\n+    __ sha512h2(v8, __ T2D, v27, v21);                 \/\/       sha512h2                q8, q27, v21.2D\n+    __ sha512su0(v26, __ T2D, v26);                    \/\/       sha512su0               v26.2D, v26.2D\n+    __ sha512su1(v24, __ T2D, v22, v0);                \/\/       sha512su1               v24.2D, v22.2D, v0.2D\n@@ -882,39 +896,39 @@\n-    __ sve_add(z26, __ H, z0, z16);                    \/\/       add     z26.h, z0.h, z16.h\n-    __ sve_sub(z3, __ D, z25, z8);                     \/\/       sub     z3.d, z25.d, z8.d\n-    __ sve_fadd(z21, __ D, z26, z26);                  \/\/       fadd    z21.d, z26.d, z26.d\n-    __ sve_fmul(z22, __ S, z0, z4);                    \/\/       fmul    z22.s, z0.s, z4.s\n-    __ sve_fsub(z17, __ S, z0, z3);                    \/\/       fsub    z17.s, z0.s, z3.s\n-    __ sve_abs(z1, __ B, p2, z6);                      \/\/       abs     z1.b, p2\/m, z6.b\n-    __ sve_add(z9, __ S, p7, z7);                      \/\/       add     z9.s, p7\/m, z9.s, z7.s\n-    __ sve_asr(z22, __ H, p5, z5);                     \/\/       asr     z22.h, p5\/m, z22.h, z5.h\n-    __ sve_cnt(z8, __ B, p4, z30);                     \/\/       cnt     z8.b, p4\/m, z30.b\n-    __ sve_lsl(z17, __ D, p0, z11);                    \/\/       lsl     z17.d, p0\/m, z17.d, z11.d\n-    __ sve_lsr(z28, __ S, p0, z26);                    \/\/       lsr     z28.s, p0\/m, z28.s, z26.s\n-    __ sve_mul(z28, __ D, p3, z13);                    \/\/       mul     z28.d, p3\/m, z28.d, z13.d\n-    __ sve_neg(z16, __ B, p6, z5);                     \/\/       neg     z16.b, p6\/m, z5.b\n-    __ sve_not(z13, __ H, p2, z15);                    \/\/       not     z13.h, p2\/m, z15.h\n-    __ sve_smax(z26, __ B, p5, z11);                   \/\/       smax    z26.b, p5\/m, z26.b, z11.b\n-    __ sve_smin(z22, __ B, p4, z4);                    \/\/       smin    z22.b, p4\/m, z22.b, z4.b\n-    __ sve_sub(z19, __ H, p4, z17);                    \/\/       sub     z19.h, p4\/m, z19.h, z17.h\n-    __ sve_fabs(z14, __ D, p3, z2);                    \/\/       fabs    z14.d, p3\/m, z2.d\n-    __ sve_fadd(z3, __ S, p5, z23);                    \/\/       fadd    z3.s, p5\/m, z3.s, z23.s\n-    __ sve_fdiv(z6, __ S, p1, z17);                    \/\/       fdiv    z6.s, p1\/m, z6.s, z17.s\n-    __ sve_fmax(z27, __ S, p4, z16);                   \/\/       fmax    z27.s, p4\/m, z27.s, z16.s\n-    __ sve_fmin(z2, __ S, p7, z3);                     \/\/       fmin    z2.s, p7\/m, z2.s, z3.s\n-    __ sve_fmul(z6, __ S, p4, z19);                    \/\/       fmul    z6.s, p4\/m, z6.s, z19.s\n-    __ sve_fneg(z12, __ D, p5, z8);                    \/\/       fneg    z12.d, p5\/m, z8.d\n-    __ sve_frintm(z19, __ S, p4, z0);                  \/\/       frintm  z19.s, p4\/m, z0.s\n-    __ sve_frintn(z23, __ D, p1, z19);                 \/\/       frintn  z23.d, p1\/m, z19.d\n-    __ sve_frintp(z13, __ S, p4, z6);                  \/\/       frintp  z13.s, p4\/m, z6.s\n-    __ sve_fsqrt(z7, __ D, p3, z17);                   \/\/       fsqrt   z7.d, p3\/m, z17.d\n-    __ sve_fsub(z8, __ D, p2, z22);                    \/\/       fsub    z8.d, p2\/m, z8.d, z22.d\n-    __ sve_fmla(z22, __ S, p7, z2, z3);                \/\/       fmla    z22.s, p7\/m, z2.s, z3.s\n-    __ sve_fmls(z17, __ D, p5, z7, z4);                \/\/       fmls    z17.d, p5\/m, z7.d, z4.d\n-    __ sve_fnmla(z7, __ D, p0, z8, z16);               \/\/       fnmla   z7.d, p0\/m, z8.d, z16.d\n-    __ sve_fnmls(z22, __ D, p1, z15, z9);              \/\/       fnmls   z22.d, p1\/m, z15.d, z9.d\n-    __ sve_mla(z11, __ S, p6, z5, z30);                \/\/       mla     z11.s, p6\/m, z5.s, z30.s\n-    __ sve_mls(z13, __ H, p5, z11, z1);                \/\/       mls     z13.h, p5\/m, z11.h, z1.h\n-    __ sve_and(z8, z20, z16);                          \/\/       and     z8.d, z20.d, z16.d\n-    __ sve_eor(z15, z4, z4);                           \/\/       eor     z15.d, z4.d, z4.d\n-    __ sve_orr(z8, z6, z29);                           \/\/       orr     z8.d, z6.d, z29.d\n-    __ sve_bic(z28, z16, z29);                         \/\/       bic     z28.d, z16.d, z29.d\n+    __ sve_add(z4, __ B, z6, z17);                     \/\/       add     z4.b, z6.b, z17.b\n+    __ sve_sub(z3, __ H, z15, z1);                     \/\/       sub     z3.h, z15.h, z1.h\n+    __ sve_fadd(z6, __ D, z5, z9);                     \/\/       fadd    z6.d, z5.d, z9.d\n+    __ sve_fmul(z7, __ D, z20, z22);                   \/\/       fmul    z7.d, z20.d, z22.d\n+    __ sve_fsub(z5, __ D, z10, z8);                    \/\/       fsub    z5.d, z10.d, z8.d\n+    __ sve_abs(z30, __ B, p1, z17);                    \/\/       abs     z30.b, p1\/m, z17.b\n+    __ sve_add(z11, __ B, p7, z28);                    \/\/       add     z11.b, p7\/m, z11.b, z28.b\n+    __ sve_asr(z26, __ H, p5, z28);                    \/\/       asr     z26.h, p5\/m, z26.h, z28.h\n+    __ sve_cnt(z13, __ D, p7, z16);                    \/\/       cnt     z13.d, p7\/m, z16.d\n+    __ sve_lsl(z5, __ H, p0, z13);                     \/\/       lsl     z5.h, p0\/m, z5.h, z13.h\n+    __ sve_lsr(z15, __ S, p2, z26);                    \/\/       lsr     z15.s, p2\/m, z15.s, z26.s\n+    __ sve_mul(z11, __ S, p1, z22);                    \/\/       mul     z11.s, p1\/m, z11.s, z22.s\n+    __ sve_neg(z4, __ S, p0, z19);                     \/\/       neg     z4.s, p0\/m, z19.s\n+    __ sve_not(z17, __ H, p3, z14);                    \/\/       not     z17.h, p3\/m, z14.h\n+    __ sve_smax(z2, __ S, p4, z3);                     \/\/       smax    z2.s, p4\/m, z2.s, z3.s\n+    __ sve_smin(z23, __ B, p1, z6);                    \/\/       smin    z23.b, p1\/m, z23.b, z6.b\n+    __ sve_sub(z17, __ S, p3, z27);                    \/\/       sub     z17.s, p3\/m, z17.s, z27.s\n+    __ sve_fabs(z16, __ D, p1, z2);                    \/\/       fabs    z16.d, p1\/m, z2.d\n+    __ sve_fadd(z3, __ D, p1, z6);                     \/\/       fadd    z3.d, p1\/m, z3.d, z6.d\n+    __ sve_fdiv(z19, __ D, p3, z12);                   \/\/       fdiv    z19.d, p3\/m, z19.d, z12.d\n+    __ sve_fmax(z8, __ D, p6, z19);                    \/\/       fmax    z8.d, p6\/m, z8.d, z19.d\n+    __ sve_fmin(z0, __ S, p2, z23);                    \/\/       fmin    z0.s, p2\/m, z0.s, z23.s\n+    __ sve_fmul(z19, __ D, p7, z13);                   \/\/       fmul    z19.d, p7\/m, z19.d, z13.d\n+    __ sve_fneg(z6, __ S, p0, z7);                     \/\/       fneg    z6.s, p0\/m, z7.s\n+    __ sve_frintm(z17, __ S, p6, z8);                  \/\/       frintm  z17.s, p6\/m, z8.s\n+    __ sve_frintn(z22, __ D, p5, z22);                 \/\/       frintn  z22.d, p5\/m, z22.d\n+    __ sve_frintp(z2, __ D, p0, z15);                  \/\/       frintp  z2.d, p0\/m, z15.d\n+    __ sve_fsqrt(z20, __ D, p1, z4);                   \/\/       fsqrt   z20.d, p1\/m, z4.d\n+    __ sve_fsub(z7, __ D, p0, z8);                     \/\/       fsub    z7.d, p0\/m, z7.d, z8.d\n+    __ sve_fmla(z19, __ S, p5, z4, z15);               \/\/       fmla    z19.s, p5\/m, z4.s, z15.s\n+    __ sve_fmls(z22, __ D, p2, z25, z5);               \/\/       fmls    z22.d, p2\/m, z25.d, z5.d\n+    __ sve_fnmla(z16, __ S, p3, z22, z11);             \/\/       fnmla   z16.s, p3\/m, z22.s, z11.s\n+    __ sve_fnmls(z13, __ D, p2, z20, z16);             \/\/       fnmls   z13.d, p2\/m, z20.d, z16.d\n+    __ sve_mla(z15, __ H, p1, z4, z17);                \/\/       mla     z15.h, p1\/m, z4.h, z17.h\n+    __ sve_mls(z6, __ S, p7, z4, z28);                 \/\/       mls     z6.s, p7\/m, z4.s, z28.s\n+    __ sve_and(z29, z26, z9);                          \/\/       and     z29.d, z26.d, z9.d\n+    __ sve_eor(z2, z11, z28);                          \/\/       eor     z2.d, z11.d, z28.d\n+    __ sve_orr(z7, z1, z26);                           \/\/       orr     z7.d, z1.d, z26.d\n+    __ sve_bic(z17, z14, z8);                          \/\/       bic     z17.d, z14.d, z8.d\n@@ -923,9 +937,9 @@\n-    __ sve_andv(v9, __ H, p3, z2);                     \/\/       andv h9, p3, z2.h\n-    __ sve_orv(v28, __ B, p0, z7);                     \/\/       orv b28, p0, z7.b\n-    __ sve_eorv(v26, __ H, p5, z17);                   \/\/       eorv h26, p5, z17.h\n-    __ sve_smaxv(v8, __ D, p4, z21);                   \/\/       smaxv d8, p4, z21.d\n-    __ sve_sminv(v5, __ S, p5, z21);                   \/\/       sminv s5, p5, z21.s\n-    __ sve_fminv(v22, __ D, p4, z29);                  \/\/       fminv d22, p4, z29.d\n-    __ sve_fmaxv(v19, __ D, p0, z4);                   \/\/       fmaxv d19, p0, z4.d\n-    __ sve_fadda(v23, __ S, p1, z19);                  \/\/       fadda s23, p1, s23, z19.s\n-    __ sve_uaddv(v23, __ B, p6, z19);                  \/\/       uaddv d23, p6, z19.b\n+    __ sve_andv(v21, __ S, p6, z5);                    \/\/       andv s21, p6, z5.s\n+    __ sve_orv(v21, __ S, p4, z22);                    \/\/       orv s21, p4, z22.s\n+    __ sve_eorv(v29, __ B, p5, z19);                   \/\/       eorv b29, p5, z19.b\n+    __ sve_smaxv(v4, __ B, p4, z23);                   \/\/       smaxv b4, p4, z23.b\n+    __ sve_sminv(v19, __ D, p1, z23);                  \/\/       sminv d19, p1, z23.d\n+    __ sve_fminv(v19, __ S, p0, z8);                   \/\/       fminv s19, p0, z8.s\n+    __ sve_fmaxv(v14, __ D, p6, z17);                  \/\/       fmaxv d14, p6, z17.d\n+    __ sve_fadda(v21, __ S, p1, z30);                  \/\/       fadda s21, p1, s21, z30.s\n+    __ sve_uaddv(v10, __ B, p5, z12);                  \/\/       uaddv d10, p5, z12.b\n@@ -950,7 +964,7 @@\n-    0x14000000,     0x17ffffd7,     0x140002ed,     0x94000000,\n-    0x97ffffd4,     0x940002ea,     0x3400000a,     0x34fffa2a,\n-    0x34005cea,     0x35000008,     0x35fff9c8,     0x35005c88,\n-    0xb400000b,     0xb4fff96b,     0xb4005c2b,     0xb500001d,\n-    0xb5fff91d,     0xb5005bdd,     0x10000013,     0x10fff8b3,\n-    0x10005b73,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36305af6,     0x3758000c,     0x375ff7cc,     0x37585a8c,\n+    0x14000000,     0x17ffffd7,     0x140002fb,     0x94000000,\n+    0x97ffffd4,     0x940002f8,     0x3400000a,     0x34fffa2a,\n+    0x34005eaa,     0x35000008,     0x35fff9c8,     0x35005e48,\n+    0xb400000b,     0xb4fff96b,     0xb4005deb,     0xb500001d,\n+    0xb5fff91d,     0xb5005d9d,     0x10000013,     0x10fff8b3,\n+    0x10005d33,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36305cb6,     0x3758000c,     0x375ff7cc,     0x37585c4c,\n@@ -961,13 +975,13 @@\n-    0x54005860,     0x54000001,     0x54fff541,     0x54005801,\n-    0x54000002,     0x54fff4e2,     0x540057a2,     0x54000002,\n-    0x54fff482,     0x54005742,     0x54000003,     0x54fff423,\n-    0x540056e3,     0x54000003,     0x54fff3c3,     0x54005683,\n-    0x54000004,     0x54fff364,     0x54005624,     0x54000005,\n-    0x54fff305,     0x540055c5,     0x54000006,     0x54fff2a6,\n-    0x54005566,     0x54000007,     0x54fff247,     0x54005507,\n-    0x54000008,     0x54fff1e8,     0x540054a8,     0x54000009,\n-    0x54fff189,     0x54005449,     0x5400000a,     0x54fff12a,\n-    0x540053ea,     0x5400000b,     0x54fff0cb,     0x5400538b,\n-    0x5400000c,     0x54fff06c,     0x5400532c,     0x5400000d,\n-    0x54fff00d,     0x540052cd,     0x5400000e,     0x54ffefae,\n-    0x5400526e,     0x5400000f,     0x54ffef4f,     0x5400520f,\n+    0x54005a20,     0x54000001,     0x54fff541,     0x540059c1,\n+    0x54000002,     0x54fff4e2,     0x54005962,     0x54000002,\n+    0x54fff482,     0x54005902,     0x54000003,     0x54fff423,\n+    0x540058a3,     0x54000003,     0x54fff3c3,     0x54005843,\n+    0x54000004,     0x54fff364,     0x540057e4,     0x54000005,\n+    0x54fff305,     0x54005785,     0x54000006,     0x54fff2a6,\n+    0x54005726,     0x54000007,     0x54fff247,     0x540056c7,\n+    0x54000008,     0x54fff1e8,     0x54005668,     0x54000009,\n+    0x54fff189,     0x54005609,     0x5400000a,     0x54fff12a,\n+    0x540055aa,     0x5400000b,     0x54fff0cb,     0x5400554b,\n+    0x5400000c,     0x54fff06c,     0x540054ec,     0x5400000d,\n+    0x54fff00d,     0x5400548d,     0x5400000e,     0x54ffefae,\n+    0x5400542e,     0x5400000f,     0x54ffef4f,     0x540053cf,\n@@ -1005,1 +1019,1 @@\n-    0xbd1b1869,     0x5800425b,     0x1800000b,     0xf8945060,\n+    0xbd1b1869,     0x5800441b,     0x1800000b,     0xf8945060,\n@@ -1080,58 +1094,62 @@\n-    0x0eb93717,     0x4ebc377a,     0x4ef93717,     0x2eb0e5ee,\n-    0x6eb7e6d5,     0x6ee5e483,     0x0e393f17,     0x4e2a3d28,\n-    0x0e7a3f38,     0x4e753e93,     0x0eb13e0f,     0x4eb23e30,\n-    0x4ee43c62,     0x2e23e441,     0x6e22e420,     0x6e7ae738,\n-    0xba5fd3e3,     0x3a5f03e5,     0xfa411be4,     0x7a42cbe2,\n-    0x93df03ff,     0xc820ffff,     0x8822fc7f,     0xc8247cbf,\n-    0x88267fff,     0x4e010fe0,     0x4e081fe1,     0x4e0c1fe1,\n-    0x4e0a1fe1,     0x4e071fe1,     0x4e042c20,     0x4e062c20,\n-    0x4e052c20,     0x4e083c20,     0x0e0c3c20,     0x0e0a3c20,\n-    0x0e073c20,     0x4cc0ac3f,     0x05a08020,     0x04b0e3e0,\n-    0x0470e7e1,     0x042f9c20,     0x043f9c35,     0x047f9c20,\n-    0x04ff9c20,     0x04299420,     0x04319160,     0x0461943e,\n-    0x04a19020,     0x042053ff,     0x047f5401,     0x25208028,\n-    0x2538cfe0,     0x2578d001,     0x25b8efe2,     0x25f8f007,\n-    0xa400a3e0,     0xa4a8a7ea,     0xa547a814,     0xa4084ffe,\n-    0xa55c53e0,     0xa5e1540b,     0xe400fbf6,     0xe408ffff,\n-    0xe547e400,     0xe4014be0,     0xe4a84fe0,     0xe5f15000,\n-    0x858043e0,     0x85a043ff,     0xe59f5d08,     0x1e601000,\n-    0x1e603000,     0x1e621000,     0x1e623000,     0x1e641000,\n-    0x1e643000,     0x1e661000,     0x1e663000,     0x1e681000,\n-    0x1e683000,     0x1e6a1000,     0x1e6a3000,     0x1e6c1000,\n-    0x1e6c3000,     0x1e6e1000,     0x1e6e3000,     0x1e701000,\n-    0x1e703000,     0x1e721000,     0x1e723000,     0x1e741000,\n-    0x1e743000,     0x1e761000,     0x1e763000,     0x1e781000,\n-    0x1e783000,     0x1e7a1000,     0x1e7a3000,     0x1e7c1000,\n-    0x1e7c3000,     0x1e7e1000,     0x1e7e3000,     0xf8248183,\n-    0xf83f015c,     0xf83a1182,     0xf830203f,     0xf82d301d,\n-    0xf833522c,     0xf836438d,     0xf83e703f,     0xf83a609c,\n-    0xf8be80c4,     0xf8be01fa,     0xf8a91188,     0xf8a02034,\n-    0xf8b83002,     0xf8a95358,     0xf8b0407e,     0xf8aa7157,\n-    0xf8a46050,     0xf8eb8148,     0xf8ef0051,     0xf8ea118c,\n-    0xf8ef204d,     0xf8e73354,     0xf8f05044,     0xf8e441ec,\n-    0xf8f571f0,     0xf8eb62f5,     0xf86c82fa,     0xf87c016e,\n-    0xf8781181,     0xf87f220a,     0xf8673062,     0xf86d5233,\n-    0xf8704023,     0xf86b70be,     0xf86863af,     0xb83e8280,\n-    0xb82702f4,     0xb83c1375,     0xb8392025,     0xb83733f0,\n-    0xb825512c,     0xb83c43af,     0xb836727f,     0xb83f61c5,\n-    0xb8b081ff,     0xb8bb0214,     0xb8ac112b,     0xb8a6223e,\n-    0xb8bb33dc,     0xb8a7528a,     0xb8aa4304,     0xb8b172d1,\n-    0xb8a361fd,     0xb8f68273,     0xb8f601e2,     0xb8e6120c,\n-    0xb8eb22ed,     0xb8e1327e,     0xb8e55051,     0xb8f041b6,\n-    0xb8ea73b5,     0xb8fb636c,     0xb86383e1,     0xb8780233,\n-    0xb869137c,     0xb86f22a7,     0xb877333f,     0xb862537f,\n-    0xb87042ea,     0xb87371e3,     0xb8606359,     0xce313056,\n-    0xce1d7363,     0xce668f50,     0xce913b89,     0xce6f80e4,\n-    0xce6886c9,     0xcec08362,     0xce658bd4,     0x0470001a,\n-    0x04e80723,     0x65da0355,     0x65840816,     0x65830411,\n-    0x0416a8c1,     0x04801ce9,     0x045094b6,     0x041ab3c8,\n-    0x04d38171,     0x0491835c,     0x04d00dbc,     0x0417b8b0,\n-    0x045ea9ed,     0x0408157a,     0x040a1096,     0x04411233,\n-    0x04dcac4e,     0x658096e3,     0x658d8626,     0x6586921b,\n-    0x65879c62,     0x65829266,     0x04ddb50c,     0x6582b013,\n-    0x65c0a677,     0x6581b0cd,     0x65cdae27,     0x65c18ac8,\n-    0x65a31c56,     0x65e434f1,     0x65f04107,     0x65e965f6,\n-    0x049e58ab,     0x0441756d,     0x04303288,     0x04a4308f,\n-    0x047d30c8,     0x04fd321c,     0x045a2c49,     0x041820fc,\n-    0x0459363a,     0x04c832a8,     0x048a36a5,     0x65c733b6,\n-    0x65c62093,     0x65982677,     0x04013a77,\n+    0x0eb93717,     0x4ebc377a,     0x4ef93717,     0x2e3035ee,\n+    0x6e3736d5,     0x2e653483,     0x6e793717,     0x2eaa3528,\n+    0x6eba3738,     0x6ef53693,     0x2e313e0f,     0x6e323e30,\n+    0x2e643c62,     0x6e633c41,     0x2ea23c20,     0x6eba3f38,\n+    0x6ee63ca4,     0x2ea5e483,     0x6eade58b,     0x6ee0e7fe,\n+    0x0e3d3f9b,     0x4e2b3d49,     0x0e7b3f59,     0x4e643c62,\n+    0x0eae3dac,     0x4eb33e51,     0x4ee03ffe,     0x2e23e441,\n+    0x6e2ee5ac,     0x6e7ee7bc,     0xba5fd3e3,     0x3a5f03e5,\n+    0xfa411be4,     0x7a42cbe2,     0x93df03ff,     0xc820ffff,\n+    0x8822fc7f,     0xc8247cbf,     0x88267fff,     0x4e010fe0,\n+    0x4e081fe1,     0x4e0c1fe1,     0x4e0a1fe1,     0x4e071fe1,\n+    0x4e042c20,     0x4e062c20,     0x4e052c20,     0x4e083c20,\n+    0x0e0c3c20,     0x0e0a3c20,     0x0e073c20,     0x4cc0ac3f,\n+    0x05a08020,     0x04b0e3e0,     0x0470e7e1,     0x042f9c20,\n+    0x043f9c35,     0x047f9c20,     0x04ff9c20,     0x04299420,\n+    0x04319160,     0x0461943e,     0x04a19020,     0x042053ff,\n+    0x047f5401,     0x25208028,     0x2538cfe0,     0x2578d001,\n+    0x25b8efe2,     0x25f8f007,     0xa400a3e0,     0xa4a8a7ea,\n+    0xa547a814,     0xa4084ffe,     0xa55c53e0,     0xa5e1540b,\n+    0xe400fbf6,     0xe408ffff,     0xe547e400,     0xe4014be0,\n+    0xe4a84fe0,     0xe5f15000,     0x858043e0,     0x85a043ff,\n+    0xe59f5d08,     0x1e601000,     0x1e603000,     0x1e621000,\n+    0x1e623000,     0x1e641000,     0x1e643000,     0x1e661000,\n+    0x1e663000,     0x1e681000,     0x1e683000,     0x1e6a1000,\n+    0x1e6a3000,     0x1e6c1000,     0x1e6c3000,     0x1e6e1000,\n+    0x1e6e3000,     0x1e701000,     0x1e703000,     0x1e721000,\n+    0x1e723000,     0x1e741000,     0x1e743000,     0x1e761000,\n+    0x1e763000,     0x1e781000,     0x1e783000,     0x1e7a1000,\n+    0x1e7a3000,     0x1e7c1000,     0x1e7c3000,     0x1e7e1000,\n+    0x1e7e3000,     0xf8208193,     0xf83101b6,     0xf83c13fe,\n+    0xf821239a,     0xf824309e,     0xf826535e,     0xf8304109,\n+    0xf82c7280,     0xf8216058,     0xf8a08309,     0xf8ba03d0,\n+    0xf8a312ea,     0xf8aa21e4,     0xf8a2310b,     0xf8aa522f,\n+    0xf8a2418a,     0xf8ac71af,     0xf8a26287,     0xf8fa8090,\n+    0xf8e20184,     0xf8f01215,     0xf8f022ab,     0xf8f7334c,\n+    0xf8f751dc,     0xf8eb4038,     0xf8ec715f,     0xf8f06047,\n+    0xf863826d,     0xf8710070,     0xf86113cb,     0xf86521e8,\n+    0xf87d301e,     0xf8745287,     0xf87742bc,     0xf87b70b9,\n+    0xf8616217,     0xb83f8185,     0xb82901fc,     0xb83d13f6,\n+    0xb83320bf,     0xb82e33f0,     0xb830529b,     0xb830416c,\n+    0xb82973c6,     0xb831639b,     0xb8be8147,     0xb8b4008a,\n+    0xb8b81231,     0xb8b623a3,     0xb8af3276,     0xb8b35056,\n+    0xb8af4186,     0xb8b071ab,     0xb8b763c1,     0xb8f38225,\n+    0xb8e202d0,     0xb8ed12aa,     0xb8fd219b,     0xb8fb3023,\n+    0xb8ff5278,     0xb8f14389,     0xb8fb70ef,     0xb8f563f7,\n+    0xb87983e2,     0xb87b0150,     0xb8771073,     0xb8702320,\n+    0xb87a3057,     0xb870508c,     0xb87c43be,     0xb87070db,\n+    0xb86961fd,     0xce273c87,     0xce080ac9,     0xce7e8e9b,\n+    0xce808b45,     0xce79806e,     0xce758768,     0xcec0835a,\n+    0xce608ad8,     0x043100c4,     0x046105e3,     0x65c900a6,\n+    0x65d60a87,     0x65c80545,     0x0416a63e,     0x04001f8b,\n+    0x0450979a,     0x04dabe0d,     0x045381a5,     0x04918b4f,\n+    0x049006cb,     0x0497a264,     0x045eadd1,     0x04881062,\n+    0x040a04d7,     0x04810f71,     0x04dca450,     0x65c084c3,\n+    0x65cd8d93,     0x65c69a68,     0x65878ae0,     0x65c29db3,\n+    0x049da0e6,     0x6582b911,     0x65c0b6d6,     0x65c1a1e2,\n+    0x65cda494,     0x65c18107,     0x65af1493,     0x65e52b36,\n+    0x65ab4ed0,     0x65f06a8d,     0x0451448f,     0x049c7c86,\n+    0x0429335d,     0x04bc3162,     0x047a3027,     0x04e831d1,\n+    0x049a38b5,     0x049832d5,     0x0419367d,     0x040832e4,\n+    0x04ca26f3,     0x65872113,     0x65c63a2e,     0x659827d5,\n+    0x0401358a,\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":237,"deletions":219,"binary":false,"changes":456,"status":"modified"}]}