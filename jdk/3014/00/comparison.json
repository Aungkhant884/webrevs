{"files":[{"patch":"@@ -69,3 +69,2 @@\n-  static inline void    put_obj(oop  from, intptr_t *to)           { *(oop *)(to +   0  ) =  from; }\n-  static inline void    put_obj(oop  from, intptr_t *to, int& pos) { *(oop *)(to + pos++) =  from; }\n-  static inline void    put_obj(oop *from, intptr_t *to, int& pos) { *(oop *)(to + pos++) = *from; }\n+  static inline void    put_obj(const Handle& from_handle, intptr_t *to, int& pos) { *(to + pos++) =  (intptr_t)from_handle.raw_value(); }\n+  static inline void    put_obj(jobject       from_handle, intptr_t *to, int& pos) { *(to + pos++) =  (intptr_t)from_handle; }\n","filename":"src\/hotspot\/cpu\/aarch64\/jniTypes_aarch64.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -65,3 +65,2 @@\n-  static inline void put_obj(oop  from, intptr_t *to)           { *(oop *)(to +   0  ) =  from; }\n-  static inline void put_obj(oop  from, intptr_t *to, int& pos) { *(oop *)(to + pos++) =  from; }\n-  static inline void put_obj(oop *from, intptr_t *to, int& pos) { *(oop *)(to + pos++) = *from; }\n+  static inline void put_obj(const Handle& from_handle, intptr_t *to, int& pos) { *(to + pos++) =  (intptr_t)from_handle.raw_value(); }\n+  static inline void put_obj(jobject       from_handle, intptr_t *to, int& pos) { *(to + pos++) =  (intptr_t)from_handle; }\n","filename":"src\/hotspot\/cpu\/arm\/jniTypes_arm.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -75,3 +75,2 @@\n-  static inline void put_obj(oop  from, intptr_t *to)           { *(oop *)(to +   0  ) =  from; }\n-  static inline void put_obj(oop  from, intptr_t *to, int& pos) { *(oop *)(to + pos++) =  from; }\n-  static inline void put_obj(oop *from, intptr_t *to, int& pos) { *(oop *)(to + pos++) = *from; }\n+  static inline void put_obj(const Handle& from_handle, intptr_t *to, int& pos) { *(to + pos++) =  (intptr_t)from_handle.raw_value(); }\n+  static inline void put_obj(jobject       from_handle, intptr_t *to, int& pos) { *(to + pos++) =  (intptr_t)from_handle; }\n","filename":"src\/hotspot\/cpu\/ppc\/jniTypes_ppc.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -76,2 +76,2 @@\n-  static inline void put_obj(oop  from, intptr_t *to) {\n-    *(oop*) to = from;\n+  static inline void put_obj(const Handle& from_handle, intptr_t *to, int& pos) {\n+    *(to + pos++) = (intptr_t)from_handle.raw_value();\n@@ -80,6 +80,2 @@\n-  static inline void put_obj(oop  from, intptr_t *to, int& pos) {\n-    *(oop*) (to + pos++) = from;\n-  }\n-\n-  static inline void put_obj(oop *from, intptr_t *to, int& pos) {\n-    *(oop*) (to + pos++) = *from;\n+  static inline void put_obj(jobject from_handle, intptr_t *to, int& pos) {\n+    *(to + pos++) =  (intptr_t)from_handle;\n","filename":"src\/hotspot\/cpu\/s390\/jniTypes_s390.hpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -85,3 +85,2 @@\n-  static inline void    put_obj(oop  from, intptr_t *to)           { *(oop *)(to +   0  ) =  from; }\n-  static inline void    put_obj(oop  from, intptr_t *to, int& pos) { *(oop *)(to + pos++) =  from; }\n-  static inline void    put_obj(oop *from, intptr_t *to, int& pos) { *(oop *)(to + pos++) = *from; }\n+  static inline void    put_obj(const Handle& from_handle, intptr_t *to, int& pos) { *(to + pos++) =  (intptr_t)from_handle.raw_value(); }\n+  static inline void    put_obj(jobject       from_handle, intptr_t *to, int& pos) { *(to + pos++) =  (intptr_t)from_handle; }\n","filename":"src\/hotspot\/cpu\/x86\/jniTypes_x86.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -72,3 +72,2 @@\n-  static inline void    put_obj(oop  from, intptr_t *to)                { *(oop *)(to +   0  ) =  from; }\n-  static inline void    put_obj(oop  from, intptr_t *to, int& pos)      { *(oop *)(to + pos++) =  from; }\n-  static inline void    put_obj(oop *from, intptr_t *to, int& pos)      { *(oop *)(to + pos++) = *from; }\n+  static inline void    put_obj(const Handle& from_handle, intptr_t *to, int& pos) { *(to + pos++) =  (intptr_t)from_handle.raw_value(); }\n+  static inline void    put_obj(jobject       from_handle, intptr_t *to, int& pos) { *(to + pos++) =  (intptr_t)from_handle; }\n","filename":"src\/hotspot\/cpu\/zero\/jniTypes_zero.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-  oop* raw_value()                               { return _handle; }\n+  oop* raw_value() const                         { return _handle; }\n","filename":"src\/hotspot\/share\/runtime\/handles.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -106,17 +106,0 @@\n-  \/\/ Helper for push_oop and the like.  The value argument is a\n-  \/\/ \"handle\" that refers to an oop.  We record the address of the\n-  \/\/ handle rather than the designated oop.  The handle is later\n-  \/\/ resolved to the oop by parameters().  This delays the exposure of\n-  \/\/ naked oops until it is GC-safe.\n-  template<typename T>\n-  inline int push_oop_impl(T handle, int size) {\n-    \/\/ JNITypes::put_obj expects an oop value, so we play fast and\n-    \/\/ loose with the type system.  The cast from handle type to oop\n-    \/\/ *must* use a C-style cast.  In a product build it performs a\n-    \/\/ reinterpret_cast. In a debug build (more accurately, in a\n-    \/\/ CHECK_UNHANDLED_OOPS build) it performs a static_cast, invoking\n-    \/\/ the debug-only oop class's conversion from void* constructor.\n-    JNITypes::put_obj((oop)handle, _value, size); \/\/ Updates size.\n-    return size;                \/\/ Return the updated size.\n-  }\n-\n@@ -169,1 +152,1 @@\n-    _size = push_oop_impl(h.raw_value(), _size);\n+    JNITypes::put_obj(h, _value, _size);\n@@ -174,1 +157,1 @@\n-    _size = push_oop_impl(h, _size);\n+    JNITypes::put_obj(h, _value, _size);\n@@ -215,1 +198,3 @@\n-    push_oop_impl(h.raw_value(), 0);\n+\n+    int size = 0;\n+    JNITypes::put_obj(h, _value, size);\n","filename":"src\/hotspot\/share\/runtime\/javaCalls.hpp","additions":5,"deletions":20,"binary":false,"changes":25,"status":"modified"}]}