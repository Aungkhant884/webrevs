{"files":[{"patch":"@@ -82,1 +82,1 @@\n-             \"Use CPU_ALLOC code path in os::active_processor_count \")\n+          \"Use CPU_ALLOC code path in os::active_processor_count \")\n","filename":"src\/hotspot\/os\/linux\/globals_linux.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4765,1 +4765,10 @@\n-  assert(id >= 0 && id < _processor_count, \"Invalid processor id\");\n+\n+  #ifndef PRODUCT\n+  if (LimitedCPUsDebugging && id >= _processor_count) {\n+    \/\/ Some debuggers limit the processor count without limiting\n+    \/\/ the returned processor ids. Fake the processor id.\n+    return 0;\n+  }\n+#endif\n+\n+  assert(id >= 0 && id < _processor_count, \"Invalid processor id [%d]\", id);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -4102,0 +4102,11 @@\n+static void override_for_debugger() {\n+  \/\/ Debugging with limited number of CPUs\n+  if (LimitedCPUsDebugging) {\n+    FLAG_SET_ERGO_IF_DEFAULT(UseNUMA, false);\n+    FLAG_SET_ERGO_IF_DEFAULT(ConcGCThreads, 1);\n+    FLAG_SET_ERGO_IF_DEFAULT(ParallelGCThreads, 1);\n+    FLAG_SET_ERGO_IF_DEFAULT(CICompilerCount, 2);\n+  }\n+}\n+\n+\n@@ -4110,0 +4121,2 @@\n+  override_for_debugger();\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -234,0 +234,3 @@\n+  notproduct(bool, LimitedCPUsDebugging, false    ,                         \\\n+          \"For debugging with limited CPUs\")                                \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}