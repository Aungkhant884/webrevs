{"files":[{"patch":"@@ -101,0 +101,1 @@\n+  LOG_TAG(map) \\\n","filename":"src\/hotspot\/share\/logging\/logTag.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,2 @@\n-#include \"logging\/logMessage.hpp\"\n+#include \"logging\/logStream.hpp\"\n+#include \"memory\/allStatic.hpp\"\n@@ -34,0 +35,1 @@\n+#include \"memory\/memRegion.hpp\"\n@@ -137,1 +139,1 @@\n-ArchiveBuilder::ArchiveBuilder(DumpRegion* rw_region, DumpRegion* ro_region)\n+ArchiveBuilder::ArchiveBuilder(DumpRegion* mc_region, DumpRegion* rw_region, DumpRegion* ro_region)\n@@ -151,0 +153,1 @@\n+  _mc_region = mc_region;\n@@ -297,1 +300,1 @@\n-      it->push(&_symbols->at(i));\n+      it->push(_symbols->adr_at(i));\n@@ -303,1 +306,1 @@\n-    it->push(&_klasses->at(i));\n+    it->push(_klasses->adr_at(i));\n@@ -595,0 +598,194 @@\n+\/\/ Write detailed info to a mapfile to analyze contents of the archive.\n+\/\/ static dump:\n+\/\/   java -Xshare:dump -Xlog:cds+map=trace:file=cds.map:none:filesize=0\n+\/\/ dynamic dump:\n+\/\/   java -cp MyApp.jar -XX:ArchiveClassesAtExit=MyApp.jsa \\\n+\/\/        -Xlog:cds+map=trace:file=cds.map:none:filesize=0 MyApp\n+\/\/\n+\/\/ We need to do some address translation because the buffers used at dump time may be mapped to\n+\/\/ a different location at runtime. At dump time, the buffers may be at arbitrary locations\n+\/\/ picked by the OS. At runtime, we try to map at a fixed location (SharedBaseAddress). For\n+\/\/ consistency, we log everything using runtime addresses.\n+class ArchiveBuilder::CDSMapLogger : AllStatic {\n+  static intx buffer_to_runtime_delta() {\n+    \/\/ Translate the buffers used by the MC\/RW\/RO regions to their eventual locations\n+    \/\/ at runtime.\n+    return _buffer_to_target_delta + MetaspaceShared::final_delta();\n+  }\n+\n+  \/\/ mc\/rw\/ro regions only\n+  static void write_dump_region(const char* name, DumpRegion* region) {\n+    address region_base = address(region->base());\n+    address region_top  = address(region->top());\n+    write_region(name, region_base, region_top, region_base + buffer_to_runtime_delta());\n+  }\n+\n+#define _LOG_PREFIX PTR_FORMAT \": @@ %-17s %d\"\n+\n+  static void write_klass(Klass* k, address runtime_dest, const char* type_name, int bytes, Thread* THREAD) {\n+    ResourceMark rm(THREAD);\n+    log_debug(cds, map)(_LOG_PREFIX \" %s\",\n+                        p2i(runtime_dest), type_name, bytes, k->external_name());\n+  }\n+  static void write_method(Method* m, address runtime_dest, const char* type_name, int bytes, Thread* THREAD) {\n+    ResourceMark rm(THREAD);\n+    log_debug(cds, map)(_LOG_PREFIX \" %s\",\n+                        p2i(runtime_dest), type_name, bytes,  m->external_name());\n+  }\n+\n+  \/\/ rw\/ro regions only\n+  static void write_objects(DumpRegion* region, const ArchiveBuilder::SourceObjList* src_objs) {\n+    address last_obj_base = address(region->base());\n+    address last_obj_end  = address(region->base());\n+    address region_end    = address(region->end());\n+    Thread* THREAD = Thread::current();\n+    for (int i = 0; i < src_objs->objs()->length(); i++) {\n+      SourceObjInfo* src_info = src_objs->at(i);\n+      address src = src_info->orig_obj();\n+      address dest = src_info->dumped_addr();\n+      write_data(last_obj_base, dest, last_obj_base + buffer_to_runtime_delta());\n+      address runtime_dest = dest + buffer_to_runtime_delta();\n+      int bytes = src_info->size_in_bytes();\n+\n+      MetaspaceObj::Type type = src_info->msotype();\n+      const char* type_name = MetaspaceObj::type_name(type);\n+\n+      switch (type) {\n+      case MetaspaceObj::ClassType:\n+        write_klass((Klass*)src, runtime_dest, type_name, bytes, THREAD);\n+        break;\n+      case MetaspaceObj::ConstantPoolType:\n+        write_klass(((ConstantPool*)src)->pool_holder(),\n+                    runtime_dest, type_name, bytes, THREAD);\n+        break;\n+      case MetaspaceObj::ConstantPoolCacheType:\n+        write_klass(((ConstantPoolCache*)src)->constant_pool()->pool_holder(),\n+                    runtime_dest, type_name, bytes, THREAD);\n+        break;\n+      case MetaspaceObj::MethodType:\n+        write_method((Method*)src, runtime_dest, type_name, bytes, THREAD);\n+        break;\n+      case MetaspaceObj::ConstMethodType:\n+        write_method(((ConstMethod*)src)->method(), runtime_dest, type_name, bytes, THREAD);\n+        break;\n+      case MetaspaceObj::SymbolType:\n+        {\n+          ResourceMark rm(THREAD);\n+          Symbol* s = (Symbol*)src;\n+          log_debug(cds, map)(_LOG_PREFIX \" %s\", p2i(runtime_dest), type_name, bytes,\n+                              s->as_quoted_ascii());\n+        }\n+        break;\n+      default:\n+        log_debug(cds, map)(_LOG_PREFIX, p2i(runtime_dest), type_name, bytes);\n+        break;\n+      }\n+\n+      last_obj_base = dest;\n+      last_obj_end  = dest + bytes;\n+    }\n+\n+    write_data(last_obj_base, last_obj_end, last_obj_base + buffer_to_runtime_delta());\n+    if (last_obj_end < region_end) {\n+      log_debug(cds, map)(PTR_FORMAT \": @@ Misc data \" SIZE_FORMAT \" bytes\",\n+                          p2i(last_obj_end + buffer_to_runtime_delta()),\n+                          size_t(region_end - last_obj_end));\n+      write_data(last_obj_end, region_end, last_obj_end + buffer_to_runtime_delta());\n+    }\n+  }\n+\n+#undef _LOG_PREFIX\n+\n+  \/\/ Write information about a region, whose address at dump time is [base .. top). At\n+  \/\/ runtime, this region will be mapped to runtime_base.  runtime_base is 0 if this\n+  \/\/ region will be mapped at os-selected addresses (such as the bitmap region), or will\n+  \/\/ be accessed with os::read (the header).\n+  static void write_region(const char* name, address base, address top, address runtime_base) {\n+    size_t size = top - base;\n+    base = runtime_base;\n+    top = runtime_base + size;\n+    log_info(cds, map)(\"[%-18s \" PTR_FORMAT \" - \" PTR_FORMAT \" \" SIZE_FORMAT_W(9) \" bytes]\",\n+                       name, p2i(base), p2i(top), size);\n+  }\n+\n+  \/\/ open and closed archive regions\n+  static void write_heap_region(const char* which, GrowableArray<MemRegion> *regions) {\n+    for (int i = 0; i < regions->length(); i++) {\n+      address start = address(regions->at(i).start());\n+      address end = address(regions->at(i).end());\n+      write_region(which, start, end, start);\n+      write_data(start, end, start);\n+    }\n+  }\n+\n+  \/\/ Dump all the data [base...top). Pretend that the base address\n+  \/\/ will be mapped to runtime_base at run-time.\n+  static void write_data(address base, address top, address runtime_base) {\n+    assert(top >= base, \"must be\");\n+\n+    LogStreamHandle(Trace, cds, map) lsh;\n+    if (lsh.is_enabled()) {\n+      os::print_hex_dump(&lsh, base, top, sizeof(address), 32, runtime_base);\n+    }\n+  }\n+\n+  static void write_header(FileMapInfo* mapinfo) {\n+    LogStreamHandle(Info, cds, map) lsh;\n+    if (lsh.is_enabled()) {\n+      mapinfo->print(&lsh);\n+    }\n+  }\n+\n+public:\n+  static void write(ArchiveBuilder* builder, FileMapInfo* mapinfo,\n+             GrowableArray<MemRegion> *closed_heap_regions,\n+             GrowableArray<MemRegion> *open_heap_regions,\n+             char* bitmap, size_t bitmap_size_in_bytes) {\n+    log_info(cds, map)(\"%s CDS archive map for %s\", DumpSharedSpaces ? \"Static\" : \"Dynamic\", mapinfo->full_path());\n+\n+    address header = address(mapinfo->header());\n+    address header_end = header + mapinfo->header()->header_size();\n+    write_region(\"header\", header, header_end, 0);\n+    write_header(mapinfo);\n+    write_data(header, header_end, 0);\n+\n+    DumpRegion* mc_region = builder->_mc_region;\n+    DumpRegion* rw_region = builder->_rw_region;\n+    DumpRegion* ro_region = builder->_ro_region;\n+\n+    address mc = address(mc_region->base());\n+    address mc_end = address(mc_region->end());\n+    write_dump_region(\"mc region\", mc_region);\n+    write_data(mc, mc_end, mc + buffer_to_runtime_delta());\n+\n+    write_dump_region(\"rw region\", rw_region);\n+    write_objects(rw_region, &builder->_rw_src_objs);\n+\n+    write_dump_region(\"ro region\", ro_region);\n+    write_objects(ro_region, &builder->_ro_src_objs);\n+\n+    address bitmap_end = address(bitmap + bitmap_size_in_bytes);\n+    write_region(\"bitmap\", address(bitmap), bitmap_end, 0);\n+    write_data(header, header_end, 0);\n+\n+    if (closed_heap_regions != NULL) {\n+      write_heap_region(\"closed heap region\", closed_heap_regions);\n+    }\n+    if (open_heap_regions != NULL) {\n+      write_heap_region(\"open heap region\", open_heap_regions);\n+    }\n+\n+    log_info(cds, map)(\"[End of CDS archive map]\");\n+  }\n+};\n+\n+void ArchiveBuilder::write_cds_map_to_log(FileMapInfo* mapinfo,\n+                                          GrowableArray<MemRegion> *closed_heap_regions,\n+                                          GrowableArray<MemRegion> *open_heap_regions,\n+                                          char* bitmap, size_t bitmap_size_in_bytes) {\n+  if (log_is_enabled(Info, cds, map)) {\n+    CDSMapLogger::write(this, mapinfo, closed_heap_regions, open_heap_regions,\n+                        bitmap, bitmap_size_in_bytes);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/memory\/archiveBuilder.cpp","additions":201,"deletions":4,"binary":false,"changes":205,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+class DumpAllocStats;\n+class FileMapInfo;\n@@ -38,0 +40,1 @@\n+class MemRegion;\n@@ -39,1 +42,0 @@\n-class DumpAllocStats;\n@@ -71,0 +73,2 @@\n+    int _size_in_bytes;\n+    MetaspaceObj::Type _msotype;\n@@ -72,0 +76,3 @@\n+    address _orig_obj;       \/\/ The value of the original object (_ref->obj()) when this\n+                             \/\/ SourceObjInfo was created. Note that _ref->obj() may change\n+                             \/\/ later if _ref is relocated.\n@@ -75,1 +82,3 @@\n-      _ref(ref), _ptrmap_start(0), _ptrmap_end(0), _read_only(read_only), _follow_mode(follow_mode) {\n+      _ref(ref), _ptrmap_start(0), _ptrmap_end(0), _read_only(read_only), _follow_mode(follow_mode),\n+      _size_in_bytes(ref->size() * BytesPerWord), _msotype(ref->msotype()),\n+      _orig_obj(ref->obj()) {\n@@ -96,1 +105,2 @@\n-    int size_in_bytes()   const    { return _ref->size() * BytesPerWord; }\n+    int size_in_bytes()   const    { return _size_in_bytes; }\n+    address orig_obj()    const    { return _orig_obj; }\n@@ -98,0 +108,1 @@\n+    MetaspaceObj::Type msotype() const { return _msotype; }\n@@ -130,0 +141,2 @@\n+  class CDSMapLogger;\n+\n@@ -133,0 +146,1 @@\n+  DumpRegion* _mc_region;\n@@ -183,1 +197,0 @@\n-\n@@ -190,6 +203,0 @@\n-  void set_dump_regions(DumpRegion* rw_region, DumpRegion* ro_region) {\n-    assert(_rw_region == NULL && _ro_region == NULL, \"do not change\");\n-    _rw_region = rw_region;\n-    _ro_region = ro_region;\n-  }\n-\n@@ -228,1 +235,1 @@\n-  ArchiveBuilder(DumpRegion* rw_region, DumpRegion* ro_region);\n+  ArchiveBuilder(DumpRegion* mc_region, DumpRegion* rw_region, DumpRegion* ro_region);\n@@ -243,0 +250,5 @@\n+  void write_cds_map_to_log(FileMapInfo* mapinfo,\n+                            GrowableArray<MemRegion> *closed_heap_regions,\n+                            GrowableArray<MemRegion> *open_heap_regions,\n+                            char* bitmap, size_t bitmap_size_in_bytes);\n+\n","filename":"src\/hotspot\/share\/memory\/archiveBuilder.hpp","additions":23,"deletions":11,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -126,1 +126,3 @@\n-  DynamicArchiveBuilder() : ArchiveBuilder(NULL, NULL) {\n+  DynamicArchiveBuilder() : ArchiveBuilder(MetaspaceShared::misc_code_dump_space(),\n+                                           MetaspaceShared::read_write_dump_space(),\n+                                           MetaspaceShared::read_only_dump_space()) {\n@@ -180,1 +182,0 @@\n-    set_dump_regions(MetaspaceShared::read_write_dump_space(), MetaspaceShared::read_only_dump_space());\n@@ -569,1 +570,2 @@\n-  MetaspaceShared::write_core_archive_regions(dynamic_info, NULL, NULL);\n+  size_t bitmap_size_in_bytes;\n+  char* bitmap = MetaspaceShared::write_core_archive_regions(dynamic_info, NULL, NULL, bitmap_size_in_bytes);\n@@ -575,0 +577,4 @@\n+  write_cds_map_to_log(dynamic_info, NULL, NULL,\n+                       bitmap, bitmap_size_in_bytes);\n+  FREE_C_HEAP_ARRAY(char, bitmap);\n+\n","filename":"src\/hotspot\/share\/memory\/dynamicArchive.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+#include \"utilities\/ostream.hpp\"\n@@ -251,0 +252,50 @@\n+void FileMapHeader::print(outputStream* st) {\n+  ResourceMark rm;\n+\n+  st->print_cr(\"- magic:                          0x%08x\", _magic);\n+  st->print_cr(\"- crc:                            0x%08x\", _crc);\n+  st->print_cr(\"- version:                        %d\", _version);\n+\n+  for (int i = 0; i < NUM_CDS_REGIONS; i++) {\n+    FileMapRegion* si = space_at(i);\n+    si->print(st, i);\n+  }\n+  st->print_cr(\"============ end regions ======== \");\n+\n+  st->print_cr(\"- header_size:                    \" SIZE_FORMAT, _header_size);\n+  st->print_cr(\"- alignment:                      \" SIZE_FORMAT, _alignment);\n+  st->print_cr(\"- obj_alignment:                  %d\", _obj_alignment);\n+  st->print_cr(\"- narrow_oop_base:                \" INTPTR_FORMAT, p2i(_narrow_oop_base));\n+  st->print_cr(\"- narrow_oop_base:                \" INTPTR_FORMAT, p2i(_narrow_oop_base));\n+  st->print_cr(\"- narrow_oop_shift                %d\", _narrow_oop_shift);\n+  st->print_cr(\"- compact_strings:                %d\", _compact_strings);\n+  st->print_cr(\"- max_heap_size:                  \" UINTX_FORMAT, _max_heap_size);\n+  st->print_cr(\"- narrow_oop_mode:                %d\", _narrow_oop_mode);\n+  st->print_cr(\"- narrow_klass_shift:             %d\", _narrow_klass_shift);\n+  st->print_cr(\"- compressed_oops:                %d\", _compressed_oops);\n+  st->print_cr(\"- compressed_class_ptrs:          %d\", _compressed_class_ptrs);\n+  st->print_cr(\"- cloned_vtables_offset:          \" SIZE_FORMAT_HEX, _cloned_vtables_offset);\n+  st->print_cr(\"- serialized_data_offset:         \" SIZE_FORMAT_HEX, _serialized_data_offset);\n+  st->print_cr(\"- i2i_entry_code_buffers_offset:  \" SIZE_FORMAT_HEX, _i2i_entry_code_buffers_offset);\n+  st->print_cr(\"- i2i_entry_code_buffers_size:    \" SIZE_FORMAT, _i2i_entry_code_buffers_size);\n+  st->print_cr(\"- heap_end:                       \" INTPTR_FORMAT, p2i(_heap_end));\n+  st->print_cr(\"- base_archive_is_default:        %d\", _base_archive_is_default);\n+  st->print_cr(\"- jvm_ident:                      %s\", _jvm_ident);\n+  st->print_cr(\"- base_archive_name_size:         \" SIZE_FORMAT, _base_archive_name_size);\n+  st->print_cr(\"- shared_path_table_offset:       \" SIZE_FORMAT_HEX, _shared_path_table_offset);\n+  st->print_cr(\"- shared_path_table_size:         %d\", _shared_path_table_size);\n+  st->print_cr(\"- app_class_paths_start_index:    %d\", _app_class_paths_start_index);\n+  st->print_cr(\"- app_module_paths_start_index:   %d\", _app_module_paths_start_index);\n+  st->print_cr(\"- num_module_paths:               %d\", _num_module_paths);\n+  st->print_cr(\"- max_used_path_index:            %d\", _max_used_path_index);\n+  st->print_cr(\"- verify_local:                   %d\", _verify_local);\n+  st->print_cr(\"- verify_remote:                  %d\", _verify_remote);\n+  st->print_cr(\"- has_platform_or_app_classes:    %d\", _has_platform_or_app_classes);\n+  st->print_cr(\"- requested_base_address:         \" INTPTR_FORMAT, p2i(_requested_base_address));\n+  st->print_cr(\"- mapped_base_address:            \" INTPTR_FORMAT, p2i(_mapped_base_address));\n+  st->print_cr(\"- allow_archiving_with_java_agent:%d\", _allow_archiving_with_java_agent);\n+  st->print_cr(\"- use_optimized_module_handling:  %d\", _use_optimized_module_handling);\n+  st->print_cr(\"- use_full_module_graph           %d\", _use_full_module_graph);\n+  st->print_cr(\"- ptrmap_size_in_bits:            \" SIZE_FORMAT, _ptrmap_size_in_bits);\n+}\n+\n@@ -1232,3 +1283,26 @@\n-static const char* region_names[] = {\n-  \"mc\", \"rw\", \"ro\", \"bm\", \"ca0\", \"ca1\", \"oa0\", \"oa1\"\n-};\n+\n+static const char* region_name(int region_index) {\n+  static const char* names[] = {\n+    \"mc\", \"rw\", \"ro\", \"bm\", \"ca0\", \"ca1\", \"oa0\", \"oa1\"\n+  };\n+  const int num_regions = sizeof(names)\/sizeof(names[0]);\n+  assert(0 <= region_index && region_index < num_regions, \"sanity\");\n+\n+  return names[region_index];\n+}\n+\n+void FileMapRegion::print(outputStream* st, int region_index) {\n+  st->print_cr(\"============ region ============= %d \\\"%s\\\"\", region_index, region_name(region_index));\n+  st->print_cr(\"- crc:                            0x%08x\", _crc);\n+  st->print_cr(\"- read_only:                      %d\", _read_only);\n+  st->print_cr(\"- allow_exec:                     %d\", _allow_exec);\n+  st->print_cr(\"- is_heap_region:                 %d\", _is_heap_region);\n+  st->print_cr(\"- is_bitmap_region:               %d\", _is_bitmap_region);\n+  st->print_cr(\"- mapped_from_file:               %d\", _mapped_from_file);\n+  st->print_cr(\"- file_offset:                    \" SIZE_FORMAT_HEX, _file_offset);\n+  st->print_cr(\"- mapping_offset:                 \" SIZE_FORMAT_HEX, _mapping_offset);\n+  st->print_cr(\"- used:                           \" SIZE_FORMAT, _used);\n+  st->print_cr(\"- oopmap_offset:                  \" SIZE_FORMAT_HEX, _oopmap_offset);\n+  st->print_cr(\"- oopmap_size_in_bits:            \" SIZE_FORMAT, _oopmap_size_in_bits);\n+  st->print_cr(\"- mapped_base:                    \" INTPTR_FORMAT, p2i(_mapped_base));\n+}\n@@ -1243,3 +1317,0 @@\n-  const int num_regions = sizeof(region_names)\/sizeof(region_names[0]);\n-  assert(0 <= region && region < num_regions, \"sanity\");\n-\n@@ -1264,1 +1335,1 @@\n-                   region_names[region], region, size, p2i(requested_base), _file_offset, crc);\n+                   region_name(region), region, size, p2i(requested_base), _file_offset, crc);\n@@ -1281,1 +1352,1 @@\n-size_t FileMapInfo::write_oopmaps(GrowableArray<ArchiveHeapOopmapInfo>* oopmaps, size_t curr_offset, uintptr_t* buffer) {\n+size_t FileMapInfo::write_oopmaps(GrowableArray<ArchiveHeapOopmapInfo>* oopmaps, size_t curr_offset, char* buffer) {\n@@ -1283,1 +1354,1 @@\n-    memcpy(((char*)buffer) + curr_offset, oopmaps->at(i)._oopmap, oopmaps->at(i)._oopmap_size_in_bytes);\n+    memcpy(buffer + curr_offset, oopmaps->at(i)._oopmap, oopmaps->at(i)._oopmap_size_in_bytes);\n@@ -1289,4 +1360,4 @@\n-void FileMapInfo::write_bitmap_region(const CHeapBitMap* ptrmap,\n-                                      GrowableArray<ArchiveHeapOopmapInfo>* closed_oopmaps,\n-                                      GrowableArray<ArchiveHeapOopmapInfo>* open_oopmaps) {\n-  ResourceMark rm;\n+char* FileMapInfo::write_bitmap_region(const CHeapBitMap* ptrmap,\n+                                       GrowableArray<ArchiveHeapOopmapInfo>* closed_oopmaps,\n+                                       GrowableArray<ArchiveHeapOopmapInfo>* open_oopmaps,\n+                                       size_t &size_in_bytes) {\n@@ -1294,1 +1365,1 @@\n-  size_t size_in_bytes = ptrmap->size_in_bytes();\n+  size_in_bytes = ptrmap->size_in_bytes();\n@@ -1301,2 +1372,2 @@\n-  uintptr_t* buffer = (uintptr_t*)NEW_RESOURCE_ARRAY(char, size_in_bytes);\n-  ptrmap->write_to(buffer, ptrmap->size_in_bytes());\n+  char* buffer = NEW_C_HEAP_ARRAY(char, size_in_bytes, mtClassShared);\n+  ptrmap->write_to((BitMap::bm_word_t*)buffer, ptrmap->size_in_bytes());\n@@ -1311,0 +1382,1 @@\n+  return buffer;\n","filename":"src\/hotspot\/share\/memory\/filemap.cpp","additions":88,"deletions":16,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+class outputStream;\n@@ -178,0 +179,2 @@\n+\n+  void print(outputStream* st, int region_index);\n@@ -328,0 +331,2 @@\n+\n+  void print(outputStream* st);\n@@ -334,0 +339,1 @@\n+  friend class ArchiveBuilder;\n@@ -460,1 +466,1 @@\n-  void  write_bitmap_region(const CHeapBitMap* ptrmap,\n+  char* write_bitmap_region(const CHeapBitMap* ptrmap,\n@@ -462,1 +468,2 @@\n-                            GrowableArray<ArchiveHeapOopmapInfo>* open_oopmaps);\n+                            GrowableArray<ArchiveHeapOopmapInfo>* open_oopmaps,\n+                            size_t &size_in_bytes);\n@@ -554,0 +561,4 @@\n+  void print(outputStream* st) {\n+    header()->print(st);\n+  }\n+\n@@ -574,1 +585,1 @@\n-  static size_t write_oopmaps(GrowableArray<ArchiveHeapOopmapInfo> *oopmaps, size_t curr_offset, uintptr_t* buffer);\n+  static size_t write_oopmaps(GrowableArray<ArchiveHeapOopmapInfo> *oopmaps, size_t curr_offset, char* buffer);\n","filename":"src\/hotspot\/share\/memory\/filemap.hpp","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -611,2 +611,2 @@\n-  StaticArchiveBuilder(DumpRegion* rw_region, DumpRegion* ro_region)\n-    : ArchiveBuilder(rw_region, ro_region) {\n+  StaticArchiveBuilder(DumpRegion* mc_region, DumpRegion* rw_region, DumpRegion* ro_region)\n+    : ArchiveBuilder(mc_region, rw_region, ro_region) {\n@@ -727,1 +727,1 @@\n-  StaticArchiveBuilder builder(&_rw_region, &_ro_region);\n+  StaticArchiveBuilder builder(&_mc_region, &_rw_region, &_ro_region);\n@@ -799,1 +799,4 @@\n-  MetaspaceShared::write_core_archive_regions(mapinfo, _closed_archive_heap_oopmaps, _open_archive_heap_oopmaps);\n+  size_t bitmap_size_in_bytes;\n+  char* bitmap = MetaspaceShared::write_core_archive_regions(mapinfo, _closed_archive_heap_oopmaps,\n+                                                             _open_archive_heap_oopmaps,\n+                                                             bitmap_size_in_bytes);\n@@ -817,0 +820,4 @@\n+  builder.write_cds_map_to_log(mapinfo, _closed_archive_heap_regions, _open_archive_heap_regions,\n+                               bitmap, bitmap_size_in_bytes);\n+  FREE_C_HEAP_ARRAY(char, bitmap);\n+\n@@ -881,3 +888,4 @@\n-void MetaspaceShared::write_core_archive_regions(FileMapInfo* mapinfo,\n-                                                 GrowableArray<ArchiveHeapOopmapInfo>* closed_oopmaps,\n-                                                 GrowableArray<ArchiveHeapOopmapInfo>* open_oopmaps) {\n+char* MetaspaceShared::write_core_archive_regions(FileMapInfo* mapinfo,\n+                                                  GrowableArray<ArchiveHeapOopmapInfo>* closed_oopmaps,\n+                                                  GrowableArray<ArchiveHeapOopmapInfo>* open_oopmaps,\n+                                                  size_t& bitmap_size_in_bytes) {\n@@ -893,1 +901,3 @@\n-  mapinfo->write_bitmap_region(ArchivePtrMarker::ptrmap(), closed_oopmaps, open_oopmaps);\n+\n+  return mapinfo->write_bitmap_region(ArchivePtrMarker::ptrmap(), closed_oopmaps, open_oopmaps,\n+                                      bitmap_size_in_bytes);\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -265,3 +265,6 @@\n-  static void write_core_archive_regions(FileMapInfo* mapinfo,\n-                                         GrowableArray<ArchiveHeapOopmapInfo>* closed_oopmaps,\n-                                         GrowableArray<ArchiveHeapOopmapInfo>* open_oopmaps);\n+  \/\/ Returns the bitmap region which is allocated from C heap.\n+  \/\/ Caller must free it with FREE_C_HEAP_ARRAY()\n+  static char* write_core_archive_regions(FileMapInfo* mapinfo,\n+                                          GrowableArray<ArchiveHeapOopmapInfo>* closed_oopmaps,\n+                                          GrowableArray<ArchiveHeapOopmapInfo>* open_oopmaps,\n+                                          size_t& bitmap_size_in_bytes);\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -889,1 +889,2 @@\n-void os::print_hex_dump(outputStream* st, address start, address end, int unitsize) {\n+void os::print_hex_dump(outputStream* st, address start, address end, int unitsize,\n+                        int bytes_per_line, address logical_start) {\n@@ -893,0 +894,2 @@\n+  logical_start = align_down(logical_start, unitsize);\n+  bytes_per_line = align_up(bytes_per_line, 8);\n@@ -895,8 +898,1 @@\n-  int cols_per_line = 0;\n-  switch (unitsize) {\n-    case 1: cols_per_line = 16; break;\n-    case 2: cols_per_line = 8;  break;\n-    case 4: cols_per_line = 4;  break;\n-    case 8: cols_per_line = 2;  break;\n-    default: return;\n-  }\n+  int cols_per_line = bytes_per_line \/ unitsize;\n@@ -905,1 +901,4 @@\n-  st->print(PTR_FORMAT \":   \", p2i(start));\n+  address logical_p = logical_start;\n+\n+  \/\/ Print out the addresses as if we were starting from logical_start.\n+  st->print(PTR_FORMAT \":   \", p2i(logical_p));\n@@ -918,0 +917,1 @@\n+    logical_p += unitsize;\n@@ -922,1 +922,1 @@\n-       st->print(PTR_FORMAT \":   \", p2i(p));\n+       st->print(PTR_FORMAT \":   \", p2i(logical_p));\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -689,1 +689,5 @@\n-  static void print_hex_dump(outputStream* st, address start, address end, int unitsize);\n+  static void print_hex_dump(outputStream* st, address start, address end, int unitsize,\n+                             int bytes_per_line, address logical_start);\n+  static void print_hex_dump(outputStream* st, address start, address end, int unitsize) {\n+    print_hex_dump(st, start, end, unitsize, \/*bytes_per_line=*\/16, \/*logical_start=*\/start);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}