{"files":[{"patch":"@@ -29,1 +29,2 @@\n-#include \"logging\/logMessage.hpp\"\n+#include \"logging\/logStream.hpp\"\n+#include \"memory\/allStatic.hpp\"\n@@ -609,1 +610,1 @@\n-class ArchiveBuilder::CDSMapLogger {\n+class ArchiveBuilder::CDSMapLogger : AllStatic {\n@@ -617,1 +618,1 @@\n-  void write_dump_region(const char* name, DumpRegion* region) {\n+  static void write_dump_region(const char* name, DumpRegion* region) {\n@@ -625,1 +626,1 @@\n-  void write_klass(Klass* k, address runtime_dest, const char* type_name, int bytes, Thread* THREAD) {\n+  static void write_klass(Klass* k, address runtime_dest, const char* type_name, int bytes, Thread* THREAD) {\n@@ -630,1 +631,1 @@\n-  void write_method(Method* m, address runtime_dest, const char* type_name, int bytes, Thread* THREAD) {\n+  static void write_method(Method* m, address runtime_dest, const char* type_name, int bytes, Thread* THREAD) {\n@@ -637,1 +638,1 @@\n-  void write_objects(DumpRegion* region, const ArchiveBuilder::SourceObjList* src_objs) {\n+  static void write_objects(DumpRegion* region, const ArchiveBuilder::SourceObjList* src_objs) {\n@@ -703,1 +704,1 @@\n-  void write_region(const char* name, address base, address top, address runtime_base) {\n+  static void write_region(const char* name, address base, address top, address runtime_base) {\n@@ -712,1 +713,1 @@\n-  void write_heap_region(const char* which, GrowableArray<MemRegion> *regions) {\n+  static void write_heap_region(const char* which, GrowableArray<MemRegion> *regions) {\n@@ -726,25 +727,10 @@\n-    if (log_is_enabled(Trace, cds, map)) {\n-      intx* p = (intx*)base;\n-      size_t words = (top - base) \/ sizeof(uintx);\n-\n-      for (size_t i = 0; i < words; i += 4, p += 4) {\n-        size_t offset = address(p) - base;\n-        address runtime_p = runtime_base + offset;\n-        switch (words - i) {\n-        case 1:\n-          log_trace(cds, map)(PTR_FORMAT \": \" PTR_FORMAT,\n-                              p2i(runtime_p), p[0]);\n-          break;\n-        case 2:\n-          log_trace(cds, map)(PTR_FORMAT \": \" PTR_FORMAT \" \" PTR_FORMAT,\n-                              p2i(runtime_p), p[0], p[1]);\n-          break;\n-        case 3:\n-          log_trace(cds, map)(PTR_FORMAT \": \" PTR_FORMAT \" \" PTR_FORMAT \" \" PTR_FORMAT,\n-                              p2i(runtime_p), p[0], p[1], p[2]);\n-          break;\n-        default:\n-          log_trace(cds, map)(PTR_FORMAT \": \" PTR_FORMAT \" \" PTR_FORMAT \" \" PTR_FORMAT \" \" PTR_FORMAT,\n-                              p2i(runtime_p), p[0], p[1], p[2], p[3]);\n-        }\n-      }\n+    LogStreamHandle(Trace, cds, map) lsh;\n+    if (lsh.is_enabled()) {\n+      os::print_hex_dump(&lsh, base, top, sizeof(address), 32, runtime_base);\n+    }\n+  }\n+\n+  static void write_header(FileMapInfo* mapinfo) {\n+    LogStreamHandle(Info, cds, map) lsh;\n+    if (lsh.is_enabled()) {\n+      mapinfo->print(&lsh);\n@@ -755,2 +741,1 @@\n-  CDSMapLogger() {}\n-  void write(ArchiveBuilder* builder, FileMapInfo* mapinfo,\n+  static void write(ArchiveBuilder* builder, FileMapInfo* mapinfo,\n@@ -761,10 +746,0 @@\n-    if (log_is_enabled(Trace, cds, map)) {\n-      log_info(cds, map)(\"Log level = trace\");\n-    } else if (log_is_enabled(Debug, cds, map)) {\n-      log_info(cds, map)(\"Log level = debug\");\n-      log_info(cds, map)(\"Run with -Xlog:cds+map=trace for more detailed information\");\n-    } else {\n-      log_info(cds, map)(\"Log level = info\");\n-      log_info(cds, map)(\"Run with -Xlog:cds+map=debug for more detailed information\");\n-      log_info(cds, map)(\"Run with -Xlog:cds+map=trace for even more detailed information\");\n-    }\n@@ -775,0 +750,1 @@\n+    write_header(mapinfo);\n@@ -812,3 +788,2 @@\n-    CDSMapLogger logger;\n-    logger.write(this, mapinfo, closed_heap_regions,open_heap_regions,\n-                 bitmap, bitmap_size_in_bytes);\n+    CDSMapLogger::write(this, mapinfo, closed_heap_regions,open_heap_regions,\n+                        bitmap, bitmap_size_in_bytes);\n","filename":"src\/hotspot\/share\/memory\/archiveBuilder.cpp","additions":23,"deletions":48,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+#include \"utilities\/ostream.hpp\"\n@@ -251,0 +252,50 @@\n+void FileMapHeader::print(outputStream* st) {\n+  ResourceMark rm;\n+\n+  st->print_cr(\"- magic:                          0x%08x\", _magic);\n+  st->print_cr(\"- crc:                            0x%08x\", _crc);\n+  st->print_cr(\"- version:                        %d\", _version);\n+\n+  for (int i = 0; i < NUM_CDS_REGIONS; i++) {\n+    FileMapRegion* si = space_at(i);\n+    si->print(st, i);\n+  }\n+  st->print_cr(\"============ end regions ======== \");\n+\n+  st->print_cr(\"- header_size:                    \" SIZE_FORMAT, _header_size);\n+  st->print_cr(\"- alignment:                      \" SIZE_FORMAT, _alignment);\n+  st->print_cr(\"- obj_alignment:                  %d\", _obj_alignment);\n+  st->print_cr(\"- narrow_oop_base:                \" INTPTR_FORMAT, p2i(_narrow_oop_base));\n+  st->print_cr(\"- narrow_oop_base:                \" INTPTR_FORMAT, p2i(_narrow_oop_base));\n+  st->print_cr(\"- narrow_oop_shift                %d\", _narrow_oop_shift);\n+  st->print_cr(\"- compact_strings:                %d\", _compact_strings);\n+  st->print_cr(\"- max_heap_size:                  \" UINTX_FORMAT, _max_heap_size);\n+  st->print_cr(\"- narrow_oop_mode:                %d\", _narrow_oop_mode);\n+  st->print_cr(\"- narrow_klass_shift:             %d\", _narrow_klass_shift);\n+  st->print_cr(\"- compressed_oops:                %d\", _compressed_oops);\n+  st->print_cr(\"- compressed_class_ptrs:          %d\", _compressed_class_ptrs);\n+  st->print_cr(\"- cloned_vtables_offset:          \" SIZE_FORMAT_HEX, _cloned_vtables_offset);\n+  st->print_cr(\"- serialized_data_offset:         \" SIZE_FORMAT_HEX, _serialized_data_offset);\n+  st->print_cr(\"- i2i_entry_code_buffers_offset:  \" SIZE_FORMAT_HEX, _i2i_entry_code_buffers_offset);\n+  st->print_cr(\"- i2i_entry_code_buffers_size:    \" SIZE_FORMAT, _i2i_entry_code_buffers_size);\n+  st->print_cr(\"- heap_end:                       \" INTPTR_FORMAT, p2i(_heap_end));\n+  st->print_cr(\"- base_archive_is_default:        %d\", _base_archive_is_default);\n+  st->print_cr(\"- jvm_ident:                      %s\", _jvm_ident);\n+  st->print_cr(\"- base_archive_name_size:         \" SIZE_FORMAT, _base_archive_name_size);\n+  st->print_cr(\"- shared_path_table_offset:       \" SIZE_FORMAT_HEX, _shared_path_table_offset);\n+  st->print_cr(\"- shared_path_table_size:         %d\", _shared_path_table_size);\n+  st->print_cr(\"- app_class_paths_start_index:    %d\", _app_class_paths_start_index);\n+  st->print_cr(\"- app_module_paths_start_index:   %d\", _app_module_paths_start_index);\n+  st->print_cr(\"- num_module_paths:               %d\", _num_module_paths);\n+  st->print_cr(\"- max_used_path_index:            %d\", _max_used_path_index);\n+  st->print_cr(\"- verify_local:                   %d\", _verify_local);\n+  st->print_cr(\"- verify_remote:                  %d\", _verify_remote);\n+  st->print_cr(\"- has_platform_or_app_classes:    %d\", _has_platform_or_app_classes);\n+  st->print_cr(\"- requested_base_address:         \" INTPTR_FORMAT, p2i(_requested_base_address));\n+  st->print_cr(\"- mapped_base_address:            \" INTPTR_FORMAT, p2i(_mapped_base_address));\n+  st->print_cr(\"- allow_archiving_with_java_agent:%d\", _allow_archiving_with_java_agent);\n+  st->print_cr(\"- use_optimized_module_handling:  %d\", _use_optimized_module_handling);\n+  st->print_cr(\"- use_full_module_graph           %d\", _use_full_module_graph);\n+  st->print_cr(\"- ptrmap_size_in_bits:            \" SIZE_FORMAT, _ptrmap_size_in_bits);\n+}\n+\n@@ -1232,3 +1283,26 @@\n-static const char* region_names[] = {\n-  \"mc\", \"rw\", \"ro\", \"bm\", \"ca0\", \"ca1\", \"oa0\", \"oa1\"\n-};\n+\n+static const char* region_name(int region_index) {\n+  static const char* names[] = {\n+    \"mc\", \"rw\", \"ro\", \"bm\", \"ca0\", \"ca1\", \"oa0\", \"oa1\"\n+  };\n+  const int num_regions = sizeof(names)\/sizeof(names[0]);\n+  assert(0 <= region_index && region_index < num_regions, \"sanity\");\n+\n+  return names[region_index];\n+}\n+\n+void FileMapRegion::print(outputStream* st, int region_index) {\n+  st->print_cr(\"============ region ============= %d \\\"%s\\\"\", region_index, region_name(region_index));\n+  st->print_cr(\"- crc:                            0x%08x\", _crc);\n+  st->print_cr(\"- read_only:                      %d\", _read_only);\n+  st->print_cr(\"- allow_exec:                     %d\", _allow_exec);\n+  st->print_cr(\"- is_heap_region:                 %d\", _is_heap_region);\n+  st->print_cr(\"- is_bitmap_region:               %d\", _is_bitmap_region);\n+  st->print_cr(\"- mapped_from_file:               %d\", _mapped_from_file);\n+  st->print_cr(\"- file_offset:                    \" SIZE_FORMAT_HEX, _file_offset);\n+  st->print_cr(\"- mapping_offset:                 \" SIZE_FORMAT_HEX, _mapping_offset);\n+  st->print_cr(\"- used:                           \" SIZE_FORMAT, _used);\n+  st->print_cr(\"- oopmap_offset:                  \" SIZE_FORMAT_HEX, _oopmap_offset);\n+  st->print_cr(\"- oopmap_size_in_bits:            \" SIZE_FORMAT, _oopmap_size_in_bits);\n+  st->print_cr(\"- mapped_base:                    \" INTPTR_FORMAT, p2i(_mapped_base));\n+}\n@@ -1243,3 +1317,0 @@\n-  const int num_regions = sizeof(region_names)\/sizeof(region_names[0]);\n-  assert(0 <= region && region < num_regions, \"sanity\");\n-\n@@ -1264,1 +1335,1 @@\n-                   region_names[region], region, size, p2i(requested_base), _file_offset, crc);\n+                   region_name(region), region, size, p2i(requested_base), _file_offset, crc);\n","filename":"src\/hotspot\/share\/memory\/filemap.cpp","additions":78,"deletions":7,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+class outputStream;\n@@ -178,0 +179,2 @@\n+\n+  void print(outputStream* st, int region_index);\n@@ -328,0 +331,2 @@\n+\n+  void print(outputStream* st);\n@@ -556,0 +561,4 @@\n+  void print(outputStream* st) {\n+    header()->print(st);\n+  }\n+\n","filename":"src\/hotspot\/share\/memory\/filemap.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -265,1 +265,2 @@\n-  \/\/ Returns the bitmap region\n+  \/\/ Returns the bitmap region which is allocated from C heap.\n+  \/\/ Caller must free it with FREE_C_HEAP_ARRAY()\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -889,1 +889,2 @@\n-void os::print_hex_dump(outputStream* st, address start, address end, int unitsize) {\n+void os::print_hex_dump(outputStream* st, address start, address end, int unitsize,\n+                        int bytes_per_line, address logical_start) {\n@@ -893,0 +894,2 @@\n+  logical_start = align_down(logical_start, unitsize);\n+  bytes_per_line = align_up(bytes_per_line, 8);\n@@ -895,8 +898,1 @@\n-  int cols_per_line = 0;\n-  switch (unitsize) {\n-    case 1: cols_per_line = 16; break;\n-    case 2: cols_per_line = 8;  break;\n-    case 4: cols_per_line = 4;  break;\n-    case 8: cols_per_line = 2;  break;\n-    default: return;\n-  }\n+  int cols_per_line = bytes_per_line \/ unitsize;\n@@ -905,1 +901,4 @@\n-  st->print(PTR_FORMAT \":   \", p2i(start));\n+  address logical_p = logical_start;\n+\n+  \/\/ Print out the addresses as if we were starting from logical_start.\n+  st->print(PTR_FORMAT \":   \", p2i(logical_p));\n@@ -918,0 +917,1 @@\n+    logical_p += unitsize;\n@@ -922,1 +922,1 @@\n-       st->print(PTR_FORMAT \":   \", p2i(p));\n+       st->print(PTR_FORMAT \":   \", p2i(logical_p));\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -689,1 +689,5 @@\n-  static void print_hex_dump(outputStream* st, address start, address end, int unitsize);\n+  static void print_hex_dump(outputStream* st, address start, address end, int unitsize,\n+                             int bytes_per_line, address logical_start);\n+  static void print_hex_dump(outputStream* st, address start, address end, int unitsize) {\n+    print_hex_dump(st, start, end, unitsize, \/*bytes_per_line=*\/16, \/*logical_start=*\/start);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}