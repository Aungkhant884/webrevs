{"files":[{"patch":"@@ -41,4 +41,2 @@\n-size_t G1CodeRootSetTable::mem_size() {\n-  return sizeof(*this) +\n-    _table.table_size() * sizeof(Table::Node*) +\n-    _table.number_of_entries() * sizeof(Table::Node);\n+size_t G1CodeRootSetTable::mem_size() const {\n+  return sizeof(*this) + _table.mem_size() - sizeof(_table); \/\/ do not double count _table\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeCacheRemSet.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-  size_t mem_size();\n+  size_t mem_size() const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeCacheRemSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,0 +86,1 @@\n+  using Node = ResourceHashtableNode<K, V>;\n@@ -88,1 +89,0 @@\n-  using Node = ResourceHashtableNode<K, V>;\n","filename":"src\/hotspot\/share\/utilities\/resizeableResourceHash.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -297,0 +297,6 @@\n+  \/\/ This method calculates the \"shallow\" size. If you want the recursive size, use statistics_calculate.\n+  size_t mem_size() const {\n+    return sizeof(*this) +\n+      table_size() * sizeof(Node*) +\n+      number_of_entries() * sizeof(Node);\n+  }\n","filename":"src\/hotspot\/share\/utilities\/resourceHash.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}