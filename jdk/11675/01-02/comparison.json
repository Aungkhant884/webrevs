{"files":[{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/g1\/g1CodeRootSetTable.hpp\"\n@@ -76,2 +75,1 @@\n-template<typename CB>\n-void G1CodeRootSetTable::remove_if(CB& should_remove) {\n+void G1CodeRootSetTable::remove_if(CleanCallback& should_remove) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeCacheRemSet.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/g1\/g1CodeRootSetTable.hpp\"\n@@ -31,0 +30,6 @@\n+#include \"code\/codeCache.hpp\"\n+#include \"memory\/allocation.hpp\"\n+#include \"utilities\/resizeableResourceHash.hpp\"\n+#include \"utilities\/resourceHash.hpp\"\n+\n+class CleanCallback;\n@@ -36,0 +41,35 @@\n+class G1CodeRootSetTable : public CHeapObj<mtGC>  {\n+  friend class G1CodeRootSetTest;\n+\n+  static G1CodeRootSetTable* volatile _purge_list;\n+\n+  using Table = ResizeableResourceHashtable<nmethod*, nmethod*, AnyObj::C_HEAP, mtGC>;\n+  Table _table;\n+  G1CodeRootSetTable* _purge_next;\n+\n+ public:\n+  G1CodeRootSetTable(int size) : _table(size, size), _purge_next(NULL) {}\n+  \/\/ Needs to be protected by locks\n+  bool add(nmethod* nm);\n+  bool remove(nmethod* nm);\n+\n+  \/\/ Can be called without locking\n+  bool contains(nmethod* nm);\n+\n+  void copy_to(G1CodeRootSetTable* new_table);\n+  void nmethods_do(CodeBlobClosure* blk);\n+\n+  void remove_if(CleanCallback& should_remove);\n+  int number_of_entries() const {return _table.number_of_entries();}\n+\n+  static void purge_list_append(G1CodeRootSetTable* tbl);\n+  static void purge();\n+\n+  static size_t static_mem_size() {\n+    return sizeof(_purge_list);\n+  }\n+\n+  size_t mem_size();\n+};\n+\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeCacheRemSet.hpp","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#ifndef SHARE_GC_G1_G1CODEROOTSETTABLE_HPP\n-#define SHARE_GC_G1_G1CODEROOTSETTABLE_HPP\n-\n-#include \"code\/codeCache.hpp\"\n-#include \"memory\/allocation.hpp\"\n-#include \"utilities\/resizeableResourceHash.hpp\"\n-#include \"utilities\/resourceHash.hpp\"\n-\n-class nmethod;\n-\n-class G1CodeRootSetTable : public CHeapObj<mtGC>  {\n-  friend class G1CodeRootSetTest;\n-\n-  static G1CodeRootSetTable* volatile _purge_list;\n-\n-  using Table = ResizeableResourceHashtable<nmethod*, nmethod*, AnyObj::C_HEAP, mtGC>;\n-  Table _table;\n-  G1CodeRootSetTable* _purge_next;\n-\n-  unsigned int compute_hash(nmethod* nm) {\n-    uintptr_t hash = (uintptr_t)nm;\n-    return hash ^ (hash >> 7); \/\/ code heap blocks are 128byte aligned\n-  }\n-\n- public:\n-  G1CodeRootSetTable(int size) : _table(size, size), _purge_next(NULL) {}\n-  \/\/ Needs to be protected by locks\n-  bool add(nmethod* nm);\n-  bool remove(nmethod* nm);\n-\n-  \/\/ Can be called without locking\n-  bool contains(nmethod* nm);\n-\n-  void copy_to(G1CodeRootSetTable* new_table);\n-  void nmethods_do(CodeBlobClosure* blk);\n-\n-  template<typename CB>\n-  void remove_if(CB& should_remove);\n-  int number_of_entries() const {return _table.number_of_entries();}\n-\n-  static void purge_list_append(G1CodeRootSetTable* tbl);\n-  static void purge();\n-\n-  static size_t static_mem_size() {\n-    return sizeof(_purge_list);\n-  }\n-\n-  size_t mem_size();\n-};\n-\n-#endif \/\/ SHARE_GC_G1_G1CODEROOTSETTABLE_HPP\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeRootSetTable.hpp","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"gc\/g1\/g1CodeRootSetTable.hpp\"\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1CodeCacheRemSet.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}