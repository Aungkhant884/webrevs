{"files":[{"patch":"@@ -602,18 +602,0 @@\n-  <Event name=\"UnsafeAllocation\" category=\"Java Application\" label=\"Unsafe Allocation\" description=\"Allocation memory when using unsafe\"\n-    thread=\"true\" stackTrace=\"true\" startTime=\"false\">\n-    <Field type=\"ulong\" name=\"addr\" label=\"addr\" \/>\n-    <Field type=\"ulong\" contentType=\"bytes\" name=\"allocationSize\" label=\"Allocation Size\" \/>\n-  <\/Event>\n-\n-  <Event name=\"UnsafeReallocate\" category=\"Java Application\" label=\"Unsafe Reallocate\" description=\"Reallocate memory when using unsafe\"\n-    thread=\"true\" stackTrace=\"true\" startTime=\"false\">\n-    <Field type=\"ulong\" name=\"freeAddr\" label=\"addr\" \/>\n-    <Field type=\"ulong\" name=\"allocAddr\" label=\"addr\" \/>\n-    <Field type=\"ulong\" contentType=\"bytes\" name=\"allocationSize\" label=\"Allocation Size\" \/>\n-  <\/Event>\n-\n-  <Event name=\"UnsafeFreeMemory\" category=\"Java Application\" label=\"Unsafe FreeMemory\" description=\"Free memory when using unsafe\"\n-    thread=\"true\" stackTrace=\"true\" startTime=\"false\">\n-    <Field type=\"ulong\" name=\"addr\" label=\"addr\" \/>\n-  <\/Event>\n-\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -344,1 +344,0 @@\n-  jlong addr = addr_to_java(x);\n@@ -346,5 +345,1 @@\n-  EventUnsafeAllocation event;\n-  event.set_allocationSize(sz);\n-  event.set_addr(addr);\n-  event.commit();\n-  return addr;\n+  return addr_to_java(x);\n@@ -360,1 +355,0 @@\n-  jlong reallocAddr = addr_to_java(x);\n@@ -362,7 +356,1 @@\n-  EventUnsafeReallocate event;\n-  event.set_allocationSize(sz);\n-  event.set_freeAddr(addr);\n-  event.set_allocAddr(reallocAddr);\n-  event.commit();\n-\n-  return reallocAddr;\n+  return addr_to_java(x);\n@@ -375,4 +363,0 @@\n-\n-  EventUnsafeFreeMemory event;\n-  event.set_addr(addr);\n-  event.commit();\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+\n@@ -38,0 +39,3 @@\n+    public static final EventHandler JAVA_NATIVE_ALLOCATION = Utils.getHandler(JavaNativeAllocationEvent.class);\n+    public static final EventHandler JAVA_NATIVE_REALLOCATION = Utils.getHandler(JavaNativeReallocateEvent.class);\n+    public static final EventHandler JAVA_NATIVE_FREE = Utils.getHandler(JavaNativeFreeEvent.class);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/Handlers.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ * \n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Label;\n+import jdk.jfr.DataAmount;\n+import jdk.jfr.Name;\n+import jdk.jfr.Timespan;\n+import jdk.jfr.internal.Type;\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"JavaNativeAllocation\")\n+@Label(\"Java Native Allocation\")\n+@Category(\"Java Application\")\n+@Description(\"Allocation memory when using native\")\n+public final class JavaNativeAllocationEvent extends AbstractJDKEvent {\n+\n+    \/\/ The order of these fields must be the same as the parameters in\n+    \/\/ EventHandler::write(..., long, long)\n+\n+    @Label(\"addr\")\n+    public long addr;\n+\n+    @Label(\"Allocation Size\")\n+    @DataAmount\n+    public long allocationSize;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/JavaNativeAllocationEvent.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ * \n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Label;\n+import jdk.jfr.DataAmount;\n+import jdk.jfr.Name;\n+import jdk.jfr.Timespan;\n+import jdk.jfr.internal.Type;\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"JavaNativeFree\")\n+@Label(\"Java Native Free\")\n+@Category(\"Java Application\")\n+@Description(\"Free memory when using native\")\n+public final class JavaNativeFreeEvent extends AbstractJDKEvent {\n+\n+    \/\/ The order of these fields must be the same as the parameters in\n+    \/\/ EventHandler::write(..., long)\n+\n+    @Label(\"addr\")\n+    public long addr;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/JavaNativeFreeEvent.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ * \n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Label;\n+import jdk.jfr.DataAmount;\n+import jdk.jfr.Name;\n+import jdk.jfr.Timespan;\n+import jdk.jfr.internal.Type;\n+\n+@Name(Type.EVENT_NAME_PREFIX + \"JavaNativeReallocate\")\n+@Label(\"Java Native Reallocate\")\n+@Category(\"Java Application\")\n+@Description(\"Reallocate memory when using native\")\n+public class JavaNativeReallocateEvent extends AbstractJDKEvent {\n+\n+    \/\/ The order of these fields must be the same as the parameters in\n+    \/\/ EventHandler::write(..., long, long, long)\n+\n+    @Label(\"freeAddr\")\n+    public long freeAddr;\n+\n+    @Label(\"allocAddr\")\n+    public long allocAddr;\n+\n+    @Label(\"Allocation Size\")\n+    @DataAmount\n+    public long allocationSize;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/JavaNativeReallocateEvent.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -142,0 +142,12 @@\n+    public void write(long start, long duration, long addr, long allocationSize) {\n+        throwError(\"JavaNativeAllocationEvent\");\n+    }\n+\n+    public void write(long start, long duration, long addr) {\n+        throwError(\"JavaNativeFreeEvent\");\n+    }\n+\n+    public void write(long start, long duration, long freeAddr, long allocAddr, long allocationSize) {\n+        throwError(\"JavaNativeReallocateEvent\");\n+    }\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/handlers\/EventHandler.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -47,0 +47,3 @@\n+import jdk.jfr.events.JavaNativeAllocationEvent;\n+import jdk.jfr.events.JavaNativeFreeEvent;\n+import jdk.jfr.events.JavaNativeReallocateEvent;\n@@ -92,2 +95,5 @@\n-\n-        DirectBufferStatisticsEvent.class\n+        \n+        DirectBufferStatisticsEvent.class,\n+        JavaNativeAllocationEvent.class,\n+        JavaNativeFreeEvent.class,\n+        JavaNativeReallocateEvent.class\n@@ -104,1 +110,2 @@\n-        SocketChannelImplInstrumentor.class\n+        SocketChannelImplInstrumentor.class,\n+        UnsafeInstrumentor.class\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/JDKEvents.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.internal.instrument;\n+\n+import jdk.jfr.events.Handlers;\n+import jdk.jfr.internal.handlers.EventHandler;\n+import jdk.jfr.events.JavaNativeAllocationEvent;\n+\n+@JIInstrumentationTarget(\"jdk.internal.misc.Unsafe\")\n+final class UnsafeInstrumentor {\n+    private UnsafeInstrumentor() {\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    @JIInstrumentationMethod\n+    public long allocateMemory(long bytes) {\n+        EventHandler handler = Handlers.JAVA_NATIVE_ALLOCATION;\n+        if (!handler.isEnabled()) {\n+            return allocateMemory(bytes);\n+        }\n+        long addr = 0;\n+        long start = 0;\n+        try {\n+            start = EventHandler.timestamp();\n+            addr = allocateMemory(bytes);\n+        } finally {\n+            if (addr != 0) {\n+                handler.write(start, 0L, addr, bytes);\n+            }\n+        }\n+        return addr;\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    @JIInstrumentationMethod\n+    public long reallocateMemory(long address, long bytes) {\n+        EventHandler handler = Handlers.JAVA_NATIVE_REALLOCATION;\n+        if (!handler.isEnabled()) {\n+            return reallocateMemory(address, bytes);\n+        }\n+        long addr = 0;\n+        long start = 0;\n+        try {\n+            start = EventHandler.timestamp();\n+            addr = reallocateMemory(address, bytes);\n+        } finally {\n+            if (addr != 0) {\n+                handler.write(start, 0L, address, addr, bytes);\n+            }\n+        }\n+        return addr;\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    @JIInstrumentationMethod\n+    public void freeMemory(long address) {\n+        EventHandler handler = Handlers.JAVA_NATIVE_FREE;\n+        if (!handler.isEnabled()) {\n+            freeMemory(address);\n+            return;\n+        }\n+        long start = 0;\n+        try {\n+            start = EventHandler.timestamp();\n+            freeMemory(address);\n+        } finally {\n+            if (address != 0) {\n+                handler.write(start, 0L, address);\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/UnsafeInstrumentor.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -630,1 +630,1 @@\n-    <event name=\"jdk.UnsafeAllocation\">\n+    <event name=\"jdk.JavaNativeAllocation\">\n@@ -635,1 +635,1 @@\n-    <event name=\"jdk.UnsafeReallocate\">\n+    <event name=\"jdk.JavaNativeReallocate\">\n@@ -640,1 +640,1 @@\n-    <event name=\"jdk.UnsafeFreeMemory\">\n+    <event name=\"jdk.JavaNativeFree\">\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -630,1 +630,1 @@\n-    <event name=\"jdk.UnsafeAllocation\">\n+    <event name=\"jdk.JavaNativeAllocation\">\n@@ -635,1 +635,1 @@\n-    <event name=\"jdk.UnsafeReallocate\">\n+    <event name=\"jdk.JavaNativeReallocate\">\n@@ -640,1 +640,1 @@\n-    <event name=\"jdk.UnsafeFreeMemory\">\n+    <event name=\"jdk.JavaNativeFree\">\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}