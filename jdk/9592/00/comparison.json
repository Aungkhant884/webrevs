{"files":[{"patch":"@@ -602,1 +602,1 @@\n-address MacroAssembler::trampoline_call1(Address entry, CodeBuffer* cbuf, bool check_emit_size) {\n+address MacroAssembler::trampoline_call(Address entry, CodeBuffer* cbuf) {\n@@ -627,1 +627,4 @@\n-    if (check_emit_size) {\n+    \/\/ Make sure this is a C2 compilation. C1 allocates space only for\n+    \/\/ trampoline stubs generated by Call LIR ops.\n+    if (StubRoutines::aarch64::complete() &&\n+        Thread::current()->is_Compiler_thread()) {\n@@ -631,0 +634,3 @@\n+      \/\/ We need to be in the output phase when we check the size of emitted\n+      \/\/ code.\n+      PhaseOutput* phase_output = Compile::current()->output();\n@@ -632,2 +638,2 @@\n-        (task != NULL && is_c2_compile(task->comp_level()) &&\n-         Compile::current()->output()->in_scratch_emit_size());\n+          (task != NULL && is_c2_compile(task->comp_level()) &&\n+           phase_output != NULL && phase_output->in_scratch_emit_size());\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1185,2 +1185,1 @@\n-  address trampoline_call(Address entry, CodeBuffer* cbuf = NULL) { return trampoline_call1(entry, cbuf, true); }\n-  address trampoline_call1(Address entry, CodeBuffer* cbuf, bool check_emit_size = true);\n+  address trampoline_call(Address entry, CodeBuffer* cbuf = NULL);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}