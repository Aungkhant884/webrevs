{"files":[{"patch":"@@ -321,0 +321,19 @@\n+    \/\/ Strip a long path or UNC prefix and return the result.\n+    \/\/ If there is no such prefix, return the parameter passed in.\n+    private static String stripLongOrUNCPrefix(String path) {\n+        \/\/ if a prefix is present, remove it\n+        if (path.startsWith(\"\\\\\\\\?\\\\\")) {\n+            if (path.startsWith(\"UNC\\\\\", 4)) {\n+                path = \"\\\\\\\\\" + path.substring(8);\n+            } else {\n+                path = path.substring(4);\n+                \/\/ if only \"UNC\" remains, a trailing \"\\\\\" was likely removed\n+                if (path.equals(\"UNC\")) {\n+                    path = \"\\\\\\\\\";\n+                }\n+            }\n+        }\n+\n+        return path;\n+    }\n+\n@@ -323,0 +342,9 @@\n+        String path = f.getPath();\n+\n+        \/\/ if a prefix is present, remove it\n+        String stripped = stripLongOrUNCPrefix(path);\n+        if (stripped != path) {\n+            path = stripped;\n+            f = new File(stripped);\n+        }\n+\n@@ -361,0 +389,8 @@\n+\n+        \/\/ if a prefix is present, remove it\n+        String stripped = stripLongOrUNCPrefix(path);\n+        if (stripped != path) {\n+            path = stripped;\n+            f = new File(stripped);\n+        }\n+\n@@ -443,0 +479,3 @@\n+        \/\/ if a prefix is present, remove it\n+        path = stripLongOrUNCPrefix(path);\n+\n","filename":"src\/java.base\/windows\/classes\/java\/io\/WinNTFileSystem.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,4 @@\n-   @bug 4899022\n-   @summary Look for erroneous representation of drive letter\n+ * @bug 4899022\n+ * @requires (os.family == \"windows\")\n+ * @summary Look for erroneous representation of drive letter\n+ * @run junit GetCanonicalPath\n@@ -29,1 +31,13 @@\n-import java.io.*;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -32,4 +46,49 @@\n-    public static void main(String[] args) throws Exception {\n-        if (File.separatorChar == '\\\\') {\n-            testDriveLetter();\n-        }\n+    private static Stream<Arguments> pathProvider() {\n+        List<Arguments> list = new ArrayList<Arguments>();\n+\n+        File dir = new File(System.getProperty(\"user.dir\", \".\"));\n+        char drive = dir.getPath().charAt(0);\n+\n+        String pathname = drive + \":\\\\\";\n+        list.add(Arguments.of(pathname, pathname));\n+\n+        list.add(Arguments.of(drive + \":\", dir.toString()));\n+\n+        String name = \"foo\";\n+        pathname = \"\\\\\\\\?\\\\\" + name;\n+        list.add(Arguments.of(pathname, new File(dir, name).toString()));\n+        pathname = \"\\\\\\\\?\\\\\" + drive + \":\" + name;\n+        list.add(Arguments.of(pathname, new File(dir, name).toString()));\n+\n+        pathname = \"foo\\\\bar\\\\gus\";\n+        list.add(Arguments.of(pathname, new File(dir, pathname).toString()));\n+\n+        pathname = drive + \":\\\\foo\\\\bar\\\\gus\";\n+        list.add(Arguments.of(pathname, pathname));\n+\n+        pathname = \"\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\gus\";\n+        list.add(Arguments.of(pathname, pathname));\n+\n+        pathname = \"\\\\\\\\localhost\\\\\" + drive + \"$\\\\Users\\\\file.dat\";\n+        list.add(Arguments.of(pathname, pathname));\n+\n+        list.add(Arguments.of(\"\\\\\\\\?\\\\\" + drive + \":\\\\Users\\\\file.dat\",\n+                              drive + \":\\\\Users\\\\file.dat\"));\n+        list.add(Arguments.of(\"\\\\\\\\?\\\\UNC\\\\localhost\\\\\" + drive + \"$\\\\Users\\\\file.dat\",\n+                              \"\\\\\\\\localhost\\\\\" + drive + \"$\\\\Users\\\\file.dat\"));\n+\n+        return list.stream();\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"\\\\\\\\?\", \"\\\\\\\\?\\\\\", \"\\\\\\\\?\\\\UNC\", \"\\\\\\\\?\\\\UNC\\\\\"})\n+    void badPaths(String pathname) {\n+        assertThrows(IOException.class, () -> new File(pathname).getCanonicalPath());\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"pathProvider\")\n+    void goodPaths(String pathname, String expected) throws IOException {\n+        File file = new File(pathname);\n+        String canonicalPath = file.getCanonicalPath();\n+        assertEquals(expected, canonicalPath);\n@@ -37,1 +96,3 @@\n-    private static void testDriveLetter() throws Exception {\n+\n+    @Test\n+    void driveLetter() throws IOException {\n@@ -39,2 +100,1 @@\n-        if (path.length() > 3)\n-            throw new RuntimeException(\"Drive letter incorrectly represented\");\n+        assertFalse(path.length() > 3, \"Drive letter incorrectly represented\");\n","filename":"test\/jdk\/java\/io\/File\/GetCanonicalPath.java","additions":71,"deletions":11,"binary":false,"changes":82,"status":"modified"}]}