{"files":[{"patch":"@@ -101,0 +101,1 @@\n+        path = stripLongOrUNCPrefix(path);\n@@ -226,0 +227,1 @@\n+        path = stripLongOrUNCPrefix(path);\n@@ -245,0 +247,1 @@\n+        parent = stripLongOrUNCPrefix(parent);\n","filename":"src\/java.base\/windows\/classes\/java\/io\/WinNTFileSystem.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,3 @@\n-   @bug 4131169 4109131\n-   @summary Basic test for getAbsolutePath method\n+ * @bug 4131169 4109131 8287843\n+ * @summary Basic test for getAbsolutePath method\n+ * @run junit GetAbsolutePath\n@@ -29,1 +30,3 @@\n-import java.io.*;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.stream.Stream;\n@@ -31,0 +34,8 @@\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -34,1 +45,1 @@\n-    private static boolean ignoreCase = false;\n+    private static final String USER_DIR = System.getProperty(\"user.dir\");\n@@ -36,7 +47,8 @@\n-    private static void ck(String path, String ans) throws Exception {\n-        File f = new File(path);\n-        String p = f.getAbsolutePath();\n-        if ((ignoreCase && p.equalsIgnoreCase(ans)) || p.equals(ans))\n-            System.err.println(path + \" ==> \" + p);\n-        else\n-            throw new Exception(path + \": expected \" + ans + \", got \" + p);\n+    private static char driveLetter() {\n+        assert System.getProperty(\"os.name\").startsWith(\"Windows\");\n+\n+        if ((USER_DIR.length() > 2) && (USER_DIR.charAt(1) == ':')\n+            && (USER_DIR.charAt(2) == '\\\\'))\n+            return USER_DIR.charAt(0);\n+\n+        throw new RuntimeException(\"Current directory has no drive\");\n@@ -45,13 +57,21 @@\n-    private static void testWin32() throws Exception {\n-        String wd = System.getProperty(\"user.dir\");\n-        char d;\n-        if ((wd.length() > 2) && (wd.charAt(1) == ':')\n-            && (wd.charAt(2) == '\\\\'))\n-            d = wd.charAt(0);\n-        else\n-            throw new Exception(\"Current directory has no drive\");\n-        ck(\"\/foo\/bar\", d + \":\\\\foo\\\\bar\");\n-        ck(\"\\\\foo\\\\bar\", d + \":\\\\foo\\\\bar\");\n-        ck(\"c:\\\\foo\\\\bar\", \"c:\\\\foo\\\\bar\");\n-        ck(\"c:\/foo\/bar\", \"c:\\\\foo\\\\bar\");\n-        ck(\"\\\\\\\\foo\\\\bar\", \"\\\\\\\\foo\\\\bar\");\n+    private static Stream<Arguments> windowsSource() {\n+        char drive = driveLetter();\n+        return Stream.of(Arguments.of(\"\/foo\/bar\", drive + \":\\\\foo\\\\bar\"),\n+                         Arguments.of(\"\\\\foo\\\\bar\", drive + \":\\\\foo\\\\bar\"),\n+                         Arguments.of(\"c:\\\\foo\\\\bar\", \"c:\\\\foo\\\\bar\"),\n+                         Arguments.of(\"c:\/foo\/bar\", \"c:\\\\foo\\\\bar\"),\n+                         Arguments.of(\"\\\\\\\\foo\\\\bar\", \"\\\\\\\\foo\\\\bar\"),\n+                         Arguments.of(\"\", USER_DIR), \/\/ empty path\n+                         Arguments.of(\"\\\\\\\\?\\\\foo\", USER_DIR + \"\\\\foo\"),\n+                         Arguments.of(\"\\\\\\\\?\\\\C:\\\\Users\\\\x\", \"C:\\\\Users\\\\x\"),\n+                         Arguments.of(\"\\\\\\\\?\\\\\" + drive + \":\", USER_DIR),\n+                         Arguments.of(\"\\\\\\\\?\\\\\" + drive + \":bar\", USER_DIR + \"\\\\bar\"));\n+    }\n+\n+    @EnabledOnOs(OS.WINDOWS)\n+    @ParameterizedTest\n+    @MethodSource(\"windowsSource\")\n+    public void windows(String path, String absolute) throws IOException {\n+        assertEquals(absolute.toLowerCase(),\n+                     new File(path).getAbsolutePath().toLowerCase());\n+    }\n@@ -59,2 +79,5 @@\n-        \/* Tricky directory-relative case *\/\n-        d = Character.toLowerCase(d);\n+    @EnabledOnOs(OS.WINDOWS)\n+    @Test\n+    public void windowsDriveRelative() throws IOException {\n+        \/\/ Tricky directory-relative case\n+        char d = Character.toLowerCase(driveLetter());\n@@ -67,2 +90,2 @@\n-                String zwd = f.getCanonicalPath();\n-                ck(z + \":foo\", zwd + \"\\\\foo\");\n+                String zUSER_DIR = f.getCanonicalPath();\n+                assertEquals(z + \":foo\", zUSER_DIR + \"\\\\foo\");\n@@ -71,3 +94,0 @@\n-\n-        \/* Empty path *\/\n-        ck(\"\", wd);\n@@ -76,9 +96,6 @@\n-    private static void testUnix() throws Exception {\n-        String wd = System.getProperty(\"user.dir\");\n-        ck(\"foo\", wd + \"\/foo\");\n-        ck(\"foo\/bar\", wd + \"\/foo\/bar\");\n-        ck(\"\/foo\", \"\/foo\");\n-        ck(\"\/foo\/bar\", \"\/foo\/bar\");\n-\n-        \/* Empty path *\/\n-        ck(\"\", wd);\n+    private static Stream<Arguments> unixSource() {\n+        return Stream.of(Arguments.of(\"foo\", USER_DIR + \"\/foo\"),\n+                         Arguments.of(\"foo\/bar\", USER_DIR + \"\/foo\/bar\"),\n+                         Arguments.of(\"\/foo\", \"\/foo\"),\n+                         Arguments.of(\"\/foo\/bar\", \"\/foo\/bar\"),\n+                         Arguments.of(\"\", USER_DIR));\n@@ -87,6 +104,5 @@\n-    public static void main(String[] args) throws Exception {\n-        if (File.separatorChar == '\\\\') {\n-            ignoreCase = true;\n-            testWin32();\n-        }\n-        if (File.separatorChar == '\/') testUnix();\n+    @EnabledOnOs({OS.LINUX, OS.MAC})\n+    @ParameterizedTest\n+    @MethodSource(\"unixSource\")\n+    public void unix(String path, String absolute) throws IOException {\n+        assertEquals(absolute, new File(path).getAbsolutePath());\n@@ -94,1 +110,0 @@\n-\n","filename":"test\/jdk\/java\/io\/File\/GetAbsolutePath.java","additions":63,"deletions":48,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-    @ValueSource(strings = {\"\\\\\\\\?\", \"\\\\\\\\?\\\\\", \"\\\\\\\\?\\\\UNC\", \"\\\\\\\\?\\\\UNC\\\\\"})\n+    @ValueSource(strings = {\"\\\\\\\\?\", \"\\\\\\\\?\\\\UNC\", \"\\\\\\\\?\\\\UNC\\\\\"})\n","filename":"test\/jdk\/java\/io\/File\/GetCanonicalPath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 1998, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,3 @@\n-   @bug 4022397\n-   @summary General test for isAbsolute\n+ * @bug 4022397 8287843\n+ * @summary General test for isAbsolute\n+ * @run junit IsAbsolute\n@@ -29,1 +30,2 @@\n-import java.io.*;\n+import java.io.File;\n+import java.io.IOException;\n@@ -31,0 +33,5 @@\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -33,7 +40,5 @@\n-\n-    private static void ck(String path, boolean ans) throws Exception {\n-        File f = new File(path);\n-        boolean x = f.isAbsolute();\n-        if (x != ans)\n-            throw new Exception(path + \": expected \" + ans + \", got \" + x);\n-        System.err.println(path + \" ==> \" + x);\n+    @EnabledOnOs(OS.WINDOWS)\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"c:\\\\foo\\\\bar\", \"c:\/foo\/bar\", \"\\\\\\\\foo\\\\bar\"})\n+    public void windowsAbsolute(String path) throws IOException {\n+        assertTrue(new File(path).isAbsolute());\n@@ -42,7 +47,5 @@\n-    private static void testWin32() throws Exception {\n-        ck(\"\/foo\/bar\", false);\n-        ck(\"\\\\foo\\\\bar\", false);\n-        ck(\"c:\\\\foo\\\\bar\", true);\n-        ck(\"c:\/foo\/bar\", true);\n-        ck(\"c:foo\\\\bar\", false);\n-        ck(\"\\\\\\\\foo\\\\bar\", true);\n+    @EnabledOnOs(OS.WINDOWS)\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"\/foo\/bar\", \"\\\\foo\\\\bar\", \"c:foo\\\\bar\"})\n+    public void windowsNotAbsolute(String path) throws IOException {\n+        assertFalse(new File(path).isAbsolute());\n@@ -51,5 +54,5 @@\n-    private static void testUnix() throws Exception {\n-        ck(\"foo\", false);\n-        ck(\"foo\/bar\", false);\n-        ck(\"\/foo\", true);\n-        ck(\"\/foo\/bar\", true);\n+    @EnabledOnOs({OS.LINUX, OS.MAC})\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"\/foo\", \"\/foo\/bar\"})\n+    public void unixAbsolute(String path) throws IOException {\n+        assertTrue(new File(path).isAbsolute());\n@@ -58,3 +61,5 @@\n-    public static void main(String[] args) throws Exception {\n-        if (File.separatorChar == '\\\\') testWin32();\n-        if (File.separatorChar == '\/') testUnix();\n+    @EnabledOnOs({OS.LINUX, OS.MAC})\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"foo\", \"foo\/bar\"})\n+    public void unixNotAbsolute(String path) throws IOException {\n+        assertFalse(new File(path).isAbsolute());\n@@ -62,1 +67,0 @@\n-\n","filename":"test\/jdk\/java\/io\/File\/IsAbsolute.java","additions":31,"deletions":27,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8287843\n+ * @summary Basic test for Windows path prefixes\n+ * @run junit WindowsPrefixes\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class WindowsPrefixes {\n+\n+    private static final String USER_DIR = System.getProperty(\"user.dir\");\n+\n+    private static char driveLetter() {\n+        assert System.getProperty(\"os.name\").startsWith(\"Windows\");\n+\n+        if ((USER_DIR.length() > 2) && (USER_DIR.charAt(1) == ':')\n+            && (USER_DIR.charAt(2) == '\\\\'))\n+            return USER_DIR.charAt(0);\n+\n+        throw new RuntimeException(\"Current directory has no drive\");\n+    }\n+\n+    private static Stream<Arguments> paths() {\n+        return Stream.of(Arguments.of(\"\"),\n+                         Arguments.of(\"C:\\\\\"),\n+                         Arguments.of(\"C:\"),\n+                         Arguments.of(\"foo\"),\n+                         Arguments.of(\"foo\\\\bar\"),\n+                         Arguments.of(\"C:\\\\foo\"),\n+                         Arguments.of(\"C:foo\"),\n+                         Arguments.of(\"C:\\\\foo\\\\bar\"));\n+    }\n+\n+    \/\/@EnabledOnOs(OS.WINDOWS)\n+    @ParameterizedTest\n+    @MethodSource(\"paths\")\n+    public void getAbsolutePath(String path) throws IOException {\n+        File file = new File(path);\n+        File that = new File(\"\\\\\\\\?\\\\\" + path);\n+        assertEquals(file.getAbsolutePath(), that.getAbsolutePath());\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"paths\")\n+    public void getCanonicalPath(String path) throws IOException {\n+        File file = new File(path);\n+        File that = new File(\"\\\\\\\\?\\\\\" + path);\n+        assertEquals(file.getCanonicalPath(), that.getCanonicalPath());\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"paths\")\n+    public void getName(String path) throws IOException {\n+        File file = new File(path);\n+        File that = new File(\"\\\\\\\\?\\\\\" + path);\n+        assertEquals(file.getName(), that.getName());\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"paths\")\n+    public void getParent(String path) throws IOException {\n+        File file = new File(path);\n+        File that = new File(\"\\\\\\\\?\\\\\" + path);\n+        assertEquals(file.getParent(), that.getParent());\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"paths\")\n+    public void isAbsolute(String path) throws IOException {\n+        File file = new File(path);\n+        File that = new File(\"\\\\\\\\?\\\\\" + path);\n+        assertEquals(file.isAbsolute(), that.isAbsolute());\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/File\/WindowsPrefixes.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"}]}