{"files":[{"patch":"@@ -1154,0 +1154,5 @@\n+      \/\/ Special case for min_jint - it can't be negated.\n+      if (arg_val == min_jint) {\n+        return __ intcon(11);\n+      }\n+\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8267773\n+ * @summary test that fetching a static field produces the correct result\n+ * @library \/test\/lib \/\n+ * @run main compiler.stringopts.TestFetchStaticField\n+ *\/\n+\n+package compiler.stringopts;\n+\n+import java.lang.StringIndexOutOfBoundsException;\n+import jdk.test.lib.Asserts;\n+\n+public class TestFetchStaticField {\n+\n+    public void runTest() {\n+        System.out.println (\"Test: StringIndexOutOfBoundsException(Integer.MIN_VALUE)\");\n+        for (int i = 0; i < 100_000; i++ ) {\n+            run1Test(i);\n+        }\n+        System.out.println(\"Test finished.\");\n+    }\n+\n+    public static void main(String[] argv)\n+    {\n+        System.out.println(\"Running on:\");\n+        System.out.println(\"os.arch: \" + System.getProperty(\"os.arch\"));\n+        System.out.println(\"os.name: \" + System.getProperty(\"os.name\"));\n+        System.out.println(\"java.runtime.version: \" + System.getProperty(\"java.runtime.version\"));\n+        System.out.println(\"java.vm.name: \" + System.getProperty(\"java.vm.name\"));\n+        System.out.println(\"java.vm.version: \" + System.getProperty(\"java.vm.version\"));\n+\n+        TestFetchStaticField test = new TestFetchStaticField();\n+        test.runTest();\n+    }\n+\n+    public void run1Test(int i) {\n+        StringIndexOutOfBoundsException obj = new StringIndexOutOfBoundsException(Integer.MIN_VALUE);\n+        if (obj == null) {\n+            Asserts.fail(\"Failed: obj == null\");\n+        } else {\n+            if (!obj.toString().equals(\"java.lang.StringIndexOutOfBoundsException: String index out of range: -2147483648\")) {\n+                Asserts.fail(\"Failed on invocation \" + i + \": obj.toString() = \\\"\" + obj.toString() + \"\\\", not \\\"java.lang.StringIndexOutOfBoundsException: String index out of range: -2147483648\\\"\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/stringopts\/TestFetchStaticField.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}