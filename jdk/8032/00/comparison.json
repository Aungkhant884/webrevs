{"files":[{"patch":"@@ -1947,0 +1947,1 @@\n+\/\/ Currently only support Zba and Zbb.\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -94,1 +94,0 @@\n-  product(bool, UseRVB, false, EXPERIMENTAL, \"Use RVB instructions\")             \\\n@@ -96,0 +95,2 @@\n+  product(bool, UseZba, false, EXPERIMENTAL, \"Use Zba instructions\")             \\\n+  product(bool, UseZbb, false, EXPERIMENTAL, \"Use Zbb instructions\")             \\\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1473,1 +1473,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n@@ -1490,1 +1490,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n@@ -1507,1 +1507,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n@@ -1524,1 +1524,1 @@\n-  if (UseRVB) {\n+  if (UseZba && UseZbb) {\n@@ -1557,1 +1557,1 @@\n-  if (UseRVB) {\n+  if (UseZba && UseZbb) {\n@@ -1581,1 +1581,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n@@ -1595,1 +1595,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n@@ -1617,1 +1617,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n@@ -3563,1 +3563,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n@@ -3905,1 +3905,1 @@\n-  if (UseRVB) {\n+  if (UseZba) {\n@@ -3927,1 +3927,1 @@\n-  if (UseRVB) {\n+  if (UseZba && UseZbb) {\n@@ -3946,1 +3946,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1817,1 +1817,1 @@\n-      return UseRVB;\n+      return UseZbb;\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-instruct rorI_imm_rvb(iRegINoSp dst, iRegI src, immI shift) %{\n-  predicate(UseRVB);\n+instruct rorI_imm_b(iRegINoSp dst, iRegI src, immI shift) %{\n+  predicate(UseZbb);\n@@ -32,1 +32,1 @@\n-  format %{ \"roriw  $dst, $src, ($shift & 0x1f)\\t#@rorI_imm_rvb\" %}\n+  format %{ \"roriw  $dst, $src, ($shift & 0x1f)\\t#@rorI_imm_b\" %}\n@@ -42,2 +42,2 @@\n-instruct rorL_imm_rvb(iRegLNoSp dst, iRegL src, immI shift) %{\n-  predicate(UseRVB);\n+instruct rorL_imm_b(iRegLNoSp dst, iRegL src, immI shift) %{\n+  predicate(UseZbb);\n@@ -46,1 +46,1 @@\n-  format %{ \"rori  $dst, $src, ($shift & 0x3f)\\t#@rorL_imm_rvb\" %}\n+  format %{ \"rori  $dst, $src, ($shift & 0x3f)\\t#@rorL_imm_b\" %}\n@@ -56,2 +56,2 @@\n-instruct rorI_reg_rvb(iRegINoSp dst, iRegI src, iRegI shift) %{\n-  predicate(UseRVB);\n+instruct rorI_reg_b(iRegINoSp dst, iRegI src, iRegI shift) %{\n+  predicate(UseZbb);\n@@ -60,1 +60,1 @@\n-  format %{ \"rorw  $dst, $src, $shift\\t#@rorI_reg_rvb\" %}\n+  format %{ \"rorw  $dst, $src, $shift\\t#@rorI_reg_b\" %}\n@@ -68,2 +68,2 @@\n-instruct rorL_reg_rvb(iRegLNoSp dst, iRegL src, iRegI shift) %{\n-  predicate(UseRVB);\n+instruct rorL_reg_b(iRegLNoSp dst, iRegL src, iRegI shift) %{\n+  predicate(UseZbb);\n@@ -72,1 +72,1 @@\n-  format %{ \"ror  $dst, $src, $shift\\t#@rorL_reg_rvb\" %}\n+  format %{ \"ror  $dst, $src, $shift\\t#@rorL_reg_b\" %}\n@@ -80,2 +80,2 @@\n-instruct rolI_reg_rvb(iRegINoSp dst, iRegI src, iRegI shift) %{\n-  predicate(UseRVB);\n+instruct rolI_reg_b(iRegINoSp dst, iRegI src, iRegI shift) %{\n+  predicate(UseZbb);\n@@ -84,1 +84,1 @@\n-  format %{ \"rolw  $dst, $src, $shift\\t#@rolI_reg_rvb\" %}\n+  format %{ \"rolw  $dst, $src, $shift\\t#@rolI_reg_b\" %}\n@@ -92,2 +92,2 @@\n-instruct rolL_reg_rvb(iRegLNoSp dst, iRegL src, iRegI shift) %{\n-  predicate(UseRVB);\n+instruct rolL_reg_b(iRegLNoSp dst, iRegL src, iRegI shift) %{\n+  predicate(UseZbb);\n@@ -96,1 +96,1 @@\n-  format %{ \"rol  $dst, $src, $shift\\t#@rolL_reg_rvb\" %}\n+  format %{ \"rol  $dst, $src, $shift\\t#@rolL_reg_b\" %}\n@@ -105,2 +105,2 @@\n-instruct convP2I_rvb(iRegINoSp dst, iRegP src) %{\n-  predicate(UseRVB);\n+instruct convP2I_b(iRegINoSp dst, iRegP src) %{\n+  predicate(UseZba);\n@@ -109,1 +109,1 @@\n-  format %{ \"zext.w  $dst, $src\\t# ptr -> int @convP2I_rvb\" %}\n+  format %{ \"zext.w  $dst, $src\\t# ptr -> int @convP2I_b\" %}\n@@ -120,2 +120,2 @@\n-instruct convB2I_reg_reg_rvb(iRegINoSp dst, iRegIorL2I src, immI_24 lshift, immI_24 rshift) %{\n-  predicate(UseRVB);\n+instruct convB2I_reg_reg_b(iRegINoSp dst, iRegIorL2I src, immI_24 lshift, immI_24 rshift) %{\n+  predicate(UseZbb);\n@@ -124,1 +124,1 @@\n-  format %{ \"sext.b  $dst, $src\\t# b2i, #@convB2I_reg_reg_rvb\" %}\n+  format %{ \"sext.b  $dst, $src\\t# b2i, #@convB2I_reg_reg_b\" %}\n@@ -135,2 +135,2 @@\n-instruct convI2S_reg_reg_rvb(iRegINoSp dst, iRegIorL2I src, immI_16 lshift, immI_16 rshift) %{\n-  predicate(UseRVB);\n+instruct convI2S_reg_reg_b(iRegINoSp dst, iRegIorL2I src, immI_16 lshift, immI_16 rshift) %{\n+  predicate(UseZbb);\n@@ -139,1 +139,1 @@\n-  format %{ \"sext.h  $dst, $src\\t# i2s, #@convI2S_reg_reg_rvb\" %}\n+  format %{ \"sext.h  $dst, $src\\t# i2s, #@convI2S_reg_reg_b\" %}\n@@ -150,2 +150,2 @@\n-instruct convS2UI_reg_reg_rvb(iRegINoSp dst, iRegIorL2I src, immI_16bits mask) %{\n-  predicate(UseRVB);\n+instruct convS2UI_reg_reg_b(iRegINoSp dst, iRegIorL2I src, immI_16bits mask) %{\n+  predicate(UseZbb);\n@@ -154,1 +154,1 @@\n-  format %{ \"zext.h  $dst, $src\\t# s2ui, #@convS2UI_reg_reg_rvb\" %}\n+  format %{ \"zext.h  $dst, $src\\t# s2ui, #@convS2UI_reg_reg_b\" %}\n@@ -165,2 +165,2 @@\n-instruct convI2UL_reg_reg_rvb(iRegLNoSp dst, iRegIorL2I src, immL_32bits mask) %{\n-  predicate(UseRVB);\n+instruct convI2UL_reg_reg_b(iRegLNoSp dst, iRegIorL2I src, immL_32bits mask) %{\n+  predicate(UseZba);\n@@ -169,1 +169,1 @@\n-  format %{ \"zext.w  $dst, $src\\t# i2ul, #@convI2UL_reg_reg_rvb\" %}\n+  format %{ \"zext.w  $dst, $src\\t# i2ul, #@convI2UL_reg_reg_b\" %}\n@@ -180,2 +180,2 @@\n-instruct bytes_reverse_int_rvb(iRegINoSp dst, iRegIorL2I src) %{\n-  predicate(UseRVB);\n+instruct bytes_reverse_int_b(iRegINoSp dst, iRegIorL2I src) %{\n+  predicate(UseZbb);\n@@ -185,1 +185,1 @@\n-  format %{ \"revb_w_w  $dst, $src\\t#@bytes_reverse_int_rvb\" %}\n+  format %{ \"revb_w_w  $dst, $src\\t#@bytes_reverse_int_b\" %}\n@@ -194,2 +194,2 @@\n-instruct bytes_reverse_long_rvb(iRegLNoSp dst, iRegL src) %{\n-  predicate(UseRVB);\n+instruct bytes_reverse_long_b(iRegLNoSp dst, iRegL src) %{\n+  predicate(UseZbb);\n@@ -199,1 +199,1 @@\n-  format %{ \"rev8  $dst, $src\\t#@bytes_reverse_long_rvb\" %}\n+  format %{ \"rev8  $dst, $src\\t#@bytes_reverse_long_b\" %}\n@@ -208,2 +208,2 @@\n-instruct bytes_reverse_unsigned_short_rvb(iRegINoSp dst, iRegIorL2I src) %{\n-  predicate(UseRVB);\n+instruct bytes_reverse_unsigned_short_b(iRegINoSp dst, iRegIorL2I src) %{\n+  predicate(UseZbb);\n@@ -213,1 +213,1 @@\n-  format %{ \"revb_h_h_u  $dst, $src\\t#@bytes_reverse_unsigned_short_rvb\" %}\n+  format %{ \"revb_h_h_u  $dst, $src\\t#@bytes_reverse_unsigned_short_b\" %}\n@@ -222,2 +222,2 @@\n-instruct bytes_reverse_short_rvb(iRegINoSp dst, iRegIorL2I src) %{\n-  predicate(UseRVB);\n+instruct bytes_reverse_short_b(iRegINoSp dst, iRegIorL2I src) %{\n+  predicate(UseZbb);\n@@ -227,1 +227,1 @@\n-  format %{ \"revb_h_h  $dst, $src\\t#@bytes_reverse_short_rvb\" %}\n+  format %{ \"revb_h_h  $dst, $src\\t#@bytes_reverse_short_b\" %}\n@@ -237,2 +237,2 @@\n-instruct shaddP_reg_reg_rvb(iRegPNoSp dst, iRegP src1, iRegL src2, immIScale imm) %{\n-  predicate(UseRVB);\n+instruct shaddP_reg_reg_b(iRegPNoSp dst, iRegP src1, iRegL src2, immIScale imm) %{\n+  predicate(UseZba);\n@@ -242,1 +242,1 @@\n-  format %{ \"shadd  $dst, $src2, $src1, $imm\\t# ptr, #@shaddP_reg_reg_rvb\" %}\n+  format %{ \"shadd  $dst, $src2, $src1, $imm\\t# ptr, #@shaddP_reg_reg_b\" %}\n@@ -255,2 +255,2 @@\n-instruct shaddP_reg_reg_ext_rvb(iRegPNoSp dst, iRegP src1, iRegI src2, immIScale imm) %{\n-  predicate(UseRVB);\n+instruct shaddP_reg_reg_ext_b(iRegPNoSp dst, iRegP src1, iRegI src2, immIScale imm) %{\n+  predicate(UseZba);\n@@ -260,1 +260,1 @@\n-  format %{ \"shadd  $dst, $src2, $src1, $imm\\t# ptr, #@shaddP_reg_reg_ext_rvb\" %}\n+  format %{ \"shadd  $dst, $src2, $src1, $imm\\t# ptr, #@shaddP_reg_reg_ext_b\" %}\n@@ -274,2 +274,2 @@\n-instruct shaddL_reg_reg_rvb(iRegLNoSp dst, iRegL src1, iRegL src2, immIScale imm) %{\n-  predicate(UseRVB);\n+instruct shaddL_reg_reg_b(iRegLNoSp dst, iRegL src1, iRegL src2, immIScale imm) %{\n+  predicate(UseZba);\n@@ -279,1 +279,1 @@\n-  format %{ \"shadd  $dst, $src2, $src1, $imm\\t#@shaddL_reg_reg_rvb\" %}\n+  format %{ \"shadd  $dst, $src2, $src1, $imm\\t#@shaddL_reg_reg_b\" %}\n@@ -292,2 +292,2 @@\n-instruct shaddL_reg_reg_ext_rvb(iRegLNoSp dst, iRegL src1, iRegI src2, immIScale imm) %{\n-  predicate(UseRVB);\n+instruct shaddL_reg_reg_ext_b(iRegLNoSp dst, iRegL src1, iRegI src2, immIScale imm) %{\n+  predicate(UseZba);\n@@ -297,1 +297,1 @@\n-  format %{ \"shadd  $dst, $src2, $src1, $imm\\t#@shaddL_reg_reg_ext_rvb\" %}\n+  format %{ \"shadd  $dst, $src2, $src1, $imm\\t#@shaddL_reg_reg_ext_b\" %}\n@@ -311,2 +311,2 @@\n-instruct countLeadingZerosI_rvb(iRegINoSp dst, iRegIorL2I src) %{\n-  predicate(UseRVB);\n+instruct countLeadingZerosI_b(iRegINoSp dst, iRegIorL2I src) %{\n+  predicate(UseZbb);\n@@ -316,1 +316,1 @@\n-  format %{ \"clzw  $dst, $src\\t#@countLeadingZerosI_rvb\" %}\n+  format %{ \"clzw  $dst, $src\\t#@countLeadingZerosI_b\" %}\n@@ -325,2 +325,2 @@\n-instruct countLeadingZerosL_rvb(iRegINoSp dst, iRegL src) %{\n-  predicate(UseRVB);\n+instruct countLeadingZerosL_b(iRegINoSp dst, iRegL src) %{\n+  predicate(UseZbb);\n@@ -330,1 +330,1 @@\n-  format %{ \"clz  $dst, $src\\t#@countLeadingZerosL_rvb\" %}\n+  format %{ \"clz  $dst, $src\\t#@countLeadingZerosL_b\" %}\n@@ -339,2 +339,2 @@\n-instruct countTrailingZerosI_rvb(iRegINoSp dst, iRegIorL2I src) %{\n-  predicate(UseRVB);\n+instruct countTrailingZerosI_b(iRegINoSp dst, iRegIorL2I src) %{\n+  predicate(UseZbb);\n@@ -344,1 +344,1 @@\n-  format %{ \"ctzw  $dst, $src\\t#@countTrailingZerosI_rvb\" %}\n+  format %{ \"ctzw  $dst, $src\\t#@countTrailingZerosI_b\" %}\n@@ -353,2 +353,2 @@\n-instruct countTrailingZerosL_rvb(iRegINoSp dst, iRegL src) %{\n-  predicate(UseRVB);\n+instruct countTrailingZerosL_b(iRegINoSp dst, iRegL src) %{\n+  predicate(UseZbb);\n@@ -358,1 +358,1 @@\n-  format %{ \"ctz  $dst, $src\\t#@countTrailingZerosL_rvb\" %}\n+  format %{ \"ctz  $dst, $src\\t#@countTrailingZerosL_b\" %}\n@@ -368,1 +368,1 @@\n-instruct popCountI_rvb(iRegINoSp dst, iRegIorL2I src) %{\n+instruct popCountI_b(iRegINoSp dst, iRegIorL2I src) %{\n@@ -373,1 +373,1 @@\n-  format %{ \"cpopw  $dst, $src\\t#@popCountI_rvb\" %}\n+  format %{ \"cpopw  $dst, $src\\t#@popCountI_b\" %}\n@@ -383,1 +383,1 @@\n-instruct popCountL_rvb(iRegINoSp dst, iRegL src) %{\n+instruct popCountL_b(iRegINoSp dst, iRegL src) %{\n@@ -388,1 +388,1 @@\n-  format %{ \"cpop  $dst, $src\\t#@popCountL_rvb\" %}\n+  format %{ \"cpop  $dst, $src\\t#@popCountL_b\" %}\n@@ -398,2 +398,2 @@\n-instruct minI_reg_rvb(iRegINoSp dst, iRegI src1, iRegI src2) %{\n-  predicate(UseRVB);\n+instruct minI_reg_b(iRegINoSp dst, iRegI src1, iRegI src2) %{\n+  predicate(UseZbb);\n@@ -403,1 +403,1 @@\n-  format %{ \"min  $dst, $src1, $src2\\t#@minI_reg_rvb\" %}\n+  format %{ \"min  $dst, $src1, $src2\\t#@minI_reg_b\" %}\n@@ -412,2 +412,2 @@\n-instruct maxI_reg_rvb(iRegINoSp dst, iRegI src1, iRegI src2) %{\n-  predicate(UseRVB);\n+instruct maxI_reg_b(iRegINoSp dst, iRegI src1, iRegI src2) %{\n+  predicate(UseZbb);\n@@ -417,1 +417,1 @@\n-  format %{ \"max  $dst, $src1, $src2\\t#@maxI_reg_rvb\" %}\n+  format %{ \"max  $dst, $src1, $src2\\t#@maxI_reg_b\" %}\n@@ -427,2 +427,2 @@\n-instruct absI_reg_rvb(iRegINoSp dst, iRegI src) %{\n-  predicate(UseRVB);\n+instruct absI_reg_b(iRegINoSp dst, iRegI src) %{\n+  predicate(UseZbb);\n@@ -434,1 +434,1 @@\n-    \"max  $dst, $src, t0\\t#@absI_reg_rvb\"\n+    \"max  $dst, $src, t0\\t#@absI_reg_b\"\n@@ -445,2 +445,2 @@\n-instruct absL_reg_rvb(iRegLNoSp dst, iRegL src) %{\n-  predicate(UseRVB);\n+instruct absL_reg_b(iRegLNoSp dst, iRegL src) %{\n+  predicate(UseZbb);\n@@ -452,1 +452,1 @@\n-    \"max $dst, $src, t0\\t#@absL_reg_rvb\"\n+    \"max  $dst, $src, t0\\t#@absL_reg_b\"\n@@ -464,2 +464,2 @@\n-instruct andnI_reg_reg_rvb(iRegINoSp dst, iRegI src1, iRegI src2, immI_M1 m1) %{\n-  predicate(UseRVB);\n+instruct andnI_reg_reg_b(iRegINoSp dst, iRegI src1, iRegI src2, immI_M1 m1) %{\n+  predicate(UseZbb);\n@@ -469,1 +469,1 @@\n-  format %{ \"andn  $dst, $src1, $src2\\t#@andnI_reg_reg_rvb\" %}\n+  format %{ \"andn  $dst, $src1, $src2\\t#@andnI_reg_reg_b\" %}\n@@ -480,2 +480,2 @@\n-instruct andnL_reg_reg_rvb(iRegLNoSp dst, iRegL src1, iRegL src2, immL_M1 m1) %{\n-  predicate(UseRVB);\n+instruct andnL_reg_reg_b(iRegLNoSp dst, iRegL src1, iRegL src2, immL_M1 m1) %{\n+  predicate(UseZbb);\n@@ -485,1 +485,1 @@\n-  format %{ \"andn  $dst, $src1, $src2\\t#@andnL_reg_reg_rvb\" %}\n+  format %{ \"andn  $dst, $src1, $src2\\t#@andnL_reg_reg_b\" %}\n@@ -497,2 +497,2 @@\n-instruct ornI_reg_reg_rvb(iRegINoSp dst, iRegI src1, iRegI src2, immI_M1 m1) %{\n-  predicate(UseRVB);\n+instruct ornI_reg_reg_b(iRegINoSp dst, iRegI src1, iRegI src2, immI_M1 m1) %{\n+  predicate(UseZbb);\n@@ -502,1 +502,1 @@\n-  format %{ \"orn  $dst, $src1, $src2\\t#@ornI_reg_reg_rvb\" %}\n+  format %{ \"orn  $dst, $src1, $src2\\t#@ornI_reg_reg_b\" %}\n@@ -513,2 +513,2 @@\n-instruct ornL_reg_reg_rvb(iRegLNoSp dst, iRegL src1, iRegL src2, immL_M1 m1) %{\n-  predicate(UseRVB);\n+instruct ornL_reg_reg_b(iRegLNoSp dst, iRegL src1, iRegL src2, immL_M1 m1) %{\n+  predicate(UseZbb);\n@@ -518,1 +518,1 @@\n-  format %{ \"orn  $dst, $src1, $src2\\t#@ornL_reg_reg_rvb\" %}\n+  format %{ \"orn  $dst, $src1, $src2\\t#@ornL_reg_reg_b\" %}\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_b.ad","additions":97,"deletions":97,"binary":false,"changes":194,"status":"modified"},{"patch":"@@ -115,5 +115,0 @@\n-  if (UseRVB && !(_features & CPU_B)) {\n-    warning(\"RVB is not supported on this CPU\");\n-    FLAG_SET_DEFAULT(UseRVB, false);\n-  }\n-\n@@ -129,1 +124,1 @@\n-  if (UseRVB) {\n+  if (UseZbb) {\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -61,2 +61,1 @@\n-    decl(V,            \"v\",           21)     \\\n-    decl(B,            \"b\",            1)\n+    decl(V,            \"v\",           21)\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -63,4 +63,0 @@\n-#ifndef HWCAP_ISA_B\n-#define HWCAP_ISA_B  (1 << ('B' - 'A'))\n-#endif\n-\n@@ -93,1 +89,4 @@\n-  static_assert(CPU_B == HWCAP_ISA_B, \"Flag CPU_B must follow Linux HWCAP\");\n+\n+  \/\/ RISC-V has four bit-manipulation ISA-extensions: Zba\/Zbb\/Zbc\/Zbs.\n+  \/\/ Availability for those extensions could not be queried from HWCAP.\n+  \/\/ TODO: Add proper detection for those extensions.\n@@ -101,2 +100,1 @@\n-      HWCAP_ISA_V |\n-      HWCAP_ISA_B);\n+      HWCAP_ISA_V);\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/vm_version_linux_riscv.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"}]}