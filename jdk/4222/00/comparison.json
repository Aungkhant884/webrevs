{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1293,0 +1293,8 @@\n+    \/\/ used for testing\n+    int getSendBufferSize() {\n+        return Utils.getIntegerNetProperty(\n+                \"jdk.httpclient.sendBufferSize\",\n+                0 \/\/ only set the size if > 0\n+        );\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpClientImpl.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -270,1 +270,0 @@\n-            trySetReceiveBufferSize(client.getReceiveBufferSize());\n@@ -272,1 +271,1 @@\n-                int bufsize = getInitialBufferSize();\n+                int bufsize = getSoReceiveBufferSize();\n@@ -274,0 +273,14 @@\n+                bufsize = getSoSendBufferSize();\n+                debug.log(\"Initial send buffer size is: %d\", bufsize);\n+            }\n+            if (trySetReceiveBufferSize(client.getReceiveBufferSize())) {\n+                if (debug.on()) {\n+                    int bufsize = getSoReceiveBufferSize();\n+                    debug.log(\"Receive buffer size configured: %d\", bufsize);\n+                }\n+            }\n+            if (trySetSendBufferSize(client.getSendBufferSize())) {\n+                if (debug.on()) {\n+                    int bufsize = getSoSendBufferSize();\n+                    debug.log(\"Send buffer size configured: %d\", bufsize);\n+                }\n@@ -283,1 +296,1 @@\n-    private int getInitialBufferSize() {\n+    private int getSoReceiveBufferSize() {\n@@ -293,1 +306,11 @@\n-    private void trySetReceiveBufferSize(int bufsize) {\n+    private int getSoSendBufferSize() {\n+        try {\n+            return chan.getOption(StandardSocketOptions.SO_SNDBUF);\n+        } catch(IOException x) {\n+            if (debug.on())\n+                debug.log(\"Failed to get initial receive buffer size on %s\", chan);\n+        }\n+        return 0;\n+    }\n+\n+    private boolean trySetReceiveBufferSize(int bufsize) {\n@@ -297,0 +320,1 @@\n+                return true;\n@@ -303,0 +327,15 @@\n+        return false;\n+    }\n+\n+    private boolean trySetSendBufferSize(int bufsize) {\n+        try {\n+            if (bufsize > 0) {\n+                chan.setOption(StandardSocketOptions.SO_SNDBUF, bufsize);\n+                return true;\n+            }\n+        } catch(IOException x) {\n+            if (debug.on())\n+                debug.log(\"Failed to set send buffer size to %d on %s\",\n+                        bufsize, chan);\n+        }\n+        return false;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/PlainHttpConnection.java","additions":43,"deletions":4,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -611,5 +611,0 @@\n-\n-java\/net\/httpclient\/websocket\/PendingBinaryPongClose.java       8265367 macosx-aarch64\n-java\/net\/httpclient\/websocket\/PendingBinaryPingClose.java       8265367 macosx-aarch64\n-java\/net\/httpclient\/websocket\/PendingPongBinaryClose.java       8265367 macosx-aarch64\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n-import static java.net.http.HttpClient.newHttpClient;\n@@ -106,1 +105,1 @@\n-            webSocket = newHttpClient().newWebSocketBuilder()\n+            webSocket = httpClient().newWebSocketBuilder()\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/BlowupOutputQueue.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -95,0 +95,1 @@\n+    private volatile int receiveBufferSize;\n@@ -220,0 +221,5 @@\n+    public void setReceiveBufferSize(int bufsize) {\n+        assert ssc == null : \"Must configure before calling open()\";\n+        this.receiveBufferSize = bufsize;\n+    }\n+\n@@ -228,0 +234,9 @@\n+            var bufsize = receiveBufferSize;\n+            if (bufsize > 0) {\n+                err.printf(\"Configuring receive buffer size to %d%n\", bufsize);\n+                try {\n+                    ssc.setOption(StandardSocketOptions.SO_RCVBUF, bufsize);\n+                } catch (IOException x) {\n+                    err.printf(\"Failed to configure receive buffer size to %d%n\", bufsize);\n+                }\n+            }\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/DummyWebSocketServer.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,2 +40,0 @@\n-import static java.net.http.HttpClient.Builder.NO_PROXY;\n-import static java.net.http.HttpClient.newBuilder;\n@@ -54,1 +52,1 @@\n-            webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n+            webSocket = httpClient().newWebSocketBuilder()\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingBinaryPingClose.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-            webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n+            webSocket = httpClient().newWebSocketBuilder()\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingBinaryPongClose.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import org.testng.annotations.AfterTest;\n+import org.testng.annotations.AfterMethod;\n@@ -28,0 +28,1 @@\n+import java.net.http.HttpClient;\n@@ -34,0 +35,3 @@\n+import static java.net.http.HttpClient.Builder.NO_PROXY;\n+import static java.net.http.HttpClient.newBuilder;\n+\n@@ -48,1 +52,5 @@\n-    @AfterTest\n+    protected HttpClient httpClient() {\n+        return newBuilder().proxy(NO_PROXY).build();\n+    }\n+\n+    @AfterMethod\n@@ -50,0 +58,3 @@\n+        \/\/ make sure we have a trace both on System.out and System.err\n+        \/\/ to help with diagnosis.\n+        System.out.println(\"cleanup: Closing server\");\n@@ -84,2 +95,2 @@\n-    static void repeatable(Callable<Void> callable,\n-                           BooleanSupplier repeatCondition)\n+    void repeatable(Callable<Void> callable,\n+                    BooleanSupplier repeatCondition)\n@@ -104,0 +115,1 @@\n+                    try { cleanup(); } catch (Throwable x) {}\n@@ -108,0 +120,5 @@\n+            } finally {\n+                \/\/ gives some time to gc to cleanup any resource that might\n+                \/\/ be eligible for garbage collection\n+                System.gc();\n+                Thread.sleep(100);\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingOperations.java","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,0 @@\n-import static java.net.http.HttpClient.Builder.NO_PROXY;\n-import static java.net.http.HttpClient.newBuilder;\n@@ -56,1 +54,1 @@\n-            webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n+            webSocket = httpClient().newWebSocketBuilder()\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingPingBinaryClose.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,0 @@\n-import static java.net.http.HttpClient.Builder.NO_PROXY;\n-import static java.net.http.HttpClient.newBuilder;\n@@ -58,3 +56,2 @@\n-                webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n-                        .buildAsync(server.getURI(), new WebSocket.Listener() {\n-                        })\n+                webSocket = httpClient().newWebSocketBuilder()\n+                        .buildAsync(server.getURI(), new WebSocket.Listener() { })\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingPingTextClose.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,0 @@\n-import static java.net.http.HttpClient.Builder.NO_PROXY;\n-import static java.net.http.HttpClient.newBuilder;\n@@ -56,1 +54,1 @@\n-            webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n+            webSocket = httpClient().newWebSocketBuilder()\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingPongBinaryClose.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,4 +43,0 @@\n-import static java.net.http.HttpClient.Builder.NO_PROXY;\n-import static java.net.http.HttpClient.newBuilder;\n-import static java.net.http.HttpClient.newHttpClient;\n-\n@@ -58,1 +54,1 @@\n-            webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n+            webSocket = httpClient().newWebSocketBuilder()\n@@ -83,1 +79,1 @@\n-            return  null;\n+            return null;\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingPongTextClose.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ *      -Djdk.httpclient.sendBufferSize=8192\n@@ -41,2 +42,0 @@\n-import static java.net.http.HttpClient.Builder.NO_PROXY;\n-import static java.net.http.HttpClient.newBuilder;\n@@ -54,0 +53,1 @@\n+            server.setReceiveBufferSize(1024);\n@@ -55,1 +55,1 @@\n-            webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n+            webSocket = httpClient().newWebSocketBuilder()\n@@ -64,0 +64,1 @@\n+                    if (!cfText.isDone()) System.gc();\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingTextPingClose.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,0 @@\n-import static java.net.http.HttpClient.Builder.NO_PROXY;\n-import static java.net.http.HttpClient.newBuilder;\n@@ -55,1 +53,1 @@\n-            webSocket = newBuilder().proxy(NO_PROXY).build().newWebSocketBuilder()\n+            webSocket = httpClient().newWebSocketBuilder()\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/PendingTextPongClose.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}