{"files":[{"patch":"@@ -1,90 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Stress defining hidden classes.\n- * @requires !vm.graal.enabled\n- * @library \/test\/lib\n- * @modules jdk.compiler\n- * @run main\/othervm\/timeout=900 StressHiddenClasses\n- *\/\n-\n-import java.lang.invoke.MethodType;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodHandles.Lookup;\n-import static java.lang.invoke.MethodHandles.Lookup.ClassOption.*;\n-import jdk.test.lib.compiler.InMemoryJavaCompiler;\n-\n-public class StressHiddenClasses {\n-\n-    private static final int PARSE_TIMEOUT = 0;\n-    private static final int ITERATIONS = 40000;\n-\n-    static byte klassbuf[] = InMemoryJavaCompiler.compile(\"TestClass\",\n-        \"public class TestClass { \" +\n-        \"    public static void concat(String one, String two) throws Throwable { \" +\n-        \"        System.out.println(one + two);\" +\n-        \" } } \");\n-\n-\n-    public void run() throws Exception {\n-        for (int x = 0; x < ITERATIONS; x++) {\n-            Thread parserThread  = new Thread() {\n-                public void run() {\n-                    try {\n-                        Lookup lookup = MethodHandles.lookup();\n-                        Class<?> c = lookup.defineHiddenClass(klassbuf, true, NESTMATE).lookupClass();\n-                    } catch (Throwable e) {\n-                        throw new RuntimeException(\"Unexpected exception: \" + e.toString());\n-                    }\n-                }\n-            };\n-\n-            if (x % 1000 == 0) {\n-                System.out.println(\"Executing iteration: \" + x);\n-            }\n-            parserThread.start();\n-            parserThread.join(PARSE_TIMEOUT);\n-\n-            \/\/ This code won't get executed as long as PARSE_TIMEOUT == 0.\n-            if (parserThread.isAlive()) {\n-                System.out.println(\"parser thread may be hung!\");\n-                StackTraceElement[] stack = parserThread.getStackTrace();\n-                System.out.println(\"parser thread stack len: \" + stack.length);\n-                System.out.println(parserThread + \" stack trace:\");\n-                for (int i = 0; i < stack.length; ++i) {\n-                    System.out.println(parserThread + \"\\tat \" + stack[i]);\n-                }\n-\n-                parserThread.join(); \/\/ Wait until either thread finishes or test times out.\n-            }\n-        }\n-    }\n-\n-\n-    public static void main(String[] args) throws Throwable {\n-        StressHiddenClasses shc = new StressHiddenClasses();\n-        shc.run();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/HiddenClasses\/StressHiddenClasses.java","additions":0,"deletions":90,"binary":false,"changes":90,"status":"deleted"}]}