{"files":[{"patch":"@@ -639,0 +639,1 @@\n+  ciKlass* ciKlass = get_klass(klass);\n@@ -640,1 +641,7 @@\n-  return get_klass(klass);\n+#ifndef PRODUCT\n+  if (ReplayCompiles && ciKlass == _unloaded_ciinstance_klass) {\n+    \/\/ Klass was unresolved at replay dump time and therefore not accessible.\n+    is_accessible = false;\n+  }\n+#endif\n+  return ciKlass;\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"ci\/ciReplay.hpp\"\n@@ -190,0 +191,9 @@\n+#ifndef PRODUCT\n+      if (ReplayCompiles && o->is_klass()) {\n+        Klass* k = (Klass*)o;\n+        if (k->is_instance_klass() && ciReplay::is_klass_unresolved((InstanceKlass*)k)) {\n+          \/\/ Klass was unresolved at replay dump time. Simulate this case.\n+          return ciEnv::_unloaded_ciinstance_klass;\n+        }\n+      }\n+#endif\n","filename":"src\/hotspot\/share\/ci\/ciEnv.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+  friend class ciReplay;\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -381,0 +381,1 @@\n+      assert(!ReplayCompiles || ciReplay::no_replay_state() || !ciReplay::is_klass_unresolved((InstanceKlass*)k), \"must be whitelisted for replay compilation\");\n","filename":"src\/hotspot\/share\/ci\/ciObjectFactory.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+#include \"runtime\/jniHandles.inline.hpp\"\n@@ -93,0 +94,5 @@\n+typedef struct _ciInstanceKlassRecord {\n+  const InstanceKlass* _klass;\n+  jobject _java_mirror; \/\/ Global handle to java mirror to prevent unloading\n+} ciInstanceKlassRecord;\n+\n@@ -114,0 +120,1 @@\n+  GrowableArray<ciInstanceKlassRecord*> _ci_instance_klass_records;\n@@ -885,1 +892,1 @@\n-    InstanceKlass* k = (InstanceKlass *)parse_klass(CHECK);\n+    InstanceKlass* k = (InstanceKlass*)parse_klass(CHECK);\n@@ -908,0 +915,1 @@\n+    new_ciInstanceKlass(k);\n@@ -954,4 +962,4 @@\n-          if (tag == JVM_CONSTANT_Class) {\n-          } else if (tag == JVM_CONSTANT_UnresolvedClass) {\n-            tty->print_cr(\"Warning: entry was unresolved in the replay data\");\n-          } else {\n+          if (tag == JVM_CONSTANT_UnresolvedClass) {\n+            Klass* k = cp->klass_at(i, CHECK);\n+            tty->print_cr(\"Warning: entry was unresolved in the replay data: %s\", k->name()->as_utf8());\n+          } else if (tag != JVM_CONSTANT_Class) {\n@@ -1135,0 +1143,22 @@\n+  \/\/ Create and initialize a record for a ciInstanceKlass which was present at replay dump time.\n+  void new_ciInstanceKlass(const InstanceKlass* klass) {\n+    ciInstanceKlassRecord* rec = NEW_RESOURCE_OBJ(ciInstanceKlassRecord);\n+    rec->_klass = klass;\n+    oop java_mirror = klass->java_mirror();\n+    Handle h_java_mirror(_thread, java_mirror);\n+    rec->_java_mirror = JNIHandles::make_global(h_java_mirror);\n+    _ci_instance_klass_records.append(rec);\n+  }\n+\n+  \/\/ Check if a ciInstanceKlass was present at replay dump time for a klass.\n+  ciInstanceKlassRecord* find_ciInstanceKlass(const InstanceKlass* klass) {\n+    for (int i = 0; i < _ci_instance_klass_records.length(); i++) {\n+      ciInstanceKlassRecord* rec = _ci_instance_klass_records.at(i);\n+      if (klass == rec->_klass) {\n+        \/\/ ciInstanceKlass for this klass was resolved.\n+        return rec;\n+      }\n+    }\n+    return NULL;\n+  }\n+\n@@ -1268,0 +1298,4 @@\n+bool ciReplay::no_replay_state() {\n+  return replay_state == NULL;\n+}\n+\n@@ -1339,1 +1373,1 @@\n-  if (replay_state == NULL) {\n+  if (no_replay_state()) {\n@@ -1393,1 +1427,1 @@\n-  if (replay_state == NULL) {\n+  if (no_replay_state()) {\n@@ -1430,1 +1464,1 @@\n-  if (replay_state == NULL) {\n+  if (no_replay_state()) {\n@@ -1459,0 +1493,9 @@\n+void ciReplay::initialize(ciInstanceKlass* ci_ik, InstanceKlass* ik) {\n+  assert(!no_replay_state(), \"must have replay state\");\n+\n+  ASSERT_IN_VM;\n+  ciInstanceKlassRecord* rec = replay_state->find_ciInstanceKlass(ik);\n+  assert(rec != NULL, \"ciInstanceKlass must be whitelisted\");\n+  ci_ik->_java_mirror = CURRENT_ENV->get_instance(JNIHandles::resolve(rec->_java_mirror));\n+}\n+\n@@ -1460,1 +1503,1 @@\n-  if (replay_state == NULL) {\n+  if (no_replay_state()) {\n@@ -1470,0 +1513,10 @@\n+\n+bool ciReplay::is_klass_unresolved(const InstanceKlass* klass) {\n+  if (no_replay_state()) {\n+    return false;\n+  }\n+\n+  \/\/ Check if klass is found on whitelist.\n+  ciInstanceKlassRecord* rec = replay_state->find_ciInstanceKlass(klass);\n+  return rec == NULL;\n+}\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":62,"deletions":9,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -109,0 +109,1 @@\n+  static bool no_replay_state();\n@@ -117,0 +118,1 @@\n+  static void initialize(ciInstanceKlass* ciKlass, InstanceKlass* ik);\n@@ -118,0 +120,1 @@\n+  static bool is_klass_unresolved(const InstanceKlass* klass);\n","filename":"src\/hotspot\/share\/ci\/ciReplay.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-    private static void remove(String item) {\n+    public static void remove(String item) {\n@@ -167,2 +167,2 @@\n-                options.add(\"-XX:CompileOnly='\" + TestMain.class.getName() + \"::test'\");\n-                options.add(\"'\" + TestMain.class.getName() + \"'\");\n+                options.add(\"-XX:CompileOnly='\" + getTestClass() + \"::test'\");\n+                options.add(\"'\" + getTestClass() + \"'\");\n@@ -173,2 +173,2 @@\n-                options.add(\"-XX:CompileOnly=\" + TestMain.class.getName() + \"::test\");\n-                options.add(TestMain.class.getName());\n+                options.add(\"-XX:CompileOnly=\" + getTestClass() + \"::test\");\n+                options.add(getTestClass());\n@@ -197,0 +197,4 @@\n+    public String getTestClass() {\n+        return TestMain.class.getName();\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/CiReplayBase.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8262912\n+ * @library \/ \/test\/lib\n+ * @summary Test class resolution based on whitelist created by ciInstanceKlass entries in replay file.\n+ * @requires vm.flightRecorder != true & vm.compMode != \"Xint\" & vm.debug == true & vm.compiler2.enabled\n+ * @modules java.base\/jdk.internal.misc\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *      compiler.ciReplay.TestUnresolvedClasses\n+ *\/\n+\n+package compiler.ciReplay;\n+\n+import jdk.test.lib.Asserts;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class TestUnresolvedClasses extends CiReplayBase {\n+    private static final String LOG_FILE = \"hotspot.log\";\n+    private static final String[] COMMAND_LINE = new String[] {\"-XX:LogFile='\" + LOG_FILE + \"'\", \"-XX:+LogCompilation\", \"-XX:+PrintIdeal\",\n+                                                               \"-XX:CompileCommand=dontinline,compiler.ciReplay.Test::dontInline\"};\n+    public static void main(String[] args) {\n+        new TestUnresolvedClasses().runTest(false, TIERED_DISABLED_VM_OPTION);\n+    }\n+\n+    @Override\n+    public String getTestClass() {\n+        return Test.class.getName();\n+    }\n+\n+    @Override\n+    public void testAction() {\n+        positiveTest(COMMAND_LINE);\n+        \/\/ Should find CallStaticJava node for dontInline() as f.bar() is resolved and parsing completes.\n+        checkLogFile(true);\n+\n+        \/\/ Remove ciInstanceKlass entry for Foo in replay file.\n+        try {\n+            Path replayFilePath = Paths.get(REPLAY_FILE_NAME);\n+            List<String> replayContent = Files.readAllLines(replayFilePath);\n+            List<String> newReplayContent = new ArrayList<>();\n+            boolean foundFoo = false;\n+            for (String line : replayContent) {\n+                if (!line.startsWith(\"ciInstanceKlass compiler\/ciReplay\/Foo\")) {\n+                    newReplayContent.add(line);\n+                } else {\n+                    foundFoo = true;\n+                }\n+            }\n+            Asserts.assertTrue(foundFoo, \"Did not find ciInstanceKlass compiler\/ciReplay\/Foo entry\");\n+            Files.write(replayFilePath, newReplayContent, StandardOpenOption.TRUNCATE_EXISTING);\n+        } catch (IOException ioe) {\n+            throw new Error(\"Failed to read\/write replay data: \" + ioe, ioe);\n+        }\n+\n+        positiveTest(COMMAND_LINE);\n+        \/\/ No ciInstanceKlass entry for Foo is found in the replay. Replay compilation simulates that Foo is unresolved.\n+        \/\/ Therefore, C2 cannot resolve f.bar() at parsing time. It emits an UCT to resolve Foo and stops parsing.\n+        \/\/ The call to dontInline() will not be parsed and thus we should not find a CallStaticJava node for it.\n+        checkLogFile(false);\n+        remove(LOG_FILE);\n+    }\n+\n+    \/\/ Parse <ideal> entry in hotspot.log file and try to find the call for dontInline().\n+    private void checkLogFile(boolean shouldMatch) {\n+        String toMatch = \"Test::dontInline\";\n+        try (var br = Files.newBufferedReader(Paths.get(LOG_FILE))) {\n+            String line;\n+            boolean printIdealLine = false;\n+            while ((line = br.readLine()) != null) {\n+                if (printIdealLine) {\n+                    if (line.startsWith(\"<\/ideal\")) {\n+                        break;\n+                    }\n+                    if (line.contains(toMatch)) {\n+                        Asserts.assertTrue(line.contains(\"CallStaticJava\"), \"must be CallStaticJava node\");\n+                        Asserts.assertTrue(shouldMatch, \"Should not have found \" + toMatch);\n+                        return;\n+                    }\n+                } else {\n+                    printIdealLine = line.startsWith(\"<ideal\");\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new Error(\"Failed to read \" + LOG_FILE + \" data: \" + e, e);\n+        }\n+        Asserts.assertFalse(shouldMatch, \"Should have found \" + toMatch);\n+    }\n+}\n+\n+class Test {\n+    static Foo f = new Foo();\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10000; i++) {\n+            test();\n+        }\n+    }\n+\n+    public static void test() {\n+        f.bar();\n+        \/\/ At replay compilation: Should emit UCT for f.bar() because class Foo is unloaded. Parsing stops here.\n+        \/\/ dontInline() is not parsed anymore.\n+        dontInline();\n+    }\n+\n+    \/\/ Not inlined\n+    public static void dontInline() {\n+    }\n+}\n+\n+class Foo {\n+    public int bar() {\n+        return 3;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/TestUnresolvedClasses.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"}]}