{"files":[{"patch":"@@ -175,17 +175,0 @@\n-    \/*\n-     * First check to see if versions are explicitly compatible via the\n-     * list specified above.\n-     *\/\n-    int i;\n-    for (i = 0; i < nof_compatible_versions; ++i) {\n-        version_type runtime = compatible_versions_list[i].runtime;\n-        version_type comptime = compatible_versions_list[i].compiletime;\n-\n-        if ((major_runtime     == runtime.major  || runtime.major  == -1) &&\n-            (minor_runtime     == runtime.minor  || runtime.minor  == -1) &&\n-            (major_compiletime == comptime.major || comptime.major == -1) &&\n-            (minor_compiletime == comptime.minor || comptime.minor == -1)) {\n-            return JNI_TRUE;\n-        }\n-    }\n-\n@@ -234,14 +217,0 @@\n-    \/* Get the JVMTI Env, IMPORTANT: Do this first! For jvmtiAllocate(). *\/\n-    error = JVM_FUNC_PTR(vm,GetEnv)\n-                (vm, (void **)&(gdata->jvmti), JVMTI_VERSION_1);\n-    if (error != JNI_OK) {\n-        ERROR_MESSAGE((\"JDWP unable to access JVMTI Version 1 (0x%x),\"\n-                         \" is your J2SE a 1.5 or newer version?\"\n-                         \" JNIEnv's GetEnv() returned %d\",\n-                         JVMTI_VERSION_1, error));\n-        forceExit(1); \/* Kill entire process, no core dump *\/\n-    }\n-\n-    \/* Check to make sure the version of jvmti.h we compiled with\n-     *      matches the runtime version we are using.\n-     *\/\n@@ -255,3 +224,14 @@\n-    \/* Check for compatibility *\/\n-    if ( !compatible_versions(jvmtiMajorVersion(), jvmtiMinorVersion(),\n-                jvmtiCompileTimeMajorVersion, jvmtiCompileTimeMinorVersion) ) {\n+    \/* Get the JVMTI Env, IMPORTANT: Do this first! For jvmtiAllocate(). *\/\n+    error = JVM_FUNC_PTR(vm,GetEnv)\n+                (vm, (void **)&(gdata->jvmti), JVMTI_VERSION);\n+    if (error != JNI_OK) {\n+        ERROR_MESSAGE((\"JDWP unable to access JVMTI Version %d.%d.%d (0x%x).\"\n+                       \" JNIEnv's GetEnv() returned %d.\",\n+                       jvmtiCompileTimeMajorVersion, jvmtiCompileTimeMinorVersion,\n+                       jvmtiCompileTimeMicroVersion, JVMTI_VERSION, error));\n+        forceExit(1); \/* Kill entire process, no core dump *\/\n+    }\n+\n+    \/* Check that the JVMTI compile and runtime versions are compatibile. *\/\n+    if (!compatible_versions(jvmtiMajorVersion(), jvmtiMinorVersion(),\n+                              jvmtiCompileTimeMajorVersion, jvmtiCompileTimeMinorVersion)) {\n@@ -260,1 +240,1 @@\n-                       \"version of JVMTI (%d.%d.%d), it needs JVMTI %d.%d[.%d].\",\n+                       \"version of JVMTI (%d.%d.%d). It needs JVMTI %d.%d[.%d].\",\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/debugInit.c","additions":15,"deletions":35,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1737,1 +1737,1 @@\n-                     (gdata->jvm, (void **)&jvmti, JVMTI_VERSION_1);\n+                     (gdata->jvm, (void **)&jvmti, JVMTI_VERSION);\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/util.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}