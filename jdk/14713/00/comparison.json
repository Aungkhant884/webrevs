{"files":[{"patch":"@@ -77,1 +77,1 @@\n-NO_TRANSITION(void, jfr_register_natives(JNIEnv* env, jclass jvmclass))\n+NO_TRANSITION(void, jfr_register_natives(JNIEnv* env, jclass jvm))\n@@ -81,13 +81,1 @@\n-NO_TRANSITION(jboolean, jfr_is_enabled())\n-  return Jfr::is_enabled() ? JNI_TRUE : JNI_FALSE;\n-NO_TRANSITION_END\n-\n-NO_TRANSITION(jboolean, jfr_is_disabled())\n-  return Jfr::is_disabled() ? JNI_TRUE : JNI_FALSE;\n-NO_TRANSITION_END\n-\n-NO_TRANSITION(jboolean, jfr_is_started())\n-  return JfrRecorder::is_created() ? JNI_TRUE : JNI_FALSE;\n-NO_TRANSITION_END\n-\n-NO_TRANSITION(jstring, jfr_get_pid(JNIEnv* env, jobject jvm))\n+NO_TRANSITION(jstring, jfr_get_pid(JNIEnv* env, jclass jvm))\n@@ -100,1 +88,1 @@\n-NO_TRANSITION(jlong, jfr_elapsed_frequency(JNIEnv* env, jobject jvm))\n+NO_TRANSITION(jlong, jfr_elapsed_frequency(JNIEnv* env, jclass jvm))\n@@ -104,1 +92,1 @@\n-NO_TRANSITION(jlong, jfr_elapsed_counter(JNIEnv* env, jobject jvm))\n+NO_TRANSITION(jlong, jfr_elapsed_counter(JNIEnv* env, jclass jvm))\n@@ -108,1 +96,1 @@\n-NO_TRANSITION(void, jfr_retransform_classes(JNIEnv* env, jobject jvm, jobjectArray classes))\n+NO_TRANSITION(void, jfr_retransform_classes(JNIEnv* env, jclass jvm, jobjectArray classes))\n@@ -112,1 +100,1 @@\n-NO_TRANSITION(void, jfr_set_enabled(JNIEnv* env, jobject jvm, jlong event_type_id, jboolean enabled))\n+NO_TRANSITION(void, jfr_set_enabled(JNIEnv* env, jclass jvm, jlong event_type_id, jboolean enabled))\n@@ -124,1 +112,1 @@\n-NO_TRANSITION(void, jfr_set_file_notification(JNIEnv* env, jobject jvm, jlong threshold))\n+NO_TRANSITION(void, jfr_set_file_notification(JNIEnv* env, jclass jvm, jlong threshold))\n@@ -128,1 +116,1 @@\n-NO_TRANSITION(void, jfr_set_stack_depth(JNIEnv* env, jobject jvm, jint depth))\n+NO_TRANSITION(void, jfr_set_stack_depth(JNIEnv* env, jclass jvm, jint depth))\n@@ -132,1 +120,1 @@\n-NO_TRANSITION(void, jfr_set_stacktrace_enabled(JNIEnv* env, jobject jvm, jlong event_type_id, jboolean enabled))\n+NO_TRANSITION(void, jfr_set_stacktrace_enabled(JNIEnv* env, jclass jvm, jlong event_type_id, jboolean enabled))\n@@ -136,1 +124,1 @@\n-NO_TRANSITION(void, jfr_set_global_buffer_count(JNIEnv* env, jobject jvm, jlong count))\n+NO_TRANSITION(void, jfr_set_global_buffer_count(JNIEnv* env, jclass jvm, jlong count))\n@@ -140,1 +128,1 @@\n-NO_TRANSITION(void, jfr_set_global_buffer_size(JNIEnv* env, jobject jvm, jlong size))\n+NO_TRANSITION(void, jfr_set_global_buffer_size(JNIEnv* env, jclass jvm, jlong size))\n@@ -144,1 +132,1 @@\n-NO_TRANSITION(void, jfr_set_thread_buffer_size(JNIEnv* env, jobject jvm, jlong size))\n+NO_TRANSITION(void, jfr_set_thread_buffer_size(JNIEnv* env, jclass jvm, jlong size))\n@@ -148,1 +136,1 @@\n-NO_TRANSITION(void, jfr_set_memory_size(JNIEnv* env, jobject jvm, jlong size))\n+NO_TRANSITION(void, jfr_set_memory_size(JNIEnv* env, jclass jvm, jlong size))\n@@ -152,1 +140,1 @@\n-NO_TRANSITION(jboolean, jfr_set_threshold(JNIEnv* env, jobject jvm, jlong event_type_id, jlong thresholdTicks))\n+NO_TRANSITION(jboolean, jfr_set_threshold(JNIEnv* env, jclass jvm, jlong event_type_id, jlong thresholdTicks))\n@@ -156,1 +144,1 @@\n-NO_TRANSITION(jboolean, jfr_allow_event_retransforms(JNIEnv* env, jobject jvm))\n+NO_TRANSITION(jboolean, jfr_allow_event_retransforms(JNIEnv* env, jclass jvm))\n@@ -164,1 +152,1 @@\n-NO_TRANSITION(jlong, jfr_get_unloaded_event_classes_count(JNIEnv* env, jobject jvm))\n+NO_TRANSITION(jlong, jfr_get_unloaded_event_classes_count(JNIEnv* env, jclass jvm))\n@@ -168,1 +156,1 @@\n-NO_TRANSITION(jdouble, jfr_time_conv_factor(JNIEnv* env, jobject jvm))\n+NO_TRANSITION(jdouble, jfr_time_conv_factor(JNIEnv* env, jclass jvm))\n@@ -172,1 +160,1 @@\n-NO_TRANSITION(jboolean, jfr_set_cutoff(JNIEnv* env, jobject jvm, jlong event_type_id, jlong cutoff_ticks))\n+NO_TRANSITION(jboolean, jfr_set_cutoff(JNIEnv* env, jclass jvm, jlong event_type_id, jlong cutoff_ticks))\n@@ -176,1 +164,1 @@\n-NO_TRANSITION(jboolean, jfr_set_throttle(JNIEnv* env, jobject jvm, jlong event_type_id, jlong event_sample_size, jlong period_ms))\n+NO_TRANSITION(jboolean, jfr_set_throttle(JNIEnv* env, jclass jvm, jlong event_type_id, jlong event_sample_size, jlong period_ms))\n@@ -181,1 +169,1 @@\n-NO_TRANSITION(jboolean, jfr_should_rotate_disk(JNIEnv* env, jobject jvm))\n+NO_TRANSITION(jboolean, jfr_should_rotate_disk(JNIEnv* env, jclass jvm))\n@@ -185,1 +173,1 @@\n-NO_TRANSITION(jlong, jfr_get_type_id_from_string(JNIEnv * env, jobject jvm, jstring type))\n+NO_TRANSITION(jlong, jfr_get_type_id_from_string(JNIEnv * env, jclass jvm, jstring type))\n@@ -201,1 +189,1 @@\n-JVM_ENTRY_NO_ENV(jboolean, jfr_create_jfr(JNIEnv* env, jobject jvm, jboolean simulate_failure))\n+JVM_ENTRY_NO_ENV(jboolean, jfr_create_jfr(JNIEnv* env, jclass jvm, jboolean simulate_failure))\n@@ -214,1 +202,1 @@\n-JVM_ENTRY_NO_ENV(jboolean, jfr_destroy_jfr(JNIEnv* env, jobject jvm))\n+JVM_ENTRY_NO_ENV(jboolean, jfr_destroy_jfr(JNIEnv* env, jclass jvm))\n@@ -219,1 +207,1 @@\n-JVM_ENTRY_NO_ENV(void, jfr_begin_recording(JNIEnv* env, jobject jvm))\n+JVM_ENTRY_NO_ENV(void, jfr_begin_recording(JNIEnv* env, jclass jvm))\n@@ -226,1 +214,1 @@\n-JVM_ENTRY_NO_ENV(jboolean, jfr_is_recording(JNIEnv * env, jobject jvm))\n+JVM_ENTRY_NO_ENV(jboolean, jfr_is_recording(JNIEnv * env, jclass jvm))\n@@ -230,1 +218,1 @@\n-JVM_ENTRY_NO_ENV(void, jfr_end_recording(JNIEnv* env, jobject jvm))\n+JVM_ENTRY_NO_ENV(void, jfr_end_recording(JNIEnv* env, jclass jvm))\n@@ -237,1 +225,1 @@\n-JVM_ENTRY_NO_ENV(void, jfr_mark_chunk_final(JNIEnv * env, jobject jvm))\n+JVM_ENTRY_NO_ENV(void, jfr_mark_chunk_final(JNIEnv * env, jclass jvm))\n@@ -241,1 +229,1 @@\n-JVM_ENTRY_NO_ENV(jboolean, jfr_emit_event(JNIEnv* env, jobject jvm, jlong event_type_id, jlong timestamp, jlong periodic_type))\n+JVM_ENTRY_NO_ENV(jboolean, jfr_emit_event(JNIEnv* env, jclass jvm, jlong event_type_id, jlong timestamp, jlong periodic_type))\n@@ -246,1 +234,1 @@\n-JVM_ENTRY_NO_ENV(jobject, jfr_get_all_event_classes(JNIEnv* env, jobject jvm))\n+JVM_ENTRY_NO_ENV(jobject, jfr_get_all_event_classes(JNIEnv* env, jclass jvm))\n@@ -254,1 +242,1 @@\n-JVM_ENTRY_NO_ENV(jlong, jfr_stacktrace_id(JNIEnv* env, jobject jvm, jint skip))\n+JVM_ENTRY_NO_ENV(jlong, jfr_stacktrace_id(JNIEnv* env, jclass jvm, jint skip))\n@@ -258,1 +246,1 @@\n-JVM_ENTRY_NO_ENV(void, jfr_log(JNIEnv* env, jobject jvm, jint tag_set, jint level, jstring message))\n+JVM_ENTRY_NO_ENV(void, jfr_log(JNIEnv* env, jclass jvm, jint tag_set, jint level, jstring message))\n@@ -262,1 +250,1 @@\n-JVM_ENTRY_NO_ENV(void, jfr_log_event(JNIEnv* env, jobject jvm, jint level, jobjectArray lines, jboolean system))\n+JVM_ENTRY_NO_ENV(void, jfr_log_event(JNIEnv* env, jclass jvm, jint level, jobjectArray lines, jboolean system))\n@@ -266,1 +254,1 @@\n-JVM_ENTRY_NO_ENV(void, jfr_subscribe_log_level(JNIEnv* env, jobject jvm, jobject log_tag, jint id))\n+JVM_ENTRY_NO_ENV(void, jfr_subscribe_log_level(JNIEnv* env, jclass jvm, jobject log_tag, jint id))\n@@ -270,1 +258,1 @@\n-JVM_ENTRY_NO_ENV(void, jfr_set_output(JNIEnv* env, jobject jvm, jstring path))\n+JVM_ENTRY_NO_ENV(void, jfr_set_output(JNIEnv* env, jclass jvm, jstring path))\n@@ -274,1 +262,1 @@\n-JVM_ENTRY_NO_ENV(void, jfr_set_method_sampling_period(JNIEnv* env, jobject jvm, jlong type, jlong periodMillis))\n+JVM_ENTRY_NO_ENV(void, jfr_set_method_sampling_period(JNIEnv* env, jclass jvm, jlong type, jlong periodMillis))\n@@ -288,1 +276,1 @@\n-JVM_ENTRY_NO_ENV(void, jfr_store_metadata_descriptor(JNIEnv* env, jobject jvm, jbyteArray descriptor))\n+JVM_ENTRY_NO_ENV(void, jfr_store_metadata_descriptor(JNIEnv* env, jclass jvm, jbyteArray descriptor))\n@@ -293,1 +281,1 @@\n-JVM_ENTRY_NO_ENV(jlong, jfr_id_for_thread(JNIEnv* env, jobject jvm, jobject t))\n+JVM_ENTRY_NO_ENV(jlong, jfr_id_for_thread(JNIEnv* env, jclass jvm, jobject t))\n@@ -297,1 +285,1 @@\n-JVM_ENTRY_NO_ENV(jobject, jfr_get_event_writer(JNIEnv* env, jclass cls))\n+JVM_ENTRY_NO_ENV(jobject, jfr_get_event_writer(JNIEnv* env, jclass jvm))\n@@ -301,1 +289,1 @@\n-JVM_ENTRY_NO_ENV(jobject, jfr_new_event_writer(JNIEnv* env, jclass cls))\n+JVM_ENTRY_NO_ENV(jobject, jfr_new_event_writer(JNIEnv* env, jclass jvm))\n@@ -305,1 +293,1 @@\n-JVM_ENTRY_NO_ENV(jboolean, jfr_event_writer_flush(JNIEnv* env, jclass cls, jobject writer, jint used_size, jint requested_size))\n+JVM_ENTRY_NO_ENV(jboolean, jfr_event_writer_flush(JNIEnv* env, jclass jvm, jobject writer, jint used_size, jint requested_size))\n@@ -309,1 +297,1 @@\n-JVM_ENTRY_NO_ENV(void, jfr_flush(JNIEnv* env, jobject jvm))\n+JVM_ENTRY_NO_ENV(void, jfr_flush(JNIEnv* env, jclass jvm))\n@@ -313,1 +301,1 @@\n-JVM_ENTRY_NO_ENV(void, jfr_set_repository_location(JNIEnv* env, jobject repo, jstring location))\n+JVM_ENTRY_NO_ENV(void, jfr_set_repository_location(JNIEnv* env, jclass jvm, jstring location))\n@@ -317,1 +305,1 @@\n-NO_TRANSITION(void, jfr_set_dump_path(JNIEnv* env, jobject jvm, jstring dumppath))\n+NO_TRANSITION(void, jfr_set_dump_path(JNIEnv* env, jclass jvm, jstring dumppath))\n@@ -327,1 +315,1 @@\n-NO_TRANSITION(jstring, jfr_get_dump_path(JNIEnv* env, jobject jvm))\n+NO_TRANSITION(jstring, jfr_get_dump_path(JNIEnv* env, jclass jvm))\n@@ -331,1 +319,1 @@\n-JVM_ENTRY_NO_ENV(void, jfr_uncaught_exception(JNIEnv* env, jobject jvm, jobject t, jthrowable throwable))\n+JVM_ENTRY_NO_ENV(void, jfr_uncaught_exception(JNIEnv* env, jclass jvm, jobject t, jthrowable throwable))\n@@ -335,1 +323,1 @@\n-JVM_ENTRY_NO_ENV(void, jfr_abort(JNIEnv* env, jobject jvm, jstring errorMsg))\n+JVM_ENTRY_NO_ENV(void, jfr_abort(JNIEnv* env, jclass jvm, jstring errorMsg))\n@@ -339,1 +327,1 @@\n-JVM_ENTRY_NO_ENV(jlong, jfr_type_id(JNIEnv* env, jobject jvm, jclass jc))\n+JVM_ENTRY_NO_ENV(jlong, jfr_type_id(JNIEnv* env, jclass jvm, jclass jc))\n@@ -347,1 +335,1 @@\n-JVM_ENTRY_NO_ENV(void, jfr_set_force_instrumentation(JNIEnv* env, jobject jvm, jboolean force_instrumentation))\n+JVM_ENTRY_NO_ENV(void, jfr_set_force_instrumentation(JNIEnv* env, jclass jvm, jboolean force_instrumentation))\n@@ -351,1 +339,1 @@\n-JVM_ENTRY_NO_ENV(void, jfr_emit_old_object_samples(JNIEnv* env, jobject jvm, jlong cutoff_ticks, jboolean emit_all, jboolean skip_bfs))\n+JVM_ENTRY_NO_ENV(void, jfr_emit_old_object_samples(JNIEnv* env, jclass jvm, jlong cutoff_ticks, jboolean emit_all, jboolean skip_bfs))\n@@ -355,1 +343,1 @@\n-JVM_ENTRY_NO_ENV(void, jfr_exclude_thread(JNIEnv* env, jobject jvm, jobject t))\n+JVM_ENTRY_NO_ENV(void, jfr_exclude_thread(JNIEnv* env, jclass jvm, jobject t))\n@@ -359,1 +347,1 @@\n-JVM_ENTRY_NO_ENV(void, jfr_include_thread(JNIEnv* env, jobject jvm, jobject t))\n+JVM_ENTRY_NO_ENV(void, jfr_include_thread(JNIEnv* env, jclass jvm, jobject t))\n@@ -363,1 +351,1 @@\n-JVM_ENTRY_NO_ENV(jboolean, jfr_is_thread_excluded(JNIEnv* env, jobject jvm, jobject t))\n+JVM_ENTRY_NO_ENV(jboolean, jfr_is_thread_excluded(JNIEnv* env, jclass jvm, jobject t))\n@@ -367,1 +355,1 @@\n-JVM_ENTRY_NO_ENV(jlong, jfr_chunk_start_nanos(JNIEnv* env, jobject jvm))\n+JVM_ENTRY_NO_ENV(jlong, jfr_chunk_start_nanos(JNIEnv* env, jclass jvm))\n@@ -371,1 +359,1 @@\n-JVM_ENTRY_NO_ENV(jobject, jfr_get_configuration(JNIEnv * env, jobject jvm, jobject clazz))\n+JVM_ENTRY_NO_ENV(jobject, jfr_get_configuration(JNIEnv * env, jclass jvm, jobject clazz))\n@@ -375,1 +363,1 @@\n-JVM_ENTRY_NO_ENV(jboolean, jfr_set_configuration(JNIEnv * env, jobject jvm, jobject clazz, jobject configuration))\n+JVM_ENTRY_NO_ENV(jboolean, jfr_set_configuration(JNIEnv * env, jclass jvm, jobject clazz, jobject configuration))\n@@ -379,1 +367,1 @@\n-JVM_ENTRY_NO_ENV(jboolean, jfr_is_class_excluded(JNIEnv * env, jobject jvm, jclass clazz))\n+JVM_ENTRY_NO_ENV(jboolean, jfr_is_class_excluded(JNIEnv * env, jclass jvm, jclass clazz))\n@@ -383,1 +371,1 @@\n-JVM_ENTRY_NO_ENV(jboolean, jfr_is_class_instrumented(JNIEnv* env, jobject jvm, jclass clazz))\n+JVM_ENTRY_NO_ENV(jboolean, jfr_is_class_instrumented(JNIEnv* env, jclass jvm, jclass clazz))\n@@ -387,1 +375,1 @@\n-JVM_ENTRY_NO_ENV(jboolean, jfr_is_containerized(JNIEnv* env, jobject jvm))\n+JVM_ENTRY_NO_ENV(jboolean, jfr_is_containerized(JNIEnv* env, jclass jvm))\n@@ -395,1 +383,1 @@\n-JVM_ENTRY_NO_ENV(jlong, jfr_host_total_memory(JNIEnv* env, jobject jvm))\n+JVM_ENTRY_NO_ENV(jlong, jfr_host_total_memory(JNIEnv* env, jclass jvm))\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":59,"deletions":71,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-jboolean JNICALL jfr_is_enabled();\n+jlong JNICALL jfr_elapsed_counter(JNIEnv* env, jclass jvm);\n@@ -40,1 +40,1 @@\n-jboolean JNICALL jfr_is_disabled();\n+jboolean JNICALL jfr_create_jfr(JNIEnv* env, jclass jvm, jboolean simulate_failure);\n@@ -42,1 +42,1 @@\n-jboolean JNICALL jfr_is_started();\n+jboolean JNICALL jfr_destroy_jfr(JNIEnv* env, jclass jvm);\n@@ -44,1 +44,1 @@\n-jlong JNICALL jfr_elapsed_counter(JNIEnv* env, jobject jvm);\n+void JNICALL jfr_begin_recording(JNIEnv* env, jclass jvm);\n@@ -46,1 +46,1 @@\n-jboolean JNICALL jfr_create_jfr(JNIEnv* env, jobject jvm, jboolean simulate_failure);\n+jboolean JNICALL jfr_is_recording(JNIEnv* env, jclass jvm);\n@@ -48,1 +48,1 @@\n-jboolean JNICALL jfr_destroy_jfr(JNIEnv* env, jobject jvm);\n+void JNICALL jfr_end_recording(JNIEnv* env, jclass jvm);\n@@ -50,1 +50,1 @@\n-void JNICALL jfr_begin_recording(JNIEnv* env, jobject jvm);\n+void JNICALL jfr_mark_chunk_final(JNIEnv* env, jclass jvm);\n@@ -52,1 +52,1 @@\n-jboolean JNICALL jfr_is_recording(JNIEnv* env, jobject jvm);\n+jboolean JNICALL jfr_emit_event(JNIEnv* env, jclass jvm, jlong eventTypeId, jlong timeStamp, jlong when);\n@@ -54,7 +54,1 @@\n-void JNICALL jfr_end_recording(JNIEnv* env, jobject jvm);\n-\n-void JNICALL jfr_mark_chunk_final(JNIEnv* env, jobject jvm);\n-\n-jboolean JNICALL jfr_emit_event(JNIEnv* env, jobject jvm, jlong eventTypeId, jlong timeStamp, jlong when);\n-\n-jobject JNICALL jfr_get_all_event_classes(JNIEnv* env, jobject jvm);\n+jobject JNICALL jfr_get_all_event_classes(JNIEnv* env, jclass jvm);\n@@ -64,1 +58,1 @@\n-jstring JNICALL jfr_get_pid(JNIEnv* env, jobject jvm);\n+jstring JNICALL jfr_get_pid(JNIEnv* env, jclass jvm);\n@@ -66,1 +60,1 @@\n-jlong JNICALL jfr_stacktrace_id(JNIEnv* env, jobject jvm, jint skip);\n+jlong JNICALL jfr_stacktrace_id(JNIEnv* env, jclass jvm, jint skip);\n@@ -68,1 +62,1 @@\n-jlong JNICALL jfr_elapsed_frequency(JNIEnv* env, jobject jvm);\n+jlong JNICALL jfr_elapsed_frequency(JNIEnv* env, jclass jvm);\n@@ -70,1 +64,1 @@\n-void JNICALL jfr_subscribe_log_level(JNIEnv* env, jobject jvm, jobject log_tag, jint id);\n+void JNICALL jfr_subscribe_log_level(JNIEnv* env, jclass jvm, jobject log_tag, jint id);\n@@ -72,1 +66,1 @@\n-void JNICALL jfr_log(JNIEnv* env, jobject jvm, jint tag_set, jint level, jstring message);\n+void JNICALL jfr_log(JNIEnv* env, jclass jvm, jint tag_set, jint level, jstring message);\n@@ -74,1 +68,1 @@\n-void JNICALL jfr_log_event(JNIEnv* env, jobject jvm, jint level, jobjectArray lines, jboolean system);\n+void JNICALL jfr_log_event(JNIEnv* env, jclass jvm, jint level, jobjectArray lines, jboolean system);\n@@ -76,1 +70,1 @@\n-void JNICALL jfr_retransform_classes(JNIEnv* env, jobject jvm, jobjectArray classes);\n+void JNICALL jfr_retransform_classes(JNIEnv* env, jclass jvm, jobjectArray classes);\n@@ -78,1 +72,1 @@\n-void JNICALL jfr_set_enabled(JNIEnv* env, jobject jvm, jlong event_type_id, jboolean enabled);\n+void JNICALL jfr_set_enabled(JNIEnv* env, jclass jvm, jlong event_type_id, jboolean enabled);\n@@ -80,1 +74,1 @@\n-void JNICALL jfr_set_file_notification(JNIEnv* env, jobject jvm, jlong delta);\n+void JNICALL jfr_set_file_notification(JNIEnv* env, jclass jvm, jlong delta);\n@@ -82,1 +76,1 @@\n-void JNICALL jfr_set_global_buffer_count(JNIEnv* env, jobject jvm, jlong count);\n+void JNICALL jfr_set_global_buffer_count(JNIEnv* env, jclass jvm, jlong count);\n@@ -84,1 +78,1 @@\n-void JNICALL jfr_set_global_buffer_size(JNIEnv* env, jobject jvm, jlong size);\n+void JNICALL jfr_set_global_buffer_size(JNIEnv* env, jclass jvm, jlong size);\n@@ -86,1 +80,1 @@\n-void JNICALL jfr_set_method_sampling_period(JNIEnv* env, jobject jvm, jlong type, jlong periodMillis);\n+void JNICALL jfr_set_method_sampling_period(JNIEnv* env, jclass jvm, jlong type, jlong periodMillis);\n@@ -88,1 +82,1 @@\n-void JNICALL jfr_set_output(JNIEnv* env, jobject jvm, jstring path);\n+void JNICALL jfr_set_output(JNIEnv* env, jclass jvm, jstring path);\n@@ -90,1 +84,1 @@\n-void JNICALL jfr_set_stack_depth(JNIEnv* env, jobject jvm, jint depth);\n+void JNICALL jfr_set_stack_depth(JNIEnv* env, jclass jvm, jint depth);\n@@ -92,1 +86,1 @@\n-void JNICALL jfr_set_stacktrace_enabled(JNIEnv* env, jobject jvm, jlong event_type_id, jboolean enabled);\n+void JNICALL jfr_set_stacktrace_enabled(JNIEnv* env, jclass jvm, jlong event_type_id, jboolean enabled);\n@@ -94,1 +88,1 @@\n-void JNICALL jfr_set_thread_buffer_size(JNIEnv* env, jobject jvm, jlong size);\n+void JNICALL jfr_set_thread_buffer_size(JNIEnv* env, jclass jvm, jlong size);\n@@ -96,1 +90,1 @@\n-void JNICALL jfr_set_memory_size(JNIEnv* env, jobject jvm, jlong size);\n+void JNICALL jfr_set_memory_size(JNIEnv* env, jclass jvm, jlong size);\n@@ -98,1 +92,1 @@\n-jboolean JNICALL jfr_set_threshold(JNIEnv* env, jobject jvm, jlong event_type_id, jlong thresholdTicks);\n+jboolean JNICALL jfr_set_threshold(JNIEnv* env, jclass jvm, jlong event_type_id, jlong thresholdTicks);\n@@ -100,1 +94,1 @@\n-void JNICALL jfr_store_metadata_descriptor(JNIEnv* env, jobject jvm, jbyteArray descriptor);\n+void JNICALL jfr_store_metadata_descriptor(JNIEnv* env, jclass jvm, jbyteArray descriptor);\n@@ -102,1 +96,1 @@\n-jlong JNICALL jfr_id_for_thread(JNIEnv* env, jobject jvm, jobject t);\n+jlong JNICALL jfr_id_for_thread(JNIEnv* env, jclass jvm, jobject t);\n@@ -104,1 +98,1 @@\n-jboolean JNICALL jfr_allow_event_retransforms(JNIEnv* env, jobject jvm);\n+jboolean JNICALL jfr_allow_event_retransforms(JNIEnv* env, jclass jvm);\n@@ -108,1 +102,1 @@\n-jdouble JNICALL jfr_time_conv_factor(JNIEnv* env, jobject jvm);\n+jdouble JNICALL jfr_time_conv_factor(JNIEnv* env, jclass jvm);\n@@ -112,1 +106,1 @@\n-void JNICALL jfr_set_repository_location(JNIEnv* env, jobject repo, jstring location);\n+void JNICALL jfr_set_repository_location(JNIEnv* env, jclass jvm, jstring location);\n@@ -114,1 +108,1 @@\n-void JNICALL jfr_set_dump_path(JNIEnv* env, jobject jvm, jstring dumppath);\n+void JNICALL jfr_set_dump_path(JNIEnv* env, jclass jvm, jstring dumppath);\n@@ -116,1 +110,1 @@\n-jstring JNICALL jfr_get_dump_path(JNIEnv* env, jobject jvm);\n+jstring JNICALL jfr_get_dump_path(JNIEnv* env, jclass jvm);\n@@ -118,1 +112,1 @@\n-jobject JNICALL jfr_get_event_writer(JNIEnv* env, jclass cls);\n+jobject JNICALL jfr_get_event_writer(JNIEnv* env, jclass jvm);\n@@ -120,1 +114,1 @@\n-jobject JNICALL jfr_new_event_writer(JNIEnv* env, jclass cls);\n+jobject JNICALL jfr_new_event_writer(JNIEnv* env, jclass jvm);\n@@ -122,1 +116,1 @@\n-jboolean JNICALL jfr_event_writer_flush(JNIEnv* env, jclass cls, jobject writer, jint used_size, jint requested_size);\n+jboolean JNICALL jfr_event_writer_flush(JNIEnv* env, jclass jvm, jobject writer, jint used_size, jint requested_size);\n@@ -124,2 +118,2 @@\n-void JNICALL jfr_flush(JNIEnv* env, jobject jvm);\n-void JNICALL jfr_abort(JNIEnv* env, jobject jvm, jstring errorMsg);\n+void JNICALL jfr_flush(JNIEnv* env, jclass jvm);\n+void JNICALL jfr_abort(JNIEnv* env, jclass jvm, jstring errorMsg);\n@@ -129,1 +123,1 @@\n-void JNICALL jfr_uncaught_exception(JNIEnv* env, jobject jvm, jobject thread, jthrowable throwable);\n+void JNICALL jfr_uncaught_exception(JNIEnv* env, jclass jvm, jobject thread, jthrowable throwable);\n@@ -131,1 +125,1 @@\n-void JNICALL jfr_set_force_instrumentation(JNIEnv* env, jobject jvm, jboolean force);\n+void JNICALL jfr_set_force_instrumentation(JNIEnv* env, jclass jvm, jboolean force);\n@@ -133,1 +127,1 @@\n-jlong JNICALL jfr_get_unloaded_event_classes_count(JNIEnv* env, jobject jvm);\n+jlong JNICALL jfr_get_unloaded_event_classes_count(JNIEnv* env, jclass jvm);\n@@ -135,1 +129,1 @@\n-jboolean JNICALL jfr_set_cutoff(JNIEnv* env, jobject jvm, jlong event_type_id, jlong cutoff_ticks);\n+jboolean JNICALL jfr_set_cutoff(JNIEnv* env, jclass jvm, jlong event_type_id, jlong cutoff_ticks);\n@@ -137,1 +131,1 @@\n-jboolean JNICALL jfr_set_throttle(JNIEnv* env, jobject jvm, jlong event_type_id, jlong event_sample_size, jlong period_ms);\n+jboolean JNICALL jfr_set_throttle(JNIEnv* env, jclass jvm, jlong event_type_id, jlong event_sample_size, jlong period_ms);\n@@ -139,1 +133,1 @@\n-void JNICALL jfr_emit_old_object_samples(JNIEnv* env, jobject jvm, jlong cutoff_ticks, jboolean, jboolean);\n+void JNICALL jfr_emit_old_object_samples(JNIEnv* env, jclass jvm, jlong cutoff_ticks, jboolean, jboolean);\n@@ -141,1 +135,1 @@\n-jboolean JNICALL jfr_should_rotate_disk(JNIEnv* env, jobject jvm);\n+jboolean JNICALL jfr_should_rotate_disk(JNIEnv* env, jclass jvm);\n@@ -143,1 +137,1 @@\n-void JNICALL jfr_exclude_thread(JNIEnv* env, jobject jvm, jobject t);\n+void JNICALL jfr_exclude_thread(JNIEnv* env, jclass jvm, jobject t);\n@@ -145,1 +139,1 @@\n-void JNICALL jfr_include_thread(JNIEnv* env, jobject jvm, jobject t);\n+void JNICALL jfr_include_thread(JNIEnv* env, jclass jvm, jobject t);\n@@ -147,1 +141,1 @@\n-jboolean JNICALL jfr_is_thread_excluded(JNIEnv* env, jobject jvm, jobject t);\n+jboolean JNICALL jfr_is_thread_excluded(JNIEnv* env, jclass jvm, jobject t);\n@@ -149,1 +143,1 @@\n-jlong JNICALL jfr_chunk_start_nanos(JNIEnv* env, jobject jvm);\n+jlong JNICALL jfr_chunk_start_nanos(JNIEnv* env, jclass jvm);\n@@ -151,1 +145,1 @@\n-jobject JNICALL jfr_get_configuration(JNIEnv* env, jobject jvm, jobject clazz);\n+jobject JNICALL jfr_get_configuration(JNIEnv* env, jclass jvm, jobject clazz);\n@@ -153,1 +147,1 @@\n-jboolean JNICALL jfr_set_configuration(JNIEnv* env, jobject jvm, jobject clazz, jobject configuration);\n+jboolean JNICALL jfr_set_configuration(JNIEnv* env, jclass jvm, jobject clazz, jobject configuration);\n@@ -155,1 +149,1 @@\n-jlong JNICALL jfr_get_type_id_from_string(JNIEnv* env, jobject jvm, jstring type);\n+jlong JNICALL jfr_get_type_id_from_string(JNIEnv* env, jclass jvm, jstring type);\n@@ -157,1 +151,1 @@\n-jboolean JNICALL jfr_is_class_excluded(JNIEnv* env, jobject jvm, jclass clazz);\n+jboolean JNICALL jfr_is_class_excluded(JNIEnv* env, jclass jvm, jclass clazz);\n@@ -159,1 +153,1 @@\n-jboolean JNICALL jfr_is_class_instrumented(JNIEnv* env, jobject jvm, jclass clazz);\n+jboolean JNICALL jfr_is_class_instrumented(JNIEnv* env, jclass jvm, jclass clazz);\n@@ -161,1 +155,1 @@\n-jboolean JNICALL jfr_is_containerized(JNIEnv* env, jobject jvm);\n+jboolean JNICALL jfr_is_containerized(JNIEnv* env, jclass jvm);\n@@ -163,1 +157,1 @@\n-jlong JNICALL jfr_host_total_memory(JNIEnv* env, jobject jvm);\n+jlong JNICALL jfr_host_total_memory(JNIEnv* env, jclass jvm);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.hpp","additions":58,"deletions":64,"binary":false,"changes":122,"status":"modified"},{"patch":"@@ -328,1 +328,1 @@\n-        return JVM.getJVM().isAvailable();\n+        return JVM.isAvailable();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/FlightRecorder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-        JVM jvm = JVM.getJVM();\n@@ -45,1 +44,1 @@\n-        r = 31 * r + mixMurmur64(jvm.getPid().hashCode());\n+        r = 31 * r + mixMurmur64(JVM.getPid().hashCode());\n@@ -49,1 +48,1 @@\n-        r = 31 * r + mixMurmur64(jvm.getTypeId(JVM.class));\n+        r = 31 * r + mixMurmur64(JVM.getTypeId(JVM.class));\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventWriterKey.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-    private volatile boolean nativeOK;\n+    private volatile static boolean nativeOK;\n@@ -65,12 +65,0 @@\n-    \/**\n-     * Get the one and only JVM.\n-     *\n-     * @return the JVM\n-     *\/\n-    public static JVM getJVM() {\n-        return jvm;\n-    }\n-\n-    private JVM() {\n-    }\n-\n@@ -84,1 +72,1 @@\n-    public native void markChunkFinal();\n+    public static native void markChunkFinal();\n@@ -91,1 +79,1 @@\n-    public native void beginRecording();\n+    public static native void beginRecording();\n@@ -96,1 +84,1 @@\n-    public native boolean isRecording();\n+    public static native boolean isRecording();\n@@ -104,1 +92,1 @@\n-    public native void endRecording();\n+    public static native void endRecording();\n@@ -125,1 +113,1 @@\n-    public native boolean emitEvent(long eventTypeId, long timestamp, long periodicType);\n+    public static native boolean emitEvent(long eventTypeId, long timestamp, long periodicType);\n@@ -132,1 +120,1 @@\n-    public native List<Class<? extends jdk.internal.event.Event>> getAllEventClasses();\n+    public static native List<Class<? extends jdk.internal.event.Event>> getAllEventClasses();\n@@ -139,1 +127,1 @@\n-    public native long getUnloadedEventClassCount();\n+    public static native long getUnloadedEventClassCount();\n@@ -157,1 +145,1 @@\n-    public native String getPid();\n+    public static native String getPid();\n@@ -167,1 +155,1 @@\n-    public native long getStackTraceId(int skipCount);\n+    public static native long getStackTraceId(int skipCount);\n@@ -175,1 +163,1 @@\n-    public native long getThreadId(Thread t);\n+    public static native long getThreadId(Thread t);\n@@ -182,1 +170,1 @@\n-    public native long getTicksFrequency();\n+    public static native long getTicksFrequency();\n@@ -221,1 +209,1 @@\n-     public synchronized native void retransformClasses(Class<?>[] classes);\n+     public static synchronized native void retransformClasses(Class<?>[] classes);\n@@ -230,1 +218,1 @@\n-    public native void setEnabled(long eventTypeId, boolean enabled);\n+    public static native void setEnabled(long eventTypeId, boolean enabled);\n@@ -237,1 +225,1 @@\n-    public native void setFileNotification(long delta);\n+    public static native void setFileNotification(long delta);\n@@ -247,1 +235,1 @@\n-    public native void setGlobalBufferCount(long count) throws IllegalArgumentException, IllegalStateException;\n+    public static native void setGlobalBufferCount(long count) throws IllegalArgumentException, IllegalStateException;\n@@ -257,1 +245,1 @@\n-    public native void setGlobalBufferSize(long size) throws IllegalArgumentException;\n+    public static native void setGlobalBufferSize(long size) throws IllegalArgumentException;\n@@ -267,1 +255,1 @@\n-    public native void setMemorySize(long size) throws IllegalArgumentException;\n+    public static native void setMemorySize(long size) throws IllegalArgumentException;\n@@ -276,1 +264,1 @@\n-    public native void setMethodSamplingPeriod(long type, long periodMillis);\n+    public static native void setMethodSamplingPeriod(long type, long periodMillis);\n@@ -301,1 +289,1 @@\n-    public native void setOutput(String file);\n+    public static native void setOutput(String file);\n@@ -309,1 +297,1 @@\n-    public native void setForceInstrumentation(boolean force);\n+    public static native void setForceInstrumentation(boolean force);\n@@ -319,1 +307,1 @@\n-    public native void setCompressedIntegers(boolean compressed) throws IllegalStateException;\n+    public static native void setCompressedIntegers(boolean compressed) throws IllegalStateException;\n@@ -329,1 +317,1 @@\n-    public native void setStackDepth(int depth) throws IllegalArgumentException, IllegalStateException;\n+    public static native void setStackDepth(int depth) throws IllegalArgumentException, IllegalStateException;\n@@ -338,1 +326,1 @@\n-    public native void setStackTraceEnabled(long eventTypeId, boolean enabled);\n+    public static native void setStackTraceEnabled(long eventTypeId, boolean enabled);\n@@ -348,1 +336,1 @@\n-    public native void setThreadBufferSize(long size) throws IllegalArgumentException, IllegalStateException;\n+    public static native void setThreadBufferSize(long size) throws IllegalArgumentException, IllegalStateException;\n@@ -359,1 +347,1 @@\n-    public native boolean setThreshold(long eventTypeId, long ticks);\n+    public static native boolean setThreshold(long eventTypeId, long ticks);\n@@ -370,1 +358,1 @@\n-    public native void storeMetadataDescriptor(byte[] bytes);\n+    public static native void storeMetadataDescriptor(byte[] bytes);\n@@ -379,1 +367,1 @@\n-    public native boolean getAllowedToDoEventRetransforms();\n+    public static native boolean getAllowedToDoEventRetransforms();\n@@ -390,1 +378,1 @@\n-    private native boolean createJFR(boolean simulateFailure) throws IllegalStateException;\n+    static native boolean createJFR(boolean simulateFailure) throws IllegalStateException;\n@@ -400,19 +388,1 @@\n-    private native boolean destroyJFR();\n-\n-    public boolean createFailedNativeJFR() throws IllegalStateException {\n-        return createJFR(true);\n-    }\n-\n-    public void createNativeJFR() {\n-        nativeOK = createJFR(false);\n-    }\n-\n-    public boolean destroyNativeJFR() {\n-        boolean result = destroyJFR();\n-        nativeOK = !result;\n-        return result;\n-    }\n-\n-    public boolean hasNativeJFR() {\n-        return nativeOK;\n-    }\n+    static native boolean destroyJFR();\n@@ -425,1 +395,1 @@\n-    public native boolean isAvailable();\n+    public static native boolean isAvailable();\n@@ -430,1 +400,1 @@\n-    public native double getTimeConversionFactor();\n+    public static native double getTimeConversionFactor();\n@@ -440,1 +410,1 @@\n-    public native long getTypeId(Class<?> clazz);\n+    public static native long getTypeId(Class<?> clazz);\n@@ -471,1 +441,1 @@\n-    public native void flush();\n+    public static native void flush();\n@@ -478,1 +448,1 @@\n-    public native void setRepositoryLocation(String dirText);\n+    public static native void setRepositoryLocation(String dirText);\n@@ -485,1 +455,1 @@\n-    public native void setDumpPath(String dumpPathText);\n+    public static native void setDumpPath(String dumpPathText);\n@@ -492,1 +462,1 @@\n-    public native String getDumpPath();\n+    public static native String getDumpPath();\n@@ -499,1 +469,1 @@\n-    public native void abort(String errorMsg);\n+    public static native void abort(String errorMsg);\n@@ -514,1 +484,1 @@\n-    public native void uncaughtException(Thread thread, Throwable t);\n+    public static native void uncaughtException(Thread thread, Throwable t);\n@@ -527,1 +497,1 @@\n-    public native boolean setCutoff(long eventTypeId, long cutoffTicks);\n+    public static native boolean setCutoff(long eventTypeId, long cutoffTicks);\n@@ -539,1 +509,1 @@\n-    public native boolean setThrottle(long eventTypeId, long eventSampleSize, long period_ms);\n+    public static native boolean setThrottle(long eventTypeId, long eventSampleSize, long period_ms);\n@@ -548,1 +518,1 @@\n-    public native void emitOldObjectSamples(long cutoff, boolean emitAll, boolean skipBFS);\n+    public static native void emitOldObjectSamples(long cutoff, boolean emitAll, boolean skipBFS);\n@@ -555,1 +525,1 @@\n-    public native boolean shouldRotateDisk();\n+    public static native boolean shouldRotateDisk();\n@@ -561,1 +531,1 @@\n-    public native void exclude(Thread thread);\n+    public static native void exclude(Thread thread);\n@@ -567,1 +537,1 @@\n-    public native void include(Thread thread);\n+    public static native void include(Thread thread);\n@@ -574,1 +544,1 @@\n-    public native boolean isExcluded(Thread thread);\n+    public static native boolean isExcluded(Thread thread);\n@@ -583,1 +553,1 @@\n-    public native boolean isExcluded(Class<? extends jdk.internal.event.Event> eventClass);\n+    public static native boolean isExcluded(Class<? extends jdk.internal.event.Event> eventClass);\n@@ -592,1 +562,1 @@\n-    public native boolean isInstrumented(Class<? extends jdk.internal.event.Event> eventClass);\n+    public static native boolean isInstrumented(Class<? extends jdk.internal.event.Event> eventClass);\n@@ -599,1 +569,1 @@\n-    public native long getChunkStartNanos();\n+    public static native long getChunkStartNanos();\n@@ -610,1 +580,1 @@\n-    public native boolean setConfiguration(Class<? extends jdk.internal.event.Event> eventClass, EventConfiguration configuration);\n+    public static native boolean setConfiguration(Class<? extends jdk.internal.event.Event> eventClass, EventConfiguration configuration);\n@@ -619,1 +589,1 @@\n-    public native Object getConfiguration(Class<? extends jdk.internal.event.Event> eventClass);\n+    public static native Object getConfiguration(Class<? extends jdk.internal.event.Event> eventClass);\n@@ -628,1 +598,1 @@\n-    public native long getTypeId(String name);\n+    public static native long getTypeId(String name);\n@@ -637,1 +607,1 @@\n-    public native boolean isContainerized();\n+    public static native boolean isContainerized();\n@@ -643,1 +613,1 @@\n-    public native long hostTotalMemory();\n+    public static native long hostTotalMemory();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVM.java","additions":55,"deletions":85,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+    private static volatile boolean nativeOK;\n@@ -67,1 +68,1 @@\n-            JVM.getJVM().isAvailable();\n+            JVM.isAvailable();\n@@ -100,1 +101,1 @@\n-        return (long) (nanos * JVM.getJVM().getTimeConversionFactor());\n+        return (long) (nanos * JVM.getTimeConversionFactor());\n@@ -104,1 +105,1 @@\n-        long nanos = JVM.getJVM().getChunkStartNanos();\n+        long nanos = JVM.getChunkStartNanos();\n@@ -131,1 +132,1 @@\n-        Object configuration = JVM.getJVM().getConfiguration(eventClass);\n+        Object configuration = JVM.getConfiguration(eventClass);\n@@ -140,1 +141,1 @@\n-        if (!JVM.getJVM().setConfiguration(eventClass, configuration)) {\n+        if (!JVM.setConfiguration(eventClass, configuration)) {\n@@ -153,1 +154,1 @@\n-        return JVM.getJVM().isContainerized();\n+        return JVM.isContainerized();\n@@ -157,1 +158,1 @@\n-        String pid = JVM.getJVM().getPid();\n+        String pid = JVM.getPid();\n@@ -162,0 +163,18 @@\n+\n+    public static boolean createFailedNativeJFR() throws IllegalStateException {\n+        return JVM.createJFR(true);\n+    }\n+\n+    public static void createJFR() {\n+        nativeOK = JVM.createJFR(false);\n+    }\n+\n+    public static boolean destroyJFR() {\n+        boolean result = JVM.destroyJFR();\n+        nativeOK = !result;\n+        return result;\n+    }\n+\n+    public static boolean hasJFR() {\n+        return nativeOK;\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVMSupport.java","additions":26,"deletions":7,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-    private static final JVM jvm = JVM.getJVM();\n@@ -138,1 +137,1 @@\n-        if (jvm.isExcluded(eventClass)) {\n+        if (JVM.isExcluded(eventClass)) {\n@@ -157,1 +156,1 @@\n-        if (jvm.isRecording()) {\n+        if (JVM.isRecording()) {\n@@ -213,1 +212,1 @@\n-        if (jvm.isInstrumented(eventClass) || !JVMSupport.shouldInstrument(pe.isJDK(), pe.getName())) {\n+        if (JVM.isInstrumented(eventClass) || !JVMSupport.shouldInstrument(pe.isJDK(), pe.getName())) {\n@@ -231,1 +230,1 @@\n-        List<Class<? extends jdk.internal.event.Event>> eventClasses = jvm.getAllEventClasses();\n+        List<Class<? extends jdk.internal.event.Event>> eventClasses = JVM.getAllEventClasses();\n@@ -244,1 +243,1 @@\n-        jvm.storeMetadataDescriptor(getBinaryRepresentation());\n+        JVM.storeMetadataDescriptor(getBinaryRepresentation());\n@@ -249,1 +248,1 @@\n-        List<Class<? extends jdk.internal.event.Event>> allEventClasses = jvm.getAllEventClasses();\n+        List<Class<? extends jdk.internal.event.Event>> allEventClasses = JVM.getAllEventClasses();\n@@ -296,1 +295,1 @@\n-        jvm.setOutput(filename);\n+        JVM.setOutput(filename);\n@@ -316,1 +315,1 @@\n-        long unloaded = jvm.getUnloadedEventClassCount();\n+        long unloaded = JVM.getUnloadedEventClassCount();\n@@ -319,1 +318,1 @@\n-            List<Class<? extends jdk.internal.event.Event>> eventClasses = jvm.getAllEventClasses();\n+            List<Class<? extends jdk.internal.event.Event>> eventClasses = JVM.getAllEventClasses();\n@@ -354,1 +353,1 @@\n-        jvm.flush();\n+        JVM.flush();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MetadataRepository.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-        JVM.getJVM().emitOldObjectSamples(ticks, emitAll, skipBFS);\n+        JVM.emitOldObjectSamples(ticks, emitAll, skipBFS);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/OldObjectSample.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-    private static final JVM jvm = JVM.getJVM();\n@@ -75,1 +74,1 @@\n-        jvm.setFileNotification(max);\n+        JVM.setFileNotification(max);\n@@ -84,1 +83,1 @@\n-        jvm.setMemorySize(memSize);\n+        JVM.setMemorySize(memSize);\n@@ -93,1 +92,1 @@\n-        jvm.setThreadBufferSize(threadBufSize);\n+        JVM.setThreadBufferSize(threadBufSize);\n@@ -106,1 +105,1 @@\n-        jvm.setGlobalBufferCount(globalBufCount);\n+        JVM.setGlobalBufferCount(globalBufCount);\n@@ -115,1 +114,1 @@\n-        jvm.setGlobalBufferSize(globalBufsize);\n+        JVM.setGlobalBufferSize(globalBufsize);\n@@ -127,1 +126,1 @@\n-        jvm.setDumpPath(path == null ? null : path.toString());\n+        JVM.setDumpPath(path == null ? null : path.toString());\n@@ -131,1 +130,1 @@\n-        return new SafePath(jvm.getDumpPath());\n+        return new SafePath(JVM.getDumpPath());\n@@ -135,1 +134,1 @@\n-        jvm.setStackDepth(stackTraceDepth);\n+        JVM.setStackDepth(stackTraceDepth);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Options.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-            JVM.getJVM().setCutoff(getId(), cutoffTicks);\n+            JVM.setCutoff(getId(), cutoffTicks);\n@@ -159,1 +159,1 @@\n-            JVM.getJVM().setThrottle(getId(), eventSampleSize, period_ms);\n+            JVM.setThrottle(getId(), eventSampleSize, period_ms);\n@@ -210,1 +210,1 @@\n-                JVM.getJVM().setMethodSamplingPeriod(getId(), p);\n+                JVM.setMethodSamplingPeriod(getId(), p);\n@@ -212,1 +212,1 @@\n-                JVM.getJVM().setEnabled(getId(), enabled);\n+                JVM.setEnabled(getId(), enabled);\n@@ -223,1 +223,1 @@\n-            JVM.getJVM().setMethodSamplingPeriod(getId(), p);\n+            JVM.setMethodSamplingPeriod(getId(), p);\n@@ -237,1 +237,1 @@\n-            JVM.getJVM().setStackTraceEnabled(getId(), stackTraceEnabled);\n+            JVM.setStackTraceEnabled(getId(), stackTraceEnabled);\n@@ -244,1 +244,1 @@\n-            JVM.getJVM().setThreshold(getId(), thresholdTicks);\n+            JVM.setThreshold(getId(), thresholdTicks);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformEventType.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -69,1 +69,0 @@\n-    private static final JVM jvm = JVM.getJVM();\n@@ -82,1 +81,1 @@\n-        jvm.createNativeJFR();\n+        JVMSupport.createJFR();\n@@ -100,1 +99,1 @@\n-            jvm.exclude(t);\n+            JVM.exclude(t);\n@@ -210,3 +209,3 @@\n-        if (jvm.hasNativeJFR()) {\n-            if (jvm.isRecording()) {\n-                jvm.endRecording();\n+        if (JVMSupport.hasJFR()) {\n+            if (JVM.isRecording()) {\n+                JVM.endRecording();\n@@ -214,1 +213,1 @@\n-            jvm.destroyNativeJFR();\n+            JVMSupport.destroyJFR();\n@@ -247,1 +246,1 @@\n-            jvm.beginRecording();\n+            JVM.beginRecording();\n@@ -323,1 +322,1 @@\n-                    jvm.markChunkFinal();\n+                    JVM.markChunkFinal();\n@@ -332,1 +331,1 @@\n-            jvm.endRecording();\n+            JVM.endRecording();\n@@ -498,1 +497,1 @@\n-        if (!jvm.hasNativeJFR()) {\n+        if (!JVMSupport.hasJFR()) {\n@@ -503,1 +502,1 @@\n-                if (jvm.shouldRotateDisk()) {\n+                if (JVM.shouldRotateDisk()) {\n@@ -661,1 +660,1 @@\n-            jvm.markChunkFinal();\n+            JVM.markChunkFinal();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformRecorder.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-    private static final JVM jvm = JVM.getJVM();\n@@ -89,1 +88,1 @@\n-                jvm.setRepositoryLocation(repository.toString());\n+                JVM.setRepositoryLocation(repository.toString());\n@@ -102,1 +101,1 @@\n-            jvm.abort(errorMsg);\n+            JVM.abort(errorMsg);\n@@ -111,1 +110,1 @@\n-        String basename = ValueFormatter.formatDateTime(LocalDateTime.now()) + \"_\" + JVM.getJVM().getPid();\n+        String basename = ValueFormatter.formatDateTime(LocalDateTime.now()) + \"_\" + JVM.getPid();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Repository.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-        if (!JVM.getJVM().isRecording()) {\n+        if (!JVM.isRecording()) {\n@@ -151,2 +151,2 @@\n-        if (JVM.getJVM().getAllowedToDoEventRetransforms()) {\n-            updateRetransform(JVM.getJVM().getAllEventClasses());\n+        if (JVM.getAllowedToDoEventRetransforms()) {\n+            updateRetransform(JVM.getAllEventClasses());\n@@ -172,1 +172,1 @@\n-            JVM.getJVM().retransformClasses(classes.toArray(new Class<?>[0]));\n+            JVM.retransformClasses(classes.toArray(new Class<?>[0]));\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/SettingsManager.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-            JVM.getJVM().uncaughtException(t, e);\n+            JVM.uncaughtException(t, e);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/ShutdownHook.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-        long id = JVM.getJVM().getTypeId(name);\n+        long id = JVM.getTypeId(name);\n@@ -125,1 +125,1 @@\n-        return type == null ? JVM.getJVM().getTypeId(clazz) : type.getId();\n+        return type == null ? JVM.getTypeId(clazz) : type.getId();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Type.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -116,1 +116,0 @@\n-        JVM jvm = JVM.getJVM();\n@@ -119,1 +118,1 @@\n-            if (jvm.isExcluded(t)) {\n+            if (JVM.isExcluded(t)) {\n@@ -122,1 +121,1 @@\n-                jvm.exclude(t);\n+                JVM.exclude(t);\n@@ -129,1 +128,1 @@\n-                jvm.include(t);\n+                JVM.include(t);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/EventDirectoryStream.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-        \/\/ classes during startup so instead JVM.getJVM().getPid() is used.\n+        \/\/ classes during startup so instead JVM.getPid() is used.\n@@ -123,1 +123,1 @@\n-        return JVM.getJVM().getPid();\n+        return JVM.getPid();\n@@ -297,1 +297,1 @@\n-                        pid = JVM.getJVM().getPid();\n+                        pid = JVM.getPid();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/AbstractDCmd.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -292,1 +292,0 @@\n-        JVM jvm = JVM.getJVM();\n@@ -294,1 +293,1 @@\n-            jvm.setForceInstrumentation(true);\n+            JVM.setForceInstrumentation(true);\n@@ -297,1 +296,1 @@\n-            jvm.setForceInstrumentation(false);\n+            JVM.setForceInstrumentation(false);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/DCmdStart.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,0 @@\n-    private static final JVM jvm = JVM.getJVM();\n@@ -181,1 +180,1 @@\n-            putLong(jvm.getThreadId(athread));\n+            putLong(JVM.getThreadId(athread));\n@@ -195,1 +194,1 @@\n-            putLong(jvm.getStackTraceId(eventType.getStackTraceOffset()));\n+            putLong(JVM.getStackTraceId(eventType.getStackTraceOffset()));\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/event\/EventWriter.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -128,1 +128,0 @@\n-    private static final JVM jvm = JVM.getJVM();\n@@ -174,1 +173,1 @@\n-            jvm.retransformClasses(list.toArray(new Class<?>[list.size()]));\n+            JVM.retransformClasses(list.toArray(new Class<?>[list.size()]));\n@@ -183,1 +182,1 @@\n-        if (JVM.getJVM().isContainerized() ) {\n+        if (JVM.isContainerized() ) {\n@@ -222,1 +221,1 @@\n-            t.hostTotalMemory = JVM.getJVM().hostTotalMemory();\n+            t.hostTotalMemory = JVM.hostTotalMemory();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/JDKEvents.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-            JVM.getJVM().emitEvent(getEventType().getId(), timestamp, periodicType.ordinal());\n+            JVM.emitEvent(getEventType().getId(), timestamp, periodicType.ordinal());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/periodic\/JVMEventTask.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,0 @@\n-    private static final JVM jvm = JVM.getJVM();\n@@ -137,1 +136,1 @@\n-        long firstCount = jvm.getUnloadedEventClassCount();\n+        long firstCount = JVM.getUnloadedEventClassCount();\n@@ -146,1 +145,1 @@\n-            newCount = jvm.getUnloadedEventClassCount();\n+            newCount = JVM.getUnloadedEventClassCount();\n@@ -151,1 +150,1 @@\n-        for (Class<?> eventClass : JVM.getJVM().getAllEventClasses()) {\n+        for (Class<?> eventClass : JVM.getAllEventClasses()) {\n","filename":"test\/jdk\/jdk\/jfr\/api\/metadata\/eventtype\/TestUnloadingEventClass.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-            JVM.getJVM().getPid();\n+            JVM.getPid();\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestNative.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import jdk.jfr.internal.JVMSupport;\n@@ -40,6 +41,5 @@\n-        JVM jvm = JVM.getJVM();\n-        jvm.createNativeJFR();\n-        jvm.setFileNotification(MAX_CHUNK_SIZE);\n-        jvm.beginRecording();\n-        jvm.endRecording();\n-        jvm.destroyNativeJFR();\n+        JVMSupport.createJFR();\n+        JVM.setFileNotification(MAX_CHUNK_SIZE);\n+        JVM.beginRecording();\n+        JVM.endRecording();\n+        JVMSupport.destroyJFR();\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestBeginAndEnd.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import jdk.jfr.internal.JVMSupport;\n@@ -44,4 +45,1 @@\n-        JVM jvm = JVM.getJVM();\n-        jvm.createNativeJFR();\n-        assertClassIds();\n-        jvm.destroyNativeJFR();\n+        JVMSupport.createJFR();\n@@ -49,0 +47,1 @@\n+        JVMSupport.destroyJFR();\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestClassId.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,0 @@\n-        JVM jvm = JVM.getJVM();\n@@ -71,1 +70,1 @@\n-        jvm.getClassId(clz);\n+        JVM.getClassId(clz);\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestClearStaleConstants.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import jdk.jfr.internal.JVMSupport;\n@@ -44,2 +45,1 @@\n-        JVM jvm = JVM.getJVM();\n-        jvm.createNativeJFR();\n+        JVMSupport.createJFR();\n@@ -48,1 +48,1 @@\n-        jvm.destroyNativeJFR();\n+        JVMSupport.destroyJFR();\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestCounterTime.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import jdk.jfr.internal.JVM;\n+import jdk.jfr.internal.JVMSupport;\n@@ -47,1 +47,0 @@\n-        JVM jvm = JVM.getJVM();\n@@ -51,1 +50,1 @@\n-            assertFailedInitialization(jvm);\n+            assertFailedInitialization();\n@@ -63,1 +62,1 @@\n-    private static void assertFailedInitialization(JVM jvm) throws Exception {\n+    private static void assertFailedInitialization() throws Exception {\n@@ -65,1 +64,1 @@\n-            jvm.createFailedNativeJFR();\n+            JVMSupport.createFailedNativeJFR();\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestCreateNative.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import jdk.jfr.internal.JVMSupport;\n@@ -45,1 +46,0 @@\n-        JVM jvm = JVM.getJVM();\n@@ -47,2 +47,2 @@\n-        assertEmptyEventList(jvm);\n-        jvm.createNativeJFR();\n+        assertEmptyEventList();\n+        JVMSupport.createJFR();\n@@ -50,1 +50,1 @@\n-        assertEmptyEventList(jvm);\n+        assertEmptyEventList();\n@@ -55,1 +55,1 @@\n-        assertEventsIncluded(jvm, clazz);\n+        assertEventsIncluded(clazz);\n@@ -59,1 +59,1 @@\n-        assertEventsIncluded(jvm, clazz);\n+        assertEventsIncluded(clazz);\n@@ -64,1 +64,1 @@\n-        assertEventsIncluded(jvm, clazz, clazz2);\n+        assertEventsIncluded(clazz, clazz2);\n@@ -68,1 +68,1 @@\n-        assertEventsExcluded(jvm, abstractClass);\n+        assertEventsExcluded(abstractClass);\n@@ -71,1 +71,1 @@\n-        assertEventsExcluded(jvm, MyUnInitializedEvent.class);\n+        assertEventsExcluded(MyUnInitializedEvent.class);\n@@ -74,1 +74,1 @@\n-        assertEventsIncluded(jvm, clazz, clazz2);\n+        assertEventsIncluded(clazz, clazz2);\n@@ -76,1 +76,1 @@\n-        jvm.destroyNativeJFR();\n+        JVMSupport.destroyJFR();\n@@ -88,2 +88,2 @@\n-    private static void assertEmptyEventList(JVM jvm) {\n-        if (!jvm.getAllEventClasses().isEmpty()) {\n+    private static void assertEmptyEventList() {\n+        if (!JVM.getAllEventClasses().isEmpty()) {\n@@ -95,2 +95,2 @@\n-    private static void assertEventsExcluded(JVM jvm, Class<? extends Event>... targetEvents) {\n-        assertEvents(jvm, false, targetEvents);\n+    private static void assertEventsExcluded(Class<? extends Event>... targetEvents) {\n+        assertEvents(false, targetEvents);\n@@ -100,2 +100,2 @@\n-    private static void assertEventsIncluded(JVM jvm, Class<? extends Event>... targetEvents) {\n-        assertEvents(jvm, true, targetEvents);\n+    private static void assertEventsIncluded(Class<? extends Event>... targetEvents) {\n+        assertEvents(true, targetEvents);\n@@ -106,2 +106,2 @@\n-    private static void assertEvents(JVM jvm, boolean inclusion, Class<? extends Event>... targetEvents) {\n-        final List list = jvm.getAllEventClasses();\n+    private static void assertEvents(boolean inclusion, Class<? extends Event>... targetEvents) {\n+        final List list = JVM.getAllEventClasses();\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestGetAllEventClasses.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,1 +105,1 @@\n-            Field field = c.getDeclaredField(\"jvm\");\n+            Field field = c.getDeclaredField(\"unsafe\");\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestGetEventWriterReflection.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-        JVM jvm = JVM.getJVM();\n@@ -52,1 +51,1 @@\n-        assertMaxSkip(jvm);\n+        assertMaxSkip();\n@@ -55,2 +54,2 @@\n-    private static void assertMaxSkip(JVM jvm) {\n-        Asserts.assertEquals(jvm.getStackTraceId(Integer.MAX_VALUE), 0L, \"Insane skip level \"\n+    private static void assertMaxSkip() {\n+        Asserts.assertEquals(JVM.getStackTraceId(Integer.MAX_VALUE), 0L, \"Insane skip level \"\n@@ -68,1 +67,1 @@\n-        return JVM.getJVM().getStackTraceId(0);\n+        return JVM.getStackTraceId(0);\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestGetStackTraceId.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,1 @@\n+import jdk.jfr.internal.JVMSupport;\n@@ -67,1 +68,1 @@\n-        JVM.getJVM().createNativeJFR();\n+        JVMSupport.createJFR();\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestJFRIntrinsic.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,1 @@\n-        JVM jvm = JVM.getJVM();\n-        String pid = jvm.getPid();\n+        String pid = JVM.getPid();\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestPid.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-    private static JVM jvm;\n@@ -87,1 +86,0 @@\n-        jvm = JVM.getJVM();\n@@ -90,1 +88,1 @@\n-            jvm.exclude(threads[i].getThread());\n+            JVM.exclude(threads[i].getThread());\n@@ -107,1 +105,1 @@\n-            assertTrue(jvm.isExcluded(t.getThread()), \"Thread \" + t.getThread() + \"should be excluded\");\n+            assertTrue(JVM.isExcluded(t.getThread()), \"Thread \" + t.getThread() + \"should be excluded\");\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestThreadExclusion.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-        long initialCount = JVM.getJVM().getUnloadedEventClassCount();\n+        long initialCount = JVM.getUnloadedEventClassCount();\n@@ -76,1 +76,1 @@\n-            count = JVM.getJVM().getUnloadedEventClassCount();\n+            count = JVM.getUnloadedEventClassCount();\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestUnloadEventClassCount.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-    private static JVM jvm;\n@@ -87,1 +86,0 @@\n-        jvm = JVM.getJVM();\n@@ -90,1 +88,1 @@\n-            jvm.exclude(threads[i].getThread());\n+            JVM.exclude(threads[i].getThread());\n@@ -107,1 +105,1 @@\n-            assertTrue(jvm.isExcluded(t.getThread()), \"Virtual Thread \" + t.getThread() + \"should be excluded\");\n+            assertTrue(JVM.isExcluded(t.getThread()), \"Virtual Thread \" + t.getThread() + \"should be excluded\");\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestVirtualThreadExclusion.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}