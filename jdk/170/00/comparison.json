{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.nio.charset.CharsetEncoder;\n@@ -40,1 +41,0 @@\n-import sun.nio.cs.ThreadLocalCoders;\n@@ -180,3 +180,3 @@\n-        CharsetDecoder dec = ThreadLocalCoders.decoderFor(UTF_8.INSTANCE)\n-            .onMalformedInput(CodingErrorAction.REPORT)\n-            .onUnmappableCharacter(CodingErrorAction.REPORT);\n+        CharsetDecoder dec = UTF_8.INSTANCE.newDecoder()\n+                .onMalformedInput(CodingErrorAction.REPLACE)\n+                .onUnmappableCharacter(CodingErrorAction.REPLACE);\n@@ -454,0 +454,1 @@\n+        CharsetEncoder encoder = null;\n@@ -471,0 +472,3 @@\n+                if (encoder == null) {\n+                    encoder = UTF_8.INSTANCE.newEncoder();\n+                }\n@@ -475,1 +479,1 @@\n-                appendEncoded(sb, c);\n+                appendEncoded(encoder, sb, c);\n@@ -497,1 +501,2 @@\n-    private static void appendEncoded(StringBuilder sb, char c) {\n+    private static void appendEncoded(CharsetEncoder encoder,\n+                                      StringBuilder sb, char c) {\n@@ -500,2 +505,1 @@\n-            bb = ThreadLocalCoders.encoderFor(UTF_8.INSTANCE)\n-                .encode(CharBuffer.wrap(\"\" + c));\n+            bb = encoder.encode(CharBuffer.wrap(\"\" + c));\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/ParseUtil.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.net;\n+\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Setup;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.net.URI;\n+import java.net.URL;\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Fork(value = 1, warmups = 0, jvmArgsAppend = \"--add-exports=java.base\/sun.net.www=ALL-UNNAMED\")\n+public class ThreadLocalParseUtil {\n+\n+    private static URL url;\n+    private static MethodHandles.Lookup LOOKUP;\n+    private static MethodHandle MH_DECODE;\n+    private static MethodHandle MH_TO_URI;\n+\n+    @Setup\n+    public void setup() throws Exception {\n+        LOOKUP = MethodHandles.lookup();\n+        url = new URL(\"https:\/\/example.com\/xyz\/abc\/def?query=#30\");\n+        Class<?> c = Class.forName(\"sun.net.www.ParseUtil\");\n+        MH_DECODE = LOOKUP.findStatic(c, \"decode\", methodType(String.class, String.class));\n+        MH_TO_URI = LOOKUP.findStatic(c, \"toURI\", methodType(URI.class, URL.class));\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public String decodeTest() throws Throwable {\n+        return (String) MH_DECODE.invokeExact(\"\/xyz\/\\u00A0\\u00A0\");\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public URI appendEncodedTest() throws Throwable {\n+        return (URI) MH_TO_URI.invokeExact(url);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/ThreadLocalParseUtil.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}