{"files":[{"patch":"@@ -1335,2 +1335,0 @@\n-  ccstr ccstrResult = ccstrValue;\n-  bool needFree;\n@@ -1338,0 +1336,1 @@\n+    ccstr param = ccstrValue;\n@@ -1339,1 +1338,3 @@\n-    needFree = SetVMFlag <JVM_FLAG_TYPE(ccstr)> (thread, env, name, &ccstrResult);\n+    if (SetVMFlag <JVM_FLAG_TYPE(ccstr)> (thread, env, name, &param)) {\n+      assert(param == NULL, \"old value is freed automatically and not returned\");\n+    }\n@@ -1344,3 +1345,0 @@\n-  if (needFree) {\n-    FREE_C_HEAP_ARRAY(char, ccstrResult);\n-  }\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"runtime\/flags\/debug_globals.hpp\"\n@@ -115,0 +116,9 @@\n+  DEBUG_RUNTIME_FLAGS(        \\\n+    develop,                  \\\n+    develop_pd,               \\\n+    product,                  \\\n+    product_pd,               \\\n+    notproduct,               \\\n+    range,                    \\\n+    constraint)               \\\n+                              \\\n","filename":"src\/hotspot\/share\/runtime\/flags\/allFlags.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_RUNTIME_DEBUG_GLOBALS_HPP\n+#define SHARE_RUNTIME_DEBUG_GLOBALS_HPP\n+\n+#include \"runtime\/globals_shared.hpp\"\n+#include \"utilities\/macros.hpp\"\n+\n+\/\/\n+\/\/ These flags are needed for testing the implementation of various flag access\n+\/\/ APIs.\n+\/\/\n+\/\/ For example, DummyManageableStringFlag is needed because we don't\n+\/\/ have any MANAGEABLE flags of the ccstr type, but we really need to\n+\/\/ make sure the implementation is correct (in terms of memory allocation)\n+\/\/ just in case someone may add such a flag in the future.\n+\/\/\n+\n+#ifndef ASSERT\n+\n+#define DEBUG_RUNTIME_FLAGS(develop,                                        \\\n+                            develop_pd,                                     \\\n+                            product,                                        \\\n+                            product_pd,                                     \\\n+                            notproduct,                                     \\\n+                            range,                                          \\\n+                            constraint)                                     \\\n+                                                                            \\\n+\n+#else\n+\n+#define DEBUG_RUNTIME_FLAGS(develop,                                        \\\n+                            develop_pd,                                     \\\n+                            product,                                        \\\n+                            product_pd,                                     \\\n+                            notproduct,                                     \\\n+                            range,                                          \\\n+                            constraint)                                     \\\n+                                                                            \\\n+  product(ccstr, DummyManageableStringFlag, NULL, MANAGEABLE,               \\\n+          \"Dummy flag for testing string handling in WriteableFlags\")       \\\n+                                                                            \\\n+\n+\/\/ end of DEBUG_RUNTIME_FLAGS\n+\n+#endif \/\/ ASSERT\n+\n+DECLARE_FLAGS(DEBUG_RUNTIME_FLAGS)\n+\n+#endif \/\/ SHARE_RUNTIME_DEBUG_GLOBALS_HPP\n","filename":"src\/hotspot\/share\/runtime\/flags\/debug_globals.hpp","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -320,3 +320,3 @@\n-  if (flag->is_default() && old_value != NULL) {\n-    \/\/ Prior value is NOT heap allocated, but was a literal constant.\n-    old_value = os::strdup_check_oom(old_value);\n+  if (!flag->is_default() && old_value != NULL) {\n+    \/\/ Old value is heap allocated so free it.\n+    FREE_C_HEAP_ARRAY(char, old_value);\n@@ -324,1 +324,5 @@\n-  *value = old_value;\n+  \/\/ Unlike the other APIs, the old vale is NOT returned, so the caller won't need to free it.\n+  \/\/ The callers typically don't care what the old value is.\n+  \/\/ If the caller really wants to know the old value, read it (and make a copy if necessary)\n+  \/\/ before calling this API.\n+  *value = NULL;\n@@ -331,4 +335,0 @@\n-  if (type_enum == JVMFlag::TYPE_ccstr || type_enum == JVMFlag::TYPE_ccstrlist) {\n-    return ccstrAtPut((JVMFlagsEnum)flag_enum, *((ccstr*)value), origin);\n-  }\n-\n@@ -336,15 +336,6 @@\n-  assert(flag->type() == type_enum, \"wrong flag type\");\n-  return set_impl(flag, type_enum, value, origin);\n-}\n-\n-\/\/ This is called by the FLAG_SET_XXX macros.\n-JVMFlag::Error JVMFlagAccess::ccstrAtPut(JVMFlagsEnum flag, ccstr value, JVMFlagOrigin origin) {\n-  JVMFlag* faddr = JVMFlag::flag_from_enum(flag);\n-  assert(faddr->is_ccstr(), \"wrong flag type\");\n-  ccstr old_value = faddr->get_ccstr();\n-  trace_flag_changed<ccstr, EventStringFlagChanged>(faddr, old_value, value, origin);\n-  char* new_value = os::strdup_check_oom(value);\n-  faddr->set_ccstr(new_value);\n-  if (!faddr->is_default() && old_value != NULL) {\n-    \/\/ Prior value is heap allocated so free it.\n-    FREE_C_HEAP_ARRAY(char, old_value);\n+  if (type_enum == JVMFlag::TYPE_ccstr || type_enum == JVMFlag::TYPE_ccstrlist) {\n+    assert(flag->is_ccstr(), \"must be\");\n+    return ccstrAtPut(flag, (ccstr*)value, origin);\n+  } else {\n+    assert(flag->type() == type_enum, \"wrong flag type\");\n+    return set_impl(flag, type_enum, value, origin);\n@@ -352,2 +343,0 @@\n-  faddr->set_origin(origin);\n-  return JVMFlag::SUCCESS;\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagAccess.cpp","additions":14,"deletions":25,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,0 @@\n-  static JVMFlag::Error ccstrAtPut(JVMFlagsEnum flag, ccstr value, JVMFlagOrigin origin);\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagAccess.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"memory\/resourceArea.hpp\"\n@@ -247,0 +248,3 @@\n+  if (err == JVMFlag::SUCCESS) {\n+    assert(value == NULL, \"old value is freed automatically and not returned\");\n+  }\n@@ -360,0 +364,1 @@\n+    ResourceMark rm;\n@@ -362,3 +367,0 @@\n-    if (ret != JVMFlag::SUCCESS) {\n-      FREE_C_HEAP_ARRAY(char, svalue);\n-    }\n","filename":"src\/hotspot\/share\/services\/writeableFlags.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"runtime\/globals_extension.hpp\"\n@@ -74,0 +75,22 @@\n+\n+\n+\/\/ SharedArchiveConfigFile is used only during \"java -Xshare:dump\", so\n+\/\/ it's safe to modify its value in gtest\n+\n+TEST_VM(FlagAccess, ccstr_flag) {\n+  FLAG_SET_CMDLINE(SharedArchiveConfigFile, \"\");\n+  ASSERT_EQ(FLAG_IS_CMDLINE(SharedArchiveConfigFile), true);\n+  ASSERT_EQ(strcmp(SharedArchiveConfigFile, \"\"), 0);\n+\n+  FLAG_SET_ERGO(SharedArchiveConfigFile, \"foobar\");\n+  ASSERT_EQ(FLAG_IS_ERGO(SharedArchiveConfigFile), true);\n+  ASSERT_EQ(strcmp(SharedArchiveConfigFile, \"foobar\") , 0);\n+\n+  FLAG_SET_ERGO(SharedArchiveConfigFile, nullptr);\n+  ASSERT_EQ(FLAG_IS_ERGO(SharedArchiveConfigFile), true);\n+  ASSERT_EQ(SharedArchiveConfigFile, nullptr);\n+\n+  FLAG_SET_ERGO(SharedArchiveConfigFile, \"xyz\");\n+  ASSERT_EQ(FLAG_IS_ERGO(SharedArchiveConfigFile), true);\n+  ASSERT_EQ(strcmp(SharedArchiveConfigFile, \"xyz\"), 0);\n+}\n","filename":"test\/hotspot\/gtest\/runtime\/test_globals.cpp","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,1 @@\n+import jdk.test.lib.Platform;\n@@ -50,0 +51,1 @@\n+        setStringFlag(executor);\n@@ -150,0 +152,18 @@\n+    private void setStringFlag(CommandExecutor executor) {\n+        \/\/ Today we don't have any manageable flags of the string type in the product build,\n+        \/\/ so we can only test DummyManageableStringFlag in the debug build.\n+        if (!Platform.isDebugBuild()) {\n+            return;\n+        }\n+\n+        String flag = \"DummyManageableStringFlag\";\n+        String toValue = \"DummyManageableStringFlag_Is_Set_To_Hello\";\n+\n+        System.out.println(\"### Setting a string flag '\" + flag + \"'\");\n+        OutputAnalyzer out = executor.execute(\"VM.set_flag \" + flag + \" \" + toValue);\n+        out.stderrShouldBeEmpty();\n+\n+        out = getAllFlags(executor);\n+        out.stdoutShouldContain(toValue);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/vm\/SetVMFlagTest.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+ * @library \/test\/lib\n@@ -40,0 +41,1 @@\n+import jdk.test.lib.Platform;\n@@ -97,0 +99,17 @@\n+\n+        \/\/ Today we don't have any manageable flags of the string type in the product build,\n+        \/\/ so we can only test DummyManageableStringFlag in the debug build.\n+        if (Platform.isDebugBuild()) {\n+            String optionName = \"DummyManageableStringFlag\";\n+            String toValue = \"DummyManageableStringFlag_Is_Set_To_Hello\";\n+\n+            mbean.setVMOption(optionName, toValue);\n+\n+            VMOption stringOption = findOption(optionName);\n+            Object newValue = stringOption.getValue();\n+            if (!toValue.equals(newValue)) {\n+                throw new RuntimeException(\"Unmatched value: \" +\n+                                           newValue + \" expected: \" + toValue);\n+            }\n+        }\n+\n@@ -126,0 +145,4 @@\n+        return findOption(HEAP_DUMP_ON_OOM);\n+    }\n+\n+    private static VMOption findOption(String optionName) {\n@@ -127,1 +150,1 @@\n-        VMOption gcDetails = null;\n+        VMOption found = null;\n@@ -129,2 +152,2 @@\n-            if (o.getName().equals(HEAP_DUMP_ON_OOM)) {\n-                 gcDetails = o;\n+            if (o.getName().equals(optionName)) {\n+                 found = o;\n@@ -134,2 +157,2 @@\n-        if (gcDetails == null) {\n-            throw new RuntimeException(\"VM option \" + HEAP_DUMP_ON_OOM +\n+        if (found == null) {\n+            throw new RuntimeException(\"VM option \" + optionName +\n@@ -138,1 +161,1 @@\n-        return gcDetails;\n+        return found;\n","filename":"test\/jdk\/com\/sun\/management\/HotSpotDiagnosticMXBean\/SetVMOption.java","additions":30,"deletions":7,"binary":false,"changes":37,"status":"modified"}]}