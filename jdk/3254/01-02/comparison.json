{"files":[{"patch":"@@ -3785,0 +3785,1 @@\n+  JVMFlag::check_all_flag_declarations();\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,13 @@\n+#ifndef ASSERT\n+\n+#define DEBUG_RUNTIME_FLAGS(develop,                                        \\\n+                            develop_pd,                                     \\\n+                            product,                                        \\\n+                            product_pd,                                     \\\n+                            notproduct,                                     \\\n+                            range,                                          \\\n+                            constraint)                                     \\\n+                                                                            \\\n+\n+#else\n+\n@@ -49,1 +62,1 @@\n-  notproduct(ccstr, DummyManageableStringFlag, NULL, MANAGEABLE,            \\\n+  product(ccstr, DummyManageableStringFlag, NULL, MANAGEABLE,               \\\n@@ -55,0 +68,2 @@\n+#endif \/\/ ASSERT\n+\n","filename":"src\/hotspot\/share\/runtime\/flags\/debug_globals.hpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -684,0 +684,19 @@\n+void JVMFlag::check_all_flag_declarations() {\n+  for (JVMFlag* current = &flagTable[0]; current->_name != NULL; current++) {\n+    int flags = static_cast<int>(current->_flags);\n+    \/\/ Backwards compatibility. This will be relaxed\/removed in JDK-7123237.\n+    int mask = JVMFlag::KIND_DIAGNOSTIC | JVMFlag::KIND_MANAGEABLE | JVMFlag::KIND_EXPERIMENTAL;\n+    if ((flags & mask) != 0) {\n+      assert((flags & mask) == JVMFlag::KIND_DIAGNOSTIC ||\n+             (flags & mask) == JVMFlag::KIND_MANAGEABLE ||\n+             (flags & mask) == JVMFlag::KIND_EXPERIMENTAL,\n+             \"%s can be declared with at most one of \"\n+             \"DIAGNOSTIC, MANAGEABLE or EXPERIMENTAL\", current->_name);\n+      assert((flags & KIND_NOT_PRODUCT) == 0 &&\n+             (flags & KIND_DEVELOP) == 0,\n+             \"%s has an optional DIAGNOSTIC, MANAGEABLE or EXPERIMENTAL \"\n+             \"attribute; it must be declared as a product flag\", current->_name);\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -182,0 +182,1 @@\n+  static void check_all_flag_declarations() NOT_DEBUG_RETURN;\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}