{"files":[{"patch":"@@ -67,2 +67,0 @@\n-    public abstract JfrCommand getCommand();\n-\n@@ -81,1 +79,1 @@\n-            ArgumentParser parser = new ArgumentParser(getArgumentInfos(), arg, delimiter, getCommand());\n+            ArgumentParser parser = new ArgumentParser(getArgumentInfos(), arg, delimiter);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/AbstractDCmd.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,6 +27,1 @@\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.HashSet;\n+import java.util.*;\n@@ -45,1 +40,1 @@\n-    private final Set<String> conflictedOptions = new HashSet<>();\n+    private final List<String> conflictedOptions = new ArrayList<>();\n@@ -47,3 +42,1 @@\n-    private final JfrCommand command;\n-\n-    ArgumentParser(Argument[] arguments, String text, char delimiter, JfrCommand command) {\n+    ArgumentParser(Argument[] arguments, String text, char delimiter) {\n@@ -55,1 +48,0 @@\n-        this.command = command;\n@@ -78,2 +70,1 @@\n-        final int conflictedKeyNum = conflictedOptions.size();\n-        if (conflictedKeyNum == 0) {\n+        if (conflictedOptions.isEmpty()) {\n@@ -82,2 +73,0 @@\n-        int processedConflictedKeysCount = 0;\n-        StringBuilder exceptionMessageBuilder = new StringBuilder();\n@@ -85,5 +74,2 @@\n-        if (conflictedOptions.size() == 1) {\n-            exceptionMessageBuilder.append(\"Option \");\n-        } else if (conflictedOptions.size() > 1) {\n-            exceptionMessageBuilder.append(\"Options \");\n-        }\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"Option\");\n@@ -91,9 +77,6 @@\n-        \/\/ Add conflicted key names\n-        for (String conflictedKey : conflictedOptions) {\n-            processedConflictedKeysCount++;\n-            \/\/ Add delimiter\n-            if (processedConflictedKeysCount == 1 ) {\n-            } else if (processedConflictedKeysCount < conflictedKeyNum) {\n-                exceptionMessageBuilder.append(\", \");\n-            } else if (processedConflictedKeysCount == conflictedKeyNum) {\n-                exceptionMessageBuilder.append(\" and \");\n+        \/\/ If multiple options conflict, the following blocks are executed\n+        if (conflictedOptions.size() > 1) {\n+            sb.append(\"s \");\n+            StringJoiner sj = new StringJoiner(\", \");\n+            while (conflictedOptions.size() > 1) {\n+                sj.add(conflictedOptions.remove(0));\n@@ -101,2 +84,2 @@\n-            \/\/ Add a conflicted key name\n-            exceptionMessageBuilder.append(conflictedKey);\n+            sb.append(sj);\n+            sb.append(\" and\");\n@@ -105,3 +88,4 @@\n-        exceptionMessageBuilder.append(\" can only be specified once with \" + command.getName() + \" flight recording\");\n-\n-        throw new IllegalArgumentException(exceptionMessageBuilder.toString());\n+        sb.append(\" \");\n+        sb.append(conflictedOptions.remove(0));\n+        sb.append(\" can only be specified once.\");\n+        throw new IllegalArgumentException(sb.toString());\n@@ -136,1 +120,3 @@\n-                        conflictedOptions.add(key);\n+                        if(!conflictedOptions.contains(key)) {\n+                            conflictedOptions.add(key);\n+                        }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/ArgumentParser.java","additions":21,"deletions":35,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -178,5 +178,0 @@\n-\n-    @Override\n-    public JfrCommand getCommand() {\n-        return JfrCommand.CHECKING;\n-    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/DCmdCheck.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -249,5 +249,0 @@\n-\n-    @Override\n-    public JfrCommand getCommand() {\n-        return JfrCommand.CONFIGURE;\n-    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/DCmdConfigure.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -304,5 +304,0 @@\n-\n-    @Override\n-    public JfrCommand getCommand() {\n-        return JfrCommand.DUMPING;\n-    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/DCmdDump.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -479,5 +479,0 @@\n-\n-    @Override\n-    public JfrCommand getCommand() {\n-        return JfrCommand.STARTING;\n-    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/DCmdStart.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -113,5 +113,0 @@\n-\n-    @Override\n-    public JfrCommand getCommand() {\n-        return JfrCommand.STOPPING;\n-    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/DCmdStop.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.jfr.internal.dcmd;\n-\n-public enum JfrCommand {\n-    STARTING(\"JFR.start\", \"starting\"),\n-    STOPPING(\"JFR.stop\", \"stopping\"),\n-    CHECKING(\"JFR.check\", \"checking\"),\n-    DUMPING(\"JFR.dump\", \"dumping\"),\n-    CONFIGURE(\"JFR.configure\", \"configuring\");\n-\n-    JfrCommand(String command, String name) {\n-        this.command = command;\n-        this.name = name;\n-    }\n-\n-    private final String command;\n-\n-    private final String name;\n-\n-    public String getCommand() {\n-        return command;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/JfrCommand.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -53,4 +53,4 @@\n-        testSpecifiedOption(\"JFR.start\", \"name=abc name=def\", \"starting\", \"name\" );\n-        testSpecifiedOptions(\"JFR.start\", \"name=abc name=def disk=true disk=false\", \"starting\", Set.of(\"name\", \"disk\"));\n-        testSpecifiedOptions(\"JFR.start\", \"name=abc name=def disk=true disk=false delay=1s delay=2s\", \"starting\", Set.of(\"name\", \"disk\", \"delay\"));\n-        testSpecifiedOptions(\"JFR.start\", \"name=abc name=def disk=true disk=false delay=1s delay=2s maxage=1s maxage=2s\", \"starting\", Set.of(\"name\", \"disk\", \"delay\", \"maxage\"));\n+        testSpecifiedOption(\"JFR.start\", \"name=abc name=def\", \"name\" );\n+        testSpecifiedOptions(\"JFR.start\", \"name=abc name=def disk=true disk=false\", Set.of(\"name\", \"disk\"));\n+        testSpecifiedOptions(\"JFR.start\", \"name=abc name=def disk=true disk=false delay=1s delay=2s\", Set.of(\"name\", \"disk\", \"delay\"));\n+        testSpecifiedOptions(\"JFR.start\", \"name=abc name=def disk=true disk=false delay=1s delay=2s maxage=1s maxage=2s\", Set.of(\"name\", \"disk\", \"delay\", \"maxage\"));\n@@ -61,10 +61,10 @@\n-        testSpecifiedOption(\"JFR.start\", \"name=abc name=def\", \"starting\", \"name\" );\n-        testSpecifiedOption(\"JFR.start\", \"disk=true disk=false\", \"starting\", \"disk\" );\n-        testSpecifiedOption(\"JFR.start\", \"delay=1s delay=2s\", \"starting\", \"delay\" );\n-        testSpecifiedOption(\"JFR.start\", \"duration=1s duration=2s\", \"starting\", \"duration\" );\n-        testSpecifiedOption(\"JFR.start\", \"maxage=1s maxage=2s\", \"starting\", \"maxage\" );\n-        testSpecifiedOption(\"JFR.start\", \"maxsize=1m maxsize=2m\", \"starting\", \"maxsize\" );\n-        testSpecifiedOption(\"JFR.start\", \"flush-interval=1s flush-interval=2s\", \"starting\", \"flush-interval\" );\n-        testSpecifiedOption(\"JFR.start\", \"dumponexit=true dumponexit=false\", \"starting\", \"dumponexit\" );\n-        testSpecifiedOption(\"JFR.start\", \"filename=filename1 filename=filename2\", \"starting\", \"filename\" );\n-        testSpecifiedOption(\"JFR.start\", \"path-to-gc-roots=true path-to-gc-roots=false\", \"starting\", \"path-to-gc-roots\" );\n+        testSpecifiedOption(\"JFR.start\", \"name=abc name=def\", \"name\" );\n+        testSpecifiedOption(\"JFR.start\", \"disk=true disk=false\", \"disk\" );\n+        testSpecifiedOption(\"JFR.start\", \"delay=1s delay=2s\", \"delay\" );\n+        testSpecifiedOption(\"JFR.start\", \"duration=1s duration=2s\", \"duration\" );\n+        testSpecifiedOption(\"JFR.start\", \"maxage=1s maxage=2s\", \"maxage\" );\n+        testSpecifiedOption(\"JFR.start\", \"maxsize=1m maxsize=2m\", \"maxsize\" );\n+        testSpecifiedOption(\"JFR.start\", \"flush-interval=1s flush-interval=2s\", \"flush-interval\" );\n+        testSpecifiedOption(\"JFR.start\", \"dumponexit=true dumponexit=false\", \"dumponexit\" );\n+        testSpecifiedOption(\"JFR.start\", \"filename=filename1 filename=filename2\", \"filename\" );\n+        testSpecifiedOption(\"JFR.start\", \"path-to-gc-roots=true path-to-gc-roots=false\", \"path-to-gc-roots\" );\n@@ -77,2 +77,2 @@\n-        testSpecifiedOption(\"JFR.stop\", \"filename=filename1 filename=filename2\", \"stopping\", \"filename\" );\n-        testSpecifiedOption(\"JFR.stop\", \"name=abc name=def\", \"stopping\", \"name\" );\n+        testSpecifiedOption(\"JFR.stop\", \"filename=filename1 filename=filename2\", \"filename\" );\n+        testSpecifiedOption(\"JFR.stop\", \"name=abc name=def\", \"name\" );\n@@ -83,6 +83,6 @@\n-        testSpecifiedOption(\"JFR.dump\", \"begin=0:00 begin=0:01\", \"dumping\", \"begin\" );\n-        testSpecifiedOption(\"JFR.dump\", \"end=1:00 end=1:01\", \"dumping\", \"end\" );\n-        testSpecifiedOption(\"JFR.dump\", \"filename=filename1 filename=filename2\", \"dumping\", \"filename\" );\n-        testSpecifiedOption(\"JFR.dump\", \"maxage=1s maxage=2s\", \"dumping\", \"maxage\" );\n-        testSpecifiedOption(\"JFR.dump\", \"name=abc name=def\", \"dumping\", \"name\" );\n-        testSpecifiedOption(\"JFR.dump\", \"path-to-gc-roots=true path-to-gc-roots=false\", \"dumping\", \"path-to-gc-roots\" );\n+        testSpecifiedOption(\"JFR.dump\", \"begin=0:00 begin=0:01\", \"begin\" );\n+        testSpecifiedOption(\"JFR.dump\", \"end=1:00 end=1:01\", \"end\" );\n+        testSpecifiedOption(\"JFR.dump\", \"filename=filename1 filename=filename2\", \"filename\" );\n+        testSpecifiedOption(\"JFR.dump\", \"maxage=1s maxage=2s\", \"maxage\" );\n+        testSpecifiedOption(\"JFR.dump\", \"name=abc name=def\", \"name\" );\n+        testSpecifiedOption(\"JFR.dump\", \"path-to-gc-roots=true path-to-gc-roots=false\", \"path-to-gc-roots\" );\n@@ -93,2 +93,2 @@\n-        testSpecifiedOption(\"JFR.check\", \"name=abc name=def\", \"checking\", \"name\" );\n-        testSpecifiedOption(\"JFR.check\", \"verbose=true verbose=false\", \"checking\", \"verbose\" );\n+        testSpecifiedOption(\"JFR.check\", \"name=abc name=def\", \"name\" );\n+        testSpecifiedOption(\"JFR.check\", \"verbose=true verbose=false\", \"verbose\" );\n@@ -97,1 +97,1 @@\n-    private static void testSpecifiedOption(String command, String option, String expectCommand, String expectOption){\n+    private static void testSpecifiedOption(String command, String option, String expectOption){\n@@ -102,1 +102,1 @@\n-            Matcher matcher = Pattern.compile(\"Option ([a-z-]+) can only be specified once with ([a-z]+) flight recording\").matcher(output);\n+            Matcher matcher = Pattern.compile(\"Option ([a-z-]+) can only be specified once\").matcher(output);\n@@ -105,5 +105,0 @@\n-            String outputtedCommand = matcher.group(2);\n-\n-            if (!outputtedCommand.equals(expectCommand)){\n-                throw new RuntimeException(\"expected command is %s, but actual is %s\".formatted(expectCommand, outputtedCommand));\n-            }\n@@ -138,1 +133,1 @@\n-    private static void testSpecifiedOptions(String command, String option, String expectCommand, Set<String> expectOptions){\n+    private static void testSpecifiedOptions(String command, String option, Set<String> expectOptions){\n@@ -143,1 +138,1 @@\n-            Matcher matcher = Pattern.compile(\"Options ([a-z-]+)((?:, [a-z-]+)*) and ([a-z-]+) can only be specified once with ([a-z]+) flight recording\").matcher(output);\n+            Matcher matcher = Pattern.compile(\"Options ([a-z-]+)((?:, [a-z-]+)*) and ([a-z-]+) can only be specified once\").matcher(output);\n@@ -157,6 +152,0 @@\n-            String outputtedCommand = matcher.group(4);\n-\n-            if (!outputtedCommand.equals(expectCommand)){\n-                throw new RuntimeException(\"expected command is %s, but actual is %s\".formatted(expectCommand, outputtedCommand));\n-            }\n-\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestJcmdOptionSpecifiedOnce.java","additions":28,"deletions":39,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-            Matcher matcher = Pattern.compile(\"Option ([a-z-]+) can only be specified once with starting flight recording\").matcher(output);\n+            Matcher matcher = Pattern.compile(\"Option ([a-z-]+) can only be specified once\").matcher(output);\n@@ -97,1 +97,1 @@\n-        final String regex = \"Option ([a-z-]+) can only be specified once with starting flight recording\";\n+        final String regex = \"Option ([a-z-]+) can only be specified once\";\n@@ -116,1 +116,1 @@\n-            Matcher matcher = Pattern.compile(\"Options ([a-z-]+)((?:, [a-z-]+)*) and ([a-z-]+) can only be specified once with starting flight recording\").matcher(output);\n+            Matcher matcher = Pattern.compile(\"Options ([a-z-]+)((?:, [a-z-]+)*) and ([a-z-]+) can only be specified once\").matcher(output);\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestStartupOptionSpecifiedOnce.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}