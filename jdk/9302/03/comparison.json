{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.util.StringJoiner;\n@@ -45,0 +46,2 @@\n+    private final List<String> conflictedOptions = new ArrayList<>();\n+\n@@ -67,0 +70,1 @@\n+        checkConflict();\n@@ -71,0 +75,25 @@\n+    protected void checkConflict() {\n+        if (conflictedOptions.isEmpty()) {\n+            return;\n+        }\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"Option\");\n+\n+        \/\/ If multiple options conflict, the following blocks are executed\n+        if (conflictedOptions.size() > 1) {\n+            sb.append(\"s \");\n+            StringJoiner sj = new StringJoiner(\", \");\n+            while (conflictedOptions.size() > 1) {\n+                sj.add(conflictedOptions.remove(0));\n+            }\n+            sb.append(sj);\n+            sb.append(\" and\");\n+        }\n+\n+        sb.append(\" \");\n+        sb.append(conflictedOptions.remove(0));\n+        sb.append(\" can only be specified once.\");\n+        throw new IllegalArgumentException(sb.toString());\n+    }\n+\n@@ -97,1 +126,5 @@\n-                        throw new IllegalArgumentException(\"Duplicates in diagnostic command arguments\");\n+                        if(!conflictedOptions.contains(key)) {\n+                            conflictedOptions.add(key);\n+                        }\n+                    } else {\n+                        options.put(key, v);\n@@ -99,1 +132,0 @@\n-                    options.put(key, v);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/ArgumentParser.java","additions":35,"deletions":3,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.jcmd;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\/**\n+ * @test\n+ * @summary The test verifies that options can only be specified once with jcmd JFR.*\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @modules jdk.jfr\/jdk.jfr.internal.dcmd\n+ * @run main\/othervm jdk.jfr.jcmd.TestJcmdOptionSpecifiedOnce\n+ *\/\n+public class TestJcmdOptionSpecifiedOnce {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        testCheckingLog();\n+        checkStarting();\n+        checkStopping();\n+        checkDumping();\n+        checkChecking();\n+    }\n+\n+    private static void testCheckingLog() {\n+\n+        testSpecifiedOption(\"JFR.start\", \"name=abc name=def\", \"name\" );\n+        testSpecifiedOptions(\"JFR.start\", \"name=abc name=def disk=true disk=false\", Set.of(\"name\", \"disk\"));\n+        testSpecifiedOptions(\"JFR.start\", \"name=abc name=def disk=true disk=false delay=1s delay=2s\", Set.of(\"name\", \"disk\", \"delay\"));\n+        testSpecifiedOptions(\"JFR.start\", \"name=abc name=def disk=true disk=false delay=1s delay=2s maxage=1s maxage=2s\", Set.of(\"name\", \"disk\", \"delay\", \"maxage\"));\n+    }\n+\n+    public static void checkStarting() {\n+\n+        testSpecifiedOption(\"JFR.start\", \"name=abc name=def\", \"name\" );\n+        testSpecifiedOption(\"JFR.start\", \"disk=true disk=false\", \"disk\" );\n+        testSpecifiedOption(\"JFR.start\", \"delay=1s delay=2s\", \"delay\" );\n+        testSpecifiedOption(\"JFR.start\", \"duration=1s duration=2s\", \"duration\" );\n+        testSpecifiedOption(\"JFR.start\", \"maxage=1s maxage=2s\", \"maxage\" );\n+        testSpecifiedOption(\"JFR.start\", \"maxsize=1m maxsize=2m\", \"maxsize\" );\n+        testSpecifiedOption(\"JFR.start\", \"flush-interval=1s flush-interval=2s\", \"flush-interval\" );\n+        testSpecifiedOption(\"JFR.start\", \"dumponexit=true dumponexit=false\", \"dumponexit\" );\n+        testSpecifiedOption(\"JFR.start\", \"filename=filename1 filename=filename2\", \"filename\" );\n+        testSpecifiedOption(\"JFR.start\", \"path-to-gc-roots=true path-to-gc-roots=false\", \"path-to-gc-roots\" );\n+\n+        testMultipleOption(\"JFR.start\", \"settings=default settings=profile\");\n+    }\n+\n+    public static void checkStopping() {\n+\n+        testSpecifiedOption(\"JFR.stop\", \"filename=filename1 filename=filename2\", \"filename\" );\n+        testSpecifiedOption(\"JFR.stop\", \"name=abc name=def\", \"name\" );\n+    }\n+\n+    public static void checkDumping() {\n+\n+        testSpecifiedOption(\"JFR.dump\", \"begin=0:00 begin=0:01\", \"begin\" );\n+        testSpecifiedOption(\"JFR.dump\", \"end=1:00 end=1:01\", \"end\" );\n+        testSpecifiedOption(\"JFR.dump\", \"filename=filename1 filename=filename2\", \"filename\" );\n+        testSpecifiedOption(\"JFR.dump\", \"maxage=1s maxage=2s\", \"maxage\" );\n+        testSpecifiedOption(\"JFR.dump\", \"name=abc name=def\", \"name\" );\n+        testSpecifiedOption(\"JFR.dump\", \"path-to-gc-roots=true path-to-gc-roots=false\", \"path-to-gc-roots\" );\n+    }\n+\n+    public static void checkChecking() {\n+\n+        testSpecifiedOption(\"JFR.check\", \"name=abc name=def\", \"name\" );\n+        testSpecifiedOption(\"JFR.check\", \"verbose=true verbose=false\", \"verbose\" );\n+    }\n+\n+    private static void testSpecifiedOption(String command, String option, String expectOption){\n+\n+        String output = JcmdHelper.jcmd(\"%s %s\".formatted(command, option)).getOutput();\n+\n+        try {\n+            Matcher matcher = Pattern.compile(\"Option ([a-z-]+) can only be specified once\").matcher(output);\n+            matcher.find();\n+            String outputtedOption = matcher.group(1);\n+\n+            if (!outputtedOption.equals(expectOption)){\n+                throw new RuntimeException(\"expected option is %s, but actual is %s\".formatted(expectOption, outputtedOption));\n+            }\n+\n+        } catch (Exception e){\n+            System.err.println(output);\n+            throw e;\n+        }\n+    }\n+\n+    private static void testMultipleOption(String command, String option){\n+\n+        String output = JcmdHelper.jcmd(\"%s %s\".formatted(command, option)).getOutput();\n+        final String regex = \"Option ([a-z-]+) can only be specified once with ([a-z]+) flight recording\";\n+\n+        try {\n+            Matcher matcher = Pattern.compile(regex).matcher(output);\n+            if (matcher.find()){\n+                throw new RuntimeException(\"found in output : \\\"%s\\\"\".formatted(regex));\n+            }\n+        } catch (Exception e){\n+            System.err.println(output);\n+            throw e;\n+        }\n+    }\n+\n+\n+    private static void testSpecifiedOptions(String command, String option, Set<String> expectOptions){\n+\n+        String output = JcmdHelper.jcmd(\"%s %s\".formatted(command, option)).getOutput();\n+\n+        try {\n+            Matcher matcher = Pattern.compile(\"Options ([a-z-]+)((?:, [a-z-]+)*) and ([a-z-]+) can only be specified once\").matcher(output);\n+            matcher.find();\n+\n+            Set<String> outputtedOptions = new HashSet<>();\n+\n+            \/\/ Mandatory First option\n+            outputtedOptions.add(matcher.group(1));\n+\n+            \/\/ A collection of non-mandatory options, strings joined by \",\".\n+            Arrays.stream(matcher.group(2).split(\", \")).filter(s->s.length() > 0).forEach(outputtedOptions::add);\n+\n+            \/\/ Mandatory last option\n+            outputtedOptions.add(matcher.group(3));\n+\n+            if (!outputtedOptions.equals(expectOptions)){\n+                throw new RuntimeException(\"expected options are %s, but actual are %s\".formatted(expectOptions, outputtedOptions));\n+            }\n+\n+        } catch (Exception e){\n+            System.err.println(output);\n+            throw e;\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestJcmdOptionSpecifiedOnce.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.startupargs;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.util.*;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\/**\n+ * @test The test verifies that options can only be specified once with --XX:StartFlightRecording\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main jdk.jfr.startupargs.TestStartupOptionSpecifiedOnce\n+ *\/\n+public class TestStartupOptionSpecifiedOnce {\n+\n+    public static class TestMessage {\n+        public static void main(String[] args) throws Exception {\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        testSpecifiedOption(\"name=abc,name=def\", \"name\" );\n+        testSpecifiedOption(\"disk=true,disk=false\", \"disk\" );\n+        testSpecifiedOption(\"delay=1s,delay=2s\", \"delay\" );\n+        testSpecifiedOption(\"duration=1s,duration=2s\", \"duration\" );\n+        testSpecifiedOption(\"maxage=1s,maxage=2s\", \"maxage\" );\n+        testSpecifiedOption(\"maxsize=1m,maxsize=2m\", \"maxsize\" );\n+        testSpecifiedOption(\"flush-interval=1s,flush-interval=2s\", \"flush-interval\" );\n+        testSpecifiedOption(\"dumponexit=true,dumponexit=false\", \"dumponexit\" );\n+        testSpecifiedOption(\"filename=filename1,filename=filename2\", \"filename\" );\n+        testSpecifiedOption(\"path-to-gc-roots=true,path-to-gc-roots=false\", \"path-to-gc-roots\" );\n+\n+        testMultipleOption(\"settings=default,settings=default\");\n+\n+        testSpecifiedOptions(\"name=abc,name=def,disk=true,disk=false\", Set.of(\"name\", \"disk\"));\n+        testSpecifiedOptions(\"name=abc,name=def,disk=true,disk=false,delay=1s,delay=2s\", Set.of(\"name\", \"disk\", \"delay\"));\n+        testSpecifiedOptions(\"name=abc,name=def,disk=true,disk=false,delay=1s,delay=2s,maxage=1s,maxage=2s\", Set.of(\"name\", \"disk\", \"delay\", \"maxage\"));\n+    }\n+\n+    private static OutputAnalyzer startJfrJvm(String addedOptions) throws Exception {\n+        List<String> commands = new ArrayList<>(2);\n+        commands.add(\"-XX:StartFlightRecording=\" + addedOptions);\n+        commands.add(TestMessage.class.getName());\n+        ProcessBuilder pb = ProcessTools.createTestJvm(commands);\n+        OutputAnalyzer out = ProcessTools.executeProcess(pb);\n+        return out;\n+    }\n+\n+    private static void testSpecifiedOption(String option, String expectOption) throws Exception{\n+\n+        String output = startJfrJvm(option).getOutput();\n+\n+        try {\n+            Matcher matcher = Pattern.compile(\"Option ([a-z-]+) can only be specified once\").matcher(output);\n+            matcher.find();\n+            String outputtedOption = matcher.group(1);\n+\n+            if (!outputtedOption.equals(expectOption)){\n+                throw new RuntimeException(\"expected option is %s, but actual is %s\".formatted(expectOption, outputtedOption));\n+            }\n+\n+        } catch (Exception e){\n+            System.err.println(output);\n+            throw e;\n+        }\n+    }\n+\n+    private static void testMultipleOption(String option) throws Exception{\n+\n+        String output = startJfrJvm(option).getOutput();\n+        final String regex = \"Option ([a-z-]+) can only be specified once\";\n+\n+        try {\n+            Matcher matcher = Pattern.compile(regex).matcher(output);\n+            if(matcher.find()){\n+                throw new RuntimeException(\"found in output : \\\"%s\\\"\".formatted(regex));\n+            }\n+        } catch (Exception e){\n+            System.err.println(output);\n+            throw e;\n+        }\n+    }\n+\n+\n+    private static void testSpecifiedOptions(String option, Set<String> expectOptions) throws Exception{\n+\n+        String output = startJfrJvm(option).getOutput();\n+\n+        try {\n+            Matcher matcher = Pattern.compile(\"Options ([a-z-]+)((?:, [a-z-]+)*) and ([a-z-]+) can only be specified once\").matcher(output);\n+            matcher.find();\n+\n+            Set<String> outputtedOptions = new HashSet<>();\n+\n+            \/\/ Mandatory First option\n+            outputtedOptions.add(matcher.group(1));\n+\n+            \/\/ A collection of non-mandatory options, strings joined by \",\".\n+            Arrays.stream(matcher.group(2).split(\", \")).filter(s->s.length() > 0).forEach(outputtedOptions::add);\n+\n+            \/\/ Mandatory last option\n+            outputtedOptions.add(matcher.group(3));\n+\n+            if (!outputtedOptions.equals(expectOptions)){\n+                throw new RuntimeException(\"expected options are %s, but actual are %s\".formatted(expectOptions, outputtedOptions));\n+            }\n+\n+        } catch (Exception e){\n+            System.err.println(output);\n+            throw e;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestStartupOptionSpecifiedOnce.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"}]}