{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.util.StringJoiner;\n@@ -45,0 +46,2 @@\n+    private final List<String> conflictedOptions = new ArrayList<>();\n+\n@@ -67,0 +70,1 @@\n+        checkConflict();\n@@ -71,0 +75,25 @@\n+    protected void checkConflict() {\n+        if (conflictedOptions.isEmpty()) {\n+            return;\n+        }\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"Option\");\n+\n+        \/\/ If multiple options conflict, the following blocks are executed\n+        if (conflictedOptions.size() > 1) {\n+            sb.append(\"s \");\n+            StringJoiner sj = new StringJoiner(\", \");\n+            while (conflictedOptions.size() > 1) {\n+                sj.add(conflictedOptions.remove(0));\n+            }\n+            sb.append(sj);\n+            sb.append(\" and\");\n+        }\n+\n+        sb.append(\" \");\n+        sb.append(conflictedOptions.remove(0));\n+        sb.append(\" can only be specified once.\");\n+        throw new IllegalArgumentException(sb.toString());\n+    }\n+\n@@ -97,1 +126,5 @@\n-                        throw new IllegalArgumentException(\"Duplicates in diagnostic command arguments\");\n+                        if (!conflictedOptions.contains(key)) {\n+                            conflictedOptions.add(key);\n+                        }\n+                    } else {\n+                        options.put(key, v);\n@@ -99,1 +132,0 @@\n-                    options.put(key, v);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/ArgumentParser.java","additions":35,"deletions":3,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.jcmd;\n+\n+\/**\n+ * @test\n+ * @summary The test verifies that options can only be specified once with jcmd JFR\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @modules jdk.jfr\/jdk.jfr.internal.dcmd\n+ * @run main\/othervm jdk.jfr.jcmd.TestJcmdOptionSpecifiedOnce\n+ *\/\n+public class TestJcmdOptionSpecifiedOnce {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        testJCmdConflict();\n+    }\n+\n+    private static void testJCmdConflict() {\n+        var output= JcmdHelper.jcmd(\"JFR.start name=hello name=greetings\");\n+        output.shouldContain(\"name can only be specified once\");\n+    }\n+}\n+\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestJcmdOptionSpecifiedOnce.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.startupargs;\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/**\n+ * @test The test verifies that options can only be specified once with --XX:StartFlightRecording\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main jdk.jfr.startupargs.TestStartupOptionSpecifiedOnce\n+ *\/\n+public class TestStartupOptionSpecifiedOnce {\n+\n+    public static void main(String[] args) throws Exception {\n+        testStartFlightRecordingConflict();\n+        testConflictThreeOptions();\n+        testAbleMultipleOption();\n+    }\n+\n+    private static void testStartFlightRecordingConflict() throws Exception {\n+        var output = ProcessTools.executeTestJava(\"-XX:StartFlightRecording:disk=true,disk=false,name=cat,name=dog\");\n+        output.shouldContain(\"disk and name can only be specified once.\");\n+    }\n+\n+    private static void testConflictThreeOptions() throws Exception {\n+        var output = ProcessTools.executeTestJava(\"-XX:StartFlightRecording:name=abc,name=def,disk=true,disk=false,delay=1s,delay=2s\");\n+        output.shouldContain(\"name, disk and delay can only be specified once.\");\n+    }\n+\n+    private static void testAbleMultipleOption() throws Exception {\n+        var output = ProcessTools.executeTestJava(\"-XX:StartFlightRecording:settings=default,settings=profile\");\n+        output.shouldNotContain(\"settings can only be specified once\");\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestStartupOptionSpecifiedOnce.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}