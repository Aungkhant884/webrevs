{"files":[{"patch":"@@ -549,0 +549,20 @@\n+#ifndef _LP64\n+\/\/ Helper, on 32bit, for os::has_allocatable_memory_limit\n+static bool is_allocatable(size_t s) {\n+  if (s < 2 * G) {\n+    return true;\n+  }\n+  \/\/ Use raw anonymous mmap here; no need to go through any\n+  \/\/ of our reservation layers. We will unmap right away.\n+  void* p = ::mmap(NULL, s, PROT_NONE,\n+                   MAP_PRIVATE | MAP_NORESERVE | MAP_ANONYMOUS, -1, 0);\n+  if (p == (void*)MAP_FAILED) {\n+    return false;\n+  } else {\n+    ::munmap(p, s);\n+    return true;\n+  }\n+}\n+#endif \/\/ !_LP64\n+\n+\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -644,20 +644,0 @@\n-bool os::is_allocatable(size_t bytes) {\n-#ifdef AMD64\n-  \/\/ unused on amd64?\n-  return true;\n-#else\n-\n-  if (bytes < 2 * G) {\n-    return true;\n-  }\n-\n-  char* addr = reserve_memory(bytes);\n-\n-  if (addr != NULL) {\n-    release_memory(addr, bytes);\n-  }\n-\n-  return addr != NULL;\n-#endif \/\/ AMD64\n-}\n-\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/os_bsd_x86.cpp","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -40,2 +40,0 @@\n-  static bool is_allocatable(size_t bytes);\n-\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/os_bsd_x86.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -161,18 +161,0 @@\n-bool os::is_allocatable(size_t bytes) {\n-#ifdef _LP64\n-  return true;\n-#else\n-  if (bytes < 2 * G) {\n-    return true;\n-  }\n-\n-  char* addr = reserve_memory(bytes);\n-\n-  if (addr != NULL) {\n-    release_memory(addr, bytes);\n-  }\n-\n-  return addr != NULL;\n-#endif \/\/ _LP64\n-}\n-\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/os_bsd_zero.cpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-  static bool is_allocatable(size_t bytes);\n-\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/os_bsd_zero.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -307,4 +307,0 @@\n-bool os::is_allocatable(size_t bytes) {\n-  return true;\n-}\n-\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-  static bool is_allocatable(size_t bytes);\n-\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -416,4 +416,0 @@\n-bool os::is_allocatable(size_t bytes) {\n-  return true;\n-}\n-\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/os_linux_arm.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,2 +37,0 @@\n-  static bool is_allocatable(size_t bytes);\n-\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/os_linux_arm.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -481,20 +481,0 @@\n-bool os::is_allocatable(size_t bytes) {\n-#ifdef AMD64\n-  \/\/ unused on amd64?\n-  return true;\n-#else\n-\n-  if (bytes < 2 * G) {\n-    return true;\n-  }\n-\n-  char* addr = reserve_memory(bytes);\n-\n-  if (addr != NULL) {\n-    release_memory(addr, bytes);\n-  }\n-\n-  return addr != NULL;\n-#endif \/\/ AMD64\n-}\n-\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-  static bool is_allocatable(size_t bytes);\n-\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -185,18 +185,0 @@\n-bool os::is_allocatable(size_t bytes) {\n-#ifdef _LP64\n-  return true;\n-#else\n-  if (bytes < 2 * G) {\n-    return true;\n-  }\n-\n-  char* addr = reserve_memory(bytes);\n-\n-  if (addr != NULL) {\n-    release_memory(addr, bytes);\n-  }\n-\n-  return addr != NULL;\n-#endif \/\/ _LP64\n-}\n-\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/os_linux_zero.cpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-  static bool is_allocatable(size_t bytes);\n-\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/os_linux_zero.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}