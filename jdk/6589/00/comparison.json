{"files":[{"patch":"@@ -100,1 +100,1 @@\n-     * in any way: for instance, calling {@link #withReturnLayout(MemoryLayout)} on the resulting descriptor\n+     * in any way: for instance, calling {@link #changeReturnLayout(MemoryLayout)} on the resulting descriptor\n@@ -126,1 +126,13 @@\n-    public FunctionDescriptor withAppendedArgumentLayouts(MemoryLayout... addedLayouts) {\n+    public FunctionDescriptor appendArgumentLayouts(MemoryLayout... addedLayouts) {\n+        return insertArgumentLayouts(argLayouts.size(), addedLayouts);\n+    }\n+\n+    \/**\n+     * Create a new function descriptor with the given argument layouts inserted at the given index, into the argument\n+     * layout array of this function descriptor.\n+     * @param index the index at which to insert the arguments\n+     * @param addedLayouts the argument layouts to insert at given index.\n+     * @return the new function descriptor.\n+     * @throws IllegalArgumentException if {@code index < 0 || index > argumentLayouts().size()}.\n+     *\/\n+    public FunctionDescriptor insertArgumentLayouts(int index, MemoryLayout... addedLayouts) {\n@@ -129,1 +141,6 @@\n-        List<MemoryLayout> newLayouts = Stream.concat(argLayouts.stream(), Stream.of(addedLayouts)).toList();\n+        if (index < 0 || index > argLayouts.size())\n+            throw new IllegalArgumentException(\"Index out of bounds: \" + index);\n+        List<MemoryLayout> newLayouts = new ArrayList<>(argLayouts.size() + addedLayouts.length);\n+        newLayouts.addAll(argLayouts.subList(0, index));\n+        newLayouts.addAll(List.of(addedLayouts));\n+        newLayouts.addAll(argLayouts.subList(index, argLayouts.size()));\n@@ -138,1 +155,1 @@\n-    public FunctionDescriptor withReturnLayout(MemoryLayout newReturn) {\n+    public FunctionDescriptor changeReturnLayout(MemoryLayout newReturn) {\n@@ -144,1 +161,2 @@\n-     * Create a new function descriptor with the return layout dropped.\n+     * Create a new function descriptor with the return layout dropped. This is useful to model functions\n+     * which return no values.\n@@ -147,1 +165,1 @@\n-    public FunctionDescriptor withVoidReturnLayout() {\n+    public FunctionDescriptor dropReturnLayout() {\n@@ -215,1 +233,1 @@\n-                    ConstantDescs.BSM_INVOKE, \"function\", AbstractLayout.CD_FUNCTION_DESC, constants.toArray(new ConstantDesc[0])));\n+                ConstantDescs.BSM_INVOKE, \"function\", AbstractLayout.CD_FUNCTION_DESC, constants.toArray(new ConstantDesc[0])));\n@@ -234,1 +252,6 @@\n-        public FunctionDescriptor withAppendedArgumentLayouts(MemoryLayout... addedLayouts) {\n+        public FunctionDescriptor appendArgumentLayouts(MemoryLayout... addedLayouts) {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public FunctionDescriptor insertArgumentLayouts(int index, MemoryLayout... addedLayouts) {\n@@ -239,1 +262,1 @@\n-        public FunctionDescriptor withReturnLayout(MemoryLayout newReturn) {\n+        public FunctionDescriptor changeReturnLayout(MemoryLayout newReturn) {\n@@ -244,1 +267,1 @@\n-        public FunctionDescriptor withVoidReturnLayout() {\n+        public FunctionDescriptor dropReturnLayout() {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/FunctionDescriptor.java","additions":33,"deletions":10,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-        return layout.accessHandle();\n+        return layout.accessHandle(false);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryHandles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1041,1 +1041,1 @@\n-        return (byte)layout.accessHandle().get(this, offset);\n+        return (byte) layout.accessHandle(false).get(this, offset);\n@@ -1057,1 +1057,1 @@\n-        layout.accessHandle().set(this, offset, value);\n+        layout.accessHandle(false).set(this, offset, value);\n@@ -1074,1 +1074,1 @@\n-        return (boolean)layout.accessHandle().get(this, offset);\n+        return (boolean) layout.accessHandle(false).get(this, offset);\n@@ -1090,1 +1090,1 @@\n-        layout.accessHandle().set(this, offset, value);\n+        layout.accessHandle(false).set(this, offset, value);\n@@ -1107,1 +1107,1 @@\n-        return (char)layout.accessHandle().get(this, offset);\n+        return (char) layout.accessHandle(false).get(this, offset);\n@@ -1123,1 +1123,1 @@\n-        layout.accessHandle().set(this, offset, value);\n+        layout.accessHandle(false).set(this, offset, value);\n@@ -1140,1 +1140,1 @@\n-        return (short)layout.accessHandle().get(this, offset);\n+        return (short) layout.accessHandle(false).get(this, offset);\n@@ -1156,1 +1156,1 @@\n-        layout.accessHandle().set(this, offset, value);\n+        layout.accessHandle(false).set(this, offset, value);\n@@ -1173,1 +1173,1 @@\n-        return (int)layout.accessHandle().get(this, offset);\n+        return (int) layout.accessHandle(false).get(this, offset);\n@@ -1189,1 +1189,1 @@\n-        layout.accessHandle().set(this, offset, value);\n+        layout.accessHandle(false).set(this, offset, value);\n@@ -1206,1 +1206,1 @@\n-        return (float)layout.accessHandle().get(this, offset);\n+        return (float) layout.accessHandle(false).get(this, offset);\n@@ -1222,1 +1222,1 @@\n-        layout.accessHandle().set(this, offset, value);\n+        layout.accessHandle(false).set(this, offset, value);\n@@ -1239,1 +1239,1 @@\n-        return (long)layout.accessHandle().get(this, offset);\n+        return (long) layout.accessHandle(false).get(this, offset);\n@@ -1255,1 +1255,1 @@\n-        layout.accessHandle().set(this, offset, value);\n+        layout.accessHandle(false).set(this, offset, value);\n@@ -1272,1 +1272,1 @@\n-        return (double)layout.accessHandle().get(this, offset);\n+        return (double) layout.accessHandle(false).get(this, offset);\n@@ -1288,1 +1288,1 @@\n-        layout.accessHandle().set(this, offset, value);\n+        layout.accessHandle(false).set(this, offset, value);\n@@ -1305,1 +1305,1 @@\n-        return (MemoryAddress)layout.accessHandle().get(this, offset);\n+        return (MemoryAddress) layout.accessHandle(false).get(this, offset);\n@@ -1321,1 +1321,1 @@\n-        layout.accessHandle().set(this, offset, value.address());\n+        layout.accessHandle(false).set(this, offset, value.address());\n@@ -1338,1 +1338,2 @@\n-        return (char)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        return (char)layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n+                .get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n@@ -1354,1 +1355,2 @@\n-        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n+        layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n+                .set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n@@ -1371,1 +1373,2 @@\n-        return (short)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        return (short)layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n+                .get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n@@ -1387,1 +1390,2 @@\n-        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n+        layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n+                .set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n@@ -1404,1 +1408,2 @@\n-        return (int)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        return (int)layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n+                .get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n@@ -1420,1 +1425,2 @@\n-        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n+        layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n+                .set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n@@ -1437,1 +1443,2 @@\n-        return (float)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        return (float)layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n+                .get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n@@ -1453,1 +1460,2 @@\n-        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n+        layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n+                .set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n@@ -1470,1 +1478,2 @@\n-        return (long)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        return (long)layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n+                .get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n@@ -1486,1 +1495,2 @@\n-        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n+        layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n+                .set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n@@ -1503,1 +1513,2 @@\n-        return (double)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        return (double)layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n+                .get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n@@ -1519,1 +1530,2 @@\n-        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n+        layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n+                .set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n@@ -1536,1 +1548,2 @@\n-        return (MemoryAddress)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        return (MemoryAddress)layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n+                .get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n@@ -1552,1 +1565,2 @@\n-        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value.address());\n+        layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n+                .set(this, Utils.scaleOffset(this, index, layout.byteSize()), value.address());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":46,"deletions":32,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -73,0 +73,4 @@\n+    static {\n+        Utils.LAYOUT_ACCESS = ValueLayout::accessHandle;\n+    }\n+\n@@ -198,1 +202,4 @@\n-    private VarHandle handle;\n+    private final VarHandle[] handles = new VarHandle[2];\n+\n+    static final int ALIGNED_POS = 0;\n+    static final int UNALIGNED_POS = 1;\n@@ -201,2 +208,3 @@\n-    VarHandle accessHandle() {\n-        if (handle == null) {\n+    VarHandle accessHandle(boolean aligned) {\n+        int pos = aligned ? ALIGNED_POS : UNALIGNED_POS;\n+        if (handles[pos] == null) {\n@@ -204,1 +212,1 @@\n-            handle = Utils.makeMemoryAccessVarHandle(this, false);\n+            handles[pos] = Utils.makeMemoryAccessVarHandle(this, aligned);\n@@ -206,1 +214,1 @@\n-        return handle;\n+        return handles[pos];\n@@ -516,2 +524,2 @@\n-     * A value layout constant whose size is the same as that of a machine address (e.g. {@code size_t}),\n-     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * A value layout constant whose size {@code S} is the same as that of a machine address (e.g. {@code size_t}),\n+     * bit-alignment set to {@code S}, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -520,1 +528,1 @@\n-    MemoryLayout.valueLayout(MemoryAddress.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+    MemoryLayout.valueLayout(MemoryAddress.class, ByteOrder.nativeOrder());\n@@ -523,1 +531,1 @@\n-    public static final OfAddress ADDRESS = new OfAddress(ByteOrder.nativeOrder()).withBitAlignment(8);\n+    public static final OfAddress ADDRESS = new OfAddress(ByteOrder.nativeOrder());\n@@ -533,1 +541,2 @@\n-    public static final OfByte JAVA_BYTE = new OfByte(ByteOrder.nativeOrder()).withBitAlignment(8);\n+    public static final OfByte JAVA_BYTE = new OfByte(ByteOrder.nativeOrder())\n+            .withBitAlignment(8);\n@@ -543,1 +552,2 @@\n-    public static final OfBoolean JAVA_BOOLEAN = new OfBoolean(ByteOrder.nativeOrder()).withBitAlignment(8);\n+    public static final OfBoolean JAVA_BOOLEAN = new OfBoolean(ByteOrder.nativeOrder())\n+            .withBitAlignment(8);\n@@ -547,1 +557,1 @@\n-     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit-alignment set to 16, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -550,1 +560,1 @@\n-    MemoryLayout.valueLayout(char.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+    MemoryLayout.valueLayout(char.class, ByteOrder.nativeOrder()).withBitAlignment(16);\n@@ -553,1 +563,2 @@\n-    public static final OfChar JAVA_CHAR = new OfChar(ByteOrder.nativeOrder()).withBitAlignment(8);\n+    public static final OfChar JAVA_CHAR = new OfChar(ByteOrder.nativeOrder())\n+            .withBitAlignment(16);\n@@ -557,1 +568,1 @@\n-     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit-alignment set to 16, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -560,1 +571,1 @@\n-    MemoryLayout.valueLayout(short.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+    MemoryLayout.valueLayout(short.class, ByteOrder.nativeOrder()).withBitAlignment(16);\n@@ -563,1 +574,2 @@\n-    public static final OfShort JAVA_SHORT = new OfShort(ByteOrder.nativeOrder()).withBitAlignment(8);\n+    public static final OfShort JAVA_SHORT = new OfShort(ByteOrder.nativeOrder())\n+            .withBitAlignment(16);\n@@ -567,1 +579,1 @@\n-     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit-alignment set to 32, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -570,1 +582,1 @@\n-    MemoryLayout.valueLayout(int.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+    MemoryLayout.valueLayout(int.class, ByteOrder.nativeOrder()).withBitAlignment(32);\n@@ -573,1 +585,2 @@\n-    public static final OfInt JAVA_INT = new OfInt(ByteOrder.nativeOrder()).withBitAlignment(8);\n+    public static final OfInt JAVA_INT = new OfInt(ByteOrder.nativeOrder())\n+            .withBitAlignment(32);\n@@ -577,1 +590,1 @@\n-     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit-alignment set to 64, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -580,1 +593,1 @@\n-    MemoryLayout.valueLayout(long.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+    MemoryLayout.valueLayout(long.class, ByteOrder.nativeOrder()).withBitAlignment(64);\n@@ -584,1 +597,1 @@\n-            .withBitAlignment(8);\n+            .withBitAlignment(ADDRESS_SIZE_BITS);\n@@ -588,1 +601,1 @@\n-     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit-alignment set to 32, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -591,1 +604,1 @@\n-    MemoryLayout.valueLayout(float.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+    MemoryLayout.valueLayout(float.class, ByteOrder.nativeOrder()).withBitAlignment(32);\n@@ -594,1 +607,2 @@\n-    public static final OfFloat JAVA_FLOAT = new OfFloat(ByteOrder.nativeOrder()).withBitAlignment(8);\n+    public static final OfFloat JAVA_FLOAT = new OfFloat(ByteOrder.nativeOrder())\n+            .withBitAlignment(32);\n@@ -598,1 +612,1 @@\n-     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit-alignment set to 64, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -601,1 +615,1 @@\n-    MemoryLayout.valueLayout(double.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n+    MemoryLayout.valueLayout(double.class, ByteOrder.nativeOrder()).withBitAlignment(64);\n@@ -604,1 +618,2 @@\n-    public static final OfDouble JAVA_DOUBLE = new OfDouble(ByteOrder.nativeOrder()).withBitAlignment(8);\n+    public static final OfDouble JAVA_DOUBLE = new OfDouble(ByteOrder.nativeOrder())\n+            .withBitAlignment(ADDRESS_SIZE_BITS);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ValueLayout.java","additions":44,"deletions":29,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.incubator.foreign.MemoryLayout;\n@@ -39,0 +40,2 @@\n+import java.util.Objects;\n+\n@@ -270,1 +273,8 @@\n-        return NativeMemorySegmentImpl.EVERYTHING.get(layout, toRawLongValue() + (index * layout.byteSize()));\n+        if (layout.byteAlignment() <= layout.byteSize()) {\n+            checkAlignment(layout);\n+            return (char)Utils.accessHandle(layout, true)\n+                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n+        } else {\n+            return (char)Utils.accessHandle(layout, false)\n+                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n+        }\n@@ -278,1 +288,8 @@\n-        NativeMemorySegmentImpl.EVERYTHING.set(layout, toRawLongValue() + (index * layout.byteSize()), value);\n+        if (layout.byteAlignment() <= layout.byteSize()) {\n+            checkAlignment(layout);\n+            Utils.accessHandle(layout, true)\n+                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n+        } else {\n+            Utils.accessHandle(layout, false)\n+                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n+        }\n@@ -286,1 +303,8 @@\n-        return NativeMemorySegmentImpl.EVERYTHING.get(layout, toRawLongValue() + (index * layout.byteSize()));\n+        if (layout.byteAlignment() <= layout.byteSize()) {\n+            checkAlignment(layout);\n+            return (short)Utils.accessHandle(layout, true)\n+                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n+        } else {\n+            return (short)Utils.accessHandle(layout, false)\n+                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n+        }\n@@ -294,1 +318,8 @@\n-        NativeMemorySegmentImpl.EVERYTHING.set(layout, toRawLongValue() + (index * layout.byteSize()), value);\n+        if (layout.byteAlignment() <= layout.byteSize()) {\n+            checkAlignment(layout);\n+            Utils.accessHandle(layout, true)\n+                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n+        } else {\n+            Utils.accessHandle(layout, false)\n+                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n+        }\n@@ -302,1 +333,8 @@\n-        return NativeMemorySegmentImpl.EVERYTHING.get(layout, toRawLongValue() + (index * layout.byteSize()));\n+        if (layout.byteAlignment() <= layout.byteSize()) {\n+            checkAlignment(layout);\n+            return (int)Utils.accessHandle(layout, true)\n+                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n+        } else {\n+            return (int)Utils.accessHandle(layout, false)\n+                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n+        }\n@@ -310,1 +348,8 @@\n-        NativeMemorySegmentImpl.EVERYTHING.set(layout, toRawLongValue() + (index * layout.byteSize()), value);\n+        if (layout.byteAlignment() <= layout.byteSize()) {\n+            checkAlignment(layout);\n+            Utils.accessHandle(layout, true)\n+                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n+        } else {\n+            Utils.accessHandle(layout, false)\n+                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n+        }\n@@ -318,1 +363,8 @@\n-        return NativeMemorySegmentImpl.EVERYTHING.get(layout, toRawLongValue() + (index * layout.byteSize()));\n+        if (layout.byteAlignment() <= layout.byteSize()) {\n+            checkAlignment(layout);\n+            return (float)Utils.accessHandle(layout, true)\n+                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n+        } else {\n+            return (float)Utils.accessHandle(layout, false)\n+                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n+        }\n@@ -326,1 +378,8 @@\n-        NativeMemorySegmentImpl.EVERYTHING.set(layout, toRawLongValue() + (index * layout.byteSize()), value);\n+        if (layout.byteAlignment() <= layout.byteSize()) {\n+            checkAlignment(layout);\n+            Utils.accessHandle(layout, true)\n+                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n+        } else {\n+            Utils.accessHandle(layout, false)\n+                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n+        }\n@@ -334,1 +393,8 @@\n-        return NativeMemorySegmentImpl.EVERYTHING.get(layout, toRawLongValue() + (index * layout.byteSize()));\n+        if (layout.byteAlignment() <= layout.byteSize()) {\n+            checkAlignment(layout);\n+            return (long)Utils.accessHandle(layout, true)\n+                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n+        } else {\n+            return (long)Utils.accessHandle(layout, false)\n+                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n+        }\n@@ -342,1 +408,8 @@\n-        NativeMemorySegmentImpl.EVERYTHING.set(layout, toRawLongValue() + (index * layout.byteSize()), value);\n+        if (layout.byteAlignment() <= layout.byteSize()) {\n+            checkAlignment(layout);\n+            Utils.accessHandle(layout, true)\n+                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n+        } else {\n+            Utils.accessHandle(layout, false)\n+                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n+        }\n@@ -350,1 +423,8 @@\n-        return NativeMemorySegmentImpl.EVERYTHING.get(layout, toRawLongValue() + (index * layout.byteSize()));\n+        if (layout.byteAlignment() <= layout.byteSize()) {\n+            checkAlignment(layout);\n+            return (double)Utils.accessHandle(layout, true)\n+                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n+        } else {\n+            return (double)Utils.accessHandle(layout, false)\n+                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n+        }\n@@ -358,1 +438,8 @@\n-        NativeMemorySegmentImpl.EVERYTHING.set(layout, toRawLongValue() + (index * layout.byteSize()), value);\n+        if (layout.byteAlignment() <= layout.byteSize()) {\n+            checkAlignment(layout);\n+            Utils.accessHandle(layout, true)\n+                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n+        } else {\n+            Utils.accessHandle(layout, false)\n+                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n+        }\n@@ -366,1 +453,8 @@\n-        return NativeMemorySegmentImpl.EVERYTHING.get(layout, toRawLongValue() + (index * layout.byteSize()));\n+        if (layout.byteAlignment() <= layout.byteSize()) {\n+            checkAlignment(layout);\n+            return (MemoryAddress)Utils.accessHandle(layout, true)\n+                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n+        } else {\n+            return (MemoryAddress)Utils.accessHandle(layout, false)\n+                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n+        }\n@@ -374,1 +468,16 @@\n-        NativeMemorySegmentImpl.EVERYTHING.set(layout, toRawLongValue() + (index * layout.byteSize()), value.address());\n+        Objects.requireNonNull(value);\n+        if (layout.byteAlignment() <= layout.byteSize()) {\n+            checkAlignment(layout);\n+            Utils.accessHandle(layout, true)\n+                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n+        } else {\n+            Utils.accessHandle(layout, false)\n+                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n+        }\n+    }\n+\n+    @ForceInline\n+    private void checkAlignment(MemoryLayout layout) {\n+        if (toRawLongValue() % layout.byteAlignment() != 0) {\n+            throw new IllegalStateException(\"Misaligned access at address: \" + toRawLongValue());\n+        }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java","additions":123,"deletions":14,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -176,0 +177,12 @@\n+\n+    @Stable\n+    public static LayoutAccess LAYOUT_ACCESS;\n+\n+    public interface LayoutAccess {\n+        VarHandle accessHandle(ValueLayout valueLayout, boolean aligned);\n+    }\n+\n+    @ForceInline\n+    public static VarHandle accessHandle(ValueLayout layout, boolean aligned) {\n+        return LAYOUT_ACCESS.accessHandle(layout, aligned);\n+    }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        desc = desc.withAppendedArgumentLayouts(layout);\n+        desc = desc.appendArgumentLayouts(layout);\n@@ -71,1 +71,1 @@\n-        desc = desc.withReturnLayout(layout);\n+        desc = desc.changeReturnLayout(layout);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequenceBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -107,0 +107,7 @@\n+    private static final ValueLayout.OfChar JAVA_CHAR_UNALIGNED = JAVA_CHAR.withBitAlignment(8);\n+    private static final ValueLayout.OfShort JAVA_SHORT_UNALIGNED = JAVA_SHORT.withBitAlignment(8);\n+    private static final ValueLayout.OfInt JAVA_INT_UNALIGNED = JAVA_INT.withBitAlignment(8);\n+    private static final ValueLayout.OfFloat JAVA_FLOAT_UNALIGNED = JAVA_FLOAT.withBitAlignment(8);\n+    private static final ValueLayout.OfLong JAVA_LONG_UNALIGNED = JAVA_LONG.withBitAlignment(8);\n+    private static final ValueLayout.OfDouble JAVA_DOUBLE_UNALIGNED = JAVA_DOUBLE.withBitAlignment(8);\n+\n@@ -723,1 +730,1 @@\n-            ptr.set(JAVA_LONG, 0, (long) o);\n+            ptr.set(JAVA_LONG_UNALIGNED, 0, (long) o);\n@@ -725,1 +732,1 @@\n-            ptr.set(JAVA_LONG, 0, (int) o);\n+            ptr.set(JAVA_LONG_UNALIGNED, 0, (int) o);\n@@ -727,1 +734,1 @@\n-            ptr.set(JAVA_LONG, 0, (short) o);\n+            ptr.set(JAVA_LONG_UNALIGNED, 0, (short) o);\n@@ -729,1 +736,1 @@\n-            ptr.set(JAVA_LONG, 0, (char) o);\n+            ptr.set(JAVA_LONG_UNALIGNED, 0, (char) o);\n@@ -731,1 +738,1 @@\n-            ptr.set(JAVA_LONG, 0, (byte) o);\n+            ptr.set(JAVA_LONG_UNALIGNED, 0, (byte) o);\n@@ -733,1 +740,1 @@\n-            ptr.set(JAVA_FLOAT, 0, (float) o);\n+            ptr.set(JAVA_FLOAT_UNALIGNED, 0, (float) o);\n@@ -735,1 +742,1 @@\n-            ptr.set(JAVA_DOUBLE, 0, (double) o);\n+            ptr.set(JAVA_DOUBLE_UNALIGNED, 0, (double) o);\n@@ -737,1 +744,2 @@\n-            ptr.set(JAVA_BOOLEAN, 0, (boolean) o);\n+            boolean b = (boolean)o;\n+            ptr.set(JAVA_LONG_UNALIGNED, 0, b ? (byte)1 : (byte)0);\n@@ -745,1 +753,1 @@\n-            ptr.set(JAVA_LONG, 0, (long) o);\n+            ptr.set(JAVA_LONG_UNALIGNED, 0, (long) o);\n@@ -747,1 +755,1 @@\n-            ptr.set(JAVA_INT, 0, (int) o);\n+            ptr.set(JAVA_INT_UNALIGNED, 0, (int) o);\n@@ -749,1 +757,1 @@\n-            ptr.set(JAVA_SHORT, 0, (short) o);\n+            ptr.set(JAVA_SHORT_UNALIGNED, 0, (short) o);\n@@ -751,1 +759,1 @@\n-            ptr.set(JAVA_CHAR, 0, (char) o);\n+            ptr.set(JAVA_CHAR_UNALIGNED, 0, (char) o);\n@@ -755,1 +763,1 @@\n-            ptr.set(JAVA_FLOAT, 0, (float) o);\n+            ptr.set(JAVA_FLOAT_UNALIGNED, 0, (float) o);\n@@ -757,1 +765,1 @@\n-            ptr.set(JAVA_DOUBLE, 0, (double) o);\n+            ptr.set(JAVA_DOUBLE_UNALIGNED, 0, (double) o);\n@@ -767,1 +775,1 @@\n-            return ptr.get(JAVA_LONG, 0);\n+            return ptr.get(JAVA_LONG_UNALIGNED, 0);\n@@ -769,1 +777,1 @@\n-            return ptr.get(JAVA_INT, 0);\n+            return ptr.get(JAVA_INT_UNALIGNED, 0);\n@@ -771,1 +779,1 @@\n-            return ptr.get(JAVA_SHORT, 0);\n+            return ptr.get(JAVA_SHORT_UNALIGNED, 0);\n@@ -773,1 +781,1 @@\n-            return ptr.get(JAVA_CHAR, 0);\n+            return ptr.get(JAVA_CHAR_UNALIGNED, 0);\n@@ -777,1 +785,1 @@\n-            return ptr.get(JAVA_FLOAT, 0);\n+            return ptr.get(JAVA_FLOAT_UNALIGNED, 0);\n@@ -779,1 +787,1 @@\n-            return ptr.get(JAVA_DOUBLE, 0);\n+            return ptr.get(JAVA_DOUBLE_UNALIGNED, 0);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":28,"deletions":20,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.lang.constant.Constable;\n@@ -38,1 +37,0 @@\n-import java.util.stream.Collectors;\n@@ -70,1 +68,1 @@\n-        fd = fd.withAppendedArgumentLayouts(C_POINTER);\n+        fd = fd.appendArgumentLayouts(C_POINTER);\n@@ -81,1 +79,1 @@\n-        fd = fd.withReturnLayout(C_INT);\n+        fd = fd.changeReturnLayout(C_INT);\n@@ -92,1 +90,1 @@\n-        fd = fd.withVoidReturnLayout();\n+        fd = fd.dropReturnLayout();\n","filename":"test\/jdk\/java\/foreign\/TestFunctionDescriptor.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import jdk.incubator.foreign.MemoryAddress;\n@@ -130,1 +129,1 @@\n-                FunctionDescriptor fd = baseFD.withReturnLayout(baseFD.argumentLayouts().get(i));\n+                FunctionDescriptor fd = baseFD.changeReturnLayout(baseFD.argumentLayouts().get(i));\n","filename":"test\/jdk\/java\/foreign\/TestIntrinsics.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-                MemorySegment segment = MemorySegment.allocateNative(64, scope);\n+                MemorySegment segment = MemorySegment.allocateNative(128, scope);\n@@ -86,4 +86,4 @@\n-                segmentSetter.set(t, layout, 4, value);\n-                assertEquals(bufferGetter.get(buffer, 4), value);\n-                bufferSetter.set(buffer, 4, value);\n-                assertEquals(value, segmentGetter.get(t, layout, 4));\n+                segmentSetter.set(t, layout, 8, value);\n+                assertEquals(bufferGetter.get(buffer, 8), value);\n+                bufferSetter.set(buffer, 8, value);\n+                assertEquals(value, segmentGetter.get(t, layout, 8));\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccessInstance.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,24 @@\n+\/*\n+ * @test id=scope\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n+ * @modules jdk.incubator.foreign\/jdk.internal.foreign\n+ * @build NativeTestHelper CallGeneratorHelper TestUpcall\n+ *\n+ * @run testng\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-VerifyDependencies\n+ *   --enable-native-access=ALL-UNNAMED -Dgenerator.sample.factor=17\n+ *   -DUPCALL_TEST_TYPE=SCOPE\n+ *   TestUpcall\n+ *\/\n+\n+\/*\n+ * @test id=no_scope\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n+ * @modules jdk.incubator.foreign\/jdk.internal.foreign\n+ * @build NativeTestHelper CallGeneratorHelper TestUpcall\n+ *\n+ * @run testng\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-VerifyDependencies\n+ *   --enable-native-access=ALL-UNNAMED -Dgenerator.sample.factor=17\n+ *   -DUPCALL_TEST_TYPE=NO_SCOPE\n+ *   TestUpcall\n+ *\/\n+\n@@ -37,1 +61,0 @@\n-import jdk.incubator.foreign.Addressable;\n@@ -43,1 +66,0 @@\n-import jdk.incubator.foreign.MemoryAddress;\n@@ -107,1 +129,1 @@\n-            return;\/\/throw new SkipException(\"Skipping tests that were not selected\");\n+            throw new SkipException(\"Skipping tests that were not selected\");\n","filename":"test\/jdk\/java\/foreign\/TestUpcall.java","additions":26,"deletions":4,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -92,1 +92,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -122,1 +122,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -151,1 +151,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -180,1 +180,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -204,1 +204,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -234,1 +234,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -268,1 +268,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -324,1 +324,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -366,1 +366,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -387,1 +387,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -445,1 +445,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestSysVCallArranger.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-                baseDesc.withAppendedArgumentLayouts(C_POINTER)\n+                baseDesc.appendArgumentLayouts(C_POINTER)\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/Upcalls.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}