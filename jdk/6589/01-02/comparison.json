{"files":[{"patch":"@@ -168,1 +168,1 @@\n-        return layout.accessHandle(false);\n+        return layout.accessHandle();\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryHandles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1041,1 +1041,1 @@\n-        return (byte) layout.accessHandle(false).get(this, offset);\n+        return (byte)layout.accessHandle().get(this, offset);\n@@ -1057,1 +1057,1 @@\n-        layout.accessHandle(false).set(this, offset, value);\n+        layout.accessHandle().set(this, offset, value);\n@@ -1074,1 +1074,1 @@\n-        return (boolean) layout.accessHandle(false).get(this, offset);\n+        return (boolean)layout.accessHandle().get(this, offset);\n@@ -1090,1 +1090,1 @@\n-        layout.accessHandle(false).set(this, offset, value);\n+        layout.accessHandle().set(this, offset, value);\n@@ -1107,1 +1107,1 @@\n-        return (char) layout.accessHandle(false).get(this, offset);\n+        return (char)layout.accessHandle().get(this, offset);\n@@ -1123,1 +1123,1 @@\n-        layout.accessHandle(false).set(this, offset, value);\n+        layout.accessHandle().set(this, offset, value);\n@@ -1140,1 +1140,1 @@\n-        return (short) layout.accessHandle(false).get(this, offset);\n+        return (short)layout.accessHandle().get(this, offset);\n@@ -1156,1 +1156,1 @@\n-        layout.accessHandle(false).set(this, offset, value);\n+        layout.accessHandle().set(this, offset, value);\n@@ -1173,1 +1173,1 @@\n-        return (int) layout.accessHandle(false).get(this, offset);\n+        return (int)layout.accessHandle().get(this, offset);\n@@ -1189,1 +1189,1 @@\n-        layout.accessHandle(false).set(this, offset, value);\n+        layout.accessHandle().set(this, offset, value);\n@@ -1206,1 +1206,1 @@\n-        return (float) layout.accessHandle(false).get(this, offset);\n+        return (float)layout.accessHandle().get(this, offset);\n@@ -1222,1 +1222,1 @@\n-        layout.accessHandle(false).set(this, offset, value);\n+        layout.accessHandle().set(this, offset, value);\n@@ -1239,1 +1239,1 @@\n-        return (long) layout.accessHandle(false).get(this, offset);\n+        return (long)layout.accessHandle().get(this, offset);\n@@ -1255,1 +1255,1 @@\n-        layout.accessHandle(false).set(this, offset, value);\n+        layout.accessHandle().set(this, offset, value);\n@@ -1272,1 +1272,1 @@\n-        return (double) layout.accessHandle(false).get(this, offset);\n+        return (double)layout.accessHandle().get(this, offset);\n@@ -1288,1 +1288,1 @@\n-        layout.accessHandle(false).set(this, offset, value);\n+        layout.accessHandle().set(this, offset, value);\n@@ -1305,1 +1305,1 @@\n-        return (MemoryAddress) layout.accessHandle(false).get(this, offset);\n+        return (MemoryAddress)layout.accessHandle().get(this, offset);\n@@ -1321,1 +1321,1 @@\n-        layout.accessHandle(false).set(this, offset, value.address());\n+        layout.accessHandle().set(this, offset, value.address());\n@@ -1338,2 +1338,1 @@\n-        return (char)layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n-                .get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        return (char)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n@@ -1355,2 +1354,1 @@\n-        layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n-                .set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n+        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n@@ -1373,2 +1371,1 @@\n-        return (short)layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n-                .get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        return (short)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n@@ -1390,2 +1387,1 @@\n-        layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n-                .set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n+        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n@@ -1408,2 +1404,1 @@\n-        return (int)layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n-                .get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        return (int)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n@@ -1425,2 +1420,1 @@\n-        layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n-                .set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n+        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n@@ -1443,2 +1437,1 @@\n-        return (float)layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n-                .get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        return (float)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n@@ -1460,2 +1453,1 @@\n-        layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n-                .set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n+        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n@@ -1478,2 +1470,1 @@\n-        return (long)layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n-                .get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        return (long)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n@@ -1495,2 +1486,1 @@\n-        layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n-                .set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n+        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n@@ -1513,2 +1503,1 @@\n-        return (double)layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n-                .get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        return (double)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n@@ -1530,2 +1519,1 @@\n-        layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n-                .set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n+        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value);\n@@ -1548,2 +1536,1 @@\n-        return (MemoryAddress)layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n-                .get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n+        return (MemoryAddress)layout.accessHandle().get(this, Utils.scaleOffset(this, index, layout.byteSize()));\n@@ -1565,2 +1552,1 @@\n-        layout.accessHandle(layout.byteAlignment() <= layout.byteSize())\n-                .set(this, Utils.scaleOffset(this, index, layout.byteSize()), value.address());\n+        layout.accessHandle().set(this, Utils.scaleOffset(this, index, layout.byteSize()), value.address());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":32,"deletions":46,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -73,4 +73,0 @@\n-    static {\n-        Utils.LAYOUT_ACCESS = ValueLayout::accessHandle;\n-    }\n-\n@@ -202,4 +198,1 @@\n-    private final VarHandle[] handles = new VarHandle[2];\n-\n-    private static final int ALIGNED_POS = 0;\n-    private static final int UNALIGNED_POS = 1;\n+    private VarHandle handle;\n@@ -208,3 +201,2 @@\n-    VarHandle accessHandle(boolean aligned) {\n-        int pos = aligned ? ALIGNED_POS : UNALIGNED_POS;\n-        if (handles[pos] == null) {\n+    VarHandle accessHandle() {\n+        if (handle == null) {\n@@ -212,1 +204,1 @@\n-            handles[pos] = Utils.makeMemoryAccessVarHandle(this, aligned);\n+            handle = Utils.makeMemoryAccessVarHandle(this, false);\n@@ -214,1 +206,1 @@\n-        return handles[pos];\n+        return handle;\n@@ -524,2 +516,2 @@\n-     * A value layout constant whose size {@code S} is the same as that of a machine address (e.g. {@code size_t}),\n-     * bit-alignment set to {@code S}, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * A value layout constant whose size is the same as that of a machine address (e.g. {@code size_t}),\n+     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -528,1 +520,1 @@\n-    MemoryLayout.valueLayout(MemoryAddress.class, ByteOrder.nativeOrder());\n+    MemoryLayout.valueLayout(MemoryAddress.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -531,1 +523,1 @@\n-    public static final OfAddress ADDRESS = new OfAddress(ByteOrder.nativeOrder());\n+    public static final OfAddress ADDRESS = new OfAddress(ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -541,2 +533,1 @@\n-    public static final OfByte JAVA_BYTE = new OfByte(ByteOrder.nativeOrder())\n-            .withBitAlignment(8);\n+    public static final OfByte JAVA_BYTE = new OfByte(ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -552,2 +543,1 @@\n-    public static final OfBoolean JAVA_BOOLEAN = new OfBoolean(ByteOrder.nativeOrder())\n-            .withBitAlignment(8);\n+    public static final OfBoolean JAVA_BOOLEAN = new OfBoolean(ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -557,1 +547,1 @@\n-     * bit-alignment set to 16, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -560,1 +550,1 @@\n-    MemoryLayout.valueLayout(char.class, ByteOrder.nativeOrder()).withBitAlignment(16);\n+    MemoryLayout.valueLayout(char.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -563,2 +553,1 @@\n-    public static final OfChar JAVA_CHAR = new OfChar(ByteOrder.nativeOrder())\n-            .withBitAlignment(16);\n+    public static final OfChar JAVA_CHAR = new OfChar(ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -568,1 +557,1 @@\n-     * bit-alignment set to 16, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -571,1 +560,1 @@\n-    MemoryLayout.valueLayout(short.class, ByteOrder.nativeOrder()).withBitAlignment(16);\n+    MemoryLayout.valueLayout(short.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -574,2 +563,1 @@\n-    public static final OfShort JAVA_SHORT = new OfShort(ByteOrder.nativeOrder())\n-            .withBitAlignment(16);\n+    public static final OfShort JAVA_SHORT = new OfShort(ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -579,1 +567,1 @@\n-     * bit-alignment set to 32, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -582,1 +570,1 @@\n-    MemoryLayout.valueLayout(int.class, ByteOrder.nativeOrder()).withBitAlignment(32);\n+    MemoryLayout.valueLayout(int.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -585,2 +573,1 @@\n-    public static final OfInt JAVA_INT = new OfInt(ByteOrder.nativeOrder())\n-            .withBitAlignment(32);\n+    public static final OfInt JAVA_INT = new OfInt(ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -590,1 +577,1 @@\n-     * bit-alignment set to 64, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -593,1 +580,1 @@\n-    MemoryLayout.valueLayout(long.class, ByteOrder.nativeOrder()).withBitAlignment(64);\n+    MemoryLayout.valueLayout(long.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -597,1 +584,1 @@\n-            .withBitAlignment(ADDRESS_SIZE_BITS);\n+            .withBitAlignment(8);\n@@ -601,1 +588,1 @@\n-     * bit-alignment set to 32, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -604,1 +591,1 @@\n-    MemoryLayout.valueLayout(float.class, ByteOrder.nativeOrder()).withBitAlignment(32);\n+    MemoryLayout.valueLayout(float.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -607,2 +594,1 @@\n-    public static final OfFloat JAVA_FLOAT = new OfFloat(ByteOrder.nativeOrder())\n-            .withBitAlignment(32);\n+    public static final OfFloat JAVA_FLOAT = new OfFloat(ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -612,1 +598,1 @@\n-     * bit-alignment set to 64, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -615,1 +601,1 @@\n-    MemoryLayout.valueLayout(double.class, ByteOrder.nativeOrder()).withBitAlignment(64);\n+    MemoryLayout.valueLayout(double.class, ByteOrder.nativeOrder()).withBitAlignment(8);\n@@ -618,2 +604,1 @@\n-    public static final OfDouble JAVA_DOUBLE = new OfDouble(ByteOrder.nativeOrder())\n-            .withBitAlignment(ADDRESS_SIZE_BITS);\n+    public static final OfDouble JAVA_DOUBLE = new OfDouble(ByteOrder.nativeOrder()).withBitAlignment(8);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ValueLayout.java","additions":29,"deletions":44,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import jdk.incubator.foreign.MemoryLayout;\n@@ -40,2 +39,0 @@\n-import java.util.Objects;\n-\n@@ -273,8 +270,1 @@\n-        if (layout.byteAlignment() <= layout.byteSize()) {\n-            checkAlignment(layout);\n-            return (char)Utils.accessHandle(layout, true)\n-                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n-        } else {\n-            return (char)Utils.accessHandle(layout, false)\n-                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n-        }\n+        return NativeMemorySegmentImpl.EVERYTHING.get(layout, toRawLongValue() + (index * layout.byteSize()));\n@@ -288,8 +278,1 @@\n-        if (layout.byteAlignment() <= layout.byteSize()) {\n-            checkAlignment(layout);\n-            Utils.accessHandle(layout, true)\n-                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n-        } else {\n-            Utils.accessHandle(layout, false)\n-                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n-        }\n+        NativeMemorySegmentImpl.EVERYTHING.set(layout, toRawLongValue() + (index * layout.byteSize()), value);\n@@ -303,8 +286,1 @@\n-        if (layout.byteAlignment() <= layout.byteSize()) {\n-            checkAlignment(layout);\n-            return (short)Utils.accessHandle(layout, true)\n-                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n-        } else {\n-            return (short)Utils.accessHandle(layout, false)\n-                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n-        }\n+        return NativeMemorySegmentImpl.EVERYTHING.get(layout, toRawLongValue() + (index * layout.byteSize()));\n@@ -318,8 +294,1 @@\n-        if (layout.byteAlignment() <= layout.byteSize()) {\n-            checkAlignment(layout);\n-            Utils.accessHandle(layout, true)\n-                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n-        } else {\n-            Utils.accessHandle(layout, false)\n-                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n-        }\n+        NativeMemorySegmentImpl.EVERYTHING.set(layout, toRawLongValue() + (index * layout.byteSize()), value);\n@@ -333,8 +302,1 @@\n-        if (layout.byteAlignment() <= layout.byteSize()) {\n-            checkAlignment(layout);\n-            return (int)Utils.accessHandle(layout, true)\n-                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n-        } else {\n-            return (int)Utils.accessHandle(layout, false)\n-                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n-        }\n+        return NativeMemorySegmentImpl.EVERYTHING.get(layout, toRawLongValue() + (index * layout.byteSize()));\n@@ -348,8 +310,1 @@\n-        if (layout.byteAlignment() <= layout.byteSize()) {\n-            checkAlignment(layout);\n-            Utils.accessHandle(layout, true)\n-                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n-        } else {\n-            Utils.accessHandle(layout, false)\n-                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n-        }\n+        NativeMemorySegmentImpl.EVERYTHING.set(layout, toRawLongValue() + (index * layout.byteSize()), value);\n@@ -363,8 +318,1 @@\n-        if (layout.byteAlignment() <= layout.byteSize()) {\n-            checkAlignment(layout);\n-            return (float)Utils.accessHandle(layout, true)\n-                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n-        } else {\n-            return (float)Utils.accessHandle(layout, false)\n-                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n-        }\n+        return NativeMemorySegmentImpl.EVERYTHING.get(layout, toRawLongValue() + (index * layout.byteSize()));\n@@ -378,8 +326,1 @@\n-        if (layout.byteAlignment() <= layout.byteSize()) {\n-            checkAlignment(layout);\n-            Utils.accessHandle(layout, true)\n-                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n-        } else {\n-            Utils.accessHandle(layout, false)\n-                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n-        }\n+        NativeMemorySegmentImpl.EVERYTHING.set(layout, toRawLongValue() + (index * layout.byteSize()), value);\n@@ -393,8 +334,1 @@\n-        if (layout.byteAlignment() <= layout.byteSize()) {\n-            checkAlignment(layout);\n-            return (long)Utils.accessHandle(layout, true)\n-                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n-        } else {\n-            return (long)Utils.accessHandle(layout, false)\n-                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n-        }\n+        return NativeMemorySegmentImpl.EVERYTHING.get(layout, toRawLongValue() + (index * layout.byteSize()));\n@@ -408,8 +342,1 @@\n-        if (layout.byteAlignment() <= layout.byteSize()) {\n-            checkAlignment(layout);\n-            Utils.accessHandle(layout, true)\n-                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n-        } else {\n-            Utils.accessHandle(layout, false)\n-                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n-        }\n+        NativeMemorySegmentImpl.EVERYTHING.set(layout, toRawLongValue() + (index * layout.byteSize()), value);\n@@ -423,8 +350,1 @@\n-        if (layout.byteAlignment() <= layout.byteSize()) {\n-            checkAlignment(layout);\n-            return (double)Utils.accessHandle(layout, true)\n-                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n-        } else {\n-            return (double)Utils.accessHandle(layout, false)\n-                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n-        }\n+        return NativeMemorySegmentImpl.EVERYTHING.get(layout, toRawLongValue() + (index * layout.byteSize()));\n@@ -438,8 +358,1 @@\n-        if (layout.byteAlignment() <= layout.byteSize()) {\n-            checkAlignment(layout);\n-            Utils.accessHandle(layout, true)\n-                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n-        } else {\n-            Utils.accessHandle(layout, false)\n-                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n-        }\n+        NativeMemorySegmentImpl.EVERYTHING.set(layout, toRawLongValue() + (index * layout.byteSize()), value);\n@@ -453,8 +366,1 @@\n-        if (layout.byteAlignment() <= layout.byteSize()) {\n-            checkAlignment(layout);\n-            return (MemoryAddress)Utils.accessHandle(layout, true)\n-                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n-        } else {\n-            return (MemoryAddress)Utils.accessHandle(layout, false)\n-                    .get(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()));\n-        }\n+        return NativeMemorySegmentImpl.EVERYTHING.get(layout, toRawLongValue() + (index * layout.byteSize()));\n@@ -468,16 +374,1 @@\n-        Objects.requireNonNull(value);\n-        if (layout.byteAlignment() <= layout.byteSize()) {\n-            checkAlignment(layout);\n-            Utils.accessHandle(layout, true)\n-                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n-        } else {\n-            Utils.accessHandle(layout, false)\n-                    .set(NativeMemorySegmentImpl.EVERYTHING, toRawLongValue() + (index * layout.byteSize()), value);\n-        }\n-    }\n-\n-    @ForceInline\n-    private void checkAlignment(MemoryLayout layout) {\n-        if (toRawLongValue() % layout.byteAlignment() != 0) {\n-            throw new IllegalStateException(\"Misaligned access at address: \" + toRawLongValue());\n-        }\n+        NativeMemorySegmentImpl.EVERYTHING.set(layout, toRawLongValue() + (index * layout.byteSize()), value.address());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java","additions":14,"deletions":123,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import jdk.internal.vm.annotation.Stable;\n@@ -177,12 +176,0 @@\n-\n-    @Stable\n-    public static LayoutAccess LAYOUT_ACCESS;\n-\n-    public interface LayoutAccess {\n-        VarHandle accessHandle(ValueLayout valueLayout, boolean aligned);\n-    }\n-\n-    @ForceInline\n-    public static VarHandle accessHandle(ValueLayout layout, boolean aligned) {\n-        return LAYOUT_ACCESS.accessHandle(layout, aligned);\n-    }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -107,7 +107,0 @@\n-    private static final ValueLayout.OfChar JAVA_CHAR_UNALIGNED = JAVA_CHAR.withBitAlignment(8);\n-    private static final ValueLayout.OfShort JAVA_SHORT_UNALIGNED = JAVA_SHORT.withBitAlignment(8);\n-    private static final ValueLayout.OfInt JAVA_INT_UNALIGNED = JAVA_INT.withBitAlignment(8);\n-    private static final ValueLayout.OfFloat JAVA_FLOAT_UNALIGNED = JAVA_FLOAT.withBitAlignment(8);\n-    private static final ValueLayout.OfLong JAVA_LONG_UNALIGNED = JAVA_LONG.withBitAlignment(8);\n-    private static final ValueLayout.OfDouble JAVA_DOUBLE_UNALIGNED = JAVA_DOUBLE.withBitAlignment(8);\n-\n@@ -730,1 +723,1 @@\n-            ptr.set(JAVA_LONG_UNALIGNED, 0, (long) o);\n+            ptr.set(JAVA_LONG, 0, (long) o);\n@@ -732,1 +725,1 @@\n-            ptr.set(JAVA_LONG_UNALIGNED, 0, (int) o);\n+            ptr.set(JAVA_LONG, 0, (int) o);\n@@ -734,1 +727,1 @@\n-            ptr.set(JAVA_LONG_UNALIGNED, 0, (short) o);\n+            ptr.set(JAVA_LONG, 0, (short) o);\n@@ -736,1 +729,1 @@\n-            ptr.set(JAVA_LONG_UNALIGNED, 0, (char) o);\n+            ptr.set(JAVA_LONG, 0, (char) o);\n@@ -738,1 +731,1 @@\n-            ptr.set(JAVA_LONG_UNALIGNED, 0, (byte) o);\n+            ptr.set(JAVA_LONG, 0, (byte) o);\n@@ -740,1 +733,1 @@\n-            ptr.set(JAVA_FLOAT_UNALIGNED, 0, (float) o);\n+            ptr.set(JAVA_FLOAT, 0, (float) o);\n@@ -742,1 +735,1 @@\n-            ptr.set(JAVA_DOUBLE_UNALIGNED, 0, (double) o);\n+            ptr.set(JAVA_DOUBLE, 0, (double) o);\n@@ -744,2 +737,1 @@\n-            boolean b = (boolean)o;\n-            ptr.set(JAVA_LONG_UNALIGNED, 0, b ? (byte)1 : (byte)0);\n+            ptr.set(JAVA_BOOLEAN, 0, (boolean) o);\n@@ -753,1 +745,1 @@\n-            ptr.set(JAVA_LONG_UNALIGNED, 0, (long) o);\n+            ptr.set(JAVA_LONG, 0, (long) o);\n@@ -755,1 +747,1 @@\n-            ptr.set(JAVA_INT_UNALIGNED, 0, (int) o);\n+            ptr.set(JAVA_INT, 0, (int) o);\n@@ -757,1 +749,1 @@\n-            ptr.set(JAVA_SHORT_UNALIGNED, 0, (short) o);\n+            ptr.set(JAVA_SHORT, 0, (short) o);\n@@ -759,1 +751,1 @@\n-            ptr.set(JAVA_CHAR_UNALIGNED, 0, (char) o);\n+            ptr.set(JAVA_CHAR, 0, (char) o);\n@@ -763,1 +755,1 @@\n-            ptr.set(JAVA_FLOAT_UNALIGNED, 0, (float) o);\n+            ptr.set(JAVA_FLOAT, 0, (float) o);\n@@ -765,1 +757,1 @@\n-            ptr.set(JAVA_DOUBLE_UNALIGNED, 0, (double) o);\n+            ptr.set(JAVA_DOUBLE, 0, (double) o);\n@@ -775,1 +767,1 @@\n-            return ptr.get(JAVA_LONG_UNALIGNED, 0);\n+            return ptr.get(JAVA_LONG, 0);\n@@ -777,1 +769,1 @@\n-            return ptr.get(JAVA_INT_UNALIGNED, 0);\n+            return ptr.get(JAVA_INT, 0);\n@@ -779,1 +771,1 @@\n-            return ptr.get(JAVA_SHORT_UNALIGNED, 0);\n+            return ptr.get(JAVA_SHORT, 0);\n@@ -781,1 +773,1 @@\n-            return ptr.get(JAVA_CHAR_UNALIGNED, 0);\n+            return ptr.get(JAVA_CHAR, 0);\n@@ -785,1 +777,1 @@\n-            return ptr.get(JAVA_FLOAT_UNALIGNED, 0);\n+            return ptr.get(JAVA_FLOAT, 0);\n@@ -787,1 +779,1 @@\n-            return ptr.get(JAVA_DOUBLE_UNALIGNED, 0);\n+            return ptr.get(JAVA_DOUBLE, 0);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":20,"deletions":28,"binary":false,"changes":48,"status":"modified"}]}