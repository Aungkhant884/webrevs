{"files":[{"patch":"@@ -100,1 +100,1 @@\n-     * in any way: for instance, calling {@link #withReturnLayout(MemoryLayout)} on the resulting descriptor\n+     * in any way: for instance, calling {@link #changeReturnLayout(MemoryLayout)} on the resulting descriptor\n@@ -126,4 +126,20 @@\n-    public FunctionDescriptor withAppendedArgumentLayouts(MemoryLayout... addedLayouts) {\n-        Objects.requireNonNull(addedLayouts);\n-        Arrays.stream(addedLayouts).forEach(Objects::requireNonNull);\n-        List<MemoryLayout> newLayouts = Stream.concat(argLayouts.stream(), Stream.of(addedLayouts)).toList();\n+    public FunctionDescriptor appendArgumentLayouts(MemoryLayout... addedLayouts) {\n+        return insertArgumentLayouts(argLayouts.size(), addedLayouts);\n+    }\n+\n+    \/**\n+     * Create a new function descriptor with the given argument layouts inserted at the given index, into the argument\n+     * layout array of this function descriptor.\n+     * @param index the index at which to insert the arguments\n+     * @param addedLayouts the argument layouts to insert at given index.\n+     * @return the new function descriptor.\n+     * @throws IllegalArgumentException if {@code index < 0 || index > argumentLayouts().size()}.\n+     *\/\n+    public FunctionDescriptor insertArgumentLayouts(int index, MemoryLayout... addedLayouts) {\n+        if (index < 0 || index > argLayouts.size())\n+            throw new IllegalArgumentException(\"Index out of bounds: \" + index);\n+        List<MemoryLayout> added = List.of(addedLayouts); \/\/ null check on array and its elements\n+        List<MemoryLayout> newLayouts = new ArrayList<>(argLayouts.size() + addedLayouts.length);\n+        newLayouts.addAll(argLayouts.subList(0, index));\n+        newLayouts.addAll(added);\n+        newLayouts.addAll(argLayouts.subList(index, argLayouts.size()));\n@@ -138,1 +154,1 @@\n-    public FunctionDescriptor withReturnLayout(MemoryLayout newReturn) {\n+    public FunctionDescriptor changeReturnLayout(MemoryLayout newReturn) {\n@@ -144,1 +160,2 @@\n-     * Create a new function descriptor with the return layout dropped.\n+     * Create a new function descriptor with the return layout dropped. This is useful to model functions\n+     * which return no values.\n@@ -147,1 +164,1 @@\n-    public FunctionDescriptor withVoidReturnLayout() {\n+    public FunctionDescriptor dropReturnLayout() {\n@@ -215,1 +232,1 @@\n-                    ConstantDescs.BSM_INVOKE, \"function\", AbstractLayout.CD_FUNCTION_DESC, constants.toArray(new ConstantDesc[0])));\n+                ConstantDescs.BSM_INVOKE, \"function\", AbstractLayout.CD_FUNCTION_DESC, constants.toArray(new ConstantDesc[0])));\n@@ -234,1 +251,6 @@\n-        public FunctionDescriptor withAppendedArgumentLayouts(MemoryLayout... addedLayouts) {\n+        public FunctionDescriptor appendArgumentLayouts(MemoryLayout... addedLayouts) {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public FunctionDescriptor insertArgumentLayouts(int index, MemoryLayout... addedLayouts) {\n@@ -239,1 +261,1 @@\n-        public FunctionDescriptor withReturnLayout(MemoryLayout newReturn) {\n+        public FunctionDescriptor changeReturnLayout(MemoryLayout newReturn) {\n@@ -244,1 +266,1 @@\n-        public FunctionDescriptor withVoidReturnLayout() {\n+        public FunctionDescriptor dropReturnLayout() {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/FunctionDescriptor.java","additions":34,"deletions":12,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        desc = desc.withAppendedArgumentLayouts(layout);\n+        desc = desc.appendArgumentLayouts(layout);\n@@ -71,1 +71,1 @@\n-        desc = desc.withReturnLayout(layout);\n+        desc = desc.changeReturnLayout(layout);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/CallingSequenceBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.lang.constant.Constable;\n@@ -38,1 +37,0 @@\n-import java.util.stream.Collectors;\n@@ -70,1 +68,1 @@\n-        fd = fd.withAppendedArgumentLayouts(C_POINTER);\n+        fd = fd.appendArgumentLayouts(C_POINTER);\n@@ -81,1 +79,1 @@\n-        fd = fd.withReturnLayout(C_INT);\n+        fd = fd.changeReturnLayout(C_INT);\n@@ -92,1 +90,1 @@\n-        fd = fd.withVoidReturnLayout();\n+        fd = fd.dropReturnLayout();\n","filename":"test\/jdk\/java\/foreign\/TestFunctionDescriptor.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import jdk.incubator.foreign.MemoryAddress;\n@@ -130,1 +129,1 @@\n-                FunctionDescriptor fd = baseFD.withReturnLayout(baseFD.argumentLayouts().get(i));\n+                FunctionDescriptor fd = baseFD.changeReturnLayout(baseFD.argumentLayouts().get(i));\n","filename":"test\/jdk\/java\/foreign\/TestIntrinsics.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,24 @@\n+\/*\n+ * @test id=scope\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n+ * @modules jdk.incubator.foreign\/jdk.internal.foreign\n+ * @build NativeTestHelper CallGeneratorHelper TestUpcall\n+ *\n+ * @run testng\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-VerifyDependencies\n+ *   --enable-native-access=ALL-UNNAMED -Dgenerator.sample.factor=17\n+ *   -DUPCALL_TEST_TYPE=SCOPE\n+ *   TestUpcall\n+ *\/\n+\n+\/*\n+ * @test id=no_scope\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n+ * @modules jdk.incubator.foreign\/jdk.internal.foreign\n+ * @build NativeTestHelper CallGeneratorHelper TestUpcall\n+ *\n+ * @run testng\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-VerifyDependencies\n+ *   --enable-native-access=ALL-UNNAMED -Dgenerator.sample.factor=17\n+ *   -DUPCALL_TEST_TYPE=NO_SCOPE\n+ *   TestUpcall\n+ *\/\n+\n@@ -37,1 +61,0 @@\n-import jdk.incubator.foreign.Addressable;\n@@ -43,1 +66,0 @@\n-import jdk.incubator.foreign.MemoryAddress;\n@@ -107,1 +129,1 @@\n-            return;\/\/throw new SkipException(\"Skipping tests that were not selected\");\n+            throw new SkipException(\"Skipping tests that were not selected\");\n","filename":"test\/jdk\/java\/foreign\/TestUpcall.java","additions":26,"deletions":4,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -92,1 +92,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -122,1 +122,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -151,1 +151,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -180,1 +180,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -204,1 +204,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -234,1 +234,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -268,1 +268,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -324,1 +324,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -366,1 +366,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -387,1 +387,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n@@ -445,1 +445,1 @@\n-        assertEquals(callingSequence.functionDesc(), fd.withAppendedArgumentLayouts(C_LONG));\n+        assertEquals(callingSequence.functionDesc(), fd.appendArgumentLayouts(C_LONG));\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestSysVCallArranger.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-                baseDesc.withAppendedArgumentLayouts(C_POINTER)\n+                baseDesc.appendArgumentLayouts(C_POINTER)\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/Upcalls.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}