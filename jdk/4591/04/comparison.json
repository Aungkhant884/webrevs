{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -159,0 +159,4 @@\n+     * Unlike the {@link InputStream#read(byte[],int,int) overridden method}\n+     * of {@code InputStream}, this method returns {@code -1} instead of zero\n+     * if the end of the stream has been reached and {@code len == 0}.\n+     * <p>\n","filename":"src\/java.base\/share\/classes\/java\/io\/ByteArrayInputStream.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n- * @bug 8180451\n+ * @bug 6766844 8180451\n@@ -51,2 +51,10 @@\n-        ByteArrayInputStream bais =\n-            new ByteArrayInputStream(buf, position, size);\n+        ByteArrayInputStream bais = new ByteArrayInputStream(buf);\n+        bais.readAllBytes();\n+        if (bais.read(new byte[0]) != -1) {\n+            throw new RuntimeException(\"read(byte[]) did not return 0\");\n+        }\n+        if (bais.read(new byte[1], 0, 0) != -1) {\n+            throw new RuntimeException(\"read(byte[],int,int) did not return 0\");\n+        }\n+\n+        bais = new ByteArrayInputStream(buf, position, size);\n@@ -75,1 +83,0 @@\n-        \/\/ XXX transferTo()\n","filename":"test\/jdk\/java\/io\/ByteArrayInputStream\/ReadAllReadNTransferTo.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"}]}