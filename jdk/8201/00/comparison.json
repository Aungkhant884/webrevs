{"files":[{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/vmError.hpp\"\n@@ -46,1 +47,1 @@\n-  if (_nesting <= 0) {\n+  if (_nesting <= 0 && !VMError::is_error_reported()) {\n","filename":"src\/hotspot\/share\/memory\/resourceArea.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -550,1 +550,1 @@\n-    if (_verbose && TestCrashInErrorHandler != 0) {\n+    if (_verbose && TestCrashInErrorHandler == 14) {\n@@ -557,1 +557,1 @@\n-    if (_verbose && TestCrashInErrorHandler != 0) {\n+    if (_verbose && TestCrashInErrorHandler == 14) {\n@@ -563,0 +563,7 @@\n+  STEP(\"test missing ResourceMark does not crash\")\n+    if (_verbose && TestCrashInErrorHandler == 2) {\n+      stringStream message;\n+      message.print(\"This is a message with no ResourceMark\");\n+      tty->print_cr(\"%s\", message.as_string());\n+    }\n+\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @bug 8284274\n+ * @summary Test that reporting doesn't crash because missing ResourceMarks\n+ * @library \/test\/lib\n+ * @requires vm.debug\n+ * @requires os.family != \"windows\"\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver ResourceMarkTest\n+ *\/\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStreamReader;\n+import java.util.regex.Pattern;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class ResourceMarkTest {\n+\n+\n+  public static void main(String[] args) throws Exception {\n+    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+        \"-XX:+UnlockDiagnosticVMOptions\",\n+        \"-Xmx100M\",\n+        \"-XX:-CreateCoredumpOnCrash\",\n+        \"-XX:ErrorHandlerTest=15\",\n+        \"-XX:TestCrashInErrorHandler=2\",\n+        \"-version\");\n+\n+    OutputAnalyzer output_detail = new OutputAnalyzer(pb.start());\n+\n+    \/\/ we should have crashed with a SIGFPE\n+    output_detail.shouldMatch(\"# A fatal error has been detected by the Java Runtime Environment:.*\");\n+    output_detail.shouldMatch(\"#.+SIGFPE.*\");\n+    output_detail.shouldMatch(\"This is a message with no ResourceMark\");\n+\n+    \/\/ extract hs-err file\n+    String hs_err_file = output_detail.firstMatch(\"# *(\\\\S*hs_err_pid\\\\d+\\\\.log)\", 1);\n+    if (hs_err_file == null) {\n+      throw new RuntimeException(\"Did not find hs-err file in output.\\n\");\n+    }\n+\n+    \/\/ scan hs-err file: File should NOT contain the \"[error occurred during error reporting..]\"\n+    \/\/ markers which show that the secondary error handling kicked in and handled the\n+    \/\/ error successfully. As an added test, we check that the last line contains \"END.\",\n+    \/\/ which is an end marker written in the last step and proves that hs-err file was\n+    \/\/ completely written.\n+    File f = new File(hs_err_file);\n+    if (!f.exists()) {\n+      throw new RuntimeException(\"hs-err file missing at \"\n+          + f.getAbsolutePath() + \".\\n\");\n+    }\n+\n+    System.out.println(\"Found hs_err file. Scanning...\");\n+\n+    FileInputStream fis = new FileInputStream(f);\n+    BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n+    String line = null;\n+\n+    Pattern [] pattern = new Pattern[] {\n+        Pattern.compile(\"\\\\[error occurred during error reporting \\\\(test missing ResourceMark does not crash\\\\), id 0xe0000000, Internal Error \\\\(.*resourceArea.cpp:.*\\\\)\\\\]\"),\n+    };\n+    int currentPattern = 0;\n+\n+    String lastLine = null;\n+    while ((line = br.readLine()) != null) {\n+      if (currentPattern < pattern.length) {\n+        if (pattern[currentPattern].matcher(line).matches()) {\n+          System.out.println(\"Found: \" + line + \".\");\n+          currentPattern ++;\n+        }\n+      }\n+      lastLine = line;\n+    }\n+    br.close();\n+\n+    if (currentPattern == pattern.length) {\n+      throw new RuntimeException(\"hs-err file found secondary crash for ResourceMark\");\n+    }\n+\n+    if (!lastLine.equals(\"END.\")) {\n+      throw new RuntimeException(\"hs-err file incomplete (missing END marker.)\");\n+    } else {\n+      System.out.println(\"End marker found.\");\n+    }\n+\n+    System.out.println(\"OK.\");\n+\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ResourceMarkTest.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}