{"files":[{"patch":"@@ -1604,0 +1604,2 @@\n+  const size_t dwarf_filename_len = 1024;\n+  char dwarf_filename[dwarf_filename_len]; \/\/ Store the filename read from DWARF which is then copied to 'filename'.\n@@ -1605,1 +1607,1 @@\n-    if (!_reader.read_string(filename, filename_len)) {\n+    if (!_reader.read_string(dwarf_filename, dwarf_filename_len)) {\n@@ -1612,1 +1614,2 @@\n-      strip_path_prefix(filename, filename_len);\n+      strip_path_prefix(dwarf_filename, dwarf_filename_len);\n+      copy_dwarf_filename_to_filename(dwarf_filename, dwarf_filename_len, filename, filename_len);\n@@ -1642,0 +1645,9 @@\n+\/\/ Copy the read filename from the DWARF file stored in 'src' to the provided output buffer 'dst'.\n+void DwarfFile::LineNumberProgram::copy_dwarf_filename_to_filename(char* src, const size_t src_len,\n+                                                                   char* dst, const size_t dst_len) {\n+  const size_t count = MIN(src_len, dst_len);\n+  int bytes_written = jio_snprintf(dst, count, \"%s\", src);\n+  \/\/ Add null terminator.\n+  dst[count - 1] = '\\0';\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/elfFile.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -865,0 +865,1 @@\n+    static void copy_dwarf_filename_to_filename(char* src, size_t src_len, char* dst, size_t dst_len);\n","filename":"src\/hotspot\/share\/utilities\/elfFile.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -459,5 +459,3 @@\n-  \/\/ GCC only emits the filename.\n-  \/\/ This gives us either \"jni.cp\" or \"src\/ho\". In the latter case, we strip the path prefix to get to the actual\n-  \/\/ filename which, however, is not a real filename since we miss most of the path and the filename itself due to\n-  \/\/ the too small buffer. Stripping gives us \"ho\" as filename.\n-  ASSERT_TRUE(strcmp(buf, \"jni.cp\") == 0 || strcmp(buf, \"ho\") == 0);\n+  \/\/ GCC only emits the filename. Either way, the DWARF parser should first read the entire filename, then strip the\n+  \/\/ prefix and finally copy the result in the output buffer. Therefore, we should always find \"jni.cp\".\n+  ASSERT_TRUE(strcmp(buf, \"jni.cp\") == 0);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_linux.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"}]}