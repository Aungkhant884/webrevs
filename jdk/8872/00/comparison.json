{"files":[{"patch":"@@ -119,0 +119,76 @@\n+###############################################################################\n+AC_DEFUN([BASIC_SETUP_XCODE_SYSROOT],\n+[\n+  AC_MSG_CHECKING([for sdk name])\n+  AC_ARG_WITH([sdk-name], [AS_HELP_STRING([--with-sdk-name],\n+      [use the Xcode platform SDK of the given name. @<:@macosx@:>@])],\n+      [SDK_NAME=$with_sdk_name]\n+  )\n+  if test \"x$SDK_NAME\" = x; then\n+    SDK_NAME=macosx\n+  fi\n+  AC_MSG_RESULT([$SDK_NAME])\n+\n+  if test \"x$DEVKIT_ROOT\" != x; then\n+    # We need to use xcodebuild from the devkit, if provided\n+    UTIL_LOOKUP_PROGS(XCODEBUILD, xcodebuild, $DEVKIT_TOOLCHAIN_PATH)\n+    if test \"x$XCODEBUILD\" = x; then\n+      AC_MSG_ERROR([No xcodebuild tool found in the provided devkit])\n+    fi\n+    XCODEBUILD_OUTPUT=`\"$XCODEBUILD\" -version 2>&1`\n+    if test $? -ne 0; then\n+      AC_MSG_ERROR([The xcodebuild tool in the devkit reports an error: $XCODEBUILD_OUTPUT])\n+    fi\n+  else\n+    UTIL_LOOKUP_PROGS(XCODEBUILD, xcodebuild)\n+    if test \"x$XCODEBUILD\" != x; then\n+      XCODEBUILD_OUTPUT=`\"$XCODEBUILD\" -version 2>&1`\n+      if test $? -ne 0; then\n+        AC_MSG_WARN([Ignoring the located xcodebuild tool $XCODEBUILD due to an error: $XCODEBUILD_OUTPUT])\n+        XCODEBUILD=\n+      fi\n+    fi\n+  fi\n+\n+  if test \"x$SYSROOT\" != x; then\n+    if ! test -f \"$SYSROOT\/System\/Library\/Frameworks\/Foundation.framework\/Headers\/Foundation.h\"; then\n+      AC_MSG_ERROR([Invalid sysroot, framework headers not found])\n+    fi\n+    if test \"x$with_sdk_name\" != x; then\n+      AC_MSG_WARN([--with-sdk-name will be ignored since a sysroot or devkit is provided])\n+    fi\n+    AC_MSG_NOTICE([Setting sysroot from devkit or --with-sysroot])\n+  else\n+    if test \"x$XCODEBUILD\" != x; then\n+      SYSROOT=`\"$XCODEBUILD\" -sdk \"$SDK_NAME\" -version | $GREP '^Path: ' | $SED 's\/Path: \/\/'`\n+      if test \"x$SYSROOT\" = x; then\n+        AC_MSG_ERROR([No sysroot found for SDK $SDK_NAME from xcodebuild. Check your Xcode installation.])\n+      fi\n+      if ! test -f \"$SYSROOT\/System\/Library\/Frameworks\/Foundation.framework\/Headers\/Foundation.h\"; then\n+        AC_MSG_ERROR([Unable to find required framework headers, provide a path to an SDK via --with-sysroot or --with-sdk-name and be sure Xcode is installed properly])\n+      fi\n+      AC_MSG_NOTICE([Setting sysroot from xcodebuild with SDK $SDK_NAME])\n+    else\n+      UTIL_LOOKUP_PROGS(XCRUN, xcrun)\n+      if test \"x$XCRUN\" != x; then\n+        XCRUN_SDK_PATH=`\"$XCRUN\" --show-sdk-path -sdk \"$SDK_NAME\"`\n+      fi\n+\n+      if test \"x$XCRUN_SDK_PATH\" != x && test -f \"$XCRUN_SDK_PATH\/System\/Library\/Frameworks\/Foundation.framework\/Headers\/Foundation.h\"; then\n+        AC_MSG_NOTICE([Setting sysroot from xcrun with SDK $SDK_NAME])\n+        SYSROOT=\"$XCRUN_SDK_PATH\"\n+      elif test -f \/System\/Library\/Frameworks\/Foundation.framework\/Headers\/Foundation.h; then\n+        AC_MSG_WARN([No devkit provided and no xcodebuild found. Proceeding using system headers.])\n+        if test \"x$with_sdk_name\" != x; then\n+          AC_MSG_WARN([--with-sdk-name will be ignored since no xcodebuild could be found])\n+        fi\n+      else\n+        AC_MSG_NOTICE([No devkit provided, no xcodebuild tool and no system headers found in the system.])\n+        AC_MSG_NOTICE([Check that Xcode is properly installed, or set a devkit with --with-devkit,])\n+        AC_MSG_NOTICE([or override SDK selection using --with-sysroot or --with-sdk-name.])\n+        AC_MSG_ERROR([Cannot continue])\n+      fi\n+    fi\n+  fi\n+])\n+\n@@ -221,71 +297,1 @@\n-    # If a devkit has been supplied, find xcodebuild in the toolchain_path.\n-    # If not, detect if Xcode is installed by running xcodebuild -version\n-    # if no Xcode installed, xcodebuild exits with 1\n-    # if Xcode is installed, even if xcode-select is misconfigured, then it exits with 0\n-    if test \"x$DEVKIT_ROOT\" != x || \/usr\/bin\/xcodebuild -version >\/dev\/null 2>&1; then\n-      # We need to use xcodebuild in the toolchain dir provided by the user\n-      UTIL_LOOKUP_PROGS(XCODEBUILD, xcodebuild, $TOOLCHAIN_PATH)\n-      if test x$XCODEBUILD = x; then\n-        # fall back on the stub binary in \/usr\/bin\/xcodebuild\n-        XCODEBUILD=\/usr\/bin\/xcodebuild\n-      fi\n-    else\n-      # this should result in SYSROOT being empty, unless --with-sysroot is provided\n-      # when only the command line tools are installed there are no SDKs, so headers\n-      # are copied into the system frameworks\n-      XCODEBUILD=\n-      AC_SUBST(XCODEBUILD)\n-    fi\n-\n-    AC_MSG_CHECKING([for sdk name])\n-    AC_ARG_WITH([sdk-name], [AS_HELP_STRING([--with-sdk-name],\n-        [use the platform SDK of the given name. @<:@macosx@:>@])],\n-        [SDKNAME=$with_sdk_name]\n-    )\n-    AC_MSG_RESULT([$SDKNAME])\n-\n-    # if toolchain path is specified then don't rely on system headers, they may not compile\n-    HAVE_SYSTEM_FRAMEWORK_HEADERS=0\n-    test -z \"$TOOLCHAIN_PATH\" && \\\n-      HAVE_SYSTEM_FRAMEWORK_HEADERS=`test ! -f \/System\/Library\/Frameworks\/Foundation.framework\/Headers\/Foundation.h; echo $?`\n-\n-    if test -z \"$SYSROOT\"; then\n-      if test -n \"$XCODEBUILD\"; then\n-        # if we don't have system headers, use default SDK name (last resort)\n-        if test -z \"$SDKNAME\" -a $HAVE_SYSTEM_FRAMEWORK_HEADERS -eq 0; then\n-          SDKNAME=${SDKNAME:-macosx}\n-        fi\n-\n-        if test -n \"$SDKNAME\"; then\n-          # Call xcodebuild to determine SYSROOT\n-          SYSROOT=`\"$XCODEBUILD\" -sdk $SDKNAME -version | $GREP '^Path: ' | $SED 's\/Path: \/\/'`\n-        fi\n-      else\n-        if test $HAVE_SYSTEM_FRAMEWORK_HEADERS -eq 0; then\n-          AC_MSG_ERROR([No xcodebuild tool and no system framework headers found, use --with-sysroot or --with-sdk-name to provide a path to a valid SDK])\n-        fi\n-      fi\n-    else\n-      # warn user if --with-sdk-name was also set\n-      if test -n \"$with_sdk_name\"; then\n-        AC_MSG_WARN([Both SYSROOT and --with-sdk-name are set, only SYSROOT will be used])\n-      fi\n-    fi\n-\n-    if test $HAVE_SYSTEM_FRAMEWORK_HEADERS -eq 0 -a -z \"$SYSROOT\"; then\n-      # If no system framework headers, then SYSROOT must be set, or we won't build\n-      AC_MSG_ERROR([Unable to determine SYSROOT and no headers found in \/System\/Library\/Frameworks. Check Xcode configuration, --with-sysroot or --with-sdk-name arguments.])\n-    fi\n-\n-    # Perform a basic sanity test\n-    if test ! -f \"$SYSROOT\/System\/Library\/Frameworks\/Foundation.framework\/Headers\/Foundation.h\"; then\n-      if test -z \"$SYSROOT\"; then\n-        AC_MSG_ERROR([Unable to find required framework headers, provide a path to an SDK via --with-sysroot or --with-sdk-name and be sure Xcode is installed properly])\n-      else\n-        AC_MSG_ERROR([Invalid SDK or SYSROOT path, dependent framework headers not found])\n-      fi\n-    fi\n-\n-    # set SDKROOT too, Xcode tools will pick it up\n-    SDKROOT=\"$SYSROOT\"\n-    AC_SUBST(SDKROOT)\n+    BASIC_SETUP_XCODE_SYSROOT\n@@ -299,0 +305,2 @@\n+  AC_SUBST(SYSROOT)\n+\n@@ -302,0 +310,1 @@\n+\n","filename":"make\/autoconf\/basic.m4","additions":80,"deletions":71,"binary":false,"changes":151,"status":"modified"},{"patch":"@@ -551,2 +551,1 @@\n-# Xcode SDK path\n-SDKROOT:=@SDKROOT@\n+SYSROOT := @SYSROOT@\n@@ -779,1 +778,0 @@\n-XCODEBUILD=@XCODEBUILD@\n","filename":"make\/autoconf\/spec.gmk.in","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -234,28 +234,2 @@\n-  if test \"x$OPENJDK_TARGET_OS\" = xmacosx; then\n-    if test -n \"$XCODEBUILD\"; then\n-      # On Mac OS X, default toolchain to clang after Xcode 5\n-      XCODE_VERSION_OUTPUT=`\"$XCODEBUILD\" -version | $HEAD -n 1`\n-      $ECHO \"$XCODE_VERSION_OUTPUT\" | $GREP \"Xcode \" > \/dev\/null\n-      if test $? -ne 0; then\n-        AC_MSG_NOTICE([xcodebuild output: $XCODE_VERSION_OUTPUT])\n-        AC_MSG_ERROR([Failed to determine Xcode version.])\n-      fi\n-      XCODE_MAJOR_VERSION=`$ECHO $XCODE_VERSION_OUTPUT | \\\n-          $SED -e 's\/^Xcode \\(@<:@1-9@:>@@<:@0-9.@:>@*\\)\/\\1\/' | \\\n-          $CUT -f 1 -d .`\n-      AC_MSG_NOTICE([Xcode major version: $XCODE_MAJOR_VERSION])\n-      if test $XCODE_MAJOR_VERSION -ge 5; then\n-          DEFAULT_TOOLCHAIN=\"clang\"\n-      else\n-          DEFAULT_TOOLCHAIN=\"gcc\"\n-      fi\n-    else\n-      # If Xcode is not installed, but the command line tools are\n-      # then we can't run xcodebuild. On these systems we should\n-      # default to clang\n-      DEFAULT_TOOLCHAIN=\"clang\"\n-    fi\n-  else\n-    # First toolchain type in the list is the default\n-    DEFAULT_TOOLCHAIN=${VALID_TOOLCHAINS%% *}\n-  fi\n+  # First toolchain type in the list is the default\n+  DEFAULT_TOOLCHAIN=${VALID_TOOLCHAINS%% *}\n@@ -344,4 +318,13 @@\n-  if test \"x$XCODE_VERSION_OUTPUT\" != x; then\n-    # For Xcode, we set the Xcode version as TOOLCHAIN_VERSION\n-    TOOLCHAIN_VERSION=`$ECHO $XCODE_VERSION_OUTPUT | $CUT -f 2 -d ' '`\n-    TOOLCHAIN_DESCRIPTION=\"$TOOLCHAIN_DESCRIPTION from Xcode $TOOLCHAIN_VERSION\"\n+  if test \"x$OPENJDK_BUILD_OS\" = \"xmacosx\"; then\n+    if test \"x$XCODEBUILD\" != x; then\n+      XCODE_VERSION_OUTPUT=`\"$XCODEBUILD\" -version 2> \/dev\/null | $HEAD -n 1`\n+      $ECHO \"$XCODE_VERSION_OUTPUT\" | $GREP \"^Xcode \" > \/dev\/null\n+      if test $? -ne 0; then\n+        AC_MSG_NOTICE([xcodebuild -version output: $XCODE_VERSION_OUTPUT])\n+        AC_MSG_ERROR([Failed to determine Xcode version])\n+      fi\n+\n+      # For Xcode, we set the Xcode version as TOOLCHAIN_VERSION\n+      TOOLCHAIN_VERSION=`$ECHO $XCODE_VERSION_OUTPUT | $CUT -f 2 -d ' '`\n+      TOOLCHAIN_DESCRIPTION=\"$TOOLCHAIN_DESCRIPTION from Xcode $TOOLCHAIN_VERSION\"\n+    fi\n","filename":"make\/autoconf\/toolchain.m4","additions":15,"deletions":32,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -45,0 +45,3 @@\n+  ifneq ($(SYSROOT), )\n+    MIG_SYSROOT_FLAGS := -isysroot $(SYSROOT)\n+  endif\n@@ -46,1 +49,1 @@\n-  $(MACH_EXC_SERVER): $(SDKROOT)\/usr\/include\/mach\/mach_exc.defs\n+  $(MACH_EXC_SERVER): $(SYSROOT)\/usr\/include\/mach\/mach_exc.defs\n@@ -48,1 +51,1 @@\n-\t$(MIG) $(if $(SDKROOT), -isysroot $(SDKROOT)) \\\n+\t$(MIG) $(MIG_SYSROOT_FLAGS) \\\n@@ -50,1 +53,1 @@\n-\t    -header $(MACH_EXC_HEADER) $(SDKROOT)\/usr\/include\/mach\/mach_exc.defs\n+\t    -header $(MACH_EXC_HEADER) $(SYSROOT)\/usr\/include\/mach\/mach_exc.defs\n","filename":"make\/modules\/jdk.hotspot.agent\/Gensrc.gmk","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"}]}