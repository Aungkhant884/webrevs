{"files":[{"patch":"@@ -1096,16 +1096,2 @@\n-        return getFirstVisibleSuperClass(asTypeElement(type));\n-    }\n-\n-\n-    \/**\n-     * Given a class, return the closest visible superclass.\n-     *\n-     * @param te the TypeElement to be interrogated\n-     * @return the closest visible superclass.  Return null if it cannot\n-     *         be found.\n-     *\/\n-    public TypeMirror getFirstVisibleSuperClass(TypeElement te) {\n-        TypeMirror superType = te.getSuperclass();\n-        if (isNoType(superType)) {\n-            superType = getObjectType();\n-        }\n+        List<? extends TypeMirror> superTypes = typeUtils.directSupertypes(type);\n+        TypeMirror superType = superTypes.isEmpty() ? getObjectType() : superTypes.get(0);\n@@ -1125,1 +1111,1 @@\n-        if (typeUtils.isSameType(te.asType(), superType)) {\n+        if (typeUtils.isSameType(type, superType)) {\n@@ -1131,0 +1117,12 @@\n+\n+    \/**\n+     * Given a class, return the closest visible superclass.\n+     *\n+     * @param te the TypeElement to be interrogated\n+     * @return the closest visible superclass.  Return null if it cannot\n+     *         be found.\n+     *\/\n+    public TypeMirror getFirstVisibleSuperClass(TypeElement te) {\n+        return getFirstVisibleSuperClass(te.asType());\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":15,"deletions":17,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8302324\n+ * @summary  Inheritance tree does not show correct type parameters\/arguments\n+ * @library  \/tools\/lib ..\/..\/lib\n+ * @modules  jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build    toolbox.ToolBox javadoc.tester.*\n+ * @run main TestInheritance\n+ *\/\n+\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestInheritance extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        var test = new TestInheritance();\n+        test.runTests();\n+    }\n+\n+    @Test\n+    public void testInheritanceGeneric(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        new ToolBox().writeJavaFiles(src, \"\"\"\n+                    package pkg;\n+                    \/**\n+                     * Base class\n+                     * @param <M> param M\n+                     * @param <N> param N\n+                     *\/\n+                    public class A<M, N> { private A() { } }\n+                    \"\"\",\n+                \"\"\"\n+                    package pkg;\n+                    \/**\n+                     * First subclass\n+                     * @param <O> param O\n+                     * @param <P> param P\n+                     *\/\n+                    public class B<O, P> extends A<O, P> { private B() { } }\n+                    \"\"\",\n+                \"\"\"\n+                    package pkg;\n+                    \/**\n+                     * Second subclass\n+                     * @param <Q> param Q\n+                     *\/\n+                    public class C<Q> extends B<String, Q> { private C() { } }\n+                    \"\"\",\n+                \"\"\"\n+                    package pkg;\n+                    \/**\n+                     * Second subclass\n+                     * @param <R> param R\n+                     * @param <S> param S\n+                     *\/\n+                    public class D<R, S> extends B<S, B> { private D() { } }\n+                    \"\"\");\n+        javadoc(\"-d\", base.resolve(\"docs\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"--no-platform-links\",\n+                \"pkg\");\n+        checkExit(Exit.OK);\n+        checkOrder(\"pkg\/A.html\", \"\"\"\n+                     <div class=\"inheritance\" title=\"Inheritance Tree\">java.lang.Object\n+                     <div class=\"inheritance\">pkg.A&lt;M,<wbr>N&gt;<\/div>\"\"\");\n+        checkOrder(\"pkg\/B.html\", \"\"\"\n+                     <div class=\"inheritance\" title=\"Inheritance Tree\">java.lang.Object\n+                     <div class=\"inheritance\"><a href=\"A.html\" title=\"class in pkg\">pkg.A<\/a>&lt;O,<wbr>P&gt;\n+                     <div class=\"inheritance\">pkg.B&lt;O,<wbr>P&gt;<\/div>\"\"\");\n+        checkOrder(\"pkg\/C.html\", \"\"\"\n+                     <div class=\"inheritance\" title=\"Inheritance Tree\">java.lang.Object\n+                     <div class=\"inheritance\"><a href=\"A.html\" title=\"class in pkg\">pkg.A<\/a>&lt;java.lang.String,<wbr>Q&gt;\n+                     <div class=\"inheritance\"><a href=\"B.html\" title=\"class in pkg\">pkg.B<\/a>&lt;java.lang.String,<wbr>Q&gt;\n+                     <div class=\"inheritance\">pkg.C&lt;Q&gt;<\/div>\"\"\");\n+        checkOrder(\"pkg\/D.html\", \"\"\"\n+                     <div class=\"inheritance\" title=\"Inheritance Tree\">java.lang.Object\n+                     <div class=\"inheritance\"><a href=\"A.html\" title=\"class in pkg\">pkg.A<\/a>&lt;S,<wbr><a href=\"B.html\" title=\"class in pkg\">B<\/a>&gt;\n+                     <div class=\"inheritance\"><a href=\"B.html\" title=\"class in pkg\">pkg.B<\/a>&lt;S,<wbr><a href=\"B.html\" title=\"class in pkg\">B<\/a>&gt;\n+                     <div class=\"inheritance\">pkg.D&lt;R,<wbr>S&gt;<\/div>\"\"\");\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testInheritance\/TestInheritance.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}