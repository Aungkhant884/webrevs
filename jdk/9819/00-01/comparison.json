{"files":[{"patch":"@@ -34,1 +34,0 @@\n-import java.util.concurrent.atomic.AtomicReference;\n@@ -36,0 +35,2 @@\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n@@ -52,3 +53,18 @@\n-    @SuppressWarnings(\"unchecked\")\n-    static <T> Object[] testCase(T v0, Consumer<? super TerminatingThreadLocal<T>> action, T... v1) {\n-        return new Object[] { v0, action, v1 };\n+    @SafeVarargs\n+    static <T> Object[] testCase(T initialValue,\n+                                 Consumer<? super TerminatingThreadLocal<T>> ttlOps,\n+                                 T... expectedTerminatedValues) {\n+        return new Object[] {initialValue, ttlOps, Arrays.asList(expectedTerminatedValues)};\n+    }\n+\n+    static <T> Stream<Object[]> testCases(T v0, T v1) {\n+        return Stream.of(\n+            testCase(v0, ttl -> {                                         }    ),\n+            testCase(v0, ttl -> { ttl.get();                              }, v0),\n+            testCase(v0, ttl -> { ttl.get();   ttl.remove();              }    ),\n+            testCase(v0, ttl -> { ttl.get();   ttl.set(v1);               }, v1),\n+            testCase(v0, ttl -> { ttl.set(v1);                            }, v1),\n+            testCase(v0, ttl -> { ttl.set(v1); ttl.remove();              }    ),\n+            testCase(v0, ttl -> { ttl.set(v1); ttl.remove(); ttl.get();   }, v0),\n+            testCase(v0, ttl -> { ttl.get();   ttl.remove(); ttl.set(v1); }, v1)\n+        );\n@@ -59,26 +75,5 @@\n-        Integer NULL = null;\n-        return new Object[][] {\n-            testCase(42, ttl -> {                                             }     ),\n-            testCase(42, ttl -> { ttl.get();                                  }, 42 ),\n-            testCase(42, ttl -> { ttl.get();    ttl.remove();                 }     ),\n-            testCase(42, ttl -> { ttl.get();    ttl.set(112);                 }, 112),\n-            testCase(42, ttl -> { ttl.set(112);                               }, 112),\n-            testCase(42, ttl -> { ttl.set(112); ttl.remove();                 }     ),\n-            testCase(42, ttl -> { ttl.set(112); ttl.remove(); ttl.get();      }, 42 ),\n-            testCase(42, ttl -> { ttl.get();    ttl.remove(); ttl.set(112);   }, 112),\n-\n-            testCase(NULL, ttl -> {                                           }      ),\n-            testCase(NULL, ttl -> { ttl.get();                                }, NULL),\n-            testCase(NULL, ttl -> { ttl.get();    ttl.remove();               }      ),\n-            testCase(NULL, ttl -> { ttl.get();    ttl.set(112);               }, 112 ),\n-            testCase(NULL, ttl -> { ttl.set(112);                             }, 112 ),\n-            testCase(NULL, ttl -> { ttl.set(112); ttl.remove();               }      ),\n-            testCase(NULL, ttl -> { ttl.set(112); ttl.remove(); ttl.get();    }, NULL),\n-            testCase(NULL, ttl -> { ttl.get();    ttl.remove(); ttl.set(112); }, 112 ),\n-\n-            testCase(42, ttl -> { ttl.get();     ttl.set(NULL);               }, NULL),\n-            testCase(42, ttl -> { ttl.set(NULL);                              }, NULL),\n-            testCase(42, ttl -> { ttl.set(NULL); ttl.remove();                }      ),\n-            testCase(42, ttl -> { ttl.set(NULL); ttl.remove(); ttl.get();     }, 42  ),\n-            testCase(42, ttl -> { ttl.get();     ttl.remove(); ttl.set(NULL); }, NULL),\n-        };\n+        return Stream.of(\n+            testCases(42, 112),\n+            testCases(null, new Object()),\n+            testCases(\"abc\", null)\n+        ).flatMap(Function.identity()).toArray(Object[][]::new);\n@@ -93,1 +88,1 @@\n-                                    T[] expectedTerminatedValues) throws Exception {\n+                                    List<T> expectedTerminatedValues) throws Exception {\n@@ -112,1 +107,1 @@\n-        assertEquals(terminatedValues, Arrays.asList(expectedTerminatedValues));\n+        assertEquals(terminatedValues, expectedTerminatedValues);\n@@ -123,1 +118,1 @@\n-                                   T[] expectedTerminatedValues) throws Exception {\n+                                   List<T> expectedTerminatedValues) throws Exception {\n@@ -138,1 +133,1 @@\n-        var carrierRef = new AtomicReference<Thread>();\n+        Thread carrier;\n@@ -144,1 +139,1 @@\n-            pool.submit(() -> carrierRef.set(Thread.currentThread()));\n+            carrier = pool.submit(Thread::currentThread).get();\n@@ -159,1 +154,0 @@\n-        Thread carrier = carrierRef.get();\n@@ -162,1 +156,1 @@\n-        assertEquals(terminatedValues, Arrays.asList(expectedTerminatedValues));\n+        assertEquals(terminatedValues, expectedTerminatedValues);\n@@ -169,1 +163,0 @@\n-        Thread.Builder.OfVirtual builder = Thread.ofVirtual();\n","filename":"test\/jdk\/jdk\/internal\/misc\/TerminatingThreadLocal\/TestTerminatingThreadLocal.java","additions":31,"deletions":38,"binary":false,"changes":69,"status":"modified"}]}