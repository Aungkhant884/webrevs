{"files":[{"patch":"@@ -129,0 +129,28 @@\n+    \/*\n+     * Special test for file-to-file transfer of more than two GB.\n+     * This test covers multiple iterations of FileChannel.transerTo(FileChannel),\n+     * which ChannelInputStream.transferTo() only applies in this particular case,\n+     * and cannot get tested using a single byte[] due to size limitation of arrays.\n+     *\/\n+    @Test\n+    public void testMoreThanTwoGB() throws IOException {\n+        \/\/ preparing two temporary files which will be compared at the end of the test\n+        Path sourceFile = Files.createTempFile(null, null);\n+        Path targetFile = Files.createTempFile(null, null);\n+\n+        \/\/ writing 3 GB of random bytes into source file\n+        for (int i = 0; i < 3 * 1024; i++)\n+            Files.write(sourceFile, createRandomBytes(1024 * 1024, 0), StandardOpenOption.APPEND);\n+\n+        \/\/ performing actual transfer, effectively by multiple invocations of Filechannel.transferTo(FileChannel)\n+        InputStream inputStream = Channels.newInputStream(FileChannel.open(sourceFile));\n+        OutputStream outputStream = Channels.newOutputStream(FileChannel.open(targetFile, StandardOpenOption.WRITE));\n+        long count = inputStream.transferTo(outputStream);\n+\n+        \/\/ comparing reported transferred bytes, must be 3 GB\n+        assertEquals(count, 3L * 1024 * 1024 * 1024);\n+\n+        \/\/ comparing content of both files, failing in case of any difference\n+        assertEquals(Files.mismatch(sourceFile, targetFile), -1);\n+    }\n+\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferTo.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"}]}