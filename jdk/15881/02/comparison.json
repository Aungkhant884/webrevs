{"files":[{"patch":"@@ -377,0 +377,1 @@\n+    print_prop(\"idx\", node->_idx);\n@@ -379,1 +380,19 @@\n-    print_prop(\"idx\", node->_idx);\n+    if (t->category() != Type::Category::Control &&\n+        t->category() != Type::Category::Memory) {\n+      \/\/ Print detailed type information for nodes whose type is not trivial.\n+      buffer[0] = 0;\n+      stringStream bottom_type_stream(buffer, sizeof(buffer) - 1);\n+      t->dump_on(&bottom_type_stream);\n+      print_prop(\"bottom_type\", buffer);\n+      if (C->types() != nullptr && C->matcher() == nullptr) {\n+        \/\/ Phase types maintained during optimization (GVN, IGVN, CCP) are\n+        \/\/ available and valid (not in code generation phase).\n+        const Type* pt = (*C->types())[node->_idx];\n+        if (pt != nullptr) {\n+          buffer[0] = 0;\n+          stringStream phase_type_stream(buffer, sizeof(buffer) - 1);\n+          pt->dump_on(&phase_type_stream);\n+          print_prop(\"phase_type\", buffer);\n+        }\n+      }\n+    }\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.cpp","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-  char buffer[128];\n+  char buffer[512];\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -127,3 +127,0 @@\n-  const Type *operator[] ( uint i ) const \/\/ Lookup, or null for not mapped\n-  { return (i<_max) ? _types[i] : (Type*)nullptr; }\n-  friend class PhaseValues;\n@@ -132,0 +129,2 @@\n+  const Type *operator[] ( uint i ) const \/\/ Lookup, or null for not mapped\n+  { return (i<_max) ? _types[i] : (Type*)nullptr; }\n","filename":"src\/hotspot\/share\/opto\/phaseX.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import java.util.function.UnaryOperator;\n+import java.util.function.Function;\n@@ -36,1 +36,1 @@\n-    private final String inputPropertyName;\n+    private final String[] inputPropertyNames;\n@@ -38,1 +38,1 @@\n-    private final UnaryOperator<String> editFunction;\n+    private final Function<String[], String> editFunction;\n@@ -41,2 +41,2 @@\n-                              String inputPropertyName, String outputPropertyName,\n-                              UnaryOperator<String> editFunction) {\n+                              String[] inputPropertyNames, String outputPropertyName,\n+                              Function<String[], String> editFunction) {\n@@ -45,1 +45,1 @@\n-        this.inputPropertyName = inputPropertyName;\n+        this.inputPropertyNames = inputPropertyNames;\n@@ -58,0 +58,1 @@\n+        String[] inputVals = new String[inputPropertyNames.length];\n@@ -59,2 +60,4 @@\n-            String inputVal = f.getProperties().get(inputPropertyName);\n-            String outputVal = editFunction.apply(inputVal);\n+            for (int i = 0; i < inputPropertyNames.length; i++) {\n+                inputVals[i] = f.getProperties().get(inputPropertyNames[i]);\n+            }\n+            String outputVal = editFunction.apply(inputVals);\n","filename":"src\/utils\/IdealGraphVisualizer\/Filter\/src\/main\/java\/com\/sun\/hotspot\/igv\/filter\/EditPropertyFilter.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-    var f = new EditPropertyFilter(\"\", selector, propertyName, propertyName, editFunction);\n+    var f = new EditPropertyFilter(\"\", selector, [propertyName], propertyName, editFunction);\n@@ -198,4 +198,4 @@\n-\/\/ nodes according to a function that takes as input the value of a possibly\n-\/\/ different property ('inputPropertyName') and returns the new property value.\n-function editProperty(selector, inputPropertyName, outputPropertyName, editFunction) {\n-    var f = new EditPropertyFilter(\"\", selector, inputPropertyName, outputPropertyName, editFunction);\n+\/\/ nodes according to a function that takes as input the values of multiple\n+\/\/ properties ('inputPropertyNames') and returns the new property value.\n+function editProperty(selector, inputPropertyNames, outputPropertyName, editFunction) {\n+    var f = new EditPropertyFilter(\"\", selector, inputPropertyNames, outputPropertyName, editFunction);\n","filename":"src\/utils\/IdealGraphVisualizer\/Filter\/src\/main\/resources\/com\/sun\/hotspot\/igv\/filter\/helper.js","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -6,1 +6,2 @@\n-function replaceComparisonWithSign(dump_spec) {\n+function replaceComparisonWithSign(propertyValues) {\n+  dump_spec = propertyValues[0]\n@@ -26,1 +27,2 @@\n-function catchProjShortText(con) {\n+function catchProjShortText(propertyValues) {\n+  con = propertyValues[0]\n@@ -33,1 +35,1 @@\n-editProperty(matches(\"name\", \"CatchProj\"), \"con\", \"short_name\", catchProjShortText);\n+editProperty(matches(\"name\", \"CatchProj\"), [\"con\"], \"short_name\", catchProjShortText);\n@@ -39,2 +41,2 @@\n-             \"dump_spec\", \"short_name\",\n-             function(dump_spec) {return dump_spec;});\n+             [\"dump_spec\"], \"short_name\",\n+             function(dump_spec) {return dump_spec[0];});\n","filename":"src\/utils\/IdealGraphVisualizer\/ServerCompiler\/src\/main\/resources\/com\/sun\/hotspot\/igv\/servercompiler\/filters\/condenseGraph.filter","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -17,4 +17,4 @@\n-editProperty(matches(\"name\", \"CallStaticJava|CallDynamicJava|CallJava\"), \"dump_spec\", \"extra_label\",\n-             function(dump_spec) {return callJavaInfo(dump_spec, 2, 2);});\n-editProperty(matches(\"name\", \"CallStaticJavaDirect|CallDynamicJavaDirect\"), \"dump_spec\", \"extra_label\",\n-             function(dump_spec) {return callJavaInfo(dump_spec, 1, 3);});\n+editProperty(matches(\"name\", \"CallStaticJava|CallDynamicJava|CallJava\"), [\"dump_spec\"], \"extra_label\",\n+             function(dump_spec) {return callJavaInfo(dump_spec[0], 2, 2);});\n+editProperty(matches(\"name\", \"CallStaticJavaDirect|CallDynamicJavaDirect\"), [\"dump_spec\"], \"extra_label\",\n+             function(dump_spec) {return callJavaInfo(dump_spec[0], 1, 3);});\n@@ -29,18 +29,4 @@\n-editProperty(matches(\"name\", \"CallLeaf|CallLeafNoFP\"), \"dump_spec\", \"extra_label\",\n-             function(dump_spec) {return callLeafInfo(dump_spec, 1);});\n-editProperty(matches(\"name\", \"CallLeafDirect|CallLeafDirectVector|CallLeafNoFPDirect\"), \"dump_spec\", \"extra_label\",\n-             function(dump_spec) {return callLeafInfo(dump_spec, 0);});\n-\n-\/\/ Add extra line to exception creation nodes with the name of the exception.\n-function exceptionInfo(dump_spec) {\n-  dump_spec2 = dump_spec.replace('#','')\n-  dump_components = split_string(dump_spec2);\n-  if (dump_components.length < 1) {\n-    return null;\n-  }\n-  \/\/ dump_components[0] has a form like e.g. java\/lang\/NumberFormatException:NotNull,\n-  \/\/ we want to return only the simple class name (\"NumberFormatException\").\n-  simple_classname = dump_components[0].split(\"\/\").pop();\n-  return simple_classname.split(\":\")[0];\n-}\n-editProperty(matches(\"name\", \"CreateEx|CreateException\"), \"dump_spec\", \"extra_label\", exceptionInfo);\n+editProperty(matches(\"name\", \"CallLeaf|CallLeafNoFP\"), [\"dump_spec\"], \"extra_label\",\n+             function(dump_spec) {return callLeafInfo(dump_spec[0], 1);});\n+editProperty(matches(\"name\", \"CallLeafDirect|CallLeafDirectVector|CallLeafNoFPDirect\"), [\"dump_spec\"], \"extra_label\",\n+             function(dump_spec) {return callLeafInfo(dump_spec[0], 0);});\n","filename":"src\/utils\/IdealGraphVisualizer\/ServerCompiler\/src\/main\/resources\/com\/sun\/hotspot\/igv\/servercompiler\/filters\/customNodeInfo.filter","additions":8,"deletions":22,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/\/ This filter appends simplified type information to the (possibly already\n+\/\/ existing) extra-label line.\n+\/\/ If the bottom type is available, show it. If the phase type is available and\n+\/\/ differs from the bottom type, show it too (prefixed with 'P:').\n+\n+\/\/ Simplify a reference type of the form\n+\/\/   \"my\/package\/Class (package1\/Class1,package2\/Class2,..)\"\n+\/\/ into\n+\/\/   \"Class\"\n+function simplify_reference_type(type) {\n+  \/\/ Clean up interface lists in reference types.\n+  var m = \/(.*)\\(.*\\)(.*)\/.exec(type);\n+  if (m != null && typeof m[1] != 'undefined' && typeof m[2] != 'undefined') {\n+    type = m[1] + m[2];\n+  }\n+  \/\/ Remove package name in reference types.\n+  var m2 = \/.*\\\/(.*)\/.exec(type);\n+  if (m2 != null && typeof m2[1] != 'undefined') {\n+    type = m2[1];\n+  }\n+  return type;\n+}\n+\n+\/\/ Remove fixed input types for calls and simplify references.\n+function simplifyType(type) {\n+  var callTypeStart = \"{0:control, 1:abIO, 2:memory, 3:rawptr:BotPTR, 4:return_address\";\n+  if (type.startsWith(callTypeStart)) {\n+    \/\/ Exclude types of the first five outputs of call-like nodes.\n+    type = type.replace(callTypeStart, \"\").replace(\"}\", \"\");\n+    type = \"{\" + type.replace(\", \", \"\") + \"}\";\n+  }\n+  type = simplify_reference_type(type);\n+  return type;\n+}\n+\n+\/\/ Merge a possibly existing extra label, bottom type, and phase type into a\n+\/\/ new, single extra label.\n+function mergeAndAppendTypeInfo(extra_label, bottom_type, phase_type) {\n+  if (bottom_type == null) {\n+    return extra_label;\n+  }\n+  type = simplifyType(bottom_type);\n+  if (phase_type != null && phase_type !== bottom_type) {\n+    type += \", P:\" + simplifyType(phase_type);\n+  }\n+  new_extra_label = extra_label == null ? \"\" : (extra_label + \" \");\n+  return new_extra_label + type;\n+}\n+\n+editProperty(not(or([matches(\"name\", \"Start\"),\n+                     matches(\"bottom_type\", \"bottom\"),\n+                     matches(\"bottom_type\", \"abIO\")])),\n+             [\"extra_label\", \"bottom_type\", \"phase_type\"], \"extra_label\",\n+             function(propertyValues) {return mergeAndAppendTypeInfo(propertyValues[0], propertyValues[1], propertyValues[2]);});\n","filename":"src\/utils\/IdealGraphVisualizer\/ServerCompiler\/src\/main\/resources\/com\/sun\/hotspot\/igv\/servercompiler\/filters\/showTypes.filter","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -18,1 +18,1 @@\n-            <attr name=\"after\" stringvalue=\"Color by execution frequency\"\/>\n+            <attr name=\"after\" stringvalue=\"Show node warnings\"\/>\n@@ -20,1 +20,1 @@\n-        <file name=\"Simplify graph.js\" url=\"filters\/simplifyGraph.filter\">\n+        <file name=\"Show types.js\" url=\"filters\/showTypes.filter\">\n@@ -24,0 +24,4 @@\n+        <file name=\"Simplify graph.js\" url=\"filters\/simplifyGraph.filter\">\n+            <attr name=\"enabled\" boolvalue=\"false\"\/>\n+            <attr name=\"after\" stringvalue=\"Show types\"\/>\n+        <\/file>\n","filename":"src\/utils\/IdealGraphVisualizer\/ServerCompiler\/src\/main\/resources\/com\/sun\/hotspot\/igv\/servercompiler\/layer.xml","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,0 +87,10 @@\n+    private void formatExtraLabel(boolean selected) {\n+        \/\/ If the figure contains an extra label, use a light italic font to\n+        \/\/ differentiate it from the regular label.\n+        if (getFigure().getProperties().get(\"extra_label\") != null) {\n+            LabelWidget extraLabelWidget = labelWidgets.get(labelWidgets.size() - 1);\n+            extraLabelWidget.setFont(Diagram.FONT.deriveFont(Font.ITALIC));\n+            extraLabelWidget.setForeground(selected ? getTextColor() : Color.DARK_GRAY);\n+        }\n+    }\n+\n@@ -142,0 +152,1 @@\n+        formatExtraLabel(false);\n@@ -197,0 +208,1 @@\n+        formatExtraLabel(state.isSelected());\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/widgets\/FigureWidget.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"}]}