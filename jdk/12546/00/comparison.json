{"files":[{"patch":"@@ -236,1 +236,1 @@\n-                return (BoundMethodHandle) BMH_SPECIES.extendWith(L_TYPE_NUM).factory().invokeBasic(mt, lf, argL0, narg);\n+                return (BoundMethodHandle) BMH_SPECIES.extendWith(L_TYPE).factory().invokeBasic(mt, lf, argL0, narg);\n@@ -245,1 +245,1 @@\n-                return (BoundMethodHandle) BMH_SPECIES.extendWith(I_TYPE_NUM).factory().invokeBasic(mt, lf, argL0, narg);\n+                return (BoundMethodHandle) BMH_SPECIES.extendWith(I_TYPE).factory().invokeBasic(mt, lf, argL0, narg);\n@@ -254,1 +254,1 @@\n-                return (BoundMethodHandle) BMH_SPECIES.extendWith(J_TYPE_NUM).factory().invokeBasic(mt, lf, argL0, narg);\n+                return (BoundMethodHandle) BMH_SPECIES.extendWith(J_TYPE).factory().invokeBasic(mt, lf, argL0, narg);\n@@ -263,1 +263,1 @@\n-                return (BoundMethodHandle) BMH_SPECIES.extendWith(F_TYPE_NUM).factory().invokeBasic(mt, lf, argL0, narg);\n+                return (BoundMethodHandle) BMH_SPECIES.extendWith(F_TYPE).factory().invokeBasic(mt, lf, argL0, narg);\n@@ -272,1 +272,1 @@\n-                return (BoundMethodHandle) BMH_SPECIES.extendWith(D_TYPE_NUM).factory().invokeBasic(mt, lf, argL0, narg);\n+                return (BoundMethodHandle) BMH_SPECIES.extendWith(D_TYPE).factory().invokeBasic(mt, lf, argL0, narg);\n@@ -363,0 +363,9 @@\n+\n+        SpeciesData extendWith(BasicType basicType) {\n+            int typeNum = basicType.ordinal();\n+            SpeciesData sd = extensions[typeNum];\n+            if (sd != null)  return sd;\n+            sd = SPECIALIZER.findSpecies(key() + basicType.basicTypeChar());\n+            extensions[typeNum] = sd;\n+            return sd;\n+        }\n@@ -409,1 +418,1 @@\n-        static final int TN_COPY_NO_EXTEND = V_TYPE_NUM;\n+        static final int TN_COPY_NO_EXTEND = V_TYPE.ordinal();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/BoundMethodHandle.java","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -153,10 +153,0 @@\n-        \/\/ Derived int constants, which (unlike the enums) can be constant folded.\n-        \/\/ We can remove them when JDK-8161245 is fixed.\n-        static final byte\n-                L_TYPE_NUM = (byte) L_TYPE.ordinal(),\n-                I_TYPE_NUM = (byte) I_TYPE.ordinal(),\n-                J_TYPE_NUM = (byte) J_TYPE.ordinal(),\n-                F_TYPE_NUM = (byte) F_TYPE.ordinal(),\n-                D_TYPE_NUM = (byte) D_TYPE.ordinal(),\n-                V_TYPE_NUM = (byte) V_TYPE.ordinal();\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-            return (BoundMethodHandle) BMH_SPECIES.extendWith(I_TYPE_NUM).factory().invokeBasic(mt, lf, narg);\n+            return (BoundMethodHandle) BMH_SPECIES.extendWith(I_TYPE).factory().invokeBasic(mt, lf, narg);\n@@ -86,1 +86,1 @@\n-            return (BoundMethodHandle) BMH_SPECIES.extendWith(J_TYPE_NUM).factory().invokeBasic(mt, lf, narg);\n+            return (BoundMethodHandle) BMH_SPECIES.extendWith(J_TYPE).factory().invokeBasic(mt, lf, narg);\n@@ -95,1 +95,1 @@\n-            return (BoundMethodHandle) BMH_SPECIES.extendWith(F_TYPE_NUM).factory().invokeBasic(mt, lf, narg);\n+            return (BoundMethodHandle) BMH_SPECIES.extendWith(F_TYPE).factory().invokeBasic(mt, lf, narg);\n@@ -104,1 +104,1 @@\n-            return (BoundMethodHandle) BMH_SPECIES.extendWith(D_TYPE_NUM).factory().invokeBasic(mt, lf, narg);\n+            return (BoundMethodHandle) BMH_SPECIES.extendWith(D_TYPE).factory().invokeBasic(mt, lf, narg);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/SimpleMethodHandle.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}