{"files":[{"patch":"@@ -358,0 +358,18 @@\n+    \/**\n+     * {@return the string representation of this {@linkplain ClassDesc} in a\n+     * {@code CONSTANT_Class_info} ({@jvms 4.4.1})} This is the binary name\n+     * in internal form for classes and interfaces, and descriptors for arrays.\n+     * Primitive types cannot be represented by {@code CONSTANT_Class_info}\n+     * structures.\n+     *\n+     * @apiNote\n+     * Unlike {@link #ofInternalName ofInternalName} that rejects array descriptors,\n+     * this method returns the array descriptor string if this {@linkplain ClassDesc}\n+     * represents an array.\n+     *\n+     * @throws IllegalStateException if this {@linkplain ClassDesc} describes a type\n+     * that cannot be represented by a {@code CONSTANT_Class_info}, such as primitive types\n+     * @since 21\n+     *\/\n+    String internalName();\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDesc.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,0 +60,5 @@\n+    @Override\n+    public String internalName() {\n+        throw new IllegalStateException(\"primitive type \" + displayName() + \" cannot be encoded in CONSTANT_Class_info\");\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/PrimitiveClassDescImpl.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -58,0 +58,5 @@\n+    @Override\n+    public String internalName() {\n+        return isArray() ? descriptorString() : descriptorString().substring(1, descriptorString().length() - 1);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ReferenceClassDescImpl.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,6 +36,1 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertNotEquals;\n-import static org.testng.Assert.assertNull;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n+import static org.testng.Assert.*;\n@@ -67,0 +62,4 @@\n+        if (r.isClassOrInterface()) {\n+            assertEquals(r.descriptorString(), \"L\" + r.internalName() + \";\");\n+        }\n+\n@@ -71,0 +70,1 @@\n+            assertEquals(r.descriptorString(), r.internalName());\n@@ -80,0 +80,4 @@\n+\n+        if (!c.isPrimitive()) {\n+            assertEquals(c.getName(), r.internalName().replace('\/', '.'));\n+        }\n@@ -121,0 +125,2 @@\n+\n+                assertThrows(IllegalStateException.class, c::internalName);\n","filename":"test\/jdk\/java\/lang\/constant\/ClassDescTest.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"}]}