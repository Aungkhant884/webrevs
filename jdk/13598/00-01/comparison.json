{"files":[{"patch":"@@ -53,0 +53,10 @@\n+ * <h2 id=\"constant-class-info\">The {@code CONSTANT_Class_info} Structure<\/h2>\n+ *\n+ * <p>While most appearances of {@link Class} constants are in the form of {@linkplain\n+ * #descriptorString() descriptors}, in the {@code CONSTANT_Class_info} structure\n+ * (JVMS {@jvms 4.4.1}), they appear as binary name encoded in internal forms,\n+ * such as {@code \"java\/lang\/String\"} for {@link String} class. Such forms can be\n+ * converted to ClassDesc with {@link #ofInternalName(String)} and retrieved from a\n+ * {@linkplain ClassDesc} with {@link #internalName()}. In addition, primitive types\n+ * cannot be encoded in the {@code CONSTANT_Class_info} structure.\n+ *\n@@ -85,9 +95,2 @@\n-     * Returns a {@linkplain ClassDesc} for a class or interface type,\n-     * given the name of the class or interface in internal form,\n-     * such as {@code \"java\/lang\/String\"}.\n-     *\n-     * @apiNote\n-     * To create a descriptor for an array type, either use {@link #ofDescriptor(String)}\n-     * or {@link #arrayType()}; to create a descriptor for a primitive type, use\n-     * {@link #ofDescriptor(String)} or use the predefined constants in\n-     * {@link ConstantDescs}.\n+     * {@return a {@linkplain ClassDesc} from a string representation\n+     * in a {@link ##constant-class-info CONSTANT_Class_info} structure}\n@@ -95,2 +98,2 @@\n-     * @param name the fully qualified class name, in internal (slash-separated) form\n-     * @return a {@linkplain ClassDesc} describing the desired class\n+     * @param name the class name, compliant with requirements of the\n+     * {@code CONSTANT_Class_info} structure\n@@ -100,1 +103,0 @@\n-     * @jvms 4.2.1 Binary Class and Interface Names\n@@ -103,0 +105,2 @@\n+     * @see ClassDesc#internalName()\n+     * @see <a href=\"#constant-class-info\">The {@code CONSTANT_Class_info} Structure<\/a>\n@@ -106,1 +110,8 @@\n-        ConstantUtils.validateInternalClassName(requireNonNull(name));\n+        if (name.isEmpty()) \/\/ implicit null check\n+            throw new IllegalArgumentException(\"Invalid class name: \");\n+        \/\/ Arrays\n+        if (name.charAt(0) == '[') {\n+            return ofDescriptor(name);\n+        }\n+        \/\/ Classes or Interfaces\n+        ConstantUtils.validateInternalClassName(name);\n@@ -156,1 +167,0 @@\n-     * @jvms 4.4.1 The CONSTANT_Class_info Structure\n@@ -184,1 +194,0 @@\n-     * @jvms 4.4.1 The CONSTANT_Class_info Structure\n@@ -205,1 +214,0 @@\n-     * @jvms 4.4.1 The CONSTANT_Class_info Structure\n@@ -360,4 +368,1 @@\n-     * {@code CONSTANT_Class_info} ({@jvms 4.4.1})} This is the binary name\n-     * in internal form for classes and interfaces, and descriptors for arrays.\n-     * Primitive types cannot be represented by {@code CONSTANT_Class_info}\n-     * structures.\n+     * {@link ##constant-class-info CONSTANT_Class_info} structure}\n@@ -366,3 +371,3 @@\n-     * Unlike {@link #ofInternalName ofInternalName} that rejects array descriptors,\n-     * this method returns the array descriptor string if this {@linkplain ClassDesc}\n-     * represents an array.\n+     * In a future release, this API may return a value instead of throwing\n+     * an exception if this {@linkplain ClassDesc} becomes representable in a\n+     * {@code CONSTANT_Class_info}.\n@@ -372,0 +377,2 @@\n+     * @see ClassDesc#ofInternalName(String)\n+     * @see <a href=\"#constant-class-info\">The {@code CONSTANT_Class_info} Structure<\/a>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDesc.java","additions":30,"deletions":23,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -53,0 +53,3 @@\n+        if (!r.isPrimitive()) {\n+            assertEquals(r, ClassDesc.ofInternalName(r.internalName()));\n+        }\n@@ -82,1 +85,2 @@\n-            assertEquals(c.getName(), r.internalName().replace('\/', '.'));\n+            assertEquals(c.getName(), r.internalName().replace('\/', '.')); \/\/ may be invalid in valhalla\n+            assertEquals(r, ClassDesc.ofInternalName(c.getName().replace('.', '\/')));\n@@ -274,1 +278,1 @@\n-        List<String> badInternalNames = List.of(\"I;\", \"[]\", \"[Ljava\/lang\/String;\",\n+        List<String> badInternalNames = List.of(\"I;\", \"[]\", \"[Ljava.lang.String;\",\n","filename":"test\/jdk\/java\/lang\/constant\/ClassDescTest.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}