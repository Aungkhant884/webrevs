{"files":[{"patch":"@@ -557,7 +557,0 @@\n-  \/\/ One less thread is executing\n-  \/\/ When the VMThread gets here, the main thread may have already exited\n-  \/\/ which frees the CodeHeap containing the Atomic::add code\n-  if (thread != VMThread::vm_thread() && VMThread::vm_thread() != NULL) {\n-    Atomic::dec(&os::win32::_os_thread_count);\n-  }\n-\n@@ -778,2 +771,0 @@\n-  Atomic::inc(&os::win32::_os_thread_count);\n-\n@@ -3879,3 +3870,0 @@\n-intx          os::win32::_os_thread_limit    = 0;\n-volatile intx os::win32::_os_thread_count    = 0;\n-\n@@ -4292,21 +4280,0 @@\n-  size_t actual_reserve_size = JavaThread::stack_size_at_create();\n-  if (actual_reserve_size == 0) {\n-    \/\/ -Xss or -XX:ThreadStackSize were not given, use the current stack size.\n-    actual_reserve_size = current_stack_size();\n-  }\n-\n-  \/\/ Calculate theoretical max. size of Threads to guard against artificial\n-  \/\/ out-of-memory situations, where all available address-space has been\n-  \/\/ reserved by thread stacks.\n-  assert(actual_reserve_size != 0, \"Must have a stack\");\n-\n-  \/\/ Calculate the thread limit when we should start doing Virtual Memory\n-  \/\/ banging. Currently when the threads will have used all but 200Mb of space.\n-  \/\/\n-  \/\/ TODO: consider performing a similar calculation for commit size instead\n-  \/\/ as reserve size, since on a 64-bit platform we'll run into that more\n-  \/\/ often than running out of virtual memory space.  We can use the\n-  \/\/ lower value of the two calculations as the os_thread_limit.\n-  size_t max_address_space = ((size_t)1 << (BitsPerWord - 1)) - (200 * K * K);\n-  win32::_os_thread_limit = (intx)(max_address_space \/ actual_reserve_size);\n-\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":0,"deletions":33,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -85,4 +85,0 @@\n-  \/\/ Trace number of created threads\n-  static          intx  _os_thread_limit;\n-  static volatile intx  _os_thread_count;\n-\n","filename":"src\/hotspot\/os\/windows\/os_windows.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}