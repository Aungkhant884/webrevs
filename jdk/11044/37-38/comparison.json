{"files":[{"patch":"@@ -50,1 +50,1 @@\n-                       int header_size_in_bytes, int object_size,\n+                       int header_size, int object_size,\n","filename":"src\/hotspot\/cpu\/arm\/c1_MacroAssembler_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -383,1 +383,1 @@\n-    assert(is_aligned(base_offset_in_bytes, BytesPerInt), \"weird alignment\");\n+    assert(is_aligned(base_offset_in_bytes, BytesPerInt), \"must be 4-byte aligned\");\n","filename":"src\/hotspot\/cpu\/ppc\/c1_MacroAssembler_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -201,1 +201,1 @@\n-    assert(is_aligned(start_offset_in_bytes, BytesPerInt), \"must be 32-bit-aligned\");\n+    assert(is_aligned(start_offset_in_bytes, BytesPerInt), \"must be 4-byte aligned\");\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -654,1 +654,1 @@\n-                       checked_cast<int>(heap_word_size(instanceOopDesc::base_offset_in_bytes())),\n+                       oopDesc::header_size(),\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -315,1 +315,1 @@\n-  Copy::fill_to_bytes(new_obj, oopDesc::base_offset_in_bytes(), 0);\n+  Copy::fill_to_words(new_obj, oopDesc::header_size(), 0);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"gc\/shared\/collectedHeap.inline.hpp\"\n+#include \"gc\/shared\/collectedHeap.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -412,1 +412,1 @@\n-    assert(is_aligned(payload_offset, BytesPerInt), \"base offset must be 32-bit-aligned\");\n+    assert(is_aligned(payload_offset, BytesPerInt), \"must be 4-byte aligned\");\n@@ -444,1 +444,1 @@\n-  assert(is_aligned(payload_size_bytes, BytesPerInt), \"must be int aligned\");\n+  assert(is_aligned(payload_size_bytes, BytesPerInt), \"must be 4-byte aligned\");\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -296,1 +296,1 @@\n-    return size_t(align_object_size(heap_word_size(instanceOopDesc::base_offset_in_bytes())));\n+    return size_t(align_object_size(oopDesc::header_size()));\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -375,1 +375,1 @@\n-void MemAllocator::mem_clear(HeapWord* mem, size_t hdr_size_bytes) const {\n+void MemAllocator::mem_clear(HeapWord* mem) const {\n@@ -377,2 +377,4 @@\n-  assert(_word_size * HeapWordSize >= hdr_size_bytes, \"unexpected object size\");\n-  Copy::fill_to_bytes((char*)mem + hdr_size_bytes, _word_size * HeapWordSize - hdr_size_bytes);\n+  const size_t hs = oopDesc::header_size();\n+  assert(_word_size >= hs, \"unexpected object size\");\n+  oopDesc::set_klass_gap(mem, 0);\n+  Copy::fill_to_aligned_words(mem + hs, _word_size - hs);\n@@ -393,1 +395,1 @@\n-  mem_clear(mem, instanceOopDesc::base_offset_in_bytes());\n+  mem_clear(mem);\n@@ -397,0 +399,9 @@\n+MemRegion ObjArrayAllocator::obj_memory_range(oop obj) const {\n+  if (_do_zero) {\n+    return MemAllocator::obj_memory_range(obj);\n+  }\n+  ArrayKlass* array_klass = ArrayKlass::cast(_klass);\n+  const size_t hs = heap_word_size(arrayOopDesc::base_offset_in_bytes(array_klass->element_type()));\n+  return MemRegion(cast_from_oop<HeapWord*>(obj) + hs, _word_size - hs);\n+}\n+\n@@ -403,3 +414,1 @@\n-    ArrayKlass* array_klass = ArrayKlass::cast(_klass);\n-    const size_t hs = arrayOopDesc::header_size_in_bytes();\n-    mem_clear(mem, hs);\n+    mem_clear(mem);\n@@ -416,1 +425,1 @@\n-  mem_clear(mem, instanceOopDesc::base_offset_in_bytes());\n+  mem_clear(mem);\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  void mem_clear(HeapWord* mem, size_t header_size_bytes) const;\n+  void mem_clear(HeapWord* mem) const;\n@@ -81,1 +81,1 @@\n-  MemRegion obj_memory_range(oop obj) const {\n+  virtual MemRegion obj_memory_range(oop obj) const {\n@@ -103,0 +103,2 @@\n+  virtual MemRegion obj_memory_range(oop obj) const;\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  return align_object_size(MAX2(MinTLABSize \/ HeapWordSize, heap_word_size(oopDesc::base_offset_in_bytes()))) + CollectedHeap::lab_alignment_reserve();\n+  return align_object_size(MAX2(MinTLABSize \/ HeapWordSize, checked_cast<size_t>(oopDesc::header_size()))) + CollectedHeap::lab_alignment_reserve();\n","filename":"src\/hotspot\/share\/gc\/shared\/plab.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,5 @@\n-    Copy::fill_to_words(obj, size, badHeapWordVal);\n+    \/\/ Skip mangling the space corresponding to the object header to\n+    \/\/ ensure that the returned space is not considered parsable by\n+    \/\/ any concurrent GC thread.\n+    size_t hdr_size = oopDesc::header_size();\n+    Copy::fill_to_words(obj + hdr_size, size - hdr_size, badHeapWordVal);\n","filename":"src\/hotspot\/share\/gc\/shared\/threadLocalAllocBuffer.inline.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -811,1 +811,5 @@\n-    Copy::fill_to_words(gclab_buf, actual_size, badHeapWordVal);\n+    \/\/ Skip mangling the space corresponding to the object header to\n+    \/\/ ensure that the returned space is not considered parsable by\n+    \/\/ any concurrent GC thread.\n+    size_t hdr_size = oopDesc::header_size();\n+    Copy::fill_to_words(gclab_buf + hdr_size, actual_size - hdr_size, badHeapWordVal);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1998,2 +1998,2 @@\n-                size_t hdr_size = instanceOopDesc::base_offset_in_bytes();\n-                Copy::fill_to_bytes((char*)result + hdr_size, obj_size * HeapWordSize- hdr_size, 0);\n+                size_t hdr_size = oopDesc::header_size();\n+                Copy::fill_to_words(result + hdr_size, obj_size - hdr_size, 0);\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,26 +27,0 @@\n-\n-\/\/ Return the maximum length (num elements) of an array of BasicType.  The length can passed\n-\/\/ to typeArrayOop::object_size(scale, length, header_size) without causing an\n-\/\/ overflow. We also need to make sure that this will not overflow a size_t on\n-\/\/ 32 bit platforms when we convert it to a byte size.\n-int32_t arrayOopDesc::max_array_length(BasicType type) {\n-  assert(type < T_CONFLICT, \"wrong type\");\n-  assert(type2aelembytes(type) != 0, \"wrong type\");\n-\n-  const int elem_size = type2aelembytes(type);\n-  const size_t max_size_bytes = align_down(SIZE_MAX - base_offset_in_bytes(type), MinObjAlignmentInBytes);\n-  assert(is_aligned(max_size_bytes, elem_size), \"max_size_bytes should be aligned to element size\");\n-  size_t max_elements_per_size_t = max_size_bytes \/ elem_size;\n-  if ((size_t)max_jint < max_elements_per_size_t) {\n-    \/\/ It should be ok to return max_jint here, but parts of the code\n-    \/\/ (CollectedHeap, Klass::oop_oop_iterate(), and more) uses an int for\n-    \/\/ passing around the size (in words) of an object. So, we need to avoid\n-    \/\/ overflowing an int when we add the header. See CRs 4718400 and 7110613.\n-    const size_t header_size_words = heap_word_size(base_offset_in_bytes(type));\n-    max_elements_per_size_t = align_down(max_jint - static_cast<int>(header_size_words), MinObjAlignment);\n-  }\n-  assert(max_elements_per_size_t <= (size_t)max_jint, \"must not overflow unsigned int\");\n-  assert(((jlong)max_elements_per_size_t * elem_size + base_offset_in_bytes(type)) \/ HeapWordSize <= (jlong)max_jint,\n-         \"total array size in words must not overflow signed int: \" SIZE_FORMAT, max_elements_per_size_t);\n-  return (int32_t)max_elements_per_size_t;\n-}\n","filename":"src\/hotspot\/share\/oops\/arrayOop.cpp","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -140,1 +140,21 @@\n-  static int32_t max_array_length(BasicType type);\n+  static int32_t max_array_length(BasicType type) {\n+    assert(type < T_CONFLICT, \"wrong type\");\n+    assert(type2aelembytes(type) != 0, \"wrong type\");\n+\n+    const int elem_size = type2aelembytes(type);\n+    const size_t max_size_bytes = align_down(SIZE_MAX - base_offset_in_bytes(type), MinObjAlignmentInBytes);\n+    assert(is_aligned(max_size_bytes, elem_size), \"max_size_bytes should be aligned to element size\");\n+    size_t max_elements_per_size_t = max_size_bytes \/ elem_size;\n+    if ((size_t)max_jint < max_elements_per_size_t) {\n+      \/\/ It should be ok to return max_jint here, but parts of the code\n+      \/\/ (CollectedHeap, Klass::oop_oop_iterate(), and more) uses an int for\n+      \/\/ passing around the size (in words) of an object. So, we need to avoid\n+      \/\/ overflowing an int when we add the header. See CRs 4718400 and 7110613.\n+      const size_t header_size_words = heap_word_size(base_offset_in_bytes(type));\n+      max_elements_per_size_t = align_down(max_jint - static_cast<int>(header_size_words), MinObjAlignment);\n+    }\n+    assert(max_elements_per_size_t <= (size_t)max_jint, \"must not overflow unsigned int\");\n+    assert(((jlong)max_elements_per_size_t * elem_size + base_offset_in_bytes(type)) \/ HeapWordSize <= (jlong)max_jint,\n+           \"total array size in words must not overflow signed int: \" SIZE_FORMAT, max_elements_per_size_t);\n+    return (int32_t)max_elements_per_size_t;\n+  }\n","filename":"src\/hotspot\/share\/oops\/arrayOop.hpp","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -96,0 +96,3 @@\n+  \/\/ For klass field compression\n+  static inline void set_klass_gap(HeapWord* mem, int z);\n+\n@@ -103,0 +106,3 @@\n+  \/\/ size of object header, aligned to platform wordSize\n+  static int header_size() { return checked_cast<int>(heap_word_size(base_offset_in_bytes())); }\n+\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -142,0 +142,6 @@\n+void oopDesc::set_klass_gap(HeapWord* mem, int v) {\n+  if (UseCompressedClassPointers) {\n+    *(int*)(((char*)mem) + klass_gap_offset_in_bytes()) = v;\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2098,1 +2098,1 @@\n-      jint min_size = Klass::instance_layout_helper(checked_cast<jint>(heap_word_size(oopDesc::base_offset_in_bytes())), false);\n+      jint min_size = Klass::instance_layout_helper(oopDesc::header_size(), false);\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1288,2 +1288,2 @@\n-    const size_t hs = oopDesc::base_offset_in_bytes();\n-    Copy::fill_to_bytes((char*)mem + hs, vmClasses::StackChunk_klass()->size_helper() * HeapWordSize - hs);\n+    const size_t hs = oopDesc::header_size();\n+    Copy::fill_to_aligned_words(mem + hs, vmClasses::StackChunk_klass()->size_helper() - hs);\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,4 +39,8 @@\n-    { 256,        false,  false,    32 }, \/\/ 20 byte header, 8 byte oops\n-    { 256,        false,  true,     32 }, \/\/ 20 byte header, 4 byte oops\n-    { 256,        true,   false,    32 }, \/\/ 16 byte header, 8 byte oops\n-    { 256,        true,   true,     32 }, \/\/ 16 byte header, 4 byte oops\n+    { 16,         false,  false,    4 },  \/\/ 20 byte header, 8 byte oops, 16-byte align\n+    { 16,         false,  true,     4 },  \/\/ 20 byte header, 4 byte oops, 16-byte align\n+    { 16,         true,   false,    4 },  \/\/ 16 byte header, 8 byte oops, 16-byte align\n+    { 16,         true,   true,     4 },  \/\/ 16 byte header, 4 byte oops, 16-byte align\n+    { 256,        false,  false,    32 }, \/\/ 20 byte header, 8 byte oops, 256-byte align\n+    { 256,        false,  true,     32 }, \/\/ 20 byte header, 4 byte oops, 256-byte align\n+    { 256,        true,   false,    32 }, \/\/ 16 byte header, 8 byte oops, 256-byte align\n+    { 256,        true,   true,     32 }, \/\/ 16 byte header, 4 byte oops, 256-byte align\n","filename":"test\/hotspot\/gtest\/oops\/test_objArrayOop.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2022 Amazon.com Inc. or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * This tests object array sizes by running gtests with different settings.\n- *\/\n-\n-\/* @test id=with-coops-with-ccp\n- * @summary Run object array size tests with compressed oops and compressed class pointers\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.xml\n- * @run main\/native GTestWrapper --gtest_filter=arrayOop::base_offset -XX:+UseCompressedClassPointers -XX:+UseCompressedOops\n- *\/\n-\/* @test id=with-coops-no-ccp\n- * @summary Run object array size tests with compressed oops and compressed class pointers\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.xml\n- * @run main\/native GTestWrapper --gtest_filter=arrayOop::base_offset -XX:-UseCompressedClassPointers -XX:+UseCompressedOops\n- *\/\n-\/* @test id=no-coops-with-ccp\n- * @summary Run object array size tests with compressed oops and compressed class pointers\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.xml\n- * @run main\/native GTestWrapper --gtest_filter=arrayOop::base_offset -XX:+UseCompressedClassPointers -XX:-UseCompressedOops\n- *\/\n-\/* @test id=no-coops-no-ccp\n- * @summary Run object array size tests with compressed oops and compressed class pointers\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.xml\n- * @run main\/native GTestWrapper --gtest_filter=arrayOop::base_offset -XX:-UseCompressedClassPointers -XX:-UseCompressedOops\n- *\/\n","filename":"test\/hotspot\/jtreg\/gtest\/ArrayTest.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * This tests object array sizes by running gtests with different settings.\n+ *\/\n+\n+\/* @test id=with-coops-with-ccp\n+ * @summary Run object array size tests with compressed oops and compressed class pointers\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.xml\n+ * @run main\/native GTestWrapper --gtest_filter=arrayOop -XX:+UseCompressedClassPointers -XX:+UseCompressedOops\n+ *\/\n+\/* @test id=with-coops-no-ccp\n+ * @summary Run object array size tests with compressed oops and compressed class pointers\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.xml\n+ * @run main\/native GTestWrapper --gtest_filter=arrayOop -XX:-UseCompressedClassPointers -XX:+UseCompressedOops\n+ *\/\n+\/* @test id=no-coops-with-ccp\n+ * @summary Run object array size tests with compressed oops and compressed class pointers\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.xml\n+ * @run main\/native GTestWrapper --gtest_filter=arrayOop -XX:+UseCompressedClassPointers -XX:-UseCompressedOops\n+ *\/\n+\/* @test id=no-coops-no-ccp\n+ * @summary Run object array size tests with compressed oops and compressed class pointers\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.xml\n+ * @run main\/native GTestWrapper --gtest_filter=arrayOop -XX:-UseCompressedClassPointers -XX:-UseCompressedOops\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gtest\/ArrayTests.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}