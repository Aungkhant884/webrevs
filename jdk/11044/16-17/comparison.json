{"files":[{"patch":"@@ -417,1 +417,1 @@\n-  if (!is_aligned(payload_start, BytesPerWord)) {\n+  if (!is_aligned(payload_start, HeapWordSize)) {\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n-  size_t aligned_header_size_words = heap_word_size(arrayOopDesc::base_offset_in_bytes(T_INT));\n-  return align_object_size(aligned_header_size_words); \/\/ align to MinObjAlignment\n+  size_t header_size_words = heap_word_size(arrayOopDesc::base_offset_in_bytes(T_INT));\n+  return align_object_size(header_size_words); \/\/ align to MinObjAlignment\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-  check_array_allocation_length(length, arrayOopDesc::max_array_length(element_type()), CHECK_NULL);\n+  check_array_allocation_length(length, arrayOopDesc::max_array_length(T_ARRAY), CHECK_NULL);\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,3 +93,1 @@\n-    return (int)(element_type_should_be_aligned(type)\n-                 ? align_up(hs, BytesPerLong)\n-                 : hs);\n+    return (int)(element_type_should_be_aligned(type) ? align_up(hs, BytesPerLong) : hs);\n","filename":"src\/hotspot\/share\/oops\/arrayOop.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-    size_t size_words = align_up(base_offset_in_bytes() + asz, HeapWordSize) \/ HeapWordSize;\n+    size_t size_words = heap_word_size(base_offset_in_bytes() + asz);\n","filename":"src\/hotspot\/share\/oops\/objArrayOop.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,7 +94,2 @@\n-    if (UseCompressedOops) {\n-      EXPECT_EQ(arrayOopDesc::base_offset_in_bytes(T_OBJECT), 16);\n-      EXPECT_EQ(arrayOopDesc::base_offset_in_bytes(T_ARRAY),  16);\n-    } else {\n-      EXPECT_EQ(arrayOopDesc::base_offset_in_bytes(T_OBJECT), 16);\n-      EXPECT_EQ(arrayOopDesc::base_offset_in_bytes(T_ARRAY),  16);\n-    }\n+    EXPECT_EQ(arrayOopDesc::base_offset_in_bytes(T_OBJECT),  16);\n+    EXPECT_EQ(arrayOopDesc::base_offset_in_bytes(T_ARRAY),   16);\n","filename":"test\/hotspot\/gtest\/oops\/test_arrayOop.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (C2 2022, Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * Copyright (C) 2022, Amazon.com Inc. or its affiliates. All Rights Reserved.\n@@ -25,1 +25,1 @@\n- * @test id=with-coop-no-ccp\n+ * @test id=with-coops-no-ccp\n@@ -40,1 +40,1 @@\n- * @test id=no-coop-no-ccp\n+ * @test id=no-coops-no-ccp\n@@ -73,0 +73,14 @@\n+    private static final boolean COOP;\n+    private static final boolean CCP;\n+\n+    static {\n+        if (Platform.is64bit()) {\n+            RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+            List<String> vmargs = runtime.getInputArguments();\n+            CCP = !vmargs.contains(\"-XX:-UseCompressedClassPointers\");\n+            COOP = System.getProperty(\"java.vm.compressedOopsMode\") != null;\n+        } else {\n+            COOP = CCP = false;\n+        }\n+    }\n+\n@@ -77,6 +91,1 @@\n-            RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n-            List<String> vmargs = runtime.getInputArguments();\n-            if (vmargs.contains(\"-XX:-UseCompressedClassPointers\")) {\n-                intOffset = 20;\n-                longOffset = 24;\n-            } else {\n+            if (CCP) {\n@@ -85,0 +94,3 @@\n+            } else {\n+                intOffset = 20;\n+                longOffset = 24;\n@@ -98,4 +110,2 @@\n-        boolean narrowOops = System.getProperty(\"java.vm.compressedOopsMode\") != null ||\n-                             !Platform.is64bit();\n-        int expected_objary_offset = narrowOops ? intOffset : longOffset;\n-        Asserts.assertEquals(unsafe.arrayBaseOffset(Object[].class),  expected_objary_offset, \"Misplaced object  array base\");\n+        int expectedObjArrayOffset = (COOP || !Platform.is64bit()) ? intOffset : longOffset;\n+        Asserts.assertEquals(unsafe.arrayBaseOffset(Object[].class),  expectedObjArrayOffset, \"Misplaced object  array base\");\n","filename":"test\/hotspot\/jtreg\/runtime\/FieldLayout\/ArrayBaseOffsets.java","additions":23,"deletions":13,"binary":false,"changes":36,"status":"modified"}]}