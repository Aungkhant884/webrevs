{"files":[{"patch":"@@ -150,12 +150,2 @@\n-\n-      \/\/ How many words does each element take? For elements smaller than a full\n-      \/\/ word this will be 0 - which is correct because for such smaller elements\n-      \/\/ we would not trigger int overflow in word-sized calculations.\n-      int words_per_elem    = elem_size \/ HeapWordSize;\n-      \/\/ How many words does the header need? It's ok to ignore the alignment,\n-      \/\/ because elements are always aligned to their respective sizes, and\n-      \/\/ we really only care about (at least) word-sized elements here.\n-      size_t header_size_words = heap_word_size(base_offset_in_bytes(type));\n-      assert(header_size_words < max_jint, \"safe narrowing cast\");\n-      int header_size_elems = words_per_elem * (int)header_size_words;\n-      return max_jint - header_size_elems;\n+      int header_size_words = heap_word_size(base_offset_in_bytes(type));\n+      return align_down(max_jint - header_size_words, MinObjAlignment);\n","filename":"src\/hotspot\/share\/oops\/arrayOop.hpp","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-                long[] oa = new long[Integer.MAX_VALUE];\n+                Object[] oa = new Object[Integer.MAX_VALUE];\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestCrashOnOutOfMemoryError.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-                long[] oa = new long[Integer.MAX_VALUE];\n+                Object[] oa = new Object[Integer.MAX_VALUE];\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestExitOnOutOfMemoryError.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-            long[] oa = new long[Integer.MAX_VALUE];\n+            Object[] oa = new Object[Integer.MAX_VALUE];\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestOnOutOfMemoryError.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @requires vm.opt.UseCompressedClassPointers != false\n@@ -49,0 +50,1 @@\n+ * @requires vm.opt.UseCompressedClassPointers != false\n","filename":"test\/hotspot\/jtreg\/runtime\/FieldLayout\/ArrayBaseOffsets.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}