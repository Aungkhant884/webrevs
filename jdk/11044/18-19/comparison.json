{"files":[{"patch":"@@ -257,0 +257,1 @@\n+  assert((uint32_t)base_offset_in_ints <= max_jint - max_len, \"must not overflow signed int\");\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"oops\/arrayOop.hpp\"\n+\n+\/\/ Return the maximum length (num elements) of an array of BasicType.  The length can passed\n+\/\/ to typeArrayOop::object_size(scale, length, header_size) without causing an\n+\/\/ overflow. We also need to make sure that this will not overflow a size_t on\n+\/\/ 32 bit platforms when we convert it to a byte size.\n+int32_t arrayOopDesc::max_array_length(BasicType type) {\n+  assert(type >= 0 && type < T_CONFLICT, \"wrong type\");\n+  assert(type2aelembytes(type) != 0, \"wrong type\");\n+\n+  const int elem_size = type2aelembytes(type);\n+  const size_t max_size_bytes = align_down(SIZE_MAX - base_offset_in_bytes(type), MinObjAlignmentInBytes);\n+  assert(is_aligned(max_size_bytes, elem_size), \"max_size_bytes should be aligned to element size\");\n+  size_t max_elements_per_size_t = max_size_bytes \/ elem_size;\n+  if ((size_t)max_jint < max_elements_per_size_t) {\n+    \/\/ It should be ok to return max_jint here, but parts of the code\n+    \/\/ (CollectedHeap, Klass::oop_oop_iterate(), and more) uses an int for\n+    \/\/ passing around the size (in words) of an object. So, we need to avoid\n+    \/\/ overflowing an int when we add the header. See CRs 4718400 and 7110613.\n+    const size_t header_size_words = heap_word_size(base_offset_in_bytes(type));\n+    max_elements_per_size_t = align_down(max_jint - static_cast<int>(header_size_words), MinObjAlignment);\n+  }\n+  assert(max_elements_per_size_t <= (size_t)max_jint, \"must not overflow unsigned int\");\n+  assert(((jlong)max_elements_per_size_t * elem_size + base_offset_in_bytes(type)) \/ HeapWordSize <= (jlong)max_jint,\n+         \"total array size in bytes must not overflow signed int: max_elements_per_size_t\");\n+  return (int32_t)max_elements_per_size_t;\n+}\n","filename":"src\/hotspot\/share\/oops\/arrayOop.cpp","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -140,19 +140,1 @@\n-  static int32_t max_array_length(BasicType type) {\n-    assert(type >= 0 && type < T_CONFLICT, \"wrong type\");\n-    assert(type2aelembytes(type) != 0, \"wrong type\");\n-\n-    const int elem_size = type2aelembytes(type);\n-    const size_t max_size_bytes = align_down(SIZE_MAX - base_offset_in_bytes(type), MinObjAlignmentInBytes);\n-    assert(is_aligned(max_size_bytes, elem_size), \"max_size_bytes should be aligned to element size\");\n-    const size_t max_elements_per_size_t = max_size_bytes \/ elem_size;\n-    if ((size_t)max_jint < max_elements_per_size_t) {\n-      \/\/ It should be ok to return max_jint here, but parts of the code\n-      \/\/ (CollectedHeap, Klass::oop_oop_iterate(), and more) uses an int for\n-      \/\/ passing around the size (in words) of an object. So, we need to avoid\n-      \/\/ overflowing an int when we add the header. See CRs 4718400 and 7110613.\n-      const size_t header_size_words = heap_word_size(base_offset_in_bytes(type));\n-      return align_down(max_jint - static_cast<int>(header_size_words), MinObjAlignment);\n-    }\n-    return (int32_t)max_elements_per_size_t;\n-  }\n-\n+  static int32_t max_array_length(BasicType type);\n","filename":"src\/hotspot\/share\/oops\/arrayOop.hpp","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    { -1, false, false, -1 }\n+    { -1,         false,  false,   -1 }\n","filename":"test\/hotspot\/gtest\/oops\/test_objArrayOop.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}