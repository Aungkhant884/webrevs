{"files":[{"patch":"@@ -1687,1 +1687,0 @@\n-                          true \/* are_GC_task_threads *\/,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -435,1 +435,1 @@\n-  _concurrent_workers = new WorkGang(\"G1 Conc\", _max_concurrent_workers, false, true);\n+  _concurrent_workers = new WorkGang(\"G1 Conc\", _max_concurrent_workers, true);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -123,1 +123,0 @@\n-             true \/* are_GC_task_threads *\/,\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2148,1 +2148,1 @@\n-    assert(Thread::current()->is_GC_task_thread(), \"Must be a GC thread\");\n+    assert(Thread::current()->is_Worker_thread(), \"Must be a GC thread\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-WorkGang::WorkGang(const char* name, uint workers, bool are_GC_task_threads, bool are_ConcurrentGC_threads) :\n+WorkGang::WorkGang(const char* name, uint workers, bool are_ConcurrentGC_threads) :\n@@ -138,1 +138,0 @@\n-    _are_GC_task_threads(are_GC_task_threads),\n","filename":"src\/hotspot\/share\/gc\/shared\/workgroup.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -98,1 +98,0 @@\n-  const bool _are_GC_task_threads;\n@@ -119,1 +118,1 @@\n-  WorkGang(const char* name, uint workers, bool are_GC_task_threads, bool are_ConcurrentGC_threads);\n+  WorkGang(const char* name, uint workers, bool are_ConcurrentGC_threads);\n@@ -126,1 +125,0 @@\n-  bool are_GC_task_threads()      const { return _are_GC_task_threads; }\n@@ -220,1 +218,0 @@\n-  bool is_GC_task_thread() const override { return gang()->are_GC_task_threads(); }\n","filename":"src\/hotspot\/share\/gc\/shared\/workgroup.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -499,1 +499,0 @@\n-                            \/* are_GC_task_threads *\/ true,\n@@ -510,1 +509,0 @@\n-                      \/* are_GC_task_threads *\/ false,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n-           bool are_GC_task_threads,\n@@ -62,1 +61,1 @@\n-    WorkGang(name, workers, are_GC_task_threads, are_ConcurrentGC_threads), _initialize_gclab(false) {\n+    WorkGang(name, workers, are_ConcurrentGC_threads), _initialize_gclab(false) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahWorkGroup.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -83,2 +83,1 @@\n-    if (thread->is_ConcurrentGC_thread() &&\n-        !thread->is_GC_task_thread()) {\n+    if (thread->is_ConcurrentGC_thread() && !thread->is_Worker_thread()) {\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-             false \/* are_GC_task_threads *\/,\n","filename":"src\/hotspot\/share\/gc\/z\/zRuntimeWorkers.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -67,1 +67,0 @@\n-             true \/* are_GC_task_threads *\/,\n","filename":"src\/hotspot\/share\/gc\/z\/zWorkers.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -337,4 +337,0 @@\n-  \/\/ True iff the thread can perform GC operations at a safepoint.\n-  \/\/ Generally will be true only of VM thread and parallel GC WorkGang\n-  \/\/ threads.\n-  virtual bool is_GC_task_thread() const             { return false; }\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-      _work_gang = new WorkGang(\"G1 Small Workers\", MaxWorkers, false, false);\n+      _work_gang = new WorkGang(\"G1 Small Workers\", MaxWorkers, false);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1BatchedGangTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-      _workers = new WorkGang(\"G1CardSetTest Work Gang\", _max_workers, false, false);\n+      _workers = new WorkGang(\"G1CardSetTest Work Gang\", _max_workers, false);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1CardSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-      _work_gang = new WorkGang(\"G1 Small Workers\", MaxWorkers, false, false);\n+      _work_gang = new WorkGang(\"G1 Small Workers\", MaxWorkers, false);\n@@ -120,1 +120,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_stressCommitUncommit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -883,1 +883,0 @@\n-                            false,\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_oopStorage.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -81,1 +81,0 @@\n-                                false,\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_oopStorage_parperf.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}