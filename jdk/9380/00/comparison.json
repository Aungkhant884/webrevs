{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,4 @@\n-  Handle pd;\n+  int index = ik->shared_classpath_index();\n+  assert(index >= 0, \"Sanity\");\n+  SharedClassPathEntry* ent = FileMapInfo::shared_path(index);\n+  Symbol* class_name = ik->name();\n@@ -52,50 +55,43 @@\n-  if (ik != NULL) {\n-    int index = ik->shared_classpath_index();\n-    assert(index >= 0, \"Sanity\");\n-    SharedClassPathEntry* ent = FileMapInfo::shared_path(index);\n-    Symbol* class_name = ik->name();\n-\n-    if (ent->is_modules_image()) {\n-      \/\/ For shared app\/platform classes originated from the run-time image:\n-      \/\/   The ProtectionDomains are cached in the corresponding ModuleEntries\n-      \/\/   for fast access by the VM.\n-      \/\/ all packages from module image are already created during VM bootstrap in\n-      \/\/ Modules::define_module().\n-      assert(pkg_entry != NULL, \"archived class in module image cannot be from unnamed package\");\n-      ModuleEntry* mod_entry = pkg_entry->module();\n-      pd = get_shared_protection_domain(class_loader, mod_entry, CHECK_(pd));\n-    } else {\n-      \/\/ For shared app\/platform classes originated from JAR files on the class path:\n-      \/\/   Each of the 3 SystemDictionaryShared::_shared_xxx arrays has the same length\n-      \/\/   as the shared classpath table in the shared archive (see\n-      \/\/   FileMap::_shared_path_table in filemap.hpp for details).\n-      \/\/\n-      \/\/   If a shared InstanceKlass k is loaded from the class path, let\n-      \/\/\n-      \/\/     index = k->shared_classpath_index():\n-      \/\/\n-      \/\/   FileMap::_shared_path_table[index] identifies the JAR file that contains k.\n-      \/\/\n-      \/\/   k's protection domain is:\n-      \/\/\n-      \/\/     ProtectionDomain pd = _shared_protection_domains[index];\n-      \/\/\n-      \/\/   and k's Package is initialized using\n-      \/\/\n-      \/\/     manifest = _shared_jar_manifests[index];\n-      \/\/     url = _shared_jar_urls[index];\n-      \/\/     define_shared_package(class_name, class_loader, manifest, url, CHECK_(pd));\n-      \/\/\n-      \/\/   Note that if an element of these 3 _shared_xxx arrays is NULL, it will be initialized by\n-      \/\/   the corresponding SystemDictionaryShared::get_shared_xxx() function.\n-      Handle manifest = get_shared_jar_manifest(index, CHECK_(pd));\n-      Handle url = get_shared_jar_url(index, CHECK_(pd));\n-      int index_offset = index - ClassLoaderExt::app_class_paths_start_index();\n-      if (index_offset < PackageEntry::max_index_for_defined_in_class_path()) {\n-        if (pkg_entry == NULL || !pkg_entry->is_defined_by_cds_in_class_path(index_offset)) {\n-          \/\/ define_shared_package only needs to be called once for each package in a jar specified\n-          \/\/ in the shared class path.\n-          define_shared_package(class_name, class_loader, manifest, url, CHECK_(pd));\n-          if (pkg_entry != NULL) {\n-            pkg_entry->set_defined_by_cds_in_class_path(index_offset);\n-          }\n+  if (ent->is_modules_image()) {\n+    \/\/ For shared app\/platform classes originated from the run-time image:\n+    \/\/   The ProtectionDomains are cached in the corresponding ModuleEntries\n+    \/\/   for fast access by the VM.\n+    \/\/ all packages from module image are already created during VM bootstrap in\n+    \/\/ Modules::define_module().\n+    assert(pkg_entry != NULL, \"archived class in module image cannot be from unnamed package\");\n+    ModuleEntry* mod_entry = pkg_entry->module();\n+    return get_shared_protection_domain(class_loader, mod_entry, THREAD);\n+  } else {\n+    \/\/ For shared app\/platform classes originated from JAR files on the class path:\n+    \/\/   Each of the 3 SystemDictionaryShared::_shared_xxx arrays has the same length\n+    \/\/   as the shared classpath table in the shared archive (see\n+    \/\/   FileMap::_shared_path_table in filemap.hpp for details).\n+    \/\/\n+    \/\/   If a shared InstanceKlass k is loaded from the class path, let\n+    \/\/\n+    \/\/     index = k->shared_classpath_index():\n+    \/\/\n+    \/\/   FileMap::_shared_path_table[index] identifies the JAR file that contains k.\n+    \/\/\n+    \/\/   k's protection domain is:\n+    \/\/\n+    \/\/     ProtectionDomain pd = _shared_protection_domains[index];\n+    \/\/\n+    \/\/   and k's Package is initialized using\n+    \/\/\n+    \/\/     manifest = _shared_jar_manifests[index];\n+    \/\/     url = _shared_jar_urls[index];\n+    \/\/     define_shared_package(class_name, class_loader, manifest, url, CHECK_NH);\n+    \/\/\n+    \/\/   Note that if an element of these 3 _shared_xxx arrays is NULL, it will be initialized by\n+    \/\/   the corresponding SystemDictionaryShared::get_shared_xxx() function.\n+    Handle manifest = get_shared_jar_manifest(index, CHECK_NH);\n+    Handle url = get_shared_jar_url(index, CHECK_NH);\n+    int index_offset = index - ClassLoaderExt::app_class_paths_start_index();\n+    if (index_offset < PackageEntry::max_index_for_defined_in_class_path()) {\n+      if (pkg_entry == NULL || !pkg_entry->is_defined_by_cds_in_class_path(index_offset)) {\n+        \/\/ define_shared_package only needs to be called once for each package in a jar specified\n+        \/\/ in the shared class path.\n+        define_shared_package(class_name, class_loader, manifest, url, CHECK_NH);\n+        if (pkg_entry != NULL) {\n+          pkg_entry->set_defined_by_cds_in_class_path(index_offset);\n@@ -103,2 +99,0 @@\n-      } else {\n-        define_shared_package(class_name, class_loader, manifest, url, CHECK_(pd));\n@@ -106,1 +100,2 @@\n-      pd = get_shared_protection_domain(class_loader, index, url, CHECK_(pd));\n+    } else {\n+      define_shared_package(class_name, class_loader, manifest, url, CHECK_NH);\n@@ -108,0 +103,1 @@\n+    return get_shared_protection_domain(class_loader, index, url, THREAD);\n@@ -109,1 +105,0 @@\n-  return pd;\n","filename":"src\/hotspot\/share\/cds\/cdsProtectionDomain.cpp","additions":51,"deletions":56,"binary":false,"changes":107,"status":"modified"}]}