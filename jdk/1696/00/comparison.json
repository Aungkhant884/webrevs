{"files":[{"patch":"@@ -175,0 +175,4 @@\n+\n+size_t GCArguments::max_virtual_memory_fraction() {\n+  return MaxVirtMemFraction;\n+}\n","filename":"src\/hotspot\/share\/gc\/shared\/gcArguments.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+  virtual size_t max_virtual_memory_fraction();\n","filename":"src\/hotspot\/share\/gc\/shared\/gcArguments.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"runtime\/globals.hpp\"\n@@ -49,1 +50,1 @@\n-  const size_t limit = address_space_limit() \/ 2 \/ ZHeapViews;\n+  const size_t limit = address_space_limit() \/ MaxVirtMemFraction \/ ZHeapViews;\n","filename":"src\/hotspot\/share\/gc\/z\/zAddressSpaceLimit.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/z\/zGlobals.hpp\"\n@@ -97,0 +98,7 @@\n+size_t ZArguments::max_virtual_memory_fraction() {\n+  \/\/ Used by heap size heuristics to determine max amount of address\n+  \/\/ space to use. Inflates the default MaxVirtMemFraction to account\n+  \/\/ for all heap views and the virtual-to-physical ratio.\n+  return MaxVirtMemFraction * ZHeapViews * ZVirtualToPhysicalRatio;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zArguments.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+  virtual size_t max_virtual_memory_fraction();\n","filename":"src\/hotspot\/share\/gc\/z\/zArguments.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1662,1 +1662,1 @@\n-    result = MIN2(result, max_allocatable \/ MaxVirtMemFraction);\n+    result = MIN2(result, max_allocatable \/ GCConfig::arguments()->max_virtual_memory_fraction());\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}