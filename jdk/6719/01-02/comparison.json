{"files":[{"patch":"@@ -43,2 +43,0 @@\n-import java.io.ByteArrayOutputStream;\n-import java.io.PrintStream;\n@@ -122,1 +120,3 @@\n-                        public static void main(String... args) {\n+                        private static final String NL = \"\\\\n\";\n+                        private static StringBuilder output = new StringBuilder();\n+                        public static void doRun() {\n@@ -128,0 +128,4 @@\n+                        public static String run() {\n+                            doRun();\n+                            return output.toString();\n+                        }\n@@ -130,1 +134,1 @@\n-                            System.out.println(name);\n+                            output.append(name).append(NL);\n@@ -152,12 +156,1 @@\n-        PrintStream prevOut = System.out;\n-\n-        try (ByteArrayOutputStream out = new ByteArrayOutputStream();\n-             PrintStream ps = new PrintStream(out)) {\n-            System.setOut(ps);\n-\n-            URLClassLoader cl = new URLClassLoader(new URL[] {classes.toUri().toURL()});\n-\n-            cl.loadClass(\"Test\")\n-              .getMethod(\"main\", String[].class)\n-              .invoke(null, (Object) null);\n-            ps.flush();\n+        URLClassLoader cl = new URLClassLoader(new URL[] {classes.toUri().toURL()});\n@@ -165,5 +158,7 @@\n-            String actual = new String(out.toByteArray()).replace(\"\\\\R\", \"\\n\");\n-            String expected = \"a\\nb\\na\\nb\\n\";\n-            if (!Objects.equals(actual, expected)) {\n-                throw new AssertionError(\"expected: \" + expected + \"; but got: \" + actual);\n-            }\n+        String actual = (String) cl.loadClass(\"Test\")\n+                                   .getMethod(\"run\")\n+                                   .invoke(null);\n+        String expected = \"a\\nb\\na\\nb\\n\";\n+        if (!Objects.equals(actual, expected)) {\n+            throw new AssertionError(\"expected: \" + expected + \"; but got: \" + actual);\n+        }\n@@ -171,28 +166,24 @@\n-            Path testClass = classes.resolve(\"Test.class\");\n-            ClassFile cf = ClassFile.read(testClass);\n-            BootstrapMethods_attribute bootAttr =\n-                    (BootstrapMethods_attribute) cf.attributes.get(Attribute.BootstrapMethods);\n-            if (bootAttr.bootstrap_method_specifiers.length != 1) {\n-                throw new AssertionError(\"Incorrect number of bootstrap methods: \" +\n-                                         bootAttr.bootstrap_method_specifiers.length);\n-            }\n-            Code_attribute codeAttr =\n-                    (Code_attribute) cf.methods[1].attributes.get(Attribute.Code);\n-            Set<Integer> seenBootstraps = new HashSet<>();\n-            Set<Integer> seenNameAndTypes = new HashSet<>();\n-            Set<String> seenNames = new HashSet<>();\n-            for (Instruction i : codeAttr.getInstructions()) {\n-                switch (i.getOpcode()) {\n-                    case INVOKEDYNAMIC -> {\n-                        int idx = i.getUnsignedShort(1);\n-                        CONSTANT_InvokeDynamic_info dynamicInfo =\n-                                (CONSTANT_InvokeDynamic_info) cf.constant_pool.get(idx);\n-                        seenBootstraps.add(dynamicInfo.bootstrap_method_attr_index);\n-                        seenNameAndTypes.add(dynamicInfo.name_and_type_index);\n-                        CONSTANT_NameAndType_info nameAndTypeInfo =\n-                                cf.constant_pool.getNameAndTypeInfo(dynamicInfo.name_and_type_index);\n-                        seenNames.add(nameAndTypeInfo.getName());\n-                    }\n-                    case RETURN -> {}\n-                    default -> throw new AssertionError(\"Unexpected instruction: \" + i.getOpcode());\n-                }\n+        Path testClass = classes.resolve(\"Test.class\");\n+        ClassFile cf = ClassFile.read(testClass);\n+        BootstrapMethods_attribute bootAttr =\n+                (BootstrapMethods_attribute) cf.attributes.get(Attribute.BootstrapMethods);\n+        if (bootAttr.bootstrap_method_specifiers.length != 1) {\n+            throw new AssertionError(\"Incorrect number of bootstrap methods: \" +\n+                                     bootAttr.bootstrap_method_specifiers.length);\n+        }\n+        Code_attribute codeAttr =\n+                (Code_attribute) cf.methods[1].attributes.get(Attribute.Code);\n+        Set<Integer> seenBootstraps = new HashSet<>();\n+        Set<Integer> seenNameAndTypes = new HashSet<>();\n+        Set<String> seenNames = new HashSet<>();\n+        for (Instruction i : codeAttr.getInstructions()) {\n+            switch (i.getOpcode()) {\n+                case INVOKEDYNAMIC -> {\n+                    int idx = i.getUnsignedShort(1);\n+                    CONSTANT_InvokeDynamic_info dynamicInfo =\n+                            (CONSTANT_InvokeDynamic_info) cf.constant_pool.get(idx);\n+                    seenBootstraps.add(dynamicInfo.bootstrap_method_attr_index);\n+                    seenNameAndTypes.add(dynamicInfo.name_and_type_index);\n+                    CONSTANT_NameAndType_info nameAndTypeInfo =\n+                            cf.constant_pool.getNameAndTypeInfo(dynamicInfo.name_and_type_index);\n+                    seenNames.add(nameAndTypeInfo.getName());\n@@ -200,5 +191,2 @@\n-            if (seenBootstraps.size() != 1) {\n-                throw new AssertionError(\"Unexpected bootstraps: \" + seenBootstraps);\n-            }\n-            if (seenNameAndTypes.size() != 2) {\n-                throw new AssertionError(\"Unexpected names and types: \" + seenNameAndTypes);\n+                case RETURN -> {}\n+                default -> throw new AssertionError(\"Unexpected instruction: \" + i.getOpcode());\n@@ -206,2 +194,0 @@\n-            if (!seenNames.equals(Set.of(\"a\", \"b\"))) {\n-                throw new AssertionError(\"Unexpected names and types: \" + seenNames);\n@@ -209,3 +195,8 @@\n-\n-        } finally {\n-            System.setOut(prevOut);\n+        if (seenBootstraps.size() != 1) {\n+            throw new AssertionError(\"Unexpected bootstraps: \" + seenBootstraps);\n+        }\n+        if (seenNameAndTypes.size() != 2) {\n+            throw new AssertionError(\"Unexpected names and types: \" + seenNameAndTypes);\n+        }\n+        if (!seenNames.equals(Set.of(\"a\", \"b\"))) {\n+            throw new AssertionError(\"Unexpected names and types: \" + seenNames);\n","filename":"test\/langtools\/tools\/javac\/classwriter\/IndyCorrectInvocationName.java","additions":50,"deletions":59,"binary":false,"changes":109,"status":"modified"}]}