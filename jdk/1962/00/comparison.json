{"files":[{"patch":"@@ -1,264 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jpackage.internal;\n-\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.text.MessageFormat;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.ResourceBundle;\n-\n-import static jdk.jpackage.internal.StandardBundlerParam.VERBOSE;\n-import static jdk.jpackage.internal.StandardBundlerParam.APP_NAME;\n-import static jdk.jpackage.internal.MacAppBundler.DEVELOPER_ID_APP_SIGNING_KEY;\n-import static jdk.jpackage.internal.MacAppBundler.DEFAULT_ICNS_ICON;\n-import static jdk.jpackage.internal.MacAppBundler.BUNDLE_ID_SIGNING_PREFIX;\n-\n-public class MacAppStoreBundler extends MacBaseInstallerBundler {\n-\n-    private static final ResourceBundle I18N = ResourceBundle.getBundle(\n-            \"jdk.jpackage.internal.resources.MacResources\");\n-\n-    private static final String TEMPLATE_BUNDLE_ICON_HIDPI = \"java.icns\";\n-\n-    public static final BundlerParamInfo<String> MAC_APP_STORE_APP_SIGNING_KEY =\n-            new StandardBundlerParam<>(\n-            \"mac.signing-key-app\",\n-            String.class,\n-            params -> {\n-                String result = MacBaseInstallerBundler.findKey(\n-                        \"3rd Party Mac Developer Application: \",\n-                        SIGNING_KEY_USER.fetchFrom(params),\n-                        SIGNING_KEYCHAIN.fetchFrom(params),\n-                        VERBOSE.fetchFrom(params));\n-                if (result != null) {\n-                    MacCertificate certificate = new MacCertificate(result);\n-\n-                    if (!certificate.isValid()) {\n-                        Log.error(MessageFormat.format(\n-                                I18N.getString(\"error.certificate.expired\"),\n-                                result));\n-                    }\n-                }\n-\n-                return result;\n-            },\n-            (s, p) -> s);\n-\n-    public static final BundlerParamInfo<String> MAC_APP_STORE_PKG_SIGNING_KEY =\n-            new StandardBundlerParam<>(\n-            \"mac.signing-key-pkg\",\n-            String.class,\n-            params -> {\n-                String result = MacBaseInstallerBundler.findKey(\n-                        \"3rd Party Mac Developer Installer: \",\n-                        SIGNING_KEY_USER.fetchFrom(params),\n-                        SIGNING_KEYCHAIN.fetchFrom(params),\n-                        VERBOSE.fetchFrom(params));\n-\n-                if (result != null) {\n-                    MacCertificate certificate = new MacCertificate(result);\n-\n-                    if (!certificate.isValid()) {\n-                        Log.error(MessageFormat.format(\n-                                I18N.getString(\"error.certificate.expired\"),\n-                                result));\n-                    }\n-                }\n-\n-                return result;\n-            },\n-            (s, p) -> s);\n-\n-    public static final BundlerParamInfo<String> INSTALLER_SUFFIX =\n-            new StandardBundlerParam<> (\n-            \"mac.app-store.installerName.suffix\",\n-            String.class,\n-            params -> \"-MacAppStore\",\n-            (s, p) -> s);\n-\n-    public Path bundle(Map<String, ? super Object> params,\n-            Path outdir) throws PackagerException {\n-        Log.verbose(MessageFormat.format(I18N.getString(\n-                \"message.building-bundle\"), APP_NAME.fetchFrom(params)));\n-\n-        IOUtils.writableOutputDir(outdir);\n-\n-        \/\/ first, load in some overrides\n-        \/\/ icns needs @2 versions, so load in the @2 default\n-        params.put(DEFAULT_ICNS_ICON.getID(), TEMPLATE_BUNDLE_ICON_HIDPI);\n-\n-        \/\/ now we create the app\n-        Path appImageDir = APP_IMAGE_TEMP_ROOT.fetchFrom(params);\n-        try {\n-            Files.createDirectories(appImageDir);\n-\n-            try {\n-                MacAppImageBuilder.addNewKeychain(params);\n-            } catch (InterruptedException e) {\n-                Log.error(e.getMessage());\n-            }\n-            \/\/ first, make sure we don't use the local signing key\n-            params.put(DEVELOPER_ID_APP_SIGNING_KEY.getID(), null);\n-            Path appLocation = prepareAppBundle(params);\n-\n-            String signingIdentity =\n-                    MAC_APP_STORE_APP_SIGNING_KEY.fetchFrom(params);\n-            String identifierPrefix =\n-                    BUNDLE_ID_SIGNING_PREFIX.fetchFrom(params);\n-            MacAppImageBuilder.prepareEntitlements(params);\n-\n-            MacAppImageBuilder.signAppBundle(params, appLocation,\n-                    signingIdentity, identifierPrefix,\n-                    MacAppImageBuilder.getConfig_Entitlements(params));\n-            MacAppImageBuilder.restoreKeychainList(params);\n-\n-            ProcessBuilder pb;\n-\n-            \/\/ create the final pkg file\n-            Path finalPKG = outdir.resolve(MAC_INSTALLER_NAME.fetchFrom(params)\n-                    + INSTALLER_SUFFIX.fetchFrom(params)\n-                    + \".pkg\");\n-            Files.createDirectories(outdir);\n-\n-            String installIdentify =\n-                    MAC_APP_STORE_PKG_SIGNING_KEY.fetchFrom(params);\n-\n-            List<String> buildOptions = new ArrayList<>();\n-            buildOptions.add(\"\/usr\/bin\/productbuild\");\n-            buildOptions.add(\"--component\");\n-            buildOptions.add(appLocation.toString());\n-            buildOptions.add(\"\/Applications\");\n-            buildOptions.add(\"--sign\");\n-            buildOptions.add(installIdentify);\n-            buildOptions.add(\"--product\");\n-            buildOptions.add(appLocation + \"\/Contents\/Info.plist\");\n-            String keychainName = SIGNING_KEYCHAIN.fetchFrom(params);\n-            if (keychainName != null && !keychainName.isEmpty()) {\n-                buildOptions.add(\"--keychain\");\n-                buildOptions.add(keychainName);\n-            }\n-            buildOptions.add(finalPKG.toAbsolutePath().toString());\n-\n-            pb = new ProcessBuilder(buildOptions);\n-\n-            IOUtils.exec(pb);\n-            return finalPKG;\n-        } catch (PackagerException pe) {\n-            throw pe;\n-        } catch (Exception ex) {\n-            Log.verbose(ex);\n-            throw new PackagerException(ex);\n-        }\n-    }\n-\n-    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-    \/\/ Implement Bundler\n-    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-\n-    @Override\n-    public String getName() {\n-        return I18N.getString(\"store.bundler.name\");\n-    }\n-\n-    @Override\n-    public String getID() {\n-        return \"mac.appStore\";\n-    }\n-\n-    @Override\n-    public boolean validate(Map<String, ? super Object> params)\n-            throws ConfigException {\n-        try {\n-            Objects.requireNonNull(params);\n-\n-            \/\/ hdiutil is always available so there's no need to test for\n-            \/\/ availability.\n-            \/\/ run basic validation to ensure requirements are met\n-\n-            \/\/ we are not interested in return code, only possible exception\n-            validateAppImageAndBundeler(params);\n-\n-            \/\/ reject explicitly set to not sign\n-            if (!Optional.ofNullable(MacAppImageBuilder.\n-                    SIGN_BUNDLE.fetchFrom(params)).orElse(Boolean.TRUE)) {\n-                throw new ConfigException(\n-                        I18N.getString(\"error.must-sign-app-store\"),\n-                        I18N.getString(\"error.must-sign-app-store.advice\"));\n-            }\n-\n-            \/\/ make sure we have settings for signatures\n-            if (MAC_APP_STORE_APP_SIGNING_KEY.fetchFrom(params) == null) {\n-                throw new ConfigException(\n-                        I18N.getString(\"error.no-app-signing-key\"),\n-                        I18N.getString(\"error.no-app-signing-key.advice\"));\n-            }\n-            if (MAC_APP_STORE_PKG_SIGNING_KEY.fetchFrom(params) == null) {\n-                throw new ConfigException(\n-                        I18N.getString(\"error.no-pkg-signing-key\"),\n-                        I18N.getString(\"error.no-pkg-signing-key.advice\"));\n-            }\n-\n-            \/\/ things we could check...\n-            \/\/ check the icons, make sure it has hidpi icons\n-            \/\/ check the category,\n-            \/\/ make sure it fits in the list apple has provided\n-            \/\/ validate bundle identifier is reverse dns\n-            \/\/ check for \\a+\\.\\a+\\..\n-\n-            return true;\n-        } catch (RuntimeException re) {\n-            if (re.getCause() instanceof ConfigException) {\n-                throw (ConfigException) re.getCause();\n-            } else {\n-                throw new ConfigException(re);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public Path execute(Map<String, ? super Object> params,\n-            Path outputParentDir) throws PackagerException {\n-        return bundle(params, outputParentDir);\n-    }\n-\n-    @Override\n-    public boolean supported(boolean runtimeInstaller) {\n-        \/\/ return (!runtimeInstaller &&\n-        \/\/         Platform.getPlatform() == Platform.MAC);\n-        return false; \/\/ mac-app-store not yet supported\n-    }\n-\n-    @Override\n-    public boolean isDefault() {\n-        return false;\n-    }\n-\n-}\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppStoreBundler.java","additions":0,"deletions":264,"binary":false,"changes":264,"status":"deleted"},{"patch":"@@ -28,1 +28,0 @@\n-    jdk.jpackage.internal.MacAppStoreBundler,\n","filename":"src\/jdk.jpackage\/macosx\/classes\/module-info.java.extra","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}