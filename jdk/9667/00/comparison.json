{"files":[{"patch":"@@ -54,0 +54,9 @@\n+ * @implNote This implementation updates and only updates the message digest\n+ *      with data actually read from the input stream when it is turned on.\n+ *      This includes various {@code read} methods, {@code transferTo},\n+ *      {@code readAllBytes}, and {@code readNBytes}. Specifically, data\n+ *      bypassed by the {@code skip} method are ignored. On the other hand,\n+ *      if the underlying stream supports the {@code mark} and\n+ *      {@code reset} methods, and the same data is read again after\n+ *      {@code reset}, then the message digest is updated again.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/security\/DigestInputStream.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.security.DigestInputStream;\n+import java.security.MessageDigest;\n+\n+\/**\n+ * @test\n+ * @bug 6587699\n+ * @summary Document DigestInputStream behavior when skip() or mark() \/ reset() is used\n+ * @library \/test\/lib\n+ *\/\n+\n+public class TestSkipAndReset {\n+    public static void main(String[] args) throws Exception {\n+        byte[] data = \"1234567890\".getBytes(StandardCharsets.UTF_8);\n+        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+        DigestInputStream dis = new DigestInputStream(new ByteArrayInputStream(data), md);\n+\n+        dis.read(); \/\/ read 1\n+        dis.read(new byte[2], 0, 1); \/\/ read 2\n+        dis.skip(3); \/\/ skip 3 4 5\n+        dis.mark(10); \/\/ remember 5\n+        dis.read(new byte[2]); \/\/ read 6 7\n+        dis.skip(1); \/\/ skip 8\n+        dis.read(); \/\/ read 9\n+        dis.reset(); \/\/ back to 5\n+        dis.readNBytes(3); \/\/ read 6 7 8\n+        dis.reset(); \/\/ back to 5\n+        dis.skip(2); \/\/ skip 6 7\n+        dis.readAllBytes(); \/\/ read 8 9 0\n+        dis.reset(); \/\/ back to 5\n+        dis.skip(3); \/\/ skip 6 7 8\n+        dis.transferTo(new ByteArrayOutputStream()); \/\/ read 9 0\n+\n+        byte[] hash = md.digest();\n+        byte[] directHash = md.digest(\"1267967889090\".getBytes(StandardCharsets.UTF_8));\n+\n+        Asserts.assertTrue(MessageDigest.isEqual(hash, directHash));\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/DigestInputStream\/TestSkipAndReset.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}