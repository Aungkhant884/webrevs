{"files":[{"patch":"@@ -557,0 +557,6 @@\n+  product(intx, HeapDumpGzipLevel, 0, MANAGEABLE,                           \\\n+          \"When HeapDumpOnOutOfMemoryError is on, the gzip compression \"    \\\n+          \"level of the dump file. 0 (the default) disables gzip \"          \\\n+          \"compression. Otherwise the level must be between 1 and 9.\")      \\\n+          range(0, 9)                                                       \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -2032,1 +2032,1 @@\n-  const char* dump_file_ext  = \".hprof\";\n+  const char* dump_file_ext  = HeapDumpGzipLevel > 0 ? \".hprof.gz\" : \".hprof\";\n@@ -2099,1 +2099,1 @@\n-  dumper.dump(my_path, tty);\n+  dumper.dump(my_path, tty, HeapDumpGzipLevel);\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2021 SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test verifies that -XX:HeapDumpGzipLevel=0 works\n+ * @library \/test\/lib\n+ * @run driver\/timeout=240 TestGZippedHeapDumpOnOutOfMemoryError run 0\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test verifies that -XX:HeapDumpGzipLevel=1 works\n+ * @library \/test\/lib\n+ * @run driver\/timeout=240 TestGZippedHeapDumpOnOutOfMemoryError run 1\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.hprof.HprofParser;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.io.File;\n+\n+public class TestGZippedHeapDumpOnOutOfMemoryError {\n+\n+    static volatile Object[] oa;\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 2) {\n+            test(Integer.parseInt(args[1]));\n+            return;\n+        }\n+\n+        try {\n+            oa = new Object[Integer.MAX_VALUE];\n+            throw new Error(\"OOME not triggered\");\n+        } catch (OutOfMemoryError err) {\n+            \/\/ Ignore\n+        }\n+    }\n+\n+    static void test(int level) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+            \"-XX:+HeapDumpOnOutOfMemoryError\",\n+            \"-XX:HeapDumpGzipLevel=\" + level,\n+            \"-Xmx128M\",\n+            TestGZippedHeapDumpOnOutOfMemoryError.class.getName());\n+\n+        Process proc = pb.start();\n+        String heapdumpFilename = \"java_pid\" + proc.pid() + \".hprof\" + (level > 0 ? \".gz\" : \"\");\n+        OutputAnalyzer output = new OutputAnalyzer(proc);\n+        output.stdoutShouldNotBeEmpty();\n+        output.shouldContain(\"Dumping heap to \" + heapdumpFilename);\n+        File dump = new File(heapdumpFilename);\n+        Asserts.assertTrue(dump.exists() && dump.isFile(),\n+                \"Could not find dump file \" + dump.getAbsolutePath());\n+\n+        HprofParser.parse(new File(heapdumpFilename));\n+        System.out.println(\"PASSED\");\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestGZippedHeapDumpOnOutOfMemoryError.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}