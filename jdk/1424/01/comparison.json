{"files":[{"patch":"@@ -467,0 +467,3 @@\n+        if (timeout <= 0) {\n+            return false;\n+        }\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/LWCToolkit.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,34 @@\n-import java.awt.*;\n+import java.awt.AWTEvent;\n+import java.awt.AWTException;\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.Checkbox;\n+import java.awt.Choice;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.DefaultKeyboardFocusManager;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FocusTraversalPolicy;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Graphics2D;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.HeadlessException;\n+import java.awt.Image;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.Label;\n+import java.awt.MenuComponent;\n+import java.awt.Panel;\n+import java.awt.RenderingHints;\n+import java.awt.ScrollPane;\n+import java.awt.Scrollbar;\n+import java.awt.SystemTray;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.Toolkit;\n+import java.awt.TrayIcon;\n+import java.awt.Window;\n@@ -38,0 +71,1 @@\n+import java.awt.image.MultiResolutionImage;\n@@ -41,1 +75,0 @@\n-import java.awt.peer.MouseInfoPeer;\n@@ -58,0 +91,1 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n@@ -65,1 +99,0 @@\n-import java.awt.image.MultiResolutionImage;\n@@ -75,1 +108,7 @@\n-import static java.awt.RenderingHints.*;\n+import static java.awt.RenderingHints.KEY_TEXT_ANTIALIASING;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_GASP;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HBGR;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_VBGR;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_VRGB;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_ON;\n@@ -1380,4 +1419,0 @@\n-    @SuppressWarnings(\"serial\")\n-    public static class InfiniteLoop extends RuntimeException {\n-    }\n-\n@@ -1394,3 +1429,3 @@\n-    private static final int MAX_ITERS = 20;\n-    private static final int MIN_ITERS = 0;\n-    private static final int MINIMAL_EDELAY = 0;\n+    private static final int MAX_ITERS = 100;\n+    private static final int MIN_ITERS = 1;\n+    private static final int MINIMAL_DELAY = 5;\n@@ -1401,1 +1436,1 @@\n-    public void realSync() throws OperationTimedOut, InfiniteLoop {\n+    public void realSync() throws OperationTimedOut {\n@@ -1450,2 +1485,1 @@\n-    public void realSync(final long timeout) throws OperationTimedOut, InfiniteLoop\n-    {\n+    public void realSync(final long timeout) throws OperationTimedOut {\n@@ -1455,0 +1489,5 @@\n+        try {\n+            \/\/ We should wait unconditionally for the first event on EDT\n+            EventQueue.invokeAndWait(() -> {\/*dummy implementation*\/});\n+        } catch (InterruptedException | InvocationTargetException ignored) {\n+        }\n@@ -1456,0 +1495,1 @@\n+        long end = TimeUnit.NANOSECONDS.toMillis(System.nanoTime()) + timeout;\n@@ -1457,0 +1497,3 @@\n+            if (timeout(end) < 0) {\n+                return;\n+            }\n@@ -1467,1 +1510,1 @@\n-                syncNativeQueue(timeout);\n+                syncNativeQueue(timeout(end));\n@@ -1470,1 +1513,1 @@\n-            while (syncNativeQueue(timeout) && iters < MAX_ITERS) {\n+            while (syncNativeQueue(timeout(end)) && iters < MAX_ITERS) {\n@@ -1473,3 +1516,0 @@\n-            if (iters >= MAX_ITERS) {\n-                throw new InfiniteLoop();\n-            }\n@@ -1486,1 +1526,1 @@\n-                waitForIdle(timeout);\n+                waitForIdle(timeout(end));\n@@ -1489,1 +1529,1 @@\n-            while (waitForIdle(timeout) && iters < MAX_ITERS) {\n+            while (waitForIdle(end) && iters < MAX_ITERS) {\n@@ -1492,3 +1532,0 @@\n-            if (iters >= MAX_ITERS) {\n-                throw new InfiniteLoop();\n-            }\n@@ -1500,1 +1537,6 @@\n-        } while ((syncNativeQueue(timeout) || waitForIdle(timeout)) && bigLoop < MAX_ITERS);\n+        } while ((syncNativeQueue(timeout(end)) || waitForIdle(end))\n+                && bigLoop < MAX_ITERS);\n+    }\n+\n+    private long timeout(long end){\n+        return end - TimeUnit.NANOSECONDS.toMillis(System.nanoTime());\n@@ -1511,1 +1553,1 @@\n-    protected abstract boolean syncNativeQueue(final long timeout);\n+    protected abstract boolean syncNativeQueue(long timeout);\n@@ -1513,2 +1555,0 @@\n-    private boolean eventDispatched;\n-    private boolean queueEmpty;\n@@ -1530,1 +1570,1 @@\n-    protected final boolean waitForIdle(final long timeout) {\n+    private final boolean waitForIdle(final long end) {\n@@ -1533,0 +1573,2 @@\n+        final AtomicBoolean queueEmpty = new AtomicBoolean();\n+        final AtomicBoolean eventDispatched = new AtomicBoolean();\n@@ -1535,2 +1577,0 @@\n-            queueEmpty = false;\n-            eventDispatched = false;\n@@ -1548,1 +1588,1 @@\n-                                  syncNativeQueue(timeout);\n+                                  syncNativeQueue(timeout(end));\n@@ -1551,1 +1591,1 @@\n-                              while (syncNativeQueue(timeout) && iters < MAX_ITERS) {\n+                              while (syncNativeQueue(timeout(end)) && iters < MAX_ITERS) {\n@@ -1557,2 +1597,2 @@\n-                                  queueEmpty = isEQEmpty();\n-                                  eventDispatched = true;\n+                                  queueEmpty.set(isEQEmpty());\n+                                  eventDispatched.set(true);\n@@ -1564,2 +1604,2 @@\n-                while (!eventDispatched) {\n-                    waitLock.wait();\n+                while (!eventDispatched.get() && timeout(end) > 0) {\n+                    waitLock.wait(timeout(end));\n@@ -1573,1 +1613,1 @@\n-            Thread.sleep(MINIMAL_EDELAY);\n+            Thread.sleep(MINIMAL_DELAY);\n@@ -1582,1 +1622,1 @@\n-            return !(queueEmpty && isEQEmpty() && queueWasEmpty);\n+            return !(queueEmpty.get() && isEQEmpty() && queueWasEmpty);\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/SunToolkit.java","additions":80,"deletions":40,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -2432,0 +2432,3 @@\n+        if (timeout <= 0) {\n+            return false;\n+        }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XToolkit.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1237,1 +1237,1 @@\n-    public native boolean syncNativeQueue(final long timeout);\n+    public native boolean syncNativeQueue(long timeout);\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WToolkit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3007,0 +3007,3 @@\n+    if (timeout <= 0) {\n+        return JNI_FALSE;\n+    }\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Toolkit.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -761,1 +761,0 @@\n-javax\/swing\/text\/JTextComponent\/5074573\/bug5074573.java 8196100 windows-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Robot;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+\/**\n+ * @test\n+ * @key headful\n+ * @bug 8196100\n+ * @summary Checks that current event is flushed by the Robot.waitForIdle()\n+ *\/\n+public final class FlushCurrentEvent {\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        AtomicBoolean done = new AtomicBoolean();\n+        EventQueue.invokeLater(() -> {\n+            robot.delay(15000);\n+            done.set(true);\n+        });\n+        robot.waitForIdle();\n+        if (!done.get()) {\n+            throw new RuntimeException(\"Current event was not flushed\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Robot\/FlushCurrentEvent.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * @test\n+ * @key headful\n+ * @bug 8196100\n+ * @summary Checks that Robot.waitForIdle() works if EDT is overloaded\n+ *\/\n+public final class InfiniteLoopException {\n+\n+    public static void main(String[] args) throws Exception {\n+        Frame frame = new Frame();\n+        try {\n+            frame.setSize(300, 300);\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n+            test(frame);\n+        } finally {\n+            frame.dispose();\n+        }\n+    }\n+\n+    private static void test(Frame frame) throws Exception {\n+        Runnable repaint = () -> {\n+            while (frame.isDisplayable()) {\n+                frame.repaint();\n+            }\n+        };\n+        new Thread(repaint).start();\n+        new Thread(repaint).start();\n+        new Thread(repaint).start();\n+\n+        Robot robot = new Robot();\n+        long start = System.nanoTime();\n+        robot.waitForIdle();\n+        long time = TimeUnit.NANOSECONDS.toSeconds(System.nanoTime() - start);\n+        if (time > 20) {\n+            throw new RuntimeException(\"Too slow:\" + time);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Robot\/InfiniteLoopException.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @bug 5074573\n+ * @bug 5074573 8196100\n@@ -29,1 +29,0 @@\n- * @author Igor Kushnirskiy\n@@ -33,1 +32,0 @@\n-import java.util.*;\n@@ -35,4 +33,15 @@\n-import java.awt.Toolkit;\n-import java.awt.event.*;\n-import javax.swing.*;\n-import javax.swing.text.*;\n+import java.awt.event.KeyEvent;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.swing.JEditorPane;\n+import javax.swing.JFormattedTextField;\n+import javax.swing.JFrame;\n+import javax.swing.JPasswordField;\n+import javax.swing.JTextArea;\n+import javax.swing.JTextField;\n+import javax.swing.JTextPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.text.Caret;\n+import javax.swing.text.JTextComponent;\n@@ -151,0 +160,1 @@\n+            frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/javax\/swing\/text\/JTextComponent\/5074573\/bug5074573.java","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"}]}