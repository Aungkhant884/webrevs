{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -164,3 +164,0 @@\n-JNIEXPORT int JNICALL\n-NET_SocketAvailable(int fd, int *pbytes);\n-\n","filename":"src\/java.base\/share\/native\/libnet\/net_util.h","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include <sys\/ioctl.h>\n@@ -54,12 +53,0 @@\n-#define RESTARTABLE(_cmd, _result) do { \\\n-    do { \\\n-        _result = _cmd; \\\n-    } while((_result == -1) && (errno == EINTR)); \\\n-} while(0)\n-\n-int NET_SocketAvailable(int s, int *pbytes) {\n-    int result;\n-    RESTARTABLE(ioctl(s, FIONREAD, pbytes), result);\n-    return result;\n-}\n-\n","filename":"src\/java.base\/unix\/native\/libnet\/net_util_md.c","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include <sys\/ioctl.h>\n@@ -857,1 +858,4 @@\n-    if (NET_SocketAvailable(fdval(env, fdo), &count) != 0) {\n+    int result;\n+    RESTARTABLE(ioctl(fdval(env, fdo), FIONREAD, &count), result);\n+\n+    if (result != 0) {\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/Net.c","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -395,11 +395,0 @@\n-JNIEXPORT int JNICALL\n-NET_SocketAvailable(int s, int *pbytes) {\n-    u_long arg;\n-    if (ioctlsocket((SOCKET)s, FIONREAD, &arg) == SOCKET_ERROR) {\n-        return -1;\n-    } else {\n-        *pbytes = (int) arg;\n-        return 0;\n-    }\n-}\n-\n@@ -407,1 +396,1 @@\n- * Sets SO_ECLUSIVEADDRUSE if SO_REUSEADDR is not already set.\n+ * Sets SO_EXCLUSIVEADDRUSE if SO_REUSEADDR is not already set.\n","filename":"src\/java.base\/windows\/native\/libnet\/net_util_md.c","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"}]}