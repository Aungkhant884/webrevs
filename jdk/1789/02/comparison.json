{"files":[{"patch":"@@ -299,1 +299,1 @@\n-InstanceKlass* Dictionary::find_class(int index, unsigned int hash,\n+InstanceKlass* Dictionary::find_class(unsigned int hash,\n@@ -302,0 +302,2 @@\n+\n+  int index = hash_to_index(hash);\n","filename":"src\/hotspot\/share\/classfile\/dictionary.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  InstanceKlass* find_class(int index, unsigned int hash, Symbol* name);\n+  InstanceKlass* find_class(unsigned int hash, Symbol* name);\n","filename":"src\/hotspot\/share\/classfile\/dictionary.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -443,3 +443,2 @@\n-        unsigned int d_hash = dictionary->compute_hash(name);\n-        int d_index = dictionary->hash_to_index(d_hash);\n-        InstanceKlass* k = dictionary->find_class(d_index, d_hash, name);\n+        unsigned int name_hash = dictionary->compute_hash(name);\n+        InstanceKlass* k = dictionary->find_class(name_hash, name);\n@@ -453,4 +452,1 @@\n-          unsigned int p_hash = placeholders->compute_hash(name);\n-          int p_index = placeholders->hash_to_index(p_hash);\n-          PlaceholderEntry* entry = placeholders->get_entry(p_index, p_hash,\n-                                                            name, loader_data);\n+          PlaceholderEntry* entry = placeholders->get_entry(name_hash, name, loader_data);\n","filename":"src\/hotspot\/share\/classfile\/loaderConstraints.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n-#include \"classfile\/systemDictionary.hpp\"\n-#include \"oops\/oop.inline.hpp\"\n+#include \"runtime\/mutexLocker.hpp\"\n@@ -64,3 +63,3 @@\n-void PlaceholderTable::add_entry(int index, unsigned int hash,\n-                                 Symbol* class_name, ClassLoaderData* loader_data,\n-                                 bool havesupername, Symbol* supername){\n+PlaceholderEntry* PlaceholderTable::add_entry(unsigned int hash,\n+                                              Symbol* class_name, ClassLoaderData* loader_data,\n+                                              bool havesupername, Symbol* supername){\n@@ -73,1 +72,3 @@\n-  add_entry(index, entry);\n+  int index = hash_to_index(hash);\n+  Hashtable<Symbol*, mtClass>::add_entry(index, entry);\n+  return entry;\n@@ -78,1 +79,1 @@\n-void PlaceholderTable::remove_entry(int index, unsigned int hash,\n+void PlaceholderTable::remove_entry(unsigned int hash,\n@@ -82,0 +83,1 @@\n+  int index = hash_to_index(hash);\n@@ -83,1 +85,1 @@\n-  while (*p) {\n+  while (*p != NULL) {\n@@ -95,3 +97,3 @@\n-PlaceholderEntry* PlaceholderTable::get_entry(int index, unsigned int hash,\n-                                       Symbol* class_name,\n-                                       ClassLoaderData* loader_data) {\n+PlaceholderEntry* PlaceholderTable::get_entry(unsigned int hash,\n+                                              Symbol* class_name,\n+                                              ClassLoaderData* loader_data) {\n@@ -100,0 +102,1 @@\n+  int index = hash_to_index(hash);\n@@ -111,5 +114,5 @@\n-Symbol* PlaceholderTable::find_entry(int index, unsigned int hash,\n-                                       Symbol* class_name,\n-                                       ClassLoaderData* loader_data) {\n-  PlaceholderEntry* probe = get_entry(index, hash, class_name, loader_data);\n-  return (probe? probe->klassname(): (Symbol*)NULL);\n+Symbol* PlaceholderTable::find_entry(unsigned int hash,\n+                                     Symbol* class_name,\n+                                     ClassLoaderData* loader_data) {\n+  PlaceholderEntry* probe = get_entry(hash, class_name, loader_data);\n+  return (probe != NULL ? probe->klassname() : NULL);\n@@ -123,1 +126,1 @@\n-PlaceholderEntry* PlaceholderTable::find_and_add(int index, unsigned int hash,\n+PlaceholderEntry* PlaceholderTable::find_and_add(unsigned int hash,\n@@ -129,1 +132,1 @@\n-  PlaceholderEntry* probe = get_entry(index, hash, name, loader_data);\n+  PlaceholderEntry* probe = get_entry(hash, name, loader_data);\n@@ -132,2 +135,1 @@\n-    add_entry(index, hash, name, loader_data, (action == LOAD_SUPER), supername);\n-    probe = get_entry(index, hash, name, loader_data);\n+    probe = add_entry(hash, name, loader_data, (action == LOAD_SUPER), supername);\n@@ -140,1 +142,1 @@\n-  if (probe) probe->add_seen_thread(thread, action);\n+  probe->add_seen_thread(thread, action);\n@@ -158,1 +160,1 @@\n-void PlaceholderTable::find_and_remove(int index, unsigned int hash,\n+void PlaceholderTable::find_and_remove(unsigned int hash,\n@@ -163,1 +165,1 @@\n-    PlaceholderEntry *probe = get_entry(index, hash, name, loader_data);\n+    PlaceholderEntry *probe = get_entry(hash, name, loader_data);\n@@ -169,1 +171,1 @@\n-         remove_entry(index, hash, name, loader_data);\n+         remove_entry(hash, name, loader_data);\n","filename":"src\/hotspot\/share\/classfile\/placeholders.cpp","additions":26,"deletions":24,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,6 +53,3 @@\n-  void add_entry(int index, PlaceholderEntry* new_entry) {\n-    Hashtable<Symbol*, mtClass>::add_entry(index, (HashtableEntry<Symbol*, mtClass>*)new_entry);\n-  }\n-\n-  void add_entry(int index, unsigned int hash, Symbol* name,\n-                ClassLoaderData* loader_data, bool havesupername, Symbol* supername);\n+  PlaceholderEntry* add_entry(unsigned int hash, Symbol* name,\n+                              ClassLoaderData* loader_data,\n+                              bool havesupername, Symbol* supername);\n@@ -61,2 +58,2 @@\n-  Symbol* find_entry(int index, unsigned int hash,\n-                       Symbol* name, ClassLoaderData* loader_data);\n+  Symbol* find_entry(unsigned int hash,\n+                     Symbol* name, ClassLoaderData* loader_data);\n@@ -64,2 +61,2 @@\n-  PlaceholderEntry* get_entry(int index, unsigned int hash,\n-                       Symbol* name, ClassLoaderData* loader_data);\n+  PlaceholderEntry* get_entry(unsigned int hash,\n+                              Symbol* name, ClassLoaderData* loader_data);\n@@ -86,1 +83,1 @@\n-  PlaceholderEntry* find_and_add(int index, unsigned int hash,\n+  PlaceholderEntry* find_and_add(unsigned int hash,\n@@ -91,1 +88,1 @@\n-  void remove_entry(int index, unsigned int hash,\n+  void remove_entry(unsigned int hash,\n@@ -96,1 +93,1 @@\n-  void find_and_remove(int index, unsigned int hash,\n+  void find_and_remove(unsigned int hash,\n","filename":"src\/hotspot\/share\/classfile\/placeholders.hpp","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -404,3 +404,2 @@\n-  unsigned int d_hash = dictionary->compute_hash(child_name);\n-  unsigned int p_hash = placeholders()->compute_hash(child_name);\n-  int p_index = placeholders()->hash_to_index(p_hash);\n+  unsigned int name_hash = dictionary->compute_hash(child_name);\n+  assert(placeholders()->compute_hash(child_name) == name_hash, \"they're the same hashcode\");\n@@ -412,1 +411,1 @@\n-    InstanceKlass* childk = find_class(d_hash, child_name, dictionary);\n+    InstanceKlass* childk = dictionary->find_class(name_hash, child_name);\n@@ -426,1 +425,1 @@\n-      PlaceholderEntry* probe = placeholders()->get_entry(p_index, p_hash, child_name, loader_data);\n+      PlaceholderEntry* probe = placeholders()->get_entry(name_hash, child_name, loader_data);\n@@ -433,1 +432,1 @@\n-      PlaceholderEntry* newprobe = placeholders()->find_and_add(p_index, p_hash, child_name, loader_data, PlaceholderTable::LOAD_SUPER, super_name, THREAD);\n+      PlaceholderEntry* newprobe = placeholders()->find_and_add(name_hash, child_name, loader_data, PlaceholderTable::LOAD_SUPER, super_name, THREAD);\n@@ -458,1 +457,1 @@\n-    placeholders()->find_and_remove(p_index, p_hash, child_name, loader_data, PlaceholderTable::LOAD_SUPER, THREAD);\n+    placeholders()->find_and_remove(name_hash, child_name, loader_data, PlaceholderTable::LOAD_SUPER, THREAD);\n@@ -531,1 +530,1 @@\n-    unsigned int d_hash = dictionary->compute_hash(kn);\n+    unsigned int name_hash = dictionary->compute_hash(kn);\n@@ -534,2 +533,2 @@\n-    int d_index = dictionary->hash_to_index(d_hash);\n-    dictionary->add_protection_domain(d_index, d_hash, klass,\n+    int d_index = dictionary->hash_to_index(name_hash);\n+    dictionary->add_protection_domain(d_index, name_hash, klass,\n@@ -599,3 +598,1 @@\n-  unsigned int d_hash = dictionary->compute_hash(name);\n-  unsigned int p_hash = placeholders()->compute_hash(name);\n-  int p_index = placeholders()->hash_to_index(p_hash);\n+  unsigned int name_hash = dictionary->compute_hash(name);\n@@ -623,1 +620,1 @@\n-    return find_class(d_hash, name, dictionary);\n+    return dictionary->find_class(name_hash, name);\n@@ -633,1 +630,1 @@\n-    InstanceKlass* check = find_class(d_hash, name, dictionary);\n+    InstanceKlass* check = dictionary->find_class(name_hash, name);\n@@ -638,1 +635,1 @@\n-      placeholder = placeholders()->get_entry(p_index, p_hash, name, loader_data);\n+      placeholder = placeholders()->get_entry(name_hash, name, loader_data);\n@@ -699,1 +696,1 @@\n-  unsigned int d_hash = dictionary->compute_hash(name);\n+  unsigned int name_hash = dictionary->compute_hash(name);\n@@ -708,1 +705,1 @@\n-    InstanceKlass* probe = dictionary->find(d_hash, name, protection_domain);\n+    InstanceKlass* probe = dictionary->find(name_hash, name, protection_domain);\n@@ -726,2 +723,1 @@\n-  unsigned int p_hash = placeholders()->compute_hash(name);\n-  int p_index = placeholders()->hash_to_index(p_hash);\n+  assert(placeholders()->compute_hash(name) == name_hash, \"they're the same hashcode\");\n@@ -749,1 +745,1 @@\n-    InstanceKlass* check = find_class(d_hash, name, dictionary);\n+    InstanceKlass* check = dictionary->find_class(name_hash, name);\n@@ -755,1 +751,1 @@\n-      placeholder = placeholders()->get_entry(p_index, p_hash, name, loader_data);\n+      placeholder = placeholders()->get_entry(name_hash, name, loader_data);\n@@ -810,1 +806,1 @@\n-        PlaceholderEntry* oldprobe = placeholders()->get_entry(p_index, p_hash, name, loader_data);\n+        PlaceholderEntry* oldprobe = placeholders()->get_entry(name_hash, name, loader_data);\n@@ -830,1 +826,1 @@\n-              InstanceKlass* check = find_class(d_hash, name, dictionary);\n+              InstanceKlass* check = dictionary->find_class(name_hash, name);\n@@ -837,1 +833,1 @@\n-              oldprobe = placeholders()->get_entry(p_index, p_hash, name, loader_data);\n+              oldprobe = placeholders()->get_entry(name_hash, name, loader_data);\n@@ -847,1 +843,1 @@\n-        PlaceholderEntry* newprobe = placeholders()->find_and_add(p_index, p_hash, name, loader_data, PlaceholderTable::LOAD_INSTANCE, NULL, THREAD);\n+        PlaceholderEntry* newprobe = placeholders()->find_and_add(name_hash, name, loader_data, PlaceholderTable::LOAD_INSTANCE, NULL, THREAD);\n@@ -855,1 +851,1 @@\n-        InstanceKlass* check = find_class(d_hash, name, dictionary);\n+        InstanceKlass* check = dictionary->find_class(name_hash, name);\n@@ -881,1 +877,1 @@\n-        check_constraints(d_hash, k, class_loader, false, THREAD);\n+        check_constraints(name_hash, k, class_loader, false, THREAD);\n@@ -896,2 +892,1 @@\n-            update_dictionary(d_hash, p_index, p_hash,\n-              k, class_loader, THREAD);\n+            update_dictionary(name_hash, k, class_loader, THREAD);\n@@ -912,1 +907,1 @@\n-      placeholders()->find_and_remove(p_index, p_hash, name, loader_data, PlaceholderTable::LOAD_INSTANCE, THREAD);\n+      placeholders()->find_and_remove(name_hash, name, loader_data, PlaceholderTable::LOAD_INSTANCE, THREAD);\n@@ -936,1 +931,1 @@\n-  if (dictionary->is_valid_protection_domain(d_hash, name,\n+  if (dictionary->is_valid_protection_domain(name_hash, name,\n@@ -977,2 +972,2 @@\n-  unsigned int d_hash = dictionary->compute_hash(class_name);\n-  return dictionary->find(d_hash, class_name,\n+  unsigned int name_hash = dictionary->compute_hash(class_name);\n+  return dictionary->find(name_hash, class_name,\n@@ -1670,2 +1665,2 @@\n-  unsigned int d_hash = dictionary->compute_hash(name_h);\n-  check_constraints(d_hash, k, class_loader_h, true, CHECK);\n+  unsigned int name_hash = dictionary->compute_hash(name_h);\n+  check_constraints(name_hash, k, class_loader_h, true, CHECK);\n@@ -1688,2 +1683,1 @@\n-    unsigned int p_hash = placeholders()->compute_hash(name_h);\n-    int p_index = placeholders()->hash_to_index(p_hash);\n+    assert(name_hash == placeholders()->compute_hash(name_h), \"they're the same\");\n@@ -1699,2 +1693,1 @@\n-    update_dictionary(d_hash, p_index, p_hash,\n-                      k, class_loader_h, THREAD);\n+    update_dictionary(name_hash, k, class_loader_h, THREAD);\n@@ -1738,1 +1731,1 @@\n-  unsigned int d_hash = dictionary->compute_hash(name_h);\n+  unsigned int name_hash = dictionary->compute_hash(name_h);\n@@ -1741,2 +1734,1 @@\n-  unsigned int p_hash = placeholders()->compute_hash(name_h);\n-  int p_index = placeholders()->hash_to_index(p_hash);\n+  assert(placeholders()->compute_hash(name_h) == name_hash, \"they're the same hashcode\");\n@@ -1749,1 +1741,1 @@\n-      InstanceKlass* check = find_class(d_hash, name_h, dictionary);\n+      InstanceKlass* check = dictionary->find_class(name_hash, name_h);\n@@ -1756,1 +1748,1 @@\n-    probe = placeholders()->find_and_add(p_index, p_hash, name_h, loader_data, PlaceholderTable::DEFINE_CLASS, NULL, THREAD);\n+    probe = placeholders()->find_and_add(name_hash, name_h, loader_data, PlaceholderTable::DEFINE_CLASS, NULL, THREAD);\n@@ -1768,1 +1760,1 @@\n-        placeholders()->find_and_remove(p_index, p_hash, name_h, loader_data, PlaceholderTable::DEFINE_CLASS, THREAD);\n+        placeholders()->find_and_remove(name_hash, name_h, loader_data, PlaceholderTable::DEFINE_CLASS, THREAD);\n@@ -1771,1 +1763,1 @@\n-        InstanceKlass* check = find_class(d_hash, name_h, dictionary);\n+        InstanceKlass* check = dictionary->find_class(name_hash, name_h);\n@@ -1788,1 +1780,1 @@\n-    PlaceholderEntry* probe = placeholders()->get_entry(p_index, p_hash, name_h, loader_data);\n+    PlaceholderEntry* probe = placeholders()->get_entry(name_hash, name_h, loader_data);\n@@ -1798,1 +1790,1 @@\n-      placeholders()->find_and_remove(p_index, p_hash, name_h, loader_data, PlaceholderTable::DEFINE_CLASS, THREAD);\n+      placeholders()->find_and_remove(name_hash, name_h, loader_data, PlaceholderTable::DEFINE_CLASS, THREAD);\n@@ -1846,9 +1838,0 @@\n-InstanceKlass* SystemDictionary::find_class(unsigned int hash,\n-                                            Symbol* class_name,\n-                                            Dictionary* dictionary) {\n-  assert_locked_or_safepoint(SystemDictionary_lock);\n-  int index = dictionary->hash_to_index(hash);\n-  return dictionary->find_class(index, hash, class_name);\n-}\n-\n-\n@@ -1859,3 +1842,2 @@\n-  unsigned int p_hash = placeholders()->compute_hash(class_name);\n-  int p_index = placeholders()->hash_to_index(p_hash);\n-  return placeholders()->find_entry(p_index, p_hash, class_name, loader_data);\n+  unsigned int name_hash = placeholders()->compute_hash(class_name);\n+  return placeholders()->find_entry(name_hash, class_name, loader_data);\n@@ -1879,2 +1861,2 @@\n-  unsigned int d_hash = dictionary->compute_hash(class_name);\n-  return find_class(d_hash, class_name, dictionary);\n+  unsigned int name_hash = dictionary->compute_hash(class_name);\n+  return dictionary->find_class(name_hash, class_name);\n@@ -2176,1 +2158,1 @@\n-void SystemDictionary::check_constraints(unsigned int d_hash,\n+void SystemDictionary::check_constraints(unsigned int name_hash,\n@@ -2191,1 +2173,1 @@\n-    InstanceKlass* check = find_class(d_hash, name, loader_data->dictionary());\n+    InstanceKlass* check = loader_data->dictionary()->find_class(name_hash, name);\n@@ -2199,1 +2181,0 @@\n-      assert(check->is_instance_klass(), \"noninstance in systemdictionary\");\n@@ -2243,2 +2224,1 @@\n-void SystemDictionary::update_dictionary(unsigned int d_hash,\n-                                         int p_index, unsigned int p_hash,\n+void SystemDictionary::update_dictionary(unsigned int hash,\n@@ -2258,1 +2238,1 @@\n-    InstanceKlass* sd_check = find_class(d_hash, name, dictionary);\n+    InstanceKlass* sd_check = dictionary->find_class(hash, name);\n@@ -2260,1 +2240,1 @@\n-      dictionary->add_klass(d_hash, name, k);\n+      dictionary->add_klass(hash, name, k);\n@@ -2263,1 +2243,1 @@\n-    sd_check = find_class(d_hash, name, dictionary);\n+    sd_check = dictionary->find_class(hash, name);\n@@ -2343,1 +2323,1 @@\n-  unsigned int d_hash1 = dictionary1->compute_hash(constraint_name);\n+  unsigned int name_hash1 = dictionary1->compute_hash(constraint_name);\n@@ -2346,1 +2326,1 @@\n-  unsigned int d_hash2 = dictionary2->compute_hash(constraint_name);\n+  unsigned int name_hash2 = dictionary2->compute_hash(constraint_name);\n@@ -2350,2 +2330,2 @@\n-    InstanceKlass* klass1 = find_class(d_hash1, constraint_name, dictionary1);\n-    InstanceKlass* klass2 = find_class(d_hash2, constraint_name, dictionary2);\n+    InstanceKlass* klass1 = dictionary1->find_class(name_hash1, constraint_name);\n+    InstanceKlass* klass2 = dictionary2->find_class(name_hash2, constraint_name);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":55,"deletions":75,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -640,2 +640,0 @@\n-  static InstanceKlass* find_class(unsigned int hash,\n-                                   Symbol* name, Dictionary* dictionary);\n@@ -656,2 +654,1 @@\n-  static void update_dictionary(unsigned int d_hash,\n-                                int p_index, unsigned int p_hash,\n+  static void update_dictionary(unsigned int hash,\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1052,1 +1052,1 @@\n-        InstanceKlass* check = find_class(d_hash, name, dictionary);\n+        InstanceKlass* check = dictionary->find_class(d_hash, name);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}